source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1f664.5 = global i32 0
@global_var_1f674.6 = global i32* @global_var_1f664.5
@global_var_1f7d4.12 = global i32 0
@global_var_10094.18 = constant i32 -382906384
@global_var_16b4c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_14284.25 = constant i32 -382910448
@global_var_10000.26 = constant i32 129192
@global_var_16b44.28 = constant i32 32
@global_var_16b1c.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_16b34.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_16b40.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_16b54.36 = constant [9 x i8] c"Cookie: \00"
@global_var_16b60.38 = constant [3 x i8] c"; \00"
@global_var_16b64.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_16b6c.42 = constant i32 59
@global_var_16b70.44 = constant [5 x i8] c"http\00"
@global_var_16b78.46 = constant [5 x i8] c"url=\00"
@global_var_16b80.48 = constant [5 x i8] c"POST\00"
@global_var_138ec.49 = constant i32 -439275520
@global_var_16b88.51 = constant i32 39
@global_var_16b8c.53 = constant i32 61
@global_var_1f7f0.57 = global i32 0
@global_var_a0cc.58 = constant i32 -352321546
@global_var_14edc.59 = constant i32 -481296384
@global_var_1f7f4.61 = global i32 0
@global_var_1f7f8.62 = local_unnamed_addr global i32 0
@global_var_e394.68 = constant i32 -382906384
@global_var_e858.70 = constant i32 -382906384
@global_var_d740.72 = constant i32 -382906384
@global_var_cffc.75 = constant i32 -382906384
@global_var_c888.77 = constant i32 -382906384
@global_var_b7c8.79 = constant i32 -382906384
@global_var_c028.81 = constant i32 -382906384
@global_var_b0ac.83 = constant i32 -382906384
@global_var_a930.85 = constant i32 -382906384
@global_var_81cc.87 = constant i32 -382906384
@global_var_1f8a8.89 = global i32 0
@global_var_1f8b0.101 = global i32 0
@global_var_16b90.103 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1f814.107 = global i32 0
@global_var_1f8ac.109 = global i32 0
@global_var_10004.111 = constant i32 -382910352
@global_var_1f680.113 = global i32 80764
@global_var_1f678.115 = global i32 -1
@global_var_1f8b8.120 = local_unnamed_addr global i32 0
@global_var_1f8b7.121 = local_unnamed_addr global i32 0
@global_var_1f8b6.122 = local_unnamed_addr global i32 0
@global_var_fe7c.124 = constant i32 -442556408
@global_var_16ba0.126 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1f8b5.131 = local_unnamed_addr global i32 0
@global_var_16bf4.133 = constant [3 x i8] c"/.\00"
@global_var_16bd0.135 = constant i32 65172
@global_var_fe94.136 = constant i32 -382909968
@global_var_12fa0.138 = constant i32 -509607552
@global_var_13058.141 = constant i32 -382906384
@global_var_12ee8.143 = constant i32 -509607552
@global_var_16bf0.148 = constant i32 65148
@global_var_16bc4.150 = constant i32 10
@global_var_16bb0.152 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1f67c.154 = global i32 -1
@global_var_13b7c.159 = constant i32 -382910224
@global_var_16bc8.161 = constant i32 16777216
@global_var_1f81c.163 = global i32 0
@global_var_1f828.165 = global i32 0
@global_var_1f820.167 = global i32 0
@global_var_1f824.169 = global i32 0
@global_var_16c08.175 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_111d0.184 = constant i32 -442695668
@global_var_1f8cc.186 = global i32 0
@global_var_1f860.188 = global i32 0
@global_var_1f82c.190 = global i32 0
@global_var_1f858.192 = global i32 0
@global_var_1f8c4.200 = global i32 0
@global_var_1f8c8.202 = global i32 0
@global_var_1f833.205 = local_unnamed_addr global i32 0
@global_var_1f832.206 = local_unnamed_addr global i32 0
@global_var_1f844.208 = global i32 0
@global_var_1f838.210 = local_unnamed_addr global i32 0
@global_var_1f835.211 = local_unnamed_addr global i32 0
@global_var_1f845.212 = local_unnamed_addr global i32 0
@global_var_1f847.213 = local_unnamed_addr global i32 0
@global_var_1f839.214 = local_unnamed_addr global i32 0
@global_var_1f834.215 = local_unnamed_addr global i32 0
@global_var_1f846.216 = local_unnamed_addr global i32 0
@global_var_1f853.218 = local_unnamed_addr global i32 0
@global_var_1f852.219 = local_unnamed_addr global i32 0
@global_var_16d94.221 = constant [5 x i8] c"PMMV\00"
@global_var_16d9c.223 = constant i32 387006810
@global_var_16da4.225 = constant [6 x i8] c"TKXZT\00"
@global_var_16dac.227 = constant [6 x i8] c"CFOKL\00"
@global_var_16db4.229 = constant i32 437918234
@global_var_16dbc.231 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_16dc4.233 = constant [8 x i8] c"FGDCWNV\00"
@global_var_16dcc.235 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_16dd8.237 = constant i32 370216979
@global_var_16de0.239 = constant i32 269555223
@global_var_16de8.241 = constant [8 x i8] c"QWRRMPV\00"
@global_var_16b68.243 = constant i32 0
@global_var_16c2c.245 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_16c38.247 = constant i32 370216979
@global_var_16c40.249 = constant [5 x i8] c"WQGP\00"
@global_var_16c48.251 = constant [5 x i8] c"RCQQ\00"
@global_var_16c50.253 = constant i32 1263486531
@global_var_16c5c.255 = constant i32 320017171
@global_var_16c64.257 = constant [9 x i8] c"QOACFOKL\00"
@global_var_16c70.259 = constant i32 336860180
@global_var_16c78.261 = constant i32 370216979
@global_var_16c80.263 = constant i32 324292169
@global_var_16c88.265 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_16c98.267 = constant [7 x i8] c"OGKLQO\00"
@global_var_16ca0.269 = constant [8 x i8] c"QGPTKAG\00"
@global_var_16ca8.271 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_16cb4.273 = constant [6 x i8] c"EWGQV\00"
@global_var_16cbc.275 = constant i32 1263486531
@global_var_16cc4.277 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_16cd4.279 = constant [5 x i8] c"W@LV\00"
@global_var_16cdc.281 = constant i32 324292169
@global_var_16ce4.283 = constant i32 390551160
@global_var_16cec.285 = constant i32 387009354
@global_var_16cf4.287 = constant [6 x i8] c"HT@XF\00"
@global_var_16cfc.289 = constant [5 x i8] c"CLIM\00"
@global_var_16d04.291 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_16d0c.293 = constant i32 1867011861
@global_var_16d1c.295 = constant i32 1867011861
@global_var_16d2c.297 = constant [7 x i8] c"Q[QVGO\00"
@global_var_16d34.299 = constant [5 x i8] c"KIU@\00"
@global_var_16d3c.301 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_16d48.303 = constant [8 x i8] c"PGCNVGI\00"
@global_var_16d50.305 = constant i32 303174162
@global_var_16d5c.307 = constant i32 320017171
@global_var_16d64.309 = constant i32 319820054
@global_var_16dd0.311 = constant [5 x i8] c"VGAJ\00"
@global_var_16d6c.313 = constant [7 x i8] c"OMVJGP\00"
@global_var_16d74.315 = constant [7 x i8] c"DWAIGP\00"
@global_var_1f83c.316 = local_unnamed_addr global i32 0
@global_var_1f83a.318 = local_unnamed_addr global i32 0
@global_var_1f83b.319 = local_unnamed_addr global i32 0
@global_var_1f854.321 = local_unnamed_addr global i32 0
@global_var_1f855.322 = local_unnamed_addr global i32 0
@global_var_16d7c.327 = constant [5 x i8] c"ogin\00"
@global_var_16d84.329 = constant [6 x i8] c"enter\00"
@global_var_16df9.333 = constant i32 1377827839
@global_var_16df0.335 = constant i32 2095871
@global_var_16d8c.337 = constant [8 x i8] c"assword\00"
@global_var_1f8d4.339 = global i32 0
@global_var_1f688.342 = global i32 -559038737
@global_var_16dfc.346 = constant [13 x i8] c"RKAGQ@PM\0CVI\22\00"
@global_var_1f8ec.348 = local_unnamed_addr global i32 0
@global_var_1f8f0.349 = local_unnamed_addr global i32 0
@global_var_1f8f1.350 = local_unnamed_addr global i32 0
@global_var_16e0c.352 = constant i32 42786
@global_var_1f8f4.353 = local_unnamed_addr global i32 0
@global_var_1f8f8.354 = local_unnamed_addr global i32 0
@global_var_1f8f9.355 = local_unnamed_addr global i32 0
@global_var_1f964.356 = local_unnamed_addr global i32 0
@global_var_1f968.357 = local_unnamed_addr global i32 0
@global_var_1f969.358 = local_unnamed_addr global i32 0
@global_var_16e10.360 = constant i32 36254
@global_var_1f96c.361 = local_unnamed_addr global i32 0
@global_var_1f970.362 = local_unnamed_addr global i32 0
@global_var_1f971.363 = local_unnamed_addr global i32 0
@global_var_16e14.365 = constant i32 1448168270
@global_var_1f8e8.366 = local_unnamed_addr global i32 0
@global_var_1f8e4.367 = local_unnamed_addr global i32 0
@global_var_1f8e9.368 = local_unnamed_addr global i32 0
@global_var_16e24.370 = constant i32 1381389898
@global_var_1f900.371 = local_unnamed_addr global i32 0
@global_var_1f8fc.372 = local_unnamed_addr global i32 0
@global_var_1f901.373 = local_unnamed_addr global i32 0
@global_var_16e44.375 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1f904.376 = local_unnamed_addr global i32 0
@global_var_1f908.377 = local_unnamed_addr global i32 0
@global_var_1f909.378 = local_unnamed_addr global i32 0
@global_var_16e4c.380 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1f910.381 = local_unnamed_addr global i32 0
@global_var_1f90c.382 = local_unnamed_addr global i32 0
@global_var_1f911.383 = local_unnamed_addr global i32 0
@global_var_16e54.385 = constant i32 1195772418
@global_var_1f918.386 = local_unnamed_addr global i32 0
@global_var_1f914.387 = local_unnamed_addr global i32 0
@global_var_1f919.388 = local_unnamed_addr global i32 0
@global_var_16e60.390 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1f920.391 = local_unnamed_addr global i32 0
@global_var_1f91c.392 = local_unnamed_addr global i32 0
@global_var_1f921.393 = local_unnamed_addr global i32 0
@global_var_16e68.395 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1f924.396 = local_unnamed_addr global i32 0
@global_var_1f928.397 = local_unnamed_addr global i32 0
@global_var_1f929.398 = local_unnamed_addr global i32 0
@global_var_16e70.400 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1f930.401 = local_unnamed_addr global i32 0
@global_var_1f92c.402 = local_unnamed_addr global i32 0
@global_var_1f931.403 = local_unnamed_addr global i32 0
@global_var_16e7c.405 = constant i32 1836214128
@global_var_1f938.406 = local_unnamed_addr global i32 0
@global_var_1f934.407 = local_unnamed_addr global i32 0
@global_var_1f939.408 = local_unnamed_addr global i32 0
@global_var_16e8c.410 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1f93c.411 = local_unnamed_addr global i32 0
@global_var_1f940.412 = local_unnamed_addr global i32 0
@global_var_1f941.413 = local_unnamed_addr global i32 0
@global_var_16e98.415 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1f944.416 = local_unnamed_addr global i32 0
@global_var_1f948.417 = local_unnamed_addr global i32 0
@global_var_1f949.418 = local_unnamed_addr global i32 0
@global_var_16ea4.420 = constant i32 437738110
@global_var_1f950.421 = local_unnamed_addr global i32 0
@global_var_1f94c.422 = local_unnamed_addr global i32 0
@global_var_1f951.423 = local_unnamed_addr global i32 0
@global_var_16ec8.425 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1f958.426 = local_unnamed_addr global i32 0
@global_var_1f954.427 = local_unnamed_addr global i32 0
@global_var_1f959.428 = local_unnamed_addr global i32 0
@global_var_16ed4.430 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1f960.431 = local_unnamed_addr global i32 0
@global_var_1f95c.432 = local_unnamed_addr global i32 0
@global_var_1f961.433 = local_unnamed_addr global i32 0
@global_var_16ee0.435 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1f978.436 = local_unnamed_addr global i32 0
@global_var_1f974.437 = local_unnamed_addr global i32 0
@global_var_1f979.438 = local_unnamed_addr global i32 0
@global_var_16ee8.440 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1f97c.441 = local_unnamed_addr global i32 0
@global_var_1f980.442 = local_unnamed_addr global i32 0
@global_var_1f981.443 = local_unnamed_addr global i32 0
@global_var_16ef0.445 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1f984.446 = local_unnamed_addr global i32 0
@global_var_1f988.447 = local_unnamed_addr global i32 0
@global_var_1f989.448 = local_unnamed_addr global i32 0
@global_var_16ef8.450 = constant [4 x i8] c"QJ\22\00"
@global_var_1f990.451 = local_unnamed_addr global i32 0
@global_var_1f98c.452 = local_unnamed_addr global i32 0
@global_var_1f991.453 = local_unnamed_addr global i32 0
@global_var_16efc.455 = constant i32 1280000013
@global_var_1f994.456 = local_unnamed_addr global i32 0
@global_var_1f998.457 = local_unnamed_addr global i32 0
@global_var_1f999.458 = local_unnamed_addr global i32 0
@global_var_16f10.460 = constant i32 1668311919
@global_var_1f9a0.461 = local_unnamed_addr global i32 0
@global_var_1f99c.462 = local_unnamed_addr global i32 0
@global_var_1f9a1.463 = local_unnamed_addr global i32 0
@global_var_16f2c.465 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1f9a4.466 = local_unnamed_addr global i32 0
@global_var_1f9a8.467 = local_unnamed_addr global i32 0
@global_var_1f9a9.468 = local_unnamed_addr global i32 0
@global_var_16f38.470 = constant i32 1280000013
@global_var_1f9ac.471 = local_unnamed_addr global i32 0
@global_var_1f9b0.472 = local_unnamed_addr global i32 0
@global_var_1f9b1.473 = local_unnamed_addr global i32 0
@global_var_16f4c.475 = constant i32 1280000013
@global_var_1f9b8.476 = local_unnamed_addr global i32 0
@global_var_1f9b4.477 = local_unnamed_addr global i32 0
@global_var_1f9b9.478 = local_unnamed_addr global i32 0
@global_var_16f64.480 = constant i32 1464693110
@global_var_1f9c0.481 = local_unnamed_addr global i32 0
@global_var_1f9bc.482 = local_unnamed_addr global i32 0
@global_var_1f9c1.483 = local_unnamed_addr global i32 0
@global_var_16f7c.485 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1f9c8.486 = local_unnamed_addr global i32 0
@global_var_1f9c4.487 = local_unnamed_addr global i32 0
@global_var_1f9c9.488 = local_unnamed_addr global i32 0
@global_var_16f90.490 = constant i32 1196376908
@global_var_1f9cc.491 = local_unnamed_addr global i32 0
@global_var_1f9d0.492 = local_unnamed_addr global i32 0
@global_var_1f9d1.493 = local_unnamed_addr global i32 0
@global_var_16fa0.495 = constant i32 1280068961
@global_var_1f9d8.496 = local_unnamed_addr global i32 0
@global_var_1f9d4.497 = local_unnamed_addr global i32 0
@global_var_1f9d9.498 = local_unnamed_addr global i32 0
@global_var_16fb8.500 = constant i32 1195458915
@global_var_1f9e0.501 = local_unnamed_addr global i32 0
@global_var_1f9dc.502 = local_unnamed_addr global i32 0
@global_var_1f9e1.503 = local_unnamed_addr global i32 0
@global_var_1700c.505 = constant i32 1195458915
@global_var_1f9e8.506 = local_unnamed_addr global i32 0
@global_var_1f9e4.507 = local_unnamed_addr global i32 0
@global_var_1f9e9.508 = local_unnamed_addr global i32 0
@global_var_17030.510 = constant i32 1447841121
@global_var_1f9f0.511 = local_unnamed_addr global i32 0
@global_var_1f9ec.512 = local_unnamed_addr global i32 0
@global_var_1f9f1.513 = local_unnamed_addr global i32 0
@global_var_17064.515 = constant i32 1633044305
@global_var_1f9f4.516 = local_unnamed_addr global i32 0
@global_var_1f9f8.517 = local_unnamed_addr global i32 0
@global_var_1f9f9.518 = local_unnamed_addr global i32 0
@global_var_17074.520 = constant i32 1346651984
@global_var_1f9fc.521 = local_unnamed_addr global i32 0
@global_var_1fa00.522 = local_unnamed_addr global i32 0
@global_var_1fa01.523 = local_unnamed_addr global i32 0
@global_var_17080.525 = constant i32 1128353102
@global_var_1fa04.526 = local_unnamed_addr global i32 0
@global_var_1fa08.527 = local_unnamed_addr global i32 0
@global_var_1fa09.528 = local_unnamed_addr global i32 0
@global_var_1708c.530 = constant i32 257312593
@global_var_1fa0c.531 = local_unnamed_addr global i32 0
@global_var_1fa10.532 = local_unnamed_addr global i32 0
@global_var_1fa11.533 = local_unnamed_addr global i32 0
@global_var_1709c.535 = constant i32 1447841089
@global_var_1fa14.536 = local_unnamed_addr global i32 0
@global_var_1fa18.537 = local_unnamed_addr global i32 0
@global_var_1fa19.538 = local_unnamed_addr global i32 0
@global_var_170b0.540 = constant i32 1279479894
@global_var_1fa1c.541 = local_unnamed_addr global i32 0
@global_var_1fa20.542 = local_unnamed_addr global i32 0
@global_var_1fa21.543 = local_unnamed_addr global i32 0
@global_var_170c4.545 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1fa28.546 = local_unnamed_addr global i32 0
@global_var_1fa24.547 = local_unnamed_addr global i32 0
@global_var_1fa29.548 = local_unnamed_addr global i32 0
@global_var_16fac.550 = constant i32 1380403017
@global_var_1fa30.551 = local_unnamed_addr global i32 0
@global_var_1fa2c.552 = local_unnamed_addr global i32 0
@global_var_1fa31.553 = local_unnamed_addr global i32 0
@global_var_170d0.555 = constant i32 1280068929
@global_var_1fa34.556 = local_unnamed_addr global i32 0
@global_var_1fa38.557 = local_unnamed_addr global i32 0
@global_var_1fa39.558 = local_unnamed_addr global i32 0
@global_var_170e0.560 = constant i32 1414547281
@global_var_1fa40.561 = local_unnamed_addr global i32 0
@global_var_1fa3c.562 = local_unnamed_addr global i32 0
@global_var_1fa41.563 = local_unnamed_addr global i32 0
@global_var_170f4.565 = constant i32 1414547281
@global_var_1fa48.566 = local_unnamed_addr global i32 0
@global_var_1fa44.567 = local_unnamed_addr global i32 0
@global_var_1fa49.568 = local_unnamed_addr global i32 0
@global_var_17110.570 = constant i32 1264078191
@global_var_1fa4c.571 = local_unnamed_addr global i32 0
@global_var_1fa50.572 = local_unnamed_addr global i32 0
@global_var_1fa51.573 = local_unnamed_addr global i32 0
@global_var_17180.575 = constant i32 1264078191
@global_var_1fa54.576 = local_unnamed_addr global i32 0
@global_var_1fa58.577 = local_unnamed_addr global i32 0
@global_var_1fa59.578 = local_unnamed_addr global i32 0
@global_var_171f0.580 = constant i32 1264078191
@global_var_1fa5c.581 = local_unnamed_addr global i32 0
@global_var_1fa60.582 = local_unnamed_addr global i32 0
@global_var_1fa61.583 = local_unnamed_addr global i32 0
@global_var_17260.585 = constant i32 1264078191
@global_var_1fa68.586 = local_unnamed_addr global i32 0
@global_var_1fa64.587 = local_unnamed_addr global i32 0
@global_var_1fa69.588 = local_unnamed_addr global i32 0
@global_var_172d0.590 = constant i32 1264078191
@global_var_1fa71.591 = local_unnamed_addr global i32 0
@global_var_1fa6c.592 = local_unnamed_addr global i32 0
@global_var_1fa70.593 = local_unnamed_addr global i32 0
@global_var_158c4.596 = constant i32 -476053504
@global_var_14654.600 = constant i32 -443219956
@global_var_147c0.605 = constant i32 -376111092
@global_var_1f89c.608 = global i32 0
@global_var_1493c.610 = constant i32 -456978431
@global_var_1fa74.612 = global i32 0
@global_var_1f864.614 = global i32 0
@global_var_1f788.617 = global i32 256
@global_var_1f68c.618 = global i32* @global_var_1f788.617
@global_var_1f88c.621 = global i32 0
@global_var_1faf4.623 = global i32 0
@global_var_16078.624 = constant i32 -382910416
@global_var_148c0.625 = constant i32 -509595648
@global_var_14f5c.632 = constant i32 -442564520
@global_var_1f794.638 = global i32 0
@global_var_14500.640 = constant i32 -481230848
@global_var_1f87c.642 = global i32 0
@global_var_15cc8.644 = constant i32 -509587456
@global_var_17454.646 = constant i32 33554944
@global_var_1f7cc.647 = global i32* @global_var_17454.646
@global_var_1f7ac.650 = global i32 0
@global_var_1f880.654 = local_unnamed_addr global i32 0
@global_var_1567c.656 = constant i32 -352321419
@global_var_1f658.660 = global i32 -1
@global_var_1f890.663 = global i32 0
@global_var_1f894.665 = local_unnamed_addr global i32 0
@global_var_158b0.666 = constant i32 -390234096
@global_var_17348.668 = constant [10 x i8] c"/dev/null\00"
@global_var_1f898.670 = global i32 0
@global_var_1f884.675 = local_unnamed_addr global i32 0
@global_var_1f888.677 = global i32 0
@global_var_148a0.679 = constant i32 -369096946
@global_var_1f7c4 = external local_unnamed_addr global i32
@global_var_14858.689 = constant i32 -442564608
@global_var_15b78.691 = constant i32 -335544664
@global_var_15c94.694 = constant i32 -275775369
@global_var_1640c.695 = constant i32 -382910352
@global_var_1f8a4.697 = global i32 0
@global_var_1fb0c.700 = global i32 0
@global_var_1fb10.702 = global i32 0
@global_var_1f65c.705 = global i32 0
@global_var_1f7d0.3 = external global i8*
@global_var_1f7ec.55 = external global i8*
@global_var_1f7ed.66 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1f684.117 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1f8b4.119 = external global i8*
@global_var_1f818.157 = external global i8*
@global_var_1f85c.194 = external global i8*
@global_var_1f85d.195 = local_unnamed_addr global i8 0
@global_var_1f830.204 = external global i8*
@global_var_1f850.209 = local_unnamed_addr global i8 0
@global_var_1f851.217 = local_unnamed_addr global i8 0
@global_var_1f848.320 = local_unnamed_addr global i8 0
@global_var_1f840.317 = local_unnamed_addr global i8 0
@global_var_16b50.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_16abc(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1f7d0.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f7d0.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1f674.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1f674.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1f674.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1f674.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1f7d0.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1f674.6, { 1, 0 }
  uselistorder i8** @global_var_1f7d0.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 128616 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 128616

bb2:                                              ; preds = %.thread
  ret i32 128616

; uselistorder directives
  uselistorder i32 128616, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_15964(i32 ptrtoint (i32* @global_var_10094.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 92920, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_1532c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_16b50.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_16b50.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_148c0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_138c4(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_138c4(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_138c4(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_138c4(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_12fa0(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_12fa0(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_12fa0(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_12fa0(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_12fa0(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_12fa0(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_12fa0(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_12fa0(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_12fa0(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_12fa0(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_12fa0(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_14e84(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_140ac(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_138ec(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_138c4(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_148b0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_138ec(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_138ec(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_138ec(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_10a94()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_10a94()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_13fe0(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_14554(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_14284(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_14284.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_14b80(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_14194(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_14194(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_14b50(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_149dc(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_144a4(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_14554(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_14a34(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_14284(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_13964(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_13964(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_138ec(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b44.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_138ec(i8* %v2_8968, i32 ptrtoint (i32* @global_var_16b44.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_138ec(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_16b1c.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_138ec(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_16b1c.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_138c4(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_138ec(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16b34.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_138ec(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_16b34.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_138ec(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_138ec(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_12fa0(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_138c4(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_12ebc(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_138ec(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_12ee8(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_138c4(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_138ec(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_12fa0(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_138c4(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_12ebc(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_138ec(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_12ee8(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_138ec(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_12fa0(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_138c4(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_12ebc(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_138ec(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_12ee8(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_138ec(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_12fa0(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_138c4(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_12ebc(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_138ec(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_12ee8(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_138ec(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_138c4(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_12ebc(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_138ec(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_16b44.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_138ec(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_16b44.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_138c4(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_138c4(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_13db8(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_138ec(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16b54.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_138ec(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_16b54.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_138ec(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b60.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_138ec(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_16b60.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_138c4(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_138ec(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_138ec(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_138ec(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_13ca4(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_138c4(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_14af0(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_13964(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_14a90(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_13988(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_13988(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_12ebc(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_12ebc(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_12ebc(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_12ebc(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_13988(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_138c4(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_12ebc(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_13c18(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_12ebc(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_12ebc(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_13c18(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_13988(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_138c4(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_12ebc(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_13c18(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_12ebc(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_13c18(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_12ebc(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_13c18(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_13988(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_139f0(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_12ebc(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_13c18(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_12ebc(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_13c18(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_13988(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_13988(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_13988(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_138c4(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_13d28(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_138c4(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_138ec(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_12ebc(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_13c18(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_12ebc(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_13c18(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_13988(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b70.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_13988(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_16b70.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_14858()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_14a90(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_94ac, %dec_label_pc_9578, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_148b0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c0, %dec_label_pc_94c8
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_148b0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_12ebc(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_13988(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_13988(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_13988(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_13988(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_13988(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_16b6c.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_139f0(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_138ec(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_14858()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_14a90(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_14284(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_12ebc(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_13c18(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_12ebc(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_13c18(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_13988(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_138c4(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_16b78.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_13c18(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_16b78.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_138c4(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_16b78.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_13c18(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_16b78.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_139f0(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_156b4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_14554(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_138c4(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_16b70.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_13c18(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_16b70.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_148a0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_14284(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_13988(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16b80.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_13ca4(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_16b80.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_14a90(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_14284(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_148b0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_138c4(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_138c4(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_138ec.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_138c4(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_13964(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_138c4(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_138ec(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_14284(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_13ca4(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_12ebc(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_13988(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b88.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_13988(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_16b88.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_13964(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_138c4(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_138c4(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_138ec(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_138c4(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_138ec(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_138c4(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_16b8c.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_138ec(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_16b8c.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b88.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_13988(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_16b88.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_138c4(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_138ec(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_148b0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_138c4(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_138c4(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_138ec.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_138c4(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_13964(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_138c4(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_138ec(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_138c4(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_138c4(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_138c4(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_13964(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_138c4(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_138ec(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_12fa0(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_12ebc(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_138ec(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_12ee8(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_138ec(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_12fa0(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_12ebc(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_138ec(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_12ee8(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_12fa0(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_12ebc(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_138ec(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_12ee8(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_12fa0(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_12ebc(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_138ec(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_12ee8(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_12fa0(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_12ebc(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_138ec(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_12ee8(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 43, 44, 45, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 146, 147, 148, 149, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 3, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 164, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 102, 103, 104, 105, 106, 107, 108, 109, 110, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 99, 100, 101, 66, 67, 68, 69, 70, 73, 74, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 46, 47, 159, 160, 163, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 152, 153, 154, 155, 156, 157, 158, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 118, 120, 121, 123, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 150, 0 }
  uselistorder i32* %r0.global-to-local, { 21, 20, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 207, 37, 143, 35, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 12, 116, 115, 118, 117, 119, 121, 120, 122, 123, 124, 329, 328, 331, 330, 332, 18, 333, 334, 19, 335, 17, 336, 16, 15, 14, 337, 338, 339, 341, 340, 342, 344, 343, 13, 345, 346, 347, 125, 127, 126, 128, 130, 129, 132, 131, 134, 133, 135, 137, 136, 138, 139, 141, 140, 8, 142, 145, 144, 147, 146, 149, 148, 152, 150, 151, 154, 153, 155, 157, 156, 158, 160, 159, 162, 161, 164, 163, 165, 167, 166, 168, 170, 169, 171, 172, 174, 173, 176, 175, 177, 179, 178, 180, 182, 181, 183, 184, 186, 185, 188, 187, 189, 191, 190, 192, 194, 193, 195, 197, 196, 198, 199, 201, 200, 203, 202, 210, 204, 205, 274, 206, 208, 209, 7, 211, 212, 4, 213, 214, 215, 216, 217, 218, 219, 221, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 257, 258, 259, 260, 262, 261, 263, 264, 265, 1, 266, 2, 267, 269, 268, 5, 6, 271, 270, 279, 272, 273, 275, 277, 276, 278, 3, 280, 36, 282, 281, 11, 283, 284, 285, 286, 10, 287, 9, 288, 289, 291, 290, 293, 292, 294, 295, 296, 298, 297, 299, 300, 302, 301, 304, 303, 306, 305, 308, 307, 310, 309, 311, 312, 313, 314, 315, 316, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 55, 56, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 53, 54, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 140, 97, 99, 98, 100, 101, 102, 107, 109, 108, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 123, 124, 116, 117, 118, 119, 120, 121, 122, 125, 0, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 132, 133, 97, 98, 103, 102, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 135, 136, 97, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 113, 114, 115, 116, 117, 118, 119, 122, 0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 150, 151, 152, 103, 104, 109, 111, 110, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 128, 129, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 0, 135, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32 ptrtoint (i32* @global_var_16b88.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b78.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b70.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16b6c.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16b64.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16b44.28 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_16b4c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_9510, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_142b0()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_142b0()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_156b4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_14308()
  %v2_a04c = call i32 @function_14384(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_15620(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_15620(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1f7f0.57, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_15620(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_14e84(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v1_a170 = phi i32 [ %v1_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v1_a16c, %v1_a170
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_14e84(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_14e84(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_13940(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_14858()
  %v0_a294 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v1_a294 = mul i32 %v0_a294, 256
  %v4_a2a4 = and i32 %v1_a294, 16711680
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_14edc.59 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_14edc.59 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_14edc()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 2, 20, 3, 5, 4, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 21, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f7f4.61 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1f7f4.61, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1f7f8.62, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1f7f4.61, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1f7f4.61 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_11550()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_14384(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_14384(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_14384(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_14384(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_14384(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_14384(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_14384(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_14384(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 15, 0, 3, 17, 2, 5, 19, 4, 7, 21, 6, 9, 23, 8, 11, 25, 10, 14, 12, 13, 29, 30, 16, 18, 20, 22, 24, 26, 27, 28 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_14960(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_139f0(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_14e84(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f7ec.55 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1f7f0.57 to i32), i32* @r6, align 4
  store i32 56584, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 56584, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_14fcc(i32 %v2_a584, i32 %v1_a590, i32 56584, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1f7ed.66 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1f7ed.66 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_14e84(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_e394.68 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_e394.68 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_14fcc(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1f7ed.66 to i8) to i32), i32 ptrtoint (i32* @global_var_e394.68 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_14e84(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_e858.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_e858.70 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_14fcc(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_e858.70 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_14e84(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_d740.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_d740.72 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_14fcc(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_d740.72 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_14e84(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 55844, i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 55844, i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 12, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_14fcc(i32 %v2_a6b4, i32 %v1_a6c0, i32 55844, i32 12)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_14e84(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_cffc.75 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_cffc.75 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 3, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_14fcc(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_cffc.75 to i32), i32 3)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_14e84(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_c888.77 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_c888.77 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 4, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_14fcc(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_c888.77 to i32), i32 4)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_14e84(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b7c8.79 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b7c8.79 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 5, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_14fcc(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b7c8.79 to i32), i32 5)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_14e84(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_c028.81 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_c028.81 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 11, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_14fcc(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_c028.81 to i32), i32 11)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a810 = load i32, i32* %ip.global-to-local, align 4
  %v1_a810 = load i32, i32* @r6, align 4
  %v2_a810 = inttoptr i32 %v1_a810 to i32*
  store i32 %v0_a810, i32* %v2_a810, align 4
  %v0_a814 = load i32, i32* %r2.global-to-local, align 4
  %v1_a814 = trunc i32 %v0_a814 to i8
  %v2_a814 = load i32, i32* @r4, align 4
  %v3_a814 = inttoptr i32 %v2_a814 to i8*
  store i8 %v1_a814, i8* %v3_a814, align 1
  %v2_a818 = call i32 @function_14e84(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_b0ac.83 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_b0ac.83 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 6, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_14fcc(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_b0ac.83 to i32), i32 6)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  store i32 %v5_a840, i32* %ip.global-to-local, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v5_a84c = mul nuw nsw i32 %v3_a844, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a85c = load i32, i32* %ip.global-to-local, align 4
  %v1_a85c = load i32, i32* @r6, align 4
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  store i32 %v0_a85c, i32* %v2_a85c, align 4
  %v0_a860 = load i32, i32* %r2.global-to-local, align 4
  %v1_a860 = trunc i32 %v0_a860 to i8
  %v2_a860 = load i32, i32* @r4, align 4
  %v3_a860 = inttoptr i32 %v2_a860 to i8*
  store i8 %v1_a860, i8* %v3_a860, align 1
  %v2_a864 = call i32 @function_14e84(i32 %v1_a850, i32 8)
  %v2_a868 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a868 = zext i8 %v2_a868 to i32
  store i32 ptrtoint (i32* @global_var_a930.85 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a864, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a878 = mul nuw nsw i32 %v3_a868, 4
  store i32 %v3_a878, i32* %r1.global-to-local, align 4
  %v2_a87c = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a880 = inttoptr i32 %v2_a864 to i32*
  store i32 ptrtoint (i32* @global_var_a930.85 to i32), i32* %v2_a880, align 4
  %v3_a884 = load i32, i32* @r5, align 4
  %v4_a884 = add i32 %v3_a884, 4
  %v5_a884 = inttoptr i32 %v4_a884 to i8*
  store i8 7, i8* %v5_a884, align 1
  %v0_a888 = load i32, i32* %r1.global-to-local, align 4
  %v1_a888 = add i32 %v0_a888, 4
  store i32 %v1_a888, i32* %r1.global-to-local, align 4
  %v5_a88c = call i32 @function_14fcc(i32 %v2_a87c, i32 %v1_a888, i32 ptrtoint (i32* @global_var_a930.85 to i32), i32 7)
  %v2_a890 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a890 = zext i8 %v2_a890 to i32
  store i32 %v3_a890, i32* %r3.global-to-local, align 4
  store i32 %v5_a88c, i32* %ip.global-to-local, align 4
  %v0_a898 = load i32, i32* @r5, align 4
  %v5_a898 = mul nuw nsw i32 %v3_a890, 4
  %v6_a898 = add i32 %v5_a898, %v5_a88c
  %v7_a898 = inttoptr i32 %v6_a898 to i32*
  store i32 %v0_a898, i32* %v7_a898, align 4
  %v0_a89c = load i32, i32* %r3.global-to-local, align 4
  %v1_a89c = load i32, i32* @r7, align 4
  %v2_a89c = add i32 %v1_a89c, %v0_a89c
  store i32 %v2_a89c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v2_a89c to i8
  %v2_a8a8 = load i32, i32* @r4, align 4
  %v3_a8a8 = inttoptr i32 %v2_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v3_a8a8, align 1
  %v0_a8ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a8ac = load i32, i32* @r6, align 4
  %v2_a8ac = inttoptr i32 %v1_a8ac to i32*
  store i32 %v0_a8ac, i32* %v2_a8ac, align 4
  %v2_a8b0 = call i32 @function_14e84(i32 %v1_a89c, i32 8)
  %v2_a8b4 = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a8b4 = zext i8 %v2_a8b4 to i32
  store i32 ptrtoint (i32* @global_var_81cc.87 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a8b0, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a8c4 = mul nuw nsw i32 %v3_a8b4, 4
  store i32 %v3_a8c4, i32* %r1.global-to-local, align 4
  %v2_a8c8 = load i32, i32* @global_var_1f7f0.57, align 4
  %v2_a8cc = inttoptr i32 %v2_a8b0 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.87 to i32), i32* %v2_a8cc, align 4
  %v3_a8d0 = load i32, i32* @r5, align 4
  %v4_a8d0 = add i32 %v3_a8d0, 4
  %v5_a8d0 = inttoptr i32 %v4_a8d0 to i8*
  store i8 10, i8* %v5_a8d0, align 1
  %v0_a8d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8d4 = add i32 %v0_a8d4, 4
  store i32 %v1_a8d4, i32* %r1.global-to-local, align 4
  %v5_a8d8 = call i32 @function_14fcc(i32 %v2_a8c8, i32 %v1_a8d4, i32 ptrtoint (i32* @global_var_81cc.87 to i32), i32 10)
  %v2_a8dc = load i8, i8* bitcast (i8** @global_var_1f7ec.55 to i8*), align 4
  %v3_a8dc = zext i8 %v2_a8dc to i32
  store i32 %v3_a8dc, i32* %r3.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @r6, align 4
  %v2_a8e0 = inttoptr i32 %v1_a8e0 to i32*
  store i32 %v5_a8d8, i32* %v2_a8e0, align 4
  %v0_a8e4 = load i32, i32* @r5, align 4
  %v2_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_a8e4 = mul i32 %v2_a8e4, 4
  %v6_a8e4 = add i32 %v5_a8e4, %v5_a8d8
  %v7_a8e4 = inttoptr i32 %v6_a8e4 to i32*
  store i32 %v0_a8e4, i32* %v7_a8e4, align 4
  %v0_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e8 = load i32, i32* @r7, align 4
  %v2_a8e8 = add i32 %v1_a8e8, %v0_a8e8
  store i32 %v2_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v2_a8e8 to i8
  %v2_a8f0 = load i32, i32* @r4, align 4
  %v3_a8f0 = inttoptr i32 %v2_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v3_a8f0, align 1
  %v2_a8f4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a8f4, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a8e8

; uselistorder directives
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a89c, { 1, 0 }
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1f7f0.57, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12 }
  uselistorder i8* bitcast (i8** @global_var_1f7ec.55 to i8*), { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a930(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a930:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a930 = load i32, i32* @r4, align 4
  %v15_a930 = load i32, i32* @r8, align 4
  %v21_a930 = load i32, i32* @sl, align 4
  %v1_a934 = urem i32 %arg1, 256
  store i32 %v1_a934, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a934, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a94c = urem i32 %arg3, 256
  store i32 %v1_a94c, i32* @r4, align 4
  %v2_a950 = call i32 @function_14e84(i32 %v1_a934, i32 4)
  %v0_a954 = load i32, i32* @r5, align 4
  store i32 %v0_a954, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a964 = load i32, i32* @r4, align 4
  store i32 %v0_a964, i32* %r0.global-to-local, align 4
  %v5_a968 = inttoptr i32 %v0_a954 to i32*
  %v6_a968 = call i32 @function_a4e8(i32 %v0_a964, i32* %v5_a968, i32 2, i32 0)
  %v1_a974 = urem i32 %v6_a968, 256
  store i32 %v1_a974, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  %v0_a984 = load i32, i32* @r4, align 4
  store i32 %v0_a984, i32* %r0.global-to-local, align 4
  %v5_a988 = trunc i32 %v6_a968 to i8
  %v6_a98c = inttoptr i32 %v0_a980 to i32*
  %v7_a98c = call i32 @function_a4e8(i32 %v0_a984, i32* %v6_a98c, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a98c, i32* @r7, align 4
  %v0_a9a0 = load i32, i32* @r4, align 4
  store i32 %v0_a9a0, i32* %r0.global-to-local, align 4
  %v4_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v5_a9a4 = call i32 @function_a4e8(i32 %v0_a9a0, i32* %v4_a9a4, i32 4, i32 64)
  %v1_a9ac = urem i32 %v5_a9a4, 256
  store i32 %v1_a9ac, i32* %ip.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  %v5_a9c0 = trunc i32 %v5_a9a4 to i8
  %v6_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v7_a9c4 = call i32 @function_a4e8(i32 %v0_a9bc, i32* %v6_a9c4, i32 5, i32 1)
  %v1_a9d0 = urem i32 %v7_a9c4, 256
  store i32 %v1_a9d0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r5, align 4
  store i32 %v0_a9dc, i32* %r1.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r0.global-to-local, align 4
  %v5_a9e8 = inttoptr i32 %v0_a9dc to i32*
  %v6_a9e8 = call i32 @function_a4e8(i32 %v0_a9e0, i32* %v5_a9e8, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_a9f0 = load i32, i32* @r5, align 4
  store i32 %v0_a9f0, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a9e8, i32* @sl, align 4
  %v0_aa00 = load i32, i32* @r4, align 4
  store i32 %v0_aa00, i32* %r0.global-to-local, align 4
  %v4_aa04 = inttoptr i32 %v0_a9f0 to i32*
  %v5_aa04 = call i32 @function_a4e8(i32 %v0_aa00, i32* %v4_aa04, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_aa08 = load i32, i32* @r5, align 4
  store i32 %v0_aa08, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_aa04, i32* @r8, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v4_aa1c = inttoptr i32 %v0_aa08 to i32*
  %v5_aa1c = call i32 @function_a4e8(i32 %v0_aa18, i32* %v4_aa1c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v0_aa30 = load i32, i32* @r4, align 4
  store i32 %v0_aa30, i32* %r0.global-to-local, align 4
  %v4_aa34 = inttoptr i32 %v0_aa2c to i32*
  %v5_aa34 = call i32 @function_a4e8(i32 %v0_aa30, i32* %v4_aa34, i32 1, i32 1)
  %v1_aa3c = urem i32 %v5_aa34, 256
  store i32 %v1_aa3c, i32* %ip.global-to-local, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  store i32 %v0_aa40, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa4c = load i32, i32* @r4, align 4
  store i32 %v0_aa4c, i32* %r0.global-to-local, align 4
  %v5_aa54 = inttoptr i32 %v0_aa40 to i32*
  %v6_aa54 = call i32 @function_a4e8(i32 %v0_aa4c, i32* %v5_aa54, i32 19, i32 0)
  %v0_aa5c = load i32, i32* @r5, align 4
  store i32 %v0_aa5c, i32* %r1.global-to-local, align 4
  %v2_aa60 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_aa60, i32* %r3.global-to-local, align 4
  store i32 %v6_aa54, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa6c = load i32, i32* @r4, align 4
  store i32 %v0_aa6c, i32* %r0.global-to-local, align 4
  %v4_aa70 = inttoptr i32 %v0_aa5c to i32*
  %v5_aa70 = call i32 @function_a4e8(i32 %v0_aa6c, i32* %v4_aa70, i32 25, i32 %v2_aa60)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa84 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  %v7_aa88 = icmp eq i32 %v3_aa84, -1
  store i1 %v7_aa88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa88, label %dec_label_pc_af6c, label %dec_label_pc_aa94

dec_label_pc_aa94:                                ; preds = %dec_label_pc_a930
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa9c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa9c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aab0 = call i32 @function_14b50(i32 %v3_aa84, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aab0, i32* %r0.global-to-local, align 4
  %v7_aab4 = icmp eq i32 %v6_aab0, -1
  store i1 %v7_aab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aab4, label %dec_label_pc_af64, label %dec_label_pc_aabc

dec_label_pc_aabc:                                ; preds = %dec_label_pc_aa94
  %v0_aabc = load i32, i32* @sl, align 4
  %v3_aabc = mul i32 %v0_aabc, 65536
  store i32 %v3_aabc, i32* %sl.global-to-local, align 4
  %v0_aac0 = load i32, i32* @r8, align 4
  %v3_aac0 = mul i32 %v0_aac0, 65536
  store i32 %v3_aac0, i32* %r8.global-to-local, align 4
  %v0_aac8 = load i32, i32* @r7, align 4
  %v3_aac8 = mul i32 %v0_aac8, 65536
  %v0_aacc = load i32, i32* @r6, align 4
  %v1_aacc = urem i32 %v0_aacc, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aad4 = urem i32 %v0_aac8, 65536
  store i32 %v3_aad4, i32* %r2.global-to-local, align 4
  %v3_aad8 = urem i32 %v0_aabc, 65536
  store i32 %v3_aad8, i32* %r3.global-to-local, align 4
  %v3_aadc = urem i32 %v0_aac0, 65536
  store i32 %v3_aadc, i32* %r1.global-to-local, align 4
  %v0_aae0 = load i32, i32* @fp, align 4
  %v2_aae0 = icmp eq i32 %v0_aae0, 0
  store i1 %v2_aae0, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aae0, 1
  br i1 %tmp88, label %dec_label_pc_b08c, label %dec_label_pc_ab00

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aabc
  %v3_ab04 = mul i32 %v5_aa1c, 65536
  %v0_aac8.not = or i32 %v0_aac8, -65536
  %v1_ab0c = xor i32 %v0_aac8.not, 65535
  %v1_ab14 = add i32 %v3_ab04, 4325376
  %v1_ab18 = urem i32 %v0_aabc, 256
  %v3_ab20 = udiv i32 %v1_ab14, 256
  %v1_ab24 = add i32 %v3_ab04, 524288
  %v1_ab2c = add i32 %v3_ab04, 1835008
  %v1_ab30 = urem i32 %v0_aac0, 256
  %v1_ab34 = and i32 %v3_ab20, 65280
  store i32 %v1_ab34, i32* %r0.global-to-local, align 4
  %v3_ab3c = udiv i32 %v1_ab2c, 256
  %tmp89 = mul nsw i32 %v1_ab0c, 256
  %v1_ab54 = and i32 %v3_ab3c, 65280
  store i32 %v1_ab54, i32* %ip.global-to-local, align 4
  %v1_ab58 = and i32 %tmp89, 65280
  store i32 %v1_ab58, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_ab0c, 256
  %v4_ab44 = sdiv i32 %v1_ab14, 16777216
  %v5_ab74 = trunc i32 %tmp91 to i8
  %v3_ab80 = mul nuw nsw i32 %v1_ab18, 256
  %v3_ab88 = ashr i32 %v1_ab14, 31
  %v3_ab8c = mul nuw nsw i32 %v1_ab30, 256
  store i32 %v3_ab8c, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aabc, 256
  %v4_ab90 = urem i32 %tmp92, 256
  %v5_ab90 = or i32 %v4_ab90, %v3_ab80
  store i32 %v5_ab90, i32* @r7, align 4
  %v3_ab94 = udiv i32 %v1_ab24, 256
  %tmp93 = udiv i32 %v0_aac0, 256
  %v4_ab98 = urem i32 %tmp93, 256
  %v5_ab98 = or i32 %v4_ab98, %v3_ab8c
  store i32 %v5_ab98, i32* %sl.global-to-local, align 4
  %v5_ab9c = trunc i32 %v3_ab88 to i8
  %v3_aba4 = sdiv i32 %v3_aac8, 16777216
  %v7_aba4 = sdiv i32 %v1_ab2c, 16777216
  %v1_aba8 = and i32 %v3_ab94, 65280
  store i32 %v1_aba8, i32* @r6, align 4
  %v3_abac = ashr i32 %v3_aac8, 31
  %v3_abb0 = ashr i32 %v1_ab2c, 31
  %v3_abb4 = udiv i32 %v1_ab0c, 65536
  %v4_abb8 = udiv i32 %v1_ab24, 16777216
  %v5_abb8 = or i32 %v4_abb8, %v1_aba8
  store i32 %v5_abb8, i32* %r8.global-to-local, align 4
  store i32 %v1_ab18, i32* %r1.global-to-local, align 4
  store i32 %v1_ab30, i32* %r2.global-to-local, align 4
  %v3_abd037 = udiv i32 %v1_aba8, 256
  store i32 %v3_abd037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ac30 = sext i8 %v5_a9c0 to i32
  %v2_ad30 = icmp eq i32 %v1_aacc, 0
  %sext16 = mul i32 %v0_aabc, 16777216
  %v4_ad44 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_ab24, 256
  %v4_ad58 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aac0, 16777216
  %v4_ad60 = sdiv i32 %sext18, 16777216
  %v1_ad68 = trunc i32 %v4_ad58 to i8
  br label %dec_label_pc_abe4

dec_label_pc_abe4:                                ; preds = %bb105, %dec_label_pc_ab00
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_abf0 = call i32 @function_14e84(i32 1510, i32 4)
  store i32 %v2_abf0, i32* %r0.global-to-local, align 4
  store i32 %v2_a950, i32* %r1.global-to-local, align 4
  %v3_abf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abf8, i32* %r3.global-to-local, align 4
  %v2_abfc = load i32, i32* @r4, align 4
  %v5_abfc = mul i32 %v2_abfc, 4
  %v6_abfc = add i32 %v5_abfc, %v2_a950
  %v7_abfc = inttoptr i32 %v6_abfc to i32*
  store i32 %v2_abf0, i32* %v7_abfc, align 4
  %v0_ac00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r3.global-to-local, align 4
  %v4_ac00 = mul i32 %v1_ac00, 4
  %v5_ac00 = add i32 %v4_ac00, %v0_ac00
  %v6_ac00 = inttoptr i32 %v5_ac00 to i32*
  %v7_ac00 = load i32, i32* %v6_ac00, align 4
  store i32 %v7_ac00, i32* %r4.global-to-local, align 4
  %v1_ac04 = inttoptr i32 %v7_ac00 to i8*
  %v2_ac04 = load i8, i8* %v1_ac04, align 1
  %tmp = urem i8 %v2_ac04, 16
  %v1_ac08 = zext i8 %tmp to i32
  %v1_ac0c = or i32 %v1_ac08, 64
  store i32 %v1_ac0c, i32* %r2.global-to-local, align 4
  %v1_ac10 = trunc i32 %v1_ac0c to i8
  store i8 %v1_ac10, i8* %v1_ac04, align 1
  %v0_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac14 = inttoptr i32 %v0_ac14 to i8*
  %v2_ac14 = load i8, i8* %v1_ac14, align 1
  %v1_ac18 = and i8 %v2_ac14, -16
  %v1_ac1c = or i8 %v1_ac18, 5
  store i32 %v1_a9d0, i32* %r2.global-to-local, align 4
  store i8 %v1_ac1c, i8* %v1_ac14, align 1
  %v2_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac2c = add i32 %v2_ac2c, 1
  %v4_ac2c = inttoptr i32 %v3_ac2c to i8*
  store i8 %v5_a988, i8* %v4_ac2c, align 1
  store i32 %v4_ac30, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 8
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v5_a9c0, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac3c = load i32, i32* %ip.global-to-local, align 4
  %v9_ac3c = icmp eq i32 %v0_ac3c, %v1_ac3c
  store i1 %v9_ac3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ab88, i32* %r3.global-to-local, align 4
  store i32 %v4_ab44, i32* %r2.global-to-local, align 4
  %v2_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac48 = add i32 %v2_ac48, 3
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v5_ab9c, i8* %v4_ac48, align 1
  %v0_ac4c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac4c = trunc i32 %v0_ac4c to i8
  %v2_ac4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac4c = add i32 %v2_ac4c, 2
  %v4_ac4c = inttoptr i32 %v3_ac4c to i8*
  store i8 %v1_ac4c, i8* %v4_ac4c, align 1
  %v0_ac50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac50, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_abe4
  store i32 %v3_abac, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_abac to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_abe4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_abac, i32* %r2.global-to-local, align 4
  %v3_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac58 = add i32 %v3_ac58, 6
  %v5_ac58 = inttoptr i32 %v4_ac58 to i8*
  store i8 64, i8* %v5_ac58, align 1
  %v0_ac60.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_ac60.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_abac.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_ac60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac60 = add i32 %v2_ac60, 5
  %v4_ac60 = inttoptr i32 %v3_ac60 to i8*
  store i8 %v3_abac.sink.off0, i8* %v4_ac60, align 1
  store i32 %v3_aba4, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac68, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ac68 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_ac68, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac6c = add i32 %v2_ac6c, 9
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac70, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_ac70 = load i32, i32* %r2.global-to-local, align 4
  %v2_ac70 = trunc i32 %v1_ac70 to i8
  %v3_ac70 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac70 = add i32 %v3_ac70, 7
  %v5_ac70 = inttoptr i32 %v4_ac70 to i8*
  store i8 %v2_ac70, i8* %v5_ac70, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_ac74 = load i32, i32* %stack_var_-40, align 4
  %v5_ac7c = mul i32 %v3_ac74, 24
  store i32 %v5_ac7c, i32* %r3.global-to-local, align 4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  %v1_ac84 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac84 = add i32 %v1_ac84, 12
  %v3_ac84 = inttoptr i32 %v2_ac84 to i32*
  store i32 %v5_aa70, i32* %v3_ac84, align 4
  %v0_ac88 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac88 = load i32, i32* @sb, align 4
  %v2_ac88 = add i32 %v1_ac88, %v0_ac88
  store i32 %v2_ac88, i32* %r3.global-to-local, align 4
  %v1_ac8c = add i32 %v2_ac88, 16
  %v2_ac8c = inttoptr i32 %v1_ac8c to i32*
  %v3_ac8c = load i32, i32* %v2_ac8c, align 4
  store i32 %v3_ac8c, i32* %r2.global-to-local, align 4
  %v0_ac90 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac90 = trunc i32 %v0_ac90 to i8
  %v2_ac90 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac90 = add i32 %v2_ac90, 4
  %v4_ac90 = inttoptr i32 %v3_ac90 to i8*
  store i8 %v1_ac90, i8* %v4_ac90, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac98 = add i32 %v0_ac98, 20
  store i32 %v1_ac98, i32* %r1.global-to-local, align 4
  %v3_ac9c = add i32 %v0_ac98, 22
  %v4_ac9c = inttoptr i32 %v3_ac9c to i8*
  store i8 101, i8* %v4_ac9c, align 1
  %v0_aca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aca0 = load i32, i32* %r4.global-to-local, align 4
  %v2_aca0 = add i32 %v1_aca0, 16
  %v3_aca0 = inttoptr i32 %v2_aca0 to i32*
  store i32 %v0_aca0, i32* %v3_aca0, align 4
  %v0_aca4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca4 = add i32 %v0_aca4, 24
  store i32 %v1_aca4, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_acac = load i32, i32* %r3.global-to-local, align 4
  %v1_acac = add i32 %v0_acac, -93
  store i32 %v1_acac, i32* %r3.global-to-local, align 4
  %v2_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acb0 = add i32 %v2_acb0, 3
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 88, i8* %v4_acb0, align 1
  %v0_acb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb4 = trunc i32 %v0_acb4 to i8
  %v2_acb4 = load i32, i32* %r0.global-to-local, align 4
  %v3_acb4 = add i32 %v2_acb4, 12
  %v4_acb4 = inttoptr i32 %v3_acb4 to i8*
  store i8 %v1_acb4, i8* %v4_acb4, align 1
  %v0_acb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_acb8 = trunc i32 %v0_acb8 to i8
  %v2_acb8 = load i32, i32* %r0.global-to-local, align 4
  %v3_acb8 = add i32 %v2_acb8, 13
  %v4_acb8 = inttoptr i32 %v3_acb8 to i8*
  store i8 %v1_acb8, i8* %v4_acb8, align 1
  %v0_acbc = load i32, i32* %r4.global-to-local, align 4
  %v1_acbc = add i32 %v0_acbc, 38
  %v2_acbc = inttoptr i32 %v1_acbc to i8*
  %v3_acbc = load i8, i8* %v2_acbc, align 1
  %tmp116 = urem i8 %v3_acbc, 16
  %v1_acc0 = zext i8 %tmp116 to i32
  %v1_acc4 = or i32 %v1_acc0, 64
  store i32 %v1_acc4, i32* %r3.global-to-local, align 4
  %v1_acc8 = trunc i32 %v1_acc4 to i8
  store i8 %v1_acc8, i8* %v2_acbc, align 1
  %v0_accc = load i32, i32* %r4.global-to-local, align 4
  %v1_accc = add i32 %v0_accc, 38
  %v2_accc = inttoptr i32 %v1_accc to i8*
  %v3_accc = load i8, i8* %v2_accc, align 1
  %v1_acd0 = and i8 %v3_accc, -16
  %v1_acd4 = or i8 %v1_acd0, 5
  store i8 %v1_acd4, i8* %v2_accc, align 1
  %v0_ace0 = load i32, i32* %r4.global-to-local, align 4
  %v1_ace0 = add i32 %v0_ace0, 38
  store i32 %v1_ace0, i32* @r5, align 4
  %v3_ace4 = add i32 %v0_ace0, 39
  %v4_ace4 = inttoptr i32 %v3_ace4 to i8*
  store i8 %v5_a988, i8* %v4_ace4, align 1
  store i32 %v7_aba4, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_abb0, i32* %r2.global-to-local, align 4
  %v2_acf4 = load i32, i32* @r5, align 4
  %v3_acf4 = add i32 %v2_acf4, 4
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v5_ab74, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* @r5, align 4
  %v3_acf8 = add i32 %v2_acf8, 2
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_acfc, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_abb4, i32* %r1.global-to-local, align 4
  %v0_ad04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad04 = trunc i32 %v0_ad04 to i8
  %v2_ad04 = load i32, i32* @r5, align 4
  %v3_ad04 = add i32 %v2_ad04, 3
  %v4_ad04 = inttoptr i32 %v3_ad04 to i8*
  store i8 %v1_ad04, i8* %v4_ad04, align 1
  store i32 %v4_ac30, i32* %r2.global-to-local, align 4
  %v0_ad0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad0c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ad0c = load i32, i32* %r3.global-to-local, align 4
  %v2_ad0c = trunc i32 %v1_ad0c to i8
  %v3_ad0c = load i32, i32* @r5, align 4
  %v4_ad0c = add i32 %v3_ad0c, 6
  %v5_ad0c = inttoptr i32 %v4_ad0c to i8*
  store i8 %v2_ad0c, i8* %v5_ad0c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ad14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad14 = trunc i32 %v0_ad14 to i8
  %v2_ad14 = load i32, i32* @r5, align 4
  %v3_ad14 = add i32 %v2_ad14, 5
  %v4_ad14 = inttoptr i32 %v3_ad14 to i8*
  store i8 %v1_ad14, i8* %v4_ad14, align 1
  %v0_ad18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad18 = trunc i32 %v0_ad18 to i8
  %v2_ad18 = load i32, i32* @r5, align 4
  %v3_ad18 = add i32 %v2_ad18, 8
  %v4_ad18 = inttoptr i32 %v3_ad18 to i8*
  store i8 %v1_ad18, i8* %v4_ad18, align 1
  %v0_ad1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad1c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ad1c = load i32, i32* %ip.global-to-local, align 4
  %v2_ad1c = trunc i32 %v1_ad1c to i8
  %v3_ad1c = load i32, i32* @r5, align 4
  %v4_ad1c = add i32 %v3_ad1c, 7
  %v5_ad1c = inttoptr i32 %v4_ad1c to i8*
  store i8 %v2_ad1c, i8* %v5_ad1c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ad20 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad20 = trunc i32 %v0_ad20 to i8
  %v2_ad20 = load i32, i32* @r5, align 4
  %v3_ad20 = add i32 %v2_ad20, 9
  %v4_ad20 = inttoptr i32 %v3_ad20 to i8*
  store i8 %v1_ad20, i8* %v4_ad20, align 1
  %v0_ad24 = call i32 @function_10a94()
  store i32 %v0_ad24, i32* %r0.global-to-local, align 4
  store i32 %v1_aacc, i32* %r1.global-to-local, align 4
  store i1 %v2_ad30, i1* %cpsr_z.global-to-local, align 1
  %v1_ad34 = sub i32 1023, %v0_ad24
  store i32 %v1_ad34, i32* %r3.global-to-local, align 4
  br i1 %v2_ad30, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ad3c = load i32, i32* @r5, align 4
  %v3_ad3c = add i32 %v2_ad3c, 16
  %v4_ad3c = inttoptr i32 %v3_ad3c to i32*
  store i32 %v1_ad34, i32* %v4_ad3c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ad38 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad38 = add i32 %v1_ad38, 16
  %v3_ad38 = inttoptr i32 %v2_ad38 to i32*
  %v4_ad38 = load i32, i32* %v3_ad38, align 4
  store i32 %v4_ad38, i32* %r3.global-to-local, align 4
  %v2_ad40 = load i32, i32* @r5, align 4
  %v3_ad40 = add i32 %v2_ad40, 16
  %v4_ad40 = inttoptr i32 %v3_ad40 to i32*
  store i32 %v4_ad38, i32* %v4_ad40, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_ad44, i32* %r3.global-to-local, align 4
  %v0_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = add i32 %v0_ad48, 58
  store i32 %v1_ad48, i32* @r6, align 4
  %v1_ad4c = load i32, i32* @r5, align 4
  %v2_ad4c = add i32 %v1_ad4c, 12
  %v3_ad4c = inttoptr i32 %v2_ad4c to i32*
  store i32 %v0_ad24, i32* %v3_ad4c, align 4
  %v0_ad50 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad50 = trunc i32 %v0_ad50 to i8
  %v2_ad50 = load i32, i32* @r6, align 4
  %v3_ad50 = add i32 %v2_ad50, 1
  %v4_ad50 = inttoptr i32 %v3_ad50 to i8*
  store i8 %v1_ad50, i8* %v4_ad50, align 1
  %v3_ad54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad54, i32* %r3.global-to-local, align 4
  store i32 %v4_ad58, i32* %r2.global-to-local, align 4
  %v1_ad5c = add i32 %v3_ad54, 1
  store i32 %v1_ad5c, i32* @r4, align 4
  store i32 %v4_ad60, i32* %r1.global-to-local, align 4
  %v1_ad64 = load i32, i32* @fp, align 4
  %v9_ad64 = icmp eq i32 %v1_ad5c, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  %v2_ad68 = load i32, i32* @r6, align 4
  %v3_ad68 = add i32 %v2_ad68, 5
  %v4_ad68 = inttoptr i32 %v3_ad68 to i8*
  store i8 %v1_ad68, i8* %v4_ad68, align 1
  %v0_ad6c = load i32, i32* @r7, align 4
  %v1_ad6c = trunc i32 %v0_ad6c to i8
  %v2_ad6c = load i32, i32* @r6, align 4
  %v3_ad6c = inttoptr i32 %v2_ad6c to i8*
  store i8 %v1_ad6c, i8* %v3_ad6c, align 1
  %v0_ad70 = load i32, i32* %sl.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* @r6, align 4
  %v3_ad70 = add i32 %v2_ad70, 2
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v0_ad74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad74 = trunc i32 %v0_ad74 to i8
  %v2_ad74 = load i32, i32* @r6, align 4
  %v3_ad74 = add i32 %v2_ad74, 3
  %v4_ad74 = inttoptr i32 %v3_ad74 to i8*
  store i8 %v1_ad74, i8* %v4_ad74, align 1
  %v0_ad78 = load i32, i32* %r8.global-to-local, align 4
  %v1_ad78 = trunc i32 %v0_ad78 to i8
  %v2_ad78 = load i32, i32* @r6, align 4
  %v3_ad78 = add i32 %v2_ad78, 4
  %v4_ad78 = inttoptr i32 %v3_ad78 to i8*
  store i8 %v1_ad78, i8* %v4_ad78, align 1
  %v0_ad7c = load i32, i32* @r4, align 4
  store i32 %v0_ad7c, i32* %stack_var_-40, align 4
  %v5_ad80 = icmp slt i32 %v1_ad5c, %v1_ad64
  br i1 %v5_ad80, label %dec_label_pc_abe4, label %dec_label_pc_ad84

dec_label_pc_ad84:                                ; preds = %bb105
  %v1_ad8c = add i32 %v5_aa1c, 8
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v1_ad90 = add i32 %v5_aa1c, 66
  store i32 %v1_ad90, i32* %r3.global-to-local, align 4
  %v0_ad9c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ad9c.preheader

dec_label_pc_ad9c.preheader:                      ; preds = %dec_label_pc_ad84, %dec_label_pc_b08c
  %v0_ad9c.pre = phi i32 [ %v0_ad9c.pre.pre, %dec_label_pc_ad84 ], [ %v0_aae0, %dec_label_pc_b08c ]
  %stack_var_-160.0.ph = phi i32 [ %v1_ad90, %dec_label_pc_ad84 ], [ %v1_b098, %dec_label_pc_b08c ]
  %stack_var_-156.0.ph = phi i32 [ %v1_ad8c, %dec_label_pc_ad84 ], [ %v1_b094, %dec_label_pc_b08c ]
  %v9_afec = icmp eq i32 %v3_aad4, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_b05c = icmp eq i32 %v1_aacc, 0
  %v2_ae40 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ae58 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ae88 = icmp eq i32 %v1_aa3c, 0
  %v2_ade4 = icmp eq i32 %v5_aa70, -1
  %v7_ade4 = icmp eq i32 %v5_aa70, -1
  br label %dec_label_pc_ad9c

dec_label_pc_ad9c:                                ; preds = %dec_label_pc_ae90, %dec_label_pc_ad9c.preheader
  %v0_ad9c = phi i32 [ %v0_ad9c.pre, %dec_label_pc_ad9c.preheader ], [ %v1_af54, %dec_label_pc_ae90 ]
  %v2_ad9c = icmp eq i32 %v0_ad9c, 0
  store i1 %v2_ad9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_ad9c, 1
  br label %dec_label_pc_ada4

dec_label_pc_ada4:                                ; preds = %dec_label_pc_ada4, %dec_label_pc_ad9c
  br i1 %tmp106, label %dec_label_pc_ada4, label %dec_label_pc_ada8

dec_label_pc_ada8:                                ; preds = %dec_label_pc_ada4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_adb4

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ae90, %dec_label_pc_ada8
  %v1_adc8 = phi i32 [ %v1_af50, %dec_label_pc_ae90 ], [ 0, %dec_label_pc_ada8 ]
  %v5_adb8 = mul i32 %v1_adc8, 24
  %v1_adbc = load i32, i32* @sb, align 4
  %v2_adbc = add i32 %v1_adbc, %v5_adb8
  store i32 %v2_adbc, i32* %r3.global-to-local, align 4
  store i32 %v2_a950, i32* %r1.global-to-local, align 4
  %v1_adc4 = add i32 %v2_adbc, 20
  %v2_adc4 = inttoptr i32 %v1_adc4 to i8*
  %v3_adc4 = load i8, i8* %v2_adc4, align 1
  %v4_adc4 = zext i8 %v3_adc4 to i32
  store i32 %v4_adc4, i32* %r2.global-to-local, align 4
  %v4_adc8 = mul i32 %v1_adc8, 4
  %v5_adc8 = add i32 %v4_adc8, %v2_a950
  %v6_adc8 = inttoptr i32 %v5_adc8 to i32*
  %v7_adc8 = load i32, i32* %v6_adc8, align 4
  store i32 %v7_adc8, i32* @r5, align 4
  %v7_adcc = icmp eq i8 %v3_adc4, 31
  store i1 %v7_adcc, i1* %cpsr_z.global-to-local, align 1
  %v1_add0 = add i32 %v7_adc8, 24
  store i32 %v1_add0, i32* @r8, align 4
  %v1_add4 = add i32 %v7_adc8, 38
  store i32 %v1_add4, i32* @r6, align 4
  %v1_add8 = add i32 %v7_adc8, 58
  store i32 %v1_add8, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_adc4, 32
  br i1 %tmp117, label %dec_label_pc_af74, label %dec_label_pc_ade0

dec_label_pc_ade0:                                ; preds = %dec_label_pc_adb4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  store i1 %v7_ade4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ade4, label %dec_label_pc_afdc, label %dec_label_pc_adec

dec_label_pc_adec:                                ; preds = %dec_label_pc_af74, %dec_label_pc_ade0
  store i32 %v3_aad4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_afec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_afec, label %dec_label_pc_aff8, label %dec_label_pc_ae00

dec_label_pc_ae00:                                ; preds = %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge, %dec_label_pc_adec
  %v1_ae04 = phi i32 [ %v1_ae04.pre, %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_adec ]
  store i32 %v3_aad8, i32* %r1.global-to-local, align 4
  %v9_ae04 = icmp eq i32 %v3_aad8, %v1_ae04
  store i1 %v9_ae04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae04, label %dec_label_pc_b030, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge, %dec_label_pc_ae00
  %v1_ae10 = phi i32 [ %v1_ae10.pre, %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge ], [ %v1_ae04, %dec_label_pc_ae00 ]
  store i32 %v3_aadc, i32* %r2.global-to-local, align 4
  %v9_ae10 = icmp eq i32 %v3_aadc, %v1_ae10
  store i1 %v9_ae10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae10, label %dec_label_pc_b04c, label %dec_label_pc_ae18

dec_label_pc_ae18:                                ; preds = %dec_label_pc_b030, %dec_label_pc_ae0c
  store i32 %v1_aacc, i32* %r3.global-to-local, align 4
  store i1 %v2_b05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b05c, label %dec_label_pc_b070, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ae18
  %v1_ae20 = load i32, i32* @r5, align 4
  %v2_ae20 = add i32 %v1_ae20, 16
  %v3_ae20 = inttoptr i32 %v2_ae20 to i32*
  %v4_ae20 = load i32, i32* %v3_ae20, align 4
  store i32 %v4_ae20, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v4_ae20, i32* %v4_ae24, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_ae2c:                                ; preds = %bb109, %.thread23, %dec_label_pc_b070
  %v0_ae2c = call i32 @function_10a94()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  store i32 %v0_ae2c, i32* %stack_var_-44, align 4
  %v0_ae34 = call i32 @function_10a94()
  store i32 %v0_ae34, i32* %r0.global-to-local, align 4
  store i32 %v0_ae34, i32* %stack_var_-48, align 4
  %v0_ae3c = call i32 @function_10a94()
  store i32 %v2_ae40, i32* %r1.global-to-local, align 4
  store i32 %v0_ae3c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @r8, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v3_ae50 = call i32 @function_13940(i32 %v0_ae4c, i32 %v2_ae40, i32 4)
  %v0_ae54 = load i32, i32* @r8, align 4
  %v1_ae54 = add i32 %v0_ae54, 6
  store i32 %v1_ae54, i32* %r0.global-to-local, align 4
  store i32 %v2_ae58, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ae60 = call i32 @function_13940(i32 %v1_ae54, i32 %v2_ae58, i32 4)
  %v0_ae64 = load i32, i32* @r8, align 4
  %v1_ae64 = add i32 %v0_ae64, 4
  store i32 %v1_ae64, i32* %r0.global-to-local, align 4
  store i32 %v2_ae68, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ae70 = call i32 @function_13940(i32 %v1_ae64, i32 %v2_ae68, i32 2)
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  %v0_ae78 = load i32, i32* @r8, align 4
  %v1_ae78 = add i32 %v0_ae78, 10
  store i32 %v1_ae78, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ae80 = call i32 @function_13940(i32 %v1_ae78, i32 %v2_ae74, i32 2)
  store i32 %v3_ae80, i32* %r0.global-to-local, align 4
  store i32 %v1_aa3c, i32* %r1.global-to-local, align 4
  store i1 %v2_ae88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae88, label %dec_label_pc_ae90, label %dec_label_pc_b07c

dec_label_pc_ae90:                                ; preds = %dec_label_pc_ae2c, %dec_label_pc_b07c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae94 = load i32, i32* @sl, align 4
  %v1_ae94 = trunc i32 %v0_ae94 to i8
  %v2_ae94 = load i32, i32* @r5, align 4
  %v3_ae94 = add i32 %v2_ae94, 10
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94, i8* %v4_ae94, align 1
  %v0_ae98 = load i32, i32* @sl, align 4
  %v1_ae98 = trunc i32 %v0_ae98 to i8
  %v2_ae98 = load i32, i32* @r5, align 4
  %v3_ae98 = add i32 %v2_ae98, 11
  %v4_ae98 = inttoptr i32 %v3_ae98 to i8*
  store i8 %v1_ae98, i8* %v4_ae98, align 1
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* @r0, align 4
  %v2_aea0 = call i32 @function_f008(i32 %v0_ae9c, i32 20)
  %v3_aea0 = trunc i32 %v2_aea0 to i8
  %v4_aea4 = sdiv i32 %v2_aea0, 256
  store i32 %v4_aea4, i32* %r3.global-to-local, align 4
  %v1_aea8 = trunc i32 %v4_aea4 to i8
  %v2_aea8 = load i32, i32* @r5, align 4
  %v3_aea8 = add i32 %v2_aea8, 11
  %v4_aea8 = inttoptr i32 %v3_aea8 to i8*
  store i8 %v1_aea8, i8* %v4_aea8, align 1
  %v3_aeac = load i32, i32* @r5, align 4
  %v4_aeac = add i32 %v3_aeac, 10
  %v5_aeac = inttoptr i32 %v4_aeac to i8*
  store i8 %v3_aea0, i8* %v5_aeac, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aeb4 = load i32, i32* @sl, align 4
  %v1_aeb4 = trunc i32 %v0_aeb4 to i8
  %v2_aeb4 = load i32, i32* @r6, align 4
  %v3_aeb4 = add i32 %v2_aeb4, 10
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i8*
  store i8 %v1_aeb4, i8* %v4_aeb4, align 1
  %v0_aeb8 = load i32, i32* @sl, align 4
  %v1_aeb8 = trunc i32 %v0_aeb8 to i8
  %v2_aeb8 = load i32, i32* @r6, align 4
  %v3_aeb8 = add i32 %v2_aeb8, 11
  %v4_aeb8 = inttoptr i32 %v3_aeb8 to i8*
  store i8 %v1_aeb8, i8* %v4_aeb8, align 1
  %v0_aebc = load i32, i32* @r6, align 4
  store i32 %v0_aebc, i32* @r0, align 4
  %v2_aec0 = call i32 @function_f008(i32 %v0_aebc, i32 20)
  %v3_aec0 = trunc i32 %v2_aec0 to i8
  store i32 %v2_aec0, i32* %r0.global-to-local, align 4
  %v4_aec4 = sdiv i32 %v2_aec0, 256
  store i32 %v4_aec4, i32* %r3.global-to-local, align 4
  %v3_aec8 = load i32, i32* @r6, align 4
  %v4_aec8 = add i32 %v3_aec8, 10
  %v5_aec8 = inttoptr i32 %v4_aec8 to i8*
  store i8 %v3_aec0, i8* %v5_aec8, align 1
  %v0_aecc = load i32, i32* %r3.global-to-local, align 4
  %v1_aecc = trunc i32 %v0_aecc to i8
  %v2_aecc = load i32, i32* @r6, align 4
  %v3_aecc = add i32 %v2_aecc, 11
  %v4_aecc = inttoptr i32 %v3_aecc to i8*
  store i8 %v1_aecc, i8* %v4_aecc, align 1
  %v0_aed0 = load i32, i32* @r7, align 4
  %v1_aed0 = add i32 %v0_aed0, 4
  %v2_aed0 = inttoptr i32 %v1_aed0 to i8*
  %v3_aed0 = load i8, i8* %v2_aed0, align 1
  %v4_aed0 = zext i8 %v3_aed0 to i32
  store i32 %v4_aed0, i32* %r3.global-to-local, align 4
  %v1_aed4 = add i32 %v0_aed0, 5
  %v2_aed4 = inttoptr i32 %v1_aed4 to i8*
  %v3_aed4 = load i8, i8* %v2_aed4, align 1
  %v4_aed4 = zext i8 %v3_aed4 to i32
  store i32 %v0_aed0, i32* @r1, align 4
  %v4_aedc = mul nuw nsw i32 %v4_aed4, 256
  %v5_aedc = or i32 %v4_aedc, %v4_aed0
  store i32 %v5_aedc, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @sl, align 4
  %v1_aee0 = trunc i32 %v0_aee0 to i8
  %v3_aee0 = add i32 %v0_aed0, 6
  %v4_aee0 = inttoptr i32 %v3_aee0 to i8*
  store i8 %v1_aee0, i8* %v4_aee0, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_aee8 = load i32, i32* @sl, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* @r7, align 4
  %v3_aee8 = add i32 %v2_aee8, 7
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* @r6, align 4
  store i32 %v0_aeec, i32* %r0.global-to-local, align 4
  %v4_aef0 = call i32 @function_f064(i32 %v0_aeec, i32 %v0_aed0, i32 %v5_aedc, i32 %stack_var_-156.0.ph)
  %v5_aef0 = trunc i32 %v4_aef0 to i8
  store i32 %v4_aef0, i32* %r0.global-to-local, align 4
  %v3_aef4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aef4, i32* %r3.global-to-local, align 4
  %v3_aef8 = mul i32 %v3_aef4, 32
  store i32 %v3_aef8, i32* %r2.global-to-local, align 4
  %v0_aefc = load i32, i32* @r5, align 4
  %v1_aefc = add i32 %v0_aefc, 16
  %v2_aefc = inttoptr i32 %v1_aefc to i32*
  %v3_aefc = load i32, i32* %v2_aefc, align 4
  store i32 %v3_aefc, i32* %r1.global-to-local, align 4
  %v5_af00 = mul i32 %v3_aef4, 24
  store i32 %v5_af00, i32* %r2.global-to-local, align 4
  %v4_af0442 = udiv i32 %v4_aef0, 256
  %v1_af08 = trunc i32 %v4_af0442 to i8
  %v2_af08 = load i32, i32* @r7, align 4
  %v3_af08 = add i32 %v2_af08, 7
  %v4_af08 = inttoptr i32 %v3_af08 to i8*
  store i8 %v1_af08, i8* %v4_af08, align 1
  %v0_af0c = load i32, i32* %r2.global-to-local, align 4
  %v1_af0c = load i32, i32* @sb, align 4
  %v2_af0c = add i32 %v1_af0c, %v0_af0c
  store i32 %v2_af0c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_af14 = load i32, i32* @r7, align 4
  %v4_af14 = add i32 %v3_af14, 6
  %v5_af14 = inttoptr i32 %v4_af14 to i8*
  store i8 %v5_aef0, i8* %v5_af14, align 1
  %v0_af18 = load i32, i32* %r1.global-to-local, align 4
  %v1_af18 = load i32, i32* %lr.global-to-local, align 4
  %v2_af18 = add i32 %v1_af18, 4
  %v3_af18 = inttoptr i32 %v2_af18 to i32*
  store i32 %v0_af18, i32* %v3_af18, align 4
  %v0_af1c = load i32, i32* %r3.global-to-local, align 4
  %v1_af1c = trunc i32 %v0_af1c to i8
  %v2_af1c = load i32, i32* %r2.global-to-local, align 4
  %v3_af1c = load i32, i32* @sb, align 4
  %v4_af1c = add i32 %v3_af1c, %v2_af1c
  %v5_af1c = inttoptr i32 %v4_af1c to i8*
  store i8 %v1_af1c, i8* %v5_af1c, align 1
  %v0_af20 = load i32, i32* @sl, align 4
  %v1_af20 = trunc i32 %v0_af20 to i8
  %v2_af20 = load i32, i32* %lr.global-to-local, align 4
  %v3_af20 = add i32 %v2_af20, 2
  %v4_af20 = inttoptr i32 %v3_af20 to i8*
  store i8 %v1_af20, i8* %v4_af20, align 1
  %v0_af24 = load i32, i32* @sl, align 4
  %v1_af24 = trunc i32 %v0_af24 to i8
  %v2_af24 = load i32, i32* %lr.global-to-local, align 4
  %v3_af24 = add i32 %v2_af24, 1
  %v4_af24 = inttoptr i32 %v3_af24 to i8*
  store i8 %v1_af24, i8* %v4_af24, align 1
  %v0_af28 = load i32, i32* @sl, align 4
  %v1_af28 = trunc i32 %v0_af28 to i8
  %v2_af28 = load i32, i32* %lr.global-to-local, align 4
  %v3_af28 = add i32 %v2_af28, 3
  %v4_af28 = inttoptr i32 %v3_af28 to i8*
  store i8 %v1_af28, i8* %v4_af28, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_af34 = load i32, i32* @r5, align 4
  store i32 %v0_af34, i32* %r1.global-to-local, align 4
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_af40 = load i32, i32* %lr.global-to-local, align 4
  %v6_af48 = inttoptr i32 %v0_af34 to i32*
  %v7_af48 = call i32 @function_14b1c(i32 %v3_aa84, i32* %v6_af48, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_af40, i32 16)
  %v3_af4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af4c, i32* %r3.global-to-local, align 4
  %v1_af50 = add i32 %v3_af4c, 1
  store i32 %v1_af50, i32* %r0.global-to-local, align 4
  %v1_af54 = load i32, i32* @fp, align 4
  %v9_af54 = icmp eq i32 %v1_af50, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af50, i32* %stack_var_-40, align 4
  %v6_af5c = icmp slt i32 %v1_af50, %v1_af54
  br i1 %v6_af5c, label %dec_label_pc_adb4, label %dec_label_pc_ad9c

dec_label_pc_af64:                                ; preds = %dec_label_pc_aa94
  store i32 %v3_aa84, i32* %r0.global-to-local, align 4
  %v1_af68 = call i32 @function_14284(i32 %v3_aa84)
  store i32 %v1_af68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af6c

dec_label_pc_af6c:                                ; preds = %dec_label_pc_a930, %dec_label_pc_af64
  %v29_af70 = phi i32 [ %v3_aa84, %dec_label_pc_a930 ], [ %v1_af68, %dec_label_pc_af64 ]
  store i32 %v3_a930, i32* %r4.global-to-local, align 4
  store i32 %v15_a930, i32* %r8.global-to-local, align 4
  store i32 %v21_a930, i32* %sl.global-to-local, align 4
  ret i32 %v29_af70

dec_label_pc_af74:                                ; preds = %dec_label_pc_adb4
  %v1_af74 = add i32 %v2_adbc, 16
  %v2_af74 = inttoptr i32 %v1_af74 to i32*
  %v3_af74 = load i32, i32* %v2_af74, align 4
  store i32 %v3_af74, i32* %r4.global-to-local, align 4
  %v0_af78 = call i32 @function_10a94()
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v3_af7c = load i32, i32* %stack_var_-40, align 4
  %v5_af84 = mul i32 %v3_af7c, 24
  %v0_af88 = load i32, i32* %r4.global-to-local, align 4
  %v1_af8c = load i32, i32* @sb, align 4
  %v2_af8c = add i32 %v1_af8c, %v5_af84
  store i32 %v2_af8c, i32* %r1.global-to-local, align 4
  %v1_af90 = and i32 %v0_af88, 65280
  store i32 %v1_af90, i32* %r3.global-to-local, align 4
  %v1_af88 = udiv i32 %v0_af88, 256
  %v3_af94 = and i32 %v1_af88, 65280
  store i32 %v3_af94, i32* %r2.global-to-local, align 4
  %v3_af98 = mul i32 %v0_af88, 16777216
  store i32 %v3_af98, i32* %ip.global-to-local, align 4
  %v1_af9c = add i32 %v2_af8c, 20
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %lr.global-to-local, align 4
  %v4_afa0 = mul nuw nsw i32 %v1_af90, 256
  %v5_afa0 = or i32 %v4_afa0, %v3_af98
  store i32 %v5_afa0, i32* %ip.global-to-local, align 4
  %v2_afa8 = call i32 @llvm.bswap.i32(i32 %v0_af88)
  %v7_afac = lshr i32 %v0_af78, %v4_af9c
  %v8_afac = add i32 %v7_afac, %v2_afa8
  %v3_afb8 = mul i32 %v8_afac, 16777216
  %v1_afbc = and i32 %v8_afac, 65280
  store i32 %v1_afbc, i32* %r0.global-to-local, align 4
  store i32 %v5_aa70, i32* %r2.global-to-local, align 4
  %v4_afc8 = mul nuw nsw i32 %v1_afbc, 256
  %v5_afc8 = or i32 %v4_afc8, %v3_afb8
  store i32 %v5_afc8, i32* %r1.global-to-local, align 4
  %v2_afcc = call i32 @llvm.bswap.i32(i32 %v8_afac)
  store i32 %v2_afcc, i32* %r3.global-to-local, align 4
  store i1 %v7_ade4, i1* %cpsr_z.global-to-local, align 1
  %v1_afd4 = load i32, i32* @r5, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v2_afcc, i32* %v3_afd4, align 4
  br i1 %v2_ade4, label %dec_label_pc_afdc, label %dec_label_pc_adec

dec_label_pc_afdc:                                ; preds = %dec_label_pc_af74, %dec_label_pc_ade0
  %v0_afdc = call i32 @function_10a94()
  store i32 %v0_afdc, i32* %r0.global-to-local, align 4
  store i32 %v3_aad4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_afec, i1* %cpsr_z.global-to-local, align 1
  %v1_aff0 = load i32, i32* @r5, align 4
  %v2_aff0 = add i32 %v1_aff0, 12
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v0_afdc, i32* %v3_aff0, align 4
  br i1 %v9_afec, label %dec_label_pc_aff8, label %dec_label_pc_afdc.dec_label_pc_ae00_crit_edge

dec_label_pc_afdc.dec_label_pc_ae00_crit_edge:    ; preds = %dec_label_pc_afdc
  %v1_ae04.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae00

dec_label_pc_aff8:                                ; preds = %dec_label_pc_afdc, %dec_label_pc_adec
  %v0_aff8 = call i32 @function_10a94()
  %v3_b000 = urem i32 %v0_aff8, 65536
  store i32 %v3_b000, i32* %r0.global-to-local, align 4
  %v1_b008 = sub nsw i32 999, %v3_b000
  store i32 %v1_b008, i32* %r2.global-to-local, align 4
  %v3_b00c = sdiv i32 %v1_b008, 256
  store i32 %v3_b00c, i32* %r1.global-to-local, align 4
  %v3_b01039 = udiv i32 %v3_b000, 256
  store i32 %v3_b01039, i32* %r3.global-to-local, align 4
  %v1_b014 = trunc i32 %v3_b01039 to i8
  %v2_b014 = load i32, i32* @r5, align 4
  %v3_b014 = add i32 %v2_b014, 5
  %v4_b014 = inttoptr i32 %v3_b014 to i8*
  store i8 %v1_b014, i8* %v4_b014, align 1
  %v0_b018 = load i32, i32* %r0.global-to-local, align 4
  %v1_b018 = trunc i32 %v0_b018 to i8
  %v2_b018 = load i32, i32* @r5, align 4
  %v3_b018 = add i32 %v2_b018, 4
  %v4_b018 = inttoptr i32 %v3_b018 to i8*
  store i8 %v1_b018, i8* %v4_b018, align 1
  %v0_b01c = load i32, i32* %r1.global-to-local, align 4
  %v1_b01c = trunc i32 %v0_b01c to i8
  %v2_b01c = load i32, i32* @r6, align 4
  %v3_b01c = add i32 %v2_b01c, 5
  %v4_b01c = inttoptr i32 %v3_b01c to i8*
  store i8 %v1_b01c, i8* %v4_b01c, align 1
  store i32 %v3_aad8, i32* %r1.global-to-local, align 4
  %v1_b024 = load i32, i32* @r4, align 4
  %v9_b024 = icmp eq i32 %v3_aad8, %v1_b024
  store i1 %v9_b024, i1* %cpsr_z.global-to-local, align 1
  %v0_b028 = load i32, i32* %r2.global-to-local, align 4
  %v1_b028 = trunc i32 %v0_b028 to i8
  %v2_b028 = load i32, i32* @r6, align 4
  %v3_b028 = add i32 %v2_b028, 4
  %v4_b028 = inttoptr i32 %v3_b028 to i8*
  store i8 %v1_b028, i8* %v4_b028, align 1
  %v0_b02c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b02c, label %dec_label_pc_b030, label %dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge

dec_label_pc_aff8.dec_label_pc_ae0c_crit_edge:    ; preds = %dec_label_pc_aff8
  %v1_ae10.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_b030:                                ; preds = %dec_label_pc_aff8, %dec_label_pc_ae00
  %v0_b030 = call i32 @function_10a94()
  %v1_b030 = trunc i32 %v0_b030 to i8
  store i32 %v0_b030, i32* %r0.global-to-local, align 4
  store i32 %v3_aadc, i32* %r2.global-to-local, align 4
  %v4_b038 = sdiv i32 %v0_b030, 256
  store i32 %v4_b038, i32* %r3.global-to-local, align 4
  %v1_b03c = load i32, i32* @r4, align 4
  %v9_b03c = icmp eq i32 %v3_aadc, %v1_b03c
  store i1 %v9_b03c, i1* %cpsr_z.global-to-local, align 1
  %v3_b040 = load i32, i32* @r5, align 4
  %v4_b040 = add i32 %v3_b040, 58
  %v5_b040 = inttoptr i32 %v4_b040 to i8*
  store i8 %v1_b030, i8* %v5_b040, align 1
  %v0_b044 = load i32, i32* %r3.global-to-local, align 4
  %v1_b044 = trunc i32 %v0_b044 to i8
  %v2_b044 = load i32, i32* @r7, align 4
  %v3_b044 = add i32 %v2_b044, 1
  %v4_b044 = inttoptr i32 %v3_b044 to i8*
  store i8 %v1_b044, i8* %v4_b044, align 1
  %v0_b048 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b048, label %dec_label_pc_b04c, label %dec_label_pc_ae18

dec_label_pc_b04c:                                ; preds = %dec_label_pc_b030, %dec_label_pc_ae0c
  %v0_b04c = call i32 @function_10a94()
  %v1_b04c = trunc i32 %v0_b04c to i8
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v4_b05043 = udiv i32 %v0_b04c, 256
  %v1_b054 = trunc i32 %v4_b05043 to i8
  %v2_b054 = load i32, i32* @r7, align 4
  %v3_b054 = add i32 %v2_b054, 3
  %v4_b054 = inttoptr i32 %v3_b054 to i8*
  store i8 %v1_b054, i8* %v4_b054, align 1
  store i32 %v1_aacc, i32* %r3.global-to-local, align 4
  store i1 %v2_b05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b05c, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_b04c
  %v1_b060 = load i32, i32* @r5, align 4
  %v2_b060 = add i32 %v1_b060, 16
  %v3_b060 = inttoptr i32 %v2_b060 to i32*
  %v4_b060 = load i32, i32* %v3_b060, align 4
  store i32 %v4_b060, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_b04c, %bb107
  %v3_b064 = load i32, i32* @r7, align 4
  %v4_b064 = add i32 %v3_b064, 2
  %v5_b064 = inttoptr i32 %v4_b064 to i8*
  store i8 %v1_b04c, i8* %v5_b064, align 1
  %v0_b068 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b068, label %dec_label_pc_b070, label %bb109

bb109:                                            ; preds = %bb108
  %v1_b068 = load i32, i32* %r3.global-to-local, align 4
  %v2_b068 = load i32, i32* @r6, align 4
  %v3_b068 = add i32 %v2_b068, 16
  %v4_b068 = inttoptr i32 %v3_b068 to i32*
  store i32 %v1_b068, i32* %v4_b068, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_b070:                                ; preds = %dec_label_pc_ae18, %bb108
  %v0_b070 = call i32 @function_10a94()
  store i32 %v0_b070, i32* %r0.global-to-local, align 4
  %v1_b074 = load i32, i32* @r6, align 4
  %v2_b074 = add i32 %v1_b074, 16
  %v3_b074 = inttoptr i32 %v2_b074 to i32*
  store i32 %v0_b070, i32* %v3_b074, align 4
  br label %dec_label_pc_ae2c

dec_label_pc_b07c:                                ; preds = %dec_label_pc_ae2c
  %v0_b07c = load i32, i32* @r7, align 4
  %v1_b07c = add i32 %v0_b07c, 8
  store i32 %v1_b07c, i32* %r0.global-to-local, align 4
  store i32 %v5_aa1c, i32* @r1, align 4
  %v1_b084 = inttoptr i32 %v1_b07c to i8*
  %v2_b084 = call i32 @function_10c70(i8* %v1_b084)
  store i32 %v2_b084, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae90

dec_label_pc_b08c:                                ; preds = %dec_label_pc_aabc
  %v1_b094 = add i32 %v5_aa1c, 8
  store i32 %v1_b094, i32* %r1.global-to-local, align 4
  %v1_b098 = add i32 %v5_aa1c, 66
  store i32 %v1_b098, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ad9c.preheader

; uselistorder directives
  uselistorder i32 %v1_b098, { 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v0_b04c, { 0, 2, 1 }
  uselistorder i32 %v0_b030, { 0, 2, 1 }
  uselistorder i32 %v3_b000, { 0, 2, 1 }
  uselistorder i32 %v2_afcc, { 1, 0 }
  uselistorder i32 %v8_afac, { 1, 2, 0 }
  uselistorder i32 %v3_af98, { 1, 0 }
  uselistorder i32 %v0_af88, { 2, 0, 1, 3 }
  uselistorder i32 %v1_af54, { 1, 2, 0 }
  uselistorder i32 %v1_af50, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_aef4, { 1, 0, 2 }
  uselistorder i32 %v4_aef0, { 0, 2, 1 }
  uselistorder i32 %v0_aed0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_aec0, { 0, 2, 1 }
  uselistorder i32 %v4_aea4, { 1, 0 }
  uselistorder i32 %v7_adc8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ad9c, { 1, 0 }
  uselistorder i1 %v7_ade4, { 2, 1, 0 }
  uselistorder i1 %v2_b05c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_afec, { 2, 3, 1, 0 }
  uselistorder i32 %v0_ad24, { 1, 0, 2 }
  uselistorder i32 %v3_abac, { 1, 0, 2 }
  uselistorder i32 %v3_ab8c, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_ab2c, { 2, 1, 0 }
  uselistorder i32 %v1_ab18, { 1, 0 }
  uselistorder i32 %v1_ab14, { 2, 1, 0 }
  uselistorder i32 %v1_ab0c, { 0, 2, 1 }
  uselistorder i32 %v3_ab04, { 2, 1, 0 }
  uselistorder i32 %v0_aae0, { 1, 0, 2 }
  uselistorder i32 %v3_aad4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aacc, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aac8, { 1, 0 }
  uselistorder i32 %v0_aac8, { 2, 1, 0 }
  uselistorder i32 %v0_aac0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aabc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aab4, { 1, 0 }
  uselistorder i1 %v7_aa88, { 1, 0 }
  uselistorder i32 %v3_aa84, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_aa70, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_aa3c, { 1, 2, 0 }
  uselistorder i32 %v5_aa1c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a9d0, { 1, 0 }
  uselistorder i8 %v5_a9c0, { 1, 0 }
  uselistorder i32 %v5_a9a4, { 1, 0 }
  uselistorder i32 %v6_a968, { 1, 0 }
  uselistorder i32 %v2_a950, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a934, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 46, 15, 16, 18, 17, 19, 20, 21, 22, 24, 23, 28, 25, 26, 27, 31, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder label %dec_label_pc_b070, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_af6c, { 1, 0 }
  uselistorder label %dec_label_pc_ae90, { 1, 0 }
  uselistorder label %dec_label_pc_ae2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ad9c.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b0ac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b0ac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b0ac = load i32, i32* @r4, align 4
  %v15_b0ac = load i32, i32* @r8, align 4
  %v1_b0b0 = urem i32 %arg1, 256
  store i32 %v1_b0b0, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b0b0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b0c8 = urem i32 %arg3, 256
  store i32 %v1_b0c8, i32* @r4, align 4
  %v2_b0cc = call i32 @function_14e84(i32 %v1_b0b0, i32 4)
  %v0_b0d0 = load i32, i32* @r5, align 4
  store i32 %v0_b0d0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0e0 = load i32, i32* @r4, align 4
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  %v5_b0e4 = inttoptr i32 %v0_b0d0 to i32*
  %v6_b0e4 = call i32 @function_a4e8(i32 %v0_b0e0, i32* %v5_b0e4, i32 2, i32 0)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b0fc = load i32, i32* @r5, align 4
  store i32 %v0_b0fc, i32* %r1.global-to-local, align 4
  %v0_b100 = load i32, i32* @r4, align 4
  store i32 %v0_b100, i32* %r0.global-to-local, align 4
  %v5_b104 = trunc i32 %v6_b0e4 to i8
  %v6_b108 = inttoptr i32 %v0_b0fc to i32*
  %v7_b108 = call i32 @function_a4e8(i32 %v0_b100, i32* %v6_b108, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b10c = load i32, i32* @r5, align 4
  store i32 %v0_b10c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b108, i32* @r7, align 4
  %v0_b11c = load i32, i32* @r4, align 4
  store i32 %v0_b11c, i32* %r0.global-to-local, align 4
  %v4_b120 = inttoptr i32 %v0_b10c to i32*
  %v5_b120 = call i32 @function_a4e8(i32 %v0_b11c, i32* %v4_b120, i32 4, i32 64)
  %v0_b12c = load i32, i32* @r5, align 4
  store i32 %v0_b12c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b138 = load i32, i32* @r4, align 4
  store i32 %v0_b138, i32* %r0.global-to-local, align 4
  %v5_b13c = trunc i32 %v5_b120 to i8
  %v6_b140 = inttoptr i32 %v0_b12c to i32*
  %v7_b140 = call i32 @function_a4e8(i32 %v0_b138, i32* %v6_b140, i32 5, i32 1)
  %v1_b14c = urem i32 %v7_b140, 256
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b158 = load i32, i32* @r5, align 4
  store i32 %v0_b158, i32* %r1.global-to-local, align 4
  %v0_b15c = load i32, i32* @r4, align 4
  store i32 %v0_b15c, i32* %r0.global-to-local, align 4
  %v5_b164 = inttoptr i32 %v0_b158 to i32*
  %v6_b164 = call i32 @function_a4e8(i32 %v0_b15c, i32* %v5_b164, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b16c = load i32, i32* @r5, align 4
  store i32 %v0_b16c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b164, i32* @sl, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* %r0.global-to-local, align 4
  %v4_b180 = inttoptr i32 %v0_b16c to i32*
  %v5_b180 = call i32 @function_a4e8(i32 %v0_b17c, i32* %v4_b180, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b184 = load i32, i32* @r5, align 4
  store i32 %v0_b184, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b180, i32* @r8, align 4
  %v0_b194 = load i32, i32* @r4, align 4
  store i32 %v0_b194, i32* %r0.global-to-local, align 4
  %v4_b198 = inttoptr i32 %v0_b184 to i32*
  %v5_b198 = call i32 @function_a4e8(i32 %v0_b194, i32* %v4_b198, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r5, align 4
  store i32 %v0_b1a8, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r4, align 4
  store i32 %v0_b1ac, i32* %r0.global-to-local, align 4
  %v4_b1b0 = inttoptr i32 %v0_b1a8 to i32*
  %v5_b1b0 = call i32 @function_a4e8(i32 %v0_b1ac, i32* %v4_b1b0, i32 1, i32 1)
  %v1_b1b8 = urem i32 %v5_b1b0, 256
  %v0_b1bc = load i32, i32* @r5, align 4
  store i32 %v0_b1bc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r4, align 4
  store i32 %v0_b1c8, i32* %r0.global-to-local, align 4
  %v5_b1d0 = inttoptr i32 %v0_b1bc to i32*
  %v6_b1d0 = call i32 @function_a4e8(i32 %v0_b1c8, i32* %v5_b1d0, i32 19, i32 0)
  %v0_b1d8 = load i32, i32* @r5, align 4
  store i32 %v0_b1d8, i32* %r1.global-to-local, align 4
  %v2_b1dc = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_b1dc, i32* %r3.global-to-local, align 4
  store i32 %v6_b1d0, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b1e8 = load i32, i32* @r4, align 4
  store i32 %v0_b1e8, i32* %r0.global-to-local, align 4
  %v4_b1ec = inttoptr i32 %v0_b1d8 to i32*
  %v5_b1ec = call i32 @function_a4e8(i32 %v0_b1e8, i32* %v4_b1ec, i32 25, i32 %v2_b1dc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b200 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  %v7_b204 = icmp eq i32 %v3_b200, -1
  store i1 %v7_b204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b204, label %dec_label_pc_b684, label %dec_label_pc_b210

dec_label_pc_b210:                                ; preds = %dec_label_pc_b0ac
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b218 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b218, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b22c = call i32 @function_14b50(i32 %v3_b200, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b22c, i32* %r0.global-to-local, align 4
  %v7_b230 = icmp eq i32 %v6_b22c, -1
  store i1 %v7_b230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b230, label %dec_label_pc_b67c, label %dec_label_pc_b238

dec_label_pc_b238:                                ; preds = %dec_label_pc_b210
  %v0_b238 = load i32, i32* @sl, align 4
  %v0_b244 = load i32, i32* @r8, align 4
  %v3_b244 = mul i32 %v0_b244, 65536
  store i32 %v3_b244, i32* %r8.global-to-local, align 4
  %v0_b248 = load i32, i32* @r7, align 4
  %v0_b24c = load i32, i32* @r6, align 4
  %v1_b24c = urem i32 %v0_b24c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b254 = urem i32 %v0_b238, 65536
  store i32 %v3_b254, i32* %r2.global-to-local, align 4
  %v3_b258 = urem i32 %v0_b244, 65536
  store i32 %v3_b258, i32* %r3.global-to-local, align 4
  %v0_b25c = load i32, i32* @fp, align 4
  %v2_b25c = icmp eq i32 %v0_b25c, 0
  store i1 %v2_b25c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b26c = urem i32 %v0_b248, 65536
  store i32 %v3_b26c, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b25c, 1
  br i1 %tmp84, label %dec_label_pc_b7a8, label %dec_label_pc_b27c

dec_label_pc_b27c:                                ; preds = %dec_label_pc_b238
  %v3_b280 = mul i32 %v5_b198, 65536
  %v1_b284 = add i32 %v3_b280, 3407872
  %v3_b28c = udiv i32 %v1_b284, 256
  %v0_b248.not = or i32 %v0_b248, -65536
  %v1_b29c = xor i32 %v0_b248.not, 65535
  %v1_b2a0 = urem i32 %v0_b244, 256
  %tmp85 = mul nsw i32 %v1_b29c, 256
  %v1_b2b8 = and i32 %v3_b28c, 65280
  %v1_b2bc = add i32 %v3_b280, 524288
  %v4_b2c0 = udiv i32 %v1_b284, 16777216
  %v5_b2c0 = or i32 %v1_b2b8, %v4_b2c0
  store i32 %v5_b2c0, i32* %r0.global-to-local, align 4
  %v1_b2c4 = add i32 %v3_b280, 1835008
  %v1_b2cc = and i32 %tmp85, 65280
  store i32 %v1_b2cc, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b29c, 256
  %tmp87 = udiv i32 %v0_b248, 256
  %v5_b2e0 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b238, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b300 = sdiv i32 %sext29, 16777216
  %v3_b30c = mul nuw nsw i32 %v1_b2a0, 256
  store i32 %v3_b30c, i32* @r5, align 4
  %v3_b310 = udiv i32 %v1_b2bc, 256
  %tmp89 = udiv i32 %v0_b244, 256
  %v4_b318 = urem i32 %tmp89, 256
  %v5_b318 = or i32 %v4_b318, %v3_b30c
  store i32 %v5_b318, i32* @r7, align 4
  %v3_b31c = ashr i32 %sext29, 31
  %v3_b328 = sdiv i32 %v1_b2c4, 16777216
  %v1_b32c = and i32 %v3_b310, 65280
  store i32 %v1_b32c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b334 = sdiv i32 %sext30, 16777216
  %v3_b338 = ashr i32 %v1_b2c4, 31
  %v3_b33c = udiv i32 %v1_b29c, 65536
  %v4_b340 = udiv i32 %v1_b2bc, 16777216
  %v5_b340 = or i32 %v1_b32c, %v4_b340
  store i32 %v5_b340, i32* %r8.global-to-local, align 4
  %v3_b34c = ashr i32 %sext30, 31
  store i32 %v3_b34c, i32* %r1.global-to-local, align 4
  store i32 %v1_b2a0, i32* %r2.global-to-local, align 4
  %v3_b35441 = udiv i32 %v1_b32c, 256
  store i32 %v3_b35441, i32* %r3.global-to-local, align 4
  %v5_b35c = trunc i32 %v3_b34c to i8
  store i32 0, i32* @r4, align 4
  %v4_b3b8 = sext i8 %v5_b13c to i32
  %sext = mul i32 %v1_b284, 256
  %v4_b3c0 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b2c0, 16777216
  %v4_b3d0 = sdiv i32 %sext16, 16777216
  %v2_b4a4 = icmp eq i32 %v1_b24c, 0
  %sext20 = mul i32 %v1_b2bc, 256
  %v4_b4c4 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b244, 16777216
  %v7_b4dc = sdiv i32 %sext21, 16777216
  %v1_b3cc = trunc i32 %v4_b3c0 to i8
  br label %dec_label_pc_b36c

dec_label_pc_b36c:                                ; preds = %bb96, %dec_label_pc_b27c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b378 = call i32 @function_14e84(i32 1510, i32 4)
  store i32 %v2_b378, i32* %r0.global-to-local, align 4
  store i32 %v2_b0cc, i32* %r1.global-to-local, align 4
  %v3_b380 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b380, i32* %r3.global-to-local, align 4
  %v2_b384 = load i32, i32* @r4, align 4
  %v5_b384 = mul i32 %v2_b384, 4
  %v6_b384 = add i32 %v5_b384, %v2_b0cc
  %v7_b384 = inttoptr i32 %v6_b384 to i32*
  store i32 %v2_b378, i32* %v7_b384, align 4
  %v0_b388 = load i32, i32* %r1.global-to-local, align 4
  %v1_b388 = load i32, i32* %r3.global-to-local, align 4
  %v4_b388 = mul i32 %v1_b388, 4
  %v5_b388 = add i32 %v4_b388, %v0_b388
  %v6_b388 = inttoptr i32 %v5_b388 to i32*
  %v7_b388 = load i32, i32* %v6_b388, align 4
  store i32 %v7_b388, i32* %r4.global-to-local, align 4
  %v1_b38c = inttoptr i32 %v7_b388 to i8*
  %v2_b38c = load i8, i8* %v1_b38c, align 1
  %tmp = urem i8 %v2_b38c, 16
  %v1_b390 = zext i8 %tmp to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r2.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v1_b38c, align 1
  %v0_b39c = load i32, i32* %r4.global-to-local, align 4
  %v1_b39c = inttoptr i32 %v0_b39c to i8*
  %v2_b39c = load i8, i8* %v1_b39c, align 1
  %v1_b3a0 = and i8 %v2_b39c, -16
  %v1_b3a4 = or i8 %v1_b3a0, 5
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  store i8 %v1_b3a4, i8* %v1_b39c, align 1
  %v2_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3b4 = add i32 %v2_b3b4, 1
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v5_b104, i8* %v4_b3b4, align 1
  store i32 %v4_b3b8, i32* %r1.global-to-local, align 4
  %v2_b3bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3bc = add i32 %v2_b3bc, 8
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v5_b13c, i8* %v4_b3bc, align 1
  store i32 %v4_b3c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b3c8 = load i32, i32* %r2.global-to-local, align 4
  %v9_b3c8 = icmp eq i32 %v0_b3c8, 0
  store i1 %v9_b3c8, i1* %cpsr_z.global-to-local, align 1
  %v2_b3cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b3cc = add i32 %v2_b3cc, 3
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  store i32 %v4_b3d0, i32* %r2.global-to-local, align 4
  %v0_b3d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d4, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b36c
  %v1_b3d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d4, i32* %r3.global-to-local, align 4
  %v2_b3d8 = trunc i32 %v1_b3d4 to i8
  %v3_b3d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b3d8 = add i32 %v3_b3d8, 7
  %v5_b3d8 = inttoptr i32 %v4_b3d8 to i8*
  store i8 %v2_b3d8, i8* %v5_b3d8, align 1
  %v0_b3dc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3dc.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b3e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 64, i8* %v5_b3e0, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b36c, %.thread, %bb
  %v0_b3e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e4 = trunc i32 %v0_b3e4 to i8
  %v2_b3e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3e4 = add i32 %v2_b3e4, 2
  %v4_b3e4 = inttoptr i32 %v3_b3e4 to i8*
  store i8 %v1_b3e4, i8* %v4_b3e4, align 1
  store i32 %v3_b31c, i32* %r2.global-to-local, align 4
  store i32 %v4_b300, i32* %r1.global-to-local, align 4
  %v2_b3f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 47, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 5
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v3_b3fc = load i32, i32* %stack_var_-40, align 4
  %v5_b404 = mul i32 %v3_b3fc, 24
  store i32 %v5_b404, i32* %r3.global-to-local, align 4
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 12
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  store i32 %v5_b1ec, i32* %v3_b40c, align 4
  %v0_b410 = load i32, i32* %r3.global-to-local, align 4
  %v1_b410 = load i32, i32* @sb, align 4
  %v2_b410 = add i32 %v1_b410, %v0_b410
  store i32 %v2_b410, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* %r1.global-to-local, align 4
  %v1_b414 = trunc i32 %v0_b414 to i8
  %v2_b414 = load i32, i32* %r4.global-to-local, align 4
  %v3_b414 = add i32 %v2_b414, 4
  %v4_b414 = inttoptr i32 %v3_b414 to i8*
  store i8 %v1_b414, i8* %v4_b414, align 1
  %v0_b418 = load i32, i32* %r3.global-to-local, align 4
  %v1_b418 = add i32 %v0_b418, 16
  %v2_b418 = inttoptr i32 %v1_b418 to i32*
  %v3_b418 = load i32, i32* %v2_b418, align 4
  store i32 %v3_b418, i32* %r2.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 20
  store i32 %v1_b41c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b424 = load i32, i32* %r0.global-to-local, align 4
  %v1_b424 = trunc i32 %v0_b424 to i8
  %v3_b424 = add i32 %v0_b41c, 23
  %v4_b424 = inttoptr i32 %v3_b424 to i8*
  store i8 %v1_b424, i8* %v4_b424, align 1
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* %r1.global-to-local, align 4
  %v3_b428 = add i32 %v2_b428, 2
  %v4_b428 = inttoptr i32 %v3_b428 to i8*
  store i8 %v1_b428, i8* %v4_b428, align 1
  %v0_b42c = load i32, i32* %r4.global-to-local, align 4
  %v1_b42c = add i32 %v0_b42c, 24
  %v2_b42c = inttoptr i32 %v1_b42c to i8*
  %v3_b42c = load i8, i8* %v2_b42c, align 1
  %tmp102 = urem i8 %v3_b42c, 16
  %v1_b430 = zext i8 %tmp102 to i32
  %v1_b434 = or i32 %v1_b430, 64
  store i32 %v1_b434, i32* %r3.global-to-local, align 4
  %v1_b438 = trunc i32 %v1_b434 to i8
  store i8 %v1_b438, i8* %v2_b42c, align 1
  %v0_b43c = load i32, i32* %r2.global-to-local, align 4
  %v1_b43c = load i32, i32* %r4.global-to-local, align 4
  %v2_b43c = add i32 %v1_b43c, 16
  %v3_b43c = inttoptr i32 %v2_b43c to i32*
  store i32 %v0_b43c, i32* %v3_b43c, align 4
  %v0_b440 = load i32, i32* %r4.global-to-local, align 4
  %v1_b440 = add i32 %v0_b440, 24
  %v2_b440 = inttoptr i32 %v1_b440 to i8*
  %v3_b440 = load i8, i8* %v2_b440, align 1
  %v1_b444 = and i8 %v3_b440, -16
  %v1_b448 = or i8 %v1_b444, 5
  store i8 %v1_b448, i8* %v2_b440, align 1
  %v0_b454 = load i32, i32* %r4.global-to-local, align 4
  %v1_b454 = add i32 %v0_b454, 24
  store i32 %v1_b454, i32* @r5, align 4
  %v3_b458 = add i32 %v0_b454, 25
  %v4_b458 = inttoptr i32 %v3_b458 to i8*
  store i8 %v5_b104, i8* %v4_b458, align 1
  store i32 %v3_b328, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b338, i32* %r2.global-to-local, align 4
  %v2_b468 = load i32, i32* @r5, align 4
  %v3_b468 = add i32 %v2_b468, 4
  %v4_b468 = inttoptr i32 %v3_b468 to i8*
  store i8 %v5_b2e0, i8* %v4_b468, align 1
  %v0_b46c = load i32, i32* %r1.global-to-local, align 4
  %v1_b46c = trunc i32 %v0_b46c to i8
  %v2_b46c = load i32, i32* @r5, align 4
  %v3_b46c = add i32 %v2_b46c, 2
  %v4_b46c = inttoptr i32 %v3_b46c to i8*
  store i8 %v1_b46c, i8* %v4_b46c, align 1
  %v0_b470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b470, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b33c, i32* %r1.global-to-local, align 4
  %v0_b478 = load i32, i32* %r2.global-to-local, align 4
  %v1_b478 = trunc i32 %v0_b478 to i8
  %v2_b478 = load i32, i32* @r5, align 4
  %v3_b478 = add i32 %v2_b478, 3
  %v4_b478 = inttoptr i32 %v3_b478 to i8*
  store i8 %v1_b478, i8* %v4_b478, align 1
  store i32 %v4_b3b8, i32* %r2.global-to-local, align 4
  %v0_b480 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b480, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b480 = load i32, i32* %r3.global-to-local, align 4
  %v2_b480 = trunc i32 %v1_b480 to i8
  %v3_b480 = load i32, i32* @r5, align 4
  %v4_b480 = add i32 %v3_b480, 6
  %v5_b480 = inttoptr i32 %v4_b480 to i8*
  store i8 %v2_b480, i8* %v5_b480, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* %r1.global-to-local, align 4
  %v1_b488 = trunc i32 %v0_b488 to i8
  %v2_b488 = load i32, i32* @r5, align 4
  %v3_b488 = add i32 %v2_b488, 5
  %v4_b488 = inttoptr i32 %v3_b488 to i8*
  store i8 %v1_b488, i8* %v4_b488, align 1
  %v0_b48c = load i32, i32* %r2.global-to-local, align 4
  %v1_b48c = trunc i32 %v0_b48c to i8
  %v2_b48c = load i32, i32* @r5, align 4
  %v3_b48c = add i32 %v2_b48c, 8
  %v4_b48c = inttoptr i32 %v3_b48c to i8*
  store i8 %v1_b48c, i8* %v4_b48c, align 1
  %v0_b490 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b490, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b490 = load i32, i32* %r0.global-to-local, align 4
  %v2_b490 = trunc i32 %v1_b490 to i8
  %v3_b490 = load i32, i32* @r5, align 4
  %v4_b490 = add i32 %v3_b490, 7
  %v5_b490 = inttoptr i32 %v4_b490 to i8*
  store i8 %v2_b490, i8* %v5_b490, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b494 = load i32, i32* %r3.global-to-local, align 4
  %v1_b494 = trunc i32 %v0_b494 to i8
  %v2_b494 = load i32, i32* @r5, align 4
  %v3_b494 = add i32 %v2_b494, 9
  %v4_b494 = inttoptr i32 %v3_b494 to i8*
  store i8 %v1_b494, i8* %v4_b494, align 1
  %v0_b498 = call i32 @function_10a94()
  store i32 %v0_b498, i32* %r0.global-to-local, align 4
  store i32 %v1_b24c, i32* %r1.global-to-local, align 4
  store i1 %v2_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = sub i32 1023, %v0_b498
  store i32 %v1_b4a8, i32* %r3.global-to-local, align 4
  br i1 %v2_b4a4, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b4b0 = load i32, i32* @r5, align 4
  %v3_b4b0 = add i32 %v2_b4b0, 16
  %v4_b4b0 = inttoptr i32 %v3_b4b0 to i32*
  store i32 %v1_b4a8, i32* %v4_b4b0, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b4ac = load i32, i32* %r4.global-to-local, align 4
  %v2_b4ac = add i32 %v1_b4ac, 16
  %v3_b4ac = inttoptr i32 %v2_b4ac to i32*
  %v4_b4ac = load i32, i32* %v3_b4ac, align 4
  store i32 %v4_b4ac, i32* %r3.global-to-local, align 4
  %v2_b4b4 = load i32, i32* @r5, align 4
  %v3_b4b4 = add i32 %v2_b4b4, 16
  %v4_b4b4 = inttoptr i32 %v3_b4b4 to i32*
  store i32 %v4_b4ac, i32* %v4_b4b4, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b334, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* %r4.global-to-local, align 4
  %v1_b4bc = add i32 %v0_b4bc, 44
  store i32 %v1_b4bc, i32* @r6, align 4
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 12
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v0_b498, i32* %v3_b4c0, align 4
  store i32 %v4_b4c4, i32* %r2.global-to-local, align 4
  %v0_b4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4c8 = trunc i32 %v0_b4c8 to i8
  %v2_b4c8 = load i32, i32* @r6, align 4
  %v3_b4c8 = inttoptr i32 %v2_b4c8 to i8*
  store i8 %v1_b4c8, i8* %v3_b4c8, align 1
  %v3_b4cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b4cc, i32* %r3.global-to-local, align 4
  %v0_b4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b4d0 = trunc i32 %v0_b4d0 to i8
  %v2_b4d0 = load i32, i32* @r6, align 4
  %v3_b4d0 = add i32 %v2_b4d0, 5
  %v4_b4d0 = inttoptr i32 %v3_b4d0 to i8*
  store i8 %v1_b4d0, i8* %v4_b4d0, align 1
  %v0_b4d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4d4 = add i32 %v0_b4d4, 1
  store i32 %v1_b4d4, i32* @r4, align 4
  store i32 %v3_b34c, i32* %r1.global-to-local, align 4
  store i32 %v7_b4dc, i32* %r2.global-to-local, align 4
  %v1_b4e0 = load i32, i32* @fp, align 4
  %v9_b4e0 = icmp eq i32 %v1_b4d4, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  %v2_b4e4 = load i32, i32* @r6, align 4
  %v3_b4e4 = add i32 %v2_b4e4, 1
  %v4_b4e4 = inttoptr i32 %v3_b4e4 to i8*
  store i8 %v5_b35c, i8* %v4_b4e4, align 1
  %v0_b4e8 = load i32, i32* @r7, align 4
  %v1_b4e8 = trunc i32 %v0_b4e8 to i8
  %v2_b4e8 = load i32, i32* @r6, align 4
  %v3_b4e8 = add i32 %v2_b4e8, 2
  %v4_b4e8 = inttoptr i32 %v3_b4e8 to i8*
  store i8 %v1_b4e8, i8* %v4_b4e8, align 1
  %v0_b4ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b4ec = trunc i32 %v0_b4ec to i8
  %v2_b4ec = load i32, i32* @r6, align 4
  %v3_b4ec = add i32 %v2_b4ec, 3
  %v4_b4ec = inttoptr i32 %v3_b4ec to i8*
  store i8 %v1_b4ec, i8* %v4_b4ec, align 1
  %v0_b4f0 = load i32, i32* %r8.global-to-local, align 4
  %v1_b4f0 = trunc i32 %v0_b4f0 to i8
  %v2_b4f0 = load i32, i32* @r6, align 4
  %v3_b4f0 = add i32 %v2_b4f0, 4
  %v4_b4f0 = inttoptr i32 %v3_b4f0 to i8*
  store i8 %v1_b4f0, i8* %v4_b4f0, align 1
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 %v0_b4f4, i32* %stack_var_-40, align 4
  %v5_b4f8 = icmp slt i32 %v1_b4d4, %v1_b4e0
  br i1 %v5_b4f8, label %dec_label_pc_b36c, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb96
  %v1_b504 = add i32 %v5_b198, 8
  store i32 %v1_b504, i32* %r3.global-to-local, align 4
  %v1_b508 = add i32 %v5_b198, 52
  store i32 %v1_b508, i32* %r1.global-to-local, align 4
  %v0_b514.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc, %dec_label_pc_b7a8
  %v0_b514.pre = phi i32 [ %v0_b514.pre.pre, %dec_label_pc_b4fc ], [ %v0_b25c, %dec_label_pc_b7a8 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b508, %dec_label_pc_b4fc ], [ %v1_b7b4, %dec_label_pc_b7a8 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b504, %dec_label_pc_b4fc ], [ %v1_b7b0, %dec_label_pc_b7a8 ]
  %v2_b78c = icmp eq i32 %v1_b1b8, 0
  %v2_b58c = icmp eq i32 %v1_b24c, 0
  %v2_b558 = icmp eq i32 %v5_b1ec, -1
  %v7_b558 = icmp eq i32 %v5_b1ec, -1
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b5a8, %dec_label_pc_b514.preheader
  %v0_b514 = phi i32 [ %v0_b514.pre, %dec_label_pc_b514.preheader ], [ %v1_b66c, %dec_label_pc_b5a8 ]
  %v2_b514 = icmp eq i32 %v0_b514, 0
  store i1 %v2_b514, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b514, 1
  br label %dec_label_pc_b51c

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b514
  br i1 %tmp97, label %dec_label_pc_b51c, label %dec_label_pc_b520

dec_label_pc_b520:                                ; preds = %dec_label_pc_b51c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b52c

dec_label_pc_b52c:                                ; preds = %dec_label_pc_b5a8, %dec_label_pc_b520
  %v1_b540 = phi i32 [ %v1_b668, %dec_label_pc_b5a8 ], [ 0, %dec_label_pc_b520 ]
  %v5_b530 = mul i32 %v1_b540, 24
  %v1_b534 = load i32, i32* @sb, align 4
  %v2_b534 = add i32 %v1_b534, %v5_b530
  store i32 %v2_b534, i32* %r3.global-to-local, align 4
  store i32 %v2_b0cc, i32* %r1.global-to-local, align 4
  %v1_b53c = add i32 %v2_b534, 20
  %v2_b53c = inttoptr i32 %v1_b53c to i8*
  %v3_b53c = load i8, i8* %v2_b53c, align 1
  %v4_b53c = zext i8 %v3_b53c to i32
  store i32 %v4_b53c, i32* %r2.global-to-local, align 4
  %v4_b540 = mul i32 %v1_b540, 4
  %v5_b540 = add i32 %v4_b540, %v2_b0cc
  %v6_b540 = inttoptr i32 %v5_b540 to i32*
  %v7_b540 = load i32, i32* %v6_b540, align 4
  store i32 %v7_b540, i32* @r5, align 4
  %v7_b544 = icmp eq i8 %v3_b53c, 31
  store i1 %v7_b544, i1* %cpsr_z.global-to-local, align 1
  %v1_b548 = add i32 %v7_b540, 24
  store i32 %v1_b548, i32* @r6, align 4
  %v1_b54c = add i32 %v7_b540, 44
  store i32 %v1_b54c, i32* @r7, align 4
  %tmp103 = icmp ult i8 %v3_b53c, 32
  br i1 %tmp103, label %dec_label_pc_b68c, label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b52c
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  store i1 %v7_b558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b558, label %dec_label_pc_b6f4, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b68c, %dec_label_pc_b554
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  %v0_b568 = load i32, i32* @sl, align 4
  %v9_b568 = icmp eq i32 %v0_b568, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  store i1 %v9_b568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b568, label %dec_label_pc_b70c, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge, %dec_label_pc_b560
  %v1_b574 = phi i32 [ %v1_b574.pre, %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_b560 ]
  store i32 %v3_b254, i32* %r3.global-to-local, align 4
  %v9_b574 = icmp eq i32 %v3_b254, %v1_b574
  store i1 %v9_b574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b574, label %dec_label_pc_b744, label %dec_label_pc_b57c

dec_label_pc_b57c:                                ; preds = %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge, %dec_label_pc_b570
  %v1_b580 = phi i32 [ %v1_b580.pre, %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge ], [ %v1_b574, %dec_label_pc_b570 ]
  store i32 %v3_b258, i32* %r1.global-to-local, align 4
  %v9_b580 = icmp eq i32 %v3_b258, %v1_b580
  store i1 %v9_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b580, label %dec_label_pc_b760, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b744, %dec_label_pc_b57c
  store i32 %v1_b24c, i32* %r2.global-to-local, align 4
  store i1 %v2_b58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b58c, label %dec_label_pc_b784, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b588
  %v1_b590 = load i32, i32* @r5, align 4
  %v2_b590 = add i32 %v1_b590, 16
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  %v4_b590 = load i32, i32* %v3_b590, align 4
  store i32 %v4_b590, i32* %r3.global-to-local, align 4
  %v2_b594 = load i32, i32* @r6, align 4
  %v3_b594 = add i32 %v2_b594, 16
  %v4_b594 = inttoptr i32 %v3_b594 to i32*
  store i32 %v4_b590, i32* %v4_b594, align 4
  br label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %bb100, %.thread26
  store i32 %v1_b1b8, i32* %r3.global-to-local, align 4
  store i1 %v2_b78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b78c, label %dec_label_pc_b5a8, label %dec_label_pc_b798

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b784, %dec_label_pc_b798
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r8, align 4
  %v1_b5ac = trunc i32 %v0_b5ac to i8
  %v2_b5ac = load i32, i32* @r5, align 4
  %v3_b5ac = add i32 %v2_b5ac, 10
  %v4_b5ac = inttoptr i32 %v3_b5ac to i8*
  store i8 %v1_b5ac, i8* %v4_b5ac, align 1
  %v0_b5b0 = load i32, i32* @r8, align 4
  %v1_b5b0 = trunc i32 %v0_b5b0 to i8
  %v2_b5b0 = load i32, i32* @r5, align 4
  %v3_b5b0 = add i32 %v2_b5b0, 11
  %v4_b5b0 = inttoptr i32 %v3_b5b0 to i8*
  store i8 %v1_b5b0, i8* %v4_b5b0, align 1
  %v0_b5b4 = load i32, i32* @r5, align 4
  store i32 %v0_b5b4, i32* @r0, align 4
  %v2_b5b8 = call i32 @function_f008(i32 %v0_b5b4, i32 20)
  %v3_b5b8 = trunc i32 %v2_b5b8 to i8
  %v4_b5bc = sdiv i32 %v2_b5b8, 256
  store i32 %v4_b5bc, i32* %r3.global-to-local, align 4
  %v1_b5c0 = trunc i32 %v4_b5bc to i8
  %v2_b5c0 = load i32, i32* @r5, align 4
  %v3_b5c0 = add i32 %v2_b5c0, 11
  %v4_b5c0 = inttoptr i32 %v3_b5c0 to i8*
  store i8 %v1_b5c0, i8* %v4_b5c0, align 1
  %v3_b5c4 = load i32, i32* @r5, align 4
  %v4_b5c4 = add i32 %v3_b5c4, 10
  %v5_b5c4 = inttoptr i32 %v4_b5c4 to i8*
  store i8 %v3_b5b8, i8* %v5_b5c4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b5cc = load i32, i32* @r8, align 4
  %v1_b5cc = trunc i32 %v0_b5cc to i8
  %v2_b5cc = load i32, i32* @r6, align 4
  %v3_b5cc = add i32 %v2_b5cc, 10
  %v4_b5cc = inttoptr i32 %v3_b5cc to i8*
  store i8 %v1_b5cc, i8* %v4_b5cc, align 1
  %v0_b5d0 = load i32, i32* @r8, align 4
  %v1_b5d0 = trunc i32 %v0_b5d0 to i8
  %v2_b5d0 = load i32, i32* @r6, align 4
  %v3_b5d0 = add i32 %v2_b5d0, 11
  %v4_b5d0 = inttoptr i32 %v3_b5d0 to i8*
  store i8 %v1_b5d0, i8* %v4_b5d0, align 1
  %v0_b5d4 = load i32, i32* @r6, align 4
  store i32 %v0_b5d4, i32* @r0, align 4
  %v2_b5d8 = call i32 @function_f008(i32 %v0_b5d4, i32 20)
  %v3_b5d8 = trunc i32 %v2_b5d8 to i8
  store i32 %v2_b5d8, i32* %r0.global-to-local, align 4
  %v4_b5dc = sdiv i32 %v2_b5d8, 256
  store i32 %v4_b5dc, i32* %r3.global-to-local, align 4
  %v3_b5e0 = load i32, i32* @r6, align 4
  %v4_b5e0 = add i32 %v3_b5e0, 10
  %v5_b5e0 = inttoptr i32 %v4_b5e0 to i8*
  store i8 %v3_b5d8, i8* %v5_b5e0, align 1
  %v0_b5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5e4 = trunc i32 %v0_b5e4 to i8
  %v2_b5e4 = load i32, i32* @r6, align 4
  %v3_b5e4 = add i32 %v2_b5e4, 11
  %v4_b5e4 = inttoptr i32 %v3_b5e4 to i8*
  store i8 %v1_b5e4, i8* %v4_b5e4, align 1
  %v0_b5e8 = load i32, i32* @r7, align 4
  %v1_b5e8 = add i32 %v0_b5e8, 4
  %v2_b5e8 = inttoptr i32 %v1_b5e8 to i8*
  %v3_b5e8 = load i8, i8* %v2_b5e8, align 1
  %v4_b5e8 = zext i8 %v3_b5e8 to i32
  store i32 %v4_b5e8, i32* %r3.global-to-local, align 4
  %v1_b5ec = add i32 %v0_b5e8, 5
  %v2_b5ec = inttoptr i32 %v1_b5ec to i8*
  %v3_b5ec = load i8, i8* %v2_b5ec, align 1
  %v4_b5ec = zext i8 %v3_b5ec to i32
  store i32 %v0_b5e8, i32* @r1, align 4
  %v4_b5f4 = mul nuw nsw i32 %v4_b5ec, 256
  %v5_b5f4 = or i32 %v4_b5f4, %v4_b5e8
  store i32 %v5_b5f4, i32* %r2.global-to-local, align 4
  %v0_b5f8 = load i32, i32* @r8, align 4
  %v1_b5f8 = trunc i32 %v0_b5f8 to i8
  %v3_b5f8 = add i32 %v0_b5e8, 6
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 %v1_b5f8, i8* %v4_b5f8, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b600 = load i32, i32* @r8, align 4
  %v1_b600 = trunc i32 %v0_b600 to i8
  %v2_b600 = load i32, i32* @r7, align 4
  %v3_b600 = add i32 %v2_b600, 7
  %v4_b600 = inttoptr i32 %v3_b600 to i8*
  store i8 %v1_b600, i8* %v4_b600, align 1
  %v0_b604 = load i32, i32* @r6, align 4
  store i32 %v0_b604, i32* %r0.global-to-local, align 4
  %v4_b608 = call i32 @function_f064(i32 %v0_b604, i32 %v0_b5e8, i32 %v5_b5f4, i32 %stack_var_-152.0.ph)
  %v5_b608 = trunc i32 %v4_b608 to i8
  store i32 %v4_b608, i32* %r0.global-to-local, align 4
  %v3_b60c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b60c, i32* %r3.global-to-local, align 4
  %v3_b610 = mul i32 %v3_b60c, 32
  store i32 %v3_b610, i32* %r2.global-to-local, align 4
  %v0_b614 = load i32, i32* @r5, align 4
  %v1_b614 = add i32 %v0_b614, 16
  %v2_b614 = inttoptr i32 %v1_b614 to i32*
  %v3_b614 = load i32, i32* %v2_b614, align 4
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = mul i32 %v3_b60c, 24
  store i32 %v5_b618, i32* %r2.global-to-local, align 4
  %v4_b61c42 = udiv i32 %v4_b608, 256
  %v1_b620 = trunc i32 %v4_b61c42 to i8
  %v2_b620 = load i32, i32* @r7, align 4
  %v3_b620 = add i32 %v2_b620, 7
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  %v0_b624 = load i32, i32* %r2.global-to-local, align 4
  %v1_b624 = load i32, i32* @sb, align 4
  %v2_b624 = add i32 %v1_b624, %v0_b624
  store i32 %v2_b624, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b62c = load i32, i32* @r7, align 4
  %v4_b62c = add i32 %v3_b62c, 6
  %v5_b62c = inttoptr i32 %v4_b62c to i8*
  store i8 %v5_b608, i8* %v5_b62c, align 1
  %v0_b630 = load i32, i32* %r1.global-to-local, align 4
  %v1_b630 = load i32, i32* %lr.global-to-local, align 4
  %v2_b630 = add i32 %v1_b630, 4
  %v3_b630 = inttoptr i32 %v2_b630 to i32*
  store i32 %v0_b630, i32* %v3_b630, align 4
  %v0_b634 = load i32, i32* %r3.global-to-local, align 4
  %v1_b634 = trunc i32 %v0_b634 to i8
  %v2_b634 = load i32, i32* %r2.global-to-local, align 4
  %v3_b634 = load i32, i32* @sb, align 4
  %v4_b634 = add i32 %v3_b634, %v2_b634
  %v5_b634 = inttoptr i32 %v4_b634 to i8*
  store i8 %v1_b634, i8* %v5_b634, align 1
  %v0_b638 = load i32, i32* @r8, align 4
  %v1_b638 = trunc i32 %v0_b638 to i8
  %v2_b638 = load i32, i32* %lr.global-to-local, align 4
  %v3_b638 = add i32 %v2_b638, 2
  %v4_b638 = inttoptr i32 %v3_b638 to i8*
  store i8 %v1_b638, i8* %v4_b638, align 1
  %v0_b63c = load i32, i32* @r8, align 4
  %v1_b63c = trunc i32 %v0_b63c to i8
  %v2_b63c = load i32, i32* %lr.global-to-local, align 4
  %v3_b63c = add i32 %v2_b63c, 1
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v1_b63c, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* @r8, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %lr.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 3
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b64c = load i32, i32* @r5, align 4
  store i32 %v0_b64c, i32* %r1.global-to-local, align 4
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b658 = load i32, i32* %lr.global-to-local, align 4
  %v6_b660 = inttoptr i32 %v0_b64c to i32*
  %v7_b660 = call i32 @function_14b1c(i32 %v3_b200, i32* %v6_b660, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b658, i32 16)
  %v3_b664 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b664, i32* %r3.global-to-local, align 4
  %v1_b668 = add i32 %v3_b664, 1
  store i32 %v1_b668, i32* %r0.global-to-local, align 4
  %v1_b66c = load i32, i32* @fp, align 4
  %v9_b66c = icmp eq i32 %v1_b668, %v1_b66c
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b668, i32* %stack_var_-40, align 4
  %v6_b674 = icmp slt i32 %v1_b668, %v1_b66c
  br i1 %v6_b674, label %dec_label_pc_b52c, label %dec_label_pc_b514

dec_label_pc_b67c:                                ; preds = %dec_label_pc_b210
  store i32 %v3_b200, i32* %r0.global-to-local, align 4
  %v1_b680 = call i32 @function_14284(i32 %v3_b200)
  store i32 %v1_b680, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b684

dec_label_pc_b684:                                ; preds = %dec_label_pc_b0ac, %dec_label_pc_b67c
  %v29_b688 = phi i32 [ %v3_b200, %dec_label_pc_b0ac ], [ %v1_b680, %dec_label_pc_b67c ]
  store i32 %v3_b0ac, i32* %r4.global-to-local, align 4
  store i32 %v15_b0ac, i32* %r8.global-to-local, align 4
  ret i32 %v29_b688

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b52c
  %v1_b68c = add i32 %v2_b534, 16
  %v2_b68c = inttoptr i32 %v1_b68c to i32*
  %v3_b68c = load i32, i32* %v2_b68c, align 4
  store i32 %v3_b68c, i32* %r4.global-to-local, align 4
  %v0_b690 = call i32 @function_10a94()
  store i32 %v0_b690, i32* %r0.global-to-local, align 4
  %v3_b694 = load i32, i32* %stack_var_-40, align 4
  %v5_b69c = mul i32 %v3_b694, 24
  %v0_b6a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = load i32, i32* @sb, align 4
  %v2_b6a4 = add i32 %v1_b6a4, %v5_b69c
  store i32 %v2_b6a4, i32* %r1.global-to-local, align 4
  %v1_b6a8 = and i32 %v0_b6a0, 65280
  store i32 %v1_b6a8, i32* %r3.global-to-local, align 4
  %v1_b6a0 = udiv i32 %v0_b6a0, 256
  %v3_b6ac = and i32 %v1_b6a0, 65280
  store i32 %v3_b6ac, i32* %r2.global-to-local, align 4
  %v1_b6b4 = add i32 %v2_b6a4, 20
  %v2_b6b4 = inttoptr i32 %v1_b6b4 to i8*
  %v3_b6b4 = load i8, i8* %v2_b6b4, align 1
  %v4_b6b4 = zext i8 %v3_b6b4 to i32
  store i32 %v4_b6b4, i32* %lr.global-to-local, align 4
  %v2_b6c0 = call i32 @llvm.bswap.i32(i32 %v0_b6a0)
  %v7_b6c4 = lshr i32 %v0_b690, %v4_b6b4
  %v8_b6c4 = add i32 %v7_b6c4, %v2_b6c0
  %v3_b6d0 = mul i32 %v8_b6c4, 16777216
  %v1_b6d4 = and i32 %v8_b6c4, 65280
  store i32 %v1_b6d4, i32* %r0.global-to-local, align 4
  store i32 %v5_b1ec, i32* %r2.global-to-local, align 4
  %v4_b6e0 = mul nuw nsw i32 %v1_b6d4, 256
  %v5_b6e0 = or i32 %v4_b6e0, %v3_b6d0
  store i32 %v5_b6e0, i32* %r1.global-to-local, align 4
  %v2_b6e4 = call i32 @llvm.bswap.i32(i32 %v8_b6c4)
  store i32 %v2_b6e4, i32* %r3.global-to-local, align 4
  store i1 %v7_b558, i1* %cpsr_z.global-to-local, align 1
  %v1_b6ec = load i32, i32* @r5, align 4
  %v2_b6ec = add i32 %v1_b6ec, 16
  %v3_b6ec = inttoptr i32 %v2_b6ec to i32*
  store i32 %v2_b6e4, i32* %v3_b6ec, align 4
  br i1 %v2_b558, label %dec_label_pc_b6f4, label %dec_label_pc_b560

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b68c, %dec_label_pc_b554
  %v0_b6f4 = call i32 @function_10a94()
  store i32 %v0_b6f4, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  %v0_b700 = load i32, i32* @sl, align 4
  %v9_b700 = icmp eq i32 %v0_b700, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  store i1 %v9_b700, i1* %cpsr_z.global-to-local, align 1
  %v1_b704 = load i32, i32* @r5, align 4
  %v2_b704 = add i32 %v1_b704, 12
  %v3_b704 = inttoptr i32 %v2_b704 to i32*
  store i32 %v0_b6f4, i32* %v3_b704, align 4
  br i1 %v9_b700, label %dec_label_pc_b70c, label %dec_label_pc_b6f4.dec_label_pc_b570_crit_edge

dec_label_pc_b6f4.dec_label_pc_b570_crit_edge:    ; preds = %dec_label_pc_b6f4
  %v1_b574.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b570

dec_label_pc_b70c:                                ; preds = %dec_label_pc_b6f4, %dec_label_pc_b560
  %v0_b70c = call i32 @function_10a94()
  %v3_b714 = urem i32 %v0_b70c, 65536
  store i32 %v3_b714, i32* %r0.global-to-local, align 4
  %v3_b71815 = udiv i32 %v0_b70c, 256
  %v1_b71c = trunc i32 %v3_b71815 to i8
  %v2_b71c = load i32, i32* @r5, align 4
  %v3_b71c = add i32 %v2_b71c, 5
  %v4_b71c = inttoptr i32 %v3_b71c to i8*
  store i8 %v1_b71c, i8* %v4_b71c, align 1
  %v0_b720 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b254, i32* %r3.global-to-local, align 4
  %v1_b728 = sub i32 999, %v0_b720
  store i32 %v1_b728, i32* %r2.global-to-local, align 4
  %v3_b72c = sdiv i32 %v1_b728, 256
  store i32 %v3_b72c, i32* %r1.global-to-local, align 4
  %v1_b730 = load i32, i32* @r4, align 4
  %v9_b730 = icmp eq i32 %v3_b254, %v1_b730
  store i1 %v9_b730, i1* %cpsr_z.global-to-local, align 1
  %v1_b734 = trunc i32 %v0_b720 to i8
  %v2_b734 = load i32, i32* @r5, align 4
  %v3_b734 = add i32 %v2_b734, 4
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r1.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* @r6, align 4
  %v3_b738 = add i32 %v2_b738, 5
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = load i32, i32* %r2.global-to-local, align 4
  %v1_b73c = trunc i32 %v0_b73c to i8
  %v2_b73c = load i32, i32* @r6, align 4
  %v3_b73c = add i32 %v2_b73c, 4
  %v4_b73c = inttoptr i32 %v3_b73c to i8*
  store i8 %v1_b73c, i8* %v4_b73c, align 1
  %v0_b740 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b740, label %dec_label_pc_b744, label %dec_label_pc_b70c.dec_label_pc_b57c_crit_edge

dec_label_pc_b70c.dec_label_pc_b57c_crit_edge:    ; preds = %dec_label_pc_b70c
  %v1_b580.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b57c

dec_label_pc_b744:                                ; preds = %dec_label_pc_b70c, %dec_label_pc_b570
  %v0_b744 = call i32 @function_10a94()
  %v1_b744 = trunc i32 %v0_b744 to i8
  store i32 %v0_b744, i32* %r0.global-to-local, align 4
  store i32 %v3_b258, i32* %r1.global-to-local, align 4
  %v4_b74c = sdiv i32 %v0_b744, 256
  store i32 %v4_b74c, i32* %r3.global-to-local, align 4
  %v1_b750 = load i32, i32* @r4, align 4
  %v9_b750 = icmp eq i32 %v3_b258, %v1_b750
  store i1 %v9_b750, i1* %cpsr_z.global-to-local, align 1
  %v3_b754 = load i32, i32* @r5, align 4
  %v4_b754 = add i32 %v3_b754, 44
  %v5_b754 = inttoptr i32 %v4_b754 to i8*
  store i8 %v1_b744, i8* %v5_b754, align 1
  %v0_b758 = load i32, i32* %r3.global-to-local, align 4
  %v1_b758 = trunc i32 %v0_b758 to i8
  %v2_b758 = load i32, i32* @r7, align 4
  %v3_b758 = add i32 %v2_b758, 1
  %v4_b758 = inttoptr i32 %v3_b758 to i8*
  store i8 %v1_b758, i8* %v4_b758, align 1
  %v0_b75c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b75c, label %dec_label_pc_b760, label %dec_label_pc_b588

dec_label_pc_b760:                                ; preds = %dec_label_pc_b744, %dec_label_pc_b57c
  %v0_b760 = call i32 @function_10a94()
  %v1_b760 = trunc i32 %v0_b760 to i8
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v1_b24c, i32* %r2.global-to-local, align 4
  %v4_b768 = sdiv i32 %v0_b760, 256
  store i32 %v4_b768, i32* %r3.global-to-local, align 4
  store i1 %v2_b58c, i1* %cpsr_z.global-to-local, align 1
  %v1_b770 = trunc i32 %v4_b768 to i8
  %v2_b770 = load i32, i32* @r7, align 4
  %v3_b770 = add i32 %v2_b770, 3
  %v4_b770 = inttoptr i32 %v3_b770 to i8*
  store i8 %v1_b770, i8* %v4_b770, align 1
  %v0_b774 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b774, label %bb99, label %bb98

bb98:                                             ; preds = %dec_label_pc_b760
  %v1_b774 = load i32, i32* @r5, align 4
  %v2_b774 = add i32 %v1_b774, 16
  %v3_b774 = inttoptr i32 %v2_b774 to i32*
  %v4_b774 = load i32, i32* %v3_b774, align 4
  store i32 %v4_b774, i32* %r3.global-to-local, align 4
  br label %bb99

bb99:                                             ; preds = %dec_label_pc_b760, %bb98
  %v3_b778 = load i32, i32* @r7, align 4
  %v4_b778 = add i32 %v3_b778, 2
  %v5_b778 = inttoptr i32 %v4_b778 to i8*
  store i8 %v1_b760, i8* %v5_b778, align 1
  %v0_b77c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b77c, label %dec_label_pc_b784, label %bb100

bb100:                                            ; preds = %bb99
  %v1_b77c = load i32, i32* %r3.global-to-local, align 4
  %v2_b77c = load i32, i32* @r6, align 4
  %v3_b77c = add i32 %v2_b77c, 16
  %v4_b77c = inttoptr i32 %v3_b77c to i32*
  store i32 %v1_b77c, i32* %v4_b77c, align 4
  br label %dec_label_pc_b59c

dec_label_pc_b784:                                ; preds = %dec_label_pc_b588, %bb99
  %v0_b784 = call i32 @function_10a94()
  store i32 %v0_b784, i32* %r0.global-to-local, align 4
  store i32 %v1_b1b8, i32* %r3.global-to-local, align 4
  store i1 %v2_b78c, i1* %cpsr_z.global-to-local, align 1
  %v1_b790 = load i32, i32* @r6, align 4
  %v2_b790 = add i32 %v1_b790, 16
  %v3_b790 = inttoptr i32 %v2_b790 to i32*
  store i32 %v0_b784, i32* %v3_b790, align 4
  br i1 %v2_b78c, label %dec_label_pc_b5a8, label %dec_label_pc_b798

dec_label_pc_b798:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b784
  %v0_b798 = load i32, i32* @r7, align 4
  %v1_b798 = add i32 %v0_b798, 8
  store i32 %v1_b798, i32* %r0.global-to-local, align 4
  store i32 %v5_b198, i32* @r1, align 4
  %v1_b7a0 = inttoptr i32 %v1_b798 to i8*
  %v2_b7a0 = call i32 @function_10c70(i8* %v1_b7a0)
  store i32 %v2_b7a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a8

dec_label_pc_b7a8:                                ; preds = %dec_label_pc_b238
  %v1_b7b0 = add i32 %v5_b198, 8
  store i32 %v1_b7b0, i32* %r2.global-to-local, align 4
  %v1_b7b4 = add i32 %v5_b198, 52
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b514.preheader

; uselistorder directives
  uselistorder i32 %v1_b7b4, { 1, 0 }
  uselistorder i32 %v1_b7b0, { 1, 0 }
  uselistorder i32 %v4_b768, { 1, 0 }
  uselistorder i32 %v0_b760, { 0, 2, 1 }
  uselistorder i32 %v0_b744, { 0, 2, 1 }
  uselistorder i32 %v2_b6e4, { 1, 0 }
  uselistorder i32 %v8_b6c4, { 1, 2, 0 }
  uselistorder i32 %v0_b6a0, { 1, 0, 2 }
  uselistorder i32 %v1_b66c, { 1, 2, 0 }
  uselistorder i32 %v1_b668, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b60c, { 1, 0, 2 }
  uselistorder i32 %v4_b608, { 0, 2, 1 }
  uselistorder i32 %v0_b5e8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b5d8, { 0, 2, 1 }
  uselistorder i32 %v4_b5bc, { 1, 0 }
  uselistorder i32 %v7_b540, { 1, 0, 2 }
  uselistorder i32 %v0_b514, { 1, 0 }
  uselistorder i1 %v7_b558, { 2, 1, 0 }
  uselistorder i1 %v2_b78c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b4d4, { 1, 0, 2 }
  uselistorder i32 %v0_b498, { 1, 0, 2 }
  uselistorder i32 %v3_b34c, { 0, 2, 1 }
  uselistorder i32 %v3_b30c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b2c4, { 1, 0 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v1_b29c, { 0, 2, 1 }
  uselistorder i32 %v3_b280, { 2, 1, 0 }
  uselistorder i32 %v0_b25c, { 1, 0, 2 }
  uselistorder i32 %v1_b24c, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b248, { 0, 2, 1 }
  uselistorder i32 %v0_b244, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b230, { 1, 0 }
  uselistorder i1 %v7_b204, { 1, 0 }
  uselistorder i32 %v3_b200, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b1ec, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b1b8, { 1, 0, 2 }
  uselistorder i32 %v5_b198, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b13c, { 1, 0 }
  uselistorder i32 %v2_b0cc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b0b0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 21, 25, 26, 27, 28, 29 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b798, { 1, 0 }
  uselistorder label %dec_label_pc_b784, { 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %dec_label_pc_b684, { 1, 0 }
  uselistorder label %dec_label_pc_b5a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b514.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b7c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b7c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b7cc = urem i32 %arg1, 256
  store i32 %v1_b7cc, i32* @fp, align 4
  store i32 %v1_b7cc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b7e4 = urem i32 %arg3, 256
  store i32 %v1_b7e4, i32* @r4, align 4
  %v2_b7e8 = call i32 @function_14e84(i32 %v1_b7cc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b7f4 = load i32, i32* @fp, align 4
  store i32 %v0_b7f4, i32* %r0.global-to-local, align 4
  %v2_b7f8 = call i32 @function_14e84(i32 %v0_b7f4, i32 4)
  %v0_b7fc = load i32, i32* @r5, align 4
  store i32 %v0_b7fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b80c = load i32, i32* @r4, align 4
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v5_b810 = inttoptr i32 %v0_b7fc to i32*
  %v6_b810 = call i32 @function_a4e8(i32 %v0_b80c, i32* %v5_b810, i32 2, i32 0)
  %v1_b81c = urem i32 %v6_b810, 256
  store i32 %v1_b81c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b828 = load i32, i32* @r5, align 4
  store i32 %v0_b828, i32* %r1.global-to-local, align 4
  %v0_b82c = load i32, i32* @r4, align 4
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v6_b834 = inttoptr i32 %v0_b828 to i32*
  %v7_b834 = call i32 @function_a4e8(i32 %v0_b82c, i32* %v6_b834, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b838 = load i32, i32* @r5, align 4
  store i32 %v0_b838, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b834, i32* @r6, align 4
  %v0_b848 = load i32, i32* @r4, align 4
  store i32 %v0_b848, i32* %r0.global-to-local, align 4
  %v4_b84c = inttoptr i32 %v0_b838 to i32*
  %v5_b84c = call i32 @function_a4e8(i32 %v0_b848, i32* %v4_b84c, i32 4, i32 64)
  %v1_b854 = urem i32 %v5_b84c, 256
  store i32 %v1_b854, i32* %ip.global-to-local, align 4
  %v0_b858 = load i32, i32* @r5, align 4
  store i32 %v0_b858, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b864 = load i32, i32* @r4, align 4
  store i32 %v0_b864, i32* %r0.global-to-local, align 4
  %v6_b86c = inttoptr i32 %v0_b858 to i32*
  %v7_b86c = call i32 @function_a4e8(i32 %v0_b864, i32* %v6_b86c, i32 5, i32 1)
  %v1_b878 = urem i32 %v7_b86c, 256
  store i32 %v1_b878, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r5, align 4
  store i32 %v0_b880, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* @r4, align 4
  store i32 %v0_b888, i32* %r0.global-to-local, align 4
  %v5_b890 = inttoptr i32 %v0_b880 to i32*
  %v6_b890 = call i32 @function_a4e8(i32 %v0_b888, i32* %v5_b890, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  %v3_b898 = mul i32 %v6_b890, 65536
  store i32 %v3_b898, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a4 = load i32, i32* @r4, align 4
  store i32 %v0_b8a4, i32* %r0.global-to-local, align 4
  %v4_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v5_b8a8 = call i32 @function_a4e8(i32 %v0_b8a4, i32* %v4_b8a8, i32 11, i32 0)
  %v1_b8b0 = urem i32 %v5_b8a8, 256
  store i32 %v1_b8b0, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r5, align 4
  store i32 %v0_b8b4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8c0 = load i32, i32* @r4, align 4
  store i32 %v0_b8c0, i32* %r0.global-to-local, align 4
  %v5_b8c8 = inttoptr i32 %v0_b8b4 to i32*
  %v6_b8c8 = call i32 @function_a4e8(i32 %v0_b8c0, i32* %v5_b8c8, i32 12, i32 1)
  %v1_b8d0 = urem i32 %v6_b8c8, 256
  store i32 %v1_b8d0, i32* %ip.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r5, align 4
  store i32 %v0_b8d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8e0 = load i32, i32* @r4, align 4
  store i32 %v0_b8e0, i32* %r0.global-to-local, align 4
  %v5_b8e8 = inttoptr i32 %v0_b8d4 to i32*
  %v6_b8e8 = call i32 @function_a4e8(i32 %v0_b8e0, i32* %v5_b8e8, i32 13, i32 1)
  %v1_b8f0 = urem i32 %v6_b8e8, 256
  store i32 %v1_b8f0, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r5, align 4
  store i32 %v0_b8f4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b900 = load i32, i32* @r4, align 4
  store i32 %v0_b900, i32* %r0.global-to-local, align 4
  %v5_b908 = inttoptr i32 %v0_b8f4 to i32*
  %v6_b908 = call i32 @function_a4e8(i32 %v0_b900, i32* %v5_b908, i32 14, i32 0)
  %v1_b910 = urem i32 %v6_b908, 256
  store i32 %v1_b910, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r5, align 4
  store i32 %v0_b914, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b920 = load i32, i32* @r4, align 4
  store i32 %v0_b920, i32* %r0.global-to-local, align 4
  %v5_b928 = inttoptr i32 %v0_b914 to i32*
  %v6_b928 = call i32 @function_a4e8(i32 %v0_b920, i32* %v5_b928, i32 15, i32 0)
  %v1_b930 = urem i32 %v6_b928, 256
  store i32 %v1_b930, i32* %ip.global-to-local, align 4
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b940 = load i32, i32* @r4, align 4
  store i32 %v0_b940, i32* %r0.global-to-local, align 4
  %v5_b948 = inttoptr i32 %v0_b934 to i32*
  %v6_b948 = call i32 @function_a4e8(i32 %v0_b940, i32* %v5_b948, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b948, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b958 = load i32, i32* @r5, align 4
  store i32 %v0_b958, i32* %r1.global-to-local, align 4
  %v0_b95c = load i32, i32* @r4, align 4
  store i32 %v0_b95c, i32* %r0.global-to-local, align 4
  %v1_b960 = urem i32 %v6_b948, 256
  store i32 %v1_b960, i32* @r8, align 4
  %v4_b964 = inttoptr i32 %v0_b958 to i32*
  %v5_b964 = call i32 @function_a4e8(i32 %v0_b95c, i32* %v4_b964, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  store i32 %v5_b964, i32* @sb, align 4
  %v0_b978 = load i32, i32* @r4, align 4
  store i32 %v0_b978, i32* %r0.global-to-local, align 4
  %v4_b97c = inttoptr i32 %v0_b970 to i32*
  %v5_b97c = call i32 @function_a4e8(i32 %v0_b978, i32* %v4_b97c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b988 = urem i32 %v5_b97c, 256
  store i32 %v1_b988, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b998 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v0_b99c = load i32, i32* @r7, align 4
  %v3_b99c = udiv i32 %v0_b99c, 65536
  store i32 %v3_b99c, i32* %r1.global-to-local, align 4
  %v7_b9a0 = icmp eq i32 %v3_b998, -1
  store i1 %v7_b9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9a0, label %dec_label_pc_bbfc, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b7c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b9b8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b9b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b9cc = call i32 @function_14b50(i32 %v3_b998, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b9cc, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v6_b9cc, -1
  store i1 %v7_b9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9d0, label %dec_label_pc_bbf4, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9d8 = load i32, i32* @fp, align 4
  %v2_b9d8 = icmp eq i32 %v0_b9d8, 0
  store i1 %v2_b9d8, i1* %cpsr_z.global-to-local, align 1
  %v0_b9dc = load i32, i32* @r6, align 4
  %v3_b9dc = mul i32 %v0_b9dc, 65536
  store i32 %v3_b9dc, i32* %r0.global-to-local, align 4
  %v3_b9e0 = urem i32 %v0_b9dc, 65536
  store i32 %v3_b9e0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b9d8, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_ba04.preheader

.thread18:                                        ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be88

dec_label_pc_ba04.preheader:                      ; preds = %dec_label_pc_b9d8
  %v5_b9e8 = load i32, i32* @r7, align 4
  %v8_b9e8 = udiv i32 %v5_b9e8, 16777216
  %tmp73 = udiv i32 %v0_b9dc, 256
  %v8_b9ec = urem i32 %tmp73, 256
  store i32 %v8_b9ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v9_baf0 = icmp eq i32 %v3_b99c, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_bb14 = ptrtoint i32* %stack_var_-60 to i32
  %v3_bb20 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bb50 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bb54 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bb58 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bba4 = zext i8 %tmp31 to i32
  %v4_bba8 = zext i8 %tmp30 to i32
  %v4_bbb4 = mul nuw nsw i32 %v4_bba8, 256
  %v4_bbc4 = zext i8 %tmp to i32
  %v1_bbc8 = and i32 %v4_bbc4, 18
  %v2_bbcc = icmp eq i32 %v1_bbc8, 18
  %v1_bb00 = mul nuw nsw i32 %v3_b99c, 256
  %v4_bb04 = and i32 %v1_bb00, 65280
  %v5_bb04 = or i32 %v8_b9e8, %v4_bb04
  %v3_bb0893 = udiv i32 %v4_bb04, 256
  %v1_bb0c = trunc i32 %v3_bb0893 to i8
  %v1_bcd0 = mul i32 %v0_b9dc, 256
  %v4_bcd8 = and i32 %v1_bcd0, 65280
  %sext = mul i32 %v6_b810, 16777216
  %v4_bce8 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b84c, 16777216
  %v4_bd0c = sdiv i32 %sext5, 16777216
  %v5_bbb4 = or i32 %v4_bba4, %v4_bbb4
  %v1_bbd4 = and i32 %v4_bbc4, 5
  %v2_bbd4 = icmp eq i32 %v1_bbd4, 0
  %v1_bb10 = trunc i32 %v8_b9e8 to i8
  %v5_bcd8 = or i32 %v8_b9ec, %v4_bcd8
  %v1_bcf8 = trunc i32 %v4_bce8 to i8
  %v1_bdd8 = urem i32 %v5_b8a8, 2
  %tmp94 = sub nsw i32 0, %v1_bdd8
  %v4_bde0 = and i32 %tmp94, 32
  %v1_bdf0 = urem i32 %v6_b8c8, 2
  %tmp95 = sub nsw i32 0, %v1_bdf0
  %v4_bdf8 = and i32 %tmp95, 16
  %v1_be08 = urem i32 %v6_b8e8, 2
  %tmp96 = sub nsw i32 0, %v1_be08
  %v4_be10 = and i32 %tmp96, 8
  %v1_be20 = urem i32 %v6_b908, 2
  %tmp97 = sub nsw i32 0, %v1_be20
  %v4_be28 = and i32 %tmp97, 4
  %v1_be38 = urem i32 %v6_b928, 2
  %tmp98 = sub nsw i32 0, %v1_be38
  %v3_be40 = and i32 %tmp98, 2
  br label %dec_label_pc_ba04

dec_label_pc_ba04:                                ; preds = %dec_label_pc_be74, %dec_label_pc_bbdc, %dec_label_pc_ba04.preheader
  store i32 %v8_b9ec, i32* %r3.global-to-local, align 4
  %v0_ba10 = load i32, i32* @sb, align 4
  %v1_ba10 = add i32 %v0_ba10, 40
  store i32 %v1_ba10, i32* @sl, align 4
  br label %dec_label_pc_ba14

dec_label_pc_ba14:                                ; preds = %dec_label_pc_bbe8, %dec_label_pc_ba04
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ba20 = call i32 @function_14b80(i32 2, i32 1, i32 0)
  store i32 %v3_ba20, i32* %r0.global-to-local, align 4
  %v7_ba24 = icmp eq i32 %v3_ba20, -1
  store i1 %v7_ba24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ba20, i32* @r7, align 4
  br i1 %v7_ba24, label %dec_label_pc_be74, label %dec_label_pc_ba30

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_ba38 = call i32 @function_14194(i32 %v3_ba20, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ba40 = or i32 %v2_ba38, 2048
  store i32 %v1_ba40, i32* @r2, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r0.global-to-local, align 4
  %v2_ba48 = call i32 @function_14194(i32 %v0_ba44, i32 4)
  store i32 %v2_ba48, i32* %r0.global-to-local, align 4
  %v3_ba4c = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_ba5c = mul i32 %v3_ba4c, 24
  store i32 %v5_ba5c, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_ba6c = add i32 %v5_ba5c, %arg2
  store i32 %v2_ba6c, i32* %r2.global-to-local, align 4
  %v1_ba70 = add i32 %v2_ba6c, 20
  %v2_ba70 = inttoptr i32 %v1_ba70 to i8*
  %v3_ba70 = load i8, i8* %v2_ba70, align 1
  %v4_ba70 = zext i8 %v3_ba70 to i32
  store i32 %v4_ba70, i32* %r3.global-to-local, align 4
  %v2_ba74 = icmp ugt i8 %v3_ba70, 30
  %v7_ba74 = icmp eq i8 %v3_ba70, 31
  store i1 %v7_ba74, i1* %cpsr_z.global-to-local, align 1
  %v2_ba78 = xor i1 %v7_ba74, true
  %v3_ba78 = and i1 %v2_ba74, %v2_ba78
  %v5_ba78 = add i32 %v2_ba6c, 16
  %v6_ba78 = inttoptr i32 %v5_ba78 to i32*
  %v7_ba78 = load i32, i32* %v6_ba78, align 4
  br i1 %v3_ba78, label %dec_label_pc_bae4, label %dec_label_pc_ba84

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba30
  store i32 %v7_ba78, i32* @r4, align 4
  %v0_ba88 = call i32 @function_10a94()
  store i32 %v0_ba88, i32* %r0.global-to-local, align 4
  %v3_ba8c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_ba98 = mul i32 %v3_ba8c, 24
  %v0_ba9c = load i32, i32* @r4, align 4
  %v2_baa0 = add i32 %v5_ba98, %arg2
  store i32 %v2_baa0, i32* %r1.global-to-local, align 4
  %v1_baa4 = and i32 %v0_ba9c, 65280
  store i32 %v1_baa4, i32* %r3.global-to-local, align 4
  %v1_ba9c = udiv i32 %v0_ba9c, 256
  %v3_baa8 = and i32 %v1_ba9c, 65280
  store i32 %v3_baa8, i32* %r2.global-to-local, align 4
  %v3_baac = mul i32 %v0_ba9c, 16777216
  store i32 %v3_baac, i32* %ip.global-to-local, align 4
  %v1_bab0 = add i32 %v2_baa0, 20
  %v2_bab0 = inttoptr i32 %v1_bab0 to i8*
  %v3_bab0 = load i8, i8* %v2_bab0, align 1
  %v4_bab0 = zext i8 %v3_bab0 to i32
  store i32 %v4_bab0, i32* %lr.global-to-local, align 4
  %v4_bab4 = mul nuw nsw i32 %v1_baa4, 256
  %v5_bab4 = or i32 %v4_bab4, %v3_baac
  store i32 %v5_bab4, i32* %ip.global-to-local, align 4
  %v2_babc = call i32 @llvm.bswap.i32(i32 %v0_ba9c)
  %v7_bac0 = lshr i32 %v0_ba88, %v4_bab0
  %v8_bac0 = add i32 %v7_bac0, %v2_babc
  store i32 %v8_bac0, i32* %r2.global-to-local, align 4
  %v3_bacc = mul i32 %v8_bac0, 16777216
  %v1_bad0 = and i32 %v8_bac0, 65280
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  %v4_bad4 = mul nuw nsw i32 %v1_bad0, 256
  %v5_bad4 = or i32 %v4_bad4, %v3_bacc
  store i32 %v5_bad4, i32* %r1.global-to-local, align 4
  %v2_badc = call i32 @llvm.bswap.i32(i32 %v8_bac0)
  br label %dec_label_pc_bae4

dec_label_pc_bae4:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_ba84
  %storemerge25 = phi i32 [ %v2_badc, %dec_label_pc_ba84 ], [ %v7_ba78, %dec_label_pc_ba30 ]
  store i32 %v3_b99c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_baf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_baf0, label %dec_label_pc_bc04, label %dec_label_pc_baf8

dec_label_pc_baf8:                                ; preds = %dec_label_pc_bae4
  store i32 %v8_b9e8, i32* %ip.global-to-local, align 4
  store i32 %v5_bb04, i32* %r3.global-to-local, align 4
  store i32 %v3_bb0893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bb14

dec_label_pc_bb14:                                ; preds = %dec_label_pc_bc04, %dec_label_pc_baf8
  %stack_var_-57.0 = phi i8 [ %v1_bc0c, %dec_label_pc_bc04 ], [ %v1_bb0c, %dec_label_pc_baf8 ]
  %storemerge = phi i8 [ %v1_bc04, %dec_label_pc_bc04 ], [ %v1_bb10, %dec_label_pc_baf8 ]
  store i32 %v2_bb14, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bb1c = load i32, i32* @r7, align 4
  store i32 %v0_bb1c, i32* %r0.global-to-local, align 4
  %v4_bb20 = call i32 @function_149dc(i32 %v0_bb1c, %sockaddr* nonnull %v3_bb20, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bb28 = call i32 @function_14554(i32* null)
  store i32 %v2_bb28, i32* %r0.global-to-local, align 4
  store i32 %v2_bb28, i32* @r4, align 4
  %v9_bb88 = icmp eq i32 %tmp32, %storemerge25
  %v4_bbac = zext i8 %storemerge to i32
  %v4_bbb0 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bb88 to i32
  %v9_bb9c = icmp eq i1 %v9_bb88, false
  %v4_bbb8 = mul nuw nsw i32 %v4_bbb0, 256
  %v5_bbb8 = or i32 %v4_bbb8, %v4_bbac
  %v9_bbbc = icmp eq i32 %v5_bbb8, %v5_bbb4
  br label %dec_label_pc_bb44

dec_label_pc_bb34:                                ; preds = %.thread23, %dec_label_pc_bba4, %dec_label_pc_bbd4, %bb75
  %v2_bb34 = call i32 @function_14554(i32* null)
  %v0_bb38 = load i32, i32* @r4, align 4
  %v2_bb38 = sub i32 %v2_bb34, %v0_bb38
  store i32 %v2_bb38, i32* %r0.global-to-local, align 4
  %v7_bb3c = icmp eq i32 %v2_bb38, 10
  store i1 %v7_bb3c, i1* %cpsr_z.global-to-local, align 1
  %v8_bb40 = icmp sgt i32 %v2_bb38, 10
  br i1 %v8_bb40, label %dec_label_pc_bbe8, label %dec_label_pc_bb44

dec_label_pc_bb44:                                ; preds = %dec_label_pc_bb34, %dec_label_pc_bb14
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bb50, i32* %lr.global-to-local, align 4
  store i32 %v2_bb54, i32* %ip.global-to-local, align 4
  store i32 %v2_bb58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v7_bb6c = call i32 @function_14abc(i32 %v3_b998, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bb50, i32 %v2_bb54)
  store i32 %v7_bb6c, i32* %r2.global-to-local, align 4
  %v7_bb74 = icmp eq i32 %v7_bb6c, -1
  store i1 %v7_bb74, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bb74, label %dec_label_pc_bbfc, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_bb44
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bb94 = icmp eq i32 %v7_bb6c, 40
  store i1 %v7_bb94, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bb6c, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bb80
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bb34

bb75:                                             ; preds = %dec_label_pc_bb80
  store i1 %v9_bb9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb9c, label %dec_label_pc_bb34, label %dec_label_pc_bba4

dec_label_pc_bba4:                                ; preds = %bb75
  store i32 %v4_bba8, i32* %r1.global-to-local, align 4
  store i32 %v4_bbac, i32* %ip.global-to-local, align 4
  store i32 %v4_bbb0, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* %r3.global-to-local, align 4
  store i32 %v5_bbb8, i32* @r5, align 4
  store i1 %v9_bbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbbc, label %dec_label_pc_bbc4, label %dec_label_pc_bb34

dec_label_pc_bbc4:                                ; preds = %dec_label_pc_bba4
  store i32 %v4_bbc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bbc8, i32* %r3.global-to-local, align 4
  store i1 %v2_bbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bbcc, label %dec_label_pc_bc18, label %dec_label_pc_bbd4

dec_label_pc_bbd4:                                ; preds = %dec_label_pc_bbc4
  store i1 %v2_bbd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bbd4, label %dec_label_pc_bb34, label %dec_label_pc_bbdc

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd4
  %v0_bbdc = load i32, i32* @r7, align 4
  store i32 %v0_bbdc, i32* %r0.global-to-local, align 4
  %v1_bbe0 = call i32 @function_14284(i32 %v0_bbdc)
  store i32 %v1_bbe0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba04

dec_label_pc_bbe8:                                ; preds = %dec_label_pc_bb34
  %v0_bbe8 = load i32, i32* @r7, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v1_bbec = call i32 @function_14284(i32 %v0_bbe8)
  store i32 %v1_bbec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba14

dec_label_pc_bbf4:                                ; preds = %dec_label_pc_b9b0
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v1_bbf8 = call i32 @function_14284(i32 %v3_b998)
  store i32 %v1_bbf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbfc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bb44, %dec_label_pc_b7c8, %dec_label_pc_bbf4
  %v29_bc00 = phi i32 [ %v3_b998, %dec_label_pc_b7c8 ], [ %v1_bbf8, %dec_label_pc_bbf4 ], [ 0, %dec_label_pc_bb44 ]
  ret i32 %v29_bc00

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bae4
  %v0_bc04 = call i32 @function_10a94()
  %v1_bc04 = trunc i32 %v0_bc04 to i8
  store i32 %v0_bc04, i32* %r0.global-to-local, align 4
  %v4_bc08 = sdiv i32 %v0_bc04, 256
  store i32 %v4_bc08, i32* %r3.global-to-local, align 4
  %v1_bc0c = trunc i32 %v4_bc08 to i8
  br label %dec_label_pc_bb14

dec_label_pc_bc18:                                ; preds = %dec_label_pc_bbc4
  %v3_bc18 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc18, i32* @r4, align 4
  store i32 %v2_b7e8, i32* %r2.global-to-local, align 4
  %v3_bc20 = mul i32 %v3_bc18, 16
  store i32 %v3_bc20, i32* %ip.global-to-local, align 4
  %v3_bc24 = add i32 %v3_bc20, %v2_b7e8
  %v4_bc24 = inttoptr i32 %v3_bc24 to i32*
  store i32 %storemerge25, i32* %v4_bc24, align 4
  %v0_bc28 = load i32, i32* @r6, align 4
  %v1_bc28 = add i32 %v0_bc28, 4
  %v2_bc28 = inttoptr i32 %v1_bc28 to i32*
  %v3_bc28 = load i32, i32* %v2_bc28, align 4
  store i32 %v3_bc28, i32* %r0.global-to-local, align 4
  %v1_bc30 = and i32 %v3_bc28, 65280
  store i32 %v1_bc30, i32* %r1.global-to-local, align 4
  store i32 %v2_b7e8, i32* %lr.global-to-local, align 4
  %v3_bc38 = mul i32 %v3_bc28, 16777216
  %v4_bc40 = mul nuw nsw i32 %v1_bc30, 256
  %v5_bc40 = or i32 %v4_bc40, %v3_bc38
  store i32 %v5_bc40, i32* %r2.global-to-local, align 4
  %v1_bc48 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc48 = add i32 %v1_bc48, %v2_b7e8
  store i32 %v2_bc48, i32* %ip.global-to-local, align 4
  %v2_bc4c = call i32 @llvm.bswap.i32(i32 %v3_bc28)
  store i32 %v2_bc4c, i32* %r3.global-to-local, align 4
  %v2_bc50 = add i32 %v2_bc48, 4
  %v3_bc50 = inttoptr i32 %v2_bc50 to i32*
  store i32 %v2_bc4c, i32* %v3_bc50, align 4
  %v0_bc54 = load i32, i32* @r6, align 4
  %v1_bc54 = add i32 %v0_bc54, 8
  %v2_bc54 = inttoptr i32 %v1_bc54 to i32*
  %v3_bc54 = load i32, i32* %v2_bc54, align 4
  store i32 %v3_bc54, i32* %r0.global-to-local, align 4
  %v1_bc5c = and i32 %v3_bc54, 65280
  store i32 %v1_bc5c, i32* %r1.global-to-local, align 4
  %v3_bc60 = mul i32 %v3_bc54, 16777216
  %v4_bc68 = mul nuw nsw i32 %v1_bc5c, 256
  %v5_bc68 = or i32 %v4_bc68, %v3_bc60
  store i32 %v5_bc68, i32* %r2.global-to-local, align 4
  %v2_bc70 = call i32 @llvm.bswap.i32(i32 %v3_bc54)
  store i32 %v2_bc70, i32* %r3.global-to-local, align 4
  %v1_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = add i32 %v1_bc74, 8
  %v3_bc74 = inttoptr i32 %v2_bc74 to i32*
  store i32 %v2_bc70, i32* %v3_bc74, align 4
  %v0_bc78 = load i32, i32* @r6, align 4
  %v1_bc78 = inttoptr i32 %v0_bc78 to i32*
  %v2_bc78 = load i32, i32* %v1_bc78, align 4
  %v3_bc7c = udiv i32 %v2_bc78, 65536
  store i32 %v3_bc7c, i32* %r2.global-to-local, align 4
  %v3_bc803 = udiv i32 %v2_bc78, 16777216
  store i32 %v3_bc803, i32* %r1.global-to-local, align 4
  %v0_bc84 = load i32, i32* @r5, align 4
  %v3_bc84 = sdiv i32 %v0_bc84, 256
  store i32 %v3_bc84, i32* %r3.global-to-local, align 4
  %v1_bc88 = trunc i32 %v3_bc84 to i8
  %v2_bc88 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc88 = add i32 %v2_bc88, 15
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc8c = trunc i32 %v0_bc8c to i8
  %v2_bc8c = load i32, i32* %ip.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 13
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 %v1_bc8c, i8* %v4_bc8c, align 1
  %v0_bc90 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 12
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* @r5, align 4
  %v1_bc94 = trunc i32 %v0_bc94 to i8
  %v2_bc94 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc94 = add i32 %v2_bc94, 14
  %v4_bc94 = inttoptr i32 %v3_bc94 to i8*
  store i8 %v1_bc94, i8* %v4_bc94, align 1
  %v0_bc98 = load i32, i32* @sl, align 4
  store i32 %v0_bc98, i32* %r0.global-to-local, align 4
  %v1_bc9c = call i32 @function_14d30(i32 %v0_bc98)
  store i32 %v1_bc9c, i32* %r0.global-to-local, align 4
  store i32 %v2_b7f8, i32* %r1.global-to-local, align 4
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  %v2_bca8 = load i32, i32* @r4, align 4
  %v5_bca8 = mul i32 %v2_bca8, 4
  %v6_bca8 = add i32 %v5_bca8, %v2_b7f8
  %v7_bca8 = inttoptr i32 %v6_bca8 to i32*
  store i32 %v1_bc9c, i32* %v7_bca8, align 4
  %v0_bcac = load i32, i32* %r1.global-to-local, align 4
  %v1_bcac = load i32, i32* %r2.global-to-local, align 4
  %v4_bcac = mul i32 %v1_bcac, 4
  %v5_bcac = add i32 %v4_bcac, %v0_bcac
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* @r4, align 4
  %v1_bcb0 = inttoptr i32 %v7_bcac to i8*
  %v2_bcb0 = load i8, i8* %v1_bcb0, align 1
  %tmp100 = urem i8 %v2_bcb0, 16
  %v1_bcb4 = zext i8 %tmp100 to i32
  %v1_bcb8 = or i32 %v1_bcb4, 64
  store i32 %v1_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = trunc i32 %v1_bcb8 to i8
  store i8 %v1_bcbc, i8* %v1_bcb0, align 1
  %v0_bcc0 = load i32, i32* @r4, align 4
  %v1_bcc0 = inttoptr i32 %v0_bcc0 to i8*
  %v2_bcc0 = load i8, i8* %v1_bcc0, align 1
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v1_bccc = and i8 %v2_bcc0, -16
  %v1_bcd4 = or i8 %v1_bccc, 5
  store i32 %v5_bcd8, i32* %r0.global-to-local, align 4
  %v0_bcdc = load i32, i32* @sl, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* %r2.global-to-local, align 4
  store i32 %v1_b878, i32* %lr.global-to-local, align 4
  store i8 %v1_bcd4, i8* %v1_bcc0, align 1
  store i32 %v4_bce8, i32* %r1.global-to-local, align 4
  %v0_bcec = load i32, i32* %r2.global-to-local, align 4
  %v3_bcec = udiv i32 %v0_bcec, 65536
  %v1_bcf0 = urem i32 %v3_bcec, 256
  store i32 %v1_bcf0, i32* %r3.global-to-local, align 4
  %v3_bcf4 = udiv i32 %v0_bcec, 16777216
  store i32 %v3_bcf4, i32* %r2.global-to-local, align 4
  %v2_bcf8 = load i32, i32* @r4, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 1
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* %r2.global-to-local, align 4
  %v1_bcfc = load i32, i32* %r3.global-to-local, align 4
  %v4_bcfc = mul i32 %v1_bcfc, 256
  %v5_bcfc = or i32 %v4_bcfc, %v0_bcfc
  store i32 %v5_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bcfc to i8
  %v2_bd00 = load i32, i32* @r4, align 4
  %v3_bd00 = add i32 %v2_bd00, 2
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  %v0_bd04 = load i32, i32* %lr.global-to-local, align 4
  %v2_bd04 = icmp eq i32 %v0_bd04, 0
  store i1 %v2_bd04, i1* %cpsr_z.global-to-local, align 1
  %v0_bd08 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd08 = sdiv i32 %v0_bd08, 256
  store i32 %v3_bd08, i32* %r3.global-to-local, align 4
  store i32 %v4_bd0c, i32* %r2.global-to-local, align 4
  %v1_bd10 = trunc i32 %v3_bd08 to i8
  %v2_bd10 = load i32, i32* @r4, align 4
  %v3_bd10 = add i32 %v2_bd10, 3
  %v4_bd10 = inttoptr i32 %v3_bd10 to i8*
  store i8 %v1_bd10, i8* %v4_bd10, align 1
  %v0_bd14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd14, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bc18
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bc18, %bb76
  %v0_bd18 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* @r4, align 4
  %v3_bd18 = add i32 %v2_bd18, 8
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd1c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bd1c = load i32, i32* %r3.global-to-local, align 4
  %v2_bd1c = trunc i32 %v1_bd1c to i8
  %v3_bd1c = load i32, i32* @r4, align 4
  %v4_bd1c = add i32 %v3_bd1c, 6
  %v5_bd1c = inttoptr i32 %v4_bd1c to i8*
  store i8 %v2_bd1c, i8* %v5_bd1c, align 1
  %v0_bd20.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd20.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd28 = load i32, i32* @r4, align 4
  %v3_bd28 = add i32 %v2_bd28, 9
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 6, i8* %v4_bd28, align 1
  %v0_bd2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd2c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bd2c = load i32, i32* %r2.global-to-local, align 4
  %v2_bd2c = trunc i32 %v1_bd2c to i8
  %v3_bd2c = load i32, i32* @r4, align 4
  %v4_bd2c = add i32 %v3_bd2c, 7
  %v5_bd2c = inttoptr i32 %v4_bd2c to i8*
  store i8 %v2_bd2c, i8* %v5_bd2c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bd34 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd38 = sdiv i32 %v0_bd38, 256
  store i32 %v3_bd38, i32* %ip.global-to-local, align 4
  %v1_bd3c = load i32, i32* @r4, align 4
  %v2_bd3c = add i32 %v1_bd3c, 12
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  store i32 %v2_bd34, i32* %v3_bd3c, align 4
  %v0_bd40 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd40 = trunc i32 %v0_bd40 to i8
  %v2_bd40 = load i32, i32* @r4, align 4
  %v3_bd40 = add i32 %v2_bd40, 5
  %v4_bd40 = inttoptr i32 %v3_bd40 to i8*
  store i8 %v1_bd40, i8* %v4_bd40, align 1
  %v3_bd44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd44, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %ip.global-to-local, align 4
  %v4_bd4c = mul i32 %v3_bd44, 16
  %v5_bd4c = add i32 %v4_bd4c, %v2_b7e8
  %v6_bd4c = inttoptr i32 %v5_bd4c to i32*
  %v7_bd4c = load i32, i32* %v6_bd4c, align 4
  store i32 %v7_bd4c, i32* %r3.global-to-local, align 4
  %v0_bd50 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd50 = trunc i32 %v0_bd50 to i8
  %v2_bd50 = load i32, i32* @r4, align 4
  %v3_bd50 = add i32 %v2_bd50, 4
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v0_bd54 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd54 = load i32, i32* @r4, align 4
  %v2_bd54 = add i32 %v1_bd54, 16
  %v3_bd54 = inttoptr i32 %v2_bd54 to i32*
  store i32 %v0_bd54, i32* %v3_bd54, align 4
  %v0_bd58 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd58 = mul i32 %v0_bd58, 16
  %v1_bd5c = load i32, i32* %ip.global-to-local, align 4
  %v2_bd5c = add i32 %v1_bd5c, %v3_bd58
  store i32 %v2_bd5c, i32* %r2.global-to-local, align 4
  %v1_bd60 = add i32 %v2_bd5c, 13
  %v2_bd60 = inttoptr i32 %v1_bd60 to i8*
  %v3_bd60 = load i8, i8* %v2_bd60, align 1
  %v4_bd60 = zext i8 %v3_bd60 to i32
  store i32 %v4_bd60, i32* %r1.global-to-local, align 4
  %v1_bd64 = add i32 %v2_bd5c, 12
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  %v4_bd68 = mul nuw nsw i32 %v4_bd60, 256
  %v5_bd68 = or i32 %v4_bd64, %v4_bd68
  store i32 %v5_bd68, i32* %r3.global-to-local, align 4
  %v2_bd6c = load i32, i32* @r4, align 4
  %v3_bd6c = add i32 %v2_bd6c, 20
  %v4_bd6c = inttoptr i32 %v3_bd6c to i8*
  store i8 %v3_bd64, i8* %v4_bd6c, align 1
  %v0_bd70 = load i32, i32* @r4, align 4
  %v1_bd70 = add i32 %v0_bd70, 20
  store i32 %v1_bd70, i32* @r6, align 4
  %v0_bd74 = load i32, i32* %r3.global-to-local, align 4
  %v3_bd74 = sdiv i32 %v0_bd74, 256
  store i32 %v3_bd74, i32* %r3.global-to-local, align 4
  %v1_bd78 = trunc i32 %v3_bd74 to i8
  %v3_bd78 = add i32 %v0_bd70, 21
  %v4_bd78 = inttoptr i32 %v3_bd78 to i8*
  store i8 %v1_bd78, i8* %v4_bd78, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v4_bd7c, i32* %r3.global-to-local, align 4
  %v0_bd80 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd80 = add i32 %v0_bd80, 8
  %v2_bd80 = inttoptr i32 %v1_bd80 to i32*
  %v3_bd80 = load i32, i32* %v2_bd80, align 4
  store i32 %v3_bd80, i32* %r1.global-to-local, align 4
  %v1_bd84 = or i32 %v4_bd7c, 1
  store i32 %v1_bd84, i32* %r3.global-to-local, align 4
  %v1_bd88 = add i32 %v0_bd80, 15
  %v2_bd88 = inttoptr i32 %v1_bd88 to i8*
  %v3_bd88 = load i8, i8* %v2_bd88, align 1
  %v4_bd88 = zext i8 %v3_bd88 to i32
  store i32 %v4_bd88, i32* %ip.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd80, 14
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v4_bd8c, i32* %r0.global-to-local, align 4
  %v2_bd90 = add i32 %v0_bd7c, 4
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  store i32 %v3_bd80, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd94 = add i32 %v0_bd94, 4
  %v2_bd94 = inttoptr i32 %v1_bd94 to i32*
  %v3_bd94 = load i32, i32* %v2_bd94, align 4
  store i32 %v3_bd94, i32* %lr.global-to-local, align 4
  %v0_bd98 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd98 = trunc i32 %v0_bd98 to i8
  %v2_bd98 = load i32, i32* @r6, align 4
  %v3_bd98 = add i32 %v2_bd98, 13
  %v4_bd98 = inttoptr i32 %v3_bd98 to i8*
  store i8 %v1_bd98, i8* %v4_bd98, align 1
  %v0_bd9c = load i32, i32* @r6, align 4
  %v1_bd9c = add i32 %v0_bd9c, 12
  %v2_bd9c = inttoptr i32 %v1_bd9c to i8*
  %v3_bd9c = load i8, i8* %v2_bd9c, align 1
  %v4_bd9c = zext i8 %v3_bd9c to i32
  store i32 %v4_bd9c, i32* %r2.global-to-local, align 4
  %v1_bda0 = add i32 %v0_bd9c, 13
  %v2_bda0 = inttoptr i32 %v1_bda0 to i8*
  %v3_bda0 = load i8, i8* %v2_bda0, align 1
  %v4_bda0 = zext i8 %v3_bda0 to i32
  %v0_bda4 = load i32, i32* %r0.global-to-local, align 4
  %v1_bda4 = load i32, i32* %ip.global-to-local, align 4
  %v4_bda4 = mul i32 %v1_bda4, 256
  %v5_bda4 = or i32 %v4_bda4, %v0_bda4
  store i32 %v5_bda4, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bd9c, 16
  %v1_bda8 = zext i8 %tmp101 to i32
  %v3_bdac = sdiv i32 %v5_bda4, 256
  store i32 %v3_bdac, i32* %r1.global-to-local, align 4
  %v1_bdb0 = or i32 %v1_bda8, 128
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v1_bdb4 = or i32 %v4_bda0, 16
  store i32 %v1_bdb4, i32* %r3.global-to-local, align 4
  %v1_bdb8 = trunc i32 %v3_bdac to i8
  %v3_bdb8 = add i32 %v0_bd9c, 3
  %v4_bdb8 = inttoptr i32 %v3_bdb8 to i8*
  store i8 %v1_bdb8, i8* %v4_bdb8, align 1
  %v0_bdbc = load i32, i32* %lr.global-to-local, align 4
  %v1_bdbc = load i32, i32* @r6, align 4
  %v2_bdbc = add i32 %v1_bdbc, 8
  %v3_bdbc = inttoptr i32 %v2_bdbc to i32*
  store i32 %v0_bdbc, i32* %v3_bdbc, align 4
  %v0_bdc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdc0 = trunc i32 %v0_bdc0 to i8
  %v2_bdc0 = load i32, i32* @r6, align 4
  %v3_bdc0 = add i32 %v2_bdc0, 12
  %v4_bdc0 = inttoptr i32 %v3_bdc0 to i8*
  store i8 %v1_bdc0, i8* %v4_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdc8 = trunc i32 %v0_bdc8 to i8
  %v2_bdc8 = load i32, i32* @r6, align 4
  %v3_bdc8 = add i32 %v2_bdc8, 2
  %v4_bdc8 = inttoptr i32 %v3_bdc8 to i8*
  store i8 %v1_bdc8, i8* %v4_bdc8, align 1
  %v0_bdcc = call i32 @function_10a94()
  %v1_bdcc = trunc i32 %v0_bdcc to i8
  store i32 %v0_bdcc, i32* %r0.global-to-local, align 4
  store i32 %v1_b8b0, i32* %lr.global-to-local, align 4
  %v0_bdd4 = load i32, i32* @r6, align 4
  %v1_bdd4 = add i32 %v0_bdd4, 13
  %v2_bdd4 = inttoptr i32 %v1_bdd4 to i8*
  %v3_bdd4 = load i8, i8* %v2_bdd4, align 1
  %v4_bdd4 = zext i8 %v3_bdd4 to i32
  store i32 %v1_bdd8, i32* %r2.global-to-local, align 4
  %v1_bddc = and i32 %v4_bdd4, 223
  %v5_bde0 = or i32 %v1_bddc, %v4_bde0
  store i32 %v5_bde0, i32* %r3.global-to-local, align 4
  %v1_bde4 = trunc i32 %v5_bde0 to i8
  store i8 %v1_bde4, i8* %v2_bdd4, align 1
  store i32 %v1_b8d0, i32* %r1.global-to-local, align 4
  %v0_bdec = load i32, i32* @r6, align 4
  %v1_bdec = add i32 %v0_bdec, 13
  %v2_bdec = inttoptr i32 %v1_bdec to i8*
  %v3_bdec = load i8, i8* %v2_bdec, align 1
  %v4_bdec = zext i8 %v3_bdec to i32
  store i32 %v1_bdf0, i32* %r3.global-to-local, align 4
  %v1_bdf4 = and i32 %v4_bdec, 239
  %v5_bdf8 = or i32 %v1_bdf4, %v4_bdf8
  store i32 %v5_bdf8, i32* %r2.global-to-local, align 4
  %v1_bdfc = trunc i32 %v5_bdf8 to i8
  store i8 %v1_bdfc, i8* %v2_bdec, align 1
  store i32 %v1_b8f0, i32* %ip.global-to-local, align 4
  %v0_be04 = load i32, i32* @r6, align 4
  %v1_be04 = add i32 %v0_be04, 13
  %v2_be04 = inttoptr i32 %v1_be04 to i8*
  %v3_be04 = load i8, i8* %v2_be04, align 1
  %v4_be04 = zext i8 %v3_be04 to i32
  store i32 %v1_be08, i32* %r2.global-to-local, align 4
  %v1_be0c = and i32 %v4_be04, 247
  %v5_be10 = or i32 %v1_be0c, %v4_be10
  store i32 %v5_be10, i32* %r3.global-to-local, align 4
  %v1_be14 = trunc i32 %v5_be10 to i8
  store i8 %v1_be14, i8* %v2_be04, align 1
  %v0_be1c = load i32, i32* @r6, align 4
  %v1_be1c = add i32 %v0_be1c, 13
  %v2_be1c = inttoptr i32 %v1_be1c to i8*
  %v3_be1c = load i8, i8* %v2_be1c, align 1
  %v4_be1c = zext i8 %v3_be1c to i32
  store i32 %v1_be20, i32* %r3.global-to-local, align 4
  %v1_be24 = and i32 %v4_be1c, 251
  %v5_be28 = or i32 %v1_be24, %v4_be28
  store i32 %v5_be28, i32* %r2.global-to-local, align 4
  %v1_be2c = trunc i32 %v5_be28 to i8
  store i8 %v1_be2c, i8* %v2_be1c, align 1
  store i32 %v1_b930, i32* %r1.global-to-local, align 4
  %v0_be34 = load i32, i32* @r6, align 4
  %v1_be34 = add i32 %v0_be34, 13
  %v2_be34 = inttoptr i32 %v1_be34 to i8*
  %v3_be34 = load i8, i8* %v2_be34, align 1
  %v4_be34 = zext i8 %v3_be34 to i32
  store i32 %v1_be38, i32* %r2.global-to-local, align 4
  %v1_be3c = and i32 %v4_be34, 253
  %v4_be40 = or i32 %v1_be3c, %v3_be40
  store i32 %v4_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = trunc i32 %v4_be40 to i8
  store i8 %v1_be44, i8* %v2_be34, align 1
  %v0_be48 = load i32, i32* @r6, align 4
  %v1_be48 = add i32 %v0_be48, 13
  %v2_be48 = inttoptr i32 %v1_be48 to i8*
  %v3_be48 = load i8, i8* %v2_be48, align 1
  %v4_be48 = zext i8 %v3_be48 to i32
  %v0_be4c = load i32, i32* @r8, align 4
  %v1_be4c = urem i32 %v0_be4c, 2
  %v1_be50 = and i32 %v4_be48, 254
  store i32 %v1_be50, i32* %r2.global-to-local, align 4
  %v4_be5427 = udiv i32 %v0_bdcc, 256
  %v2_be58 = or i32 %v1_be50, %v1_be4c
  store i32 %v2_be58, i32* %r3.global-to-local, align 4
  %v1_be5c = trunc i32 %v4_be5427 to i8
  %v3_be5c = add i32 %v0_be48, 15
  %v4_be5c = inttoptr i32 %v3_be5c to i8*
  store i8 %v1_be5c, i8* %v4_be5c, align 1
  %v3_be60 = load i32, i32* @r6, align 4
  %v4_be60 = add i32 %v3_be60, 14
  %v5_be60 = inttoptr i32 %v4_be60 to i8*
  store i8 %v1_bdcc, i8* %v5_be60, align 1
  %v0_be64 = load i32, i32* %r3.global-to-local, align 4
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v2_be64 = load i32, i32* @r6, align 4
  %v3_be64 = add i32 %v2_be64, 13
  %v4_be64 = inttoptr i32 %v3_be64 to i8*
  store i8 %v1_be64, i8* %v4_be64, align 1
  %v0_be68 = load i32, i32* @r4, align 4
  %v1_be68 = add i32 %v0_be68, 40
  store i32 %v1_be68, i32* %r0.global-to-local, align 4
  %v0_be6c = load i32, i32* @sb, align 4
  store i32 %v0_be6c, i32* @r1, align 4
  %v1_be70 = inttoptr i32 %v1_be68 to i8*
  %v2_be70 = call i32 @function_10c70(i8* %v1_be70)
  store i32 %v2_be70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %dec_label_pc_ba14, %bb81
  %v3_be74 = load i32, i32* %stack_var_-40, align 4
  %v1_be78 = add i32 %v3_be74, 1
  store i32 %v1_be78, i32* %r3.global-to-local, align 4
  %v1_be7c = load i32, i32* @fp, align 4
  %v9_be7c = icmp eq i32 %v1_be78, %v1_be7c
  store i1 %v9_be7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be78, i32* %stack_var_-40, align 4
  %v5_be84 = icmp slt i32 %v1_be78, %v1_be7c
  br i1 %v5_be84, label %dec_label_pc_ba04, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be74, %.thread18
  %v0_be9012 = phi i32 [ %v0_b9d8, %.thread18 ], [ %v1_be7c, %dec_label_pc_be74 ]
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = add i32 %v0_be88, 40
  store i32 %v1_be88, i32* @sl, align 4
  %v1_be8c = add i32 %v0_be88, 20
  store i32 %v1_be8c, i32* @r7, align 4
  %v2_bedc = icmp eq i32 %v1_b988, 0
  %v6_bebc = inttoptr i32 %v2_b7f8 to i32*
  %v9_bec4 = icmp eq i32 %v3_b9e0, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  br label %dec_label_pc_be90

dec_label_pc_be90:                                ; preds = %dec_label_pc_beec, %dec_label_pc_be88
  %v0_be90 = phi i32 [ %v1_bfcc, %dec_label_pc_beec ], [ %v0_be9012, %dec_label_pc_be88 ]
  %v2_be90 = icmp eq i32 %v0_be90, 0
  store i1 %v2_be90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_be90, 1
  br label %dec_label_pc_be98

dec_label_pc_be98:                                ; preds = %dec_label_pc_be98, %dec_label_pc_be90
  br i1 %tmp82, label %dec_label_pc_be98, label %dec_label_pc_be9c

dec_label_pc_be9c:                                ; preds = %dec_label_pc_be98
  %v0_be9c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_be9c, 256
  %v1_bea4 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_be9c, 256
  %v4_bea8 = urem i32 %tmp84, 256
  %v5_bea8 = or i32 %v4_bea8, %v1_bea4
  store i32 %v5_bea8, i32* @r8, align 4
  store i32 %v2_b7f8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v7_bebc = load i32, i32* %v6_bebc, align 4
  store i32 %v7_bebc, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_bec4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_bed0 = add i32 %v7_bebc, 20
  store i32 %v1_bed0, i32* @r5, align 4
  br i1 %v9_bec4, label %dec_label_pc_bff8, label %dec_label_pc_bed8

dec_label_pc_bed8:                                ; preds = %dec_label_pc_bfd8, %dec_label_pc_be9c
  %v0_bee0 = phi i32 [ %v7_bfe4, %dec_label_pc_bfd8 ], [ %v7_bebc, %dec_label_pc_be9c ]
  store i32 %v1_b988, i32* %lr.global-to-local, align 4
  store i1 %v2_bedc, i1* %cpsr_z.global-to-local, align 1
  %v1_bee0 = add i32 %v0_bee0, 40
  store i32 %v1_bee0, i32* %r0.global-to-local, align 4
  %v0_bee4 = load i32, i32* @sb, align 4
  store i32 %v0_bee4, i32* @r1, align 4
  br i1 %v2_bedc, label %dec_label_pc_beec, label %dec_label_pc_c01c

dec_label_pc_beec:                                ; preds = %dec_label_pc_bed8, %dec_label_pc_bff8, %dec_label_pc_c01c
  %v2_beec = phi i32 [ %v0_bee0, %dec_label_pc_bed8 ], [ %v0_c010, %dec_label_pc_bff8 ], [ %v2_beec.pre, %dec_label_pc_c01c ]
  %v0_beec = load i32, i32* @r6, align 4
  %v1_beec = trunc i32 %v0_beec to i8
  %v3_beec = add i32 %v2_beec, 10
  %v4_beec = inttoptr i32 %v3_beec to i8*
  store i8 %v1_beec, i8* %v4_beec, align 1
  %v0_bef0 = load i32, i32* @r6, align 4
  %v1_bef0 = trunc i32 %v0_bef0 to i8
  %v2_bef0 = load i32, i32* @r4, align 4
  %v3_bef0 = add i32 %v2_bef0, 11
  %v4_bef0 = inttoptr i32 %v3_bef0 to i8*
  store i8 %v1_bef0, i8* %v4_bef0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bef8 = load i32, i32* @r4, align 4
  store i32 %v0_bef8, i32* @r0, align 4
  %v2_befc = call i32 @function_f008(i32 %v0_bef8, i32 20)
  %v3_befc = trunc i32 %v2_befc to i8
  store i32 %v2_befc, i32* %r0.global-to-local, align 4
  %v3_bf00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b7e8, i32* %r2.global-to-local, align 4
  %v3_bf08 = mul i32 %v3_bf00, 16
  %v2_bf0c = add i32 %v3_bf08, %v2_b7e8
  store i32 %v2_bf0c, i32* %r1.global-to-local, align 4
  %v1_bf10 = add i32 %v2_bf0c, 4
  %v2_bf10 = inttoptr i32 %v1_bf10 to i32*
  %v3_bf10 = load i32, i32* %v2_bf10, align 4
  %v3_bf14 = mul i32 %v3_bf10, 65536
  store i32 %v3_bf14, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_bf10, 256
  %v1_bf1c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_bf10, 256
  %v4_bf20 = urem i32 %tmp86, 256
  %v5_bf20 = or i32 %v4_bf20, %v1_bf1c
  store i32 %v5_bf20, i32* %r2.global-to-local, align 4
  %v1_bf24 = add i32 %v3_bf10, 1
  store i32 %v1_bf24, i32* %r3.global-to-local, align 4
  store i32 %v1_bf24, i32* %v2_bf10, align 4
  %v0_bf2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf2c = load i32, i32* @r5, align 4
  %v2_bf2c = add i32 %v1_bf2c, 4
  %v3_bf2c = inttoptr i32 %v2_bf2c to i32*
  store i32 %v0_bf2c, i32* %v3_bf2c, align 4
  %v0_bf30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf30 = add i32 %v0_bf30, 8
  %v2_bf30 = inttoptr i32 %v1_bf30 to i32*
  %v3_bf30 = load i32, i32* %v2_bf30, align 4
  %tmp87 = mul i32 %v3_bf30, 256
  %v1_bf3c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_bf30, 256
  %v4_bf40 = urem i32 %tmp88, 256
  %v5_bf40 = or i32 %v4_bf40, %v1_bf3c
  store i32 %v5_bf40, i32* %r2.global-to-local, align 4
  %v4_bf4428 = udiv i32 %v2_befc, 256
  %v1_bf48 = trunc i32 %v4_bf4428 to i8
  %v2_bf48 = load i32, i32* @r4, align 4
  %v3_bf48 = add i32 %v2_bf48, 11
  %v4_bf48 = inttoptr i32 %v3_bf48 to i8*
  store i8 %v1_bf48, i8* %v4_bf48, align 1
  %v3_bf4c = load i32, i32* @r4, align 4
  %v4_bf4c = add i32 %v3_bf4c, 10
  %v5_bf4c = inttoptr i32 %v4_bf4c to i8*
  store i8 %v3_befc, i8* %v5_bf4c, align 1
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = load i32, i32* @r5, align 4
  %v2_bf50 = add i32 %v1_bf50, 8
  %v3_bf50 = inttoptr i32 %v2_bf50 to i32*
  store i32 %v0_bf50, i32* %v3_bf50, align 4
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* @r1, align 4
  %v0_bf58 = load i32, i32* @r8, align 4
  store i32 %v0_bf58, i32* %r2.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r7, align 4
  store i32 %v0_bf5c, i32* %r3.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r6, align 4
  %v1_bf64 = trunc i32 %v0_bf64 to i8
  %v3_bf64 = add i32 %v0_bf54, 16
  %v4_bf64 = inttoptr i32 %v3_bf64 to i8*
  store i8 %v1_bf64, i8* %v4_bf64, align 1
  %v0_bf68 = load i32, i32* @r6, align 4
  %v1_bf68 = trunc i32 %v0_bf68 to i8
  %v2_bf68 = load i32, i32* @r5, align 4
  %v3_bf68 = add i32 %v2_bf68, 17
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v4_bf6c = call i32 @function_f064(i32 %v0_bf60, i32 %v0_bf54, i32 %v0_bf58, i32 %v0_bf5c)
  %v5_bf6c = trunc i32 %v4_bf6c to i8
  store i32 %v4_bf6c, i32* %r0.global-to-local, align 4
  %v4_bf7029 = udiv i32 %v4_bf6c, 256
  %v1_bf74 = trunc i32 %v4_bf7029 to i8
  %v2_bf74 = load i32, i32* @r5, align 4
  %v3_bf74 = add i32 %v2_bf74, 17
  %v4_bf74 = inttoptr i32 %v3_bf74 to i8*
  store i8 %v1_bf74, i8* %v4_bf74, align 1
  %v3_bf78 = load i32, i32* @r5, align 4
  %v4_bf78 = add i32 %v3_bf78, 16
  %v5_bf78 = inttoptr i32 %v4_bf78 to i8*
  store i8 %v5_bf6c, i8* %v5_bf78, align 1
  %v3_bf7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf7c, i32* %r3.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  %v1_bf80 = add i32 %v0_bf80, 20
  %v2_bf80 = inttoptr i32 %v1_bf80 to i32*
  %v3_bf80 = load i32, i32* %v2_bf80, align 4
  %v5_bf88 = mul i32 %v3_bf7c, 24
  %v3_bf90 = udiv i32 %v3_bf80, 65536
  store i32 %v3_bf90, i32* %r2.global-to-local, align 4
  %v2_bf94 = add i32 %v5_bf88, %arg2
  store i32 %v2_bf94, i32* %ip.global-to-local, align 4
  %v3_bf984 = udiv i32 %v3_bf80, 16777216
  %v1_bf9c = trunc i32 %v3_bf984 to i8
  %v3_bf9c = add i32 %v2_bf94, 3
  %v4_bf9c = inttoptr i32 %v3_bf9c to i8*
  store i8 %v1_bf9c, i8* %v4_bf9c, align 1
  %v0_bfa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bfa0 = trunc i32 %v0_bfa0 to i8
  %v2_bfa0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bfa0 = add i32 %v2_bfa0, 2
  %v4_bfa0 = inttoptr i32 %v3_bfa0 to i8*
  store i8 %v1_bfa0, i8* %v4_bfa0, align 1
  %v0_bfa4 = load i32, i32* @r4, align 4
  store i32 %v0_bfa4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v0_bfb0 = load i32, i32* @sl, align 4
  store i32 %v0_bfb0, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bfb8 = load i32, i32* %ip.global-to-local, align 4
  %v6_bfc0 = inttoptr i32 %v0_bfa4 to i32*
  %v7_bfc0 = call i32 @function_14b1c(i32 %v3_b998, i32* %v6_bfc0, i32 %v0_bfb0, i32 16384, i32 %v0_bfb8, i32 16)
  %v3_bfc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bfc4, i32* %r3.global-to-local, align 4
  %v1_bfc8 = add i32 %v3_bfc4, 1
  store i32 %v1_bfc8, i32* %r0.global-to-local, align 4
  %v1_bfcc = load i32, i32* @fp, align 4
  %v9_bfcc = icmp eq i32 %v1_bfc8, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfc8, i32* %stack_var_-40, align 4
  %v6_bfd4 = icmp slt i32 %v1_bfc8, %v1_bfcc
  br i1 %v6_bfd4, label %dec_label_pc_bfd8, label %dec_label_pc_be90

dec_label_pc_bfd8:                                ; preds = %dec_label_pc_beec
  store i32 %v2_b7f8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_b9e0, i32* %ip.global-to-local, align 4
  %v4_bfe4 = mul i32 %v1_bfc8, 4
  %v5_bfe4 = add i32 %v4_bfe4, %v2_b7f8
  %v6_bfe4 = inttoptr i32 %v5_bfe4 to i32*
  %v7_bfe4 = load i32, i32* %v6_bfe4, align 4
  store i32 %v7_bfe4, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_bec4, i1* %cpsr_z.global-to-local, align 1
  %v1_bff0 = add i32 %v7_bfe4, 20
  store i32 %v1_bff0, i32* @r5, align 4
  br i1 %v9_bec4, label %dec_label_pc_bff8, label %dec_label_pc_bed8

dec_label_pc_bff8:                                ; preds = %dec_label_pc_bfd8, %dec_label_pc_be9c
  %v0_bff8 = call i32 @function_10a94()
  %v1_bff8 = trunc i32 %v0_bff8 to i8
  store i32 %v1_b988, i32* %lr.global-to-local, align 4
  %v4_c000 = sdiv i32 %v0_bff8, 256
  store i32 %v4_c000, i32* %r3.global-to-local, align 4
  store i1 %v2_bedc, i1* %cpsr_z.global-to-local, align 1
  %v3_c008 = load i32, i32* @r4, align 4
  %v4_c008 = add i32 %v3_c008, 4
  %v5_c008 = inttoptr i32 %v4_c008 to i8*
  store i8 %v1_bff8, i8* %v5_c008, align 1
  %v0_c00c = load i32, i32* %r3.global-to-local, align 4
  %v1_c00c = trunc i32 %v0_c00c to i8
  %v2_c00c = load i32, i32* @r4, align 4
  %v3_c00c = add i32 %v2_c00c, 5
  %v4_c00c = inttoptr i32 %v3_c00c to i8*
  store i8 %v1_c00c, i8* %v4_c00c, align 1
  %v0_c010 = load i32, i32* @r4, align 4
  %v1_c010 = add i32 %v0_c010, 40
  store i32 %v1_c010, i32* %r0.global-to-local, align 4
  %v0_c014 = load i32, i32* @sb, align 4
  store i32 %v0_c014, i32* @r1, align 4
  %v0_c018 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c018, label %dec_label_pc_beec, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bed8, %dec_label_pc_bff8
  %v0_c01c = phi i32 [ %v1_bee0, %dec_label_pc_bed8 ], [ %v1_c010, %dec_label_pc_bff8 ]
  %v1_c01c = inttoptr i32 %v0_c01c to i8*
  %v2_c01c = call i32 @function_10c70(i8* %v1_c01c)
  store i32 %v2_c01c, i32* %r0.global-to-local, align 4
  %v2_beec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_beec

; uselistorder directives
  uselistorder i32 %v0_c010, { 1, 0 }
  uselistorder i32 %v7_bfe4, { 1, 2, 0 }
  uselistorder i32 %v1_bfcc, { 1, 2, 0 }
  uselistorder i32 %v1_bfc8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_bf6c, { 0, 2, 1 }
  uselistorder i32 %v0_bf54, { 1, 0, 2 }
  uselistorder i32 %v3_bf30, { 1, 0 }
  uselistorder i32 %v3_bf10, { 3, 2, 0, 1 }
  uselistorder i32 %v2_befc, { 0, 2, 1 }
  uselistorder i32 %v0_bee0, { 1, 0 }
  uselistorder i32 %v0_be9c, { 1, 0 }
  uselistorder i32 %v0_be90, { 1, 0 }
  uselistorder i1 %v9_bec4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_be78, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bdcc, { 0, 2, 1 }
  uselistorder i32 %v3_bdac, { 1, 0 }
  uselistorder i32 %v0_bd80, { 1, 0, 2 }
  uselistorder i32 %v3_bd74, { 1, 0 }
  uselistorder i32 %v3_bd08, { 1, 0 }
  uselistorder i32 %v0_bcfc, { 1, 0 }
  uselistorder i32 %v3_bc84, { 1, 0 }
  uselistorder i32 %v2_bc70, { 1, 0 }
  uselistorder i32 %v3_bc54, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bc4c, { 1, 0 }
  uselistorder i32 %v3_bc28, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bc20, { 1, 0 }
  uselistorder i32 %v4_bc08, { 1, 0 }
  uselistorder i32 %v0_bc04, { 0, 2, 1 }
  uselistorder i1 %v7_bb74, { 1, 0 }
  uselistorder i32 %v7_bb6c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bbb8, { 1, 0 }
  uselistorder i1 %v9_bb9c, { 1, 0 }
  uselistorder i32 %v4_bbb0, { 1, 0 }
  uselistorder i32 %v4_bbac, { 1, 0 }
  uselistorder i32 %v8_bac0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_baac, { 1, 0 }
  uselistorder i32 %v0_ba9c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_ba24, { 1, 0 }
  uselistorder i32 %v3_ba20, { 2, 1, 0, 3 }
  uselistorder i32 %v1_be38, { 1, 0 }
  uselistorder i32 %v1_be20, { 1, 0 }
  uselistorder i32 %v1_be08, { 1, 0 }
  uselistorder i32 %v1_bdf0, { 1, 0 }
  uselistorder i32 %v1_bdd8, { 1, 0 }
  uselistorder i32 %v5_bbb4, { 1, 0 }
  uselistorder i32 %v3_bb0893, { 1, 0 }
  uselistorder i1 %v2_bbcc, { 1, 0 }
  uselistorder i32 %v1_bbc8, { 1, 0 }
  uselistorder i32 %v4_bbc4, { 2, 0, 1 }
  uselistorder i32 %v4_bba8, { 1, 0 }
  uselistorder i32 %v8_b9ec, { 2, 1, 0 }
  uselistorder i32 %v8_b9e8, { 1, 2, 0 }
  uselistorder i32 %v3_b9e0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b9dc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b9d0, { 1, 0 }
  uselistorder i1 %v7_b9a0, { 1, 0 }
  uselistorder i32 %v3_b99c, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b998, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b988, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b930, { 1, 0 }
  uselistorder i32 %v1_b8f0, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b0, { 1, 0 }
  uselistorder i32 %v1_b878, { 1, 0 }
  uselistorder i32 %v2_b7f8, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b7e8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b7cc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c01c, { 1, 0 }
  uselistorder label %dec_label_pc_beec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_be74, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bbfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bb34, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bae4, { 1, 0 }
}

define i32 @function_c028(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c028:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c02c = urem i32 %arg1, 256
  store i32 %v1_c02c, i32* @fp, align 4
  store i32 %v1_c02c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c044 = urem i32 %arg3, 256
  store i32 %v1_c044, i32* @r4, align 4
  %v2_c048 = call i32 @function_14e84(i32 %v1_c02c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c054 = load i32, i32* @fp, align 4
  store i32 %v0_c054, i32* %r0.global-to-local, align 4
  %v2_c058 = call i32 @function_14e84(i32 %v0_c054, i32 4)
  %v0_c05c = load i32, i32* @r5, align 4
  store i32 %v0_c05c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c06c = load i32, i32* @r4, align 4
  store i32 %v0_c06c, i32* %r0.global-to-local, align 4
  %v5_c070 = inttoptr i32 %v0_c05c to i32*
  %v6_c070 = call i32 @function_a4e8(i32 %v0_c06c, i32* %v5_c070, i32 2, i32 0)
  %v1_c07c = urem i32 %v6_c070, 256
  store i32 %v1_c07c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c088 = load i32, i32* @r5, align 4
  store i32 %v0_c088, i32* %r1.global-to-local, align 4
  %v0_c08c = load i32, i32* @r4, align 4
  store i32 %v0_c08c, i32* %r0.global-to-local, align 4
  %v6_c094 = inttoptr i32 %v0_c088 to i32*
  %v7_c094 = call i32 @function_a4e8(i32 %v0_c08c, i32* %v6_c094, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c094, i32* @r6, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  store i32 %v0_c0a8, i32* %r0.global-to-local, align 4
  %v4_c0ac = inttoptr i32 %v0_c098 to i32*
  %v5_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v4_c0ac, i32 4, i32 64)
  %v1_c0b4 = urem i32 %v5_c0ac, 256
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  %v0_c0b8 = load i32, i32* @r5, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c4 = load i32, i32* @r4, align 4
  store i32 %v0_c0c4, i32* %r0.global-to-local, align 4
  %v6_c0cc = inttoptr i32 %v0_c0b8 to i32*
  %v7_c0cc = call i32 @function_a4e8(i32 %v0_c0c4, i32* %v6_c0cc, i32 5, i32 1)
  %v1_c0d8 = urem i32 %v7_c0cc, 256
  store i32 %v1_c0d8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c0e8 = load i32, i32* @r4, align 4
  store i32 %v0_c0e8, i32* %r0.global-to-local, align 4
  %v5_c0f0 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f0 = call i32 @function_a4e8(i32 %v0_c0e8, i32* %v5_c0f0, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c0f4 = load i32, i32* @r5, align 4
  store i32 %v0_c0f4, i32* %r1.global-to-local, align 4
  %v3_c0f8 = mul i32 %v6_c0f0, 65536
  store i32 %v3_c0f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c104 = load i32, i32* @r4, align 4
  store i32 %v0_c104, i32* %r0.global-to-local, align 4
  %v4_c108 = inttoptr i32 %v0_c0f4 to i32*
  %v5_c108 = call i32 @function_a4e8(i32 %v0_c104, i32* %v4_c108, i32 11, i32 1)
  %v1_c110 = urem i32 %v5_c108, 256
  store i32 %v1_c110, i32* %ip.global-to-local, align 4
  %v0_c114 = load i32, i32* @r5, align 4
  store i32 %v0_c114, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  store i32 %v0_c120, i32* %r0.global-to-local, align 4
  %v5_c128 = inttoptr i32 %v0_c114 to i32*
  %v6_c128 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c128, i32 12, i32 1)
  %v1_c130 = urem i32 %v6_c128, 256
  store i32 %v1_c130, i32* %ip.global-to-local, align 4
  %v0_c134 = load i32, i32* @r5, align 4
  store i32 %v0_c134, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c140 = load i32, i32* @r4, align 4
  store i32 %v0_c140, i32* %r0.global-to-local, align 4
  %v5_c148 = inttoptr i32 %v0_c134 to i32*
  %v6_c148 = call i32 @function_a4e8(i32 %v0_c140, i32* %v5_c148, i32 13, i32 1)
  %v1_c150 = urem i32 %v6_c148, 256
  store i32 %v1_c150, i32* %ip.global-to-local, align 4
  %v0_c154 = load i32, i32* @r5, align 4
  store i32 %v0_c154, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c160 = load i32, i32* @r4, align 4
  store i32 %v0_c160, i32* %r0.global-to-local, align 4
  %v5_c168 = inttoptr i32 %v0_c154 to i32*
  %v6_c168 = call i32 @function_a4e8(i32 %v0_c160, i32* %v5_c168, i32 14, i32 1)
  %v1_c170 = urem i32 %v6_c168, 256
  store i32 %v1_c170, i32* %ip.global-to-local, align 4
  %v0_c174 = load i32, i32* @r5, align 4
  store i32 %v0_c174, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c180 = load i32, i32* @r4, align 4
  store i32 %v0_c180, i32* %r0.global-to-local, align 4
  %v5_c188 = inttoptr i32 %v0_c174 to i32*
  %v6_c188 = call i32 @function_a4e8(i32 %v0_c180, i32* %v5_c188, i32 15, i32 1)
  %v1_c190 = urem i32 %v6_c188, 256
  store i32 %v1_c190, i32* %ip.global-to-local, align 4
  %v0_c194 = load i32, i32* @r5, align 4
  store i32 %v0_c194, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c1a0 = load i32, i32* @r4, align 4
  store i32 %v0_c1a0, i32* %r0.global-to-local, align 4
  %v5_c1a8 = inttoptr i32 %v0_c194 to i32*
  %v6_c1a8 = call i32 @function_a4e8(i32 %v0_c1a0, i32* %v5_c1a8, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c1a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @r5, align 4
  store i32 %v0_c1b8, i32* %r1.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r4, align 4
  store i32 %v0_c1bc, i32* %r0.global-to-local, align 4
  %v1_c1c0 = urem i32 %v6_c1a8, 256
  store i32 %v1_c1c0, i32* @r8, align 4
  %v4_c1c4 = inttoptr i32 %v0_c1b8 to i32*
  %v5_c1c4 = call i32 @function_a4e8(i32 %v0_c1bc, i32* %v4_c1c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  store i32 %v0_c1d0, i32* %r1.global-to-local, align 4
  store i32 %v5_c1c4, i32* @sb, align 4
  %v0_c1d8 = load i32, i32* @r4, align 4
  store i32 %v0_c1d8, i32* %r0.global-to-local, align 4
  %v4_c1dc = inttoptr i32 %v0_c1d0 to i32*
  %v5_c1dc = call i32 @function_a4e8(i32 %v0_c1d8, i32* %v4_c1dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c1e8 = urem i32 %v5_c1dc, 256
  store i32 %v1_c1e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c1f8 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @r7, align 4
  %v3_c1fc = udiv i32 %v0_c1fc, 65536
  store i32 %v3_c1fc, i32* %r1.global-to-local, align 4
  %v7_c200 = icmp eq i32 %v3_c1f8, -1
  store i1 %v7_c200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c200, label %dec_label_pc_c45c, label %dec_label_pc_c210

dec_label_pc_c210:                                ; preds = %dec_label_pc_c028
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c218 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c218, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c22c = call i32 @function_14b50(i32 %v3_c1f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c22c, i32* %r0.global-to-local, align 4
  %v7_c230 = icmp eq i32 %v6_c22c, -1
  store i1 %v7_c230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c230, label %dec_label_pc_c454, label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %dec_label_pc_c210
  %v0_c238 = load i32, i32* @fp, align 4
  %v2_c238 = icmp eq i32 %v0_c238, 0
  store i1 %v2_c238, i1* %cpsr_z.global-to-local, align 1
  %v0_c23c = load i32, i32* @r6, align 4
  %v3_c23c = mul i32 %v0_c23c, 65536
  store i32 %v3_c23c, i32* %r0.global-to-local, align 4
  %v3_c240 = urem i32 %v0_c23c, 65536
  store i32 %v3_c240, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_c238, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_c264.preheader

.thread18:                                        ; preds = %dec_label_pc_c238
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c6e8

dec_label_pc_c264.preheader:                      ; preds = %dec_label_pc_c238
  %v5_c248 = load i32, i32* @r7, align 4
  %v8_c248 = udiv i32 %v5_c248, 16777216
  %tmp73 = udiv i32 %v0_c23c, 256
  %v8_c24c = urem i32 %tmp73, 256
  store i32 %v8_c24c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v9_c350 = icmp eq i32 %v3_c1fc, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_c374 = ptrtoint i32* %stack_var_-60 to i32
  %v3_c380 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_c3b0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_c3b4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_c3b8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_c404 = zext i8 %tmp31 to i32
  %v4_c408 = zext i8 %tmp30 to i32
  %v4_c414 = mul nuw nsw i32 %v4_c408, 256
  %v4_c424 = zext i8 %tmp to i32
  %v1_c428 = and i32 %v4_c424, 18
  %v2_c42c = icmp eq i32 %v1_c428, 18
  %v1_c360 = mul nuw nsw i32 %v3_c1fc, 256
  %v4_c364 = and i32 %v1_c360, 65280
  %v5_c364 = or i32 %v8_c248, %v4_c364
  %v3_c36893 = udiv i32 %v4_c364, 256
  %v1_c36c = trunc i32 %v3_c36893 to i8
  %v1_c530 = mul i32 %v0_c23c, 256
  %v4_c538 = and i32 %v1_c530, 65280
  %sext = mul i32 %v6_c070, 16777216
  %v4_c548 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_c0ac, 16777216
  %v4_c56c = sdiv i32 %sext5, 16777216
  %v5_c414 = or i32 %v4_c404, %v4_c414
  %v1_c434 = and i32 %v4_c424, 5
  %v2_c434 = icmp eq i32 %v1_c434, 0
  %v1_c370 = trunc i32 %v8_c248 to i8
  %v5_c538 = or i32 %v8_c24c, %v4_c538
  %v1_c558 = trunc i32 %v4_c548 to i8
  %v1_c638 = urem i32 %v5_c108, 2
  %tmp94 = sub nsw i32 0, %v1_c638
  %v4_c640 = and i32 %tmp94, 32
  %v1_c650 = urem i32 %v6_c128, 2
  %tmp95 = sub nsw i32 0, %v1_c650
  %v4_c658 = and i32 %tmp95, 16
  %v1_c668 = urem i32 %v6_c148, 2
  %tmp96 = sub nsw i32 0, %v1_c668
  %v4_c670 = and i32 %tmp96, 8
  %v1_c680 = urem i32 %v6_c168, 2
  %tmp97 = sub nsw i32 0, %v1_c680
  %v4_c688 = and i32 %tmp97, 4
  %v1_c698 = urem i32 %v6_c188, 2
  %tmp98 = sub nsw i32 0, %v1_c698
  %v3_c6a0 = and i32 %tmp98, 2
  br label %dec_label_pc_c264

dec_label_pc_c264:                                ; preds = %dec_label_pc_c6d4, %dec_label_pc_c43c, %dec_label_pc_c264.preheader
  store i32 %v8_c24c, i32* %r3.global-to-local, align 4
  %v0_c270 = load i32, i32* @sb, align 4
  %v1_c270 = add i32 %v0_c270, 40
  store i32 %v1_c270, i32* @sl, align 4
  br label %dec_label_pc_c274

dec_label_pc_c274:                                ; preds = %dec_label_pc_c448, %dec_label_pc_c264
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c280 = call i32 @function_14b80(i32 2, i32 1, i32 0)
  store i32 %v3_c280, i32* %r0.global-to-local, align 4
  %v7_c284 = icmp eq i32 %v3_c280, -1
  store i1 %v7_c284, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c280, i32* @r7, align 4
  br i1 %v7_c284, label %dec_label_pc_c6d4, label %dec_label_pc_c290

dec_label_pc_c290:                                ; preds = %dec_label_pc_c274
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_c298 = call i32 @function_14194(i32 %v3_c280, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c2a0 = or i32 %v2_c298, 2048
  store i32 %v1_c2a0, i32* @r2, align 4
  %v0_c2a4 = load i32, i32* @r7, align 4
  store i32 %v0_c2a4, i32* %r0.global-to-local, align 4
  %v2_c2a8 = call i32 @function_14194(i32 %v0_c2a4, i32 4)
  store i32 %v2_c2a8, i32* %r0.global-to-local, align 4
  %v3_c2ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_c2bc = mul i32 %v3_c2ac, 24
  store i32 %v5_c2bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_c2cc = add i32 %v5_c2bc, %arg2
  store i32 %v2_c2cc, i32* %r2.global-to-local, align 4
  %v1_c2d0 = add i32 %v2_c2cc, 20
  %v2_c2d0 = inttoptr i32 %v1_c2d0 to i8*
  %v3_c2d0 = load i8, i8* %v2_c2d0, align 1
  %v4_c2d0 = zext i8 %v3_c2d0 to i32
  store i32 %v4_c2d0, i32* %r3.global-to-local, align 4
  %v2_c2d4 = icmp ugt i8 %v3_c2d0, 30
  %v7_c2d4 = icmp eq i8 %v3_c2d0, 31
  store i1 %v7_c2d4, i1* %cpsr_z.global-to-local, align 1
  %v2_c2d8 = xor i1 %v7_c2d4, true
  %v3_c2d8 = and i1 %v2_c2d4, %v2_c2d8
  %v5_c2d8 = add i32 %v2_c2cc, 16
  %v6_c2d8 = inttoptr i32 %v5_c2d8 to i32*
  %v7_c2d8 = load i32, i32* %v6_c2d8, align 4
  br i1 %v3_c2d8, label %dec_label_pc_c344, label %dec_label_pc_c2e4

dec_label_pc_c2e4:                                ; preds = %dec_label_pc_c290
  store i32 %v7_c2d8, i32* @r4, align 4
  %v0_c2e8 = call i32 @function_10a94()
  store i32 %v0_c2e8, i32* %r0.global-to-local, align 4
  %v3_c2ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_c2f8 = mul i32 %v3_c2ec, 24
  %v0_c2fc = load i32, i32* @r4, align 4
  %v2_c300 = add i32 %v5_c2f8, %arg2
  store i32 %v2_c300, i32* %r1.global-to-local, align 4
  %v1_c304 = and i32 %v0_c2fc, 65280
  store i32 %v1_c304, i32* %r3.global-to-local, align 4
  %v1_c2fc = udiv i32 %v0_c2fc, 256
  %v3_c308 = and i32 %v1_c2fc, 65280
  store i32 %v3_c308, i32* %r2.global-to-local, align 4
  %v3_c30c = mul i32 %v0_c2fc, 16777216
  store i32 %v3_c30c, i32* %ip.global-to-local, align 4
  %v1_c310 = add i32 %v2_c300, 20
  %v2_c310 = inttoptr i32 %v1_c310 to i8*
  %v3_c310 = load i8, i8* %v2_c310, align 1
  %v4_c310 = zext i8 %v3_c310 to i32
  store i32 %v4_c310, i32* %lr.global-to-local, align 4
  %v4_c314 = mul nuw nsw i32 %v1_c304, 256
  %v5_c314 = or i32 %v4_c314, %v3_c30c
  store i32 %v5_c314, i32* %ip.global-to-local, align 4
  %v2_c31c = call i32 @llvm.bswap.i32(i32 %v0_c2fc)
  %v7_c320 = lshr i32 %v0_c2e8, %v4_c310
  %v8_c320 = add i32 %v7_c320, %v2_c31c
  store i32 %v8_c320, i32* %r2.global-to-local, align 4
  %v3_c32c = mul i32 %v8_c320, 16777216
  %v1_c330 = and i32 %v8_c320, 65280
  store i32 %v1_c330, i32* %r0.global-to-local, align 4
  %v4_c334 = mul nuw nsw i32 %v1_c330, 256
  %v5_c334 = or i32 %v4_c334, %v3_c32c
  store i32 %v5_c334, i32* %r1.global-to-local, align 4
  %v2_c33c = call i32 @llvm.bswap.i32(i32 %v8_c320)
  br label %dec_label_pc_c344

dec_label_pc_c344:                                ; preds = %dec_label_pc_c290, %dec_label_pc_c2e4
  %storemerge25 = phi i32 [ %v2_c33c, %dec_label_pc_c2e4 ], [ %v7_c2d8, %dec_label_pc_c290 ]
  store i32 %v3_c1fc, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c350, label %dec_label_pc_c464, label %dec_label_pc_c358

dec_label_pc_c358:                                ; preds = %dec_label_pc_c344
  store i32 %v8_c248, i32* %ip.global-to-local, align 4
  store i32 %v5_c364, i32* %r3.global-to-local, align 4
  store i32 %v3_c36893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c374

dec_label_pc_c374:                                ; preds = %dec_label_pc_c464, %dec_label_pc_c358
  %stack_var_-57.0 = phi i8 [ %v1_c46c, %dec_label_pc_c464 ], [ %v1_c36c, %dec_label_pc_c358 ]
  %storemerge = phi i8 [ %v1_c464, %dec_label_pc_c464 ], [ %v1_c370, %dec_label_pc_c358 ]
  store i32 %v2_c374, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c37c = load i32, i32* @r7, align 4
  store i32 %v0_c37c, i32* %r0.global-to-local, align 4
  %v4_c380 = call i32 @function_149dc(i32 %v0_c37c, %sockaddr* nonnull %v3_c380, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c388 = call i32 @function_14554(i32* null)
  store i32 %v2_c388, i32* %r0.global-to-local, align 4
  store i32 %v2_c388, i32* @r4, align 4
  %v9_c3e8 = icmp eq i32 %tmp32, %storemerge25
  %v4_c40c = zext i8 %storemerge to i32
  %v4_c410 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c3e8 to i32
  %v9_c3fc = icmp eq i1 %v9_c3e8, false
  %v4_c418 = mul nuw nsw i32 %v4_c410, 256
  %v5_c418 = or i32 %v4_c418, %v4_c40c
  %v9_c41c = icmp eq i32 %v5_c418, %v5_c414
  br label %dec_label_pc_c3a4

dec_label_pc_c394:                                ; preds = %.thread23, %dec_label_pc_c404, %dec_label_pc_c434, %bb75
  %v2_c394 = call i32 @function_14554(i32* null)
  %v0_c398 = load i32, i32* @r4, align 4
  %v2_c398 = sub i32 %v2_c394, %v0_c398
  store i32 %v2_c398, i32* %r0.global-to-local, align 4
  %v7_c39c = icmp eq i32 %v2_c398, 10
  store i1 %v7_c39c, i1* %cpsr_z.global-to-local, align 1
  %v8_c3a0 = icmp sgt i32 %v2_c398, 10
  br i1 %v8_c3a0, label %dec_label_pc_c448, label %dec_label_pc_c3a4

dec_label_pc_c3a4:                                ; preds = %dec_label_pc_c394, %dec_label_pc_c374
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_c3b0, i32* %lr.global-to-local, align 4
  store i32 %v2_c3b4, i32* %ip.global-to-local, align 4
  store i32 %v2_c3b8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v7_c3cc = call i32 @function_14abc(i32 %v3_c1f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_c3b0, i32 %v2_c3b4)
  store i32 %v7_c3cc, i32* %r2.global-to-local, align 4
  %v7_c3d4 = icmp eq i32 %v7_c3cc, -1
  store i1 %v7_c3d4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_c3d4, label %dec_label_pc_c45c, label %dec_label_pc_c3e0

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c3a4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c3f4 = icmp eq i32 %v7_c3cc, 40
  store i1 %v7_c3f4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_c3cc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_c3e0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c394

bb75:                                             ; preds = %dec_label_pc_c3e0
  store i1 %v9_c3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c3fc, label %dec_label_pc_c394, label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %bb75
  store i32 %v4_c408, i32* %r1.global-to-local, align 4
  store i32 %v4_c40c, i32* %ip.global-to-local, align 4
  store i32 %v4_c410, i32* %r2.global-to-local, align 4
  store i32 %v5_c414, i32* %r3.global-to-local, align 4
  store i32 %v5_c418, i32* @r5, align 4
  store i1 %v9_c41c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c41c, label %dec_label_pc_c424, label %dec_label_pc_c394

dec_label_pc_c424:                                ; preds = %dec_label_pc_c404
  store i32 %v4_c424, i32* %r2.global-to-local, align 4
  store i32 %v1_c428, i32* %r3.global-to-local, align 4
  store i1 %v2_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c42c, label %dec_label_pc_c478, label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c424
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c434, label %dec_label_pc_c394, label %dec_label_pc_c43c

dec_label_pc_c43c:                                ; preds = %dec_label_pc_c434
  %v0_c43c = load i32, i32* @r7, align 4
  store i32 %v0_c43c, i32* %r0.global-to-local, align 4
  %v1_c440 = call i32 @function_14284(i32 %v0_c43c)
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c264

dec_label_pc_c448:                                ; preds = %dec_label_pc_c394
  %v0_c448 = load i32, i32* @r7, align 4
  store i32 %v0_c448, i32* %r0.global-to-local, align 4
  %v1_c44c = call i32 @function_14284(i32 %v0_c448)
  store i32 %v1_c44c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c274

dec_label_pc_c454:                                ; preds = %dec_label_pc_c210
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v1_c458 = call i32 @function_14284(i32 %v3_c1f8)
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c45c

dec_label_pc_c45c:                                ; preds = %dec_label_pc_c3a4, %dec_label_pc_c028, %dec_label_pc_c454
  %v29_c460 = phi i32 [ %v3_c1f8, %dec_label_pc_c028 ], [ %v1_c458, %dec_label_pc_c454 ], [ 0, %dec_label_pc_c3a4 ]
  ret i32 %v29_c460

dec_label_pc_c464:                                ; preds = %dec_label_pc_c344
  %v0_c464 = call i32 @function_10a94()
  %v1_c464 = trunc i32 %v0_c464 to i8
  store i32 %v0_c464, i32* %r0.global-to-local, align 4
  %v4_c468 = sdiv i32 %v0_c464, 256
  store i32 %v4_c468, i32* %r3.global-to-local, align 4
  %v1_c46c = trunc i32 %v4_c468 to i8
  br label %dec_label_pc_c374

dec_label_pc_c478:                                ; preds = %dec_label_pc_c424
  %v3_c478 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c478, i32* @r4, align 4
  store i32 %v2_c048, i32* %r2.global-to-local, align 4
  %v3_c480 = mul i32 %v3_c478, 16
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  %v3_c484 = add i32 %v3_c480, %v2_c048
  %v4_c484 = inttoptr i32 %v3_c484 to i32*
  store i32 %storemerge25, i32* %v4_c484, align 4
  %v0_c488 = load i32, i32* @r6, align 4
  %v1_c488 = add i32 %v0_c488, 4
  %v2_c488 = inttoptr i32 %v1_c488 to i32*
  %v3_c488 = load i32, i32* %v2_c488, align 4
  store i32 %v3_c488, i32* %r0.global-to-local, align 4
  %v1_c490 = and i32 %v3_c488, 65280
  store i32 %v1_c490, i32* %r1.global-to-local, align 4
  store i32 %v2_c048, i32* %lr.global-to-local, align 4
  %v3_c498 = mul i32 %v3_c488, 16777216
  %v4_c4a0 = mul nuw nsw i32 %v1_c490, 256
  %v5_c4a0 = or i32 %v4_c4a0, %v3_c498
  store i32 %v5_c4a0, i32* %r2.global-to-local, align 4
  %v1_c4a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_c4a8 = add i32 %v1_c4a8, %v2_c048
  store i32 %v2_c4a8, i32* %ip.global-to-local, align 4
  %v2_c4ac = call i32 @llvm.bswap.i32(i32 %v3_c488)
  store i32 %v2_c4ac, i32* %r3.global-to-local, align 4
  %v2_c4b0 = add i32 %v2_c4a8, 4
  %v3_c4b0 = inttoptr i32 %v2_c4b0 to i32*
  store i32 %v2_c4ac, i32* %v3_c4b0, align 4
  %v0_c4b4 = load i32, i32* @r6, align 4
  %v1_c4b4 = add i32 %v0_c4b4, 8
  %v2_c4b4 = inttoptr i32 %v1_c4b4 to i32*
  %v3_c4b4 = load i32, i32* %v2_c4b4, align 4
  store i32 %v3_c4b4, i32* %r0.global-to-local, align 4
  %v1_c4bc = and i32 %v3_c4b4, 65280
  store i32 %v1_c4bc, i32* %r1.global-to-local, align 4
  %v3_c4c0 = mul i32 %v3_c4b4, 16777216
  %v4_c4c8 = mul nuw nsw i32 %v1_c4bc, 256
  %v5_c4c8 = or i32 %v4_c4c8, %v3_c4c0
  store i32 %v5_c4c8, i32* %r2.global-to-local, align 4
  %v2_c4d0 = call i32 @llvm.bswap.i32(i32 %v3_c4b4)
  store i32 %v2_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c4d4 = add i32 %v1_c4d4, 8
  %v3_c4d4 = inttoptr i32 %v2_c4d4 to i32*
  store i32 %v2_c4d0, i32* %v3_c4d4, align 4
  %v0_c4d8 = load i32, i32* @r6, align 4
  %v1_c4d8 = inttoptr i32 %v0_c4d8 to i32*
  %v2_c4d8 = load i32, i32* %v1_c4d8, align 4
  %v3_c4dc = udiv i32 %v2_c4d8, 65536
  store i32 %v3_c4dc, i32* %r2.global-to-local, align 4
  %v3_c4e03 = udiv i32 %v2_c4d8, 16777216
  store i32 %v3_c4e03, i32* %r1.global-to-local, align 4
  %v0_c4e4 = load i32, i32* @r5, align 4
  %v3_c4e4 = sdiv i32 %v0_c4e4, 256
  store i32 %v3_c4e4, i32* %r3.global-to-local, align 4
  %v1_c4e8 = trunc i32 %v3_c4e4 to i8
  %v2_c4e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4e8 = add i32 %v2_c4e8, 15
  %v4_c4e8 = inttoptr i32 %v3_c4e8 to i8*
  store i8 %v1_c4e8, i8* %v4_c4e8, align 1
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i8
  %v2_c4ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 13
  %v4_c4ec = inttoptr i32 %v3_c4ec to i8*
  store i8 %v1_c4ec, i8* %v4_c4ec, align 1
  %v0_c4f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c4f0 = trunc i32 %v0_c4f0 to i8
  %v2_c4f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4f0 = add i32 %v2_c4f0, 12
  %v4_c4f0 = inttoptr i32 %v3_c4f0 to i8*
  store i8 %v1_c4f0, i8* %v4_c4f0, align 1
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i8
  %v2_c4f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 14
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v0_c4f8 = load i32, i32* @sl, align 4
  store i32 %v0_c4f8, i32* %r0.global-to-local, align 4
  %v1_c4fc = call i32 @function_14d30(i32 %v0_c4f8)
  store i32 %v1_c4fc, i32* %r0.global-to-local, align 4
  store i32 %v2_c058, i32* %r1.global-to-local, align 4
  %v3_c504 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c504, i32* %r2.global-to-local, align 4
  %v2_c508 = load i32, i32* @r4, align 4
  %v5_c508 = mul i32 %v2_c508, 4
  %v6_c508 = add i32 %v5_c508, %v2_c058
  %v7_c508 = inttoptr i32 %v6_c508 to i32*
  store i32 %v1_c4fc, i32* %v7_c508, align 4
  %v0_c50c = load i32, i32* %r1.global-to-local, align 4
  %v1_c50c = load i32, i32* %r2.global-to-local, align 4
  %v4_c50c = mul i32 %v1_c50c, 4
  %v5_c50c = add i32 %v4_c50c, %v0_c50c
  %v6_c50c = inttoptr i32 %v5_c50c to i32*
  %v7_c50c = load i32, i32* %v6_c50c, align 4
  store i32 %v7_c50c, i32* @r4, align 4
  %v1_c510 = inttoptr i32 %v7_c50c to i8*
  %v2_c510 = load i8, i8* %v1_c510, align 1
  %tmp100 = urem i8 %v2_c510, 16
  %v1_c514 = zext i8 %tmp100 to i32
  %v1_c518 = or i32 %v1_c514, 64
  store i32 %v1_c518, i32* %r3.global-to-local, align 4
  %v1_c51c = trunc i32 %v1_c518 to i8
  store i8 %v1_c51c, i8* %v1_c510, align 1
  %v0_c520 = load i32, i32* @r4, align 4
  %v1_c520 = inttoptr i32 %v0_c520 to i8*
  %v2_c520 = load i8, i8* %v1_c520, align 1
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v1_c52c = and i8 %v2_c520, -16
  %v1_c534 = or i8 %v1_c52c, 5
  store i32 %v5_c538, i32* %r0.global-to-local, align 4
  %v0_c53c = load i32, i32* @sl, align 4
  %v3_c53c = mul i32 %v0_c53c, 65536
  store i32 %v3_c53c, i32* %r2.global-to-local, align 4
  store i32 %v1_c0d8, i32* %lr.global-to-local, align 4
  store i8 %v1_c534, i8* %v1_c520, align 1
  store i32 %v4_c548, i32* %r1.global-to-local, align 4
  %v0_c54c = load i32, i32* %r2.global-to-local, align 4
  %v3_c54c = udiv i32 %v0_c54c, 65536
  %v1_c550 = urem i32 %v3_c54c, 256
  store i32 %v1_c550, i32* %r3.global-to-local, align 4
  %v3_c554 = udiv i32 %v0_c54c, 16777216
  store i32 %v3_c554, i32* %r2.global-to-local, align 4
  %v2_c558 = load i32, i32* @r4, align 4
  %v3_c558 = add i32 %v2_c558, 1
  %v4_c558 = inttoptr i32 %v3_c558 to i8*
  store i8 %v1_c558, i8* %v4_c558, align 1
  %v0_c55c = load i32, i32* %r2.global-to-local, align 4
  %v1_c55c = load i32, i32* %r3.global-to-local, align 4
  %v4_c55c = mul i32 %v1_c55c, 256
  %v5_c55c = or i32 %v4_c55c, %v0_c55c
  store i32 %v5_c55c, i32* %r2.global-to-local, align 4
  %v1_c560 = trunc i32 %v0_c55c to i8
  %v2_c560 = load i32, i32* @r4, align 4
  %v3_c560 = add i32 %v2_c560, 2
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %lr.global-to-local, align 4
  %v2_c564 = icmp eq i32 %v0_c564, 0
  store i1 %v2_c564, i1* %cpsr_z.global-to-local, align 1
  %v0_c568 = load i32, i32* %r2.global-to-local, align 4
  %v3_c568 = sdiv i32 %v0_c568, 256
  store i32 %v3_c568, i32* %r3.global-to-local, align 4
  store i32 %v4_c56c, i32* %r2.global-to-local, align 4
  %v1_c570 = trunc i32 %v3_c568 to i8
  %v2_c570 = load i32, i32* @r4, align 4
  %v3_c570 = add i32 %v2_c570, 3
  %v4_c570 = inttoptr i32 %v3_c570 to i8*
  store i8 %v1_c570, i8* %v4_c570, align 1
  %v0_c574 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c574, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_c478
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_c478, %bb76
  %v0_c578 = load i32, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v0_c578 to i8
  %v2_c578 = load i32, i32* @r4, align 4
  %v3_c578 = add i32 %v2_c578, 8
  %v4_c578 = inttoptr i32 %v3_c578 to i8*
  store i8 %v1_c578, i8* %v4_c578, align 1
  %v0_c57c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c57c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_c57c = load i32, i32* %r3.global-to-local, align 4
  %v2_c57c = trunc i32 %v1_c57c to i8
  %v3_c57c = load i32, i32* @r4, align 4
  %v4_c57c = add i32 %v3_c57c, 6
  %v5_c57c = inttoptr i32 %v4_c57c to i8*
  store i8 %v2_c57c, i8* %v5_c57c, align 1
  %v0_c580.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c580.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c588 = load i32, i32* @r4, align 4
  %v3_c588 = add i32 %v2_c588, 9
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 6, i8* %v4_c588, align 1
  %v0_c58c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c58c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_c58c = load i32, i32* %r2.global-to-local, align 4
  %v2_c58c = trunc i32 %v1_c58c to i8
  %v3_c58c = load i32, i32* @r4, align 4
  %v4_c58c = add i32 %v3_c58c, 7
  %v5_c58c = inttoptr i32 %v4_c58c to i8*
  store i8 %v2_c58c, i8* %v5_c58c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_c594 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %r0.global-to-local, align 4
  %v3_c598 = sdiv i32 %v0_c598, 256
  store i32 %v3_c598, i32* %ip.global-to-local, align 4
  %v1_c59c = load i32, i32* @r4, align 4
  %v2_c59c = add i32 %v1_c59c, 12
  %v3_c59c = inttoptr i32 %v2_c59c to i32*
  store i32 %v2_c594, i32* %v3_c59c, align 4
  %v0_c5a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5a0 = trunc i32 %v0_c5a0 to i8
  %v2_c5a0 = load i32, i32* @r4, align 4
  %v3_c5a0 = add i32 %v2_c5a0, 5
  %v4_c5a0 = inttoptr i32 %v3_c5a0 to i8*
  store i8 %v1_c5a0, i8* %v4_c5a0, align 1
  %v3_c5a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a4, i32* %r2.global-to-local, align 4
  store i32 %v2_c048, i32* %ip.global-to-local, align 4
  %v4_c5ac = mul i32 %v3_c5a4, 16
  %v5_c5ac = add i32 %v4_c5ac, %v2_c048
  %v6_c5ac = inttoptr i32 %v5_c5ac to i32*
  %v7_c5ac = load i32, i32* %v6_c5ac, align 4
  store i32 %v7_c5ac, i32* %r3.global-to-local, align 4
  %v0_c5b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  %v2_c5b0 = load i32, i32* @r4, align 4
  %v3_c5b0 = add i32 %v2_c5b0, 4
  %v4_c5b0 = inttoptr i32 %v3_c5b0 to i8*
  store i8 %v1_c5b0, i8* %v4_c5b0, align 1
  %v0_c5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b4 = load i32, i32* @r4, align 4
  %v2_c5b4 = add i32 %v1_c5b4, 16
  %v3_c5b4 = inttoptr i32 %v2_c5b4 to i32*
  store i32 %v0_c5b4, i32* %v3_c5b4, align 4
  %v0_c5b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c5b8 = mul i32 %v0_c5b8, 16
  %v1_c5bc = load i32, i32* %ip.global-to-local, align 4
  %v2_c5bc = add i32 %v1_c5bc, %v3_c5b8
  store i32 %v2_c5bc, i32* %r2.global-to-local, align 4
  %v1_c5c0 = add i32 %v2_c5bc, 13
  %v2_c5c0 = inttoptr i32 %v1_c5c0 to i8*
  %v3_c5c0 = load i8, i8* %v2_c5c0, align 1
  %v4_c5c0 = zext i8 %v3_c5c0 to i32
  store i32 %v4_c5c0, i32* %r1.global-to-local, align 4
  %v1_c5c4 = add i32 %v2_c5bc, 12
  %v2_c5c4 = inttoptr i32 %v1_c5c4 to i8*
  %v3_c5c4 = load i8, i8* %v2_c5c4, align 1
  %v4_c5c4 = zext i8 %v3_c5c4 to i32
  %v4_c5c8 = mul nuw nsw i32 %v4_c5c0, 256
  %v5_c5c8 = or i32 %v4_c5c4, %v4_c5c8
  store i32 %v5_c5c8, i32* %r3.global-to-local, align 4
  %v2_c5cc = load i32, i32* @r4, align 4
  %v3_c5cc = add i32 %v2_c5cc, 20
  %v4_c5cc = inttoptr i32 %v3_c5cc to i8*
  store i8 %v3_c5c4, i8* %v4_c5cc, align 1
  %v0_c5d0 = load i32, i32* @r4, align 4
  %v1_c5d0 = add i32 %v0_c5d0, 20
  store i32 %v1_c5d0, i32* @r6, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c5d4 = sdiv i32 %v0_c5d4, 256
  store i32 %v3_c5d4, i32* %r3.global-to-local, align 4
  %v1_c5d8 = trunc i32 %v3_c5d4 to i8
  %v3_c5d8 = add i32 %v0_c5d0, 21
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 %v1_c5d8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* @r6, align 4
  %v1_c5dc = add i32 %v0_c5dc, 13
  %v2_c5dc = inttoptr i32 %v1_c5dc to i8*
  %v3_c5dc = load i8, i8* %v2_c5dc, align 1
  %v4_c5dc = zext i8 %v3_c5dc to i32
  store i32 %v4_c5dc, i32* %r3.global-to-local, align 4
  %v0_c5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e0 = add i32 %v0_c5e0, 8
  %v2_c5e0 = inttoptr i32 %v1_c5e0 to i32*
  %v3_c5e0 = load i32, i32* %v2_c5e0, align 4
  store i32 %v3_c5e0, i32* %r1.global-to-local, align 4
  %v1_c5e4 = or i32 %v4_c5dc, 1
  store i32 %v1_c5e4, i32* %r3.global-to-local, align 4
  %v1_c5e8 = add i32 %v0_c5e0, 15
  %v2_c5e8 = inttoptr i32 %v1_c5e8 to i8*
  %v3_c5e8 = load i8, i8* %v2_c5e8, align 1
  %v4_c5e8 = zext i8 %v3_c5e8 to i32
  store i32 %v4_c5e8, i32* %ip.global-to-local, align 4
  %v1_c5ec = add i32 %v0_c5e0, 14
  %v2_c5ec = inttoptr i32 %v1_c5ec to i8*
  %v3_c5ec = load i8, i8* %v2_c5ec, align 1
  %v4_c5ec = zext i8 %v3_c5ec to i32
  store i32 %v4_c5ec, i32* %r0.global-to-local, align 4
  %v2_c5f0 = add i32 %v0_c5dc, 4
  %v3_c5f0 = inttoptr i32 %v2_c5f0 to i32*
  store i32 %v3_c5e0, i32* %v3_c5f0, align 4
  %v0_c5f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 4
  %v2_c5f4 = inttoptr i32 %v1_c5f4 to i32*
  %v3_c5f4 = load i32, i32* %v2_c5f4, align 4
  store i32 %v3_c5f4, i32* %lr.global-to-local, align 4
  %v0_c5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r6, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 13
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v0_c5fc = load i32, i32* @r6, align 4
  %v1_c5fc = add i32 %v0_c5fc, 12
  %v2_c5fc = inttoptr i32 %v1_c5fc to i8*
  %v3_c5fc = load i8, i8* %v2_c5fc, align 1
  %v4_c5fc = zext i8 %v3_c5fc to i32
  store i32 %v4_c5fc, i32* %r2.global-to-local, align 4
  %v1_c600 = add i32 %v0_c5fc, 13
  %v2_c600 = inttoptr i32 %v1_c600 to i8*
  %v3_c600 = load i8, i8* %v2_c600, align 1
  %v4_c600 = zext i8 %v3_c600 to i32
  %v0_c604 = load i32, i32* %r0.global-to-local, align 4
  %v1_c604 = load i32, i32* %ip.global-to-local, align 4
  %v4_c604 = mul i32 %v1_c604, 256
  %v5_c604 = or i32 %v4_c604, %v0_c604
  store i32 %v5_c604, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_c5fc, 16
  %v1_c608 = zext i8 %tmp101 to i32
  %v3_c60c = sdiv i32 %v5_c604, 256
  store i32 %v3_c60c, i32* %r1.global-to-local, align 4
  %v1_c610 = or i32 %v1_c608, 128
  store i32 %v1_c610, i32* %r2.global-to-local, align 4
  %v1_c614 = or i32 %v4_c600, 16
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v3_c60c to i8
  %v3_c618 = add i32 %v0_c5fc, 3
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 %v1_c618, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %lr.global-to-local, align 4
  %v1_c61c = load i32, i32* @r6, align 4
  %v2_c61c = add i32 %v1_c61c, 8
  %v3_c61c = inttoptr i32 %v2_c61c to i32*
  store i32 %v0_c61c, i32* %v3_c61c, align 4
  %v0_c620 = load i32, i32* %r2.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* @r6, align 4
  %v3_c620 = add i32 %v2_c620, 12
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = load i32, i32* %r3.global-to-local, align 4
  %v1_c624 = trunc i32 %v0_c624 to i8
  %v2_c624 = load i32, i32* @r6, align 4
  %v3_c624 = add i32 %v2_c624, 13
  %v4_c624 = inttoptr i32 %v3_c624 to i8*
  store i8 %v1_c624, i8* %v4_c624, align 1
  %v0_c628 = load i32, i32* %r0.global-to-local, align 4
  %v1_c628 = trunc i32 %v0_c628 to i8
  %v2_c628 = load i32, i32* @r6, align 4
  %v3_c628 = add i32 %v2_c628, 2
  %v4_c628 = inttoptr i32 %v3_c628 to i8*
  store i8 %v1_c628, i8* %v4_c628, align 1
  %v0_c62c = call i32 @function_10a94()
  %v1_c62c = trunc i32 %v0_c62c to i8
  store i32 %v0_c62c, i32* %r0.global-to-local, align 4
  store i32 %v1_c110, i32* %lr.global-to-local, align 4
  %v0_c634 = load i32, i32* @r6, align 4
  %v1_c634 = add i32 %v0_c634, 13
  %v2_c634 = inttoptr i32 %v1_c634 to i8*
  %v3_c634 = load i8, i8* %v2_c634, align 1
  %v4_c634 = zext i8 %v3_c634 to i32
  store i32 %v1_c638, i32* %r2.global-to-local, align 4
  %v1_c63c = and i32 %v4_c634, 223
  %v5_c640 = or i32 %v1_c63c, %v4_c640
  store i32 %v5_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = trunc i32 %v5_c640 to i8
  store i8 %v1_c644, i8* %v2_c634, align 1
  store i32 %v1_c130, i32* %r1.global-to-local, align 4
  %v0_c64c = load i32, i32* @r6, align 4
  %v1_c64c = add i32 %v0_c64c, 13
  %v2_c64c = inttoptr i32 %v1_c64c to i8*
  %v3_c64c = load i8, i8* %v2_c64c, align 1
  %v4_c64c = zext i8 %v3_c64c to i32
  store i32 %v1_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = and i32 %v4_c64c, 239
  %v5_c658 = or i32 %v1_c654, %v4_c658
  store i32 %v5_c658, i32* %r2.global-to-local, align 4
  %v1_c65c = trunc i32 %v5_c658 to i8
  store i8 %v1_c65c, i8* %v2_c64c, align 1
  store i32 %v1_c150, i32* %ip.global-to-local, align 4
  %v0_c664 = load i32, i32* @r6, align 4
  %v1_c664 = add i32 %v0_c664, 13
  %v2_c664 = inttoptr i32 %v1_c664 to i8*
  %v3_c664 = load i8, i8* %v2_c664, align 1
  %v4_c664 = zext i8 %v3_c664 to i32
  store i32 %v1_c668, i32* %r2.global-to-local, align 4
  %v1_c66c = and i32 %v4_c664, 247
  %v5_c670 = or i32 %v1_c66c, %v4_c670
  store i32 %v5_c670, i32* %r3.global-to-local, align 4
  %v1_c674 = trunc i32 %v5_c670 to i8
  store i8 %v1_c674, i8* %v2_c664, align 1
  %v0_c67c = load i32, i32* @r6, align 4
  %v1_c67c = add i32 %v0_c67c, 13
  %v2_c67c = inttoptr i32 %v1_c67c to i8*
  %v3_c67c = load i8, i8* %v2_c67c, align 1
  %v4_c67c = zext i8 %v3_c67c to i32
  store i32 %v1_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = and i32 %v4_c67c, 251
  %v5_c688 = or i32 %v1_c684, %v4_c688
  store i32 %v5_c688, i32* %r2.global-to-local, align 4
  %v1_c68c = trunc i32 %v5_c688 to i8
  store i8 %v1_c68c, i8* %v2_c67c, align 1
  store i32 %v1_c190, i32* %r1.global-to-local, align 4
  %v0_c694 = load i32, i32* @r6, align 4
  %v1_c694 = add i32 %v0_c694, 13
  %v2_c694 = inttoptr i32 %v1_c694 to i8*
  %v3_c694 = load i8, i8* %v2_c694, align 1
  %v4_c694 = zext i8 %v3_c694 to i32
  store i32 %v1_c698, i32* %r2.global-to-local, align 4
  %v1_c69c = and i32 %v4_c694, 253
  %v4_c6a0 = or i32 %v1_c69c, %v3_c6a0
  store i32 %v4_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = trunc i32 %v4_c6a0 to i8
  store i8 %v1_c6a4, i8* %v2_c694, align 1
  %v0_c6a8 = load i32, i32* @r6, align 4
  %v1_c6a8 = add i32 %v0_c6a8, 13
  %v2_c6a8 = inttoptr i32 %v1_c6a8 to i8*
  %v3_c6a8 = load i8, i8* %v2_c6a8, align 1
  %v4_c6a8 = zext i8 %v3_c6a8 to i32
  %v0_c6ac = load i32, i32* @r8, align 4
  %v1_c6ac = urem i32 %v0_c6ac, 2
  %v1_c6b0 = and i32 %v4_c6a8, 254
  store i32 %v1_c6b0, i32* %r2.global-to-local, align 4
  %v4_c6b427 = udiv i32 %v0_c62c, 256
  %v2_c6b8 = or i32 %v1_c6b0, %v1_c6ac
  store i32 %v2_c6b8, i32* %r3.global-to-local, align 4
  %v1_c6bc = trunc i32 %v4_c6b427 to i8
  %v3_c6bc = add i32 %v0_c6a8, 15
  %v4_c6bc = inttoptr i32 %v3_c6bc to i8*
  store i8 %v1_c6bc, i8* %v4_c6bc, align 1
  %v3_c6c0 = load i32, i32* @r6, align 4
  %v4_c6c0 = add i32 %v3_c6c0, 14
  %v5_c6c0 = inttoptr i32 %v4_c6c0 to i8*
  store i8 %v1_c62c, i8* %v5_c6c0, align 1
  %v0_c6c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6c4 = trunc i32 %v0_c6c4 to i8
  %v2_c6c4 = load i32, i32* @r6, align 4
  %v3_c6c4 = add i32 %v2_c6c4, 13
  %v4_c6c4 = inttoptr i32 %v3_c6c4 to i8*
  store i8 %v1_c6c4, i8* %v4_c6c4, align 1
  %v0_c6c8 = load i32, i32* @r4, align 4
  %v1_c6c8 = add i32 %v0_c6c8, 40
  store i32 %v1_c6c8, i32* %r0.global-to-local, align 4
  %v0_c6cc = load i32, i32* @sb, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v1_c6d0 = inttoptr i32 %v1_c6c8 to i8*
  %v2_c6d0 = call i32 @function_10c70(i8* %v1_c6d0)
  store i32 %v2_c6d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6d4

dec_label_pc_c6d4:                                ; preds = %dec_label_pc_c274, %bb81
  %v3_c6d4 = load i32, i32* %stack_var_-40, align 4
  %v1_c6d8 = add i32 %v3_c6d4, 1
  store i32 %v1_c6d8, i32* %r3.global-to-local, align 4
  %v1_c6dc = load i32, i32* @fp, align 4
  %v9_c6dc = icmp eq i32 %v1_c6d8, %v1_c6dc
  store i1 %v9_c6dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6d8, i32* %stack_var_-40, align 4
  %v5_c6e4 = icmp slt i32 %v1_c6d8, %v1_c6dc
  br i1 %v5_c6e4, label %dec_label_pc_c264, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c6d4, %.thread18
  %v0_c6f012 = phi i32 [ %v0_c238, %.thread18 ], [ %v1_c6dc, %dec_label_pc_c6d4 ]
  %v0_c6e8 = load i32, i32* @sb, align 4
  %v1_c6e8 = add i32 %v0_c6e8, 40
  store i32 %v1_c6e8, i32* @sl, align 4
  %v1_c6ec = add i32 %v0_c6e8, 20
  store i32 %v1_c6ec, i32* @r7, align 4
  %v2_c73c = icmp eq i32 %v1_c1e8, 0
  %v6_c71c = inttoptr i32 %v2_c058 to i32*
  %v9_c724 = icmp eq i32 %v3_c240, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  br label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c74c, %dec_label_pc_c6e8
  %v0_c6f0 = phi i32 [ %v1_c82c, %dec_label_pc_c74c ], [ %v0_c6f012, %dec_label_pc_c6e8 ]
  %v2_c6f0 = icmp eq i32 %v0_c6f0, 0
  store i1 %v2_c6f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_c6f0, 1
  br label %dec_label_pc_c6f8

dec_label_pc_c6f8:                                ; preds = %dec_label_pc_c6f8, %dec_label_pc_c6f0
  br i1 %tmp82, label %dec_label_pc_c6f8, label %dec_label_pc_c6fc

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c6f8
  %v0_c6fc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_c6fc, 256
  %v1_c704 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_c6fc, 256
  %v4_c708 = urem i32 %tmp84, 256
  %v5_c708 = or i32 %v4_c708, %v1_c704
  store i32 %v5_c708, i32* @r8, align 4
  store i32 %v2_c058, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v7_c71c = load i32, i32* %v6_c71c, align 4
  store i32 %v7_c71c, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c724, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c730 = add i32 %v7_c71c, 20
  store i32 %v1_c730, i32* @r5, align 4
  br i1 %v9_c724, label %dec_label_pc_c858, label %dec_label_pc_c738

dec_label_pc_c738:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c6fc
  %v0_c740 = phi i32 [ %v7_c844, %dec_label_pc_c838 ], [ %v7_c71c, %dec_label_pc_c6fc ]
  store i32 %v1_c1e8, i32* %lr.global-to-local, align 4
  store i1 %v2_c73c, i1* %cpsr_z.global-to-local, align 1
  %v1_c740 = add i32 %v0_c740, 40
  store i32 %v1_c740, i32* %r0.global-to-local, align 4
  %v0_c744 = load i32, i32* @sb, align 4
  store i32 %v0_c744, i32* @r1, align 4
  br i1 %v2_c73c, label %dec_label_pc_c74c, label %dec_label_pc_c87c

dec_label_pc_c74c:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c858, %dec_label_pc_c87c
  %v2_c74c = phi i32 [ %v0_c740, %dec_label_pc_c738 ], [ %v0_c870, %dec_label_pc_c858 ], [ %v2_c74c.pre, %dec_label_pc_c87c ]
  %v0_c74c = load i32, i32* @r6, align 4
  %v1_c74c = trunc i32 %v0_c74c to i8
  %v3_c74c = add i32 %v2_c74c, 10
  %v4_c74c = inttoptr i32 %v3_c74c to i8*
  store i8 %v1_c74c, i8* %v4_c74c, align 1
  %v0_c750 = load i32, i32* @r6, align 4
  %v1_c750 = trunc i32 %v0_c750 to i8
  %v2_c750 = load i32, i32* @r4, align 4
  %v3_c750 = add i32 %v2_c750, 11
  %v4_c750 = inttoptr i32 %v3_c750 to i8*
  store i8 %v1_c750, i8* %v4_c750, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c758 = load i32, i32* @r4, align 4
  store i32 %v0_c758, i32* @r0, align 4
  %v2_c75c = call i32 @function_f008(i32 %v0_c758, i32 20)
  %v3_c75c = trunc i32 %v2_c75c to i8
  store i32 %v2_c75c, i32* %r0.global-to-local, align 4
  %v3_c760 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c048, i32* %r2.global-to-local, align 4
  %v3_c768 = mul i32 %v3_c760, 16
  %v2_c76c = add i32 %v3_c768, %v2_c048
  store i32 %v2_c76c, i32* %r1.global-to-local, align 4
  %v1_c770 = add i32 %v2_c76c, 4
  %v2_c770 = inttoptr i32 %v1_c770 to i32*
  %v3_c770 = load i32, i32* %v2_c770, align 4
  %v3_c774 = mul i32 %v3_c770, 65536
  store i32 %v3_c774, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_c770, 256
  %v1_c77c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_c770, 256
  %v4_c780 = urem i32 %tmp86, 256
  %v5_c780 = or i32 %v4_c780, %v1_c77c
  store i32 %v5_c780, i32* %r2.global-to-local, align 4
  %v1_c784 = add i32 %v3_c770, 1
  store i32 %v1_c784, i32* %r3.global-to-local, align 4
  store i32 %v1_c784, i32* %v2_c770, align 4
  %v0_c78c = load i32, i32* %r2.global-to-local, align 4
  %v1_c78c = load i32, i32* @r5, align 4
  %v2_c78c = add i32 %v1_c78c, 4
  %v3_c78c = inttoptr i32 %v2_c78c to i32*
  store i32 %v0_c78c, i32* %v3_c78c, align 4
  %v0_c790 = load i32, i32* %r1.global-to-local, align 4
  %v1_c790 = add i32 %v0_c790, 8
  %v2_c790 = inttoptr i32 %v1_c790 to i32*
  %v3_c790 = load i32, i32* %v2_c790, align 4
  %tmp87 = mul i32 %v3_c790, 256
  %v1_c79c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_c790, 256
  %v4_c7a0 = urem i32 %tmp88, 256
  %v5_c7a0 = or i32 %v4_c7a0, %v1_c79c
  store i32 %v5_c7a0, i32* %r2.global-to-local, align 4
  %v4_c7a428 = udiv i32 %v2_c75c, 256
  %v1_c7a8 = trunc i32 %v4_c7a428 to i8
  %v2_c7a8 = load i32, i32* @r4, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 11
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v3_c7ac = load i32, i32* @r4, align 4
  %v4_c7ac = add i32 %v3_c7ac, 10
  %v5_c7ac = inttoptr i32 %v4_c7ac to i8*
  store i8 %v3_c75c, i8* %v5_c7ac, align 1
  %v0_c7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 8
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7b0, i32* %v3_c7b0, align 4
  %v0_c7b4 = load i32, i32* @r5, align 4
  store i32 %v0_c7b4, i32* @r1, align 4
  %v0_c7b8 = load i32, i32* @r8, align 4
  store i32 %v0_c7b8, i32* %r2.global-to-local, align 4
  %v0_c7bc = load i32, i32* @r7, align 4
  store i32 %v0_c7bc, i32* %r3.global-to-local, align 4
  %v0_c7c0 = load i32, i32* @r4, align 4
  store i32 %v0_c7c0, i32* %r0.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r6, align 4
  %v1_c7c4 = trunc i32 %v0_c7c4 to i8
  %v3_c7c4 = add i32 %v0_c7b4, 16
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i8*
  store i8 %v1_c7c4, i8* %v4_c7c4, align 1
  %v0_c7c8 = load i32, i32* @r6, align 4
  %v1_c7c8 = trunc i32 %v0_c7c8 to i8
  %v2_c7c8 = load i32, i32* @r5, align 4
  %v3_c7c8 = add i32 %v2_c7c8, 17
  %v4_c7c8 = inttoptr i32 %v3_c7c8 to i8*
  store i8 %v1_c7c8, i8* %v4_c7c8, align 1
  %v4_c7cc = call i32 @function_f064(i32 %v0_c7c0, i32 %v0_c7b4, i32 %v0_c7b8, i32 %v0_c7bc)
  %v5_c7cc = trunc i32 %v4_c7cc to i8
  store i32 %v4_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d029 = udiv i32 %v4_c7cc, 256
  %v1_c7d4 = trunc i32 %v4_c7d029 to i8
  %v2_c7d4 = load i32, i32* @r5, align 4
  %v3_c7d4 = add i32 %v2_c7d4, 17
  %v4_c7d4 = inttoptr i32 %v3_c7d4 to i8*
  store i8 %v1_c7d4, i8* %v4_c7d4, align 1
  %v3_c7d8 = load i32, i32* @r5, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 16
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i8*
  store i8 %v5_c7cc, i8* %v5_c7d8, align 1
  %v3_c7dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  %v1_c7e0 = add i32 %v0_c7e0, 20
  %v2_c7e0 = inttoptr i32 %v1_c7e0 to i32*
  %v3_c7e0 = load i32, i32* %v2_c7e0, align 4
  %v5_c7e8 = mul i32 %v3_c7dc, 24
  %v3_c7f0 = udiv i32 %v3_c7e0, 65536
  store i32 %v3_c7f0, i32* %r2.global-to-local, align 4
  %v2_c7f4 = add i32 %v5_c7e8, %arg2
  store i32 %v2_c7f4, i32* %ip.global-to-local, align 4
  %v3_c7f84 = udiv i32 %v3_c7e0, 16777216
  %v1_c7fc = trunc i32 %v3_c7f84 to i8
  %v3_c7fc = add i32 %v2_c7f4, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* %r2.global-to-local, align 4
  %v1_c800 = trunc i32 %v0_c800 to i8
  %v2_c800 = load i32, i32* %ip.global-to-local, align 4
  %v3_c800 = add i32 %v2_c800, 2
  %v4_c800 = inttoptr i32 %v3_c800 to i8*
  store i8 %v1_c800, i8* %v4_c800, align 1
  %v0_c804 = load i32, i32* @r4, align 4
  store i32 %v0_c804, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c1f8, i32* %r0.global-to-local, align 4
  %v0_c810 = load i32, i32* @sl, align 4
  store i32 %v0_c810, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c818 = load i32, i32* %ip.global-to-local, align 4
  %v6_c820 = inttoptr i32 %v0_c804 to i32*
  %v7_c820 = call i32 @function_14b1c(i32 %v3_c1f8, i32* %v6_c820, i32 %v0_c810, i32 16384, i32 %v0_c818, i32 16)
  %v3_c824 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c824, i32* %r3.global-to-local, align 4
  %v1_c828 = add i32 %v3_c824, 1
  store i32 %v1_c828, i32* %r0.global-to-local, align 4
  %v1_c82c = load i32, i32* @fp, align 4
  %v9_c82c = icmp eq i32 %v1_c828, %v1_c82c
  store i1 %v9_c82c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c828, i32* %stack_var_-40, align 4
  %v6_c834 = icmp slt i32 %v1_c828, %v1_c82c
  br i1 %v6_c834, label %dec_label_pc_c838, label %dec_label_pc_c6f0

dec_label_pc_c838:                                ; preds = %dec_label_pc_c74c
  store i32 %v2_c058, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.26 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c240, i32* %ip.global-to-local, align 4
  %v4_c844 = mul i32 %v1_c828, 4
  %v5_c844 = add i32 %v4_c844, %v2_c058
  %v6_c844 = inttoptr i32 %v5_c844 to i32*
  %v7_c844 = load i32, i32* %v6_c844, align 4
  store i32 %v7_c844, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c724, i1* %cpsr_z.global-to-local, align 1
  %v1_c850 = add i32 %v7_c844, 20
  store i32 %v1_c850, i32* @r5, align 4
  br i1 %v9_c724, label %dec_label_pc_c858, label %dec_label_pc_c738

dec_label_pc_c858:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c6fc
  %v0_c858 = call i32 @function_10a94()
  %v1_c858 = trunc i32 %v0_c858 to i8
  store i32 %v1_c1e8, i32* %lr.global-to-local, align 4
  %v4_c860 = sdiv i32 %v0_c858, 256
  store i32 %v4_c860, i32* %r3.global-to-local, align 4
  store i1 %v2_c73c, i1* %cpsr_z.global-to-local, align 1
  %v3_c868 = load i32, i32* @r4, align 4
  %v4_c868 = add i32 %v3_c868, 4
  %v5_c868 = inttoptr i32 %v4_c868 to i8*
  store i8 %v1_c858, i8* %v5_c868, align 1
  %v0_c86c = load i32, i32* %r3.global-to-local, align 4
  %v1_c86c = trunc i32 %v0_c86c to i8
  %v2_c86c = load i32, i32* @r4, align 4
  %v3_c86c = add i32 %v2_c86c, 5
  %v4_c86c = inttoptr i32 %v3_c86c to i8*
  store i8 %v1_c86c, i8* %v4_c86c, align 1
  %v0_c870 = load i32, i32* @r4, align 4
  %v1_c870 = add i32 %v0_c870, 40
  store i32 %v1_c870, i32* %r0.global-to-local, align 4
  %v0_c874 = load i32, i32* @sb, align 4
  store i32 %v0_c874, i32* @r1, align 4
  %v0_c878 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c878, label %dec_label_pc_c74c, label %dec_label_pc_c87c

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c858
  %v0_c87c = phi i32 [ %v1_c740, %dec_label_pc_c738 ], [ %v1_c870, %dec_label_pc_c858 ]
  %v1_c87c = inttoptr i32 %v0_c87c to i8*
  %v2_c87c = call i32 @function_10c70(i8* %v1_c87c)
  store i32 %v2_c87c, i32* %r0.global-to-local, align 4
  %v2_c74c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c74c

; uselistorder directives
  uselistorder i32 %v0_c870, { 1, 0 }
  uselistorder i32 %v7_c844, { 1, 2, 0 }
  uselistorder i32 %v1_c82c, { 1, 2, 0 }
  uselistorder i32 %v1_c828, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c7cc, { 0, 2, 1 }
  uselistorder i32 %v0_c7b4, { 1, 0, 2 }
  uselistorder i32 %v3_c790, { 1, 0 }
  uselistorder i32 %v3_c770, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c75c, { 0, 2, 1 }
  uselistorder i32 %v0_c740, { 1, 0 }
  uselistorder i32 %v0_c6fc, { 1, 0 }
  uselistorder i32 %v0_c6f0, { 1, 0 }
  uselistorder i1 %v9_c724, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c62c, { 0, 2, 1 }
  uselistorder i32 %v3_c60c, { 1, 0 }
  uselistorder i32 %v0_c5e0, { 1, 0, 2 }
  uselistorder i32 %v3_c5d4, { 1, 0 }
  uselistorder i32 %v3_c568, { 1, 0 }
  uselistorder i32 %v0_c55c, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v2_c4d0, { 1, 0 }
  uselistorder i32 %v3_c4b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c4ac, { 1, 0 }
  uselistorder i32 %v3_c488, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c480, { 1, 0 }
  uselistorder i32 %v4_c468, { 1, 0 }
  uselistorder i32 %v0_c464, { 0, 2, 1 }
  uselistorder i1 %v7_c3d4, { 1, 0 }
  uselistorder i32 %v7_c3cc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_c418, { 1, 0 }
  uselistorder i1 %v9_c3fc, { 1, 0 }
  uselistorder i32 %v4_c410, { 1, 0 }
  uselistorder i32 %v4_c40c, { 1, 0 }
  uselistorder i32 %v8_c320, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c30c, { 1, 0 }
  uselistorder i32 %v0_c2fc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_c284, { 1, 0 }
  uselistorder i32 %v3_c280, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c698, { 1, 0 }
  uselistorder i32 %v1_c680, { 1, 0 }
  uselistorder i32 %v1_c668, { 1, 0 }
  uselistorder i32 %v1_c650, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v5_c414, { 1, 0 }
  uselistorder i32 %v3_c36893, { 1, 0 }
  uselistorder i1 %v2_c42c, { 1, 0 }
  uselistorder i32 %v1_c428, { 1, 0 }
  uselistorder i32 %v4_c424, { 2, 0, 1 }
  uselistorder i32 %v4_c408, { 1, 0 }
  uselistorder i32 %v8_c24c, { 2, 1, 0 }
  uselistorder i32 %v8_c248, { 1, 2, 0 }
  uselistorder i32 %v3_c240, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_c23c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c230, { 1, 0 }
  uselistorder i1 %v7_c200, { 1, 0 }
  uselistorder i32 %v3_c1fc, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c1f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_c1e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_c190, { 1, 0 }
  uselistorder i32 %v1_c150, { 1, 0 }
  uselistorder i32 %v1_c130, { 1, 0 }
  uselistorder i32 %v1_c110, { 1, 0 }
  uselistorder i32 %v1_c0d8, { 1, 0 }
  uselistorder i32 %v2_c058, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_c048, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c02c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 22, 21, 23, 25, 24, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 16, 12, 13, 14, 15, 32, 33, 34, 31, 35, 36, 37, 38, 40, 39, 42, 41, 45, 43, 46, 47, 44, 48, 50, 49, 51, 52, 54, 53, 58, 55, 56, 57, 59, 61, 60, 62, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c87c, { 1, 0 }
  uselistorder label %dec_label_pc_c74c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c6d4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_c45c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c394, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c344, { 1, 0 }
}

define i32 @function_c888(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c888:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c88c = urem i32 %arg1, 256
  store i32 %v1_c88c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c8a4 = urem i32 %arg3, 256
  store i32 %v1_c8a4, i32* @r4, align 4
  %v2_c8a8 = call i32 @function_14e84(i32 %v1_c88c, i32 4)
  %v0_c8ac = load i32, i32* @r5, align 4
  store i32 %v0_c8ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c8bc = load i32, i32* @r4, align 4
  %v5_c8c0 = inttoptr i32 %v0_c8ac to i32*
  %v6_c8c0 = call i32 @function_a4e8(i32 %v0_c8bc, i32* %v5_c8c0, i32 2, i32 0)
  %v1_c8cc = urem i32 %v6_c8c0, 256
  store i32 %v1_c8cc, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c8d8 = load i32, i32* @r5, align 4
  store i32 %v0_c8d8, i32* %r1.global-to-local, align 4
  %v0_c8dc = load i32, i32* @r4, align 4
  %v5_c8e0 = trunc i32 %v6_c8c0 to i8
  %v6_c8e4 = inttoptr i32 %v0_c8d8 to i32*
  %v7_c8e4 = call i32 @function_a4e8(i32 %v0_c8dc, i32* %v6_c8e4, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c8e8 = load i32, i32* @r5, align 4
  store i32 %v0_c8e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c8e4, i32* @r8, align 4
  %v0_c8f8 = load i32, i32* @r4, align 4
  %v4_c8fc = inttoptr i32 %v0_c8e8 to i32*
  %v5_c8fc = call i32 @function_a4e8(i32 %v0_c8f8, i32* %v4_c8fc, i32 4, i32 64)
  %v1_c904 = urem i32 %v5_c8fc, 256
  store i32 %v1_c904, i32* %ip.global-to-local, align 4
  %v0_c908 = load i32, i32* @r5, align 4
  store i32 %v0_c908, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c914 = load i32, i32* @r4, align 4
  %v6_c91c = inttoptr i32 %v0_c908 to i32*
  %v7_c91c = call i32 @function_a4e8(i32 %v0_c914, i32* %v6_c91c, i32 5, i32 0)
  %v1_c928 = urem i32 %v7_c91c, 256
  store i32 %v1_c928, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c934 = load i32, i32* @r5, align 4
  store i32 %v0_c934, i32* %r1.global-to-local, align 4
  %v0_c938 = load i32, i32* @r4, align 4
  %v5_c940 = inttoptr i32 %v0_c934 to i32*
  %v6_c940 = call i32 @function_a4e8(i32 %v0_c938, i32* %v5_c940, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c948 = load i32, i32* @r5, align 4
  store i32 %v0_c948, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c940, i32* @r7, align 4
  %v0_c958 = load i32, i32* @r4, align 4
  %v4_c95c = inttoptr i32 %v0_c948 to i32*
  %v5_c95c = call i32 @function_a4e8(i32 %v0_c958, i32* %v4_c95c, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c964 = load i32, i32* @r5, align 4
  store i32 %v0_c964, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c95c, i32* @r6, align 4
  %v0_c974 = load i32, i32* @r4, align 4
  %v4_c978 = inttoptr i32 %v0_c964 to i32*
  %v5_c978 = call i32 @function_a4e8(i32 %v0_c974, i32* %v4_c978, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c984 = load i32, i32* @r5, align 4
  store i32 %v0_c984, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c990 = load i32, i32* @r4, align 4
  %v5_c994 = inttoptr i32 %v0_c984 to i32*
  %v6_c994 = call i32 @function_a4e8(i32 %v0_c990, i32* %v5_c994, i32 18, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 %v0_c998, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9a8 = load i32, i32* @r4, align 4
  %v5_c9ac = inttoptr i32 %v0_c998 to i32*
  %v6_c9ac = call i32 @function_a4e8(i32 %v0_c9a8, i32* %v5_c9ac, i32 11, i32 0)
  %v0_c9b0 = load i32, i32* @r5, align 4
  store i32 %v0_c9b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c9c0 = load i32, i32* @r4, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9b0 to i32*
  %v6_c9c4 = call i32 @function_a4e8(i32 %v0_c9c0, i32* %v5_c9c4, i32 12, i32 1)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_a4e8(i32 %v0_c9d8, i32* %v5_c9dc, i32 13, i32 0)
  %v0_c9e0 = load i32, i32* @r5, align 4
  store i32 %v0_c9e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9f0 = load i32, i32* @r4, align 4
  %v5_c9f4 = inttoptr i32 %v0_c9e0 to i32*
  %v6_c9f4 = call i32 @function_a4e8(i32 %v0_c9f0, i32* %v5_c9f4, i32 14, i32 0)
  %v0_c9f8 = load i32, i32* @r5, align 4
  store i32 %v0_c9f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca08 = load i32, i32* @r4, align 4
  %v5_ca0c = inttoptr i32 %v0_c9f8 to i32*
  %v6_ca0c = call i32 @function_a4e8(i32 %v0_ca08, i32* %v5_ca0c, i32 15, i32 0)
  %v0_ca10 = load i32, i32* @r5, align 4
  store i32 %v0_ca10, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca20 = load i32, i32* @r4, align 4
  %v5_ca24 = inttoptr i32 %v0_ca10 to i32*
  %v6_ca24 = call i32 @function_a4e8(i32 %v0_ca20, i32* %v5_ca24, i32 16, i32 0)
  %v0_ca28 = load i32, i32* @r5, align 4
  store i32 %v0_ca28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ca38 = load i32, i32* @r4, align 4
  %v5_ca3c = inttoptr i32 %v0_ca28 to i32*
  %v6_ca3c = call i32 @function_a4e8(i32 %v0_ca38, i32* %v5_ca3c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ca4c = load i32, i32* @r5, align 4
  store i32 %v0_ca4c, i32* %r1.global-to-local, align 4
  %v0_ca50 = load i32, i32* @r4, align 4
  %v4_ca54 = inttoptr i32 %v0_ca4c to i32*
  %v5_ca54 = call i32 @function_a4e8(i32 %v0_ca50, i32* %v4_ca54, i32 1, i32 1)
  %v2_ca60 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_ca60, i32* %r3.global-to-local, align 4
  %v1_ca64 = urem i32 %v5_ca54, 256
  store i32 %v1_ca64, i32* %ip.global-to-local, align 4
  %v0_ca68 = load i32, i32* @r5, align 4
  store i32 %v0_ca68, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r4, align 4
  %v5_ca78 = inttoptr i32 %v0_ca68 to i32*
  %v6_ca78 = call i32 @function_a47c(i32 %v0_ca70, i32* %v5_ca78, i32 25, i32 %v2_ca60, i32 %v1_ca64)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ca8c = call i32 @function_14b80(i32 2, i32 3, i32 6)
  %v7_ca90 = icmp eq i32 %v3_ca8c, -1
  store i1 %v7_ca90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ca90, label %dec_label_pc_cec8, label %dec_label_pc_ca9c

dec_label_pc_ca9c:                                ; preds = %dec_label_pc_c888
  store i32 1, i32* %stack_var_-40, align 4
  %v6_caa4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_caa4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cab8 = call i32 @function_14b50(i32 %v3_ca8c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_cabc = icmp eq i32 %v6_cab8, -1
  store i1 %v7_cabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cabc, label %dec_label_pc_cec0, label %dec_label_pc_cac4

dec_label_pc_cac4:                                ; preds = %dec_label_pc_ca9c
  %v0_cac4 = load i32, i32* @r8, align 4
  %v0_cac8 = load i32, i32* @r7, align 4
  %v0_cacc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cad4 = urem i32 %v0_cac4, 65536
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  %v3_cad8 = urem i32 %v0_cac8, 65536
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v3_cadc = urem i32 %v0_cacc, 65536
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v0_cae0 = load i32, i32* @fp, align 4
  %v2_cae0 = icmp eq i32 %v0_cae0, 0
  store i1 %v2_cae0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_cae0, 1
  br i1 %tmp75, label %dec_label_pc_cfe0, label %dec_label_pc_caf8

dec_label_pc_caf8:                                ; preds = %dec_label_pc_cac4
  %v1_cb00 = add i32 %v6_ca3c, 40
  %tmp76 = mul i32 %v1_cb00, 256
  %v1_cb14 = urem i32 %v0_cac8, 256
  %v1_cb18 = and i32 %tmp76, 65280
  %v3_cb1c = mul nuw nsw i32 %v1_cb14, 256
  %v1_cb24 = urem i32 %v0_cacc, 256
  %tmp77 = udiv i32 %v0_cacc, 256
  %v3_cb28 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_cb00, 256
  %v4_cb2c = urem i32 %tmp78, 256
  %v5_cb2c = or i32 %v4_cb2c, %v1_cb18
  store i32 %v5_cb2c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_cac8, 256
  %v4_cb30 = urem i32 %tmp79, 256
  %v5_cb30 = or i32 %v4_cb30, %v3_cb1c
  store i32 %v5_cb30, i32* @sl, align 4
  %v4_cb34 = mul nuw nsw i32 %v1_cb24, 256
  %v5_cb34 = or i32 %v4_cb34, %v3_cb28
  store i32 %v5_cb34, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_cac4, 256
  %v3_cb44 = urem i32 %tmp80, 256
  %v1_cb48 = urem i32 %v0_cac4, 256
  %tmp81 = mul i32 %v5_c978, 256
  %v1_cb50 = and i32 %tmp81, 65280
  %v1_cb54 = urem i32 %v6_c9ac, 2
  %v1_cb58 = urem i32 %v6_c9c4, 2
  %v1_cb5c = urem i32 %v6_c9dc, 2
  %tmp82 = udiv i32 %v5_c978, 256
  %v4_cb60 = urem i32 %tmp82, 256
  %v5_cb60 = or i32 %v4_cb60, %v1_cb50
  store i32 %v5_cb60, i32* @r8, align 4
  %v1_cb80 = urem i32 %v6_c9f4, 2
  %v1_cb84 = urem i32 %v6_ca0c, 2
  %v1_cb88 = urem i32 %v6_ca24, 2
  %v1_cb8c = urem i32 %v6_c9dc, 256
  %v4_cb90 = mul nuw nsw i32 %v1_cb48, 256
  %v5_cb90 = or i32 %v4_cb90, %v3_cb44
  store i32 %v5_cb90, i32* @r5, align 4
  %v3_cba425 = udiv i32 %v1_cb18, 256
  store i32 %v3_cba425, i32* %r3.global-to-local, align 4
  store i32 %v1_cb48, i32* %ip.global-to-local, align 4
  store i32 %v1_cb14, i32* %r1.global-to-local, align 4
  store i32 %v1_cb24, i32* %r2.global-to-local, align 4
  %v5_cbc0 = trunc i32 %v0_cac8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c8fc, 16777216
  %v4_cc1c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_cac4, 16777216
  %v4_cc28 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_cc3c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_cb00, 16777216
  %v4_cc40 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_cb54
  %v4_cc90 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_cb58
  %v4_cca4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_cb5c
  %v4_ccb8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_cb80
  %v4_cccc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_cb84
  %v3_cce0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_cacc, 16777216
  %v7_cd10 = sdiv i32 %sext12, 16777216
  %v1_cc24 = trunc i32 %v4_cc1c to i8
  %extract.t = trunc i32 %v4_cc28 to i8
  %v3_cd10 = sext i8 %v5_cbc0 to i32
  %v2_cd34 = icmp eq i32 %v1_cb8c, 0
  br label %dec_label_pc_cbcc

dec_label_pc_cbcc:                                ; preds = %bb89, %dec_label_pc_caf8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cbd8 = call i32 @function_14e84(i32 1510, i32 1)
  store i32 %v2_c8a8, i32* %ip.global-to-local, align 4
  %v2_cbe4 = load i32, i32* @r4, align 4
  %v5_cbe4 = mul i32 %v2_cbe4, 4
  %v6_cbe4 = add i32 %v5_cbe4, %v2_c8a8
  %v7_cbe4 = inttoptr i32 %v6_cbe4 to i32*
  store i32 %v2_cbd8, i32* %v7_cbe4, align 4
  %v3_cbe8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbe8, i32* %r3.global-to-local, align 4
  %v0_cbec = load i32, i32* %ip.global-to-local, align 4
  %v4_cbec = mul i32 %v3_cbe8, 4
  %v5_cbec = add i32 %v0_cbec, %v4_cbec
  %v6_cbec = inttoptr i32 %v5_cbec to i32*
  %v7_cbec = load i32, i32* %v6_cbec, align 4
  store i32 %v7_cbec, i32* @r7, align 4
  %v1_cbf0 = inttoptr i32 %v7_cbec to i8*
  %v2_cbf0 = load i8, i8* %v1_cbf0, align 1
  %tmp97 = urem i8 %v2_cbf0, 16
  %v1_cbf4 = zext i8 %tmp97 to i32
  %v1_cbf8 = or i32 %v1_cbf4, 64
  store i32 %v1_cbf8, i32* %r2.global-to-local, align 4
  %v1_cbfc = trunc i32 %v1_cbf8 to i8
  store i8 %v1_cbfc, i8* %v1_cbf0, align 1
  %v0_cc00 = load i32, i32* @r7, align 4
  %v1_cc00 = inttoptr i32 %v0_cc00 to i8*
  %v2_cc00 = load i8, i8* %v1_cc00, align 1
  %v1_cc04 = and i8 %v2_cc00, -16
  %v1_cc08 = or i8 %v1_cc04, 5
  store i32 %v1_c928, i32* %r1.global-to-local, align 4
  store i8 %v1_cc08, i8* %v1_cc00, align 1
  %v2_cc18 = load i32, i32* @r7, align 4
  %v3_cc18 = add i32 %v2_cc18, 1
  %v4_cc18 = inttoptr i32 %v3_cc18 to i8*
  store i8 %v5_c8e0, i8* %v4_cc18, align 1
  store i32 %v4_cc1c, i32* %r3.global-to-local, align 4
  %v0_cc20 = load i32, i32* %r1.global-to-local, align 4
  %v2_cc20 = icmp eq i32 %v0_cc20, 0
  store i1 %v2_cc20, i1* %cpsr_z.global-to-local, align 1
  %v2_cc24 = load i32, i32* @r7, align 4
  %v3_cc24 = add i32 %v2_cc24, 8
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v1_cc24, i8* %v4_cc24, align 1
  store i32 %v4_cc28, i32* %r2.global-to-local, align 4
  %v0_cc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc2c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cbcc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cc30 = load i32, i32* @r7, align 4
  %v4_cc30 = add i32 %v3_cc30, 6
  %v5_cc30 = inttoptr i32 %v4_cc30 to i8*
  store i8 64, i8* %v5_cc30, align 1
  %v0_cc38.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_cc38.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cbcc, %bb
  %v0_cc38.off0 = phi i8 [ %extract.t, %dec_label_pc_cbcc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_cc38 = load i32, i32* @r7, align 4
  %v3_cc38 = add i32 %v2_cc38, 5
  %v4_cc38 = inttoptr i32 %v3_cc38 to i8*
  store i8 %v0_cc38.off0, i8* %v4_cc38, align 1
  store i32 %v4_cc3c, i32* %ip.global-to-local, align 4
  store i32 %v4_cc40, i32* %r1.global-to-local, align 4
  %v0_cc44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc44, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_cc48 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc48 = trunc i32 %v0_cc48 to i8
  %v2_cc48 = load i32, i32* @r7, align 4
  %v3_cc48 = add i32 %v2_cc48, 9
  %v4_cc48 = inttoptr i32 %v3_cc48 to i8*
  store i8 %v1_cc48, i8* %v4_cc48, align 1
  %v0_cc4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc4c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_cc4c = load i32, i32* %r2.global-to-local, align 4
  %v2_cc4c = trunc i32 %v1_cc4c to i8
  %v3_cc4c = load i32, i32* @r7, align 4
  %v4_cc4c = add i32 %v3_cc4c, 7
  %v5_cc4c = inttoptr i32 %v4_cc4c to i8*
  store i8 %v2_cc4c, i8* %v5_cc4c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_cc50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc50, i32* %r2.global-to-local, align 4
  %v0_cc54 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc54 = trunc i32 %v0_cc54 to i8
  %v2_cc54 = load i32, i32* @r7, align 4
  %v3_cc54 = add i32 %v2_cc54, 2
  %v4_cc54 = inttoptr i32 %v3_cc54 to i8*
  store i8 %v1_cc54, i8* %v4_cc54, align 1
  store i32 %v6_ca78, i32* %ip.global-to-local, align 4
  %v0_cc5c = load i32, i32* %r2.global-to-local, align 4
  %v3_cc5c = mul i32 %v0_cc5c, 32
  store i32 %v3_cc5c, i32* %r3.global-to-local, align 4
  %v1_cc60 = load i32, i32* @r7, align 4
  %v2_cc60 = add i32 %v1_cc60, 12
  %v3_cc60 = inttoptr i32 %v2_cc60 to i32*
  store i32 %v6_ca78, i32* %v3_cc60, align 4
  %v0_cc64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc64 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_cc64, -8
  %v5_cc64 = add i32 %v0_cc64, %tmp98
  %v1_cc68 = load i32, i32* @sb, align 4
  %v2_cc68 = add i32 %v1_cc68, %v5_cc64
  store i32 %v2_cc68, i32* %r3.global-to-local, align 4
  %v1_cc6c = add i32 %v2_cc68, 16
  %v2_cc6c = inttoptr i32 %v1_cc6c to i32*
  %v3_cc6c = load i32, i32* %v2_cc6c, align 4
  store i32 %v3_cc6c, i32* %r2.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r1.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r7, align 4
  %v3_cc70 = add i32 %v2_cc70, 3
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* @r5, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r7, align 4
  %v3_cc74 = add i32 %v2_cc74, 4
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc78 = load i32, i32* @r7, align 4
  %v2_cc78 = add i32 %v1_cc78, 16
  %v3_cc78 = inttoptr i32 %v2_cc78 to i32*
  store i32 %v0_cc78, i32* %v3_cc78, align 4
  %v0_cc7c = load i32, i32* @sl, align 4
  %v1_cc7c = trunc i32 %v0_cc7c to i8
  %v2_cc7c = load i32, i32* @r7, align 4
  %v3_cc7c = add i32 %v2_cc7c, 20
  %v4_cc7c = inttoptr i32 %v3_cc7c to i8*
  store i8 %v1_cc7c, i8* %v4_cc7c, align 1
  %v0_cc80 = load i32, i32* @r7, align 4
  %v1_cc80 = add i32 %v0_cc80, 20
  store i32 %v1_cc80, i32* @r4, align 4
  %v1_cc84 = add i32 %v0_cc80, 33
  %v2_cc84 = inttoptr i32 %v1_cc84 to i8*
  %v3_cc84 = load i8, i8* %v2_cc84, align 1
  %v4_cc84 = zext i8 %v3_cc84 to i32
  store i32 %v1_cb54, i32* %r1.global-to-local, align 4
  %v1_cc8c = and i32 %v4_cc84, 223
  %v5_cc90 = or i32 %v1_cc8c, %v4_cc90
  store i32 %v5_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = trunc i32 %v5_cc90 to i8
  store i8 %v1_cc94, i8* %v2_cc84, align 1
  %v0_cc98 = load i32, i32* @r4, align 4
  %v1_cc98 = add i32 %v0_cc98, 13
  %v2_cc98 = inttoptr i32 %v1_cc98 to i8*
  %v3_cc98 = load i8, i8* %v2_cc98, align 1
  %v4_cc98 = zext i8 %v3_cc98 to i32
  store i32 %v1_cb58, i32* %r3.global-to-local, align 4
  %v1_cca0 = and i32 %v4_cc98, 239
  %v5_cca4 = or i32 %v1_cca0, %v4_cca4
  store i32 %v5_cca4, i32* %r2.global-to-local, align 4
  %v1_cca8 = trunc i32 %v5_cca4 to i8
  store i8 %v1_cca8, i8* %v2_cc98, align 1
  %v0_ccac = load i32, i32* @r4, align 4
  %v1_ccac = add i32 %v0_ccac, 13
  %v2_ccac = inttoptr i32 %v1_ccac to i8*
  %v3_ccac = load i8, i8* %v2_ccac, align 1
  %v4_ccac = zext i8 %v3_ccac to i32
  store i32 %v1_cb5c, i32* %ip.global-to-local, align 4
  %v1_ccb4 = and i32 %v4_ccac, 247
  %v5_ccb8 = or i32 %v1_ccb4, %v4_ccb8
  store i32 %v5_ccb8, i32* %r3.global-to-local, align 4
  %v1_ccbc = trunc i32 %v5_ccb8 to i8
  store i8 %v1_ccbc, i8* %v2_ccac, align 1
  %v0_ccc0 = load i32, i32* @r4, align 4
  %v1_ccc0 = add i32 %v0_ccc0, 13
  %v2_ccc0 = inttoptr i32 %v1_ccc0 to i8*
  %v3_ccc0 = load i8, i8* %v2_ccc0, align 1
  %v4_ccc0 = zext i8 %v3_ccc0 to i32
  store i32 %v1_cb80, i32* %r1.global-to-local, align 4
  %v1_ccc8 = and i32 %v4_ccc0, 251
  %v5_cccc = or i32 %v1_ccc8, %v4_cccc
  store i32 %v5_cccc, i32* %r2.global-to-local, align 4
  %v1_ccd0 = trunc i32 %v5_cccc to i8
  store i8 %v1_ccd0, i8* %v2_ccc0, align 1
  %v0_ccd4 = load i32, i32* @r4, align 4
  %v1_ccd4 = add i32 %v0_ccd4, 13
  %v2_ccd4 = inttoptr i32 %v1_ccd4 to i8*
  %v3_ccd4 = load i8, i8* %v2_ccd4, align 1
  %v4_ccd4 = zext i8 %v3_ccd4 to i32
  store i32 %v1_cb84, i32* %r2.global-to-local, align 4
  %v1_ccdc = and i32 %v4_ccd4, 253
  %v4_cce0 = or i32 %v1_ccdc, %v3_cce0
  store i32 %v4_cce0, i32* %r3.global-to-local, align 4
  %v1_cce4 = trunc i32 %v4_cce0 to i8
  store i8 %v1_cce4, i8* %v2_ccd4, align 1
  %v0_cce8 = load i32, i32* @r4, align 4
  %v1_cce8 = add i32 %v0_cce8, 12
  %v2_cce8 = inttoptr i32 %v1_cce8 to i8*
  %v3_cce8 = load i8, i8* %v2_cce8, align 1
  %v4_cce8 = zext i8 %v3_cce8 to i32
  store i32 %v4_cce8, i32* %r2.global-to-local, align 4
  %v1_ccec = add i32 %v0_cce8, 13
  %v2_ccec = inttoptr i32 %v1_ccec to i8*
  %v3_ccec = load i8, i8* %v2_ccec, align 1
  %v4_ccec = zext i8 %v3_ccec to i32
  store i32 %v1_cb88, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_cce8, 16
  %v1_ccf4 = zext i8 %tmp99 to i32
  %v1_ccf8 = and i32 %v4_ccec, 254
  %v2_ccfc = or i32 %v1_ccf8, %v1_cb88
  store i32 %v2_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = or i32 %v1_ccf4, 80
  store i32 %v1_cd00, i32* %r2.global-to-local, align 4
  %v1_cd04 = trunc i32 %v2_ccfc to i8
  store i8 %v1_cd04, i8* %v2_ccec, align 1
  %v0_cd08 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd08 = trunc i32 %v0_cd08 to i8
  %v2_cd08 = load i32, i32* @r4, align 4
  %v3_cd08 = add i32 %v2_cd08, 12
  %v4_cd08 = inttoptr i32 %v3_cd08 to i8*
  store i8 %v1_cd08, i8* %v4_cd08, align 1
  store i32 %v3_cd10, i32* %r1.global-to-local, align 4
  store i32 %v7_cd10, i32* %r2.global-to-local, align 4
  %v2_cd14 = load i32, i32* @r4, align 4
  %v3_cd14 = add i32 %v2_cd14, 1
  %v4_cd14 = inttoptr i32 %v3_cd14 to i8*
  store i8 %v5_cbc0, i8* %v4_cd14, align 1
  %v0_cd18 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd18 = trunc i32 %v0_cd18 to i8
  %v2_cd18 = load i32, i32* @r4, align 4
  %v3_cd18 = add i32 %v2_cd18, 3
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v1_cd18, i8* %v4_cd18, align 1
  %v0_cd1c = load i32, i32* @r6, align 4
  %v1_cd1c = trunc i32 %v0_cd1c to i8
  %v2_cd1c = load i32, i32* @r4, align 4
  %v3_cd1c = add i32 %v2_cd1c, 2
  %v4_cd1c = inttoptr i32 %v3_cd1c to i8*
  store i8 %v1_cd1c, i8* %v4_cd1c, align 1
  %v0_cd20 = load i32, i32* @r8, align 4
  %v1_cd20 = load i32, i32* @r4, align 4
  %v2_cd20 = add i32 %v1_cd20, 4
  %v3_cd20 = inttoptr i32 %v2_cd20 to i32*
  store i32 %v0_cd20, i32* %v3_cd20, align 4
  %v0_cd24 = call i32 @function_10a94()
  store i32 %v1_cb8c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_cd24, 16777216
  %v1_cd2c = sdiv i32 %sext, 16777216
  store i32 %v1_cd2c, i32* %r2.global-to-local, align 4
  %v3_cd30 = ashr i32 %sext, 31
  store i32 %v3_cd30, i32* %r3.global-to-local, align 4
  store i1 %v2_cd34, i1* %cpsr_z.global-to-local, align 1
  %v1_cd38 = trunc i32 %v3_cd30 to i8
  %v2_cd38 = load i32, i32* @r4, align 4
  %v3_cd38 = add i32 %v2_cd38, 15
  %v4_cd38 = inttoptr i32 %v3_cd38 to i8*
  store i8 %v1_cd38, i8* %v4_cd38, align 1
  %v0_cd3c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_cd48.pre = load i32, i32* @r4, align 4
  br i1 %v0_cd3c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_cd3c = add i32 %v2_cd48.pre, 13
  %v3_cd3c = inttoptr i32 %v2_cd3c to i8*
  %v4_cd3c = load i8, i8* %v3_cd3c, align 1
  %v5_cd3c = zext i8 %v4_cd3c to i32
  %v2_cd40 = or i32 %v5_cd3c, 8
  store i32 %v2_cd40, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_ca3c, i32* @r1, align 4
  %v0_cd48 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  %v3_cd48 = add i32 %v2_cd48.pre, 14
  %v4_cd48 = inttoptr i32 %v3_cd48 to i8*
  store i8 %v1_cd48, i8* %v4_cd48, align 1
  %v0_cd4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd4c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_cd4c = load i32, i32* %r3.global-to-local, align 4
  %v2_cd4c = trunc i32 %v1_cd4c to i8
  %v3_cd4c = load i32, i32* @r4, align 4
  %v4_cd4c = add i32 %v3_cd4c, 13
  %v5_cd4c = inttoptr i32 %v4_cd4c to i8*
  store i8 %v2_cd4c, i8* %v5_cd4c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_cd50 = load i32, i32* @r7, align 4
  %v1_cd50 = add i32 %v0_cd50, 40
  %v1_cd54 = inttoptr i32 %v1_cd50 to i8*
  %v2_cd54 = call i32 @function_10c70(i8* %v1_cd54)
  %v3_cd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cd58, i32* %r3.global-to-local, align 4
  %v1_cd5c = add i32 %v3_cd58, 1
  store i32 %v1_cd5c, i32* @r4, align 4
  %v0_cd60 = load i32, i32* @fp, align 4
  %v9_cd60 = icmp eq i32 %v0_cd60, %v1_cd5c
  store i1 %v9_cd60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd5c, i32* %stack_var_-40, align 4
  %v8_cd68 = icmp sgt i32 %v0_cd60, %v1_cd5c
  br i1 %v8_cd68, label %dec_label_pc_cbcc, label %dec_label_pc_cd6c

dec_label_pc_cd6c:                                ; preds = %bb89
  store i32 %v6_ca3c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cd74.preheader

dec_label_pc_cd74.preheader:                      ; preds = %dec_label_pc_cd6c, %dec_label_pc_cfe0
  %v0_cd7417 = phi i32 [ %v0_cd60, %dec_label_pc_cd6c ], [ %v0_cae0, %dec_label_pc_cfe0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_cb00, %dec_label_pc_cd6c ], [ %v1_cfe8, %dec_label_pc_cfe0 ]
  %storemerge = add i32 %v6_ca3c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_cf2c = icmp eq i32 %v6_ca78, -1
  %v8_cf2c = icmp eq i32 %v6_ca78, -1
  %v9_cf48 = icmp eq i32 %v3_cad4, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_cfc4 = icmp eq i32 %v1_ca64, 0
  br label %dec_label_pc_cd74

dec_label_pc_cd74:                                ; preds = %dec_label_pc_ce1c, %dec_label_pc_cd74.preheader
  %v0_cd74 = phi i32 [ %v0_cd7417, %dec_label_pc_cd74.preheader ], [ %v0_ceb0, %dec_label_pc_ce1c ]
  %v2_cd74 = icmp eq i32 %v0_cd74, 0
  store i1 %v2_cd74, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_cd74, 1
  br label %dec_label_pc_cd7c

dec_label_pc_cd7c:                                ; preds = %dec_label_pc_cd7c, %dec_label_pc_cd74
  br i1 %tmp90, label %dec_label_pc_cd7c, label %dec_label_pc_cd80

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd7c
  %v0_cd80 = load i32, i32* @r8, align 4
  %v3_cd80 = mul i32 %v0_cd80, 65536
  store i32 %v3_cd80, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_cd80, 256
  %v1_cd88 = and i32 %tmp91, 65280
  store i32 %v1_cd88, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_cd80, 256
  %v4_cd94 = urem i32 %tmp92, 256
  %v5_cd94 = or i32 %v4_cd94, %v1_cd88
  store i32 %v5_cd94, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_ce1c, %dec_label_pc_cd80
  %v1_cdb0 = phi i32 [ %v1_ceac, %dec_label_pc_ce1c ], [ 0, %dec_label_pc_cd80 ]
  %v5_cda0 = mul i32 %v1_cdb0, 24
  %v1_cda4 = load i32, i32* @sb, align 4
  %v2_cda4 = add i32 %v1_cda4, %v5_cda0
  store i32 %v2_cda4, i32* %r3.global-to-local, align 4
  store i32 %v2_c8a8, i32* %ip.global-to-local, align 4
  %v1_cdac = add i32 %v2_cda4, 20
  %v2_cdac = inttoptr i32 %v1_cdac to i8*
  %v3_cdac = load i8, i8* %v2_cdac, align 1
  %v4_cdac = zext i8 %v3_cdac to i32
  store i32 %v4_cdac, i32* %r2.global-to-local, align 4
  %v4_cdb0 = mul i32 %v1_cdb0, 4
  %v5_cdb0 = add i32 %v4_cdb0, %v2_c8a8
  %v6_cdb0 = inttoptr i32 %v5_cdb0 to i32*
  %v7_cdb0 = load i32, i32* %v6_cdb0, align 4
  store i32 %v7_cdb0, i32* @r5, align 4
  %v7_cdb4 = icmp eq i8 %v3_cdac, 31
  store i1 %v7_cdb4, i1* %cpsr_z.global-to-local, align 1
  %v1_cdb8 = add i32 %v7_cdb0, 20
  store i32 %v1_cdb8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_cdac, 32
  br i1 %tmp100, label %dec_label_pc_ced0, label %dec_label_pc_cdc0

dec_label_pc_cdc0:                                ; preds = %dec_label_pc_cd9c
  store i32 %v6_ca78, i32* %r1.global-to-local, align 4
  store i1 %v8_cf2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cf2c, label %dec_label_pc_cf38, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cdc0
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cf48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cf48, label %dec_label_pc_cf54, label %dec_label_pc_cde0

dec_label_pc_cde0:                                ; preds = %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge, %dec_label_pc_cdcc
  %v1_cde4 = phi i32 [ %v1_cde4.pre, %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_cdcc ]
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v9_cde4 = icmp eq i32 %v3_cad8, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cde4, label %dec_label_pc_cf70, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge, %dec_label_pc_cde0
  %v1_cdf0 = phi i32 [ %v1_cdf0.pre, %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge ], [ %v1_cde4, %dec_label_pc_cde0 ]
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v9_cdf0 = icmp eq i32 %v3_cadc, %v1_cdf0
  store i1 %v9_cdf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cdf0, label %dec_label_pc_cf8c, label %dec_label_pc_cdf8

dec_label_pc_cdf8:                                ; preds = %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge, %dec_label_pc_cdec
  %v1_cdfc = phi i32 [ %v1_cdfc.pre, %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge ], [ %v1_cdf0, %dec_label_pc_cdec ]
  store i32 %v5_c978, i32* %r1.global-to-local, align 4
  %v9_cdfc = icmp eq i32 %v5_c978, %v1_cdfc
  store i1 %v9_cdfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cdfc, label %dec_label_pc_cfa8, label %dec_label_pc_ce04

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge, %dec_label_pc_cdf8
  %v1_ce08 = phi i32 [ %v1_ce08.pre, %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge ], [ %v1_cdfc, %dec_label_pc_cdf8 ]
  store i32 %v6_c994, i32* %r2.global-to-local, align 4
  %v9_ce08 = icmp eq i32 %v6_c994, %v1_ce08
  store i1 %v9_ce08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce08, label %dec_label_pc_cfbc, label %dec_label_pc_ce10

dec_label_pc_ce10:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_ce04
  store i32 %v1_ca64, i32* %r3.global-to-local, align 4
  store i1 %v2_cfc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cfc4, label %dec_label_pc_ce1c, label %dec_label_pc_cfd0

dec_label_pc_ce1c:                                ; preds = %dec_label_pc_ce10, %dec_label_pc_cfbc, %dec_label_pc_cfd0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ce20 = load i32, i32* @r7, align 4
  %v1_ce20 = trunc i32 %v0_ce20 to i8
  %v2_ce20 = load i32, i32* @r5, align 4
  %v3_ce20 = add i32 %v2_ce20, 10
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v0_ce24 = load i32, i32* @r7, align 4
  %v1_ce24 = trunc i32 %v0_ce24 to i8
  %v2_ce24 = load i32, i32* @r5, align 4
  %v3_ce24 = add i32 %v2_ce24, 11
  %v4_ce24 = inttoptr i32 %v3_ce24 to i8*
  store i8 %v1_ce24, i8* %v4_ce24, align 1
  %v0_ce28 = load i32, i32* @r5, align 4
  store i32 %v0_ce28, i32* @r0, align 4
  %v2_ce2c = call i32 @function_f008(i32 %v0_ce28, i32 20)
  %v3_ce2c = trunc i32 %v2_ce2c to i8
  %v4_ce3028 = udiv i32 %v2_ce2c, 256
  %v1_ce34 = trunc i32 %v4_ce3028 to i8
  %v2_ce34 = load i32, i32* @r5, align 4
  %v3_ce34 = add i32 %v2_ce34, 11
  %v4_ce34 = inttoptr i32 %v3_ce34 to i8*
  store i8 %v1_ce34, i8* %v4_ce34, align 1
  %v3_ce38 = load i32, i32* @r5, align 4
  %v4_ce38 = add i32 %v3_ce38, 10
  %v5_ce38 = inttoptr i32 %v4_ce38 to i8*
  store i8 %v3_ce2c, i8* %v5_ce38, align 1
  %v0_ce3c = load i32, i32* @r6, align 4
  store i32 %v0_ce3c, i32* @r1, align 4
  %v0_ce40 = load i32, i32* @sl, align 4
  store i32 %v0_ce40, i32* %r2.global-to-local, align 4
  %v0_ce44 = load i32, i32* @r8, align 4
  store i32 %v0_ce44, i32* %r3.global-to-local, align 4
  %v0_ce48 = load i32, i32* @r7, align 4
  %v1_ce48 = trunc i32 %v0_ce48 to i8
  %v3_ce48 = add i32 %v0_ce3c, 16
  %v4_ce48 = inttoptr i32 %v3_ce48 to i8*
  store i8 %v1_ce48, i8* %v4_ce48, align 1
  %v0_ce4c = load i32, i32* @r7, align 4
  %v1_ce4c = trunc i32 %v0_ce4c to i8
  %v2_ce4c = load i32, i32* @r6, align 4
  %v3_ce4c = add i32 %v2_ce4c, 17
  %v4_ce4c = inttoptr i32 %v3_ce4c to i8*
  store i8 %v1_ce4c, i8* %v4_ce4c, align 1
  %v0_ce50 = load i32, i32* @r5, align 4
  %v4_ce54 = call i32 @function_f064(i32 %v0_ce50, i32 %v0_ce3c, i32 %v0_ce40, i32 %v0_ce44)
  %v5_ce54 = trunc i32 %v4_ce54 to i8
  %v4_ce5829 = udiv i32 %v4_ce54, 256
  %v1_ce5c = trunc i32 %v4_ce5829 to i8
  %v2_ce5c = load i32, i32* @r6, align 4
  %v3_ce5c = add i32 %v2_ce5c, 17
  %v4_ce5c = inttoptr i32 %v3_ce5c to i8*
  store i8 %v1_ce5c, i8* %v4_ce5c, align 1
  %v3_ce60 = load i32, i32* @r6, align 4
  %v4_ce60 = add i32 %v3_ce60, 16
  %v5_ce60 = inttoptr i32 %v4_ce60 to i8*
  store i8 %v5_ce54, i8* %v5_ce60, align 1
  %v3_ce64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce64, i32* %r3.global-to-local, align 4
  %v0_ce68 = load i32, i32* @r5, align 4
  %v1_ce68 = add i32 %v0_ce68, 20
  %v2_ce68 = inttoptr i32 %v1_ce68 to i32*
  %v3_ce68 = load i32, i32* %v2_ce68, align 4
  %v3_ce70 = udiv i32 %v3_ce68, 65536
  store i32 %v3_ce70, i32* %r2.global-to-local, align 4
  %v5_ce74 = mul i32 %v3_ce64, 24
  %v1_ce78 = load i32, i32* @sb, align 4
  %v2_ce78 = add i32 %v1_ce78, %v5_ce74
  store i32 %v2_ce78, i32* %ip.global-to-local, align 4
  %v3_ce7c27 = udiv i32 %v3_ce68, 16777216
  %v1_ce80 = trunc i32 %v3_ce7c27 to i8
  %v3_ce80 = add i32 %v2_ce78, 3
  %v4_ce80 = inttoptr i32 %v3_ce80 to i8*
  store i8 %v1_ce80, i8* %v4_ce80, align 1
  %v0_ce84 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce84 = trunc i32 %v0_ce84 to i8
  %v2_ce84 = load i32, i32* %ip.global-to-local, align 4
  %v3_ce84 = add i32 %v2_ce84, 2
  %v4_ce84 = inttoptr i32 %v3_ce84 to i8*
  store i8 %v1_ce84, i8* %v4_ce84, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ce8c = load i32, i32* @r5, align 4
  store i32 %v0_ce8c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ce9c = load i32, i32* %ip.global-to-local, align 4
  %v6_cea4 = inttoptr i32 %v0_ce8c to i32*
  %v7_cea4 = call i32 @function_14b1c(i32 %v3_ca8c, i32* %v6_cea4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_ce9c, i32 16)
  %v3_cea8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cea8, i32* %r3.global-to-local, align 4
  %v1_ceac = add i32 %v3_cea8, 1
  %v0_ceb0 = load i32, i32* @fp, align 4
  %v9_ceb0 = icmp eq i32 %v0_ceb0, %v1_ceac
  store i1 %v9_ceb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ceac, i32* %stack_var_-40, align 4
  %v7_ceb8 = icmp sgt i32 %v0_ceb0, %v1_ceac
  br i1 %v7_ceb8, label %dec_label_pc_cd9c, label %dec_label_pc_cd74

dec_label_pc_cec0:                                ; preds = %dec_label_pc_ca9c
  %v1_cec4 = call i32 @function_14284(i32 %v3_ca8c)
  br label %dec_label_pc_cec8

dec_label_pc_cec8:                                ; preds = %dec_label_pc_c888, %dec_label_pc_cec0
  %v29_cecc = phi i32 [ %v3_ca8c, %dec_label_pc_c888 ], [ %v1_cec4, %dec_label_pc_cec0 ]
  ret i32 %v29_cecc

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cd9c
  %v1_ced0 = add i32 %v2_cda4, 16
  %v2_ced0 = inttoptr i32 %v1_ced0 to i32*
  %v3_ced0 = load i32, i32* %v2_ced0, align 4
  %v0_ced4 = call i32 @function_10a94()
  %v3_ced8 = load i32, i32* %stack_var_-40, align 4
  %v5_cee0 = mul i32 %v3_ced8, 24
  %v1_cee8 = load i32, i32* @sb, align 4
  %v2_cee8 = add i32 %v1_cee8, %v5_cee0
  store i32 %v2_cee8, i32* %r1.global-to-local, align 4
  %v1_ceec = and i32 %v3_ced0, 65280
  store i32 %v1_ceec, i32* %r3.global-to-local, align 4
  %v1_cee4 = udiv i32 %v3_ced0, 256
  %v3_cef0 = and i32 %v1_cee4, 65280
  store i32 %v3_cef0, i32* %r2.global-to-local, align 4
  %v3_cef4 = mul i32 %v3_ced0, 16777216
  store i32 %v3_cef4, i32* %ip.global-to-local, align 4
  %v1_cef8 = add i32 %v2_cee8, 20
  %v2_cef8 = inttoptr i32 %v1_cef8 to i8*
  %v3_cef8 = load i8, i8* %v2_cef8, align 1
  %v4_cef8 = zext i8 %v3_cef8 to i32
  %v4_cefc = mul nuw nsw i32 %v1_ceec, 256
  %v5_cefc = or i32 %v4_cefc, %v3_cef4
  store i32 %v5_cefc, i32* %ip.global-to-local, align 4
  %v2_cf04 = call i32 @llvm.bswap.i32(i32 %v3_ced0)
  %v7_cf08 = lshr i32 %v0_ced4, %v4_cef8
  %v8_cf08 = add i32 %v7_cf08, %v2_cf04
  store i32 %v8_cf08, i32* %r2.global-to-local, align 4
  %v2_cf24 = call i32 @llvm.bswap.i32(i32 %v8_cf08)
  store i32 %v2_cf24, i32* %r3.global-to-local, align 4
  store i32 %v6_ca78, i32* %r1.global-to-local, align 4
  store i1 %v8_cf2c, i1* %cpsr_z.global-to-local, align 1
  %v1_cf30 = load i32, i32* @r5, align 4
  %v2_cf30 = add i32 %v1_cf30, 16
  %v3_cf30 = inttoptr i32 %v2_cf30 to i32*
  store i32 %v2_cf24, i32* %v3_cf30, align 4
  br i1 %v3_cf2c, label %dec_label_pc_cf38, label %dec_label_pc_cdcc

dec_label_pc_cf38:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cdc0
  %v0_cf38 = call i32 @function_10a94()
  store i32 %v3_cad4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cf48, i1* %cpsr_z.global-to-local, align 1
  %v1_cf4c = load i32, i32* @r5, align 4
  %v2_cf4c = add i32 %v1_cf4c, 12
  %v3_cf4c = inttoptr i32 %v2_cf4c to i32*
  store i32 %v0_cf38, i32* %v3_cf4c, align 4
  br i1 %v9_cf48, label %dec_label_pc_cf54, label %dec_label_pc_cf38.dec_label_pc_cde0_crit_edge

dec_label_pc_cf38.dec_label_pc_cde0_crit_edge:    ; preds = %dec_label_pc_cf38
  %v1_cde4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cde0

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cf38, %dec_label_pc_cdcc
  %v0_cf54 = call i32 @function_10a94()
  %v1_cf54 = trunc i32 %v0_cf54 to i8
  %v4_cf5830 = udiv i32 %v0_cf54, 256
  %v1_cf5c = trunc i32 %v4_cf5830 to i8
  %v2_cf5c = load i32, i32* @r5, align 4
  %v3_cf5c = add i32 %v2_cf5c, 5
  %v4_cf5c = inttoptr i32 %v3_cf5c to i8*
  store i8 %v1_cf5c, i8* %v4_cf5c, align 1
  store i32 %v3_cad8, i32* %r3.global-to-local, align 4
  %v1_cf64 = load i32, i32* @r4, align 4
  %v9_cf64 = icmp eq i32 %v3_cad8, %v1_cf64
  store i1 %v9_cf64, i1* %cpsr_z.global-to-local, align 1
  %v3_cf68 = load i32, i32* @r5, align 4
  %v4_cf68 = add i32 %v3_cf68, 4
  %v5_cf68 = inttoptr i32 %v4_cf68 to i8*
  store i8 %v1_cf54, i8* %v5_cf68, align 1
  %v0_cf6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf6c, label %dec_label_pc_cf70, label %dec_label_pc_cf54.dec_label_pc_cdec_crit_edge

dec_label_pc_cf54.dec_label_pc_cdec_crit_edge:    ; preds = %dec_label_pc_cf54
  %v1_cdf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdec

dec_label_pc_cf70:                                ; preds = %dec_label_pc_cf54, %dec_label_pc_cde0
  %v0_cf70 = call i32 @function_10a94()
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  store i32 %v3_cadc, i32* %ip.global-to-local, align 4
  %v4_cf78 = sdiv i32 %v0_cf70, 256
  store i32 %v4_cf78, i32* %r3.global-to-local, align 4
  %v1_cf7c = load i32, i32* @r4, align 4
  %v9_cf7c = icmp eq i32 %v3_cadc, %v1_cf7c
  store i1 %v9_cf7c, i1* %cpsr_z.global-to-local, align 1
  %v3_cf80 = load i32, i32* @r5, align 4
  %v4_cf80 = add i32 %v3_cf80, 20
  %v5_cf80 = inttoptr i32 %v4_cf80 to i8*
  store i8 %v1_cf70, i8* %v5_cf80, align 1
  %v0_cf84 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf84 = trunc i32 %v0_cf84 to i8
  %v2_cf84 = load i32, i32* @r6, align 4
  %v3_cf84 = add i32 %v2_cf84, 1
  %v4_cf84 = inttoptr i32 %v3_cf84 to i8*
  store i8 %v1_cf84, i8* %v4_cf84, align 1
  %v0_cf88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf88, label %dec_label_pc_cf8c, label %dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge

dec_label_pc_cf70.dec_label_pc_cdf8_crit_edge:    ; preds = %dec_label_pc_cf70
  %v1_cdfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdf8

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf70, %dec_label_pc_cdec
  %v0_cf8c = call i32 @function_10a94()
  %v1_cf8c = trunc i32 %v0_cf8c to i8
  store i32 %v5_c978, i32* %r1.global-to-local, align 4
  %v4_cf94 = sdiv i32 %v0_cf8c, 256
  store i32 %v4_cf94, i32* %r3.global-to-local, align 4
  %v1_cf98 = load i32, i32* @r4, align 4
  %v9_cf98 = icmp eq i32 %v5_c978, %v1_cf98
  store i1 %v9_cf98, i1* %cpsr_z.global-to-local, align 1
  %v1_cf9c = trunc i32 %v4_cf94 to i8
  %v2_cf9c = load i32, i32* @r6, align 4
  %v3_cf9c = add i32 %v2_cf9c, 3
  %v4_cf9c = inttoptr i32 %v3_cf9c to i8*
  store i8 %v1_cf9c, i8* %v4_cf9c, align 1
  %v3_cfa0 = load i32, i32* @r6, align 4
  %v4_cfa0 = add i32 %v3_cfa0, 2
  %v5_cfa0 = inttoptr i32 %v4_cfa0 to i8*
  store i8 %v1_cf8c, i8* %v5_cfa0, align 1
  %v0_cfa4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfa4, label %dec_label_pc_cfa8, label %dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge

dec_label_pc_cf8c.dec_label_pc_ce04_crit_edge:    ; preds = %dec_label_pc_cf8c
  %v1_ce08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ce04

dec_label_pc_cfa8:                                ; preds = %dec_label_pc_cf8c, %dec_label_pc_cdf8
  %v0_cfa8 = call i32 @function_10a94()
  store i32 %v6_c994, i32* %r2.global-to-local, align 4
  %v1_cfb0 = load i32, i32* @r4, align 4
  %v9_cfb0 = icmp eq i32 %v6_c994, %v1_cfb0
  store i1 %v9_cfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_cfb4 = load i32, i32* @r6, align 4
  %v2_cfb4 = add i32 %v1_cfb4, 4
  %v3_cfb4 = inttoptr i32 %v2_cfb4 to i32*
  store i32 %v0_cfa8, i32* %v3_cfb4, align 4
  br i1 %v9_cfb0, label %dec_label_pc_cfbc, label %dec_label_pc_ce10

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_ce04
  %v0_cfbc = call i32 @function_10a94()
  store i32 %v1_ca64, i32* %r3.global-to-local, align 4
  store i1 %v2_cfc4, i1* %cpsr_z.global-to-local, align 1
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v2_cfc8 = add i32 %v1_cfc8, 8
  %v3_cfc8 = inttoptr i32 %v2_cfc8 to i32*
  store i32 %v0_cfbc, i32* %v3_cfc8, align 4
  br i1 %v2_cfc4, label %dec_label_pc_ce1c, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_ce10, %dec_label_pc_cfbc
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 40
  store i32 %v6_ca3c, i32* @r1, align 4
  %v1_cfd8 = inttoptr i32 %v1_cfd0 to i8*
  %v2_cfd8 = call i32 @function_10c70(i8* %v1_cfd8)
  br label %dec_label_pc_ce1c

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cac4
  store i32 %v6_ca3c, i32* %r3.global-to-local, align 4
  %v1_cfe8 = add i32 %v6_ca3c, 40
  store i32 %v1_cfe8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cd74.preheader

; uselistorder directives
  uselistorder i32 %v1_cfe8, { 1, 0 }
  uselistorder i32 %v4_cf94, { 1, 0 }
  uselistorder i32 %v2_cf24, { 1, 0 }
  uselistorder i32 %v3_cef4, { 1, 0 }
  uselistorder i32 %v3_ced0, { 1, 3, 2, 0 }
  uselistorder i32 %v0_ceb0, { 1, 2, 0 }
  uselistorder i32 %v1_ceac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_ce3c, { 1, 0, 2 }
  uselistorder i32 %v0_cd80, { 2, 0, 1 }
  uselistorder i32 %v0_cd74, { 1, 0 }
  uselistorder i1 %v2_cfc4, { 2, 3, 1, 0 }
  uselistorder i1 %v9_cf48, { 2, 3, 1, 0 }
  uselistorder i32 %v1_cd5c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cbc0, { 1, 0 }
  uselistorder i32 %v1_cb88, { 1, 0 }
  uselistorder i32 %v1_cb84, { 1, 0 }
  uselistorder i32 %v1_cb80, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v1_cb58, { 1, 0 }
  uselistorder i32 %v1_cb54, { 1, 0 }
  uselistorder i32 %v1_cb48, { 1, 0 }
  uselistorder i32 %v1_cb24, { 1, 0 }
  uselistorder i32 %v1_cb14, { 1, 0 }
  uselistorder i32 %v1_cb00, { 3, 0, 2, 1 }
  uselistorder i32 %v0_cae0, { 1, 0, 2 }
  uselistorder i32 %v3_cad4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_cac8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cac4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_cabc, { 1, 0 }
  uselistorder i1 %v7_ca90, { 1, 0 }
  uselistorder i32 %v3_ca8c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ca78, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_ca64, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_ca3c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c994, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c978, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c928, { 1, 0 }
  uselistorder i32 %v6_c8c0, { 1, 0 }
  uselistorder i32 %v2_c8a8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c88c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_cfd0, { 1, 0 }
  uselistorder label %dec_label_pc_cec8, { 1, 0 }
  uselistorder label %dec_label_pc_ce1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cd74.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_cffc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cffc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cffc = load i32, i32* @r4, align 4
  %v12_cffc = load i32, i32* @r7, align 4
  %v1_d000 = urem i32 %arg1, 256
  store i32 %v1_d000, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d000, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d018 = urem i32 %arg3, 256
  store i32 %v1_d018, i32* @r4, align 4
  %v2_d01c = call i32 @function_14e84(i32 %v1_d000, i32 4)
  %v0_d020 = load i32, i32* @r5, align 4
  store i32 %v0_d020, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d01c, i32* %fp.global-to-local, align 4
  %v0_d030 = load i32, i32* @r4, align 4
  store i32 %v0_d030, i32* %r0.global-to-local, align 4
  %v4_d034 = inttoptr i32 %v0_d020 to i32*
  %v5_d034 = call i32 @function_a4e8(i32 %v0_d030, i32* %v4_d034, i32 2, i32 0)
  %v1_d040 = urem i32 %v5_d034, 256
  store i32 %v1_d040, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d04c = load i32, i32* @r5, align 4
  store i32 %v0_d04c, i32* %r1.global-to-local, align 4
  %v0_d050 = load i32, i32* @r4, align 4
  store i32 %v0_d050, i32* %r0.global-to-local, align 4
  %v5_d054 = trunc i32 %v5_d034 to i8
  %v6_d058 = inttoptr i32 %v0_d04c to i32*
  %v7_d058 = call i32 @function_a4e8(i32 %v0_d050, i32* %v6_d058, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d05c = load i32, i32* @r5, align 4
  store i32 %v0_d05c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d06c = load i32, i32* @r4, align 4
  store i32 %v0_d06c, i32* %r0.global-to-local, align 4
  %v5_d070 = inttoptr i32 %v0_d05c to i32*
  %v6_d070 = call i32 @function_a4e8(i32 %v0_d06c, i32* %v5_d070, i32 4, i32 64)
  %v1_d078 = urem i32 %v6_d070, 256
  store i32 %v1_d078, i32* %ip.global-to-local, align 4
  %v0_d07c = load i32, i32* @r5, align 4
  store i32 %v0_d07c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d088 = load i32, i32* @r4, align 4
  store i32 %v0_d088, i32* %r0.global-to-local, align 4
  %v6_d090 = inttoptr i32 %v0_d07c to i32*
  %v7_d090 = call i32 @function_a4e8(i32 %v0_d088, i32* %v6_d090, i32 5, i32 1)
  %v1_d09c = urem i32 %v7_d090, 256
  store i32 %v1_d09c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d0a8 = load i32, i32* @r5, align 4
  store i32 %v0_d0a8, i32* %r1.global-to-local, align 4
  %v0_d0ac = load i32, i32* @r4, align 4
  store i32 %v0_d0ac, i32* %r0.global-to-local, align 4
  %v5_d0b4 = inttoptr i32 %v0_d0a8 to i32*
  %v6_d0b4 = call i32 @function_a4e8(i32 %v0_d0ac, i32* %v5_d0b4, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d0bc = load i32, i32* @r5, align 4
  store i32 %v0_d0bc, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d0b4, i32* @r7, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  store i32 %v0_d0cc, i32* %r0.global-to-local, align 4
  %v4_d0d0 = inttoptr i32 %v0_d0bc to i32*
  %v5_d0d0 = call i32 @function_a4e8(i32 %v0_d0cc, i32* %v4_d0d0, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d0d8 = load i32, i32* @r5, align 4
  store i32 %v0_d0d8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d0d0, i32* @r6, align 4
  %v0_d0e8 = load i32, i32* @r4, align 4
  store i32 %v0_d0e8, i32* %r0.global-to-local, align 4
  %v4_d0ec = inttoptr i32 %v0_d0d8 to i32*
  %v5_d0ec = call i32 @function_a4e8(i32 %v0_d0e8, i32* %v4_d0ec, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_d0f0 = load i32, i32* @r5, align 4
  store i32 %v0_d0f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r0.global-to-local, align 4
  %v5_d104 = inttoptr i32 %v0_d0f0 to i32*
  %v6_d104 = call i32 @function_a4e8(i32 %v0_d100, i32* %v5_d104, i32 18, i32 0)
  %v0_d108 = load i32, i32* @r5, align 4
  store i32 %v0_d108, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d118 = load i32, i32* @r4, align 4
  store i32 %v0_d118, i32* %r0.global-to-local, align 4
  %v5_d11c = inttoptr i32 %v0_d108 to i32*
  %v6_d11c = call i32 @function_a4e8(i32 %v0_d118, i32* %v5_d11c, i32 11, i32 0)
  %v0_d120 = load i32, i32* @r5, align 4
  store i32 %v0_d120, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d130 = load i32, i32* @r4, align 4
  store i32 %v0_d130, i32* %r0.global-to-local, align 4
  %v5_d134 = inttoptr i32 %v0_d120 to i32*
  %v6_d134 = call i32 @function_a4e8(i32 %v0_d130, i32* %v5_d134, i32 12, i32 0)
  %v0_d138 = load i32, i32* @r5, align 4
  store i32 %v0_d138, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d148 = load i32, i32* @r4, align 4
  store i32 %v0_d148, i32* %r0.global-to-local, align 4
  %v5_d14c = inttoptr i32 %v0_d138 to i32*
  %v6_d14c = call i32 @function_a4e8(i32 %v0_d148, i32* %v5_d14c, i32 13, i32 0)
  %v0_d150 = load i32, i32* @r5, align 4
  store i32 %v0_d150, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d160 = load i32, i32* @r4, align 4
  store i32 %v0_d160, i32* %r0.global-to-local, align 4
  %v5_d164 = inttoptr i32 %v0_d150 to i32*
  %v6_d164 = call i32 @function_a4e8(i32 %v0_d160, i32* %v5_d164, i32 14, i32 0)
  %v0_d168 = load i32, i32* @r5, align 4
  store i32 %v0_d168, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = inttoptr i32 %v0_d168 to i32*
  %v6_d17c = call i32 @function_a4e8(i32 %v0_d178, i32* %v5_d17c, i32 15, i32 1)
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d190 = load i32, i32* @r4, align 4
  store i32 %v0_d190, i32* %r0.global-to-local, align 4
  %v5_d194 = inttoptr i32 %v0_d180 to i32*
  %v6_d194 = call i32 @function_a4e8(i32 %v0_d190, i32* %v5_d194, i32 16, i32 0)
  %v2_d1a0 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_d1a0, i32* %r3.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d1ac = load i32, i32* @r4, align 4
  store i32 %v0_d1ac, i32* %r0.global-to-local, align 4
  %v5_d1b0 = inttoptr i32 %v0_d1a4 to i32*
  %v6_d1b0 = call i32 @function_a47c(i32 %v0_d1ac, i32* %v5_d1b0, i32 25, i32 %v2_d1a0, i32 %v6_d194)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d1c4 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_d1c4, i32* %r0.global-to-local, align 4
  %v7_d1c8 = icmp eq i32 %v3_d1c4, -1
  store i1 %v7_d1c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d1c4, i32* %sb.global-to-local, align 4
  br i1 %v7_d1c8, label %dec_label_pc_d734, label %dec_label_pc_d1d4

dec_label_pc_d1d4:                                ; preds = %dec_label_pc_cffc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d1dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d1dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d1f0 = call i32 @function_14b50(i32 %v3_d1c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d1f0, i32* %r0.global-to-local, align 4
  %v7_d1f4 = icmp eq i32 %v6_d1f0, -1
  store i1 %v7_d1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d1f4, label %dec_label_pc_d72c, label %dec_label_pc_d1fc

dec_label_pc_d1fc:                                ; preds = %dec_label_pc_d1d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_d210 = load i32, i32* @r7, align 4
  %v3_d210 = mul i32 %v0_d210, 65536
  store i32 %v3_d210, i32* %r4.global-to-local, align 4
  %v0_d214 = load i32, i32* @r6, align 4
  %v3_d218 = urem i32 %v7_d058, 65536
  store i32 %v3_d218, i32* %r3.global-to-local, align 4
  %v3_d21c = urem i32 %v0_d210, 65536
  store i32 %v3_d21c, i32* %ip.global-to-local, align 4
  %v3_d220 = urem i32 %v0_d214, 65536
  store i32 %v3_d220, i32* %r0.global-to-local, align 4
  %v1_d224 = urem i32 %v6_d11c, 256
  store i32 %v1_d224, i32* %r2.global-to-local, align 4
  %v0_d228 = load i32, i32* @sl, align 4
  %v2_d228 = icmp eq i32 %v0_d228, 0
  store i1 %v2_d228, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_d228, 1
  br i1 %tmp69, label %dec_label_pc_d4d8, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d1fc
  %v1_d250 = urem i32 %v0_d210, 256
  %v1_d258 = urem i32 %v7_d058, 256
  %v1_d25c = urem i32 %v0_d214, 256
  %tmp70 = mul i32 %v5_d0ec, 256
  %v3_d264 = mul nuw nsw i32 %v1_d25c, 256
  %v1_d268 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v0_d214, 256
  %v4_d26c = urem i32 %tmp71, 256
  %v5_d26c = or i32 %v4_d26c, %v3_d264
  store i32 %v5_d26c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_d0ec, 256
  %v4_d270 = urem i32 %tmp72, 256
  %v5_d270 = or i32 %v4_d270, %v1_d268
  store i32 %v5_d270, i32* @r5, align 4
  %v3_d27c = mul nuw nsw i32 %v1_d258, 256
  %v1_d280 = urem i32 %v6_d11c, 2
  %tmp73 = udiv i32 %v7_d058, 256
  %v4_d284 = urem i32 %tmp73, 256
  %v5_d284 = or i32 %v4_d284, %v3_d27c
  store i32 %v5_d284, i32* @lr, align 4
  %v1_d288 = urem i32 %v6_d134, 2
  %v3_d298 = mul nuw nsw i32 %v1_d250, 256
  store i32 %v3_d298, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_d210, 256
  %v4_d2a4 = urem i32 %tmp74, 256
  %v5_d2a4 = or i32 %v4_d2a4, %v3_d298
  store i32 %v5_d2a4, i32* @r7, align 4
  %v1_d2a8 = urem i32 %v6_d14c, 2
  %v1_d2ac = urem i32 %v6_d164, 2
  %v1_d2b0 = urem i32 %v6_d17c, 2
  %v1_d2c0 = urem i32 %v6_d194, 2
  store i32 %v1_d2c0, i32* %r0.global-to-local, align 4
  store i32 %v1_d258, i32* %r2.global-to-local, align 4
  store i32 %v1_d250, i32* %r3.global-to-local, align 4
  store i32 %v1_d25c, i32* %ip.global-to-local, align 4
  %v5_d2d0 = trunc i32 %tmp73 to i8
  %v5_d2e0 = trunc i32 %v0_d214 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_d070, 16777216
  %v4_d330 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_d058, 16777216
  %v4_d348 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_d280
  %v4_d3a4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_d288
  %v4_d3b8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_d2a8
  %v4_d3cc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_d2ac
  %v4_d3e0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_d2b0
  %v3_d3f4 = and i32 %tmp81, 2
  %v7_d424 = sext i8 %v5_d2e0 to i32
  %sext77 = mul i32 %v0_d210, 16777216
  %v3_d424 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %bb76, %dec_label_pc_d240
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d2f0 = call i32 @function_14e84(i32 128, i32 1)
  store i32 %v2_d2f0, i32* %r0.global-to-local, align 4
  %v3_d2f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2f4, i32* %r2.global-to-local, align 4
  %v1_d2f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_d2f8 = load i32, i32* @r4, align 4
  %v5_d2f8 = mul i32 %v2_d2f8, 4
  %v6_d2f8 = add i32 %v5_d2f8, %v1_d2f8
  %v7_d2f8 = inttoptr i32 %v6_d2f8 to i32*
  store i32 %v2_d2f0, i32* %v7_d2f8, align 4
  %v0_d2fc = load i32, i32* %fp.global-to-local, align 4
  %v1_d2fc = load i32, i32* %r2.global-to-local, align 4
  %v4_d2fc = mul i32 %v1_d2fc, 4
  %v5_d2fc = add i32 %v4_d2fc, %v0_d2fc
  %v6_d2fc = inttoptr i32 %v5_d2fc to i32*
  %v7_d2fc = load i32, i32* %v6_d2fc, align 4
  store i32 %v7_d2fc, i32* %r4.global-to-local, align 4
  %v1_d300 = inttoptr i32 %v7_d2fc to i8*
  %v2_d300 = load i8, i8* %v1_d300, align 1
  %tmp82 = urem i8 %v2_d300, 16
  %v1_d304 = zext i8 %tmp82 to i32
  %v1_d308 = or i32 %v1_d304, 64
  store i32 %v1_d308, i32* %r3.global-to-local, align 4
  %v1_d30c = trunc i32 %v1_d308 to i8
  store i8 %v1_d30c, i8* %v1_d300, align 1
  %v0_d310 = load i32, i32* %r4.global-to-local, align 4
  %v1_d310 = inttoptr i32 %v0_d310 to i8*
  %v2_d310 = load i8, i8* %v1_d310, align 1
  %v1_d314 = and i8 %v2_d310, -16
  %v1_d318 = or i8 %v1_d314, 5
  store i32 %v1_d09c, i32* %r0.global-to-local, align 4
  store i8 %v1_d318, i8* %v1_d310, align 1
  %v2_d328 = load i32, i32* %r4.global-to-local, align 4
  %v3_d328 = add i32 %v2_d328, 1
  %v4_d328 = inttoptr i32 %v3_d328 to i8*
  store i8 %v5_d054, i8* %v4_d328, align 1
  store i32 %v4_d330, i32* %r2.global-to-local, align 4
  %v2_d334 = load i32, i32* %r4.global-to-local, align 4
  %v3_d334 = add i32 %v2_d334, 4
  %v4_d334 = inttoptr i32 %v3_d334 to i8*
  store i8 %v5_d2d0, i8* %v4_d334, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d340 = load i32, i32* %r0.global-to-local, align 4
  %v2_d340 = icmp eq i32 %v0_d340, 0
  store i1 %v2_d340, i1* %cpsr_z.global-to-local, align 1
  %v2_d344 = load i32, i32* %r4.global-to-local, align 4
  %v3_d344 = add i32 %v2_d344, 3
  %v4_d344 = inttoptr i32 %v3_d344 to i8*
  store i8 60, i8* %v4_d344, align 1
  store i32 %v4_d348, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d350 = load i32, i32* %r2.global-to-local, align 4
  %v1_d350 = trunc i32 %v0_d350 to i8
  %v2_d350 = load i32, i32* %r4.global-to-local, align 4
  %v3_d350 = add i32 %v2_d350, 8
  %v4_d350 = inttoptr i32 %v3_d350 to i8*
  store i8 %v1_d350, i8* %v4_d350, align 1
  %v0_d354 = load i32, i32* %ip.global-to-local, align 4
  %v1_d354 = trunc i32 %v0_d354 to i8
  %v2_d354 = load i32, i32* %r4.global-to-local, align 4
  %v3_d354 = add i32 %v2_d354, 9
  %v4_d354 = inttoptr i32 %v3_d354 to i8*
  store i8 %v1_d354, i8* %v4_d354, align 1
  %v0_d358 = load i32, i32* %r3.global-to-local, align 4
  %v1_d358 = trunc i32 %v0_d358 to i8
  %v2_d358 = load i32, i32* %r4.global-to-local, align 4
  %v3_d358 = add i32 %v2_d358, 2
  %v4_d358 = inttoptr i32 %v3_d358 to i8*
  store i8 %v1_d358, i8* %v4_d358, align 1
  %v3_d35c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d35c, i32* %r2.global-to-local, align 4
  %v0_d360 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d360, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d2e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d364 = load i32, i32* %r4.global-to-local, align 4
  %v4_d364 = add i32 %v3_d364, 6
  %v5_d364 = inttoptr i32 %v4_d364 to i8*
  store i8 64, i8* %v5_d364, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d2e8, %bb
  %v0_d368 = load i32, i32* %r0.global-to-local, align 4
  %v1_d368 = trunc i32 %v0_d368 to i8
  %v2_d368 = load i32, i32* %r4.global-to-local, align 4
  %v3_d368 = add i32 %v2_d368, 5
  %v4_d368 = inttoptr i32 %v3_d368 to i8*
  store i8 %v1_d368, i8* %v4_d368, align 1
  %v0_d36c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d36c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  %v3_d374 = load i32, i32* %r4.global-to-local, align 4
  %v4_d374 = add i32 %v3_d374, 7
  %v5_d374 = inttoptr i32 %v4_d374 to i8*
  store i8 0, i8* %v5_d374, align 1
  %v0_d37c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_d37c = phi i32 [ %v6_d1b0, %.thread9 ], [ %v0_d37c.pre, %bb75 ]
  %v0_d378 = load i32, i32* %r2.global-to-local, align 4
  %v3_d378 = mul i32 %v0_d378, 32
  store i32 %v3_d378, i32* %r3.global-to-local, align 4
  %v1_d37c = load i32, i32* %r4.global-to-local, align 4
  %v2_d37c = add i32 %v1_d37c, 12
  %v3_d37c = inttoptr i32 %v2_d37c to i32*
  store i32 %v0_d37c, i32* %v3_d37c, align 4
  %v0_d380 = load i32, i32* %r3.global-to-local, align 4
  %v1_d380 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_d380, -8
  %v5_d380 = add i32 %v0_d380, %tmp83
  %v1_d384 = load i32, i32* @r8, align 4
  %v2_d384 = add i32 %v1_d384, %v5_d380
  store i32 %v2_d384, i32* %r3.global-to-local, align 4
  %v1_d388 = add i32 %v2_d384, 16
  %v2_d388 = inttoptr i32 %v1_d388 to i32*
  %v3_d388 = load i32, i32* %v2_d388, align 4
  store i32 %v3_d388, i32* %r2.global-to-local, align 4
  %v0_d38c = load i32, i32* @r7, align 4
  %v1_d38c = trunc i32 %v0_d38c to i8
  %v2_d38c = load i32, i32* %r4.global-to-local, align 4
  %v3_d38c = add i32 %v2_d38c, 20
  %v4_d38c = inttoptr i32 %v3_d38c to i8*
  store i8 %v1_d38c, i8* %v4_d38c, align 1
  %v0_d390 = load i32, i32* %r2.global-to-local, align 4
  %v1_d390 = load i32, i32* %r4.global-to-local, align 4
  %v2_d390 = add i32 %v1_d390, 16
  %v3_d390 = inttoptr i32 %v2_d390 to i32*
  store i32 %v0_d390, i32* %v3_d390, align 4
  %v0_d394 = load i32, i32* %r4.global-to-local, align 4
  %v1_d394 = add i32 %v0_d394, 20
  store i32 %v1_d394, i32* %r1.global-to-local, align 4
  %v1_d398 = add i32 %v0_d394, 33
  %v2_d398 = inttoptr i32 %v1_d398 to i8*
  %v3_d398 = load i8, i8* %v2_d398, align 1
  %v4_d398 = zext i8 %v3_d398 to i32
  store i32 %v1_d280, i32* %r2.global-to-local, align 4
  %v1_d3a0 = and i32 %v4_d398, 223
  %v5_d3a4 = or i32 %v1_d3a0, %v4_d3a4
  store i32 %v5_d3a4, i32* %r3.global-to-local, align 4
  %v1_d3a8 = trunc i32 %v5_d3a4 to i8
  store i8 %v1_d3a8, i8* %v2_d398, align 1
  %v0_d3ac = load i32, i32* %r1.global-to-local, align 4
  %v1_d3ac = add i32 %v0_d3ac, 13
  %v2_d3ac = inttoptr i32 %v1_d3ac to i8*
  %v3_d3ac = load i8, i8* %v2_d3ac, align 1
  %v4_d3ac = zext i8 %v3_d3ac to i32
  store i32 %v1_d288, i32* %r3.global-to-local, align 4
  %v1_d3b4 = and i32 %v4_d3ac, 239
  %v5_d3b8 = or i32 %v1_d3b4, %v4_d3b8
  store i32 %v5_d3b8, i32* %r2.global-to-local, align 4
  %v1_d3bc = trunc i32 %v5_d3b8 to i8
  store i8 %v1_d3bc, i8* %v2_d3ac, align 1
  %v0_d3c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c0 = add i32 %v0_d3c0, 13
  %v2_d3c0 = inttoptr i32 %v1_d3c0 to i8*
  %v3_d3c0 = load i8, i8* %v2_d3c0, align 1
  %v4_d3c0 = zext i8 %v3_d3c0 to i32
  store i32 %v1_d2a8, i32* %ip.global-to-local, align 4
  %v1_d3c8 = and i32 %v4_d3c0, 247
  %v5_d3cc = or i32 %v1_d3c8, %v4_d3cc
  store i32 %v5_d3cc, i32* %r3.global-to-local, align 4
  %v1_d3d0 = trunc i32 %v5_d3cc to i8
  store i8 %v1_d3d0, i8* %v2_d3c0, align 1
  %v0_d3d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3d4 = add i32 %v0_d3d4, 13
  %v2_d3d4 = inttoptr i32 %v1_d3d4 to i8*
  %v3_d3d4 = load i8, i8* %v2_d3d4, align 1
  %v4_d3d4 = zext i8 %v3_d3d4 to i32
  store i32 %v1_d2ac, i32* %r0.global-to-local, align 4
  %v1_d3dc = and i32 %v4_d3d4, 251
  %v5_d3e0 = or i32 %v1_d3dc, %v4_d3e0
  store i32 %v5_d3e0, i32* %r2.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v5_d3e0 to i8
  store i8 %v1_d3e4, i8* %v2_d3d4, align 1
  %v0_d3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3e8 = add i32 %v0_d3e8, 13
  %v2_d3e8 = inttoptr i32 %v1_d3e8 to i8*
  %v3_d3e8 = load i8, i8* %v2_d3e8, align 1
  %v4_d3e8 = zext i8 %v3_d3e8 to i32
  store i32 %v1_d2b0, i32* %r2.global-to-local, align 4
  %v1_d3f0 = and i32 %v4_d3e8, 253
  %v4_d3f4 = or i32 %v1_d3f0, %v3_d3f4
  store i32 %v4_d3f4, i32* %r3.global-to-local, align 4
  %v1_d3f8 = trunc i32 %v4_d3f4 to i8
  store i8 %v1_d3f8, i8* %v2_d3e8, align 1
  %v0_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v1_d3fc = add i32 %v0_d3fc, 12
  %v2_d3fc = inttoptr i32 %v1_d3fc to i8*
  %v3_d3fc = load i8, i8* %v2_d3fc, align 1
  %v4_d3fc = zext i8 %v3_d3fc to i32
  store i32 %v4_d3fc, i32* %r2.global-to-local, align 4
  %v1_d400 = add i32 %v0_d3fc, 13
  %v2_d400 = inttoptr i32 %v1_d400 to i8*
  %v3_d400 = load i8, i8* %v2_d400, align 1
  %v4_d400 = zext i8 %v3_d400 to i32
  %tmp84 = urem i8 %v3_d3fc, 16
  %v1_d408 = zext i8 %tmp84 to i32
  %v1_d40c = and i32 %v4_d400, 254
  %v2_d410 = or i32 %v1_d40c, %v1_d2c0
  %v1_d414 = or i32 %v1_d408, 160
  store i32 %v1_d414, i32* %r2.global-to-local, align 4
  %v1_d418 = trunc i32 %v2_d410 to i8
  store i8 %v1_d418, i8* %v2_d400, align 1
  %v0_d41c = load i32, i32* %r2.global-to-local, align 4
  %v1_d41c = trunc i32 %v0_d41c to i8
  %v2_d41c = load i32, i32* %r1.global-to-local, align 4
  %v3_d41c = add i32 %v2_d41c, 12
  %v4_d41c = inttoptr i32 %v3_d41c to i8*
  store i8 %v1_d41c, i8* %v4_d41c, align 1
  store i32 %v3_d424, i32* %r0.global-to-local, align 4
  store i32 %v7_d424, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 3
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v5_d2e0, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 1
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r6, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 2
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  %v0_d43c = load i32, i32* @r5, align 4
  %v1_d43c = load i32, i32* %r1.global-to-local, align 4
  %v2_d43c = add i32 %v1_d43c, 4
  %v3_d43c = inttoptr i32 %v2_d43c to i32*
  store i32 %v0_d43c, i32* %v3_d43c, align 4
  %v0_d440 = load i32, i32* %ip.global-to-local, align 4
  %v1_d440 = trunc i32 %v0_d440 to i8
  %v2_d440 = load i32, i32* %r4.global-to-local, align 4
  %v3_d440 = add i32 %v2_d440, 41
  %v4_d440 = inttoptr i32 %v3_d440 to i8*
  store i8 %v1_d440, i8* %v4_d440, align 1
  %v0_d444 = load i32, i32* %r3.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r4.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 40
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = call i32 @function_10a94()
  %v1_d44c = mul i32 %v0_d448, 256
  %v1_d450 = and i32 %v1_d44c, 3840
  %v1_d454 = or i32 %v1_d450, 28672
  %v3_d45c = add nuw nsw i32 %v1_d454, 2048
  %v3_d4687 = udiv i32 %v3_d45c, 256
  store i32 %v3_d4687, i32* %r1.global-to-local, align 4
  %v0_d46c = load i32, i32* %r4.global-to-local, align 4
  %v1_d46c = add i32 %v0_d46c, 42
  store i32 %v1_d46c, i32* %r2.global-to-local, align 4
  %v4_d470 = inttoptr i32 %v1_d46c to i8*
  store i8 5, i8* %v4_d470, align 1
  %v0_d474 = load i32, i32* %r1.global-to-local, align 4
  %v1_d474 = trunc i32 %v0_d474 to i8
  %v2_d474 = load i32, i32* %r2.global-to-local, align 4
  %v3_d474 = add i32 %v2_d474, 1
  %v4_d474 = inttoptr i32 %v3_d474 to i8*
  store i8 %v1_d474, i8* %v4_d474, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_d480 = load i32, i32* %r4.global-to-local, align 4
  %v3_d480 = add i32 %v2_d480, 47
  %v4_d480 = inttoptr i32 %v3_d480 to i8*
  store i8 10, i8* %v4_d480, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d48c = load i32, i32* %r3.global-to-local, align 4
  %v1_d48c = trunc i32 %v0_d48c to i8
  %v2_d48c = load i32, i32* %r4.global-to-local, align 4
  %v3_d48c = add i32 %v2_d48c, 46
  %v4_d48c = inttoptr i32 %v3_d48c to i8*
  store i8 %v1_d48c, i8* %v4_d48c, align 1
  %v0_d490 = load i32, i32* %r2.global-to-local, align 4
  %v1_d490 = trunc i32 %v0_d490 to i8
  %v2_d490 = load i32, i32* %r4.global-to-local, align 4
  %v3_d490 = add i32 %v2_d490, 45
  %v4_d490 = inttoptr i32 %v3_d490 to i8*
  store i8 %v1_d490, i8* %v4_d490, align 1
  %v0_d494 = load i32, i32* %r0.global-to-local, align 4
  %v1_d494 = trunc i32 %v0_d494 to i8
  %v2_d494 = load i32, i32* %r4.global-to-local, align 4
  %v3_d494 = add i32 %v2_d494, 44
  %v4_d494 = inttoptr i32 %v3_d494 to i8*
  store i8 %v1_d494, i8* %v4_d494, align 1
  %v0_d498 = call i32 @function_10a94()
  store i32 %v0_d498, i32* %r0.global-to-local, align 4
  %v2_d4a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4a0 = add i32 %v2_d4a0, 56
  %v4_d4a0 = inttoptr i32 %v3_d4a0 to i8*
  store i8 1, i8* %v4_d4a0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d4b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d4b0 = add i32 %v1_d4b0, 48
  %v3_d4b0 = inttoptr i32 %v2_d4b0 to i32*
  store i32 %v0_d498, i32* %v3_d4b0, align 4
  %v0_d4b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4b4 = trunc i32 %v0_d4b4 to i8
  %v2_d4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4b4 = add i32 %v2_d4b4, 58
  %v4_d4b4 = inttoptr i32 %v3_d4b4 to i8*
  store i8 %v1_d4b4, i8* %v4_d4b4, align 1
  %v0_d4b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d4b8 = trunc i32 %v0_d4b8 to i8
  %v2_d4b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4b8 = add i32 %v2_d4b8, 59
  %v4_d4b8 = inttoptr i32 %v3_d4b8 to i8*
  store i8 %v1_d4b8, i8* %v4_d4b8, align 1
  %v0_d4bc = load i32, i32* %ip.global-to-local, align 4
  %v1_d4bc = load i32, i32* %r4.global-to-local, align 4
  %v2_d4bc = add i32 %v1_d4bc, 52
  %v3_d4bc = inttoptr i32 %v2_d4bc to i32*
  store i32 %v0_d4bc, i32* %v3_d4bc, align 4
  %v0_d4c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4c0 = trunc i32 %v0_d4c0 to i8
  %v2_d4c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d4c0 = add i32 %v2_d4c0, 57
  %v4_d4c0 = inttoptr i32 %v3_d4c0 to i8*
  store i8 %v1_d4c0, i8* %v4_d4c0, align 1
  %v3_d4c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d4c4, i32* %r3.global-to-local, align 4
  %v1_d4c8 = add i32 %v3_d4c4, 1
  store i32 %v1_d4c8, i32* @r4, align 4
  %v0_d4cc = load i32, i32* @sl, align 4
  %v9_d4cc = icmp eq i32 %v0_d4cc, %v1_d4c8
  store i1 %v9_d4cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d4c8, i32* %stack_var_-40, align 4
  %v8_d4d4 = icmp sgt i32 %v0_d4cc, %v1_d4c8
  br i1 %v8_d4d4, label %dec_label_pc_d2e8, label %dec_label_pc_d4d8

dec_label_pc_d4d8:                                ; preds = %bb76, %dec_label_pc_d1fc
  %v0_d4d8 = phi i32 [ %v0_d228, %dec_label_pc_d1fc ], [ %v0_d4cc, %bb76 ]
  %v2_d4d8 = icmp eq i32 %v0_d4d8, 0
  store i1 %v2_d4d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_d690 = icmp eq i32 %v3_d218, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_d70c = icmp eq i32 %v1_d224, 0
  %v2_d514 = icmp eq i32 %v6_d1b0, -1
  %v7_d514 = icmp eq i32 %v6_d1b0, -1
  br label %dec_label_pc_d4e0.outer

dec_label_pc_d4e0.outer:                          ; preds = %dec_label_pc_d60c, %dec_label_pc_d4d8
  %v1_d4e0.ph.in = phi i32 [ %v0_d600, %dec_label_pc_d60c ], [ %v0_d4d8, %dec_label_pc_d4d8 ]
  %v0_d4e0.ph = phi i1 [ %v2_d60c, %dec_label_pc_d60c ], [ %v2_d4d8, %dec_label_pc_d4d8 ]
  %v1_d4e0.ph = icmp slt i32 %v1_d4e0.ph.in, 0
  %v4_d4e0 = or i1 %v1_d4e0.ph, %v0_d4e0.ph
  br label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %dec_label_pc_d4e0.outer, %dec_label_pc_d4e0
  br i1 %v4_d4e0, label %dec_label_pc_d4e0, label %dec_label_pc_d4e4

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d4e0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d4f0

dec_label_pc_d4f0:                                ; preds = %dec_label_pc_d56c, %dec_label_pc_d4e4
  %v1_d500 = phi i32 [ %v1_d5fc, %dec_label_pc_d56c ], [ 0, %dec_label_pc_d4e4 ]
  %v5_d4f4 = mul i32 %v1_d500, 24
  %v1_d4f8 = load i32, i32* @r8, align 4
  %v2_d4f8 = add i32 %v1_d4f8, %v5_d4f4
  store i32 %v2_d4f8, i32* %r3.global-to-local, align 4
  %v1_d4fc = add i32 %v2_d4f8, 20
  %v2_d4fc = inttoptr i32 %v1_d4fc to i8*
  %v3_d4fc = load i8, i8* %v2_d4fc, align 1
  %v4_d4fc = zext i8 %v3_d4fc to i32
  store i32 %v4_d4fc, i32* %r2.global-to-local, align 4
  %v0_d500 = load i32, i32* %fp.global-to-local, align 4
  %v4_d500 = mul i32 %v1_d500, 4
  %v5_d500 = add i32 %v0_d500, %v4_d500
  %v6_d500 = inttoptr i32 %v5_d500 to i32*
  %v7_d500 = load i32, i32* %v6_d500, align 4
  store i32 %v7_d500, i32* @r5, align 4
  %v7_d504 = icmp eq i8 %v3_d4fc, 31
  store i1 %v7_d504, i1* %cpsr_z.global-to-local, align 1
  %v1_d508 = add i32 %v7_d500, 20
  store i32 %v1_d508, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_d4fc, 32
  br i1 %tmp85, label %dec_label_pc_d618, label %dec_label_pc_d510

dec_label_pc_d510:                                ; preds = %dec_label_pc_d4f0
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  store i1 %v7_d514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d514, label %dec_label_pc_d680, label %dec_label_pc_d51c

dec_label_pc_d51c:                                ; preds = %dec_label_pc_d618, %dec_label_pc_d510
  store i32 %v3_d218, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d690, label %dec_label_pc_d69c, label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d680.dec_label_pc_d530_crit_edge, %dec_label_pc_d51c
  %v1_d534 = phi i32 [ %v1_d534.pre, %dec_label_pc_d680.dec_label_pc_d530_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_d51c ]
  store i32 %v3_d21c, i32* %r3.global-to-local, align 4
  %v9_d534 = icmp eq i32 %v3_d21c, %v1_d534
  store i1 %v9_d534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d534, label %dec_label_pc_d6b8, label %dec_label_pc_d53c

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge, %dec_label_pc_d530
  %v1_d540 = phi i32 [ %v1_d540.pre, %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge ], [ %v1_d534, %dec_label_pc_d530 ]
  store i32 %v3_d220, i32* %ip.global-to-local, align 4
  %v9_d540 = icmp eq i32 %v3_d220, %v1_d540
  store i1 %v9_d540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d540, label %dec_label_pc_d6d4, label %dec_label_pc_d548

dec_label_pc_d548:                                ; preds = %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge, %dec_label_pc_d53c
  %v1_d54c = phi i32 [ %v1_d54c.pre, %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge ], [ %v1_d540, %dec_label_pc_d53c ]
  store i32 %v5_d0ec, i32* %r0.global-to-local, align 4
  %v9_d54c = icmp eq i32 %v5_d0ec, %v1_d54c
  store i1 %v9_d54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d54c, label %dec_label_pc_d6f0, label %dec_label_pc_d554

dec_label_pc_d554:                                ; preds = %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge, %dec_label_pc_d548
  %v1_d558 = phi i32 [ %v1_d558.pre, %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge ], [ %v1_d54c, %dec_label_pc_d548 ]
  store i32 %v6_d104, i32* %r2.global-to-local, align 4
  %v9_d558 = icmp eq i32 %v6_d104, %v1_d558
  store i1 %v9_d558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d558, label %dec_label_pc_d704, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d6f0, %dec_label_pc_d554
  store i32 %v1_d224, i32* %r3.global-to-local, align 4
  store i1 %v2_d70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d70c, label %dec_label_pc_d56c, label %dec_label_pc_d718

dec_label_pc_d56c:                                ; preds = %dec_label_pc_d560, %dec_label_pc_d704, %dec_label_pc_d718
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d570 = load i32, i32* %r7.global-to-local, align 4
  %v1_d570 = trunc i32 %v0_d570 to i8
  %v2_d570 = load i32, i32* @r5, align 4
  %v3_d570 = add i32 %v2_d570, 10
  %v4_d570 = inttoptr i32 %v3_d570 to i8*
  store i8 %v1_d570, i8* %v4_d570, align 1
  %v0_d574 = load i32, i32* %r7.global-to-local, align 4
  %v1_d574 = trunc i32 %v0_d574 to i8
  %v2_d574 = load i32, i32* @r5, align 4
  %v3_d574 = add i32 %v2_d574, 11
  %v4_d574 = inttoptr i32 %v3_d574 to i8*
  store i8 %v1_d574, i8* %v4_d574, align 1
  %v0_d578 = load i32, i32* @r5, align 4
  store i32 %v0_d578, i32* @r0, align 4
  %v2_d57c = call i32 @function_f008(i32 %v0_d578, i32 20)
  %v3_d57c = trunc i32 %v2_d57c to i8
  %v4_d58027 = udiv i32 %v2_d57c, 256
  %v1_d584 = trunc i32 %v4_d58027 to i8
  %v2_d584 = load i32, i32* @r5, align 4
  %v3_d584 = add i32 %v2_d584, 11
  %v4_d584 = inttoptr i32 %v3_d584 to i8*
  store i8 %v1_d584, i8* %v4_d584, align 1
  %v3_d588 = load i32, i32* @r5, align 4
  %v4_d588 = add i32 %v3_d588, 10
  %v5_d588 = inttoptr i32 %v4_d588 to i8*
  store i8 %v3_d57c, i8* %v5_d588, align 1
  %v0_d58c = load i32, i32* @r6, align 4
  store i32 %v0_d58c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_d598 = load i32, i32* %r7.global-to-local, align 4
  %v1_d598 = trunc i32 %v0_d598 to i8
  %v3_d598 = add i32 %v0_d58c, 16
  %v4_d598 = inttoptr i32 %v3_d598 to i8*
  store i8 %v1_d598, i8* %v4_d598, align 1
  %v0_d59c = load i32, i32* %r7.global-to-local, align 4
  %v1_d59c = trunc i32 %v0_d59c to i8
  %v2_d59c = load i32, i32* @r6, align 4
  %v3_d59c = add i32 %v2_d59c, 17
  %v4_d59c = inttoptr i32 %v3_d59c to i8*
  store i8 %v1_d59c, i8* %v4_d59c, align 1
  %v0_d5a0 = load i32, i32* @r5, align 4
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v4_d5a4 = call i32 @function_f064(i32 %v0_d5a0, i32 %v0_d58c, i32 10240, i32 40)
  %v5_d5a4 = trunc i32 %v4_d5a4 to i8
  store i32 %v4_d5a4, i32* %r0.global-to-local, align 4
  %v4_d5a828 = udiv i32 %v4_d5a4, 256
  %v1_d5ac = trunc i32 %v4_d5a828 to i8
  %v2_d5ac = load i32, i32* @r6, align 4
  %v3_d5ac = add i32 %v2_d5ac, 17
  %v4_d5ac = inttoptr i32 %v3_d5ac to i8*
  store i8 %v1_d5ac, i8* %v4_d5ac, align 1
  %v3_d5b0 = load i32, i32* @r6, align 4
  %v4_d5b0 = add i32 %v3_d5b0, 16
  %v5_d5b0 = inttoptr i32 %v4_d5b0 to i8*
  store i8 %v5_d5a4, i8* %v5_d5b0, align 1
  %v3_d5b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d5b4, i32* %r3.global-to-local, align 4
  %v0_d5b8 = load i32, i32* @r5, align 4
  %v1_d5b8 = add i32 %v0_d5b8, 20
  %v2_d5b8 = inttoptr i32 %v1_d5b8 to i32*
  %v3_d5b8 = load i32, i32* %v2_d5b8, align 4
  %v3_d5c0 = udiv i32 %v3_d5b8, 65536
  store i32 %v3_d5c0, i32* %r2.global-to-local, align 4
  %v5_d5c4 = mul i32 %v3_d5b4, 24
  %v1_d5c8 = load i32, i32* @r8, align 4
  %v2_d5c8 = add i32 %v1_d5c8, %v5_d5c4
  store i32 %v2_d5c8, i32* %ip.global-to-local, align 4
  %v3_d5cc26 = udiv i32 %v3_d5b8, 16777216
  %v1_d5d0 = trunc i32 %v3_d5cc26 to i8
  %v3_d5d0 = add i32 %v2_d5c8, 3
  %v4_d5d0 = inttoptr i32 %v3_d5d0 to i8*
  store i8 %v1_d5d0, i8* %v4_d5d0, align 1
  %v0_d5d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d5d4 = trunc i32 %v0_d5d4 to i8
  %v2_d5d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_d5d4 = add i32 %v2_d5d4, 2
  %v4_d5d4 = inttoptr i32 %v3_d5d4 to i8*
  store i8 %v1_d5d4, i8* %v4_d5d4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v0_d5dc, i32* %r1.global-to-local, align 4
  %v0_d5e0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d5e0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d5ec = load i32, i32* %ip.global-to-local, align 4
  %v6_d5f4 = inttoptr i32 %v0_d5dc to i32*
  %v7_d5f4 = call i32 @function_14b1c(i32 %v0_d5e0, i32* %v6_d5f4, i32 60, i32 16384, i32 %v0_d5ec, i32 16)
  %v3_d5f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d5f8, i32* %r3.global-to-local, align 4
  %v1_d5fc = add i32 %v3_d5f8, 1
  store i32 %v1_d5fc, i32* %r0.global-to-local, align 4
  %v0_d600 = load i32, i32* @sl, align 4
  %v9_d600 = icmp eq i32 %v0_d600, %v1_d5fc
  store i1 %v9_d600, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d5fc, i32* %stack_var_-40, align 4
  %v8_d608 = icmp sgt i32 %v0_d600, %v1_d5fc
  br i1 %v8_d608, label %dec_label_pc_d4f0, label %dec_label_pc_d60c

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d56c
  %v2_d60c = icmp eq i32 %v0_d600, 0
  store i1 %v2_d60c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d4e0.outer

dec_label_pc_d618:                                ; preds = %dec_label_pc_d4f0
  %v1_d618 = add i32 %v2_d4f8, 16
  %v2_d618 = inttoptr i32 %v1_d618 to i32*
  %v3_d618 = load i32, i32* %v2_d618, align 4
  store i32 %v3_d618, i32* %r4.global-to-local, align 4
  %v0_d61c = call i32 @function_10a94()
  store i32 %v0_d61c, i32* %r0.global-to-local, align 4
  %v3_d620 = load i32, i32* %stack_var_-40, align 4
  %v5_d628 = mul i32 %v3_d620, 24
  %v0_d62c = load i32, i32* %r4.global-to-local, align 4
  %v1_d630 = load i32, i32* @r8, align 4
  %v2_d630 = add i32 %v1_d630, %v5_d628
  store i32 %v2_d630, i32* %r1.global-to-local, align 4
  %v1_d634 = and i32 %v0_d62c, 65280
  store i32 %v1_d634, i32* %r3.global-to-local, align 4
  %v1_d62c = udiv i32 %v0_d62c, 256
  %v3_d638 = and i32 %v1_d62c, 65280
  store i32 %v3_d638, i32* %r2.global-to-local, align 4
  %v3_d63c = mul i32 %v0_d62c, 16777216
  store i32 %v3_d63c, i32* %ip.global-to-local, align 4
  %v1_d640 = add i32 %v2_d630, 20
  %v2_d640 = inttoptr i32 %v1_d640 to i8*
  %v3_d640 = load i8, i8* %v2_d640, align 1
  %v4_d640 = zext i8 %v3_d640 to i32
  %v4_d644 = mul nuw nsw i32 %v1_d634, 256
  %v5_d644 = or i32 %v4_d644, %v3_d63c
  store i32 %v5_d644, i32* %ip.global-to-local, align 4
  %v2_d64c = call i32 @llvm.bswap.i32(i32 %v0_d62c)
  %v7_d650 = lshr i32 %v0_d61c, %v4_d640
  %v8_d650 = add i32 %v7_d650, %v2_d64c
  store i32 %v8_d650, i32* %r2.global-to-local, align 4
  %v3_d65c = mul i32 %v8_d650, 16777216
  %v1_d654 = mul i32 %v8_d650, 256
  %v4_d660 = and i32 %v1_d654, 16711680
  %v5_d660 = or i32 %v4_d660, %v3_d65c
  store i32 %v5_d660, i32* %r1.global-to-local, align 4
  store i32 %v6_d1b0, i32* %r0.global-to-local, align 4
  %v2_d670 = call i32 @llvm.bswap.i32(i32 %v8_d650)
  store i32 %v2_d670, i32* %r3.global-to-local, align 4
  store i1 %v7_d514, i1* %cpsr_z.global-to-local, align 1
  %v1_d678 = load i32, i32* @r5, align 4
  %v2_d678 = add i32 %v1_d678, 16
  %v3_d678 = inttoptr i32 %v2_d678 to i32*
  store i32 %v2_d670, i32* %v3_d678, align 4
  br i1 %v2_d514, label %dec_label_pc_d680, label %dec_label_pc_d51c

dec_label_pc_d680:                                ; preds = %dec_label_pc_d618, %dec_label_pc_d510
  %v0_d680 = call i32 @function_10a94()
  store i32 %v0_d680, i32* %r0.global-to-local, align 4
  store i32 %v3_d218, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d690, i1* %cpsr_z.global-to-local, align 1
  %v1_d694 = load i32, i32* @r5, align 4
  %v2_d694 = add i32 %v1_d694, 12
  %v3_d694 = inttoptr i32 %v2_d694 to i32*
  store i32 %v0_d680, i32* %v3_d694, align 4
  br i1 %v9_d690, label %dec_label_pc_d69c, label %dec_label_pc_d680.dec_label_pc_d530_crit_edge

dec_label_pc_d680.dec_label_pc_d530_crit_edge:    ; preds = %dec_label_pc_d680
  %v1_d534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d530

dec_label_pc_d69c:                                ; preds = %dec_label_pc_d680, %dec_label_pc_d51c
  %v0_d69c = call i32 @function_10a94()
  %v1_d69c = trunc i32 %v0_d69c to i8
  store i32 %v0_d69c, i32* %r0.global-to-local, align 4
  %v4_d6a029 = udiv i32 %v0_d69c, 256
  %v1_d6a4 = trunc i32 %v4_d6a029 to i8
  %v2_d6a4 = load i32, i32* @r5, align 4
  %v3_d6a4 = add i32 %v2_d6a4, 5
  %v4_d6a4 = inttoptr i32 %v3_d6a4 to i8*
  store i8 %v1_d6a4, i8* %v4_d6a4, align 1
  store i32 %v3_d21c, i32* %r3.global-to-local, align 4
  %v1_d6ac = load i32, i32* @r4, align 4
  %v9_d6ac = icmp eq i32 %v3_d21c, %v1_d6ac
  store i1 %v9_d6ac, i1* %cpsr_z.global-to-local, align 1
  %v3_d6b0 = load i32, i32* @r5, align 4
  %v4_d6b0 = add i32 %v3_d6b0, 4
  %v5_d6b0 = inttoptr i32 %v4_d6b0 to i8*
  store i8 %v1_d69c, i8* %v5_d6b0, align 1
  %v0_d6b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6b4, label %dec_label_pc_d6b8, label %dec_label_pc_d69c.dec_label_pc_d53c_crit_edge

dec_label_pc_d69c.dec_label_pc_d53c_crit_edge:    ; preds = %dec_label_pc_d69c
  %v1_d540.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d53c

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d69c, %dec_label_pc_d530
  %v0_d6b8 = call i32 @function_10a94()
  %v1_d6b8 = trunc i32 %v0_d6b8 to i8
  store i32 %v0_d6b8, i32* %r0.global-to-local, align 4
  store i32 %v3_d220, i32* %ip.global-to-local, align 4
  %v4_d6c0 = sdiv i32 %v0_d6b8, 256
  store i32 %v4_d6c0, i32* %r3.global-to-local, align 4
  %v1_d6c4 = load i32, i32* @r4, align 4
  %v9_d6c4 = icmp eq i32 %v3_d220, %v1_d6c4
  store i1 %v9_d6c4, i1* %cpsr_z.global-to-local, align 1
  %v3_d6c8 = load i32, i32* @r5, align 4
  %v4_d6c8 = add i32 %v3_d6c8, 20
  %v5_d6c8 = inttoptr i32 %v4_d6c8 to i8*
  store i8 %v1_d6b8, i8* %v5_d6c8, align 1
  %v0_d6cc = load i32, i32* %r3.global-to-local, align 4
  %v1_d6cc = trunc i32 %v0_d6cc to i8
  %v2_d6cc = load i32, i32* @r6, align 4
  %v3_d6cc = add i32 %v2_d6cc, 1
  %v4_d6cc = inttoptr i32 %v3_d6cc to i8*
  store i8 %v1_d6cc, i8* %v4_d6cc, align 1
  %v0_d6d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6d0, label %dec_label_pc_d6d4, label %dec_label_pc_d6b8.dec_label_pc_d548_crit_edge

dec_label_pc_d6b8.dec_label_pc_d548_crit_edge:    ; preds = %dec_label_pc_d6b8
  %v1_d54c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d548

dec_label_pc_d6d4:                                ; preds = %dec_label_pc_d6b8, %dec_label_pc_d53c
  %v0_d6d4 = call i32 @function_10a94()
  %v1_d6d4 = trunc i32 %v0_d6d4 to i8
  %v4_d6d8 = sdiv i32 %v0_d6d4, 256
  store i32 %v4_d6d8, i32* %r3.global-to-local, align 4
  %v3_d6dc = load i32, i32* @r6, align 4
  %v4_d6dc = add i32 %v3_d6dc, 2
  %v5_d6dc = inttoptr i32 %v4_d6dc to i8*
  store i8 %v1_d6d4, i8* %v5_d6dc, align 1
  store i32 %v5_d0ec, i32* %r0.global-to-local, align 4
  %v1_d6e4 = load i32, i32* @r4, align 4
  %v9_d6e4 = icmp eq i32 %v5_d0ec, %v1_d6e4
  store i1 %v9_d6e4, i1* %cpsr_z.global-to-local, align 1
  %v0_d6e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d6e8 = trunc i32 %v0_d6e8 to i8
  %v2_d6e8 = load i32, i32* @r6, align 4
  %v3_d6e8 = add i32 %v2_d6e8, 3
  %v4_d6e8 = inttoptr i32 %v3_d6e8 to i8*
  store i8 %v1_d6e8, i8* %v4_d6e8, align 1
  %v0_d6ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6ec, label %dec_label_pc_d6f0, label %dec_label_pc_d6d4.dec_label_pc_d554_crit_edge

dec_label_pc_d6d4.dec_label_pc_d554_crit_edge:    ; preds = %dec_label_pc_d6d4
  %v1_d558.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d554

dec_label_pc_d6f0:                                ; preds = %dec_label_pc_d6d4, %dec_label_pc_d548
  %v0_d6f0 = call i32 @function_10a94()
  store i32 %v0_d6f0, i32* %r0.global-to-local, align 4
  store i32 %v6_d104, i32* %r2.global-to-local, align 4
  %v1_d6f8 = load i32, i32* @r4, align 4
  %v9_d6f8 = icmp eq i32 %v6_d104, %v1_d6f8
  store i1 %v9_d6f8, i1* %cpsr_z.global-to-local, align 1
  %v1_d6fc = load i32, i32* @r6, align 4
  %v2_d6fc = add i32 %v1_d6fc, 4
  %v3_d6fc = inttoptr i32 %v2_d6fc to i32*
  store i32 %v0_d6f0, i32* %v3_d6fc, align 4
  br i1 %v9_d6f8, label %dec_label_pc_d704, label %dec_label_pc_d560

dec_label_pc_d704:                                ; preds = %dec_label_pc_d6f0, %dec_label_pc_d554
  %v0_d704 = call i32 @function_10a94()
  store i32 %v0_d704, i32* %r0.global-to-local, align 4
  store i32 %v1_d224, i32* %r3.global-to-local, align 4
  store i1 %v2_d70c, i1* %cpsr_z.global-to-local, align 1
  %v1_d710 = load i32, i32* @r6, align 4
  %v2_d710 = add i32 %v1_d710, 8
  %v3_d710 = inttoptr i32 %v2_d710 to i32*
  store i32 %v0_d704, i32* %v3_d710, align 4
  br i1 %v2_d70c, label %dec_label_pc_d56c, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d560, %dec_label_pc_d704
  %v0_d718 = call i32 @function_10a94()
  %v1_d718 = trunc i32 %v0_d718 to i8
  store i32 %v0_d718, i32* %r0.global-to-local, align 4
  %v4_d71c = sdiv i32 %v0_d718, 256
  store i32 %v4_d71c, i32* %r3.global-to-local, align 4
  %v1_d720 = trunc i32 %v4_d71c to i8
  %v2_d720 = load i32, i32* @r6, align 4
  %v3_d720 = add i32 %v2_d720, 19
  %v4_d720 = inttoptr i32 %v3_d720 to i8*
  store i8 %v1_d720, i8* %v4_d720, align 1
  %v3_d724 = load i32, i32* @r6, align 4
  %v4_d724 = add i32 %v3_d724, 18
  %v5_d724 = inttoptr i32 %v4_d724 to i8*
  store i8 %v1_d718, i8* %v5_d724, align 1
  br label %dec_label_pc_d56c

dec_label_pc_d72c:                                ; preds = %dec_label_pc_d1d4
  %v0_d72c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d72c, i32* %r0.global-to-local, align 4
  %v1_d730 = call i32 @function_14284(i32 %v0_d72c)
  store i32 %v1_d730, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %dec_label_pc_cffc, %dec_label_pc_d72c
  %v29_d738 = phi i32 [ %v3_d1c4, %dec_label_pc_cffc ], [ %v1_d730, %dec_label_pc_d72c ]
  store i32 %v3_cffc, i32* %r4.global-to-local, align 4
  store i32 %v12_cffc, i32* %r7.global-to-local, align 4
  ret i32 %v29_d738

; uselistorder directives
  uselistorder i32 %v4_d71c, { 1, 0 }
  uselistorder i32 %v0_d718, { 0, 2, 1 }
  uselistorder i32 %v0_d6b8, { 0, 2, 1 }
  uselistorder i32 %v0_d69c, { 0, 2, 1 }
  uselistorder i32 %v2_d670, { 1, 0 }
  uselistorder i32 %v8_d650, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d63c, { 1, 0 }
  uselistorder i32 %v0_d62c, { 2, 0, 1, 3 }
  uselistorder i1 %v2_d60c, { 1, 0 }
  uselistorder i32 %v0_d600, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d5fc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d5a4, { 0, 2, 1 }
  uselistorder i32 %v0_d58c, { 1, 0, 2 }
  uselistorder i1 %v7_d514, { 2, 1, 0 }
  uselistorder i1 %v2_d70c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_d690, { 2, 3, 1, 0 }
  uselistorder i32 %v1_d4c8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d2e0, { 1, 0 }
  uselistorder i32 %v1_d2c0, { 1, 0 }
  uselistorder i32 %v1_d2b0, { 1, 0 }
  uselistorder i32 %v1_d2ac, { 1, 0 }
  uselistorder i32 %v1_d2a8, { 1, 0 }
  uselistorder i32 %v3_d298, { 1, 0 }
  uselistorder i32 %v1_d288, { 1, 0 }
  uselistorder i32 %v1_d280, { 1, 0 }
  uselistorder i32 %v1_d25c, { 1, 0 }
  uselistorder i32 %v1_d258, { 1, 0 }
  uselistorder i32 %v1_d250, { 1, 0 }
  uselistorder i32 %v1_d224, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d218, { 1, 2, 0, 3 }
  uselistorder i32 %v0_d214, { 3, 0, 1, 2 }
  uselistorder i32 %v0_d210, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d1f4, { 1, 0 }
  uselistorder i1 %v7_d1c8, { 1, 0 }
  uselistorder i32 %v3_d1c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_d1b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_d104, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d0ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d09c, { 1, 0 }
  uselistorder i32 %v5_d034, { 1, 0 }
  uselistorder i32 %v1_d000, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_d734, { 1, 0 }
  uselistorder label %dec_label_pc_d718, { 1, 0 }
  uselistorder label %dec_label_pc_d56c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d740(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d740:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_d740 = load i32, i32* @fp, align 4
  %v1_d744 = urem i32 %arg1, 256
  store i32 %v1_d744, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_d75c = urem i32 %arg3, 256
  store i32 %v1_d75c, i32* @r4, align 4
  %v2_d760 = call i32 @function_14e84(i32 %v1_d744, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_d760, i32* @sl, align 4
  %v0_d76c = load i32, i32* @r7, align 4
  %v2_d770 = call i32 @function_14e84(i32 %v0_d76c, i32 4)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r5, align 4
  %v0_d77c = load i32, i32* @r6, align 4
  store i32 %v0_d77c, i32* %r1.global-to-local, align 4
  store i32 %v2_d770, i32* @sb, align 4
  %v0_d78c = load i32, i32* @r4, align 4
  %v4_d790 = inttoptr i32 %v0_d77c to i32*
  %v5_d790 = call i32 @function_a4e8(i32 %v0_d78c, i32* %v4_d790, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v3_d798 = urem i32 %v5_d790, 65536
  %v0_d79c = load i32, i32* @r6, align 4
  store i32 %v0_d79c, i32* %r1.global-to-local, align 4
  %v0_d7a4 = load i32, i32* @r5, align 4
  %v0_d7a8 = load i32, i32* @r4, align 4
  %v5_d7b0 = inttoptr i32 %v0_d79c to i32*
  %v6_d7b0 = call i32 @function_a4e8(i32 %v0_d7a8, i32* %v5_d7b0, i32 6, i32 %v0_d7a4)
  %v0_d7b4 = load i32, i32* @r6, align 4
  store i32 %v0_d7b4, i32* %r1.global-to-local, align 4
  %v3_d7b8 = mul i32 %v6_d7b0, 65536
  store i32 %v3_d7b8, i32* %fp.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  %v4_d7c8 = inttoptr i32 %v0_d7b4 to i32*
  %v5_d7c8 = call i32 @function_a4e8(i32 %v0_d7c4, i32* %v4_d7c8, i32 0, i32 512)
  %v0_d7d4 = load i32, i32* @r6, align 4
  store i32 %v0_d7d4, i32* %r1.global-to-local, align 4
  %v0_d7d8 = load i32, i32* @r4, align 4
  %v3_d7e0 = urem i32 %v5_d7c8, 65536
  store i32 %v3_d7e0, i32* @r6, align 4
  %v4_d7e4 = inttoptr i32 %v0_d7d4 to i32*
  %v5_d7e4 = call i32 @function_a4e8(i32 %v0_d7d8, i32* %v4_d7e4, i32 1, i32 1)
  %v0_d7e8 = load i32, i32* %fp.global-to-local, align 4
  %v3_d7e8 = udiv i32 %v0_d7e8, 65536
  %v1_d7f0 = load i32, i32* @r5, align 4
  %v9_d7f0 = icmp eq i32 %v3_d7e8, %v1_d7f0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_d7f0, label %dec_label_pc_d818, label %bb

bb:                                               ; preds = %dec_label_pc_d740
  %v2_d804 = mul nuw nsw i32 %v3_d7e8, 256
  %v4_d808 = and i32 %v2_d804, 65280
  %v1_d80c = urem i32 %v5_d7e4, 256
  store i32 %v1_d80c, i32* @r8, align 4
  %v5_d810 = udiv i32 %v0_d7e8, 16777216
  %v6_d810 = or i32 %v4_d808, %v5_d810
  br label %dec_label_pc_d824

dec_label_pc_d818:                                ; preds = %dec_label_pc_d740
  %v1_d80c7 = urem i32 %v5_d7e4, 256
  store i32 %v1_d80c7, i32* @r8, align 4
  %v0_d818 = call i32 @function_10a94()
  %v3_d820 = urem i32 %v0_d818, 65536
  br label %dec_label_pc_d824

dec_label_pc_d824:                                ; preds = %bb, %dec_label_pc_d818
  %storemerge17 = phi i32 [ %v6_d810, %bb ], [ %v3_d820, %dec_label_pc_d818 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_d824 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_d824, 1
  br i1 %tmp41, label %dec_label_pc_d9cc.preheader, label %dec_label_pc_d82c

dec_label_pc_d9cc.preheader:                      ; preds = %dec_label_pc_d928, %dec_label_pc_d824
  %storemerge3.in12.ph = phi i32 [ %v0_d824, %dec_label_pc_d824 ], [ %v1_d880, %dec_label_pc_d928 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d994, label %dec_label_pc_d998.lr.ph

dec_label_pc_d82c:                                ; preds = %dec_label_pc_d824
  store i32 %v3_d798, i32* %r1.global-to-local, align 4
  %v3_d830 = udiv i32 %v5_d790, 256
  %v5_d83c = trunc i32 %v3_d830 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_d854 = udiv i32 %v5_d790, 65536
  store i32 %v3_d854, i32* @r4, align 4
  %v4_d864 = trunc i32 %v3_d854 to i8
  store i8 %v4_d864, i8* %stack_var_-80, align 1
  %v9_d974 = icmp eq i32 %v3_d798, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_d89c = ptrtoint i32* %stack_var_-52 to i32
  %v3_d8cc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d958

dec_label_pc_d86c:                                ; preds = %dec_label_pc_d958
  %v2_d86c = load i8, i8* %stack_var_-80, align 1
  %v3_d86c = sext i8 %v2_d86c to i32
  store i32 %v3_d86c, i32* %r1.global-to-local, align 4
  store i32 %v3_d830, i32* @r4, align 4
  %v2_d870 = load i32, i32* @r5, align 4
  %v3_d870 = add i32 %v2_d870, 2
  %v4_d870 = inttoptr i32 %v3_d870 to i8*
  store i8 %v5_d83c, i8* %v4_d870, align 1
  %v0_d874 = load i32, i32* %r1.global-to-local, align 4
  %v1_d874 = trunc i32 %v0_d874 to i8
  %v2_d874 = load i32, i32* @r5, align 4
  %v3_d874 = add i32 %v2_d874, 3
  %v4_d874 = inttoptr i32 %v3_d874 to i8*
  store i8 %v1_d874, i8* %v4_d874, align 1
  br label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %dec_label_pc_d980, %dec_label_pc_d86c
  %v1_d880 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_d890 = call i32 @function_14b80(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_d898 = icmp eq i32 %v3_d890, -1
  store i32 %v2_d89c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_d8ac = load i32, i32* @sb, align 4
  %v3_d8ac = add i32 %v2_d8ac, %stack_var_-60.0
  %v4_d8ac = inttoptr i32 %v3_d8ac to i32*
  store i32 %v3_d890, i32* %v4_d8ac, align 4
  br i1 %v7_d898, label %dec_label_pc_d9d8, label %dec_label_pc_d8b4

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d878
  store i32 2, i32* %stack_var_-52, align 4
  %v4_d8cc = call i32 @function_149b0(i32 %v3_d890, %sockaddr* %v3_d8cc, i32 16)
  %v0_d8d0 = load i32, i32* @r5, align 4
  %v1_d8d0 = add i32 %v0_d8d0, 20
  %v2_d8d0 = inttoptr i32 %v1_d8d0 to i8*
  %v3_d8d0 = load i8, i8* %v2_d8d0, align 1
  %tmp = icmp ugt i8 %v3_d8d0, 31
  br i1 %tmp, label %dec_label_pc_d928, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8b4
  %v1_d8dc = add i32 %v0_d8d0, 16
  %v2_d8dc = inttoptr i32 %v1_d8dc to i32*
  %v3_d8dc = load i32, i32* %v2_d8dc, align 4
  store i32 %v3_d8dc, i32* @r4, align 4
  %v0_d8e0 = call i32 @function_10a94()
  %v0_d8e4 = load i32, i32* @r4, align 4
  %v1_d8e8 = and i32 %v0_d8e4, 65280
  %v3_d8f0 = mul i32 %v0_d8e4, 16777216
  %v4_d8f4 = mul nuw nsw i32 %v1_d8e8, 256
  %v5_d8f4 = or i32 %v4_d8f4, %v3_d8f0
  store i32 %v5_d8f4, i32* %r1.global-to-local, align 4
  %v0_d8fc = load i32, i32* @r5, align 4
  %v1_d8fc = add i32 %v0_d8fc, 20
  %v2_d8fc = inttoptr i32 %v1_d8fc to i8*
  %v3_d8fc = load i8, i8* %v2_d8fc, align 1
  %v4_d8fc = zext i8 %v3_d8fc to i32
  %v2_d900 = call i32 @llvm.bswap.i32(i32 %v0_d8e4)
  %v7_d904 = lshr i32 %v0_d8e0, %v4_d8fc
  %v8_d904 = add i32 %v7_d904, %v2_d900
  %v3_d910 = mul i32 %v8_d904, 16777216
  %v1_d914 = and i32 %v8_d904, 65280
  %v4_d918 = mul nuw nsw i32 %v1_d914, 256
  %v5_d918 = or i32 %v4_d918, %v3_d910
  store i32 %v5_d918, i32* %r1.global-to-local, align 4
  %v2_d920 = call i32 @llvm.bswap.i32(i32 %v8_d904)
  %v2_d924 = add i32 %v0_d8fc, 4
  %v3_d924 = inttoptr i32 %v2_d924 to i32*
  store i32 %v2_d920, i32* %v3_d924, align 4
  %v0_d934.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d928

dec_label_pc_d928:                                ; preds = %dec_label_pc_d8b4, %dec_label_pc_d8dc
  %v0_d934 = phi i32 [ %v0_d8d0, %dec_label_pc_d8b4 ], [ %v0_d934.pre, %dec_label_pc_d8dc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d930 = load i32, i32* @sb, align 4
  %v2_d930 = add i32 %v1_d930, %stack_var_-60.0
  %v3_d930 = inttoptr i32 %v2_d930 to i32*
  %v4_d930 = load i32, i32* %v3_d930, align 4
  store i32 %v0_d934, i32* %r1.global-to-local, align 4
  %v3_d938 = inttoptr i32 %v0_d934 to %sockaddr*
  %v4_d938 = call i32 @function_149dc(i32 %v4_d930, %sockaddr* %v3_d938, i32 16)
  %v1_d944 = add i32 %stack_var_-60.0, 4
  %v1_d948 = load i32, i32* @r7, align 4
  %v9_d948 = icmp eq i32 %v1_d880, %v1_d948
  %v0_d950 = load i32, i32* @r5, align 4
  %v1_d950 = add i32 %v0_d950, 24
  store i32 %v1_d950, i32* @r5, align 4
  br i1 %v9_d948, label %dec_label_pc_d9cc.preheader, label %dec_label_pc_d958

dec_label_pc_d958:                                ; preds = %dec_label_pc_d928, %dec_label_pc_d82c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_d82c ], [ %v1_d944, %dec_label_pc_d928 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_d82c ], [ %v1_d880, %dec_label_pc_d928 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d964 = call i32 @function_14e84(i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32 1)
  store i32 %v3_d798, i32* %r1.global-to-local, align 4
  %v2_d978 = load i32, i32* @sl, align 4
  %v3_d978 = add i32 %v2_d978, %stack_var_-60.0
  %v4_d978 = inttoptr i32 %v3_d978 to i32*
  store i32 %v2_d964, i32* %v4_d978, align 4
  br i1 %v9_d974, label %dec_label_pc_d980, label %dec_label_pc_d86c

dec_label_pc_d980:                                ; preds = %dec_label_pc_d958
  %v0_d980 = call i32 @function_10a94()
  %v1_d980 = trunc i32 %v0_d980 to i8
  %v4_d984 = sdiv i32 %v0_d980, 256
  %v1_d988 = trunc i32 %v4_d984 to i8
  %v2_d988 = load i32, i32* @r5, align 4
  %v3_d988 = add i32 %v2_d988, 3
  %v4_d988 = inttoptr i32 %v3_d988 to i8*
  store i8 %v1_d988, i8* %v4_d988, align 1
  %v3_d98c = load i32, i32* @r5, align 4
  %v4_d98c = add i32 %v3_d98c, 2
  %v5_d98c = inttoptr i32 %v4_d98c to i8*
  store i8 %v1_d980, i8* %v5_d98c, align 1
  br label %dec_label_pc_d878

dec_label_pc_d994:                                ; preds = %dec_label_pc_d9cc.loopexit, %dec_label_pc_d9cc.preheader, %dec_label_pc_d9d0.loopexit, %dec_label_pc_d994
  br label %dec_label_pc_d994

dec_label_pc_d998:                                ; preds = %dec_label_pc_d998.lr.ph, %dec_label_pc_d9d0.loopexit
  %v0_d998 = load i32, i32* @r8, align 4
  %v2_d998 = icmp eq i32 %v0_d998, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d998, label %dec_label_pc_d9a0, label %dec_label_pc_d9e0

dec_label_pc_d9a0:                                ; preds = %dec_label_pc_d998
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d9a8

dec_label_pc_d9a8:                                ; preds = %dec_label_pc_d9a8, %dec_label_pc_d9a0
  %v0_d9b0 = phi i32 [ %v1_d9b0, %dec_label_pc_d9a8 ], [ 0, %dec_label_pc_d9a0 ]
  %v0_d9a8 = phi i32 [ %v1_d9c4, %dec_label_pc_d9a8 ], [ 0, %dec_label_pc_d9a0 ]
  %v1_d9a8 = load i32, i32* @sb, align 4
  %v2_d9a8 = add i32 %v1_d9a8, %v0_d9a8
  %v3_d9a8 = inttoptr i32 %v2_d9a8 to i32*
  %v4_d9a8 = load i32, i32* %v3_d9a8, align 4
  %v1_d9ac = load i32, i32* @sl, align 4
  %v2_d9ac = add i32 %v1_d9ac, %v0_d9a8
  %v3_d9ac = inttoptr i32 %v2_d9ac to i32*
  %v4_d9ac = load i32, i32* %v3_d9ac, align 4
  store i32 %v4_d9ac, i32* %r1.global-to-local, align 4
  %v1_d9b0 = add i32 %v0_d9b0, 1
  %v0_d9b4 = load i32, i32* @r6, align 4
  %v4_d9bc = inttoptr i32 %v4_d9ac to i32*
  %v5_d9bc = call i32 @function_14af0(i32 %v4_d9a8, i32* %v4_d9bc, i32 %v0_d9b4, i32 16384)
  %v1_d9c0 = load i32, i32* @r7, align 4
  %v9_d9c0 = icmp eq i32 %v1_d9b0, %v1_d9c0
  %v0_d9c4 = load i32, i32* @r4, align 4
  %v1_d9c4 = add i32 %v0_d9c4, 4
  store i32 %v1_d9c4, i32* @r4, align 4
  br i1 %v9_d9c0, label %dec_label_pc_d9cc.loopexit, label %dec_label_pc_d9a8

dec_label_pc_d9cc.loopexit:                       ; preds = %dec_label_pc_d9a8
  %tmp4247 = icmp slt i32 %v1_d9b0, 1
  br i1 %tmp4247, label %dec_label_pc_d994, label %dec_label_pc_d998.lr.ph

dec_label_pc_d998.lr.ph:                          ; preds = %dec_label_pc_d9cc.preheader, %dec_label_pc_d9cc.loopexit
  br label %dec_label_pc_d998

dec_label_pc_d9d0.loopexit:                       ; preds = %dec_label_pc_d9e8
  %tmp42 = icmp slt i32 %v0_da10, 1
  br i1 %tmp42, label %dec_label_pc_d994, label %dec_label_pc_d998

dec_label_pc_d9d8:                                ; preds = %dec_label_pc_d878
  store i32 %v24_d740, i32* %fp.global-to-local, align 4
  ret i32 %v3_d890

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d998
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_d9e8, %dec_label_pc_d9e0
  %v0_d9e8 = phi i32 [ %v1_da14, %dec_label_pc_d9e8 ], [ 0, %dec_label_pc_d9e0 ]
  %v1_d9e8 = load i32, i32* @sl, align 4
  %v2_d9e8 = add i32 %v1_d9e8, %v0_d9e8
  %v3_d9e8 = inttoptr i32 %v2_d9e8 to i32*
  %v4_d9e8 = load i32, i32* %v3_d9e8, align 4
  store i32 %v4_d9e8, i32* @r4, align 4
  %v0_d9ec = load i32, i32* @r6, align 4
  store i32 %v0_d9ec, i32* @r1, align 4
  %v1_d9f4 = inttoptr i32 %v4_d9e8 to i8*
  %v2_d9f4 = call i32 @function_10c70(i8* %v1_d9f4)
  %v0_d9f8 = load i32, i32* @r5, align 4
  %v1_d9f8 = add i32 %v0_d9f8, 1
  store i32 %v1_d9f8, i32* @r5, align 4
  %v0_d9fc = load i32, i32* @fp, align 4
  %v1_d9fc = load i32, i32* @sb, align 4
  %v2_d9fc = add i32 %v1_d9fc, %v0_d9fc
  %v3_d9fc = inttoptr i32 %v2_d9fc to i32*
  %v4_d9fc = load i32, i32* %v3_d9fc, align 4
  %v0_da00 = load i32, i32* @r4, align 4
  store i32 %v0_da00, i32* %r1.global-to-local, align 4
  %v0_da04 = load i32, i32* @r6, align 4
  %v4_da0c = inttoptr i32 %v0_da00 to i32*
  %v5_da0c = call i32 @function_14af0(i32 %v4_d9fc, i32* %v4_da0c, i32 %v0_da04, i32 16384)
  %v0_da10 = load i32, i32* @r5, align 4
  %v1_da10 = load i32, i32* @r7, align 4
  %v9_da10 = icmp eq i32 %v0_da10, %v1_da10
  %v0_da14 = load i32, i32* @fp, align 4
  %v1_da14 = add i32 %v0_da14, 4
  store i32 %v1_da14, i32* @fp, align 4
  br i1 %v9_da10, label %dec_label_pc_d9d0.loopexit, label %dec_label_pc_d9e8

; uselistorder directives
  uselistorder i32 %v1_da14, { 1, 0 }
  uselistorder i32 %v0_da10, { 1, 0 }
  uselistorder i32 %v1_d9c4, { 1, 0 }
  uselistorder i32 %v1_d9b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d934, { 1, 0 }
  uselistorder i32 %v8_d904, { 1, 2, 0 }
  uselistorder i32 %v0_d8e4, { 1, 0, 2 }
  uselistorder i32 %v3_d890, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d880, { 1, 2, 0 }
  uselistorder i32 %v3_d854, { 1, 0 }
  uselistorder i32 %v3_d830, { 1, 0 }
  uselistorder i32 %v1_d744, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d998.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d998, { 1, 0 }
  uselistorder label %dec_label_pc_d994, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d928, { 1, 0 }
  uselistorder label %dec_label_pc_d824, { 1, 0 }
}

define i32 @function_da24(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_da24:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_da24 = load i32, i32* @fp, align 4
  %v1_da28 = urem i32 %arg1, 256
  store i32 %v1_da28, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_da40 = urem i32 %arg3, 256
  store i32 %v1_da40, i32* @r4, align 4
  %v2_da44 = call i32 @function_14e84(i32 %v1_da28, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_da44, i32* @sl, align 4
  %v0_da50 = load i32, i32* @r7, align 4
  %v2_da54 = call i32 @function_14e84(i32 %v0_da50, i32 4)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r5, align 4
  %v0_da60 = load i32, i32* @r6, align 4
  store i32 %v0_da60, i32* %r1.global-to-local, align 4
  store i32 %v2_da54, i32* @sb, align 4
  %v0_da70 = load i32, i32* @r4, align 4
  %v4_da74 = inttoptr i32 %v0_da60 to i32*
  %v5_da74 = call i32 @function_a4e8(i32 %v0_da70, i32* %v4_da74, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v3_da7c = urem i32 %v5_da74, 65536
  %v0_da80 = load i32, i32* @r6, align 4
  store i32 %v0_da80, i32* %r1.global-to-local, align 4
  %v0_da88 = load i32, i32* @r5, align 4
  %v0_da8c = load i32, i32* @r4, align 4
  %v5_da94 = inttoptr i32 %v0_da80 to i32*
  %v6_da94 = call i32 @function_a4e8(i32 %v0_da8c, i32* %v5_da94, i32 6, i32 %v0_da88)
  %v0_da98 = load i32, i32* @r6, align 4
  store i32 %v0_da98, i32* %r1.global-to-local, align 4
  %v3_da9c = mul i32 %v6_da94, 65536
  store i32 %v3_da9c, i32* %fp.global-to-local, align 4
  %v0_daa8 = load i32, i32* @r4, align 4
  %v4_daac = inttoptr i32 %v0_da98 to i32*
  %v5_daac = call i32 @function_a4e8(i32 %v0_daa8, i32* %v4_daac, i32 0, i32 1024)
  %v0_dab8 = load i32, i32* @r6, align 4
  store i32 %v0_dab8, i32* %r1.global-to-local, align 4
  %v0_dabc = load i32, i32* @r4, align 4
  %v3_dac4 = urem i32 %v5_daac, 65536
  store i32 %v3_dac4, i32* @r6, align 4
  %v4_dac8 = inttoptr i32 %v0_dab8 to i32*
  %v5_dac8 = call i32 @function_a4e8(i32 %v0_dabc, i32* %v4_dac8, i32 1, i32 1)
  %v0_dacc = load i32, i32* %fp.global-to-local, align 4
  %v3_dacc = udiv i32 %v0_dacc, 65536
  %v1_dad4 = load i32, i32* @r5, align 4
  %v9_dad4 = icmp eq i32 %v3_dacc, %v1_dad4
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_dad4, label %dec_label_pc_dafc, label %bb

bb:                                               ; preds = %dec_label_pc_da24
  %v2_dae8 = mul nuw nsw i32 %v3_dacc, 256
  %v4_daec = and i32 %v2_dae8, 65280
  %v1_daf0 = urem i32 %v5_dac8, 256
  store i32 %v1_daf0, i32* @r8, align 4
  %v5_daf4 = udiv i32 %v0_dacc, 16777216
  %v6_daf4 = or i32 %v4_daec, %v5_daf4
  br label %dec_label_pc_db08

dec_label_pc_dafc:                                ; preds = %dec_label_pc_da24
  %v1_daf07 = urem i32 %v5_dac8, 256
  store i32 %v1_daf07, i32* @r8, align 4
  %v0_dafc = call i32 @function_10a94()
  %v3_db04 = urem i32 %v0_dafc, 65536
  br label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %bb, %dec_label_pc_dafc
  %storemerge17 = phi i32 [ %v6_daf4, %bb ], [ %v3_db04, %dec_label_pc_dafc ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_db08 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_db08, 1
  br i1 %tmp41, label %dec_label_pc_dcb0.preheader, label %dec_label_pc_db10

dec_label_pc_dcb0.preheader:                      ; preds = %dec_label_pc_dc0c, %dec_label_pc_db08
  %storemerge3.in12.ph = phi i32 [ %v0_db08, %dec_label_pc_db08 ], [ %v1_db64, %dec_label_pc_dc0c ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_dc78, label %dec_label_pc_dc7c.lr.ph

dec_label_pc_db10:                                ; preds = %dec_label_pc_db08
  store i32 %v3_da7c, i32* %r1.global-to-local, align 4
  %v3_db14 = udiv i32 %v5_da74, 256
  %v5_db20 = trunc i32 %v3_db14 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_db38 = udiv i32 %v5_da74, 65536
  store i32 %v3_db38, i32* @r4, align 4
  %v4_db48 = trunc i32 %v3_db38 to i8
  store i8 %v4_db48, i8* %stack_var_-80, align 1
  %v9_dc58 = icmp eq i32 %v3_da7c, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_db80 = ptrtoint i32* %stack_var_-52 to i32
  %v3_dbb0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_dc3c

dec_label_pc_db50:                                ; preds = %dec_label_pc_dc3c
  %v2_db50 = load i8, i8* %stack_var_-80, align 1
  %v3_db50 = sext i8 %v2_db50 to i32
  store i32 %v3_db50, i32* %r1.global-to-local, align 4
  store i32 %v3_db14, i32* @r4, align 4
  %v2_db54 = load i32, i32* @r5, align 4
  %v3_db54 = add i32 %v2_db54, 2
  %v4_db54 = inttoptr i32 %v3_db54 to i8*
  store i8 %v5_db20, i8* %v4_db54, align 1
  %v0_db58 = load i32, i32* %r1.global-to-local, align 4
  %v1_db58 = trunc i32 %v0_db58 to i8
  %v2_db58 = load i32, i32* @r5, align 4
  %v3_db58 = add i32 %v2_db58, 3
  %v4_db58 = inttoptr i32 %v3_db58 to i8*
  store i8 %v1_db58, i8* %v4_db58, align 1
  br label %dec_label_pc_db5c

dec_label_pc_db5c:                                ; preds = %dec_label_pc_dc64, %dec_label_pc_db50
  %v1_db64 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_db74 = call i32 @function_14b80(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_db7c = icmp eq i32 %v3_db74, -1
  store i32 %v2_db80, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_db90 = load i32, i32* @sb, align 4
  %v3_db90 = add i32 %v2_db90, %stack_var_-60.0
  %v4_db90 = inttoptr i32 %v3_db90 to i32*
  store i32 %v3_db74, i32* %v4_db90, align 4
  br i1 %v7_db7c, label %dec_label_pc_dcbc, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db5c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_dbb0 = call i32 @function_149b0(i32 %v3_db74, %sockaddr* %v3_dbb0, i32 16)
  %v0_dbb4 = load i32, i32* @r5, align 4
  %v1_dbb4 = add i32 %v0_dbb4, 20
  %v2_dbb4 = inttoptr i32 %v1_dbb4 to i8*
  %v3_dbb4 = load i8, i8* %v2_dbb4, align 1
  %tmp = icmp ugt i8 %v3_dbb4, 31
  br i1 %tmp, label %dec_label_pc_dc0c, label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db98
  %v1_dbc0 = add i32 %v0_dbb4, 16
  %v2_dbc0 = inttoptr i32 %v1_dbc0 to i32*
  %v3_dbc0 = load i32, i32* %v2_dbc0, align 4
  store i32 %v3_dbc0, i32* @r4, align 4
  %v0_dbc4 = call i32 @function_10a94()
  %v0_dbc8 = load i32, i32* @r4, align 4
  %v1_dbcc = and i32 %v0_dbc8, 65280
  %v3_dbd4 = mul i32 %v0_dbc8, 16777216
  %v4_dbd8 = mul nuw nsw i32 %v1_dbcc, 256
  %v5_dbd8 = or i32 %v4_dbd8, %v3_dbd4
  store i32 %v5_dbd8, i32* %r1.global-to-local, align 4
  %v0_dbe0 = load i32, i32* @r5, align 4
  %v1_dbe0 = add i32 %v0_dbe0, 20
  %v2_dbe0 = inttoptr i32 %v1_dbe0 to i8*
  %v3_dbe0 = load i8, i8* %v2_dbe0, align 1
  %v4_dbe0 = zext i8 %v3_dbe0 to i32
  %v2_dbe4 = call i32 @llvm.bswap.i32(i32 %v0_dbc8)
  %v7_dbe8 = lshr i32 %v0_dbc4, %v4_dbe0
  %v8_dbe8 = add i32 %v7_dbe8, %v2_dbe4
  %v3_dbf4 = mul i32 %v8_dbe8, 16777216
  %v1_dbf8 = and i32 %v8_dbe8, 65280
  %v4_dbfc = mul nuw nsw i32 %v1_dbf8, 256
  %v5_dbfc = or i32 %v4_dbfc, %v3_dbf4
  store i32 %v5_dbfc, i32* %r1.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe8)
  %v2_dc08 = add i32 %v0_dbe0, 4
  %v3_dc08 = inttoptr i32 %v2_dc08 to i32*
  store i32 %v2_dc04, i32* %v3_dc08, align 4
  %v0_dc18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_db98, %dec_label_pc_dbc0
  %v0_dc18 = phi i32 [ %v0_dbb4, %dec_label_pc_db98 ], [ %v0_dc18.pre, %dec_label_pc_dbc0 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_dc14 = load i32, i32* @sb, align 4
  %v2_dc14 = add i32 %v1_dc14, %stack_var_-60.0
  %v3_dc14 = inttoptr i32 %v2_dc14 to i32*
  %v4_dc14 = load i32, i32* %v3_dc14, align 4
  store i32 %v0_dc18, i32* %r1.global-to-local, align 4
  %v3_dc1c = inttoptr i32 %v0_dc18 to %sockaddr*
  %v4_dc1c = call i32 @function_149dc(i32 %v4_dc14, %sockaddr* %v3_dc1c, i32 16)
  %v1_dc28 = add i32 %stack_var_-60.0, 4
  %v1_dc2c = load i32, i32* @r7, align 4
  %v9_dc2c = icmp eq i32 %v1_db64, %v1_dc2c
  %v0_dc34 = load i32, i32* @r5, align 4
  %v1_dc34 = add i32 %v0_dc34, 24
  store i32 %v1_dc34, i32* @r5, align 4
  br i1 %v9_dc2c, label %dec_label_pc_dcb0.preheader, label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc0c, %dec_label_pc_db10
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_db10 ], [ %v1_dc28, %dec_label_pc_dc0c ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_db10 ], [ %v1_db64, %dec_label_pc_dc0c ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dc48 = call i32 @function_14e84(i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32 1)
  store i32 %v3_da7c, i32* %r1.global-to-local, align 4
  %v2_dc5c = load i32, i32* @sl, align 4
  %v3_dc5c = add i32 %v2_dc5c, %stack_var_-60.0
  %v4_dc5c = inttoptr i32 %v3_dc5c to i32*
  store i32 %v2_dc48, i32* %v4_dc5c, align 4
  br i1 %v9_dc58, label %dec_label_pc_dc64, label %dec_label_pc_db50

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc3c
  %v0_dc64 = call i32 @function_10a94()
  %v1_dc64 = trunc i32 %v0_dc64 to i8
  %v4_dc68 = sdiv i32 %v0_dc64, 256
  %v1_dc6c = trunc i32 %v4_dc68 to i8
  %v2_dc6c = load i32, i32* @r5, align 4
  %v3_dc6c = add i32 %v2_dc6c, 3
  %v4_dc6c = inttoptr i32 %v3_dc6c to i8*
  store i8 %v1_dc6c, i8* %v4_dc6c, align 1
  %v3_dc70 = load i32, i32* @r5, align 4
  %v4_dc70 = add i32 %v3_dc70, 2
  %v5_dc70 = inttoptr i32 %v4_dc70 to i8*
  store i8 %v1_dc64, i8* %v5_dc70, align 1
  br label %dec_label_pc_db5c

dec_label_pc_dc78:                                ; preds = %dec_label_pc_dcb0.loopexit, %dec_label_pc_dcb0.preheader, %dec_label_pc_dcb4.loopexit, %dec_label_pc_dc78
  br label %dec_label_pc_dc78

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc7c.lr.ph, %dec_label_pc_dcb4.loopexit
  %v0_dc7c = load i32, i32* @r8, align 4
  %v2_dc7c = icmp eq i32 %v0_dc7c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_dc7c, label %dec_label_pc_dc84, label %dec_label_pc_dcc4

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dc7c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc8c, %dec_label_pc_dc84
  %v0_dc94 = phi i32 [ %v1_dc94, %dec_label_pc_dc8c ], [ 0, %dec_label_pc_dc84 ]
  %v0_dc8c = phi i32 [ %v1_dca8, %dec_label_pc_dc8c ], [ 0, %dec_label_pc_dc84 ]
  %v1_dc8c = load i32, i32* @sb, align 4
  %v2_dc8c = add i32 %v1_dc8c, %v0_dc8c
  %v3_dc8c = inttoptr i32 %v2_dc8c to i32*
  %v4_dc8c = load i32, i32* %v3_dc8c, align 4
  %v1_dc90 = load i32, i32* @sl, align 4
  %v2_dc90 = add i32 %v1_dc90, %v0_dc8c
  %v3_dc90 = inttoptr i32 %v2_dc90 to i32*
  %v4_dc90 = load i32, i32* %v3_dc90, align 4
  store i32 %v4_dc90, i32* %r1.global-to-local, align 4
  %v1_dc94 = add i32 %v0_dc94, 1
  %v0_dc98 = load i32, i32* @r6, align 4
  %v4_dca0 = inttoptr i32 %v4_dc90 to i32*
  %v5_dca0 = call i32 @function_14af0(i32 %v4_dc8c, i32* %v4_dca0, i32 %v0_dc98, i32 16384)
  %v1_dca4 = load i32, i32* @r7, align 4
  %v9_dca4 = icmp eq i32 %v1_dc94, %v1_dca4
  %v0_dca8 = load i32, i32* @r4, align 4
  %v1_dca8 = add i32 %v0_dca8, 4
  store i32 %v1_dca8, i32* @r4, align 4
  br i1 %v9_dca4, label %dec_label_pc_dcb0.loopexit, label %dec_label_pc_dc8c

dec_label_pc_dcb0.loopexit:                       ; preds = %dec_label_pc_dc8c
  %tmp4247 = icmp slt i32 %v1_dc94, 1
  br i1 %tmp4247, label %dec_label_pc_dc78, label %dec_label_pc_dc7c.lr.ph

dec_label_pc_dc7c.lr.ph:                          ; preds = %dec_label_pc_dcb0.preheader, %dec_label_pc_dcb0.loopexit
  br label %dec_label_pc_dc7c

dec_label_pc_dcb4.loopexit:                       ; preds = %dec_label_pc_dccc
  %tmp42 = icmp slt i32 %v0_dcf4, 1
  br i1 %tmp42, label %dec_label_pc_dc78, label %dec_label_pc_dc7c

dec_label_pc_dcbc:                                ; preds = %dec_label_pc_db5c
  store i32 %v24_da24, i32* %fp.global-to-local, align 4
  ret i32 %v3_db74

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dc7c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dcc4
  %v0_dccc = phi i32 [ %v1_dcf8, %dec_label_pc_dccc ], [ 0, %dec_label_pc_dcc4 ]
  %v1_dccc = load i32, i32* @sl, align 4
  %v2_dccc = add i32 %v1_dccc, %v0_dccc
  %v3_dccc = inttoptr i32 %v2_dccc to i32*
  %v4_dccc = load i32, i32* %v3_dccc, align 4
  store i32 %v4_dccc, i32* @r4, align 4
  %v0_dcd0 = load i32, i32* @r6, align 4
  store i32 %v0_dcd0, i32* @r1, align 4
  %v1_dcd8 = inttoptr i32 %v4_dccc to i8*
  %v2_dcd8 = call i32 @function_10c70(i8* %v1_dcd8)
  %v0_dcdc = load i32, i32* @r5, align 4
  %v1_dcdc = add i32 %v0_dcdc, 1
  store i32 %v1_dcdc, i32* @r5, align 4
  %v0_dce0 = load i32, i32* @fp, align 4
  %v1_dce0 = load i32, i32* @sb, align 4
  %v2_dce0 = add i32 %v1_dce0, %v0_dce0
  %v3_dce0 = inttoptr i32 %v2_dce0 to i32*
  %v4_dce0 = load i32, i32* %v3_dce0, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r1.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r6, align 4
  %v4_dcf0 = inttoptr i32 %v0_dce4 to i32*
  %v5_dcf0 = call i32 @function_14af0(i32 %v4_dce0, i32* %v4_dcf0, i32 %v0_dce8, i32 16384)
  %v0_dcf4 = load i32, i32* @r5, align 4
  %v1_dcf4 = load i32, i32* @r7, align 4
  %v9_dcf4 = icmp eq i32 %v0_dcf4, %v1_dcf4
  %v0_dcf8 = load i32, i32* @fp, align 4
  %v1_dcf8 = add i32 %v0_dcf8, 4
  store i32 %v1_dcf8, i32* @fp, align 4
  br i1 %v9_dcf4, label %dec_label_pc_dcb4.loopexit, label %dec_label_pc_dccc

; uselistorder directives
  uselistorder i32 %v1_dcf8, { 1, 0 }
  uselistorder i32 %v0_dcf4, { 1, 0 }
  uselistorder i32 %v1_dca8, { 1, 0 }
  uselistorder i32 %v1_dc94, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_dc18, { 1, 0 }
  uselistorder i32 %v8_dbe8, { 1, 2, 0 }
  uselistorder i32 %v0_dbc8, { 1, 0, 2 }
  uselistorder i32 %v3_db74, { 1, 2, 3, 0 }
  uselistorder i32 %v1_db64, { 1, 2, 0 }
  uselistorder i32 %v3_db38, { 1, 0 }
  uselistorder i32 %v3_db14, { 1, 0 }
  uselistorder i32 %v1_da28, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_dc7c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_dc7c, { 1, 0 }
  uselistorder label %dec_label_pc_dc78, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_dc0c, { 1, 0 }
  uselistorder label %dec_label_pc_db08, { 1, 0 }
}

define i32 @function_dd08(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dd08:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_dd08 = load i32, i32* @sb, align 4
  %v24_dd08 = load i32, i32* @fp, align 4
  %v1_dd0c = urem i32 %arg1, 256
  store i32 %v1_dd0c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_dd0c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_dd24 = urem i32 %arg3, 256
  store i32 %v1_dd24, i32* @r4, align 4
  %v2_dd28 = call i32 @function_14e84(i32 %v1_dd0c, i32 4)
  %v0_dd2c = load i32, i32* @r5, align 4
  store i32 %v0_dd2c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd3c = load i32, i32* @r4, align 4
  store i32 %v0_dd3c, i32* %r0.global-to-local, align 4
  %v5_dd40 = inttoptr i32 %v0_dd2c to i32*
  %v6_dd40 = call i32 @function_a4e8(i32 %v0_dd3c, i32* %v5_dd40, i32 2, i32 0)
  %v1_dd4c = urem i32 %v6_dd40, 256
  store i32 %v1_dd4c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd58 = load i32, i32* @r5, align 4
  store i32 %v0_dd58, i32* %r1.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r4, align 4
  store i32 %v0_dd5c, i32* %r0.global-to-local, align 4
  %v5_dd60 = trunc i32 %v6_dd40 to i8
  %v6_dd64 = inttoptr i32 %v0_dd58 to i32*
  %v7_dd64 = call i32 @function_a4e8(i32 %v0_dd5c, i32* %v6_dd64, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_dd64, i32* %fp.global-to-local, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 4, i32 64)
  %v1_dd84 = urem i32 %v5_dd7c, 256
  store i32 %v1_dd84, i32* %ip.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd94 = load i32, i32* @r4, align 4
  store i32 %v0_dd94, i32* %r0.global-to-local, align 4
  %v5_dd98 = trunc i32 %v5_dd7c to i8
  %v6_dd9c = inttoptr i32 %v0_dd88 to i32*
  %v7_dd9c = call i32 @function_a4e8(i32 %v0_dd94, i32* %v6_dd9c, i32 5, i32 0)
  %v1_dda8 = urem i32 %v7_dd9c, 256
  store i32 %v1_dda8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ddb4 = load i32, i32* @r5, align 4
  store i32 %v0_ddb4, i32* %r1.global-to-local, align 4
  %v0_ddb8 = load i32, i32* @r4, align 4
  store i32 %v0_ddb8, i32* %r0.global-to-local, align 4
  %v5_ddc0 = inttoptr i32 %v0_ddb4 to i32*
  %v6_ddc0 = call i32 @function_a4e8(i32 %v0_ddb8, i32* %v5_ddc0, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_ddc8 = load i32, i32* @r5, align 4
  store i32 %v0_ddc8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ddc0, i32* @r7, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r0.global-to-local, align 4
  %v4_dddc = inttoptr i32 %v0_ddc8 to i32*
  %v5_dddc = call i32 @function_a4e8(i32 %v0_ddd8, i32* %v4_dddc, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_dde0 = load i32, i32* @r5, align 4
  store i32 %v0_dde0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_dddc, i32* %sb.global-to-local, align 4
  %v0_ddf0 = load i32, i32* @r4, align 4
  store i32 %v0_ddf0, i32* %r0.global-to-local, align 4
  %v4_ddf4 = inttoptr i32 %v0_dde0 to i32*
  %v5_ddf4 = call i32 @function_a4e8(i32 %v0_ddf0, i32* %v4_ddf4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_de00 = load i32, i32* @r5, align 4
  store i32 %v0_de00, i32* %r1.global-to-local, align 4
  store i32 %v5_ddf4, i32* @r6, align 4
  %v0_de08 = load i32, i32* @r4, align 4
  store i32 %v0_de08, i32* %r0.global-to-local, align 4
  %v4_de0c = inttoptr i32 %v0_de00 to i32*
  %v5_de0c = call i32 @function_a4e8(i32 %v0_de08, i32* %v4_de0c, i32 1, i32 1)
  %v2_de18 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_de18, i32* %r3.global-to-local, align 4
  %v1_de1c = urem i32 %v5_de0c, 256
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  %v0_de20 = load i32, i32* @r5, align 4
  store i32 %v0_de20, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_de28 = load i32, i32* @r4, align 4
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v5_de30 = inttoptr i32 %v0_de20 to i32*
  %v6_de30 = call i32 @function_a4e8(i32 %v0_de28, i32* %v5_de30, i32 25, i32 %v2_de18)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_de44 = call i32 @function_14b80(i32 2, i32 3, i32 17)
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v7_de48 = icmp eq i32 %v3_de44, -1
  store i1 %v7_de48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de48, label %dec_label_pc_e270, label %dec_label_pc_de54

dec_label_pc_de54:                                ; preds = %dec_label_pc_dd08
  store i32 1, i32* %stack_var_-40, align 4
  %v6_de5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_de5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_de70 = call i32 @function_14b50(i32 %v3_de44, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_de70, i32* %r0.global-to-local, align 4
  %v7_de74 = icmp eq i32 %v6_de70, -1
  store i1 %v7_de74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de74, label %dec_label_pc_e268, label %dec_label_pc_de7c

dec_label_pc_de7c:                                ; preds = %dec_label_pc_de54
  %v0_de7c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_de88 = urem i32 %v0_de7c, 65536
  store i32 %v3_de88, i32* %r2.global-to-local, align 4
  %v3_de8c = icmp ugt i32 %v3_de88, 1459
  %v9_de8c = icmp eq i32 %v3_de88, 1460
  store i1 %v9_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_de8c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_de7c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_de7c, %bb
  %v0_de94 = phi i32 [ %v3_de88, %dec_label_pc_de7c ], [ 1460, %bb ]
  %v0_de98 = load i32, i32* %fp.global-to-local, align 4
  %v3_de98 = mul i32 %v0_de98, 65536
  store i32 %v3_de98, i32* %r0.global-to-local, align 4
  %v3_de9c = urem i32 %v0_de98, 65536
  store i32 %v3_de9c, i32* %r2.global-to-local, align 4
  %v0_dea0 = load i32, i32* @sl, align 4
  %v2_dea0 = icmp eq i32 %v0_dea0, 0
  store i1 %v2_dea0, i1* %cpsr_z.global-to-local, align 1
  %v0_dea4 = load i32, i32* %sb.global-to-local, align 4
  %v0_dea8 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_dea0, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_de94, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_ded0 = phi i32 [ %v3_de9c, %bb71 ], [ %v0_de94, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_deb8 = urem i32 %v0_dea8, 65536
  store i32 %v3_deb8, i32* %r3.global-to-local, align 4
  %v3_debc = urem i32 %v0_dea4, 65536
  store i32 %v3_debc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_ded8

.thread:                                          ; preds = %bb74
  %v6_decc = add nsw i32 %v5_ded0, 28
  store i32 %v6_decc, i32* @fp, align 4
  %v6_ded0 = add nsw i32 %v5_ded0, 8
  store i32 %v6_ded0, i32* @sb, align 4
  br label %dec_label_pc_e04c

dec_label_pc_ded8:                                ; preds = %bb74
  %v1_dedc = add nuw nsw i32 %v0_de94, 28
  store i32 %v1_dedc, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_dedc, 256
  %v1_dee8 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_de98, 256
  %v3_deec = urem i32 %tmp76, 256
  %v2_df00 = icmp eq i32 %v1_dda8, 0
  store i1 %v2_df00, i1* %cpsr_z.global-to-local, align 1
  %v1_df04 = urem i32 %v0_de98, 256
  %v1_df0c = add nuw nsw i32 %v0_de94, 8
  store i32 %v1_df0c, i32* @sb, align 4
  %v1_df14 = urem i32 %v0_dea8, 256
  %v1_df18 = urem i32 %v0_dea4, 256
  store i32 %v1_df18, i32* %ip.global-to-local, align 4
  store i32 %v1_dee8, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_df0c, 256
  %v4_df24 = mul nuw nsw i32 %v1_df04, 256
  %v5_df24 = or i32 %v4_df24, %v3_deec
  store i32 %v5_df24, i32* %r0.global-to-local, align 4
  %v3_df28 = mul nuw nsw i32 %v1_df14, 256
  store i32 %v3_df28, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_dea4, 256
  %v3_df2c = urem i32 %tmp78, 256
  %v1_df30 = and i32 %tmp77, 65280
  store i32 %v1_df30, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_dedc, 256
  %v4_df34 = urem i32 %tmp79, 256
  %v5_df34 = or i32 %v4_df34, %v1_dee8
  store i32 %v5_df34, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_dea8, 256
  %v4_df38 = urem i32 %tmp80, 256
  %v5_df38 = or i32 %v4_df38, %v3_df28
  store i32 %v5_df38, i32* @r4, align 4
  %v5_df3c = trunc i32 %tmp79 to i8
  %v5_df40 = trunc i32 %tmp76 to i8
  %v4_df44 = mul nuw nsw i32 %v1_df18, 256
  %v5_df44 = or i32 %v4_df44, %v3_df2c
  store i32 %v5_df44, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_df0c, 256
  %v4_df48 = urem i32 %tmp81, 256
  %v5_df48 = or i32 %v4_df48, %v1_df30
  store i32 %v5_df48, i32* @r7, align 4
  br i1 %v2_df00, label %dec_label_pc_df50, label %dec_label_pc_e278

dec_label_pc_df50:                                ; preds = %dec_label_pc_ded8
  %v3_df5036 = udiv i32 %v1_dee8, 256
  store i32 %v3_df5036, i32* %ip.global-to-local, align 4
  store i32 %v1_df04, i32* %r0.global-to-local, align 4
  store i32 %v1_df14, i32* %r1.global-to-local, align 4
  store i32 %v1_df18, i32* %r2.global-to-local, align 4
  %v3_df6037 = udiv i32 %v1_df30, 256
  store i32 %v3_df6037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_dfc4 = sext i8 %v5_dd60 to i32
  %v4_e004 = sext i8 %v5_df40 to i32
  %sext15 = mul i32 %v0_de98, 16777216
  %v4_e008 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_dea8, 16777216
  %v4_e020 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_df0c, 16777216
  %v4_e024 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_dea4, 16777216
  %v4_e028 = sdiv i32 %sext18, 16777216
  %v1_e010 = trunc i32 %v1_dedc to i8
  %v1_e030 = trunc i32 %v4_e024 to i8
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df7c, %dec_label_pc_df50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_df88 = call i32 @function_14e84(i32 1510, i32 1)
  store i32 %v2_df88, i32* %r0.global-to-local, align 4
  store i32 %v2_dd28, i32* %ip.global-to-local, align 4
  %v3_df90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_df90, i32* %r2.global-to-local, align 4
  %v2_df94 = load i32, i32* @r6, align 4
  %v5_df94 = mul i32 %v2_df94, 4
  %v6_df94 = add i32 %v5_df94, %v2_dd28
  %v7_df94 = inttoptr i32 %v6_df94 to i32*
  store i32 %v2_df88, i32* %v7_df94, align 4
  %v0_df98 = load i32, i32* %ip.global-to-local, align 4
  %v1_df98 = load i32, i32* %r2.global-to-local, align 4
  %v4_df98 = mul i32 %v1_df98, 4
  %v5_df98 = add i32 %v4_df98, %v0_df98
  %v6_df98 = inttoptr i32 %v5_df98 to i32*
  %v7_df98 = load i32, i32* %v6_df98, align 4
  store i32 %v7_df98, i32* %r1.global-to-local, align 4
  %v1_df9c = inttoptr i32 %v7_df98 to i8*
  %v2_df9c = load i8, i8* %v1_df9c, align 1
  %tmp = urem i8 %v2_df9c, 16
  %v1_dfa0 = zext i8 %tmp to i32
  %v1_dfa4 = or i32 %v1_dfa0, 64
  store i32 %v1_dfa4, i32* %r3.global-to-local, align 4
  %v1_dfa8 = trunc i32 %v1_dfa4 to i8
  store i8 %v1_dfa8, i8* %v1_df9c, align 1
  %v0_dfac = load i32, i32* %r1.global-to-local, align 4
  %v1_dfac = inttoptr i32 %v0_dfac to i8*
  %v2_dfac = load i8, i8* %v1_dfac, align 1
  %v3_dfac = zext i8 %v2_dfac to i32
  %v1_dfb0 = and i32 %v3_dfac, 240
  %v1_dfb4 = or i32 %v1_dfb0, 5
  store i32 %v1_dfb4, i32* %r2.global-to-local, align 4
  %v3_dfbc = add i32 %v0_dfac, 9
  %v4_dfbc = inttoptr i32 %v3_dfbc to i8*
  store i8 17, i8* %v4_dfbc, align 1
  %v0_dfc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dfc0 = trunc i32 %v0_dfc0 to i8
  %v2_dfc0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfc0 = inttoptr i32 %v2_dfc0 to i8*
  store i8 %v1_dfc0, i8* %v3_dfc0, align 1
  store i32 %v4_dfc4, i32* %r0.global-to-local, align 4
  %v2_dfc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfc8 = add i32 %v2_dfc8, 1
  %v4_dfc8 = inttoptr i32 %v3_dfc8 to i8*
  store i8 %v5_dd60, i8* %v4_dfc8, align 1
  %v2_dfd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dfd0 = add i32 %v2_dfd0, 8
  %v4_dfd0 = inttoptr i32 %v3_dfd0 to i8*
  store i8 %v5_dd98, i8* %v4_dfd0, align 1
  %v3_dfd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dfd4, i32* %r2.global-to-local, align 4
  store i32 %v6_de30, i32* %ip.global-to-local, align 4
  %v3_dfdc = mul i32 %v3_dfd4, 32
  store i32 %v3_dfdc, i32* %r3.global-to-local, align 4
  %v1_dfe0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dfe0 = add i32 %v1_dfe0, 12
  %v3_dfe0 = inttoptr i32 %v2_dfe0 to i32*
  store i32 %v6_de30, i32* %v3_dfe0, align 4
  %v0_dfe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dfe4 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_dfe4, -8
  %v5_dfe4 = add i32 %v0_dfe4, %tmp83
  %v1_dfe8 = load i32, i32* @r8, align 4
  %v2_dfe8 = add i32 %v5_dfe4, %v1_dfe8
  store i32 %v2_dfe8, i32* %r3.global-to-local, align 4
  %v1_dfec = add i32 %v2_dfe8, 16
  %v2_dfec = inttoptr i32 %v1_dfec to i32*
  %v3_dfec = load i32, i32* %v2_dfec, align 4
  %v1_dff0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dff0 = add i32 %v1_dff0, 16
  %v3_dff0 = inttoptr i32 %v2_dff0 to i32*
  store i32 %v3_dfec, i32* %v3_dff0, align 4
  %v0_dff8 = load i32, i32* %r2.global-to-local, align 4
  %v1_dff8 = add i32 %v0_dff8, 1
  store i32 %v1_dff8, i32* @r6, align 4
  %v2_dffc = load i32, i32* %r1.global-to-local, align 4
  %v3_dffc = add i32 %v2_dffc, 2
  %v4_dffc = inttoptr i32 %v3_dffc to i8*
  store i8 %v5_df3c, i8* %v4_dffc, align 1
  store i32 %v4_e004, i32* %ip.global-to-local, align 4
  store i32 %v4_e008, i32* %r0.global-to-local, align 4
  %v0_e00c = load i32, i32* %r1.global-to-local, align 4
  %v1_e00c = add i32 %v0_e00c, 20
  store i32 %v1_e00c, i32* %r3.global-to-local, align 4
  %v3_e010 = add i32 %v0_e00c, 3
  %v4_e010 = inttoptr i32 %v3_e010 to i8*
  store i8 %v1_e010, i8* %v4_e010, align 1
  %v0_e014 = load i32, i32* %ip.global-to-local, align 4
  %v1_e014 = trunc i32 %v0_e014 to i8
  %v2_e014 = load i32, i32* %r1.global-to-local, align 4
  %v3_e014 = add i32 %v2_e014, 4
  %v4_e014 = inttoptr i32 %v3_e014 to i8*
  store i8 %v1_e014, i8* %v4_e014, align 1
  %v0_e018 = load i32, i32* %r0.global-to-local, align 4
  %v1_e018 = trunc i32 %v0_e018 to i8
  %v2_e018 = load i32, i32* %r1.global-to-local, align 4
  %v3_e018 = add i32 %v2_e018, 5
  %v4_e018 = inttoptr i32 %v3_e018 to i8*
  store i8 %v1_e018, i8* %v4_e018, align 1
  %v0_e01c = load i32, i32* @r4, align 4
  %v1_e01c = trunc i32 %v0_e01c to i8
  %v2_e01c = load i32, i32* %r1.global-to-local, align 4
  %v3_e01c = add i32 %v2_e01c, 20
  %v4_e01c = inttoptr i32 %v3_e01c to i8*
  store i8 %v1_e01c, i8* %v4_e01c, align 1
  store i32 %v4_e020, i32* %r2.global-to-local, align 4
  store i32 %v4_e024, i32* %r1.global-to-local, align 4
  store i32 %v4_e028, i32* %ip.global-to-local, align 4
  %v0_e02c = load i32, i32* @r6, align 4
  %v1_e02c = load i32, i32* @sl, align 4
  %v9_e02c = icmp eq i32 %v0_e02c, %v1_e02c
  store i1 %v9_e02c, i1* %cpsr_z.global-to-local, align 1
  %v2_e030 = load i32, i32* %r3.global-to-local, align 4
  %v3_e030 = add i32 %v2_e030, 5
  %v4_e030 = inttoptr i32 %v3_e030 to i8*
  store i8 %v1_e030, i8* %v4_e030, align 1
  %v0_e034 = load i32, i32* %r2.global-to-local, align 4
  %v1_e034 = trunc i32 %v0_e034 to i8
  %v2_e034 = load i32, i32* %r3.global-to-local, align 4
  %v3_e034 = add i32 %v2_e034, 1
  %v4_e034 = inttoptr i32 %v3_e034 to i8*
  store i8 %v1_e034, i8* %v4_e034, align 1
  %v0_e038 = load i32, i32* @r5, align 4
  %v1_e038 = trunc i32 %v0_e038 to i8
  %v2_e038 = load i32, i32* %r3.global-to-local, align 4
  %v3_e038 = add i32 %v2_e038, 2
  %v4_e038 = inttoptr i32 %v3_e038 to i8*
  store i8 %v1_e038, i8* %v4_e038, align 1
  %v0_e03c = load i32, i32* %ip.global-to-local, align 4
  %v1_e03c = trunc i32 %v0_e03c to i8
  %v2_e03c = load i32, i32* %r3.global-to-local, align 4
  %v3_e03c = add i32 %v2_e03c, 3
  %v4_e03c = inttoptr i32 %v3_e03c to i8*
  store i8 %v1_e03c, i8* %v4_e03c, align 1
  %v0_e040 = load i32, i32* @r7, align 4
  %v1_e040 = trunc i32 %v0_e040 to i8
  %v2_e040 = load i32, i32* %r3.global-to-local, align 4
  %v3_e040 = add i32 %v2_e040, 4
  %v4_e040 = inttoptr i32 %v3_e040 to i8*
  store i8 %v1_e040, i8* %v4_e040, align 1
  %v0_e044 = load i32, i32* @r6, align 4
  store i32 %v0_e044, i32* %stack_var_-40, align 4
  %v5_e048 = icmp slt i32 %v0_e02c, %v1_e02c
  br i1 %v5_e048, label %dec_label_pc_df7c, label %dec_label_pc_e04c

dec_label_pc_e04c:                                ; preds = %dec_label_pc_e2ac, %dec_label_pc_df7c, %.thread
  %v0_e04c = load i32, i32* @sl, align 4
  %v2_e04c = icmp eq i32 %v0_e04c, 0
  store i1 %v2_e04c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_e1f8 = icmp eq i32 %v3_de9c, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  %v2_e0c4 = icmp eq i32 %v1_de1c, 0
  %v2_e08c = icmp eq i32 %v6_de30, -1
  %v7_e08c = icmp eq i32 %v6_de30, -1
  br label %dec_label_pc_e054.outer

dec_label_pc_e054.outer:                          ; preds = %dec_label_pc_e174, %dec_label_pc_e04c
  %v1_e054.ph.in = phi i32 [ %v1_e168, %dec_label_pc_e174 ], [ %v0_e04c, %dec_label_pc_e04c ]
  %v0_e054.ph = phi i1 [ %v2_e174, %dec_label_pc_e174 ], [ %v2_e04c, %dec_label_pc_e04c ]
  %v1_e054.ph = icmp slt i32 %v1_e054.ph.in, 0
  %v4_e054 = or i1 %v1_e054.ph, %v0_e054.ph
  br label %dec_label_pc_e054

dec_label_pc_e054:                                ; preds = %dec_label_pc_e054.outer, %dec_label_pc_e054
  br i1 %v4_e054, label %dec_label_pc_e054, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e054
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e064

dec_label_pc_e064:                                ; preds = %dec_label_pc_e0cc, %dec_label_pc_e058
  %v1_e078 = phi i32 [ %v1_e164, %dec_label_pc_e0cc ], [ 0, %dec_label_pc_e058 ]
  %v5_e068 = mul i32 %v1_e078, 24
  %v1_e06c = load i32, i32* @r8, align 4
  %v2_e06c = add i32 %v1_e06c, %v5_e068
  store i32 %v2_e06c, i32* %r3.global-to-local, align 4
  store i32 %v2_dd28, i32* %ip.global-to-local, align 4
  %v1_e074 = add i32 %v2_e06c, 20
  %v2_e074 = inttoptr i32 %v1_e074 to i8*
  %v3_e074 = load i8, i8* %v2_e074, align 1
  %v4_e074 = zext i8 %v3_e074 to i32
  store i32 %v4_e074, i32* %r2.global-to-local, align 4
  %v4_e078 = mul i32 %v1_e078, 4
  %v5_e078 = add i32 %v4_e078, %v2_dd28
  %v6_e078 = inttoptr i32 %v5_e078 to i32*
  %v7_e078 = load i32, i32* %v6_e078, align 4
  store i32 %v7_e078, i32* @r5, align 4
  %v7_e07c = icmp eq i8 %v3_e074, 31
  store i1 %v7_e07c, i1* %cpsr_z.global-to-local, align 1
  %v1_e080 = add i32 %v7_e078, 20
  store i32 %v1_e080, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_e074, 32
  br i1 %tmp84, label %dec_label_pc_e180, label %dec_label_pc_e088

dec_label_pc_e088:                                ; preds = %dec_label_pc_e064
  store i32 %v6_de30, i32* %r0.global-to-local, align 4
  store i1 %v7_e08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e08c, label %dec_label_pc_e1e8, label %dec_label_pc_e094

dec_label_pc_e094:                                ; preds = %dec_label_pc_e180, %dec_label_pc_e088
  store i32 %v3_de9c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_e1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1f8, label %dec_label_pc_e204, label %dec_label_pc_e0a8

dec_label_pc_e0a8:                                ; preds = %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge, %dec_label_pc_e094
  %v1_e0ac = phi i32 [ %v1_e0ac.pre, %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_e094 ]
  store i32 %v3_deb8, i32* %r2.global-to-local, align 4
  %v9_e0ac = icmp eq i32 %v3_deb8, %v1_e0ac
  store i1 %v9_e0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e0ac, label %dec_label_pc_e220, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge, %dec_label_pc_e0a8
  %v1_e0b8 = phi i32 [ %v1_e0b8.pre, %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge ], [ %v1_e0ac, %dec_label_pc_e0a8 ]
  store i32 %v3_debc, i32* %r3.global-to-local, align 4
  %v9_e0b8 = icmp eq i32 %v3_debc, %v1_e0b8
  store i1 %v9_e0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e0b8, label %dec_label_pc_e23c, label %dec_label_pc_e0c0

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e220, %dec_label_pc_e0b4
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  store i1 %v2_e0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e0c4, label %dec_label_pc_e0cc, label %dec_label_pc_e258

dec_label_pc_e0cc:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e23c, %dec_label_pc_e258
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e0d0 = load i32, i32* @r7, align 4
  %v1_e0d0 = trunc i32 %v0_e0d0 to i8
  %v2_e0d0 = load i32, i32* @r5, align 4
  %v3_e0d0 = add i32 %v2_e0d0, 10
  %v4_e0d0 = inttoptr i32 %v3_e0d0 to i8*
  store i8 %v1_e0d0, i8* %v4_e0d0, align 1
  %v0_e0d4 = load i32, i32* @r7, align 4
  %v1_e0d4 = trunc i32 %v0_e0d4 to i8
  %v2_e0d4 = load i32, i32* @r5, align 4
  %v3_e0d4 = add i32 %v2_e0d4, 11
  %v4_e0d4 = inttoptr i32 %v3_e0d4 to i8*
  store i8 %v1_e0d4, i8* %v4_e0d4, align 1
  %v0_e0d8 = load i32, i32* @r5, align 4
  store i32 %v0_e0d8, i32* @r0, align 4
  %v2_e0dc = call i32 @function_f008(i32 %v0_e0d8, i32 20)
  %v3_e0dc = trunc i32 %v2_e0dc to i8
  store i32 %v2_e0dc, i32* %r0.global-to-local, align 4
  %v4_e0e0 = sdiv i32 %v2_e0dc, 256
  store i32 %v4_e0e0, i32* %r3.global-to-local, align 4
  %v1_e0e4 = trunc i32 %v4_e0e0 to i8
  %v2_e0e4 = load i32, i32* @r5, align 4
  %v3_e0e4 = add i32 %v2_e0e4, 11
  %v4_e0e4 = inttoptr i32 %v3_e0e4 to i8*
  store i8 %v1_e0e4, i8* %v4_e0e4, align 1
  %v3_e0e8 = load i32, i32* @r5, align 4
  %v4_e0e8 = add i32 %v3_e0e8, 10
  %v5_e0e8 = inttoptr i32 %v4_e0e8 to i8*
  store i8 %v3_e0dc, i8* %v5_e0e8, align 1
  %v0_e0ec = load i32, i32* @r7, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v2_e0ec = load i32, i32* @r6, align 4
  %v3_e0ec = add i32 %v2_e0ec, 6
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* @r7, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* @r6, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 7
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* @r5, align 4
  %v1_e0f4 = add i32 %v0_e0f4, 24
  %v2_e0f4 = inttoptr i32 %v1_e0f4 to i8*
  %v3_e0f4 = load i8, i8* %v2_e0f4, align 1
  %v4_e0f4 = zext i8 %v3_e0f4 to i32
  store i32 %v4_e0f4, i32* %r3.global-to-local, align 4
  %v1_e0f8 = add i32 %v0_e0f4, 25
  %v2_e0f8 = inttoptr i32 %v1_e0f8 to i8*
  %v3_e0f8 = load i8, i8* %v2_e0f8, align 1
  %v4_e0f8 = zext i8 %v3_e0f8 to i32
  %v0_e0fc = load i32, i32* @r6, align 4
  store i32 %v0_e0fc, i32* @r1, align 4
  %v4_e100 = mul nuw nsw i32 %v4_e0f8, 256
  %v5_e100 = or i32 %v4_e100, %v4_e0f4
  store i32 %v5_e100, i32* %r2.global-to-local, align 4
  store i32 %v0_e0f4, i32* %r0.global-to-local, align 4
  %v0_e108 = load i32, i32* @sb, align 4
  store i32 %v0_e108, i32* %r3.global-to-local, align 4
  %v4_e10c = call i32 @function_f064(i32 %v0_e0f4, i32 %v0_e0fc, i32 %v5_e100, i32 %v0_e108)
  %v5_e10c = trunc i32 %v4_e10c to i8
  store i32 %v4_e10c, i32* %r0.global-to-local, align 4
  %v4_e11038 = udiv i32 %v4_e10c, 256
  %v1_e114 = trunc i32 %v4_e11038 to i8
  %v2_e114 = load i32, i32* @r6, align 4
  %v3_e114 = add i32 %v2_e114, 7
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  %v3_e118 = load i32, i32* @r6, align 4
  %v4_e118 = add i32 %v3_e118, 6
  %v5_e118 = inttoptr i32 %v4_e118 to i8*
  store i8 %v5_e10c, i8* %v5_e118, align 1
  %v3_e11c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e11c, i32* %r3.global-to-local, align 4
  %v0_e120 = load i32, i32* @r5, align 4
  %v1_e120 = add i32 %v0_e120, 20
  %v2_e120 = inttoptr i32 %v1_e120 to i32*
  %v3_e120 = load i32, i32* %v2_e120, align 4
  %v3_e128 = udiv i32 %v3_e120, 65536
  store i32 %v3_e128, i32* %r2.global-to-local, align 4
  %v5_e12c = mul i32 %v3_e11c, 24
  %v1_e130 = load i32, i32* @r8, align 4
  %v2_e130 = add i32 %v1_e130, %v5_e12c
  store i32 %v2_e130, i32* %ip.global-to-local, align 4
  %v3_e13435 = udiv i32 %v3_e120, 16777216
  %v1_e138 = trunc i32 %v3_e13435 to i8
  %v3_e138 = add i32 %v2_e130, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r2.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 2
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e144 = load i32, i32* @r5, align 4
  store i32 %v0_e144, i32* %r1.global-to-local, align 4
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v0_e14c = load i32, i32* @fp, align 4
  store i32 %v0_e14c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_e154 = load i32, i32* %ip.global-to-local, align 4
  %v6_e15c = inttoptr i32 %v0_e144 to i32*
  %v7_e15c = call i32 @function_14b1c(i32 %v3_de44, i32* %v6_e15c, i32 %v0_e14c, i32 16384, i32 %v0_e154, i32 16)
  %v3_e160 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e160, i32* %r3.global-to-local, align 4
  %v1_e164 = add i32 %v3_e160, 1
  store i32 %v1_e164, i32* %r0.global-to-local, align 4
  %v1_e168 = load i32, i32* @sl, align 4
  %v9_e168 = icmp eq i32 %v1_e164, %v1_e168
  store i1 %v9_e168, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e164, i32* %stack_var_-40, align 4
  %v5_e170 = icmp slt i32 %v1_e164, %v1_e168
  br i1 %v5_e170, label %dec_label_pc_e064, label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %dec_label_pc_e0cc
  %v2_e174 = icmp eq i32 %v1_e168, 0
  store i1 %v2_e174, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e054.outer

dec_label_pc_e180:                                ; preds = %dec_label_pc_e064
  %v1_e180 = add i32 %v2_e06c, 16
  %v2_e180 = inttoptr i32 %v1_e180 to i32*
  %v3_e180 = load i32, i32* %v2_e180, align 4
  %v0_e184 = call i32 @function_10a94()
  store i32 %v0_e184, i32* %r0.global-to-local, align 4
  %v3_e188 = load i32, i32* %stack_var_-40, align 4
  %v5_e190 = mul i32 %v3_e188, 24
  %v1_e198 = load i32, i32* @r8, align 4
  %v2_e198 = add i32 %v1_e198, %v5_e190
  store i32 %v2_e198, i32* %r1.global-to-local, align 4
  %v1_e19c = and i32 %v3_e180, 65280
  store i32 %v1_e19c, i32* %r3.global-to-local, align 4
  %v1_e194 = udiv i32 %v3_e180, 256
  %v3_e1a0 = and i32 %v1_e194, 65280
  store i32 %v3_e1a0, i32* %r2.global-to-local, align 4
  %v3_e1a4 = mul i32 %v3_e180, 16777216
  store i32 %v3_e1a4, i32* %ip.global-to-local, align 4
  %v1_e1a8 = add i32 %v2_e198, 20
  %v2_e1a8 = inttoptr i32 %v1_e1a8 to i8*
  %v3_e1a8 = load i8, i8* %v2_e1a8, align 1
  %v4_e1a8 = zext i8 %v3_e1a8 to i32
  %v4_e1ac = mul nuw nsw i32 %v1_e19c, 256
  %v5_e1ac = or i32 %v4_e1ac, %v3_e1a4
  store i32 %v5_e1ac, i32* %ip.global-to-local, align 4
  %v2_e1b4 = call i32 @llvm.bswap.i32(i32 %v3_e180)
  %v7_e1b8 = lshr i32 %v0_e184, %v4_e1a8
  %v8_e1b8 = add i32 %v7_e1b8, %v2_e1b4
  store i32 %v8_e1b8, i32* %r2.global-to-local, align 4
  %v3_e1c4 = mul i32 %v8_e1b8, 16777216
  %v1_e1bc = mul i32 %v8_e1b8, 256
  %v4_e1c8 = and i32 %v1_e1bc, 16711680
  %v5_e1c8 = or i32 %v4_e1c8, %v3_e1c4
  store i32 %v5_e1c8, i32* %r1.global-to-local, align 4
  store i32 %v6_de30, i32* %r0.global-to-local, align 4
  %v2_e1d8 = call i32 @llvm.bswap.i32(i32 %v8_e1b8)
  store i32 %v2_e1d8, i32* %r3.global-to-local, align 4
  store i1 %v7_e08c, i1* %cpsr_z.global-to-local, align 1
  %v1_e1e0 = load i32, i32* @r5, align 4
  %v2_e1e0 = add i32 %v1_e1e0, 16
  %v3_e1e0 = inttoptr i32 %v2_e1e0 to i32*
  store i32 %v2_e1d8, i32* %v3_e1e0, align 4
  br i1 %v2_e08c, label %dec_label_pc_e1e8, label %dec_label_pc_e094

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e180, %dec_label_pc_e088
  %v0_e1e8 = call i32 @function_10a94()
  store i32 %v0_e1e8, i32* %r0.global-to-local, align 4
  store i32 %v3_de9c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_e1f8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1fc = load i32, i32* @r5, align 4
  %v2_e1fc = add i32 %v1_e1fc, 12
  %v3_e1fc = inttoptr i32 %v2_e1fc to i32*
  store i32 %v0_e1e8, i32* %v3_e1fc, align 4
  br i1 %v9_e1f8, label %dec_label_pc_e204, label %dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge

dec_label_pc_e1e8.dec_label_pc_e0a8_crit_edge:    ; preds = %dec_label_pc_e1e8
  %v1_e0ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e0a8

dec_label_pc_e204:                                ; preds = %dec_label_pc_e1e8, %dec_label_pc_e094
  %v0_e204 = call i32 @function_10a94()
  %v1_e204 = trunc i32 %v0_e204 to i8
  store i32 %v0_e204, i32* %r0.global-to-local, align 4
  store i32 %v3_deb8, i32* %r2.global-to-local, align 4
  %v4_e20c = sdiv i32 %v0_e204, 256
  store i32 %v4_e20c, i32* %r3.global-to-local, align 4
  %v1_e210 = load i32, i32* @r4, align 4
  %v9_e210 = icmp eq i32 %v3_deb8, %v1_e210
  store i1 %v9_e210, i1* %cpsr_z.global-to-local, align 1
  %v1_e214 = trunc i32 %v4_e20c to i8
  %v2_e214 = load i32, i32* @r5, align 4
  %v3_e214 = add i32 %v2_e214, 5
  %v4_e214 = inttoptr i32 %v3_e214 to i8*
  store i8 %v1_e214, i8* %v4_e214, align 1
  %v3_e218 = load i32, i32* @r5, align 4
  %v4_e218 = add i32 %v3_e218, 4
  %v5_e218 = inttoptr i32 %v4_e218 to i8*
  store i8 %v1_e204, i8* %v5_e218, align 1
  %v0_e21c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e21c, label %dec_label_pc_e220, label %dec_label_pc_e204.dec_label_pc_e0b4_crit_edge

dec_label_pc_e204.dec_label_pc_e0b4_crit_edge:    ; preds = %dec_label_pc_e204
  %v1_e0b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e0b4

dec_label_pc_e220:                                ; preds = %dec_label_pc_e204, %dec_label_pc_e0a8
  %v0_e220 = call i32 @function_10a94()
  %v1_e220 = trunc i32 %v0_e220 to i8
  store i32 %v0_e220, i32* %r0.global-to-local, align 4
  %v4_e224 = sdiv i32 %v0_e220, 256
  store i32 %v4_e224, i32* %r3.global-to-local, align 4
  %v3_e228 = load i32, i32* @r5, align 4
  %v4_e228 = add i32 %v3_e228, 20
  %v5_e228 = inttoptr i32 %v4_e228 to i8*
  store i8 %v1_e220, i8* %v5_e228, align 1
  %v0_e22c = load i32, i32* %r3.global-to-local, align 4
  %v1_e22c = trunc i32 %v0_e22c to i8
  %v2_e22c = load i32, i32* @r6, align 4
  %v3_e22c = add i32 %v2_e22c, 1
  %v4_e22c = inttoptr i32 %v3_e22c to i8*
  store i8 %v1_e22c, i8* %v4_e22c, align 1
  store i32 %v3_debc, i32* %r3.global-to-local, align 4
  %v1_e234 = load i32, i32* @r4, align 4
  %v9_e234 = icmp eq i32 %v3_debc, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e23c, label %dec_label_pc_e0c0

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e220, %dec_label_pc_e0b4
  %v0_e23c = call i32 @function_10a94()
  %v1_e23c = trunc i32 %v0_e23c to i8
  store i32 %v0_e23c, i32* %r0.global-to-local, align 4
  store i32 %v1_de1c, i32* %ip.global-to-local, align 4
  %v4_e244 = sdiv i32 %v0_e23c, 256
  store i32 %v4_e244, i32* %r3.global-to-local, align 4
  store i1 %v2_e0c4, i1* %cpsr_z.global-to-local, align 1
  %v1_e24c = trunc i32 %v4_e244 to i8
  %v2_e24c = load i32, i32* @r6, align 4
  %v3_e24c = add i32 %v2_e24c, 3
  %v4_e24c = inttoptr i32 %v3_e24c to i8*
  store i8 %v1_e24c, i8* %v4_e24c, align 1
  %v3_e250 = load i32, i32* @r6, align 4
  %v4_e250 = add i32 %v3_e250, 2
  %v5_e250 = inttoptr i32 %v4_e250 to i8*
  store i8 %v1_e23c, i8* %v5_e250, align 1
  %v0_e254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e254, label %dec_label_pc_e0cc, label %dec_label_pc_e258

dec_label_pc_e258:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e23c
  %v0_e258 = load i32, i32* @r5, align 4
  %v1_e258 = add i32 %v0_e258, 28
  store i32 %v1_e258, i32* %r0.global-to-local, align 4
  store i32 %v0_de94, i32* @r1, align 4
  %v1_e260 = inttoptr i32 %v1_e258 to i8*
  %v2_e260 = call i32 @function_10c70(i8* %v1_e260)
  store i32 %v2_e260, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e0cc

dec_label_pc_e268:                                ; preds = %dec_label_pc_de54
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v1_e26c = call i32 @function_14284(i32 %v3_de44)
  store i32 %v1_e26c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e270

dec_label_pc_e270:                                ; preds = %dec_label_pc_dd08, %dec_label_pc_e268
  %v29_e274 = phi i32 [ %v3_de44, %dec_label_pc_dd08 ], [ %v1_e26c, %dec_label_pc_e268 ]
  store i32 %v18_dd08, i32* %sb.global-to-local, align 4
  store i32 %v24_dd08, i32* %fp.global-to-local, align 4
  ret i32 %v29_e274

dec_label_pc_e278:                                ; preds = %dec_label_pc_ded8
  %v3_e27c = sext i8 %v5_df3c to i32
  %v7_e27c = sext i8 %v5_df40 to i32
  %v3_e280 = sdiv i32 %v3_e27c, 256
  store i32 %v3_e280, i32* %r0.global-to-local, align 4
  %v3_e284 = sdiv i32 %v7_e27c, 256
  store i32 %v3_e284, i32* %r1.global-to-local, align 4
  store i32 %v1_df14, i32* %r2.global-to-local, align 4
  store i32 %v1_df18, i32* %r3.global-to-local, align 4
  %v3_e29034 = udiv i32 %v1_df30, 256
  store i32 %v3_e29034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_e2fc = sext i8 %v5_dd98 to i32
  %sext11 = mul i32 %v1_df0c, 16777216
  %v4_e354 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_dea8, 16777216
  %v4_e358 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_dea4, 16777216
  %v4_e374 = sdiv i32 %sext13, 16777216
  %v1_e360 = trunc i32 %v3_e284 to i8
  %v1_e37c = trunc i32 %v4_e374 to i8
  br label %dec_label_pc_e2ac

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e2ac, %dec_label_pc_e278
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e2b8 = call i32 @function_14e84(i32 1510, i32 1)
  store i32 %v2_e2b8, i32* %r0.global-to-local, align 4
  store i32 %v2_dd28, i32* %r1.global-to-local, align 4
  %v3_e2c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e2c0, i32* %r2.global-to-local, align 4
  %v2_e2c4 = load i32, i32* @r6, align 4
  %v5_e2c4 = mul i32 %v2_e2c4, 4
  %v6_e2c4 = add i32 %v5_e2c4, %v2_dd28
  %v7_e2c4 = inttoptr i32 %v6_e2c4 to i32*
  store i32 %v2_e2b8, i32* %v7_e2c4, align 4
  %v0_e2c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v4_e2c8 = mul i32 %v1_e2c8, 4
  %v5_e2c8 = add i32 %v4_e2c8, %v0_e2c8
  %v6_e2c8 = inttoptr i32 %v5_e2c8 to i32*
  %v7_e2c8 = load i32, i32* %v6_e2c8, align 4
  store i32 %v7_e2c8, i32* %r1.global-to-local, align 4
  %v1_e2cc = inttoptr i32 %v7_e2c8 to i8*
  %v2_e2cc = load i8, i8* %v1_e2cc, align 1
  %tmp85 = urem i8 %v2_e2cc, 16
  %v1_e2d0 = zext i8 %tmp85 to i32
  %v1_e2d4 = or i32 %v1_e2d0, 64
  store i32 %v1_e2d4, i32* %r3.global-to-local, align 4
  %v1_e2d8 = trunc i32 %v1_e2d4 to i8
  store i8 %v1_e2d8, i8* %v1_e2cc, align 1
  %v0_e2dc = load i32, i32* %r1.global-to-local, align 4
  %v1_e2dc = inttoptr i32 %v0_e2dc to i8*
  %v2_e2dc = load i8, i8* %v1_e2dc, align 1
  %v3_e2dc = zext i8 %v2_e2dc to i32
  %v1_e2e0 = and i32 %v3_e2dc, 240
  %v1_e2e4 = or i32 %v1_e2e0, 5
  store i32 %v1_e2e4, i32* %r2.global-to-local, align 4
  %v3_e2ec = add i32 %v0_e2dc, 9
  %v4_e2ec = inttoptr i32 %v3_e2ec to i8*
  store i8 17, i8* %v4_e2ec, align 1
  %v0_e2f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2f0 = trunc i32 %v0_e2f0 to i8
  %v2_e2f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e2f0 = inttoptr i32 %v2_e2f0 to i8*
  store i8 %v1_e2f0, i8* %v3_e2f0, align 1
  %v2_e2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e2f8 = add i32 %v2_e2f8, 1
  %v4_e2f8 = inttoptr i32 %v3_e2f8 to i8*
  store i8 %v5_dd60, i8* %v4_e2f8, align 1
  store i32 %v4_e2fc, i32* %r0.global-to-local, align 4
  %v2_e300 = load i32, i32* %r1.global-to-local, align 4
  %v3_e300 = add i32 %v2_e300, 8
  %v4_e300 = inttoptr i32 %v3_e300 to i8*
  store i8 %v5_dd98, i8* %v4_e300, align 1
  %v3_e304 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e304, i32* %r2.global-to-local, align 4
  store i32 %v6_de30, i32* %ip.global-to-local, align 4
  %v3_e30c = mul i32 %v3_e304, 32
  store i32 %v3_e30c, i32* %r3.global-to-local, align 4
  %v1_e310 = load i32, i32* %r1.global-to-local, align 4
  %v2_e310 = add i32 %v1_e310, 12
  %v3_e310 = inttoptr i32 %v2_e310 to i32*
  store i32 %v6_de30, i32* %v3_e310, align 4
  %v0_e314 = load i32, i32* %r3.global-to-local, align 4
  %v1_e314 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_e314, -8
  %v5_e314 = add i32 %v0_e314, %tmp86
  %v1_e318 = load i32, i32* @r8, align 4
  %v2_e318 = add i32 %v5_e314, %v1_e318
  store i32 %v2_e318, i32* %r3.global-to-local, align 4
  %v1_e31c = add i32 %v2_e318, 16
  %v2_e31c = inttoptr i32 %v1_e31c to i32*
  %v3_e31c = load i32, i32* %v2_e31c, align 4
  store i32 %v3_e31c, i32* %ip.global-to-local, align 4
  %v1_e320 = add i32 %v1_e314, 1
  store i32 %v1_e320, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e32c = load i32, i32* %r1.global-to-local, align 4
  %v3_e32c = add i32 %v2_e32c, 6
  %v4_e32c = inttoptr i32 %v3_e32c to i8*
  store i8 64, i8* %v4_e32c, align 1
  %v0_e330 = load i32, i32* %r2.global-to-local, align 4
  %v1_e330 = trunc i32 %v0_e330 to i8
  %v2_e330 = load i32, i32* %r1.global-to-local, align 4
  %v3_e330 = add i32 %v2_e330, 7
  %v4_e330 = inttoptr i32 %v3_e330 to i8*
  store i8 %v1_e330, i8* %v4_e330, align 1
  %v0_e334 = load i32, i32* %ip.global-to-local, align 4
  %v1_e334 = load i32, i32* %r1.global-to-local, align 4
  %v2_e334 = add i32 %v1_e334, 16
  %v3_e334 = inttoptr i32 %v2_e334 to i32*
  store i32 %v0_e334, i32* %v3_e334, align 4
  store i32 %v3_e280, i32* %r3.global-to-local, align 4
  store i32 %v7_e27c, i32* %ip.global-to-local, align 4
  %v2_e344 = load i32, i32* %r1.global-to-local, align 4
  %v3_e344 = add i32 %v2_e344, 2
  %v4_e344 = inttoptr i32 %v3_e344 to i8*
  store i8 %v5_df3c, i8* %v4_e344, align 1
  %v0_e348 = load i32, i32* %r3.global-to-local, align 4
  %v1_e348 = trunc i32 %v0_e348 to i8
  %v2_e348 = load i32, i32* %r1.global-to-local, align 4
  %v3_e348 = add i32 %v2_e348, 3
  %v4_e348 = inttoptr i32 %v3_e348 to i8*
  store i8 %v1_e348, i8* %v4_e348, align 1
  %v0_e34c = load i32, i32* %ip.global-to-local, align 4
  %v1_e34c = trunc i32 %v0_e34c to i8
  %v2_e34c = load i32, i32* %r1.global-to-local, align 4
  %v3_e34c = add i32 %v2_e34c, 4
  %v4_e34c = inttoptr i32 %v3_e34c to i8*
  store i8 %v1_e34c, i8* %v4_e34c, align 1
  store i32 %v3_e284, i32* %r2.global-to-local, align 4
  store i32 %v4_e354, i32* %r3.global-to-local, align 4
  store i32 %v4_e358, i32* %ip.global-to-local, align 4
  %v0_e35c = load i32, i32* %r1.global-to-local, align 4
  %v1_e35c = add i32 %v0_e35c, 20
  store i32 %v1_e35c, i32* %r0.global-to-local, align 4
  %v3_e360 = add i32 %v0_e35c, 5
  %v4_e360 = inttoptr i32 %v3_e360 to i8*
  store i8 %v1_e360, i8* %v4_e360, align 1
  %v0_e364 = load i32, i32* @r4, align 4
  %v1_e364 = trunc i32 %v0_e364 to i8
  %v2_e364 = load i32, i32* %r1.global-to-local, align 4
  %v3_e364 = add i32 %v2_e364, 20
  %v4_e364 = inttoptr i32 %v3_e364 to i8*
  store i8 %v1_e364, i8* %v4_e364, align 1
  %v0_e368 = load i32, i32* %r3.global-to-local, align 4
  %v1_e368 = trunc i32 %v0_e368 to i8
  %v2_e368 = load i32, i32* %r0.global-to-local, align 4
  %v3_e368 = add i32 %v2_e368, 5
  %v4_e368 = inttoptr i32 %v3_e368 to i8*
  store i8 %v1_e368, i8* %v4_e368, align 1
  %v0_e36c = load i32, i32* %ip.global-to-local, align 4
  %v1_e36c = trunc i32 %v0_e36c to i8
  %v2_e36c = load i32, i32* %r0.global-to-local, align 4
  %v3_e36c = add i32 %v2_e36c, 1
  %v4_e36c = inttoptr i32 %v3_e36c to i8*
  store i8 %v1_e36c, i8* %v4_e36c, align 1
  %v0_e370 = load i32, i32* @r5, align 4
  %v1_e370 = trunc i32 %v0_e370 to i8
  %v2_e370 = load i32, i32* %r0.global-to-local, align 4
  %v3_e370 = add i32 %v2_e370, 2
  %v4_e370 = inttoptr i32 %v3_e370 to i8*
  store i8 %v1_e370, i8* %v4_e370, align 1
  store i32 %v4_e374, i32* %r1.global-to-local, align 4
  %v0_e378 = load i32, i32* @r6, align 4
  %v1_e378 = load i32, i32* @sl, align 4
  %v9_e378 = icmp eq i32 %v0_e378, %v1_e378
  store i1 %v9_e378, i1* %cpsr_z.global-to-local, align 1
  %v2_e37c = load i32, i32* %r0.global-to-local, align 4
  %v3_e37c = add i32 %v2_e37c, 3
  %v4_e37c = inttoptr i32 %v3_e37c to i8*
  store i8 %v1_e37c, i8* %v4_e37c, align 1
  %v0_e380 = load i32, i32* @r7, align 4
  %v1_e380 = trunc i32 %v0_e380 to i8
  %v2_e380 = load i32, i32* %r0.global-to-local, align 4
  %v3_e380 = add i32 %v2_e380, 4
  %v4_e380 = inttoptr i32 %v3_e380 to i8*
  store i8 %v1_e380, i8* %v4_e380, align 1
  %v0_e384 = load i32, i32* @r6, align 4
  store i32 %v0_e384, i32* %stack_var_-40, align 4
  %v5_e388 = icmp slt i32 %v0_e378, %v1_e378
  br i1 %v5_e388, label %dec_label_pc_e2ac, label %dec_label_pc_e04c

; uselistorder directives
  uselistorder i32 %v1_e314, { 1, 0 }
  uselistorder i32 %v3_e284, { 2, 1, 0 }
  uselistorder i32 %v3_e280, { 1, 0 }
  uselistorder i32 %v7_e27c, { 1, 0 }
  uselistorder i32 %v4_e244, { 1, 0 }
  uselistorder i32 %v0_e23c, { 0, 2, 1 }
  uselistorder i32 %v0_e220, { 0, 2, 1 }
  uselistorder i32 %v4_e20c, { 1, 0 }
  uselistorder i32 %v0_e204, { 0, 2, 1 }
  uselistorder i32 %v2_e1d8, { 1, 0 }
  uselistorder i32 %v8_e1b8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_e1a4, { 1, 0 }
  uselistorder i32 %v3_e180, { 1, 3, 2, 0 }
  uselistorder i1 %v2_e174, { 1, 0 }
  uselistorder i32 %v1_e168, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e164, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e10c, { 0, 2, 1 }
  uselistorder i32 %v0_e0f4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e0e0, { 1, 0 }
  uselistorder i32 %v2_e0dc, { 0, 2, 1 }
  uselistorder i1 %v7_e08c, { 2, 1, 0 }
  uselistorder i1 %v9_e1f8, { 2, 3, 1, 0 }
  uselistorder i8 %v5_df3c, { 0, 2, 1 }
  uselistorder i32 %v3_df28, { 1, 0 }
  uselistorder i32 %v1_df18, { 2, 3, 0, 1 }
  uselistorder i32 %v1_df14, { 1, 2, 0 }
  uselistorder i32 %v1_df0c, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_df04, { 1, 0 }
  uselistorder i32 %v1_dedc, { 2, 1, 0, 3 }
  uselistorder i32 %v3_debc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_de9c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v0_de98, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_de94, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_de88, { 3, 1, 2, 0 }
  uselistorder i1 %v7_de74, { 1, 0 }
  uselistorder i1 %v7_de48, { 1, 0 }
  uselistorder i32 %v3_de44, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_de30, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_de1c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_dda8, { 1, 0 }
  uselistorder i8 %v5_dd98, { 1, 0, 2 }
  uselistorder i32 %v5_dd7c, { 1, 0 }
  uselistorder i8 %v5_dd60, { 0, 2, 1 }
  uselistorder i32 %v6_dd40, { 1, 0 }
  uselistorder i32 %v2_dd28, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_dd0c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_10c70, { 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_e270, { 1, 0 }
  uselistorder label %dec_label_pc_e258, { 1, 0 }
  uselistorder label %dec_label_pc_e0cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e054, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_e394(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e394:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e394 = load i32, i32* @r4, align 4
  %v12_e394 = load i32, i32* @r7, align 4
  %v1_e398 = urem i32 %arg1, 256
  store i32 %v1_e398, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_e3ac = urem i32 %arg3, 256
  store i32 %v1_e3ac, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_e3b4 = call i32 @function_14e84(i32 %v1_e398, i32 4)
  %v0_e3b8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e3c4 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_e3cc = inttoptr i32 %v0_e3b8 to i32*
  %v6_e3cc = call i32 @function_a4e8(i32 %v0_e3c4, i32* %v5_e3cc, i32 2, i32 0)
  %v1_e3d8 = urem i32 %v6_e3cc, 256
  store i32 %v1_e3d8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e3e4 = load i32, i32* @r4, align 4
  %v0_e3e8 = load i32, i32* @r5, align 4
  %v5_e3ec = trunc i32 %v6_e3cc to i8
  %v6_e3f0 = inttoptr i32 %v0_e3e8 to i32*
  %v7_e3f0 = call i32 @function_a4e8(i32 %v0_e3e4, i32* %v6_e3f0, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_e3f4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_e3f0, i32* @r7, align 4
  %v0_e404 = load i32, i32* @r4, align 4
  %v4_e408 = inttoptr i32 %v0_e3f4 to i32*
  %v5_e408 = call i32 @function_a4e8(i32 %v0_e404, i32* %v4_e408, i32 4, i32 64)
  %v1_e410 = urem i32 %v5_e408, 256
  store i32 %v1_e410, i32* %ip.global-to-local, align 4
  %v0_e414 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e420 = load i32, i32* @r4, align 4
  %v5_e424 = trunc i32 %v5_e408 to i8
  %v6_e428 = inttoptr i32 %v0_e414 to i32*
  %v7_e428 = call i32 @function_a4e8(i32 %v0_e420, i32* %v6_e428, i32 5, i32 0)
  %v1_e434 = urem i32 %v7_e428, 256
  store i32 %v1_e434, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e440 = load i32, i32* @r4, align 4
  %v0_e444 = load i32, i32* @r5, align 4
  %v5_e44c = inttoptr i32 %v0_e444 to i32*
  %v6_e44c = call i32 @function_a4e8(i32 %v0_e440, i32* %v5_e44c, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_e45c = load i32, i32* @r5, align 4
  store i32 %v6_e44c, i32* @r6, align 4
  %v0_e464 = load i32, i32* @r4, align 4
  %v4_e468 = inttoptr i32 %v0_e45c to i32*
  %v5_e468 = call i32 @function_a4e8(i32 %v0_e464, i32* %v4_e468, i32 7, i32 27015)
  store i32 %v5_e468, i32* @r4, align 4
  %v1_e474 = call i32 @function_12fa0(i32 29)
  %v3_e480 = call i32 @function_12ebc(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_e480, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_e494 = call i32 @function_14b80(i32 2, i32 3, i32 17)
  %v7_e498 = icmp eq i32 %v3_e494, -1
  store i1 %v7_e498, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e494, i32* %fp.global-to-local, align 4
  br i1 %v7_e498, label %dec_label_pc_e84c, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e394
  store i32 1, i32* %stack_var_-40, align 4
  %v6_e4ac = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_e4ac, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_e4c0 = call i32 @function_14b50(i32 %v3_e494, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_e4c4 = icmp eq i32 %v6_e4c0, -1
  store i1 %v7_e4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4c4, label %dec_label_pc_e844, label %dec_label_pc_e4cc

dec_label_pc_e4cc:                                ; preds = %dec_label_pc_e4a4
  %v0_e4cc = load i32, i32* @r4, align 4
  %v3_e4cc = mul i32 %v0_e4cc, 65536
  store i32 %v3_e4cc, i32* @lr, align 4
  %v0_e4d0 = load i32, i32* @r7, align 4
  %v0_e4d4 = load i32, i32* @r6, align 4
  %v3_e4d4 = mul i32 %v0_e4d4, 65536
  store i32 %v3_e4d4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_e4dc = urem i32 %v0_e4d0, 65536
  %v3_e4e0 = urem i32 %v0_e4d4, 65536
  store i32 %v3_e4e0, i32* %r2.global-to-local, align 4
  %v3_e4e4 = urem i32 %v0_e4cc, 65536
  store i32 %v3_e4e4, i32* %r3.global-to-local, align 4
  %v0_e4e8 = load i32, i32* %sb.global-to-local, align 4
  %v2_e4e8 = icmp eq i32 %v0_e4e8, 0
  store i1 %v2_e4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_e4e8, 1
  br i1 %tmp50, label %dec_label_pc_e66c, label %dec_label_pc_e500

dec_label_pc_e500:                                ; preds = %dec_label_pc_e4cc
  %v1_e504 = urem i32 %v0_e4cc, 256
  %v1_e508 = urem i32 %v0_e4d0, 256
  %v3_e50c = mul nuw nsw i32 %v1_e504, 256
  %v1_e510 = urem i32 %v0_e4d4, 256
  %tmp51 = udiv i32 %v0_e4d0, 256
  %v3_e514 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_e4d4, 256
  %v3_e518 = urem i32 %tmp52, 256
  store i32 %v3_e518, i32* %ip.global-to-local, align 4
  %v4_e51c = mul nuw nsw i32 %v1_e508, 256
  %v5_e51c = or i32 %v4_e51c, %v3_e514
  store i32 %v5_e51c, i32* @r7, align 4
  %v4_e520 = mul nuw nsw i32 %v1_e510, 256
  %v5_e520 = or i32 %v4_e520, %v3_e518
  store i32 %v5_e520, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_e4cc, 256
  %v4_e524 = urem i32 %tmp53, 256
  %v5_e524 = or i32 %v4_e524, %v3_e50c
  store i32 %v5_e524, i32* @r5, align 4
  store i32 %v1_e510, i32* %r2.global-to-local, align 4
  store i32 %v1_e504, i32* %r3.global-to-local, align 4
  %v2_e5a0 = icmp eq i32 %v1_e434, 0
  %v4_e5a4 = sext i8 %v5_e424 to i32
  %sext = mul i32 %v0_e4d0, 16777216
  %v4_e5c0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_e4d4, 16777216
  %v4_e61c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_e4cc, 16777216
  %v4_e63c = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_e540

dec_label_pc_e540:                                ; preds = %bb57, %dec_label_pc_e500
  %v2_e548 = call i32 @function_14e84(i32 128, i32 1)
  store i32 %v2_e3b4, i32* %r2.global-to-local, align 4
  %v3_e550 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e550, i32* %r3.global-to-local, align 4
  %v2_e554 = load i32, i32* @r4, align 4
  %v5_e554 = mul i32 %v2_e554, 4
  %v6_e554 = add i32 %v5_e554, %v2_e3b4
  %v7_e554 = inttoptr i32 %v6_e554 to i32*
  store i32 %v2_e548, i32* %v7_e554, align 4
  %v0_e558 = load i32, i32* %r2.global-to-local, align 4
  %v1_e558 = load i32, i32* %r3.global-to-local, align 4
  %v4_e558 = mul i32 %v1_e558, 4
  %v5_e558 = add i32 %v4_e558, %v0_e558
  %v6_e558 = inttoptr i32 %v5_e558 to i32*
  %v7_e558 = load i32, i32* %v6_e558, align 4
  store i32 %v7_e558, i32* @lr, align 4
  %v1_e55c = inttoptr i32 %v7_e558 to i8*
  %v2_e55c = load i8, i8* %v1_e55c, align 1
  %tmp = urem i8 %v2_e55c, 16
  %v1_e560 = zext i8 %tmp to i32
  %v1_e564 = or i32 %v1_e560, 64
  store i32 %v1_e564, i32* %r3.global-to-local, align 4
  %v1_e568 = trunc i32 %v1_e564 to i8
  store i8 %v1_e568, i8* %v1_e55c, align 1
  %v0_e56c = load i32, i32* @lr, align 4
  %v1_e56c = inttoptr i32 %v0_e56c to i8*
  %v2_e56c = load i8, i8* %v1_e56c, align 1
  %v1_e570 = and i8 %v2_e56c, -16
  %v1_e574 = or i8 %v1_e570, 5
  store i8 %v1_e574, i8* %v1_e56c, align 1
  %v2_e580 = load i32, i32* @lr, align 4
  %v3_e580 = add i32 %v2_e580, 1
  %v4_e580 = inttoptr i32 %v3_e580 to i8*
  store i8 %v5_e3ec, i8* %v4_e580, align 1
  %v3_e584 = load i32, i32* %stack_var_-44, align 4
  %v1_e588 = add i32 %v3_e584, 32
  %tmp54 = mul i32 %v1_e588, 256
  %v1_e594 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_e588, 256
  %v4_e598 = urem i32 %tmp55, 256
  %v5_e598 = or i32 %v4_e598, %v1_e594
  store i32 %v5_e598, i32* %r2.global-to-local, align 4
  store i1 %v2_e5a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e5a4, i32* %r3.global-to-local, align 4
  %v2_e5a8 = load i32, i32* @lr, align 4
  %v3_e5a8 = add i32 %v2_e5a8, 8
  %v4_e5a8 = inttoptr i32 %v3_e5a8 to i8*
  store i8 %v5_e424, i8* %v4_e5a8, align 1
  %v0_e5ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5ac, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e540
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e5b0 = load i32, i32* @lr, align 4
  %v4_e5b0 = add i32 %v3_e5b0, 6
  %v5_e5b0 = inttoptr i32 %v4_e5b0 to i8*
  store i8 64, i8* %v5_e5b0, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e540, %bb
  %v0_e5b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e5b4 = trunc i32 %v0_e5b4 to i8
  %v2_e5b4 = load i32, i32* @lr, align 4
  %v3_e5b4 = add i32 %v2_e5b4, 2
  %v4_e5b4 = inttoptr i32 %v3_e5b4 to i8*
  store i8 %v1_e5b4, i8* %v4_e5b4, align 1
  %v0_e5b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e5b8 = sdiv i32 %v0_e5b8, 256
  store i32 %v3_e5b8, i32* %ip.global-to-local, align 4
  store i32 %v4_e5c0, i32* %r2.global-to-local, align 4
  %v2_e5c4 = load i32, i32* @lr, align 4
  %v3_e5c4 = add i32 %v2_e5c4, 9
  %v4_e5c4 = inttoptr i32 %v3_e5c4 to i8*
  store i8 17, i8* %v4_e5c4, align 1
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* %r3.global-to-local, align 4
  %v0_e5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_e5cc = trunc i32 %v0_e5cc to i8
  %v2_e5cc = load i32, i32* @lr, align 4
  %v3_e5cc = add i32 %v2_e5cc, 5
  %v4_e5cc = inttoptr i32 %v3_e5cc to i8*
  store i8 %v1_e5cc, i8* %v4_e5cc, align 1
  %v0_e5d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_e5d0 = trunc i32 %v0_e5d0 to i8
  %v2_e5d0 = load i32, i32* @lr, align 4
  %v3_e5d0 = add i32 %v2_e5d0, 3
  %v4_e5d0 = inttoptr i32 %v3_e5d0 to i8*
  store i8 %v1_e5d0, i8* %v4_e5d0, align 1
  %v0_e5d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e5d4, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_e5d89 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e5d89, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e5d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e5d8, i32* %ip.global-to-local, align 4
  %v3_e5dc = load i32, i32* @lr, align 4
  %v4_e5dc = add i32 %v3_e5dc, 7
  %v5_e5dc = inttoptr i32 %v4_e5dc to i8*
  store i8 0, i8* %v5_e5dc, align 1
  %v0_e5e4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_e5e4 = phi i32 [ %v3_e5d89, %.thread8 ], [ %v0_e5e4.pre, %bb56 ]
  %v2_e5e0 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_e5e0, i32* %r2.global-to-local, align 4
  %v3_e5e4 = mul i32 %v0_e5e4, 32
  store i32 %v3_e5e4, i32* %r3.global-to-local, align 4
  %v1_e5e8 = load i32, i32* @lr, align 4
  %v2_e5e8 = add i32 %v1_e5e8, 12
  %v3_e5e8 = inttoptr i32 %v2_e5e8 to i32*
  store i32 %v2_e5e0, i32* %v3_e5e8, align 4
  %v0_e5ec = load i32, i32* %r3.global-to-local, align 4
  %v1_e5ec = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_e5ec, -8
  %v5_e5ec = add i32 %v0_e5ec, %tmp60
  %v1_e5f0 = load i32, i32* @sl, align 4
  %v2_e5f0 = add i32 %v5_e5ec, %v1_e5f0
  store i32 %v2_e5f0, i32* %r3.global-to-local, align 4
  %v1_e5f4 = add i32 %v2_e5f0, 16
  %v2_e5f4 = inttoptr i32 %v1_e5f4 to i32*
  %v3_e5f4 = load i32, i32* %v2_e5f4, align 4
  %v1_e5f8 = load i32, i32* @lr, align 4
  %v2_e5f8 = add i32 %v1_e5f8, 16
  %v3_e5f8 = inttoptr i32 %v2_e5f8 to i32*
  store i32 %v3_e5f4, i32* %v3_e5f8, align 4
  %v3_e5fc = load i32, i32* %stack_var_-44, align 4
  %v1_e600 = add i32 %v3_e5fc, 12
  %tmp58 = mul i32 %v1_e600, 256
  %v1_e610 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_e600, 256
  %v4_e614 = urem i32 %tmp59, 256
  %v5_e614 = or i32 %v4_e614, %v1_e610
  store i32 %v5_e614, i32* %ip.global-to-local, align 4
  %v1_e618 = load i32, i32* @lr, align 4
  %v2_e618 = add i32 %v1_e618, 28
  %v3_e618 = inttoptr i32 %v2_e618 to i32*
  store i32 -1, i32* %v3_e618, align 4
  store i32 %v4_e61c, i32* %r2.global-to-local, align 4
  %v0_e620 = load i32, i32* @lr, align 4
  %v1_e620 = add i32 %v0_e620, 20
  store i32 %v1_e620, i32* %r4.global-to-local, align 4
  %v0_e624 = load i32, i32* %ip.global-to-local, align 4
  %v3_e624 = sdiv i32 %v0_e624, 256
  store i32 %v3_e624, i32* %r3.global-to-local, align 4
  %v0_e628 = load i32, i32* @r7, align 4
  %v1_e628 = trunc i32 %v0_e628 to i8
  %v3_e628 = add i32 %v0_e620, 4
  %v4_e628 = inttoptr i32 %v3_e628 to i8*
  store i8 %v1_e628, i8* %v4_e628, align 1
  %v0_e62c = load i32, i32* @r6, align 4
  %v1_e62c = trunc i32 %v0_e62c to i8
  %v2_e62c = load i32, i32* @lr, align 4
  %v3_e62c = add i32 %v2_e62c, 20
  %v4_e62c = inttoptr i32 %v3_e62c to i8*
  store i8 %v1_e62c, i8* %v4_e62c, align 1
  %v0_e630 = load i32, i32* %r3.global-to-local, align 4
  %v1_e630 = trunc i32 %v0_e630 to i8
  %v2_e630 = load i32, i32* %r4.global-to-local, align 4
  %v3_e630 = add i32 %v2_e630, 5
  %v4_e630 = inttoptr i32 %v3_e630 to i8*
  store i8 %v1_e630, i8* %v4_e630, align 1
  %v0_e634 = load i32, i32* @r5, align 4
  %v1_e634 = trunc i32 %v0_e634 to i8
  %v2_e634 = load i32, i32* %r4.global-to-local, align 4
  %v3_e634 = add i32 %v2_e634, 2
  %v4_e634 = inttoptr i32 %v3_e634 to i8*
  store i8 %v1_e634, i8* %v4_e634, align 1
  %v0_e638 = load i32, i32* %r2.global-to-local, align 4
  %v1_e638 = trunc i32 %v0_e638 to i8
  %v2_e638 = load i32, i32* %r4.global-to-local, align 4
  %v3_e638 = add i32 %v2_e638, 1
  %v4_e638 = inttoptr i32 %v3_e638 to i8*
  store i8 %v1_e638, i8* %v4_e638, align 1
  store i32 %v4_e63c, i32* %r3.global-to-local, align 4
  %v0_e640 = load i32, i32* %ip.global-to-local, align 4
  %v1_e640 = trunc i32 %v0_e640 to i8
  %v2_e640 = load i32, i32* %r4.global-to-local, align 4
  %v3_e640 = add i32 %v2_e640, 4
  %v4_e640 = inttoptr i32 %v3_e640 to i8*
  store i8 %v1_e640, i8* %v4_e640, align 1
  %v0_e644 = load i32, i32* %r3.global-to-local, align 4
  %v1_e644 = trunc i32 %v0_e644 to i8
  %v2_e644 = load i32, i32* %r4.global-to-local, align 4
  %v3_e644 = add i32 %v2_e644, 3
  %v4_e644 = inttoptr i32 %v3_e644 to i8*
  store i8 %v1_e644, i8* %v4_e644, align 1
  %v0_e648 = load i32, i32* %r8.global-to-local, align 4
  %v0_e64c = load i32, i32* @lr, align 4
  %v1_e64c = add i32 %v0_e64c, 32
  %v3_e650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e650, i32* %r2.global-to-local, align 4
  %v3_e654 = call i32 @function_13940(i32 %v1_e64c, i32 %v0_e648, i32 %v3_e650)
  %v3_e658 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e658, i32* %r3.global-to-local, align 4
  %v1_e65c = add i32 %v3_e658, 1
  store i32 %v1_e65c, i32* @r4, align 4
  %v1_e660 = load i32, i32* %sb.global-to-local, align 4
  %v9_e660 = icmp eq i32 %v1_e65c, %v1_e660
  store i1 %v9_e660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e65c, i32* %stack_var_-40, align 4
  %v5_e668 = icmp slt i32 %v1_e65c, %v1_e660
  br i1 %v5_e668, label %dec_label_pc_e540, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %bb57, %dec_label_pc_e4cc
  %v0_e66c = phi i32 [ %v0_e4e8, %dec_label_pc_e4cc ], [ %v1_e660, %bb57 ]
  %v2_e66c = icmp eq i32 %v0_e66c, 0
  store i1 %v2_e66c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_e6b4 = icmp eq i32 %v3_e4dc, add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1)
  br label %dec_label_pc_e674.outer

dec_label_pc_e674.outer:                          ; preds = %dec_label_pc_e784, %dec_label_pc_e66c
  %v1_e674.ph.in = phi i32 [ %v1_e778, %dec_label_pc_e784 ], [ %v0_e66c, %dec_label_pc_e66c ]
  %v0_e674.ph = phi i1 [ %v2_e784, %dec_label_pc_e784 ], [ %v2_e66c, %dec_label_pc_e66c ]
  %v1_e674.ph = icmp slt i32 %v1_e674.ph.in, 0
  %v4_e674 = or i1 %v1_e674.ph, %v0_e674.ph
  br label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e674.outer, %dec_label_pc_e674
  br i1 %v4_e674, label %dec_label_pc_e674, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e674
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e684

dec_label_pc_e684:                                ; preds = %dec_label_pc_e6d4, %dec_label_pc_e678
  %v1_e698 = phi i32 [ %v1_e774, %dec_label_pc_e6d4 ], [ 0, %dec_label_pc_e678 ]
  %v5_e688 = mul i32 %v1_e698, 24
  %v1_e68c = load i32, i32* @sl, align 4
  %v2_e68c = add i32 %v1_e68c, %v5_e688
  store i32 %v2_e68c, i32* %r3.global-to-local, align 4
  %v1_e694 = add i32 %v2_e68c, 20
  %v2_e694 = inttoptr i32 %v1_e694 to i8*
  %v3_e694 = load i8, i8* %v2_e694, align 1
  %v4_e694 = zext i8 %v3_e694 to i32
  store i32 %v4_e694, i32* %r2.global-to-local, align 4
  %v4_e698 = mul i32 %v1_e698, 4
  %v5_e698 = add i32 %v4_e698, %v2_e3b4
  %v6_e698 = inttoptr i32 %v5_e698 to i32*
  %v7_e698 = load i32, i32* %v6_e698, align 4
  store i32 %v7_e698, i32* @r5, align 4
  %v7_e6a0 = icmp eq i8 %v3_e694, 31
  store i1 %v7_e6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r7.global-to-local, align 4
  %v1_e6a8 = add i32 %v7_e698, 20
  store i32 %v1_e6a8, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_e694, 32
  br i1 %tmp61, label %dec_label_pc_e790, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e684
  store i32 %v3_e4dc, i32* %r2.global-to-local, align 4
  store i1 %v9_e6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6b4, label %dec_label_pc_e7f8, label %dec_label_pc_e6bc

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge, %dec_label_pc_e6b0
  %v1_e6c0 = phi i32 [ %v1_e6c0.pre, %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_e6b0 ]
  store i32 %v3_e4e0, i32* %r3.global-to-local, align 4
  %v9_e6c0 = icmp eq i32 %v3_e4e0, %v1_e6c0
  store i1 %v9_e6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6c0, label %dec_label_pc_e814, label %dec_label_pc_e6c8

dec_label_pc_e6c8:                                ; preds = %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge, %dec_label_pc_e6bc
  %v1_e6cc = phi i32 [ %v1_e6cc.pre, %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge ], [ %v1_e6c0, %dec_label_pc_e6bc ]
  %v9_e6cc = icmp eq i32 %v3_e4e4, %v1_e6cc
  store i1 %v9_e6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6cc, label %dec_label_pc_e830, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e814, %dec_label_pc_e6c8, %dec_label_pc_e830
  %v0_e6d8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6d8 = trunc i32 %v0_e6d8 to i8
  %v2_e6d8 = load i32, i32* @r5, align 4
  %v3_e6d8 = add i32 %v2_e6d8, 10
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 %v1_e6d8, i8* %v4_e6d8, align 1
  %v0_e6dc = load i32, i32* %r8.global-to-local, align 4
  %v1_e6dc = trunc i32 %v0_e6dc to i8
  %v2_e6dc = load i32, i32* @r5, align 4
  %v3_e6dc = add i32 %v2_e6dc, 11
  %v4_e6dc = inttoptr i32 %v3_e6dc to i8*
  store i8 %v1_e6dc, i8* %v4_e6dc, align 1
  %v0_e6e0 = load i32, i32* @r5, align 4
  store i32 %v0_e6e0, i32* @r0, align 4
  %v2_e6e4 = call i32 @function_f008(i32 %v0_e6e0, i32 20)
  %v3_e6e4 = trunc i32 %v2_e6e4 to i8
  %v4_e6e8 = sdiv i32 %v2_e6e4, 256
  store i32 %v4_e6e8, i32* %r3.global-to-local, align 4
  %v1_e6ec = trunc i32 %v4_e6e8 to i8
  %v2_e6ec = load i32, i32* @r5, align 4
  %v3_e6ec = add i32 %v2_e6ec, 11
  %v4_e6ec = inttoptr i32 %v3_e6ec to i8*
  store i8 %v1_e6ec, i8* %v4_e6ec, align 1
  %v3_e6f0 = load i32, i32* @r5, align 4
  %v4_e6f0 = add i32 %v3_e6f0, 10
  %v5_e6f0 = inttoptr i32 %v4_e6f0 to i8*
  store i8 %v3_e6e4, i8* %v5_e6f0, align 1
  %v0_e6f4 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6f4 = trunc i32 %v0_e6f4 to i8
  %v2_e6f4 = load i32, i32* @r6, align 4
  %v3_e6f4 = add i32 %v2_e6f4, 6
  %v4_e6f4 = inttoptr i32 %v3_e6f4 to i8*
  store i8 %v1_e6f4, i8* %v4_e6f4, align 1
  %v0_e6f8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e6f8 = trunc i32 %v0_e6f8 to i8
  %v2_e6f8 = load i32, i32* @r6, align 4
  %v3_e6f8 = add i32 %v2_e6f8, 7
  %v4_e6f8 = inttoptr i32 %v3_e6f8 to i8*
  store i8 %v1_e6f8, i8* %v4_e6f8, align 1
  %v0_e6fc = load i32, i32* @r5, align 4
  %v1_e6fc = add i32 %v0_e6fc, 24
  %v2_e6fc = inttoptr i32 %v1_e6fc to i8*
  %v3_e6fc = load i8, i8* %v2_e6fc, align 1
  %v4_e6fc = zext i8 %v3_e6fc to i32
  store i32 %v4_e6fc, i32* %r3.global-to-local, align 4
  %v1_e700 = add i32 %v0_e6fc, 25
  %v2_e700 = inttoptr i32 %v1_e700 to i8*
  %v3_e700 = load i8, i8* %v2_e700, align 1
  %v4_e700 = zext i8 %v3_e700 to i32
  %v4_e704 = mul nuw nsw i32 %v4_e700, 256
  %v5_e704 = or i32 %v4_e704, %v4_e6fc
  store i32 %v5_e704, i32* %r2.global-to-local, align 4
  %v3_e708 = load i32, i32* %stack_var_-44, align 4
  %v0_e70c = load i32, i32* @r6, align 4
  store i32 %v0_e70c, i32* @r1, align 4
  %v1_e710 = add i32 %v3_e708, 12
  store i32 %v1_e710, i32* %r3.global-to-local, align 4
  %v4_e718 = call i32 @function_f064(i32 %v0_e6fc, i32 %v0_e70c, i32 %v5_e704, i32 %v1_e710)
  %v5_e718 = trunc i32 %v4_e718 to i8
  %v4_e71c24 = udiv i32 %v4_e718, 256
  %v1_e720 = trunc i32 %v4_e71c24 to i8
  %v2_e720 = load i32, i32* @r6, align 4
  %v3_e720 = add i32 %v2_e720, 7
  %v4_e720 = inttoptr i32 %v3_e720 to i8*
  store i8 %v1_e720, i8* %v4_e720, align 1
  %v3_e724 = load i32, i32* @r6, align 4
  %v4_e724 = add i32 %v3_e724, 6
  %v5_e724 = inttoptr i32 %v4_e724 to i8*
  store i8 %v5_e718, i8* %v5_e724, align 1
  %v3_e728 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e728, i32* %r3.global-to-local, align 4
  %v0_e72c = load i32, i32* @r5, align 4
  %v1_e72c = add i32 %v0_e72c, 20
  %v2_e72c = inttoptr i32 %v1_e72c to i32*
  %v3_e72c = load i32, i32* %v2_e72c, align 4
  %v5_e734 = mul i32 %v3_e728, 24
  %v1_e738 = load i32, i32* @sl, align 4
  %v2_e738 = add i32 %v1_e738, %v5_e734
  store i32 %v2_e738, i32* %ip.global-to-local, align 4
  %v3_e73c = udiv i32 %v3_e72c, 65536
  store i32 %v3_e73c, i32* %r2.global-to-local, align 4
  %v1_e740 = trunc i32 %v3_e73c to i8
  %v3_e740 = add i32 %v2_e738, 2
  %v4_e740 = inttoptr i32 %v3_e740 to i8*
  store i8 %v1_e740, i8* %v4_e740, align 1
  %v0_e744 = load i32, i32* %r2.global-to-local, align 4
  %v3_e74425 = udiv i32 %v0_e744, 256
  %v3_e748 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e748, i32* %r2.global-to-local, align 4
  %v1_e74c = trunc i32 %v3_e74425 to i8
  %v2_e74c = load i32, i32* %ip.global-to-local, align 4
  %v3_e74c = add i32 %v2_e74c, 3
  %v4_e74c = inttoptr i32 %v3_e74c to i8*
  store i8 %v1_e74c, i8* %v4_e74c, align 1
  %v0_e750 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e758 = load i32, i32* %r2.global-to-local, align 4
  %v1_e758 = add i32 %v0_e758, 32
  store i32 %v1_e758, i32* %r2.global-to-local, align 4
  %v0_e75c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_e764 = load i32, i32* %ip.global-to-local, align 4
  %v6_e76c = inttoptr i32 %v0_e750 to i32*
  %v7_e76c = call i32 @function_14b1c(i32 %v0_e75c, i32* %v6_e76c, i32 %v1_e758, i32 16384, i32 %v0_e764, i32 16)
  %v3_e770 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e770, i32* %r3.global-to-local, align 4
  %v1_e774 = add i32 %v3_e770, 1
  %v1_e778 = load i32, i32* %sb.global-to-local, align 4
  %v9_e778 = icmp eq i32 %v1_e774, %v1_e778
  store i1 %v9_e778, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e774, i32* %stack_var_-40, align 4
  %v5_e780 = icmp slt i32 %v1_e774, %v1_e778
  br i1 %v5_e780, label %dec_label_pc_e684, label %dec_label_pc_e784

dec_label_pc_e784:                                ; preds = %dec_label_pc_e6d4
  %v2_e784 = icmp eq i32 %v1_e778, 0
  store i1 %v2_e784, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e674.outer

dec_label_pc_e790:                                ; preds = %dec_label_pc_e684
  %v1_e790 = add i32 %v2_e68c, 16
  %v2_e790 = inttoptr i32 %v1_e790 to i32*
  %v3_e790 = load i32, i32* %v2_e790, align 4
  store i32 %v3_e790, i32* @r4, align 4
  %v0_e794 = call i32 @function_10a94()
  %v3_e798 = load i32, i32* %stack_var_-40, align 4
  %v5_e7a0 = mul i32 %v3_e798, 24
  %v0_e7a4 = load i32, i32* @r4, align 4
  %v1_e7a8 = and i32 %v0_e7a4, 65280
  store i32 %v1_e7a8, i32* %r3.global-to-local, align 4
  %v1_e7a4 = udiv i32 %v0_e7a4, 256
  %v3_e7ac = and i32 %v1_e7a4, 65280
  store i32 %v3_e7ac, i32* %r2.global-to-local, align 4
  %v1_e7b0 = load i32, i32* @sl, align 4
  %v2_e7b0 = add i32 %v1_e7b0, %v5_e7a0
  store i32 %v2_e7b0, i32* %ip.global-to-local, align 4
  %v1_e7bc = add i32 %v2_e7b0, 20
  %v2_e7bc = inttoptr i32 %v1_e7bc to i8*
  %v3_e7bc = load i8, i8* %v2_e7bc, align 1
  %v4_e7bc = zext i8 %v3_e7bc to i32
  %v2_e7c4 = call i32 @llvm.bswap.i32(i32 %v0_e7a4)
  %v7_e7c8 = lshr i32 %v0_e794, %v4_e7bc
  %v8_e7c8 = add i32 %v7_e7c8, %v2_e7c4
  store i32 %v3_e4dc, i32* %r2.global-to-local, align 4
  %v2_e7e8 = call i32 @llvm.bswap.i32(i32 %v8_e7c8)
  store i32 %v2_e7e8, i32* %r3.global-to-local, align 4
  %v1_e7ec = load i32, i32* %r7.global-to-local, align 4
  %v9_e7ec = icmp eq i32 %v3_e4dc, %v1_e7ec
  store i1 %v9_e7ec, i1* %cpsr_z.global-to-local, align 1
  %v1_e7f0 = load i32, i32* @r5, align 4
  %v2_e7f0 = add i32 %v1_e7f0, 16
  %v3_e7f0 = inttoptr i32 %v2_e7f0 to i32*
  store i32 %v2_e7e8, i32* %v3_e7f0, align 4
  br i1 %v9_e7ec, label %dec_label_pc_e7f8, label %dec_label_pc_e790.dec_label_pc_e6bc_crit_edge

dec_label_pc_e790.dec_label_pc_e6bc_crit_edge:    ; preds = %dec_label_pc_e790
  %v1_e6c0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e6bc

dec_label_pc_e7f8:                                ; preds = %dec_label_pc_e790, %dec_label_pc_e6b0
  %v0_e7f8 = call i32 @function_10a94()
  %v1_e7f8 = trunc i32 %v0_e7f8 to i8
  %v4_e7fc26 = udiv i32 %v0_e7f8, 256
  %v1_e800 = trunc i32 %v4_e7fc26 to i8
  %v2_e800 = load i32, i32* @r5, align 4
  %v3_e800 = add i32 %v2_e800, 5
  %v4_e800 = inttoptr i32 %v3_e800 to i8*
  store i8 %v1_e800, i8* %v4_e800, align 1
  store i32 %v3_e4e0, i32* %r3.global-to-local, align 4
  %v1_e808 = load i32, i32* %r7.global-to-local, align 4
  %v9_e808 = icmp eq i32 %v3_e4e0, %v1_e808
  store i1 %v9_e808, i1* %cpsr_z.global-to-local, align 1
  %v3_e80c = load i32, i32* @r5, align 4
  %v4_e80c = add i32 %v3_e80c, 4
  %v5_e80c = inttoptr i32 %v4_e80c to i8*
  store i8 %v1_e7f8, i8* %v5_e80c, align 1
  %v0_e810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e810, label %dec_label_pc_e814, label %dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge

dec_label_pc_e7f8.dec_label_pc_e6c8_crit_edge:    ; preds = %dec_label_pc_e7f8
  %v1_e6cc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e6c8

dec_label_pc_e814:                                ; preds = %dec_label_pc_e7f8, %dec_label_pc_e6bc
  %v0_e814 = call i32 @function_10a94()
  %v1_e814 = trunc i32 %v0_e814 to i8
  %v4_e81c = sdiv i32 %v0_e814, 256
  store i32 %v4_e81c, i32* %r3.global-to-local, align 4
  %v1_e820 = load i32, i32* %r7.global-to-local, align 4
  %v9_e820 = icmp eq i32 %v3_e4e4, %v1_e820
  store i1 %v9_e820, i1* %cpsr_z.global-to-local, align 1
  %v3_e824 = load i32, i32* @r5, align 4
  %v4_e824 = add i32 %v3_e824, 20
  %v5_e824 = inttoptr i32 %v4_e824 to i8*
  store i8 %v1_e814, i8* %v5_e824, align 1
  %v0_e828 = load i32, i32* %r3.global-to-local, align 4
  %v1_e828 = trunc i32 %v0_e828 to i8
  %v2_e828 = load i32, i32* @r6, align 4
  %v3_e828 = add i32 %v2_e828, 1
  %v4_e828 = inttoptr i32 %v3_e828 to i8*
  store i8 %v1_e828, i8* %v4_e828, align 1
  %v0_e82c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e82c, label %dec_label_pc_e830, label %dec_label_pc_e6d4

dec_label_pc_e830:                                ; preds = %dec_label_pc_e814, %dec_label_pc_e6c8
  %v0_e830 = call i32 @function_10a94()
  %v1_e830 = trunc i32 %v0_e830 to i8
  %v4_e834 = sdiv i32 %v0_e830, 256
  store i32 %v4_e834, i32* %r3.global-to-local, align 4
  %v1_e838 = trunc i32 %v4_e834 to i8
  %v2_e838 = load i32, i32* @r6, align 4
  %v3_e838 = add i32 %v2_e838, 3
  %v4_e838 = inttoptr i32 %v3_e838 to i8*
  store i8 %v1_e838, i8* %v4_e838, align 1
  %v3_e83c = load i32, i32* @r6, align 4
  %v4_e83c = add i32 %v3_e83c, 2
  %v5_e83c = inttoptr i32 %v4_e83c to i8*
  store i8 %v1_e830, i8* %v5_e83c, align 1
  br label %dec_label_pc_e6d4

dec_label_pc_e844:                                ; preds = %dec_label_pc_e4a4
  %v0_e844 = load i32, i32* %fp.global-to-local, align 4
  %v1_e848 = call i32 @function_14284(i32 %v0_e844)
  br label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e394, %dec_label_pc_e844
  %v29_e850 = phi i32 [ %v3_e494, %dec_label_pc_e394 ], [ %v1_e848, %dec_label_pc_e844 ]
  store i32 %v3_e394, i32* %r4.global-to-local, align 4
  store i32 %v12_e394, i32* %r7.global-to-local, align 4
  ret i32 %v29_e850

; uselistorder directives
  uselistorder i32 %v4_e834, { 1, 0 }
  uselistorder i32 %v2_e7e8, { 1, 0 }
  uselistorder i32 %v0_e7a4, { 1, 0, 2 }
  uselistorder i1 %v2_e784, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e774, { 2, 0, 3, 1 }
  uselistorder i32 %v3_e73c, { 1, 0 }
  uselistorder i32 %v4_e6e8, { 1, 0 }
  uselistorder i32 %v1_e65c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e600, { 1, 0 }
  uselistorder i32 %v1_e588, { 1, 0 }
  uselistorder i32 %v1_e510, { 1, 0 }
  uselistorder i32 %v1_e504, { 1, 0 }
  uselistorder i32 %v3_e4dc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e4d4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_e4cc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_e4c4, { 1, 0 }
  uselistorder i1 %v7_e498, { 1, 0 }
  uselistorder i32 %v3_e494, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e434, { 1, 0 }
  uselistorder i8 %v5_e424, { 1, 0 }
  uselistorder i32 %v5_e408, { 1, 0 }
  uselistorder i32 %v6_e3cc, { 1, 0 }
  uselistorder i32 %v1_e398, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_e84c, { 1, 0 }
  uselistorder label %dec_label_pc_e6d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e674, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e858(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e858:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_e858 = load i32, i32* @r4, align 4
  %v15_e858 = load i32, i32* @r8, align 4
  %v18_e858 = load i32, i32* @sb, align 4
  %v21_e858 = load i32, i32* @sl, align 4
  %v24_e858 = load i32, i32* @fp, align 4
  %v1_e864 = urem i32 %arg1, 256
  store i32 %v1_e864, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e870 = urem i32 %arg3, 256
  store i32 %v1_e870, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_e87c = call i32 @function_14e84(i32 %v1_e864, i32 4)
  %v0_e880 = load i32, i32* @r5, align 4
  store i32 %v0_e880, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e88c = load i32, i32* @r4, align 4
  store i32 %v0_e88c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_e894 = inttoptr i32 %v0_e880 to i32*
  %v6_e894 = call i32 @function_a4e8(i32 %v0_e88c, i32* %v5_e894, i32 2, i32 0)
  %v1_e8a0 = urem i32 %v6_e894, 256
  store i32 %v1_e8a0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e8ac = load i32, i32* @r4, align 4
  store i32 %v0_e8ac, i32* %r0.global-to-local, align 4
  %v0_e8b0 = load i32, i32* @r5, align 4
  store i32 %v0_e8b0, i32* %r1.global-to-local, align 4
  %v5_e8b4 = trunc i32 %v6_e894 to i8
  %v6_e8b8 = inttoptr i32 %v0_e8b0 to i32*
  %v7_e8b8 = call i32 @function_a4e8(i32 %v0_e8ac, i32* %v6_e8b8, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_e8bc = load i32, i32* @r5, align 4
  store i32 %v0_e8bc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_e8c8 = load i32, i32* @r4, align 4
  store i32 %v0_e8c8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_e8d0 = inttoptr i32 %v0_e8bc to i32*
  %v6_e8d0 = call i32 @function_a4e8(i32 %v0_e8c8, i32* %v5_e8d0, i32 4, i32 64)
  %v1_e8d8 = urem i32 %v6_e8d0, 256
  store i32 %v1_e8d8, i32* %ip.global-to-local, align 4
  %v0_e8dc = load i32, i32* @r5, align 4
  store i32 %v0_e8dc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e8e8 = load i32, i32* @r4, align 4
  store i32 %v0_e8e8, i32* %r0.global-to-local, align 4
  %v6_e8f0 = inttoptr i32 %v0_e8dc to i32*
  %v7_e8f0 = call i32 @function_a4e8(i32 %v0_e8e8, i32* %v6_e8f0, i32 5, i32 0)
  %v1_e8fc = urem i32 %v7_e8f0, 256
  store i32 %v1_e8fc, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e908 = load i32, i32* @r4, align 4
  store i32 %v0_e908, i32* %r0.global-to-local, align 4
  %v0_e90c = load i32, i32* @r5, align 4
  store i32 %v0_e90c, i32* %r1.global-to-local, align 4
  %v5_e914 = inttoptr i32 %v0_e90c to i32*
  %v6_e914 = call i32 @function_a4e8(i32 %v0_e908, i32* %v5_e914, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_e918 = load i32, i32* @r5, align 4
  store i32 %v0_e918, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_e914, i32* %fp.global-to-local, align 4
  %v0_e928 = load i32, i32* @r4, align 4
  store i32 %v0_e928, i32* %r0.global-to-local, align 4
  %v4_e92c = inttoptr i32 %v0_e918 to i32*
  %v5_e92c = call i32 @function_a4e8(i32 %v0_e928, i32* %v4_e92c, i32 7, i32 53)
  %v0_e934 = load i32, i32* @r5, align 4
  store i32 %v0_e934, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_e92c, i32* %sb.global-to-local, align 4
  %v0_e944 = load i32, i32* @r4, align 4
  store i32 %v0_e944, i32* %r0.global-to-local, align 4
  %v4_e948 = inttoptr i32 %v0_e934 to i32*
  %v5_e948 = call i32 @function_a4e8(i32 %v0_e944, i32* %v4_e948, i32 9, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v0_e94c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_e948, i32* @sl, align 4
  %v0_e95c = load i32, i32* @r4, align 4
  store i32 %v0_e95c, i32* %r0.global-to-local, align 4
  %v4_e960 = inttoptr i32 %v0_e94c to i32*
  %v5_e960 = call i32 @function_a4e8(i32 %v0_e95c, i32* %v4_e960, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e96c = load i32, i32* @r5, align 4
  store i32 %v0_e96c, i32* %r1.global-to-local, align 4
  store i32 %v5_e960, i32* %r8.global-to-local, align 4
  %v0_e974 = load i32, i32* @r4, align 4
  store i32 %v0_e974, i32* %r0.global-to-local, align 4
  %v5_e978 = inttoptr i32 %v0_e96c to i32*
  %v6_e978 = call i32 @function_9f84(i32 %v0_e974, i32* %v5_e978, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_e984 = call i32 @function_12fa0(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_e990 = call i32 @function_12ebc(i32 30, i32* null)
  store i32 %v3_e990, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e998 = inttoptr i32 %v3_e990 to i8*
  %v3_e998 = call i32 @function_143b0(i8* %v2_e998, i32 0)
  store i32 %v3_e998, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_e9a4 = call i32 @function_12ee8(i32 30)
  store i32 %v1_e9a4, i32* %r0.global-to-local, align 4
  %v0_e9a8 = load i32, i32* @r4, align 4
  %v1_e9a8 = icmp slt i32 %v0_e9a8, 0
  %v2_e9a8 = icmp eq i32 %v0_e9a8, 0
  store i1 %v2_e9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_e9a8, label %dec_label_pc_ef74, label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %dec_label_pc_e858
  %v2_e9b4 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_e9b4, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_e9b4, i32* %r1.global-to-local, align 4
  store i32 %v0_e9a8, i32* %r0.global-to-local, align 4
  %v4_e9c4 = call i32 @function_1444c(i32 %v0_e9a8, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_e9c4, i32* @r5, align 4
  %v0_e9cc = load i32, i32* @r4, align 4
  store i32 %v0_e9cc, i32* %r0.global-to-local, align 4
  %v1_e9d0 = call i32 @function_14284(i32 %v0_e9cc)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_e9d8 = call i32 @function_12fa0(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_e9e4 = call i32 @function_12ebc(i32 31, i32* null)
  %v0_e9e8 = load i32, i32* @r5, align 4
  store i32 %v0_e9e8, i32* @r1, align 4
  store i32 %v3_e9e4, i32* %r2.global-to-local, align 4
  store i32 %v2_e9b4, i32* %r0.global-to-local, align 4
  %v3_e9f4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_e9f4 = call i32 @function_13c18(i8* %v3_e9f4, i32 %v0_e9e8, i32 %v3_e9e4)
  store i32 %v4_e9f4, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ea00 = call i32 @function_12ee8(i32 31)
  store i32 %v1_ea00, i32* %r0.global-to-local, align 4
  %v0_ea04 = load i32, i32* @r4, align 4
  %v7_ea04 = icmp eq i32 %v0_ea04, -1
  store i1 %v7_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea04, label %dec_label_pc_ef74, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_e9b0
  %v0_ea0c = load i32, i32* @r5, align 4
  %v9_ea0c = icmp eq i32 %v0_ea0c, %v0_ea04
  store i1 %v9_ea0c, i1* %cpsr_z.global-to-local, align 1
  %v7_ea10 = icmp sgt i32 %v0_ea0c, %v0_ea04
  br i1 %v7_ea10, label %dec_label_pc_ea14, label %dec_label_pc_ef74

dec_label_pc_ea14:                                ; preds = %dec_label_pc_ea0c
  store i32 %v0_ea0c, i32* %r3.global-to-local, align 4
  store i32 %v0_ea04, i32* %r2.global-to-local, align 4
  %v0_ea24 = load i32, i32* @r6, align 4
  %v2_ea24 = add i32 %v0_ea24, %v0_ea04
  store i32 %v2_ea24, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ea2c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ea2c, i32* @r7, align 4
  %v1_ea5c = add i32 %v0_ea0c, -1
  br label %dec_label_pc_ea54

dec_label_pc_ea38:                                ; preds = %dec_label_pc_ea7c, %bb138
  %v9_ea38 = icmp eq i32 %v0_ea44, %v1_ea5c
  store i1 %v9_ea38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea38, label %dec_label_pc_ea88, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_ea6c, %dec_label_pc_ea38, %bb
  %v0_ea7842 = phi i32 [ %v0_ea78, %dec_label_pc_ea6c ], [ %v0_ea7843, %dec_label_pc_ea38 ], [ %v0_ea78, %bb ]
  %v0_ea5838 = phi i32 [ 0, %dec_label_pc_ea6c ], [ %v0_ea5839, %dec_label_pc_ea38 ], [ 0, %bb ]
  store i32 %v0_ea0c, i32* %r0.global-to-local, align 4
  %v1_ea44 = add i32 %v0_ea44, 1
  store i32 %v1_ea44, i32* %r2.global-to-local, align 4
  %v9_ea48 = icmp eq i32 %v0_ea0c, %v1_ea44
  store i1 %v9_ea48, i1* %cpsr_z.global-to-local, align 1
  %v1_ea4c = add i32 %v0_ea4c, 1
  store i32 %v1_ea4c, i32* @r7, align 4
  br i1 %v9_ea48, label %dec_label_pc_ef74, label %dec_label_pc_ea54

dec_label_pc_ea54:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea14
  %v0_ea4c = phi i32 [ %v1_ea4c, %dec_label_pc_ea40 ], [ %v2_ea2c, %dec_label_pc_ea14 ]
  %v0_ea44 = phi i32 [ %v1_ea44, %dec_label_pc_ea40 ], [ %v0_ea04, %dec_label_pc_ea14 ]
  %v0_ea78 = phi i32 [ %v0_ea7842, %dec_label_pc_ea40 ], [ 0, %dec_label_pc_ea14 ]
  %v0_ea58 = phi i32 [ %v0_ea5838, %dec_label_pc_ea40 ], [ 0, %dec_label_pc_ea14 ]
  %v0_ea60 = phi i32 [ %v1_ea60, %dec_label_pc_ea40 ], [ %v2_ea24, %dec_label_pc_ea14 ]
  %v1_ea54 = inttoptr i32 %v0_ea60 to i8*
  %v2_ea54 = load i8, i8* %v1_ea54, align 1
  %v3_ea54 = zext i8 %v2_ea54 to i32
  store i32 %v3_ea54, i32* %r3.global-to-local, align 4
  %v2_ea58 = icmp eq i32 %v0_ea58, 0
  store i1 %v2_ea58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ea5c, i32* %ip.global-to-local, align 4
  %v1_ea60 = add i32 %v0_ea60, 1
  store i32 %v1_ea60, i32* %r1.global-to-local, align 4
  %v1_ea64 = add nsw i32 %v3_ea54, -48
  store i32 %v1_ea64, i32* %r0.global-to-local, align 4
  br i1 %v2_ea58, label %dec_label_pc_ea6c, label %dec_label_pc_ea7c

dec_label_pc_ea6c:                                ; preds = %dec_label_pc_ea54
  %v7_ea6c = icmp eq i8 %v2_ea54, 9
  store i1 %v7_ea6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea6c, label %dec_label_pc_ea40, label %bb

bb:                                               ; preds = %dec_label_pc_ea6c
  %v8_ea70 = icmp eq i8 %v2_ea54, 32
  store i1 %v8_ea70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea70, label %dec_label_pc_ea40, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %bb
  %v1_ea78 = add i32 %v0_ea78, 1
  store i32 %v1_ea78, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_ea7c

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea54, %dec_label_pc_ea78
  %v0_ea7843 = phi i32 [ %v0_ea78, %dec_label_pc_ea54 ], [ %v1_ea78, %dec_label_pc_ea78 ]
  %v0_ea5839 = phi i32 [ %v0_ea58, %dec_label_pc_ea54 ], [ %v1_ea78, %dec_label_pc_ea78 ]
  %v7_ea7c = icmp eq i8 %v2_ea54, 46
  store i1 %v7_ea7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea7c, label %dec_label_pc_ea38, label %bb138

bb138:                                            ; preds = %dec_label_pc_ea7c
  %v8_ea80 = icmp eq i32 %v1_ea64, 9
  store i1 %v8_ea80, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ea64, 10
  br i1 %tmp, label %dec_label_pc_ea38, label %dec_label_pc_ea88

dec_label_pc_ea88:                                ; preds = %dec_label_pc_ea38, %bb138
  %v0_ea44.lcssa = phi i32 [ %v1_ea5c, %dec_label_pc_ea38 ], [ %v0_ea44, %bb138 ]
  %v2_ea8c = sub i32 %v0_ea44.lcssa, %v0_ea04
  store i32 %v2_ea8c, i32* %r2.global-to-local, align 4
  store i32 %v2_ea24, i32* %r1.global-to-local, align 4
  store i32 %v2_ea2c, i32* %r0.global-to-local, align 4
  %v3_ea98 = call i32 @function_13940(i32 %v2_ea2c, i32 %v2_ea24, i32 %v2_ea8c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ea2c, i32* @r0, align 4
  %v2_eaa8 = load i32, i32* @r7, align 4
  %v3_eaa8 = inttoptr i32 %v2_eaa8 to i8*
  store i8 0, i8* %v3_eaa8, align 1
  %v1_eaac = call i32 @function_14960(i32 %v2_ea2c)
  store i32 %v1_eaac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_eab420:                              ; preds = %dec_label_pc_ef74
  unreachable

dec_label_pc_eab4:                                ; preds = %dec_label_pc_efec, %dec_label_pc_efdc, %dec_label_pc_efd0, %dec_label_pc_efbc, %dec_label_pc_ea88
  %v29_efb874 = phi i32 [ %v1_ef78, %dec_label_pc_efec ], [ %v1_ef78, %dec_label_pc_efdc ], [ %v1_ef78, %dec_label_pc_efd0 ], [ %v1_ef78, %dec_label_pc_efbc ], [ %v1_eaac, %dec_label_pc_ea88 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_efec ], [ 104859200, %dec_label_pc_efdc ], [ 707416650, %dec_label_pc_efd0 ], [ 134744072, %dec_label_pc_efbc ], [ %v1_eaac, %dec_label_pc_ea88 ]
  store i32 %v6_e978, i32* %ip.global-to-local, align 4
  %v2_eab8 = icmp eq i32 %v6_e978, 0
  store i1 %v2_eab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eab8, label %dec_label_pc_efb0, label %dec_label_pc_eac0

dec_label_pc_eac0:                                ; preds = %dec_label_pc_eab4
  store i32 %v6_e978, i32* %r0.global-to-local, align 4
  %v1_eac4 = inttoptr i32 %v6_e978 to i8*
  %v2_eac4 = call i32 @function_138c4(i8* %v1_eac4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ead8 = call i32 @function_14b80(i32 2, i32 3, i32 17)
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v7_eadc = icmp eq i32 %v3_ead8, -1
  store i1 %v7_eadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eadc, label %dec_label_pc_efb0, label %dec_label_pc_eae8

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eac0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_eaf4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_eaf4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_eb08 = call i32 @function_14b50(i32 %v3_ead8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_eb08, i32* %r0.global-to-local, align 4
  %v7_eb0c = icmp eq i32 %v6_eb08, -1
  store i1 %v7_eb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb0c, label %dec_label_pc_efa8, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eae8
  store i32 %v1_e864, i32* %r0.global-to-local, align 4
  %v3_eb1c = mul i32 %v7_e8b8, 65536
  store i32 %v3_eb1c, i32* %lr.global-to-local, align 4
  %v0_eb20 = load i32, i32* @sl, align 4
  %v3_eb20 = mul i32 %v0_eb20, 65536
  store i32 %v3_eb20, i32* %sl.global-to-local, align 4
  %v0_eb24 = load i32, i32* %r8.global-to-local, align 4
  %v0_eb28 = load i32, i32* %fp.global-to-local, align 4
  %v0_eb2c = load i32, i32* %sb.global-to-local, align 4
  %v3_eb2c = mul i32 %v0_eb2c, 65536
  store i32 %v3_eb2c, i32* %sb.global-to-local, align 4
  %v5_eb30 = trunc i32 %v0_eb24 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_eb38 = urem i32 %v7_e8b8, 65536
  store i32 %v3_eb38, i32* %r2.global-to-local, align 4
  %v3_eb3c = urem i32 %v0_eb28, 65536
  store i32 %v3_eb3c, i32* %r3.global-to-local, align 4
  %v3_eb40 = urem i32 %v0_eb2c, 65536
  store i32 %v3_eb40, i32* %r4.global-to-local, align 4
  %v3_eb44 = urem i32 %v0_eb20, 65536
  store i32 %v3_eb44, i32* %r8.global-to-local, align 4
  %v2_eb48 = icmp eq i32 %v1_e864, 0
  store i1 %v2_eb48, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eb48, label %dec_label_pc_ef98, label %dec_label_pc_eb6c

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_eb14
  %v4_eb70 = sext i8 %v5_eb30 to i32
  %v2_eb74 = add i32 %v4_eb70, %v2_eac4
  store i32 %v2_eb74, i32* @fp, align 4
  %v3_eb78 = mul i32 %v2_eb74, 65536
  %v1_eb7c = add i32 %v3_eb78, 1769472
  store i32 %v1_eb7c, i32* @r6, align 4
  %v1_eb80 = add i32 %v3_eb78, 3080192
  %v1_eb94 = urem i32 %v0_eb20, 256
  %v3_eba4 = udiv i32 %v1_eb7c, 256
  %v1_eba8 = urem i32 %v7_e8b8, 256
  %v1_ebac = and i32 %v3_eba4, 65280
  %v1_ebb0 = urem i32 %v0_eb2c, 256
  %v3_ebb4 = mul nuw nsw i32 %v1_eb94, 256
  %v1_ebbc = urem i32 %v0_eb28, 256
  %v3_ebc0 = mul nuw nsw i32 %v1_ebb0, 256
  %tmp139 = udiv i32 %v0_eb20, 256
  %v4_ebc4 = urem i32 %tmp139, 256
  %v5_ebc4 = or i32 %v4_ebc4, %v3_ebb4
  store i32 %v5_ebc4, i32* %r8.global-to-local, align 4
  %v4_ebc8 = udiv i32 %v1_eb7c, 16777216
  %v5_ebc8 = or i32 %v1_ebac, %v4_ebc8
  store i32 %v5_ebc8, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_eb28, 256
  %v3_ebd4 = urem i32 %tmp140, 256
  %v4_ebd8 = sdiv i32 %v1_eb80, 16777216
  %tmp141 = udiv i32 %v7_e8b8, 256
  %v4_ebe0 = mul nuw nsw i32 %v1_ebbc, 256
  %v5_ebe0 = or i32 %v4_ebe0, %v3_ebd4
  store i32 %v5_ebe0, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_eb2c, 256
  %v4_ebe4 = urem i32 %tmp142, 256
  %v5_ebe4 = or i32 %v4_ebe4, %v3_ebc0
  store i32 %v5_ebe4, i32* %sb.global-to-local, align 4
  store i32 %v1_eba8, i32* %r0.global-to-local, align 4
  %v1_ebf0 = add i32 %v2_eac4, 1
  store i32 %v1_ebf0, i32* @r7, align 4
  %v3_ebf4 = ashr i32 %v1_eb80, 31
  store i32 %v3_ebf4, i32* @lr, align 4
  store i32 %v1_ebbc, i32* %r1.global-to-local, align 4
  store i32 %v1_ebb0, i32* %r2.global-to-local, align 4
  %v3_ec0075 = udiv i32 %v1_ebac, 256
  store i32 %v3_ec0075, i32* %r3.global-to-local, align 4
  store i32 %v1_eb94, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ec64 = sext i8 %v5_e8b4 to i32
  %sext13 = mul i32 %v6_e8d0, 16777216
  %v4_ec7c = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_ec90 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_e8b8, 16777216
  %v4_ec94 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_eb7c, 256
  %v4_ecc4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_eb2c, 16777216
  %v4_ecc8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_eb28, 16777216
  %v4_ecec = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_eb20, 16777216
  %v4_ecf8 = sdiv i32 %sext19, 16777216
  %v1_ec74 = trunc i32 %v4_ebd8 to i8
  %extract.t = trunc i32 %v3_ebf4 to i8
  br label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_eb6c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ec2c = call i32 @function_14e84(i32 600, i32 1)
  store i32 %v2_ec2c, i32* %r0.global-to-local, align 4
  store i32 %v2_e87c, i32* %lr.global-to-local, align 4
  %v3_ec34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ec34, i32* %r3.global-to-local, align 4
  %v2_ec38 = load i32, i32* @r4, align 4
  %v5_ec38 = mul i32 %v2_ec38, 4
  %v6_ec38 = add i32 %v5_ec38, %v2_e87c
  %v7_ec38 = inttoptr i32 %v6_ec38 to i32*
  store i32 %v2_ec2c, i32* %v7_ec38, align 4
  %v0_ec3c = load i32, i32* %lr.global-to-local, align 4
  %v1_ec3c = load i32, i32* %r3.global-to-local, align 4
  %v4_ec3c = mul i32 %v1_ec3c, 4
  %v5_ec3c = add i32 %v4_ec3c, %v0_ec3c
  %v6_ec3c = inttoptr i32 %v5_ec3c to i32*
  %v7_ec3c = load i32, i32* %v6_ec3c, align 4
  store i32 %v7_ec3c, i32* %r1.global-to-local, align 4
  %v1_ec40 = inttoptr i32 %v7_ec3c to i8*
  %v2_ec40 = load i8, i8* %v1_ec40, align 1
  %tmp154 = urem i8 %v2_ec40, 16
  %v1_ec44 = zext i8 %tmp154 to i32
  %v1_ec48 = or i32 %v1_ec44, 64
  store i32 %v1_ec48, i32* %r2.global-to-local, align 4
  %v1_ec4c = trunc i32 %v1_ec48 to i8
  store i8 %v1_ec4c, i8* %v1_ec40, align 1
  %v0_ec50 = load i32, i32* %r1.global-to-local, align 4
  %v1_ec50 = inttoptr i32 %v0_ec50 to i8*
  %v2_ec50 = load i8, i8* %v1_ec50, align 1
  %v1_ec54 = and i8 %v2_ec50, -16
  %v1_ec58 = or i8 %v1_ec54, 5
  store i32 %v1_e8fc, i32* %r0.global-to-local, align 4
  store i8 %v1_ec58, i8* %v1_ec50, align 1
  store i32 %v4_ec64, i32* %r2.global-to-local, align 4
  %v2_ec68 = load i32, i32* %r1.global-to-local, align 4
  %v3_ec68 = add i32 %v2_ec68, 1
  %v4_ec68 = inttoptr i32 %v3_ec68 to i8*
  store i8 %v5_e8b4, i8* %v4_ec68, align 1
  store i32 %v4_ebd8, i32* %r3.global-to-local, align 4
  %v0_ec70 = load i32, i32* %r0.global-to-local, align 4
  %v2_ec70 = icmp eq i32 %v0_ec70, 0
  store i1 %v2_ec70, i1* %cpsr_z.global-to-local, align 1
  %v2_ec74 = load i32, i32* %r1.global-to-local, align 4
  %v3_ec74 = add i32 %v2_ec74, 2
  %v4_ec74 = inttoptr i32 %v3_ec74 to i8*
  store i8 %v1_ec74, i8* %v4_ec74, align 1
  store i32 %v3_ebf4, i32* %r4.global-to-local, align 4
  store i32 %v4_ec7c, i32* %r0.global-to-local, align 4
  %v0_ec80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec80, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_ec24
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ec84 = load i32, i32* %r1.global-to-local, align 4
  %v4_ec84 = add i32 %v3_ec84, 6
  %v5_ec84 = inttoptr i32 %v4_ec84 to i8*
  store i8 64, i8* %v5_ec84, align 1
  %v0_ec8c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_ec8c.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ec24, %bb143
  %v0_ec8c.off0 = phi i8 [ %extract.t, %dec_label_pc_ec24 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ec8c = load i32, i32* %r1.global-to-local, align 4
  %v3_ec8c = add i32 %v2_ec8c, 3
  %v4_ec8c = inttoptr i32 %v3_ec8c to i8*
  store i8 %v0_ec8c.off0, i8* %v4_ec8c, align 1
  store i32 %v4_ec90, i32* %ip.global-to-local, align 4
  store i32 %v4_ec94, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* %r4.global-to-local, align 4
  %v0_ec9c = load i32, i32* %r0.global-to-local, align 4
  %v1_ec9c = trunc i32 %v0_ec9c to i8
  %v2_ec9c = load i32, i32* %r1.global-to-local, align 4
  %v3_ec9c = add i32 %v2_ec9c, 8
  %v4_ec9c = inttoptr i32 %v3_ec9c to i8*
  store i8 %v1_ec9c, i8* %v4_ec9c, align 1
  %v0_eca0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eca0 = trunc i32 %v0_eca0 to i8
  %v2_eca0 = load i32, i32* %r1.global-to-local, align 4
  %v3_eca0 = add i32 %v2_eca0, 9
  %v4_eca0 = inttoptr i32 %v3_eca0 to i8*
  store i8 %v1_eca0, i8* %v4_eca0, align 1
  %v0_eca4 = load i32, i32* %lr.global-to-local, align 4
  %v1_eca4 = trunc i32 %v0_eca4 to i8
  %v2_eca4 = load i32, i32* %r1.global-to-local, align 4
  %v3_eca4 = add i32 %v2_eca4, 5
  %v4_eca4 = inttoptr i32 %v3_eca4 to i8*
  store i8 %v1_eca4, i8* %v4_eca4, align 1
  %v0_eca8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eca8, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_ecac23 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_ecac23, i32* %r3.global-to-local, align 4
  store i32 %v4_eb70, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ecac = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_ecac, i32* %r3.global-to-local, align 4
  store i32 %v4_eb70, i32* %lr.global-to-local, align 4
  %v3_ecb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_ecb4 = add i32 %v3_ecb4, 7
  %v5_ecb4 = inttoptr i32 %v4_ecb4 to i8*
  store i8 0, i8* %v5_ecb4, align 1
  %v0_ecbc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ecc0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_ecc0 = phi i32 [ %v2_ecac23, %.thread22 ], [ %v0_ecc0.pre, %bb144 ]
  %v0_ecbc = phi i32 [ %v4_eb70, %.thread22 ], [ %v0_ecbc.pre, %bb144 ]
  %v0_ecb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ecb8 = add i32 %v0_ecbc, 41
  %v2_ecbc = add i32 %v1_ecb8, %v0_ecb8
  store i32 %v2_ecbc, i32* %r4.global-to-local, align 4
  %v2_ecc0 = add i32 %v0_ecb8, 12
  %v3_ecc0 = inttoptr i32 %v2_ecc0 to i32*
  store i32 %v0_ecc0, i32* %v3_ecc0, align 4
  store i32 %v4_ecc4, i32* %r2.global-to-local, align 4
  store i32 %v4_ecc8, i32* %r3.global-to-local, align 4
  %v0_eccc = load i32, i32* %r1.global-to-local, align 4
  %v1_eccc = add i32 %v0_eccc, 20
  store i32 %v1_eccc, i32* %r0.global-to-local, align 4
  %v0_ecd0 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecd0 = trunc i32 %v0_ecd0 to i8
  %v3_ecd0 = add i32 %v0_eccc, 4
  %v4_ecd0 = inttoptr i32 %v3_ecd0 to i8*
  store i8 %v1_ecd0, i8* %v4_ecd0, align 1
  %v0_ecd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ecd4 = trunc i32 %v0_ecd4 to i8
  %v2_ecd4 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecd4 = add i32 %v2_ecd4, 5
  %v4_ecd4 = inttoptr i32 %v3_ecd4 to i8*
  store i8 %v1_ecd4, i8* %v4_ecd4, align 1
  %v0_ecd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ecd8 = trunc i32 %v0_ecd8 to i8
  %v2_ecd8 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecd8 = add i32 %v2_ecd8, 3
  %v4_ecd8 = inttoptr i32 %v3_ecd8 to i8*
  store i8 %v1_ecd8, i8* %v4_ecd8, align 1
  %v0_ecdc = load i32, i32* %sb.global-to-local, align 4
  %v1_ecdc = trunc i32 %v0_ecdc to i8
  %v2_ecdc = load i32, i32* %r0.global-to-local, align 4
  %v3_ecdc = add i32 %v2_ecdc, 2
  %v4_ecdc = inttoptr i32 %v3_ecdc to i8*
  store i8 %v1_ecdc, i8* %v4_ecdc, align 1
  %v0_ece0 = load i32, i32* %sl.global-to-local, align 4
  %v1_ece0 = trunc i32 %v0_ece0 to i8
  %v2_ece0 = load i32, i32* %r0.global-to-local, align 4
  %v3_ece0 = add i32 %v2_ece0, 4
  %v4_ece0 = inttoptr i32 %v3_ece0 to i8*
  store i8 %v1_ece0, i8* %v4_ece0, align 1
  %v0_ece4 = load i32, i32* @r5, align 4
  %v1_ece4 = trunc i32 %v0_ece4 to i8
  %v2_ece4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ece4 = add i32 %v2_ece4, 20
  %v4_ece4 = inttoptr i32 %v3_ece4 to i8*
  store i8 %v1_ece4, i8* %v4_ece4, align 1
  store i32 %v4_ecec, i32* %r2.global-to-local, align 4
  %v1_ecf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_ecf0 = add i32 %v1_ecf0, 16
  %v3_ecf0 = inttoptr i32 %v2_ecf0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ecf0, align 4
  %v0_ecf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf4 = trunc i32 %v0_ecf4 to i8
  %v2_ecf4 = load i32, i32* %r0.global-to-local, align 4
  %v3_ecf4 = add i32 %v2_ecf4, 1
  %v4_ecf4 = inttoptr i32 %v3_ecf4 to i8*
  store i8 %v1_ecf4, i8* %v4_ecf4, align 1
  store i32 %v4_ecf8, i32* %lr.global-to-local, align 4
  store i32 %v4_eb70, i32* %r0.global-to-local, align 4
  %v0_ed00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ed00 = add i32 %v0_ed00, 28
  store i32 %v1_ed00, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ed0c = load i32, i32* %r8.global-to-local, align 4
  %v1_ed0c = trunc i32 %v0_ed0c to i8
  %v4_ed0c = inttoptr i32 %v1_ed00 to i8*
  store i8 %v1_ed0c, i8* %v4_ed0c, align 1
  %v0_ed10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed10 = trunc i32 %v0_ed10 to i8
  %v2_ed10 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed10 = add i32 %v2_ed10, 5
  %v4_ed10 = inttoptr i32 %v3_ed10 to i8*
  store i8 %v1_ed10, i8* %v4_ed10, align 1
  %v0_ed14 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed14 = trunc i32 %v0_ed14 to i8
  %v2_ed14 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed14 = add i32 %v2_ed14, 1
  %v4_ed14 = inttoptr i32 %v3_ed14 to i8*
  store i8 %v1_ed14, i8* %v4_ed14, align 1
  %v0_ed18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed18 = trunc i32 %v0_ed18 to i8
  %v2_ed18 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed18 = add i32 %v2_ed18, 2
  %v4_ed18 = inttoptr i32 %v3_ed18 to i8*
  store i8 %v1_ed18, i8* %v4_ed18, align 1
  %v0_ed1c = load i32, i32* @r6, align 4
  %v1_ed1c = trunc i32 %v0_ed1c to i8
  %v2_ed1c = load i32, i32* %ip.global-to-local, align 4
  %v3_ed1c = add i32 %v2_ed1c, 3
  %v4_ed1c = inttoptr i32 %v3_ed1c to i8*
  store i8 %v1_ed1c, i8* %v4_ed1c, align 1
  %v0_ed20 = load i32, i32* @r6, align 4
  %v1_ed20 = trunc i32 %v0_ed20 to i8
  %v2_ed20 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed20 = add i32 %v2_ed20, 4
  %v4_ed20 = inttoptr i32 %v3_ed20 to i8*
  store i8 %v1_ed20, i8* %v4_ed20, align 1
  %v0_ed24 = load i32, i32* %r0.global-to-local, align 4
  %v1_ed24 = trunc i32 %v0_ed24 to i8
  %v2_ed24 = load i32, i32* %r1.global-to-local, align 4
  %v3_ed24 = add i32 %v2_ed24, 40
  %v4_ed24 = inttoptr i32 %v3_ed24 to i8*
  store i8 %v1_ed24, i8* %v4_ed24, align 1
  store i32 %v6_e978, i32* %r1.global-to-local, align 4
  %v0_ed2c = load i32, i32* @r7, align 4
  store i32 %v0_ed2c, i32* %r2.global-to-local, align 4
  %v0_ed30 = load i32, i32* %r4.global-to-local, align 4
  %v1_ed30 = add i32 %v0_ed30, 1
  store i32 %v1_ed30, i32* %r0.global-to-local, align 4
  %v3_ed34 = call i32 @function_13940(i32 %v1_ed30, i32 %v6_e978, i32 %v0_ed2c)
  store i32 %v3_ed34, i32* %r0.global-to-local, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  %v1_ed3c = load i32, i32* @r6, align 4
  %v9_ed3c = icmp eq i32 %v2_eac4, %v1_ed3c
  store i1 %v9_ed3c, i1* %cpsr_z.global-to-local, align 1
  %v7_ed40 = icmp sgt i32 %v2_eac4, %v1_ed3c
  store i32 %v1_ed3c, i32* %lr.global-to-local, align 4
  %v0_ed50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ed50, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_ed3c to i8
  br i1 %v7_ed40, label %dec_label_pc_ed4c, label %dec_label_pc_ed8c

dec_label_pc_ed4c:                                ; preds = %bb145
  store i32 %v1_ed3c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %bb148, %dec_label_pc_ed4c
  %v0_ed7485151 = phi i32 [ %v0_ed7485152, %bb148 ], [ %v1_ed3c, %dec_label_pc_ed4c ]
  %v1_ed6833 = phi i32 [ %v1_ed7891, %bb148 ], [ %v1_ed3c, %dec_label_pc_ed4c ]
  %v1_ed64.off0 = phi i8 [ %v1_ed6456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_ed4c ]
  %v0_ed6832 = phi i32 [ %v0_ed68325488, %bb148 ], [ %v0_ed50, %dec_label_pc_ed4c ]
  store i32 %v6_e978, i32* %ip.global-to-local, align 4
  %v2_ed5c = add i32 %v1_ed6833, %v6_e978
  %v3_ed5c = inttoptr i32 %v2_ed5c to i8*
  %v4_ed5c = load i8, i8* %v3_ed5c, align 1
  %v6_ed5c = zext i8 %v4_ed5c to i32
  store i32 %v6_ed5c, i32* %r3.global-to-local, align 4
  %v7_ed60 = icmp eq i8 %v4_ed5c, 46
  store i1 %v7_ed60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed60, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_ed58
  %v2_ed6834 = add i32 %v1_ed6833, %v0_ed6832
  store i32 %v2_ed6834, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_ed58
  %v3_ed64 = load i32, i32* %r2.global-to-local, align 4
  %v4_ed64 = inttoptr i32 %v3_ed64 to i8*
  store i8 %v1_ed64.off0, i8* %v4_ed64, align 1
  %v0_ed6c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ed68 = load i32, i32* %r4.global-to-local, align 4
  %v1_ed68 = load i32, i32* %r1.global-to-local, align 4
  %v2_ed68 = add i32 %v1_ed68, %v0_ed68
  store i32 %v2_ed68, i32* %r0.global-to-local, align 4
  br i1 %v0_ed6c.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_ed7485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_ed6c = add i32 %v2_ed68, 1
  store i32 %v2_ed6c, i32* %r2.global-to-local, align 4
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v0_ed74 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed74 = add i32 %v0_ed74, 1
  store i32 %v1_ed74, i32* %ip.global-to-local, align 4
  %v1_ed78 = add i32 %v1_ed68, 1
  store i32 %v1_ed78, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_ed7485 = phi i32 [ %v0_ed7485.pre, %bb146..thread35_crit_edge ], [ %v0_ed7485151, %.thread31 ]
  %v0_ed78.ph = phi i32 [ %v1_ed68, %bb146..thread35_crit_edge ], [ %v1_ed6833, %.thread31 ]
  %v0_ed683254.ph = phi i32 [ %v0_ed68, %bb146..thread35_crit_edge ], [ %v0_ed6832, %.thread31 ]
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v1_ed7486 = add i32 %v0_ed7485, 1
  store i32 %v1_ed7486, i32* %ip.global-to-local, align 4
  %v1_ed7887 = add i32 %v0_ed78.ph, 1
  store i32 %v1_ed7887, i32* %r1.global-to-local, align 4
  %v2_ed80 = urem i32 %v1_ed7486, 256
  store i32 %v2_ed80, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ed7486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_ed7485152 = phi i32 [ 0, %bb147 ], [ %v2_ed80, %.thread35 ]
  %v1_ed7891 = phi i32 [ %v1_ed78, %bb147 ], [ %v1_ed7887, %.thread35 ]
  %v0_ed68325488 = phi i32 [ %v0_ed68, %bb147 ], [ %v0_ed683254.ph, %.thread35 ]
  %v1_ed6456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_ed84 = icmp eq i32 %v2_eac4, %v1_ed7891
  store i1 %v9_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed84, label %dec_label_pc_ed8c.loopexit, label %dec_label_pc_ed58

dec_label_pc_ed8c.loopexit:                       ; preds = %bb148
  %v2_ed8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed8c

dec_label_pc_ed8c:                                ; preds = %dec_label_pc_ed8c.loopexit, %bb145
  %v2_ed8c = phi i32 [ %v2_ed8c.pre, %dec_label_pc_ed8c.loopexit ], [ %v0_ed50, %bb145 ]
  %v0_ed8c.off0 = phi i8 [ %v1_ed6456.off0, %dec_label_pc_ed8c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ed8c = inttoptr i32 %v2_ed8c to i8*
  store i8 %v0_ed8c.off0, i8* %v3_ed8c, align 1
  %v3_ed90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  %v0_ed98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ed98 = add i32 %v0_ed98, %v2_eac4
  store i32 %v2_ed98, i32* %r3.global-to-local, align 4
  %v1_ed9c = add i32 %v3_ed90, 1
  store i32 %v1_ed9c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_edac = icmp eq i32 %v1_e864, %v1_ed9c
  store i1 %v9_edac, i1* %cpsr_z.global-to-local, align 1
  %v1_edb0 = add i32 %v2_ed98, 2
  store i32 %v1_edb0, i32* %r2.global-to-local, align 4
  %v4_edb4 = inttoptr i32 %v1_edb0 to i8*
  store i8 0, i8* %v4_edb4, align 1
  %v0_edb8 = load i32, i32* @lr, align 4
  %v1_edb8 = trunc i32 %v0_edb8 to i8
  %v2_edb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_edb8 = add i32 %v2_edb8, 3
  %v4_edb8 = inttoptr i32 %v3_edb8 to i8*
  store i8 %v1_edb8, i8* %v4_edb8, align 1
  %v0_edbc = load i32, i32* @lr, align 4
  %v1_edbc = trunc i32 %v0_edbc to i8
  %v2_edbc = load i32, i32* %r2.global-to-local, align 4
  %v3_edbc = add i32 %v2_edbc, 1
  %v4_edbc = inttoptr i32 %v3_edbc to i8*
  store i8 %v1_edbc, i8* %v4_edbc, align 1
  %v0_edc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_edc0 = trunc i32 %v0_edc0 to i8
  %v2_edc0 = load i32, i32* %r2.global-to-local, align 4
  %v3_edc0 = add i32 %v2_edc0, 2
  %v4_edc0 = inttoptr i32 %v3_edc0 to i8*
  store i8 %v1_edc0, i8* %v4_edc0, align 1
  %v0_edc4 = load i32, i32* @r4, align 4
  store i32 %v0_edc4, i32* %stack_var_-40, align 4
  %v8_edc8 = icmp sgt i32 %v1_e864, %v1_ed9c
  br i1 %v8_edc8, label %dec_label_pc_ec24, label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_ef98
  %v4_ee3c.pre-phi = phi i32 [ %v4_ef9c, %dec_label_pc_ef98 ], [ %v4_eb70, %dec_label_pc_ed8c ]
  store i32 %v1_e864, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_eb48, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_edd8

dec_label_pc_edd8:                                ; preds = %dec_label_pc_edd8, %dec_label_pc_eefc, %dec_label_pc_edcc
  br i1 %v2_eb48, label %dec_label_pc_edd8, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edd8
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* @r6, align 4
  %v0_edec = load i32, i32* @fp, align 4
  %v1_edec = add i32 %v0_edec, 27
  store i32 %v1_edec, i32* @sb, align 4
  %v1_edf0 = add i32 %v0_edec, 47
  store i32 %v1_edf0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge, %dec_label_pc_eddc
  %v1_ee18 = phi i32 [ %v1_ee04.pre, %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), %dec_label_pc_eddc ]
  %v1_ee00 = phi i32 [ %v1_eee8, %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge ], [ 0, %dec_label_pc_eddc ]
  store i32 %v2_e87c, i32* %r3.global-to-local, align 4
  store i32 %v3_eb38, i32* %r8.global-to-local, align 4
  %v4_ee00 = mul i32 %v1_ee00, 4
  %v5_ee00 = add i32 %v4_ee00, %v2_e87c
  %v6_ee00 = inttoptr i32 %v5_ee00 to i32*
  %v7_ee00 = load i32, i32* %v6_ee00, align 4
  store i32 %v7_ee00, i32* @r4, align 4
  %v9_ee04 = icmp eq i32 %v3_eb38, %v1_ee18
  store i1 %v9_ee04, i1* %cpsr_z.global-to-local, align 1
  %v1_ee08 = add i32 %v7_ee00, 20
  store i32 %v1_ee08, i32* @r5, align 4
  %v1_ee0c = add i32 %v7_ee00, 28
  store i32 %v1_ee0c, i32* @r8, align 4
  br i1 %v9_ee04, label %dec_label_pc_ef0c, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %dec_label_pc_edf8
  store i32 %v3_eb3c, i32* %ip.global-to-local, align 4
  %v9_ee18 = icmp eq i32 %v3_eb3c, %v1_ee18
  store i1 %v9_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee18, label %dec_label_pc_ef28, label %dec_label_pc_ee20

dec_label_pc_ee20:                                ; preds = %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge, %dec_label_pc_ee14
  %v1_ee24 = phi i32 [ %v1_ee24.pre, %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge ], [ %v1_ee18, %dec_label_pc_ee14 ]
  store i32 %v3_eb40, i32* @lr, align 4
  %v9_ee24 = icmp eq i32 %v3_eb40, %v1_ee24
  store i1 %v9_ee24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee24, label %dec_label_pc_ef44, label %dec_label_pc_ee2c

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge, %dec_label_pc_ee20
  %v1_ee30 = phi i32 [ %v1_ee30.pre, %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge ], [ %v1_ee24, %dec_label_pc_ee20 ]
  store i32 %v3_eb44, i32* %r0.global-to-local, align 4
  %v9_ee30 = icmp eq i32 %v3_eb44, %v1_ee30
  store i1 %v9_ee30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee30, label %dec_label_pc_ef60, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ef44, %dec_label_pc_ee2c, %dec_label_pc_ef60
  %v0_ee38 = load i32, i32* @r4, align 4
  %v1_ee38 = add i32 %v0_ee38, 41
  store i32 %v1_ee38, i32* %r0.global-to-local, align 4
  store i32 %v4_ee3c.pre-phi, i32* %r1.global-to-local, align 4
  %v2_ee40 = call i32 @function_10b48(i32 %v1_ee38, i32 %v4_ee3c.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ee48 = load i32, i32* @r7, align 4
  %v1_ee48 = trunc i32 %v0_ee48 to i8
  %v2_ee48 = load i32, i32* @r4, align 4
  %v3_ee48 = add i32 %v2_ee48, 10
  %v4_ee48 = inttoptr i32 %v3_ee48 to i8*
  store i8 %v1_ee48, i8* %v4_ee48, align 1
  %v0_ee4c = load i32, i32* @r7, align 4
  %v1_ee4c = trunc i32 %v0_ee4c to i8
  %v2_ee4c = load i32, i32* @r4, align 4
  %v3_ee4c = add i32 %v2_ee4c, 11
  %v4_ee4c = inttoptr i32 %v3_ee4c to i8*
  store i8 %v1_ee4c, i8* %v4_ee4c, align 1
  %v0_ee50 = load i32, i32* @r4, align 4
  store i32 %v0_ee50, i32* @r0, align 4
  %v2_ee54 = call i32 @function_f008(i32 %v0_ee50, i32 20)
  %v3_ee54 = trunc i32 %v2_ee54 to i8
  store i32 %v2_ee54, i32* %r0.global-to-local, align 4
  %v4_ee58 = sdiv i32 %v2_ee54, 256
  store i32 %v4_ee58, i32* %r3.global-to-local, align 4
  %v1_ee5c = trunc i32 %v4_ee58 to i8
  %v2_ee5c = load i32, i32* @r4, align 4
  %v3_ee5c = add i32 %v2_ee5c, 11
  %v4_ee5c = inttoptr i32 %v3_ee5c to i8*
  store i8 %v1_ee5c, i8* %v4_ee5c, align 1
  %v3_ee60 = load i32, i32* @r4, align 4
  %v4_ee60 = add i32 %v3_ee60, 10
  %v5_ee60 = inttoptr i32 %v4_ee60 to i8*
  store i8 %v3_ee54, i8* %v5_ee60, align 1
  %v0_ee64 = load i32, i32* @r7, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* @r5, align 4
  %v3_ee64 = add i32 %v2_ee64, 6
  %v4_ee64 = inttoptr i32 %v3_ee64 to i8*
  store i8 %v1_ee64, i8* %v4_ee64, align 1
  %v0_ee68 = load i32, i32* @r7, align 4
  %v1_ee68 = trunc i32 %v0_ee68 to i8
  %v2_ee68 = load i32, i32* @r5, align 4
  %v3_ee68 = add i32 %v2_ee68, 7
  %v4_ee68 = inttoptr i32 %v3_ee68 to i8*
  store i8 %v1_ee68, i8* %v4_ee68, align 1
  %v0_ee6c = load i32, i32* @r4, align 4
  %v1_ee6c = add i32 %v0_ee6c, 24
  %v2_ee6c = inttoptr i32 %v1_ee6c to i8*
  %v3_ee6c = load i8, i8* %v2_ee6c, align 1
  %v4_ee6c = zext i8 %v3_ee6c to i32
  store i32 %v4_ee6c, i32* %r3.global-to-local, align 4
  %v1_ee70 = add i32 %v0_ee6c, 25
  %v2_ee70 = inttoptr i32 %v1_ee70 to i8*
  %v3_ee70 = load i8, i8* %v2_ee70, align 1
  %v4_ee70 = zext i8 %v3_ee70 to i32
  %v0_ee74 = load i32, i32* @r5, align 4
  store i32 %v0_ee74, i32* @r1, align 4
  %v4_ee78 = mul nuw nsw i32 %v4_ee70, 256
  %v5_ee78 = or i32 %v4_ee78, %v4_ee6c
  store i32 %v5_ee78, i32* %r2.global-to-local, align 4
  store i32 %v0_ee6c, i32* %r0.global-to-local, align 4
  %v0_ee80 = load i32, i32* @sb, align 4
  store i32 %v0_ee80, i32* %r3.global-to-local, align 4
  %v4_ee84 = call i32 @function_f064(i32 %v0_ee6c, i32 %v0_ee74, i32 %v5_ee78, i32 %v0_ee80)
  %v5_ee84 = trunc i32 %v4_ee84 to i8
  store i32 %v4_ee84, i32* %r0.global-to-local, align 4
  %v3_ee88 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_ee98 = mul i32 %v3_ee88, 24
  %v2_ee9c = add i32 %v5_ee98, %arg2
  store i32 %v2_ee9c, i32* %lr.global-to-local, align 4
  %v4_eea0 = sdiv i32 %v4_ee84, 256
  store i32 %v4_eea0, i32* %r3.global-to-local, align 4
  %v3_eea4 = load i32, i32* @r5, align 4
  %v4_eea4 = add i32 %v3_eea4, 6
  %v5_eea4 = inttoptr i32 %v4_eea4 to i8*
  store i8 %v5_ee84, i8* %v5_eea4, align 1
  %v0_eea8 = load i32, i32* %r3.global-to-local, align 4
  %v1_eea8 = trunc i32 %v0_eea8 to i8
  %v2_eea8 = load i32, i32* @r5, align 4
  %v3_eea8 = add i32 %v2_eea8, 7
  %v4_eea8 = inttoptr i32 %v3_eea8 to i8*
  store i8 %v1_eea8, i8* %v4_eea8, align 1
  %v0_eeac = load i32, i32* %r2.global-to-local, align 4
  %v1_eeac = load i32, i32* %lr.global-to-local, align 4
  %v2_eeac = add i32 %v1_eeac, 4
  %v3_eeac = inttoptr i32 %v2_eeac to i32*
  store i32 %v0_eeac, i32* %v3_eeac, align 4
  %v0_eeb0 = load i32, i32* @r4, align 4
  %v1_eeb0 = add i32 %v0_eeb0, 20
  %v2_eeb0 = inttoptr i32 %v1_eeb0 to i32*
  %v3_eeb0 = load i32, i32* %v2_eeb0, align 4
  %v3_eeb4 = udiv i32 %v3_eeb0, 65536
  store i32 %v3_eeb4, i32* %r3.global-to-local, align 4
  %v3_eeb812 = udiv i32 %v3_eeb0, 16777216
  %v1_eebc = trunc i32 %v3_eeb812 to i8
  %v2_eebc = load i32, i32* %lr.global-to-local, align 4
  %v3_eebc = add i32 %v2_eebc, 3
  %v4_eebc = inttoptr i32 %v3_eebc to i8*
  store i8 %v1_eebc, i8* %v4_eebc, align 1
  %v0_eec0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eec0 = trunc i32 %v0_eec0 to i8
  %v2_eec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_eec0 = add i32 %v2_eec0, 2
  %v4_eec0 = inttoptr i32 %v3_eec0 to i8*
  store i8 %v1_eec0, i8* %v4_eec0, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eecc = load i32, i32* @r4, align 4
  store i32 %v0_eecc, i32* %r1.global-to-local, align 4
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v0_eed4 = load i32, i32* @sl, align 4
  store i32 %v0_eed4, i32* %r2.global-to-local, align 4
  %v0_eed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_eee0 = inttoptr i32 %v0_eecc to i32*
  %v7_eee0 = call i32 @function_14b1c(i32 %v3_ead8, i32* %v6_eee0, i32 %v0_eed4, i32 16384, i32 %v0_eed8, i32 16)
  %v3_eee4 = load i32, i32* %stack_var_-40, align 4
  %v1_eee8 = add i32 %v3_eee4, 1
  store i32 %v1_eee8, i32* %r0.global-to-local, align 4
  store i32 %v1_e864, i32* %r3.global-to-local, align 4
  %v9_eef0 = icmp eq i32 %v1_e864, %v1_eee8
  store i1 %v9_eef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eee8, i32* %stack_var_-40, align 4
  %v8_eef8 = icmp sgt i32 %v1_e864, %v1_eee8
  br i1 %v8_eef8, label %dec_label_pc_ee38.dec_label_pc_edf8_crit_edge, label %dec_label_pc_eefc

dec_label_pc_ee38.dec_label_pc_edf8_crit_edge:    ; preds = %dec_label_pc_ee38
  %v1_ee04.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_edf8

dec_label_pc_eefc:                                ; preds = %dec_label_pc_ee38
  store i32 %v1_e864, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_edd8

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_edf8
  %v0_ef0c = call i32 @function_10a94()
  %v1_ef0c = trunc i32 %v0_ef0c to i8
  store i32 %v0_ef0c, i32* %r0.global-to-local, align 4
  store i32 %v3_eb3c, i32* %ip.global-to-local, align 4
  %v4_ef14 = sdiv i32 %v0_ef0c, 256
  store i32 %v4_ef14, i32* %r3.global-to-local, align 4
  %v1_ef18 = load i32, i32* @r6, align 4
  %v9_ef18 = icmp eq i32 %v3_eb3c, %v1_ef18
  store i1 %v9_ef18, i1* %cpsr_z.global-to-local, align 1
  %v1_ef1c = trunc i32 %v4_ef14 to i8
  %v2_ef1c = load i32, i32* @r4, align 4
  %v3_ef1c = add i32 %v2_ef1c, 5
  %v4_ef1c = inttoptr i32 %v3_ef1c to i8*
  store i8 %v1_ef1c, i8* %v4_ef1c, align 1
  %v3_ef20 = load i32, i32* @r4, align 4
  %v4_ef20 = add i32 %v3_ef20, 4
  %v5_ef20 = inttoptr i32 %v4_ef20 to i8*
  store i8 %v1_ef0c, i8* %v5_ef20, align 1
  %v0_ef24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef24, label %dec_label_pc_ef28, label %dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge

dec_label_pc_ef0c.dec_label_pc_ee20_crit_edge:    ; preds = %dec_label_pc_ef0c
  %v1_ee24.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ee20

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_ee14
  %v0_ef28 = call i32 @function_10a94()
  %v1_ef28 = trunc i32 %v0_ef28 to i8
  store i32 %v0_ef28, i32* %r0.global-to-local, align 4
  store i32 %v3_eb40, i32* @lr, align 4
  %v4_ef30 = sdiv i32 %v0_ef28, 256
  store i32 %v4_ef30, i32* %r3.global-to-local, align 4
  %v1_ef34 = load i32, i32* @r6, align 4
  %v9_ef34 = icmp eq i32 %v3_eb40, %v1_ef34
  store i1 %v9_ef34, i1* %cpsr_z.global-to-local, align 1
  %v3_ef38 = load i32, i32* @r4, align 4
  %v4_ef38 = add i32 %v3_ef38, 20
  %v5_ef38 = inttoptr i32 %v4_ef38 to i8*
  store i8 %v1_ef28, i8* %v5_ef38, align 1
  %v0_ef3c = load i32, i32* %r3.global-to-local, align 4
  %v1_ef3c = trunc i32 %v0_ef3c to i8
  %v2_ef3c = load i32, i32* @r5, align 4
  %v3_ef3c = add i32 %v2_ef3c, 1
  %v4_ef3c = inttoptr i32 %v3_ef3c to i8*
  store i8 %v1_ef3c, i8* %v4_ef3c, align 1
  %v0_ef40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef40, label %dec_label_pc_ef44, label %dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge

dec_label_pc_ef28.dec_label_pc_ee2c_crit_edge:    ; preds = %dec_label_pc_ef28
  %v1_ee30.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ee2c

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ef28, %dec_label_pc_ee20
  %v0_ef44 = call i32 @function_10a94()
  %v1_ef44 = trunc i32 %v0_ef44 to i8
  %v4_ef48 = sdiv i32 %v0_ef44, 256
  store i32 %v4_ef48, i32* %r3.global-to-local, align 4
  %v3_ef4c = load i32, i32* @r5, align 4
  %v4_ef4c = add i32 %v3_ef4c, 2
  %v5_ef4c = inttoptr i32 %v4_ef4c to i8*
  store i8 %v1_ef44, i8* %v5_ef4c, align 1
  store i32 %v3_eb44, i32* %r0.global-to-local, align 4
  %v1_ef54 = load i32, i32* @r6, align 4
  %v9_ef54 = icmp eq i32 %v3_eb44, %v1_ef54
  store i1 %v9_ef54, i1* %cpsr_z.global-to-local, align 1
  %v0_ef58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ef58 = trunc i32 %v0_ef58 to i8
  %v2_ef58 = load i32, i32* @r5, align 4
  %v3_ef58 = add i32 %v2_ef58, 3
  %v4_ef58 = inttoptr i32 %v3_ef58 to i8*
  store i8 %v1_ef58, i8* %v4_ef58, align 1
  %v0_ef5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ef5c, label %dec_label_pc_ef60, label %dec_label_pc_ee38

dec_label_pc_ef60:                                ; preds = %dec_label_pc_ef44, %dec_label_pc_ee2c
  %v0_ef60 = call i32 @function_10a94()
  %v1_ef60 = trunc i32 %v0_ef60 to i8
  store i32 %v0_ef60, i32* %r0.global-to-local, align 4
  %v4_ef64 = sdiv i32 %v0_ef60, 256
  store i32 %v4_ef64, i32* %r3.global-to-local, align 4
  %v3_ef68 = load i32, i32* @r4, align 4
  %v4_ef68 = add i32 %v3_ef68, 28
  %v5_ef68 = inttoptr i32 %v4_ef68 to i8*
  store i8 %v1_ef60, i8* %v5_ef68, align 1
  %v0_ef6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ef6c = trunc i32 %v0_ef6c to i8
  %v2_ef6c = load i32, i32* @r8, align 4
  %v3_ef6c = add i32 %v2_ef6c, 1
  %v4_ef6c = inttoptr i32 %v3_ef6c to i8*
  store i8 %v1_ef6c, i8* %v4_ef6c, align 1
  br label %dec_label_pc_ee38

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea0c, %dec_label_pc_e9b0, %dec_label_pc_e858
  %v0_ef74 = call i32 @function_10a94()
  %v1_ef78 = urem i32 %v0_ef74, 4
  store i32 %v1_ef78, i32* %r0.global-to-local, align 4
  %v2_ef7c = icmp eq i32 %v1_ef78, 3
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ef74 to i2
  switch i2 %trunc, label %dec_label_pc_eab420 [
    i2 0, label %dec_label_pc_efbc
    i2 1, label %dec_label_pc_efd0
    i2 -2, label %dec_label_pc_efdc
    i2 -1, label %dec_label_pc_efec
  ]

dec_label_pc_ef98:                                ; preds = %dec_label_pc_eb14
  store i32 %v2_eac4, i32* %r0.global-to-local, align 4
  %v4_ef9c = sext i8 %v5_eb30 to i32
  store i32 %v4_ef9c, i32* %r1.global-to-local, align 4
  %v2_efa0 = add i32 %v4_ef9c, %v2_eac4
  store i32 %v2_efa0, i32* @fp, align 4
  br label %dec_label_pc_edcc

dec_label_pc_efa8:                                ; preds = %dec_label_pc_eae8
  store i32 %v3_ead8, i32* %r0.global-to-local, align 4
  %v1_efac = call i32 @function_14284(i32 %v3_ead8)
  store i32 %v1_efac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efb0

dec_label_pc_efb0:                                ; preds = %dec_label_pc_eac0, %dec_label_pc_eab4, %dec_label_pc_efa8
  %v29_efb8 = phi i32 [ %v3_ead8, %dec_label_pc_eac0 ], [ %v29_efb874, %dec_label_pc_eab4 ], [ %v1_efac, %dec_label_pc_efa8 ]
  store i32 %v3_e858, i32* %r4.global-to-local, align 4
  store i32 %v15_e858, i32* %r8.global-to-local, align 4
  store i32 %v18_e858, i32* %sb.global-to-local, align 4
  store i32 %v21_e858, i32* %sl.global-to-local, align 4
  store i32 %v24_e858, i32* %fp.global-to-local, align 4
  ret i32 %v29_efb8

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef74
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efd0:                                ; preds = %dec_label_pc_ef74
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efdc:                                ; preds = %dec_label_pc_ef74
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eab4

dec_label_pc_efec:                                ; preds = %dec_label_pc_ef74
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eab4

; uselistorder directives
  uselistorder i32 %v4_ef9c, { 0, 2, 1 }
  uselistorder i32 %v1_ef78, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ef74, { 1, 0 }
  uselistorder i32 %v0_ef60, { 0, 2, 1 }
  uselistorder i32 %v0_ef28, { 0, 2, 1 }
  uselistorder i32 %v4_ef14, { 1, 0 }
  uselistorder i32 %v0_ef0c, { 0, 2, 1 }
  uselistorder i32 %v1_eee8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_ee84, { 0, 2, 1 }
  uselistorder i32 %v0_ee6c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ee58, { 1, 0 }
  uselistorder i32 %v2_ee54, { 0, 2, 1 }
  uselistorder i32 %v7_ee00, { 1, 0, 2 }
  uselistorder i32 %v4_ee3c.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ed80, { 1, 0 }
  uselistorder i32 %v1_ed7486, { 1, 0, 2 }
  uselistorder i32 %v1_ed68, { 2, 1, 0 }
  uselistorder i32 %v0_ed68, { 1, 2, 0 }
  uselistorder i32 %v0_ed6832, { 1, 0 }
  uselistorder i32 %v1_ed6833, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_ed3c, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ecb8, { 1, 0 }
  uselistorder i32 %v3_ebf4, { 1, 0, 2 }
  uselistorder i32 %v1_ebbc, { 1, 0 }
  uselistorder i32 %v1_ebb0, { 1, 0 }
  uselistorder i32 %v1_eb94, { 1, 0 }
  uselistorder i32 %v1_eb80, { 1, 0 }
  uselistorder i32 %v3_eb78, { 1, 0 }
  uselistorder i32 %v4_eb70, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_eb30, { 1, 0 }
  uselistorder i32 %v0_eb2c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_eb20, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_eb0c, { 1, 0 }
  uselistorder i1 %v7_eadc, { 1, 0 }
  uselistorder i32 %v3_ead8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_eac4, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_eaac, { 1, 0, 2 }
  uselistorder i1 %v7_ea7c, { 1, 0 }
  uselistorder i32 %v1_ea78, { 1, 0, 2 }
  uselistorder i1 %v8_ea70, { 1, 0 }
  uselistorder i1 %v7_ea6c, { 1, 0 }
  uselistorder i32 %v1_ea60, { 1, 0 }
  uselistorder i8 %v2_ea54, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ea58, { 1, 0 }
  uselistorder i32 %v0_ea78, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ea44, { 0, 2, 1 }
  uselistorder i32 %v1_ea5c, { 0, 2, 1 }
  uselistorder i32 %v2_ea2c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_ea24, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ea0c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_ea04, { 1, 0 }
  uselistorder i32 %v0_ea04, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_e9a8, { 1, 0, 3, 2 }
  uselistorder i32 %v6_e978, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_e8fc, { 1, 0 }
  uselistorder i32 %v7_e8b8, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_e8b4, { 1, 0 }
  uselistorder i32 %v6_e894, { 1, 0 }
  uselistorder i32 %v2_e87c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_e864, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 4, 5, 7, 6, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 7, 4, 5, 6, 9, 8, 10, 12, 11, 13, 15, 14, 16, 17, 18, 19, 3, 20, 21, 1, 35, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 36, 37, 38, 40, 42, 41, 43, 2, 44, 46, 45, 48, 47, 49, 50, 52, 51, 53, 55, 54, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %lr.global-to-local, { 4, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 5, 6, 7, 0, 1, 3, 8, 2, 9, 4, 10 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 98, 99, 100, 101, 102, 103, 104, 105, 106, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 97, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 107, 108 }
  uselistorder label %dec_label_pc_efb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_edd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_edcc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_ea88, { 1, 0 }
  uselistorder label %dec_label_pc_ea7c, { 1, 0 }
  uselistorder label %dec_label_pc_ea40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ea38, { 1, 0 }
}

define i32 @function_f008(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f008:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_f038, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %dec_label_pc_f008
  %v0_f018.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f018

dec_label_pc_f018:                                ; preds = %dec_label_pc_f018, %dec_label_pc_f014
  %v0_f02c = phi i32 [ %v2_f02c, %dec_label_pc_f018 ], [ 0, %dec_label_pc_f014 ]
  %v0_f020 = phi i32 [ %v1_f020, %dec_label_pc_f018 ], [ %arg1, %dec_label_pc_f014 ]
  %v0_f030 = phi i32 [ %v1_f030, %dec_label_pc_f018 ], [ %v0_f018.pre, %dec_label_pc_f014 ]
  %v1_f018 = inttoptr i32 %v0_f030 to i8*
  %v2_f018 = load i8, i8* %v1_f018, align 1
  %v3_f018 = zext i8 %v2_f018 to i32
  %v1_f01c = add i32 %v0_f030, 1
  %v2_f01c = inttoptr i32 %v1_f01c to i8*
  %v3_f01c = load i8, i8* %v2_f01c, align 1
  %v4_f01c = zext i8 %v3_f01c to i32
  %v1_f020 = add i32 %v0_f020, -2
  %v4_f024 = mul nuw nsw i32 %v4_f01c, 256
  %v5_f024 = or i32 %v4_f024, %v3_f018
  %v2_f02c = add i32 %v5_f024, %v0_f02c
  %v1_f030 = add i32 %v0_f030, 2
  store i32 %v1_f030, i32* @r0, align 4
  %v1_f020.cmp = icmp ugt i32 %v1_f020, 1
  br i1 %v1_f020.cmp, label %dec_label_pc_f018, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f018, %dec_label_pc_f008
  %v1_f040 = phi i32 [ 0, %dec_label_pc_f008 ], [ %v2_f02c, %dec_label_pc_f018 ]
  %v0_f038 = phi i32 [ %arg1, %dec_label_pc_f008 ], [ %v1_f020, %dec_label_pc_f018 ]
  %v7_f038 = icmp eq i32 %v0_f038, 1
  br i1 %v7_f038, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f038
  %v1_f03c = load i32, i32* @r0, align 4
  %v2_f03c = inttoptr i32 %v1_f03c to i8*
  %v3_f03c = load i8, i8* %v2_f03c, align 1
  %v4_f03c = zext i8 %v3_f03c to i32
  %v3_f040 = add i32 %v1_f040, %v4_f03c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f038, %bb
  %v0_f044 = phi i32 [ %v1_f040, %dec_label_pc_f038 ], [ %v3_f040, %bb ]
  %v3_f048 = urem i32 %v0_f044, 65536
  %v4_f04c = udiv i32 %v0_f044, 65536
  %v5_f04c = add nuw nsw i32 %v4_f04c, %v3_f048
  %v4_f050 = udiv i32 %v5_f04c, 65536
  %v5_f050 = add nuw nsw i32 %v4_f050, %v5_f04c
  %v1_f054 = urem i32 %v5_f050, 65536
  %v3_f05c = xor i32 %v1_f054, 65535
  ret i32 %v3_f05c

; uselistorder directives
  uselistorder i32 %v5_f04c, { 1, 0 }
  uselistorder i32 %v1_f030, { 1, 0 }
  uselistorder i32 %v1_f020, { 1, 0, 2 }
  uselistorder i32 %v0_f030, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f064(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f064:
  %v3_f074 = urem i32 %arg2, 65536
  %v1_f078 = add i32 %arg1, 12
  %v1_f07c = inttoptr i32 %v1_f078 to i32*
  %v2_f07c = load i32, i32* %v1_f07c, align 4
  %v3_f07c = add i32 %arg1, 16
  %v4_f07c = inttoptr i32 %v3_f07c to i32*
  %v5_f07c = load i32, i32* %v4_f07c, align 4
  %v7_f080 = icmp sgt i32 %arg3, 1
  br i1 %v7_f080, label %dec_label_pc_f08c.preheader, label %dec_label_pc_f0ac

dec_label_pc_f08c.preheader:                      ; preds = %dec_label_pc_f064
  %v0_f08c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f08c.preheader, %dec_label_pc_f08c
  %v0_f0a0 = phi i32 [ 0, %dec_label_pc_f08c.preheader ], [ %v2_f0a0, %dec_label_pc_f08c ]
  %v0_f094 = phi i32 [ %arg3, %dec_label_pc_f08c.preheader ], [ %v1_f094, %dec_label_pc_f08c ]
  %v0_f0a4 = phi i32 [ %v0_f08c.pre, %dec_label_pc_f08c.preheader ], [ %v1_f0a4, %dec_label_pc_f08c ]
  %v1_f08c = inttoptr i32 %v0_f0a4 to i8*
  %v2_f08c = load i8, i8* %v1_f08c, align 1
  %v3_f08c = zext i8 %v2_f08c to i32
  %v1_f090 = add i32 %v0_f0a4, 1
  %v2_f090 = inttoptr i32 %v1_f090 to i8*
  %v3_f090 = load i8, i8* %v2_f090, align 1
  %v4_f090 = zext i8 %v3_f090 to i32
  %v1_f094 = add nsw i32 %v0_f094, -2
  %v4_f098 = mul nuw nsw i32 %v4_f090, 256
  %v5_f098 = or i32 %v4_f098, %v3_f08c
  %v2_f0a0 = add i32 %v5_f098, %v0_f0a0
  %v1_f0a4 = add i32 %v0_f0a4, 2
  store i32 %v1_f0a4, i32* @r1, align 4
  %v8_f0a8 = icmp sgt i32 %v1_f094, 1
  br i1 %v8_f0a8, label %dec_label_pc_f08c, label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f08c, %dec_label_pc_f064
  %v1_f0b4 = phi i32 [ 0, %dec_label_pc_f064 ], [ %v2_f0a0, %dec_label_pc_f08c ]
  %v0_f0ac = phi i32 [ %arg3, %dec_label_pc_f064 ], [ %v1_f094, %dec_label_pc_f08c ]
  %v7_f0ac = icmp eq i32 %v0_f0ac, 1
  br i1 %v7_f0ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f0ac
  %v1_f0b0 = load i32, i32* @r1, align 4
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i8*
  %v3_f0b0 = load i8, i8* %v2_f0b0, align 1
  %v4_f0b0 = zext i8 %v3_f0b0 to i32
  %v3_f0b4 = add i32 %v4_f0b0, %v1_f0b4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f0ac, %bb
  %v0_f0d8 = phi i32 [ %v1_f0b4, %dec_label_pc_f0ac ], [ %v3_f0b4, %bb ]
  %v3_f0bc = urem i32 %v2_f07c, 65536
  %v1_f0c4 = add i32 %arg1, 9
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i8*
  %v3_f0c4 = load i8, i8* %v2_f0c4, align 1
  %v4_f0c4 = zext i8 %v3_f0c4 to i32
  %v3_f0c8 = urem i32 %v5_f07c, 65536
  %v4_f0cc = udiv i32 %v2_f07c, 65536
  %v3_f0d4 = mul nuw nsw i32 %v4_f0c4, 256
  %v4_f0d8 = udiv i32 %v5_f07c, 65536
  %v5_f0d8 = add i32 %v0_f0d8, %v4_f0d8
  %v2_f0dc = add i32 %v5_f0d8, %v3_f0d4
  %v5_f0cc = add nuw nsw i32 %v3_f0bc, %v3_f074
  %v2_f0d0 = add nuw nsw i32 %v5_f0cc, %v4_f0cc
  %v2_f0e0 = add nuw nsw i32 %v2_f0d0, %v3_f0c8
  %v2_f0e4 = add i32 %v2_f0dc, %v2_f0e0
  %tmp = icmp ult i32 %v2_f0e4, 65536
  br i1 %tmp, label %dec_label_pc_f104, label %dec_label_pc_f0f0

dec_label_pc_f0f0:                                ; preds = %.thread, %dec_label_pc_f0f0
  %v2_f0f81 = phi i32 [ %v2_f0f8, %dec_label_pc_f0f0 ], [ %v2_f0e4, %.thread ]
  %v3_f0fc2.in = phi i32 [ %v2_f0f8, %dec_label_pc_f0f0 ], [ %v2_f0e4, %.thread ]
  %v3_f0fc2 = udiv i32 %v3_f0fc2.in, 65536
  %v3_f0f4 = urem i32 %v2_f0f81, 65536
  %v2_f0f8 = add nuw nsw i32 %v3_f0f4, %v3_f0fc2
  %tmp14 = icmp ult i32 %v2_f0f8, 65536
  br i1 %tmp14, label %dec_label_pc_f104.loopexit, label %dec_label_pc_f0f0

dec_label_pc_f104.loopexit:                       ; preds = %dec_label_pc_f0f0
  br label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f104.loopexit, %.thread
  %v0_f104 = phi i32 [ %v2_f0f8, %dec_label_pc_f104.loopexit ], [ %v2_f0e4, %.thread ]
  %v1_f104 = urem i32 %v0_f104, 65536
  %v3_f10c = xor i32 %v1_f104, 65535
  ret i32 %v3_f10c

; uselistorder directives
  uselistorder i32 %v2_f0f8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_f0e4, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f0b4, { 1, 0 }
  uselistorder i32 %v1_f0a4, { 1, 0 }
  uselistorder i32 %v1_f094, { 0, 2, 1 }
  uselistorder i32 %v0_f0a4, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f0f0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f08c, { 1, 0 }
}

define i32 @function_f114(i32 %arg1) local_unnamed_addr {
dec_label_pc_f114:
  %v2_f118 = load i32, i32* @global_var_1f8b0.101, align 4
  %v3_f120 = call i32 @function_14384(i32 %v2_f118, i32 9)
  %v0_f124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f124, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f114
  store i16 -3796, i16* inttoptr (i32 9 to i16*), align 2
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f114, %bb
  ret i32 %v3_f120

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f128(i32 %arg1) local_unnamed_addr {
dec_label_pc_f128:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f128 = load i32, i32* @r4, align 4
  store i32 %v3_f128, i32* %stack_var_-36, align 4
  %v6_f128 = load i32, i32* @r5, align 4
  %v9_f128 = load i32, i32* @r6, align 4
  %v12_f128 = load i32, i32* @r7, align 4
  %v15_f128 = load i32, i32* @r8, align 4
  %v18_f128 = load i32, i32* @sb, align 4
  %v21_f128 = load i32, i32* @sl, align 4
  %v24_f128 = load i32, i32* @fp, align 4
  %v2_f13c = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_f13c, i32* @sl, align 4
  %v3_f144 = mul i32 %arg1, 65536
  store i32 %v3_f144, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_f150 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_f15c = bitcast i32* %stack_var_-4677 to i8*
  %v3_f15c = call i32 @function_148c0(i8* %v2_f15c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_f174 = bitcast i32* %stack_var_-8773 to i8*
  %v3_f174 = call i32 @function_148c0(i8* %v2_f174, i32 0)
  %v2_f178 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_f178, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_f198 = call i32 @function_148c0(i8* nonnull %stack_var_-581, i32 0)
  %v2_f19c = ptrtoint i8* %stack_var_-68 to i32
  %v1_f1a4 = load i32, i32* @r5, align 4
  %v4_f1a4 = udiv i32 %v1_f1a4, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_f1c4 = trunc i32 %v4_f1a4 to i8
  %v4_f1c4 = call i32 @function_13db8(i8 %v3_f1c4, i32 16, i32 %v2_f19c)
  %v2_f1cc = call i32 @function_138c4(i8* nonnull %stack_var_-68)
  %v7_f1d0 = icmp eq i32 %v2_f1cc, 2
  br i1 %v7_f1d0, label %dec_label_pc_f664, label %dec_label_pc_f1d8

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f128, %dec_label_pc_f664
  %v1_f1dc = call i32 @function_12fa0(i32 6)
  %v1_f1e4 = call i32 @function_12fa0(i32 7)
  %v1_f1ec = call i32 @function_12fa0(i32 9)
  %v0_f1f4 = load i32, i32* @r4, align 4
  %v4_f1f8 = call i32 @function_143b0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_16b90.103, i32 0, i32 0), i32 %v0_f1f4)
  %v7_f1fc = icmp eq i32 %v4_f1f8, -1
  store i32 %v4_f1f8, i32* @r8, align 4
  br i1 %v7_f1fc, label %dec_label_pc_f624, label %dec_label_pc_f208.preheader

dec_label_pc_f208.preheader:                      ; preds = %dec_label_pc_f1d8
  %v4_f21458 = call i32 @function_13b1c(i8* nonnull %stack_var_-581, i32 512, i32 %v4_f1f8)
  %v2_f21860 = icmp eq i32 %v4_f21458, 0
  br i1 %v2_f21860, label %dec_label_pc_f3a8.loopexit, label %dec_label_pc_f220.lr.ph

dec_label_pc_f220.lr.ph:                          ; preds = %dec_label_pc_f208.preheader
  %v2_f268 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f220.lr.ph, %dec_label_pc_f208.backedge
  %v3_f224 = load i8, i8* %stack_var_-581, align 1
  %v4_f224 = sext i8 %v3_f224 to i32
  %v2_f228 = icmp eq i8 %v3_f224, 0
  br i1 %v2_f228, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_f220
  %v8_f22c = icmp eq i8 %v3_f224, 58
  br i1 %v8_f22c, label %.thread6, label %dec_label_pc_f240

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_f258

bb130:                                            ; preds = %dec_label_pc_f220
  br label %dec_label_pc_f258

dec_label_pc_f240:                                ; preds = %bb
  %v1_f248.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f244

dec_label_pc_f244:                                ; preds = %bb131, %dec_label_pc_f240
  %v0_f244 = phi i32 [ %v1_f244, %bb131 ], [ 0, %dec_label_pc_f240 ]
  %v1_f244 = add i32 %v0_f244, 1
  %v2_f248 = add i32 %v1_f244, %v1_f248.pre
  %v3_f248 = inttoptr i32 %v2_f248 to i8*
  %v4_f248 = load i8, i8* %v3_f248, align 1
  %v6_f248 = zext i8 %v4_f248 to i32
  %v2_f24c = icmp eq i8 %v4_f248, 0
  br i1 %v2_f24c, label %dec_label_pc_f258, label %bb131

bb131:                                            ; preds = %dec_label_pc_f244
  %v8_f250 = icmp eq i8 %v4_f248, 58
  br i1 %v8_f250, label %dec_label_pc_f258, label %dec_label_pc_f244

dec_label_pc_f258:                                ; preds = %dec_label_pc_f244, %bb131, %bb130, %.thread6
  %v1_f284 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_f244, %bb131 ], [ %v1_f244, %dec_label_pc_f244 ]
  %v0_f258 = phi i32 [ %v4_f224, %.thread6 ], [ %v4_f224, %bb130 ], [ %v6_f248, %bb131 ], [ %v6_f248, %dec_label_pc_f244 ]
  %v2_f258 = icmp eq i32 %v0_f258, 0
  br i1 %v2_f258, label %dec_label_pc_f208.backedge, label %dec_label_pc_f260

dec_label_pc_f208.backedge:                       ; preds = %dec_label_pc_f258, %dec_label_pc_f330, %dec_label_pc_f37c, %dec_label_pc_f2a4
  %v0_f210 = load i32, i32* @r8, align 4
  %v4_f214 = call i32 @function_13b1c(i8* nonnull %stack_var_-581, i32 512, i32 %v0_f210)
  %v2_f218 = icmp eq i32 %v4_f214, 0
  br i1 %v2_f218, label %dec_label_pc_f3a8.loopexit, label %dec_label_pc_f220

dec_label_pc_f260:                                ; preds = %dec_label_pc_f258
  %v1_f264 = add i32 %v1_f284, 2
  %v2_f26c = add i32 %v1_f264, %v2_f268
  %v1_f270 = add i32 %v2_f26c, -545
  %v2_f270 = inttoptr i32 %v1_f270 to i8*
  %v3_f270 = load i8, i8* %v2_f270, align 1
  %v2_f274 = icmp eq i8 %v3_f270, 0
  br i1 %v2_f274, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_f260
  %v8_f278 = icmp eq i8 %v3_f270, 32
  br i1 %v8_f278, label %.thread10, label %dec_label_pc_f284

.thread10:                                        ; preds = %bb132
  store i32 %v1_f264, i32* @r5, align 4
  br label %dec_label_pc_f2a4

bb133:                                            ; preds = %dec_label_pc_f260
  store i32 %v1_f264, i32* @r5, align 4
  br label %dec_label_pc_f2a4

dec_label_pc_f284:                                ; preds = %bb132
  %v0_f284 = load i32, i32* @r6, align 4
  %v2_f284 = add i32 %v0_f284, %v1_f284
  br label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %bb134, %dec_label_pc_f284
  %v0_f29413 = phi i32 [ %v1_f294, %bb134 ], [ %v2_f284, %dec_label_pc_f284 ]
  %v1_f288 = add i32 %v0_f29413, 3
  %v2_f288 = inttoptr i32 %v1_f288 to i8*
  %v3_f288 = load i8, i8* %v2_f288, align 1
  %v2_f28c = icmp eq i8 %v3_f288, 0
  br i1 %v2_f28c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_f288
  %v1_f29414 = add i32 %v0_f29413, 1
  br label %dec_label_pc_f29c

bb134:                                            ; preds = %dec_label_pc_f288
  %v8_f290 = icmp eq i8 %v3_f288, 32
  %v1_f294 = add i32 %v0_f29413, 1
  br i1 %v8_f290, label %dec_label_pc_f29c, label %dec_label_pc_f288

dec_label_pc_f29c:                                ; preds = %bb134, %.thread12
  %v1_f29415 = phi i32 [ %v1_f29414, %.thread12 ], [ %v1_f294, %bb134 ]
  %v2_f29c = sub i32 %v1_f29415, %v0_f284
  %v1_f2a0 = add i32 %v2_f29c, 2
  store i32 %v1_f2a0, i32* @r5, align 4
  br label %dec_label_pc_f2a4

dec_label_pc_f2a4:                                ; preds = %bb133, %.thread10, %dec_label_pc_f29c
  %v1_f2b0 = phi i32 [ %v1_f264, %.thread10 ], [ %v1_f264, %bb133 ], [ %v1_f2a0, %dec_label_pc_f29c ]
  %v0_f2a4 = load i32, i32* @r6, align 4
  %v2_f2a4 = add i32 %v0_f2a4, %v1_f264
  store i32 %v2_f2a4, i32* @r4, align 4
  %v2_f2b0 = add i32 %v1_f2b0, %v2_f268
  store i32 0, i32* @r7, align 4
  %v3_f2bc = add i32 %v2_f2b0, -545
  %v4_f2bc = inttoptr i32 %v3_f2bc to i8*
  store i8 0, i8* %v4_f2bc, align 1
  %v1_f2c0 = inttoptr i32 %v2_f2a4 to i8*
  %v2_f2c0 = call i32 @function_138c4(i8* %v1_f2c0)
  store i32 %v2_f2c0, i32* @r1, align 4
  %v0_f2cc = load i32, i32* @r4, align 4
  %v3_f2d0 = inttoptr i32 %v0_f2cc to i8*
  %v4_f2d0 = call i32 @function_13c18(i8* %v3_f2d0, i32 %v2_f2c0, i32 %v2_f19c)
  %v7_f2d4 = icmp eq i32 %v4_f2d0, -1
  br i1 %v7_f2d4, label %dec_label_pc_f208.backedge, label %dec_label_pc_f2f0.preheader

dec_label_pc_f2f0.preheader:                      ; preds = %dec_label_pc_f2a4
  %v1_f2d8 = load i32, i32* @r7, align 4
  %v1_f2dc = load i32, i32* @r6, align 4
  %v2_f2dc = load i32, i32* @r5, align 4
  %v3_f2dc = add i32 %v2_f2dc, %v1_f2dc
  store i32 %v1_f2d8, i32* @lr, align 4
  store i32 %v1_f2d8, i32* @r4, align 4
  %v1_f2f050 = add i32 %v3_f2dc, 2
  %v2_f2f051 = inttoptr i32 %v1_f2f050 to i8*
  %v3_f2f052 = load i8, i8* %v2_f2f051, align 1
  %v2_f2f454 = icmp eq i8 %v3_f2f052, 0
  %v1_f2f856 = add i32 %v2_f2dc, 2
  br i1 %v2_f2f454, label %dec_label_pc_f330, label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f0.preheader, %dec_label_pc_f2f0.backedge
  %v0_f33086 = phi i32 [ %v0_f33085, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f318.pr = phi i32 [ %v0_f318.pr71, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f634 = phi i32 [ %v0_f63474, %dec_label_pc_f2f0.backedge ], [ %v1_f2d8, %dec_label_pc_f2f0.preheader ]
  %v0_f2f882 = phi i32 [ %v1_f2f8, %dec_label_pc_f2f0.backedge ], [ %v1_f2f856, %dec_label_pc_f2f0.preheader ]
  %v0_f328 = phi i32 [ %v0_f2f0, %dec_label_pc_f2f0.backedge ], [ %v3_f2dc, %dec_label_pc_f2f0.preheader ]
  %v1_f304.in = phi i8 [ %v3_f2f0, %dec_label_pc_f2f0.backedge ], [ %v3_f2f052, %dec_label_pc_f2f0.preheader ]
  %v7_f300 = icmp eq i8 %v1_f304.in, 9
  br i1 %v7_f300, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_f300
  %v8_f304 = icmp eq i8 %v1_f304.in, 32
  br i1 %v8_f304, label %.thread23.thread35, label %dec_label_pc_f318

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_f324

.thread23:                                        ; preds = %dec_label_pc_f300
  br label %dec_label_pc_f324

dec_label_pc_f318:                                ; preds = %bb135
  %v7_f318 = icmp eq i32 %v0_f318.pr, 1
  br i1 %v7_f318, label %dec_label_pc_f634, label %dec_label_pc_f320

dec_label_pc_f320:                                ; preds = %dec_label_pc_f634, %dec_label_pc_f318
  %v0_f32479 = phi i32 [ %v1_f634, %dec_label_pc_f634 ], [ %v0_f634, %dec_label_pc_f318 ]
  br label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_f320
  %v0_f324 = phi i32 [ %v0_f634, %.thread23.thread35 ], [ %v0_f634, %.thread23 ], [ %v0_f32479, %dec_label_pc_f320 ]
  %v0_f318.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_f320 ]
  %v7_f32c = icmp sgt i32 %v0_f324, 6
  br i1 %v7_f32c, label %dec_label_pc_f330, label %dec_label_pc_f2f0.backedge

dec_label_pc_f330:                                ; preds = %dec_label_pc_f2f0.backedge, %dec_label_pc_f324, %dec_label_pc_f2f0.preheader
  %v1_f380 = phi i32 [ %v1_f2f856, %dec_label_pc_f2f0.preheader ], [ %v1_f2f8, %dec_label_pc_f2f0.backedge ], [ %v0_f2f882, %dec_label_pc_f324 ]
  %v0_f330 = phi i32 [ %v1_f2d8, %dec_label_pc_f2f0.preheader ], [ %v0_f33085, %dec_label_pc_f2f0.backedge ], [ %v0_f33086, %dec_label_pc_f324 ]
  %v2_f330 = icmp eq i32 %v0_f330, 0
  br i1 %v2_f330, label %dec_label_pc_f208.backedge, label %dec_label_pc_f33c

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f330
  %v2_f344 = add i32 %v1_f380, %v2_f268
  %v1_f348 = add i32 %v2_f344, -545
  %v2_f348 = inttoptr i32 %v1_f348 to i8*
  %v3_f348 = load i8, i8* %v2_f348, align 1
  %v2_f34c = icmp eq i8 %v3_f348, 0
  br i1 %v2_f34c, label %dec_label_pc_f37c, label %bb136

bb136:                                            ; preds = %dec_label_pc_f33c
  %v8_f350 = icmp eq i8 %v3_f348, 32
  br i1 %v8_f350, label %dec_label_pc_f37c, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %bb136
  %v2_f358 = add i32 %v1_f380, %v1_f2dc
  br label %dec_label_pc_f35c

dec_label_pc_f35c:                                ; preds = %bb137, %dec_label_pc_f358
  %v0_f36828 = phi i32 [ %v1_f368, %bb137 ], [ %v1_f380, %dec_label_pc_f358 ]
  %v0_f35c = phi i32 [ %v1_f35c, %bb137 ], [ %v2_f358, %dec_label_pc_f358 ]
  %v1_f35c = add i32 %v0_f35c, 1
  %v2_f35c = inttoptr i32 %v1_f35c to i8*
  %v3_f35c = load i8, i8* %v2_f35c, align 1
  %v2_f360 = icmp eq i8 %v3_f35c, 0
  br i1 %v2_f360, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_f35c
  %v1_f36829 = add i32 %v0_f36828, 1
  br label %dec_label_pc_f370

bb137:                                            ; preds = %dec_label_pc_f35c
  %v8_f364 = icmp eq i8 %v3_f35c, 32
  %v1_f368 = add i32 %v0_f36828, 1
  br i1 %v8_f364, label %dec_label_pc_f370, label %dec_label_pc_f35c

dec_label_pc_f370:                                ; preds = %bb137, %.thread27
  %v1_f378 = phi i32 [ %v1_f36829, %.thread27 ], [ %v1_f368, %bb137 ]
  %v2_f378 = add i32 %v1_f378, %v2_f268
  br label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f33c, %bb136, %dec_label_pc_f370
  %v2_f388 = phi i32 [ %v2_f344, %dec_label_pc_f33c ], [ %v2_f344, %bb136 ], [ %v2_f378, %dec_label_pc_f370 ]
  %v2_f380 = add i32 %v1_f380, %v1_f2dc
  store i32 %v2_f380, i32* @r4, align 4
  %v3_f388 = add i32 %v2_f388, -545
  %v4_f388 = inttoptr i32 %v3_f388 to i8*
  store i8 0, i8* %v4_f388, align 1
  %v1_f38c = inttoptr i32 %v2_f380 to i8*
  %v2_f38c = call i32 @function_138c4(i8* %v1_f38c)
  %v8_f394 = icmp sgt i32 %v2_f38c, 15
  br i1 %v8_f394, label %dec_label_pc_f208.backedge, label %dec_label_pc_f398

dec_label_pc_f398:                                ; preds = %dec_label_pc_f37c
  %v0_f39c = load i32, i32* @r4, align 4
  %v2_f3a0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f3a0, i32* @r0, align 4
  %v2_f3a4 = bitcast i32* %stack_var_-52 to i8*
  %v3_f3a4 = call i32 @function_138ec(i8* %v2_f3a4, i32 %v0_f39c)
  br label %dec_label_pc_f3a8

dec_label_pc_f3a8.loopexit:                       ; preds = %dec_label_pc_f208.backedge, %dec_label_pc_f208.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_f3a8

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f3a8.loopexit, %dec_label_pc_f398
  %v1_f3b8.pre-phi = phi i8* [ %.pre99, %dec_label_pc_f3a8.loopexit ], [ %v2_f3a4, %dec_label_pc_f398 ]
  %v2_f3b4.pre-phi = phi i32 [ %.pre, %dec_label_pc_f3a8.loopexit ], [ %v2_f3a0, %dec_label_pc_f398 ]
  %v0_f3a8 = load i32, i32* @r8, align 4
  %v1_f3ac = call i32 @function_14284(i32 %v0_f3a8)
  %v2_f3b8 = call i32 @function_138c4(i8* %v1_f3b8.pre-phi)
  store i32 %v2_f3b8, i32* @r4, align 4
  %v2_f3bc = icmp eq i32 %v2_f3b8, 0
  br i1 %v2_f3bc, label %dec_label_pc_f60c, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3a8
  %v3_f3cc = call i32 @function_12ebc(i32 6, i32* null)
  store i32 %v3_f3cc, i32* @r0, align 4
  %v1_f3d0 = call i32 @function_1468c(i32 %v3_f3cc)
  store i32 %v1_f3d0, i32* @r8, align 4
  %v2_f3d4 = icmp eq i32 %v1_f3d0, 0
  br i1 %v2_f3d4, label %dec_label_pc_f604, label %dec_label_pc_f3e4.preheader

dec_label_pc_f3e4.preheader:                      ; preds = %dec_label_pc_f3c4
  store i32 0, i32* @r5, align 4
  %v1_f3e845 = inttoptr i32 %v1_f3d0 to i32*
  %v2_f3e846 = call i32 @function_14788(i32* %v1_f3e845)
  %v2_f3ec48 = icmp eq i32 %v2_f3e846, 0
  br i1 %v2_f3ec48, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4.preheader

dec_label_pc_f3e4.loopexit:                       ; preds = %dec_label_pc_f3fc, %dec_label_pc_f410, %dec_label_pc_f478
  %v0_f3e4 = load i32, i32* @r8, align 4
  %v1_f3e8 = inttoptr i32 %v0_f3e4 to i32*
  %v2_f3e8 = call i32 @function_14788(i32* %v1_f3e8)
  %v2_f3ec = icmp eq i32 %v2_f3e8, 0
  br i1 %v2_f3ec, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4.preheader

dec_label_pc_f3f4.preheader:                      ; preds = %dec_label_pc_f3e4.preheader, %dec_label_pc_f3e4.loopexit
  %v0_f3fc94 = phi i32 [ %v2_f3e8, %dec_label_pc_f3e4.loopexit ], [ %v2_f3e846, %dec_label_pc_f3e4.preheader ]
  br label %dec_label_pc_f3f4

dec_label_pc_f3f4:                                ; preds = %dec_label_pc_f3f4.preheader, %dec_label_pc_f5e0
  %v0_f408 = phi i32 [ %v0_f3fc94, %dec_label_pc_f3f4.preheader ], [ %v2_f5ec, %dec_label_pc_f5e0 ]
  %v0_f3f4 = load i32, i32* @r5, align 4
  %v2_f3f4 = icmp eq i32 %v0_f3f4, 0
  br i1 %v2_f3f4, label %dec_label_pc_f3fc, label %dec_label_pc_f5f8

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f3f4
  %v1_f3fc = add i32 %v0_f408, 11
  %v2_f3fc = inttoptr i32 %v1_f3fc to i8*
  %v3_f3fc = load i8, i8* %v2_f3fc, align 1
  %v4_f3fc = zext i8 %v3_f3fc to i32
  %v1_f400 = add nsw i32 %v4_f3fc, -48
  store i32 %v1_f3fc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_f400, 9
  br i1 %tmp, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f410

dec_label_pc_f410:                                ; preds = %dec_label_pc_f3fc
  %v3_f418 = call i32 @function_12ebc(i32 6, i32* null)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f424 = call i32 @function_138ec(i8* %v2_f15c, i32 %v3_f418)
  %v2_f42c = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f430 = load i32, i32* @r7, align 4
  %v0_f434 = load i32, i32* @sl, align 4
  %v2_f434 = add i32 %v0_f434, %v2_f42c
  store i32 %v2_f434, i32* @r0, align 4
  %v2_f438 = inttoptr i32 %v2_f434 to i8*
  %v3_f438 = call i32 @function_138ec(i8* %v2_f438, i32 %v0_f430)
  %v2_f440 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f444 = load i32, i32* @r5, align 4
  store i32 %v2_f440, i32* @r4, align 4
  %v2_f450 = inttoptr i32 %v0_f444 to i32*
  %v3_f450 = call i32 @function_12ebc(i32 7, i32* %v2_f450)
  %v0_f458 = load i32, i32* @sl, align 4
  %v1_f458 = load i32, i32* @r4, align 4
  %v2_f458 = add i32 %v1_f458, %v0_f458
  store i32 %v2_f458, i32* @r0, align 4
  %v2_f45c = inttoptr i32 %v2_f458 to i8*
  %v3_f45c = call i32 @function_138ec(i8* %v2_f45c, i32 %v3_f450)
  %v4_f46c = call i32 @function_14478(i8* %v2_f15c, i32 %v2_f150, i32 4096)
  %v7_f470 = icmp eq i32 %v4_f46c, -1
  br i1 %v7_f470, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f410
  %v0_f478 = load i32, i32* @r5, align 4
  %v2_f480 = inttoptr i32 %v0_f478 to i32*
  %v3_f480 = call i32 @function_12ebc(i32 6, i32* %v2_f480)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f48c = call i32 @function_138ec(i8* %v2_f15c, i32 %v3_f480)
  %v2_f494 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f498 = load i32, i32* @r7, align 4
  %v0_f49c = load i32, i32* @sl, align 4
  %v2_f49c = add i32 %v0_f49c, %v2_f494
  store i32 %v2_f49c, i32* @r0, align 4
  %v2_f4a0 = inttoptr i32 %v2_f49c to i8*
  %v3_f4a0 = call i32 @function_138ec(i8* %v2_f4a0, i32 %v0_f498)
  %v2_f4a8 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f4ac = load i32, i32* @r5, align 4
  store i32 %v2_f4a8, i32* @r4, align 4
  %v2_f4b8 = inttoptr i32 %v0_f4ac to i32*
  %v3_f4b8 = call i32 @function_12ebc(i32 9, i32* %v2_f4b8)
  %v0_f4c0 = load i32, i32* @sl, align 4
  %v1_f4c0 = load i32, i32* @r4, align 4
  %v2_f4c0 = add i32 %v1_f4c0, %v0_f4c0
  store i32 %v2_f4c0, i32* @r0, align 4
  %v2_f4c4 = inttoptr i32 %v2_f4c0 to i8*
  %v3_f4c4 = call i32 @function_138ec(i8* %v2_f4c4, i32 %v3_f4b8)
  store i32 %v2_f13c, i32* @r0, align 4
  %v1_f4cc = call i32 @function_1468c(i32 %v2_f13c)
  store i32 %v1_f4cc, i32* @sb, align 4
  %v2_f4d0 = icmp eq i32 %v1_f4cc, 0
  br i1 %v2_f4d0, label %dec_label_pc_f3e4.loopexit, label %dec_label_pc_f4d8.preheader

dec_label_pc_f4d8.preheader:                      ; preds = %dec_label_pc_f478
  %v1_f4dc40 = inttoptr i32 %v1_f4cc to i32*
  %v2_f4dc41 = call i32 @function_14788(i32* %v1_f4dc40)
  store i32 %v2_f4dc41, i32* @r6, align 4
  %v2_f4e043 = icmp eq i32 %v2_f4dc41, 0
  br i1 %v2_f4e043, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0thread-pre-split

dec_label_pc_f4d8.loopexit:                       ; preds = %dec_label_pc_f4f8, %dec_label_pc_f590
  %v0_f4d8 = load i32, i32* @sb, align 4
  %v1_f4dc = inttoptr i32 %v0_f4d8 to i32*
  %v2_f4dc = call i32 @function_14788(i32* %v1_f4dc)
  store i32 %v2_f4dc, i32* @r6, align 4
  %v2_f4e0 = icmp eq i32 %v2_f4dc, 0
  br i1 %v2_f4e0, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0thread-pre-split

dec_label_pc_f4f0thread-pre-split:                ; preds = %dec_label_pc_f4d8.preheader, %dec_label_pc_f4d8.loopexit
  %v0_f4f0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_f4f0

dec_label_pc_f4f0:                                ; preds = %dec_label_pc_f4f0thread-pre-split, %dec_label_pc_f5b8
  %v0_f4f0 = phi i32 [ %v0_f4f0.pr, %dec_label_pc_f4f0thread-pre-split ], [ 1, %dec_label_pc_f5b8 ]
  %v2_f4f0 = icmp eq i32 %v0_f4f0, 0
  br i1 %v2_f4f0, label %dec_label_pc_f4f8, label %dec_label_pc_f5e0

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f4f0
  %v2_f4f8 = call i32 @function_13964(i32 %v2_f150, i32 4096)
  %v0_f4fc = load i32, i32* @r5, align 4
  %v2_f504 = inttoptr i32 %v0_f4fc to i32*
  %v3_f504 = call i32 @function_12ebc(i32 6, i32* %v2_f504)
  store i32 %v2_f13c, i32* @r0, align 4
  %v3_f510 = call i32 @function_138ec(i8* %v2_f15c, i32 %v3_f504)
  %v2_f518 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f51c = load i32, i32* @r7, align 4
  %v0_f520 = load i32, i32* @sl, align 4
  %v2_f520 = add i32 %v0_f520, %v2_f518
  store i32 %v2_f520, i32* @r0, align 4
  %v2_f524 = inttoptr i32 %v2_f520 to i8*
  %v3_f524 = call i32 @function_138ec(i8* %v2_f524, i32 %v0_f51c)
  %v2_f52c = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f530 = load i32, i32* @r5, align 4
  store i32 %v2_f52c, i32* @r4, align 4
  %v2_f53c = inttoptr i32 %v0_f530 to i32*
  %v3_f53c = call i32 @function_12ebc(i32 9, i32* %v2_f53c)
  %v0_f544 = load i32, i32* @sl, align 4
  %v1_f544 = load i32, i32* @r4, align 4
  %v2_f544 = add i32 %v1_f544, %v0_f544
  store i32 %v2_f544, i32* @r0, align 4
  %v2_f548 = inttoptr i32 %v2_f544 to i8*
  %v3_f548 = call i32 @function_138ec(i8* %v2_f548, i32 %v3_f53c)
  %v2_f550 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f558 = load i32, i32* @sl, align 4
  %v2_f558 = add i32 %v0_f558, %v2_f550
  store i32 %v2_f558, i32* @r0, align 4
  %v2_f55c = inttoptr i32 %v2_f558 to i8*
  %v3_f55c = call i32 @function_138ec(i8* %v2_f55c, i32 ptrtoint ([2 x i8]* @global_var_16b50.23 to i32))
  %v2_f564 = call i32 @function_138c4(i8* %v2_f15c)
  %v0_f568 = load i32, i32* @r6, align 4
  %v1_f568 = add i32 %v0_f568, 11
  %v0_f56c = load i32, i32* @sl, align 4
  %v2_f56c = add i32 %v0_f56c, %v2_f564
  store i32 %v2_f56c, i32* @r0, align 4
  %v2_f570 = inttoptr i32 %v2_f56c to i8*
  %v3_f570 = call i32 @function_138ec(i8* %v2_f570, i32 %v1_f568)
  %v4_f580 = call i32 @function_14478(i8* %v2_f15c, i32 %v2_f150, i32 4096)
  %v7_f584 = icmp eq i32 %v4_f580, -1
  br i1 %v7_f584, label %dec_label_pc_f4d8.loopexit, label %dec_label_pc_f590

dec_label_pc_f590:                                ; preds = %dec_label_pc_f4f8
  %v2_f590 = call i32 @function_138c4(i8* %v2_f174)
  store i32 %v2_f590, i32* @r1, align 4
  %v4_f5a4 = call i32 @function_13c18(i8* %v2_f174, i32 %v2_f590, i32 %v2_f3b4.pre-phi)
  %v7_f5a8 = icmp eq i32 %v4_f5a4, -1
  br i1 %v7_f5a8, label %dec_label_pc_f4d8.loopexit, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f590
  %v0_f5b0 = load i32, i32* @r7, align 4
  %v2_f5b8 = inttoptr i32 %v0_f5b0 to i8*
  %v3_f5b8 = call i32 @function_139f0(i8* %v2_f5b8, i32 10)
  %v2_f5c0 = call i32 @function_14384(i32 %v3_f5b8, i32 9)
  %v0_f5c4 = load i32, i32* @sb, align 4
  %v1_f5c8 = inttoptr i32 %v0_f5c4 to i32*
  %v2_f5c8 = call i32 @function_14788(i32* %v1_f5c8)
  store i32 %v2_f5c8, i32* @r6, align 4
  %v2_f5cc = icmp eq i32 %v2_f5c8, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_f5cc, label %dec_label_pc_f5e0, label %dec_label_pc_f4f0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f4d8.loopexit, %dec_label_pc_f5b8, %dec_label_pc_f4f0, %dec_label_pc_f4d8.preheader
  %v0_f5e0 = load i32, i32* @sb, align 4
  %v1_f5e4 = inttoptr i32 %v0_f5e0 to i32*
  %v2_f5e4 = call i32 @function_145d8(i32* %v1_f5e4)
  %v0_f5e8 = load i32, i32* @r8, align 4
  %v1_f5ec = inttoptr i32 %v0_f5e8 to i32*
  %v2_f5ec = call i32 @function_14788(i32* %v1_f5ec)
  %v2_f5f0 = icmp eq i32 %v2_f5ec, 0
  br i1 %v2_f5f0, label %dec_label_pc_f5f8, label %dec_label_pc_f3f4

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f3e4.loopexit, %dec_label_pc_f5e0, %dec_label_pc_f3f4, %dec_label_pc_f3e4.preheader
  %v0_f5f8 = load i32, i32* @r8, align 4
  %v1_f5fc = inttoptr i32 %v0_f5f8 to i32*
  %v2_f5fc = call i32 @function_145d8(i32* %v1_f5fc)
  %v0_f600 = load i32, i32* @r5, align 4
  %v1_f600 = urem i32 %v0_f600, 256
  br label %dec_label_pc_f604

dec_label_pc_f604:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f5f8
  %storemerge = phi i32 [ %v1_f600, %dec_label_pc_f5f8 ], [ 0, %dec_label_pc_f3c4 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_f608 = call i32 @function_156b4(i32 1)
  br label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f3a8, %dec_label_pc_f604
  %v1_f610 = call i32 @function_12ee8(i32 6)
  %v1_f618 = call i32 @function_12ee8(i32 7)
  %v1_f620 = call i32 @function_12ee8(i32 9)
  br label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f1d8, %dec_label_pc_f60c
  %v0_f624 = load i32, i32* @r4, align 4
  %v2_f630 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f630, i32* @r4, align 4
  store i32 %v6_f128, i32* @r5, align 4
  store i32 %v9_f128, i32* @r6, align 4
  store i32 %v12_f128, i32* @r7, align 4
  store i32 %v15_f128, i32* @r8, align 4
  store i32 %v18_f128, i32* @sb, align 4
  store i32 %v21_f128, i32* @sl, align 4
  store i32 %v24_f128, i32* @fp, align 4
  ret i32 %v0_f624

dec_label_pc_f634:                                ; preds = %dec_label_pc_f318
  %v1_f634 = add i32 %v0_f634, 1
  store i32 %v1_f634, i32* @lr, align 4
  %v7_f638 = icmp eq i32 %v0_f634, 0
  br i1 %v7_f638, label %dec_label_pc_f640, label %dec_label_pc_f320

dec_label_pc_f640:                                ; preds = %dec_label_pc_f634
  %v1_f640 = add i32 %v0_f328, 3
  %v2_f640 = inttoptr i32 %v1_f640 to i8*
  %v3_f640 = load i8, i8* %v2_f640, align 1
  %v7_f644 = icmp eq i8 %v3_f640, 65
  br i1 %v7_f644, label %dec_label_pc_f654, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f640
  br label %dec_label_pc_f2f0.backedge

dec_label_pc_f654:                                ; preds = %dec_label_pc_f640
  store i32 %v1_f634, i32* @r4, align 4
  br label %dec_label_pc_f2f0.backedge

dec_label_pc_f2f0.backedge:                       ; preds = %.thread33, %dec_label_pc_f654, %dec_label_pc_f324
  %v0_f33085 = phi i32 [ %v1_f634, %dec_label_pc_f654 ], [ %v0_f33086, %dec_label_pc_f324 ], [ %v0_f33086, %.thread33 ]
  %v0_f63474 = phi i32 [ %v1_f634, %dec_label_pc_f654 ], [ %v0_f324, %dec_label_pc_f324 ], [ %v1_f634, %.thread33 ]
  %v0_f318.pr71 = phi i32 [ 0, %dec_label_pc_f654 ], [ %v0_f318.pr72, %dec_label_pc_f324 ], [ 0, %.thread33 ]
  %v0_f2f0 = add i32 %v0_f328, 1
  %v1_f2f0 = add i32 %v0_f328, 3
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i8*
  %v3_f2f0 = load i8, i8* %v2_f2f0, align 1
  %v2_f2f4 = icmp eq i8 %v3_f2f0, 0
  %v1_f2f8 = add i32 %v0_f2f882, 1
  br i1 %v2_f2f4, label %dec_label_pc_f330, label %dec_label_pc_f300

dec_label_pc_f664:                                ; preds = %dec_label_pc_f128
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_f1d8

; uselistorder directives
  uselistorder i32 %v1_f2f8, { 1, 0 }
  uselistorder i8 %v3_f2f0, { 1, 0 }
  uselistorder i32 %v0_f33085, { 1, 0 }
  uselistorder i32 %v1_f634, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_f5ec, { 1, 0 }
  uselistorder i32 %v1_f35c, { 1, 0 }
  uselistorder i32 %v0_f36828, { 1, 0 }
  uselistorder i32 %v1_f380, { 0, 3, 1, 2 }
  uselistorder i32 %v0_f324, { 1, 0 }
  uselistorder i32 %v0_f2f882, { 1, 0 }
  uselistorder i32 %v0_f634, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_f33086, { 1, 2, 0 }
  uselistorder i32 %v1_f2f856, { 1, 0 }
  uselistorder i32 %v2_f2dc, { 1, 0 }
  uselistorder i32 %v1_f2d8, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_f29413, { 1, 0, 2 }
  uselistorder i32 %v0_f284, { 1, 0 }
  uselistorder i32 %v1_f264, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_f1f8, { 1, 2, 0 }
  uselistorder i32 %v2_f150, { 1, 0, 2 }
  uselistorder i32 %v2_f13c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_139f0, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_16b50.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_13b1c, { 1, 0 }
  uselistorder label %dec_label_pc_f2f0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f624, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0 }
  uselistorder label %dec_label_pc_f604, { 1, 0 }
  uselistorder label %dec_label_pc_f5f8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f5e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f4f0, { 1, 0 }
  uselistorder label %dec_label_pc_f4f0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f4d8.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f3f4, { 1, 0 }
  uselistorder label %dec_label_pc_f3f4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f3e4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f37c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f324, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f300, { 1, 0 }
  uselistorder label %dec_label_pc_f2a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f208.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_f258, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f220, { 1, 0 }
  uselistorder label %dec_label_pc_f1d8, { 1, 0 }
}

define i32 @function_f694(i32 %arg1) local_unnamed_addr {
dec_label_pc_f694:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f694 = load i32, i32* @r4, align 4
  store i32 %v3_f694, i32* %stack_var_-36, align 4
  %v6_f694 = load i32, i32* @r5, align 4
  %v9_f694 = load i32, i32* @r6, align 4
  %v12_f694 = load i32, i32* @r7, align 4
  %v15_f694 = load i32, i32* @r8, align 4
  %v18_f694 = load i32, i32* @sb, align 4
  %v21_f694 = load i32, i32* @sl, align 4
  %v24_f694 = load i32, i32* @fp, align 4
  %v2_f6a4 = call i32 @function_14554(i32* null)
  store i32 %v2_f6a4, i32* @r7, align 4
  %v0_f6ac = call i32 @function_142b0()
  %v7_f6b0 = icmp eq i32 %v0_f6ac, -1
  %. = zext i1 %v7_f6b0 to i32
  %tmp212 = icmp slt i32 %v0_f6ac, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f8b0.101 to i32), i32* %r3.global-to-local, align 4
  %v2_f6cc = icmp eq i32 %storemerge174, 0
  store i32 %v0_f6ac, i32* @global_var_1f8b0.101, align 4
  br i1 %v2_f6cc, label %dec_label_pc_f6e4, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f900, %dec_label_pc_f7e8, %dec_label_pc_f694
  %v29_f6e0 = phi i32 [ %v3_f88c, %dec_label_pc_f7e8 ], [ %v0_f6ac, %dec_label_pc_f694 ], [ 0, %dec_label_pc_f900 ]
  %v2_f6e0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f6e0, i32* @r4, align 4
  store i32 %v6_f694, i32* @r5, align 4
  store i32 %v9_f694, i32* @r6, align 4
  store i32 %v12_f694, i32* @r7, align 4
  store i32 %v15_f694, i32* @r8, align 4
  store i32 %v18_f694, i32* @sb, align 4
  store i32 %v21_f694, i32* @sl, align 4
  store i32 %v24_f694, i32* @fp, align 4
  ret i32 %v29_f6e0

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f694
  %v2_f6e4 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_f6e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_f6fc = call i32 @function_f128(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_f708 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f710 = load i32, i32* @r5, align 4
  store i32 %v0_f710, i32* %r2.global-to-local, align 4
  %v3_f71c = call i32 @function_14b80(i32 %v0_f708, i32 1, i32 %v0_f710)
  %v7_f720 = icmp eq i32 %v3_f71c, -1
  store i32 %v3_f71c, i32* @r4, align 4
  br i1 %v7_f720, label %dec_label_pc_f748, label %dec_label_pc_f72c

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f6e4
  %v2_f730 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f730, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f738 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_f738 = call i32 @function_149b0(i32 %v3_f71c, %sockaddr* %v3_f738, i32 16)
  %v0_f73c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f744 = call i32 @function_14a64(i32 %v0_f73c, i32 1)
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_f72c
  %v1_f74c = call i32 @function_f128(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_f758 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f760 = load i32, i32* @r5, align 4
  store i32 %v0_f760, i32* %r2.global-to-local, align 4
  %v3_f76c = call i32 @function_14b80(i32 %v0_f758, i32 1, i32 %v0_f760)
  %v7_f770 = icmp eq i32 %v3_f76c, -1
  store i32 %v3_f76c, i32* @r4, align 4
  br i1 %v7_f770, label %dec_label_pc_f798, label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f748
  %v2_f780 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f780, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f788 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_f788 = call i32 @function_149b0(i32 %v3_f76c, %sockaddr* %v3_f788, i32 16)
  %v0_f78c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f794 = call i32 @function_14a64(i32 %v0_f78c, i32 1)
  br label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %dec_label_pc_f748, %dec_label_pc_f77c
  %v1_f79c = call i32 @function_f128(i32 20480)
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_f7a8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f7b0 = load i32, i32* @r5, align 4
  store i32 %v0_f7b0, i32* %r2.global-to-local, align 4
  %v3_f7bc = call i32 @function_14b80(i32 %v0_f7a8, i32 1, i32 %v0_f7b0)
  %v7_f7c0 = icmp eq i32 %v3_f7bc, -1
  store i32 %v3_f7bc, i32* @r4, align 4
  br i1 %v7_f7c0, label %dec_label_pc_f7e8, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f798
  %v2_f7d0 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f7d0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f7d8 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_f7d8 = call i32 @function_149b0(i32 %v3_f7bc, %sockaddr* %v3_f7d8, i32 16)
  %v0_f7dc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f7e4 = call i32 @function_14a64(i32 %v0_f7dc, i32 1)
  br label %dec_label_pc_f7e8

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f798, %dec_label_pc_f7cc
  %v1_f7ec = call i32 @function_156b4(i32 5)
  %v1_f7f4 = call i32 @function_14d30(i32 4096)
  store i32 ptrtoint (i32* @global_var_1f814.107 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8ac.109 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_f7f4, i32* %r2.global-to-local, align 4
  %v0_f804 = load i32, i32* @r5, align 4
  %v1_f804 = trunc i32 %v0_f804 to i8
  %v3_f804 = inttoptr i32 %v1_f7f4 to i8*
  store i8 %v1_f804, i8* %v3_f804, align 1
  %v0_f80c = load i32, i32* @r5, align 4
  %v1_f80c = load i32, i32* %r3.global-to-local, align 4
  %v2_f80c = inttoptr i32 %v1_f80c to i32*
  store i32 %v0_f80c, i32* %v2_f80c, align 4
  %v0_f810 = load i32, i32* %r2.global-to-local, align 4
  %v1_f810 = load i32, i32* %r1.global-to-local, align 4
  %v2_f810 = inttoptr i32 %v1_f810 to i32*
  store i32 %v0_f810, i32* %v2_f810, align 4
  %v1_f814 = call i32 @function_12fa0(i32 6)
  %v1_f81c = call i32 @function_12fa0(i32 7)
  %v0_f820 = load i32, i32* @r5, align 4
  store i32 %v0_f820, i32* %r1.global-to-local, align 4
  %v2_f828 = inttoptr i32 %v0_f820 to i32*
  %v3_f828 = call i32 @function_12ebc(i32 6, i32* %v2_f828)
  %v2_f830 = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_f830, i32* @r8, align 4
  store i32 %v3_f828, i32* %r1.global-to-local, align 4
  store i32 %v2_f830, i32* @r0, align 4
  %v2_f83c = bitcast i32* %stack_var_-8408 to i8*
  %v3_f83c = call i32 @function_138ec(i8* %v2_f83c, i32 %v3_f828)
  %v0_f840 = load i32, i32* @r8, align 4
  %v2_f840 = add i32 %v0_f840, %v3_f83c
  store i32 %v2_f840, i32* @r4, align 4
  %v0_f844 = call i32 @function_142dc()
  %v2_f84c = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_f84c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_f854 = trunc i32 %v0_f844 to i8
  %v4_f854 = call i32 @function_13db8(i8 %v3_f854, i32 10, i32 %v2_f84c)
  store i32 %v4_f854, i32* %r1.global-to-local, align 4
  %v0_f85c = load i32, i32* @r4, align 4
  store i32 %v0_f85c, i32* @r0, align 4
  %v2_f860 = inttoptr i32 %v0_f85c to i8*
  %v3_f860 = call i32 @function_138ec(i8* %v2_f860, i32 %v4_f854)
  %v0_f864 = load i32, i32* @r5, align 4
  store i32 %v0_f864, i32* %r1.global-to-local, align 4
  %v0_f868 = load i32, i32* @r4, align 4
  %v2_f868 = add i32 %v0_f868, %v3_f860
  store i32 %v2_f868, i32* @r4, align 4
  %v2_f870 = inttoptr i32 %v0_f864 to i32*
  %v3_f870 = call i32 @function_12ebc(i32 7, i32* %v2_f870)
  store i32 %v3_f870, i32* %r1.global-to-local, align 4
  %v0_f878 = load i32, i32* @r4, align 4
  store i32 %v0_f878, i32* @r0, align 4
  %v2_f87c = inttoptr i32 %v0_f878 to i8*
  %v3_f87c = call i32 @function_138ec(i8* %v2_f87c, i32 %v3_f870)
  %v0_f880 = load i32, i32* @r5, align 4
  store i32 %v0_f880, i32* %r1.global-to-local, align 4
  store i32 %v3_f87c, i32* @r6, align 4
  %v3_f88c = call i32 @function_143b0(i8* %v2_f83c, i32 %v0_f880)
  %v7_f890 = icmp eq i32 %v3_f88c, -1
  br i1 %v7_f890, label %dec_label_pc_f6d8, label %dec_label_pc_f898

dec_label_pc_f898:                                ; preds = %dec_label_pc_f7e8
  %v1_f898 = call i32 @function_14284(i32 %v3_f88c)
  %v1_f8a0 = call i32 @function_12ee8(i32 6)
  %v1_f8a8 = call i32 @function_12ee8(i32 7)
  store i32 ptrtoint (i32* @global_var_1f8ac.109 to i32), i32* %r3.global-to-local, align 4
  %v2_f8b4 = load i32, i32* @global_var_1f8ac.109, align 4
  store i32 %v2_f8b4, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_f8c0 = call i32 @function_14478(i8* %v2_f83c, i32 %v2_f8b4, i32 4095)
  %v7_f8c4 = icmp eq i32 %v4_f8c0, -1
  br i1 %v7_f8c4, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_f898
  %v0_f8d054 = load i32, i32* @r4, align 4
  %v1_f8d055 = load i32, i32* @r6, align 4
  %v2_f8d056 = add i32 %v1_f8d055, %v0_f8d054
  store i32 %v2_f8d056, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_f898
  %v3_f8cc = load i32, i32* @global_var_1f8ac.109, align 4
  store i32 %v3_f8cc, i32* %r3.global-to-local, align 4
  %v0_f8d0 = load i32, i32* @r4, align 4
  %v1_f8d0 = load i32, i32* @r6, align 4
  %v2_f8d0 = add i32 %v1_f8d0, %v0_f8d0
  store i32 %v2_f8d0, i32* %r1.global-to-local, align 4
  %v1_f8d4 = load i32, i32* @r5, align 4
  %v2_f8d4 = trunc i32 %v1_f8d4 to i8
  %v5_f8d4 = add i32 %v3_f8cc, %v4_f8c0
  %v6_f8d4 = inttoptr i32 %v5_f8d4 to i8*
  store i8 %v2_f8d4, i8* %v6_f8d4, align 1
  %v1_f8d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_f8d8 = phi i32 [ %v2_f8d056, %.thread5.thread ], [ %v1_f8d8.pre, %bb215 ]
  %v0_f8d8 = load i32, i32* @r8, align 4
  %v2_f8d8 = sub i32 %v1_f8d8, %v0_f8d8
  store i32 %v2_f8d8, i32* %r1.global-to-local, align 4
  %v2_f8e0 = call i32 @function_13964(i32 %v2_f830, i32 %v2_f8d8)
  %v2_f8ec = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_f8ec, i32* %r1.global-to-local, align 4
  store i32 %v2_f8ec, i32* %stack_var_-8428, align 4
  %v0_f8f4 = load i32, i32* @r5, align 4
  %v0_f8f8 = load i32, i32* @r7, align 4
  store i32 %v0_f8f8, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_f9f4 = ptrtoint i32* %stack_var_-152 to i32
  %v2_f9f8 = bitcast i32* %stack_var_-152 to i8*
  %v2_fa44 = ptrtoint i32* %stack_var_-216 to i32
  %v2_fa48 = bitcast i32* %stack_var_-216 to i8*
  %v2_fbb8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_fbc8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fbdc = ptrtoint i32* %stack_var_-52 to i32
  %v2_fbf0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_fc08 = ptrtoint i32* %stack_var_-56 to i32
  %v2_fac0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f900

dec_label_pc_f900:                                ; preds = %dec_label_pc_f9b8, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_f8f4, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_f9b8 ]
  %v1_f904 = call i32 @function_12fa0(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f910 = call i32 @function_12ebc(i32 6, i32* null)
  store i32 %v3_f910, i32* @r0, align 4
  %v1_f914 = call i32 @function_1468c(i32 %v3_f910)
  store i32 %v1_f914, i32* @sl, align 4
  %v2_f918 = icmp eq i32 %v1_f914, 0
  br i1 %v2_f918, label %dec_label_pc_f6d8, label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f900
  %v1_f924 = call i32 @function_12ee8(i32 6)
  %v0_f928117 = load i32, i32* @sl, align 4
  %v1_f92c118 = inttoptr i32 %v0_f928117 to i32*
  %v2_f92c119 = call i32 @function_14788(i32* %v1_f92c118)
  %v2_f930121 = icmp eq i32 %v2_f92c119, 0
  br i1 %v2_f930121, label %dec_label_pc_f9b8, label %dec_label_pc_f938.preheader

dec_label_pc_f938.preheader:                      ; preds = %dec_label_pc_f920, %dec_label_pc_f928.backedge
  %v0_f938133 = phi i32 [ %v2_f92c, %dec_label_pc_f928.backedge ], [ %v2_f92c119, %dec_label_pc_f920 ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_f928.backedge ], [ %stack_var_-8420.0, %dec_label_pc_f920 ]
  br label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f938.preheader, %dec_label_pc_f9a0
  %v0_f948 = phi i32 [ %v2_f9ac, %dec_label_pc_f9a0 ], [ %v0_f938133, %dec_label_pc_f938.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_f95c, %dec_label_pc_f9a0 ], [ %stack_var_-8420.1122, %dec_label_pc_f938.preheader ]
  %v1_f938 = add i32 %v0_f948, 11
  %v2_f938 = inttoptr i32 %v1_f938 to i8*
  %v3_f938 = load i8, i8* %v2_f938, align 1
  %v4_f938 = zext i8 %v3_f938 to i32
  %v1_f93c = add nsw i32 %v4_f938, -48
  store i32 %v1_f93c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_f93c, 9
  br i1 %tmp, label %dec_label_pc_f928.backedge, label %dec_label_pc_f948

dec_label_pc_f948:                                ; preds = %dec_label_pc_f938
  store i32 %v1_f938, i32* @r6, align 4
  %v2_f950 = call i32 @function_15474(i8* %v2_f938)
  %v0_f958 = load i32, i32* @r5, align 4
  %v1_f95c = add i32 %stack_var_-8420.2, 1
  store i32 %v1_f95c, i32* %r2.global-to-local, align 4
  store i32 %v2_f950, i32* @r7, align 4
  %v5_f968 = icmp slt i32 %v0_f958, %v2_f950
  %v2_f9c8 = call i32 @function_14554(i32* null)
  br i1 %v5_f968, label %dec_label_pc_f9c4, label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %dec_label_pc_f948
  %v0_f974 = load i32, i32* @r4, align 4
  %v2_f974 = sub i32 %v2_f9c8, %v0_f974
  %v7_f97c = icmp slt i32 %v2_f974, 601
  br i1 %v7_f97c, label %dec_label_pc_f984, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_f96c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_f928.backedge

dec_label_pc_f984:                                ; preds = %dec_label_pc_f96c
  %v0_f984 = load i32, i32* @r7, align 4
  %v7_f988 = icmp slt i32 %v0_f984, 401
  br i1 %v7_f988, label %dec_label_pc_f928.backedge, label %dec_label_pc_f98c

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f984
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_f994 = call i32 @function_13fe0(i32 %v1_f95c, i32 10)
  %v2_f998 = icmp eq i32 %v2_f994, 0
  br i1 %v2_f998, label %dec_label_pc_f9a0, label %dec_label_pc_f928.backedge

dec_label_pc_f9a0:                                ; preds = %dec_label_pc_f98c
  %v1_f9a4 = call i32 @function_156b4(i32 1)
  %v0_f9a8 = load i32, i32* @sl, align 4
  %v1_f9ac = inttoptr i32 %v0_f9a8 to i32*
  %v2_f9ac = call i32 @function_14788(i32* %v1_f9ac)
  %v2_f9b0 = icmp eq i32 %v2_f9ac, 0
  br i1 %v2_f9b0, label %dec_label_pc_f9b8, label %dec_label_pc_f938

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f928.backedge, %dec_label_pc_f9a0, %dec_label_pc_f920
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_f920 ], [ %v1_f95c, %dec_label_pc_f9a0 ], [ %stack_var_-8420.1.be, %dec_label_pc_f928.backedge ]
  %v0_f9b8 = load i32, i32* @sl, align 4
  %v1_f9bc = inttoptr i32 %v0_f9b8 to i32*
  %v2_f9bc = call i32 @function_145d8(i32* %v1_f9bc)
  br label %dec_label_pc_f900

dec_label_pc_f9c4:                                ; preds = %dec_label_pc_f948
  %v1_f9d4 = call i32 @function_12fa0(i32 6)
  %v1_f9dc = call i32 @function_12fa0(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_f9e8 = call i32 @function_12ebc(i32 6, i32* null)
  store i32 %v3_f9e8, i32* %r1.global-to-local, align 4
  store i32 %v2_f9f4, i32* @r0, align 4
  %v3_f9f8 = call i32 @function_138ec(i8* %v2_f9f8, i32 %v3_f9e8)
  store i32 %v2_f9f4, i32* %r3.global-to-local, align 4
  %v2_fa04 = add i32 %v3_f9f8, %v2_f9f4
  store i32 %v2_fa04, i32* %r5.global-to-local, align 4
  %v0_fa08 = load i32, i32* @r6, align 4
  store i32 %v0_fa08, i32* %r1.global-to-local, align 4
  store i32 %v2_fa04, i32* @r0, align 4
  %v2_fa10 = inttoptr i32 %v2_fa04 to i8*
  %v3_fa10 = call i32 @function_138ec(i8* %v2_fa10, i32 %v0_fa08)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fa20 = call i32 @function_12ebc(i32 7, i32* null)
  store i32 %v3_fa20, i32* %r1.global-to-local, align 4
  %v0_fa28 = load i32, i32* %r5.global-to-local, align 4
  %v2_fa28 = add i32 %v3_fa10, %v0_fa28
  store i32 %v2_fa28, i32* @r0, align 4
  %v2_fa2c = inttoptr i32 %v2_fa28 to i8*
  %v3_fa2c = call i32 @function_138ec(i8* %v2_fa2c, i32 %v3_fa20)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fa38 = call i32 @function_12ebc(i32 6, i32* null)
  store i32 %v3_fa38, i32* %r1.global-to-local, align 4
  store i32 %v2_fa44, i32* @r0, align 4
  %v3_fa48 = call i32 @function_138ec(i8* %v2_fa48, i32 %v3_fa38)
  %v2_fa54 = add i32 %v3_fa48, %v2_fa44
  store i32 %v2_fa54, i32* @r5, align 4
  %v0_fa58 = load i32, i32* @r6, align 4
  store i32 %v0_fa58, i32* %r1.global-to-local, align 4
  store i32 %v2_fa54, i32* @r0, align 4
  %v2_fa60 = inttoptr i32 %v2_fa54 to i8*
  %v3_fa60 = call i32 @function_138ec(i8* %v2_fa60, i32 %v0_fa58)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_fa60, i32* @r4, align 4
  %v3_fa70 = call i32 @function_12ebc(i32 11, i32* null)
  store i32 %v3_fa70, i32* %r1.global-to-local, align 4
  %v0_fa78 = load i32, i32* @r5, align 4
  %v1_fa78 = load i32, i32* @r4, align 4
  %v2_fa78 = add i32 %v1_fa78, %v0_fa78
  store i32 %v2_fa78, i32* @r0, align 4
  %v2_fa7c = inttoptr i32 %v2_fa78 to i8*
  %v3_fa7c = call i32 @function_138ec(i8* %v2_fa7c, i32 %v3_fa70)
  %v1_fa84 = call i32 @function_12ee8(i32 6)
  %v1_fa8c = call i32 @function_12ee8(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_faa0 = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_faa0, i32* %r1.global-to-local, align 4
  %v4_faa4 = call i32 @function_14478(i8* %v2_f9f8, i32 %v2_faa0, i32 4095)
  %v7_faac = icmp eq i32 %v4_faa4, -1
  store i32 %v4_faa4, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_faac, label %dec_label_pc_fb74, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %dec_label_pc_f9c4
  store i32 %v2_fac0, i32* %r1.global-to-local, align 4
  %v2_fac4 = add i32 %v4_faa4, %v2_fac0
  store i32 %v2_fac4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_facc = add i32 %v2_fac4, -4276
  %v5_facc = inttoptr i32 %v4_facc to i8*
  store i8 0, i8* %v5_facc, align 1
  %v1_fad4 = call i32 @function_12fa0(i32 10)
  %v0_fad8 = load i32, i32* @r4, align 4
  store i32 %v0_fad8, i32* %r1.global-to-local, align 4
  %v2_fae0 = inttoptr i32 %v0_fad8 to i32*
  %v3_fae0 = call i32 @function_12ebc(i32 10, i32* %v2_fae0)
  %v0_fae4 = load i32, i32* @r5, align 4
  %v1_fae4 = add i32 %v0_fae4, -1
  store i32 %v1_fae4, i32* @r1, align 4
  store i32 %v3_fae0, i32* %r2.global-to-local, align 4
  %v2_faec = load i32, i32* %stack_var_-8428, align 4
  %v3_faf0 = inttoptr i32 %v2_faec to i8*
  %v4_faf0 = call i32 @function_13c18(i8* %v3_faf0, i32 %v1_fae4, i32 %v3_fae0)
  %v7_faf4 = icmp eq i32 %v4_faf0, -1
  br i1 %v7_faf4, label %dec_label_pc_fb10, label %dec_label_pc_fafc

dec_label_pc_fafc:                                ; preds = %dec_label_pc_fabc
  %v2_fafc = load i32, i32* %stack_var_-8428, align 4
  %v1_fb00 = inttoptr i32 %v2_fafc to i8*
  %v2_fb00 = call i32 @function_14580(i8* %v1_fb00)
  %v0_fb04 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fb0c = call i32 @function_14384(i32 %v0_fb04, i32 9)
  br label %dec_label_pc_fb10

dec_label_pc_fb10:                                ; preds = %dec_label_pc_fabc, %dec_label_pc_fafc
  %v1_fb14 = call i32 @function_12ee8(i32 10)
  %v0_fb18 = call i32 @function_142dc()
  %v0_fb1c = load i32, i32* @r7, align 4
  %v9_fb1c = icmp eq i32 %v0_fb1c, %v0_fb18
  br i1 %v9_fb1c, label %dec_label_pc_fb48, label %dec_label_pc_fb24

dec_label_pc_fb24:                                ; preds = %dec_label_pc_fb10
  %v0_fb24 = call i32 @function_14308()
  %v0_fb28 = load i32, i32* @r7, align 4
  %v9_fb28 = icmp eq i32 %v0_fb28, %v0_fb24
  br i1 %v9_fb28, label %dec_label_pc_fb48, label %dec_label_pc_fb30

dec_label_pc_fb30:                                ; preds = %dec_label_pc_fb24
  store i32 ptrtoint (i32* @global_var_1f8ac.109 to i32), i32* %r2.global-to-local, align 4
  %v2_fb34 = load i32, i32* %stack_var_-8428, align 4
  %v2_fb38 = load i32, i32* @global_var_1f8ac.109, align 4
  store i32 %v2_fb38, i32* %r1.global-to-local, align 4
  %v2_fb3c = inttoptr i32 %v2_fb34 to i8*
  %v3_fb3c = call i32 @function_13ca4(i8* %v2_fb3c, i32 %v2_fb38)
  %v2_fb40 = icmp eq i32 %v3_fb3c, 0
  br i1 %v2_fb40, label %dec_label_pc_fb54, label %dec_label_pc_fb30.dec_label_pc_fb48_crit_edge

dec_label_pc_fb30.dec_label_pc_fb48_crit_edge:    ; preds = %dec_label_pc_fb30
  %v0_fb4c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fb48

dec_label_pc_fb48:                                ; preds = %dec_label_pc_fb30.dec_label_pc_fb48_crit_edge, %dec_label_pc_fb24, %dec_label_pc_fb10
  %v0_fb4c = phi i32 [ %v0_fb4c.pre, %dec_label_pc_fb30.dec_label_pc_fb48_crit_edge ], [ %v0_fb24, %dec_label_pc_fb24 ], [ %v0_fb18, %dec_label_pc_fb10 ]
  store i32 %v2_f9c8, i32* @r4, align 4
  store i32 %v0_fb4c, i32* @r5, align 4
  br label %dec_label_pc_f928.backedge

dec_label_pc_f928.backedge:                       ; preds = %dec_label_pc_f98c, %dec_label_pc_f984, %dec_label_pc_f938, %dec_label_pc_fb48, %dec_label_pc_fdf8, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_f95c, %dec_label_pc_fdf8 ], [ %v1_f95c, %dec_label_pc_fb48 ], [ %v1_f95c, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_f938 ], [ %v1_f95c, %dec_label_pc_f984 ], [ %v1_f95c, %dec_label_pc_f98c ]
  %v0_f928 = load i32, i32* @sl, align 4
  %v1_f92c = inttoptr i32 %v0_f928 to i32*
  %v2_f92c = call i32 @function_14788(i32* %v1_f92c)
  %v2_f930 = icmp eq i32 %v2_f92c, 0
  br i1 %v2_f930, label %dec_label_pc_f9b8, label %dec_label_pc_f938.preheader

dec_label_pc_fb54:                                ; preds = %dec_label_pc_fb30
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fb58 = load i32, i32* %stack_var_-8428, align 4
  %v2_fb5c = inttoptr i32 %v2_fb58 to i8*
  %v3_fb5c = call i32 @function_143b0(i8* %v2_fb5c, i32 0)
  %v7_fb60 = icmp eq i32 %v3_fb5c, -1
  store i32 %v3_fb5c, i32* @r4, align 4
  br i1 %v7_fb60, label %dec_label_pc_fe2c, label %dec_label_pc_fb6c

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_fb54, %dec_label_pc_fe2c
  %v0_fb6c = phi i32 [ %v3_fb5c, %dec_label_pc_fb54 ], [ %v0_fb6c.pre, %dec_label_pc_fe2c ]
  %v1_fb70 = call i32 @function_14284(i32 %v0_fb6c)
  br label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_f9c4, %dec_label_pc_fb6c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fb80 = call i32 @function_143b0(i8* %v2_f9f8, i32 0)
  %v7_fb84 = icmp eq i32 %v3_fb80, -1
  br i1 %v7_fb84, label %dec_label_pc_fdf8, label %dec_label_pc_fb90

dec_label_pc_fb90:                                ; preds = %dec_label_pc_fb74
  %v1_fb94 = call i32 @function_12fa0(i32 12)
  %v1_fb9c = call i32 @function_12fa0(i32 13)
  %v1_fba4 = call i32 @function_12fa0(i32 14)
  %v1_fbac = call i32 @function_12fa0(i32 15)
  %v1_fbb4 = call i32 @function_12fa0(i32 16)
  store i32 %v2_fbb8, i32* %r1.global-to-local, align 4
  %v3_fbc0 = call i32 @function_12ebc(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_fbc8, i32* %r1.global-to-local, align 4
  store i32 %v3_fbc0, i32* @r5, align 4
  %v3_fbd4 = call i32 @function_12ebc(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_fbdc, i32* %r1.global-to-local, align 4
  store i32 %v3_fbd4, i32* @r6, align 4
  %v3_fbe8 = call i32 @function_12ebc(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_fbf0, i32* %r1.global-to-local, align 4
  store i32 %v3_fbe8, i32* @sb, align 4
  %v3_fbfc = call i32 @function_12ebc(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_fbfc, i32* @fp, align 4
  store i32 %v2_fc08, i32* %r1.global-to-local, align 4
  %v3_fc10 = call i32 @function_12ebc(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_f830, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fc24114 = call i32 @function_1444c(i32 %v3_fb80, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_fc24114, 1
  br i1 %tmp217, label %dec_label_pc_fe3c, label %dec_label_pc_fc30

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fb90, %dec_label_pc_fc18.backedge
  %v0_fcb8105 = phi i32 [ %v4_fc24, %dec_label_pc_fc18.backedge ], [ %v4_fc24114, %dec_label_pc_fb90 ]
  store i32 %v2_f6e4, i32* %r3.global-to-local, align 4
  %v3_fc34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_fc34, i32* @r4, align 4
  %v5_fc3c = icmp slt i32 %v0_fcb8105, %v3_fc34
  br i1 %v5_fc3c, label %dec_label_pc_fc4c, label %dec_label_pc_fcf8.lr.ph

dec_label_pc_fcf8.lr.ph:                          ; preds = %dec_label_pc_fc30
  %v1_fcf070 = add i32 %v0_fcb8105, -1
  store i32 %v1_fcf070, i32* %r1.global-to-local, align 4
  %v0_fcf8.pre = load i32, i32* @r5, align 4
  %v1_fcfc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fcf8

dec_label_pc_fc4c:                                ; preds = %dec_label_pc_fcf0.backedge, %dec_label_pc_fc30
  %v3_fc50 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fc50, i32* @r4, align 4
  %v5_fc58 = icmp slt i32 %v0_fcb8105, %v3_fc50
  br i1 %v5_fc58, label %dec_label_pc_fc68, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_fc4c
  %v1_fd2479 = add i32 %v0_fcb8105, -1
  store i32 %v1_fd2479, i32* %r1.global-to-local, align 4
  %v2_fd2480 = icmp eq i32 %v0_fcb8105, 0
  br i1 %v2_fd2480, label %dec_label_pc_fc68, label %dec_label_pc_fd2c.lr.ph

dec_label_pc_fd2c.lr.ph:                          ; preds = %.thread28
  %v0_fd2c.pre = load i32, i32* @r6, align 4
  %v1_fd30.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fd2c

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fd24.backedge, %.thread28, %dec_label_pc_fc4c
  store i32 %v2_f6e4, i32* %r1.global-to-local, align 4
  %v3_fc6c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fc6c, i32* @r4, align 4
  %v5_fc74 = icmp slt i32 %v0_fcb8105, %v3_fc6c
  br i1 %v5_fc74, label %dec_label_pc_fc84, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_fc68
  %v1_fd5888 = add i32 %v0_fcb8105, -1
  store i32 %v1_fd5888, i32* %r1.global-to-local, align 4
  %v2_fd5889 = icmp eq i32 %v0_fcb8105, 0
  br i1 %v2_fd5889, label %dec_label_pc_fc84, label %dec_label_pc_fd60.lr.ph

dec_label_pc_fd60.lr.ph:                          ; preds = %.thread37
  %v0_fd60.pre = load i32, i32* @sb, align 4
  %v1_fd64.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fd60

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fd58.backedge, %.thread37, %dec_label_pc_fc68
  store i32 %v2_f6e4, i32* %r2.global-to-local, align 4
  %v3_fc88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_fc88, i32* @r4, align 4
  %v5_fc90 = icmp slt i32 %v0_fcb8105, %v3_fc88
  br i1 %v5_fc90, label %dec_label_pc_fca0, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_fc84
  %v1_fd8c97 = add i32 %v0_fcb8105, -1
  store i32 %v1_fd8c97, i32* %r1.global-to-local, align 4
  %v2_fd8c98 = icmp eq i32 %v0_fcb8105, 0
  br i1 %v2_fd8c98, label %dec_label_pc_fca0, label %dec_label_pc_fd94.lr.ph

dec_label_pc_fd94.lr.ph:                          ; preds = %.thread46
  %v0_fd94.pre = load i32, i32* @fp, align 4
  %v1_fd98.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fd94

dec_label_pc_fca0:                                ; preds = %dec_label_pc_fd8c.backedge, %.thread46, %dec_label_pc_fc84
  store i32 %v2_f6e4, i32* %r3.global-to-local, align 4
  %v3_fca4 = load i32, i32* %stack_var_-56, align 4
  %v5_fcac = icmp slt i32 %v0_fcb8105, %v3_fca4
  br i1 %v5_fcac, label %dec_label_pc_fc18.backedge, label %.thread52

dec_label_pc_fc18.backedge:                       ; preds = %dec_label_pc_fcdc, %.thread52, %dec_label_pc_fca0
  store i32 %v2_f830, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fc24 = call i32 @function_1444c(i32 %v3_fb80, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_fc24, 1
  br i1 %tmp218, label %dec_label_pc_fe3c, label %dec_label_pc_fc30

.thread52:                                        ; preds = %dec_label_pc_fca0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fcb8107 = icmp eq i32 %v0_fcb8105, 0
  br i1 %v2_fcb8107, label %dec_label_pc_fc18.backedge, label %dec_label_pc_fcc0.lr.ph

dec_label_pc_fcc0.lr.ph:                          ; preds = %.thread52
  %v1_fcc8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fcc0

dec_label_pc_fcc0:                                ; preds = %dec_label_pc_fcdc, %dec_label_pc_fcc0.lr.ph
  %v0_fcb8.in = phi i32 [ %v0_fcb8105, %dec_label_pc_fcc0.lr.ph ], [ %v0_fcb8, %dec_label_pc_fcdc ]
  %v0_fcdc = phi i32 [ 0, %dec_label_pc_fcc0.lr.ph ], [ %v1_fcdc, %dec_label_pc_fcdc ]
  %v0_fcd0 = phi i32 [ 0, %dec_label_pc_fcc0.lr.ph ], [ %v1_fcd0., %dec_label_pc_fcdc ]
  %v0_fcb8 = add i32 %v0_fcb8.in, -1
  store i32 %v3_fc10, i32* %r3.global-to-local, align 4
  %v2_fcc4 = add i32 %v0_fcd0, %v3_fc10
  %v3_fcc4 = inttoptr i32 %v2_fcc4 to i8*
  %v4_fcc4 = load i8, i8* %v3_fcc4, align 1
  %v6_fcc4 = zext i8 %v4_fcc4 to i32
  store i32 %v6_fcc4, i32* %r2.global-to-local, align 4
  %v2_fcc8 = add i32 %v0_fcdc, %v1_fcc8.pre
  %v3_fcc8 = inttoptr i32 %v2_fcc8 to i8*
  %v4_fcc8 = load i8, i8* %v3_fcc8, align 1
  %v6_fcc8 = zext i8 %v4_fcc8 to i32
  store i32 %v6_fcc8, i32* %r3.global-to-local, align 4
  %v9_fccc = icmp eq i8 %v4_fcc8, %v4_fcc4
  %v1_fcd0 = add i32 %v0_fcd0, 1
  %v1_fcd0. = select i1 %v9_fccc, i32 %v1_fcd0, i32 0
  store i32 %v1_fcd0., i32* %r1.global-to-local, align 4
  br i1 %v9_fccc, label %dec_label_pc_fdb4, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fdb4, %dec_label_pc_fcc0
  %v1_fcdc = add i32 %v0_fcdc, 1
  %v2_fcb8 = icmp eq i32 %v0_fcb8, 0
  br i1 %v2_fcb8, label %dec_label_pc_fc18.backedge, label %dec_label_pc_fcc0

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fcf8
  %v9_fce4 = icmp eq i32 %v3_fc34, %v1_fd04.
  br i1 %v9_fce4, label %dec_label_pc_fdbc, label %dec_label_pc_fcf0.backedge

dec_label_pc_fcf0.backedge:                       ; preds = %dec_label_pc_fcf8, %dec_label_pc_fce4
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_fcf0 = add i32 %v0_fcf0, -1
  store i32 %v1_fcf0, i32* %r1.global-to-local, align 4
  %v2_fcf0 = icmp eq i32 %v0_fcf0, 0
  br i1 %v2_fcf0, label %dec_label_pc_fc4c, label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fcf0.backedge, %dec_label_pc_fcf8.lr.ph
  %v0_fcf0 = phi i32 [ %v1_fcf070, %dec_label_pc_fcf8.lr.ph ], [ %v1_fcf0, %dec_label_pc_fcf0.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_fcf8.lr.ph ], [ %storemerge125, %dec_label_pc_fcf0.backedge ]
  %v0_fd04 = phi i32 [ 0, %dec_label_pc_fcf8.lr.ph ], [ %v1_fd04., %dec_label_pc_fcf0.backedge ]
  %v2_fcf8 = add i32 %v0_fd04, %v0_fcf8.pre
  %v3_fcf8 = inttoptr i32 %v2_fcf8 to i8*
  %v4_fcf8 = load i8, i8* %v3_fcf8, align 1
  %v6_fcf8 = zext i8 %v4_fcf8 to i32
  store i32 %v6_fcf8, i32* %r2.global-to-local, align 4
  %v2_fcfc = add i32 %storemerge125.in, %v1_fcfc.pre
  %v3_fcfc = inttoptr i32 %v2_fcfc to i8*
  %v4_fcfc = load i8, i8* %v3_fcfc, align 1
  %v6_fcfc = zext i8 %v4_fcfc to i32
  store i32 %v6_fcfc, i32* %r3.global-to-local, align 4
  %v9_fd00 = icmp eq i8 %v4_fcfc, %v4_fcf8
  %v1_fd04 = add i32 %v0_fd04, 1
  %v1_fd04. = select i1 %v9_fd00, i32 %v1_fd04, i32 0
  br i1 %v9_fd00, label %dec_label_pc_fce4, label %dec_label_pc_fcf0.backedge

dec_label_pc_fd18:                                ; preds = %dec_label_pc_fd2c
  %v9_fd18 = icmp eq i32 %v3_fc50, %v1_fd38.
  br i1 %v9_fd18, label %dec_label_pc_fdbc, label %dec_label_pc_fd24.backedge

dec_label_pc_fd24.backedge:                       ; preds = %dec_label_pc_fd2c, %dec_label_pc_fd18
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_fd24 = add i32 %v0_fd24, -1
  store i32 %v1_fd24, i32* %r1.global-to-local, align 4
  %v2_fd24 = icmp eq i32 %v0_fd24, 0
  br i1 %v2_fd24, label %dec_label_pc_fc68, label %dec_label_pc_fd2c

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd24.backedge, %dec_label_pc_fd2c.lr.ph
  %v0_fd24 = phi i32 [ %v1_fd2479, %dec_label_pc_fd2c.lr.ph ], [ %v1_fd24, %dec_label_pc_fd24.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_fd2c.lr.ph ], [ %storemerge124, %dec_label_pc_fd24.backedge ]
  %v0_fd38 = phi i32 [ 0, %dec_label_pc_fd2c.lr.ph ], [ %v1_fd38., %dec_label_pc_fd24.backedge ]
  %v2_fd2c = add i32 %v0_fd38, %v0_fd2c.pre
  %v3_fd2c = inttoptr i32 %v2_fd2c to i8*
  %v4_fd2c = load i8, i8* %v3_fd2c, align 1
  %v6_fd2c = zext i8 %v4_fd2c to i32
  store i32 %v6_fd2c, i32* %r2.global-to-local, align 4
  %v2_fd30 = add i32 %storemerge124.in, %v1_fd30.pre
  %v3_fd30 = inttoptr i32 %v2_fd30 to i8*
  %v4_fd30 = load i8, i8* %v3_fd30, align 1
  %v6_fd30 = zext i8 %v4_fd30 to i32
  store i32 %v6_fd30, i32* %r3.global-to-local, align 4
  %v9_fd34 = icmp eq i8 %v4_fd30, %v4_fd2c
  %v1_fd38 = add i32 %v0_fd38, 1
  %v1_fd38. = select i1 %v9_fd34, i32 %v1_fd38, i32 0
  br i1 %v9_fd34, label %dec_label_pc_fd18, label %dec_label_pc_fd24.backedge

dec_label_pc_fd4c:                                ; preds = %dec_label_pc_fd60
  %v9_fd4c = icmp eq i32 %v3_fc6c, %v1_fd6c.
  br i1 %v9_fd4c, label %dec_label_pc_fdbc, label %dec_label_pc_fd58.backedge

dec_label_pc_fd58.backedge:                       ; preds = %dec_label_pc_fd60, %dec_label_pc_fd4c
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_fd58 = add i32 %v0_fd58, -1
  store i32 %v1_fd58, i32* %r1.global-to-local, align 4
  %v2_fd58 = icmp eq i32 %v0_fd58, 0
  br i1 %v2_fd58, label %dec_label_pc_fc84, label %dec_label_pc_fd60

dec_label_pc_fd60:                                ; preds = %dec_label_pc_fd58.backedge, %dec_label_pc_fd60.lr.ph
  %v0_fd58 = phi i32 [ %v1_fd5888, %dec_label_pc_fd60.lr.ph ], [ %v1_fd58, %dec_label_pc_fd58.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_fd60.lr.ph ], [ %storemerge123, %dec_label_pc_fd58.backedge ]
  %v0_fd6c = phi i32 [ 0, %dec_label_pc_fd60.lr.ph ], [ %v1_fd6c., %dec_label_pc_fd58.backedge ]
  %v2_fd60 = add i32 %v0_fd6c, %v0_fd60.pre
  %v3_fd60 = inttoptr i32 %v2_fd60 to i8*
  %v4_fd60 = load i8, i8* %v3_fd60, align 1
  %v6_fd60 = zext i8 %v4_fd60 to i32
  store i32 %v6_fd60, i32* %r2.global-to-local, align 4
  %v2_fd64 = add i32 %storemerge123.in, %v1_fd64.pre
  %v3_fd64 = inttoptr i32 %v2_fd64 to i8*
  %v4_fd64 = load i8, i8* %v3_fd64, align 1
  %v6_fd64 = zext i8 %v4_fd64 to i32
  store i32 %v6_fd64, i32* %r3.global-to-local, align 4
  %v9_fd68 = icmp eq i8 %v4_fd64, %v4_fd60
  %v1_fd6c = add i32 %v0_fd6c, 1
  %v1_fd6c. = select i1 %v9_fd68, i32 %v1_fd6c, i32 0
  br i1 %v9_fd68, label %dec_label_pc_fd4c, label %dec_label_pc_fd58.backedge

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd94
  %v9_fd80 = icmp eq i32 %v3_fc88, %v1_fda0.
  br i1 %v9_fd80, label %dec_label_pc_fdbc, label %dec_label_pc_fd8c.backedge

dec_label_pc_fd8c.backedge:                       ; preds = %dec_label_pc_fd94, %dec_label_pc_fd80
  %storemerge = add i32 %storemerge.in, 1
  %v1_fd8c = add i32 %v0_fd8c, -1
  store i32 %v1_fd8c, i32* %r1.global-to-local, align 4
  %v2_fd8c = icmp eq i32 %v0_fd8c, 0
  br i1 %v2_fd8c, label %dec_label_pc_fca0, label %dec_label_pc_fd94

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fd8c.backedge, %dec_label_pc_fd94.lr.ph
  %v0_fd8c = phi i32 [ %v1_fd8c97, %dec_label_pc_fd94.lr.ph ], [ %v1_fd8c, %dec_label_pc_fd8c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_fd94.lr.ph ], [ %storemerge, %dec_label_pc_fd8c.backedge ]
  %v0_fda0 = phi i32 [ 0, %dec_label_pc_fd94.lr.ph ], [ %v1_fda0., %dec_label_pc_fd8c.backedge ]
  %v2_fd94 = add i32 %v0_fda0, %v0_fd94.pre
  %v3_fd94 = inttoptr i32 %v2_fd94 to i8*
  %v4_fd94 = load i8, i8* %v3_fd94, align 1
  %v6_fd94 = zext i8 %v4_fd94 to i32
  store i32 %v6_fd94, i32* %r2.global-to-local, align 4
  %v2_fd98 = add i32 %storemerge.in, %v1_fd98.pre
  %v3_fd98 = inttoptr i32 %v2_fd98 to i8*
  %v4_fd98 = load i8, i8* %v3_fd98, align 1
  %v6_fd98 = zext i8 %v4_fd98 to i32
  store i32 %v6_fd98, i32* %r3.global-to-local, align 4
  %v9_fd9c = icmp eq i8 %v4_fd98, %v4_fd94
  %v1_fda0 = add i32 %v0_fda0, 1
  %v1_fda0. = select i1 %v9_fd9c, i32 %v1_fda0, i32 0
  br i1 %v9_fd9c, label %dec_label_pc_fd80, label %dec_label_pc_fd8c.backedge

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_fcc0
  %v9_fdb4 = icmp eq i32 %v3_fca4, %v1_fcd0.
  br i1 %v9_fdb4, label %dec_label_pc_fdbc, label %dec_label_pc_fcdc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fce4, %dec_label_pc_fd18, %dec_label_pc_fd4c, %dec_label_pc_fd80, %dec_label_pc_fdb4
  %v1_fdc0 = call i32 @function_12ee8(i32 12)
  %v1_fdc8 = call i32 @function_12ee8(i32 13)
  %v1_fdd0 = call i32 @function_12ee8(i32 14)
  %v1_fdd8 = call i32 @function_12ee8(i32 15)
  %v1_fde0 = call i32 @function_12ee8(i32 16)
  %v1_fde8 = call i32 @function_14284(i32 %v3_fb80)
  %v0_fdec = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fdf4 = call i32 @function_14384(i32 %v0_fdec, i32 9)
  br label %dec_label_pc_fdf8

dec_label_pc_fdf8:                                ; preds = %dec_label_pc_fb74, %dec_label_pc_fe3c, %dec_label_pc_fdbc
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_fe04 = call i32 @function_13964(i32 %v2_f9f4, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_fe14 = call i32 @function_13964(i32 %v2_fa44, i32 64)
  %v1_fe1c = call i32 @function_156b4(i32 1)
  store i32 %v2_f9c8, i32* @r4, align 4
  %v0_fe24 = load i32, i32* @r7, align 4
  store i32 %v0_fe24, i32* @r5, align 4
  br label %dec_label_pc_f928.backedge

dec_label_pc_fe2c:                                ; preds = %dec_label_pc_fb54
  %v0_fe2c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_fe34 = call i32 @function_14384(i32 %v0_fe2c, i32 9)
  %v0_fb6c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fb6c

dec_label_pc_fe3c:                                ; preds = %dec_label_pc_fc18.backedge, %dec_label_pc_fb90
  %v1_fe40 = call i32 @function_12ee8(i32 12)
  %v1_fe48 = call i32 @function_12ee8(i32 13)
  %v1_fe50 = call i32 @function_12ee8(i32 14)
  %v1_fe58 = call i32 @function_12ee8(i32 15)
  %v1_fe60 = call i32 @function_12ee8(i32 16)
  %v1_fe68 = call i32 @function_14284(i32 %v3_fb80)
  br label %dec_label_pc_fdf8

; uselistorder directives
  uselistorder i32 %v1_fda0., { 1, 0 }
  uselistorder i1 %v9_fd9c, { 1, 0 }
  uselistorder i32 %v0_fda0, { 1, 0 }
  uselistorder i32 %v1_fd6c., { 1, 0 }
  uselistorder i1 %v9_fd68, { 1, 0 }
  uselistorder i32 %v0_fd6c, { 1, 0 }
  uselistorder i32 %v1_fd38., { 1, 0 }
  uselistorder i1 %v9_fd34, { 1, 0 }
  uselistorder i32 %v0_fd38, { 1, 0 }
  uselistorder i32 %v1_fd04., { 1, 0 }
  uselistorder i1 %v9_fd00, { 1, 0 }
  uselistorder i32 %v0_fd04, { 1, 0 }
  uselistorder i32 %v1_fcd0., { 1, 2, 0 }
  uselistorder i1 %v9_fccc, { 1, 0 }
  uselistorder i32 %v0_fcd0, { 1, 0 }
  uselistorder i32 %v0_fcdc, { 1, 0 }
  uselistorder i32 %v4_fc24, { 1, 0 }
  uselistorder i32 %v3_fb80, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_fb5c, { 1, 2, 0 }
  uselistorder i32 %v2_f92c, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_faa4, { 1, 2, 0 }
  uselistorder i32 %v2_f9ac, { 1, 0 }
  uselistorder i32 %v1_f95c, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_fa44, { 1, 0, 2 }
  uselistorder i32 %v2_f9f4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f8c0, { 1, 0 }
  uselistorder i32 %v3_f88c, { 2, 0, 1 }
  uselistorder i32 %v2_f830, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_f7bc, { 2, 1, 0 }
  uselistorder i32 %v3_f76c, { 1, 2, 0 }
  uselistorder i32 %v3_f71c, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_f6ac, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 4, 1, 5, 2, 6, 3 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 14, 65, 64, 13, 0, 63, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 29, 28, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 40, 41, 42, 3, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 }
  uselistorder i32 (i8*, i32, i32)* @function_13c18, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_14788, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_1468c, { 2, 1, 0 }
  uselistorder i32* @global_var_1f8ac.109, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1f8b0.101, { 0, 2, 1 }
  uselistorder label %dec_label_pc_fdf8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fdbc, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fc30, { 1, 0 }
  uselistorder label %dec_label_pc_fb74, { 1, 0 }
  uselistorder label %dec_label_pc_fb6c, { 1, 0 }
  uselistorder label %dec_label_pc_f928.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_fb10, { 1, 0 }
  uselistorder label %dec_label_pc_f938, { 1, 0 }
  uselistorder label %dec_label_pc_f938.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_f7e8, { 1, 0 }
  uselistorder label %dec_label_pc_f798, { 1, 0 }
  uselistorder label %dec_label_pc_f748, { 1, 0 }
}

define i32 @function_fe7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fe7c:
  store i32 ptrtoint (i32* @global_var_10004.111 to i32), i32* @global_var_1f680.113, align 4
  ret i32 %arg1
}

define i32 @function_fe94() local_unnamed_addr {
dec_label_pc_fe94:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fe94 = load i32, i32* @r4, align 4
  %v9_fe94 = load i32, i32* @r6, align 4
  %v15_fe94 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_feb0 = call i32 @function_14b80(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1f678.115 to i32), i32* @r6, align 4
  %v7_feb8 = icmp eq i32 %v3_feb0, -1
  store i32 %v3_feb0, i32* @global_var_1f678.115, align 4
  br i1 %v7_feb8, label %dec_label_pc_ff78, label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_fe94
  %v0_fec8 = load i32, i32* @r4, align 4
  %v6_fed8 = call i32 @function_14b50(i32 %v3_feb0, i32 %v0_fec8, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_fedc = load i32, i32* @global_var_1f678.115, align 4
  store i32 %v2_fedc, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_feec = call i32 @function_14194(i32 %v2_fedc, i32 3)
  %v1_fef4 = or i32 %v2_feec, 2048
  store i32 %v1_fef4, i32* @r2, align 4
  %v0_fef8 = load i32, i32* @r4, align 4
  %v2_fefc = call i32 @function_14194(i32 %v0_fef8, i32 4)
  store i32 ptrtoint (i8** @global_var_1f684.117 to i32), i32* @r8, align 4
  %v2_ff04 = load i8, i8* bitcast (i8** @global_var_1f684.117 to i8*), align 4
  %v2_ff08 = icmp eq i8 %v2_ff04, 0
  br i1 %v2_ff08, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_fec4
  br label %bb

.thread:                                          ; preds = %dec_label_pc_fec4
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ff40 = call i32 @function_14858()
  %v0_ff44 = load i32, i32* @r5, align 4
  %v2_ff44 = inttoptr i32 %v0_ff40 to i32*
  store i32 %v0_ff44, i32* %v2_ff44, align 4
  %v2_ff48 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ff48, i32* @r7, align 4
  store i32 %v0_ff40, i32* @r4, align 4
  %v2_ff54 = load i32, i32* @global_var_1f678.115, align 4
  %v3_ff5c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ff5c = call i32 @function_149b0(i32 %v2_ff54, %sockaddr* %v3_ff5c, i32 16)
  %v7_ff60 = icmp eq i32 %v4_ff5c, -1
  br i1 %v7_ff60, label %dec_label_pc_ff80, label %dec_label_pc_ff68

dec_label_pc_ff68:                                ; preds = %bb
  %v2_ff70 = load i32, i32* @global_var_1f678.115, align 4
  %v2_ff74 = call i32 @function_14a64(i32 %v2_ff70, i32 1)
  br label %dec_label_pc_ff78

dec_label_pc_ff78:                                ; preds = %dec_label_pc_fe94, %dec_label_pc_ff8c, %dec_label_pc_ff68
  %v20_ff7c = phi i32 [ %v3_feb0, %dec_label_pc_fe94 ], [ %v0_ffdc, %dec_label_pc_ff8c ], [ %v2_ff74, %dec_label_pc_ff68 ]
  store i32 %v3_fe94, i32* @r4, align 4
  store i32 %v9_fe94, i32* @r6, align 4
  store i32 %v15_fe94, i32* @r8, align 4
  ret i32 %v20_ff7c

dec_label_pc_ff80:                                ; preds = %bb
  %v0_ff80 = load i32, i32* @r4, align 4
  %v1_ff80 = inttoptr i32 %v0_ff80 to i32*
  %v2_ff80 = load i32, i32* %v1_ff80, align 4
  %v7_ff84 = icmp eq i32 %v2_ff80, 99
  br i1 %v7_ff84, label %dec_label_pc_ffe4, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ffe4, %bb21, %dec_label_pc_ff80
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_ffa4 = load i32, i32* @global_var_1f678.115, align 4
  %v4_ffbc = call i32 @function_149dc(i32 %v2_ffa4, %sockaddr* %v3_ff5c, i32 16)
  %v1_ffc4 = call i32 @function_156b4(i32 5)
  %v2_ffc8 = load i32, i32* @global_var_1f678.115, align 4
  %v1_ffcc = call i32 @function_14284(i32 %v2_ffc8)
  %v1_ffd8 = call i32 @function_f128(i32 58811)
  %v0_ffdc = call i32 @function_fe94()
  br label %dec_label_pc_ff78

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ff80
  %v2_ffe4 = load i8, i8* bitcast (i8** @global_var_1f684.117 to i8*), align 4
  %v3_ffe4 = zext i8 %v2_ffe4 to i32
  %v1_ffe8 = load i32, i32* @r5, align 4
  %v9_ffe8 = icmp eq i32 %v3_ffe4, %v1_ffe8
  br i1 %v9_ffe8, label %dec_label_pc_ff8c, label %bb21

bb21:                                             ; preds = %dec_label_pc_ffe4
  %v2_fff0 = trunc i32 %v1_ffe8 to i8
  store i8 %v2_fff0, i8* bitcast (i8** @global_var_1f684.117 to i8*), align 4
  br label %dec_label_pc_ff8c

; uselistorder directives
  uselistorder i32 %v3_feb0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_f128, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_14a64, { 3, 2, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_149b0, { 0, 1, 2, 3, 5, 4 }
  uselistorder i8* bitcast (i8** @global_var_1f684.117 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1f684.117, { 1, 0 }
  uselistorder label %dec_label_pc_ff8c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff78, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10004() local_unnamed_addr {
dec_label_pc_10004:
  %stack_var_-16 = alloca i32, align 4
  %v3_10004 = load i32, i32* @r4, align 4
  store i32 %v3_10004, i32* %stack_var_-16, align 4
  %v1_1000c = call i32 @function_12fa0(i32 3)
  %v3_10018 = call i32 @function_12ebc(i32 3, i32* null)
  %v1_1001c = inttoptr i32 %v3_10018 to i8*
  %v2_1001c = call i32 @function_10d78(i8* %v1_1001c)
  store i32 %v2_1001c, i32* @r5, align 4
  %v1_10028 = call i32 @function_12ee8(i32 3)
  %v0_1002c = load i32, i32* @r5, align 4
  %v2_1002c = icmp eq i32 %v0_1002c, 0
  store i32 ptrtoint (i8** @global_var_1f8b4.119 to i32), i32* @r6, align 4
  br i1 %v2_1002c, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_10004
  ret i32 %v1_10028

bb5:                                              ; preds = %dec_label_pc_10004
  %v1_10038 = add i32 %v0_1002c, 4
  %v2_10038 = inttoptr i32 %v1_10038 to i32*
  %v3_10038 = load i32, i32* %v2_10038, align 4
  store i32 %v3_10038, i32* @r4, align 4
  %v0_1003c = call i32 @function_10a94()
  %v0_10040 = load i32, i32* @r5, align 4
  %v1_10040 = inttoptr i32 %v0_10040 to i8*
  %v2_10040 = load i8, i8* %v1_10040, align 1
  %v3_10040 = zext i8 %v2_10040 to i32
  %v2_10044 = call i32 @function_13fe0(i32 %v0_1003c, i32 %v3_10040)
  %v0_10048 = load i32, i32* @r4, align 4
  %v4_10048 = mul i32 %v2_10044, 4
  %v5_10048 = add i32 %v0_10048, %v4_10048
  %v6_10048 = inttoptr i32 %v5_10048 to i32*
  %v7_10048 = load i32, i32* %v6_10048, align 4
  %v0_1004c = load i32, i32* @r5, align 4
  store i32 %v7_10048, i32* @global_var_1f8b8.120, align 4
  %v1_10054 = call i32 @function_10d54(i32 %v0_1004c)
  %v1_1005c = call i32 @function_12fa0(i32 4)
  %v3_10068 = call i32 @function_12ebc(i32 4, i32* null)
  %v4_10068 = inttoptr i32 %v3_10068 to i8*
  %v2_1006c = add i32 %v3_10068, 1
  %v3_1006c = inttoptr i32 %v2_1006c to i8*
  %v4_1006c = load i8, i8* %v3_1006c, align 1
  %v3_10070 = load i8, i8* %v4_10068, align 1
  store i8 %v4_1006c, i8* bitcast (i32* @global_var_1f8b7.121 to i8*), align 4
  store i8 %v3_10070, i8* bitcast (i32* @global_var_1f8b6.122 to i8*), align 4
  %v2_10088 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10088, i32* @r4, align 4
  %v1_1008c = call i32 @function_12ee8(i32 4)
  %v0_10090 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10090, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v1_10090 = load i32, i32* @r1, align 4
  %v2_10090 = inttoptr i32 %v1_10090 to i16*
  store i16 152, i16* %v2_10090, align 2
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_1008c

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_10094(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10094:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10094 = load i32, i32* @r4, align 4
  store i32 %v3_10094, i32* %stack_var_-36, align 4
  %v6_10094 = load i32, i32* @r5, align 4
  %v15_10094 = load i32, i32* @r8, align 4
  %v2_100a4 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_100a4, i32* @r4, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_100ac = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_100b4 = inttoptr i32 %v2_100ac to i8*
  %v2_100b4 = call i32 @function_14580(i8* %v1_100b4)
  store i32 %v2_100a4, i32* @r0, align 4
  %v1_100bc = call i32 @function_14bf4(i32 %v2_100a4)
  store i32 %v2_100a4, i32* @r0, align 4
  %v2_100c8 = call i32 @function_14bc4(i32 %v2_100a4, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_100d8 = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_100d8 = call i32 @function_14500(i32 0, %_TYPEDEF_sigset_t* %v3_100d8, i32 0)
  %v2_100e4 = call i32 @function_14c0c(i32 17, i32 1)
  %v2_100f0 = call i32 @function_14c0c(i32 5, i32 ptrtoint (i32* @global_var_fe7c.124 to i32))
  %v4_100fc = call i32 @function_143b0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_16ba0.126, i32 0, i32 0), i32 2)
  %v7_10100 = icmp eq i32 %v4_100fc, -1
  store i32 %v4_100fc, i32* @r4, align 4
  br i1 %v7_10100, label %dec_label_pc_10484, label %dec_label_pc_1010c

dec_label_pc_1010c:                               ; preds = %dec_label_pc_10484, %dec_label_pc_10094
  %v0_10120 = phi i32 [ %v4_1048c, %dec_label_pc_10484 ], [ %v4_100fc, %dec_label_pc_10094 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10124 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_10124, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_1012c = call i32 @function_14334(i32 %v0_10120, i32 -2147199228, i32 %v2_10124, i32 1, i32 1)
  %v0_10130 = load i32, i32* @r4, align 4
  %v1_10134 = call i32 @function_14284(i32 %v0_10130)
  br label %dec_label_pc_10138

dec_label_pc_10138:                               ; preds = %dec_label_pc_10484, %dec_label_pc_1010c
  %v2_1013c = call i32 @function_14258(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_16b50.23, i32 0, i32 0))
  %v0_10140 = call i32 @function_13b7c()
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* @fp, align 4
  store i32 ptrtoint (i8** @global_var_1f8b4.119 to i32), i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1015c = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1f8b7.121 to i8*), align 4
  store i32 902487617, i32* @global_var_1f8b8.120, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f8b6.122 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f8b5.131 to i8*), align 4
  store i32 %v0_10140, i32* @global_var_1f8a8.89, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16bf4.133 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 2, i8* bitcast (i8** @global_var_1f8b4.119 to i8*), align 4
  store i32 %v2_1015c, i32* @r0, align 4
  %v0_10188 = load i32, i32* @r6, align 4
  %v1_10188 = inttoptr i32 %v0_10188 to i32*
  %v2_10188 = load i32, i32* %v1_10188, align 4
  store i32 %v2_10188, i32* @r5, align 4
  %v4_1018c = call i32 @function_148a0(i32 %v2_1015c, i32 ptrtoint ([3 x i8]* @global_var_16bf4.133 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_16bf0.148 to i32), i32* @r4, align 4
  %v13_101ac = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_101ac, i32* @lr, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_12ee8.143 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_fe94.136 to i32), i32 ptrtoint (i32* @global_var_12fa0.138 to i32)), i32 77500), i32 ptrtoint (i32* @global_var_13058.141 to i32))), i32 161252), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fe7c.124 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fe7c.124 to i32), i32* %stack_var_-176, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_12ee8.143 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_fe94.136 to i32), i32 ptrtoint (i32* @global_var_12fa0.138 to i32)), i32 77500), i32 ptrtoint (i32* @global_var_13058.141 to i32))), i32 161252), i32 0), label %dec_label_pc_10388, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_10138
  %v3_101f4 = load i8, i8* %stack_var_-106, align 1
  %v4_101f4 = sext i8 %v3_101f4 to i32
  store i32 %v4_101f4, i32* %r2.global-to-local, align 4
  %v4_101f8 = zext i8 %tmp37 to i32
  store i32 %v4_101f8, i32* %r3.global-to-local, align 4
  %v0_101fc = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_10208 = inttoptr i32 %v0_101fc to i8*
  %v2_10208 = call i32 @function_138c4(i8* %v1_10208)
  %v0_10210 = load i32, i32* @r7, align 4
  %v2_10214 = call i32 @function_140ac(i32 %v0_10210, i32 %v2_10208)
  %v4_10218 = zext i8 %tmp35 to i32
  store i32 %v4_10218, i32* %r2.global-to-local, align 4
  %v4_1021c = zext i8 %tmp34 to i32
  store i32 %v4_1021c, i32* %r3.global-to-local, align 4
  %v0_10220 = load i32, i32* @r5, align 4
  %v2_10220 = add i32 %v0_10220, %v2_10214
  %v3_10220 = inttoptr i32 %v2_10220 to i8*
  %v4_10220 = load i8, i8* %v3_10220, align 1
  %v6_10220 = zext i8 %v4_10220 to i32
  store i32 %v6_10220, i32* %r4.global-to-local, align 4
  %v1_10230 = inttoptr i32 %v0_10220 to i8*
  %v2_10230 = call i32 @function_138c4(i8* %v1_10230)
  %v2_1023c = call i32 @function_140ac(i32 4, i32 %v2_10230)
  %v1_10240 = sub nuw nsw i32 -1, %v6_10220
  store i32 %v1_10240, i32* %r4.global-to-local, align 4
  %v0_10244 = load i32, i32* @r5, align 4
  %v2_10244 = add i32 %v0_10244, %v2_1023c
  %v3_10244 = inttoptr i32 %v2_10244 to i8*
  %v4_10244 = load i8, i8* %v3_10244, align 1
  %v6_10244 = zext i8 %v4_10244 to i32
  %v4_10248 = zext i8 %tmp31 to i32
  store i32 %v4_10248, i32* %r2.global-to-local, align 4
  %v1_10250 = sub nuw nsw i32 -82, %v6_10220
  %v1_10254 = sub nuw nsw i32 -1, %v6_10244
  store i32 %v1_10254, i32* %r3.global-to-local, align 4
  %v1_1025c = urem i32 %v1_10250, 256
  %v2_10260 = add nsw i32 %v1_1025c, %v1_10254
  store i32 %v2_10260, i32* %r4.global-to-local, align 4
  %v1_1026c = inttoptr i32 %v0_10244 to i8*
  %v2_1026c = call i32 @function_138c4(i8* %v1_1026c)
  %v2_10278 = call i32 @function_140ac(i32 6, i32 %v2_1026c)
  %v0_1027c = load i32, i32* @r5, align 4
  %v2_1027c = add i32 %v0_1027c, %v2_10278
  %v3_1027c = inttoptr i32 %v2_1027c to i8*
  %v4_1027c = load i8, i8* %v3_1027c, align 1
  %v6_1027c = zext i8 %v4_1027c to i32
  %v4_10280 = zext i8 %tmp27 to i32
  store i32 %v4_10280, i32* %r2.global-to-local, align 4
  %v1_10288 = sub nuw nsw i32 -1, %v6_1027c
  store i32 %v1_10288, i32* %r3.global-to-local, align 4
  %v0_10290 = load i32, i32* %r4.global-to-local, align 4
  %v1_10290 = urem i32 %v0_10290, 256
  %v2_10294 = add nsw i32 %v1_10290, %v1_10288
  store i32 %v2_10294, i32* %r4.global-to-local, align 4
  %v1_102a0 = inttoptr i32 %v0_1027c to i8*
  %v2_102a0 = call i32 @function_138c4(i8* %v1_102a0)
  %v2_102ac = call i32 @function_140ac(i32 8, i32 %v2_102a0)
  %v0_102b0 = load i32, i32* @r5, align 4
  %v2_102b0 = add i32 %v0_102b0, %v2_102ac
  %v3_102b0 = inttoptr i32 %v2_102b0 to i8*
  %v4_102b0 = load i8, i8* %v3_102b0, align 1
  %v6_102b0 = zext i8 %v4_102b0 to i32
  %v4_102b4 = zext i8 %tmp23 to i32
  store i32 %v4_102b4, i32* %r2.global-to-local, align 4
  %v1_102bc = sub nuw nsw i32 -1, %v6_102b0
  store i32 %v1_102bc, i32* %r3.global-to-local, align 4
  %v0_102c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_102c4 = urem i32 %v0_102c4, 256
  %v2_102c8 = add nsw i32 %v1_102c4, %v1_102bc
  store i32 %v2_102c8, i32* %r4.global-to-local, align 4
  %v1_102d4 = inttoptr i32 %v0_102b0 to i8*
  %v2_102d4 = call i32 @function_138c4(i8* %v1_102d4)
  %v2_102e0 = call i32 @function_140ac(i32 10, i32 %v2_102d4)
  %v0_102e4 = load i32, i32* @r5, align 4
  %v2_102e4 = add i32 %v0_102e4, %v2_102e0
  %v3_102e4 = inttoptr i32 %v2_102e4 to i8*
  %v4_102e4 = load i8, i8* %v3_102e4, align 1
  %v6_102e4 = zext i8 %v4_102e4 to i32
  %v4_102e8 = zext i8 %tmp19 to i32
  store i32 %v4_102e8, i32* %r2.global-to-local, align 4
  %v1_102f0 = sub nuw nsw i32 -1, %v6_102e4
  store i32 %v1_102f0, i32* %r3.global-to-local, align 4
  %v0_102f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_102f8 = urem i32 %v0_102f8, 256
  %v2_102fc = add nsw i32 %v1_102f8, %v1_102f0
  store i32 %v2_102fc, i32* %r4.global-to-local, align 4
  %v1_10308 = inttoptr i32 %v0_102e4 to i8*
  %v2_10308 = call i32 @function_138c4(i8* %v1_10308)
  %v2_10314 = call i32 @function_140ac(i32 12, i32 %v2_10308)
  %v0_10318 = load i32, i32* @r5, align 4
  %v2_10318 = add i32 %v0_10318, %v2_10314
  %v3_10318 = inttoptr i32 %v2_10318 to i8*
  %v4_10318 = load i8, i8* %v3_10318, align 1
  %v6_10318 = zext i8 %v4_10318 to i32
  %v0_1031c = load i32, i32* %r4.global-to-local, align 4
  %v1_1031c = urem i32 %v0_1031c, 256
  %v1_10320 = sub nuw nsw i32 -1, %v6_10318
  store i32 %v1_10320, i32* %r3.global-to-local, align 4
  %v2_10324 = add nsw i32 %v1_1031c, %v1_10320
  store i32 %v2_10324, i32* %r4.global-to-local, align 4
  %fold = add i32 %v0_1031c, %v1_10320
  %v1_1032c = urem i32 %fold, 256
  %v2_10330 = call i32 @function_13fe0(i32 %v1_1032c, i32 9)
  %v1_10334 = load i32, i32* @r7, align 4
  %v6_10334 = shl i32 %v2_10330, %v1_10334
  %v2_1033c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1033c, i32* %r2.global-to-local, align 4
  %v1_10340 = and i32 %v6_10334, 1020
  %v2_10348 = add i32 %v1_10340, %v2_1033c
  %v2_1034c = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_1034c, i32* @r4, align 4
  store i32 66392, i32* @lr, align 4
  %v1_10354 = add i32 %v2_10348, -172
  %v2_10354 = inttoptr i32 %v1_10354 to i32*
  %v3_10354 = load i32, i32* %v2_10354, align 4
  call void @__pseudo_branch(i32 %v3_10354)
  %v0_10358 = load i32, i32* @r5, align 4
  %v2_10360 = inttoptr i32 %v0_10358 to i8*
  %v3_10360 = call i32 @function_13ca4(i8* %v2_10360, i32 %v2_1034c)
  store i32 %v3_10360, i32* @r5, align 4
  %v2_10370 = call i32 @function_13964(i32 %v2_1015c, i32 18)
  %v2_1037c = call i32 @function_13964(i32 %v2_1034c, i32 12)
  %v0_10380 = load i32, i32* @r5, align 4
  %v1_10380 = urem i32 %v0_10380, 256
  %v2_10380 = icmp eq i32 %v1_10380, 0
  br i1 %v2_10380, label %dec_label_pc_10388, label %dec_label_pc_104a0

dec_label_pc_10388:                               ; preds = %dec_label_pc_101f4, %dec_label_pc_10138, %dec_label_pc_104a0
  %v2_1038c = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_1038c, i32* @sl, align 4
  %v0_10390 = call i32 @function_fe94()
  %v1_10394 = call i32 @function_10aec(i32 %v0_10390)
  %v2_103a0 = call i32 @function_13964(i32 %v2_1038c, i32 32)
  %v0_103a4 = load i32, i32* @r8, align 4
  %v7_103a4 = icmp eq i32 %v0_103a4, 2
  br i1 %v7_103a4, label %dec_label_pc_104ac, label %dec_label_pc_103ac

dec_label_pc_103ac:                               ; preds = %dec_label_pc_104ac, %dec_label_pc_10388, %dec_label_pc_104bc
  %v0_103ac = call i32 @function_10a94()
  %v1_103b0 = mul i32 %v0_103ac, 4
  %v3_103b4 = and i32 %v1_103b0, 12
  %v2_103bc = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_103bc, i32* @r5, align 4
  %v1_103c0 = add nuw nsw i32 %v3_103b4, 12
  store i32 %v1_103c0, i32* @r4, align 4
  %v2_103cc = call i32 @function_10b48(i32 %v2_103bc, i32 %v1_103c0)
  %v2_103d4 = ptrtoint i32* %stack_var_-36 to i32
  %v1_103d8 = load i32, i32* @r4, align 4
  %v2_103d8 = add i32 %v1_103d8, %v2_103d4
  store i32 %v2_103d8, i32* %r3.global-to-local, align 4
  %v0_103dc = load i32, i32* @r6, align 4
  %v1_103dc = inttoptr i32 %v0_103dc to i32*
  %v2_103dc = load i32, i32* %v1_103dc, align 4
  store i32 %v2_103dc, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_103e4 = add i32 %v2_103d8, -134
  %v4_103e4 = inttoptr i32 %v3_103e4 to i8*
  store i8 0, i8* %v4_103e4, align 1
  %v2_103ec = inttoptr i32 %v2_103dc to i8*
  %v3_103ec = call i32 @function_138ec(i8* %v2_103ec, i32 %v2_103bc)
  %v0_103f0 = call i32 @function_10a94()
  %v2_103f8 = call i32 @function_13fe0(i32 %v0_103f0, i32 6)
  %v3_103fc = mul i32 %v2_103f8, 4
  %v1_10400 = add i32 %v3_103fc, 12
  store i32 %v1_10400, i32* @r4, align 4
  %v2_1040c = call i32 @function_10b48(i32 %v2_103bc, i32 %v1_10400)
  store i32 %v2_103d4, i32* %r2.global-to-local, align 4
  %v1_10418 = load i32, i32* @r4, align 4
  %v2_10418 = add i32 %v1_10418, %v2_103d4
  store i32 %v2_10418, i32* %r3.global-to-local, align 4
  %v0_1041c = load i32, i32* @r6, align 4
  %v1_1041c = trunc i32 %v0_1041c to i8
  %v3_1041c = add i32 %v2_10418, -134
  %v4_1041c = inttoptr i32 %v3_1041c to i8*
  store i8 %v1_1041c, i8* %v4_1041c, align 1
  %v4_10428 = call i32 @function_1441c(i32 15, i32 %v2_103bc, i32 %v2_103d4, i32 %v2_10418)
  %v1_10430 = call i32 @function_12fa0(i32 2)
  %v3_1043c = call i32 @function_12ebc(i32 2, i32* nonnull %stack_var_-44)
  %v3_10440 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_10440, i32* %r2.global-to-local, align 4
  %v3_1044c = inttoptr i32 %v3_1043c to i32*
  %v4_1044c = call i32 @function_145ac(i32 1, i32* %v3_1044c, i32 %v3_10440)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1045c = call i32 @function_145ac(i32 1, i32* nonnull @global_var_16bc4.150, i32 1)
  %v1_10464 = call i32 @function_12ee8(i32 2)
  %v0_10468 = call i32 @function_142b0()
  %v1_1046c = load i32, i32* @r6, align 4
  %v7_10470 = icmp sgt i32 %v0_10468, %v1_1046c
  br i1 %v7_10470, label %dec_label_pc_10474, label %dec_label_pc_104e4

dec_label_pc_10474:                               ; preds = %dec_label_pc_103ac
  %v2_10480 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10480, i32* %r4.global-to-local, align 4
  store i32 %v6_10094, i32* %r5.global-to-local, align 4
  store i32 %v15_10094, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_10484:                               ; preds = %dec_label_pc_10094
  %v4_1048c = call i32 @function_143b0(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_16bb0.152, i32 0, i32 0), i32 2)
  %v3_10490 = icmp eq i32 %v4_1048c, -1
  store i32 %v4_1048c, i32* @r4, align 4
  br i1 %v3_10490, label %dec_label_pc_10138, label %dec_label_pc_1010c

dec_label_pc_104a0:                               ; preds = %dec_label_pc_101f4
  %v1_104a4 = call i32 @function_14bac(i32 5)
  br label %dec_label_pc_10388

dec_label_pc_104ac:                               ; preds = %dec_label_pc_10388
  %v0_104ac = load i32, i32* @r6, align 4
  %v1_104ac = add i32 %v0_104ac, 4
  %v2_104ac = inttoptr i32 %v1_104ac to i32*
  %v3_104ac = load i32, i32* %v2_104ac, align 4
  %v1_104b0 = inttoptr i32 %v3_104ac to i8*
  %v2_104b0 = call i32 @function_138c4(i8* %v1_104b0)
  %v8_104b8 = icmp sgt i32 %v2_104b0, 31
  br i1 %v8_104b8, label %dec_label_pc_103ac, label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_104ac
  %v0_104bc = load i32, i32* @r6, align 4
  %v1_104bc = add i32 %v0_104bc, 4
  %v2_104bc = inttoptr i32 %v1_104bc to i32*
  %v3_104bc = load i32, i32* %v2_104bc, align 4
  store i32 %v2_1038c, i32* @r0, align 4
  %v2_104c4 = bitcast i32* %stack_var_-138 to i8*
  %v3_104c4 = call i32 @function_138ec(i8* %v2_104c4, i32 %v3_104bc)
  %v0_104c8 = load i32, i32* @r6, align 4
  %v1_104c8 = add i32 %v0_104c8, 4
  %v2_104c8 = inttoptr i32 %v1_104c8 to i32*
  %v3_104c8 = load i32, i32* %v2_104c8, align 4
  store i32 %v3_104c8, i32* %r4.global-to-local, align 4
  %v1_104d0 = inttoptr i32 %v3_104c8 to i8*
  %v2_104d0 = call i32 @function_138c4(i8* %v1_104d0)
  %v2_104dc = call i32 @function_13964(i32 %v3_104c8, i32 %v2_104d0)
  br label %dec_label_pc_103ac

dec_label_pc_104e4:                               ; preds = %dec_label_pc_103ac
  %v1_104e4 = call i32 @function_144d4(i32 %v0_10468)
  %v0_104ec = load i32, i32* @r6, align 4
  %v1_104f0 = call i32 @function_14284(i32 %v0_104ec)
  %v1_104f8 = call i32 @function_14284(i32 1)
  %v1_10500 = call i32 @function_14284(i32 2)
  %v2_10504 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_10504, i32* @r7, align 4
  %v1_10508 = call i32 @function_a558(i32 %v1_10500)
  store i32 ptrtoint (i32* @global_var_1f67c.154 to i32), i32* @sb, align 4
  %v1_10510 = call i32 @function_f694(i32 %v1_10508)
  %v0_10514 = call i32 @function_11550()
  %v0_10518 = load i32, i32* @r6, align 4
  %v2_10520 = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_10520, i32* @r6, align 4
  %v2_10524 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_10524, i32* @r7, align 4
  %v2_10604 = ptrtoint i32* %stack_var_-60 to i32
  %v5_108c0 = bitcast i8* %stack_var_-38 to i32*
  %v2_107e8 = ptrtoint i32* %stack_var_-1616 to i32
  %v2_108d8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_108dc = ptrtoint i32* %stack_var_-52 to i32
  %v1_1096c = bitcast i32* %stack_var_-138 to i8*
  %v5_10940 = bitcast i32* %stack_var_-88 to %sockaddr*
  %v1_10958 = sub i32 0, %v1_104e4
  br label %dec_label_pc_10528

dec_label_pc_10528:                               ; preds = %dec_label_pc_10528.backedge, %dec_label_pc_104e4
  %v2_1053087 = phi i32 [ %v2_10520, %dec_label_pc_104e4 ], [ %v2_1053087.pre, %dec_label_pc_10528.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_104e4 ], [ %stack_var_-37.0.be, %dec_label_pc_10528.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_10518, %dec_label_pc_104e4 ], [ %stack_var_-1620.0.be, %dec_label_pc_10528.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_1053089 = inttoptr i32 %v2_1053087 to i32*
  store i32 0, i32* %v4_1053089, align 4
  %v0_1053490 = load i32, i32* %r3.global-to-local, align 4
  %v1_1053491 = add i32 %v0_1053490, 4
  store i32 %v1_1053491, i32* %r3.global-to-local, align 4
  %v7_1053892 = icmp eq i32 %v1_1053491, 128
  br i1 %v7_1053892, label %dec_label_pc_10540, label %dec_label_pc_10530.dec_label_pc_10530_crit_edge

dec_label_pc_10530.dec_label_pc_10530_crit_edge:  ; preds = %dec_label_pc_10528, %dec_label_pc_10530.dec_label_pc_10530_crit_edge
  %v1_1053493 = phi i32 [ %v1_10534, %dec_label_pc_10530.dec_label_pc_10530_crit_edge ], [ %v1_1053491, %dec_label_pc_10528 ]
  %v0_10530.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_10530 = load i32, i32* @r6, align 4
  %v3_10530 = add i32 %v2_10530, %v1_1053493
  %v4_10530 = inttoptr i32 %v3_10530 to i32*
  store i32 %v0_10530.pre, i32* %v4_10530, align 4
  %v0_10534 = load i32, i32* %r3.global-to-local, align 4
  %v1_10534 = add i32 %v0_10534, 4
  store i32 %v1_10534, i32* %r3.global-to-local, align 4
  %v7_10538 = icmp eq i32 %v1_10534, 128
  br i1 %v7_10538, label %dec_label_pc_10540, label %dec_label_pc_10530.dec_label_pc_10530_crit_edge

dec_label_pc_10540:                               ; preds = %dec_label_pc_10530.dec_label_pc_10530_crit_edge, %dec_label_pc_10528
  %v0_10540 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10540, i32* %r3.global-to-local, align 4
  store i32 %v0_10540, i32* @r4, align 4
  %v2_1054894 = load i32, i32* @r7, align 4
  %v3_1054895 = add i32 %v2_1054894, %v0_10540
  %v4_1054896 = inttoptr i32 %v3_1054895 to i32*
  store i32 %v0_10540, i32* %v4_1054896, align 4
  %v0_1054c97 = load i32, i32* %r3.global-to-local, align 4
  %v1_1054c98 = add i32 %v0_1054c97, 4
  store i32 %v1_1054c98, i32* %r3.global-to-local, align 4
  %v7_1055099 = icmp eq i32 %v1_1054c98, 128
  br i1 %v7_1055099, label %dec_label_pc_10558, label %dec_label_pc_10548.dec_label_pc_10548_crit_edge

dec_label_pc_10548.dec_label_pc_10548_crit_edge:  ; preds = %dec_label_pc_10540, %dec_label_pc_10548.dec_label_pc_10548_crit_edge
  %v1_1054c100 = phi i32 [ %v1_1054c, %dec_label_pc_10548.dec_label_pc_10548_crit_edge ], [ %v1_1054c98, %dec_label_pc_10540 ]
  %v0_10548.pre = load i32, i32* @r4, align 4
  %v2_10548 = load i32, i32* @r7, align 4
  %v3_10548 = add i32 %v2_10548, %v1_1054c100
  %v4_10548 = inttoptr i32 %v3_10548 to i32*
  store i32 %v0_10548.pre, i32* %v4_10548, align 4
  %v0_1054c = load i32, i32* %r3.global-to-local, align 4
  %v1_1054c = add i32 %v0_1054c, 4
  store i32 %v1_1054c, i32* %r3.global-to-local, align 4
  %v7_10550 = icmp eq i32 %v1_1054c, 128
  br i1 %v7_10550, label %dec_label_pc_10558, label %dec_label_pc_10548.dec_label_pc_10548_crit_edge

dec_label_pc_10558:                               ; preds = %dec_label_pc_10548.dec_label_pc_10548_crit_edge, %dec_label_pc_10540
  store i32 ptrtoint (i32* @global_var_1f678.115 to i32), i32* %r3.global-to-local, align 4
  %v2_1055c = load i32, i32* @global_var_1f678.115, align 4
  %v7_10560 = icmp eq i32 %v2_1055c, -1
  br i1 %v7_10560, label %dec_label_pc_10590, label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10558
  %v3_10568 = udiv i32 %v2_1055c, 32
  %v3_10570 = mul nuw nsw i32 %v3_10568, 4
  %v2_10578 = add i32 %v3_10570, %v2_103d4
  store i32 %v2_10578, i32* %r3.global-to-local, align 4
  %v1_1057c = add i32 %v2_10578, -556
  %v2_1057c = inttoptr i32 %v1_1057c to i32*
  %v3_1057c = load i32, i32* %v2_1057c, align 4
  %v1_10580 = urem i32 %v2_1055c, 32
  %v7_10588 = shl i32 1, %v1_10580
  %v8_10588 = or i32 %v3_1057c, %v7_10588
  store i32 %v8_10588, i32* %r2.global-to-local, align 4
  store i32 %v8_10588, i32* %v2_1057c, align 4
  br label %dec_label_pc_10590

dec_label_pc_10590:                               ; preds = %dec_label_pc_10558, %dec_label_pc_10568
  %v2_10590 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 %v2_10590, i32* %r3.global-to-local, align 4
  %v7_10594 = icmp eq i32 %v2_10590, -1
  store i32 ptrtoint (i32* @global_var_1f67c.154 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_10594, label %dec_label_pc_10838, label %dec_label_pc_105a0

dec_label_pc_105a0:                               ; preds = %dec_label_pc_10838, %dec_label_pc_10590, %.thread
  store i32 ptrtoint (i8** @global_var_1f818.157 to i32), i32* %r2.global-to-local, align 4
  %v2_105a4 = load i8, i8* bitcast (i8** @global_var_1f818.157 to i8*), align 4
  %v3_105a4 = zext i8 %v2_105a4 to i32
  store i32 %v3_105a4, i32* %r3.global-to-local, align 4
  %v2_105a8 = icmp eq i8 %v2_105a4, 0
  %v2_106f8 = load i32, i32* @global_var_1f67c.154, align 4
  %v3_10700 = udiv i32 %v2_106f8, 32
  br i1 %v2_105a8, label %dec_label_pc_106f8, label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_105a0
  %v3_105bc = mul nuw nsw i32 %v3_10700, 4
  %v2_105c4 = add i32 %v3_105bc, %v2_103d4
  store i32 %v2_105c4, i32* %r3.global-to-local, align 4
  %v1_105c8 = add i32 %v2_105c4, -300
  %v2_105c8 = inttoptr i32 %v1_105c8 to i32*
  %v3_105c8 = load i32, i32* %v2_105c8, align 4
  %v1_105cc = urem i32 %v2_106f8, 32
  %v7_105d4 = shl i32 1, %v1_105cc
  %v8_105d4 = or i32 %v3_105c8, %v7_105d4
  store i32 %v8_105d4, i32* %r2.global-to-local, align 4
  store i32 %v8_105d4, i32* %v2_105c8, align 4
  br label %dec_label_pc_105dc

dec_label_pc_105dc:                               ; preds = %dec_label_pc_106f8, %dec_label_pc_105b0
  %v2_105e0 = load i32, i32* @global_var_1f678.115, align 4
  %v2_105e4 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 %v2_105e4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_105f0 = icmp slt i32 %v2_105e0, %v2_105e4
  br i1 %v5_105f0, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_105dc
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_105dc, %bb
  %v0_10600 = phi i32 [ %v2_105e0, %dec_label_pc_105dc ], [ %v2_105e4, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_10600 = add i32 %v0_10600, 1
  store i32 %v2_10524, i32* %r2.global-to-local, align 4
  %v5_10618 = call i32 @function_144a4(i32 %v1_10600, i32 %v2_10520, i32 %v2_10524, i32 0, i32 %v2_10604)
  %v8_1061c = icmp eq i32 %v5_10618, -1
  store i32 %v5_10618, i32* %r3.global-to-local, align 4
  br i1 %v8_1061c, label %dec_label_pc_10528.backedge, label %dec_label_pc_10628

dec_label_pc_10628:                               ; preds = %bb84
  %v6_10618 = trunc i32 %v5_10618 to i8
  %v3_10628 = icmp eq i8 %v6_10618, 0
  br i1 %v3_10628, label %dec_label_pc_10630, label %dec_label_pc_10658

dec_label_pc_10630:                               ; preds = %dec_label_pc_10628
  store i8 0, i8* %stack_var_-38, align 1
  %v2_10640 = call i32 @function_140ac(i32 %stack_var_-1620.0, i32 6)
  %v2_10648 = icmp eq i32 %v2_10640, 0
  %v1_1064c = add i32 %stack_var_-1620.0, 1
  store i32 %v1_1064c, i32* %r2.global-to-local, align 4
  br i1 %v2_10648, label %dec_label_pc_108a8, label %dec_label_pc_10658

dec_label_pc_10658:                               ; preds = %dec_label_pc_10628, %dec_label_pc_10630, %dec_label_pc_108a8
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_108a8 ], [ 0, %dec_label_pc_10630 ], [ %stack_var_-37.0, %dec_label_pc_10628 ]
  %stack_var_-1620.1 = phi i32 [ %v1_1064c, %dec_label_pc_108a8 ], [ %v1_1064c, %dec_label_pc_10630 ], [ %stack_var_-1620.0, %dec_label_pc_10628 ]
  store i32 ptrtoint (i32* @global_var_1f678.115 to i32), i32* %r3.global-to-local, align 4
  %v2_1065c = load i32, i32* @global_var_1f678.115, align 4
  %v7_10660 = icmp eq i32 %v2_1065c, -1
  br i1 %v7_10660, label %dec_label_pc_10690, label %dec_label_pc_10668

dec_label_pc_10668:                               ; preds = %dec_label_pc_10658
  %v3_10668 = udiv i32 %v2_1065c, 32
  %v3_10670 = mul nuw nsw i32 %v3_10668, 4
  store i32 %v2_103d4, i32* @ip, align 4
  %v2_10678 = add i32 %v3_10670, %v2_103d4
  store i32 %v2_10678, i32* %r3.global-to-local, align 4
  %v1_1067c = add i32 %v2_10678, -556
  %v2_1067c = inttoptr i32 %v1_1067c to i32*
  %v3_1067c = load i32, i32* %v2_1067c, align 4
  %v1_10680 = urem i32 %v2_1065c, 32
  %v6_10684 = lshr i32 %v3_1067c, %v1_10680
  store i32 %v6_10684, i32* %r2.global-to-local, align 4
  %v1_10688 = urem i32 %v6_10684, 2
  %v2_10688 = icmp eq i32 %v1_10688, 0
  br i1 %v2_10688, label %dec_label_pc_10690, label %dec_label_pc_10928

dec_label_pc_10690:                               ; preds = %dec_label_pc_10668, %dec_label_pc_10658
  store i32 ptrtoint (i8** @global_var_1f818.157 to i32), i32* %r3.global-to-local, align 4
  %v2_10694 = load i8, i8* bitcast (i8** @global_var_1f818.157 to i8*), align 4
  %v3_10694 = zext i8 %v2_10694 to i32
  store i32 %v3_10694, i32* @r4, align 4
  %v2_10698 = icmp eq i8 %v2_10694, 0
  %v2_10728 = load i32, i32* @global_var_1f67c.154, align 4
  br i1 %v2_10698, label %dec_label_pc_10728, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10690
  %v3_106a8 = udiv i32 %v2_10728, 32
  %v3_106b0 = mul nuw nsw i32 %v3_106a8, 4
  %v2_106b4 = add i32 %v3_106b0, %v2_103d4
  store i32 %v2_106b4, i32* %r3.global-to-local, align 4
  %v1_106b8 = add i32 %v2_106b4, -300
  %v2_106b8 = inttoptr i32 %v1_106b8 to i32*
  %v3_106b8 = load i32, i32* %v2_106b8, align 4
  %v1_106bc = urem i32 %v2_10728, 32
  %v6_106c0 = lshr i32 %v3_106b8, %v1_106bc
  store i32 %v6_106c0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f818.157 to i32), i32* %r3.global-to-local, align 4
  %v1_106cc = urem i32 %v6_106c0, 2
  %v2_106cc = icmp eq i32 %v1_106cc, 0
  store i8 0, i8* bitcast (i8** @global_var_1f818.157 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1f67c.154 to i32), i32* @r5, align 4
  br i1 %v2_106cc, label %dec_label_pc_106dc, label %dec_label_pc_108c8

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106a0
  store i32 67300, i32* @lr, align 4
  %v1_106e0 = icmp ne i32 %v2_10728, -1
  call void @__pseudo_cond_branch(i1 %v1_106e0, i32 ptrtoint (i32* @global_var_14284.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_106e8 = load i32, i32* @r5, align 4
  %v2_106e8 = inttoptr i32 %v1_106e8 to i32*
  store i32 -1, i32* %v2_106e8, align 4
  %v1_106f0 = call i32 @function_156b4(i32 1)
  br label %dec_label_pc_10528.backedge

dec_label_pc_10528.backedge:                      ; preds = %dec_label_pc_106dc, %dec_label_pc_10814, %dec_label_pc_10900, %dec_label_pc_109b4, %dec_label_pc_109dc, %dec_label_pc_10a4c, %bb84, %dec_label_pc_10728, %dec_label_pc_10738, %dec_label_pc_10968, %bb86, %dec_label_pc_109f8, %dec_label_pc_109c8
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_10728 ], [ %stack_var_-37.1, %dec_label_pc_10738 ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_10814 ], [ %stack_var_-37.1, %dec_label_pc_109dc ], [ %v3_10a10, %dec_label_pc_109f8 ], [ %v3_10a10, %dec_label_pc_10a4c ], [ %stack_var_-37.1, %dec_label_pc_106dc ], [ %stack_var_-37.1, %dec_label_pc_10968 ], [ %stack_var_-37.1, %dec_label_pc_109b4 ], [ %stack_var_-37.1, %dec_label_pc_10900 ], [ %stack_var_-37.3, %dec_label_pc_109c8 ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_10728 ], [ %stack_var_-1620.1, %dec_label_pc_10738 ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_10814 ], [ %stack_var_-1620.1, %dec_label_pc_109dc ], [ %stack_var_-1620.1, %dec_label_pc_109f8 ], [ %stack_var_-1620.1, %dec_label_pc_10a4c ], [ %stack_var_-1620.1, %dec_label_pc_106dc ], [ %stack_var_-1620.1, %dec_label_pc_10968 ], [ %stack_var_-1620.1, %dec_label_pc_109b4 ], [ %stack_var_-1620.1, %dec_label_pc_10900 ], [ %stack_var_-1620.1, %dec_label_pc_109c8 ]
  %v2_1053087.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10528

dec_label_pc_106f8:                               ; preds = %dec_label_pc_105a0
  store i32 %v2_103d4, i32* %r2.global-to-local, align 4
  %v3_10708 = mul nuw nsw i32 %v3_10700, 4
  %v2_1070c = add i32 %v3_10708, %v2_103d4
  store i32 %v2_1070c, i32* %r3.global-to-local, align 4
  %v1_10710 = add i32 %v2_1070c, -556
  %v2_10710 = inttoptr i32 %v1_10710 to i32*
  %v3_10710 = load i32, i32* %v2_10710, align 4
  %v1_10714 = urem i32 %v2_106f8, 32
  %v7_1071c = shl i32 1, %v1_10714
  %v8_1071c = or i32 %v3_10710, %v7_1071c
  store i32 %v8_1071c, i32* %r2.global-to-local, align 4
  store i32 %v8_1071c, i32* %v2_10710, align 4
  br label %dec_label_pc_105dc

dec_label_pc_10728:                               ; preds = %dec_label_pc_10690
  %v7_1072c = icmp eq i32 %v2_10728, -1
  store i32 ptrtoint (i32* @global_var_1f67c.154 to i32), i32* @r5, align 4
  br i1 %v7_1072c, label %dec_label_pc_10528.backedge, label %dec_label_pc_10738

dec_label_pc_10738:                               ; preds = %dec_label_pc_10728
  %v3_10738 = udiv i32 %v2_10728, 32
  store i32 %v2_103d4, i32* %r2.global-to-local, align 4
  %v3_10744 = mul nuw nsw i32 %v3_10738, 4
  %v2_10748 = add i32 %v3_10744, %v2_103d4
  store i32 %v2_10748, i32* %r3.global-to-local, align 4
  %v1_1074c = add i32 %v2_10748, -556
  %v2_1074c = inttoptr i32 %v1_1074c to i32*
  %v3_1074c = load i32, i32* %v2_1074c, align 4
  %v1_10750 = urem i32 %v2_10728, 32
  %v6_10754 = lshr i32 %v3_1074c, %v1_10750
  store i32 %v6_10754, i32* %r2.global-to-local, align 4
  %v1_10758 = urem i32 %v6_10754, 2
  %v2_10758 = icmp eq i32 %v1_10758, 0
  br i1 %v2_10758, label %dec_label_pc_10528.backedge, label %dec_label_pc_10760

dec_label_pc_10760:                               ; preds = %dec_label_pc_10738
  %v0_10760 = call i32 @function_14858()
  %v0_10764 = load i32, i32* @r4, align 4
  %v2_10764 = inttoptr i32 %v0_10760 to i32*
  store i32 %v0_10764, i32* %v2_10764, align 4
  store i32 %v0_10760, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_10778 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10784 = call i32 @function_14a90(i32 %v2_10778, i32* %v5_108c0, i32 2, i32 16386)
  %v7_10788 = icmp eq i32 %v5_10784, -1
  br i1 %v7_10788, label %dec_label_pc_109c8, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10760
  %v2_10790 = icmp eq i32 %v5_10784, 0
  br i1 %v2_10790, label %dec_label_pc_10814, label %dec_label_pc_10798

dec_label_pc_10798:                               ; preds = %dec_label_pc_10790
  %v3_10798 = load i8, i8* %stack_var_-38, align 1
  %v4_10798 = sext i8 %v3_10798 to i32
  %v4_1079c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_1079c, i32* %r3.global-to-local, align 4
  %v4_107a0 = mul nuw nsw i32 %v4_1079c, 256
  %v5_107a0 = or i32 %v4_10798, %v4_107a0
  store i32 %v5_107a0, i32* %r2.global-to-local, align 4
  %v7_107a0 = icmp eq i32 %v5_107a0, 0
  br i1 %v7_107a0, label %dec_label_pc_109dc, label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %dec_label_pc_10798
  %v1_107a8 = mul nsw i32 %v4_10798, 256
  %v3_107ac = and i32 %v1_107a8, 65280
  %v4_107b0 = udiv i32 %v5_107a0, 256
  %v5_107b0 = or i32 %v3_107ac, %v4_107b0
  store i32 %v5_107b0, i32* %r3.global-to-local, align 4
  %v3_107b44 = udiv i32 %v5_107b0, 256
  store i32 %v3_107b44, i32* %r2.global-to-local, align 4
  %v1_107bc = trunc i32 %v3_107b44 to i8
  %v6_107c0 = trunc i32 %v4_107b0 to i8
  store i8 %v6_107c0, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_107b0, 1025
  br i1 %tmp103, label %dec_label_pc_107d8, label %dec_label_pc_107c8

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107a8
  %v2_107c8 = load i32, i32* @global_var_1f67c.154, align 4
  %v1_107cc = call i32 @function_14284(i32 %v2_107c8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_107d4 = load i32, i32* @r5, align 4
  %v2_107d4 = inttoptr i32 %v1_107d4 to i32*
  store i32 -1, i32* %v2_107d4, align 4
  %v3_107e0.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_107d8

dec_label_pc_107d8:                               ; preds = %dec_label_pc_107a8, %dec_label_pc_107c8
  %v3_107e0 = phi i8 [ %v6_107c0, %dec_label_pc_107a8 ], [ %v3_107e0.pre, %dec_label_pc_107c8 ]
  %v0_107d8 = load i32, i32* @r4, align 4
  %v1_107d8 = load i32, i32* @r8, align 4
  %v2_107d8 = inttoptr i32 %v1_107d8 to i32*
  store i32 %v0_107d8, i32* %v2_107d8, align 4
  %v4_107dc = urem i32 %v3_107b44, 256
  %v4_107e0 = sext i8 %v3_107e0 to i32
  store i32 %v2_107e8, i32* @r4, align 4
  %v4_107f0 = mul nuw nsw i32 %v4_107dc, 256
  %v5_107f0 = or i32 %v4_107e0, %v4_107f0
  store i32 %v5_107f0, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_107f8 = load i32, i32* @global_var_1f67c.154, align 4
  %v5_10800 = call i32 @function_14a90(i32 %v2_107f8, i32* nonnull %stack_var_-1616, i32 %v5_107f0, i32 16386)
  %v7_10804 = icmp eq i32 %v5_10800, -1
  br i1 %v7_10804, label %dec_label_pc_109c8, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_107d8
  %v2_1080c = icmp eq i32 %v5_10800, 0
  br i1 %v2_1080c, label %dec_label_pc_10814, label %dec_label_pc_109f8

dec_label_pc_10814:                               ; preds = %bb86, %dec_label_pc_1080c, %dec_label_pc_10790
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_10790 ], [ %v1_107bc, %dec_label_pc_1080c ]
  %v2_10814 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 67616, i32* @lr, align 4
  %v1_1081c = icmp ne i32 %v2_10814, -1
  call void @__pseudo_cond_branch(i1 %v1_1081c, i32 ptrtoint (i32* @global_var_14284.25 to i32))
  store i32 ptrtoint (i32* @global_var_1f67c.154 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1f67c.154, align 4
  %v1_10830 = call i32 @function_156b4(i32 1)
  br label %dec_label_pc_10528.backedge

dec_label_pc_10838:                               ; preds = %dec_label_pc_10590
  %v0_10840 = load i32, i32* @r4, align 4
  store i32 %v0_10840, i32* %r2.global-to-local, align 4
  %v3_10844 = call i32 @function_14b80(i32 2, i32 1, i32 %v0_10840)
  %v7_10848 = icmp eq i32 %v3_10844, -1
  store i32 %v3_10844, i32* %r5.global-to-local, align 4
  %v1_10850 = load i32, i32* %r8.global-to-local, align 4
  %v2_10850 = inttoptr i32 %v1_10850 to i32*
  store i32 %v3_10844, i32* %v2_10850, align 4
  br i1 %v7_10848, label %dec_label_pc_105a0, label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %dec_label_pc_10838
  %v0_10858 = load i32, i32* @r4, align 4
  store i32 %v0_10858, i32* @r2, align 4
  %v2_10860 = call i32 @function_14194(i32 %v3_10844, i32 3)
  %v1_10868 = or i32 %v2_10860, 2048
  store i32 %v1_10868, i32* @r2, align 4
  %v0_1086c = load i32, i32* %r5.global-to-local, align 4
  %v2_10870 = call i32 @function_14194(i32 %v0_1086c, i32 4)
  %v2_10878 = load i32, i32* @global_var_1f680.113, align 4
  store i32 %v2_10878, i32* %r3.global-to-local, align 4
  %v2_1087c = icmp eq i32 %v2_10878, 0
  br i1 %v2_1087c, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_10858
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_13b7c.159 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10858, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10890 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f818.157 to i8*), align 4
  %v5_108a0 = call i32 @function_149dc(i32 %v2_10890, %sockaddr* bitcast (i8** @global_var_1f8b4.119 to %sockaddr*), i32 16)
  br label %dec_label_pc_105a0

dec_label_pc_108a8:                               ; preds = %dec_label_pc_10630
  %v2_108b0 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_108c0 = call i32 @function_14af0(i32 %v2_108b0, i32* nonnull %v5_108c0, i32 2, i32 16384)
  br label %dec_label_pc_10658

dec_label_pc_108c8:                               ; preds = %dec_label_pc_106a0
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_108d8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_108f0 = call i32 @function_14a34(i32 %v2_10728, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_108dc)
  %v3_108f4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_108f4, i32* %r3.global-to-local, align 4
  %v2_108f8 = icmp eq i32 %v3_108f4, 0
  br i1 %v2_108f8, label %dec_label_pc_10968, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108c8
  %v2_10900 = load i32, i32* @global_var_1f67c.154, align 4
  %v1_10904 = call i32 @function_14284(i32 %v2_10900)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_1090c = load i32, i32* @r5, align 4
  %v2_1090c = inttoptr i32 %v1_1090c to i32*
  store i32 -1, i32* %v2_1090c, align 4
  %v0_10910 = call i32 @function_10a94()
  %v2_10918 = call i32 @function_13fe0(i32 %v0_10910, i32 10)
  %v1_1091c = add i32 %v2_10918, 1
  %v1_10920 = call i32 @function_156b4(i32 %v1_1091c)
  br label %dec_label_pc_10528.backedge

dec_label_pc_10928:                               ; preds = %dec_label_pc_10668
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_108d8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_10940 = call i32 @function_14984(i32 %v2_1065c, %sockaddr* %v5_10940, i32 %v2_108d8, i32 16, i32 16)
  %v1_10944 = call i32 @function_112c4(i32 %v6_10940)
  %v1_10948 = call i32 @function_f114(i32 %v1_10944)
  %v1_1094c = call i32 @function_a32c(i32 %v1_10948)
  store i32 %v1_104e4, i32* %r2.global-to-local, align 4
  %v2_1095c = call i32 @function_14384(i32 %v1_10958, i32 9)
  %v1_10964 = call i32 @function_15620(i32 0)
  br label %dec_label_pc_10968

dec_label_pc_10968:                               ; preds = %dec_label_pc_108c8, %dec_label_pc_10928
  %v2_1096c = call i32 @function_138c4(i8* %v1_1096c)
  %v3_1096c = trunc i32 %v2_1096c to i8
  store i8 %v3_1096c, i8* %stack_var_-38, align 1
  %v0_10974 = call i32 @function_13b7c()
  %v0_10978 = load i32, i32* @r4, align 4
  store i32 %v0_10978, i32* %r2.global-to-local, align 4
  %v1_1097c = load i32, i32* @fp, align 4
  %v2_1097c = inttoptr i32 %v1_1097c to i32*
  store i32 %v0_10974, i32* %v2_1097c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10988 = load i32, i32* @r5, align 4
  %v1_10988 = inttoptr i32 %v0_10988 to i32*
  %v2_10988 = load i32, i32* %v1_10988, align 4
  %v5_1098c = call i32 @function_14af0(i32 %v2_10988, i32* nonnull @global_var_16bc8.161, i32 %v0_10978, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10998 = load i32, i32* @r5, align 4
  %v1_10998 = inttoptr i32 %v0_10998 to i32*
  %v2_10998 = load i32, i32* %v1_10998, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_109a4 = call i32 @function_14af0(i32 %v2_10998, i32* %v5_108c0, i32 1, i32 16384)
  %v3_109a8 = load i8, i8* %stack_var_-38, align 1
  %v4_109a8 = sext i8 %v3_109a8 to i32
  store i32 %v4_109a8, i32* %r2.global-to-local, align 4
  %v2_109ac = icmp eq i8 %v3_109a8, 0
  br i1 %v2_109ac, label %dec_label_pc_10528.backedge, label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %dec_label_pc_10968
  %v0_109b4 = load i32, i32* @r5, align 4
  %v1_109b4 = inttoptr i32 %v0_109b4 to i32*
  %v2_109b4 = load i32, i32* %v1_109b4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_109c0 = call i32 @function_14af0(i32 %v2_109b4, i32* nonnull %stack_var_-138, i32 %v4_109a8, i32 16384)
  br label %dec_label_pc_10528.backedge

dec_label_pc_109c8:                               ; preds = %dec_label_pc_107d8, %dec_label_pc_10760
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_10760 ], [ %v1_107bc, %dec_label_pc_107d8 ]
  %v0_109c8 = load i32, i32* @r8, align 4
  %v1_109c8 = inttoptr i32 %v0_109c8 to i32*
  %v2_109c8 = load i32, i32* %v1_109c8, align 4
  store i32 %v2_109c8, i32* %r3.global-to-local, align 4
  %v7_109cc = icmp eq i32 %v2_109c8, 4
  br i1 %v7_109cc, label %dec_label_pc_10528.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_109c8
  %v8_109d0 = icmp eq i32 %v2_109c8, 11
  br i1 %v8_109d0, label %dec_label_pc_10528.backedge, label %dec_label_pc_10814

dec_label_pc_109dc:                               ; preds = %dec_label_pc_10798
  %v2_109e0 = load i32, i32* @global_var_1f67c.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_109f0 = call i32 @function_14a90(i32 %v2_109e0, i32* nonnull %v5_108c0, i32 2, i32 16384)
  br label %dec_label_pc_10528.backedge

dec_label_pc_109f8:                               ; preds = %dec_label_pc_1080c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10a08 = load i32, i32* @global_var_1f67c.154, align 4
  %v5_10a0c = call i32 @function_14a90(i32 %v2_10a08, i32* nonnull %v5_108c0, i32 2, i32 16384)
  %v3_10a10 = load i8, i8* %stack_var_-38, align 1
  %v4_10a10 = sext i8 %v3_10a10 to i32
  %v4_10a18 = mul nsw i32 %v4_10a10, 256
  %v5_10a18 = or i32 %v4_10a18, %v4_107dc
  store i32 %v5_10a18, i32* %r2.global-to-local, align 4
  store i32 %v4_10a10, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10a2c = load i32, i32* @global_var_1f67c.154, align 4
  store i8 %v1_107bc, i8* %stack_var_-38, align 1
  %v8_10a38 = call i32 @function_14a90(i32 %v2_10a2c, i32* nonnull %stack_var_-1616, i32 %v5_10a18, i32 16384)
  %v3_10a3c = load i8, i8* %stack_var_-38, align 1
  %v4_10a3c = sext i8 %v3_10a3c to i32
  store i32 %v4_10a3c, i32* %r2.global-to-local, align 4
  %v4_10a40 = zext i8 %v3_10a10 to i32
  store i32 %v4_10a40, i32* %r3.global-to-local, align 4
  %v4_10a44 = mul nuw nsw i32 %v4_10a40, 256
  %v5_10a44 = or i32 %v4_10a3c, %v4_10a44
  %v7_10a44 = icmp eq i32 %v5_10a44, 0
  br i1 %v7_10a44, label %dec_label_pc_10528.backedge, label %dec_label_pc_10a4c

dec_label_pc_10a4c:                               ; preds = %dec_label_pc_109f8
  %v5_10a50 = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_10a44, i32 %v4_10a3c, i32 %v4_10a40)
  br label %dec_label_pc_10528.backedge

; uselistorder directives
  uselistorder i32 %v4_10a40, { 1, 0, 2 }
  uselistorder i32 %v4_10a3c, { 1, 0, 2 }
  uselistorder i32 %v4_10a10, { 1, 0 }
  uselistorder i8 %v3_10a10, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_10844, { 3, 2, 1, 0 }
  uselistorder i32 %v5_10800, { 1, 0 }
  uselistorder i32 %v4_107dc, { 1, 0 }
  uselistorder i8 %v1_107bc, { 0, 2, 1 }
  uselistorder i32 %v3_107b44, { 0, 2, 1 }
  uselistorder i32 %v4_107b0, { 1, 0 }
  uselistorder i32 %v5_10784, { 1, 0 }
  uselistorder i32 %v2_10728, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_1065c, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_10618, { 2, 1, 0 }
  uselistorder i32 %v2_1055c, { 2, 1, 0 }
  uselistorder i32 %v1_1054c, { 1, 2, 0 }
  uselistorder i32 %v1_10534, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_108d8, { 1, 0, 2 }
  uselistorder i32* %v5_108c0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_10524, { 1, 0, 2 }
  uselistorder i32 %v2_10520, { 1, 0, 2 }
  uselistorder i32 %v4_1048c, { 1, 2, 0 }
  uselistorder i32 %v2_103d4, { 0, 10, 1, 11, 2, 3, 9, 4, 5, 8, 6, 12, 7 }
  uselistorder i32 %v1_10320, { 1, 2, 0 }
  uselistorder i32 %v0_1031c, { 1, 0 }
  uselistorder i32 %v1_102f0, { 1, 0 }
  uselistorder i32 %v0_102e4, { 1, 0 }
  uselistorder i32 %v1_102bc, { 1, 0 }
  uselistorder i32 %v0_102b0, { 1, 0 }
  uselistorder i32 %v1_10288, { 1, 0 }
  uselistorder i32 %v0_1027c, { 1, 0 }
  uselistorder i32 %v1_10254, { 1, 0 }
  uselistorder i32 %v0_10244, { 1, 0 }
  uselistorder i32 %v0_10220, { 1, 0 }
  uselistorder i32 %v2_1015c, { 0, 2, 1 }
  uselistorder i32 %v4_100fc, { 1, 2, 0 }
  uselistorder i32 %v2_100a4, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1616, { 1, 0, 2, 3 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 57, 58, 41, 42, 38, 55, 56, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32* @global_var_1f680.113, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1f818.157 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1f818.157, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f818.157 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f678.115, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1f67c.154, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_138ec, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_10b48, { 2, 1, 0 }
  uselistorder i32 ()* @function_fe94, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f8b4.119 to i32), { 1, 0 }
  uselistorder [2 x i8]* @global_var_16b50.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_fe7c.124 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14c0c, { 1, 0 }
  uselistorder label %dec_label_pc_10968, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_107d8, { 1, 0 }
  uselistorder label %dec_label_pc_10528.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_10658, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_105a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10590, { 1, 0 }
  uselistorder label %dec_label_pc_10548.dec_label_pc_10548_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10530.dec_label_pc_10530_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_103ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10388, { 2, 0, 1 }
}

define i32 @function_10a94() local_unnamed_addr {
dec_label_pc_10a94:
  %v2_10aa0 = load i32, i32* @global_var_1f81c.163, align 4
  %v2_10aa4 = load i32, i32* @global_var_1f828.165, align 4
  store i32 ptrtoint (i32* @global_var_1f820.167 to i32), i32* @lr, align 4
  %v4_10ab0 = mul i32 %v2_10aa0, 2048
  %v5_10ab0 = xor i32 %v4_10ab0, %v2_10aa0
  %v4_10ab4 = udiv i32 %v2_10aa4, 524288
  %v5_10ab4 = xor i32 %v4_10ab4, %v2_10aa4
  %v2_10ab8 = load i32, i32* @global_var_1f820.167, align 4
  %v2_10abc = load i32, i32* @global_var_1f824.169, align 4
  %v2_10ac0 = xor i32 %v5_10ab4, %v5_10ab0
  %v4_10ac4 = udiv i32 %v5_10ab0, 256
  %v5_10ac4 = xor i32 %v2_10ac0, %v4_10ac4
  store i32 %v2_10ab8, i32* @global_var_1f81c.163, align 4
  store i32 %v2_10abc, i32* @global_var_1f820.167, align 4
  store i32 %v2_10aa4, i32* @global_var_1f824.169, align 4
  store i32 %v5_10ac4, i32* @global_var_1f828.165, align 4
  ret i32 %v5_10ac4

; uselistorder directives
  uselistorder i32 %v2_10aa4, { 2, 1, 0 }
  uselistorder i32 %v2_10aa0, { 1, 0 }
}

define i32 @function_10aec(i32 %arg1) local_unnamed_addr {
dec_label_pc_10aec:
  %stack_var_-12 = alloca i32, align 4
  %v3_10aec = load i32, i32* @r4, align 4
  store i32 %v3_10aec, i32* %stack_var_-12, align 4
  %v2_10af4 = call i32 @function_14554(i32* null)
  store i32 %v2_10af4, i32* @global_var_1f81c.163, align 4
  %v0_10b00 = call i32 @function_142dc()
  store i32 %v0_10b00, i32* @r4, align 4
  %v0_10b08 = call i32 @function_14308()
  %v0_10b10 = load i32, i32* @r4, align 4
  %v2_10b10 = xor i32 %v0_10b10, %v0_10b08
  store i32 %v2_10b10, i32* @r4, align 4
  store i32 %v2_10b10, i32* @global_var_1f820.167, align 4
  %v1_10b18 = call i32 @function_14864(i32 %v0_10b08)
  %v2_10b1c = load i32, i32* @global_var_1f820.167, align 4
  %v2_10b28 = xor i32 %v2_10b1c, %v1_10b18
  store i32 %v2_10b28, i32* @global_var_1f828.165, align 4
  store i32 %v1_10b18, i32* @global_var_1f824.169, align 4
  %v2_10b34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10b34, i32* @r4, align 4
  ret i32 %v1_10b18

; uselistorder directives
  uselistorder i32 %v1_10b18, { 1, 2, 0 }
  uselistorder i32 %v0_10b08, { 1, 0 }
  uselistorder i32 ()* @function_14308, { 2, 1, 0 }
}

define i32 @function_10b48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10b48:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10b48 = load i32, i32* @r4, align 4
  store i32 %v3_10b48, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_16c08.175 to i32), i32* @r1, align 4
  %v2_10b5c = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_10b5c, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_10b64 = call i32 @function_148a0(i32 %v2_10b5c, i32 ptrtoint ([33 x i8]* @global_var_16c08.175 to i32), i32 33)
  store i32 %v4_10b64, i32* %r0.global-to-local, align 4
  %v0_10b68 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10b68 = icmp slt i32 %v0_10b68, 0
  store i1 %v1_10b68, i1* %cpsr_n.global-to-local, align 1
  %v2_10b68 = icmp eq i32 %v0_10b68, 0
  store i1 %v2_10b68, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_10b68, 1
  br i1 %tmp20, label %dec_label_pc_10c54, label %dec_label_pc_10b70

dec_label_pc_10b70:                               ; preds = %dec_label_pc_10b48
  store i32 ptrtoint (i32* @global_var_1f828.165 to i32), i32* %fp.global-to-local, align 4
  %v2_10b7c = load i32, i32* @global_var_1f824.169, align 4
  store i32 %v2_10b7c, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f81c.163 to i32), i32* %r3.global-to-local, align 4
  %v2_10b84 = load i32, i32* @global_var_1f820.167, align 4
  store i32 %v2_10b84, i32* %sl.global-to-local, align 4
  %v2_10b88 = load i32, i32* @global_var_1f828.165, align 4
  store i32 %v2_10b88, i32* %r6.global-to-local, align 4
  %v2_10b8c = load i32, i32* @global_var_1f81c.163, align 4
  store i32 %v2_10b8c, i32* %ip.global-to-local, align 4
  %v0_10b90 = load i32, i32* @r4, align 4
  %v1_10b90 = add i32 %v0_10b90, 1
  store i32 %v1_10b90, i32* %r7.global-to-local, align 4
  %v2_10b9c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_10bfc

dec_label_pc_10b98:                               ; preds = %dec_label_pc_10bfc
  %v1_10b98 = udiv i32 %v5_10c08, 8
  %v4_10ba0 = urem i32 %v1_10b98, 32
  %v5_10ba0 = add i32 %v4_10ba0, %v2_10b9c
  store i32 %v5_10ba0, i32* %r0.global-to-local, align 4
  %v3_10ba4 = mul i32 %v5_10c08, 65536
  store i32 %v3_10ba4, i32* %r2.global-to-local, align 4
  store i32 %v2_10b9c, i32* %r3.global-to-local, align 4
  %v3_10bac = mul i32 %v5_10c08, 256
  store i32 %v3_10bac, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_10c08, 2048
  %v4_10bb0 = urem i32 %tmp21, 32
  %v5_10bb0 = add i32 %v4_10bb0, %v2_10b9c
  store i32 %v5_10bb0, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_10c08, 524288
  %v4_10bb4 = urem i32 %tmp22, 32
  %v5_10bb4 = add i32 %v4_10bb4, %v2_10b9c
  store i32 %v5_10bb4, i32* @lr, align 4
  %v4_10bb8 = udiv i32 %v2_10c04, 134217728
  %v5_10bb8 = add i32 %v4_10bb8, %v2_10b9c
  %v1_10bbc = add i32 %v5_10bb0, -33
  %v2_10bbc = inttoptr i32 %v1_10bbc to i8*
  %v3_10bbc = load i8, i8* %v2_10bbc, align 1
  %v4_10bbc = zext i8 %v3_10bbc to i32
  store i32 %v4_10bbc, i32* %r2.global-to-local, align 4
  %v1_10bc0 = add i32 %v5_10ba0, -33
  %v2_10bc0 = inttoptr i32 %v1_10bc0 to i8*
  %v3_10bc0 = load i8, i8* %v2_10bc0, align 1
  %v4_10bc0 = zext i8 %v3_10bc0 to i32
  store i32 %v4_10bc0, i32* %r3.global-to-local, align 4
  %v1_10bc4 = add i32 %v5_10bb4, -33
  %v2_10bc4 = inttoptr i32 %v1_10bc4 to i8*
  %v3_10bc4 = load i8, i8* %v2_10bc4, align 1
  %v4_10bc4 = zext i8 %v3_10bc4 to i32
  store i32 %v4_10bc4, i32* %r1.global-to-local, align 4
  %v1_10bc8 = add i32 %v5_10bb8, -33
  %v2_10bc8 = inttoptr i32 %v1_10bc8 to i8*
  %v3_10bc8 = load i8, i8* %v2_10bc8, align 1
  %v4_10bc8 = zext i8 %v3_10bc8 to i32
  store i32 %v4_10bc8, i32* %r0.global-to-local, align 4
  %v1_10bcc = add i32 %v0_10bcc, -4
  store i32 %v1_10bcc, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10bd0 = icmp slt i32 %v1_10bcc, 0
  store i1 %v1_10bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_10bd0 = icmp eq i32 %v1_10bcc, 0
  store i1 %v2_10bd0, i1* %cpsr_z.global-to-local, align 1
  %v3_10bd4 = add i32 %v2_10bd4, -1
  %v4_10bd4 = inttoptr i32 %v3_10bd4 to i8*
  store i8 %v3_10bc0, i8* %v4_10bd4, align 1
  %v0_10bd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10bd8 = trunc i32 %v0_10bd8 to i8
  %v2_10bd8 = load i32, i32* %r7.global-to-local, align 4
  %v3_10bd8 = inttoptr i32 %v2_10bd8 to i8*
  store i8 %v1_10bd8, i8* %v3_10bd8, align 1
  %v0_10bdc = load i32, i32* %r1.global-to-local, align 4
  %v1_10bdc = trunc i32 %v0_10bdc to i8
  %v2_10bdc = load i32, i32* %r7.global-to-local, align 4
  %v3_10bdc = add i32 %v2_10bdc, 1
  %v4_10bdc = inttoptr i32 %v3_10bdc to i8*
  store i8 %v1_10bdc, i8* %v4_10bdc, align 1
  %v0_10be0 = load i32, i32* %r0.global-to-local, align 4
  %v1_10be0 = trunc i32 %v0_10be0 to i8
  %v2_10be0 = load i32, i32* %r7.global-to-local, align 4
  %v3_10be0 = add i32 %v2_10be0, 2
  %v4_10be0 = inttoptr i32 %v3_10be0 to i8*
  store i8 %v1_10be0, i8* %v4_10be0, align 1
  %v0_10be4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10be4, i32* %ip.global-to-local, align 4
  %v0_10be8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10be8 = add i32 %v0_10be8, 4
  store i32 %v1_10be8, i32* %r7.global-to-local, align 4
  %v0_10bec = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10bec = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10bec = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10bec = xor i1 %v1_10bec, %v2_10bec
  %v4_10bec = or i1 %v0_10bec, %v3_10bec
  br i1 %v4_10bec, label %dec_label_pc_10c38, label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10c1c, %dec_label_pc_10b98
  %v2_10bd46 = phi i32 [ %v1_10c30, %dec_label_pc_10c1c ], [ %v1_10be8, %dec_label_pc_10b98 ]
  %v0_10bfc2 = phi i32 [ %v0_10c2c, %dec_label_pc_10c1c ], [ %v0_10be4, %dec_label_pc_10b98 ]
  %v0_10bf0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_10bf0, i32* %sl.global-to-local, align 4
  %v0_10bf4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10bf4, i32* %sb.global-to-local, align 4
  %v0_10bf8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10bf8, i32* %r6.global-to-local, align 4
  %v0_10c0c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10b70, %dec_label_pc_10bf0
  %v2_10bd4 = phi i32 [ %v1_10b90, %dec_label_pc_10b70 ], [ %v2_10bd46, %dec_label_pc_10bf0 ]
  %v0_10bcc = phi i32 [ %v0_10b68, %dec_label_pc_10b70 ], [ %v0_10c0c.pre, %dec_label_pc_10bf0 ]
  %v0_10c00 = phi i32 [ %v2_10b88, %dec_label_pc_10b70 ], [ %v0_10bf8, %dec_label_pc_10bf0 ]
  %v0_10bfc = phi i32 [ %v2_10b8c, %dec_label_pc_10b70 ], [ %v0_10bfc2, %dec_label_pc_10bf0 ]
  %v4_10bfc = mul i32 %v0_10bfc, 2048
  %v5_10bfc = xor i32 %v4_10bfc, %v0_10bfc
  store i32 %v5_10bfc, i32* %r3.global-to-local, align 4
  %v4_10c00 = udiv i32 %v0_10c00, 524288
  %v5_10c00 = xor i32 %v4_10c00, %v0_10c00
  %v2_10c04 = xor i32 %v5_10c00, %v5_10bfc
  store i32 %v2_10c04, i32* %r2.global-to-local, align 4
  %v4_10c08 = udiv i32 %v5_10bfc, 256
  %v5_10c08 = xor i32 %v4_10c08, %v2_10c04
  store i32 %v5_10c08, i32* %r5.global-to-local, align 4
  %v1_10c0c = add i32 %v0_10bcc, -3
  %v2_10c0c = icmp ugt i32 %v0_10bcc, 2
  %v3_10c0c = sub i32 2, %v0_10bcc
  %v4_10c0c = and i32 %v3_10c0c, %v0_10bcc
  %v5_10c0c = icmp slt i32 %v4_10c0c, 0
  store i1 %v5_10c0c, i1* %cpsr_v.global-to-local, align 1
  %v6_10c0c = icmp slt i32 %v1_10c0c, 0
  store i1 %v6_10c0c, i1* %cpsr_n.global-to-local, align 1
  %v7_10c0c = icmp eq i32 %v0_10bcc, 3
  store i1 %v7_10c0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_10c08, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_10c18 = xor i1 %v7_10c0c, true
  %v3_10c18 = and i1 %v2_10c0c, %v2_10c18
  br i1 %v3_10c18, label %dec_label_pc_10b98, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10bfc
  %v2_10c1c = call i32 @function_13fe0(i32 %v5_10c08, i32 33)
  store i32 %v2_10c1c, i32* %r0.global-to-local, align 4
  %v0_10c20 = load i32, i32* %r8.global-to-local, align 4
  %v1_10c20 = add i32 %v0_10c20, -1
  store i32 %v1_10c20, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10c24 = icmp slt i32 %v1_10c20, 0
  store i1 %v1_10c24, i1* %cpsr_n.global-to-local, align 1
  %v2_10c24 = icmp eq i32 %v1_10c20, 0
  store i1 %v2_10c24, i1* %cpsr_z.global-to-local, align 1
  %v1_10c28 = trunc i32 %v2_10c1c to i8
  %v2_10c28 = load i32, i32* %r7.global-to-local, align 4
  %v3_10c28 = add i32 %v2_10c28, -1
  %v4_10c28 = inttoptr i32 %v3_10c28 to i8*
  store i8 %v1_10c28, i8* %v4_10c28, align 1
  %v0_10c2c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10c2c, i32* %ip.global-to-local, align 4
  %v0_10c30 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c30 = add i32 %v0_10c30, 1
  store i32 %v1_10c30, i32* %r7.global-to-local, align 4
  %v0_10c34 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10c34 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10c34 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10c34 = xor i1 %v1_10c34, %v2_10c34
  %v4_10c34 = or i1 %v0_10c34, %v3_10c34
  br i1 %v4_10c34, label %dec_label_pc_10c38, label %dec_label_pc_10bf0

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c1c, %dec_label_pc_10b98
  store i32 ptrtoint (i32* @global_var_1f820.167 to i32), i32* %r3.global-to-local, align 4
  %v0_10c40 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10c40, i32* @global_var_1f824.169, align 4
  store i32 ptrtoint (i32* @global_var_1f81c.163 to i32), i32* %ip.global-to-local, align 4
  %v0_10c48 = load i32, i32* %r5.global-to-local, align 4
  %v1_10c48 = load i32, i32* %fp.global-to-local, align 4
  %v2_10c48 = inttoptr i32 %v1_10c48 to i32*
  store i32 %v0_10c48, i32* %v2_10c48, align 4
  %v0_10c4c = load i32, i32* %sb.global-to-local, align 4
  %v1_10c4c = load i32, i32* %r3.global-to-local, align 4
  %v2_10c4c = inttoptr i32 %v1_10c4c to i32*
  store i32 %v0_10c4c, i32* %v2_10c4c, align 4
  %v0_10c50 = load i32, i32* %sl.global-to-local, align 4
  %v1_10c50 = load i32, i32* %ip.global-to-local, align 4
  %v2_10c50 = inttoptr i32 %v1_10c50 to i32*
  store i32 %v0_10c50, i32* %v2_10c50, align 4
  %v2_10c58.pre = load i32, i32* %stack_var_-36, align 4
  %v29_10c58.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c54

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10b48, %dec_label_pc_10c38
  %v29_10c58 = phi i32 [ %v29_10c58.pre, %dec_label_pc_10c38 ], [ %v4_10b64, %dec_label_pc_10b48 ]
  %v2_10c58 = phi i32 [ %v2_10c58.pre, %dec_label_pc_10c38 ], [ %v3_10b48, %dec_label_pc_10b48 ]
  store i32 %v2_10c58, i32* @r4, align 4
  ret i32 %v29_10c58

; uselistorder directives
  uselistorder i32 %v1_10c30, { 1, 0 }
  uselistorder i32 %v0_10c2c, { 1, 0 }
  uselistorder i32 %v5_10c08, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_10c04, { 1, 2, 0 }
  uselistorder i32 %v0_10bfc, { 1, 0 }
  uselistorder i32 %v0_10c00, { 1, 0 }
  uselistorder i32 %v0_10bcc, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_10b9c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_10b68, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_10c54, { 1, 0 }
  uselistorder label %dec_label_pc_10bfc, { 1, 0 }
}

define i32 @function_10c70(i8* %arg1) local_unnamed_addr {
dec_label_pc_10c70:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_10c70 = load i32, i32* @r4, align 4
  store i32 %v3_10c70, i32* %stack_var_-36, align 4
  %v9_10c70 = load i32, i32* @r6, align 4
  %v12_10c70 = load i32, i32* @r7, align 4
  %v15_10c70 = load i32, i32* @r8, align 4
  %v18_10c70 = load i32, i32* @sb, align 4
  %v21_10c70 = load i32, i32* @sl, align 4
  %v24_10c70 = load i32, i32* @fp, align 4
  %v0_10c74 = load i32, i32* @r1, align 4
  store i32 %v0_10c74, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10c74, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_10c70
  store i32 %v3_10c70, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_10c70
  store i32 ptrtoint (i32* @global_var_1f828.165 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f824.169 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f820.167 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f81c.163 to i32), i32* %r8.global-to-local, align 4
  %v2_10c90 = load i32, i32* @global_var_1f828.165, align 4
  store i32 %v2_10c90, i32* @lr, align 4
  %v2_10c94 = load i32, i32* @global_var_1f824.169, align 4
  store i32 %v2_10c94, i32* %r7.global-to-local, align 4
  %v2_10c98 = load i32, i32* @global_var_1f820.167, align 4
  store i32 %v2_10c98, i32* %r6.global-to-local, align 4
  %v2_10c9c = load i32, i32* @global_var_1f81c.163, align 4
  br label %dec_label_pc_10cc8

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10cf4
  %v3_10cfc = sdiv i32 %v5_10ce0, 256
  %v1_10ca4 = trunc i32 %v3_10cfc to i8
  %v3_10ca4 = add i32 %v9_10ce8, 1
  %v4_10ca4 = inttoptr i32 %v3_10ca4 to i8*
  store i8 %v1_10ca4, i8* %v4_10ca4, align 1
  %v0_10ca8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ca8 = trunc i32 %v0_10ca8 to i8
  %v2_10ca8 = load i32, i32* %r5.global-to-local, align 4
  %v3_10ca8 = inttoptr i32 %v2_10ca8 to i8*
  store i8 %v1_10ca8, i8* %v3_10ca8, align 1
  %v0_10cac = load i32, i32* %r5.global-to-local, align 4
  %v1_10cac = add i32 %v0_10cac, 2
  store i32 %v1_10cac, i32* %r5.global-to-local, align 4
  %v0_10cb0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10cb0:                               ; preds = %.thread, %dec_label_pc_10ca4
  %v0_10cb0 = phi i32 [ %v9_10cec, %.thread ], [ %v0_10cb0.pre, %dec_label_pc_10ca4 ]
  %v2_10ca47 = phi i32 [ %v12_10ce8, %.thread ], [ %v1_10cac, %dec_label_pc_10ca4 ]
  %tmp22 = icmp slt i32 %v0_10cb0, 1
  br i1 %tmp22, label %dec_label_pc_10d30, label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10cb0
  %v0_10cb4 = load i32, i32* %r6.global-to-local, align 4
  %v0_10cbc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10cbc, i32* %r6.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @lr, align 4
  store i32 %v0_10cc0, i32* %r7.global-to-local, align 4
  %v0_10cc4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10cc4, i32* @lr, align 4
  br label %dec_label_pc_10cc8

dec_label_pc_10cc8:                               ; preds = %bb21, %dec_label_pc_10cbc
  %v0_10d18 = phi i32 [ %v2_10c98, %bb21 ], [ %v0_10cbc, %dec_label_pc_10cbc ]
  %v9_10ce8 = phi i32 [ %tmp, %bb21 ], [ %v2_10ca47, %dec_label_pc_10cbc ]
  %v0_10d00 = phi i32 [ %v0_10c74, %bb21 ], [ %v0_10cb0, %dec_label_pc_10cbc ]
  %v0_10d0c = phi i32 [ %v2_10c90, %bb21 ], [ %v0_10cc4, %dec_label_pc_10cbc ]
  %v0_10d08 = phi i32 [ %v2_10c9c, %bb21 ], [ %v0_10cb4, %dec_label_pc_10cbc ]
  %v4_10cc8 = mul i32 %v0_10d08, 2048
  %v5_10cc8 = xor i32 %v4_10cc8, %v0_10d08
  %v4_10ccc = udiv i32 %v0_10d0c, 524288
  %v5_10ccc = xor i32 %v4_10ccc, %v0_10d0c
  %v2_10cd0 = xor i32 %v5_10ccc, %v5_10cc8
  %v4_10ce0 = udiv i32 %v5_10cc8, 256
  %v5_10ce0 = xor i32 %v4_10ce0, %v2_10cd0
  store i32 %v5_10ce0, i32* %r3.global-to-local, align 4
  %v7_10ce8 = icmp sgt i32 %v0_10d00, 3
  br i1 %v7_10ce8, label %.thread, label %dec_label_pc_10cf4

.thread:                                          ; preds = %dec_label_pc_10cc8
  %v10_10ce8 = inttoptr i32 %v9_10ce8 to i32*
  store i32 %v5_10ce0, i32* %v10_10ce8, align 4
  %v11_10ce8 = load i32, i32* %r5.global-to-local, align 4
  %v12_10ce8 = add i32 %v11_10ce8, 4
  store i32 %v12_10ce8, i32* %r5.global-to-local, align 4
  %v8_10cec = load i32, i32* %r4.global-to-local, align 4
  %v9_10cec = add i32 %v8_10cec, -4
  store i32 %v9_10cec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10cf4:                               ; preds = %dec_label_pc_10cc8
  store i32 %v5_10ce0, i32* %r3.global-to-local, align 4
  %v7_10cf8 = icmp eq i32 %v0_10d00, 1
  %v1_10d00 = add i32 %v0_10d00, -2
  store i32 %v1_10d00, i32* %r4.global-to-local, align 4
  br i1 %v7_10cf8, label %dec_label_pc_10d08, label %dec_label_pc_10ca4

dec_label_pc_10d08:                               ; preds = %dec_label_pc_10cf4
  store i32 %v5_10ce0, i32* %r3.global-to-local, align 4
  %v1_10d18 = load i32, i32* %r8.global-to-local, align 4
  %v2_10d18 = inttoptr i32 %v1_10d18 to i32*
  store i32 %v0_10d18, i32* %v2_10d18, align 4
  %v0_10d1c = load i32, i32* %r7.global-to-local, align 4
  %v1_10d1c = load i32, i32* %sl.global-to-local, align 4
  %v2_10d1c = inttoptr i32 %v1_10d1c to i32*
  store i32 %v0_10d1c, i32* %v2_10d1c, align 4
  %v0_10d20 = load i32, i32* @lr, align 4
  %v1_10d20 = load i32, i32* %sb.global-to-local, align 4
  %v2_10d20 = inttoptr i32 %v1_10d20 to i32*
  store i32 %v0_10d20, i32* %v2_10d20, align 4
  %v0_10d24 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d24 = load i32, i32* %fp.global-to-local, align 4
  %v2_10d24 = inttoptr i32 %v1_10d24 to i32*
  store i32 %v0_10d24, i32* %v2_10d24, align 4
  %v0_10d28 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d28 = trunc i32 %v0_10d28 to i8
  %v2_10d28 = load i32, i32* %r5.global-to-local, align 4
  %v3_10d28 = inttoptr i32 %v2_10d28 to i8*
  store i8 %v1_10d28, i8* %v3_10d28, align 1
  %v2_10d2c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10d2c, i32* @r4, align 4
  store i32 %v9_10c70, i32* @r6, align 4
  store i32 %v12_10c70, i32* @r7, align 4
  store i32 %v15_10c70, i32* @r8, align 4
  store i32 %v18_10c70, i32* @sb, align 4
  store i32 %v21_10c70, i32* @sl, align 4
  store i32 %v24_10c70, i32* @fp, align 4
  ret i32 %v5_10cc8

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10cb0
  %v0_10d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d30 = load i32, i32* %fp.global-to-local, align 4
  %v2_10d30 = inttoptr i32 %v1_10d30 to i32*
  store i32 %v0_10d30, i32* %v2_10d30, align 4
  %v0_10d34 = load i32, i32* @lr, align 4
  %v1_10d34 = load i32, i32* %sb.global-to-local, align 4
  %v2_10d34 = inttoptr i32 %v1_10d34 to i32*
  store i32 %v0_10d34, i32* %v2_10d34, align 4
  %v0_10d38 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d38 = load i32, i32* %sl.global-to-local, align 4
  %v2_10d38 = inttoptr i32 %v1_10d38 to i32*
  store i32 %v0_10d38, i32* %v2_10d38, align 4
  %v0_10d3c = load i32, i32* %r6.global-to-local, align 4
  %v1_10d3c = load i32, i32* %r8.global-to-local, align 4
  %v2_10d3c = inttoptr i32 %v1_10d3c to i32*
  store i32 %v0_10d3c, i32* %v2_10d3c, align 4
  %v2_10d40 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10d40, i32* @r4, align 4
  store i32 %v9_10c70, i32* @r6, align 4
  store i32 %v12_10c70, i32* @r7, align 4
  store i32 %v15_10c70, i32* @r8, align 4
  store i32 %v18_10c70, i32* @sb, align 4
  store i32 %v21_10c70, i32* @sl, align 4
  store i32 %v24_10c70, i32* @fp, align 4
  ret i32 %v5_10cc8

; uselistorder directives
  uselistorder i32 %v9_10cec, { 1, 0 }
  uselistorder i32 %v12_10ce8, { 1, 0 }
  uselistorder i32 %v5_10ce0, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10cc8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10d08, { 1, 0 }
  uselistorder i32 %v0_10d0c, { 1, 0 }
  uselistorder i32 %v0_10cb0, { 1, 0 }
  uselistorder i32 %v24_10c70, { 1, 0 }
  uselistorder i32 %v21_10c70, { 1, 0 }
  uselistorder i32 %v18_10c70, { 1, 0 }
  uselistorder i32 %v15_10c70, { 1, 0 }
  uselistorder i32 %v12_10c70, { 1, 0 }
  uselistorder i32 %v9_10c70, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1f81c.163, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1f820.167, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1f824.169, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1f828.165, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10cc8, { 1, 0 }
}

define i32 @function_10d54(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d54 = load i32, i32* @r4, align 4
  store i32 %v3_10d54, i32* %stack_var_-8, align 4
  %v6_10d54 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_10d58 = icmp eq i32 %arg1, 0
  br i1 %v2_10d58, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10d54
  store i32 %v3_10d54, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_10d54
  %v1_10d60 = add i32 %arg1, 4
  %v2_10d60 = inttoptr i32 %v1_10d60 to i32*
  %v3_10d60 = load i32, i32* %v2_10d60, align 4
  %v1_10d68 = icmp ne i32 %v3_10d60, 0
  call void @__pseudo_cond_branch(i1 %v1_10d68, i32 ptrtoint (i32* @global_var_14edc.59 to i32))
  %v0_10d6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10d6c, i32* @r0, align 4
  %v2_10d70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10d70, i32* @r4, align 4
  store i32 %v6_10d54, i32* @lr, align 4
  %v0_10d74 = call i32 @function_14edc()
  ret i32 %v0_10d74
}

define i32 @function_10d78(i8* %arg1) local_unnamed_addr {
dec_label_pc_10d78:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10d78 = load i32, i32* @r4, align 4
  store i32 %v3_10d78, i32* %stack_var_-36, align 4
  %v6_10d78 = load i32, i32* @r5, align 4
  %v9_10d78 = load i32, i32* @r6, align 4
  %v12_10d78 = load i32, i32* @r7, align 4
  %v15_10d78 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_10d90 = call i32 @function_14e84(i32 1, i32 8)
  %v0_10d98 = load i32, i32* @r4, align 4
  %v1_10d98 = inttoptr i32 %v0_10d98 to i8*
  store i32 %v0_10d98, i32* %r0.global-to-local, align 4
  %v3_10d9c = call i32 @function_138c4(i8* %v1_10d98)
  %v2_10da4 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_10da4, i32* %fp.global-to-local, align 4
  %v2_10da8 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_10dac = add i32 %v3_10d9c, 1
  store i32 %v1_10dac, i32* %r0.global-to-local, align 4
  %v2_10db0 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_10db0, i32* %r2.global-to-local, align 4
  store i32 %v2_10da4, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_10df0162 = icmp eq i32 %v1_10dac, 0
  store i1 %v2_10df0162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_10df8163 = or i32 %v2_10db0, 1
  store i32 %v1_10df8163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_10dac, 1
  br i1 %tmp124164, label %dec_label_pc_10e00, label %dec_label_pc_10dc0.lr.ph

dec_label_pc_10dc0.lr.ph:                         ; preds = %dec_label_pc_10d78
  %v0_10dc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10dc0

dec_label_pc_10dc0:                               ; preds = %dec_label_pc_10dc0.lr.ph, %.thread12
  %v1_10dd4176.off0 = phi i8 [ 0, %dec_label_pc_10dc0.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_10dc0 = phi i32 [ %v0_10dc0.pre, %dec_label_pc_10dc0.lr.ph ], [ %v1_10de4, %.thread12 ]
  %v2_10e04165 = phi i32 [ %v2_10db0, %dec_label_pc_10dc0.lr.ph ], [ %v0_10dec, %.thread12 ]
  %v1_10dc0 = inttoptr i32 %v0_10dc0 to i8*
  %v2_10dc0 = load i8, i8* %v1_10dc0, align 1
  %v3_10dc0 = zext i8 %v2_10dc0 to i32
  store i32 %v3_10dc0, i32* %r3.global-to-local, align 4
  %v2_10dc4 = icmp eq i8 %v2_10dc0, 0
  store i1 %v2_10dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10dc4, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_10dc0
  %v8_10dc8 = icmp eq i8 %v2_10dc0, 46
  store i1 %v8_10dc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10dc8, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_10dcc = inttoptr i32 %v2_10e04165 to i8*
  store i8 %v2_10dc0, i8* %v4_10dcc, align 1
  %v5_10dcc = load i32, i32* %r2.global-to-local, align 4
  %v6_10dcc = add i32 %v5_10dcc, 1
  store i32 %v6_10dcc, i32* %r2.global-to-local, align 4
  %v0_10dd0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10dd0.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_10dd4.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_10dd4.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_10dc0
  %v1_10dd4.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_10dd4176.off0, %bb ], [ %v1_10dd4176.off0, %dec_label_pc_10dc0 ]
  %v3_10dd4 = load i32, i32* %r5.global-to-local, align 4
  %v4_10dd4 = inttoptr i32 %v3_10dd4 to i8*
  store i8 %v1_10dd4.off0, i8* %v4_10dd4, align 1
  %v0_10dd8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10dd8.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_10dcc, i32* %r1.global-to-local, align 4
  %v1_10dd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10dd8 = urem i32 %v1_10dd8, 256
  store i32 %v2_10dd8, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_10dd810 = load i32, i32* %ip.global-to-local, align 4
  %v2_10dd811 = urem i32 %v1_10dd810, 256
  store i32 %v2_10dd811, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_10ddc.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_10ddc.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_10df4.pre = phi i32 [ %v2_10dd811, %..thread12_crit_edge ], [ %v2_10dd8, %bb122 ], [ 0, %bb123 ]
  %v0_10de4 = load i32, i32* @r4, align 4
  %v1_10de4 = add i32 %v0_10de4, 1
  store i32 %v1_10de4, i32* @r4, align 4
  %v0_10de8 = load i32, i32* %r0.global-to-local, align 4
  %v1_10de8 = add i32 %v0_10de8, -1
  store i32 %v1_10de8, i32* %r0.global-to-local, align 4
  %v0_10dec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10dec, i32* %r2.global-to-local, align 4
  %v2_10df0 = icmp eq i32 %v1_10de8, 0
  store i1 %v2_10df0, i1* %cpsr_z.global-to-local, align 1
  %v1_10df4 = add nuw nsw i32 %v0_10df4.pre, 1
  store i32 %v1_10df4, i32* %ip.global-to-local, align 4
  %v1_10df8 = add i32 %v0_10dec, 1
  store i32 %v1_10df8, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_10de8, 1
  %extract.t179 = trunc i32 %v0_10df4.pre to i8
  br i1 %tmp124, label %dec_label_pc_10e00, label %dec_label_pc_10dc0

dec_label_pc_10e00:                               ; preds = %.thread12, %dec_label_pc_10d78
  %v2_10e04.lcssa = phi i32 [ %v2_10db0, %dec_label_pc_10d78 ], [ %v0_10dec, %.thread12 ]
  %v3_10d90 = inttoptr i32 %v2_10d90 to i8*
  store i32 0, i32* @r4, align 4
  %v3_10e04 = inttoptr i32 %v2_10e04.lcssa to i8*
  store i8 0, i8* %v3_10e04, align 1
  store i32 %v2_10da4, i32* %r0.global-to-local, align 4
  %v1_10e0c = bitcast i32* %stack_var_-2228 to i8*
  %v2_10e0c = call i32 @function_138c4(i8* %v1_10e0c)
  %v2_10e10 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_10e10, i32* %r1.global-to-local, align 4
  %v0_10e14 = load i32, i32* %fp.global-to-local, align 4
  %v2_10e14 = add i32 %v0_10e14, %v2_10e0c
  store i32 %v2_10e14, i32* @r5, align 4
  %v0_10e18 = load i32, i32* @r4, align 4
  store i32 %v0_10e18, i32* %stack_var_-64, align 4
  store i32 %v2_10da4, i32* %r0.global-to-local, align 4
  %v2_10e2c = call i32 @function_138c4(i8* %v1_10e0c)
  %v1_10e30 = add i32 %v2_10e2c, 17
  store i32 %v1_10e30, i32* %r0.global-to-local, align 4
  %v0_10e38 = call i32 @function_10a94()
  store i32 %v0_10e38, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), i32* %r1.global-to-local, align 4
  %v2_10e44 = call i32 @function_13fe0(i32 %v0_10e38, i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1))
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_10e50 = urem i32 %v2_10e44, 65536
  store i32 %v6_10e50, i32* %r3.global-to-local, align 4
  %v2_10e58 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10e58, i32* %r0.global-to-local, align 4
  %v2_10e60 = call i32 @function_13964(i32 %v2_10e58, i32 16)
  %sext = mul i32 %v2_10e44, 16777216
  %v4_10e64 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_10e10, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_10e64, i32* %lr.global-to-local, align 4
  %v0_10eac = load i32, i32* @r5, align 4
  %v2_10eac = add i32 %v0_10eac, 1
  store i32 %v2_10eac, i32* %ip.global-to-local, align 4
  %v2_10eb0 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_10eb0, i32* %r1.global-to-local, align 4
  %v5_10eb4 = trunc i32 %v4_10e64 to i8
  store i8 %v5_10eb4, i8* %stack_var_-2240, align 1
  %v0_10ecc = load i32, i32* @r4, align 4
  %v1_10ecc = trunc i32 %v0_10ecc to i8
  %v4_10ecc = inttoptr i32 %v2_10eac to i8*
  store i8 %v1_10ecc, i8* %v4_10ecc, align 1
  %v0_10ed0 = load i32, i32* @r4, align 4
  %v1_10ed0 = trunc i32 %v0_10ed0 to i8
  %v2_10ed0 = load i32, i32* %ip.global-to-local, align 4
  %v3_10ed0 = add i32 %v2_10ed0, 2
  %v4_10ed0 = inttoptr i32 %v3_10ed0 to i8*
  store i8 %v1_10ed0, i8* %v4_10ed0, align 1
  %v0_10ed4 = load i32, i32* %r0.global-to-local, align 4
  %v1_10ed4 = trunc i32 %v0_10ed4 to i8
  %v2_10ed4 = load i32, i32* %ip.global-to-local, align 4
  %v3_10ed4 = add i32 %v2_10ed4, 3
  %v4_10ed4 = inttoptr i32 %v3_10ed4 to i8*
  store i8 %v1_10ed4, i8* %v4_10ed4, align 1
  %v0_10ed8 = load i32, i32* %r0.global-to-local, align 4
  %v1_10ed8 = trunc i32 %v0_10ed8 to i8
  %v2_10ed8 = load i32, i32* %ip.global-to-local, align 4
  %v3_10ed8 = add i32 %v2_10ed8, 1
  %v4_10ed8 = inttoptr i32 %v3_10ed8 to i8*
  store i8 %v1_10ed8, i8* %v4_10ed8, align 1
  %v0_10ee0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ee0, i32* %sl.global-to-local, align 4
  %v2_10ee8 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_10ee8, i32* @r6, align 4
  %v3_10f20 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_10f3c = bitcast i8* %stack_var_-2240 to i32*
  %v2_10f8c = ptrtoint i32* %stack_var_-36 to i32
  %v2_10fb8 = ptrtoint i32* %stack_var_-48 to i32
  %v6_11014 = bitcast i8* %stack_var_-4288 to i32*
  %v1_11090 = add i32 %v2_10eb0, 12
  %v1_11098 = inttoptr i32 %v1_11090 to i8*
  %v1_110ac = add i32 %v2_10eb0, 1
  %v2_110ac = inttoptr i32 %v1_110ac to i8*
  %v1_110c8 = add i32 %v2_10eb0, 6
  %v2_110c8 = inttoptr i32 %v1_110c8 to i8*
  %v1_110cc = add i32 %v2_10eb0, 7
  %v2_110cc = inttoptr i32 %v1_110cc to i8*
  br label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %dec_label_pc_11040, %dec_label_pc_10e00
  %v1_10ef0 = phi i32 [ %v0_10eec.pre, %dec_label_pc_11040 ], [ -1, %dec_label_pc_10e00 ]
  %v7_10eec = icmp eq i32 %v1_10ef0, -1
  store i1 %v7_10eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eec, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_10eec
  store i32 %v1_10ef0, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_10eec, %bb125
  store i32 69368, i32* @lr, align 4
  %v1_10ef4 = xor i1 %v7_10eec, true
  call void @__pseudo_cond_branch(i1 %v1_10ef4, i32 ptrtoint (i32* @global_var_14284.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10f04 = call i32 @function_14b80(i32 2, i32 2, i32 0)
  store i32 %v3_10f04, i32* %r0.global-to-local, align 4
  %v7_10f08 = icmp eq i32 %v3_10f04, -1
  store i1 %v7_10f08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10f04, i32* @r7, align 4
  br i1 %v7_10f08, label %dec_label_pc_11080, label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %bb126
  store i32 %v2_10e58, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10f20 = call i32 @function_149dc(i32 %v3_10f04, %sockaddr* %v3_10f20, i32 16)
  store i32 %v4_10f20, i32* %r0.global-to-local, align 4
  %v7_10f24 = icmp eq i32 %v4_10f20, -1
  store i1 %v7_10f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f24, label %dec_label_pc_11048, label %dec_label_pc_10f2c

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10f14
  %v0_10f2c = load i32, i32* @r7, align 4
  store i32 %v0_10f2c, i32* %r0.global-to-local, align 4
  store i32 %v2_10da8, i32* %r1.global-to-local, align 4
  store i32 %v1_10e30, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10f3c = call i32 @function_14af0(i32 %v0_10f2c, i32* %v4_10f3c, i32 %v1_10e30, i32 16384)
  store i32 %v5_10f3c, i32* %r0.global-to-local, align 4
  %v7_10f40 = icmp eq i32 %v5_10f3c, -1
  store i1 %v7_10f40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f40, label %dec_label_pc_11048, label %dec_label_pc_10f48

dec_label_pc_10f48:                               ; preds = %dec_label_pc_10f2c
  %v0_10f48 = load i32, i32* @r7, align 4
  store i32 %v0_10f48, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10f54 = call i32 @function_14194(i32 3, i32 %v0_10f48)
  store i32 0, i32* @r4, align 4
  %v1_10f5c = or i32 %v2_10f54, 2048
  store i32 %v1_10f5c, i32* @r2, align 4
  %v0_10f60 = load i32, i32* @r7, align 4
  store i32 %v0_10f60, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10f68 = call i32 @function_14194(i32 4, i32 %v0_10f60)
  store i32 %v2_10f68, i32* %r0.global-to-local, align 4
  %v0_10f6c = load i32, i32* @r4, align 4
  store i32 %v0_10f6c, i32* %r3.global-to-local, align 4
  %v2_10f70154 = load i32, i32* @r6, align 4
  %v3_10f70155 = add i32 %v2_10f70154, %v0_10f6c
  %v4_10f70156 = inttoptr i32 %v3_10f70155 to i32*
  store i32 %v0_10f6c, i32* %v4_10f70156, align 4
  %v0_10f74157 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f74158 = add i32 %v0_10f74157, 4
  store i32 %v1_10f74158, i32* %r3.global-to-local, align 4
  %v7_10f78159 = icmp eq i32 %v1_10f74158, 128
  br i1 %v7_10f78159, label %dec_label_pc_10f80, label %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge

dec_label_pc_10f70.dec_label_pc_10f70_crit_edge:  ; preds = %dec_label_pc_10f48, %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge
  %v1_10f74160 = phi i32 [ %v1_10f74, %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge ], [ %v1_10f74158, %dec_label_pc_10f48 ]
  %v0_10f70.pre = load i32, i32* @r4, align 4
  %v2_10f70 = load i32, i32* @r6, align 4
  %v3_10f70 = add i32 %v2_10f70, %v1_10f74160
  %v4_10f70 = inttoptr i32 %v3_10f70 to i32*
  store i32 %v0_10f70.pre, i32* %v4_10f70, align 4
  %v0_10f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_10f74 = add i32 %v0_10f74, 4
  store i32 %v1_10f74, i32* %r3.global-to-local, align 4
  %v7_10f78 = icmp eq i32 %v1_10f74, 128
  br i1 %v7_10f78, label %dec_label_pc_10f80, label %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge

dec_label_pc_10f80:                               ; preds = %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge, %dec_label_pc_10f48
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10f80 = load i32, i32* @r7, align 4
  %v3_10f80 = udiv i32 %v0_10f80, 32
  %v3_10f88 = mul nuw nsw i32 %v3_10f80, 4
  store i32 %v3_10f88, i32* %r3.global-to-local, align 4
  store i32 %v2_10f8c, i32* %r2.global-to-local, align 4
  %v2_10f90 = add i32 %v3_10f88, %v2_10f8c
  store i32 %v2_10f90, i32* @r5, align 4
  %v1_10f94 = add i32 %v2_10f90, -156
  %v2_10f94 = inttoptr i32 %v1_10f94 to i32*
  %v3_10f94 = load i32, i32* %v2_10f94, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10f9c = urem i32 %v0_10f80, 32
  store i32 %v1_10f9c, i32* @r8, align 4
  %v7_10fa0 = shl i32 1, %v1_10f9c
  %v8_10fa0 = or i32 %v3_10f94, %v7_10fa0
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_10fa0, i32* %v2_10f94, align 4
  %v0_10fb0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10fb0, i32* %stack_var_-48, align 4
  store i32 %v2_10fb8, i32* @lr, align 4
  store i32 %v2_10e10, i32* %ip.global-to-local, align 4
  %v0_10fc0 = load i32, i32* @r7, align 4
  %v1_10fc0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10fc0 = add i32 %v1_10fc0, %v0_10fc0
  store i32 %v2_10fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_10ee8, i32* %r1.global-to-local, align 4
  %v0_10fcc = load i32, i32* @r4, align 4
  store i32 %v0_10fcc, i32* %r2.global-to-local, align 4
  store i32 %v0_10fcc, i32* %r3.global-to-local, align 4
  %v5_10fd8 = call i32 @function_144a4(i32 %v2_10fc0, i32 %v2_10ee8, i32 %v0_10fcc, i32 %v0_10fcc, i32 %v2_10fb8)
  store i32 %v5_10fd8, i32* %r0.global-to-local, align 4
  %v7_10fdc = icmp eq i32 %v5_10fd8, -1
  store i1 %v7_10fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fdc, label %dec_label_pc_11058, label %dec_label_pc_10fe4

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10f80
  %v2_10fe4 = icmp eq i32 %v5_10fd8, 0
  store i1 %v2_10fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fe4, label %dec_label_pc_11038, label %dec_label_pc_10fec

dec_label_pc_10fec:                               ; preds = %dec_label_pc_10fe4
  %v0_10fec = load i32, i32* @r5, align 4
  %v1_10fec = add i32 %v0_10fec, -156
  %v2_10fec = inttoptr i32 %v1_10fec to i32*
  %v3_10fec = load i32, i32* %v2_10fec, align 4
  %v1_10ff0 = load i32, i32* @r8, align 4
  %v6_10ff0 = ashr i32 %v3_10fec, %v1_10ff0
  store i32 %v6_10ff0, i32* %r3.global-to-local, align 4
  %v1_10ff4 = urem i32 %v6_10ff0, 2
  %v2_10ff4 = icmp eq i32 %v1_10ff4, 0
  store i1 %v2_10ff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ff4, label %dec_label_pc_11058, label %dec_label_pc_10ffc

dec_label_pc_10ffc:                               ; preds = %dec_label_pc_10fec
  store i32 %v2_10eb0, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11008 = load i32, i32* @r7, align 4
  store i32 %v0_11008, i32* %r0.global-to-local, align 4
  %v0_1100c = load i32, i32* @r4, align 4
  %v7_11014 = call i32 @function_14abc(i32 %v0_11008, i32* %v6_11014, i32 2048, i32 16384, i32 %v0_1100c, i32 %v0_1100c)
  store i32 %v7_11014, i32* %r4.global-to-local, align 4
  %v0_1101c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_1101c, i32* %r0.global-to-local, align 4
  %v1_11020 = inttoptr i32 %v0_1101c to i8*
  %v2_11020 = call i32 @function_138c4(i8* %v1_11020)
  %v1_11024 = add i32 %v2_11020, 17
  store i32 %v1_11024, i32* %r0.global-to-local, align 4
  %v0_11028 = load i32, i32* %r4.global-to-local, align 4
  %v3_11028 = icmp ult i32 %v0_11028, %v1_11024
  %v9_11028 = icmp eq i32 %v0_11028, %v1_11024
  store i1 %v9_11028, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_11028, label %dec_label_pc_11038, label %dec_label_pc_1108c

dec_label_pc_11038:                               ; preds = %dec_label_pc_10ffc, %dec_label_pc_1108c, %dec_label_pc_110c8, %dec_label_pc_10fe4, %dec_label_pc_11080
  %v0_11038 = load i32, i32* %sl.global-to-local, align 4
  %v7_11038 = icmp eq i32 %v0_11038, 5
  store i1 %v7_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11038, label %dec_label_pc_11058, label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_11048, %dec_label_pc_11038
  %v0_11040 = phi i32 [ %v0_11050, %dec_label_pc_11048 ], [ %v0_11038, %dec_label_pc_11038 ]
  %v1_11040 = add i32 %v0_11040, 1
  store i32 %v1_11040, i32* %sl.global-to-local, align 4
  %v0_10eec.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10eec

dec_label_pc_11048:                               ; preds = %dec_label_pc_10f2c, %dec_label_pc_10f14
  %v0_11048 = phi i32 [ %v5_10f3c, %dec_label_pc_10f2c ], [ %v4_10f20, %dec_label_pc_10f14 ]
  %v1_11048 = add i32 %v0_11048, 2
  store i32 %v1_11048, i32* %r0.global-to-local, align 4
  %v1_1104c = call i32 @function_156b4(i32 %v1_11048)
  store i32 %v1_1104c, i32* %r0.global-to-local, align 4
  %v0_11050 = load i32, i32* %sl.global-to-local, align 4
  %v7_11050 = icmp eq i32 %v0_11050, 5
  store i1 %v7_11050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11050, label %dec_label_pc_11058, label %dec_label_pc_11040

dec_label_pc_11058:                               ; preds = %dec_label_pc_11048, %dec_label_pc_11038, %dec_label_pc_10fec, %dec_label_pc_10f80, %dec_label_pc_110d8, %dec_label_pc_110e4.backedge
  %v0_11058 = load i32, i32* @r7, align 4
  store i32 %v0_11058, i32* %r0.global-to-local, align 4
  %v1_1105c = call i32 @function_14284(i32 %v0_11058)
  store i32 %v1_1105c, i32* %r0.global-to-local, align 4
  store i32 %v2_10d90, i32* %r2.global-to-local, align 4
  %v2_11064 = load i8, i8* %v3_10d90, align 1
  %v3_11064 = zext i8 %v2_11064 to i32
  store i32 %v3_11064, i32* @r4, align 4
  %v2_11068 = icmp eq i8 %v2_11064, 0
  store i1 %v2_11068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11068, label %dec_label_pc_111c4, label %dec_label_pc_11070

dec_label_pc_11070:                               ; preds = %dec_label_pc_11058, %dec_label_pc_111c4
  %stack_var_-4300.0 = phi i8* [ %v5_111d8, %dec_label_pc_111c4 ], [ %v3_10d90, %dec_label_pc_11058 ]
  %v4_11070 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_11070, i32* %r0.global-to-local, align 4
  %v2_1107c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1107c, i32* @r4, align 4
  store i32 %v6_10d78, i32* @r5, align 4
  store i32 %v9_10d78, i32* @r6, align 4
  store i32 %v12_10d78, i32* @r7, align 4
  store i32 %v15_10d78, i32* @r8, align 4
  ret i32 %v4_11070

dec_label_pc_11080:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_11084 = call i32 @function_156b4(i32 1)
  store i32 %v1_11084, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11038

dec_label_pc_1108c:                               ; preds = %dec_label_pc_10ffc
  store i32 %v2_10eb0, i32* %lr.global-to-local, align 4
  store i32 %v1_11090, i32* %fp.global-to-local, align 4
  store i32 %v1_11090, i32* %r0.global-to-local, align 4
  %v2_11098 = call i32 @function_138c4(i8* %v1_11098)
  store i32 %v2_11098, i32* %r0.global-to-local, align 4
  store i32 %v2_10eb0, i32* %ip.global-to-local, align 4
  store i32 %v2_10f8c, i32* %r1.global-to-local, align 4
  %v4_110a8 = load i8, i8* %stack_var_-4288, align 1
  %v5_110a8 = sext i8 %v4_110a8 to i32
  store i32 %v5_110a8, i32* %r3.global-to-local, align 4
  %v3_110ac = load i8, i8* %v2_110ac, align 1
  %v4_110ac = zext i8 %v3_110ac to i32
  store i32 %v4_110ac, i32* %r2.global-to-local, align 4
  store i32 %v4_10e64, i32* @lr, align 4
  %v4_110b4 = mul nuw nsw i32 %v4_110ac, 256
  %v5_110b4 = or i32 %v4_110b4, %v5_110a8
  store i32 %v5_110b4, i32* %r3.global-to-local, align 4
  %v0_110b8 = load i32, i32* %fp.global-to-local, align 4
  %v9_110bc = icmp eq i32 %v5_110b4, %v4_10e64
  store i1 %v9_110bc, i1* %cpsr_z.global-to-local, align 1
  %v2_110b8 = add i32 %v2_11098, 5
  %v1_110c0 = add i32 %v2_110b8, %v0_110b8
  store i32 %v1_110c0, i32* %r0.global-to-local, align 4
  br i1 %v9_110bc, label %dec_label_pc_110c8, label %dec_label_pc_11038

dec_label_pc_110c8:                               ; preds = %dec_label_pc_1108c
  %v3_110c8 = load i8, i8* %v2_110c8, align 1
  %v4_110c8 = zext i8 %v3_110c8 to i32
  store i32 %v4_110c8, i32* %r2.global-to-local, align 4
  %v3_110cc = load i8, i8* %v2_110cc, align 1
  %v4_110cc = zext i8 %v3_110cc to i32
  store i32 %v4_110cc, i32* %r3.global-to-local, align 4
  %v4_110d0 = mul nuw nsw i32 %v4_110cc, 256
  %v5_110d0 = or i32 %v4_110d0, %v4_110c8
  store i32 %v5_110d0, i32* %r2.global-to-local, align 4
  %v7_110d0 = icmp eq i32 %v5_110d0, 0
  store i1 %v7_110d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110d0, label %dec_label_pc_11038, label %dec_label_pc_110d8

dec_label_pc_110d8:                               ; preds = %dec_label_pc_110c8
  %v3_110dc = mul nuw nsw i32 %v4_110c8, 256
  %v5_110e0 = or i32 %v4_110cc, %v3_110dc
  %v1_11198 = add i32 %v2_10eb0, -49152
  %v1_110e4143 = add nsw i32 %v5_110e0, -1
  %v3_110e8144 = mul i32 %v1_110e4143, 65536
  store i32 %v3_110e8144, i32* %r3.global-to-local, align 4
  %v7_110ec150 = icmp eq i32 %v3_110e8144, -65536
  store i1 %v7_110ec150, i1* %cpsr_z.global-to-local, align 1
  %v3_110f0151 = urem i32 %v1_110e4143, 65536
  store i32 %v3_110f0151, i32* @r6, align 4
  br i1 %v7_110ec150, label %dec_label_pc_11058, label %dec_label_pc_110f8.lr.ph

dec_label_pc_110f8.lr.ph:                         ; preds = %dec_label_pc_110d8
  %v1_11274 = add i32 %v2_10d90, 4
  %v2_11274 = inttoptr i32 %v1_11274 to i32*
  br label %dec_label_pc_110f8

dec_label_pc_110f8:                               ; preds = %dec_label_pc_110f8.lr.ph, %dec_label_pc_110e4.backedge
  %v3_110f0153 = phi i32 [ %v3_110f0151, %dec_label_pc_110f8.lr.ph ], [ %v3_110f0, %dec_label_pc_110e4.backedge ]
  %v0_1114c152 = phi i32 [ %v1_110c0, %dec_label_pc_110f8.lr.ph ], [ %storemerge, %dec_label_pc_110e4.backedge ]
  store i32 %v0_1114c152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_1110417 = inttoptr i32 %v0_1114c152 to i8*
  %v2_1110418 = load i8, i8* %v1_1110417, align 1
  %v3_1110419 = zext i8 %v2_1110418 to i32
  store i32 %v3_1110419, i32* %r2.global-to-local, align 4
  %v2_1110820 = icmp eq i8 %v2_1110418, 0
  store i1 %v2_1110820, i1* %cpsr_z.global-to-local, align 1
  %v3_1110c21 = mul nuw nsw i32 %v3_1110419, 256
  store i32 %v3_1110c21, i32* %r1.global-to-local, align 4
  br i1 %v2_1110820, label %dec_label_pc_11144, label %dec_label_pc_11114.preheader

dec_label_pc_11114.preheader:                     ; preds = %dec_label_pc_110f8, %dec_label_pc_11104.backedge
  %v1_111e8 = phi i32 [ %v1_111e849, %dec_label_pc_11104.backedge ], [ 1, %dec_label_pc_110f8 ]
  %v0_111e047 = phi i32 [ %v0_111e0, %dec_label_pc_11104.backedge ], [ 0, %dec_label_pc_110f8 ]
  %v0_1112045 = phi i32 [ %v3_1110c, %dec_label_pc_11104.backedge ], [ %v3_1110c21, %dec_label_pc_110f8 ]
  %v0_1111c43 = phi i32 [ %v1_111e4, %dec_label_pc_11104.backedge ], [ %v0_1114c152, %dec_label_pc_110f8 ]
  %v0_1111441 = phi i32 [ %v3_11104, %dec_label_pc_11104.backedge ], [ %v3_1110419, %dec_label_pc_110f8 ]
  br label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_11114.preheader, %dec_label_pc_1111c
  %v0_111e0 = phi i32 [ %v0_111e047, %dec_label_pc_11114.preheader ], [ 1, %dec_label_pc_1111c ]
  %v0_11120 = phi i32 [ %v0_1112045, %dec_label_pc_11114.preheader ], [ %v3_1113c, %dec_label_pc_1111c ]
  %v0_111e4 = phi i32 [ %v0_1111c43, %dec_label_pc_11114.preheader ], [ %v2_1112c, %dec_label_pc_1111c ]
  %v0_11114 = phi i32 [ %v0_1111441, %dec_label_pc_11114.preheader ], [ %v3_11130, %dec_label_pc_1111c ]
  %v7_11114 = icmp eq i32 %v0_11114, 191
  store i1 %v7_11114, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_11114, 192
  br i1 %tmp180, label %dec_label_pc_111e0, label %dec_label_pc_1111c

dec_label_pc_1111c:                               ; preds = %dec_label_pc_11114
  %v1_1111c = add i32 %v0_111e4, 1
  %v2_1111c = inttoptr i32 %v1_1111c to i8*
  %v3_1111c = load i8, i8* %v2_1111c, align 1
  %v4_1111c = zext i8 %v3_1111c to i32
  store i32 %v2_10eb0, i32* %r1.global-to-local, align 4
  %v2_11120 = add i32 %v0_11120, %v1_11198
  %v2_1112c = add i32 %v2_11120, %v4_1111c
  store i32 %v2_1112c, i32* %r3.global-to-local, align 4
  %v1_11130 = inttoptr i32 %v2_1112c to i8*
  %v2_11130 = load i8, i8* %v1_11130, align 1
  %v3_11130 = zext i8 %v2_11130 to i32
  store i32 %v3_11130, i32* %r2.global-to-local, align 4
  %v2_11134 = icmp eq i8 %v2_11130, 0
  store i1 %v2_11134, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_1113c = mul nuw nsw i32 %v3_11130, 256
  store i32 %v3_1113c, i32* %r1.global-to-local, align 4
  br i1 %v2_11134, label %dec_label_pc_11144, label %dec_label_pc_11114

dec_label_pc_11144:                               ; preds = %dec_label_pc_11104.backedge, %dec_label_pc_1111c, %dec_label_pc_110f8
  %v1_11148 = phi i32 [ 1, %dec_label_pc_110f8 ], [ %v1_111e8, %dec_label_pc_1111c ], [ %v1_111e849, %dec_label_pc_11104.backedge ]
  %v0_11144 = phi i32 [ 0, %dec_label_pc_110f8 ], [ 1, %dec_label_pc_1111c ], [ %v0_111e0, %dec_label_pc_11104.backedge ]
  %v7_11144 = icmp eq i32 %v0_11144, 1
  store i1 %v7_11144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11144, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_11144
  %v2_11148 = add i32 %v1_11148, 1
  store i32 %v2_11148, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_11144, %bb127
  %v1_1114c = phi i32 [ %v1_11148, %dec_label_pc_11144 ], [ %v2_11148, %bb127 ]
  %v2_1114c = add i32 %v1_1114c, %v0_1114c152
  store i32 %v2_1114c, i32* @r4, align 4
  %v3_11150 = inttoptr i32 %v2_1114c to i8*
  %v4_11150 = load i8, i8* %v3_11150, align 1
  %v6_11150 = zext i8 %v4_11150 to i32
  store i32 %v6_11150, i32* %r3.global-to-local, align 4
  %v1_11154 = add i32 %v2_1114c, 1
  %v2_11154 = inttoptr i32 %v1_11154 to i8*
  %v3_11154 = load i8, i8* %v2_11154, align 1
  %v4_11154 = zext i8 %v3_11154 to i32
  store i32 %v4_11154, i32* %r2.global-to-local, align 4
  %v4_11158 = mul nuw nsw i32 %v4_11154, 256
  %v5_11158 = or i32 %v4_11158, %v6_11150
  store i32 %v5_11158, i32* %r3.global-to-local, align 4
  %v7_1115c = icmp eq i32 %v5_11158, 256
  store i1 %v7_1115c, i1* %cpsr_z.global-to-local, align 1
  %v1_11160 = add i32 %v2_1114c, 10
  store i32 %v1_11160, i32* @r5, align 4
  br i1 %v7_1115c, label %dec_label_pc_11200, label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %dec_label_pc_11200, %bb128
  store i32 %v1_11160, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1117423 = inttoptr i32 %v1_11160 to i8*
  %v2_1117424 = load i8, i8* %v1_1117423, align 1
  %v3_1117425 = zext i8 %v2_1117424 to i32
  store i32 %v3_1117425, i32* %r2.global-to-local, align 4
  %v2_1117826 = icmp eq i8 %v2_1117424, 0
  store i1 %v2_1117826, i1* %cpsr_z.global-to-local, align 1
  %v3_1117c27 = mul nuw nsw i32 %v3_1117425, 256
  store i32 %v3_1117c27, i32* %r1.global-to-local, align 4
  br i1 %v2_1117826, label %dec_label_pc_111b4, label %dec_label_pc_11184.preheader

dec_label_pc_11184.preheader:                     ; preds = %dec_label_pc_11168, %dec_label_pc_11174.backedge
  %v1_111f8 = phi i32 [ %v1_111f864, %dec_label_pc_11174.backedge ], [ 1, %dec_label_pc_11168 ]
  %v0_111f062 = phi i32 [ %v0_111f0, %dec_label_pc_11174.backedge ], [ 0, %dec_label_pc_11168 ]
  %v0_1119060 = phi i32 [ %v3_1117c, %dec_label_pc_11174.backedge ], [ %v3_1117c27, %dec_label_pc_11168 ]
  %v0_1118c58 = phi i32 [ %v1_111f4, %dec_label_pc_11174.backedge ], [ %v1_11160, %dec_label_pc_11168 ]
  %v0_1118456 = phi i32 [ %v3_11174, %dec_label_pc_11174.backedge ], [ %v3_1117425, %dec_label_pc_11168 ]
  br label %dec_label_pc_11184

dec_label_pc_11184:                               ; preds = %dec_label_pc_11184.preheader, %dec_label_pc_1118c
  %v0_111f0 = phi i32 [ %v0_111f062, %dec_label_pc_11184.preheader ], [ 1, %dec_label_pc_1118c ]
  %v0_11190 = phi i32 [ %v0_1119060, %dec_label_pc_11184.preheader ], [ %v3_111ac, %dec_label_pc_1118c ]
  %v0_111f4 = phi i32 [ %v0_1118c58, %dec_label_pc_11184.preheader ], [ %v2_1119c, %dec_label_pc_1118c ]
  %v0_11184 = phi i32 [ %v0_1118456, %dec_label_pc_11184.preheader ], [ %v3_111a0, %dec_label_pc_1118c ]
  %v7_11184 = icmp eq i32 %v0_11184, 191
  store i1 %v7_11184, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_11184, 192
  br i1 %tmp181, label %dec_label_pc_111f0, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11184
  %v1_1118c = add i32 %v0_111f4, 1
  %v2_1118c = inttoptr i32 %v1_1118c to i8*
  %v3_1118c = load i8, i8* %v2_1118c, align 1
  %v4_1118c = zext i8 %v3_1118c to i32
  store i32 %v2_10eb0, i32* %r1.global-to-local, align 4
  %v2_11190 = add i32 %v0_11190, %v1_11198
  %v2_1119c = add i32 %v2_11190, %v4_1118c
  store i32 %v2_1119c, i32* %r3.global-to-local, align 4
  %v1_111a0 = inttoptr i32 %v2_1119c to i8*
  %v2_111a0 = load i8, i8* %v1_111a0, align 1
  %v3_111a0 = zext i8 %v2_111a0 to i32
  store i32 %v3_111a0, i32* %r2.global-to-local, align 4
  %v2_111a4 = icmp eq i8 %v2_111a0, 0
  store i1 %v2_111a4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_111ac = mul nuw nsw i32 %v3_111a0, 256
  store i32 %v3_111ac, i32* %r1.global-to-local, align 4
  br i1 %v2_111a4, label %dec_label_pc_111b4, label %dec_label_pc_11184

dec_label_pc_111b4:                               ; preds = %dec_label_pc_11174.backedge, %dec_label_pc_1118c, %dec_label_pc_11168
  %v1_111b8 = phi i32 [ 1, %dec_label_pc_11168 ], [ %v1_111f8, %dec_label_pc_1118c ], [ %v1_111f864, %dec_label_pc_11174.backedge ]
  %v0_111b4 = phi i32 [ 0, %dec_label_pc_11168 ], [ 1, %dec_label_pc_1118c ], [ %v0_111f0, %dec_label_pc_11174.backedge ]
  %v7_111b4 = icmp eq i32 %v0_111b4, 1
  store i1 %v7_111b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111b4, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_111b4
  %v2_111b8 = add i32 %v1_111b8, 1
  store i32 %v2_111b8, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_111b4, %bb129
  %v1_111bc = phi i32 [ %v1_111b8, %dec_label_pc_111b4 ], [ %v2_111b8, %bb129 ]
  %v2_111bc = add i32 %v1_111bc, %v1_11160
  br label %dec_label_pc_110e4.backedge

dec_label_pc_110e4.backedge:                      ; preds = %bb130, %dec_label_pc_112a8
  %v0_110e4.pre = phi i32 [ %v3_110f0153, %bb130 ], [ %v0_110e4.pre.pre, %dec_label_pc_112a8 ]
  %storemerge = phi i32 [ %v2_111bc, %bb130 ], [ %v2_112bc, %dec_label_pc_112a8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_110e4 = add i32 %v0_110e4.pre, -1
  %v3_110e8 = mul i32 %v1_110e4, 65536
  store i32 %v3_110e8, i32* %r3.global-to-local, align 4
  %v7_110ec = icmp eq i32 %v3_110e8, -65536
  store i1 %v7_110ec, i1* %cpsr_z.global-to-local, align 1
  %v3_110f0 = urem i32 %v1_110e4, 65536
  store i32 %v3_110f0, i32* @r6, align 4
  br i1 %v7_110ec, label %dec_label_pc_11058, label %dec_label_pc_110f8

dec_label_pc_111c4:                               ; preds = %dec_label_pc_11058
  %v1_111c4 = add i32 %v2_10d90, 4
  %v2_111c4 = inttoptr i32 %v1_111c4 to i32*
  %v3_111c4 = load i32, i32* %v2_111c4, align 4
  store i32 %v3_111c4, i32* %r0.global-to-local, align 4
  %v2_111c8 = icmp eq i32 %v3_111c4, 0
  store i1 %v2_111c8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_111d0.184 to i32), i32* @lr, align 4
  %v1_111cc = xor i1 %v2_111c8, true
  call void @__pseudo_cond_branch(i1 %v1_111cc, i32 ptrtoint (i32* @global_var_14edc.59 to i32))
  store i32 %v2_10d90, i32* @r0, align 4
  %v0_111d4 = call i32 @function_14edc()
  store i32 %v0_111d4, i32* %r0.global-to-local, align 4
  %v0_111d8 = load i32, i32* @r4, align 4
  %v5_111d8 = inttoptr i32 %v0_111d8 to i8*
  br label %dec_label_pc_11070

dec_label_pc_111e0:                               ; preds = %dec_label_pc_11114
  %v2_111e0 = icmp eq i32 %v0_111e0, 0
  store i1 %v2_111e0, i1* %cpsr_z.global-to-local, align 1
  %v1_111e4 = add i32 %v0_111e4, 1
  store i32 %v1_111e4, i32* %r3.global-to-local, align 4
  br i1 %v2_111e0, label %bb131, label %dec_label_pc_11104.backedge

dec_label_pc_11104.backedge:                      ; preds = %dec_label_pc_111e0, %bb131
  %v1_111e849 = phi i32 [ %v1_111e8, %dec_label_pc_111e0 ], [ %v2_111e8, %bb131 ]
  %v1_11104 = inttoptr i32 %v1_111e4 to i8*
  %v2_11104 = load i8, i8* %v1_11104, align 1
  %v3_11104 = zext i8 %v2_11104 to i32
  store i32 %v3_11104, i32* %r2.global-to-local, align 4
  %v2_11108 = icmp eq i8 %v2_11104, 0
  store i1 %v2_11108, i1* %cpsr_z.global-to-local, align 1
  %v3_1110c = mul nuw nsw i32 %v3_11104, 256
  store i32 %v3_1110c, i32* %r1.global-to-local, align 4
  br i1 %v2_11108, label %dec_label_pc_11144, label %dec_label_pc_11114.preheader

bb131:                                            ; preds = %dec_label_pc_111e0
  %v2_111e8 = add i32 %v1_111e8, 1
  store i32 %v2_111e8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11104.backedge

dec_label_pc_111f0:                               ; preds = %dec_label_pc_11184
  %v2_111f0 = icmp eq i32 %v0_111f0, 0
  store i1 %v2_111f0, i1* %cpsr_z.global-to-local, align 1
  %v1_111f4 = add i32 %v0_111f4, 1
  store i32 %v1_111f4, i32* %r3.global-to-local, align 4
  br i1 %v2_111f0, label %bb132, label %dec_label_pc_11174.backedge

dec_label_pc_11174.backedge:                      ; preds = %dec_label_pc_111f0, %bb132
  %v1_111f864 = phi i32 [ %v1_111f8, %dec_label_pc_111f0 ], [ %v2_111f8, %bb132 ]
  %v1_11174 = inttoptr i32 %v1_111f4 to i8*
  %v2_11174 = load i8, i8* %v1_11174, align 1
  %v3_11174 = zext i8 %v2_11174 to i32
  store i32 %v3_11174, i32* %r2.global-to-local, align 4
  %v2_11178 = icmp eq i8 %v2_11174, 0
  store i1 %v2_11178, i1* %cpsr_z.global-to-local, align 1
  %v3_1117c = mul nuw nsw i32 %v3_11174, 256
  store i32 %v3_1117c, i32* %r1.global-to-local, align 4
  br i1 %v2_11178, label %dec_label_pc_111b4, label %dec_label_pc_11184.preheader

bb132:                                            ; preds = %dec_label_pc_111f0
  %v2_111f8 = add i32 %v1_111f8, 1
  store i32 %v2_111f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11174.backedge

dec_label_pc_11200:                               ; preds = %bb128
  %v1_11200 = add i32 %v2_1114c, 2
  %v2_11200 = inttoptr i32 %v1_11200 to i8*
  %v3_11200 = load i8, i8* %v2_11200, align 1
  %v4_11200 = zext i8 %v3_11200 to i32
  store i32 %v4_11200, i32* %r3.global-to-local, align 4
  %v1_11204 = add i32 %v2_1114c, 3
  %v2_11204 = inttoptr i32 %v1_11204 to i8*
  %v3_11204 = load i8, i8* %v2_11204, align 1
  %v4_11204 = zext i8 %v3_11204 to i32
  store i32 %v4_11204, i32* %r2.global-to-local, align 4
  %v4_11208 = mul nuw nsw i32 %v4_11204, 256
  %v5_11208 = or i32 %v4_11208, %v4_11200
  store i32 %v5_11208, i32* %r3.global-to-local, align 4
  %v7_1120c = icmp eq i32 %v5_11208, 256
  store i1 %v7_1120c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1120c, label %dec_label_pc_11214, label %dec_label_pc_11168

dec_label_pc_11214:                               ; preds = %dec_label_pc_11200
  %v1_11214 = add i32 %v2_1114c, 8
  %v2_11214 = inttoptr i32 %v1_11214 to i8*
  %v3_11214 = load i8, i8* %v2_11214, align 1
  %v4_11214 = zext i8 %v3_11214 to i32
  store i32 %v4_11214, i32* %r1.global-to-local, align 4
  %v1_11218 = add i32 %v2_1114c, 9
  %v2_11218 = inttoptr i32 %v1_11218 to i8*
  %v3_11218 = load i8, i8* %v2_11218, align 1
  %v4_11218 = zext i8 %v3_11218 to i32
  store i32 %v4_11218, i32* %r0.global-to-local, align 4
  %v4_1121c = mul nuw nsw i32 %v4_11218, 256
  %v5_1121c = or i32 %v4_1121c, %v4_11214
  %v3_11220 = mul i32 %v5_1121c, 65536
  store i32 %v3_11220, i32* %r2.global-to-local, align 4
  %v3_11224 = mul nuw nsw i32 %v4_11214, 256
  %v5_1122c = or i32 %v4_11218, %v3_11224
  store i32 %v5_1122c, i32* %r3.global-to-local, align 4
  %v7_11230 = icmp eq i32 %v5_1122c, 4
  store i1 %v7_11230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11230, label %dec_label_pc_11238, label %dec_label_pc_112a8

dec_label_pc_11238:                               ; preds = %dec_label_pc_11214
  %v2_11238 = inttoptr i32 %v1_11160 to i8*
  %v3_11238 = load i8, i8* %v2_11238, align 1
  %v4_11238 = zext i8 %v3_11238 to i32
  store i32 %v4_11238, i32* %r3.global-to-local, align 4
  store i32 %v2_10e10, i32* %r2.global-to-local, align 4
  %v1_11244 = add i32 %v2_1114c, 11
  %v2_11244 = inttoptr i32 %v1_11244 to i8*
  %v3_11244 = load i8, i8* %v2_11244, align 1
  %v4_11244 = zext i8 %v3_11244 to i32
  store i32 %v4_11244, i32* %r2.global-to-local, align 4
  store i32 %v2_10e10, i32* %r3.global-to-local, align 4
  %v1_11250 = add i32 %v2_1114c, 12
  %v2_11250 = inttoptr i32 %v1_11250 to i8*
  %v3_11250 = load i8, i8* %v2_11250, align 1
  %v4_11250 = zext i8 %v3_11250 to i32
  store i32 %v4_11250, i32* %r3.global-to-local, align 4
  store i32 %v2_10e10, i32* %ip.global-to-local, align 4
  %v1_1125c = add i32 %v2_1114c, 13
  %v2_1125c = inttoptr i32 %v1_1125c to i8*
  %v3_1125c = load i8, i8* %v2_1125c, align 1
  %v4_1125c = zext i8 %v3_1125c to i32
  store i32 %v4_1125c, i32* %r2.global-to-local, align 4
  store i32 %v2_10d90, i32* @lr, align 4
  %v2_11268 = load i8, i8* %v3_10d90, align 1
  %v3_11268 = zext i8 %v2_11268 to i32
  %v3_1126c = mul nuw nsw i32 %v3_11268, 4
  %v1_11270 = add nuw nsw i32 %v3_1126c, 4
  store i32 %v1_11270, i32* %r1.global-to-local, align 4
  %v3_11274 = load i32, i32* %v2_11274, align 4
  store i32 %v3_11274, i32* %r0.global-to-local, align 4
  %v3_11278 = sext i8 %v3_1125c to i32
  %v5_11278 = sext i8 %v3_11250 to i32
  %v10_11278 = call i32 @function_14fcc(i32 %v3_11274, i32 %v1_11270, i32 %v3_11278, i32 %v5_11278)
  store i32 %v10_11278, i32* %r0.global-to-local, align 4
  store i32 %v2_10d90, i32* %r1.global-to-local, align 4
  store i32 %v2_10e10, i32* %ip.global-to-local, align 4
  %v2_11284 = load i8, i8* %v3_10d90, align 1
  %v3_11284 = zext i8 %v2_11284 to i32
  store i32 %v3_11284, i32* %r2.global-to-local, align 4
  %v4_11288 = sext i8 %v3_11238 to i32
  store i32 %v4_11288, i32* %r3.global-to-local, align 4
  store i32 %v2_10d90, i32* @lr, align 4
  %v1_11290 = add nuw nsw i32 %v3_11284, 1
  store i32 %v1_11290, i32* %r1.global-to-local, align 4
  %v5_11294 = mul nuw nsw i32 %v3_11284, 4
  %v6_11294 = add i32 %v5_11294, %v10_11278
  %v7_11294 = inttoptr i32 %v6_11294 to i32*
  store i32 %v4_11288, i32* %v7_11294, align 4
  %v1_11298 = load i32, i32* @lr, align 4
  %v2_11298 = add i32 %v1_11298, 4
  %v3_11298 = inttoptr i32 %v2_11298 to i32*
  store i32 %v10_11278, i32* %v3_11298, align 4
  %v0_1129c = load i32, i32* %r1.global-to-local, align 4
  %v1_1129c = trunc i32 %v0_1129c to i8
  %v2_1129c = load i32, i32* @lr, align 4
  %v3_1129c = inttoptr i32 %v2_1129c to i8*
  store i8 %v1_1129c, i8* %v3_1129c, align 1
  %v0_112a0 = load i32, i32* @r4, align 4
  %v1_112a0 = add i32 %v0_112a0, 9
  %v2_112a0 = inttoptr i32 %v1_112a0 to i8*
  %v3_112a0 = load i8, i8* %v2_112a0, align 1
  %v4_112a0 = zext i8 %v3_112a0 to i32
  store i32 %v4_112a0, i32* %r0.global-to-local, align 4
  %v1_112a4 = add i32 %v0_112a0, 8
  %v2_112a4 = inttoptr i32 %v1_112a4 to i8*
  %v3_112a4 = load i8, i8* %v2_112a4, align 1
  %v4_112a4 = zext i8 %v3_112a4 to i32
  store i32 %v4_112a4, i32* %r1.global-to-local, align 4
  %v0_112bc.pre = load i32, i32* @r5, align 4
  %v0_110e4.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_112a8

dec_label_pc_112a8:                               ; preds = %dec_label_pc_11214, %dec_label_pc_11238
  %v0_110e4.pre.pre = phi i32 [ %v3_110f0153, %dec_label_pc_11214 ], [ %v0_110e4.pre.pre.pre, %dec_label_pc_11238 ]
  %v0_112bc = phi i32 [ %v1_11160, %dec_label_pc_11214 ], [ %v0_112bc.pre, %dec_label_pc_11238 ]
  %v1_112a8 = phi i32 [ %v4_11218, %dec_label_pc_11214 ], [ %v4_112a0, %dec_label_pc_11238 ]
  %v0_112a8 = phi i32 [ %v4_11214, %dec_label_pc_11214 ], [ %v4_112a4, %dec_label_pc_11238 ]
  %v4_112a8 = mul nuw nsw i32 %v1_112a8, 256
  %v5_112a8 = or i32 %v4_112a8, %v0_112a8
  %v3_112ac = mul i32 %v5_112a8, 65536
  store i32 %v3_112ac, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_112a8, 256
  %v5_112b8 = or i32 %tmp133, %v1_112a8
  store i32 %v5_112b8, i32* %r3.global-to-local, align 4
  %v2_112bc = add i32 %v5_112b8, %v0_112bc
  br label %dec_label_pc_110e4.backedge

; uselistorder directives
  uselistorder i32 %v1_112a8, { 1, 0 }
  uselistorder i32 %v3_11284, { 1, 0, 2 }
  uselistorder i32 %v10_11278, { 1, 0, 2 }
  uselistorder i32 %v4_11218, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11214, { 2, 0, 1, 3 }
  uselistorder i32 %v2_111f8, { 1, 0 }
  uselistorder i32 %v3_11174, { 0, 2, 1 }
  uselistorder i32 %v1_111f864, { 1, 0 }
  uselistorder i32 %v1_111f4, { 1, 2, 0 }
  uselistorder i32 %v2_111e8, { 1, 0 }
  uselistorder i32 %v3_11104, { 0, 2, 1 }
  uselistorder i32 %v1_111e849, { 1, 0 }
  uselistorder i32 %v1_111e4, { 1, 2, 0 }
  uselistorder i1 %v7_110ec, { 1, 0 }
  uselistorder i32 %v1_110e4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_111a0, { 0, 2, 1 }
  uselistorder i32 %v2_1119c, { 1, 2, 0 }
  uselistorder i32 %v0_111f0, { 2, 0, 1 }
  uselistorder i32 %v1_111f8, { 1, 2, 0 }
  uselistorder i32 %v3_1117c27, { 1, 0 }
  uselistorder i32 %v3_1117425, { 1, 0, 2 }
  uselistorder i32 %v1_11160, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_1114c, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_11130, { 0, 2, 1 }
  uselistorder i32 %v2_1112c, { 1, 2, 0 }
  uselistorder i32 %v0_111e0, { 2, 0, 1 }
  uselistorder i32 %v1_111e8, { 1, 2, 0 }
  uselistorder i32 %v3_1110c21, { 1, 0 }
  uselistorder i32 %v3_1110419, { 1, 0, 2 }
  uselistorder i32 %v0_1114c152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_110f0151, { 1, 0 }
  uselistorder i1 %v7_110ec150, { 1, 0 }
  uselistorder i32 %v1_110e4143, { 1, 0 }
  uselistorder i32 %v4_110cc, { 1, 0, 2 }
  uselistorder i32 %v0_11050, { 1, 0 }
  uselistorder i32 %v0_11028, { 1, 0 }
  uselistorder i1 %v7_10fdc, { 1, 0 }
  uselistorder i32 %v5_10fd8, { 1, 0, 2 }
  uselistorder i32 %v1_10f9c, { 1, 0 }
  uselistorder i32 %v3_10f88, { 1, 0 }
  uselistorder i32 %v0_10f80, { 1, 0 }
  uselistorder i32 %v1_10f74, { 1, 2, 0 }
  uselistorder i1 %v7_10f40, { 1, 0 }
  uselistorder i32 %v5_10f3c, { 1, 0, 2 }
  uselistorder i1 %v7_10f24, { 1, 0 }
  uselistorder i32 %v4_10f20, { 1, 0, 2 }
  uselistorder i1 %v7_10f08, { 1, 0 }
  uselistorder i32 %v3_10f04, { 2, 1, 0, 3 }
  uselistorder i1 %v7_10eec, { 2, 1, 0 }
  uselistorder i32 %v1_10ef0, { 1, 0 }
  uselistorder i32 %v1_11090, { 1, 2, 0 }
  uselistorder i32 %v2_10f8c, { 1, 0, 2 }
  uselistorder i32 %v2_10ee8, { 1, 0, 2 }
  uselistorder i32 %v2_10eb0, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_10e64, { 3, 0, 2, 1 }
  uselistorder i32 %v1_10e30, { 1, 0, 2 }
  uselistorder i32 %v0_10dec, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10de8, { 1, 0, 2 }
  uselistorder i32 %v1_10de4, { 1, 0 }
  uselistorder i32 %v2_10dd811, { 1, 0 }
  uselistorder i32 %v2_10dd8, { 1, 0 }
  uselistorder i1 %v8_10dc8, { 1, 0 }
  uselistorder i32 %v2_10db0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10d98, { 1, 0 }
  uselistorder i32 %v2_10d90, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 13, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 26, 27, 29 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 10, 13, 8, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 27, 29, 26, 30, 28 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 11, 5, 16, 6, 7, 17, 8, 9, 10, 1, 12, 13, 14, 15, 0, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 27, 28, 29, 30, 35, 33, 31, 32, 34, 37 }
  uselistorder i32 (i32)* @function_156b4, { 8, 7, 11, 10, 9, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_10000.26 to i32), { 1, 2, 3, 4, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_10000.26 to i32), i32 -1), { 46, 47, 0, 48, 20, 49, 19, 50, 18, 51, 1, 3, 2, 22, 52, 21, 53, 55, 4, 56, 54, 23, 57, 24, 58, 25, 59, 60, 5, 26, 61, 62, 6, 27, 63, 65, 7, 66, 64, 31, 67, 28, 68, 29, 69, 30, 70, 72, 8, 73, 71, 74, 75, 35, 76, 34, 77, 32, 78, 33, 79, 9, 10, 11, 81, 80, 36, 82, 37, 83, 12, 13, 14, 85, 84, 38, 86, 39, 87, 88, 89, 15, 90, 91, 42, 92, 40, 93, 41, 94, 96, 16, 97, 95, 45, 98, 43, 99, 44, 100, 17, 101 }
  uselistorder label %dec_label_pc_112a8, { 1, 0 }
  uselistorder label %dec_label_pc_11174.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_11104.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_110e4.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_11184, { 1, 0 }
  uselistorder label %dec_label_pc_11184.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_11114, { 1, 0 }
  uselistorder label %dec_label_pc_11114.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_110f8, { 1, 0 }
  uselistorder label %dec_label_pc_11070, { 1, 0 }
  uselistorder label %dec_label_pc_11058, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11038, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_10f70.dec_label_pc_10f70_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10dc0, { 1, 0 }
}

define i32 @function_112c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_112c4:
  %v2_112c8 = load i32, i32* @global_var_1f8cc.186, align 4
  %v2_112d0 = call i32 @function_14384(i32 %v2_112c8, i32 9)
  %v0_112d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_112d4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_112c4
  %v2_112d4 = load i32, i32* @ip, align 4
  %v5_112d41 = udiv i32 %v2_112d4, 131072
  %v6_112d4 = and i32 %v5_112d41, 9
  call void @__pseudo_branch(i32 %v6_112d4)
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_112c4, %bb
  ret i32 %v2_112d0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_112d8() local_unnamed_addr {
dec_label_pc_112d8:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_112d8 = load i32, i32* @r4, align 4
  store i32 %v3_112d8, i32* %stack_var_-16, align 4
  %v0_112dc = load i32, i32* @r0, align 4
  store i32 %v0_112dc, i32* %r5.global-to-local, align 4
  %v1_112e0 = add i32 %v0_112dc, 4
  %v2_112e0 = inttoptr i32 %v1_112e0 to i32*
  %v3_112e0 = load i32, i32* %v2_112e0, align 4
  store i32 %v3_112e0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 70404, i32* @lr, align 4
  %v1_11300 = icmp ne i32 %v3_112e0, -1
  call void @__pseudo_cond_branch(i1 %v1_11300, i32 ptrtoint (i32* @global_var_14284.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11310 = call i32 @function_14b80(i32 2, i32 1, i32 0)
  store i32 %v3_11310, i32* %r3.global-to-local, align 4
  %v7_11318 = icmp eq i32 %v3_11310, -1
  %v0_11320 = load i32, i32* %r5.global-to-local, align 4
  %v1_11320 = add i32 %v0_11320, 28
  store i32 %v1_11320, i32* %r0.global-to-local, align 4
  %v2_11324 = add i32 %v0_11320, 4
  %v3_11324 = inttoptr i32 %v2_11324 to i32*
  store i32 %v3_11310, i32* %v3_11324, align 4
  br i1 %v7_11318, label %dec_label_pc_112d8.dec_label_pc_113a0_crit_edge, label %dec_label_pc_1132c

dec_label_pc_112d8.dec_label_pc_113a0_crit_edge:  ; preds = %dec_label_pc_112d8
  %v14_113a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113a0

dec_label_pc_1132c:                               ; preds = %dec_label_pc_112d8
  %v0_1132c = load i32, i32* %r6.global-to-local, align 4
  %v1_1132c = load i32, i32* %r5.global-to-local, align 4
  %v2_1132c = add i32 %v1_1132c, 24
  %v3_1132c = inttoptr i32 %v2_1132c to i32*
  store i32 %v0_1132c, i32* %v3_1132c, align 4
  %v0_11330 = load i32, i32* %r0.global-to-local, align 4
  %v2_11330 = call i32 @function_13964(i32 %v0_11330, i32 256)
  store i32 %v2_11330, i32* %r0.global-to-local, align 4
  %v0_11334 = load i32, i32* %r5.global-to-local, align 4
  %v1_11334 = add i32 %v0_11334, 4
  %v2_11334 = inttoptr i32 %v1_11334 to i32*
  %v3_11334 = load i32, i32* %v2_11334, align 4
  store i32 %v3_11334, i32* @r4, align 4
  %v0_1133c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1133c, i32* @r2, align 4
  store i32 %v3_11334, i32* %r0.global-to-local, align 4
  %v2_11344 = call i32 @function_14194(i32 %v3_11334, i32 3)
  %v1_1134c = or i32 %v2_11344, 2048
  store i32 %v1_1134c, i32* @r2, align 4
  %v0_11350 = load i32, i32* @r4, align 4
  store i32 %v0_11350, i32* %r0.global-to-local, align 4
  %v2_11354 = call i32 @function_14194(i32 %v0_11350, i32 4)
  store i32 %v2_11354, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* %r3.global-to-local, align 4
  %v0_1135c = load i32, i32* %r5.global-to-local, align 4
  %v1_1135c = add i32 %v0_1135c, 20
  %v2_1135c = inttoptr i32 %v1_1135c to i32*
  %v3_1135c = load i32, i32* %v2_1135c, align 4
  store i32 %v3_1135c, i32* @r4, align 4
  %v2_11360 = load i32, i32* @global_var_1f860.188, align 4
  %v1_11364 = add i32 %v0_1135c, 16
  %v2_11364 = inttoptr i32 %v1_11364 to i32*
  %v3_11364 = load i32, i32* %v2_11364, align 4
  store i32 %v3_11364, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_1136c = add i32 %v0_1135c, 8
  %v3_1136c = inttoptr i32 %v2_1136c to i32*
  store i32 %v2_11360, i32* %v3_1136c, align 4
  %v0_11370 = load i32, i32* %r3.global-to-local, align 4
  %v1_11370 = load i32, i32* %r5.global-to-local, align 4
  %v2_11370 = add i32 %v1_11370, 12
  %v3_11370 = inttoptr i32 %v2_11370 to i32*
  store i32 %v0_11370, i32* %v3_11370, align 4
  %v0_11378 = load i32, i32* %r5.global-to-local, align 4
  %v1_11378 = add i32 %v0_11378, 4
  %v2_11378 = inttoptr i32 %v1_11378 to i32*
  %v3_11378 = load i32, i32* %v2_11378, align 4
  store i32 %v3_11378, i32* %r0.global-to-local, align 4
  %v0_1137c = load i32, i32* %r3.global-to-local, align 4
  %v2_1137c = mul i32 %v0_1137c, 2
  store i32 %v2_1137c, i32* %r3.global-to-local, align 4
  store i32 %v2_1137c, i32* %stack_var_-32, align 4
  %v3_1139c = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_1139c = call i32 @function_149dc(i32 %v3_11378, %sockaddr* %v3_1139c, i32 16)
  store i32 %v4_1139c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_112d8.dec_label_pc_113a0_crit_edge, %dec_label_pc_1132c
  %v14_113a4 = phi i32 [ %v14_113a4.pre, %dec_label_pc_112d8.dec_label_pc_113a0_crit_edge ], [ %v4_1139c, %dec_label_pc_1132c ]
  %v2_113a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_113a4, i32* @r4, align 4
  ret i32 %v14_113a4

; uselistorder directives
  uselistorder i32 %v2_1137c, { 1, 0 }
  uselistorder i32 %v3_11310, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 6, 5, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_13964, { 16, 11, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_113a0, { 1, 0 }
}

define i32 @function_113ac(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113ac:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_113ac = load i32, i32* @r4, align 4
  %v6_113ac = load i32, i32* @r5, align 4
  %v9_113ac = load i32, i32* @r6, align 4
  %v12_113ac = load i32, i32* @r7, align 4
  %v15_113ac = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1f82c.190 to i32), i32* @r8, align 4
  %v2_113b4 = load i32, i32* @global_var_1f82c.190, align 4
  store i32 ptrtoint (i32* @global_var_1f858.192 to i32), i32* %sb.global-to-local, align 4
  %v3_113c0 = mul i32 %v2_113b4, 16
  store i32 %v3_113c0, i32* %r3.global-to-local, align 4
  %v3_113c8 = urem i32 %arg3, 65536
  store i32 %v3_113c8, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_113d4 = load i32, i32* @global_var_1f858.192, align 4
  %v1_113d8 = add i32 %v3_113c0, 16
  store i32 %v1_113d8, i32* %r1.global-to-local, align 4
  store i32 %v3_113c8, i32* %stack_var_-44, align 4
  %v8_113e0 = call i32 @function_14fcc(i32 %v2_113d4, i32 %v1_113d8, i32 %v3_113c8, i32 %v3_113c0)
  store i32 %v8_113e0, i32* %sl.global-to-local, align 4
  %v0_113e8 = load i32, i32* @r5, align 4
  %v1_113ec = load i32, i32* %sb.global-to-local, align 4
  %v2_113ec = inttoptr i32 %v1_113ec to i32*
  store i32 %v8_113e0, i32* %v2_113ec, align 4
  %v2_113f0 = load i32, i32* @global_var_1f82c.190, align 4
  store i32 %v2_113f0, i32* %fp.global-to-local, align 4
  %v1_113f4 = inttoptr i32 %v0_113e8 to i8*
  %v2_113f4 = call i32 @function_138c4(i8* %v1_113f4)
  %sext = mul i32 %v2_113f4, 16777216
  %v1_113f8 = sdiv i32 %sext, 16777216
  %v2_113f8 = add nsw i32 %v1_113f8, 1
  store i32 %v2_113f8, i32* @r4, align 4
  store i32 %v1_113f8, i32* @r7, align 4
  %v1_11404 = call i32 @function_14d30(i32 %v2_113f8)
  %v0_11408 = load i32, i32* @r5, align 4
  store i32 %v0_11408, i32* %r1.global-to-local, align 4
  %v0_1140c = load i32, i32* @r4, align 4
  store i32 %v0_1140c, i32* %r2.global-to-local, align 4
  store i32 %v1_11404, i32* @r6, align 4
  %v3_11414 = call i32 @function_13940(i32 %v1_11404, i32 %v0_11408, i32 %v0_1140c)
  %v0_11418 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_11418, 1
  %extract.t6 = trunc i32 %v0_11418 to i8
  br i1 %tmp21, label %dec_label_pc_1143c, label %dec_label_pc_11420

dec_label_pc_11420:                               ; preds = %dec_label_pc_113ac
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11424

dec_label_pc_11424:                               ; preds = %dec_label_pc_11424, %dec_label_pc_11420
  %v2_1142c = phi i32 [ %v1_11430, %dec_label_pc_11424 ], [ 0, %dec_label_pc_11420 ]
  %v1_11424 = load i32, i32* @r6, align 4
  %v2_11424 = add i32 %v1_11424, %v2_1142c
  %v3_11424 = inttoptr i32 %v2_11424 to i8*
  %v4_11424 = load i8, i8* %v3_11424, align 1
  %v6_11424 = zext i8 %v4_11424 to i32
  %v1_11428 = xor i32 %v6_11424, 34
  store i32 %v1_11428, i32* %r3.global-to-local, align 4
  %v1_1142c = trunc i32 %v1_11428 to i8
  store i8 %v1_1142c, i8* %v3_11424, align 1
  %v0_11430 = load i32, i32* %r2.global-to-local, align 4
  %v1_11430 = add i32 %v0_11430, 1
  store i32 %v1_11430, i32* %r2.global-to-local, align 4
  %v0_11434 = load i32, i32* @r7, align 4
  %v9_11434 = icmp eq i32 %v0_11434, %v1_11430
  br i1 %v9_11434, label %dec_label_pc_1143c.loopexit, label %dec_label_pc_11424

dec_label_pc_1143c.loopexit:                      ; preds = %dec_label_pc_11424
  %extract.t = trunc i32 %v1_11430 to i8
  br label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %dec_label_pc_1143c.loopexit, %dec_label_pc_113ac
  %v0_1144c.off0 = phi i8 [ %extract.t, %dec_label_pc_1143c.loopexit ], [ %extract.t6, %dec_label_pc_113ac ]
  %v2_1143c = load i32, i32* @global_var_1f82c.190, align 4
  %v2_11440 = load i32, i32* @global_var_1f858.192, align 4
  store i32 %v2_11440, i32* %r2.global-to-local, align 4
  %v3_11444 = mul i32 %v2_1143c, 16
  %v2_11448 = add i32 %v2_11440, %v3_11444
  store i32 %v2_11448, i32* %r3.global-to-local, align 4
  %v3_1144c = add i32 %v2_11448, 12
  %v4_1144c = inttoptr i32 %v3_1144c to i8*
  store i8 %v0_1144c.off0, i8* %v4_1144c, align 1
  %v0_11450 = load i32, i32* @r6, align 4
  %v1_11450 = load i32, i32* %sl.global-to-local, align 4
  %v2_11450 = load i32, i32* %fp.global-to-local, align 4
  %v5_11450 = mul i32 %v2_11450, 16
  %v6_11450 = add i32 %v5_11450, %v1_11450
  %v7_11450 = inttoptr i32 %v6_11450 to i32*
  store i32 %v0_11450, i32* %v7_11450, align 4
  %v2_11458 = load i32, i32* @global_var_1f82c.190, align 4
  store i32 %v2_11458, i32* @r7, align 4
  %v2_1145c = load i32, i32* @global_var_1f858.192, align 4
  store i32 %v2_1145c, i32* %sl.global-to-local, align 4
  %v1_11460 = inttoptr i32 %arg2 to i8*
  %v2_11460 = call i32 @function_138c4(i8* %v1_11460)
  %sext1 = mul i32 %v2_11460, 16777216
  %v1_11464 = sdiv i32 %sext1, 16777216
  %v2_11464 = add nsw i32 %v1_11464, 1
  store i32 %v2_11464, i32* @r4, align 4
  store i32 %v1_11464, i32* @r5, align 4
  %v1_11470 = call i32 @function_14d30(i32 %v2_11464)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_11478 = load i32, i32* @r4, align 4
  store i32 %v0_11478, i32* %r2.global-to-local, align 4
  store i32 %v1_11470, i32* %r6.global-to-local, align 4
  %v3_11480 = call i32 @function_13940(i32 %v1_11470, i32 %arg2, i32 %v0_11478)
  %v0_11484 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_11484, 1
  %extract.t8 = trunc i32 %v0_11484 to i8
  br i1 %tmp22, label %dec_label_pc_114a8, label %dec_label_pc_1148c

dec_label_pc_1148c:                               ; preds = %dec_label_pc_1143c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11490

dec_label_pc_11490:                               ; preds = %dec_label_pc_11490, %dec_label_pc_1148c
  %v2_11498 = phi i32 [ %v1_1149c, %dec_label_pc_11490 ], [ 0, %dec_label_pc_1148c ]
  %v1_11490 = load i32, i32* %r6.global-to-local, align 4
  %v2_11490 = add i32 %v1_11490, %v2_11498
  %v3_11490 = inttoptr i32 %v2_11490 to i8*
  %v4_11490 = load i8, i8* %v3_11490, align 1
  %v6_11490 = zext i8 %v4_11490 to i32
  %v1_11494 = xor i32 %v6_11490, 34
  store i32 %v1_11494, i32* %r3.global-to-local, align 4
  %v1_11498 = trunc i32 %v1_11494 to i8
  store i8 %v1_11498, i8* %v3_11490, align 1
  %v0_1149c = load i32, i32* %r2.global-to-local, align 4
  %v1_1149c = add i32 %v0_1149c, 1
  store i32 %v1_1149c, i32* %r2.global-to-local, align 4
  %v0_114a0 = load i32, i32* @r5, align 4
  %v9_114a0 = icmp eq i32 %v0_114a0, %v1_1149c
  br i1 %v9_114a0, label %dec_label_pc_114a8.loopexit, label %dec_label_pc_11490

dec_label_pc_114a8.loopexit:                      ; preds = %dec_label_pc_11490
  %extract.t7 = trunc i32 %v1_1149c to i8
  br label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %dec_label_pc_114a8.loopexit, %dec_label_pc_1143c
  %v0_114b8.off0 = phi i8 [ %extract.t7, %dec_label_pc_114a8.loopexit ], [ %extract.t8, %dec_label_pc_1143c ]
  %v2_114a8 = load i32, i32* @global_var_1f82c.190, align 4
  %v2_114ac = load i32, i32* @global_var_1f858.192, align 4
  %v3_114b0 = mul i32 %v2_114a8, 16
  %v2_114b4 = or i32 %v3_114b0, 13
  %v3_114b8 = add i32 %v2_114b4, %v2_114ac
  %v4_114b8 = inttoptr i32 %v3_114b8 to i8*
  store i8 %v0_114b8.off0, i8* %v4_114b8, align 1
  %v2_114c0 = load i32, i32* @global_var_1f82c.190, align 4
  store i32 %v2_114c0, i32* %lr.global-to-local, align 4
  %v4_114c4 = load i8, i8* @global_var_1f85d.195, align 1
  %v5_114c4 = zext i8 %v4_114c4 to i32
  %v3_114c8 = load i8, i8* bitcast (i8** @global_var_1f85c.194 to i8*), align 4
  %v4_114c8 = zext i8 %v3_114c8 to i32
  %v2_114cc = load i32, i32* @global_var_1f858.192, align 4
  %v4_114d0 = mul nuw nsw i32 %v5_114c4, 256
  %v5_114d0 = or i32 %v4_114c8, %v4_114d0
  store i32 %v5_114d0, i32* %r2.global-to-local, align 4
  %v3_114d4 = mul i32 %v2_114c0, 16
  %v2_114d8 = add i32 %v2_114cc, %v3_114d4
  store i32 %v2_114d8, i32* %r1.global-to-local, align 4
  %v3_114e0 = add i32 %v2_114d8, 9
  %v4_114e0 = inttoptr i32 %v3_114e0 to i8*
  store i8 %v4_114c4, i8* %v4_114e0, align 1
  %v0_114e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_114e4 = trunc i32 %v0_114e4 to i8
  %v2_114e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_114e4 = add i32 %v2_114e4, 8
  %v4_114e4 = inttoptr i32 %v3_114e4 to i8*
  store i8 %v1_114e4, i8* %v4_114e4, align 1
  %v4_114e8 = load i8, i8* @global_var_1f85d.195, align 1
  %v5_114e8 = zext i8 %v4_114e8 to i32
  %v3_114ec = load i8, i8* bitcast (i8** @global_var_1f85c.194 to i8*), align 4
  %v4_114ec = zext i8 %v3_114ec to i32
  %v4_114f0 = mul nuw nsw i32 %v5_114e8, 256
  %v5_114f0 = or i32 %v4_114ec, %v4_114f0
  %v2_114f4 = load i32, i32* %stack_var_-44, align 4
  %v2_114f8 = add i32 %v5_114f0, %v2_114f4
  store i32 %v2_114f8, i32* %r3.global-to-local, align 4
  %v3_114fc9 = udiv i32 %v2_114f8, 256
  %v1_11500 = trunc i32 %v3_114fc9 to i8
  %v2_11500 = load i32, i32* %r1.global-to-local, align 4
  %v3_11500 = add i32 %v2_11500, 11
  %v4_11500 = inttoptr i32 %v3_11500 to i8*
  store i8 %v1_11500, i8* %v4_11500, align 1
  %v0_11504 = load i32, i32* %r3.global-to-local, align 4
  %v1_11504 = trunc i32 %v0_11504 to i8
  %v2_11504 = load i32, i32* %r1.global-to-local, align 4
  %v3_11504 = add i32 %v2_11504, 10
  %v4_11504 = inttoptr i32 %v3_11504 to i8*
  store i8 %v1_11504, i8* %v4_11504, align 1
  %v4_11508 = load i8, i8* @global_var_1f85d.195, align 1
  %v5_11508 = zext i8 %v4_11508 to i32
  %v3_1150c = load i8, i8* bitcast (i8** @global_var_1f85c.194 to i8*), align 4
  %v4_1150c = zext i8 %v3_1150c to i32
  %v4_11510 = mul nuw nsw i32 %v5_11508, 256
  %v5_11510 = or i32 %v4_1150c, %v4_11510
  %v2_11514 = load i32, i32* %stack_var_-44, align 4
  %v2_11518 = add i32 %v5_11510, %v2_11514
  store i32 %v2_11518, i32* %r2.global-to-local, align 4
  %v0_1151c = load i32, i32* @r7, align 4
  %v3_1151c = mul i32 %v0_1151c, 16
  %v1_11520 = load i32, i32* %sl.global-to-local, align 4
  %v2_11520 = add i32 %v1_11520, %v3_1151c
  store i32 %v2_11520, i32* %r3.global-to-local, align 4
  %v0_11524 = load i32, i32* %lr.global-to-local, align 4
  %v1_11524 = add i32 %v0_11524, 1
  store i32 %v1_11524, i32* @lr, align 4
  %v3_11528 = sdiv i32 %v2_11518, 256
  store i32 %v3_11528, i32* %r1.global-to-local, align 4
  %v0_1152c = load i32, i32* %r6.global-to-local, align 4
  %v2_1152c = add i32 %v2_11520, 4
  %v3_1152c = inttoptr i32 %v2_1152c to i32*
  store i32 %v0_1152c, i32* %v3_1152c, align 4
  %v0_11530 = load i32, i32* @lr, align 4
  %v1_11530 = load i32, i32* @r8, align 4
  %v2_11530 = inttoptr i32 %v1_11530 to i32*
  store i32 %v0_11530, i32* %v2_11530, align 4
  %v0_11534 = load i32, i32* %r1.global-to-local, align 4
  %v1_11534 = trunc i32 %v0_11534 to i8
  store i8 %v1_11534, i8* @global_var_1f85d.195, align 1
  %v0_11538 = load i32, i32* %r2.global-to-local, align 4
  %v1_11538 = trunc i32 %v0_11538 to i8
  store i8 %v1_11538, i8* bitcast (i8** @global_var_1f85c.194 to i8*), align 4
  store i32 %v3_113ac, i32* @r4, align 4
  store i32 %v6_113ac, i32* @r5, align 4
  store i32 %v9_113ac, i32* @r6, align 4
  store i32 %v12_113ac, i32* @r7, align 4
  store i32 %v15_113ac, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1f85c.194 to i32)

; uselistorder directives
  uselistorder i32 %v1_1149c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_11470, { 1, 0 }
  uselistorder i32 %v1_11430, { 0, 2, 3, 1 }
  uselistorder i32 %v1_11404, { 1, 0 }
  uselistorder i32 %v3_113c8, { 1, 2, 0 }
  uselistorder i32 %v3_113c0, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_138c4, { 0, 1, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 79, 80, 81, 82, 83, 84, 85, 86, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i32 (i32, i32, i32, i32)* @function_14fcc, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_11550() local_unnamed_addr {
dec_label_pc_11550:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11550 = load i32, i32* @r4, align 4
  store i32 %v3_11550, i32* %stack_var_-36, align 4
  %v6_11550 = load i32, i32* @r5, align 4
  %v9_11550 = load i32, i32* @r6, align 4
  %v12_11550 = load i32, i32* @r7, align 4
  %v15_11550 = load i32, i32* @r8, align 4
  %v18_11550 = load i32, i32* @sb, align 4
  %v21_11550 = load i32, i32* @sl, align 4
  %v24_11550 = load i32, i32* @fp, align 4
  %v0_11558 = call i32 @function_142b0()
  store i32 %v0_11558, i32* %r0.global-to-local, align 4
  %v7_1155c = icmp eq i32 %v0_11558, -1
  %. = zext i1 %v7_1155c to i32
  %tmp273 = icmp slt i32 %v0_11558, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f8cc.186 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11578 = icmp eq i32 %storemerge229, 0
  store i1 %v2_11578, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_11558, i32* @global_var_1f8cc.186, align 4
  br i1 %v2_11578, label %dec_label_pc_1158c, label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_11550
  store i32 %v3_11550, i32* @r4, align 4
  store i32 %v6_11550, i32* %r5.global-to-local, align 4
  store i32 %v9_11550, i32* @r6, align 4
  store i32 %v12_11550, i32* @r7, align 4
  store i32 %v15_11550, i32* @r8, align 4
  store i32 %v18_11550, i32* @sb, align 4
  store i32 %v21_11550, i32* @sl, align 4
  store i32 %v24_11550, i32* @fp, align 4
  ret i32 %v0_11558

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11550
  %v0_1158c = call i32 @function_13b7c()
  store i32 %v0_1158c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_1158c, i32* @global_var_1f8a8.89, align 4
  %v1_11598 = call i32 @function_10aec(i32 %v0_1158c)
  %v0_1159c = load i32, i32* @r4, align 4
  store i32 %v0_1159c, i32* %r0.global-to-local, align 4
  %v1_115a0 = inttoptr i32 %v0_1159c to i32*
  %v2_115a0 = call i32 @function_14554(i32* %v1_115a0)
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_115a0, i32* @global_var_1f860.188, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_115b4 = call i32 @function_14e84(i32 256, i32 288)
  store i32 %v2_115b4, i32* %lr.global-to-local, align 4
  %v0_115c0 = load i32, i32* @r4, align 4
  store i32 %v0_115c0, i32* %stack_var_-52, align 4
  store i32 %v2_115b4, i32* @global_var_1f8c4.200, align 4
  store i32 %v0_115c0, i32* %r3.global-to-local, align 4
  store i32 %v0_115c0, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_115c0, i32* %ip.global-to-local, align 4
  %v1_115d8 = add i32 %v2_115b4, 4
  store i32 %v1_115d8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115dc.dec_label_pc_115dc_crit_edge, %dec_label_pc_1158c
  %v0_115f4 = phi i32 [ %v0_115f4.pre, %dec_label_pc_115dc.dec_label_pc_115dc_crit_edge ], [ %v0_115c0, %dec_label_pc_1158c ]
  %v0_115e4 = phi i32 [ %v0_115fc, %dec_label_pc_115dc.dec_label_pc_115dc_crit_edge ], [ %v0_115c0, %dec_label_pc_1158c ]
  %v1_115ec = phi i32 [ %v1_115ec.pre, %dec_label_pc_115dc.dec_label_pc_115dc_crit_edge ], [ %v2_115b4, %dec_label_pc_1158c ]
  %v3_115dc = mul i32 %v0_115e4, 256
  store i32 %v3_115dc, i32* %r2.global-to-local, align 4
  %v1_115e4 = add i32 %v0_115e4, 1
  store i32 %v1_115e4, i32* %ip.global-to-local, align 4
  %v2_115e8 = mul i32 %v0_115e4, 288
  %v2_115ec = add i32 %v1_115ec, 12
  %v2_115f4 = add i32 %v2_115ec, %v2_115e8
  %v3_115f4 = inttoptr i32 %v2_115f4 to i32*
  store i32 %v0_115f4, i32* %v3_115f4, align 4
  %v0_115f8 = load i32, i32* %r0.global-to-local, align 4
  %v1_115f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_115f8 = inttoptr i32 %v1_115f8 to i32*
  store i32 %v0_115f8, i32* %v2_115f8, align 4
  %v3_115f8 = load i32, i32* %r1.global-to-local, align 4
  %v4_115f8 = add i32 %v3_115f8, 288
  store i32 %v4_115f8, i32* %r1.global-to-local, align 4
  %v0_115fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_115fc, i32* %r3.global-to-local, align 4
  %v7_11600 = icmp sgt i32 %v1_115e4, 255
  br i1 %v7_11600, label %dec_label_pc_11604, label %dec_label_pc_115dc.dec_label_pc_115dc_crit_edge

dec_label_pc_115dc.dec_label_pc_115dc_crit_edge:  ; preds = %dec_label_pc_115dc
  %v1_115ec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_115f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_115dc

dec_label_pc_11604:                               ; preds = %dec_label_pc_115dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_115fc, i32* %stack_var_-52, align 4
  %v3_11614 = call i32 @function_14b80(i32 2, i32 3, i32 6)
  store i32 %v3_11614, i32* %r0.global-to-local, align 4
  %v2_1161c = icmp eq i32 %v3_11614, -1
  store i1 %v2_1161c, i1* %cpsr_c.global-to-local, align 1
  %v7_1161c = icmp eq i32 %v3_11614, -1
  store i1 %v7_1161c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11614, i32* @r4, align 4
  store i32 %v3_11614, i32* @global_var_1f8c8.202, align 4
  br i1 %v7_1161c, label %dec_label_pc_11fb4, label %dec_label_pc_1162c

dec_label_pc_1162c:                               ; preds = %dec_label_pc_11604
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_11630 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11630, i32* @r2, align 4
  %v2_11634 = call i32 @function_14194(i32 %v3_11614, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_1163c = or i32 %v2_11634, 2048
  store i32 %v1_1163c, i32* @r2, align 4
  %v0_11640 = load i32, i32* @r4, align 4
  store i32 %v0_11640, i32* %r0.global-to-local, align 4
  %v2_11644 = call i32 @function_14194(i32 %v0_11640, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_11650 = load i32, i32* @global_var_1f8c8.202, align 4
  store i32 %v2_11650, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_11658 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11658, i32* %r1.global-to-local, align 4
  %v2_1165c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_1165c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_1166c = call i32 @function_14b50(i32 %v2_11650, i32 %v0_11658, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_1166c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11670 = icmp eq i32 %v6_1166c, 0
  store i1 %v2_11670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11670, label %dec_label_pc_11678, label %dec_label_pc_11fa8

dec_label_pc_11678:                               ; preds = %dec_label_pc_1162c, %dec_label_pc_11678
  %v0_11678 = call i32 @function_10a94()
  %v3_1167c = mul i32 %v0_11678, 65536
  store i32 %v3_1167c, i32* %r0.global-to-local, align 4
  %v1_11688 = mul i32 %v0_11678, 256
  %v3_1168c = and i32 %v1_11688, 65280
  %tmp276 = udiv i32 %v0_11678, 256
  %v4_11690 = urem i32 %tmp276, 256
  %v5_11690 = or i32 %v4_11690, %v3_1168c
  store i32 %v5_11690, i32* %r3.global-to-local, align 4
  %v2_11694 = icmp ugt i32 %v5_11690, 1023
  store i1 %v2_11694, i1* %cpsr_c.global-to-local, align 1
  %v7_11694 = icmp eq i32 %v5_11690, 1024
  store i1 %v7_11694, i1* %cpsr_z.global-to-local, align 1
  %v3_11698 = icmp ult i32 %v5_11690, 1022
  br i1 %v3_11698, label %dec_label_pc_11678, label %dec_label_pc_1169c

dec_label_pc_1169c:                               ; preds = %dec_label_pc_11678
  %v5_11684.le = trunc i32 %v0_11678 to i8
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f830.204 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1f833.205 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f832.206 to i8*), align 4
  %v0_116d0 = call i32 @function_10a94()
  %v1_116d0 = trunc i32 %v0_116d0 to i8
  store i32 %v0_116d0, i32* %r0.global-to-local, align 4
  %v4_116d8 = sext i8 %v5_11684.le to i32
  %v3_116dc = load i8, i8* @global_var_1f850.209, align 1
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %lr.global-to-local, align 4
  %v3_116e4228 = udiv i32 %v4_116d8, 256
  store i8 64, i8* bitcast (i32* @global_var_1f838.210 to i8*), align 4
  %v2_116f0 = and i32 %v0_116d0, 128
  %v3_116f0 = icmp ne i32 %v2_116f0, 0
  store i1 %v3_116f0, i1* %cpsr_c.global-to-local, align 1
  %v4_116f0227 = udiv i32 %v0_116d0, 256
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_116dc, 16
  %v1_116f8 = zext i8 %tmp to i32
  %v1_116fc = trunc i32 %v4_116f0227 to i8
  store i8 %v1_116fc, i8* bitcast (i32* @global_var_1f835.211 to i8*), align 4
  %v1_11700 = or i32 %v1_116f8, 80
  store i32 %v1_11700, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_1170c = trunc i32 %v1_11700 to i8
  store i8 %v1_1170c, i8* @global_var_1f850.209, align 1
  %v1_11710 = trunc i32 %v3_116e4228 to i8
  store i8 %v1_11710, i8* bitcast (i32* @global_var_1f845.212 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1f847.213 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f839.214 to i8*), align 4
  store i32 %v4_116d8, i32* %ip.global-to-local, align 4
  store i8 %v1_116d0, i8* bitcast (i32* @global_var_1f834.215 to i8*), align 4
  store i8 %v5_11684.le, i8* bitcast (i32* @global_var_1f844.208 to i8*), align 4
  %v0_11728 = load i32, i32* @r5, align 4
  %v1_11728 = trunc i32 %v0_11728 to i8
  store i8 %v1_11728, i8* bitcast (i32* @global_var_1f846.216 to i8*), align 4
  %v0_1172c = call i32 @function_10a94()
  %v1_1172c = trunc i32 %v0_1172c to i8
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* @lr, align 4
  %v3_11734 = load i8, i8* @global_var_1f851.217, align 1
  %v4_11734 = zext i8 %v3_11734 to i32
  %v2_11738 = and i32 %v0_1172c, 128
  %v3_11738 = icmp ne i32 %v2_11738, 0
  store i1 %v3_11738, i1* %cpsr_c.global-to-local, align 1
  %v4_11738 = sdiv i32 %v0_1172c, 256
  store i32 %v4_11738, i32* %ip.global-to-local, align 4
  %v1_1173c = or i32 %v4_11734, 2
  store i32 %v1_1173c, i32* %r3.global-to-local, align 4
  store i32 %v0_1172c, i32* @r4, align 4
  %v1_11744 = trunc i32 %v4_11738 to i8
  store i8 %v1_11744, i8* bitcast (i32* @global_var_1f853.218 to i8*), align 4
  %v1_11748 = trunc i32 %v1_1173c to i8
  store i8 %v1_11748, i8* @global_var_1f851.217, align 1
  store i8 %v1_1172c, i8* bitcast (i32* @global_var_1f852.219 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d9c.223 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1175c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16d9c.223 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16da4.225 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1176c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16da4.225 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1177c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r1.global-to-local, align 4
  %v5_1178c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 7)
  %v0_11790 = load i32, i32* @r6, align 4
  store i32 %v0_11790, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32* %r1.global-to-local, align 4
  %v4_1179c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32 %v0_11790)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16dbc.231 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_117ac = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16dbc.231 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16dc4.233 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_117bc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16dc4.233 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16dcc.235 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_117cc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16dcc.235 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16dd8.237 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_117dc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16dd8.237 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16de0.239 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_117ec = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16de0.239 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16de8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16de8.241 to i32), i32* %r1.global-to-local, align 4
  %v5_117fc = call i32 @function_113ac(i32 ptrtoint ([8 x i8]* @global_var_16de8.241 to i32), i32 ptrtoint ([8 x i8]* @global_var_16de8.241 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b68.243 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1180c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16b68.243 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_1181c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r1.global-to-local, align 4
  %v5_1182c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1183c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32* %r1.global-to-local, align 4
  %v5_1184c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16b68.243 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1185c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16b68.243 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16c48.251 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1186c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16c48.251 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c50.253 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1187c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16c50.253 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c5c.255 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1188c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16c5c.255 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16c64.257 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1189c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint ([9 x i8]* @global_var_16c64.257 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c5c.255 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_118ac = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16c5c.255 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_118bc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_118cc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_118dc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c80.263 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_118ec = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16c80.263 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16c88.265 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16c98.267 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_118fc = call i32 @function_113ac(i32 ptrtoint ([14 x i8]* @global_var_16c88.265 to i32), i32 ptrtoint ([7 x i8]* @global_var_16c98.267 to i32), i32 1)
  store i32 ptrtoint ([8 x i8]* @global_var_16ca0.269 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16ca0.269 to i32), i32* %r1.global-to-local, align 4
  %v5_1190c = call i32 @function_113ac(i32 ptrtoint ([8 x i8]* @global_var_16ca0.269 to i32), i32 ptrtoint ([8 x i8]* @global_var_16ca0.269 to i32), i32 1)
  store i32 ptrtoint ([11 x i8]* @global_var_16ca8.271 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16ca8.271 to i32), i32* %r1.global-to-local, align 4
  %v5_1191c = call i32 @function_113ac(i32 ptrtoint ([11 x i8]* @global_var_16ca8.271 to i32), i32 ptrtoint ([11 x i8]* @global_var_16ca8.271 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32* %r1.global-to-local, align 4
  %v5_1192c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1193c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1194c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16cbc.275 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1195c = call i32 @function_113ac(i32 ptrtoint (i32* @global_var_16cbc.275 to i32), i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_16cc4.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1196c = call i32 @function_113ac(i32 ptrtoint ([14 x i8]* @global_var_16cc4.277 to i32), i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32* %r1.global-to-local, align 4
  %v3_1197c = call i32 @function_113ac(i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32 ptrtoint (i32* @global_var_16c70.259 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32* %r1.global-to-local, align 4
  %v3_1198c = call i32 @function_113ac(i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32 ptrtoint (i32* @global_var_16db4.229 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16cd4.279 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16cd4.279 to i32), i32* %r1.global-to-local, align 4
  %v5_1199c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16cd4.279 to i32), i32 ptrtoint ([5 x i8]* @global_var_16cd4.279 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16cdc.281 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_119ac = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16cdc.281 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16ce4.283 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_119bc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16ce4.283 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16cec.285 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_119cc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16cec.285 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16cf4.287 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119dc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16cf4.287 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16cfc.289 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_119ec = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16cfc.289 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d04.291 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_119fc = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([6 x i8]* @global_var_16d04.291 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d0c.293 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a0c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16d0c.293 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d1c.295 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a1c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16d1c.295 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16d2c.297 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a2c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([7 x i8]* @global_var_16d2c.297 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d34.299 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a3c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16d34.299 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16d3c.301 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a4c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([9 x i8]* @global_var_16d3c.301 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a5c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d48.303 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11a6c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint ([8 x i8]* @global_var_16d48.303 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d50.305 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a7c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), i32 ptrtoint (i32* @global_var_16d50.305 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d5c.307 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a8c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16d5c.307 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11a9c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16c78.261 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11aac = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16c38.247 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16de0.239 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11abc = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16de0.239 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16dd8.237 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11acc = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16dd8.237 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d1c.295 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11adc = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16d1c.295 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16d64.309 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11aec = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint (i32* @global_var_16d64.309 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16c48.251 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11afc = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint ([5 x i8]* @global_var_16c48.251 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16c98.267 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11b0c = call i32 @function_113ac(i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), i32 ptrtoint ([7 x i8]* @global_var_16c98.267 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_16dd0.311 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16dd0.311 to i32), i32* %r1.global-to-local, align 4
  %v5_11b1c = call i32 @function_113ac(i32 ptrtoint ([5 x i8]* @global_var_16dd0.311 to i32), i32 ptrtoint ([5 x i8]* @global_var_16dd0.311 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_16d6c.313 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16d74.315 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11b2c = call i32 @function_113ac(i32 ptrtoint ([7 x i8]* @global_var_16d6c.313 to i32), i32 ptrtoint ([7 x i8]* @global_var_16d74.315 to i32), i32 1)
  %v2_11b34 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_11b34, i32* %r0.global-to-local, align 4
  %v2_11b38 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_11b38, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_11b44

dec_label_pc_11b44:                               ; preds = %dec_label_pc_1219c, %dec_label_pc_1169c
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_1169c ], [ %stack_var_-1872.2, %dec_label_pc_1219c ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_1169c ], [ %stack_var_-1884.1, %dec_label_pc_1219c ]
  %v0_11e74 = phi i32 [ %v2_11b34, %dec_label_pc_1169c ], [ %stack_var_-1880.1, %dec_label_pc_1219c ]
  %stack_var_-1876.0 = phi i8 [ %v5_11684.le, %dec_label_pc_1169c ], [ %stack_var_-1876.1, %dec_label_pc_1219c ]
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_11b4c = load i32, i32* @global_var_1f860.188, align 4
  store i32 %v2_11b4c, i32* @r8, align 4
  %v3_11b50 = icmp uge i32 %stack_var_-1872.0, %v2_11b4c
  store i1 %v3_11b50, i1* %cpsr_c.global-to-local, align 1
  %v9_11b50 = icmp eq i32 %stack_var_-1872.0, %v2_11b4c
  store i1 %v9_11b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11b50, label %dec_label_pc_11dfc, label %dec_label_pc_11b58

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b44
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_11dcc = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_11b64

dec_label_pc_11b64:                               ; preds = %.thread47.dec_label_pc_11b64_crit_edge, %dec_label_pc_11b58
  %v0_11b64 = phi i32 [ %v0_11b64.pre, %.thread47.dec_label_pc_11b64_crit_edge ], [ 0, %dec_label_pc_11b58 ]
  store i32 %v0_11b64, i32* %stack_var_-92, align 4
  store i32 %v0_11b64, i32* %stack_var_-84, align 4
  %v0_11b74 = call i32 @function_10a94()
  %v1_11b74 = trunc i32 %v0_11b74 to i8
  store i32 %v0_11b74, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %r1.global-to-local, align 4
  %v2_11b80 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_11b80, i32* %r2.global-to-local, align 4
  %v2_11b84 = and i32 %v0_11b74, 128
  %v3_11b84 = icmp ne i32 %v2_11b84, 0
  store i1 %v3_11b84, i1* %cpsr_c.global-to-local, align 1
  %v4_11b84 = sdiv i32 %v0_11b74, 256
  store i32 %v4_11b84, i32* %r3.global-to-local, align 4
  %v1_11b88 = trunc i32 %v4_11b84 to i8
  store i8 %v1_11b88, i8* bitcast (i32* @global_var_1f835.211 to i8*), align 4
  store i32 %v2_11b80, i32* @global_var_1f83c.316, align 4
  store i8 %v1_11b74, i8* bitcast (i32* @global_var_1f834.215 to i8*), align 4
  br label %dec_label_pc_11b94

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11c68, %dec_label_pc_11bc4, %dec_label_pc_11c9c, %dec_label_pc_11c90, %dec_label_pc_11c84, %dec_label_pc_11c78, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_11c60, %dec_label_pc_11c58, %bb288, %dec_label_pc_11c28, %dec_label_pc_11c04, %bb281, %dec_label_pc_11bd4, %bb280, %dec_label_pc_11bbc, %bb279, %bb298, %dec_label_pc_11b64
  %v0_11b94 = call i32 @function_10a94()
  store i32 %v0_11b94, i32* %r0.global-to-local, align 4
  %v1_11b98 = urem i32 %v0_11b94, 256
  store i32 %v1_11b98, i32* %r1.global-to-local, align 4
  %v3_11b9c = udiv i32 %v0_11b94, 256
  store i32 %v3_11b9c, i32* %r3.global-to-local, align 4
  %v3_11ba0 = udiv i32 %v0_11b94, 65536
  store i32 %v3_11ba0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ba4 = icmp eq i32 %v1_11b98, 0
  store i1 %v2_11ba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ba4, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_11b94
  %v3_11ba8 = icmp ugt i32 %v1_11b98, 126
  store i1 %v3_11ba8, i1* %cpsr_c.global-to-local, align 1
  %v8_11ba8 = icmp eq i32 %v1_11b98, 127
  store i1 %v8_11ba8, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_11b94, %bb278
  %v0_11bb8 = phi i1 [ true, %dec_label_pc_11b94 ], [ %v8_11ba8, %bb278 ]
  %v1_11bac = urem i32 %v3_11b9c, 256
  store i32 %v1_11bac, i32* %ip.global-to-local, align 4
  %v1_11bb0 = urem i32 %v3_11ba0, 256
  store i32 %v1_11bb0, i32* %r2.global-to-local, align 4
  %v1_11bb4 = and i32 %v0_11b94, 8388608
  %v2_11bb4 = icmp ne i32 %v1_11bb4, 0
  store i1 %v2_11bb4, i1* %cpsr_c.global-to-local, align 1
  %v3_11bb4 = udiv i32 %v0_11b94, 16777216
  store i32 %v3_11bb4, i32* %r0.global-to-local, align 4
  br i1 %v0_11bb8, label %dec_label_pc_11b94, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %bb279
  %v2_11bbc = icmp ugt i32 %v1_11b98, 2
  store i1 %v2_11bbc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bbc = icmp eq i32 %v1_11b98, 3
  store i1 %v7_11bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bbc, label %dec_label_pc_11b94, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bbc
  %v1_11bc4 = add nsw i32 %v1_11b98, -15
  store i32 %v1_11bc4, i32* %r3.global-to-local, align 4
  %v2_11bc8 = icmp ugt i32 %v1_11b98, 55
  store i1 %v2_11bc8, i1* %cpsr_c.global-to-local, align 1
  %v7_11bc8 = icmp eq i32 %v1_11b98, 56
  store i1 %v7_11bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bc8, label %dec_label_pc_11b94, label %bb280

bb280:                                            ; preds = %dec_label_pc_11bc4
  %v3_11bcc = icmp ne i32 %v1_11bc4, 0
  store i1 %v3_11bcc, i1* %cpsr_c.global-to-local, align 1
  %v8_11bcc = icmp eq i32 %v1_11bc4, 1
  store i1 %v8_11bcc, i1* %cpsr_z.global-to-local, align 1
  %v2_11bd0 = xor i1 %v3_11bcc, true
  %v3_11bd0 = or i1 %v8_11bcc, %v2_11bd0
  br i1 %v3_11bd0, label %dec_label_pc_11b94, label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %bb280
  %v2_11bd4 = icmp ugt i32 %v1_11b98, 9
  store i1 %v2_11bd4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bd4 = icmp eq i32 %v1_11b98, 10
  store i1 %v7_11bd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bd4, label %dec_label_pc_11b94, label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bd4
  %v2_11bdc = icmp ugt i32 %v1_11b98, 191
  store i1 %v2_11bdc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bdc = icmp eq i32 %v1_11b98, 192
  store i1 %v7_11bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bdc, label %bb281, label %dec_label_pc_11be8

bb281:                                            ; preds = %dec_label_pc_11bdc
  %v3_11be0 = icmp ugt i32 %v1_11bac, 167
  store i1 %v3_11be0, i1* %cpsr_c.global-to-local, align 1
  %v8_11be0 = icmp eq i32 %v1_11bac, 168
  store i1 %v8_11be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11be0, label %dec_label_pc_11b94, label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11bdc, %bb281
  %v7_11be8 = icmp eq i32 %v1_11b98, 172
  %.347 = zext i1 %v7_11be8 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_11bf4 = icmp ugt i32 %v1_11bac, 14
  store i1 %v2_11bf4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bf4 = icmp eq i32 %v1_11bac, 15
  store i1 %v7_11bf4, i1* %cpsr_z.global-to-local, align 1
  %v2_11bf8 = xor i1 %v2_11bf4, true
  %v3_11bf8 = or i1 %v7_11bf4, %v2_11bf8
  br i1 %v3_11bf8, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_11be8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c0c

bb284:                                            ; preds = %dec_label_pc_11be8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11bfc = icmp eq i1 %v7_11be8, false
  store i1 %v2_11bfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11bfc, label %dec_label_pc_11c0c, label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %bb284
  %v2_11c04 = icmp ugt i32 %v1_11bac, 30
  store i1 %v2_11c04, i1* %cpsr_c.global-to-local, align 1
  %v7_11c04 = icmp eq i32 %v1_11bac, 31
  store i1 %v7_11c04, i1* %cpsr_z.global-to-local, align 1
  %v2_11c08 = xor i1 %v2_11c04, true
  %v3_11c08 = or i1 %v7_11c04, %v2_11c08
  br i1 %v3_11c08, label %dec_label_pc_11b94, label %dec_label_pc_11c0c

dec_label_pc_11c0c:                               ; preds = %.thread10, %dec_label_pc_11c04, %bb284
  %v7_11c0c = icmp eq i32 %v1_11b98, 100
  %.348 = zext i1 %v7_11c0c to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_11c18 = icmp ugt i32 %v1_11bac, 62
  store i1 %v2_11c18, i1* %cpsr_c.global-to-local, align 1
  %v7_11c18 = icmp eq i32 %v1_11bac, 63
  store i1 %v7_11c18, i1* %cpsr_z.global-to-local, align 1
  %v2_11c1c = xor i1 %v2_11c18, true
  %v3_11c1c = or i1 %v7_11c18, %v2_11c1c
  br i1 %v3_11c1c, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_11c0c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c30

bb287:                                            ; preds = %dec_label_pc_11c0c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c20 = icmp eq i1 %v7_11c0c, false
  store i1 %v2_11c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c20, label %dec_label_pc_11c30, label %dec_label_pc_11c28

dec_label_pc_11c28:                               ; preds = %bb287
  %v2_11c28 = icmp ugt i32 %v1_11bac, 125
  store i1 %v2_11c28, i1* %cpsr_c.global-to-local, align 1
  %v7_11c28 = icmp eq i32 %v1_11bac, 126
  store i1 %v7_11c28, i1* %cpsr_z.global-to-local, align 1
  %v2_11c2c = xor i1 %v2_11c28, true
  %v3_11c2c = or i1 %v7_11c28, %v2_11c2c
  br i1 %v3_11c2c, label %dec_label_pc_11b94, label %dec_label_pc_11c30

dec_label_pc_11c30:                               ; preds = %.thread15, %dec_label_pc_11c28, %bb287
  %v2_11c30 = icmp ugt i32 %v1_11b98, 168
  store i1 %v2_11c30, i1* %cpsr_c.global-to-local, align 1
  %v7_11c30 = icmp eq i32 %v1_11b98, 169
  store i1 %v7_11c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c30, label %bb288, label %dec_label_pc_11c3c

bb288:                                            ; preds = %dec_label_pc_11c30
  %v3_11c34 = icmp eq i32 %v1_11bac, 255
  store i1 %v3_11c34, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11c34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11c34, label %dec_label_pc_11b94, label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11c30, %bb288
  %v7_11c3c = icmp eq i32 %v1_11b98, 198
  %.349 = zext i1 %v7_11c3c to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_11c48 = icmp ugt i32 %v1_11bac, 16
  store i1 %v2_11c48, i1* %cpsr_c.global-to-local, align 1
  %v7_11c48 = icmp eq i32 %v1_11bac, 17
  store i1 %v7_11c48, i1* %cpsr_z.global-to-local, align 1
  %v2_11c4c = xor i1 %v2_11c48, true
  %v3_11c4c = or i1 %v7_11c48, %v2_11c4c
  br i1 %v3_11c4c, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_11c3c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c60

bb291:                                            ; preds = %dec_label_pc_11c3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c50 = icmp eq i1 %v7_11c3c, false
  store i1 %v2_11c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c50, label %dec_label_pc_11c60, label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %bb291
  %v2_11c58 = icmp ugt i32 %v1_11bac, 18
  store i1 %v2_11c58, i1* %cpsr_c.global-to-local, align 1
  %v7_11c58 = icmp eq i32 %v1_11bac, 19
  store i1 %v7_11c58, i1* %cpsr_z.global-to-local, align 1
  %v2_11c5c = xor i1 %v2_11c58, true
  %v3_11c5c = or i1 %v7_11c58, %v2_11c5c
  br i1 %v3_11c5c, label %dec_label_pc_11b94, label %dec_label_pc_11c60

dec_label_pc_11c60:                               ; preds = %.thread21, %dec_label_pc_11c58, %bb291
  %v2_11c60 = icmp ugt i32 %v1_11b98, 222
  store i1 %v2_11c60, i1* %cpsr_c.global-to-local, align 1
  %v7_11c60 = icmp eq i32 %v1_11b98, 223
  store i1 %v7_11c60, i1* %cpsr_z.global-to-local, align 1
  %v2_11c64 = xor i1 %v7_11c60, true
  %v3_11c64 = and i1 %v2_11c60, %v2_11c64
  br i1 %v3_11c64, label %dec_label_pc_11b94, label %dec_label_pc_11c68

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11c60
  %v1_11c68 = add nsw i32 %v1_11b98, -6
  store i32 %v1_11c68, i32* %r3.global-to-local, align 4
  %v2_11c6c = icmp ugt i32 %v1_11b98, 10
  store i1 %v2_11c6c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c6c = icmp eq i32 %v1_11b98, 11
  store i1 %v7_11c6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c6c, label %dec_label_pc_11b94, label %bb292

bb292:                                            ; preds = %dec_label_pc_11c68
  %v3_11c70 = icmp ne i32 %v1_11c68, 0
  store i1 %v3_11c70, i1* %cpsr_c.global-to-local, align 1
  %v8_11c70 = icmp eq i32 %v1_11c68, 1
  store i1 %v8_11c70, i1* %cpsr_z.global-to-local, align 1
  %v2_11c74 = xor i1 %v3_11c70, true
  %v3_11c74 = or i1 %v8_11c70, %v2_11c74
  br i1 %v3_11c74, label %dec_label_pc_11b94, label %dec_label_pc_11c78

dec_label_pc_11c78:                               ; preds = %bb292
  %v2_11c78 = icmp ugt i32 %v1_11b98, 21
  store i1 %v2_11c78, i1* %cpsr_c.global-to-local, align 1
  %v7_11c78 = icmp eq i32 %v1_11b98, 22
  store i1 %v7_11c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c78, label %dec_label_pc_11b94, label %bb293

bb293:                                            ; preds = %dec_label_pc_11c78
  %v3_11c7c = icmp ugt i32 %v1_11b98, 20
  store i1 %v3_11c7c, i1* %cpsr_c.global-to-local, align 1
  %v8_11c7c = icmp eq i32 %v1_11b98, 21
  store i1 %v8_11c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c7c, label %dec_label_pc_11b94, label %dec_label_pc_11c84

dec_label_pc_11c84:                               ; preds = %bb293
  %v2_11c84 = icmp ugt i32 %v1_11b98, 27
  store i1 %v2_11c84, i1* %cpsr_c.global-to-local, align 1
  %v7_11c84 = icmp eq i32 %v1_11b98, 28
  store i1 %v7_11c84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c84, label %dec_label_pc_11b94, label %bb294

bb294:                                            ; preds = %dec_label_pc_11c84
  %v3_11c88 = icmp ugt i32 %v1_11b98, 25
  store i1 %v3_11c88, i1* %cpsr_c.global-to-local, align 1
  %v8_11c88 = icmp eq i32 %v1_11b98, 26
  store i1 %v8_11c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c88, label %dec_label_pc_11b94, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %bb294
  %v2_11c90 = icmp ugt i32 %v1_11b98, 29
  store i1 %v2_11c90, i1* %cpsr_c.global-to-local, align 1
  %v7_11c90 = icmp eq i32 %v1_11b98, 30
  store i1 %v7_11c90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c90, label %dec_label_pc_11b94, label %bb295

bb295:                                            ; preds = %dec_label_pc_11c90
  %v3_11c94 = icmp ugt i32 %v1_11b98, 28
  store i1 %v3_11c94, i1* %cpsr_c.global-to-local, align 1
  %v8_11c94 = icmp eq i32 %v1_11b98, 29
  store i1 %v8_11c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c94, label %dec_label_pc_11b94, label %dec_label_pc_11c9c

dec_label_pc_11c9c:                               ; preds = %bb295
  %v2_11c9c = icmp ugt i32 %v1_11b98, 54
  store i1 %v2_11c9c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c9c = icmp eq i32 %v1_11b98, 55
  store i1 %v7_11c9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c9c, label %dec_label_pc_11b94, label %bb296

bb296:                                            ; preds = %dec_label_pc_11c9c
  %v3_11ca0 = icmp ugt i32 %v1_11b98, 32
  store i1 %v3_11ca0, i1* %cpsr_c.global-to-local, align 1
  %v8_11ca0 = icmp eq i32 %v1_11b98, 33
  store i1 %v8_11ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11ca0, label %dec_label_pc_11b94, label %dec_label_pc_11ca8

dec_label_pc_11ca8:                               ; preds = %bb296
  %v2_11ca8 = icmp ugt i32 %v1_11b98, 214
  store i1 %v2_11ca8, i1* %cpsr_c.global-to-local, align 1
  %v7_11ca8 = icmp eq i32 %v1_11b98, 215
  store i1 %v7_11ca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ca8, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_11ca8
  %v3_11cac = icmp ugt i32 %v1_11b98, 213
  store i1 %v3_11cac, i1* %cpsr_c.global-to-local, align 1
  %v8_11cac = icmp eq i32 %v1_11b98, 214
  store i1 %v8_11cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11cac, label %bb298, label %dec_label_pc_11cbc

.thread32:                                        ; preds = %dec_label_pc_11ca8
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b94

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b94

dec_label_pc_11cbc:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_11cc8 = call i32 @llvm.bswap.i32(i32 %v0_11b94)
  store i32 %v5_11cc8, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_11b94, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %tmp301 = and i32 %v0_11b94, 16711680
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v3_11cd4 = mul nuw i32 %v3_11bb4, 16777216
  %v3_11cd8 = udiv i32 %tmp300, 256
  %v4_11cdc = mul nuw nsw i32 %tmp302, 256
  %tmp303 = and i32 %v0_11b94, 32768
  %v3_11ce0 = icmp ne i32 %tmp303, 0
  store i1 %v3_11ce0, i1* %cpsr_c.global-to-local, align 1
  %v4_11ce0 = udiv i32 %v5_11cc8, 16777216
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* @r0, align 4
  %v5_11ce0 = or i32 %v4_11ce0, %v3_11cd4
  %v5_11cdc = or i32 %v5_11ce0, %v4_11cdc
  %v2_11ce8 = or i32 %v5_11cdc, %v3_11cd8
  store i32 %v2_11ce8, i32* %r2.global-to-local, align 4
  %v5_11cec = trunc i32 %v4_11ce0 to i8
  store i8 %v5_11cec, i8* @global_var_1f840.317, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f83a.318 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f83b.319 to i8*), align 4
  %v3_11cfc = call i32 @function_f008(i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_11cfc, 16777216
  %v1_11d04 = sdiv i32 %sext6, 16777216
  store i32 %v1_11d04, i32* %r3.global-to-local, align 4
  %v2_11d08 = and i32 %v1_11d04, 128
  %v3_11d08 = icmp ne i32 %v2_11d08, 0
  store i1 %v3_11d08, i1* %cpsr_c.global-to-local, align 1
  %v4_11d08 = ashr i32 %sext6, 31
  store i32 %v4_11d08, i32* %r2.global-to-local, align 4
  %v1_11d0c = trunc i32 %v1_11d04 to i8
  store i8 %v1_11d0c, i8* bitcast (i32* @global_var_1f83a.318 to i8*), align 4
  %v1_11d10 = trunc i32 %v4_11d08 to i8
  store i8 %v1_11d10, i8* bitcast (i32* @global_var_1f83b.319 to i8*), align 4
  %v3_11d14 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11d14, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_11d1c = call i32 @function_140ac(i32 %v3_11d14, i32 10)
  store i32 %v2_11d1c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d20 = icmp eq i32 %v2_11d1c, 0
  store i1 %v2_11d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11d20, label %.thread198, label %bb304

.thread198:                                       ; preds = %dec_label_pc_11cbc
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb304:                                            ; preds = %dec_label_pc_11cbc
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_11d30 = load i32, i32* @r4, align 4
  %v2_11d30 = trunc i32 %v1_11d30 to i8
  store i8 %v2_11d30, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32 2) to i8*), align 2
  %v0_11d34.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d34.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb304
  %v1_11d34 = load i32, i32* %r3.global-to-local, align 4
  %v2_11d34 = trunc i32 %v1_11d34 to i8
  %v3_11d34 = load i32, i32* %r0.global-to-local, align 4
  %v4_11d34 = add i32 %v3_11d34, 3
  %v5_11d34 = inttoptr i32 %v4_11d34 to i8*
  store i8 %v2_11d34, i8* %v5_11d34, align 1
  %v0_11d3c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11d3c.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb304, %.thread198
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11d44 = load i32, i32* @lr, align 4
  %v4_11d44 = add i32 %v3_11d44, 2
  %v5_11d44 = inttoptr i32 %v4_11d44 to i8*
  store i8 9, i8* %v5_11d44, align 1
  %v0_11d48.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d48.pr.pr, label %bb305, label %.thread47

bb305:                                            ; preds = %.thread45
  %v1_11d48 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d48 = trunc i32 %v1_11d48 to i8
  %v3_11d48 = load i32, i32* @lr, align 4
  %v4_11d48 = add i32 %v3_11d48, 3
  %v5_11d48 = inttoptr i32 %v4_11d48 to i8*
  store i8 %v2_11d48, i8* %v5_11d48, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb305
  %v4_11d4c = load i8, i8* @global_var_1f840.317, align 1
  %v5_11d4c = sext i8 %v4_11d4c to i32
  store i32 %v5_11d4c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* @r1, align 4
  store i8 %v4_11d4c, i8* @global_var_1f848.320, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11d64 = load i32, i32* %sl.global-to-local, align 4
  %v1_11d64 = trunc i32 %v0_11d64 to i8
  store i8 %v1_11d64, i8* bitcast (i32* @global_var_1f854.321 to i8*), align 4
  store i8 %v1_11d64, i8* bitcast (i32* @global_var_1f855.322 to i8*), align 4
  %v5_11d6c = call i32 @function_f064(i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11d6c, 16777216
  %v1_11d74 = sdiv i32 %sext, 16777216
  %v3_11d7c = ashr i32 %sext, 31
  %v2_11d80 = load i32, i32* @global_var_1f844.208, align 4
  %v1_11d88 = trunc i32 %v3_11d7c to i8
  store i8 %v1_11d88, i8* bitcast (i32* @global_var_1f855.322 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11d9c = load i8, i8* @global_var_1f840.317, align 1
  %v4_11d9c = sext i8 %v3_11d9c to i32
  store i32 %v4_11d9c, i32* @r4, align 4
  %v2_11da0 = load i32, i32* @global_var_1f8c8.202, align 4
  store i32 %v2_11da0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f844.208 to i32), i32* %ip.global-to-local, align 4
  %v1_11db0 = and i32 %v2_11d80, 8388608
  %v2_11db0 = icmp ne i32 %v1_11db0, 0
  store i1 %v2_11db0, i1* %cpsr_c.global-to-local, align 1
  %v1_11db8 = trunc i32 %v1_11d74 to i8
  store i8 %v1_11db8, i8* bitcast (i32* @global_var_1f854.321 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1f830.204 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_11dcc, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_11de0 = call i32 @function_14b1c(i32 %v2_11da0, i32* bitcast (i8** @global_var_1f830.204 to i32*), i32 40, i32 16384, i32 %v2_11dcc, i32 16)
  store i32 %v8_11de0, i32* %r0.global-to-local, align 4
  %v3_11de4 = load i32, i32* %stack_var_-52, align 4
  %v1_11de8 = add i32 %v3_11de4, 1
  store i32 %v1_11de8, i32* %r3.global-to-local, align 4
  %v3_11dec = icmp ugt i32 %v1_11de8, 383
  store i1 %v3_11dec, i1* %cpsr_c.global-to-local, align 1
  %v8_11dec = icmp eq i32 %v1_11de8, 384
  store i1 %v8_11dec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11de8, i32* %stack_var_-52, align 4
  %v5_11df4 = icmp slt i32 %v1_11de8, 384
  br i1 %v5_11df4, label %.thread47.dec_label_pc_11b64_crit_edge, label %dec_label_pc_11df8

.thread47.dec_label_pc_11b64_crit_edge:           ; preds = %.thread47
  %v0_11b64.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_11b64

dec_label_pc_11df8:                               ; preds = %.thread47
  %v0_11df8 = load i32, i32* @r8, align 4
  br label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %dec_label_pc_11b44, %dec_label_pc_11df8
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_11b44 ], [ %v0_11df8, %dec_label_pc_11df8 ]
  %v0_11dfc = call i32 @function_14858()
  store i32 %v0_11dfc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_11e10 = inttoptr i32 %v0_11dfc to i32*
  %v6_11e38 = inttoptr i32 %v0_11e74 to i32*
  %v1_11e64 = add i32 %v0_11e74, 16
  %v2_11e64 = inttoptr i32 %v1_11e64 to i32*
  %v4_11e80 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11e88 = add i32 %v4_11e80, 1
  %v2_11e88 = inttoptr i32 %v1_11e88 to i8*
  %v1_11eac = add i32 %v4_11e80, 2
  %v2_11eac = inttoptr i32 %v1_11eac to i8*
  %v1_11eb0 = add i32 %v4_11e80, 3
  %v2_11eb0 = inttoptr i32 %v1_11eb0 to i8*
  %v4_11eb4 = sext i8 %stack_var_-1876.0 to i32
  %v1_11f90 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_11e74 = add i32 %v0_11e74, 9
  %v2_11e74 = inttoptr i32 %v1_11e74 to i8*
  %v1_11ec4 = add i32 %v4_11e80, 13
  %v2_11ec4 = inttoptr i32 %v1_11ec4 to i8*
  %v1_11ee8 = add i32 %v4_11e80, 8
  %v2_11ee8 = inttoptr i32 %v1_11ee8 to i32*
  %v1_11f28 = add i32 %v0_11e74, 12
  %v2_11f28 = inttoptr i32 %v1_11f28 to i32*
  br label %dec_label_pc_11e08

dec_label_pc_11e08:                               ; preds = %dec_label_pc_11ee8, %dec_label_pc_11ee0, %dec_label_pc_11ed8, %dec_label_pc_11ea8, %dec_label_pc_11e98, %dec_label_pc_11e74, %dec_label_pc_11e5c, %dec_label_pc_11ed0, %dec_label_pc_11ec4, %dec_label_pc_11e54, %dec_label_pc_11f88, %dec_label_pc_11dfc
  store i32 0, i32* %v2_11e10, align 4
  %v2_11e18 = load i32, i32* @global_var_1f8c8.202, align 4
  store i32 %v2_11e18, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11e74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11e38 = call i32 @function_14abc(i32 %v2_11e18, i32* %v6_11e38, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11e38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e3c = icmp eq i32 %v7_11e38, 0
  store i1 %v2_11e3c, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_11e38, 1
  br i1 %tmp306, label %dec_label_pc_11fbc, label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e08
  store i32 %v0_11dfc, i32* %lr.global-to-local, align 4
  %v2_11e48 = load i32, i32* %v2_11e10, align 4
  store i32 %v2_11e48, i32* %r3.global-to-local, align 4
  %v2_11e4c = icmp ugt i32 %v2_11e48, 10
  store i1 %v2_11e4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e4c = icmp eq i32 %v2_11e48, 11
  store i1 %v7_11e4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e4c, label %dec_label_pc_11fbc, label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e44
  %v2_11e54 = icmp ugt i32 %v7_11e38, 38
  store i1 %v2_11e54, i1* %cpsr_c.global-to-local, align 1
  %v7_11e54 = icmp eq i32 %v7_11e38, 39
  store i1 %v7_11e54, i1* %cpsr_z.global-to-local, align 1
  %v2_11e58 = xor i1 %v2_11e54, true
  %v3_11e58 = or i1 %v7_11e54, %v2_11e58
  br i1 %v3_11e58, label %dec_label_pc_11e08, label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e54
  store i32 %v0_11e74, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8a8.89 to i32), i32* %r1.global-to-local, align 4
  %v3_11e64 = load i32, i32* %v2_11e64, align 4
  store i32 %v3_11e64, i32* %r2.global-to-local, align 4
  %v2_11e68 = load i32, i32* @global_var_1f8a8.89, align 4
  store i32 %v2_11e68, i32* %r3.global-to-local, align 4
  %v3_11e6c = icmp uge i32 %v3_11e64, %v2_11e68
  store i1 %v3_11e6c, i1* %cpsr_c.global-to-local, align 1
  %v9_11e6c = icmp eq i32 %v3_11e64, %v2_11e68
  store i1 %v9_11e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11e6c, label %dec_label_pc_11e74, label %dec_label_pc_11e08

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e5c
  %v3_11e74 = load i8, i8* %v2_11e74, align 1
  %v4_11e74 = zext i8 %v3_11e74 to i32
  store i32 %v4_11e74, i32* %r3.global-to-local, align 4
  %v2_11e78 = icmp ugt i8 %v3_11e74, 5
  store i1 %v2_11e78, i1* %cpsr_c.global-to-local, align 1
  %v7_11e78 = icmp eq i8 %v3_11e74, 6
  store i1 %v7_11e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e78, label %dec_label_pc_11e80, label %dec_label_pc_11e08

dec_label_pc_11e80:                               ; preds = %dec_label_pc_11e74
  store i32 %v4_11e80, i32* %r3.global-to-local, align 4
  %v2_11e84 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_11e84 = zext i8 %v2_11e84 to i32
  store i32 %v3_11e84, i32* %r2.global-to-local, align 4
  %v3_11e88 = load i8, i8* %v2_11e88, align 1
  %v4_11e88 = zext i8 %v3_11e88 to i32
  store i32 %v4_11e88, i32* %r3.global-to-local, align 4
  %v4_11e8c = mul nuw nsw i32 %v4_11e88, 256
  %v5_11e8c = or i32 %v4_11e8c, %v3_11e84
  store i32 %v5_11e8c, i32* %r2.global-to-local, align 4
  %v2_11e90 = icmp ugt i32 %v5_11e8c, 5887
  store i1 %v2_11e90, i1* %cpsr_c.global-to-local, align 1
  %v7_11e90 = icmp eq i32 %v5_11e8c, 5888
  store i1 %v7_11e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e90, label %dec_label_pc_11ea8, label %dec_label_pc_11e98

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e80
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11ea0 = icmp ugt i32 %v5_11e8c, 4872
  store i1 %v3_11ea0, i1* %cpsr_c.global-to-local, align 1
  %v9_11ea0 = icmp eq i32 %v5_11e8c, 4873
  store i1 %v9_11ea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11ea0, label %dec_label_pc_11ea8, label %dec_label_pc_11e08

dec_label_pc_11ea8:                               ; preds = %dec_label_pc_11e98, %dec_label_pc_11e80
  store i32 %v4_11e80, i32* %ip.global-to-local, align 4
  %v3_11eac = load i8, i8* %v2_11eac, align 1
  %v4_11eac = zext i8 %v3_11eac to i32
  store i32 %v4_11eac, i32* %r3.global-to-local, align 4
  %v3_11eb0 = load i8, i8* %v2_11eb0, align 1
  %v4_11eb0 = zext i8 %v3_11eb0 to i32
  store i32 %v4_11eb0, i32* %r2.global-to-local, align 4
  store i32 %v4_11eb4, i32* %lr.global-to-local, align 4
  %v4_11eb8 = mul nuw nsw i32 %v4_11eb0, 256
  %v5_11eb8 = or i32 %v4_11eb8, %v4_11eac
  store i32 %v5_11eb8, i32* %r3.global-to-local, align 4
  %v3_11ebc = icmp uge i32 %v5_11eb8, %v4_11eb4
  store i1 %v3_11ebc, i1* %cpsr_c.global-to-local, align 1
  %v9_11ebc = icmp eq i32 %v5_11eb8, %v4_11eb4
  store i1 %v9_11ebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11ebc, label %dec_label_pc_11ec4, label %dec_label_pc_11e08

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11ea8
  %v3_11ec4 = load i8, i8* %v2_11ec4, align 1
  %v4_11ec4 = zext i8 %v3_11ec4 to i32
  store i32 %v4_11ec4, i32* %r3.global-to-local, align 4
  %v1_11ec8 = and i32 %v4_11ec4, 2
  %v2_11ec8 = icmp eq i32 %v1_11ec8, 0
  store i1 %v2_11ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ec8, label %dec_label_pc_11e08, label %dec_label_pc_11ed0

dec_label_pc_11ed0:                               ; preds = %dec_label_pc_11ec4
  %v1_11ed0 = and i32 %v4_11ec4, 16
  %v2_11ed0 = icmp eq i32 %v1_11ed0, 0
  store i1 %v2_11ed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ed0, label %dec_label_pc_11e08, label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ed0
  %v1_11ed8 = and i32 %v4_11ec4, 4
  %v2_11ed8 = icmp eq i32 %v1_11ed8, 0
  store i1 %v2_11ed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ed8, label %dec_label_pc_11ee0, label %dec_label_pc_11e08

dec_label_pc_11ee0:                               ; preds = %dec_label_pc_11ed8
  %tmp450 = urem i8 %v3_11ec4, 2
  %v2_11ee0 = icmp eq i8 %tmp450, 0
  store i1 %v2_11ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ee0, label %dec_label_pc_11ee8, label %dec_label_pc_11e08

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11ee0
  %v3_11ee8 = load i32, i32* %v2_11ee8, align 4
  %v2_11f04 = call i32 @llvm.bswap.i32(i32 %v3_11ee8)
  %v1_11f08 = add i32 %v2_11f04, -1
  %v1_11f0c = udiv i32 %v1_11f08, 256
  %v3_11f10 = and i32 %v1_11f0c, 65280
  %v1_11f14 = and i32 %v1_11f08, 65280
  store i32 %v1_11f14, i32* %r2.global-to-local, align 4
  %v3_11f18 = mul i32 %v1_11f08, 16777216
  %v4_11f1c = udiv i32 %v1_11f08, 16777216
  %v5_11f1c = or i32 %v3_11f10, %v4_11f1c
  store i32 %v5_11f1c, i32* %r1.global-to-local, align 4
  store i32 %v0_11e74, i32* %r3.global-to-local, align 4
  %v4_11f24 = mul nuw nsw i32 %v1_11f14, 256
  %v5_11f24 = or i32 %v4_11f24, %v3_11f18
  store i32 %v5_11f24, i32* %r0.global-to-local, align 4
  %v3_11f28 = load i32, i32* %v2_11f28, align 4
  store i32 %v3_11f28, i32* %r2.global-to-local, align 4
  %v2_11f2c = call i32 @llvm.bswap.i32(i32 %v1_11f08)
  store i32 %v2_11f2c, i32* %ip.global-to-local, align 4
  %v3_11f30 = icmp uge i32 %v2_11f2c, %v3_11f28
  store i1 %v3_11f30, i1* %cpsr_c.global-to-local, align 1
  %v9_11f30 = icmp eq i32 %v2_11f2c, %v3_11f28
  store i1 %v9_11f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11f30, label %dec_label_pc_11f38, label %dec_label_pc_11e08

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11ee8
  %v0_11f38 = load i32, i32* @r4, align 4
  %v2_11f38 = icmp ugt i32 %v0_11f38, 254
  store i1 %v2_11f38, i1* %cpsr_c.global-to-local, align 1
  %v7_11f38 = icmp eq i32 %v0_11f38, 255
  store i1 %v7_11f38, i1* %cpsr_z.global-to-local, align 1
  %v8_11f3c = icmp sgt i32 %v0_11f38, 255
  br i1 %v8_11f3c, label %dec_label_pc_11fbc, label %dec_label_pc_11f40

dec_label_pc_11f40:                               ; preds = %dec_label_pc_11f38
  store i32 ptrtoint (i32* @global_var_1f8c4.200 to i32), i32* %lr.global-to-local, align 4
  %v3_11f44 = mul i32 %v0_11f38, 256
  store i32 %v3_11f44, i32* %r2.global-to-local, align 4
  %v2_11f48 = load i32, i32* @global_var_1f8c4.200, align 4
  store i32 %v2_11f48, i32* %r1.global-to-local, align 4
  %v2_11f50 = mul i32 %v0_11f38, 288
  store i32 %v2_11f50, i32* %r3.global-to-local, align 4
  %v2_11f54 = add i32 %v2_11f48, %v2_11f50
  store i32 %v2_11f54, i32* @r0, align 4
  %v1_11f58 = add i32 %v2_11f54, 12
  %v2_11f58 = inttoptr i32 %v1_11f58 to i32*
  %v3_11f58 = load i32, i32* %v2_11f58, align 4
  store i32 %v3_11f58, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f5c = icmp eq i32 %v3_11f58, 0
  store i1 %v2_11f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f5c, label %dec_label_pc_11f88, label %dec_label_pc_11f68.preheader

dec_label_pc_11f68.preheader:                     ; preds = %dec_label_pc_11f40
  %v2_11f60 = add i32 %v2_11f54, 288
  store i32 %v2_11f60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11f68

dec_label_pc_11f68:                               ; preds = %dec_label_pc_11f68.preheader, %dec_label_pc_11f74
  %v0_11f74 = phi i32 [ %v2_11f60, %dec_label_pc_11f68.preheader ], [ %v1_11f80, %dec_label_pc_11f74 ]
  %v0_11f68 = phi i32 [ %v0_11f38, %dec_label_pc_11f68.preheader ], [ %v1_11f68, %dec_label_pc_11f74 ]
  %v1_11f68 = add i32 %v0_11f68, 1
  store i32 %v1_11f68, i32* @r4, align 4
  %v7_11f6c = icmp eq i32 %v1_11f68, 256
  br i1 %v7_11f6c, label %dec_label_pc_11fbc.loopexit, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f68
  store i32 %v0_11f74, i32* @r0, align 4
  %v1_11f78 = add i32 %v0_11f74, 12
  %v2_11f78 = inttoptr i32 %v1_11f78 to i32*
  %v3_11f78 = load i32, i32* %v2_11f78, align 4
  %v2_11f7c = icmp eq i32 %v3_11f78, 0
  %v1_11f80 = add i32 %v0_11f74, 288
  store i32 %v1_11f80, i32* %r3.global-to-local, align 4
  br i1 %v2_11f7c, label %dec_label_pc_11f88.loopexit, label %dec_label_pc_11f68

dec_label_pc_11f88.loopexit:                      ; preds = %dec_label_pc_11f74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11f88.loopexit, %dec_label_pc_11f40
  %v1_11f88 = phi i32 [ %v0_11f74, %dec_label_pc_11f88.loopexit ], [ %v2_11f54, %dec_label_pc_11f40 ]
  %v2_11f88 = add i32 %v1_11f88, 16
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  store i32 %v3_11f28, i32* %v3_11f88, align 4
  store i32 %v4_11e80, i32* %r1.global-to-local, align 4
  %v2_11f90 = load i32, i32* %v1_11f90, align 4
  store i32 %v2_11f90, i32* %r2.global-to-local, align 4
  %v1_11f94 = and i32 %v2_11f90, 128
  %v2_11f94 = icmp ne i32 %v1_11f94, 0
  store i1 %v2_11f94, i1* %cpsr_c.global-to-local, align 1
  %v3_11f94 = sdiv i32 %v2_11f90, 256
  store i32 %v3_11f94, i32* %r3.global-to-local, align 4
  %v1_11f98 = trunc i32 %v3_11f94 to i8
  %v2_11f98 = load i32, i32* @r0, align 4
  %v3_11f98 = add i32 %v2_11f98, 21
  %v4_11f98 = inttoptr i32 %v3_11f98 to i8*
  store i8 %v1_11f98, i8* %v4_11f98, align 1
  %v0_11f9c = load i32, i32* %r2.global-to-local, align 4
  %v1_11f9c = trunc i32 %v0_11f9c to i8
  %v2_11f9c = load i32, i32* @r0, align 4
  %v3_11f9c = add i32 %v2_11f9c, 20
  %v4_11f9c = inttoptr i32 %v3_11f9c to i8*
  store i8 %v1_11f9c, i8* %v4_11f9c, align 1
  %v0_11fa0 = call i32 @function_112d8()
  store i32 %v0_11fa0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e08

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_1162c
  store i32 ptrtoint (i32* @global_var_1f8c8.202 to i32), i32* %r2.global-to-local, align 4
  %v2_11fac = load i32, i32* @global_var_1f8c8.202, align 4
  store i32 %v2_11fac, i32* %r0.global-to-local, align 4
  %v1_11fb0 = call i32 @function_14284(i32 %v2_11fac)
  store i32 %v1_11fb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11fb4

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11604, %dec_label_pc_11fa8
  %v0_11fb4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11fb4, i32* %r0.global-to-local, align 4
  %v1_11fb8 = call i32 @function_15620(i32 %v0_11fb4)
  store i32 %v1_11fb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc.loopexit:                      ; preds = %dec_label_pc_11f68
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11f38, %dec_label_pc_11e44, %dec_label_pc_11e08, %dec_label_pc_11fbc.loopexit, %dec_label_pc_11fb4
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_11fb4 ], [ %v0_11dfc, %dec_label_pc_11fbc.loopexit ], [ %v0_11dfc, %dec_label_pc_11e08 ], [ %v0_11dfc, %dec_label_pc_11e44 ], [ %v0_11dfc, %dec_label_pc_11f38 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_11fb4 ], [ %stack_var_-1872.1, %dec_label_pc_11fbc.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_11e08 ], [ %stack_var_-1872.1, %dec_label_pc_11e44 ], [ %stack_var_-1872.1, %dec_label_pc_11f38 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_11fb4 ], [ %stack_var_-1884.0, %dec_label_pc_11fbc.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_11e08 ], [ %stack_var_-1884.0, %dec_label_pc_11e44 ], [ %stack_var_-1884.0, %dec_label_pc_11f38 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_11fb4 ], [ %v0_11e74, %dec_label_pc_11fbc.loopexit ], [ %v0_11e74, %dec_label_pc_11e08 ], [ %v0_11e74, %dec_label_pc_11e44 ], [ %v0_11e74, %dec_label_pc_11f38 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_11fb4 ], [ %stack_var_-1876.0, %dec_label_pc_11fbc.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_11e08 ], [ %stack_var_-1876.0, %dec_label_pc_11e44 ], [ %stack_var_-1876.0, %dec_label_pc_11f38 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_11fd4406 = load i32, i32* @sp, align 4
  %v3_11fd4407 = add i32 %v2_11fd4406, 1672
  %v4_11fd4408 = inttoptr i32 %v3_11fd4407 to i32*
  store i32 0, i32* %v4_11fd4408, align 4
  br label %dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge

dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge:  ; preds = %dec_label_pc_11fbc, %dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge
  %v0_11fc4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11fd4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11fc8 = add i32 %v0_11fc4.pre, 4
  store i32 %v1_11fc8, i32* %r3.global-to-local, align 4
  %v1_11fcc = add i32 %v0_11fc4.pre, 1672
  store i32 %v1_11fcc, i32* %ip.global-to-local, align 4
  %v7_11fd0 = icmp eq i32 %v1_11fc8, 128
  %v2_11fd4 = load i32, i32* @sp, align 4
  %v3_11fd4 = add i32 %v2_11fd4, %v1_11fcc
  %v4_11fd4 = inttoptr i32 %v3_11fd4 to i32*
  store i32 %v0_11fd4.pre, i32* %v4_11fd4, align 4
  br i1 %v7_11fd0, label %dec_label_pc_11fdc, label %dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_11fe4400 = add i32 %v0_11fdc, 4
  store i32 %v1_11fe4400, i32* %r3.global-to-local, align 4
  %v1_11fe8401 = add i32 %v0_11fdc, 1544
  store i32 %v1_11fe8401, i32* %lr.global-to-local, align 4
  %v7_11fec402 = icmp eq i32 %v1_11fe4400, 128
  %v2_11ff0403 = load i32, i32* @sp, align 4
  %v3_11ff0404 = add i32 %v2_11ff0403, %v1_11fe8401
  %v4_11ff0405 = inttoptr i32 %v3_11ff0404 to i32*
  store i32 %v0_11fdc, i32* %v4_11ff0405, align 4
  br i1 %v7_11fec402, label %dec_label_pc_11ff8, label %dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge

dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge:  ; preds = %dec_label_pc_11fdc, %dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge
  %v0_11fe0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11ff0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11fe4 = add i32 %v0_11fe0.pre, 4
  store i32 %v1_11fe4, i32* %r3.global-to-local, align 4
  %v1_11fe8 = add i32 %v0_11fe0.pre, 1544
  store i32 %v1_11fe8, i32* %lr.global-to-local, align 4
  %v7_11fec = icmp eq i32 %v1_11fe4, 128
  %v2_11ff0 = load i32, i32* @sp, align 4
  %v3_11ff0 = add i32 %v2_11ff0, %v1_11fe8
  %v4_11ff0 = inttoptr i32 %v3_11ff0 to i32*
  store i32 %v0_11ff0.pre, i32* %v4_11ff0, align 4
  br i1 %v7_11fec, label %dec_label_pc_11ff8, label %dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge, %dec_label_pc_11fdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11ff8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11ff8, i32* @r6, align 4
  store i32 %v0_11ff8, i32* @r5, align 4
  store i32 %v0_11ff8, i32* @r7, align 4
  store i32 %v0_11ff8, i32* %stack_var_-52, align 4
  %v2_120b4 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_12070

dec_label_pc_1200c:                               ; preds = %dec_label_pc_12098, %dec_label_pc_12070
  %storemerge222 = phi i32 [ 30, %dec_label_pc_12070 ], [ 5, %dec_label_pc_12098 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* %r2.global-to-local, align 4
  %v2_12010 = load i32, i32* @global_var_1f860.188, align 4
  store i32 %v2_12010, i32* %r3.global-to-local, align 4
  %v1_12014 = add i32 %v2_12084, 8
  %v2_12014 = inttoptr i32 %v1_12014 to i32*
  %v3_12014 = load i32, i32* %v2_12014, align 4
  store i32 %v3_12014, i32* %r2.global-to-local, align 4
  %v2_12018 = sub i32 %v2_12010, %v3_12014
  store i32 %v2_12018, i32* %r3.global-to-local, align 4
  %v3_1201c = icmp uge i32 %v2_12018, %storemerge222
  store i1 %v3_1201c, i1* %cpsr_c.global-to-local, align 1
  %v9_1201c = icmp eq i32 %v2_12018, %storemerge222
  store i1 %v9_1201c, i1* %cpsr_z.global-to-local, align 1
  %v2_12020 = xor i1 %v9_1201c, true
  %v3_12020 = and i1 %v3_1201c, %v2_12020
  br i1 %v3_12020, label %dec_label_pc_120d8, label %dec_label_pc_12024

dec_label_pc_12024:                               ; preds = %dec_label_pc_1200c
  store i1 %v2_1208c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_1208c, i1* %cpsr_z.global-to-local, align 1
  %v1_120a8 = add i32 %v2_12084, 4
  %v2_120a8 = inttoptr i32 %v1_120a8 to i32*
  %v3_120a8 = load i32, i32* %v2_120a8, align 4
  br i1 %v7_1208c, label %dec_label_pc_120a8, label %dec_label_pc_1202c

dec_label_pc_1202c:                               ; preds = %dec_label_pc_12024
  store i32 %v3_120a8, i32* %ip.global-to-local, align 4
  %v3_12030 = udiv i32 %v3_120a8, 32
  store i32 %v2_120b4, i32* %r0.global-to-local, align 4
  %v3_12038 = mul nuw nsw i32 %v3_12030, 4
  %v2_1203c = add i32 %v3_12038, %v2_120b4
  store i32 %v2_1203c, i32* %r3.global-to-local, align 4
  %v1_12040 = add i32 %v2_1203c, -184
  %v2_12040 = inttoptr i32 %v1_12040 to i32*
  %v3_12040 = load i32, i32* %v2_12040, align 4
  %v1_12044 = urem i32 %v3_120a8, 32
  store i32 %v1_12044, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_1204c = shl i32 1, %v1_12044
  %v8_1204c = or i32 %v3_12040, %v7_1204c
  store i32 %v8_1204c, i32* %r2.global-to-local, align 4
  store i32 %v8_1204c, i32* %v2_12040, align 4
  %v0_12054 = load i32, i32* @r6, align 4
  %v1_12054 = load i32, i32* %ip.global-to-local, align 4
  %v3_12054 = icmp uge i32 %v0_12054, %v1_12054
  store i1 %v3_12054, i1* %cpsr_c.global-to-local, align 1
  %v9_12054 = icmp eq i32 %v0_12054, %v1_12054
  store i1 %v9_12054, i1* %cpsr_z.global-to-local, align 1
  %v5_12058 = icmp slt i32 %v0_12054, %v1_12054
  br i1 %v5_12058, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_1202c
  store i32 %v1_12054, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_12098, %dec_label_pc_12d34, %dec_label_pc_1210c, %bb311, %dec_label_pc_1202c, %bb308
  %v3_1205c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1205c, i32* %r3.global-to-local, align 4
  %v1_12060 = add i32 %v3_1205c, 1
  store i32 %v1_12060, i32* %r2.global-to-local, align 4
  %v2_12064 = icmp ugt i32 %v1_12060, 254
  store i1 %v2_12064, i1* %cpsr_c.global-to-local, align 1
  %v7_12064 = icmp eq i32 %v1_12060, 255
  store i1 %v7_12064, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_12060, i32* %stack_var_-52, align 4
  %v8_1206c = icmp sgt i32 %v1_12060, 255
  br i1 %v8_1206c, label %dec_label_pc_12118, label %dec_label_pc_12070

dec_label_pc_12070:                               ; preds = %bb309, %dec_label_pc_11ff8
  %v0_1207c = phi i32 [ %v1_12060, %bb309 ], [ %v0_11ff8, %dec_label_pc_11ff8 ]
  store i32 ptrtoint (i32* @global_var_1f8c4.200 to i32), i32* %r0.global-to-local, align 4
  %v3_12074 = mul i32 %v0_1207c, 256
  store i32 %v3_12074, i32* %r3.global-to-local, align 4
  %v2_12078 = load i32, i32* @global_var_1f8c4.200, align 4
  store i32 %v2_12078, i32* %r1.global-to-local, align 4
  %v2_12080 = mul i32 %v0_1207c, 288
  store i32 %v2_12080, i32* %r2.global-to-local, align 4
  %v2_12084 = add i32 %v2_12078, %v2_12080
  store i32 %v2_12084, i32* @r4, align 4
  %v1_12088 = add i32 %v2_12084, 12
  %v2_12088 = inttoptr i32 %v1_12088 to i32*
  %v3_12088 = load i32, i32* %v2_12088, align 4
  store i32 %v3_12088, i32* %ip.global-to-local, align 4
  %v2_1208c = icmp ne i32 %v3_12088, 0
  store i1 %v2_1208c, i1* %cpsr_c.global-to-local, align 1
  %v7_1208c = icmp eq i32 %v3_12088, 1
  store i1 %v7_1208c, i1* %cpsr_z.global-to-local, align 1
  %v2_12090 = xor i1 %v7_1208c, true
  %v3_12090 = and i1 %v2_1208c, %v2_12090
  br i1 %v3_12090, label %dec_label_pc_1200c, label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %dec_label_pc_12070
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12098 = icmp eq i32 %v3_12088, 0
  store i1 %v2_12098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12098, label %bb309, label %dec_label_pc_1200c

dec_label_pc_120a8:                               ; preds = %dec_label_pc_12024
  store i32 %v3_120a8, i32* %r0.global-to-local, align 4
  %v3_120ac = udiv i32 %v3_120a8, 32
  %v3_120b0 = mul nuw nsw i32 %v3_120ac, 4
  store i32 %v2_120b4, i32* %lr.global-to-local, align 4
  %v2_120b8 = add i32 %v3_120b0, %v2_120b4
  store i32 %v2_120b8, i32* %r3.global-to-local, align 4
  %v1_120bc = add i32 %v2_120b8, -312
  %v2_120bc = inttoptr i32 %v1_120bc to i32*
  %v3_120bc = load i32, i32* %v2_120bc, align 4
  %v1_120c0 = urem i32 %v3_120a8, 32
  store i32 %v1_120c0, i32* %r1.global-to-local, align 4
  %v7_120c4 = shl i32 1, %v1_120c0
  %v8_120c4 = or i32 %v3_120bc, %v7_120c4
  store i32 %v8_120c4, i32* %r2.global-to-local, align 4
  %v0_120c8 = load i32, i32* @r5, align 4
  %v3_120c8 = icmp uge i32 %v0_120c8, %v3_120a8
  store i1 %v3_120c8, i1* %cpsr_c.global-to-local, align 1
  %v9_120c8 = icmp eq i32 %v0_120c8, %v3_120a8
  store i1 %v9_120c8, i1* %cpsr_z.global-to-local, align 1
  %v5_120cc = icmp slt i32 %v0_120c8, %v3_120a8
  br i1 %v5_120cc, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_120a8
  store i32 %v3_120a8, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_120a8, %bb310
  store i32 %v8_120c4, i32* %v2_120bc, align 4
  br label %bb309

dec_label_pc_120d8:                               ; preds = %dec_label_pc_1200c
  %v1_120d8 = add i32 %v2_12084, 4
  %v2_120d8 = inttoptr i32 %v1_120d8 to i32*
  %v3_120d8 = load i32, i32* %v2_120d8, align 4
  store i32 %v3_120d8, i32* %r0.global-to-local, align 4
  %v1_120dc = call i32 @function_14284(i32 %v3_120d8)
  store i32 %v1_120dc, i32* %r0.global-to-local, align 4
  %v0_120e0 = load i32, i32* @r4, align 4
  %v1_120e0 = add i32 %v0_120e0, 12
  %v2_120e0 = inttoptr i32 %v1_120e0 to i32*
  %v3_120e0 = load i32, i32* %v2_120e0, align 4
  store i32 %v3_120e0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_120e8 = icmp ugt i32 %v3_120e0, 1
  store i1 %v2_120e8, i1* %cpsr_c.global-to-local, align 1
  %v7_120e8 = icmp eq i32 %v3_120e0, 2
  store i1 %v7_120e8, i1* %cpsr_z.global-to-local, align 1
  %v2_120ec = add i32 %v0_120e0, 4
  %v3_120ec = inttoptr i32 %v2_120ec to i32*
  store i32 -1, i32* %v3_120ec, align 4
  %v2_120f0 = xor i1 %v2_120e8, true
  %v3_120f0 = or i1 %v7_120e8, %v2_120f0
  br i1 %v3_120f0, label %dec_label_pc_12d34, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120d8
  %v0_120f4 = load i32, i32* @r4, align 4
  %v1_120f4 = add i32 %v0_120f4, 284
  %v2_120f4 = inttoptr i32 %v1_120f4 to i8*
  %v3_120f4 = load i8, i8* %v2_120f4, align 1
  %v4_120f4 = zext i8 %v3_120f4 to i32
  %v1_120f8 = add nuw nsw i32 %v4_120f4, 1
  %v1_120fc = urem i32 %v1_120f8, 256
  store i32 %v1_120fc, i32* %r3.global-to-local, align 4
  %v2_12100 = icmp ugt i32 %v1_120fc, 9
  store i1 %v2_12100, i1* %cpsr_c.global-to-local, align 1
  %v7_12100 = icmp eq i32 %v1_120fc, 10
  store i1 %v7_12100, i1* %cpsr_z.global-to-local, align 1
  %v1_12104 = trunc i32 %v1_120f8 to i8
  store i8 %v1_12104, i8* %v2_120f4, align 1
  %v0_12108 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12108, label %dec_label_pc_12d34, label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_120f4
  %v0_1210c = load i32, i32* @r4, align 4
  store i32 %v0_1210c, i32* @r0, align 4
  %v0_12110 = call i32 @function_112d8()
  store i32 %v0_12110, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_12118:                               ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_12120 = load i32, i32* @r6, align 4
  %v1_12120 = load i32, i32* @r5, align 4
  %v3_12120 = icmp uge i32 %v0_12120, %v1_12120
  store i1 %v3_12120, i1* %cpsr_c.global-to-local, align 1
  %v9_12120 = icmp eq i32 %v0_12120, %v1_12120
  store i1 %v9_12120, i1* %cpsr_z.global-to-local, align 1
  %v5_12124 = icmp slt i32 %v0_12120, %v1_12120
  %storemerge75 = select i1 %v5_12124, i32 %v1_12120, i32 %v0_12120
  %v2_12138 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_12138, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_12140 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_12140, i32* %ip.global-to-local, align 4
  %v2_12144 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_12144, i32* %r1.global-to-local, align 4
  %v1_12148 = add i32 %storemerge75, 1
  store i32 %v1_12148, i32* %r0.global-to-local, align 4
  %v5_12154 = call i32 @function_144a4(i32 %v1_12148, i32 %v2_12144, i32 %v2_12138, i32 0, i32 %v2_12140)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_1215c = call i32 @function_14554(i32* null)
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_1215c, i32* @global_var_1f860.188, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_12324 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_123cc = ptrtoint i32* %stack_var_-41 to i32
  %v2_12bb8 = ptrtoint i32* %stack_var_-84 to i32
  %v2_12bc0 = ptrtoint i32* %stack_var_-73 to i32
  %v2_12734 = ptrtoint i32* %stack_var_-56 to i32
  %v2_127e8 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_121b0

dec_label_pc_12178:                               ; preds = %dec_label_pc_121d4, %dec_label_pc_12d44
  %v0_1218c = phi i32 [ %v3_121c8, %dec_label_pc_121d4 ], [ %v0_12178.pre, %dec_label_pc_12d44 ]
  %v3_12178 = udiv i32 %v0_1218c, 32
  %v3_1217c = mul nuw nsw i32 %v3_12178, 4
  store i32 %v2_120b4, i32* @lr, align 4
  %v2_12184 = add i32 %v3_1217c, %v2_120b4
  store i32 %v2_12184, i32* %r3.global-to-local, align 4
  %v1_12188 = add i32 %v2_12184, -184
  %v2_12188 = inttoptr i32 %v1_12188 to i32*
  %v3_12188 = load i32, i32* %v2_12188, align 4
  %v1_1218c = urem i32 %v0_1218c, 32
  store i32 %v1_1218c, i32* %r1.global-to-local, align 4
  %v2_12190 = add nsw i32 %v1_1218c, -1
  %v3_12190 = shl i32 1, %v2_12190
  %v4_12190 = and i32 %v3_12190, %v3_12188
  %v5_12190 = icmp ne i32 %v4_12190, 0
  store i1 %v5_12190, i1* %cpsr_c.global-to-local, align 1
  %v6_12190 = lshr i32 %v3_12188, %v1_1218c
  store i32 %v6_12190, i32* %r2.global-to-local, align 4
  %v1_12194 = urem i32 %v6_12190, 2
  %v2_12194 = icmp eq i32 %v1_12194, 0
  store i1 %v2_12194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12194, label %dec_label_pc_1219c, label %dec_label_pc_12300.preheader

dec_label_pc_12300.preheader:                     ; preds = %dec_label_pc_12178
  %v0_12300101 = load i32, i32* @r5, align 4
  %v1_12300102 = add i32 %v0_12300101, 12
  %v2_12300103 = inttoptr i32 %v1_12300102 to i32*
  %v3_12300104 = load i32, i32* %v2_12300103, align 4
  store i32 %v3_12300104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12304100106 = icmp eq i32 %v3_12300104, 0
  store i1 %v2_12304100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12304100106, label %dec_label_pc_1219c, label %dec_label_pc_1230c.lr.ph

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12300.loopexit, %dec_label_pc_12300.preheader, %dec_label_pc_12178, %bb346, %dec_label_pc_12c60, %dec_label_pc_121b0, %dec_label_pc_12d58, %dec_label_pc_12ca4
  %v3_1219c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1219c, i32* %r3.global-to-local, align 4
  %v1_121a0 = add i32 %v3_1219c, 1
  store i32 %v1_121a0, i32* %r2.global-to-local, align 4
  %v2_121a4 = icmp ugt i32 %v1_121a0, 254
  store i1 %v2_121a4, i1* %cpsr_c.global-to-local, align 1
  %v7_121a4 = icmp eq i32 %v1_121a0, 255
  store i1 %v7_121a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_121a0, i32* %stack_var_-52, align 4
  %v8_121ac = icmp sgt i32 %v1_121a0, 255
  br i1 %v8_121ac, label %dec_label_pc_11b44, label %dec_label_pc_121b0

dec_label_pc_121b0:                               ; preds = %dec_label_pc_1219c, %dec_label_pc_12118
  %v0_121bc = phi i32 [ %v1_121a0, %dec_label_pc_1219c ], [ 0, %dec_label_pc_12118 ]
  store i32 ptrtoint (i32* @global_var_1f8c4.200 to i32), i32* %ip.global-to-local, align 4
  %v3_121b4 = mul i32 %v0_121bc, 256
  store i32 %v3_121b4, i32* %r3.global-to-local, align 4
  %v2_121b8 = load i32, i32* @global_var_1f8c4.200, align 4
  store i32 %v2_121b8, i32* %r1.global-to-local, align 4
  %v2_121c0 = mul i32 %v0_121bc, 288
  store i32 %v2_121c0, i32* %r2.global-to-local, align 4
  %v2_121c4 = add i32 %v2_121b8, %v2_121c0
  store i32 %v2_121c4, i32* @r5, align 4
  %v1_121c8 = add i32 %v2_121c4, 4
  %v2_121c8 = inttoptr i32 %v1_121c8 to i32*
  %v3_121c8 = load i32, i32* %v2_121c8, align 4
  store i32 %v3_121c8, i32* @r4, align 4
  %v2_121cc = icmp eq i32 %v3_121c8, -1
  store i1 %v2_121cc, i1* %cpsr_c.global-to-local, align 1
  %v7_121cc = icmp eq i32 %v3_121c8, -1
  store i1 %v7_121cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_121cc, label %dec_label_pc_1219c, label %dec_label_pc_121d4

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121b0
  %v3_121d4 = udiv i32 %v3_121c8, 32
  %v3_121d8 = mul nuw nsw i32 %v3_121d4, 4
  store i32 %v2_120b4, i32* %lr.global-to-local, align 4
  %v2_121e0 = add i32 %v3_121d8, %v2_120b4
  store i32 %v2_121e0, i32* %r3.global-to-local, align 4
  %v1_121e4 = add i32 %v2_121e0, -312
  %v2_121e4 = inttoptr i32 %v1_121e4 to i32*
  %v3_121e4 = load i32, i32* %v2_121e4, align 4
  %v1_121e8 = urem i32 %v3_121c8, 32
  store i32 %v1_121e8, i32* %r1.global-to-local, align 4
  %v2_121ec = add nsw i32 %v1_121e8, -1
  %v3_121ec = shl i32 1, %v2_121ec
  %v4_121ec = and i32 %v3_121e4, %v3_121ec
  %v5_121ec = icmp ne i32 %v4_121ec, 0
  store i1 %v5_121ec, i1* %cpsr_c.global-to-local, align 1
  %v6_121ec = lshr i32 %v3_121e4, %v1_121e8
  store i32 %v6_121ec, i32* %r2.global-to-local, align 4
  %v1_121f0 = urem i32 %v6_121ec, 2
  %v2_121f0 = icmp eq i32 %v1_121f0, 0
  store i1 %v2_121f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_121f0, label %dec_label_pc_12178, label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121d4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_127e8, i32* %r3.global-to-local, align 4
  store i32 %v2_12734, i32* %ip.global-to-local, align 4
  store i32 %v3_121c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_12228 = call i32 @function_14a34(i32 %v3_121c8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_12734)
  %v3_1222c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1222c, i32* %r3.global-to-local, align 4
  %v2_12230 = or i32 %v3_1222c, %v6_12228
  store i32 %v2_12230, i32* %r0.global-to-local, align 4
  %v4_12230 = icmp eq i32 %v2_12230, 0
  store i1 %v4_12230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_12230, label %dec_label_pc_12238, label %dec_label_pc_12d58

dec_label_pc_12238:                               ; preds = %dec_label_pc_121f8
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1223c = load i32, i32* @r5, align 4
  %v2_1223c = add i32 %v1_1223c, 12
  %v3_1223c = inttoptr i32 %v2_1223c to i32*
  store i32 2, i32* %v3_1223c, align 4
  %v0_12240 = call i32 @function_10a94()
  store i32 %v0_12240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f85c.194 to i32), i32* %r3.global-to-local, align 4
  %v3_12248 = load i8, i8* @global_var_1f85d.195, align 1
  %v4_12248 = zext i8 %v3_12248 to i32
  store i32 %v4_12248, i32* %r2.global-to-local, align 4
  %v2_1224c = load i8, i8* bitcast (i8** @global_var_1f85c.194 to i8*), align 4
  %v3_1224c = zext i8 %v2_1224c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_12250 = mul nuw nsw i32 %v4_12248, 256
  %v5_12250 = or i32 %v3_1224c, %v4_12250
  store i32 %v5_12250, i32* %r1.global-to-local, align 4
  %v2_12254 = call i32 @function_13fe0(i32 %v0_12240, i32 %v5_12250)
  store i32 ptrtoint (i32* @global_var_1f82c.190 to i32), i32* %r3.global-to-local, align 4
  %v2_1225c = load i32, i32* @global_var_1f82c.190, align 4
  store i32 %v2_1225c, i32* %lr.global-to-local, align 4
  %v1_12264 = load i32, i32* @r6, align 4
  %v9_12264 = icmp eq i32 %v2_1225c, %v1_12264
  store i1 %v9_12264, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_12268 = urem i32 %v2_12254, 65536
  store i32 %v3_12268, i32* %r0.global-to-local, align 4
  %v7_1226c = icmp sgt i32 %v2_1225c, %v1_12264
  br i1 %v7_1226c, label %dec_label_pc_12270, label %dec_label_pc_12d40

dec_label_pc_12270:                               ; preds = %dec_label_pc_12238
  %v2_12274 = load i32, i32* @global_var_1f858.192, align 4
  store i32 %v2_12274, i32* %r3.global-to-local, align 4
  store i32 %v1_12264, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12290

dec_label_pc_12280:                               ; preds = %dec_label_pc_122a8, %dec_label_pc_12290
  %v1_12280 = add i32 %v0_12280, 1
  store i32 %v1_12280, i32* %ip.global-to-local, align 4
  %v3_12284 = icmp uge i32 %v1_12280, %v2_1225c
  store i1 %v3_12284, i1* %cpsr_c.global-to-local, align 1
  %v9_12284 = icmp eq i32 %v1_12280, %v2_1225c
  store i1 %v9_12284, i1* %cpsr_z.global-to-local, align 1
  %v1_12288 = add i32 %v0_12288, 16
  store i32 %v1_12288, i32* %r3.global-to-local, align 4
  br i1 %v9_12284, label %dec_label_pc_12d40, label %dec_label_pc_12290

dec_label_pc_12290:                               ; preds = %dec_label_pc_12280, %dec_label_pc_12270
  %v0_12280 = phi i32 [ %v1_12280, %dec_label_pc_12280 ], [ %v1_12264, %dec_label_pc_12270 ]
  %v0_12288 = phi i32 [ %v1_12288, %dec_label_pc_12280 ], [ %v2_12274, %dec_label_pc_12270 ]
  store i32 %v0_12288, i32* %r1.global-to-local, align 4
  %v1_12294 = add i32 %v0_12288, 9
  %v2_12294 = inttoptr i32 %v1_12294 to i8*
  %v3_12294 = load i8, i8* %v2_12294, align 1
  %v4_12294 = zext i8 %v3_12294 to i32
  store i32 %v4_12294, i32* %r2.global-to-local, align 4
  %v1_12298 = add i32 %v0_12288, 8
  %v2_12298 = inttoptr i32 %v1_12298 to i8*
  %v3_12298 = load i8, i8* %v2_12298, align 1
  %v4_12298 = zext i8 %v3_12298 to i32
  %v4_1229c = mul nuw nsw i32 %v4_12294, 256
  %v5_1229c = or i32 %v4_12298, %v4_1229c
  store i32 %v5_1229c, i32* %r3.global-to-local, align 4
  %v3_122a0 = icmp uge i32 %v5_1229c, %v3_12268
  store i1 %v3_122a0, i1* %cpsr_c.global-to-local, align 1
  %v9_122a0 = icmp eq i32 %v5_1229c, %v3_12268
  store i1 %v9_122a0, i1* %cpsr_z.global-to-local, align 1
  %v2_122a4 = xor i1 %v9_122a0, true
  %v3_122a4 = and i1 %v3_122a0, %v2_122a4
  br i1 %v3_122a4, label %dec_label_pc_12280, label %dec_label_pc_122a8

dec_label_pc_122a8:                               ; preds = %dec_label_pc_12290
  %v1_122a8 = add i32 %v0_12288, 10
  %v2_122a8 = inttoptr i32 %v1_122a8 to i8*
  %v3_122a8 = load i8, i8* %v2_122a8, align 1
  %v4_122a8 = zext i8 %v3_122a8 to i32
  store i32 %v4_122a8, i32* %r3.global-to-local, align 4
  %v1_122ac = add i32 %v0_12288, 11
  %v2_122ac = inttoptr i32 %v1_122ac to i8*
  %v3_122ac = load i8, i8* %v2_122ac, align 1
  %v4_122ac = zext i8 %v3_122ac to i32
  store i32 %v4_122ac, i32* %r2.global-to-local, align 4
  %v4_122b0 = mul nuw nsw i32 %v4_122ac, 256
  %v5_122b0 = or i32 %v4_122b0, %v4_122a8
  store i32 %v5_122b0, i32* %r3.global-to-local, align 4
  %v3_122b4 = icmp uge i32 %v5_122b0, %v3_12268
  store i1 %v3_122b4, i1* %cpsr_c.global-to-local, align 1
  %v9_122b4 = icmp eq i32 %v5_122b0, %v3_12268
  store i1 %v9_122b4, i1* %cpsr_z.global-to-local, align 1
  %v2_122b8 = xor i1 %v3_122b4, true
  %v3_122b8 = or i1 %v9_122b4, %v2_122b8
  br i1 %v3_122b8, label %dec_label_pc_12280, label %dec_label_pc_12d44

dec_label_pc_122c0:                               ; preds = %dec_label_pc_124d0, %dec_label_pc_124a4, %dec_label_pc_124ec
  store i32 %v3_124a4, i32* %r1.global-to-local, align 4
  %v0_122c4 = load i32, i32* @sb, align 4
  store i32 %v0_122c4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16d7c.327 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_122d0 = call i32 @function_13988(i32 %v0_122c4, i32 %v3_124a4, i32 ptrtoint ([5 x i8]* @global_var_16d7c.327 to i32), i32 4)
  store i32 %v5_122d0, i32* %r0.global-to-local, align 4
  %v3_122d4 = icmp eq i32 %v5_122d0, -1
  store i1 %v3_122d4, i1* %cpsr_c.global-to-local, align 1
  %v8_122d4 = icmp eq i32 %v5_122d0, -1
  store i1 %v8_122d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_122d0, i32* @r7, align 4
  br i1 %v3_122d4, label %dec_label_pc_122e0, label %dec_label_pc_124f8

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122c0
  %v0_122e0 = load i32, i32* @sb, align 4
  store i32 %v0_122e0, i32* %r0.global-to-local, align 4
  %v0_122e4 = load i32, i32* @r5, align 4
  %v1_122e4 = add i32 %v0_122e4, 24
  %v2_122e4 = inttoptr i32 %v1_122e4 to i32*
  %v3_122e4 = load i32, i32* %v2_122e4, align 4
  store i32 %v3_122e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16d84.329 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_122f0 = call i32 @function_13988(i32 %v0_122e0, i32 %v3_122e4, i32 ptrtoint ([6 x i8]* @global_var_16d84.329 to i32), i32 5)
  store i32 %v5_122f0, i32* %r0.global-to-local, align 4
  %v3_122f4 = icmp eq i32 %v5_122f0, -1
  store i1 %v3_122f4, i1* %cpsr_c.global-to-local, align 1
  %v8_122f4 = icmp eq i32 %v5_122f0, -1
  store i1 %v8_122f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_122f0, i32* @r7, align 4
  br i1 %v3_122f4, label %dec_label_pc_12300.loopexit, label %dec_label_pc_124f8

dec_label_pc_12300.loopexit:                      ; preds = %dec_label_pc_12494, %dec_label_pc_129d4, %dec_label_pc_12384, %dec_label_pc_122e0, %dec_label_pc_12cb0
  %v0_12300 = load i32, i32* @r5, align 4
  %v1_12300 = add i32 %v0_12300, 12
  %v2_12300 = inttoptr i32 %v1_12300 to i32*
  %v3_12300 = load i32, i32* %v2_12300, align 4
  store i32 %v3_12300, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12304100 = icmp eq i32 %v3_12300, 0
  store i1 %v2_12304100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12304100, label %dec_label_pc_1219c, label %dec_label_pc_1230c.lr.ph

dec_label_pc_1230c.lr.ph:                         ; preds = %dec_label_pc_12300.preheader, %dec_label_pc_12300.loopexit
  %v0_1230c132 = phi i32 [ %v0_12300, %dec_label_pc_12300.loopexit ], [ %v0_12300101, %dec_label_pc_12300.preheader ]
  br label %dec_label_pc_1230c

dec_label_pc_12304thread-pre-split.thread:        ; preds = %dec_label_pc_126cc, %dec_label_pc_12780, %dec_label_pc_12834, %dec_label_pc_128e8, %dec_label_pc_12af4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1230c

dec_label_pc_12304thread-pre-split:               ; preds = %dec_label_pc_12714, %dec_label_pc_127c8, %dec_label_pc_1287c, %dec_label_pc_12930, %dec_label_pc_12b3c, %dec_label_pc_12b20, %dec_label_pc_12860, %dec_label_pc_12914, %dec_label_pc_127ac, %dec_label_pc_126f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1230c

dec_label_pc_1230c:                               ; preds = %dec_label_pc_12304thread-pre-split.thread, %dec_label_pc_12304thread-pre-split, %dec_label_pc_1230c.lr.ph
  %v0_12cfc = phi i32 [ %v0_1230c132, %dec_label_pc_1230c.lr.ph ], [ %v0_12384, %dec_label_pc_12304thread-pre-split ], [ %v0_12384, %dec_label_pc_12304thread-pre-split.thread ]
  %v1_1230c = add i32 %v0_12cfc, 24
  %v2_1230c = inttoptr i32 %v1_1230c to i32*
  %v3_1230c = load i32, i32* %v2_1230c, align 4
  store i32 %v3_1230c, i32* %r3.global-to-local, align 4
  %v2_12310 = icmp ugt i32 %v3_1230c, 255
  store i1 %v2_12310, i1* %cpsr_c.global-to-local, align 1
  %v7_12310 = icmp eq i32 %v3_1230c, 256
  store i1 %v7_12310, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_12cfc, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_12310, label %dec_label_pc_12cfc, label %dec_label_pc_1231c

dec_label_pc_1231c:                               ; preds = %dec_label_pc_1230c, %dec_label_pc_12cfc
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_12324, align 4
  %v0_12328 = load i32, i32* @r5, align 4
  %v1_12328 = add i32 %v0_12328, 24
  %v2_12328 = inttoptr i32 %v1_12328 to i32*
  %v3_12328 = load i32, i32* %v2_12328, align 4
  store i32 %v3_12328, i32* %r2.global-to-local, align 4
  %v0_1232c = load i32, i32* @sb, align 4
  %v2_1232c = add i32 %v0_1232c, %v3_12328
  store i32 %v2_1232c, i32* @r4, align 4
  %v1_12330 = add i32 %v0_12328, 4
  %v2_12330 = inttoptr i32 %v1_12330 to i32*
  %v3_12330 = load i32, i32* %v2_12330, align 4
  store i32 %v3_12330, i32* %r0.global-to-local, align 4
  %v1_12334 = sub i32 256, %v3_12328
  store i32 %v1_12334, i32* %r2.global-to-local, align 4
  store i32 %v2_1232c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12340 = inttoptr i32 %v2_1232c to i32*
  %v5_12340 = call i32 @function_14a90(i32 %v3_12330, i32* %v4_12340, i32 %v1_12334, i32 16384)
  store i32 %v5_12340, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12344 = icmp eq i32 %v5_12340, 0
  store i1 %v2_12344, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v5_12340, 1
  br i1 %tmp312, label %dec_label_pc_12c54, label %dec_label_pc_1234c

dec_label_pc_1234c:                               ; preds = %dec_label_pc_1231c
  %v0_1234c = load i32, i32* @r6, align 4
  store i32 %v0_1234c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12354

dec_label_pc_12354:                               ; preds = %bb314, %dec_label_pc_1234c
  %v3_1235c = phi i32 [ %v1_12360, %bb314 ], [ %v0_1234c, %dec_label_pc_1234c ]
  %v1_12354 = load i32, i32* @r4, align 4
  %v2_12354 = add i32 %v1_12354, %v3_1235c
  %v3_12354 = inttoptr i32 %v2_12354 to i8*
  %v4_12354 = load i8, i8* %v3_12354, align 1
  %v6_12354 = zext i8 %v4_12354 to i32
  store i32 %v6_12354, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12358 = icmp eq i8 %v4_12354, 0
  store i1 %v2_12358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12358, label %bb313, label %bb314

bb313:                                            ; preds = %dec_label_pc_12354
  %v1_1235c = load i32, i32* %r1.global-to-local, align 4
  %v2_1235c = trunc i32 %v1_1235c to i8
  store i8 %v2_1235c, i8* %v3_12354, align 1
  %v0_12360.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb314

bb314:                                            ; preds = %dec_label_pc_12354, %bb313
  %v0_12360 = phi i32 [ %v3_1235c, %dec_label_pc_12354 ], [ %v0_12360.pre, %bb313 ]
  %v1_12360 = add i32 %v0_12360, 1
  store i32 %v1_12360, i32* %r2.global-to-local, align 4
  %v3_12364 = icmp uge i32 %v5_12340, %v1_12360
  store i1 %v3_12364, i1* %cpsr_c.global-to-local, align 1
  %v9_12364 = icmp eq i32 %v5_12340, %v1_12360
  store i1 %v9_12364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12364, label %dec_label_pc_1236c, label %dec_label_pc_12354

dec_label_pc_1236c:                               ; preds = %bb314, %dec_label_pc_12c58
  store i32 ptrtoint (i32* @global_var_1f860.188 to i32), i32* @lr, align 4
  %v0_12370 = load i32, i32* @r5, align 4
  %v1_12370 = add i32 %v0_12370, 24
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  %v2_12374 = load i32, i32* @global_var_1f860.188, align 4
  store i32 %v2_12374, i32* %r3.global-to-local, align 4
  %v2_12378 = add i32 %v3_12370, %v5_12340
  store i32 %v2_12378, i32* %ip.global-to-local, align 4
  store i32 %v2_12378, i32* %v2_12370, align 4
  %v0_12380 = load i32, i32* %r3.global-to-local, align 4
  %v1_12380 = load i32, i32* @r5, align 4
  %v2_12380 = add i32 %v1_12380, 8
  %v3_12380 = inttoptr i32 %v2_12380 to i32*
  store i32 %v0_12380, i32* %v3_12380, align 4
  br label %dec_label_pc_12384

dec_label_pc_12384:                               ; preds = %dec_label_pc_12ad0, %dec_label_pc_1236c
  %v0_12384 = load i32, i32* @r5, align 4
  %v1_12384 = add i32 %v0_12384, 12
  %v2_12384 = inttoptr i32 %v1_12384 to i32*
  %v3_12384 = load i32, i32* %v2_12384, align 4
  store i32 %v3_12384, i32* %r2.global-to-local, align 4
  %v1_12388 = add i32 %v3_12384, -2
  store i32 %v1_12388, i32* %r3.global-to-local, align 4
  %v7_1238c = icmp eq i32 %v1_12388, 8
  store i1 %v7_1238c, i1* %cpsr_z.global-to-local, align 1
  %v5_12390 = and i32 %v1_12388, 1073741824
  %v6_12390 = icmp ne i32 %v5_12390, 0
  store i1 %v6_12390, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_12384, label %dec_label_pc_12300.loopexit [
    i32 2, label %dec_label_pc_123bc
    i32 3, label %dec_label_pc_124a4
    i32 4, label %dec_label_pc_1263c
    i32 5, label %dec_label_pc_126cc
    i32 6, label %dec_label_pc_12780
    i32 7, label %dec_label_pc_128e8
    i32 8, label %dec_label_pc_12834
    i32 9, label %dec_label_pc_12af4
    i32 10, label %dec_label_pc_1299c
  ]

dec_label_pc_123bc:                               ; preds = %dec_label_pc_12384
  %v1_123c0 = add i32 %v0_12384, 24
  %v2_123c0 = inttoptr i32 %v1_123c0 to i32*
  %v3_123c0 = load i32, i32* %v2_123c0, align 4
  store i32 %v3_123c0, i32* %ip.global-to-local, align 4
  %v0_123c4 = load i32, i32* @sb, align 4
  store i32 %v0_123c4, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_123d0 = add i32 %v0_12384, 29
  store i32 %v1_123d0, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_123dc91 = icmp eq i32 %v3_123c0, 0
  store i1 %v3_123dc91, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_123dc91, i1* %cpsr_z.global-to-local, align 1
  %v6_123e098 = icmp sgt i32 %v3_123c0, 0
  br i1 %v6_123e098, label %dec_label_pc_123e4.preheader, label %dec_label_pc_12484

dec_label_pc_123dc.loopexit:                      ; preds = %dec_label_pc_123fc
  %v2_12404 = add i32 %v1_12404, 2
  store i32 %v2_12404, i32* @r6, align 4
  %v2_12408 = add i32 %v1_12408, 2
  store i32 %v2_12408, i32* @r4, align 4
  %v2_1240c = add i32 %v1_1240c, 2
  store i32 %v2_1240c, i32* @r7, align 4
  %v3_123dc = icmp uge i32 %v2_1240c, %v1_123dc
  store i1 %v3_123dc, i1* %cpsr_c.global-to-local, align 1
  %v9_123dc = icmp eq i32 %v2_1240c, %v1_123dc
  store i1 %v9_123dc, i1* %cpsr_z.global-to-local, align 1
  %v6_123e0 = icmp slt i32 %v2_1240c, %v1_123dc
  br i1 %v6_123e0, label %dec_label_pc_123e4.preheader, label %dec_label_pc_12484

dec_label_pc_123e4.preheader:                     ; preds = %dec_label_pc_123bc, %dec_label_pc_123dc.loopexit
  %v6_1248c168 = phi i32 [ %v6_1248c169, %dec_label_pc_123dc.loopexit ], [ %v0_12384, %dec_label_pc_123bc ]
  %v1_1240c157 = phi i32 [ %v2_1240c, %dec_label_pc_123dc.loopexit ], [ 0, %dec_label_pc_123bc ]
  %v1_12404155 = phi i32 [ %v2_12404, %dec_label_pc_123dc.loopexit ], [ %v0_123c4, %dec_label_pc_123bc ]
  %v1_123f0153 = phi i32 [ %v1_123dc, %dec_label_pc_123dc.loopexit ], [ %v3_123c0, %dec_label_pc_123bc ]
  %v0_123e4151 = phi i32 [ %v2_12408, %dec_label_pc_123dc.loopexit ], [ %v1_123d0, %dec_label_pc_123bc ]
  br label %dec_label_pc_123e4

dec_label_pc_123e4:                               ; preds = %dec_label_pc_123e4.preheader, %dec_label_pc_12464
  %v6_1248c169 = phi i32 [ %v6_1248c168, %dec_label_pc_123e4.preheader ], [ %v0_1246c, %dec_label_pc_12464 ]
  %v1_1240c = phi i32 [ %v1_1240c157, %dec_label_pc_123e4.preheader ], [ %v1_12470, %dec_label_pc_12464 ]
  %v1_12404 = phi i32 [ %v1_12404155, %dec_label_pc_123e4.preheader ], [ %v1_12478, %dec_label_pc_12464 ]
  %v1_123dc = phi i32 [ %v1_123f0153, %dec_label_pc_123e4.preheader ], [ %v3_1246c, %dec_label_pc_12464 ]
  %v1_12408 = phi i32 [ %v0_123e4151, %dec_label_pc_123e4.preheader ], [ %v1_1247c, %dec_label_pc_12464 ]
  %v1_123e4 = add i32 %v1_12408, -1
  %v2_123e4 = inttoptr i32 %v1_123e4 to i8*
  %v3_123e4 = load i8, i8* %v2_123e4, align 1
  %v4_123e4 = zext i8 %v3_123e4 to i32
  store i32 %v4_123e4, i32* %r3.global-to-local, align 4
  %v2_123e8 = icmp eq i8 %v3_123e4, -1
  store i1 %v2_123e8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_123e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123e8, label %dec_label_pc_123f0, label %dec_label_pc_12484

dec_label_pc_123f0:                               ; preds = %dec_label_pc_123e4
  %v0_123f0 = load i32, i32* @sb, align 4
  %v2_123f0 = add i32 %v0_123f0, %v1_123dc
  store i32 %v2_123f0, i32* %r2.global-to-local, align 4
  %v3_123f4 = icmp uge i32 %v2_123f0, %v1_12408
  store i1 %v3_123f4, i1* %cpsr_c.global-to-local, align 1
  %v9_123f4 = icmp eq i32 %v2_123f0, %v1_12408
  store i1 %v9_123f4, i1* %cpsr_z.global-to-local, align 1
  %v2_123f8 = xor i1 %v3_123f4, true
  %v3_123f8 = or i1 %v9_123f4, %v2_123f8
  br i1 %v3_123f8, label %dec_label_pc_12484, label %dec_label_pc_123fc

dec_label_pc_123fc:                               ; preds = %dec_label_pc_123f0
  %v1_123fc = inttoptr i32 %v1_12408 to i8*
  %v2_123fc = load i8, i8* %v1_123fc, align 1
  %v3_123fc = zext i8 %v2_123fc to i32
  store i32 %v3_123fc, i32* %r3.global-to-local, align 4
  %v2_12400 = icmp eq i8 %v2_123fc, -1
  store i1 %v2_12400, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_12400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12400, label %dec_label_pc_123dc.loopexit, label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %dec_label_pc_123fc
  %v2_12414 = icmp ugt i8 %v2_123fc, -4
  store i1 %v2_12414, i1* %cpsr_c.global-to-local, align 1
  %v7_12414 = icmp eq i8 %v2_123fc, -3
  store i1 %v7_12414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12414, label %dec_label_pc_12ba8, label %dec_label_pc_1241c

dec_label_pc_1241c:                               ; preds = %dec_label_pc_12414
  %v1_1241c = add i32 %v1_12404, 2
  store i32 %v1_1241c, i32* %r3.global-to-local, align 4
  %v3_12420 = icmp uge i32 %v2_123f0, %v1_1241c
  store i1 %v3_12420, i1* %cpsr_c.global-to-local, align 1
  %v9_12420 = icmp eq i32 %v2_123f0, %v1_1241c
  store i1 %v9_12420, i1* %cpsr_z.global-to-local, align 1
  %v2_12424 = xor i1 %v3_12420, true
  %v3_12424 = or i1 %v9_12420, %v2_12424
  br i1 %v3_12424, label %dec_label_pc_12484, label %dec_label_pc_12428

dec_label_pc_12428:                               ; preds = %bb344, %dec_label_pc_12bfc, %bb343, %dec_label_pc_1241c
  %v0_12428 = load i32, i32* @r4, align 4
  %v1_12428 = inttoptr i32 %v0_12428 to i8*
  %v2_12428 = load i8, i8* %v1_12428, align 1
  %v3_12428 = zext i8 %v2_12428 to i32
  store i32 %v3_12428, i32* %r3.global-to-local, align 4
  %v2_1242c = icmp ugt i8 %v2_12428, -4
  store i1 %v2_1242c, i1* %cpsr_c.global-to-local, align 1
  %v7_1242c = icmp eq i8 %v2_12428, -3
  store i1 %v7_1242c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1242c, label %bb315, label %dec_label_pc_12438

bb315:                                            ; preds = %dec_label_pc_12428
  %v1_12430 = load i32, i32* @r8, align 4
  %v2_12430 = trunc i32 %v1_12430 to i8
  store i8 %v2_12430, i8* %v1_12428, align 1
  %v0_12434.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12434.pr, label %bb317, label %.dec_label_pc_12438_crit_edge

.dec_label_pc_12438_crit_edge:                    ; preds = %bb315
  %v0_12438.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12438

dec_label_pc_12438:                               ; preds = %.dec_label_pc_12438_crit_edge, %dec_label_pc_12428
  %v0_12438 = phi i32 [ %v0_12438.pre, %.dec_label_pc_12438_crit_edge ], [ %v3_12428, %dec_label_pc_12428 ]
  %v2_12438 = icmp ugt i32 %v0_12438, 250
  store i1 %v2_12438, i1* %cpsr_c.global-to-local, align 1
  %v7_12438 = icmp eq i32 %v0_12438, 251
  store i1 %v7_12438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12438, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_12438
  %v1_1243c = load i32, i32* %sl.global-to-local, align 4
  %v2_1243c = trunc i32 %v1_1243c to i8
  %v3_1243c = load i32, i32* @r4, align 4
  %v4_1243c = inttoptr i32 %v3_1243c to i8*
  store i8 %v2_1243c, i8* %v4_1243c, align 1
  br label %bb317

bb317:                                            ; preds = %bb315, %dec_label_pc_12438, %bb316
  %v0_12440 = load i32, i32* @r4, align 4
  %v1_12440 = add i32 %v0_12440, 1
  %v2_12440 = inttoptr i32 %v1_12440 to i8*
  %v3_12440 = load i8, i8* %v2_12440, align 1
  %v4_12440 = zext i8 %v3_12440 to i32
  store i32 %v4_12440, i32* %r3.global-to-local, align 4
  %v2_12444 = icmp ugt i8 %v3_12440, -4
  store i1 %v2_12444, i1* %cpsr_c.global-to-local, align 1
  %v7_12444 = icmp eq i8 %v3_12440, -3
  store i1 %v7_12444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12444, label %bb318, label %dec_label_pc_12450

bb318:                                            ; preds = %bb317
  %v1_12448 = load i32, i32* @r8, align 4
  %v2_12448 = trunc i32 %v1_12448 to i8
  store i8 %v2_12448, i8* %v2_12440, align 1
  %v0_1244c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1244c.pr, label %bb320, label %.dec_label_pc_12450_crit_edge

.dec_label_pc_12450_crit_edge:                    ; preds = %bb318
  %v0_12450.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12450

dec_label_pc_12450:                               ; preds = %.dec_label_pc_12450_crit_edge, %bb317
  %v0_12450 = phi i32 [ %v0_12450.pre, %.dec_label_pc_12450_crit_edge ], [ %v4_12440, %bb317 ]
  %v2_12450 = icmp ugt i32 %v0_12450, 250
  store i1 %v2_12450, i1* %cpsr_c.global-to-local, align 1
  %v7_12450 = icmp eq i32 %v0_12450, 251
  store i1 %v7_12450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12450, label %bb319, label %bb320

bb319:                                            ; preds = %dec_label_pc_12450
  %v1_12454 = load i32, i32* %sl.global-to-local, align 4
  %v2_12454 = trunc i32 %v1_12454 to i8
  %v3_12454 = load i32, i32* @r4, align 4
  %v4_12454 = add i32 %v3_12454, 1
  %v5_12454 = inttoptr i32 %v4_12454 to i8*
  store i8 %v2_12454, i8* %v5_12454, align 1
  br label %bb320

bb320:                                            ; preds = %bb318, %dec_label_pc_12450, %bb319
  %v0_12458 = load i32, i32* @r5, align 4
  %v1_12458 = add i32 %v0_12458, 4
  %v2_12458 = inttoptr i32 %v1_12458 to i32*
  %v3_12458 = load i32, i32* %v2_12458, align 4
  store i32 %v3_12458, i32* %r0.global-to-local, align 4
  %v0_1245c = load i32, i32* @r6, align 4
  br label %dec_label_pc_12464

dec_label_pc_12464:                               ; preds = %dec_label_pc_12cd4, %bb320
  %v0_12468 = phi i32 [ %v3_12cec, %dec_label_pc_12cd4 ], [ %v3_12458, %bb320 ]
  %storemerge5 = phi i32 [ %v2_12bc0, %dec_label_pc_12cd4 ], [ %v0_1245c, %bb320 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_12cd4 ], [ 3, %bb320 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12468 = inttoptr i32 %storemerge5 to i32*
  %v5_12468 = call i32 @function_14af0(i32 %v0_12468, i32* %v4_12468, i32 %storemerge, i32 16384)
  store i32 %v5_12468, i32* %r0.global-to-local, align 4
  %v0_1246c = load i32, i32* @r5, align 4
  %v1_1246c = add i32 %v0_1246c, 24
  %v2_1246c = inttoptr i32 %v1_1246c to i32*
  %v3_1246c = load i32, i32* %v2_1246c, align 4
  store i32 %v3_1246c, i32* %ip.global-to-local, align 4
  %v0_12470 = load i32, i32* @r7, align 4
  %v1_12470 = add i32 %v0_12470, 3
  store i32 %v1_12470, i32* @r7, align 4
  %v3_12474 = icmp uge i32 %v1_12470, %v3_1246c
  store i1 %v3_12474, i1* %cpsr_c.global-to-local, align 1
  %v9_12474 = icmp eq i32 %v1_12470, %v3_1246c
  store i1 %v9_12474, i1* %cpsr_z.global-to-local, align 1
  %v0_12478 = load i32, i32* @r6, align 4
  %v1_12478 = add i32 %v0_12478, 3
  store i32 %v1_12478, i32* @r6, align 4
  %v0_1247c = load i32, i32* @r4, align 4
  %v1_1247c = add i32 %v0_1247c, 3
  store i32 %v1_1247c, i32* @r4, align 4
  %v5_12480 = icmp slt i32 %v1_12470, %v3_1246c
  br i1 %v5_12480, label %dec_label_pc_123e4, label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_123dc.loopexit, %dec_label_pc_123e4, %dec_label_pc_12464, %dec_label_pc_1241c, %dec_label_pc_123f0, %dec_label_pc_123bc, %dec_label_pc_12ba8.dec_label_pc_12484.loopexit_crit_edge
  %v6_1248c = phi i32 [ %v0_12bcc, %dec_label_pc_12ba8.dec_label_pc_12484.loopexit_crit_edge ], [ %v0_12384, %dec_label_pc_123bc ], [ %v6_1248c169, %dec_label_pc_123e4 ], [ %v0_1246c, %dec_label_pc_12464 ], [ %v6_1248c169, %dec_label_pc_1241c ], [ %v6_1248c169, %dec_label_pc_123f0 ], [ %v6_1248c169, %dec_label_pc_123dc.loopexit ]
  %v0_12494.pre = phi i32 [ %v0_12484.pre.pre, %dec_label_pc_12ba8.dec_label_pc_12484.loopexit_crit_edge ], [ 0, %dec_label_pc_123bc ], [ %v1_1240c, %dec_label_pc_123e4 ], [ %v1_12470, %dec_label_pc_12464 ], [ %v1_1240c, %dec_label_pc_1241c ], [ %v1_1240c, %dec_label_pc_123f0 ], [ %v2_1240c, %dec_label_pc_123dc.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12484 = icmp eq i32 %v0_12494.pre, 0
  store i1 %v2_12484, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_12494.pre, 1
  br i1 %tmp321, label %dec_label_pc_12494, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_12484
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_1248c = add i32 %v6_1248c, 12
  %v8_1248c = inttoptr i32 %v7_1248c to i32*
  store i32 3, i32* %v8_1248c, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12494:                               ; preds = %dec_label_pc_12484, %dec_label_pc_12b48, %dec_label_pc_12a20, %dec_label_pc_1293c, %dec_label_pc_12888, %dec_label_pc_127d4, %dec_label_pc_12720, %dec_label_pc_12688, %dec_label_pc_124f8
  %v0_12494 = phi i32 [ %v1_12b3c, %dec_label_pc_12b48 ], [ %v0_12a18, %dec_label_pc_12a20 ], [ %v1_12930, %dec_label_pc_1293c ], [ %v1_1287c, %dec_label_pc_12888 ], [ %v1_127c8, %dec_label_pc_127d4 ], [ %v1_12714, %dec_label_pc_12720 ], [ %v0_12688, %dec_label_pc_12688 ], [ %v0_124f8, %dec_label_pc_124f8 ], [ %v0_12494.pre, %dec_label_pc_12484 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12494 = icmp eq i32 %v0_12494, 0
  store i1 %v2_12494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12494, label %dec_label_pc_12300.loopexit, label %dec_label_pc_1249c

dec_label_pc_1249c:                               ; preds = %dec_label_pc_12494
  %v0_1249c = load i32, i32* @r5, align 4
  %v1_1249c = add i32 %v0_1249c, 24
  %v2_1249c = inttoptr i32 %v1_1249c to i32*
  %v3_1249c = load i32, i32* %v2_1249c, align 4
  store i32 %v3_1249c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_124a4:                               ; preds = %dec_label_pc_12384
  %v1_124a4 = add i32 %v0_12384, 24
  %v2_124a4 = inttoptr i32 %v1_124a4 to i32*
  %v3_124a4 = load i32, i32* %v2_124a4, align 4
  store i32 %v3_124a4, i32* %ip.global-to-local, align 4
  %v1_124a8 = add i32 %v3_124a4, -1
  store i32 %v1_124a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_124ac = icmp eq i32 %v1_124a8, 0
  store i1 %v2_124ac, i1* %cpsr_z.global-to-local, align 1
  %v5_124b0 = icmp sgt i32 %v1_124a8, 0
  br i1 %v5_124b0, label %dec_label_pc_124d8, label %dec_label_pc_122c0

dec_label_pc_124b8:                               ; preds = %bb322
  %v2_124b8 = icmp ugt i8 %v3_124dc, 35
  store i1 %v2_124b8, i1* %cpsr_c.global-to-local, align 1
  %v7_124b8 = icmp eq i8 %v3_124dc, 36
  store i1 %v7_124b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124b8, label %dec_label_pc_124ec, label %dec_label_pc_124c0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_124b8
  %v2_124c0 = icmp ugt i8 %v3_124dc, 34
  store i1 %v2_124c0, i1* %cpsr_c.global-to-local, align 1
  %v7_124c0 = icmp eq i8 %v3_124dc, 35
  store i1 %v7_124c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124c0, label %dec_label_pc_124ec, label %dec_label_pc_124c8

dec_label_pc_124c8:                               ; preds = %dec_label_pc_124c0
  %v2_124c8 = icmp ugt i8 %v3_124dc, 36
  store i1 %v2_124c8, i1* %cpsr_c.global-to-local, align 1
  %v7_124c8 = icmp eq i8 %v3_124dc, 37
  store i1 %v7_124c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124c8, label %dec_label_pc_124ec, label %dec_label_pc_124d0

dec_label_pc_124d0:                               ; preds = %dec_label_pc_124c8
  %v1_124d0 = add i32 %v0_124ec, -1
  store i32 %v1_124d0, i32* %r0.global-to-local, align 4
  %v2_124d0 = icmp ne i32 %v0_124ec, 0
  store i1 %v2_124d0, i1* %cpsr_c.global-to-local, align 1
  %v7_124d0 = icmp eq i32 %v0_124ec, 1
  store i1 %v7_124d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124d0, label %dec_label_pc_122c0, label %dec_label_pc_124d8

dec_label_pc_124d8:                               ; preds = %dec_label_pc_124a4, %dec_label_pc_124d0
  %v0_124ec = phi i32 [ %v1_124d0, %dec_label_pc_124d0 ], [ %v1_124a8, %dec_label_pc_124a4 ]
  %v2_124d8 = add i32 %v0_124ec, %v0_12384
  store i32 %v2_124d8, i32* %r3.global-to-local, align 4
  %v1_124dc = add i32 %v2_124d8, 28
  %v2_124dc = inttoptr i32 %v1_124dc to i8*
  %v3_124dc = load i8, i8* %v2_124dc, align 1
  %v4_124dc = zext i8 %v3_124dc to i32
  store i32 %v4_124dc, i32* %r3.global-to-local, align 4
  %v2_124e0 = icmp ugt i8 %v3_124dc, 61
  store i1 %v2_124e0, i1* %cpsr_c.global-to-local, align 1
  %v7_124e0 = icmp eq i8 %v3_124dc, 62
  store i1 %v7_124e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124e0, label %dec_label_pc_124ec, label %bb322

bb322:                                            ; preds = %dec_label_pc_124d8
  %v3_124e4 = icmp ugt i8 %v3_124dc, 57
  store i1 %v3_124e4, i1* %cpsr_c.global-to-local, align 1
  %v8_124e4 = icmp eq i8 %v3_124dc, 58
  store i1 %v8_124e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_124e4, label %dec_label_pc_124ec, label %dec_label_pc_124b8

dec_label_pc_124ec:                               ; preds = %dec_label_pc_124d8, %bb322, %dec_label_pc_124c8, %dec_label_pc_124c0, %dec_label_pc_124b8
  %v1_124ec = add i32 %v0_124ec, 1
  store i32 %v1_124ec, i32* @r7, align 4
  %v2_124f0 = icmp eq i32 %v1_124ec, -1
  store i1 %v2_124f0, i1* %cpsr_c.global-to-local, align 1
  %v7_124f0 = icmp eq i32 %v0_124ec, -2
  store i1 %v7_124f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_124f0, label %dec_label_pc_122c0, label %dec_label_pc_124f8

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124ec, %dec_label_pc_122e0, %dec_label_pc_122c0
  %v0_124f8 = phi i32 [ %v5_122f0, %dec_label_pc_122e0 ], [ %v5_122d0, %dec_label_pc_122c0 ], [ %v1_124ec, %dec_label_pc_124ec ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_124f8 = icmp eq i32 %v0_124f8, 0
  store i1 %v2_124f8, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_124f8, 1
  br i1 %tmp323, label %dec_label_pc_12494, label %dec_label_pc_12500

dec_label_pc_12500:                               ; preds = %dec_label_pc_124f8
  %v0_12500 = load i32, i32* @r5, align 4
  %v1_12500 = inttoptr i32 %v0_12500 to i32*
  %v2_12500 = load i32, i32* %v1_12500, align 4
  store i32 %v2_12500, i32* %r3.global-to-local, align 4
  %v1_12504 = add i32 %v0_12500, 4
  %v2_12504 = inttoptr i32 %v1_12504 to i32*
  %v3_12504 = load i32, i32* %v2_12504, align 4
  store i32 %v3_12504, i32* %r0.global-to-local, align 4
  %v1_12508 = add i32 %v2_12500, 12
  %v2_12508 = inttoptr i32 %v1_12508 to i8*
  %v3_12508 = load i8, i8* %v2_12508, align 1
  %v4_12508 = zext i8 %v3_12508 to i32
  store i32 %v4_12508, i32* %r2.global-to-local, align 4
  %v1_1250c = inttoptr i32 %v2_12500 to i32*
  %v2_1250c = load i32, i32* %v1_1250c, align 4
  store i32 %v2_1250c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12514 = inttoptr i32 %v2_1250c to i32*
  %v5_12514 = call i32 @function_14af0(i32 %v3_12504, i32* %v4_12514, i32 %v4_12508, i32 16384)
  store i32 %v5_12514, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_1251c = load i32, i32* @r5, align 4
  %v1_1251c = add i32 %v0_1251c, 4
  %v2_1251c = inttoptr i32 %v1_1251c to i32*
  %v3_1251c = load i32, i32* %v2_1251c, align 4
  store i32 %v3_1251c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_12528 = call i32 @function_14af0(i32 %v3_1251c, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 %v5_12528, i32* %r0.global-to-local, align 4
  %v0_1252c = load i32, i32* @r5, align 4
  %v1_1252c = add i32 %v0_1252c, 24
  %v2_1252c = inttoptr i32 %v1_1252c to i32*
  %v3_1252c = load i32, i32* %v2_1252c, align 4
  store i32 %v3_1252c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_12534 = add i32 %v0_1252c, 12
  %v3_12534 = inttoptr i32 %v2_12534 to i32*
  store i32 4, i32* %v3_12534, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12384
  %v1_1263c = add i32 %v0_12384, 24
  %v2_1263c = inttoptr i32 %v1_1263c to i32*
  %v3_1263c = load i32, i32* %v2_1263c, align 4
  store i32 %v3_1263c, i32* %ip.global-to-local, align 4
  %v1_12640 = add i32 %v3_1263c, -1
  store i32 %v1_12640, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12644 = icmp eq i32 %v1_12640, 0
  store i1 %v2_12644, i1* %cpsr_z.global-to-local, align 1
  %v5_12648 = icmp sgt i32 %v1_12640, 0
  br i1 %v5_12648, label %dec_label_pc_12668, label %dec_label_pc_12cb0

dec_label_pc_12650:                               ; preds = %bb324
  %v2_12650 = icmp ugt i8 %v3_1266c, 35
  store i1 %v2_12650, i1* %cpsr_c.global-to-local, align 1
  %v7_12650 = icmp eq i8 %v3_1266c, 36
  store i1 %v7_12650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12650, label %dec_label_pc_1267c, label %dec_label_pc_12658

dec_label_pc_12658:                               ; preds = %dec_label_pc_12650
  %v2_12658 = icmp ugt i8 %v3_1266c, 34
  store i1 %v2_12658, i1* %cpsr_c.global-to-local, align 1
  %v7_12658 = icmp eq i8 %v3_1266c, 35
  store i1 %v7_12658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12658, label %dec_label_pc_1267c, label %dec_label_pc_12660

dec_label_pc_12660:                               ; preds = %dec_label_pc_12658
  %v1_12660 = add i32 %v0_1267c, -1
  store i32 %v1_12660, i32* %r0.global-to-local, align 4
  %v2_12660 = icmp ne i32 %v0_1267c, 0
  store i1 %v2_12660, i1* %cpsr_c.global-to-local, align 1
  %v7_12660 = icmp eq i32 %v0_1267c, 1
  store i1 %v7_12660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12660, label %dec_label_pc_12cb0, label %dec_label_pc_12668

dec_label_pc_12668:                               ; preds = %dec_label_pc_1263c, %dec_label_pc_12660
  %v0_1267c = phi i32 [ %v1_12660, %dec_label_pc_12660 ], [ %v1_12640, %dec_label_pc_1263c ]
  %v2_12668 = add i32 %v0_1267c, %v0_12384
  store i32 %v2_12668, i32* %r3.global-to-local, align 4
  %v1_1266c = add i32 %v2_12668, 28
  %v2_1266c = inttoptr i32 %v1_1266c to i8*
  %v3_1266c = load i8, i8* %v2_1266c, align 1
  %v4_1266c = zext i8 %v3_1266c to i32
  store i32 %v4_1266c, i32* %r3.global-to-local, align 4
  %v2_12670 = icmp ugt i8 %v3_1266c, 61
  store i1 %v2_12670, i1* %cpsr_c.global-to-local, align 1
  %v7_12670 = icmp eq i8 %v3_1266c, 62
  store i1 %v7_12670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12670, label %dec_label_pc_1267c, label %bb324

bb324:                                            ; preds = %dec_label_pc_12668
  %v3_12674 = icmp ugt i8 %v3_1266c, 57
  store i1 %v3_12674, i1* %cpsr_c.global-to-local, align 1
  %v8_12674 = icmp eq i8 %v3_1266c, 58
  store i1 %v8_12674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12674, label %dec_label_pc_1267c, label %dec_label_pc_12650

dec_label_pc_1267c:                               ; preds = %dec_label_pc_12668, %bb324, %dec_label_pc_12658, %dec_label_pc_12650
  %v1_1267c = add i32 %v0_1267c, 1
  store i32 %v1_1267c, i32* @r7, align 4
  %v2_12680 = icmp eq i32 %v1_1267c, -1
  store i1 %v2_12680, i1* %cpsr_c.global-to-local, align 1
  %v7_12680 = icmp eq i32 %v0_1267c, -2
  store i1 %v7_12680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12680, label %dec_label_pc_12cb0, label %dec_label_pc_12688

dec_label_pc_12688:                               ; preds = %dec_label_pc_1267c, %dec_label_pc_12cb0
  %v0_12688 = phi i32 [ %v5_12cc0, %dec_label_pc_12cb0 ], [ %v1_1267c, %dec_label_pc_1267c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12688 = icmp eq i32 %v0_12688, 0
  store i1 %v2_12688, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_12688, 1
  br i1 %tmp325, label %dec_label_pc_12494, label %dec_label_pc_12690

dec_label_pc_12690:                               ; preds = %dec_label_pc_12688
  %v0_12690 = load i32, i32* @r5, align 4
  %v1_12690 = inttoptr i32 %v0_12690 to i32*
  %v2_12690 = load i32, i32* %v1_12690, align 4
  store i32 %v2_12690, i32* %r3.global-to-local, align 4
  %v1_12694 = add i32 %v0_12690, 4
  %v2_12694 = inttoptr i32 %v1_12694 to i32*
  %v3_12694 = load i32, i32* %v2_12694, align 4
  store i32 %v3_12694, i32* %r0.global-to-local, align 4
  %v1_12698 = add i32 %v2_12690, 13
  %v2_12698 = inttoptr i32 %v1_12698 to i8*
  %v3_12698 = load i8, i8* %v2_12698, align 1
  %v4_12698 = zext i8 %v3_12698 to i32
  store i32 %v4_12698, i32* %r2.global-to-local, align 4
  %v1_1269c = add i32 %v2_12690, 4
  %v2_1269c = inttoptr i32 %v1_1269c to i32*
  %v3_1269c = load i32, i32* %v2_1269c, align 4
  store i32 %v3_1269c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_126a4 = inttoptr i32 %v3_1269c to i32*
  %v5_126a4 = call i32 @function_14af0(i32 %v3_12694, i32* %v4_126a4, i32 %v4_12698, i32 16384)
  store i32 %v5_126a4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_126ac = load i32, i32* @r5, align 4
  %v1_126ac = add i32 %v0_126ac, 4
  %v2_126ac = inttoptr i32 %v1_126ac to i32*
  %v3_126ac = load i32, i32* %v2_126ac, align 4
  store i32 %v3_126ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_126b8 = call i32 @function_14af0(i32 %v3_126ac, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 %v5_126b8, i32* %r0.global-to-local, align 4
  %v0_126bc = load i32, i32* @r5, align 4
  %v1_126bc = add i32 %v0_126bc, 24
  %v2_126bc = inttoptr i32 %v1_126bc to i32*
  %v3_126bc = load i32, i32* %v2_126bc, align 4
  store i32 %v3_126bc, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_126c4 = add i32 %v0_126bc, 12
  %v3_126c4 = inttoptr i32 %v2_126c4 to i32*
  store i32 5, i32* %v3_126c4, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_126cc:                               ; preds = %dec_label_pc_12384
  %v1_126cc = add i32 %v0_12384, 24
  %v2_126cc = inttoptr i32 %v1_126cc to i32*
  %v3_126cc = load i32, i32* %v2_126cc, align 4
  store i32 %v3_126cc, i32* %ip.global-to-local, align 4
  %v1_126d0 = add i32 %v3_126cc, -1
  store i32 %v1_126d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_126d4 = icmp eq i32 %v1_126d0, 0
  store i1 %v2_126d4, i1* %cpsr_z.global-to-local, align 1
  %v5_126d8 = icmp sgt i32 %v1_126d0, 0
  br i1 %v5_126d8, label %dec_label_pc_12700, label %dec_label_pc_12304thread-pre-split.thread

dec_label_pc_126e0:                               ; preds = %bb326
  %v2_126e0 = icmp ugt i8 %v3_12704, 35
  store i1 %v2_126e0, i1* %cpsr_c.global-to-local, align 1
  %v7_126e0 = icmp eq i8 %v3_12704, 36
  store i1 %v7_126e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126e0, label %dec_label_pc_12714, label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %dec_label_pc_126e0
  %v2_126e8 = icmp ugt i8 %v3_12704, 34
  store i1 %v2_126e8, i1* %cpsr_c.global-to-local, align 1
  %v7_126e8 = icmp eq i8 %v3_12704, 35
  store i1 %v7_126e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126e8, label %dec_label_pc_12714, label %dec_label_pc_126f0

dec_label_pc_126f0:                               ; preds = %dec_label_pc_126e8
  %v2_126f0 = icmp ugt i8 %v3_12704, 36
  store i1 %v2_126f0, i1* %cpsr_c.global-to-local, align 1
  %v7_126f0 = icmp eq i8 %v3_12704, 37
  store i1 %v7_126f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126f0, label %dec_label_pc_12714, label %dec_label_pc_126f8

dec_label_pc_126f8:                               ; preds = %dec_label_pc_126f0
  %v1_126f8 = add i32 %v0_12714, -1
  store i32 %v1_126f8, i32* %r0.global-to-local, align 4
  %v2_126f8 = icmp ne i32 %v0_12714, 0
  store i1 %v2_126f8, i1* %cpsr_c.global-to-local, align 1
  %v7_126f8 = icmp eq i32 %v0_12714, 1
  store i1 %v7_126f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_126f8, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126cc, %dec_label_pc_126f8
  %v0_12714 = phi i32 [ %v1_126f8, %dec_label_pc_126f8 ], [ %v1_126d0, %dec_label_pc_126cc ]
  %v2_12700 = add i32 %v0_12714, %v0_12384
  store i32 %v2_12700, i32* %r3.global-to-local, align 4
  %v1_12704 = add i32 %v2_12700, 28
  %v2_12704 = inttoptr i32 %v1_12704 to i8*
  %v3_12704 = load i8, i8* %v2_12704, align 1
  %v4_12704 = zext i8 %v3_12704 to i32
  store i32 %v4_12704, i32* %r3.global-to-local, align 4
  %v2_12708 = icmp ugt i8 %v3_12704, 61
  store i1 %v2_12708, i1* %cpsr_c.global-to-local, align 1
  %v7_12708 = icmp eq i8 %v3_12704, 62
  store i1 %v7_12708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12708, label %dec_label_pc_12714, label %bb326

bb326:                                            ; preds = %dec_label_pc_12700
  %v3_1270c = icmp ugt i8 %v3_12704, 57
  store i1 %v3_1270c, i1* %cpsr_c.global-to-local, align 1
  %v8_1270c = icmp eq i8 %v3_12704, 58
  store i1 %v8_1270c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1270c, label %dec_label_pc_12714, label %dec_label_pc_126e0

dec_label_pc_12714:                               ; preds = %dec_label_pc_12700, %bb326, %dec_label_pc_126f0, %dec_label_pc_126e8, %dec_label_pc_126e0
  %v1_12714 = add i32 %v0_12714, 1
  store i32 %v1_12714, i32* @r7, align 4
  %v2_12718 = icmp eq i32 %v1_12714, -1
  store i1 %v2_12718, i1* %cpsr_c.global-to-local, align 1
  %v7_12718 = icmp eq i32 %v0_12714, -2
  store i1 %v7_12718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12718, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_12714
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12720 = icmp eq i32 %v1_12714, 0
  store i1 %v2_12720, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_12714, 1
  br i1 %tmp327, label %dec_label_pc_12494, label %dec_label_pc_12728

dec_label_pc_12728:                               ; preds = %dec_label_pc_12720
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_1272c = call i32 @function_12fa0(i32 21)
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_1273c = call i32 @function_12ebc(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_1273c, i32* %r0.global-to-local, align 4
  %v3_12740 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12740, i32* %r2.global-to-local, align 4
  store i32 %v3_1273c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1274c = load i32, i32* @r5, align 4
  %v1_1274c = add i32 %v0_1274c, 4
  %v2_1274c = inttoptr i32 %v1_1274c to i32*
  %v3_1274c = load i32, i32* %v2_1274c, align 4
  store i32 %v3_1274c, i32* %r0.global-to-local, align 4
  %v4_12750 = inttoptr i32 %v3_1273c to i32*
  %v5_12750 = call i32 @function_14af0(i32 %v3_1274c, i32* %v4_12750, i32 %v3_12740, i32 16384)
  store i32 %v5_12750, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12760 = load i32, i32* @r5, align 4
  %v1_12760 = add i32 %v0_12760, 4
  %v2_12760 = inttoptr i32 %v1_12760 to i32*
  %v3_12760 = load i32, i32* %v2_12760, align 4
  store i32 %v3_12760, i32* %r0.global-to-local, align 4
  %v5_12764 = call i32 @function_14af0(i32 %v3_12760, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_1276c = call i32 @function_12ee8(i32 21)
  store i32 %v1_1276c, i32* %r0.global-to-local, align 4
  %v0_12770 = load i32, i32* @r5, align 4
  %v1_12770 = add i32 %v0_12770, 24
  %v2_12770 = inttoptr i32 %v1_12770 to i32*
  %v3_12770 = load i32, i32* %v2_12770, align 4
  store i32 %v3_12770, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_12778 = add i32 %v0_12770, 12
  %v3_12778 = inttoptr i32 %v2_12778 to i32*
  store i32 6, i32* %v3_12778, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12780:                               ; preds = %dec_label_pc_12384
  %v1_12780 = add i32 %v0_12384, 24
  %v2_12780 = inttoptr i32 %v1_12780 to i32*
  %v3_12780 = load i32, i32* %v2_12780, align 4
  store i32 %v3_12780, i32* %ip.global-to-local, align 4
  %v1_12784 = add i32 %v3_12780, -1
  store i32 %v1_12784, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12788 = icmp eq i32 %v1_12784, 0
  store i1 %v2_12788, i1* %cpsr_z.global-to-local, align 1
  %v5_1278c = icmp sgt i32 %v1_12784, 0
  br i1 %v5_1278c, label %dec_label_pc_127b4, label %dec_label_pc_12304thread-pre-split.thread

dec_label_pc_12794:                               ; preds = %bb328
  %v2_12794 = icmp ugt i8 %v3_127b8, 35
  store i1 %v2_12794, i1* %cpsr_c.global-to-local, align 1
  %v7_12794 = icmp eq i8 %v3_127b8, 36
  store i1 %v7_12794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12794, label %dec_label_pc_127c8, label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_12794
  %v2_1279c = icmp ugt i8 %v3_127b8, 34
  store i1 %v2_1279c, i1* %cpsr_c.global-to-local, align 1
  %v7_1279c = icmp eq i8 %v3_127b8, 35
  store i1 %v7_1279c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1279c, label %dec_label_pc_127c8, label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_1279c
  %v2_127a4 = icmp ugt i8 %v3_127b8, 36
  store i1 %v2_127a4, i1* %cpsr_c.global-to-local, align 1
  %v7_127a4 = icmp eq i8 %v3_127b8, 37
  store i1 %v7_127a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127a4, label %dec_label_pc_127c8, label %dec_label_pc_127ac

dec_label_pc_127ac:                               ; preds = %dec_label_pc_127a4
  %v1_127ac = add i32 %v0_127c8, -1
  store i32 %v1_127ac, i32* %r0.global-to-local, align 4
  %v2_127ac = icmp ne i32 %v0_127c8, 0
  store i1 %v2_127ac, i1* %cpsr_c.global-to-local, align 1
  %v7_127ac = icmp eq i32 %v0_127c8, 1
  store i1 %v7_127ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127ac, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_127b4

dec_label_pc_127b4:                               ; preds = %dec_label_pc_12780, %dec_label_pc_127ac
  %v0_127c8 = phi i32 [ %v1_127ac, %dec_label_pc_127ac ], [ %v1_12784, %dec_label_pc_12780 ]
  %v2_127b4 = add i32 %v0_127c8, %v0_12384
  store i32 %v2_127b4, i32* %r3.global-to-local, align 4
  %v1_127b8 = add i32 %v2_127b4, 28
  %v2_127b8 = inttoptr i32 %v1_127b8 to i8*
  %v3_127b8 = load i8, i8* %v2_127b8, align 1
  %v4_127b8 = zext i8 %v3_127b8 to i32
  store i32 %v4_127b8, i32* %r3.global-to-local, align 4
  %v2_127bc = icmp ugt i8 %v3_127b8, 61
  store i1 %v2_127bc, i1* %cpsr_c.global-to-local, align 1
  %v7_127bc = icmp eq i8 %v3_127b8, 62
  store i1 %v7_127bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127bc, label %dec_label_pc_127c8, label %bb328

bb328:                                            ; preds = %dec_label_pc_127b4
  %v3_127c0 = icmp ugt i8 %v3_127b8, 57
  store i1 %v3_127c0, i1* %cpsr_c.global-to-local, align 1
  %v8_127c0 = icmp eq i8 %v3_127b8, 58
  store i1 %v8_127c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_127c0, label %dec_label_pc_127c8, label %dec_label_pc_12794

dec_label_pc_127c8:                               ; preds = %dec_label_pc_127b4, %bb328, %dec_label_pc_127a4, %dec_label_pc_1279c, %dec_label_pc_12794
  %v1_127c8 = add i32 %v0_127c8, 1
  store i32 %v1_127c8, i32* @r7, align 4
  %v2_127cc = icmp eq i32 %v1_127c8, -1
  store i1 %v2_127cc, i1* %cpsr_c.global-to-local, align 1
  %v7_127cc = icmp eq i32 %v0_127c8, -2
  store i1 %v7_127cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127cc, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_127d4

dec_label_pc_127d4:                               ; preds = %dec_label_pc_127c8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_127d4 = icmp eq i32 %v1_127c8, 0
  store i1 %v2_127d4, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_127c8, 1
  br i1 %tmp329, label %dec_label_pc_12494, label %dec_label_pc_127dc

dec_label_pc_127dc:                               ; preds = %dec_label_pc_127d4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_127e0 = call i32 @function_12fa0(i32 22)
  store i32 %v2_127e8, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_127f0 = call i32 @function_12ebc(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_127f0, i32* %r0.global-to-local, align 4
  %v3_127f4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_127f4, i32* %r2.global-to-local, align 4
  store i32 %v3_127f0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12800 = load i32, i32* @r5, align 4
  %v1_12800 = add i32 %v0_12800, 4
  %v2_12800 = inttoptr i32 %v1_12800 to i32*
  %v3_12800 = load i32, i32* %v2_12800, align 4
  store i32 %v3_12800, i32* %r0.global-to-local, align 4
  %v4_12804 = inttoptr i32 %v3_127f0 to i32*
  %v5_12804 = call i32 @function_14af0(i32 %v3_12800, i32* %v4_12804, i32 %v3_127f4, i32 16384)
  store i32 %v5_12804, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12814 = load i32, i32* @r5, align 4
  %v1_12814 = add i32 %v0_12814, 4
  %v2_12814 = inttoptr i32 %v1_12814 to i32*
  %v3_12814 = load i32, i32* %v2_12814, align 4
  store i32 %v3_12814, i32* %r0.global-to-local, align 4
  %v5_12818 = call i32 @function_14af0(i32 %v3_12814, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_12820 = call i32 @function_12ee8(i32 22)
  store i32 %v1_12820, i32* %r0.global-to-local, align 4
  %v0_12824 = load i32, i32* @r5, align 4
  %v1_12824 = add i32 %v0_12824, 24
  %v2_12824 = inttoptr i32 %v1_12824 to i32*
  %v3_12824 = load i32, i32* %v2_12824, align 4
  store i32 %v3_12824, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_1282c = add i32 %v0_12824, 12
  %v3_1282c = inttoptr i32 %v2_1282c to i32*
  store i32 7, i32* %v3_1282c, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12834:                               ; preds = %dec_label_pc_12384
  %v1_12834 = add i32 %v0_12384, 24
  %v2_12834 = inttoptr i32 %v1_12834 to i32*
  %v3_12834 = load i32, i32* %v2_12834, align 4
  store i32 %v3_12834, i32* %ip.global-to-local, align 4
  %v1_12838 = add i32 %v3_12834, -1
  store i32 %v1_12838, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1283c = icmp eq i32 %v1_12838, 0
  store i1 %v2_1283c, i1* %cpsr_z.global-to-local, align 1
  %v5_12840 = icmp sgt i32 %v1_12838, 0
  br i1 %v5_12840, label %dec_label_pc_12868, label %dec_label_pc_12304thread-pre-split.thread

dec_label_pc_12848:                               ; preds = %bb330
  %v2_12848 = icmp ugt i8 %v3_1286c, 35
  store i1 %v2_12848, i1* %cpsr_c.global-to-local, align 1
  %v7_12848 = icmp eq i8 %v3_1286c, 36
  store i1 %v7_12848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12848, label %dec_label_pc_1287c, label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_12848
  %v2_12850 = icmp ugt i8 %v3_1286c, 34
  store i1 %v2_12850, i1* %cpsr_c.global-to-local, align 1
  %v7_12850 = icmp eq i8 %v3_1286c, 35
  store i1 %v7_12850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12850, label %dec_label_pc_1287c, label %dec_label_pc_12858

dec_label_pc_12858:                               ; preds = %dec_label_pc_12850
  %v2_12858 = icmp ugt i8 %v3_1286c, 36
  store i1 %v2_12858, i1* %cpsr_c.global-to-local, align 1
  %v7_12858 = icmp eq i8 %v3_1286c, 37
  store i1 %v7_12858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12858, label %dec_label_pc_1287c, label %dec_label_pc_12860

dec_label_pc_12860:                               ; preds = %dec_label_pc_12858
  %v1_12860 = add i32 %v0_1287c, -1
  store i32 %v1_12860, i32* %r0.global-to-local, align 4
  %v2_12860 = icmp ne i32 %v0_1287c, 0
  store i1 %v2_12860, i1* %cpsr_c.global-to-local, align 1
  %v7_12860 = icmp eq i32 %v0_1287c, 1
  store i1 %v7_12860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12860, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12868

dec_label_pc_12868:                               ; preds = %dec_label_pc_12834, %dec_label_pc_12860
  %v0_1287c = phi i32 [ %v1_12860, %dec_label_pc_12860 ], [ %v1_12838, %dec_label_pc_12834 ]
  %v2_12868 = add i32 %v0_1287c, %v0_12384
  store i32 %v2_12868, i32* %r3.global-to-local, align 4
  %v1_1286c = add i32 %v2_12868, 28
  %v2_1286c = inttoptr i32 %v1_1286c to i8*
  %v3_1286c = load i8, i8* %v2_1286c, align 1
  %v4_1286c = zext i8 %v3_1286c to i32
  store i32 %v4_1286c, i32* %r3.global-to-local, align 4
  %v2_12870 = icmp ugt i8 %v3_1286c, 61
  store i1 %v2_12870, i1* %cpsr_c.global-to-local, align 1
  %v7_12870 = icmp eq i8 %v3_1286c, 62
  store i1 %v7_12870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12870, label %dec_label_pc_1287c, label %bb330

bb330:                                            ; preds = %dec_label_pc_12868
  %v3_12874 = icmp ugt i8 %v3_1286c, 57
  store i1 %v3_12874, i1* %cpsr_c.global-to-local, align 1
  %v8_12874 = icmp eq i8 %v3_1286c, 58
  store i1 %v8_12874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12874, label %dec_label_pc_1287c, label %dec_label_pc_12848

dec_label_pc_1287c:                               ; preds = %dec_label_pc_12868, %bb330, %dec_label_pc_12858, %dec_label_pc_12850, %dec_label_pc_12848
  %v1_1287c = add i32 %v0_1287c, 1
  store i32 %v1_1287c, i32* @r7, align 4
  %v2_12880 = icmp eq i32 %v1_1287c, -1
  store i1 %v2_12880, i1* %cpsr_c.global-to-local, align 1
  %v7_12880 = icmp eq i32 %v0_1287c, -2
  store i1 %v7_12880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12880, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12888

dec_label_pc_12888:                               ; preds = %dec_label_pc_1287c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12888 = icmp eq i32 %v1_1287c, 0
  store i1 %v2_12888, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_1287c, 1
  br i1 %tmp331, label %dec_label_pc_12494, label %dec_label_pc_12890

dec_label_pc_12890:                               ; preds = %dec_label_pc_12888
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_12894 = call i32 @function_12fa0(i32 23)
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_128a4 = call i32 @function_12ebc(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_128a4, i32* %r0.global-to-local, align 4
  %v3_128a8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_128a8, i32* %r2.global-to-local, align 4
  store i32 %v3_128a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_128b4 = load i32, i32* @r5, align 4
  %v1_128b4 = add i32 %v0_128b4, 4
  %v2_128b4 = inttoptr i32 %v1_128b4 to i32*
  %v3_128b4 = load i32, i32* %v2_128b4, align 4
  store i32 %v3_128b4, i32* %r0.global-to-local, align 4
  %v4_128b8 = inttoptr i32 %v3_128a4 to i32*
  %v5_128b8 = call i32 @function_14af0(i32 %v3_128b4, i32* %v4_128b8, i32 %v3_128a8, i32 16384)
  store i32 %v5_128b8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_128c8 = load i32, i32* @r5, align 4
  %v1_128c8 = add i32 %v0_128c8, 4
  %v2_128c8 = inttoptr i32 %v1_128c8 to i32*
  %v3_128c8 = load i32, i32* %v2_128c8, align 4
  store i32 %v3_128c8, i32* %r0.global-to-local, align 4
  %v5_128cc = call i32 @function_14af0(i32 %v3_128c8, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_128d4 = call i32 @function_12ee8(i32 23)
  store i32 %v1_128d4, i32* %r0.global-to-local, align 4
  %v0_128d8 = load i32, i32* @r5, align 4
  %v1_128d8 = add i32 %v0_128d8, 24
  %v2_128d8 = inttoptr i32 %v1_128d8 to i32*
  %v3_128d8 = load i32, i32* %v2_128d8, align 4
  store i32 %v3_128d8, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_128e0 = add i32 %v0_128d8, 12
  %v3_128e0 = inttoptr i32 %v2_128e0 to i32*
  store i32 9, i32* %v3_128e0, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_128e8:                               ; preds = %dec_label_pc_12384
  %v1_128e8 = add i32 %v0_12384, 24
  %v2_128e8 = inttoptr i32 %v1_128e8 to i32*
  %v3_128e8 = load i32, i32* %v2_128e8, align 4
  store i32 %v3_128e8, i32* %ip.global-to-local, align 4
  %v1_128ec = add i32 %v3_128e8, -1
  store i32 %v1_128ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_128f0 = icmp eq i32 %v1_128ec, 0
  store i1 %v2_128f0, i1* %cpsr_z.global-to-local, align 1
  %v5_128f4 = icmp sgt i32 %v1_128ec, 0
  br i1 %v5_128f4, label %dec_label_pc_1291c, label %dec_label_pc_12304thread-pre-split.thread

dec_label_pc_128fc:                               ; preds = %bb332
  %v2_128fc = icmp ugt i8 %v3_12920, 35
  store i1 %v2_128fc, i1* %cpsr_c.global-to-local, align 1
  %v7_128fc = icmp eq i8 %v3_12920, 36
  store i1 %v7_128fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128fc, label %dec_label_pc_12930, label %dec_label_pc_12904

dec_label_pc_12904:                               ; preds = %dec_label_pc_128fc
  %v2_12904 = icmp ugt i8 %v3_12920, 34
  store i1 %v2_12904, i1* %cpsr_c.global-to-local, align 1
  %v7_12904 = icmp eq i8 %v3_12920, 35
  store i1 %v7_12904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12904, label %dec_label_pc_12930, label %dec_label_pc_1290c

dec_label_pc_1290c:                               ; preds = %dec_label_pc_12904
  %v2_1290c = icmp ugt i8 %v3_12920, 36
  store i1 %v2_1290c, i1* %cpsr_c.global-to-local, align 1
  %v7_1290c = icmp eq i8 %v3_12920, 37
  store i1 %v7_1290c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1290c, label %dec_label_pc_12930, label %dec_label_pc_12914

dec_label_pc_12914:                               ; preds = %dec_label_pc_1290c
  %v1_12914 = add i32 %v0_12930, -1
  store i32 %v1_12914, i32* %r0.global-to-local, align 4
  %v2_12914 = icmp ne i32 %v0_12930, 0
  store i1 %v2_12914, i1* %cpsr_c.global-to-local, align 1
  %v7_12914 = icmp eq i32 %v0_12930, 1
  store i1 %v7_12914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12914, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_1291c

dec_label_pc_1291c:                               ; preds = %dec_label_pc_128e8, %dec_label_pc_12914
  %v0_12930 = phi i32 [ %v1_12914, %dec_label_pc_12914 ], [ %v1_128ec, %dec_label_pc_128e8 ]
  %v2_1291c = add i32 %v0_12930, %v0_12384
  store i32 %v2_1291c, i32* %r3.global-to-local, align 4
  %v1_12920 = add i32 %v2_1291c, 28
  %v2_12920 = inttoptr i32 %v1_12920 to i8*
  %v3_12920 = load i8, i8* %v2_12920, align 1
  %v4_12920 = zext i8 %v3_12920 to i32
  store i32 %v4_12920, i32* %r3.global-to-local, align 4
  %v2_12924 = icmp ugt i8 %v3_12920, 61
  store i1 %v2_12924, i1* %cpsr_c.global-to-local, align 1
  %v7_12924 = icmp eq i8 %v3_12920, 62
  store i1 %v7_12924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12924, label %dec_label_pc_12930, label %bb332

bb332:                                            ; preds = %dec_label_pc_1291c
  %v3_12928 = icmp ugt i8 %v3_12920, 57
  store i1 %v3_12928, i1* %cpsr_c.global-to-local, align 1
  %v8_12928 = icmp eq i8 %v3_12920, 58
  store i1 %v8_12928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12928, label %dec_label_pc_12930, label %dec_label_pc_128fc

dec_label_pc_12930:                               ; preds = %dec_label_pc_1291c, %bb332, %dec_label_pc_1290c, %dec_label_pc_12904, %dec_label_pc_128fc
  %v1_12930 = add i32 %v0_12930, 1
  store i32 %v1_12930, i32* @r7, align 4
  %v2_12934 = icmp eq i32 %v1_12930, -1
  store i1 %v2_12934, i1* %cpsr_c.global-to-local, align 1
  %v7_12934 = icmp eq i32 %v0_12930, -2
  store i1 %v7_12934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12934, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_1293c

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12930
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1293c = icmp eq i32 %v1_12930, 0
  store i1 %v2_1293c, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_12930, 1
  br i1 %tmp333, label %dec_label_pc_12494, label %dec_label_pc_12944

dec_label_pc_12944:                               ; preds = %dec_label_pc_1293c
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_12948 = call i32 @function_12fa0(i32 20)
  store i32 %v2_127e8, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_12958 = call i32 @function_12ebc(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_12958, i32* %r0.global-to-local, align 4
  %v3_1295c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1295c, i32* %r2.global-to-local, align 4
  store i32 %v3_12958, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12968 = load i32, i32* @r5, align 4
  %v1_12968 = add i32 %v0_12968, 4
  %v2_12968 = inttoptr i32 %v1_12968 to i32*
  %v3_12968 = load i32, i32* %v2_12968, align 4
  store i32 %v3_12968, i32* %r0.global-to-local, align 4
  %v4_1296c = inttoptr i32 %v3_12958 to i32*
  %v5_1296c = call i32 @function_14af0(i32 %v3_12968, i32* %v4_1296c, i32 %v3_1295c, i32 16384)
  store i32 %v5_1296c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1297c = load i32, i32* @r5, align 4
  %v1_1297c = add i32 %v0_1297c, 4
  %v2_1297c = inttoptr i32 %v1_1297c to i32*
  %v3_1297c = load i32, i32* %v2_1297c, align 4
  store i32 %v3_1297c, i32* %r0.global-to-local, align 4
  %v5_12980 = call i32 @function_14af0(i32 %v3_1297c, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_12988 = call i32 @function_12ee8(i32 20)
  store i32 %v1_12988, i32* %r0.global-to-local, align 4
  %v0_1298c = load i32, i32* @r5, align 4
  %v1_1298c = add i32 %v0_1298c, 24
  %v2_1298c = inttoptr i32 %v1_1298c to i32*
  %v3_1298c = load i32, i32* %v2_1298c, align 4
  store i32 %v3_1298c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_12994 = add i32 %v0_1298c, 12
  %v3_12994 = inttoptr i32 %v2_12994 to i32*
  store i32 8, i32* %v3_12994, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_1299c:                               ; preds = %dec_label_pc_12384
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_129a0 = call i32 @function_12fa0(i32 26)
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_129b0 = call i32 @function_12ebc(i32 26, i32* nonnull %stack_var_-56)
  %v3_129b4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_129b0, i32* %r2.global-to-local, align 4
  %v1_129bc = add i32 %v3_129b4, -1
  store i32 %v1_129bc, i32* %r3.global-to-local, align 4
  %v0_129c0 = load i32, i32* @sb, align 4
  store i32 %v0_129c0, i32* %r0.global-to-local, align 4
  %v0_129c4 = load i32, i32* @r5, align 4
  %v1_129c4 = add i32 %v0_129c4, 24
  %v2_129c4 = inttoptr i32 %v1_129c4 to i32*
  %v3_129c4 = load i32, i32* %v2_129c4, align 4
  store i32 %v3_129c4, i32* %r1.global-to-local, align 4
  %v4_129c8 = call i32 @function_13988(i32 %v0_129c0, i32 %v3_129c4, i32 %v3_129b0, i32 %v1_129bc)
  %v3_129cc = icmp eq i32 %v4_129c8, -1
  store i1 %v3_129cc, i1* %cpsr_c.global-to-local, align 1
  %v8_129cc = icmp eq i32 %v4_129c8, -1
  store i1 %v8_129cc, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_129d8 = call i32 @function_12ee8(i32 26)
  br i1 %v3_129cc, label %dec_label_pc_129d4, label %dec_label_pc_12c08

dec_label_pc_129d4:                               ; preds = %dec_label_pc_1299c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_129e0 = call i32 @function_12fa0(i32 25)
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_129f0 = call i32 @function_12ebc(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_129f0, i32* %r0.global-to-local, align 4
  %v3_129f4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_129f0, i32* %r2.global-to-local, align 4
  %v1_129fc = add i32 %v3_129f4, -1
  store i32 %v1_129fc, i32* %r3.global-to-local, align 4
  %v0_12a00 = load i32, i32* @r5, align 4
  %v1_12a00 = add i32 %v0_12a00, 24
  %v2_12a00 = inttoptr i32 %v1_12a00 to i32*
  %v3_12a00 = load i32, i32* %v2_12a00, align 4
  store i32 %v3_12a00, i32* %r1.global-to-local, align 4
  %v0_12a04 = load i32, i32* @sb, align 4
  store i32 %v0_12a04, i32* %r0.global-to-local, align 4
  %v4_12a08 = call i32 @function_13988(i32 %v0_12a04, i32 %v3_12a00, i32 %v3_129f0, i32 %v1_129fc)
  store i32 %v4_12a08, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_12a14 = call i32 @function_12ee8(i32 25)
  store i32 %v1_12a14, i32* %r0.global-to-local, align 4
  %v0_12a18 = load i32, i32* @r7, align 4
  %v2_12a18 = icmp eq i32 %v0_12a18, -1
  store i1 %v2_12a18, i1* %cpsr_c.global-to-local, align 1
  %v7_12a18 = icmp eq i32 %v0_12a18, -1
  store i1 %v7_12a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a18, label %dec_label_pc_12300.loopexit, label %dec_label_pc_12a20

dec_label_pc_12a20:                               ; preds = %dec_label_pc_129d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a20 = icmp eq i32 %v0_12a18, 0
  store i1 %v2_12a20, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v0_12a18, 1
  br i1 %tmp334, label %dec_label_pc_12494, label %dec_label_pc_12a28

dec_label_pc_12a28:                               ; preds = %dec_label_pc_12a20
  %v0_12a28 = load i32, i32* @r5, align 4
  %v1_12a28 = add i32 %v0_12a28, 21
  %v2_12a28 = inttoptr i32 %v1_12a28 to i8*
  %v3_12a28 = load i8, i8* %v2_12a28, align 1
  %v4_12a28 = zext i8 %v3_12a28 to i32
  store i32 %v4_12a28, i32* %r3.global-to-local, align 4
  %v1_12a2c = add i32 %v0_12a28, 20
  %v2_12a2c = inttoptr i32 %v1_12a2c to i8*
  %v3_12a2c = load i8, i8* %v2_12a2c, align 1
  %v4_12a2c = zext i8 %v3_12a2c to i32
  store i32 %v4_12a2c, i32* %r2.global-to-local, align 4
  %v1_12a30 = add i32 %v0_12a28, 16
  %v2_12a30 = inttoptr i32 %v1_12a30 to i32*
  %v3_12a30 = load i32, i32* %v2_12a30, align 4
  store i32 %v3_12a30, i32* %r1.global-to-local, align 4
  %v4_12a34 = mul nuw nsw i32 %v4_12a28, 256
  %v5_12a34 = or i32 %v4_12a2c, %v4_12a34
  store i32 %v5_12a34, i32* %r2.global-to-local, align 4
  %v1_12a38 = and i32 %v4_12a2c, 128
  %v2_12a38 = icmp ne i32 %v1_12a38, 0
  store i1 %v2_12a38, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_12a28, i32* %r3.global-to-local, align 4
  store i32 %v3_12a30, i32* %stack_var_-48, align 4
  store i32 %v5_12a34, i32* %stack_var_-38, align 4
  %v1_12a48 = inttoptr i32 %v0_12a28 to i32*
  %v2_12a48 = load i32, i32* %v1_12a48, align 4
  store i32 %v2_12a48, i32* @fp, align 4
  %v0_12a4c = call i32 @function_142b0()
  store i32 %v0_12a4c, i32* %r0.global-to-local, align 4
  %v7_12a50 = icmp eq i32 %v0_12a4c, -1
  %.350 = zext i1 %v7_12a50 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a5c = icmp eq i32 %v0_12a4c, 0
  store i1 %v2_12a5c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_12a4c, 1
  br i1 %tmp337, label %bb338, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_12a28
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12ab4

bb338:                                            ; preds = %dec_label_pc_12a28
  store i32 %.350, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a68 = icmp eq i1 %v7_12a50, false
  store i1 %v2_12a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12a68, label %dec_label_pc_12a70, label %dec_label_pc_12ab4

dec_label_pc_12a70:                               ; preds = %bb338
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_12a7c = call i32 @function_14b80(i32 2, i32 1, i32 0)
  store i32 %v3_12a7c, i32* %r0.global-to-local, align 4
  %v2_12a80 = icmp eq i32 %v3_12a7c, -1
  store i1 %v2_12a80, i1* %cpsr_c.global-to-local, align 1
  %v7_12a80 = icmp eq i32 %v3_12a7c, -1
  store i1 %v7_12a80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_12a7c, i32* @r6, align 4
  br i1 %v7_12a80, label %dec_label_pc_12eb4, label %dec_label_pc_12a8c

dec_label_pc_12a8c:                               ; preds = %dec_label_pc_12a70
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12a90 = call i32 @function_12fa0(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12a98 = call i32 @function_12fa0(i32 19)
  %v0_12a9c = load i32, i32* @sl, align 4
  store i32 %v0_12a9c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_12aa4 = inttoptr i32 %v0_12a9c to i32*
  %v3_12aa4 = call i32 @function_12ebc(i32 18, i32* %v2_12aa4)
  store i32 %v3_12aa4, i32* %r0.global-to-local, align 4
  %v1_12aa8 = inttoptr i32 %v3_12aa4 to i8*
  %v2_12aa8 = call i32 @function_10d78(i8* %v1_12aa8)
  store i32 %v2_12aa8, i32* %r0.global-to-local, align 4
  store i32 %v2_12aa8, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_12aac = icmp eq i32 %v2_12aa8, 0
  store i1 %v3_12aac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12aac, label %dec_label_pc_12ab4, label %dec_label_pc_12d84

dec_label_pc_12ab4:                               ; preds = %.thread68, %dec_label_pc_12a8c, %bb338
  %v0_12ab4 = load i32, i32* @r5, align 4
  %v1_12ab4 = add i32 %v0_12ab4, 4
  %v2_12ab4 = inttoptr i32 %v1_12ab4 to i32*
  %v3_12ab4 = load i32, i32* %v2_12ab4, align 4
  store i32 %v3_12ab4, i32* %r0.global-to-local, align 4
  %v1_12ab8 = call i32 @function_14284(i32 %v3_12ab4)
  store i32 %v1_12ab8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12ac4 = load i32, i32* @r5, align 4
  %v1_12ac4 = add i32 %v0_12ac4, 24
  %v2_12ac4 = inttoptr i32 %v1_12ac4 to i32*
  %v3_12ac4 = load i32, i32* %v2_12ac4, align 4
  store i32 %v3_12ac4, i32* %ip.global-to-local, align 4
  %v2_12ac8 = add i32 %v0_12ac4, 4
  %v3_12ac8 = inttoptr i32 %v2_12ac8 to i32*
  store i32 -1, i32* %v3_12ac8, align 4
  %v0_12acc = load i32, i32* %r2.global-to-local, align 4
  %v1_12acc = load i32, i32* @r5, align 4
  %v2_12acc = add i32 %v1_12acc, 12
  %v3_12acc = inttoptr i32 %v2_12acc to i32*
  store i32 %v0_12acc, i32* %v3_12acc, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12ad0:                               ; preds = %.thread204, %dec_label_pc_12b50, %dec_label_pc_12d20, %dec_label_pc_12c38, %dec_label_pc_12944, %dec_label_pc_12890, %dec_label_pc_127dc, %dec_label_pc_12728, %dec_label_pc_12690, %dec_label_pc_12500, %dec_label_pc_1249c, %dec_label_pc_12ab4
  %v0_12ad0 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ad0 = load i32, i32* @r7, align 4
  %v2_12ad0 = sub i32 %v0_12ad0, %v1_12ad0
  %v3_12ad0 = icmp uge i32 %v0_12ad0, %v1_12ad0
  store i1 %v3_12ad0, i1* %cpsr_c.global-to-local, align 1
  %v4_12ad0 = xor i32 %v1_12ad0, %v0_12ad0
  %v5_12ad0 = xor i32 %v2_12ad0, %v0_12ad0
  %v6_12ad0 = and i32 %v5_12ad0, %v4_12ad0
  %v7_12ad0 = icmp slt i32 %v6_12ad0, 0
  %v8_12ad0 = icmp slt i32 %v2_12ad0, 0
  %v9_12ad0 = icmp eq i32 %v0_12ad0, %v1_12ad0
  store i1 %v9_12ad0, i1* %cpsr_z.global-to-local, align 1
  %v2_12ad4 = xor i1 %v8_12ad0, %v7_12ad0
  %v0_12ad0.v1_12ad0 = select i1 %v2_12ad4, i32 %v0_12ad0, i32 %v1_12ad0
  store i32 %v0_12ad0.v1_12ad0, i32* %r1.global-to-local, align 4
  %v2_12adc = sub i32 %v0_12ad0, %v0_12ad0.v1_12ad0
  store i32 %v2_12adc, i32* @r2, align 4
  %v1_12ae0 = load i32, i32* @r5, align 4
  %v2_12ae0 = add i32 %v1_12ae0, 24
  %v3_12ae0 = inttoptr i32 %v2_12ae0 to i32*
  store i32 %v2_12adc, i32* %v3_12ae0, align 4
  %v0_12ae4 = load i32, i32* @sb, align 4
  %v1_12ae4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ae4 = add i32 %v1_12ae4, %v0_12ae4
  store i32 %v2_12ae4, i32* @r1, align 4
  store i32 %v0_12ae4, i32* @r0, align 4
  %v3_12aec = call i32 @function_148b0(i32 %v0_12ae4, i32 %v2_12ae4, i32 %v2_12adc)
  store i32 %v3_12aec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12384

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12384
  %v1_12af4 = add i32 %v0_12384, 24
  %v2_12af4 = inttoptr i32 %v1_12af4 to i32*
  %v3_12af4 = load i32, i32* %v2_12af4, align 4
  store i32 %v3_12af4, i32* %ip.global-to-local, align 4
  %v1_12af8 = add i32 %v3_12af4, -1
  store i32 %v1_12af8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12afc = icmp eq i32 %v1_12af8, 0
  store i1 %v2_12afc, i1* %cpsr_z.global-to-local, align 1
  %v5_12b00 = icmp sgt i32 %v1_12af8, 0
  br i1 %v5_12b00, label %dec_label_pc_12b28, label %dec_label_pc_12304thread-pre-split.thread

dec_label_pc_12b08:                               ; preds = %bb341
  %v2_12b08 = icmp ugt i8 %v3_12b2c, 35
  store i1 %v2_12b08, i1* %cpsr_c.global-to-local, align 1
  %v7_12b08 = icmp eq i8 %v3_12b2c, 36
  store i1 %v7_12b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b08, label %dec_label_pc_12b3c, label %dec_label_pc_12b10

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12b08
  %v2_12b10 = icmp ugt i8 %v3_12b2c, 34
  store i1 %v2_12b10, i1* %cpsr_c.global-to-local, align 1
  %v7_12b10 = icmp eq i8 %v3_12b2c, 35
  store i1 %v7_12b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b10, label %dec_label_pc_12b3c, label %dec_label_pc_12b18

dec_label_pc_12b18:                               ; preds = %dec_label_pc_12b10
  %v2_12b18 = icmp ugt i8 %v3_12b2c, 36
  store i1 %v2_12b18, i1* %cpsr_c.global-to-local, align 1
  %v7_12b18 = icmp eq i8 %v3_12b2c, 37
  store i1 %v7_12b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b18, label %dec_label_pc_12b3c, label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b18
  %v1_12b20 = add i32 %v0_12b3c, -1
  store i32 %v1_12b20, i32* %r0.global-to-local, align 4
  %v2_12b20 = icmp ne i32 %v0_12b3c, 0
  store i1 %v2_12b20, i1* %cpsr_c.global-to-local, align 1
  %v7_12b20 = icmp eq i32 %v0_12b3c, 1
  store i1 %v7_12b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b20, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12b28

dec_label_pc_12b28:                               ; preds = %dec_label_pc_12af4, %dec_label_pc_12b20
  %v0_12b3c = phi i32 [ %v1_12b20, %dec_label_pc_12b20 ], [ %v1_12af8, %dec_label_pc_12af4 ]
  %v2_12b28 = add i32 %v0_12b3c, %v0_12384
  store i32 %v2_12b28, i32* %r3.global-to-local, align 4
  %v1_12b2c = add i32 %v2_12b28, 28
  %v2_12b2c = inttoptr i32 %v1_12b2c to i8*
  %v3_12b2c = load i8, i8* %v2_12b2c, align 1
  %v4_12b2c = zext i8 %v3_12b2c to i32
  store i32 %v4_12b2c, i32* %r3.global-to-local, align 4
  %v2_12b30 = icmp ugt i8 %v3_12b2c, 61
  store i1 %v2_12b30, i1* %cpsr_c.global-to-local, align 1
  %v7_12b30 = icmp eq i8 %v3_12b2c, 62
  store i1 %v7_12b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b30, label %dec_label_pc_12b3c, label %bb341

bb341:                                            ; preds = %dec_label_pc_12b28
  %v3_12b34 = icmp ugt i8 %v3_12b2c, 57
  store i1 %v3_12b34, i1* %cpsr_c.global-to-local, align 1
  %v8_12b34 = icmp eq i8 %v3_12b2c, 58
  store i1 %v8_12b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12b34, label %dec_label_pc_12b3c, label %dec_label_pc_12b08

dec_label_pc_12b3c:                               ; preds = %dec_label_pc_12b28, %bb341, %dec_label_pc_12b18, %dec_label_pc_12b10, %dec_label_pc_12b08
  %v1_12b3c = add i32 %v0_12b3c, 1
  store i32 %v1_12b3c, i32* @r7, align 4
  %v2_12b40 = icmp eq i32 %v1_12b3c, -1
  store i1 %v2_12b40, i1* %cpsr_c.global-to-local, align 1
  %v7_12b40 = icmp eq i32 %v0_12b3c, -2
  store i1 %v7_12b40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12b40, label %dec_label_pc_12304thread-pre-split, label %dec_label_pc_12b48

dec_label_pc_12b48:                               ; preds = %dec_label_pc_12b3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12b48 = icmp eq i32 %v1_12b3c, 0
  store i1 %v2_12b48, i1* %cpsr_z.global-to-local, align 1
  %tmp342 = icmp slt i32 %v1_12b3c, 1
  br i1 %tmp342, label %dec_label_pc_12494, label %dec_label_pc_12b50

dec_label_pc_12b50:                               ; preds = %dec_label_pc_12b48
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12b54 = call i32 @function_12fa0(i32 24)
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_12b64 = call i32 @function_12ebc(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_12b64, i32* %r0.global-to-local, align 4
  %v3_12b68 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12b68, i32* %r2.global-to-local, align 4
  store i32 %v3_12b64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12b74 = load i32, i32* @r5, align 4
  %v1_12b74 = add i32 %v0_12b74, 4
  %v2_12b74 = inttoptr i32 %v1_12b74 to i32*
  %v3_12b74 = load i32, i32* %v2_12b74, align 4
  store i32 %v3_12b74, i32* %r0.global-to-local, align 4
  %v4_12b78 = inttoptr i32 %v3_12b64 to i32*
  %v5_12b78 = call i32 @function_14af0(i32 %v3_12b74, i32* %v4_12b78, i32 %v3_12b68, i32 16384)
  store i32 %v5_12b78, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12b88 = load i32, i32* @r5, align 4
  %v1_12b88 = add i32 %v0_12b88, 4
  %v2_12b88 = inttoptr i32 %v1_12b88 to i32*
  %v3_12b88 = load i32, i32* %v2_12b88, align 4
  store i32 %v3_12b88, i32* %r0.global-to-local, align 4
  %v5_12b8c = call i32 @function_14af0(i32 %v3_12b88, i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12b94 = call i32 @function_12ee8(i32 24)
  store i32 %v1_12b94, i32* %r0.global-to-local, align 4
  %v0_12b98 = load i32, i32* @r5, align 4
  %v1_12b98 = add i32 %v0_12b98, 24
  %v2_12b98 = inttoptr i32 %v1_12b98 to i32*
  %v3_12b98 = load i32, i32* %v2_12b98, align 4
  store i32 %v3_12b98, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_12ba0 = add i32 %v0_12b98, 12
  %v3_12ba0 = inttoptr i32 %v2_12ba0 to i32*
  store i32 10, i32* %v3_12ba0, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12414
  store i32 ptrtoint (i32* @global_var_16df9.333 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_123cc, i32* @r0, align 4
  %v3_12bb4 = call i32 @function_148a0(i32 %v2_123cc, i32 ptrtoint (i32* @global_var_16df9.333 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_12bc0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16df0.335 to i32), i32* @r1, align 4
  %v3_12bc8 = call i32 @function_148a0(i32 %v2_12bc0, i32 ptrtoint (i32* @global_var_16df0.335 to i32), i32 9)
  store i32 %v3_12bc8, i32* %r0.global-to-local, align 4
  %v0_12bcc = load i32, i32* @r5, align 4
  %v1_12bcc = add i32 %v0_12bcc, 24
  %v2_12bcc = inttoptr i32 %v1_12bcc to i32*
  %v3_12bcc = load i32, i32* %v2_12bcc, align 4
  store i32 %v3_12bcc, i32* %ip.global-to-local, align 4
  %v0_12bd0 = load i32, i32* @r6, align 4
  %v1_12bd0 = add i32 %v0_12bd0, 2
  store i32 %v1_12bd0, i32* %r2.global-to-local, align 4
  %v0_12bd4 = load i32, i32* @sb, align 4
  %v2_12bd4 = add i32 %v0_12bd4, %v3_12bcc
  store i32 %v2_12bd4, i32* %r3.global-to-local, align 4
  %v3_12bd8 = icmp uge i32 %v2_12bd4, %v1_12bd0
  store i1 %v3_12bd8, i1* %cpsr_c.global-to-local, align 1
  %v9_12bd8 = icmp eq i32 %v2_12bd4, %v1_12bd0
  store i1 %v9_12bd8, i1* %cpsr_z.global-to-local, align 1
  %v2_12bdc = xor i1 %v3_12bd8, true
  %v3_12bdc = or i1 %v9_12bd8, %v2_12bdc
  br i1 %v3_12bdc, label %dec_label_pc_12ba8.dec_label_pc_12484.loopexit_crit_edge, label %dec_label_pc_12be0

dec_label_pc_12ba8.dec_label_pc_12484.loopexit_crit_edge: ; preds = %dec_label_pc_12ba8
  %v0_12484.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12484

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12ba8
  %v0_12be0 = load i32, i32* @r4, align 4
  %v1_12be0 = add i32 %v0_12be0, 1
  %v2_12be0 = inttoptr i32 %v1_12be0 to i8*
  %v3_12be0 = load i8, i8* %v2_12be0, align 1
  %v4_12be0 = zext i8 %v3_12be0 to i32
  store i32 %v4_12be0, i32* %r3.global-to-local, align 4
  %v2_12be4 = icmp ugt i8 %v3_12be0, 30
  store i1 %v2_12be4, i1* %cpsr_c.global-to-local, align 1
  %v7_12be4 = icmp eq i8 %v3_12be0, 31
  store i1 %v7_12be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12be4, label %dec_label_pc_12cd4, label %dec_label_pc_12bec

dec_label_pc_12bec:                               ; preds = %dec_label_pc_12be0
  %v1_12bec = add i32 %v0_12be0, -1
  %v2_12bec = inttoptr i32 %v1_12bec to i8*
  %v3_12bec = load i8, i8* %v2_12bec, align 1
  %v4_12bec = zext i8 %v3_12bec to i32
  store i32 %v4_12bec, i32* %r3.global-to-local, align 4
  %v2_12bf0 = icmp ugt i8 %v3_12bec, -4
  store i1 %v2_12bf0, i1* %cpsr_c.global-to-local, align 1
  %v7_12bf0 = icmp eq i8 %v3_12bec, -3
  store i1 %v7_12bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12bf0, label %bb343, label %dec_label_pc_12bfc

bb343:                                            ; preds = %dec_label_pc_12bec
  %v1_12bf4 = load i32, i32* @r8, align 4
  %v2_12bf4 = trunc i32 %v1_12bf4 to i8
  store i8 %v2_12bf4, i8* %v2_12bec, align 1
  %v0_12bf8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12bf8.pr, label %dec_label_pc_12428, label %.dec_label_pc_12bfc_crit_edge

.dec_label_pc_12bfc_crit_edge:                    ; preds = %bb343
  %v0_12bfc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12bfc

dec_label_pc_12bfc:                               ; preds = %.dec_label_pc_12bfc_crit_edge, %dec_label_pc_12bec
  %v0_12bfc = phi i32 [ %v0_12bfc.pre, %.dec_label_pc_12bfc_crit_edge ], [ %v4_12bec, %dec_label_pc_12bec ]
  %v2_12bfc = icmp ugt i32 %v0_12bfc, 250
  store i1 %v2_12bfc, i1* %cpsr_c.global-to-local, align 1
  %v7_12bfc = icmp eq i32 %v0_12bfc, 251
  store i1 %v7_12bfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12bfc, label %bb344, label %dec_label_pc_12428

bb344:                                            ; preds = %dec_label_pc_12bfc
  %v1_12c00 = load i32, i32* %sl.global-to-local, align 4
  %v2_12c00 = trunc i32 %v1_12c00 to i8
  %v3_12c00 = load i32, i32* @r4, align 4
  %v4_12c00 = add i32 %v3_12c00, -1
  %v5_12c00 = inttoptr i32 %v4_12c00 to i8*
  store i8 %v2_12c00, i8* %v5_12c00, align 1
  br label %dec_label_pc_12428

dec_label_pc_12c08:                               ; preds = %dec_label_pc_1299c
  store i32 %v1_129d8, i32* %r0.global-to-local, align 4
  %v0_12c10 = load i32, i32* @r5, align 4
  %v1_12c10 = add i32 %v0_12c10, 4
  %v2_12c10 = inttoptr i32 %v1_12c10 to i32*
  %v3_12c10 = load i32, i32* %v2_12c10, align 4
  store i32 %v3_12c10, i32* %r0.global-to-local, align 4
  %v1_12c14 = call i32 @function_14284(i32 %v3_12c10)
  store i32 %v1_12c14, i32* %r0.global-to-local, align 4
  %v0_12c18 = load i32, i32* @r5, align 4
  %v1_12c18 = add i32 %v0_12c18, 284
  %v2_12c18 = inttoptr i32 %v1_12c18 to i8*
  %v3_12c18 = load i8, i8* %v2_12c18, align 1
  %v4_12c18 = zext i8 %v3_12c18 to i32
  %v1_12c1c = add nuw nsw i32 %v4_12c18, 1
  %v1_12c20 = urem i32 %v1_12c1c, 256
  store i32 %v1_12c20, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_12c28 = icmp ugt i32 %v1_12c20, 9
  store i1 %v2_12c28, i1* %cpsr_c.global-to-local, align 1
  %v7_12c28 = icmp eq i32 %v1_12c20, 10
  store i1 %v7_12c28, i1* %cpsr_z.global-to-local, align 1
  %v2_12c2c = add i32 %v0_12c18, 4
  %v3_12c2c = inttoptr i32 %v2_12c2c to i32*
  store i32 -1, i32* %v3_12c2c, align 4
  %v0_12c30 = load i32, i32* %r3.global-to-local, align 4
  %v1_12c30 = trunc i32 %v0_12c30 to i8
  %v2_12c30 = load i32, i32* @r5, align 4
  %v3_12c30 = add i32 %v2_12c30, 284
  %v4_12c30 = inttoptr i32 %v3_12c30 to i8*
  store i8 %v1_12c30, i8* %v4_12c30, align 1
  %v0_12c34 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12c38 = load i32, i32* @r5, align 4
  br i1 %v0_12c34, label %dec_label_pc_12c38, label %dec_label_pc_12d20

dec_label_pc_12c38:                               ; preds = %dec_label_pc_12c08
  %v1_12c38 = add i32 %v0_12c38, 24
  %v2_12c38 = inttoptr i32 %v1_12c38 to i32*
  %v3_12c38 = load i32, i32* %v2_12c38, align 4
  store i32 %v3_12c38, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_12c48 = add i32 %v0_12c38, 284
  %v4_12c48 = inttoptr i32 %v3_12c48 to i8*
  store i8 0, i8* %v4_12c48, align 1
  %v0_12c4c = load i32, i32* %r1.global-to-local, align 4
  %v1_12c4c = load i32, i32* @r5, align 4
  %v2_12c4c = add i32 %v1_12c4c, 12
  %v3_12c4c = inttoptr i32 %v2_12c4c to i32*
  store i32 %v0_12c4c, i32* %v3_12c4c, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12c54:                               ; preds = %dec_label_pc_1231c
  br i1 %v2_12344, label %dec_label_pc_12d74, label %dec_label_pc_12c58

dec_label_pc_12c58:                               ; preds = %dec_label_pc_12c54
  %v3_12c58 = icmp eq i32 %v5_12340, -1
  store i1 %v3_12c58, i1* %cpsr_c.global-to-local, align 1
  %v8_12c58 = icmp eq i32 %v5_12340, -1
  store i1 %v8_12c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12c58, label %dec_label_pc_12c60, label %dec_label_pc_1236c

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c58
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_12c64 = load i32, i32* %v2_12324, align 4
  store i32 %v2_12c64, i32* %r3.global-to-local, align 4
  %v2_12c68 = icmp ugt i32 %v2_12c64, 10
  store i1 %v2_12c68, i1* %cpsr_c.global-to-local, align 1
  %v7_12c68 = icmp eq i32 %v2_12c64, 11
  store i1 %v7_12c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12c68, label %dec_label_pc_1219c, label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c60, %dec_label_pc_12d74
  %v0_12c70 = load i32, i32* @r5, align 4
  %v1_12c70 = add i32 %v0_12c70, 4
  %v2_12c70 = inttoptr i32 %v1_12c70 to i32*
  %v3_12c70 = load i32, i32* %v2_12c70, align 4
  store i32 %v3_12c70, i32* %r0.global-to-local, align 4
  %v1_12c74 = call i32 @function_14284(i32 %v3_12c70)
  store i32 %v1_12c74, i32* %r0.global-to-local, align 4
  %v0_12c78 = load i32, i32* @r5, align 4
  %v1_12c78 = add i32 %v0_12c78, 284
  %v2_12c78 = inttoptr i32 %v1_12c78 to i8*
  %v3_12c78 = load i8, i8* %v2_12c78, align 1
  %v4_12c78 = zext i8 %v3_12c78 to i32
  %v1_12c7c = add nuw nsw i32 %v4_12c78, 1
  %v1_12c80 = urem i32 %v1_12c7c, 256
  store i32 %v1_12c80, i32* %r3.global-to-local, align 4
  %v2_12c84 = icmp ugt i32 %v1_12c80, 8
  store i1 %v2_12c84, i1* %cpsr_c.global-to-local, align 1
  %v7_12c84 = icmp eq i32 %v1_12c80, 9
  store i1 %v7_12c84, i1* %cpsr_z.global-to-local, align 1
  %v1_12c88 = trunc i32 %v1_12c7c to i8
  store i8 %v1_12c88, i8* %v2_12c78, align 1
  store i32 -1, i32* @r4, align 4
  %v0_12c90 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12c90 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_12c90 = xor i1 %v1_12c90, true
  %v3_12c90 = and i1 %v0_12c90, %v2_12c90
  br i1 %v3_12c90, label %bb345, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_12c70
  %v1_12c94213218 = load i32, i32* @r5, align 4
  %v2_12c94214219 = add i32 %v1_12c94213218, 4
  %v3_12c94215220 = inttoptr i32 %v2_12c94214219 to i32*
  store i32 -1, i32* %v3_12c94215220, align 4
  br label %bb346

bb345:                                            ; preds = %dec_label_pc_12c70
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12c94209 = load i32, i32* @r5, align 4
  %v2_12c94210 = add i32 %v1_12c94209, 4
  %v3_12c94211 = inttoptr i32 %v2_12c94210 to i32*
  store i32 -1, i32* %v3_12c94211, align 4
  %v4_12c98 = load i32, i32* %r3.global-to-local, align 4
  %v5_12c98 = load i32, i32* @r5, align 4
  %v6_12c98 = add i32 %v5_12c98, 12
  %v7_12c98 = inttoptr i32 %v6_12c98 to i32*
  store i32 %v4_12c98, i32* %v7_12c98, align 4
  %v4_12c9c = load i32, i32* %r3.global-to-local, align 4
  %v5_12c9c = trunc i32 %v4_12c9c to i8
  %v6_12c9c = load i32, i32* @r5, align 4
  %v7_12c9c = add i32 %v6_12c9c, 284
  %v8_12c9c = inttoptr i32 %v7_12c9c to i8*
  store i8 %v5_12c9c, i8* %v8_12c9c, align 1
  %v0_12ca0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12ca0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb346

bb346:                                            ; preds = %.thread217, %bb345
  %v1_12ca0 = phi i1 [ %v1_12ca0.pre, %bb345 ], [ %v1_12c90, %.thread217 ]
  %v0_12ca0 = phi i1 [ %v0_12ca0.pre, %bb345 ], [ %v0_12c90, %.thread217 ]
  %v2_12ca0 = xor i1 %v1_12ca0, true
  %v3_12ca0 = and i1 %v0_12ca0, %v2_12ca0
  br i1 %v3_12ca0, label %dec_label_pc_1219c, label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %bb346
  %v0_12ca4 = load i32, i32* @r5, align 4
  store i32 %v0_12ca4, i32* @r0, align 4
  %v0_12ca8 = call i32 @function_112d8()
  store i32 %v0_12ca8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1219c

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12660, %dec_label_pc_1263c, %dec_label_pc_1267c
  store i32 %v3_1263c, i32* %r1.global-to-local, align 4
  %v0_12cb4 = load i32, i32* @sb, align 4
  store i32 %v0_12cb4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16d8c.337 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_12cc0 = call i32 @function_13988(i32 %v0_12cb4, i32 %v3_1263c, i32 ptrtoint ([8 x i8]* @global_var_16d8c.337 to i32), i32 7)
  store i32 %v5_12cc0, i32* %r0.global-to-local, align 4
  %v3_12cc4 = icmp eq i32 %v5_12cc0, -1
  store i1 %v3_12cc4, i1* %cpsr_c.global-to-local, align 1
  %v8_12cc4 = icmp eq i32 %v5_12cc0, -1
  store i1 %v8_12cc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12cc0, i32* @r7, align 4
  br i1 %v3_12cc4, label %dec_label_pc_12300.loopexit, label %dec_label_pc_12688

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12be0
  store i32 %v2_123cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_12ce0 = add i32 %v0_12bcc, 4
  %v2_12ce0 = inttoptr i32 %v1_12ce0 to i32*
  %v3_12ce0 = load i32, i32* %v2_12ce0, align 4
  store i32 %v3_12ce0, i32* %r0.global-to-local, align 4
  %v5_12ce4 = call i32 @function_14af0(i32 %v3_12ce0, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_12ce4, i32* %r0.global-to-local, align 4
  store i32 %v2_12bb8, i32* %r1.global-to-local, align 4
  %v0_12cec = load i32, i32* @r5, align 4
  %v1_12cec = add i32 %v0_12cec, 4
  %v2_12cec = inttoptr i32 %v1_12cec to i32*
  %v3_12cec = load i32, i32* %v2_12cec, align 4
  store i32 %v3_12cec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12464

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_1230c
  store i32 %.pre, i32* @r0, align 4
  %v1_12d04 = add i32 %v0_12cfc, 92
  store i32 %v1_12d04, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_12d0c = call i32 @function_148b0(i32 %.pre, i32 %v1_12d04, i32 192)
  store i32 %v3_12d0c, i32* %r0.global-to-local, align 4
  %v0_12d10 = load i32, i32* @r5, align 4
  %v1_12d10 = add i32 %v0_12d10, 24
  %v2_12d10 = inttoptr i32 %v1_12d10 to i32*
  %v3_12d10 = load i32, i32* %v2_12d10, align 4
  store i32 %v3_12d10, i32* %r3.global-to-local, align 4
  %v1_12d14 = add i32 %v3_12d10, -64
  store i32 %v1_12d14, i32* %ip.global-to-local, align 4
  store i32 %v1_12d14, i32* %v2_12d10, align 4
  br label %dec_label_pc_1231c

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12c08
  store i32 %v0_12c38, i32* @r0, align 4
  %v0_12d24 = call i32 @function_112d8()
  store i32 %v0_12d24, i32* %r0.global-to-local, align 4
  %v0_12d28 = load i32, i32* @r5, align 4
  %v1_12d28 = add i32 %v0_12d28, 24
  %v2_12d28 = inttoptr i32 %v1_12d28 to i32*
  %v3_12d28 = load i32, i32* %v2_12d28, align 4
  store i32 %v3_12d28, i32* %ip.global-to-local, align 4
  %v0_12d2c = load i32, i32* @r4, align 4
  store i32 %v0_12d2c, i32* @r7, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12d34:                               ; preds = %dec_label_pc_120f4, %dec_label_pc_120d8
  %v0_12d34 = load i32, i32* @r7, align 4
  %v1_12d34 = load i32, i32* @r4, align 4
  %v2_12d34 = add i32 %v1_12d34, 12
  %v3_12d34 = inttoptr i32 %v2_12d34 to i32*
  store i32 %v0_12d34, i32* %v3_12d34, align 4
  %v0_12d38 = load i32, i32* @r7, align 4
  %v1_12d38 = trunc i32 %v0_12d38 to i8
  %v2_12d38 = load i32, i32* @r4, align 4
  %v3_12d38 = add i32 %v2_12d38, 284
  %v4_12d38 = inttoptr i32 %v3_12d38 to i8*
  store i8 %v1_12d38, i8* %v4_12d38, align 1
  br label %bb309

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12280, %dec_label_pc_12238
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d44

dec_label_pc_12d44:                               ; preds = %dec_label_pc_122a8, %dec_label_pc_12d40
  %v0_12d4c = phi i32 [ 0, %dec_label_pc_12d40 ], [ %v0_12288, %dec_label_pc_122a8 ]
  %v0_12d44 = load i32, i32* @r5, align 4
  %v1_12d44 = add i32 %v0_12d44, 4
  %v2_12d44 = inttoptr i32 %v1_12d44 to i32*
  %v3_12d44 = load i32, i32* %v2_12d44, align 4
  store i32 %v3_12d44, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_12d4c = inttoptr i32 %v0_12d44 to i32*
  store i32 %v0_12d4c, i32* %v2_12d4c, align 4
  %v0_12d50 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d50 = load i32, i32* @r5, align 4
  %v2_12d50 = add i32 %v1_12d50, 24
  %v3_12d50 = inttoptr i32 %v2_12d50 to i32*
  store i32 %v0_12d50, i32* %v3_12d50, align 4
  %v0_12178.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12178

dec_label_pc_12d58:                               ; preds = %dec_label_pc_121f8
  %v0_12d58 = load i32, i32* @r5, align 4
  %v1_12d58 = add i32 %v0_12d58, 4
  %v2_12d58 = inttoptr i32 %v1_12d58 to i32*
  %v3_12d58 = load i32, i32* %v2_12d58, align 4
  store i32 %v3_12d58, i32* %r0.global-to-local, align 4
  %v1_12d5c = call i32 @function_14284(i32 %v3_12d58)
  store i32 %v1_12d5c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12d64 = load i32, i32* @r6, align 4
  %v1_12d64 = load i32, i32* @r5, align 4
  %v2_12d64 = add i32 %v1_12d64, 12
  %v3_12d64 = inttoptr i32 %v2_12d64 to i32*
  store i32 %v0_12d64, i32* %v3_12d64, align 4
  %v0_12d68 = load i32, i32* %r4.global-to-local, align 4
  %v1_12d68 = load i32, i32* @r5, align 4
  %v2_12d68 = add i32 %v1_12d68, 4
  %v3_12d68 = inttoptr i32 %v2_12d68 to i32*
  store i32 %v0_12d68, i32* %v3_12d68, align 4
  %v0_12d6c = load i32, i32* @r6, align 4
  %v1_12d6c = trunc i32 %v0_12d6c to i8
  %v2_12d6c = load i32, i32* @r5, align 4
  %v3_12d6c = add i32 %v2_12d6c, 284
  %v4_12d6c = inttoptr i32 %v3_12d6c to i8*
  store i8 %v1_12d6c, i8* %v4_12d6c, align 1
  br label %dec_label_pc_1219c

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12c54
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_12324, align 4
  br label %dec_label_pc_12c70

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12a8c
  store i32 2, i32* @r5, align 4
  %v1_12d88 = add i32 %v2_12aa8, 4
  %v2_12d88 = inttoptr i32 %v1_12d88 to i32*
  %v3_12d88 = load i32, i32* %v2_12d88, align 4
  store i32 %v3_12d88, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_12d94 = call i32 @function_10a94()
  store i32 %v0_12d94, i32* %r0.global-to-local, align 4
  %v0_12d98 = load i32, i32* @r8, align 4
  %v1_12d98 = inttoptr i32 %v0_12d98 to i8*
  %v2_12d98 = load i8, i8* %v1_12d98, align 1
  %v3_12d98 = zext i8 %v2_12d98 to i32
  store i32 %v3_12d98, i32* %r1.global-to-local, align 4
  %v2_12d9c = call i32 @function_13fe0(i32 %v0_12d94, i32 %v3_12d98)
  store i32 %v2_12d9c, i32* %r0.global-to-local, align 4
  %v0_12da0 = load i32, i32* @r4, align 4
  %v2_12da0 = and i32 %v2_12d9c, 1073741824
  %v3_12da0 = icmp ne i32 %v2_12da0, 0
  store i1 %v3_12da0, i1* %cpsr_c.global-to-local, align 1
  %v4_12da0 = mul i32 %v2_12d9c, 4
  %v5_12da0 = add i32 %v0_12da0, %v4_12da0
  %v6_12da0 = inttoptr i32 %v5_12da0 to i32*
  %v7_12da0 = load i32, i32* %v6_12da0, align 4
  store i32 %v7_12da0, i32* %r3.global-to-local, align 4
  %v0_12da4 = load i32, i32* @sl, align 4
  store i32 %v0_12da4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_12db0 = inttoptr i32 %v0_12da4 to i32*
  %v3_12db0 = call i32 @function_12ebc(i32 19, i32* %v2_12db0)
  %v4_12db0 = inttoptr i32 %v3_12db0 to i8*
  store i32 %v3_12db0, i32* %r0.global-to-local, align 4
  %v2_12db4 = add i32 %v3_12db0, 1
  %v3_12db4 = inttoptr i32 %v2_12db4 to i8*
  %v4_12db4 = load i8, i8* %v3_12db4, align 1
  %v5_12db4 = zext i8 %v4_12db4 to i32
  store i32 %v5_12db4, i32* %r2.global-to-local, align 4
  %v3_12db8 = load i8, i8* %v4_12db0, align 1
  %v4_12db8 = zext i8 %v3_12db8 to i32
  %v4_12dbc = mul nuw nsw i32 %v5_12db4, 256
  %v5_12dbc = or i32 %v4_12db8, %v4_12dbc
  store i32 %v5_12dbc, i32* %r3.global-to-local, align 4
  %v1_12dc0 = and i32 %v4_12db8, 128
  %v2_12dc0 = icmp ne i32 %v1_12dc0, 0
  store i1 %v2_12dc0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_12db4, i32* %r1.global-to-local, align 4
  %v0_12dc4 = load i32, i32* @r8, align 4
  store i32 %v0_12dc4, i32* %r0.global-to-local, align 4
  %v6_12dd0 = call i32 @function_10d54(i32 %v0_12dc4)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12dd8 = call i32 @function_12ee8(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12de0 = call i32 @function_12ee8(i32 19)
  %v0_12de8 = load i32, i32* @r6, align 4
  store i32 %v0_12de8, i32* %r0.global-to-local, align 4
  %v2_12dec = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_12dec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_12df4 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_12df4 = call i32 @function_149dc(i32 %v0_12de8, %sockaddr* %v3_12df4, i32 16)
  store i32 %v4_12df4, i32* %r0.global-to-local, align 4
  %v3_12df8 = icmp eq i32 %v4_12df4, -1
  store i1 %v3_12df8, i1* %cpsr_c.global-to-local, align 1
  %v8_12df8 = icmp eq i32 %v4_12df4, -1
  store i1 %v8_12df8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12df8, label %dec_label_pc_12e00, label %dec_label_pc_12e10

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12d84
  %v0_12e00 = load i32, i32* @r6, align 4
  store i32 %v0_12e00, i32* %r0.global-to-local, align 4
  %v1_12e04 = call i32 @function_14284(i32 %v0_12e00)
  %v0_12e08 = load i32, i32* @sl, align 4
  store i32 %v0_12e08, i32* %r0.global-to-local, align 4
  %v1_12e0c = call i32 @function_15620(i32 %v0_12e08)
  store i32 %v1_12e0c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e10

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12d84, %dec_label_pc_12e00
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e20 = load i32, i32* @r6, align 4
  store i32 %v0_12e20, i32* %r0.global-to-local, align 4
  %v0_12e24 = load i32, i32* @sl, align 4
  store i32 %v0_12e24, i32* %stack_var_-56, align 4
  %v6_12e28 = call i32 @function_14af0(i32 %v0_12e20, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_127e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e3c = load i32, i32* @r6, align 4
  store i32 %v0_12e3c, i32* %r0.global-to-local, align 4
  %v5_12e40 = call i32 @function_14af0(i32 %v0_12e3c, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_12e48 = load i32, i32* @r5, align 4
  store i32 %v0_12e48, i32* %r2.global-to-local, align 4
  %v2_12e4c = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12e4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e54 = load i32, i32* @r6, align 4
  store i32 %v0_12e54, i32* %r0.global-to-local, align 4
  %v5_12e58 = call i32 @function_14af0(i32 %v0_12e54, i32* nonnull %stack_var_-38, i32 %v0_12e48, i32 16384)
  %v0_12e5c = load i32, i32* @fp, align 4
  %v1_12e5c = add i32 %v0_12e5c, 12
  store i32 %v1_12e5c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e68 = load i32, i32* @r6, align 4
  store i32 %v0_12e68, i32* %r0.global-to-local, align 4
  %v4_12e6c = inttoptr i32 %v1_12e5c to i32*
  %v5_12e6c = call i32 @function_14af0(i32 %v0_12e68, i32* %v4_12e6c, i32 1, i32 16384)
  store i32 %v5_12e6c, i32* %r0.global-to-local, align 4
  %v0_12e70 = load i32, i32* @fp, align 4
  %v1_12e70 = inttoptr i32 %v0_12e70 to i32*
  %v2_12e70 = load i32, i32* %v1_12e70, align 4
  store i32 %v2_12e70, i32* %r1.global-to-local, align 4
  %v1_12e74 = add i32 %v0_12e70, 12
  %v2_12e74 = inttoptr i32 %v1_12e74 to i8*
  %v3_12e74 = load i8, i8* %v2_12e74, align 1
  %v4_12e74 = zext i8 %v3_12e74 to i32
  store i32 %v4_12e74, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e7c = load i32, i32* @r6, align 4
  store i32 %v0_12e7c, i32* %r0.global-to-local, align 4
  %v4_12e80 = inttoptr i32 %v2_12e70 to i32*
  %v5_12e80 = call i32 @function_14af0(i32 %v0_12e7c, i32* %v4_12e80, i32 %v4_12e74, i32 16384)
  %v0_12e84 = load i32, i32* @fp, align 4
  %v1_12e84 = add i32 %v0_12e84, 13
  store i32 %v1_12e84, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12e90 = load i32, i32* @r6, align 4
  store i32 %v0_12e90, i32* %r0.global-to-local, align 4
  %v4_12e94 = inttoptr i32 %v1_12e84 to i32*
  %v5_12e94 = call i32 @function_14af0(i32 %v0_12e90, i32* %v4_12e94, i32 1, i32 16384)
  %v0_12e98 = load i32, i32* @r6, align 4
  store i32 %v0_12e98, i32* %r0.global-to-local, align 4
  %v0_12e9c = load i32, i32* @fp, align 4
  %v1_12e9c = add i32 %v0_12e9c, 13
  %v2_12e9c = inttoptr i32 %v1_12e9c to i8*
  %v3_12e9c = load i8, i8* %v2_12e9c, align 1
  %v4_12e9c = zext i8 %v3_12e9c to i32
  store i32 %v4_12e9c, i32* %r2.global-to-local, align 4
  %v1_12ea0 = add i32 %v0_12e9c, 4
  %v2_12ea0 = inttoptr i32 %v1_12ea0 to i32*
  %v3_12ea0 = load i32, i32* %v2_12ea0, align 4
  store i32 %v3_12ea0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12ea8 = inttoptr i32 %v3_12ea0 to i32*
  %v5_12ea8 = call i32 @function_14af0(i32 %v0_12e98, i32* %v4_12ea8, i32 %v4_12e9c, i32 16384)
  %v0_12eac = load i32, i32* @r6, align 4
  store i32 %v0_12eac, i32* %r0.global-to-local, align 4
  %v1_12eb0 = call i32 @function_14284(i32 %v0_12eac)
  store i32 %v1_12eb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12eb4

dec_label_pc_12eb4:                               ; preds = %dec_label_pc_12a70, %dec_label_pc_12e10
  %v0_12eb4 = load i32, i32* @sl, align 4
  store i32 %v0_12eb4, i32* %r0.global-to-local, align 4
  %v1_12eb8 = call i32 @function_15620(i32 %v0_12eb4)
  store i32 %v1_12eb8, i32* %r0.global-to-local, align 4
  ret i32 %v1_12eb8

; uselistorder directives
  uselistorder i32 %v4_12db8, { 1, 0 }
  uselistorder i32 %v5_12db4, { 1, 0, 2 }
  uselistorder i32 %v2_12d9c, { 1, 0, 2 }
  uselistorder i32 %v3_12cec, { 1, 0 }
  uselistorder i32 %v5_12cc0, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_12c90, { 1, 0 }
  uselistorder i32 %v1_12c80, { 2, 1, 0 }
  uselistorder i32 %v1_12c7c, { 1, 0 }
  uselistorder i32 %v0_12c38, { 1, 0, 2 }
  uselistorder i32 %v1_12c20, { 2, 1, 0 }
  uselistorder i32 %v0_12bcc, { 1, 2, 0 }
  uselistorder i1 %v7_12b40, { 1, 0 }
  uselistorder i32 %v1_12b3c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12b34, { 1, 0 }
  uselistorder i8 %v3_12b2c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12b3c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12b18, { 1, 0 }
  uselistorder i1 %v7_12b10, { 1, 0 }
  uselistorder i1 %v7_12b08, { 1, 0 }
  uselistorder i32 %v0_12ae4, { 1, 2, 0 }
  uselistorder i32 %v2_12ad0, { 1, 0 }
  uselistorder i32 %v1_12ad0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_12ad0, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_12a80, { 1, 0 }
  uselistorder i32 %v3_12a7c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_12a68, { 1, 0 }
  uselistorder i32 %.350, { 1, 0 }
  uselistorder i1 %v7_12a50, { 1, 0 }
  uselistorder i32 %v0_12a4c, { 2, 1, 0, 3 }
  uselistorder i32 %v4_12a2c, { 1, 0, 2 }
  uselistorder i32 %v4_12a28, { 1, 0, 2 }
  uselistorder i1 %v7_12a18, { 1, 0 }
  uselistorder i32 %v0_12a18, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_12934, { 1, 0 }
  uselistorder i32 %v1_12930, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12928, { 1, 0 }
  uselistorder i8 %v3_12920, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12930, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1290c, { 1, 0 }
  uselistorder i1 %v7_12904, { 1, 0 }
  uselistorder i1 %v7_128fc, { 1, 0 }
  uselistorder i1 %v7_12880, { 1, 0 }
  uselistorder i32 %v1_1287c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12874, { 1, 0 }
  uselistorder i8 %v3_1286c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1287c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12858, { 1, 0 }
  uselistorder i1 %v7_12850, { 1, 0 }
  uselistorder i1 %v7_12848, { 1, 0 }
  uselistorder i1 %v7_127cc, { 1, 0 }
  uselistorder i32 %v1_127c8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_127c0, { 1, 0 }
  uselistorder i8 %v3_127b8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_127c8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_127a4, { 1, 0 }
  uselistorder i1 %v7_1279c, { 1, 0 }
  uselistorder i1 %v7_12794, { 1, 0 }
  uselistorder i1 %v7_12718, { 1, 0 }
  uselistorder i32 %v1_12714, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1270c, { 1, 0 }
  uselistorder i8 %v3_12704, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12714, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_126f0, { 1, 0 }
  uselistorder i1 %v7_126e8, { 1, 0 }
  uselistorder i1 %v7_126e0, { 1, 0 }
  uselistorder i32 %v0_12688, { 2, 1, 0 }
  uselistorder i1 %v7_12680, { 1, 0 }
  uselistorder i1 %v8_12674, { 1, 0 }
  uselistorder i8 %v3_1266c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_1267c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12658, { 1, 0 }
  uselistorder i1 %v7_12650, { 1, 0 }
  uselistorder i32 %v3_1263c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_124f8, { 2, 1, 0 }
  uselistorder i1 %v7_124f0, { 1, 0 }
  uselistorder i1 %v8_124e4, { 1, 0 }
  uselistorder i8 %v3_124dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_124ec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_124c8, { 1, 0 }
  uselistorder i1 %v7_124c0, { 1, 0 }
  uselistorder i1 %v7_124b8, { 1, 0 }
  uselistorder i32 %v3_124a4, { 2, 3, 0, 1 }
  uselistorder i32 %v0_12494.pre, { 0, 2, 1 }
  uselistorder i32 %v1_1247c, { 1, 0 }
  uselistorder i32 %v1_12478, { 1, 0 }
  uselistorder i32 %v1_12470, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_1246c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_1246c, { 0, 2, 1 }
  uselistorder i1 %v7_12414, { 1, 0 }
  uselistorder i1 %v2_12400, { 1, 0, 2 }
  uselistorder i1 %v2_123e8, { 1, 0, 2 }
  uselistorder i32 %v1_12408, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_123dc, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_12404, { 1, 0 }
  uselistorder i32 %v2_1240c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_12384, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_12360, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1235c, { 1, 0 }
  uselistorder i32 %v5_12340, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_1232c, { 1, 0, 2 }
  uselistorder i32 %v3_12328, { 1, 0, 2 }
  uselistorder i32 %v0_12cfc, { 1, 0, 2 }
  uselistorder i32 %v5_122f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_122d0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12288, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_12268, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_1225c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_121e8, { 2, 1, 0 }
  uselistorder i32 %v3_121e4, { 1, 0 }
  uselistorder i1 %v7_121cc, { 1, 0 }
  uselistorder i32 %v3_121c8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_121bc, { 1, 0 }
  uselistorder i32 %v1_121a0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1218c, { 2, 1, 0 }
  uselistorder i32 %v3_12188, { 1, 0 }
  uselistorder i32 %v0_1218c, { 1, 0 }
  uselistorder i32 %v2_127e8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_12734, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_12bc0, { 1, 2, 0 }
  uselistorder i32 %v2_123cc, { 0, 2, 1 }
  uselistorder i32 %v1_12120, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12120, { 0, 1, 3, 2 }
  uselistorder i32 %v1_120fc, { 2, 1, 0 }
  uselistorder i32 %v1_120f8, { 1, 0 }
  uselistorder i32 %v0_120c8, { 0, 2, 1 }
  uselistorder i32 %v1_120c0, { 1, 0 }
  uselistorder i1 %v7_1208c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_1208c, { 1, 2, 0 }
  uselistorder i32 %v2_12084, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1207c, { 1, 0 }
  uselistorder i32 %v1_12060, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_12054, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12054, { 0, 2, 1 }
  uselistorder i32 %v1_12044, { 1, 0 }
  uselistorder i32 %v3_120a8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_120b4, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11f94, { 1, 0 }
  uselistorder i32 %v1_11f80, { 1, 0 }
  uselistorder i32 %v1_11f68, { 1, 2, 0 }
  uselistorder i32 %v0_11f74, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11f38, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_11f2c, { 2, 1, 0 }
  uselistorder i32 %v1_11f08, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_11ee0, { 1, 0 }
  uselistorder i32 %v4_11e80, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_11de8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_11d08, { 1, 0 }
  uselistorder i32 %v1_11d04, { 2, 0, 1 }
  uselistorder i32 %v4_11ce0, { 1, 0 }
  uselistorder i1 %v2_11c50, { 1, 0 }
  uselistorder i1 %v3_11c34, { 1, 0, 2 }
  uselistorder i1 %v2_11c20, { 1, 0 }
  uselistorder i1 %v2_11bfc, { 1, 0 }
  uselistorder i32 %v1_11bac, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_11b98, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b94, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_11b84, { 1, 0 }
  uselistorder i32 %v0_11b74, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11b64, { 1, 0 }
  uselistorder i32 %v0_11e74, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_11738, { 1, 0 }
  uselistorder i32 %v0_1172c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_116d8, { 1, 0 }
  uselistorder i32 %v0_116d0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11678, { 3, 2, 0, 1 }
  uselistorder i1 %v7_1161c, { 1, 0 }
  uselistorder i32 %v3_11614, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_115fc, { 0, 2, 1 }
  uselistorder i32 %v0_115e4, { 2, 1, 0 }
  uselistorder i32 %v0_115c0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_11558, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 62, 63, 44, 36, 64, 65, 66, 67, 68, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 114, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 71, 72, 73, 74, 60, 61, 75, 76, 78, 77, 79, 80, 81, 82, 83, 85, 87, 86, 84, 88, 89, 90, 91, 97, 92, 93, 94, 95, 98, 142, 143, 99, 144, 145, 100, 101, 102, 103, 104, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 113, 128, 129, 130, 131, 132, 133, 135, 134, 137, 136, 96, 138, 139, 140, 141, 105, 106, 107, 108, 109, 110, 111, 112 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 44, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 41, 42, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 43, 64, 52, 53, 54, 55, 56, 58, 60, 59, 95, 57, 61, 62, 63, 65, 69, 66, 67, 68, 70, 73, 71, 74, 72, 75, 76, 77, 78, 79, 80, 81, 82, 98, 99, 100, 101, 102, 103, 104, 96, 97, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 166, 160, 161, 162, 163, 164, 165, 83, 85, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 44, 45, 39, 40, 36, 15, 16, 1, 2, 3, 82, 83, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 46, 47, 48, 43, 81, 49, 50, 51, 53, 54, 52, 55, 56, 58, 57, 80, 59, 60, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 146, 141, 142, 143, 144, 145, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 124, 123, 35, 125, 108, 111, 110, 100, 99, 126, 128, 127, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 132, 129, 130, 121, 120, 122, 172, 131, 134, 133, 135, 136, 138, 137, 139, 145, 140, 141, 144, 142, 143, 146, 148, 149, 147, 152, 150, 174, 176, 175, 177, 179, 178, 173, 180, 181, 182, 184, 183, 185, 186, 188, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 237, 239, 240, 241, 242, 243, 151, 153, 154, 155, 156, 157, 158, 160, 159, 162, 161, 163, 167, 166, 164, 165, 168, 169, 170, 171 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 9, 10, 11, 12, 13, 6, 7, 8 }
  uselistorder i32* %ip.global-to-local, { 22, 23, 2, 24, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 50, 35, 43, 44, 45, 46, 47, 48, 49, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 96, 97, 98, 99, 100, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 145, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 134, 101, 102, 103, 104, 105, 106, 146, 135, 94, 95, 107, 109, 108, 110, 111, 113, 115, 114, 136, 112, 116, 117, 118, 119, 120, 121, 126, 122, 123, 124, 125, 139, 140, 137, 138, 127, 128, 129, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 144, 179, 180, 181, 182, 183, 143, 184, 185, 186, 142, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 130, 131, 132, 141, 133 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 95, 96, 97, 98, 99, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 146, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 135, 100, 101, 102, 103, 104, 105, 147, 136, 93, 94, 106, 108, 107, 109, 110, 112, 114, 113, 137, 111, 115, 116, 117, 118, 119, 124, 120, 121, 122, 123, 140, 141, 138, 125, 139, 126, 127, 128, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 145, 176, 177, 178, 179, 180, 144, 181, 182, 183, 143, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 129, 130, 131, 132, 133, 142, 134 }
  uselistorder i32 (i32)* @function_10d54, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 8, 2, 3, 0, 1, 4, 5, 9, 10, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32)* @function_12ee8, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_12ebc, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 60, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 55, 56, 57, 58 }
  uselistorder i32 (i32)* @function_12fa0, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_16b40.34 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_16b40.34, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16b40.34 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_14af0, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 29, 30, 31, 28, 32 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_14a90, { 0, 1, 2, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13988, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i8* bitcast (i8** @global_var_1f85c.194 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1f85d.195, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f85c.194 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_144a4, { 3, 1, 2, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_112d8, { 3, 2, 1, 0 }
  uselistorder i32 254, { 9, 10, 11, 0, 1, 2, 3, 4, 12, 5, 13, 6, 14, 7, 15, 8, 16 }
  uselistorder i8 2, { 0, 2, 4, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_14abc, { 1, 0, 3, 2 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_14b1c, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 16384, { 34, 56, 35, 57, 36, 58, 37, 59, 38, 60, 39, 61, 13, 62, 12, 73, 11, 54, 0, 55, 1, 63, 2, 64, 3, 65, 4, 66, 5, 67, 6, 68, 7, 69, 8, 70, 32, 71, 33, 72, 30, 75, 31, 76, 29, 74, 40, 77, 9, 78, 10, 79, 14, 87, 41, 88, 16, 80, 44, 81, 43, 82, 45, 83, 46, 84, 15, 85, 42, 86, 17, 89, 18, 90, 19, 91, 47, 48, 49, 50, 20, 92, 21, 93, 23, 94, 22, 95, 25, 96, 24, 97, 26, 98, 27, 99, 52, 100, 53, 101, 28, 102, 51, 103 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f064, { 3, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_140ac, { 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32)* @function_f008, { 5, 11, 10, 9, 8, 7, 6, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1f840.317, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_16d1c.295 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16cb4.273 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16c98.267 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16c78.261 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16c70.259 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16c5c.255 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16c48.251 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16c40.249 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16c38.247 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_16c2c.245 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16b68.243 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16de0.239 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16dd8.237 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16db4.229 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16dac.227 to i32), { 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 7, 25, 8, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 15, 16, 32, 17, 33 }
  uselistorder i32 (i32, i32, i32)* @function_113ac, { 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 61, 60, 59, 58, 57, 56 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_16d94.221 to i32), { 0, 34, 1, 35, 2, 36, 3, 37, 4, 38, 5, 39, 6, 40, 7, 41, 8, 42, 9, 43, 10, 44, 11, 45, 12, 46, 13, 47, 14, 48, 15, 49, 16, 50, 17, 51, 18, 52, 19, 53, 20, 54, 21, 22, 23, 55, 24, 56, 25, 57, 26, 58, 27, 59, 28, 60, 29, 61, 30, 62, 31, 63, 32, 64, 33, 65 }
  uselistorder i8* @global_var_1f851.217, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f844.208 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1f850.209, { 1, 0 }
  uselistorder i8** @global_var_1f830.204, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f830.204 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 2, 1, 3, 4, 5, 0, 6 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 36, 1, 19, 0, 2, 37, 3, 38, 26, 27, 4, 39, 20, 28, 40, 41, 5, 42, 43, 6, 7, 44, 21, 8, 45, 29, 22, 23, 30, 31, 32, 46, 47, 48, 9, 49, 10, 11, 33, 34, 35, 50, 51, 52, 12, 53, 13, 14, 54, 15, 55, 56, 24, 57, 58, 16, 59, 60, 25, 61, 62, 17, 63, 18, 64 }
  uselistorder i32 ()* @function_10a94, { 76, 75, 29, 28, 74, 73, 72, 68, 71, 70, 69, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 4, 3, 2, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 6, 5, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_14b50, { 0, 1, 2, 3, 4, 5, 6, 10, 7, 8, 9, 11 }
  uselistorder i32 2048, { 8, 7, 5, 10, 11, 0, 1, 2, 3, 9, 12, 6, 13, 4, 14, 15, 16 }
  uselistorder i32* @global_var_1f8c8.202, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1f8c4.200, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1f860.188, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_14554, { 0, 1, 2, 3, 4, 7, 8, 5, 6, 9, 10, 11 }
  uselistorder i32 (i32)* @function_10aec, { 1, 0 }
  uselistorder i32* @global_var_1f8a8.89, { 3, 4, 2, 0, 5, 1, 6, 14, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 ()* @function_13b7c, { 2, 1, 0 }
  uselistorder i32* @global_var_1f8cc.186, { 0, 2, 1 }
  uselistorder i32 ()* @function_142b0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 10, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1, 50, 51, 52, 56, 2, 57, 58, 59 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 8, 9, 81, 82, 83, 16, 19, 17, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 10, 11, 12, 13, 14, 15, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 0, 113, 114, 115, 116 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 74, 75, 76, 24, 0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder label %dec_label_pc_12eb4, { 1, 0 }
  uselistorder label %dec_label_pc_12e10, { 1, 0 }
  uselistorder label %dec_label_pc_12d44, { 1, 0 }
  uselistorder label %dec_label_pc_12cb0, { 2, 0, 1 }
  uselistorder label %bb346, { 1, 0 }
  uselistorder label %dec_label_pc_12c70, { 1, 0 }
  uselistorder label %dec_label_pc_12b3c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12b28, { 1, 0 }
  uselistorder label %dec_label_pc_12ad0, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_12ab4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12930, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1291c, { 1, 0 }
  uselistorder label %dec_label_pc_1287c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12868, { 1, 0 }
  uselistorder label %dec_label_pc_127c8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_127b4, { 1, 0 }
  uselistorder label %dec_label_pc_12714, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12700, { 1, 0 }
  uselistorder label %dec_label_pc_12688, { 1, 0 }
  uselistorder label %dec_label_pc_1267c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12668, { 1, 0 }
  uselistorder label %dec_label_pc_124ec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_124d8, { 1, 0 }
  uselistorder label %dec_label_pc_12494, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_12484, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb320, { 2, 1, 0 }
  uselistorder label %bb317, { 2, 1, 0 }
  uselistorder label %dec_label_pc_123e4, { 1, 0 }
  uselistorder label %dec_label_pc_123e4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1236c, { 1, 0 }
  uselistorder label %bb314, { 1, 0 }
  uselistorder label %dec_label_pc_1231c, { 1, 0 }
  uselistorder label %dec_label_pc_1230c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12304thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_12304thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1230c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_12300.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_122c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1219c, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_12178, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_11fe0.dec_label_pc_11fe0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11fc4.dec_label_pc_11fc4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11fbc, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_11fb4, { 1, 0 }
  uselistorder label %dec_label_pc_11f68, { 1, 0 }
  uselistorder label %dec_label_pc_11e08, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11dfc, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_11c60, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11c3c, { 1, 0 }
  uselistorder label %dec_label_pc_11c30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11c0c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11be8, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_11b94, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_11678, { 1, 0 }
}

define i32 @function_12ebc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12ebc:
  %v3_12ec0 = mul i32 %arg1, 8
  %v2_12ec4 = add i32 %v3_12ec0, ptrtoint (i32* @global_var_1f8d4.339 to i32)
  %v2_12ec8 = icmp eq i32* %arg2, null
  br i1 %v2_12ec8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12ebc
  %v3_12ed411 = inttoptr i32 %v2_12ec4 to i32*
  %v4_12ed412 = load i32, i32* %v3_12ed411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12ebc
  %v2_12ecc = add i32 %v3_12ec0, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 5)
  %v3_12ecc = inttoptr i32 %v2_12ecc to i8*
  %v4_12ecc = load i8, i8* %v3_12ecc, align 1
  %v5_12ecc = zext i8 %v4_12ecc to i32
  store i32 %v5_12ecc, i32* @r2, align 4
  %v2_12ed0 = add i32 %v3_12ec0, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 4)
  %v3_12ed0 = inttoptr i32 %v2_12ed0 to i8*
  %v4_12ed0 = load i8, i8* %v3_12ed0, align 4
  %v5_12ed0 = zext i8 %v4_12ed0 to i32
  %v3_12ed4 = inttoptr i32 %v2_12ec4 to i32*
  %v4_12ed4 = load i32, i32* %v3_12ed4, align 4
  %v5_12ed8 = mul nuw nsw i32 %v5_12ecc, 256
  %v6_12ed8 = or i32 %v5_12ed0, %v5_12ed8
  store i32 %v6_12ed8, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_12ed4714 = phi i32 [ %v4_12ed412, %.thread ], [ %v4_12ed4, %bb ]
  ret i32 %v4_12ed4714

; uselistorder directives
  uselistorder i32 %v2_12ec4, { 1, 0 }
  uselistorder i32 %v3_12ec0, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_12ee8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ee8:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12ee8 = mul i32 %arg1, 8
  %v3_12eec = load i32, i32* @r4, align 4
  store i32 %v3_12eec, i32* %stack_var_-20, align 4
  %v3_12efc = and i32 %v3_12ee8, 2040
  %v2_12f00 = add i32 %v3_12efc, ptrtoint (i32* @global_var_1f8d4.339 to i32)
  store i32 %v2_12f00, i32* @lr, align 4
  %v1_12f08 = add i32 %v3_12efc, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 4)
  store i32 %v1_12f08, i32* %r7.global-to-local, align 4
  %v2_12f0c = load i32, i32* @global_var_1f688.342, align 4
  %v2_12f10 = inttoptr i32 %v1_12f08 to i8*
  %v3_12f10 = load i8, i8* %v2_12f10, align 4
  %v4_12f10 = zext i8 %v3_12f10 to i32
  store i32 %v4_12f10, i32* @r1, align 4
  %v1_12f14 = add i32 %v3_12efc, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 5)
  %v2_12f14 = inttoptr i32 %v1_12f14 to i8*
  %v3_12f14 = load i8, i8* %v2_12f14, align 1
  %v4_12f14 = zext i8 %v3_12f14 to i32
  %v3_12f18 = udiv i32 %v2_12f0c, 256
  %v4_12f1c = mul nuw nsw i32 %v4_12f14, 256
  %v5_12f1c = or i32 %v4_12f1c, %v4_12f10
  %v7_12f1c = icmp eq i32 %v5_12f1c, 0
  store i1 %v7_12f1c, i1* @cpsr_z, align 1
  %v3_12f20 = udiv i32 %v2_12f0c, 65536
  %v1_12f24 = urem i32 %v3_12f18, 256
  store i32 %v1_12f24, i32* %r6.global-to-local, align 4
  %v1_12f28 = urem i32 %v3_12f20, 256
  store i32 %v1_12f28, i32* %r5.global-to-local, align 4
  %v3_12f2c = udiv i32 %v2_12f0c, 16777216
  store i32 %v3_12f2c, i32* %r4.global-to-local, align 4
  %v1_12f30 = urem i32 %v2_12f0c, 256
  br i1 %v7_12f1c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12ee8
  store i32 %v3_12eec, i32* @r4, align 4
  ret i32 %v1_12f30

bb8:                                              ; preds = %dec_label_pc_12ee8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12f3c

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f3c, %bb8
  %v2_12f48 = phi i32 [ %v1_12f84, %dec_label_pc_12f3c ], [ 0, %bb8 ]
  %v0_12f3c = phi i32 [ %v0_12f7c, %dec_label_pc_12f3c ], [ %v2_12f00, %bb8 ]
  %v1_12f3c = inttoptr i32 %v0_12f3c to i32*
  %v2_12f3c = load i32, i32* %v1_12f3c, align 4
  %v2_12f40 = add i32 %v2_12f3c, %v2_12f48
  %v3_12f40 = inttoptr i32 %v2_12f40 to i8*
  %v4_12f40 = load i8, i8* %v3_12f40, align 1
  %v6_12f40 = zext i8 %v4_12f40 to i32
  %v2_12f44 = xor i32 %v6_12f40, %v1_12f30
  %v1_12f48 = trunc i32 %v2_12f44 to i8
  store i8 %v1_12f48, i8* %v3_12f40, align 1
  %v0_12f4c = load i32, i32* @lr, align 4
  %v1_12f4c = inttoptr i32 %v0_12f4c to i32*
  %v2_12f4c = load i32, i32* %v1_12f4c, align 4
  %v0_12f50 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f50 = add i32 %v0_12f50, %v2_12f4c
  %v3_12f50 = inttoptr i32 %v2_12f50 to i8*
  %v4_12f50 = load i8, i8* %v3_12f50, align 1
  %v6_12f50 = zext i8 %v4_12f50 to i32
  %v0_12f54 = load i32, i32* %r6.global-to-local, align 4
  %v2_12f54 = xor i32 %v0_12f54, %v6_12f50
  %v1_12f58 = trunc i32 %v2_12f54 to i8
  store i8 %v1_12f58, i8* %v3_12f50, align 1
  %v0_12f5c = load i32, i32* @lr, align 4
  %v1_12f5c = inttoptr i32 %v0_12f5c to i32*
  %v2_12f5c = load i32, i32* %v1_12f5c, align 4
  %v0_12f60 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f60 = add i32 %v0_12f60, %v2_12f5c
  %v3_12f60 = inttoptr i32 %v2_12f60 to i8*
  %v4_12f60 = load i8, i8* %v3_12f60, align 1
  %v6_12f60 = zext i8 %v4_12f60 to i32
  %v0_12f64 = load i32, i32* %r5.global-to-local, align 4
  %v2_12f64 = xor i32 %v0_12f64, %v6_12f60
  %v1_12f68 = trunc i32 %v2_12f64 to i8
  store i8 %v1_12f68, i8* %v3_12f60, align 1
  %v0_12f6c = load i32, i32* @lr, align 4
  %v1_12f6c = inttoptr i32 %v0_12f6c to i32*
  %v2_12f6c = load i32, i32* %v1_12f6c, align 4
  store i32 %v2_12f6c, i32* @r1, align 4
  %v0_12f70 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f70 = add i32 %v0_12f70, %v2_12f6c
  %v3_12f70 = inttoptr i32 %v2_12f70 to i8*
  %v4_12f70 = load i8, i8* %v3_12f70, align 1
  %v6_12f70 = zext i8 %v4_12f70 to i32
  %v0_12f74 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f74 = xor i32 %v0_12f74, %v6_12f70
  %v1_12f78 = trunc i32 %v2_12f74 to i8
  store i8 %v1_12f78, i8* %v3_12f70, align 1
  %v0_12f7c = load i32, i32* @lr, align 4
  %v1_12f7c = add i32 %v0_12f7c, 4
  %v2_12f7c = inttoptr i32 %v1_12f7c to i8*
  %v3_12f7c = load i8, i8* %v2_12f7c, align 1
  %v4_12f7c = zext i8 %v3_12f7c to i32
  %v0_12f80 = load i32, i32* %r7.global-to-local, align 4
  %v1_12f80 = add i32 %v0_12f80, 1
  %v2_12f80 = inttoptr i32 %v1_12f80 to i8*
  %v3_12f80 = load i8, i8* %v2_12f80, align 1
  %v4_12f80 = zext i8 %v3_12f80 to i32
  %v0_12f84 = load i32, i32* %ip.global-to-local, align 4
  %v1_12f84 = add i32 %v0_12f84, 1
  store i32 %v1_12f84, i32* %ip.global-to-local, align 4
  %v4_12f88 = mul nuw nsw i32 %v4_12f80, 256
  %v5_12f88 = or i32 %v4_12f88, %v4_12f7c
  %v9_12f8c = icmp eq i32 %v5_12f88, %v1_12f84
  store i1 %v9_12f8c, i1* @cpsr_z, align 1
  %v8_12f90 = icmp sgt i32 %v5_12f88, %v1_12f84
  br i1 %v8_12f90, label %dec_label_pc_12f3c, label %dec_label_pc_12f94

dec_label_pc_12f94:                               ; preds = %dec_label_pc_12f3c
  %v2_12f94 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12f94, i32* @r4, align 4
  ret i32 %v1_12f30

; uselistorder directives
  uselistorder i32 %v1_12f84, { 1, 2, 3, 0 }
  uselistorder i32 %v0_12f7c, { 1, 0 }
  uselistorder i32 %v1_12f30, { 0, 2, 1 }
  uselistorder i32 %v2_12f0c, { 3, 0, 1, 2 }
}

define i32 @function_12fa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fa0:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12fa0 = mul i32 %arg1, 8
  %v3_12fa4 = load i32, i32* @r4, align 4
  store i32 %v3_12fa4, i32* %stack_var_-20, align 4
  %v3_12fb4 = and i32 %v3_12fa0, 2040
  %v2_12fb8 = add i32 %v3_12fb4, ptrtoint (i32* @global_var_1f8d4.339 to i32)
  store i32 %v2_12fb8, i32* @lr, align 4
  %v1_12fc0 = add i32 %v3_12fb4, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 4)
  store i32 %v1_12fc0, i32* %r7.global-to-local, align 4
  %v2_12fc4 = load i32, i32* @global_var_1f688.342, align 4
  store i32 %v2_12fc4, i32* @r2, align 4
  %v2_12fc8 = inttoptr i32 %v1_12fc0 to i8*
  %v3_12fc8 = load i8, i8* %v2_12fc8, align 4
  %v4_12fc8 = zext i8 %v3_12fc8 to i32
  %v1_12fcc = add i32 %v3_12fb4, add (i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32 5)
  %v2_12fcc = inttoptr i32 %v1_12fcc to i8*
  %v3_12fcc = load i8, i8* %v2_12fcc, align 1
  %v4_12fcc = zext i8 %v3_12fcc to i32
  %v3_12fd0 = udiv i32 %v2_12fc4, 256
  %v4_12fd4 = mul nuw nsw i32 %v4_12fcc, 256
  %v5_12fd4 = or i32 %v4_12fd4, %v4_12fc8
  %v7_12fd4 = icmp eq i32 %v5_12fd4, 0
  %v3_12fd8 = udiv i32 %v2_12fc4, 65536
  %v1_12fdc = urem i32 %v3_12fd0, 256
  store i32 %v1_12fdc, i32* %r6.global-to-local, align 4
  %v1_12fe0 = urem i32 %v3_12fd8, 256
  store i32 %v1_12fe0, i32* %r5.global-to-local, align 4
  %v3_12fe4 = udiv i32 %v2_12fc4, 16777216
  store i32 %v3_12fe4, i32* %r4.global-to-local, align 4
  %v1_12fe8 = urem i32 %v2_12fc4, 256
  br i1 %v7_12fd4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12fa0
  store i32 %v3_12fa4, i32* @r4, align 4
  ret i32 %v1_12fe8

bb8:                                              ; preds = %dec_label_pc_12fa0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ff4

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12ff4, %bb8
  %v2_13000 = phi i32 [ %v1_1303c, %dec_label_pc_12ff4 ], [ 0, %bb8 ]
  %v0_12ff4 = phi i32 [ %v0_13034, %dec_label_pc_12ff4 ], [ %v2_12fb8, %bb8 ]
  %v1_12ff4 = inttoptr i32 %v0_12ff4 to i32*
  %v2_12ff4 = load i32, i32* %v1_12ff4, align 4
  %v2_12ff8 = add i32 %v2_12ff4, %v2_13000
  %v3_12ff8 = inttoptr i32 %v2_12ff8 to i8*
  %v4_12ff8 = load i8, i8* %v3_12ff8, align 1
  %v6_12ff8 = zext i8 %v4_12ff8 to i32
  %v2_12ffc = xor i32 %v6_12ff8, %v1_12fe8
  %v1_13000 = trunc i32 %v2_12ffc to i8
  store i8 %v1_13000, i8* %v3_12ff8, align 1
  %v0_13004 = load i32, i32* @lr, align 4
  %v1_13004 = inttoptr i32 %v0_13004 to i32*
  %v2_13004 = load i32, i32* %v1_13004, align 4
  %v0_13008 = load i32, i32* %ip.global-to-local, align 4
  %v2_13008 = add i32 %v0_13008, %v2_13004
  %v3_13008 = inttoptr i32 %v2_13008 to i8*
  %v4_13008 = load i8, i8* %v3_13008, align 1
  %v6_13008 = zext i8 %v4_13008 to i32
  %v0_1300c = load i32, i32* %r6.global-to-local, align 4
  %v2_1300c = xor i32 %v0_1300c, %v6_13008
  %v1_13010 = trunc i32 %v2_1300c to i8
  store i8 %v1_13010, i8* %v3_13008, align 1
  %v0_13014 = load i32, i32* @lr, align 4
  %v1_13014 = inttoptr i32 %v0_13014 to i32*
  %v2_13014 = load i32, i32* %v1_13014, align 4
  %v0_13018 = load i32, i32* %ip.global-to-local, align 4
  %v2_13018 = add i32 %v0_13018, %v2_13014
  %v3_13018 = inttoptr i32 %v2_13018 to i8*
  %v4_13018 = load i8, i8* %v3_13018, align 1
  %v6_13018 = zext i8 %v4_13018 to i32
  %v0_1301c = load i32, i32* %r5.global-to-local, align 4
  %v2_1301c = xor i32 %v0_1301c, %v6_13018
  %v1_13020 = trunc i32 %v2_1301c to i8
  store i8 %v1_13020, i8* %v3_13018, align 1
  %v0_13024 = load i32, i32* @lr, align 4
  %v1_13024 = inttoptr i32 %v0_13024 to i32*
  %v2_13024 = load i32, i32* %v1_13024, align 4
  %v0_13028 = load i32, i32* %ip.global-to-local, align 4
  %v2_13028 = add i32 %v0_13028, %v2_13024
  %v3_13028 = inttoptr i32 %v2_13028 to i8*
  %v4_13028 = load i8, i8* %v3_13028, align 1
  %v6_13028 = zext i8 %v4_13028 to i32
  %v0_1302c = load i32, i32* %r4.global-to-local, align 4
  %v2_1302c = xor i32 %v0_1302c, %v6_13028
  %v1_13030 = trunc i32 %v2_1302c to i8
  store i8 %v1_13030, i8* %v3_13028, align 1
  %v0_13034 = load i32, i32* @lr, align 4
  %v1_13034 = add i32 %v0_13034, 4
  %v2_13034 = inttoptr i32 %v1_13034 to i8*
  %v3_13034 = load i8, i8* %v2_13034, align 1
  %v4_13034 = zext i8 %v3_13034 to i32
  %v0_13038 = load i32, i32* %r7.global-to-local, align 4
  %v1_13038 = add i32 %v0_13038, 1
  %v2_13038 = inttoptr i32 %v1_13038 to i8*
  %v3_13038 = load i8, i8* %v2_13038, align 1
  %v4_13038 = zext i8 %v3_13038 to i32
  %v0_1303c = load i32, i32* %ip.global-to-local, align 4
  %v1_1303c = add i32 %v0_1303c, 1
  store i32 %v1_1303c, i32* %ip.global-to-local, align 4
  %v4_13040 = mul nuw nsw i32 %v4_13038, 256
  %v5_13040 = or i32 %v4_13040, %v4_13034
  store i32 %v5_13040, i32* @r2, align 4
  %v8_13048 = icmp sgt i32 %v5_13040, %v1_1303c
  br i1 %v8_13048, label %dec_label_pc_12ff4, label %dec_label_pc_1304c

dec_label_pc_1304c:                               ; preds = %dec_label_pc_12ff4
  %v2_1304c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1304c, i32* @r4, align 4
  ret i32 %v1_12fe8

; uselistorder directives
  uselistorder i32 %v1_1303c, { 1, 2, 0 }
  uselistorder i32 %v0_13034, { 1, 0 }
  uselistorder i32 %v1_12fe8, { 0, 2, 1 }
  uselistorder i32 %v2_12fc4, { 3, 0, 1, 2, 4 }
}

define i32 @function_13058() local_unnamed_addr {
dec_label_pc_13058:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_13060 = call i32 @function_14d30(i32 12)
  store i32 ptrtoint ([13 x i8]* @global_var_16dfc.346 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 12, i32* %r8.global-to-local, align 4
  store i32 %v1_13060, i32* @r5, align 4
  %v4_13080 = call i32 @function_13940(i32 %v1_13060, i32 ptrtoint ([13 x i8]* @global_var_16dfc.346 to i32), i32 12)
  %v0_13088 = load i32, i32* @r5, align 4
  store i32 %v0_13088, i32* @global_var_1f8ec.348, align 4
  store i8 12, i8* bitcast (i32* @global_var_1f8f0.349 to i8*), align 4
  %v0_13090 = load i32, i32* @r6, align 4
  %v1_13090 = trunc i32 %v0_13090 to i8
  store i8 %v1_13090, i8* bitcast (i32* @global_var_1f8f1.350 to i8*), align 4
  %v1_13094 = call i32 @function_14d30(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_13094, i32* @r7, align 4
  %v3_130a8 = call i32 @function_13940(i32 %v1_13094, i32 ptrtoint (i32* @global_var_16e0c.352 to i32), i32 2)
  %v0_130ac = load i32, i32* %r8.global-to-local, align 4
  %v0_130b0 = load i32, i32* @r7, align 4
  store i32 %v0_130b0, i32* @global_var_1f8f4.353, align 4
  %v0_130b4 = load i32, i32* @r5, align 4
  %v1_130b4 = trunc i32 %v0_130b4 to i8
  store i8 %v1_130b4, i8* bitcast (i32* @global_var_1f8f8.354 to i8*), align 4
  %v0_130b8 = load i32, i32* @r6, align 4
  %v1_130b8 = trunc i32 %v0_130b8 to i8
  store i8 %v1_130b8, i8* bitcast (i32* @global_var_1f8f9.355 to i8*), align 4
  %v1_130bc = call i32 @function_14d30(i32 %v0_130ac)
  %v0_130c0 = load i32, i32* %sl.global-to-local, align 4
  %v0_130c4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_130bc, i32* @r7, align 4
  %v4_130cc = call i32 @function_13940(i32 %v1_130bc, i32 %v0_130c0, i32 %v0_130c4)
  %v0_130d0 = load i32, i32* @r5, align 4
  %v0_130d4 = load i32, i32* @r7, align 4
  store i32 %v0_130d4, i32* @global_var_1f964.356, align 4
  %v1_130d8 = trunc i32 %v0_130c4 to i8
  store i8 %v1_130d8, i8* bitcast (i32* @global_var_1f968.357 to i8*), align 4
  %v0_130dc = load i32, i32* @r6, align 4
  %v1_130dc = trunc i32 %v0_130dc to i8
  store i8 %v1_130dc, i8* bitcast (i32* @global_var_1f969.358 to i8*), align 4
  %v1_130e0 = call i32 @function_14d30(i32 %v0_130d0)
  %v0_130e4 = load i32, i32* @r5, align 4
  store i32 %v1_130e0, i32* @r7, align 4
  %v3_130f0 = call i32 @function_13940(i32 %v1_130e0, i32 ptrtoint (i32* @global_var_16e10.360 to i32), i32 %v0_130e4)
  %v0_130f8 = load i32, i32* @r7, align 4
  store i32 %v0_130f8, i32* @global_var_1f96c.361, align 4
  %v0_130fc = load i32, i32* @r5, align 4
  %v1_130fc = trunc i32 %v0_130fc to i8
  store i8 %v1_130fc, i8* bitcast (i32* @global_var_1f970.362 to i8*), align 4
  %v0_13100 = load i32, i32* @r6, align 4
  %v1_13100 = trunc i32 %v0_13100 to i8
  store i8 %v1_13100, i8* bitcast (i32* @global_var_1f971.363 to i8*), align 4
  %v1_13104 = call i32 @function_14d30(i32 15)
  store i32 %v1_13104, i32* @r5, align 4
  %v3_13114 = call i32 @function_13940(i32 %v1_13104, i32 ptrtoint (i32* @global_var_16e14.365 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1f8e8.366 to i8*), align 4
  %v0_13124 = load i32, i32* @r5, align 4
  store i32 %v0_13124, i32* @global_var_1f8e4.367, align 4
  %v0_13128 = load i32, i32* @r6, align 4
  %v1_13128 = trunc i32 %v0_13128 to i8
  store i8 %v1_13128, i8* bitcast (i32* @global_var_1f8e9.368 to i8*), align 4
  %v1_1312c = call i32 @function_14d30(i32 29)
  store i32 %v1_1312c, i32* @r5, align 4
  %v3_1313c = call i32 @function_13940(i32 %v1_1312c, i32 ptrtoint (i32* @global_var_16e24.370 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1f900.371 to i8*), align 4
  %v0_1314c = load i32, i32* @r5, align 4
  store i32 %v0_1314c, i32* @global_var_1f8fc.372, align 4
  %v0_13150 = load i32, i32* @r6, align 4
  %v1_13150 = trunc i32 %v0_13150 to i8
  store i8 %v1_13150, i8* bitcast (i32* @global_var_1f901.373 to i8*), align 4
  %v1_13154 = call i32 @function_14d30(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_13154, i32* @r5, align 4
  %v4_13168 = call i32 @function_13940(i32 %v1_13154, i32 ptrtoint ([8 x i8]* @global_var_16e44.375 to i32), i32 7)
  %v0_13170 = load i32, i32* @r5, align 4
  store i32 %v0_13170, i32* @global_var_1f904.376, align 4
  %v0_13174 = load i32, i32* @r7, align 4
  %v1_13174 = trunc i32 %v0_13174 to i8
  store i8 %v1_13174, i8* bitcast (i32* @global_var_1f908.377 to i8*), align 4
  %v0_13178 = load i32, i32* @r6, align 4
  %v1_13178 = trunc i32 %v0_13178 to i8
  store i8 %v1_13178, i8* bitcast (i32* @global_var_1f909.378 to i8*), align 4
  %v1_1317c = call i32 @function_14d30(i32 5)
  store i32 %v1_1317c, i32* @r5, align 4
  %v4_1318c = call i32 @function_13940(i32 %v1_1317c, i32 ptrtoint ([6 x i8]* @global_var_16e4c.380 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1f910.381 to i8*), align 4
  %v0_1319c = load i32, i32* @r5, align 4
  store i32 %v0_1319c, i32* @global_var_1f90c.382, align 4
  %v0_131a0 = load i32, i32* @r6, align 4
  %v1_131a0 = trunc i32 %v0_131a0 to i8
  store i8 %v1_131a0, i8* bitcast (i32* @global_var_1f911.383 to i8*), align 4
  %v1_131a4 = call i32 @function_14d30(i32 11)
  store i32 %v1_131a4, i32* @r5, align 4
  %v3_131b4 = call i32 @function_13940(i32 %v1_131a4, i32 ptrtoint (i32* @global_var_16e54.385 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1f918.386 to i8*), align 4
  %v0_131c4 = load i32, i32* @r5, align 4
  store i32 %v0_131c4, i32* @global_var_1f914.387, align 4
  %v0_131c8 = load i32, i32* @r6, align 4
  %v1_131c8 = trunc i32 %v0_131c8 to i8
  store i8 %v1_131c8, i8* bitcast (i32* @global_var_1f919.388 to i8*), align 4
  %v1_131cc = call i32 @function_14d30(i32 4)
  store i32 %v1_131cc, i32* @r5, align 4
  %v4_131dc = call i32 @function_13940(i32 %v1_131cc, i32 ptrtoint ([5 x i8]* @global_var_16e60.390 to i32), i32 4)
  %v0_131e4 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1f920.391 to i8*), align 4
  %v0_131ec = load i32, i32* @r5, align 4
  store i32 %v0_131ec, i32* @global_var_1f91c.392, align 4
  %v0_131f0 = load i32, i32* @r6, align 4
  %v1_131f0 = trunc i32 %v0_131f0 to i8
  store i8 %v1_131f0, i8* bitcast (i32* @global_var_1f921.393 to i8*), align 4
  %v1_131f4 = call i32 @function_14d30(i32 %v0_131e4)
  %v0_131f8 = load i32, i32* @r7, align 4
  store i32 %v1_131f4, i32* @r5, align 4
  %v4_13204 = call i32 @function_13940(i32 %v1_131f4, i32 ptrtoint ([8 x i8]* @global_var_16e68.395 to i32), i32 %v0_131f8)
  %v0_1320c = load i32, i32* @r5, align 4
  store i32 %v0_1320c, i32* @global_var_1f924.396, align 4
  %v0_13210 = load i32, i32* @r7, align 4
  %v1_13210 = trunc i32 %v0_13210 to i8
  store i8 %v1_13210, i8* bitcast (i32* @global_var_1f928.397 to i8*), align 4
  %v0_13214 = load i32, i32* @r6, align 4
  %v1_13214 = trunc i32 %v0_13214 to i8
  store i8 %v1_13214, i8* bitcast (i32* @global_var_1f929.398 to i8*), align 4
  %v1_13218 = call i32 @function_14d30(i32 8)
  store i32 %v1_13218, i32* @r5, align 4
  %v4_13228 = call i32 @function_13940(i32 %v1_13218, i32 ptrtoint ([9 x i8]* @global_var_16e70.400 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1f930.401 to i8*), align 4
  %v0_13238 = load i32, i32* @r5, align 4
  store i32 %v0_13238, i32* @global_var_1f92c.402, align 4
  %v0_1323c = load i32, i32* @r6, align 4
  %v1_1323c = trunc i32 %v0_1323c to i8
  store i8 %v1_1323c, i8* bitcast (i32* @global_var_1f931.403 to i8*), align 4
  %v1_13240 = call i32 @function_14d30(i32 13)
  store i32 %v1_13240, i32* @r5, align 4
  %v3_13250 = call i32 @function_13940(i32 %v1_13240, i32 ptrtoint (i32* @global_var_16e7c.405 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1f938.406 to i8*), align 4
  %v0_13260 = load i32, i32* @r5, align 4
  store i32 %v0_13260, i32* @global_var_1f934.407, align 4
  %v0_13264 = load i32, i32* @r6, align 4
  %v1_13264 = trunc i32 %v0_13264 to i8
  store i8 %v1_13264, i8* bitcast (i32* @global_var_1f939.408 to i8*), align 4
  %v1_13268 = call i32 @function_14d30(i32 10)
  store i32 10, i32* %sl.global-to-local, align 4
  store i32 %v1_13268, i32* @r5, align 4
  %v4_1327c = call i32 @function_13940(i32 %v1_13268, i32 ptrtoint ([11 x i8]* @global_var_16e8c.410 to i32), i32 10)
  %v0_13284 = load i32, i32* @r5, align 4
  store i32 %v0_13284, i32* @global_var_1f93c.411, align 4
  store i8 10, i8* bitcast (i32* @global_var_1f940.412 to i8*), align 4
  %v0_1328c = load i32, i32* @r6, align 4
  %v1_1328c = trunc i32 %v0_1328c to i8
  store i8 %v1_1328c, i8* bitcast (i32* @global_var_1f941.413 to i8*), align 4
  %v1_13290 = call i32 @function_14d30(i32 10)
  %v0_13298 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13290, i32* @r5, align 4
  %v4_132a0 = call i32 @function_13940(i32 %v1_13290, i32 ptrtoint ([11 x i8]* @global_var_16e98.415 to i32), i32 %v0_13298)
  %v0_132a8 = load i32, i32* @r5, align 4
  store i32 %v0_132a8, i32* @global_var_1f944.416, align 4
  %v1_132ac = trunc i32 %v0_13298 to i8
  store i8 %v1_132ac, i8* bitcast (i32* @global_var_1f948.417 to i8*), align 4
  %v0_132b0 = load i32, i32* @r6, align 4
  %v1_132b0 = trunc i32 %v0_132b0 to i8
  store i8 %v1_132b0, i8* bitcast (i32* @global_var_1f949.418 to i8*), align 4
  %v1_132b4 = call i32 @function_14d30(i32 33)
  store i32 %v1_132b4, i32* @r5, align 4
  %v3_132c4 = call i32 @function_13940(i32 %v1_132b4, i32 ptrtoint (i32* @global_var_16ea4.420 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1f950.421 to i8*), align 4
  %v0_132d4 = load i32, i32* @r5, align 4
  store i32 %v0_132d4, i32* @global_var_1f94c.422, align 4
  %v0_132d8 = load i32, i32* @r6, align 4
  %v1_132d8 = trunc i32 %v0_132d8 to i8
  store i8 %v1_132d8, i8* bitcast (i32* @global_var_1f951.423 to i8*), align 4
  %v1_132dc = call i32 @function_14d30(i32 8)
  store i32 %v1_132dc, i32* @r5, align 4
  %v4_132ec = call i32 @function_13940(i32 %v1_132dc, i32 ptrtoint ([9 x i8]* @global_var_16ec8.425 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1f958.426 to i8*), align 4
  %v0_132fc = load i32, i32* @r5, align 4
  store i32 %v0_132fc, i32* @global_var_1f954.427, align 4
  %v0_13300 = load i32, i32* @r6, align 4
  %v1_13300 = trunc i32 %v0_13300 to i8
  store i8 %v1_13300, i8* bitcast (i32* @global_var_1f959.428 to i8*), align 4
  %v1_13304 = call i32 @function_14d30(i32 11)
  store i32 %v1_13304, i32* @r5, align 4
  %v4_13314 = call i32 @function_13940(i32 %v1_13304, i32 ptrtoint ([12 x i8]* @global_var_16ed4.430 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1f960.431 to i8*), align 4
  %v0_13324 = load i32, i32* @r5, align 4
  store i32 %v0_13324, i32* @global_var_1f95c.432, align 4
  %v0_13328 = load i32, i32* @r6, align 4
  %v1_13328 = trunc i32 %v0_13328 to i8
  store i8 %v1_13328, i8* bitcast (i32* @global_var_1f961.433 to i8*), align 4
  %v1_1332c = call i32 @function_14d30(i32 6)
  store i32 %v1_1332c, i32* @r5, align 4
  %v4_1333c = call i32 @function_13940(i32 %v1_1332c, i32 ptrtoint ([7 x i8]* @global_var_16ee0.435 to i32), i32 6)
  %v0_13344 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1f978.436 to i8*), align 4
  %v0_1334c = load i32, i32* @r5, align 4
  store i32 %v0_1334c, i32* @global_var_1f974.437, align 4
  %v0_13350 = load i32, i32* @r6, align 4
  %v1_13350 = trunc i32 %v0_13350 to i8
  store i8 %v1_13350, i8* bitcast (i32* @global_var_1f979.438 to i8*), align 4
  %v1_13354 = call i32 @function_14d30(i32 %v0_13344)
  %v0_13358 = load i32, i32* @r7, align 4
  store i32 %v1_13354, i32* @r5, align 4
  %v4_13364 = call i32 @function_13940(i32 %v1_13354, i32 ptrtoint ([8 x i8]* @global_var_16ee8.440 to i32), i32 %v0_13358)
  %v0_13368 = load i32, i32* @r7, align 4
  %v0_1336c = load i32, i32* @r5, align 4
  store i32 %v0_1336c, i32* @global_var_1f97c.441, align 4
  %v1_13370 = trunc i32 %v0_13368 to i8
  store i8 %v1_13370, i8* bitcast (i32* @global_var_1f980.442 to i8*), align 4
  %v0_13374 = load i32, i32* @r6, align 4
  %v1_13374 = trunc i32 %v0_13374 to i8
  store i8 %v1_13374, i8* bitcast (i32* @global_var_1f981.443 to i8*), align 4
  %v1_13378 = call i32 @function_14d30(i32 %v0_13368)
  %v0_1337c = load i32, i32* @r7, align 4
  store i32 %v1_13378, i32* @r5, align 4
  %v4_13388 = call i32 @function_13940(i32 %v1_13378, i32 ptrtoint ([8 x i8]* @global_var_16ef0.445 to i32), i32 %v0_1337c)
  %v0_13390 = load i32, i32* @r5, align 4
  store i32 %v0_13390, i32* @global_var_1f984.446, align 4
  %v0_13394 = load i32, i32* @r7, align 4
  %v1_13394 = trunc i32 %v0_13394 to i8
  store i8 %v1_13394, i8* bitcast (i32* @global_var_1f988.447 to i8*), align 4
  %v0_13398 = load i32, i32* @r6, align 4
  %v1_13398 = trunc i32 %v0_13398 to i8
  store i8 %v1_13398, i8* bitcast (i32* @global_var_1f989.448 to i8*), align 4
  %v1_1339c = call i32 @function_14d30(i32 3)
  store i32 %v1_1339c, i32* @r5, align 4
  %v4_133ac = call i32 @function_13940(i32 %v1_1339c, i32 ptrtoint ([4 x i8]* @global_var_16ef8.450 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1f990.451 to i8*), align 4
  %v0_133bc = load i32, i32* @r5, align 4
  store i32 %v0_133bc, i32* @global_var_1f98c.452, align 4
  %v0_133c0 = load i32, i32* @r6, align 4
  %v1_133c0 = trunc i32 %v0_133c0 to i8
  store i8 %v1_133c0, i8* bitcast (i32* @global_var_1f991.453 to i8*), align 4
  %v1_133c4 = call i32 @function_14d30(i32 19)
  store i32 %v1_133c4, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_133d8 = call i32 @function_13940(i32 %v1_133c4, i32 ptrtoint (i32* @global_var_16efc.455 to i32), i32 19)
  %v0_133e0 = load i32, i32* @r5, align 4
  store i32 %v0_133e0, i32* @global_var_1f994.456, align 4
  store i8 19, i8* bitcast (i32* @global_var_1f998.457 to i8*), align 4
  %v0_133e8 = load i32, i32* @r6, align 4
  %v1_133e8 = trunc i32 %v0_133e8 to i8
  store i8 %v1_133e8, i8* bitcast (i32* @global_var_1f999.458 to i8*), align 4
  %v1_133ec = call i32 @function_14d30(i32 24)
  store i32 %v1_133ec, i32* @r5, align 4
  %v3_133fc = call i32 @function_13940(i32 %v1_133ec, i32 ptrtoint (i32* @global_var_16f10.460 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1f9a0.461 to i8*), align 4
  %v0_1340c = load i32, i32* @r5, align 4
  store i32 %v0_1340c, i32* @global_var_1f99c.462, align 4
  %v0_13410 = load i32, i32* @r6, align 4
  %v1_13410 = trunc i32 %v0_13410 to i8
  store i8 %v1_13410, i8* bitcast (i32* @global_var_1f9a1.463 to i8*), align 4
  %v1_13414 = call i32 @function_14d30(i32 9)
  %v0_13420 = load i32, i32* @r7, align 4
  %v1_13420 = add i32 %v0_13420, 2
  store i32 %v1_13420, i32* @r7, align 4
  store i32 %v1_13414, i32* @r5, align 4
  %v4_13428 = call i32 @function_13940(i32 %v1_13414, i32 ptrtoint ([10 x i8]* @global_var_16f2c.465 to i32), i32 9)
  %v0_13430 = load i32, i32* @r5, align 4
  store i32 %v0_13430, i32* @global_var_1f9a4.466, align 4
  %v0_13434 = load i32, i32* @r7, align 4
  %v1_13434 = trunc i32 %v0_13434 to i8
  store i8 %v1_13434, i8* bitcast (i32* @global_var_1f9a8.467 to i8*), align 4
  %v0_13438 = load i32, i32* @r6, align 4
  %v1_13438 = trunc i32 %v0_13438 to i8
  store i8 %v1_13438, i8* bitcast (i32* @global_var_1f9a9.468 to i8*), align 4
  %v1_1343c = call i32 @function_14d30(i32 16)
  store i32 %v1_1343c, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_13450 = call i32 @function_13940(i32 %v1_1343c, i32 ptrtoint (i32* @global_var_16f38.470 to i32), i32 16)
  %v0_13458 = load i32, i32* @r5, align 4
  store i32 %v0_13458, i32* @global_var_1f9ac.471, align 4
  store i8 16, i8* bitcast (i32* @global_var_1f9b0.472 to i8*), align 4
  %v0_13460 = load i32, i32* @r6, align 4
  %v1_13460 = trunc i32 %v0_13460 to i8
  store i8 %v1_13460, i8* bitcast (i32* @global_var_1f9b1.473 to i8*), align 4
  %v1_13464 = call i32 @function_14d30(i32 22)
  store i32 %v1_13464, i32* @r5, align 4
  %v3_13474 = call i32 @function_13940(i32 %v1_13464, i32 ptrtoint (i32* @global_var_16f4c.475 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1f9b8.476 to i8*), align 4
  %v0_13484 = load i32, i32* @r5, align 4
  store i32 %v0_13484, i32* @global_var_1f9b4.477, align 4
  %v0_13488 = load i32, i32* @r6, align 4
  %v1_13488 = trunc i32 %v0_13488 to i8
  store i8 %v1_13488, i8* bitcast (i32* @global_var_1f9b9.478 to i8*), align 4
  %v1_1348c = call i32 @function_14d30(i32 21)
  store i32 %v1_1348c, i32* @r5, align 4
  %v3_1349c = call i32 @function_13940(i32 %v1_1348c, i32 ptrtoint (i32* @global_var_16f64.480 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1f9c0.481 to i8*), align 4
  %v0_134ac = load i32, i32* @r5, align 4
  store i32 %v0_134ac, i32* @global_var_1f9bc.482, align 4
  %v0_134b0 = load i32, i32* @r6, align 4
  %v1_134b0 = trunc i32 %v0_134b0 to i8
  store i8 %v1_134b0, i8* bitcast (i32* @global_var_1f9c1.483 to i8*), align 4
  %v1_134b4 = call i32 @function_14d30(i32 17)
  store i32 %v1_134b4, i32* @r5, align 4
  %v4_134c4 = call i32 @function_13940(i32 %v1_134b4, i32 ptrtoint ([18 x i8]* @global_var_16f7c.485 to i32), i32 17)
  %v0_134cc = load i32, i32* %r8.global-to-local, align 4
  store i8 17, i8* bitcast (i32* @global_var_1f9c8.486 to i8*), align 4
  %v0_134d4 = load i32, i32* @r5, align 4
  store i32 %v0_134d4, i32* @global_var_1f9c4.487, align 4
  %v0_134d8 = load i32, i32* @r6, align 4
  %v1_134d8 = trunc i32 %v0_134d8 to i8
  store i8 %v1_134d8, i8* bitcast (i32* @global_var_1f9c9.488 to i8*), align 4
  %v1_134dc = call i32 @function_14d30(i32 %v0_134cc)
  %v0_134e4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_134dc, i32* @r5, align 4
  %v3_134ec = call i32 @function_13940(i32 %v1_134dc, i32 ptrtoint (i32* @global_var_16f90.490 to i32), i32 %v0_134e4)
  %v0_134f4 = load i32, i32* @r5, align 4
  store i32 %v0_134f4, i32* @global_var_1f9cc.491, align 4
  %v1_134f8 = trunc i32 %v0_134e4 to i8
  store i8 %v1_134f8, i8* bitcast (i32* @global_var_1f9d0.492 to i8*), align 4
  %v0_134fc = load i32, i32* @r6, align 4
  %v1_134fc = trunc i32 %v0_134fc to i8
  store i8 %v1_134fc, i8* bitcast (i32* @global_var_1f9d1.493 to i8*), align 4
  %v1_13500 = call i32 @function_14d30(i32 23)
  store i32 %v1_13500, i32* @r5, align 4
  %v3_13510 = call i32 @function_13940(i32 %v1_13500, i32 ptrtoint (i32* @global_var_16fa0.495 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f9d8.496 to i8*), align 4
  %v0_13520 = load i32, i32* @r5, align 4
  store i32 %v0_13520, i32* @global_var_1f9d4.497, align 4
  %v0_13524 = load i32, i32* @r6, align 4
  %v1_13524 = trunc i32 %v0_13524 to i8
  store i8 %v1_13524, i8* bitcast (i32* @global_var_1f9d9.498 to i8*), align 4
  %v1_13528 = call i32 @function_14d30(i32 83)
  store i32 %v1_13528, i32* @r5, align 4
  %v3_13538 = call i32 @function_13940(i32 %v1_13528, i32 ptrtoint (i32* @global_var_16fb8.500 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1f9e0.501 to i8*), align 4
  %v0_13548 = load i32, i32* @r5, align 4
  store i32 %v0_13548, i32* @global_var_1f9dc.502, align 4
  %v0_1354c = load i32, i32* @r6, align 4
  %v1_1354c = trunc i32 %v0_1354c to i8
  store i8 %v1_1354c, i8* bitcast (i32* @global_var_1f9e1.503 to i8*), align 4
  %v1_13550 = call i32 @function_14d30(i32 32)
  store i32 %v1_13550, i32* @r5, align 4
  %v3_13560 = call i32 @function_13940(i32 %v1_13550, i32 ptrtoint (i32* @global_var_1700c.505 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1f9e8.506 to i8*), align 4
  %v0_13570 = load i32, i32* @r5, align 4
  store i32 %v0_13570, i32* @global_var_1f9e4.507, align 4
  %v0_13574 = load i32, i32* @r6, align 4
  %v1_13574 = trunc i32 %v0_13574 to i8
  store i8 %v1_13574, i8* bitcast (i32* @global_var_1f9e9.508 to i8*), align 4
  %v1_13578 = call i32 @function_14d30(i32 48)
  store i32 %v1_13578, i32* @r5, align 4
  %v3_13588 = call i32 @function_13940(i32 %v1_13578, i32 ptrtoint (i32* @global_var_17030.510 to i32), i32 48)
  %v0_13590 = load i32, i32* %r8.global-to-local, align 4
  store i8 48, i8* bitcast (i32* @global_var_1f9f0.511 to i8*), align 4
  %v0_13598 = load i32, i32* @r5, align 4
  store i32 %v0_13598, i32* @global_var_1f9ec.512, align 4
  %v0_1359c = load i32, i32* @r6, align 4
  %v1_1359c = trunc i32 %v0_1359c to i8
  store i8 %v1_1359c, i8* bitcast (i32* @global_var_1f9f1.513 to i8*), align 4
  %v1_135a0 = call i32 @function_14d30(i32 %v0_13590)
  %v0_135a8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_135a0, i32* @r5, align 4
  %v3_135b0 = call i32 @function_13940(i32 %v1_135a0, i32 ptrtoint (i32* @global_var_17064.515 to i32), i32 %v0_135a8)
  %v0_135b4 = load i32, i32* @r7, align 4
  %v0_135b8 = load i32, i32* @r5, align 4
  store i32 %v0_135b8, i32* @global_var_1f9f4.516, align 4
  %v1_135bc = trunc i32 %v0_135a8 to i8
  store i8 %v1_135bc, i8* bitcast (i32* @global_var_1f9f8.517 to i8*), align 4
  %v0_135c0 = load i32, i32* @r6, align 4
  %v1_135c0 = trunc i32 %v0_135c0 to i8
  store i8 %v1_135c0, i8* bitcast (i32* @global_var_1f9f9.518 to i8*), align 4
  %v1_135c4 = call i32 @function_14d30(i32 %v0_135b4)
  %v0_135c8 = load i32, i32* @r7, align 4
  store i32 %v1_135c4, i32* @r5, align 4
  %v3_135d4 = call i32 @function_13940(i32 %v1_135c4, i32 ptrtoint (i32* @global_var_17074.520 to i32), i32 %v0_135c8)
  %v0_135d8 = load i32, i32* %sl.global-to-local, align 4
  %v0_135dc = load i32, i32* @r5, align 4
  store i32 %v0_135dc, i32* @global_var_1f9fc.521, align 4
  %v0_135e0 = load i32, i32* @r7, align 4
  %v1_135e0 = trunc i32 %v0_135e0 to i8
  store i8 %v1_135e0, i8* bitcast (i32* @global_var_1fa00.522 to i8*), align 4
  %v0_135e4 = load i32, i32* @r6, align 4
  %v1_135e4 = trunc i32 %v0_135e4 to i8
  store i8 %v1_135e4, i8* bitcast (i32* @global_var_1fa01.523 to i8*), align 4
  %v1_135e8 = call i32 @function_14d30(i32 %v0_135d8)
  %v0_135f0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_135e8, i32* @r5, align 4
  %v3_135f8 = call i32 @function_13940(i32 %v1_135e8, i32 ptrtoint (i32* @global_var_17080.525 to i32), i32 %v0_135f0)
  %v0_135fc = load i32, i32* %r8.global-to-local, align 4
  %v0_13600 = load i32, i32* @r5, align 4
  store i32 %v0_13600, i32* @global_var_1fa04.526, align 4
  %v1_13604 = trunc i32 %v0_135f0 to i8
  store i8 %v1_13604, i8* bitcast (i32* @global_var_1fa08.527 to i8*), align 4
  %v0_13608 = load i32, i32* @r6, align 4
  %v1_13608 = trunc i32 %v0_13608 to i8
  store i8 %v1_13608, i8* bitcast (i32* @global_var_1fa09.528 to i8*), align 4
  %v1_1360c = call i32 @function_14d30(i32 %v0_135fc)
  %v0_13614 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1360c, i32* @r5, align 4
  %v3_1361c = call i32 @function_13940(i32 %v1_1360c, i32 ptrtoint (i32* @global_var_1708c.530 to i32), i32 %v0_13614)
  %v0_13620 = load i32, i32* %fp.global-to-local, align 4
  %v0_13624 = load i32, i32* @r5, align 4
  store i32 %v0_13624, i32* @global_var_1fa0c.531, align 4
  %v1_13628 = trunc i32 %v0_13614 to i8
  store i8 %v1_13628, i8* bitcast (i32* @global_var_1fa10.532 to i8*), align 4
  %v0_1362c = load i32, i32* @r6, align 4
  %v1_1362c = trunc i32 %v0_1362c to i8
  store i8 %v1_1362c, i8* bitcast (i32* @global_var_1fa11.533 to i8*), align 4
  %v1_13630 = call i32 @function_14d30(i32 %v0_13620)
  %v0_13638 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_13630, i32* @r5, align 4
  %v3_13640 = call i32 @function_13940(i32 %v1_13630, i32 ptrtoint (i32* @global_var_1709c.535 to i32), i32 %v0_13638)
  %v0_13644 = load i32, i32* %sb.global-to-local, align 4
  %v0_13648 = load i32, i32* @r5, align 4
  store i32 %v0_13648, i32* @global_var_1fa14.536, align 4
  %v1_1364c = trunc i32 %v0_13638 to i8
  store i8 %v1_1364c, i8* bitcast (i32* @global_var_1fa18.537 to i8*), align 4
  %v0_13650 = load i32, i32* @r6, align 4
  %v1_13650 = trunc i32 %v0_13650 to i8
  store i8 %v1_13650, i8* bitcast (i32* @global_var_1fa19.538 to i8*), align 4
  %v1_13654 = call i32 @function_14d30(i32 %v0_13644)
  %v0_1365c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_13654, i32* @r5, align 4
  %v3_13664 = call i32 @function_13940(i32 %v1_13654, i32 ptrtoint (i32* @global_var_170b0.540 to i32), i32 %v0_1365c)
  %v0_1366c = load i32, i32* @r5, align 4
  store i32 %v0_1366c, i32* @global_var_1fa1c.541, align 4
  %v1_13670 = trunc i32 %v0_1365c to i8
  store i8 %v1_13670, i8* bitcast (i32* @global_var_1fa20.542 to i8*), align 4
  %v0_13674 = load i32, i32* @r6, align 4
  %v1_13674 = trunc i32 %v0_13674 to i8
  store i8 %v1_13674, i8* bitcast (i32* @global_var_1fa21.543 to i8*), align 4
  %v1_13678 = call i32 @function_14d30(i32 8)
  store i32 %v1_13678, i32* @r5, align 4
  %v4_13688 = call i32 @function_13940(i32 %v1_13678, i32 ptrtoint ([9 x i8]* @global_var_170c4.545 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1fa28.546 to i8*), align 4
  %v0_13698 = load i32, i32* @r5, align 4
  store i32 %v0_13698, i32* @global_var_1fa24.547, align 4
  %v0_1369c = load i32, i32* @r6, align 4
  %v1_1369c = trunc i32 %v0_1369c to i8
  store i8 %v1_1369c, i8* bitcast (i32* @global_var_1fa29.548 to i8*), align 4
  %v1_136a0 = call i32 @function_14d30(i32 11)
  store i32 %v1_136a0, i32* @r5, align 4
  %v3_136b0 = call i32 @function_13940(i32 %v1_136a0, i32 ptrtoint (i32* @global_var_16fac.550 to i32), i32 11)
  %v0_136b8 = load i32, i32* %r8.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1fa30.551 to i8*), align 4
  %v0_136c0 = load i32, i32* @r5, align 4
  store i32 %v0_136c0, i32* @global_var_1fa2c.552, align 4
  %v0_136c4 = load i32, i32* @r6, align 4
  %v1_136c4 = trunc i32 %v0_136c4 to i8
  store i8 %v1_136c4, i8* bitcast (i32* @global_var_1fa31.553 to i8*), align 4
  %v1_136c8 = call i32 @function_14d30(i32 %v0_136b8)
  %v0_136d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_136c8, i32* @r5, align 4
  %v3_136d8 = call i32 @function_13940(i32 %v1_136c8, i32 ptrtoint (i32* @global_var_170d0.555 to i32), i32 %v0_136d0)
  %v0_136e0 = load i32, i32* @r5, align 4
  store i32 %v0_136e0, i32* @global_var_1fa34.556, align 4
  %v1_136e4 = trunc i32 %v0_136d0 to i8
  store i8 %v1_136e4, i8* bitcast (i32* @global_var_1fa38.557 to i8*), align 4
  %v0_136e8 = load i32, i32* @r6, align 4
  %v1_136e8 = trunc i32 %v0_136e8 to i8
  store i8 %v1_136e8, i8* bitcast (i32* @global_var_1fa39.558 to i8*), align 4
  %v1_136ec = call i32 @function_14d30(i32 18)
  store i32 %v1_136ec, i32* @r5, align 4
  %v3_136fc = call i32 @function_13940(i32 %v1_136ec, i32 ptrtoint (i32* @global_var_170e0.560 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1fa40.561 to i8*), align 4
  %v0_1370c = load i32, i32* @r5, align 4
  store i32 %v0_1370c, i32* @global_var_1fa3c.562, align 4
  %v0_13710 = load i32, i32* @r6, align 4
  %v1_13710 = trunc i32 %v0_13710 to i8
  store i8 %v1_13710, i8* bitcast (i32* @global_var_1fa41.563 to i8*), align 4
  %v1_13714 = call i32 @function_14d30(i32 25)
  store i32 %v1_13714, i32* @r5, align 4
  %v3_13724 = call i32 @function_13940(i32 %v1_13714, i32 ptrtoint (i32* @global_var_170f4.565 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1fa48.566 to i8*), align 4
  %v0_13734 = load i32, i32* @r5, align 4
  store i32 %v0_13734, i32* @global_var_1fa44.567, align 4
  %v0_13738 = load i32, i32* @r6, align 4
  %v1_13738 = trunc i32 %v0_13738 to i8
  store i8 %v1_13738, i8* bitcast (i32* @global_var_1fa49.568 to i8*), align 4
  %v1_1373c = call i32 @function_14d30(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_1373c, i32* @r7, align 4
  %v3_13750 = call i32 @function_13940(i32 %v1_1373c, i32 ptrtoint (i32* @global_var_17110.570 to i32), i32 111)
  %v0_13754 = load i32, i32* @r5, align 4
  %v0_13758 = load i32, i32* @r7, align 4
  store i32 %v0_13758, i32* @global_var_1fa4c.571, align 4
  %v1_1375c = trunc i32 %v0_13754 to i8
  store i8 %v1_1375c, i8* bitcast (i32* @global_var_1fa50.572 to i8*), align 4
  %v0_13760 = load i32, i32* @r6, align 4
  %v1_13760 = trunc i32 %v0_13760 to i8
  store i8 %v1_13760, i8* bitcast (i32* @global_var_1fa51.573 to i8*), align 4
  %v1_13764 = call i32 @function_14d30(i32 %v0_13754)
  %v0_13768 = load i32, i32* @r5, align 4
  store i32 %v1_13764, i32* @r7, align 4
  %v3_13774 = call i32 @function_13940(i32 %v1_13764, i32 ptrtoint (i32* @global_var_17180.575 to i32), i32 %v0_13768)
  %v0_1377c = load i32, i32* @r7, align 4
  store i32 %v0_1377c, i32* @global_var_1fa54.576, align 4
  %v0_13780 = load i32, i32* @r5, align 4
  %v1_13780 = trunc i32 %v0_13780 to i8
  store i8 %v1_13780, i8* bitcast (i32* @global_var_1fa58.577 to i8*), align 4
  %v0_13784 = load i32, i32* @r6, align 4
  %v1_13784 = trunc i32 %v0_13784 to i8
  store i8 %v1_13784, i8* bitcast (i32* @global_var_1fa59.578 to i8*), align 4
  %v1_13788 = call i32 @function_14d30(i32 110)
  %v0_1378c = load i32, i32* @r5, align 4
  %v1_1378c = add i32 %v0_1378c, -1
  store i32 %v1_1378c, i32* @r5, align 4
  store i32 %v1_13788, i32* @r7, align 4
  %v3_1379c = call i32 @function_13940(i32 %v1_13788, i32 ptrtoint (i32* @global_var_171f0.580 to i32), i32 %v1_1378c)
  %v0_137a0 = load i32, i32* @r5, align 4
  %v0_137a4 = load i32, i32* @r7, align 4
  store i32 %v0_137a4, i32* @global_var_1fa5c.581, align 4
  %v1_137a8 = trunc i32 %v0_137a0 to i8
  store i8 %v1_137a8, i8* bitcast (i32* @global_var_1fa60.582 to i8*), align 4
  %v0_137ac = load i32, i32* @r6, align 4
  %v1_137ac = trunc i32 %v0_137ac to i8
  store i8 %v1_137ac, i8* bitcast (i32* @global_var_1fa61.583 to i8*), align 4
  %v1_137b0 = call i32 @function_14d30(i32 %v0_137a0)
  %v0_137b4 = load i32, i32* @r5, align 4
  store i32 %v1_137b0, i32* @r7, align 4
  %v3_137c0 = call i32 @function_13940(i32 %v1_137b0, i32 ptrtoint (i32* @global_var_17260.585 to i32), i32 %v0_137b4)
  %v0_137c8 = load i32, i32* @r5, align 4
  %v1_137c8 = trunc i32 %v0_137c8 to i8
  store i8 %v1_137c8, i8* bitcast (i32* @global_var_1fa68.586 to i8*), align 4
  %v0_137cc = load i32, i32* @r7, align 4
  store i32 %v0_137cc, i32* @global_var_1fa64.587, align 4
  %v0_137d0 = load i32, i32* @r6, align 4
  %v1_137d0 = trunc i32 %v0_137d0 to i8
  store i8 %v1_137d0, i8* bitcast (i32* @global_var_1fa69.588 to i8*), align 4
  %v1_137d4 = call i32 @function_14d30(i32 117)
  %v3_137e4 = call i32 @function_13940(i32 %v1_137d4, i32 ptrtoint (i32* @global_var_172d0.590 to i32), i32 117)
  %v0_137ec = load i32, i32* @r6, align 4
  %v1_137ec = trunc i32 %v0_137ec to i8
  store i8 %v1_137ec, i8* bitcast (i32* @global_var_1fa71.591 to i8*), align 4
  store i32 %v1_137d4, i32* @global_var_1fa6c.592, align 4
  store i8 117, i8* bitcast (i32* @global_var_1fa70.593 to i8*), align 4
  ret i32 %v3_137e4

; uselistorder directives
  uselistorder i32 %v1_137b0, { 1, 0 }
  uselistorder i32 %v1_13788, { 1, 0 }
  uselistorder i32 %v1_13764, { 1, 0 }
  uselistorder i32 %v1_1373c, { 1, 0 }
  uselistorder i32 %v1_136c8, { 1, 0 }
  uselistorder i32 %v1_13654, { 1, 0 }
  uselistorder i32 %v1_13630, { 1, 0 }
  uselistorder i32 %v1_1360c, { 1, 0 }
  uselistorder i32 %v1_135e8, { 1, 0 }
  uselistorder i32 %v1_135c4, { 1, 0 }
  uselistorder i32 %v1_135a0, { 1, 0 }
  uselistorder i32 %v1_134dc, { 1, 0 }
  uselistorder i32 %v1_13414, { 1, 0 }
  uselistorder i32 %v1_13378, { 1, 0 }
  uselistorder i32 %v1_13354, { 1, 0 }
  uselistorder i32 %v1_13290, { 1, 0 }
  uselistorder i32 %v1_13268, { 1, 0 }
  uselistorder i32 %v1_131f4, { 1, 0 }
  uselistorder i32 %v1_13154, { 1, 0 }
  uselistorder i32 %v1_130e0, { 1, 0 }
  uselistorder i32 %v1_130bc, { 1, 0 }
  uselistorder i32 %v1_13094, { 1, 0 }
  uselistorder i32 %v1_13060, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 23, { 1, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 8, 9, 5, 10, 0, 11, 12, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 3, 4, 5, 2, 0, 1 }
  uselistorder i8 5, { 13, 14, 0, 1, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 10 }
  uselistorder i32 (i32, i32, i32)* @function_13940, { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1f8d4.339 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_138c4(i8* %arg1) local_unnamed_addr {
dec_label_pc_138c4:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_138c8 = load i8, i8* %arg1, align 1
  %v4_138c8 = zext i8 %v3_138c8 to i32
  %v2_138cc = icmp eq i8 %v3_138c8, 0
  br i1 %v2_138cc, label %dec_label_pc_138e8, label %bb

dec_label_pc_138e8:                               ; preds = %dec_label_pc_138d8, %dec_label_pc_138c4
  %merge = phi i32 [ %v4_138c8, %dec_label_pc_138c4 ], [ %v1_138d8, %dec_label_pc_138d8 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_138c4
  br label %dec_label_pc_138d8

dec_label_pc_138d8:                               ; preds = %dec_label_pc_138d8, %bb
  %v0_138d8 = phi i32 [ %v1_138d8, %dec_label_pc_138d8 ], [ 0, %bb ]
  %v1_138d8 = add i32 %v0_138d8, 1
  %v2_138dc = add i32 %v1_138d8, %tmp
  %v3_138dc = inttoptr i32 %v2_138dc to i8*
  %v4_138dc = load i8, i8* %v3_138dc, align 1
  %v2_138e0 = icmp eq i8 %v4_138dc, 0
  br i1 %v2_138e0, label %dec_label_pc_138e8, label %dec_label_pc_138d8

; uselistorder directives
  uselistorder i32 %v1_138d8, { 1, 0, 2 }
}

define i32 @function_138ec(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_138ec:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_138ec = load i8, i8* %arg1, align 1
  %v3_138ec = zext i8 %v2_138ec to i32
  %v2_138f0 = icmp eq i8 %v2_138ec, 0
  br i1 %v2_138f0, label %dec_label_pc_13934, label %dec_label_pc_138f8

dec_label_pc_138f8:                               ; preds = %dec_label_pc_138ec
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_138fc

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138fc, %dec_label_pc_138f8
  %v0_138fc = phi i32 [ %v1_138fc, %dec_label_pc_138fc ], [ 0, %dec_label_pc_138f8 ]
  %v1_138fc = add i32 %v0_138fc, 1
  store i32 %v1_138fc, i32* %ip.global-to-local, align 4
  %v2_13900 = add i32 %v1_138fc, %tmp
  %v3_13900 = inttoptr i32 %v2_13900 to i8*
  %v4_13900 = load i8, i8* %v3_13900, align 1
  %v2_13904 = icmp eq i8 %v4_13900, 0
  br i1 %v2_13904, label %dec_label_pc_1390c, label %dec_label_pc_138fc

dec_label_pc_1390c:                               ; preds = %dec_label_pc_138fc
  %v7_1390c = icmp eq i32 %v0_138fc, -2
  br i1 %v7_1390c, label %dec_label_pc_1392c, label %dec_label_pc_13918.preheader

dec_label_pc_13918.preheader:                     ; preds = %dec_label_pc_1390c, %dec_label_pc_13934
  %storemerge = phi i32 [ %v3_138ec, %dec_label_pc_13934 ], [ %v1_138fc, %dec_label_pc_1390c ]
  %v2_13924.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13918

dec_label_pc_13918:                               ; preds = %dec_label_pc_13918.dec_label_pc_13918_crit_edge, %dec_label_pc_13918.preheader
  %v2_13924 = phi i32 [ %v5_13924, %dec_label_pc_13918.dec_label_pc_13918_crit_edge ], [ %v2_13924.pre, %dec_label_pc_13918.preheader ]
  %v0_1391c = phi i32 [ %v0_1391c.pre, %dec_label_pc_13918.dec_label_pc_13918_crit_edge ], [ %tmp, %dec_label_pc_13918.preheader ]
  %v0_13918 = phi i32 [ %v0_13918.pre, %dec_label_pc_13918.dec_label_pc_13918_crit_edge ], [ %storemerge, %dec_label_pc_13918.preheader ]
  %v1_13918 = add i32 %v0_13918, -1
  store i32 %v1_13918, i32* @r2, align 4
  %v1_1391c = inttoptr i32 %v0_1391c to i8*
  %v2_1391c = load i8, i8* %v1_1391c, align 1
  %v5_1391c = add i32 %v0_1391c, 1
  store i32 %v5_1391c, i32* %r1.global-to-local, align 4
  %v3_13920 = icmp eq i32 %v0_13918, 0
  %v3_13924 = inttoptr i32 %v2_13924 to i8*
  store i8 %v2_1391c, i8* %v3_13924, align 1
  %v4_13924 = load i32, i32* @r0, align 4
  %v5_13924 = add i32 %v4_13924, 1
  store i32 %v5_13924, i32* @r0, align 4
  br i1 %v3_13920, label %dec_label_pc_1392c.loopexit, label %dec_label_pc_13918.dec_label_pc_13918_crit_edge

dec_label_pc_13918.dec_label_pc_13918_crit_edge:  ; preds = %dec_label_pc_13918
  %v0_13918.pre = load i32, i32* @r2, align 4
  %v0_1391c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13918

dec_label_pc_1392c.loopexit:                      ; preds = %dec_label_pc_13918
  %v0_1392c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_1392c.loopexit, %dec_label_pc_1390c
  %v0_1392c = phi i32 [ %v0_1392c.pre, %dec_label_pc_1392c.loopexit ], [ %v1_138fc, %dec_label_pc_1390c ]
  ret i32 %v0_1392c

dec_label_pc_13934:                               ; preds = %dec_label_pc_138ec
  store i32 %v3_138ec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13918.preheader

; uselistorder directives
  uselistorder i32 %v5_13924, { 1, 0 }
  uselistorder i32 %v0_1391c, { 1, 0 }
  uselistorder i32 %v1_138fc, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_138ec, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13918.preheader, { 1, 0 }
}

define i32 @function_13940(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13940:
  %ip.global-to-local = alloca i32, align 4
  %v2_13940 = icmp eq i32 %arg3, 0
  br i1 %v2_13940, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_1394c, %dec_label_pc_13940
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_13940
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1394c

dec_label_pc_1394c:                               ; preds = %dec_label_pc_1394c, %bb
  %v0_1394c = phi i32 [ %v1_13954, %dec_label_pc_1394c ], [ 0, %bb ]
  %v2_1394c = add i32 %v0_1394c, %arg2
  %v3_1394c = inttoptr i32 %v2_1394c to i8*
  %v4_1394c = load i8, i8* %v3_1394c, align 1
  %v4_13950 = add i32 %v0_1394c, %arg1
  %v5_13950 = inttoptr i32 %v4_13950 to i8*
  store i8 %v4_1394c, i8* %v5_13950, align 1
  %v0_13954 = load i32, i32* %ip.global-to-local, align 4
  %v1_13954 = add i32 %v0_13954, 1
  store i32 %v1_13954, i32* %ip.global-to-local, align 4
  %v9_13958 = icmp eq i32 %v1_13954, %arg3
  br i1 %v9_13958, label %.loopexit, label %dec_label_pc_1394c

; uselistorder directives
  uselistorder i32 %v1_13954, { 1, 2, 0 }
}

define i32 @function_13964(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13964:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_13964 = icmp eq i32 %arg2, 0
  br i1 %v2_13964, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_13974, %dec_label_pc_13964
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_13964
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13974

dec_label_pc_13974:                               ; preds = %dec_label_pc_13974.dec_label_pc_13974_crit_edge, %bb
  %v2_13974 = phi i32 [ %v1_13978, %dec_label_pc_13974.dec_label_pc_13974_crit_edge ], [ 0, %bb ]
  %v0_13974.off0 = phi i8 [ %extract.t, %dec_label_pc_13974.dec_label_pc_13974_crit_edge ], [ 0, %bb ]
  %v4_13974 = add i32 %v2_13974, %arg1
  %v5_13974 = inttoptr i32 %v4_13974 to i8*
  store i8 %v0_13974.off0, i8* %v5_13974, align 1
  %v0_13978 = load i32, i32* %r3.global-to-local, align 4
  %v1_13978 = add i32 %v0_13978, 1
  store i32 %v1_13978, i32* %r3.global-to-local, align 4
  %v9_1397c = icmp eq i32 %v1_13978, %arg2
  br i1 %v9_1397c, label %.loopexit, label %dec_label_pc_13974.dec_label_pc_13974_crit_edge

dec_label_pc_13974.dec_label_pc_13974_crit_edge:  ; preds = %dec_label_pc_13974
  %v0_13974.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_13974.pre to i8
  br label %dec_label_pc_13974

; uselistorder directives
  uselistorder i32 %v1_13978, { 1, 2, 0 }
}

define i32 @function_13988(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13988:
  store i32 %arg4, i32* @lr, align 4
  %v7_1399c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1399c, label %dec_label_pc_139a0, label %dec_label_pc_139a8

dec_label_pc_139a0:                               ; preds = %dec_label_pc_139bc, %dec_label_pc_13988, %dec_label_pc_139a8
  ret i32 -1

dec_label_pc_139a8:                               ; preds = %dec_label_pc_13988
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_139a0, label %dec_label_pc_139b0

dec_label_pc_139b0:                               ; preds = %dec_label_pc_139a8
  br label %dec_label_pc_139c8

dec_label_pc_139bc:                               ; preds = %dec_label_pc_139e0, %dec_label_pc_139c8
  %v1_139bc = add i32 %v0_139e8, 1
  %v9_139c0 = icmp eq i32 %v1_139bc, %arg2
  br i1 %v9_139c0, label %dec_label_pc_139a0, label %dec_label_pc_139c8

dec_label_pc_139c8:                               ; preds = %dec_label_pc_139bc, %dec_label_pc_139b0
  %v0_139e8 = phi i32 [ %v1_139bc, %dec_label_pc_139bc ], [ 0, %dec_label_pc_139b0 ]
  %v0_139d4 = phi i32 [ %v1_139d4., %dec_label_pc_139bc ], [ 0, %dec_label_pc_139b0 ]
  %v2_139c8 = add i32 %v0_139d4, %arg3
  %v3_139c8 = inttoptr i32 %v2_139c8 to i8*
  %v4_139c8 = load i8, i8* %v3_139c8, align 1
  %v2_139cc = add i32 %v0_139e8, %arg1
  %v3_139cc = inttoptr i32 %v2_139cc to i8*
  %v4_139cc = load i8, i8* %v3_139cc, align 1
  %v9_139d0 = icmp eq i8 %v4_139cc, %v4_139c8
  %v1_139d4 = add i32 %v0_139d4, 1
  %v1_139d4. = select i1 %v9_139d0, i32 %v1_139d4, i32 0
  br i1 %v9_139d0, label %dec_label_pc_139e0, label %dec_label_pc_139bc

dec_label_pc_139e0:                               ; preds = %dec_label_pc_139c8
  %v9_139e0 = icmp eq i32 %v1_139d4., %arg4
  br i1 %v9_139e0, label %dec_label_pc_139e8, label %dec_label_pc_139bc

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139e0
  %v1_139e8 = add i32 %v0_139e8, 1
  ret i32 %v1_139e8

; uselistorder directives
  uselistorder i1 %v9_139d0, { 1, 0 }
  uselistorder i32 %v0_139d4, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_139a0, { 0, 2, 1 }
}

define i32 @function_139f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_139f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_139f0 = load i32, i32* @r4, align 4
  store i32 %v3_139f0, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139fc

dec_label_pc_139fc:                               ; preds = %.thread, %dec_label_pc_13a14, %bb, %dec_label_pc_139f0
  %v0_139fc = phi i32 [ %tmp, %dec_label_pc_139f0 ], [ %v5_139fc, %bb ], [ %v5_139fc, %dec_label_pc_13a14 ], [ %v5_139fc, %.thread ]
  %v1_139fc = inttoptr i32 %v0_139fc to i8*
  %v2_139fc = load i8, i8* %v1_139fc, align 1
  %v3_139fc = zext i8 %v2_139fc to i32
  %v5_139fc = add i32 %v0_139fc, 1
  store i32 %v5_139fc, i32* %r5.global-to-local, align 4
  %v7_13a04 = icmp eq i8 %v2_139fc, 9
  br i1 %v7_13a04, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_139fc
  store i32 %v3_139fc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139fc

bb:                                               ; preds = %dec_label_pc_139fc
  %v8_13a08 = icmp eq i8 %v2_139fc, 32
  store i32 %v3_139fc, i32* %r4.global-to-local, align 4
  br i1 %v8_13a08, label %dec_label_pc_139fc, label %dec_label_pc_13a14

dec_label_pc_13a14:                               ; preds = %bb
  %v7_13a14 = icmp eq i8 %v2_139fc, 10
  br i1 %v7_13a14, label %dec_label_pc_139fc, label %dec_label_pc_13a1c

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_13a14
  %v7_13a1c = icmp eq i8 %v2_139fc, 45
  br i1 %v7_13a1c, label %dec_label_pc_13afc, label %dec_label_pc_13a24

dec_label_pc_13a24:                               ; preds = %dec_label_pc_13a1c
  %v7_13a24 = icmp eq i8 %v2_139fc, 43
  br i1 %v7_13a24, label %bb48, label %dec_label_pc_13a34

bb48:                                             ; preds = %dec_label_pc_13a24
  %v2_13a28 = inttoptr i32 %v5_139fc to i8*
  %v3_13a28 = load i8, i8* %v2_13a28, align 1
  %v4_13a28 = zext i8 %v3_13a28 to i32
  store i32 %v4_13a28, i32* %r4.global-to-local, align 4
  %v6_13a28 = add i32 %v0_139fc, 2
  store i32 %v6_13a28, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a34

dec_label_pc_13a34:                               ; preds = %bb48, %dec_label_pc_13a24, %dec_label_pc_13afc
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_13afc ], [ 2147483647, %dec_label_pc_13a24 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_13afc ], [ 0, %dec_label_pc_13a24 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_13a3c = call i32 @function_13fe0(i32 %storemerge1, i32 %arg2)
  %v0_13a40 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13a40, i32* @r1, align 4
  store i32 %v2_13a3c, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_13a4c = call i32 @function_13ed0()
  store i32 %v0_13a4c, i32* @lr, align 4
  %v0_13a5c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a5c

dec_label_pc_13a5c:                               ; preds = %.thread8, %dec_label_pc_13a34
  %v2_13ad811 = phi i32 [ %v1_13af426, %.thread8 ], [ 0, %dec_label_pc_13a34 ]
  %v1_13ab4 = phi i32 [ %v0_13ae824, %.thread8 ], [ 0, %dec_label_pc_13a34 ]
  %v1_13a9c = phi i32 [ %v3_13ae0, %.thread8 ], [ %v0_13a5c.pre, %dec_label_pc_13a34 ]
  %v1_13a5c = urem i32 %v1_13a9c, 256
  %v1_13a60 = add nsw i32 %v1_13a5c, -48
  %v1_13a68 = add nsw i32 %v1_13a5c, -97
  %v1_13a6c = add i32 %v1_13a9c, -48
  %v1_13a70 = add nsw i32 %v1_13a5c, -65
  %tmp71 = icmp ult i32 %v1_13a60, 10
  br i1 %tmp71, label %dec_label_pc_13aa0, label %dec_label_pc_13a78

dec_label_pc_13a78:                               ; preds = %dec_label_pc_13a5c
  %v2_13a78 = icmp ugt i32 %v1_13a70, 24
  %v7_13a78 = icmp eq i32 %v1_13a70, 25
  %v2_13a7c = xor i1 %v7_13a78, true
  %v3_13a7c = and i1 %v2_13a78, %v2_13a7c
  br i1 %v3_13a7c, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_13a78
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13a78, %bb49
  %v0_13a9020 = phi i32 [ %v1_13a6c, %dec_label_pc_13a78 ], [ 0, %bb49 ]
  %v2_13a80 = xor i1 %v2_13a78, true
  %v3_13a80 = or i1 %v7_13a78, %v2_13a80
  br i1 %v3_13a80, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_13a90 = phi i32 [ %v0_13a9020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_13a7c, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_13a88 = icmp ugt i32 %v1_13a68, 24
  %v11_13a88 = icmp eq i32 %v1_13a68, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_13a8c = phi i1 [ %v7_13a78, %bb52 ], [ %v11_13a88, %bb53 ]
  %v0_13a8c = phi i1 [ %v2_13a78, %bb52 ], [ %v6_13a88, %bb53 ]
  %v2_13a8c = xor i1 %v1_13a8c, true
  %v3_13a8c = and i1 %v0_13a8c, %v2_13a8c
  br i1 %v3_13a8c, label %dec_label_pc_13ae8, label %dec_label_pc_13a90

dec_label_pc_13a90:                               ; preds = %bb54
  %v2_13a90 = icmp eq i32 %v0_13a90, 0
  %. = select i1 %v2_13a90, i32 87, i32 55
  %v2_13a9c = sub i32 %v1_13a9c, %.
  br label %dec_label_pc_13aa0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a5c, %dec_label_pc_13a90
  %v0_13ab434 = phi i32 [ %v1_13a70, %dec_label_pc_13a5c ], [ %., %dec_label_pc_13a90 ]
  %v3_13ad812 = phi i32 [ %v1_13a6c, %dec_label_pc_13a5c ], [ %v2_13a9c, %dec_label_pc_13a90 ]
  %v1_13aa0 = load i32, i32* %r6.global-to-local, align 4
  %v6_13aa4 = icmp slt i32 %v3_13ad812, %v1_13aa0
  br i1 %v6_13aa4, label %dec_label_pc_13aa8, label %dec_label_pc_13ae8

dec_label_pc_13aa8:                               ; preds = %dec_label_pc_13aa0
  %v3_13aa8 = icmp uge i32 %v2_13ad811, %v0_13a4c
  %v9_13aa8 = icmp eq i32 %v2_13ad811, %v0_13a4c
  %v2_13aac = xor i1 %v3_13aa8, true
  %v3_13aac = or i1 %v9_13aa8, %v2_13aac
  br i1 %v3_13aac, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_13aa8
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_13aa8, %bb57
  %v0_13ab433 = phi i32 [ %v0_13ab434, %dec_label_pc_13aa8 ], [ 0, %bb57 ]
  %v2_13ab0 = xor i1 %v9_13aa8, true
  %v3_13ab0 = and i1 %v3_13aa8, %v2_13ab0
  br i1 %v3_13ab0, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_13ab4 = phi i32 [ %v0_13ab433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_13ab4, 0
  %v4_13ab4 = zext i1 %tmp72 to i32
  %v5_13ab4 = or i32 %v0_13ab4, %v4_13ab4
  %v7_13ab4 = icmp eq i32 %v5_13ab4, 0
  br i1 %v7_13ab4, label %dec_label_pc_13ac0, label %.thread8

dec_label_pc_13ac0:                               ; preds = %bb60
  %v1_13acc = load i32, i32* %r8.global-to-local, align 4
  %v7_13ad0 = icmp sgt i32 %v3_13ad812, %v1_13acc
  br i1 %v7_13ad0, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13ac0
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_13ac0
  %v2_13ad4 = icmp eq i1 %v9_13aa8, false
  br i1 %v2_13ad4, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_13ad813 = mul i32 %v1_13aa0, %v2_13ad811
  %v5_13ad814 = add i32 %v4_13ad813, %v3_13ad812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_13af426 = phi i32 [ %v2_13ad811, %bb63 ], [ %v2_13ad811, %bb60 ], [ %v5_13ad814, %bb64 ]
  %v0_13ae824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_13ae0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ae0 = inttoptr i32 %v0_13ae0 to i8*
  %v2_13ae0 = load i8, i8* %v1_13ae0, align 1
  %v3_13ae0 = zext i8 %v2_13ae0 to i32
  store i32 %v3_13ae0, i32* %r4.global-to-local, align 4
  %v5_13ae0 = add i32 %v0_13ae0, 1
  store i32 %v5_13ae0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a5c

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13aa0, %bb54
  %v1_13ae8 = icmp slt i32 %v1_13ab4, 0
  %v0_13b0c = load i32, i32* %sl.global-to-local, align 4
  %v2_13b0c = icmp eq i32 %v0_13b0c, 0
  br i1 %v1_13ae8, label %dec_label_pc_13b0c, label %dec_label_pc_13af0

dec_label_pc_13af0:                               ; preds = %dec_label_pc_13ae8
  br i1 %v2_13b0c, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_13af0
  %v2_13af4 = sub i32 0, %v2_13ad811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_13af0, %bb65
  %v23_13af8 = phi i32 [ %v2_13ad811, %dec_label_pc_13af0 ], [ %v2_13af4, %bb65 ]
  %v2_13af8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13af8, i32* @r4, align 4
  ret i32 %v23_13af8

dec_label_pc_13afc:                               ; preds = %dec_label_pc_13a1c
  %v1_13afc = inttoptr i32 %v5_139fc to i8*
  %v2_13afc = load i8, i8* %v1_13afc, align 1
  %v3_13afc = zext i8 %v2_13afc to i32
  store i32 %v3_13afc, i32* %r4.global-to-local, align 4
  %v5_13afc = add i32 %v0_139fc, 2
  store i32 %v5_13afc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13a34

dec_label_pc_13b0c:                               ; preds = %dec_label_pc_13ae8
  %.70 = select i1 %v2_13b0c, i32 2147483647, i32 -2147483648
  %v2_13b18 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13b18, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_13ae0, { 1, 0 }
  uselistorder i1 %v9_13aa8, { 1, 0, 2 }
  uselistorder i1 %v3_13aa8, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_13a78, { 1, 2, 0 }
  uselistorder i1 %v2_13a78, { 1, 0, 2 }
  uselistorder i32 %v1_13a5c, { 1, 2, 0 }
  uselistorder i32 %v1_13a9c, { 1, 2, 0 }
  uselistorder i32 %v1_13ab4, { 1, 0 }
  uselistorder i32 %v2_13ad811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_13a4c, { 1, 0, 2 }
  uselistorder i32 %v5_139fc, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_139fc, { 1, 0 }
  uselistorder i32 %v0_139fc, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 6, 4, 0, 1, 5, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_13aa0, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_13a34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_139fc, { 1, 2, 0, 3 }
}

define i32 @function_13b1c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13b1c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13b1c = load i32, i32* @r4, align 4
  store i32 %v3_13b1c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13b34

dec_label_pc_13b34:                               ; preds = %dec_label_pc_13b60.dec_label_pc_13b34_crit_edge, %dec_label_pc_13b1c
  %v0_13b38 = phi i32 [ %v0_13b38.pre, %dec_label_pc_13b60.dec_label_pc_13b34_crit_edge ], [ %arg3, %dec_label_pc_13b1c ]
  %v0_13b34 = phi i32 [ %v1_13b4c, %dec_label_pc_13b60.dec_label_pc_13b34_crit_edge ], [ %tmp, %dec_label_pc_13b1c ]
  %tmp12 = inttoptr i32 %v0_13b34 to i32*
  %v5_13b40 = call i32 @function_1444c(i32 %v0_13b38, i32* %tmp12, i32 1)
  %v7_13b44 = icmp eq i32 %v5_13b40, 1
  %v0_13b48 = load i32, i32* @r4, align 4
  %v1_13b4c = add i32 %v0_13b48, 1
  store i32 %v1_13b4c, i32* @r4, align 4
  %v0_13b54 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_13b44, label %dec_label_pc_13b54, label %dec_label_pc_13b6c

dec_label_pc_13b54:                               ; preds = %dec_label_pc_13b34
  %v1_13b54 = add i32 %v0_13b54, 1
  store i32 %v1_13b54, i32* %r5.global-to-local, align 4
  %v0_13b58 = load i32, i32* %r7.global-to-local, align 4
  %v7_13b5c = icmp sgt i32 %v0_13b58, %v1_13b54
  br i1 %v7_13b5c, label %dec_label_pc_13b60, label %dec_label_pc_13b6c

dec_label_pc_13b60:                               ; preds = %dec_label_pc_13b54
  %v1_13b60 = inttoptr i32 %v0_13b48 to i8*
  %v2_13b60 = load i8, i8* %v1_13b60, align 1
  %v7_13b64 = icmp eq i8 %v2_13b60, 10
  br i1 %v7_13b64, label %dec_label_pc_13b6c, label %dec_label_pc_13b60.dec_label_pc_13b34_crit_edge

dec_label_pc_13b60.dec_label_pc_13b34_crit_edge:  ; preds = %dec_label_pc_13b60
  %v0_13b38.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13b34

dec_label_pc_13b6c:                               ; preds = %dec_label_pc_13b34, %dec_label_pc_13b60, %dec_label_pc_13b54
  %v0_13b6c = phi i32 [ %v1_13b54, %dec_label_pc_13b60 ], [ %v1_13b54, %dec_label_pc_13b54 ], [ %v0_13b54, %dec_label_pc_13b34 ]
  %v2_13b6c = icmp eq i32 %v0_13b6c, 0
  %v1_13b70 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_13b6c, i32 0, i32 %v1_13b70
  %v2_13b78 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13b78, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_13b4c, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_1444c, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_13b6c, { 1, 2, 0 }
}

define i32 @function_13b7c() local_unnamed_addr {
dec_label_pc_13b7c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_13b7c = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_13b8c = call i32 @function_14858()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_13b94 = inttoptr i32 %v0_13b8c to i32*
  store i32 0, i32* %v2_13b94, align 4
  %v0_13ba0 = load i32, i32* %r6.global-to-local, align 4
  %v3_13ba4 = call i32 @function_14b80(i32 2, i32 2, i32 %v0_13ba0)
  %v7_13bb0 = icmp eq i32 %v3_13ba4, -1
  store i32 %v3_13ba4, i32* %r5.global-to-local, align 4
  %v2_13bbc = load i32, i32* @r4, align 4
  br i1 %v7_13bb0, label %dec_label_pc_13c0c, label %dec_label_pc_13bd0

dec_label_pc_13bd0:                               ; preds = %dec_label_pc_13b7c
  %v7_13bbc = shl i32 2056, %v2_13bbc
  %v8_13bbc = or i32 %v7_13bbc, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_13bec = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_13bec = call i32 @function_149dc(i32 %v3_13ba4, %sockaddr* %v3_13bec, i32 %v2_13bbc)
  %v2_13bf4 = ptrtoint i32* %stack_var_-24 to i32
  %v0_13bf8 = load i32, i32* %r5.global-to-local, align 4
  %v4_13bfc = call i32 @function_14a08(i32 %v0_13bf8, %sockaddr* %v3_13bec, i32 %v2_13bf4)
  %v1_13c04 = call i32 @function_14284(i32 %v0_13bf8)
  br label %dec_label_pc_13c0c

dec_label_pc_13c0c:                               ; preds = %dec_label_pc_13b7c, %dec_label_pc_13bd0
  %v0_13c0c = phi i32 [ %v0_13ba0, %dec_label_pc_13b7c ], [ %v8_13bbc, %dec_label_pc_13bd0 ]
  store i32 %v3_13b7c, i32* @r4, align 4
  ret i32 %v0_13c0c

; uselistorder directives
  uselistorder i32 %v3_13ba4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_149dc, { 1, 0, 2, 4, 3, 5, 9, 6, 8, 7, 10 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_14b80, { 22, 23, 20, 21, 18, 19, 17, 16, 15, 14, 13, 12, 11, 1, 10, 9, 8, 3, 2, 7, 6, 5, 4, 0 }
  uselistorder label %dec_label_pc_13c0c, { 1, 0 }
}

define i32 @function_13c18(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c18:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_13c1c = load i8, i8* %tmp, align 1
  %v2_13c20 = icmp eq i8 %v3_13c1c, 0
  br i1 %v2_13c20, label %bb, label %dec_label_pc_13c34

bb:                                               ; preds = %dec_label_pc_13c18
  %v4_13c1c = zext i8 %v3_13c1c to i32
  br label %dec_label_pc_13c48

dec_label_pc_13c34:                               ; preds = %dec_label_pc_13c18
  br label %dec_label_pc_13c38

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13c38, %dec_label_pc_13c34
  %v0_13c38 = phi i32 [ %v1_13c38, %dec_label_pc_13c38 ], [ 0, %dec_label_pc_13c34 ]
  %v1_13c38 = add i32 %v0_13c38, 1
  %v2_13c3c = add i32 %v1_13c38, %arg2
  %v3_13c3c = inttoptr i32 %v2_13c3c to i8*
  %v4_13c3c = load i8, i8* %v3_13c3c, align 1
  %v2_13c40 = icmp eq i8 %v4_13c3c, 0
  br i1 %v2_13c40, label %dec_label_pc_13c48, label %dec_label_pc_13c38

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c38, %bb
  %v0_13c8c18 = phi i32 [ %v4_13c1c, %bb ], [ %v1_13c38, %dec_label_pc_13c38 ]
  %v0_13c501 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_13c501, 1
  br i1 %tmp27, label %dec_label_pc_13c9c, label %dec_label_pc_13c5c

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c48, %dec_label_pc_13c50.backedge
  %v0_13c54.in = phi i32 [ %v0_13c54, %dec_label_pc_13c50.backedge ], [ %v0_13c501, %dec_label_pc_13c48 ]
  %v0_13c80 = phi i32 [ %v1_13c80., %dec_label_pc_13c50.backedge ], [ 0, %dec_label_pc_13c48 ]
  %v0_13c5c = phi i32 [ %v5_13c5c, %dec_label_pc_13c50.backedge ], [ %tmp20, %dec_label_pc_13c48 ]
  %v0_13c54 = add i32 %v0_13c54.in, -1
  %v1_13c5c = inttoptr i32 %v0_13c5c to i8*
  %v2_13c5c = load i8, i8* %v1_13c5c, align 1
  %v3_13c5c = zext i8 %v2_13c5c to i32
  store i32 %v3_13c5c, i32* @lr, align 4
  %v5_13c5c = add i32 %v0_13c5c, 1
  %v2_13c60 = add i32 %v0_13c80, %arg2
  %v3_13c60 = inttoptr i32 %v2_13c60 to i8*
  %v4_13c60 = load i8, i8* %v3_13c60, align 1
  %v6_13c60 = zext i8 %v4_13c60 to i32
  %v1_13c64 = add nsw i32 %v3_13c5c, -65
  %v1_13c68 = add nsw i32 %v6_13c60, -65
  %tmp35 = icmp ult i32 %v1_13c64, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_13c5c
  %v5_13c70 = or i32 %v3_13c5c, 96
  store i32 %v5_13c70, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_13c5c, %bb28
  %v0_13c7c = phi i32 [ %v3_13c5c, %dec_label_pc_13c5c ], [ %v5_13c70, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13c68, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13c78 = or i32 %v6_13c60, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_13c7c = phi i32 [ %v6_13c60, %bb29 ], [ %v5_13c78, %bb30 ]
  %v9_13c7c = icmp eq i32 %v0_13c7c, %v1_13c7c
  %v1_13c80 = add i32 %v0_13c80, 1
  %v1_13c80. = select i1 %v9_13c7c, i32 %v1_13c80, i32 0
  br i1 %v9_13c7c, label %dec_label_pc_13c8c, label %dec_label_pc_13c50.backedge

dec_label_pc_13c50.backedge:                      ; preds = %bb31, %dec_label_pc_13c8c
  %tmp32 = icmp slt i32 %v0_13c54, 1
  br i1 %tmp32, label %dec_label_pc_13c9c, label %dec_label_pc_13c5c

dec_label_pc_13c8c:                               ; preds = %bb31
  %v9_13c8c = icmp eq i32 %v0_13c8c18, %v1_13c80.
  br i1 %v9_13c8c, label %dec_label_pc_13c94, label %dec_label_pc_13c50.backedge

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c8c
  %v2_13c94 = sub i32 %v5_13c5c, %tmp20
  ret i32 %v2_13c94

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c50.backedge, %dec_label_pc_13c48
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13c80., { 1, 0 }
  uselistorder i32 %v0_13c5c, { 1, 0 }
  uselistorder i32 %v0_13c80, { 1, 0 }
  uselistorder i8 %v3_13c1c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_13c50.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_13c5c, { 1, 0 }
}

define i32 @function_13ca4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ca4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13ca4 = load i8, i8* %arg1, align 1
  %v2_13ca8 = icmp eq i8 %v2_13ca4, 0
  br i1 %v2_13ca8, label %bb, label %dec_label_pc_13cb4

bb:                                               ; preds = %dec_label_pc_13ca4
  %v3_13ca4 = zext i8 %v2_13ca4 to i32
  br label %dec_label_pc_13cc8

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13ca4
  br label %dec_label_pc_13cb8

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13cb8, %dec_label_pc_13cb4
  %v0_13cb8 = phi i32 [ %v1_13cb8, %dec_label_pc_13cb8 ], [ 0, %dec_label_pc_13cb4 ]
  %v1_13cb8 = add i32 %v0_13cb8, 1
  %v2_13cbc = add i32 %v1_13cb8, %tmp
  %v3_13cbc = inttoptr i32 %v2_13cbc to i8*
  %v4_13cbc = load i8, i8* %v3_13cbc, align 1
  %v2_13cc0 = icmp eq i8 %v4_13cbc, 0
  br i1 %v2_13cc0, label %dec_label_pc_13cc8, label %dec_label_pc_13cb8

dec_label_pc_13cc8:                               ; preds = %dec_label_pc_13cb8, %bb
  %v1_13cec = phi i32 [ %v3_13ca4, %bb ], [ %v1_13cb8, %dec_label_pc_13cb8 ]
  %v1_13cc8 = inttoptr i32 %arg2 to i8*
  %v2_13cc8 = load i8, i8* %v1_13cc8, align 1
  %v3_13cc8 = zext i8 %v2_13cc8 to i32
  %v2_13ccc = icmp eq i8 %v2_13cc8, 0
  br i1 %v2_13ccc, label %bb22, label %dec_label_pc_13cd8

bb22:                                             ; preds = %dec_label_pc_13cc8
  store i32 %v3_13cc8, i32* @r2, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13cd8:                               ; preds = %dec_label_pc_13cc8
  br label %dec_label_pc_13cdc

dec_label_pc_13cdc:                               ; preds = %dec_label_pc_13cdc, %dec_label_pc_13cd8
  %v0_13cdc = phi i32 [ %v1_13cdc, %dec_label_pc_13cdc ], [ 0, %dec_label_pc_13cd8 ]
  %v1_13cdc = add i32 %v0_13cdc, 1
  store i32 %v1_13cdc, i32* @r2, align 4
  %v2_13ce0 = add i32 %v1_13cdc, %arg2
  %v3_13ce0 = inttoptr i32 %v2_13ce0 to i8*
  %v4_13ce0 = load i8, i8* %v3_13ce0, align 1
  %v2_13ce4 = icmp eq i8 %v4_13ce0, 0
  br i1 %v2_13ce4, label %dec_label_pc_13cec, label %dec_label_pc_13cdc

dec_label_pc_13cec:                               ; preds = %dec_label_pc_13cdc, %bb22
  %v0_13d184 = phi i32 [ %v3_13cc8, %bb22 ], [ %v1_13cdc, %dec_label_pc_13cdc ]
  %v9_13cec = icmp eq i32 %v0_13d184, %v1_13cec
  br i1 %v9_13cec, label %dec_label_pc_13d18.preheader, label %dec_label_pc_13cf8

dec_label_pc_13d18.preheader:                     ; preds = %dec_label_pc_13cec
  %v2_13d186 = icmp eq i32 %v1_13cec, 0
  br i1 %v2_13d186, label %dec_label_pc_13d20, label %dec_label_pc_13d00

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13d00, %dec_label_pc_13cec
  ret i32 0

dec_label_pc_13d00:                               ; preds = %dec_label_pc_13d10, %dec_label_pc_13d18.preheader
  %v0_13d18.in = phi i32 [ %v0_13d18, %dec_label_pc_13d10 ], [ %v1_13cec, %dec_label_pc_13d18.preheader ]
  %v0_13d14 = phi i32 [ %v1_13d14, %dec_label_pc_13d10 ], [ %arg2, %dec_label_pc_13d18.preheader ]
  %v0_13d10 = phi i32 [ %v1_13d10, %dec_label_pc_13d10 ], [ %tmp, %dec_label_pc_13d18.preheader ]
  %v0_13d18 = add i32 %v0_13d18.in, -1
  %v1_13d00 = inttoptr i32 %v0_13d10 to i8*
  %v2_13d00 = load i8, i8* %v1_13d00, align 1
  %v3_13d00 = zext i8 %v2_13d00 to i32
  store i32 %v3_13d00, i32* @r2, align 4
  %v1_13d04 = inttoptr i32 %v0_13d14 to i8*
  %v2_13d04 = load i8, i8* %v1_13d04, align 1
  %v9_13d08 = icmp eq i8 %v2_13d00, %v2_13d04
  br i1 %v9_13d08, label %dec_label_pc_13d10, label %dec_label_pc_13cf8

dec_label_pc_13d10:                               ; preds = %dec_label_pc_13d00
  %v1_13d10 = add i32 %v0_13d10, 1
  %v1_13d14 = add i32 %v0_13d14, 1
  %v2_13d18 = icmp eq i32 %v0_13d18, 0
  br i1 %v2_13d18, label %dec_label_pc_13d20, label %dec_label_pc_13d00

dec_label_pc_13d20:                               ; preds = %dec_label_pc_13d10, %dec_label_pc_13d18.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_13cdc, { 0, 1, 3, 2 }
  uselistorder i8 %v2_13ca4, { 1, 0 }
}

define i32 @function_13d28(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d28:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13d2c = load i8, i8* %arg1, align 1
  %v2_13d30 = icmp eq i8 %v2_13d2c, 0
  %v0_13d34 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_13d30, label %bb, label %dec_label_pc_13d40

bb:                                               ; preds = %dec_label_pc_13d28
  %v3_13d2c = zext i8 %v2_13d2c to i32
  br label %dec_label_pc_13d54

dec_label_pc_13d40:                               ; preds = %dec_label_pc_13d28
  br label %dec_label_pc_13d44

dec_label_pc_13d44:                               ; preds = %dec_label_pc_13d44, %dec_label_pc_13d40
  %v0_13d44 = phi i32 [ %v1_13d44, %dec_label_pc_13d44 ], [ 0, %dec_label_pc_13d40 ]
  %v1_13d44 = add i32 %v0_13d44, 1
  %v2_13d48 = add i32 %v1_13d44, %tmp
  %v3_13d48 = inttoptr i32 %v2_13d48 to i8*
  %v4_13d48 = load i8, i8* %v3_13d48, align 1
  %v2_13d4c = icmp eq i8 %v4_13d48, 0
  br i1 %v2_13d4c, label %dec_label_pc_13d54, label %dec_label_pc_13d44

dec_label_pc_13d54:                               ; preds = %dec_label_pc_13d44, %bb
  %v9_13d7c = phi i32 [ %v3_13d2c, %bb ], [ %v1_13d44, %dec_label_pc_13d44 ]
  %v0_13d54 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d54 = inttoptr i32 %v0_13d54 to i8*
  %v2_13d54 = load i8, i8* %v1_13d54, align 1
  %v3_13d54 = zext i8 %v2_13d54 to i32
  %v2_13d58 = icmp eq i8 %v2_13d54, 0
  br i1 %v2_13d58, label %bb26, label %dec_label_pc_13d64

bb26:                                             ; preds = %dec_label_pc_13d54
  store i32 %v3_13d54, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d78

dec_label_pc_13d64:                               ; preds = %dec_label_pc_13d54
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13d68

dec_label_pc_13d68:                               ; preds = %dec_label_pc_13d68, %dec_label_pc_13d64
  %v0_13d68 = phi i32 [ %v1_13d68, %dec_label_pc_13d68 ], [ 0, %dec_label_pc_13d64 ]
  %v1_13d68 = add i32 %v0_13d68, 1
  store i32 %v1_13d68, i32* %r2.global-to-local, align 4
  %v2_13d6c = add i32 %v1_13d68, %v0_13d54
  %v3_13d6c = inttoptr i32 %v2_13d6c to i8*
  %v4_13d6c = load i8, i8* %v3_13d6c, align 1
  %v2_13d70 = icmp eq i8 %v4_13d6c, 0
  br i1 %v2_13d70, label %dec_label_pc_13d78, label %dec_label_pc_13d68

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d68, %bb26
  %v1_13d78 = phi i32 [ %v3_13d54, %bb26 ], [ %v1_13d68, %dec_label_pc_13d68 ]
  %v2_13d78 = sub i32 %v0_13d34, %v1_13d78
  %v4_13d78 = xor i32 %v1_13d78, %v0_13d34
  %v5_13d78 = xor i32 %v2_13d78, %v0_13d34
  %v6_13d78 = and i32 %v5_13d78, %v4_13d78
  %v7_13d7c = icmp sgt i32 %v0_13d34, %v1_13d78
  br i1 %v7_13d7c, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13d78
  %v10_13d7c = sub i32 %v0_13d34, %v9_13d7c
  %v12_13d7c = xor i32 %v9_13d7c, %v0_13d34
  %v13_13d7c = xor i32 %v10_13d7c, %v0_13d34
  %v14_13d7c = and i32 %v13_13d7c, %v12_13d7c
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13d78, %bb27
  %v2_13d80.in = phi i32 [ %v6_13d78, %dec_label_pc_13d78 ], [ %v14_13d7c, %bb27 ]
  %v1_13d80.in = phi i32 [ %v2_13d78, %dec_label_pc_13d78 ], [ %v10_13d7c, %bb27 ]
  %v1_13d78.pn = phi i32 [ %v1_13d78, %dec_label_pc_13d78 ], [ %v9_13d7c, %bb27 ]
  %v0_13d80 = icmp eq i32 %v0_13d34, %v1_13d78.pn
  %v1_13d80 = icmp slt i32 %v1_13d80.in, 0
  %v2_13d80 = icmp slt i32 %v2_13d80.in, 0
  %v3_13d80 = xor i1 %v2_13d80, %v1_13d80
  %v4_13d80 = or i1 %v0_13d80, %v3_13d80
  br i1 %v4_13d80, label %dec_label_pc_13d90.preheader, label %dec_label_pc_13da8

dec_label_pc_13d90.preheader:                     ; preds = %bb28
  %v2_13d905 = icmp eq i32 %v0_13d34, 0
  br i1 %v2_13d905, label %dec_label_pc_13db0, label %dec_label_pc_13d98

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d98
  %v1_13d88 = add i32 %v0_13d88, 1
  %v1_13d8c = add i32 %v0_13d8c, 1
  store i32 %v1_13d8c, i32* %r1.global-to-local, align 4
  %v2_13d90 = icmp eq i32 %v0_13d90, 0
  br i1 %v2_13d90, label %dec_label_pc_13db0, label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d88, %dec_label_pc_13d90.preheader
  %v0_13d90.in = phi i32 [ %v0_13d90, %dec_label_pc_13d88 ], [ %v0_13d34, %dec_label_pc_13d90.preheader ]
  %v0_13d8c = phi i32 [ %v1_13d8c, %dec_label_pc_13d88 ], [ %v0_13d54, %dec_label_pc_13d90.preheader ]
  %v0_13d88 = phi i32 [ %v1_13d88, %dec_label_pc_13d88 ], [ %tmp, %dec_label_pc_13d90.preheader ]
  %v0_13d90 = add i32 %v0_13d90.in, -1
  %v1_13d98 = inttoptr i32 %v0_13d88 to i8*
  %v2_13d98 = load i8, i8* %v1_13d98, align 1
  %v3_13d98 = zext i8 %v2_13d98 to i32
  store i32 %v3_13d98, i32* %r2.global-to-local, align 4
  %v1_13d9c = inttoptr i32 %v0_13d8c to i8*
  %v2_13d9c = load i8, i8* %v1_13d9c, align 1
  %v9_13da0 = icmp eq i8 %v2_13d98, %v2_13d9c
  br i1 %v9_13da0, label %dec_label_pc_13d88, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d98, %bb28
  ret i32 0

dec_label_pc_13db0:                               ; preds = %dec_label_pc_13d88, %dec_label_pc_13d90.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13d88, { 1, 0 }
  uselistorder i32 %v0_13d8c, { 1, 0 }
  uselistorder i32 %v1_13d78, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13d68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13d34, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_13d2c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13db8(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13db8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13db8 = load i32, i32* @r4, align 4
  store i32 %v3_13db8, i32* %stack_var_-28, align 4
  %v22_13db8 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13dbc = load i32, i32* @r2, align 4
  store i32 %v0_13dbc, i32* %r8.global-to-local, align 4
  %v2_13dbc = icmp eq i32 %v0_13dbc, 0
  store i1 %v2_13dbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13dbc, label %dec_label_pc_13eac, label %dec_label_pc_13dcc

dec_label_pc_13dcc:                               ; preds = %dec_label_pc_13db8
  %v3_13dcc = icmp eq i8 %arg1, 0
  store i1 %v3_13dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13dcc, label %.thread, label %dec_label_pc_13de0

.thread:                                          ; preds = %dec_label_pc_13dcc
  %v4_13dd4 = inttoptr i32 %v0_13dbc to i8*
  store i8 48, i8* %v4_13dd4, align 1
  %v0_13dd8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13dd8.pr.pr, label %.thread1, label %dec_label_pc_13de0

.thread1:                                         ; preds = %.thread
  %v4_13dd8 = load i32, i32* %r8.global-to-local, align 4
  %v5_13dd8 = add i32 %v4_13dd8, 1
  %v6_13dd8 = inttoptr i32 %v5_13dd8 to i8*
  store i8 0, i8* %v6_13dd8, align 1
  %v0_13ddc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13ddc.pr.pr, label %dec_label_pc_13eac, label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13dcc, %.thread, %.thread1
  %v7_13de4 = icmp eq i32 %arg2, 10
  store i1 %v7_13de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13de4, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_13de0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13de0
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13e08

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e18

dec_label_pc_13e08:                               ; preds = %bb
  %v2_13e08 = sub nsw i32 0, %tmp
  store i32 %v2_13e08, i32* %r4.global-to-local, align 4
  store i1 %v3_13dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13dcc, label %dec_label_pc_13eb8, label %dec_label_pc_13e18

dec_label_pc_13e18:                               ; preds = %dec_label_pc_13e08, %.thread4
  %v0_13e2010 = phi i32 [ %tmp, %.thread4 ], [ %v2_13e08, %dec_label_pc_13e08 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13e08 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13e1c = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13e1c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13e20

dec_label_pc_13e20:                               ; preds = %bb37, %dec_label_pc_13e18
  %v0_13e20 = phi i32 [ %v0_13e44, %bb37 ], [ %v0_13e2010, %dec_label_pc_13e18 ]
  store i32 %v0_13e20, i32* %r0.global-to-local, align 4
  %v0_13e24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13e24, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_13e20, 16777216
  %v1_13e28 = sdiv i32 %sext, 16777216
  %v3_13e28 = call i32 @function_13fe0(i32 %v1_13e28, i32 %v0_13e24)
  store i32 %v3_13e28, i32* %r0.global-to-local, align 4
  %v7_13e2c = icmp eq i32 %v3_13e28, 9
  store i1 %v7_13e2c, i1* %cpsr_z.global-to-local, align 1
  %v1_13e30 = add i32 %v3_13e28, 48
  %v0_13e34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13e34, i32* @r1, align 4
  %v7_13e38 = icmp sgt i32 %v3_13e28, 9
  %extract.t = trunc i32 %v1_13e30 to i8
  br i1 %v7_13e38, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_13e20
  %v9_13e38 = add i32 %v3_13e28, 55
  %extract.t20 = trunc i32 %v9_13e38 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_13e20, %bb36
  %v0_13e40.off0 = phi i8 [ %extract.t, %dec_label_pc_13e20 ], [ %extract.t20, %bb36 ]
  %v0_13e3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13e3c, i32* @r0, align 4
  %v2_13e40 = load i32, i32* %r7.global-to-local, align 4
  %v3_13e40 = inttoptr i32 %v2_13e40 to i8*
  store i8 %v0_13e40.off0, i8* %v3_13e40, align 1
  %v4_13e40 = load i32, i32* %r7.global-to-local, align 4
  %v5_13e40 = add i32 %v4_13e40, -1
  store i32 %v5_13e40, i32* %r7.global-to-local, align 4
  %v0_13e44 = call i32 @function_13ed0()
  store i32 %v0_13e44, i32* %r0.global-to-local, align 4
  store i32 %v0_13e44, i32* %r4.global-to-local, align 4
  %v2_13e48 = icmp eq i32 %v0_13e44, 0
  store i1 %v2_13e48, i1* %cpsr_z.global-to-local, align 1
  %v0_13e4c = load i32, i32* %r6.global-to-local, align 4
  %v1_13e4c = add i32 %v0_13e4c, -1
  store i32 %v1_13e4c, i32* %r6.global-to-local, align 4
  br i1 %v2_13e48, label %dec_label_pc_13e54, label %dec_label_pc_13e20

dec_label_pc_13e54:                               ; preds = %bb37
  %v0_13e54 = load i32, i32* %sl.global-to-local, align 4
  %v2_13e54 = icmp eq i32 %v0_13e54, 0
  store i1 %v2_13e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e54, label %bb38, label %dec_label_pc_13ebc

bb38:                                             ; preds = %dec_label_pc_13e54
  store i32 %v0_13e4c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e60

dec_label_pc_13e60:                               ; preds = %bb38, %dec_label_pc_13ebc
  %v1_13e6c = phi i32 [ %v0_13e4c, %bb38 ], [ %v1_13e64.pre, %dec_label_pc_13ebc ]
  %v2_13e60 = ptrtoint i32* %stack_var_-62 to i32
  %v2_13e64 = add i32 %v1_13e6c, %v2_13e60
  %v3_13e64 = inttoptr i32 %v2_13e64 to i8*
  %v4_13e64 = load i8, i8* %v3_13e64, align 1
  %v6_13e64 = zext i8 %v4_13e64 to i32
  %v2_13e68 = icmp eq i8 %v4_13e64, 0
  store i1 %v2_13e68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13e64, i32* %r1.global-to-local, align 4
  br i1 %v2_13e68, label %dec_label_pc_13e90, label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e60
  br label %dec_label_pc_13e78

dec_label_pc_13e78:                               ; preds = %dec_label_pc_13e78, %dec_label_pc_13e74
  %v0_13e78 = phi i32 [ %v1_13e78, %dec_label_pc_13e78 ], [ 0, %dec_label_pc_13e74 ]
  %v1_13e78 = add i32 %v0_13e78, 1
  store i32 %v1_13e78, i32* @r2, align 4
  %v2_13e7c = add i32 %v1_13e78, %v2_13e64
  %v3_13e7c = inttoptr i32 %v2_13e7c to i8*
  %v4_13e7c = load i8, i8* %v3_13e7c, align 1
  %v2_13e80 = icmp eq i8 %v4_13e7c, 0
  store i1 %v2_13e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e80, label %dec_label_pc_13e88, label %dec_label_pc_13e78

dec_label_pc_13e88:                               ; preds = %dec_label_pc_13e78
  %v7_13e88 = icmp eq i32 %v0_13e78, -2
  store i1 %v7_13e88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13e88, label %dec_label_pc_13eac, label %dec_label_pc_13e90

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13e88, %dec_label_pc_13e60
  %v0_13e9817 = phi i32 [ %v1_13e78, %dec_label_pc_13e88 ], [ %v6_13e64, %dec_label_pc_13e60 ]
  store i32 %v2_13e64, i32* %r0.global-to-local, align 4
  %v0_13e94 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13e94, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e98

dec_label_pc_13e98:                               ; preds = %dec_label_pc_13e98.dec_label_pc_13e98_crit_edge, %dec_label_pc_13e90
  %v2_13ea4 = phi i32 [ %v5_13ea4, %dec_label_pc_13e98.dec_label_pc_13e98_crit_edge ], [ %v0_13e94, %dec_label_pc_13e90 ]
  %v0_13e9c = phi i32 [ %v0_13e9c.pre, %dec_label_pc_13e98.dec_label_pc_13e98_crit_edge ], [ %v2_13e64, %dec_label_pc_13e90 ]
  %v0_13e98 = phi i32 [ %v0_13e98.pre, %dec_label_pc_13e98.dec_label_pc_13e98_crit_edge ], [ %v0_13e9817, %dec_label_pc_13e90 ]
  %v1_13e98 = add i32 %v0_13e98, -1
  store i32 %v1_13e98, i32* @r2, align 4
  %v1_13e9c = inttoptr i32 %v0_13e9c to i8*
  %v2_13e9c = load i8, i8* %v1_13e9c, align 1
  %v5_13e9c = add i32 %v0_13e9c, 1
  store i32 %v5_13e9c, i32* %r0.global-to-local, align 4
  %v3_13ea0 = icmp eq i32 %v0_13e98, 0
  store i1 %v3_13ea0, i1* %cpsr_z.global-to-local, align 1
  %v3_13ea4 = inttoptr i32 %v2_13ea4 to i8*
  store i8 %v2_13e9c, i8* %v3_13ea4, align 1
  %v4_13ea4 = load i32, i32* %r1.global-to-local, align 4
  %v5_13ea4 = add i32 %v4_13ea4, 1
  store i32 %v5_13ea4, i32* %r1.global-to-local, align 4
  br i1 %v3_13ea0, label %dec_label_pc_13eac, label %dec_label_pc_13e98.dec_label_pc_13e98_crit_edge

dec_label_pc_13e98.dec_label_pc_13e98_crit_edge:  ; preds = %dec_label_pc_13e98
  %v0_13e98.pre = load i32, i32* @r2, align 4
  %v0_13e9c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13e98

dec_label_pc_13eac:                               ; preds = %dec_label_pc_13e98, %dec_label_pc_13e88, %.thread1, %dec_label_pc_13db8
  %v0_13eac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13eac, i32* %r0.global-to-local, align 4
  %v2_13eb4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13eb4, i32* @r4, align 4
  ret i32 %v0_13eac

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13e08
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ebc

dec_label_pc_13ebc:                               ; preds = %dec_label_pc_13e54, %dec_label_pc_13eb8
  %v1_13ec0 = phi i32 [ %v1_13e4c, %dec_label_pc_13e54 ], [ 32, %dec_label_pc_13eb8 ]
  %v2_13ec0 = add i32 %v1_13ec0, %v22_13db8
  %v3_13ec8 = add i32 %v2_13ec0, -34
  %v4_13ec8 = inttoptr i32 %v3_13ec8 to i8*
  store i8 45, i8* %v4_13ec8, align 1
  %v1_13e64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e60

; uselistorder directives
  uselistorder i32 %v5_13ea4, { 1, 0 }
  uselistorder i1 %v3_13ea0, { 1, 0 }
  uselistorder i32 %v0_13e9c, { 1, 0 }
  uselistorder i1 %v7_13e88, { 1, 0 }
  uselistorder i32 %v1_13e78, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13e64, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13e44, { 1, 2, 3, 0 }
  uselistorder i32 %v3_13e28, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13dcc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13dbc, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ebc, { 1, 0 }
  uselistorder label %dec_label_pc_13e60, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_13de0, { 2, 1, 0 }
}

define i32 @function_13ed0() local_unnamed_addr {
dec_label_pc_13ed0:
  %v0_13ed0 = load i32, i32* @r1, align 4
  %v1_13ed0 = add i32 %v0_13ed0, -1
  %v7_13ed0 = icmp eq i32 %v0_13ed0, 1
  br i1 %v7_13ed0, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_13ed0
  %v2_13ed4 = load i32, i32* @r0, align 4
  ret i32 %v2_13ed4

bb82:                                             ; preds = %dec_label_pc_13ed0
  %v2_13ed0 = icmp eq i32 %v0_13ed0, 0
  br i1 %v2_13ed0, label %dec_label_pc_13fb8, label %dec_label_pc_13edc

dec_label_pc_13edc:                               ; preds = %bb82
  %v0_13edc = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13edc, %v0_13ed0
  br i1 %tmp, label %dec_label_pc_13ee4, label %dec_label_pc_13f70

dec_label_pc_13ee4:                               ; preds = %dec_label_pc_13edc
  %v2_13ee4 = and i32 %v1_13ed0, %v0_13ed0
  %v4_13ee4 = icmp eq i32 %v2_13ee4, 0
  br i1 %v4_13ee4, label %dec_label_pc_13f7c, label %dec_label_pc_13eec

dec_label_pc_13eec:                               ; preds = %dec_label_pc_13ee4
  %v3_13eec = icmp ult i32 %v0_13ed0, 536870912
  br i1 %v3_13eec, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13eec
  %v4_13ef0 = mul i32 %v0_13ed0, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13eec, %.thread
  %v0_13f10.pr36.ph = phi i32 [ %v4_13ef0, %.thread ], [ %v0_13ed0, %dec_label_pc_13eec ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13eec ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_13f10.pr36 = phi i32 [ %v4_13f04, %bb85 ], [ %v0_13f10.pr36.ph, %.preheader.preheader ]
  %v1_13f08 = phi i32 [ %v4_13f08, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13efc = icmp ugt i32 %v0_13f10.pr36, 268435455
  br i1 %v2_13efc, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13f10thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_13f00 = icmp ult i32 %v0_13f10.pr36, %v0_13edc
  br i1 %v4_13f00, label %bb84, label %dec_label_pc_13f10thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_13f04 = and i32 %v0_13f10.pr36, 268435456
  %v3_13f04 = icmp eq i32 %v2_13f04, 0
  %v4_13f04 = mul i32 %v0_13f10.pr36, 16
  br i1 %v3_13f04, label %bb85, label %dec_label_pc_13f10.loopexit

bb85:                                             ; preds = %bb84
  %v2_13f08 = and i32 %v1_13f08, 268435456
  %v3_13f08 = icmp eq i32 %v2_13f08, 0
  %v4_13f08 = mul i32 %v1_13f08, 16
  br i1 %v3_13f08, label %.preheader, label %dec_label_pc_13f10thread-pre-split.loopexit.loopexit

dec_label_pc_13f10thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_13f1c48.ph = phi i32 [ %v1_13f08, %bb83 ], [ %v4_13f08, %bb85 ]
  %v0_13f10.pr38.ph = phi i32 [ %v0_13f10.pr36, %bb83 ], [ %v4_13f04, %bb85 ]
  br label %dec_label_pc_13f10thread-pre-split.loopexit

dec_label_pc_13f10thread-pre-split.loopexit:      ; preds = %dec_label_pc_13f10thread-pre-split.loopexit.loopexit, %.thread2
  %v1_13f1c48 = phi i32 [ %v1_13f08, %.thread2 ], [ %v1_13f1c48.ph, %dec_label_pc_13f10thread-pre-split.loopexit.loopexit ]
  %v0_13f10.pr38 = phi i32 [ %v0_13f10.pr36, %.thread2 ], [ %v0_13f10.pr38.ph, %dec_label_pc_13f10thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13f10thread-pre-split

dec_label_pc_13f10thread-pre-split:               ; preds = %dec_label_pc_13f10thread-pre-split.loopexit, %bb87
  %v1_13f1c46 = phi i32 [ %v1_13f1c48, %dec_label_pc_13f10thread-pre-split.loopexit ], [ %v3_13f1c, %bb87 ]
  %v0_13f10.pr = phi i32 [ %v0_13f10.pr38, %dec_label_pc_13f10thread-pre-split.loopexit ], [ %v3_13f18, %bb87 ]
  br label %dec_label_pc_13f10

dec_label_pc_13f10.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_13f10

dec_label_pc_13f10:                               ; preds = %dec_label_pc_13f10.loopexit, %dec_label_pc_13f10thread-pre-split
  %v1_13f1c = phi i32 [ %v1_13f1c46, %dec_label_pc_13f10thread-pre-split ], [ %v1_13f08, %dec_label_pc_13f10.loopexit ]
  %v1_13f18 = phi i32 [ %v0_13f10.pr, %dec_label_pc_13f10thread-pre-split ], [ %v4_13f04, %dec_label_pc_13f10.loopexit ]
  %v2_13f10 = icmp slt i32 %v1_13f18, 0
  br i1 %v2_13f10, label %dec_label_pc_13f24, label %bb86

bb86:                                             ; preds = %dec_label_pc_13f10
  %v4_13f14 = icmp ult i32 %v1_13f18, %v0_13edc
  br i1 %v4_13f14, label %bb87, label %dec_label_pc_13f24

bb87:                                             ; preds = %bb86
  %v3_13f18 = mul i32 %v1_13f18, 2
  %v2_13f1c = icmp slt i32 %v1_13f1c, 0
  %v3_13f1c = mul i32 %v1_13f1c, 2
  br i1 %v2_13f1c, label %dec_label_pc_13f24, label %dec_label_pc_13f10thread-pre-split

dec_label_pc_13f24:                               ; preds = %bb86, %dec_label_pc_13f10, %bb87
  %v2_13f3059 = phi i32 [ %v3_13f1c, %bb87 ], [ %v1_13f1c, %bb86 ], [ %v1_13f1c, %dec_label_pc_13f10 ]
  %v1_13f2851 = phi i32 [ %v3_13f18, %bb87 ], [ %v1_13f18, %bb86 ], [ %v1_13f18, %dec_label_pc_13f10 ]
  br label %dec_label_pc_13f28

dec_label_pc_13f28:                               ; preds = %.thread11, %dec_label_pc_13f24
  %v1_13f5c = phi i32 [ %v4_13f5c, %.thread11 ], [ %v2_13f3059, %dec_label_pc_13f24 ]
  %v1_13f30 = phi i32 [ %v0_13f68, %.thread11 ], [ 0, %dec_label_pc_13f24 ]
  %v1_13f60 = phi i32 [ %v4_13f60, %.thread11 ], [ %v1_13f2851, %dec_label_pc_13f24 ]
  %v1_13f2c = phi i32 [ %v0_13f58, %.thread11 ], [ %v0_13edc, %dec_label_pc_13f24 ]
  %v3_13f28 = icmp ult i32 %v1_13f2c, %v1_13f60
  br i1 %v3_13f28, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_13f28
  %v3_13f2c = sub i32 %v1_13f2c, %v1_13f60
  %v3_13f30 = or i32 %v1_13f30, %v1_13f5c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13f28, %bb88
  %v1_13f38 = phi i32 [ %v1_13f2c, %dec_label_pc_13f28 ], [ %v3_13f2c, %bb88 ]
  %v1_13f3c = phi i32 [ %v1_13f30, %dec_label_pc_13f28 ], [ %v3_13f30, %bb88 ]
  %v4_13f34 = udiv i32 %v1_13f60, 2
  %v6_13f34 = icmp ult i32 %v1_13f38, %v4_13f34
  br i1 %v6_13f34, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13f38 = urem i32 %v1_13f60, 2
  %v4_13f38 = icmp eq i32 %v3_13f38, 0
  %v6_13f38 = sub i32 %v1_13f38, %v4_13f34
  br i1 %v4_13f38, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_13f3c = udiv i32 %v1_13f5c, 2
  %v6_13f3c = or i32 %v1_13f3c, %v5_13f3c
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_13f44 = phi i32 [ %v6_13f38, %bb89 ], [ %v1_13f38, %.thread7 ], [ %v6_13f38, %bb90 ]
  %v1_13f48 = phi i32 [ %v1_13f3c, %bb89 ], [ %v1_13f3c, %.thread7 ], [ %v6_13f3c, %bb90 ]
  %v4_13f40 = udiv i32 %v1_13f60, 4
  %v6_13f40 = icmp ult i32 %v1_13f44, %v4_13f40
  br i1 %v6_13f40, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_13f44 = and i32 %v1_13f60, 2
  %v4_13f44 = icmp eq i32 %v3_13f44, 0
  %v6_13f44 = sub i32 %v1_13f44, %v4_13f40
  br i1 %v4_13f44, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13f48 = udiv i32 %v1_13f5c, 4
  %v6_13f48 = or i32 %v1_13f48, %v5_13f48
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_13f50 = phi i32 [ %v6_13f44, %bb91 ], [ %v1_13f44, %.thread8 ], [ %v6_13f44, %bb92 ]
  %v1_13f54 = phi i32 [ %v1_13f48, %bb91 ], [ %v1_13f48, %.thread8 ], [ %v6_13f48, %bb92 ]
  %v4_13f4c = udiv i32 %v1_13f60, 8
  %v6_13f4c = icmp ult i32 %v1_13f50, %v4_13f4c
  br i1 %v6_13f4c, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_13f50 = and i32 %v1_13f60, 4
  %v4_13f50 = icmp eq i32 %v3_13f50, 0
  %v6_13f50 = sub i32 %v1_13f50, %v4_13f4c
  br i1 %v4_13f50, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_13f54 = udiv i32 %v1_13f5c, 8
  %v6_13f54 = or i32 %v1_13f54, %v5_13f54
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13f68 = phi i32 [ %v1_13f54, %bb93 ], [ %v1_13f54, %.thread9 ], [ %v6_13f54, %bb94 ]
  %v0_13f58 = phi i32 [ %v6_13f50, %bb93 ], [ %v1_13f50, %.thread9 ], [ %v6_13f50, %bb94 ]
  %v2_13f58 = icmp eq i32 %v0_13f58, 0
  br i1 %v2_13f58, label %dec_label_pc_13f68, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_13f5c, 16
  br i1 %tmp142, label %dec_label_pc_13f68, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_13f5c = udiv i32 %v1_13f5c, 16
  %v4_13f60 = udiv i32 %v1_13f60, 16
  br label %dec_label_pc_13f28

dec_label_pc_13f68:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13f68

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13edc
  %v9_13edc = icmp eq i32 %v0_13edc, %v0_13ed0
  %. = zext i1 %v9_13edc to i32
  ret i32 %.

dec_label_pc_13f7c:                               ; preds = %dec_label_pc_13ee4
  %v2_13f7c = icmp ugt i32 %v0_13ed0, 65535
  br i1 %v2_13f7c, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_13f7c
  %v2_13f80 = and i32 %v0_13ed0, 32768
  %v3_13f80 = icmp eq i32 %v2_13f80, 0
  %v4_13f80 = udiv i32 %v0_13ed0, 65536
  br i1 %v3_13f80, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_13f7c
  %v0_13f8c65 = phi i32 [ %v0_13ed0, %dec_label_pc_13f7c ], [ %v4_13f80, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_13f90 = phi i32 [ %v0_13f8c65, %.thread16 ], [ %v4_13f80, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_13f8c = icmp ugt i32 %v1_13f90, 255
  br i1 %v2_13f8c, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_13f90 = and i32 %v1_13f90, 128
  %v3_13f90 = icmp eq i32 %v2_13f90, 0
  %v4_13f90 = udiv i32 %v1_13f90, 256
  br i1 %v3_13f90, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_13f94 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_13fa0 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_13f94, %bb102 ]
  %v1_13f9c = phi i32 [ %v1_13f90, %bb100 ], [ %v4_13f90, %bb101 ], [ %v4_13f90, %bb102 ]
  %v2_13f98 = icmp ugt i32 %v1_13f9c, 15
  br i1 %v2_13f98, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_13f9c = and i32 %v1_13f9c, 8
  %v3_13f9c = icmp eq i32 %v2_13f9c, 0
  %v4_13f9c = udiv i32 %v1_13f9c, 16
  br i1 %v3_13f9c, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_13fa0 = add nsw i32 %v1_13fa0, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_13fa8 = phi i32 [ %v1_13fa0, %.thread17 ], [ %v1_13fa0, %bb103 ], [ %v2_13fa0, %bb104 ]
  %v5_13fac = phi i32 [ %v1_13f9c, %.thread17 ], [ %v4_13f9c, %bb103 ], [ %v4_13f9c, %bb104 ]
  %v2_13fa4 = icmp ugt i32 %v5_13fac, 3
  %v7_13fa4 = icmp eq i32 %v5_13fac, 4
  %v2_13fa8 = xor i1 %v7_13fa4, true
  %v3_13fa8 = and i1 %v2_13fa4, %v2_13fa8
  br i1 %v3_13fa8, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_13fa8 = add nsw i32 %v4_13fa8, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_13fac = phi i32 [ %v4_13fa8, %.thread18 ], [ %v5_13fa8, %bb105 ]
  %v2_13fac = xor i1 %v2_13fa4, true
  %v3_13fac = or i1 %v7_13fa4, %v2_13fac
  br i1 %v3_13fac, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_13fac = udiv i32 %v5_13fac, 2
  %v9_13fac = add i32 %v4_13fac, %v8_13fac
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_13fb0 = phi i32 [ %v4_13fac, %bb106 ], [ %v9_13fac, %bb107 ]
  %v6_13fb0 = lshr i32 %v0_13edc, %v1_13fb0
  ret i32 %v6_13fb0

dec_label_pc_13fb8:                               ; preds = %bb82
  %v0_13fb8 = load i32, i32* @lr, align 4
  %v0_13fbc = call i32 @function_14190()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_13fb8)
  %v9_13fc8 = load i32, i32* @lr, align 4
  %v0_13fcc = call i32 @function_13ed0()
  store i32 %v9_13fc8, i32* @lr, align 4
  ret i32 %v0_13fcc

; uselistorder directives
  uselistorder i32 %v4_13fac, { 1, 0 }
  uselistorder i1 %v7_13fa4, { 1, 0 }
  uselistorder i32 %v4_13f9c, { 1, 0 }
  uselistorder i32 %v1_13f9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13f90, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_13f90, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13f80, { 1, 0 }
  uselistorder i32 %v0_13f58, { 1, 0 }
  uselistorder i32 %v4_13f4c, { 1, 0 }
  uselistorder i32 %v1_13f54, { 1, 2, 0 }
  uselistorder i32 %v4_13f40, { 1, 0 }
  uselistorder i32 %v1_13f48, { 1, 2, 0 }
  uselistorder i32 %v4_13f34, { 1, 0 }
  uselistorder i32 %v1_13f3c, { 1, 2, 0 }
  uselistorder i32 %v1_13f60, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_13f30, { 1, 0 }
  uselistorder i32 %v1_13f5c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13f1c, { 1, 0 }
  uselistorder i32 %v3_13f18, { 1, 0 }
  uselistorder i32 %v1_13f18, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13f1c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13f08, { 1, 0 }
  uselistorder i32 %v4_13f04, { 2, 1, 0 }
  uselistorder i32 %v1_13f08, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13f10.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13edc, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_13ed0, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13f68, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_13f24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f10thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_13fe0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fe0:
  store i32 %arg1, i32* @r0, align 4
  %v1_13fe0 = add i32 %arg2, -1
  %v2_13fe0 = icmp eq i32 %arg2, 0
  br i1 %v2_13fe0, label %dec_label_pc_1409c, label %dec_label_pc_13fe8

dec_label_pc_13fe8:                               ; preds = %dec_label_pc_13fe0
  %v7_13fe0 = icmp eq i32 %arg2, 1
  br i1 %v7_13fe0, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13fe8
  %v1_13fe8 = load i32, i32* @r0, align 4
  %v10_13fe8 = icmp eq i32 %v1_13fe8, %arg2
  br i1 %v10_13fe8, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13fe8, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13fe8 = icmp ult i32 %v1_13fe8, %arg2
  br i1 %v4_13fe8, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13ff0 = and i32 %v1_13fe0, %arg2
  %v8_13ff0 = icmp eq i32 %v6_13ff0, 0
  br i1 %v8_13ff0, label %.thread67, label %dec_label_pc_14000.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_13ff4 = phi i32 [ %v1_13fe8, %bb75 ], [ 0, %.thread65 ]
  %v3_13ff4 = and i32 %v1_13ff4, %v1_13fe0
  br label %bb76

dec_label_pc_14000.preheader:                     ; preds = %bb75
  %v2_1400099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1400099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_14090, %bb74, %bb89, %bb84, %dec_label_pc_14060, %.thread67
  %v5_13ff8 = phi i32 [ %v1_13fe8, %bb74 ], [ %v3_13ff4, %.thread67 ], [ %v1_1403c.v6_1403c.v6_14044.v6_1404c, %dec_label_pc_14060 ], [ 0, %bb84 ], [ %v1_14094, %dec_label_pc_14090 ], [ %v2_14090, %bb89 ]
  ret i32 %v5_13ff8

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_14000.preheader
  %v0_14014.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_14000.preheader ], [ %v4_14008, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_14000.preheader ], [ %v2_1400c11, %.thread1.thread9 ]
  br label %dec_label_pc_14014thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_14000.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1400c11, %.thread1.thread9 ], [ 0, %dec_label_pc_14000.preheader ]
  %v0_14014.pr33100 = phi i32 [ %v4_14008, %.thread1.thread9 ], [ %arg2, %dec_label_pc_14000.preheader ]
  %v4_14004 = icmp ult i32 %v0_14014.pr33100, %v1_13fe8
  br i1 %v4_14004, label %bb78, label %dec_label_pc_14014thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_14008 = and i32 %v0_14014.pr33100, 268435456
  %v3_14008 = icmp eq i32 %v2_14008, 0
  %v4_14008 = mul i32 %v0_14014.pr33100, 16
  br i1 %v3_14008, label %.thread1.thread9, label %dec_label_pc_14014.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1400c11 = add i32 %storemerge101, 4
  %v2_14000 = icmp ugt i32 %v4_14008, 268435455
  br i1 %v2_14000, label %.thread, label %bb77

dec_label_pc_14014thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_14014thread-pre-split.loopexit

dec_label_pc_14014thread-pre-split.loopexit:      ; preds = %dec_label_pc_14014thread-pre-split.loopexit.loopexit, %.thread
  %v0_14014.pr3398 = phi i32 [ %v0_14014.pr33.lcssa, %.thread ], [ %v0_14014.pr33100, %dec_label_pc_14014thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_14014thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_14014thread-pre-split

dec_label_pc_14014thread-pre-split:               ; preds = %.thread4, %dec_label_pc_14014thread-pre-split.loopexit
  %v1_1402039 = phi i32 [ %storemerge95, %dec_label_pc_14014thread-pre-split.loopexit ], [ %v2_14020, %.thread4 ]
  %v0_14014.pr = phi i32 [ %v0_14014.pr3398, %dec_label_pc_14014thread-pre-split.loopexit ], [ %v3_1401c, %.thread4 ]
  br label %dec_label_pc_14014

dec_label_pc_14014.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_14014

dec_label_pc_14014:                               ; preds = %dec_label_pc_14014.loopexit, %dec_label_pc_14014thread-pre-split
  %v0_14028.pr = phi i32 [ %v1_1402039, %dec_label_pc_14014thread-pre-split ], [ %storemerge101, %dec_label_pc_14014.loopexit ]
  %v1_1401c = phi i32 [ %v0_14014.pr, %dec_label_pc_14014thread-pre-split ], [ %v4_14008, %dec_label_pc_14014.loopexit ]
  %v2_14014 = icmp slt i32 %v1_1401c, 0
  br i1 %v2_14014, label %dec_label_pc_14028, label %bb79

bb79:                                             ; preds = %dec_label_pc_14014
  %v4_14018 = icmp ult i32 %v1_1401c, %v1_13fe8
  br i1 %v4_14018, label %.thread4, label %dec_label_pc_14028

.thread4:                                         ; preds = %bb79
  %v3_1401c = mul i32 %v1_1401c, 2
  %v2_14020 = add i32 %v0_14028.pr, 1
  br label %dec_label_pc_14014thread-pre-split

dec_label_pc_14028:                               ; preds = %bb79, %dec_label_pc_14014
  %v2_14028 = add i32 %v0_14028.pr, -3
  %v5_1402c = icmp slt i32 %v0_14028.pr, 3
  br i1 %v5_1402c, label %dec_label_pc_1406c, label %dec_label_pc_14030

dec_label_pc_14030:                               ; preds = %dec_label_pc_14028, %bb83
  %v6_14058 = phi i32 [ %v0_14060, %bb83 ], [ %v2_14028, %dec_label_pc_14028 ]
  %v1_14034 = phi i32 [ %v1_1403c.v6_1403c.v6_14044.v6_1404c, %bb83 ], [ %v1_13fe8, %dec_label_pc_14028 ]
  %v3_1405412 = phi i32 [ %v3_14054, %bb83 ], [ %v1_1401c, %dec_label_pc_14028 ]
  %v3_14030 = icmp ult i32 %v1_14034, %v3_1405412
  %v3_14034 = select i1 %v3_14030, i32 0, i32 %v3_1405412
  %v1_1403c = sub i32 %v1_14034, %v3_14034
  %v4_14038 = udiv i32 %v3_1405412, 2
  %v6_14038 = icmp ult i32 %v1_1403c, %v4_14038
  %v6_1403c = select i1 %v6_14038, i32 0, i32 %v4_14038
  %v1_1403c.v6_1403c = sub i32 %v1_1403c, %v6_1403c
  %.demorgan = and i1 %v3_14030, %v6_14038
  %v4_14040 = udiv i32 %v3_1405412, 4
  %v6_14040 = icmp ult i32 %v1_1403c.v6_1403c, %v4_14040
  %v6_14044 = select i1 %v6_14040, i32 0, i32 %v4_14040
  %v1_1403c.v6_1403c.v6_14044 = sub i32 %v1_1403c.v6_1403c, %v6_14044
  %.demorgan71 = and i1 %.demorgan, %v6_14040
  %v4_14048 = udiv i32 %v3_1405412, 8
  %v6_14048 = icmp ult i32 %v1_1403c.v6_1403c.v6_14044, %v4_14048
  %v6_1404c = select i1 %v6_14048, i32 0, i32 %v4_14048
  %v1_1403c.v6_1403c.v6_14044.v6_1404c = sub i32 %v1_1403c.v6_1403c.v6_14044, %v6_1404c
  %.demorgan72 = and i1 %.demorgan71, %v6_14048
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_14030
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_14030, %bb80
  %v2_14050 = add i32 %v1_1403c.v6_1403c.v6_14044.v6_1404c, -1
  %v4_14050 = sub i32 0, %v1_1403c.v6_1403c.v6_14044.v6_1404c
  %v5_14050 = and i32 %v1_1403c.v6_1403c.v6_14044.v6_1404c, %v4_14050
  %v3_14054 = udiv i32 %v3_1405412, 16
  %v5_14058 = icmp slt i32 %v1_1403c.v6_1403c.v6_14044.v6_1404c, 1
  br i1 %v5_14058, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_14058 = add i32 %v6_14058, -4
  %v9_14058 = sub i32 3, %v6_14058
  %v10_14058 = and i32 %v9_14058, %v6_14058
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_14060 = phi i32 [ %v6_14058, %bb81 ], [ %v7_14058, %bb82 ]
  %v0_1405c15.in = phi i32 [ %v2_14050, %bb81 ], [ %v7_14058, %bb82 ]
  %v1_1405c14.in = phi i32 [ %v5_14050, %bb81 ], [ %v10_14058, %bb82 ]
  %v1_1405c14 = icmp slt i32 %v1_1405c14.in, 0
  %v0_1405c15 = icmp slt i32 %v0_1405c15.in, 0
  %v2_1405c = xor i1 %v0_1405c15, %v1_1405c14
  br i1 %v2_1405c, label %dec_label_pc_14060, label %dec_label_pc_14030

dec_label_pc_14060:                               ; preds = %bb83
  %v1_14060 = urem i32 %v0_14060, 4
  %v2_14060 = icmp eq i32 %v1_14060, 0
  br i1 %v2_14060, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_14060
  %v3_14064 = icmp eq i32 %v1_1403c.v6_1403c.v6_14044.v6_1404c, 0
  br i1 %v3_14064, label %bb76, label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %bb84, %dec_label_pc_14028
  %v0_14080 = phi i32 [ %v3_14054, %bb84 ], [ %v1_1401c, %dec_label_pc_14028 ]
  %v1_1407c = phi i32 [ %v1_1403c.v6_1403c.v6_14044.v6_1404c, %bb84 ], [ %v1_13fe8, %dec_label_pc_14028 ]
  %v0_1406c = phi i32 [ %v0_14060, %bb84 ], [ %v2_14028, %dec_label_pc_14028 ]
  %v5_14070 = icmp slt i32 %v0_1406c, -2
  br i1 %v5_14070, label %dec_label_pc_14090, label %dec_label_pc_14074

dec_label_pc_14074:                               ; preds = %dec_label_pc_1406c
  %v8_1406c = icmp eq i32 %v0_1406c, -2
  br i1 %v8_1406c, label %dec_label_pc_14084, label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_14074
  %v3_14078 = icmp ult i32 %v1_1407c, %v0_14080
  br i1 %v3_14078, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_14078
  %v2_14078 = sub i32 %v1_1407c, %v0_14080
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_14078, %bb85
  %v0_1408452 = phi i32 [ %v1_1407c, %dec_label_pc_14078 ], [ %v2_14078, %bb85 ]
  %v3_14080 = udiv i32 %v0_14080, 2
  br label %dec_label_pc_14084

dec_label_pc_14084:                               ; preds = %dec_label_pc_14074, %bb86
  %v0_1408c = phi i32 [ %v0_14080, %dec_label_pc_14074 ], [ %v3_14080, %bb86 ]
  %v1_14088 = phi i32 [ %v1_1407c, %dec_label_pc_14074 ], [ %v0_1408452, %bb86 ]
  %v3_14084 = icmp ult i32 %v1_14088, %v0_1408c
  br i1 %v3_14084, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_14084
  %v2_14084 = sub i32 %v1_14088, %v0_1408c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_14084, %bb87
  %v0_1409055 = phi i32 [ %v1_14088, %dec_label_pc_14084 ], [ %v2_14084, %bb87 ]
  %v3_1408c = udiv i32 %v0_1408c, 2
  br label %dec_label_pc_14090

dec_label_pc_14090:                               ; preds = %dec_label_pc_1406c, %bb88
  %v2_14094 = phi i32 [ %v0_14080, %dec_label_pc_1406c ], [ %v3_1408c, %bb88 ]
  %v1_14094 = phi i32 [ %v1_1407c, %dec_label_pc_1406c ], [ %v0_1409055, %bb88 ]
  %v3_14090 = icmp ult i32 %v1_14094, %v2_14094
  br i1 %v3_14090, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_14090
  %v2_14090 = sub i32 %v1_14094, %v2_14094
  br label %bb76

dec_label_pc_1409c:                               ; preds = %dec_label_pc_13fe0
  %v0_1409c = load i32, i32* @lr, align 4
  %v0_140a0 = call i32 @function_14190()
  call void @__pseudo_branch(i32 %v0_1409c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14094, { 1, 2, 0 }
  uselistorder i32 %v0_14080, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_14060, { 1, 0, 2 }
  uselistorder i32 %v7_14058, { 1, 0 }
  uselistorder i32 %v3_14054, { 1, 0 }
  uselistorder i32 %v1_1403c.v6_1403c.v6_14044.v6_1404c, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_14048, { 1, 0 }
  uselistorder i32 %v4_14040, { 1, 0 }
  uselistorder i32 %v4_14038, { 1, 0 }
  uselistorder i32 %v6_14058, { 3, 0, 2, 1 }
  uselistorder i32 %v2_14028, { 1, 0 }
  uselistorder i32 %v1_1401c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_14008, { 1, 0, 3, 2 }
  uselistorder i32 %v0_14014.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13fe8, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_14090, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_14084, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_14030, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_140ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140ac:
  store i32 %arg1, i32* @r0, align 4
  %v2_140ac = icmp eq i32 %arg2, 0
  br i1 %v2_140ac, label %dec_label_pc_14180, label %dec_label_pc_140b4

dec_label_pc_140b4:                               ; preds = %dec_label_pc_140ac
  %v1_140ac = icmp slt i32 %arg2, 0
  br i1 %v1_140ac, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_140b4
  %v2_140b4 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_140b4, %bb
  %v4_140cc = phi i32 [ %arg2, %dec_label_pc_140b4 ], [ %v2_140b4, %bb ]
  %v0_140b8 = load i32, i32* @r0, align 4
  %v1_140b8 = icmp slt i32 %v0_140b8, 0
  br i1 %v1_140b8, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_140bc = sub i32 0, %v0_140b8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_140c4 = phi i32 [ %v0_140b8, %bb79 ], [ %v2_140bc, %bb80 ]
  %v1_140c0 = add i32 %v4_140cc, -1
  %v7_140c0 = icmp eq i32 %v4_140cc, 1
  br i1 %v7_140c0, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_140c4 = icmp eq i32 %v1_140c4, %v4_140cc
  br i1 %v10_140c4, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_140c4 = icmp ult i32 %v1_140c4, %v4_140cc
  br i1 %v4_140c4, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_140cc = and i32 %v1_140c0, %v4_140cc
  %v8_140cc = icmp eq i32 %v6_140cc, 0
  br i1 %v8_140cc, label %.thread72, label %dec_label_pc_140dc.preheader

dec_label_pc_140dc.preheader:                     ; preds = %bb84
  %v2_140dc109 = icmp ugt i32 %v4_140cc, 268435455
  br i1 %v2_140dc109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_140d064 = phi i32 [ %v1_140c4, %bb84 ], [ 0, %.thread70 ]
  %v3_140d0 = and i32 %v1_140d064, %v1_140c0
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_140dc.preheader
  %v0_140f0.pr35.lcssa = phi i32 [ %v4_140cc, %dec_label_pc_140dc.preheader ], [ %v4_140e4, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_140dc.preheader ], [ %v2_140e89, %.thread2.thread7 ]
  br label %dec_label_pc_140f0thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_140dc.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_140e89, %.thread2.thread7 ], [ 0, %dec_label_pc_140dc.preheader ]
  %v0_140f0.pr35110 = phi i32 [ %v4_140e4, %.thread2.thread7 ], [ %v4_140cc, %dec_label_pc_140dc.preheader ]
  %v4_140e0 = icmp ult i32 %v0_140f0.pr35110, %v1_140c4
  br i1 %v4_140e0, label %bb86, label %dec_label_pc_140f0thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_140e4 = and i32 %v0_140f0.pr35110, 268435456
  %v3_140e4 = icmp eq i32 %v2_140e4, 0
  %v4_140e4 = mul i32 %v0_140f0.pr35110, 16
  br i1 %v3_140e4, label %.thread2.thread7, label %dec_label_pc_140f0.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_140e89 = add i32 %storemerge111, 4
  %v2_140dc = icmp ugt i32 %v4_140e4, 268435455
  br i1 %v2_140dc, label %.thread1, label %bb85

dec_label_pc_140f0thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_140f0thread-pre-split.loopexit

dec_label_pc_140f0thread-pre-split.loopexit:      ; preds = %dec_label_pc_140f0thread-pre-split.loopexit.loopexit, %.thread1
  %v0_140f0.pr35108 = phi i32 [ %v0_140f0.pr35.lcssa, %.thread1 ], [ %v0_140f0.pr35110, %dec_label_pc_140f0thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_140f0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_140f0thread-pre-split

dec_label_pc_140f0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_140f0thread-pre-split.loopexit
  %v1_140fc41 = phi i32 [ %storemerge105, %dec_label_pc_140f0thread-pre-split.loopexit ], [ %v2_140fc, %.thread4 ]
  %v2_140f436 = phi i32 [ %v1_140c4, %dec_label_pc_140f0thread-pre-split.loopexit ], [ %v2_140f4, %.thread4 ]
  %v0_140f0.pr = phi i32 [ %v0_140f0.pr35108, %dec_label_pc_140f0thread-pre-split.loopexit ], [ %v3_140f8, %.thread4 ]
  br label %dec_label_pc_140f0

dec_label_pc_140f0.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_140f0

dec_label_pc_140f0:                               ; preds = %dec_label_pc_140f0.loopexit, %dec_label_pc_140f0thread-pre-split
  %v0_14104.pr = phi i32 [ %v1_140fc41, %dec_label_pc_140f0thread-pre-split ], [ %storemerge111, %dec_label_pc_140f0.loopexit ]
  %v2_140f4 = phi i32 [ %v2_140f436, %dec_label_pc_140f0thread-pre-split ], [ %v1_140c4, %dec_label_pc_140f0.loopexit ]
  %v1_140f8 = phi i32 [ %v0_140f0.pr, %dec_label_pc_140f0thread-pre-split ], [ %v4_140e4, %dec_label_pc_140f0.loopexit ]
  %v2_140f0 = icmp slt i32 %v1_140f8, 0
  br i1 %v2_140f0, label %dec_label_pc_14104, label %bb87

bb87:                                             ; preds = %dec_label_pc_140f0
  %v4_140f4 = icmp ult i32 %v1_140f8, %v2_140f4
  br i1 %v4_140f4, label %.thread4, label %dec_label_pc_14104

.thread4:                                         ; preds = %bb87
  %v3_140f8 = mul i32 %v1_140f8, 2
  %v2_140fc = add i32 %v0_14104.pr, 1
  br label %dec_label_pc_140f0thread-pre-split

dec_label_pc_14104:                               ; preds = %bb87, %dec_label_pc_140f0
  %v2_14104 = add i32 %v0_14104.pr, -3
  %v5_14108 = icmp slt i32 %v0_14104.pr, 3
  br i1 %v5_14108, label %dec_label_pc_14148, label %dec_label_pc_1410c

dec_label_pc_1410c:                               ; preds = %dec_label_pc_14104, %bb91
  %v6_14134 = phi i32 [ %v0_1413c, %bb91 ], [ %v2_14104, %dec_label_pc_14104 ]
  %v1_14110 = phi i32 [ %v1_14118.v6_14118.v6_14120.v6_14128, %bb91 ], [ %v2_140f4, %dec_label_pc_14104 ]
  %v3_1413010 = phi i32 [ %v3_14130, %bb91 ], [ %v1_140f8, %dec_label_pc_14104 ]
  %v3_1410c = icmp ult i32 %v1_14110, %v3_1413010
  %v3_14110 = select i1 %v3_1410c, i32 0, i32 %v3_1413010
  %v1_14118 = sub i32 %v1_14110, %v3_14110
  %v4_14114 = udiv i32 %v3_1413010, 2
  %v6_14114 = icmp ult i32 %v1_14118, %v4_14114
  %v6_14118 = select i1 %v6_14114, i32 0, i32 %v4_14114
  %v1_14118.v6_14118 = sub i32 %v1_14118, %v6_14118
  %.demorgan = and i1 %v3_1410c, %v6_14114
  %v4_1411c = udiv i32 %v3_1413010, 4
  %v6_1411c = icmp ult i32 %v1_14118.v6_14118, %v4_1411c
  %v6_14120 = select i1 %v6_1411c, i32 0, i32 %v4_1411c
  %v1_14118.v6_14118.v6_14120 = sub i32 %v1_14118.v6_14118, %v6_14120
  %.demorgan76 = and i1 %.demorgan, %v6_1411c
  %v4_14124 = udiv i32 %v3_1413010, 8
  %v6_14124 = icmp ult i32 %v1_14118.v6_14118.v6_14120, %v4_14124
  %v6_14128 = select i1 %v6_14124, i32 0, i32 %v4_14124
  %v1_14118.v6_14118.v6_14120.v6_14128 = sub i32 %v1_14118.v6_14118.v6_14120, %v6_14128
  %.demorgan77 = and i1 %.demorgan76, %v6_14124
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_1410c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_1410c, %bb88
  %v2_1412c = add i32 %v1_14118.v6_14118.v6_14120.v6_14128, -1
  %v4_1412c = sub i32 0, %v1_14118.v6_14118.v6_14120.v6_14128
  %v5_1412c = and i32 %v1_14118.v6_14118.v6_14120.v6_14128, %v4_1412c
  %v3_14130 = udiv i32 %v3_1413010, 16
  %v5_14134 = icmp slt i32 %v1_14118.v6_14118.v6_14120.v6_14128, 1
  br i1 %v5_14134, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_14134 = add i32 %v6_14134, -4
  %v9_14134 = sub i32 3, %v6_14134
  %v10_14134 = and i32 %v9_14134, %v6_14134
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_1413c = phi i32 [ %v6_14134, %bb89 ], [ %v7_14134, %bb90 ]
  %v0_1413813.in = phi i32 [ %v2_1412c, %bb89 ], [ %v7_14134, %bb90 ]
  %v1_1413812.in = phi i32 [ %v5_1412c, %bb89 ], [ %v10_14134, %bb90 ]
  %v1_1413812 = icmp slt i32 %v1_1413812.in, 0
  %v0_1413813 = icmp slt i32 %v0_1413813.in, 0
  %v2_14138 = xor i1 %v0_1413813, %v1_1413812
  br i1 %v2_14138, label %dec_label_pc_1413c, label %dec_label_pc_1410c

dec_label_pc_1413c:                               ; preds = %bb91
  %v1_1413c = urem i32 %v0_1413c, 4
  %v2_1413c = icmp eq i32 %v1_1413c, 0
  br i1 %v2_1413c, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_1413c
  %v3_14140 = icmp eq i32 %v1_14118.v6_14118.v6_14120.v6_14128, 0
  br i1 %v3_14140, label %.thread6, label %dec_label_pc_14148

dec_label_pc_14148:                               ; preds = %bb92, %dec_label_pc_14104
  %v0_1415c = phi i32 [ %v3_14130, %bb92 ], [ %v1_140f8, %dec_label_pc_14104 ]
  %v1_14158 = phi i32 [ %v1_14118.v6_14118.v6_14120.v6_14128, %bb92 ], [ %v2_140f4, %dec_label_pc_14104 ]
  %v0_14148 = phi i32 [ %v0_1413c, %bb92 ], [ %v2_14104, %dec_label_pc_14104 ]
  %v5_1414c = icmp slt i32 %v0_14148, -2
  br i1 %v5_1414c, label %dec_label_pc_1416c, label %dec_label_pc_14150

dec_label_pc_14150:                               ; preds = %dec_label_pc_14148
  %v8_14148 = icmp eq i32 %v0_14148, -2
  br i1 %v8_14148, label %dec_label_pc_14160, label %dec_label_pc_14154

dec_label_pc_14154:                               ; preds = %dec_label_pc_14150
  %v3_14154 = icmp ult i32 %v1_14158, %v0_1415c
  br i1 %v3_14154, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_14154
  %v2_14154 = sub i32 %v1_14158, %v0_1415c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_14154, %bb93
  %v0_1416054 = phi i32 [ %v1_14158, %dec_label_pc_14154 ], [ %v2_14154, %bb93 ]
  %v3_1415c = udiv i32 %v0_1415c, 2
  br label %dec_label_pc_14160

dec_label_pc_14160:                               ; preds = %dec_label_pc_14150, %bb94
  %v0_14168 = phi i32 [ %v0_1415c, %dec_label_pc_14150 ], [ %v3_1415c, %bb94 ]
  %v1_14164 = phi i32 [ %v1_14158, %dec_label_pc_14150 ], [ %v0_1416054, %bb94 ]
  %v3_14160 = icmp ult i32 %v1_14164, %v0_14168
  br i1 %v3_14160, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_14160
  %v2_14160 = sub i32 %v1_14164, %v0_14168
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_14160, %bb95
  %v0_1416c57 = phi i32 [ %v1_14164, %dec_label_pc_14160 ], [ %v2_14160, %bb95 ]
  %v3_14168 = udiv i32 %v0_14168, 2
  br label %dec_label_pc_1416c

dec_label_pc_1416c:                               ; preds = %dec_label_pc_14148, %bb96
  %v2_14170 = phi i32 [ %v0_1415c, %dec_label_pc_14148 ], [ %v3_14168, %bb96 ]
  %v1_14170 = phi i32 [ %v1_14158, %dec_label_pc_14148 ], [ %v0_1416c57, %bb96 ]
  %v3_1416c = icmp ult i32 %v1_14170, %v2_14170
  br i1 %v3_1416c, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_1416c
  %v2_1416c = sub i32 %v1_14170, %v2_14170
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1416c, %bb83, %.thread72, %dec_label_pc_1413c, %bb92, %bb97
  %v1_14178 = phi i32 [ %v1_14118.v6_14118.v6_14120.v6_14128, %dec_label_pc_1413c ], [ 0, %bb92 ], [ %v1_14170, %dec_label_pc_1416c ], [ %v2_1416c, %bb97 ], [ %v3_140d0, %.thread72 ], [ %v1_140c4, %bb83 ]
  br i1 %v1_140b8, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_14178 = sub i32 0, %v1_14178
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_1417c = phi i32 [ %v1_14178, %.thread6 ], [ %v2_14178, %bb98 ]
  ret i32 %v1_1417c

dec_label_pc_14180:                               ; preds = %dec_label_pc_140ac
  %v0_14180 = load i32, i32* @lr, align 4
  %v0_14184 = call i32 @function_14190()
  call void @__pseudo_branch(i32 %v0_14180)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_1415c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1413c, { 1, 0, 2 }
  uselistorder i32 %v7_14134, { 1, 0 }
  uselistorder i32 %v3_14130, { 1, 0 }
  uselistorder i32 %v1_14118.v6_14118.v6_14120.v6_14128, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_14124, { 1, 0 }
  uselistorder i32 %v4_1411c, { 1, 0 }
  uselistorder i32 %v4_14114, { 1, 0 }
  uselistorder i32 %v6_14134, { 3, 0, 2, 1 }
  uselistorder i32 %v2_14104, { 1, 0 }
  uselistorder i32 %v1_140f8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_140f4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_140e4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_140f0.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_140c4, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_140cc, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_14190, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_1416c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_14160, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_1410c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_14190() local_unnamed_addr {
dec_label_pc_14190:
  %v1_14190 = load i32, i32* @r0, align 4
  ret i32 %v1_14190
}

define i32 @function_14194(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14194:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_14194 = load i32, i32* @r2, align 4
  %v1_141a4 = add i32 %arg2, -12
  store i32 %v6_14194, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_141a4, 2
  br i1 %tmp, label %dec_label_pc_141cc, label %dec_label_pc_141c4

dec_label_pc_141c4:                               ; preds = %dec_label_pc_14194
  %v0_141c4 = call i32 @function_14208()
  br label %dec_label_pc_141f8

dec_label_pc_141cc:                               ; preds = %dec_label_pc_14194
  %v2_141d4 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_141d4, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_141d4, -4095
  br i1 %tmp8, label %dec_label_pc_141f8, label %dec_label_pc_141e4

dec_label_pc_141e4:                               ; preds = %dec_label_pc_141cc
  %v0_141e4 = call i32 @function_14858()
  %v0_141e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_141e8 = sub i32 0, %v0_141e8
  %v2_141ec = inttoptr i32 %v0_141e4 to i32*
  store i32 %v1_141e8, i32* %v2_141ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_141f8

dec_label_pc_141f8:                               ; preds = %dec_label_pc_141e4, %dec_label_pc_141cc, %dec_label_pc_141c4
  %storemerge = phi i32 [ %v0_141c4, %dec_label_pc_141c4 ], [ %v2_141d4, %dec_label_pc_141cc ], [ -1, %dec_label_pc_141e4 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_141d4, { 1, 0, 2 }
}

define i32 @function_14208() local_unnamed_addr {
dec_label_pc_14208:
  %r4.global-to-local = alloca i32, align 4
  %v0_14228 = load i32, i32* @r0, align 4
  store i32 %v0_14228, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14228, -4095
  br i1 %tmp, label %dec_label_pc_14244, label %dec_label_pc_14234

dec_label_pc_14234:                               ; preds = %dec_label_pc_14208
  %v0_14234 = call i32 @function_14858()
  %v0_14238 = load i32, i32* %r4.global-to-local, align 4
  %v1_14238 = sub i32 0, %v0_14238
  %v2_1423c = inttoptr i32 %v0_14234 to i32*
  store i32 %v1_14238, i32* %v2_1423c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14244

dec_label_pc_14244:                               ; preds = %dec_label_pc_14208, %dec_label_pc_14234
  %v0_14244 = phi i32 [ %v0_14228, %dec_label_pc_14208 ], [ -1, %dec_label_pc_14234 ]
  ret i32 %v0_14244

; uselistorder directives
  uselistorder i32 %v0_14228, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14244, { 1, 0 }
}

define i32 @function_14258(i8* %arg1) local_unnamed_addr {
dec_label_pc_14258:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14258 = load i32, i32* @r4, align 4
  store i32 %v3_14258, i32* %stack_var_-8, align 4
  %v3_1425c = call i32 @chdir(i8* %arg1)
  store i32 %v3_1425c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1425c, -4095
  br i1 %tmp, label %dec_label_pc_1427c, label %dec_label_pc_1426c

dec_label_pc_1426c:                               ; preds = %dec_label_pc_14258
  %v0_1426c = call i32 @function_14858()
  %v0_14270 = load i32, i32* %r4.global-to-local, align 4
  %v1_14270 = sub i32 0, %v0_14270
  %v2_14274 = inttoptr i32 %v0_1426c to i32*
  store i32 %v1_14270, i32* %v2_14274, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1427c

dec_label_pc_1427c:                               ; preds = %dec_label_pc_14258, %dec_label_pc_1426c
  %v0_1427c = phi i32 [ %v3_1425c, %dec_label_pc_14258 ], [ -1, %dec_label_pc_1426c ]
  %v2_14280 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14280, i32* @r4, align 4
  ret i32 %v0_1427c

; uselistorder directives
  uselistorder i32 %v3_1425c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1427c, { 1, 0 }
}

define i32 @function_14284(i32 %arg1) local_unnamed_addr {
dec_label_pc_14284:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14284 = load i32, i32* @r4, align 4
  store i32 %v3_14284, i32* %stack_var_-8, align 4
  %v1_14288 = call i32 @close(i32 %arg1)
  store i32 %v1_14288, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_14288, -4095
  br i1 %tmp, label %dec_label_pc_142a8, label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %dec_label_pc_14284
  %v0_14298 = call i32 @function_14858()
  %v0_1429c = load i32, i32* %r4.global-to-local, align 4
  %v1_1429c = sub i32 0, %v0_1429c
  %v2_142a0 = inttoptr i32 %v0_14298 to i32*
  store i32 %v1_1429c, i32* %v2_142a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142a8

dec_label_pc_142a8:                               ; preds = %dec_label_pc_14284, %dec_label_pc_14298
  %v0_142a8 = phi i32 [ %v1_14288, %dec_label_pc_14284 ], [ -1, %dec_label_pc_14298 ]
  %v2_142ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142ac, i32* @r4, align 4
  ret i32 %v0_142a8

; uselistorder directives
  uselistorder i32 %v1_14288, { 1, 0, 2 }
  uselistorder label %dec_label_pc_142a8, { 1, 0 }
}

define i32 @function_142b0() local_unnamed_addr {
dec_label_pc_142b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_142b0 = load i32, i32* @r4, align 4
  store i32 %v3_142b0, i32* %stack_var_-8, align 4
  %v0_142b4 = call i32 @fork()
  store i32 %v0_142b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_142b4, -4095
  br i1 %tmp, label %dec_label_pc_142d4, label %dec_label_pc_142c4

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142b0
  %v0_142c4 = call i32 @function_14858()
  %v0_142c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_142c8 = sub i32 0, %v0_142c8
  %v2_142cc = inttoptr i32 %v0_142c4 to i32*
  store i32 %v1_142c8, i32* %v2_142cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142d4

dec_label_pc_142d4:                               ; preds = %dec_label_pc_142b0, %dec_label_pc_142c4
  %v0_142d4 = phi i32 [ %v0_142b4, %dec_label_pc_142b0 ], [ -1, %dec_label_pc_142c4 ]
  %v2_142d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142d8, i32* @r4, align 4
  ret i32 %v0_142d4

; uselistorder directives
  uselistorder i32 %v0_142b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_142d4, { 1, 0 }
}

define i32 @function_142dc() local_unnamed_addr {
dec_label_pc_142dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_142dc = load i32, i32* @r4, align 4
  store i32 %v3_142dc, i32* %stack_var_-8, align 4
  %v0_142e0 = call i32 @getpid()
  store i32 %v0_142e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_142e0, -4095
  br i1 %tmp, label %dec_label_pc_14300, label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142dc
  %v0_142f0 = call i32 @function_14858()
  %v0_142f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_142f4 = sub i32 0, %v0_142f4
  %v2_142f8 = inttoptr i32 %v0_142f0 to i32*
  store i32 %v1_142f4, i32* %v2_142f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14300

dec_label_pc_14300:                               ; preds = %dec_label_pc_142dc, %dec_label_pc_142f0
  %v0_14300 = phi i32 [ %v0_142e0, %dec_label_pc_142dc ], [ -1, %dec_label_pc_142f0 ]
  %v2_14304 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14304, i32* @r4, align 4
  ret i32 %v0_14300

; uselistorder directives
  uselistorder i32 %v0_142e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14300, { 1, 0 }
}

define i32 @function_14308() local_unnamed_addr {
dec_label_pc_14308:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14308 = load i32, i32* @r4, align 4
  store i32 %v3_14308, i32* %stack_var_-8, align 4
  %v0_1430c = call i32 @getppid()
  store i32 %v0_1430c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1430c, -4095
  br i1 %tmp, label %dec_label_pc_1432c, label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_14308
  %v0_1431c = call i32 @function_14858()
  %v0_14320 = load i32, i32* %r4.global-to-local, align 4
  %v1_14320 = sub i32 0, %v0_14320
  %v2_14324 = inttoptr i32 %v0_1431c to i32*
  store i32 %v1_14320, i32* %v2_14324, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1432c

dec_label_pc_1432c:                               ; preds = %dec_label_pc_14308, %dec_label_pc_1431c
  %v0_1432c = phi i32 [ %v0_1430c, %dec_label_pc_14308 ], [ -1, %dec_label_pc_1431c ]
  %v2_14330 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14330, i32* @r4, align 4
  ret i32 %v0_1432c

; uselistorder directives
  uselistorder i32 %v0_1430c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1432c, { 1, 0 }
}

define i32 @function_14334(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14334:
  %r4.global-to-local = alloca i32, align 4
  %v2_14350 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_14350, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14350, -4095
  br i1 %tmp, label %dec_label_pc_14370, label %dec_label_pc_14360

dec_label_pc_14360:                               ; preds = %dec_label_pc_14334
  %v0_14360 = call i32 @function_14858()
  %v0_14364 = load i32, i32* %r4.global-to-local, align 4
  %v1_14364 = sub i32 0, %v0_14364
  %v2_14368 = inttoptr i32 %v0_14360 to i32*
  store i32 %v1_14364, i32* %v2_14368, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14370

dec_label_pc_14370:                               ; preds = %dec_label_pc_14334, %dec_label_pc_14360
  %v0_14370 = phi i32 [ %v2_14350, %dec_label_pc_14334 ], [ -1, %dec_label_pc_14360 ]
  ret i32 %v0_14370

; uselistorder directives
  uselistorder i32 %v2_14350, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14370, { 1, 0 }
}

define i32 @function_14384(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14384:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14384 = load i32, i32* @r4, align 4
  store i32 %v3_14384, i32* %stack_var_-8, align 4
  %v2_14388 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_1438c = icmp eq i32 %v2_14388, -4096
  store i1 %v7_1438c, i1* @cpsr_z, align 1
  store i32 %v2_14388, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14388, -4095
  br i1 %tmp, label %dec_label_pc_143a8, label %dec_label_pc_14398

dec_label_pc_14398:                               ; preds = %dec_label_pc_14384
  %v0_14398 = call i32 @function_14858()
  %v0_1439c = load i32, i32* %r4.global-to-local, align 4
  %v1_1439c = sub i32 0, %v0_1439c
  %v2_143a0 = inttoptr i32 %v0_14398 to i32*
  store i32 %v1_1439c, i32* %v2_143a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %dec_label_pc_14384, %dec_label_pc_14398
  %v0_143a8 = phi i32 [ %v2_14388, %dec_label_pc_14384 ], [ -1, %dec_label_pc_14398 ]
  %v2_143ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_143ac, i32* @r4, align 4
  ret i32 %v0_143a8

; uselistorder directives
  uselistorder i32 %v2_14388, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_143a8, { 1, 0 }
}

define i32 @function_143b0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_143b0:
  %r4.global-to-local = alloca i32, align 4
  %v1_143c0 = and i32 %arg2, 64
  %v2_143c0 = icmp eq i32 %v1_143c0, 0
  br i1 %v2_143c0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_143b0
  %v6_143b0 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_143b0, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_143b0, %bb
  %v0_143d0 = phi i32 [ 0, %dec_label_pc_143b0 ], [ %phitmp, %bb ]
  store i32 %v0_143d0, i32* @r2, align 4
  %v4_143d8 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_143dc = icmp eq i32 %v4_143d8, -4096
  store i1 %v7_143dc, i1* @cpsr_z, align 1
  store i32 %v4_143d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_143d8, -4095
  br i1 %tmp, label %dec_label_pc_143f8, label %dec_label_pc_143e8

dec_label_pc_143e8:                               ; preds = %.thread1
  %v0_143e8 = call i32 @function_14858()
  %v0_143ec = load i32, i32* %r4.global-to-local, align 4
  %v1_143ec = sub i32 0, %v0_143ec
  %v2_143f0 = inttoptr i32 %v0_143e8 to i32*
  store i32 %v1_143ec, i32* %v2_143f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143f8

dec_label_pc_143f8:                               ; preds = %.thread1, %dec_label_pc_143e8
  %v0_143f8 = phi i32 [ %v4_143d8, %.thread1 ], [ -1, %dec_label_pc_143e8 ]
  ret i32 %v0_143f8

; uselistorder directives
  uselistorder i32 %v4_143d8, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_143f8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_1440c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1440c:
  store i32 %arg1, i32* @r2, align 4
  %v0_14414 = load i32, i32* @r0, align 4
  %v2_14414 = inttoptr i32 %v0_14414 to i8*
  %v3_14414 = call i32 @function_143b0(i8* %v2_14414, i32 577)
  %v0_14418 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14418, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_1440c
  %v6_14418 = and i32 %v3_14414, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_1440c, %bb
  %v7_14418 = phi i32 [ %v3_14414, %dec_label_pc_1440c ], [ %v6_14418, %bb ]
  ret i32 %v7_14418

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1441c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1441c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1441c = load i32, i32* @r4, align 4
  store i32 %v3_1441c, i32* %stack_var_-8, align 4
  %v4_14424 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_14424, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14424, -4095
  br i1 %tmp, label %dec_label_pc_14444, label %dec_label_pc_14434

dec_label_pc_14434:                               ; preds = %dec_label_pc_1441c
  %v0_14434 = call i32 @function_14858()
  %v0_14438 = load i32, i32* %r4.global-to-local, align 4
  %v1_14438 = sub i32 0, %v0_14438
  %v2_1443c = inttoptr i32 %v0_14434 to i32*
  store i32 %v1_14438, i32* %v2_1443c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14444

dec_label_pc_14444:                               ; preds = %dec_label_pc_1441c, %dec_label_pc_14434
  %v0_14444 = phi i32 [ %v4_14424, %dec_label_pc_1441c ], [ -1, %dec_label_pc_14434 ]
  %v2_14448 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14448, i32* @r4, align 4
  ret i32 %v0_14444

; uselistorder directives
  uselistorder i32 %v4_14424, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14444, { 1, 0 }
}

define i32 @function_1444c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1444c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1444c = load i32, i32* @r4, align 4
  store i32 %v3_1444c, i32* %stack_var_-8, align 4
  %v4_14450 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_14450, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14450, -4095
  br i1 %tmp, label %dec_label_pc_14470, label %dec_label_pc_14460

dec_label_pc_14460:                               ; preds = %dec_label_pc_1444c
  %v0_14460 = call i32 @function_14858()
  %v0_14464 = load i32, i32* %r4.global-to-local, align 4
  %v1_14464 = sub i32 0, %v0_14464
  %v2_14468 = inttoptr i32 %v0_14460 to i32*
  store i32 %v1_14464, i32* %v2_14468, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14470

dec_label_pc_14470:                               ; preds = %dec_label_pc_1444c, %dec_label_pc_14460
  %v0_14470 = phi i32 [ %v4_14450, %dec_label_pc_1444c ], [ -1, %dec_label_pc_14460 ]
  %v2_14474 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14474, i32* @r4, align 4
  ret i32 %v0_14470

; uselistorder directives
  uselistorder i32 %v4_14450, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14470, { 1, 0 }
}

define i32 @function_14478(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14478:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_14478 = load i32, i32* @r4, align 4
  store i32 %v3_14478, i32* %stack_var_-8, align 4
  %v7_1447c = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_1447c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_1447c, -4095
  br i1 %tmp6, label %dec_label_pc_1449c, label %dec_label_pc_1448c

dec_label_pc_1448c:                               ; preds = %dec_label_pc_14478
  %v0_1448c = call i32 @function_14858()
  %v0_14490 = load i32, i32* %r4.global-to-local, align 4
  %v1_14490 = sub i32 0, %v0_14490
  %v2_14494 = inttoptr i32 %v0_1448c to i32*
  store i32 %v1_14490, i32* %v2_14494, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1449c

dec_label_pc_1449c:                               ; preds = %dec_label_pc_14478, %dec_label_pc_1448c
  %v0_1449c = phi i32 [ %v7_1447c, %dec_label_pc_14478 ], [ -1, %dec_label_pc_1448c ]
  %v2_144a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144a0, i32* @r4, align 4
  ret i32 %v0_1449c

; uselistorder directives
  uselistorder i32 %v7_1447c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1449c, { 1, 0 }
}

define i32 @function_144a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_144a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144a4 = load i32, i32* @r4, align 4
  store i32 %v3_144a4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_144cc, label %dec_label_pc_144bc

dec_label_pc_144bc:                               ; preds = %dec_label_pc_144a4
  %v0_144bc = call i32 @function_14858()
  %v0_144c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_144c0 = sub i32 0, %v0_144c0
  %v2_144c4 = inttoptr i32 %v0_144bc to i32*
  store i32 %v1_144c0, i32* %v2_144c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_144d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_144cc

dec_label_pc_144cc:                               ; preds = %dec_label_pc_144a4, %dec_label_pc_144bc
  %v2_144d0 = phi i32 [ %v3_144a4, %dec_label_pc_144a4 ], [ %v2_144d0.pre, %dec_label_pc_144bc ]
  %v0_144cc = phi i32 [ %arg1, %dec_label_pc_144a4 ], [ -1, %dec_label_pc_144bc ]
  store i32 %v2_144d0, i32* @r4, align 4
  ret i32 %v0_144cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_144cc, { 1, 0 }
}

define i32 @function_144d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_144d4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144d4 = load i32, i32* @r4, align 4
  store i32 %v3_144d4, i32* %stack_var_-8, align 4
  %v0_144d8 = call i32 @setsid()
  store i32 %v0_144d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_144d8, -4095
  br i1 %tmp, label %dec_label_pc_144f8, label %dec_label_pc_144e8

dec_label_pc_144e8:                               ; preds = %dec_label_pc_144d4
  %v0_144e8 = call i32 @function_14858()
  %v0_144ec = load i32, i32* %r4.global-to-local, align 4
  %v1_144ec = sub i32 0, %v0_144ec
  %v2_144f0 = inttoptr i32 %v0_144e8 to i32*
  store i32 %v1_144ec, i32* %v2_144f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_144f8

dec_label_pc_144f8:                               ; preds = %dec_label_pc_144d4, %dec_label_pc_144e8
  %v0_144f8 = phi i32 [ %v0_144d8, %dec_label_pc_144d4 ], [ -1, %dec_label_pc_144e8 ]
  %v2_144fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144fc, i32* @r4, align 4
  ret i32 %v0_144f8

; uselistorder directives
  uselistorder i32 %v0_144d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_144f8, { 1, 0 }
}

define i32 @function_14500(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14500:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14500 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_14500, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14500
  %v3_145085 = load i32, i32* @r4, align 4
  store i32 %v3_145085, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14528

bb:                                               ; preds = %dec_label_pc_14500
  %v3_14508 = load i32, i32* @r4, align 4
  store i32 %v3_14508, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_14528, label %dec_label_pc_14514

dec_label_pc_14514:                               ; preds = %bb
  %v0_14514 = call i32 @function_14858()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_14520 = inttoptr i32 %v0_14514 to i32*
  store i32 22, i32* %v2_14520, align 4
  %v0_1454c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1454c

dec_label_pc_14528:                               ; preds = %.thread, %bb
  %v7_14528 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_14528, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_14528, -4095
  br i1 %tmp13, label %dec_label_pc_14548, label %dec_label_pc_14538

dec_label_pc_14538:                               ; preds = %dec_label_pc_14528
  %v0_14538 = call i32 @function_14858()
  %v0_1453c = load i32, i32* %r4.global-to-local, align 4
  %v1_1453c = sub i32 0, %v0_1453c
  %v2_14540 = inttoptr i32 %v0_14538 to i32*
  store i32 %v1_1453c, i32* %v2_14540, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14548

dec_label_pc_14548:                               ; preds = %dec_label_pc_14528, %dec_label_pc_14538
  %v0_14548 = phi i32 [ %v7_14528, %dec_label_pc_14528 ], [ -1, %dec_label_pc_14538 ]
  store i32 %v0_14548, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1454c

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14514, %dec_label_pc_14548
  %v0_1454c = phi i32 [ %v0_1454c.pre, %dec_label_pc_14514 ], [ %v0_14548, %dec_label_pc_14548 ]
  %v2_14550 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14550, i32* @r4, align 4
  ret i32 %v0_1454c

; uselistorder directives
  uselistorder i32 %v7_14528, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1454c, { 1, 0 }
  uselistorder label %dec_label_pc_14548, { 1, 0 }
  uselistorder label %dec_label_pc_14528, { 1, 0 }
}

define i32 @function_14554(i32* %arg1) local_unnamed_addr {
dec_label_pc_14554:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14554 = load i32, i32* @r4, align 4
  store i32 %v3_14554, i32* %stack_var_-8, align 4
  %v2_14558 = call i32 @time(i32* %arg1)
  store i32 %v2_14558, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14558, -4095
  br i1 %tmp, label %dec_label_pc_14578, label %dec_label_pc_14568

dec_label_pc_14568:                               ; preds = %dec_label_pc_14554
  %v0_14568 = call i32 @function_14858()
  %v0_1456c = load i32, i32* %r4.global-to-local, align 4
  %v1_1456c = sub i32 0, %v0_1456c
  %v2_14570 = inttoptr i32 %v0_14568 to i32*
  store i32 %v1_1456c, i32* %v2_14570, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14578

dec_label_pc_14578:                               ; preds = %dec_label_pc_14554, %dec_label_pc_14568
  %v0_14578 = phi i32 [ %v2_14558, %dec_label_pc_14554 ], [ -1, %dec_label_pc_14568 ]
  %v2_1457c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1457c, i32* @r4, align 4
  ret i32 %v0_14578

; uselistorder directives
  uselistorder i32 %v2_14558, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14578, { 1, 0 }
}

define i32 @function_14580(i8* %arg1) local_unnamed_addr {
dec_label_pc_14580:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14580 = load i32, i32* @r4, align 4
  store i32 %v3_14580, i32* %stack_var_-8, align 4
  %v3_14584 = call i32 @unlink(i8* %arg1)
  store i32 %v3_14584, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14584, -4095
  br i1 %tmp, label %dec_label_pc_145a4, label %dec_label_pc_14594

dec_label_pc_14594:                               ; preds = %dec_label_pc_14580
  %v0_14594 = call i32 @function_14858()
  %v0_14598 = load i32, i32* %r4.global-to-local, align 4
  %v1_14598 = sub i32 0, %v0_14598
  %v2_1459c = inttoptr i32 %v0_14594 to i32*
  store i32 %v1_14598, i32* %v2_1459c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145a4

dec_label_pc_145a4:                               ; preds = %dec_label_pc_14580, %dec_label_pc_14594
  %v0_145a4 = phi i32 [ %v3_14584, %dec_label_pc_14580 ], [ -1, %dec_label_pc_14594 ]
  %v2_145a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_145a8, i32* @r4, align 4
  ret i32 %v0_145a4

; uselistorder directives
  uselistorder i32 %v3_14584, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145a4, { 1, 0 }
}

define i32 @function_145ac(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_145ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145ac = load i32, i32* @r4, align 4
  store i32 %v3_145ac, i32* %stack_var_-8, align 4
  %v4_145b0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_145b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_145b0, -4095
  br i1 %tmp, label %dec_label_pc_145d0, label %dec_label_pc_145c0

dec_label_pc_145c0:                               ; preds = %dec_label_pc_145ac
  %v0_145c0 = call i32 @function_14858()
  %v0_145c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_145c4 = sub i32 0, %v0_145c4
  %v2_145c8 = inttoptr i32 %v0_145c0 to i32*
  store i32 %v1_145c4, i32* %v2_145c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145d0

dec_label_pc_145d0:                               ; preds = %dec_label_pc_145ac, %dec_label_pc_145c0
  %v0_145d0 = phi i32 [ %v4_145b0, %dec_label_pc_145ac ], [ -1, %dec_label_pc_145c0 ]
  %v2_145d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_145d4, i32* @r4, align 4
  ret i32 %v0_145d0

; uselistorder directives
  uselistorder i32 %v4_145b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145d0, { 1, 0 }
}

define i32 @function_145d8(i32* %arg1) local_unnamed_addr {
dec_label_pc_145d8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_145d8 = load i32, i32* @r4, align 4
  store i32 %v3_145d8, i32* %stack_var_-20, align 4
  %v6_145d8 = load i32, i32* @r5, align 4
  %v9_145d8 = load i32, i32* @r6, align 4
  %v12_145d8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_145e0 = load i32, i32* %arg1, align 4
  store i32 %v2_145e0, i32* %r4.global-to-local, align 4
  %v2_145e4 = ptrtoint i32* %stack_var_-36 to i32
  %v1_145e8 = add i32 %tmp, 24
  store i32 %v1_145e8, i32* @r6, align 4
  %v3_145ec = icmp eq i32 %v2_145e0, -1
  store i32 %v2_145e4, i32* @r7, align 4
  store i32 %v1_145e8, i32* %r2.global-to-local, align 4
  store i32 %v2_145e4, i32* @r0, align 4
  br i1 %v3_145ec, label %dec_label_pc_14604, label %dec_label_pc_14618

dec_label_pc_14604:                               ; preds = %dec_label_pc_145d8
  %v0_14604 = call i32 @function_14858()
  %v0_1460c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1460c, i32* %r2.global-to-local, align 4
  %v2_14610 = inttoptr i32 %v0_14604 to i32*
  store i32 9, i32* %v2_14610, align 4
  %v0_14670.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14670

dec_label_pc_14618:                               ; preds = %dec_label_pc_145d8
  %v8_14620 = call i32 @function_158cc(i32 %v2_145e4, i32 ptrtoint (i32* @global_var_158c4.596 to i32), i32 %v1_145e8, i32 88268, i32 %v3_145d8, i32 %v6_145d8, i32 %v9_145d8)
  %v1_14630 = call i32 @function_158c4()
  %v0_1463c = load i32, i32* @r5, align 4
  %v1_1463c = inttoptr i32 %v0_1463c to i32*
  %v2_1463c = load i32, i32* %v1_1463c, align 4
  store i32 %v2_1463c, i32* @r4, align 4
  store i32 %v2_145e4, i32* @r0, align 4
  store i32 -1, i32* %v1_1463c, align 4
  store i32 ptrtoint (i32* @global_var_14654.600 to i32), i32* @lr, align 4
  %v8_14650 = call i32 @function_158cc(i32 %v2_145e4, i32 1, i32 %v1_145e8, i32 88268, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_14654 = load i32, i32* @r5, align 4
  %v1_14654 = add i32 %v0_14654, 12
  %v2_14654 = inttoptr i32 %v1_14654 to i32*
  %v3_14654 = load i32, i32* %v2_14654, align 4
  store i32 %v3_14654, i32* @r0, align 4
  %v0_14658 = call i32 @function_14edc()
  %v0_1465c = load i32, i32* @r5, align 4
  store i32 %v0_1465c, i32* @r0, align 4
  %v0_14660 = call i32 @function_14edc()
  %v0_14664 = load i32, i32* @r4, align 4
  %v1_14668 = call i32 @function_14284(i32 %v0_14664)
  store i32 %v1_14668, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14670

dec_label_pc_14670:                               ; preds = %dec_label_pc_14604, %dec_label_pc_14618
  %v0_14670 = phi i32 [ %v0_14670.pre, %dec_label_pc_14604 ], [ %v1_14668, %dec_label_pc_14618 ]
  %v2_14678 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14678, i32* @r4, align 4
  store i32 %v6_145d8, i32* @r5, align 4
  store i32 %v9_145d8, i32* @r6, align 4
  store i32 %v12_145d8, i32* @r7, align 4
  ret i32 %v0_14670

; uselistorder directives
  uselistorder i32 %v1_145e8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_145e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_145d8, { 1, 0 }
  uselistorder i32 %v6_145d8, { 1, 0 }
  uselistorder label %dec_label_pc_14670, { 1, 0 }
}

define i32 @function_1468c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1468c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_1468c = load i32, i32* @r4, align 4
  %v9_1468c = load i32, i32* @r6, align 4
  %v12_1468c = load i32, i32* @r7, align 4
  %v0_14698 = load i32, i32* @r0, align 4
  %v2_14698 = inttoptr i32 %v0_14698 to i8*
  %v3_14698 = call i32 @function_143b0(i8* %v2_14698, i32 18432)
  store i32 %v3_14698, i32* @r0, align 4
  store i32 %v3_14698, i32* @r7, align 4
  %v1_1469c = icmp slt i32 %v3_14698, 0
  br i1 %v1_1469c, label %.thread1, label %dec_label_pc_146a8

.thread1:                                         ; preds = %dec_label_pc_1468c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_14778

dec_label_pc_146a8:                               ; preds = %dec_label_pc_1468c
  %v2_14694 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_14694, i32* @r1, align 4
  %v0_146ac = call i32 @function_15cf0()
  %v1_146b0 = icmp slt i32 %v0_146ac, 0
  br i1 %v1_146b0, label %dec_label_pc_146d0, label %dec_label_pc_146b8

dec_label_pc_146b8:                               ; preds = %dec_label_pc_146a8
  %v0_146b8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_146c4 = call i32 @function_14194(i32 %v0_146b8, i32 2)
  %v1_146c8 = icmp slt i32 %v2_146c4, 0
  br i1 %v1_146c8, label %dec_label_pc_146d0, label %dec_label_pc_146f0

dec_label_pc_146d0:                               ; preds = %dec_label_pc_146b8, %dec_label_pc_146a8
  %v0_146d0 = call i32 @function_14858()
  store i32 %v0_146d0, i32* %r5.global-to-local, align 4
  %v0_146d8 = load i32, i32* @r7, align 4
  %v1_146dc = inttoptr i32 %v0_146d0 to i32*
  %v2_146dc = load i32, i32* %v1_146dc, align 4
  store i32 %v2_146dc, i32* @r4, align 4
  %v1_146e0 = call i32 @function_14284(i32 %v0_146d8)
  store i32 0, i32* @r6, align 4
  %v0_146e8 = load i32, i32* @r4, align 4
  %v1_146e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_146e8 = inttoptr i32 %v1_146e8 to i32*
  store i32 %v0_146e8, i32* %v2_146e8, align 4
  br label %dec_label_pc_14778

dec_label_pc_146f0:                               ; preds = %dec_label_pc_146b8
  %v1_146f4 = call i32 @function_14d30(i32 48)
  store i32 %v1_146f4, i32* @r6, align 4
  %v2_146f8 = icmp eq i32 %v1_146f4, 0
  br i1 %v2_146f8, label %dec_label_pc_14748, label %dec_label_pc_14700

dec_label_pc_14700:                               ; preds = %dec_label_pc_146f0
  store i32 0, i32* @r4, align 4
  %v2_14704 = add i32 %v1_146f4, 16
  %v3_14704 = inttoptr i32 %v2_14704 to i32*
  store i32 0, i32* %v3_14704, align 4
  %v2_1470c = icmp ugt i32 %tmp, 511
  %v1_14710 = load i32, i32* @r6, align 4
  %v2_14710 = add i32 %v1_14710, 20
  %v3_14710 = inttoptr i32 %v2_14710 to i32*
  store i32 %tmp, i32* %v3_14710, align 4
  br i1 %v2_1470c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14700
  %v2_14718 = load i32, i32* @r6, align 4
  %v3_14718 = add i32 %v2_14718, 20
  %v4_14718 = inttoptr i32 %v3_14718 to i32*
  store i32 512, i32* %v4_14718, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14700, %bb
  %v0_1471c = load i32, i32* @r7, align 4
  %v1_1471c = load i32, i32* @r6, align 4
  %v2_1471c = inttoptr i32 %v1_1471c to i32*
  store i32 %v0_1471c, i32* %v2_1471c, align 4
  %v0_14720 = load i32, i32* @r4, align 4
  %v1_14720 = load i32, i32* @r6, align 4
  %v2_14720 = add i32 %v1_14720, 8
  %v3_14720 = inttoptr i32 %v2_14720 to i32*
  store i32 %v0_14720, i32* %v3_14720, align 4
  %v0_14724 = load i32, i32* @r4, align 4
  %v1_14724 = load i32, i32* @r6, align 4
  %v2_14724 = add i32 %v1_14724, 4
  %v3_14724 = inttoptr i32 %v2_14724 to i32*
  store i32 %v0_14724, i32* %v3_14724, align 4
  %v0_1472c = load i32, i32* @r6, align 4
  %v1_1472c = add i32 %v0_1472c, 20
  %v2_1472c = inttoptr i32 %v1_1472c to i32*
  %v3_1472c = load i32, i32* %v2_1472c, align 4
  %v2_14730 = call i32 @function_14e84(i32 1, i32 %v3_1472c)
  %v2_14734 = icmp eq i32 %v2_14730, 0
  %v1_14738 = load i32, i32* @r6, align 4
  %v2_14738 = add i32 %v1_14738, 12
  %v3_14738 = inttoptr i32 %v2_14738 to i32*
  store i32 %v2_14730, i32* %v3_14738, align 4
  br i1 %v2_14734, label %dec_label_pc_14740, label %dec_label_pc_14764

dec_label_pc_14740:                               ; preds = %.thread
  %v0_14740 = load i32, i32* @r6, align 4
  store i32 %v0_14740, i32* @r0, align 4
  %v0_14744 = call i32 @function_14edc()
  br label %dec_label_pc_14748

dec_label_pc_14748:                               ; preds = %dec_label_pc_146f0, %dec_label_pc_14740
  %v0_14748 = load i32, i32* @r7, align 4
  %v1_1474c = call i32 @function_14284(i32 %v0_14748)
  %v0_14750 = call i32 @function_14858()
  store i32 0, i32* @r6, align 4
  %v2_1475c = inttoptr i32 %v0_14750 to i32*
  store i32 12, i32* %v2_1475c, align 4
  br label %dec_label_pc_14778

dec_label_pc_14764:                               ; preds = %.thread
  store i32 83832, i32* @lr, align 4
  %v1_14774 = call i32 @function_158c4()
  br label %dec_label_pc_14778

dec_label_pc_14778:                               ; preds = %.thread1, %dec_label_pc_14748, %dec_label_pc_146d0, %dec_label_pc_14764
  %v0_14778 = load i32, i32* @r6, align 4
  store i32 %v3_1468c, i32* @r4, align 4
  store i32 %v9_1468c, i32* @r6, align 4
  store i32 %v12_1468c, i32* @r7, align 4
  ret i32 %v0_14778

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14e84, { 38, 43, 39, 37, 36, 35, 34, 33, 32, 4, 3, 2, 1, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 42, 41, 40, 0 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_14284, { 23, 22, 21, 40, 44, 43, 39, 38, 42, 41, 37, 36, 29, 35, 34, 33, 32, 31, 30, 28, 27, 26, 25, 24, 20, 19, 18, 17, 16, 15, 14, 8, 7, 6, 13, 12, 11, 10, 9, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_14778, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_14748, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14788(i32* %arg1) local_unnamed_addr {
dec_label_pc_14788:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14788 = load i32, i32* @r4, align 4
  %v6_14788 = load i32, i32* @r5, align 4
  %v9_14788 = load i32, i32* @lr, align 4
  %v1_1478c = add i32 %tmp, 24
  store i32 %v1_1478c, i32* @r4, align 4
  %v2_14790 = ptrtoint i32* %stack_var_-28 to i32
  store i32 88268, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_14790, i32* @r0, align 4
  store i32 %v1_1478c, i32* %r2.global-to-local, align 4
  %v8_147ac = call i32 @function_158cc(i32 %v2_14790, i32 ptrtoint (i32* @global_var_158c4.596 to i32), i32 %v1_1478c, i32 88268, i32 %v3_14788, i32 %v6_14788, i32 %v9_14788)
  %v0_147b0 = load i32, i32* @r4, align 4
  store i32 %v0_147b0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_158c4.596 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_147c0.605 to i32), i32* @lr, align 4
  %v1_147bc = call i32 @function_158c4()
  store i32 %v1_147bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_147c0

dec_label_pc_147c0:                               ; preds = %dec_label_pc_147f4, %dec_label_pc_14788
  %v0_147c0 = load i32, i32* @r5, align 4
  %v1_147c0 = add i32 %v0_147c0, 4
  %v2_147c0 = inttoptr i32 %v1_147c0 to i32*
  %v3_147c0 = load i32, i32* %v2_147c0, align 4
  store i32 %v3_147c0, i32* %r2.global-to-local, align 4
  %v4_147c0 = add i32 %v0_147c0, 8
  %v5_147c0 = inttoptr i32 %v4_147c0 to i32*
  %v6_147c0 = load i32, i32* %v5_147c0, align 4
  store i32 %v6_147c0, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_147c0, %v3_147c0
  br i1 %tmp8, label %dec_label_pc_147f4, label %dec_label_pc_147cc

dec_label_pc_147cc:                               ; preds = %dec_label_pc_147c0
  %v1_147cc = inttoptr i32 %v0_147c0 to i32*
  %v2_147cc = load i32, i32* %v1_147cc, align 4
  store i32 %v2_147cc, i32* @r0, align 4
  %v1_147d0 = add i32 %v0_147c0, 12
  %v2_147d0 = inttoptr i32 %v1_147d0 to i32*
  %v3_147d0 = load i32, i32* %v2_147d0, align 4
  %v1_147d4 = add i32 %v0_147c0, 20
  %v2_147d4 = inttoptr i32 %v1_147d4 to i32*
  %v3_147d4 = load i32, i32* %v2_147d4, align 4
  store i32 %v3_147d4, i32* @r2, align 4
  %v4_147d8 = call i32 @function_15d40(i32 %v2_147cc, i32 %v3_147d0, i32 %v3_147d4, i32 %v6_147c0)
  store i32 %v4_147d8, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_147d8, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_147e8

.thread:                                          ; preds = %dec_label_pc_147cc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14828

dec_label_pc_147e8:                               ; preds = %dec_label_pc_147cc
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_147ec = load i32, i32* @r5, align 4
  %v2_147ec = add i32 %v1_147ec, 4
  %v3_147ec = inttoptr i32 %v2_147ec to i32*
  store i32 0, i32* %v3_147ec, align 4
  %v1_147f0 = load i32, i32* @r5, align 4
  %v2_147f0 = add i32 %v1_147f0, 8
  %v3_147f0 = inttoptr i32 %v2_147f0 to i32*
  store i32 %v4_147d8, i32* %v3_147f0, align 4
  %v0_147f4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_147f4

dec_label_pc_147f4:                               ; preds = %dec_label_pc_147c0, %dec_label_pc_147e8
  %v1_1480c = phi i32 [ %v0_147c0, %dec_label_pc_147c0 ], [ %v0_147f4.pre, %dec_label_pc_147e8 ]
  %v1_147f4 = add i32 %v1_1480c, 4
  %v2_147f4 = inttoptr i32 %v1_147f4 to i32*
  %v3_147f4 = load i32, i32* %v2_147f4, align 4
  store i32 %v3_147f4, i32* %r2.global-to-local, align 4
  %v1_147f8 = add i32 %v1_1480c, 12
  %v2_147f8 = inttoptr i32 %v1_147f8 to i32*
  %v3_147f8 = load i32, i32* %v2_147f8, align 4
  store i32 %v3_147f8, i32* %ip.global-to-local, align 4
  %v2_147fc = add i32 %v3_147f8, %v3_147f4
  store i32 %v2_147fc, i32* @r4, align 4
  %v1_14800 = add i32 %v2_147fc, 4
  %v2_14800 = inttoptr i32 %v1_14800 to i32*
  %v3_14800 = load i32, i32* %v2_14800, align 4
  %v1_14804 = add i32 %v2_147fc, 8
  %v2_14804 = inttoptr i32 %v1_14804 to i8*
  %v3_14804 = load i8, i8* %v2_14804, align 1
  %v4_14804 = zext i8 %v3_14804 to i32
  store i32 %v4_14804, i32* %r3.global-to-local, align 4
  %v1_14808 = add i32 %v2_147fc, 9
  %v2_14808 = inttoptr i32 %v1_14808 to i8*
  %v3_14808 = load i8, i8* %v2_14808, align 1
  %v4_14808 = zext i8 %v3_14808 to i32
  store i32 %v4_14808, i32* %r0.global-to-local, align 4
  %v2_1480c = add i32 %v1_1480c, 16
  %v3_1480c = inttoptr i32 %v2_1480c to i32*
  store i32 %v3_14800, i32* %v3_1480c, align 4
  %v0_14810 = load i32, i32* %r2.global-to-local, align 4
  %v1_14810 = load i32, i32* %ip.global-to-local, align 4
  %v2_14810 = add i32 %v1_14810, %v0_14810
  %v3_14810 = inttoptr i32 %v2_14810 to i32*
  %v4_14810 = load i32, i32* %v3_14810, align 4
  %v0_14814 = load i32, i32* %r3.global-to-local, align 4
  %v1_14814 = load i32, i32* %r0.global-to-local, align 4
  %v4_14814 = mul i32 %v1_14814, 256
  %v5_14814 = or i32 %v4_14814, %v0_14814
  store i32 %v5_14814, i32* %r3.global-to-local, align 4
  %v2_14818 = add i32 %v5_14814, %v0_14810
  store i32 %v2_14818, i32* @r2, align 4
  %v2_1481c = icmp eq i32 %v4_14810, 0
  %v1_14820 = load i32, i32* @r5, align 4
  %v2_14820 = add i32 %v1_14820, 4
  %v3_14820 = inttoptr i32 %v2_14820 to i32*
  store i32 %v2_14818, i32* %v3_14820, align 4
  br i1 %v2_1481c, label %dec_label_pc_147c0, label %dec_label_pc_14828

dec_label_pc_14828:                               ; preds = %dec_label_pc_147f4, %.thread
  store i32 %v2_14790, i32* @r0, align 4
  store i32 88268, i32* %r3.global-to-local, align 4
  store i32 84028, i32* @lr, align 4
  %v3_14838 = load i32, i32* @r2, align 4
  %v8_14838 = call i32 @function_158cc(i32 %v2_14790, i32 1, i32 %v3_14838, i32 88268, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_1483c = load i32, i32* @r4, align 4
  store i32 %v0_1483c, i32* %r0.global-to-local, align 4
  store i32 %v3_14788, i32* @r4, align 4
  store i32 %v6_14788, i32* @r5, align 4
  ret i32 %v0_1483c

; uselistorder directives
  uselistorder i32 %v1_1480c, { 0, 2, 1 }
  uselistorder i32 %v6_147c0, { 1, 0, 2 }
  uselistorder i32 %v0_147c0, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_14790, { 1, 0, 3, 2 }
  uselistorder i32 %v1_1478c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_147f4, { 1, 0 }
}

define i32 @function_14858() local_unnamed_addr {
dec_label_pc_14858:
  ret i32 ptrtoint (i32* @global_var_1f89c.608 to i32)
}

define i32 @function_14864(i32 %arg1) local_unnamed_addr {
dec_label_pc_14864:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_14870 = bitcast i32* %stack_var_-20 to %tms*
  %v2_14870 = call i32 @function_160d0(%tms* %v1_14870)
  %v2_14878 = load i32, i32* %stack_var_-20, align 4
  %v2_1487c = add i32 %v2_14878, %tmp
  %v2_14884 = mul i32 %v2_1487c, 10000
  %v1_14888 = and i32 %v2_14884, 2147483632
  ret i32 %v1_14888

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_14894(i32 %arg1) local_unnamed_addr {
dec_label_pc_14894:
  %v0_14894 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14894, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_14894
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_14894, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_148a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_148a0:
  %v0_148a0 = call i32 @function_164e0()
  ret i32 %v0_148a0
}

define i32 @function_148b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_148b0:
  %v0_148b0 = call i32 @function_164e0()
  ret i32 %v0_148b0

; uselistorder directives
  uselistorder i32 ()* @function_164e0, { 1, 0 }
}

define i32 @function_148c0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_148c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_148c4 = load i32, i32* @r2, align 4
  %v8_148c4 = icmp eq i32 %v0_148c4, 8
  store i1 %v8_148c4, i1* %cpsr_z.global-to-local, align 1
  %v5_148c8 = icmp slt i32 %v0_148c4, 8
  br i1 %v5_148c8, label %dec_label_pc_14928, label %dec_label_pc_148cc

dec_label_pc_148cc:                               ; preds = %dec_label_pc_148c0
  %v4_148cc = mul i32 %arg2, 256
  %v5_148cc = or i32 %v4_148cc, %arg2
  %v4_148d0 = mul i32 %v5_148cc, 65536
  %v5_148d0 = or i32 %v4_148d0, %v5_148cc
  store i32 %v5_148d0, i32* %r1.global-to-local, align 4
  %v1_148d457 = urem i32 %tmp, 4
  %v2_148d458 = icmp eq i32 %v1_148d457, 0
  store i1 %v2_148d458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_148d458, label %dec_label_pc_148e4, label %bb

bb:                                               ; preds = %dec_label_pc_148cc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_148cc ]
  %v3_148d859 = phi i32 [ %v6_148d8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_148cc ]
  %v4_148d8 = inttoptr i32 %v3_148d859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_148d8, align 1
  %v5_148d8 = load i32, i32* %r3.global-to-local, align 4
  %v6_148d8 = add i32 %v5_148d8, 1
  store i32 %v6_148d8, i32* %r3.global-to-local, align 4
  %v0_148dc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_148e8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_148dc.pr, label %dec_label_pc_148e4, label %.thread

.thread:                                          ; preds = %bb
  %v2_148dc = add i32 %v0_148e8.pr.pre, -1
  store i32 %v2_148dc, i32* @r2, align 4
  %v1_148d4 = urem i32 %v6_148d8, 4
  %v2_148d4 = icmp eq i32 %v1_148d4, 0
  store i1 %v2_148d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148d4, label %dec_label_pc_148e4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_148d8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_148d8.pre to i8
  br label %bb

dec_label_pc_148e4:                               ; preds = %.thread, %bb, %dec_label_pc_148cc
  %v0_148f028 = phi i32 [ %tmp, %dec_label_pc_148cc ], [ %v6_148d8, %bb ], [ %v6_148d8, %.thread ]
  %v0_148e8.pr = phi i32 [ %v0_148c4, %dec_label_pc_148cc ], [ %v0_148e8.pr.pre, %bb ], [ %v2_148dc, %.thread ]
  %v0_148e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_148e4, i32* %ip.global-to-local, align 4
  %v8_148e810 = icmp eq i32 %v0_148e8.pr, 8
  store i1 %v8_148e810, i1* %cpsr_z.global-to-local, align 1
  %v5_148ec11 = icmp slt i32 %v0_148e8.pr, 8
  br i1 %v5_148ec11, label %dec_label_pc_14928, label %dec_label_pc_148f0.preheader

dec_label_pc_148f0.preheader:                     ; preds = %dec_label_pc_148e4
  %v1_148f046 = inttoptr i32 %v0_148f028 to i32*
  store i32 %v0_148e4, i32* %v1_148f046, align 4
  %v3_148f047 = add i32 %v0_148f028, 4
  %v4_148f048 = inttoptr i32 %v3_148f047 to i32*
  %v5_148f049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148f049, i32* %v4_148f048, align 4
  %v6_148f050 = add i32 %v0_148f028, 8
  store i32 %v6_148f050, i32* %r3.global-to-local, align 4
  %v0_148f451 = load i32, i32* @r2, align 4
  %v1_148f452 = add i32 %v0_148f451, -8
  store i32 %v1_148f452, i32* %r2.global-to-local, align 4
  %v5_148fc53 = icmp slt i32 %v1_148f452, 8
  br i1 %v5_148fc53, label %dec_label_pc_148f0.dec_label_pc_14928.loopexit_crit_edge, label %dec_label_pc_14900

dec_label_pc_14900:                               ; preds = %dec_label_pc_148f0.preheader, %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge
  %v6_148f055 = phi i32 [ %v6_148f0, %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge ], [ %v6_148f050, %dec_label_pc_148f0.preheader ]
  %v0_148f054 = phi i32 [ %v12_1491c, %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge ], [ %v0_148f028, %dec_label_pc_148f0.preheader ]
  %v1_14900 = inttoptr i32 %v6_148f055 to i32*
  %v2_14900 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_14900, i32* %v1_14900, align 4
  %v3_14900 = add i32 %v0_148f054, 12
  %v4_14900 = inttoptr i32 %v3_14900 to i32*
  %v5_14900 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_14900, i32* %v4_14900, align 4
  %v6_14900 = add i32 %v0_148f054, 16
  store i32 %v6_14900, i32* %r3.global-to-local, align 4
  %v0_14904 = load i32, i32* %r2.global-to-local, align 4
  %v1_14904 = add i32 %v0_14904, -8
  store i32 %v1_14904, i32* %r2.global-to-local, align 4
  %v5_1490c = icmp slt i32 %v1_14904, 8
  br i1 %v5_1490c, label %dec_label_pc_14900.dec_label_pc_14928.loopexit_crit_edge, label %dec_label_pc_14910

dec_label_pc_14910:                               ; preds = %dec_label_pc_14900
  %v1_14910 = inttoptr i32 %v6_14900 to i32*
  %v2_14910 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_14910, i32* %v1_14910, align 4
  %v3_14910 = add i32 %v0_148f054, 20
  %v4_14910 = inttoptr i32 %v3_14910 to i32*
  %v5_14910 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_14910, i32* %v4_14910, align 4
  %v6_14910 = add i32 %v0_148f054, 24
  store i32 %v6_14910, i32* %r3.global-to-local, align 4
  %v0_14914 = load i32, i32* %r2.global-to-local, align 4
  %v1_14914 = add i32 %v0_14914, -8
  store i32 %v1_14914, i32* %r2.global-to-local, align 4
  %v5_1491c = icmp slt i32 %v1_14914, 8
  br i1 %v5_1491c, label %dec_label_pc_14910.dec_label_pc_14928.loopexit_crit_edge, label %dec_label_pc_148e8

dec_label_pc_148e8:                               ; preds = %dec_label_pc_14910
  %v7_1491c = inttoptr i32 %v6_14910 to i32*
  %v8_1491c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1491c, i32* %v7_1491c, align 4
  %v9_1491c = add i32 %v0_148f054, 28
  %v10_1491c = inttoptr i32 %v9_1491c to i32*
  %v11_1491c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1491c, i32* %v10_1491c, align 4
  %v12_1491c = add i32 %v0_148f054, 32
  store i32 %v12_1491c, i32* %r3.global-to-local, align 4
  %v6_14920 = load i32, i32* %r2.global-to-local, align 4
  %v7_14920 = add i32 %v6_14920, -8
  store i32 %v7_14920, i32* %r2.global-to-local, align 4
  %v5_148ec = icmp slt i32 %v7_14920, 8
  br i1 %v5_148ec, label %dec_label_pc_148e8.dec_label_pc_14928.loopexit_crit_edge, label %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge

dec_label_pc_148e8.dec_label_pc_148f0_crit_edge:  ; preds = %dec_label_pc_148e8
  %v2_148f0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_148f0 = inttoptr i32 %v12_1491c to i32*
  store i32 %v2_148f0.pre, i32* %v1_148f0, align 4
  %v3_148f0 = add i32 %v0_148f054, 36
  %v4_148f0 = inttoptr i32 %v3_148f0 to i32*
  %v5_148f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_148f0, i32* %v4_148f0, align 4
  %v6_148f0 = add i32 %v0_148f054, 40
  store i32 %v6_148f0, i32* %r3.global-to-local, align 4
  %v0_148f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_148f4 = add i32 %v0_148f4, -8
  store i32 %v1_148f4, i32* %r2.global-to-local, align 4
  %v5_148fc = icmp slt i32 %v1_148f4, 8
  br i1 %v5_148fc, label %dec_label_pc_148f0.dec_label_pc_14928.loopexit_crit_edge, label %dec_label_pc_14900

dec_label_pc_148f0.dec_label_pc_14928.loopexit_crit_edge: ; preds = %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge, %dec_label_pc_148f0.preheader
  %v1_148f4.lcssa = phi i32 [ %v1_148f452, %dec_label_pc_148f0.preheader ], [ %v1_148f4, %dec_label_pc_148e8.dec_label_pc_148f0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14928

dec_label_pc_148e8.dec_label_pc_14928.loopexit_crit_edge: ; preds = %dec_label_pc_148e8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14928

dec_label_pc_14900.dec_label_pc_14928.loopexit_crit_edge: ; preds = %dec_label_pc_14900
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14928

dec_label_pc_14910.dec_label_pc_14928.loopexit_crit_edge: ; preds = %dec_label_pc_14910
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14928

dec_label_pc_14928:                               ; preds = %dec_label_pc_148e4, %dec_label_pc_148f0.dec_label_pc_14928.loopexit_crit_edge, %dec_label_pc_148e8.dec_label_pc_14928.loopexit_crit_edge, %dec_label_pc_14900.dec_label_pc_14928.loopexit_crit_edge, %dec_label_pc_14910.dec_label_pc_14928.loopexit_crit_edge, %dec_label_pc_148c0
  %v0_14930 = phi i32 [ %v0_148c4, %dec_label_pc_148c0 ], [ %v1_14914, %dec_label_pc_14910.dec_label_pc_14928.loopexit_crit_edge ], [ %v1_14904, %dec_label_pc_14900.dec_label_pc_14928.loopexit_crit_edge ], [ %v7_14920, %dec_label_pc_148e8.dec_label_pc_14928.loopexit_crit_edge ], [ %v1_148f4.lcssa, %dec_label_pc_148f0.dec_label_pc_14928.loopexit_crit_edge ], [ %v0_148e8.pr, %dec_label_pc_148e4 ]
  %v2_14928 = icmp eq i32 %v0_14930, 0
  store i1 %v2_14928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14928, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_14928
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_14928
  %v1_14930 = sub i32 7, %v0_14930
  store i32 %v1_14930, i32* %r2.global-to-local, align 4
  %v3_14934 = mul i32 %v1_14930, 4
  %v4_14934 = add i32 %v3_14934, ptrtoint (i32* @global_var_1493c.610 to i32)
  call void @__pseudo_branch(i32 %v4_14934)
  %v0_1493c = load i32, i32* %r1.global-to-local, align 4
  %v1_1493c = trunc i32 %v0_1493c to i8
  %v2_1493c = load i32, i32* %r3.global-to-local, align 4
  %v3_1493c = inttoptr i32 %v2_1493c to i8*
  store i8 %v1_1493c, i8* %v3_1493c, align 1
  %v4_1493c = load i32, i32* %r3.global-to-local, align 4
  %v5_1493c = add i32 %v4_1493c, 1
  store i32 %v5_1493c, i32* %r3.global-to-local, align 4
  %v0_14940 = load i32, i32* %r1.global-to-local, align 4
  %v1_14940 = trunc i32 %v0_14940 to i8
  %v3_14940 = inttoptr i32 %v5_1493c to i8*
  store i8 %v1_14940, i8* %v3_14940, align 1
  %v4_14940 = load i32, i32* %r3.global-to-local, align 4
  %v5_14940 = add i32 %v4_14940, 1
  store i32 %v5_14940, i32* %r3.global-to-local, align 4
  %v0_14944 = load i32, i32* %r1.global-to-local, align 4
  %v1_14944 = trunc i32 %v0_14944 to i8
  %v3_14944 = inttoptr i32 %v5_14940 to i8*
  store i8 %v1_14944, i8* %v3_14944, align 1
  %v4_14944 = load i32, i32* %r3.global-to-local, align 4
  %v5_14944 = add i32 %v4_14944, 1
  store i32 %v5_14944, i32* %r3.global-to-local, align 4
  %v0_14948 = load i32, i32* %r1.global-to-local, align 4
  %v1_14948 = trunc i32 %v0_14948 to i8
  %v3_14948 = inttoptr i32 %v5_14944 to i8*
  store i8 %v1_14948, i8* %v3_14948, align 1
  %v4_14948 = load i32, i32* %r3.global-to-local, align 4
  %v5_14948 = add i32 %v4_14948, 1
  store i32 %v5_14948, i32* %r3.global-to-local, align 4
  %v0_1494c = load i32, i32* %r1.global-to-local, align 4
  %v1_1494c = trunc i32 %v0_1494c to i8
  %v3_1494c = inttoptr i32 %v5_14948 to i8*
  store i8 %v1_1494c, i8* %v3_1494c, align 1
  %v4_1494c = load i32, i32* %r3.global-to-local, align 4
  %v5_1494c = add i32 %v4_1494c, 1
  store i32 %v5_1494c, i32* %r3.global-to-local, align 4
  %v0_14950 = load i32, i32* %r1.global-to-local, align 4
  %v1_14950 = trunc i32 %v0_14950 to i8
  %v3_14950 = inttoptr i32 %v5_1494c to i8*
  store i8 %v1_14950, i8* %v3_14950, align 1
  %v4_14950 = load i32, i32* %r3.global-to-local, align 4
  %v5_14950 = add i32 %v4_14950, 1
  store i32 %v5_14950, i32* %r3.global-to-local, align 4
  %v0_14954 = load i32, i32* %r1.global-to-local, align 4
  %v1_14954 = trunc i32 %v0_14954 to i8
  %v3_14954 = inttoptr i32 %v5_14950 to i8*
  store i8 %v1_14954, i8* %v3_14954, align 1
  %v4_14954 = load i32, i32* %r3.global-to-local, align 4
  %v5_14954 = add i32 %v4_14954, 1
  store i32 %v5_14954, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_148f0, { 1, 0 }
  uselistorder i32 %v12_1491c, { 1, 2, 0 }
  uselistorder i32 %v0_148f054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_148e8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_148d8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_148cc, { 1, 0 }
  uselistorder i32 %v0_148c4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 8, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14928, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_14900, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_14960(i32 %arg1) local_unnamed_addr {
dec_label_pc_14960:
  %stack_var_-8 = alloca i32, align 4
  %v2_14964 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_14964, i32* @r1, align 4
  %v0_1496c = call i32 @function_16970()
  %v2_14970 = icmp eq i32 %v0_1496c, 0
  br i1 %v2_14970, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14960
  %v3_14978 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14960, %bb
  %v5_14980 = phi i32 [ -1, %dec_label_pc_14960 ], [ %v3_14978, %bb ]
  ret i32 %v5_14980

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_14984(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14984:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14984 = load i32, i32* @r4, align 4
  store i32 %v3_14984, i32* %stack_var_-8, align 4
  %v5_14988 = inttoptr i32 %arg3 to i32*
  %v6_14988 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_14988)
  store i32 %v6_14988, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_14988, -4095
  br i1 %tmp, label %dec_label_pc_149a8, label %dec_label_pc_14998

dec_label_pc_14998:                               ; preds = %dec_label_pc_14984
  %v0_14998 = call i32 @function_14858()
  %v0_1499c = load i32, i32* %r4.global-to-local, align 4
  %v1_1499c = sub i32 0, %v0_1499c
  %v2_149a0 = inttoptr i32 %v0_14998 to i32*
  store i32 %v1_1499c, i32* %v2_149a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_149a8

dec_label_pc_149a8:                               ; preds = %dec_label_pc_14984, %dec_label_pc_14998
  %v0_149a8 = phi i32 [ %v6_14988, %dec_label_pc_14984 ], [ -1, %dec_label_pc_14998 ]
  %v2_149ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_149ac, i32* @r4, align 4
  ret i32 %v0_149a8

; uselistorder directives
  uselistorder i32 %v6_14988, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149a8, { 1, 0 }
}

define i32 @function_149b0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_149b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149b0 = load i32, i32* @r4, align 4
  store i32 %v3_149b0, i32* %stack_var_-8, align 4
  %v5_149b4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_149b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_149b4, -4095
  br i1 %tmp, label %dec_label_pc_149d4, label %dec_label_pc_149c4

dec_label_pc_149c4:                               ; preds = %dec_label_pc_149b0
  %v0_149c4 = call i32 @function_14858()
  %v0_149c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_149c8 = sub i32 0, %v0_149c8
  %v2_149cc = inttoptr i32 %v0_149c4 to i32*
  store i32 %v1_149c8, i32* %v2_149cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_149d4

dec_label_pc_149d4:                               ; preds = %dec_label_pc_149b0, %dec_label_pc_149c4
  %v0_149d4 = phi i32 [ %v5_149b4, %dec_label_pc_149b0 ], [ -1, %dec_label_pc_149c4 ]
  %v2_149d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_149d8, i32* @r4, align 4
  ret i32 %v0_149d4

; uselistorder directives
  uselistorder i32 %v5_149b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149d4, { 1, 0 }
}

define i32 @function_149dc(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_149dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149dc = load i32, i32* @r4, align 4
  store i32 %v3_149dc, i32* %stack_var_-8, align 4
  %v5_149e0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_149e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_149e0, -4095
  br i1 %tmp, label %dec_label_pc_14a00, label %dec_label_pc_149f0

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149dc
  %v0_149f0 = call i32 @function_14858()
  %v0_149f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_149f4 = sub i32 0, %v0_149f4
  %v2_149f8 = inttoptr i32 %v0_149f0 to i32*
  store i32 %v1_149f4, i32* %v2_149f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a00

dec_label_pc_14a00:                               ; preds = %dec_label_pc_149dc, %dec_label_pc_149f0
  %v0_14a00 = phi i32 [ %v5_149e0, %dec_label_pc_149dc ], [ -1, %dec_label_pc_149f0 ]
  %v2_14a04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a04, i32* @r4, align 4
  ret i32 %v0_14a00

; uselistorder directives
  uselistorder i32 %v5_149e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a00, { 1, 0 }
}

define i32 @function_14a08(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14a08:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a08 = load i32, i32* @r4, align 4
  store i32 %v3_14a08, i32* %stack_var_-8, align 4
  %v5_14a0c = inttoptr i32 %arg3 to i32*
  %v6_14a0c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_14a0c)
  store i32 %v6_14a0c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_14a0c, -4095
  br i1 %tmp, label %dec_label_pc_14a2c, label %dec_label_pc_14a1c

dec_label_pc_14a1c:                               ; preds = %dec_label_pc_14a08
  %v0_14a1c = call i32 @function_14858()
  %v0_14a20 = load i32, i32* %r4.global-to-local, align 4
  %v1_14a20 = sub i32 0, %v0_14a20
  %v2_14a24 = inttoptr i32 %v0_14a1c to i32*
  store i32 %v1_14a20, i32* %v2_14a24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a2c

dec_label_pc_14a2c:                               ; preds = %dec_label_pc_14a08, %dec_label_pc_14a1c
  %v0_14a2c = phi i32 [ %v6_14a0c, %dec_label_pc_14a08 ], [ -1, %dec_label_pc_14a1c ]
  %v2_14a30 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a30, i32* @r4, align 4
  ret i32 %v0_14a2c

; uselistorder directives
  uselistorder i32 %v6_14a0c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a2c, { 1, 0 }
}

define i32 @function_14a34(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14a34:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a34 = load i32, i32* @r4, align 4
  store i32 %v3_14a34, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14a3c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_14a3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14a3c, -4095
  br i1 %tmp, label %dec_label_pc_14a5c, label %dec_label_pc_14a4c

dec_label_pc_14a4c:                               ; preds = %dec_label_pc_14a34
  %v0_14a4c = call i32 @function_14858()
  %v0_14a50 = load i32, i32* %r4.global-to-local, align 4
  %v1_14a50 = sub i32 0, %v0_14a50
  %v2_14a54 = inttoptr i32 %v0_14a4c to i32*
  store i32 %v1_14a50, i32* %v2_14a54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a5c:                               ; preds = %dec_label_pc_14a34, %dec_label_pc_14a4c
  %v0_14a5c = phi i32 [ %v5_14a3c, %dec_label_pc_14a34 ], [ -1, %dec_label_pc_14a4c ]
  %v2_14a60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a60, i32* @r4, align 4
  ret i32 %v0_14a5c

; uselistorder directives
  uselistorder i32 %v5_14a3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a5c, { 1, 0 }
}

define i32 @function_14a64(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14a64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a64 = load i32, i32* @r4, align 4
  store i32 %v3_14a64, i32* %stack_var_-8, align 4
  %v2_14a68 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_14a68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_14a68, -4095
  br i1 %tmp, label %dec_label_pc_14a88, label %dec_label_pc_14a78

dec_label_pc_14a78:                               ; preds = %dec_label_pc_14a64
  %v0_14a78 = call i32 @function_14858()
  %v0_14a7c = load i32, i32* %r4.global-to-local, align 4
  %v1_14a7c = sub i32 0, %v0_14a7c
  %v2_14a80 = inttoptr i32 %v0_14a78 to i32*
  store i32 %v1_14a7c, i32* %v2_14a80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a88

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a64, %dec_label_pc_14a78
  %v0_14a88 = phi i32 [ %v2_14a68, %dec_label_pc_14a64 ], [ -1, %dec_label_pc_14a78 ]
  %v2_14a8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a8c, i32* @r4, align 4
  ret i32 %v0_14a88

; uselistorder directives
  uselistorder i32 %v2_14a68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a88, { 1, 0 }
}

define i32 @function_14a90(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14a90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a90 = load i32, i32* @r4, align 4
  store i32 %v3_14a90, i32* %stack_var_-8, align 4
  %v5_14a94 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_14a94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14a94, -4095
  br i1 %tmp, label %dec_label_pc_14ab4, label %dec_label_pc_14aa4

dec_label_pc_14aa4:                               ; preds = %dec_label_pc_14a90
  %v0_14aa4 = call i32 @function_14858()
  %v0_14aa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14aa8 = sub i32 0, %v0_14aa8
  %v2_14aac = inttoptr i32 %v0_14aa4 to i32*
  store i32 %v1_14aa8, i32* %v2_14aac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ab4

dec_label_pc_14ab4:                               ; preds = %dec_label_pc_14a90, %dec_label_pc_14aa4
  %v0_14ab4 = phi i32 [ %v5_14a94, %dec_label_pc_14a90 ], [ -1, %dec_label_pc_14aa4 ]
  %v2_14ab8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ab8, i32* @r4, align 4
  ret i32 %v0_14ab4

; uselistorder directives
  uselistorder i32 %v5_14a94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ab4, { 1, 0 }
}

define i32 @function_14abc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14abc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14abc = load i32, i32* @r4, align 4
  store i32 %v3_14abc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14ac8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_14ac8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14ac8, -4095
  br i1 %tmp, label %dec_label_pc_14ae8, label %dec_label_pc_14ad8

dec_label_pc_14ad8:                               ; preds = %dec_label_pc_14abc
  %v0_14ad8 = call i32 @function_14858()
  %v0_14adc = load i32, i32* %r4.global-to-local, align 4
  %v1_14adc = sub i32 0, %v0_14adc
  %v2_14ae0 = inttoptr i32 %v0_14ad8 to i32*
  store i32 %v1_14adc, i32* %v2_14ae0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ae8

dec_label_pc_14ae8:                               ; preds = %dec_label_pc_14abc, %dec_label_pc_14ad8
  %v0_14ae8 = phi i32 [ %v5_14ac8, %dec_label_pc_14abc ], [ -1, %dec_label_pc_14ad8 ]
  %v2_14aec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14aec, i32* @r4, align 4
  ret i32 %v0_14ae8

; uselistorder directives
  uselistorder i32 %v5_14ac8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ae8, { 1, 0 }
}

define i32 @function_14af0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14af0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14af0 = load i32, i32* @r4, align 4
  store i32 %v3_14af0, i32* %stack_var_-8, align 4
  %v5_14af4 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_14af4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14af4, -4095
  br i1 %tmp, label %dec_label_pc_14b14, label %dec_label_pc_14b04

dec_label_pc_14b04:                               ; preds = %dec_label_pc_14af0
  %v0_14b04 = call i32 @function_14858()
  %v0_14b08 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b08 = sub i32 0, %v0_14b08
  %v2_14b0c = inttoptr i32 %v0_14b04 to i32*
  store i32 %v1_14b08, i32* %v2_14b0c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b14

dec_label_pc_14b14:                               ; preds = %dec_label_pc_14af0, %dec_label_pc_14b04
  %v0_14b14 = phi i32 [ %v5_14af4, %dec_label_pc_14af0 ], [ -1, %dec_label_pc_14b04 ]
  %v2_14b18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b18, i32* @r4, align 4
  ret i32 %v0_14b14

; uselistorder directives
  uselistorder i32 %v5_14af4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b14, { 1, 0 }
}

define i32 @function_14b1c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14b1c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14b28 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_14b28, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14b28, -4095
  br i1 %tmp, label %dec_label_pc_14b48, label %dec_label_pc_14b38

dec_label_pc_14b38:                               ; preds = %dec_label_pc_14b1c
  %v0_14b38 = call i32 @function_14858()
  %v0_14b3c = load i32, i32* %r4.global-to-local, align 4
  %v1_14b3c = sub i32 0, %v0_14b3c
  %v2_14b40 = inttoptr i32 %v0_14b38 to i32*
  store i32 %v1_14b3c, i32* %v2_14b40, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b48

dec_label_pc_14b48:                               ; preds = %dec_label_pc_14b1c, %dec_label_pc_14b38
  %v0_14b48 = phi i32 [ %v5_14b28, %dec_label_pc_14b1c ], [ -1, %dec_label_pc_14b38 ]
  ret i32 %v0_14b48

; uselistorder directives
  uselistorder i32 %v5_14b28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b48, { 1, 0 }
}

define i32 @function_14b50(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_14b50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b50 = load i32, i32* @r4, align 4
  store i32 %v3_14b50, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_14b58 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_14b58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14b58, -4095
  br i1 %tmp, label %dec_label_pc_14b78, label %dec_label_pc_14b68

dec_label_pc_14b68:                               ; preds = %dec_label_pc_14b50
  %v0_14b68 = call i32 @function_14858()
  %v0_14b6c = load i32, i32* %r4.global-to-local, align 4
  %v1_14b6c = sub i32 0, %v0_14b6c
  %v2_14b70 = inttoptr i32 %v0_14b68 to i32*
  store i32 %v1_14b6c, i32* %v2_14b70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b78

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b50, %dec_label_pc_14b68
  %v0_14b78 = phi i32 [ %v5_14b58, %dec_label_pc_14b50 ], [ -1, %dec_label_pc_14b68 ]
  %v2_14b7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b7c, i32* @r4, align 4
  ret i32 %v0_14b78

; uselistorder directives
  uselistorder i32 %v5_14b58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14b78, { 1, 0 }
}

define i32 @function_14b80(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14b80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b80 = load i32, i32* @r4, align 4
  store i32 %v3_14b80, i32* %stack_var_-8, align 4
  %v3_14b84 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_14b84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_14b84, -4095
  br i1 %tmp, label %dec_label_pc_14ba4, label %dec_label_pc_14b94

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b80
  %v0_14b94 = call i32 @function_14858()
  %v0_14b98 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b98 = sub i32 0, %v0_14b98
  %v2_14b9c = inttoptr i32 %v0_14b94 to i32*
  store i32 %v1_14b98, i32* %v2_14b9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ba4

dec_label_pc_14ba4:                               ; preds = %dec_label_pc_14b80, %dec_label_pc_14b94
  %v0_14ba4 = phi i32 [ %v3_14b84, %dec_label_pc_14b80 ], [ -1, %dec_label_pc_14b94 ]
  %v2_14ba8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ba8, i32* @r4, align 4
  ret i32 %v0_14ba4

; uselistorder directives
  uselistorder i32 %v3_14b84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ba4, { 1, 0 }
}

define i32 @function_14bac(i32 %arg1) local_unnamed_addr {
dec_label_pc_14bac:
  %v3_14bac = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14bb4 = call i32 @function_142dc()
  %v0_14bb8 = load i32, i32* @r4, align 4
  store i32 %v3_14bac, i32* @r4, align 4
  %v2_14bc0 = call i32 @function_14384(i32 %v0_14bb4, i32 %v0_14bb8)
  ret i32 %v2_14bc0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14384, { 14, 16, 13, 4, 3, 2, 1, 15, 12, 11, 10, 9, 8, 7, 6, 5, 0 }
  uselistorder i32 ()* @function_142dc, { 0, 3, 2, 1 }
}

define i32 @function_14bc4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14bc4:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_14be0, label %dec_label_pc_14bd0

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bc4
  %v8_14bd4 = icmp sgt i32 %arg1, 64
  br i1 %v8_14bd4, label %dec_label_pc_14be0, label %dec_label_pc_14bd8

dec_label_pc_14bd8:                               ; preds = %dec_label_pc_14bd0
  %v0_14bdc = call i32 @function_14ce8()
  br label %dec_label_pc_14be0

dec_label_pc_14be0:                               ; preds = %dec_label_pc_14bd0, %dec_label_pc_14bc4, %dec_label_pc_14bd8
  %v0_14be0 = call i32 @function_14858()
  %v2_14be8 = inttoptr i32 %v0_14be0 to i32*
  store i32 22, i32* %v2_14be8, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14be0, { 2, 0, 1 }
}

define i32 @function_14bf4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14bf4:
  store i32 128, i32* @r2, align 4
  %v0_14c00 = load i32, i32* @r0, align 4
  %v2_14c00 = inttoptr i32 %v0_14c00 to i8*
  %v3_14c00 = call i32 @function_148c0(i8* %v2_14c00, i32 0)
  ret i32 0
}

define i32 @function_14c0c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c0c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14c0c = load i32, i32* @r4, align 4
  store i32 %v3_14c0c, i32* %stack_var_-12, align 4
  %v6_14c0c = load i32, i32* @r5, align 4
  %v10_14c0c = ptrtoint i32* %stack_var_-12 to i32
  %v7_14c10 = icmp eq i32 %arg2, -1
  %v0_14c1c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_14c10, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14c0c
  br label %dec_label_pc_14c34

bb:                                               ; preds = %dec_label_pc_14c0c
  %v2_14c18 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_14c1c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_14c1c.pre, 1
  br i1 %tmp19, label %dec_label_pc_14c34, label %dec_label_pc_14c24

dec_label_pc_14c24:                               ; preds = %bb
  %v7_14c28 = icmp sgt i32 %v0_14c1c.pre, 64
  br i1 %v7_14c28, label %dec_label_pc_14c34, label %bb20

bb20:                                             ; preds = %dec_label_pc_14c24
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_14c5824 = add i32 %v10_14c0c, 124
  br label %dec_label_pc_14c48

dec_label_pc_14c34:                               ; preds = %.thread, %dec_label_pc_14c24, %bb
  %v0_14c34 = call i32 @function_14858()
  store i32 %v0_14c34, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_14c40 = inttoptr i32 %v0_14c34 to i32*
  store i32 22, i32* %v2_14c40, align 4
  %v0_14cb4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_14cb4

dec_label_pc_14c48:                               ; preds = %bb20, %dec_label_pc_14c48
  %v5_14c5825 = phi i32 [ %v5_14c5824, %bb20 ], [ %v5_14c58, %dec_label_pc_14c48 ]
  %v2_14c4c = add i32 %v5_14c5825, -136
  %v3_14c4c = inttoptr i32 %v2_14c4c to i32*
  store i32 0, i32* %v3_14c4c, align 4
  %v0_14c50.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_14c50 = add i32 %v0_14c50.pre, -1
  store i32 %v1_14c50, i32* %r0.global-to-local, align 4
  %v6_14c50 = icmp slt i32 %v1_14c50, 0
  %v4_14c58 = mul i32 %v1_14c50, 4
  %v5_14c58 = add i32 %v4_14c58, %v10_14c0c
  br i1 %v6_14c50, label %dec_label_pc_14c60, label %dec_label_pc_14c48

dec_label_pc_14c60:                               ; preds = %dec_label_pc_14c48
  %v2_14c60 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_14c60, i32* @r5, align 4
  %v2_14c64 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_14c64, i32* @r0, align 4
  %v0_14c68 = load i32, i32* @r4, align 4
  store i32 %v0_14c68, i32* @r1, align 4
  %v0_14c6c = call i32 @function_14ce8()
  store i32 %v0_14c6c, i32* %r0.global-to-local, align 4
  %v1_14c70 = icmp slt i32 %v0_14c6c, 0
  br i1 %v1_14c70, label %dec_label_pc_14cb0, label %dec_label_pc_14c78

dec_label_pc_14c78:                               ; preds = %dec_label_pc_14c60
  %v0_14c78 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1fa74.612 to i32), i32* %r0.global-to-local, align 4
  %v2_14c80 = call i32 @function_14cc4(i32 ptrtoint (i32* @global_var_1fa74.612 to i32), i32 %v0_14c78)
  %v0_14c98 = load i32, i32* @r4, align 4
  store i32 %v0_14c98, i32* %r0.global-to-local, align 4
  %v4_14ca0 = call i32 @function_15bb0(i32 %v0_14c98, i32* nonnull %stack_var_-152, i32 %v2_14c18)
  store i32 %v4_14ca0, i32* %r0.global-to-local, align 4
  %v1_14ca4 = icmp slt i32 %v4_14ca0, 0
  br i1 %v1_14ca4, label %dec_label_pc_14cb0, label %bb23

bb23:                                             ; preds = %dec_label_pc_14c78
  %v5_14ca8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_14ca8, i32* @r2, align 4
  br label %dec_label_pc_14cb4

dec_label_pc_14cb0:                               ; preds = %dec_label_pc_14c78, %dec_label_pc_14c60
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_14cb4

dec_label_pc_14cb4:                               ; preds = %bb23, %dec_label_pc_14c34, %dec_label_pc_14cb0
  %v0_14cb4 = phi i32 [ %v5_14ca8, %bb23 ], [ %v0_14cb4.pre, %dec_label_pc_14c34 ], [ -1, %dec_label_pc_14cb0 ]
  store i32 %v0_14cb4, i32* %r0.global-to-local, align 4
  %v2_14cbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14cbc, i32* @r4, align 4
  store i32 %v6_14c0c, i32* @r5, align 4
  ret i32 %v0_14cb4

; uselistorder directives
  uselistorder i32 %v0_14cb4, { 1, 0 }
  uselistorder i32 %v1_14c50, { 0, 2, 1 }
  uselistorder i32 %v0_14c1c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_14c0c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_14cb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c48, { 1, 0 }
  uselistorder label %dec_label_pc_14c34, { 1, 2, 0 }
}

define i32 @function_14cc4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14cc4:
  %v1_14cc4 = add i32 %arg2, -1
  %v3_14cc8 = udiv i32 %v1_14cc4, 32
  %v4_14ccc = mul nuw nsw i32 %v3_14cc8, 4
  %v5_14ccc = add i32 %v4_14ccc, %arg1
  %v6_14ccc = inttoptr i32 %v5_14ccc to i32*
  %v7_14ccc = load i32, i32* %v6_14ccc, align 4
  %v1_14cd0 = urem i32 %v1_14cc4, 32
  %v7_14cd8 = shl i32 1, %v1_14cd0
  %v8_14cd8 = and i32 %v7_14ccc, %v7_14cd8
  %v10_14cd8 = icmp ne i32 %v8_14cd8, 0
  %. = zext i1 %v10_14cd8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_14cc4, { 1, 0 }
}

define i32 @function_14ce8() local_unnamed_addr {
dec_label_pc_14ce8:
  %v0_14ce8 = load i32, i32* @r1, align 4
  %v1_14ce8 = add i32 %v0_14ce8, -1
  %v3_14cec = udiv i32 %v1_14ce8, 32
  store i32 %v3_14cec, i32* @ip, align 4
  %v0_14cf0 = load i32, i32* @r0, align 4
  %v4_14cf0 = mul nuw nsw i32 %v3_14cec, 4
  %v5_14cf0 = add i32 %v0_14cf0, %v4_14cf0
  %v6_14cf0 = inttoptr i32 %v5_14cf0 to i32*
  %v7_14cf0 = load i32, i32* %v6_14cf0, align 4
  %v1_14cf4 = urem i32 %v1_14ce8, 32
  %v7_14cfc = shl i32 1, %v1_14cf4
  %v8_14cfc = or i32 %v7_14cf0, %v7_14cfc
  store i32 %v8_14cfc, i32* %v6_14cf0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14cec, { 1, 0 }
  uselistorder i32 %v1_14ce8, { 1, 0 }
}

define i32 @function_14d0c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14d0c:
  %v1_14d0c = add i32 %arg2, -1
  %v3_14d10 = udiv i32 %v1_14d0c, 32
  %v4_14d14 = mul nuw nsw i32 %v3_14d10, 4
  %v5_14d14 = add i32 %v4_14d14, %arg1
  %v6_14d14 = inttoptr i32 %v5_14d14 to i32*
  %v7_14d14 = load i32, i32* %v6_14d14, align 4
  %v1_14d18 = urem i32 %v1_14d0c, 32
  %tmp = shl i32 -1, %v1_14d18
  %v8_14d20 = add i32 %tmp, -1
  %v9_14d20 = and i32 %v7_14d14, %v8_14d20
  store i32 %v9_14d20, i32* %v6_14d14, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14d0c, { 1, 0 }
}

define i32 @function_14d30(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d30:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14d30 = load i32, i32* @r4, align 4
  %v6_14d30 = load i32, i32* @r5, align 4
  %v9_14d30 = load i32, i32* @r6, align 4
  %v0_14d34 = load i32, i32* %r0.global-to-local, align 4
  %v2_14d34 = icmp eq i32 %v0_14d34, 0
  %v2_14d38 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14d34, label %bb, label %dec_label_pc_14d44

bb:                                               ; preds = %dec_label_pc_14d30
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14d4c

dec_label_pc_14d44:                               ; preds = %dec_label_pc_14d30
  %tmp = icmp ugt i32 %v0_14d34, -8
  br i1 %tmp, label %dec_label_pc_14e50, label %dec_label_pc_14d4c

dec_label_pc_14d4c:                               ; preds = %bb, %dec_label_pc_14d44
  %v0_14d4c = phi i32 [ %v0_14d34, %dec_label_pc_14d44 ], [ 1, %bb ]
  %v1_14d4c = add i32 %v0_14d4c, 4
  store i32 %v1_14d4c, i32* %stack_var_-20, align 4
  store i32 %v2_14d38, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f864.614 to i32), i32* %r0.global-to-local, align 4
  %v1_14d64 = call i32 @function_158c4()
  store i32 ptrtoint (i32** @global_var_1f68c.618 to i32), i32* %r0.global-to-local, align 4
  %v3_14d70 = call i32 @function_150e4(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v2_14d38)
  store i32 %v3_14d70, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f864.614 to i32), i32* %r0.global-to-local, align 4
  store i32 85384, i32* @lr, align 4
  %v1_14d84 = call i32 @function_158c4()
  store i32 %v1_14d84, i32* %r0.global-to-local, align 4
  %v2_14d88 = icmp eq i32 %v3_14d70, 0
  br i1 %v2_14d88, label %dec_label_pc_14d90, label %dec_label_pc_14e40

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14d4c
  %v2_14d94 = load i32, i32* @global_var_1f88c.621, align 4
  store i32 %v2_14d94, i32* @r4, align 4
  %v2_14d98 = load i32, i32* %stack_var_-20, align 4
  %v3_14d9c = icmp ult i32 %v2_14d98, %v2_14d94
  br i1 %v3_14d9c, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_14d90
  %v3_14da0 = add i32 %v2_14d94, -1
  %v2_14da4 = add i32 %v3_14da0, %v2_14d98
  %v2_14da8 = sub i32 0, %v2_14d94
  %v3_14dac = and i32 %v2_14da4, %v2_14da8
  store i32 %v3_14dac, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14d90, %bb14
  store i32 ptrtoint (i32* @global_var_1faf4.623 to i32), i32* %r0.global-to-local, align 4
  %v1_14db8 = call i32 @function_158c4()
  %v0_14dbc = load i32, i32* @r4, align 4
  store i32 %v0_14dbc, i32* %r0.global-to-local, align 4
  %v1_14dc0 = call i32 @function_16078(i32 %v0_14dbc)
  store i32 %v1_14dc0, i32* %r0.global-to-local, align 4
  %v7_14dc4 = icmp eq i32 %v1_14dc0, -1
  br i1 %v7_14dc4, label %bb15, label %dec_label_pc_14dd0

bb15:                                             ; preds = %.thread3
  store i32 %v1_14dc0, i32* @r5, align 4
  br label %dec_label_pc_14de4

dec_label_pc_14dd0:                               ; preds = %.thread3
  %v1_14dd0 = add i32 %v1_14dc0, 3
  %v1_14dd4 = and i32 %v1_14dd0, -4
  store i32 %v1_14dd4, i32* @r5, align 4
  %v9_14dd8 = icmp eq i32 %v1_14dd4, %v1_14dc0
  br i1 %v9_14dd8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_14dd0
  %v3_14ddc = sub i32 %v1_14dd4, %v1_14dc0
  store i32 %v3_14ddc, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14dd0, %bb16
  %v1_14de0 = xor i1 %v9_14dd8, true
  call void @__pseudo_cond_branch(i1 %v1_14de0, i32 ptrtoint (i32* @global_var_16078.624 to i32))
  br label %dec_label_pc_14de4

dec_label_pc_14de4:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1faf4.623 to i32), i32* %r0.global-to-local, align 4
  store i32 85492, i32* @lr, align 4
  %v1_14df0 = call i32 @function_158c4()
  store i32 %v1_14df0, i32* %r0.global-to-local, align 4
  %v0_14df4 = load i32, i32* @r5, align 4
  %v7_14df4 = icmp eq i32 %v0_14df4, -1
  br i1 %v7_14df4, label %dec_label_pc_14e50, label %dec_label_pc_14dfc

dec_label_pc_14dfc:                               ; preds = %dec_label_pc_14de4
  store i32 ptrtoint (i32* @global_var_1f864.614 to i32), i32* %r0.global-to-local, align 4
  %v1_14e08 = call i32 @function_158c4()
  %v0_14e0c = load i32, i32* @r4, align 4
  %v0_14e10 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f68c.618 to i32), i32* %r0.global-to-local, align 4
  %v4_14e18 = call i32 @function_15238(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v0_14e10, i32 %v0_14e0c)
  store i32 ptrtoint (i32** @global_var_1f68c.618 to i32), i32* %r0.global-to-local, align 4
  %v3_14e24 = call i32 @function_150e4(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v2_14d38)
  store i32 %v3_14e24, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f864.614 to i32), i32* %r0.global-to-local, align 4
  store i32 85560, i32* @lr, align 4
  %v1_14e34 = call i32 @function_158c4()
  store i32 %v1_14e34, i32* %r0.global-to-local, align 4
  %v2_14e38 = icmp eq i32 %v3_14e24, 0
  br i1 %v2_14e38, label %dec_label_pc_14e50, label %dec_label_pc_14e40

dec_label_pc_14e40:                               ; preds = %dec_label_pc_14d4c, %dec_label_pc_14dfc
  %v1_14e44 = phi i32 [ %v3_14d70, %dec_label_pc_14d4c ], [ %v3_14e24, %dec_label_pc_14dfc ]
  %v2_14e40 = load i32, i32* %stack_var_-20, align 4
  %v2_14e44 = inttoptr i32 %v1_14e44 to i32*
  store i32 %v2_14e40, i32* %v2_14e44, align 4
  %v3_14e44 = load i32, i32* %r4.global-to-local, align 4
  %v4_14e44 = add i32 %v3_14e44, 4
  store i32 %v4_14e44, i32* %r4.global-to-local, align 4
  %v2_14e48 = icmp eq i32 %v4_14e44, 0
  br i1 %v2_14e48, label %dec_label_pc_14e50, label %dec_label_pc_14e60

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e40, %dec_label_pc_14dfc, %dec_label_pc_14de4, %dec_label_pc_14d44
  %v0_14e50 = call i32 @function_14858()
  store i32 %v0_14e50, i32* %r0.global-to-local, align 4
  %v2_14e58 = inttoptr i32 %v0_14e50 to i32*
  store i32 12, i32* %v2_14e58, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e60

dec_label_pc_14e60:                               ; preds = %dec_label_pc_14e40, %dec_label_pc_14e50
  %v0_14e60 = phi i32 [ %v4_14e44, %dec_label_pc_14e40 ], [ 0, %dec_label_pc_14e50 ]
  store i32 %v0_14e60, i32* %r0.global-to-local, align 4
  store i32 %v3_14d30, i32* @r4, align 4
  store i32 %v6_14d30, i32* @r5, align 4
  store i32 %v9_14d30, i32* @r6, align 4
  ret i32 %v0_14e60

; uselistorder directives
  uselistorder i32 %v0_14e60, { 1, 0 }
  uselistorder i32 %v3_14e24, { 1, 0, 2 }
  uselistorder i32 %v1_14dd4, { 1, 0, 2 }
  uselistorder i32 %v1_14dc0, { 4, 0, 3, 2, 1, 5 }
  uselistorder i32 %v3_14d70, { 1, 0, 2 }
  uselistorder i32 %v0_14d34, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 8, 4, 6, 7, 9, 12, 11, 10, 2, 14, 13, 17, 15, 16, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_14e60, { 1, 0 }
  uselistorder label %dec_label_pc_14e40, { 1, 0 }
  uselistorder label %dec_label_pc_14de4, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14d4c, { 1, 0 }
}

define i32 @function_14e84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14e84:
  %stack_var_-12 = alloca i32, align 4
  %v3_14e84 = load i32, i32* @r4, align 4
  store i32 %v3_14e84, i32* %stack_var_-12, align 4
  %v6_14e84 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_14e8c = mul i32 %arg2, %arg1
  store i32 %v2_14e8c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_14e90 = icmp eq i32 %arg1, 0
  store i32 %v2_14e8c, i32* @r0, align 4
  br i1 %v2_14e90, label %dec_label_pc_14ebc, label %dec_label_pc_14e9c

dec_label_pc_14e9c:                               ; preds = %dec_label_pc_14e84
  %v0_14e9c = call i32 @function_13ed0()
  %v0_14ea0 = load i32, i32* @r5, align 4
  %v9_14ea0 = icmp eq i32 %v0_14ea0, %v0_14e9c
  store i32 0, i32* @r5, align 4
  br i1 %v9_14ea0, label %dec_label_pc_14e9c.dec_label_pc_14ebc_crit_edge, label %dec_label_pc_14eac

dec_label_pc_14e9c.dec_label_pc_14ebc_crit_edge:  ; preds = %dec_label_pc_14e9c
  %v0_14ebc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14ebc

dec_label_pc_14eac:                               ; preds = %dec_label_pc_14e9c
  %v0_14eac = call i32 @function_14858()
  %v2_14eb4 = inttoptr i32 %v0_14eac to i32*
  store i32 12, i32* %v2_14eb4, align 4
  br label %dec_label_pc_14ed4

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e9c.dec_label_pc_14ebc_crit_edge, %dec_label_pc_14e84
  %v0_14ebc = phi i32 [ %v0_14ebc.pre, %dec_label_pc_14e9c.dec_label_pc_14ebc_crit_edge ], [ %v2_14e8c, %dec_label_pc_14e84 ]
  %v1_14ec0 = call i32 @function_14d30(i32 %v0_14ebc)
  store i32 %v1_14ec0, i32* @r5, align 4
  store i32 85716, i32* @lr, align 4
  %v1_14ed0 = icmp ne i32 %v1_14ec0, 0
  call void @__pseudo_cond_branch(i1 %v1_14ed0, i32 ptrtoint (i32* @global_var_148c0.625 to i32))
  br label %dec_label_pc_14ed4

dec_label_pc_14ed4:                               ; preds = %dec_label_pc_14eac, %dec_label_pc_14ebc
  %v0_14ed4 = load i32, i32* @r5, align 4
  %v2_14ed8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14ed8, i32* @r4, align 4
  store i32 %v6_14e84, i32* @r5, align 4
  ret i32 %v0_14ed4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14ed4, { 1, 0 }
}

define i32 @function_14edc() local_unnamed_addr {
dec_label_pc_14edc:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_14edc = load i32, i32* @r0, align 4
  %v2_14edc = icmp eq i32 %v0_14edc, 0
  %v3_14ee0 = load i32, i32* @r4, align 4
  store i32 %v3_14ee0, i32* %stack_var_-24, align 4
  %v6_14ee0 = load i32, i32* @r5, align 4
  %v9_14ee0 = load i32, i32* @r6, align 4
  %v15_14ee0 = load i32, i32* @r8, align 4
  br i1 %v2_14edc, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_14edc
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_14edc
  %v1_14ee8 = add i32 %v0_14edc, -4
  %v2_14ee8 = inttoptr i32 %v1_14ee8 to i32*
  %v3_14ee8 = load i32, i32* %v2_14ee8, align 4
  store i32 %v3_14ee8, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f68c.618 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_14ee8, i32* @r4, align 4
  %v1_14f00 = call i32 @function_158c4()
  %v0_14f04 = load i32, i32* @r4, align 4
  %v0_14f08 = load i32, i32* @r5, align 4
  %v4_14f10 = call i32 @function_15238(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v0_14f04, i32 %v0_14f08)
  %v1_14f18 = inttoptr i32 %v4_14f10 to i32*
  %v2_14f18 = load i32, i32* %v1_14f18, align 4
  store i32 %v2_14f18, i32* %r6.global-to-local, align 4
  %v2_14f1c = load i32, i32* @global_var_1f88c.621, align 4
  %v4_14f20 = mul i32 %v2_14f1c, 8
  %v6_14f20 = icmp ult i32 %v2_14f18, %v4_14f20
  store i32 %v4_14f10, i32* @r4, align 4
  br i1 %v6_14f20, label %dec_label_pc_14f60, label %dec_label_pc_14f2c

dec_label_pc_14f2c:                               ; preds = %bb11
  %v1_14f34 = call i32 @function_158c4()
  %v1_14f3c = call i32 @function_16078(i32 0)
  %v0_14f40 = load i32, i32* @r4, align 4
  %v1_14f40 = add i32 %v0_14f40, 12
  store i32 %v1_14f40, i32* @r5, align 4
  %v9_14f44 = icmp eq i32 %v1_14f40, %v1_14f3c
  br i1 %v9_14f44, label %dec_label_pc_14f68, label %dec_label_pc_14f4c

dec_label_pc_14f4c:                               ; preds = %dec_label_pc_14f2c
  %v1_14f58 = call i32 @function_158c4()
  br label %dec_label_pc_14f60

dec_label_pc_14f60:                               ; preds = %bb11, %dec_label_pc_14f4c, %bb14
  %v2_14f60 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14f60, i32* @r4, align 4
  store i32 %v6_14ee0, i32* @r5, align 4
  store i32 %v9_14ee0, i32* %r6.global-to-local, align 4
  store i32 %v15_14ee0, i32* %r8.global-to-local, align 4
  %v0_14f64 = call i32 @function_158c4()
  %v0_14f68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14f68

dec_label_pc_14f68:                               ; preds = %dec_label_pc_14f2c, %dec_label_pc_14f60
  %v1_14f70 = phi i32 [ %v0_14f40, %dec_label_pc_14f2c ], [ %v0_14f68.pre, %dec_label_pc_14f60 ]
  %v1_14f68 = add i32 %v1_14f70, 4
  %v2_14f68 = inttoptr i32 %v1_14f68 to i32*
  %v3_14f68 = load i32, i32* %v2_14f68, align 4
  %v2_14f6c = icmp eq i32 %v3_14f68, 0
  br i1 %v2_14f6c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14f68
  %v2_14f70 = add i32 %v1_14f70, 8
  %v3_14f70 = inttoptr i32 %v2_14f70 to i32*
  %v4_14f70 = load i32, i32* %v3_14f70, align 4
  %v3_14f74 = add i32 %v3_14f68, 8
  %v4_14f74 = inttoptr i32 %v3_14f74 to i32*
  store i32 %v4_14f70, i32* %v4_14f74, align 4
  %v0_14f78.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14f68, %bb12
  %v0_14f78 = phi i32 [ %v1_14f70, %dec_label_pc_14f68 ], [ %v0_14f78.pre, %bb12 ]
  %v1_14f78 = add i32 %v0_14f78, 8
  %v2_14f78 = inttoptr i32 %v1_14f78 to i32*
  %v3_14f78 = load i32, i32* %v2_14f78, align 4
  %v1_14f7c = add i32 %v0_14f78, 4
  %v2_14f7c = inttoptr i32 %v1_14f7c to i32*
  %v3_14f7c = load i32, i32* %v2_14f7c, align 4
  %v2_14f80 = icmp eq i32 %v3_14f78, 0
  br i1 %v2_14f80, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_14f84 = add i32 %v3_14f78, 4
  %v4_14f84 = inttoptr i32 %v3_14f84 to i32*
  store i32 %v3_14f7c, i32* %v4_14f84, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_14f88 = load i32, i32* %r8.global-to-local, align 4
  %v3_14f88 = inttoptr i32 %v2_14f88 to i32*
  store i32 %v3_14f7c, i32* %v3_14f88, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_14f98 = call i32 @function_158c4()
  %v0_14f9c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f9c = load i32, i32* @r4, align 4
  %v0_14fa4 = load i32, i32* @r5, align 4
  %v2_14f9c = sub i32 12, %v0_14f9c
  %v1_14fa0 = add i32 %v2_14f9c, %v1_14f9c
  %v2_14fa4 = sub i32 %v1_14fa0, %v0_14fa4
  %v1_14fa8 = call i32 @function_16078(i32 %v2_14fa4)
  br label %dec_label_pc_14f60

; uselistorder directives
  uselistorder i32 %v0_14f78, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_16078, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14f68, { 1, 0 }
  uselistorder label %dec_label_pc_14f60, { 2, 1, 0 }
}

define i32 @function_14fcc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14fcc:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14fcc = load i32, i32* @r4, align 4
  store i32 %v3_14fcc, i32* %stack_var_-24, align 4
  %v6_14fcc = load i32, i32* @r5, align 4
  %v9_14fcc = load i32, i32* @r6, align 4
  %v12_14fcc = load i32, i32* @r7, align 4
  %v15_14fcc = load i32, i32* @r8, align 4
  %v18_14fcc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_14fd0 = icmp eq i32 %arg2, 0
  %v0_14fd4 = load i32, i32* @r0, align 4
  store i32 %v0_14fd4, i32* @r7, align 4
  br i1 %v2_14fd0, label %dec_label_pc_14fdc, label %dec_label_pc_14fe4

dec_label_pc_14fdc:                               ; preds = %dec_label_pc_14fcc
  %v0_14fdc = call i32 @function_14edc()
  %v0_14fec.pre = load i32, i32* @r4, align 4
  %v2_14ff0.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_14fec

dec_label_pc_14fe4:                               ; preds = %dec_label_pc_14fcc
  %v2_14fe4 = icmp eq i32 %v0_14fd4, 0
  br i1 %v2_14fe4, label %dec_label_pc_14fec, label %dec_label_pc_14ff8

dec_label_pc_14fec:                               ; preds = %dec_label_pc_14fe4, %dec_label_pc_14fdc
  %v2_14ff0 = phi i32 [ %v3_14fcc, %dec_label_pc_14fe4 ], [ %v2_14ff0.pre, %dec_label_pc_14fdc ]
  %v0_14fec = phi i32 [ %arg2, %dec_label_pc_14fe4 ], [ %v0_14fec.pre, %dec_label_pc_14fdc ]
  store i32 %v2_14ff0, i32* @r4, align 4
  store i32 %v6_14fcc, i32* @r5, align 4
  store i32 %v9_14fcc, i32* @r6, align 4
  store i32 %v12_14fcc, i32* @r7, align 4
  store i32 %v18_14fcc, i32* @lr, align 4
  %v1_14ff4 = call i32 @function_14d30(i32 %v0_14fec)
  %v0_14ff8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %dec_label_pc_14fe4, %dec_label_pc_14fec
  %v0_15010 = phi i32 [ %v0_14fd4, %dec_label_pc_14fe4 ], [ %v1_14ff4, %dec_label_pc_14fec ]
  %v0_14ff8 = phi i32 [ %arg2, %dec_label_pc_14fe4 ], [ %v0_14ff8.pre, %dec_label_pc_14fec ]
  %v1_14ff8 = add i32 %v0_14ff8, 7
  %v1_14ffc = and i32 %v1_14ff8, -4
  store i32 %v1_14ffc, i32* @r5, align 4
  %v2_15000 = icmp ugt i32 %v1_14ffc, 10
  %v1_15004 = add i32 %v0_15010, -4
  %v2_15004 = inttoptr i32 %v1_15004 to i32*
  %v3_15004 = load i32, i32* %v2_15004, align 4
  store i32 %v3_15004, i32* @r6, align 4
  br i1 %v2_15000, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_14ff8
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_14ff8, %bb
  %v0_1508c = phi i32 [ %v1_14ffc, %dec_label_pc_14ff8 ], [ 12, %bb ]
  store i32 %v1_15004, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_1508c, %v3_15004
  br i1 %tmp, label %dec_label_pc_15018, label %dec_label_pc_1508c

dec_label_pc_15018:                               ; preds = %bb14
  %v2_1500c = sub i32 %v0_1508c, %v3_15004
  %v1_15028 = call i32 @function_158c4()
  %v0_15030 = load i32, i32* @r8, align 4
  %v1_15030 = load i32, i32* @r6, align 4
  %v2_15030 = add i32 %v1_15030, %v0_15030
  %v4_15038 = call i32 @function_15178(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v2_15030, i32 %v2_1500c)
  store i32 %v4_15038, i32* @r4, align 4
  store i32 86096, i32* @lr, align 4
  %v1_1504c = call i32 @function_158c4()
  %v0_15050 = load i32, i32* @r4, align 4
  %v2_15050 = icmp eq i32 %v0_15050, 0
  br i1 %v2_15050, label %dec_label_pc_15060, label %.thread

.thread:                                          ; preds = %dec_label_pc_15018
  %v1_15054 = load i32, i32* @r6, align 4
  %v3_15054 = add i32 %v1_15054, %v0_15050
  %v2_15058 = load i32, i32* @r7, align 4
  %v3_15058 = add i32 %v2_15058, -4
  %v4_15058 = inttoptr i32 %v3_15058 to i32*
  store i32 %v3_15054, i32* %v4_15058, align 4
  br label %dec_label_pc_150cc

dec_label_pc_15060:                               ; preds = %dec_label_pc_15018
  %v0_15060 = load i32, i32* @r5, align 4
  %v1_15060 = add i32 %v0_15060, -4
  %v1_15064 = call i32 @function_14d30(i32 %v1_15060)
  store i32 %v1_15064, i32* @r0, align 4
  store i32 %v1_15064, i32* @r4, align 4
  %v2_15068 = icmp eq i32 %v1_15064, 0
  br i1 %v2_15068, label %dec_label_pc_15084, label %dec_label_pc_15070

dec_label_pc_15070:                               ; preds = %dec_label_pc_15060
  %v0_15070 = load i32, i32* @r6, align 4
  %v1_15070 = add i32 %v0_15070, -4
  store i32 %v1_15070, i32* @r2, align 4
  %v0_15074 = load i32, i32* @r7, align 4
  store i32 %v0_15074, i32* @r1, align 4
  %v3_15078 = call i32 @function_148a0(i32 %v1_15064, i32 %v0_15074, i32 %v1_15070)
  %v0_1507c = load i32, i32* @r7, align 4
  store i32 %v0_1507c, i32* @r0, align 4
  %v0_15080 = call i32 @function_14edc()
  %v0_15084.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15084

dec_label_pc_15084:                               ; preds = %dec_label_pc_15060, %dec_label_pc_15070
  %v0_15084 = phi i32 [ 0, %dec_label_pc_15060 ], [ %v0_15084.pre, %dec_label_pc_15070 ]
  store i32 %v0_15084, i32* @r7, align 4
  br label %dec_label_pc_150cc

dec_label_pc_1508c:                               ; preds = %bb14
  %v1_1508c = add i32 %v0_1508c, 28
  %tmp15 = icmp ugt i32 %v1_1508c, %v3_15004
  br i1 %tmp15, label %dec_label_pc_150cc, label %dec_label_pc_15098

dec_label_pc_15098:                               ; preds = %dec_label_pc_1508c
  %v1_150a4 = call i32 @function_158c4()
  %v0_150a8 = load i32, i32* @r8, align 4
  %v1_150a8 = load i32, i32* @r5, align 4
  %v2_150a8 = add i32 %v1_150a8, %v0_150a8
  %v1_150ac = load i32, i32* @r6, align 4
  %v2_150ac = sub i32 %v1_150ac, %v1_150a8
  %v4_150b4 = call i32 @function_15238(i32* bitcast (i32** @global_var_1f68c.618 to i32*), i32 %v2_150a8, i32 %v2_150ac)
  store i32 86216, i32* @lr, align 4
  %v1_150c4 = call i32 @function_158c4()
  %v0_150c8 = load i32, i32* @r5, align 4
  %v1_150c8 = load i32, i32* @r7, align 4
  %v2_150c8 = add i32 %v1_150c8, -4
  %v3_150c8 = inttoptr i32 %v2_150c8 to i32*
  store i32 %v0_150c8, i32* %v3_150c8, align 4
  br label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %.thread, %dec_label_pc_1508c, %dec_label_pc_15084, %dec_label_pc_15098
  %v0_150cc = load i32, i32* @r7, align 4
  %v2_150d0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_150d0, i32* @r4, align 4
  store i32 %v6_14fcc, i32* @r5, align 4
  store i32 %v9_14fcc, i32* @r6, align 4
  store i32 %v12_14fcc, i32* @r7, align 4
  store i32 %v15_14fcc, i32* @r8, align 4
  ret i32 %v0_150cc

; uselistorder directives
  uselistorder i32 %v1_150a8, { 1, 0 }
  uselistorder i32 %v0_1508c, { 1, 2, 0 }
  uselistorder i32 %v3_15004, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1f68c.618, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1f68c.618 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14d30, { 2, 58, 1, 4, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3 }
  uselistorder i32 ()* @function_14edc, { 1, 0, 4, 3, 2, 5, 6, 7 }
  uselistorder i32* @r8, { 113, 114, 115, 116, 118, 117, 8, 9, 11, 10, 12, 13, 14, 15, 16, 21, 22, 17, 18, 19, 20, 36, 37, 38, 39, 102, 103, 104, 30, 31, 32, 33, 34, 35, 40, 41, 42, 0, 1, 2, 3, 4, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 6, 67, 68, 7, 69, 70, 71, 72, 73, 74, 75, 76, 5, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 23, 24, 25, 26, 27, 28, 29, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 177, 180, 181, 182, 183, 184, 185, 186 }
  uselistorder i32* @r7, { 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 54, 55, 36, 44, 37, 1, 35, 51, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 56, 64, 65, 57, 58, 59, 60, 61, 62, 63, 79, 80, 2, 81, 82, 83, 84, 85, 86, 87, 88, 221, 222, 223, 73, 0, 74, 75, 76, 77, 78, 89, 90, 91, 92, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 66, 67, 68, 69, 70, 71, 72, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 4, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298 }
  uselistorder label %dec_label_pc_150cc, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_15084, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_14ff8, { 1, 0 }
}

define i32 @function_150e4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_150e4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_150e4 = inttoptr i32 %arg2 to i32*
  %v2_150e4 = load i32, i32* %v1_150e4, align 4
  %v3_150e8 = load i32, i32* @r4, align 4
  store i32 %v3_150e8, i32* %stack_var_-8, align 4
  %v1_150ec = add i32 %v2_150e4, 3
  %v1_150f0 = and i32 %v1_150ec, -4
  store i32 %v1_150f0, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_150f8 = icmp ugt i32 %v1_150f0, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_15100 = load i32, i32* %arg1, align 4
  store i32 %v2_15100, i32* %r0.global-to-local, align 4
  br i1 %v2_150f8, label %dec_label_pc_1516c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_150e4
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1516c.preheader

dec_label_pc_1516c.preheader:                     ; preds = %dec_label_pc_150e4, %bb
  %v1_15120 = phi i32 [ %v1_150f0, %dec_label_pc_150e4 ], [ 12, %bb ]
  %v2_1516c9 = icmp eq i32 %v2_15100, 0
  br i1 %v2_1516c9, label %dec_label_pc_15174, label %dec_label_pc_1510c

dec_label_pc_1510c:                               ; preds = %dec_label_pc_1516c.preheader, %dec_label_pc_15168
  %v2_15124 = phi i32 [ %v3_15168, %dec_label_pc_15168 ], [ %v2_15100, %dec_label_pc_1516c.preheader ]
  %v1_1510c = inttoptr i32 %v2_15124 to i32*
  %v2_1510c = load i32, i32* %v1_1510c, align 4
  store i32 %v2_1510c, i32* %ip.global-to-local, align 4
  %v3_15110 = icmp ult i32 %v2_1510c, %v1_15120
  br i1 %v3_15110, label %dec_label_pc_15168, label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_1510c
  %v1_15118 = add i32 %v1_15120, 44
  %v3_1511c = icmp ult i32 %v2_1510c, %v1_15118
  br i1 %v3_1511c, label %dec_label_pc_1512c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_15118
  %v2_15110.le = sub i32 %v2_1510c, %v1_15120
  store i32 %v2_15110.le, i32* %v1_1510c, align 4
  %v0_15158.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_15160.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_1512c:                               ; preds = %dec_label_pc_15118
  %v1_1512c = add i32 %v2_15124, 4
  %v2_1512c = inttoptr i32 %v1_1512c to i32*
  %v3_1512c = load i32, i32* %v2_1512c, align 4
  store i32 %v3_1512c, i32* %r2.global-to-local, align 4
  %v2_15130 = icmp eq i32 %v3_1512c, 0
  br i1 %v2_15130, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_1512c
  %v2_15134 = add i32 %v2_15124, 8
  %v3_15134 = inttoptr i32 %v2_15134 to i32*
  %v4_15134 = load i32, i32* %v3_15134, align 4
  %v3_15138 = add i32 %v3_1512c, 8
  %v4_15138 = inttoptr i32 %v3_15138 to i32*
  store i32 %v4_15134, i32* %v4_15138, align 4
  %v0_1513c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1512c, %bb27
  %v0_1513c = phi i32 [ %v2_15124, %dec_label_pc_1512c ], [ %v0_1513c.pre, %bb27 ]
  %v1_1513c = add i32 %v0_1513c, 8
  %v2_1513c = inttoptr i32 %v1_1513c to i32*
  %v3_1513c = load i32, i32* %v2_1513c, align 4
  %v1_15140 = add i32 %v0_1513c, 4
  %v2_15140 = inttoptr i32 %v1_15140 to i32*
  %v3_15140 = load i32, i32* %v2_15140, align 4
  %v2_15144 = icmp eq i32 %v3_1513c, 0
  br i1 %v2_15144, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_15148 = add i32 %v3_1513c, 4
  %v4_15148 = inttoptr i32 %v3_15148 to i32*
  store i32 %v3_15140, i32* %v4_15148, align 4
  %v1_15150 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_15150, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1514c = load i32, i32* %r1.global-to-local, align 4
  %v3_1514c = inttoptr i32 %v2_1514c to i32*
  store i32 %v3_15140, i32* %v3_1514c, align 4
  %v1_15154.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_15154.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_15160 = phi i32 [ %v0_15160.pre, %.thread._crit_edge ], [ %v1_15150, %bb28 ], [ %v1_15154.pre, %.thread5 ]
  %v0_15158 = phi i32 [ %v0_15158.pre, %.thread._crit_edge ], [ %v1_15150, %bb28 ], [ %v1_15154.pre, %.thread5 ]
  %v1_15158 = load i32, i32* %r0.global-to-local, align 4
  %v2_15158 = sub i32 %v1_15158, %v0_15158
  %v1_1515c = add i32 %v2_15158, 12
  store i32 %v1_1515c, i32* %r0.global-to-local, align 4
  %v1_15160 = load i32, i32* %r4.global-to-local, align 4
  %v2_15160 = inttoptr i32 %v1_15160 to i32*
  store i32 %v0_15160, i32* %v2_15160, align 4
  %v2_15164 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15164, i32* %r4.global-to-local, align 4
  ret i32 %v1_1515c

dec_label_pc_15168:                               ; preds = %dec_label_pc_1510c
  %v1_15168 = add i32 %v2_15124, 4
  %v2_15168 = inttoptr i32 %v1_15168 to i32*
  %v3_15168 = load i32, i32* %v2_15168, align 4
  store i32 %v3_15168, i32* %r0.global-to-local, align 4
  %v2_1516c = icmp eq i32 %v3_15168, 0
  br i1 %v2_1516c, label %dec_label_pc_1516c.dec_label_pc_15174_crit_edge, label %dec_label_pc_1510c

dec_label_pc_1516c.dec_label_pc_15174_crit_edge:  ; preds = %dec_label_pc_15168
  br label %dec_label_pc_15174

dec_label_pc_15174:                               ; preds = %dec_label_pc_1516c.dec_label_pc_15174_crit_edge, %dec_label_pc_1516c.preheader
  store i32 %v3_150e8, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_15168, { 1, 2, 0 }
  uselistorder i32 %v0_1513c, { 1, 0 }
  uselistorder i32 %v2_1510c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_15124, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_15120, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1510c, { 1, 0 }
  uselistorder label %dec_label_pc_1516c.preheader, { 1, 0 }
}

define i32 @function_15178(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15178:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_1517c = load i32, i32* %arg1, align 4
  store i32 %v2_1517c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_151f46 = icmp eq i32 %v2_1517c, 0
  br i1 %v2_151f46, label %dec_label_pc_151fc, label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15178, %dec_label_pc_151f0
  %v0_151c8 = phi i32 [ %v3_151f0, %dec_label_pc_151f0 ], [ %v2_1517c, %dec_label_pc_15178 ]
  %v1_15188 = inttoptr i32 %v0_151c8 to i32*
  %v2_15188 = load i32, i32* %v1_15188, align 4
  store i32 %v2_15188, i32* %r0.global-to-local, align 4
  %v2_1518c = sub i32 %v0_151c8, %v2_15188
  %v1_15190 = add i32 %v2_1518c, 12
  %v3_15194 = icmp uge i32 %v1_15190, %arg2
  %v9_15194 = icmp eq i32 %v1_15190, %arg2
  %v2_15198 = xor i1 %v9_15194, true
  %v3_15198 = and i1 %v3_15194, %v2_15198
  br i1 %v3_15198, label %dec_label_pc_151f0, label %dec_label_pc_1519c

dec_label_pc_1519c:                               ; preds = %dec_label_pc_15188
  br i1 %v9_15194, label %dec_label_pc_151a0, label %dec_label_pc_151fc

dec_label_pc_151a0:                               ; preds = %dec_label_pc_1519c
  %v1_151a0 = add i32 %arg3, 3
  %v1_151a4 = and i32 %v1_151a0, -4
  store i32 %v1_151a4, i32* %r2.global-to-local, align 4
  %v2_151a8 = sub i32 %v2_15188, %v1_151a4
  %v3_151a8 = icmp ult i32 %v2_15188, %v1_151a4
  br i1 %v3_151a8, label %dec_label_pc_151fc, label %dec_label_pc_151b0

dec_label_pc_151b0:                               ; preds = %dec_label_pc_151a0
  %v1_151b0 = add i32 %v1_151a4, 44
  %v3_151b4 = icmp ult i32 %v2_15188, %v1_151b0
  br i1 %v3_151b4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_151b0
  store i32 %v2_151a8, i32* %v1_15188, align 4
  %v1_151c0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_151c0, i32* %r0.global-to-local, align 4
  ret i32 %v1_151c0

.thread2:                                         ; preds = %dec_label_pc_151b0
  %v1_151c8 = add i32 %v0_151c8, 4
  %v2_151c8 = inttoptr i32 %v1_151c8 to i32*
  %v3_151c8 = load i32, i32* %v2_151c8, align 4
  store i32 %v3_151c8, i32* %r2.global-to-local, align 4
  %v2_151cc = icmp eq i32 %v3_151c8, 0
  br i1 %v2_151cc, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_151d0 = add i32 %v0_151c8, 8
  %v3_151d0 = inttoptr i32 %v2_151d0 to i32*
  %v4_151d0 = load i32, i32* %v3_151d0, align 4
  %v3_151d4 = add i32 %v3_151c8, 8
  %v4_151d4 = inttoptr i32 %v3_151d4 to i32*
  store i32 %v4_151d0, i32* %v4_151d4, align 4
  %v0_151d8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_151d8 = phi i32 [ %v0_151c8, %.thread2 ], [ %v0_151d8.pre, %bb17 ]
  %v1_151d8 = add i32 %v0_151d8, 8
  %v2_151d8 = inttoptr i32 %v1_151d8 to i32*
  %v3_151d8 = load i32, i32* %v2_151d8, align 4
  store i32 %v3_151d8, i32* %r2.global-to-local, align 4
  %v1_151dc = add i32 %v0_151d8, 4
  %v2_151dc = inttoptr i32 %v1_151dc to i32*
  %v3_151dc = load i32, i32* %v2_151dc, align 4
  %v2_151e0 = icmp eq i32 %v3_151d8, 0
  br i1 %v2_151e0, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_151e4 = add i32 %v3_151d8, 4
  %v4_151e4 = inttoptr i32 %v3_151e4 to i32*
  store i32 %v3_151dc, i32* %v4_151e4, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_151e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_151e8 = inttoptr i32 %v2_151e8 to i32*
  store i32 %v3_151dc, i32* %v3_151e8, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_151ec = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_151ec

dec_label_pc_151f0:                               ; preds = %dec_label_pc_15188
  %v1_151f0 = add i32 %v0_151c8, 4
  %v2_151f0 = inttoptr i32 %v1_151f0 to i32*
  %v3_151f0 = load i32, i32* %v2_151f0, align 4
  store i32 %v3_151f0, i32* %ip.global-to-local, align 4
  %v2_151f4 = icmp eq i32 %v3_151f0, 0
  br i1 %v2_151f4, label %dec_label_pc_151f4.dec_label_pc_151fc.loopexit_crit_edge, label %dec_label_pc_15188

dec_label_pc_151f4.dec_label_pc_151fc.loopexit_crit_edge: ; preds = %dec_label_pc_151f0
  br label %dec_label_pc_151fc

dec_label_pc_151fc:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_15178, %dec_label_pc_151f4.dec_label_pc_151fc.loopexit_crit_edge, %dec_label_pc_1519c
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_151f0, { 1, 2, 0 }
  uselistorder i32 %v0_151d8, { 1, 0 }
  uselistorder i32 %v1_151a4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_15194, { 1, 0 }
  uselistorder i32 %v2_15188, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_151c8, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_151fc, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15188, { 1, 0 }
}

define i32 @function_15204() local_unnamed_addr {
dec_label_pc_15204:
  %v0_15204 = load i32, i32* @r2, align 4
  %v2_15204 = icmp eq i32 %v0_15204, 0
  %v0_15208 = load i32, i32* @r3, align 4
  %v1_15208 = load i32, i32* @r1, align 4
  %v2_15208 = add i32 %v1_15208, 4
  %v3_15208 = inttoptr i32 %v2_15208 to i32*
  store i32 %v0_15208, i32* %v3_15208, align 4
  %v0_1520c = load i32, i32* @r2, align 4
  %v1_1520c = load i32, i32* @r1, align 4
  %v2_1520c = add i32 %v1_1520c, 8
  %v3_1520c = inttoptr i32 %v2_1520c to i32*
  store i32 %v0_1520c, i32* %v3_1520c, align 4
  %v1_15214 = load i32, i32* @r1, align 4
  br i1 %v2_15204, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_15204
  %v2_15210 = load i32, i32* @r2, align 4
  %v3_15210 = add i32 %v2_15210, 4
  %v4_15210 = inttoptr i32 %v3_15210 to i32*
  store i32 %v1_15214, i32* %v4_15210, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_15204
  %v2_15214 = load i32, i32* @r0, align 4
  %v3_15214 = inttoptr i32 %v2_15214 to i32*
  store i32 %v1_15214, i32* %v3_15214, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_15218 = load i32, i32* @r3, align 4
  %v2_15218 = icmp eq i32 %v0_15218, 0
  br i1 %v2_15218, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_1521c = load i32, i32* @r1, align 4
  %v3_1521c = add i32 %v0_15218, 8
  %v4_1521c = inttoptr i32 %v3_1521c to i32*
  store i32 %v1_1521c, i32* %v4_1521c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_15220 = load i32, i32* @r0, align 4
  ret i32 %v1_15220

; uselistorder directives
  uselistorder i32 %v1_15214, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_15224() local_unnamed_addr {
dec_label_pc_15224:
  %v0_15224 = load i32, i32* @r2, align 4
  %v2_15224 = icmp eq i32 %v0_15224, 0
  %v1_15228 = load i32, i32* @r1, align 4
  br i1 %v2_15224, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15224
  %v2_15228 = load i32, i32* @r0, align 4
  %v3_15228 = inttoptr i32 %v2_15228 to i32*
  store i32 %v1_15228, i32* %v3_15228, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_15224
  %v3_1522c = add i32 %v0_15224, 4
  %v4_1522c = inttoptr i32 %v3_1522c to i32*
  store i32 %v1_15228, i32* %v4_1522c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_15230 = load i32, i32* @r2, align 4
  %v1_15230 = load i32, i32* @r1, align 4
  %v2_15230 = add i32 %v1_15230, 8
  %v3_15230 = inttoptr i32 %v2_15230 to i32*
  store i32 %v0_15230, i32* %v3_15230, align 4
  %v1_15234 = load i32, i32* @r0, align 4
  ret i32 %v1_15234

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_15238(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15238:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15238 = load i32, i32* @r4, align 4
  store i32 %v3_15238, i32* %stack_var_-20, align 4
  %v2_1523c = load i32, i32* %arg1, align 4
  store i32 %v2_1523c, i32* %r4.global-to-local, align 4
  %v2_15240 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1525c2 = icmp eq i32 %v2_1523c, 0
  br i1 %v2_1525c2, label %dec_label_pc_1530c, label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15238, %dec_label_pc_15254
  %v0_1529c = phi i32 [ %v0_152a4, %dec_label_pc_15254 ], [ 0, %dec_label_pc_15238 ]
  %v0_152a4 = phi i32 [ %v3_15258, %dec_label_pc_15254 ], [ %v2_1523c, %dec_label_pc_15238 ]
  %v1_152605.in = phi i32 [ %v3_15258, %dec_label_pc_15254 ], [ %v2_1523c, %dec_label_pc_15238 ]
  %v1_152605 = add i32 %v1_152605.in, 12
  %v3_1524c = icmp ult i32 %v1_152605, %arg2
  br i1 %v3_1524c, label %dec_label_pc_15254, label %dec_label_pc_1526c

dec_label_pc_15254:                               ; preds = %dec_label_pc_1524c
  store i32 %v0_152a4, i32* %r6.global-to-local, align 4
  %v1_15258 = add i32 %v0_152a4, 4
  %v2_15258 = inttoptr i32 %v1_15258 to i32*
  %v3_15258 = load i32, i32* %v2_15258, align 4
  store i32 %v3_15258, i32* %r4.global-to-local, align 4
  %v2_1525c = icmp eq i32 %v3_15258, 0
  br i1 %v2_1525c, label %dec_label_pc_1525c.dec_label_pc_1530c.loopexit_crit_edge, label %dec_label_pc_1524c

dec_label_pc_1526c:                               ; preds = %dec_label_pc_1524c
  %v1_1526c = inttoptr i32 %v0_152a4 to i32*
  %v2_1526c = load i32, i32* %v1_1526c, align 4
  %v2_15270 = sub i32 %v0_152a4, %v2_1526c
  %v1_15274 = add i32 %v2_15270, 12
  %v3_15278 = icmp uge i32 %v1_15274, %v2_15240
  %v9_15278 = icmp eq i32 %v1_15274, %v2_15240
  %v2_1527c = xor i1 %v9_15278, true
  %v3_1527c = and i1 %v3_15278, %v2_1527c
  br i1 %v3_1527c, label %dec_label_pc_1530c, label %dec_label_pc_15280

dec_label_pc_15280:                               ; preds = %dec_label_pc_1526c
  %v2_15280 = add i32 %v2_1526c, %arg3
  store i32 %v2_15280, i32* %r7.global-to-local, align 4
  br i1 %v9_15278, label %dec_label_pc_15288, label %dec_label_pc_152b4

dec_label_pc_15288:                               ; preds = %dec_label_pc_15280
  %v2_15288 = icmp eq i32 %v0_1529c, 0
  br i1 %v2_15288, label %dec_label_pc_15300, label %dec_label_pc_15290

dec_label_pc_15290:                               ; preds = %dec_label_pc_15288
  %v1_15290 = add i32 %v0_1529c, 12
  %v9_15294 = icmp eq i32 %v1_15290, %arg2
  br i1 %v9_15294, label %dec_label_pc_1529c, label %dec_label_pc_15300

dec_label_pc_1529c:                               ; preds = %dec_label_pc_15290
  %v1_1529c = inttoptr i32 %v0_1529c to i32*
  %v2_1529c = load i32, i32* %v1_1529c, align 4
  %v1_152a0 = add i32 %v0_1529c, 8
  %v2_152a0 = inttoptr i32 %v1_152a0 to i32*
  %v3_152a0 = load i32, i32* %v2_152a0, align 4
  store i32 %v3_152a0, i32* @r2, align 4
  store i32 %v0_152a4, i32* @r1, align 4
  %v2_152a8 = add i32 %v2_1529c, %v2_15280
  store i32 %v2_152a8, i32* %r7.global-to-local, align 4
  %v0_152ac = call i32 @function_15224()
  br label %dec_label_pc_15300

dec_label_pc_152b4:                               ; preds = %dec_label_pc_15280
  %v1_152b4 = add i32 %v0_152a4, 4
  %v2_152b4 = inttoptr i32 %v1_152b4 to i32*
  %v3_152b4 = load i32, i32* %v2_152b4, align 4
  store i32 %v3_152b4, i32* %r5.global-to-local, align 4
  %v2_152b8 = icmp eq i32 %v3_152b4, 0
  br i1 %v2_152b8, label %dec_label_pc_152ec, label %dec_label_pc_152c0

dec_label_pc_152c0:                               ; preds = %dec_label_pc_152b4
  %v1_152c0 = inttoptr i32 %v3_152b4 to i32*
  %v2_152c0 = load i32, i32* %v1_152c0, align 4
  %v2_152c4 = sub i32 %v3_152b4, %v2_152c0
  %v1_152c8 = add i32 %v2_152c4, 12
  %v9_152cc = icmp eq i32 %v2_15240, %v1_152c8
  br i1 %v9_152cc, label %dec_label_pc_152d4, label %dec_label_pc_152ec

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152c0
  store i32 %v0_1529c, i32* @r2, align 4
  store i32 %v3_152b4, i32* @r1, align 4
  %v2_152dc = add i32 %v2_152c0, %v2_15280
  store i32 %v2_152dc, i32* %r7.global-to-local, align 4
  %v0_152e0 = call i32 @function_15224()
  %v0_152e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_152e4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15300

dec_label_pc_152ec:                               ; preds = %dec_label_pc_152c0, %dec_label_pc_152b4
  %v2_152ec = add i32 %v0_152a4, %arg3
  store i32 %v2_152ec, i32* %r4.global-to-local, align 4
  store i32 %v3_152b4, i32* @r3, align 4
  store i32 %v0_1529c, i32* @r2, align 4
  store i32 %v2_152ec, i32* @r1, align 4
  %v0_152fc = call i32 @function_15204()
  br label %dec_label_pc_15300

dec_label_pc_15300:                               ; preds = %dec_label_pc_15290, %dec_label_pc_15288, %dec_label_pc_152d4, %dec_label_pc_1529c, %dec_label_pc_152ec
  %v0_15300 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15300, i32* %r5.global-to-local, align 4
  %v0_15304 = load i32, i32* %r7.global-to-local, align 4
  %v2_15304 = inttoptr i32 %v0_15300 to i32*
  store i32 %v0_15304, i32* %v2_15304, align 4
  br label %dec_label_pc_15324

dec_label_pc_1525c.dec_label_pc_1530c.loopexit_crit_edge: ; preds = %dec_label_pc_15254
  br label %dec_label_pc_1530c

dec_label_pc_1530c:                               ; preds = %dec_label_pc_15238, %dec_label_pc_1525c.dec_label_pc_1530c.loopexit_crit_edge, %dec_label_pc_1526c
  %v1_1530c = add i32 %v2_15240, -12
  store i32 %v1_1530c, i32* %r5.global-to-local, align 4
  %v3_15310 = inttoptr i32 %v1_1530c to i32*
  store i32 %arg3, i32* %v3_15310, align 4
  %v0_15314 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15314, i32* @r3, align 4
  %v0_15318 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_15318, i32* @r2, align 4
  %v0_1531c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1531c, i32* @r1, align 4
  %v0_15320 = call i32 @function_15204()
  br label %dec_label_pc_15324

dec_label_pc_15324:                               ; preds = %dec_label_pc_15300, %dec_label_pc_1530c
  %v0_15324 = load i32, i32* %r5.global-to-local, align 4
  %v2_15328 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15328, i32* @r4, align 4
  ret i32 %v0_15324

; uselistorder directives
  uselistorder i32 %v3_152b4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_15278, { 1, 0 }
  uselistorder i32 %v3_15258, { 2, 3, 1, 0 }
  uselistorder i32 %v0_152a4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_1529c, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_15204, { 1, 0 }
  uselistorder i32* @r3, { 0, 3, 1, 2, 4 }
  uselistorder i32 ()* @function_15224, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15324, { 1, 0 }
  uselistorder label %dec_label_pc_1530c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15300, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1524c, { 1, 0 }
}

define i32 @function_1532c() local_unnamed_addr {
dec_label_pc_15348.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_1532c = ptrtoint i32* %stack_var_-268 to i32
  %v1_1533c = call i32 @function_158c4()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_15348 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_15348

dec_label_pc_15348:                               ; preds = %dec_label_pc_15348.lr.ph, %dec_label_pc_15348
  %v1_1534c = phi i32 [ 31, %dec_label_pc_15348.lr.ph ], [ %v1_15358, %dec_label_pc_15348 ]
  %v4_1534c = mul i32 %v1_1534c, 4
  %v5_1534c = add i32 %v4_1534c, %v2_15348
  %v2_15354 = add i32 %v5_1534c, -128
  %v3_15354 = inttoptr i32 %v2_15354 to i32*
  store i32 0, i32* %v3_15354, align 4
  %v0_15358 = load i32, i32* %r1.global-to-local, align 4
  %v1_15358 = add i32 %v0_15358, -1
  store i32 %v1_15358, i32* %r1.global-to-local, align 4
  %v6_15358 = icmp slt i32 %v1_15358, 0
  br i1 %v6_15358, label %dec_label_pc_15360, label %dec_label_pc_15348

dec_label_pc_15360:                               ; preds = %dec_label_pc_15348
  %v2_15360 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_15360, i32* @r4, align 4
  store i32 %v2_15360, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1536c = call i32 @function_14ce8()
  %v2_15370 = icmp eq i32 %v0_1536c, 0
  br i1 %v2_15370, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15360
  store i32 %v2_15360, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15360, %bb
  store i32 86916, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15370, i32 ptrtoint (i32* @global_var_14500.640 to i32))
  %v2_15388 = load i32, i32* @global_var_1f87c.642, align 4
  %v2_1538c = icmp eq i32 %v2_15388, 0
  br i1 %v2_1538c, label %dec_label_pc_15394, label %dec_label_pc_153c4

dec_label_pc_15394:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1f87c.642, align 4
  br label %dec_label_pc_1539c

dec_label_pc_1539c:                               ; preds = %dec_label_pc_15414, %dec_label_pc_15394
  %v1_153a8 = call i32 @function_158c4()
  %v1_153b0 = call i32 @function_14bac(i32 6)
  store i32 86980, i32* @lr, align 4
  %v1_153c0 = call i32 @function_158c4()
  %v2_153c8.pre = load i32, i32* @global_var_1f87c.642, align 4
  br label %dec_label_pc_153c4

dec_label_pc_153c4:                               ; preds = %.thread1, %dec_label_pc_1539c
  %v0_15438 = phi i32 [ %v2_15388, %.thread1 ], [ %v2_153c8.pre, %dec_label_pc_1539c ]
  store i32 ptrtoint (i32* @global_var_1f87c.642 to i32), i32* %ip.global-to-local, align 4
  %v7_153cc = icmp eq i32 %v0_15438, 1
  br i1 %v7_153cc, label %dec_label_pc_153fc.lr.ph, label %dec_label_pc_15430

dec_label_pc_153fc.lr.ph:                         ; preds = %dec_label_pc_153c4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1f87c.642, align 4
  %v2_153e8 = bitcast i32* %stack_var_-268 to i8*
  %v3_153e8 = call i32 @function_148c0(i8* %v2_153e8, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_153fc

dec_label_pc_153fc:                               ; preds = %dec_label_pc_153fc.lr.ph, %dec_label_pc_153fc
  %v1_15400 = phi i32 [ 31, %dec_label_pc_153fc.lr.ph ], [ %v1_1540c, %dec_label_pc_153fc ]
  %v4_15400 = mul i32 %v1_15400, 4
  %v5_15400 = add i32 %v4_15400, %v2_15348
  %v2_15408 = add i32 %v5_15400, -264
  %v3_15408 = inttoptr i32 %v2_15408 to i32*
  store i32 -1, i32* %v3_15408, align 4
  %v0_1540c = load i32, i32* %r1.global-to-local, align 4
  %v1_1540c = add i32 %v0_1540c, -1
  store i32 %v1_1540c, i32* %r1.global-to-local, align 4
  %v6_1540c = icmp slt i32 %v1_1540c, 0
  br i1 %v6_1540c, label %dec_label_pc_15414, label %dec_label_pc_153fc

dec_label_pc_15414:                               ; preds = %dec_label_pc_153fc
  store i32 %v2_1532c, i32* %r1.global-to-local, align 4
  %v4_15428 = call i32 @function_15bb0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_1539c

dec_label_pc_15430:                               ; preds = %dec_label_pc_153c4
  %v7_15430 = icmp eq i32 %v0_15438, 2
  br i1 %v7_15430, label %dec_label_pc_15438, label %dec_label_pc_15444

dec_label_pc_15438:                               ; preds = %dec_label_pc_15430
  store i32 3, i32* @global_var_1f87c.642, align 4
  %v0_15440 = call i32 @function_1532c()
  %v2_15444.pre = load i32, i32* @global_var_1f87c.642, align 4
  br label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_15430, %dec_label_pc_15438
  %v1_1544c = phi i32 [ %v0_15438, %dec_label_pc_15430 ], [ %v2_15444.pre, %dec_label_pc_15438 ]
  %v7_15448 = icmp eq i32 %v1_1544c, 3
  br i1 %v7_15448, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_15444
  %v2_15454 = load i32, i32* %ip.global-to-local, align 4
  %v3_15454 = inttoptr i32 %v2_15454 to i32*
  store i32 4, i32* %v3_15454, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15444, %bb27
  call void @__pseudo_cond_branch(i1 %v7_15448, i32 ptrtoint (i32* @global_var_15cc8.644 to i32))
  br label %dec_label_pc_1545c

dec_label_pc_1545c:                               ; preds = %dec_label_pc_1545c, %.thread3
  %v0_1545c = call i32 @function_1532c()
  br label %dec_label_pc_1545c

; uselistorder directives
  uselistorder i32 %v1_1540c, { 2, 1, 0 }
  uselistorder i32 %v1_15358, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1f87c.642, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15444, { 1, 0 }
  uselistorder label %dec_label_pc_153fc, { 1, 0 }
  uselistorder label %dec_label_pc_153c4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15348, { 1, 0 }
}

define i32 @function_15474(i8* %arg1) local_unnamed_addr {
dec_label_pc_15474:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_15488 = load i32, i32* @r4, align 4
  store i32 %v3_15488, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_154ac.pre = load i32, i32* bitcast (i32** @global_var_1f7cc.647 to i32*), align 4
  br label %dec_label_pc_154a4

dec_label_pc_154a4:                               ; preds = %dec_label_pc_154a4, %dec_label_pc_15474
  %v0_154dc = phi i32 [ %tmp, %dec_label_pc_15474 ], [ %v1_154a0, %dec_label_pc_154a4 ]
  store i32 %v0_154dc, i32* %r4.global-to-local, align 4
  %v1_154a8 = inttoptr i32 %v0_154dc to i8*
  %v2_154a8 = load i8, i8* %v1_154a8, align 1
  %v3_154a8 = zext i8 %v2_154a8 to i32
  %v3_154b0 = mul nuw nsw i32 %v3_154a8, 2
  %v4_154b0 = add i32 %v3_154b0, %v2_154ac.pre
  %v5_154b0 = inttoptr i32 %v4_154b0 to i8*
  %v6_154b0 = load i8, i8* %v5_154b0, align 1
  %v1_154b4 = and i8 %v6_154b0, 32
  %v2_154b4 = icmp eq i8 %v1_154b4, 0
  %v1_154a0 = add i32 %v0_154dc, 1
  br i1 %v2_154b4, label %dec_label_pc_154bc, label %dec_label_pc_154a4

dec_label_pc_154bc:                               ; preds = %dec_label_pc_154a4
  %v7_154bc = icmp eq i8 %v2_154a8, 43
  br i1 %v7_154bc, label %dec_label_pc_154dc, label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %dec_label_pc_154bc
  %v7_154c4 = icmp eq i8 %v2_154a8, 45
  br i1 %v7_154c4, label %dec_label_pc_154dc, label %bb

bb:                                               ; preds = %dec_label_pc_154c4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15538

dec_label_pc_154dc:                               ; preds = %dec_label_pc_154bc, %dec_label_pc_154c4
  %storemerge30 = phi i32 [ 1, %dec_label_pc_154c4 ], [ 0, %dec_label_pc_154bc ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_154a0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15538

dec_label_pc_15538:                               ; preds = %bb, %dec_label_pc_154dc
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_15540 = call i32 @function_13fe0(i32 -1, i32 10)
  %v0_15544 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15544, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_15550 = urem i32 %v2_15540, 256
  store i32 %v1_15550, i32* %sl.global-to-local, align 4
  %v0_15554 = call i32 @function_13ed0()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_15554, i32* %r8.global-to-local, align 4
  %v0_15568.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15568

dec_label_pc_15564:                               ; preds = %bb48, %dec_label_pc_155c4
  %v0_15564 = phi i32 [ %v1_15594, %bb48 ], [ %v0_15564.pre, %dec_label_pc_155c4 ]
  store i32 %v0_15564, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15568

dec_label_pc_15568:                               ; preds = %dec_label_pc_15538, %dec_label_pc_15564
  %v0_15594 = phi i32 [ %v0_15568.pre, %dec_label_pc_15538 ], [ %v0_15564, %dec_label_pc_15564 ]
  %v1_15568 = inttoptr i32 %v0_15594 to i8*
  %v2_15568 = load i8, i8* %v1_15568, align 1
  %v3_15568 = zext i8 %v2_15568 to i32
  %v1_1556c = add nsw i32 %v3_15568, -48
  %v1_15570 = urem i32 %v1_1556c, 256
  %v1_15578 = or i32 %v3_15568, 32
  %tmp56 = icmp ult i32 %v1_15570, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_15580

dec_label_pc_15580:                               ; preds = %dec_label_pc_15568
  %tmp57 = icmp ugt i32 %v1_15578, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_15580
  %v1_15584 = add nsw i32 %v1_15578, -87
  %v5_1558c = urem i32 %v1_15584, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15568, %dec_label_pc_15580, %bb42
  %v3_155bc = phi i32 [ %v1_15570, %dec_label_pc_15568 ], [ 40, %dec_label_pc_15580 ], [ %v5_1558c, %bb42 ]
  %v1_15590 = load i32, i32* %r5.global-to-local, align 4
  %v1_15594 = add i32 %v0_15594, 1
  store i32 %v1_15594, i32* %r4.global-to-local, align 4
  %v6_15598 = icmp slt i32 %v3_155bc, %v1_15590
  br i1 %v6_15598, label %dec_label_pc_1559c, label %dec_label_pc_155dc

dec_label_pc_1559c:                               ; preds = %bb43
  %v0_1559c = load i32, i32* %ip.global-to-local, align 4
  %v1_1559c = load i32, i32* %r8.global-to-local, align 4
  %v9_1559c = icmp eq i32 %v0_1559c, %v1_1559c
  br i1 %v9_1559c, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_1559c
  br label %dec_label_pc_155ac

bb44:                                             ; preds = %dec_label_pc_1559c
  %v3_1559c = icmp ult i32 %v0_1559c, %v1_1559c
  br i1 %v3_1559c, label %dec_label_pc_155ac, label %dec_label_pc_155c4

dec_label_pc_155ac:                               ; preds = %bb44, %.thread
  %v4_155b41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_155ac = load i32, i32* %sl.global-to-local, align 4
  %v3_155ac = icmp uge i32 %v3_155bc, %v1_155ac
  %v9_155ac = icmp eq i32 %v3_155bc, %v1_155ac
  %v2_155b0 = xor i1 %v3_155ac, true
  %v3_155b0 = or i1 %v9_155ac, %v2_155b0
  br i1 %v3_155b0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_155ac
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_155ac, %bb45
  %v4_155b4 = phi i32 [ %v4_155b41727, %dec_label_pc_155ac ], [ 0, %bb45 ]
  %v2_155b4 = xor i1 %v9_155ac, true
  %v3_155b4 = and i1 %v3_155ac, %v2_155b4
  br i1 %v3_155b4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_155b4 = urem i32 %v4_155b4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_155b8 = phi i32 [ %v5_155b4, %bb47 ], [ %v4_155b4, %bb46 ]
  %v2_155b8 = icmp eq i32 %v0_155b8, 0
  br i1 %v2_155b8, label %bb48, label %dec_label_pc_155c4

bb48:                                             ; preds = %thread-pre-split
  %v4_155bc = mul i32 %v0_1559c, %v1_15590
  %v5_155bc = add i32 %v4_155bc, %v3_155bc
  store i32 %v5_155bc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_15564

dec_label_pc_155c4:                               ; preds = %bb44, %thread-pre-split
  %v0_155c4 = call i32 @function_14858()
  %v0_155c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_155c8 = load i32, i32* %fp.global-to-local, align 4
  %v2_155c8 = and i32 %v1_155c8, %v0_155c8
  store i32 %v2_155c8, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_155d4 = inttoptr i32 %v0_155c4 to i32*
  store i32 34, i32* %v2_155d4, align 4
  %v0_15564.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15564

dec_label_pc_155dc:                               ; preds = %bb43
  %v0_155dc.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_155dc = icmp eq i32 %v0_155dc.pre, 0
  br i1 %v2_155dc, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_155dc
  %v1_155e0 = load i32, i32* %r6.global-to-local, align 4
  %v3_155e0 = inttoptr i32 %v0_155dc.pre to i32*
  store i32 %v1_155e0, i32* %v3_155e0, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_155dc, %bb49
  %v0_155e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155e4 = icmp eq i32 %v0_155e4, 0
  %. = select i1 %v2_155e4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_155f0 = load i32, i32* %fp.global-to-local, align 4
  %v2_155f0 = icmp eq i32 %v0_155f0, 0
  %v0_15614.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_155f0, label %dec_label_pc_1560c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_15614.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_155fc, label %dec_label_pc_1560c

dec_label_pc_155fc:                               ; preds = %bb53
  %v0_155fc = call i32 @function_14858()
  %v2_15604 = inttoptr i32 %v0_155fc to i32*
  store i32 34, i32* %v2_15604, align 4
  %v0_15608 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15608, i32* %ip.global-to-local, align 4
  %v0_1560c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1560c

dec_label_pc_1560c:                               ; preds = %bb53, %bb50, %dec_label_pc_155fc
  %v0_15614.pre = phi i32 [ %v0_15614.pre.pre, %bb53 ], [ %v0_15608, %dec_label_pc_155fc ], [ %v0_15614.pre.pre, %bb50 ]
  %v0_1560c = phi i32 [ %v0_155e4, %bb53 ], [ %v0_1560c.pre, %dec_label_pc_155fc ], [ %v0_155e4, %bb50 ]
  %v2_1560c = icmp eq i32 %v0_1560c, 0
  br i1 %v2_1560c, label %dec_label_pc_1560c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_1560c
  %v2_15610 = sub i32 0, %v0_15614.pre
  store i32 %v2_15610, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1560c._crit_edge

dec_label_pc_1560c._crit_edge:                    ; preds = %dec_label_pc_1560c, %bb54
  %v0_15614 = phi i32 [ %v2_15610, %bb54 ], [ %v0_15614.pre, %dec_label_pc_1560c ]
  %v2_15618 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15618, i32* @r4, align 4
  ret i32 %v0_15614

; uselistorder directives
  uselistorder i32 %v0_15614.pre, { 1, 0 }
  uselistorder i32 %v0_15614.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_155dc.pre, { 1, 0 }
  uselistorder i32 %v4_155b4, { 1, 0 }
  uselistorder i1 %v3_155ac, { 1, 0 }
  uselistorder i32 %v1_155ac, { 1, 0 }
  uselistorder i32 %v1_15594, { 1, 0 }
  uselistorder i32 %v1_15578, { 1, 0 }
  uselistorder i32 %v1_15570, { 1, 0 }
  uselistorder i32 %v0_15564, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_13ed0, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_13fe0, { 5, 2, 1, 12, 11, 7, 3, 10, 9, 8, 6, 4, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_1560c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1560c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_155c4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15568, { 1, 0 }
  uselistorder label %dec_label_pc_15564, { 1, 0 }
  uselistorder label %dec_label_pc_15538, { 1, 0 }
  uselistorder label %dec_label_pc_154dc, { 1, 0 }
}

define i32 @function_15620(i32 %arg1) local_unnamed_addr {
dec_label_pc_15620:
  %stack_var_-16 = alloca i32, align 4
  %v2_15620 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_15620, i32* @r0, align 4
  %v8_1563c = call i32 @function_158cc(i32 %v2_15620, i32 ptrtoint (i32* @global_var_158c4.596 to i32), i32 ptrtoint (i32* @global_var_1f7ac.650 to i32), i32 88268, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_1564c = call i32 @function_158c4()
  %v2_15654 = load i32, i32* @global_var_1f880.654, align 4
  %v2_15658 = icmp eq i32 %v2_15654, 0
  br i1 %v2_15658, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_15620
  call void @__pseudo_branch(i32 %v2_15654)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15620, %bb
  store i32 %v2_15620, i32* @r0, align 4
  %v8_15678 = call i32 @function_158cc(i32 %v2_15620, i32 1, i32 ptrtoint (i32* @global_var_1f7ac.650 to i32), i32 88268, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_15678, i32* @r0, align 4
  %v1_1567c = call i32 @function_15858(i32 %v8_15678)
  %v0_15690 = load i32, i32* @r4, align 4
  %v1_15694 = call i32 @function_15cc8(i32 %v0_15690)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_15620, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_158c4, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_158cc, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 88268, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1f7ac.650 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_158c4.596 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_156b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_156b4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_156b4 = load i32, i32* @r4, align 4
  store i32 %v3_156b4, i32* %stack_var_-20, align 4
  %v6_156b4 = load i32, i32* @r5, align 4
  %v9_156b4 = load i32, i32* @r6, align 4
  %v16_156b4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_156b8 = icmp eq i32 %arg1, 0
  %v2_156bc = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_156b8, label %dec_label_pc_15840, label %dec_label_pc_156d4.preheader

dec_label_pc_156d4.preheader:                     ; preds = %dec_label_pc_156b4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_156dc17 = add i32 %v16_156b4, 124
  br label %dec_label_pc_156cc

dec_label_pc_156cc:                               ; preds = %dec_label_pc_156d4.preheader, %dec_label_pc_156cc
  %v5_156dc18 = phi i32 [ %v5_156dc17, %dec_label_pc_156d4.preheader ], [ %v5_156dc, %dec_label_pc_156cc ]
  %v2_156d0 = add i32 %v5_156dc18, -136
  %v3_156d0 = inttoptr i32 %v2_156d0 to i32*
  store i32 0, i32* %v3_156d0, align 4
  %v0_156d4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_156d4 = add i32 %v0_156d4.pre, -1
  store i32 %v1_156d4, i32* %r1.global-to-local, align 4
  %v6_156d4 = icmp slt i32 %v1_156d4, 0
  %v4_156dc = mul i32 %v1_156d4, 4
  %v5_156dc = add i32 %v4_156dc, %v16_156b4
  br i1 %v6_156d4, label %dec_label_pc_156e4, label %dec_label_pc_156cc

dec_label_pc_156e4:                               ; preds = %dec_label_pc_156cc
  %v2_156e4 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_156e4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_156f4 = load i32, i32* @ip, align 4
  store i32 %v0_156f4, i32* %stack_var_-28, align 4
  %v0_156fc = call i32 @function_14ce8()
  store i32 %v0_156fc, i32* %r0.global-to-local, align 4
  %v1_15700 = load i32, i32* @r5, align 4
  %v5_15704 = icmp slt i32 %v0_156fc, %v1_15700
  br i1 %v5_15704, label %dec_label_pc_15848, label %dec_label_pc_15708

dec_label_pc_15708:                               ; preds = %dec_label_pc_156e4
  %v2_15708 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_15708, i32* @r4, align 4
  store i32 %v1_15700, i32* %r0.global-to-local, align 4
  store i32 %v2_156e4, i32* %r1.global-to-local, align 4
  %v3_15718 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_15718 = call i32 @function_14500(i32 %v1_15700, %_TYPEDEF_sigset_t* %v3_15718, i32 %v2_15708)
  store i32 %v4_15718, i32* %r0.global-to-local, align 4
  %v1_1571c = load i32, i32* @r5, align 4
  %v9_1571c = icmp eq i32 %v4_15718, %v1_1571c
  br i1 %v9_1571c, label %dec_label_pc_15724, label %dec_label_pc_15848

dec_label_pc_15724:                               ; preds = %dec_label_pc_15708
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_15708, i32* %r0.global-to-local, align 4
  %v2_1572c = call i32 @function_14cc4(i32 %v2_15708, i32 17)
  store i32 %v2_1572c, i32* %r0.global-to-local, align 4
  %v1_15730 = load i32, i32* @r5, align 4
  %v9_15730 = icmp eq i32 %v2_1572c, %v1_15730
  br i1 %v9_15730, label %dec_label_pc_15748.preheader, label %dec_label_pc_15724.dec_label_pc_15810_crit_edge

dec_label_pc_15724.dec_label_pc_15810_crit_edge:  ; preds = %dec_label_pc_15724
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_15810

dec_label_pc_15748.preheader:                     ; preds = %dec_label_pc_15724
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15740

dec_label_pc_15740:                               ; preds = %dec_label_pc_15748.preheader, %dec_label_pc_15740
  %v5_1575016 = phi i32 [ %v5_156dc17, %dec_label_pc_15748.preheader ], [ %v5_15750, %dec_label_pc_15740 ]
  %v2_15744 = add i32 %v5_1575016, -136
  %v3_15744 = inttoptr i32 %v2_15744 to i32*
  store i32 0, i32* %v3_15744, align 4
  %v0_15748.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_15748 = add i32 %v0_15748.pre, -1
  store i32 %v1_15748, i32* %r1.global-to-local, align 4
  %v6_15748 = icmp slt i32 %v1_15748, 0
  %v4_15750 = mul i32 %v1_15748, 4
  %v5_15750 = add i32 %v4_15750, %v16_156b4
  br i1 %v6_15748, label %dec_label_pc_15758, label %dec_label_pc_15740

dec_label_pc_15758:                               ; preds = %dec_label_pc_15740
  store i32 %v2_156e4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_15760 = call i32 @function_14ce8()
  store i32 %v0_15760, i32* %r0.global-to-local, align 4
  %v1_15764 = icmp slt i32 %v0_15760, 0
  br i1 %v1_15764, label %dec_label_pc_15848, label %dec_label_pc_1576c

dec_label_pc_1576c:                               ; preds = %dec_label_pc_15758
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_15778 = call i32 @function_15bb0(i32 17, i32* null, i32 %v2_156bc)
  store i32 %v4_15778, i32* %r0.global-to-local, align 4
  %v1_1577c = icmp slt i32 %v4_15778, 0
  br i1 %v1_1577c, label %dec_label_pc_15784, label %dec_label_pc_157ac

dec_label_pc_15784:                               ; preds = %dec_label_pc_1576c
  %v0_15784 = call i32 @function_14858()
  store i32 %v2_15708, i32* %r1.global-to-local, align 4
  store i32 %v0_15784, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_15798 = inttoptr i32 %v0_15784 to i32*
  %v2_15798 = load i32, i32* %v1_15798, align 4
  store i32 %v2_15798, i32* @r4, align 4
  %v3_1579c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1579c = call i32 @function_14500(i32 2, %_TYPEDEF_sigset_t* %v3_1579c, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_157a4 = load i32, i32* @r4, align 4
  %v1_157a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_157a4 = inttoptr i32 %v1_157a4 to i32*
  store i32 %v0_157a4, i32* %v2_157a4, align 4
  %v17_15850.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1584c

dec_label_pc_157ac:                               ; preds = %dec_label_pc_1576c
  %v2_157ac = load i32, i32* %stack_var_-424, align 4
  %v7_157b0 = icmp eq i32 %v2_157ac, 1
  %v2_157b8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_157b8, i32* @r4, align 4
  br i1 %v7_157b0, label %dec_label_pc_157c0, label %dec_label_pc_157f4

dec_label_pc_157c0:                               ; preds = %dec_label_pc_157ac
  store i32 %v2_157b8, i32* %r1.global-to-local, align 4
  store i32 %v2_157b8, i32* %r0.global-to-local, align 4
  %v2_157c8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_157c8 = call i32 @function_1604c(%timespec* %v2_157c8, i32 %v2_157b8)
  store i32 %v3_157c8, i32* %r0.global-to-local, align 4
  store i32 %v3_157c8, i32* %r6.global-to-local, align 4
  %v0_157d0 = call i32 @function_14858()
  store i32 %v2_15708, i32* %r1.global-to-local, align 4
  store i32 %v0_157d0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_157e4 = inttoptr i32 %v0_157d0 to i32*
  %v2_157e4 = load i32, i32* %v1_157e4, align 4
  store i32 %v2_157e4, i32* @r4, align 4
  %v3_157e8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_157e8 = call i32 @function_14500(i32 2, %_TYPEDEF_sigset_t* %v3_157e8, i32 0)
  store i32 %v4_157e8, i32* %r0.global-to-local, align 4
  %v0_157ec = load i32, i32* @r4, align 4
  %v1_157ec = load i32, i32* %r5.global-to-local, align 4
  %v2_157ec = inttoptr i32 %v1_157ec to i32*
  store i32 %v0_157ec, i32* %v2_157ec, align 4
  %v0_1581c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1581c

dec_label_pc_157f4:                               ; preds = %dec_label_pc_157ac
  store i32 %v2_15708, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_15800 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_15800 = call i32 @function_14500(i32 2, %_TYPEDEF_sigset_t* %v3_15800, i32 0)
  store i32 %v4_15800, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %dec_label_pc_15724.dec_label_pc_15810_crit_edge, %dec_label_pc_157f4
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_15724.dec_label_pc_15810_crit_edge ], [ %v2_157b8, %dec_label_pc_157f4 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_15814 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_15814 = call i32 @function_1604c(%timespec* %v2_15814, i32 %storemerge.pre-phi)
  store i32 %v3_15814, i32* %r0.global-to-local, align 4
  store i32 %v3_15814, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1581c

dec_label_pc_1581c:                               ; preds = %dec_label_pc_157c0, %dec_label_pc_15810
  %v0_1581c = phi i32 [ %v0_1581c.pr, %dec_label_pc_157c0 ], [ %v3_15814, %dec_label_pc_15810 ]
  %v2_1581c = icmp eq i32 %v0_1581c, 0
  br i1 %v2_1581c, label %dec_label_pc_15840, label %dec_label_pc_15824

dec_label_pc_15824:                               ; preds = %dec_label_pc_1581c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_1582c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_1582c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1584c

dec_label_pc_15840:                               ; preds = %dec_label_pc_156b4, %dec_label_pc_1581c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1584c

dec_label_pc_15848:                               ; preds = %dec_label_pc_15708, %dec_label_pc_15758, %dec_label_pc_156e4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1584c

dec_label_pc_1584c:                               ; preds = %dec_label_pc_15824, %dec_label_pc_15840, %dec_label_pc_15784, %dec_label_pc_15848
  %v17_15850 = phi i32 [ %v3_1582c, %dec_label_pc_15824 ], [ 0, %dec_label_pc_15840 ], [ %v17_15850.pre, %dec_label_pc_15784 ], [ -1, %dec_label_pc_15848 ]
  %v2_15850 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15850, i32* @r4, align 4
  store i32 %v6_156b4, i32* @r5, align 4
  store i32 %v9_156b4, i32* @r6, align 4
  ret i32 %v17_15850

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_157b8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_15748, { 0, 2, 1 }
  uselistorder i32 %v2_15708, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_15700, { 1, 0, 2 }
  uselistorder i32 %v1_156d4, { 0, 2, 1 }
  uselistorder i32 %v16_156b4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 0, 8, 7, 10, 9, 21, 11, 13, 14, 12, 16, 15, 17, 22, 18, 2, 19, 20, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_15bb0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_14500, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_14ce8, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1584c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_15848, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15840, { 1, 0 }
  uselistorder label %dec_label_pc_1581c, { 1, 0 }
  uselistorder label %dec_label_pc_15810, { 1, 0 }
  uselistorder label %dec_label_pc_15740, { 1, 0 }
  uselistorder label %dec_label_pc_156cc, { 1, 0 }
}

define i32 @function_15858(i32 %arg1) local_unnamed_addr {
dec_label_pc_15884:
  %stack_var_-8 = alloca i32, align 4
  %v3_15858 = load i32, i32* @r4, align 4
  store i32 %v3_15858, i32* %stack_var_-8, align 4
  %v2_15888 = load i32, i32* @global_var_1f890.663, align 4
  %v2_1588c = icmp eq i32 %v2_15888, 0
  br i1 %v2_1588c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_15884
  call void @__pseudo_branch(i32 %v2_15888)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15884, %bb
  %v2_1589c = load i32, i32* @global_var_1f894.665, align 4
  %v2_158a0 = icmp eq i32 %v2_1589c, 0
  br i1 %v2_158a0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_158a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_158a4, i32* @r4, align 4
  %v9_158a4 = load i32, i32* @r0, align 4
  ret i32 %v9_158a4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_1589c)
  %v2_158b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_158b0, i32* @r4, align 4
  %v8_158b0 = load i32, i32* @r0, align 4
  ret i32 %v8_158b0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_158c4() local_unnamed_addr {
dec_label_pc_158c4:
  ret i32 0
}

define i32 @function_158cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_158cc:
  %v1_158cc = load i32, i32* @r0, align 4
  ret i32 %v1_158cc
}

define i32 @function_158d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_158d0:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_158d0 = load i32, i32* @r4, align 4
  store i32 %v3_158d0, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_158e0 = call i32 @function_14194(i32 %arg1, i32 1)
  %v7_158e4 = icmp eq i32 %v2_158e0, -1
  br i1 %v7_158e4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_158d0
  %v3_158e8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_158e8, i32* @r4, align 4
  ret i32 %v2_158e0

bb4:                                              ; preds = %dec_label_pc_158d0
  %v0_158ec = load i32, i32* @r4, align 4
  %v4_158f4 = call i32 @function_143b0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17348.668, i32 0, i32 0), i32 %v0_158ec)
  %v1_158f8 = load i32, i32* %r5.global-to-local, align 4
  %v9_158f8 = icmp eq i32 %v4_158f4, %v1_158f8
  br i1 %v9_158f8, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_158fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_158fc, i32* @r4, align 4
  ret i32 %v4_158f4

bb6:                                              ; preds = %bb4
  %v0_15900 = call i32 @function_1532c()
  %v0_15904 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15904, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_15900

; uselistorder directives
  uselistorder i32 %v2_158e0, { 1, 0 }
  uselistorder i1* @cpsr_z, { 8, 0, 1, 10, 9, 5, 6, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_1532c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_143b0, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_14194, { 0, 7, 15, 14, 17, 16, 11, 10, 13, 12, 9, 8, 4, 3, 6, 5, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_15908(i32 %arg1) local_unnamed_addr {
dec_label_pc_15908:
  %v2_1590c = load i32, i32* @global_var_1f898.670, align 4
  %v2_15910 = icmp eq i32 %v2_1590c, 0
  br i1 %v2_15910, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_15908
  %v6_1591c = load i32, i32* @r0, align 4
  ret i32 %v6_1591c

bb2:                                              ; preds = %dec_label_pc_15908
  store i32 1, i32* @global_var_1f898.670, align 4
  store i32 4096, i32* @global_var_1f88c.621, align 4
  ret i32 undef
}

define i32 @function_15964(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_15964:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_15968 = mul i32 %arg2, 4
  %v5_15968 = add i32 %tmp, %v4_15968
  %v2_1596c = load i32, i32* %arg3, align 4
  %v2_15970 = ptrtoint i32* %stack_var_-120 to i32
  %v1_15974 = add i32 %v5_15968, 4
  %v9_15978 = icmp eq i32 %v1_15974, %v2_1596c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1f884.675, align 4
  store i32 %v1_15974, i32* @global_var_1f888.677, align 4
  store i32 %arg6, i32* @global_var_1f894.665, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_15978, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_15964
  store i32 %v5_15968, i32* @global_var_1f888.677, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_15964, %bb
  %v2_159b8 = bitcast i32* %stack_var_-120 to i8*
  %v3_159b8 = call i32 @function_148c0(i8* %v2_159b8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1f888.677, align 4
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159c8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_159c8, %dec_label_pc_159c8 ]
  %v1_159c8 = inttoptr i32 %storemerge to i32*
  %v2_159c8 = load i32, i32* %v1_159c8, align 4
  %v4_159c8 = add i32 %storemerge, 4
  %v2_159cc = icmp eq i32 %v2_159c8, 0
  br i1 %v2_159cc, label %dec_label_pc_159d8, label %dec_label_pc_159c8

dec_label_pc_159d8:                               ; preds = %dec_label_pc_159c8
  store i32 %v4_159c8, i32* @r4, align 4
  %v1_159f822 = inttoptr i32 %v4_159c8 to i32*
  %v2_159f823 = load i32, i32* %v1_159f822, align 4
  %v2_159fc25 = icmp eq i32 %v2_159f823, 0
  br i1 %v2_159fc25, label %dec_label_pc_15a04, label %dec_label_pc_159e0

dec_label_pc_159e0:                               ; preds = %dec_label_pc_159d8, %dec_label_pc_159f8
  %v5_159e4 = phi i32 [ %v2_159f8, %dec_label_pc_159f8 ], [ %v2_159f823, %dec_label_pc_159d8 ]
  %v2_159e0 = icmp ugt i32 %v5_159e4, 13
  %v7_159e0 = icmp eq i32 %v5_159e4, 14
  %v2_159e4 = xor i1 %v2_159e0, true
  %v3_159e4 = or i1 %v7_159e0, %v2_159e4
  br i1 %v3_159e4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_159e0
  %v6_159e4 = and i32 %v5_159e4, 536870912
  %v7_159e4 = icmp ne i32 %v6_159e4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_159e0, %bb42
  %v1_159f0 = phi i1 [ %v2_159e0, %dec_label_pc_159e0 ], [ %v7_159e4, %bb42 ]
  %v2_159e8 = xor i1 %v1_159f0, true
  %v3_159e8 = or i1 %v7_159e0, %v2_159e8
  br i1 %v3_159e8, label %bb44, label %dec_label_pc_159f8

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_159f8

dec_label_pc_159f8:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_159e8, i32 ptrtoint (i32* @global_var_148a0.679 to i32))
  %v0_159f4 = load i32, i32* @r4, align 4
  %v1_159f4 = add i32 %v0_159f4, 8
  store i32 %v1_159f4, i32* @r4, align 4
  %v1_159f8 = inttoptr i32 %v1_159f4 to i32*
  %v2_159f8 = load i32, i32* %v1_159f8, align 4
  %v2_159fc = icmp eq i32 %v2_159f8, 0
  br i1 %v2_159fc, label %dec_label_pc_15a04, label %dec_label_pc_159e0

dec_label_pc_15a04:                               ; preds = %dec_label_pc_159f8, %dec_label_pc_159d8
  %v1_15a08 = call i32 @function_16a5c(i32 %v2_15970)
  store i32 %v1_15a08, i32* @r0, align 4
  %v1_15a0c = call i32 @function_15908(i32 %v1_15a08)
  store i32 %v1_15a0c, i32* @r0, align 4
  %v2_15a18 = icmp eq i32 %tmp37, 0
  br i1 %v2_15a18, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_15a04
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_15a04, %bb45
  %v0_15a28 = phi i32 [ %tmp37, %dec_label_pc_15a04 ], [ 4096, %bb45 ]
  %v3_15a20 = icmp eq i32 %tmp36, -1
  %v8_15a20 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1f88c.621 to i32), i32* @r2, align 4
  store i32 %v0_15a28, i32* @global_var_1f88c.621, align 4
  br i1 %v3_15a20, label %dec_label_pc_15a30, label %dec_label_pc_15a58

dec_label_pc_15a30:                               ; preds = %bb46
  %v0_15a30 = call i32 @function_15fbc()
  store i32 %v0_15a30, i32* @r0, align 4
  store i32 %v0_15a30, i32* @r4, align 4
  %v0_15a38 = call i32 @function_15f64()
  %v0_15a3c = load i32, i32* @r4, align 4
  %v9_15a3c = icmp eq i32 %v0_15a3c, %v0_15a38
  br i1 %v9_15a3c, label %dec_label_pc_15a44, label %dec_label_pc_15a80

dec_label_pc_15a44:                               ; preds = %dec_label_pc_15a30
  %v1_15a44 = call i32 @function_15f90(i32 %v0_15a38)
  store i32 %v1_15a44, i32* @r0, align 4
  store i32 %v1_15a44, i32* @r4, align 4
  %v0_15a4c = call i32 @function_15f38()
  %v0_15a50 = load i32, i32* @r4, align 4
  %v9_15a50 = icmp eq i32 %v0_15a50, %v0_15a4c
  br i1 %v9_15a50, label %dec_label_pc_15a58, label %dec_label_pc_15a80

dec_label_pc_15a58:                               ; preds = %dec_label_pc_15a44, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_15a20, label %dec_label_pc_15aec, label %dec_label_pc_15a64

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a58
  %v9_15a68 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_15a68, label %dec_label_pc_15a70, label %dec_label_pc_15a80

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a64
  br label %dec_label_pc_15a80

dec_label_pc_15a80:                               ; preds = %dec_label_pc_15a70, %dec_label_pc_15a64, %dec_label_pc_15a44, %dec_label_pc_15a30
  %v2_15a88 = call i32 @function_158d0(i32 0, i32 32768)
  %v2_15a94 = call i32 @function_158d0(i32 1, i32 32770)
  %v2_15aa0 = call i32 @function_158d0(i32 2, i32 32770)
  br label %dec_label_pc_15aec

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15a80, %dec_label_pc_15a58
  %v0_15ab0 = load i32, i32* %r6.global-to-local, align 4
  %v1_15ab0 = inttoptr i32 %v0_15ab0 to i32*
  %v2_15ab0 = load i32, i32* %v1_15ab0, align 4
  store i32 %v2_15ab0, i32* @global_var_1f7c4, align 4
  store i32 %arg5, i32* @global_var_1f890.663, align 4
  %v2_15aec = icmp eq i32 %arg4, 0
  br i1 %v2_15aec, label %dec_label_pc_15b28, label %bb47

bb47:                                             ; preds = %dec_label_pc_15aec
  br label %dec_label_pc_15b28

dec_label_pc_15b28:                               ; preds = %dec_label_pc_15aec, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_15b38 = call i32 @function_14858()
  %v2_15b40 = inttoptr i32 %v1_15b38 to i32*
  store i32 0, i32* %v2_15b40, align 4
  %v0_15b6c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_15b78 = call i32 @function_15620(i32 %v0_15b6c)
  ret i32 %v1_15b78

; uselistorder directives
  uselistorder i32 %v2_159f8, { 1, 0 }
  uselistorder i32 %v1_159f4, { 1, 0 }
  uselistorder i1 %v2_159e0, { 1, 0 }
  uselistorder i32 %v4_159c8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_15620, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_158d0, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1f88c.621, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 50, 9, 10, 11, 12, 13, 17, 18, 19, 78, 79, 80, 81, 70, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 20, 21, 98, 99, 100, 51, 69, 15, 16, 68, 14, 101, 33, 32, 57, 63, 58, 64, 55, 62, 56, 67, 102, 22, 103, 104, 23, 24, 25, 105, 71, 72, 26, 27, 106, 73, 74, 28, 29, 107, 75, 76, 30, 31, 54, 108, 109, 65, 110, 34, 59, 35, 36, 52, 37, 53, 38, 39, 40, 111, 112, 113, 114, 60, 115, 116, 117, 118, 119, 120, 121, 122, 45, 123, 46, 47, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 138, 139, 140, 141, 142, 143, 43, 144, 49, 145, 61, 66, 48, 146, 41, 42, 77, 147 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_15b28, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_159f8, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_159e0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_15bb0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15bb0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_15bb0 = load i32, i32* @r4, align 4
  %v6_15bb0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_15bb4 = icmp eq i32* %arg2, null
  %v2_15bb8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_15bb4, label %dec_label_pc_15c24, label %dec_label_pc_15bc8

dec_label_pc_15bc8:                               ; preds = %dec_label_pc_15bb0
  %v2_15bcc = load i32, i32* %arg2, align 4
  %v4_15bcc = add i32 %tmp, 4
  store i32 %v4_15bcc, i32* @r1, align 4
  %v2_15bd0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_15bd0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_15bcc, i32* %stack_var_-156, align 4
  %v3_15bdc = call i32 @function_148a0(i32 %v2_15bd0, i32 %v4_15bcc, i32 128)
  store i32 %v3_15bdc, i32* %r0.global-to-local, align 4
  %v0_15be0 = load i32, i32* @r4, align 4
  %v1_15be0 = add i32 %v0_15be0, 132
  %v2_15be0 = inttoptr i32 %v1_15be0 to i32*
  %v3_15be0 = load i32, i32* %v2_15be0, align 4
  %v1_15be4 = and i32 %v3_15be0, 67108864
  %v2_15be4 = icmp eq i32 %v1_15be4, 0
  br i1 %v2_15be4, label %dec_label_pc_15bf8, label %bb

bb:                                               ; preds = %dec_label_pc_15bc8
  br label %dec_label_pc_15c14

dec_label_pc_15bf8:                               ; preds = %dec_label_pc_15bc8
  %v1_15c00 = and i32 %v3_15be0, 4
  %v2_15c00 = icmp eq i32 %v1_15c00, 0
  br i1 %v2_15c00, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_15bf8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_15bf8, %bb20
  br label %dec_label_pc_15c14

dec_label_pc_15c14:                               ; preds = %bb, %bb21
  %v2_15c14 = icmp eq i32 %v0_15be0, 0
  %v3_15c18 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_15c18 = select i1 %v2_15c14, i32 0, i32 %v3_15c18
  %v0_15c24.pre = load i32, i32* @r5, align 4
  %v0_15c34.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15c24

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15c14, %dec_label_pc_15bb0
  %v0_15c34 = phi i32 [ %arg1, %dec_label_pc_15bb0 ], [ %v0_15c34.pre, %dec_label_pc_15c14 ]
  %v0_15c24 = phi i32 [ %arg3, %dec_label_pc_15bb0 ], [ %v0_15c24.pre, %dec_label_pc_15c14 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_15bb0 ], [ %.v3_15c18, %dec_label_pc_15c14 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_15c24 = icmp eq i32 %v0_15c24, 0
  %.v2_15bb8 = select i1 %v2_15c24, i32 0, i32 %v2_15bb8
  store i32 %.v2_15bb8, i32* @r2, align 4
  store i32 %v0_15c34, i32* %r0.global-to-local, align 4
  %v1_15c38 = call i32 @function_15c9c(i32 %v0_15c34)
  store i32 %v1_15c38, i32* %r0.global-to-local, align 4
  %v0_15c3c = load i32, i32* @r5, align 4
  %v2_15c3c = icmp eq i32 %v0_15c3c, 0
  br i1 %v2_15c3c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_15c24
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_15c24, %bb25
  %v0_15c4c.pr = phi i32 [ 0, %dec_label_pc_15c24 ], [ 1, %bb25 ]
  %v1_15c44 = icmp slt i32 %v1_15c38, 0
  br i1 %v1_15c44, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_15c80

thread-pre-split:                                 ; preds = %bb26
  %v2_15c4c = icmp eq i32 %v0_15c4c.pr, 0
  store i32 %v1_15c38, i32* @r4, align 4
  br i1 %v2_15c4c, label %dec_label_pc_15c80, label %dec_label_pc_15c58

dec_label_pc_15c58:                               ; preds = %thread-pre-split
  %v2_15c58 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_15c3c, i32* %r0.global-to-local, align 4
  %v2_15c60 = inttoptr i32 %v0_15c3c to i32*
  store i32 %v2_15c58, i32* %v2_15c60, align 4
  %v3_15c60 = load i32, i32* %r0.global-to-local, align 4
  %v4_15c60 = add i32 %v3_15c60, 4
  store i32 %v4_15c60, i32* @r0, align 4
  %v2_15c64 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_15c64, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_15c6c = call i32 @function_148a0(i32 %v4_15c60, i32 %v2_15c64, i32 128)
  store i32 %v3_15c6c, i32* %r0.global-to-local, align 4
  %v1_15c74 = load i32, i32* @r5, align 4
  %v2_15c74 = add i32 %v1_15c74, 136
  %v3_15c74 = inttoptr i32 %v2_15c74 to i32*
  %v1_15c7c = load i32, i32* @r5, align 4
  %v2_15c7c = add i32 %v1_15c7c, 132
  %v3_15c7c = inttoptr i32 %v2_15c7c to i32*
  %v0_15c80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15c80

dec_label_pc_15c80:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_15c58
  %v0_15c80 = phi i32 [ %v1_15c38, %thread-pre-split ], [ %v0_15c80.pre, %dec_label_pc_15c58 ], [ %v1_15c38, %thread-pre-split.thread ]
  store i32 %v0_15c80, i32* %r0.global-to-local, align 4
  store i32 %v3_15bb0, i32* @r4, align 4
  store i32 %v6_15bb0, i32* @r5, align 4
  ret i32 %v0_15c80

; uselistorder directives
  uselistorder i32 %v0_15c80, { 1, 0 }
  uselistorder i32 %v0_15c3c, { 1, 0, 2 }
  uselistorder i32 %v0_15c34, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_15c80, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_15c14, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_15c9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15c9c = load i32, i32* @r4, align 4
  store i32 %v3_15c9c, i32* %stack_var_-8, align 4
  %v1_15ca0 = load i32, i32* @r1, align 4
  %v2_15ca0 = inttoptr i32 %v1_15ca0 to %sigaction*
  %v3_15ca0 = load i32, i32* @r2, align 4
  %v4_15ca0 = inttoptr i32 %v3_15ca0 to %sigaction*
  %v5_15ca0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_15ca0, %sigaction* %v4_15ca0)
  store i32 %v5_15ca0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_15ca0, -4095
  br i1 %tmp, label %dec_label_pc_15cc0, label %dec_label_pc_15cb0

dec_label_pc_15cb0:                               ; preds = %dec_label_pc_15c9c
  %v0_15cb0 = call i32 @function_14858()
  %v0_15cb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15cb4 = sub i32 0, %v0_15cb4
  %v2_15cb8 = inttoptr i32 %v0_15cb0 to i32*
  store i32 %v1_15cb4, i32* %v2_15cb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15cc0

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15c9c, %dec_label_pc_15cb0
  %v0_15cc0 = phi i32 [ %v5_15ca0, %dec_label_pc_15c9c ], [ -1, %dec_label_pc_15cb0 ]
  %v2_15cc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15cc4, i32* %r4.global-to-local, align 4
  ret i32 %v0_15cc0

; uselistorder directives
  uselistorder i32 %v5_15ca0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15cc0, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_15cc8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_15cc8:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_15cf0() local_unnamed_addr {
dec_label_pc_15cf0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_15d00 = load i32, i32* @r0, align 4
  %v4_15d00 = call i32 @fstat(i32 %v0_15d00, %stat* %tmp4)
  store i32 %v4_15d00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_15d00, -4095
  br i1 %tmp, label %dec_label_pc_15d24, label %dec_label_pc_15d10

dec_label_pc_15d10:                               ; preds = %dec_label_pc_15cf0
  %v0_15d10 = call i32 @function_14858()
  %v0_15d14 = load i32, i32* %r4.global-to-local, align 4
  %v1_15d14 = sub i32 0, %v0_15d14
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15d1c = inttoptr i32 %v0_15d10 to i32*
  store i32 %v1_15d14, i32* %v2_15d1c, align 4
  br label %dec_label_pc_15d34

dec_label_pc_15d24:                               ; preds = %dec_label_pc_15cf0
  %v2_15d24 = icmp eq i32 %v4_15d00, 0
  store i32 89396, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15d24, i32 ptrtoint (i32* @global_var_1640c.695 to i32))
  br label %dec_label_pc_15d34

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d10, %dec_label_pc_15d24
  %v0_15d34 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_15d34

; uselistorder directives
  uselistorder i32 %v4_15d00, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 8, 16, 14, 15, 9, 10, 0, 5, 6, 7, 3, 4, 1, 2, 11, 12, 13 }
  uselistorder label %dec_label_pc_15d34, { 1, 0 }
}

define i32 @function_15d40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15d40:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_15d40 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15d48 = call i32 @function_15dd4()
  store i32 %v0_15d48, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_15d48, 1
  br i1 %tmp8, label %dec_label_pc_15dcc, label %dec_label_pc_15db8.preheader

dec_label_pc_15db8.preheader:                     ; preds = %dec_label_pc_15d40
  %v5_15d50 = load i32, i32* @r4, align 4
  %v7_15d50 = add i32 %v5_15d50, %v0_15d48
  store i32 %v7_15d50, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15db8

dec_label_pc_15d5c:                               ; preds = %dec_label_pc_15db8
  %v1_15d5c = add i32 %v2_15d6c, 16
  %v2_15d5c = inttoptr i32 %v1_15d5c to i32*
  %v3_15d5c = load i32, i32* %v2_15d5c, align 4
  store i32 %v3_15d5c, i32* @lr, align 4
  %v2_15d60 = inttoptr i32 %v1_15dbc to i32*
  %v3_15d60 = load i32, i32* %v2_15d60, align 4
  store i32 %v3_15d60, i32* %r2.global-to-local, align 4
  %v1_15d64 = add i32 %v2_15d6c, 18
  %v2_15d64 = inttoptr i32 %v1_15d64 to i8*
  %v3_15d64 = load i8, i8* %v2_15d64, align 1
  %v4_15d64 = zext i8 %v3_15d64 to i32
  store i32 %v4_15d64, i32* %ip.global-to-local, align 4
  %v3_15d68 = sdiv i32 %v3_15d5c, 256
  store i32 %v3_15d68, i32* %r3.global-to-local, align 4
  %v1_15d6c = trunc i32 %v3_15d5c to i8
  %v4_15d6c = inttoptr i32 %v1_15dbc to i8*
  store i8 %v1_15d6c, i8* %v4_15d6c, align 1
  %v0_15d70 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d70 = load i32, i32* @r4, align 4
  %v2_15d70 = add i32 %v1_15d70, 4
  %v3_15d70 = inttoptr i32 %v2_15d70 to i32*
  store i32 %v0_15d70, i32* %v3_15d70, align 4
  %v0_15d74 = load i32, i32* %ip.global-to-local, align 4
  %v1_15d74 = trunc i32 %v0_15d74 to i8
  %v2_15d74 = load i32, i32* @r4, align 4
  %v3_15d74 = add i32 %v2_15d74, 10
  %v4_15d74 = inttoptr i32 %v3_15d74 to i8*
  store i8 %v1_15d74, i8* %v4_15d74, align 1
  %v0_15d78 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d78 = trunc i32 %v0_15d78 to i8
  %v2_15d78 = load i32, i32* @r4, align 4
  %v3_15d78 = add i32 %v2_15d78, 9
  %v4_15d78 = inttoptr i32 %v3_15d78 to i8*
  store i8 %v1_15d78, i8* %v4_15d78, align 1
  %v0_15d7c = load i32, i32* @r4, align 4
  %v1_15d7c = add i32 %v0_15d7c, 8
  %v2_15d7c = inttoptr i32 %v1_15d7c to i8*
  %v3_15d7c = load i8, i8* %v2_15d7c, align 1
  %v4_15d7c = zext i8 %v3_15d7c to i32
  store i32 %v4_15d7c, i32* %r2.global-to-local, align 4
  %v0_15d80 = load i32, i32* @r5, align 4
  %v1_15d80 = add i32 %v0_15d80, 1
  %v2_15d80 = inttoptr i32 %v1_15d80 to i8*
  %v3_15d80 = load i8, i8* %v2_15d80, align 1
  %v4_15d80 = zext i8 %v3_15d80 to i32
  store i32 %v4_15d80, i32* %r3.global-to-local, align 4
  %v4_15d84 = mul nuw nsw i32 %v4_15d80, 256
  %v5_15d84 = or i32 %v4_15d84, %v4_15d7c
  %v1_15d88 = add nsw i32 %v5_15d84, -19
  store i32 %v1_15d88, i32* @r2, align 4
  %v3_15d8c = call i32 @function_148b0(i32 %v1_15dc4, i32 %v1_15dc0, i32 %v1_15d88)
  %v0_15d90 = load i32, i32* @r4, align 4
  %v1_15d90 = add i32 %v0_15d90, 8
  %v2_15d90 = inttoptr i32 %v1_15d90 to i8*
  %v3_15d90 = load i8, i8* %v2_15d90, align 1
  %v4_15d90 = zext i8 %v3_15d90 to i32
  store i32 %v4_15d90, i32* %r3.global-to-local, align 4
  %v0_15d94 = load i32, i32* @r5, align 4
  %v1_15d94 = add i32 %v0_15d94, 1
  %v2_15d94 = inttoptr i32 %v1_15d94 to i8*
  %v3_15d94 = load i8, i8* %v2_15d94, align 1
  %v4_15d94 = zext i8 %v3_15d94 to i32
  store i32 %v0_15d90, i32* @r0, align 4
  %v4_15d9c = mul nuw nsw i32 %v4_15d94, 256
  %v5_15d9c = or i32 %v4_15d9c, %v4_15d90
  store i32 %v5_15d9c, i32* @r2, align 4
  store i32 %v0_15d90, i32* @r1, align 4
  %v3_15da4 = call i32 @function_148b0(i32 %v0_15d90, i32 %v0_15d90, i32 %v5_15d9c)
  %v0_15da8 = load i32, i32* @r4, align 4
  %v1_15da8 = add i32 %v0_15da8, 8
  %v2_15da8 = inttoptr i32 %v1_15da8 to i8*
  %v3_15da8 = load i8, i8* %v2_15da8, align 1
  %v4_15da8 = zext i8 %v3_15da8 to i32
  store i32 %v4_15da8, i32* %r3.global-to-local, align 4
  %v0_15dac = load i32, i32* @r5, align 4
  %v1_15dac = add i32 %v0_15dac, 1
  %v2_15dac = inttoptr i32 %v1_15dac to i8*
  %v3_15dac = load i8, i8* %v2_15dac, align 1
  %v4_15dac = zext i8 %v3_15dac to i32
  store i32 %v4_15dac, i32* @r2, align 4
  %v4_15db0 = mul nuw nsw i32 %v4_15dac, 256
  %v5_15db0 = or i32 %v4_15db0, %v4_15da8
  store i32 %v5_15db0, i32* %r3.global-to-local, align 4
  %v2_15db4 = add i32 %v5_15db0, %v0_15da8
  store i32 %v2_15db4, i32* @r4, align 4
  %v1_15db8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15db8

dec_label_pc_15db8:                               ; preds = %dec_label_pc_15db8.preheader, %dec_label_pc_15d5c
  %v1_15db8 = phi i32 [ %v7_15d50, %dec_label_pc_15db8.preheader ], [ %v1_15db8.pre, %dec_label_pc_15d5c ]
  %v2_15d6c = phi i32 [ %v5_15d50, %dec_label_pc_15db8.preheader ], [ %v2_15db4, %dec_label_pc_15d5c ]
  %v3_15db8 = icmp ult i32 %v2_15d6c, %v1_15db8
  %v1_15dbc = add i32 %v2_15d6c, 8
  store i32 %v1_15dbc, i32* @r5, align 4
  %v1_15dc0 = add i32 %v2_15d6c, 19
  store i32 %v1_15dc0, i32* @r1, align 4
  %v1_15dc4 = add i32 %v2_15d6c, 11
  store i32 %v1_15dc4, i32* @r0, align 4
  br i1 %v3_15db8, label %dec_label_pc_15d5c, label %dec_label_pc_15dcc.loopexit

dec_label_pc_15dcc.loopexit:                      ; preds = %dec_label_pc_15db8
  %v0_15dcc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15dcc

dec_label_pc_15dcc:                               ; preds = %dec_label_pc_15d40, %dec_label_pc_15dcc.loopexit
  %v0_15dcc = phi i32 [ %v0_15dcc.pre, %dec_label_pc_15dcc.loopexit ], [ %v0_15d48, %dec_label_pc_15d40 ]
  store i32 %v6_15d40, i32* @r5, align 4
  ret i32 %v0_15dcc

; uselistorder directives
  uselistorder i32 %v1_15dc4, { 1, 0 }
  uselistorder i32 %v1_15dc0, { 1, 0 }
  uselistorder i32 %v1_15dbc, { 2, 1, 0 }
  uselistorder i32 %v2_15d6c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_15d90, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_15d5c, { 1, 0, 2 }
  uselistorder i32 %v5_15d50, { 1, 0 }
  uselistorder i32 %v0_15d48, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_148b0, { 6, 5, 7, 8, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_15dcc, { 1, 0 }
  uselistorder label %dec_label_pc_15db8, { 1, 0 }
}

define i32 @function_15dd4() local_unnamed_addr {
dec_label_pc_15dd4:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_15dd8 = load i32, i32* @r4, align 4
  %v9_15dd8 = load i32, i32* @r6, align 4
  %v0_15ddc = load i32, i32* @r2, align 4
  %v1_15ddc = add i32 %v0_15ddc, 6
  %v2_15de4 = ptrtoint i32* %stack_var_-60 to i32
  %v1_15de8 = and i32 %v1_15ddc, -4
  store i32 %v1_15de8, i32* %r3.global-to-local, align 4
  %v2_15dec = sub i32 %v2_15de4, %v1_15de8
  %v0_15df0 = load i32, i32* @r1, align 4
  store i32 %v0_15df0, i32* %r8.global-to-local, align 4
  store i32 %v0_15ddc, i32* %stack_var_-60, align 4
  store i32 %v2_15dec, i32* %sl.global-to-local, align 4
  %v0_15dfc = load i32, i32* @r0, align 4
  %v1_15e00 = inttoptr i32 %v2_15dec to %linux_dirent64*
  store i32 %v2_15dec, i32* %r1.global-to-local, align 4
  %v5_15e04 = call i32 @getdents64(i32 %v0_15dfc, %linux_dirent64* %v1_15e00, i32 %v0_15ddc)
  store i32 %v5_15e04, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_15e04, -4095
  br i1 %tmp, label %dec_label_pc_15e28, label %dec_label_pc_15e14

dec_label_pc_15e14:                               ; preds = %dec_label_pc_15dd4
  %v0_15e14 = call i32 @function_14858()
  %v0_15e18 = load i32, i32* @r6, align 4
  %v1_15e18 = sub i32 0, %v0_15e18
  store i32 %v1_15e18, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_15e20 = inttoptr i32 %v0_15e14 to i32*
  store i32 %v1_15e18, i32* %v2_15e20, align 4
  %v0_15e30.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15e30

dec_label_pc_15e28:                               ; preds = %dec_label_pc_15dd4
  br i1 false, label %dec_label_pc_15e30, label %dec_label_pc_15e38

dec_label_pc_15e30:                               ; preds = %dec_label_pc_15e28, %dec_label_pc_15e14
  %v0_15e30 = phi i32 [ -1, %dec_label_pc_15e28 ], [ %v0_15e30.pre, %dec_label_pc_15e14 ]
  store i32 %v0_15e30, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f2c

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15e28
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15e40 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15e40, i32* @r5, align 4
  %v0_15e44 = load i32, i32* @sp, align 4
  store i32 %v0_15e44, i32* @r4, align 4
  br label %dec_label_pc_15f08

dec_label_pc_15e54:                               ; preds = %dec_label_pc_15f08
  %v2_15f20 = add i32 %v3_15f0c, %v0_15f20
  %v1_15e54 = add i32 %v0_15e58, 17
  %v2_15e54 = inttoptr i32 %v1_15e54 to i8*
  %v3_15e54 = load i8, i8* %v2_15e54, align 1
  %v4_15e54 = zext i8 %v3_15e54 to i32
  %v2_15e58 = inttoptr i32 %v1_15f14 to i8*
  %v3_15e58 = load i8, i8* %v2_15e58, align 1
  %v4_15e58 = zext i8 %v3_15e58 to i32
  %v4_15e5c = mul nuw nsw i32 %v4_15e54, 256
  %v5_15e5c = or i32 %v4_15e58, %v4_15e5c
  %v1_15e60 = add nuw nsw i32 %v5_15e5c, 3
  %v1_15e64 = and i32 %v1_15e60, 131068
  store i32 %v1_15e64, i32* %r3.global-to-local, align 4
  %v2_15e68 = add i32 %v1_15e64, %v2_15ea8
  store i32 %v2_15e68, i32* %sb.global-to-local, align 4
  %v9_15e6c = icmp eq i32 %v2_15e68, %v2_15f20
  %v1_15e70 = and i32 %v1_15e60, 128
  %v2_15e74 = icmp eq i32 %v1_15e70, 0
  %v3_15e74 = or i1 %v9_15e6c, %v2_15e74
  br i1 %v3_15e74, label %dec_label_pc_15ea8, label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e54
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15e88 = call i32 @function_15fe8(i32 %v0_15dfc, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_15e8c = load i32, i32* @r5, align 4
  %v1_15e8c = load i32, i32* %r8.global-to-local, align 4
  %v9_15e8c = icmp eq i32 %v0_15e8c, %v1_15e8c
  br i1 %v9_15e8c, label %dec_label_pc_15e94, label %dec_label_pc_15f28

dec_label_pc_15e94:                               ; preds = %dec_label_pc_15e78
  %v0_15e94 = call i32 @function_14858()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15ea0 = inttoptr i32 %v0_15e94 to i32*
  store i32 22, i32* %v2_15ea0, align 4
  %v0_15f2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f2c

dec_label_pc_15ea8:                               ; preds = %dec_label_pc_15e54
  %v3_15e7011 = udiv i32 %v1_15e60, 256
  %v1_15ea8 = trunc i32 %v3_15e7011 to i8
  %v3_15ea8 = add i32 %v2_15ea8, 17
  %v4_15ea8 = inttoptr i32 %v3_15ea8 to i8*
  store i8 %v1_15ea8, i8* %v4_15ea8, align 1
  %v0_15eac = load i32, i32* %r3.global-to-local, align 4
  %v1_15eac = trunc i32 %v0_15eac to i8
  %v2_15eac = load i32, i32* @r5, align 4
  %v3_15eac = add i32 %v2_15eac, 16
  %v4_15eac = inttoptr i32 %v3_15eac to i8*
  store i8 %v1_15eac, i8* %v4_15eac, align 1
  %v0_15eb0 = load i32, i32* @r4, align 4
  %v1_15eb0 = add i32 %v0_15eb0, 8
  %v1_15eb4 = inttoptr i32 %v1_15eb0 to i32*
  %v2_15eb4 = load i32, i32* %v1_15eb4, align 4
  %v3_15eb4 = add i32 %v0_15eb0, 12
  %v4_15eb4 = inttoptr i32 %v3_15eb4 to i32*
  %v5_15eb4 = load i32, i32* %v4_15eb4, align 4
  store i32 %v5_15eb4, i32* %r3.global-to-local, align 4
  %v1_15ec0 = inttoptr i32 %v0_15eb0 to i32*
  %v2_15ec0 = load i32, i32* %v1_15ec0, align 4
  %v3_15ec0 = add i32 %v0_15eb0, 4
  %v4_15ec0 = inttoptr i32 %v3_15ec0 to i32*
  %v5_15ec0 = load i32, i32* %v4_15ec0, align 4
  store i32 %v5_15ec0, i32* %r3.global-to-local, align 4
  %v0_15ec4 = load i32, i32* @r5, align 4
  %v1_15ec4 = inttoptr i32 %v0_15ec4 to i32*
  store i32 %v2_15ec0, i32* %v1_15ec4, align 4
  %v3_15ec4 = add i32 %v0_15ec4, 4
  %v4_15ec4 = inttoptr i32 %v3_15ec4 to i32*
  %v5_15ec4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15ec4, i32* %v4_15ec4, align 4
  %v0_15ec8 = load i32, i32* @r4, align 4
  %v1_15ec8 = add i32 %v0_15ec8, 8
  %v1_15ecc = inttoptr i32 %v1_15ec8 to i32*
  %v2_15ecc = load i32, i32* %v1_15ecc, align 4
  %v3_15ecc = add i32 %v0_15ec8, 12
  %v4_15ecc = inttoptr i32 %v3_15ecc to i32*
  %v5_15ecc = load i32, i32* %v4_15ecc, align 4
  store i32 %v5_15ecc, i32* %r3.global-to-local, align 4
  %v1_15ed0 = load i32, i32* @r5, align 4
  %v2_15ed0 = add i32 %v1_15ed0, 8
  %v3_15ed0 = inttoptr i32 %v2_15ed0 to i32*
  store i32 %v2_15ecc, i32* %v3_15ed0, align 4
  %v0_15ed4 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ed4 = load i32, i32* @r5, align 4
  %v2_15ed4 = add i32 %v1_15ed4, 12
  %v3_15ed4 = inttoptr i32 %v2_15ed4 to i32*
  store i32 %v0_15ed4, i32* %v3_15ed4, align 4
  %v0_15ed8 = load i32, i32* @r4, align 4
  %v1_15ed8 = add i32 %v0_15ed8, 18
  %v2_15ed8 = inttoptr i32 %v1_15ed8 to i8*
  %v3_15ed8 = load i8, i8* %v2_15ed8, align 1
  %v4_15ed8 = zext i8 %v3_15ed8 to i32
  store i32 %v4_15ed8, i32* %r3.global-to-local, align 4
  %v2_15edc = load i32, i32* @r5, align 4
  %v3_15edc = add i32 %v2_15edc, 18
  %v4_15edc = inttoptr i32 %v3_15edc to i8*
  store i8 %v3_15ed8, i8* %v4_15edc, align 1
  %v0_15ee0 = load i32, i32* @r4, align 4
  %v1_15ee0 = add i32 %v0_15ee0, 16
  %v2_15ee0 = inttoptr i32 %v1_15ee0 to i8*
  %v3_15ee0 = load i8, i8* %v2_15ee0, align 1
  %v4_15ee0 = zext i8 %v3_15ee0 to i32
  %v0_15ee4 = load i32, i32* %r7.global-to-local, align 4
  %v1_15ee4 = add i32 %v0_15ee4, 1
  %v2_15ee4 = inttoptr i32 %v1_15ee4 to i8*
  %v3_15ee4 = load i8, i8* %v2_15ee4, align 1
  %v4_15ee4 = zext i8 %v3_15ee4 to i32
  store i32 %v4_15ee4, i32* %r3.global-to-local, align 4
  %v4_15ee8 = mul nuw nsw i32 %v4_15ee4, 256
  %v5_15ee8 = or i32 %v4_15ee8, %v4_15ee0
  %v1_15eec = add nsw i32 %v5_15ee8, -19
  store i32 %v1_15eec, i32* @r2, align 4
  %v3_15ef0 = call i32 @function_148a0(i32 %v1_15f18, i32 %v1_15f1c, i32 %v1_15eec)
  %v0_15ef4 = load i32, i32* @r4, align 4
  %v1_15ef4 = add i32 %v0_15ef4, 16
  %v2_15ef4 = inttoptr i32 %v1_15ef4 to i8*
  %v3_15ef4 = load i8, i8* %v2_15ef4, align 1
  %v4_15ef4 = zext i8 %v3_15ef4 to i32
  store i32 %v4_15ef4, i32* %r3.global-to-local, align 4
  %v0_15ef8 = load i32, i32* %r7.global-to-local, align 4
  %v1_15ef8 = add i32 %v0_15ef8, 1
  %v2_15ef8 = inttoptr i32 %v1_15ef8 to i8*
  %v3_15ef8 = load i8, i8* %v2_15ef8, align 1
  %v4_15ef8 = zext i8 %v3_15ef8 to i32
  %v4_15efc = mul nuw nsw i32 %v4_15ef8, 256
  %v5_15efc = or i32 %v4_15efc, %v4_15ef4
  store i32 %v5_15efc, i32* %r3.global-to-local, align 4
  %v2_15f00 = add i32 %v5_15efc, %v0_15ef4
  store i32 %v2_15f00, i32* @r4, align 4
  %v0_15f04 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15f04, i32* @r5, align 4
  %v1_15f08.pre = load i32, i32* @r6, align 4
  %v0_15f20.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15f08

dec_label_pc_15f08:                               ; preds = %dec_label_pc_15e38, %dec_label_pc_15ea8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15e38 ], [ %v2_15eb4, %dec_label_pc_15ea8 ]
  %v0_15f20 = phi i32 [ %v0_15e40, %dec_label_pc_15e38 ], [ %v0_15f20.pre, %dec_label_pc_15ea8 ]
  %v2_15ea8 = phi i32 [ %v0_15e40, %dec_label_pc_15e38 ], [ %v0_15f04, %dec_label_pc_15ea8 ]
  %v0_15e58 = phi i32 [ %v0_15e44, %dec_label_pc_15e38 ], [ %v2_15f00, %dec_label_pc_15ea8 ]
  %v1_15f08 = phi i32 [ %v5_15e04, %dec_label_pc_15e38 ], [ %v1_15f08.pre, %dec_label_pc_15ea8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15e38 ], [ %v5_15eb4, %dec_label_pc_15ea8 ]
  %v0_15f08 = load i32, i32* %sl.global-to-local, align 4
  %v2_15f08 = add i32 %v0_15f08, %v1_15f08
  store i32 %v2_15f08, i32* %r3.global-to-local, align 4
  %v3_15f0c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_15f0c, i32* @r2, align 4
  %v3_15f10 = icmp ult i32 %v0_15e58, %v2_15f08
  %v1_15f14 = add i32 %v0_15e58, 16
  store i32 %v1_15f14, i32* %r7.global-to-local, align 4
  %v1_15f18 = add i32 %v2_15ea8, 19
  store i32 %v1_15f18, i32* @r0, align 4
  %v1_15f1c = add i32 %v0_15e58, 19
  store i32 %v1_15f1c, i32* @r1, align 4
  br i1 %v3_15f10, label %dec_label_pc_15e54, label %dec_label_pc_15f28

dec_label_pc_15f28:                               ; preds = %dec_label_pc_15f08, %dec_label_pc_15e78
  %v1_15f28 = phi i32 [ %v0_15e8c, %dec_label_pc_15e78 ], [ %v2_15ea8, %dec_label_pc_15f08 ]
  %v0_15f28 = phi i32 [ %v1_15e8c, %dec_label_pc_15e78 ], [ %v0_15f20, %dec_label_pc_15f08 ]
  %v2_15f28 = sub i32 %v1_15f28, %v0_15f28
  store i32 %v2_15f28, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f2c

dec_label_pc_15f2c:                               ; preds = %dec_label_pc_15e94, %dec_label_pc_15e30, %dec_label_pc_15f28
  %v0_15f2c = phi i32 [ %v0_15f2c.pre, %dec_label_pc_15e94 ], [ %v0_15e30, %dec_label_pc_15e30 ], [ %v2_15f28, %dec_label_pc_15f28 ]
  store i32 %v3_15dd8, i32* @r4, align 4
  store i32 %v9_15dd8, i32* %r6.global-to-local, align 4
  ret i32 %v0_15f2c

; uselistorder directives
  uselistorder i32 %v1_15f1c, { 1, 0 }
  uselistorder i32 %v1_15f18, { 1, 0 }
  uselistorder i32 %v1_15f14, { 1, 0 }
  uselistorder i32 %v3_15f0c, { 1, 0 }
  uselistorder i32 %v0_15e58, { 2, 1, 3, 0 }
  uselistorder i32 %v2_15ea8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_15eb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15e40, { 1, 0, 2 }
  uselistorder i32 %v5_15e04, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_148a0, { 5, 1, 0, 3, 8, 7, 4, 6, 2 }
  uselistorder i32 128, { 12, 13, 37, 14, 38, 26, 17, 18, 19, 27, 2, 28, 20, 21, 22, 23, 24, 31, 3, 29, 4, 30, 5, 15, 16, 32, 33, 34, 7, 0, 1, 8, 9, 10, 35, 6, 36, 25, 11 }
  uselistorder i32* @sp, { 6, 4, 1, 5, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 148, 149, 150, 396, 397, 370, 371, 372, 373, 374, 375, 376, 378, 377, 398, 399, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 79, 78, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 96, 97, 98, 99, 100, 4, 127, 2, 128, 129, 1, 130, 131, 345, 346, 347, 0, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135, 5, 136, 137, 138, 139, 140, 15, 141, 142, 143, 144, 145, 146, 147, 169, 170, 171, 172, 14, 173, 174, 175, 6, 176, 177, 178, 7, 179, 8, 180, 9, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 104, 107, 105, 106, 108, 109, 16, 110, 111, 112, 113, 394, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 10, 410, 411, 412, 413, 414, 415, 417, 11, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 12, 13, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464 }
  uselistorder label %dec_label_pc_15f2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15f08, { 1, 0 }
}

define i32 @function_15f38() local_unnamed_addr {
dec_label_pc_15f38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f38 = load i32, i32* @r4, align 4
  store i32 %v3_15f38, i32* %stack_var_-8, align 4
  %v0_15f40 = load i32, i32* @r0, align 4
  store i32 %v0_15f40, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15f40, -4095
  br i1 %tmp, label %dec_label_pc_15f5c, label %dec_label_pc_15f4c

dec_label_pc_15f4c:                               ; preds = %dec_label_pc_15f38
  %v0_15f4c = call i32 @function_14858()
  %v0_15f50 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f50 = sub i32 0, %v0_15f50
  %v2_15f54 = inttoptr i32 %v0_15f4c to i32*
  store i32 %v1_15f50, i32* %v2_15f54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f60.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f5c

dec_label_pc_15f5c:                               ; preds = %dec_label_pc_15f38, %dec_label_pc_15f4c
  %v2_15f60 = phi i32 [ %v3_15f38, %dec_label_pc_15f38 ], [ %v2_15f60.pre, %dec_label_pc_15f4c ]
  %v0_15f5c = phi i32 [ %v0_15f40, %dec_label_pc_15f38 ], [ -1, %dec_label_pc_15f4c ]
  store i32 %v2_15f60, i32* @r4, align 4
  ret i32 %v0_15f5c

; uselistorder directives
  uselistorder i32 %v0_15f40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f5c, { 1, 0 }
}

define i32 @function_15f64() local_unnamed_addr {
dec_label_pc_15f64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f64 = load i32, i32* @r4, align 4
  store i32 %v3_15f64, i32* %stack_var_-8, align 4
  %v0_15f6c = load i32, i32* @r0, align 4
  store i32 %v0_15f6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15f6c, -4095
  br i1 %tmp, label %dec_label_pc_15f88, label %dec_label_pc_15f78

dec_label_pc_15f78:                               ; preds = %dec_label_pc_15f64
  %v0_15f78 = call i32 @function_14858()
  %v0_15f7c = load i32, i32* %r4.global-to-local, align 4
  %v1_15f7c = sub i32 0, %v0_15f7c
  %v2_15f80 = inttoptr i32 %v0_15f78 to i32*
  store i32 %v1_15f7c, i32* %v2_15f80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15f8c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15f88

dec_label_pc_15f88:                               ; preds = %dec_label_pc_15f64, %dec_label_pc_15f78
  %v2_15f8c = phi i32 [ %v3_15f64, %dec_label_pc_15f64 ], [ %v2_15f8c.pre, %dec_label_pc_15f78 ]
  %v0_15f88 = phi i32 [ %v0_15f6c, %dec_label_pc_15f64 ], [ -1, %dec_label_pc_15f78 ]
  store i32 %v2_15f8c, i32* @r4, align 4
  ret i32 %v0_15f88

; uselistorder directives
  uselistorder i32 %v0_15f6c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15f88, { 1, 0 }
}

define i32 @function_15f90(i32 %arg1) local_unnamed_addr {
dec_label_pc_15f90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15f90 = load i32, i32* @r4, align 4
  store i32 %v3_15f90, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15fb4, label %dec_label_pc_15fa4

dec_label_pc_15fa4:                               ; preds = %dec_label_pc_15f90
  %v0_15fa4 = call i32 @function_14858()
  %v0_15fa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_15fa8 = sub i32 0, %v0_15fa8
  %v2_15fac = inttoptr i32 %v0_15fa4 to i32*
  store i32 %v1_15fa8, i32* %v2_15fac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15fb8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15fb4

dec_label_pc_15fb4:                               ; preds = %dec_label_pc_15f90, %dec_label_pc_15fa4
  %v2_15fb8 = phi i32 [ %v3_15f90, %dec_label_pc_15f90 ], [ %v2_15fb8.pre, %dec_label_pc_15fa4 ]
  %v0_15fb4 = phi i32 [ %arg1, %dec_label_pc_15f90 ], [ -1, %dec_label_pc_15fa4 ]
  store i32 %v2_15fb8, i32* %r4.global-to-local, align 4
  ret i32 %v0_15fb4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15fb4, { 1, 0 }
}

define i32 @function_15fbc() local_unnamed_addr {
dec_label_pc_15fbc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15fbc = load i32, i32* @r4, align 4
  store i32 %v3_15fbc, i32* %stack_var_-8, align 4
  %v0_15fc4 = load i32, i32* @r0, align 4
  store i32 %v0_15fc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15fc4, -4095
  br i1 %tmp, label %dec_label_pc_15fe0, label %dec_label_pc_15fd0

dec_label_pc_15fd0:                               ; preds = %dec_label_pc_15fbc
  %v0_15fd0 = call i32 @function_14858()
  %v0_15fd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15fd4 = sub i32 0, %v0_15fd4
  %v2_15fd8 = inttoptr i32 %v0_15fd0 to i32*
  store i32 %v1_15fd4, i32* %v2_15fd8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15fe4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15fe0

dec_label_pc_15fe0:                               ; preds = %dec_label_pc_15fbc, %dec_label_pc_15fd0
  %v2_15fe4 = phi i32 [ %v3_15fbc, %dec_label_pc_15fbc ], [ %v2_15fe4.pre, %dec_label_pc_15fd0 ]
  %v0_15fe0 = phi i32 [ %v0_15fc4, %dec_label_pc_15fbc ], [ -1, %dec_label_pc_15fd0 ]
  store i32 %v2_15fe4, i32* %r4.global-to-local, align 4
  ret i32 %v0_15fe0

; uselistorder directives
  uselistorder i32 %v0_15fc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15fe0, { 1, 0 }
}

define i32 @function_15fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15fe8:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1602c, label %dec_label_pc_16018

dec_label_pc_16018:                               ; preds = %dec_label_pc_15fe8
  %v0_16018 = call i32 @function_14858()
  %v0_1601c = load i32, i32* %r4.global-to-local, align 4
  %v1_1601c = sub i32 0, %v0_1601c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_16024 = inttoptr i32 %v0_16018 to i32*
  store i32 %v1_1601c, i32* %v2_16024, align 4
  %v0_16034.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16034

dec_label_pc_1602c:                               ; preds = %dec_label_pc_15fe8
  %v2_1602c = icmp eq i32 %arg1, 0
  br i1 %v2_1602c, label %dec_label_pc_16040, label %dec_label_pc_16034

dec_label_pc_16034:                               ; preds = %dec_label_pc_1602c, %dec_label_pc_16018
  %v0_16034 = phi i32 [ %arg1, %dec_label_pc_1602c ], [ %v0_16034.pre, %dec_label_pc_16018 ]
  br label %dec_label_pc_16044

dec_label_pc_16040:                               ; preds = %dec_label_pc_1602c
  br label %dec_label_pc_16044

dec_label_pc_16044:                               ; preds = %dec_label_pc_16034, %dec_label_pc_16040
  %v14_16048 = phi i32 [ %v0_16034, %dec_label_pc_16034 ], [ %tmp9, %dec_label_pc_16040 ]
  ret i32 %v14_16048

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_16044, { 1, 0 }
}

define i32 @function_1604c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1604c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1604c = load i32, i32* @r4, align 4
  store i32 %v3_1604c, i32* %stack_var_-8, align 4
  %v6_16050 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_16050, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_16050, -4095
  br i1 %tmp6, label %dec_label_pc_16070, label %dec_label_pc_16060

dec_label_pc_16060:                               ; preds = %dec_label_pc_1604c
  %v0_16060 = call i32 @function_14858()
  %v0_16064 = load i32, i32* %r4.global-to-local, align 4
  %v1_16064 = sub i32 0, %v0_16064
  %v2_16068 = inttoptr i32 %v0_16060 to i32*
  store i32 %v1_16064, i32* %v2_16068, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16070

dec_label_pc_16070:                               ; preds = %dec_label_pc_1604c, %dec_label_pc_16060
  %v0_16070 = phi i32 [ %v6_16050, %dec_label_pc_1604c ], [ -1, %dec_label_pc_16060 ]
  %v2_16074 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16074, i32* %r4.global-to-local, align 4
  ret i32 %v0_16070

; uselistorder directives
  uselistorder i32 %v6_16050, { 1, 0, 2 }
  uselistorder label %dec_label_pc_16070, { 1, 0 }
}

define i32 @function_16078(i32 %arg1) local_unnamed_addr {
dec_label_pc_16078:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_16078 = load i32, i32* @r4, align 4
  store i32 %v3_16078, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1f8a4.697 to i32), i32* %r4.global-to-local, align 4
  %v2_16080 = load i32, i32* @global_var_1f8a4.697, align 4
  %v2_16084 = icmp eq i32 %v2_16080, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_16084, label %dec_label_pc_16094, label %dec_label_pc_160a0

dec_label_pc_16094:                               ; preds = %dec_label_pc_16078
  %v2_16094 = call i32 @function_16a80(i32* null)
  %v1_16098 = icmp slt i32 %v2_16094, 0
  br i1 %v1_16098, label %dec_label_pc_160c0, label %dec_label_pc_160a0thread-pre-split

dec_label_pc_160a0thread-pre-split:               ; preds = %dec_label_pc_16094
  %v0_160a4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_160a0.pre = load i32, i32* @global_var_1f8a4.697, align 4
  br label %dec_label_pc_160a0

dec_label_pc_160a0:                               ; preds = %dec_label_pc_160a0thread-pre-split, %dec_label_pc_16078
  %v2_160a0 = phi i32 [ %v2_160a0.pre, %dec_label_pc_160a0thread-pre-split ], [ %v2_16080, %dec_label_pc_16078 ]
  %v1_160ac = phi i32 [ %v0_160a4.pr, %dec_label_pc_160a0thread-pre-split ], [ %arg1, %dec_label_pc_16078 ]
  %v2_160a4 = icmp eq i32 %v1_160ac, 0
  store i32 %v2_160a0, i32* %r4.global-to-local, align 4
  br i1 %v2_160a4, label %dec_label_pc_160c4, label %dec_label_pc_160b4

dec_label_pc_160b4:                               ; preds = %dec_label_pc_160a0
  %v2_160ac = add i32 %v1_160ac, %v2_160a0
  %v1_160b4 = inttoptr i32 %v2_160ac to i32*
  %v2_160b4 = call i32 @function_16a80(i32* %v1_160b4)
  %v1_160b8 = icmp slt i32 %v2_160b4, 0
  br i1 %v1_160b8, label %dec_label_pc_160c0, label %dec_label_pc_160b4.dec_label_pc_160c4_crit_edge

dec_label_pc_160b4.dec_label_pc_160c4_crit_edge:  ; preds = %dec_label_pc_160b4
  %v0_160c4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_160c4

dec_label_pc_160c0:                               ; preds = %dec_label_pc_160b4, %dec_label_pc_16094
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_160c4

dec_label_pc_160c4:                               ; preds = %dec_label_pc_160b4.dec_label_pc_160c4_crit_edge, %dec_label_pc_160a0, %dec_label_pc_160c0
  %v0_160c4 = phi i32 [ %v0_160c4.pre, %dec_label_pc_160b4.dec_label_pc_160c4_crit_edge ], [ %v2_160a0, %dec_label_pc_160a0 ], [ -1, %dec_label_pc_160c0 ]
  %v2_160c8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_160c8, i32* @r4, align 4
  ret i32 %v0_160c4

; uselistorder directives
  uselistorder i32 %v2_160a0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 8, 41, 42, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 2, 23, 3, 24, 28, 27, 26, 25, 40, 7, 29, 30, 31, 38, 32, 33, 34, 35, 36, 37, 6, 39 }
  uselistorder label %dec_label_pc_160c4, { 2, 0, 1 }
}

define i32 @function_160d0(%tms* %arg1) local_unnamed_addr {
dec_label_pc_160d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_160d0 = load i32, i32* @r4, align 4
  store i32 %v3_160d0, i32* %stack_var_-8, align 4
  %v3_160d4 = call i32 @times(%tms* %arg1)
  store i32 %v3_160d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_160d4, -4095
  br i1 %tmp, label %dec_label_pc_160f4, label %dec_label_pc_160e4

dec_label_pc_160e4:                               ; preds = %dec_label_pc_160d0
  %v0_160e4 = call i32 @function_14858()
  %v0_160e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_160e8 = sub i32 0, %v0_160e8
  %v2_160ec = inttoptr i32 %v0_160e4 to i32*
  store i32 %v1_160e8, i32* %v2_160ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_160f4

dec_label_pc_160f4:                               ; preds = %dec_label_pc_160d0, %dec_label_pc_160e4
  %v0_160f4 = phi i32 [ %v3_160d4, %dec_label_pc_160d0 ], [ -1, %dec_label_pc_160e4 ]
  %v2_160f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_160f8, i32* %r4.global-to-local, align 4
  ret i32 %v0_160f4

; uselistorder directives
  uselistorder i32 %v3_160d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_160f4, { 1, 0 }
}

define i32 @function_160fc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_160fc:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_16118 = inttoptr i32 %arg2 to i8*
  %v3_16118 = call i32 @function_148c0(i8* %v2_16118, i32 0)
  %v1_1611c = add i32 %tmp, 1
  %v2_1611c = inttoptr i32 %v1_1611c to i8*
  %v3_1611c = load i8, i8* %v2_1611c, align 1
  %v4_1611c = zext i8 %v3_1611c to i32
  %v1_16120 = add i32 %tmp, 5
  %v2_16120 = inttoptr i32 %v1_16120 to i8*
  %v3_16120 = load i8, i8* %v2_16120, align 1
  %v4_16120 = zext i8 %v3_16120 to i32
  %v2_16124 = load i8, i8* %arg1, align 1
  %v3_16124 = zext i8 %v2_16124 to i32
  %v1_16128 = add i32 %tmp, 4
  %v2_16128 = inttoptr i32 %v1_16128 to i8*
  %v3_16128 = load i8, i8* %v2_16128, align 1
  %v4_16128 = zext i8 %v3_16128 to i32
  %v1_1612c = add i32 %tmp, 2
  %v2_1612c = inttoptr i32 %v1_1612c to i8*
  %v3_1612c = load i8, i8* %v2_1612c, align 1
  %v4_1612c = zext i8 %v3_1612c to i32
  %v1_16130 = add i32 %tmp, 6
  %v2_16130 = inttoptr i32 %v1_16130 to i8*
  %v3_16130 = load i8, i8* %v2_16130, align 1
  %v4_16130 = zext i8 %v3_16130 to i32
  %v1_16134 = add i32 %tmp, 3
  %v2_16134 = inttoptr i32 %v1_16134 to i8*
  %v3_16134 = load i8, i8* %v2_16134, align 1
  %v4_16134 = zext i8 %v3_16134 to i32
  %v4_16138 = mul nuw nsw i32 %v4_1611c, 256
  %v5_16138 = or i32 %v3_16124, %v4_16138
  %v4_1613c = mul nuw nsw i32 %v4_16120, 256
  %v5_1613c = or i32 %v4_16128, %v4_1613c
  %v1_16140 = add i32 %tmp, 7
  %v2_16140 = inttoptr i32 %v1_16140 to i8*
  %v3_16140 = load i8, i8* %v2_16140, align 1
  %v4_16140 = zext i8 %v3_16140 to i32
  %v4_16144 = mul nuw nsw i32 %v4_1612c, 65536
  %v5_16144 = or i32 %v4_16144, %v5_16138
  %v4_16148 = mul nuw nsw i32 %v4_16130, 65536
  %v5_16148 = or i32 %v4_16148, %v5_1613c
  %v4_1614c = mul nuw i32 %v4_16134, 16777216
  %v5_1614c = or i32 %v4_1614c, %v5_16144
  %v4_16150 = mul nuw i32 %v4_16140, 16777216
  %v5_16150 = or i32 %v4_16150, %v5_16148
  store i32 %v5_16150, i32* %r3.global-to-local, align 4
  %v0_16154 = load i32, i32* %r7.global-to-local, align 4
  %v1_16154 = inttoptr i32 %v0_16154 to i32*
  store i32 %v5_1614c, i32* %v1_16154, align 4
  %v3_16154 = add i32 %v0_16154, 4
  %v4_16154 = inttoptr i32 %v3_16154 to i32*
  %v5_16154 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_16154, i32* %v4_16154, align 4
  %v0_16158 = load i32, i32* %r4.global-to-local, align 4
  %v1_16158 = add i32 %v0_16158, 89
  %v2_16158 = inttoptr i32 %v1_16158 to i8*
  %v3_16158 = load i8, i8* %v2_16158, align 1
  %v4_16158 = zext i8 %v3_16158 to i32
  %v1_1615c = add i32 %v0_16158, 93
  %v2_1615c = inttoptr i32 %v1_1615c to i8*
  %v3_1615c = load i8, i8* %v2_1615c, align 1
  %v4_1615c = zext i8 %v3_1615c to i32
  %v1_16160 = add i32 %v0_16158, 88
  %v2_16160 = inttoptr i32 %v1_16160 to i8*
  %v3_16160 = load i8, i8* %v2_16160, align 1
  %v4_16160 = zext i8 %v3_16160 to i32
  %v1_16164 = add i32 %v0_16158, 92
  %v2_16164 = inttoptr i32 %v1_16164 to i8*
  %v3_16164 = load i8, i8* %v2_16164, align 1
  %v4_16164 = zext i8 %v3_16164 to i32
  store i32 %v4_16164, i32* %r3.global-to-local, align 4
  %v1_16168 = add i32 %v0_16158, 94
  %v2_16168 = inttoptr i32 %v1_16168 to i8*
  %v3_16168 = load i8, i8* %v2_16168, align 1
  %v4_16168 = zext i8 %v3_16168 to i32
  %v1_1616c = add i32 %v0_16158, 90
  %v2_1616c = inttoptr i32 %v1_1616c to i8*
  %v3_1616c = load i8, i8* %v2_1616c, align 1
  %v4_1616c = zext i8 %v3_1616c to i32
  %v1_16170 = add i32 %v0_16158, 91
  %v2_16170 = inttoptr i32 %v1_16170 to i8*
  %v3_16170 = load i8, i8* %v2_16170, align 1
  %v4_16170 = zext i8 %v3_16170 to i32
  %v4_16174 = mul nuw nsw i32 %v4_16158, 256
  %v5_16174 = or i32 %v4_16160, %v4_16174
  %v4_16178 = mul nuw nsw i32 %v4_1615c, 256
  %v5_16178 = or i32 %v4_16164, %v4_16178
  store i32 %v5_16178, i32* %r3.global-to-local, align 4
  %v1_1617c = add i32 %v0_16158, 95
  %v2_1617c = inttoptr i32 %v1_1617c to i8*
  %v3_1617c = load i8, i8* %v2_1617c, align 1
  %v4_1617c = zext i8 %v3_1617c to i32
  %v4_16180 = mul nuw nsw i32 %v4_16168, 65536
  %v5_16180 = or i32 %v4_16180, %v5_16178
  store i32 %v5_16180, i32* %r3.global-to-local, align 4
  %v4_16184 = mul nuw nsw i32 %v4_1616c, 65536
  %v5_16184 = or i32 %v4_16184, %v5_16174
  %v4_16188 = mul nuw i32 %v4_16170, 16777216
  %v5_16188 = or i32 %v4_16188, %v5_16184
  %v4_1618c = mul nuw i32 %v4_1617c, 16777216
  %v5_1618c = or i32 %v4_1618c, %v5_16180
  store i32 %v5_1618c, i32* %r6.global-to-local, align 4
  %v1_16190 = load i32, i32* %r7.global-to-local, align 4
  %v2_16190 = add i32 %v1_16190, 88
  %v3_16190 = inttoptr i32 %v2_16190 to i32*
  store i32 %v5_16188, i32* %v3_16190, align 4
  %v0_16194 = load i32, i32* %r6.global-to-local, align 4
  %v1_16194 = load i32, i32* %r7.global-to-local, align 4
  %v2_16194 = add i32 %v1_16194, 92
  %v3_16194 = inttoptr i32 %v2_16194 to i32*
  store i32 %v0_16194, i32* %v3_16194, align 4
  %v0_16198 = load i32, i32* %r4.global-to-local, align 4
  %v1_16198 = add i32 %v0_16198, 13
  %v2_16198 = inttoptr i32 %v1_16198 to i8*
  %v3_16198 = load i8, i8* %v2_16198, align 1
  %v4_16198 = zext i8 %v3_16198 to i32
  %v1_1619c = add i32 %v0_16198, 12
  %v2_1619c = inttoptr i32 %v1_1619c to i8*
  %v3_1619c = load i8, i8* %v2_1619c, align 1
  %v4_1619c = zext i8 %v3_1619c to i32
  store i32 %v4_1619c, i32* %r3.global-to-local, align 4
  %v1_161a0 = add i32 %v0_16198, 14
  %v2_161a0 = inttoptr i32 %v1_161a0 to i8*
  %v3_161a0 = load i8, i8* %v2_161a0, align 1
  %v4_161a0 = zext i8 %v3_161a0 to i32
  %v4_161a4 = mul nuw nsw i32 %v4_16198, 256
  %v5_161a4 = or i32 %v4_1619c, %v4_161a4
  store i32 %v5_161a4, i32* %r3.global-to-local, align 4
  %v1_161a8 = add i32 %v0_16198, 15
  %v2_161a8 = inttoptr i32 %v1_161a8 to i8*
  %v3_161a8 = load i8, i8* %v2_161a8, align 1
  %v4_161a8 = zext i8 %v3_161a8 to i32
  %v4_161ac = mul nuw nsw i32 %v4_161a0, 65536
  %v5_161ac = or i32 %v4_161ac, %v5_161a4
  %v4_161b0 = mul nuw i32 %v4_161a8, 16777216
  %v5_161b0 = or i32 %v5_161ac, %v4_161b0
  store i32 %v5_161b0, i32* %r3.global-to-local, align 4
  %v1_161b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161b4 = add i32 %v1_161b4, 12
  %v3_161b4 = inttoptr i32 %v2_161b4 to i32*
  store i32 %v5_161b0, i32* %v3_161b4, align 4
  %v0_161b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161b8 = add i32 %v0_161b8, 17
  %v2_161b8 = inttoptr i32 %v1_161b8 to i8*
  %v3_161b8 = load i8, i8* %v2_161b8, align 1
  %v4_161b8 = zext i8 %v3_161b8 to i32
  %v1_161bc = add i32 %v0_161b8, 16
  %v2_161bc = inttoptr i32 %v1_161bc to i8*
  %v3_161bc = load i8, i8* %v2_161bc, align 1
  %v4_161bc = zext i8 %v3_161bc to i32
  store i32 %v4_161bc, i32* %r3.global-to-local, align 4
  %v1_161c0 = add i32 %v0_161b8, 18
  %v2_161c0 = inttoptr i32 %v1_161c0 to i8*
  %v3_161c0 = load i8, i8* %v2_161c0, align 1
  %v4_161c0 = zext i8 %v3_161c0 to i32
  %v4_161c4 = mul nuw nsw i32 %v4_161b8, 256
  %v5_161c4 = or i32 %v4_161bc, %v4_161c4
  store i32 %v5_161c4, i32* %r3.global-to-local, align 4
  %v1_161c8 = add i32 %v0_161b8, 19
  %v2_161c8 = inttoptr i32 %v1_161c8 to i8*
  %v3_161c8 = load i8, i8* %v2_161c8, align 1
  %v4_161c8 = zext i8 %v3_161c8 to i32
  %v4_161cc = mul nuw nsw i32 %v4_161c0, 65536
  %v5_161cc = or i32 %v4_161cc, %v5_161c4
  %v4_161d0 = mul nuw i32 %v4_161c8, 16777216
  %v5_161d0 = or i32 %v5_161cc, %v4_161d0
  store i32 %v5_161d0, i32* %r3.global-to-local, align 4
  %v1_161d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161d4 = add i32 %v1_161d4, 16
  %v3_161d4 = inttoptr i32 %v2_161d4 to i32*
  store i32 %v5_161d0, i32* %v3_161d4, align 4
  %v0_161d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161d8 = add i32 %v0_161d8, 21
  %v2_161d8 = inttoptr i32 %v1_161d8 to i8*
  %v3_161d8 = load i8, i8* %v2_161d8, align 1
  %v4_161d8 = zext i8 %v3_161d8 to i32
  %v1_161dc = add i32 %v0_161d8, 20
  %v2_161dc = inttoptr i32 %v1_161dc to i8*
  %v3_161dc = load i8, i8* %v2_161dc, align 1
  %v4_161dc = zext i8 %v3_161dc to i32
  store i32 %v4_161dc, i32* %r3.global-to-local, align 4
  %v1_161e0 = add i32 %v0_161d8, 22
  %v2_161e0 = inttoptr i32 %v1_161e0 to i8*
  %v3_161e0 = load i8, i8* %v2_161e0, align 1
  %v4_161e0 = zext i8 %v3_161e0 to i32
  %v4_161e4 = mul nuw nsw i32 %v4_161d8, 256
  %v5_161e4 = or i32 %v4_161dc, %v4_161e4
  store i32 %v5_161e4, i32* %r3.global-to-local, align 4
  %v1_161e8 = add i32 %v0_161d8, 23
  %v2_161e8 = inttoptr i32 %v1_161e8 to i8*
  %v3_161e8 = load i8, i8* %v2_161e8, align 1
  %v4_161e8 = zext i8 %v3_161e8 to i32
  %v4_161ec = mul nuw nsw i32 %v4_161e0, 65536
  %v5_161ec = or i32 %v4_161ec, %v5_161e4
  %v4_161f0 = mul nuw i32 %v4_161e8, 16777216
  %v5_161f0 = or i32 %v5_161ec, %v4_161f0
  store i32 %v5_161f0, i32* %r3.global-to-local, align 4
  %v1_161f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_161f4 = add i32 %v1_161f4, 20
  %v3_161f4 = inttoptr i32 %v2_161f4 to i32*
  store i32 %v5_161f0, i32* %v3_161f4, align 4
  %v0_161f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_161f8 = add i32 %v0_161f8, 25
  %v2_161f8 = inttoptr i32 %v1_161f8 to i8*
  %v3_161f8 = load i8, i8* %v2_161f8, align 1
  %v4_161f8 = zext i8 %v3_161f8 to i32
  %v1_161fc = add i32 %v0_161f8, 24
  %v2_161fc = inttoptr i32 %v1_161fc to i8*
  %v3_161fc = load i8, i8* %v2_161fc, align 1
  %v4_161fc = zext i8 %v3_161fc to i32
  store i32 %v4_161fc, i32* %r3.global-to-local, align 4
  %v1_16200 = add i32 %v0_161f8, 26
  %v2_16200 = inttoptr i32 %v1_16200 to i8*
  %v3_16200 = load i8, i8* %v2_16200, align 1
  %v4_16200 = zext i8 %v3_16200 to i32
  %v4_16204 = mul nuw nsw i32 %v4_161f8, 256
  %v5_16204 = or i32 %v4_161fc, %v4_16204
  store i32 %v5_16204, i32* %r3.global-to-local, align 4
  %v1_16208 = add i32 %v0_161f8, 27
  %v2_16208 = inttoptr i32 %v1_16208 to i8*
  %v3_16208 = load i8, i8* %v2_16208, align 1
  %v4_16208 = zext i8 %v3_16208 to i32
  %v4_1620c = mul nuw nsw i32 %v4_16200, 65536
  %v5_1620c = or i32 %v4_1620c, %v5_16204
  %v4_16210 = mul nuw i32 %v4_16208, 16777216
  %v5_16210 = or i32 %v5_1620c, %v4_16210
  store i32 %v5_16210, i32* %r3.global-to-local, align 4
  %v1_16214 = load i32, i32* %r7.global-to-local, align 4
  %v2_16214 = add i32 %v1_16214, 24
  %v3_16214 = inttoptr i32 %v2_16214 to i32*
  store i32 %v5_16210, i32* %v3_16214, align 4
  %v0_16218 = load i32, i32* %r4.global-to-local, align 4
  %v1_16218 = add i32 %v0_16218, 29
  %v2_16218 = inttoptr i32 %v1_16218 to i8*
  %v3_16218 = load i8, i8* %v2_16218, align 1
  %v4_16218 = zext i8 %v3_16218 to i32
  %v1_1621c = add i32 %v0_16218, 28
  %v2_1621c = inttoptr i32 %v1_1621c to i8*
  %v3_1621c = load i8, i8* %v2_1621c, align 1
  %v4_1621c = zext i8 %v3_1621c to i32
  store i32 %v4_1621c, i32* %r3.global-to-local, align 4
  %v1_16220 = add i32 %v0_16218, 30
  %v2_16220 = inttoptr i32 %v1_16220 to i8*
  %v3_16220 = load i8, i8* %v2_16220, align 1
  %v4_16220 = zext i8 %v3_16220 to i32
  %v4_16224 = mul nuw nsw i32 %v4_16218, 256
  %v5_16224 = or i32 %v4_1621c, %v4_16224
  store i32 %v5_16224, i32* %r3.global-to-local, align 4
  %v1_16228 = add i32 %v0_16218, 31
  %v2_16228 = inttoptr i32 %v1_16228 to i8*
  %v3_16228 = load i8, i8* %v2_16228, align 1
  %v4_16228 = zext i8 %v3_16228 to i32
  %v4_1622c = mul nuw nsw i32 %v4_16220, 65536
  %v5_1622c = or i32 %v4_1622c, %v5_16224
  %v4_16230 = mul nuw i32 %v4_16228, 16777216
  %v5_16230 = or i32 %v5_1622c, %v4_16230
  store i32 %v5_16230, i32* %r3.global-to-local, align 4
  %v1_16234 = load i32, i32* %r7.global-to-local, align 4
  %v2_16234 = add i32 %v1_16234, 28
  %v3_16234 = inttoptr i32 %v2_16234 to i32*
  store i32 %v5_16230, i32* %v3_16234, align 4
  %v0_16238 = load i32, i32* %r4.global-to-local, align 4
  %v1_16238 = add i32 %v0_16238, 33
  %v2_16238 = inttoptr i32 %v1_16238 to i8*
  %v3_16238 = load i8, i8* %v2_16238, align 1
  %v4_16238 = zext i8 %v3_16238 to i32
  %v1_1623c = add i32 %v0_16238, 37
  %v2_1623c = inttoptr i32 %v1_1623c to i8*
  %v3_1623c = load i8, i8* %v2_1623c, align 1
  %v4_1623c = zext i8 %v3_1623c to i32
  %v1_16240 = add i32 %v0_16238, 32
  %v2_16240 = inttoptr i32 %v1_16240 to i8*
  %v3_16240 = load i8, i8* %v2_16240, align 1
  %v4_16240 = zext i8 %v3_16240 to i32
  %v1_16244 = add i32 %v0_16238, 36
  %v2_16244 = inttoptr i32 %v1_16244 to i8*
  %v3_16244 = load i8, i8* %v2_16244, align 1
  %v4_16244 = zext i8 %v3_16244 to i32
  store i32 %v4_16244, i32* %r3.global-to-local, align 4
  %v1_16248 = add i32 %v0_16238, 34
  %v2_16248 = inttoptr i32 %v1_16248 to i8*
  %v3_16248 = load i8, i8* %v2_16248, align 1
  %v4_16248 = zext i8 %v3_16248 to i32
  %v1_1624c = add i32 %v0_16238, 38
  %v2_1624c = inttoptr i32 %v1_1624c to i8*
  %v3_1624c = load i8, i8* %v2_1624c, align 1
  %v4_1624c = zext i8 %v3_1624c to i32
  %v1_16250 = add i32 %v0_16238, 35
  %v2_16250 = inttoptr i32 %v1_16250 to i8*
  %v3_16250 = load i8, i8* %v2_16250, align 1
  %v4_16250 = zext i8 %v3_16250 to i32
  %v4_16254 = mul nuw nsw i32 %v4_16238, 256
  %v5_16254 = or i32 %v4_16240, %v4_16254
  %v4_16258 = mul nuw nsw i32 %v4_1623c, 256
  %v5_16258 = or i32 %v4_16244, %v4_16258
  store i32 %v5_16258, i32* %r3.global-to-local, align 4
  %v1_1625c = add i32 %v0_16238, 39
  %v2_1625c = inttoptr i32 %v1_1625c to i8*
  %v3_1625c = load i8, i8* %v2_1625c, align 1
  %v4_1625c = zext i8 %v3_1625c to i32
  %v4_16260 = mul nuw nsw i32 %v4_16248, 65536
  %v5_16260 = or i32 %v4_16260, %v5_16254
  %v4_16264 = mul nuw nsw i32 %v4_1624c, 65536
  %v5_16264 = or i32 %v4_16264, %v5_16258
  %v4_16268 = mul nuw i32 %v4_16250, 16777216
  %v5_16268 = or i32 %v5_16260, %v4_16268
  %v4_1626c = mul nuw i32 %v4_1625c, 16777216
  %v5_1626c = or i32 %v5_16264, %v4_1626c
  store i32 %v5_1626c, i32* %r3.global-to-local, align 4
  %v1_16280 = load i32, i32* %r7.global-to-local, align 4
  %v2_16280 = add i32 %v1_16280, 32
  %v3_16280 = inttoptr i32 %v2_16280 to i32*
  store i32 %v5_16268, i32* %v3_16280, align 4
  %v0_16284 = load i32, i32* %r3.global-to-local, align 4
  %v1_16284 = load i32, i32* %r7.global-to-local, align 4
  %v2_16284 = add i32 %v1_16284, 36
  %v3_16284 = inttoptr i32 %v2_16284 to i32*
  store i32 %v0_16284, i32* %v3_16284, align 4
  %v0_16288 = load i32, i32* %r4.global-to-local, align 4
  %v1_16288 = add i32 %v0_16288, 45
  %v2_16288 = inttoptr i32 %v1_16288 to i8*
  %v3_16288 = load i8, i8* %v2_16288, align 1
  %v4_16288 = zext i8 %v3_16288 to i32
  %v1_1628c = add i32 %v0_16288, 49
  %v2_1628c = inttoptr i32 %v1_1628c to i8*
  %v3_1628c = load i8, i8* %v2_1628c, align 1
  %v4_1628c = zext i8 %v3_1628c to i32
  %v1_16290 = add i32 %v0_16288, 44
  %v2_16290 = inttoptr i32 %v1_16290 to i8*
  %v3_16290 = load i8, i8* %v2_16290, align 1
  %v4_16290 = zext i8 %v3_16290 to i32
  %v1_16294 = add i32 %v0_16288, 48
  %v2_16294 = inttoptr i32 %v1_16294 to i8*
  %v3_16294 = load i8, i8* %v2_16294, align 1
  %v4_16294 = zext i8 %v3_16294 to i32
  store i32 %v4_16294, i32* %r3.global-to-local, align 4
  %v1_16298 = add i32 %v0_16288, 46
  %v2_16298 = inttoptr i32 %v1_16298 to i8*
  %v3_16298 = load i8, i8* %v2_16298, align 1
  %v4_16298 = zext i8 %v3_16298 to i32
  %v1_1629c = add i32 %v0_16288, 50
  %v2_1629c = inttoptr i32 %v1_1629c to i8*
  %v3_1629c = load i8, i8* %v2_1629c, align 1
  %v4_1629c = zext i8 %v3_1629c to i32
  %v1_162a0 = add i32 %v0_16288, 47
  %v2_162a0 = inttoptr i32 %v1_162a0 to i8*
  %v3_162a0 = load i8, i8* %v2_162a0, align 1
  %v4_162a0 = zext i8 %v3_162a0 to i32
  %v4_162a4 = mul nuw nsw i32 %v4_16288, 256
  %v5_162a4 = or i32 %v4_16290, %v4_162a4
  %v4_162a8 = mul nuw nsw i32 %v4_1628c, 256
  %v5_162a8 = or i32 %v4_16294, %v4_162a8
  store i32 %v5_162a8, i32* %r3.global-to-local, align 4
  %v1_162ac = add i32 %v0_16288, 51
  %v2_162ac = inttoptr i32 %v1_162ac to i8*
  %v3_162ac = load i8, i8* %v2_162ac, align 1
  %v4_162ac = zext i8 %v3_162ac to i32
  %v4_162b0 = mul nuw nsw i32 %v4_16298, 65536
  %v5_162b0 = or i32 %v4_162b0, %v5_162a4
  %v4_162b4 = mul nuw nsw i32 %v4_1629c, 65536
  %v5_162b4 = or i32 %v4_162b4, %v5_162a8
  %v4_162b8 = mul nuw i32 %v4_162a0, 16777216
  %v5_162b8 = or i32 %v5_162b0, %v4_162b8
  %v4_162bc = mul nuw i32 %v4_162ac, 16777216
  %v5_162bc = or i32 %v5_162b4, %v4_162bc
  store i32 %v5_162bc, i32* %r3.global-to-local, align 4
  %v1_162d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_162d0 = add i32 %v1_162d0, 44
  %v3_162d0 = inttoptr i32 %v2_162d0 to i32*
  store i32 %v5_162b8, i32* %v3_162d0, align 4
  %v0_162d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_162d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_162d4 = add i32 %v1_162d4, 48
  %v3_162d4 = inttoptr i32 %v2_162d4 to i32*
  store i32 %v0_162d4, i32* %v3_162d4, align 4
  %v0_162d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_162d8 = add i32 %v0_162d8, 53
  %v2_162d8 = inttoptr i32 %v1_162d8 to i8*
  %v3_162d8 = load i8, i8* %v2_162d8, align 1
  %v4_162d8 = zext i8 %v3_162d8 to i32
  %v1_162dc = add i32 %v0_162d8, 52
  %v2_162dc = inttoptr i32 %v1_162dc to i8*
  %v3_162dc = load i8, i8* %v2_162dc, align 1
  %v4_162dc = zext i8 %v3_162dc to i32
  store i32 %v4_162dc, i32* %r3.global-to-local, align 4
  %v1_162e0 = add i32 %v0_162d8, 54
  %v2_162e0 = inttoptr i32 %v1_162e0 to i8*
  %v3_162e0 = load i8, i8* %v2_162e0, align 1
  %v4_162e0 = zext i8 %v3_162e0 to i32
  %v4_162e4 = mul nuw nsw i32 %v4_162d8, 256
  %v5_162e4 = or i32 %v4_162dc, %v4_162e4
  store i32 %v5_162e4, i32* %r3.global-to-local, align 4
  %v1_162e8 = add i32 %v0_162d8, 55
  %v2_162e8 = inttoptr i32 %v1_162e8 to i8*
  %v3_162e8 = load i8, i8* %v2_162e8, align 1
  %v4_162e8 = zext i8 %v3_162e8 to i32
  %v4_162ec = mul nuw nsw i32 %v4_162e0, 65536
  %v5_162ec = or i32 %v4_162ec, %v5_162e4
  %v4_162f0 = mul nuw i32 %v4_162e8, 16777216
  %v5_162f0 = or i32 %v5_162ec, %v4_162f0
  store i32 %v5_162f0, i32* %r3.global-to-local, align 4
  %v1_162f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_162f4 = add i32 %v1_162f4, 52
  %v3_162f4 = inttoptr i32 %v2_162f4 to i32*
  store i32 %v5_162f0, i32* %v3_162f4, align 4
  %v0_162f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_162f8 = add i32 %v0_162f8, 57
  %v2_162f8 = inttoptr i32 %v1_162f8 to i8*
  %v3_162f8 = load i8, i8* %v2_162f8, align 1
  %v4_162f8 = zext i8 %v3_162f8 to i32
  %v1_162fc = add i32 %v0_162f8, 56
  %v2_162fc = inttoptr i32 %v1_162fc to i8*
  %v3_162fc = load i8, i8* %v2_162fc, align 1
  %v4_162fc = zext i8 %v3_162fc to i32
  %v1_16300 = add i32 %v0_162f8, 60
  %v2_16300 = inttoptr i32 %v1_16300 to i8*
  %v3_16300 = load i8, i8* %v2_16300, align 1
  %v4_16300 = zext i8 %v3_16300 to i32
  store i32 %v4_16300, i32* %r3.global-to-local, align 4
  %v1_16304 = add i32 %v0_162f8, 61
  %v2_16304 = inttoptr i32 %v1_16304 to i8*
  %v3_16304 = load i8, i8* %v2_16304, align 1
  %v4_16304 = zext i8 %v3_16304 to i32
  %v1_16308 = add i32 %v0_162f8, 58
  %v2_16308 = inttoptr i32 %v1_16308 to i8*
  %v3_16308 = load i8, i8* %v2_16308, align 1
  %v4_16308 = zext i8 %v3_16308 to i32
  %v1_1630c = add i32 %v0_162f8, 62
  %v2_1630c = inttoptr i32 %v1_1630c to i8*
  %v3_1630c = load i8, i8* %v2_1630c, align 1
  %v4_1630c = zext i8 %v3_1630c to i32
  %v1_16310 = add i32 %v0_162f8, 59
  %v2_16310 = inttoptr i32 %v1_16310 to i8*
  %v3_16310 = load i8, i8* %v2_16310, align 1
  %v4_16310 = zext i8 %v3_16310 to i32
  %v4_16314 = mul nuw nsw i32 %v4_162f8, 256
  %v5_16314 = or i32 %v4_162fc, %v4_16314
  %v4_16318 = mul nuw nsw i32 %v4_16304, 256
  %v5_16318 = or i32 %v4_16318, %v4_16300
  store i32 %v5_16318, i32* %r3.global-to-local, align 4
  %v1_1631c = add i32 %v0_162f8, 63
  %v2_1631c = inttoptr i32 %v1_1631c to i8*
  %v3_1631c = load i8, i8* %v2_1631c, align 1
  %v4_1631c = zext i8 %v3_1631c to i32
  %v4_16320 = mul nuw nsw i32 %v4_16308, 65536
  %v5_16320 = or i32 %v4_16320, %v5_16314
  %v4_16324 = mul nuw nsw i32 %v4_1630c, 65536
  %v5_16324 = or i32 %v4_16324, %v5_16318
  %v4_16328 = mul nuw i32 %v4_1631c, 16777216
  %v5_16328 = or i32 %v5_16324, %v4_16328
  %v4_1632c = mul nuw i32 %v4_16310, 16777216
  %v5_1632c = or i32 %v5_16320, %v4_1632c
  store i32 %v5_16328, i32* %r3.global-to-local, align 4
  %v1_1633c = load i32, i32* %r7.global-to-local, align 4
  %v2_1633c = add i32 %v1_1633c, 56
  %v3_1633c = inttoptr i32 %v2_1633c to i32*
  store i32 %v5_1632c, i32* %v3_1633c, align 4
  %v0_16340 = load i32, i32* %r3.global-to-local, align 4
  %v1_16340 = load i32, i32* %r7.global-to-local, align 4
  %v2_16340 = add i32 %v1_16340, 60
  %v3_16340 = inttoptr i32 %v2_16340 to i32*
  store i32 %v0_16340, i32* %v3_16340, align 4
  %v0_16344 = load i32, i32* %r4.global-to-local, align 4
  %v1_16344 = add i32 %v0_16344, 65
  %v2_16344 = inttoptr i32 %v1_16344 to i8*
  %v3_16344 = load i8, i8* %v2_16344, align 1
  %v4_16344 = zext i8 %v3_16344 to i32
  %v1_16348 = add i32 %v0_16344, 64
  %v2_16348 = inttoptr i32 %v1_16348 to i8*
  %v3_16348 = load i8, i8* %v2_16348, align 1
  %v4_16348 = zext i8 %v3_16348 to i32
  store i32 %v4_16348, i32* %r3.global-to-local, align 4
  %v1_1634c = add i32 %v0_16344, 66
  %v2_1634c = inttoptr i32 %v1_1634c to i8*
  %v3_1634c = load i8, i8* %v2_1634c, align 1
  %v4_1634c = zext i8 %v3_1634c to i32
  %v4_16350 = mul nuw nsw i32 %v4_16344, 256
  %v5_16350 = or i32 %v4_16348, %v4_16350
  store i32 %v5_16350, i32* %r3.global-to-local, align 4
  %v1_16354 = add i32 %v0_16344, 67
  %v2_16354 = inttoptr i32 %v1_16354 to i8*
  %v3_16354 = load i8, i8* %v2_16354, align 1
  %v4_16354 = zext i8 %v3_16354 to i32
  %v4_16358 = mul nuw nsw i32 %v4_1634c, 65536
  %v5_16358 = or i32 %v4_16358, %v5_16350
  %v4_1635c = mul nuw i32 %v4_16354, 16777216
  %v5_1635c = or i32 %v5_16358, %v4_1635c
  store i32 %v5_1635c, i32* %r3.global-to-local, align 4
  %v1_16360 = load i32, i32* %r7.global-to-local, align 4
  %v2_16360 = add i32 %v1_16360, 64
  %v3_16360 = inttoptr i32 %v2_16360 to i32*
  store i32 %v5_1635c, i32* %v3_16360, align 4
  %v0_16364 = load i32, i32* %r4.global-to-local, align 4
  %v1_16364 = add i32 %v0_16364, 73
  %v2_16364 = inttoptr i32 %v1_16364 to i8*
  %v3_16364 = load i8, i8* %v2_16364, align 1
  %v4_16364 = zext i8 %v3_16364 to i32
  %v1_16368 = add i32 %v0_16364, 72
  %v2_16368 = inttoptr i32 %v1_16368 to i8*
  %v3_16368 = load i8, i8* %v2_16368, align 1
  %v4_16368 = zext i8 %v3_16368 to i32
  store i32 %v4_16368, i32* %r3.global-to-local, align 4
  %v1_1636c = add i32 %v0_16364, 74
  %v2_1636c = inttoptr i32 %v1_1636c to i8*
  %v3_1636c = load i8, i8* %v2_1636c, align 1
  %v4_1636c = zext i8 %v3_1636c to i32
  %v4_16370 = mul nuw nsw i32 %v4_16364, 256
  %v5_16370 = or i32 %v4_16368, %v4_16370
  store i32 %v5_16370, i32* %r3.global-to-local, align 4
  %v1_16374 = add i32 %v0_16364, 75
  %v2_16374 = inttoptr i32 %v1_16374 to i8*
  %v3_16374 = load i8, i8* %v2_16374, align 1
  %v4_16374 = zext i8 %v3_16374 to i32
  %v4_16378 = mul nuw nsw i32 %v4_1636c, 65536
  %v5_16378 = or i32 %v4_16378, %v5_16370
  %v4_1637c = mul nuw i32 %v4_16374, 16777216
  %v5_1637c = or i32 %v5_16378, %v4_1637c
  store i32 %v5_1637c, i32* %r3.global-to-local, align 4
  %v1_16380 = load i32, i32* %r7.global-to-local, align 4
  %v2_16380 = add i32 %v1_16380, 72
  %v3_16380 = inttoptr i32 %v2_16380 to i32*
  store i32 %v5_1637c, i32* %v3_16380, align 4
  %v0_16384 = load i32, i32* %r4.global-to-local, align 4
  %v1_16384 = add i32 %v0_16384, 81
  %v2_16384 = inttoptr i32 %v1_16384 to i8*
  %v3_16384 = load i8, i8* %v2_16384, align 1
  %v4_16384 = zext i8 %v3_16384 to i32
  %v1_16388 = add i32 %v0_16384, 80
  %v2_16388 = inttoptr i32 %v1_16388 to i8*
  %v3_16388 = load i8, i8* %v2_16388, align 1
  %v4_16388 = zext i8 %v3_16388 to i32
  store i32 %v4_16388, i32* %r3.global-to-local, align 4
  %v1_1638c = add i32 %v0_16384, 82
  %v2_1638c = inttoptr i32 %v1_1638c to i8*
  %v3_1638c = load i8, i8* %v2_1638c, align 1
  %v4_1638c = zext i8 %v3_1638c to i32
  %v4_16390 = mul nuw nsw i32 %v4_16384, 256
  %v5_16390 = or i32 %v4_16388, %v4_16390
  store i32 %v5_16390, i32* %r3.global-to-local, align 4
  %v1_16394 = add i32 %v0_16384, 83
  %v2_16394 = inttoptr i32 %v1_16394 to i8*
  %v3_16394 = load i8, i8* %v2_16394, align 1
  %v4_16394 = zext i8 %v3_16394 to i32
  %v4_16398 = mul nuw nsw i32 %v4_1638c, 65536
  %v5_16398 = or i32 %v4_16398, %v5_16390
  %v4_1639c = mul nuw i32 %v4_16394, 16777216
  %v5_1639c = or i32 %v5_16398, %v4_1639c
  store i32 %v5_1639c, i32* %r3.global-to-local, align 4
  %v1_163a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_163a0 = add i32 %v1_163a0, 80
  %v3_163a0 = inttoptr i32 %v2_163a0 to i32*
  store i32 %v5_1639c, i32* %v3_163a0, align 4
  %v0_163a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_163a4 = add i32 %v0_163a4, 69
  %v2_163a4 = inttoptr i32 %v1_163a4 to i8*
  %v3_163a4 = load i8, i8* %v2_163a4, align 1
  %v4_163a4 = zext i8 %v3_163a4 to i32
  %v1_163a8 = add i32 %v0_163a4, 68
  %v2_163a8 = inttoptr i32 %v1_163a8 to i8*
  %v3_163a8 = load i8, i8* %v2_163a8, align 1
  %v4_163a8 = zext i8 %v3_163a8 to i32
  store i32 %v4_163a8, i32* %r3.global-to-local, align 4
  %v1_163ac = add i32 %v0_163a4, 70
  %v2_163ac = inttoptr i32 %v1_163ac to i8*
  %v3_163ac = load i8, i8* %v2_163ac, align 1
  %v4_163ac = zext i8 %v3_163ac to i32
  %v4_163b0 = mul nuw nsw i32 %v4_163a4, 256
  %v5_163b0 = or i32 %v4_163a8, %v4_163b0
  store i32 %v5_163b0, i32* %r3.global-to-local, align 4
  %v1_163b4 = add i32 %v0_163a4, 71
  %v2_163b4 = inttoptr i32 %v1_163b4 to i8*
  %v3_163b4 = load i8, i8* %v2_163b4, align 1
  %v4_163b4 = zext i8 %v3_163b4 to i32
  %v4_163b8 = mul nuw nsw i32 %v4_163ac, 65536
  %v5_163b8 = or i32 %v4_163b8, %v5_163b0
  %v4_163bc = mul nuw i32 %v4_163b4, 16777216
  %v5_163bc = or i32 %v5_163b8, %v4_163bc
  store i32 %v5_163bc, i32* %r3.global-to-local, align 4
  %v1_163c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_163c0 = add i32 %v1_163c0, 68
  %v3_163c0 = inttoptr i32 %v2_163c0 to i32*
  store i32 %v5_163bc, i32* %v3_163c0, align 4
  %v0_163c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_163c4 = add i32 %v0_163c4, 77
  %v2_163c4 = inttoptr i32 %v1_163c4 to i8*
  %v3_163c4 = load i8, i8* %v2_163c4, align 1
  %v4_163c4 = zext i8 %v3_163c4 to i32
  %v1_163c8 = add i32 %v0_163c4, 76
  %v2_163c8 = inttoptr i32 %v1_163c8 to i8*
  %v3_163c8 = load i8, i8* %v2_163c8, align 1
  %v4_163c8 = zext i8 %v3_163c8 to i32
  store i32 %v4_163c8, i32* %r3.global-to-local, align 4
  %v1_163cc = add i32 %v0_163c4, 78
  %v2_163cc = inttoptr i32 %v1_163cc to i8*
  %v3_163cc = load i8, i8* %v2_163cc, align 1
  %v4_163cc = zext i8 %v3_163cc to i32
  %v4_163d0 = mul nuw nsw i32 %v4_163c4, 256
  %v5_163d0 = or i32 %v4_163c8, %v4_163d0
  store i32 %v5_163d0, i32* %r3.global-to-local, align 4
  %v1_163d4 = add i32 %v0_163c4, 79
  %v2_163d4 = inttoptr i32 %v1_163d4 to i8*
  %v3_163d4 = load i8, i8* %v2_163d4, align 1
  %v4_163d4 = zext i8 %v3_163d4 to i32
  %v4_163d8 = mul nuw nsw i32 %v4_163cc, 65536
  %v5_163d8 = or i32 %v4_163d8, %v5_163d0
  %v4_163dc = mul nuw i32 %v4_163d4, 16777216
  %v5_163dc = or i32 %v5_163d8, %v4_163dc
  store i32 %v5_163dc, i32* %r3.global-to-local, align 4
  %v1_163e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_163e0 = add i32 %v1_163e0, 76
  %v3_163e0 = inttoptr i32 %v2_163e0 to i32*
  store i32 %v5_163dc, i32* %v3_163e0, align 4
  %v0_163e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_163e4 = add i32 %v0_163e4, 85
  %v2_163e4 = inttoptr i32 %v1_163e4 to i8*
  %v3_163e4 = load i8, i8* %v2_163e4, align 1
  %v4_163e4 = zext i8 %v3_163e4 to i32
  %v1_163e8 = add i32 %v0_163e4, 84
  %v2_163e8 = inttoptr i32 %v1_163e8 to i8*
  %v3_163e8 = load i8, i8* %v2_163e8, align 1
  %v4_163e8 = zext i8 %v3_163e8 to i32
  store i32 %v4_163e8, i32* %r3.global-to-local, align 4
  %v1_163ec = add i32 %v0_163e4, 86
  %v2_163ec = inttoptr i32 %v1_163ec to i8*
  %v3_163ec = load i8, i8* %v2_163ec, align 1
  %v4_163ec = zext i8 %v3_163ec to i32
  %v4_163f0 = mul nuw nsw i32 %v4_163e4, 256
  %v5_163f0 = or i32 %v4_163e8, %v4_163f0
  store i32 %v5_163f0, i32* %r3.global-to-local, align 4
  %v1_163f4 = add i32 %v0_163e4, 87
  %v2_163f4 = inttoptr i32 %v1_163f4 to i8*
  %v3_163f4 = load i8, i8* %v2_163f4, align 1
  %v4_163f4 = zext i8 %v3_163f4 to i32
  %v4_163f8 = mul nuw nsw i32 %v4_163ec, 65536
  %v5_163f8 = or i32 %v4_163f8, %v5_163f0
  %v4_163fc = mul nuw i32 %v4_163f4, 16777216
  %v5_163fc = or i32 %v5_163f8, %v4_163fc
  store i32 %v5_163fc, i32* %r3.global-to-local, align 4
  %v1_16400 = load i32, i32* %r7.global-to-local, align 4
  %v2_16400 = add i32 %v1_16400, 84
  %v3_16400 = inttoptr i32 %v2_16400 to i32*
  store i32 %v5_163fc, i32* %v3_16400, align 4
  ret i32 %v4_16304

; uselistorder directives
  uselistorder i32 %v4_16304, { 1, 0 }
  uselistorder i32 %v0_162f8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_16288, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_16238, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_16158, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 10, 1, 11, 3, 12, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 6, 4, 1, 7, 2, 8, 3, 9, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 10, 11, 12, 5 }
  uselistorder i32 22, { 11, 1, 17, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 15, 16, 9, 10, 18 }
  uselistorder i32 21, { 9, 4, 2, 10, 5, 11, 6, 12, 7, 13, 14, 15, 8, 0, 1, 16, 3, 17 }
  uselistorder i32 19, { 8, 14, 15, 16, 4, 9, 1, 5, 10, 6, 11, 7, 12, 0, 13, 17, 2, 18, 3, 19 }
  uselistorder i32 18, { 12, 17, 18, 19, 2, 0, 3, 13, 4, 14, 5, 15, 11, 6, 1, 16, 20, 7, 21, 8, 22, 9, 23, 10, 24 }
  uselistorder i32 17, { 12, 16, 0, 4, 33, 34, 5, 35, 36, 6, 1, 13, 14, 15, 7, 17, 8, 18, 9, 19, 10, 20, 11, 21, 22, 2, 23, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 6, { 43, 51, 15, 16, 94, 17, 2, 18, 44, 0, 45, 19, 46, 50, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 5, 36, 52, 53, 54, 6, 55, 56, 57, 58, 7, 59, 60, 61, 62, 8, 63, 9, 10, 64, 65, 66, 37, 67, 11, 68, 69, 70, 38, 71, 12, 72, 73, 74, 39, 75, 76, 77, 40, 78, 79, 80, 81, 82, 41, 83, 13, 84, 85, 86, 87, 88, 89, 42, 90, 14, 91, 1, 92, 47, 48, 49, 93 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_1640c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1640c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1640c = load i32, i32* @r4, align 4
  store i32 %v3_1640c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_16424 = inttoptr i32 %arg2 to i8*
  %v3_16424 = call i32 @function_148c0(i8* %v2_16424, i32 0)
  store i32 %v3_16424, i32* %r0.global-to-local, align 4
  %v0_16428 = load i32, i32* %r5.global-to-local, align 4
  %v1_16428 = inttoptr i32 %v0_16428 to i32*
  %v2_16428 = load i32, i32* %v1_16428, align 4
  store i32 %v2_16428, i32* %r3.global-to-local, align 4
  %v1_1642c = add i32 %v0_16428, 4
  %v2_1642c = inttoptr i32 %v1_1642c to i32*
  %v3_1642c = load i32, i32* %v2_1642c, align 4
  store i32 %v3_1642c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_16434 = load i32, i32* %r6.global-to-local, align 4
  %v1_16434 = inttoptr i32 %v0_16434 to i32*
  store i32 %v2_16428, i32* %v1_16434, align 4
  %v3_16434 = add i32 %v0_16434, 4
  %v4_16434 = inttoptr i32 %v3_16434 to i32*
  %v5_16434 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16434, i32* %v4_16434, align 4
  %v0_16438 = load i32, i32* %r2.global-to-local, align 4
  %v1_16438 = load i32, i32* %r6.global-to-local, align 4
  %v2_16438 = add i32 %v1_16438, 12
  %v3_16438 = inttoptr i32 %v2_16438 to i32*
  store i32 %v0_16438, i32* %v3_16438, align 4
  %v0_1643c = load i32, i32* %r5.global-to-local, align 4
  %v1_1643c = add i32 %v0_1643c, 9
  %v2_1643c = inttoptr i32 %v1_1643c to i8*
  %v3_1643c = load i8, i8* %v2_1643c, align 1
  %v4_1643c = zext i8 %v3_1643c to i32
  store i32 %v4_1643c, i32* %r2.global-to-local, align 4
  %v1_16440 = add i32 %v0_1643c, 8
  %v2_16440 = inttoptr i32 %v1_16440 to i8*
  %v3_16440 = load i8, i8* %v2_16440, align 1
  %v4_16440 = zext i8 %v3_16440 to i32
  %v4_16444 = mul nuw nsw i32 %v4_1643c, 256
  %v5_16444 = or i32 %v4_16440, %v4_16444
  store i32 %v5_16444, i32* %r3.global-to-local, align 4
  %v1_16448 = load i32, i32* %r6.global-to-local, align 4
  %v2_16448 = add i32 %v1_16448, 16
  %v3_16448 = inttoptr i32 %v2_16448 to i32*
  store i32 %v5_16444, i32* %v3_16448, align 4
  %v0_1644c = load i32, i32* %r5.global-to-local, align 4
  %v1_1644c = add i32 %v0_1644c, 11
  %v2_1644c = inttoptr i32 %v1_1644c to i8*
  %v3_1644c = load i8, i8* %v2_1644c, align 1
  %v4_1644c = zext i8 %v3_1644c to i32
  store i32 %v4_1644c, i32* %r2.global-to-local, align 4
  %v1_16450 = add i32 %v0_1644c, 10
  %v2_16450 = inttoptr i32 %v1_16450 to i8*
  %v3_16450 = load i8, i8* %v2_16450, align 1
  %v4_16450 = zext i8 %v3_16450 to i32
  %v4_16454 = mul nuw nsw i32 %v4_1644c, 256
  %v5_16454 = or i32 %v4_16450, %v4_16454
  store i32 %v5_16454, i32* %r3.global-to-local, align 4
  %v1_16458 = load i32, i32* %r6.global-to-local, align 4
  %v2_16458 = add i32 %v1_16458, 20
  %v3_16458 = inttoptr i32 %v2_16458 to i32*
  store i32 %v5_16454, i32* %v3_16458, align 4
  %v0_1645c = load i32, i32* %r5.global-to-local, align 4
  %v1_1645c = add i32 %v0_1645c, 13
  %v2_1645c = inttoptr i32 %v1_1645c to i8*
  %v3_1645c = load i8, i8* %v2_1645c, align 1
  %v4_1645c = zext i8 %v3_1645c to i32
  store i32 %v4_1645c, i32* %r2.global-to-local, align 4
  %v1_16460 = add i32 %v0_1645c, 12
  %v2_16460 = inttoptr i32 %v1_16460 to i8*
  %v3_16460 = load i8, i8* %v2_16460, align 1
  %v4_16460 = zext i8 %v3_16460 to i32
  %v4_16464 = mul nuw nsw i32 %v4_1645c, 256
  %v5_16464 = or i32 %v4_16460, %v4_16464
  store i32 %v5_16464, i32* %r3.global-to-local, align 4
  %v1_16468 = load i32, i32* %r6.global-to-local, align 4
  %v2_16468 = add i32 %v1_16468, 24
  %v3_16468 = inttoptr i32 %v2_16468 to i32*
  store i32 %v5_16464, i32* %v3_16468, align 4
  %v0_1646c = load i32, i32* %r5.global-to-local, align 4
  %v1_1646c = add i32 %v0_1646c, 20
  %v2_1646c = inttoptr i32 %v1_1646c to i32*
  %v3_1646c = load i32, i32* %v2_1646c, align 4
  store i32 %v3_1646c, i32* %r3.global-to-local, align 4
  %v1_16470 = add i32 %v0_1646c, 14
  %v2_16470 = inttoptr i32 %v1_16470 to i8*
  %v3_16470 = load i8, i8* %v2_16470, align 1
  %v4_16470 = zext i8 %v3_16470 to i32
  store i32 %v4_16470, i32* %r0.global-to-local, align 4
  %v1_16474 = add i32 %v0_1646c, 15
  %v2_16474 = inttoptr i32 %v1_16474 to i8*
  %v3_16474 = load i8, i8* %v2_16474, align 1
  %v4_16474 = zext i8 %v3_16474 to i32
  store i32 %v4_16474, i32* %ip.global-to-local, align 4
  %v1_16478 = add i32 %v0_1646c, 16
  %v2_16478 = inttoptr i32 %v1_16478 to i32*
  %v3_16478 = load i32, i32* %v2_16478, align 4
  store i32 %v3_16478, i32* %r1.global-to-local, align 4
  %v1_1647c = load i32, i32* %r6.global-to-local, align 4
  %v2_1647c = add i32 %v1_1647c, 44
  %v3_1647c = inttoptr i32 %v2_1647c to i32*
  store i32 %v3_1646c, i32* %v3_1647c, align 4
  %v0_16480 = load i32, i32* %r5.global-to-local, align 4
  %v1_16480 = add i32 %v0_16480, 24
  %v2_16480 = inttoptr i32 %v1_16480 to i32*
  %v3_16480 = load i32, i32* %v2_16480, align 4
  store i32 %v3_16480, i32* %r3.global-to-local, align 4
  %v1_16484 = load i32, i32* %r6.global-to-local, align 4
  %v2_16484 = add i32 %v1_16484, 48
  %v3_16484 = inttoptr i32 %v2_16484 to i32*
  store i32 %v3_16480, i32* %v3_16484, align 4
  %v0_16488 = load i32, i32* %r5.global-to-local, align 4
  %v1_16488 = add i32 %v0_16488, 28
  %v2_16488 = inttoptr i32 %v1_16488 to i32*
  %v3_16488 = load i32, i32* %v2_16488, align 4
  store i32 %v3_16488, i32* %r3.global-to-local, align 4
  %v1_1648c = load i32, i32* %r6.global-to-local, align 4
  %v2_1648c = add i32 %v1_1648c, 52
  %v3_1648c = inttoptr i32 %v2_1648c to i32*
  store i32 %v3_16488, i32* %v3_1648c, align 4
  %v0_16490 = load i32, i32* %r5.global-to-local, align 4
  %v1_16490 = add i32 %v0_16490, 32
  %v2_16490 = inttoptr i32 %v1_16490 to i32*
  %v3_16490 = load i32, i32* %v2_16490, align 4
  store i32 %v3_16490, i32* %r3.global-to-local, align 4
  %v1_16494 = load i32, i32* %r6.global-to-local, align 4
  %v2_16494 = add i32 %v1_16494, 56
  %v3_16494 = inttoptr i32 %v2_16494 to i32*
  store i32 %v3_16490, i32* %v3_16494, align 4
  %v0_16498 = load i32, i32* %r5.global-to-local, align 4
  %v1_16498 = add i32 %v0_16498, 40
  %v2_16498 = inttoptr i32 %v1_16498 to i32*
  %v3_16498 = load i32, i32* %v2_16498, align 4
  store i32 %v3_16498, i32* %r3.global-to-local, align 4
  %v1_1649c = load i32, i32* %r6.global-to-local, align 4
  %v2_1649c = add i32 %v1_1649c, 64
  %v3_1649c = inttoptr i32 %v2_1649c to i32*
  store i32 %v3_16498, i32* %v3_1649c, align 4
  %v0_164a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_164a0 = add i32 %v0_164a0, 48
  %v2_164a0 = inttoptr i32 %v1_164a0 to i32*
  %v3_164a0 = load i32, i32* %v2_164a0, align 4
  store i32 %v3_164a0, i32* %r3.global-to-local, align 4
  %v1_164a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_164a4 = add i32 %v1_164a4, 72
  %v3_164a4 = inttoptr i32 %v2_164a4 to i32*
  store i32 %v3_164a0, i32* %v3_164a4, align 4
  %v0_164a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_164a8 = add i32 %v0_164a8, 36
  %v2_164a8 = inttoptr i32 %v1_164a8 to i32*
  %v3_164a8 = load i32, i32* %v2_164a8, align 4
  store i32 %v3_164a8, i32* %r3.global-to-local, align 4
  %v1_164ac = load i32, i32* %r6.global-to-local, align 4
  %v2_164ac = add i32 %v1_164ac, 60
  %v3_164ac = inttoptr i32 %v2_164ac to i32*
  store i32 %v3_164a8, i32* %v3_164ac, align 4
  %v0_164b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_164b0 = add i32 %v0_164b0, 44
  %v2_164b0 = inttoptr i32 %v1_164b0 to i32*
  %v3_164b0 = load i32, i32* %v2_164b0, align 4
  store i32 %v3_164b0, i32* %r3.global-to-local, align 4
  %v0_164b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_164b4 = load i32, i32* %ip.global-to-local, align 4
  %v4_164b4 = mul i32 %v1_164b4, 256
  %v5_164b4 = or i32 %v4_164b4, %v0_164b4
  store i32 %v5_164b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_164bc = load i32, i32* %r6.global-to-local, align 4
  %v2_164bc = add i32 %v1_164bc, 28
  %v3_164bc = inttoptr i32 %v2_164bc to i32*
  store i32 %v5_164b4, i32* %v3_164bc, align 4
  %v0_164c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_164c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_164c0 = add i32 %v1_164c0, 32
  %v3_164c0 = inttoptr i32 %v2_164c0 to i32*
  store i32 %v0_164c0, i32* %v3_164c0, align 4
  %v0_164c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_164c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_164c4 = add i32 %v1_164c4, 36
  %v3_164c4 = inttoptr i32 %v2_164c4 to i32*
  store i32 %v0_164c4, i32* %v3_164c4, align 4
  %v0_164c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_164c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_164c8 = add i32 %v1_164c8, 68
  %v3_164c8 = inttoptr i32 %v2_164c8 to i32*
  store i32 %v0_164c8, i32* %v3_164c8, align 4
  %v0_164cc = load i32, i32* %r5.global-to-local, align 4
  %v1_164cc = add i32 %v0_164cc, 52
  %v2_164cc = inttoptr i32 %v1_164cc to i32*
  %v3_164cc = load i32, i32* %v2_164cc, align 4
  store i32 %v3_164cc, i32* %r3.global-to-local, align 4
  %v1_164d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_164d0 = add i32 %v1_164d0, 76
  %v3_164d0 = inttoptr i32 %v2_164d0 to i32*
  store i32 %v3_164cc, i32* %v3_164d0, align 4
  %v2_164d4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_164d4, i32* %r4.global-to-local, align 4
  ret i32 %v5_164b4

; uselistorder directives
  uselistorder i32 %v0_1646c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 17, 13, 14, 0, 8, 50, 9, 15, 10, 16, 18, 19, 11, 20, 21, 22, 1, 23, 24, 25, 2, 26, 27, 28, 12, 29, 30, 31, 3, 32, 33, 34, 4, 35, 36, 37, 5, 38, 39, 40, 41, 42, 6, 43, 44, 45, 46, 47, 7, 48, 49 }
  uselistorder i32 56, { 5, 2, 3, 4, 6, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 15, 13, 12, 3, 0, 14, 4, 5, 6, 7, 8, 9, 10, 16, 17, 11, 18, 19, 20, 21, 1, 22, 23, 24, 25, 2, 26 }
  uselistorder i32 14, { 10, 9, 22, 8, 2, 3, 4, 5, 6, 11, 12, 7, 13, 14, 15, 16, 0, 17, 18, 19, 20, 1, 21 }
  uselistorder i32 13, { 18, 13, 12, 5, 2, 14, 15, 16, 17, 0, 1, 6, 7, 8, 9, 19, 20, 21, 22, 23, 10, 24, 25, 26, 27, 28, 29, 30, 31, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 3, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 4, 60, 61 }
  uselistorder i32 9, { 53, 54, 55, 11, 5, 72, 6, 7, 43, 38, 13, 42, 14, 41, 12, 3, 44, 39, 45, 2, 40, 15, 46, 47, 8, 16, 48, 49, 17, 18, 19, 50, 20, 51, 21, 52, 0, 22, 23, 24, 25, 1, 26, 28, 27, 68, 56, 57, 9, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 4, 71, 29, 30, 31, 32, 33, 34, 35, 36, 37, 73, 74, 10, 75 }
  uselistorder i32 (i8*, i32)* @function_148c0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_164d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_164d8:
  ret i32 %arg1
}

define i32 @function_164e0() local_unnamed_addr {
dec_label_pc_164e0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_164e0 = load i32, i32* @r1, align 4
  %v1_164e0 = load i32, i32* @r0, align 4
  %v2_164e0 = sub i32 %v0_164e0, %v1_164e0
  %v3_164e0 = icmp ult i32 %v0_164e0, %v1_164e0
  %v4_164e0 = xor i32 %v1_164e0, %v0_164e0
  %v5_164e0 = xor i32 %v2_164e0, %v0_164e0
  %v6_164e0 = and i32 %v5_164e0, %v4_164e0
  %v7_164e0 = icmp slt i32 %v6_164e0, 0
  store i1 %v7_164e0, i1* %cpsr_v.global-to-local, align 1
  %v8_164e0 = icmp slt i32 %v2_164e0, 0
  store i1 %v8_164e0, i1* %cpsr_n.global-to-local, align 1
  %v9_164e0 = icmp eq i32 %v0_164e0, %v1_164e0
  store i1 %v9_164e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_164e0, label %dec_label_pc_1672c, label %dec_label_pc_164e8

dec_label_pc_164e8:                               ; preds = %dec_label_pc_164e0
  br i1 %v9_164e0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_164e8
  %merge = phi i32 [ %v0_164e0, %dec_label_pc_164e8 ], [ %v2_167c0, %bb141 ], [ %v11_167dc, %bb144 ], [ %v7_167dc, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_164e8
  store i32 %v1_164e0, i32* %stack_var_-8, align 4
  %v0_164f0 = load i32, i32* @r2, align 4
  %v2_164f0 = add i32 %v0_164f0, -4
  store i32 %v2_164f0, i32* %r2.global-to-local, align 4
  %v4_164f0 = sub i32 3, %v0_164f0
  %v5_164f0 = and i32 %v4_164f0, %v0_164f0
  %v6_164f0 = icmp slt i32 %v5_164f0, 0
  store i1 %v6_164f0, i1* %cpsr_v.global-to-local, align 1
  %v7_164f0 = icmp slt i32 %v2_164f0, 0
  store i1 %v7_164f0, i1* %cpsr_n.global-to-local, align 1
  %v8_164f0 = icmp eq i32 %v0_164f0, 4
  store i1 %v8_164f0, i1* %cpsr_z.global-to-local, align 1
  %v5_164f4 = icmp slt i32 %v0_164f0, 4
  br i1 %v5_164f4, label %bb131, label %dec_label_pc_164f8

dec_label_pc_164f8:                               ; preds = %bb
  %v1_164f8 = urem i32 %v1_164e0, 4
  store i32 %v1_164f8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_164f8 = icmp eq i32 %v1_164f8, 0
  store i1 %v2_164f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_164f8, label %dec_label_pc_16500, label %dec_label_pc_165a4

dec_label_pc_16500:                               ; preds = %dec_label_pc_164f8
  %v1_16500 = urem i32 %v0_164e0, 4
  store i32 %v1_16500, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16500 = icmp eq i32 %v1_16500, 0
  store i1 %v2_16500, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_164e0 to i2
  br i1 %v2_16500, label %dec_label_pc_16508, label %dec_label_pc_165d4

dec_label_pc_16508:                               ; preds = %dec_label_pc_16500, %dec_label_pc_165cc
  %v0_1652092 = phi i32 [ %v1_164e0, %dec_label_pc_16500 ], [ %v0_1661c75, %dec_label_pc_165cc ]
  %v0_1651c91 = phi i32 [ %v0_164e0, %dec_label_pc_16500 ], [ %v0_165cc, %dec_label_pc_165cc ]
  %v0_16508 = phi i32 [ %v2_164f0, %dec_label_pc_16500 ], [ %v2_165c4, %dec_label_pc_165cc ]
  %v2_16508 = add i32 %v0_16508, -8
  store i32 %v2_16508, i32* %r2.global-to-local, align 4
  %v4_16508 = sub i32 7, %v0_16508
  %v5_16508 = and i32 %v4_16508, %v0_16508
  %v6_16508 = icmp slt i32 %v5_16508, 0
  store i1 %v6_16508, i1* %cpsr_v.global-to-local, align 1
  %v7_16508 = icmp slt i32 %v2_16508, 0
  store i1 %v7_16508, i1* %cpsr_n.global-to-local, align 1
  %v8_16508 = icmp eq i32 %v0_16508, 8
  store i1 %v8_16508, i1* %cpsr_z.global-to-local, align 1
  %v5_1650c = icmp slt i32 %v0_16508, 8
  br i1 %v5_1650c, label %dec_label_pc_1655c, label %dec_label_pc_16510

dec_label_pc_16510:                               ; preds = %dec_label_pc_16508
  %v2_16510 = add i32 %v0_16508, -28
  store i32 %v2_16510, i32* %r2.global-to-local, align 4
  %v4_16510 = sub i32 27, %v0_16508
  %v5_16510 = and i32 %v4_16510, %v2_16508
  %v6_16510 = icmp slt i32 %v5_16510, 0
  store i1 %v6_16510, i1* %cpsr_v.global-to-local, align 1
  %v7_16510 = icmp slt i32 %v2_16510, 0
  store i1 %v7_16510, i1* %cpsr_n.global-to-local, align 1
  %v8_16510 = icmp eq i32 %v2_16508, 20
  store i1 %v8_16510, i1* %cpsr_z.global-to-local, align 1
  %v5_16514 = icmp slt i32 %v2_16508, 20
  br i1 %v5_16514, label %dec_label_pc_16548, label %dec_label_pc_16518

dec_label_pc_16518:                               ; preds = %dec_label_pc_16510
  %v0_16518 = load i32, i32* @r4, align 4
  store i32 %v0_16518, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1651c

dec_label_pc_1651c:                               ; preds = %dec_label_pc_1651c.dec_label_pc_1651c_crit_edge, %dec_label_pc_16518
  %v0_16520 = phi i32 [ %v12_16528, %dec_label_pc_1651c.dec_label_pc_1651c_crit_edge ], [ %v0_1652092, %dec_label_pc_16518 ]
  %v0_1651c = phi i32 [ %v0_1651c.pre, %dec_label_pc_1651c.dec_label_pc_1651c_crit_edge ], [ %v0_1651c91, %dec_label_pc_16518 ]
  %v1_1651c = inttoptr i32 %v0_1651c to i32*
  %v2_1651c = load i32, i32* %v1_1651c, align 4
  store i32 %v2_1651c, i32* %r3.global-to-local, align 4
  %v3_1651c = add i32 %v0_1651c, 4
  %v4_1651c = inttoptr i32 %v3_1651c to i32*
  %v5_1651c = load i32, i32* %v4_1651c, align 4
  store i32 %v5_1651c, i32* %r4.global-to-local, align 4
  %v6_1651c = add i32 %v0_1651c, 8
  %v7_1651c = inttoptr i32 %v6_1651c to i32*
  %v8_1651c = load i32, i32* %v7_1651c, align 4
  store i32 %v8_1651c, i32* %ip.global-to-local, align 4
  %v9_1651c = add i32 %v0_1651c, 12
  %v10_1651c = inttoptr i32 %v9_1651c to i32*
  %v11_1651c = load i32, i32* %v10_1651c, align 4
  store i32 %v11_1651c, i32* %lr.global-to-local, align 4
  %v12_1651c = add i32 %v0_1651c, 16
  store i32 %v12_1651c, i32* %r1.global-to-local, align 4
  %v1_16520 = inttoptr i32 %v0_16520 to i32*
  store i32 %v2_1651c, i32* %v1_16520, align 4
  %v3_16520 = add i32 %v0_16520, 4
  %v4_16520 = inttoptr i32 %v3_16520 to i32*
  %v5_16520 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16520, i32* %v4_16520, align 4
  %v6_16520 = add i32 %v0_16520, 8
  %v7_16520 = inttoptr i32 %v6_16520 to i32*
  %v8_16520 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16520, i32* %v7_16520, align 4
  %v9_16520 = add i32 %v0_16520, 12
  %v10_16520 = inttoptr i32 %v9_16520 to i32*
  %v11_16520 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16520, i32* %v10_16520, align 4
  %v12_16520 = add i32 %v0_16520, 16
  store i32 %v12_16520, i32* %r0.global-to-local, align 4
  %v0_16524 = load i32, i32* %r1.global-to-local, align 4
  %v1_16524 = inttoptr i32 %v0_16524 to i32*
  %v2_16524 = load i32, i32* %v1_16524, align 4
  store i32 %v2_16524, i32* %r3.global-to-local, align 4
  %v3_16524 = add i32 %v0_16524, 4
  %v4_16524 = inttoptr i32 %v3_16524 to i32*
  %v5_16524 = load i32, i32* %v4_16524, align 4
  store i32 %v5_16524, i32* %r4.global-to-local, align 4
  %v6_16524 = add i32 %v0_16524, 8
  %v7_16524 = inttoptr i32 %v6_16524 to i32*
  %v8_16524 = load i32, i32* %v7_16524, align 4
  store i32 %v8_16524, i32* @ip, align 4
  %v9_16524 = add i32 %v0_16524, 12
  %v10_16524 = inttoptr i32 %v9_16524 to i32*
  %v11_16524 = load i32, i32* %v10_16524, align 4
  store i32 %v11_16524, i32* @lr, align 4
  %v12_16524 = add i32 %v0_16524, 16
  store i32 %v12_16524, i32* @r1, align 4
  %v1_16528 = inttoptr i32 %v12_16520 to i32*
  store i32 %v2_16524, i32* %v1_16528, align 4
  %v3_16528 = add i32 %v0_16520, 20
  %v4_16528 = inttoptr i32 %v3_16528 to i32*
  %v5_16528 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16528, i32* %v4_16528, align 4
  %v6_16528 = add i32 %v0_16520, 24
  %v7_16528 = inttoptr i32 %v6_16528 to i32*
  %v8_16528 = load i32, i32* @ip, align 4
  store i32 %v8_16528, i32* %v7_16528, align 4
  %v9_16528 = add i32 %v0_16520, 28
  %v10_16528 = inttoptr i32 %v9_16528 to i32*
  %v11_16528 = load i32, i32* @lr, align 4
  store i32 %v11_16528, i32* %v10_16528, align 4
  %v12_16528 = add i32 %v0_16520, 32
  store i32 %v12_16528, i32* @r0, align 4
  %v0_1652c = load i32, i32* %r2.global-to-local, align 4
  %v2_1652c = add i32 %v0_1652c, -32
  store i32 %v2_1652c, i32* %r2.global-to-local, align 4
  %v6_16530 = icmp slt i32 %v0_1652c, 32
  br i1 %v6_16530, label %dec_label_pc_16534, label %dec_label_pc_1651c.dec_label_pc_1651c_crit_edge

dec_label_pc_1651c.dec_label_pc_1651c_crit_edge:  ; preds = %dec_label_pc_1651c
  %v0_1651c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1651c

dec_label_pc_16534:                               ; preds = %dec_label_pc_1651c
  %v4_16534 = add i32 %v0_1652c, -16
  %v6_16534 = add i32 %v0_1652c, 2147483616
  %v7_16534 = and i32 %v4_16534, %v6_16534
  %v8_16534 = icmp slt i32 %v7_16534, 0
  store i1 %v8_16534, i1* %cpsr_v.global-to-local, align 1
  %v9_16534 = icmp slt i32 %v4_16534, 0
  store i1 %v9_16534, i1* %cpsr_n.global-to-local, align 1
  %v10_16534 = icmp eq i32 %v4_16534, 0
  store i1 %v10_16534, i1* %cpsr_z.global-to-local, align 1
  %v5_16538 = icmp slt i32 %v2_1652c, -16
  br i1 %v5_16538, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_16534
  %v6_16538 = load i32, i32* @r1, align 4
  %v7_16538 = inttoptr i32 %v6_16538 to i32*
  %v8_16538 = load i32, i32* %v7_16538, align 4
  store i32 %v8_16538, i32* %r3.global-to-local, align 4
  %v9_16538 = add i32 %v6_16538, 4
  %v10_16538 = inttoptr i32 %v9_16538 to i32*
  %v11_16538 = load i32, i32* %v10_16538, align 4
  store i32 %v11_16538, i32* %r4.global-to-local, align 4
  %v12_16538 = add i32 %v6_16538, 8
  %v13_16538 = inttoptr i32 %v12_16538 to i32*
  %v14_16538 = load i32, i32* %v13_16538, align 4
  store i32 %v14_16538, i32* @ip, align 4
  %v15_16538 = add i32 %v6_16538, 12
  %v16_16538 = inttoptr i32 %v15_16538 to i32*
  %v17_16538 = load i32, i32* %v16_16538, align 4
  store i32 %v17_16538, i32* @lr, align 4
  %v18_16538 = add i32 %v6_16538, 16
  store i32 %v18_16538, i32* @r1, align 4
  %v7_1653c = inttoptr i32 %v12_16528 to i32*
  store i32 %v8_16538, i32* %v7_1653c, align 4
  %v9_1653c = add i32 %v0_16520, 36
  %v10_1653c = inttoptr i32 %v9_1653c to i32*
  %v11_1653c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1653c, i32* %v10_1653c, align 4
  %v12_1653c = add i32 %v0_16520, 40
  %v13_1653c = inttoptr i32 %v12_1653c to i32*
  %v14_1653c = load i32, i32* @ip, align 4
  store i32 %v14_1653c, i32* %v13_1653c, align 4
  %v15_1653c = add i32 %v0_16520, 44
  %v16_1653c = inttoptr i32 %v15_1653c to i32*
  %v17_1653c = load i32, i32* @lr, align 4
  store i32 %v17_1653c, i32* %v16_1653c, align 4
  %v18_1653c = add i32 %v0_16520, 48
  store i32 %v18_1653c, i32* @r0, align 4
  %v6_16540 = load i32, i32* %r2.global-to-local, align 4
  %v7_16540 = add i32 %v6_16540, -16
  store i32 %v7_16540, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_16534, %bb128
  %v3_16550101 = phi i32 [ %v12_16528, %dec_label_pc_16534 ], [ %v18_1653c, %bb128 ]
  %v0_1654895 = phi i32 [ %v2_1652c, %dec_label_pc_16534 ], [ %v7_16540, %bb128 ]
  %v2_16544 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16544, i32* @r4, align 4
  br label %dec_label_pc_16548

dec_label_pc_16548:                               ; preds = %dec_label_pc_16510, %.thread1
  %v3_16550100 = phi i32 [ %v0_1652092, %dec_label_pc_16510 ], [ %v3_16550101, %.thread1 ]
  %v0_16548 = phi i32 [ %v2_16510, %dec_label_pc_16510 ], [ %v0_1654895, %.thread1 ]
  %v1_16548 = add i32 %v0_16548, 20
  store i32 %v1_16548, i32* %r2.global-to-local, align 4
  %v3_16548 = sub i32 0, %v0_16548
  %v4_16548 = and i32 %v1_16548, %v3_16548
  %v5_16548 = icmp slt i32 %v4_16548, 0
  store i1 %v5_16548, i1* %cpsr_v.global-to-local, align 1
  %v6_16548 = icmp slt i32 %v1_16548, 0
  store i1 %v6_16548, i1* %cpsr_n.global-to-local, align 1
  %v7_16548 = icmp eq i32 %v1_16548, 0
  store i1 %v7_16548, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1654c

dec_label_pc_1654c:                               ; preds = %.thread117, %dec_label_pc_16548
  %v0_1655c.pre147 = phi i32 [ %v0_1655c.pre, %.thread117 ], [ %v1_16548, %dec_label_pc_16548 ]
  %v3_16550 = phi i32 [ %v3_1655098118, %.thread117 ], [ %v3_16550100, %dec_label_pc_16548 ]
  %v1_16554 = phi i1 [ %v1_16558, %.thread117 ], [ %v5_16548, %dec_label_pc_16548 ]
  %v0_16554 = phi i1 [ %v0_16558, %.thread117 ], [ %v6_16548, %dec_label_pc_16548 ]
  %v2_1654c = xor i1 %v1_16554, %v0_16554
  br i1 %v2_1654c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1654c
  %v3_1654c = load i32, i32* @r1, align 4
  %v4_1654c = inttoptr i32 %v3_1654c to i32*
  %v5_1654c = load i32, i32* %v4_1654c, align 4
  store i32 %v5_1654c, i32* %r3.global-to-local, align 4
  %v6_1654c = add i32 %v3_1654c, 4
  %v7_1654c = inttoptr i32 %v6_1654c to i32*
  %v8_1654c = load i32, i32* %v7_1654c, align 4
  store i32 %v8_1654c, i32* @ip, align 4
  %v9_1654c = add i32 %v3_1654c, 8
  %v10_1654c = inttoptr i32 %v9_1654c to i32*
  %v11_1654c = load i32, i32* %v10_1654c, align 4
  store i32 %v11_1654c, i32* @lr, align 4
  %v12_1654c = add i32 %v3_1654c, 12
  store i32 %v12_1654c, i32* @r1, align 4
  %v4_16550 = inttoptr i32 %v3_16550 to i32*
  store i32 %v5_1654c, i32* %v4_16550, align 4
  %v6_16550 = add i32 %v3_16550, 4
  %v7_16550 = inttoptr i32 %v6_16550 to i32*
  %v8_16550 = load i32, i32* @ip, align 4
  store i32 %v8_16550, i32* %v7_16550, align 4
  %v9_16550 = add i32 %v3_16550, 8
  %v10_16550 = inttoptr i32 %v9_16550 to i32*
  %v11_16550 = load i32, i32* @lr, align 4
  store i32 %v11_16550, i32* %v10_16550, align 4
  %v12_16550 = add i32 %v3_16550, 12
  store i32 %v12_16550, i32* @r0, align 4
  %v3_16554 = load i32, i32* %r2.global-to-local, align 4
  %v4_16554 = add i32 %v3_16554, -12
  store i32 %v4_16554, i32* %r2.global-to-local, align 4
  %v6_16554 = sub i32 11, %v3_16554
  %v7_16554 = and i32 %v6_16554, %v3_16554
  %v8_16554 = icmp slt i32 %v7_16554, 0
  store i1 %v8_16554, i1* %cpsr_v.global-to-local, align 1
  %v9_16554 = icmp slt i32 %v4_16554, 0
  store i1 %v9_16554, i1* %cpsr_n.global-to-local, align 1
  %v10_16554 = icmp eq i32 %v3_16554, 12
  store i1 %v10_16554, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1654c, %bb129
  %v0_1655c.pre = phi i32 [ %v4_16554, %bb129 ], [ %v0_1655c.pre147, %dec_label_pc_1654c ]
  %v3_1655098118 = phi i32 [ %v12_16550, %bb129 ], [ %v3_16550, %dec_label_pc_1654c ]
  %v1_16558 = phi i1 [ %v8_16554, %bb129 ], [ %v1_16554, %dec_label_pc_1654c ]
  %v0_16558 = phi i1 [ %v9_16554, %bb129 ], [ %v0_16554, %dec_label_pc_1654c ]
  %v2_16558 = xor i1 %v1_16558, %v0_16558
  br i1 %v2_16558, label %dec_label_pc_1655c, label %dec_label_pc_1654c

dec_label_pc_1655c:                               ; preds = %.thread117, %dec_label_pc_16508
  %v7_1656c = phi i32 [ %v0_1652092, %dec_label_pc_16508 ], [ %v3_1655098118, %.thread117 ]
  %v0_1655c = phi i32 [ %v2_16508, %dec_label_pc_16508 ], [ %v0_1655c.pre, %.thread117 ]
  %v2_1655c = add i32 %v0_1655c, 8
  store i32 %v2_1655c, i32* %r2.global-to-local, align 4
  %v4_1655c = sub i32 0, %v0_1655c
  %v5_1655c = and i32 %v2_1655c, %v4_1655c
  %v6_1655c = icmp slt i32 %v5_1655c, 0
  store i1 %v6_1655c, i1* %cpsr_v.global-to-local, align 1
  %v7_1655c = icmp slt i32 %v2_1655c, 0
  store i1 %v7_1655c, i1* %cpsr_n.global-to-local, align 1
  %v8_1655c = icmp eq i32 %v2_1655c, 0
  store i1 %v8_1655c, i1* %cpsr_z.global-to-local, align 1
  %v5_16560 = icmp slt i32 %v0_1655c, -8
  br i1 %v5_16560, label %bb131, label %dec_label_pc_16564

dec_label_pc_16564:                               ; preds = %dec_label_pc_1655c
  %v6_16564 = add i32 %v0_1655c, 4
  store i32 %v6_16564, i32* %r2.global-to-local, align 4
  %v8_16564 = sub i32 -5, %v0_1655c
  %v9_16564 = and i32 %v8_16564, %v2_1655c
  %v10_16564 = icmp slt i32 %v9_16564, 0
  store i1 %v10_16564, i1* %cpsr_v.global-to-local, align 1
  %v11_16564 = icmp slt i32 %v6_16564, 0
  store i1 %v11_16564, i1* %cpsr_n.global-to-local, align 1
  %v12_16564 = icmp eq i32 %v2_1655c, 4
  store i1 %v12_16564, i1* %cpsr_z.global-to-local, align 1
  %v5_16568 = icmp slt i32 %v2_1655c, 4
  %v6_16568 = load i32, i32* @r1, align 4
  %v7_16568 = inttoptr i32 %v6_16568 to i32*
  %v8_16568 = load i32, i32* %v7_16568, align 4
  store i32 %v8_16568, i32* %r3.global-to-local, align 4
  %v10_16568 = add i32 %v6_16568, 4
  br i1 %v5_16568, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_16564
  store i32 %v10_16568, i32* @r1, align 4
  %v8_1656c = inttoptr i32 %v7_1656c to i32*
  store i32 %v8_16568, i32* %v8_1656c, align 4
  %v9_1656c = load i32, i32* @r0, align 4
  %v10_1656c = add i32 %v9_1656c, 4
  store i32 %v10_1656c, i32* @r0, align 4
  %v0_1657c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_16564
  %v10_16570 = inttoptr i32 %v10_16568 to i32*
  %v11_16570 = load i32, i32* %v10_16570, align 4
  store i32 %v11_16570, i32* @ip, align 4
  %v12_16570 = add i32 %v6_16568, 8
  store i32 %v12_16570, i32* @r1, align 4
  %v7_16574 = inttoptr i32 %v7_1656c to i32*
  store i32 %v8_16568, i32* %v7_16574, align 4
  %v9_16574 = add i32 %v7_1656c, 4
  %v10_16574 = inttoptr i32 %v9_16574 to i32*
  %v11_16574 = load i32, i32* @ip, align 4
  store i32 %v11_16574, i32* %v10_16574, align 4
  %v12_16574 = add i32 %v7_1656c, 8
  store i32 %v12_16574, i32* @r0, align 4
  %v6_16578 = load i32, i32* %r2.global-to-local, align 4
  %v7_16578 = add i32 %v6_16578, -4
  store i32 %v7_16578, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1655c, %bb, %dec_label_pc_16724, %dec_label_pc_166b8, %dec_label_pc_1664c, %bb130
  %v2_1658c = phi i32 [ %v10_1656c, %.thread5 ], [ %v0_1661c75, %.thread11 ], [ %v7_1656c, %dec_label_pc_1655c ], [ %v1_164e0, %bb ], [ %v2_1658c113, %dec_label_pc_16724 ], [ %v2_1658c112, %dec_label_pc_166b8 ], [ %v2_1658c111, %dec_label_pc_1664c ], [ %v12_16574, %bb130 ]
  %v0_1657c = phi i32 [ %v0_1657c.pre, %.thread5 ], [ %v2_165c4, %.thread11 ], [ %v2_1655c, %dec_label_pc_1655c ], [ %v2_164f0, %bb ], [ %v0_1657c109, %dec_label_pc_16724 ], [ %v0_1657c108, %dec_label_pc_166b8 ], [ %v0_1657c107, %dec_label_pc_1664c ], [ %v7_16578, %bb130 ]
  %v1_1657c = add i32 %v0_1657c, 4
  store i32 %v1_1657c, i32* %r2.global-to-local, align 4
  %v3_1657c = sub i32 0, %v0_1657c
  %v4_1657c = and i32 %v1_1657c, %v3_1657c
  %v5_1657c = icmp slt i32 %v4_1657c, 0
  store i1 %v5_1657c, i1* %cpsr_v.global-to-local, align 1
  %v6_1657c = icmp slt i32 %v1_1657c, 0
  store i1 %v6_1657c, i1* %cpsr_n.global-to-local, align 1
  %v7_1657c = icmp eq i32 %v1_1657c, 0
  store i1 %v7_1657c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1657c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_16580 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_16580, i32* %r0.global-to-local, align 4
  ret i32 %v3_16580

bb133:                                            ; preds = %bb131
  %v1_16584 = add i32 %v0_1657c, 2
  %v3_16584 = sub i32 -3, %v0_1657c
  %v4_16584 = and i32 %v3_16584, %v1_1657c
  %v5_16584 = icmp slt i32 %v4_16584, 0
  store i1 %v5_16584, i1* %cpsr_v.global-to-local, align 1
  %v6_16584 = icmp slt i32 %v1_16584, 0
  store i1 %v6_16584, i1* %cpsr_n.global-to-local, align 1
  %v7_16584 = icmp eq i32 %v1_1657c, 2
  store i1 %v7_16584, i1* %cpsr_z.global-to-local, align 1
  %v0_16588 = load i32, i32* @r1, align 4
  %v1_16588 = inttoptr i32 %v0_16588 to i8*
  %v2_16588 = load i8, i8* %v1_16588, align 1
  %v3_16588 = zext i8 %v2_16588 to i32
  store i32 %v3_16588, i32* %r3.global-to-local, align 4
  %v5_16588 = add i32 %v0_16588, 1
  store i32 %v5_16588, i32* %r1.global-to-local, align 4
  %v3_1658c = inttoptr i32 %v2_1658c to i8*
  store i8 %v2_16588, i8* %v3_1658c, align 1
  %v4_1658c = load i32, i32* @r0, align 4
  %v5_1658c = add i32 %v4_1658c, 1
  store i32 %v5_1658c, i32* %r0.global-to-local, align 4
  %v0_16590 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16590 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16590 = xor i1 %v0_16590, %v1_16590
  br i1 %v2_16590, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_16590 = load i32, i32* %r1.global-to-local, align 4
  %v4_16590 = inttoptr i32 %v3_16590 to i8*
  %v5_16590 = load i8, i8* %v4_16590, align 1
  %v6_16590 = zext i8 %v5_16590 to i32
  store i32 %v6_16590, i32* %r3.global-to-local, align 4
  %v8_16590 = add i32 %v3_16590, 1
  store i32 %v8_16590, i32* %r1.global-to-local, align 4
  %v6_16594 = inttoptr i32 %v5_1658c to i8*
  store i8 %v5_16590, i8* %v6_16594, align 1
  %v7_16594 = load i32, i32* %r0.global-to-local, align 4
  %v8_16594 = add i32 %v7_16594, 1
  store i32 %v8_16594, i32* %r0.global-to-local, align 4
  %v1_16598.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16598.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1659c = phi i32 [ %v8_16594, %bb134 ], [ %v5_1658c, %bb133 ]
  %v2_1659c = phi i1 [ %v2_16598.pre, %bb134 ], [ %v1_16590, %bb133 ]
  %v1_1659c = phi i1 [ %v1_16598.pre, %bb134 ], [ %v0_16590, %bb133 ]
  %v0_16598 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16598 = xor i1 %v2_1659c, %v1_1659c
  %v4_16598 = or i1 %v0_16598, %v3_16598
  br i1 %v4_16598, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_16598 = load i32, i32* %r1.global-to-local, align 4
  %v6_16598 = inttoptr i32 %v5_16598 to i8*
  %v7_16598 = load i8, i8* %v6_16598, align 1
  %v8_16598 = zext i8 %v7_16598 to i32
  store i32 %v8_16598, i32* %r3.global-to-local, align 4
  %v10_16598 = add i32 %v5_16598, 1
  store i32 %v10_16598, i32* %r1.global-to-local, align 4
  %v8_1659c = inttoptr i32 %v7_1659c to i8*
  store i8 %v7_16598, i8* %v8_1659c, align 1
  %v9_1659c = load i32, i32* %r0.global-to-local, align 4
  %v10_1659c = add i32 %v9_1659c, 1
  store i32 %v10_1659c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_165a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_165a0, i32* %r0.global-to-local, align 4
  ret i32 %v2_165a0

dec_label_pc_165a4:                               ; preds = %dec_label_pc_164f8
  %v1_165a4 = sub nsw i32 4, %v1_164f8
  store i32 %v1_165a4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_165a8 = icmp ult i32 %v1_165a4, 2
  store i1 %v8_165a8, i1* %cpsr_n.global-to-local, align 1
  %v9_165a8 = icmp eq i32 %v1_165a4, 2
  store i1 %v9_165a8, i1* %cpsr_z.global-to-local, align 1
  %v1_165ac = inttoptr i32 %v0_164e0 to i8*
  %v2_165ac = load i8, i8* %v1_165ac, align 1
  %v3_165ac = zext i8 %v2_165ac to i32
  store i32 %v3_165ac, i32* %r3.global-to-local, align 4
  %v5_165ac = add i32 %v0_164e0, 1
  store i32 %v5_165ac, i32* @r1, align 4
  %v3_165b0 = inttoptr i32 %v1_164e0 to i8*
  store i8 %v2_165ac, i8* %v3_165b0, align 1
  %v4_165b0 = load i32, i32* @r0, align 4
  %v5_165b0 = add i32 %v4_165b0, 1
  store i32 %v5_165b0, i32* @r0, align 4
  br i1 %v8_165a8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_165a4
  %v6_165b4 = load i32, i32* @r1, align 4
  %v7_165b4 = inttoptr i32 %v6_165b4 to i8*
  %v8_165b4 = load i8, i8* %v7_165b4, align 1
  %v9_165b4 = zext i8 %v8_165b4 to i32
  store i32 %v9_165b4, i32* %r3.global-to-local, align 4
  %v11_165b4 = add i32 %v6_165b4, 1
  store i32 %v11_165b4, i32* @r1, align 4
  %v9_165b8 = inttoptr i32 %v5_165b0 to i8*
  store i8 %v8_165b4, i8* %v9_165b8, align 1
  %v10_165b8 = load i32, i32* @r0, align 4
  %v11_165b8 = add i32 %v10_165b8, 1
  store i32 %v11_165b8, i32* @r0, align 4
  br i1 %v9_165a8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_165bc = load i32, i32* @r1, align 4
  %v9_165bc = inttoptr i32 %v8_165bc to i8*
  %v10_165bc = load i8, i8* %v9_165bc, align 1
  %v11_165bc = zext i8 %v10_165bc to i32
  store i32 %v11_165bc, i32* %r3.global-to-local, align 4
  %v13_165bc = add i32 %v8_165bc, 1
  store i32 %v13_165bc, i32* @r1, align 4
  %v11_165c0 = inttoptr i32 %v11_165b8 to i8*
  store i8 %v10_165bc, i8* %v11_165c0, align 1
  %v12_165c0 = load i32, i32* @r0, align 4
  %v13_165c0 = add i32 %v12_165c0, 1
  store i32 %v13_165c0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_165a4, %bb137
  %v0_1661c75 = phi i32 [ %v11_165b8, %bb136 ], [ %v5_165b0, %dec_label_pc_165a4 ], [ %v13_165c0, %bb137 ]
  %v0_165c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_165c4 = load i32, i32* @ip, align 4
  %v2_165c4 = sub i32 %v0_165c4, %v1_165c4
  store i32 %v2_165c4, i32* %r2.global-to-local, align 4
  %v4_165c4 = xor i32 %v1_165c4, %v0_165c4
  %v5_165c4 = xor i32 %v2_165c4, %v0_165c4
  %v6_165c4 = and i32 %v5_165c4, %v4_165c4
  %v7_165c4 = icmp slt i32 %v6_165c4, 0
  store i1 %v7_165c4, i1* %cpsr_v.global-to-local, align 1
  %v8_165c4 = icmp slt i32 %v2_165c4, 0
  store i1 %v8_165c4, i1* %cpsr_n.global-to-local, align 1
  %v9_165c4 = icmp eq i32 %v0_165c4, %v1_165c4
  store i1 %v9_165c4, i1* %cpsr_z.global-to-local, align 1
  %v5_165c8 = icmp slt i32 %v0_165c4, %v1_165c4
  br i1 %v5_165c8, label %bb131, label %dec_label_pc_165cc

dec_label_pc_165cc:                               ; preds = %.thread11
  %v0_165cc = load i32, i32* @r1, align 4
  %v1_165cc = urem i32 %v0_165cc, 4
  store i32 %v1_165cc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_165cc = icmp eq i32 %v1_165cc, 0
  store i1 %v2_165cc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_165cc to i2
  br i1 %v2_165cc, label %dec_label_pc_16508, label %dec_label_pc_165d4

dec_label_pc_165d4:                               ; preds = %dec_label_pc_16500, %dec_label_pc_165cc
  %v0_1661c74 = phi i32 [ %v1_164e0, %dec_label_pc_16500 ], [ %v0_1661c75, %dec_label_pc_165cc ]
  %v0_166c8 = phi i32 [ %v2_164f0, %dec_label_pc_16500 ], [ %v2_165c4, %dec_label_pc_165cc ]
  %v0_165dc.off0 = phi i2 [ %extract.t, %dec_label_pc_16500 ], [ %extract.t123, %dec_label_pc_165cc ]
  %v0_165d4 = phi i32 [ %v0_164e0, %dec_label_pc_16500 ], [ %v0_165cc, %dec_label_pc_165cc ]
  %v1_165d4 = and i32 %v0_165d4, -4
  store i32 %v1_165d4, i32* %r1.global-to-local, align 4
  %v1_165d8 = inttoptr i32 %v1_165d4 to i32*
  %v2_165d8 = load i32, i32* %v1_165d8, align 4
  store i32 %v2_165d8, i32* @lr, align 4
  %v4_165d8 = add i32 %v1_165d4, 4
  store i32 %v4_165d8, i32* %r1.global-to-local, align 4
  %v2_166c0 = add i32 %v0_166c8, -12
  %v4_166c0 = sub i32 11, %v0_166c8
  %v5_166c0 = and i32 %v4_166c0, %v0_166c8
  %v6_166c0 = icmp slt i32 %v5_166c0, 0
  store i1 %v6_166c0, i1* %cpsr_v.global-to-local, align 1
  %v7_166c0 = icmp slt i32 %v2_166c0, 0
  store i1 %v7_166c0, i1* %cpsr_n.global-to-local, align 1
  %v8_166c0 = icmp eq i32 %v0_166c8, 12
  store i1 %v8_166c0, i1* %cpsr_z.global-to-local, align 1
  %v5_166c4 = icmp slt i32 %v0_166c8, 12
  switch i2 %v0_165dc.off0, label %dec_label_pc_165e8 [
    i2 -1, label %dec_label_pc_166c0
    i2 -2, label %dec_label_pc_16654
  ]

dec_label_pc_165e8:                               ; preds = %dec_label_pc_165d4
  br i1 %v5_166c4, label %dec_label_pc_16634, label %dec_label_pc_165f0

dec_label_pc_165f0:                               ; preds = %dec_label_pc_165e8
  store i32 %v2_166c0, i32* %r2.global-to-local, align 4
  %v3_165f4 = load i32, i32* @r4, align 4
  store i32 %v3_165f4, i32* %stack_var_-16, align 4
  %v6_165f4 = load i32, i32* @r5, align 4
  store i32 %v6_165f4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_165f8

dec_label_pc_165f8:                               ; preds = %dec_label_pc_165f8.dec_label_pc_165f8_crit_edge, %dec_label_pc_165f0
  %v0_1661c = phi i32 [ %v12_1661c, %dec_label_pc_165f8.dec_label_pc_165f8_crit_edge ], [ %v0_1661c74, %dec_label_pc_165f0 ]
  %v0_165fc = phi i32 [ %v0_165fc.pre, %dec_label_pc_165f8.dec_label_pc_165f8_crit_edge ], [ %v4_165d8, %dec_label_pc_165f0 ]
  %v0_165f8 = phi i32 [ %v0_165f8.pre, %dec_label_pc_165f8.dec_label_pc_165f8_crit_edge ], [ %v2_165d8, %dec_label_pc_165f0 ]
  %v3_165f8 = udiv i32 %v0_165f8, 256
  store i32 %v3_165f8, i32* %r3.global-to-local, align 4
  %v1_165fc = inttoptr i32 %v0_165fc to i32*
  %v2_165fc = load i32, i32* %v1_165fc, align 4
  store i32 %v2_165fc, i32* %r4.global-to-local, align 4
  %v3_165fc = add i32 %v0_165fc, 4
  %v4_165fc = inttoptr i32 %v3_165fc to i32*
  %v5_165fc = load i32, i32* %v4_165fc, align 4
  store i32 %v5_165fc, i32* %r5.global-to-local, align 4
  %v6_165fc = add i32 %v0_165fc, 8
  %v7_165fc = inttoptr i32 %v6_165fc to i32*
  %v8_165fc = load i32, i32* %v7_165fc, align 4
  store i32 %v8_165fc, i32* %ip.global-to-local, align 4
  %v9_165fc = add i32 %v0_165fc, 12
  %v10_165fc = inttoptr i32 %v9_165fc to i32*
  %v11_165fc = load i32, i32* %v10_165fc, align 4
  store i32 %v11_165fc, i32* @lr, align 4
  %v12_165fc = add i32 %v0_165fc, 16
  store i32 %v12_165fc, i32* %r1.global-to-local, align 4
  %v4_16600 = mul i32 %v2_165fc, 16777216
  %v5_16600 = or i32 %v4_16600, %v3_165f8
  store i32 %v5_16600, i32* %r3.global-to-local, align 4
  %v3_16604 = udiv i32 %v2_165fc, 256
  %v4_16608 = mul i32 %v5_165fc, 16777216
  %v5_16608 = or i32 %v4_16608, %v3_16604
  store i32 %v5_16608, i32* %r4.global-to-local, align 4
  %v3_1660c = udiv i32 %v5_165fc, 256
  %v4_16610 = mul i32 %v8_165fc, 16777216
  %v5_16610 = or i32 %v4_16610, %v3_1660c
  store i32 %v5_16610, i32* %r5.global-to-local, align 4
  %v3_16614 = udiv i32 %v8_165fc, 256
  %v4_16618 = mul i32 %v11_165fc, 16777216
  %v5_16618 = or i32 %v4_16618, %v3_16614
  store i32 %v5_16618, i32* @ip, align 4
  %v1_1661c = inttoptr i32 %v0_1661c to i32*
  store i32 %v5_16600, i32* %v1_1661c, align 4
  %v3_1661c = add i32 %v0_1661c, 4
  %v4_1661c = inttoptr i32 %v3_1661c to i32*
  %v5_1661c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1661c, i32* %v4_1661c, align 4
  %v6_1661c = add i32 %v0_1661c, 8
  %v7_1661c = inttoptr i32 %v6_1661c to i32*
  %v8_1661c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1661c, i32* %v7_1661c, align 4
  %v9_1661c = add i32 %v0_1661c, 12
  %v10_1661c = inttoptr i32 %v9_1661c to i32*
  %v11_1661c = load i32, i32* @ip, align 4
  store i32 %v11_1661c, i32* %v10_1661c, align 4
  %v12_1661c = add i32 %v0_1661c, 16
  store i32 %v12_1661c, i32* @r0, align 4
  %v0_16620 = load i32, i32* %r2.global-to-local, align 4
  %v2_16620 = add i32 %v0_16620, -16
  store i32 %v2_16620, i32* %r2.global-to-local, align 4
  %v6_16624 = icmp slt i32 %v0_16620, 16
  br i1 %v6_16624, label %dec_label_pc_16628, label %dec_label_pc_165f8.dec_label_pc_165f8_crit_edge

dec_label_pc_165f8.dec_label_pc_165f8_crit_edge:  ; preds = %dec_label_pc_165f8
  %v0_165f8.pre = load i32, i32* @lr, align 4
  %v0_165fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_165f8

dec_label_pc_16628:                               ; preds = %dec_label_pc_165f8
  %v2_16628 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16628, i32* @r4, align 4
  %v5_16628 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16628, i32* @r5, align 4
  %v2_1662c = add i32 %v0_16620, -4
  store i32 %v2_1662c, i32* %r2.global-to-local, align 4
  %v4_1662c = add i32 %v0_16620, 2147483632
  %v5_1662c = and i32 %v2_1662c, %v4_1662c
  %v6_1662c = icmp slt i32 %v5_1662c, 0
  store i1 %v6_1662c, i1* %cpsr_v.global-to-local, align 1
  %v7_1662c = icmp slt i32 %v2_1662c, 0
  store i1 %v7_1662c, i1* %cpsr_n.global-to-local, align 1
  %v8_1662c = icmp eq i32 %v2_1662c, 0
  store i1 %v8_1662c, i1* %cpsr_z.global-to-local, align 1
  %v5_16630 = icmp slt i32 %v2_16620, -12
  br i1 %v5_16630, label %dec_label_pc_1664c, label %dec_label_pc_16634

dec_label_pc_16634:                               ; preds = %dec_label_pc_16628, %dec_label_pc_165e8, %dec_label_pc_16634
  %v1_16640 = phi i32 [ %v4_16640, %dec_label_pc_16634 ], [ %v12_1661c, %dec_label_pc_16628 ], [ %v0_1661c74, %dec_label_pc_165e8 ]
  %v0_16634 = load i32, i32* @lr, align 4
  %v3_16634 = udiv i32 %v0_16634, 256
  store i32 %v3_16634, i32* %ip.global-to-local, align 4
  %v0_16638 = load i32, i32* %r1.global-to-local, align 4
  %v1_16638 = inttoptr i32 %v0_16638 to i32*
  %v2_16638 = load i32, i32* %v1_16638, align 4
  store i32 %v2_16638, i32* @lr, align 4
  %v4_16638 = add i32 %v0_16638, 4
  store i32 %v4_16638, i32* %r1.global-to-local, align 4
  %v4_1663c = mul i32 %v2_16638, 16777216
  %v5_1663c = or i32 %v4_1663c, %v3_16634
  store i32 %v5_1663c, i32* @ip, align 4
  %v2_16640 = inttoptr i32 %v1_16640 to i32*
  store i32 %v5_1663c, i32* %v2_16640, align 4
  %v3_16640 = load i32, i32* @r0, align 4
  %v4_16640 = add i32 %v3_16640, 4
  store i32 %v4_16640, i32* @r0, align 4
  %v0_16644 = load i32, i32* %r2.global-to-local, align 4
  %v2_16644 = add i32 %v0_16644, -4
  store i32 %v2_16644, i32* %r2.global-to-local, align 4
  %v6_16648 = icmp slt i32 %v0_16644, 4
  br i1 %v6_16648, label %dec_label_pc_1664c.loopexit, label %dec_label_pc_16634

dec_label_pc_1664c.loopexit:                      ; preds = %dec_label_pc_16634
  %v4_16644 = sub i32 3, %v0_16644
  %v5_16644 = and i32 %v4_16644, %v0_16644
  %v6_16644 = icmp slt i32 %v5_16644, 0
  %v7_16644 = icmp slt i32 %v2_16644, 0
  store i1 %v6_16644, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16644, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1664c

dec_label_pc_1664c:                               ; preds = %dec_label_pc_1664c.loopexit, %dec_label_pc_16628
  %v2_1658c111 = phi i32 [ %v4_16640, %dec_label_pc_1664c.loopexit ], [ %v12_1661c, %dec_label_pc_16628 ]
  %v0_1657c107 = phi i32 [ %v2_16644, %dec_label_pc_1664c.loopexit ], [ %v2_1662c, %dec_label_pc_16628 ]
  %v0_1664c = load i32, i32* %r1.global-to-local, align 4
  %v1_1664c = add i32 %v0_1664c, -3
  store i32 %v1_1664c, i32* @r1, align 4
  br label %bb131

dec_label_pc_16654:                               ; preds = %dec_label_pc_165d4
  br i1 %v5_166c4, label %dec_label_pc_166a0, label %dec_label_pc_1665c

dec_label_pc_1665c:                               ; preds = %dec_label_pc_16654
  store i32 %v2_166c0, i32* %r2.global-to-local, align 4
  %v3_16660 = load i32, i32* @r4, align 4
  store i32 %v3_16660, i32* %stack_var_-16, align 4
  %v6_16660 = load i32, i32* @r5, align 4
  store i32 %v6_16660, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16664

dec_label_pc_16664:                               ; preds = %dec_label_pc_16664.dec_label_pc_16664_crit_edge, %dec_label_pc_1665c
  %v0_16688 = phi i32 [ %v12_16688, %dec_label_pc_16664.dec_label_pc_16664_crit_edge ], [ %v0_1661c74, %dec_label_pc_1665c ]
  %v0_16668 = phi i32 [ %v0_16668.pre, %dec_label_pc_16664.dec_label_pc_16664_crit_edge ], [ %v4_165d8, %dec_label_pc_1665c ]
  %v0_16664 = phi i32 [ %v0_16664.pre, %dec_label_pc_16664.dec_label_pc_16664_crit_edge ], [ %v2_165d8, %dec_label_pc_1665c ]
  %v3_16664 = udiv i32 %v0_16664, 65536
  store i32 %v3_16664, i32* %r3.global-to-local, align 4
  %v1_16668 = inttoptr i32 %v0_16668 to i32*
  %v2_16668 = load i32, i32* %v1_16668, align 4
  store i32 %v2_16668, i32* %r4.global-to-local, align 4
  %v3_16668 = add i32 %v0_16668, 4
  %v4_16668 = inttoptr i32 %v3_16668 to i32*
  %v5_16668 = load i32, i32* %v4_16668, align 4
  store i32 %v5_16668, i32* %r5.global-to-local, align 4
  %v6_16668 = add i32 %v0_16668, 8
  %v7_16668 = inttoptr i32 %v6_16668 to i32*
  %v8_16668 = load i32, i32* %v7_16668, align 4
  store i32 %v8_16668, i32* %ip.global-to-local, align 4
  %v9_16668 = add i32 %v0_16668, 12
  %v10_16668 = inttoptr i32 %v9_16668 to i32*
  %v11_16668 = load i32, i32* %v10_16668, align 4
  store i32 %v11_16668, i32* @lr, align 4
  %v12_16668 = add i32 %v0_16668, 16
  store i32 %v12_16668, i32* %r1.global-to-local, align 4
  %v4_1666c = mul i32 %v2_16668, 65536
  %v5_1666c = or i32 %v4_1666c, %v3_16664
  store i32 %v5_1666c, i32* %r3.global-to-local, align 4
  %v3_16670 = udiv i32 %v2_16668, 65536
  %v4_16674 = mul i32 %v5_16668, 65536
  %v5_16674 = or i32 %v4_16674, %v3_16670
  store i32 %v5_16674, i32* %r4.global-to-local, align 4
  %v3_16678 = udiv i32 %v5_16668, 65536
  %v4_1667c = mul i32 %v8_16668, 65536
  %v5_1667c = or i32 %v4_1667c, %v3_16678
  store i32 %v5_1667c, i32* %r5.global-to-local, align 4
  %v3_16680 = udiv i32 %v8_16668, 65536
  %v4_16684 = mul i32 %v11_16668, 65536
  %v5_16684 = or i32 %v4_16684, %v3_16680
  store i32 %v5_16684, i32* @ip, align 4
  %v1_16688 = inttoptr i32 %v0_16688 to i32*
  store i32 %v5_1666c, i32* %v1_16688, align 4
  %v3_16688 = add i32 %v0_16688, 4
  %v4_16688 = inttoptr i32 %v3_16688 to i32*
  %v5_16688 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16688, i32* %v4_16688, align 4
  %v6_16688 = add i32 %v0_16688, 8
  %v7_16688 = inttoptr i32 %v6_16688 to i32*
  %v8_16688 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16688, i32* %v7_16688, align 4
  %v9_16688 = add i32 %v0_16688, 12
  %v10_16688 = inttoptr i32 %v9_16688 to i32*
  %v11_16688 = load i32, i32* @ip, align 4
  store i32 %v11_16688, i32* %v10_16688, align 4
  %v12_16688 = add i32 %v0_16688, 16
  store i32 %v12_16688, i32* @r0, align 4
  %v0_1668c = load i32, i32* %r2.global-to-local, align 4
  %v2_1668c = add i32 %v0_1668c, -16
  store i32 %v2_1668c, i32* %r2.global-to-local, align 4
  %v6_16690 = icmp slt i32 %v0_1668c, 16
  br i1 %v6_16690, label %dec_label_pc_16694, label %dec_label_pc_16664.dec_label_pc_16664_crit_edge

dec_label_pc_16664.dec_label_pc_16664_crit_edge:  ; preds = %dec_label_pc_16664
  %v0_16664.pre = load i32, i32* @lr, align 4
  %v0_16668.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16664

dec_label_pc_16694:                               ; preds = %dec_label_pc_16664
  %v2_16694 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16694, i32* @r4, align 4
  %v5_16694 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16694, i32* @r5, align 4
  %v2_16698 = add i32 %v0_1668c, -4
  store i32 %v2_16698, i32* %r2.global-to-local, align 4
  %v4_16698 = add i32 %v0_1668c, 2147483632
  %v5_16698 = and i32 %v2_16698, %v4_16698
  %v6_16698 = icmp slt i32 %v5_16698, 0
  store i1 %v6_16698, i1* %cpsr_v.global-to-local, align 1
  %v7_16698 = icmp slt i32 %v2_16698, 0
  store i1 %v7_16698, i1* %cpsr_n.global-to-local, align 1
  %v8_16698 = icmp eq i32 %v2_16698, 0
  store i1 %v8_16698, i1* %cpsr_z.global-to-local, align 1
  %v5_1669c = icmp slt i32 %v2_1668c, -12
  br i1 %v5_1669c, label %dec_label_pc_166b8, label %dec_label_pc_166a0

dec_label_pc_166a0:                               ; preds = %dec_label_pc_16694, %dec_label_pc_16654, %dec_label_pc_166a0
  %v1_166ac = phi i32 [ %v4_166ac, %dec_label_pc_166a0 ], [ %v12_16688, %dec_label_pc_16694 ], [ %v0_1661c74, %dec_label_pc_16654 ]
  %v0_166a0 = load i32, i32* @lr, align 4
  %v3_166a0 = udiv i32 %v0_166a0, 65536
  store i32 %v3_166a0, i32* %ip.global-to-local, align 4
  %v0_166a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_166a4 = inttoptr i32 %v0_166a4 to i32*
  %v2_166a4 = load i32, i32* %v1_166a4, align 4
  store i32 %v2_166a4, i32* @lr, align 4
  %v4_166a4 = add i32 %v0_166a4, 4
  store i32 %v4_166a4, i32* %r1.global-to-local, align 4
  %v4_166a8 = mul i32 %v2_166a4, 65536
  %v5_166a8 = or i32 %v4_166a8, %v3_166a0
  store i32 %v5_166a8, i32* @ip, align 4
  %v2_166ac = inttoptr i32 %v1_166ac to i32*
  store i32 %v5_166a8, i32* %v2_166ac, align 4
  %v3_166ac = load i32, i32* @r0, align 4
  %v4_166ac = add i32 %v3_166ac, 4
  store i32 %v4_166ac, i32* @r0, align 4
  %v0_166b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_166b0 = add i32 %v0_166b0, -4
  store i32 %v2_166b0, i32* %r2.global-to-local, align 4
  %v6_166b4 = icmp slt i32 %v0_166b0, 4
  br i1 %v6_166b4, label %dec_label_pc_166b8.loopexit, label %dec_label_pc_166a0

dec_label_pc_166b8.loopexit:                      ; preds = %dec_label_pc_166a0
  %v4_166b0 = sub i32 3, %v0_166b0
  %v5_166b0 = and i32 %v4_166b0, %v0_166b0
  %v6_166b0 = icmp slt i32 %v5_166b0, 0
  %v7_166b0 = icmp slt i32 %v2_166b0, 0
  store i1 %v6_166b0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_166b0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_166b8

dec_label_pc_166b8:                               ; preds = %dec_label_pc_166b8.loopexit, %dec_label_pc_16694
  %v2_1658c112 = phi i32 [ %v4_166ac, %dec_label_pc_166b8.loopexit ], [ %v12_16688, %dec_label_pc_16694 ]
  %v0_1657c108 = phi i32 [ %v2_166b0, %dec_label_pc_166b8.loopexit ], [ %v2_16698, %dec_label_pc_16694 ]
  %v0_166b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_166b8 = add i32 %v0_166b8, -2
  store i32 %v1_166b8, i32* @r1, align 4
  br label %bb131

dec_label_pc_166c0:                               ; preds = %dec_label_pc_165d4
  br i1 %v5_166c4, label %dec_label_pc_1670c, label %dec_label_pc_166c8

dec_label_pc_166c8:                               ; preds = %dec_label_pc_166c0
  store i32 %v2_166c0, i32* %r2.global-to-local, align 4
  %v3_166cc = load i32, i32* @r4, align 4
  store i32 %v3_166cc, i32* %stack_var_-16, align 4
  %v6_166cc = load i32, i32* @r5, align 4
  store i32 %v6_166cc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_166d0

dec_label_pc_166d0:                               ; preds = %dec_label_pc_166d0.dec_label_pc_166d0_crit_edge, %dec_label_pc_166c8
  %v0_166f4 = phi i32 [ %v12_166f4, %dec_label_pc_166d0.dec_label_pc_166d0_crit_edge ], [ %v0_1661c74, %dec_label_pc_166c8 ]
  %v0_166d4 = phi i32 [ %v0_166d4.pre, %dec_label_pc_166d0.dec_label_pc_166d0_crit_edge ], [ %v4_165d8, %dec_label_pc_166c8 ]
  %v0_166d0 = phi i32 [ %v0_166d0.pre, %dec_label_pc_166d0.dec_label_pc_166d0_crit_edge ], [ %v2_165d8, %dec_label_pc_166c8 ]
  %v3_166d0 = udiv i32 %v0_166d0, 16777216
  store i32 %v3_166d0, i32* %r3.global-to-local, align 4
  %v1_166d4 = inttoptr i32 %v0_166d4 to i32*
  %v2_166d4 = load i32, i32* %v1_166d4, align 4
  store i32 %v2_166d4, i32* %r4.global-to-local, align 4
  %v3_166d4 = add i32 %v0_166d4, 4
  %v4_166d4 = inttoptr i32 %v3_166d4 to i32*
  %v5_166d4 = load i32, i32* %v4_166d4, align 4
  store i32 %v5_166d4, i32* %r5.global-to-local, align 4
  %v6_166d4 = add i32 %v0_166d4, 8
  %v7_166d4 = inttoptr i32 %v6_166d4 to i32*
  %v8_166d4 = load i32, i32* %v7_166d4, align 4
  store i32 %v8_166d4, i32* %ip.global-to-local, align 4
  %v9_166d4 = add i32 %v0_166d4, 12
  %v10_166d4 = inttoptr i32 %v9_166d4 to i32*
  %v11_166d4 = load i32, i32* %v10_166d4, align 4
  store i32 %v11_166d4, i32* @lr, align 4
  %v12_166d4 = add i32 %v0_166d4, 16
  store i32 %v12_166d4, i32* %r1.global-to-local, align 4
  %v4_166d8 = mul i32 %v2_166d4, 256
  %v5_166d8 = or i32 %v4_166d8, %v3_166d0
  store i32 %v5_166d8, i32* %r3.global-to-local, align 4
  %v3_166dc = udiv i32 %v2_166d4, 16777216
  %v4_166e0 = mul i32 %v5_166d4, 256
  %v5_166e0 = or i32 %v4_166e0, %v3_166dc
  store i32 %v5_166e0, i32* %r4.global-to-local, align 4
  %v3_166e4 = udiv i32 %v5_166d4, 16777216
  %v4_166e8 = mul i32 %v8_166d4, 256
  %v5_166e8 = or i32 %v4_166e8, %v3_166e4
  store i32 %v5_166e8, i32* %r5.global-to-local, align 4
  %v3_166ec = udiv i32 %v8_166d4, 16777216
  %v4_166f0 = mul i32 %v11_166d4, 256
  %v5_166f0 = or i32 %v4_166f0, %v3_166ec
  store i32 %v5_166f0, i32* @ip, align 4
  %v1_166f4 = inttoptr i32 %v0_166f4 to i32*
  store i32 %v5_166d8, i32* %v1_166f4, align 4
  %v3_166f4 = add i32 %v0_166f4, 4
  %v4_166f4 = inttoptr i32 %v3_166f4 to i32*
  %v5_166f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_166f4, i32* %v4_166f4, align 4
  %v6_166f4 = add i32 %v0_166f4, 8
  %v7_166f4 = inttoptr i32 %v6_166f4 to i32*
  %v8_166f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_166f4, i32* %v7_166f4, align 4
  %v9_166f4 = add i32 %v0_166f4, 12
  %v10_166f4 = inttoptr i32 %v9_166f4 to i32*
  %v11_166f4 = load i32, i32* @ip, align 4
  store i32 %v11_166f4, i32* %v10_166f4, align 4
  %v12_166f4 = add i32 %v0_166f4, 16
  store i32 %v12_166f4, i32* @r0, align 4
  %v0_166f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_166f8 = add i32 %v0_166f8, -16
  store i32 %v2_166f8, i32* %r2.global-to-local, align 4
  %v6_166fc = icmp slt i32 %v0_166f8, 16
  br i1 %v6_166fc, label %dec_label_pc_16700, label %dec_label_pc_166d0.dec_label_pc_166d0_crit_edge

dec_label_pc_166d0.dec_label_pc_166d0_crit_edge:  ; preds = %dec_label_pc_166d0
  %v0_166d0.pre = load i32, i32* @lr, align 4
  %v0_166d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_166d0

dec_label_pc_16700:                               ; preds = %dec_label_pc_166d0
  %v2_16700 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16700, i32* @r4, align 4
  %v5_16700 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16700, i32* @r5, align 4
  %v2_16704 = add i32 %v0_166f8, -4
  store i32 %v2_16704, i32* %r2.global-to-local, align 4
  %v4_16704 = add i32 %v0_166f8, 2147483632
  %v5_16704 = and i32 %v2_16704, %v4_16704
  %v6_16704 = icmp slt i32 %v5_16704, 0
  store i1 %v6_16704, i1* %cpsr_v.global-to-local, align 1
  %v7_16704 = icmp slt i32 %v2_16704, 0
  store i1 %v7_16704, i1* %cpsr_n.global-to-local, align 1
  %v8_16704 = icmp eq i32 %v2_16704, 0
  store i1 %v8_16704, i1* %cpsr_z.global-to-local, align 1
  %v5_16708 = icmp slt i32 %v2_166f8, -12
  br i1 %v5_16708, label %dec_label_pc_16724, label %dec_label_pc_1670c

dec_label_pc_1670c:                               ; preds = %dec_label_pc_16700, %dec_label_pc_166c0, %dec_label_pc_1670c
  %v1_16718 = phi i32 [ %v4_16718, %dec_label_pc_1670c ], [ %v12_166f4, %dec_label_pc_16700 ], [ %v0_1661c74, %dec_label_pc_166c0 ]
  %v0_1670c = load i32, i32* @lr, align 4
  %v3_1670c = udiv i32 %v0_1670c, 16777216
  store i32 %v3_1670c, i32* %ip.global-to-local, align 4
  %v0_16710 = load i32, i32* %r1.global-to-local, align 4
  %v1_16710 = inttoptr i32 %v0_16710 to i32*
  %v2_16710 = load i32, i32* %v1_16710, align 4
  store i32 %v2_16710, i32* @lr, align 4
  %v4_16710 = add i32 %v0_16710, 4
  store i32 %v4_16710, i32* %r1.global-to-local, align 4
  %v4_16714 = mul i32 %v2_16710, 256
  %v5_16714 = or i32 %v4_16714, %v3_1670c
  store i32 %v5_16714, i32* @ip, align 4
  %v2_16718 = inttoptr i32 %v1_16718 to i32*
  store i32 %v5_16714, i32* %v2_16718, align 4
  %v3_16718 = load i32, i32* @r0, align 4
  %v4_16718 = add i32 %v3_16718, 4
  store i32 %v4_16718, i32* @r0, align 4
  %v0_1671c = load i32, i32* %r2.global-to-local, align 4
  %v2_1671c = add i32 %v0_1671c, -4
  store i32 %v2_1671c, i32* %r2.global-to-local, align 4
  %v6_16720 = icmp slt i32 %v0_1671c, 4
  br i1 %v6_16720, label %dec_label_pc_16724.loopexit, label %dec_label_pc_1670c

dec_label_pc_16724.loopexit:                      ; preds = %dec_label_pc_1670c
  %v4_1671c = sub i32 3, %v0_1671c
  %v5_1671c = and i32 %v4_1671c, %v0_1671c
  %v6_1671c = icmp slt i32 %v5_1671c, 0
  %v7_1671c = icmp slt i32 %v2_1671c, 0
  store i1 %v6_1671c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1671c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16724

dec_label_pc_16724:                               ; preds = %dec_label_pc_16724.loopexit, %dec_label_pc_16700
  %v2_1658c113 = phi i32 [ %v4_16718, %dec_label_pc_16724.loopexit ], [ %v12_166f4, %dec_label_pc_16700 ]
  %v0_1657c109 = phi i32 [ %v2_1671c, %dec_label_pc_16724.loopexit ], [ %v2_16704, %dec_label_pc_16700 ]
  %v0_16724 = load i32, i32* %r1.global-to-local, align 4
  %v1_16724 = add i32 %v0_16724, -1
  store i32 %v1_16724, i32* @r1, align 4
  br label %bb131

dec_label_pc_1672c:                               ; preds = %dec_label_pc_164e0
  %v1_1672c = load i32, i32* @r2, align 4
  %v2_1672c = add i32 %v1_1672c, %v0_164e0
  store i32 %v2_1672c, i32* %r1.global-to-local, align 4
  %v2_16730 = add i32 %v1_1672c, %v1_164e0
  store i32 %v2_16730, i32* %r0.global-to-local, align 4
  %v2_16734 = add i32 %v1_1672c, -4
  store i32 %v2_16734, i32* %r2.global-to-local, align 4
  %v4_16734 = sub i32 3, %v1_1672c
  %v5_16734 = and i32 %v4_16734, %v1_1672c
  %v6_16734 = icmp slt i32 %v5_16734, 0
  store i1 %v6_16734, i1* %cpsr_v.global-to-local, align 1
  %v7_16734 = icmp slt i32 %v2_16734, 0
  store i1 %v7_16734, i1* %cpsr_n.global-to-local, align 1
  %v8_16734 = icmp eq i32 %v1_1672c, 4
  store i1 %v8_16734, i1* %cpsr_z.global-to-local, align 1
  %v5_16738 = icmp slt i32 %v1_1672c, 4
  br i1 %v5_16738, label %bb141, label %dec_label_pc_1673c

dec_label_pc_1673c:                               ; preds = %dec_label_pc_1672c
  %v1_1673c = urem i32 %v2_16730, 4
  store i32 %v1_1673c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1673c = icmp eq i32 %v1_1673c, 0
  store i1 %v2_1673c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1673c, label %dec_label_pc_16744, label %dec_label_pc_167e4

dec_label_pc_16744:                               ; preds = %dec_label_pc_1673c
  %v1_16744 = urem i32 %v2_1672c, 4
  store i32 %v1_16744, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16744 = icmp eq i32 %v1_16744, 0
  store i1 %v2_16744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16744, label %dec_label_pc_1674c, label %dec_label_pc_16810

dec_label_pc_1674c:                               ; preds = %dec_label_pc_16744, %dec_label_pc_16808
  %v0_1676448 = phi i32 [ %v2_16730, %dec_label_pc_16744 ], [ %v0_1685831, %dec_label_pc_16808 ]
  %v0_1676047 = phi i32 [ %v2_1672c, %dec_label_pc_16744 ], [ %v0_16808, %dec_label_pc_16808 ]
  %v0_1674c = phi i32 [ %v2_16734, %dec_label_pc_16744 ], [ %v2_16800, %dec_label_pc_16808 ]
  %v2_1674c = add i32 %v0_1674c, -8
  store i32 %v2_1674c, i32* %r2.global-to-local, align 4
  %v4_1674c = sub i32 7, %v0_1674c
  %v5_1674c = and i32 %v4_1674c, %v0_1674c
  %v6_1674c = icmp slt i32 %v5_1674c, 0
  store i1 %v6_1674c, i1* %cpsr_v.global-to-local, align 1
  %v7_1674c = icmp slt i32 %v2_1674c, 0
  store i1 %v7_1674c, i1* %cpsr_n.global-to-local, align 1
  %v8_1674c = icmp eq i32 %v0_1674c, 8
  store i1 %v8_1674c, i1* %cpsr_z.global-to-local, align 1
  %v5_16750 = icmp slt i32 %v0_1674c, 8
  br i1 %v5_16750, label %dec_label_pc_1679c, label %dec_label_pc_16754

dec_label_pc_16754:                               ; preds = %dec_label_pc_1674c
  %v3_16754 = load i32, i32* @r4, align 4
  store i32 %v3_16754, i32* %stack_var_-8, align 4
  %v6_16754 = load i32, i32* @lr, align 4
  %v2_16758 = add i32 %v0_1674c, -28
  store i32 %v2_16758, i32* %r2.global-to-local, align 4
  %v4_16758 = sub i32 27, %v0_1674c
  %v5_16758 = and i32 %v4_16758, %v2_1674c
  %v6_16758 = icmp slt i32 %v5_16758, 0
  store i1 %v6_16758, i1* %cpsr_v.global-to-local, align 1
  %v7_16758 = icmp slt i32 %v2_16758, 0
  store i1 %v7_16758, i1* %cpsr_n.global-to-local, align 1
  %v8_16758 = icmp eq i32 %v2_1674c, 20
  store i1 %v8_16758, i1* %cpsr_z.global-to-local, align 1
  %v5_1675c = icmp slt i32 %v2_1674c, 20
  br i1 %v5_1675c, label %dec_label_pc_16778, label %dec_label_pc_16760

dec_label_pc_16760:                               ; preds = %dec_label_pc_16754, %dec_label_pc_16760.dec_label_pc_16760_crit_edge
  %v0_16764 = phi i32 [ %v1_1676c, %dec_label_pc_16760.dec_label_pc_16760_crit_edge ], [ %v0_1676448, %dec_label_pc_16754 ]
  %v0_16760 = phi i32 [ %v0_16760.pre, %dec_label_pc_16760.dec_label_pc_16760_crit_edge ], [ %v0_1676047, %dec_label_pc_16754 ]
  %v1_16760 = add i32 %v0_16760, -4
  %v2_16760 = inttoptr i32 %v1_16760 to i32*
  %v3_16760 = load i32, i32* %v2_16760, align 4
  store i32 %v3_16760, i32* %r3.global-to-local, align 4
  %v4_16760 = add i32 %v0_16760, -8
  %v5_16760 = inttoptr i32 %v4_16760 to i32*
  %v6_16760 = load i32, i32* %v5_16760, align 4
  store i32 %v6_16760, i32* %r4.global-to-local, align 4
  %v7_16760 = add i32 %v0_16760, -12
  %v8_16760 = inttoptr i32 %v7_16760 to i32*
  %v9_16760 = load i32, i32* %v8_16760, align 4
  store i32 %v9_16760, i32* %ip.global-to-local, align 4
  %v10_16760 = add i32 %v0_16760, -16
  %v11_16760 = inttoptr i32 %v10_16760 to i32*
  %v12_16760 = load i32, i32* %v11_16760, align 4
  store i32 %v12_16760, i32* %lr.global-to-local, align 4
  store i32 %v10_16760, i32* %r1.global-to-local, align 4
  %v1_16764 = add i32 %v0_16764, -16
  %v2_16764 = inttoptr i32 %v1_16764 to i32*
  store i32 %v3_16760, i32* %v2_16764, align 4
  %v4_16764 = add i32 %v0_16764, -12
  %v5_16764 = inttoptr i32 %v4_16764 to i32*
  %v6_16764 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16764, i32* %v5_16764, align 4
  %v7_16764 = add i32 %v0_16764, -8
  %v8_16764 = inttoptr i32 %v7_16764 to i32*
  %v9_16764 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16764, i32* %v8_16764, align 4
  %v10_16764 = add i32 %v0_16764, -4
  %v11_16764 = inttoptr i32 %v10_16764 to i32*
  %v12_16764 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16764, i32* %v11_16764, align 4
  store i32 %v1_16764, i32* %r0.global-to-local, align 4
  %v0_16768 = load i32, i32* %r1.global-to-local, align 4
  %v1_16768 = add i32 %v0_16768, -4
  %v2_16768 = inttoptr i32 %v1_16768 to i32*
  %v3_16768 = load i32, i32* %v2_16768, align 4
  store i32 %v3_16768, i32* %r3.global-to-local, align 4
  %v4_16768 = add i32 %v0_16768, -8
  %v5_16768 = inttoptr i32 %v4_16768 to i32*
  %v6_16768 = load i32, i32* %v5_16768, align 4
  store i32 %v6_16768, i32* %r4.global-to-local, align 4
  %v7_16768 = add i32 %v0_16768, -12
  %v8_16768 = inttoptr i32 %v7_16768 to i32*
  %v9_16768 = load i32, i32* %v8_16768, align 4
  store i32 %v9_16768, i32* @ip, align 4
  %v10_16768 = add i32 %v0_16768, -16
  %v11_16768 = inttoptr i32 %v10_16768 to i32*
  %v12_16768 = load i32, i32* %v11_16768, align 4
  store i32 %v12_16768, i32* %lr.global-to-local, align 4
  store i32 %v10_16768, i32* %r1.global-to-local, align 4
  %v1_1676c = add i32 %v0_16764, -32
  %v2_1676c = inttoptr i32 %v1_1676c to i32*
  store i32 %v3_16768, i32* %v2_1676c, align 4
  %v4_1676c = add i32 %v0_16764, -28
  %v5_1676c = inttoptr i32 %v4_1676c to i32*
  %v6_1676c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1676c, i32* %v5_1676c, align 4
  %v7_1676c = add i32 %v0_16764, -24
  %v8_1676c = inttoptr i32 %v7_1676c to i32*
  %v9_1676c = load i32, i32* @ip, align 4
  store i32 %v9_1676c, i32* %v8_1676c, align 4
  %v10_1676c = add i32 %v0_16764, -20
  %v11_1676c = inttoptr i32 %v10_1676c to i32*
  %v12_1676c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1676c, i32* %v11_1676c, align 4
  store i32 %v1_1676c, i32* %r0.global-to-local, align 4
  %v0_16770 = load i32, i32* %r2.global-to-local, align 4
  %v2_16770 = add i32 %v0_16770, -32
  store i32 %v2_16770, i32* %r2.global-to-local, align 4
  %v6_16774 = icmp slt i32 %v0_16770, 32
  br i1 %v6_16774, label %dec_label_pc_16778.loopexit, label %dec_label_pc_16760.dec_label_pc_16760_crit_edge

dec_label_pc_16760.dec_label_pc_16760_crit_edge:  ; preds = %dec_label_pc_16760
  %v0_16760.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16760

dec_label_pc_16778.loopexit:                      ; preds = %dec_label_pc_16760
  %v4_16770 = sub i32 31, %v0_16770
  %v5_16770 = and i32 %v4_16770, %v0_16770
  %v6_16770 = icmp slt i32 %v5_16770, 0
  %v7_16770 = icmp slt i32 %v2_16770, 0
  store i1 %v6_16770, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16770, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16778

dec_label_pc_16778:                               ; preds = %dec_label_pc_16778.loopexit, %dec_label_pc_16754
  %v6_16780 = phi i32 [ %v1_1676c, %dec_label_pc_16778.loopexit ], [ %v0_1676448, %dec_label_pc_16754 ]
  %v0_16788.pr = phi i32 [ %v2_16770, %dec_label_pc_16778.loopexit ], [ %v2_16758, %dec_label_pc_16754 ]
  %v4_16778 = add i32 %v0_16788.pr, 16
  %v6_16778 = sub i32 0, %v0_16788.pr
  %v7_16778 = and i32 %v4_16778, %v6_16778
  %v8_16778 = icmp slt i32 %v7_16778, 0
  store i1 %v8_16778, i1* %cpsr_v.global-to-local, align 1
  %v9_16778 = icmp slt i32 %v4_16778, 0
  store i1 %v9_16778, i1* %cpsr_n.global-to-local, align 1
  %v10_16778 = icmp eq i32 %v4_16778, 0
  store i1 %v10_16778, i1* %cpsr_z.global-to-local, align 1
  %v5_1677c = icmp slt i32 %v0_16788.pr, -16
  br i1 %v5_1677c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_16778
  %v6_1677c = load i32, i32* %r1.global-to-local, align 4
  %v7_1677c = add i32 %v6_1677c, -4
  %v8_1677c = inttoptr i32 %v7_1677c to i32*
  %v9_1677c = load i32, i32* %v8_1677c, align 4
  store i32 %v9_1677c, i32* %r3.global-to-local, align 4
  %v10_1677c = add i32 %v6_1677c, -8
  %v11_1677c = inttoptr i32 %v10_1677c to i32*
  %v12_1677c = load i32, i32* %v11_1677c, align 4
  store i32 %v12_1677c, i32* %r4.global-to-local, align 4
  %v13_1677c = add i32 %v6_1677c, -12
  %v14_1677c = inttoptr i32 %v13_1677c to i32*
  %v15_1677c = load i32, i32* %v14_1677c, align 4
  store i32 %v15_1677c, i32* @ip, align 4
  %v16_1677c = add i32 %v6_1677c, -16
  %v17_1677c = inttoptr i32 %v16_1677c to i32*
  %v18_1677c = load i32, i32* %v17_1677c, align 4
  store i32 %v18_1677c, i32* %lr.global-to-local, align 4
  store i32 %v16_1677c, i32* %r1.global-to-local, align 4
  %v7_16780 = add i32 %v6_16780, -16
  %v8_16780 = inttoptr i32 %v7_16780 to i32*
  store i32 %v9_1677c, i32* %v8_16780, align 4
  %v10_16780 = add i32 %v6_16780, -12
  %v11_16780 = inttoptr i32 %v10_16780 to i32*
  %v12_16780 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16780, i32* %v11_16780, align 4
  %v13_16780 = add i32 %v6_16780, -8
  %v14_16780 = inttoptr i32 %v13_16780 to i32*
  %v15_16780 = load i32, i32* @ip, align 4
  store i32 %v15_16780, i32* %v14_16780, align 4
  %v16_16780 = add i32 %v6_16780, -4
  %v17_16780 = inttoptr i32 %v16_16780 to i32*
  %v18_16780 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16780, i32* %v17_16780, align 4
  store i32 %v7_16780, i32* %r0.global-to-local, align 4
  %v6_16784 = load i32, i32* %r2.global-to-local, align 4
  %v7_16784 = add i32 %v6_16784, -16
  store i32 %v7_16784, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_16778, %bb138
  %v6_16790 = phi i32 [ %v7_16780, %bb138 ], [ %v6_16780, %dec_label_pc_16778 ]
  %v0_16788 = phi i32 [ %v7_16784, %bb138 ], [ %v0_16788.pr, %dec_label_pc_16778 ]
  %v4_16788 = add i32 %v0_16788, 20
  store i32 %v4_16788, i32* %r2.global-to-local, align 4
  %v6_16788 = sub i32 0, %v0_16788
  %v7_16788 = and i32 %v4_16788, %v6_16788
  %v8_16788 = icmp slt i32 %v7_16788, 0
  store i1 %v8_16788, i1* %cpsr_v.global-to-local, align 1
  %v9_16788 = icmp slt i32 %v4_16788, 0
  store i1 %v9_16788, i1* %cpsr_n.global-to-local, align 1
  %v10_16788 = icmp eq i32 %v4_16788, 0
  store i1 %v10_16788, i1* %cpsr_z.global-to-local, align 1
  %v5_1678c = icmp slt i32 %v0_16788, -20
  br i1 %v5_1678c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1678c = load i32, i32* %r1.global-to-local, align 4
  %v7_1678c = add i32 %v6_1678c, -4
  %v8_1678c = inttoptr i32 %v7_1678c to i32*
  %v9_1678c = load i32, i32* %v8_1678c, align 4
  store i32 %v9_1678c, i32* %r3.global-to-local, align 4
  %v10_1678c = add i32 %v6_1678c, -8
  %v11_1678c = inttoptr i32 %v10_1678c to i32*
  %v12_1678c = load i32, i32* %v11_1678c, align 4
  store i32 %v12_1678c, i32* @ip, align 4
  %v13_1678c = add i32 %v6_1678c, -12
  %v14_1678c = inttoptr i32 %v13_1678c to i32*
  %v15_1678c = load i32, i32* %v14_1678c, align 4
  store i32 %v15_1678c, i32* %lr.global-to-local, align 4
  store i32 %v13_1678c, i32* %r1.global-to-local, align 4
  %v7_16790 = add i32 %v6_16790, -12
  %v8_16790 = inttoptr i32 %v7_16790 to i32*
  store i32 %v9_1678c, i32* %v8_16790, align 4
  %v10_16790 = add i32 %v6_16790, -8
  %v11_16790 = inttoptr i32 %v10_16790 to i32*
  %v12_16790 = load i32, i32* @ip, align 4
  store i32 %v12_16790, i32* %v11_16790, align 4
  %v13_16790 = add i32 %v6_16790, -4
  %v14_16790 = inttoptr i32 %v13_16790 to i32*
  %v15_16790 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16790, i32* %v14_16790, align 4
  store i32 %v7_16790, i32* %r0.global-to-local, align 4
  %v6_16794 = load i32, i32* %r2.global-to-local, align 4
  %v7_16794 = add i32 %v6_16794, -12
  store i32 %v7_16794, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_167b456 = phi i32 [ %v6_16790, %.thread13 ], [ %v7_16790, %bb139 ]
  %v0_1679c54 = phi i32 [ %v4_16788, %.thread13 ], [ %v7_16794, %bb139 ]
  %v2_16798 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16798, i32* @r4, align 4
  store i32 %v6_16754, i32* @lr, align 4
  br label %dec_label_pc_1679c

dec_label_pc_1679c:                               ; preds = %dec_label_pc_1674c, %.thread15
  %v7_167ac = phi i32 [ %v0_1676448, %dec_label_pc_1674c ], [ %v6_167b456, %.thread15 ]
  %v0_1679c = phi i32 [ %v2_1674c, %dec_label_pc_1674c ], [ %v0_1679c54, %.thread15 ]
  %v2_1679c = add i32 %v0_1679c, 8
  store i32 %v2_1679c, i32* %r2.global-to-local, align 4
  %v4_1679c = sub i32 0, %v0_1679c
  %v5_1679c = and i32 %v2_1679c, %v4_1679c
  %v6_1679c = icmp slt i32 %v5_1679c, 0
  store i1 %v6_1679c, i1* %cpsr_v.global-to-local, align 1
  %v7_1679c = icmp slt i32 %v2_1679c, 0
  store i1 %v7_1679c, i1* %cpsr_n.global-to-local, align 1
  %v8_1679c = icmp eq i32 %v2_1679c, 0
  store i1 %v8_1679c, i1* %cpsr_z.global-to-local, align 1
  %v5_167a0 = icmp slt i32 %v0_1679c, -8
  br i1 %v5_167a0, label %bb141, label %dec_label_pc_167a4

dec_label_pc_167a4:                               ; preds = %dec_label_pc_1679c
  %v6_167a4 = add i32 %v0_1679c, 4
  store i32 %v6_167a4, i32* %r2.global-to-local, align 4
  %v8_167a4 = sub i32 -5, %v0_1679c
  %v9_167a4 = and i32 %v8_167a4, %v2_1679c
  %v10_167a4 = icmp slt i32 %v9_167a4, 0
  store i1 %v10_167a4, i1* %cpsr_v.global-to-local, align 1
  %v11_167a4 = icmp slt i32 %v6_167a4, 0
  store i1 %v11_167a4, i1* %cpsr_n.global-to-local, align 1
  %v12_167a4 = icmp eq i32 %v2_1679c, 4
  store i1 %v12_167a4, i1* %cpsr_z.global-to-local, align 1
  %v5_167a8 = icmp slt i32 %v2_1679c, 4
  %v6_167a8 = load i32, i32* %r1.global-to-local, align 4
  %v7_167a8 = add i32 %v6_167a8, -4
  %v8_167a8 = inttoptr i32 %v7_167a8 to i32*
  %v9_167a8 = load i32, i32* %v8_167a8, align 4
  store i32 %v9_167a8, i32* %r3.global-to-local, align 4
  br i1 %v5_167a8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_167a4
  store i32 %v7_167a8, i32* %r1.global-to-local, align 4
  %v8_167ac = add i32 %v7_167ac, -4
  %v9_167ac = inttoptr i32 %v8_167ac to i32*
  store i32 %v9_167a8, i32* %v9_167ac, align 4
  %v10_167ac = load i32, i32* %r0.global-to-local, align 4
  %v11_167ac = add i32 %v10_167ac, -4
  store i32 %v11_167ac, i32* %r0.global-to-local, align 4
  %v0_167bc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_167a4
  %v10_167b0 = add i32 %v6_167a8, -8
  %v11_167b0 = inttoptr i32 %v10_167b0 to i32*
  %v12_167b0 = load i32, i32* %v11_167b0, align 4
  store i32 %v12_167b0, i32* @ip, align 4
  store i32 %v10_167b0, i32* %r1.global-to-local, align 4
  %v7_167b4 = add i32 %v7_167ac, -8
  %v8_167b4 = inttoptr i32 %v7_167b4 to i32*
  store i32 %v9_167a8, i32* %v8_167b4, align 4
  %v10_167b4 = add i32 %v7_167ac, -4
  %v11_167b4 = inttoptr i32 %v10_167b4 to i32*
  %v12_167b4 = load i32, i32* @ip, align 4
  store i32 %v12_167b4, i32* %v11_167b4, align 4
  store i32 %v7_167b4, i32* %r0.global-to-local, align 4
  %v6_167b8 = load i32, i32* %r2.global-to-local, align 4
  %v7_167b8 = add i32 %v6_167b8, -4
  store i32 %v7_167b8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1672c, %dec_label_pc_1679c, %dec_label_pc_16960, %dec_label_pc_168f4, %dec_label_pc_16888, %bb140
  %v2_167c0 = phi i32 [ %v11_167ac, %.thread19 ], [ %v0_1685831, %.thread25 ], [ %v2_16730, %dec_label_pc_1672c ], [ %v7_167ac, %dec_label_pc_1679c ], [ %v2_167cc64, %dec_label_pc_16960 ], [ %v2_167cc63, %dec_label_pc_168f4 ], [ %v2_167cc62, %dec_label_pc_16888 ], [ %v7_167b4, %bb140 ]
  %v0_167bc = phi i32 [ %v0_167bc.pre, %.thread19 ], [ %v2_16800, %.thread25 ], [ %v2_16734, %dec_label_pc_1672c ], [ %v2_1679c, %dec_label_pc_1679c ], [ %v0_167bc60, %dec_label_pc_16960 ], [ %v0_167bc59, %dec_label_pc_168f4 ], [ %v0_167bc58, %dec_label_pc_16888 ], [ %v7_167b8, %bb140 ]
  %v1_167bc = add i32 %v0_167bc, 4
  store i32 %v1_167bc, i32* %r2.global-to-local, align 4
  %v3_167bc = sub i32 0, %v0_167bc
  %v4_167bc = and i32 %v1_167bc, %v3_167bc
  %v5_167bc = icmp slt i32 %v4_167bc, 0
  store i1 %v5_167bc, i1* %cpsr_v.global-to-local, align 1
  %v6_167bc = icmp slt i32 %v1_167bc, 0
  store i1 %v6_167bc, i1* %cpsr_n.global-to-local, align 1
  %v7_167bc = icmp eq i32 %v1_167bc, 0
  store i1 %v7_167bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_167bc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_167c4 = add i32 %v0_167bc, 2
  %v3_167c4 = sub i32 -3, %v0_167bc
  %v4_167c4 = and i32 %v3_167c4, %v1_167bc
  %v5_167c4 = icmp slt i32 %v4_167c4, 0
  store i1 %v5_167c4, i1* %cpsr_v.global-to-local, align 1
  %v6_167c4 = icmp slt i32 %v1_167c4, 0
  store i1 %v6_167c4, i1* %cpsr_n.global-to-local, align 1
  %v7_167c4 = icmp eq i32 %v1_167bc, 2
  store i1 %v7_167c4, i1* %cpsr_z.global-to-local, align 1
  %v0_167c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_167c8 = add i32 %v0_167c8, -1
  %v2_167c8 = inttoptr i32 %v1_167c8 to i8*
  %v3_167c8 = load i8, i8* %v2_167c8, align 1
  %v4_167c8 = zext i8 %v3_167c8 to i32
  store i32 %v4_167c8, i32* %r3.global-to-local, align 4
  store i32 %v1_167c8, i32* %r1.global-to-local, align 4
  %v3_167cc = add i32 %v2_167c0, -1
  %v4_167cc = inttoptr i32 %v3_167cc to i8*
  store i8 %v3_167c8, i8* %v4_167cc, align 1
  %v5_167cc = load i32, i32* %r0.global-to-local, align 4
  %v6_167cc = add i32 %v5_167cc, -1
  store i32 %v6_167cc, i32* %r0.global-to-local, align 4
  %v0_167d0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_167d0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_167d0 = xor i1 %v0_167d0, %v1_167d0
  br i1 %v2_167d0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_167d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_167d0 = add i32 %v3_167d0, -1
  %v5_167d0 = inttoptr i32 %v4_167d0 to i8*
  %v6_167d0 = load i8, i8* %v5_167d0, align 1
  %v7_167d0 = zext i8 %v6_167d0 to i32
  store i32 %v7_167d0, i32* %r3.global-to-local, align 4
  store i32 %v4_167d0, i32* %r1.global-to-local, align 4
  %v6_167d4 = add i32 %v5_167cc, -2
  %v7_167d4 = inttoptr i32 %v6_167d4 to i8*
  store i8 %v6_167d0, i8* %v7_167d4, align 1
  %v8_167d4 = load i32, i32* %r0.global-to-local, align 4
  %v9_167d4 = add i32 %v8_167d4, -1
  store i32 %v9_167d4, i32* %r0.global-to-local, align 4
  %v1_167d8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_167d8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_167dc = phi i32 [ %v9_167d4, %bb143 ], [ %v6_167cc, %bb142 ]
  %v2_167dc = phi i1 [ %v2_167d8.pre, %bb143 ], [ %v1_167d0, %bb142 ]
  %v1_167dc = phi i1 [ %v1_167d8.pre, %bb143 ], [ %v0_167d0, %bb142 ]
  %v0_167d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_167d8 = xor i1 %v2_167dc, %v1_167dc
  %v4_167d8 = or i1 %v0_167d8, %v3_167d8
  br i1 %v4_167d8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_167d8 = load i32, i32* %r1.global-to-local, align 4
  %v6_167d8 = add i32 %v5_167d8, -1
  %v7_167d8 = inttoptr i32 %v6_167d8 to i8*
  %v8_167d8 = load i8, i8* %v7_167d8, align 1
  %v9_167d8 = zext i8 %v8_167d8 to i32
  store i32 %v9_167d8, i32* %r3.global-to-local, align 4
  store i32 %v6_167d8, i32* %r1.global-to-local, align 4
  %v8_167dc = add i32 %v7_167dc, -1
  %v9_167dc = inttoptr i32 %v8_167dc to i8*
  store i8 %v8_167d8, i8* %v9_167dc, align 1
  %v10_167dc = load i32, i32* %r0.global-to-local, align 4
  %v11_167dc = add i32 %v10_167dc, -1
  store i32 %v11_167dc, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_167e4:                               ; preds = %dec_label_pc_1673c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_167e4 = icmp eq i32 %v1_1673c, 1
  store i1 %v8_167e4, i1* %cpsr_n.global-to-local, align 1
  %v9_167e4 = icmp eq i32 %v1_1673c, 2
  store i1 %v9_167e4, i1* %cpsr_z.global-to-local, align 1
  %v1_167e8 = add i32 %v2_1672c, -1
  %v2_167e8 = inttoptr i32 %v1_167e8 to i8*
  %v3_167e8 = load i8, i8* %v2_167e8, align 1
  %v4_167e8 = zext i8 %v3_167e8 to i32
  store i32 %v4_167e8, i32* %r3.global-to-local, align 4
  store i32 %v1_167e8, i32* %r1.global-to-local, align 4
  %v3_167ec = add i32 %v2_16730, -1
  %v4_167ec = inttoptr i32 %v3_167ec to i8*
  store i8 %v3_167e8, i8* %v4_167ec, align 1
  %v5_167ec = load i32, i32* %r0.global-to-local, align 4
  %v6_167ec = add i32 %v5_167ec, -1
  store i32 %v6_167ec, i32* %r0.global-to-local, align 4
  br i1 %v8_167e4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_167e4
  %v6_167f0 = load i32, i32* %r1.global-to-local, align 4
  %v7_167f0 = add i32 %v6_167f0, -1
  %v8_167f0 = inttoptr i32 %v7_167f0 to i8*
  %v9_167f0 = load i8, i8* %v8_167f0, align 1
  %v10_167f0 = zext i8 %v9_167f0 to i32
  store i32 %v10_167f0, i32* %r3.global-to-local, align 4
  store i32 %v7_167f0, i32* %r1.global-to-local, align 4
  %v9_167f4 = add i32 %v5_167ec, -2
  %v10_167f4 = inttoptr i32 %v9_167f4 to i8*
  store i8 %v9_167f0, i8* %v10_167f4, align 1
  %v11_167f4 = load i32, i32* %r0.global-to-local, align 4
  %v12_167f4 = add i32 %v11_167f4, -1
  store i32 %v12_167f4, i32* %r0.global-to-local, align 4
  br i1 %v9_167e4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_167f8 = load i32, i32* %r1.global-to-local, align 4
  %v9_167f8 = add i32 %v8_167f8, -1
  %v10_167f8 = inttoptr i32 %v9_167f8 to i8*
  %v11_167f8 = load i8, i8* %v10_167f8, align 1
  %v12_167f8 = zext i8 %v11_167f8 to i32
  store i32 %v12_167f8, i32* %r3.global-to-local, align 4
  store i32 %v9_167f8, i32* %r1.global-to-local, align 4
  %v11_167fc = add i32 %v11_167f4, -2
  %v12_167fc = inttoptr i32 %v11_167fc to i8*
  store i8 %v11_167f8, i8* %v12_167fc, align 1
  %v13_167fc = load i32, i32* %r0.global-to-local, align 4
  %v14_167fc = add i32 %v13_167fc, -1
  store i32 %v14_167fc, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_167e4, %bb146
  %v0_1685831 = phi i32 [ %v12_167f4, %bb145 ], [ %v6_167ec, %dec_label_pc_167e4 ], [ %v14_167fc, %bb146 ]
  %v0_16800 = load i32, i32* %r2.global-to-local, align 4
  %v1_16800 = load i32, i32* @ip, align 4
  %v2_16800 = sub i32 %v0_16800, %v1_16800
  store i32 %v2_16800, i32* %r2.global-to-local, align 4
  %v4_16800 = xor i32 %v1_16800, %v0_16800
  %v5_16800 = xor i32 %v2_16800, %v0_16800
  %v6_16800 = and i32 %v5_16800, %v4_16800
  %v7_16800 = icmp slt i32 %v6_16800, 0
  store i1 %v7_16800, i1* %cpsr_v.global-to-local, align 1
  %v8_16800 = icmp slt i32 %v2_16800, 0
  store i1 %v8_16800, i1* %cpsr_n.global-to-local, align 1
  %v9_16800 = icmp eq i32 %v0_16800, %v1_16800
  store i1 %v9_16800, i1* %cpsr_z.global-to-local, align 1
  %v5_16804 = icmp slt i32 %v0_16800, %v1_16800
  br i1 %v5_16804, label %bb141, label %dec_label_pc_16808

dec_label_pc_16808:                               ; preds = %.thread25
  %v0_16808 = load i32, i32* %r1.global-to-local, align 4
  %v1_16808 = urem i32 %v0_16808, 4
  store i32 %v1_16808, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16808 = icmp eq i32 %v1_16808, 0
  store i1 %v2_16808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16808, label %dec_label_pc_1674c, label %dec_label_pc_16810

dec_label_pc_16810:                               ; preds = %dec_label_pc_16744, %dec_label_pc_16808
  %v0_1685830 = phi i32 [ %v2_16730, %dec_label_pc_16744 ], [ %v0_1685831, %dec_label_pc_16808 ]
  %v0_16904 = phi i32 [ %v2_16734, %dec_label_pc_16744 ], [ %v2_16800, %dec_label_pc_16808 ]
  %v0_16810 = phi i32 [ %v2_1672c, %dec_label_pc_16744 ], [ %v0_16808, %dec_label_pc_16808 ]
  %v0_16818 = phi i32 [ %v1_16744, %dec_label_pc_16744 ], [ %v1_16808, %dec_label_pc_16808 ]
  %v1_16810 = and i32 %v0_16810, -4
  store i32 %v1_16810, i32* %r1.global-to-local, align 4
  %v1_16814 = inttoptr i32 %v1_16810 to i32*
  %v2_16814 = load i32, i32* %v1_16814, align 4
  store i32 %v2_16814, i32* %r3.global-to-local, align 4
  %v7_16818 = icmp ult i32 %v0_16818, 2
  %v2_168fc = add i32 %v0_16904, -12
  %v4_168fc = sub i32 11, %v0_16904
  %v5_168fc = and i32 %v4_168fc, %v0_16904
  %v6_168fc = icmp slt i32 %v5_168fc, 0
  store i1 %v6_168fc, i1* %cpsr_v.global-to-local, align 1
  %v7_168fc = icmp slt i32 %v2_168fc, 0
  store i1 %v7_168fc, i1* %cpsr_n.global-to-local, align 1
  %v8_168fc = icmp eq i32 %v0_16904, 12
  store i1 %v8_168fc, i1* %cpsr_z.global-to-local, align 1
  %v5_16900 = icmp slt i32 %v0_16904, 12
  br i1 %v7_16818, label %dec_label_pc_168fc, label %dec_label_pc_16820

dec_label_pc_16820:                               ; preds = %dec_label_pc_16810
  %v8_16818 = icmp eq i32 %v0_16818, 2
  br i1 %v8_16818, label %dec_label_pc_16890, label %dec_label_pc_16824

dec_label_pc_16824:                               ; preds = %dec_label_pc_16820
  br i1 %v5_16900, label %dec_label_pc_16870, label %dec_label_pc_1682c

dec_label_pc_1682c:                               ; preds = %dec_label_pc_16824
  store i32 %v2_168fc, i32* %r2.global-to-local, align 4
  %v3_16830 = load i32, i32* @r4, align 4
  store i32 %v3_16830, i32* %stack_var_-12, align 4
  %v6_16830 = load i32, i32* @r5, align 4
  store i32 %v6_16830, i32* %stack_var_-8, align 4
  %v9_16830 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16834

dec_label_pc_16834:                               ; preds = %dec_label_pc_16834.dec_label_pc_16834_crit_edge, %dec_label_pc_1682c
  %v0_16858 = phi i32 [ %v1_16858, %dec_label_pc_16834.dec_label_pc_16834_crit_edge ], [ %v0_1685830, %dec_label_pc_1682c ]
  %v0_16838 = phi i32 [ %v0_16838.pre, %dec_label_pc_16834.dec_label_pc_16834_crit_edge ], [ %v1_16810, %dec_label_pc_1682c ]
  %v0_16834 = phi i32 [ %v0_16834.pre, %dec_label_pc_16834.dec_label_pc_16834_crit_edge ], [ %v2_16814, %dec_label_pc_1682c ]
  %v3_16834 = mul i32 %v0_16834, 256
  store i32 %v3_16834, i32* %lr.global-to-local, align 4
  %v1_16838 = add i32 %v0_16838, -4
  %v2_16838 = inttoptr i32 %v1_16838 to i32*
  %v3_16838 = load i32, i32* %v2_16838, align 4
  store i32 %v3_16838, i32* %r3.global-to-local, align 4
  %v4_16838 = add i32 %v0_16838, -8
  %v5_16838 = inttoptr i32 %v4_16838 to i32*
  %v6_16838 = load i32, i32* %v5_16838, align 4
  store i32 %v6_16838, i32* %r4.global-to-local, align 4
  %v7_16838 = add i32 %v0_16838, -12
  %v8_16838 = inttoptr i32 %v7_16838 to i32*
  %v9_16838 = load i32, i32* %v8_16838, align 4
  store i32 %v9_16838, i32* %r5.global-to-local, align 4
  %v10_16838 = add i32 %v0_16838, -16
  %v11_16838 = inttoptr i32 %v10_16838 to i32*
  %v12_16838 = load i32, i32* %v11_16838, align 4
  store i32 %v10_16838, i32* %r1.global-to-local, align 4
  %v4_1683c = udiv i32 %v12_16838, 16777216
  %v5_1683c = or i32 %v4_1683c, %v3_16834
  store i32 %v5_1683c, i32* %lr.global-to-local, align 4
  %v3_16840 = mul i32 %v12_16838, 256
  %v4_16844 = udiv i32 %v9_16838, 16777216
  %v5_16844 = or i32 %v3_16840, %v4_16844
  store i32 %v5_16844, i32* @ip, align 4
  %v3_16848 = mul i32 %v9_16838, 256
  %v4_1684c = udiv i32 %v6_16838, 16777216
  %v5_1684c = or i32 %v3_16848, %v4_1684c
  store i32 %v5_1684c, i32* %r5.global-to-local, align 4
  %v3_16850 = mul i32 %v6_16838, 256
  %v4_16854 = udiv i32 %v3_16838, 16777216
  %v5_16854 = or i32 %v3_16850, %v4_16854
  store i32 %v5_16854, i32* %r4.global-to-local, align 4
  %v1_16858 = add i32 %v0_16858, -16
  %v2_16858 = inttoptr i32 %v1_16858 to i32*
  store i32 %v5_16854, i32* %v2_16858, align 4
  %v4_16858 = add i32 %v0_16858, -12
  %v5_16858 = inttoptr i32 %v4_16858 to i32*
  %v6_16858 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16858, i32* %v5_16858, align 4
  %v7_16858 = add i32 %v0_16858, -8
  %v8_16858 = inttoptr i32 %v7_16858 to i32*
  %v9_16858 = load i32, i32* @ip, align 4
  store i32 %v9_16858, i32* %v8_16858, align 4
  %v10_16858 = add i32 %v0_16858, -4
  %v11_16858 = inttoptr i32 %v10_16858 to i32*
  %v12_16858 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16858, i32* %v11_16858, align 4
  store i32 %v1_16858, i32* %r0.global-to-local, align 4
  %v0_1685c = load i32, i32* %r2.global-to-local, align 4
  %v2_1685c = add i32 %v0_1685c, -16
  store i32 %v2_1685c, i32* %r2.global-to-local, align 4
  %v6_16860 = icmp slt i32 %v0_1685c, 16
  br i1 %v6_16860, label %dec_label_pc_16864, label %dec_label_pc_16834.dec_label_pc_16834_crit_edge

dec_label_pc_16834.dec_label_pc_16834_crit_edge:  ; preds = %dec_label_pc_16834
  %v0_16834.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_16838.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16834

dec_label_pc_16864:                               ; preds = %dec_label_pc_16834
  %v2_16864 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16864, i32* @r4, align 4
  %v5_16864 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_16864, i32* @r5, align 4
  store i32 %v9_16830, i32* @lr, align 4
  %v2_16868 = add i32 %v0_1685c, -4
  store i32 %v2_16868, i32* %r2.global-to-local, align 4
  %v4_16868 = add i32 %v0_1685c, 2147483632
  %v5_16868 = and i32 %v2_16868, %v4_16868
  %v6_16868 = icmp slt i32 %v5_16868, 0
  store i1 %v6_16868, i1* %cpsr_v.global-to-local, align 1
  %v7_16868 = icmp slt i32 %v2_16868, 0
  store i1 %v7_16868, i1* %cpsr_n.global-to-local, align 1
  %v8_16868 = icmp eq i32 %v2_16868, 0
  store i1 %v8_16868, i1* %cpsr_z.global-to-local, align 1
  %v5_1686c = icmp slt i32 %v2_1685c, -12
  br i1 %v5_1686c, label %dec_label_pc_16888, label %dec_label_pc_16870

dec_label_pc_16870:                               ; preds = %dec_label_pc_16864, %dec_label_pc_16824, %dec_label_pc_16870
  %v1_1687c = phi i32 [ %v5_1687c, %dec_label_pc_16870 ], [ %v1_16858, %dec_label_pc_16864 ], [ %v0_1685830, %dec_label_pc_16824 ]
  %v0_16870 = load i32, i32* %r3.global-to-local, align 4
  %v3_16870 = mul i32 %v0_16870, 256
  store i32 %v3_16870, i32* %ip.global-to-local, align 4
  %v0_16874 = load i32, i32* %r1.global-to-local, align 4
  %v1_16874 = add i32 %v0_16874, -4
  %v2_16874 = inttoptr i32 %v1_16874 to i32*
  %v3_16874 = load i32, i32* %v2_16874, align 4
  store i32 %v3_16874, i32* %r3.global-to-local, align 4
  store i32 %v1_16874, i32* %r1.global-to-local, align 4
  %v4_16878 = udiv i32 %v3_16874, 16777216
  %v5_16878 = or i32 %v4_16878, %v3_16870
  store i32 %v5_16878, i32* @ip, align 4
  %v2_1687c = add i32 %v1_1687c, -4
  %v3_1687c = inttoptr i32 %v2_1687c to i32*
  store i32 %v5_16878, i32* %v3_1687c, align 4
  %v4_1687c = load i32, i32* %r0.global-to-local, align 4
  %v5_1687c = add i32 %v4_1687c, -4
  store i32 %v5_1687c, i32* %r0.global-to-local, align 4
  %v0_16880 = load i32, i32* %r2.global-to-local, align 4
  %v2_16880 = add i32 %v0_16880, -4
  store i32 %v2_16880, i32* %r2.global-to-local, align 4
  %v6_16884 = icmp slt i32 %v0_16880, 4
  br i1 %v6_16884, label %dec_label_pc_16888.loopexit, label %dec_label_pc_16870

dec_label_pc_16888.loopexit:                      ; preds = %dec_label_pc_16870
  %v4_16880 = sub i32 3, %v0_16880
  %v5_16880 = and i32 %v4_16880, %v0_16880
  %v6_16880 = icmp slt i32 %v5_16880, 0
  %v7_16880 = icmp slt i32 %v2_16880, 0
  store i1 %v6_16880, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16880, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16888

dec_label_pc_16888:                               ; preds = %dec_label_pc_16888.loopexit, %dec_label_pc_16864
  %v2_167cc62 = phi i32 [ %v5_1687c, %dec_label_pc_16888.loopexit ], [ %v1_16858, %dec_label_pc_16864 ]
  %v0_167bc58 = phi i32 [ %v2_16880, %dec_label_pc_16888.loopexit ], [ %v2_16868, %dec_label_pc_16864 ]
  %v0_16888 = load i32, i32* %r1.global-to-local, align 4
  %v1_16888 = add i32 %v0_16888, 3
  store i32 %v1_16888, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_16890:                               ; preds = %dec_label_pc_16820
  br i1 %v5_16900, label %dec_label_pc_168dc, label %dec_label_pc_16898

dec_label_pc_16898:                               ; preds = %dec_label_pc_16890
  store i32 %v2_168fc, i32* %r2.global-to-local, align 4
  %v3_1689c = load i32, i32* @r4, align 4
  store i32 %v3_1689c, i32* %stack_var_-12, align 4
  %v6_1689c = load i32, i32* @r5, align 4
  store i32 %v6_1689c, i32* %stack_var_-8, align 4
  %v9_1689c = load i32, i32* @lr, align 4
  br label %dec_label_pc_168a0

dec_label_pc_168a0:                               ; preds = %dec_label_pc_168a0.dec_label_pc_168a0_crit_edge, %dec_label_pc_16898
  %v0_168c4 = phi i32 [ %v1_168c4, %dec_label_pc_168a0.dec_label_pc_168a0_crit_edge ], [ %v0_1685830, %dec_label_pc_16898 ]
  %v0_168a4 = phi i32 [ %v0_168a4.pre, %dec_label_pc_168a0.dec_label_pc_168a0_crit_edge ], [ %v1_16810, %dec_label_pc_16898 ]
  %v0_168a0 = phi i32 [ %v0_168a0.pre, %dec_label_pc_168a0.dec_label_pc_168a0_crit_edge ], [ %v2_16814, %dec_label_pc_16898 ]
  %v3_168a0 = mul i32 %v0_168a0, 65536
  store i32 %v3_168a0, i32* %lr.global-to-local, align 4
  %v1_168a4 = add i32 %v0_168a4, -4
  %v2_168a4 = inttoptr i32 %v1_168a4 to i32*
  %v3_168a4 = load i32, i32* %v2_168a4, align 4
  store i32 %v3_168a4, i32* %r3.global-to-local, align 4
  %v4_168a4 = add i32 %v0_168a4, -8
  %v5_168a4 = inttoptr i32 %v4_168a4 to i32*
  %v6_168a4 = load i32, i32* %v5_168a4, align 4
  store i32 %v6_168a4, i32* %r4.global-to-local, align 4
  %v7_168a4 = add i32 %v0_168a4, -12
  %v8_168a4 = inttoptr i32 %v7_168a4 to i32*
  %v9_168a4 = load i32, i32* %v8_168a4, align 4
  store i32 %v9_168a4, i32* %r5.global-to-local, align 4
  %v10_168a4 = add i32 %v0_168a4, -16
  %v11_168a4 = inttoptr i32 %v10_168a4 to i32*
  %v12_168a4 = load i32, i32* %v11_168a4, align 4
  store i32 %v10_168a4, i32* %r1.global-to-local, align 4
  %v4_168a8 = udiv i32 %v12_168a4, 65536
  %v5_168a8 = or i32 %v4_168a8, %v3_168a0
  store i32 %v5_168a8, i32* %lr.global-to-local, align 4
  %v3_168ac = mul i32 %v12_168a4, 65536
  %v4_168b0 = udiv i32 %v9_168a4, 65536
  %v5_168b0 = or i32 %v3_168ac, %v4_168b0
  store i32 %v5_168b0, i32* @ip, align 4
  %v3_168b4 = mul i32 %v9_168a4, 65536
  %v4_168b8 = udiv i32 %v6_168a4, 65536
  %v5_168b8 = or i32 %v3_168b4, %v4_168b8
  store i32 %v5_168b8, i32* %r5.global-to-local, align 4
  %v3_168bc = mul i32 %v6_168a4, 65536
  %v4_168c0 = udiv i32 %v3_168a4, 65536
  %v5_168c0 = or i32 %v3_168bc, %v4_168c0
  store i32 %v5_168c0, i32* %r4.global-to-local, align 4
  %v1_168c4 = add i32 %v0_168c4, -16
  %v2_168c4 = inttoptr i32 %v1_168c4 to i32*
  store i32 %v5_168c0, i32* %v2_168c4, align 4
  %v4_168c4 = add i32 %v0_168c4, -12
  %v5_168c4 = inttoptr i32 %v4_168c4 to i32*
  %v6_168c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_168c4, i32* %v5_168c4, align 4
  %v7_168c4 = add i32 %v0_168c4, -8
  %v8_168c4 = inttoptr i32 %v7_168c4 to i32*
  %v9_168c4 = load i32, i32* @ip, align 4
  store i32 %v9_168c4, i32* %v8_168c4, align 4
  %v10_168c4 = add i32 %v0_168c4, -4
  %v11_168c4 = inttoptr i32 %v10_168c4 to i32*
  %v12_168c4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_168c4, i32* %v11_168c4, align 4
  store i32 %v1_168c4, i32* %r0.global-to-local, align 4
  %v0_168c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_168c8 = add i32 %v0_168c8, -16
  store i32 %v2_168c8, i32* %r2.global-to-local, align 4
  %v6_168cc = icmp slt i32 %v0_168c8, 16
  br i1 %v6_168cc, label %dec_label_pc_168d0, label %dec_label_pc_168a0.dec_label_pc_168a0_crit_edge

dec_label_pc_168a0.dec_label_pc_168a0_crit_edge:  ; preds = %dec_label_pc_168a0
  %v0_168a0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_168a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_168a0

dec_label_pc_168d0:                               ; preds = %dec_label_pc_168a0
  %v2_168d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_168d0, i32* @r4, align 4
  %v5_168d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_168d0, i32* @r5, align 4
  store i32 %v9_1689c, i32* @lr, align 4
  %v2_168d4 = add i32 %v0_168c8, -4
  store i32 %v2_168d4, i32* %r2.global-to-local, align 4
  %v4_168d4 = add i32 %v0_168c8, 2147483632
  %v5_168d4 = and i32 %v2_168d4, %v4_168d4
  %v6_168d4 = icmp slt i32 %v5_168d4, 0
  store i1 %v6_168d4, i1* %cpsr_v.global-to-local, align 1
  %v7_168d4 = icmp slt i32 %v2_168d4, 0
  store i1 %v7_168d4, i1* %cpsr_n.global-to-local, align 1
  %v8_168d4 = icmp eq i32 %v2_168d4, 0
  store i1 %v8_168d4, i1* %cpsr_z.global-to-local, align 1
  %v5_168d8 = icmp slt i32 %v2_168c8, -12
  br i1 %v5_168d8, label %dec_label_pc_168f4, label %dec_label_pc_168dc

dec_label_pc_168dc:                               ; preds = %dec_label_pc_168d0, %dec_label_pc_16890, %dec_label_pc_168dc
  %v1_168e8 = phi i32 [ %v5_168e8, %dec_label_pc_168dc ], [ %v1_168c4, %dec_label_pc_168d0 ], [ %v0_1685830, %dec_label_pc_16890 ]
  %v0_168dc = load i32, i32* %r3.global-to-local, align 4
  %v3_168dc = mul i32 %v0_168dc, 65536
  store i32 %v3_168dc, i32* %ip.global-to-local, align 4
  %v0_168e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_168e0 = add i32 %v0_168e0, -4
  %v2_168e0 = inttoptr i32 %v1_168e0 to i32*
  %v3_168e0 = load i32, i32* %v2_168e0, align 4
  store i32 %v3_168e0, i32* %r3.global-to-local, align 4
  store i32 %v1_168e0, i32* %r1.global-to-local, align 4
  %v4_168e4 = udiv i32 %v3_168e0, 65536
  %v5_168e4 = or i32 %v4_168e4, %v3_168dc
  store i32 %v5_168e4, i32* @ip, align 4
  %v2_168e8 = add i32 %v1_168e8, -4
  %v3_168e8 = inttoptr i32 %v2_168e8 to i32*
  store i32 %v5_168e4, i32* %v3_168e8, align 4
  %v4_168e8 = load i32, i32* %r0.global-to-local, align 4
  %v5_168e8 = add i32 %v4_168e8, -4
  store i32 %v5_168e8, i32* %r0.global-to-local, align 4
  %v0_168ec = load i32, i32* %r2.global-to-local, align 4
  %v2_168ec = add i32 %v0_168ec, -4
  store i32 %v2_168ec, i32* %r2.global-to-local, align 4
  %v6_168f0 = icmp slt i32 %v0_168ec, 4
  br i1 %v6_168f0, label %dec_label_pc_168f4.loopexit, label %dec_label_pc_168dc

dec_label_pc_168f4.loopexit:                      ; preds = %dec_label_pc_168dc
  %v4_168ec = sub i32 3, %v0_168ec
  %v5_168ec = and i32 %v4_168ec, %v0_168ec
  %v6_168ec = icmp slt i32 %v5_168ec, 0
  %v7_168ec = icmp slt i32 %v2_168ec, 0
  store i1 %v6_168ec, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_168ec, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_168f4

dec_label_pc_168f4:                               ; preds = %dec_label_pc_168f4.loopexit, %dec_label_pc_168d0
  %v2_167cc63 = phi i32 [ %v5_168e8, %dec_label_pc_168f4.loopexit ], [ %v1_168c4, %dec_label_pc_168d0 ]
  %v0_167bc59 = phi i32 [ %v2_168ec, %dec_label_pc_168f4.loopexit ], [ %v2_168d4, %dec_label_pc_168d0 ]
  %v0_168f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_168f4 = add i32 %v0_168f4, 2
  store i32 %v1_168f4, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_168fc:                               ; preds = %dec_label_pc_16810
  br i1 %v5_16900, label %dec_label_pc_16948, label %dec_label_pc_16904

dec_label_pc_16904:                               ; preds = %dec_label_pc_168fc
  store i32 %v2_168fc, i32* %r2.global-to-local, align 4
  %v3_16908 = load i32, i32* @r4, align 4
  store i32 %v3_16908, i32* %stack_var_-12, align 4
  %v6_16908 = load i32, i32* @r5, align 4
  store i32 %v6_16908, i32* %stack_var_-8, align 4
  %v9_16908 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1690c

dec_label_pc_1690c:                               ; preds = %dec_label_pc_1690c.dec_label_pc_1690c_crit_edge, %dec_label_pc_16904
  %v0_16930 = phi i32 [ %v1_16930, %dec_label_pc_1690c.dec_label_pc_1690c_crit_edge ], [ %v0_1685830, %dec_label_pc_16904 ]
  %v0_16910 = phi i32 [ %v0_16910.pre, %dec_label_pc_1690c.dec_label_pc_1690c_crit_edge ], [ %v1_16810, %dec_label_pc_16904 ]
  %v0_1690c = phi i32 [ %v0_1690c.pre, %dec_label_pc_1690c.dec_label_pc_1690c_crit_edge ], [ %v2_16814, %dec_label_pc_16904 ]
  %v3_1690c = mul i32 %v0_1690c, 16777216
  store i32 %v3_1690c, i32* %lr.global-to-local, align 4
  %v1_16910 = add i32 %v0_16910, -4
  %v2_16910 = inttoptr i32 %v1_16910 to i32*
  %v3_16910 = load i32, i32* %v2_16910, align 4
  store i32 %v3_16910, i32* %r3.global-to-local, align 4
  %v4_16910 = add i32 %v0_16910, -8
  %v5_16910 = inttoptr i32 %v4_16910 to i32*
  %v6_16910 = load i32, i32* %v5_16910, align 4
  store i32 %v6_16910, i32* %r4.global-to-local, align 4
  %v7_16910 = add i32 %v0_16910, -12
  %v8_16910 = inttoptr i32 %v7_16910 to i32*
  %v9_16910 = load i32, i32* %v8_16910, align 4
  store i32 %v9_16910, i32* %r5.global-to-local, align 4
  %v10_16910 = add i32 %v0_16910, -16
  %v11_16910 = inttoptr i32 %v10_16910 to i32*
  %v12_16910 = load i32, i32* %v11_16910, align 4
  store i32 %v10_16910, i32* %r1.global-to-local, align 4
  %v4_16914 = udiv i32 %v12_16910, 256
  %v5_16914 = or i32 %v4_16914, %v3_1690c
  store i32 %v5_16914, i32* %lr.global-to-local, align 4
  %v3_16918 = mul i32 %v12_16910, 16777216
  %v4_1691c = udiv i32 %v9_16910, 256
  %v5_1691c = or i32 %v3_16918, %v4_1691c
  store i32 %v5_1691c, i32* @ip, align 4
  %v3_16920 = mul i32 %v9_16910, 16777216
  %v4_16924 = udiv i32 %v6_16910, 256
  %v5_16924 = or i32 %v3_16920, %v4_16924
  store i32 %v5_16924, i32* %r5.global-to-local, align 4
  %v3_16928 = mul i32 %v6_16910, 16777216
  %v4_1692c = udiv i32 %v3_16910, 256
  %v5_1692c = or i32 %v3_16928, %v4_1692c
  store i32 %v5_1692c, i32* %r4.global-to-local, align 4
  %v1_16930 = add i32 %v0_16930, -16
  %v2_16930 = inttoptr i32 %v1_16930 to i32*
  store i32 %v5_1692c, i32* %v2_16930, align 4
  %v4_16930 = add i32 %v0_16930, -12
  %v5_16930 = inttoptr i32 %v4_16930 to i32*
  %v6_16930 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16930, i32* %v5_16930, align 4
  %v7_16930 = add i32 %v0_16930, -8
  %v8_16930 = inttoptr i32 %v7_16930 to i32*
  %v9_16930 = load i32, i32* @ip, align 4
  store i32 %v9_16930, i32* %v8_16930, align 4
  %v10_16930 = add i32 %v0_16930, -4
  %v11_16930 = inttoptr i32 %v10_16930 to i32*
  %v12_16930 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16930, i32* %v11_16930, align 4
  store i32 %v1_16930, i32* %r0.global-to-local, align 4
  %v0_16934 = load i32, i32* %r2.global-to-local, align 4
  %v2_16934 = add i32 %v0_16934, -16
  store i32 %v2_16934, i32* %r2.global-to-local, align 4
  %v6_16938 = icmp slt i32 %v0_16934, 16
  br i1 %v6_16938, label %dec_label_pc_1693c, label %dec_label_pc_1690c.dec_label_pc_1690c_crit_edge

dec_label_pc_1690c.dec_label_pc_1690c_crit_edge:  ; preds = %dec_label_pc_1690c
  %v0_1690c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_16910.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1690c

dec_label_pc_1693c:                               ; preds = %dec_label_pc_1690c
  %v2_1693c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1693c, i32* @r4, align 4
  %v5_1693c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1693c, i32* @r5, align 4
  store i32 %v9_16908, i32* @lr, align 4
  %v2_16940 = add i32 %v0_16934, -4
  store i32 %v2_16940, i32* %r2.global-to-local, align 4
  %v4_16940 = add i32 %v0_16934, 2147483632
  %v5_16940 = and i32 %v2_16940, %v4_16940
  %v6_16940 = icmp slt i32 %v5_16940, 0
  store i1 %v6_16940, i1* %cpsr_v.global-to-local, align 1
  %v7_16940 = icmp slt i32 %v2_16940, 0
  store i1 %v7_16940, i1* %cpsr_n.global-to-local, align 1
  %v8_16940 = icmp eq i32 %v2_16940, 0
  store i1 %v8_16940, i1* %cpsr_z.global-to-local, align 1
  %v5_16944 = icmp slt i32 %v2_16934, -12
  br i1 %v5_16944, label %dec_label_pc_16960, label %dec_label_pc_16948

dec_label_pc_16948:                               ; preds = %dec_label_pc_1693c, %dec_label_pc_168fc, %dec_label_pc_16948
  %v1_16954 = phi i32 [ %v5_16954, %dec_label_pc_16948 ], [ %v1_16930, %dec_label_pc_1693c ], [ %v0_1685830, %dec_label_pc_168fc ]
  %v0_16948 = load i32, i32* %r3.global-to-local, align 4
  %v3_16948 = mul i32 %v0_16948, 16777216
  store i32 %v3_16948, i32* %ip.global-to-local, align 4
  %v0_1694c = load i32, i32* %r1.global-to-local, align 4
  %v1_1694c = add i32 %v0_1694c, -4
  %v2_1694c = inttoptr i32 %v1_1694c to i32*
  %v3_1694c = load i32, i32* %v2_1694c, align 4
  store i32 %v3_1694c, i32* %r3.global-to-local, align 4
  store i32 %v1_1694c, i32* %r1.global-to-local, align 4
  %v4_16950 = udiv i32 %v3_1694c, 256
  %v5_16950 = or i32 %v4_16950, %v3_16948
  store i32 %v5_16950, i32* @ip, align 4
  %v2_16954 = add i32 %v1_16954, -4
  %v3_16954 = inttoptr i32 %v2_16954 to i32*
  store i32 %v5_16950, i32* %v3_16954, align 4
  %v4_16954 = load i32, i32* %r0.global-to-local, align 4
  %v5_16954 = add i32 %v4_16954, -4
  store i32 %v5_16954, i32* %r0.global-to-local, align 4
  %v0_16958 = load i32, i32* %r2.global-to-local, align 4
  %v2_16958 = add i32 %v0_16958, -4
  store i32 %v2_16958, i32* %r2.global-to-local, align 4
  %v6_1695c = icmp slt i32 %v0_16958, 4
  br i1 %v6_1695c, label %dec_label_pc_16960.loopexit, label %dec_label_pc_16948

dec_label_pc_16960.loopexit:                      ; preds = %dec_label_pc_16948
  %v4_16958 = sub i32 3, %v0_16958
  %v5_16958 = and i32 %v4_16958, %v0_16958
  %v6_16958 = icmp slt i32 %v5_16958, 0
  %v7_16958 = icmp slt i32 %v2_16958, 0
  store i1 %v6_16958, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16958, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16960

dec_label_pc_16960:                               ; preds = %dec_label_pc_16960.loopexit, %dec_label_pc_1693c
  %v2_167cc64 = phi i32 [ %v5_16954, %dec_label_pc_16960.loopexit ], [ %v1_16930, %dec_label_pc_1693c ]
  %v0_167bc60 = phi i32 [ %v2_16958, %dec_label_pc_16960.loopexit ], [ %v2_16940, %dec_label_pc_1693c ]
  %v0_16960 = load i32, i32* %r1.global-to-local, align 4
  %v1_16960 = add i32 %v0_16960, 1
  store i32 %v1_16960, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_16954, { 0, 2, 1 }
  uselistorder i32 %v3_16948, { 1, 0 }
  uselistorder i32 %v2_16940, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16930, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16910, { 1, 0 }
  uselistorder i32 %v3_1690c, { 1, 0 }
  uselistorder i32 %v0_16910, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16930, { 3, 2, 1, 0 }
  uselistorder i32 %v5_168e8, { 0, 2, 1 }
  uselistorder i32 %v3_168dc, { 1, 0 }
  uselistorder i32 %v2_168d4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_168c4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_168a4, { 1, 0 }
  uselistorder i32 %v3_168a0, { 1, 0 }
  uselistorder i32 %v0_168a4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_168c4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1687c, { 0, 2, 1 }
  uselistorder i32 %v3_16870, { 1, 0 }
  uselistorder i32 %v2_16868, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16858, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16838, { 1, 0 }
  uselistorder i32 %v3_16834, { 1, 0 }
  uselistorder i32 %v0_16838, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16858, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16900, { 2, 0, 1 }
  uselistorder i32 %v0_16818, { 1, 0 }
  uselistorder i32 %v0_16904, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1685830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16808, { 2, 1, 0 }
  uselistorder i32 %v0_16808, { 2, 0, 1 }
  uselistorder i32 %v2_16800, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16800, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16800, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1685831, { 2, 1, 0 }
  uselistorder i32 %v11_167dc, { 1, 0 }
  uselistorder i32 %v7_167dc, { 1, 0 }
  uselistorder i32 %v1_167bc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_167bc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_167c0, { 1, 0 }
  uselistorder i32 %v7_167b4, { 0, 2, 1 }
  uselistorder i32 %v10_167b0, { 1, 0 }
  uselistorder i32 %v9_167a8, { 1, 0, 2 }
  uselistorder i32 %v6_167a4, { 1, 0 }
  uselistorder i32 %v2_1679c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1679c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_167ac, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16790, { 0, 2, 1 }
  uselistorder i32 %v13_1678c, { 1, 0 }
  uselistorder i32 %v4_16788, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16788, { 2, 0, 1 }
  uselistorder i32 %v6_16790, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16780, { 0, 2, 1 }
  uselistorder i32 %v16_1677c, { 1, 0 }
  uselistorder i32 %v4_16778, { 1, 2, 0 }
  uselistorder i32 %v0_16788.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16780, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1676c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16768, { 1, 0 }
  uselistorder i32 %v1_16764, { 1, 0 }
  uselistorder i32 %v10_16760, { 1, 0 }
  uselistorder i32 %v0_16760, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16764, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16758, { 0, 2, 1 }
  uselistorder i32 %v2_1674c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1674c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1676448, { 1, 2, 0 }
  uselistorder i32 %v1_16744, { 2, 1, 0 }
  uselistorder i32 %v1_1673c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16734, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16730, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1672c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1672c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_16718, { 0, 2, 1 }
  uselistorder i32 %v3_1670c, { 1, 0 }
  uselistorder i32 %v2_16704, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_166f4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_166d4, { 1, 0, 2 }
  uselistorder i32 %v5_166d4, { 1, 0, 2 }
  uselistorder i32 %v2_166d4, { 1, 0, 2 }
  uselistorder i32 %v3_166d0, { 1, 0 }
  uselistorder i32 %v0_166d4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_166f4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_166ac, { 0, 2, 1 }
  uselistorder i32 %v3_166a0, { 1, 0 }
  uselistorder i32 %v2_16698, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_16688, { 1, 0, 3, 2 }
  uselistorder i32 %v8_16668, { 1, 0, 2 }
  uselistorder i32 %v5_16668, { 1, 0, 2 }
  uselistorder i32 %v2_16668, { 1, 0, 2 }
  uselistorder i32 %v3_16664, { 1, 0 }
  uselistorder i32 %v0_16668, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16688, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_16640, { 0, 2, 1 }
  uselistorder i32 %v3_16634, { 1, 0 }
  uselistorder i32 %v2_1662c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1661c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_165fc, { 1, 0, 2 }
  uselistorder i32 %v5_165fc, { 1, 0, 2 }
  uselistorder i32 %v2_165fc, { 1, 0, 2 }
  uselistorder i32 %v3_165f8, { 1, 0 }
  uselistorder i32 %v0_165fc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1661c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_166c4, { 2, 0, 1 }
  uselistorder i32 %v0_166c8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1661c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_165cc, { 1, 0 }
  uselistorder i32 %v0_165cc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_165c4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_165c4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_165c4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1661c75, { 2, 1, 0 }
  uselistorder i32 %v1_165a4, { 1, 0, 2 }
  uselistorder i32 %v1_1657c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1657c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_16568, { 1, 0, 2 }
  uselistorder i32 %v6_16564, { 1, 0 }
  uselistorder i32 %v2_1655c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1655c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1656c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_16554, { 0, 2, 1 }
  uselistorder i32 %v3_16554, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16554, { 1, 0 }
  uselistorder i1 %v1_16554, { 1, 0 }
  uselistorder i32 %v3_16550, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16548, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_16534, { 1, 2, 0 }
  uselistorder i32 %v12_16528, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1651c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16520, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_16510, { 0, 2, 1 }
  uselistorder i32 %v2_16508, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16508, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_16500, { 1, 0 }
  uselistorder i32 %v1_164f8, { 2, 1, 0 }
  uselistorder i32 %v2_164f0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_164f0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_164e0, { 1, 0 }
  uselistorder i32 %v1_164e0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_164e0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 23, 16, 6, 17, 24, 18, 25, 19, 26, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 8, 7, 13, 9, 14, 10, 15, 11, 16, 12, 17, 18, 19, 23, 20, 24, 21, 25, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 64, 65, 66, 67, 1, 68, 0, 2, 69, 70, 71, 72, 73, 76, 74, 75, 77, 78, 79, 83, 84, 85, 86, 80, 81, 82, 87, 90, 91, 92, 88, 89, 93, 94, 95, 97, 96, 98, 3, 99, 101, 102, 100, 103, 4, 104, 106, 107, 105, 108, 109, 111, 112, 113, 110, 114, 115, 116, 117, 118, 120, 119, 122, 121, 123, 125, 124, 127, 126, 129, 128, 131, 130, 132, 134, 133, 136, 135, 137, 5, 138, 140, 141, 142, 139, 143, 6, 144, 148, 149, 150, 145, 146, 147, 152, 151 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 70, 63, 71, 64, 72, 65, 73, 74, 66, 75, 67, 76, 68, 77, 69, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 110, 114, 111, 115, 112, 116, 117, 119, 118, 125, 120, 126, 121, 127, 122, 128, 123, 129, 124, 130, 133, 134, 131, 132, 135, 136, 140, 137, 141, 138, 139, 142, 145, 146, 143, 144, 147, 148, 152, 149, 153, 150, 151, 154, 161, 155, 162, 163, 156, 164, 159, 165, 157, 166, 167, 158, 160, 168, 169, 173, 170, 174, 175, 171, 172, 176, 177, 178, 180, 179, 183, 181, 184, 182, 185, 186, 187 }
  uselistorder i32* @r5, { 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 271, 272, 273, 275, 798, 799, 800, 801, 802, 0, 803, 804, 666, 667, 668, 669, 670, 671, 606, 607, 608, 609, 610, 611, 612, 619, 613, 614, 615, 616, 617, 618, 672, 673, 674, 681, 682, 683, 684, 675, 676, 677, 678, 679, 680, 159, 160, 161, 276, 277, 4, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 162, 163, 164, 165, 166, 167, 122, 168, 149, 169, 170, 171, 3, 2, 172, 173, 123, 124, 125, 126, 127, 150, 117, 118, 119, 153, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 155, 156, 157, 151, 152, 174, 175, 176, 177, 178, 158, 179, 180, 14, 181, 182, 183, 184, 193, 194, 195, 185, 186, 187, 188, 189, 190, 191, 192, 5, 226, 227, 228, 229, 230, 231, 232, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 233, 234, 235, 236, 237, 238, 239, 240, 6, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 1, 261, 289, 290, 291, 292, 293, 16, 294, 295, 296, 297, 298, 299, 300, 301, 17, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 7, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 8, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 206, 207, 196, 197, 198, 199, 200, 201, 202, 658, 659, 660, 661, 662, 663, 664, 685, 686, 665, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 12, 724, 725, 726, 727, 728, 729, 730, 15, 731, 732, 9, 733, 734, 10, 735, 736, 11, 737, 738, 739, 740, 741, 742, 18, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 13, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 15, 16, 17, 25, 26, 5, 2, 6, 3, 7, 4, 18, 19, 20, 21, 22, 0, 23, 8, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 9, 37, 38, 39, 10, 40, 41, 42, 11, 43, 44, 45, 12, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 55, 13, 56, 57, 58, 14, 59 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 11, 2, 0, 4, 9, 10, 12, 3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 6, 31, 7, 32, 5, 33, 8, 34 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 82, 83, 40, 41, 1, 84, 85, 37, 38, 17, 16, 70, 47, 71, 48, 63, 42, 18, 43, 19, 44, 20, 45, 46, 66, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 67, 62, 68, 64, 65, 72, 73, 74, 69, 75, 2, 86, 21, 3, 87, 22, 23, 4, 88, 24, 89, 90, 25, 5, 26, 27, 6, 28, 7, 8, 9, 10, 11, 12, 29, 13, 91, 30, 92, 93, 94, 31, 32, 14, 95, 33, 96, 34, 78, 79, 80, 81, 76, 35, 77, 15, 39, 36, 97 }
  uselistorder i32* @lr, { 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 0, 138, 139, 140, 1, 141, 142, 143, 2, 144, 145, 146, 147, 148, 149, 150, 151, 40, 41, 152, 153, 85, 86, 87, 88, 89, 90, 91, 92, 42, 43, 44, 45, 46, 93, 94, 4, 5, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 6, 7, 10, 11, 3, 14, 12, 13, 8, 9, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 79, 80, 81, 82, 83, 49, 110, 19, 22, 23, 24, 25, 26, 27, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 111, 112, 113, 20, 21, 15, 16, 17, 18, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 }
  uselistorder i32 16, { 31, 32, 33, 201, 34, 202, 203, 35, 204, 205, 36, 206, 207, 208, 209, 210, 211, 109, 110, 85, 86, 114, 111, 112, 113, 115, 26, 116, 117, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 53, 90, 54, 87, 37, 55, 88, 89, 91, 93, 94, 95, 27, 84, 14, 15, 24, 81, 16, 96, 17, 56, 92, 57, 104, 38, 105, 42, 41, 40, 102, 39, 103, 43, 58, 59, 60, 61, 62, 63, 106, 64, 107, 65, 108, 66, 67, 28, 118, 119, 120, 121, 68, 122, 123, 124, 125, 126, 127, 128, 69, 129, 130, 131, 45, 132, 44, 47, 133, 46, 134, 135, 71, 136, 137, 138, 139, 140, 1, 70, 141, 142, 143, 73, 144, 145, 146, 147, 148, 2, 72, 149, 74, 150, 151, 152, 18, 153, 19, 154, 82, 20, 75, 76, 155, 156, 3, 49, 157, 48, 158, 77, 159, 160, 161, 21, 162, 22, 163, 83, 23, 78, 79, 164, 165, 4, 51, 166, 50, 167, 168, 169, 170, 171, 172, 29, 173, 174, 175, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 30, 186, 187, 188, 189, 190, 192, 191, 193, 194, 98, 99, 100, 101, 97, 80, 195, 52, 196, 197, 198, 199, 200 }
  uselistorder i32 20, { 124, 3, 125, 126, 0, 4, 127, 38, 39, 23, 24, 1, 40, 41, 42, 43, 25, 16, 26, 17, 27, 18, 28, 30, 5, 31, 6, 32, 22, 29, 44, 45, 7, 46, 47, 48, 49, 50, 51, 52, 8, 53, 54, 55, 56, 57, 58, 59, 60, 61, 9, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 10, 74, 75, 76, 77, 78, 79, 80, 81, 11, 82, 83, 84, 2, 85, 86, 87, 88, 19, 89, 90, 91, 92, 93, 94, 95, 96, 97, 20, 98, 99, 100, 101, 102, 103, 104, 105, 13, 106, 12, 107, 108, 109, 110, 15, 111, 14, 112, 113, 114, 34, 35, 36, 37, 33, 115, 116, 117, 118, 119, 120, 121, 122, 21, 123 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 32, 33, 35, 71, 77, 4, 36, 5, 18, 38, 19, 37, 2, 20, 39, 40, 21, 22, 23, 24, 25, 26, 27, 28, 29, 41, 42, 43, 6, 44, 45, 46, 47, 7, 48, 49, 50, 51, 8, 52, 9, 10, 53, 11, 54, 55, 12, 56, 57, 13, 58, 59, 14, 60, 61, 62, 63, 64, 15, 65, 66, 67, 68, 69, 16, 70, 3, 72, 0, 30, 73, 1, 31, 74, 75, 34, 17, 76 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 6, 7, 50, 1, 3, 2, 0, 4, 5 }
  uselistorder i1 false, { 43, 44, 45, 80, 15, 42, 81, 82, 39, 40, 41, 83, 14, 84, 85, 0, 48, 47, 49, 46, 1, 3, 4, 51, 2, 12, 16, 52, 5, 6, 7, 50, 86, 87, 88, 11, 8, 9, 10, 89, 55, 90, 91, 56, 92, 21, 22, 23, 24, 57, 93, 94, 73, 95, 96, 97, 62, 98, 26, 27, 63, 99, 64, 100, 58, 59, 60, 25, 101, 61, 102, 103, 72, 104, 105, 106, 107, 108, 109, 65, 66, 110, 111, 67, 112, 68, 69, 113, 70, 114, 71, 115, 53, 54, 116, 117, 118, 119, 120, 121, 28, 29, 74, 122, 123, 75, 35, 124, 76, 18, 19, 30, 20, 31, 32, 33, 13, 34, 125, 36, 37, 77, 78, 126, 17, 79, 127, 38, 128 }
  uselistorder i32 4, { 90, 81, 82, 6, 478, 83, 479, 67, 7, 8, 84, 480, 85, 481, 482, 483, 484, 86, 485, 486, 487, 488, 87, 489, 490, 491, 492, 493, 9, 494, 495, 496, 497, 498, 88, 499, 66, 500, 501, 502, 503, 504, 505, 10, 11, 89, 506, 293, 294, 215, 216, 295, 296, 297, 507, 508, 509, 510, 511, 158, 159, 160, 68, 161, 162, 440, 442, 441, 438, 439, 404, 405, 406, 407, 443, 444, 445, 446, 408, 409, 410, 447, 448, 163, 164, 165, 166, 167, 56, 12, 13, 298, 299, 300, 301, 302, 303, 14, 15, 76, 16, 17, 77, 449, 450, 213, 18, 19, 113, 91, 451, 452, 69, 219, 114, 220, 168, 221, 244, 245, 246, 237, 238, 65, 64, 247, 222, 223, 217, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 115, 240, 241, 242, 239, 78, 248, 116, 243, 92, 117, 118, 20, 249, 21, 250, 251, 22, 23, 252, 253, 58, 254, 57, 259, 119, 260, 120, 261, 121, 262, 122, 263, 123, 264, 124, 266, 125, 267, 268, 265, 255, 126, 256, 257, 258, 284, 169, 286, 24, 287, 288, 285, 25, 289, 59, 127, 290, 291, 389, 304, 274, 72, 71, 70, 278, 128, 26, 27, 28, 29, 30, 31, 279, 60, 280, 61, 281, 282, 283, 32, 33, 129, 93, 130, 131, 170, 292, 0, 132, 34, 305, 306, 171, 307, 308, 309, 172, 173, 134, 310, 133, 311, 94, 312, 313, 174, 314, 315, 175, 176, 316, 95, 317, 96, 318, 319, 177, 178, 320, 179, 321, 322, 180, 181, 135, 323, 97, 324, 98, 325, 326, 327, 328, 329, 136, 330, 99, 331, 332, 333, 334, 335, 137, 336, 100, 337, 338, 339, 182, 340, 341, 342, 343, 183, 184, 2, 344, 138, 345, 101, 346, 347, 348, 185, 349, 350, 186, 187, 3, 139, 351, 102, 353, 103, 354, 355, 188, 356, 357, 358, 359, 360, 189, 190, 361, 362, 141, 363, 4, 140, 364, 104, 365, 142, 366, 367, 191, 368, 369, 370, 371, 372, 192, 193, 373, 374, 144, 375, 5, 143, 376, 105, 377, 145, 378, 379, 380, 381, 382, 194, 383, 384, 385, 195, 196, 147, 386, 146, 106, 387, 107, 388, 390, 391, 392, 393, 394, 149, 395, 150, 396, 197, 397, 398, 399, 198, 199, 151, 400, 148, 401, 108, 402, 109, 403, 200, 411, 412, 35, 201, 413, 414, 36, 202, 415, 416, 37, 203, 417, 418, 38, 204, 419, 420, 39, 205, 79, 421, 422, 40, 423, 206, 424, 425, 41, 207, 426, 427, 42, 208, 428, 429, 43, 209, 430, 431, 44, 210, 432, 433, 45, 211, 434, 435, 46, 453, 352, 275, 276, 277, 269, 270, 271, 47, 272, 273, 1, 436, 212, 437, 454, 455, 112, 456, 457, 80, 458, 152, 459, 460, 461, 462, 110, 463, 153, 464, 465, 466, 111, 467, 154, 468, 48, 49, 50, 469, 470, 75, 74, 73, 471, 51, 52, 53, 155, 472, 156, 473, 54, 55, 474, 62, 475, 63, 157, 476, 477, 214 }
  uselistorder i32* @r2, { 80, 81, 31, 9, 32, 34, 33, 35, 36, 37, 38, 8, 82, 2, 83, 88, 89, 92, 84, 51, 55, 56, 59, 57, 58, 52, 53, 54, 50, 14, 15, 0, 16, 17, 1, 90, 3, 91, 6, 39, 40, 41, 10, 85, 86, 87, 4, 60, 61, 62, 7, 63, 64, 65, 5, 66, 67, 68, 69, 70, 18, 11, 12, 13, 21, 22, 19, 20, 26, 27, 45, 23, 24, 25, 28, 29, 30, 42, 43, 44, 46, 47, 48, 49, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder label %dec_label_pc_16948, { 2, 0, 1 }
  uselistorder label %dec_label_pc_168dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16870, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16810, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_1679c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_16760, { 1, 0 }
  uselistorder label %dec_label_pc_1674c, { 1, 0 }
  uselistorder label %dec_label_pc_1670c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_166a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16634, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165d4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_16548, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_16508, { 1, 0 }
}

define i32 @function_16968(i32 %arg1) local_unnamed_addr {
dec_label_pc_16968:
  ret i32 %arg1
}

define i32 @function_16970() local_unnamed_addr {
dec_label_pc_16970:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_16970 = load i32, i32* @r0, align 4
  %v2_16970 = icmp eq i32 %v0_16970, 0
  %v3_16974 = load i32, i32* @r4, align 4
  store i32 %v3_16974, i32* %stack_var_-20, align 4
  %v0_16978 = load i32, i32* @r1, align 4
  br i1 %v2_16970, label %dec_label_pc_16a50, label %dec_label_pc_1698c.lr.ph

dec_label_pc_1698c:                               ; preds = %dec_label_pc_1698c.lr.ph, %dec_label_pc_16a10
  %v1_16a10 = phi i32 [ 0, %dec_label_pc_1698c.lr.ph ], [ %v5_16a10, %dec_label_pc_16a10 ]
  %v0_16a14 = phi i32 [ 1, %dec_label_pc_1698c.lr.ph ], [ %v1_16a14, %dec_label_pc_16a10 ]
  %v0_16994 = phi i32 [ %v0_16970, %dec_label_pc_1698c.lr.ph ], [ %v0_1699425, %dec_label_pc_16a10 ]
  %v1_16994 = inttoptr i32 %v0_16994 to i8*
  %v2_16994 = load i8, i8* %v1_16994, align 1
  %v3_16994 = zext i8 %v2_16994 to i32
  %v3_16998 = mul nuw nsw i32 %v3_16994, 2
  %v4_16998 = add i32 %v3_16998, %v2_16990.pre
  %v5_16998 = inttoptr i32 %v4_16998 to i8*
  %v6_16998 = load i8, i8* %v5_16998, align 1
  %v1_1699c = and i8 %v6_16998, 8
  %v2_1699c = icmp eq i8 %v1_1699c, 0
  br i1 %v2_1699c, label %dec_label_pc_16a50, label %dec_label_pc_169a4

dec_label_pc_169a4:                               ; preds = %dec_label_pc_1698c
  br label %dec_label_pc_169c4

dec_label_pc_169ac:                               ; preds = %dec_label_pc_169c4
  %v3_169b0 = mul i32 %v0_16a10, 10
  %v4_169b0 = add i32 %v3_169c4, %v3_169b0
  %v1_169b4 = add i32 %v4_169b0, -48
  %v8_169bc = icmp sgt i32 %v1_169b4, 255
  br i1 %v8_169bc, label %dec_label_pc_16a50, label %dec_label_pc_169c0

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169ac
  %v1_169c0 = add i32 %v0_16a00, 1
  store i32 %v1_169c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_169c4

dec_label_pc_169c4:                               ; preds = %dec_label_pc_169a4, %dec_label_pc_169c0
  %v0_16a10 = phi i32 [ 0, %dec_label_pc_169a4 ], [ %v1_169b4, %dec_label_pc_169c0 ]
  %v0_16a00 = phi i32 [ %v0_16994, %dec_label_pc_169a4 ], [ %v1_169c0, %dec_label_pc_169c0 ]
  %v1_169c4 = inttoptr i32 %v0_16a00 to i8*
  %v2_169c4 = load i8, i8* %v1_169c4, align 1
  %v3_169c4 = zext i8 %v2_169c4 to i32
  %v2_169c8 = mul nuw nsw i32 %v3_169c4, 2
  %v2_169cc = add i32 %v2_169c8, %v2_16990.pre
  %v3_169d0 = inttoptr i32 %v2_169cc to i8*
  %v4_169d0 = load i8, i8* %v3_169d0, align 1
  %v6_169d0 = zext i8 %v4_169d0 to i32
  %v1_169dc = and i32 %v6_169d0, 8
  %v2_169dc = icmp eq i32 %v1_169dc, 0
  br i1 %v2_169dc, label %dec_label_pc_169e4, label %dec_label_pc_169ac

dec_label_pc_169e4:                               ; preds = %dec_label_pc_169c4
  %v8_169e8 = icmp sgt i32 %v0_16a14, 3
  br i1 %v8_169e8, label %dec_label_pc_169fc, label %dec_label_pc_169ec

dec_label_pc_169ec:                               ; preds = %dec_label_pc_169e4
  %v7_169ec = icmp eq i8 %v2_169c4, 46
  br i1 %v7_169ec, label %dec_label_pc_169f4, label %dec_label_pc_16a50

dec_label_pc_169f4:                               ; preds = %dec_label_pc_169ec
  %v1_169f4 = add i32 %v0_16a00, 1
  store i32 %v1_169f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16a10

dec_label_pc_169fc:                               ; preds = %dec_label_pc_169e4
  %v2_169fc = icmp eq i8 %v2_169c4, 0
  %v1_16a00 = add i32 %v0_16a00, 1
  store i32 %v1_16a00, i32* %r0.global-to-local, align 4
  br i1 %v2_169fc, label %dec_label_pc_16a10, label %dec_label_pc_16a08

dec_label_pc_16a08:                               ; preds = %dec_label_pc_169fc
  %v1_16a08 = and i32 %v6_169d0, 32
  %v2_16a08 = icmp eq i32 %v1_16a08, 0
  br i1 %v2_16a08, label %dec_label_pc_16a50, label %dec_label_pc_16a10

dec_label_pc_16a10:                               ; preds = %dec_label_pc_16a08, %dec_label_pc_169fc, %dec_label_pc_169f4
  %v0_1699425 = phi i32 [ %v1_16a00, %dec_label_pc_16a08 ], [ %v1_16a00, %dec_label_pc_169fc ], [ %v1_169f4, %dec_label_pc_169f4 ]
  %v4_16a10 = mul i32 %v1_16a10, 256
  %v5_16a10 = or i32 %v0_16a10, %v4_16a10
  %v1_16a14 = add nuw nsw i32 %v0_16a14, 1
  %v7_16a1c = icmp slt i32 %v1_16a14, 5
  br i1 %v7_16a1c, label %dec_label_pc_1698c, label %dec_label_pc_16a20

dec_label_pc_1698c.lr.ph:                         ; preds = %dec_label_pc_16970
  %v2_16990.pre = load i32, i32* bitcast (i32** @global_var_1f7cc.647 to i32*), align 4
  br label %dec_label_pc_1698c

dec_label_pc_16a20:                               ; preds = %dec_label_pc_16a10
  %v2_16a20 = icmp eq i32 %v0_16978, 0
  br i1 %v2_16a20, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_16a20
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_16a20
  %v3_16a3c = call i32 @llvm.bswap.i32(i32 %v5_16a10)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_16a48 = inttoptr i32 %v0_16978 to i32*
  store i32 %v3_16a3c, i32* %v3_16a48, align 4
  %v2_16a4c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_16a4c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_16a4c = phi i32 [ 1, %bb ], [ %v17_16a4c.pre, %bb40 ]
  %v2_16a4c = phi i32 [ %v3_16974, %bb ], [ %v2_16a4c.pre, %bb40 ]
  store i32 %v2_16a4c, i32* @r4, align 4
  ret i32 %v17_16a4c

dec_label_pc_16a50:                               ; preds = %dec_label_pc_169ec, %dec_label_pc_16a08, %dec_label_pc_1698c, %dec_label_pc_169ac, %dec_label_pc_16970
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_16974, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_16990.pre, { 1, 0 }
  uselistorder i32 %v1_16a14, { 1, 0 }
  uselistorder i32 %v0_16a00, { 0, 1, 3, 2 }
  uselistorder i32 %v3_16974, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 5, { 16, 31, 17, 6, 3, 19, 32, 4, 18, 33, 1, 20, 34, 21, 35, 22, 36, 23, 37, 24, 38, 25, 39, 0, 43, 44, 45, 26, 27, 28, 29, 46, 47, 48, 49, 7, 50, 51, 52, 53, 8, 54, 55, 56, 57, 58, 59, 60, 61, 9, 62, 63, 64, 10, 65, 66, 67, 11, 68, 69, 70, 71, 12, 72, 73, 74, 75, 13, 76, 77, 78, 79, 80, 81, 82, 14, 83, 84, 85, 86, 87, 88, 89, 15, 90, 5, 91, 40, 2, 41, 42, 30, 92 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 519, 520, 79, 80, 81, 82, 83, 84, 85, 521, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 98, 99, 103, 102, 101, 104, 517, 522, 109, 105, 108, 106, 107, 513, 110, 111, 112, 113, 523, 114, 115, 116, 117, 118, 524, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 157, 158, 159, 163, 169, 164, 160, 165, 170, 166, 171, 167, 161, 172, 162, 173, 174, 168, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 185, 188, 191, 192, 190, 189, 193, 196, 195, 194, 203, 200, 197, 198, 204, 201, 205, 202, 206, 199, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 223, 225, 226, 227, 238, 233, 228, 239, 234, 240, 235, 241, 236, 229, 230, 231, 242, 243, 244, 245, 237, 232, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 257, 259, 260, 261, 262, 263, 264, 265, 267, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 279, 289, 285, 281, 290, 286, 282, 291, 287, 292, 288, 283, 284, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 310, 309, 317, 312, 323, 324, 318, 313, 325, 326, 319, 314, 327, 320, 328, 321, 329, 322, 330, 315, 331, 316, 332, 333, 334, 335, 336, 337, 338, 341, 342, 345, 343, 339, 346, 344, 340, 349, 348, 347, 352, 353, 350, 354, 351, 355, 359, 356, 361, 360, 357, 358, 362, 514, 525, 363, 364, 365, 366, 367, 370, 368, 369, 372, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 392, 390, 386, 393, 391, 387, 396, 395, 394, 399, 400, 397, 401, 398, 402, 406, 403, 408, 407, 404, 405, 409, 515, 526, 410, 411, 412, 413, 414, 417, 415, 416, 419, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 434, 436, 437, 439, 438, 440, 441, 442, 443, 446, 453, 447, 448, 444, 449, 450, 451, 445, 454, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 467, 469, 470, 471, 475, 482, 476, 477, 483, 478, 472, 473, 479, 474, 480, 484, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 497, 499, 500, 501, 502, 504, 503, 505, 506, 507, 508, 509, 512, 527, 516, 528, 510, 511, 518 }
  uselistorder i32 32, { 75, 57, 58, 55, 70, 71, 67, 68, 69, 5, 4, 7, 6, 9, 8, 56, 54, 76, 77, 60, 59, 11, 10, 13, 12, 15, 14, 17, 16, 66, 19, 18, 20, 21, 22, 24, 23, 25, 27, 26, 29, 28, 30, 31, 33, 32, 61, 72, 73, 34, 74, 35, 36, 37, 0, 38, 1, 2, 3, 39, 40, 41, 42, 43, 45, 44, 62, 78, 63, 79, 64, 80, 47, 46, 49, 48, 50, 51, 52, 53, 65 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 40, 72, 73, 193, 74, 75, 76, 77, 78, 79, 92, 116, 194, 4, 186, 188, 189, 0, 80, 23, 81, 24, 190, 87, 41, 25, 27, 93, 44, 94, 2, 95, 96, 97, 98, 42, 5, 99, 100, 101, 102, 45, 103, 46, 104, 47, 105, 48, 106, 49, 107, 50, 108, 26, 109, 51, 110, 43, 111, 52, 113, 53, 114, 115, 28, 119, 54, 55, 56, 57, 58, 1, 117, 118, 59, 120, 121, 122, 123, 124, 125, 60, 126, 61, 127, 29, 128, 129, 130, 131, 132, 7, 6, 62, 30, 133, 134, 135, 136, 137, 138, 139, 9, 8, 63, 140, 31, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 11, 10, 64, 151, 32, 152, 153, 154, 155, 156, 13, 12, 65, 157, 33, 158, 159, 160, 161, 66, 162, 15, 14, 35, 163, 34, 164, 165, 166, 167, 67, 168, 17, 16, 37, 169, 36, 170, 171, 172, 173, 174, 175, 19, 18, 68, 176, 38, 177, 178, 179, 180, 181, 182, 183, 21, 20, 69, 184, 39, 185, 22, 187, 3, 112, 191, 82, 88, 83, 89, 84, 90, 85, 91, 70, 192, 71, 86 }
  uselistorder i32 8, { 112, 176, 30, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 31, 193, 90, 91, 92, 93, 97, 94, 95, 96, 194, 162, 161, 159, 160, 141, 142, 143, 163, 164, 165, 144, 145, 146, 7, 34, 35, 32, 33, 18, 19, 27, 28, 36, 195, 98, 99, 100, 101, 8, 9, 66, 22, 10, 11, 17, 12, 54, 37, 55, 38, 56, 39, 13, 14, 15, 67, 57, 71, 29, 72, 73, 74, 75, 77, 58, 78, 79, 76, 87, 88, 59, 89, 16, 60, 102, 40, 103, 104, 105, 106, 107, 108, 109, 110, 111, 3, 113, 114, 115, 4, 116, 117, 118, 119, 120, 121, 122, 5, 123, 124, 125, 126, 127, 128, 129, 6, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 41, 147, 42, 148, 43, 149, 44, 150, 45, 151, 46, 152, 47, 153, 48, 154, 49, 155, 50, 156, 51, 157, 61, 158, 0, 1, 83, 84, 85, 86, 64, 80, 81, 62, 82, 2, 20, 23, 24, 166, 21, 25, 26, 167, 63, 68, 69, 168, 169, 171, 170, 172, 173, 52, 174, 65, 70, 53, 175 }
  uselistorder i32 255, { 2, 16, 17, 3, 19, 4, 20, 5, 21, 0, 1, 8, 22, 9, 23, 6, 24, 7, 25, 12, 26, 13, 27, 10, 28, 11, 29, 15, 18, 14, 30 }
  uselistorder i32 10, { 13, 53, 54, 0, 4, 5, 33, 34, 81, 1, 2, 14, 40, 9, 35, 42, 15, 41, 7, 43, 44, 36, 16, 45, 37, 46, 17, 48, 47, 50, 18, 19, 20, 21, 22, 23, 24, 51, 25, 52, 10, 55, 56, 3, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 26, 67, 68, 69, 27, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 80, 11, 82, 49, 83, 6, 31, 38, 84, 29, 85, 32, 39, 12, 86, 28, 87, 30 }
  uselistorder i8 0, { 8, 0, 1, 31, 32, 2, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 3, 15, 14, 16, 52, 54, 51, 25, 53, 26, 55, 56, 50, 4, 57, 58, 59, 6, 7, 5, 60, 61, 62, 18, 17, 63, 64, 67, 28, 65, 66, 27, 68, 69, 70, 71, 72, 19, 10, 20, 73, 21, 22, 30, 74, 75, 76, 78, 79, 12, 82, 24, 88, 83, 84, 80, 81, 23, 29, 85, 86, 87, 11, 89, 90, 77, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 2, { 5, 161, 303, 304, 67, 305, 306, 56, 307, 55, 308, 54, 167, 84, 85, 288, 86, 289, 87, 290, 6, 162, 309, 61, 88, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 164, 16, 17, 18, 19, 20, 90, 91, 89, 57, 58, 168, 92, 169, 72, 95, 171, 178, 73, 170, 94, 172, 74, 173, 75, 174, 76, 175, 77, 176, 78, 177, 79, 183, 179, 180, 181, 182, 68, 96, 184, 21, 22, 185, 187, 188, 97, 189, 62, 165, 98, 190, 99, 191, 100, 192, 101, 193, 194, 93, 195, 23, 102, 186, 203, 204, 24, 103, 104, 105, 205, 206, 106, 274, 163, 166, 211, 108, 197, 111, 198, 110, 199, 107, 112, 200, 25, 26, 27, 113, 109, 114, 115, 116, 201, 202, 117, 118, 69, 120, 121, 119, 122, 207, 59, 66, 208, 209, 210, 275, 276, 212, 213, 214, 215, 216, 217, 218, 124, 219, 123, 220, 221, 222, 223, 224, 126, 125, 225, 226, 227, 228, 229, 230, 231, 128, 232, 127, 233, 234, 129, 130, 80, 131, 235, 236, 132, 133, 81, 134, 237, 238, 239, 240, 241, 242, 243, 1, 28, 29, 30, 31, 32, 33, 135, 244, 82, 245, 246, 247, 248, 249, 2, 34, 35, 36, 37, 38, 39, 137, 136, 250, 251, 40, 252, 253, 63, 254, 139, 255, 3, 41, 42, 43, 44, 45, 140, 256, 138, 257, 258, 46, 259, 260, 64, 261, 142, 262, 4, 47, 48, 49, 50, 51, 143, 263, 141, 264, 265, 266, 267, 268, 269, 270, 271, 145, 272, 144, 273, 277, 278, 279, 147, 280, 148, 281, 282, 283, 284, 149, 285, 146, 286, 70, 287, 150, 71, 196, 60, 151, 291, 292, 83, 293, 158, 294, 152, 295, 153, 154, 296, 155, 297, 156, 298, 157, 299, 65, 300, 52, 53, 301, 159, 302, 160 }
  uselistorder i32* @r1, { 33, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 1, 114, 115, 17, 18, 20, 19, 4, 6, 116, 0, 117, 54, 55, 15, 119, 56, 61, 62, 65, 63, 64, 57, 58, 59, 60, 53, 66, 118, 10, 5, 34, 21, 67, 68, 3, 69, 70, 71, 11, 7, 8, 9, 12, 48, 24, 13, 14, 16, 22, 23, 49, 50, 2, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96 }
  uselistorder label %dec_label_pc_16a50, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_169c4, { 1, 0 }
}

define i32 @function_16a5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_16a5c:
  %v1_16a5c = add i32 %arg1, 28
  %v2_16a5c = inttoptr i32 %v1_16a5c to i32*
  %v3_16a5c = load i32, i32* %v2_16a5c, align 4
  %v1_16a64 = add i32 %arg1, 44
  %v2_16a64 = inttoptr i32 %v1_16a64 to i32*
  %v3_16a64 = load i32, i32* %v2_16a64, align 4
  store i32 %v3_16a5c, i32* @global_var_1fb0c.700, align 4
  store i32 %v3_16a64, i32* @global_var_1fb10.702, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 18, 19, 4, 5, 27, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 14, 13, 20, 21, 22, 23, 24, 25, 26, 15, 16, 17 }
}

define i32 @function_16a80(i32* %arg1) local_unnamed_addr {
dec_label_pc_16a80:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_16a88 = call i32 @brk(i32* %arg1)
  %v3_16a8c = icmp ult i32 %v2_16a88, %tmp
  store i32 %v2_16a88, i32* @global_var_1f8a4.697, align 4
  br i1 %v3_16a8c, label %dec_label_pc_16aa0, label %dec_label_pc_16ab0

dec_label_pc_16aa0:                               ; preds = %dec_label_pc_16a80
  %v0_16aa0 = call i32 @function_14858()
  %v2_16aa8 = inttoptr i32 %v0_16aa0 to i32*
  store i32 12, i32* %v2_16aa8, align 4
  br label %dec_label_pc_16ab0

dec_label_pc_16ab0:                               ; preds = %dec_label_pc_16a80, %dec_label_pc_16aa0
  %v0_16ab0 = phi i32 [ 0, %dec_label_pc_16a80 ], [ -1, %dec_label_pc_16aa0 ]
  ret i32 %v0_16ab0

; uselistorder directives
  uselistorder i32 12, { 19, 13, 134, 135, 136, 138, 139, 140, 141, 14, 137, 142, 143, 144, 145, 146, 147, 148, 70, 71, 34, 35, 72, 20, 21, 119, 120, 121, 0, 115, 122, 9, 123, 10, 116, 4, 117, 22, 23, 7, 73, 74, 24, 75, 76, 15, 36, 25, 38, 39, 50, 51, 52, 40, 37, 41, 42, 43, 44, 45, 46, 48, 49, 47, 53, 54, 55, 11, 56, 57, 59, 60, 61, 5, 62, 58, 8, 69, 67, 68, 6, 26, 27, 28, 29, 30, 31, 110, 77, 16, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 32, 89, 90, 91, 92, 93, 33, 94, 95, 96, 97, 98, 99, 17, 100, 101, 102, 103, 104, 105, 18, 106, 107, 108, 109, 111, 112, 113, 114, 12, 118, 1, 2, 63, 64, 65, 66, 3, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133 }
  uselistorder i32 ()* @function_14858, { 29, 61, 28, 43, 12, 11, 10, 9, 42, 41, 40, 8, 62, 27, 26, 47, 46, 24, 25, 60, 59, 23, 22, 32, 21, 33, 20, 45, 19, 58, 18, 14, 57, 39, 38, 37, 56, 44, 17, 5, 4, 55, 16, 36, 35, 54, 3, 7, 53, 31, 6, 30, 15, 52, 2, 1, 51, 34, 49, 48, 50, 0, 13 }
  uselistorder i32* @global_var_1f8a4.697, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_16ab0, { 1, 0 }
}

define i32 @function_16abc(i32 %arg1) local_unnamed_addr {
dec_label_pc_16abc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16ac0 = load i32, i32* @global_var_1f658.660, align 4
  %v7_16ac4 = icmp eq i32 %v3_16ac0, -1
  %v3_16ac8 = load i32, i32* @r4, align 4
  store i32 %v3_16ac8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f658.660 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_16ac4, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_16abc
  store i32 %v3_16ac8, i32* %r4.global-to-local, align 4
  %v9_16ad0 = load i32, i32* @r0, align 4
  ret i32 %v9_16ad0

.preheader:                                       ; preds = %dec_label_pc_16abc, %.preheader
  %v0_16ad8 = phi i32 [ %v3_16adc, %.preheader ], [ %v3_16ac0, %dec_label_pc_16abc ]
  call void @__pseudo_branch(i32 %v0_16ad8)
  %v0_16adc = load i32, i32* %r4.global-to-local, align 4
  %v1_16adc = add i32 %v0_16adc, -4
  %v2_16adc = inttoptr i32 %v1_16adc to i32*
  %v3_16adc = load i32, i32* %v2_16adc, align 4
  store i32 %v1_16adc, i32* %r4.global-to-local, align 4
  %v3_16ae0 = icmp eq i32 %v3_16adc, -1
  br i1 %v3_16ae0, label %dec_label_pc_16ae8, label %.preheader

dec_label_pc_16ae8:                               ; preds = %.preheader
  %v2_16ae8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16ae8, i32* %r4.global-to-local, align 4
  %v8_16ae8 = load i32, i32* @r0, align 4
  ret i32 %v8_16ae8

; uselistorder directives
  uselistorder i32 %v3_16adc, { 1, 0 }
  uselistorder i32 %v3_16ac0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 183, 0, 108, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 184, 109, 302, 110, 338, 111, 339, 324, 112, 377, 113, 378, 114, 379, 115, 380, 162, 104, 325, 326, 116, 327, 328, 117, 381, 1, 185, 2, 118, 340, 341, 186, 187, 320, 321, 163, 188, 164, 189, 3, 4, 103, 89, 90, 190, 191, 192, 101, 303, 193, 304, 5, 6, 119, 342, 120, 343, 121, 335, 122, 344, 123, 334, 124, 345, 125, 322, 126, 346, 127, 305, 128, 347, 129, 333, 130, 306, 131, 182, 132, 194, 133, 307, 134, 323, 135, 348, 136, 384, 385, 137, 308, 138, 349, 139, 329, 140, 330, 141, 309, 142, 386, 143, 382, 144, 310, 145, 336, 146, 383, 147, 337, 148, 350, 149, 311, 150, 387, 105, 388, 195, 196, 197, 198, 199, 200, 201, 202, 7, 8, 9, 10, 11, 151, 152, 12, 203, 204, 17, 205, 312, 16, 206, 107, 106, 313, 13, 207, 296, 154, 297, 299, 300, 208, 209, 210, 153, 298, 18, 211, 97, 19, 212, 213, 20, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 301, 14, 234, 15, 235, 236, 21, 237, 238, 155, 314, 239, 22, 240, 315, 98, 23, 24, 241, 102, 25, 26, 27, 28, 29, 156, 242, 331, 243, 332, 167, 316, 30, 165, 317, 31, 32, 166, 318, 33, 34, 168, 319, 35, 36, 37, 38, 39, 244, 91, 92, 93, 94, 95, 96, 40, 41, 42, 245, 246, 247, 248, 43, 158, 159, 160, 161, 44, 45, 46, 249, 47, 48, 49, 50, 51, 52, 99, 53, 54, 55, 56, 57, 58, 59, 250, 60, 157, 61, 62, 63, 251, 64, 65, 66, 67, 68, 252, 69, 70, 71, 253, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 254, 83, 84, 85, 255, 86, 87, 256, 257, 258, 259, 88, 100, 351, 352, 174, 353, 172, 354, 173, 355, 170, 356, 260, 261, 262, 263, 264, 175, 357, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 169, 358, 176, 359, 291, 292, 293, 177, 294, 295, 171, 360, 178, 361, 179, 180, 181 }
  uselistorder i32* @global_var_1f658.660, { 1, 0 }
  uselistorder i32 1, { 660, 239, 385, 447, 1080, 1081, 1082, 1083, 1084, 410, 661, 358, 1249, 391, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 664, 663, 662, 342, 344, 348, 352, 347, 346, 343, 345, 349, 351, 350, 665, 177, 176, 172, 174, 173, 175, 178, 171, 852, 28, 25, 27, 26, 666, 29, 667, 99, 100, 668, 41, 267, 669, 311, 670, 280, 671, 312, 672, 313, 1007, 1008, 673, 318, 314, 319, 315, 316, 320, 317, 1009, 1010, 1011, 507, 96, 97, 93, 95, 94, 674, 339, 675, 145, 0, 679, 678, 677, 676, 269, 268, 508, 680, 247, 248, 411, 509, 681, 265, 682, 1143, 687, 686, 685, 684, 683, 109, 110, 111, 112, 510, 688, 386, 992, 380, 993, 412, 689, 58, 64, 57, 61, 60, 63, 65, 59, 62, 1262, 413, 692, 691, 690, 323, 322, 693, 215, 216, 214, 217, 250, 251, 252, 253, 694, 286, 287, 285, 284, 283, 695, 696, 325, 324, 697, 414, 1144, 698, 210, 211, 511, 512, 384, 702, 701, 700, 699, 151, 392, 703, 92, 704, 48, 66, 705, 47, 706, 79, 707, 240, 708, 46, 709, 245, 710, 246, 711, 20, 712, 152, 713, 153, 714, 853, 854, 855, 856, 857, 858, 859, 1263, 235, 236, 232, 233, 234, 715, 513, 514, 716, 44, 43, 45, 42, 458, 1012, 717, 249, 459, 719, 718, 255, 254, 720, 80, 721, 81, 722, 14, 723, 288, 289, 724, 49, 725, 266, 726, 304, 727, 170, 728, 98, 309, 729, 148, 290, 730, 353, 731, 340, 732, 341, 733, 213, 734, 270, 321, 187, 460, 1145, 1146, 461, 1147, 1148, 362, 1149, 1150, 1151, 1152, 381, 1153, 737, 736, 735, 271, 279, 273, 274, 276, 275, 272, 277, 278, 1, 1154, 1155, 1156, 1157, 292, 291, 2, 1158, 1159, 1160, 1161, 393, 1162, 1163, 394, 1164, 739, 738, 338, 337, 1013, 1014, 1015, 515, 740, 24, 23, 22, 21, 1165, 415, 416, 3, 506, 1166, 741, 17, 15, 18, 19, 16, 1167, 1169, 1168, 516, 1170, 150, 149, 1126, 231, 1171, 1172, 1173, 302, 303, 1174, 209, 207, 208, 206, 1175, 1176, 742, 85, 84, 83, 82, 86, 1177, 1178, 743, 90, 89, 88, 87, 91, 517, 862, 518, 863, 462, 864, 865, 883, 866, 880, 526, 860, 861, 527, 867, 418, 528, 529, 524, 868, 869, 525, 870, 871, 523, 872, 873, 522, 874, 875, 521, 876, 877, 520, 878, 879, 519, 881, 882, 884, 530, 885, 531, 886, 888, 889, 887, 890, 532, 891, 851, 417, 894, 892, 533, 893, 896, 534, 897, 898, 899, 449, 900, 901, 535, 902, 536, 903, 537, 904, 538, 905, 539, 906, 540, 907, 541, 908, 542, 909, 543, 910, 544, 911, 545, 912, 546, 913, 547, 914, 548, 915, 549, 916, 550, 917, 551, 918, 552, 919, 553, 920, 554, 921, 555, 922, 556, 923, 557, 924, 558, 925, 559, 926, 560, 927, 561, 928, 562, 929, 563, 930, 564, 931, 565, 932, 566, 933, 567, 934, 568, 935, 569, 936, 570, 937, 419, 943, 944, 382, 571, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 328, 326, 327, 333, 335, 336, 331, 332, 334, 329, 330, 938, 939, 572, 940, 941, 573, 942, 758, 108, 107, 102, 106, 105, 104, 101, 103, 895, 574, 760, 759, 355, 357, 354, 356, 962, 963, 964, 965, 966, 967, 968, 363, 375, 969, 970, 420, 364, 971, 972, 973, 974, 365, 374, 975, 976, 421, 366, 977, 575, 979, 980, 576, 981, 978, 982, 454, 983, 395, 986, 987, 984, 985, 368, 367, 369, 988, 577, 989, 767, 766, 652, 765, 764, 763, 651, 762, 761, 31, 33, 30, 37, 34, 40, 36, 32, 39, 35, 38, 768, 212, 1128, 396, 1127, 448, 769, 260, 261, 259, 258, 257, 263, 264, 256, 262, 1024, 1025, 1026, 578, 771, 770, 136, 138, 143, 133, 135, 131, 137, 132, 130, 144, 134, 139, 140, 142, 141, 772, 467, 956, 957, 463, 958, 579, 581, 580, 582, 959, 960, 583, 584, 585, 586, 587, 588, 589, 466, 465, 464, 961, 590, 786, 785, 784, 783, 653, 782, 781, 654, 780, 779, 778, 777, 776, 655, 775, 774, 773, 9, 10, 11, 13, 12, 990, 787, 593, 592, 591, 991, 789, 788, 594, 994, 431, 995, 430, 996, 429, 997, 428, 998, 999, 595, 438, 422, 1000, 596, 1001, 597, 1002, 598, 1003, 599, 1004, 600, 1005, 601, 1006, 383, 602, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 305, 307, 306, 308, 1021, 5, 1016, 603, 1017, 4, 1018, 450, 1019, 387, 388, 1020, 1022, 451, 1023, 807, 806, 805, 656, 657, 804, 1129, 468, 1130, 469, 1131, 6, 1132, 7, 8, 1027, 1028, 1029, 1030, 1031, 1032, 389, 390, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 604, 1041, 1042, 605, 1043, 1046, 1044, 1045, 810, 809, 808, 68, 72, 71, 67, 75, 76, 78, 77, 69, 74, 73, 70, 1047, 1048, 1049, 1050, 1051, 606, 397, 607, 812, 811, 301, 297, 293, 294, 299, 300, 298, 295, 296, 1052, 1053, 1054, 608, 1055, 1056, 1057, 1058, 1059, 1060, 609, 1061, 398, 610, 471, 470, 611, 1062, 813, 224, 227, 228, 230, 229, 226, 225, 223, 1063, 455, 371, 1064, 612, 1066, 1065, 370, 613, 473, 472, 658, 814, 238, 237, 1067, 456, 373, 1068, 614, 1070, 1069, 372, 615, 475, 474, 659, 815, 147, 146, 1071, 1072, 1073, 1074, 1075, 1076, 616, 1077, 399, 617, 618, 1078, 476, 1079, 816, 115, 113, 114, 119, 120, 122, 121, 117, 118, 116, 1085, 1086, 432, 1087, 1088, 1089, 619, 1090, 400, 620, 478, 477, 621, 1092, 622, 1093, 817, 220, 221, 222, 219, 218, 1094, 1095, 433, 1096, 1097, 1098, 623, 1099, 401, 624, 486, 485, 625, 1100, 484, 1101, 479, 1102, 480, 1103, 481, 1104, 482, 1105, 626, 1106, 483, 1107, 822, 821, 820, 819, 818, 127, 126, 128, 129, 123, 124, 125, 1108, 1109, 434, 1110, 1111, 1112, 627, 1113, 402, 628, 491, 490, 629, 1114, 487, 1115, 488, 1116, 489, 1117, 827, 826, 825, 824, 823, 181, 182, 184, 183, 179, 180, 185, 1118, 1119, 1120, 435, 1121, 1122, 1123, 403, 630, 494, 493, 631, 1124, 492, 1125, 828, 200, 199, 202, 203, 205, 204, 198, 201, 1133, 1134, 1135, 436, 1136, 1137, 1138, 404, 632, 497, 496, 633, 1139, 495, 1140, 833, 832, 831, 830, 829, 191, 190, 189, 194, 195, 196, 197, 188, 193, 192, 1141, 498, 634, 834, 242, 244, 243, 241, 1179, 310, 1091, 186, 835, 281, 282, 945, 635, 948, 636, 949, 950, 946, 947, 951, 952, 953, 954, 405, 955, 406, 50, 53, 55, 51, 52, 54, 1142, 637, 1180, 56, 1181, 376, 641, 439, 440, 1182, 377, 639, 441, 442, 640, 1183, 423, 1184, 437, 1185, 378, 443, 644, 444, 453, 379, 642, 445, 446, 643, 1186, 424, 1187, 1188, 505, 1189, 1190, 1191, 500, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 501, 1204, 1205, 1206, 1207, 1208, 408, 1209, 645, 1210, 646, 647, 1211, 1212, 1213, 1214, 1215, 502, 1216, 1217, 1218, 425, 1219, 503, 1220, 1221, 1222, 426, 1223, 504, 1224, 1225, 1226, 427, 1227, 1228, 1229, 1230, 409, 1231, 1232, 1233, 407, 638, 499, 1234, 1236, 1238, 1237, 1235, 648, 1239, 1240, 1241, 649, 1242, 1243, 1244, 1245, 850, 457, 1246, 1247, 452, 650, 1248, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 156, 155, 160, 154, 158, 169, 162, 163, 168, 159, 161, 157, 164, 166, 165, 167, 848, 849, 361, 360, 359 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_16af0() local_unnamed_addr {
dec_label_pc_16af0:
  %v5_16af4 = load i32, i32* @r0, align 4
  ret i32 %v5_16af4

; uselistorder directives
  uselistorder i32* @r0, { 3, 12, 13, 99, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 68, 69, 71, 70, 25, 202, 203, 32, 33, 34, 35, 20, 2, 21, 22, 118, 119, 26, 204, 205, 58, 207, 8, 16, 121, 9, 120, 110, 30, 112, 11, 111, 122, 206, 40, 14, 72, 73, 74, 75, 28, 7, 76, 77, 78, 79, 6, 208, 10, 19, 123, 17, 124, 15, 125, 126, 18, 127, 128, 129, 130, 0, 36, 41, 42, 37, 38, 39, 43, 45, 46, 47, 48, 49, 44, 56, 57, 93, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 27, 65, 66, 67, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 29, 92, 106, 107, 1, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 108, 109, 101, 50, 113, 114, 115, 116, 131, 117, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 4, 5, 23, 24, 31 }
}

define i32 @function_16af8() local_unnamed_addr {
entry:
  %v3_16afc = load i32, i32* @r4, align 4
  %v0_16b04 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_16afc)
  ret i32 %v0_16b04

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 9, 14, 15, 11, 12, 13, 16, 6, 7, 8, 2, 3, 4, 5, 1, 10 }
  uselistorder i32 0, { 152, 0, 999, 1000, 1001, 1002, 154, 153, 1003, 1480, 1481, 1482, 1483, 1484, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1485, 1486, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 43, 1505, 1506, 1507, 1508, 1509, 44, 1510, 1511, 1512, 45, 1513, 1514, 1515, 46, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1531, 1532, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 47, 1551, 1552, 1553, 1554, 1555, 48, 1556, 1557, 1558, 1559, 1560, 49, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 879, 880, 344, 881, 345, 739, 1110, 1111, 1112, 1113, 1114, 882, 883, 1574, 1575, 1576, 1577, 346, 884, 1, 885, 886, 887, 1578, 1579, 1580, 155, 1581, 104, 1582, 102, 103, 1583, 1584, 1585, 347, 1589, 348, 1602, 1604, 655, 278, 1605, 349, 1603, 350, 351, 2, 1586, 1587, 156, 1115, 299, 1116, 354, 301, 300, 1117, 1118, 1119, 1120, 353, 1122, 1123, 352, 1124, 1588, 857, 858, 859, 860, 861, 862, 158, 121, 863, 105, 157, 159, 356, 1590, 357, 302, 1591, 1594, 1596, 1597, 355, 1127, 1129, 1130, 79, 279, 1131, 1128, 1125, 1126, 3, 1090, 1093, 1091, 1092, 280, 4, 1134, 1132, 1133, 281, 160, 1094, 1095, 1096, 1100, 1097, 1098, 358, 5, 1099, 6, 1141, 1142, 161, 1135, 1136, 1137, 1138, 1139, 1140, 7, 8, 1121, 740, 741, 742, 359, 9, 360, 1143, 1144, 649, 1075, 650, 1145, 1041, 1146, 864, 1147, 743, 1148, 977, 744, 1004, 1606, 1607, 94, 888, 361, 889, 890, 891, 892, 362, 893, 894, 895, 896, 897, 898, 899, 745, 865, 1149, 1595, 746, 1150, 900, 918, 747, 651, 1598, 108, 1599, 1592, 748, 1102, 1593, 1103, 1151, 749, 1600, 1601, 10, 1152, 122, 1153, 1154, 275, 274, 656, 109, 110, 111, 112, 681, 657, 81, 80, 123, 1155, 1156, 1157, 1158, 1160, 1159, 11, 1161, 1162, 277, 276, 658, 113, 114, 115, 116, 682, 659, 83, 82, 78, 91, 1163, 683, 1164, 1165, 1166, 117, 1167, 1168, 1169, 1170, 1171, 162, 660, 684, 661, 662, 1172, 685, 132, 163, 1173, 1174, 118, 1175, 1176, 12, 686, 282, 14, 13, 164, 1177, 165, 687, 15, 283, 166, 167, 335, 84, 168, 363, 750, 106, 901, 902, 1179, 1178, 1180, 1181, 50, 169, 1182, 172, 171, 170, 336, 337, 338, 174, 173, 175, 364, 1183, 1184, 176, 1076, 1077, 133, 177, 1185, 178, 711, 179, 1186, 1187, 180, 1188, 1189, 714, 663, 751, 124, 752, 753, 715, 716, 712, 688, 371, 713, 735, 736, 717, 718, 181, 182, 719, 720, 721, 722, 689, 369, 723, 724, 690, 370, 725, 726, 691, 368, 727, 728, 692, 367, 729, 730, 693, 366, 731, 738, 694, 365, 732, 737, 733, 99, 85, 134, 135, 734, 654, 754, 372, 755, 285, 756, 373, 757, 760, 761, 184, 284, 758, 759, 374, 375, 762, 763, 303, 764, 765, 695, 95, 376, 767, 768, 769, 770, 771, 772, 773, 296, 295, 774, 377, 775, 119, 776, 777, 136, 778, 680, 779, 780, 781, 679, 782, 783, 784, 183, 378, 379, 785, 788, 789, 790, 791, 792, 185, 786, 186, 787, 16, 187, 766, 837, 838, 839, 101, 86, 840, 100, 87, 841, 842, 843, 844, 845, 846, 380, 847, 848, 850, 188, 849, 96, 851, 18, 17, 852, 919, 920, 923, 924, 921, 922, 925, 926, 804, 382, 823, 189, 824, 825, 826, 827, 828, 829, 830, 831, 191, 190, 832, 97, 383, 833, 805, 386, 387, 19, 834, 835, 192, 836, 76, 77, 388, 389, 384, 381, 385, 853, 854, 855, 856, 390, 339, 196, 195, 696, 340, 198, 197, 697, 341, 200, 199, 698, 342, 202, 201, 699, 700, 343, 194, 193, 287, 294, 288, 289, 290, 391, 866, 203, 204, 875, 867, 868, 869, 870, 871, 872, 873, 874, 286, 876, 877, 88, 878, 205, 206, 392, 107, 903, 904, 905, 906, 293, 907, 908, 909, 292, 910, 911, 912, 913, 127, 914, 916, 915, 125, 126, 207, 291, 394, 395, 393, 917, 306, 304, 305, 128, 208, 92, 209, 927, 140, 139, 137, 138, 928, 929, 93, 930, 931, 932, 933, 934, 210, 935, 936, 396, 937, 938, 939, 940, 214, 211, 212, 213, 941, 942, 943, 944, 397, 945, 946, 309, 947, 308, 948, 307, 949, 398, 950, 951, 952, 143, 141, 142, 20, 953, 954, 955, 956, 215, 957, 958, 311, 310, 959, 399, 960, 961, 962, 963, 964, 147, 144, 145, 146, 21, 965, 966, 967, 216, 968, 217, 969, 970, 314, 971, 313, 972, 312, 973, 400, 974, 222, 402, 220, 221, 218, 219, 975, 224, 223, 976, 403, 225, 401, 230, 405, 228, 229, 226, 227, 978, 232, 231, 979, 233, 404, 981, 982, 151, 148, 149, 150, 22, 980, 983, 984, 985, 986, 987, 988, 23, 24, 25, 26, 27, 989, 990, 406, 316, 991, 407, 992, 408, 993, 409, 994, 410, 995, 411, 996, 412, 997, 315, 998, 234, 235, 236, 1006, 1007, 1005, 1009, 1010, 1008, 28, 29, 30, 31, 32, 1011, 237, 1012, 1013, 318, 1014, 413, 1017, 414, 1018, 415, 1019, 416, 1020, 417, 1021, 418, 1022, 317, 1023, 419, 1024, 239, 238, 240, 1026, 1027, 1025, 1028, 1029, 89, 1031, 1032, 1033, 1034, 420, 1035, 33, 34, 35, 36, 37, 1030, 241, 129, 1036, 1037, 320, 1038, 319, 1039, 421, 1040, 243, 242, 244, 1043, 1044, 1042, 1045, 1046, 90, 1048, 1049, 1050, 1051, 422, 1052, 38, 39, 40, 41, 42, 1047, 245, 130, 1053, 1054, 325, 1055, 324, 1056, 323, 1057, 321, 1058, 322, 1059, 423, 1060, 424, 1061, 246, 249, 248, 247, 1064, 1065, 1063, 1062, 425, 1067, 1066, 1068, 250, 1069, 1070, 328, 1071, 327, 1072, 326, 1073, 426, 1074, 251, 254, 253, 252, 1080, 1081, 1079, 1078, 1083, 1082, 1084, 1085, 255, 331, 1086, 330, 1087, 329, 1088, 427, 1089, 297, 1101, 1190, 256, 1191, 1015, 257, 1016, 806, 807, 808, 809, 810, 811, 258, 812, 813, 814, 815, 816, 817, 818, 819, 259, 260, 820, 821, 822, 793, 261, 794, 795, 796, 262, 428, 797, 798, 51, 799, 800, 801, 802, 803, 429, 1104, 263, 1192, 1105, 1106, 1107, 1108, 1193, 1194, 1109, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 430, 1208, 664, 665, 666, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 52, 1250, 1251, 1252, 264, 265, 1253, 431, 1254, 1255, 1256, 1257, 667, 701, 1258, 1259, 1260, 53, 1261, 1262, 1263, 1264, 54, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 55, 1272, 1273, 270, 1274, 1275, 1276, 1277, 1278, 1279, 56, 1280, 1281, 1282, 57, 1283, 1284, 1285, 58, 1286, 1287, 1288, 1289, 434, 1303, 1304, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 668, 702, 1299, 1300, 1301, 1302, 669, 703, 1305, 1306, 1307, 59, 1308, 1309, 435, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 670, 704, 1318, 1319, 1320, 60, 1321, 1322, 1323, 1324, 61, 1325, 671, 1326, 1327, 1330, 1331, 672, 266, 1328, 1329, 267, 268, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 673, 705, 1343, 1344, 1345, 62, 1346, 1347, 1348, 1349, 1350, 1351, 63, 1352, 131, 1353, 1354, 1355, 1356, 674, 706, 1357, 1358, 1359, 64, 1360, 269, 1361, 1362, 1363, 65, 1364, 1365, 1366, 1367, 1368, 675, 707, 1369, 1370, 1371, 66, 1372, 1373, 1374, 67, 432, 433, 1375, 1376, 1377, 1378, 1379, 676, 708, 1380, 1381, 1382, 68, 1383, 1384, 1385, 69, 1386, 1387, 1388, 70, 1389, 1390, 1391, 71, 1392, 1393, 1394, 1395, 72, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1408, 1409, 677, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 298, 1421, 1424, 1425, 1428, 1429, 1430, 73, 1426, 1427, 1422, 1423, 1431, 1432, 272, 271, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 74, 273, 1443, 1444, 1445, 75, 1446, 1447, 1448, 1449, 1451, 98, 436, 1452, 1450, 1406, 1407, 120, 652, 653, 1453, 1454, 1455, 678, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 332, 1476, 333, 1477, 334, 1478, 1479, 709, 710, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622 }
  uselistorder i32* @r4, { 45, 806, 436, 437, 438, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 240, 61, 662, 663, 664, 824, 825, 826, 827, 828, 829, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 830, 831, 4, 832, 833, 834, 835, 857, 858, 859, 860, 43, 861, 35, 852, 853, 854, 855, 856, 836, 837, 838, 665, 666, 667, 668, 669, 670, 671, 672, 839, 840, 207, 208, 851, 673, 674, 675, 627, 5, 628, 629, 630, 6, 631, 7, 639, 640, 632, 8, 9, 633, 634, 635, 636, 637, 638, 676, 10, 684, 685, 677, 678, 679, 680, 681, 682, 683, 62, 63, 64, 65, 66, 67, 843, 844, 847, 848, 686, 687, 688, 689, 690, 691, 532, 533, 692, 693, 209, 210, 694, 695, 68, 69, 696, 697, 392, 393, 70, 71, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 72, 73, 211, 212, 698, 699, 849, 850, 3, 74, 75, 700, 701, 277, 278, 303, 304, 76, 77, 841, 842, 656, 657, 845, 846, 658, 659, 702, 703, 78, 79, 704, 705, 80, 81, 82, 83, 279, 280, 281, 282, 283, 706, 707, 708, 46, 709, 710, 711, 712, 713, 714, 47, 48, 11, 84, 85, 86, 49, 87, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 1, 119, 106, 107, 108, 109, 110, 111, 95, 96, 97, 98, 99, 172, 173, 174, 175, 176, 177, 178, 179, 12, 180, 181, 182, 183, 184, 185, 186, 187, 0, 188, 189, 190, 191, 192, 193, 603, 604, 605, 606, 305, 306, 307, 308, 120, 121, 122, 123, 124, 135, 152, 153, 154, 155, 156, 157, 158, 13, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 14, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 36, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 284, 285, 286, 2, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 15, 361, 16, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 17, 410, 18, 411, 19, 412, 20, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 21, 440, 22, 441, 23, 442, 24, 443, 444, 445, 446, 447, 25, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 26, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 27, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 28, 584, 29, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 607, 30, 608, 31, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 715, 716, 717, 462, 463, 464, 136, 137, 138, 139, 140, 141, 32, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 125, 128, 126, 127, 129, 130, 131, 132, 133, 134, 660, 661, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 37, 749, 750, 42, 751, 34, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 41, 33, 764, 765, 766, 767, 768, 769, 770, 40, 771, 772, 773, 39, 774, 775, 776, 38, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 44, 807 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
