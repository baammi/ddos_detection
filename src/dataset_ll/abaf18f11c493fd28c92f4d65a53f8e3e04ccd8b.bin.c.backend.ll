source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1ba04.5 = global i32 0
@global_var_1ba14.6 = global i32* @global_var_1ba04.5
@global_var_1bb74.12 = global i32 0
@global_var_d300.18 = constant i32 -382906384
@global_var_11894.20 = constant i32 -481296384
@global_var_1bb90.24 = global i32 0
@global_var_85dc.25 = constant i32 -352321555
@global_var_b9c4.31 = constant i32 -382906384
@global_var_bec0.33 = constant i32 -382906384
@global_var_b000.35 = constant i32 -382906384
@global_var_a880.37 = constant i32 -382906384
@global_var_a0c0.39 = constant i32 -382906384
@global_var_97b0.41 = constant i32 -382906384
@global_var_9078.43 = constant i32 -382906384
@global_var_88d0.45 = constant i32 -382906384
@global_var_ffff.46 = constant i32 -1603272477
@global_var_1bc30.48 = global i32 0
@global_var_1bb94.59 = global i32 0
@global_var_13334.61 = constant i32 47
@global_var_1bc34.64 = local_unnamed_addr global i32 0
@global_var_1bb98.66 = global i32 0
@global_var_d054.68 = constant i32 -382910448
@global_var_1ba20.70 = global i32 67252
@global_var_1bc3c.74 = local_unnamed_addr global i32 0
@global_var_1bc3b.75 = local_unnamed_addr global i32 0
@global_var_1bc3a.76 = local_unnamed_addr global i32 0
@global_var_1ba18.78 = global i32 -1
@global_var_1bb9c.83 = global i32 0
@global_var_d03c.85 = constant i32 -442556408
@global_var_1bc39.89 = local_unnamed_addr global i32 0
@global_var_13338.93 = constant i32 10
@global_var_1ba1c.95 = global i32 -1
@global_var_10c7c.99 = constant i32 -382910448
@global_var_106b4.100 = constant i32 -382910224
@global_var_1333c.103 = constant i32 16777216
@global_var_1bba4.105 = global i32 0
@global_var_1bbb0.107 = global i32 0
@global_var_1bba8.109 = global i32 0
@global_var_1bbac.111 = global i32 0
@global_var_13344.117 = constant [23 x i8] c"g1abc4dmo35hnp2lie0kjf\00"
@global_var_e09c.122 = constant i32 -442695668
@global_var_1bc50.124 = global i32 0
@global_var_1bbe8.126 = global i32 0
@global_var_1bbb4.128 = global i32 0
@global_var_1bbe0.130 = global i32 0
@global_var_1bc48.138 = global i32 0
@global_var_1bc4c.140 = global i32 0
@global_var_1bbbb.143 = local_unnamed_addr global i32 0
@global_var_1bbba.144 = local_unnamed_addr global i32 0
@global_var_1bbcc.146 = global i32 0
@global_var_1bbc0.148 = local_unnamed_addr global i32 0
@global_var_1bbbd.149 = local_unnamed_addr global i32 0
@global_var_1bbcd.150 = local_unnamed_addr global i32 0
@global_var_1bbcf.151 = local_unnamed_addr global i32 0
@global_var_1bbc1.152 = local_unnamed_addr global i32 0
@global_var_1bbbc.153 = local_unnamed_addr global i32 0
@global_var_1bbce.154 = local_unnamed_addr global i32 0
@global_var_1bbdb.156 = local_unnamed_addr global i32 0
@global_var_1bbda.157 = local_unnamed_addr global i32 0
@global_var_13558.159 = constant [5 x i8] c"PMMV\00"
@global_var_134dc.161 = constant i32 0
@global_var_1335c.163 = constant i32 5396247
@global_var_13360.165 = constant i32 1296912387
@global_var_133d8.167 = constant i32 19
@global_var_13368.169 = constant i32 320017171
@global_var_13370.171 = constant i32 4115
@global_var_13374.173 = constant i32 370216979
@global_var_1337c.175 = constant i32 370216979
@global_var_13384.177 = constant i32 370216979
@global_var_1338c.179 = constant [7 x i8] c"CLVQNS\00"
@global_var_13394.181 = constant i32 370216979
@global_var_133a0.183 = constant i32 370216979
@global_var_133ac.185 = constant i32 303174162
@global_var_133b4.187 = constant i32 303174162
@global_var_133c0.189 = constant i32 370216979
@global_var_133cc.191 = constant [8 x i8] c"FGDCWNV\00"
@global_var_133d4.193 = constant i32 269555223
@global_var_133dc.195 = constant [7 x i8] c"XNZZ\0C\22\00"
@global_var_133e4.197 = constant [6 x i8] c"HT@XF\00"
@global_var_133ec.199 = constant [5 x i8] c"CLIM\00"
@global_var_133f4.201 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_133fc.203 = constant i32 387006810
@global_var_13404.205 = constant [6 x i8] c"TKXZT\00"
@global_var_1340c.207 = constant [6 x i8] c"CFOKL\00"
@global_var_13414.209 = constant [5 x i8] c"RCQQ\00"
@global_var_1341c.211 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_13424.213 = constant i32 320499557
@global_var_1342c.215 = constant i32 437918234
@global_var_13434.217 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_13440.219 = constant i32 319951379
@global_var_1344c.221 = constant i32 1447843658
@global_var_13458.223 = constant i32 1867011861
@global_var_13468.225 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_13474.227 = constant i32 1178819416
@global_var_13480.229 = constant i32 320017171
@global_var_13488.231 = constant i32 269488144
@global_var_13490.233 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_134a0.235 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_134b0.237 = constant [6 x i8] c"cFOKL\00"
@global_var_134b8.239 = constant [4 x i8] c"CFO\00"
@global_var_134bc.241 = constant [9 x i8] c"QOACFOKL\00"
@global_var_134c8.243 = constant i32 1263486531
@global_var_134d4.245 = constant i32 1263486531
@global_var_134e0.247 = constant i32 323043395
@global_var_134e8.249 = constant i32 324420417
@global_var_134f4.251 = constant i32 387007823
@global_var_134fc.253 = constant [7 x i8] c"OGPNKL\00"
@global_var_13504.255 = constant [8 x i8] c"QWRRMPV\00"
@global_var_1350c.257 = constant [5 x i8] c"WQGP\00"
@global_var_13514.259 = constant [6 x i8] c"EWGQV\00"
@global_var_1351c.261 = constant [7 x i8] c"FCGOML\00"
@global_var_13524.263 = constant [4 x i8] c"@KL\00"
@global_var_13528.265 = constant [7 x i8] c"VGNLGV\00"
@global_var_13530.267 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_1bbc4.268 = local_unnamed_addr global i32 0
@global_var_1bbc2.270 = local_unnamed_addr global i32 0
@global_var_1bbc3.271 = local_unnamed_addr global i32 0
@global_var_1bbdc.273 = local_unnamed_addr global i32 0
@global_var_1bbdd.274 = local_unnamed_addr global i32 0
@global_var_1353c.279 = constant [5 x i8] c"ogin\00"
@global_var_13544.281 = constant [6 x i8] c"enter\00"
@global_var_1354c.284 = constant [3 x i8] c"\0D\0A\00"
@global_var_13566.286 = constant i32 2096127
@global_var_1355d.288 = constant i32 2095871
@global_var_13550.290 = constant [8 x i8] c"assword\00"
@global_var_1bc58.292 = global i32 0
@global_var_1ba28.295 = global i32 -555810886
@global_var_1356c.300 = constant [3 x i8] c"E:\00"
@global_var_1bc68.301 = local_unnamed_addr global i32 0
@global_var_1bc6c.302 = local_unnamed_addr global i32 0
@global_var_1bc6d.303 = local_unnamed_addr global i32 0
@global_var_13570.305 = constant [18 x i8] c"<?<7$,+k!!+6k+ 1E\00"
@global_var_1bd10.306 = local_unnamed_addr global i32 0
@global_var_1bd14.307 = local_unnamed_addr global i32 0
@global_var_1bd15.308 = local_unnamed_addr global i32 0
@global_var_13584.310 = constant i32 41214
@global_var_1bd18.311 = local_unnamed_addr global i32 0
@global_var_1bd1c.312 = local_unnamed_addr global i32 0
@global_var_1bd1d.313 = local_unnamed_addr global i32 0
@global_var_13588.315 = constant [59 x i8] c"\22*6-e1-$1e&-,+ 6 e#$(,)<e$1e1- e*1- 7e1$') e607 e$1 e$)*1E\00"
@global_var_1bc64.316 = local_unnamed_addr global i32 0
@global_var_1bc60.317 = local_unnamed_addr global i32 0
@global_var_1bc65.318 = local_unnamed_addr global i32 0
@global_var_135c4.320 = constant [7 x i8] c"6- ))E\00"
@global_var_1bcd8.321 = local_unnamed_addr global i32 0
@global_var_1bcdc.322 = local_unnamed_addr global i32 0
@global_var_1bcdd.323 = local_unnamed_addr global i32 0
@global_var_135cc.325 = constant [8 x i8] c" +$') E\00"
@global_var_1bce0.326 = local_unnamed_addr global i32 0
@global_var_1bce4.327 = local_unnamed_addr global i32 0
@global_var_1bce5.328 = local_unnamed_addr global i32 0
@global_var_135d4.330 = constant [8 x i8] c"6<61 (E\00"
@global_var_1bce8.331 = local_unnamed_addr global i32 0
@global_var_1bcec.332 = local_unnamed_addr global i32 0
@global_var_1bced.333 = local_unnamed_addr global i32 0
@global_var_135dc.335 = constant [4 x i8] c"6-E\00"
@global_var_1bcfc.336 = local_unnamed_addr global i32 0
@global_var_1bcf8.337 = local_unnamed_addr global i32 0
@global_var_1bcfd.338 = local_unnamed_addr global i32 0
@global_var_135e0.340 = constant i32 724313962
@global_var_1bcf4.341 = local_unnamed_addr global i32 0
@global_var_1bcf0.342 = local_unnamed_addr global i32 0
@global_var_1bcf5.343 = local_unnamed_addr global i32 0
@global_var_135f8.345 = constant i32 269878280
@global_var_1bd04.346 = local_unnamed_addr global i32 0
@global_var_1bd00.347 = local_unnamed_addr global i32 0
@global_var_1bd05.348 = local_unnamed_addr global i32 0
@global_var_13614.350 = constant [10 x i8] c"+&*77 &1E\00"
@global_var_1bd0c.351 = local_unnamed_addr global i32 0
@global_var_1bd08.352 = local_unnamed_addr global i32 0
@global_var_1bd0d.353 = local_unnamed_addr global i32 0
@global_var_13620.355 = constant [17 x i8] c"j',+j'06<'*=e56E\00"
@global_var_1bd24.356 = local_unnamed_addr global i32 0
@global_var_1bd20.357 = local_unnamed_addr global i32 0
@global_var_1bd25.358 = local_unnamed_addr global i32 0
@global_var_13634.360 = constant [23 x i8] c"j',+j'06<'*=e.,))eh|jE\00"
@global_var_1bd2c.361 = local_unnamed_addr global i32 0
@global_var_1bd28.362 = local_unnamed_addr global i32 0
@global_var_1bd2d.363 = local_unnamed_addr global i32 0
@global_var_1364c.365 = constant [8 x i8] c"j57*&jE\00"
@global_var_1bc70.366 = local_unnamed_addr global i32 0
@global_var_1bc74.367 = local_unnamed_addr global i32 0
@global_var_1bc75.368 = local_unnamed_addr global i32 0
@global_var_13654.370 = constant [6 x i8] c"j = E\00"
@global_var_1bc7c.371 = local_unnamed_addr global i32 0
@global_var_1bc78.372 = local_unnamed_addr global i32 0
@global_var_1bc7d.373 = local_unnamed_addr global i32 0
@global_var_1365c.375 = constant [5 x i8] c"j#!E\00"
@global_var_1bc8c.376 = local_unnamed_addr global i32 0
@global_var_1bc88.377 = local_unnamed_addr global i32 0
@global_var_1bc8d.378 = local_unnamed_addr global i32 0
@global_var_13664.380 = constant [7 x i8] c"j($56E\00"
@global_var_1bc90.381 = local_unnamed_addr global i32 0
@global_var_1bc94.382 = local_unnamed_addr global i32 0
@global_var_1bc95.383 = local_unnamed_addr global i32 0
@global_var_1366c.385 = constant [15 x i8] c"j57*&j+ 1j1&5E\00"
@global_var_1bc98.386 = local_unnamed_addr global i32 0
@global_var_1bc9c.387 = local_unnamed_addr global i32 0
@global_var_1bc9d.388 = local_unnamed_addr global i32 0
@global_var_1367c.390 = constant [11 x i8] c"!37\0D )5 7E\00"
@global_var_1bca4.391 = local_unnamed_addr global i32 0
@global_var_1bca0.392 = local_unnamed_addr global i32 0
@global_var_1bca5.393 = local_unnamed_addr global i32 0
@global_var_136d0.395 = constant i32 808064529
@global_var_1bcac.396 = local_unnamed_addr global i32 0
@global_var_1bca8.397 = local_unnamed_addr global i32 0
@global_var_1bcad.398 = local_unnamed_addr global i32 0
@global_var_13688.400 = constant [18 x i8] c"j 1&j7 6*)3k&*+#E\00"
@global_var_1bcb0.401 = local_unnamed_addr global i32 0
@global_var_1bcb4.402 = local_unnamed_addr global i32 0
@global_var_1bcb5.403 = local_unnamed_addr global i32 0
@global_var_1369c.405 = constant [13 x i8] c"+$( 6 73 7eE\00"
@global_var_1bcbc.406 = local_unnamed_addr global i32 0
@global_var_1bcb8.407 = local_unnamed_addr global i32 0
@global_var_1bcbd.408 = local_unnamed_addr global i32 0
@global_var_136ac.410 = constant [15 x i8] c"j! 3j2$1&-!*\22E\00"
@global_var_1bcc0.411 = local_unnamed_addr global i32 0
@global_var_1bcc4.412 = local_unnamed_addr global i32 0
@global_var_1bcc5.413 = local_unnamed_addr global i32 0
@global_var_136bc.415 = constant [20 x i8] c"j! 3j(,6&j2$1&-!*\22E\00"
@global_var_1bccd.416 = local_unnamed_addr global i32 0
@global_var_1bcc8.417 = local_unnamed_addr global i32 0
@global_var_1bccc.418 = local_unnamed_addr global i32 0
@global_var_120d0.421 = constant i32 -476053504
@global_var_11020.425 = constant i32 -443219956
@global_var_1118c.430 = constant i32 -376111092
@global_var_1bc24.433 = global i32 0
@global_var_1130c.435 = constant i32 -456978431
@global_var_1bcd0.437 = global i32 0
@global_var_1bbec.439 = global i32 0
@global_var_1bb28.442 = global i32 256
@global_var_1ba2c.443 = global i32* @global_var_1bb28.442
@global_var_1bc14.446 = global i32 0
@global_var_1bd50.448 = global i32 0
@global_var_12884.449 = constant i32 -382910416
@global_var_11290.450 = constant i32 -509595648
@global_var_11914.457 = constant i32 -442564520
@global_var_1bb34.463 = global i32 0
@global_var_10ef8.465 = constant i32 -481230848
@global_var_1bc04.467 = global i32 0
@global_var_124d4.469 = constant i32 -509587456
@global_var_1bb4c.472 = global i32 0
@global_var_1bc08.476 = local_unnamed_addr global i32 0
@global_var_11e88.478 = constant i32 -352321419
@global_var_1b9f8.482 = global i32 -1
@global_var_1bc18.485 = global i32 0
@global_var_1bc1c.487 = local_unnamed_addr global i32 0
@global_var_120bc.488 = constant i32 -390234096
@global_var_136e8.490 = constant [10 x i8] c"/dev/null\00"
@global_var_1bc20.492 = global i32 0
@global_var_1bc0c.497 = local_unnamed_addr global i32 0
@global_var_1bc10.499 = global i32 0
@global_var_11270.501 = constant i32 -369097058
@global_var_1bb64 = external local_unnamed_addr global i32
@global_var_137f4.507 = constant i32 33554944
@global_var_11224.512 = constant i32 -442564608
@global_var_12384.514 = constant i32 -335544664
@global_var_124a0.517 = constant i32 -275775369
@global_var_12c18.518 = constant i32 -382910352
@global_var_1bc2c.520 = global i32 0
@global_var_1bb6c.522 = global i32* @global_var_137f4.507
@global_var_1bd68.524 = global i32 0
@global_var_1bd6c.526 = global i32 0
@global_var_1b9fc.529 = global i32 0
@global_var_1bb70.3 = external global i8*
@global_var_1bb8c.22 = external global i8*
@global_var_1bb8d.29 = global i8 0
@global_var_1bc38.72 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1ba24.80 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1bba0.98 = external global i8*
@global_var_1bbe4.132 = external global i8*
@global_var_1bbe5.133 = local_unnamed_addr global i8 0
@global_var_1bbb8.142 = external global i8*
@global_var_1bbd8.147 = local_unnamed_addr global i8 0
@global_var_1bbd9.155 = local_unnamed_addr global i8 0
@global_var_1bbd0.272 = local_unnamed_addr global i8 0
@global_var_1bbc8.269 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_132e4(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1bb70.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1bb70.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1ba14.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1ba14.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1ba14.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1ba14.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1bb70.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1ba14.6, { 1, 0 }
  uselistorder i8** @global_var_1bb70.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8124
  store i32 %arg2, i32* %arg1, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 113160 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 113160

bb2:                                              ; preds = %.thread
  ret i32 113160

; uselistorder directives
  uselistorder i32 113160, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_12170(i32 ptrtoint (i32* @global_var_d300.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 78624, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_11ce4()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  %v6_8238 = load i32, i32* @lr, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  store i32 %v1_8270, i32* @lr, align 4
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  store i32 %v6_8238, i32* @lr, align 4
  %v1_8298 = call i32 @function_11330(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 2, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_10528(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_1183c(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_1183c(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_1183c(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_10478(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_11224()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_10ca8()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_11894.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_11894.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_11894()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1bb90.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_11e2c(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_85c4 = call i32 @llvm.bswap.i32(i32 %v0_85a0)
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 9, 5, 6, 3, 7, 25, 8, 2, 12, 13, 17, 14, 10, 11, 15, 16, 23, 18, 20, 19, 21, 22, 26, 24, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 5, 4, 0, 2, 3, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_1183c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1bb8c.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1bb90.24 to i32), i32* @r6, align 4
  store i32 45852, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 45852, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_11984(i32 %v2_8614, i32 %v1_8620, i32 45852, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1bb8d.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1bb8d.29 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_1183c(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_b9c4.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_b9c4.31 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r7, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_11984(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1bb8d.29 to i8) to i32), i32 ptrtoint (i32* @global_var_b9c4.31 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r7, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_1183c(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1bb90.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_11984(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_bec0.33 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r7, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r7, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_1183c(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_b000.35 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r8, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_11984(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_b000.35 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r7, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r8, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_1183c(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_a880.37 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_11984(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_a880.37 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r7, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r8, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_1183c(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_11984(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_a0c0.39 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r7, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r8, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_1183c(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1bb90.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_11984(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_97b0.41 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r7, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r8, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_1183c(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_9078.43 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_11984(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_9078.43 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r7, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r8, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v1_8854 = trunc i32 %v2_8848 to i8
  %v2_8854 = load i32, i32* @r4, align 4
  %v3_8854 = inttoptr i32 %v2_8854 to i8*
  store i8 %v1_8854, i8* %v3_8854, align 1
  %v0_8858 = load i32, i32* %ip.global-to-local, align 4
  %v1_8858 = load i32, i32* @r6, align 4
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  store i32 %v0_8858, i32* %v2_8858, align 4
  %v2_885c = call i32 @function_1183c(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1bb90.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_11984(i32 %v2_8874, i32 %v1_8880, i32 ptrtoint (i32* @global_var_88d0.45 to i32), i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1bb8c.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  %v1_888c = load i32, i32* @r6, align 4
  %v2_888c = inttoptr i32 %v1_888c to i32*
  store i32 %v5_8884, i32* %v2_888c, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v2_8890 = load i32, i32* %r3.global-to-local, align 4
  %v5_8890 = mul i32 %v2_8890, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r7, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v1_889c = trunc i32 %v2_8894 to i8
  %v2_889c = load i32, i32* @r4, align 4
  %v3_889c = inttoptr i32 %v2_889c to i8*
  store i8 %v1_889c, i8* %v3_889c, align 1
  %v2_88a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88a0, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_8894

; uselistorder directives
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* @global_var_1bb90.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8* bitcast (i8** @global_var_1bb8c.22 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_88d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_88d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_88d0 = load i32, i32* @r4, align 4
  %v15_88d0 = load i32, i32* @r8, align 4
  %v21_88d0 = load i32, i32* @sl, align 4
  %v24_88d0 = load i32, i32* @fp, align 4
  %v1_88d4 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_88d4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_88f0 = urem i32 %arg4, 256
  store i32 %v1_88f0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_8900 = call i32 @function_1183c(i32 %v1_88d4, i32 4)
  %v0_8904 = load i32, i32* @r5, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8910 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8910, i32* %r3.global-to-local, align 4
  %v0_8914 = load i32, i32* @r4, align 4
  store i32 %v0_8914, i32* %r0.global-to-local, align 4
  %v5_8918 = inttoptr i32 %v0_8904 to i32*
  %v6_8918 = call i32 @function_829c(i32 %v0_8914, i32* %v5_8918, i32 2, i32 %v0_8910, i32 %v2_8900)
  %v1_8924 = urem i32 %v6_8918, 256
  store i32 %v1_8924, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8930 = load i32, i32* @r5, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @r4, align 4
  store i32 %v0_8934, i32* %r0.global-to-local, align 4
  %v5_8938 = trunc i32 %v6_8918 to i8
  %v6_893c = inttoptr i32 %v0_8930 to i32*
  %v7_893c = call i32 @function_829c(i32 %v0_8934, i32* %v6_893c, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_8918)
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_893c, i32* @r7, align 4
  %v0_8950 = load i32, i32* @r4, align 4
  store i32 %v0_8950, i32* %r0.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v0_8940 to i32*
  %v6_8954 = call i32 @function_829c(i32 %v0_8950, i32* %v5_8954, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_895c = urem i32 %v6_8954, 256
  store i32 %v1_895c, i32* %ip.global-to-local, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  store i32 %v0_8960, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_896c = load i32, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v5_8970 = trunc i32 %v6_8954 to i8
  %v6_8974 = inttoptr i32 %v0_8960 to i32*
  %v7_8974 = call i32 @function_829c(i32 %v0_896c, i32* %v6_8974, i32 5, i32 1, i32 %v6_8954)
  %v1_8980 = urem i32 %v7_8974, 256
  store i32 %v1_8980, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  %v0_8990 = load i32, i32* @r4, align 4
  store i32 %v0_8990, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_898c to i32*
  %v6_8998 = call i32 @function_829c(i32 %v0_8990, i32* %v5_8998, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_8980)
  %v0_89a4 = load i32, i32* @r5, align 4
  store i32 %v0_89a4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_89b0 = load i32, i32* @r4, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v5_89b4 = inttoptr i32 %v0_89a4 to i32*
  %v6_89b4 = call i32 @function_829c(i32 %v0_89b0, i32* %v5_89b4, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_8998)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89bc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_89b4, i32* @sl, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v5_89cc = inttoptr i32 %v0_89b8 to i32*
  %v6_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v5_89cc, i32 %v0_89bc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r5, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  %v0_89e0 = load i32, i32* @r4, align 4
  store i32 %v0_89e0, i32* %r0.global-to-local, align 4
  %v5_89e4 = inttoptr i32 %v0_89dc to i32*
  %v6_89e4 = call i32 @function_829c(i32 %v0_89e0, i32* %v5_89e4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_89ec = urem i32 %v6_89e4, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  %v0_89f0 = load i32, i32* @r5, align 4
  store i32 %v0_89f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89f8, i32* %r3.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a04 = inttoptr i32 %v0_89f0 to i32*
  %v6_8a04 = call i32 @function_829c(i32 %v0_89fc, i32* %v5_8a04, i32 18, i32 %v0_89f8, i32 %v1_89ec)
  %v0_8a0c = load i32, i32* @r5, align 4
  store i32 %v0_8a0c, i32* %r1.global-to-local, align 4
  %v2_8a10 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_8a10, i32* %r3.global-to-local, align 4
  store i32 %v6_8a04, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8a1c = load i32, i32* @r4, align 4
  store i32 %v0_8a1c, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a0c to i32*
  %v6_8a20 = call i32 @function_829c(i32 %v0_8a1c, i32* %v5_8a20, i32 19, i32 %v2_8a10, i32 ptrtoint (i32* @0 to i32))
  %v0_8a28 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i32*
  %v2_8a2c = call i32 @function_10f4c(i32* %v1_8a2c)
  %v1_8a30 = load i32, i32* @r6, align 4
  %v2_8a30 = add i32 %v1_8a30, %v2_8a2c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_8a44 = call i32 @function_11550(i32 2, i32 3, i32 6)
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v7_8a48 = icmp eq i32 %v3_8a44, -1
  store i1 %v7_8a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a48, label %dec_label_pc_9060, label %dec_label_pc_8a54

dec_label_pc_8a54:                                ; preds = %dec_label_pc_88d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8a5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8a5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_8a64 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8a70 = call i32 @function_11520(i32 %v3_8a44, i32 %v0_8a64, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8a70, i32* %r0.global-to-local, align 4
  %v7_8a74 = icmp eq i32 %v6_8a70, -1
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a74, label %dec_label_pc_9068, label %dec_label_pc_8a7c

dec_label_pc_8a7c:                                ; preds = %dec_label_pc_8a54
  %v0_8a88 = load i32, i32* @sl, align 4
  %v3_8a88 = mul i32 %v0_8a88, 65536
  store i32 %v3_8a88, i32* %sl.global-to-local, align 4
  %v0_8a8c = load i32, i32* @r7, align 4
  %v2_8a94 = icmp eq i32 %v1_88d4, 0
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  %v0_8a98 = load i32, i32* @r8, align 4
  %v1_8a98 = urem i32 %v0_8a98, 256
  store i32 %v1_8a98, i32* %r8.global-to-local, align 4
  %v3_8a9c = urem i32 %v0_8a8c, 65536
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  %v3_8aa0 = urem i32 %v6_8998, 65536
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v3_8aa4 = urem i32 %v0_8a88, 65536
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v0_8ab0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ab0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_8d44.preheader, label %dec_label_pc_8ac4

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8a7c
  %v3_8acc = mul i32 %v6_89cc, 65536
  %v1_8ad4 = urem i32 %v6_8998, 256
  %v1_8adc = add i32 %v3_8acc, 524288
  %v1_8ae0 = add i32 %v3_8acc, 4325376
  %v1_8ae4 = urem i32 %v0_8a88, 256
  %v1_8ae8 = add i32 %v3_8acc, 1835008
  %v0_8a8c.not = or i32 %v0_8a8c, -65536
  %v1_8af0 = xor i32 %v0_8a8c.not, 65535
  %v3_8af4 = udiv i32 %v1_8ae8, 256
  %tmp82 = udiv i32 %v0_8a8c, 256
  %v1_8b08 = and i32 %v3_8af4, 65280
  store i32 %v1_8b08, i32* %r0.global-to-local, align 4
  %v3_8b2c = mul nuw nsw i32 %v1_8ad4, 256
  %tmp83 = udiv i32 %v6_8998, 256
  %v4_8b34 = urem i32 %tmp83, 256
  %v5_8b34 = or i32 %v4_8b34, %v3_8b2c
  store i32 %v5_8b34, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_8af0, 256
  %v3_8b3c = mul nuw nsw i32 %v1_8ae4, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_8b44 = sdiv i32 %sext23, 16777216
  %v4_8b0c = sdiv i32 %v1_8ae0, 16777216
  %tmp85 = udiv i32 %v0_8a88, 256
  %v4_8b4c = urem i32 %tmp85, 256
  %v5_8b4c = or i32 %v4_8b4c, %v3_8b3c
  store i32 %v5_8b4c, i32* @r7, align 4
  %v1_8b50 = and i32 %tmp84, 65280
  store i32 %v1_8b50, i32* %ip.global-to-local, align 4
  %v4_8b54 = sdiv i32 %v1_8ae8, 16777216
  %v3_8b58 = udiv i32 %v1_8adc, 256
  %tmp86 = udiv i32 %v1_8af0, 256
  %v4_8b5c = urem i32 %tmp86, 256
  %v5_8b5c = or i32 %v4_8b5c, %v1_8b50
  store i32 %v5_8b5c, i32* @r6, align 4
  %v3_8b60 = ashr i32 %v1_8ae0, 31
  %v3_8b64 = ashr i32 %sext23, 31
  %v1_8b68 = and i32 %v3_8b58, 65280
  store i32 %v1_8b68, i32* @r5, align 4
  %v3_8b74 = ashr i32 %v1_8ae8, 31
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v3_8b7832 = udiv i32 %v1_8b50, 256
  store i32 %v3_8b7832, i32* %r3.global-to-local, align 4
  store i32 %v1_8ad4, i32* %r1.global-to-local, align 4
  %v4_8b80 = udiv i32 %v1_8adc, 16777216
  %v5_8b80 = or i32 %v4_8b80, %v1_8b68
  store i32 %v5_8b80, i32* %r8.global-to-local, align 4
  %v5_8b84 = trunc i32 %tmp86 to i8
  store i32 %v0_8ab0, i32* @r4, align 4
  %v3_8b9c33 = udiv i32 %v1_8b68, 256
  store i32 %v3_8b9c33, i32* %sl.global-to-local, align 4
  store i32 %v1_8ae4, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_8af0, 16777216
  %v4_8cc0 = sdiv i32 %sext15, 16777216
  %v2_8cf0 = icmp eq i32 %v1_8a98, 0
  %sext16 = mul i32 %v6_8998, 16777216
  %v4_8d04 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_8d20 = sdiv i32 %sext17, 16777216
  %v1_8c08 = trunc i32 %v4_8b44 to i8
  br label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %bb97, %dec_label_pc_8ac4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bb0 = call i32 @function_1183c(i32 1510, i32 4)
  store i32 %v2_8bb0, i32* %r0.global-to-local, align 4
  store i32 %v2_8900, i32* %r2.global-to-local, align 4
  %v3_8bb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8bb8, i32* %r3.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r4, align 4
  %v5_8bbc = mul i32 %v2_8bbc, 4
  %v6_8bbc = add i32 %v5_8bbc, %v2_8900
  %v7_8bbc = inttoptr i32 %v6_8bbc to i32*
  store i32 %v2_8bb0, i32* %v7_8bbc, align 4
  %v0_8bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8bc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_8bc0 = mul i32 %v1_8bc0, 4
  %v5_8bc0 = add i32 %v4_8bc0, %v0_8bc0
  %v6_8bc0 = inttoptr i32 %v5_8bc0 to i32*
  %v7_8bc0 = load i32, i32* %v6_8bc0, align 4
  store i32 %v7_8bc0, i32* %r4.global-to-local, align 4
  %v1_8bc4 = inttoptr i32 %v7_8bc0 to i8*
  %v2_8bc4 = load i8, i8* %v1_8bc4, align 1
  %tmp = urem i8 %v2_8bc4, 16
  %v1_8bc8 = zext i8 %tmp to i32
  %v1_8bcc = or i32 %v1_8bc8, 64
  store i32 %v1_8bcc, i32* %r2.global-to-local, align 4
  %v1_8bd0 = trunc i32 %v1_8bcc to i8
  store i8 %v1_8bd0, i8* %v1_8bc4, align 1
  %v0_8bd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd4 = inttoptr i32 %v0_8bd4 to i8*
  %v2_8bd4 = load i8, i8* %v1_8bd4, align 1
  %v1_8bd8 = and i8 %v2_8bd4, -16
  %v1_8bdc = or i8 %v1_8bd8, 5
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  store i8 %v1_8bdc, i8* %v1_8bd4, align 1
  %v2_8bec = load i32, i32* %r4.global-to-local, align 4
  %v3_8bec = add i32 %v2_8bec, 1
  %v4_8bec = inttoptr i32 %v3_8bec to i8*
  store i8 %v5_8938, i8* %v4_8bec, align 1
  %v2_8bf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 8
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i8*
  store i8 %v5_8970, i8* %v4_8bf4, align 1
  store i32 %v4_8b44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_8c00 = load i32, i32* %r1.global-to-local, align 4
  %v9_8c00 = icmp eq i32 %v0_8c00, 0
  store i1 %v9_8c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8b60, i32* %r2.global-to-local, align 4
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 4
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  store i32 %v4_8b0c, i32* %r1.global-to-local, align 4
  %v0_8c10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c14 = add i32 %v3_8c14, 6
  %v5_8c14 = inttoptr i32 %v4_8c14 to i8*
  store i8 64, i8* %v5_8c14, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ba4, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_8c1c = load i32, i32* %r2.global-to-local, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i8
  %v2_8c1c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c1c = add i32 %v2_8c1c, 3
  %v4_8c1c = inttoptr i32 %v3_8c1c to i8*
  store i8 %v1_8c1c, i8* %v4_8c1c, align 1
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i8
  %v2_8c20 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c20 = add i32 %v2_8c20, 2
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v0_8c24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c24, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_8c24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8c24, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_8b64, i32* %r1.global-to-local, align 4
  %v0_8c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c2c = trunc i32 %v0_8c2c to i8
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 9
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v1_8c2c, i8* %v4_8c2c, align 1
  %v0_8c30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c30, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_8c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_8c30 = trunc i32 %v1_8c30 to i8
  %v3_8c30 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c30 = add i32 %v3_8c30, 7
  %v5_8c30 = inttoptr i32 %v4_8c30 to i8*
  store i8 %v2_8c30, i8* %v5_8c30, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_8c34 = load i32, i32* %stack_var_-40, align 4
  %v5_8c3c = mul i32 %v3_8c34, 24
  store i32 %v5_8c3c, i32* %r3.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v1_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c44 = add i32 %v1_8c44, 12
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  store i32 %v6_8a20, i32* %v3_8c44, align 4
  %v0_8c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c48 = load i32, i32* @sb, align 4
  %v2_8c48 = add i32 %v1_8c48, %v0_8c48
  store i32 %v2_8c48, i32* %r3.global-to-local, align 4
  %v1_8c4c = add i32 %v2_8c48, 16
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v0_8c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c50 = trunc i32 %v0_8c50 to i8
  %v2_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c50 = add i32 %v2_8c50, 5
  %v4_8c50 = inttoptr i32 %v3_8c50 to i8*
  store i8 %v1_8c50, i8* %v4_8c50, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c58 = add i32 %v0_8c58, 20
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v3_8c5c = add i32 %v0_8c58, 22
  %v4_8c5c = inttoptr i32 %v3_8c5c to i8*
  store i8 101, i8* %v4_8c5c, align 1
  %v0_8c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c60 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c60 = add i32 %v1_8c60, 16
  %v3_8c60 = inttoptr i32 %v2_8c60 to i32*
  store i32 %v0_8c60, i32* %v3_8c60, align 4
  %v0_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c64 = add i32 %v0_8c64, 24
  store i32 %v1_8c64, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c6c, -93
  store i32 %v1_8c6c, i32* %r3.global-to-local, align 4
  %v2_8c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c70 = add i32 %v2_8c70, 3
  %v4_8c70 = inttoptr i32 %v3_8c70 to i8*
  store i8 88, i8* %v4_8c70, align 1
  %v0_8c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c74 = trunc i32 %v0_8c74 to i8
  %v2_8c74 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 12
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v0_8c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c78 = trunc i32 %v0_8c78 to i8
  %v2_8c78 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c78 = add i32 %v2_8c78, 13
  %v4_8c78 = inttoptr i32 %v3_8c78 to i8*
  store i8 %v1_8c78, i8* %v4_8c78, align 1
  %v0_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c7c = add i32 %v0_8c7c, 38
  %v2_8c7c = inttoptr i32 %v1_8c7c to i8*
  %v3_8c7c = load i8, i8* %v2_8c7c, align 1
  %tmp103 = urem i8 %v3_8c7c, 16
  %v1_8c80 = zext i8 %tmp103 to i32
  %v1_8c84 = or i32 %v1_8c80, 64
  store i32 %v1_8c84, i32* %r3.global-to-local, align 4
  %v1_8c88 = trunc i32 %v1_8c84 to i8
  store i8 %v1_8c88, i8* %v2_8c7c, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %v1_8c90 = and i8 %v3_8c8c, -16
  %v1_8c94 = or i8 %v1_8c90, 5
  store i8 %v1_8c94, i8* %v2_8c8c, align 1
  %v0_8ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca0 = add i32 %v0_8ca0, 38
  store i32 %v1_8ca0, i32* @r5, align 4
  %v3_8ca4 = add i32 %v0_8ca0, 39
  %v4_8ca4 = inttoptr i32 %v3_8ca4 to i8*
  store i8 %v5_8938, i8* %v4_8ca4, align 1
  store i32 %v4_8b54, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r5, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 4
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_8b84, i8* %v4_8cb4, align 1
  %v0_8cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v0_8cb8 to i8
  %v2_8cb8 = load i32, i32* @r5, align 4
  %v3_8cb8 = add i32 %v2_8cb8, 2
  %v4_8cb8 = inttoptr i32 %v3_8cb8 to i8*
  store i8 %v1_8cb8, i8* %v4_8cb8, align 1
  %v0_8cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cbc, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_8cc0, i32* %r1.global-to-local, align 4
  %v0_8cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* @r5, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 3
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  store i32 %v6_8954, i32* %r2.global-to-local, align 4
  %v0_8ccc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ccc, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_8ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_8ccc = trunc i32 %v1_8ccc to i8
  %v3_8ccc = load i32, i32* @r5, align 4
  %v4_8ccc = add i32 %v3_8ccc, 6
  %v5_8ccc = inttoptr i32 %v4_8ccc to i8*
  store i8 %v2_8ccc, i8* %v5_8ccc, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd4 = trunc i32 %v0_8cd4 to i8
  %v2_8cd4 = load i32, i32* @r5, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 5
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v1_8cd4, i8* %v4_8cd4, align 1
  %v0_8cd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cdc, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8cdc = load i32, i32* %ip.global-to-local, align 4
  %v2_8cdc = trunc i32 %v1_8cdc to i8
  %v3_8cdc = load i32, i32* @r5, align 4
  %v4_8cdc = add i32 %v3_8cdc, 7
  %v5_8cdc = inttoptr i32 %v4_8cdc to i8*
  store i8 %v2_8cdc, i8* %v5_8cdc, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ce0 = trunc i32 %v0_8ce0 to i8
  %v2_8ce0 = load i32, i32* @r5, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 9
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v1_8ce0, i8* %v4_8ce0, align 1
  %v0_8ce4 = call i32 @function_dab8()
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v1_8a98, i32* %r1.global-to-local, align 4
  store i1 %v2_8cf0, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf4 = sub i32 1023, %v0_8ce4
  store i32 %v1_8cf4, i32* %r3.global-to-local, align 4
  br i1 %v2_8cf0, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v1_8cf4, i32* %v4_8cfc, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_8cf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf8 = add i32 %v1_8cf8, 16
  %v3_8cf8 = inttoptr i32 %v2_8cf8 to i32*
  %v4_8cf8 = load i32, i32* %v3_8cf8, align 4
  store i32 %v4_8cf8, i32* %r3.global-to-local, align 4
  %v2_8d00 = load i32, i32* @r5, align 4
  %v3_8d00 = add i32 %v2_8d00, 16
  %v4_8d00 = inttoptr i32 %v3_8d00 to i32*
  store i32 %v4_8cf8, i32* %v4_8d00, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_8d04, i32* %r3.global-to-local, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  %v1_8d0c = load i32, i32* @r5, align 4
  %v2_8d0c = add i32 %v1_8d0c, 12
  %v3_8d0c = inttoptr i32 %v2_8d0c to i32*
  store i32 %v0_8ce4, i32* %v3_8d0c, align 4
  %v0_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d10 = trunc i32 %v0_8d10 to i8
  %v2_8d10 = load i32, i32* @r6, align 4
  %v3_8d10 = add i32 %v2_8d10, 1
  %v4_8d10 = inttoptr i32 %v3_8d10 to i8*
  store i8 %v1_8d10, i8* %v4_8d10, align 1
  %v3_8d14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8d14, i32* %r3.global-to-local, align 4
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v1_8d1c = add i32 %v3_8d14, 1
  store i32 %v1_8d1c, i32* @r4, align 4
  store i32 %v4_8d20, i32* %r2.global-to-local, align 4
  %v9_8d24 = icmp eq i32 %v1_8d1c, %v1_88d4
  store i1 %v9_8d24, i1* %cpsr_z.global-to-local, align 1
  %v0_8d28 = load i32, i32* %sl.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i8
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 5
  %v4_8d28 = inttoptr i32 %v3_8d28 to i8*
  store i8 %v1_8d28, i8* %v4_8d28, align 1
  %v0_8d2c = load i32, i32* %r2.global-to-local, align 4
  %v1_8d2c = trunc i32 %v0_8d2c to i8
  %v2_8d2c = load i32, i32* @r6, align 4
  %v3_8d2c = inttoptr i32 %v2_8d2c to i8*
  store i8 %v1_8d2c, i8* %v3_8d2c, align 1
  %v0_8d30 = load i32, i32* @r7, align 4
  %v1_8d30 = trunc i32 %v0_8d30 to i8
  %v2_8d30 = load i32, i32* @r6, align 4
  %v3_8d30 = add i32 %v2_8d30, 2
  %v4_8d30 = inttoptr i32 %v3_8d30 to i8*
  store i8 %v1_8d30, i8* %v4_8d30, align 1
  %v0_8d34 = load i32, i32* %fp.global-to-local, align 4
  %v1_8d34 = trunc i32 %v0_8d34 to i8
  %v2_8d34 = load i32, i32* @r6, align 4
  %v3_8d34 = add i32 %v2_8d34, 3
  %v4_8d34 = inttoptr i32 %v3_8d34 to i8*
  store i8 %v1_8d34, i8* %v4_8d34, align 1
  %v0_8d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* @r6, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  %v0_8d3c = load i32, i32* @r4, align 4
  store i32 %v0_8d3c, i32* %stack_var_-40, align 4
  %v5_8d40 = icmp slt i32 %v1_8d1c, %v1_88d4
  br i1 %v5_8d40, label %dec_label_pc_8ba4, label %dec_label_pc_8d44.preheader

dec_label_pc_8d44.preheader:                      ; preds = %bb97, %dec_label_pc_8a7c
  %v1_8d64 = add i32 %v6_89cc, 66
  %v1_8d68 = add i32 %v6_89cc, 8
  %v2_8d7c = icmp eq i32 %v6_8a20, -1
  %v7_8d7c = icmp eq i32 %v6_8a20, -1
  %v9_8fa0 = icmp eq i32 %v3_8a9c, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_9010 = icmp eq i32 %v1_8a98, 0
  %v2_8dd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8df0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8e20 = icmp eq i32 %v1_89ec, 0
  br label %dec_label_pc_8d44

dec_label_pc_8d44:                                ; preds = %dec_label_pc_8d44.preheader, %dec_label_pc_904c
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_904c, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  store i32 %v1_8d64, i32* @fp, align 4
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8efc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8efc
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_8fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge, %dec_label_pc_8d84
  %v1_8d9c = phi i32 [ %v1_8d9c.pre, %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_8d84 ]
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v9_8d9c = icmp eq i32 %v3_8aa0, %v1_8d9c
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8fe4, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d98
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge ], [ %v1_8d9c, %dec_label_pc_8d98 ]
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8aa4, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %dec_label_pc_9024, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_8db0
  %v1_8db8 = load i32, i32* @r5, align 4
  %v2_8db8 = add i32 %v1_8db8, 16
  %v3_8db8 = inttoptr i32 %v2_8db8 to i32*
  %v4_8db8 = load i32, i32* %v3_8db8, align 4
  store i32 %v4_8db8, i32* %r3.global-to-local, align 4
  %v2_8dbc = load i32, i32* @r6, align 4
  %v3_8dbc = add i32 %v2_8dbc, 16
  %v4_8dbc = inttoptr i32 %v3_8dbc to i32*
  store i32 %v4_8db8, i32* %v4_8dbc, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_8dc4:                                ; preds = %bb102, %.thread20, %dec_label_pc_9024
  %v0_8dc4 = call i32 @function_dab8()
  store i32 %v0_8dc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8dc4, i32* %stack_var_-44, align 4
  %v0_8dcc = call i32 @function_dab8()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v0_8dcc, i32* %stack_var_-48, align 4
  %v0_8dd4 = call i32 @function_dab8()
  store i32 %v2_8dd8, i32* %r1.global-to-local, align 4
  store i32 %v0_8dd4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  store i32 %v0_8de4, i32* %r0.global-to-local, align 4
  %v3_8de8 = call i32 @function_10478(i32 %v0_8de4, i32 %v2_8dd8, i32 4)
  %v0_8dec = load i32, i32* @r8, align 4
  %v1_8dec = add i32 %v0_8dec, 6
  store i32 %v1_8dec, i32* %r0.global-to-local, align 4
  store i32 %v2_8df0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8df8 = call i32 @function_10478(i32 %v1_8dec, i32 %v2_8df0, i32 4)
  %v0_8dfc = load i32, i32* @r8, align 4
  %v1_8dfc = add i32 %v0_8dfc, 4
  store i32 %v1_8dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e08 = call i32 @function_10478(i32 %v1_8dfc, i32 %v2_8e00, i32 2)
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  %v0_8e10 = load i32, i32* @r8, align 4
  %v1_8e10 = add i32 %v0_8e10, 10
  store i32 %v1_8e10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e18 = call i32 @function_10478(i32 %v1_8e10, i32 %v2_8e0c, i32 2)
  store i32 %v3_8e18, i32* %r0.global-to-local, align 4
  store i32 %v1_89ec, i32* %r1.global-to-local, align 4
  store i1 %v2_8e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e20, label %dec_label_pc_8e28, label %dec_label_pc_9030

dec_label_pc_8e28:                                ; preds = %dec_label_pc_8dc4, %dec_label_pc_9030
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e2c = load i32, i32* @sl, align 4
  %v1_8e2c = trunc i32 %v0_8e2c to i8
  %v2_8e2c = load i32, i32* @r5, align 4
  %v3_8e2c = add i32 %v2_8e2c, 10
  %v4_8e2c = inttoptr i32 %v3_8e2c to i8*
  store i8 %v1_8e2c, i8* %v4_8e2c, align 1
  %v0_8e30 = load i32, i32* @sl, align 4
  %v1_8e30 = trunc i32 %v0_8e30 to i8
  %v2_8e30 = load i32, i32* @r5, align 4
  %v3_8e30 = add i32 %v2_8e30, 11
  %v4_8e30 = inttoptr i32 %v3_8e30 to i8*
  store i8 %v1_8e30, i8* %v4_8e30, align 1
  %v0_8e34 = load i32, i32* @r5, align 4
  store i32 %v0_8e34, i32* @r0, align 4
  %v2_8e38 = call i32 @function_c690(i32 %v0_8e34, i32 20)
  %v3_8e38 = trunc i32 %v2_8e38 to i8
  %v4_8e3c = sdiv i32 %v2_8e38, 256
  store i32 %v4_8e3c, i32* %r3.global-to-local, align 4
  %v1_8e40 = trunc i32 %v4_8e3c to i8
  %v2_8e40 = load i32, i32* @r5, align 4
  %v3_8e40 = add i32 %v2_8e40, 11
  %v4_8e40 = inttoptr i32 %v3_8e40 to i8*
  store i8 %v1_8e40, i8* %v4_8e40, align 1
  %v3_8e44 = load i32, i32* @r5, align 4
  %v4_8e44 = add i32 %v3_8e44, 10
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 %v3_8e38, i8* %v5_8e44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e4c = load i32, i32* @sl, align 4
  %v1_8e4c = trunc i32 %v0_8e4c to i8
  %v2_8e4c = load i32, i32* @r6, align 4
  %v3_8e4c = add i32 %v2_8e4c, 10
  %v4_8e4c = inttoptr i32 %v3_8e4c to i8*
  store i8 %v1_8e4c, i8* %v4_8e4c, align 1
  %v0_8e50 = load i32, i32* @sl, align 4
  %v1_8e50 = trunc i32 %v0_8e50 to i8
  %v2_8e50 = load i32, i32* @r6, align 4
  %v3_8e50 = add i32 %v2_8e50, 11
  %v4_8e50 = inttoptr i32 %v3_8e50 to i8*
  store i8 %v1_8e50, i8* %v4_8e50, align 1
  %v0_8e54 = load i32, i32* @r6, align 4
  store i32 %v0_8e54, i32* @r0, align 4
  %v2_8e58 = call i32 @function_c690(i32 %v0_8e54, i32 20)
  %v3_8e58 = trunc i32 %v2_8e58 to i8
  store i32 %v2_8e58, i32* %r0.global-to-local, align 4
  %v4_8e5c = sdiv i32 %v2_8e58, 256
  store i32 %v4_8e5c, i32* %r3.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i8*
  store i8 %v3_8e58, i8* %v5_8e60, align 1
  %v0_8e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e64 to i8
  %v2_8e64 = load i32, i32* @r6, align 4
  %v3_8e64 = add i32 %v2_8e64, 11
  %v4_8e64 = inttoptr i32 %v3_8e64 to i8*
  store i8 %v1_8e64, i8* %v4_8e64, align 1
  %v0_8e68 = load i32, i32* @r7, align 4
  %v1_8e68 = add i32 %v0_8e68, 4
  %v2_8e68 = inttoptr i32 %v1_8e68 to i8*
  %v3_8e68 = load i8, i8* %v2_8e68, align 1
  %v4_8e68 = zext i8 %v3_8e68 to i32
  store i32 %v4_8e68, i32* %r3.global-to-local, align 4
  %v1_8e6c = add i32 %v0_8e68, 5
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v0_8e68, i32* @r1, align 4
  %v4_8e74 = mul nuw nsw i32 %v4_8e6c, 256
  %v5_8e74 = or i32 %v4_8e74, %v4_8e68
  store i32 %v5_8e74, i32* %r2.global-to-local, align 4
  %v0_8e78 = load i32, i32* @sl, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i8
  %v3_8e78 = add i32 %v0_8e68, 6
  %v4_8e78 = inttoptr i32 %v3_8e78 to i8*
  store i8 %v1_8e78, i8* %v4_8e78, align 1
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  %v0_8e80 = load i32, i32* @sl, align 4
  %v1_8e80 = trunc i32 %v0_8e80 to i8
  %v2_8e80 = load i32, i32* @r7, align 4
  %v3_8e80 = add i32 %v2_8e80, 7
  %v4_8e80 = inttoptr i32 %v3_8e80 to i8*
  store i8 %v1_8e80, i8* %v4_8e80, align 1
  %v0_8e84 = load i32, i32* @r6, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_c6ec(i32 %v0_8e84, i32 %v0_8e68, i32 %v5_8e74, i32 %v1_8d68)
  %v5_8e88 = trunc i32 %v4_8e88 to i8
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v3_8e8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8e8c, i32* %r3.global-to-local, align 4
  %v3_8e90 = mul i32 %v3_8e8c, 32
  store i32 %v3_8e90, i32* %r2.global-to-local, align 4
  %v0_8e94 = load i32, i32* @r5, align 4
  %v1_8e94 = add i32 %v0_8e94, 16
  %v2_8e94 = inttoptr i32 %v1_8e94 to i32*
  %v3_8e94 = load i32, i32* %v2_8e94, align 4
  store i32 %v3_8e94, i32* %r1.global-to-local, align 4
  %v5_8e98 = mul i32 %v3_8e8c, 24
  store i32 %v5_8e98, i32* %r2.global-to-local, align 4
  %v4_8e9c35 = udiv i32 %v4_8e88, 256
  %v1_8ea0 = trunc i32 %v4_8e9c35 to i8
  %v2_8ea0 = load i32, i32* @r7, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 7
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i8*
  store i8 %v1_8ea0, i8* %v4_8ea0, align 1
  %v0_8ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ea4 = load i32, i32* @sb, align 4
  %v2_8ea4 = add i32 %v1_8ea4, %v0_8ea4
  store i32 %v2_8ea4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r7, align 4
  %v4_8eac = add i32 %v3_8eac, 6
  %v5_8eac = inttoptr i32 %v4_8eac to i8*
  store i8 %v5_8e88, i8* %v5_8eac, align 1
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8eb0 = add i32 %v1_8eb0, 4
  %v3_8eb0 = inttoptr i32 %v2_8eb0 to i32*
  store i32 %v0_8eb0, i32* %v3_8eb0, align 4
  %v0_8eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8eb4 = trunc i32 %v0_8eb4 to i8
  %v2_8eb4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @sb, align 4
  %v4_8eb4 = add i32 %v3_8eb4, %v2_8eb4
  %v5_8eb4 = inttoptr i32 %v4_8eb4 to i8*
  store i8 %v1_8eb4, i8* %v5_8eb4, align 1
  %v0_8eb8 = load i32, i32* @sl, align 4
  %v1_8eb8 = trunc i32 %v0_8eb8 to i8
  %v2_8eb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8eb8 = add i32 %v2_8eb8, 2
  %v4_8eb8 = inttoptr i32 %v3_8eb8 to i8*
  store i8 %v1_8eb8, i8* %v4_8eb8, align 1
  %v0_8ebc = load i32, i32* @sl, align 4
  %v1_8ebc = trunc i32 %v0_8ebc to i8
  %v2_8ebc = load i32, i32* %lr.global-to-local, align 4
  %v3_8ebc = add i32 %v2_8ebc, 1
  %v4_8ebc = inttoptr i32 %v3_8ebc to i8*
  store i8 %v1_8ebc, i8* %v4_8ebc, align 1
  %v0_8ec0 = load i32, i32* @sl, align 4
  %v1_8ec0 = trunc i32 %v0_8ec0 to i8
  %v2_8ec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8ec0 = add i32 %v2_8ec0, 3
  %v4_8ec0 = inttoptr i32 %v3_8ec0 to i8*
  store i8 %v1_8ec0, i8* %v4_8ec0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v0_8ed4 = load i32, i32* @fp, align 4
  store i32 %v0_8ed4, i32* %r2.global-to-local, align 4
  %v0_8ed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v7_8ee0 = call i32 @function_114ec(i32 %v3_8a44, i32* %v6_8ee0, i32 %v0_8ed4, i32 16384, i32 %v0_8ed8, i32 16)
  %v3_8ee4 = load i32, i32* %stack_var_-40, align 4
  %v1_8ee8 = add i32 %v3_8ee4, 1
  store i32 %v1_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v1_88d4, i32* %r3.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v1_8ee8, %v1_88d4
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ee8, i32* %stack_var_-40, align 4
  %v6_8ef8 = icmp slt i32 %v1_8ee8, %v1_88d4
  br i1 %v6_8ef8, label %dec_label_pc_8efc, label %dec_label_pc_904c

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d58
  %v1_8f10 = phi i32 [ %v1_8ee8, %dec_label_pc_8e28 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8f00 = mul i32 %v1_8f10, 24
  %v1_8f04 = load i32, i32* @sb, align 4
  %v2_8f04 = add i32 %v1_8f04, %v5_8f00
  store i32 %v2_8f04, i32* %r3.global-to-local, align 4
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v1_8f0c = add i32 %v2_8f04, 20
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* %r2.global-to-local, align 4
  %v4_8f10 = mul i32 %v1_8f10, 4
  %v5_8f10 = add i32 %v4_8f10, %v2_8900
  %v6_8f10 = inttoptr i32 %v5_8f10 to i32*
  %v7_8f10 = load i32, i32* %v6_8f10, align 4
  store i32 %v7_8f10, i32* @r5, align 4
  %v2_8f14 = icmp ugt i8 %v3_8f0c, 30
  %v7_8f14 = icmp eq i8 %v3_8f0c, 31
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  %v1_8f18 = add i32 %v7_8f10, 24
  store i32 %v1_8f18, i32* @r8, align 4
  %v1_8f1c = add i32 %v7_8f10, 38
  store i32 %v1_8f1c, i32* @r6, align 4
  %v1_8f20 = add i32 %v7_8f10, 58
  store i32 %v1_8f20, i32* @r7, align 4
  %v2_8f24 = xor i1 %v7_8f14, true
  %v3_8f24 = and i1 %v2_8f14, %v2_8f24
  br i1 %v3_8f24, label %dec_label_pc_8d78, label %dec_label_pc_8f28

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8efc
  %v1_8f28 = add i32 %v2_8f04, 16
  %v2_8f28 = inttoptr i32 %v1_8f28 to i32*
  %v3_8f28 = load i32, i32* %v2_8f28, align 4
  store i32 %v3_8f28, i32* %r4.global-to-local, align 4
  %v0_8f2c = call i32 @function_dab8()
  store i32 %v0_8f2c, i32* %r0.global-to-local, align 4
  %v3_8f30 = load i32, i32* %stack_var_-40, align 4
  %v5_8f38 = mul i32 %v3_8f30, 24
  %v0_8f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f38
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f3c, 65280
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f3c = udiv i32 %v0_8f3c, 256
  %v3_8f48 = and i32 %v1_8f3c, 65280
  store i32 %v3_8f48, i32* %r2.global-to-local, align 4
  %v3_8f4c = mul i32 %v0_8f3c, 16777216
  store i32 %v3_8f4c, i32* %ip.global-to-local, align 4
  %v1_8f50 = add i32 %v2_8f40, 20
  %v2_8f50 = inttoptr i32 %v1_8f50 to i8*
  %v3_8f50 = load i8, i8* %v2_8f50, align 1
  %v4_8f50 = zext i8 %v3_8f50 to i32
  store i32 %v4_8f50, i32* %lr.global-to-local, align 4
  %v4_8f54 = mul nuw nsw i32 %v1_8f44, 256
  %v5_8f54 = or i32 %v4_8f54, %v3_8f4c
  store i32 %v5_8f54, i32* %ip.global-to-local, align 4
  %v2_8f5c = call i32 @llvm.bswap.i32(i32 %v0_8f3c)
  %v7_8f60 = lshr i32 %v0_8f2c, %v4_8f50
  %v8_8f60 = add i32 %v7_8f60, %v2_8f5c
  %v3_8f6c = mul i32 %v8_8f60, 16777216
  %v1_8f70 = and i32 %v8_8f60, 65280
  store i32 %v1_8f70, i32* %r0.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v4_8f7c = mul nuw nsw i32 %v1_8f70, 256
  %v5_8f7c = or i32 %v4_8f7c, %v3_8f6c
  store i32 %v5_8f7c, i32* %r1.global-to-local, align 4
  %v2_8f80 = call i32 @llvm.bswap.i32(i32 %v8_8f60)
  store i32 %v2_8f80, i32* %r3.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f88 = load i32, i32* @r5, align 4
  %v2_8f88 = add i32 %v1_8f88, 16
  %v3_8f88 = inttoptr i32 %v2_8f88 to i32*
  store i32 %v2_8f80, i32* %v3_8f88, align 4
  br i1 %v2_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  %v0_8f90 = call i32 @function_dab8()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_8fa0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = load i32, i32* @r5, align 4
  %v2_8fa4 = add i32 %v1_8fa4, 12
  %v3_8fa4 = inttoptr i32 %v2_8fa4 to i32*
  store i32 %v0_8f90, i32* %v3_8fa4, align 4
  br i1 %v9_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge

dec_label_pc_8f90.dec_label_pc_8d98_crit_edge:    ; preds = %dec_label_pc_8f90
  %v1_8d9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8d98

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f90, %dec_label_pc_8d84
  %v0_8fac = call i32 @function_dab8()
  %v3_8fb4 = urem i32 %v0_8fac, 65536
  store i32 %v3_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fbc = sub nsw i32 999, %v3_8fb4
  store i32 %v1_8fbc, i32* %r2.global-to-local, align 4
  %v3_8fc0 = sdiv i32 %v1_8fbc, 256
  store i32 %v3_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fc434 = udiv i32 %v3_8fb4, 256
  store i32 %v3_8fc434, i32* %r3.global-to-local, align 4
  %v1_8fc8 = trunc i32 %v3_8fc434 to i8
  %v2_8fc8 = load i32, i32* @r5, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 5
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* @r5, align 4
  %v3_8fcc = add i32 %v2_8fcc, 4
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* @r6, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 5
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v1_8fd8 = load i32, i32* @r4, align 4
  %v9_8fd8 = icmp eq i32 %v3_8aa0, %v1_8fd8
  store i1 %v9_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_8fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_8fdc = trunc i32 %v0_8fdc to i8
  %v2_8fdc = load i32, i32* @r6, align 4
  %v3_8fdc = add i32 %v2_8fdc, 4
  %v4_8fdc = inttoptr i32 %v3_8fdc to i8*
  store i8 %v1_8fdc, i8* %v4_8fdc, align 1
  %v0_8fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge

dec_label_pc_8fac.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8fac
  %v1_8da8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8d98
  %v0_8fe4 = call i32 @function_dab8()
  %v1_8fe4 = trunc i32 %v0_8fe4 to i8
  store i32 %v0_8fe4, i32* %r0.global-to-local, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v4_8fec = sdiv i32 %v0_8fe4, 256
  store i32 %v4_8fec, i32* %r3.global-to-local, align 4
  %v1_8ff0 = load i32, i32* @r4, align 4
  %v9_8ff0 = icmp eq i32 %v3_8aa4, %v1_8ff0
  store i1 %v9_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v3_8ff4 = load i32, i32* @r5, align 4
  %v4_8ff4 = add i32 %v3_8ff4, 58
  %v5_8ff4 = inttoptr i32 %v4_8ff4 to i8*
  store i8 %v1_8fe4, i8* %v5_8ff4, align 1
  %v0_8ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ff8 = trunc i32 %v0_8ff8 to i8
  %v2_8ff8 = load i32, i32* @r7, align 4
  %v3_8ff8 = add i32 %v2_8ff8, 1
  %v4_8ff8 = inttoptr i32 %v3_8ff8 to i8*
  store i8 %v1_8ff8, i8* %v4_8ff8, align 1
  %v0_8ffc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ffc, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_9000:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  %v0_9000 = call i32 @function_dab8()
  %v1_9000 = trunc i32 %v0_9000 to i8
  store i32 %v0_9000, i32* %r0.global-to-local, align 4
  %v4_900436 = udiv i32 %v0_9000, 256
  %v1_9008 = trunc i32 %v4_900436 to i8
  %v2_9008 = load i32, i32* @r7, align 4
  %v3_9008 = add i32 %v2_9008, 3
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v1_9008, i8* %v4_9008, align 1
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9000
  %v1_9014 = load i32, i32* @r5, align 4
  %v2_9014 = add i32 %v1_9014, 16
  %v3_9014 = inttoptr i32 %v2_9014 to i32*
  %v4_9014 = load i32, i32* %v3_9014, align 4
  store i32 %v4_9014, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9000, %bb100
  %v3_9018 = load i32, i32* @r7, align 4
  %v4_9018 = add i32 %v3_9018, 2
  %v5_9018 = inttoptr i32 %v4_9018 to i8*
  store i8 %v1_9000, i8* %v5_9018, align 1
  %v0_901c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_901c, label %dec_label_pc_9024, label %bb102

bb102:                                            ; preds = %bb101
  %v1_901c = load i32, i32* %r3.global-to-local, align 4
  %v2_901c = load i32, i32* @r6, align 4
  %v3_901c = add i32 %v2_901c, 16
  %v4_901c = inttoptr i32 %v3_901c to i32*
  store i32 %v1_901c, i32* %v4_901c, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9024:                                ; preds = %dec_label_pc_8db0, %bb101
  %v0_9024 = call i32 @function_dab8()
  store i32 %v0_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r6, align 4
  %v2_9028 = add i32 %v1_9028, 16
  %v3_9028 = inttoptr i32 %v2_9028 to i32*
  store i32 %v0_9024, i32* %v3_9028, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9030:                                ; preds = %dec_label_pc_8dc4
  %v0_9030 = load i32, i32* @r7, align 4
  %v1_9030 = add i32 %v0_9030, 8
  store i32 %v1_9030, i32* @r4, align 4
  store i32 %v1_9030, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  %v2_903c = call i32 @function_db6c(i32 %v1_9030, i32 %v6_89cc)
  store i32 %v2_903c, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @sl, align 4
  %v1_9044 = trunc i32 %v0_9044 to i8
  %v2_9044 = load i32, i32* @r4, align 4
  %v4_9044 = add i32 %v2_9044, %v6_89cc
  %v5_9044 = inttoptr i32 %v4_9044 to i8*
  store i8 %v1_9044, i8* %v5_9044, align 1
  br label %dec_label_pc_8e28

dec_label_pc_904c:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9050 = call i32 @function_10f4c(i32* null)
  store i32 %v2_9050, i32* %r0.global-to-local, align 4
  store i32 %v2_8a30, i32* %r1.global-to-local, align 4
  %v9_9058 = icmp eq i32 %v2_8a30, %v2_9050
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v6_905c = icmp slt i32 %v2_8a30, %v2_9050
  br i1 %v6_905c, label %dec_label_pc_9060, label %dec_label_pc_8d44

dec_label_pc_9060:                                ; preds = %dec_label_pc_904c, %dec_label_pc_88d0, %dec_label_pc_9068
  %v29_9064 = phi i32 [ %v3_8a44, %dec_label_pc_88d0 ], [ %v1_906c, %dec_label_pc_9068 ], [ %v2_9050, %dec_label_pc_904c ]
  store i32 %v3_88d0, i32* %r4.global-to-local, align 4
  store i32 %v15_88d0, i32* %r8.global-to-local, align 4
  store i32 %v21_88d0, i32* %sl.global-to-local, align 4
  store i32 %v24_88d0, i32* %fp.global-to-local, align 4
  ret i32 %v29_9064

dec_label_pc_9068:                                ; preds = %dec_label_pc_8a54
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v1_906c = call i32 @function_10c7c(i32 %v3_8a44)
  store i32 %v1_906c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9060

; uselistorder directives
  uselistorder i32 %v1_906c, { 1, 0 }
  uselistorder i32 %v0_9000, { 0, 2, 1 }
  uselistorder i32 %v0_8fe4, { 0, 2, 1 }
  uselistorder i32 %v3_8fb4, { 0, 2, 1 }
  uselistorder i32 %v2_8f80, { 1, 0 }
  uselistorder i32 %v8_8f60, { 1, 2, 0 }
  uselistorder i32 %v3_8f4c, { 1, 0 }
  uselistorder i32 %v0_8f3c, { 2, 0, 1, 3 }
  uselistorder i32 %v7_8f10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8ee8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v4_8e88, { 0, 2, 1 }
  uselistorder i32 %v0_8e68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8e58, { 0, 2, 1 }
  uselistorder i32 %v4_8e3c, { 1, 0 }
  uselistorder i1 %v2_9010, { 2, 3, 1, 0 }
  uselistorder i1 %v9_8fa0, { 2, 3, 1, 0 }
  uselistorder i1 %v7_8d7c, { 2, 1, 0 }
  uselistorder i32 %v1_8d68, { 1, 0, 2 }
  uselistorder i32 %v0_8ce4, { 1, 0, 2 }
  uselistorder i32 %v3_8b74, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_8af0, { 0, 2, 1 }
  uselistorder i32 %v1_8ae8, { 2, 1, 0 }
  uselistorder i32 %v1_8ae4, { 1, 0 }
  uselistorder i32 %v1_8ae0, { 1, 0 }
  uselistorder i32 %v1_8ad4, { 1, 0 }
  uselistorder i32 %v3_8acc, { 2, 0, 1 }
  uselistorder i32 %v3_8a9c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8a98, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_8a94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8a8c, { 0, 2, 1 }
  uselistorder i32 %v0_8a88, { 0, 1, 3, 2 }
  uselistorder i1 %v7_8a74, { 1, 0 }
  uselistorder i1 %v7_8a48, { 1, 0 }
  uselistorder i32 %v3_8a44, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_8a30, { 2, 1, 0 }
  uselistorder i32 %v6_8a20, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_89ec, { 1, 2, 3, 0 }
  uselistorder i32 %v6_89cc, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8980, { 1, 2, 0 }
  uselistorder i32 %v6_8954, { 2, 1, 3, 0 }
  uselistorder i32 %v6_8918, { 1, 2, 0 }
  uselistorder i32 %v2_8900, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_88d4, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 3, 8, 9, 12, 13, 10, 11, 15, 14, 17, 16, 18, 20, 19, 21, 23, 22, 24, 25, 26, 27, 29, 28, 33, 30, 31, 32, 36, 34, 35, 2, 1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9024, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_8e28, { 1, 0 }
  uselistorder label %dec_label_pc_8dc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d44, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9078(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9078 = load i32, i32* @r4, align 4
  %v15_9078 = load i32, i32* @r8, align 4
  %v21_9078 = load i32, i32* @sl, align 4
  %v24_9078 = load i32, i32* @fp, align 4
  %v1_907c = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_907c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9098 = urem i32 %arg4, 256
  store i32 %v1_9098, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_90a8 = call i32 @function_1183c(i32 %v1_907c, i32 4)
  %v0_90ac = load i32, i32* @r5, align 4
  store i32 %v0_90ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_90b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90b8, i32* %r3.global-to-local, align 4
  %v0_90bc = load i32, i32* @r4, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  %v5_90c0 = inttoptr i32 %v0_90ac to i32*
  %v6_90c0 = call i32 @function_829c(i32 %v0_90bc, i32* %v5_90c0, i32 2, i32 %v0_90b8, i32 %v2_90a8)
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  %v0_90dc = load i32, i32* @r4, align 4
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v5_90e0 = trunc i32 %v6_90c0 to i8
  %v6_90e4 = inttoptr i32 %v0_90d8 to i32*
  %v7_90e4 = call i32 @function_829c(i32 %v0_90dc, i32* %v6_90e4, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_90c0)
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_90e4, i32* @r7, align 4
  %v0_90f8 = load i32, i32* @r4, align 4
  store i32 %v0_90f8, i32* %r0.global-to-local, align 4
  %v5_90fc = inttoptr i32 %v0_90e8 to i32*
  %v6_90fc = call i32 @function_829c(i32 %v0_90f8, i32* %v5_90fc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9108 = load i32, i32* @r5, align 4
  store i32 %v0_9108, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9114 = load i32, i32* @r4, align 4
  store i32 %v0_9114, i32* %r0.global-to-local, align 4
  %v5_9118 = trunc i32 %v6_90fc to i8
  %v6_911c = inttoptr i32 %v0_9108 to i32*
  %v7_911c = call i32 @function_829c(i32 %v0_9114, i32* %v6_911c, i32 5, i32 1, i32 %v6_90fc)
  %v1_9128 = urem i32 %v7_911c, 256
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9134 = load i32, i32* @r5, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  store i32 %v0_9138, i32* %r0.global-to-local, align 4
  %v5_9140 = inttoptr i32 %v0_9134 to i32*
  %v6_9140 = call i32 @function_829c(i32 %v0_9138, i32* %v5_9140, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_9128)
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  store i32 %v0_9158, i32* %r0.global-to-local, align 4
  %v5_915c = inttoptr i32 %v0_914c to i32*
  %v6_915c = call i32 @function_829c(i32 %v0_9158, i32* %v5_915c, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_9140)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r1.global-to-local, align 4
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9164, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_915c, i32* @sl, align 4
  %v0_9170 = load i32, i32* @r4, align 4
  store i32 %v0_9170, i32* %r0.global-to-local, align 4
  %v5_9174 = inttoptr i32 %v0_9160 to i32*
  %v6_9174 = call i32 @function_829c(i32 %v0_9170, i32* %v5_9174, i32 %v0_9164, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  store i32 %v0_9184, i32* %r1.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9184 to i32*
  %v6_918c = call i32 @function_829c(i32 %v0_9188, i32* %v5_918c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9194 = urem i32 %v6_918c, 256
  %v0_9198 = load i32, i32* @r5, align 4
  store i32 %v0_9198, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_91a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91a0, i32* %r3.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r4, align 4
  store i32 %v0_91a4, i32* %r0.global-to-local, align 4
  %v5_91ac = inttoptr i32 %v0_9198 to i32*
  %v6_91ac = call i32 @function_829c(i32 %v0_91a4, i32* %v5_91ac, i32 18, i32 %v0_91a0, i32 %v1_9194)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  %v2_91b8 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_91b8, i32* %r3.global-to-local, align 4
  store i32 %v6_91ac, i32* @r8, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_829c(i32 %v0_91c4, i32* %v5_91c8, i32 19, i32 %v2_91b8, i32 ptrtoint (i32* @0 to i32))
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91d0, i32* %r0.global-to-local, align 4
  %v1_91d4 = inttoptr i32 %v0_91d0 to i32*
  %v2_91d4 = call i32 @function_10f4c(i32* %v1_91d4)
  %v1_91d8 = load i32, i32* @r6, align 4
  %v2_91d8 = add i32 %v1_91d8, %v2_91d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_91ec = call i32 @function_11550(i32 2, i32 3, i32 6)
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v7_91f0 = icmp eq i32 %v3_91ec, -1
  store i1 %v7_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91f0, label %dec_label_pc_9798, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9078
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9204 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9204, i32* %r3.global-to-local, align 4
  %v0_920c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_920c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9218 = call i32 @function_11520(i32 %v3_91ec, i32 %v0_920c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9218, i32* %r0.global-to-local, align 4
  %v7_921c = icmp eq i32 %v6_9218, -1
  store i1 %v7_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_921c, label %dec_label_pc_97a0, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_91fc
  %v0_9230 = load i32, i32* @sl, align 4
  %v3_9230 = mul i32 %v0_9230, 65536
  store i32 %v3_9230, i32* %sl.global-to-local, align 4
  %v0_9234 = load i32, i32* @r7, align 4
  %v2_923c = icmp eq i32 %v1_907c, 0
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  %v0_9240 = load i32, i32* @r8, align 4
  %v1_9240 = urem i32 %v0_9240, 256
  store i32 %v1_9240, i32* %r8.global-to-local, align 4
  %v3_9244 = urem i32 %v0_9234, 65536
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  %v3_9248 = urem i32 %v6_9140, 65536
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v3_924c = urem i32 %v0_9230, 65536
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v0_9258 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9258, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_94d8.preheader, label %dec_label_pc_926c

dec_label_pc_926c:                                ; preds = %dec_label_pc_9224
  %v3_9274 = mul i32 %v6_9174, 65536
  %v1_927c = urem i32 %v6_9140, 256
  %v1_9284 = add i32 %v3_9274, 524288
  %v1_9288 = add i32 %v3_9274, 3407872
  %v1_928c = urem i32 %v0_9230, 256
  %v1_9290 = add i32 %v3_9274, 1835008
  %v0_9234.not = or i32 %v0_9234, -65536
  %v1_9298 = xor i32 %v0_9234.not, 65535
  %v3_929c = udiv i32 %v1_9290, 256
  %tmp77 = udiv i32 %v0_9234, 256
  %v1_92b0 = and i32 %v3_929c, 65280
  store i32 %v1_92b0, i32* %r0.global-to-local, align 4
  %v3_92d4 = mul nuw nsw i32 %v1_927c, 256
  %tmp78 = udiv i32 %v6_9140, 256
  %v4_92dc = urem i32 %tmp78, 256
  %v5_92dc = or i32 %v4_92dc, %v3_92d4
  store i32 %v5_92dc, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_9298, 256
  %v3_92e4 = mul nuw nsw i32 %v1_928c, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_92ec = sdiv i32 %sext23, 16777216
  %v4_92b4 = sdiv i32 %v1_9288, 16777216
  %tmp80 = udiv i32 %v0_9230, 256
  %v4_92f4 = urem i32 %tmp80, 256
  %v5_92f4 = or i32 %v4_92f4, %v3_92e4
  store i32 %v5_92f4, i32* @r7, align 4
  %v1_92f8 = and i32 %tmp79, 65280
  %v4_92fc = sdiv i32 %v1_9290, 16777216
  %v3_9300 = udiv i32 %v1_9284, 256
  %tmp81 = udiv i32 %v1_9298, 256
  %v4_9304 = urem i32 %tmp81, 256
  %v5_9304 = or i32 %v4_9304, %v1_92f8
  store i32 %v5_9304, i32* @r6, align 4
  %v3_9308 = ashr i32 %v1_9288, 31
  %v3_930c = ashr i32 %sext23, 31
  %v1_9310 = and i32 %v3_9300, 65280
  store i32 %v1_9310, i32* @r5, align 4
  %v3_931c = ashr i32 %v1_9290, 31
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v3_932032 = udiv i32 %v1_92f8, 256
  store i32 %v3_932032, i32* %r3.global-to-local, align 4
  store i32 %v1_927c, i32* %r1.global-to-local, align 4
  %v4_9328 = udiv i32 %v1_9284, 16777216
  %v5_9328 = or i32 %v4_9328, %v1_9310
  store i32 %v5_9328, i32* %r8.global-to-local, align 4
  %v5_932c = trunc i32 %tmp81 to i8
  store i32 %v0_9258, i32* @r4, align 4
  %v3_934433 = udiv i32 %v1_9310, 256
  store i32 %v3_934433, i32* %sl.global-to-local, align 4
  store i32 %v1_928c, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_9298, 16777216
  %v4_9454 = sdiv i32 %sext15, 16777216
  %v2_9484 = icmp eq i32 %v1_9240, 0
  %sext16 = mul i32 %v6_9140, 16777216
  %v4_9498 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_94b4 = sdiv i32 %sext17, 16777216
  %v1_93b0 = trunc i32 %v4_92ec to i8
  br label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %bb92, %dec_label_pc_926c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9358 = call i32 @function_1183c(i32 1510, i32 4)
  store i32 %v2_9358, i32* %r0.global-to-local, align 4
  store i32 %v2_90a8, i32* %r2.global-to-local, align 4
  %v3_9360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9360, i32* %r3.global-to-local, align 4
  %v2_9364 = load i32, i32* @r4, align 4
  %v5_9364 = mul i32 %v2_9364, 4
  %v6_9364 = add i32 %v5_9364, %v2_90a8
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v2_9358, i32* %v7_9364, align 4
  %v0_9368 = load i32, i32* %r2.global-to-local, align 4
  %v1_9368 = load i32, i32* %r3.global-to-local, align 4
  %v4_9368 = mul i32 %v1_9368, 4
  %v5_9368 = add i32 %v4_9368, %v0_9368
  %v6_9368 = inttoptr i32 %v5_9368 to i32*
  %v7_9368 = load i32, i32* %v6_9368, align 4
  store i32 %v7_9368, i32* %r4.global-to-local, align 4
  %v1_936c = inttoptr i32 %v7_9368 to i8*
  %v2_936c = load i8, i8* %v1_936c, align 1
  %tmp = urem i8 %v2_936c, 16
  %v1_9370 = zext i8 %tmp to i32
  %v1_9374 = or i32 %v1_9370, 64
  store i32 %v1_9374, i32* %r2.global-to-local, align 4
  %v1_9378 = trunc i32 %v1_9374 to i8
  store i8 %v1_9378, i8* %v1_936c, align 1
  %v0_937c = load i32, i32* %r4.global-to-local, align 4
  %v1_937c = inttoptr i32 %v0_937c to i8*
  %v2_937c = load i8, i8* %v1_937c, align 1
  %v1_9380 = and i8 %v2_937c, -16
  %v1_9384 = or i8 %v1_9380, 5
  store i32 %v1_9128, i32* %r1.global-to-local, align 4
  store i8 %v1_9384, i8* %v1_937c, align 1
  %v2_9394 = load i32, i32* %r4.global-to-local, align 4
  %v3_9394 = add i32 %v2_9394, 1
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v5_90e0, i8* %v4_9394, align 1
  %v2_939c = load i32, i32* %r4.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 8
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 %v5_9118, i8* %v4_939c, align 1
  store i32 %v4_92ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_93a8 = icmp eq i32 %v0_93a8, 0
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9308, i32* %r2.global-to-local, align 4
  %v2_93b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  store i32 %v4_92b4, i32* %r1.global-to-local, align 4
  %v0_93b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_934c
  %v1_93b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_93b8, i32* %r3.global-to-local, align 4
  %v2_93bc = trunc i32 %v1_93b8 to i8
  %v3_93bc = load i32, i32* %r4.global-to-local, align 4
  %v4_93bc = add i32 %v3_93bc, 7
  %v5_93bc = inttoptr i32 %v4_93bc to i8*
  store i8 %v2_93bc, i8* %v5_93bc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_934c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = add i32 %v2_93c4, 3
  %v4_93c4 = inttoptr i32 %v3_93c4 to i8*
  store i8 %v1_93c4, i8* %v4_93c4, align 1
  %v0_93c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_93c8 = trunc i32 %v0_93c8 to i8
  %v2_93c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c8 = add i32 %v2_93c8, 2
  %v4_93c8 = inttoptr i32 %v3_93c8 to i8*
  store i8 %v1_93c8, i8* %v4_93c8, align 1
  %v0_93cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93cc, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_930c, i32* %r1.global-to-local, align 4
  %v0_93d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 9
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  %v0_93d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93d8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_93d8 = trunc i32 %v1_93d8 to i8
  %v3_93d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_93d8 = add i32 %v3_93d8, 6
  %v5_93d8 = inttoptr i32 %v4_93d8 to i8*
  store i8 %v2_93d8, i8* %v5_93d8, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_93dc = load i32, i32* %stack_var_-40, align 4
  %v5_93e4 = mul i32 %v3_93dc, 24
  store i32 %v5_93e4, i32* %r3.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v1_93ec = load i32, i32* %r4.global-to-local, align 4
  %v2_93ec = add i32 %v1_93ec, 12
  %v3_93ec = inttoptr i32 %v2_93ec to i32*
  store i32 %v6_91c8, i32* %v3_93ec, align 4
  %v0_93f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f0 = load i32, i32* @sb, align 4
  %v2_93f0 = add i32 %v1_93f0, %v0_93f0
  store i32 %v2_93f0, i32* %r3.global-to-local, align 4
  %v0_93f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 5
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f8 = add i32 %v0_93f8, 16
  %v2_93f8 = inttoptr i32 %v1_93f8 to i32*
  %v3_93f8 = load i32, i32* %v2_93f8, align 4
  store i32 %v3_93f8, i32* %r2.global-to-local, align 4
  %v0_93fc = load i32, i32* %r4.global-to-local, align 4
  %v1_93fc = add i32 %v0_93fc, 20
  store i32 %v1_93fc, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9404 = load i32, i32* %r0.global-to-local, align 4
  %v1_9404 = trunc i32 %v0_9404 to i8
  %v3_9404 = add i32 %v0_93fc, 23
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 %v1_9404, i8* %v4_9404, align 1
  %v0_9408 = load i32, i32* %r3.global-to-local, align 4
  %v1_9408 = trunc i32 %v0_9408 to i8
  %v2_9408 = load i32, i32* %r1.global-to-local, align 4
  %v3_9408 = add i32 %v2_9408, 2
  %v4_9408 = inttoptr i32 %v3_9408 to i8*
  store i8 %v1_9408, i8* %v4_9408, align 1
  %v0_940c = load i32, i32* %r4.global-to-local, align 4
  %v1_940c = add i32 %v0_940c, 24
  %v2_940c = inttoptr i32 %v1_940c to i8*
  %v3_940c = load i8, i8* %v2_940c, align 1
  %tmp98 = urem i8 %v3_940c, 16
  %v1_9410 = zext i8 %tmp98 to i32
  %v1_9414 = or i32 %v1_9410, 64
  store i32 %v1_9414, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v1_9414 to i8
  store i8 %v1_9418, i8* %v2_940c, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r4.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, 16
  %v3_941c = inttoptr i32 %v2_941c to i32*
  store i32 %v0_941c, i32* %v3_941c, align 4
  %v0_9420 = load i32, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 24
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v1_9424 = and i8 %v3_9420, -16
  %v1_9428 = or i8 %v1_9424, 5
  store i8 %v1_9428, i8* %v2_9420, align 1
  %v0_9434 = load i32, i32* %r4.global-to-local, align 4
  %v1_9434 = add i32 %v0_9434, 24
  store i32 %v1_9434, i32* @r5, align 4
  %v3_9438 = add i32 %v0_9434, 25
  %v4_9438 = inttoptr i32 %v3_9438 to i8*
  store i8 %v5_90e0, i8* %v4_9438, align 1
  store i32 %v4_92fc, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v2_9448 = load i32, i32* @r5, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v5_932c, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = trunc i32 %v0_944c to i8
  %v2_944c = load i32, i32* @r5, align 4
  %v3_944c = add i32 %v2_944c, 2
  %v4_944c = inttoptr i32 %v3_944c to i8*
  store i8 %v1_944c, i8* %v4_944c, align 1
  %v0_9450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9450, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_9454, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %r2.global-to-local, align 4
  %v1_9458 = trunc i32 %v0_9458 to i8
  %v2_9458 = load i32, i32* @r5, align 4
  %v3_9458 = add i32 %v2_9458, 3
  %v4_9458 = inttoptr i32 %v3_9458 to i8*
  store i8 %v1_9458, i8* %v4_9458, align 1
  store i32 %v6_90fc, i32* %r2.global-to-local, align 4
  %v0_9460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9460, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_9460 = load i32, i32* %r3.global-to-local, align 4
  %v2_9460 = trunc i32 %v1_9460 to i8
  %v3_9460 = load i32, i32* @r5, align 4
  %v4_9460 = add i32 %v3_9460, 6
  %v5_9460 = inttoptr i32 %v4_9460 to i8*
  store i8 %v2_9460, i8* %v5_9460, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 5
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* @r5, align 4
  %v3_946c = add i32 %v2_946c, 8
  %v4_946c = inttoptr i32 %v3_946c to i8*
  store i8 %v1_946c, i8* %v4_946c, align 1
  %v0_9470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9470, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_9470 = load i32, i32* %r0.global-to-local, align 4
  %v2_9470 = trunc i32 %v1_9470 to i8
  %v3_9470 = load i32, i32* @r5, align 4
  %v4_9470 = add i32 %v3_9470, 7
  %v5_9470 = inttoptr i32 %v4_9470 to i8*
  store i8 %v2_9470, i8* %v5_9470, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_9474 = load i32, i32* %r3.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r5, align 4
  %v3_9474 = add i32 %v2_9474, 9
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = call i32 @function_dab8()
  store i32 %v0_9478, i32* %r0.global-to-local, align 4
  store i32 %v1_9240, i32* %r1.global-to-local, align 4
  store i1 %v2_9484, i1* %cpsr_z.global-to-local, align 1
  %v1_9488 = sub i32 1023, %v0_9478
  store i32 %v1_9488, i32* %r3.global-to-local, align 4
  br i1 %v2_9484, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 16
  %v4_9490 = inttoptr i32 %v3_9490 to i32*
  store i32 %v1_9488, i32* %v4_9490, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_948c = load i32, i32* %r4.global-to-local, align 4
  %v2_948c = add i32 %v1_948c, 16
  %v3_948c = inttoptr i32 %v2_948c to i32*
  %v4_948c = load i32, i32* %v3_948c, align 4
  store i32 %v4_948c, i32* %r3.global-to-local, align 4
  %v2_9494 = load i32, i32* @r5, align 4
  %v3_9494 = add i32 %v2_9494, 16
  %v4_9494 = inttoptr i32 %v3_9494 to i32*
  store i32 %v4_948c, i32* %v4_9494, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_9498, i32* %r3.global-to-local, align 4
  %v0_949c = load i32, i32* %r4.global-to-local, align 4
  %v1_949c = add i32 %v0_949c, 44
  store i32 %v1_949c, i32* @r6, align 4
  %v1_94a0 = load i32, i32* @r5, align 4
  %v2_94a0 = add i32 %v1_94a0, 12
  %v3_94a0 = inttoptr i32 %v2_94a0 to i32*
  store i32 %v0_9478, i32* %v3_94a0, align 4
  %v0_94a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a4 = trunc i32 %v0_94a4 to i8
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 1
  %v4_94a4 = inttoptr i32 %v3_94a4 to i8*
  store i8 %v1_94a4, i8* %v4_94a4, align 1
  %v3_94a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_94a8, i32* %r3.global-to-local, align 4
  store i32 %v1_907c, i32* %r1.global-to-local, align 4
  %v1_94b0 = add i32 %v3_94a8, 1
  store i32 %v1_94b0, i32* @r4, align 4
  store i32 %v4_94b4, i32* %r2.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b0, %v1_907c
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v0_94bc = load i32, i32* %sl.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* @r6, align 4
  %v3_94bc = add i32 %v2_94bc, 5
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i8
  %v2_94c0 = load i32, i32* @r6, align 4
  %v3_94c0 = inttoptr i32 %v2_94c0 to i8*
  store i8 %v1_94c0, i8* %v3_94c0, align 1
  %v0_94c4 = load i32, i32* @r7, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 2
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  %v0_94c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_94c8 = trunc i32 %v0_94c8 to i8
  %v2_94c8 = load i32, i32* @r6, align 4
  %v3_94c8 = add i32 %v2_94c8, 3
  %v4_94c8 = inttoptr i32 %v3_94c8 to i8*
  store i8 %v1_94c8, i8* %v4_94c8, align 1
  %v0_94cc = load i32, i32* %r8.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* @r6, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %stack_var_-40, align 4
  %v5_94d4 = icmp slt i32 %v1_94b0, %v1_907c
  br i1 %v5_94d4, label %dec_label_pc_934c, label %dec_label_pc_94d8.preheader

dec_label_pc_94d8.preheader:                      ; preds = %bb92, %dec_label_pc_9224
  %v1_94f8 = add i32 %v6_9174, 8
  %v1_94fc = add i32 %v6_9174, 52
  %v2_9508 = icmp eq i32 %v6_91c8, -1
  %v7_9508 = icmp eq i32 %v6_91c8, -1
  %v9_96d0 = icmp eq i32 %v3_9244, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_9740 = icmp eq i32 %v1_9240, 0
  %v2_975c = icmp eq i32 %v1_9194, 0
  br label %dec_label_pc_94d8

dec_label_pc_94d8:                                ; preds = %dec_label_pc_94d8.preheader, %dec_label_pc_9784
  store i32 %v1_907c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_9784, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_94f8, i32* @fp, align 4
  store i32 %v1_94fc, i32* @sl, align 4
  br label %dec_label_pc_9630

dec_label_pc_9504:                                ; preds = %dec_label_pc_9630
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_96d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_96d0, label %dec_label_pc_96dc, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_96c0.dec_label_pc_9524_crit_edge, %dec_label_pc_9510
  %v1_9528 = phi i32 [ %v1_9528.pre, %dec_label_pc_96c0.dec_label_pc_9524_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_9510 ]
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v9_9528 = icmp eq i32 %v3_9248, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9528, label %dec_label_pc_9714, label %dec_label_pc_9530

dec_label_pc_9530:                                ; preds = %dec_label_pc_96dc.dec_label_pc_9530_crit_edge, %dec_label_pc_9524
  %v1_9534 = phi i32 [ %v1_9534.pre, %dec_label_pc_96dc.dec_label_pc_9530_crit_edge ], [ %v1_9528, %dec_label_pc_9524 ]
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v9_9534 = icmp eq i32 %v3_924c, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9534, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %dec_label_pc_9754, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_953c
  %v1_9544 = load i32, i32* @r5, align 4
  %v2_9544 = add i32 %v1_9544, 16
  %v3_9544 = inttoptr i32 %v2_9544 to i32*
  %v4_9544 = load i32, i32* %v3_9544, align 4
  store i32 %v4_9544, i32* %r3.global-to-local, align 4
  %v2_9548 = load i32, i32* @r6, align 4
  %v3_9548 = add i32 %v2_9548, 16
  %v4_9548 = inttoptr i32 %v3_9548 to i32*
  store i32 %v4_9544, i32* %v4_9548, align 4
  br label %dec_label_pc_9550

dec_label_pc_9550:                                ; preds = %bb97, %.thread20
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_955c:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754, %dec_label_pc_9768
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9560 = load i32, i32* @r8, align 4
  %v1_9560 = trunc i32 %v0_9560 to i8
  %v2_9560 = load i32, i32* @r5, align 4
  %v3_9560 = add i32 %v2_9560, 10
  %v4_9560 = inttoptr i32 %v3_9560 to i8*
  store i8 %v1_9560, i8* %v4_9560, align 1
  %v0_9564 = load i32, i32* @r8, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* @r5, align 4
  %v3_9564 = add i32 %v2_9564, 11
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* @r5, align 4
  store i32 %v0_9568, i32* @r0, align 4
  %v2_956c = call i32 @function_c690(i32 %v0_9568, i32 20)
  %v3_956c = trunc i32 %v2_956c to i8
  %v4_9570 = sdiv i32 %v2_956c, 256
  store i32 %v4_9570, i32* %r3.global-to-local, align 4
  %v1_9574 = trunc i32 %v4_9570 to i8
  %v2_9574 = load i32, i32* @r5, align 4
  %v3_9574 = add i32 %v2_9574, 11
  %v4_9574 = inttoptr i32 %v3_9574 to i8*
  store i8 %v1_9574, i8* %v4_9574, align 1
  %v3_9578 = load i32, i32* @r5, align 4
  %v4_9578 = add i32 %v3_9578, 10
  %v5_9578 = inttoptr i32 %v4_9578 to i8*
  store i8 %v3_956c, i8* %v5_9578, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9580 = load i32, i32* @r8, align 4
  %v1_9580 = trunc i32 %v0_9580 to i8
  %v2_9580 = load i32, i32* @r6, align 4
  %v3_9580 = add i32 %v2_9580, 10
  %v4_9580 = inttoptr i32 %v3_9580 to i8*
  store i8 %v1_9580, i8* %v4_9580, align 1
  %v0_9584 = load i32, i32* @r8, align 4
  %v1_9584 = trunc i32 %v0_9584 to i8
  %v2_9584 = load i32, i32* @r6, align 4
  %v3_9584 = add i32 %v2_9584, 11
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 %v1_9584, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* @r6, align 4
  store i32 %v0_9588, i32* @r0, align 4
  %v2_958c = call i32 @function_c690(i32 %v0_9588, i32 20)
  %v3_958c = trunc i32 %v2_958c to i8
  store i32 %v2_958c, i32* %r0.global-to-local, align 4
  %v4_9590 = sdiv i32 %v2_958c, 256
  store i32 %v4_9590, i32* %r3.global-to-local, align 4
  %v3_9594 = load i32, i32* @r6, align 4
  %v4_9594 = add i32 %v3_9594, 10
  %v5_9594 = inttoptr i32 %v4_9594 to i8*
  store i8 %v3_958c, i8* %v5_9594, align 1
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 11
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r7, align 4
  %v1_959c = add i32 %v0_959c, 4
  %v2_959c = inttoptr i32 %v1_959c to i8*
  %v3_959c = load i8, i8* %v2_959c, align 1
  %v4_959c = zext i8 %v3_959c to i32
  store i32 %v4_959c, i32* %r3.global-to-local, align 4
  %v1_95a0 = add i32 %v0_959c, 5
  %v2_95a0 = inttoptr i32 %v1_95a0 to i8*
  %v3_95a0 = load i8, i8* %v2_95a0, align 1
  %v4_95a0 = zext i8 %v3_95a0 to i32
  store i32 %v0_959c, i32* @r1, align 4
  %v4_95a8 = mul nuw nsw i32 %v4_95a0, 256
  %v5_95a8 = or i32 %v4_95a8, %v4_959c
  store i32 %v5_95a8, i32* %r2.global-to-local, align 4
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = trunc i32 %v0_95ac to i8
  %v3_95ac = add i32 %v0_959c, 6
  %v4_95ac = inttoptr i32 %v3_95ac to i8*
  store i8 %v1_95ac, i8* %v4_95ac, align 1
  %v0_95b0 = load i32, i32* @fp, align 4
  store i32 %v0_95b0, i32* %r3.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r8, align 4
  %v1_95b4 = trunc i32 %v0_95b4 to i8
  %v2_95b4 = load i32, i32* @r7, align 4
  %v3_95b4 = add i32 %v2_95b4, 7
  %v4_95b4 = inttoptr i32 %v3_95b4 to i8*
  store i8 %v1_95b4, i8* %v4_95b4, align 1
  %v0_95b8 = load i32, i32* @r6, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v4_95bc = call i32 @function_c6ec(i32 %v0_95b8, i32 %v0_959c, i32 %v5_95a8, i32 %v0_95b0)
  %v5_95bc = trunc i32 %v4_95bc to i8
  store i32 %v4_95bc, i32* %r0.global-to-local, align 4
  %v3_95c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_95c0, i32* %r3.global-to-local, align 4
  %v3_95c4 = mul i32 %v3_95c0, 32
  store i32 %v3_95c4, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @r5, align 4
  %v1_95c8 = add i32 %v0_95c8, 16
  %v2_95c8 = inttoptr i32 %v1_95c8 to i32*
  %v3_95c8 = load i32, i32* %v2_95c8, align 4
  store i32 %v3_95c8, i32* %r1.global-to-local, align 4
  %v5_95cc = mul i32 %v3_95c0, 24
  store i32 %v5_95cc, i32* %r2.global-to-local, align 4
  %v4_95d035 = udiv i32 %v4_95bc, 256
  %v1_95d4 = trunc i32 %v4_95d035 to i8
  %v2_95d4 = load i32, i32* @r7, align 4
  %v3_95d4 = add i32 %v2_95d4, 7
  %v4_95d4 = inttoptr i32 %v3_95d4 to i8*
  store i8 %v1_95d4, i8* %v4_95d4, align 1
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = load i32, i32* @sb, align 4
  %v2_95d8 = add i32 %v1_95d8, %v0_95d8
  store i32 %v2_95d8, i32* @lr, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_95e0 = load i32, i32* @r7, align 4
  %v4_95e0 = add i32 %v3_95e0, 6
  %v5_95e0 = inttoptr i32 %v4_95e0 to i8*
  store i8 %v5_95bc, i8* %v5_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = load i32, i32* @lr, align 4
  %v2_95e4 = add i32 %v1_95e4, 4
  %v3_95e4 = inttoptr i32 %v2_95e4 to i32*
  store i32 %v0_95e4, i32* %v3_95e4, align 4
  %v0_95e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v2_95e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_95e8 = load i32, i32* @sb, align 4
  %v4_95e8 = add i32 %v3_95e8, %v2_95e8
  %v5_95e8 = inttoptr i32 %v4_95e8 to i8*
  store i8 %v1_95e8, i8* %v5_95e8, align 1
  %v0_95ec = load i32, i32* @r8, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* @lr, align 4
  %v3_95ec = add i32 %v2_95ec, 2
  %v4_95ec = inttoptr i32 %v3_95ec to i8*
  store i8 %v1_95ec, i8* %v4_95ec, align 1
  %v0_95f0 = load i32, i32* @r8, align 4
  %v1_95f0 = trunc i32 %v0_95f0 to i8
  %v2_95f0 = load i32, i32* @lr, align 4
  %v3_95f0 = add i32 %v2_95f0, 1
  %v4_95f0 = inttoptr i32 %v3_95f0 to i8*
  store i8 %v1_95f0, i8* %v4_95f0, align 1
  %v0_95f4 = load i32, i32* @r8, align 4
  %v1_95f4 = trunc i32 %v0_95f4 to i8
  %v2_95f4 = load i32, i32* @lr, align 4
  %v3_95f4 = add i32 %v2_95f4, 3
  %v4_95f4 = inttoptr i32 %v3_95f4 to i8*
  store i8 %v1_95f4, i8* %v4_95f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r1.global-to-local, align 4
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v0_9608 = load i32, i32* @sl, align 4
  store i32 %v0_9608, i32* %r2.global-to-local, align 4
  %v0_960c = load i32, i32* @lr, align 4
  %v6_9614 = inttoptr i32 %v0_9600 to i32*
  %v7_9614 = call i32 @function_114ec(i32 %v3_91ec, i32* %v6_9614, i32 %v0_9608, i32 16384, i32 %v0_960c, i32 16)
  %v3_9618 = load i32, i32* %stack_var_-40, align 4
  %v1_961c = add i32 %v3_9618, 1
  store i32 %v1_961c, i32* %r0.global-to-local, align 4
  store i32 %v1_907c, i32* %r3.global-to-local, align 4
  %v9_9624 = icmp eq i32 %v1_961c, %v1_907c
  store i1 %v9_9624, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_961c, i32* %stack_var_-40, align 4
  %v6_962c = icmp slt i32 %v1_961c, %v1_907c
  br i1 %v6_962c, label %dec_label_pc_9630, label %dec_label_pc_9784

dec_label_pc_9630:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94ec
  %v1_9644 = phi i32 [ %v1_961c, %dec_label_pc_955c ], [ 0, %dec_label_pc_94ec ]
  %v5_9634 = mul i32 %v1_9644, 24
  %v1_9638 = load i32, i32* @sb, align 4
  %v2_9638 = add i32 %v1_9638, %v5_9634
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  store i32 %v2_90a8, i32* %r1.global-to-local, align 4
  %v1_9640 = add i32 %v2_9638, 20
  %v2_9640 = inttoptr i32 %v1_9640 to i8*
  %v3_9640 = load i8, i8* %v2_9640, align 1
  %v4_9640 = zext i8 %v3_9640 to i32
  store i32 %v4_9640, i32* %r2.global-to-local, align 4
  %v4_9644 = mul i32 %v1_9644, 4
  %v5_9644 = add i32 %v4_9644, %v2_90a8
  %v6_9644 = inttoptr i32 %v5_9644 to i32*
  %v7_9644 = load i32, i32* %v6_9644, align 4
  store i32 %v7_9644, i32* @r5, align 4
  %v2_9648 = icmp ugt i8 %v3_9640, 30
  %v7_9648 = icmp eq i8 %v3_9640, 31
  store i1 %v7_9648, i1* %cpsr_z.global-to-local, align 1
  %v1_964c = add i32 %v7_9644, 24
  store i32 %v1_964c, i32* @r6, align 4
  %v1_9650 = add i32 %v7_9644, 44
  store i32 %v1_9650, i32* @r7, align 4
  %v2_9654 = xor i1 %v7_9648, true
  %v3_9654 = and i1 %v2_9648, %v2_9654
  br i1 %v3_9654, label %dec_label_pc_9504, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9630
  %v1_9658 = add i32 %v2_9638, 16
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  %v3_9658 = load i32, i32* %v2_9658, align 4
  store i32 %v3_9658, i32* %r4.global-to-local, align 4
  %v0_965c = call i32 @function_dab8()
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = load i32, i32* %stack_var_-40, align 4
  %v5_9668 = mul i32 %v3_9660, 24
  %v0_966c = load i32, i32* %r4.global-to-local, align 4
  %v1_9670 = load i32, i32* @sb, align 4
  %v2_9670 = add i32 %v1_9670, %v5_9668
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v1_9674 = and i32 %v0_966c, 65280
  store i32 %v1_9674, i32* %r3.global-to-local, align 4
  %v1_966c = udiv i32 %v0_966c, 256
  %v3_9678 = and i32 %v1_966c, 65280
  store i32 %v3_9678, i32* %r2.global-to-local, align 4
  %v1_9680 = add i32 %v2_9670, 20
  %v2_9680 = inttoptr i32 %v1_9680 to i8*
  %v3_9680 = load i8, i8* %v2_9680, align 1
  %v4_9680 = zext i8 %v3_9680 to i32
  store i32 %v4_9680, i32* @lr, align 4
  %v2_968c = call i32 @llvm.bswap.i32(i32 %v0_966c)
  %v7_9690 = lshr i32 %v0_965c, %v4_9680
  %v8_9690 = add i32 %v7_9690, %v2_968c
  %v3_969c = mul i32 %v8_9690, 16777216
  %v1_96a0 = and i32 %v8_9690, 65280
  store i32 %v1_96a0, i32* %r0.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v4_96ac = mul nuw nsw i32 %v1_96a0, 256
  %v5_96ac = or i32 %v4_96ac, %v3_969c
  store i32 %v5_96ac, i32* %r1.global-to-local, align 4
  %v2_96b0 = call i32 @llvm.bswap.i32(i32 %v8_9690)
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  %v1_96b8 = load i32, i32* @r5, align 4
  %v2_96b8 = add i32 %v1_96b8, 16
  %v3_96b8 = inttoptr i32 %v2_96b8 to i32*
  store i32 %v2_96b0, i32* %v3_96b8, align 4
  br i1 %v2_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  %v0_96c0 = call i32 @function_dab8()
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_96d0, i1* %cpsr_z.global-to-local, align 1
  %v1_96d4 = load i32, i32* @r5, align 4
  %v2_96d4 = add i32 %v1_96d4, 12
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 %v0_96c0, i32* %v3_96d4, align 4
  br i1 %v9_96d0, label %dec_label_pc_96dc, label %dec_label_pc_96c0.dec_label_pc_9524_crit_edge

dec_label_pc_96c0.dec_label_pc_9524_crit_edge:    ; preds = %dec_label_pc_96c0
  %v1_9528.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9524

dec_label_pc_96dc:                                ; preds = %dec_label_pc_96c0, %dec_label_pc_9510
  %v0_96dc = call i32 @function_dab8()
  %v3_96e4 = urem i32 %v0_96dc, 65536
  store i32 %v3_96e4, i32* %r0.global-to-local, align 4
  %v1_96ec = sub nsw i32 999, %v3_96e4
  store i32 %v1_96ec, i32* %r2.global-to-local, align 4
  %v3_96f0 = sdiv i32 %v1_96ec, 256
  store i32 %v3_96f0, i32* %r1.global-to-local, align 4
  %v3_96f434 = udiv i32 %v3_96e4, 256
  store i32 %v3_96f434, i32* %r3.global-to-local, align 4
  %v1_96f8 = trunc i32 %v3_96f434 to i8
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 5
  %v4_96f8 = inttoptr i32 %v3_96f8 to i8*
  store i8 %v1_96f8, i8* %v4_96f8, align 1
  %v0_96fc = load i32, i32* %r0.global-to-local, align 4
  %v1_96fc = trunc i32 %v0_96fc to i8
  %v2_96fc = load i32, i32* @r5, align 4
  %v3_96fc = add i32 %v2_96fc, 4
  %v4_96fc = inttoptr i32 %v3_96fc to i8*
  store i8 %v1_96fc, i8* %v4_96fc, align 1
  %v0_9700 = load i32, i32* %r1.global-to-local, align 4
  %v1_9700 = trunc i32 %v0_9700 to i8
  %v2_9700 = load i32, i32* @r6, align 4
  %v3_9700 = add i32 %v2_9700, 5
  %v4_9700 = inttoptr i32 %v3_9700 to i8*
  store i8 %v1_9700, i8* %v4_9700, align 1
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9248, %v1_9708
  store i1 %v9_9708, i1* %cpsr_z.global-to-local, align 1
  %v0_970c = load i32, i32* %r2.global-to-local, align 4
  %v1_970c = trunc i32 %v0_970c to i8
  %v2_970c = load i32, i32* @r6, align 4
  %v3_970c = add i32 %v2_970c, 4
  %v4_970c = inttoptr i32 %v3_970c to i8*
  store i8 %v1_970c, i8* %v4_970c, align 1
  %v0_9710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9710, label %dec_label_pc_9714, label %dec_label_pc_96dc.dec_label_pc_9530_crit_edge

dec_label_pc_96dc.dec_label_pc_9530_crit_edge:    ; preds = %dec_label_pc_96dc
  %v1_9534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9530

dec_label_pc_9714:                                ; preds = %dec_label_pc_96dc, %dec_label_pc_9524
  %v0_9714 = call i32 @function_dab8()
  %v1_9714 = trunc i32 %v0_9714 to i8
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v4_971c = sdiv i32 %v0_9714, 256
  store i32 %v4_971c, i32* %r3.global-to-local, align 4
  %v1_9720 = load i32, i32* @r4, align 4
  %v9_9720 = icmp eq i32 %v3_924c, %v1_9720
  store i1 %v9_9720, i1* %cpsr_z.global-to-local, align 1
  %v3_9724 = load i32, i32* @r5, align 4
  %v4_9724 = add i32 %v3_9724, 44
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 %v1_9714, i8* %v5_9724, align 1
  %v0_9728 = load i32, i32* %r3.global-to-local, align 4
  %v1_9728 = trunc i32 %v0_9728 to i8
  %v2_9728 = load i32, i32* @r7, align 4
  %v3_9728 = add i32 %v2_9728, 1
  %v4_9728 = inttoptr i32 %v3_9728 to i8*
  store i8 %v1_9728, i8* %v4_9728, align 1
  %v0_972c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_972c, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_9730:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  %v0_9730 = call i32 @function_dab8()
  %v1_9730 = trunc i32 %v0_9730 to i8
  store i32 %v0_9730, i32* %r0.global-to-local, align 4
  %v4_973436 = udiv i32 %v0_9730, 256
  %v1_9738 = trunc i32 %v4_973436 to i8
  %v2_9738 = load i32, i32* @r7, align 4
  %v3_9738 = add i32 %v2_9738, 3
  %v4_9738 = inttoptr i32 %v3_9738 to i8*
  store i8 %v1_9738, i8* %v4_9738, align 1
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_9730
  %v1_9744 = load i32, i32* @r5, align 4
  %v2_9744 = add i32 %v1_9744, 16
  %v3_9744 = inttoptr i32 %v2_9744 to i32*
  %v4_9744 = load i32, i32* %v3_9744, align 4
  store i32 %v4_9744, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_9730, %bb95
  %v3_9748 = load i32, i32* @r7, align 4
  %v4_9748 = add i32 %v3_9748, 2
  %v5_9748 = inttoptr i32 %v4_9748 to i8*
  store i8 %v1_9730, i8* %v5_9748, align 1
  %v0_974c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_974c, label %dec_label_pc_9754, label %bb97

bb97:                                             ; preds = %bb96
  %v1_974c = load i32, i32* %r3.global-to-local, align 4
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = add i32 %v2_974c, 16
  %v4_974c = inttoptr i32 %v3_974c to i32*
  store i32 %v1_974c, i32* %v4_974c, align 4
  br label %dec_label_pc_9550

dec_label_pc_9754:                                ; preds = %dec_label_pc_953c, %bb96
  %v0_9754 = call i32 @function_dab8()
  store i32 %v0_9754, i32* %r0.global-to-local, align 4
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  %v1_9760 = load i32, i32* @r6, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  store i32 %v0_9754, i32* %v3_9760, align 4
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754
  %v0_9768 = load i32, i32* @r7, align 4
  %v1_9768 = add i32 %v0_9768, 8
  store i32 %v1_9768, i32* @r4, align 4
  store i32 %v1_9768, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r1.global-to-local, align 4
  %v2_9774 = call i32 @function_db6c(i32 %v1_9768, i32 %v6_9174)
  store i32 %v2_9774, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r2.global-to-local, align 4
  %v0_977c = load i32, i32* @r8, align 4
  %v1_977c = trunc i32 %v0_977c to i8
  %v2_977c = load i32, i32* @r4, align 4
  %v4_977c = add i32 %v2_977c, %v6_9174
  %v5_977c = inttoptr i32 %v4_977c to i8*
  store i8 %v1_977c, i8* %v5_977c, align 1
  br label %dec_label_pc_955c

dec_label_pc_9784:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9788 = call i32 @function_10f4c(i32* null)
  store i32 %v2_9788, i32* %r0.global-to-local, align 4
  store i32 %v2_91d8, i32* %r1.global-to-local, align 4
  %v9_9790 = icmp eq i32 %v2_91d8, %v2_9788
  store i1 %v9_9790, i1* %cpsr_z.global-to-local, align 1
  %v6_9794 = icmp slt i32 %v2_91d8, %v2_9788
  br i1 %v6_9794, label %dec_label_pc_9798, label %dec_label_pc_94d8

dec_label_pc_9798:                                ; preds = %dec_label_pc_9784, %dec_label_pc_9078, %dec_label_pc_97a0
  %v29_979c = phi i32 [ %v3_91ec, %dec_label_pc_9078 ], [ %v1_97a4, %dec_label_pc_97a0 ], [ %v2_9788, %dec_label_pc_9784 ]
  store i32 %v3_9078, i32* %r4.global-to-local, align 4
  store i32 %v15_9078, i32* %r8.global-to-local, align 4
  store i32 %v21_9078, i32* %sl.global-to-local, align 4
  store i32 %v24_9078, i32* %fp.global-to-local, align 4
  ret i32 %v29_979c

dec_label_pc_97a0:                                ; preds = %dec_label_pc_91fc
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_10c7c(i32 %v3_91ec)
  store i32 %v1_97a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9798

; uselistorder directives
  uselistorder i32 %v1_97a4, { 1, 0 }
  uselistorder i32 %v0_9730, { 0, 2, 1 }
  uselistorder i32 %v0_9714, { 0, 2, 1 }
  uselistorder i32 %v3_96e4, { 0, 2, 1 }
  uselistorder i32 %v2_96b0, { 1, 0 }
  uselistorder i32 %v8_9690, { 1, 2, 0 }
  uselistorder i32 %v0_966c, { 1, 0, 2 }
  uselistorder i32 %v7_9644, { 1, 0, 2 }
  uselistorder i32 %v1_961c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_95c0, { 1, 0, 2 }
  uselistorder i32 %v4_95bc, { 0, 2, 1 }
  uselistorder i32 %v0_959c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_958c, { 0, 2, 1 }
  uselistorder i32 %v4_9570, { 1, 0 }
  uselistorder i1 %v2_975c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9740, { 2, 3, 1, 0 }
  uselistorder i1 %v9_96d0, { 2, 3, 1, 0 }
  uselistorder i1 %v7_9508, { 2, 1, 0 }
  uselistorder i32 %v0_9478, { 1, 0, 2 }
  uselistorder i32 %v3_931c, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_9298, { 0, 2, 1 }
  uselistorder i32 %v1_9290, { 2, 1, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v1_927c, { 1, 0 }
  uselistorder i32 %v3_9274, { 2, 0, 1 }
  uselistorder i32 %v3_9244, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9240, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_923c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9234, { 0, 2, 1 }
  uselistorder i32 %v0_9230, { 0, 1, 3, 2 }
  uselistorder i1 %v7_921c, { 1, 0 }
  uselistorder i1 %v7_91f0, { 1, 0 }
  uselistorder i32 %v3_91ec, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_91d8, { 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9194, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9174, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_90fc, { 1, 0, 2 }
  uselistorder i32 %v2_90a8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_907c, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 16, 17, 0, 1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 54, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 43, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 45, 38, 39, 40, 41, 43, 42, 44, 46, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 38, 37, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 1, 39, 40, 2, 41, 42, 43, 18, 14, 15, 16, 17, 21, 19, 20, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %fp.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 28, 21, 22, 23, 24, 25, 26, 27, 29, 30, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder label %dec_label_pc_9798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_9754, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_955c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_94d8, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_97b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_97b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_97b4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v1_97d0 = urem i32 %arg4, 256
  store i32 %v1_97d0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_97e0 = call i32 @function_1183c(i32 %v1_97b4, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_1183c(i32 %v1_97b4, i32 4)
  %v0_97f4 = load i32, i32* @r5, align 4
  store i32 %v0_97f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9800 = load i32, i32* @r7, align 4
  store i32 %v0_9800, i32* %r3.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_97f4 to i32*
  %v6_9808 = call i32 @function_829c(i32 %v0_9804, i32* %v5_9808, i32 2, i32 %v0_9800, i32 %v2_97f0)
  %v1_9814 = urem i32 %v6_9808, 256
  store i32 %v1_9814, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  store i32 %v0_9820, i32* %r1.global-to-local, align 4
  %v0_9824 = load i32, i32* @r4, align 4
  store i32 %v0_9824, i32* %r0.global-to-local, align 4
  %v5_9828 = trunc i32 %v6_9808 to i8
  %v6_982c = inttoptr i32 %v0_9820 to i32*
  %v7_982c = call i32 @function_829c(i32 %v0_9824, i32* %v6_982c, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_9808)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_982c, i32* @sl, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_829c(i32 %v0_9840, i32* %v5_9844, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_984c = urem i32 %v6_9844, 256
  store i32 %v1_984c, i32* %ip.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  store i32 %v0_9850, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r4, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %sext8 = mul i32 %v6_9844, 16777216
  %v5_9864 = sdiv i32 %sext8, 16777216
  %v6_9864 = inttoptr i32 %v0_9850 to i32*
  %v7_9864 = call i32 @function_829c(i32 %v0_985c, i32* %v6_9864, i32 5, i32 1, i32 %v5_9864)
  %v1_9870 = urem i32 %v7_9864, 256
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  %v0_9878 = load i32, i32* @r5, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9880 = load i32, i32* @r4, align 4
  store i32 %v0_9880, i32* %r0.global-to-local, align 4
  %v5_9888 = inttoptr i32 %v0_9878 to i32*
  %v6_9888 = call i32 @function_829c(i32 %v0_9880, i32* %v5_9888, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_9870)
  %v0_988c = load i32, i32* @r5, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v3_9890 = mul i32 %v6_9888, 65536
  store i32 %v3_9890, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r7, align 4
  store i32 %v0_9898, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r4, align 4
  store i32 %v0_989c, i32* %r0.global-to-local, align 4
  %v5_98a0 = inttoptr i32 %v0_988c to i32*
  %v6_98a0 = call i32 @function_829c(i32 %v0_989c, i32* %v5_98a0, i32 10, i32 %v0_9898, i32 ptrtoint (i32* @0 to i32))
  %v1_98a8 = urem i32 %v6_98a0, 256
  store i32 %v1_98a8, i32* %ip.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98b8 = load i32, i32* @r4, align 4
  store i32 %v0_98b8, i32* %r0.global-to-local, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_829c(i32 %v0_98b8, i32* %v5_98c0, i32 11, i32 1, i32 %v1_98a8)
  %v1_98c8 = urem i32 %v6_98c0, 256
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_829c(i32 %v0_98d8, i32* %v5_98e0, i32 12, i32 1, i32 %v1_98c8)
  %v1_98e8 = urem i32 %v6_98e0, 256
  store i32 %v1_98e8, i32* %ip.global-to-local, align 4
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  store i32 %v0_98f4, i32* %r3.global-to-local, align 4
  %v0_98f8 = load i32, i32* @r4, align 4
  store i32 %v0_98f8, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_829c(i32 %v0_98f8, i32* %v5_9900, i32 13, i32 %v0_98f4, i32 %v1_98e8)
  %v1_9908 = urem i32 %v6_9900, 256
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_990c = load i32, i32* @r5, align 4
  store i32 %v0_990c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9914 = load i32, i32* @r7, align 4
  store i32 %v0_9914, i32* %r3.global-to-local, align 4
  %v0_9918 = load i32, i32* @r4, align 4
  store i32 %v0_9918, i32* %r0.global-to-local, align 4
  %v5_9920 = inttoptr i32 %v0_990c to i32*
  %v6_9920 = call i32 @function_829c(i32 %v0_9918, i32* %v5_9920, i32 14, i32 %v0_9914, i32 %v1_9908)
  %v1_9928 = urem i32 %v6_9920, 256
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r3.global-to-local, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @function_829c(i32 %v0_9938, i32* %v5_9940, i32 15, i32 %v0_9934, i32 %v1_9928)
  %v1_9948 = urem i32 %v6_9940, 256
  store i32 %v1_9948, i32* %ip.global-to-local, align 4
  %v0_994c = load i32, i32* @r7, align 4
  store i32 %v0_994c, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  %v0_9958 = load i32, i32* @r4, align 4
  store i32 %v0_9958, i32* %r0.global-to-local, align 4
  %v5_9960 = inttoptr i32 %v0_9954 to i32*
  %v6_9960 = call i32 @function_829c(i32 %v0_9958, i32* %v5_9960, i32 %v0_994c, i32 768, i32 %v1_9948)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_996c = load i32, i32* @r5, align 4
  store i32 %v0_996c, i32* %r1.global-to-local, align 4
  %v0_9974 = load i32, i32* @r4, align 4
  store i32 %v0_9974, i32* %r0.global-to-local, align 4
  %v5_9978 = inttoptr i32 %v0_996c to i32*
  %v6_9978 = call i32 @function_829c(i32 %v0_9974, i32* %v5_9978, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9980 = urem i32 %v6_9978, 256
  store i32 %v1_9980, i32* %r3.global-to-local, align 4
  %v0_9984 = load i32, i32* @r7, align 4
  store i32 %v0_9984, i32* %r0.global-to-local, align 4
  %v1_998c = inttoptr i32 %v0_9984 to i32*
  %v2_998c = call i32 @function_10f4c(i32* %v1_998c)
  %v1_9990 = load i32, i32* @r6, align 4
  %v2_9990 = add i32 %v1_9990, %v2_998c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_99a4 = call i32 @function_11550(i32 2, i32 3, i32 6)
  store i32 %v3_99a4, i32* %r0.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r8, align 4
  %v3_99a8 = udiv i32 %v0_99a8, 65536
  store i32 %v3_99a8, i32* %r1.global-to-local, align 4
  %v7_99ac = icmp eq i32 %v3_99a4, -1
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_99a4, i32* @sb, align 4
  br i1 %v7_99ac, label %dec_label_pc_9d60, label %dec_label_pc_99bc

dec_label_pc_99bc:                                ; preds = %dec_label_pc_97b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_99c4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_99c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_99cc = load i32, i32* @r7, align 4
  store i32 %v0_99cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_99d8 = call i32 @function_11520(i32 %v3_99a4, i32 %v0_99cc, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_99d8, i32* %r0.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v6_99d8, -1
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_9d58, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99bc
  store i32 %v1_97b4, i32* %r2.global-to-local, align 4
  %v0_99e8 = load i32, i32* @sl, align 4
  %v3_99e8 = mul i32 %v0_99e8, 65536
  store i32 %v3_99e8, i32* %r0.global-to-local, align 4
  %v3_99ec = urem i32 %v0_99e8, 65536
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v2_99f0 = icmp eq i32 %v1_97b4, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %v0_99f4 = load i32, i32* @r7, align 4
  store i32 %v0_99f4, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge, label %dec_label_pc_9a00

dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge: ; preds = %dec_label_pc_99e4
  %.pre = add i32 %v6_9960, 40
  br label %dec_label_pc_9be0.preheader

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99e4
  %v0_9a04 = load i32, i32* @r8, align 4
  %v3_9a04 = udiv i32 %v0_9a04, 16777216
  %tmp77 = udiv i32 %v0_99e8, 256
  %v3_9a08 = urem i32 %tmp77, 256
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  %v1_9a0c = add i32 %v6_9960, 40
  store i32 %v1_9a0c, i32* %ip.global-to-local, align 4
  %v9_9dd4 = icmp eq i32 %v3_99a8, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_9ab8 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9ac4 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_9adc = urem i32 %v1_9a0c, 256
  %tmp78 = udiv i32 %v1_9a0c, 256
  %v3_9ae0 = urem i32 %tmp78, 256
  %v2_9af0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_9af4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_9af8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_9b6c = zext i8 %tmp32 to i32
  %v4_9b70 = zext i8 %tmp31 to i32
  %v4_9b7c = mul nuw nsw i32 %v4_9b70, 256
  %v4_9b8c = zext i8 %tmp30 to i32
  %v1_9b90 = and i32 %v4_9b8c, 18
  %v2_9b94 = icmp eq i32 %v1_9b90, 18
  %v1_9fec = urem i32 %v6_98a0, 2
  %tmp101 = sub nsw i32 0, %v1_9fec
  %v4_9ff4 = and i32 %tmp101, 32
  %v1_a020 = urem i32 %v6_98e0, 2
  %tmp102 = sub nsw i32 0, %v1_a020
  %v4_a028 = and i32 %tmp102, 8
  %v1_a06c = urem i32 %v6_9940, 2
  %v4_9ae4 = mul nuw nsw i32 %v1_9adc, 256
  %v5_9ae4 = or i32 %v4_9ae4, %v3_9ae0
  %v5_9b7c = or i32 %v4_9b6c, %v4_9b7c
  %v1_9b9c = and i32 %v4_9b8c, 5
  %v2_9b9c = icmp eq i32 %v1_9b9c, 0
  %v1_9aa4 = urem i32 %v3_99a8, 256
  %v4_9aa8 = mul nuw nsw i32 %v1_9aa4, 256
  %v5_9aa8 = or i32 %v3_9a04, %v4_9aa8
  %v1_9ab0 = trunc i32 %v3_99a8 to i8
  %v1_9ab4 = trunc i32 %v3_9a04 to i8
  %v1_9edc = urem i32 %v0_99e8, 256
  %v4_9ee4 = mul nuw nsw i32 %v1_9edc, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v3_9a08
  %sext = mul i32 %v1_9a0c, 16777216
  %v4_9f00 = sdiv i32 %sext, 16777216
  %v1_a004 = urem i32 %v6_98c0, 2
  %tmp103 = sub nsw i32 0, %v1_a004
  %v4_a00c = and i32 %tmp103, 16
  %v1_a038 = urem i32 %v6_9900, 2
  %tmp104 = sub nsw i32 0, %v1_a038
  %v4_a040 = and i32 %tmp104, 4
  %v1_a050 = urem i32 %v6_9920, 2
  %tmp105 = sub nsw i32 0, %v1_a050
  %v3_a058 = and i32 %tmp105, 2
  br label %dec_label_pc_9a1c.outer

dec_label_pc_9a1c.outer:                          ; preds = %bb93, %dec_label_pc_9a00
  %stack_var_-336.0.ph = phi i32 [ %v0_9f1c, %bb93 ], [ %tmp, %dec_label_pc_9a00 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_9e28, %bb93 ], [ %tmp38, %dec_label_pc_9a00 ]
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9a1c.outer, %dec_label_pc_9bc8
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_9bc8 ], [ %stack_var_-56.0.ph, %dec_label_pc_9a1c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9a28 = call i32 @function_11550(i32 2, i32 1, i32 0)
  store i32 %v3_9a28, i32* %r0.global-to-local, align 4
  %v7_9a2c = icmp eq i32 %v3_9a28, -1
  store i1 %v7_9a2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a28, i32* @sl, align 4
  br i1 %v7_9a2c, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9ba4
  %v0_9a40 = phi i32 [ %v3_9bb8, %dec_label_pc_9ba4 ], [ %v3_9a28, %dec_label_pc_9a1c ]
  %stack_var_-56.1 = phi i32 [ %v0_9e28, %dec_label_pc_9ba4 ], [ %stack_var_-56.0, %dec_label_pc_9a1c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9a40 = call i32 @function_10bb8(i32 %v0_9a40, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9a48 = or i32 %v2_9a40, 2048
  store i32 %v1_9a48, i32* @r2, align 4
  %v0_9a4c = load i32, i32* @sl, align 4
  store i32 %v0_9a4c, i32* %r0.global-to-local, align 4
  %v2_9a50 = call i32 @function_10bb8(i32 %v0_9a4c, i32 4)
  store i32 %v2_9a50, i32* %r0.global-to-local, align 4
  %v3_9a54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a54, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_9a70 = mul i32 %v3_9a54, 24
  store i32 %v5_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = add i32 %v5_9a70, %arg3
  store i32 %v2_9a74, i32* %r2.global-to-local, align 4
  %v1_9a78 = add i32 %v2_9a74, 20
  %v2_9a78 = inttoptr i32 %v1_9a78 to i8*
  %v3_9a78 = load i8, i8* %v2_9a78, align 1
  %v4_9a78 = zext i8 %v3_9a78 to i32
  store i32 %v4_9a78, i32* %r3.global-to-local, align 4
  %v2_9a7c = icmp ugt i8 %v3_9a78, 30
  %v7_9a7c = icmp eq i8 %v3_9a78, 31
  store i1 %v7_9a7c, i1* %cpsr_z.global-to-local, align 1
  %v2_9a80 = xor i1 %v7_9a7c, true
  %v3_9a80 = and i1 %v2_9a7c, %v2_9a80
  br i1 %v3_9a80, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_9a38
  %v5_9a80 = add i32 %v2_9a74, 16
  %v6_9a80 = inttoptr i32 %v5_9a80 to i32*
  %v7_9a80 = load i32, i32* %v6_9a80, align 4
  store i32 %v7_9a80, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_9a38, %bb
  %v4_9a84 = phi i32 [ %v4_9a78, %dec_label_pc_9a38 ], [ %v7_9a80, %bb ]
  %v4_9a84.stack_var_-56.1 = select i1 %v3_9a80, i32 %v4_9a84, i32 %stack_var_-56.1
  %v2_9a88 = xor i1 %v2_9a7c, true
  %v3_9a88 = or i1 %v7_9a7c, %v2_9a88
  br i1 %v3_9a88, label %dec_label_pc_9d68, label %dec_label_pc_9a8c

dec_label_pc_9a8c:                                ; preds = %bb79
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i1 %v9_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.3 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  store i32 %v3_9a04, i32* %r0.global-to-local, align 4
  store i32 %v5_9aa8, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ab8

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9ddc, %dec_label_pc_9aa0
  %stack_var_-57.0 = phi i8 [ %v1_9de4, %dec_label_pc_9ddc ], [ %v1_9ab0, %dec_label_pc_9aa0 ]
  %v0_9e28 = phi i32 [ %stack_var_-56.6, %dec_label_pc_9ddc ], [ %stack_var_-56.3, %dec_label_pc_9aa0 ]
  %storemerge = phi i8 [ %v1_9ddc, %dec_label_pc_9ddc ], [ %v1_9ab4, %dec_label_pc_9aa0 ]
  store i32 %v2_9ab8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ac0 = load i32, i32* @sl, align 4
  store i32 %v0_9ac0, i32* %r0.global-to-local, align 4
  %v4_9ac4 = call i32 @function_113ac(i32 %v0_9ac0, %sockaddr* %v3_9ac4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9acc = call i32 @function_10f4c(i32* null)
  store i32 %v2_9acc, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  store i32 %v5_9ae4, i32* @fp, align 4
  store i32 %v1_9adc, i32* %r2.global-to-local, align 4
  store i32 %v2_9acc, i32* @r4, align 4
  store i32 %v2_9af8, i32* @r6, align 4
  %v9_9b50 = icmp eq i32 %tmp33, %v0_9e28
  %v4_9b74 = zext i8 %storemerge to i32
  %v4_9b78 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9b50 to i32
  %v9_9b64 = icmp eq i1 %v9_9b50, false
  %v4_9b80 = mul nuw nsw i32 %v4_9b78, 256
  %v5_9b80 = or i32 %v4_9b74, %v4_9b80
  %v9_9b84 = icmp eq i32 %v5_9b80, %v5_9b7c
  br label %dec_label_pc_9b14

dec_label_pc_9b04:                                ; preds = %.thread25, %dec_label_pc_9b6c, %dec_label_pc_9b9c, %bb82
  %v2_9b04 = call i32 @function_10f4c(i32* null)
  %v0_9b08 = load i32, i32* @r4, align 4
  %v2_9b08 = sub i32 %v2_9b04, %v0_9b08
  store i32 %v2_9b08, i32* %r0.global-to-local, align 4
  %v7_9b0c = icmp eq i32 %v2_9b08, 10
  store i1 %v7_9b0c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b10 = icmp sgt i32 %v2_9b08, 10
  br i1 %v8_9b10, label %dec_label_pc_9ba4, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9ab8
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9af4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @sb, align 4
  store i32 %v0_9b24, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_9b34 = call i32 @function_1148c(i32 %v0_9b24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9af0, i32 %v2_9af8)
  store i32 %v7_9b34, i32* %r2.global-to-local, align 4
  %v7_9b3c = icmp eq i32 %v7_9b34, -1
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9b3c, label %dec_label_pc_9d60, label %dec_label_pc_9b48

dec_label_pc_9b48:                                ; preds = %dec_label_pc_9b14
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9b5c = icmp eq i32 %v7_9b34, 40
  store i1 %v7_9b5c, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_9b34, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_9b48
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b04

bb82:                                             ; preds = %dec_label_pc_9b48
  store i1 %v9_9b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b64, label %dec_label_pc_9b04, label %dec_label_pc_9b6c

dec_label_pc_9b6c:                                ; preds = %bb82
  store i32 %v4_9b70, i32* %r1.global-to-local, align 4
  store i32 %v4_9b74, i32* %ip.global-to-local, align 4
  store i32 %v4_9b78, i32* %r2.global-to-local, align 4
  store i32 %v5_9b7c, i32* %r3.global-to-local, align 4
  store i32 %v5_9b80, i32* @r5, align 4
  store i1 %v9_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9b04

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b6c
  store i32 %v4_9b8c, i32* %r2.global-to-local, align 4
  store i32 %v1_9b90, i32* %r3.global-to-local, align 4
  store i1 %v2_9b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b94, label %dec_label_pc_9e1c, label %dec_label_pc_9b9c

dec_label_pc_9b9c:                                ; preds = %dec_label_pc_9b8c
  store i1 %v2_9b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b9c, label %dec_label_pc_9b04, label %dec_label_pc_9ba4

dec_label_pc_9ba4:                                ; preds = %dec_label_pc_9b9c, %dec_label_pc_9b04
  %v0_9ba4 = load i32, i32* @sl, align 4
  store i32 %v0_9ba4, i32* %r0.global-to-local, align 4
  %v1_9ba8 = call i32 @function_10c7c(i32 %v0_9ba4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9bb8 = call i32 @function_11550(i32 2, i32 1, i32 0)
  store i32 %v3_9bb8, i32* %r0.global-to-local, align 4
  %v3_9bbc = icmp eq i32 %v3_9bb8, -1
  %v8_9bbc = icmp eq i32 %v3_9bb8, -1
  store i1 %v8_9bbc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9bb8, i32* @sl, align 4
  br i1 %v3_9bbc, label %dec_label_pc_9bc8, label %dec_label_pc_9a38

dec_label_pc_9bc8:                                ; preds = %dec_label_pc_9ba4, %dec_label_pc_9a1c
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_9a1c ], [ %v0_9e28, %dec_label_pc_9ba4 ]
  %v3_9bc8 = load i32, i32* %stack_var_-40, align 4
  %v1_9bd0 = add i32 %v3_9bc8, 1
  store i32 %v1_9bd0, i32* %r3.global-to-local, align 4
  %v9_9bd4 = icmp eq i32 %v1_9bd0, %v1_97b4
  store i1 %v9_9bd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9bd0, i32* %stack_var_-40, align 4
  %v5_9bdc = icmp slt i32 %v1_9bd0, %v1_97b4
  br i1 %v5_9bdc, label %dec_label_pc_9a1c, label %dec_label_pc_9be0.preheader

dec_label_pc_9be0.preheader:                      ; preds = %bb93, %dec_label_pc_9bc8, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge
  %v1_9c14.pre-phi = phi i32 [ %.pre, %dec_label_pc_99e4.dec_label_pc_9be0.preheader_crit_edge ], [ %v1_9a0c, %dec_label_pc_9bc8 ], [ %v1_9a0c, %bb93 ]
  %v1_9bf8 = add i32 %v6_9960, 20
  %v3_9bfc = mul i32 %v1_9bf8, 65536
  %tmp84 = mul i32 %v1_9bf8, 256
  %v1_9c04 = and i32 %tmp84, 65280
  %tmp85 = udiv i32 %v1_9bf8, 256
  %v4_9c08 = urem i32 %tmp85, 256
  %v5_9c08 = or i32 %v4_9c08, %v1_9c04
  %v2_9d38 = icmp eq i32 %v1_9980, 0
  %v9_9d24 = icmp eq i32 %v3_99ec, ptrtoint (i32* @global_var_ffff.46 to i32)
  br label %dec_label_pc_9be0

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9be0.preheader, %dec_label_pc_9e04
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_9e04, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9be0
  store i32 %v1_9bf8, i32* @r8, align 4
  store i32 %v3_9bfc, i32* %r2.global-to-local, align 4
  store i32 %v5_9c08, i32* @fp, align 4
  store i32 %v6_9960, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_9c14.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9d10

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9d48
  %v0_9c20 = load i32, i32* @r7, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* @r4, align 4
  %v3_9c20 = add i32 %v2_9c20, 10
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @r7, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* @r4, align 4
  %v3_9c24 = add i32 %v2_9c24, 11
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c2c = load i32, i32* @r4, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v2_9c30 = call i32 @function_c690(i32 %v0_9c2c, i32 20)
  %v3_9c30 = trunc i32 %v2_9c30 to i8
  store i32 %v2_9c30, i32* %r0.global-to-local, align 4
  %v3_9c34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v3_9c3c = mul i32 %v3_9c34, 16
  %v2_9c40 = add i32 %v3_9c3c, %v2_97e0
  store i32 %v2_9c40, i32* %r1.global-to-local, align 4
  %v1_9c44 = add i32 %v2_9c40, 4
  %v2_9c44 = inttoptr i32 %v1_9c44 to i32*
  %v3_9c44 = load i32, i32* %v2_9c44, align 4
  %v3_9c48 = mul i32 %v3_9c44, 65536
  store i32 %v3_9c48, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_9c44, 256
  %v1_9c50 = and i32 %tmp86, 65280
  %tmp87 = udiv i32 %v3_9c44, 256
  %v4_9c54 = urem i32 %tmp87, 256
  %v5_9c54 = or i32 %v4_9c54, %v1_9c50
  store i32 %v5_9c54, i32* %r2.global-to-local, align 4
  %v1_9c58 = add i32 %v3_9c44, 1
  store i32 %v1_9c58, i32* %r3.global-to-local, align 4
  store i32 %v1_9c58, i32* %v2_9c44, align 4
  %v0_9c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c60 = load i32, i32* @r5, align 4
  %v2_9c60 = add i32 %v1_9c60, 4
  %v3_9c60 = inttoptr i32 %v2_9c60 to i32*
  store i32 %v0_9c60, i32* %v3_9c60, align 4
  %v0_9c64 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c64 = add i32 %v0_9c64, 8
  %v2_9c64 = inttoptr i32 %v1_9c64 to i32*
  %v3_9c64 = load i32, i32* %v2_9c64, align 4
  %tmp88 = mul i32 %v3_9c64, 256
  %v1_9c70 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_9c64, 256
  %v4_9c74 = urem i32 %tmp89, 256
  %v5_9c74 = or i32 %v4_9c74, %v1_9c70
  store i32 %v5_9c74, i32* %r2.global-to-local, align 4
  %v4_9c7828 = udiv i32 %v2_9c30, 256
  %v1_9c7c = trunc i32 %v4_9c7828 to i8
  %v2_9c7c = load i32, i32* @r4, align 4
  %v3_9c7c = add i32 %v2_9c7c, 11
  %v4_9c7c = inttoptr i32 %v3_9c7c to i8*
  store i8 %v1_9c7c, i8* %v4_9c7c, align 1
  %v3_9c80 = load i32, i32* @r4, align 4
  %v4_9c80 = add i32 %v3_9c80, 10
  %v5_9c80 = inttoptr i32 %v4_9c80 to i8*
  store i8 %v3_9c30, i8* %v5_9c80, align 1
  %v0_9c84 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c84 = load i32, i32* @r5, align 4
  %v2_9c84 = add i32 %v1_9c84, 8
  %v3_9c84 = inttoptr i32 %v2_9c84 to i32*
  store i32 %v0_9c84, i32* %v3_9c84, align 4
  %v0_9c88 = load i32, i32* @r5, align 4
  store i32 %v0_9c88, i32* @r1, align 4
  %v0_9c8c = load i32, i32* @fp, align 4
  store i32 %v0_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* @r8, align 4
  store i32 %v0_9c90, i32* %r3.global-to-local, align 4
  %v0_9c94 = load i32, i32* @r4, align 4
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v0_9c98 = load i32, i32* @r7, align 4
  %v1_9c98 = trunc i32 %v0_9c98 to i8
  %v3_9c98 = add i32 %v0_9c88, 16
  %v4_9c98 = inttoptr i32 %v3_9c98 to i8*
  store i8 %v1_9c98, i8* %v4_9c98, align 1
  %v0_9c9c = load i32, i32* @r7, align 4
  %v1_9c9c = trunc i32 %v0_9c9c to i8
  %v2_9c9c = load i32, i32* @r5, align 4
  %v3_9c9c = add i32 %v2_9c9c, 17
  %v4_9c9c = inttoptr i32 %v3_9c9c to i8*
  store i8 %v1_9c9c, i8* %v4_9c9c, align 1
  %v4_9ca0 = call i32 @function_c6ec(i32 %v0_9c94, i32 %v0_9c88, i32 %v0_9c8c, i32 %v0_9c90)
  %v5_9ca0 = trunc i32 %v4_9ca0 to i8
  store i32 %v4_9ca0, i32* %r0.global-to-local, align 4
  %v4_9ca429 = udiv i32 %v4_9ca0, 256
  %v1_9ca8 = trunc i32 %v4_9ca429 to i8
  %v2_9ca8 = load i32, i32* @r5, align 4
  %v3_9ca8 = add i32 %v2_9ca8, 17
  %v4_9ca8 = inttoptr i32 %v3_9ca8 to i8*
  store i8 %v1_9ca8, i8* %v4_9ca8, align 1
  %v3_9cac = load i32, i32* @r5, align 4
  %v4_9cac = add i32 %v3_9cac, 16
  %v5_9cac = inttoptr i32 %v4_9cac to i8*
  store i8 %v5_9ca0, i8* %v5_9cac, align 1
  %v3_9cb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cb0, i32* %r3.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r4, align 4
  %v1_9cb4 = add i32 %v0_9cb4, 20
  %v2_9cb4 = inttoptr i32 %v1_9cb4 to i32*
  %v3_9cb4 = load i32, i32* %v2_9cb4, align 4
  %v5_9cbc = mul i32 %v3_9cb0, 24
  %v3_9cc4 = udiv i32 %v3_9cb4, 65536
  store i32 %v3_9cc4, i32* %r2.global-to-local, align 4
  %v2_9cc8 = add i32 %v5_9cbc, %arg3
  store i32 %v2_9cc8, i32* %ip.global-to-local, align 4
  %v3_9ccc4 = udiv i32 %v3_9cb4, 16777216
  %v1_9cd0 = trunc i32 %v3_9ccc4 to i8
  %v3_9cd0 = add i32 %v2_9cc8, 3
  %v4_9cd0 = inttoptr i32 %v3_9cd0 to i8*
  store i8 %v1_9cd0, i8* %v4_9cd0, align 1
  %v0_9cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cd4 = trunc i32 %v0_9cd4 to i8
  %v2_9cd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cd4 = add i32 %v2_9cd4, 2
  %v4_9cd4 = inttoptr i32 %v3_9cd4 to i8*
  store i8 %v1_9cd4, i8* %v4_9cd4, align 1
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ce0 = load i32, i32* @sb, align 4
  store i32 %v0_9ce0, i32* %r0.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @sl, align 4
  store i32 %v0_9ce4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_9cec = load i32, i32* %ip.global-to-local, align 4
  %v6_9cf4 = inttoptr i32 %v0_9cd8 to i32*
  %v7_9cf4 = call i32 @function_114ec(i32 %v0_9ce0, i32* %v6_9cf4, i32 %v0_9ce4, i32 16384, i32 %v0_9cec, i32 16)
  %v3_9cf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cf8, i32* %r3.global-to-local, align 4
  store i32 %v1_97b4, i32* %ip.global-to-local, align 4
  %v1_9d00 = add i32 %v3_9cf8, 1
  store i32 %v1_9d00, i32* %r0.global-to-local, align 4
  %v9_9d04 = icmp eq i32 %v1_9d00, %v1_97b4
  store i1 %v9_9d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d00, i32* %stack_var_-40, align 4
  %v6_9d0c = icmp slt i32 %v1_9d00, %v1_97b4
  br i1 %v6_9d0c, label %dec_label_pc_9d10, label %dec_label_pc_9e04

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9bf4
  %v1_9d1c = phi i32 [ %v1_9d00, %dec_label_pc_9c20 ], [ 0, %dec_label_pc_9bf4 ]
  store i32 %v2_97f0, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_99ec, i32* @lr, align 4
  %v4_9d1c = mul i32 %v1_9d1c, 4
  %v5_9d1c = add i32 %v4_9d1c, %v2_97f0
  %v6_9d1c = inttoptr i32 %v5_9d1c to i32*
  %v7_9d1c = load i32, i32* %v6_9d1c, align 4
  store i32 %v7_9d1c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i1 %v9_9d24, i1* %cpsr_z.global-to-local, align 1
  %v1_9d28 = add i32 %v7_9d1c, 40
  store i32 %v1_9d28, i32* @r6, align 4
  %v1_9d2c = add i32 %v7_9d1c, 20
  store i32 %v1_9d2c, i32* @r5, align 4
  br i1 %v9_9d24, label %dec_label_pc_9df0, label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9d10, %dec_label_pc_9df0
  %v0_9d40 = phi i32 [ %v1_9d28, %dec_label_pc_9d10 ], [ %v0_9d40.pre, %dec_label_pc_9df0 ]
  store i1 %v2_9d38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  store i32 %v0_9d40, i32* %r0.global-to-local, align 4
  br i1 %v2_9d38, label %dec_label_pc_9c20, label %dec_label_pc_9d48

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d34
  %v2_9d48 = call i32 @function_db6c(i32 %v0_9d40, i32 %v6_9960)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r7, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i8
  %v2_9d50 = load i32, i32* @r6, align 4
  %v4_9d50 = add i32 %v2_9d50, %v6_9960
  %v5_9d50 = inttoptr i32 %v4_9d50 to i8*
  store i8 %v1_9d50, i8* %v5_9d50, align 1
  br label %dec_label_pc_9c20

dec_label_pc_9d58:                                ; preds = %dec_label_pc_99bc
  %v0_9d58 = load i32, i32* @sb, align 4
  store i32 %v0_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = call i32 @function_10c7c(i32 %v0_9d58)
  store i32 %v1_9d5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9b14, %dec_label_pc_9e04, %dec_label_pc_97b0, %dec_label_pc_9d58
  %v29_9d64 = phi i32 [ %v3_99a4, %dec_label_pc_97b0 ], [ %v1_9d5c, %dec_label_pc_9d58 ], [ %v2_9e08, %dec_label_pc_9e04 ], [ 0, %dec_label_pc_9b14 ]
  ret i32 %v29_9d64

dec_label_pc_9d68:                                ; preds = %bb79
  %v1_9d68 = add i32 %v2_9a74, 16
  %v2_9d68 = inttoptr i32 %v1_9d68 to i32*
  %v3_9d68 = load i32, i32* %v2_9d68, align 4
  store i32 %v3_9d68, i32* @r4, align 4
  %v0_9d6c = call i32 @function_dab8()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v3_9d70 = load i32, i32* %stack_var_-40, align 4
  %v5_9d78 = mul i32 %v3_9d70, 24
  %v0_9d80 = load i32, i32* @r4, align 4
  %v2_9d84 = add i32 %v5_9d78, %arg3
  store i32 %v2_9d84, i32* %r1.global-to-local, align 4
  %v1_9d80 = udiv i32 %v0_9d80, 256
  %v3_9d88 = and i32 %v1_9d80, 65280
  store i32 %v3_9d88, i32* %r2.global-to-local, align 4
  %v1_9d8c = and i32 %v0_9d80, 65280
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v3_9d90 = mul i32 %v0_9d80, 16777216
  %v4_9d94 = mul nuw nsw i32 %v1_9d8c, 256
  %v5_9d94 = or i32 %v4_9d94, %v3_9d90
  store i32 %v5_9d94, i32* %ip.global-to-local, align 4
  %v1_9d98 = add i32 %v2_9d84, 20
  %v2_9d98 = inttoptr i32 %v1_9d98 to i8*
  %v3_9d98 = load i8, i8* %v2_9d98, align 1
  %v4_9d98 = zext i8 %v3_9d98 to i32
  store i32 %v4_9d98, i32* %lr.global-to-local, align 4
  %v2_9da0 = call i32 @llvm.bswap.i32(i32 %v0_9d80)
  %v7_9da4 = lshr i32 %v0_9d6c, %v4_9d98
  %v8_9da4 = add i32 %v7_9da4, %v2_9da0
  store i32 %v8_9da4, i32* %r2.global-to-local, align 4
  %v3_9db0 = mul i32 %v8_9da4, 16777216
  %v1_9db4 = and i32 %v8_9da4, 65280
  store i32 %v1_9db4, i32* %r0.global-to-local, align 4
  %v4_9db8 = mul nuw nsw i32 %v1_9db4, 256
  %v5_9db8 = or i32 %v4_9db8, %v3_9db0
  store i32 %v5_9db8, i32* %r1.global-to-local, align 4
  %v2_9dc0 = call i32 @llvm.bswap.i32(i32 %v8_9da4)
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i1 %v9_9dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9dd4, label %dec_label_pc_9ddc, label %dec_label_pc_9aa0

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_9d68, %dec_label_pc_9a8c
  %stack_var_-56.6 = phi i32 [ %v2_9dc0, %dec_label_pc_9d68 ], [ %v4_9a84.stack_var_-56.1, %dec_label_pc_9a8c ]
  %v0_9ddc = call i32 @function_dab8()
  %v1_9ddc = trunc i32 %v0_9ddc to i8
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v4_9de0 = sdiv i32 %v0_9ddc, 256
  store i32 %v4_9de0, i32* %r3.global-to-local, align 4
  %v1_9de4 = trunc i32 %v4_9de0 to i8
  br label %dec_label_pc_9ab8

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9d10
  %v0_9df0 = call i32 @function_dab8()
  %v1_9df0 = trunc i32 %v0_9df0 to i8
  store i32 %v0_9df0, i32* %r0.global-to-local, align 4
  %v4_9df4 = sdiv i32 %v0_9df0, 256
  store i32 %v4_9df4, i32* %r3.global-to-local, align 4
  %v1_9df8 = trunc i32 %v4_9df4 to i8
  %v2_9df8 = load i32, i32* @r4, align 4
  %v3_9df8 = add i32 %v2_9df8, 5
  %v4_9df8 = inttoptr i32 %v3_9df8 to i8*
  store i8 %v1_9df8, i8* %v4_9df8, align 1
  %v3_9dfc = load i32, i32* @r4, align 4
  %v4_9dfc = add i32 %v3_9dfc, 4
  %v5_9dfc = inttoptr i32 %v4_9dfc to i8*
  store i8 %v1_9df0, i8* %v5_9dfc, align 1
  %v0_9d40.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9d34

dec_label_pc_9e04:                                ; preds = %dec_label_pc_9c20, %dec_label_pc_9be0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9e08 = call i32 @function_10f4c(i32* null)
  store i32 %v2_9e08, i32* %r0.global-to-local, align 4
  store i32 %v2_9990, i32* %lr.global-to-local, align 4
  %v9_9e10 = icmp eq i32 %v2_9990, %v2_9e08
  store i1 %v9_9e10, i1* %cpsr_z.global-to-local, align 1
  %v6_9e14 = icmp slt i32 %v2_9990, %v2_9e08
  br i1 %v6_9e14, label %dec_label_pc_9d60, label %dec_label_pc_9be0

dec_label_pc_9e1c:                                ; preds = %dec_label_pc_9b8c
  %v3_9e1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9e1c, i32* @r4, align 4
  store i32 %v2_97e0, i32* %r0.global-to-local, align 4
  %v3_9e24 = mul i32 %v3_9e1c, 16
  store i32 %v3_9e24, i32* %ip.global-to-local, align 4
  %v3_9e28 = add i32 %v3_9e24, %v2_97e0
  %v4_9e28 = inttoptr i32 %v3_9e28 to i32*
  store i32 %v0_9e28, i32* %v4_9e28, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_9e30 = add i32 %stack_var_-336.0.ph, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r0.global-to-local, align 4
  %v1_9e38 = and i32 %v3_9e30, 65280
  store i32 %v1_9e38, i32* %r1.global-to-local, align 4
  %v2_9e4c = call i32 @llvm.bswap.i32(i32 %v3_9e30)
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v1_9e54 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e54 = add i32 %v1_9e54, %v2_97e0
  store i32 %v2_9e54, i32* %ip.global-to-local, align 4
  %v2_9e58 = add i32 %v2_9e54, 4
  %v3_9e58 = inttoptr i32 %v2_9e58 to i32*
  store i32 %v2_9e4c, i32* %v3_9e58, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_9e60 = add i32 %stack_var_-336.0.ph, 8
  %v2_9e60 = inttoptr i32 %v1_9e60 to i32*
  %v3_9e60 = load i32, i32* %v2_9e60, align 4
  store i32 %v3_9e60, i32* %r0.global-to-local, align 4
  %v1_9e68 = and i32 %v3_9e60, 65280
  store i32 %v1_9e68, i32* %r1.global-to-local, align 4
  %v3_9e6c = mul i32 %v3_9e60, 16777216
  %v4_9e74 = mul nuw nsw i32 %v1_9e68, 256
  %v5_9e74 = or i32 %v4_9e74, %v3_9e6c
  store i32 %v5_9e74, i32* %r2.global-to-local, align 4
  %v2_9e7c = call i32 @llvm.bswap.i32(i32 %v3_9e60)
  store i32 %v2_9e7c, i32* %r3.global-to-local, align 4
  %v1_9e80 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e80 = add i32 %v1_9e80, 8
  %v3_9e80 = inttoptr i32 %v2_9e80 to i32*
  store i32 %v2_9e7c, i32* %v3_9e80, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_9e88 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_9e88 = load i32, i32* %v1_9e88, align 4
  %v3_9e8c = udiv i32 %v2_9e88, 65536
  store i32 %v3_9e8c, i32* %r2.global-to-local, align 4
  %v3_9e905 = udiv i32 %v2_9e88, 16777216
  store i32 %v3_9e905, i32* %r1.global-to-local, align 4
  %v0_9e94 = load i32, i32* @r5, align 4
  %v3_9e94 = sdiv i32 %v0_9e94, 256
  store i32 %v3_9e94, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v3_9e94 to i8
  %v2_9e98 = load i32, i32* %ip.global-to-local, align 4
  %v3_9e98 = add i32 %v2_9e98, 15
  %v4_9e98 = inttoptr i32 %v3_9e98 to i8*
  store i8 %v1_9e98, i8* %v4_9e98, align 1
  %v0_9e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9e9c = trunc i32 %v0_9e9c to i8
  %v2_9e9c = load i32, i32* %ip.global-to-local, align 4
  %v3_9e9c = add i32 %v2_9e9c, 13
  %v4_9e9c = inttoptr i32 %v3_9e9c to i8*
  store i8 %v1_9e9c, i8* %v4_9e9c, align 1
  %v0_9ea0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ea0 = trunc i32 %v0_9ea0 to i8
  %v2_9ea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea0 = add i32 %v2_9ea0, 12
  %v4_9ea0 = inttoptr i32 %v3_9ea0 to i8*
  store i8 %v1_9ea0, i8* %v4_9ea0, align 1
  %v0_9ea4 = load i32, i32* @r5, align 4
  %v1_9ea4 = trunc i32 %v0_9ea4 to i8
  %v2_9ea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 14
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i8*
  store i8 %v1_9ea4, i8* %v4_9ea4, align 1
  store i32 %v1_9a0c, i32* %r0.global-to-local, align 4
  %v1_9eac = call i32 @function_116e8(i32 %v1_9a0c)
  store i32 %v1_9eac, i32* %r0.global-to-local, align 4
  store i32 %v2_97f0, i32* %r1.global-to-local, align 4
  %v3_9eb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9eb4, i32* %r2.global-to-local, align 4
  %v2_9eb8 = load i32, i32* @r4, align 4
  %v5_9eb8 = mul i32 %v2_9eb8, 4
  %v6_9eb8 = add i32 %v5_9eb8, %v2_97f0
  %v7_9eb8 = inttoptr i32 %v6_9eb8 to i32*
  store i32 %v1_9eac, i32* %v7_9eb8, align 4
  %v0_9ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ebc = load i32, i32* %r2.global-to-local, align 4
  %v4_9ebc = mul i32 %v1_9ebc, 4
  %v5_9ebc = add i32 %v4_9ebc, %v0_9ebc
  %v6_9ebc = inttoptr i32 %v5_9ebc to i32*
  %v7_9ebc = load i32, i32* %v6_9ebc, align 4
  store i32 %v7_9ebc, i32* %r0.global-to-local, align 4
  %v1_9ec0 = inttoptr i32 %v7_9ebc to i8*
  %v2_9ec0 = load i8, i8* %v1_9ec0, align 1
  %tmp107 = urem i8 %v2_9ec0, 16
  %v1_9ec4 = zext i8 %tmp107 to i32
  %v1_9ec8 = or i32 %v1_9ec4, 64
  store i32 %v1_9ec8, i32* %r3.global-to-local, align 4
  %v1_9ecc = trunc i32 %v1_9ec8 to i8
  store i8 %v1_9ecc, i8* %v1_9ec0, align 1
  store i32 %v3_99ec, i32* %ip.global-to-local, align 4
  %v0_9ed4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ed4 = inttoptr i32 %v0_9ed4 to i8*
  %v2_9ed4 = load i8, i8* %v1_9ed4, align 1
  %v1_9ee0 = and i8 %v2_9ed4, -16
  store i32 %v5_9ee4, i32* %r3.global-to-local, align 4
  %v1_9ee8 = or i8 %v1_9ee0, 5
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 %v1_9edc, i32* %r1.global-to-local, align 4
  store i8 %v1_9ee8, i8* %v1_9ed4, align 1
  %v0_9ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ef8 = trunc i32 %v0_9ef8 to i8
  %v2_9ef8 = load i32, i32* %r0.global-to-local, align 4
  %v3_9ef8 = add i32 %v2_9ef8, 5
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i8*
  store i8 %v1_9ef8, i8* %v4_9ef8, align 1
  store i32 %v6_9808, i32* %r1.global-to-local, align 4
  store i32 %v4_9f00, i32* %lr.global-to-local, align 4
  %v2_9f04 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f04 = add i32 %v2_9f04, 1
  %v4_9f04 = inttoptr i32 %v3_9f04 to i8*
  store i8 %v5_9828, i8* %v4_9f04, align 1
  store i32 %v5_9864, i32* %r2.global-to-local, align 4
  %v0_9f0c = load i32, i32* %ip.global-to-local, align 4
  %v2_9f0c = icmp eq i32 %v0_9f0c, 0
  store i1 %v2_9f0c, i1* %cpsr_z.global-to-local, align 1
  %v0_9f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f10 = trunc i32 %v0_9f10 to i8
  %v2_9f10 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f10 = add i32 %v2_9f10, 4
  %v4_9f10 = inttoptr i32 %v3_9f10 to i8*
  store i8 %v1_9f10, i8* %v4_9f10, align 1
  %v0_9f14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f14 = add i32 %v0_9f14, 20
  store i32 %v1_9f14, i32* %r3.global-to-local, align 4
  %v0_9f18 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f18 = trunc i32 %v0_9f18 to i8
  %v3_9f18 = add i32 %v0_9f14, 8
  %v4_9f18 = inttoptr i32 %v3_9f18 to i8*
  store i8 %v1_9f18, i8* %v4_9f18, align 1
  %v0_9f1c = load i32, i32* %r3.global-to-local, align 4
  %v0_9f20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f20, label %.thread7, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_9e1c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9f24 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f24 = add i32 %v3_9f24, 6
  %v5_9f24 = inttoptr i32 %v4_9f24 to i8*
  store i8 64, i8* %v5_9f24, align 1
  %v0_9f28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f28.pr.pr, label %.thread7, label %bb91

bb91:                                             ; preds = %.thread6
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9e1c, %.thread6, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f30 = add i32 %v2_9f30, 9
  %v4_9f30 = inttoptr i32 %v3_9f30 to i8*
  store i8 6, i8* %v4_9f30, align 1
  %v0_9f34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f34, label %bb93, label %bb92

bb92:                                             ; preds = %.thread7
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_9f34 = trunc i32 %v1_9f34 to i8
  %v3_9f34 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f34 = add i32 %v3_9f34, 7
  %v5_9f34 = inttoptr i32 %v4_9f34 to i8*
  store i8 %v2_9f34, i8* %v5_9f34, align 1
  br label %bb93

bb93:                                             ; preds = %.thread7, %bb92
  %v2_9f3c = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_9f3c, i32* %r3.global-to-local, align 4
  %v1_9f40 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f40 = add i32 %v1_9f40, 12
  %v3_9f40 = inttoptr i32 %v2_9f40 to i32*
  store i32 %v2_9f3c, i32* %v3_9f40, align 4
  %v3_9f44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f44, i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* %ip.global-to-local, align 4
  %v4_9f4c = mul i32 %v3_9f44, 16
  %v5_9f4c = add i32 %v4_9f4c, %v2_97e0
  %v6_9f4c = inttoptr i32 %v5_9f4c to i32*
  %v7_9f4c = load i32, i32* %v6_9f4c, align 4
  store i32 %v7_9f4c, i32* %r3.global-to-local, align 4
  %v0_9f50 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f50 = trunc i32 %v0_9f50 to i8
  %v2_9f50 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f50 = add i32 %v2_9f50, 3
  %v4_9f50 = inttoptr i32 %v3_9f50 to i8*
  store i8 %v1_9f50, i8* %v4_9f50, align 1
  %v0_9f54 = load i32, i32* @fp, align 4
  %v1_9f54 = trunc i32 %v0_9f54 to i8
  %v2_9f54 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f54 = add i32 %v2_9f54, 2
  %v4_9f54 = inttoptr i32 %v3_9f54 to i8*
  store i8 %v1_9f54, i8* %v4_9f54, align 1
  %v0_9f58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f58 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f58 = add i32 %v1_9f58, 16
  %v3_9f58 = inttoptr i32 %v2_9f58 to i32*
  store i32 %v0_9f58, i32* %v3_9f58, align 4
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v3_9f5c = mul i32 %v0_9f5c, 16
  %v1_9f60 = load i32, i32* %ip.global-to-local, align 4
  %v2_9f60 = add i32 %v1_9f60, %v3_9f5c
  store i32 %v2_9f60, i32* %r2.global-to-local, align 4
  %v1_9f64 = add i32 %v2_9f60, 13
  %v2_9f64 = inttoptr i32 %v1_9f64 to i8*
  %v3_9f64 = load i8, i8* %v2_9f64, align 1
  %v4_9f64 = zext i8 %v3_9f64 to i32
  store i32 %v4_9f64, i32* %r1.global-to-local, align 4
  %v1_9f68 = add i32 %v2_9f60, 12
  %v2_9f68 = inttoptr i32 %v1_9f68 to i8*
  %v3_9f68 = load i8, i8* %v2_9f68, align 1
  %v4_9f68 = zext i8 %v3_9f68 to i32
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  %v4_9f70 = mul nuw nsw i32 %v4_9f64, 256
  %v5_9f70 = or i32 %v4_9f68, %v4_9f70
  store i32 %v5_9f70, i32* %r3.global-to-local, align 4
  %v2_9f74 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f74 = add i32 %v2_9f74, 20
  %v4_9f74 = inttoptr i32 %v3_9f74 to i8*
  store i8 %v3_9f68, i8* %v4_9f74, align 1
  %v0_9f78 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f78 = sdiv i32 %v0_9f78, 256
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = trunc i32 %v3_9f78 to i8
  %v2_9f7c = load i32, i32* %lr.global-to-local, align 4
  %v3_9f7c = add i32 %v2_9f7c, 1
  %v4_9f7c = inttoptr i32 %v3_9f7c to i8*
  store i8 %v1_9f7c, i8* %v4_9f7c, align 1
  %v0_9f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f80 = add i32 %v0_9f80, 8
  %v2_9f80 = inttoptr i32 %v1_9f80 to i32*
  %v3_9f80 = load i32, i32* %v2_9f80, align 4
  store i32 %v3_9f80, i32* %r1.global-to-local, align 4
  %v0_9f84 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f84 = add i32 %v0_9f84, 13
  %v2_9f84 = inttoptr i32 %v1_9f84 to i8*
  %v3_9f84 = load i8, i8* %v2_9f84, align 1
  %v4_9f84 = zext i8 %v3_9f84 to i32
  store i32 %v4_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v0_9f80, 15
  %v2_9f88 = inttoptr i32 %v1_9f88 to i8*
  %v3_9f88 = load i8, i8* %v2_9f88, align 1
  %v4_9f88 = zext i8 %v3_9f88 to i32
  store i32 %v4_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* %r0.global-to-local, align 4
  %v1_9f8c = add i32 %v0_9f8c, 40
  store i32 %v1_9f8c, i32* @r4, align 4
  %v1_9f90 = add i32 %v0_9f80, 14
  %v2_9f90 = inttoptr i32 %v1_9f90 to i8*
  %v3_9f90 = load i8, i8* %v2_9f90, align 1
  %v4_9f90 = zext i8 %v3_9f90 to i32
  store i32 %v4_9f90, i32* %r0.global-to-local, align 4
  %v2_9f94 = add i32 %v0_9f84, 4
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v3_9f80, i32* %v3_9f94, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  %v0_9f9c = load i32, i32* %r3.global-to-local, align 4
  %v1_9f9c = or i32 %v0_9f9c, 1
  store i32 %v1_9f9c, i32* %r3.global-to-local, align 4
  %v0_9fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fa0 = add i32 %v0_9fa0, 4
  %v2_9fa0 = inttoptr i32 %v1_9fa0 to i32*
  %v3_9fa0 = load i32, i32* %v2_9fa0, align 4
  store i32 %v3_9fa0, i32* %lr.global-to-local, align 4
  %v1_9fa4 = trunc i32 %v1_9f9c to i8
  %v3_9fa4 = add i32 %v0_9f1c, 13
  %v4_9fa4 = inttoptr i32 %v3_9fa4 to i8*
  store i8 %v1_9fa4, i8* %v4_9fa4, align 1
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 12
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i8*
  %v3_9fa8 = load i8, i8* %v2_9fa8, align 1
  %v4_9fa8 = zext i8 %v3_9fa8 to i32
  store i32 %v4_9fa8, i32* %r2.global-to-local, align 4
  %v1_9fac = add i32 %v0_9fa8, 13
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  %v0_9fb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_9fb0 = mul i32 %v1_9fb0, 256
  %v5_9fb0 = or i32 %v4_9fb0, %v0_9fb0
  store i32 %v5_9fb0, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_9fa8, 16
  %v1_9fb4 = zext i8 %tmp108 to i32
  store i32 %v0_9f1c, i32* %ip.global-to-local, align 4
  %v3_9fbc = sdiv i32 %v5_9fb0, 256
  store i32 %v3_9fbc, i32* %r1.global-to-local, align 4
  %v1_9fc0 = or i32 %v1_9fb4, 128
  store i32 %v1_9fc0, i32* %r2.global-to-local, align 4
  %v1_9fc4 = or i32 %v4_9fac, 16
  store i32 %v1_9fc4, i32* %r3.global-to-local, align 4
  %v1_9fc8 = trunc i32 %v3_9fbc to i8
  %v3_9fc8 = add i32 %v0_9f1c, 3
  %v4_9fc8 = inttoptr i32 %v3_9fc8 to i8*
  store i8 %v1_9fc8, i8* %v4_9fc8, align 1
  %v0_9fcc = load i32, i32* %lr.global-to-local, align 4
  %v1_9fcc = load i32, i32* %ip.global-to-local, align 4
  %v2_9fcc = add i32 %v1_9fcc, 8
  %v3_9fcc = inttoptr i32 %v2_9fcc to i32*
  store i32 %v0_9fcc, i32* %v3_9fcc, align 4
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 12
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 13
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 2
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = call i32 @function_dab8()
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  store i32 %v0_9fdc, i32* %r0.global-to-local, align 4
  store i32 %v0_9f1c, i32* %lr.global-to-local, align 4
  store i32 %v1_98a8, i32* %r1.global-to-local, align 4
  %v3_9fe8 = load i8, i8* %v4_9fa4, align 1
  %v4_9fe8 = zext i8 %v3_9fe8 to i32
  store i32 %v1_9fec, i32* %r2.global-to-local, align 4
  %v1_9ff0 = and i32 %v4_9fe8, 223
  %v5_9ff4 = or i32 %v1_9ff0, %v4_9ff4
  store i32 %v5_9ff4, i32* %r3.global-to-local, align 4
  %v1_9ff8 = trunc i32 %v5_9ff4 to i8
  store i8 %v1_9ff8, i8* %v4_9fa4, align 1
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_a000 = load i32, i32* %lr.global-to-local, align 4
  %v1_a000 = add i32 %v0_a000, 13
  %v2_a000 = inttoptr i32 %v1_a000 to i8*
  %v3_a000 = load i8, i8* %v2_a000, align 1
  %v4_a000 = zext i8 %v3_a000 to i32
  store i32 %v1_a004, i32* %r3.global-to-local, align 4
  %v1_a008 = and i32 %v4_a000, 239
  %v5_a00c = or i32 %v1_a008, %v4_a00c
  store i32 %v5_a00c, i32* %r2.global-to-local, align 4
  %v1_a010 = trunc i32 %v5_a00c to i8
  store i8 %v1_a010, i8* %v2_a000, align 1
  %v0_a014 = load i32, i32* %lr.global-to-local, align 4
  %v1_a014 = add i32 %v0_a014, 13
  %v2_a014 = inttoptr i32 %v1_a014 to i8*
  %v3_a014 = load i8, i8* %v2_a014, align 1
  %v4_a014 = zext i8 %v3_a014 to i32
  store i32 %v1_98e8, i32* %lr.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 %v1_a020, i32* %r2.global-to-local, align 4
  %v1_a024 = and i32 %v4_a014, 247
  %v5_a028 = or i32 %v1_a024, %v4_a028
  store i32 %v5_a028, i32* %r3.global-to-local, align 4
  %v1_a02c = trunc i32 %v5_a028 to i8
  store i8 %v1_a02c, i8* %v4_9fa4, align 1
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_a034 = load i32, i32* %r1.global-to-local, align 4
  %v1_a034 = add i32 %v0_a034, 13
  %v2_a034 = inttoptr i32 %v1_a034 to i8*
  %v3_a034 = load i8, i8* %v2_a034, align 1
  %v4_a034 = zext i8 %v3_a034 to i32
  store i32 %v1_a038, i32* %r3.global-to-local, align 4
  %v1_a03c = and i32 %v4_a034, 251
  %v5_a040 = or i32 %v1_a03c, %v4_a040
  store i32 %v5_a040, i32* %r2.global-to-local, align 4
  %v1_a044 = trunc i32 %v5_a040 to i8
  store i8 %v1_a044, i8* %v2_a034, align 1
  store i32 %v1_9928, i32* @lr, align 4
  %v0_a04c = load i32, i32* %r1.global-to-local, align 4
  %v1_a04c = add i32 %v0_a04c, 13
  %v2_a04c = inttoptr i32 %v1_a04c to i8*
  %v3_a04c = load i8, i8* %v2_a04c, align 1
  %v4_a04c = zext i8 %v3_a04c to i32
  store i32 %v1_a050, i32* %r2.global-to-local, align 4
  %v1_a054 = and i32 %v4_a04c, 253
  %v4_a058 = or i32 %v1_a054, %v3_a058
  store i32 %v4_a058, i32* %r3.global-to-local, align 4
  %v1_a05c = trunc i32 %v4_a058 to i8
  store i8 %v1_a05c, i8* %v2_a04c, align 1
  %v0_a060 = load i32, i32* %r1.global-to-local, align 4
  %v1_a060 = add i32 %v0_a060, 13
  %v2_a060 = inttoptr i32 %v1_a060 to i8*
  %v3_a060 = load i8, i8* %v2_a060, align 1
  %v4_a060 = zext i8 %v3_a060 to i32
  %v1_a068 = and i32 %v4_a060, 254
  %v2_a070 = or i32 %v1_a068, %v1_a06c
  store i32 %v2_a070, i32* %r3.global-to-local, align 4
  store i32 %v0_9f1c, i32* %r2.global-to-local, align 4
  %v4_a078 = sdiv i32 %v0_9fdc, 256
  store i32 %v4_a078, i32* %r1.global-to-local, align 4
  %v1_a07c = trunc i32 %v2_a070 to i8
  store i8 %v1_a07c, i8* %v4_9fa4, align 1
  %v0_a080 = load i32, i32* %r1.global-to-local, align 4
  %v1_a080 = trunc i32 %v0_a080 to i8
  %v2_a080 = load i32, i32* %r2.global-to-local, align 4
  %v3_a080 = add i32 %v2_a080, 15
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* %r2.global-to-local, align 4
  %v4_a084 = add i32 %v3_a084, 14
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v1_9fdc, i8* %v5_a084, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_a08c = load i32, i32* @r4, align 4
  store i32 %v0_a08c, i32* %r0.global-to-local, align 4
  %v2_a090 = call i32 @function_db6c(i32 %v0_a08c, i32 %v6_9960)
  store i32 %v2_a090, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %ip.global-to-local, align 4
  %v2_a09c = load i32, i32* @r4, align 4
  %v4_a09c = add i32 %v2_a09c, %v6_9960
  %v5_a09c = inttoptr i32 %v4_a09c to i8*
  store i8 0, i8* %v5_a09c, align 1
  %v3_a0a0 = load i32, i32* %stack_var_-40, align 4
  %v1_a0a8 = add i32 %v3_a0a0, 1
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  %v9_a0ac = icmp eq i32 %v1_a0a8, %v1_97b4
  store i1 %v9_a0ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0a8, i32* %stack_var_-40, align 4
  %v5_a0b4 = icmp slt i32 %v1_a0a8, %v1_97b4
  br i1 %v5_a0b4, label %dec_label_pc_9a1c.outer, label %dec_label_pc_9be0.preheader

; uselistorder directives
  uselistorder i32 %v1_a0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9fdc, { 0, 2, 1 }
  uselistorder i32 %v3_9fbc, { 1, 0 }
  uselistorder i32 %v3_9f78, { 1, 0 }
  uselistorder i32 %v0_9f1c, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_9e94, { 1, 0 }
  uselistorder i32 %v2_9e7c, { 1, 0 }
  uselistorder i32 %v3_9e60, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9e24, { 1, 0 }
  uselistorder i32 %v2_9e08, { 1, 2, 3, 0 }
  uselistorder i32 %v4_9df4, { 1, 0 }
  uselistorder i32 %v0_9df0, { 0, 2, 1 }
  uselistorder i32 %v4_9de0, { 1, 0 }
  uselistorder i32 %v0_9ddc, { 0, 2, 1 }
  uselistorder i32 %v8_9da4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9d80, { 2, 0, 3, 1 }
  uselistorder i32 %v0_9d40, { 1, 0 }
  uselistorder i32 %v7_9d1c, { 1, 0, 2 }
  uselistorder i32 %v1_9d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_9ca0, { 0, 2, 1 }
  uselistorder i32 %v0_9c88, { 1, 0, 2 }
  uselistorder i32 %v3_9c64, { 1, 0 }
  uselistorder i32 %v3_9c44, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9c30, { 0, 2, 1 }
  uselistorder i32 %v1_9bf8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_9bd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9bb8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9b3c, { 1, 0 }
  uselistorder i32 %v7_9b34, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9b80, { 1, 0 }
  uselistorder i1 %v9_9b64, { 1, 0 }
  uselistorder i32 %v4_9b78, { 1, 0 }
  uselistorder i32 %v4_9b74, { 1, 0 }
  uselistorder i32 %v0_9e28, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_9a7c, { 1, 0, 2 }
  uselistorder i1 %v7_9a2c, { 1, 0 }
  uselistorder i32 %v3_9a28, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_a050, { 1, 0 }
  uselistorder i32 %v1_a038, { 1, 0 }
  uselistorder i32 %v1_a004, { 1, 0 }
  uselistorder i32 %v1_9edc, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 1, 0 }
  uselistorder i32 %v5_9b7c, { 1, 0 }
  uselistorder i32 %v1_a020, { 1, 0 }
  uselistorder i32 %v1_9fec, { 1, 0 }
  uselistorder i1 %v2_9b94, { 1, 0 }
  uselistorder i32 %v1_9b90, { 1, 0 }
  uselistorder i32 %v4_9b8c, { 2, 0, 1 }
  uselistorder i32 %v4_9b70, { 1, 0 }
  uselistorder i32 %v1_9adc, { 2, 1, 0 }
  uselistorder i1 %v9_9dd4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_9a0c, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_9a04, { 1, 0, 2 }
  uselistorder i1 %v2_99f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99ec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_99e8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v3_99a8, { 3, 2, 5, 0, 4, 1 }
  uselistorder i32 %v3_99a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9990, { 2, 1, 0 }
  uselistorder i32 %v1_9980, { 1, 0 }
  uselistorder i32 %v6_9960, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_9948, { 1, 0 }
  uselistorder i32 %v1_9928, { 1, 2, 0 }
  uselistorder i32 %v1_9908, { 1, 2, 0 }
  uselistorder i32 %v1_98e8, { 1, 2, 0 }
  uselistorder i32 %v1_98c8, { 1, 2, 0 }
  uselistorder i32 %v1_98a8, { 1, 2, 0 }
  uselistorder i32 %v1_9870, { 1, 2, 0 }
  uselistorder i32 %v6_9808, { 2, 1, 3, 0 }
  uselistorder i32 %v2_97f0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_97e0, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_97b4, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 23, 24, 25, 26, 29, 28, 30, 32, 31, 33, 35, 34, 37, 41, 36, 38, 40, 39, 44, 42, 43, 45, 46, 47, 49, 50, 48, 51, 54, 52, 53, 56, 55, 60, 57, 58, 59, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 26, 27, 28, 29, 30, 32, 33, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9d60, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9d34, { 1, 0 }
  uselistorder label %dec_label_pc_9c20, { 1, 0 }
  uselistorder label %dec_label_pc_9be0, { 1, 0 }
  uselistorder label %dec_label_pc_9b04, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_9a38, { 1, 0 }
  uselistorder label %dec_label_pc_9a1c, { 1, 0 }
}

define i32 @function_a0c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a0c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_a0c0 = load i32, i32* @sb, align 4
  %v24_a0c0 = load i32, i32* @fp, align 4
  %v1_a0c4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0e0 = urem i32 %arg4, 256
  store i32 %v1_a0e0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a0f0 = call i32 @function_1183c(i32 %v1_a0c4, i32 4)
  %v0_a0f4 = load i32, i32* @r5, align 4
  store i32 %v0_a0f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a100 = load i32, i32* @r7, align 4
  store i32 %v0_a100, i32* %r3.global-to-local, align 4
  %v0_a104 = load i32, i32* @r4, align 4
  %v5_a108 = inttoptr i32 %v0_a0f4 to i32*
  %v6_a108 = call i32 @function_829c(i32 %v0_a104, i32* %v5_a108, i32 2, i32 %v0_a100, i32 %v2_a0f0)
  %v1_a114 = urem i32 %v6_a108, 256
  store i32 %v1_a114, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a120 = load i32, i32* @r5, align 4
  store i32 %v0_a120, i32* %r1.global-to-local, align 4
  %v0_a124 = load i32, i32* @r4, align 4
  %v5_a128 = trunc i32 %v6_a108 to i8
  %v6_a12c = inttoptr i32 %v0_a120 to i32*
  %v7_a12c = call i32 @function_829c(i32 %v0_a124, i32* %v6_a12c, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a108)
  %v0_a130 = load i32, i32* @r5, align 4
  store i32 %v0_a130, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* @r4, align 4
  %v5_a144 = inttoptr i32 %v0_a130 to i32*
  %v6_a144 = call i32 @function_829c(i32 %v0_a140, i32* %v5_a144, i32 4, i32 64, i32 %v7_a12c)
  %v1_a14c = urem i32 %v6_a144, 256
  store i32 %v1_a14c, i32* %ip.global-to-local, align 4
  %v0_a150 = load i32, i32* @r5, align 4
  store i32 %v0_a150, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_a158 = load i32, i32* @r7, align 4
  store i32 %v0_a158, i32* %r3.global-to-local, align 4
  %v0_a15c = load i32, i32* @r4, align 4
  %v5_a160 = trunc i32 %v6_a144 to i8
  %v6_a164 = inttoptr i32 %v0_a150 to i32*
  %v7_a164 = call i32 @function_829c(i32 %v0_a15c, i32* %v6_a164, i32 5, i32 %v0_a158, i32 %v6_a144)
  %v1_a170 = urem i32 %v7_a164, 256
  store i32 %v1_a170, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v5_a188 = inttoptr i32 %v0_a17c to i32*
  %v6_a188 = call i32 @function_829c(i32 %v0_a180, i32* %v5_a188, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_a170)
  %v0_a190 = load i32, i32* @r5, align 4
  store i32 %v0_a190, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a188, i32* %sb.global-to-local, align 4
  %v0_a1a0 = load i32, i32* @r4, align 4
  %v5_a1a4 = inttoptr i32 %v0_a190 to i32*
  %v6_a1a4 = call i32 @function_829c(i32 %v0_a1a0, i32* %v5_a1a4, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_a1b0 = load i32, i32* @r5, align 4
  store i32 %v0_a1b0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r4, align 4
  %v5_a1c0 = inttoptr i32 %v0_a1b0 to i32*
  %v6_a1c0 = call i32 @function_829c(i32 %v0_a1bc, i32* %v5_a1c0, i32 16, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a1a4)
  %v0_a1cc = load i32, i32* @r5, align 4
  store i32 %v0_a1cc, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r4, align 4
  %v5_a1dc = inttoptr i32 %v0_a1cc to i32*
  %v6_a1dc = call i32 @function_829c(i32 %v0_a1d8, i32* %v5_a1dc, i32 17, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a1c0)
  %v0_a1e0 = load i32, i32* @r5, align 4
  store i32 %v0_a1e0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a1ec = load i32, i32* @r7, align 4
  store i32 %v0_a1ec, i32* %r3.global-to-local, align 4
  %v0_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f4 = inttoptr i32 %v0_a1e0 to i32*
  %v6_a1f4 = call i32 @function_829c(i32 %v0_a1f0, i32* %v5_a1f4, i32 10, i32 %v0_a1ec, i32 %v6_a1dc)
  %v0_a1f8 = load i32, i32* @r5, align 4
  store i32 %v0_a1f8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  %v5_a20c = inttoptr i32 %v0_a1f8 to i32*
  %v6_a20c = call i32 @function_829c(i32 %v0_a208, i32* %v5_a20c, i32 11, i32 1, i32 %v6_a1f4)
  %v0_a210 = load i32, i32* @r5, align 4
  store i32 %v0_a210, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a21c = load i32, i32* @r7, align 4
  store i32 %v0_a21c, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r4, align 4
  %v5_a224 = inttoptr i32 %v0_a210 to i32*
  %v6_a224 = call i32 @function_829c(i32 %v0_a220, i32* %v5_a224, i32 12, i32 %v0_a21c, i32 %v6_a20c)
  %v0_a228 = load i32, i32* @r5, align 4
  store i32 %v0_a228, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a234 = load i32, i32* @r7, align 4
  store i32 %v0_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @r4, align 4
  %v5_a23c = inttoptr i32 %v0_a228 to i32*
  %v6_a23c = call i32 @function_829c(i32 %v0_a238, i32* %v5_a23c, i32 13, i32 %v0_a234, i32 %v6_a224)
  %v0_a240 = load i32, i32* @r5, align 4
  store i32 %v0_a240, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_a24c = load i32, i32* @r7, align 4
  store i32 %v0_a24c, i32* %r3.global-to-local, align 4
  %v0_a250 = load i32, i32* @r4, align 4
  %v5_a254 = inttoptr i32 %v0_a240 to i32*
  %v6_a254 = call i32 @function_829c(i32 %v0_a250, i32* %v5_a254, i32 14, i32 %v0_a24c, i32 %v6_a23c)
  %v0_a258 = load i32, i32* @r5, align 4
  store i32 %v0_a258, i32* %r1.global-to-local, align 4
  %v0_a260 = load i32, i32* @r7, align 4
  store i32 %v0_a260, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @r4, align 4
  %v5_a26c = inttoptr i32 %v0_a258 to i32*
  %v6_a26c = call i32 @function_829c(i32 %v0_a268, i32* %v5_a26c, i32 15, i32 %v0_a260, i32 %v6_a254)
  %v0_a270 = load i32, i32* @r5, align 4
  store i32 %v0_a270, i32* %r1.global-to-local, align 4
  %v0_a274 = load i32, i32* @r7, align 4
  store i32 %v0_a274, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a26c, i32* %fp.global-to-local, align 4
  %v0_a280 = load i32, i32* @r4, align 4
  %v5_a284 = inttoptr i32 %v0_a270 to i32*
  %v6_a284 = call i32 @function_829c(i32 %v0_a280, i32* %v5_a284, i32 %v0_a274, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* @r5, align 4
  store i32 %v0_a290, i32* %r1.global-to-local, align 4
  store i32 %v6_a284, i32* @sl, align 4
  %v0_a298 = load i32, i32* @r4, align 4
  %v5_a29c = inttoptr i32 %v0_a290 to i32*
  %v6_a29c = call i32 @function_829c(i32 %v0_a298, i32* %v5_a29c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a2a8 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = urem i32 %v6_a29c, 256
  store i32 %v1_a2ac, i32* %ip.global-to-local, align 4
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r4, align 4
  %v5_a2c0 = inttoptr i32 %v0_a2b0 to i32*
  %v6_a2c0 = call i32 @function_8230(i32 %v0_a2b8, i32* %v5_a2c0, i32 19, i32 %v2_a2a8, i32 %v1_a2ac)
  %v0_a2c8 = load i32, i32* @r7, align 4
  %v1_a2cc = inttoptr i32 %v0_a2c8 to i32*
  %v2_a2cc = call i32 @function_10f4c(i32* %v1_a2cc)
  %v1_a2d0 = load i32, i32* @r6, align 4
  %v2_a2d0 = add i32 %v1_a2d0, %v2_a2cc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a2e4 = call i32 @function_11550(i32 2, i32 3, i32 6)
  %v7_a2e8 = icmp eq i32 %v3_a2e4, -1
  store i1 %v7_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2e8, label %dec_label_pc_a868, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a0c0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a2fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a2fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a304 = load i32, i32* @r7, align 4
  store i32 %v0_a304, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a310 = call i32 @function_11520(i32 %v3_a2e4, i32 %v0_a304, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_a314 = icmp eq i32 %v6_a310, -1
  store i1 %v7_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a314, label %dec_label_pc_a870, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a2f4
  store i32 %v1_a0c4, i32* %r3.global-to-local, align 4
  %v3_a328 = mul i32 %v7_a12c, 65536
  store i32 %v3_a328, i32* @r4, align 4
  %v0_a32c = load i32, i32* %sb.global-to-local, align 4
  %v3_a32c = mul i32 %v0_a32c, 65536
  store i32 %v3_a32c, i32* %sb.global-to-local, align 4
  %v3_a334 = urem i32 %v7_a12c, 65536
  store i32 %v3_a334, i32* %ip.global-to-local, align 4
  %v3_a338 = urem i32 %v0_a32c, 65536
  store i32 %v3_a338, i32* %r1.global-to-local, align 4
  %v3_a33c = urem i32 %v6_a1a4, 65536
  store i32 %v3_a33c, i32* %r2.global-to-local, align 4
  %v2_a340 = icmp eq i32 %v1_a0c4, 0
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  %v0_a344 = load i32, i32* @r7, align 4
  store i32 %v0_a344, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a5dc.preheader, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a31c
  %v0_a368 = load i32, i32* @sl, align 4
  %v1_a370 = urem i32 %v0_a32c, 256
  %tmp73 = udiv i32 %v7_a12c, 256
  %v1_a388 = urem i32 %v6_a1a4, 256
  store i32 %v1_a388, i32* @lr, align 4
  %tmp74 = mul i32 %v6_a1c0, 256
  %v1_a398 = and i32 %tmp74, 65280
  %tmp76 = udiv i32 %v6_a1c0, 256
  %v4_a39c = urem i32 %tmp76, 256
  %v5_a39c = or i32 %v4_a39c, %v1_a398
  %v1_a3b8 = urem i32 %v6_a1f4, 2
  %v1_a3bc = urem i32 %v6_a20c, 2
  %v1_a3c0 = urem i32 %v6_a224, 2
  %v1_a3c4 = urem i32 %v6_a23c, 2
  %v1_a368 = mul i32 %v0_a368, 65536
  %tmp93 = add i32 %v1_a368, 2621440
  %v3_a3e4 = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_a3e4 = sdiv i32 %sext12, 16777216
  %v3_a3e8 = mul nuw nsw i32 %v1_a370, 256
  %tmp77 = udiv i32 %v6_a1a4, 256
  %v3_a3ec = urem i32 %tmp77, 256
  %v1_a3f0 = urem i32 %v6_a254, 2
  store i32 %v1_a3f0, i32* %ip.global-to-local, align 4
  %v1_a3f4 = urem i32 %v6_a224, 256
  store i32 %v1_a3f4, i32* %r1.global-to-local, align 4
  %v3_a3f8 = ashr i32 %tmp93, 31
  store i32 %v3_a3f8, i32* %r2.global-to-local, align 4
  %v3_a3fc = ashr i32 %sext12, 31
  store i32 %v3_a3fc, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_a32c, 256
  %v4_a400 = urem i32 %tmp94, 256
  %v5_a400 = or i32 %v4_a400, %v3_a3e8
  store i32 %v5_a400, i32* @r4, align 4
  %v0_a404 = load i32, i32* %fp.global-to-local, align 4
  %v1_a404 = urem i32 %v0_a404, 2
  %v4_a408 = mul nuw nsw i32 %v1_a388, 256
  %v5_a408 = or i32 %v4_a408, %v3_a3ec
  store i32 %v5_a408, i32* @r5, align 4
  %v5_a414 = trunc i32 %v3_a3f8 to i8
  store i32 %v0_a344, i32* @r6, align 4
  store i32 %v1_a370, i32* @fp, align 4
  store i32 %v1_a388, i32* @sb, align 4
  %tmp = sub nsw i32 0, %v1_a3b8
  %v4_a4f8 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_a3bc
  %v4_a50c = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_a3c0
  %v4_a520 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_a3c4
  %v4_a534 = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_a3f0
  %v3_a548 = and i32 %tmp98, 2
  %v2_a598 = icmp eq i32 %v1_a3f4, 0
  br label %dec_label_pc_a430

dec_label_pc_a430:                                ; preds = %.thread11, %dec_label_pc_a358
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a43c = call i32 @function_1183c(i32 1510, i32 1)
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v3_a444 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a444, i32* %r3.global-to-local, align 4
  %v2_a448 = load i32, i32* @r6, align 4
  %v5_a448 = mul i32 %v2_a448, 4
  %v6_a448 = add i32 %v5_a448, %v2_a0f0
  %v7_a448 = inttoptr i32 %v6_a448 to i32*
  store i32 %v2_a43c, i32* %v7_a448, align 4
  %v0_a44c = load i32, i32* %ip.global-to-local, align 4
  %v1_a44c = load i32, i32* %r3.global-to-local, align 4
  %v4_a44c = mul i32 %v1_a44c, 4
  %v5_a44c = add i32 %v4_a44c, %v0_a44c
  %v6_a44c = inttoptr i32 %v5_a44c to i32*
  %v7_a44c = load i32, i32* %v6_a44c, align 4
  store i32 %v7_a44c, i32* %r1.global-to-local, align 4
  %v1_a450 = inttoptr i32 %v7_a44c to i8*
  %v2_a450 = load i8, i8* %v1_a450, align 1
  %tmp99 = urem i8 %v2_a450, 16
  %v1_a454 = zext i8 %tmp99 to i32
  %v1_a458 = or i32 %v1_a454, 64
  store i32 %v1_a458, i32* %r2.global-to-local, align 4
  %v1_a45c = trunc i32 %v1_a458 to i8
  store i8 %v1_a45c, i8* %v1_a450, align 1
  %v0_a460 = load i32, i32* %r1.global-to-local, align 4
  %v1_a460 = inttoptr i32 %v0_a460 to i8*
  %v2_a460 = load i8, i8* %v1_a460, align 1
  %v1_a464 = and i8 %v2_a460, -16
  %v1_a468 = or i8 %v1_a464, 5
  store i32 %v1_a170, i32* %r2.global-to-local, align 4
  store i8 %v1_a468, i8* %v1_a460, align 1
  %v2_a478 = load i32, i32* %r1.global-to-local, align 4
  %v3_a478 = add i32 %v2_a478, 1
  %v4_a478 = inttoptr i32 %v3_a478 to i8*
  store i8 %v5_a128, i8* %v4_a478, align 1
  store i32 %v6_a144, i32* %ip.global-to-local, align 4
  %v2_a480 = load i32, i32* %r1.global-to-local, align 4
  %v3_a480 = add i32 %v2_a480, 8
  %v4_a480 = inttoptr i32 %v3_a480 to i8*
  store i8 %v5_a160, i8* %v4_a480, align 1
  %v0_a484 = load i32, i32* %r2.global-to-local, align 4
  %v2_a484 = icmp eq i32 %v0_a484, 0
  store i1 %v2_a484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* %r3.global-to-local, align 4
  store i32 %v3_a3e4, i32* %r2.global-to-local, align 4
  %v2_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = add i32 %v2_a490, 3
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v5_a414, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %r2.global-to-local, align 4
  %v1_a494 = trunc i32 %v0_a494 to i8
  %v2_a494 = load i32, i32* %r1.global-to-local, align 4
  %v3_a494 = add i32 %v2_a494, 2
  %v4_a494 = inttoptr i32 %v3_a494 to i8*
  store i8 %v1_a494, i8* %v4_a494, align 1
  %v0_a498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a498, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_a430
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_a3fc to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_a430
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_a3fc, i32* %r2.global-to-local, align 4
  %v3_a4a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 6
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i8*
  store i8 64, i8* %v5_a4a0, align 1
  %v0_a4a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_a4a8.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_a3fc.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a4a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a8 = add i32 %v2_a4a8, 5
  %v4_a4a8 = inttoptr i32 %v3_a4a8 to i8*
  store i8 %v3_a3fc.sink.off0, i8* %v4_a4a8, align 1
  store i32 %v7_a3e4, i32* %ip.global-to-local, align 4
  %v0_a4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b0, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_a4b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4b4 = trunc i32 %v0_a4b4 to i8
  %v2_a4b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4b4 = add i32 %v2_a4b4, 9
  %v4_a4b4 = inttoptr i32 %v3_a4b4 to i8*
  store i8 %v1_a4b4, i8* %v4_a4b4, align 1
  %v0_a4b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4b8, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a4b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4b8 = trunc i32 %v1_a4b8 to i8
  %v3_a4b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4b8 = add i32 %v3_a4b8, 7
  %v5_a4b8 = inttoptr i32 %v4_a4b8 to i8*
  store i8 %v2_a4b8, i8* %v5_a4b8, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_a4bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a4bc, i32* %r2.global-to-local, align 4
  %v0_a4c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4c0 = trunc i32 %v0_a4c0 to i8
  %v2_a4c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4c0 = add i32 %v2_a4c0, 4
  %v4_a4c0 = inttoptr i32 %v3_a4c0 to i8*
  store i8 %v1_a4c0, i8* %v4_a4c0, align 1
  store i32 %v6_a2c0, i32* %ip.global-to-local, align 4
  %v0_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 32
  store i32 %v3_a4c8, i32* %r3.global-to-local, align 4
  %v1_a4cc = load i32, i32* %r1.global-to-local, align 4
  %v2_a4cc = add i32 %v1_a4cc, 12
  %v3_a4cc = inttoptr i32 %v2_a4cc to i32*
  store i32 %v6_a2c0, i32* %v3_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_a4d0, -8
  %v5_a4d0 = add i32 %v0_a4d0, %tmp100
  %v1_a4d4 = load i32, i32* @r8, align 4
  %v2_a4d4 = add i32 %v1_a4d4, %v5_a4d0
  store i32 %v2_a4d4, i32* %r3.global-to-local, align 4
  %v1_a4d8 = add i32 %v2_a4d4, 16
  %v2_a4d8 = inttoptr i32 %v1_a4d8 to i32*
  %v3_a4d8 = load i32, i32* %v2_a4d8, align 4
  store i32 %v3_a4d8, i32* %r2.global-to-local, align 4
  %v0_a4dc = load i32, i32* @r4, align 4
  %v1_a4dc = trunc i32 %v0_a4dc to i8
  %v2_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a4dc = add i32 %v2_a4dc, 20
  %v4_a4dc = inttoptr i32 %v3_a4dc to i8*
  store i8 %v1_a4dc, i8* %v4_a4dc, align 1
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a4e0 = add i32 %v1_a4e0, 16
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i32*
  store i32 %v0_a4e0, i32* %v3_a4e0, align 4
  %v0_a4e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a4e4 = add i32 %v0_a4e4, 20
  store i32 %v1_a4e4, i32* @r6, align 4
  %v1_a4e8 = add i32 %v0_a4e4, 33
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i8*
  %v3_a4e8 = load i8, i8* %v2_a4e8, align 1
  %v4_a4e8 = zext i8 %v3_a4e8 to i32
  %v1_a4ec = add i32 %v0_a4e4, 40
  store i32 %v1_a4ec, i32* @r7, align 4
  store i32 %v1_a3b8, i32* %r1.global-to-local, align 4
  %v1_a4f4 = and i32 %v4_a4e8, 223
  %v5_a4f8 = or i32 %v1_a4f4, %v4_a4f8
  store i32 %v5_a4f8, i32* %r3.global-to-local, align 4
  %v1_a4fc = trunc i32 %v5_a4f8 to i8
  store i8 %v1_a4fc, i8* %v2_a4e8, align 1
  %v0_a500 = load i32, i32* @r6, align 4
  %v1_a500 = add i32 %v0_a500, 13
  %v2_a500 = inttoptr i32 %v1_a500 to i8*
  %v3_a500 = load i8, i8* %v2_a500, align 1
  %v4_a500 = zext i8 %v3_a500 to i32
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a508 = and i32 %v4_a500, 239
  %v5_a50c = or i32 %v1_a508, %v4_a50c
  store i32 %v5_a50c, i32* %r2.global-to-local, align 4
  %v1_a510 = trunc i32 %v5_a50c to i8
  store i8 %v1_a510, i8* %v2_a500, align 1
  %v0_a514 = load i32, i32* @r6, align 4
  %v1_a514 = add i32 %v0_a514, 13
  %v2_a514 = inttoptr i32 %v1_a514 to i8*
  %v3_a514 = load i8, i8* %v2_a514, align 1
  %v4_a514 = zext i8 %v3_a514 to i32
  store i32 %v1_a3c0, i32* %ip.global-to-local, align 4
  %v1_a51c = and i32 %v4_a514, 247
  %v5_a520 = or i32 %v1_a51c, %v4_a520
  store i32 %v5_a520, i32* %r3.global-to-local, align 4
  %v1_a524 = trunc i32 %v5_a520 to i8
  store i8 %v1_a524, i8* %v2_a514, align 1
  %v0_a528 = load i32, i32* @r6, align 4
  %v1_a528 = add i32 %v0_a528, 13
  %v2_a528 = inttoptr i32 %v1_a528 to i8*
  %v3_a528 = load i8, i8* %v2_a528, align 1
  %v4_a528 = zext i8 %v3_a528 to i32
  store i32 %v1_a3c4, i32* %r1.global-to-local, align 4
  %v1_a530 = and i32 %v4_a528, 251
  %v5_a534 = or i32 %v1_a530, %v4_a534
  store i32 %v5_a534, i32* %r2.global-to-local, align 4
  %v1_a538 = trunc i32 %v5_a534 to i8
  store i8 %v1_a538, i8* %v2_a528, align 1
  %v0_a53c = load i32, i32* @r6, align 4
  %v1_a53c = add i32 %v0_a53c, 13
  %v2_a53c = inttoptr i32 %v1_a53c to i8*
  %v3_a53c = load i8, i8* %v2_a53c, align 1
  %v4_a53c = zext i8 %v3_a53c to i32
  store i32 %v1_a3f0, i32* %r2.global-to-local, align 4
  %v1_a544 = and i32 %v4_a53c, 253
  %v4_a548 = or i32 %v1_a544, %v3_a548
  store i32 %v4_a548, i32* %r3.global-to-local, align 4
  %v1_a54c = trunc i32 %v4_a548 to i8
  store i8 %v1_a54c, i8* %v2_a53c, align 1
  %v0_a550 = load i32, i32* @r6, align 4
  %v1_a550 = add i32 %v0_a550, 12
  %v2_a550 = inttoptr i32 %v1_a550 to i8*
  %v3_a550 = load i8, i8* %v2_a550, align 1
  %v4_a550 = zext i8 %v3_a550 to i32
  store i32 %v4_a550, i32* %r2.global-to-local, align 4
  %v1_a554 = add i32 %v0_a550, 13
  %v2_a554 = inttoptr i32 %v1_a554 to i8*
  %v3_a554 = load i8, i8* %v2_a554, align 1
  %v4_a554 = zext i8 %v3_a554 to i32
  store i32 %v1_a404, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_a550, 16
  %v1_a55c = zext i8 %tmp101 to i32
  %v1_a560 = and i32 %v4_a554, 254
  %v2_a564 = or i32 %v1_a560, %v1_a404
  store i32 %v2_a564, i32* %r3.global-to-local, align 4
  %v1_a568 = or i32 %v1_a55c, 80
  store i32 %v1_a568, i32* %r2.global-to-local, align 4
  %v1_a56c = trunc i32 %v1_a568 to i8
  store i8 %v1_a56c, i8* %v2_a550, align 1
  %v0_a570 = load i32, i32* %r3.global-to-local, align 4
  %v1_a570 = trunc i32 %v0_a570 to i8
  %v2_a570 = load i32, i32* @r6, align 4
  %v3_a570 = add i32 %v2_a570, 13
  %v4_a570 = inttoptr i32 %v3_a570 to i8*
  store i8 %v1_a570, i8* %v4_a570, align 1
  store i32 %v5_a39c, i32* %r1.global-to-local, align 4
  %v0_a578 = load i32, i32* @fp, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r6, align 4
  %v3_a578 = add i32 %v2_a578, 1
  %v4_a578 = inttoptr i32 %v3_a578 to i8*
  store i8 %v1_a578, i8* %v4_a578, align 1
  %v0_a57c = load i32, i32* %r1.global-to-local, align 4
  %v1_a57c = load i32, i32* @r6, align 4
  %v2_a57c = add i32 %v1_a57c, 4
  %v3_a57c = inttoptr i32 %v2_a57c to i32*
  store i32 %v0_a57c, i32* %v3_a57c, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v1_a580 = trunc i32 %v0_a580 to i8
  %v2_a580 = load i32, i32* @r6, align 4
  %v3_a580 = add i32 %v2_a580, 2
  %v4_a580 = inttoptr i32 %v3_a580 to i8*
  store i8 %v1_a580, i8* %v4_a580, align 1
  %v0_a584 = load i32, i32* @sb, align 4
  %v1_a584 = trunc i32 %v0_a584 to i8
  %v2_a584 = load i32, i32* @r6, align 4
  %v3_a584 = add i32 %v2_a584, 3
  %v4_a584 = inttoptr i32 %v3_a584 to i8*
  store i8 %v1_a584, i8* %v4_a584, align 1
  %v0_a588 = call i32 @function_dab8()
  store i32 %v1_a3f4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_a588, 16777216
  %v1_a590 = sdiv i32 %sext, 16777216
  store i32 %v1_a590, i32* %r2.global-to-local, align 4
  %v3_a594 = ashr i32 %sext, 31
  store i32 %v3_a594, i32* %r3.global-to-local, align 4
  store i1 %v2_a598, i1* %cpsr_z.global-to-local, align 1
  %v1_a59c = trunc i32 %v3_a594 to i8
  %v2_a59c = load i32, i32* @r6, align 4
  %v3_a59c = add i32 %v2_a59c, 15
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_a5a0 = load i32, i32* @r6, align 4
  %v2_a5a0 = add i32 %v1_a5a0, 13
  %v3_a5a0 = inttoptr i32 %v2_a5a0 to i8*
  %v4_a5a0 = load i8, i8* %v3_a5a0, align 1
  %v5_a5a0 = zext i8 %v4_a5a0 to i32
  %v2_a5a4 = or i32 %v5_a5a0, 8
  store i32 %v2_a5a4, i32* %r3.global-to-local, align 4
  %v2_a5a8 = trunc i32 %v2_a5a4 to i8
  store i8 %v2_a5a8, i8* %v3_a5a0, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_a5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a5ac = trunc i32 %v0_a5ac to i8
  %v2_a5ac = load i32, i32* @r6, align 4
  %v3_a5ac = add i32 %v2_a5ac, 14
  %v4_a5ac = inttoptr i32 %v3_a5ac to i8*
  store i8 %v1_a5ac, i8* %v4_a5ac, align 1
  %v0_a5b0 = load i32, i32* @sl, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r7, align 4
  %v2_a5b8 = call i32 @function_db6c(i32 %v0_a5b4, i32 %v0_a5b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a5c0 = load i32, i32* @r7, align 4
  %v3_a5c0 = load i32, i32* @sl, align 4
  %v4_a5c0 = add i32 %v3_a5c0, %v2_a5c0
  %v5_a5c0 = inttoptr i32 %v4_a5c0 to i8*
  store i8 0, i8* %v5_a5c0, align 1
  %v3_a5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5c4, i32* %r2.global-to-local, align 4
  store i32 %v1_a0c4, i32* %r1.global-to-local, align 4
  %v1_a5cc = add i32 %v3_a5c4, 1
  store i32 %v1_a5cc, i32* @r6, align 4
  %v9_a5d0 = icmp eq i32 %v1_a0c4, %v1_a5cc
  store i1 %v9_a5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a5cc, i32* %stack_var_-40, align 4
  %v8_a5d8 = icmp sgt i32 %v1_a0c4, %v1_a5cc
  br i1 %v8_a5d8, label %dec_label_pc_a430, label %dec_label_pc_a5dc.preheader

dec_label_pc_a5dc.preheader:                      ; preds = %.thread11, %dec_label_pc_a31c
  %v2_a61c = icmp eq i32 %v6_a2c0, -1
  %v7_a61c = icmp eq i32 %v6_a2c0, -1
  %v9_a7b4 = icmp eq i32 %v3_a334, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_a830 = icmp eq i32 %v1_a2ac, 0
  br label %dec_label_pc_a5dc

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5dc.preheader, %dec_label_pc_a854
  store i32 %v1_a0c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a340, label %dec_label_pc_a854, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5dc
  %v0_a5f0 = load i32, i32* @sl, align 4
  %v1_a5f0 = add i32 %v0_a5f0, 20
  store i32 %v1_a5f0, i32* @sb, align 4
  %tmp84 = mul i32 %v1_a5f0, 256
  %v1_a5fc = and i32 %tmp84, 65280
  store i32 %v1_a5fc, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_a5f0, 256
  %v4_a600 = urem i32 %tmp85, 256
  %v5_a600 = or i32 %v4_a600, %v1_a5fc
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v1_a608 = add i32 %v0_a5f0, 40
  store i32 %v1_a608, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a718

dec_label_pc_a618:                                ; preds = %dec_label_pc_a718
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a624:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_a7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a638

dec_label_pc_a638:                                ; preds = %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge, %dec_label_pc_a624
  %v1_a63c = phi i32 [ %v1_a63c.pre, %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_a624 ]
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v9_a63c = icmp eq i32 %v3_a338, %v1_a63c
  store i1 %v9_a63c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a63c, label %dec_label_pc_a7dc, label %dec_label_pc_a644

dec_label_pc_a644:                                ; preds = %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge, %dec_label_pc_a638
  %v1_a648 = phi i32 [ %v1_a648.pre, %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge ], [ %v1_a63c, %dec_label_pc_a638 ]
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v9_a648 = icmp eq i32 %v3_a33c, %v1_a648
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a7f8, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge, %dec_label_pc_a644
  %v1_a654 = phi i32 [ %v1_a654.pre, %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge ], [ %v1_a648, %dec_label_pc_a644 ]
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v9_a654 = icmp eq i32 %v6_a1c0, %v1_a654
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_a814, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge, %dec_label_pc_a650
  %v1_a660 = phi i32 [ %v1_a660.pre, %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge ], [ %v1_a654, %dec_label_pc_a650 ]
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v9_a660 = icmp eq i32 %v6_a1dc, %v1_a660
  store i1 %v9_a660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a660, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a668:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a674:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828, %dec_label_pc_a83c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a678 = load i32, i32* @r7, align 4
  %v1_a678 = trunc i32 %v0_a678 to i8
  %v2_a678 = load i32, i32* @r5, align 4
  %v3_a678 = add i32 %v2_a678, 10
  %v4_a678 = inttoptr i32 %v3_a678 to i8*
  store i8 %v1_a678, i8* %v4_a678, align 1
  %v0_a67c = load i32, i32* @r7, align 4
  %v1_a67c = trunc i32 %v0_a67c to i8
  %v2_a67c = load i32, i32* @r5, align 4
  %v3_a67c = add i32 %v2_a67c, 11
  %v4_a67c = inttoptr i32 %v3_a67c to i8*
  store i8 %v1_a67c, i8* %v4_a67c, align 1
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* @r0, align 4
  %v2_a684 = call i32 @function_c690(i32 %v0_a680, i32 20)
  %v3_a684 = trunc i32 %v2_a684 to i8
  %v4_a68824 = udiv i32 %v2_a684, 256
  %v1_a68c = trunc i32 %v4_a68824 to i8
  %v2_a68c = load i32, i32* @r5, align 4
  %v3_a68c = add i32 %v2_a68c, 11
  %v4_a68c = inttoptr i32 %v3_a68c to i8*
  store i8 %v1_a68c, i8* %v4_a68c, align 1
  %v3_a690 = load i32, i32* @r5, align 4
  %v4_a690 = add i32 %v3_a690, 10
  %v5_a690 = inttoptr i32 %v4_a690 to i8*
  store i8 %v3_a684, i8* %v5_a690, align 1
  %v0_a694 = load i32, i32* @r6, align 4
  store i32 %v0_a694, i32* @r1, align 4
  store i32 %v5_a600, i32* %r2.global-to-local, align 4
  %v0_a69c = load i32, i32* @sb, align 4
  store i32 %v0_a69c, i32* %r3.global-to-local, align 4
  %v0_a6a0 = load i32, i32* @r7, align 4
  %v1_a6a0 = trunc i32 %v0_a6a0 to i8
  %v3_a6a0 = add i32 %v0_a694, 16
  %v4_a6a0 = inttoptr i32 %v3_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v4_a6a0, align 1
  %v0_a6a4 = load i32, i32* @r7, align 4
  %v1_a6a4 = trunc i32 %v0_a6a4 to i8
  %v2_a6a4 = load i32, i32* @r6, align 4
  %v3_a6a4 = add i32 %v2_a6a4, 17
  %v4_a6a4 = inttoptr i32 %v3_a6a4 to i8*
  store i8 %v1_a6a4, i8* %v4_a6a4, align 1
  %v0_a6a8 = load i32, i32* @r5, align 4
  %v4_a6ac = call i32 @function_c6ec(i32 %v0_a6a8, i32 %v0_a694, i32 %v5_a600, i32 %v0_a69c)
  %v5_a6ac = trunc i32 %v4_a6ac to i8
  %v4_a6b025 = udiv i32 %v4_a6ac, 256
  %v1_a6b4 = trunc i32 %v4_a6b025 to i8
  %v2_a6b4 = load i32, i32* @r6, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 17
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v3_a6b8 = load i32, i32* @r6, align 4
  %v4_a6b8 = add i32 %v3_a6b8, 16
  %v5_a6b8 = inttoptr i32 %v4_a6b8 to i8*
  store i8 %v5_a6ac, i8* %v5_a6b8, align 1
  %v3_a6bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6bc, i32* %r3.global-to-local, align 4
  %v0_a6c0 = load i32, i32* @r5, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 20
  %v2_a6c0 = inttoptr i32 %v1_a6c0 to i32*
  %v3_a6c0 = load i32, i32* %v2_a6c0, align 4
  %v3_a6c8 = udiv i32 %v3_a6c0, 65536
  store i32 %v3_a6c8, i32* %r2.global-to-local, align 4
  %v5_a6cc = mul i32 %v3_a6bc, 24
  %v1_a6d0 = load i32, i32* @r8, align 4
  %v2_a6d0 = add i32 %v1_a6d0, %v5_a6cc
  store i32 %v2_a6d0, i32* %ip.global-to-local, align 4
  %v3_a6d421 = udiv i32 %v3_a6c0, 16777216
  %v1_a6d8 = trunc i32 %v3_a6d421 to i8
  %v3_a6d8 = add i32 %v2_a6d0, 3
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v1_a6d8, i8* %v4_a6d8, align 1
  %v0_a6dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6dc = trunc i32 %v0_a6dc to i8
  %v2_a6dc = load i32, i32* %ip.global-to-local, align 4
  %v3_a6dc = add i32 %v2_a6dc, 2
  %v4_a6dc = inttoptr i32 %v3_a6dc to i8*
  store i8 %v1_a6dc, i8* %v4_a6dc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r5, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6ec = load i32, i32* @fp, align 4
  store i32 %v0_a6ec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a6f4 = load i32, i32* %ip.global-to-local, align 4
  %v6_a6fc = inttoptr i32 %v0_a6e4 to i32*
  %v7_a6fc = call i32 @function_114ec(i32 %v3_a2e4, i32* %v6_a6fc, i32 %v0_a6ec, i32 16384, i32 %v0_a6f4, i32 16)
  %v3_a700 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a700, i32* %r3.global-to-local, align 4
  store i32 %v1_a0c4, i32* %ip.global-to-local, align 4
  %v1_a708 = add i32 %v3_a700, 1
  %v9_a70c = icmp eq i32 %v1_a0c4, %v1_a708
  store i1 %v9_a70c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a708, i32* %stack_var_-40, align 4
  %v7_a714 = icmp sgt i32 %v1_a0c4, %v1_a708
  br i1 %v7_a714, label %dec_label_pc_a718, label %dec_label_pc_a854

dec_label_pc_a718:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5f0
  %v1_a72c = phi i32 [ %v1_a708, %dec_label_pc_a674 ], [ 0, %dec_label_pc_a5f0 ]
  %v5_a71c = mul i32 %v1_a72c, 24
  %v1_a720 = load i32, i32* @r8, align 4
  %v2_a720 = add i32 %v1_a720, %v5_a71c
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  store i32 %v2_a0f0, i32* %ip.global-to-local, align 4
  %v1_a728 = add i32 %v2_a720, 20
  %v2_a728 = inttoptr i32 %v1_a728 to i8*
  %v3_a728 = load i8, i8* %v2_a728, align 1
  %v4_a728 = zext i8 %v3_a728 to i32
  store i32 %v4_a728, i32* %r2.global-to-local, align 4
  %v4_a72c = mul i32 %v1_a72c, 4
  %v5_a72c = add i32 %v4_a72c, %v2_a0f0
  %v6_a72c = inttoptr i32 %v5_a72c to i32*
  %v7_a72c = load i32, i32* %v6_a72c, align 4
  store i32 %v7_a72c, i32* @r5, align 4
  %v2_a730 = icmp ugt i8 %v3_a728, 30
  %v7_a730 = icmp eq i8 %v3_a728, 31
  store i1 %v7_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = add i32 %v7_a72c, 20
  store i32 %v1_a734, i32* @r6, align 4
  %v2_a738 = xor i1 %v7_a730, true
  %v3_a738 = and i1 %v2_a730, %v2_a738
  br i1 %v3_a738, label %dec_label_pc_a618, label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %dec_label_pc_a718
  %v1_a73c = add i32 %v2_a720, 16
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v0_a740 = call i32 @function_dab8()
  %v3_a744 = load i32, i32* %stack_var_-40, align 4
  %v5_a74c = mul i32 %v3_a744, 24
  %v1_a754 = load i32, i32* @r8, align 4
  %v2_a754 = add i32 %v1_a754, %v5_a74c
  store i32 %v2_a754, i32* %r1.global-to-local, align 4
  %v1_a758 = and i32 %v3_a73c, 65280
  store i32 %v1_a758, i32* %r3.global-to-local, align 4
  %v1_a750 = udiv i32 %v3_a73c, 256
  %v3_a75c = and i32 %v1_a750, 65280
  store i32 %v3_a75c, i32* %r2.global-to-local, align 4
  %v3_a760 = mul i32 %v3_a73c, 16777216
  store i32 %v3_a760, i32* %ip.global-to-local, align 4
  %v1_a764 = add i32 %v2_a754, 20
  %v2_a764 = inttoptr i32 %v1_a764 to i8*
  %v3_a764 = load i8, i8* %v2_a764, align 1
  %v4_a764 = zext i8 %v3_a764 to i32
  store i32 %v4_a764, i32* @lr, align 4
  %v4_a768 = mul nuw nsw i32 %v1_a758, 256
  %v5_a768 = or i32 %v4_a768, %v3_a760
  store i32 %v5_a768, i32* %ip.global-to-local, align 4
  %v2_a770 = call i32 @llvm.bswap.i32(i32 %v3_a73c)
  %v7_a774 = lshr i32 %v0_a740, %v4_a764
  %v8_a774 = add i32 %v7_a774, %v2_a770
  store i32 %v8_a774, i32* %r2.global-to-local, align 4
  %v2_a790 = call i32 @llvm.bswap.i32(i32 %v8_a774)
  store i32 %v2_a790, i32* %r3.global-to-local, align 4
  store i32 %v6_a2c0, i32* %r1.global-to-local, align 4
  store i1 %v7_a61c, i1* %cpsr_z.global-to-local, align 1
  %v1_a79c = load i32, i32* @r5, align 4
  %v2_a79c = add i32 %v1_a79c, 16
  %v3_a79c = inttoptr i32 %v2_a79c to i32*
  store i32 %v2_a790, i32* %v3_a79c, align 4
  br i1 %v2_a61c, label %dec_label_pc_a7a4, label %dec_label_pc_a624

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a73c, %dec_label_pc_a618
  %v0_a7a4 = call i32 @function_dab8()
  store i32 %v3_a334, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_a7b4, i1* %cpsr_z.global-to-local, align 1
  %v1_a7b8 = load i32, i32* @r5, align 4
  %v2_a7b8 = add i32 %v1_a7b8, 12
  %v3_a7b8 = inttoptr i32 %v2_a7b8 to i32*
  store i32 %v0_a7a4, i32* %v3_a7b8, align 4
  br i1 %v9_a7b4, label %dec_label_pc_a7c0, label %dec_label_pc_a7a4.dec_label_pc_a638_crit_edge

dec_label_pc_a7a4.dec_label_pc_a638_crit_edge:    ; preds = %dec_label_pc_a7a4
  %v1_a63c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a638

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a624
  %v0_a7c0 = call i32 @function_dab8()
  %v1_a7c0 = trunc i32 %v0_a7c0 to i8
  %v4_a7c426 = udiv i32 %v0_a7c0, 256
  %v1_a7c8 = trunc i32 %v4_a7c426 to i8
  %v2_a7c8 = load i32, i32* @r5, align 4
  %v3_a7c8 = add i32 %v2_a7c8, 5
  %v4_a7c8 = inttoptr i32 %v3_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v4_a7c8, align 1
  store i32 %v3_a338, i32* %r3.global-to-local, align 4
  %v1_a7d0 = load i32, i32* @r4, align 4
  %v9_a7d0 = icmp eq i32 %v3_a338, %v1_a7d0
  store i1 %v9_a7d0, i1* %cpsr_z.global-to-local, align 1
  %v3_a7d4 = load i32, i32* @r5, align 4
  %v4_a7d4 = add i32 %v3_a7d4, 4
  %v5_a7d4 = inttoptr i32 %v4_a7d4 to i8*
  store i8 %v1_a7c0, i8* %v5_a7d4, align 1
  %v0_a7d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7d8, label %dec_label_pc_a7dc, label %dec_label_pc_a7c0.dec_label_pc_a644_crit_edge

dec_label_pc_a7c0.dec_label_pc_a644_crit_edge:    ; preds = %dec_label_pc_a7c0
  %v1_a648.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a644

dec_label_pc_a7dc:                                ; preds = %dec_label_pc_a7c0, %dec_label_pc_a638
  %v0_a7dc = call i32 @function_dab8()
  %v1_a7dc = trunc i32 %v0_a7dc to i8
  store i32 %v3_a33c, i32* %ip.global-to-local, align 4
  %v4_a7e4 = sdiv i32 %v0_a7dc, 256
  store i32 %v4_a7e4, i32* %r3.global-to-local, align 4
  %v1_a7e8 = load i32, i32* @r4, align 4
  %v9_a7e8 = icmp eq i32 %v3_a33c, %v1_a7e8
  store i1 %v9_a7e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 20
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7dc, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  %v2_a7f0 = load i32, i32* @r6, align 4
  %v3_a7f0 = add i32 %v2_a7f0, 1
  %v4_a7f0 = inttoptr i32 %v3_a7f0 to i8*
  store i8 %v1_a7f0, i8* %v4_a7f0, align 1
  %v0_a7f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7f4, label %dec_label_pc_a7f8, label %dec_label_pc_a7dc.dec_label_pc_a650_crit_edge

dec_label_pc_a7dc.dec_label_pc_a650_crit_edge:    ; preds = %dec_label_pc_a7dc
  %v1_a654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a650

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7dc, %dec_label_pc_a644
  %v0_a7f8 = call i32 @function_dab8()
  %v1_a7f8 = trunc i32 %v0_a7f8 to i8
  store i32 %v6_a1c0, i32* %r1.global-to-local, align 4
  %v4_a800 = sdiv i32 %v0_a7f8, 256
  store i32 %v4_a800, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r4, align 4
  %v9_a804 = icmp eq i32 %v6_a1c0, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  %v1_a808 = trunc i32 %v4_a800 to i8
  %v2_a808 = load i32, i32* @r6, align 4
  %v3_a808 = add i32 %v2_a808, 3
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v3_a80c = load i32, i32* @r6, align 4
  %v4_a80c = add i32 %v3_a80c, 2
  %v5_a80c = inttoptr i32 %v4_a80c to i8*
  store i8 %v1_a7f8, i8* %v5_a80c, align 1
  %v0_a810 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a810, label %dec_label_pc_a814, label %dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge

dec_label_pc_a7f8.dec_label_pc_a65c_crit_edge:    ; preds = %dec_label_pc_a7f8
  %v1_a660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a65c

dec_label_pc_a814:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a650
  %v0_a814 = call i32 @function_dab8()
  store i32 %v6_a1dc, i32* %r2.global-to-local, align 4
  %v1_a81c = load i32, i32* @r4, align 4
  %v9_a81c = icmp eq i32 %v6_a1dc, %v1_a81c
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  %v1_a820 = load i32, i32* @r6, align 4
  %v2_a820 = add i32 %v1_a820, 4
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  store i32 %v0_a814, i32* %v3_a820, align 4
  br i1 %v9_a81c, label %dec_label_pc_a828, label %dec_label_pc_a668

dec_label_pc_a828:                                ; preds = %dec_label_pc_a814, %dec_label_pc_a65c
  %v0_a828 = call i32 @function_dab8()
  store i32 %v1_a2ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a830, i1* %cpsr_z.global-to-local, align 1
  %v1_a834 = load i32, i32* @r6, align 4
  %v2_a834 = add i32 %v1_a834, 8
  %v3_a834 = inttoptr i32 %v2_a834 to i32*
  store i32 %v0_a828, i32* %v3_a834, align 4
  br i1 %v2_a830, label %dec_label_pc_a674, label %dec_label_pc_a83c

dec_label_pc_a83c:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a828
  %v0_a83c = load i32, i32* @r5, align 4
  %v1_a83c = add i32 %v0_a83c, 40
  store i32 %v1_a83c, i32* @r4, align 4
  %v0_a844 = load i32, i32* @sl, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  %v2_a848 = call i32 @function_db6c(i32 %v1_a83c, i32 %v0_a844)
  %v0_a84c = load i32, i32* @r7, align 4
  %v1_a84c = trunc i32 %v0_a84c to i8
  %v2_a84c = load i32, i32* @r4, align 4
  %v3_a84c = load i32, i32* @sl, align 4
  %v4_a84c = add i32 %v3_a84c, %v2_a84c
  %v5_a84c = inttoptr i32 %v4_a84c to i8*
  store i8 %v1_a84c, i8* %v5_a84c, align 1
  br label %dec_label_pc_a674

dec_label_pc_a854:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a5dc
  %v2_a858 = call i32 @function_10f4c(i32* null)
  store i32 %v2_a2d0, i32* %r1.global-to-local, align 4
  %v9_a860 = icmp eq i32 %v2_a2d0, %v2_a858
  store i1 %v9_a860, i1* %cpsr_z.global-to-local, align 1
  %v6_a864 = icmp slt i32 %v2_a2d0, %v2_a858
  br i1 %v6_a864, label %dec_label_pc_a868, label %dec_label_pc_a5dc

dec_label_pc_a868:                                ; preds = %dec_label_pc_a854, %dec_label_pc_a0c0, %dec_label_pc_a870
  %v29_a86c = phi i32 [ %v3_a2e4, %dec_label_pc_a0c0 ], [ %v1_a874, %dec_label_pc_a870 ], [ %v2_a858, %dec_label_pc_a854 ]
  store i32 %v18_a0c0, i32* %sb.global-to-local, align 4
  store i32 %v24_a0c0, i32* %fp.global-to-local, align 4
  ret i32 %v29_a86c

dec_label_pc_a870:                                ; preds = %dec_label_pc_a2f4
  %v1_a874 = call i32 @function_10c7c(i32 %v3_a2e4)
  br label %dec_label_pc_a868

; uselistorder directives
  uselistorder i32 %v4_a800, { 1, 0 }
  uselistorder i32 %v2_a790, { 1, 0 }
  uselistorder i32 %v3_a760, { 1, 0 }
  uselistorder i32 %v3_a73c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a708, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a694, { 1, 0, 2 }
  uselistorder i32 %v1_a5f0, { 1, 0, 2 }
  uselistorder i1 %v2_a830, { 2, 3, 1, 0 }
  uselistorder i1 %v9_a7b4, { 2, 3, 1, 0 }
  uselistorder i1 %v7_a61c, { 2, 1, 0 }
  uselistorder i32 %v1_a5cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a404, { 1, 0 }
  uselistorder i32 %v3_a3fc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a3f8, { 0, 2, 1 }
  uselistorder i32 %v1_a3f4, { 1, 2, 0 }
  uselistorder i32 %v1_a3f0, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_a3c4, { 1, 0 }
  uselistorder i32 %v1_a3c0, { 1, 0 }
  uselistorder i32 %v1_a3bc, { 1, 0 }
  uselistorder i32 %v1_a3b8, { 1, 0 }
  uselistorder i32 %v1_a388, { 2, 0, 1 }
  uselistorder i32 %v1_a370, { 1, 0 }
  uselistorder i1 %v2_a340, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a334, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a32c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a314, { 1, 0 }
  uselistorder i1 %v7_a2e8, { 1, 0 }
  uselistorder i32 %v3_a2e4, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_a2d0, { 2, 1, 0 }
  uselistorder i32 %v6_a2c0, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_a2ac, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a1dc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a1c0, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_a170, { 1, 2, 0 }
  uselistorder i32 %v6_a144, { 2, 1, 3, 0 }
  uselistorder i32 %v7_a12c, { 0, 2, 1, 3 }
  uselistorder i32 %v6_a108, { 1, 2, 0 }
  uselistorder i32 %v2_a0f0, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_a0c4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 28, 29, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_a868, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a83c, { 1, 0 }
  uselistorder label %dec_label_pc_a674, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a5dc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_a880(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a880:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a880 = load i32, i32* @r4, align 4
  %v12_a880 = load i32, i32* @r7, align 4
  %v1_a884 = urem i32 %arg2, 256
  store i32 %v1_a884, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_a884, i32* %r0.global-to-local, align 4
  %v1_a89c = urem i32 %arg4, 256
  store i32 %v1_a89c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a8ac = call i32 @function_1183c(i32 %v1_a884, i32 4)
  %v0_a8b0 = load i32, i32* @r5, align 4
  store i32 %v0_a8b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* @r7, align 4
  store i32 %v0_a8b8, i32* %r3.global-to-local, align 4
  store i32 %v2_a8ac, i32* %sb.global-to-local, align 4
  %v0_a8c0 = load i32, i32* @r4, align 4
  store i32 %v0_a8c0, i32* %r0.global-to-local, align 4
  %v5_a8c4 = inttoptr i32 %v0_a8b0 to i32*
  %v6_a8c4 = call i32 @function_829c(i32 %v0_a8c0, i32* %v5_a8c4, i32 2, i32 %v0_a8b8, i32 ptrtoint (i32* @0 to i32))
  %v1_a8d0 = urem i32 %v6_a8c4, 256
  store i32 %v1_a8d0, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8dc = load i32, i32* @r5, align 4
  store i32 %v0_a8dc, i32* %r1.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r4, align 4
  store i32 %v0_a8e0, i32* %r0.global-to-local, align 4
  %v5_a8e4 = trunc i32 %v6_a8c4 to i8
  %v6_a8e8 = inttoptr i32 %v0_a8dc to i32*
  %v7_a8e8 = call i32 @function_829c(i32 %v0_a8e0, i32* %v6_a8e8, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a8c4)
  %v0_a8ec = load i32, i32* @r5, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r4, align 4
  store i32 %v0_a8fc, i32* %r0.global-to-local, align 4
  %v5_a900 = inttoptr i32 %v0_a8ec to i32*
  %v6_a900 = call i32 @function_829c(i32 %v0_a8fc, i32* %v5_a900, i32 4, i32 64, i32 %v7_a8e8)
  %v1_a908 = urem i32 %v6_a900, 256
  store i32 %v1_a908, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r5, align 4
  store i32 %v0_a90c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a918 = load i32, i32* @r4, align 4
  store i32 %v0_a918, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_a900, 16777216
  %v5_a920 = sdiv i32 %sext9, 16777216
  %v6_a920 = inttoptr i32 %v0_a90c to i32*
  %v7_a920 = call i32 @function_829c(i32 %v0_a918, i32* %v6_a920, i32 5, i32 1, i32 %v5_a920)
  %v1_a92c = urem i32 %v7_a920, 256
  store i32 %v1_a92c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a938 = load i32, i32* @r5, align 4
  store i32 %v0_a938, i32* %r1.global-to-local, align 4
  %v0_a93c = load i32, i32* @r4, align 4
  store i32 %v0_a93c, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a938 to i32*
  %v6_a944 = call i32 @function_829c(i32 %v0_a93c, i32* %v5_a944, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_a92c)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r4, align 4
  store i32 %v0_a95c, i32* %r0.global-to-local, align 4
  %v5_a960 = inttoptr i32 %v0_a950 to i32*
  %v6_a960 = call i32 @function_829c(i32 %v0_a95c, i32* %v5_a960, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a944)
  %v0_a96c = load i32, i32* @r5, align 4
  store i32 %v0_a96c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v5_a97c = inttoptr i32 %v0_a96c to i32*
  %v6_a97c = call i32 @function_829c(i32 %v0_a978, i32* %v5_a97c, i32 16, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_a960)
  %v0_a980 = load i32, i32* @r5, align 4
  store i32 %v0_a980, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a98c = load i32, i32* @r7, align 4
  store i32 %v0_a98c, i32* %r3.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v5_a994 = inttoptr i32 %v0_a980 to i32*
  %v6_a994 = call i32 @function_829c(i32 %v0_a990, i32* %v5_a994, i32 17, i32 %v0_a98c, i32 %v6_a97c)
  %v0_a998 = load i32, i32* @r5, align 4
  store i32 %v0_a998, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a9a4 = load i32, i32* @r7, align 4
  store i32 %v0_a9a4, i32* %r3.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r4, align 4
  store i32 %v0_a9a8, i32* %r0.global-to-local, align 4
  %v5_a9ac = inttoptr i32 %v0_a998 to i32*
  %v6_a9ac = call i32 @function_829c(i32 %v0_a9a8, i32* %v5_a9ac, i32 10, i32 %v0_a9a4, i32 %v6_a994)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r7, align 4
  store i32 %v0_a9bc, i32* %r3.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r4, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_829c(i32 %v0_a9c0, i32* %v5_a9c4, i32 11, i32 %v0_a9bc, i32 %v6_a9ac)
  %v0_a9c8 = load i32, i32* @r5, align 4
  store i32 %v0_a9c8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a9d4 = load i32, i32* @r7, align 4
  store i32 %v0_a9d4, i32* %r3.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r4, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  %v5_a9dc = inttoptr i32 %v0_a9c8 to i32*
  %v6_a9dc = call i32 @function_829c(i32 %v0_a9d8, i32* %v5_a9dc, i32 12, i32 %v0_a9d4, i32 %v6_a9c4)
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a9ec = load i32, i32* @r7, align 4
  store i32 %v0_a9ec, i32* %r3.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r4, align 4
  store i32 %v0_a9f0, i32* %r0.global-to-local, align 4
  %v5_a9f4 = inttoptr i32 %v0_a9e0 to i32*
  %v6_a9f4 = call i32 @function_829c(i32 %v0_a9f0, i32* %v5_a9f4, i32 13, i32 %v0_a9ec, i32 %v6_a9dc)
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa0c = inttoptr i32 %v0_a9f8 to i32*
  %v6_aa0c = call i32 @function_829c(i32 %v0_aa08, i32* %v5_aa0c, i32 14, i32 1, i32 %v6_a9f4)
  %v0_aa10 = load i32, i32* @r5, align 4
  store i32 %v0_aa10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_aa1c = load i32, i32* @r7, align 4
  store i32 %v0_aa1c, i32* %r3.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  store i32 %v0_aa20, i32* %r0.global-to-local, align 4
  %v5_aa24 = inttoptr i32 %v0_aa10 to i32*
  %v6_aa24 = call i32 @function_829c(i32 %v0_aa20, i32* %v5_aa24, i32 15, i32 %v0_aa1c, i32 %v6_aa0c)
  %v0_aa2c = load i32, i32* @r5, align 4
  store i32 %v0_aa2c, i32* %r1.global-to-local, align 4
  %v2_aa30 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_aa30, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r4, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  %v5_aa40 = inttoptr i32 %v0_aa2c to i32*
  %v6_aa40 = call i32 @function_8230(i32 %v0_aa3c, i32* %v5_aa40, i32 19, i32 %v2_aa30, i32 %v6_aa24)
  %v0_aa48 = load i32, i32* @r7, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v1_aa4c = inttoptr i32 %v0_aa48 to i32*
  %v2_aa4c = call i32 @function_10f4c(i32* %v1_aa4c)
  %v1_aa50 = load i32, i32* @r6, align 4
  %v2_aa50 = add i32 %v1_aa50, %v2_aa4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa64 = call i32 @function_11550(i32 2, i32 3, i32 6)
  store i32 %v3_aa64, i32* %r0.global-to-local, align 4
  %v7_aa68 = icmp eq i32 %v3_aa64, -1
  store i1 %v7_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aa64, i32* %sl.global-to-local, align 4
  br i1 %v7_aa68, label %dec_label_pc_afe8, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_a880
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa7c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_aa84 = load i32, i32* @r7, align 4
  store i32 %v0_aa84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa90 = call i32 @function_11520(i32 %v3_aa64, i32 %v0_aa84, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_aa90, i32* %r0.global-to-local, align 4
  %v7_aa94 = icmp eq i32 %v6_aa90, -1
  store i1 %v7_aa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa94, label %dec_label_pc_aff0, label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa74
  %v3_aaa0 = mul i32 %v7_a8e8, 65536
  store i32 %v3_aaa0, i32* @r4, align 4
  %v3_aaac = urem i32 %v7_a8e8, 65536
  %v3_aab8 = mul i32 %v6_a944, 65536
  store i32 %v3_aab8, i32* %r0.global-to-local, align 4
  %v3_aac0 = urem i32 %v6_a944, 65536
  store i32 %v3_aac0, i32* %r2.global-to-local, align 4
  %v3_aac4 = urem i32 %v6_a960, 65536
  store i32 %v3_aac4, i32* %r3.global-to-local, align 4
  %v1_aac8 = urem i32 %v6_a9ac, 256
  store i32 %v1_aac8, i32* %ip.global-to-local, align 4
  %v0_aacc = load i32, i32* %fp.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v0_aacc, 0
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %v0_aad0 = load i32, i32* @r7, align 4
  store i32 %v0_aad0, i32* %stack_var_-40, align 4
  %tmp68 = icmp slt i32 %v0_aacc, 1
  br i1 %tmp68, label %dec_label_pc_ad88.preheader, label %dec_label_pc_aae4

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa9c
  %v1_aafc = urem i32 %v6_a960, 256
  %tmp69 = udiv i32 %v6_a944, 256
  %tmp70 = mul i32 %v6_a97c, 256
  %v1_ab14 = and i32 %tmp70, 65280
  %tmp72 = udiv i32 %v6_a97c, 256
  %v4_ab24 = urem i32 %tmp72, 256
  %v5_ab24 = or i32 %v4_ab24, %v1_ab14
  store i32 %v5_ab24, i32* @lr, align 4
  %v1_ab30 = urem i32 %v6_a9ac, 2
  %v1_ab38 = urem i32 %v6_a9c4, 2
  %v1_ab3c = urem i32 %v6_a9dc, 2
  %v1_ab40 = urem i32 %v6_a9f4, 2
  %v3_ab4c = mul nuw nsw i32 %v1_aafc, 256
  store i32 %v3_ab4c, i32* %r1.global-to-local, align 4
  %v3_ab64 = sdiv i32 %v3_aaa0, 16777216
  %sext10 = mul i32 %tmp69, 16777216
  %v7_ab64 = sdiv i32 %sext10, 16777216
  %tmp73 = udiv i32 %v6_a960, 256
  %v4_ab68 = urem i32 %tmp73, 256
  %v5_ab68 = or i32 %v4_ab68, %v3_ab4c
  store i32 %v5_ab68, i32* @r6, align 4
  %v1_ab6c = urem i32 %v6_aa0c, 2
  %v1_ab74 = urem i32 %v6_aa24, 2
  store i32 %v1_ab74, i32* %r0.global-to-local, align 4
  %v3_ab78 = ashr i32 %v3_aaa0, 31
  store i32 %v3_ab78, i32* %r2.global-to-local, align 4
  %v3_ab7c = ashr i32 %sext10, 31
  store i32 %v3_ab7c, i32* %r3.global-to-local, align 4
  store i32 %v1_aafc, i32* %ip.global-to-local, align 4
  %v5_ab90 = trunc i32 %v3_ab7c to i8
  store i32 %v0_aad0, i32* @r4, align 4
  store i32 %v0_aad0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %tmp = sub nsw i32 0, %v1_ab30
  %v4_ac58 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_ab38
  %v4_ac6c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_ab3c
  %v4_ac80 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_ab40
  %v4_ac94 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_ab6c
  %v3_aca8 = and i32 %tmp80, 2
  %sext8 = mul i32 %v6_a960, 16777216
  %v7_acd8 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_aba4

dec_label_pc_aba4:                                ; preds = %bb75, %dec_label_pc_aae4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_abac = call i32 @function_1183c(i32 128, i32 1)
  store i32 %v2_abac, i32* %r0.global-to-local, align 4
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r2.global-to-local, align 4
  %v1_abb4 = load i32, i32* %sb.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r4, align 4
  %v5_abb4 = mul i32 %v2_abb4, 4
  %v6_abb4 = add i32 %v5_abb4, %v1_abb4
  %v7_abb4 = inttoptr i32 %v6_abb4 to i32*
  store i32 %v2_abac, i32* %v7_abb4, align 4
  %v0_abb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_abb8 = load i32, i32* %r2.global-to-local, align 4
  %v4_abb8 = mul i32 %v1_abb8, 4
  %v5_abb8 = add i32 %v4_abb8, %v0_abb8
  %v6_abb8 = inttoptr i32 %v5_abb8 to i32*
  %v7_abb8 = load i32, i32* %v6_abb8, align 4
  store i32 %v7_abb8, i32* %r4.global-to-local, align 4
  %v1_abbc = inttoptr i32 %v7_abb8 to i8*
  %v2_abbc = load i8, i8* %v1_abbc, align 1
  %tmp81 = urem i8 %v2_abbc, 16
  %v1_abc0 = zext i8 %tmp81 to i32
  %v1_abc4 = or i32 %v1_abc0, 64
  store i32 %v1_abc4, i32* %r3.global-to-local, align 4
  %v1_abc8 = trunc i32 %v1_abc4 to i8
  store i8 %v1_abc8, i8* %v1_abbc, align 1
  %v0_abcc = load i32, i32* %r4.global-to-local, align 4
  %v1_abcc = inttoptr i32 %v0_abcc to i8*
  %v2_abcc = load i8, i8* %v1_abcc, align 1
  %v1_abd0 = and i8 %v2_abcc, -16
  %v1_abd4 = or i8 %v1_abd0, 5
  store i32 %v1_a92c, i32* %r0.global-to-local, align 4
  store i8 %v1_abd4, i8* %v1_abcc, align 1
  %v2_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abe4 = add i32 %v2_abe4, 1
  %v4_abe4 = inttoptr i32 %v3_abe4 to i8*
  store i8 %v5_a8e4, i8* %v4_abe4, align 1
  %v0_abe8 = load i32, i32* %r0.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v0_abe8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a920, i32* %r0.global-to-local, align 4
  %v2_abf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf4 = add i32 %v2_abf4, 3
  %v4_abf4 = inttoptr i32 %v3_abf4 to i8*
  store i8 60, i8* %v4_abf4, align 1
  store i32 %v3_ab78, i32* %ip.global-to-local, align 4
  store i32 %v3_ab64, i32* %r3.global-to-local, align 4
  %v0_ac00 = load i32, i32* %r0.global-to-local, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v2_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac00 = add i32 %v2_ac00, 8
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r7, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v2_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac04 = add i32 %v2_ac04, 9
  %v4_ac04 = inttoptr i32 %v3_ac04 to i8*
  store i8 %v1_ac04, i8* %v4_ac04, align 1
  %v3_ac08 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac08, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i8
  %v2_ac0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac0c = add i32 %v2_ac0c, 4
  %v4_ac0c = inttoptr i32 %v3_ac0c to i8*
  store i8 %v1_ac0c, i8* %v4_ac0c, align 1
  %v0_ac10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_aba4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac14 = add i32 %v3_ac14, 6
  %v5_ac14 = inttoptr i32 %v4_ac14 to i8*
  store i8 64, i8* %v5_ac14, align 1
  %v0_ac34.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_aba4, %bb
  %v0_ac34 = phi i1 [ true, %dec_label_pc_aba4 ], [ %v0_ac34.pre, %bb ]
  %v0_ac18 = load i32, i32* %r2.global-to-local, align 4
  %v5_ac1c = mul i32 %v0_ac18, 24
  store i32 %v5_ac1c, i32* %r3.global-to-local, align 4
  store i32 %v6_aa40, i32* %r2.global-to-local, align 4
  %v1_ac24 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac24 = add i32 %v1_ac24, 12
  %v3_ac24 = inttoptr i32 %v2_ac24 to i32*
  store i32 %v6_aa40, i32* %v3_ac24, align 4
  %v0_ac28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac28 = load i32, i32* @r8, align 4
  %v2_ac28 = add i32 %v1_ac28, %v0_ac28
  store i32 %v2_ac28, i32* %r3.global-to-local, align 4
  %v1_ac2c = add i32 %v2_ac28, 16
  %v2_ac2c = inttoptr i32 %v1_ac2c to i32*
  %v3_ac2c = load i32, i32* %v2_ac2c, align 4
  store i32 %v3_ac2c, i32* %r2.global-to-local, align 4
  store i32 %v7_ab64, i32* %r3.global-to-local, align 4
  br i1 %v0_ac34, label %bb75, label %bb74

bb74:                                             ; preds = %.thread
  %v1_ac34 = load i32, i32* @r5, align 4
  %v2_ac34 = trunc i32 %v1_ac34 to i8
  %v3_ac34 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac34 = add i32 %v3_ac34, 7
  %v5_ac34 = inttoptr i32 %v4_ac34 to i8*
  store i8 %v2_ac34, i8* %v5_ac34, align 1
  br label %bb75

bb75:                                             ; preds = %.thread, %bb74
  %v0_ac38 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac38 = add i32 %v2_ac38, 5
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  %v1_ac3c = trunc i32 %v0_ac3c to i8
  %v2_ac3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac3c = add i32 %v2_ac3c, 2
  %v4_ac3c = inttoptr i32 %v3_ac3c to i8*
  store i8 %v1_ac3c, i8* %v4_ac3c, align 1
  %v0_ac40 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac40 = add i32 %v1_ac40, 16
  %v3_ac40 = inttoptr i32 %v2_ac40 to i32*
  store i32 %v0_ac40, i32* %v3_ac40, align 4
  %v0_ac44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v0_ac44 to i8
  %v2_ac44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac44 = add i32 %v2_ac44, 20
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v1_ac44, i8* %v4_ac44, align 1
  %v0_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac48 = add i32 %v0_ac48, 20
  store i32 %v1_ac48, i32* %r1.global-to-local, align 4
  %v1_ac4c = add i32 %v0_ac48, 33
  %v2_ac4c = inttoptr i32 %v1_ac4c to i8*
  %v3_ac4c = load i8, i8* %v2_ac4c, align 1
  %v4_ac4c = zext i8 %v3_ac4c to i32
  store i32 %v1_ab30, i32* %ip.global-to-local, align 4
  %v1_ac54 = and i32 %v4_ac4c, 223
  %v5_ac58 = or i32 %v1_ac54, %v4_ac58
  store i32 %v5_ac58, i32* %r3.global-to-local, align 4
  %v1_ac5c = trunc i32 %v5_ac58 to i8
  store i8 %v1_ac5c, i8* %v2_ac4c, align 1
  %v0_ac60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac60 = add i32 %v0_ac60, 13
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab38, i32* %r0.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 239
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r2.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab3c, i32* %r2.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 247
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r3.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab40, i32* %r3.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 251
  %v5_ac94 = or i32 %v1_ac90, %v4_ac94
  store i32 %v5_ac94, i32* %r2.global-to-local, align 4
  %v1_ac98 = trunc i32 %v5_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab6c, i32* %ip.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 253
  %v4_aca8 = or i32 %v1_aca4, %v3_aca8
  store i32 %v4_aca8, i32* %r3.global-to-local, align 4
  %v1_acac = trunc i32 %v4_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb0 = add i32 %v0_acb0, 12
  %v2_acb0 = inttoptr i32 %v1_acb0 to i8*
  %v3_acb0 = load i8, i8* %v2_acb0, align 1
  %v4_acb0 = zext i8 %v3_acb0 to i32
  store i32 %v4_acb0, i32* %r2.global-to-local, align 4
  %v1_acb4 = add i32 %v0_acb0, 13
  %v2_acb4 = inttoptr i32 %v1_acb4 to i8*
  %v3_acb4 = load i8, i8* %v2_acb4, align 1
  %v4_acb4 = zext i8 %v3_acb4 to i32
  %tmp82 = urem i8 %v3_acb0, 16
  %v1_acbc = zext i8 %tmp82 to i32
  %v1_acc0 = and i32 %v4_acb4, 254
  %v2_acc4 = or i32 %v1_acc0, %v1_ab74
  %v1_acc8 = or i32 %v1_acbc, 160
  store i32 %v1_acc8, i32* %r2.global-to-local, align 4
  %v1_accc = trunc i32 %v2_acc4 to i8
  store i8 %v1_accc, i8* %v2_acb4, align 1
  %v0_acd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_acd0 = add i32 %v2_acd0, 12
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  store i32 %v7_acd8, i32* %r3.global-to-local, align 4
  store i32 %v5_ab24, i32* %ip.global-to-local, align 4
  %v2_ace0 = load i32, i32* %r1.global-to-local, align 4
  %v3_ace0 = add i32 %v2_ace0, 1
  %v4_ace0 = inttoptr i32 %v3_ace0 to i8*
  store i8 %v5_ab90, i8* %v4_ace0, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_acec = load i32, i32* %r3.global-to-local, align 4
  %v1_acec = trunc i32 %v0_acec to i8
  %v2_acec = load i32, i32* %r1.global-to-local, align 4
  %v3_acec = add i32 %v2_acec, 3
  %v4_acec = inttoptr i32 %v3_acec to i8*
  store i8 %v1_acec, i8* %v4_acec, align 1
  %v0_acf0 = load i32, i32* %ip.global-to-local, align 4
  %v1_acf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_acf0 = add i32 %v1_acf0, 4
  %v3_acf0 = inttoptr i32 %v2_acf0 to i32*
  store i32 %v0_acf0, i32* %v3_acf0, align 4
  %v0_acf4 = load i32, i32* @r6, align 4
  %v1_acf4 = trunc i32 %v0_acf4 to i8
  %v2_acf4 = load i32, i32* %r1.global-to-local, align 4
  %v3_acf4 = add i32 %v2_acf4, 2
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v1_acf4, i8* %v4_acf4, align 1
  %v0_acf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_acf8 = trunc i32 %v0_acf8 to i8
  %v2_acf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_acf8 = add i32 %v2_acf8, 41
  %v4_acf8 = inttoptr i32 %v3_acf8 to i8*
  store i8 %v1_acf8, i8* %v4_acf8, align 1
  %v0_acfc = load i32, i32* %r0.global-to-local, align 4
  %v1_acfc = trunc i32 %v0_acfc to i8
  %v2_acfc = load i32, i32* %r4.global-to-local, align 4
  %v3_acfc = add i32 %v2_acfc, 40
  %v4_acfc = inttoptr i32 %v3_acfc to i8*
  store i8 %v1_acfc, i8* %v4_acfc, align 1
  %v0_ad00 = call i32 @function_dab8()
  %v1_ad04 = urem i32 %v0_ad00, 16
  %v1_ad08 = or i32 %v1_ad04, 1392
  %v1_ad0c = add nuw nsw i32 %v1_ad08, 8
  %v3_ad10 = mul nuw nsw i32 %v1_ad0c, 65536
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v3_ad14 = mul nuw nsw i32 %v1_ad0c, 256
  %v1_ad18 = and i32 %v3_ad14, 65280
  %v5_ad1c = or i32 %v1_ad18, 5
  store i32 %v5_ad1c, i32* %r3.global-to-local, align 4
  %v2_ad20 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad20 = add i32 %v2_ad20, 42
  %v4_ad20 = inttoptr i32 %v3_ad20 to i8*
  store i8 5, i8* %v4_ad20, align 1
  %v0_ad24 = load i32, i32* %r3.global-to-local, align 4
  %v3_ad24 = sdiv i32 %v0_ad24, 256
  store i32 %v3_ad24, i32* %r1.global-to-local, align 4
  %v0_ad28 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_ad30 = trunc i32 %v3_ad24 to i8
  %v3_ad30 = add i32 %v0_ad28, 43
  %v4_ad30 = inttoptr i32 %v3_ad30 to i8*
  store i8 %v1_ad30, i8* %v4_ad30, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_ad38 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad38 = trunc i32 %v0_ad38 to i8
  %v2_ad38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad38 = add i32 %v2_ad38, 46
  %v4_ad38 = inttoptr i32 %v3_ad38 to i8*
  store i8 %v1_ad38, i8* %v4_ad38, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad44 = add i32 %v2_ad44, 47
  %v4_ad44 = inttoptr i32 %v3_ad44 to i8*
  store i8 10, i8* %v4_ad44, align 1
  %v0_ad48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad48 = trunc i32 %v0_ad48 to i8
  %v2_ad48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad48 = add i32 %v2_ad48, 44
  %v4_ad48 = inttoptr i32 %v3_ad48 to i8*
  store i8 %v1_ad48, i8* %v4_ad48, align 1
  %v0_ad4c = load i32, i32* %ip.global-to-local, align 4
  %v1_ad4c = trunc i32 %v0_ad4c to i8
  %v2_ad4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad4c = add i32 %v2_ad4c, 45
  %v4_ad4c = inttoptr i32 %v3_ad4c to i8*
  store i8 %v1_ad4c, i8* %v4_ad4c, align 1
  %v0_ad50 = call i32 @function_dab8()
  store i32 %v0_ad50, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ad5c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad5c = add i32 %v1_ad5c, 48
  %v3_ad5c = inttoptr i32 %v2_ad5c to i32*
  store i32 %v0_ad50, i32* %v3_ad5c, align 4
  %v0_ad60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad60 = trunc i32 %v0_ad60 to i8
  %v2_ad60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad60 = add i32 %v2_ad60, 56
  %v4_ad60 = inttoptr i32 %v3_ad60 to i8*
  store i8 %v1_ad60, i8* %v4_ad60, align 1
  %v0_ad64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad64 = trunc i32 %v0_ad64 to i8
  %v2_ad64 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad64 = add i32 %v2_ad64, 58
  %v4_ad64 = inttoptr i32 %v3_ad64 to i8*
  store i8 %v1_ad64, i8* %v4_ad64, align 1
  %v0_ad68 = load i32, i32* @r7, align 4
  %v1_ad68 = trunc i32 %v0_ad68 to i8
  %v2_ad68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad68 = add i32 %v2_ad68, 59
  %v4_ad68 = inttoptr i32 %v3_ad68 to i8*
  store i8 %v1_ad68, i8* %v4_ad68, align 1
  %v0_ad6c = load i32, i32* @r5, align 4
  %v1_ad6c = load i32, i32* %r4.global-to-local, align 4
  %v2_ad6c = add i32 %v1_ad6c, 52
  %v3_ad6c = inttoptr i32 %v2_ad6c to i32*
  store i32 %v0_ad6c, i32* %v3_ad6c, align 4
  %v0_ad70 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad70 = trunc i32 %v0_ad70 to i8
  %v2_ad70 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad70 = add i32 %v2_ad70, 57
  %v4_ad70 = inttoptr i32 %v3_ad70 to i8*
  store i8 %v1_ad70, i8* %v4_ad70, align 1
  %v3_ad74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad74, i32* %r3.global-to-local, align 4
  %v1_ad78 = add i32 %v3_ad74, 1
  store i32 %v1_ad78, i32* @r4, align 4
  %v0_ad7c = load i32, i32* %fp.global-to-local, align 4
  %v9_ad7c = icmp eq i32 %v0_ad7c, %v1_ad78
  store i1 %v9_ad7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad78, i32* %stack_var_-40, align 4
  %v8_ad84 = icmp sgt i32 %v0_ad7c, %v1_ad78
  br i1 %v8_ad84, label %dec_label_pc_aba4, label %dec_label_pc_ad88.preheader

dec_label_pc_ad88.preheader:                      ; preds = %bb75, %dec_label_pc_aa9c
  %v0_ad8c13 = phi i32 [ %v0_aacc, %dec_label_pc_aa9c ], [ %v0_ad7c, %bb75 ]
  %v2_ada8 = icmp eq i32 %v6_aa40, -1
  %v7_ada8 = icmp eq i32 %v6_aa40, -1
  %v9_af38 = icmp eq i32 %v3_aaac, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_afb4 = icmp eq i32 %v1_aac8, 0
  br label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge, %dec_label_pc_ad88.preheader
  %v0_ad8c = phi i32 [ %v0_ad8c.pre, %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge ], [ %v0_ad8c13, %dec_label_pc_ad88.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ad8c = icmp eq i32 %v0_ad8c, 0
  store i1 %v2_ad8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_ad8c, 1
  br i1 %tmp76, label %dec_label_pc_afd4, label %dec_label_pc_ad98

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_aea0

dec_label_pc_ada4:                                ; preds = %dec_label_pc_aea0
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_adb0:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_af38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af38, label %dec_label_pc_af44, label %dec_label_pc_adc4

dec_label_pc_adc4:                                ; preds = %dec_label_pc_af28.dec_label_pc_adc4_crit_edge, %dec_label_pc_adb0
  %v1_adc8 = phi i32 [ %v1_adc8.pre, %dec_label_pc_af28.dec_label_pc_adc4_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_adb0 ]
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v9_adc8 = icmp eq i32 %v3_aac0, %v1_adc8
  store i1 %v9_adc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adc8, label %dec_label_pc_af60, label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_af44.dec_label_pc_add0_crit_edge, %dec_label_pc_adc4
  %v1_add4 = phi i32 [ %v1_add4.pre, %dec_label_pc_af44.dec_label_pc_add0_crit_edge ], [ %v1_adc8, %dec_label_pc_adc4 ]
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v9_add4 = icmp eq i32 %v3_aac4, %v1_add4
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af7c, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_af60.dec_label_pc_addc_crit_edge, %dec_label_pc_add0
  %v1_ade0 = phi i32 [ %v1_ade0.pre, %dec_label_pc_af60.dec_label_pc_addc_crit_edge ], [ %v1_add4, %dec_label_pc_add0 ]
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v9_ade0 = icmp eq i32 %v6_a97c, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ade0, label %dec_label_pc_af98, label %dec_label_pc_ade8

dec_label_pc_ade8:                                ; preds = %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge, %dec_label_pc_addc
  %v1_adec = phi i32 [ %v1_adec.pre, %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge ], [ %v1_ade0, %dec_label_pc_addc ]
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v9_adec = icmp eq i32 %v6_a994, %v1_adec
  store i1 %v9_adec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adec, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_adf4:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_ae00:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac, %dec_label_pc_afc0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae04 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* @r5, align 4
  %v3_ae04 = add i32 %v2_ae04, 10
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* @r5, align 4
  store i32 %v0_ae0c, i32* @r0, align 4
  %v2_ae10 = call i32 @function_c690(i32 %v0_ae0c, i32 20)
  %v3_ae10 = trunc i32 %v2_ae10 to i8
  %v4_ae1421 = udiv i32 %v2_ae10, 256
  %v1_ae18 = trunc i32 %v4_ae1421 to i8
  %v2_ae18 = load i32, i32* @r5, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v3_ae1c = load i32, i32* @r5, align 4
  %v4_ae1c = add i32 %v3_ae1c, 10
  %v5_ae1c = inttoptr i32 %v4_ae1c to i8*
  store i8 %v3_ae10, i8* %v5_ae1c, align 1
  %v0_ae20 = load i32, i32* @r6, align 4
  store i32 %v0_ae20, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ae2c = load i32, i32* %r7.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v3_ae2c = add i32 %v0_ae20, 16
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae30 = trunc i32 %v0_ae30 to i8
  %v2_ae30 = load i32, i32* @r6, align 4
  %v3_ae30 = add i32 %v2_ae30, 17
  %v4_ae30 = inttoptr i32 %v3_ae30 to i8*
  store i8 %v1_ae30, i8* %v4_ae30, align 1
  %v0_ae34 = load i32, i32* @r5, align 4
  store i32 %v0_ae34, i32* %r0.global-to-local, align 4
  %v4_ae38 = call i32 @function_c6ec(i32 %v0_ae34, i32 %v0_ae20, i32 10240, i32 40)
  %v5_ae38 = trunc i32 %v4_ae38 to i8
  store i32 %v4_ae38, i32* %r0.global-to-local, align 4
  %v4_ae3c22 = udiv i32 %v4_ae38, 256
  %v1_ae40 = trunc i32 %v4_ae3c22 to i8
  %v2_ae40 = load i32, i32* @r6, align 4
  %v3_ae40 = add i32 %v2_ae40, 17
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v3_ae44 = load i32, i32* @r6, align 4
  %v4_ae44 = add i32 %v3_ae44, 16
  %v5_ae44 = inttoptr i32 %v4_ae44 to i8*
  store i8 %v5_ae38, i8* %v5_ae44, align 1
  %v3_ae48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae48, i32* %r3.global-to-local, align 4
  %v0_ae4c = load i32, i32* @r5, align 4
  %v1_ae4c = add i32 %v0_ae4c, 20
  %v2_ae4c = inttoptr i32 %v1_ae4c to i32*
  %v3_ae4c = load i32, i32* %v2_ae4c, align 4
  %v3_ae54 = udiv i32 %v3_ae4c, 65536
  store i32 %v3_ae54, i32* %r2.global-to-local, align 4
  %v5_ae58 = mul i32 %v3_ae48, 24
  %v1_ae5c = load i32, i32* @r8, align 4
  %v2_ae5c = add i32 %v1_ae5c, %v5_ae58
  store i32 %v2_ae5c, i32* %ip.global-to-local, align 4
  %v3_ae6020 = udiv i32 %v3_ae4c, 16777216
  %v1_ae64 = trunc i32 %v3_ae6020 to i8
  %v3_ae64 = add i32 %v2_ae5c, 3
  %v4_ae64 = inttoptr i32 %v3_ae64 to i8*
  store i8 %v1_ae64, i8* %v4_ae64, align 1
  %v0_ae68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae68 = trunc i32 %v0_ae68 to i8
  %v2_ae68 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae68 = add i32 %v2_ae68, 2
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae70 = load i32, i32* @r5, align 4
  store i32 %v0_ae70, i32* %r1.global-to-local, align 4
  %v0_ae74 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ae80 = load i32, i32* %ip.global-to-local, align 4
  %v6_ae88 = inttoptr i32 %v0_ae70 to i32*
  %v7_ae88 = call i32 @function_114ec(i32 %v0_ae74, i32* %v6_ae88, i32 60, i32 16384, i32 %v0_ae80, i32 16)
  %v3_ae8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae8c, i32* %r3.global-to-local, align 4
  %v1_ae90 = add i32 %v3_ae8c, 1
  store i32 %v1_ae90, i32* %r0.global-to-local, align 4
  %v1_ae94 = load i32, i32* %fp.global-to-local, align 4
  %v9_ae94 = icmp eq i32 %v1_ae90, %v1_ae94
  store i1 %v9_ae94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ae90, i32* %stack_var_-40, align 4
  %v6_ae9c = icmp slt i32 %v1_ae90, %v1_ae94
  br i1 %v6_ae9c, label %dec_label_pc_aea0, label %dec_label_pc_afd4

dec_label_pc_aea0:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad98
  %v1_aeb0 = phi i32 [ %v1_ae90, %dec_label_pc_ae00 ], [ 0, %dec_label_pc_ad98 ]
  %v5_aea4 = mul i32 %v1_aeb0, 24
  %v1_aea8 = load i32, i32* @r8, align 4
  %v2_aea8 = add i32 %v1_aea8, %v5_aea4
  store i32 %v2_aea8, i32* %r3.global-to-local, align 4
  %v1_aeac = add i32 %v2_aea8, 20
  %v2_aeac = inttoptr i32 %v1_aeac to i8*
  %v3_aeac = load i8, i8* %v2_aeac, align 1
  %v4_aeac = zext i8 %v3_aeac to i32
  store i32 %v4_aeac, i32* %r2.global-to-local, align 4
  %v0_aeb0 = load i32, i32* %sb.global-to-local, align 4
  %v4_aeb0 = mul i32 %v1_aeb0, 4
  %v5_aeb0 = add i32 %v0_aeb0, %v4_aeb0
  %v6_aeb0 = inttoptr i32 %v5_aeb0 to i32*
  %v7_aeb0 = load i32, i32* %v6_aeb0, align 4
  store i32 %v7_aeb0, i32* @r5, align 4
  %v2_aeb4 = icmp ugt i8 %v3_aeac, 30
  %v7_aeb4 = icmp eq i8 %v3_aeac, 31
  store i1 %v7_aeb4, i1* %cpsr_z.global-to-local, align 1
  %v1_aeb8 = add i32 %v7_aeb0, 20
  store i32 %v1_aeb8, i32* @r6, align 4
  %v2_aebc = xor i1 %v7_aeb4, true
  %v3_aebc = and i1 %v2_aeb4, %v2_aebc
  br i1 %v3_aebc, label %dec_label_pc_ada4, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %dec_label_pc_aea0
  %v1_aec0 = add i32 %v2_aea8, 16
  %v2_aec0 = inttoptr i32 %v1_aec0 to i32*
  %v3_aec0 = load i32, i32* %v2_aec0, align 4
  store i32 %v3_aec0, i32* %r4.global-to-local, align 4
  %v0_aec4 = call i32 @function_dab8()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = load i32, i32* %stack_var_-40, align 4
  %v5_aed0 = mul i32 %v3_aec8, 24
  %v0_aed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aed8 = load i32, i32* @r8, align 4
  %v2_aed8 = add i32 %v1_aed8, %v5_aed0
  store i32 %v2_aed8, i32* %r1.global-to-local, align 4
  %v1_aedc = and i32 %v0_aed4, 65280
  store i32 %v1_aedc, i32* %r3.global-to-local, align 4
  %v1_aed4 = udiv i32 %v0_aed4, 256
  %v3_aee0 = and i32 %v1_aed4, 65280
  store i32 %v3_aee0, i32* %r2.global-to-local, align 4
  %v3_aee4 = mul i32 %v0_aed4, 16777216
  store i32 %v3_aee4, i32* %ip.global-to-local, align 4
  %v1_aee8 = add i32 %v2_aed8, 20
  %v2_aee8 = inttoptr i32 %v1_aee8 to i8*
  %v3_aee8 = load i8, i8* %v2_aee8, align 1
  %v4_aee8 = zext i8 %v3_aee8 to i32
  %v4_aeec = mul nuw nsw i32 %v1_aedc, 256
  %v5_aeec = or i32 %v4_aeec, %v3_aee4
  store i32 %v5_aeec, i32* %ip.global-to-local, align 4
  %v2_aef4 = call i32 @llvm.bswap.i32(i32 %v0_aed4)
  %v7_aef8 = lshr i32 %v0_aec4, %v4_aee8
  %v8_aef8 = add i32 %v7_aef8, %v2_aef4
  store i32 %v8_aef8, i32* %r2.global-to-local, align 4
  %v3_af04 = mul i32 %v8_aef8, 16777216
  %v1_aefc = mul i32 %v8_aef8, 256
  %v4_af08 = and i32 %v1_aefc, 16711680
  %v5_af08 = or i32 %v4_af08, %v3_af04
  store i32 %v5_af08, i32* %r1.global-to-local, align 4
  store i32 %v6_aa40, i32* %r0.global-to-local, align 4
  %v2_af18 = call i32 @llvm.bswap.i32(i32 %v8_aef8)
  store i32 %v2_af18, i32* %r3.global-to-local, align 4
  store i1 %v7_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_af20 = load i32, i32* @r5, align 4
  %v2_af20 = add i32 %v1_af20, 16
  %v3_af20 = inttoptr i32 %v2_af20 to i32*
  store i32 %v2_af18, i32* %v3_af20, align 4
  br i1 %v2_ada8, label %dec_label_pc_af28, label %dec_label_pc_adb0

dec_label_pc_af28:                                ; preds = %dec_label_pc_aec0, %dec_label_pc_ada4
  %v0_af28 = call i32 @function_dab8()
  store i32 %v0_af28, i32* %r0.global-to-local, align 4
  store i32 %v3_aaac, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_af38, i1* %cpsr_z.global-to-local, align 1
  %v1_af3c = load i32, i32* @r5, align 4
  %v2_af3c = add i32 %v1_af3c, 12
  %v3_af3c = inttoptr i32 %v2_af3c to i32*
  store i32 %v0_af28, i32* %v3_af3c, align 4
  br i1 %v9_af38, label %dec_label_pc_af44, label %dec_label_pc_af28.dec_label_pc_adc4_crit_edge

dec_label_pc_af28.dec_label_pc_adc4_crit_edge:    ; preds = %dec_label_pc_af28
  %v1_adc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adc4

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28, %dec_label_pc_adb0
  %v0_af44 = call i32 @function_dab8()
  %v1_af44 = trunc i32 %v0_af44 to i8
  store i32 %v0_af44, i32* %r0.global-to-local, align 4
  %v4_af4823 = udiv i32 %v0_af44, 256
  %v1_af4c = trunc i32 %v4_af4823 to i8
  %v2_af4c = load i32, i32* @r5, align 4
  %v3_af4c = add i32 %v2_af4c, 5
  %v4_af4c = inttoptr i32 %v3_af4c to i8*
  store i8 %v1_af4c, i8* %v4_af4c, align 1
  store i32 %v3_aac0, i32* %r3.global-to-local, align 4
  %v1_af54 = load i32, i32* @r4, align 4
  %v9_af54 = icmp eq i32 %v3_aac0, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  %v3_af58 = load i32, i32* @r5, align 4
  %v4_af58 = add i32 %v3_af58, 4
  %v5_af58 = inttoptr i32 %v4_af58 to i8*
  store i8 %v1_af44, i8* %v5_af58, align 1
  %v0_af5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af5c, label %dec_label_pc_af60, label %dec_label_pc_af44.dec_label_pc_add0_crit_edge

dec_label_pc_af44.dec_label_pc_add0_crit_edge:    ; preds = %dec_label_pc_af44
  %v1_add4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_add0

dec_label_pc_af60:                                ; preds = %dec_label_pc_af44, %dec_label_pc_adc4
  %v0_af60 = call i32 @function_dab8()
  %v1_af60 = trunc i32 %v0_af60 to i8
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  store i32 %v3_aac4, i32* %ip.global-to-local, align 4
  %v4_af68 = sdiv i32 %v0_af60, 256
  store i32 %v4_af68, i32* %r3.global-to-local, align 4
  %v1_af6c = load i32, i32* @r4, align 4
  %v9_af6c = icmp eq i32 %v3_aac4, %v1_af6c
  store i1 %v9_af6c, i1* %cpsr_z.global-to-local, align 1
  %v3_af70 = load i32, i32* @r5, align 4
  %v4_af70 = add i32 %v3_af70, 20
  %v5_af70 = inttoptr i32 %v4_af70 to i8*
  store i8 %v1_af60, i8* %v5_af70, align 1
  %v0_af74 = load i32, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v0_af74 to i8
  %v2_af74 = load i32, i32* @r6, align 4
  %v3_af74 = add i32 %v2_af74, 1
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af78, label %dec_label_pc_af7c, label %dec_label_pc_af60.dec_label_pc_addc_crit_edge

dec_label_pc_af60.dec_label_pc_addc_crit_edge:    ; preds = %dec_label_pc_af60
  %v1_ade0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_addc

dec_label_pc_af7c:                                ; preds = %dec_label_pc_af60, %dec_label_pc_add0
  %v0_af7c = call i32 @function_dab8()
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v4_af80 = sdiv i32 %v0_af7c, 256
  store i32 %v4_af80, i32* %r3.global-to-local, align 4
  %v3_af84 = load i32, i32* @r6, align 4
  %v4_af84 = add i32 %v3_af84, 2
  %v5_af84 = inttoptr i32 %v4_af84 to i8*
  store i8 %v1_af7c, i8* %v5_af84, align 1
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  %v1_af8c = load i32, i32* @r4, align 4
  %v9_af8c = icmp eq i32 %v6_a97c, %v1_af8c
  store i1 %v9_af8c, i1* %cpsr_z.global-to-local, align 1
  %v0_af90 = load i32, i32* %r3.global-to-local, align 4
  %v1_af90 = trunc i32 %v0_af90 to i8
  %v2_af90 = load i32, i32* @r6, align 4
  %v3_af90 = add i32 %v2_af90, 3
  %v4_af90 = inttoptr i32 %v3_af90 to i8*
  store i8 %v1_af90, i8* %v4_af90, align 1
  %v0_af94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af94, label %dec_label_pc_af98, label %dec_label_pc_af7c.dec_label_pc_ade8_crit_edge

dec_label_pc_af7c.dec_label_pc_ade8_crit_edge:    ; preds = %dec_label_pc_af7c
  %v1_adec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ade8

dec_label_pc_af98:                                ; preds = %dec_label_pc_af7c, %dec_label_pc_addc
  %v0_af98 = call i32 @function_dab8()
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  store i32 %v6_a994, i32* %r2.global-to-local, align 4
  %v1_afa0 = load i32, i32* @r4, align 4
  %v9_afa0 = icmp eq i32 %v6_a994, %v1_afa0
  store i1 %v9_afa0, i1* %cpsr_z.global-to-local, align 1
  %v1_afa4 = load i32, i32* @r6, align 4
  %v2_afa4 = add i32 %v1_afa4, 4
  %v3_afa4 = inttoptr i32 %v2_afa4 to i32*
  store i32 %v0_af98, i32* %v3_afa4, align 4
  br i1 %v9_afa0, label %dec_label_pc_afac, label %dec_label_pc_adf4

dec_label_pc_afac:                                ; preds = %dec_label_pc_af98, %dec_label_pc_ade8
  %v0_afac = call i32 @function_dab8()
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v1_aac8, i32* %r3.global-to-local, align 4
  store i1 %v2_afb4, i1* %cpsr_z.global-to-local, align 1
  %v1_afb8 = load i32, i32* @r6, align 4
  %v2_afb8 = add i32 %v1_afb8, 8
  %v3_afb8 = inttoptr i32 %v2_afb8 to i32*
  store i32 %v0_afac, i32* %v3_afb8, align 4
  br i1 %v2_afb4, label %dec_label_pc_ae00, label %dec_label_pc_afc0

dec_label_pc_afc0:                                ; preds = %dec_label_pc_adf4, %dec_label_pc_afac
  %v0_afc0 = call i32 @function_dab8()
  %v1_afc0 = trunc i32 %v0_afc0 to i8
  store i32 %v0_afc0, i32* %r0.global-to-local, align 4
  %v4_afc4 = sdiv i32 %v0_afc0, 256
  store i32 %v4_afc4, i32* %r3.global-to-local, align 4
  %v1_afc8 = trunc i32 %v4_afc4 to i8
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 19
  %v4_afc8 = inttoptr i32 %v3_afc8 to i8*
  store i8 %v1_afc8, i8* %v4_afc8, align 1
  %v3_afcc = load i32, i32* @r6, align 4
  %v4_afcc = add i32 %v3_afcc, 18
  %v5_afcc = inttoptr i32 %v4_afcc to i8*
  store i8 %v1_afc0, i8* %v5_afcc, align 1
  br label %dec_label_pc_ae00

dec_label_pc_afd4:                                ; preds = %dec_label_pc_ae00, %dec_label_pc_ad88
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_afd8 = call i32 @function_10f4c(i32* null)
  store i32 %v2_afd8, i32* %r0.global-to-local, align 4
  store i32 %v2_aa50, i32* %ip.global-to-local, align 4
  %v9_afe0 = icmp eq i32 %v2_aa50, %v2_afd8
  store i1 %v9_afe0, i1* %cpsr_z.global-to-local, align 1
  %v6_afe4 = icmp slt i32 %v2_aa50, %v2_afd8
  br i1 %v6_afe4, label %dec_label_pc_afe8, label %dec_label_pc_afd4.dec_label_pc_ad88_crit_edge

dec_label_pc_afd4.dec_label_pc_ad88_crit_edge:    ; preds = %dec_label_pc_afd4
  %v0_ad8c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ad88

dec_label_pc_afe8:                                ; preds = %dec_label_pc_afd4, %dec_label_pc_a880, %dec_label_pc_aff0
  %v29_afec = phi i32 [ %v3_aa64, %dec_label_pc_a880 ], [ %v1_aff4, %dec_label_pc_aff0 ], [ %v2_afd8, %dec_label_pc_afd4 ]
  store i32 %v3_a880, i32* %r4.global-to-local, align 4
  store i32 %v12_a880, i32* %r7.global-to-local, align 4
  ret i32 %v29_afec

dec_label_pc_aff0:                                ; preds = %dec_label_pc_aa74
  %v0_aff0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_aff0, i32* %r0.global-to-local, align 4
  %v1_aff4 = call i32 @function_10c7c(i32 %v0_aff0)
  store i32 %v1_aff4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afe8

; uselistorder directives
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v4_afc4, { 1, 0 }
  uselistorder i32 %v0_afc0, { 0, 2, 1 }
  uselistorder i32 %v0_af60, { 0, 2, 1 }
  uselistorder i32 %v0_af44, { 0, 2, 1 }
  uselistorder i32 %v2_af18, { 1, 0 }
  uselistorder i32 %v8_aef8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_aee4, { 1, 0 }
  uselistorder i32 %v0_aed4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_ae90, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_ae38, { 0, 2, 1 }
  uselistorder i32 %v0_ae20, { 1, 0, 2 }
  uselistorder i1 %v2_afb4, { 2, 3, 1, 0 }
  uselistorder i1 %v9_af38, { 2, 3, 1, 0 }
  uselistorder i1 %v7_ada8, { 2, 1, 0 }
  uselistorder i32 %v1_ad78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ad24, { 1, 0 }
  uselistorder i32 %v3_ab7c, { 1, 0 }
  uselistorder i32 %v3_ab78, { 1, 0 }
  uselistorder i32 %v1_ab74, { 1, 0 }
  uselistorder i32 %v1_ab6c, { 1, 0 }
  uselistorder i32 %v3_ab4c, { 1, 0 }
  uselistorder i32 %v1_ab40, { 1, 0 }
  uselistorder i32 %v1_ab3c, { 1, 0 }
  uselistorder i32 %v1_ab38, { 1, 0 }
  uselistorder i32 %v1_ab30, { 1, 0 }
  uselistorder i32 %v1_aafc, { 1, 0 }
  uselistorder i32 %v0_aad0, { 1, 0, 2 }
  uselistorder i32 %v1_aac8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_aaac, { 1, 0, 2 }
  uselistorder i32 %v3_aaa0, { 2, 0, 1 }
  uselistorder i1 %v7_aa94, { 1, 0 }
  uselistorder i1 %v7_aa68, { 1, 0 }
  uselistorder i32 %v3_aa64, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_aa50, { 2, 1, 0 }
  uselistorder i32 %v6_aa40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a994, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a97c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v6_a944, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a92c, { 1, 2, 0 }
  uselistorder i32 %v7_a8e8, { 1, 0, 2 }
  uselistorder i32 %v6_a8c4, { 1, 2, 0 }
  uselistorder i32 %v1_a884, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_afe8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afc0, { 1, 0 }
  uselistorder label %dec_label_pc_ae00, { 2, 1, 0 }
  uselistorder label %bb75, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b000(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b000:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_b004 = urem i32 %arg2, 256
  store i32 %v1_b004, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_b004, i32* %r0.global-to-local, align 4
  %v1_b018 = urem i32 %arg4, 256
  store i32 %v1_b018, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_b024 = call i32 @function_1183c(i32 %v1_b004, i32 4)
  %v0_b030 = load i32, i32* @sl, align 4
  store i32 %v0_b030, i32* %r0.global-to-local, align 4
  %v2_b034 = call i32 @function_1183c(i32 %v0_b030, i32 4)
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r6, align 4
  %v0_b040 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_b034, i32* @sb, align 4
  %v0_b050 = load i32, i32* @r4, align 4
  store i32 %v0_b050, i32* %r0.global-to-local, align 4
  %v5_b054 = inttoptr i32 %v0_b040 to i32*
  %v6_b054 = call i32 @function_829c(i32 %v0_b050, i32* %v5_b054, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_b058 = load i32, i32* @r5, align 4
  %v0_b064 = load i32, i32* @r6, align 4
  store i32 %v0_b064, i32* %r3.global-to-local, align 4
  %v0_b068 = load i32, i32* @r4, align 4
  store i32 %v0_b068, i32* %r0.global-to-local, align 4
  %v3_b06c = urem i32 %v6_b054, 65536
  store i32 %v3_b06c, i32* @fp, align 4
  %v5_b070 = inttoptr i32 %v0_b058 to i32*
  %v6_b070 = call i32 @function_829c(i32 %v0_b068, i32* %v5_b070, i32 6, i32 %v0_b064, i32 ptrtoint (i32* @0 to i32))
  %v0_b074 = load i32, i32* @r5, align 4
  %v3_b078 = mul i32 %v6_b070, 65536
  store i32 %v3_b078, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b084 = load i32, i32* @r4, align 4
  store i32 %v0_b084, i32* %r0.global-to-local, align 4
  %v5_b088 = inttoptr i32 %v0_b074 to i32*
  %v6_b088 = call i32 @function_829c(i32 %v0_b084, i32* %v5_b088, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_b098 = urem i32 %v6_b088, 65536
  %v0_b09c = load i32, i32* @r5, align 4
  %v0_b0a0 = load i32, i32* @r4, align 4
  store i32 %v0_b0a0, i32* %r0.global-to-local, align 4
  %v5_b0a8 = inttoptr i32 %v0_b09c to i32*
  %v6_b0a8 = call i32 @function_829c(i32 %v0_b0a0, i32* %v5_b0a8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b0b4 = urem i32 %v6_b0a8, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_b0d0 = call i32 @function_10f4c(i32* null)
  %v0_b0d4 = load i32, i32* @r8, align 4
  %v3_b0d4 = udiv i32 %v0_b0d4, 65536
  store i32 %v3_b0d4, i32* %r3.global-to-local, align 4
  %v1_b0d8 = load i32, i32* @r6, align 4
  %v9_b0d8 = icmp eq i32 %v3_b0d4, %v1_b0d8
  %v1_b0e04 = load i32, i32* @r7, align 4
  %v2_b0e05 = add i32 %v1_b0e04, %v2_b0d0
  store i32 %v2_b0e05, i32* %r0.global-to-local, align 4
  br i1 %v9_b0d8, label %dec_label_pc_b2bc, label %bb

bb:                                               ; preds = %dec_label_pc_b000
  %v2_b0dc = mul nuw nsw i32 %v3_b0d4, 256
  %v4_b0e4 = and i32 %v2_b0dc, 65280
  store i32 %v4_b0e4, i32* %r3.global-to-local, align 4
  %v5_b0ec = udiv i32 %v0_b0d4, 16777216
  %v6_b0ec = or i32 %v4_b0e4, %v5_b0ec
  br label %dec_label_pc_b0f4

dec_label_pc_b0f4:                                ; preds = %bb, %dec_label_pc_b2bc
  %storemerge = phi i32 [ %v6_b0ec, %bb ], [ %v3_b2c4, %dec_label_pc_b2bc ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_b0f4 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_b0f4, 1
  br i1 %tmp47, label %dec_label_pc_b28c, label %dec_label_pc_b0fc

dec_label_pc_b0fc:                                ; preds = %dec_label_pc_b0f4
  %v0_b0fc = load i32, i32* @fp, align 4
  %v3_b0fc = udiv i32 %v0_b0fc, 256
  %v1_b100 = mul i32 %v0_b0fc, 256
  %v4_b104 = and i32 %v1_b100, 65280
  %v5_b104 = or i32 %v4_b104, %v3_b0fc
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_b114 = trunc i32 %v3_b0fc to i8
  %v3_b11c3 = udiv i32 %v5_b104, 256
  store i32 %v3_b11c3, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_b128 = trunc i32 %v3_b11c3 to i8
  store i8 %v4_b128, i8* %stack_var_-84, align 1
  %v3_b1cc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_b150

dec_label_pc_b130:                                ; preds = %dec_label_pc_b1b4
  %v0_b130 = load i32, i32* @r6, align 4
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v0_b130
  %v3_b130 = inttoptr i32 %v2_b130 to i32*
  %v4_b130 = load i32, i32* %v3_b130, align 4
  store i32 %v4_b130, i32* %r0.global-to-local, align 4
  %v3_b13c = inttoptr i32 %v0_b1d0 to %sockaddr*
  %v4_b13c = call i32 @function_113ac(i32 %v4_b130, %sockaddr* %v3_b13c, i32 16)
  store i32 %v4_b13c, i32* %r0.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = load i32, i32* @sl, align 4
  %v9_b140 = icmp eq i32 %v0_b140, %v1_b140
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = add i32 %v0_b144, 4
  store i32 %v1_b144, i32* @r6, align 4
  %v0_b148 = load i32, i32* @r5, align 4
  %v1_b148 = add i32 %v0_b148, 24
  store i32 %v1_b148, i32* @r5, align 4
  br i1 %v9_b140, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b150:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b0fc
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r0.global-to-local, align 4
  %v2_b15c = call i32 @function_1183c(i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 1)
  store i32 %v2_b15c, i32* %r0.global-to-local, align 4
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v0_b168 = load i32, i32* @fp, align 4
  %v9_b168 = icmp eq i32 %v0_b168, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v1_b16c = load i32, i32* @r6, align 4
  %v3_b16c = add i32 %v1_b16c, %v2_b024
  %v4_b16c = inttoptr i32 %v3_b16c to i32*
  store i32 %v2_b15c, i32* %v4_b16c, align 4
  br i1 %v9_b168, label %dec_label_pc_b2a8, label %dec_label_pc_b174

dec_label_pc_b174:                                ; preds = %dec_label_pc_b150
  %v2_b178 = load i8, i8* %stack_var_-84, align 1
  %v3_b178 = sext i8 %v2_b178 to i32
  store i32 %v3_b178, i32* %r3.global-to-local, align 4
  %v2_b17c = load i32, i32* @r5, align 4
  %v3_b17c = add i32 %v2_b17c, 2
  %v4_b17c = inttoptr i32 %v3_b17c to i8*
  store i8 %v5_b114, i8* %v4_b17c, align 1
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = trunc i32 %v0_b180 to i8
  %v2_b180 = load i32, i32* @r5, align 4
  %v3_b180 = add i32 %v2_b180, 3
  %v4_b180 = inttoptr i32 %v3_b180 to i8*
  store i8 %v1_b180, i8* %v4_b180, align 1
  br label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2a8, %dec_label_pc_b174
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b190 = call i32 @function_11550(i32 2, i32 2, i32 17)
  store i32 %v3_b190, i32* %r0.global-to-local, align 4
  %v7_b194 = icmp eq i32 %v3_b190, -1
  %v0_b198 = load i32, i32* @r8, align 4
  %v1_b198 = add i32 %v0_b198, 1
  store i32 %v1_b198, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_b1ac = load i32, i32* @r6, align 4
  %v2_b1ac = load i32, i32* @sb, align 4
  %v3_b1ac = add i32 %v2_b1ac, %v1_b1ac
  %v4_b1ac = inttoptr i32 %v3_b1ac to i32*
  store i32 %v3_b190, i32* %v4_b1ac, align 4
  br i1 %v7_b194, label %dec_label_pc_b2a0.loopexit, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b184
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_b1cc = load i32, i32* %r0.global-to-local, align 4
  %v4_b1cc = call i32 @function_11380(i32 %v0_b1cc, %sockaddr* %v3_b1cc, i32 16)
  store i32 %v4_b1cc, i32* %r0.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r5, align 4
  %v1_b1d0 = add i32 %v0_b1d0, 20
  %v2_b1d0 = inttoptr i32 %v1_b1d0 to i8*
  %v3_b1d0 = load i8, i8* %v2_b1d0, align 1
  %v4_b1d0 = zext i8 %v3_b1d0 to i32
  store i32 %v4_b1d0, i32* %r3.global-to-local, align 4
  %tmp50 = icmp ugt i8 %v3_b1d0, 31
  br i1 %tmp50, label %dec_label_pc_b130, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b1b4
  %v1_b1dc = add i32 %v0_b1d0, 16
  %v2_b1dc = inttoptr i32 %v1_b1dc to i32*
  %v3_b1dc = load i32, i32* %v2_b1dc, align 4
  store i32 %v3_b1dc, i32* @r4, align 4
  %v0_b1e0 = call i32 @function_dab8()
  store i32 %v0_b1e0, i32* %r0.global-to-local, align 4
  %v0_b1e4 = load i32, i32* @r4, align 4
  %v1_b1e8 = and i32 %v0_b1e4, 65280
  store i32 %v1_b1e8, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  %v1_b1f8 = add i32 %v0_b1f8, 20
  %v2_b1f8 = inttoptr i32 %v1_b1f8 to i8*
  %v3_b1f8 = load i8, i8* %v2_b1f8, align 1
  %v4_b1f8 = zext i8 %v3_b1f8 to i32
  %v2_b200 = call i32 @llvm.bswap.i32(i32 %v0_b1e4)
  %v7_b204 = lshr i32 %v0_b1e0, %v4_b1f8
  %v8_b204 = add i32 %v7_b204, %v2_b200
  %v1_b20c = and i32 %v8_b204, 65280
  store i32 %v1_b20c, i32* %r0.global-to-local, align 4
  %v2_b220 = call i32 @llvm.bswap.i32(i32 %v8_b204)
  store i32 %v2_b220, i32* %r3.global-to-local, align 4
  %v2_b224 = add i32 %v0_b1f8, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v2_b220, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  %v0_b22c = load i32, i32* @r6, align 4
  %v1_b22c = load i32, i32* @sb, align 4
  %v2_b22c = add i32 %v1_b22c, %v0_b22c
  %v3_b22c = inttoptr i32 %v2_b22c to i32*
  %v4_b22c = load i32, i32* %v3_b22c, align 4
  store i32 %v4_b22c, i32* %r0.global-to-local, align 4
  %v3_b234 = inttoptr i32 %v0_b228 to %sockaddr*
  %v4_b234 = call i32 @function_113ac(i32 %v4_b22c, %sockaddr* %v3_b234, i32 16)
  store i32 %v4_b234, i32* %r0.global-to-local, align 4
  %v0_b238 = load i32, i32* @r8, align 4
  %v1_b238 = load i32, i32* @sl, align 4
  %v9_b238 = icmp eq i32 %v0_b238, %v1_b238
  %v0_b23c = load i32, i32* @r6, align 4
  %v1_b23c = add i32 %v0_b23c, 4
  store i32 %v1_b23c, i32* @r6, align 4
  %v0_b240 = load i32, i32* @r5, align 4
  %v1_b240 = add i32 %v0_b240, 24
  store i32 %v1_b240, i32* @r5, align 4
  br i1 %v9_b238, label %dec_label_pc_b248, label %dec_label_pc_b150

dec_label_pc_b248:                                ; preds = %dec_label_pc_b1dc, %dec_label_pc_b130, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge
  %v0_b248 = phi i32 [ %v0_b248.pre, %dec_label_pc_b28c.dec_label_pc_b248_crit_edge ], [ %v0_b238, %dec_label_pc_b1dc ], [ %v0_b140, %dec_label_pc_b130 ]
  %tmp48 = icmp slt i32 %v0_b248, 1
  br i1 %tmp48, label %dec_label_pc_b28c, label %dec_label_pc_b250

dec_label_pc_b250:                                ; preds = %dec_label_pc_b248
  %v2_b254 = icmp eq i32 %v1_b0b4, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_b254, label %dec_label_pc_b25c, label %dec_label_pc_b2cc

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b264

dec_label_pc_b264:                                ; preds = %dec_label_pc_b264, %dec_label_pc_b25c
  %v0_b270 = phi i32 [ %v1_b270, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  %v0_b268 = phi i32 [ %v1_b284, %dec_label_pc_b264 ], [ 0, %dec_label_pc_b25c ]
  store i32 %v2_b024, i32* %r3.global-to-local, align 4
  %v1_b268 = load i32, i32* @sb, align 4
  %v2_b268 = add i32 %v1_b268, %v0_b268
  %v3_b268 = inttoptr i32 %v2_b268 to i32*
  %v4_b268 = load i32, i32* %v3_b268, align 4
  store i32 %v4_b268, i32* %r0.global-to-local, align 4
  %v2_b26c = add i32 %v0_b268, %v2_b024
  %v3_b26c = inttoptr i32 %v2_b26c to i32*
  %v4_b26c = load i32, i32* %v3_b26c, align 4
  %v1_b270 = add i32 %v0_b270, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b27c = inttoptr i32 %v4_b26c to i32*
  %v5_b27c = call i32 @function_114c0(i32 %v4_b268, i32* %v4_b27c, i32 %v3_b098, i32 16384)
  store i32 %v5_b27c, i32* %r0.global-to-local, align 4
  %v1_b280 = load i32, i32* @sl, align 4
  %v9_b280 = icmp eq i32 %v1_b270, %v1_b280
  %v0_b284 = load i32, i32* @r4, align 4
  %v1_b284 = add i32 %v0_b284, 4
  store i32 %v1_b284, i32* @r4, align 4
  br i1 %v9_b280, label %dec_label_pc_b28c, label %dec_label_pc_b264

dec_label_pc_b28c:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b264, %dec_label_pc_b248, %dec_label_pc_b0f4
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b290 = call i32 @function_10f4c(i32* null)
  store i32 %v2_b290, i32* %r0.global-to-local, align 4
  store i32 %v2_b0e05, i32* %r3.global-to-local, align 4
  %v6_b29c = icmp slt i32 %v2_b0e05, %v2_b290
  br i1 %v6_b29c, label %dec_label_pc_b2a0, label %dec_label_pc_b28c.dec_label_pc_b248_crit_edge

dec_label_pc_b28c.dec_label_pc_b248_crit_edge:    ; preds = %dec_label_pc_b28c
  %v0_b248.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b248

dec_label_pc_b2a0.loopexit:                       ; preds = %dec_label_pc_b184
  %v29_b2a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2a0

dec_label_pc_b2a0:                                ; preds = %dec_label_pc_b2a0.loopexit, %dec_label_pc_b28c
  %v29_b2a4 = phi i32 [ %v29_b2a4.pre, %dec_label_pc_b2a0.loopexit ], [ %v2_b290, %dec_label_pc_b28c ]
  ret i32 %v29_b2a4

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b150
  %v0_b2a8 = call i32 @function_dab8()
  %v1_b2a8 = trunc i32 %v0_b2a8 to i8
  store i32 %v0_b2a8, i32* %r0.global-to-local, align 4
  %v4_b2ac = sdiv i32 %v0_b2a8, 256
  store i32 %v4_b2ac, i32* %r3.global-to-local, align 4
  %v1_b2b0 = trunc i32 %v4_b2ac to i8
  %v2_b2b0 = load i32, i32* @r5, align 4
  %v3_b2b0 = add i32 %v2_b2b0, 3
  %v4_b2b0 = inttoptr i32 %v3_b2b0 to i8*
  store i8 %v1_b2b0, i8* %v4_b2b0, align 1
  %v3_b2b4 = load i32, i32* @r5, align 4
  %v4_b2b4 = add i32 %v3_b2b4, 2
  %v5_b2b4 = inttoptr i32 %v4_b2b4 to i8*
  store i8 %v1_b2a8, i8* %v5_b2b4, align 1
  br label %dec_label_pc_b184

dec_label_pc_b2bc:                                ; preds = %dec_label_pc_b000
  %v0_b2bc = call i32 @function_dab8()
  %v3_b2c0 = mul i32 %v0_b2bc, 65536
  store i32 %v3_b2c0, i32* %r0.global-to-local, align 4
  %v3_b2c4 = urem i32 %v0_b2bc, 65536
  br label %dec_label_pc_b0f4

dec_label_pc_b2cc:                                ; preds = %dec_label_pc_b250
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_b2d4

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b2cc
  %v0_b2d8 = phi i32 [ %v1_b310, %dec_label_pc_b2d4 ], [ 0, %dec_label_pc_b2cc ]
  %v2_b2d8 = add i32 %v0_b2d8, %v2_b024
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  %v4_b2d8 = load i32, i32* %v3_b2d8, align 4
  store i32 %v4_b2d8, i32* @r4, align 4
  store i32 %v4_b2d8, i32* %r0.global-to-local, align 4
  %v2_b2e4 = call i32 @function_db6c(i32 %v4_b2d8, i32 %v3_b098)
  store i32 %v2_b2e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f0 = load i32, i32* @r4, align 4
  %v4_b2f0 = add i32 %v2_b2f0, %v3_b098
  %v5_b2f0 = inttoptr i32 %v4_b2f0 to i8*
  store i8 0, i8* %v5_b2f0, align 1
  %v0_b2f4 = load i32, i32* @r4, align 4
  %v0_b2f8 = load i32, i32* @r6, align 4
  %v1_b2f8 = load i32, i32* @sb, align 4
  %v2_b2f8 = add i32 %v1_b2f8, %v0_b2f8
  %v3_b2f8 = inttoptr i32 %v2_b2f8 to i32*
  %v4_b2f8 = load i32, i32* %v3_b2f8, align 4
  store i32 %v4_b2f8, i32* %r0.global-to-local, align 4
  %v0_b2fc = load i32, i32* @r5, align 4
  %v1_b2fc = add i32 %v0_b2fc, 1
  store i32 %v1_b2fc, i32* @r5, align 4
  %v0_b304 = load i32, i32* %r3.global-to-local, align 4
  %v1_b304 = add i32 %v0_b304, 16384
  store i32 %v1_b304, i32* %r3.global-to-local, align 4
  %v4_b308 = inttoptr i32 %v0_b2f4 to i32*
  %v5_b308 = call i32 @function_114c0(i32 %v4_b2f8, i32* %v4_b308, i32 %v3_b098, i32 %v1_b304)
  store i32 %v5_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r5, align 4
  %v1_b30c = load i32, i32* @sl, align 4
  %v9_b30c = icmp eq i32 %v0_b30c, %v1_b30c
  %v0_b310 = load i32, i32* @r6, align 4
  %v1_b310 = add i32 %v0_b310, 4
  store i32 %v1_b310, i32* @r6, align 4
  br i1 %v9_b30c, label %dec_label_pc_b28c, label %dec_label_pc_b2d4

; uselistorder directives
  uselistorder i32 %v1_b310, { 1, 0 }
  uselistorder i32 %v0_b2bc, { 1, 0 }
  uselistorder i32 %v4_b2ac, { 1, 0 }
  uselistorder i32 %v0_b2a8, { 0, 2, 1 }
  uselistorder i32 %v1_b284, { 1, 0 }
  uselistorder i32 %v2_b220, { 1, 0 }
  uselistorder i32 %v0_b1d0, { 1, 2, 0 }
  uselistorder i32 %v3_b190, { 1, 0, 2 }
  uselistorder i32 %v3_b0d4, { 0, 2, 1 }
  uselistorder i32 %v3_b098, { 2, 3, 1, 0 }
  uselistorder i32 %v2_b024, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_b004, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 19, 9, 8, 31, 10, 13, 11, 12, 14, 30, 18, 20, 17, 22, 21, 16, 15, 1, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder label %dec_label_pc_b248, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b0f4, { 1, 0 }
}

define i32 @function_b31c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b31c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b31c = load i32, i32* @sb, align 4
  %v21_b31c = load i32, i32* @sl, align 4
  %v1_b320 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b320, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b33c = urem i32 %arg4, 256
  store i32 %v1_b33c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b34c = call i32 @function_1183c(i32 %v1_b320, i32 4)
  %v0_b350 = load i32, i32* @r5, align 4
  store i32 %v0_b350, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b35c = load i32, i32* @r7, align 4
  store i32 %v0_b35c, i32* %r3.global-to-local, align 4
  %v0_b360 = load i32, i32* @r4, align 4
  store i32 %v0_b360, i32* %r0.global-to-local, align 4
  %v5_b364 = inttoptr i32 %v0_b350 to i32*
  %v6_b364 = call i32 @function_829c(i32 %v0_b360, i32* %v5_b364, i32 2, i32 %v0_b35c, i32 %v2_b34c)
  %v1_b370 = urem i32 %v6_b364, 256
  store i32 %v1_b370, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  %v0_b380 = load i32, i32* @r4, align 4
  store i32 %v0_b380, i32* %r0.global-to-local, align 4
  %v5_b384 = trunc i32 %v6_b364 to i8
  %v6_b388 = inttoptr i32 %v0_b37c to i32*
  %v7_b388 = call i32 @function_829c(i32 %v0_b380, i32* %v6_b388, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_b364)
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b39c = load i32, i32* @r4, align 4
  store i32 %v0_b39c, i32* %r0.global-to-local, align 4
  %v5_b3a0 = inttoptr i32 %v0_b38c to i32*
  %v6_b3a0 = call i32 @function_829c(i32 %v0_b39c, i32* %v5_b3a0, i32 4, i32 64, i32 %v7_b388)
  %v1_b3a8 = urem i32 %v6_b3a0, 256
  store i32 %v1_b3a8, i32* %ip.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r3.global-to-local, align 4
  %v0_b3b8 = load i32, i32* @r4, align 4
  store i32 %v0_b3b8, i32* %r0.global-to-local, align 4
  %v5_b3bc = trunc i32 %v6_b3a0 to i8
  %v6_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v7_b3c0 = call i32 @function_829c(i32 %v0_b3b8, i32* %v6_b3c0, i32 5, i32 %v0_b3b4, i32 %v6_b3a0)
  %v1_b3cc = urem i32 %v7_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v6_b3e4 = call i32 @function_829c(i32 %v0_b3dc, i32* %v5_b3e4, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_b3cc)
  %v0_b3f0 = load i32, i32* @r5, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r4, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b400 = inttoptr i32 %v0_b3f0 to i32*
  %v6_b400 = call i32 @function_829c(i32 %v0_b3fc, i32* %v5_b400, i32 7, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_b3e4)
  %v0_b404 = load i32, i32* @r5, align 4
  store i32 %v0_b404, i32* %r1.global-to-local, align 4
  %v0_b408 = load i32, i32* @r7, align 4
  store i32 %v0_b408, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b400, i32* %sb.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %v5_b418 = inttoptr i32 %v0_b404 to i32*
  %v6_b418 = call i32 @function_829c(i32 %v0_b414, i32* %v5_b418, i32 %v0_b408, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b424 = load i32, i32* @r5, align 4
  store i32 %v0_b424, i32* %r1.global-to-local, align 4
  store i32 %v6_b418, i32* @sl, align 4
  %v0_b42c = load i32, i32* @r4, align 4
  store i32 %v0_b42c, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b424 to i32*
  %v6_b430 = call i32 @function_829c(i32 %v0_b42c, i32* %v5_b430, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b43c = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_b43c, i32* %r3.global-to-local, align 4
  %v1_b440 = urem i32 %v6_b430, 256
  store i32 %v1_b440, i32* %ip.global-to-local, align 4
  %v0_b444 = load i32, i32* @r5, align 4
  store i32 %v0_b444, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_b44c = load i32, i32* @r4, align 4
  store i32 %v0_b44c, i32* %r0.global-to-local, align 4
  %v5_b454 = inttoptr i32 %v0_b444 to i32*
  %v6_b454 = call i32 @function_829c(i32 %v0_b44c, i32* %v5_b454, i32 19, i32 %v2_b43c, i32 %v1_b440)
  store i32 %v6_b454, i32* @fp, align 4
  %v0_b45c = load i32, i32* @r7, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v1_b460 = inttoptr i32 %v0_b45c to i32*
  %v2_b460 = call i32 @function_10f4c(i32* %v1_b460)
  %v1_b464 = load i32, i32* @r6, align 4
  %v2_b464 = add i32 %v1_b464, %v2_b460
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b478 = call i32 @function_11550(i32 2, i32 3, i32 17)
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v7_b47c = icmp eq i32 %v3_b478, -1
  store i1 %v7_b47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b47c, label %dec_label_pc_b8a4, label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b31c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b490 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b490, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b498 = load i32, i32* @r7, align 4
  store i32 %v0_b498, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b4a4 = call i32 @function_11520(i32 %v3_b478, i32 %v0_b498, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b4a4, i32* %r0.global-to-local, align 4
  %v7_b4a8 = icmp eq i32 %v6_b4a4, -1
  store i1 %v7_b4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4a8, label %dec_label_pc_b8ac, label %dec_label_pc_b4b0

dec_label_pc_b4b0:                                ; preds = %dec_label_pc_b488
  %v0_b4b0 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b4bc = urem i32 %v0_b4b0, 65536
  store i32 %v3_b4bc, i32* %r2.global-to-local, align 4
  %v3_b4c0 = icmp ugt i32 %v3_b4bc, 1459
  %v9_b4c0 = icmp eq i32 %v3_b4bc, 1460
  store i1 %v9_b4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4c0, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_b4b0
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_b4b0, %bb
  %v0_b4c8 = phi i32 [ %v3_b4bc, %dec_label_pc_b4b0 ], [ 1460, %bb ]
  store i32 %v7_b388, i32* %r1.global-to-local, align 4
  store i32 %v6_b3e4, i32* %r2.global-to-local, align 4
  store i32 %v1_b320, i32* %r3.global-to-local, align 4
  %v0_b4d8 = load i32, i32* %sb.global-to-local, align 4
  %v3_b4dc = mul i32 %v7_b388, 65536
  store i32 %v3_b4dc, i32* %r0.global-to-local, align 4
  %v3_b4e0 = mul i32 %v6_b3e4, 65536
  store i32 %v3_b4e0, i32* %sl.global-to-local, align 4
  %v3_b4e4 = urem i32 %v7_b388, 65536
  store i32 %v3_b4e4, i32* @r4, align 4
  %v3_b4e8 = urem i32 %v6_b3e4, 65536
  store i32 %v3_b4e8, i32* %sb.global-to-local, align 4
  %v3_b4ec = urem i32 %v0_b4d8, 65536
  store i32 %v3_b4ec, i32* %ip.global-to-local, align 4
  %v2_b4f0 = icmp eq i32 %v1_b320, 0
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  %v0_b4f4 = load i32, i32* @r7, align 4
  store i32 %v0_b4f4, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %.dec_label_pc_b664.preheader_crit_edge, label %dec_label_pc_b508

.dec_label_pc_b664.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_b4c8, 8
  %.pre19 = add nuw nsw i32 %v0_b4c8, 28
  br label %dec_label_pc_b664.preheader

dec_label_pc_b508:                                ; preds = %bb56
  %v1_b50c = add nuw nsw i32 %v0_b4c8, 28
  %v1_b510 = add nuw nsw i32 %v0_b4c8, 8
  %v1_b514 = urem i32 %v6_b3e4, 256
  %tmp57 = udiv i32 %v7_b388, 256
  %v3_b520 = urem i32 %tmp57, 256
  %v3_b524 = mul i32 %v1_b510, 65536
  store i32 %v3_b524, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_b50c, 256
  %v1_b530 = urem i32 %v7_b388, 256
  %tmp59 = mul nuw nsw i32 %v1_b510, 256
  %v1_b53c = and i32 %tmp58, 65280
  store i32 %v1_b53c, i32* %r3.global-to-local, align 4
  %v4_b540 = mul nuw nsw i32 %v1_b530, 256
  %v5_b540 = or i32 %v4_b540, %v3_b520
  store i32 %v5_b540, i32* %r0.global-to-local, align 4
  %v3_b544 = mul nuw nsw i32 %v1_b514, 256
  store i32 %v3_b544, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_b4d8, 256
  %v3_b548 = urem i32 %tmp60, 256
  %v1_b54c = and i32 %tmp59, 65280
  store i32 %v1_b54c, i32* %ip.global-to-local, align 4
  %v2_b550 = icmp eq i32 %v1_b3cc, 0
  store i1 %v2_b550, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_b50c, 256
  %v4_b554 = urem i32 %tmp61, 256
  %v5_b554 = or i32 %v4_b554, %v1_b53c
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v1_b558 = urem i32 %v0_b4d8, 256
  %v5_b55c = trunc i32 %tmp61 to i8
  %v5_b560 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_b3e4, 256
  %v4_b564 = urem i32 %tmp62, 256
  %v5_b564 = or i32 %v4_b564, %v3_b544
  store i32 %v5_b564, i32* @r5, align 4
  %v4_b568 = mul nuw nsw i32 %v1_b558, 256
  %v5_b568 = or i32 %v4_b568, %v3_b548
  store i32 %v5_b568, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_b510, 256
  %v4_b56c = urem i32 %tmp63, 256
  %v5_b56c = or i32 %v4_b56c, %v1_b54c
  store i32 %v5_b56c, i32* %sb.global-to-local, align 4
  br i1 %v2_b550, label %dec_label_pc_b574, label %dec_label_pc_b8b8

dec_label_pc_b574:                                ; preds = %dec_label_pc_b508
  %v3_b57422 = udiv i32 %v1_b53c, 256
  store i32 %v3_b57422, i32* %ip.global-to-local, align 4
  store i32 %v1_b530, i32* %r0.global-to-local, align 4
  store i32 %v1_b514, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_b558, i32* %sl.global-to-local, align 4
  %v3_b59423 = udiv i32 %v1_b54c, 256
  store i32 %v3_b59423, i32* @r7, align 4
  %sext10 = mul i32 %v1_b50c, 16777216
  %v4_b61c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_b388, 16777216
  %v4_b628 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_b3e4, 16777216
  %v4_b62c = sdiv i32 %sext12, 16777216
  %v4_b634 = sext i8 %v5_b560 to i32
  %v4_b610 = sext i8 %v5_b55c to i32
  br label %dec_label_pc_b598

dec_label_pc_b598:                                ; preds = %dec_label_pc_b598, %dec_label_pc_b574
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b5a4 = call i32 @function_1183c(i32 1510, i32 1)
  store i32 %v2_b5a4, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %r3.global-to-local, align 4
  %v2_b5b0 = load i32, i32* @r4, align 4
  %v5_b5b0 = mul i32 %v2_b5b0, 4
  %v6_b5b0 = add i32 %v5_b5b0, %v2_b34c
  %v7_b5b0 = inttoptr i32 %v6_b5b0 to i32*
  store i32 %v2_b5a4, i32* %v7_b5b0, align 4
  %v3_b5b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5b4, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b5b8 = mul i32 %v3_b5b4, 4
  %v5_b5b8 = add i32 %v0_b5b8, %v4_b5b8
  %v6_b5b8 = inttoptr i32 %v5_b5b8 to i32*
  %v7_b5b8 = load i32, i32* %v6_b5b8, align 4
  store i32 %v7_b5b8, i32* %r1.global-to-local, align 4
  %v1_b5bc = inttoptr i32 %v7_b5b8 to i8*
  %v2_b5bc = load i8, i8* %v1_b5bc, align 1
  %tmp = urem i8 %v2_b5bc, 16
  %v1_b5c0 = zext i8 %tmp to i32
  %v1_b5c4 = or i32 %v1_b5c0, 64
  store i32 %v1_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = trunc i32 %v1_b5c4 to i8
  store i8 %v1_b5c8, i8* %v1_b5bc, align 1
  %v0_b5cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b5cc = inttoptr i32 %v0_b5cc to i8*
  %v2_b5cc = load i8, i8* %v1_b5cc, align 1
  %v3_b5cc = zext i8 %v2_b5cc to i32
  %v1_b5d0 = and i32 %v3_b5cc, 240
  %v1_b5d4 = or i32 %v1_b5d0, 5
  store i32 %v1_b5d4, i32* %r2.global-to-local, align 4
  %v3_b5dc = add i32 %v0_b5cc, 9
  %v4_b5dc = inttoptr i32 %v3_b5dc to i8*
  store i8 17, i8* %v4_b5dc, align 1
  %v0_b5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b5e0 = trunc i32 %v0_b5e0 to i8
  %v2_b5e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e0 = inttoptr i32 %v2_b5e0 to i8*
  store i8 %v1_b5e0, i8* %v3_b5e0, align 1
  %v2_b5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5e8 = add i32 %v2_b5e8, 1
  %v4_b5e8 = inttoptr i32 %v3_b5e8 to i8*
  store i8 %v5_b384, i8* %v4_b5e8, align 1
  store i32 %v6_b3a0, i32* %ip.global-to-local, align 4
  %v2_b5f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b5f0 = add i32 %v2_b5f0, 8
  %v4_b5f0 = inttoptr i32 %v3_b5f0 to i8*
  store i8 %v5_b3bc, i8* %v4_b5f0, align 1
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5f4, i32* %r2.global-to-local, align 4
  %v3_b5f8 = mul i32 %v3_b5f4, 32
  store i32 %v3_b5f8, i32* %r3.global-to-local, align 4
  %v0_b5fc = load i32, i32* @fp, align 4
  %v1_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v2_b5fc = add i32 %v1_b5fc, 12
  %v3_b5fc = inttoptr i32 %v2_b5fc to i32*
  store i32 %v0_b5fc, i32* %v3_b5fc, align 4
  %v0_b600 = load i32, i32* %r3.global-to-local, align 4
  %v1_b600 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_b600, -8
  %v5_b600 = add i32 %v0_b600, %tmp66
  %v1_b604 = load i32, i32* @r8, align 4
  %v2_b604 = add i32 %v5_b600, %v1_b604
  store i32 %v2_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = add i32 %v2_b604, 16
  %v2_b608 = inttoptr i32 %v1_b608 to i32*
  %v3_b608 = load i32, i32* %v2_b608, align 4
  %v1_b60c = add i32 %v1_b600, 1
  store i32 %v1_b60c, i32* @r4, align 4
  store i32 %v4_b610, i32* %ip.global-to-local, align 4
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  %v1_b618 = load i32, i32* %r1.global-to-local, align 4
  %v2_b618 = add i32 %v1_b618, 16
  %v3_b618 = inttoptr i32 %v2_b618 to i32*
  store i32 %v3_b608, i32* %v3_b618, align 4
  store i32 %v4_b61c, i32* %r0.global-to-local, align 4
  %v0_b620 = load i32, i32* %ip.global-to-local, align 4
  %v1_b620 = trunc i32 %v0_b620 to i8
  %v2_b620 = load i32, i32* %r1.global-to-local, align 4
  %v3_b620 = add i32 %v2_b620, 2
  %v4_b620 = inttoptr i32 %v3_b620 to i8*
  store i8 %v1_b620, i8* %v4_b620, align 1
  %v0_b624 = load i32, i32* %r0.global-to-local, align 4
  %v1_b624 = trunc i32 %v0_b624 to i8
  %v2_b624 = load i32, i32* %r1.global-to-local, align 4
  %v3_b624 = add i32 %v2_b624, 3
  %v4_b624 = inttoptr i32 %v3_b624 to i8*
  store i8 %v1_b624, i8* %v4_b624, align 1
  store i32 %v4_b628, i32* %ip.global-to-local, align 4
  store i32 %v4_b62c, i32* %r0.global-to-local, align 4
  %v0_b630 = load i32, i32* @r4, align 4
  %v1_b630 = load i32, i32* %r2.global-to-local, align 4
  %v9_b630 = icmp eq i32 %v0_b630, %v1_b630
  store i1 %v9_b630, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b634, i32* %r2.global-to-local, align 4
  %v0_b638 = load i32, i32* %r1.global-to-local, align 4
  %v1_b638 = add i32 %v0_b638, 20
  store i32 %v1_b638, i32* %r3.global-to-local, align 4
  %v3_b63c = add i32 %v0_b638, 4
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v5_b560, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* %ip.global-to-local, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %r1.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 5
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  %v0_b644 = load i32, i32* @r5, align 4
  %v1_b644 = trunc i32 %v0_b644 to i8
  %v2_b644 = load i32, i32* %r1.global-to-local, align 4
  %v3_b644 = add i32 %v2_b644, 20
  %v4_b644 = inttoptr i32 %v3_b644 to i8*
  store i8 %v1_b644, i8* %v4_b644, align 1
  %v0_b648 = load i32, i32* @r7, align 4
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v2_b648 = load i32, i32* %r3.global-to-local, align 4
  %v3_b648 = add i32 %v2_b648, 5
  %v4_b648 = inttoptr i32 %v3_b648 to i8*
  store i8 %v1_b648, i8* %v4_b648, align 1
  %v0_b64c = load i32, i32* %r0.global-to-local, align 4
  %v1_b64c = trunc i32 %v0_b64c to i8
  %v2_b64c = load i32, i32* %r3.global-to-local, align 4
  %v3_b64c = add i32 %v2_b64c, 1
  %v4_b64c = inttoptr i32 %v3_b64c to i8*
  store i8 %v1_b64c, i8* %v4_b64c, align 1
  %v0_b650 = load i32, i32* @r6, align 4
  %v1_b650 = trunc i32 %v0_b650 to i8
  %v2_b650 = load i32, i32* %r3.global-to-local, align 4
  %v3_b650 = add i32 %v2_b650, 2
  %v4_b650 = inttoptr i32 %v3_b650 to i8*
  store i8 %v1_b650, i8* %v4_b650, align 1
  %v0_b654 = load i32, i32* %sl.global-to-local, align 4
  %v1_b654 = trunc i32 %v0_b654 to i8
  %v2_b654 = load i32, i32* %r3.global-to-local, align 4
  %v3_b654 = add i32 %v2_b654, 3
  %v4_b654 = inttoptr i32 %v3_b654 to i8*
  store i8 %v1_b654, i8* %v4_b654, align 1
  %v0_b658 = load i32, i32* %sb.global-to-local, align 4
  %v1_b658 = trunc i32 %v0_b658 to i8
  %v2_b658 = load i32, i32* %r3.global-to-local, align 4
  %v3_b658 = add i32 %v2_b658, 4
  %v4_b658 = inttoptr i32 %v3_b658 to i8*
  store i8 %v1_b658, i8* %v4_b658, align 1
  %v0_b65c = load i32, i32* @r4, align 4
  store i32 %v0_b65c, i32* %stack_var_-40, align 4
  %v5_b660 = icmp slt i32 %v0_b630, %v1_b630
  br i1 %v5_b660, label %dec_label_pc_b598, label %dec_label_pc_b664.preheader

dec_label_pc_b664.preheader:                      ; preds = %dec_label_pc_b8e4, %dec_label_pc_b598, %.dec_label_pc_b664.preheader_crit_edge
  %v1_b688.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_b664.preheader_crit_edge ], [ %v1_b50c, %dec_label_pc_b598 ], [ %v1_b50c, %dec_label_pc_b8e4 ]
  %v1_b684.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b664.preheader_crit_edge ], [ %v1_b510, %dec_label_pc_b598 ], [ %v1_b510, %dec_label_pc_b8e4 ]
  %v9_b814 = icmp eq i32 %v3_b4e4, ptrtoint (i32* @global_var_ffff.46 to i32)
  %v2_b6c8 = icmp eq i32 %v1_b440, 0
  br label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b664.preheader, %dec_label_pc_b890
  store i32 %v1_b320, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b4f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b4f0, label %dec_label_pc_b890, label %dec_label_pc_b678

dec_label_pc_b678:                                ; preds = %dec_label_pc_b664
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_b684.pre-phi, i32* @sb, align 4
  store i32 %v1_b688.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_b77c

dec_label_pc_b690:                                ; preds = %dec_label_pc_b77c
  %v0_b690 = load i32, i32* @fp, align 4
  %v7_b690 = icmp eq i32 %v0_b690, -1
  store i1 %v7_b690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b690, label %dec_label_pc_b804, label %dec_label_pc_b698

dec_label_pc_b698:                                ; preds = %dec_label_pc_b7a0, %dec_label_pc_b690
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_b814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b814, label %dec_label_pc_b820, label %dec_label_pc_b6ac

dec_label_pc_b6ac:                                ; preds = %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge, %dec_label_pc_b698
  %v1_b6b0 = phi i32 [ %v1_b6b0.pre, %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_b698 ]
  store i32 %v3_b4e8, i32* %r0.global-to-local, align 4
  %v9_b6b0 = icmp eq i32 %v3_b4e8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6b0, label %dec_label_pc_b83c, label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge, %dec_label_pc_b6ac
  %v1_b6bc = phi i32 [ %v1_b6bc.pre, %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge ], [ %v1_b6b0, %dec_label_pc_b6ac ]
  store i32 %v3_b4ec, i32* %r1.global-to-local, align 4
  %v9_b6bc = icmp eq i32 %v3_b4ec, %v1_b6bc
  store i1 %v9_b6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6bc, label %dec_label_pc_b858, label %dec_label_pc_b6c4

dec_label_pc_b6c4:                                ; preds = %dec_label_pc_b83c, %dec_label_pc_b6b8
  store i32 %v1_b440, i32* %r2.global-to-local, align 4
  store i1 %v2_b6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6c8, label %dec_label_pc_b6d0, label %dec_label_pc_b874

dec_label_pc_b6d0:                                ; preds = %dec_label_pc_b6c4, %dec_label_pc_b858, %dec_label_pc_b874
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r7, align 4
  %v1_b6d4 = trunc i32 %v0_b6d4 to i8
  %v2_b6d4 = load i32, i32* @r5, align 4
  %v3_b6d4 = add i32 %v2_b6d4, 10
  %v4_b6d4 = inttoptr i32 %v3_b6d4 to i8*
  store i8 %v1_b6d4, i8* %v4_b6d4, align 1
  %v0_b6d8 = load i32, i32* @r7, align 4
  %v1_b6d8 = trunc i32 %v0_b6d8 to i8
  %v2_b6d8 = load i32, i32* @r5, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 11
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 %v1_b6d8, i8* %v4_b6d8, align 1
  %v0_b6dc = load i32, i32* @r5, align 4
  store i32 %v0_b6dc, i32* @r0, align 4
  %v2_b6e0 = call i32 @function_c690(i32 %v0_b6dc, i32 20)
  %v3_b6e0 = trunc i32 %v2_b6e0 to i8
  store i32 %v2_b6e0, i32* %r0.global-to-local, align 4
  %v4_b6e4 = sdiv i32 %v2_b6e0, 256
  store i32 %v4_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v4_b6e4 to i8
  %v2_b6e8 = load i32, i32* @r5, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 11
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v3_b6ec = load i32, i32* @r5, align 4
  %v4_b6ec = add i32 %v3_b6ec, 10
  %v5_b6ec = inttoptr i32 %v4_b6ec to i8*
  store i8 %v3_b6e0, i8* %v5_b6ec, align 1
  %v0_b6f0 = load i32, i32* @r7, align 4
  %v1_b6f0 = trunc i32 %v0_b6f0 to i8
  %v2_b6f0 = load i32, i32* @r6, align 4
  %v3_b6f0 = add i32 %v2_b6f0, 6
  %v4_b6f0 = inttoptr i32 %v3_b6f0 to i8*
  store i8 %v1_b6f0, i8* %v4_b6f0, align 1
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v1_b6f4 = trunc i32 %v0_b6f4 to i8
  %v2_b6f4 = load i32, i32* @r6, align 4
  %v3_b6f4 = add i32 %v2_b6f4, 7
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i8*
  store i8 %v1_b6f4, i8* %v4_b6f4, align 1
  %v0_b6f8 = load i32, i32* @r5, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 24
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  store i32 %v4_b6f8, i32* %r3.global-to-local, align 4
  %v1_b6fc = add i32 %v0_b6f8, 25
  %v2_b6fc = inttoptr i32 %v1_b6fc to i8*
  %v3_b6fc = load i8, i8* %v2_b6fc, align 1
  %v4_b6fc = zext i8 %v3_b6fc to i32
  %v0_b700 = load i32, i32* @r6, align 4
  store i32 %v0_b700, i32* @r1, align 4
  %v4_b704 = mul nuw nsw i32 %v4_b6fc, 256
  %v5_b704 = or i32 %v4_b704, %v4_b6f8
  store i32 %v5_b704, i32* %r2.global-to-local, align 4
  store i32 %v0_b6f8, i32* %r0.global-to-local, align 4
  %v0_b70c = load i32, i32* @sb, align 4
  store i32 %v0_b70c, i32* %r3.global-to-local, align 4
  %v4_b710 = call i32 @function_c6ec(i32 %v0_b6f8, i32 %v0_b700, i32 %v5_b704, i32 %v0_b70c)
  %v5_b710 = trunc i32 %v4_b710 to i8
  store i32 %v4_b710, i32* %r0.global-to-local, align 4
  %v4_b71424 = udiv i32 %v4_b710, 256
  %v1_b718 = trunc i32 %v4_b71424 to i8
  %v2_b718 = load i32, i32* @r6, align 4
  %v3_b718 = add i32 %v2_b718, 7
  %v4_b718 = inttoptr i32 %v3_b718 to i8*
  store i8 %v1_b718, i8* %v4_b718, align 1
  %v3_b71c = load i32, i32* @r6, align 4
  %v4_b71c = add i32 %v3_b71c, 6
  %v5_b71c = inttoptr i32 %v4_b71c to i8*
  store i8 %v5_b710, i8* %v5_b71c, align 1
  %v3_b720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b720, i32* %r3.global-to-local, align 4
  %v0_b724 = load i32, i32* @r5, align 4
  %v1_b724 = add i32 %v0_b724, 20
  %v2_b724 = inttoptr i32 %v1_b724 to i32*
  %v3_b724 = load i32, i32* %v2_b724, align 4
  %v3_b72c = udiv i32 %v3_b724, 65536
  store i32 %v3_b72c, i32* %r2.global-to-local, align 4
  %v5_b730 = mul i32 %v3_b720, 24
  %v1_b734 = load i32, i32* @r8, align 4
  %v2_b734 = add i32 %v1_b734, %v5_b730
  store i32 %v2_b734, i32* %ip.global-to-local, align 4
  %v3_b73821 = udiv i32 %v3_b724, 16777216
  %v1_b73c = trunc i32 %v3_b73821 to i8
  %v3_b73c = add i32 %v2_b734, 3
  %v4_b73c = inttoptr i32 %v3_b73c to i8*
  store i8 %v1_b73c, i8* %v4_b73c, align 1
  %v0_b740 = load i32, i32* %r2.global-to-local, align 4
  %v1_b740 = trunc i32 %v0_b740 to i8
  %v2_b740 = load i32, i32* %ip.global-to-local, align 4
  %v3_b740 = add i32 %v2_b740, 2
  %v4_b740 = inttoptr i32 %v3_b740 to i8*
  store i8 %v1_b740, i8* %v4_b740, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b74c = load i32, i32* @r5, align 4
  store i32 %v0_b74c, i32* %r1.global-to-local, align 4
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v0_b754 = load i32, i32* @sl, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  %v0_b75c = load i32, i32* %ip.global-to-local, align 4
  %v6_b760 = inttoptr i32 %v0_b74c to i32*
  %v7_b760 = call i32 @function_114ec(i32 %v3_b478, i32* %v6_b760, i32 %v0_b754, i32 16384, i32 %v0_b75c, i32 16)
  %v3_b764 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b764, i32* %r3.global-to-local, align 4
  store i32 %v1_b320, i32* @r4, align 4
  %v1_b76c = add i32 %v3_b764, 1
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  %v9_b770 = icmp eq i32 %v1_b76c, %v1_b320
  store i1 %v9_b770, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b76c, i32* %stack_var_-40, align 4
  %v6_b778 = icmp slt i32 %v1_b76c, %v1_b320
  br i1 %v6_b778, label %dec_label_pc_b77c, label %dec_label_pc_b890

dec_label_pc_b77c:                                ; preds = %dec_label_pc_b6d0, %dec_label_pc_b678
  %v1_b790 = phi i32 [ %v1_b76c, %dec_label_pc_b6d0 ], [ 0, %dec_label_pc_b678 ]
  %v5_b780 = mul i32 %v1_b790, 24
  %v1_b784 = load i32, i32* @r8, align 4
  %v2_b784 = add i32 %v1_b784, %v5_b780
  store i32 %v2_b784, i32* %r3.global-to-local, align 4
  %v1_b78c = add i32 %v2_b784, 20
  %v2_b78c = inttoptr i32 %v1_b78c to i8*
  %v3_b78c = load i8, i8* %v2_b78c, align 1
  %v4_b78c = zext i8 %v3_b78c to i32
  store i32 %v4_b78c, i32* %r2.global-to-local, align 4
  %v4_b790 = mul i32 %v1_b790, 4
  %v5_b790 = add i32 %v4_b790, %v2_b34c
  %v6_b790 = inttoptr i32 %v5_b790 to i32*
  %v7_b790 = load i32, i32* %v6_b790, align 4
  store i32 %v7_b790, i32* @r5, align 4
  %v2_b794 = icmp ugt i8 %v3_b78c, 30
  %v7_b794 = icmp eq i8 %v3_b78c, 31
  store i1 %v7_b794, i1* %cpsr_z.global-to-local, align 1
  %v1_b798 = add i32 %v7_b790, 20
  store i32 %v1_b798, i32* @r6, align 4
  %v2_b79c = xor i1 %v7_b794, true
  %v3_b79c = and i1 %v2_b794, %v2_b79c
  br i1 %v3_b79c, label %dec_label_pc_b690, label %dec_label_pc_b7a0

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b77c
  %v1_b7a0 = add i32 %v2_b784, 16
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  %v0_b7a4 = call i32 @function_dab8()
  store i32 %v0_b7a4, i32* %r0.global-to-local, align 4
  %v3_b7a8 = load i32, i32* %stack_var_-40, align 4
  %v5_b7b0 = mul i32 %v3_b7a8, 24
  %v1_b7b8 = load i32, i32* @r8, align 4
  %v2_b7b8 = add i32 %v1_b7b8, %v5_b7b0
  store i32 %v2_b7b8, i32* %r1.global-to-local, align 4
  %v1_b7bc = and i32 %v3_b7a0, 65280
  store i32 %v1_b7bc, i32* %r3.global-to-local, align 4
  %v1_b7b4 = udiv i32 %v3_b7a0, 256
  %v3_b7c0 = and i32 %v1_b7b4, 65280
  store i32 %v3_b7c0, i32* %r2.global-to-local, align 4
  %v3_b7c4 = mul i32 %v3_b7a0, 16777216
  store i32 %v3_b7c4, i32* %ip.global-to-local, align 4
  %v1_b7c8 = add i32 %v2_b7b8, 20
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i8*
  %v3_b7c8 = load i8, i8* %v2_b7c8, align 1
  %v4_b7c8 = zext i8 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* @lr, align 4
  %v4_b7cc = mul nuw nsw i32 %v1_b7bc, 256
  %v5_b7cc = or i32 %v4_b7cc, %v3_b7c4
  store i32 %v5_b7cc, i32* %ip.global-to-local, align 4
  %v2_b7d4 = call i32 @llvm.bswap.i32(i32 %v3_b7a0)
  %v7_b7d8 = lshr i32 %v0_b7a4, %v4_b7c8
  %v8_b7d8 = add i32 %v7_b7d8, %v2_b7d4
  store i32 %v8_b7d8, i32* %r2.global-to-local, align 4
  %v3_b7e4 = mul i32 %v8_b7d8, 16777216
  %v1_b7e8 = and i32 %v8_b7d8, 65280
  store i32 %v1_b7e8, i32* %r0.global-to-local, align 4
  %v4_b7ec = mul nuw nsw i32 %v1_b7e8, 256
  %v5_b7ec = or i32 %v4_b7ec, %v3_b7e4
  store i32 %v5_b7ec, i32* %r1.global-to-local, align 4
  %v2_b7f4 = call i32 @llvm.bswap.i32(i32 %v8_b7d8)
  store i32 %v2_b7f4, i32* %r3.global-to-local, align 4
  %v0_b7f8 = load i32, i32* @fp, align 4
  %v3_b7f8 = icmp eq i32 %v0_b7f8, -1
  %v8_b7f8 = icmp eq i32 %v0_b7f8, -1
  store i1 %v8_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b7fc = load i32, i32* @r5, align 4
  %v2_b7fc = add i32 %v1_b7fc, 16
  %v3_b7fc = inttoptr i32 %v2_b7fc to i32*
  store i32 %v2_b7f4, i32* %v3_b7fc, align 4
  br i1 %v3_b7f8, label %dec_label_pc_b804, label %dec_label_pc_b698

dec_label_pc_b804:                                ; preds = %dec_label_pc_b7a0, %dec_label_pc_b690
  %v0_b804 = call i32 @function_dab8()
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  store i32 %v3_b4e4, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r4, align 4
  store i1 %v9_b814, i1* %cpsr_z.global-to-local, align 1
  %v1_b818 = load i32, i32* @r5, align 4
  %v2_b818 = add i32 %v1_b818, 12
  %v3_b818 = inttoptr i32 %v2_b818 to i32*
  store i32 %v0_b804, i32* %v3_b818, align 4
  br i1 %v9_b814, label %dec_label_pc_b820, label %dec_label_pc_b804.dec_label_pc_b6ac_crit_edge

dec_label_pc_b804.dec_label_pc_b6ac_crit_edge:    ; preds = %dec_label_pc_b804
  %v1_b6b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6ac

dec_label_pc_b820:                                ; preds = %dec_label_pc_b804, %dec_label_pc_b698
  %v0_b820 = call i32 @function_dab8()
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v4_b824 = sdiv i32 %v0_b820, 256
  store i32 %v4_b824, i32* %r3.global-to-local, align 4
  %v3_b828 = load i32, i32* @r5, align 4
  %v4_b828 = add i32 %v3_b828, 4
  %v5_b828 = inttoptr i32 %v4_b828 to i8*
  store i8 %v1_b820, i8* %v5_b828, align 1
  store i32 %v3_b4e8, i32* %r0.global-to-local, align 4
  %v1_b830 = load i32, i32* @r4, align 4
  %v9_b830 = icmp eq i32 %v3_b4e8, %v1_b830
  store i1 %v9_b830, i1* %cpsr_z.global-to-local, align 1
  %v0_b834 = load i32, i32* %r3.global-to-local, align 4
  %v1_b834 = trunc i32 %v0_b834 to i8
  %v2_b834 = load i32, i32* @r5, align 4
  %v3_b834 = add i32 %v2_b834, 5
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 %v1_b834, i8* %v4_b834, align 1
  %v0_b838 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b838, label %dec_label_pc_b83c, label %dec_label_pc_b820.dec_label_pc_b6b8_crit_edge

dec_label_pc_b820.dec_label_pc_b6b8_crit_edge:    ; preds = %dec_label_pc_b820
  %v1_b6bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b83c:                                ; preds = %dec_label_pc_b820, %dec_label_pc_b6ac
  %v0_b83c = call i32 @function_dab8()
  %v1_b83c = trunc i32 %v0_b83c to i8
  store i32 %v0_b83c, i32* %r0.global-to-local, align 4
  store i32 %v3_b4ec, i32* %r1.global-to-local, align 4
  %v4_b844 = sdiv i32 %v0_b83c, 256
  store i32 %v4_b844, i32* %r3.global-to-local, align 4
  %v1_b848 = load i32, i32* @r4, align 4
  %v9_b848 = icmp eq i32 %v3_b4ec, %v1_b848
  store i1 %v9_b848, i1* %cpsr_z.global-to-local, align 1
  %v3_b84c = load i32, i32* @r5, align 4
  %v4_b84c = add i32 %v3_b84c, 20
  %v5_b84c = inttoptr i32 %v4_b84c to i8*
  store i8 %v1_b83c, i8* %v5_b84c, align 1
  %v0_b850 = load i32, i32* %r3.global-to-local, align 4
  %v1_b850 = trunc i32 %v0_b850 to i8
  %v2_b850 = load i32, i32* @r6, align 4
  %v3_b850 = add i32 %v2_b850, 1
  %v4_b850 = inttoptr i32 %v3_b850 to i8*
  store i8 %v1_b850, i8* %v4_b850, align 1
  %v0_b854 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b854, label %dec_label_pc_b858, label %dec_label_pc_b6c4

dec_label_pc_b858:                                ; preds = %dec_label_pc_b83c, %dec_label_pc_b6b8
  %v0_b858 = call i32 @function_dab8()
  %v1_b858 = trunc i32 %v0_b858 to i8
  store i32 %v0_b858, i32* %r0.global-to-local, align 4
  store i32 %v1_b440, i32* %r2.global-to-local, align 4
  %v4_b860 = sdiv i32 %v0_b858, 256
  store i32 %v4_b860, i32* %r3.global-to-local, align 4
  store i1 %v2_b6c8, i1* %cpsr_z.global-to-local, align 1
  %v1_b868 = trunc i32 %v4_b860 to i8
  %v2_b868 = load i32, i32* @r6, align 4
  %v3_b868 = add i32 %v2_b868, 3
  %v4_b868 = inttoptr i32 %v3_b868 to i8*
  store i8 %v1_b868, i8* %v4_b868, align 1
  %v3_b86c = load i32, i32* @r6, align 4
  %v4_b86c = add i32 %v3_b86c, 2
  %v5_b86c = inttoptr i32 %v4_b86c to i8*
  store i8 %v1_b858, i8* %v5_b86c, align 1
  %v0_b870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b870, label %dec_label_pc_b6d0, label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b6c4, %dec_label_pc_b858
  %v0_b874 = load i32, i32* @r5, align 4
  %v1_b874 = add i32 %v0_b874, 28
  store i32 %v1_b874, i32* @r4, align 4
  store i32 %v1_b874, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  %v2_b880 = call i32 @function_db6c(i32 %v1_b874, i32 %v0_b4c8)
  store i32 %v2_b880, i32* %r0.global-to-local, align 4
  store i32 %v0_b4c8, i32* %r3.global-to-local, align 4
  %v0_b888 = load i32, i32* @r7, align 4
  %v1_b888 = trunc i32 %v0_b888 to i8
  %v2_b888 = load i32, i32* @r4, align 4
  %v4_b888 = add i32 %v2_b888, %v0_b4c8
  %v5_b888 = inttoptr i32 %v4_b888 to i8*
  store i8 %v1_b888, i8* %v5_b888, align 1
  br label %dec_label_pc_b6d0

dec_label_pc_b890:                                ; preds = %dec_label_pc_b6d0, %dec_label_pc_b664
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b894 = call i32 @function_10f4c(i32* null)
  store i32 %v2_b894, i32* %r0.global-to-local, align 4
  store i32 %v2_b464, i32* %sb.global-to-local, align 4
  %v9_b89c = icmp eq i32 %v2_b464, %v2_b894
  store i1 %v9_b89c, i1* %cpsr_z.global-to-local, align 1
  %v6_b8a0 = icmp slt i32 %v2_b464, %v2_b894
  br i1 %v6_b8a0, label %dec_label_pc_b8a4, label %dec_label_pc_b664

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b890, %dec_label_pc_b31c, %dec_label_pc_b8ac
  %v29_b8a8 = phi i32 [ %v3_b478, %dec_label_pc_b31c ], [ %v1_b8b0, %dec_label_pc_b8ac ], [ %v2_b894, %dec_label_pc_b890 ]
  store i32 %v18_b31c, i32* %sb.global-to-local, align 4
  store i32 %v21_b31c, i32* %sl.global-to-local, align 4
  ret i32 %v29_b8a8

dec_label_pc_b8ac:                                ; preds = %dec_label_pc_b488
  store i32 %v3_b478, i32* %r0.global-to-local, align 4
  %v1_b8b0 = call i32 @function_10c7c(i32 %v3_b478)
  store i32 %v1_b8b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8a4

dec_label_pc_b8b8:                                ; preds = %dec_label_pc_b508
  %v3_b8bc = sext i8 %v5_b55c to i32
  %v7_b8bc = sext i8 %v5_b560 to i32
  %v3_b8c0 = sdiv i32 %v3_b8bc, 256
  store i32 %v3_b8c0, i32* %r1.global-to-local, align 4
  %v3_b8c4 = sdiv i32 %v7_b8bc, 256
  store i32 %v3_b8c4, i32* %r2.global-to-local, align 4
  store i32 %v1_b514, i32* %r3.global-to-local, align 4
  store i32 %v0_b4f4, i32* @r4, align 4
  store i32 %v1_b558, i32* %sl.global-to-local, align 4
  %v3_b8e020 = udiv i32 %v1_b54c, 256
  store i32 %v3_b8e020, i32* @r7, align 4
  %sext9 = mul i32 %v6_b3e4, 16777216
  %v4_b99c = sdiv i32 %sext9, 16777216
  %v1_b98c = trunc i32 %v3_b8c0 to i8
  br label %dec_label_pc_b8e4

dec_label_pc_b8e4:                                ; preds = %dec_label_pc_b8e4, %dec_label_pc_b8b8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b8f0 = call i32 @function_1183c(i32 1510, i32 1)
  store i32 %v2_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v3_b8f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8f8, i32* %r2.global-to-local, align 4
  %v2_b8fc = load i32, i32* @r4, align 4
  %v5_b8fc = mul i32 %v2_b8fc, 4
  %v6_b8fc = add i32 %v5_b8fc, %v2_b34c
  %v7_b8fc = inttoptr i32 %v6_b8fc to i32*
  store i32 %v2_b8f0, i32* %v7_b8fc, align 4
  %v0_b900 = load i32, i32* %ip.global-to-local, align 4
  %v1_b900 = load i32, i32* %r2.global-to-local, align 4
  %v4_b900 = mul i32 %v1_b900, 4
  %v5_b900 = add i32 %v4_b900, %v0_b900
  %v6_b900 = inttoptr i32 %v5_b900 to i32*
  %v7_b900 = load i32, i32* %v6_b900, align 4
  store i32 %v7_b900, i32* %r1.global-to-local, align 4
  %v1_b904 = inttoptr i32 %v7_b900 to i8*
  %v2_b904 = load i8, i8* %v1_b904, align 1
  %tmp67 = urem i8 %v2_b904, 16
  %v1_b908 = zext i8 %tmp67 to i32
  %v1_b90c = or i32 %v1_b908, 64
  store i32 %v1_b90c, i32* %r3.global-to-local, align 4
  %v1_b910 = trunc i32 %v1_b90c to i8
  store i8 %v1_b910, i8* %v1_b904, align 1
  %v0_b914 = load i32, i32* %r1.global-to-local, align 4
  %v1_b914 = inttoptr i32 %v0_b914 to i8*
  %v2_b914 = load i8, i8* %v1_b914, align 1
  %v3_b914 = zext i8 %v2_b914 to i32
  %v1_b918 = and i32 %v3_b914, 240
  %v1_b91c = or i32 %v1_b918, 5
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v3_b924 = add i32 %v0_b914, 9
  %v4_b924 = inttoptr i32 %v3_b924 to i8*
  store i8 17, i8* %v4_b924, align 1
  %v0_b928 = load i32, i32* %r2.global-to-local, align 4
  %v1_b928 = trunc i32 %v0_b928 to i8
  %v2_b928 = load i32, i32* %r1.global-to-local, align 4
  %v3_b928 = inttoptr i32 %v2_b928 to i8*
  store i8 %v1_b928, i8* %v3_b928, align 1
  store i32 %v6_b364, i32* %r0.global-to-local, align 4
  %v2_b930 = load i32, i32* %r1.global-to-local, align 4
  %v3_b930 = add i32 %v2_b930, 1
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v5_b384, i8* %v4_b930, align 1
  %v2_b938 = load i32, i32* %r1.global-to-local, align 4
  %v3_b938 = add i32 %v2_b938, 8
  %v4_b938 = inttoptr i32 %v3_b938 to i8*
  store i8 %v5_b3bc, i8* %v4_b938, align 1
  %v3_b93c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b93c, i32* %r2.global-to-local, align 4
  %v3_b940 = mul i32 %v3_b93c, 32
  store i32 %v3_b940, i32* %r3.global-to-local, align 4
  %v0_b944 = load i32, i32* @fp, align 4
  %v1_b944 = load i32, i32* %r1.global-to-local, align 4
  %v2_b944 = add i32 %v1_b944, 12
  %v3_b944 = inttoptr i32 %v2_b944 to i32*
  store i32 %v0_b944, i32* %v3_b944, align 4
  %v0_b948 = load i32, i32* %r3.global-to-local, align 4
  %v1_b948 = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_b948, -8
  %v5_b948 = add i32 %v0_b948, %tmp68
  %v1_b94c = load i32, i32* @r8, align 4
  %v2_b94c = add i32 %v5_b948, %v1_b94c
  store i32 %v2_b94c, i32* %r3.global-to-local, align 4
  %v1_b950 = add i32 %v2_b94c, 16
  %v2_b950 = inttoptr i32 %v1_b950 to i32*
  %v3_b950 = load i32, i32* %v2_b950, align 4
  store i32 %v1_b320, i32* %r3.global-to-local, align 4
  %v1_b958 = add i32 %v1_b948, 1
  store i32 %v1_b958, i32* @r4, align 4
  %v1_b95c = load i32, i32* %r1.global-to-local, align 4
  %v2_b95c = add i32 %v1_b95c, 16
  %v3_b95c = inttoptr i32 %v2_b95c to i32*
  store i32 %v3_b950, i32* %v3_b95c, align 4
  store i32 %v3_b8bc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_b968 = load i32, i32* @r4, align 4
  %v1_b968 = load i32, i32* %r3.global-to-local, align 4
  %v9_b968 = icmp eq i32 %v0_b968, %v1_b968
  store i1 %v9_b968, i1* %cpsr_z.global-to-local, align 1
  %v2_b970 = load i32, i32* %r1.global-to-local, align 4
  %v3_b970 = add i32 %v2_b970, 6
  %v4_b970 = inttoptr i32 %v3_b970 to i8*
  store i8 64, i8* %v4_b970, align 1
  %v0_b974 = load i32, i32* %r2.global-to-local, align 4
  %v1_b974 = trunc i32 %v0_b974 to i8
  %v2_b974 = load i32, i32* %r1.global-to-local, align 4
  %v3_b974 = add i32 %v2_b974, 7
  %v4_b974 = inttoptr i32 %v3_b974 to i8*
  store i8 %v1_b974, i8* %v4_b974, align 1
  %v0_b978 = load i32, i32* %ip.global-to-local, align 4
  %v1_b978 = trunc i32 %v0_b978 to i8
  %v2_b978 = load i32, i32* %r1.global-to-local, align 4
  %v3_b978 = add i32 %v2_b978, 2
  %v4_b978 = inttoptr i32 %v3_b978 to i8*
  store i8 %v1_b978, i8* %v4_b978, align 1
  store i32 %v3_b8c0, i32* %r2.global-to-local, align 4
  store i32 %v7_b8bc, i32* %r3.global-to-local, align 4
  store i32 %v3_b8c4, i32* %ip.global-to-local, align 4
  %v0_b988 = load i32, i32* %r1.global-to-local, align 4
  %v1_b988 = add i32 %v0_b988, 20
  store i32 %v1_b988, i32* %r0.global-to-local, align 4
  %v3_b98c = add i32 %v0_b988, 3
  %v4_b98c = inttoptr i32 %v3_b98c to i8*
  store i8 %v1_b98c, i8* %v4_b98c, align 1
  %v0_b990 = load i32, i32* %r3.global-to-local, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %r1.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 4
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* %ip.global-to-local, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %r1.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 5
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  %v0_b998 = load i32, i32* @r5, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %r1.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 20
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  store i32 %v4_b99c, i32* %r1.global-to-local, align 4
  %v0_b9a0 = load i32, i32* @r7, align 4
  %v1_b9a0 = trunc i32 %v0_b9a0 to i8
  %v2_b9a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a0 = add i32 %v2_b9a0, 5
  %v4_b9a0 = inttoptr i32 %v3_b9a0 to i8*
  store i8 %v1_b9a0, i8* %v4_b9a0, align 1
  %v0_b9a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9a4 = trunc i32 %v0_b9a4 to i8
  %v2_b9a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a4 = add i32 %v2_b9a4, 1
  %v4_b9a4 = inttoptr i32 %v3_b9a4 to i8*
  store i8 %v1_b9a4, i8* %v4_b9a4, align 1
  %v0_b9a8 = load i32, i32* @r6, align 4
  %v1_b9a8 = trunc i32 %v0_b9a8 to i8
  %v2_b9a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a8 = add i32 %v2_b9a8, 2
  %v4_b9a8 = inttoptr i32 %v3_b9a8 to i8*
  store i8 %v1_b9a8, i8* %v4_b9a8, align 1
  %v0_b9ac = load i32, i32* %sl.global-to-local, align 4
  %v1_b9ac = trunc i32 %v0_b9ac to i8
  %v2_b9ac = load i32, i32* %r0.global-to-local, align 4
  %v3_b9ac = add i32 %v2_b9ac, 3
  %v4_b9ac = inttoptr i32 %v3_b9ac to i8*
  store i8 %v1_b9ac, i8* %v4_b9ac, align 1
  %v0_b9b0 = load i32, i32* %sb.global-to-local, align 4
  %v1_b9b0 = trunc i32 %v0_b9b0 to i8
  %v2_b9b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9b0 = add i32 %v2_b9b0, 4
  %v4_b9b0 = inttoptr i32 %v3_b9b0 to i8*
  store i8 %v1_b9b0, i8* %v4_b9b0, align 1
  %v0_b9b4 = load i32, i32* @r4, align 4
  store i32 %v0_b9b4, i32* %stack_var_-40, align 4
  %v5_b9b8 = icmp slt i32 %v0_b968, %v1_b968
  br i1 %v5_b9b8, label %dec_label_pc_b8e4, label %dec_label_pc_b664.preheader

; uselistorder directives
  uselistorder i32 %v1_b948, { 1, 0 }
  uselistorder i32 %v3_b8c4, { 1, 0 }
  uselistorder i32 %v3_b8c0, { 2, 1, 0 }
  uselistorder i32 %v7_b8bc, { 1, 0 }
  uselistorder i32 %v3_b8bc, { 1, 0 }
  uselistorder i32 %v1_b8b0, { 1, 0 }
  uselistorder i32 %v4_b860, { 1, 0 }
  uselistorder i32 %v0_b858, { 0, 2, 1 }
  uselistorder i32 %v0_b83c, { 0, 2, 1 }
  uselistorder i32 %v2_b7f4, { 1, 0 }
  uselistorder i32 %v8_b7d8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b7c4, { 1, 0 }
  uselistorder i32 %v3_b7a0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b76c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_b710, { 0, 2, 1 }
  uselistorder i32 %v0_b6f8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b6e4, { 1, 0 }
  uselistorder i32 %v2_b6e0, { 0, 2, 1 }
  uselistorder i1 %v7_b690, { 1, 0 }
  uselistorder i1 %v9_b814, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b600, { 1, 0 }
  uselistorder i8 %v5_b560, { 0, 2, 1 }
  uselistorder i8 %v5_b55c, { 1, 0 }
  uselistorder i32 %v1_b558, { 1, 2, 0 }
  uselistorder i32 %v3_b544, { 1, 0 }
  uselistorder i32 %v1_b530, { 1, 0 }
  uselistorder i32 %v1_b514, { 1, 2, 0 }
  uselistorder i32 %v1_b510, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_b50c, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_b4f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b4e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_b4d8, { 1, 0, 2 }
  uselistorder i32 %v0_b4c8, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_b4bc, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b4a8, { 1, 0 }
  uselistorder i1 %v7_b47c, { 1, 0 }
  uselistorder i32 %v3_b478, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b464, { 2, 1, 0 }
  uselistorder i32 %v1_b440, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v6_b3e4, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %v1_b3cc, { 2, 1, 0 }
  uselistorder i32 %v6_b3a0, { 2, 1, 3, 0 }
  uselistorder i32 %v7_b388, { 0, 2, 1, 4, 3, 5, 6 }
  uselistorder i32 %v6_b364, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b34c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v1_b320, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 18, 16, 20, 19, 22, 21, 23, 25, 24, 32, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_b8a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %dec_label_pc_b6d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b664, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_b9c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b9c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b9c4 = load i32, i32* @r4, align 4
  %v12_b9c4 = load i32, i32* @r7, align 4
  %v15_b9c4 = load i32, i32* @r8, align 4
  %v1_b9c8 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_b9e4 = urem i32 %arg4, 256
  store i32 %v1_b9e4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b9f4 = call i32 @function_1183c(i32 %v1_b9c8, i32 4)
  %v0_b9f8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r7, align 4
  store i32 %v0_ba00, i32* %r3.global-to-local, align 4
  store i32 %v2_b9f4, i32* %fp.global-to-local, align 4
  %v0_ba08 = load i32, i32* @r4, align 4
  %v5_ba0c = inttoptr i32 %v0_b9f8 to i32*
  %v6_ba0c = call i32 @function_829c(i32 %v0_ba08, i32* %v5_ba0c, i32 2, i32 %v0_ba00, i32 ptrtoint (i32* @0 to i32))
  %v1_ba18 = urem i32 %v6_ba0c, 256
  store i32 %v1_ba18, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ba24 = load i32, i32* @r4, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v5_ba2c = trunc i32 %v6_ba0c to i8
  %v6_ba30 = inttoptr i32 %v0_ba28 to i32*
  %v7_ba30 = call i32 @function_829c(i32 %v0_ba24, i32* %v6_ba30, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_ba0c)
  %v0_ba34 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ba48 = inttoptr i32 %v0_ba34 to i32*
  %v6_ba48 = call i32 @function_829c(i32 %v0_ba40, i32* %v5_ba48, i32 4, i32 64, i32 %v7_ba30)
  %v1_ba50 = urem i32 %v6_ba48, 256
  store i32 %v1_ba50, i32* %ip.global-to-local, align 4
  %v0_ba54 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r7, align 4
  store i32 %v0_ba5c, i32* %r3.global-to-local, align 4
  %v0_ba60 = load i32, i32* @r4, align 4
  %sext8 = mul i32 %v6_ba48, 16777216
  %v5_ba68 = sdiv i32 %sext8, 16777216
  %v6_ba68 = inttoptr i32 %v0_ba54 to i32*
  %v7_ba68 = call i32 @function_829c(i32 %v0_ba60, i32* %v6_ba68, i32 5, i32 %v0_ba5c, i32 %v5_ba68)
  %v1_ba74 = urem i32 %v7_ba68, 256
  store i32 %v1_ba74, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba80 = load i32, i32* @r4, align 4
  %v0_ba84 = load i32, i32* @r5, align 4
  %v5_ba8c = inttoptr i32 %v0_ba84 to i32*
  %v6_ba8c = call i32 @function_829c(i32 %v0_ba80, i32* %v5_ba8c, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_ba74)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r5, align 4
  store i32 %v6_ba8c, i32* @r8, align 4
  %v0_baa4 = load i32, i32* @r4, align 4
  %v5_baa8 = inttoptr i32 %v0_ba9c to i32*
  %v6_baa8 = call i32 @function_829c(i32 %v0_baa4, i32* %v5_baa8, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_baa8, i32* @r4, align 4
  %v0_bab0 = load i32, i32* @r7, align 4
  store i32 %v0_bab0, i32* %stack_var_-44, align 4
  %v1_bab8 = inttoptr i32 %v0_bab0 to i32*
  %v2_bab8 = call i32 @function_10f4c(i32* %v1_bab8)
  %v1_babc = load i32, i32* @r6, align 4
  %v2_babc = add i32 %v1_babc, %v2_bab8
  %v1_bac8 = call i32 @function_ff28(i32 10)
  %v3_bad4 = call i32 @function_fe44(i32 10, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_bae8 = call i32 @function_11550(i32 2, i32 3, i32 17)
  %v7_baec = icmp eq i32 %v3_bae8, -1
  store i1 %v7_baec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bae8, i32* %sb.global-to-local, align 4
  br i1 %v7_baec, label %dec_label_pc_bea8, label %dec_label_pc_baf8

dec_label_pc_baf8:                                ; preds = %dec_label_pc_b9c4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb00 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb00, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bb08 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb14 = call i32 @function_11520(i32 %v3_bae8, i32 %v0_bb08, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_bb18 = icmp eq i32 %v6_bb14, -1
  store i1 %v7_bb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb18, label %dec_label_pc_beb0, label %dec_label_pc_bb20

dec_label_pc_bb20:                                ; preds = %dec_label_pc_baf8
  %v0_bb24 = load i32, i32* @r4, align 4
  %v3_bb24 = mul i32 %v0_bb24, 65536
  store i32 %v3_bb24, i32* @lr, align 4
  %v3_bb30 = urem i32 %v7_ba30, 65536
  %v0_bb34 = load i32, i32* @r8, align 4
  %v3_bb34 = mul i32 %v0_bb34, 65536
  store i32 %v3_bb34, i32* %ip.global-to-local, align 4
  %v2_bb38 = icmp eq i32 %v1_b9c8, 0
  store i1 %v2_bb38, i1* %cpsr_z.global-to-local, align 1
  %v3_bb40 = urem i32 %v0_bb34, 65536
  store i32 %v3_bb40, i32* %r4.global-to-local, align 4
  %v3_bb44 = urem i32 %v0_bb24, 65536
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %stack_var_-40, align 4
  br i1 %v2_bb38, label %dec_label_pc_be94.critedge, label %dec_label_pc_bb58

dec_label_pc_bb58:                                ; preds = %dec_label_pc_bb20
  %v1_bb58 = urem i32 %v0_bb34, 256
  %v1_bb60 = urem i32 %v0_bb24, 256
  %tmp41 = udiv i32 %v7_ba30, 256
  %v3_bb64 = urem i32 %tmp41, 256
  %v3_bb6c = mul nuw nsw i32 %v1_bb60, 256
  %v1_bb68 = mul i32 %v7_ba30, 256
  %v4_bb70 = and i32 %v1_bb68, 65280
  %v5_bb70 = or i32 %v4_bb70, %v3_bb64
  store i32 %v5_bb70, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_bb24, 256
  %v4_bb78 = urem i32 %tmp42, 256
  %v5_bb78 = or i32 %v4_bb78, %v3_bb6c
  store i32 %v5_bb78, i32* @r5, align 4
  %v3_bb7c = mul nuw nsw i32 %v1_bb58, 256
  store i32 %v3_bb7c, i32* %r2.global-to-local, align 4
  %v5_bb80 = trunc i32 %v7_ba30 to i8
  store i32 %v1_bb60, i32* %r3.global-to-local, align 4
  %tmp43 = udiv i32 %v0_bb34, 256
  %v4_bb88 = urem i32 %tmp43, 256
  %v5_bb88 = or i32 %v4_bb88, %v3_bb7c
  store i32 %v5_bb88, i32* @r6, align 4
  store i32 %v0_bb48, i32* @r4, align 4
  store i32 %v1_bb58, i32* @r7, align 4
  %v4_bc04 = sext i8 %v5_bb80 to i32
  %sext = mul i32 %v0_bb24, 16777216
  %v4_bc7c = sdiv i32 %sext, 16777216
  %v1_bbfc = trunc i32 %v5_ba68 to i8
  br label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %bb47, %dec_label_pc_bb58
  %v2_bba0 = call i32 @function_1183c(i32 128, i32 1)
  %v3_bba4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bba4, i32* %r3.global-to-local, align 4
  %v1_bba8 = load i32, i32* %fp.global-to-local, align 4
  %v2_bba8 = load i32, i32* @r4, align 4
  %v5_bba8 = mul i32 %v2_bba8, 4
  %v6_bba8 = add i32 %v5_bba8, %v1_bba8
  %v7_bba8 = inttoptr i32 %v6_bba8 to i32*
  store i32 %v2_bba0, i32* %v7_bba8, align 4
  %v0_bbac = load i32, i32* %fp.global-to-local, align 4
  %v1_bbac = load i32, i32* %r3.global-to-local, align 4
  %v4_bbac = mul i32 %v1_bbac, 4
  %v5_bbac = add i32 %v4_bbac, %v0_bbac
  %v6_bbac = inttoptr i32 %v5_bbac to i32*
  %v7_bbac = load i32, i32* %v6_bbac, align 4
  store i32 %v7_bbac, i32* @lr, align 4
  %v1_bbb0 = inttoptr i32 %v7_bbac to i8*
  %v2_bbb0 = load i8, i8* %v1_bbb0, align 1
  %tmp = urem i8 %v2_bbb0, 16
  %v1_bbb4 = zext i8 %tmp to i32
  %v1_bbb8 = or i32 %v1_bbb4, 64
  store i32 %v1_bbb8, i32* %r3.global-to-local, align 4
  %v1_bbc0 = trunc i32 %v1_bbb8 to i8
  store i8 %v1_bbc0, i8* %v1_bbb0, align 1
  %v0_bbc4 = load i32, i32* @lr, align 4
  %v1_bbc4 = inttoptr i32 %v0_bbc4 to i8*
  %v2_bbc4 = load i8, i8* %v1_bbc4, align 1
  %v1_bbc8 = and i8 %v2_bbc4, -16
  %v1_bbcc = or i8 %v1_bbc8, 5
  store i8 %v1_bbcc, i8* %v1_bbc4, align 1
  %v2_bbd8 = load i32, i32* @lr, align 4
  %v3_bbd8 = add i32 %v2_bbd8, 1
  %v4_bbd8 = inttoptr i32 %v3_bbd8 to i8*
  store i8 %v5_ba2c, i8* %v4_bbd8, align 1
  %v3_bbdc = load i32, i32* %stack_var_-44, align 4
  %v1_bbe0 = add i32 %v3_bbdc, 32
  %tmp44 = mul i32 %v1_bbe0, 256
  store i32 %v5_ba68, i32* %r4.global-to-local, align 4
  %v1_bbf0 = and i32 %tmp44, 65280
  %tmp45 = udiv i32 %v1_bbe0, 256
  %v4_bbf4 = urem i32 %tmp45, 256
  %v5_bbf4 = or i32 %v4_bbf4, %v1_bbf0
  store i32 %v5_bbf4, i32* %r2.global-to-local, align 4
  store i32 %v1_ba74, i32* %r3.global-to-local, align 4
  %v2_bbfc = load i32, i32* @lr, align 4
  %v3_bbfc = add i32 %v2_bbfc, 8
  %v4_bbfc = inttoptr i32 %v3_bbfc to i8*
  store i8 %v1_bbfc, i8* %v4_bbfc, align 1
  %v0_bc00 = load i32, i32* %r3.global-to-local, align 4
  %v2_bc00 = icmp eq i32 %v0_bc00, 0
  store i1 %v2_bc00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bc04, i32* %r3.global-to-local, align 4
  %v2_bc08 = load i32, i32* @lr, align 4
  %v3_bc08 = add i32 %v2_bc08, 5
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v5_bb80, i8* %v4_bc08, align 1
  %v0_bc0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bb98
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bc10 = load i32, i32* @lr, align 4
  %v4_bc10 = add i32 %v3_bc10, 6
  %v5_bc10 = inttoptr i32 %v4_bc10 to i8*
  store i8 64, i8* %v5_bc10, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bb98, %bb
  %v2_bc18 = load i32, i32* @lr, align 4
  %v3_bc18 = add i32 %v2_bc18, 9
  %v4_bc18 = inttoptr i32 %v3_bc18 to i8*
  store i8 17, i8* %v4_bc18, align 1
  %v0_bc1c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc1c = sdiv i32 %v0_bc1c, 256
  store i32 %v3_bc1c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc30.48 to i32), i32* %r3.global-to-local, align 4
  %v1_bc24 = trunc i32 %v0_bc1c to i8
  %v2_bc24 = load i32, i32* @lr, align 4
  %v3_bc24 = add i32 %v2_bc24, 2
  %v4_bc24 = inttoptr i32 %v3_bc24 to i8*
  store i8 %v1_bc24, i8* %v4_bc24, align 1
  %v0_bc28 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc28 = trunc i32 %v0_bc28 to i8
  %v2_bc28 = load i32, i32* @lr, align 4
  %v3_bc28 = add i32 %v2_bc28, 3
  %v4_bc28 = inttoptr i32 %v3_bc28 to i8*
  store i8 %v1_bc28, i8* %v4_bc28, align 1
  %v0_bc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc2c, label %.thread6, label %bb46

.thread6:                                         ; preds = %.thread
  %v3_bc307 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc307, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bc30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc30, i32* %ip.global-to-local, align 4
  %v3_bc34 = load i32, i32* @lr, align 4
  %v4_bc34 = add i32 %v3_bc34, 7
  %v5_bc34 = inttoptr i32 %v4_bc34 to i8*
  store i8 0, i8* %v5_bc34, align 1
  %v0_bc3c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread6, %bb46
  %v0_bc3c = phi i32 [ %v3_bc307, %.thread6 ], [ %v0_bc3c.pre, %bb46 ]
  %v2_bc38 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_bc38, i32* %r2.global-to-local, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 32
  store i32 %v3_bc3c, i32* %r3.global-to-local, align 4
  %v1_bc40 = load i32, i32* @lr, align 4
  %v2_bc40 = add i32 %v1_bc40, 12
  %v3_bc40 = inttoptr i32 %v2_bc40 to i32*
  store i32 %v2_bc38, i32* %v3_bc40, align 4
  %v0_bc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc44 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_bc44, -8
  %v5_bc44 = add i32 %v0_bc44, %tmp52
  %v1_bc48 = load i32, i32* @sl, align 4
  %v2_bc48 = add i32 %v5_bc44, %v1_bc48
  store i32 %v2_bc48, i32* %r3.global-to-local, align 4
  %v1_bc4c = add i32 %v2_bc48, 16
  %v2_bc4c = inttoptr i32 %v1_bc4c to i32*
  %v3_bc4c = load i32, i32* %v2_bc4c, align 4
  %v1_bc50 = load i32, i32* @lr, align 4
  %v2_bc50 = add i32 %v1_bc50, 16
  %v3_bc50 = inttoptr i32 %v2_bc50 to i32*
  store i32 %v3_bc4c, i32* %v3_bc50, align 4
  %v3_bc54 = load i32, i32* %stack_var_-44, align 4
  %v1_bc58 = add i32 %v3_bc54, 12
  %tmp48 = mul i32 %v1_bc58, 256
  %v1_bc64 = and i32 %tmp48, 65280
  %tmp49 = udiv i32 %v1_bc58, 256
  %v4_bc68 = urem i32 %tmp49, 256
  %v5_bc68 = or i32 %v4_bc68, %v1_bc64
  store i32 %v5_bc68, i32* %ip.global-to-local, align 4
  %v0_bc6c = load i32, i32* @lr, align 4
  %v1_bc6c = add i32 %v0_bc6c, 20
  store i32 %v1_bc6c, i32* %r4.global-to-local, align 4
  %v3_bc705 = udiv i32 %v1_bc64, 256
  store i32 %v3_bc705, i32* %r3.global-to-local, align 4
  %v0_bc74 = load i32, i32* %r8.global-to-local, align 4
  %v1_bc74 = trunc i32 %v0_bc74 to i8
  %v3_bc74 = add i32 %v0_bc6c, 4
  %v4_bc74 = inttoptr i32 %v3_bc74 to i8*
  store i8 %v1_bc74, i8* %v4_bc74, align 1
  %v0_bc78 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc78 = add i32 %v2_bc78, 5
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  store i32 %v4_bc7c, i32* %r3.global-to-local, align 4
  %v1_bc84 = load i32, i32* @lr, align 4
  %v2_bc84 = add i32 %v1_bc84, 28
  %v3_bc84 = inttoptr i32 %v2_bc84 to i32*
  store i32 -1, i32* %v3_bc84, align 4
  %v0_bc88 = load i32, i32* @r6, align 4
  %v1_bc88 = trunc i32 %v0_bc88 to i8
  %v2_bc88 = load i32, i32* @lr, align 4
  %v3_bc88 = add i32 %v2_bc88, 20
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  %v0_bc8c = load i32, i32* @r5, align 4
  %v1_bc8c = trunc i32 %v0_bc8c to i8
  %v2_bc8c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 2
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 %v1_bc8c, i8* %v4_bc8c, align 1
  %v0_bc90 = load i32, i32* @r7, align 4
  %v1_bc90 = trunc i32 %v0_bc90 to i8
  %v2_bc90 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc90 = add i32 %v2_bc90, 1
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v0_bc94 = load i32, i32* @lr, align 4
  %v1_bc94 = add i32 %v0_bc94, 32
  %v0_bc98 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i8
  %v2_bc98 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 3
  %v4_bc98 = inttoptr i32 %v3_bc98 to i8*
  store i8 %v1_bc98, i8* %v4_bc98, align 1
  %v0_bc9c = load i32, i32* %ip.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i8
  %v2_bc9c = load i32, i32* %r4.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i8*
  store i8 %v1_bc9c, i8* %v4_bc9c, align 1
  %v3_bca0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bca0, i32* %r2.global-to-local, align 4
  %v3_bca4 = call i32 @function_10478(i32 %v1_bc94, i32 %v3_bad4, i32 %v3_bca0)
  %v3_bca8 = load i32, i32* %stack_var_-40, align 4
  %v1_bcac = add i32 %v3_bca8, 1
  store i32 %v1_bcac, i32* @r4, align 4
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v9_bcb4 = icmp eq i32 %v1_bcac, %v1_b9c8
  store i1 %v9_bcb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bcac, i32* %stack_var_-40, align 4
  %v5_bcbc = icmp slt i32 %v1_bcac, %v1_b9c8
  br i1 %v5_bcbc, label %dec_label_pc_bb98, label %dec_label_pc_bcc0

dec_label_pc_bcc0:                                ; preds = %bb47, %dec_label_pc_be94
  store i32 %v1_b9c8, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bb38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bb38, label %dec_label_pc_be94, label %dec_label_pc_bcd4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bcc0
  store i32 0, i32* %r8.global-to-local, align 4
  %v9_bce4 = icmp eq i32 %v3_bb30, ptrtoint (i32* @global_var_ffff.46 to i32)
  br label %dec_label_pc_bdb8

dec_label_pc_bce0:                                ; preds = %dec_label_pc_bdb8
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  store i1 %v9_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bce4, label %dec_label_pc_be48, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bde0, %dec_label_pc_bce0
  %v1_bcf0 = phi i32 [ %v1_be40, %dec_label_pc_bde0 ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_bce0 ]
  %v9_bcf0 = icmp eq i32 %v3_bb40, %v1_bcf0
  store i1 %v9_bcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcf0, label %dec_label_pc_be64, label %dec_label_pc_bcf8

dec_label_pc_bcf8:                                ; preds = %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge, %dec_label_pc_bcec
  %v1_bcfc = phi i32 [ %v1_bcfc.pre, %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge ], [ %v1_bcf0, %dec_label_pc_bcec ]
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v9_bcfc = icmp eq i32 %v3_bb44, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_bd04:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8, %dec_label_pc_be80
  %v0_bd08 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd08 = trunc i32 %v0_bd08 to i8
  %v2_bd08 = load i32, i32* @r5, align 4
  %v3_bd08 = add i32 %v2_bd08, 10
  %v4_bd08 = inttoptr i32 %v3_bd08 to i8*
  store i8 %v1_bd08, i8* %v4_bd08, align 1
  %v0_bd0c = load i32, i32* %r8.global-to-local, align 4
  %v1_bd0c = trunc i32 %v0_bd0c to i8
  %v2_bd0c = load i32, i32* @r5, align 4
  %v3_bd0c = add i32 %v2_bd0c, 11
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v1_bd0c, i8* %v4_bd0c, align 1
  %v0_bd10 = load i32, i32* @r5, align 4
  store i32 %v0_bd10, i32* @r0, align 4
  %v2_bd14 = call i32 @function_c690(i32 %v0_bd10, i32 20)
  %v3_bd14 = trunc i32 %v2_bd14 to i8
  %v4_bd18 = sdiv i32 %v2_bd14, 256
  store i32 %v4_bd18, i32* %r3.global-to-local, align 4
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 11
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 10
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v3_bd14, i8* %v5_bd20, align 1
  %v0_bd24 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 6
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 7
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 24
  %v2_bd2c = inttoptr i32 %v1_bd2c to i8*
  %v3_bd2c = load i8, i8* %v2_bd2c, align 1
  %v4_bd2c = zext i8 %v3_bd2c to i32
  store i32 %v4_bd2c, i32* %r3.global-to-local, align 4
  %v1_bd30 = add i32 %v0_bd2c, 25
  %v2_bd30 = inttoptr i32 %v1_bd30 to i8*
  %v3_bd30 = load i8, i8* %v2_bd30, align 1
  %v4_bd30 = zext i8 %v3_bd30 to i32
  %v4_bd34 = mul nuw nsw i32 %v4_bd30, 256
  %v5_bd34 = or i32 %v4_bd34, %v4_bd2c
  store i32 %v5_bd34, i32* %r2.global-to-local, align 4
  %v3_bd38 = load i32, i32* %stack_var_-44, align 4
  %v0_bd3c = load i32, i32* @r6, align 4
  store i32 %v0_bd3c, i32* @r1, align 4
  %v1_bd40 = add i32 %v3_bd38, 12
  store i32 %v1_bd40, i32* %r3.global-to-local, align 4
  %v4_bd48 = call i32 @function_c6ec(i32 %v0_bd2c, i32 %v0_bd3c, i32 %v5_bd34, i32 %v1_bd40)
  %v5_bd48 = trunc i32 %v4_bd48 to i8
  %v4_bd4c14 = udiv i32 %v4_bd48, 256
  %v1_bd50 = trunc i32 %v4_bd4c14 to i8
  %v2_bd50 = load i32, i32* @r6, align 4
  %v3_bd50 = add i32 %v2_bd50, 7
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v3_bd54 = load i32, i32* @r6, align 4
  %v4_bd54 = add i32 %v3_bd54, 6
  %v5_bd54 = inttoptr i32 %v4_bd54 to i8*
  store i8 %v5_bd48, i8* %v5_bd54, align 1
  %v3_bd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd58, i32* %r3.global-to-local, align 4
  %v0_bd5c = load i32, i32* @r5, align 4
  %v1_bd5c = add i32 %v0_bd5c, 20
  %v2_bd5c = inttoptr i32 %v1_bd5c to i32*
  %v3_bd5c = load i32, i32* %v2_bd5c, align 4
  %v5_bd64 = mul i32 %v3_bd58, 24
  %v1_bd68 = load i32, i32* @sl, align 4
  %v2_bd68 = add i32 %v1_bd68, %v5_bd64
  store i32 %v2_bd68, i32* %ip.global-to-local, align 4
  %v3_bd6c = udiv i32 %v3_bd5c, 65536
  store i32 %v3_bd6c, i32* %r2.global-to-local, align 4
  %v1_bd70 = trunc i32 %v3_bd6c to i8
  %v3_bd70 = add i32 %v2_bd68, 2
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd7415 = udiv i32 %v0_bd74, 256
  %v3_bd78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bd78, i32* %r2.global-to-local, align 4
  %v1_bd7c = trunc i32 %v3_bd7415 to i8
  %v2_bd7c = load i32, i32* %ip.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 3
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v1_bd7c, i8* %v4_bd7c, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd88 = load i32, i32* @r5, align 4
  %v0_bd8c = load i32, i32* %r2.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 32
  store i32 %v1_bd8c, i32* %r2.global-to-local, align 4
  %v0_bd90 = load i32, i32* %sb.global-to-local, align 4
  %v0_bd98 = load i32, i32* %ip.global-to-local, align 4
  %v6_bd9c = inttoptr i32 %v0_bd88 to i32*
  %v7_bd9c = call i32 @function_114ec(i32 %v0_bd90, i32* %v6_bd9c, i32 %v1_bd8c, i32 16384, i32 %v0_bd98, i32 16)
  %v3_bda0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bda0, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c8, i32* @r4, align 4
  %v1_bda8 = add i32 %v3_bda0, 1
  %v9_bdac = icmp eq i32 %v1_bda8, %v1_b9c8
  store i1 %v9_bdac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bda8, i32* %stack_var_-40, align 4
  %v6_bdb4 = icmp slt i32 %v1_bda8, %v1_b9c8
  br i1 %v6_bdb4, label %dec_label_pc_bdb8, label %dec_label_pc_be94

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bcd4
  %v1_bdc8 = phi i32 [ %v1_bda8, %dec_label_pc_bd04 ], [ 0, %dec_label_pc_bcd4 ]
  %v5_bdbc = mul i32 %v1_bdc8, 24
  %v1_bdc0 = load i32, i32* @sl, align 4
  %v2_bdc0 = add i32 %v1_bdc0, %v5_bdbc
  store i32 %v2_bdc0, i32* %r3.global-to-local, align 4
  %v1_bdc4 = add i32 %v2_bdc0, 20
  %v2_bdc4 = inttoptr i32 %v1_bdc4 to i8*
  %v3_bdc4 = load i8, i8* %v2_bdc4, align 1
  %v4_bdc4 = zext i8 %v3_bdc4 to i32
  store i32 %v4_bdc4, i32* %r2.global-to-local, align 4
  %v0_bdc8 = load i32, i32* %fp.global-to-local, align 4
  %v4_bdc8 = mul i32 %v1_bdc8, 4
  %v5_bdc8 = add i32 %v0_bdc8, %v4_bdc8
  %v6_bdc8 = inttoptr i32 %v5_bdc8 to i32*
  %v7_bdc8 = load i32, i32* %v6_bdc8, align 4
  store i32 %v7_bdc8, i32* @r5, align 4
  %v2_bdd0 = icmp ugt i8 %v3_bdc4, 30
  %v7_bdd0 = icmp eq i8 %v3_bdc4, 31
  store i1 %v7_bdd0, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r7.global-to-local, align 4
  %v1_bdd8 = add i32 %v7_bdc8, 20
  store i32 %v1_bdd8, i32* @r6, align 4
  %v2_bddc = xor i1 %v7_bdd0, true
  %v3_bddc = and i1 %v2_bdd0, %v2_bddc
  br i1 %v3_bddc, label %dec_label_pc_bce0, label %dec_label_pc_bde0

dec_label_pc_bde0:                                ; preds = %dec_label_pc_bdb8
  %v1_bde0 = add i32 %v2_bdc0, 16
  %v2_bde0 = inttoptr i32 %v1_bde0 to i32*
  %v3_bde0 = load i32, i32* %v2_bde0, align 4
  store i32 %v3_bde0, i32* %r4.global-to-local, align 4
  %v0_bde4 = call i32 @function_dab8()
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  %v5_bdf0 = mul i32 %v3_bde8, 24
  %v1_bdf8 = and i32 %v3_bde0, 65280
  store i32 %v1_bdf8, i32* %r3.global-to-local, align 4
  %v1_bdf4 = udiv i32 %v3_bde0, 256
  %v3_bdfc = and i32 %v1_bdf4, 65280
  store i32 %v3_bdfc, i32* %r2.global-to-local, align 4
  %v1_be00 = load i32, i32* @sl, align 4
  %v2_be00 = add i32 %v1_be00, %v5_bdf0
  store i32 %v2_be00, i32* %ip.global-to-local, align 4
  %v1_be0c = add i32 %v2_be00, 20
  %v2_be0c = inttoptr i32 %v1_be0c to i8*
  %v3_be0c = load i8, i8* %v2_be0c, align 1
  %v4_be0c = zext i8 %v3_be0c to i32
  %v2_be14 = call i32 @llvm.bswap.i32(i32 %v3_bde0)
  %v7_be18 = lshr i32 %v0_bde4, %v4_be0c
  %v8_be18 = add i32 %v7_be18, %v2_be14
  store i32 %v8_be18, i32* %r2.global-to-local, align 4
  %v2_be34 = call i32 @llvm.bswap.i32(i32 %v8_be18)
  %v1_be38 = load i32, i32* @r5, align 4
  %v2_be38 = add i32 %v1_be38, 16
  %v3_be38 = inttoptr i32 %v2_be38 to i32*
  store i32 %v2_be34, i32* %v3_be38, align 4
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v1_be40 = load i32, i32* %r7.global-to-local, align 4
  %v9_be40 = icmp eq i32 %v3_bb30, %v1_be40
  store i1 %v9_be40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be40, label %dec_label_pc_be48, label %dec_label_pc_bcec

dec_label_pc_be48:                                ; preds = %dec_label_pc_bde0, %dec_label_pc_bce0
  %v0_be48 = call i32 @function_dab8()
  %v1_be48 = trunc i32 %v0_be48 to i8
  %v4_be50 = sdiv i32 %v0_be48, 256
  store i32 %v4_be50, i32* %r3.global-to-local, align 4
  %v1_be54 = load i32, i32* %r7.global-to-local, align 4
  %v9_be54 = icmp eq i32 %v3_bb40, %v1_be54
  store i1 %v9_be54, i1* %cpsr_z.global-to-local, align 1
  %v1_be58 = trunc i32 %v4_be50 to i8
  %v2_be58 = load i32, i32* @r5, align 4
  %v3_be58 = add i32 %v2_be58, 5
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v3_be5c = load i32, i32* @r5, align 4
  %v4_be5c = add i32 %v3_be5c, 4
  %v5_be5c = inttoptr i32 %v4_be5c to i8*
  store i8 %v1_be48, i8* %v5_be5c, align 1
  %v0_be60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be60, label %dec_label_pc_be64, label %dec_label_pc_be48.dec_label_pc_bcf8_crit_edge

dec_label_pc_be48.dec_label_pc_bcf8_crit_edge:    ; preds = %dec_label_pc_be48
  %v1_bcfc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcf8

dec_label_pc_be64:                                ; preds = %dec_label_pc_be48, %dec_label_pc_bcec
  %v0_be64 = call i32 @function_dab8()
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v4_be68 = sdiv i32 %v0_be64, 256
  store i32 %v4_be68, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 20
  %v5_be6c = inttoptr i32 %v4_be6c to i8*
  store i8 %v1_be64, i8* %v5_be6c, align 1
  %v0_be70 = load i32, i32* %r3.global-to-local, align 4
  %v1_be70 = trunc i32 %v0_be70 to i8
  %v2_be70 = load i32, i32* @r6, align 4
  %v3_be70 = add i32 %v2_be70, 1
  %v4_be70 = inttoptr i32 %v3_be70 to i8*
  store i8 %v1_be70, i8* %v4_be70, align 1
  store i32 %v3_bb44, i32* %r3.global-to-local, align 4
  %v1_be78 = load i32, i32* %r7.global-to-local, align 4
  %v9_be78 = icmp eq i32 %v3_bb44, %v1_be78
  store i1 %v9_be78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be78, label %dec_label_pc_be80, label %dec_label_pc_bd04

dec_label_pc_be80:                                ; preds = %dec_label_pc_be64, %dec_label_pc_bcf8
  %v0_be80 = call i32 @function_dab8()
  %v1_be80 = trunc i32 %v0_be80 to i8
  %v4_be84 = sdiv i32 %v0_be80, 256
  store i32 %v4_be84, i32* %r3.global-to-local, align 4
  %v1_be88 = trunc i32 %v4_be84 to i8
  %v2_be88 = load i32, i32* @r6, align 4
  %v3_be88 = add i32 %v2_be88, 3
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* @r6, align 4
  %v4_be8c = add i32 %v3_be8c, 2
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_be80, i8* %v5_be8c, align 1
  br label %dec_label_pc_bd04

dec_label_pc_be94.critedge:                       ; preds = %dec_label_pc_bb20
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be94

dec_label_pc_be94:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_be94.critedge, %dec_label_pc_bcc0
  %v2_be98 = call i32 @function_10f4c(i32* null)
  store i32 %v2_babc, i32* %r3.global-to-local, align 4
  %v9_bea0 = icmp eq i32 %v2_babc, %v2_be98
  store i1 %v9_bea0, i1* %cpsr_z.global-to-local, align 1
  %v6_bea4 = icmp slt i32 %v2_babc, %v2_be98
  br i1 %v6_bea4, label %dec_label_pc_bea8, label %dec_label_pc_bcc0

dec_label_pc_bea8:                                ; preds = %dec_label_pc_be94, %dec_label_pc_b9c4, %dec_label_pc_beb0
  %v29_beac = phi i32 [ %v3_bae8, %dec_label_pc_b9c4 ], [ %v1_beb4, %dec_label_pc_beb0 ], [ %v2_be98, %dec_label_pc_be94 ]
  store i32 %v3_b9c4, i32* %r4.global-to-local, align 4
  store i32 %v12_b9c4, i32* %r7.global-to-local, align 4
  store i32 %v15_b9c4, i32* %r8.global-to-local, align 4
  ret i32 %v29_beac

dec_label_pc_beb0:                                ; preds = %dec_label_pc_baf8
  %v0_beb0 = load i32, i32* %sb.global-to-local, align 4
  %v1_beb4 = call i32 @function_10c7c(i32 %v0_beb0)
  br label %dec_label_pc_bea8

; uselistorder directives
  uselistorder i32 %v4_be84, { 1, 0 }
  uselistorder i32 %v4_be50, { 1, 0 }
  uselistorder i32 %v1_be40, { 1, 0 }
  uselistorder i32 %v3_bde0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_bda8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd18, { 1, 0 }
  uselistorder i32 %v1_bcac, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc58, { 1, 0 }
  uselistorder i32 %v0_bc1c, { 1, 0 }
  uselistorder i32 %v1_bbe0, { 1, 0 }
  uselistorder i8 %v5_bb80, { 1, 0 }
  uselistorder i32 %v3_bb7c, { 1, 0 }
  uselistorder i32 %v1_bb60, { 1, 0 }
  uselistorder i32 %v1_bb58, { 1, 0 }
  uselistorder i32 %v3_bb44, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_bb34, { 0, 1, 3, 2 }
  uselistorder i32 %v3_bb30, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bb24, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb18, { 1, 0 }
  uselistorder i1 %v7_baec, { 1, 0 }
  uselistorder i32 %v3_bae8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_babc, { 2, 1, 0 }
  uselistorder i32 %v1_ba74, { 1, 2, 0 }
  uselistorder i32 %v5_ba68, { 0, 2, 1 }
  uselistorder i32 %v7_ba30, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_ba0c, { 1, 2, 0 }
  uselistorder i32 %v1_b9c8, { 1, 2, 3, 0, 4, 5, 6, 8, 7 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 44, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 9, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 0, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 18, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_bea8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bcc0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bec0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_bec0 = load i32, i32* @r4, align 4
  %v15_bec0 = load i32, i32* @r8, align 4
  %v21_bec0 = load i32, i32* @sl, align 4
  %v24_bec0 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_becc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee4 = urem i32 %arg4, 256
  store i32 %v1_bee4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef4 = call i32 @function_1183c(i32 %v1_becc, i32 4)
  %v0_bef8 = load i32, i32* @r5, align 4
  store i32 %v0_bef8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r0.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r6, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v5_bf0c = inttoptr i32 %v0_bef8 to i32*
  %v6_bf0c = call i32 @function_829c(i32 %v0_bf04, i32* %v5_bf0c, i32 2, i32 %v0_bf08, i32 %v2_bef4)
  %v1_bf18 = urem i32 %v6_bf0c, 256
  store i32 %v1_bf18, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r4, align 4
  store i32 %v0_bf24, i32* %r0.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v5_bf2c = trunc i32 %v6_bf0c to i8
  %v6_bf30 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf30 = call i32 @function_829c(i32 %v0_bf24, i32* %v6_bf30, i32 3, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_bf0c)
  %v0_bf34 = load i32, i32* @r5, align 4
  store i32 %v0_bf34, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bf40 = load i32, i32* @r4, align 4
  store i32 %v0_bf40, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_bf48 = inttoptr i32 %v0_bf34 to i32*
  %v6_bf48 = call i32 @function_829c(i32 %v0_bf40, i32* %v5_bf48, i32 4, i32 64, i32 %v7_bf30)
  %v1_bf50 = urem i32 %v6_bf48, 256
  store i32 %v1_bf50, i32* %ip.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r6, align 4
  store i32 %v0_bf5c, i32* %r3.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  %sext38 = mul i32 %v6_bf48, 16777216
  %v5_bf68 = sdiv i32 %sext38, 16777216
  %v6_bf68 = inttoptr i32 %v0_bf54 to i32*
  %v7_bf68 = call i32 @function_829c(i32 %v0_bf60, i32* %v6_bf68, i32 5, i32 %v0_bf5c, i32 %v5_bf68)
  %v1_bf74 = urem i32 %v7_bf68, 256
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  store i32 %v0_bf80, i32* %r0.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v5_bf8c = inttoptr i32 %v0_bf84 to i32*
  %v6_bf8c = call i32 @function_829c(i32 %v0_bf80, i32* %v5_bf8c, i32 6, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v1_bf74)
  %v0_bf90 = load i32, i32* @r5, align 4
  store i32 %v0_bf90, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bf9c = load i32, i32* @r4, align 4
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_bfa4 = inttoptr i32 %v0_bf90 to i32*
  %v6_bfa4 = call i32 @function_829c(i32 %v0_bf9c, i32* %v5_bfa4, i32 7, i32 53, i32 %v6_bf8c)
  %v0_bfb0 = load i32, i32* @r5, align 4
  store i32 %v0_bfb0, i32* %r1.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r4, align 4
  store i32 %v0_bfb4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfb0 to i32*
  %v6_bfc0 = call i32 @function_829c(i32 %v0_bfb4, i32* %v5_bfc0, i32 9, i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32 %v6_bfa4)
  %v0_bfc4 = load i32, i32* @r5, align 4
  store i32 %v0_bfc4, i32* %r1.global-to-local, align 4
  %v0_bfcc = load i32, i32* @r6, align 4
  store i32 %v0_bfcc, i32* %r2.global-to-local, align 4
  %v0_bfd0 = load i32, i32* @r4, align 4
  store i32 %v0_bfd0, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_bfd8 = inttoptr i32 %v0_bfc4 to i32*
  %v6_bfd8 = call i32 @function_829c(i32 %v0_bfd0, i32* %v5_bfd8, i32 %v0_bfcc, i32 12, i32 %v6_bfc0)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r6, align 4
  store i32 %v0_bfe0, i32* %r3.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  store i32 %v0_bfec, i32* %r0.global-to-local, align 4
  %v5_bff0 = inttoptr i32 %v0_bfe4 to i32*
  %v6_bff0 = call i32 @function_81cc(i32 %v0_bfec, i32* %v5_bff0, i32 8, i32 %v0_bfe0, i32 %v6_bfd8)
  store i32 %v6_bff0, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_bffc = call i32 @function_ff28(i32 11)
  %v0_c000 = load i32, i32* @r6, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v2_c008 = inttoptr i32 %v0_c000 to i32*
  %v3_c008 = call i32 @function_fe44(i32 11, i32* %v2_c008)
  store i32 %v3_c008, i32* %r0.global-to-local, align 4
  %v0_c00c = load i32, i32* @r6, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  %v2_c010 = inttoptr i32 %v3_c008 to i8*
  %v3_c010 = call i32 @function_10da8(i8* %v2_c010, i32 %v0_c00c)
  store i32 %v3_c010, i32* @r4, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_c01c = call i32 @function_fe70(i32 11)
  store i32 %v1_c01c, i32* %r0.global-to-local, align 4
  %v0_c020 = load i32, i32* @r4, align 4
  %v1_c020 = load i32, i32* @r6, align 4
  %v9_c020 = icmp eq i32 %v0_c020, %v1_c020
  store i1 %v9_c020, i1* %cpsr_z.global-to-local, align 1
  %v5_c024 = icmp slt i32 %v0_c020, %v1_c020
  br i1 %v5_c024, label %dec_label_pc_c0f8, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_bec0
  %v2_c02c = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_c02c, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r1.global-to-local, align 4
  store i32 %v0_c020, i32* %r0.global-to-local, align 4
  %v4_c03c = call i32 @function_10e44(i32 %v0_c020, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_c03c, i32* @r5, align 4
  %v0_c044 = load i32, i32* @r4, align 4
  store i32 %v0_c044, i32* %r0.global-to-local, align 4
  %v1_c048 = call i32 @function_10c7c(i32 %v0_c044)
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_c050 = call i32 @function_ff28(i32 12)
  %v0_c054 = load i32, i32* @r6, align 4
  store i32 %v0_c054, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v2_c05c = inttoptr i32 %v0_c054 to i32*
  %v3_c05c = call i32 @function_fe44(i32 12, i32* %v2_c05c)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* @r1, align 4
  store i32 %v3_c05c, i32* %r2.global-to-local, align 4
  store i32 %v2_c02c, i32* %r0.global-to-local, align 4
  %v3_c06c = bitcast i32* %stack_var_-2120 to i8*
  %v4_c06c = call i32 @function_10750(i8* %v3_c06c, i32 %v0_c060, i32 %v3_c05c)
  store i32 %v4_c06c, i32* %r8.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_c078 = call i32 @function_fe70(i32 12)
  store i32 %v1_c078, i32* %r0.global-to-local, align 4
  %v7_c07c = icmp eq i32 %v4_c06c, -1
  store i1 %v7_c07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c07c, label %dec_label_pc_c0f8, label %dec_label_pc_c084

dec_label_pc_c084:                                ; preds = %dec_label_pc_c028
  %v0_c084 = load i32, i32* @r5, align 4
  %v9_c084 = icmp eq i32 %v0_c084, %v4_c06c
  store i1 %v9_c084, i1* %cpsr_z.global-to-local, align 1
  %v7_c088 = icmp sgt i32 %v0_c084, %v4_c06c
  br i1 %v7_c088, label %dec_label_pc_c08c, label %dec_label_pc_c0f8

dec_label_pc_c08c:                                ; preds = %dec_label_pc_c084
  %v2_c084 = sub i32 %v0_c084, %v4_c06c
  store i32 %v2_c084, i32* %r3.global-to-local, align 4
  %v2_c094 = ptrtoint i32* %stack_var_-72 to i32
  %v0_c098 = load i32, i32* @r6, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v4_c06c, i32* %r2.global-to-local, align 4
  %v0_c0a4 = load i32, i32* %sl.global-to-local, align 4
  %v2_c0a4 = add i32 %v0_c0a4, %v4_c06c
  store i32 %v2_c0a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c094, i32* @r4, align 4
  %v1_c0b4 = add i32 %v0_c084, -1
  br label %dec_label_pc_c0ac

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c08c
  %v0_c0f0 = phi i32 [ %v1_c0f0, %dec_label_pc_c0e8 ], [ %v2_c094, %dec_label_pc_c08c ]
  %v0_c0e8 = phi i32 [ %v1_c0e8, %dec_label_pc_c0e8 ], [ %v4_c06c, %dec_label_pc_c08c ]
  %v0_c0d0 = phi i32 [ %v0_c0d046, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b0 = phi i32 [ %v0_c0b042, %dec_label_pc_c0e8 ], [ %v0_c098, %dec_label_pc_c08c ]
  %v0_c0b8 = phi i32 [ %v1_c0b8, %dec_label_pc_c0e8 ], [ %v2_c0a4, %dec_label_pc_c08c ]
  %v1_c0ac = inttoptr i32 %v0_c0b8 to i8*
  %v2_c0ac = load i8, i8* %v1_c0ac, align 1
  %v3_c0ac = zext i8 %v2_c0ac to i32
  store i32 %v3_c0ac, i32* %r3.global-to-local, align 4
  %v2_c0b0 = icmp eq i32 %v0_c0b0, 0
  store i1 %v2_c0b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0b4, i32* %lr.global-to-local, align 4
  %v1_c0b8 = add i32 %v0_c0b8, 1
  store i32 %v1_c0b8, i32* %r0.global-to-local, align 4
  %v1_c0bc = add nsw i32 %v3_c0ac, -48
  store i32 %v1_c0bc, i32* %ip.global-to-local, align 4
  br i1 %v2_c0b0, label %dec_label_pc_c0c4, label %dec_label_pc_c0d4

dec_label_pc_c0c4:                                ; preds = %dec_label_pc_c0ac
  %v7_c0c4 = icmp eq i8 %v2_c0ac, 9
  store i1 %v7_c0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0c4, label %dec_label_pc_c0e8, label %bb

bb:                                               ; preds = %dec_label_pc_c0c4
  %v8_c0c8 = icmp eq i8 %v2_c0ac, 32
  store i1 %v8_c0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c0c8, label %dec_label_pc_c0e8, label %dec_label_pc_c0d0

dec_label_pc_c0d0:                                ; preds = %bb
  %v1_c0d0 = add i32 %v0_c0d0, 1
  store i32 %v1_c0d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0ac, %dec_label_pc_c0d0
  %v0_c0d047 = phi i32 [ %v0_c0d0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v0_c0b043 = phi i32 [ %v0_c0b0, %dec_label_pc_c0ac ], [ %v1_c0d0, %dec_label_pc_c0d0 ]
  %v7_c0d4 = icmp eq i8 %v2_c0ac, 46
  store i1 %v7_c0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0d4, label %dec_label_pc_c0e0, label %bb129

bb129:                                            ; preds = %dec_label_pc_c0d4
  %v3_c0d8 = icmp ugt i32 %v1_c0bc, 8
  %v8_c0d8 = icmp eq i32 %v1_c0bc, 9
  store i1 %v8_c0d8, i1* %cpsr_z.global-to-local, align 1
  %v2_c0dc = xor i1 %v8_c0d8, true
  %v3_c0dc = and i1 %v3_c0d8, %v2_c0dc
  br i1 %v3_c0dc, label %dec_label_pc_c628, label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0d4, %bb129
  %v9_c0e0 = icmp eq i32 %v0_c0e8, %v1_c0b4
  store i1 %v9_c0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0e0, label %dec_label_pc_c628, label %dec_label_pc_c0e8

dec_label_pc_c0e8:                                ; preds = %dec_label_pc_c0c4, %dec_label_pc_c0e0, %bb
  %v0_c0d046 = phi i32 [ %v0_c0d0, %dec_label_pc_c0c4 ], [ %v0_c0d047, %dec_label_pc_c0e0 ], [ %v0_c0d0, %bb ]
  %v0_c0b042 = phi i32 [ 0, %dec_label_pc_c0c4 ], [ %v0_c0b043, %dec_label_pc_c0e0 ], [ 0, %bb ]
  %v1_c0e8 = add i32 %v0_c0e8, 1
  store i32 %v1_c0e8, i32* %r2.global-to-local, align 4
  %v9_c0ec = icmp eq i32 %v0_c084, %v1_c0e8
  store i1 %v9_c0ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c0f0 = add i32 %v0_c0f0, 1
  store i32 %v1_c0f0, i32* @r4, align 4
  br i1 %v9_c0ec, label %dec_label_pc_c0f8, label %dec_label_pc_c0ac

dec_label_pc_c0f8:                                ; preds = %dec_label_pc_c0e8, %dec_label_pc_c084, %dec_label_pc_c028, %dec_label_pc_bec0
  %v0_c0f8 = call i32 @function_dab8()
  %v1_c0fc = urem i32 %v0_c0f8, 4
  store i32 %v1_c0fc, i32* %r0.global-to-local, align 4
  %v2_c100 = icmp eq i32 %v1_c0fc, 3
  store i1 %v2_c100, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c0f8 to i2
  switch i2 %trunc, label %dec_label_pc_c12424 [
    i2 0, label %dec_label_pc_c660
    i2 1, label %dec_label_pc_c11c
    i2 -2, label %dec_label_pc_c650
    i2 -1, label %dec_label_pc_c674
  ]

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c0f8
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c12424:                              ; preds = %dec_label_pc_c0f8
  unreachable

dec_label_pc_c124:                                ; preds = %dec_label_pc_c674, %dec_label_pc_c660, %dec_label_pc_c650, %dec_label_pc_c628, %dec_label_pc_c11c
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_c674 ], [ 64, %dec_label_pc_c650 ], [ 74, %dec_label_pc_c11c ], [ 8, %dec_label_pc_c660 ], [ %phitmp, %dec_label_pc_c628 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c128 = call i32 @function_10f4c(i32* null)
  %v0_c12c = load i32, i32* @r7, align 4
  %v2_c12c = icmp eq i32 %v0_c12c, 0
  store i1 %v2_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = load i32, i32* %fp.global-to-local, align 4
  %v2_c130 = add i32 %v1_c130, %v2_c128
  store i32 %v2_c130, i32* %r0.global-to-local, align 4
  br i1 %v2_c12c, label %dec_label_pc_c604, label %dec_label_pc_c13c

dec_label_pc_c13c:                                ; preds = %dec_label_pc_c124
  store i32 %v0_c12c, i32* %r0.global-to-local, align 4
  %v1_c140 = inttoptr i32 %v0_c12c to i8*
  %v2_c140 = call i32 @function_103fc(i8* %v1_c140)
  %v3_c140 = inttoptr i32 %v2_c140 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c154 = call i32 @function_11550(i32 2, i32 3, i32 17)
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v7_c158 = icmp eq i32 %v3_c154, -1
  store i1 %v7_c158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c158, label %dec_label_pc_c604, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c13c
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c170 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c170, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c184 = call i32 @function_11520(i32 %v3_c154, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c184, i32* %r0.global-to-local, align 4
  %v7_c188 = icmp eq i32 %v6_c184, -1
  store i1 %v7_c188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c188, label %dec_label_pc_c5fc, label %dec_label_pc_c190

dec_label_pc_c190:                                ; preds = %dec_label_pc_c164
  %v3_c198 = mul i32 %v7_bf30, 65536
  store i32 %v3_c198, i32* %r8.global-to-local, align 4
  %v3_c1a4 = mul i32 %v6_bf8c, 65536
  store i32 %v3_c1a4, i32* %r0.global-to-local, align 4
  %v3_c1a8 = mul i32 %v6_bfa4, 65536
  store i32 %v3_c1a8, i32* %sl.global-to-local, align 4
  %v3_c1ac = mul i32 %v6_bfc0, 65536
  store i32 %v3_c1ac, i32* %fp.global-to-local, align 4
  %v2_c1b0 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c1b4 = urem i32 %v6_bfd8, 256
  store i32 %v1_c1b4, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c1bc = urem i32 %v7_bf30, 65536
  %v3_c1c0 = urem i32 %v6_bf8c, 65536
  store i32 %v3_c1c0, i32* %ip.global-to-local, align 4
  %v3_c1c4 = urem i32 %v6_bfa4, 65536
  store i32 %v3_c1c4, i32* %lr.global-to-local, align 4
  %v3_c1c8 = urem i32 %v6_bfc0, 65536
  store i32 %v3_c1c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610.critedge, label %dec_label_pc_c1e4

dec_label_pc_c1e4:                                ; preds = %dec_label_pc_c190
  %v2_c1ec = add i32 %v2_c140, %v1_c1b4
  %v3_c1f0 = mul i32 %v2_c1ec, 65536
  %v1_c1f4 = add i32 %v3_c1f0, 1769472
  %v1_c1f8 = add i32 %v3_c1f0, 3080192
  %v1_c214 = urem i32 %v6_bfc0, 256
  %tmp130 = udiv i32 %v6_bf8c, 256
  %v3_c218 = urem i32 %tmp130, 256
  %v1_c21c = urem i32 %v6_bf8c, 256
  %v1_c210 = mul i32 %v7_bf30, 256
  %v3_c224 = and i32 %v1_c210, 65280
  store i32 %v3_c224, i32* %r1.global-to-local, align 4
  %v1_c22c = urem i32 %v6_bfa4, 256
  %tmp131 = udiv i32 %v7_bf30, 256
  %v3_c234 = udiv i32 %v1_c1f4, 256
  %v1_c23c = and i32 %v3_c234, 65280
  %tmp132 = udiv i32 %v6_bfa4, 256
  %v4_c24c = udiv i32 %v1_c1f4, 16777216
  %v5_c24c = or i32 %v1_c23c, %v4_c24c
  store i32 %v5_c24c, i32* @r6, align 4
  %v3_c254 = sdiv i32 %v1_c1f8, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_c254 = sdiv i32 %sext39, 16777216
  %v3_c258 = mul nuw nsw i32 %v1_c214, 256
  %v4_c260 = mul nuw nsw i32 %v1_c21c, 256
  %v5_c260 = or i32 %v4_c260, %v3_c218
  store i32 %v5_c260, i32* %r0.global-to-local, align 4
  %v3_c264 = ashr i32 %v1_c1f8, 31
  %tmp133 = udiv i32 %v6_bfc0, 256
  %v4_c268 = urem i32 %tmp133, 256
  %v5_c268 = or i32 %v4_c268, %v3_c258
  store i32 %v5_c268, i32* @r5, align 4
  %v3_c26c = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_c274 = add i32 %v2_c140, 1
  store i32 %v2_c274, i32* %fp.global-to-local, align 4
  store i32 %v1_c22c, i32* %r3.global-to-local, align 4
  store i32 %v1_c21c, i32* %r2.global-to-local, align 4
  %v3_c28869 = udiv i32 %v1_c23c, 256
  store i32 %v3_c28869, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_c294 = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v1_c1f4, 256
  %v4_c344 = sdiv i32 %sext18, 16777216
  %sext20 = mul i32 %v6_bfa4, 16777216
  %v4_c360 = sdiv i32 %sext20, 16777216
  %sext21 = mul nuw i32 %v4_c24c, 16777216
  %v4_c364 = sdiv i32 %sext21, 16777216
  %sext23 = mul i32 %v6_bfc0, 16777216
  %v4_c384 = sdiv i32 %sext23, 16777216
  %v1_c308 = trunc i32 %v3_c264 to i8
  %extract.t = trunc i32 %v3_c26c to i8
  %v1_c368 = trunc i32 %tmp132 to i8
  %v1_c390 = trunc i32 %v6_bf8c to i8
  br label %dec_label_pc_c2b4

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c1e4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c2bc = call i32 @function_1183c(i32 600, i32 1)
  store i32 %v2_c2bc, i32* %r0.global-to-local, align 4
  store i32 %v2_bef4, i32* %r2.global-to-local, align 4
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r3.global-to-local, align 4
  %v2_c2c8 = load i32, i32* @r4, align 4
  %v5_c2c8 = mul i32 %v2_c2c8, 4
  %v6_c2c8 = add i32 %v5_c2c8, %v2_bef4
  %v7_c2c8 = inttoptr i32 %v6_c2c8 to i32*
  store i32 %v2_c2bc, i32* %v7_c2c8, align 4
  %v0_c2cc = load i32, i32* %r2.global-to-local, align 4
  %v1_c2cc = load i32, i32* %r3.global-to-local, align 4
  %v4_c2cc = mul i32 %v1_c2cc, 4
  %v5_c2cc = add i32 %v4_c2cc, %v0_c2cc
  %v6_c2cc = inttoptr i32 %v5_c2cc to i32*
  %v7_c2cc = load i32, i32* %v6_c2cc, align 4
  store i32 %v7_c2cc, i32* %r1.global-to-local, align 4
  %v1_c2d0 = inttoptr i32 %v7_c2cc to i8*
  %v2_c2d0 = load i8, i8* %v1_c2d0, align 1
  %tmp = urem i8 %v2_c2d0, 16
  %v1_c2d4 = zext i8 %tmp to i32
  %v1_c2d8 = or i32 %v1_c2d4, 64
  store i32 %v1_c2d8, i32* %r2.global-to-local, align 4
  %v1_c2dc = trunc i32 %v1_c2d8 to i8
  store i8 %v1_c2dc, i8* %v1_c2d0, align 1
  %v0_c2e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2e0 = inttoptr i32 %v0_c2e0 to i8*
  %v2_c2e0 = load i8, i8* %v1_c2e0, align 1
  %v1_c2e4 = and i8 %v2_c2e0, -16
  %v1_c2e8 = or i8 %v1_c2e4, 5
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  store i8 %v1_c2e8, i8* %v1_c2e0, align 1
  %v2_c2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2f8 = add i32 %v2_c2f8, 1
  %v4_c2f8 = inttoptr i32 %v3_c2f8 to i8*
  store i8 %v5_bf2c, i8* %v4_c2f8, align 1
  store i32 %v3_c264, i32* %r3.global-to-local, align 4
  store i32 %v3_c254, i32* %r2.global-to-local, align 4
  %v0_c304 = load i32, i32* %ip.global-to-local, align 4
  %v2_c304 = icmp eq i32 %v0_c304, 0
  store i1 %v2_c304, i1* %cpsr_z.global-to-local, align 1
  %v2_c308 = load i32, i32* %r1.global-to-local, align 4
  %v3_c308 = add i32 %v2_c308, 3
  %v4_c308 = inttoptr i32 %v3_c308 to i8*
  store i8 %v1_c308, i8* %v4_c308, align 1
  %v0_c30c = load i32, i32* %r2.global-to-local, align 4
  %v1_c30c = trunc i32 %v0_c30c to i8
  %v2_c30c = load i32, i32* %r1.global-to-local, align 4
  %v3_c30c = add i32 %v2_c30c, 2
  %v4_c30c = inttoptr i32 %v3_c30c to i8*
  store i8 %v1_c30c, i8* %v4_c30c, align 1
  store i32 %v3_c26c, i32* %lr.global-to-local, align 4
  store i32 %v5_bf68, i32* %r2.global-to-local, align 4
  %v0_c318 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c318, label %.thread25, label %bb134

bb134:                                            ; preds = %dec_label_pc_c2b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c31c = load i32, i32* %r1.global-to-local, align 4
  %v4_c31c = add i32 %v3_c31c, 6
  %v5_c31c = inttoptr i32 %v4_c31c to i8*
  store i8 64, i8* %v5_c31c, align 1
  %v0_c324.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_c324.pre to i8
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_c2b4, %bb134
  %v0_c324.off0 = phi i8 [ %extract.t, %dec_label_pc_c2b4 ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c324 = load i32, i32* %r1.global-to-local, align 4
  %v3_c324 = add i32 %v2_c324, 5
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v0_c324.off0, i8* %v4_c324, align 1
  store i32 %v7_c254, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc30.48 to i32), i32* %lr.global-to-local, align 4
  %v0_c330 = load i32, i32* %r2.global-to-local, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* %r1.global-to-local, align 4
  %v3_c330 = add i32 %v2_c330, 8
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* %r3.global-to-local, align 4
  %v1_c334 = trunc i32 %v0_c334 to i8
  %v2_c334 = load i32, i32* %r1.global-to-local, align 4
  %v3_c334 = add i32 %v2_c334, 9
  %v4_c334 = inttoptr i32 %v3_c334 to i8*
  store i8 %v1_c334, i8* %v4_c334, align 1
  %v0_c338 = load i32, i32* %r1.global-to-local, align 4
  %v1_c338 = add i32 %v0_c338, 41
  %v2_c33c = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @sb, align 4
  %v2_c340 = add i32 %v1_c338, %v0_c340
  store i32 %v2_c340, i32* %r4.global-to-local, align 4
  store i32 %v4_c344, i32* %r2.global-to-local, align 4
  %v1_c348 = add i32 %v0_c338, 20
  store i32 %v1_c348, i32* %r0.global-to-local, align 4
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb136, label %bb135

bb135:                                            ; preds = %.thread25
  %v1_c34c = load i32, i32* %sl.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v4_c34c = add i32 %v0_c338, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  %v2_c350.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread25, %bb135
  %v2_c350 = phi i32 [ %v0_c338, %.thread25 ], [ %v2_c350.pre, %bb135 ]
  %v0_c350 = load i32, i32* %ip.global-to-local, align 4
  %v1_c350 = trunc i32 %v0_c350 to i8
  %v3_c350 = add i32 %v2_c350, 4
  %v4_c350 = inttoptr i32 %v3_c350 to i8*
  store i8 %v1_c350, i8* %v4_c350, align 1
  %v0_c354 = load i32, i32* %r3.global-to-local, align 4
  %v1_c354 = load i32, i32* %r1.global-to-local, align 4
  %v2_c354 = add i32 %v1_c354, 12
  %v3_c354 = inttoptr i32 %v2_c354 to i32*
  store i32 %v0_c354, i32* %v3_c354, align 4
  %v0_c358 = load i32, i32* %r2.global-to-local, align 4
  %v1_c358 = trunc i32 %v0_c358 to i8
  %v2_c358 = load i32, i32* %r0.global-to-local, align 4
  %v3_c358 = add i32 %v2_c358, 5
  %v4_c358 = inttoptr i32 %v3_c358 to i8*
  store i8 %v1_c358, i8* %v4_c358, align 1
  store i32 %v4_c360, i32* %lr.global-to-local, align 4
  store i32 %v4_c364, i32* %r2.global-to-local, align 4
  %v2_c368 = load i32, i32* %r0.global-to-local, align 4
  %v3_c368 = add i32 %v2_c368, 2
  %v4_c368 = inttoptr i32 %v3_c368 to i8*
  store i8 %v1_c368, i8* %v4_c368, align 1
  %v0_c36c = load i32, i32* %lr.global-to-local, align 4
  %v1_c36c = trunc i32 %v0_c36c to i8
  %v2_c36c = load i32, i32* %r0.global-to-local, align 4
  %v3_c36c = add i32 %v2_c36c, 3
  %v4_c36c = inttoptr i32 %v3_c36c to i8*
  store i8 %v1_c36c, i8* %v4_c36c, align 1
  %v0_c370 = load i32, i32* %r2.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* %r0.global-to-local, align 4
  %v3_c370 = add i32 %v2_c370, 4
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_c37c = load i32, i32* %r1.global-to-local, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v5_c294, i8* %v4_c37c, align 1
  store i32 %v4_c384, i32* %r3.global-to-local, align 4
  %v0_c388 = load i32, i32* %r1.global-to-local, align 4
  %v1_c388 = add i32 %v0_c388, 28
  store i32 %v1_c388, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_c390 = load i32, i32* %r0.global-to-local, align 4
  %v3_c390 = add i32 %v2_c390, 1
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* %lr.global-to-local, align 4
  %v1_c394 = load i32, i32* %r1.global-to-local, align 4
  %v2_c394 = add i32 %v1_c394, 16
  %v3_c394 = inttoptr i32 %v2_c394 to i32*
  store i32 %v0_c394, i32* %v3_c394, align 4
  %v0_c398 = load i32, i32* %r8.global-to-local, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* %ip.global-to-local, align 4
  %v3_c398 = add i32 %v2_c398, 5
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* @r5, align 4
  %v1_c39c = trunc i32 %v0_c39c to i8
  %v2_c39c = load i32, i32* %r1.global-to-local, align 4
  %v3_c39c = add i32 %v2_c39c, 28
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 2
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v0_c3a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3a4 = trunc i32 %v0_c3a4 to i8
  %v2_c3a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 1
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i32, i32* @r6, align 4
  %v1_c3a8 = trunc i32 %v0_c3a8 to i8
  %v2_c3a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 3
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v1_c3a8, i8* %v4_c3a8, align 1
  %v0_c3ac = load i32, i32* @r6, align 4
  %v1_c3ac = trunc i32 %v0_c3ac to i8
  %v2_c3ac = load i32, i32* %ip.global-to-local, align 4
  %v3_c3ac = add i32 %v2_c3ac, 4
  %v4_c3ac = inttoptr i32 %v3_c3ac to i8*
  store i8 %v1_c3ac, i8* %v4_c3ac, align 1
  %v0_c3b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3b0 = add i32 %v0_c3b0, 1
  store i32 %v1_c3b0, i32* %r0.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @sb, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 40
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c3b8, i32* %r2.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v3_c3c0 = call i32 @function_10478(i32 %v1_c3b0, i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 %v3_c3c0, i32* %r0.global-to-local, align 4
  %v1_c3c8 = load i32, i32* @r6, align 4
  %v10_c3c8 = inttoptr i32 %v1_c3c8 to i8*
  %v15_c3c8 = icmp eq i32 %v2_c140, %v1_c3c8
  store i1 %v15_c3c8, i1* %cpsr_z.global-to-local, align 1
  %v9_c3cc = icmp sgt i8* %v3_c140, %v10_c3c8
  store i32 %v1_c3c8, i32* %lr.global-to-local, align 4
  %v0_c3dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c3dc, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_c3c8 to i8
  br i1 %v9_c3cc, label %dec_label_pc_c3d8, label %dec_label_pc_c414

dec_label_pc_c3d8:                                ; preds = %bb136
  store i32 %v1_c3c8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %.thread37, %dec_label_pc_c3d8
  %v1_c3ec = phi i32 [ %v1_c3ec58, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v0_c3e4 = phi i32 [ %v1_c400, %.thread37 ], [ %v1_c3c8, %dec_label_pc_c3d8 ]
  %v1_c3e4 = load i32, i32* @r7, align 4
  %v2_c3e4 = add i32 %v1_c3e4, %v0_c3e4
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i8*
  %v4_c3e4 = load i8, i8* %v3_c3e4, align 1
  %v6_c3e4 = zext i8 %v4_c3e4 to i32
  store i32 %v6_c3e4, i32* %r3.global-to-local, align 4
  %v7_c3e8 = icmp eq i8 %v4_c3e4, 46
  store i1 %v7_c3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3e8, label %bb137, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_c3e4
  %v1_c3f035 = add i32 %v1_c3ec, 1
  store i32 %v1_c3f035, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_c3e4
  %v2_c3ec = trunc i32 %v1_c3ec to i8
  %v3_c3ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c3ec = inttoptr i32 %v3_c3ec to i8*
  store i8 %v2_c3ec, i8* %v4_c3ec, align 1
  %v0_c3f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c3f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c3f0 = add i32 %v0_c3f0, 1
  store i32 %v1_c3f0, i32* %r2.global-to-local, align 4
  br i1 %v0_c3f4.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread33, %bb137
  %v1_c3f036 = phi i32 [ %v1_c3f035, %.thread33 ], [ %v1_c3f0, %bb137 ]
  %v2_c3f4 = urem i32 %v1_c3f036, 256
  store i32 %v2_c3f4, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_c3ec59 = phi i32 [ %v0_c3f0, %bb137 ], [ %v2_c3f4, %bb138 ]
  %v0_c408.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_c140, i32* %r2.global-to-local, align 4
  %v0_c3fc = load i32, i32* %r4.global-to-local, align 4
  %v1_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_c3fc = add i32 %v1_c3fc, %v0_c3fc
  store i32 %v2_c3fc, i32* %r0.global-to-local, align 4
  %v1_c400 = add i32 %v1_c3fc, 1
  store i32 %v1_c400, i32* %r1.global-to-local, align 4
  br i1 %v0_c408.pr, label %bb140, label %.thread37

bb140:                                            ; preds = %bb139
  %v2_c404 = add i32 %v2_c3fc, 1
  store i32 %v2_c404, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb139, %bb140
  %v1_c3ec58 = phi i32 [ %v1_c3ec59, %bb139 ], [ 0, %bb140 ]
  %v9_c40c = icmp eq i32 %v2_c140, %v1_c400
  store i1 %v9_c40c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c40c, label %dec_label_pc_c414.loopexit, label %dec_label_pc_c3e4

dec_label_pc_c414.loopexit:                       ; preds = %.thread37
  %v2_c414.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_c3ec58 to i8
  br label %dec_label_pc_c414

dec_label_pc_c414:                                ; preds = %dec_label_pc_c414.loopexit, %bb136
  %v2_c414 = phi i32 [ %v2_c414.pre, %dec_label_pc_c414.loopexit ], [ %v0_c3dc, %bb136 ]
  %v0_c414.off0 = phi i8 [ %extract.t71, %dec_label_pc_c414.loopexit ], [ %extract.t72, %bb136 ]
  %v3_c414 = inttoptr i32 %v2_c414 to i8*
  store i8 %v0_c414.off0, i8* %v3_c414, align 1
  %v3_c418 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c140, i32* %ip.global-to-local, align 4
  store i32 %v1_becc, i32* @lr, align 4
  %v0_c424 = load i32, i32* %r4.global-to-local, align 4
  %v2_c424 = add i32 %v0_c424, %v2_c140
  store i32 %v2_c424, i32* %r3.global-to-local, align 4
  %v1_c428 = add i32 %v3_c418, 1
  store i32 %v1_c428, i32* @r4, align 4
  %v9_c42c = icmp eq i32 %v1_becc, %v1_c428
  store i1 %v9_c42c, i1* %cpsr_z.global-to-local, align 1
  %v1_c430 = add i32 %v2_c424, 2
  store i32 %v1_c430, i32* %r2.global-to-local, align 4
  %v0_c434 = load i32, i32* %sl.global-to-local, align 4
  %v1_c434 = trunc i32 %v0_c434 to i8
  %v4_c434 = inttoptr i32 %v1_c430 to i8*
  store i8 %v1_c434, i8* %v4_c434, align 1
  %v0_c438 = load i32, i32* %r8.global-to-local, align 4
  %v1_c438 = trunc i32 %v0_c438 to i8
  %v2_c438 = load i32, i32* %r2.global-to-local, align 4
  %v3_c438 = add i32 %v2_c438, 3
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i32, i32* %r8.global-to-local, align 4
  %v1_c43c = trunc i32 %v0_c43c to i8
  %v2_c43c = load i32, i32* %r2.global-to-local, align 4
  %v3_c43c = add i32 %v2_c43c, 1
  %v4_c43c = inttoptr i32 %v3_c43c to i8*
  store i8 %v1_c43c, i8* %v4_c43c, align 1
  %v0_c440 = load i32, i32* %sl.global-to-local, align 4
  %v1_c440 = trunc i32 %v0_c440 to i8
  %v2_c440 = load i32, i32* %r2.global-to-local, align 4
  %v3_c440 = add i32 %v2_c440, 2
  %v4_c440 = inttoptr i32 %v3_c440 to i8*
  store i8 %v1_c440, i8* %v4_c440, align 1
  %v0_c444 = load i32, i32* @r4, align 4
  store i32 %v0_c444, i32* %stack_var_-40, align 4
  %v8_c448 = icmp sgt i32 %v1_becc, %v1_c428
  br i1 %v8_c448, label %dec_label_pc_c2b4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c414, %dec_label_pc_c610
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_c1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1b0, label %dec_label_pc_c610, label %dec_label_pc_c460

dec_label_pc_c460:                                ; preds = %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c46c = load i32, i32* @sb, align 4
  %v2_c46c = add i32 %v0_c46c, %v2_c140
  store i32 %v2_c46c, i32* %r3.global-to-local, align 4
  %v1_c470 = add i32 %v2_c46c, 47
  store i32 %v1_c470, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* @r8, align 4
  %v1_c478 = add i32 %v2_c46c, 27
  store i32 %v1_c478, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c574

dec_label_pc_c488:                                ; preds = %dec_label_pc_c574
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v9_c48c = icmp eq i32 %v3_c1c0, %v1_c48c
  store i1 %v9_c48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c48c, label %dec_label_pc_c5b0, label %dec_label_pc_c494

dec_label_pc_c494:                                ; preds = %dec_label_pc_c594.dec_label_pc_c494_crit_edge, %dec_label_pc_c488
  %v1_c498 = phi i32 [ %v1_c498.pre, %dec_label_pc_c594.dec_label_pc_c494_crit_edge ], [ %v1_c48c, %dec_label_pc_c488 ]
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v9_c498 = icmp eq i32 %v3_c1c4, %v1_c498
  store i1 %v9_c498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c498, label %dec_label_pc_c5cc, label %dec_label_pc_c4a0

dec_label_pc_c4a0:                                ; preds = %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge, %dec_label_pc_c494
  %v1_c4a4 = phi i32 [ %v1_c4a4.pre, %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge ], [ %v1_c498, %dec_label_pc_c494 ]
  store i32 %v3_c1c8, i32* @lr, align 4
  %v9_c4a4 = icmp eq i32 %v3_c1c8, %v1_c4a4
  store i1 %v9_c4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4a4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c4ac:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0, %dec_label_pc_c5e8
  %v0_c4ac = load i32, i32* @r6, align 4
  store i32 %v0_c4ac, i32* %r0.global-to-local, align 4
  %v0_c4b0 = load i32, i32* @sb, align 4
  store i32 %v0_c4b0, i32* %r1.global-to-local, align 4
  %v2_c4b4 = call i32 @function_db6c(i32 %v0_c4ac, i32 %v0_c4b0)
  %v0_c4b8 = load i32, i32* @r7, align 4
  %v1_c4b8 = trunc i32 %v0_c4b8 to i8
  %v2_c4b8 = load i32, i32* @r6, align 4
  %v3_c4b8 = load i32, i32* @sb, align 4
  %v4_c4b8 = add i32 %v3_c4b8, %v2_c4b8
  %v5_c4b8 = inttoptr i32 %v4_c4b8 to i8*
  store i8 %v1_c4b8, i8* %v5_c4b8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @r7, align 4
  %v1_c4c0 = trunc i32 %v0_c4c0 to i8
  %v2_c4c0 = load i32, i32* @r4, align 4
  %v3_c4c0 = add i32 %v2_c4c0, 10
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i8*
  store i8 %v1_c4c0, i8* %v4_c4c0, align 1
  %v0_c4c4 = load i32, i32* @r7, align 4
  %v1_c4c4 = trunc i32 %v0_c4c4 to i8
  %v2_c4c4 = load i32, i32* @r4, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 11
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* @r4, align 4
  store i32 %v0_c4c8, i32* @r0, align 4
  %v2_c4cc = call i32 @function_c690(i32 %v0_c4c8, i32 20)
  %v3_c4cc = trunc i32 %v2_c4cc to i8
  store i32 %v2_c4cc, i32* %r0.global-to-local, align 4
  %v4_c4d0 = sdiv i32 %v2_c4cc, 256
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = trunc i32 %v4_c4d0 to i8
  %v2_c4d4 = load i32, i32* @r4, align 4
  %v3_c4d4 = add i32 %v2_c4d4, 11
  %v4_c4d4 = inttoptr i32 %v3_c4d4 to i8*
  store i8 %v1_c4d4, i8* %v4_c4d4, align 1
  %v3_c4d8 = load i32, i32* @r4, align 4
  %v4_c4d8 = add i32 %v3_c4d8, 10
  %v5_c4d8 = inttoptr i32 %v4_c4d8 to i8*
  store i8 %v3_c4cc, i8* %v5_c4d8, align 1
  %v0_c4dc = load i32, i32* @r7, align 4
  %v1_c4dc = trunc i32 %v0_c4dc to i8
  %v2_c4dc = load i32, i32* @r5, align 4
  %v3_c4dc = add i32 %v2_c4dc, 6
  %v4_c4dc = inttoptr i32 %v3_c4dc to i8*
  store i8 %v1_c4dc, i8* %v4_c4dc, align 1
  %v0_c4e0 = load i32, i32* @r7, align 4
  %v1_c4e0 = trunc i32 %v0_c4e0 to i8
  %v2_c4e0 = load i32, i32* @r5, align 4
  %v3_c4e0 = add i32 %v2_c4e0, 7
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* @r4, align 4
  %v1_c4e4 = add i32 %v0_c4e4, 24
  %v2_c4e4 = inttoptr i32 %v1_c4e4 to i8*
  %v3_c4e4 = load i8, i8* %v2_c4e4, align 1
  %v4_c4e4 = zext i8 %v3_c4e4 to i32
  store i32 %v4_c4e4, i32* %r3.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e4, 25
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i8*
  %v3_c4e8 = load i8, i8* %v2_c4e8, align 1
  %v4_c4e8 = zext i8 %v3_c4e8 to i32
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* @r1, align 4
  %v4_c4f0 = mul nuw nsw i32 %v4_c4e8, 256
  %v5_c4f0 = or i32 %v4_c4f0, %v4_c4e4
  store i32 %v5_c4f0, i32* %r2.global-to-local, align 4
  store i32 %v0_c4e4, i32* %r0.global-to-local, align 4
  %v0_c4f8 = load i32, i32* @fp, align 4
  store i32 %v0_c4f8, i32* %r3.global-to-local, align 4
  %v4_c4fc = call i32 @function_c6ec(i32 %v0_c4e4, i32 %v0_c4ec, i32 %v5_c4f0, i32 %v0_c4f8)
  %v5_c4fc = trunc i32 %v4_c4fc to i8
  store i32 %v4_c4fc, i32* %r0.global-to-local, align 4
  %v3_c500 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_c50c = mul i32 %v3_c500, 24
  store i32 %v5_c50c, i32* %lr.global-to-local, align 4
  %v4_c51077 = udiv i32 %v4_c4fc, 256
  %v1_c514 = trunc i32 %v4_c51077 to i8
  %v2_c514 = load i32, i32* @r5, align 4
  %v3_c514 = add i32 %v2_c514, 7
  %v4_c514 = inttoptr i32 %v3_c514 to i8*
  store i8 %v1_c514, i8* %v4_c514, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_c51c = load i32, i32* %lr.global-to-local, align 4
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = add i32 %v1_c51c, %v0_c51c
  store i32 %v2_c51c, i32* %lr.global-to-local, align 4
  %v3_c520 = load i32, i32* @r5, align 4
  %v4_c520 = add i32 %v3_c520, 6
  %v5_c520 = inttoptr i32 %v4_c520 to i8*
  store i8 %v5_c4fc, i8* %v5_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %lr.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* @r4, align 4
  %v1_c528 = add i32 %v0_c528, 20
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  %v3_c52c = udiv i32 %v3_c528, 65536
  store i32 %v3_c52c, i32* %r3.global-to-local, align 4
  %v3_c53016 = udiv i32 %v3_c528, 16777216
  %v1_c534 = trunc i32 %v3_c53016 to i8
  %v2_c534 = load i32, i32* %lr.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 3
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v0_c538 = load i32, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v0_c538 to i8
  %v2_c538 = load i32, i32* %lr.global-to-local, align 4
  %v3_c538 = add i32 %v2_c538, 2
  %v4_c538 = inttoptr i32 %v3_c538 to i8*
  store i8 %v1_c538, i8* %v4_c538, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c544 = load i32, i32* @r4, align 4
  store i32 %v0_c544, i32* %r1.global-to-local, align 4
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  store i32 %v1_c470, i32* %r2.global-to-local, align 4
  %v0_c550 = load i32, i32* %lr.global-to-local, align 4
  %v6_c558 = inttoptr i32 %v0_c544 to i32*
  %v7_c558 = call i32 @function_114ec(i32 %v3_c154, i32* %v6_c558, i32 %v1_c470, i32 16384, i32 %v0_c550, i32 16)
  %v3_c55c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c55c, i32* %r3.global-to-local, align 4
  %v1_c564 = add i32 %v3_c55c, 1
  store i32 %v1_c564, i32* %r0.global-to-local, align 4
  %v9_c568 = icmp eq i32 %v1_becc, %v1_c564
  store i1 %v9_c568, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c564, i32* %stack_var_-40, align 4
  %v7_c570 = icmp sgt i32 %v1_becc, %v1_c564
  br i1 %v7_c570, label %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, label %dec_label_pc_c610

dec_label_pc_c4ac.dec_label_pc_c574_crit_edge:    ; preds = %dec_label_pc_c4ac
  %v1_c580.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c574

dec_label_pc_c574:                                ; preds = %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge, %dec_label_pc_c460
  %v1_c48c = phi i32 [ %v1_c580.pre, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ ptrtoint (i32* @global_var_ffff.46 to i32), %dec_label_pc_c460 ]
  %v1_c57c = phi i32 [ %v1_c564, %dec_label_pc_c4ac.dec_label_pc_c574_crit_edge ], [ 0, %dec_label_pc_c460 ]
  store i32 %v2_bef4, i32* %lr.global-to-local, align 4
  store i32 %v3_c1bc, i32* %r2.global-to-local, align 4
  %v4_c57c = mul i32 %v1_c57c, 4
  %v5_c57c = add i32 %v4_c57c, %v2_bef4
  %v6_c57c = inttoptr i32 %v5_c57c to i32*
  %v7_c57c = load i32, i32* %v6_c57c, align 4
  store i32 %v7_c57c, i32* @r4, align 4
  %v9_c580 = icmp eq i32 %v3_c1bc, %v1_c48c
  store i1 %v9_c580, i1* %cpsr_z.global-to-local, align 1
  %v1_c584 = add i32 %v7_c57c, 20
  store i32 %v1_c584, i32* @r5, align 4
  %v1_c588 = add i32 %v7_c57c, 41
  store i32 %v1_c588, i32* @r6, align 4
  %v1_c58c = add i32 %v7_c57c, 28
  store i32 %v1_c58c, i32* @sl, align 4
  br i1 %v9_c580, label %dec_label_pc_c594, label %dec_label_pc_c488

dec_label_pc_c594:                                ; preds = %dec_label_pc_c574
  %v0_c594 = call i32 @function_dab8()
  %v1_c594 = trunc i32 %v0_c594 to i8
  store i32 %v0_c594, i32* %r0.global-to-local, align 4
  %v4_c59878 = udiv i32 %v0_c594, 256
  %v1_c59c = trunc i32 %v4_c59878 to i8
  %v2_c59c = load i32, i32* @r4, align 4
  %v3_c59c = add i32 %v2_c59c, 5
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  store i32 %v3_c1c0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = load i32, i32* @r8, align 4
  %v9_c5a4 = icmp eq i32 %v3_c1c0, %v1_c5a4
  store i1 %v9_c5a4, i1* %cpsr_z.global-to-local, align 1
  %v3_c5a8 = load i32, i32* @r4, align 4
  %v4_c5a8 = add i32 %v3_c5a8, 4
  %v5_c5a8 = inttoptr i32 %v4_c5a8 to i8*
  store i8 %v1_c594, i8* %v5_c5a8, align 1
  %v0_c5ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5ac, label %dec_label_pc_c5b0, label %dec_label_pc_c594.dec_label_pc_c494_crit_edge

dec_label_pc_c594.dec_label_pc_c494_crit_edge:    ; preds = %dec_label_pc_c594
  %v1_c498.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c494

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c594, %dec_label_pc_c488
  %v0_c5b0 = call i32 @function_dab8()
  %v1_c5b0 = trunc i32 %v0_c5b0 to i8
  store i32 %v0_c5b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v4_c5b8 = sdiv i32 %v0_c5b0, 256
  store i32 %v4_c5b8, i32* %r3.global-to-local, align 4
  %v1_c5bc = load i32, i32* @r8, align 4
  %v9_c5bc = icmp eq i32 %v3_c1c4, %v1_c5bc
  store i1 %v9_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v3_c5c0 = load i32, i32* @r4, align 4
  %v4_c5c0 = add i32 %v3_c5c0, 20
  %v5_c5c0 = inttoptr i32 %v4_c5c0 to i8*
  store i8 %v1_c5b0, i8* %v5_c5c0, align 1
  %v0_c5c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r5, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 1
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  %v0_c5c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5c8, label %dec_label_pc_c5cc, label %dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge

dec_label_pc_c5b0.dec_label_pc_c4a0_crit_edge:    ; preds = %dec_label_pc_c5b0
  %v1_c4a4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c4a0

dec_label_pc_c5cc:                                ; preds = %dec_label_pc_c5b0, %dec_label_pc_c494
  %v0_c5cc = call i32 @function_dab8()
  %v1_c5cc = trunc i32 %v0_c5cc to i8
  store i32 %v0_c5cc, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c8, i32* @lr, align 4
  %v4_c5d4 = sdiv i32 %v0_c5cc, 256
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r8, align 4
  %v9_c5d8 = icmp eq i32 %v3_c1c8, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_c5dc = trunc i32 %v4_c5d4 to i8
  %v2_c5dc = load i32, i32* @r5, align 4
  %v3_c5dc = add i32 %v2_c5dc, 3
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v3_c5e0 = load i32, i32* @r5, align 4
  %v4_c5e0 = add i32 %v3_c5e0, 2
  %v5_c5e0 = inttoptr i32 %v4_c5e0 to i8*
  store i8 %v1_c5cc, i8* %v5_c5e0, align 1
  %v0_c5e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e4, label %dec_label_pc_c5e8, label %dec_label_pc_c4ac

dec_label_pc_c5e8:                                ; preds = %dec_label_pc_c5cc, %dec_label_pc_c4a0
  %v0_c5e8 = call i32 @function_dab8()
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  store i32 %v0_c5e8, i32* %r0.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e8, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v3_c5f0 = load i32, i32* @r4, align 4
  %v4_c5f0 = add i32 %v3_c5f0, 28
  %v5_c5f0 = inttoptr i32 %v4_c5f0 to i8*
  store i8 %v1_c5e8, i8* %v5_c5f0, align 1
  %v0_c5f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f4 = trunc i32 %v0_c5f4 to i8
  %v2_c5f4 = load i32, i32* @sl, align 4
  %v3_c5f4 = add i32 %v2_c5f4, 1
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i8*
  store i8 %v1_c5f4, i8* %v4_c5f4, align 1
  br label %dec_label_pc_c4ac

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c164
  store i32 %v3_c154, i32* %r0.global-to-local, align 4
  %v1_c600 = call i32 @function_10c7c(i32 %v3_c154)
  store i32 %v1_c600, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c604

dec_label_pc_c604:                                ; preds = %dec_label_pc_c610, %dec_label_pc_c13c, %dec_label_pc_c124, %dec_label_pc_c5fc
  %v29_c60c = phi i32 [ %v3_c154, %dec_label_pc_c13c ], [ %v2_c130, %dec_label_pc_c124 ], [ %v1_c600, %dec_label_pc_c5fc ], [ %v2_c614, %dec_label_pc_c610 ]
  store i32 %v3_bec0, i32* %r4.global-to-local, align 4
  store i32 %v15_bec0, i32* %r8.global-to-local, align 4
  store i32 %v21_bec0, i32* %sl.global-to-local, align 4
  store i32 %v24_bec0, i32* %fp.global-to-local, align 4
  ret i32 %v29_c60c

dec_label_pc_c610.critedge:                       ; preds = %dec_label_pc_c190
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c610

dec_label_pc_c610:                                ; preds = %dec_label_pc_c4ac, %dec_label_pc_c610.critedge, %dec_label_pc_c44c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c614 = call i32 @function_10f4c(i32* null)
  store i32 %v2_c614, i32* %r0.global-to-local, align 4
  store i32 %v2_c130, i32* %ip.global-to-local, align 4
  %v9_c61c = icmp eq i32 %v2_c130, %v2_c614
  store i1 %v9_c61c, i1* %cpsr_z.global-to-local, align 1
  %v6_c620 = icmp slt i32 %v2_c130, %v2_c614
  br i1 %v6_c620, label %dec_label_pc_c604, label %dec_label_pc_c44c

dec_label_pc_c628:                                ; preds = %dec_label_pc_c0e0, %bb129
  %v0_c0e8.lcssa = phi i32 [ %v1_c0b4, %dec_label_pc_c0e0 ], [ %v0_c0e8, %bb129 ]
  %v2_c628 = sub i32 %v0_c0e8.lcssa, %v4_c06c
  store i32 %v2_c628, i32* %r2.global-to-local, align 4
  store i32 %v2_c0a4, i32* %r1.global-to-local, align 4
  store i32 %v2_c094, i32* %r0.global-to-local, align 4
  %v3_c634 = call i32 @function_10478(i32 %v2_c094, i32 %v2_c0a4, i32 %v2_c628)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c094, i32* @r0, align 4
  %v2_c640 = load i32, i32* @r4, align 4
  %v3_c640 = inttoptr i32 %v2_c640 to i8*
  store i8 0, i8* %v3_c640, align 1
  %v1_c644 = call i32 @function_11330(i32 %v2_c094)
  store i32 %v1_c644, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_c644, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_c124

dec_label_pc_c650:                                ; preds = %dec_label_pc_c0f8
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c124

dec_label_pc_c660:                                ; preds = %dec_label_pc_c0f8
  br label %dec_label_pc_c124

dec_label_pc_c674:                                ; preds = %dec_label_pc_c0f8
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c124

; uselistorder directives
  uselistorder i32 %v2_c614, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c5e8, { 0, 2, 1 }
  uselistorder i32 %v4_c5d4, { 1, 0 }
  uselistorder i32 %v0_c5cc, { 0, 2, 1 }
  uselistorder i32 %v0_c5b0, { 0, 2, 1 }
  uselistorder i32 %v0_c594, { 0, 2, 1 }
  uselistorder i32 %v7_c57c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c48c, { 2, 1, 0 }
  uselistorder i32 %v1_c564, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c4fc, { 0, 2, 1 }
  uselistorder i32 %v0_c4e4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c4d0, { 1, 0 }
  uselistorder i32 %v2_c4cc, { 0, 2, 1 }
  uselistorder i32 %v1_c470, { 1, 0, 2 }
  uselistorder i32 %v1_c400, { 0, 2, 1 }
  uselistorder i32 %v1_c3fc, { 1, 0 }
  uselistorder i32 %v2_c3f4, { 1, 0 }
  uselistorder i32 %v1_c3c8, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_c26c, { 1, 0 }
  uselistorder i32 %v3_c264, { 1, 0 }
  uselistorder i32 %v1_c21c, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c1f8, { 1, 0 }
  uselistorder i32 %v3_c1f0, { 1, 0 }
  uselistorder i32 %v1_c1b4, { 1, 0 }
  uselistorder i1 %v7_c188, { 1, 0 }
  uselistorder i1 %v7_c158, { 1, 0 }
  uselistorder i32 %v3_c154, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_c140, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_c130, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_c12c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_c0fc, { 1, 0 }
  uselistorder i32 %v0_c0f8, { 1, 0 }
  uselistorder i32 %v1_c0f0, { 1, 0 }
  uselistorder i32 %v1_c0e8, { 1, 2, 0 }
  uselistorder i1 %v7_c0d4, { 1, 0 }
  uselistorder i32 %v1_c0d0, { 1, 0, 2 }
  uselistorder i1 %v8_c0c8, { 1, 0 }
  uselistorder i1 %v7_c0c4, { 1, 0 }
  uselistorder i32 %v1_c0b8, { 1, 0 }
  uselistorder i8 %v2_c0ac, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c0d0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_c0a4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c098, { 1, 0, 2 }
  uselistorder i32 %v2_c094, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_c084, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_c07c, { 1, 0 }
  uselistorder i32 %v4_c06c, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_c020, { 1, 0, 2, 3 }
  uselistorder i32 %v6_bfc0, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bfa4, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bf8c, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32 %v1_bf74, { 1, 2, 0 }
  uselistorder i32 %v7_bf30, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_bf0c, { 1, 2, 0 }
  uselistorder i32 %v2_bef4, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_becc, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %sl.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 39, 38, 44, 40, 41, 42, 43, 45, 3, 4, 5, 6, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 42, 43, 44, 45, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 61, 45, 47, 46, 49, 48, 50, 51, 52, 54, 53, 55, 57, 56, 58, 59, 60, 2, 10, 3, 4, 5, 6, 7, 8, 9, 14, 11, 12, 13, 15, 17, 16, 19, 18, 20, 21, 22, 23, 25, 24, 26, 27, 29, 28, 30, 1, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %lr.global-to-local, { 21, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 25, 26, 27, 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 24, 23, 25, 26, 27, 28, 29, 30, 35, 31, 32, 33, 34, 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_829c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_c610, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c604, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c4ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c44c, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
  uselistorder label %dec_label_pc_c0e8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c0e0, { 1, 0 }
  uselistorder label %dec_label_pc_c0d4, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c688:
  call void @__pseudo_cond_branch(i1 false, i32 11145144)
  %v0_c68c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c68c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c688
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c688, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c690(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c690:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c6c0, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c690
  %v0_c6a0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c6a0

dec_label_pc_c6a0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c69c
  %v0_c6b4 = phi i32 [ %v2_c6b4, %dec_label_pc_c6a0 ], [ 0, %dec_label_pc_c69c ]
  %v0_c6a8 = phi i32 [ %v1_c6a8, %dec_label_pc_c6a0 ], [ %arg1, %dec_label_pc_c69c ]
  %v0_c6b8 = phi i32 [ %v1_c6b8, %dec_label_pc_c6a0 ], [ %v0_c6a0.pre, %dec_label_pc_c69c ]
  %v1_c6a0 = inttoptr i32 %v0_c6b8 to i8*
  %v2_c6a0 = load i8, i8* %v1_c6a0, align 1
  %v3_c6a0 = zext i8 %v2_c6a0 to i32
  %v1_c6a4 = add i32 %v0_c6b8, 1
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i8*
  %v3_c6a4 = load i8, i8* %v2_c6a4, align 1
  %v4_c6a4 = zext i8 %v3_c6a4 to i32
  %v1_c6a8 = add i32 %v0_c6a8, -2
  %v4_c6ac = mul nuw nsw i32 %v4_c6a4, 256
  %v5_c6ac = or i32 %v4_c6ac, %v3_c6a0
  %v2_c6b4 = add i32 %v5_c6ac, %v0_c6b4
  %v1_c6b8 = add i32 %v0_c6b8, 2
  store i32 %v1_c6b8, i32* @r0, align 4
  %v1_c6a8.cmp = icmp ugt i32 %v1_c6a8, 1
  br i1 %v1_c6a8.cmp, label %dec_label_pc_c6a0, label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6a0, %dec_label_pc_c690
  %v1_c6c8 = phi i32 [ 0, %dec_label_pc_c690 ], [ %v2_c6b4, %dec_label_pc_c6a0 ]
  %v0_c6c0 = phi i32 [ %arg1, %dec_label_pc_c690 ], [ %v1_c6a8, %dec_label_pc_c6a0 ]
  %v7_c6c0 = icmp eq i32 %v0_c6c0, 1
  br i1 %v7_c6c0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c6c0
  %v1_c6c4 = load i32, i32* @r0, align 4
  %v2_c6c4 = inttoptr i32 %v1_c6c4 to i8*
  %v3_c6c4 = load i8, i8* %v2_c6c4, align 1
  %v4_c6c4 = zext i8 %v3_c6c4 to i32
  %v3_c6c8 = add i32 %v1_c6c8, %v4_c6c4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c6c0, %bb
  %v0_c6cc = phi i32 [ %v1_c6c8, %dec_label_pc_c6c0 ], [ %v3_c6c8, %bb ]
  %v3_c6d0 = urem i32 %v0_c6cc, 65536
  %v4_c6d4 = udiv i32 %v0_c6cc, 65536
  %v5_c6d4 = add nuw nsw i32 %v4_c6d4, %v3_c6d0
  %v4_c6d8 = udiv i32 %v5_c6d4, 65536
  %v5_c6d8 = add nuw nsw i32 %v4_c6d8, %v5_c6d4
  %v1_c6dc = urem i32 %v5_c6d8, 65536
  %v3_c6e4 = xor i32 %v1_c6dc, 65535
  ret i32 %v3_c6e4

; uselistorder directives
  uselistorder i32 %v5_c6d4, { 1, 0 }
  uselistorder i32 %v1_c6b8, { 1, 0 }
  uselistorder i32 %v1_c6a8, { 1, 0, 2 }
  uselistorder i32 %v0_c6b8, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6ec:
  %v3_c6fc = urem i32 %arg2, 65536
  %v1_c700 = add i32 %arg1, 12
  %v1_c704 = inttoptr i32 %v1_c700 to i32*
  %v2_c704 = load i32, i32* %v1_c704, align 4
  %v3_c704 = add i32 %arg1, 16
  %v4_c704 = inttoptr i32 %v3_c704 to i32*
  %v5_c704 = load i32, i32* %v4_c704, align 4
  %v7_c708 = icmp sgt i32 %arg3, 1
  store i32 0, i32* @lr, align 4
  br i1 %v7_c708, label %dec_label_pc_c714.preheader, label %dec_label_pc_c734

dec_label_pc_c714.preheader:                      ; preds = %dec_label_pc_c6ec
  %v0_c714.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c714.preheader, %dec_label_pc_c714
  %v0_c728 = phi i32 [ 0, %dec_label_pc_c714.preheader ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c71c = phi i32 [ %arg3, %dec_label_pc_c714.preheader ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v0_c72c = phi i32 [ %v0_c714.pre, %dec_label_pc_c714.preheader ], [ %v1_c72c, %dec_label_pc_c714 ]
  %v1_c714 = inttoptr i32 %v0_c72c to i8*
  %v2_c714 = load i8, i8* %v1_c714, align 1
  %v3_c714 = zext i8 %v2_c714 to i32
  %v1_c718 = add i32 %v0_c72c, 1
  %v2_c718 = inttoptr i32 %v1_c718 to i8*
  %v3_c718 = load i8, i8* %v2_c718, align 1
  %v4_c718 = zext i8 %v3_c718 to i32
  %v1_c71c = add nsw i32 %v0_c71c, -2
  %v4_c720 = mul nuw nsw i32 %v4_c718, 256
  %v5_c720 = or i32 %v4_c720, %v3_c714
  %v2_c728 = add i32 %v5_c720, %v0_c728
  store i32 %v2_c728, i32* @lr, align 4
  %v1_c72c = add i32 %v0_c72c, 2
  store i32 %v1_c72c, i32* @r1, align 4
  %v8_c730 = icmp sgt i32 %v1_c71c, 1
  br i1 %v8_c730, label %dec_label_pc_c714, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c714, %dec_label_pc_c6ec
  %v1_c73c = phi i32 [ 0, %dec_label_pc_c6ec ], [ %v2_c728, %dec_label_pc_c714 ]
  %v0_c734 = phi i32 [ %arg3, %dec_label_pc_c6ec ], [ %v1_c71c, %dec_label_pc_c714 ]
  %v7_c734 = icmp eq i32 %v0_c734, 1
  br i1 %v7_c734, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c734
  %v1_c738 = load i32, i32* @r1, align 4
  %v2_c738 = inttoptr i32 %v1_c738 to i8*
  %v3_c738 = load i8, i8* %v2_c738, align 1
  %v4_c738 = zext i8 %v3_c738 to i32
  %v3_c73c = add i32 %v4_c738, %v1_c73c
  store i32 %v3_c73c, i32* @lr, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c734, %bb
  %v0_c760 = phi i32 [ %v1_c73c, %dec_label_pc_c734 ], [ %v3_c73c, %bb ]
  %v3_c744 = urem i32 %v2_c704, 65536
  %v1_c74c = add i32 %arg1, 9
  %v2_c74c = inttoptr i32 %v1_c74c to i8*
  %v3_c74c = load i8, i8* %v2_c74c, align 1
  %v4_c74c = zext i8 %v3_c74c to i32
  %v3_c750 = urem i32 %v5_c704, 65536
  %v4_c754 = udiv i32 %v2_c704, 65536
  %v3_c75c = mul nuw nsw i32 %v4_c74c, 256
  %v4_c760 = udiv i32 %v5_c704, 65536
  %v5_c760 = add i32 %v0_c760, %v4_c760
  %v2_c764 = add i32 %v5_c760, %v3_c75c
  %v5_c754 = add nuw nsw i32 %v3_c744, %v3_c6fc
  %v2_c758 = add nuw nsw i32 %v5_c754, %v4_c754
  %v2_c768 = add nuw nsw i32 %v2_c758, %v3_c750
  %v2_c76c = add i32 %v2_c764, %v2_c768
  %tmp = icmp ult i32 %v2_c76c, 65536
  br i1 %tmp, label %dec_label_pc_c78c, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %.thread, %dec_label_pc_c778
  %v2_c7801 = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842.in = phi i32 [ %v2_c780, %dec_label_pc_c778 ], [ %v2_c76c, %.thread ]
  %v3_c7842 = udiv i32 %v3_c7842.in, 65536
  %v3_c77c = urem i32 %v2_c7801, 65536
  %v2_c780 = add nuw nsw i32 %v3_c77c, %v3_c7842
  %tmp14 = icmp ult i32 %v2_c780, 65536
  br i1 %tmp14, label %dec_label_pc_c78c.loopexit, label %dec_label_pc_c778

dec_label_pc_c78c.loopexit:                       ; preds = %dec_label_pc_c778
  br label %dec_label_pc_c78c

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c78c.loopexit, %.thread
  %v0_c78c = phi i32 [ %v2_c780, %dec_label_pc_c78c.loopexit ], [ %v2_c76c, %.thread ]
  %v1_c78c = urem i32 %v0_c78c, 65536
  %v3_c794 = xor i32 %v1_c78c, 65535
  ret i32 %v3_c794

; uselistorder directives
  uselistorder i32 %v2_c780, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c76c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c73c, { 1, 0 }
  uselistorder i32 %v1_c72c, { 1, 0 }
  uselistorder i32 %v2_c728, { 0, 2, 1 }
  uselistorder i32 %v1_c71c, { 0, 2, 1 }
  uselistorder i32 %v0_c72c, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c778, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c714, { 1, 0 }
}

define i32 @function_c79c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c79c:
  %v2_c7a0 = load i32, i32* @global_var_1bb94.59, align 4
  %v2_c7a8 = call i32 @function_10d7c(i32 %v2_c7a0, i32 9)
  %v0_c7ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c7ac, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c79c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c79c, %bb
  ret i32 %v2_c7a8

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c7b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_c7b0:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-584 = alloca i32, align 4
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_c7b0 = load i32, i32* @r4, align 4
  store i32 %v3_c7b0, i32* %stack_var_-36, align 4
  %v6_c7b0 = load i32, i32* @r5, align 4
  %v9_c7b0 = load i32, i32* @r6, align 4
  %v12_c7b0 = load i32, i32* @r7, align 4
  %v15_c7b0 = load i32, i32* @r8, align 4
  %v18_c7b0 = load i32, i32* @sb, align 4
  %v21_c7b0 = load i32, i32* @sl, align 4
  %v24_c7b0 = load i32, i32* @fp, align 4
  %v2_c7c4 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_c7c4, i32* @sl, align 4
  %v3_c7cc = mul i32 %arg1, 65536
  store i32 %v3_c7cc, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c7d8 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_c7e0 = ptrtoint i32* %stack_var_-584 to i32
  %v2_c7e4 = bitcast i32* %stack_var_-4677 to i8*
  %v3_c7e4 = call i32 @function_11290(i8* %v2_c7e4, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_c7fc = bitcast i32* %stack_var_-8773 to i8*
  %v3_c7fc = call i32 @function_11290(i8* %v2_c7fc, i32 0)
  %v2_c800 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_c800, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_c820 = call i32 @function_11290(i8* nonnull %stack_var_-581, i32 0)
  %v2_c824 = ptrtoint i8* %stack_var_-68 to i32
  %v1_c82c = load i32, i32* @r5, align 4
  %v4_c82c = udiv i32 %v1_c82c, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v8_c84c = trunc i32 %v4_c82c to i8
  %v9_c84c = call i32 @function_107dc(i8 %v8_c84c, i32 16, i32 %v2_c824, i32 %v2_c7e0, i32 0, i32 0, i32 0, i32 0)
  %v2_c854 = call i32 @function_103fc(i8* nonnull %stack_var_-68)
  %v7_c858 = icmp eq i32 %v2_c854, 2
  br i1 %v7_c858, label %dec_label_pc_cd04, label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_cd04
  %v1_c864 = call i32 @function_ff28(i32 3)
  %v1_c86c = call i32 @function_ff28(i32 4)
  %v1_c874 = call i32 @function_ff28(i32 6)
  %v1_c87c = call i32 @function_ff28(i32 8)
  %v0_c880 = load i32, i32* @r4, align 4
  %v2_c888 = inttoptr i32 %v0_c880 to i32*
  %v3_c888 = call i32 @function_fe44(i32 8, i32* %v2_c888)
  %v0_c88c = load i32, i32* @r4, align 4
  %v2_c890 = inttoptr i32 %v3_c888 to i8*
  %v3_c890 = call i32 @function_10da8(i8* %v2_c890, i32 %v0_c88c)
  %v7_c894 = icmp eq i32 %v3_c890, -1
  store i32 %v3_c890, i32* @r8, align 4
  br i1 %v7_c894, label %dec_label_pc_ccc4, label %dec_label_pc_c8a0.preheader

dec_label_pc_c8a0.preheader:                      ; preds = %dec_label_pc_c860
  %v4_c8ac58 = call i32 @function_10654(i8* nonnull %stack_var_-581, i32 512, i32 %v3_c890)
  %v2_c8b060 = icmp eq i32 %v4_c8ac58, 0
  br i1 %v2_c8b060, label %dec_label_pc_ca40.loopexit, label %dec_label_pc_c8b8.lr.ph

dec_label_pc_c8b8.lr.ph:                          ; preds = %dec_label_pc_c8a0.preheader
  %v2_c900 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_c8b8

dec_label_pc_c8b8:                                ; preds = %dec_label_pc_c8b8.lr.ph, %dec_label_pc_c8a0.backedge
  %v3_c8bc = load i8, i8* %stack_var_-581, align 1
  %v4_c8bc = sext i8 %v3_c8bc to i32
  %v2_c8c0 = icmp eq i8 %v3_c8bc, 0
  br i1 %v2_c8c0, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_c8b8
  %v8_c8c4 = icmp eq i8 %v3_c8bc, 58
  br i1 %v8_c8c4, label %.thread6, label %dec_label_pc_c8d8

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_c8f0

bb126:                                            ; preds = %dec_label_pc_c8b8
  br label %dec_label_pc_c8f0

dec_label_pc_c8d8:                                ; preds = %bb
  %v1_c8e0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c8dc

dec_label_pc_c8dc:                                ; preds = %bb127, %dec_label_pc_c8d8
  %v0_c8dc = phi i32 [ %v1_c8dc, %bb127 ], [ 0, %dec_label_pc_c8d8 ]
  %v1_c8dc = add i32 %v0_c8dc, 1
  %v2_c8e0 = add i32 %v1_c8dc, %v1_c8e0.pre
  %v3_c8e0 = inttoptr i32 %v2_c8e0 to i8*
  %v4_c8e0 = load i8, i8* %v3_c8e0, align 1
  %v6_c8e0 = zext i8 %v4_c8e0 to i32
  %v2_c8e4 = icmp eq i8 %v4_c8e0, 0
  br i1 %v2_c8e4, label %dec_label_pc_c8f0, label %bb127

bb127:                                            ; preds = %dec_label_pc_c8dc
  %v8_c8e8 = icmp eq i8 %v4_c8e0, 58
  br i1 %v8_c8e8, label %dec_label_pc_c8f0, label %dec_label_pc_c8dc

dec_label_pc_c8f0:                                ; preds = %dec_label_pc_c8dc, %bb127, %bb126, %.thread6
  %v1_c91c = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_c8dc, %bb127 ], [ %v1_c8dc, %dec_label_pc_c8dc ]
  %v0_c8f0 = phi i32 [ %v4_c8bc, %.thread6 ], [ %v4_c8bc, %bb126 ], [ %v6_c8e0, %bb127 ], [ %v6_c8e0, %dec_label_pc_c8dc ]
  %v2_c8f0 = icmp eq i32 %v0_c8f0, 0
  br i1 %v2_c8f0, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c8f8

dec_label_pc_c8a0.backedge:                       ; preds = %dec_label_pc_c8f0, %dec_label_pc_c9c8, %dec_label_pc_ca14, %dec_label_pc_c93c
  %v0_c8a8 = load i32, i32* @r8, align 4
  %v4_c8ac = call i32 @function_10654(i8* nonnull %stack_var_-581, i32 512, i32 %v0_c8a8)
  %v2_c8b0 = icmp eq i32 %v4_c8ac, 0
  br i1 %v2_c8b0, label %dec_label_pc_ca40.loopexit, label %dec_label_pc_c8b8

dec_label_pc_c8f8:                                ; preds = %dec_label_pc_c8f0
  %v1_c8fc = add i32 %v1_c91c, 2
  %v2_c904 = add i32 %v1_c8fc, %v2_c900
  %v1_c908 = add i32 %v2_c904, -545
  %v2_c908 = inttoptr i32 %v1_c908 to i8*
  %v3_c908 = load i8, i8* %v2_c908, align 1
  %v2_c90c = icmp eq i8 %v3_c908, 0
  br i1 %v2_c90c, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_c8f8
  %v8_c910 = icmp eq i8 %v3_c908, 32
  br i1 %v8_c910, label %.thread10, label %dec_label_pc_c91c

.thread10:                                        ; preds = %bb128
  store i32 %v1_c8fc, i32* @r5, align 4
  br label %dec_label_pc_c93c

bb129:                                            ; preds = %dec_label_pc_c8f8
  store i32 %v1_c8fc, i32* @r5, align 4
  br label %dec_label_pc_c93c

dec_label_pc_c91c:                                ; preds = %bb128
  %v0_c91c = load i32, i32* @r6, align 4
  %v2_c91c = add i32 %v0_c91c, %v1_c91c
  br label %dec_label_pc_c920

dec_label_pc_c920:                                ; preds = %bb130, %dec_label_pc_c91c
  %v0_c92c13 = phi i32 [ %v1_c92c, %bb130 ], [ %v2_c91c, %dec_label_pc_c91c ]
  %v1_c920 = add i32 %v0_c92c13, 3
  %v2_c920 = inttoptr i32 %v1_c920 to i8*
  %v3_c920 = load i8, i8* %v2_c920, align 1
  %v2_c924 = icmp eq i8 %v3_c920, 0
  br i1 %v2_c924, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_c920
  %v1_c92c14 = add i32 %v0_c92c13, 1
  br label %dec_label_pc_c934

bb130:                                            ; preds = %dec_label_pc_c920
  %v8_c928 = icmp eq i8 %v3_c920, 32
  %v1_c92c = add i32 %v0_c92c13, 1
  br i1 %v8_c928, label %dec_label_pc_c934, label %dec_label_pc_c920

dec_label_pc_c934:                                ; preds = %bb130, %.thread12
  %v1_c92c15 = phi i32 [ %v1_c92c14, %.thread12 ], [ %v1_c92c, %bb130 ]
  %v2_c934 = sub i32 %v1_c92c15, %v0_c91c
  %v1_c938 = add i32 %v2_c934, 2
  store i32 %v1_c938, i32* @r5, align 4
  br label %dec_label_pc_c93c

dec_label_pc_c93c:                                ; preds = %bb129, %.thread10, %dec_label_pc_c934
  %v1_c948 = phi i32 [ %v1_c8fc, %.thread10 ], [ %v1_c8fc, %bb129 ], [ %v1_c938, %dec_label_pc_c934 ]
  %v0_c93c = load i32, i32* @r6, align 4
  %v2_c93c = add i32 %v0_c93c, %v1_c8fc
  store i32 %v2_c93c, i32* @r4, align 4
  %v2_c948 = add i32 %v1_c948, %v2_c900
  store i32 0, i32* @r7, align 4
  %v3_c954 = add i32 %v2_c948, -545
  %v4_c954 = inttoptr i32 %v3_c954 to i8*
  store i8 0, i8* %v4_c954, align 1
  %v1_c958 = inttoptr i32 %v2_c93c to i8*
  %v2_c958 = call i32 @function_103fc(i8* %v1_c958)
  store i32 %v2_c958, i32* @r1, align 4
  %v0_c964 = load i32, i32* @r4, align 4
  %v3_c968 = inttoptr i32 %v0_c964 to i8*
  %v4_c968 = call i32 @function_10750(i8* %v3_c968, i32 %v2_c958, i32 %v2_c824)
  %v7_c96c = icmp eq i32 %v4_c968, -1
  br i1 %v7_c96c, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c988.preheader

dec_label_pc_c988.preheader:                      ; preds = %dec_label_pc_c93c
  %v1_c970 = load i32, i32* @r7, align 4
  %v1_c974 = load i32, i32* @r6, align 4
  %v2_c974 = load i32, i32* @r5, align 4
  %v3_c974 = add i32 %v2_c974, %v1_c974
  store i32 %v1_c970, i32* @lr, align 4
  store i32 %v1_c970, i32* @r4, align 4
  %v1_c98850 = add i32 %v3_c974, 2
  %v2_c98851 = inttoptr i32 %v1_c98850 to i8*
  %v3_c98852 = load i8, i8* %v2_c98851, align 1
  %v2_c98c54 = icmp eq i8 %v3_c98852, 0
  %v1_c99056 = add i32 %v2_c974, 2
  br i1 %v2_c98c54, label %dec_label_pc_c9c8, label %dec_label_pc_c998

dec_label_pc_c998:                                ; preds = %dec_label_pc_c988.preheader, %dec_label_pc_c988.backedge
  %v0_c9c886 = phi i32 [ %v0_c9c885, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_c9b0.pr = phi i32 [ %v0_c9b0.pr71, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_ccd4 = phi i32 [ %v0_ccd474, %dec_label_pc_c988.backedge ], [ %v1_c970, %dec_label_pc_c988.preheader ]
  %v0_c99082 = phi i32 [ %v1_c990, %dec_label_pc_c988.backedge ], [ %v1_c99056, %dec_label_pc_c988.preheader ]
  %v0_c9c0 = phi i32 [ %v0_c988, %dec_label_pc_c988.backedge ], [ %v3_c974, %dec_label_pc_c988.preheader ]
  %v1_c99c.in = phi i8 [ %v3_c988, %dec_label_pc_c988.backedge ], [ %v3_c98852, %dec_label_pc_c988.preheader ]
  %v7_c998 = icmp eq i8 %v1_c99c.in, 9
  br i1 %v7_c998, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_c998
  %v8_c99c = icmp eq i8 %v1_c99c.in, 32
  br i1 %v8_c99c, label %.thread23.thread35, label %dec_label_pc_c9b0

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_c9bc

.thread23:                                        ; preds = %dec_label_pc_c998
  br label %dec_label_pc_c9bc

dec_label_pc_c9b0:                                ; preds = %bb131
  %v7_c9b0 = icmp eq i32 %v0_c9b0.pr, 1
  br i1 %v7_c9b0, label %dec_label_pc_ccd4, label %dec_label_pc_c9b8

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_ccd4, %dec_label_pc_c9b0
  %v0_c9bc79 = phi i32 [ %v1_ccd4, %dec_label_pc_ccd4 ], [ %v0_ccd4, %dec_label_pc_c9b0 ]
  br label %dec_label_pc_c9bc

dec_label_pc_c9bc:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_c9b8
  %v0_c9bc = phi i32 [ %v0_ccd4, %.thread23.thread35 ], [ %v0_ccd4, %.thread23 ], [ %v0_c9bc79, %dec_label_pc_c9b8 ]
  %v0_c9b0.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_c9b8 ]
  %v7_c9c4 = icmp sgt i32 %v0_c9bc, 6
  br i1 %v7_c9c4, label %dec_label_pc_c9c8, label %dec_label_pc_c988.backedge

dec_label_pc_c9c8:                                ; preds = %dec_label_pc_c988.backedge, %dec_label_pc_c9bc, %dec_label_pc_c988.preheader
  %v1_ca18 = phi i32 [ %v1_c99056, %dec_label_pc_c988.preheader ], [ %v1_c990, %dec_label_pc_c988.backedge ], [ %v0_c99082, %dec_label_pc_c9bc ]
  %v0_c9c8 = phi i32 [ %v1_c970, %dec_label_pc_c988.preheader ], [ %v0_c9c885, %dec_label_pc_c988.backedge ], [ %v0_c9c886, %dec_label_pc_c9bc ]
  %v2_c9c8 = icmp eq i32 %v0_c9c8, 0
  br i1 %v2_c9c8, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_c9d4

dec_label_pc_c9d4:                                ; preds = %dec_label_pc_c9c8
  %v2_c9dc = add i32 %v1_ca18, %v2_c900
  %v1_c9e0 = add i32 %v2_c9dc, -545
  %v2_c9e0 = inttoptr i32 %v1_c9e0 to i8*
  %v3_c9e0 = load i8, i8* %v2_c9e0, align 1
  %v2_c9e4 = icmp eq i8 %v3_c9e0, 0
  br i1 %v2_c9e4, label %dec_label_pc_ca14, label %bb132

bb132:                                            ; preds = %dec_label_pc_c9d4
  %v8_c9e8 = icmp eq i8 %v3_c9e0, 32
  br i1 %v8_c9e8, label %dec_label_pc_ca14, label %dec_label_pc_c9f0

dec_label_pc_c9f0:                                ; preds = %bb132
  %v2_c9f0 = add i32 %v1_ca18, %v1_c974
  br label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %bb133, %dec_label_pc_c9f0
  %v0_ca0028 = phi i32 [ %v1_ca00, %bb133 ], [ %v1_ca18, %dec_label_pc_c9f0 ]
  %v0_c9f4 = phi i32 [ %v1_c9f4, %bb133 ], [ %v2_c9f0, %dec_label_pc_c9f0 ]
  %v1_c9f4 = add i32 %v0_c9f4, 1
  %v2_c9f4 = inttoptr i32 %v1_c9f4 to i8*
  %v3_c9f4 = load i8, i8* %v2_c9f4, align 1
  %v2_c9f8 = icmp eq i8 %v3_c9f4, 0
  br i1 %v2_c9f8, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_c9f4
  %v1_ca0029 = add i32 %v0_ca0028, 1
  br label %dec_label_pc_ca08

bb133:                                            ; preds = %dec_label_pc_c9f4
  %v8_c9fc = icmp eq i8 %v3_c9f4, 32
  %v1_ca00 = add i32 %v0_ca0028, 1
  br i1 %v8_c9fc, label %dec_label_pc_ca08, label %dec_label_pc_c9f4

dec_label_pc_ca08:                                ; preds = %bb133, %.thread27
  %v1_ca10 = phi i32 [ %v1_ca0029, %.thread27 ], [ %v1_ca00, %bb133 ]
  %v2_ca10 = add i32 %v1_ca10, %v2_c900
  br label %dec_label_pc_ca14

dec_label_pc_ca14:                                ; preds = %dec_label_pc_c9d4, %bb132, %dec_label_pc_ca08
  %v2_ca20 = phi i32 [ %v2_c9dc, %dec_label_pc_c9d4 ], [ %v2_c9dc, %bb132 ], [ %v2_ca10, %dec_label_pc_ca08 ]
  %v2_ca18 = add i32 %v1_ca18, %v1_c974
  store i32 %v2_ca18, i32* @r4, align 4
  %v3_ca20 = add i32 %v2_ca20, -545
  %v4_ca20 = inttoptr i32 %v3_ca20 to i8*
  store i8 0, i8* %v4_ca20, align 1
  %v1_ca24 = inttoptr i32 %v2_ca18 to i8*
  %v2_ca24 = call i32 @function_103fc(i8* %v1_ca24)
  %v8_ca2c = icmp sgt i32 %v2_ca24, 15
  br i1 %v8_ca2c, label %dec_label_pc_c8a0.backedge, label %dec_label_pc_ca30

dec_label_pc_ca30:                                ; preds = %dec_label_pc_ca14
  %v0_ca34 = load i32, i32* @r4, align 4
  %v2_ca38 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ca38, i32* @r0, align 4
  %v2_ca3c = bitcast i32* %stack_var_-52 to i8*
  %v3_ca3c = call i32 @function_10424(i8* %v2_ca3c, i32 %v0_ca34)
  br label %dec_label_pc_ca40

dec_label_pc_ca40.loopexit:                       ; preds = %dec_label_pc_c8a0.backedge, %dec_label_pc_c8a0.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_ca40

dec_label_pc_ca40:                                ; preds = %dec_label_pc_ca40.loopexit, %dec_label_pc_ca30
  %v1_ca50.pre-phi = phi i8* [ %.pre95, %dec_label_pc_ca40.loopexit ], [ %v2_ca3c, %dec_label_pc_ca30 ]
  %v2_ca4c.pre-phi = phi i32 [ %.pre, %dec_label_pc_ca40.loopexit ], [ %v2_ca38, %dec_label_pc_ca30 ]
  %v0_ca40 = load i32, i32* @r8, align 4
  %v1_ca44 = call i32 @function_10c7c(i32 %v0_ca40)
  %v2_ca50 = call i32 @function_103fc(i8* %v1_ca50.pre-phi)
  store i32 %v2_ca50, i32* @r4, align 4
  %v2_ca54 = icmp eq i32 %v2_ca50, 0
  br i1 %v2_ca54, label %dec_label_pc_cca4, label %dec_label_pc_ca5c

dec_label_pc_ca5c:                                ; preds = %dec_label_pc_ca40
  %v3_ca64 = call i32 @function_fe44(i32 3, i32* null)
  %v1_ca68 = call i32 @function_11058(i32 %v3_ca64)
  store i32 %v1_ca68, i32* @r8, align 4
  %v2_ca6c = icmp eq i32 %v1_ca68, 0
  br i1 %v2_ca6c, label %dec_label_pc_cc9c, label %dec_label_pc_ca7c.preheader

dec_label_pc_ca7c.preheader:                      ; preds = %dec_label_pc_ca5c
  store i32 0, i32* @r5, align 4
  %v1_ca8045 = inttoptr i32 %v1_ca68 to i32*
  %v2_ca8046 = call i32 @function_11154(i32* %v1_ca8045)
  %v2_ca8448 = icmp eq i32 %v2_ca8046, 0
  br i1 %v2_ca8448, label %dec_label_pc_cc90, label %dec_label_pc_ca8c.preheader

dec_label_pc_ca7c.loopexit:                       ; preds = %dec_label_pc_ca94, %dec_label_pc_caa8, %dec_label_pc_cb10
  %v0_ca7c = load i32, i32* @r8, align 4
  %v1_ca80 = inttoptr i32 %v0_ca7c to i32*
  %v2_ca80 = call i32 @function_11154(i32* %v1_ca80)
  %v2_ca84 = icmp eq i32 %v2_ca80, 0
  br i1 %v2_ca84, label %dec_label_pc_cc90, label %dec_label_pc_ca8c.preheader

dec_label_pc_ca8c.preheader:                      ; preds = %dec_label_pc_ca7c.preheader, %dec_label_pc_ca7c.loopexit
  %v0_ca9494 = phi i32 [ %v2_ca80, %dec_label_pc_ca7c.loopexit ], [ %v2_ca8046, %dec_label_pc_ca7c.preheader ]
  br label %dec_label_pc_ca8c

dec_label_pc_ca8c:                                ; preds = %dec_label_pc_ca8c.preheader, %dec_label_pc_cc78
  %v0_caa0 = phi i32 [ %v0_ca9494, %dec_label_pc_ca8c.preheader ], [ %v2_cc84, %dec_label_pc_cc78 ]
  %v0_ca8c = load i32, i32* @r5, align 4
  %v2_ca8c = icmp eq i32 %v0_ca8c, 0
  br i1 %v2_ca8c, label %dec_label_pc_ca94, label %dec_label_pc_cc90

dec_label_pc_ca94:                                ; preds = %dec_label_pc_ca8c
  %v1_ca94 = add i32 %v0_caa0, 11
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v4_ca94 = zext i8 %v3_ca94 to i32
  %v1_ca98 = add nsw i32 %v4_ca94, -48
  store i32 %v1_ca94, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_ca98, 9
  br i1 %tmp, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %dec_label_pc_ca94
  %v3_cab0 = call i32 @function_fe44(i32 3, i32* null)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cabc = call i32 @function_10424(i8* %v2_c7e4, i32 %v3_cab0)
  %v2_cac4 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cac8 = load i32, i32* @r7, align 4
  %v0_cacc = load i32, i32* @sl, align 4
  %v2_cacc = add i32 %v0_cacc, %v2_cac4
  store i32 %v2_cacc, i32* @r0, align 4
  %v2_cad0 = inttoptr i32 %v2_cacc to i8*
  %v3_cad0 = call i32 @function_10424(i8* %v2_cad0, i32 %v0_cac8)
  %v2_cad8 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cadc = load i32, i32* @r5, align 4
  store i32 %v2_cad8, i32* @r4, align 4
  %v2_cae8 = inttoptr i32 %v0_cadc to i32*
  %v3_cae8 = call i32 @function_fe44(i32 4, i32* %v2_cae8)
  %v0_caf0 = load i32, i32* @sl, align 4
  %v1_caf0 = load i32, i32* @r4, align 4
  %v2_caf0 = add i32 %v1_caf0, %v0_caf0
  store i32 %v2_caf0, i32* @r0, align 4
  %v2_caf4 = inttoptr i32 %v2_caf0 to i8*
  %v3_caf4 = call i32 @function_10424(i8* %v2_caf4, i32 %v3_cae8)
  %v4_cb04 = call i32 @function_10e70(i8* %v2_c7e4, i32 %v2_c7d8, i32 4096)
  %v7_cb08 = icmp eq i32 %v4_cb04, -1
  br i1 %v7_cb08, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_cb10

dec_label_pc_cb10:                                ; preds = %dec_label_pc_caa8
  %v0_cb10 = load i32, i32* @r5, align 4
  %v2_cb18 = inttoptr i32 %v0_cb10 to i32*
  %v3_cb18 = call i32 @function_fe44(i32 3, i32* %v2_cb18)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cb24 = call i32 @function_10424(i8* %v2_c7e4, i32 %v3_cb18)
  %v2_cb2c = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cb30 = load i32, i32* @r7, align 4
  %v0_cb34 = load i32, i32* @sl, align 4
  %v2_cb34 = add i32 %v0_cb34, %v2_cb2c
  store i32 %v2_cb34, i32* @r0, align 4
  %v2_cb38 = inttoptr i32 %v2_cb34 to i8*
  %v3_cb38 = call i32 @function_10424(i8* %v2_cb38, i32 %v0_cb30)
  %v2_cb40 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cb44 = load i32, i32* @r5, align 4
  store i32 %v2_cb40, i32* @r4, align 4
  %v2_cb50 = inttoptr i32 %v0_cb44 to i32*
  %v3_cb50 = call i32 @function_fe44(i32 6, i32* %v2_cb50)
  %v0_cb58 = load i32, i32* @sl, align 4
  %v1_cb58 = load i32, i32* @r4, align 4
  %v2_cb58 = add i32 %v1_cb58, %v0_cb58
  store i32 %v2_cb58, i32* @r0, align 4
  %v2_cb5c = inttoptr i32 %v2_cb58 to i8*
  %v3_cb5c = call i32 @function_10424(i8* %v2_cb5c, i32 %v3_cb50)
  %v1_cb64 = call i32 @function_11058(i32 %v2_c7c4)
  store i32 %v1_cb64, i32* @sb, align 4
  %v2_cb68 = icmp eq i32 %v1_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_ca7c.loopexit, label %dec_label_pc_cb70.preheader

dec_label_pc_cb70.preheader:                      ; preds = %dec_label_pc_cb10
  %v1_cb7440 = inttoptr i32 %v1_cb64 to i32*
  %v2_cb7441 = call i32 @function_11154(i32* %v1_cb7440)
  store i32 %v2_cb7441, i32* @r6, align 4
  %v2_cb7843 = icmp eq i32 %v2_cb7441, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cb7843, label %dec_label_pc_cc78, label %dec_label_pc_cb88thread-pre-split

dec_label_pc_cb70.loopexit:                       ; preds = %dec_label_pc_cb90, %dec_label_pc_cc28
  %v0_cb70 = load i32, i32* @sb, align 4
  %v1_cb74 = inttoptr i32 %v0_cb70 to i32*
  %v2_cb74 = call i32 @function_11154(i32* %v1_cb74)
  store i32 %v2_cb74, i32* @r6, align 4
  %v2_cb78 = icmp eq i32 %v2_cb74, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cb78, label %dec_label_pc_cc78, label %dec_label_pc_cb88thread-pre-split

dec_label_pc_cb88thread-pre-split:                ; preds = %dec_label_pc_cb70.preheader, %dec_label_pc_cb70.loopexit
  %v0_cb88.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cb88

dec_label_pc_cb88:                                ; preds = %dec_label_pc_cb88thread-pre-split, %dec_label_pc_cc50
  %v0_cb88 = phi i32 [ %v0_cb88.pr, %dec_label_pc_cb88thread-pre-split ], [ 1, %dec_label_pc_cc50 ]
  %v2_cb88 = icmp eq i32 %v0_cb88, 0
  br i1 %v2_cb88, label %dec_label_pc_cb90, label %dec_label_pc_cc78

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb88
  %v0_cb90 = call i32 @function_1049c()
  %v0_cb94 = load i32, i32* @r5, align 4
  %v2_cb9c = inttoptr i32 %v0_cb94 to i32*
  %v3_cb9c = call i32 @function_fe44(i32 3, i32* %v2_cb9c)
  store i32 %v2_c7c4, i32* @r0, align 4
  %v3_cba8 = call i32 @function_10424(i8* %v2_c7e4, i32 %v3_cb9c)
  %v2_cbb0 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cbb4 = load i32, i32* @r7, align 4
  %v0_cbb8 = load i32, i32* @sl, align 4
  %v2_cbb8 = add i32 %v0_cbb8, %v2_cbb0
  store i32 %v2_cbb8, i32* @r0, align 4
  %v2_cbbc = inttoptr i32 %v2_cbb8 to i8*
  %v3_cbbc = call i32 @function_10424(i8* %v2_cbbc, i32 %v0_cbb4)
  %v2_cbc4 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cbc8 = load i32, i32* @r5, align 4
  store i32 %v2_cbc4, i32* @r4, align 4
  %v2_cbd4 = inttoptr i32 %v0_cbc8 to i32*
  %v3_cbd4 = call i32 @function_fe44(i32 6, i32* %v2_cbd4)
  %v0_cbdc = load i32, i32* @sl, align 4
  %v1_cbdc = load i32, i32* @r4, align 4
  %v2_cbdc = add i32 %v1_cbdc, %v0_cbdc
  store i32 %v2_cbdc, i32* @r0, align 4
  %v2_cbe0 = inttoptr i32 %v2_cbdc to i8*
  %v3_cbe0 = call i32 @function_10424(i8* %v2_cbe0, i32 %v3_cbd4)
  %v2_cbe8 = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cbf0 = load i32, i32* @sl, align 4
  %v2_cbf0 = add i32 %v0_cbf0, %v2_cbe8
  store i32 %v2_cbf0, i32* @r0, align 4
  %v2_cbf4 = inttoptr i32 %v2_cbf0 to i8*
  %v3_cbf4 = call i32 @function_10424(i8* %v2_cbf4, i32 ptrtoint (i32* @global_var_13334.61 to i32))
  %v2_cbfc = call i32 @function_103fc(i8* %v2_c7e4)
  %v0_cc00 = load i32, i32* @r6, align 4
  %v1_cc00 = add i32 %v0_cc00, 11
  %v0_cc04 = load i32, i32* @sl, align 4
  %v2_cc04 = add i32 %v0_cc04, %v2_cbfc
  store i32 %v2_cc04, i32* @r0, align 4
  %v2_cc08 = inttoptr i32 %v2_cc04 to i8*
  %v3_cc08 = call i32 @function_10424(i8* %v2_cc08, i32 %v1_cc00)
  %v4_cc18 = call i32 @function_10e70(i8* %v2_c7e4, i32 %v2_c7d8, i32 4096)
  %v7_cc1c = icmp eq i32 %v4_cc18, -1
  br i1 %v7_cc1c, label %dec_label_pc_cb70.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cb90
  %v2_cc28 = call i32 @function_103fc(i8* %v2_c7fc)
  store i32 %v2_cc28, i32* @r1, align 4
  %v4_cc3c = call i32 @function_10750(i8* %v2_c7fc, i32 %v2_cc28, i32 %v2_ca4c.pre-phi)
  %v7_cc40 = icmp eq i32 %v4_cc3c, -1
  br i1 %v7_cc40, label %dec_label_pc_cb70.loopexit, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc28
  %v0_cc48 = load i32, i32* @r7, align 4
  %v2_cc50 = inttoptr i32 %v0_cc48 to i8*
  %v3_cc50 = call i32 @function_10528(i8* %v2_cc50, i32 10)
  %v2_cc58 = call i32 @function_10d7c(i32 %v3_cc50, i32 9)
  %v0_cc5c = load i32, i32* @sb, align 4
  %v1_cc60 = inttoptr i32 %v0_cc5c to i32*
  %v2_cc60 = call i32 @function_11154(i32* %v1_cc60)
  store i32 %v2_cc60, i32* @r6, align 4
  %v2_cc64 = icmp eq i32 %v2_cc60, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c7d8, i32* @r0, align 4
  br i1 %v2_cc64, label %dec_label_pc_cc78, label %dec_label_pc_cb88

dec_label_pc_cc78:                                ; preds = %dec_label_pc_cb70.loopexit, %dec_label_pc_cc50, %dec_label_pc_cb88, %dec_label_pc_cb70.preheader
  %v0_cc78 = load i32, i32* @sb, align 4
  %v1_cc7c = inttoptr i32 %v0_cc78 to i32*
  %v2_cc7c = call i32 @function_10fa4(i32* %v1_cc7c)
  %v0_cc80 = load i32, i32* @r8, align 4
  %v1_cc84 = inttoptr i32 %v0_cc80 to i32*
  %v2_cc84 = call i32 @function_11154(i32* %v1_cc84)
  %v2_cc88 = icmp eq i32 %v2_cc84, 0
  br i1 %v2_cc88, label %dec_label_pc_cc90, label %dec_label_pc_ca8c

dec_label_pc_cc90:                                ; preds = %dec_label_pc_ca7c.loopexit, %dec_label_pc_cc78, %dec_label_pc_ca8c, %dec_label_pc_ca7c.preheader
  %v0_cc90 = load i32, i32* @r8, align 4
  %v1_cc94 = inttoptr i32 %v0_cc90 to i32*
  %v2_cc94 = call i32 @function_10fa4(i32* %v1_cc94)
  %v0_cc98 = load i32, i32* @r5, align 4
  %v1_cc98 = urem i32 %v0_cc98, 256
  br label %dec_label_pc_cc9c

dec_label_pc_cc9c:                                ; preds = %dec_label_pc_ca5c, %dec_label_pc_cc90
  %storemerge = phi i32 [ %v1_cc98, %dec_label_pc_cc90 ], [ 0, %dec_label_pc_ca5c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_cca0 = call i32 @function_11ec0(i32 1)
  br label %dec_label_pc_cca4

dec_label_pc_cca4:                                ; preds = %dec_label_pc_ca40, %dec_label_pc_cc9c
  %v1_cca8 = call i32 @function_fe70(i32 3)
  %v1_ccb0 = call i32 @function_fe70(i32 4)
  %v1_ccb8 = call i32 @function_fe70(i32 6)
  %v1_ccc0 = call i32 @function_fe70(i32 8)
  br label %dec_label_pc_ccc4

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_c860, %dec_label_pc_cca4
  %v0_ccc4 = load i32, i32* @r4, align 4
  %v2_ccd0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ccd0, i32* @r4, align 4
  store i32 %v6_c7b0, i32* @r5, align 4
  store i32 %v9_c7b0, i32* @r6, align 4
  store i32 %v12_c7b0, i32* @r7, align 4
  store i32 %v15_c7b0, i32* @r8, align 4
  store i32 %v18_c7b0, i32* @sb, align 4
  store i32 %v21_c7b0, i32* @sl, align 4
  store i32 %v24_c7b0, i32* @fp, align 4
  ret i32 %v0_ccc4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_c9b0
  %v1_ccd4 = add i32 %v0_ccd4, 1
  store i32 %v1_ccd4, i32* @lr, align 4
  %v7_ccd8 = icmp eq i32 %v0_ccd4, 0
  br i1 %v7_ccd8, label %dec_label_pc_cce0, label %dec_label_pc_c9b8

dec_label_pc_cce0:                                ; preds = %dec_label_pc_ccd4
  %v1_cce0 = add i32 %v0_c9c0, 3
  %v2_cce0 = inttoptr i32 %v1_cce0 to i8*
  %v3_cce0 = load i8, i8* %v2_cce0, align 1
  %v7_cce4 = icmp eq i8 %v3_cce0, 65
  br i1 %v7_cce4, label %dec_label_pc_ccf4, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_cce0
  br label %dec_label_pc_c988.backedge

dec_label_pc_ccf4:                                ; preds = %dec_label_pc_cce0
  store i32 %v1_ccd4, i32* @r4, align 4
  br label %dec_label_pc_c988.backedge

dec_label_pc_c988.backedge:                       ; preds = %.thread33, %dec_label_pc_ccf4, %dec_label_pc_c9bc
  %v0_c9c885 = phi i32 [ %v1_ccd4, %dec_label_pc_ccf4 ], [ %v0_c9c886, %dec_label_pc_c9bc ], [ %v0_c9c886, %.thread33 ]
  %v0_ccd474 = phi i32 [ %v1_ccd4, %dec_label_pc_ccf4 ], [ %v0_c9bc, %dec_label_pc_c9bc ], [ %v1_ccd4, %.thread33 ]
  %v0_c9b0.pr71 = phi i32 [ 0, %dec_label_pc_ccf4 ], [ %v0_c9b0.pr72, %dec_label_pc_c9bc ], [ 0, %.thread33 ]
  %v0_c988 = add i32 %v0_c9c0, 1
  %v1_c988 = add i32 %v0_c9c0, 3
  %v2_c988 = inttoptr i32 %v1_c988 to i8*
  %v3_c988 = load i8, i8* %v2_c988, align 1
  %v2_c98c = icmp eq i8 %v3_c988, 0
  %v1_c990 = add i32 %v0_c99082, 1
  br i1 %v2_c98c, label %dec_label_pc_c9c8, label %dec_label_pc_c998

dec_label_pc_cd04:                                ; preds = %dec_label_pc_c7b0
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_c860

; uselistorder directives
  uselistorder i32 %v1_c990, { 1, 0 }
  uselistorder i8 %v3_c988, { 1, 0 }
  uselistorder i32 %v0_c9c885, { 1, 0 }
  uselistorder i32 %v1_ccd4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_cc84, { 1, 0 }
  uselistorder i32 %v1_c9f4, { 1, 0 }
  uselistorder i32 %v0_ca0028, { 1, 0 }
  uselistorder i32 %v1_ca18, { 0, 3, 1, 2 }
  uselistorder i32 %v0_c9bc, { 1, 0 }
  uselistorder i32 %v0_c99082, { 1, 0 }
  uselistorder i32 %v0_ccd4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c9c886, { 1, 2, 0 }
  uselistorder i32 %v1_c99056, { 1, 0 }
  uselistorder i32 %v2_c974, { 1, 0 }
  uselistorder i32 %v1_c970, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_c92c13, { 1, 0, 2 }
  uselistorder i32 %v0_c91c, { 1, 0 }
  uselistorder i32 %v1_c8fc, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_c890, { 1, 2, 0 }
  uselistorder i32 %v2_c824, { 1, 0 }
  uselistorder i32 %v2_c7d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10654, { 1, 0 }
  uselistorder label %dec_label_pc_c988.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ccc4, { 1, 0 }
  uselistorder label %dec_label_pc_cca4, { 1, 0 }
  uselistorder label %dec_label_pc_cc9c, { 1, 0 }
  uselistorder label %dec_label_pc_cc90, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cc78, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cb88, { 1, 0 }
  uselistorder label %dec_label_pc_cb88thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cb70.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ca14, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c9bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c998, { 1, 0 }
  uselistorder label %dec_label_pc_c93c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c8a0.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c8f0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_c8b8, { 1, 0 }
  uselistorder label %dec_label_pc_c860, { 1, 0 }
}

define i32 @function_cd30(i32 %arg1) local_unnamed_addr {
dec_label_pc_cd30:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_cd30 = load i32, i32* @r4, align 4
  %v6_cd30 = load i32, i32* @r5, align 4
  %v9_cd30 = load i32, i32* @r6, align 4
  %v12_cd30 = load i32, i32* @r7, align 4
  %v15_cd30 = load i32, i32* @r8, align 4
  %v18_cd30 = load i32, i32* @sb, align 4
  %v21_cd30 = load i32, i32* @sl, align 4
  %v24_cd30 = load i32, i32* @fp, align 4
  %v2_cd3c = call i32 @function_10f4c(i32* null)
  store i32 %v2_cd3c, i32* @r6, align 4
  %v0_cd44 = call i32 @function_10ca8()
  %v7_cd48 = icmp eq i32 %v0_cd44, -1
  %. = zext i1 %v7_cd48 to i32
  %tmp56 = icmp slt i32 %v0_cd44, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1bb94.59 to i32), i32* %r3.global-to-local, align 4
  %v2_cd64 = icmp eq i32 %storemerge37, 0
  store i32 %v0_cd44, i32* @global_var_1bb94.59, align 4
  br i1 %v2_cd64, label %dec_label_pc_cd78, label %dec_label_pc_cd70

dec_label_pc_cd70:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cd30
  %v29_cd74 = phi i32 [ %v0_cd44, %dec_label_pc_cd30 ], [ 0, %dec_label_pc_cdd4 ]
  store i32 %v3_cd30, i32* @r4, align 4
  store i32 %v6_cd30, i32* @r5, align 4
  store i32 %v9_cd30, i32* @r6, align 4
  store i32 %v12_cd30, i32* @r7, align 4
  store i32 %v15_cd30, i32* @r8, align 4
  store i32 %v18_cd30, i32* @sb, align 4
  store i32 %v21_cd30, i32* @sl, align 4
  store i32 %v24_cd30, i32* @fp, align 4
  ret i32 %v29_cd74

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd30
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_cd8c = call i32 @function_c7b0(i32 20736)
  %v2_cd90 = icmp eq i32 %v1_cd8c, 0
  br i1 %v2_cd90, label %dec_label_pc_cd98, label %dec_label_pc_cfec

dec_label_pc_cd98:                                ; preds = %dec_label_pc_cd78, %dec_label_pc_cfec, %dec_label_pc_d014
  %v1_cd9c = call i32 @function_11ec0(i32 5)
  %v1_cda4 = call i32 @function_116e8(i32 4096)
  %v2_cda4 = inttoptr i32 %v1_cda4 to i8*
  store i32 %v1_cda4, i32* @global_var_1bc34.64, align 4
  store i32 ptrtoint (i32* @global_var_1bb98.66 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_cda4, align 1
  %v0_cdbc = load i32, i32* %r2.global-to-local, align 4
  %v1_cdbc = load i32, i32* %r3.global-to-local, align 4
  %v2_cdbc = inttoptr i32 %v1_cdbc to i32*
  store i32 %v0_cdbc, i32* %v2_cdbc, align 4
  %v0_cdc0 = load i32, i32* @r6, align 4
  store i32 %v0_cdc0, i32* @r5, align 4
  %v0_cdc4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_cdc4, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_cdcc = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_cdcc, i32* @fp, align 4
  %v2_cdd0 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_cdd0, i32* @r8, align 4
  %v2_cec4 = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cd98
  %v1_cdd8 = call i32 @function_ff28(i32 3)
  %v3_cde4 = call i32 @function_fe44(i32 3, i32* null)
  %v1_cde8 = call i32 @function_11058(i32 %v3_cde4)
  store i32 %v1_cde8, i32* @sl, align 4
  %v2_cdec = icmp eq i32 %v1_cde8, 0
  br i1 %v2_cdec, label %dec_label_pc_cd70, label %dec_label_pc_cdf4

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_cdd4
  %v1_cdf8 = call i32 @function_fe70(i32 3)
  %v0_cdfc20 = load i32, i32* @sl, align 4
  %v1_ce0021 = inttoptr i32 %v0_cdfc20 to i32*
  %v2_ce0022 = call i32 @function_11154(i32* %v1_ce0021)
  %v2_ce0424 = icmp eq i32 %v2_ce0022, 0
  br i1 %v2_ce0424, label %dec_label_pc_ce88, label %dec_label_pc_ce0c.preheader

dec_label_pc_ce0c.preheader:                      ; preds = %dec_label_pc_cdf4, %dec_label_pc_cdfc.backedge
  %v0_ce0c29 = phi i32 [ %v2_ce00, %dec_label_pc_cdfc.backedge ], [ %v2_ce0022, %dec_label_pc_cdf4 ]
  br label %dec_label_pc_ce0c

dec_label_pc_ce0c:                                ; preds = %dec_label_pc_ce0c.preheader, %dec_label_pc_ce70
  %v0_ce1c = phi i32 [ %v0_ce0c29, %dec_label_pc_ce0c.preheader ], [ %v2_ce7c, %dec_label_pc_ce70 ]
  %v1_ce0c = add i32 %v0_ce1c, 11
  %v2_ce0c = inttoptr i32 %v1_ce0c to i8*
  %v3_ce0c = load i8, i8* %v2_ce0c, align 1
  %v4_ce0c = zext i8 %v3_ce0c to i32
  %v1_ce10 = add nsw i32 %v4_ce0c, -48
  store i32 %v1_ce10, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ce10, 9
  br i1 %tmp, label %dec_label_pc_cdfc.backedge, label %dec_label_pc_ce1c

dec_label_pc_ce1c:                                ; preds = %dec_label_pc_ce0c
  store i32 %v1_ce0c, i32* @r4, align 4
  %v3_ce28 = call i32 @function_10528(i8* %v2_ce0c, i32 10)
  %v0_ce2c = load i32, i32* @r6, align 4
  store i32 %v3_ce28, i32* @r7, align 4
  %v0_ce34 = load i32, i32* @sb, align 4
  %v1_ce34 = add i32 %v0_ce34, 1
  store i32 %v1_ce34, i32* @sb, align 4
  %v5_ce38 = icmp slt i32 %v0_ce2c, %v3_ce28
  %v2_ce98 = call i32 @function_10f4c(i32* null)
  br i1 %v5_ce38, label %dec_label_pc_ce94, label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce1c
  %v0_ce44 = load i32, i32* @r5, align 4
  %v2_ce44 = sub i32 %v2_ce98, %v0_ce44
  %v7_ce4c = icmp slt i32 %v2_ce44, 601
  br i1 %v7_ce4c, label %dec_label_pc_ce54, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ce3c
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_cdfc.backedge

dec_label_pc_ce54:                                ; preds = %dec_label_pc_ce3c
  %v0_ce54 = load i32, i32* @r7, align 4
  %v7_ce58 = icmp slt i32 %v0_ce54, 401
  br i1 %v7_ce58, label %dec_label_pc_cdfc.backedge, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce54
  %v0_ce5c = load i32, i32* @sb, align 4
  %v2_ce64 = call i32 @function_10a04(i32 %v0_ce5c, i32 10)
  %v2_ce68 = icmp eq i32 %v2_ce64, 0
  br i1 %v2_ce68, label %dec_label_pc_ce70, label %dec_label_pc_cdfc.backedge

dec_label_pc_ce70:                                ; preds = %dec_label_pc_ce5c
  %v1_ce74 = call i32 @function_11ec0(i32 1)
  %v0_ce78 = load i32, i32* @sl, align 4
  %v1_ce7c = inttoptr i32 %v0_ce78 to i32*
  %v2_ce7c = call i32 @function_11154(i32* %v1_ce7c)
  %v2_ce80 = icmp eq i32 %v2_ce7c, 0
  br i1 %v2_ce80, label %dec_label_pc_ce88, label %dec_label_pc_ce0c

dec_label_pc_ce88:                                ; preds = %dec_label_pc_cdfc.backedge, %dec_label_pc_ce70, %dec_label_pc_cdf4
  %v0_ce88 = load i32, i32* @sl, align 4
  %v1_ce8c = inttoptr i32 %v0_ce88 to i32*
  %v2_ce8c = call i32 @function_10fa4(i32* %v1_ce8c)
  br label %dec_label_pc_cdd4

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce1c
  store i32 %v2_ce98, i32* %stack_var_-632, align 4
  %v1_cea4 = call i32 @function_ff28(i32 3)
  %v1_ceac = call i32 @function_ff28(i32 7)
  %v3_ceb8 = call i32 @function_fe44(i32 3, i32* null)
  store i32 %v2_cdcc, i32* @r0, align 4
  %v3_cec4 = call i32 @function_10424(i8* %v2_cec4, i32 %v3_ceb8)
  %v0_cec8 = load i32, i32* @fp, align 4
  %v2_cec8 = add i32 %v0_cec8, %v3_cec4
  store i32 %v2_cec8, i32* @r5, align 4
  %v0_cecc = load i32, i32* @r4, align 4
  store i32 %v2_cec8, i32* @r0, align 4
  %v2_ced4 = inttoptr i32 %v2_cec8 to i8*
  %v3_ced4 = call i32 @function_10424(i8* %v2_ced4, i32 %v0_cecc)
  store i32 %v3_ced4, i32* @r4, align 4
  %v3_cee4 = call i32 @function_fe44(i32 7, i32* null)
  %v0_ceec = load i32, i32* @r5, align 4
  %v1_ceec = load i32, i32* @r4, align 4
  %v2_ceec = add i32 %v1_ceec, %v0_ceec
  store i32 %v2_ceec, i32* @r0, align 4
  %v2_cef0 = inttoptr i32 %v2_ceec to i8*
  %v3_cef0 = call i32 @function_10424(i8* %v2_cef0, i32 %v3_cee4)
  %v1_cef8 = call i32 @function_fe70(i32 3)
  %v1_cf00 = call i32 @function_fe70(i32 7)
  %v3_cf0c = call i32 @function_10da8(i8* %v2_cec4, i32 0)
  %v7_cf10 = icmp eq i32 %v3_cf0c, -1
  store i32 %v3_cf0c, i32* @r6, align 4
  br i1 %v7_cf10, label %dec_label_pc_cfb8, label %dec_label_pc_cf1c

dec_label_pc_cf1c:                                ; preds = %dec_label_pc_ce94
  %v1_cf20 = call i32 @function_ff28(i32 9)
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %dec_label_pc_cf8c, %.thread6, %dec_label_pc_cf3c, %dec_label_pc_cf1c
  %v0_cf24 = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_cf30 = call i32 @function_10e44(i32 %v0_cf24, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_cf30, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_cf30, 1
  br i1 %tmp59, label %dec_label_pc_cfd8, label %dec_label_pc_cf3c

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_cf24
  %v3_cf44 = call i32 @function_fe44(i32 9, i32* null)
  store i32 %v3_cf44, i32* @r5, align 4
  %v3_cf54 = call i32 @function_fe44(i32 9, i32* null)
  %v1_cf58 = inttoptr i32 %v3_cf54 to i8*
  %v2_cf58 = call i32 @function_103fc(i8* %v1_cf58)
  %v0_cf5c = load i32, i32* @r4, align 4
  %v5_cf60 = icmp slt i32 %v0_cf5c, %v2_cf58
  br i1 %v5_cf60, label %dec_label_pc_cf24, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_cf3c
  %v1_cf6c12 = add i32 %v0_cf5c, -1
  store i32 %v1_cf6c12, i32* @r4, align 4
  %v2_cf6c13 = icmp eq i32 %v0_cf5c, 0
  br i1 %v2_cf6c13, label %dec_label_pc_cf24, label %dec_label_pc_cf74.lr.ph

dec_label_pc_cf74.lr.ph:                          ; preds = %.thread6
  %v0_cf74.pre = load i32, i32* @r5, align 4
  %v1_cf78.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_cf74

dec_label_pc_cf74:                                ; preds = %dec_label_pc_cf8c, %dec_label_pc_cf74.lr.ph
  %v0_cf6c = phi i32 [ %v1_cf6c12, %dec_label_pc_cf74.lr.ph ], [ %v1_cf6c, %dec_label_pc_cf8c ]
  %v0_cf8c = phi i32 [ 0, %dec_label_pc_cf74.lr.ph ], [ %v1_cf8c, %dec_label_pc_cf8c ]
  %v0_cf80 = phi i32 [ 0, %dec_label_pc_cf74.lr.ph ], [ %v1_cf80., %dec_label_pc_cf8c ]
  %v2_cf74 = add i32 %v0_cf80, %v0_cf74.pre
  %v3_cf74 = inttoptr i32 %v2_cf74 to i8*
  %v4_cf74 = load i8, i8* %v3_cf74, align 1
  %v6_cf74 = zext i8 %v4_cf74 to i32
  store i32 %v6_cf74, i32* %r2.global-to-local, align 4
  %v2_cf78 = add i32 %v0_cf8c, %v1_cf78.pre
  %v3_cf78 = inttoptr i32 %v2_cf78 to i8*
  %v4_cf78 = load i8, i8* %v3_cf78, align 1
  %v6_cf78 = zext i8 %v4_cf78 to i32
  store i32 %v6_cf78, i32* %r3.global-to-local, align 4
  %v9_cf7c = icmp eq i8 %v4_cf78, %v4_cf74
  %v1_cf80 = add i32 %v0_cf80, 1
  %v1_cf80. = select i1 %v9_cf7c, i32 %v1_cf80, i32 0
  br i1 %v9_cf7c, label %dec_label_pc_cf94, label %dec_label_pc_cf8c

dec_label_pc_cf8c:                                ; preds = %dec_label_pc_cf94, %dec_label_pc_cf74
  %v1_cf8c = add i32 %v0_cf8c, 1
  %v1_cf6c = add i32 %v0_cf6c, -1
  store i32 %v1_cf6c, i32* @r4, align 4
  %v2_cf6c = icmp eq i32 %v0_cf6c, 0
  br i1 %v2_cf6c, label %dec_label_pc_cf24, label %dec_label_pc_cf74

dec_label_pc_cf94:                                ; preds = %dec_label_pc_cf74
  %v9_cf94 = icmp eq i32 %v2_cf58, %v1_cf80.
  br i1 %v9_cf94, label %dec_label_pc_cf9c, label %dec_label_pc_cf8c

dec_label_pc_cf9c:                                ; preds = %dec_label_pc_cf94
  %v1_cfa0 = call i32 @function_fe70(i32 9)
  %v0_cfa4 = load i32, i32* @r6, align 4
  %v1_cfa8 = call i32 @function_10c7c(i32 %v0_cfa4)
  %v0_cfac = load i32, i32* @r7, align 4
  %v2_cfb4 = call i32 @function_10d7c(i32 %v0_cfac, i32 9)
  br label %dec_label_pc_cfb8

dec_label_pc_cfb8:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cfd8, %dec_label_pc_cf9c
  store i32 %v2_cdcc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_cfc0 = call i32 @function_1049c()
  %v1_cfc8 = call i32 @function_11ec0(i32 1)
  %v2_cfcc = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_cfcc, i32* @r5, align 4
  %v0_cfd0 = load i32, i32* @r7, align 4
  store i32 %v0_cfd0, i32* @r6, align 4
  br label %dec_label_pc_cdfc.backedge

dec_label_pc_cdfc.backedge:                       ; preds = %dec_label_pc_ce5c, %dec_label_pc_ce54, %dec_label_pc_ce0c, %dec_label_pc_cfb8, %.thread1
  %v0_cdfc = load i32, i32* @sl, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_11154(i32* %v1_ce00)
  %v2_ce04 = icmp eq i32 %v2_ce00, 0
  br i1 %v2_ce04, label %dec_label_pc_ce88, label %dec_label_pc_ce0c.preheader

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cf24
  %v1_cfdc = call i32 @function_fe70(i32 9)
  %v0_cfe0 = load i32, i32* @r6, align 4
  %v1_cfe4 = call i32 @function_10c7c(i32 %v0_cfe0)
  br label %dec_label_pc_cfb8

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cd78
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_cff4 = load i32, i32* @r5, align 4
  %v3_d004 = call i32 @function_11550(i32 %v0_cff4, i32 1, i32 %v0_cfec)
  %v7_d008 = icmp eq i32 %v3_d004, -1
  store i32 %v3_d004, i32* @r4, align 4
  br i1 %v7_d008, label %dec_label_pc_cd98, label %dec_label_pc_d014

dec_label_pc_d014:                                ; preds = %dec_label_pc_cfec
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d01c = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_d01c = call i32 @function_11380(i32 %v3_d004, %sockaddr* %v3_d01c, i32 16)
  %v0_d020 = load i32, i32* @r4, align 4
  %v2_d028 = call i32 @function_11434(i32 %v0_d020, i32 1)
  br label %dec_label_pc_cd98

; uselistorder directives
  uselistorder i32 %v3_d004, { 2, 1, 0 }
  uselistorder i32 %v2_ce00, { 1, 0 }
  uselistorder i32 %v1_cf6c, { 1, 0 }
  uselistorder i32 %v1_cf80., { 1, 0 }
  uselistorder i1 %v9_cf7c, { 1, 0 }
  uselistorder i32 %v0_cf80, { 1, 0 }
  uselistorder i32 %v0_cf8c, { 1, 0 }
  uselistorder i32 %v0_cf6c, { 1, 0 }
  uselistorder i32 %v0_cf5c, { 1, 0, 2 }
  uselistorder i32 %v2_cf58, { 1, 0 }
  uselistorder i32 %v3_cf0c, { 1, 0 }
  uselistorder i32 %v2_ce7c, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_cd44, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_10528, { 1, 2, 0 }
  uselistorder i32 (i32*)* @function_11154, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_11058, { 2, 1, 0 }
  uselistorder i32* @global_var_1bb94.59, { 0, 2, 1 }
  uselistorder label %dec_label_pc_cdfc.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_cfb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce0c, { 1, 0 }
  uselistorder label %dec_label_pc_ce0c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cd98, { 2, 1, 0 }
}

define i32 @function_d03c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d03c:
  store i32 ptrtoint (i32* @global_var_d054.68 to i32), i32* @global_var_1ba20.70, align 4
  ret i32 %arg1
}

define i32 @function_d054(i16 %arg1) local_unnamed_addr {
dec_label_pc_d054:
  %stack_var_-8 = alloca i32, align 4
  %v3_d054 = load i32, i32* @r4, align 4
  store i32 %v3_d054, i32* %stack_var_-8, align 4
  %v1_d05c = call i32 @function_ff28(i32 2)
  store i32 -1340234311, i32* @global_var_1bc3c.74, align 4
  %v3_d074 = call i32 @function_fe44(i32 2, i32* null)
  %v4_d074 = inttoptr i32 %v3_d074 to i8*
  %v2_d078 = add i32 %v3_d074, 1
  %v3_d078 = inttoptr i32 %v2_d078 to i8*
  %v4_d078 = load i8, i8* %v3_d078, align 1
  %v3_d07c = load i8, i8* %v4_d074, align 1
  store i8 %v4_d078, i8* bitcast (i32* @global_var_1bc3b.75 to i8*), align 4
  store i8 %v3_d07c, i8* bitcast (i32* @global_var_1bc3a.76 to i8*), align 4
  %v2_d094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d094, i32* @r4, align 4
  %v1_d098 = call i32 @function_fe70(i32 2)
  %v0_d09c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d09c, label %bb, label %bb4

bb:                                               ; preds = %dec_label_pc_d054
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_d054, %bb
  %v0_d0a0 = load i1, i1* @cpsr_n, align 1
  %v1_d0a0 = load i1, i1* @cpsr_v, align 1
  %v2_d0a0 = xor i1 %v0_d0a0, %v1_d0a0
  br i1 %v2_d0a0, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  ret i32 %v1_d098

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_d0a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d0a4:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_d0a4 = load i32, i32* @r4, align 4
  %v9_d0a4 = load i32, i32* @r6, align 4
  %v15_d0a4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d0c0 = call i32 @function_11550(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1ba18.78 to i32), i32* @r6, align 4
  %v7_d0c8 = icmp eq i32 %v3_d0c0, -1
  store i32 %v3_d0c0, i32* @global_var_1ba18.78, align 4
  br i1 %v7_d0c8, label %dec_label_pc_d188, label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d0a4
  %v0_d0d8 = load i32, i32* @r4, align 4
  %v6_d0e8 = call i32 @function_11520(i32 %v3_d0c0, i32 %v0_d0d8, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_d0ec = load i32, i32* @global_var_1ba18.78, align 4
  store i32 %v2_d0ec, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d0fc = call i32 @function_10bb8(i32 %v2_d0ec, i32 3)
  %v1_d104 = or i32 %v2_d0fc, 2048
  store i32 %v1_d104, i32* @r2, align 4
  %v0_d108 = load i32, i32* @r4, align 4
  %v2_d10c = call i32 @function_10bb8(i32 %v0_d108, i32 4)
  store i32 ptrtoint (i8** @global_var_1ba24.80 to i32), i32* @r8, align 4
  %v2_d114 = load i8, i8* bitcast (i8** @global_var_1ba24.80 to i8*), align 4
  %v2_d118 = icmp eq i8 %v2_d114, 0
  br i1 %v2_d118, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_d0d4
  br label %bb

.thread:                                          ; preds = %dec_label_pc_d0d4
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_d150 = call i32 @function_11224()
  %v0_d154 = load i32, i32* @r5, align 4
  %v2_d154 = inttoptr i32 %v0_d150 to i32*
  store i32 %v0_d154, i32* %v2_d154, align 4
  %v2_d158 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d158, i32* @r7, align 4
  store i32 %v0_d150, i32* @r4, align 4
  %v2_d164 = load i32, i32* @global_var_1ba18.78, align 4
  %v3_d16c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_d16c = call i32 @function_11380(i32 %v2_d164, %sockaddr* %v3_d16c, i32 16)
  %v7_d170 = icmp eq i32 %v4_d16c, -1
  br i1 %v7_d170, label %dec_label_pc_d190, label %dec_label_pc_d178

dec_label_pc_d178:                                ; preds = %bb
  %v2_d180 = load i32, i32* @global_var_1ba18.78, align 4
  %v2_d184 = call i32 @function_11434(i32 %v2_d180, i32 1)
  br label %dec_label_pc_d188

dec_label_pc_d188:                                ; preds = %dec_label_pc_d0a4, %dec_label_pc_d19c, %dec_label_pc_d178
  %v20_d18c = phi i32 [ %v3_d0c0, %dec_label_pc_d0a4 ], [ %v1_d1ec, %dec_label_pc_d19c ], [ %v2_d184, %dec_label_pc_d178 ]
  store i32 %v3_d0a4, i32* @r4, align 4
  store i32 %v9_d0a4, i32* @r6, align 4
  store i32 %v15_d0a4, i32* @r8, align 4
  ret i32 %v20_d18c

dec_label_pc_d190:                                ; preds = %bb
  %v0_d190 = load i32, i32* @r4, align 4
  %v1_d190 = inttoptr i32 %v0_d190 to i32*
  %v2_d190 = load i32, i32* %v1_d190, align 4
  %v7_d194 = icmp eq i32 %v2_d190, 99
  br i1 %v7_d194, label %dec_label_pc_d1f4, label %dec_label_pc_d19c

dec_label_pc_d19c:                                ; preds = %dec_label_pc_d1f4, %bb21, %dec_label_pc_d190
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_d1b4 = load i32, i32* @global_var_1ba18.78, align 4
  %v4_d1cc = call i32 @function_113ac(i32 %v2_d1b4, %sockaddr* %v3_d16c, i32 16)
  %v1_d1d4 = call i32 @function_11ec0(i32 5)
  %v2_d1d8 = load i32, i32* @global_var_1ba18.78, align 4
  %v1_d1dc = call i32 @function_10c7c(i32 %v2_d1d8)
  %v1_d1e8 = call i32 @function_c7b0(i32 58811)
  %v1_d1ec = call i32 @function_d0a4(i32 %v1_d1e8)
  br label %dec_label_pc_d188

dec_label_pc_d1f4:                                ; preds = %dec_label_pc_d190
  %v2_d1f4 = load i8, i8* bitcast (i8** @global_var_1ba24.80 to i8*), align 4
  %v3_d1f4 = zext i8 %v2_d1f4 to i32
  %v1_d1f8 = load i32, i32* @r5, align 4
  %v9_d1f8 = icmp eq i32 %v3_d1f4, %v1_d1f8
  br i1 %v9_d1f8, label %dec_label_pc_d19c, label %bb21

bb21:                                             ; preds = %dec_label_pc_d1f4
  %v2_d200 = trunc i32 %v1_d1f8 to i8
  store i8 %v2_d200, i8* bitcast (i8** @global_var_1ba24.80 to i8*), align 4
  br label %dec_label_pc_d19c

; uselistorder directives
  uselistorder i32 %v3_d0c0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_c7b0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_11434, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1ba24.80 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1ba24.80, { 1, 0 }
  uselistorder label %dec_label_pc_d19c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d188, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_d214(i32 %arg1) local_unnamed_addr {
dec_label_pc_d214:
  %stack_var_-16 = alloca i32, align 4
  %v3_d214 = load i32, i32* @r4, align 4
  %v6_d214 = load i32, i32* @r5, align 4
  %v2_d218 = ptrtoint i32* %stack_var_-16 to i32
  %v0_d21c = call i32 @function_10ca8()
  %v7_d220 = icmp eq i32 %v0_d21c, -1
  %. = zext i1 %v7_d220 to i32
  %tmp10 = icmp slt i32 %v0_d21c, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d23c = icmp eq i32 %storemerge4, 0
  store i32 %v0_d21c, i32* @global_var_1bb9c.83, align 4
  br i1 %v2_d23c, label %dec_label_pc_d250, label %dec_label_pc_d248

dec_label_pc_d248:                                ; preds = %dec_label_pc_d214
  store i32 %v3_d214, i32* @r4, align 4
  store i32 %v6_d214, i32* @r5, align 4
  ret i32 %v0_d21c

dec_label_pc_d250:                                ; preds = %dec_label_pc_d214
  store i32 1, i32* %stack_var_-16, align 4
  %v1_d25c = call i32 @function_ff28(i32 13)
  %v1_d264 = call i32 @function_ff28(i32 14)
  %v0_d268 = load i32, i32* @r5, align 4
  %v2_d270 = inttoptr i32 %v0_d268 to i32*
  %v3_d270 = call i32 @function_fe44(i32 13, i32* %v2_d270)
  %v2_d278 = inttoptr i32 %v3_d270 to i8*
  %v3_d278 = call i32 @function_10da8(i8* %v2_d278, i32 2)
  %v7_d27c = icmp eq i32 %v3_d278, -1
  store i32 %v3_d278, i32* @r4, align 4
  br i1 %v7_d27c, label %dec_label_pc_d2c4, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d2c4, %dec_label_pc_d250
  %v0_d294 = phi i32 [ %v3_d2d4, %dec_label_pc_d2c4 ], [ %v3_d278, %dec_label_pc_d250 ]
  %v3_d29c = call i32 @function_10d2c(i32 %v0_d294, i32 -2147199228, i32 %v2_d218)
  br label %dec_label_pc_d2a0

dec_label_pc_d2a0:                                ; preds = %dec_label_pc_d2a0, %dec_label_pc_d288
  %v0_d2ac = load i32, i32* @r4, align 4
  %v3_d2b4 = call i32 @function_10d2c(i32 %v0_d2ac, i32 -2147199227, i32 0)
  %v1_d2bc = call i32 @function_11ec0(i32 10)
  br label %dec_label_pc_d2a0

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d250
  %v0_d2c4 = load i32, i32* @r5, align 4
  %v2_d2cc = inttoptr i32 %v0_d2c4 to i32*
  %v3_d2cc = call i32 @function_fe44(i32 14, i32* %v2_d2cc)
  %v2_d2d4 = inttoptr i32 %v3_d2cc to i8*
  %v3_d2d4 = call i32 @function_10da8(i8* %v2_d2d4, i32 2)
  %v3_d2d8 = icmp eq i32 %v3_d2d4, -1
  store i32 %v3_d2d4, i32* @r4, align 4
  br i1 %v3_d2d8, label %dec_label_pc_d2e4, label %dec_label_pc_d288

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2c4
  %v1_d2e8 = call i32 @function_fe70(i32 13)
  %v1_d2f0 = call i32 @function_fe70(i32 14)
  %v0_d2f4 = load i32, i32* @r5, align 4
  %v1_d2f8 = call i32 @function_11e2c(i32 %v0_d2f4)
  %v0_d2fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d2fc, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_d2e4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_d2e4, %bb13
  ret i32 %v1_d2f8

; uselistorder directives
  uselistorder i32 %v3_d2d4, { 1, 2, 0 }
  uselistorder i32 %v3_d278, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d21c, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10d2c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_d300(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d300:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d300 = load i32, i32* @r4, align 4
  store i32 %v3_d300, i32* %stack_var_-36, align 4
  %v6_d300 = load i32, i32* @r5, align 4
  %v9_d300 = load i32, i32* @r6, align 4
  %v15_d300 = load i32, i32* @r8, align 4
  %v2_d30c = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_d30c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_d30c, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_d324 = call i32 @function_115ac(i32 %v2_d30c)
  store i32 %v2_d30c, i32* @r0, align 4
  %v2_d330 = call i32 @function_1157c(i32 %v2_d30c, i32 2)
  %v0_d334 = load i32, i32* @r5, align 4
  store i32 %v0_d334, i32* %r2.global-to-local, align 4
  %v3_d340 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_d340 = call i32 @function_10ef8(i32 %v0_d334, %_TYPEDEF_sigset_t* %v3_d340, i32 %v0_d334)
  %v2_d34c = call i32 @function_115c4(i32 17, i32 1)
  %v2_d358 = call i32 @function_115c4(i32 5, i32 ptrtoint (i32* @global_var_d03c.85 to i32))
  %v0_d35c = call i32 @function_106b4()
  store i32 %v0_d35c, i32* @global_var_1bc30.48, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1bc3b.75 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1bc38.72 to i8*), align 4
  store i32 1494907824, i32* @global_var_1bc3c.74, align 4
  %v0_d384 = load i32, i32* @r5, align 4
  %v1_d384 = trunc i32 %v0_d384 to i8
  store i8 %v1_d384, i8* bitcast (i32* @global_var_1bc3a.76 to i8*), align 4
  store i8 %v1_d384, i8* bitcast (i32* @global_var_1bc39.89 to i8*), align 4
  %v6_d38c = call i32 @function_ffe0(i32 %v0_d35c, i32 ptrtoint (i8** @global_var_1bc38.72 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_d054.68 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_d054.68 to i32), i32* @global_var_1ba20.70, align 4
  %v2_d3a0 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_d3a0, i32* @sb, align 4
  %v1_d3a4 = call i32 @function_d0a4(i32 %v6_d38c)
  %v1_d3a8 = call i32 @function_db10(i32 %v1_d3a4)
  store i32 %v2_d3a0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d3b4 = call i32 @function_1049c()
  %v0_d3b8 = load i32, i32* @r6, align 4
  %v7_d3b8 = icmp eq i32 %v0_d3b8, 2
  br i1 %v7_d3b8, label %dec_label_pc_d4e4, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d4e4, %dec_label_pc_d300, %dec_label_pc_d4f4
  %v0_d3c0 = call i32 @function_dab8()
  store i32 %v0_d3c0, i32* %r6.global-to-local, align 4
  %v0_d3c8 = load i32, i32* @r8, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i32*
  %v2_d3c8 = load i32, i32* %v1_d3c8, align 4
  %v1_d3cc = inttoptr i32 %v2_d3c8 to i8*
  %v2_d3cc = call i32 @function_103fc(i8* %v1_d3cc)
  %v0_d3d4 = load i32, i32* @r8, align 4
  %v1_d3d4 = inttoptr i32 %v0_d3d4 to i32*
  %v2_d3d4 = load i32, i32* %v1_d3d4, align 4
  %v1_d3d8 = inttoptr i32 %v2_d3d4 to i8*
  %v2_d3d8 = call i32 @function_103fc(i8* %v1_d3d8)
  %v1_d3dc = sub i32 20, %v2_d3cc
  store i32 %v2_d3d8, i32* @r5, align 4
  %v0_d3e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_d3e8 = call i32 @function_10a04(i32 %v0_d3e4, i32 %v1_d3dc)
  %v1_d3f0 = load i32, i32* @r5, align 4
  %v2_d3f0 = add i32 %v1_d3f0, %v2_d3e8
  store i32 %v2_d3f0, i32* @r4, align 4
  %v2_d3f4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_d3f4, i32* @r6, align 4
  %v2_d400 = call i32 @function_db6c(i32 %v2_d3f4, i32 %v2_d3f0)
  %v2_d404 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d404, i32* %r2.global-to-local, align 4
  %v1_d408 = load i32, i32* @r4, align 4
  %v2_d408 = add i32 %v1_d408, %v2_d404
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_d414 = load i32, i32* @r8, align 4
  %v1_d414 = inttoptr i32 %v0_d414 to i32*
  %v2_d414 = load i32, i32* %v1_d414, align 4
  store i32 %v2_d414, i32* @r0, align 4
  %v3_d418 = add i32 %v2_d408, -72
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 0, i8* %v4_d418, align 1
  %v2_d41c = inttoptr i32 %v2_d414 to i8*
  %v3_d41c = call i32 @function_10424(i8* %v2_d41c, i32 %v2_d3f4)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d3f4, i32* @r0, align 4
  %v0_d428 = call i32 @function_1049c()
  %v0_d42c = call i32 @function_dab8()
  store i32 %v0_d42c, i32* @r7, align 4
  %v0_d434 = load i32, i32* @r8, align 4
  %v1_d434 = inttoptr i32 %v0_d434 to i32*
  %v2_d434 = load i32, i32* %v1_d434, align 4
  %v1_d438 = inttoptr i32 %v2_d434 to i8*
  %v2_d438 = call i32 @function_103fc(i8* %v1_d438)
  %v0_d440 = load i32, i32* @r8, align 4
  %v1_d440 = inttoptr i32 %v0_d440 to i32*
  %v2_d440 = load i32, i32* %v1_d440, align 4
  %v1_d444 = inttoptr i32 %v2_d440 to i8*
  %v2_d444 = call i32 @function_103fc(i8* %v1_d444)
  %v1_d448 = sub i32 20, %v2_d438
  store i32 %v2_d444, i32* @r5, align 4
  %v0_d450 = load i32, i32* @r7, align 4
  %v2_d454 = call i32 @function_10a04(i32 %v0_d450, i32 %v1_d448)
  %v1_d458 = load i32, i32* @r5, align 4
  %v2_d458 = add i32 %v1_d458, %v2_d454
  store i32 %v2_d458, i32* @r4, align 4
  %v2_d464 = call i32 @function_db6c(i32 %v2_d3f4, i32 %v2_d458)
  %v1_d46c = load i32, i32* @r4, align 4
  %v2_d46c = add i32 %v1_d46c, %v2_d404
  store i32 %v2_d46c, i32* @r3, align 4
  %v0_d470 = load i32, i32* @sl, align 4
  %v1_d470 = trunc i32 %v0_d470 to i8
  %v3_d470 = add i32 %v2_d46c, -72
  %v4_d470 = inttoptr i32 %v3_d470 to i8*
  store i8 %v1_d470, i8* %v4_d470, align 1
  %v2_d47c = call i32 @function_10e14(i32 15, i32 %v2_d3f4)
  %v1_d484 = call i32 @function_ff28(i32 1)
  %v3_d494 = call i32 @function_fe44(i32 1, i32* nonnull %stack_var_-44)
  %v3_d498 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d498, i32* %r2.global-to-local, align 4
  %v3_d4a4 = inttoptr i32 %v3_d494 to i32*
  %v4_d4a4 = call i32 @function_10f78(i32 1, i32* %v3_d4a4, i32 %v3_d498)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d4b4 = call i32 @function_10f78(i32 1, i32* nonnull @global_var_13338.93, i32 1)
  %v1_d4bc = call i32 @function_fe70(i32 1)
  %v1_d4c0 = call i32 @function_85e8(i32 %v1_d4bc)
  %v1_d4c4 = call i32 @function_cd30(i32 %v1_d4c0)
  %v1_d4c8 = call i32 @function_d214(i32 %v1_d4c4)
  %v0_d4cc = call i32 @function_10ca8()
  %v1_d4d0 = load i32, i32* @sl, align 4
  %v7_d4d4 = icmp sgt i32 %v0_d4cc, %v1_d4d0
  br i1 %v7_d4d4, label %dec_label_pc_d4d8, label %dec_label_pc_d51c

dec_label_pc_d4d8:                                ; preds = %dec_label_pc_d3c0
  store i32 %v6_d300, i32* %r5.global-to-local, align 4
  store i32 %v9_d300, i32* %r6.global-to-local, align 4
  store i32 %v15_d300, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d300
  %v0_d4e4 = load i32, i32* @r8, align 4
  %v1_d4e4 = add i32 %v0_d4e4, 4
  %v2_d4e4 = inttoptr i32 %v1_d4e4 to i32*
  %v3_d4e4 = load i32, i32* %v2_d4e4, align 4
  %v1_d4e8 = inttoptr i32 %v3_d4e4 to i8*
  %v2_d4e8 = call i32 @function_103fc(i8* %v1_d4e8)
  %v8_d4f0 = icmp sgt i32 %v2_d4e8, 31
  br i1 %v8_d4f0, label %dec_label_pc_d3c0, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d4e4
  %v0_d4f4 = load i32, i32* @r8, align 4
  %v1_d4f4 = add i32 %v0_d4f4, 4
  %v2_d4f4 = inttoptr i32 %v1_d4f4 to i32*
  %v3_d4f4 = load i32, i32* %v2_d4f4, align 4
  store i32 %v2_d3a0, i32* @r0, align 4
  %v2_d4fc = bitcast i32* %stack_var_-140 to i8*
  %v3_d4fc = call i32 @function_10424(i8* %v2_d4fc, i32 %v3_d4f4)
  %v0_d500 = load i32, i32* @r8, align 4
  %v1_d500 = add i32 %v0_d500, 4
  %v2_d500 = inttoptr i32 %v1_d500 to i32*
  %v3_d500 = load i32, i32* %v2_d500, align 4
  %v1_d508 = inttoptr i32 %v3_d500 to i8*
  %v2_d508 = call i32 @function_103fc(i8* %v1_d508)
  store i32 %v2_d508, i32* @r1, align 4
  store i32 %v3_d500, i32* @r0, align 4
  %v0_d514 = call i32 @function_1049c()
  br label %dec_label_pc_d3c0

dec_label_pc_d51c:                                ; preds = %dec_label_pc_d3c0
  %v1_d51c = call i32 @function_10ecc(i32 %v0_d4cc)
  %v0_d524 = load i32, i32* @sl, align 4
  %v1_d528 = call i32 @function_10c7c(i32 %v0_d524)
  %v1_d530 = call i32 @function_10c7c(i32 1)
  %v1_d538 = call i32 @function_10c7c(i32 2)
  %v1_d53c = call i32 @function_85e8(i32 %v1_d538)
  %v1_d540 = call i32 @function_cd30(i32 %v1_d53c)
  %v1_d544 = call i32 @function_d214(i32 %v1_d540)
  %v1_d548 = call i32 @function_e42c(i32 %v1_d544)
  store i32 ptrtoint (i32* @global_var_1ba1c.95 to i32), i32* @fp, align 4
  %v2_d558 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_d558, i32* @r6, align 4
  %v2_d55c = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_d55c, i32* @r7, align 4
  %v2_d634 = ptrtoint i32* %stack_var_-60 to i32
  %v2_d874 = ptrtoint i32* %stack_var_-52 to i32
  %v4_d888 = bitcast i8** %stack_var_-38 to i32*
  %v2_d9e4 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_d898 = ptrtoint i32* %stack_var_-48 to i32
  %v1_d93c = bitcast i32* %stack_var_-140 to i8*
  %v5_d904 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_d918 = sub i32 0, %v1_d51c
  br label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d560.backedge, %dec_label_pc_d51c
  %v2_d56845 = phi i32 [ %v2_d56845.pre, %dec_label_pc_d560.backedge ], [ %v2_d558, %dec_label_pc_d51c ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_d56847 = inttoptr i32 %v2_d56845 to i32*
  store i32 0, i32* %v4_d56847, align 4
  %v0_d56c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_d56c49 = add i32 %v0_d56c48, 4
  store i32 %v1_d56c49, i32* %r3.global-to-local, align 4
  %v7_d57050 = icmp eq i32 %v1_d56c49, 128
  br i1 %v7_d57050, label %dec_label_pc_d578, label %dec_label_pc_d568.dec_label_pc_d568_crit_edge

dec_label_pc_d568.dec_label_pc_d568_crit_edge:    ; preds = %dec_label_pc_d560, %dec_label_pc_d568.dec_label_pc_d568_crit_edge
  %v1_d56c51 = phi i32 [ %v1_d56c, %dec_label_pc_d568.dec_label_pc_d568_crit_edge ], [ %v1_d56c49, %dec_label_pc_d560 ]
  %v0_d568.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_d568 = load i32, i32* @r6, align 4
  %v3_d568 = add i32 %v2_d568, %v1_d56c51
  %v4_d568 = inttoptr i32 %v3_d568 to i32*
  store i32 %v0_d568.pre, i32* %v4_d568, align 4
  %v0_d56c = load i32, i32* %r3.global-to-local, align 4
  %v1_d56c = add i32 %v0_d56c, 4
  store i32 %v1_d56c, i32* %r3.global-to-local, align 4
  %v7_d570 = icmp eq i32 %v1_d56c, 128
  br i1 %v7_d570, label %dec_label_pc_d578, label %dec_label_pc_d568.dec_label_pc_d568_crit_edge

dec_label_pc_d578:                                ; preds = %dec_label_pc_d568.dec_label_pc_d568_crit_edge, %dec_label_pc_d560
  %v0_d578 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_d578, i32* %r3.global-to-local, align 4
  store i32 %v0_d578, i32* @r4, align 4
  %v2_d58052 = load i32, i32* @r7, align 4
  %v3_d58053 = add i32 %v2_d58052, %v0_d578
  %v4_d58054 = inttoptr i32 %v3_d58053 to i32*
  store i32 %v0_d578, i32* %v4_d58054, align 4
  %v0_d58455 = load i32, i32* %r3.global-to-local, align 4
  %v1_d58456 = add i32 %v0_d58455, 4
  store i32 %v1_d58456, i32* %r3.global-to-local, align 4
  %v7_d58857 = icmp eq i32 %v1_d58456, 128
  br i1 %v7_d58857, label %dec_label_pc_d590, label %dec_label_pc_d580.dec_label_pc_d580_crit_edge

dec_label_pc_d580.dec_label_pc_d580_crit_edge:    ; preds = %dec_label_pc_d578, %dec_label_pc_d580.dec_label_pc_d580_crit_edge
  %v1_d58458 = phi i32 [ %v1_d584, %dec_label_pc_d580.dec_label_pc_d580_crit_edge ], [ %v1_d58456, %dec_label_pc_d578 ]
  %v0_d580.pre = load i32, i32* @r4, align 4
  %v2_d580 = load i32, i32* @r7, align 4
  %v3_d580 = add i32 %v2_d580, %v1_d58458
  %v4_d580 = inttoptr i32 %v3_d580 to i32*
  store i32 %v0_d580.pre, i32* %v4_d580, align 4
  %v0_d584 = load i32, i32* %r3.global-to-local, align 4
  %v1_d584 = add i32 %v0_d584, 4
  store i32 %v1_d584, i32* %r3.global-to-local, align 4
  %v7_d588 = icmp eq i32 %v1_d584, 128
  br i1 %v7_d588, label %dec_label_pc_d590, label %dec_label_pc_d580.dec_label_pc_d580_crit_edge

dec_label_pc_d590:                                ; preds = %dec_label_pc_d580.dec_label_pc_d580_crit_edge, %dec_label_pc_d578
  store i32 ptrtoint (i32* @global_var_1ba18.78 to i32), i32* %r2.global-to-local, align 4
  %v2_d594 = load i32, i32* @global_var_1ba18.78, align 4
  %v7_d598 = icmp eq i32 %v2_d594, -1
  br i1 %v7_d598, label %dec_label_pc_d5c4, label %dec_label_pc_d5a0

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d590
  %v3_d5a0 = udiv i32 %v2_d594, 32
  %v3_d5a4 = mul nuw nsw i32 %v3_d5a0, 4
  %v2_d5ac = add i32 %v3_d5a4, %v2_d404
  store i32 %v2_d5ac, i32* %r3.global-to-local, align 4
  %v1_d5b0 = add i32 %v2_d5ac, -360
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i32*
  %v3_d5b0 = load i32, i32* %v2_d5b0, align 4
  %v1_d5b4 = urem i32 %v2_d594, 32
  %v7_d5bc = shl i32 1, %v1_d5b4
  %v8_d5bc = or i32 %v3_d5b0, %v7_d5bc
  store i32 %v8_d5bc, i32* %r2.global-to-local, align 4
  store i32 %v8_d5bc, i32* %v2_d5b0, align 4
  br label %dec_label_pc_d5c4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d590, %dec_label_pc_d5a0
  %v2_d5c4 = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 %v2_d5c4, i32* %r3.global-to-local, align 4
  %v7_d5c8 = icmp eq i32 %v2_d5c4, -1
  store i32 ptrtoint (i32* @global_var_1ba1c.95 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_d5c8, label %dec_label_pc_d800, label %dec_label_pc_d5d4

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d5c4, %.thread
  store i32 ptrtoint (i8** @global_var_1bba0.98 to i32), i32* %r2.global-to-local, align 4
  %v2_d5d8 = load i8, i8* bitcast (i8** @global_var_1bba0.98 to i8*), align 4
  %v2_d5dc = icmp eq i8 %v2_d5d8, 0
  %v2_d71c = load i32, i32* @global_var_1ba1c.95, align 4
  %v3_d720 = udiv i32 %v2_d71c, 32
  store i32 %v3_d720, i32* %r3.global-to-local, align 4
  br i1 %v2_d5dc, label %dec_label_pc_d71c, label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5d4
  %v3_d5ec = mul nuw nsw i32 %v3_d720, 4
  %v2_d5f4 = add i32 %v3_d5ec, %v2_d404
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  %v1_d5f8 = add i32 %v2_d5f4, -488
  %v2_d5f8 = inttoptr i32 %v1_d5f8 to i32*
  %v3_d5f8 = load i32, i32* %v2_d5f8, align 4
  %v1_d5fc = urem i32 %v2_d71c, 32
  %v7_d604 = shl i32 1, %v1_d5fc
  %v8_d604 = or i32 %v3_d5f8, %v7_d604
  store i32 %v8_d604, i32* %r2.global-to-local, align 4
  store i32 %v8_d604, i32* %v2_d5f8, align 4
  br label %dec_label_pc_d60c

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d71c, %dec_label_pc_d5e4
  %v2_d610 = load i32, i32* @global_var_1ba18.78, align 4
  %v2_d614 = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 %v2_d614, i32* %r3.global-to-local, align 4
  %v5_d620 = icmp slt i32 %v2_d610, %v2_d614
  br i1 %v5_d620, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_d60c
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_d60c, %bb
  %v0_d638 = phi i32 [ %v2_d610, %dec_label_pc_d60c ], [ %v2_d614, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d638 = add i32 %v0_d638, 1
  store i32 %v2_d55c, i32* %r2.global-to-local, align 4
  %v5_d64c = call i32 @function_10e9c(i32 %v1_d638, i32 %v2_d558, i32 %v2_d55c, i32 0, i32 %v2_d634)
  %v8_d650 = icmp eq i32 %v5_d64c, -1
  store i32 %v5_d64c, i32* %r3.global-to-local, align 4
  br i1 %v8_d650, label %dec_label_pc_d560.backedge, label %dec_label_pc_d65c

dec_label_pc_d65c:                                ; preds = %bb42
  %v6_d64c = trunc i32 %v5_d64c to i8
  %v3_d65c = icmp eq i8 %v6_d64c, 0
  br i1 %v3_d65c, label %dec_label_pc_d664, label %dec_label_pc_d684

dec_label_pc_d664:                                ; preds = %dec_label_pc_d65c
  %v0_d664 = load i32, i32* @sl, align 4
  %v6_d670 = inttoptr i32 %v5_d64c to i8*
  store i8* %v6_d670, i8** %stack_var_-38, align 4
  %v2_d674 = call i32 @function_10ad0(i32 %v0_d664, i32 6)
  %v2_d678 = icmp eq i32 %v2_d674, 0
  %v0_d67c = load i32, i32* @sl, align 4
  %v1_d67c = add i32 %v0_d67c, 1
  store i32 %v1_d67c, i32* @sl, align 4
  br i1 %v2_d678, label %dec_label_pc_d870, label %dec_label_pc_d684

dec_label_pc_d684:                                ; preds = %dec_label_pc_d65c, %dec_label_pc_d664, %dec_label_pc_d870
  store i32 ptrtoint (i32* @global_var_1ba18.78 to i32), i32* %r2.global-to-local, align 4
  %v2_d688 = load i32, i32* @global_var_1ba18.78, align 4
  %v7_d68c = icmp eq i32 %v2_d688, -1
  br i1 %v7_d68c, label %dec_label_pc_d6b8, label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %dec_label_pc_d684
  %v3_d694 = udiv i32 %v2_d688, 32
  %v3_d698 = mul nuw nsw i32 %v3_d694, 4
  store i32 %v2_d404, i32* @ip, align 4
  %v2_d6a0 = add i32 %v3_d698, %v2_d404
  store i32 %v2_d6a0, i32* %r3.global-to-local, align 4
  %v1_d6a4 = add i32 %v2_d6a0, -360
  %v2_d6a4 = inttoptr i32 %v1_d6a4 to i32*
  %v3_d6a4 = load i32, i32* %v2_d6a4, align 4
  %v1_d6a8 = urem i32 %v2_d688, 32
  %v6_d6ac = lshr i32 %v3_d6a4, %v1_d6a8
  store i32 %v6_d6ac, i32* %r2.global-to-local, align 4
  %v1_d6b0 = urem i32 %v6_d6ac, 2
  %v2_d6b0 = icmp eq i32 %v1_d6b0, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d8ec

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d684
  store i32 ptrtoint (i8** @global_var_1bba0.98 to i32), i32* %r3.global-to-local, align 4
  %v2_d6bc = load i8, i8* bitcast (i8** @global_var_1bba0.98 to i8*), align 4
  %v3_d6bc = zext i8 %v2_d6bc to i32
  store i32 %v3_d6bc, i32* @r4, align 4
  %v2_d6c0 = icmp eq i8 %v2_d6bc, 0
  %v2_d748 = load i32, i32* @global_var_1ba1c.95, align 4
  br i1 %v2_d6c0, label %dec_label_pc_d748, label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6b8
  %v3_d6cc = udiv i32 %v2_d748, 32
  %v3_d6d4 = mul nuw nsw i32 %v3_d6cc, 4
  %v2_d6d8 = add i32 %v3_d6d4, %v2_d404
  store i32 %v2_d6d8, i32* %r3.global-to-local, align 4
  %v1_d6dc = add i32 %v2_d6d8, -488
  %v2_d6dc = inttoptr i32 %v1_d6dc to i32*
  %v3_d6dc = load i32, i32* %v2_d6dc, align 4
  %v1_d6e0 = urem i32 %v2_d748, 32
  %v6_d6e4 = lshr i32 %v3_d6dc, %v1_d6e0
  store i32 %v6_d6e4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1bba0.98 to i32), i32* %r3.global-to-local, align 4
  %v1_d6f0 = urem i32 %v6_d6e4, 2
  %v2_d6f0 = icmp eq i32 %v1_d6f0, 0
  store i8 0, i8* bitcast (i8** @global_var_1bba0.98 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1ba1c.95 to i32), i32* @r5, align 4
  br i1 %v2_d6f0, label %dec_label_pc_d700, label %dec_label_pc_d890

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6c8
  store i32 55048, i32* @lr, align 4
  %v1_d704 = icmp ne i32 %v2_d748, -1
  call void @__pseudo_cond_branch(i1 %v1_d704, i32 ptrtoint (i32* @global_var_10c7c.99 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d70c = load i32, i32* @r5, align 4
  %v2_d70c = inttoptr i32 %v1_d70c to i32*
  store i32 -1, i32* %v2_d70c, align 4
  %v1_d714 = call i32 @function_11ec0(i32 1)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d560.backedge:                       ; preds = %dec_label_pc_d700, %dec_label_pc_d7ec, %dec_label_pc_d8c4, %dec_label_pc_d988, %dec_label_pc_d9ac, %dec_label_pc_da60, %dec_label_pc_da6c, %bb42, %dec_label_pc_d748, %dec_label_pc_d758, %dec_label_pc_d938, %bb44, %dec_label_pc_da0c, %dec_label_pc_d99c
  %v2_d56845.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d560

dec_label_pc_d71c:                                ; preds = %dec_label_pc_d5d4
  store i32 %v2_d404, i32* %r2.global-to-local, align 4
  %v3_d728 = mul nuw nsw i32 %v3_d720, 4
  %v2_d72c = add i32 %v3_d728, %v2_d404
  store i32 %v2_d72c, i32* %r3.global-to-local, align 4
  %v1_d730 = add i32 %v2_d72c, -360
  %v2_d730 = inttoptr i32 %v1_d730 to i32*
  %v3_d730 = load i32, i32* %v2_d730, align 4
  %v1_d734 = urem i32 %v2_d71c, 32
  %v7_d73c = shl i32 1, %v1_d734
  %v8_d73c = or i32 %v3_d730, %v7_d73c
  store i32 %v8_d73c, i32* %r2.global-to-local, align 4
  store i32 %v8_d73c, i32* %v2_d730, align 4
  br label %dec_label_pc_d60c

dec_label_pc_d748:                                ; preds = %dec_label_pc_d6b8
  %v7_d74c = icmp eq i32 %v2_d748, -1
  store i32 ptrtoint (i32* @global_var_1ba1c.95 to i32), i32* @r5, align 4
  br i1 %v7_d74c, label %dec_label_pc_d560.backedge, label %dec_label_pc_d758

dec_label_pc_d758:                                ; preds = %dec_label_pc_d748
  %v3_d758 = udiv i32 %v2_d748, 32
  %v3_d75c = mul nuw nsw i32 %v3_d758, 4
  %v2_d764 = add i32 %v3_d75c, %v2_d404
  store i32 %v2_d764, i32* %r3.global-to-local, align 4
  %v1_d768 = add i32 %v2_d764, -360
  %v2_d768 = inttoptr i32 %v1_d768 to i32*
  %v3_d768 = load i32, i32* %v2_d768, align 4
  %v1_d76c = urem i32 %v2_d748, 32
  %v6_d770 = lshr i32 %v3_d768, %v1_d76c
  store i32 %v6_d770, i32* %r2.global-to-local, align 4
  %v1_d774 = urem i32 %v6_d770, 2
  %v2_d774 = icmp eq i32 %v1_d774, 0
  br i1 %v2_d774, label %dec_label_pc_d560.backedge, label %dec_label_pc_d77c

dec_label_pc_d77c:                                ; preds = %dec_label_pc_d758
  %v6_d77c = inttoptr i32 %v3_d6bc to i8*
  store i8* %v6_d77c, i8** %stack_var_-38, align 4
  %v0_d784 = call i32 @function_11224()
  %v0_d788 = load i32, i32* @r4, align 4
  %v2_d788 = inttoptr i32 %v0_d784 to i32*
  store i32 %v0_d788, i32* %v2_d788, align 4
  store i32 %v0_d784, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d79c = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_d7a8 = call i32 @function_11460(i32 %v2_d79c, i32* %v4_d888, i32 2, i32 16386)
  %v7_d7ac = icmp eq i32 %v5_d7a8, -1
  br i1 %v7_d7ac, label %dec_label_pc_d99c, label %dec_label_pc_d7b4

dec_label_pc_d7b4:                                ; preds = %dec_label_pc_d77c
  %v2_d7b4 = icmp eq i32 %v5_d7a8, 0
  br i1 %v2_d7b4, label %dec_label_pc_d9ac, label %dec_label_pc_d7bc

dec_label_pc_d7bc:                                ; preds = %dec_label_pc_d7b4
  %v3_d7bc = load i8*, i8** %stack_var_-38, align 4
  %v4_d7bc = ptrtoint i8* %v3_d7bc to i32
  store i32 %v3_d6bc, i32* %r3.global-to-local, align 4
  %v4_d7c4 = mul nuw nsw i32 %v3_d6bc, 256
  %v5_d7c4 = or i32 %v4_d7bc, %v4_d7c4
  store i32 %v5_d7c4, i32* %r2.global-to-local, align 4
  %v7_d7c4 = icmp eq i32 %v5_d7c4, 0
  br i1 %v7_d7c4, label %dec_label_pc_da6c, label %dec_label_pc_d7cc

dec_label_pc_d7cc:                                ; preds = %dec_label_pc_d7bc
  %v1_d7cc = mul i32 %v4_d7bc, 256
  %v3_d7d0 = and i32 %v1_d7cc, 65280
  %v4_d7d4 = udiv i32 %v5_d7c4, 256
  %v5_d7d4 = or i32 %v3_d7d0, %v4_d7d4
  %v6_d7d4 = trunc i32 %v4_d7d4 to i8
  store i32 %v5_d7d4, i32* %r2.global-to-local, align 4
  %v4_d7d8 = udiv i32 %v5_d7c4, 65536
  store i32 %v4_d7d8, i32* %r3.global-to-local, align 4
  %v3_d7dc = icmp slt i8 %v6_d7d4, 0
  %v7_d7e4 = inttoptr i32 %v4_d7d4 to i8*
  store i8* %v7_d7e4, i8** %stack_var_-38, align 4
  br i1 %v3_d7dc, label %dec_label_pc_d7ec, label %dec_label_pc_d9dc

dec_label_pc_d7ec:                                ; preds = %dec_label_pc_d7cc
  %v2_d7ec = load i32, i32* @global_var_1ba1c.95, align 4
  %v1_d7f0 = call i32 @function_10c7c(i32 %v2_d7ec)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d7f8 = load i32, i32* @r5, align 4
  %v2_d7f8 = inttoptr i32 %v1_d7f8 to i32*
  store i32 -1, i32* %v2_d7f8, align 4
  br label %dec_label_pc_d560.backedge

dec_label_pc_d800:                                ; preds = %dec_label_pc_d5c4
  %v0_d808 = load i32, i32* @r4, align 4
  store i32 %v0_d808, i32* %r2.global-to-local, align 4
  %v3_d80c = call i32 @function_11550(i32 2, i32 1, i32 %v0_d808)
  %v7_d810 = icmp eq i32 %v3_d80c, -1
  store i32 %v3_d80c, i32* %r5.global-to-local, align 4
  %v1_d818 = load i32, i32* %r8.global-to-local, align 4
  %v2_d818 = inttoptr i32 %v1_d818 to i32*
  store i32 %v3_d80c, i32* %v2_d818, align 4
  br i1 %v7_d810, label %dec_label_pc_d5d4, label %dec_label_pc_d820

dec_label_pc_d820:                                ; preds = %dec_label_pc_d800
  %v0_d820 = load i32, i32* @r4, align 4
  store i32 %v0_d820, i32* @r2, align 4
  %v2_d828 = call i32 @function_10bb8(i32 %v3_d80c, i32 3)
  %v1_d830 = or i32 %v2_d828, 2048
  store i32 %v1_d830, i32* @r2, align 4
  %v0_d834 = load i32, i32* %r5.global-to-local, align 4
  %v2_d838 = call i32 @function_10bb8(i32 %v0_d834, i32 4)
  store i32 ptrtoint (i32* @global_var_1ba20.70 to i32), i32* %r2.global-to-local, align 4
  %v2_d840 = load i32, i32* @global_var_1ba20.70, align 4
  store i32 %v2_d840, i32* %r3.global-to-local, align 4
  %v2_d844 = icmp eq i32 %v2_d840, 0
  br i1 %v2_d844, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_d820
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_106b4.100 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d820, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_d858 = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1bba0.98 to i8*), align 4
  %v5_d868 = call i32 @function_113ac(i32 %v2_d858, %sockaddr* bitcast (i8** @global_var_1bc38.72 to %sockaddr*), i32 16)
  br label %dec_label_pc_d5d4

dec_label_pc_d870:                                ; preds = %dec_label_pc_d664
  %v2_d878 = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d888 = call i32 @function_114c0(i32 %v2_d878, i32* nonnull %v4_d888, i32 2, i32 16384)
  br label %dec_label_pc_d684

dec_label_pc_d890:                                ; preds = %dec_label_pc_d6c8
  store i32 4, i32* @r4, align 4
  store i32 %v2_d898, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_d8b4 = call i32 @function_11404(i32 %v2_d748, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_d874)
  %v3_d8b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d8b8, i32* %r3.global-to-local, align 4
  %v2_d8bc = icmp eq i32 %v3_d8b8, 0
  br i1 %v2_d8bc, label %dec_label_pc_d938, label %dec_label_pc_d8c4

dec_label_pc_d8c4:                                ; preds = %dec_label_pc_d890
  %v2_d8c4 = load i32, i32* @global_var_1ba1c.95, align 4
  %v1_d8c8 = call i32 @function_10c7c(i32 %v2_d8c4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d8d0 = load i32, i32* @r5, align 4
  %v2_d8d0 = inttoptr i32 %v1_d8d0 to i32*
  store i32 -1, i32* %v2_d8d0, align 4
  %v0_d8d4 = call i32 @function_dab8()
  %v2_d8dc = call i32 @function_10a04(i32 %v0_d8d4, i32 10)
  %v1_d8e0 = add i32 %v2_d8dc, 1
  %v1_d8e4 = call i32 @function_11ec0(i32 %v1_d8e0)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d694
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_d898, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_d904 = call i32 @function_11354(i32 %v2_d688, %sockaddr* %v5_d904, i32 %v2_d898, i32 16, i32 16)
  %v1_d908 = call i32 @function_e190(i32 %v6_d904)
  %v1_d90c = call i32 @function_c79c(i32 %v1_d908)
  store i32 %v1_d51c, i32* %r2.global-to-local, align 4
  %v2_d91c = call i32 @function_10d7c(i32 %v1_d918, i32 9)
  store i32 ptrtoint (i32* @global_var_1bb9c.83 to i32), i32* %r3.global-to-local, align 4
  %v2_d924 = load i32, i32* @global_var_1bb9c.83, align 4
  %v2_d928 = icmp eq i32 %v2_d924, 0
  br i1 %v2_d928, label %dec_label_pc_d930, label %dec_label_pc_d9d0

dec_label_pc_d930:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d9d0
  %v1_d934 = call i32 @function_11e2c(i32 0)
  br label %dec_label_pc_d938

dec_label_pc_d938:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d930
  %v2_d93c = call i32 @function_103fc(i8* %v1_d93c)
  %sext = mul i32 %v2_d93c, 16777216
  %v1_d940 = sdiv i32 %sext, 16777216
  %v7_d940 = inttoptr i32 %v1_d940 to i8*
  store i8* %v7_d940, i8** %stack_var_-38, align 4
  %v0_d944 = call i32 @function_106b4()
  store i32 %v0_d944, i32* @global_var_1bc30.48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d958 = load i32, i32* @r4, align 4
  store i32 %v0_d958, i32* %r2.global-to-local, align 4
  %v0_d95c = load i32, i32* @r5, align 4
  %v1_d95c = inttoptr i32 %v0_d95c to i32*
  %v2_d95c = load i32, i32* %v1_d95c, align 4
  %v5_d960 = call i32 @function_114c0(i32 %v2_d95c, i32* nonnull @global_var_1333c.103, i32 %v0_d958, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d96c = load i32, i32* @r5, align 4
  %v1_d96c = inttoptr i32 %v0_d96c to i32*
  %v2_d96c = load i32, i32* %v1_d96c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d978 = call i32 @function_114c0(i32 %v2_d96c, i32* %v4_d888, i32 1, i32 16384)
  %v3_d97c = load i8*, i8** %stack_var_-38, align 4
  %v4_d97c = ptrtoint i8* %v3_d97c to i32
  store i32 %v4_d97c, i32* %r2.global-to-local, align 4
  %v3_d980 = icmp eq i8* %v3_d97c, null
  br i1 %v3_d980, label %dec_label_pc_d560.backedge, label %dec_label_pc_d988

dec_label_pc_d988:                                ; preds = %dec_label_pc_d938
  %v0_d988 = load i32, i32* @r5, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i32*
  %v2_d988 = load i32, i32* %v1_d988, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d994 = call i32 @function_114c0(i32 %v2_d988, i32* nonnull %stack_var_-140, i32 %v4_d97c, i32 16384)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d99c:                                ; preds = %dec_label_pc_d9dc, %dec_label_pc_d77c
  %v0_d99c = load i32, i32* @r8, align 4
  %v1_d99c = inttoptr i32 %v0_d99c to i32*
  %v2_d99c = load i32, i32* %v1_d99c, align 4
  store i32 %v2_d99c, i32* %r3.global-to-local, align 4
  %v7_d9a0 = icmp eq i32 %v2_d99c, 4
  br i1 %v7_d9a0, label %dec_label_pc_d560.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_d99c
  %v8_d9a4 = icmp eq i32 %v2_d99c, 11
  br i1 %v8_d9a4, label %dec_label_pc_d560.backedge, label %dec_label_pc_d9ac

dec_label_pc_d9ac:                                ; preds = %dec_label_pc_da04, %bb44, %dec_label_pc_d7b4
  %v2_d9ac = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 55736, i32* @lr, align 4
  %v1_d9b4 = icmp ne i32 %v2_d9ac, -1
  call void @__pseudo_cond_branch(i1 %v1_d9b4, i32 ptrtoint (i32* @global_var_10c7c.99 to i32))
  store i32 ptrtoint (i32* @global_var_1ba1c.95 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1ba1c.95, align 4
  %v1_d9c8 = call i32 @function_11ec0(i32 1)
  br label %dec_label_pc_d560.backedge

dec_label_pc_d9d0:                                ; preds = %dec_label_pc_d8ec
  %v2_d9d4 = call i32 @function_10d7c(i32 %v2_d924, i32 9)
  br label %dec_label_pc_d930

dec_label_pc_d9dc:                                ; preds = %dec_label_pc_d7cc
  %v0_d9dc = load i32, i32* @r4, align 4
  %v1_d9dc = load i32, i32* @r8, align 4
  %v2_d9dc = inttoptr i32 %v1_d9dc to i32*
  store i32 %v0_d9dc, i32* %v2_d9dc, align 4
  store i32 %v2_d9e4, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d9f0 = load i32, i32* @global_var_1ba1c.95, align 4
  %v9_d9f8 = call i32 @function_11460(i32 %v2_d9f0, i32* nonnull %stack_var_-1548, i32 %v4_d7d4, i32 16386)
  %v7_d9fc = icmp eq i32 %v9_d9f8, -1
  br i1 %v7_d9fc, label %dec_label_pc_d99c, label %dec_label_pc_da04

dec_label_pc_da04:                                ; preds = %dec_label_pc_d9dc
  %v2_da04 = icmp eq i32 %v9_d9f8, 0
  br i1 %v2_da04, label %dec_label_pc_d9ac, label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_da04
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_da1c = load i32, i32* @global_var_1ba1c.95, align 4
  %v5_da20 = call i32 @function_11460(i32 %v2_da1c, i32* nonnull %v4_d888, i32 2, i32 16384)
  %v3_da24 = load i8*, i8** %stack_var_-38, align 4
  %v4_da24 = ptrtoint i8* %v3_da24 to i32
  %v4_da28 = urem i32 %v4_d7d8, 256
  %v4_da2c = mul i32 %v4_da24, 256
  %v5_da2c = or i32 %v4_da2c, %v4_da28
  store i32 %v5_da2c, i32* @ip, align 4
  store i32 %v5_da2c, i32* %r2.global-to-local, align 4
  %v3_da34 = sdiv i32 %v4_da2c, 256
  store i32 %v3_da34, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_da40 = load i32, i32* @global_var_1ba1c.95, align 4
  %v6_da48 = inttoptr i32 %v5_da2c to i8*
  store i8* %v6_da48, i8** %stack_var_-38, align 4
  %v8_da4c = call i32 @function_11460(i32 %v2_da40, i32* nonnull %stack_var_-1548, i32 %v5_da2c, i32 16384)
  %v3_da50 = load i8*, i8** %stack_var_-38, align 4
  %v4_da50 = ptrtoint i8* %v3_da50 to i32
  store i32 %v4_da50, i32* %r2.global-to-local, align 4
  %v4_da54 = urem i32 %v3_da34, 256
  store i32 %v4_da54, i32* %r3.global-to-local, align 4
  %v6_da58 = mul nuw nsw i32 %v4_da54, 256
  %v7_da58 = or i32 %v4_da50, %v6_da58
  %v9_da58 = icmp eq i32 %v7_da58, 0
  br i1 %v9_da58, label %dec_label_pc_d560.backedge, label %dec_label_pc_da60

dec_label_pc_da60:                                ; preds = %dec_label_pc_da0c
  %v7_da64 = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v7_da58, i32 %v4_da50, i32 %v4_da54)
  br label %dec_label_pc_d560.backedge

dec_label_pc_da6c:                                ; preds = %dec_label_pc_d7bc
  %v2_da70 = load i32, i32* @global_var_1ba1c.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_da80 = call i32 @function_11460(i32 %v2_da70, i32* nonnull %v4_d888, i32 2, i32 16384)
  br label %dec_label_pc_d560.backedge

; uselistorder directives
  uselistorder i32 %v4_da54, { 2, 0, 1 }
  uselistorder i32 %v4_da50, { 1, 0, 2 }
  uselistorder i32 %v3_da34, { 1, 0 }
  uselistorder i32 %v5_da2c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_da2c, { 1, 0 }
  uselistorder i32 %v9_d9f8, { 1, 0 }
  uselistorder i32 %v3_d80c, { 3, 2, 1, 0 }
  uselistorder i32 %v4_d7d4, { 2, 3, 0, 1 }
  uselistorder i32 %v5_d7a8, { 1, 0 }
  uselistorder i32 %v2_d748, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_d688, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d64c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_d594, { 2, 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 0 }
  uselistorder i32 %v1_d56c, { 1, 2, 0 }
  uselistorder i32 %v2_d898, { 1, 0, 2 }
  uselistorder i32* %v4_d888, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_d55c, { 1, 0, 2 }
  uselistorder i32 %v2_d558, { 1, 0, 2 }
  uselistorder i32 %v2_d404, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_d3f4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d30c, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1bb9c.83, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1bba0.98 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1bba0.98, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1bba0.98 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1ba18.78, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1ba1c.95, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_d214, { 1, 0 }
  uselistorder i32 (i32)* @function_cd30, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_db6c, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @function_d0a4, { 1, 0 }
  uselistorder i32* @global_var_1ba20.70, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d054.68 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_1bc38.72, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_115c4, { 1, 0 }
  uselistorder label %dec_label_pc_d938, { 1, 0 }
  uselistorder label %dec_label_pc_d930, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d560.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_d684, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_d5d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d5c4, { 1, 0 }
  uselistorder label %dec_label_pc_d580.dec_label_pc_d580_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_d568.dec_label_pc_d568_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_d3c0, { 2, 0, 1 }
}

define i32 @function_dab8() local_unnamed_addr {
dec_label_pc_dab8:
  %v2_dac4 = load i32, i32* @global_var_1bba4.105, align 4
  %v2_dac8 = load i32, i32* @global_var_1bbb0.107, align 4
  store i32 ptrtoint (i32* @global_var_1bba8.109 to i32), i32* @lr, align 4
  %v4_dad4 = mul i32 %v2_dac4, 2048
  %v5_dad4 = xor i32 %v4_dad4, %v2_dac4
  %v4_dad8 = udiv i32 %v2_dac8, 524288
  %v5_dad8 = xor i32 %v4_dad8, %v2_dac8
  %v2_dadc = load i32, i32* @global_var_1bba8.109, align 4
  %v2_dae0 = load i32, i32* @global_var_1bbac.111, align 4
  %v2_dae4 = xor i32 %v5_dad8, %v5_dad4
  %v4_dae8 = udiv i32 %v5_dad4, 256
  %v5_dae8 = xor i32 %v2_dae4, %v4_dae8
  store i32 %v2_dadc, i32* @global_var_1bba4.105, align 4
  store i32 %v2_dae0, i32* @global_var_1bba8.109, align 4
  store i32 %v2_dac8, i32* @global_var_1bbac.111, align 4
  store i32 %v5_dae8, i32* @global_var_1bbb0.107, align 4
  ret i32 %v5_dae8

; uselistorder directives
  uselistorder i32 %v2_dac8, { 2, 1, 0 }
  uselistorder i32 %v2_dac4, { 1, 0 }
}

define i32 @function_db10(i32 %arg1) local_unnamed_addr {
dec_label_pc_db10:
  %stack_var_-12 = alloca i32, align 4
  %v3_db10 = load i32, i32* @r4, align 4
  store i32 %v3_db10, i32* %stack_var_-12, align 4
  %v2_db18 = call i32 @function_10f4c(i32* null)
  store i32 %v2_db18, i32* @global_var_1bba4.105, align 4
  %v0_db24 = call i32 @function_10cd4()
  store i32 %v0_db24, i32* @r4, align 4
  %v0_db2c = call i32 @function_10d00()
  %v0_db34 = load i32, i32* @r4, align 4
  %v2_db34 = xor i32 %v0_db34, %v0_db2c
  store i32 %v2_db34, i32* @r4, align 4
  store i32 %v2_db34, i32* @global_var_1bba8.109, align 4
  %v1_db3c = call i32 @function_11230(i32 %v0_db2c)
  %v2_db40 = load i32, i32* @global_var_1bba8.109, align 4
  %v2_db4c = xor i32 %v2_db40, %v1_db3c
  store i32 %v2_db4c, i32* @global_var_1bbb0.107, align 4
  store i32 %v1_db3c, i32* @global_var_1bbac.111, align 4
  %v2_db58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_db58, i32* @r4, align 4
  ret i32 %v1_db3c

; uselistorder directives
  uselistorder i32 %v1_db3c, { 1, 2, 0 }
  uselistorder i32 %v0_db2c, { 1, 0 }
}

define i32 @function_db6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_db6c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-59 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_db6c = load i32, i32* @r4, align 4
  store i32 %v3_db6c, i32* %stack_var_-36, align 4
  %v28_db6c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg2, i32* %fp.global-to-local, align 4
  %v2_db70 = icmp eq i32 %arg2, 0
  %v0_db78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_db78, i32* %sb.global-to-local, align 4
  br i1 %v2_db70, label %dec_label_pc_dc04, label %dec_label_pc_db80

dec_label_pc_db80:                                ; preds = %dec_label_pc_db6c
  %v2_db80 = ptrtoint i32* %stack_var_-59 to i32
  store i32 %v2_db80, i32* @r0, align 4
  store i32 ptrtoint ([23 x i8]* @global_var_13344.117 to i32), i32* @r1, align 4
  store i32 23, i32* @r2, align 4
  %v4_db8c = call i32 @function_11270(i32 %v2_db80, i32 ptrtoint ([23 x i8]* @global_var_13344.117 to i32), i32 23)
  store i32 %v4_db8c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bba4.105 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bba8.109 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbac.111 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbb0.107 to i32), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v1_dbd8 = bitcast i32* %stack_var_-59 to i8*
  br label %dec_label_pc_dba4

dec_label_pc_dba4:                                ; preds = %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge, %dec_label_pc_db80
  %v1_dbc8 = phi i32 [ %v1_dbc8.pre, %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge ], [ ptrtoint (i32* @global_var_1bba4.105 to i32), %dec_label_pc_db80 ]
  %v2_dba4 = load i32, i32* @global_var_1bbb0.107, align 4
  store i32 %v2_dba4, i32* %r2.global-to-local, align 4
  %v2_dba8 = load i32, i32* @global_var_1bba4.105, align 4
  %v4_dbac = udiv i32 %v2_dba4, 524288
  %v5_dbac = xor i32 %v4_dbac, %v2_dba4
  %v4_dbb0 = mul i32 %v2_dba8, 2048
  %v5_dbb0 = xor i32 %v4_dbb0, %v2_dba8
  %v2_dbb4 = xor i32 %v5_dbac, %v5_dbb0
  %v2_dbb8 = load i32, i32* @global_var_1bba8.109, align 4
  %v2_dbbc = load i32, i32* @global_var_1bbac.111, align 4
  store i32 %v2_dbbc, i32* %ip.global-to-local, align 4
  %v4_dbc0 = udiv i32 %v5_dbb0, 256
  %v5_dbc0 = xor i32 %v2_dbb4, %v4_dbc0
  store i32 %v5_dbc0, i32* %r4.global-to-local, align 4
  store i32 %v2_db80, i32* %r0.global-to-local, align 4
  %v2_dbc8 = inttoptr i32 %v1_dbc8 to i32*
  store i32 %v2_dbb8, i32* %v2_dbc8, align 4
  %v0_dbcc = load i32, i32* %ip.global-to-local, align 4
  %v1_dbcc = load i32, i32* %r8.global-to-local, align 4
  %v2_dbcc = inttoptr i32 %v1_dbcc to i32*
  store i32 %v0_dbcc, i32* %v2_dbcc, align 4
  %v0_dbd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbd0 = load i32, i32* %r7.global-to-local, align 4
  %v2_dbd0 = inttoptr i32 %v1_dbd0 to i32*
  store i32 %v0_dbd0, i32* %v2_dbd0, align 4
  %v0_dbd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_dbd4 = load i32, i32* %r6.global-to-local, align 4
  %v2_dbd4 = inttoptr i32 %v1_dbd4 to i32*
  store i32 %v0_dbd4, i32* %v2_dbd4, align 4
  %v2_dbd8 = call i32 @function_103fc(i8* %v1_dbd8)
  %v0_dbe0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dbe0, i32* %r0.global-to-local, align 4
  %v2_dbe4 = call i32 @function_10a04(i32 %v0_dbe0, i32 %v2_dbd8)
  %v2_dbec = add i32 %v2_dbe4, %v28_db6c
  store i32 %v2_dbec, i32* %r0.global-to-local, align 4
  %v1_dbf0 = add i32 %v2_dbec, -23
  %v2_dbf0 = inttoptr i32 %v1_dbf0 to i8*
  %v3_dbf0 = load i8, i8* %v2_dbf0, align 1
  %v2_dbf4 = load i32, i32* %r5.global-to-local, align 4
  %v3_dbf4 = load i32, i32* %sb.global-to-local, align 4
  %v4_dbf4 = add i32 %v3_dbf4, %v2_dbf4
  %v5_dbf4 = inttoptr i32 %v4_dbf4 to i8*
  store i8 %v3_dbf0, i8* %v5_dbf4, align 1
  %v0_dbf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_dbf8 = add i32 %v0_dbf8, 1
  store i32 %v1_dbf8, i32* %r5.global-to-local, align 4
  %v1_dbfc = load i32, i32* %fp.global-to-local, align 4
  %v9_dbfc = icmp eq i32 %v1_dbf8, %v1_dbfc
  br i1 %v9_dbfc, label %dec_label_pc_dc04.loopexit, label %dec_label_pc_dba4.dec_label_pc_dba4_crit_edge

dec_label_pc_dba4.dec_label_pc_dba4_crit_edge:    ; preds = %dec_label_pc_dba4
  %v1_dbc8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_dba4

dec_label_pc_dc04.loopexit:                       ; preds = %dec_label_pc_dba4
  %v2_dc08.pre = load i32, i32* %stack_var_-36, align 4
  %v29_dc08.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dc04

dec_label_pc_dc04:                                ; preds = %dec_label_pc_dc04.loopexit, %dec_label_pc_db6c
  %v29_dc08 = phi i32 [ %v29_dc08.pre, %dec_label_pc_dc04.loopexit ], [ %v0_db78, %dec_label_pc_db6c ]
  %v2_dc08 = phi i32 [ %v2_dc08.pre, %dec_label_pc_dc04.loopexit ], [ %v3_db6c, %dec_label_pc_db6c ]
  store i32 %v2_dc08, i32* @r4, align 4
  ret i32 %v29_dc08

; uselistorder directives
  uselistorder i32 %v2_dba8, { 1, 0 }
  uselistorder i32 %v2_dba4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32* @global_var_1bbb0.107, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1bbac.111, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1bba8.109, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1bba4.105, { 2, 4, 1, 0, 3 }
}

define i32 @function_dc20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_dc20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_dc20 = load i32, i32* @r4, align 4
  store i32 %v3_dc20, i32* %stack_var_-8, align 4
  %v6_dc20 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_dc24 = icmp eq i32 %arg1, 0
  br i1 %v2_dc24, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_dc20
  store i32 %v3_dc20, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_dc20
  %v1_dc2c = add i32 %arg1, 4
  %v2_dc2c = inttoptr i32 %v1_dc2c to i32*
  %v3_dc2c = load i32, i32* %v2_dc2c, align 4
  %v1_dc34 = icmp ne i32 %v3_dc2c, 0
  call void @__pseudo_cond_branch(i1 %v1_dc34, i32 ptrtoint (i32* @global_var_11894.20 to i32))
  %v0_dc38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_dc38, i32* @r0, align 4
  %v2_dc3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_dc3c, i32* @r4, align 4
  store i32 %v6_dc20, i32* @lr, align 4
  %v0_dc40 = call i32 @function_11894()
  ret i32 %v0_dc40
}

define i32 @function_dc44(i8* %arg1) local_unnamed_addr {
dec_label_pc_dc44:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_dc44 = load i32, i32* @r4, align 4
  store i32 %v3_dc44, i32* %stack_var_-36, align 4
  %v6_dc44 = load i32, i32* @r5, align 4
  %v9_dc44 = load i32, i32* @r6, align 4
  %v12_dc44 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_dc5c = call i32 @function_1183c(i32 1, i32 8)
  %v0_dc64 = load i32, i32* @r4, align 4
  %v1_dc64 = inttoptr i32 %v0_dc64 to i8*
  store i32 %v0_dc64, i32* %r0.global-to-local, align 4
  %v3_dc68 = call i32 @function_103fc(i8* %v1_dc64)
  %v2_dc70 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_dc70, i32* %fp.global-to-local, align 4
  %v2_dc74 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_dc78 = add i32 %v3_dc68, 1
  store i32 %v1_dc78, i32* %r0.global-to-local, align 4
  %v2_dc7c = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_dc7c, i32* %r2.global-to-local, align 4
  store i32 %v2_dc70, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_dcbc162 = icmp eq i32 %v1_dc78, 0
  store i1 %v2_dcbc162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_dcc4163 = or i32 %v2_dc7c, 1
  store i32 %v1_dcc4163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_dc78, 1
  br i1 %tmp124164, label %dec_label_pc_dccc, label %dec_label_pc_dc8c.lr.ph

dec_label_pc_dc8c.lr.ph:                          ; preds = %dec_label_pc_dc44
  %v0_dc8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc8c.lr.ph, %.thread12
  %v1_dca0176.off0 = phi i8 [ 0, %dec_label_pc_dc8c.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_dc8c = phi i32 [ %v0_dc8c.pre, %dec_label_pc_dc8c.lr.ph ], [ %v1_dcb0, %.thread12 ]
  %v2_dcd0165 = phi i32 [ %v2_dc7c, %dec_label_pc_dc8c.lr.ph ], [ %v0_dcb8, %.thread12 ]
  %v1_dc8c = inttoptr i32 %v0_dc8c to i8*
  %v2_dc8c = load i8, i8* %v1_dc8c, align 1
  %v3_dc8c = zext i8 %v2_dc8c to i32
  store i32 %v3_dc8c, i32* %r3.global-to-local, align 4
  %v2_dc90 = icmp eq i8 %v2_dc8c, 0
  store i1 %v2_dc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dc90, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_dc8c
  %v8_dc94 = icmp eq i8 %v2_dc8c, 46
  store i1 %v8_dc94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dc94, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_dc98 = inttoptr i32 %v2_dcd0165 to i8*
  store i8 %v2_dc8c, i8* %v4_dc98, align 1
  %v5_dc98 = load i32, i32* %r2.global-to-local, align 4
  %v6_dc98 = add i32 %v5_dc98, 1
  store i32 %v6_dc98, i32* %r2.global-to-local, align 4
  %v0_dc9c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc9c.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_dca0.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_dca0.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_dc8c
  %v1_dca0.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_dca0176.off0, %bb ], [ %v1_dca0176.off0, %dec_label_pc_dc8c ]
  %v3_dca0 = load i32, i32* %r5.global-to-local, align 4
  %v4_dca0 = inttoptr i32 %v3_dca0 to i8*
  store i8 %v1_dca0.off0, i8* %v4_dca0, align 1
  %v0_dca4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dca4.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_dc98, i32* %r1.global-to-local, align 4
  %v1_dca4 = load i32, i32* %ip.global-to-local, align 4
  %v2_dca4 = urem i32 %v1_dca4, 256
  store i32 %v2_dca4, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_dca410 = load i32, i32* %ip.global-to-local, align 4
  %v2_dca411 = urem i32 %v1_dca410, 256
  store i32 %v2_dca411, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_dca8.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_dca8.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_dcc0.pre = phi i32 [ %v2_dca411, %..thread12_crit_edge ], [ %v2_dca4, %bb122 ], [ 0, %bb123 ]
  %v0_dcb0 = load i32, i32* @r4, align 4
  %v1_dcb0 = add i32 %v0_dcb0, 1
  store i32 %v1_dcb0, i32* @r4, align 4
  %v0_dcb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dcb4 = add i32 %v0_dcb4, -1
  store i32 %v1_dcb4, i32* %r0.global-to-local, align 4
  %v0_dcb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_dcb8, i32* %r2.global-to-local, align 4
  %v2_dcbc = icmp eq i32 %v1_dcb4, 0
  store i1 %v2_dcbc, i1* %cpsr_z.global-to-local, align 1
  %v1_dcc0 = add nuw nsw i32 %v0_dcc0.pre, 1
  store i32 %v1_dcc0, i32* %ip.global-to-local, align 4
  %v1_dcc4 = add i32 %v0_dcb8, 1
  store i32 %v1_dcc4, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_dcb4, 1
  %extract.t179 = trunc i32 %v0_dcc0.pre to i8
  br i1 %tmp124, label %dec_label_pc_dccc, label %dec_label_pc_dc8c

dec_label_pc_dccc:                                ; preds = %.thread12, %dec_label_pc_dc44
  %v2_dcd0.lcssa = phi i32 [ %v2_dc7c, %dec_label_pc_dc44 ], [ %v0_dcb8, %.thread12 ]
  %v3_dc5c = inttoptr i32 %v2_dc5c to i8*
  store i32 0, i32* @r4, align 4
  %v3_dcd0 = inttoptr i32 %v2_dcd0.lcssa to i8*
  store i8 0, i8* %v3_dcd0, align 1
  store i32 %v2_dc70, i32* %r0.global-to-local, align 4
  %v1_dcd8 = bitcast i32* %stack_var_-2228 to i8*
  %v2_dcd8 = call i32 @function_103fc(i8* %v1_dcd8)
  %v2_dcdc = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_dcdc, i32* %r1.global-to-local, align 4
  %v0_dce0 = load i32, i32* %fp.global-to-local, align 4
  %v2_dce0 = add i32 %v0_dce0, %v2_dcd8
  store i32 %v2_dce0, i32* @r5, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %stack_var_-64, align 4
  store i32 %v2_dc70, i32* %r0.global-to-local, align 4
  %v2_dcf8 = call i32 @function_103fc(i8* %v1_dcd8)
  %v1_dcfc = add i32 %v2_dcf8, 17
  store i32 %v1_dcfc, i32* %r0.global-to-local, align 4
  %v0_dd04 = call i32 @function_dab8()
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ffff.46 to i32), i32* %r1.global-to-local, align 4
  %v2_dd10 = call i32 @function_10a04(i32 %v0_dd04, i32 ptrtoint (i32* @global_var_ffff.46 to i32))
  store i32 16, i32* @r1, align 4
  %v6_dd1c = urem i32 %v2_dd10, 65536
  store i32 %v6_dd1c, i32* %r3.global-to-local, align 4
  %v2_dd24 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_dd24, i32* @r0, align 4
  %v0_dd2c = call i32 @function_1049c()
  %sext = mul i32 %v2_dd10, 16777216
  %v4_dd30 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_dcdc, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_dd30, i32* %lr.global-to-local, align 4
  %v0_dd78 = load i32, i32* @r5, align 4
  %v2_dd78 = add i32 %v0_dd78, 1
  store i32 %v2_dd78, i32* %ip.global-to-local, align 4
  %v2_dd7c = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v5_dd80 = trunc i32 %v4_dd30 to i8
  store i8 %v5_dd80, i8* %stack_var_-2240, align 1
  %v0_dd98 = load i32, i32* @r4, align 4
  %v1_dd98 = trunc i32 %v0_dd98 to i8
  %v4_dd98 = inttoptr i32 %v2_dd78 to i8*
  store i8 %v1_dd98, i8* %v4_dd98, align 1
  %v0_dd9c = load i32, i32* @r4, align 4
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  %v2_dd9c = load i32, i32* %ip.global-to-local, align 4
  %v3_dd9c = add i32 %v2_dd9c, 2
  %v4_dd9c = inttoptr i32 %v3_dd9c to i8*
  store i8 %v1_dd9c, i8* %v4_dd9c, align 1
  %v0_dda0 = load i32, i32* %r0.global-to-local, align 4
  %v1_dda0 = trunc i32 %v0_dda0 to i8
  %v2_dda0 = load i32, i32* %ip.global-to-local, align 4
  %v3_dda0 = add i32 %v2_dda0, 3
  %v4_dda0 = inttoptr i32 %v3_dda0 to i8*
  store i8 %v1_dda0, i8* %v4_dda0, align 1
  %v0_dda4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dda4 = trunc i32 %v0_dda4 to i8
  %v2_dda4 = load i32, i32* %ip.global-to-local, align 4
  %v3_dda4 = add i32 %v2_dda4, 1
  %v4_dda4 = inttoptr i32 %v3_dda4 to i8*
  store i8 %v1_dda4, i8* %v4_dda4, align 1
  %v0_ddac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ddac, i32* %sl.global-to-local, align 4
  %v2_ddb4 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ddb4, i32* @r6, align 4
  %v3_ddec = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_de08 = bitcast i8* %stack_var_-2240 to i32*
  %v2_de58 = ptrtoint i32* %stack_var_-36 to i32
  %v2_de84 = ptrtoint i32* %stack_var_-48 to i32
  %v6_dee0 = bitcast i8* %stack_var_-4288 to i32*
  %v1_df5c = add i32 %v2_dd7c, 12
  %v1_df64 = inttoptr i32 %v1_df5c to i8*
  %v1_df78 = add i32 %v2_dd7c, 1
  %v2_df78 = inttoptr i32 %v1_df78 to i8*
  %v1_df94 = add i32 %v2_dd7c, 6
  %v2_df94 = inttoptr i32 %v1_df94 to i8*
  %v1_df98 = add i32 %v2_dd7c, 7
  %v2_df98 = inttoptr i32 %v1_df98 to i8*
  br label %dec_label_pc_ddb8

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_df0c, %dec_label_pc_dccc
  %v1_ddbc = phi i32 [ %v0_ddb8.pre, %dec_label_pc_df0c ], [ -1, %dec_label_pc_dccc ]
  %v7_ddb8 = icmp eq i32 %v1_ddbc, -1
  store i1 %v7_ddb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ddb8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ddb8
  store i32 %v1_ddbc, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ddb8, %bb125
  store i32 56772, i32* @lr, align 4
  %v1_ddc0 = xor i1 %v7_ddb8, true
  call void @__pseudo_cond_branch(i1 %v1_ddc0, i32 ptrtoint (i32* @global_var_10c7c.99 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ddd0 = call i32 @function_11550(i32 2, i32 2, i32 0)
  store i32 %v3_ddd0, i32* %r0.global-to-local, align 4
  %v7_ddd4 = icmp eq i32 %v3_ddd0, -1
  store i1 %v7_ddd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ddd0, i32* @r7, align 4
  br i1 %v7_ddd4, label %dec_label_pc_df4c, label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %bb126
  store i32 %v2_dd24, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ddec = call i32 @function_113ac(i32 %v3_ddd0, %sockaddr* %v3_ddec, i32 16)
  store i32 %v4_ddec, i32* %r0.global-to-local, align 4
  %v7_ddf0 = icmp eq i32 %v4_ddec, -1
  store i1 %v7_ddf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ddf0, label %dec_label_pc_df14, label %dec_label_pc_ddf8

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_dde0
  %v0_ddf8 = load i32, i32* @r7, align 4
  store i32 %v0_ddf8, i32* %r0.global-to-local, align 4
  store i32 %v2_dc74, i32* %r1.global-to-local, align 4
  store i32 %v1_dcfc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de08 = call i32 @function_114c0(i32 %v0_ddf8, i32* %v4_de08, i32 %v1_dcfc, i32 16384)
  store i32 %v5_de08, i32* %r0.global-to-local, align 4
  %v7_de0c = icmp eq i32 %v5_de08, -1
  store i1 %v7_de0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de0c, label %dec_label_pc_df14, label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_ddf8
  %v0_de14 = load i32, i32* @r7, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_de20 = call i32 @function_10bb8(i32 3, i32 %v0_de14)
  store i32 0, i32* @r4, align 4
  %v1_de28 = or i32 %v2_de20, 2048
  store i32 %v1_de28, i32* @r2, align 4
  %v0_de2c = load i32, i32* @r7, align 4
  store i32 %v0_de2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_de34 = call i32 @function_10bb8(i32 4, i32 %v0_de2c)
  store i32 %v2_de34, i32* %r0.global-to-local, align 4
  %v0_de38 = load i32, i32* @r4, align 4
  store i32 %v0_de38, i32* %r3.global-to-local, align 4
  %v2_de3c154 = load i32, i32* @r6, align 4
  %v3_de3c155 = add i32 %v2_de3c154, %v0_de38
  %v4_de3c156 = inttoptr i32 %v3_de3c155 to i32*
  store i32 %v0_de38, i32* %v4_de3c156, align 4
  %v0_de40157 = load i32, i32* %r3.global-to-local, align 4
  %v1_de40158 = add i32 %v0_de40157, 4
  store i32 %v1_de40158, i32* %r3.global-to-local, align 4
  %v7_de44159 = icmp eq i32 %v1_de40158, 128
  br i1 %v7_de44159, label %dec_label_pc_de4c, label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge

dec_label_pc_de3c.dec_label_pc_de3c_crit_edge:    ; preds = %dec_label_pc_de14, %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge
  %v1_de40160 = phi i32 [ %v1_de40, %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge ], [ %v1_de40158, %dec_label_pc_de14 ]
  %v0_de3c.pre = load i32, i32* @r4, align 4
  %v2_de3c = load i32, i32* @r6, align 4
  %v3_de3c = add i32 %v2_de3c, %v1_de40160
  %v4_de3c = inttoptr i32 %v3_de3c to i32*
  store i32 %v0_de3c.pre, i32* %v4_de3c, align 4
  %v0_de40 = load i32, i32* %r3.global-to-local, align 4
  %v1_de40 = add i32 %v0_de40, 4
  store i32 %v1_de40, i32* %r3.global-to-local, align 4
  %v7_de44 = icmp eq i32 %v1_de40, 128
  br i1 %v7_de44, label %dec_label_pc_de4c, label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge

dec_label_pc_de4c:                                ; preds = %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge, %dec_label_pc_de14
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_de4c = load i32, i32* @r7, align 4
  %v3_de4c = udiv i32 %v0_de4c, 32
  %v3_de54 = mul nuw nsw i32 %v3_de4c, 4
  store i32 %v3_de54, i32* %r3.global-to-local, align 4
  store i32 %v2_de58, i32* %r2.global-to-local, align 4
  %v2_de5c = add i32 %v3_de54, %v2_de58
  store i32 %v2_de5c, i32* @r5, align 4
  %v1_de60 = add i32 %v2_de5c, -156
  %v2_de60 = inttoptr i32 %v1_de60 to i32*
  %v3_de60 = load i32, i32* %v2_de60, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_de68 = urem i32 %v0_de4c, 32
  store i32 %v1_de68, i32* @r8, align 4
  %v7_de6c = shl i32 1, %v1_de68
  %v8_de6c = or i32 %v3_de60, %v7_de6c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_de6c, i32* %v2_de60, align 4
  %v0_de7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_de7c, i32* %stack_var_-48, align 4
  store i32 %v2_de84, i32* @lr, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v0_de8c = load i32, i32* @r7, align 4
  %v1_de8c = load i32, i32* %r3.global-to-local, align 4
  %v2_de8c = add i32 %v1_de8c, %v0_de8c
  store i32 %v2_de8c, i32* %r0.global-to-local, align 4
  store i32 %v2_ddb4, i32* %r1.global-to-local, align 4
  %v0_de98 = load i32, i32* @r4, align 4
  store i32 %v0_de98, i32* %r2.global-to-local, align 4
  store i32 %v0_de98, i32* %r3.global-to-local, align 4
  %v5_dea4 = call i32 @function_10e9c(i32 %v2_de8c, i32 %v2_ddb4, i32 %v0_de98, i32 %v0_de98, i32 %v2_de84)
  store i32 %v5_dea4, i32* %r0.global-to-local, align 4
  %v7_dea8 = icmp eq i32 %v5_dea4, -1
  store i1 %v7_dea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea8, label %dec_label_pc_df24, label %dec_label_pc_deb0

dec_label_pc_deb0:                                ; preds = %dec_label_pc_de4c
  %v2_deb0 = icmp eq i32 %v5_dea4, 0
  store i1 %v2_deb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_deb0, label %dec_label_pc_df04, label %dec_label_pc_deb8

dec_label_pc_deb8:                                ; preds = %dec_label_pc_deb0
  %v0_deb8 = load i32, i32* @r5, align 4
  %v1_deb8 = add i32 %v0_deb8, -156
  %v2_deb8 = inttoptr i32 %v1_deb8 to i32*
  %v3_deb8 = load i32, i32* %v2_deb8, align 4
  %v1_debc = load i32, i32* @r8, align 4
  %v6_debc = ashr i32 %v3_deb8, %v1_debc
  store i32 %v6_debc, i32* %r3.global-to-local, align 4
  %v1_dec0 = urem i32 %v6_debc, 2
  %v2_dec0 = icmp eq i32 %v1_dec0, 0
  store i1 %v2_dec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dec0, label %dec_label_pc_df24, label %dec_label_pc_dec8

dec_label_pc_dec8:                                ; preds = %dec_label_pc_deb8
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ded4 = load i32, i32* @r7, align 4
  store i32 %v0_ded4, i32* %r0.global-to-local, align 4
  %v0_ded8 = load i32, i32* @r4, align 4
  %v7_dee0 = call i32 @function_1148c(i32 %v0_ded4, i32* %v6_dee0, i32 2048, i32 16384, i32 %v0_ded8, i32 %v0_ded8)
  store i32 %v7_dee0, i32* %r4.global-to-local, align 4
  %v0_dee8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_dee8, i32* %r0.global-to-local, align 4
  %v1_deec = inttoptr i32 %v0_dee8 to i8*
  %v2_deec = call i32 @function_103fc(i8* %v1_deec)
  %v1_def0 = add i32 %v2_deec, 17
  store i32 %v1_def0, i32* %r0.global-to-local, align 4
  %v0_def4 = load i32, i32* %r4.global-to-local, align 4
  %v3_def4 = icmp ult i32 %v0_def4, %v1_def0
  %v9_def4 = icmp eq i32 %v0_def4, %v1_def0
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_def4, label %dec_label_pc_df04, label %dec_label_pc_df58

dec_label_pc_df04:                                ; preds = %dec_label_pc_dec8, %dec_label_pc_df58, %dec_label_pc_df94, %dec_label_pc_deb0, %dec_label_pc_df4c
  %v0_df04 = load i32, i32* %sl.global-to-local, align 4
  %v7_df04 = icmp eq i32 %v0_df04, 5
  store i1 %v7_df04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df04, label %dec_label_pc_df24, label %dec_label_pc_df0c

dec_label_pc_df0c:                                ; preds = %dec_label_pc_df14, %dec_label_pc_df04
  %v0_df0c = phi i32 [ %v0_df1c, %dec_label_pc_df14 ], [ %v0_df04, %dec_label_pc_df04 ]
  %v1_df0c = add i32 %v0_df0c, 1
  store i32 %v1_df0c, i32* %sl.global-to-local, align 4
  %v0_ddb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ddb8

dec_label_pc_df14:                                ; preds = %dec_label_pc_ddf8, %dec_label_pc_dde0
  %v0_df14 = phi i32 [ %v5_de08, %dec_label_pc_ddf8 ], [ %v4_ddec, %dec_label_pc_dde0 ]
  %v1_df14 = add i32 %v0_df14, 2
  store i32 %v1_df14, i32* %r0.global-to-local, align 4
  %v1_df18 = call i32 @function_11ec0(i32 %v1_df14)
  store i32 %v1_df18, i32* %r0.global-to-local, align 4
  %v0_df1c = load i32, i32* %sl.global-to-local, align 4
  %v7_df1c = icmp eq i32 %v0_df1c, 5
  store i1 %v7_df1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df1c, label %dec_label_pc_df24, label %dec_label_pc_df0c

dec_label_pc_df24:                                ; preds = %dec_label_pc_df14, %dec_label_pc_df04, %dec_label_pc_deb8, %dec_label_pc_de4c, %dec_label_pc_dfa4, %dec_label_pc_dfb0.backedge
  %v0_df24 = load i32, i32* @r7, align 4
  store i32 %v0_df24, i32* %r0.global-to-local, align 4
  %v1_df28 = call i32 @function_10c7c(i32 %v0_df24)
  store i32 %v1_df28, i32* %r0.global-to-local, align 4
  store i32 %v2_dc5c, i32* %r2.global-to-local, align 4
  %v2_df30 = load i8, i8* %v3_dc5c, align 1
  %v3_df30 = zext i8 %v2_df30 to i32
  store i32 %v3_df30, i32* @r4, align 4
  %v2_df34 = icmp eq i8 %v2_df30, 0
  store i1 %v2_df34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_df34, label %dec_label_pc_e090, label %dec_label_pc_df3c

dec_label_pc_df3c:                                ; preds = %dec_label_pc_df24, %dec_label_pc_e090
  %stack_var_-4300.0 = phi i8* [ %v5_e0a4, %dec_label_pc_e090 ], [ %v3_dc5c, %dec_label_pc_df24 ]
  %v4_df3c = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_df3c, i32* %r0.global-to-local, align 4
  %v2_df48 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_df48, i32* @r4, align 4
  store i32 %v6_dc44, i32* @r5, align 4
  store i32 %v9_dc44, i32* @r6, align 4
  store i32 %v12_dc44, i32* @r7, align 4
  ret i32 %v4_df3c

dec_label_pc_df4c:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_df50 = call i32 @function_11ec0(i32 1)
  store i32 %v1_df50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_df04

dec_label_pc_df58:                                ; preds = %dec_label_pc_dec8
  store i32 %v2_dd7c, i32* %lr.global-to-local, align 4
  store i32 %v1_df5c, i32* %fp.global-to-local, align 4
  store i32 %v1_df5c, i32* %r0.global-to-local, align 4
  %v2_df64 = call i32 @function_103fc(i8* %v1_df64)
  store i32 %v2_df64, i32* %r0.global-to-local, align 4
  store i32 %v2_dd7c, i32* %ip.global-to-local, align 4
  store i32 %v2_de58, i32* %r1.global-to-local, align 4
  %v4_df74 = load i8, i8* %stack_var_-4288, align 1
  %v5_df74 = sext i8 %v4_df74 to i32
  store i32 %v5_df74, i32* %r3.global-to-local, align 4
  %v3_df78 = load i8, i8* %v2_df78, align 1
  %v4_df78 = zext i8 %v3_df78 to i32
  store i32 %v4_df78, i32* %r2.global-to-local, align 4
  store i32 %v4_dd30, i32* @lr, align 4
  %v4_df80 = mul nuw nsw i32 %v4_df78, 256
  %v5_df80 = or i32 %v4_df80, %v5_df74
  store i32 %v5_df80, i32* %r3.global-to-local, align 4
  %v0_df84 = load i32, i32* %fp.global-to-local, align 4
  %v9_df88 = icmp eq i32 %v5_df80, %v4_dd30
  store i1 %v9_df88, i1* %cpsr_z.global-to-local, align 1
  %v2_df84 = add i32 %v2_df64, 5
  %v1_df8c = add i32 %v2_df84, %v0_df84
  store i32 %v1_df8c, i32* %r0.global-to-local, align 4
  br i1 %v9_df88, label %dec_label_pc_df94, label %dec_label_pc_df04

dec_label_pc_df94:                                ; preds = %dec_label_pc_df58
  %v3_df94 = load i8, i8* %v2_df94, align 1
  %v4_df94 = zext i8 %v3_df94 to i32
  store i32 %v4_df94, i32* %r2.global-to-local, align 4
  %v3_df98 = load i8, i8* %v2_df98, align 1
  %v4_df98 = zext i8 %v3_df98 to i32
  store i32 %v4_df98, i32* %r3.global-to-local, align 4
  %v4_df9c = mul nuw nsw i32 %v4_df98, 256
  %v5_df9c = or i32 %v4_df9c, %v4_df94
  store i32 %v5_df9c, i32* %r2.global-to-local, align 4
  %v7_df9c = icmp eq i32 %v5_df9c, 0
  store i1 %v7_df9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df9c, label %dec_label_pc_df04, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df94
  %v3_dfa8 = mul nuw nsw i32 %v4_df94, 256
  %v5_dfac = or i32 %v4_df98, %v3_dfa8
  %v1_e064 = add i32 %v2_dd7c, -49152
  %v1_dfb0143 = add nsw i32 %v5_dfac, -1
  %v3_dfb4144 = mul i32 %v1_dfb0143, 65536
  store i32 %v3_dfb4144, i32* %r3.global-to-local, align 4
  %v7_dfb8150 = icmp eq i32 %v3_dfb4144, -65536
  store i1 %v7_dfb8150, i1* %cpsr_z.global-to-local, align 1
  %v3_dfbc151 = urem i32 %v1_dfb0143, 65536
  store i32 %v3_dfbc151, i32* @r6, align 4
  br i1 %v7_dfb8150, label %dec_label_pc_df24, label %dec_label_pc_dfc4.lr.ph

dec_label_pc_dfc4.lr.ph:                          ; preds = %dec_label_pc_dfa4
  %v1_e140 = add i32 %v2_dc5c, 4
  %v2_e140 = inttoptr i32 %v1_e140 to i32*
  br label %dec_label_pc_dfc4

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfc4.lr.ph, %dec_label_pc_dfb0.backedge
  %v3_dfbc153 = phi i32 [ %v3_dfbc151, %dec_label_pc_dfc4.lr.ph ], [ %v3_dfbc, %dec_label_pc_dfb0.backedge ]
  %v0_e018152 = phi i32 [ %v1_df8c, %dec_label_pc_dfc4.lr.ph ], [ %storemerge, %dec_label_pc_dfb0.backedge ]
  store i32 %v0_e018152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_dfd017 = inttoptr i32 %v0_e018152 to i8*
  %v2_dfd018 = load i8, i8* %v1_dfd017, align 1
  %v3_dfd019 = zext i8 %v2_dfd018 to i32
  store i32 %v3_dfd019, i32* %r2.global-to-local, align 4
  %v2_dfd420 = icmp eq i8 %v2_dfd018, 0
  store i1 %v2_dfd420, i1* %cpsr_z.global-to-local, align 1
  %v3_dfd821 = mul nuw nsw i32 %v3_dfd019, 256
  store i32 %v3_dfd821, i32* %r1.global-to-local, align 4
  br i1 %v2_dfd420, label %dec_label_pc_e010, label %dec_label_pc_dfe0.preheader

dec_label_pc_dfe0.preheader:                      ; preds = %dec_label_pc_dfc4, %dec_label_pc_dfd0.backedge
  %v1_e0b4 = phi i32 [ %v1_e0b449, %dec_label_pc_dfd0.backedge ], [ 1, %dec_label_pc_dfc4 ]
  %v0_e0ac47 = phi i32 [ %v0_e0ac, %dec_label_pc_dfd0.backedge ], [ 0, %dec_label_pc_dfc4 ]
  %v0_dfec45 = phi i32 [ %v3_dfd8, %dec_label_pc_dfd0.backedge ], [ %v3_dfd821, %dec_label_pc_dfc4 ]
  %v0_dfe843 = phi i32 [ %v1_e0b0, %dec_label_pc_dfd0.backedge ], [ %v0_e018152, %dec_label_pc_dfc4 ]
  %v0_dfe041 = phi i32 [ %v3_dfd0, %dec_label_pc_dfd0.backedge ], [ %v3_dfd019, %dec_label_pc_dfc4 ]
  br label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfe0.preheader, %dec_label_pc_dfe8
  %v0_e0ac = phi i32 [ %v0_e0ac47, %dec_label_pc_dfe0.preheader ], [ 1, %dec_label_pc_dfe8 ]
  %v0_dfec = phi i32 [ %v0_dfec45, %dec_label_pc_dfe0.preheader ], [ %v3_e008, %dec_label_pc_dfe8 ]
  %v0_e0b0 = phi i32 [ %v0_dfe843, %dec_label_pc_dfe0.preheader ], [ %v2_dff8, %dec_label_pc_dfe8 ]
  %v0_dfe0 = phi i32 [ %v0_dfe041, %dec_label_pc_dfe0.preheader ], [ %v3_dffc, %dec_label_pc_dfe8 ]
  %v7_dfe0 = icmp eq i32 %v0_dfe0, 191
  store i1 %v7_dfe0, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_dfe0, 192
  br i1 %tmp180, label %dec_label_pc_e0ac, label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %dec_label_pc_dfe0
  %v1_dfe8 = add i32 %v0_e0b0, 1
  %v2_dfe8 = inttoptr i32 %v1_dfe8 to i8*
  %v3_dfe8 = load i8, i8* %v2_dfe8, align 1
  %v4_dfe8 = zext i8 %v3_dfe8 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v2_dfec = add i32 %v0_dfec, %v1_e064
  %v2_dff8 = add i32 %v2_dfec, %v4_dfe8
  store i32 %v2_dff8, i32* %r3.global-to-local, align 4
  %v1_dffc = inttoptr i32 %v2_dff8 to i8*
  %v2_dffc = load i8, i8* %v1_dffc, align 1
  %v3_dffc = zext i8 %v2_dffc to i32
  store i32 %v3_dffc, i32* %r2.global-to-local, align 4
  %v2_e000 = icmp eq i8 %v2_dffc, 0
  store i1 %v2_e000, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e008 = mul nuw nsw i32 %v3_dffc, 256
  store i32 %v3_e008, i32* %r1.global-to-local, align 4
  br i1 %v2_e000, label %dec_label_pc_e010, label %dec_label_pc_dfe0

dec_label_pc_e010:                                ; preds = %dec_label_pc_dfd0.backedge, %dec_label_pc_dfe8, %dec_label_pc_dfc4
  %v1_e014 = phi i32 [ 1, %dec_label_pc_dfc4 ], [ %v1_e0b4, %dec_label_pc_dfe8 ], [ %v1_e0b449, %dec_label_pc_dfd0.backedge ]
  %v0_e010 = phi i32 [ 0, %dec_label_pc_dfc4 ], [ 1, %dec_label_pc_dfe8 ], [ %v0_e0ac, %dec_label_pc_dfd0.backedge ]
  %v7_e010 = icmp eq i32 %v0_e010, 1
  store i1 %v7_e010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e010, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_e010
  %v2_e014 = add i32 %v1_e014, 1
  store i32 %v2_e014, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_e010, %bb127
  %v1_e018 = phi i32 [ %v1_e014, %dec_label_pc_e010 ], [ %v2_e014, %bb127 ]
  %v2_e018 = add i32 %v1_e018, %v0_e018152
  store i32 %v2_e018, i32* @r4, align 4
  %v3_e01c = inttoptr i32 %v2_e018 to i8*
  %v4_e01c = load i8, i8* %v3_e01c, align 1
  %v6_e01c = zext i8 %v4_e01c to i32
  store i32 %v6_e01c, i32* %r3.global-to-local, align 4
  %v1_e020 = add i32 %v2_e018, 1
  %v2_e020 = inttoptr i32 %v1_e020 to i8*
  %v3_e020 = load i8, i8* %v2_e020, align 1
  %v4_e020 = zext i8 %v3_e020 to i32
  store i32 %v4_e020, i32* %r2.global-to-local, align 4
  %v4_e024 = mul nuw nsw i32 %v4_e020, 256
  %v5_e024 = or i32 %v4_e024, %v6_e01c
  store i32 %v5_e024, i32* %r3.global-to-local, align 4
  %v7_e028 = icmp eq i32 %v5_e024, 256
  store i1 %v7_e028, i1* %cpsr_z.global-to-local, align 1
  %v1_e02c = add i32 %v2_e018, 10
  store i32 %v1_e02c, i32* @r5, align 4
  br i1 %v7_e028, label %dec_label_pc_e0cc, label %dec_label_pc_e034

dec_label_pc_e034:                                ; preds = %dec_label_pc_e0cc, %bb128
  store i32 %v1_e02c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e04023 = inttoptr i32 %v1_e02c to i8*
  %v2_e04024 = load i8, i8* %v1_e04023, align 1
  %v3_e04025 = zext i8 %v2_e04024 to i32
  store i32 %v3_e04025, i32* %r2.global-to-local, align 4
  %v2_e04426 = icmp eq i8 %v2_e04024, 0
  store i1 %v2_e04426, i1* %cpsr_z.global-to-local, align 1
  %v3_e04827 = mul nuw nsw i32 %v3_e04025, 256
  store i32 %v3_e04827, i32* %r1.global-to-local, align 4
  br i1 %v2_e04426, label %dec_label_pc_e080, label %dec_label_pc_e050.preheader

dec_label_pc_e050.preheader:                      ; preds = %dec_label_pc_e034, %dec_label_pc_e040.backedge
  %v1_e0c4 = phi i32 [ %v1_e0c464, %dec_label_pc_e040.backedge ], [ 1, %dec_label_pc_e034 ]
  %v0_e0bc62 = phi i32 [ %v0_e0bc, %dec_label_pc_e040.backedge ], [ 0, %dec_label_pc_e034 ]
  %v0_e05c60 = phi i32 [ %v3_e048, %dec_label_pc_e040.backedge ], [ %v3_e04827, %dec_label_pc_e034 ]
  %v0_e05858 = phi i32 [ %v1_e0c0, %dec_label_pc_e040.backedge ], [ %v1_e02c, %dec_label_pc_e034 ]
  %v0_e05056 = phi i32 [ %v3_e040, %dec_label_pc_e040.backedge ], [ %v3_e04025, %dec_label_pc_e034 ]
  br label %dec_label_pc_e050

dec_label_pc_e050:                                ; preds = %dec_label_pc_e050.preheader, %dec_label_pc_e058
  %v0_e0bc = phi i32 [ %v0_e0bc62, %dec_label_pc_e050.preheader ], [ 1, %dec_label_pc_e058 ]
  %v0_e05c = phi i32 [ %v0_e05c60, %dec_label_pc_e050.preheader ], [ %v3_e078, %dec_label_pc_e058 ]
  %v0_e0c0 = phi i32 [ %v0_e05858, %dec_label_pc_e050.preheader ], [ %v2_e068, %dec_label_pc_e058 ]
  %v0_e050 = phi i32 [ %v0_e05056, %dec_label_pc_e050.preheader ], [ %v3_e06c, %dec_label_pc_e058 ]
  %v7_e050 = icmp eq i32 %v0_e050, 191
  store i1 %v7_e050, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_e050, 192
  br i1 %tmp181, label %dec_label_pc_e0bc, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e050
  %v1_e058 = add i32 %v0_e0c0, 1
  %v2_e058 = inttoptr i32 %v1_e058 to i8*
  %v3_e058 = load i8, i8* %v2_e058, align 1
  %v4_e058 = zext i8 %v3_e058 to i32
  store i32 %v2_dd7c, i32* %r1.global-to-local, align 4
  %v2_e05c = add i32 %v0_e05c, %v1_e064
  %v2_e068 = add i32 %v2_e05c, %v4_e058
  store i32 %v2_e068, i32* %r3.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v2_e068 to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v3_e06c = zext i8 %v2_e06c to i32
  store i32 %v3_e06c, i32* %r2.global-to-local, align 4
  %v2_e070 = icmp eq i8 %v2_e06c, 0
  store i1 %v2_e070, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e078 = mul nuw nsw i32 %v3_e06c, 256
  store i32 %v3_e078, i32* %r1.global-to-local, align 4
  br i1 %v2_e070, label %dec_label_pc_e080, label %dec_label_pc_e050

dec_label_pc_e080:                                ; preds = %dec_label_pc_e040.backedge, %dec_label_pc_e058, %dec_label_pc_e034
  %v1_e084 = phi i32 [ 1, %dec_label_pc_e034 ], [ %v1_e0c4, %dec_label_pc_e058 ], [ %v1_e0c464, %dec_label_pc_e040.backedge ]
  %v0_e080 = phi i32 [ 0, %dec_label_pc_e034 ], [ 1, %dec_label_pc_e058 ], [ %v0_e0bc, %dec_label_pc_e040.backedge ]
  %v7_e080 = icmp eq i32 %v0_e080, 1
  store i1 %v7_e080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e080, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_e080
  %v2_e084 = add i32 %v1_e084, 1
  store i32 %v2_e084, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_e080, %bb129
  %v1_e088 = phi i32 [ %v1_e084, %dec_label_pc_e080 ], [ %v2_e084, %bb129 ]
  %v2_e088 = add i32 %v1_e088, %v1_e02c
  br label %dec_label_pc_dfb0.backedge

dec_label_pc_dfb0.backedge:                       ; preds = %bb130, %dec_label_pc_e174
  %v0_dfb0.pre = phi i32 [ %v3_dfbc153, %bb130 ], [ %v0_dfb0.pre.pre, %dec_label_pc_e174 ]
  %storemerge = phi i32 [ %v2_e088, %bb130 ], [ %v2_e188, %dec_label_pc_e174 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_dfb0 = add i32 %v0_dfb0.pre, -1
  %v3_dfb4 = mul i32 %v1_dfb0, 65536
  store i32 %v3_dfb4, i32* %r3.global-to-local, align 4
  %v7_dfb8 = icmp eq i32 %v3_dfb4, -65536
  store i1 %v7_dfb8, i1* %cpsr_z.global-to-local, align 1
  %v3_dfbc = urem i32 %v1_dfb0, 65536
  store i32 %v3_dfbc, i32* @r6, align 4
  br i1 %v7_dfb8, label %dec_label_pc_df24, label %dec_label_pc_dfc4

dec_label_pc_e090:                                ; preds = %dec_label_pc_df24
  %v1_e090 = add i32 %v2_dc5c, 4
  %v2_e090 = inttoptr i32 %v1_e090 to i32*
  %v3_e090 = load i32, i32* %v2_e090, align 4
  store i32 %v3_e090, i32* %r0.global-to-local, align 4
  %v2_e094 = icmp eq i32 %v3_e090, 0
  store i1 %v2_e094, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e09c.122 to i32), i32* @lr, align 4
  %v1_e098 = xor i1 %v2_e094, true
  call void @__pseudo_cond_branch(i1 %v1_e098, i32 ptrtoint (i32* @global_var_11894.20 to i32))
  store i32 %v2_dc5c, i32* @r0, align 4
  %v0_e0a0 = call i32 @function_11894()
  store i32 %v0_e0a0, i32* %r0.global-to-local, align 4
  %v0_e0a4 = load i32, i32* @r4, align 4
  %v5_e0a4 = inttoptr i32 %v0_e0a4 to i8*
  br label %dec_label_pc_df3c

dec_label_pc_e0ac:                                ; preds = %dec_label_pc_dfe0
  %v2_e0ac = icmp eq i32 %v0_e0ac, 0
  store i1 %v2_e0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_e0b0 = add i32 %v0_e0b0, 1
  store i32 %v1_e0b0, i32* %r3.global-to-local, align 4
  br i1 %v2_e0ac, label %bb131, label %dec_label_pc_dfd0.backedge

dec_label_pc_dfd0.backedge:                       ; preds = %dec_label_pc_e0ac, %bb131
  %v1_e0b449 = phi i32 [ %v1_e0b4, %dec_label_pc_e0ac ], [ %v2_e0b4, %bb131 ]
  %v1_dfd0 = inttoptr i32 %v1_e0b0 to i8*
  %v2_dfd0 = load i8, i8* %v1_dfd0, align 1
  %v3_dfd0 = zext i8 %v2_dfd0 to i32
  store i32 %v3_dfd0, i32* %r2.global-to-local, align 4
  %v2_dfd4 = icmp eq i8 %v2_dfd0, 0
  store i1 %v2_dfd4, i1* %cpsr_z.global-to-local, align 1
  %v3_dfd8 = mul nuw nsw i32 %v3_dfd0, 256
  store i32 %v3_dfd8, i32* %r1.global-to-local, align 4
  br i1 %v2_dfd4, label %dec_label_pc_e010, label %dec_label_pc_dfe0.preheader

bb131:                                            ; preds = %dec_label_pc_e0ac
  %v2_e0b4 = add i32 %v1_e0b4, 1
  store i32 %v2_e0b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_dfd0.backedge

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e050
  %v2_e0bc = icmp eq i32 %v0_e0bc, 0
  store i1 %v2_e0bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e0c0 = add i32 %v0_e0c0, 1
  store i32 %v1_e0c0, i32* %r3.global-to-local, align 4
  br i1 %v2_e0bc, label %bb132, label %dec_label_pc_e040.backedge

dec_label_pc_e040.backedge:                       ; preds = %dec_label_pc_e0bc, %bb132
  %v1_e0c464 = phi i32 [ %v1_e0c4, %dec_label_pc_e0bc ], [ %v2_e0c4, %bb132 ]
  %v1_e040 = inttoptr i32 %v1_e0c0 to i8*
  %v2_e040 = load i8, i8* %v1_e040, align 1
  %v3_e040 = zext i8 %v2_e040 to i32
  store i32 %v3_e040, i32* %r2.global-to-local, align 4
  %v2_e044 = icmp eq i8 %v2_e040, 0
  store i1 %v2_e044, i1* %cpsr_z.global-to-local, align 1
  %v3_e048 = mul nuw nsw i32 %v3_e040, 256
  store i32 %v3_e048, i32* %r1.global-to-local, align 4
  br i1 %v2_e044, label %dec_label_pc_e080, label %dec_label_pc_e050.preheader

bb132:                                            ; preds = %dec_label_pc_e0bc
  %v2_e0c4 = add i32 %v1_e0c4, 1
  store i32 %v2_e0c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e040.backedge

dec_label_pc_e0cc:                                ; preds = %bb128
  %v1_e0cc = add i32 %v2_e018, 2
  %v2_e0cc = inttoptr i32 %v1_e0cc to i8*
  %v3_e0cc = load i8, i8* %v2_e0cc, align 1
  %v4_e0cc = zext i8 %v3_e0cc to i32
  store i32 %v4_e0cc, i32* %r3.global-to-local, align 4
  %v1_e0d0 = add i32 %v2_e018, 3
  %v2_e0d0 = inttoptr i32 %v1_e0d0 to i8*
  %v3_e0d0 = load i8, i8* %v2_e0d0, align 1
  %v4_e0d0 = zext i8 %v3_e0d0 to i32
  store i32 %v4_e0d0, i32* %r2.global-to-local, align 4
  %v4_e0d4 = mul nuw nsw i32 %v4_e0d0, 256
  %v5_e0d4 = or i32 %v4_e0d4, %v4_e0cc
  store i32 %v5_e0d4, i32* %r3.global-to-local, align 4
  %v7_e0d8 = icmp eq i32 %v5_e0d4, 256
  store i1 %v7_e0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0d8, label %dec_label_pc_e0e0, label %dec_label_pc_e034

dec_label_pc_e0e0:                                ; preds = %dec_label_pc_e0cc
  %v1_e0e0 = add i32 %v2_e018, 8
  %v2_e0e0 = inttoptr i32 %v1_e0e0 to i8*
  %v3_e0e0 = load i8, i8* %v2_e0e0, align 1
  %v4_e0e0 = zext i8 %v3_e0e0 to i32
  store i32 %v4_e0e0, i32* %r1.global-to-local, align 4
  %v1_e0e4 = add i32 %v2_e018, 9
  %v2_e0e4 = inttoptr i32 %v1_e0e4 to i8*
  %v3_e0e4 = load i8, i8* %v2_e0e4, align 1
  %v4_e0e4 = zext i8 %v3_e0e4 to i32
  store i32 %v4_e0e4, i32* %r0.global-to-local, align 4
  %v4_e0e8 = mul nuw nsw i32 %v4_e0e4, 256
  %v5_e0e8 = or i32 %v4_e0e8, %v4_e0e0
  %v3_e0ec = mul i32 %v5_e0e8, 65536
  store i32 %v3_e0ec, i32* %r2.global-to-local, align 4
  %v3_e0f0 = mul nuw nsw i32 %v4_e0e0, 256
  %v5_e0f8 = or i32 %v4_e0e4, %v3_e0f0
  store i32 %v5_e0f8, i32* %r3.global-to-local, align 4
  %v7_e0fc = icmp eq i32 %v5_e0f8, 4
  store i1 %v7_e0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0fc, label %dec_label_pc_e104, label %dec_label_pc_e174

dec_label_pc_e104:                                ; preds = %dec_label_pc_e0e0
  %v2_e104 = inttoptr i32 %v1_e02c to i8*
  %v3_e104 = load i8, i8* %v2_e104, align 1
  %v4_e104 = zext i8 %v3_e104 to i32
  store i32 %v4_e104, i32* %r3.global-to-local, align 4
  store i32 %v2_dcdc, i32* %r2.global-to-local, align 4
  %v1_e110 = add i32 %v2_e018, 11
  %v2_e110 = inttoptr i32 %v1_e110 to i8*
  %v3_e110 = load i8, i8* %v2_e110, align 1
  %v4_e110 = zext i8 %v3_e110 to i32
  store i32 %v4_e110, i32* %r2.global-to-local, align 4
  store i32 %v2_dcdc, i32* %r3.global-to-local, align 4
  %v1_e11c = add i32 %v2_e018, 12
  %v2_e11c = inttoptr i32 %v1_e11c to i8*
  %v3_e11c = load i8, i8* %v2_e11c, align 1
  %v4_e11c = zext i8 %v3_e11c to i32
  store i32 %v4_e11c, i32* %r3.global-to-local, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v1_e128 = add i32 %v2_e018, 13
  %v2_e128 = inttoptr i32 %v1_e128 to i8*
  %v3_e128 = load i8, i8* %v2_e128, align 1
  %v4_e128 = zext i8 %v3_e128 to i32
  store i32 %v4_e128, i32* %r2.global-to-local, align 4
  store i32 %v2_dc5c, i32* @lr, align 4
  %v2_e134 = load i8, i8* %v3_dc5c, align 1
  %v3_e134 = zext i8 %v2_e134 to i32
  %v3_e138 = mul nuw nsw i32 %v3_e134, 4
  %v1_e13c = add nuw nsw i32 %v3_e138, 4
  store i32 %v1_e13c, i32* %r1.global-to-local, align 4
  %v3_e140 = load i32, i32* %v2_e140, align 4
  store i32 %v3_e140, i32* %r0.global-to-local, align 4
  %v3_e144 = sext i8 %v3_e128 to i32
  %v5_e144 = sext i8 %v3_e11c to i32
  %v10_e144 = call i32 @function_11984(i32 %v3_e140, i32 %v1_e13c, i32 %v3_e144, i32 %v5_e144)
  store i32 %v10_e144, i32* %r0.global-to-local, align 4
  store i32 %v2_dc5c, i32* %r1.global-to-local, align 4
  store i32 %v2_dcdc, i32* %ip.global-to-local, align 4
  %v2_e150 = load i8, i8* %v3_dc5c, align 1
  %v3_e150 = zext i8 %v2_e150 to i32
  store i32 %v3_e150, i32* %r2.global-to-local, align 4
  %v4_e154 = sext i8 %v3_e104 to i32
  store i32 %v4_e154, i32* %r3.global-to-local, align 4
  store i32 %v2_dc5c, i32* @lr, align 4
  %v1_e15c = add nuw nsw i32 %v3_e150, 1
  store i32 %v1_e15c, i32* %r1.global-to-local, align 4
  %v5_e160 = mul nuw nsw i32 %v3_e150, 4
  %v6_e160 = add i32 %v5_e160, %v10_e144
  %v7_e160 = inttoptr i32 %v6_e160 to i32*
  store i32 %v4_e154, i32* %v7_e160, align 4
  %v1_e164 = load i32, i32* @lr, align 4
  %v2_e164 = add i32 %v1_e164, 4
  %v3_e164 = inttoptr i32 %v2_e164 to i32*
  store i32 %v10_e144, i32* %v3_e164, align 4
  %v0_e168 = load i32, i32* %r1.global-to-local, align 4
  %v1_e168 = trunc i32 %v0_e168 to i8
  %v2_e168 = load i32, i32* @lr, align 4
  %v3_e168 = inttoptr i32 %v2_e168 to i8*
  store i8 %v1_e168, i8* %v3_e168, align 1
  %v0_e16c = load i32, i32* @r4, align 4
  %v1_e16c = add i32 %v0_e16c, 9
  %v2_e16c = inttoptr i32 %v1_e16c to i8*
  %v3_e16c = load i8, i8* %v2_e16c, align 1
  %v4_e16c = zext i8 %v3_e16c to i32
  store i32 %v4_e16c, i32* %r0.global-to-local, align 4
  %v1_e170 = add i32 %v0_e16c, 8
  %v2_e170 = inttoptr i32 %v1_e170 to i8*
  %v3_e170 = load i8, i8* %v2_e170, align 1
  %v4_e170 = zext i8 %v3_e170 to i32
  store i32 %v4_e170, i32* %r1.global-to-local, align 4
  %v0_e188.pre = load i32, i32* @r5, align 4
  %v0_dfb0.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %dec_label_pc_e0e0, %dec_label_pc_e104
  %v0_dfb0.pre.pre = phi i32 [ %v3_dfbc153, %dec_label_pc_e0e0 ], [ %v0_dfb0.pre.pre.pre, %dec_label_pc_e104 ]
  %v0_e188 = phi i32 [ %v1_e02c, %dec_label_pc_e0e0 ], [ %v0_e188.pre, %dec_label_pc_e104 ]
  %v1_e174 = phi i32 [ %v4_e0e4, %dec_label_pc_e0e0 ], [ %v4_e16c, %dec_label_pc_e104 ]
  %v0_e174 = phi i32 [ %v4_e0e0, %dec_label_pc_e0e0 ], [ %v4_e170, %dec_label_pc_e104 ]
  %v4_e174 = mul nuw nsw i32 %v1_e174, 256
  %v5_e174 = or i32 %v4_e174, %v0_e174
  %v3_e178 = mul i32 %v5_e174, 65536
  store i32 %v3_e178, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_e174, 256
  %v5_e184 = or i32 %tmp133, %v1_e174
  store i32 %v5_e184, i32* %r3.global-to-local, align 4
  %v2_e188 = add i32 %v5_e184, %v0_e188
  br label %dec_label_pc_dfb0.backedge

; uselistorder directives
  uselistorder i32 %v1_e174, { 1, 0 }
  uselistorder i32 %v3_e150, { 1, 0, 2 }
  uselistorder i32 %v10_e144, { 1, 0, 2 }
  uselistorder i32 %v4_e0e4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_e0e0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_e0c4, { 1, 0 }
  uselistorder i32 %v3_e040, { 0, 2, 1 }
  uselistorder i32 %v1_e0c464, { 1, 0 }
  uselistorder i32 %v1_e0c0, { 1, 2, 0 }
  uselistorder i32 %v2_e0b4, { 1, 0 }
  uselistorder i32 %v3_dfd0, { 0, 2, 1 }
  uselistorder i32 %v1_e0b449, { 1, 0 }
  uselistorder i32 %v1_e0b0, { 1, 2, 0 }
  uselistorder i1 %v7_dfb8, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_e06c, { 0, 2, 1 }
  uselistorder i32 %v2_e068, { 1, 2, 0 }
  uselistorder i32 %v0_e0bc, { 2, 0, 1 }
  uselistorder i32 %v1_e0c4, { 1, 2, 0 }
  uselistorder i32 %v3_e04827, { 1, 0 }
  uselistorder i32 %v3_e04025, { 1, 0, 2 }
  uselistorder i32 %v1_e02c, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_e018, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_dffc, { 0, 2, 1 }
  uselistorder i32 %v2_dff8, { 1, 2, 0 }
  uselistorder i32 %v0_e0ac, { 2, 0, 1 }
  uselistorder i32 %v1_e0b4, { 1, 2, 0 }
  uselistorder i32 %v3_dfd821, { 1, 0 }
  uselistorder i32 %v3_dfd019, { 1, 0, 2 }
  uselistorder i32 %v0_e018152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_dfbc151, { 1, 0 }
  uselistorder i1 %v7_dfb8150, { 1, 0 }
  uselistorder i32 %v1_dfb0143, { 1, 0 }
  uselistorder i32 %v4_df98, { 1, 0, 2 }
  uselistorder i32 %v0_df1c, { 1, 0 }
  uselistorder i32 %v0_def4, { 1, 0 }
  uselistorder i1 %v7_dea8, { 1, 0 }
  uselistorder i32 %v5_dea4, { 1, 0, 2 }
  uselistorder i32 %v1_de68, { 1, 0 }
  uselistorder i32 %v3_de54, { 1, 0 }
  uselistorder i32 %v0_de4c, { 1, 0 }
  uselistorder i32 %v1_de40, { 1, 2, 0 }
  uselistorder i1 %v7_de0c, { 1, 0 }
  uselistorder i32 %v5_de08, { 1, 0, 2 }
  uselistorder i1 %v7_ddf0, { 1, 0 }
  uselistorder i32 %v4_ddec, { 1, 0, 2 }
  uselistorder i1 %v7_ddd4, { 1, 0 }
  uselistorder i32 %v3_ddd0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ddb8, { 2, 1, 0 }
  uselistorder i32 %v1_ddbc, { 1, 0 }
  uselistorder i32 %v1_df5c, { 1, 2, 0 }
  uselistorder i32 %v2_de58, { 1, 0, 2 }
  uselistorder i32 %v2_ddb4, { 1, 0, 2 }
  uselistorder i32 %v2_dd7c, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_dd30, { 3, 0, 2, 1 }
  uselistorder i32 %v1_dcfc, { 1, 0, 2 }
  uselistorder i32 %v0_dcb8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_dcb4, { 1, 0, 2 }
  uselistorder i32 %v1_dcb0, { 1, 0 }
  uselistorder i32 %v2_dca411, { 1, 0 }
  uselistorder i32 %v2_dca4, { 1, 0 }
  uselistorder i1 %v8_dc94, { 1, 0 }
  uselistorder i32 %v2_dc7c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_dc64, { 1, 0 }
  uselistorder i32 %v2_dc5c, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 27, 9, 10, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 23, 29, 25 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 39, 38, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 30, 28, 29, 31, 37 }
  uselistorder i32 (i32)* @function_11ec0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_ffff.46 to i32), { 27, 45, 1, 46, 28, 47, 10, 48, 9, 49, 50, 2, 3, 12, 51, 11, 52, 53, 4, 54, 29, 30, 55, 13, 56, 14, 57, 0, 31, 58, 15, 32, 59, 60, 5, 61, 33, 34, 62, 35, 63, 16, 64, 17, 65, 66, 6, 67, 36, 37, 68, 38, 69, 18, 70, 19, 71, 20, 72, 73, 74, 40, 75, 39, 21, 76, 22, 77, 78, 7, 79, 41, 42, 80, 24, 81, 23, 82, 83, 8, 84, 43, 44, 85, 26, 86, 25, 87 }
  uselistorder label %dec_label_pc_e174, { 1, 0 }
  uselistorder label %dec_label_pc_e040.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_dfd0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_dfb0.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_e050, { 1, 0 }
  uselistorder label %dec_label_pc_e050.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_dfe0, { 1, 0 }
  uselistorder label %dec_label_pc_dfe0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_dfc4, { 1, 0 }
  uselistorder label %dec_label_pc_df3c, { 1, 0 }
  uselistorder label %dec_label_pc_df24, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_df04, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_de3c.dec_label_pc_de3c_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_dc8c, { 1, 0 }
}

define i32 @function_e190(i32 %arg1) local_unnamed_addr {
dec_label_pc_e190:
  %v2_e194 = load i32, i32* @global_var_1bc50.124, align 4
  %v2_e19c = call i32 @function_10d7c(i32 %v2_e194, i32 9)
  %v0_e1a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e1a0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e190
  %v3_e1a0 = load i32, i32* @ip, align 4
  %v8_e1a0 = ashr i32 %v2_e19c, %v3_e1a0
  %v9_e1a0 = and i32 %v8_e1a0, 9
  store i32 %v9_e1a0, i32* @fp, align 4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e190, %bb
  ret i32 %v2_e19c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e1a4() local_unnamed_addr {
dec_label_pc_e1a4:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e1a4 = load i32, i32* @r4, align 4
  store i32 %v3_e1a4, i32* %stack_var_-16, align 4
  %v0_e1a8 = load i32, i32* @r0, align 4
  store i32 %v0_e1a8, i32* %r5.global-to-local, align 4
  %v1_e1ac = add i32 %v0_e1a8, 4
  %v2_e1ac = inttoptr i32 %v1_e1ac to i32*
  %v3_e1ac = load i32, i32* %v2_e1ac, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57808, i32* @lr, align 4
  %v1_e1cc = icmp ne i32 %v3_e1ac, -1
  call void @__pseudo_cond_branch(i1 %v1_e1cc, i32 ptrtoint (i32* @global_var_10c7c.99 to i32))
  %v3_e1dc = call i32 @function_11550(i32 2, i32 1, i32 0)
  store i32 %v3_e1dc, i32* %r3.global-to-local, align 4
  %v7_e1e4 = icmp eq i32 %v3_e1dc, -1
  store i32 256, i32* @r1, align 4
  %v0_e1ec = load i32, i32* %r5.global-to-local, align 4
  %v1_e1ec = add i32 %v0_e1ec, 28
  store i32 %v1_e1ec, i32* @r0, align 4
  %v2_e1f0 = add i32 %v0_e1ec, 4
  %v3_e1f0 = inttoptr i32 %v2_e1f0 to i32*
  store i32 %v3_e1dc, i32* %v3_e1f0, align 4
  br i1 %v7_e1e4, label %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge, label %dec_label_pc_e1f8

dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge:    ; preds = %dec_label_pc_e1a4
  %v14_e270.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e26c

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1a4
  %v0_e1f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e1f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_e1f8 = add i32 %v1_e1f8, 24
  %v3_e1f8 = inttoptr i32 %v2_e1f8 to i32*
  store i32 %v0_e1f8, i32* %v3_e1f8, align 4
  %v0_e1fc = call i32 @function_1049c()
  %v0_e200 = load i32, i32* %r5.global-to-local, align 4
  %v1_e200 = add i32 %v0_e200, 4
  %v2_e200 = inttoptr i32 %v1_e200 to i32*
  %v3_e200 = load i32, i32* %v2_e200, align 4
  store i32 %v3_e200, i32* @r4, align 4
  %v0_e208 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e208, i32* @r2, align 4
  %v2_e210 = call i32 @function_10bb8(i32 %v3_e200, i32 3)
  %v1_e218 = or i32 %v2_e210, 2048
  store i32 %v1_e218, i32* @r2, align 4
  %v0_e21c = load i32, i32* @r4, align 4
  %v2_e220 = call i32 @function_10bb8(i32 %v0_e21c, i32 4)
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* %r3.global-to-local, align 4
  %v0_e228 = load i32, i32* %r5.global-to-local, align 4
  %v1_e228 = add i32 %v0_e228, 20
  %v2_e228 = inttoptr i32 %v1_e228 to i32*
  %v3_e228 = load i32, i32* %v2_e228, align 4
  store i32 %v3_e228, i32* @r4, align 4
  %v2_e22c = load i32, i32* @global_var_1bbe8.126, align 4
  %v1_e230 = add i32 %v0_e228, 16
  %v2_e230 = inttoptr i32 %v1_e230 to i32*
  %v3_e230 = load i32, i32* %v2_e230, align 4
  store i32 %v3_e230, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e238 = add i32 %v0_e228, 8
  %v3_e238 = inttoptr i32 %v2_e238 to i32*
  store i32 %v2_e22c, i32* %v3_e238, align 4
  %v0_e23c = load i32, i32* %r3.global-to-local, align 4
  %v1_e23c = load i32, i32* %r5.global-to-local, align 4
  %v2_e23c = add i32 %v1_e23c, 12
  %v3_e23c = inttoptr i32 %v2_e23c to i32*
  store i32 %v0_e23c, i32* %v3_e23c, align 4
  %v0_e244 = load i32, i32* %r5.global-to-local, align 4
  %v1_e244 = add i32 %v0_e244, 4
  %v2_e244 = inttoptr i32 %v1_e244 to i32*
  %v3_e244 = load i32, i32* %v2_e244, align 4
  %v0_e248 = load i32, i32* %r3.global-to-local, align 4
  %v2_e248 = mul i32 %v0_e248, 2
  store i32 %v2_e248, i32* %r3.global-to-local, align 4
  store i32 %v2_e248, i32* %stack_var_-32, align 4
  %v3_e268 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_e268 = call i32 @function_113ac(i32 %v3_e244, %sockaddr* %v3_e268, i32 16)
  br label %dec_label_pc_e26c

dec_label_pc_e26c:                                ; preds = %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge, %dec_label_pc_e1f8
  %v14_e270 = phi i32 [ %v14_e270.pre, %dec_label_pc_e1a4.dec_label_pc_e26c_crit_edge ], [ %v4_e268, %dec_label_pc_e1f8 ]
  %v2_e270 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e270, i32* @r4, align 4
  ret i32 %v14_e270

; uselistorder directives
  uselistorder i32 %v2_e248, { 1, 0 }
  uselistorder i32 %v3_e1dc, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_1049c, { 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e26c, { 1, 0 }
}

define i32 @function_e278(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e278:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e278 = load i32, i32* @r4, align 4
  %v6_e278 = load i32, i32* @r5, align 4
  %v9_e278 = load i32, i32* @r6, align 4
  %v12_e278 = load i32, i32* @r7, align 4
  %v15_e278 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1bbb4.128 to i32), i32* @r8, align 4
  %v2_e280 = load i32, i32* @global_var_1bbb4.128, align 4
  store i32 ptrtoint (i32* @global_var_1bbe0.130 to i32), i32* %sb.global-to-local, align 4
  %v3_e28c = mul i32 %v2_e280, 16
  store i32 %v3_e28c, i32* %r3.global-to-local, align 4
  %v3_e294 = urem i32 %arg3, 65536
  store i32 %v3_e294, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e2a0 = load i32, i32* @global_var_1bbe0.130, align 4
  %v1_e2a4 = add i32 %v3_e28c, 16
  store i32 %v1_e2a4, i32* %r1.global-to-local, align 4
  store i32 %v3_e294, i32* %stack_var_-44, align 4
  %v8_e2ac = call i32 @function_11984(i32 %v2_e2a0, i32 %v1_e2a4, i32 %v3_e294, i32 %v3_e28c)
  store i32 %v8_e2ac, i32* %sl.global-to-local, align 4
  %v0_e2b4 = load i32, i32* @r5, align 4
  %v1_e2b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_e2b8 = inttoptr i32 %v1_e2b8 to i32*
  store i32 %v8_e2ac, i32* %v2_e2b8, align 4
  %v2_e2bc = load i32, i32* @global_var_1bbb4.128, align 4
  store i32 %v2_e2bc, i32* %fp.global-to-local, align 4
  %v1_e2c0 = inttoptr i32 %v0_e2b4 to i8*
  %v2_e2c0 = call i32 @function_103fc(i8* %v1_e2c0)
  %sext = mul i32 %v2_e2c0, 16777216
  %v1_e2c4 = sdiv i32 %sext, 16777216
  %v2_e2c4 = add nsw i32 %v1_e2c4, 1
  store i32 %v2_e2c4, i32* @r4, align 4
  store i32 %v1_e2c4, i32* @r7, align 4
  %v1_e2d0 = call i32 @function_116e8(i32 %v2_e2c4)
  %v0_e2d4 = load i32, i32* @r5, align 4
  store i32 %v0_e2d4, i32* %r1.global-to-local, align 4
  %v0_e2d8 = load i32, i32* @r4, align 4
  store i32 %v0_e2d8, i32* %r2.global-to-local, align 4
  store i32 %v1_e2d0, i32* @r6, align 4
  %v3_e2e0 = call i32 @function_10478(i32 %v1_e2d0, i32 %v0_e2d4, i32 %v0_e2d8)
  %v0_e2e4 = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_e2e4, 1
  %extract.t8 = trunc i32 %v0_e2e4 to i8
  br i1 %tmp23, label %dec_label_pc_e310, label %dec_label_pc_e2ec

dec_label_pc_e2ec:                                ; preds = %dec_label_pc_e278
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge, %dec_label_pc_e2ec
  %v1_e2fc = phi i32 [ %v1_e2fc.pre, %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge ], [ -70, %dec_label_pc_e2ec ]
  %v2_e300 = phi i32 [ %v1_e304, %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge ], [ 0, %dec_label_pc_e2ec ]
  %v1_e2f4 = load i32, i32* @r6, align 4
  %v2_e2f4 = add i32 %v1_e2f4, %v2_e300
  %v3_e2f4 = inttoptr i32 %v2_e2f4 to i8*
  %v4_e2f4 = load i8, i8* %v3_e2f4, align 1
  %v6_e2f4 = zext i8 %v4_e2f4 to i32
  %v1_e2f8 = sub i32 -1, %v1_e2fc
  %v2_e2fc = xor i32 %v6_e2f4, %v1_e2f8
  store i32 %v2_e2fc, i32* %r3.global-to-local, align 4
  %v1_e300 = trunc i32 %v2_e2fc to i8
  store i8 %v1_e300, i8* %v3_e2f4, align 1
  %v0_e304 = load i32, i32* %r2.global-to-local, align 4
  %v1_e304 = add i32 %v0_e304, 1
  store i32 %v1_e304, i32* %r2.global-to-local, align 4
  %v0_e308 = load i32, i32* @r7, align 4
  %v9_e308 = icmp eq i32 %v0_e308, %v1_e304
  br i1 %v9_e308, label %dec_label_pc_e310.loopexit, label %dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge

dec_label_pc_e2f4.dec_label_pc_e2f4_crit_edge:    ; preds = %dec_label_pc_e2f4
  %v1_e2fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e310.loopexit:                       ; preds = %dec_label_pc_e2f4
  %extract.t = trunc i32 %v1_e304 to i8
  br label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e310.loopexit, %dec_label_pc_e278
  %v0_e320.off0 = phi i8 [ %extract.t, %dec_label_pc_e310.loopexit ], [ %extract.t8, %dec_label_pc_e278 ]
  %v2_e310 = load i32, i32* @global_var_1bbb4.128, align 4
  %v2_e314 = load i32, i32* @global_var_1bbe0.130, align 4
  store i32 %v2_e314, i32* %r2.global-to-local, align 4
  %v3_e318 = mul i32 %v2_e310, 16
  %v2_e31c = add i32 %v2_e314, %v3_e318
  store i32 %v2_e31c, i32* %r3.global-to-local, align 4
  %v3_e320 = add i32 %v2_e31c, 12
  %v4_e320 = inttoptr i32 %v3_e320 to i8*
  store i8 %v0_e320.off0, i8* %v4_e320, align 1
  %v0_e324 = load i32, i32* @r6, align 4
  %v1_e324 = load i32, i32* %sl.global-to-local, align 4
  %v2_e324 = load i32, i32* %fp.global-to-local, align 4
  %v5_e324 = mul i32 %v2_e324, 16
  %v6_e324 = add i32 %v5_e324, %v1_e324
  %v7_e324 = inttoptr i32 %v6_e324 to i32*
  store i32 %v0_e324, i32* %v7_e324, align 4
  %v2_e32c = load i32, i32* @global_var_1bbb4.128, align 4
  store i32 %v2_e32c, i32* @r7, align 4
  %v2_e330 = load i32, i32* @global_var_1bbe0.130, align 4
  store i32 %v2_e330, i32* %sl.global-to-local, align 4
  %v1_e334 = inttoptr i32 %arg2 to i8*
  %v2_e334 = call i32 @function_103fc(i8* %v1_e334)
  %sext1 = mul i32 %v2_e334, 16777216
  %v1_e338 = sdiv i32 %sext1, 16777216
  %v2_e338 = add nsw i32 %v1_e338, 1
  store i32 %v2_e338, i32* @r4, align 4
  store i32 %v1_e338, i32* @r5, align 4
  %v1_e344 = call i32 @function_116e8(i32 %v2_e338)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e34c = load i32, i32* @r4, align 4
  store i32 %v0_e34c, i32* %r2.global-to-local, align 4
  store i32 %v1_e344, i32* %r6.global-to-local, align 4
  %v3_e354 = call i32 @function_10478(i32 %v1_e344, i32 %arg2, i32 %v0_e34c)
  %v0_e358 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_e358, 1
  %extract.t10 = trunc i32 %v0_e358 to i8
  br i1 %tmp24, label %dec_label_pc_e384, label %dec_label_pc_e360

dec_label_pc_e360:                                ; preds = %dec_label_pc_e310
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e368.dec_label_pc_e368_crit_edge, %dec_label_pc_e360
  %v1_e370 = phi i32 [ %v1_e370.pre, %dec_label_pc_e368.dec_label_pc_e368_crit_edge ], [ -70, %dec_label_pc_e360 ]
  %v2_e374 = phi i32 [ %v1_e378, %dec_label_pc_e368.dec_label_pc_e368_crit_edge ], [ 0, %dec_label_pc_e360 ]
  %v1_e368 = load i32, i32* %r6.global-to-local, align 4
  %v2_e368 = add i32 %v1_e368, %v2_e374
  %v3_e368 = inttoptr i32 %v2_e368 to i8*
  %v4_e368 = load i8, i8* %v3_e368, align 1
  %v6_e368 = zext i8 %v4_e368 to i32
  %v1_e36c = sub i32 -1, %v1_e370
  %v2_e370 = xor i32 %v6_e368, %v1_e36c
  store i32 %v2_e370, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v2_e370 to i8
  store i8 %v1_e374, i8* %v3_e368, align 1
  %v0_e378 = load i32, i32* %r2.global-to-local, align 4
  %v1_e378 = add i32 %v0_e378, 1
  store i32 %v1_e378, i32* %r2.global-to-local, align 4
  %v0_e37c = load i32, i32* @r5, align 4
  %v9_e37c = icmp eq i32 %v0_e37c, %v1_e378
  br i1 %v9_e37c, label %dec_label_pc_e384.loopexit, label %dec_label_pc_e368.dec_label_pc_e368_crit_edge

dec_label_pc_e368.dec_label_pc_e368_crit_edge:    ; preds = %dec_label_pc_e368
  %v1_e370.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e368

dec_label_pc_e384.loopexit:                       ; preds = %dec_label_pc_e368
  %extract.t9 = trunc i32 %v1_e378 to i8
  br label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %dec_label_pc_e384.loopexit, %dec_label_pc_e310
  %v0_e394.off0 = phi i8 [ %extract.t9, %dec_label_pc_e384.loopexit ], [ %extract.t10, %dec_label_pc_e310 ]
  %v2_e384 = load i32, i32* @global_var_1bbb4.128, align 4
  %v2_e388 = load i32, i32* @global_var_1bbe0.130, align 4
  %v3_e38c = mul i32 %v2_e384, 16
  %v2_e390 = or i32 %v3_e38c, 13
  %v3_e394 = add i32 %v2_e390, %v2_e388
  %v4_e394 = inttoptr i32 %v3_e394 to i8*
  store i8 %v0_e394.off0, i8* %v4_e394, align 1
  %v2_e39c = load i32, i32* @global_var_1bbb4.128, align 4
  store i32 %v2_e39c, i32* %lr.global-to-local, align 4
  %v4_e3a0 = load i8, i8* @global_var_1bbe5.133, align 1
  %v5_e3a0 = zext i8 %v4_e3a0 to i32
  %v3_e3a4 = load i8, i8* bitcast (i8** @global_var_1bbe4.132 to i8*), align 4
  %v4_e3a4 = zext i8 %v3_e3a4 to i32
  %v2_e3a8 = load i32, i32* @global_var_1bbe0.130, align 4
  %v4_e3ac = mul nuw nsw i32 %v5_e3a0, 256
  %v5_e3ac = or i32 %v4_e3a4, %v4_e3ac
  store i32 %v5_e3ac, i32* %r2.global-to-local, align 4
  %v3_e3b0 = mul i32 %v2_e39c, 16
  %v2_e3b4 = add i32 %v2_e3a8, %v3_e3b0
  store i32 %v2_e3b4, i32* %r1.global-to-local, align 4
  %v3_e3bc = add i32 %v2_e3b4, 9
  %v4_e3bc = inttoptr i32 %v3_e3bc to i8*
  store i8 %v4_e3a0, i8* %v4_e3bc, align 1
  %v0_e3c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3c0 = trunc i32 %v0_e3c0 to i8
  %v2_e3c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e3c0 = add i32 %v2_e3c0, 8
  %v4_e3c0 = inttoptr i32 %v3_e3c0 to i8*
  store i8 %v1_e3c0, i8* %v4_e3c0, align 1
  %v4_e3c4 = load i8, i8* @global_var_1bbe5.133, align 1
  %v5_e3c4 = zext i8 %v4_e3c4 to i32
  %v3_e3c8 = load i8, i8* bitcast (i8** @global_var_1bbe4.132 to i8*), align 4
  %v4_e3c8 = zext i8 %v3_e3c8 to i32
  %v4_e3cc = mul nuw nsw i32 %v5_e3c4, 256
  %v5_e3cc = or i32 %v4_e3c8, %v4_e3cc
  %v2_e3d0 = load i32, i32* %stack_var_-44, align 4
  %v2_e3d4 = add i32 %v5_e3cc, %v2_e3d0
  store i32 %v2_e3d4, i32* %r3.global-to-local, align 4
  %v3_e3d811 = udiv i32 %v2_e3d4, 256
  %v1_e3dc = trunc i32 %v3_e3d811 to i8
  %v2_e3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e3dc = add i32 %v2_e3dc, 11
  %v4_e3dc = inttoptr i32 %v3_e3dc to i8*
  store i8 %v1_e3dc, i8* %v4_e3dc, align 1
  %v0_e3e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3e0 = trunc i32 %v0_e3e0 to i8
  %v2_e3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e3e0 = add i32 %v2_e3e0, 10
  %v4_e3e0 = inttoptr i32 %v3_e3e0 to i8*
  store i8 %v1_e3e0, i8* %v4_e3e0, align 1
  %v4_e3e4 = load i8, i8* @global_var_1bbe5.133, align 1
  %v5_e3e4 = zext i8 %v4_e3e4 to i32
  %v3_e3e8 = load i8, i8* bitcast (i8** @global_var_1bbe4.132 to i8*), align 4
  %v4_e3e8 = zext i8 %v3_e3e8 to i32
  %v4_e3ec = mul nuw nsw i32 %v5_e3e4, 256
  %v5_e3ec = or i32 %v4_e3e8, %v4_e3ec
  %v2_e3f0 = load i32, i32* %stack_var_-44, align 4
  %v2_e3f4 = add i32 %v5_e3ec, %v2_e3f0
  store i32 %v2_e3f4, i32* %r2.global-to-local, align 4
  %v0_e3f8 = load i32, i32* @r7, align 4
  %v3_e3f8 = mul i32 %v0_e3f8, 16
  %v1_e3fc = load i32, i32* %sl.global-to-local, align 4
  %v2_e3fc = add i32 %v1_e3fc, %v3_e3f8
  store i32 %v2_e3fc, i32* %r3.global-to-local, align 4
  %v0_e400 = load i32, i32* %lr.global-to-local, align 4
  %v1_e400 = add i32 %v0_e400, 1
  store i32 %v1_e400, i32* @lr, align 4
  %v3_e404 = sdiv i32 %v2_e3f4, 256
  store i32 %v3_e404, i32* %r1.global-to-local, align 4
  %v0_e408 = load i32, i32* %r6.global-to-local, align 4
  %v2_e408 = add i32 %v2_e3fc, 4
  %v3_e408 = inttoptr i32 %v2_e408 to i32*
  store i32 %v0_e408, i32* %v3_e408, align 4
  %v0_e40c = load i32, i32* @lr, align 4
  %v1_e40c = load i32, i32* @r8, align 4
  %v2_e40c = inttoptr i32 %v1_e40c to i32*
  store i32 %v0_e40c, i32* %v2_e40c, align 4
  %v0_e410 = load i32, i32* %r1.global-to-local, align 4
  %v1_e410 = trunc i32 %v0_e410 to i8
  store i8 %v1_e410, i8* @global_var_1bbe5.133, align 1
  %v0_e414 = load i32, i32* %r2.global-to-local, align 4
  %v1_e414 = trunc i32 %v0_e414 to i8
  store i8 %v1_e414, i8* bitcast (i8** @global_var_1bbe4.132 to i8*), align 4
  store i32 %v3_e278, i32* @r4, align 4
  store i32 %v6_e278, i32* @r5, align 4
  store i32 %v9_e278, i32* @r6, align 4
  store i32 %v12_e278, i32* @r7, align 4
  store i32 %v15_e278, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1bbe4.132 to i32)

; uselistorder directives
  uselistorder i32 %v1_e378, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e344, { 1, 0 }
  uselistorder i32 %v1_e304, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e2d0, { 1, 0 }
  uselistorder i32 %v3_e294, { 1, 2, 0 }
  uselistorder i32 %v3_e28c, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 0 }
  uselistorder i32 -70, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_103fc, { 5, 6, 0, 1, 2, 3, 4, 29, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11984, { 9, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_e42c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e42c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp233 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i32 @__decompiler_undefined_function_0()
  %tmp241 = call i8* @__decompiler_undefined_function_2()
  %tmp242 = call i32 @__decompiler_undefined_function_0()
  %tmp243 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e42c = load i32, i32* @r4, align 4
  store i32 %v3_e42c, i32* %stack_var_-36, align 4
  %v6_e42c = load i32, i32* @r5, align 4
  %v18_e42c = load i32, i32* @sb, align 4
  %v21_e42c = load i32, i32* @sl, align 4
  %v0_e434 = call i32 @function_10ca8()
  store i32 %v0_e434, i32* %r0.global-to-local, align 4
  %v7_e438 = icmp eq i32 %v0_e434, -1
  %. = zext i1 %v7_e438 to i32
  %tmp274 = icmp slt i32 %v0_e434, 1
  %storemerge230 = select i1 %tmp274, i32 %., i32 1
  store i32 %storemerge230, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1bc50.124 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e454 = icmp eq i32 %storemerge230, 0
  store i1 %v2_e454, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e434, i32* @global_var_1bc50.124, align 4
  br i1 %v2_e454, label %dec_label_pc_e468, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %dec_label_pc_e42c
  store i32 %v3_e42c, i32* %r4.global-to-local, align 4
  store i32 %v6_e42c, i32* %r5.global-to-local, align 4
  store i32 %v18_e42c, i32* @sb, align 4
  store i32 %v21_e42c, i32* @sl, align 4
  ret i32 %v0_e434

dec_label_pc_e468:                                ; preds = %dec_label_pc_e42c
  %v0_e468 = call i32 @function_106b4()
  store i32 %v0_e468, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc30.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e468, i32* @global_var_1bc30.48, align 4
  %v1_e474 = call i32 @function_db10(i32 %v0_e468)
  %v0_e478 = load i32, i32* @r4, align 4
  store i32 %v0_e478, i32* %r0.global-to-local, align 4
  %v1_e47c = inttoptr i32 %v0_e478 to i32*
  %v2_e47c = call i32 @function_10f4c(i32* %v1_e47c)
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e47c, i32* @global_var_1bbe8.126, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e490 = call i32 @function_1183c(i32 256, i32 288)
  store i32 %v2_e490, i32* %lr.global-to-local, align 4
  %v0_e49c = load i32, i32* @r4, align 4
  store i32 %v0_e49c, i32* %stack_var_-52, align 4
  store i32 %v2_e490, i32* @global_var_1bc48.138, align 4
  store i32 %v0_e49c, i32* %r3.global-to-local, align 4
  store i32 %v0_e49c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_e49c, i32* %ip.global-to-local, align 4
  %v1_e4b4 = add i32 %v2_e490, 4
  store i32 %v1_e4b4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e4b8

dec_label_pc_e4b8:                                ; preds = %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge, %dec_label_pc_e468
  %v0_e4d0 = phi i32 [ %v0_e4d0.pre, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v0_e49c, %dec_label_pc_e468 ]
  %v0_e4c0 = phi i32 [ %v0_e4d8, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v0_e49c, %dec_label_pc_e468 ]
  %v1_e4c8 = phi i32 [ %v1_e4c8.pre, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v2_e490, %dec_label_pc_e468 ]
  %v3_e4b8 = mul i32 %v0_e4c0, 256
  store i32 %v3_e4b8, i32* %r2.global-to-local, align 4
  %v1_e4c0 = add i32 %v0_e4c0, 1
  store i32 %v1_e4c0, i32* %ip.global-to-local, align 4
  %v2_e4c4 = mul i32 %v0_e4c0, 288
  %v2_e4c8 = add i32 %v1_e4c8, 12
  %v2_e4d0 = add i32 %v2_e4c8, %v2_e4c4
  %v3_e4d0 = inttoptr i32 %v2_e4d0 to i32*
  store i32 %v0_e4d0, i32* %v3_e4d0, align 4
  %v0_e4d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_e4d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4d4 = inttoptr i32 %v1_e4d4 to i32*
  store i32 %v0_e4d4, i32* %v2_e4d4, align 4
  %v3_e4d4 = load i32, i32* %r1.global-to-local, align 4
  %v4_e4d4 = add i32 %v3_e4d4, 288
  store i32 %v4_e4d4, i32* %r1.global-to-local, align 4
  %v0_e4d8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e4d8, i32* %r3.global-to-local, align 4
  %v7_e4dc = icmp sgt i32 %v1_e4c0, 255
  br i1 %v7_e4dc, label %dec_label_pc_e4e0, label %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge

dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge:    ; preds = %dec_label_pc_e4b8
  %v1_e4c8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e4d0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e4b8

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e4b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_e4d8, i32* %stack_var_-52, align 4
  %v3_e4f0 = call i32 @function_11550(i32 2, i32 3, i32 6)
  store i32 %v3_e4f0, i32* %r0.global-to-local, align 4
  %v2_e4f8 = icmp eq i32 %v3_e4f0, -1
  store i1 %v2_e4f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e4f8 = icmp eq i32 %v3_e4f0, -1
  store i1 %v7_e4f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e4f0, i32* @r4, align 4
  store i32 %v3_e4f0, i32* @global_var_1bc4c.140, align 4
  br i1 %v7_e4f8, label %dec_label_pc_ef20, label %dec_label_pc_e508

dec_label_pc_e508:                                ; preds = %dec_label_pc_e4e0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e50c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e50c, i32* @r2, align 4
  %v2_e510 = call i32 @function_10bb8(i32 %v3_e4f0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e518 = or i32 %v2_e510, 2048
  store i32 %v1_e518, i32* @r2, align 4
  %v0_e51c = load i32, i32* @r4, align 4
  store i32 %v0_e51c, i32* %r0.global-to-local, align 4
  %v2_e520 = call i32 @function_10bb8(i32 %v0_e51c, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_e52c = load i32, i32* @global_var_1bc4c.140, align 4
  store i32 %v2_e52c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e534 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_e534, i32* %r1.global-to-local, align 4
  %v2_e538 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e538, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_e548 = call i32 @function_11520(i32 %v2_e52c, i32 %v0_e534, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_e548, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e54c = icmp eq i32 %v6_e548, 0
  store i1 %v2_e54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e54c, label %dec_label_pc_e554, label %dec_label_pc_ef14

dec_label_pc_e554:                                ; preds = %dec_label_pc_e508, %dec_label_pc_e554
  %v0_e554 = call i32 @function_dab8()
  %v3_e558 = mul i32 %v0_e554, 65536
  store i32 %v3_e558, i32* %r0.global-to-local, align 4
  %v1_e564 = mul i32 %v0_e554, 256
  %v3_e568 = and i32 %v1_e564, 65280
  %tmp277 = udiv i32 %v0_e554, 256
  %v4_e56c = urem i32 %tmp277, 256
  %v5_e56c = or i32 %v4_e56c, %v3_e568
  store i32 %v5_e56c, i32* %r3.global-to-local, align 4
  %v2_e570 = icmp ugt i32 %v5_e56c, 1023
  store i1 %v2_e570, i1* %cpsr_c.global-to-local, align 1
  %v7_e570 = icmp eq i32 %v5_e56c, 1024
  store i1 %v7_e570, i1* %cpsr_z.global-to-local, align 1
  %v3_e574 = icmp ult i32 %v5_e56c, 1022
  br i1 %v3_e574, label %dec_label_pc_e554, label %dec_label_pc_e578

dec_label_pc_e578:                                ; preds = %dec_label_pc_e554
  %v5_e560.le = trunc i32 %v0_e554 to i8
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1bbb8.142 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1bbbb.143 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1bbba.144 to i8*), align 4
  %v0_e5ac = call i32 @function_dab8()
  %v1_e5ac = trunc i32 %v0_e5ac to i8
  store i32 %v0_e5ac, i32* %r0.global-to-local, align 4
  %v4_e5b4 = sext i8 %v5_e560.le to i32
  %v3_e5b8 = load i8, i8* @global_var_1bbd8.147, align 1
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %lr.global-to-local, align 4
  %v3_e5c0229 = udiv i32 %v4_e5b4, 256
  store i8 64, i8* bitcast (i32* @global_var_1bbc0.148 to i8*), align 4
  %v2_e5cc = and i32 %v0_e5ac, 128
  %v3_e5cc = icmp ne i32 %v2_e5cc, 0
  store i1 %v3_e5cc, i1* %cpsr_c.global-to-local, align 1
  %v4_e5cc228 = udiv i32 %v0_e5ac, 256
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_e5b8, 16
  %v1_e5d4 = zext i8 %tmp to i32
  %v1_e5d8 = trunc i32 %v4_e5cc228 to i8
  store i8 %v1_e5d8, i8* bitcast (i32* @global_var_1bbbd.149 to i8*), align 4
  %v1_e5dc = or i32 %v1_e5d4, 80
  store i32 %v1_e5dc, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_e5e8 = trunc i32 %v1_e5dc to i8
  store i8 %v1_e5e8, i8* @global_var_1bbd8.147, align 1
  %v1_e5ec = trunc i32 %v3_e5c0229 to i8
  store i8 %v1_e5ec, i8* bitcast (i32* @global_var_1bbcd.150 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1bbcf.151 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1bbc1.152 to i8*), align 4
  store i32 %v4_e5b4, i32* %ip.global-to-local, align 4
  store i8 %v1_e5ac, i8* bitcast (i32* @global_var_1bbbc.153 to i8*), align 4
  store i8 %v5_e560.le, i8* bitcast (i32* @global_var_1bbcc.146 to i8*), align 4
  %v0_e604 = load i32, i32* @r5, align 4
  %v1_e604 = trunc i32 %v0_e604 to i8
  store i8 %v1_e604, i8* bitcast (i32* @global_var_1bbce.154 to i8*), align 4
  %v0_e608 = call i32 @function_dab8()
  %v1_e608 = trunc i32 %v0_e608 to i8
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* @lr, align 4
  %v3_e610 = load i8, i8* @global_var_1bbd9.155, align 1
  %v4_e610 = zext i8 %v3_e610 to i32
  %v2_e614 = and i32 %v0_e608, 128
  %v3_e614 = icmp ne i32 %v2_e614, 0
  store i1 %v3_e614, i1* %cpsr_c.global-to-local, align 1
  %v4_e614 = sdiv i32 %v0_e608, 256
  store i32 %v4_e614, i32* %ip.global-to-local, align 4
  %v1_e618 = or i32 %v4_e610, 2
  store i32 %v1_e618, i32* %r3.global-to-local, align 4
  store i32 %v0_e608, i32* @r4, align 4
  %v1_e620 = trunc i32 %v4_e614 to i8
  store i8 %v1_e620, i8* bitcast (i32* @global_var_1bbdb.156 to i8*), align 4
  %v1_e624 = trunc i32 %v1_e618 to i8
  store i8 %v1_e624, i8* @global_var_1bbd9.155, align 1
  store i8 %v1_e608, i8* bitcast (i32* @global_var_1bbda.157 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e638 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1335c.163 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e648 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_1335c.163 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r1.global-to-local, align 4
  %v5_e658 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13360.165 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e668 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13360.165 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133d8.167 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e678 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133d8.167 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13368.169 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e688 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13368.169 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13370.171 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e698 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13370.171 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1335c.163 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e6a8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_1335c.163 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e6b8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e6c8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13384.177 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_e6d8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13384.177 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1338c.179 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e6e8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([7 x i8]* @global_var_1338c.179 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13394.181 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e6f8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13394.181 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133a0.183 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e708 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133a0.183 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133ac.185 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e718 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133ac.185 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133b4.187 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e728 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133b4.187 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133c0.189 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e738 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133c0.189 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_133cc.191 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_e748 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([8 x i8]* @global_var_133cc.191 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133d4.193 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e758 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133d4.193 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_133dc.195 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e768 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([7 x i8]* @global_var_133dc.195 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_133e4.197 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e778 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([6 x i8]* @global_var_133e4.197 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_133ec.199 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e788 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([5 x i8]* @global_var_133ec.199 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_133f4.201 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e798 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([8 x i8]* @global_var_133f4.201 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133fc.203 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e7a8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_133fc.203 to i32), i32 15)
  %v0_e7ac = load i32, i32* @r6, align 4
  store i32 %v0_e7ac, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13404.205 to i32), i32* %r1.global-to-local, align 4
  %v5_e7b8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([6 x i8]* @global_var_13404.205 to i32), i32 %v0_e7ac)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e7c8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13414.209 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_e7d8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([5 x i8]* @global_var_13414.209 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1341c.211 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e7e8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([8 x i8]* @global_var_1341c.211 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13424.213 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e7f8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13424.213 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1342c.215 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e808 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_1342c.215 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13434.217 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_e818 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint ([9 x i8]* @global_var_13434.217 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13440.219 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e828 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13440.219 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1344c.221 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e838 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_1344c.221 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13458.223 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e848 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), i32 ptrtoint (i32* @global_var_13458.223 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_13468.225 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13474.227 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_e858 = call i32 @function_e278(i32 ptrtoint ([11 x i8]* @global_var_13468.225 to i32), i32 ptrtoint (i32* @global_var_13474.227 to i32), i32 2)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13414.209 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e868 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint ([5 x i8]* @global_var_13414.209 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13368.169 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e878 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13368.169 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e888 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e898 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13384.177 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e8a8 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13384.177 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133a0.183 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e8b8 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_133a0.183 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13480.229 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e8c8 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13480.229 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13434.217 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_e8d8 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint ([9 x i8]* @global_var_13434.217 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13488.231 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e8e8 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13488.231 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_13490.233 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e8f8 = call i32 @function_e278(i32 ptrtoint ([14 x i8]* @global_var_13490.233 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_134a0.235 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e908 = call i32 @function_e278(i32 ptrtoint ([14 x i8]* @global_var_134a0.235 to i32), i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_134b0.237 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_134b0.237 to i32), i32* %r1.global-to-local, align 4
  %v5_e918 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_134b0.237 to i32), i32 ptrtoint ([6 x i8]* @global_var_134b0.237 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_134b8.239 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e928 = call i32 @function_e278(i32 ptrtoint ([4 x i8]* @global_var_134b8.239 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r1.global-to-local, align 4
  %v5_e938 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 15)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13458.223 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e948 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_13458.223 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_134bc.241 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e958 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint ([9 x i8]* @global_var_134bc.241 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134c8.243 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e968 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_134c8.243 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134d4.245 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e978 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_134d4.245 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134e0.247 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e988 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_134e0.247 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134e8.249 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e998 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), i32 ptrtoint (i32* @global_var_134e8.249 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_134f4.251 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_134fc.253 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e9a8 = call i32 @function_e278(i32 ptrtoint (i32* @global_var_134f4.251 to i32), i32 ptrtoint ([7 x i8]* @global_var_134fc.253 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_133cc.191 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e9b8 = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_133cc.191 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32* %r1.global-to-local, align 4
  %v5_e9c8 = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e9d8 = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13384.177 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e9e8 = call i32 @function_e278(i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), i32 ptrtoint (i32* @global_var_13384.177 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32* %r1.global-to-local, align 4
  %v5_e9f8 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13384.177 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_ea08 = call i32 @function_e278(i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), i32 ptrtoint (i32* @global_var_13384.177 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13368.169 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_ea18 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32 ptrtoint (i32* @global_var_13368.169 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32* %r1.global-to-local, align 4
  %v5_ea28 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_ea38 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32 ptrtoint (i32* @global_var_1337c.175 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13384.177 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ea48 = call i32 @function_e278(i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), i32 ptrtoint (i32* @global_var_13384.177 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_1351c.261 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ea58 = call i32 @function_e278(i32 ptrtoint ([7 x i8]* @global_var_1351c.261 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13374.173 to i32), i32* %r1.global-to-local, align 4
  %v3_ea68 = call i32 @function_e278(i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 ptrtoint (i32* @global_var_13374.173 to i32), i32 2)
  store i32 ptrtoint ([4 x i8]* @global_var_13524.263 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_ea78 = call i32 @function_e278(i32 ptrtoint ([4 x i8]* @global_var_13524.263 to i32), i32 ptrtoint (i32* @global_var_134dc.161 to i32), i32 10)
  store i32 ptrtoint ([7 x i8]* @global_var_13528.265 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13528.265 to i32), i32* %r1.global-to-local, align 4
  %v5_ea88 = call i32 @function_e278(i32 ptrtoint ([7 x i8]* @global_var_13528.265 to i32), i32 ptrtoint ([7 x i8]* @global_var_13528.265 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_13530.267 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13530.267 to i32), i32* %r1.global-to-local, align 4
  %v5_ea98 = call i32 @function_e278(i32 ptrtoint ([9 x i8]* @global_var_13530.267 to i32), i32 ptrtoint ([9 x i8]* @global_var_13530.267 to i32), i32 1)
  %v2_eaa0 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_eaa0, i32* %r0.global-to-local, align 4
  %v2_eaa4 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_eaa4, i32* %r1.global-to-local, align 4
  %tmp278 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_eab0

dec_label_pc_eab0:                                ; preds = %dec_label_pc_f108, %dec_label_pc_e578
  %stack_var_-1872.0 = phi i32 [ %tmp240, %dec_label_pc_e578 ], [ %stack_var_-1872.2, %dec_label_pc_f108 ]
  %stack_var_-1884.0 = phi i8* [ %tmp278, %dec_label_pc_e578 ], [ %stack_var_-1884.1, %dec_label_pc_f108 ]
  %v0_ede0 = phi i32 [ %v2_eaa0, %dec_label_pc_e578 ], [ %stack_var_-1880.1, %dec_label_pc_f108 ]
  %stack_var_-1876.0 = phi i8 [ %v5_e560.le, %dec_label_pc_e578 ], [ %stack_var_-1876.1, %dec_label_pc_f108 ]
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_eab8 = load i32, i32* @global_var_1bbe8.126, align 4
  store i32 %v2_eab8, i32* @r8, align 4
  %v3_eabc = icmp uge i32 %stack_var_-1872.0, %v2_eab8
  store i1 %v3_eabc, i1* %cpsr_c.global-to-local, align 1
  %v9_eabc = icmp eq i32 %stack_var_-1872.0, %v2_eab8
  store i1 %v9_eabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eabc, label %dec_label_pc_ed68, label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_eab0
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_ed38 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_ead0

dec_label_pc_ead0:                                ; preds = %.thread48.dec_label_pc_ead0_crit_edge, %dec_label_pc_eac4
  %v0_ead0 = phi i32 [ %v0_ead0.pre, %.thread48.dec_label_pc_ead0_crit_edge ], [ 0, %dec_label_pc_eac4 ]
  store i32 %v0_ead0, i32* %stack_var_-92, align 4
  store i32 %v0_ead0, i32* %stack_var_-84, align 4
  %v0_eae0 = call i32 @function_dab8()
  %v1_eae0 = trunc i32 %v0_eae0 to i8
  store i32 %v0_eae0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc30.48 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %r1.global-to-local, align 4
  %v2_eaec = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_eaec, i32* %r2.global-to-local, align 4
  %v2_eaf0 = and i32 %v0_eae0, 128
  %v3_eaf0 = icmp ne i32 %v2_eaf0, 0
  store i1 %v3_eaf0, i1* %cpsr_c.global-to-local, align 1
  %v4_eaf0 = sdiv i32 %v0_eae0, 256
  store i32 %v4_eaf0, i32* %r3.global-to-local, align 4
  %v1_eaf4 = trunc i32 %v4_eaf0 to i8
  store i8 %v1_eaf4, i8* bitcast (i32* @global_var_1bbbd.149 to i8*), align 4
  store i32 %v2_eaec, i32* @global_var_1bbc4.268, align 4
  store i8 %v1_eae0, i8* bitcast (i32* @global_var_1bbbc.153 to i8*), align 4
  br label %dec_label_pc_eb00

dec_label_pc_eb00:                                ; preds = %dec_label_pc_ebd4, %dec_label_pc_eb30, %dec_label_pc_ec08, %dec_label_pc_ebfc, %dec_label_pc_ebf0, %dec_label_pc_ebe4, %.thread33, %bb297, %bb296, %bb295, %bb294, %bb293, %dec_label_pc_ebcc, %dec_label_pc_ebc4, %bb289, %dec_label_pc_eb94, %dec_label_pc_eb70, %bb282, %dec_label_pc_eb40, %bb281, %dec_label_pc_eb28, %bb280, %bb299, %dec_label_pc_ead0
  %v0_eb00 = call i32 @function_dab8()
  store i32 %v0_eb00, i32* %r0.global-to-local, align 4
  %v1_eb04 = urem i32 %v0_eb00, 256
  store i32 %v1_eb04, i32* %r1.global-to-local, align 4
  %v3_eb08 = udiv i32 %v0_eb00, 256
  store i32 %v3_eb08, i32* %r3.global-to-local, align 4
  %v3_eb0c = udiv i32 %v0_eb00, 65536
  store i32 %v3_eb0c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb10 = icmp eq i32 %v1_eb04, 0
  store i1 %v2_eb10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb10, label %bb280, label %bb279

bb279:                                            ; preds = %dec_label_pc_eb00
  %v3_eb14 = icmp ugt i32 %v1_eb04, 126
  store i1 %v3_eb14, i1* %cpsr_c.global-to-local, align 1
  %v8_eb14 = icmp eq i32 %v1_eb04, 127
  store i1 %v8_eb14, i1* %cpsr_z.global-to-local, align 1
  br label %bb280

bb280:                                            ; preds = %dec_label_pc_eb00, %bb279
  %v0_eb24 = phi i1 [ true, %dec_label_pc_eb00 ], [ %v8_eb14, %bb279 ]
  %v1_eb18 = urem i32 %v3_eb08, 256
  store i32 %v1_eb18, i32* %ip.global-to-local, align 4
  %v1_eb1c = urem i32 %v3_eb0c, 256
  store i32 %v1_eb1c, i32* %r2.global-to-local, align 4
  %v1_eb20 = and i32 %v0_eb00, 8388608
  %v2_eb20 = icmp ne i32 %v1_eb20, 0
  store i1 %v2_eb20, i1* %cpsr_c.global-to-local, align 1
  %v3_eb20 = udiv i32 %v0_eb00, 16777216
  store i32 %v3_eb20, i32* %r0.global-to-local, align 4
  br i1 %v0_eb24, label %dec_label_pc_eb00, label %dec_label_pc_eb28

dec_label_pc_eb28:                                ; preds = %bb280
  %v2_eb28 = icmp ugt i32 %v1_eb04, 2
  store i1 %v2_eb28, i1* %cpsr_c.global-to-local, align 1
  %v7_eb28 = icmp eq i32 %v1_eb04, 3
  store i1 %v7_eb28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb28, label %dec_label_pc_eb00, label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %dec_label_pc_eb28
  %v1_eb30 = add nsw i32 %v1_eb04, -15
  store i32 %v1_eb30, i32* %r3.global-to-local, align 4
  %v2_eb34 = icmp ugt i32 %v1_eb04, 55
  store i1 %v2_eb34, i1* %cpsr_c.global-to-local, align 1
  %v7_eb34 = icmp eq i32 %v1_eb04, 56
  store i1 %v7_eb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb34, label %dec_label_pc_eb00, label %bb281

bb281:                                            ; preds = %dec_label_pc_eb30
  %v3_eb38 = icmp ne i32 %v1_eb30, 0
  store i1 %v3_eb38, i1* %cpsr_c.global-to-local, align 1
  %v8_eb38 = icmp eq i32 %v1_eb30, 1
  store i1 %v8_eb38, i1* %cpsr_z.global-to-local, align 1
  %v2_eb3c = xor i1 %v3_eb38, true
  %v3_eb3c = or i1 %v8_eb38, %v2_eb3c
  br i1 %v3_eb3c, label %dec_label_pc_eb00, label %dec_label_pc_eb40

dec_label_pc_eb40:                                ; preds = %bb281
  %v2_eb40 = icmp ugt i32 %v1_eb04, 9
  store i1 %v2_eb40, i1* %cpsr_c.global-to-local, align 1
  %v7_eb40 = icmp eq i32 %v1_eb04, 10
  store i1 %v7_eb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb40, label %dec_label_pc_eb00, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb40
  %v2_eb48 = icmp ugt i32 %v1_eb04, 191
  store i1 %v2_eb48, i1* %cpsr_c.global-to-local, align 1
  %v7_eb48 = icmp eq i32 %v1_eb04, 192
  store i1 %v7_eb48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb48, label %bb282, label %dec_label_pc_eb54

bb282:                                            ; preds = %dec_label_pc_eb48
  %v3_eb4c = icmp ugt i32 %v1_eb18, 167
  store i1 %v3_eb4c, i1* %cpsr_c.global-to-local, align 1
  %v8_eb4c = icmp eq i32 %v1_eb18, 168
  store i1 %v8_eb4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb4c, label %dec_label_pc_eb00, label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %dec_label_pc_eb48, %bb282
  %v7_eb54 = icmp eq i32 %v1_eb04, 172
  %.348 = zext i1 %v7_eb54 to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_eb60 = icmp ugt i32 %v1_eb18, 14
  store i1 %v2_eb60, i1* %cpsr_c.global-to-local, align 1
  %v7_eb60 = icmp eq i32 %v1_eb18, 15
  store i1 %v7_eb60, i1* %cpsr_z.global-to-local, align 1
  %v2_eb64 = xor i1 %v2_eb60, true
  %v3_eb64 = or i1 %v7_eb60, %v2_eb64
  br i1 %v3_eb64, label %.thread11, label %bb285

.thread11:                                        ; preds = %dec_label_pc_eb54
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb78

bb285:                                            ; preds = %dec_label_pc_eb54
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb68 = icmp eq i1 %v7_eb54, false
  store i1 %v2_eb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb68, label %dec_label_pc_eb78, label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %bb285
  %v2_eb70 = icmp ugt i32 %v1_eb18, 30
  store i1 %v2_eb70, i1* %cpsr_c.global-to-local, align 1
  %v7_eb70 = icmp eq i32 %v1_eb18, 31
  store i1 %v7_eb70, i1* %cpsr_z.global-to-local, align 1
  %v2_eb74 = xor i1 %v2_eb70, true
  %v3_eb74 = or i1 %v7_eb70, %v2_eb74
  br i1 %v3_eb74, label %dec_label_pc_eb00, label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %.thread11, %dec_label_pc_eb70, %bb285
  %v7_eb78 = icmp eq i32 %v1_eb04, 100
  %.349 = zext i1 %v7_eb78 to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_eb84 = icmp ugt i32 %v1_eb18, 62
  store i1 %v2_eb84, i1* %cpsr_c.global-to-local, align 1
  %v7_eb84 = icmp eq i32 %v1_eb18, 63
  store i1 %v7_eb84, i1* %cpsr_z.global-to-local, align 1
  %v2_eb88 = xor i1 %v2_eb84, true
  %v3_eb88 = or i1 %v7_eb84, %v2_eb88
  br i1 %v3_eb88, label %.thread16, label %bb288

.thread16:                                        ; preds = %dec_label_pc_eb78
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb9c

bb288:                                            ; preds = %dec_label_pc_eb78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb8c = icmp eq i1 %v7_eb78, false
  store i1 %v2_eb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb8c, label %dec_label_pc_eb9c, label %dec_label_pc_eb94

dec_label_pc_eb94:                                ; preds = %bb288
  %v2_eb94 = icmp ugt i32 %v1_eb18, 125
  store i1 %v2_eb94, i1* %cpsr_c.global-to-local, align 1
  %v7_eb94 = icmp eq i32 %v1_eb18, 126
  store i1 %v7_eb94, i1* %cpsr_z.global-to-local, align 1
  %v2_eb98 = xor i1 %v2_eb94, true
  %v3_eb98 = or i1 %v7_eb94, %v2_eb98
  br i1 %v3_eb98, label %dec_label_pc_eb00, label %dec_label_pc_eb9c

dec_label_pc_eb9c:                                ; preds = %.thread16, %dec_label_pc_eb94, %bb288
  %v2_eb9c = icmp ugt i32 %v1_eb04, 168
  store i1 %v2_eb9c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb9c = icmp eq i32 %v1_eb04, 169
  store i1 %v7_eb9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb9c, label %bb289, label %dec_label_pc_eba8

bb289:                                            ; preds = %dec_label_pc_eb9c
  %v3_eba0 = icmp eq i32 %v1_eb18, 255
  store i1 %v3_eba0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_eba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_eba0, label %dec_label_pc_eb00, label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eb9c, %bb289
  %v7_eba8 = icmp eq i32 %v1_eb04, 198
  %.350 = zext i1 %v7_eba8 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  %v2_ebb4 = icmp ugt i32 %v1_eb18, 16
  store i1 %v2_ebb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb4 = icmp eq i32 %v1_eb18, 17
  store i1 %v7_ebb4, i1* %cpsr_z.global-to-local, align 1
  %v2_ebb8 = xor i1 %v2_ebb4, true
  %v3_ebb8 = or i1 %v7_ebb4, %v2_ebb8
  br i1 %v3_ebb8, label %.thread22, label %bb292

.thread22:                                        ; preds = %dec_label_pc_eba8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ebcc

bb292:                                            ; preds = %dec_label_pc_eba8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebbc = icmp eq i1 %v7_eba8, false
  store i1 %v2_ebbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebbc, label %dec_label_pc_ebcc, label %dec_label_pc_ebc4

dec_label_pc_ebc4:                                ; preds = %bb292
  %v2_ebc4 = icmp ugt i32 %v1_eb18, 18
  store i1 %v2_ebc4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebc4 = icmp eq i32 %v1_eb18, 19
  store i1 %v7_ebc4, i1* %cpsr_z.global-to-local, align 1
  %v2_ebc8 = xor i1 %v2_ebc4, true
  %v3_ebc8 = or i1 %v7_ebc4, %v2_ebc8
  br i1 %v3_ebc8, label %dec_label_pc_eb00, label %dec_label_pc_ebcc

dec_label_pc_ebcc:                                ; preds = %.thread22, %dec_label_pc_ebc4, %bb292
  %v2_ebcc = icmp ugt i32 %v1_eb04, 222
  store i1 %v2_ebcc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebcc = icmp eq i32 %v1_eb04, 223
  store i1 %v7_ebcc, i1* %cpsr_z.global-to-local, align 1
  %v2_ebd0 = xor i1 %v7_ebcc, true
  %v3_ebd0 = and i1 %v2_ebcc, %v2_ebd0
  br i1 %v3_ebd0, label %dec_label_pc_eb00, label %dec_label_pc_ebd4

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ebcc
  %v1_ebd4 = add nsw i32 %v1_eb04, -6
  store i32 %v1_ebd4, i32* %r3.global-to-local, align 4
  %v2_ebd8 = icmp ugt i32 %v1_eb04, 10
  store i1 %v2_ebd8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebd8 = icmp eq i32 %v1_eb04, 11
  store i1 %v7_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebd8, label %dec_label_pc_eb00, label %bb293

bb293:                                            ; preds = %dec_label_pc_ebd4
  %v3_ebdc = icmp ne i32 %v1_ebd4, 0
  store i1 %v3_ebdc, i1* %cpsr_c.global-to-local, align 1
  %v8_ebdc = icmp eq i32 %v1_ebd4, 1
  store i1 %v8_ebdc, i1* %cpsr_z.global-to-local, align 1
  %v2_ebe0 = xor i1 %v3_ebdc, true
  %v3_ebe0 = or i1 %v8_ebdc, %v2_ebe0
  br i1 %v3_ebe0, label %dec_label_pc_eb00, label %dec_label_pc_ebe4

dec_label_pc_ebe4:                                ; preds = %bb293
  %v2_ebe4 = icmp ugt i32 %v1_eb04, 21
  store i1 %v2_ebe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe4 = icmp eq i32 %v1_eb04, 22
  store i1 %v7_ebe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe4, label %dec_label_pc_eb00, label %bb294

bb294:                                            ; preds = %dec_label_pc_ebe4
  %v3_ebe8 = icmp ugt i32 %v1_eb04, 20
  store i1 %v3_ebe8, i1* %cpsr_c.global-to-local, align 1
  %v8_ebe8 = icmp eq i32 %v1_eb04, 21
  store i1 %v8_ebe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebe8, label %dec_label_pc_eb00, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %bb294
  %v2_ebf0 = icmp ugt i32 %v1_eb04, 27
  store i1 %v2_ebf0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf0 = icmp eq i32 %v1_eb04, 28
  store i1 %v7_ebf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebf0, label %dec_label_pc_eb00, label %bb295

bb295:                                            ; preds = %dec_label_pc_ebf0
  %v3_ebf4 = icmp ugt i32 %v1_eb04, 25
  store i1 %v3_ebf4, i1* %cpsr_c.global-to-local, align 1
  %v8_ebf4 = icmp eq i32 %v1_eb04, 26
  store i1 %v8_ebf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebf4, label %dec_label_pc_eb00, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %bb295
  %v2_ebfc = icmp ugt i32 %v1_eb04, 29
  store i1 %v2_ebfc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebfc = icmp eq i32 %v1_eb04, 30
  store i1 %v7_ebfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebfc, label %dec_label_pc_eb00, label %bb296

bb296:                                            ; preds = %dec_label_pc_ebfc
  %v3_ec00 = icmp ugt i32 %v1_eb04, 28
  store i1 %v3_ec00, i1* %cpsr_c.global-to-local, align 1
  %v8_ec00 = icmp eq i32 %v1_eb04, 29
  store i1 %v8_ec00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec00, label %dec_label_pc_eb00, label %dec_label_pc_ec08

dec_label_pc_ec08:                                ; preds = %bb296
  %v2_ec08 = icmp ugt i32 %v1_eb04, 54
  store i1 %v2_ec08, i1* %cpsr_c.global-to-local, align 1
  %v7_ec08 = icmp eq i32 %v1_eb04, 55
  store i1 %v7_ec08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec08, label %dec_label_pc_eb00, label %bb297

bb297:                                            ; preds = %dec_label_pc_ec08
  %v3_ec0c = icmp ugt i32 %v1_eb04, 32
  store i1 %v3_ec0c, i1* %cpsr_c.global-to-local, align 1
  %v8_ec0c = icmp eq i32 %v1_eb04, 33
  store i1 %v8_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec0c, label %dec_label_pc_eb00, label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %bb297
  %v2_ec14 = icmp ugt i32 %v1_eb04, 214
  store i1 %v2_ec14, i1* %cpsr_c.global-to-local, align 1
  %v7_ec14 = icmp eq i32 %v1_eb04, 215
  store i1 %v7_ec14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec14, label %.thread33, label %bb298

bb298:                                            ; preds = %dec_label_pc_ec14
  %v3_ec18 = icmp ugt i32 %v1_eb04, 213
  store i1 %v3_ec18, i1* %cpsr_c.global-to-local, align 1
  %v8_ec18 = icmp eq i32 %v1_eb04, 214
  store i1 %v8_ec18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec18, label %bb299, label %dec_label_pc_ec28

.thread33:                                        ; preds = %dec_label_pc_ec14
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb00

bb299:                                            ; preds = %bb298
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb00

dec_label_pc_ec28:                                ; preds = %bb298
  store i32 0, i32* @r4, align 4
  %v5_ec34 = call i32 @llvm.bswap.i32(i32 %v0_eb00)
  store i32 %v5_ec34, i32* %r3.global-to-local, align 4
  %tmp300 = and i32 %v0_eb00, 65280
  %tmp301 = call i32 @llvm.bswap.i32(i32 %tmp300)
  %tmp302 = and i32 %v0_eb00, 16711680
  %tmp303 = call i32 @llvm.bswap.i32(i32 %tmp302)
  %v3_ec40 = mul nuw i32 %v3_eb20, 16777216
  %v3_ec44 = udiv i32 %tmp301, 256
  %v4_ec48 = mul nuw nsw i32 %tmp303, 256
  %tmp304 = and i32 %v0_eb00, 32768
  %v3_ec4c = icmp ne i32 %tmp304, 0
  store i1 %v3_ec4c, i1* %cpsr_c.global-to-local, align 1
  %v4_ec4c = udiv i32 %v5_ec34, 16777216
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* @r0, align 4
  %v5_ec4c = or i32 %v4_ec4c, %v3_ec40
  %v5_ec48 = or i32 %v5_ec4c, %v4_ec48
  %v2_ec54 = or i32 %v5_ec48, %v3_ec44
  store i32 %v2_ec54, i32* %r2.global-to-local, align 4
  %v5_ec58 = trunc i32 %v4_ec4c to i8
  store i8 %v5_ec58, i8* @global_var_1bbc8.269, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1bbc2.270 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1bbc3.271 to i8*), align 4
  %v3_ec68 = call i32 @function_c690(i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_ec68, 16777216
  %v1_ec70 = sdiv i32 %sext6, 16777216
  store i32 %v1_ec70, i32* %r3.global-to-local, align 4
  %v2_ec74 = and i32 %v1_ec70, 128
  %v3_ec74 = icmp ne i32 %v2_ec74, 0
  store i1 %v3_ec74, i1* %cpsr_c.global-to-local, align 1
  %v4_ec74 = ashr i32 %sext6, 31
  store i32 %v4_ec74, i32* %r2.global-to-local, align 4
  %v1_ec78 = trunc i32 %v1_ec70 to i8
  store i8 %v1_ec78, i8* bitcast (i32* @global_var_1bbc2.270 to i8*), align 4
  %v1_ec7c = trunc i32 %v4_ec74 to i8
  store i8 %v1_ec7c, i8* bitcast (i32* @global_var_1bbc3.271 to i8*), align 4
  %v3_ec80 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ec80, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_ec88 = call i32 @function_10ad0(i32 %v3_ec80, i32 10)
  store i32 %v4_ec88, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec8c = icmp eq i32 %v4_ec88, 0
  store i1 %v2_ec8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec8c, label %.thread199, label %bb305

.thread199:                                       ; preds = %dec_label_pc_ec28
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* @lr, align 4
  br label %.thread43.thread74

bb305:                                            ; preds = %dec_label_pc_ec28
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_ec9c = load i32, i32* @r4, align 4
  %v2_ec9c = trunc i32 %v1_ec9c to i8
  store i8 %v2_ec9c, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32 2) to i8*), align 2
  %v0_eca0.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eca0.pr.pre, label %.thread43.thread74, label %.thread40

.thread40:                                        ; preds = %bb305
  %v1_eca0 = load i32, i32* %r3.global-to-local, align 4
  %v2_eca0 = trunc i32 %v1_eca0 to i8
  %v3_eca0 = load i32, i32* %r0.global-to-local, align 4
  %v4_eca0 = add i32 %v3_eca0, 3
  %v5_eca0 = inttoptr i32 %v4_eca0 to i8*
  store i8 %v2_eca0, i8* %v5_eca0, align 1
  %v0_eca8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_eca8.pr.pr, label %.thread46, label %.thread48

.thread43.thread74:                               ; preds = %bb305, %.thread199
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %r0.global-to-local, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread40, %.thread43.thread74
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_ecb0 = load i32, i32* @lr, align 4
  %v4_ecb0 = add i32 %v3_ecb0, 2
  %v5_ecb0 = inttoptr i32 %v4_ecb0 to i8*
  store i8 9, i8* %v5_ecb0, align 1
  %v0_ecb4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ecb4.pr.pr, label %bb306, label %.thread48

bb306:                                            ; preds = %.thread46
  %v1_ecb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ecb4 = trunc i32 %v1_ecb4 to i8
  %v3_ecb4 = load i32, i32* @lr, align 4
  %v4_ecb4 = add i32 %v3_ecb4, 3
  %v5_ecb4 = inttoptr i32 %v4_ecb4 to i8*
  store i8 %v2_ecb4, i8* %v5_ecb4, align 1
  br label %.thread48

.thread48:                                        ; preds = %.thread40, %.thread46, %bb306
  %v4_ecb8 = load i8, i8* @global_var_1bbc8.269, align 1
  %v5_ecb8 = sext i8 %v4_ecb8 to i32
  store i32 %v5_ecb8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* @r1, align 4
  store i8 %v4_ecb8, i8* @global_var_1bbd0.272, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_ecd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_ecd0 = trunc i32 %v0_ecd0 to i8
  store i8 %v1_ecd0, i8* bitcast (i32* @global_var_1bbdc.273 to i8*), align 4
  store i8 %v1_ecd0, i8* bitcast (i32* @global_var_1bbdd.274 to i8*), align 4
  %v5_ecd8 = call i32 @function_c6ec(i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_ecd8, 16777216
  %v1_ece0 = sdiv i32 %sext, 16777216
  %v3_ece8 = ashr i32 %sext, 31
  %v2_ecec = load i32, i32* @global_var_1bbcc.146, align 4
  %v1_ecf4 = trunc i32 %v3_ece8 to i8
  store i8 %v1_ecf4, i8* bitcast (i32* @global_var_1bbdd.274 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_ed08 = load i8, i8* @global_var_1bbc8.269, align 1
  %v4_ed08 = sext i8 %v3_ed08 to i32
  store i32 %v4_ed08, i32* @r4, align 4
  %v2_ed0c = load i32, i32* @global_var_1bc4c.140, align 4
  store i32 %v2_ed0c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), i32* %ip.global-to-local, align 4
  %v1_ed1c = and i32 %v2_ecec, 8388608
  %v2_ed1c = icmp ne i32 %v1_ed1c, 0
  store i1 %v2_ed1c, i1* %cpsr_c.global-to-local, align 1
  %v1_ed24 = trunc i32 %v1_ece0 to i8
  store i8 %v1_ed24, i8* bitcast (i32* @global_var_1bbdc.273 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_ed38, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_ed4c = call i32 @function_114ec(i32 %v2_ed0c, i32* bitcast (i8** @global_var_1bbb8.142 to i32*), i32 40, i32 16384, i32 %v2_ed38, i32 16)
  store i32 %v8_ed4c, i32* %r0.global-to-local, align 4
  %v3_ed50 = load i32, i32* %stack_var_-52, align 4
  %v1_ed54 = add i32 %v3_ed50, 1
  store i32 %v1_ed54, i32* %r3.global-to-local, align 4
  %v3_ed58 = icmp ugt i32 %v1_ed54, 383
  store i1 %v3_ed58, i1* %cpsr_c.global-to-local, align 1
  %v8_ed58 = icmp eq i32 %v1_ed54, 384
  store i1 %v8_ed58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed54, i32* %stack_var_-52, align 4
  %v5_ed60 = icmp slt i32 %v1_ed54, 384
  br i1 %v5_ed60, label %.thread48.dec_label_pc_ead0_crit_edge, label %dec_label_pc_ed64

.thread48.dec_label_pc_ead0_crit_edge:            ; preds = %.thread48
  %v0_ead0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ead0

dec_label_pc_ed64:                                ; preds = %.thread48
  %v0_ed64 = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed68

dec_label_pc_ed68:                                ; preds = %dec_label_pc_eab0, %dec_label_pc_ed64
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_eab0 ], [ %v0_ed64, %dec_label_pc_ed64 ]
  %v0_ed68 = call i32 @function_11224()
  store i32 %v0_ed68, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_ed7c = inttoptr i32 %v0_ed68 to i32*
  %v6_eda4 = inttoptr i32 %v0_ede0 to i32*
  %v1_edd0 = add i32 %v0_ede0, 16
  %v2_edd0 = inttoptr i32 %v1_edd0 to i32*
  %v4_edec = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_edf4 = add i32 %v4_edec, 1
  %v2_edf4 = inttoptr i32 %v1_edf4 to i8*
  %v1_ee18 = add i32 %v4_edec, 2
  %v2_ee18 = inttoptr i32 %v1_ee18 to i8*
  %v1_ee1c = add i32 %v4_edec, 3
  %v2_ee1c = inttoptr i32 %v1_ee1c to i8*
  %v4_ee20 = sext i8 %stack_var_-1876.0 to i32
  %v1_eefc = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_ede0 = add i32 %v0_ede0, 9
  %v2_ede0 = inttoptr i32 %v1_ede0 to i8*
  %v1_ee30 = add i32 %v4_edec, 13
  %v2_ee30 = inttoptr i32 %v1_ee30 to i8*
  %v1_ee54 = add i32 %v4_edec, 8
  %v2_ee54 = inttoptr i32 %v1_ee54 to i32*
  %v1_ee94 = add i32 %v0_ede0, 12
  %v2_ee94 = inttoptr i32 %v1_ee94 to i32*
  br label %dec_label_pc_ed74

dec_label_pc_ed74:                                ; preds = %dec_label_pc_ee54, %dec_label_pc_ee4c, %dec_label_pc_ee44, %dec_label_pc_ee14, %dec_label_pc_ee04, %dec_label_pc_ede0, %dec_label_pc_edc8, %dec_label_pc_ee3c, %dec_label_pc_ee30, %dec_label_pc_edc0, %dec_label_pc_eef4, %dec_label_pc_ed68
  store i32 0, i32* %v2_ed7c, align 4
  %v2_ed84 = load i32, i32* @global_var_1bc4c.140, align 4
  store i32 %v2_ed84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_ede0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_eda4 = call i32 @function_1148c(i32 %v2_ed84, i32* %v6_eda4, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_eda4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eda8 = icmp eq i32 %v7_eda4, 0
  store i1 %v2_eda8, i1* %cpsr_z.global-to-local, align 1
  %tmp307 = icmp slt i32 %v7_eda4, 1
  br i1 %tmp307, label %dec_label_pc_ef28, label %dec_label_pc_edb0

dec_label_pc_edb0:                                ; preds = %dec_label_pc_ed74
  store i32 %v0_ed68, i32* %lr.global-to-local, align 4
  %v2_edb4 = load i32, i32* %v2_ed7c, align 4
  store i32 %v2_edb4, i32* %r3.global-to-local, align 4
  %v2_edb8 = icmp ugt i32 %v2_edb4, 10
  store i1 %v2_edb8, i1* %cpsr_c.global-to-local, align 1
  %v7_edb8 = icmp eq i32 %v2_edb4, 11
  store i1 %v7_edb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edb8, label %dec_label_pc_ef28, label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_edb0
  %v2_edc0 = icmp ugt i32 %v7_eda4, 38
  store i1 %v2_edc0, i1* %cpsr_c.global-to-local, align 1
  %v7_edc0 = icmp eq i32 %v7_eda4, 39
  store i1 %v7_edc0, i1* %cpsr_z.global-to-local, align 1
  %v2_edc4 = xor i1 %v2_edc0, true
  %v3_edc4 = or i1 %v7_edc0, %v2_edc4
  br i1 %v3_edc4, label %dec_label_pc_ed74, label %dec_label_pc_edc8

dec_label_pc_edc8:                                ; preds = %dec_label_pc_edc0
  store i32 %v0_ede0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc30.48 to i32), i32* %r1.global-to-local, align 4
  %v3_edd0 = load i32, i32* %v2_edd0, align 4
  store i32 %v3_edd0, i32* %r2.global-to-local, align 4
  %v2_edd4 = load i32, i32* @global_var_1bc30.48, align 4
  store i32 %v2_edd4, i32* %r3.global-to-local, align 4
  %v3_edd8 = icmp uge i32 %v3_edd0, %v2_edd4
  store i1 %v3_edd8, i1* %cpsr_c.global-to-local, align 1
  %v9_edd8 = icmp eq i32 %v3_edd0, %v2_edd4
  store i1 %v9_edd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_edd8, label %dec_label_pc_ede0, label %dec_label_pc_ed74

dec_label_pc_ede0:                                ; preds = %dec_label_pc_edc8
  %v3_ede0 = load i8, i8* %v2_ede0, align 1
  %v4_ede0 = zext i8 %v3_ede0 to i32
  store i32 %v4_ede0, i32* %r3.global-to-local, align 4
  %v2_ede4 = icmp ugt i8 %v3_ede0, 5
  store i1 %v2_ede4, i1* %cpsr_c.global-to-local, align 1
  %v7_ede4 = icmp eq i8 %v3_ede0, 6
  store i1 %v7_ede4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ede4, label %dec_label_pc_edec, label %dec_label_pc_ed74

dec_label_pc_edec:                                ; preds = %dec_label_pc_ede0
  store i32 %v4_edec, i32* %r3.global-to-local, align 4
  %v2_edf0 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_edf0 = zext i8 %v2_edf0 to i32
  store i32 %v3_edf0, i32* %r2.global-to-local, align 4
  %v3_edf4 = load i8, i8* %v2_edf4, align 1
  %v4_edf4 = zext i8 %v3_edf4 to i32
  store i32 %v4_edf4, i32* %r3.global-to-local, align 4
  %v4_edf8 = mul nuw nsw i32 %v4_edf4, 256
  %v5_edf8 = or i32 %v4_edf8, %v3_edf0
  store i32 %v5_edf8, i32* %r2.global-to-local, align 4
  %v2_edfc = icmp ugt i32 %v5_edf8, 5887
  store i1 %v2_edfc, i1* %cpsr_c.global-to-local, align 1
  %v7_edfc = icmp eq i32 %v5_edf8, 5888
  store i1 %v7_edfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edfc, label %dec_label_pc_ee14, label %dec_label_pc_ee04

dec_label_pc_ee04:                                ; preds = %dec_label_pc_edec
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ee0c = icmp ugt i32 %v5_edf8, 4872
  store i1 %v3_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v9_ee0c = icmp eq i32 %v5_edf8, 4873
  store i1 %v9_ee0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee0c, label %dec_label_pc_ee14, label %dec_label_pc_ed74

dec_label_pc_ee14:                                ; preds = %dec_label_pc_ee04, %dec_label_pc_edec
  store i32 %v4_edec, i32* %ip.global-to-local, align 4
  %v3_ee18 = load i8, i8* %v2_ee18, align 1
  %v4_ee18 = zext i8 %v3_ee18 to i32
  store i32 %v4_ee18, i32* %r3.global-to-local, align 4
  %v3_ee1c = load i8, i8* %v2_ee1c, align 1
  %v4_ee1c = zext i8 %v3_ee1c to i32
  store i32 %v4_ee1c, i32* %r2.global-to-local, align 4
  store i32 %v4_ee20, i32* %lr.global-to-local, align 4
  %v4_ee24 = mul nuw nsw i32 %v4_ee1c, 256
  %v5_ee24 = or i32 %v4_ee24, %v4_ee18
  store i32 %v5_ee24, i32* %r3.global-to-local, align 4
  %v3_ee28 = icmp uge i32 %v5_ee24, %v4_ee20
  store i1 %v3_ee28, i1* %cpsr_c.global-to-local, align 1
  %v9_ee28 = icmp eq i32 %v5_ee24, %v4_ee20
  store i1 %v9_ee28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee28, label %dec_label_pc_ee30, label %dec_label_pc_ed74

dec_label_pc_ee30:                                ; preds = %dec_label_pc_ee14
  %v3_ee30 = load i8, i8* %v2_ee30, align 1
  %v4_ee30 = zext i8 %v3_ee30 to i32
  store i32 %v4_ee30, i32* %r3.global-to-local, align 4
  %v1_ee34 = and i32 %v4_ee30, 2
  %v2_ee34 = icmp eq i32 %v1_ee34, 0
  store i1 %v2_ee34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee34, label %dec_label_pc_ed74, label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ee30
  %v1_ee3c = and i32 %v4_ee30, 16
  %v2_ee3c = icmp eq i32 %v1_ee3c, 0
  store i1 %v2_ee3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee3c, label %dec_label_pc_ed74, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee3c
  %v1_ee44 = and i32 %v4_ee30, 4
  %v2_ee44 = icmp eq i32 %v1_ee44, 0
  store i1 %v2_ee44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee44, label %dec_label_pc_ee4c, label %dec_label_pc_ed74

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee44
  %tmp451 = urem i8 %v3_ee30, 2
  %v2_ee4c = icmp eq i8 %tmp451, 0
  store i1 %v2_ee4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee4c, label %dec_label_pc_ee54, label %dec_label_pc_ed74

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee4c
  %v3_ee54 = load i32, i32* %v2_ee54, align 4
  %v2_ee70 = call i32 @llvm.bswap.i32(i32 %v3_ee54)
  %v1_ee74 = add i32 %v2_ee70, -1
  %v1_ee78 = udiv i32 %v1_ee74, 256
  %v3_ee7c = and i32 %v1_ee78, 65280
  %v1_ee80 = and i32 %v1_ee74, 65280
  store i32 %v1_ee80, i32* %r2.global-to-local, align 4
  %v3_ee84 = mul i32 %v1_ee74, 16777216
  %v4_ee88 = udiv i32 %v1_ee74, 16777216
  %v5_ee88 = or i32 %v3_ee7c, %v4_ee88
  store i32 %v5_ee88, i32* %r1.global-to-local, align 4
  store i32 %v0_ede0, i32* %r3.global-to-local, align 4
  %v4_ee90 = mul nuw nsw i32 %v1_ee80, 256
  %v5_ee90 = or i32 %v4_ee90, %v3_ee84
  store i32 %v5_ee90, i32* %r0.global-to-local, align 4
  %v3_ee94 = load i32, i32* %v2_ee94, align 4
  store i32 %v3_ee94, i32* %r2.global-to-local, align 4
  %v2_ee98 = call i32 @llvm.bswap.i32(i32 %v1_ee74)
  store i32 %v2_ee98, i32* %ip.global-to-local, align 4
  %v3_ee9c = icmp uge i32 %v2_ee98, %v3_ee94
  store i1 %v3_ee9c, i1* %cpsr_c.global-to-local, align 1
  %v9_ee9c = icmp eq i32 %v2_ee98, %v3_ee94
  store i1 %v9_ee9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ee9c, label %dec_label_pc_eea4, label %dec_label_pc_ed74

dec_label_pc_eea4:                                ; preds = %dec_label_pc_ee54
  %v0_eea4 = load i32, i32* @r4, align 4
  %v2_eea4 = icmp ugt i32 %v0_eea4, 254
  store i1 %v2_eea4, i1* %cpsr_c.global-to-local, align 1
  %v7_eea4 = icmp eq i32 %v0_eea4, 255
  store i1 %v7_eea4, i1* %cpsr_z.global-to-local, align 1
  %v8_eea8 = icmp sgt i32 %v0_eea4, 255
  br i1 %v8_eea8, label %dec_label_pc_ef28, label %dec_label_pc_eeac

dec_label_pc_eeac:                                ; preds = %dec_label_pc_eea4
  store i32 ptrtoint (i32* @global_var_1bc48.138 to i32), i32* %lr.global-to-local, align 4
  %v3_eeb0 = mul i32 %v0_eea4, 256
  store i32 %v3_eeb0, i32* %r2.global-to-local, align 4
  %v2_eeb4 = load i32, i32* @global_var_1bc48.138, align 4
  store i32 %v2_eeb4, i32* %r1.global-to-local, align 4
  %v2_eebc = mul i32 %v0_eea4, 288
  store i32 %v2_eebc, i32* %r3.global-to-local, align 4
  %v2_eec0 = add i32 %v2_eeb4, %v2_eebc
  store i32 %v2_eec0, i32* @r0, align 4
  %v1_eec4 = add i32 %v2_eec0, 12
  %v2_eec4 = inttoptr i32 %v1_eec4 to i32*
  %v3_eec4 = load i32, i32* %v2_eec4, align 4
  store i32 %v3_eec4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eec8 = icmp eq i32 %v3_eec4, 0
  store i1 %v2_eec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eec8, label %dec_label_pc_eef4, label %dec_label_pc_eed4.preheader

dec_label_pc_eed4.preheader:                      ; preds = %dec_label_pc_eeac
  %v2_eecc = add i32 %v2_eec0, 288
  store i32 %v2_eecc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %dec_label_pc_eed4.preheader, %dec_label_pc_eee0
  %v0_eee0 = phi i32 [ %v2_eecc, %dec_label_pc_eed4.preheader ], [ %v1_eeec, %dec_label_pc_eee0 ]
  %v0_eed4 = phi i32 [ %v0_eea4, %dec_label_pc_eed4.preheader ], [ %v1_eed4, %dec_label_pc_eee0 ]
  %v1_eed4 = add i32 %v0_eed4, 1
  store i32 %v1_eed4, i32* @r4, align 4
  %v7_eed8 = icmp eq i32 %v1_eed4, 256
  br i1 %v7_eed8, label %dec_label_pc_ef28.loopexit, label %dec_label_pc_eee0

dec_label_pc_eee0:                                ; preds = %dec_label_pc_eed4
  store i32 %v0_eee0, i32* @r0, align 4
  %v1_eee4 = add i32 %v0_eee0, 12
  %v2_eee4 = inttoptr i32 %v1_eee4 to i32*
  %v3_eee4 = load i32, i32* %v2_eee4, align 4
  %v2_eee8 = icmp eq i32 %v3_eee4, 0
  %v1_eeec = add i32 %v0_eee0, 288
  store i32 %v1_eeec, i32* %r3.global-to-local, align 4
  br i1 %v2_eee8, label %dec_label_pc_eef4.loopexit, label %dec_label_pc_eed4

dec_label_pc_eef4.loopexit:                       ; preds = %dec_label_pc_eee0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eef4

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eef4.loopexit, %dec_label_pc_eeac
  %v1_eef4 = phi i32 [ %v0_eee0, %dec_label_pc_eef4.loopexit ], [ %v2_eec0, %dec_label_pc_eeac ]
  %v2_eef4 = add i32 %v1_eef4, 16
  %v3_eef4 = inttoptr i32 %v2_eef4 to i32*
  store i32 %v3_ee94, i32* %v3_eef4, align 4
  store i32 %v4_edec, i32* %r1.global-to-local, align 4
  %v2_eefc = load i32, i32* %v1_eefc, align 4
  store i32 %v2_eefc, i32* %r2.global-to-local, align 4
  %v1_ef00 = and i32 %v2_eefc, 128
  %v2_ef00 = icmp ne i32 %v1_ef00, 0
  store i1 %v2_ef00, i1* %cpsr_c.global-to-local, align 1
  %v3_ef00 = sdiv i32 %v2_eefc, 256
  store i32 %v3_ef00, i32* %r3.global-to-local, align 4
  %v1_ef04 = trunc i32 %v3_ef00 to i8
  %v2_ef04 = load i32, i32* @r0, align 4
  %v3_ef04 = add i32 %v2_ef04, 21
  %v4_ef04 = inttoptr i32 %v3_ef04 to i8*
  store i8 %v1_ef04, i8* %v4_ef04, align 1
  %v0_ef08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ef08 = trunc i32 %v0_ef08 to i8
  %v2_ef08 = load i32, i32* @r0, align 4
  %v3_ef08 = add i32 %v2_ef08, 20
  %v4_ef08 = inttoptr i32 %v3_ef08 to i8*
  store i8 %v1_ef08, i8* %v4_ef08, align 1
  %v0_ef0c = call i32 @function_e1a4()
  store i32 %v0_ef0c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed74

dec_label_pc_ef14:                                ; preds = %dec_label_pc_e508
  store i32 ptrtoint (i32* @global_var_1bc4c.140 to i32), i32* %r2.global-to-local, align 4
  %v2_ef18 = load i32, i32* @global_var_1bc4c.140, align 4
  store i32 %v2_ef18, i32* %r0.global-to-local, align 4
  %v1_ef1c = call i32 @function_10c7c(i32 %v2_ef18)
  store i32 %v1_ef1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef20

dec_label_pc_ef20:                                ; preds = %dec_label_pc_e4e0, %dec_label_pc_ef14
  %v0_ef20 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ef20, i32* %r0.global-to-local, align 4
  %v1_ef24 = call i32 @function_11e2c(i32 %v0_ef20)
  store i32 %v1_ef24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef28

dec_label_pc_ef28.loopexit:                       ; preds = %dec_label_pc_eed4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef28

dec_label_pc_ef28:                                ; preds = %dec_label_pc_eea4, %dec_label_pc_edb0, %dec_label_pc_ed74, %dec_label_pc_ef28.loopexit, %dec_label_pc_ef20
  %stack_var_-1868.0 = phi i32 [ %tmp233, %dec_label_pc_ef20 ], [ %v0_ed68, %dec_label_pc_ef28.loopexit ], [ %v0_ed68, %dec_label_pc_ed74 ], [ %v0_ed68, %dec_label_pc_edb0 ], [ %v0_ed68, %dec_label_pc_eea4 ]
  %stack_var_-1872.2 = phi i32 [ %tmp240, %dec_label_pc_ef20 ], [ %stack_var_-1872.1, %dec_label_pc_ef28.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_ed74 ], [ %stack_var_-1872.1, %dec_label_pc_edb0 ], [ %stack_var_-1872.1, %dec_label_pc_eea4 ]
  %stack_var_-1884.1 = phi i8* [ %tmp241, %dec_label_pc_ef20 ], [ %stack_var_-1884.0, %dec_label_pc_ef28.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_ed74 ], [ %stack_var_-1884.0, %dec_label_pc_edb0 ], [ %stack_var_-1884.0, %dec_label_pc_eea4 ]
  %stack_var_-1880.1 = phi i32 [ %tmp242, %dec_label_pc_ef20 ], [ %v0_ede0, %dec_label_pc_ef28.loopexit ], [ %v0_ede0, %dec_label_pc_ed74 ], [ %v0_ede0, %dec_label_pc_edb0 ], [ %v0_ede0, %dec_label_pc_eea4 ]
  %stack_var_-1876.1 = phi i8 [ %tmp243, %dec_label_pc_ef20 ], [ %stack_var_-1876.0, %dec_label_pc_ef28.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_ed74 ], [ %stack_var_-1876.0, %dec_label_pc_edb0 ], [ %stack_var_-1876.0, %dec_label_pc_eea4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_ef40407 = load i32, i32* @sp, align 4
  %v3_ef40408 = add i32 %v2_ef40407, 1672
  %v4_ef40409 = inttoptr i32 %v3_ef40408 to i32*
  store i32 0, i32* %v4_ef40409, align 4
  br label %dec_label_pc_ef30.dec_label_pc_ef30_crit_edge

dec_label_pc_ef30.dec_label_pc_ef30_crit_edge:    ; preds = %dec_label_pc_ef28, %dec_label_pc_ef30.dec_label_pc_ef30_crit_edge
  %v0_ef30.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ef40.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ef34 = add i32 %v0_ef30.pre, 4
  store i32 %v1_ef34, i32* %r3.global-to-local, align 4
  %v1_ef38 = add i32 %v0_ef30.pre, 1672
  store i32 %v1_ef38, i32* %ip.global-to-local, align 4
  %v7_ef3c = icmp eq i32 %v1_ef34, 128
  %v2_ef40 = load i32, i32* @sp, align 4
  %v3_ef40 = add i32 %v2_ef40, %v1_ef38
  %v4_ef40 = inttoptr i32 %v3_ef40 to i32*
  store i32 %v0_ef40.pre, i32* %v4_ef40, align 4
  br i1 %v7_ef3c, label %dec_label_pc_ef48, label %dec_label_pc_ef30.dec_label_pc_ef30_crit_edge

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef30.dec_label_pc_ef30_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ef48 = load i32, i32* %r2.global-to-local, align 4
  %v1_ef50401 = add i32 %v0_ef48, 4
  store i32 %v1_ef50401, i32* %r3.global-to-local, align 4
  %v1_ef54402 = add i32 %v0_ef48, 1544
  store i32 %v1_ef54402, i32* %lr.global-to-local, align 4
  %v7_ef58403 = icmp eq i32 %v1_ef50401, 128
  %v2_ef5c404 = load i32, i32* @sp, align 4
  %v3_ef5c405 = add i32 %v2_ef5c404, %v1_ef54402
  %v4_ef5c406 = inttoptr i32 %v3_ef5c405 to i32*
  store i32 %v0_ef48, i32* %v4_ef5c406, align 4
  br i1 %v7_ef58403, label %dec_label_pc_ef64, label %dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge

dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge:    ; preds = %dec_label_pc_ef48, %dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge
  %v0_ef4c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ef5c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ef50 = add i32 %v0_ef4c.pre, 4
  store i32 %v1_ef50, i32* %r3.global-to-local, align 4
  %v1_ef54 = add i32 %v0_ef4c.pre, 1544
  store i32 %v1_ef54, i32* %lr.global-to-local, align 4
  %v7_ef58 = icmp eq i32 %v1_ef50, 128
  %v2_ef5c = load i32, i32* @sp, align 4
  %v3_ef5c = add i32 %v2_ef5c, %v1_ef54
  %v4_ef5c = inttoptr i32 %v3_ef5c to i32*
  store i32 %v0_ef5c.pre, i32* %v4_ef5c, align 4
  br i1 %v7_ef58, label %dec_label_pc_ef64, label %dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge, %dec_label_pc_ef48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ef64 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ef64, i32* @r6, align 4
  store i32 %v0_ef64, i32* @r5, align 4
  store i32 %v0_ef64, i32* @r7, align 4
  store i32 %v0_ef64, i32* %stack_var_-52, align 4
  %v2_f020 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_efdc

dec_label_pc_ef78:                                ; preds = %dec_label_pc_f004, %dec_label_pc_efdc
  %storemerge223 = phi i32 [ 30, %dec_label_pc_efdc ], [ 5, %dec_label_pc_f004 ]
  store i32 %storemerge223, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* %r2.global-to-local, align 4
  %v2_ef7c = load i32, i32* @global_var_1bbe8.126, align 4
  store i32 %v2_ef7c, i32* %r3.global-to-local, align 4
  %v1_ef80 = add i32 %v2_eff0, 8
  %v2_ef80 = inttoptr i32 %v1_ef80 to i32*
  %v3_ef80 = load i32, i32* %v2_ef80, align 4
  store i32 %v3_ef80, i32* %r2.global-to-local, align 4
  %v2_ef84 = sub i32 %v2_ef7c, %v3_ef80
  store i32 %v2_ef84, i32* %r3.global-to-local, align 4
  %v3_ef88 = icmp uge i32 %v2_ef84, %storemerge223
  store i1 %v3_ef88, i1* %cpsr_c.global-to-local, align 1
  %v9_ef88 = icmp eq i32 %v2_ef84, %storemerge223
  store i1 %v9_ef88, i1* %cpsr_z.global-to-local, align 1
  %v2_ef8c = xor i1 %v9_ef88, true
  %v3_ef8c = and i1 %v3_ef88, %v2_ef8c
  br i1 %v3_ef8c, label %dec_label_pc_f044, label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_ef78
  store i1 %v2_eff8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_eff8, i1* %cpsr_z.global-to-local, align 1
  %v1_f014 = add i32 %v2_eff0, 4
  %v2_f014 = inttoptr i32 %v1_f014 to i32*
  %v3_f014 = load i32, i32* %v2_f014, align 4
  br i1 %v7_eff8, label %dec_label_pc_f014, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %dec_label_pc_ef90
  store i32 %v3_f014, i32* %ip.global-to-local, align 4
  %v3_ef9c = udiv i32 %v3_f014, 32
  store i32 %v2_f020, i32* %r0.global-to-local, align 4
  %v3_efa4 = mul nuw nsw i32 %v3_ef9c, 4
  %v2_efa8 = add i32 %v3_efa4, %v2_f020
  store i32 %v2_efa8, i32* %r3.global-to-local, align 4
  %v1_efac = add i32 %v2_efa8, -184
  %v2_efac = inttoptr i32 %v1_efac to i32*
  %v3_efac = load i32, i32* %v2_efac, align 4
  %v1_efb0 = urem i32 %v3_f014, 32
  store i32 %v1_efb0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_efb8 = shl i32 1, %v1_efb0
  %v8_efb8 = or i32 %v3_efac, %v7_efb8
  store i32 %v8_efb8, i32* %r2.global-to-local, align 4
  store i32 %v8_efb8, i32* %v2_efac, align 4
  %v0_efc0 = load i32, i32* @r6, align 4
  %v1_efc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_efc0 = icmp uge i32 %v0_efc0, %v1_efc0
  store i1 %v3_efc0, i1* %cpsr_c.global-to-local, align 1
  %v9_efc0 = icmp eq i32 %v0_efc0, %v1_efc0
  store i1 %v9_efc0, i1* %cpsr_z.global-to-local, align 1
  %v5_efc4 = icmp slt i32 %v0_efc0, %v1_efc0
  br i1 %v5_efc4, label %bb309, label %bb310

bb309:                                            ; preds = %dec_label_pc_ef98
  store i32 %v1_efc0, i32* @r6, align 4
  br label %bb310

bb310:                                            ; preds = %dec_label_pc_f004, %dec_label_pc_fcbc, %dec_label_pc_f078, %bb312, %dec_label_pc_ef98, %bb309
  %v3_efc8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_efc8, i32* %r3.global-to-local, align 4
  %v1_efcc = add i32 %v3_efc8, 1
  store i32 %v1_efcc, i32* %r2.global-to-local, align 4
  %v2_efd0 = icmp ugt i32 %v1_efcc, 254
  store i1 %v2_efd0, i1* %cpsr_c.global-to-local, align 1
  %v7_efd0 = icmp eq i32 %v1_efcc, 255
  store i1 %v7_efd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_efcc, i32* %stack_var_-52, align 4
  %v8_efd8 = icmp sgt i32 %v1_efcc, 255
  br i1 %v8_efd8, label %dec_label_pc_f084, label %dec_label_pc_efdc

dec_label_pc_efdc:                                ; preds = %bb310, %dec_label_pc_ef64
  %v0_efe8 = phi i32 [ %v1_efcc, %bb310 ], [ %v0_ef64, %dec_label_pc_ef64 ]
  store i32 ptrtoint (i32* @global_var_1bc48.138 to i32), i32* %r0.global-to-local, align 4
  %v3_efe0 = mul i32 %v0_efe8, 256
  store i32 %v3_efe0, i32* %r3.global-to-local, align 4
  %v2_efe4 = load i32, i32* @global_var_1bc48.138, align 4
  store i32 %v2_efe4, i32* %r1.global-to-local, align 4
  %v2_efec = mul i32 %v0_efe8, 288
  store i32 %v2_efec, i32* %r2.global-to-local, align 4
  %v2_eff0 = add i32 %v2_efe4, %v2_efec
  store i32 %v2_eff0, i32* @r4, align 4
  %v1_eff4 = add i32 %v2_eff0, 12
  %v2_eff4 = inttoptr i32 %v1_eff4 to i32*
  %v3_eff4 = load i32, i32* %v2_eff4, align 4
  store i32 %v3_eff4, i32* %ip.global-to-local, align 4
  %v2_eff8 = icmp ne i32 %v3_eff4, 0
  store i1 %v2_eff8, i1* %cpsr_c.global-to-local, align 1
  %v7_eff8 = icmp eq i32 %v3_eff4, 1
  store i1 %v7_eff8, i1* %cpsr_z.global-to-local, align 1
  %v2_effc = xor i1 %v7_eff8, true
  %v3_effc = and i1 %v2_eff8, %v2_effc
  br i1 %v3_effc, label %dec_label_pc_ef78, label %dec_label_pc_f004

dec_label_pc_f004:                                ; preds = %dec_label_pc_efdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f004 = icmp eq i32 %v3_eff4, 0
  store i1 %v2_f004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f004, label %bb310, label %dec_label_pc_ef78

dec_label_pc_f014:                                ; preds = %dec_label_pc_ef90
  store i32 %v3_f014, i32* %r0.global-to-local, align 4
  %v3_f018 = udiv i32 %v3_f014, 32
  %v3_f01c = mul nuw nsw i32 %v3_f018, 4
  store i32 %v2_f020, i32* %lr.global-to-local, align 4
  %v2_f024 = add i32 %v3_f01c, %v2_f020
  store i32 %v2_f024, i32* %r3.global-to-local, align 4
  %v1_f028 = add i32 %v2_f024, -312
  %v2_f028 = inttoptr i32 %v1_f028 to i32*
  %v3_f028 = load i32, i32* %v2_f028, align 4
  %v1_f02c = urem i32 %v3_f014, 32
  store i32 %v1_f02c, i32* %r1.global-to-local, align 4
  %v7_f030 = shl i32 1, %v1_f02c
  %v8_f030 = or i32 %v3_f028, %v7_f030
  store i32 %v8_f030, i32* %r2.global-to-local, align 4
  %v0_f034 = load i32, i32* @r5, align 4
  %v3_f034 = icmp uge i32 %v0_f034, %v3_f014
  store i1 %v3_f034, i1* %cpsr_c.global-to-local, align 1
  %v9_f034 = icmp eq i32 %v0_f034, %v3_f014
  store i1 %v9_f034, i1* %cpsr_z.global-to-local, align 1
  %v5_f038 = icmp slt i32 %v0_f034, %v3_f014
  br i1 %v5_f038, label %bb311, label %bb312

bb311:                                            ; preds = %dec_label_pc_f014
  store i32 %v3_f014, i32* @r5, align 4
  br label %bb312

bb312:                                            ; preds = %dec_label_pc_f014, %bb311
  store i32 %v8_f030, i32* %v2_f028, align 4
  br label %bb310

dec_label_pc_f044:                                ; preds = %dec_label_pc_ef78
  %v1_f044 = add i32 %v2_eff0, 4
  %v2_f044 = inttoptr i32 %v1_f044 to i32*
  %v3_f044 = load i32, i32* %v2_f044, align 4
  store i32 %v3_f044, i32* %r0.global-to-local, align 4
  %v1_f048 = call i32 @function_10c7c(i32 %v3_f044)
  store i32 %v1_f048, i32* %r0.global-to-local, align 4
  %v0_f04c = load i32, i32* @r4, align 4
  %v1_f04c = add i32 %v0_f04c, 12
  %v2_f04c = inttoptr i32 %v1_f04c to i32*
  %v3_f04c = load i32, i32* %v2_f04c, align 4
  store i32 %v3_f04c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f054 = icmp ugt i32 %v3_f04c, 1
  store i1 %v2_f054, i1* %cpsr_c.global-to-local, align 1
  %v7_f054 = icmp eq i32 %v3_f04c, 2
  store i1 %v7_f054, i1* %cpsr_z.global-to-local, align 1
  %v2_f058 = add i32 %v0_f04c, 4
  %v3_f058 = inttoptr i32 %v2_f058 to i32*
  store i32 -1, i32* %v3_f058, align 4
  %v2_f05c = xor i1 %v2_f054, true
  %v3_f05c = or i1 %v7_f054, %v2_f05c
  br i1 %v3_f05c, label %dec_label_pc_fcbc, label %dec_label_pc_f060

dec_label_pc_f060:                                ; preds = %dec_label_pc_f044
  %v0_f060 = load i32, i32* @r4, align 4
  %v1_f060 = add i32 %v0_f060, 284
  %v2_f060 = inttoptr i32 %v1_f060 to i8*
  %v3_f060 = load i8, i8* %v2_f060, align 1
  %v4_f060 = zext i8 %v3_f060 to i32
  %v1_f064 = add nuw nsw i32 %v4_f060, 1
  %v1_f068 = urem i32 %v1_f064, 256
  store i32 %v1_f068, i32* %r3.global-to-local, align 4
  %v2_f06c = icmp ugt i32 %v1_f068, 9
  store i1 %v2_f06c, i1* %cpsr_c.global-to-local, align 1
  %v7_f06c = icmp eq i32 %v1_f068, 10
  store i1 %v7_f06c, i1* %cpsr_z.global-to-local, align 1
  %v1_f070 = trunc i32 %v1_f064 to i8
  store i8 %v1_f070, i8* %v2_f060, align 1
  %v0_f074 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f074, label %dec_label_pc_fcbc, label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f060
  %v0_f078 = load i32, i32* @r4, align 4
  store i32 %v0_f078, i32* @r0, align 4
  %v0_f07c = call i32 @function_e1a4()
  store i32 %v0_f07c, i32* %r0.global-to-local, align 4
  br label %bb310

dec_label_pc_f084:                                ; preds = %bb310
  store i32 1, i32* %stack_var_-64, align 4
  %v0_f08c = load i32, i32* @r6, align 4
  %v1_f08c = load i32, i32* @r5, align 4
  %v3_f08c = icmp uge i32 %v0_f08c, %v1_f08c
  store i1 %v3_f08c, i1* %cpsr_c.global-to-local, align 1
  %v9_f08c = icmp eq i32 %v0_f08c, %v1_f08c
  store i1 %v9_f08c, i1* %cpsr_z.global-to-local, align 1
  %v5_f090 = icmp slt i32 %v0_f08c, %v1_f08c
  %storemerge76 = select i1 %v5_f090, i32 %v1_f08c, i32 %v0_f08c
  %v2_f0a4 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f0a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f0ac = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_f0ac, i32* %ip.global-to-local, align 4
  %v2_f0b0 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_f0b0, i32* %r1.global-to-local, align 4
  %v1_f0b4 = add i32 %storemerge76, 1
  store i32 %v1_f0b4, i32* %r0.global-to-local, align 4
  %v5_f0c0 = call i32 @function_10e9c(i32 %v1_f0b4, i32 %v2_f0b0, i32 %v2_f0a4, i32 0, i32 %v2_f0ac)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f0c8 = call i32 @function_10f4c(i32* null)
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_f0c8, i32* @global_var_1bbe8.126, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_f290 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_f338 = ptrtoint i32* %stack_var_-41 to i32
  %v2_fb40 = ptrtoint i32* %stack_var_-84 to i32
  %v2_fb48 = ptrtoint i32* %stack_var_-73 to i32
  %v2_f6bc = ptrtoint i32* %stack_var_-56 to i32
  %v2_f770 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_f11c

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f140, %dec_label_pc_fccc
  %v0_f0f8 = phi i32 [ %v3_f134, %dec_label_pc_f140 ], [ %v0_f0e4.pre, %dec_label_pc_fccc ]
  %v3_f0e4 = udiv i32 %v0_f0f8, 32
  %v3_f0e8 = mul nuw nsw i32 %v3_f0e4, 4
  store i32 %v2_f020, i32* @lr, align 4
  %v2_f0f0 = add i32 %v3_f0e8, %v2_f020
  store i32 %v2_f0f0, i32* %r3.global-to-local, align 4
  %v1_f0f4 = add i32 %v2_f0f0, -184
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i32*
  %v3_f0f4 = load i32, i32* %v2_f0f4, align 4
  %v1_f0f8 = urem i32 %v0_f0f8, 32
  store i32 %v1_f0f8, i32* %r1.global-to-local, align 4
  %v2_f0fc = add nsw i32 %v1_f0f8, -1
  %v3_f0fc = shl i32 1, %v2_f0fc
  %v4_f0fc = and i32 %v3_f0fc, %v3_f0f4
  %v5_f0fc = icmp ne i32 %v4_f0fc, 0
  store i1 %v5_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v6_f0fc = lshr i32 %v3_f0f4, %v1_f0f8
  store i32 %v6_f0fc, i32* %r2.global-to-local, align 4
  %v1_f100 = urem i32 %v6_f0fc, 2
  %v2_f100 = icmp eq i32 %v1_f100, 0
  store i1 %v2_f100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f100, label %dec_label_pc_f108, label %dec_label_pc_f26c.preheader

dec_label_pc_f26c.preheader:                      ; preds = %dec_label_pc_f0e4
  %v0_f26c102 = load i32, i32* @r5, align 4
  %v1_f26c103 = add i32 %v0_f26c102, 12
  %v2_f26c104 = inttoptr i32 %v1_f26c103 to i32*
  %v3_f26c105 = load i32, i32* %v2_f26c104, align 4
  store i32 %v3_f26c105, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f270101107 = icmp eq i32 %v3_f26c105, 0
  store i1 %v2_f270101107, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f270101107, label %dec_label_pc_f108, label %dec_label_pc_f278.lr.ph

dec_label_pc_f108:                                ; preds = %dec_label_pc_f26c.loopexit, %dec_label_pc_f26c.preheader, %dec_label_pc_f0e4, %bb347, %dec_label_pc_fbe8, %dec_label_pc_f11c, %dec_label_pc_fce0, %dec_label_pc_fc2c
  %v3_f108 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f108, i32* %r3.global-to-local, align 4
  %v1_f10c = add i32 %v3_f108, 1
  store i32 %v1_f10c, i32* %r2.global-to-local, align 4
  %v2_f110 = icmp ugt i32 %v1_f10c, 254
  store i1 %v2_f110, i1* %cpsr_c.global-to-local, align 1
  %v7_f110 = icmp eq i32 %v1_f10c, 255
  store i1 %v7_f110, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f10c, i32* %stack_var_-52, align 4
  %v8_f118 = icmp sgt i32 %v1_f10c, 255
  br i1 %v8_f118, label %dec_label_pc_eab0, label %dec_label_pc_f11c

dec_label_pc_f11c:                                ; preds = %dec_label_pc_f108, %dec_label_pc_f084
  %v0_f128 = phi i32 [ %v1_f10c, %dec_label_pc_f108 ], [ 0, %dec_label_pc_f084 ]
  store i32 ptrtoint (i32* @global_var_1bc48.138 to i32), i32* %ip.global-to-local, align 4
  %v3_f120 = mul i32 %v0_f128, 256
  store i32 %v3_f120, i32* %r3.global-to-local, align 4
  %v2_f124 = load i32, i32* @global_var_1bc48.138, align 4
  store i32 %v2_f124, i32* %r1.global-to-local, align 4
  %v2_f12c = mul i32 %v0_f128, 288
  store i32 %v2_f12c, i32* %r2.global-to-local, align 4
  %v2_f130 = add i32 %v2_f124, %v2_f12c
  store i32 %v2_f130, i32* @r5, align 4
  %v1_f134 = add i32 %v2_f130, 4
  %v2_f134 = inttoptr i32 %v1_f134 to i32*
  %v3_f134 = load i32, i32* %v2_f134, align 4
  store i32 %v3_f134, i32* @r4, align 4
  %v2_f138 = icmp eq i32 %v3_f134, -1
  store i1 %v2_f138, i1* %cpsr_c.global-to-local, align 1
  %v7_f138 = icmp eq i32 %v3_f134, -1
  store i1 %v7_f138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f138, label %dec_label_pc_f108, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f11c
  %v3_f140 = udiv i32 %v3_f134, 32
  %v3_f144 = mul nuw nsw i32 %v3_f140, 4
  store i32 %v2_f020, i32* %lr.global-to-local, align 4
  %v2_f14c = add i32 %v3_f144, %v2_f020
  store i32 %v2_f14c, i32* %r3.global-to-local, align 4
  %v1_f150 = add i32 %v2_f14c, -312
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  %v1_f154 = urem i32 %v3_f134, 32
  store i32 %v1_f154, i32* %r1.global-to-local, align 4
  %v2_f158 = add nsw i32 %v1_f154, -1
  %v3_f158 = shl i32 1, %v2_f158
  %v4_f158 = and i32 %v3_f150, %v3_f158
  %v5_f158 = icmp ne i32 %v4_f158, 0
  store i1 %v5_f158, i1* %cpsr_c.global-to-local, align 1
  %v6_f158 = lshr i32 %v3_f150, %v1_f154
  store i32 %v6_f158, i32* %r2.global-to-local, align 4
  %v1_f15c = urem i32 %v6_f158, 2
  %v2_f15c = icmp eq i32 %v1_f15c, 0
  store i1 %v2_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f15c, label %dec_label_pc_f0e4, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f140
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_f770, i32* %r3.global-to-local, align 4
  store i32 %v2_f6bc, i32* %ip.global-to-local, align 4
  store i32 %v3_f134, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_f194 = call i32 @function_11404(i32 %v3_f134, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f6bc)
  %v3_f198 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f198, i32* %r3.global-to-local, align 4
  %v2_f19c = or i32 %v3_f198, %v6_f194
  store i32 %v2_f19c, i32* %r0.global-to-local, align 4
  %v4_f19c = icmp eq i32 %v2_f19c, 0
  store i1 %v4_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f19c, label %dec_label_pc_f1a4, label %dec_label_pc_fce0

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f164
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_f1a8 = load i32, i32* @r5, align 4
  %v2_f1a8 = add i32 %v1_f1a8, 12
  %v3_f1a8 = inttoptr i32 %v2_f1a8 to i32*
  store i32 2, i32* %v3_f1a8, align 4
  %v0_f1ac = call i32 @function_dab8()
  store i32 %v0_f1ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1bbe4.132 to i32), i32* %r3.global-to-local, align 4
  %v3_f1b4 = load i8, i8* @global_var_1bbe5.133, align 1
  %v4_f1b4 = zext i8 %v3_f1b4 to i32
  store i32 %v4_f1b4, i32* %r2.global-to-local, align 4
  %v2_f1b8 = load i8, i8* bitcast (i8** @global_var_1bbe4.132 to i8*), align 4
  %v3_f1b8 = zext i8 %v2_f1b8 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f1bc = mul nuw nsw i32 %v4_f1b4, 256
  %v5_f1bc = or i32 %v3_f1b8, %v4_f1bc
  store i32 %v5_f1bc, i32* %r1.global-to-local, align 4
  %v2_f1c0 = call i32 @function_10a04(i32 %v0_f1ac, i32 %v5_f1bc)
  store i32 ptrtoint (i32* @global_var_1bbb4.128 to i32), i32* %r3.global-to-local, align 4
  %v2_f1c8 = load i32, i32* @global_var_1bbb4.128, align 4
  store i32 %v2_f1c8, i32* %lr.global-to-local, align 4
  %v1_f1d0 = load i32, i32* @r6, align 4
  %v9_f1d0 = icmp eq i32 %v2_f1c8, %v1_f1d0
  store i1 %v9_f1d0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f1d4 = urem i32 %v2_f1c0, 65536
  store i32 %v3_f1d4, i32* %r0.global-to-local, align 4
  %v7_f1d8 = icmp sgt i32 %v2_f1c8, %v1_f1d0
  br i1 %v7_f1d8, label %dec_label_pc_f1dc, label %dec_label_pc_fcc8

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1a4
  %v2_f1e0 = load i32, i32* @global_var_1bbe0.130, align 4
  store i32 %v2_f1e0, i32* %r3.global-to-local, align 4
  store i32 %v1_f1d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f1fc

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f214, %dec_label_pc_f1fc
  %v1_f1ec = add i32 %v0_f1ec, 1
  store i32 %v1_f1ec, i32* %ip.global-to-local, align 4
  %v3_f1f0 = icmp uge i32 %v1_f1ec, %v2_f1c8
  store i1 %v3_f1f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f1f0 = icmp eq i32 %v1_f1ec, %v2_f1c8
  store i1 %v9_f1f0, i1* %cpsr_z.global-to-local, align 1
  %v1_f1f4 = add i32 %v0_f1f4, 16
  store i32 %v1_f1f4, i32* %r3.global-to-local, align 4
  br i1 %v9_f1f0, label %dec_label_pc_fcc8, label %dec_label_pc_f1fc

dec_label_pc_f1fc:                                ; preds = %dec_label_pc_f1ec, %dec_label_pc_f1dc
  %v0_f1ec = phi i32 [ %v1_f1ec, %dec_label_pc_f1ec ], [ %v1_f1d0, %dec_label_pc_f1dc ]
  %v0_f1f4 = phi i32 [ %v1_f1f4, %dec_label_pc_f1ec ], [ %v2_f1e0, %dec_label_pc_f1dc ]
  store i32 %v0_f1f4, i32* %r1.global-to-local, align 4
  %v1_f200 = add i32 %v0_f1f4, 9
  %v2_f200 = inttoptr i32 %v1_f200 to i8*
  %v3_f200 = load i8, i8* %v2_f200, align 1
  %v4_f200 = zext i8 %v3_f200 to i32
  store i32 %v4_f200, i32* %r2.global-to-local, align 4
  %v1_f204 = add i32 %v0_f1f4, 8
  %v2_f204 = inttoptr i32 %v1_f204 to i8*
  %v3_f204 = load i8, i8* %v2_f204, align 1
  %v4_f204 = zext i8 %v3_f204 to i32
  %v4_f208 = mul nuw nsw i32 %v4_f200, 256
  %v5_f208 = or i32 %v4_f204, %v4_f208
  store i32 %v5_f208, i32* %r3.global-to-local, align 4
  %v3_f20c = icmp uge i32 %v5_f208, %v3_f1d4
  store i1 %v3_f20c, i1* %cpsr_c.global-to-local, align 1
  %v9_f20c = icmp eq i32 %v5_f208, %v3_f1d4
  store i1 %v9_f20c, i1* %cpsr_z.global-to-local, align 1
  %v2_f210 = xor i1 %v9_f20c, true
  %v3_f210 = and i1 %v3_f20c, %v2_f210
  br i1 %v3_f210, label %dec_label_pc_f1ec, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f1fc
  %v1_f214 = add i32 %v0_f1f4, 10
  %v2_f214 = inttoptr i32 %v1_f214 to i8*
  %v3_f214 = load i8, i8* %v2_f214, align 1
  %v4_f214 = zext i8 %v3_f214 to i32
  store i32 %v4_f214, i32* %r3.global-to-local, align 4
  %v1_f218 = add i32 %v0_f1f4, 11
  %v2_f218 = inttoptr i32 %v1_f218 to i8*
  %v3_f218 = load i8, i8* %v2_f218, align 1
  %v4_f218 = zext i8 %v3_f218 to i32
  store i32 %v4_f218, i32* %r2.global-to-local, align 4
  %v4_f21c = mul nuw nsw i32 %v4_f218, 256
  %v5_f21c = or i32 %v4_f21c, %v4_f214
  store i32 %v5_f21c, i32* %r3.global-to-local, align 4
  %v3_f220 = icmp uge i32 %v5_f21c, %v3_f1d4
  store i1 %v3_f220, i1* %cpsr_c.global-to-local, align 1
  %v9_f220 = icmp eq i32 %v5_f21c, %v3_f1d4
  store i1 %v9_f220, i1* %cpsr_z.global-to-local, align 1
  %v2_f224 = xor i1 %v3_f220, true
  %v3_f224 = or i1 %v9_f220, %v2_f224
  br i1 %v3_f224, label %dec_label_pc_f1ec, label %dec_label_pc_fccc

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f558, %dec_label_pc_f410, %dec_label_pc_f574
  store i32 %v3_f410, i32* %r1.global-to-local, align 4
  %v0_f230 = load i32, i32* @sb, align 4
  store i32 %v0_f230, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1353c.279 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_f23c = call i32 @function_104c0(i32 %v0_f230, i32 %v3_f410, i32 ptrtoint ([5 x i8]* @global_var_1353c.279 to i32), i32 4)
  store i32 %v5_f23c, i32* %r0.global-to-local, align 4
  %v3_f240 = icmp eq i32 %v5_f23c, -1
  store i1 %v3_f240, i1* %cpsr_c.global-to-local, align 1
  %v8_f240 = icmp eq i32 %v5_f23c, -1
  store i1 %v8_f240, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f23c, i32* @r7, align 4
  br i1 %v3_f240, label %dec_label_pc_f24c, label %dec_label_pc_f580

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f22c
  %v0_f24c = load i32, i32* @sb, align 4
  store i32 %v0_f24c, i32* %r0.global-to-local, align 4
  %v0_f250 = load i32, i32* @r5, align 4
  %v1_f250 = add i32 %v0_f250, 24
  %v2_f250 = inttoptr i32 %v1_f250 to i32*
  %v3_f250 = load i32, i32* %v2_f250, align 4
  store i32 %v3_f250, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13544.281 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_f25c = call i32 @function_104c0(i32 %v0_f24c, i32 %v3_f250, i32 ptrtoint ([6 x i8]* @global_var_13544.281 to i32), i32 5)
  store i32 %v5_f25c, i32* %r0.global-to-local, align 4
  %v3_f260 = icmp eq i32 %v5_f25c, -1
  store i1 %v3_f260, i1* %cpsr_c.global-to-local, align 1
  %v8_f260 = icmp eq i32 %v5_f25c, -1
  store i1 %v8_f260, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f25c, i32* @r7, align 4
  br i1 %v3_f260, label %dec_label_pc_f26c.loopexit, label %dec_label_pc_f580

dec_label_pc_f26c.loopexit:                       ; preds = %dec_label_pc_f400, %dec_label_pc_f95c, %dec_label_pc_f2f0, %dec_label_pc_f24c, %dec_label_pc_fc38
  %v0_f26c = load i32, i32* @r5, align 4
  %v1_f26c = add i32 %v0_f26c, 12
  %v2_f26c = inttoptr i32 %v1_f26c to i32*
  %v3_f26c = load i32, i32* %v2_f26c, align 4
  store i32 %v3_f26c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f270101 = icmp eq i32 %v3_f26c, 0
  store i1 %v2_f270101, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f270101, label %dec_label_pc_f108, label %dec_label_pc_f278.lr.ph

dec_label_pc_f278.lr.ph:                          ; preds = %dec_label_pc_f26c.preheader, %dec_label_pc_f26c.loopexit
  %v0_f278133 = phi i32 [ %v0_f26c, %dec_label_pc_f26c.loopexit ], [ %v0_f26c102, %dec_label_pc_f26c.preheader ]
  br label %dec_label_pc_f278

dec_label_pc_f270thread-pre-split.thread:         ; preds = %dec_label_pc_f654, %dec_label_pc_f708, %dec_label_pc_f7bc, %dec_label_pc_f870, %dec_label_pc_fa7c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f278

dec_label_pc_f270thread-pre-split:                ; preds = %dec_label_pc_f69c, %dec_label_pc_f750, %dec_label_pc_f804, %dec_label_pc_f8b8, %dec_label_pc_fac4, %dec_label_pc_faa8, %dec_label_pc_f7e8, %dec_label_pc_f89c, %dec_label_pc_f734, %dec_label_pc_f680
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f270thread-pre-split.thread, %dec_label_pc_f270thread-pre-split, %dec_label_pc_f278.lr.ph
  %v0_fc84 = phi i32 [ %v0_f278133, %dec_label_pc_f278.lr.ph ], [ %v0_f2f0, %dec_label_pc_f270thread-pre-split ], [ %v0_f2f0, %dec_label_pc_f270thread-pre-split.thread ]
  %v1_f278 = add i32 %v0_fc84, 24
  %v2_f278 = inttoptr i32 %v1_f278 to i32*
  %v3_f278 = load i32, i32* %v2_f278, align 4
  store i32 %v3_f278, i32* %r3.global-to-local, align 4
  %v2_f27c = icmp ugt i32 %v3_f278, 255
  store i1 %v2_f27c, i1* %cpsr_c.global-to-local, align 1
  %v7_f27c = icmp eq i32 %v3_f278, 256
  store i1 %v7_f27c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_fc84, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_f27c, label %dec_label_pc_fc84, label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f278, %dec_label_pc_fc84
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_f290, align 4
  %v0_f294 = load i32, i32* @r5, align 4
  %v1_f294 = add i32 %v0_f294, 24
  %v2_f294 = inttoptr i32 %v1_f294 to i32*
  %v3_f294 = load i32, i32* %v2_f294, align 4
  store i32 %v3_f294, i32* %r2.global-to-local, align 4
  %v0_f298 = load i32, i32* @sb, align 4
  %v2_f298 = add i32 %v0_f298, %v3_f294
  store i32 %v2_f298, i32* @r4, align 4
  %v1_f29c = add i32 %v0_f294, 4
  %v2_f29c = inttoptr i32 %v1_f29c to i32*
  %v3_f29c = load i32, i32* %v2_f29c, align 4
  store i32 %v3_f29c, i32* %r0.global-to-local, align 4
  %v1_f2a0 = sub i32 256, %v3_f294
  store i32 %v1_f2a0, i32* %r2.global-to-local, align 4
  store i32 %v2_f298, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f2ac = inttoptr i32 %v2_f298 to i32*
  %v5_f2ac = call i32 @function_11460(i32 %v3_f29c, i32* %v4_f2ac, i32 %v1_f2a0, i32 16384)
  store i32 %v5_f2ac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2b0 = icmp eq i32 %v5_f2ac, 0
  store i1 %v2_f2b0, i1* %cpsr_z.global-to-local, align 1
  %tmp313 = icmp slt i32 %v5_f2ac, 1
  br i1 %tmp313, label %dec_label_pc_fbdc, label %dec_label_pc_f2b8

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f288
  %v0_f2b8 = load i32, i32* @r6, align 4
  store i32 %v0_f2b8, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f2c0

dec_label_pc_f2c0:                                ; preds = %bb315, %dec_label_pc_f2b8
  %v3_f2c8 = phi i32 [ %v1_f2cc, %bb315 ], [ %v0_f2b8, %dec_label_pc_f2b8 ]
  %v1_f2c0 = load i32, i32* @r4, align 4
  %v2_f2c0 = add i32 %v1_f2c0, %v3_f2c8
  %v3_f2c0 = inttoptr i32 %v2_f2c0 to i8*
  %v4_f2c0 = load i8, i8* %v3_f2c0, align 1
  %v6_f2c0 = zext i8 %v4_f2c0 to i32
  store i32 %v6_f2c0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2c4 = icmp eq i8 %v4_f2c0, 0
  store i1 %v2_f2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2c4, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_f2c0
  %v1_f2c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_f2c8 = trunc i32 %v1_f2c8 to i8
  store i8 %v2_f2c8, i8* %v3_f2c0, align 1
  %v0_f2cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb315

bb315:                                            ; preds = %dec_label_pc_f2c0, %bb314
  %v0_f2cc = phi i32 [ %v3_f2c8, %dec_label_pc_f2c0 ], [ %v0_f2cc.pre, %bb314 ]
  %v1_f2cc = add i32 %v0_f2cc, 1
  store i32 %v1_f2cc, i32* %r2.global-to-local, align 4
  %v3_f2d0 = icmp uge i32 %v5_f2ac, %v1_f2cc
  store i1 %v3_f2d0, i1* %cpsr_c.global-to-local, align 1
  %v9_f2d0 = icmp eq i32 %v5_f2ac, %v1_f2cc
  store i1 %v9_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f2d0, label %dec_label_pc_f2d8, label %dec_label_pc_f2c0

dec_label_pc_f2d8:                                ; preds = %bb315, %dec_label_pc_fbe0
  store i32 ptrtoint (i32* @global_var_1bbe8.126 to i32), i32* @lr, align 4
  %v0_f2dc = load i32, i32* @r5, align 4
  %v1_f2dc = add i32 %v0_f2dc, 24
  %v2_f2dc = inttoptr i32 %v1_f2dc to i32*
  %v3_f2dc = load i32, i32* %v2_f2dc, align 4
  %v2_f2e0 = load i32, i32* @global_var_1bbe8.126, align 4
  store i32 %v2_f2e0, i32* %r3.global-to-local, align 4
  %v2_f2e4 = add i32 %v3_f2dc, %v5_f2ac
  store i32 %v2_f2e4, i32* %ip.global-to-local, align 4
  store i32 %v2_f2e4, i32* %v2_f2dc, align 4
  %v0_f2ec = load i32, i32* %r3.global-to-local, align 4
  %v1_f2ec = load i32, i32* @r5, align 4
  %v2_f2ec = add i32 %v1_f2ec, 8
  %v3_f2ec = inttoptr i32 %v2_f2ec to i32*
  store i32 %v0_f2ec, i32* %v3_f2ec, align 4
  br label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_fa58, %dec_label_pc_f2d8
  %v0_f2f0 = load i32, i32* @r5, align 4
  %v1_f2f0 = add i32 %v0_f2f0, 12
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i32*
  %v3_f2f0 = load i32, i32* %v2_f2f0, align 4
  store i32 %v3_f2f0, i32* %r2.global-to-local, align 4
  %v1_f2f4 = add i32 %v3_f2f0, -2
  store i32 %v1_f2f4, i32* %r3.global-to-local, align 4
  %v7_f2f8 = icmp eq i32 %v1_f2f4, 8
  store i1 %v7_f2f8, i1* %cpsr_z.global-to-local, align 1
  %v5_f2fc = and i32 %v1_f2f4, 1073741824
  %v6_f2fc = icmp ne i32 %v5_f2fc, 0
  store i1 %v6_f2fc, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f2f0, label %dec_label_pc_f26c.loopexit [
    i32 2, label %dec_label_pc_f328
    i32 3, label %dec_label_pc_f410
    i32 4, label %dec_label_pc_f5c4
    i32 5, label %dec_label_pc_f654
    i32 6, label %dec_label_pc_f708
    i32 7, label %dec_label_pc_f870
    i32 8, label %dec_label_pc_f7bc
    i32 9, label %dec_label_pc_fa7c
    i32 10, label %dec_label_pc_f924
  ]

dec_label_pc_f328:                                ; preds = %dec_label_pc_f2f0
  %v1_f32c = add i32 %v0_f2f0, 24
  %v2_f32c = inttoptr i32 %v1_f32c to i32*
  %v3_f32c = load i32, i32* %v2_f32c, align 4
  store i32 %v3_f32c, i32* %ip.global-to-local, align 4
  %v0_f330 = load i32, i32* @sb, align 4
  store i32 %v0_f330, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_f33c = add i32 %v0_f2f0, 29
  store i32 %v1_f33c, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_f34892 = icmp eq i32 %v3_f32c, 0
  store i1 %v3_f34892, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f34892, i1* %cpsr_z.global-to-local, align 1
  %v6_f34c99 = icmp sgt i32 %v3_f32c, 0
  br i1 %v6_f34c99, label %dec_label_pc_f350.preheader, label %dec_label_pc_f3f0

dec_label_pc_f348.loopexit:                       ; preds = %dec_label_pc_f368
  %v2_f370 = add i32 %v1_f370, 2
  store i32 %v2_f370, i32* @r6, align 4
  %v2_f374 = add i32 %v1_f374, 2
  store i32 %v2_f374, i32* @r4, align 4
  %v2_f378 = add i32 %v1_f378, 2
  store i32 %v2_f378, i32* @r7, align 4
  %v3_f348 = icmp uge i32 %v2_f378, %v1_f348
  store i1 %v3_f348, i1* %cpsr_c.global-to-local, align 1
  %v9_f348 = icmp eq i32 %v2_f378, %v1_f348
  store i1 %v9_f348, i1* %cpsr_z.global-to-local, align 1
  %v6_f34c = icmp slt i32 %v2_f378, %v1_f348
  br i1 %v6_f34c, label %dec_label_pc_f350.preheader, label %dec_label_pc_f3f0

dec_label_pc_f350.preheader:                      ; preds = %dec_label_pc_f328, %dec_label_pc_f348.loopexit
  %v6_f3f8169 = phi i32 [ %v6_f3f8170, %dec_label_pc_f348.loopexit ], [ %v0_f2f0, %dec_label_pc_f328 ]
  %v1_f378158 = phi i32 [ %v2_f378, %dec_label_pc_f348.loopexit ], [ 0, %dec_label_pc_f328 ]
  %v1_f370156 = phi i32 [ %v2_f370, %dec_label_pc_f348.loopexit ], [ %v0_f330, %dec_label_pc_f328 ]
  %v1_f35c154 = phi i32 [ %v1_f348, %dec_label_pc_f348.loopexit ], [ %v3_f32c, %dec_label_pc_f328 ]
  %v0_f350152 = phi i32 [ %v2_f374, %dec_label_pc_f348.loopexit ], [ %v1_f33c, %dec_label_pc_f328 ]
  br label %dec_label_pc_f350

dec_label_pc_f350:                                ; preds = %dec_label_pc_f350.preheader, %dec_label_pc_f3d0
  %v6_f3f8170 = phi i32 [ %v6_f3f8169, %dec_label_pc_f350.preheader ], [ %v0_f3d8, %dec_label_pc_f3d0 ]
  %v1_f378 = phi i32 [ %v1_f378158, %dec_label_pc_f350.preheader ], [ %v1_f3dc, %dec_label_pc_f3d0 ]
  %v1_f370 = phi i32 [ %v1_f370156, %dec_label_pc_f350.preheader ], [ %v1_f3e4, %dec_label_pc_f3d0 ]
  %v1_f348 = phi i32 [ %v1_f35c154, %dec_label_pc_f350.preheader ], [ %v3_f3d8, %dec_label_pc_f3d0 ]
  %v1_f374 = phi i32 [ %v0_f350152, %dec_label_pc_f350.preheader ], [ %v1_f3e8, %dec_label_pc_f3d0 ]
  %v1_f350 = add i32 %v1_f374, -1
  %v2_f350 = inttoptr i32 %v1_f350 to i8*
  %v3_f350 = load i8, i8* %v2_f350, align 1
  %v4_f350 = zext i8 %v3_f350 to i32
  store i32 %v4_f350, i32* %r3.global-to-local, align 4
  %v2_f354 = icmp eq i8 %v3_f350, -1
  store i1 %v2_f354, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f354, label %dec_label_pc_f35c, label %dec_label_pc_f3f0

dec_label_pc_f35c:                                ; preds = %dec_label_pc_f350
  %v0_f35c = load i32, i32* @sb, align 4
  %v2_f35c = add i32 %v0_f35c, %v1_f348
  store i32 %v2_f35c, i32* %r2.global-to-local, align 4
  %v3_f360 = icmp uge i32 %v2_f35c, %v1_f374
  store i1 %v3_f360, i1* %cpsr_c.global-to-local, align 1
  %v9_f360 = icmp eq i32 %v2_f35c, %v1_f374
  store i1 %v9_f360, i1* %cpsr_z.global-to-local, align 1
  %v2_f364 = xor i1 %v3_f360, true
  %v3_f364 = or i1 %v9_f360, %v2_f364
  br i1 %v3_f364, label %dec_label_pc_f3f0, label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f35c
  %v1_f368 = inttoptr i32 %v1_f374 to i8*
  %v2_f368 = load i8, i8* %v1_f368, align 1
  %v3_f368 = zext i8 %v2_f368 to i32
  store i32 %v3_f368, i32* %r3.global-to-local, align 4
  %v2_f36c = icmp eq i8 %v2_f368, -1
  store i1 %v2_f36c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f36c, label %dec_label_pc_f348.loopexit, label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f368
  %v2_f380 = icmp ugt i8 %v2_f368, -4
  store i1 %v2_f380, i1* %cpsr_c.global-to-local, align 1
  %v7_f380 = icmp eq i8 %v2_f368, -3
  store i1 %v7_f380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f380, label %dec_label_pc_fb30, label %dec_label_pc_f388

dec_label_pc_f388:                                ; preds = %dec_label_pc_f380
  %v1_f388 = add i32 %v1_f370, 2
  store i32 %v1_f388, i32* %r3.global-to-local, align 4
  %v3_f38c = icmp uge i32 %v2_f35c, %v1_f388
  store i1 %v3_f38c, i1* %cpsr_c.global-to-local, align 1
  %v9_f38c = icmp eq i32 %v2_f35c, %v1_f388
  store i1 %v9_f38c, i1* %cpsr_z.global-to-local, align 1
  %v2_f390 = xor i1 %v3_f38c, true
  %v3_f390 = or i1 %v9_f38c, %v2_f390
  br i1 %v3_f390, label %dec_label_pc_f3f0, label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %bb345, %dec_label_pc_fb84, %bb344, %dec_label_pc_f388
  %v0_f394 = load i32, i32* @r4, align 4
  %v1_f394 = inttoptr i32 %v0_f394 to i8*
  %v2_f394 = load i8, i8* %v1_f394, align 1
  %v3_f394 = zext i8 %v2_f394 to i32
  store i32 %v3_f394, i32* %r3.global-to-local, align 4
  %v2_f398 = icmp ugt i8 %v2_f394, -4
  store i1 %v2_f398, i1* %cpsr_c.global-to-local, align 1
  %v7_f398 = icmp eq i8 %v2_f394, -3
  store i1 %v7_f398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f398, label %bb316, label %dec_label_pc_f3a4

bb316:                                            ; preds = %dec_label_pc_f394
  %v1_f39c = load i32, i32* @r8, align 4
  %v2_f39c = trunc i32 %v1_f39c to i8
  store i8 %v2_f39c, i8* %v1_f394, align 1
  %v0_f3a0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3a0.pr, label %bb318, label %.dec_label_pc_f3a4_crit_edge

.dec_label_pc_f3a4_crit_edge:                     ; preds = %bb316
  %v0_f3a4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %.dec_label_pc_f3a4_crit_edge, %dec_label_pc_f394
  %v0_f3a4 = phi i32 [ %v0_f3a4.pre, %.dec_label_pc_f3a4_crit_edge ], [ %v3_f394, %dec_label_pc_f394 ]
  %v2_f3a4 = icmp ugt i32 %v0_f3a4, 250
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i32 %v0_f3a4, 251
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %bb317, label %bb318

bb317:                                            ; preds = %dec_label_pc_f3a4
  %v1_f3a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f3a8 = trunc i32 %v1_f3a8 to i8
  %v3_f3a8 = load i32, i32* @r4, align 4
  %v4_f3a8 = inttoptr i32 %v3_f3a8 to i8*
  store i8 %v2_f3a8, i8* %v4_f3a8, align 1
  br label %bb318

bb318:                                            ; preds = %bb316, %dec_label_pc_f3a4, %bb317
  %v0_f3ac = load i32, i32* @r4, align 4
  %v1_f3ac = add i32 %v0_f3ac, 1
  %v2_f3ac = inttoptr i32 %v1_f3ac to i8*
  %v3_f3ac = load i8, i8* %v2_f3ac, align 1
  %v4_f3ac = zext i8 %v3_f3ac to i32
  store i32 %v4_f3ac, i32* %r3.global-to-local, align 4
  %v2_f3b0 = icmp ugt i8 %v3_f3ac, -4
  store i1 %v2_f3b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b0 = icmp eq i8 %v3_f3ac, -3
  store i1 %v7_f3b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b0, label %bb319, label %dec_label_pc_f3bc

bb319:                                            ; preds = %bb318
  %v1_f3b4 = load i32, i32* @r8, align 4
  %v2_f3b4 = trunc i32 %v1_f3b4 to i8
  store i8 %v2_f3b4, i8* %v2_f3ac, align 1
  %v0_f3b8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3b8.pr, label %bb321, label %.dec_label_pc_f3bc_crit_edge

.dec_label_pc_f3bc_crit_edge:                     ; preds = %bb319
  %v0_f3bc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %.dec_label_pc_f3bc_crit_edge, %bb318
  %v0_f3bc = phi i32 [ %v0_f3bc.pre, %.dec_label_pc_f3bc_crit_edge ], [ %v4_f3ac, %bb318 ]
  %v2_f3bc = icmp ugt i32 %v0_f3bc, 250
  store i1 %v2_f3bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3bc = icmp eq i32 %v0_f3bc, 251
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3bc, label %bb320, label %bb321

bb320:                                            ; preds = %dec_label_pc_f3bc
  %v1_f3c0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f3c0 = trunc i32 %v1_f3c0 to i8
  %v3_f3c0 = load i32, i32* @r4, align 4
  %v4_f3c0 = add i32 %v3_f3c0, 1
  %v5_f3c0 = inttoptr i32 %v4_f3c0 to i8*
  store i8 %v2_f3c0, i8* %v5_f3c0, align 1
  br label %bb321

bb321:                                            ; preds = %bb319, %dec_label_pc_f3bc, %bb320
  %v0_f3c4 = load i32, i32* @r5, align 4
  %v1_f3c4 = add i32 %v0_f3c4, 4
  %v2_f3c4 = inttoptr i32 %v1_f3c4 to i32*
  %v3_f3c4 = load i32, i32* %v2_f3c4, align 4
  store i32 %v3_f3c4, i32* %r0.global-to-local, align 4
  %v0_f3c8 = load i32, i32* @r6, align 4
  br label %dec_label_pc_f3d0

dec_label_pc_f3d0:                                ; preds = %dec_label_pc_fc5c, %bb321
  %v0_f3d4 = phi i32 [ %v3_fc74, %dec_label_pc_fc5c ], [ %v3_f3c4, %bb321 ]
  %storemerge5 = phi i32 [ %v2_fb48, %dec_label_pc_fc5c ], [ %v0_f3c8, %bb321 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_fc5c ], [ 3, %bb321 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f3d4 = inttoptr i32 %storemerge5 to i32*
  %v5_f3d4 = call i32 @function_114c0(i32 %v0_f3d4, i32* %v4_f3d4, i32 %storemerge, i32 16384)
  store i32 %v5_f3d4, i32* %r0.global-to-local, align 4
  %v0_f3d8 = load i32, i32* @r5, align 4
  %v1_f3d8 = add i32 %v0_f3d8, 24
  %v2_f3d8 = inttoptr i32 %v1_f3d8 to i32*
  %v3_f3d8 = load i32, i32* %v2_f3d8, align 4
  store i32 %v3_f3d8, i32* %ip.global-to-local, align 4
  %v0_f3dc = load i32, i32* @r7, align 4
  %v1_f3dc = add i32 %v0_f3dc, 3
  store i32 %v1_f3dc, i32* @r7, align 4
  %v3_f3e0 = icmp uge i32 %v1_f3dc, %v3_f3d8
  store i1 %v3_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v9_f3e0 = icmp eq i32 %v1_f3dc, %v3_f3d8
  store i1 %v9_f3e0, i1* %cpsr_z.global-to-local, align 1
  %v0_f3e4 = load i32, i32* @r6, align 4
  %v1_f3e4 = add i32 %v0_f3e4, 3
  store i32 %v1_f3e4, i32* @r6, align 4
  %v0_f3e8 = load i32, i32* @r4, align 4
  %v1_f3e8 = add i32 %v0_f3e8, 3
  store i32 %v1_f3e8, i32* @r4, align 4
  %v5_f3ec = icmp slt i32 %v1_f3dc, %v3_f3d8
  br i1 %v5_f3ec, label %dec_label_pc_f350, label %dec_label_pc_f3f0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f348.loopexit, %dec_label_pc_f350, %dec_label_pc_f3d0, %dec_label_pc_f388, %dec_label_pc_f35c, %dec_label_pc_f328, %dec_label_pc_fb30.dec_label_pc_f3f0.loopexit_crit_edge
  %v6_f3f8 = phi i32 [ %v0_fb54, %dec_label_pc_fb30.dec_label_pc_f3f0.loopexit_crit_edge ], [ %v0_f2f0, %dec_label_pc_f328 ], [ %v6_f3f8170, %dec_label_pc_f350 ], [ %v0_f3d8, %dec_label_pc_f3d0 ], [ %v6_f3f8170, %dec_label_pc_f388 ], [ %v6_f3f8170, %dec_label_pc_f35c ], [ %v6_f3f8170, %dec_label_pc_f348.loopexit ]
  %v0_f400.pre = phi i32 [ %v0_f3f0.pre.pre, %dec_label_pc_fb30.dec_label_pc_f3f0.loopexit_crit_edge ], [ 0, %dec_label_pc_f328 ], [ %v1_f378, %dec_label_pc_f350 ], [ %v1_f3dc, %dec_label_pc_f3d0 ], [ %v1_f378, %dec_label_pc_f388 ], [ %v1_f378, %dec_label_pc_f35c ], [ %v2_f378, %dec_label_pc_f348.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3f0 = icmp eq i32 %v0_f400.pre, 0
  store i1 %v2_f3f0, i1* %cpsr_z.global-to-local, align 1
  %tmp322 = icmp slt i32 %v0_f400.pre, 1
  br i1 %tmp322, label %dec_label_pc_f400, label %.thread205

.thread205:                                       ; preds = %dec_label_pc_f3f0
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f3f8 = add i32 %v6_f3f8, 12
  %v8_f3f8 = inttoptr i32 %v7_f3f8 to i32*
  store i32 3, i32* %v8_f3f8, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f400:                                ; preds = %dec_label_pc_f3f0, %dec_label_pc_fad0, %dec_label_pc_f9a8, %dec_label_pc_f8c4, %dec_label_pc_f810, %dec_label_pc_f75c, %dec_label_pc_f6a8, %dec_label_pc_f610, %dec_label_pc_f580
  %v0_f400 = phi i32 [ %v1_fac4, %dec_label_pc_fad0 ], [ %v0_f9a0, %dec_label_pc_f9a8 ], [ %v1_f8b8, %dec_label_pc_f8c4 ], [ %v1_f804, %dec_label_pc_f810 ], [ %v1_f750, %dec_label_pc_f75c ], [ %v1_f69c, %dec_label_pc_f6a8 ], [ %v0_f610, %dec_label_pc_f610 ], [ %v0_f580, %dec_label_pc_f580 ], [ %v0_f400.pre, %dec_label_pc_f3f0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f400 = icmp eq i32 %v0_f400, 0
  store i1 %v2_f400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f400, label %dec_label_pc_f26c.loopexit, label %dec_label_pc_f408

dec_label_pc_f408:                                ; preds = %dec_label_pc_f400
  %v0_f408 = load i32, i32* @r5, align 4
  %v1_f408 = add i32 %v0_f408, 24
  %v2_f408 = inttoptr i32 %v1_f408 to i32*
  %v3_f408 = load i32, i32* %v2_f408, align 4
  store i32 %v3_f408, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f410:                                ; preds = %dec_label_pc_f2f0
  %v1_f410 = add i32 %v0_f2f0, 24
  %v2_f410 = inttoptr i32 %v1_f410 to i32*
  %v3_f410 = load i32, i32* %v2_f410, align 4
  store i32 %v3_f410, i32* %ip.global-to-local, align 4
  %v1_f414 = add i32 %v3_f410, -1
  store i32 %v1_f414, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f418 = icmp eq i32 %v1_f414, 0
  store i1 %v2_f418, i1* %cpsr_z.global-to-local, align 1
  %v5_f41c = icmp sgt i32 %v1_f414, 0
  br i1 %v5_f41c, label %dec_label_pc_f560, label %dec_label_pc_f22c

dec_label_pc_f540:                                ; preds = %bb323
  %v2_f540 = icmp ugt i8 %v3_f564, 35
  store i1 %v2_f540, i1* %cpsr_c.global-to-local, align 1
  %v7_f540 = icmp eq i8 %v3_f564, 36
  store i1 %v7_f540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f540, label %dec_label_pc_f574, label %dec_label_pc_f548

dec_label_pc_f548:                                ; preds = %dec_label_pc_f540
  %v2_f548 = icmp ugt i8 %v3_f564, 34
  store i1 %v2_f548, i1* %cpsr_c.global-to-local, align 1
  %v7_f548 = icmp eq i8 %v3_f564, 35
  store i1 %v7_f548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f548, label %dec_label_pc_f574, label %dec_label_pc_f550

dec_label_pc_f550:                                ; preds = %dec_label_pc_f548
  %v2_f550 = icmp ugt i8 %v3_f564, 36
  store i1 %v2_f550, i1* %cpsr_c.global-to-local, align 1
  %v7_f550 = icmp eq i8 %v3_f564, 37
  store i1 %v7_f550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f550, label %dec_label_pc_f574, label %dec_label_pc_f558

dec_label_pc_f558:                                ; preds = %dec_label_pc_f550
  %v1_f558 = add i32 %v0_f574, -1
  store i32 %v1_f558, i32* %r0.global-to-local, align 4
  %v2_f558 = icmp ne i32 %v0_f574, 0
  store i1 %v2_f558, i1* %cpsr_c.global-to-local, align 1
  %v7_f558 = icmp eq i32 %v0_f574, 1
  store i1 %v7_f558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f558, label %dec_label_pc_f22c, label %dec_label_pc_f560

dec_label_pc_f560:                                ; preds = %dec_label_pc_f410, %dec_label_pc_f558
  %v0_f574 = phi i32 [ %v1_f558, %dec_label_pc_f558 ], [ %v1_f414, %dec_label_pc_f410 ]
  %v2_f560 = add i32 %v0_f574, %v0_f2f0
  store i32 %v2_f560, i32* %r3.global-to-local, align 4
  %v1_f564 = add i32 %v2_f560, 28
  %v2_f564 = inttoptr i32 %v1_f564 to i8*
  %v3_f564 = load i8, i8* %v2_f564, align 1
  %v4_f564 = zext i8 %v3_f564 to i32
  store i32 %v4_f564, i32* %r3.global-to-local, align 4
  %v2_f568 = icmp ugt i8 %v3_f564, 61
  store i1 %v2_f568, i1* %cpsr_c.global-to-local, align 1
  %v7_f568 = icmp eq i8 %v3_f564, 62
  store i1 %v7_f568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f568, label %dec_label_pc_f574, label %bb323

bb323:                                            ; preds = %dec_label_pc_f560
  %v3_f56c = icmp ugt i8 %v3_f564, 57
  store i1 %v3_f56c, i1* %cpsr_c.global-to-local, align 1
  %v8_f56c = icmp eq i8 %v3_f564, 58
  store i1 %v8_f56c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f56c, label %dec_label_pc_f574, label %dec_label_pc_f540

dec_label_pc_f574:                                ; preds = %dec_label_pc_f560, %bb323, %dec_label_pc_f550, %dec_label_pc_f548, %dec_label_pc_f540
  %v1_f574 = add i32 %v0_f574, 1
  store i32 %v1_f574, i32* @r7, align 4
  %v2_f578 = icmp eq i32 %v1_f574, -1
  store i1 %v2_f578, i1* %cpsr_c.global-to-local, align 1
  %v7_f578 = icmp eq i32 %v0_f574, -2
  store i1 %v7_f578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f578, label %dec_label_pc_f22c, label %dec_label_pc_f580

dec_label_pc_f580:                                ; preds = %dec_label_pc_f574, %dec_label_pc_f24c, %dec_label_pc_f22c
  %v0_f580 = phi i32 [ %v5_f25c, %dec_label_pc_f24c ], [ %v5_f23c, %dec_label_pc_f22c ], [ %v1_f574, %dec_label_pc_f574 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f580 = icmp eq i32 %v0_f580, 0
  store i1 %v2_f580, i1* %cpsr_z.global-to-local, align 1
  %tmp324 = icmp slt i32 %v0_f580, 1
  br i1 %tmp324, label %dec_label_pc_f400, label %dec_label_pc_f588

dec_label_pc_f588:                                ; preds = %dec_label_pc_f580
  %v0_f588 = load i32, i32* @r5, align 4
  %v1_f588 = inttoptr i32 %v0_f588 to i32*
  %v2_f588 = load i32, i32* %v1_f588, align 4
  store i32 %v2_f588, i32* %r3.global-to-local, align 4
  %v1_f58c = add i32 %v0_f588, 4
  %v2_f58c = inttoptr i32 %v1_f58c to i32*
  %v3_f58c = load i32, i32* %v2_f58c, align 4
  store i32 %v3_f58c, i32* %r0.global-to-local, align 4
  %v1_f590 = add i32 %v2_f588, 12
  %v2_f590 = inttoptr i32 %v1_f590 to i8*
  %v3_f590 = load i8, i8* %v2_f590, align 1
  %v4_f590 = zext i8 %v3_f590 to i32
  store i32 %v4_f590, i32* %r2.global-to-local, align 4
  %v1_f594 = inttoptr i32 %v2_f588 to i32*
  %v2_f594 = load i32, i32* %v1_f594, align 4
  store i32 %v2_f594, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f59c = inttoptr i32 %v2_f594 to i32*
  %v5_f59c = call i32 @function_114c0(i32 %v3_f58c, i32* %v4_f59c, i32 %v4_f590, i32 16384)
  store i32 %v5_f59c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f5a4 = load i32, i32* @r5, align 4
  %v1_f5a4 = add i32 %v0_f5a4, 4
  %v2_f5a4 = inttoptr i32 %v1_f5a4 to i32*
  %v3_f5a4 = load i32, i32* %v2_f5a4, align 4
  store i32 %v3_f5a4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f5b0 = call i32 @function_114c0(i32 %v3_f5a4, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 %v5_f5b0, i32* %r0.global-to-local, align 4
  %v0_f5b4 = load i32, i32* @r5, align 4
  %v1_f5b4 = add i32 %v0_f5b4, 24
  %v2_f5b4 = inttoptr i32 %v1_f5b4 to i32*
  %v3_f5b4 = load i32, i32* %v2_f5b4, align 4
  store i32 %v3_f5b4, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_f5bc = add i32 %v0_f5b4, 12
  %v3_f5bc = inttoptr i32 %v2_f5bc to i32*
  store i32 4, i32* %v3_f5bc, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f2f0
  %v1_f5c4 = add i32 %v0_f2f0, 24
  %v2_f5c4 = inttoptr i32 %v1_f5c4 to i32*
  %v3_f5c4 = load i32, i32* %v2_f5c4, align 4
  store i32 %v3_f5c4, i32* %ip.global-to-local, align 4
  %v1_f5c8 = add i32 %v3_f5c4, -1
  store i32 %v1_f5c8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5cc = icmp eq i32 %v1_f5c8, 0
  store i1 %v2_f5cc, i1* %cpsr_z.global-to-local, align 1
  %v5_f5d0 = icmp sgt i32 %v1_f5c8, 0
  br i1 %v5_f5d0, label %dec_label_pc_f5f0, label %dec_label_pc_fc38

dec_label_pc_f5d8:                                ; preds = %bb325
  %v2_f5d8 = icmp ugt i8 %v3_f5f4, 35
  store i1 %v2_f5d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d8 = icmp eq i8 %v3_f5f4, 36
  store i1 %v7_f5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d8, label %dec_label_pc_f604, label %dec_label_pc_f5e0

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f5d8
  %v2_f5e0 = icmp ugt i8 %v3_f5f4, 34
  store i1 %v2_f5e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e0 = icmp eq i8 %v3_f5f4, 35
  store i1 %v7_f5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e0, label %dec_label_pc_f604, label %dec_label_pc_f5e8

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f5e0
  %v1_f5e8 = add i32 %v0_f604, -1
  store i32 %v1_f5e8, i32* %r0.global-to-local, align 4
  %v2_f5e8 = icmp ne i32 %v0_f604, 0
  store i1 %v2_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e8 = icmp eq i32 %v0_f604, 1
  store i1 %v7_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e8, label %dec_label_pc_fc38, label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f5c4, %dec_label_pc_f5e8
  %v0_f604 = phi i32 [ %v1_f5e8, %dec_label_pc_f5e8 ], [ %v1_f5c8, %dec_label_pc_f5c4 ]
  %v2_f5f0 = add i32 %v0_f604, %v0_f2f0
  store i32 %v2_f5f0, i32* %r3.global-to-local, align 4
  %v1_f5f4 = add i32 %v2_f5f0, 28
  %v2_f5f4 = inttoptr i32 %v1_f5f4 to i8*
  %v3_f5f4 = load i8, i8* %v2_f5f4, align 1
  %v4_f5f4 = zext i8 %v3_f5f4 to i32
  store i32 %v4_f5f4, i32* %r3.global-to-local, align 4
  %v2_f5f8 = icmp ugt i8 %v3_f5f4, 61
  store i1 %v2_f5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f8 = icmp eq i8 %v3_f5f4, 62
  store i1 %v7_f5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f8, label %dec_label_pc_f604, label %bb325

bb325:                                            ; preds = %dec_label_pc_f5f0
  %v3_f5fc = icmp ugt i8 %v3_f5f4, 57
  store i1 %v3_f5fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f5fc = icmp eq i8 %v3_f5f4, 58
  store i1 %v8_f5fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5fc, label %dec_label_pc_f604, label %dec_label_pc_f5d8

dec_label_pc_f604:                                ; preds = %dec_label_pc_f5f0, %bb325, %dec_label_pc_f5e0, %dec_label_pc_f5d8
  %v1_f604 = add i32 %v0_f604, 1
  store i32 %v1_f604, i32* @r7, align 4
  %v2_f608 = icmp eq i32 %v1_f604, -1
  store i1 %v2_f608, i1* %cpsr_c.global-to-local, align 1
  %v7_f608 = icmp eq i32 %v0_f604, -2
  store i1 %v7_f608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f608, label %dec_label_pc_fc38, label %dec_label_pc_f610

dec_label_pc_f610:                                ; preds = %dec_label_pc_f604, %dec_label_pc_fc38
  %v0_f610 = phi i32 [ %v5_fc48, %dec_label_pc_fc38 ], [ %v1_f604, %dec_label_pc_f604 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f610 = icmp eq i32 %v0_f610, 0
  store i1 %v2_f610, i1* %cpsr_z.global-to-local, align 1
  %tmp326 = icmp slt i32 %v0_f610, 1
  br i1 %tmp326, label %dec_label_pc_f400, label %dec_label_pc_f618

dec_label_pc_f618:                                ; preds = %dec_label_pc_f610
  %v0_f618 = load i32, i32* @r5, align 4
  %v1_f618 = inttoptr i32 %v0_f618 to i32*
  %v2_f618 = load i32, i32* %v1_f618, align 4
  store i32 %v2_f618, i32* %r3.global-to-local, align 4
  %v1_f61c = add i32 %v0_f618, 4
  %v2_f61c = inttoptr i32 %v1_f61c to i32*
  %v3_f61c = load i32, i32* %v2_f61c, align 4
  store i32 %v3_f61c, i32* %r0.global-to-local, align 4
  %v1_f620 = add i32 %v2_f618, 13
  %v2_f620 = inttoptr i32 %v1_f620 to i8*
  %v3_f620 = load i8, i8* %v2_f620, align 1
  %v4_f620 = zext i8 %v3_f620 to i32
  store i32 %v4_f620, i32* %r2.global-to-local, align 4
  %v1_f624 = add i32 %v2_f618, 4
  %v2_f624 = inttoptr i32 %v1_f624 to i32*
  %v3_f624 = load i32, i32* %v2_f624, align 4
  store i32 %v3_f624, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f62c = inttoptr i32 %v3_f624 to i32*
  %v5_f62c = call i32 @function_114c0(i32 %v3_f61c, i32* %v4_f62c, i32 %v4_f620, i32 16384)
  store i32 %v5_f62c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f634 = load i32, i32* @r5, align 4
  %v1_f634 = add i32 %v0_f634, 4
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  %v3_f634 = load i32, i32* %v2_f634, align 4
  store i32 %v3_f634, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f640 = call i32 @function_114c0(i32 %v3_f634, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 %v5_f640, i32* %r0.global-to-local, align 4
  %v0_f644 = load i32, i32* @r5, align 4
  %v1_f644 = add i32 %v0_f644, 24
  %v2_f644 = inttoptr i32 %v1_f644 to i32*
  %v3_f644 = load i32, i32* %v2_f644, align 4
  store i32 %v3_f644, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_f64c = add i32 %v0_f644, 12
  %v3_f64c = inttoptr i32 %v2_f64c to i32*
  store i32 5, i32* %v3_f64c, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f654:                                ; preds = %dec_label_pc_f2f0
  %v1_f654 = add i32 %v0_f2f0, 24
  %v2_f654 = inttoptr i32 %v1_f654 to i32*
  %v3_f654 = load i32, i32* %v2_f654, align 4
  store i32 %v3_f654, i32* %ip.global-to-local, align 4
  %v1_f658 = add i32 %v3_f654, -1
  store i32 %v1_f658, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f65c = icmp eq i32 %v1_f658, 0
  store i1 %v2_f65c, i1* %cpsr_z.global-to-local, align 1
  %v5_f660 = icmp sgt i32 %v1_f658, 0
  br i1 %v5_f660, label %dec_label_pc_f688, label %dec_label_pc_f270thread-pre-split.thread

dec_label_pc_f668:                                ; preds = %bb327
  %v2_f668 = icmp ugt i8 %v3_f68c, 35
  store i1 %v2_f668, i1* %cpsr_c.global-to-local, align 1
  %v7_f668 = icmp eq i8 %v3_f68c, 36
  store i1 %v7_f668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f668, label %dec_label_pc_f69c, label %dec_label_pc_f670

dec_label_pc_f670:                                ; preds = %dec_label_pc_f668
  %v2_f670 = icmp ugt i8 %v3_f68c, 34
  store i1 %v2_f670, i1* %cpsr_c.global-to-local, align 1
  %v7_f670 = icmp eq i8 %v3_f68c, 35
  store i1 %v7_f670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f670, label %dec_label_pc_f69c, label %dec_label_pc_f678

dec_label_pc_f678:                                ; preds = %dec_label_pc_f670
  %v2_f678 = icmp ugt i8 %v3_f68c, 36
  store i1 %v2_f678, i1* %cpsr_c.global-to-local, align 1
  %v7_f678 = icmp eq i8 %v3_f68c, 37
  store i1 %v7_f678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f678, label %dec_label_pc_f69c, label %dec_label_pc_f680

dec_label_pc_f680:                                ; preds = %dec_label_pc_f678
  %v1_f680 = add i32 %v0_f69c, -1
  store i32 %v1_f680, i32* %r0.global-to-local, align 4
  %v2_f680 = icmp ne i32 %v0_f69c, 0
  store i1 %v2_f680, i1* %cpsr_c.global-to-local, align 1
  %v7_f680 = icmp eq i32 %v0_f69c, 1
  store i1 %v7_f680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f680, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f688

dec_label_pc_f688:                                ; preds = %dec_label_pc_f654, %dec_label_pc_f680
  %v0_f69c = phi i32 [ %v1_f680, %dec_label_pc_f680 ], [ %v1_f658, %dec_label_pc_f654 ]
  %v2_f688 = add i32 %v0_f69c, %v0_f2f0
  store i32 %v2_f688, i32* %r3.global-to-local, align 4
  %v1_f68c = add i32 %v2_f688, 28
  %v2_f68c = inttoptr i32 %v1_f68c to i8*
  %v3_f68c = load i8, i8* %v2_f68c, align 1
  %v4_f68c = zext i8 %v3_f68c to i32
  store i32 %v4_f68c, i32* %r3.global-to-local, align 4
  %v2_f690 = icmp ugt i8 %v3_f68c, 61
  store i1 %v2_f690, i1* %cpsr_c.global-to-local, align 1
  %v7_f690 = icmp eq i8 %v3_f68c, 62
  store i1 %v7_f690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f690, label %dec_label_pc_f69c, label %bb327

bb327:                                            ; preds = %dec_label_pc_f688
  %v3_f694 = icmp ugt i8 %v3_f68c, 57
  store i1 %v3_f694, i1* %cpsr_c.global-to-local, align 1
  %v8_f694 = icmp eq i8 %v3_f68c, 58
  store i1 %v8_f694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f694, label %dec_label_pc_f69c, label %dec_label_pc_f668

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f688, %bb327, %dec_label_pc_f678, %dec_label_pc_f670, %dec_label_pc_f668
  %v1_f69c = add i32 %v0_f69c, 1
  store i32 %v1_f69c, i32* @r7, align 4
  %v2_f6a0 = icmp eq i32 %v1_f69c, -1
  store i1 %v2_f6a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a0 = icmp eq i32 %v0_f69c, -2
  store i1 %v7_f6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a0, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f6a8

dec_label_pc_f6a8:                                ; preds = %dec_label_pc_f69c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6a8 = icmp eq i32 %v1_f69c, 0
  store i1 %v2_f6a8, i1* %cpsr_z.global-to-local, align 1
  %tmp328 = icmp slt i32 %v1_f69c, 1
  br i1 %tmp328, label %dec_label_pc_f400, label %dec_label_pc_f6b0

dec_label_pc_f6b0:                                ; preds = %dec_label_pc_f6a8
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f6b4 = call i32 @function_ff28(i32 17)
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v3_f6c4 = call i32 @function_fe44(i32 17, i32* nonnull %stack_var_-56)
  store i32 %v3_f6c4, i32* %r0.global-to-local, align 4
  %v3_f6c8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f6c8, i32* %r2.global-to-local, align 4
  store i32 %v3_f6c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f6d4 = load i32, i32* @r5, align 4
  %v1_f6d4 = add i32 %v0_f6d4, 4
  %v2_f6d4 = inttoptr i32 %v1_f6d4 to i32*
  %v3_f6d4 = load i32, i32* %v2_f6d4, align 4
  store i32 %v3_f6d4, i32* %r0.global-to-local, align 4
  %v4_f6d8 = inttoptr i32 %v3_f6c4 to i32*
  %v5_f6d8 = call i32 @function_114c0(i32 %v3_f6d4, i32* %v4_f6d8, i32 %v3_f6c8, i32 16384)
  store i32 %v5_f6d8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f6e8 = load i32, i32* @r5, align 4
  %v1_f6e8 = add i32 %v0_f6e8, 4
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i32*
  %v3_f6e8 = load i32, i32* %v2_f6e8, align 4
  store i32 %v3_f6e8, i32* %r0.global-to-local, align 4
  %v5_f6ec = call i32 @function_114c0(i32 %v3_f6e8, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_f6f4 = call i32 @function_fe70(i32 17)
  store i32 %v1_f6f4, i32* %r0.global-to-local, align 4
  %v0_f6f8 = load i32, i32* @r5, align 4
  %v1_f6f8 = add i32 %v0_f6f8, 24
  %v2_f6f8 = inttoptr i32 %v1_f6f8 to i32*
  %v3_f6f8 = load i32, i32* %v2_f6f8, align 4
  store i32 %v3_f6f8, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_f700 = add i32 %v0_f6f8, 12
  %v3_f700 = inttoptr i32 %v2_f700 to i32*
  store i32 6, i32* %v3_f700, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f708:                                ; preds = %dec_label_pc_f2f0
  %v1_f708 = add i32 %v0_f2f0, 24
  %v2_f708 = inttoptr i32 %v1_f708 to i32*
  %v3_f708 = load i32, i32* %v2_f708, align 4
  store i32 %v3_f708, i32* %ip.global-to-local, align 4
  %v1_f70c = add i32 %v3_f708, -1
  store i32 %v1_f70c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f710 = icmp eq i32 %v1_f70c, 0
  store i1 %v2_f710, i1* %cpsr_z.global-to-local, align 1
  %v5_f714 = icmp sgt i32 %v1_f70c, 0
  br i1 %v5_f714, label %dec_label_pc_f73c, label %dec_label_pc_f270thread-pre-split.thread

dec_label_pc_f71c:                                ; preds = %bb329
  %v2_f71c = icmp ugt i8 %v3_f740, 35
  store i1 %v2_f71c, i1* %cpsr_c.global-to-local, align 1
  %v7_f71c = icmp eq i8 %v3_f740, 36
  store i1 %v7_f71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f71c, label %dec_label_pc_f750, label %dec_label_pc_f724

dec_label_pc_f724:                                ; preds = %dec_label_pc_f71c
  %v2_f724 = icmp ugt i8 %v3_f740, 34
  store i1 %v2_f724, i1* %cpsr_c.global-to-local, align 1
  %v7_f724 = icmp eq i8 %v3_f740, 35
  store i1 %v7_f724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f724, label %dec_label_pc_f750, label %dec_label_pc_f72c

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f724
  %v2_f72c = icmp ugt i8 %v3_f740, 36
  store i1 %v2_f72c, i1* %cpsr_c.global-to-local, align 1
  %v7_f72c = icmp eq i8 %v3_f740, 37
  store i1 %v7_f72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f72c, label %dec_label_pc_f750, label %dec_label_pc_f734

dec_label_pc_f734:                                ; preds = %dec_label_pc_f72c
  %v1_f734 = add i32 %v0_f750, -1
  store i32 %v1_f734, i32* %r0.global-to-local, align 4
  %v2_f734 = icmp ne i32 %v0_f750, 0
  store i1 %v2_f734, i1* %cpsr_c.global-to-local, align 1
  %v7_f734 = icmp eq i32 %v0_f750, 1
  store i1 %v7_f734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f734, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f73c

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f708, %dec_label_pc_f734
  %v0_f750 = phi i32 [ %v1_f734, %dec_label_pc_f734 ], [ %v1_f70c, %dec_label_pc_f708 ]
  %v2_f73c = add i32 %v0_f750, %v0_f2f0
  store i32 %v2_f73c, i32* %r3.global-to-local, align 4
  %v1_f740 = add i32 %v2_f73c, 28
  %v2_f740 = inttoptr i32 %v1_f740 to i8*
  %v3_f740 = load i8, i8* %v2_f740, align 1
  %v4_f740 = zext i8 %v3_f740 to i32
  store i32 %v4_f740, i32* %r3.global-to-local, align 4
  %v2_f744 = icmp ugt i8 %v3_f740, 61
  store i1 %v2_f744, i1* %cpsr_c.global-to-local, align 1
  %v7_f744 = icmp eq i8 %v3_f740, 62
  store i1 %v7_f744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f744, label %dec_label_pc_f750, label %bb329

bb329:                                            ; preds = %dec_label_pc_f73c
  %v3_f748 = icmp ugt i8 %v3_f740, 57
  store i1 %v3_f748, i1* %cpsr_c.global-to-local, align 1
  %v8_f748 = icmp eq i8 %v3_f740, 58
  store i1 %v8_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f748, label %dec_label_pc_f750, label %dec_label_pc_f71c

dec_label_pc_f750:                                ; preds = %dec_label_pc_f73c, %bb329, %dec_label_pc_f72c, %dec_label_pc_f724, %dec_label_pc_f71c
  %v1_f750 = add i32 %v0_f750, 1
  store i32 %v1_f750, i32* @r7, align 4
  %v2_f754 = icmp eq i32 %v1_f750, -1
  store i1 %v2_f754, i1* %cpsr_c.global-to-local, align 1
  %v7_f754 = icmp eq i32 %v0_f750, -2
  store i1 %v7_f754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f754, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f75c

dec_label_pc_f75c:                                ; preds = %dec_label_pc_f750
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f75c = icmp eq i32 %v1_f750, 0
  store i1 %v2_f75c, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v1_f750, 1
  br i1 %tmp330, label %dec_label_pc_f400, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %dec_label_pc_f75c
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_f768 = call i32 @function_ff28(i32 18)
  store i32 %v2_f770, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v3_f778 = call i32 @function_fe44(i32 18, i32* nonnull %stack_var_-48)
  store i32 %v3_f778, i32* %r0.global-to-local, align 4
  %v3_f77c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f77c, i32* %r2.global-to-local, align 4
  store i32 %v3_f778, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f788 = load i32, i32* @r5, align 4
  %v1_f788 = add i32 %v0_f788, 4
  %v2_f788 = inttoptr i32 %v1_f788 to i32*
  %v3_f788 = load i32, i32* %v2_f788, align 4
  store i32 %v3_f788, i32* %r0.global-to-local, align 4
  %v4_f78c = inttoptr i32 %v3_f778 to i32*
  %v5_f78c = call i32 @function_114c0(i32 %v3_f788, i32* %v4_f78c, i32 %v3_f77c, i32 16384)
  store i32 %v5_f78c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f79c = load i32, i32* @r5, align 4
  %v1_f79c = add i32 %v0_f79c, 4
  %v2_f79c = inttoptr i32 %v1_f79c to i32*
  %v3_f79c = load i32, i32* %v2_f79c, align 4
  store i32 %v3_f79c, i32* %r0.global-to-local, align 4
  %v5_f7a0 = call i32 @function_114c0(i32 %v3_f79c, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_f7a8 = call i32 @function_fe70(i32 18)
  store i32 %v1_f7a8, i32* %r0.global-to-local, align 4
  %v0_f7ac = load i32, i32* @r5, align 4
  %v1_f7ac = add i32 %v0_f7ac, 24
  %v2_f7ac = inttoptr i32 %v1_f7ac to i32*
  %v3_f7ac = load i32, i32* %v2_f7ac, align 4
  store i32 %v3_f7ac, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_f7b4 = add i32 %v0_f7ac, 12
  %v3_f7b4 = inttoptr i32 %v2_f7b4 to i32*
  store i32 7, i32* %v3_f7b4, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f2f0
  %v1_f7bc = add i32 %v0_f2f0, 24
  %v2_f7bc = inttoptr i32 %v1_f7bc to i32*
  %v3_f7bc = load i32, i32* %v2_f7bc, align 4
  store i32 %v3_f7bc, i32* %ip.global-to-local, align 4
  %v1_f7c0 = add i32 %v3_f7bc, -1
  store i32 %v1_f7c0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7c4 = icmp eq i32 %v1_f7c0, 0
  store i1 %v2_f7c4, i1* %cpsr_z.global-to-local, align 1
  %v5_f7c8 = icmp sgt i32 %v1_f7c0, 0
  br i1 %v5_f7c8, label %dec_label_pc_f7f0, label %dec_label_pc_f270thread-pre-split.thread

dec_label_pc_f7d0:                                ; preds = %bb331
  %v2_f7d0 = icmp ugt i8 %v3_f7f4, 35
  store i1 %v2_f7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d0 = icmp eq i8 %v3_f7f4, 36
  store i1 %v7_f7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7d0, label %dec_label_pc_f804, label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7d0
  %v2_f7d8 = icmp ugt i8 %v3_f7f4, 34
  store i1 %v2_f7d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d8 = icmp eq i8 %v3_f7f4, 35
  store i1 %v7_f7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7d8, label %dec_label_pc_f804, label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f7d8
  %v2_f7e0 = icmp ugt i8 %v3_f7f4, 36
  store i1 %v2_f7e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e0 = icmp eq i8 %v3_f7f4, 37
  store i1 %v7_f7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e0, label %dec_label_pc_f804, label %dec_label_pc_f7e8

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f7e0
  %v1_f7e8 = add i32 %v0_f804, -1
  store i32 %v1_f7e8, i32* %r0.global-to-local, align 4
  %v2_f7e8 = icmp ne i32 %v0_f804, 0
  store i1 %v2_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e8 = icmp eq i32 %v0_f804, 1
  store i1 %v7_f7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e8, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7bc, %dec_label_pc_f7e8
  %v0_f804 = phi i32 [ %v1_f7e8, %dec_label_pc_f7e8 ], [ %v1_f7c0, %dec_label_pc_f7bc ]
  %v2_f7f0 = add i32 %v0_f804, %v0_f2f0
  store i32 %v2_f7f0, i32* %r3.global-to-local, align 4
  %v1_f7f4 = add i32 %v2_f7f0, 28
  %v2_f7f4 = inttoptr i32 %v1_f7f4 to i8*
  %v3_f7f4 = load i8, i8* %v2_f7f4, align 1
  %v4_f7f4 = zext i8 %v3_f7f4 to i32
  store i32 %v4_f7f4, i32* %r3.global-to-local, align 4
  %v2_f7f8 = icmp ugt i8 %v3_f7f4, 61
  store i1 %v2_f7f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f8 = icmp eq i8 %v3_f7f4, 62
  store i1 %v7_f7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f8, label %dec_label_pc_f804, label %bb331

bb331:                                            ; preds = %dec_label_pc_f7f0
  %v3_f7fc = icmp ugt i8 %v3_f7f4, 57
  store i1 %v3_f7fc, i1* %cpsr_c.global-to-local, align 1
  %v8_f7fc = icmp eq i8 %v3_f7f4, 58
  store i1 %v8_f7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7fc, label %dec_label_pc_f804, label %dec_label_pc_f7d0

dec_label_pc_f804:                                ; preds = %dec_label_pc_f7f0, %bb331, %dec_label_pc_f7e0, %dec_label_pc_f7d8, %dec_label_pc_f7d0
  %v1_f804 = add i32 %v0_f804, 1
  store i32 %v1_f804, i32* @r7, align 4
  %v2_f808 = icmp eq i32 %v1_f804, -1
  store i1 %v2_f808, i1* %cpsr_c.global-to-local, align 1
  %v7_f808 = icmp eq i32 %v0_f804, -2
  store i1 %v7_f808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f808, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f804
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f810 = icmp eq i32 %v1_f804, 0
  store i1 %v2_f810, i1* %cpsr_z.global-to-local, align 1
  %tmp332 = icmp slt i32 %v1_f804, 1
  br i1 %tmp332, label %dec_label_pc_f400, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f810
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_f81c = call i32 @function_ff28(i32 20)
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_f82c = call i32 @function_fe44(i32 20, i32* nonnull %stack_var_-56)
  store i32 %v3_f82c, i32* %r0.global-to-local, align 4
  %v3_f830 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f830, i32* %r2.global-to-local, align 4
  store i32 %v3_f82c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f83c = load i32, i32* @r5, align 4
  %v1_f83c = add i32 %v0_f83c, 4
  %v2_f83c = inttoptr i32 %v1_f83c to i32*
  %v3_f83c = load i32, i32* %v2_f83c, align 4
  store i32 %v3_f83c, i32* %r0.global-to-local, align 4
  %v4_f840 = inttoptr i32 %v3_f82c to i32*
  %v5_f840 = call i32 @function_114c0(i32 %v3_f83c, i32* %v4_f840, i32 %v3_f830, i32 16384)
  store i32 %v5_f840, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f850 = load i32, i32* @r5, align 4
  %v1_f850 = add i32 %v0_f850, 4
  %v2_f850 = inttoptr i32 %v1_f850 to i32*
  %v3_f850 = load i32, i32* %v2_f850, align 4
  store i32 %v3_f850, i32* %r0.global-to-local, align 4
  %v5_f854 = call i32 @function_114c0(i32 %v3_f850, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_f85c = call i32 @function_fe70(i32 20)
  store i32 %v1_f85c, i32* %r0.global-to-local, align 4
  %v0_f860 = load i32, i32* @r5, align 4
  %v1_f860 = add i32 %v0_f860, 24
  %v2_f860 = inttoptr i32 %v1_f860 to i32*
  %v3_f860 = load i32, i32* %v2_f860, align 4
  store i32 %v3_f860, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_f868 = add i32 %v0_f860, 12
  %v3_f868 = inttoptr i32 %v2_f868 to i32*
  store i32 9, i32* %v3_f868, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f870:                                ; preds = %dec_label_pc_f2f0
  %v1_f870 = add i32 %v0_f2f0, 24
  %v2_f870 = inttoptr i32 %v1_f870 to i32*
  %v3_f870 = load i32, i32* %v2_f870, align 4
  store i32 %v3_f870, i32* %ip.global-to-local, align 4
  %v1_f874 = add i32 %v3_f870, -1
  store i32 %v1_f874, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f878 = icmp eq i32 %v1_f874, 0
  store i1 %v2_f878, i1* %cpsr_z.global-to-local, align 1
  %v5_f87c = icmp sgt i32 %v1_f874, 0
  br i1 %v5_f87c, label %dec_label_pc_f8a4, label %dec_label_pc_f270thread-pre-split.thread

dec_label_pc_f884:                                ; preds = %bb333
  %v2_f884 = icmp ugt i8 %v3_f8a8, 35
  store i1 %v2_f884, i1* %cpsr_c.global-to-local, align 1
  %v7_f884 = icmp eq i8 %v3_f8a8, 36
  store i1 %v7_f884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f884, label %dec_label_pc_f8b8, label %dec_label_pc_f88c

dec_label_pc_f88c:                                ; preds = %dec_label_pc_f884
  %v2_f88c = icmp ugt i8 %v3_f8a8, 34
  store i1 %v2_f88c, i1* %cpsr_c.global-to-local, align 1
  %v7_f88c = icmp eq i8 %v3_f8a8, 35
  store i1 %v7_f88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f88c, label %dec_label_pc_f8b8, label %dec_label_pc_f894

dec_label_pc_f894:                                ; preds = %dec_label_pc_f88c
  %v2_f894 = icmp ugt i8 %v3_f8a8, 36
  store i1 %v2_f894, i1* %cpsr_c.global-to-local, align 1
  %v7_f894 = icmp eq i8 %v3_f8a8, 37
  store i1 %v7_f894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f894, label %dec_label_pc_f8b8, label %dec_label_pc_f89c

dec_label_pc_f89c:                                ; preds = %dec_label_pc_f894
  %v1_f89c = add i32 %v0_f8b8, -1
  store i32 %v1_f89c, i32* %r0.global-to-local, align 4
  %v2_f89c = icmp ne i32 %v0_f8b8, 0
  store i1 %v2_f89c, i1* %cpsr_c.global-to-local, align 1
  %v7_f89c = icmp eq i32 %v0_f8b8, 1
  store i1 %v7_f89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f89c, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f8a4

dec_label_pc_f8a4:                                ; preds = %dec_label_pc_f870, %dec_label_pc_f89c
  %v0_f8b8 = phi i32 [ %v1_f89c, %dec_label_pc_f89c ], [ %v1_f874, %dec_label_pc_f870 ]
  %v2_f8a4 = add i32 %v0_f8b8, %v0_f2f0
  store i32 %v2_f8a4, i32* %r3.global-to-local, align 4
  %v1_f8a8 = add i32 %v2_f8a4, 28
  %v2_f8a8 = inttoptr i32 %v1_f8a8 to i8*
  %v3_f8a8 = load i8, i8* %v2_f8a8, align 1
  %v4_f8a8 = zext i8 %v3_f8a8 to i32
  store i32 %v4_f8a8, i32* %r3.global-to-local, align 4
  %v2_f8ac = icmp ugt i8 %v3_f8a8, 61
  store i1 %v2_f8ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f8ac = icmp eq i8 %v3_f8a8, 62
  store i1 %v7_f8ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8ac, label %dec_label_pc_f8b8, label %bb333

bb333:                                            ; preds = %dec_label_pc_f8a4
  %v3_f8b0 = icmp ugt i8 %v3_f8a8, 57
  store i1 %v3_f8b0, i1* %cpsr_c.global-to-local, align 1
  %v8_f8b0 = icmp eq i8 %v3_f8a8, 58
  store i1 %v8_f8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8b0, label %dec_label_pc_f8b8, label %dec_label_pc_f884

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f8a4, %bb333, %dec_label_pc_f894, %dec_label_pc_f88c, %dec_label_pc_f884
  %v1_f8b8 = add i32 %v0_f8b8, 1
  store i32 %v1_f8b8, i32* @r7, align 4
  %v2_f8bc = icmp eq i32 %v1_f8b8, -1
  store i1 %v2_f8bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8bc = icmp eq i32 %v0_f8b8, -2
  store i1 %v7_f8bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8bc, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_f8c4

dec_label_pc_f8c4:                                ; preds = %dec_label_pc_f8b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8c4 = icmp eq i32 %v1_f8b8, 0
  store i1 %v2_f8c4, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v1_f8b8, 1
  br i1 %tmp334, label %dec_label_pc_f400, label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f8c4
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_f8d0 = call i32 @function_ff28(i32 16)
  store i32 %v2_f770, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v3_f8e0 = call i32 @function_fe44(i32 16, i32* nonnull %stack_var_-48)
  store i32 %v3_f8e0, i32* %r0.global-to-local, align 4
  %v3_f8e4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f8e4, i32* %r2.global-to-local, align 4
  store i32 %v3_f8e0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f8f0 = load i32, i32* @r5, align 4
  %v1_f8f0 = add i32 %v0_f8f0, 4
  %v2_f8f0 = inttoptr i32 %v1_f8f0 to i32*
  %v3_f8f0 = load i32, i32* %v2_f8f0, align 4
  store i32 %v3_f8f0, i32* %r0.global-to-local, align 4
  %v4_f8f4 = inttoptr i32 %v3_f8e0 to i32*
  %v5_f8f4 = call i32 @function_114c0(i32 %v3_f8f0, i32* %v4_f8f4, i32 %v3_f8e4, i32 16384)
  store i32 %v5_f8f4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f904 = load i32, i32* @r5, align 4
  %v1_f904 = add i32 %v0_f904, 4
  %v2_f904 = inttoptr i32 %v1_f904 to i32*
  %v3_f904 = load i32, i32* %v2_f904, align 4
  store i32 %v3_f904, i32* %r0.global-to-local, align 4
  %v5_f908 = call i32 @function_114c0(i32 %v3_f904, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_f910 = call i32 @function_fe70(i32 16)
  store i32 %v1_f910, i32* %r0.global-to-local, align 4
  %v0_f914 = load i32, i32* @r5, align 4
  %v1_f914 = add i32 %v0_f914, 24
  %v2_f914 = inttoptr i32 %v1_f914 to i32*
  %v3_f914 = load i32, i32* %v2_f914, align 4
  store i32 %v3_f914, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_f91c = add i32 %v0_f914, 12
  %v3_f91c = inttoptr i32 %v2_f91c to i32*
  store i32 8, i32* %v3_f91c, align 4
  br label %dec_label_pc_fa58

dec_label_pc_f924:                                ; preds = %dec_label_pc_f2f0
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_f928 = call i32 @function_ff28(i32 22)
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_f938 = call i32 @function_fe44(i32 22, i32* nonnull %stack_var_-56)
  %v3_f93c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f938, i32* %r2.global-to-local, align 4
  %v1_f944 = add i32 %v3_f93c, -1
  store i32 %v1_f944, i32* %r3.global-to-local, align 4
  %v0_f948 = load i32, i32* @sb, align 4
  store i32 %v0_f948, i32* %r0.global-to-local, align 4
  %v0_f94c = load i32, i32* @r5, align 4
  %v1_f94c = add i32 %v0_f94c, 24
  %v2_f94c = inttoptr i32 %v1_f94c to i32*
  %v3_f94c = load i32, i32* %v2_f94c, align 4
  store i32 %v3_f94c, i32* %r1.global-to-local, align 4
  %v4_f950 = call i32 @function_104c0(i32 %v0_f948, i32 %v3_f94c, i32 %v3_f938, i32 %v1_f944)
  %v3_f954 = icmp eq i32 %v4_f950, -1
  store i1 %v3_f954, i1* %cpsr_c.global-to-local, align 1
  %v8_f954 = icmp eq i32 %v4_f950, -1
  store i1 %v8_f954, i1* %cpsr_z.global-to-local, align 1
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_f960 = call i32 @function_fe70(i32 22)
  br i1 %v3_f954, label %dec_label_pc_f95c, label %dec_label_pc_fb90

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f924
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f968 = call i32 @function_ff28(i32 21)
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_f978 = call i32 @function_fe44(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_f978, i32* %r0.global-to-local, align 4
  %v3_f97c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f978, i32* %r2.global-to-local, align 4
  %v1_f984 = add i32 %v3_f97c, -1
  store i32 %v1_f984, i32* %r3.global-to-local, align 4
  %v0_f988 = load i32, i32* @r5, align 4
  %v1_f988 = add i32 %v0_f988, 24
  %v2_f988 = inttoptr i32 %v1_f988 to i32*
  %v3_f988 = load i32, i32* %v2_f988, align 4
  store i32 %v3_f988, i32* %r1.global-to-local, align 4
  %v0_f98c = load i32, i32* @sb, align 4
  store i32 %v0_f98c, i32* %r0.global-to-local, align 4
  %v4_f990 = call i32 @function_104c0(i32 %v0_f98c, i32 %v3_f988, i32 %v3_f978, i32 %v1_f984)
  store i32 %v4_f990, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_f99c = call i32 @function_fe70(i32 21)
  store i32 %v1_f99c, i32* %r0.global-to-local, align 4
  %v0_f9a0 = load i32, i32* @r7, align 4
  %v2_f9a0 = icmp eq i32 %v0_f9a0, -1
  store i1 %v2_f9a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9a0 = icmp eq i32 %v0_f9a0, -1
  store i1 %v7_f9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9a0, label %dec_label_pc_f26c.loopexit, label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f95c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9a8 = icmp eq i32 %v0_f9a0, 0
  store i1 %v2_f9a8, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v0_f9a0, 1
  br i1 %tmp335, label %dec_label_pc_f400, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f9a8
  %v0_f9b0 = load i32, i32* @r5, align 4
  %v1_f9b0 = add i32 %v0_f9b0, 21
  %v2_f9b0 = inttoptr i32 %v1_f9b0 to i8*
  %v3_f9b0 = load i8, i8* %v2_f9b0, align 1
  %v4_f9b0 = zext i8 %v3_f9b0 to i32
  store i32 %v4_f9b0, i32* %r3.global-to-local, align 4
  %v1_f9b4 = add i32 %v0_f9b0, 20
  %v2_f9b4 = inttoptr i32 %v1_f9b4 to i8*
  %v3_f9b4 = load i8, i8* %v2_f9b4, align 1
  %v4_f9b4 = zext i8 %v3_f9b4 to i32
  store i32 %v4_f9b4, i32* %r2.global-to-local, align 4
  %v1_f9b8 = add i32 %v0_f9b0, 16
  %v2_f9b8 = inttoptr i32 %v1_f9b8 to i32*
  %v3_f9b8 = load i32, i32* %v2_f9b8, align 4
  store i32 %v3_f9b8, i32* %r1.global-to-local, align 4
  %v4_f9bc = mul nuw nsw i32 %v4_f9b0, 256
  %v5_f9bc = or i32 %v4_f9b4, %v4_f9bc
  store i32 %v5_f9bc, i32* %r2.global-to-local, align 4
  %v1_f9c0 = and i32 %v4_f9b4, 128
  %v2_f9c0 = icmp ne i32 %v1_f9c0, 0
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_f9b0, i32* %r3.global-to-local, align 4
  store i32 %v3_f9b8, i32* %stack_var_-48, align 4
  store i32 %v5_f9bc, i32* %stack_var_-38, align 4
  %v1_f9d0 = inttoptr i32 %v0_f9b0 to i32*
  %v2_f9d0 = load i32, i32* %v1_f9d0, align 4
  store i32 %v2_f9d0, i32* @fp, align 4
  %v0_f9d4 = call i32 @function_10ca8()
  store i32 %v0_f9d4, i32* %r0.global-to-local, align 4
  %v7_f9d8 = icmp eq i32 %v0_f9d4, -1
  %.351 = zext i1 %v7_f9d8 to i32
  store i32 %.351, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e4 = icmp eq i32 %v0_f9d4, 0
  store i1 %v2_f9e4, i1* %cpsr_z.global-to-local, align 1
  %tmp338 = icmp slt i32 %v0_f9d4, 1
  br i1 %tmp338, label %bb339, label %.thread69

.thread69:                                        ; preds = %dec_label_pc_f9b0
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa3c

bb339:                                            ; preds = %dec_label_pc_f9b0
  store i32 %.351, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9f0 = icmp eq i1 %v7_f9d8, false
  store i1 %v2_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9f0, label %dec_label_pc_f9f8, label %dec_label_pc_fa3c

dec_label_pc_f9f8:                                ; preds = %bb339
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fa04 = call i32 @function_11550(i32 2, i32 1, i32 0)
  store i32 %v3_fa04, i32* %r0.global-to-local, align 4
  %v2_fa08 = icmp eq i32 %v3_fa04, -1
  store i1 %v2_fa08, i1* %cpsr_c.global-to-local, align 1
  %v7_fa08 = icmp eq i32 %v3_fa04, -1
  store i1 %v7_fa08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fa04, i32* @r6, align 4
  br i1 %v7_fa08, label %dec_label_pc_fe3c, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %dec_label_pc_f9f8
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_fa18 = call i32 @function_ff28(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_fa20 = call i32 @function_ff28(i32 24)
  %v0_fa24 = load i32, i32* @sl, align 4
  store i32 %v0_fa24, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v2_fa2c = inttoptr i32 %v0_fa24 to i32*
  %v3_fa2c = call i32 @function_fe44(i32 23, i32* %v2_fa2c)
  store i32 %v3_fa2c, i32* %r0.global-to-local, align 4
  %v1_fa30 = inttoptr i32 %v3_fa2c to i8*
  %v2_fa30 = call i32 @function_dc44(i8* %v1_fa30)
  store i32 %v2_fa30, i32* %r0.global-to-local, align 4
  store i32 %v2_fa30, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_fa34 = icmp eq i32 %v2_fa30, 0
  store i1 %v3_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa34, label %dec_label_pc_fa3c, label %dec_label_pc_fd0c

dec_label_pc_fa3c:                                ; preds = %.thread69, %dec_label_pc_fa14, %bb339
  %v0_fa3c = load i32, i32* @r5, align 4
  %v1_fa3c = add i32 %v0_fa3c, 4
  %v2_fa3c = inttoptr i32 %v1_fa3c to i32*
  %v3_fa3c = load i32, i32* %v2_fa3c, align 4
  store i32 %v3_fa3c, i32* %r0.global-to-local, align 4
  %v1_fa40 = call i32 @function_10c7c(i32 %v3_fa3c)
  store i32 %v1_fa40, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_fa4c = load i32, i32* @r5, align 4
  %v1_fa4c = add i32 %v0_fa4c, 24
  %v2_fa4c = inttoptr i32 %v1_fa4c to i32*
  %v3_fa4c = load i32, i32* %v2_fa4c, align 4
  store i32 %v3_fa4c, i32* %ip.global-to-local, align 4
  %v2_fa50 = add i32 %v0_fa4c, 4
  %v3_fa50 = inttoptr i32 %v2_fa50 to i32*
  store i32 -1, i32* %v3_fa50, align 4
  %v0_fa54 = load i32, i32* %r2.global-to-local, align 4
  %v1_fa54 = load i32, i32* @r5, align 4
  %v2_fa54 = add i32 %v1_fa54, 12
  %v3_fa54 = inttoptr i32 %v2_fa54 to i32*
  store i32 %v0_fa54, i32* %v3_fa54, align 4
  br label %dec_label_pc_fa58

dec_label_pc_fa58:                                ; preds = %.thread205, %dec_label_pc_fad8, %dec_label_pc_fca8, %dec_label_pc_fbc0, %dec_label_pc_f8cc, %dec_label_pc_f818, %dec_label_pc_f764, %dec_label_pc_f6b0, %dec_label_pc_f618, %dec_label_pc_f588, %dec_label_pc_f408, %dec_label_pc_fa3c
  %v0_fa58 = load i32, i32* %ip.global-to-local, align 4
  %v1_fa58 = load i32, i32* @r7, align 4
  %v2_fa58 = sub i32 %v0_fa58, %v1_fa58
  %v3_fa58 = icmp uge i32 %v0_fa58, %v1_fa58
  store i1 %v3_fa58, i1* %cpsr_c.global-to-local, align 1
  %v4_fa58 = xor i32 %v1_fa58, %v0_fa58
  %v5_fa58 = xor i32 %v2_fa58, %v0_fa58
  %v6_fa58 = and i32 %v5_fa58, %v4_fa58
  %v7_fa58 = icmp slt i32 %v6_fa58, 0
  %v8_fa58 = icmp slt i32 %v2_fa58, 0
  %v9_fa58 = icmp eq i32 %v0_fa58, %v1_fa58
  store i1 %v9_fa58, i1* %cpsr_z.global-to-local, align 1
  %v2_fa5c = xor i1 %v8_fa58, %v7_fa58
  %v0_fa58.v1_fa58 = select i1 %v2_fa5c, i32 %v0_fa58, i32 %v1_fa58
  store i32 %v0_fa58.v1_fa58, i32* %r1.global-to-local, align 4
  %v2_fa64 = sub i32 %v0_fa58, %v0_fa58.v1_fa58
  store i32 %v2_fa64, i32* @r2, align 4
  %v1_fa68 = load i32, i32* @r5, align 4
  %v2_fa68 = add i32 %v1_fa68, 24
  %v3_fa68 = inttoptr i32 %v2_fa68 to i32*
  store i32 %v2_fa64, i32* %v3_fa68, align 4
  %v0_fa6c = load i32, i32* @sb, align 4
  %v1_fa6c = load i32, i32* %r1.global-to-local, align 4
  %v2_fa6c = add i32 %v1_fa6c, %v0_fa6c
  store i32 %v2_fa6c, i32* @r1, align 4
  store i32 %v0_fa6c, i32* @r0, align 4
  %v3_fa74 = call i32 @function_11280(i32 %v0_fa6c, i32 %v2_fa6c, i32 %v2_fa64)
  store i32 %v3_fa74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f2f0

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_f2f0
  %v1_fa7c = add i32 %v0_f2f0, 24
  %v2_fa7c = inttoptr i32 %v1_fa7c to i32*
  %v3_fa7c = load i32, i32* %v2_fa7c, align 4
  store i32 %v3_fa7c, i32* %ip.global-to-local, align 4
  %v1_fa80 = add i32 %v3_fa7c, -1
  store i32 %v1_fa80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa84 = icmp eq i32 %v1_fa80, 0
  store i1 %v2_fa84, i1* %cpsr_z.global-to-local, align 1
  %v5_fa88 = icmp sgt i32 %v1_fa80, 0
  br i1 %v5_fa88, label %dec_label_pc_fab0, label %dec_label_pc_f270thread-pre-split.thread

dec_label_pc_fa90:                                ; preds = %bb342
  %v2_fa90 = icmp ugt i8 %v3_fab4, 35
  store i1 %v2_fa90, i1* %cpsr_c.global-to-local, align 1
  %v7_fa90 = icmp eq i8 %v3_fab4, 36
  store i1 %v7_fa90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa90, label %dec_label_pc_fac4, label %dec_label_pc_fa98

dec_label_pc_fa98:                                ; preds = %dec_label_pc_fa90
  %v2_fa98 = icmp ugt i8 %v3_fab4, 34
  store i1 %v2_fa98, i1* %cpsr_c.global-to-local, align 1
  %v7_fa98 = icmp eq i8 %v3_fab4, 35
  store i1 %v7_fa98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa98, label %dec_label_pc_fac4, label %dec_label_pc_faa0

dec_label_pc_faa0:                                ; preds = %dec_label_pc_fa98
  %v2_faa0 = icmp ugt i8 %v3_fab4, 36
  store i1 %v2_faa0, i1* %cpsr_c.global-to-local, align 1
  %v7_faa0 = icmp eq i8 %v3_fab4, 37
  store i1 %v7_faa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faa0, label %dec_label_pc_fac4, label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_faa0
  %v1_faa8 = add i32 %v0_fac4, -1
  store i32 %v1_faa8, i32* %r0.global-to-local, align 4
  %v2_faa8 = icmp ne i32 %v0_fac4, 0
  store i1 %v2_faa8, i1* %cpsr_c.global-to-local, align 1
  %v7_faa8 = icmp eq i32 %v0_fac4, 1
  store i1 %v7_faa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faa8, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fa7c, %dec_label_pc_faa8
  %v0_fac4 = phi i32 [ %v1_faa8, %dec_label_pc_faa8 ], [ %v1_fa80, %dec_label_pc_fa7c ]
  %v2_fab0 = add i32 %v0_fac4, %v0_f2f0
  store i32 %v2_fab0, i32* %r3.global-to-local, align 4
  %v1_fab4 = add i32 %v2_fab0, 28
  %v2_fab4 = inttoptr i32 %v1_fab4 to i8*
  %v3_fab4 = load i8, i8* %v2_fab4, align 1
  %v4_fab4 = zext i8 %v3_fab4 to i32
  store i32 %v4_fab4, i32* %r3.global-to-local, align 4
  %v2_fab8 = icmp ugt i8 %v3_fab4, 61
  store i1 %v2_fab8, i1* %cpsr_c.global-to-local, align 1
  %v7_fab8 = icmp eq i8 %v3_fab4, 62
  store i1 %v7_fab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab8, label %dec_label_pc_fac4, label %bb342

bb342:                                            ; preds = %dec_label_pc_fab0
  %v3_fabc = icmp ugt i8 %v3_fab4, 57
  store i1 %v3_fabc, i1* %cpsr_c.global-to-local, align 1
  %v8_fabc = icmp eq i8 %v3_fab4, 58
  store i1 %v8_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fabc, label %dec_label_pc_fac4, label %dec_label_pc_fa90

dec_label_pc_fac4:                                ; preds = %dec_label_pc_fab0, %bb342, %dec_label_pc_faa0, %dec_label_pc_fa98, %dec_label_pc_fa90
  %v1_fac4 = add i32 %v0_fac4, 1
  store i32 %v1_fac4, i32* @r7, align 4
  %v2_fac8 = icmp eq i32 %v1_fac4, -1
  store i1 %v2_fac8, i1* %cpsr_c.global-to-local, align 1
  %v7_fac8 = icmp eq i32 %v0_fac4, -2
  store i1 %v7_fac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac8, label %dec_label_pc_f270thread-pre-split, label %dec_label_pc_fad0

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fac4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fad0 = icmp eq i32 %v1_fac4, 0
  store i1 %v2_fad0, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_fac4, 1
  br i1 %tmp343, label %dec_label_pc_f400, label %dec_label_pc_fad8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_fad0
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_fadc = call i32 @function_ff28(i32 19)
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v3_faec = call i32 @function_fe44(i32 19, i32* nonnull %stack_var_-56)
  store i32 %v3_faec, i32* %r0.global-to-local, align 4
  %v3_faf0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_faf0, i32* %r2.global-to-local, align 4
  store i32 %v3_faec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fafc = load i32, i32* @r5, align 4
  %v1_fafc = add i32 %v0_fafc, 4
  %v2_fafc = inttoptr i32 %v1_fafc to i32*
  %v3_fafc = load i32, i32* %v2_fafc, align 4
  store i32 %v3_fafc, i32* %r0.global-to-local, align 4
  %v4_fb00 = inttoptr i32 %v3_faec to i32*
  %v5_fb00 = call i32 @function_114c0(i32 %v3_fafc, i32* %v4_fb00, i32 %v3_faf0, i32 16384)
  store i32 %v5_fb00, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1354c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb10 = load i32, i32* @r5, align 4
  %v1_fb10 = add i32 %v0_fb10, 4
  %v2_fb10 = inttoptr i32 %v1_fb10 to i32*
  %v3_fb10 = load i32, i32* %v2_fb10, align 4
  store i32 %v3_fb10, i32* %r0.global-to-local, align 4
  %v5_fb14 = call i32 @function_114c0(i32 %v3_fb10, i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), i32 2, i32 16384)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_fb1c = call i32 @function_fe70(i32 19)
  store i32 %v1_fb1c, i32* %r0.global-to-local, align 4
  %v0_fb20 = load i32, i32* @r5, align 4
  %v1_fb20 = add i32 %v0_fb20, 24
  %v2_fb20 = inttoptr i32 %v1_fb20 to i32*
  %v3_fb20 = load i32, i32* %v2_fb20, align 4
  store i32 %v3_fb20, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_fb28 = add i32 %v0_fb20, 12
  %v3_fb28 = inttoptr i32 %v2_fb28 to i32*
  store i32 10, i32* %v3_fb28, align 4
  br label %dec_label_pc_fa58

dec_label_pc_fb30:                                ; preds = %dec_label_pc_f380
  store i32 ptrtoint (i32* @global_var_13566.286 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f338, i32* @r0, align 4
  %v3_fb3c = call i32 @function_11270(i32 %v2_f338, i32 ptrtoint (i32* @global_var_13566.286 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_fb48, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1355d.288 to i32), i32* @r1, align 4
  %v3_fb50 = call i32 @function_11270(i32 %v2_fb48, i32 ptrtoint (i32* @global_var_1355d.288 to i32), i32 9)
  store i32 %v3_fb50, i32* %r0.global-to-local, align 4
  %v0_fb54 = load i32, i32* @r5, align 4
  %v1_fb54 = add i32 %v0_fb54, 24
  %v2_fb54 = inttoptr i32 %v1_fb54 to i32*
  %v3_fb54 = load i32, i32* %v2_fb54, align 4
  store i32 %v3_fb54, i32* %ip.global-to-local, align 4
  %v0_fb58 = load i32, i32* @r6, align 4
  %v1_fb58 = add i32 %v0_fb58, 2
  store i32 %v1_fb58, i32* %r2.global-to-local, align 4
  %v0_fb5c = load i32, i32* @sb, align 4
  %v2_fb5c = add i32 %v0_fb5c, %v3_fb54
  store i32 %v2_fb5c, i32* %r3.global-to-local, align 4
  %v3_fb60 = icmp uge i32 %v2_fb5c, %v1_fb58
  store i1 %v3_fb60, i1* %cpsr_c.global-to-local, align 1
  %v9_fb60 = icmp eq i32 %v2_fb5c, %v1_fb58
  store i1 %v9_fb60, i1* %cpsr_z.global-to-local, align 1
  %v2_fb64 = xor i1 %v3_fb60, true
  %v3_fb64 = or i1 %v9_fb60, %v2_fb64
  br i1 %v3_fb64, label %dec_label_pc_fb30.dec_label_pc_f3f0.loopexit_crit_edge, label %dec_label_pc_fb68

dec_label_pc_fb30.dec_label_pc_f3f0.loopexit_crit_edge: ; preds = %dec_label_pc_fb30
  %v0_f3f0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f3f0

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb30
  %v0_fb68 = load i32, i32* @r4, align 4
  %v1_fb68 = add i32 %v0_fb68, 1
  %v2_fb68 = inttoptr i32 %v1_fb68 to i8*
  %v3_fb68 = load i8, i8* %v2_fb68, align 1
  %v4_fb68 = zext i8 %v3_fb68 to i32
  store i32 %v4_fb68, i32* %r3.global-to-local, align 4
  %v2_fb6c = icmp ugt i8 %v3_fb68, 30
  store i1 %v2_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb6c = icmp eq i8 %v3_fb68, 31
  store i1 %v7_fb6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb6c, label %dec_label_pc_fc5c, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb68
  %v1_fb74 = add i32 %v0_fb68, -1
  %v2_fb74 = inttoptr i32 %v1_fb74 to i8*
  %v3_fb74 = load i8, i8* %v2_fb74, align 1
  %v4_fb74 = zext i8 %v3_fb74 to i32
  store i32 %v4_fb74, i32* %r3.global-to-local, align 4
  %v2_fb78 = icmp ugt i8 %v3_fb74, -4
  store i1 %v2_fb78, i1* %cpsr_c.global-to-local, align 1
  %v7_fb78 = icmp eq i8 %v3_fb74, -3
  store i1 %v7_fb78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb78, label %bb344, label %dec_label_pc_fb84

bb344:                                            ; preds = %dec_label_pc_fb74
  %v1_fb7c = load i32, i32* @r8, align 4
  %v2_fb7c = trunc i32 %v1_fb7c to i8
  store i8 %v2_fb7c, i8* %v2_fb74, align 1
  %v0_fb80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb80.pr, label %dec_label_pc_f394, label %.dec_label_pc_fb84_crit_edge

.dec_label_pc_fb84_crit_edge:                     ; preds = %bb344
  %v0_fb84.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb84

dec_label_pc_fb84:                                ; preds = %.dec_label_pc_fb84_crit_edge, %dec_label_pc_fb74
  %v0_fb84 = phi i32 [ %v0_fb84.pre, %.dec_label_pc_fb84_crit_edge ], [ %v4_fb74, %dec_label_pc_fb74 ]
  %v2_fb84 = icmp ugt i32 %v0_fb84, 250
  store i1 %v2_fb84, i1* %cpsr_c.global-to-local, align 1
  %v7_fb84 = icmp eq i32 %v0_fb84, 251
  store i1 %v7_fb84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb84, label %bb345, label %dec_label_pc_f394

bb345:                                            ; preds = %dec_label_pc_fb84
  %v1_fb88 = load i32, i32* %sl.global-to-local, align 4
  %v2_fb88 = trunc i32 %v1_fb88 to i8
  %v3_fb88 = load i32, i32* @r4, align 4
  %v4_fb88 = add i32 %v3_fb88, -1
  %v5_fb88 = inttoptr i32 %v4_fb88 to i8*
  store i8 %v2_fb88, i8* %v5_fb88, align 1
  br label %dec_label_pc_f394

dec_label_pc_fb90:                                ; preds = %dec_label_pc_f924
  store i32 %v1_f960, i32* %r0.global-to-local, align 4
  %v0_fb98 = load i32, i32* @r5, align 4
  %v1_fb98 = add i32 %v0_fb98, 4
  %v2_fb98 = inttoptr i32 %v1_fb98 to i32*
  %v3_fb98 = load i32, i32* %v2_fb98, align 4
  store i32 %v3_fb98, i32* %r0.global-to-local, align 4
  %v1_fb9c = call i32 @function_10c7c(i32 %v3_fb98)
  store i32 %v1_fb9c, i32* %r0.global-to-local, align 4
  %v0_fba0 = load i32, i32* @r5, align 4
  %v1_fba0 = add i32 %v0_fba0, 284
  %v2_fba0 = inttoptr i32 %v1_fba0 to i8*
  %v3_fba0 = load i8, i8* %v2_fba0, align 1
  %v4_fba0 = zext i8 %v3_fba0 to i32
  %v1_fba4 = add nuw nsw i32 %v4_fba0, 1
  %v1_fba8 = urem i32 %v1_fba4, 256
  store i32 %v1_fba8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_fbb0 = icmp ugt i32 %v1_fba8, 9
  store i1 %v2_fbb0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb0 = icmp eq i32 %v1_fba8, 10
  store i1 %v7_fbb0, i1* %cpsr_z.global-to-local, align 1
  %v2_fbb4 = add i32 %v0_fba0, 4
  %v3_fbb4 = inttoptr i32 %v2_fbb4 to i32*
  store i32 -1, i32* %v3_fbb4, align 4
  %v0_fbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_fbb8 = trunc i32 %v0_fbb8 to i8
  %v2_fbb8 = load i32, i32* @r5, align 4
  %v3_fbb8 = add i32 %v2_fbb8, 284
  %v4_fbb8 = inttoptr i32 %v3_fbb8 to i8*
  store i8 %v1_fbb8, i8* %v4_fbb8, align 1
  %v0_fbbc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_fbc0 = load i32, i32* @r5, align 4
  br i1 %v0_fbbc, label %dec_label_pc_fbc0, label %dec_label_pc_fca8

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fb90
  %v1_fbc0 = add i32 %v0_fbc0, 24
  %v2_fbc0 = inttoptr i32 %v1_fbc0 to i32*
  %v3_fbc0 = load i32, i32* %v2_fbc0, align 4
  store i32 %v3_fbc0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_fbd0 = add i32 %v0_fbc0, 284
  %v4_fbd0 = inttoptr i32 %v3_fbd0 to i8*
  store i8 0, i8* %v4_fbd0, align 1
  %v0_fbd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fbd4 = load i32, i32* @r5, align 4
  %v2_fbd4 = add i32 %v1_fbd4, 12
  %v3_fbd4 = inttoptr i32 %v2_fbd4 to i32*
  store i32 %v0_fbd4, i32* %v3_fbd4, align 4
  br label %dec_label_pc_fa58

dec_label_pc_fbdc:                                ; preds = %dec_label_pc_f288
  br i1 %v2_f2b0, label %dec_label_pc_fcfc, label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %dec_label_pc_fbdc
  %v3_fbe0 = icmp eq i32 %v5_f2ac, -1
  store i1 %v3_fbe0, i1* %cpsr_c.global-to-local, align 1
  %v8_fbe0 = icmp eq i32 %v5_f2ac, -1
  store i1 %v8_fbe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbe0, label %dec_label_pc_fbe8, label %dec_label_pc_f2d8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_fbe0
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_fbec = load i32, i32* %v2_f290, align 4
  store i32 %v2_fbec, i32* %r3.global-to-local, align 4
  %v2_fbf0 = icmp ugt i32 %v2_fbec, 10
  store i1 %v2_fbf0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbf0 = icmp eq i32 %v2_fbec, 11
  store i1 %v7_fbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbf0, label %dec_label_pc_f108, label %dec_label_pc_fbf8

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fbe8, %dec_label_pc_fcfc
  %v0_fbf8 = load i32, i32* @r5, align 4
  %v1_fbf8 = add i32 %v0_fbf8, 4
  %v2_fbf8 = inttoptr i32 %v1_fbf8 to i32*
  %v3_fbf8 = load i32, i32* %v2_fbf8, align 4
  store i32 %v3_fbf8, i32* %r0.global-to-local, align 4
  %v1_fbfc = call i32 @function_10c7c(i32 %v3_fbf8)
  store i32 %v1_fbfc, i32* %r0.global-to-local, align 4
  %v0_fc00 = load i32, i32* @r5, align 4
  %v1_fc00 = add i32 %v0_fc00, 284
  %v2_fc00 = inttoptr i32 %v1_fc00 to i8*
  %v3_fc00 = load i8, i8* %v2_fc00, align 1
  %v4_fc00 = zext i8 %v3_fc00 to i32
  %v1_fc04 = add nuw nsw i32 %v4_fc00, 1
  %v1_fc08 = urem i32 %v1_fc04, 256
  store i32 %v1_fc08, i32* %r3.global-to-local, align 4
  %v2_fc0c = icmp ugt i32 %v1_fc08, 8
  store i1 %v2_fc0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc0c = icmp eq i32 %v1_fc08, 9
  store i1 %v7_fc0c, i1* %cpsr_z.global-to-local, align 1
  %v1_fc10 = trunc i32 %v1_fc04 to i8
  store i8 %v1_fc10, i8* %v2_fc00, align 1
  store i32 -1, i32* @r4, align 4
  %v0_fc18 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_fc18 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_fc18 = xor i1 %v1_fc18, true
  %v3_fc18 = and i1 %v0_fc18, %v2_fc18
  br i1 %v3_fc18, label %bb346, label %.thread218

.thread218:                                       ; preds = %dec_label_pc_fbf8
  %v1_fc1c214219 = load i32, i32* @r5, align 4
  %v2_fc1c215220 = add i32 %v1_fc1c214219, 4
  %v3_fc1c216221 = inttoptr i32 %v2_fc1c215220 to i32*
  store i32 -1, i32* %v3_fc1c216221, align 4
  br label %bb347

bb346:                                            ; preds = %dec_label_pc_fbf8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_fc1c210 = load i32, i32* @r5, align 4
  %v2_fc1c211 = add i32 %v1_fc1c210, 4
  %v3_fc1c212 = inttoptr i32 %v2_fc1c211 to i32*
  store i32 -1, i32* %v3_fc1c212, align 4
  %v4_fc20 = load i32, i32* %r3.global-to-local, align 4
  %v5_fc20 = load i32, i32* @r5, align 4
  %v6_fc20 = add i32 %v5_fc20, 12
  %v7_fc20 = inttoptr i32 %v6_fc20 to i32*
  store i32 %v4_fc20, i32* %v7_fc20, align 4
  %v4_fc24 = load i32, i32* %r3.global-to-local, align 4
  %v5_fc24 = trunc i32 %v4_fc24 to i8
  %v6_fc24 = load i32, i32* @r5, align 4
  %v7_fc24 = add i32 %v6_fc24, 284
  %v8_fc24 = inttoptr i32 %v7_fc24 to i8*
  store i8 %v5_fc24, i8* %v8_fc24, align 1
  %v0_fc28.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_fc28.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb347

bb347:                                            ; preds = %.thread218, %bb346
  %v1_fc28 = phi i1 [ %v1_fc28.pre, %bb346 ], [ %v1_fc18, %.thread218 ]
  %v0_fc28 = phi i1 [ %v0_fc28.pre, %bb346 ], [ %v0_fc18, %.thread218 ]
  %v2_fc28 = xor i1 %v1_fc28, true
  %v3_fc28 = and i1 %v0_fc28, %v2_fc28
  br i1 %v3_fc28, label %dec_label_pc_f108, label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %bb347
  %v0_fc2c = load i32, i32* @r5, align 4
  store i32 %v0_fc2c, i32* @r0, align 4
  %v0_fc30 = call i32 @function_e1a4()
  store i32 %v0_fc30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f108

dec_label_pc_fc38:                                ; preds = %dec_label_pc_f5e8, %dec_label_pc_f5c4, %dec_label_pc_f604
  store i32 %v3_f5c4, i32* %r1.global-to-local, align 4
  %v0_fc3c = load i32, i32* @sb, align 4
  store i32 %v0_fc3c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13550.290 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_fc48 = call i32 @function_104c0(i32 %v0_fc3c, i32 %v3_f5c4, i32 ptrtoint ([8 x i8]* @global_var_13550.290 to i32), i32 7)
  store i32 %v5_fc48, i32* %r0.global-to-local, align 4
  %v3_fc4c = icmp eq i32 %v5_fc48, -1
  store i1 %v3_fc4c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc4c = icmp eq i32 %v5_fc48, -1
  store i1 %v8_fc4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_fc48, i32* @r7, align 4
  br i1 %v3_fc4c, label %dec_label_pc_f26c.loopexit, label %dec_label_pc_f610

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fb68
  store i32 %v2_f338, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fc68 = add i32 %v0_fb54, 4
  %v2_fc68 = inttoptr i32 %v1_fc68 to i32*
  %v3_fc68 = load i32, i32* %v2_fc68, align 4
  store i32 %v3_fc68, i32* %r0.global-to-local, align 4
  %v5_fc6c = call i32 @function_114c0(i32 %v3_fc68, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_fc6c, i32* %r0.global-to-local, align 4
  store i32 %v2_fb40, i32* %r1.global-to-local, align 4
  %v0_fc74 = load i32, i32* @r5, align 4
  %v1_fc74 = add i32 %v0_fc74, 4
  %v2_fc74 = inttoptr i32 %v1_fc74 to i32*
  %v3_fc74 = load i32, i32* %v2_fc74, align 4
  store i32 %v3_fc74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f3d0

dec_label_pc_fc84:                                ; preds = %dec_label_pc_f278
  store i32 %.pre, i32* @r0, align 4
  %v1_fc8c = add i32 %v0_fc84, 92
  store i32 %v1_fc8c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fc94 = call i32 @function_11280(i32 %.pre, i32 %v1_fc8c, i32 192)
  store i32 %v3_fc94, i32* %r0.global-to-local, align 4
  %v0_fc98 = load i32, i32* @r5, align 4
  %v1_fc98 = add i32 %v0_fc98, 24
  %v2_fc98 = inttoptr i32 %v1_fc98 to i32*
  %v3_fc98 = load i32, i32* %v2_fc98, align 4
  store i32 %v3_fc98, i32* %r3.global-to-local, align 4
  %v1_fc9c = add i32 %v3_fc98, -64
  store i32 %v1_fc9c, i32* %ip.global-to-local, align 4
  store i32 %v1_fc9c, i32* %v2_fc98, align 4
  br label %dec_label_pc_f288

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fb90
  store i32 %v0_fbc0, i32* @r0, align 4
  %v0_fcac = call i32 @function_e1a4()
  store i32 %v0_fcac, i32* %r0.global-to-local, align 4
  %v0_fcb0 = load i32, i32* @r5, align 4
  %v1_fcb0 = add i32 %v0_fcb0, 24
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i32*
  %v3_fcb0 = load i32, i32* %v2_fcb0, align 4
  store i32 %v3_fcb0, i32* %ip.global-to-local, align 4
  %v0_fcb4 = load i32, i32* @r4, align 4
  store i32 %v0_fcb4, i32* @r7, align 4
  br label %dec_label_pc_fa58

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_f060, %dec_label_pc_f044
  %v0_fcbc = load i32, i32* @r7, align 4
  %v1_fcbc = load i32, i32* @r4, align 4
  %v2_fcbc = add i32 %v1_fcbc, 12
  %v3_fcbc = inttoptr i32 %v2_fcbc to i32*
  store i32 %v0_fcbc, i32* %v3_fcbc, align 4
  %v0_fcc0 = load i32, i32* @r7, align 4
  %v1_fcc0 = trunc i32 %v0_fcc0 to i8
  %v2_fcc0 = load i32, i32* @r4, align 4
  %v3_fcc0 = add i32 %v2_fcc0, 284
  %v4_fcc0 = inttoptr i32 %v3_fcc0 to i8*
  store i8 %v1_fcc0, i8* %v4_fcc0, align 1
  br label %bb310

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_f1ec, %dec_label_pc_f1a4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_f214, %dec_label_pc_fcc8
  %v0_fcd4 = phi i32 [ 0, %dec_label_pc_fcc8 ], [ %v0_f1f4, %dec_label_pc_f214 ]
  %v0_fccc = load i32, i32* @r5, align 4
  %v1_fccc = add i32 %v0_fccc, 4
  %v2_fccc = inttoptr i32 %v1_fccc to i32*
  %v3_fccc = load i32, i32* %v2_fccc, align 4
  store i32 %v3_fccc, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_fcd4 = inttoptr i32 %v0_fccc to i32*
  store i32 %v0_fcd4, i32* %v2_fcd4, align 4
  %v0_fcd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_fcd8 = load i32, i32* @r5, align 4
  %v2_fcd8 = add i32 %v1_fcd8, 24
  %v3_fcd8 = inttoptr i32 %v2_fcd8 to i32*
  store i32 %v0_fcd8, i32* %v3_fcd8, align 4
  %v0_f0e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0e4

dec_label_pc_fce0:                                ; preds = %dec_label_pc_f164
  %v0_fce0 = load i32, i32* @r5, align 4
  %v1_fce0 = add i32 %v0_fce0, 4
  %v2_fce0 = inttoptr i32 %v1_fce0 to i32*
  %v3_fce0 = load i32, i32* %v2_fce0, align 4
  store i32 %v3_fce0, i32* %r0.global-to-local, align 4
  %v1_fce4 = call i32 @function_10c7c(i32 %v3_fce0)
  store i32 %v1_fce4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_fcec = load i32, i32* @r6, align 4
  %v1_fcec = load i32, i32* @r5, align 4
  %v2_fcec = add i32 %v1_fcec, 12
  %v3_fcec = inttoptr i32 %v2_fcec to i32*
  store i32 %v0_fcec, i32* %v3_fcec, align 4
  %v0_fcf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_fcf0 = load i32, i32* @r5, align 4
  %v2_fcf0 = add i32 %v1_fcf0, 4
  %v3_fcf0 = inttoptr i32 %v2_fcf0 to i32*
  store i32 %v0_fcf0, i32* %v3_fcf0, align 4
  %v0_fcf4 = load i32, i32* @r6, align 4
  %v1_fcf4 = trunc i32 %v0_fcf4 to i8
  %v2_fcf4 = load i32, i32* @r5, align 4
  %v3_fcf4 = add i32 %v2_fcf4, 284
  %v4_fcf4 = inttoptr i32 %v3_fcf4 to i8*
  store i8 %v1_fcf4, i8* %v4_fcf4, align 1
  br label %dec_label_pc_f108

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fbdc
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f290, align 4
  br label %dec_label_pc_fbf8

dec_label_pc_fd0c:                                ; preds = %dec_label_pc_fa14
  store i32 2, i32* @r5, align 4
  %v1_fd10 = add i32 %v2_fa30, 4
  %v2_fd10 = inttoptr i32 %v1_fd10 to i32*
  %v3_fd10 = load i32, i32* %v2_fd10, align 4
  store i32 %v3_fd10, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_fd1c = call i32 @function_dab8()
  store i32 %v0_fd1c, i32* %r0.global-to-local, align 4
  %v0_fd20 = load i32, i32* @r8, align 4
  %v1_fd20 = inttoptr i32 %v0_fd20 to i8*
  %v2_fd20 = load i8, i8* %v1_fd20, align 1
  %v3_fd20 = zext i8 %v2_fd20 to i32
  store i32 %v3_fd20, i32* %r1.global-to-local, align 4
  %v2_fd24 = call i32 @function_10a04(i32 %v0_fd1c, i32 %v3_fd20)
  store i32 %v2_fd24, i32* %r0.global-to-local, align 4
  %v0_fd28 = load i32, i32* @r4, align 4
  %v2_fd28 = and i32 %v2_fd24, 1073741824
  %v3_fd28 = icmp ne i32 %v2_fd28, 0
  store i1 %v3_fd28, i1* %cpsr_c.global-to-local, align 1
  %v4_fd28 = mul i32 %v2_fd24, 4
  %v5_fd28 = add i32 %v0_fd28, %v4_fd28
  %v6_fd28 = inttoptr i32 %v5_fd28 to i32*
  %v7_fd28 = load i32, i32* %v6_fd28, align 4
  store i32 %v7_fd28, i32* %r3.global-to-local, align 4
  %v0_fd2c = load i32, i32* @sl, align 4
  store i32 %v0_fd2c, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v2_fd38 = inttoptr i32 %v0_fd2c to i32*
  %v3_fd38 = call i32 @function_fe44(i32 24, i32* %v2_fd38)
  %v4_fd38 = inttoptr i32 %v3_fd38 to i8*
  store i32 %v3_fd38, i32* %r0.global-to-local, align 4
  %v2_fd3c = add i32 %v3_fd38, 1
  %v3_fd3c = inttoptr i32 %v2_fd3c to i8*
  %v4_fd3c = load i8, i8* %v3_fd3c, align 1
  %v5_fd3c = zext i8 %v4_fd3c to i32
  store i32 %v5_fd3c, i32* %r2.global-to-local, align 4
  %v3_fd40 = load i8, i8* %v4_fd38, align 1
  %v4_fd40 = zext i8 %v3_fd40 to i32
  %v4_fd44 = mul nuw nsw i32 %v5_fd3c, 256
  %v5_fd44 = or i32 %v4_fd40, %v4_fd44
  store i32 %v5_fd44, i32* %r3.global-to-local, align 4
  %v1_fd48 = sext i8 %v3_fd40 to i32
  %v2_fd48 = and i32 %v1_fd48, 128
  %v3_fd48 = icmp ne i32 %v2_fd48, 0
  store i1 %v3_fd48, i1* %cpsr_c.global-to-local, align 1
  %v4_fd48 = sdiv i32 %v1_fd48, 256
  store i32 %v4_fd48, i32* %r1.global-to-local, align 4
  %v0_fd4c = load i32, i32* @r8, align 4
  store i32 %v0_fd4c, i32* %r0.global-to-local, align 4
  %v10_fd58 = call i32 @function_dc20(i32 %v0_fd4c, i32 %v4_fd48, i32 %v5_fd3c, i32 %v1_fd48, i32 %v1_fd48, i32 %v4_fd48)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_fd60 = call i32 @function_fe70(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_fd68 = call i32 @function_fe70(i32 24)
  %v0_fd70 = load i32, i32* @r6, align 4
  store i32 %v0_fd70, i32* %r0.global-to-local, align 4
  %v2_fd74 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_fd74, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fd7c = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_fd7c = call i32 @function_113ac(i32 %v0_fd70, %sockaddr* %v3_fd7c, i32 16)
  store i32 %v4_fd7c, i32* %r0.global-to-local, align 4
  %v3_fd80 = icmp eq i32 %v4_fd7c, -1
  store i1 %v3_fd80, i1* %cpsr_c.global-to-local, align 1
  %v8_fd80 = icmp eq i32 %v4_fd7c, -1
  store i1 %v8_fd80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fd80, label %dec_label_pc_fd88, label %dec_label_pc_fd98

dec_label_pc_fd88:                                ; preds = %dec_label_pc_fd0c
  %v0_fd88 = load i32, i32* @r6, align 4
  store i32 %v0_fd88, i32* %r0.global-to-local, align 4
  %v1_fd8c = call i32 @function_10c7c(i32 %v0_fd88)
  %v0_fd90 = load i32, i32* @sl, align 4
  store i32 %v0_fd90, i32* %r0.global-to-local, align 4
  %v1_fd94 = call i32 @function_11e2c(i32 %v0_fd90)
  store i32 %v1_fd94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd0c, %dec_label_pc_fd88
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fda8 = load i32, i32* @r6, align 4
  store i32 %v0_fda8, i32* %r0.global-to-local, align 4
  %v0_fdac = load i32, i32* @sl, align 4
  store i32 %v0_fdac, i32* %stack_var_-56, align 4
  %v6_fdb0 = call i32 @function_114c0(i32 %v0_fda8, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_f770, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fdc4 = load i32, i32* @r6, align 4
  store i32 %v0_fdc4, i32* %r0.global-to-local, align 4
  %v5_fdc8 = call i32 @function_114c0(i32 %v0_fdc4, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_fdd0 = load i32, i32* @r5, align 4
  store i32 %v0_fdd0, i32* %r2.global-to-local, align 4
  %v2_fdd4 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_fdd4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fddc = load i32, i32* @r6, align 4
  store i32 %v0_fddc, i32* %r0.global-to-local, align 4
  %v5_fde0 = call i32 @function_114c0(i32 %v0_fddc, i32* nonnull %stack_var_-38, i32 %v0_fdd0, i32 16384)
  %v0_fde4 = load i32, i32* @fp, align 4
  %v1_fde4 = add i32 %v0_fde4, 12
  store i32 %v1_fde4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fdf0 = load i32, i32* @r6, align 4
  store i32 %v0_fdf0, i32* %r0.global-to-local, align 4
  %v4_fdf4 = inttoptr i32 %v1_fde4 to i32*
  %v5_fdf4 = call i32 @function_114c0(i32 %v0_fdf0, i32* %v4_fdf4, i32 1, i32 16384)
  store i32 %v5_fdf4, i32* %r0.global-to-local, align 4
  %v0_fdf8 = load i32, i32* @fp, align 4
  %v1_fdf8 = inttoptr i32 %v0_fdf8 to i32*
  %v2_fdf8 = load i32, i32* %v1_fdf8, align 4
  store i32 %v2_fdf8, i32* %r1.global-to-local, align 4
  %v1_fdfc = add i32 %v0_fdf8, 12
  %v2_fdfc = inttoptr i32 %v1_fdfc to i8*
  %v3_fdfc = load i8, i8* %v2_fdfc, align 1
  %v4_fdfc = zext i8 %v3_fdfc to i32
  store i32 %v4_fdfc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe04 = load i32, i32* @r6, align 4
  store i32 %v0_fe04, i32* %r0.global-to-local, align 4
  %v4_fe08 = inttoptr i32 %v2_fdf8 to i32*
  %v5_fe08 = call i32 @function_114c0(i32 %v0_fe04, i32* %v4_fe08, i32 %v4_fdfc, i32 16384)
  %v0_fe0c = load i32, i32* @fp, align 4
  %v1_fe0c = add i32 %v0_fe0c, 13
  store i32 %v1_fe0c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe18 = load i32, i32* @r6, align 4
  store i32 %v0_fe18, i32* %r0.global-to-local, align 4
  %v4_fe1c = inttoptr i32 %v1_fe0c to i32*
  %v5_fe1c = call i32 @function_114c0(i32 %v0_fe18, i32* %v4_fe1c, i32 1, i32 16384)
  %v0_fe20 = load i32, i32* @r6, align 4
  store i32 %v0_fe20, i32* %r0.global-to-local, align 4
  %v0_fe24 = load i32, i32* @fp, align 4
  %v1_fe24 = add i32 %v0_fe24, 13
  %v2_fe24 = inttoptr i32 %v1_fe24 to i8*
  %v3_fe24 = load i8, i8* %v2_fe24, align 1
  %v4_fe24 = zext i8 %v3_fe24 to i32
  store i32 %v4_fe24, i32* %r2.global-to-local, align 4
  %v1_fe28 = add i32 %v0_fe24, 4
  %v2_fe28 = inttoptr i32 %v1_fe28 to i32*
  %v3_fe28 = load i32, i32* %v2_fe28, align 4
  store i32 %v3_fe28, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fe30 = inttoptr i32 %v3_fe28 to i32*
  %v5_fe30 = call i32 @function_114c0(i32 %v0_fe20, i32* %v4_fe30, i32 %v4_fe24, i32 16384)
  %v0_fe34 = load i32, i32* @r6, align 4
  store i32 %v0_fe34, i32* %r0.global-to-local, align 4
  %v1_fe38 = call i32 @function_10c7c(i32 %v0_fe34)
  store i32 %v1_fe38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fe3c

dec_label_pc_fe3c:                                ; preds = %dec_label_pc_f9f8, %dec_label_pc_fd98
  %v0_fe3c = load i32, i32* @sl, align 4
  store i32 %v0_fe3c, i32* %r0.global-to-local, align 4
  %v1_fe40 = call i32 @function_11e2c(i32 %v0_fe3c)
  store i32 %v1_fe40, i32* %r0.global-to-local, align 4
  ret i32 %v1_fe40

; uselistorder directives
  uselistorder i32 %v4_fd48, { 2, 1, 0 }
  uselistorder i32 %v1_fd48, { 2, 1, 0, 3 }
  uselistorder i32 %v5_fd3c, { 1, 0, 2 }
  uselistorder i32 %v2_fd24, { 1, 0, 2 }
  uselistorder i32 %v3_fc74, { 1, 0 }
  uselistorder i32 %v5_fc48, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_fc18, { 1, 0 }
  uselistorder i32 %v1_fc08, { 2, 1, 0 }
  uselistorder i32 %v1_fc04, { 1, 0 }
  uselistorder i32 %v0_fbc0, { 1, 0, 2 }
  uselistorder i32 %v1_fba8, { 2, 1, 0 }
  uselistorder i32 %v0_fb54, { 1, 2, 0 }
  uselistorder i1 %v7_fac8, { 1, 0 }
  uselistorder i32 %v1_fac4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fabc, { 1, 0 }
  uselistorder i8 %v3_fab4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fac4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_faa0, { 1, 0 }
  uselistorder i1 %v7_fa98, { 1, 0 }
  uselistorder i1 %v7_fa90, { 1, 0 }
  uselistorder i32 %v0_fa6c, { 1, 2, 0 }
  uselistorder i32 %v2_fa58, { 1, 0 }
  uselistorder i32 %v1_fa58, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fa58, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_fa08, { 1, 0 }
  uselistorder i32 %v3_fa04, { 1, 0, 2, 3 }
  uselistorder i1 %v2_f9f0, { 1, 0 }
  uselistorder i32 %.351, { 1, 0 }
  uselistorder i1 %v7_f9d8, { 1, 0 }
  uselistorder i32 %v0_f9d4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f9b4, { 1, 0, 2 }
  uselistorder i32 %v4_f9b0, { 1, 0, 2 }
  uselistorder i1 %v7_f9a0, { 1, 0 }
  uselistorder i32 %v0_f9a0, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_f8bc, { 1, 0 }
  uselistorder i32 %v1_f8b8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f8b0, { 1, 0 }
  uselistorder i8 %v3_f8a8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f8b8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f894, { 1, 0 }
  uselistorder i1 %v7_f88c, { 1, 0 }
  uselistorder i1 %v7_f884, { 1, 0 }
  uselistorder i1 %v7_f808, { 1, 0 }
  uselistorder i32 %v1_f804, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f7fc, { 1, 0 }
  uselistorder i8 %v3_f7f4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f804, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f7e0, { 1, 0 }
  uselistorder i1 %v7_f7d8, { 1, 0 }
  uselistorder i1 %v7_f7d0, { 1, 0 }
  uselistorder i1 %v7_f754, { 1, 0 }
  uselistorder i32 %v1_f750, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f748, { 1, 0 }
  uselistorder i8 %v3_f740, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f750, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f72c, { 1, 0 }
  uselistorder i1 %v7_f724, { 1, 0 }
  uselistorder i1 %v7_f71c, { 1, 0 }
  uselistorder i1 %v7_f6a0, { 1, 0 }
  uselistorder i32 %v1_f69c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f694, { 1, 0 }
  uselistorder i8 %v3_f68c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f69c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f678, { 1, 0 }
  uselistorder i1 %v7_f670, { 1, 0 }
  uselistorder i1 %v7_f668, { 1, 0 }
  uselistorder i32 %v0_f610, { 2, 1, 0 }
  uselistorder i1 %v7_f608, { 1, 0 }
  uselistorder i1 %v8_f5fc, { 1, 0 }
  uselistorder i8 %v3_f5f4, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_f604, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f5e0, { 1, 0 }
  uselistorder i1 %v7_f5d8, { 1, 0 }
  uselistorder i32 %v3_f5c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_f580, { 2, 1, 0 }
  uselistorder i1 %v7_f578, { 1, 0 }
  uselistorder i1 %v8_f56c, { 1, 0 }
  uselistorder i8 %v3_f564, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f574, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f550, { 1, 0 }
  uselistorder i1 %v7_f548, { 1, 0 }
  uselistorder i1 %v7_f540, { 1, 0 }
  uselistorder i32 %v3_f410, { 2, 3, 0, 1 }
  uselistorder i32 %v0_f400.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f3e8, { 1, 0 }
  uselistorder i32 %v1_f3e4, { 1, 0 }
  uselistorder i32 %v1_f3dc, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f3d8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f3d8, { 0, 2, 1 }
  uselistorder i1 %v7_f380, { 1, 0 }
  uselistorder i1 %v2_f36c, { 1, 0, 2 }
  uselistorder i1 %v2_f354, { 1, 0, 2 }
  uselistorder i32 %v1_f374, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f348, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f370, { 1, 0 }
  uselistorder i32 %v2_f378, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_f2f0, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_f2cc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f2c8, { 1, 0 }
  uselistorder i32 %v5_f2ac, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_f298, { 1, 0, 2 }
  uselistorder i32 %v3_f294, { 1, 0, 2 }
  uselistorder i32 %v0_fc84, { 1, 0, 2 }
  uselistorder i32 %v5_f25c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_f23c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_f1f4, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_f1d4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_f1c8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_f154, { 2, 1, 0 }
  uselistorder i32 %v3_f150, { 1, 0 }
  uselistorder i1 %v7_f138, { 1, 0 }
  uselistorder i32 %v3_f134, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_f128, { 1, 0 }
  uselistorder i32 %v1_f10c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f0f8, { 2, 1, 0 }
  uselistorder i32 %v3_f0f4, { 1, 0 }
  uselistorder i32 %v0_f0f8, { 1, 0 }
  uselistorder i32 %v2_f770, { 0, 2, 3, 1 }
  uselistorder i32 %v2_f6bc, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_fb48, { 1, 2, 0 }
  uselistorder i32 %v2_f338, { 0, 2, 1 }
  uselistorder i32 %v1_f08c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f08c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f068, { 2, 1, 0 }
  uselistorder i32 %v1_f064, { 1, 0 }
  uselistorder i32 %v0_f034, { 0, 2, 1 }
  uselistorder i32 %v1_f02c, { 1, 0 }
  uselistorder i1 %v7_eff8, { 0, 3, 1, 2 }
  uselistorder i1 %v2_eff8, { 1, 2, 0 }
  uselistorder i32 %v2_eff0, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_efe8, { 1, 0 }
  uselistorder i32 %v1_efcc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_efc0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_efc0, { 0, 2, 1 }
  uselistorder i32 %v1_efb0, { 1, 0 }
  uselistorder i32 %v3_f014, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge223, { 1, 0, 2 }
  uselistorder i32 %v2_f020, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ef00, { 1, 0 }
  uselistorder i32 %v1_eeec, { 1, 0 }
  uselistorder i32 %v1_eed4, { 1, 2, 0 }
  uselistorder i32 %v0_eee0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_eea4, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_ee98, { 2, 1, 0 }
  uselistorder i32 %v1_ee74, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_ee4c, { 1, 0 }
  uselistorder i32 %v4_edec, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_ed54, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_ec74, { 1, 0 }
  uselistorder i32 %v1_ec70, { 2, 0, 1 }
  uselistorder i32 %v4_ec4c, { 1, 0 }
  uselistorder i1 %v2_ebbc, { 1, 0 }
  uselistorder i1 %v3_eba0, { 1, 0, 2 }
  uselistorder i1 %v2_eb8c, { 1, 0 }
  uselistorder i1 %v2_eb68, { 1, 0 }
  uselistorder i32 %v1_eb18, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb04, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_eb00, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_eaf0, { 1, 0 }
  uselistorder i32 %v0_eae0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ead0, { 1, 0 }
  uselistorder i32 %v0_ede0, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_e614, { 1, 0 }
  uselistorder i32 %v0_e608, { 2, 0, 1, 3 }
  uselistorder i32 %v4_e5b4, { 1, 0 }
  uselistorder i32 %v0_e5ac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e554, { 3, 2, 0, 1 }
  uselistorder i1 %v7_e4f8, { 1, 0 }
  uselistorder i32 %v3_e4f0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e4d8, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 2, 1, 0 }
  uselistorder i32 %v0_e49c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge230, { 1, 0 }
  uselistorder i32 %v0_e434, { 2, 1, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp240, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 62, 63, 44, 36, 64, 65, 66, 67, 68, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 141, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 71, 72, 73, 74, 60, 61, 75, 76, 78, 77, 79, 80, 81, 82, 83, 85, 87, 86, 84, 88, 89, 90, 91, 97, 92, 93, 94, 95, 98, 142, 143, 99, 144, 145, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 140, 118, 119, 120, 121, 122, 123, 125, 124, 127, 126, 96, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 45, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 42, 41, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 43, 44, 53, 54, 55, 56, 57, 59, 61, 60, 123, 58, 62, 63, 64, 65, 69, 66, 67, 68, 70, 72, 74, 73, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 116, 117, 118, 119, 120, 121, 122 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 44, 45, 39, 40, 36, 15, 16, 1, 2, 3, 59, 60, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 46, 47, 48, 43, 56, 49, 50, 51, 53, 54, 52, 55, 57, 61, 58, 103, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 125, 124, 35, 126, 108, 111, 110, 100, 99, 127, 129, 128, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 133, 130, 131, 121, 120, 123, 122, 132, 135, 134, 136, 137, 139, 138, 140, 146, 141, 142, 145, 143, 144, 147, 149, 150, 148, 153, 151, 152, 155, 154, 156, 158, 157, 199, 159, 160, 161, 163, 162, 164, 165, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 201, 202, 203, 204, 205, 206, 207, 200, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 185, 187, 186, 189, 188, 190, 194, 193, 191, 192, 195, 196, 197, 198 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 22, 23, 2, 24, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 50, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 96, 97, 98, 99, 100, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 187, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 188, 101, 102, 103, 104, 105, 106, 196, 189, 94, 95, 107, 109, 108, 110, 111, 113, 115, 114, 190, 112, 116, 117, 118, 119, 120, 121, 126, 122, 123, 124, 125, 193, 194, 191, 192, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 186, 162, 163, 164, 165, 166, 185, 167, 168, 169, 184, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 195, 183 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 95, 96, 97, 98, 99, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 186, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 187, 100, 101, 102, 103, 104, 105, 195, 188, 93, 94, 106, 108, 107, 109, 110, 112, 114, 113, 189, 111, 115, 116, 117, 118, 119, 124, 120, 121, 122, 123, 192, 193, 190, 125, 191, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 185, 157, 158, 159, 160, 161, 184, 162, 163, 164, 183, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 194, 182 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 36, 37 }
  uselistorder i32 (i32)* @function_fe70, { 21, 20, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 23, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_fe44, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 (i32)* @function_ff28, { 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_1354c.284 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_1354c.284, { 1, 0 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_114c0, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_104c0, { 2, 4, 3, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1bbe4.132 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1bbe5.133, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1bbe4.132 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10e9c, { 1, 2, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_e1a4, { 3, 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_1148c, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_114ec, { 0, 6, 1, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 16384, { 31, 47, 32, 48, 33, 49, 34, 50, 35, 51, 36, 52, 13, 53, 12, 64, 0, 45, 1, 46, 2, 54, 3, 55, 4, 56, 5, 57, 6, 58, 7, 59, 8, 60, 9, 61, 29, 62, 30, 63, 27, 66, 28, 67, 26, 65, 37, 70, 10, 71, 11, 72, 14, 68, 38, 69, 40, 73, 16, 74, 41, 75, 42, 76, 43, 77, 15, 78, 39, 79, 17, 80, 18, 81, 19, 82, 83, 44, 84, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c6ec, { 8, 2, 7, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10ad0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c690, { 10, 4, 9, 8, 7, 6, 5, 1, 0, 3, 2 }
  uselistorder i8* @global_var_1bbc8.269, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_13514.259 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1350c.257 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_13504.255 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_13458.223 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_13434.217 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13414.209 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1340c.207 to i32), { 0, 19, 1, 20, 2, 21, 3, 22, 4, 23, 5, 24, 6, 7, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15, 32, 16, 33, 17, 34, 18, 35 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_133cc.191 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_133a0.183 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_13384.177 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_1337c.175 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_13374.173 to i32), { 0, 1, 2, 7, 3, 8, 4, 9, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_13368.169 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1335c.163 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_e278, { 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 52 }
  uselistorder i32 ptrtoint (i32* @global_var_134dc.161 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13558.159 to i32), { 0, 36, 1, 37, 2, 38, 3, 39, 4, 40, 5, 41, 6, 42, 7, 43, 8, 44, 9, 45, 10, 46, 11, 47, 12, 48, 13, 49, 14, 50, 15, 51, 16, 52, 17, 53, 18, 54, 19, 55, 20, 56, 21, 57, 22, 58, 23, 59, 24, 60, 25, 61, 26, 62, 27, 63, 28, 64, 29, 65, 30, 66, 31, 32, 33, 67, 34, 68, 35, 69 }
  uselistorder i8* @global_var_1bbd9.155, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1bbcc.146 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1bbd8.147, { 1, 0 }
  uselistorder i8** @global_var_1bbb8.142, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1bbb8.142 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 27, 1, 14, 0, 2, 28, 3, 4, 29, 21, 22, 5, 30, 6, 31, 15, 16, 32, 33, 7, 8, 9, 34, 35, 17, 10, 36, 23, 18, 37, 38, 39, 40, 11, 24, 25, 26, 41, 12, 42, 43, 19, 44, 45, 13, 46, 47, 20, 48 }
  uselistorder i32 ()* @function_dab8, { 66, 64, 63, 62, 61, 60, 59, 65, 58, 57, 56, 20, 19, 18, 17, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 16, 15, 14, 13, 12, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 7, 6, 2, 4, 5, 0, 1, 8, 9, 3, 10, 11 }
  uselistorder i32* @global_var_1bc4c.140, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1bc48.138, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1bbe8.126, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_10f4c, { 0, 1, 2, 3, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24 }
  uselistorder i32 (i32)* @function_db10, { 1, 0 }
  uselistorder i32* @global_var_1bc30.48, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_106b4, { 2, 1, 0 }
  uselistorder i32* @global_var_1bc50.124, { 0, 2, 1 }
  uselistorder i32 ()* @function_10ca8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 75, 76 }
  uselistorder i32* @sb, { 2, 3, 6, 0, 1, 4, 5, 10, 9, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 51, 52, 54, 55, 58, 61, 59, 60, 62, 63, 56, 57 }
  uselistorder label %dec_label_pc_fe3c, { 1, 0 }
  uselistorder label %dec_label_pc_fd98, { 1, 0 }
  uselistorder label %dec_label_pc_fccc, { 1, 0 }
  uselistorder label %dec_label_pc_fc38, { 2, 0, 1 }
  uselistorder label %bb347, { 1, 0 }
  uselistorder label %dec_label_pc_fbf8, { 1, 0 }
  uselistorder label %dec_label_pc_fac4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fab0, { 1, 0 }
  uselistorder label %dec_label_pc_fa58, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_fa3c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f8b8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f8a4, { 1, 0 }
  uselistorder label %dec_label_pc_f804, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f7f0, { 1, 0 }
  uselistorder label %dec_label_pc_f750, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f73c, { 1, 0 }
  uselistorder label %dec_label_pc_f69c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f688, { 1, 0 }
  uselistorder label %dec_label_pc_f610, { 1, 0 }
  uselistorder label %dec_label_pc_f604, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f5f0, { 1, 0 }
  uselistorder label %dec_label_pc_f574, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f560, { 1, 0 }
  uselistorder label %dec_label_pc_f400, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f3f0, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb321, { 2, 1, 0 }
  uselistorder label %bb318, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f350, { 1, 0 }
  uselistorder label %dec_label_pc_f350.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f2d8, { 1, 0 }
  uselistorder label %bb315, { 1, 0 }
  uselistorder label %dec_label_pc_f288, { 1, 0 }
  uselistorder label %dec_label_pc_f278, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f270thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_f270thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f278.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f26c.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f22c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f108, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_f0e4, { 1, 0 }
  uselistorder label %bb312, { 1, 0 }
  uselistorder label %bb310, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_ef4c.dec_label_pc_ef4c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ef30.dec_label_pc_ef30_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ef28, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_ef20, { 1, 0 }
  uselistorder label %dec_label_pc_eed4, { 1, 0 }
  uselistorder label %dec_label_pc_ed74, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_ed68, { 1, 0 }
  uselistorder label %.thread48, { 2, 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_ebcc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eba8, { 1, 0 }
  uselistorder label %dec_label_pc_eb9c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eb78, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eb54, { 1, 0 }
  uselistorder label %bb280, { 1, 0 }
  uselistorder label %dec_label_pc_eb00, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_e554, { 1, 0 }
}

define i32 @function_fe44(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fe44:
  store i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32* @ip, align 4
  %v3_fe48 = mul i32 %arg1, 8
  %v2_fe4c = add i32 %v3_fe48, ptrtoint (i32* @global_var_1bc58.292 to i32)
  store i1 false, i1* @cpsr_v, align 1
  %v2_fe50 = icmp eq i32* %arg2, null
  br i1 %v2_fe50, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fe44
  %v3_fe5c11 = inttoptr i32 %v2_fe4c to i32*
  %v4_fe5c12 = load i32, i32* %v3_fe5c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_fe44
  %v2_fe54 = add i32 %v3_fe48, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 5)
  %v3_fe54 = inttoptr i32 %v2_fe54 to i8*
  %v4_fe54 = load i8, i8* %v3_fe54, align 1
  %v5_fe54 = zext i8 %v4_fe54 to i32
  store i32 %v5_fe54, i32* @r2, align 4
  %v2_fe58 = add i32 %v3_fe48, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 4)
  %v3_fe58 = inttoptr i32 %v2_fe58 to i8*
  %v4_fe58 = load i8, i8* %v3_fe58, align 4
  %v5_fe58 = zext i8 %v4_fe58 to i32
  %v3_fe5c = inttoptr i32 %v2_fe4c to i32*
  %v4_fe5c = load i32, i32* %v3_fe5c, align 4
  %v5_fe60 = mul nuw nsw i32 %v5_fe54, 256
  %v6_fe60 = or i32 %v5_fe58, %v5_fe60
  store i32 %v6_fe60, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_fe5c714 = phi i32 [ %v4_fe5c12, %.thread ], [ %v4_fe5c, %bb ]
  ret i32 %v4_fe5c714

; uselistorder directives
  uselistorder i32 %v2_fe4c, { 1, 0 }
  uselistorder i32 %v3_fe48, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_fe70(i32 %arg1) local_unnamed_addr {
dec_label_pc_fe70:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fe70 = mul i32 %arg1, 8
  %v3_fe74 = load i32, i32* @r4, align 4
  store i32 %v3_fe74, i32* %stack_var_-20, align 4
  %v3_fe84 = and i32 %v3_fe70, 2040
  %v2_fe88 = add i32 %v3_fe84, ptrtoint (i32* @global_var_1bc58.292 to i32)
  store i32 %v2_fe88, i32* @lr, align 4
  %v1_fe90 = add i32 %v3_fe84, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 4)
  store i32 %v1_fe90, i32* %r7.global-to-local, align 4
  %v2_fe94 = load i32, i32* @global_var_1ba28.295, align 4
  store i32 %v2_fe94, i32* @r2, align 4
  %v2_fe98 = inttoptr i32 %v1_fe90 to i8*
  %v3_fe98 = load i8, i8* %v2_fe98, align 4
  %v4_fe98 = zext i8 %v3_fe98 to i32
  store i32 %v4_fe98, i32* @r1, align 4
  %v1_fe9c = add i32 %v3_fe84, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 5)
  %v2_fe9c = inttoptr i32 %v1_fe9c to i8*
  %v3_fe9c = load i8, i8* %v2_fe9c, align 1
  %v4_fe9c = zext i8 %v3_fe9c to i32
  %v3_fea0 = udiv i32 %v2_fe94, 256
  %v4_fea4 = mul nuw nsw i32 %v4_fe9c, 256
  %v5_fea4 = or i32 %v4_fea4, %v4_fe98
  store i1 false, i1* @cpsr_n, align 1
  %v7_fea4 = icmp eq i32 %v5_fea4, 0
  store i1 %v7_fea4, i1* @cpsr_z, align 1
  %v3_fea8 = udiv i32 %v2_fe94, 65536
  %v1_feac = urem i32 %v3_fea0, 256
  store i32 %v1_feac, i32* %r6.global-to-local, align 4
  %v1_feb0 = urem i32 %v3_fea8, 256
  store i32 %v1_feb0, i32* %r5.global-to-local, align 4
  %v3_feb4 = udiv i32 %v2_fe94, 16777216
  store i32 %v3_feb4, i32* %r4.global-to-local, align 4
  %v1_feb8 = urem i32 %v2_fe94, 256
  br i1 %v7_fea4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fe70
  store i32 %v3_fe74, i32* @r4, align 4
  ret i32 %v1_feb8

bb8:                                              ; preds = %dec_label_pc_fe70
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_fec4, %bb8
  %v2_fed0 = phi i32 [ %v1_ff0c, %dec_label_pc_fec4 ], [ 0, %bb8 ]
  %v0_fec4 = phi i32 [ %v0_ff04, %dec_label_pc_fec4 ], [ %v2_fe88, %bb8 ]
  %v1_fec4 = inttoptr i32 %v0_fec4 to i32*
  %v2_fec4 = load i32, i32* %v1_fec4, align 4
  %v2_fec8 = add i32 %v2_fec4, %v2_fed0
  %v3_fec8 = inttoptr i32 %v2_fec8 to i8*
  %v4_fec8 = load i8, i8* %v3_fec8, align 1
  %v6_fec8 = zext i8 %v4_fec8 to i32
  %v2_fecc = xor i32 %v6_fec8, %v1_feb8
  %v1_fed0 = trunc i32 %v2_fecc to i8
  store i8 %v1_fed0, i8* %v3_fec8, align 1
  %v0_fed4 = load i32, i32* @lr, align 4
  %v1_fed4 = inttoptr i32 %v0_fed4 to i32*
  %v2_fed4 = load i32, i32* %v1_fed4, align 4
  %v0_fed8 = load i32, i32* @ip, align 4
  %v2_fed8 = add i32 %v0_fed8, %v2_fed4
  %v3_fed8 = inttoptr i32 %v2_fed8 to i8*
  %v4_fed8 = load i8, i8* %v3_fed8, align 1
  %v6_fed8 = zext i8 %v4_fed8 to i32
  %v0_fedc = load i32, i32* %r6.global-to-local, align 4
  %v2_fedc = xor i32 %v0_fedc, %v6_fed8
  %v1_fee0 = trunc i32 %v2_fedc to i8
  store i8 %v1_fee0, i8* %v3_fed8, align 1
  %v0_fee4 = load i32, i32* @lr, align 4
  %v1_fee4 = inttoptr i32 %v0_fee4 to i32*
  %v2_fee4 = load i32, i32* %v1_fee4, align 4
  %v0_fee8 = load i32, i32* @ip, align 4
  %v2_fee8 = add i32 %v0_fee8, %v2_fee4
  %v3_fee8 = inttoptr i32 %v2_fee8 to i8*
  %v4_fee8 = load i8, i8* %v3_fee8, align 1
  %v6_fee8 = zext i8 %v4_fee8 to i32
  %v0_feec = load i32, i32* %r5.global-to-local, align 4
  %v2_feec = xor i32 %v0_feec, %v6_fee8
  %v1_fef0 = trunc i32 %v2_feec to i8
  store i8 %v1_fef0, i8* %v3_fee8, align 1
  %v0_fef4 = load i32, i32* @lr, align 4
  %v1_fef4 = inttoptr i32 %v0_fef4 to i32*
  %v2_fef4 = load i32, i32* %v1_fef4, align 4
  store i32 %v2_fef4, i32* @r1, align 4
  %v0_fef8 = load i32, i32* @ip, align 4
  %v2_fef8 = add i32 %v0_fef8, %v2_fef4
  %v3_fef8 = inttoptr i32 %v2_fef8 to i8*
  %v4_fef8 = load i8, i8* %v3_fef8, align 1
  %v6_fef8 = zext i8 %v4_fef8 to i32
  %v0_fefc = load i32, i32* %r4.global-to-local, align 4
  %v2_fefc = xor i32 %v0_fefc, %v6_fef8
  %v1_ff00 = trunc i32 %v2_fefc to i8
  store i8 %v1_ff00, i8* %v3_fef8, align 1
  %v0_ff04 = load i32, i32* @lr, align 4
  %v1_ff04 = add i32 %v0_ff04, 4
  %v2_ff04 = inttoptr i32 %v1_ff04 to i8*
  %v3_ff04 = load i8, i8* %v2_ff04, align 1
  %v4_ff04 = zext i8 %v3_ff04 to i32
  %v0_ff08 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff08 = add i32 %v0_ff08, 1
  %v2_ff08 = inttoptr i32 %v1_ff08 to i8*
  %v3_ff08 = load i8, i8* %v2_ff08, align 1
  %v4_ff08 = zext i8 %v3_ff08 to i32
  %v0_ff0c = load i32, i32* @ip, align 4
  %v1_ff0c = add i32 %v0_ff0c, 1
  store i32 %v1_ff0c, i32* @ip, align 4
  %v4_ff10 = mul nuw nsw i32 %v4_ff08, 256
  %v5_ff10 = or i32 %v4_ff10, %v4_ff04
  store i32 %v5_ff10, i32* @r2, align 4
  %v2_ff14 = sub i32 %v5_ff10, %v1_ff0c
  %v6_ff14 = and i32 %v2_ff14, %v1_ff0c
  %v7_ff14 = icmp slt i32 %v6_ff14, 0
  store i1 %v7_ff14, i1* @cpsr_v, align 1
  %v8_ff14 = icmp slt i32 %v2_ff14, 0
  store i1 %v8_ff14, i1* @cpsr_n, align 1
  %v9_ff14 = icmp eq i32 %v5_ff10, %v1_ff0c
  store i1 %v9_ff14, i1* @cpsr_z, align 1
  %v8_ff18 = icmp sgt i32 %v5_ff10, %v1_ff0c
  br i1 %v8_ff18, label %dec_label_pc_fec4, label %dec_label_pc_ff1c

dec_label_pc_ff1c:                                ; preds = %dec_label_pc_fec4
  %v2_ff1c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_ff1c, i32* @r4, align 4
  ret i32 %v1_feb8

; uselistorder directives
  uselistorder i32 %v2_ff14, { 1, 0 }
  uselistorder i32 %v5_ff10, { 0, 2, 1, 3 }
  uselistorder i32 %v1_ff0c, { 2, 4, 0, 3, 5, 1 }
  uselistorder i32 %v0_ff04, { 1, 0 }
  uselistorder i32 %v1_feb8, { 0, 2, 1 }
  uselistorder i32 %v2_fe94, { 3, 0, 1, 2, 4 }
  uselistorder i1* @cpsr_v, { 1, 2, 0 }
  uselistorder i1* @cpsr_n, { 1, 2, 0 }
}

define i32 @function_ff28(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff28:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_ff28 = mul i32 %arg1, 8
  %v3_ff2c = load i32, i32* @r4, align 4
  store i32 %v3_ff2c, i32* %stack_var_-20, align 4
  %v3_ff3c = and i32 %v3_ff28, 2040
  %v2_ff40 = add i32 %v3_ff3c, ptrtoint (i32* @global_var_1bc58.292 to i32)
  store i32 %v2_ff40, i32* @lr, align 4
  %v1_ff48 = add i32 %v3_ff3c, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 4)
  store i32 %v1_ff48, i32* %r7.global-to-local, align 4
  %v2_ff4c = load i32, i32* @global_var_1ba28.295, align 4
  store i32 %v2_ff4c, i32* @r2, align 4
  %v2_ff50 = inttoptr i32 %v1_ff48 to i8*
  %v3_ff50 = load i8, i8* %v2_ff50, align 4
  %v4_ff50 = zext i8 %v3_ff50 to i32
  %v1_ff54 = add i32 %v3_ff3c, add (i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32 5)
  %v2_ff54 = inttoptr i32 %v1_ff54 to i8*
  %v3_ff54 = load i8, i8* %v2_ff54, align 1
  %v4_ff54 = zext i8 %v3_ff54 to i32
  %v3_ff58 = udiv i32 %v2_ff4c, 256
  %v4_ff5c = mul nuw nsw i32 %v4_ff54, 256
  %v5_ff5c = or i32 %v4_ff5c, %v4_ff50
  %v7_ff5c = icmp eq i32 %v5_ff5c, 0
  %v3_ff60 = udiv i32 %v2_ff4c, 65536
  %v1_ff64 = urem i32 %v3_ff58, 256
  store i32 %v1_ff64, i32* %r6.global-to-local, align 4
  %v1_ff68 = urem i32 %v3_ff60, 256
  store i32 %v1_ff68, i32* %r5.global-to-local, align 4
  %v3_ff6c = udiv i32 %v2_ff4c, 16777216
  store i32 %v3_ff6c, i32* %r4.global-to-local, align 4
  %v1_ff70 = urem i32 %v2_ff4c, 256
  br i1 %v7_ff5c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_ff28
  store i32 %v3_ff2c, i32* @r4, align 4
  ret i32 %v1_ff70

bb8:                                              ; preds = %dec_label_pc_ff28
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff7c, %bb8
  %v2_ff88 = phi i32 [ %v1_ffc4, %dec_label_pc_ff7c ], [ 0, %bb8 ]
  %v0_ff7c = phi i32 [ %v0_ffbc, %dec_label_pc_ff7c ], [ %v2_ff40, %bb8 ]
  %v1_ff7c = inttoptr i32 %v0_ff7c to i32*
  %v2_ff7c = load i32, i32* %v1_ff7c, align 4
  %v2_ff80 = add i32 %v2_ff7c, %v2_ff88
  %v3_ff80 = inttoptr i32 %v2_ff80 to i8*
  %v4_ff80 = load i8, i8* %v3_ff80, align 1
  %v6_ff80 = zext i8 %v4_ff80 to i32
  %v2_ff84 = xor i32 %v6_ff80, %v1_ff70
  %v1_ff88 = trunc i32 %v2_ff84 to i8
  store i8 %v1_ff88, i8* %v3_ff80, align 1
  %v0_ff8c = load i32, i32* @lr, align 4
  %v1_ff8c = inttoptr i32 %v0_ff8c to i32*
  %v2_ff8c = load i32, i32* %v1_ff8c, align 4
  %v0_ff90 = load i32, i32* %ip.global-to-local, align 4
  %v2_ff90 = add i32 %v0_ff90, %v2_ff8c
  %v3_ff90 = inttoptr i32 %v2_ff90 to i8*
  %v4_ff90 = load i8, i8* %v3_ff90, align 1
  %v6_ff90 = zext i8 %v4_ff90 to i32
  %v0_ff94 = load i32, i32* %r6.global-to-local, align 4
  %v2_ff94 = xor i32 %v0_ff94, %v6_ff90
  %v1_ff98 = trunc i32 %v2_ff94 to i8
  store i8 %v1_ff98, i8* %v3_ff90, align 1
  %v0_ff9c = load i32, i32* @lr, align 4
  %v1_ff9c = inttoptr i32 %v0_ff9c to i32*
  %v2_ff9c = load i32, i32* %v1_ff9c, align 4
  %v0_ffa0 = load i32, i32* %ip.global-to-local, align 4
  %v2_ffa0 = add i32 %v0_ffa0, %v2_ff9c
  %v3_ffa0 = inttoptr i32 %v2_ffa0 to i8*
  %v4_ffa0 = load i8, i8* %v3_ffa0, align 1
  %v6_ffa0 = zext i8 %v4_ffa0 to i32
  %v0_ffa4 = load i32, i32* %r5.global-to-local, align 4
  %v2_ffa4 = xor i32 %v0_ffa4, %v6_ffa0
  %v1_ffa8 = trunc i32 %v2_ffa4 to i8
  store i8 %v1_ffa8, i8* %v3_ffa0, align 1
  %v0_ffac = load i32, i32* @lr, align 4
  %v1_ffac = inttoptr i32 %v0_ffac to i32*
  %v2_ffac = load i32, i32* %v1_ffac, align 4
  %v0_ffb0 = load i32, i32* %ip.global-to-local, align 4
  %v2_ffb0 = add i32 %v0_ffb0, %v2_ffac
  %v3_ffb0 = inttoptr i32 %v2_ffb0 to i8*
  %v4_ffb0 = load i8, i8* %v3_ffb0, align 1
  %v6_ffb0 = zext i8 %v4_ffb0 to i32
  %v0_ffb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_ffb4 = xor i32 %v0_ffb4, %v6_ffb0
  %v1_ffb8 = trunc i32 %v2_ffb4 to i8
  store i8 %v1_ffb8, i8* %v3_ffb0, align 1
  %v0_ffbc = load i32, i32* @lr, align 4
  %v1_ffbc = add i32 %v0_ffbc, 4
  %v2_ffbc = inttoptr i32 %v1_ffbc to i8*
  %v3_ffbc = load i8, i8* %v2_ffbc, align 1
  %v4_ffbc = zext i8 %v3_ffbc to i32
  %v0_ffc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffc0 = add i32 %v0_ffc0, 1
  %v2_ffc0 = inttoptr i32 %v1_ffc0 to i8*
  %v3_ffc0 = load i8, i8* %v2_ffc0, align 1
  %v4_ffc0 = zext i8 %v3_ffc0 to i32
  %v0_ffc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_ffc4 = add i32 %v0_ffc4, 1
  store i32 %v1_ffc4, i32* %ip.global-to-local, align 4
  %v4_ffc8 = mul nuw nsw i32 %v4_ffc0, 256
  %v5_ffc8 = or i32 %v4_ffc8, %v4_ffbc
  store i32 %v5_ffc8, i32* @r2, align 4
  %v8_ffd0 = icmp sgt i32 %v5_ffc8, %v1_ffc4
  br i1 %v8_ffd0, label %dec_label_pc_ff7c, label %dec_label_pc_ffd4

dec_label_pc_ffd4:                                ; preds = %dec_label_pc_ff7c
  %v2_ffd4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_ffd4, i32* @r4, align 4
  ret i32 %v1_ff70

; uselistorder directives
  uselistorder i32 %v1_ffc4, { 1, 2, 0 }
  uselistorder i32 %v0_ffbc, { 1, 0 }
  uselistorder i32 %v1_ff70, { 0, 2, 1 }
  uselistorder i32 %v2_ff4c, { 3, 0, 1, 2, 4 }
}

define i32 @function_ffe0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ffe0:
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_ffe0 = load i32, i32* @r4, align 4
  store i32 %v3_ffe0, i32* %stack_var_-28, align 4
  %v6_ffe0 = load i32, i32* @r5, align 4
  %v9_ffe0 = load i32, i32* @r6, align 4
  %v12_ffe0 = load i32, i32* @r7, align 4
  %v1_ffe8 = call i32 @function_116e8(i32 2)
  store i32 ptrtoint (i32* @global_var_1bc58.292 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 2, i32* @r5, align 4
  store i32 %v1_ffe8, i32* @r7, align 4
  %v4_10004 = call i32 @function_10478(i32 %v1_ffe8, i32 ptrtoint ([3 x i8]* @global_var_1356c.300 to i32), i32 2)
  %v0_1000c = load i32, i32* @r7, align 4
  store i32 %v0_1000c, i32* @global_var_1bc68.301, align 4
  %v0_10010 = load i32, i32* @r5, align 4
  %v1_10010 = trunc i32 %v0_10010 to i8
  store i8 %v1_10010, i8* bitcast (i32* @global_var_1bc6c.302 to i8*), align 4
  %v0_10014 = load i32, i32* @r6, align 4
  %v1_10014 = trunc i32 %v0_10014 to i8
  store i8 %v1_10014, i8* bitcast (i32* @global_var_1bc6d.303 to i8*), align 4
  %v1_10018 = call i32 @function_116e8(i32 17)
  store i32 %v1_10018, i32* @r7, align 4
  store i32 17, i32* %sl.global-to-local, align 4
  %v4_1002c = call i32 @function_10478(i32 %v1_10018, i32 ptrtoint ([18 x i8]* @global_var_13570.305 to i32), i32 17)
  %v0_10030 = load i32, i32* @r5, align 4
  %v0_10034 = load i32, i32* @r7, align 4
  store i32 %v0_10034, i32* @global_var_1bd10.306, align 4
  store i8 17, i8* bitcast (i32* @global_var_1bd14.307 to i8*), align 4
  %v0_1003c = load i32, i32* @r6, align 4
  %v1_1003c = trunc i32 %v0_1003c to i8
  store i8 %v1_1003c, i8* bitcast (i32* @global_var_1bd15.308 to i8*), align 4
  %v1_10040 = call i32 @function_116e8(i32 %v0_10030)
  %v0_10044 = load i32, i32* @r5, align 4
  store i32 %v1_10040, i32* @r7, align 4
  %v3_10050 = call i32 @function_10478(i32 %v1_10040, i32 ptrtoint (i32* @global_var_13584.310 to i32), i32 %v0_10044)
  %v0_10058 = load i32, i32* @r7, align 4
  store i32 %v0_10058, i32* @global_var_1bd18.311, align 4
  %v0_1005c = load i32, i32* @r5, align 4
  %v1_1005c = trunc i32 %v0_1005c to i8
  store i8 %v1_1005c, i8* bitcast (i32* @global_var_1bd1c.312 to i8*), align 4
  %v0_10060 = load i32, i32* @r6, align 4
  %v1_10060 = trunc i32 %v0_10060 to i8
  store i8 %v1_10060, i8* bitcast (i32* @global_var_1bd1d.313 to i8*), align 4
  %v1_10064 = call i32 @function_116e8(i32 58)
  store i32 %v1_10064, i32* @r5, align 4
  %v4_10074 = call i32 @function_10478(i32 %v1_10064, i32 ptrtoint ([59 x i8]* @global_var_13588.315 to i32), i32 58)
  store i8 58, i8* bitcast (i32* @global_var_1bc64.316 to i8*), align 4
  %v0_10084 = load i32, i32* @r5, align 4
  store i32 %v0_10084, i32* @global_var_1bc60.317, align 4
  %v0_10088 = load i32, i32* @r6, align 4
  %v1_10088 = trunc i32 %v0_10088 to i8
  store i8 %v1_10088, i8* bitcast (i32* @global_var_1bc65.318 to i8*), align 4
  %v1_1008c = call i32 @function_116e8(i32 6)
  store i32 %v1_1008c, i32* @r5, align 4
  store i32 6, i32* %r8.global-to-local, align 4
  %v4_100a0 = call i32 @function_10478(i32 %v1_1008c, i32 ptrtoint ([7 x i8]* @global_var_135c4.320 to i32), i32 6)
  %v0_100a8 = load i32, i32* @r5, align 4
  store i32 %v0_100a8, i32* @global_var_1bcd8.321, align 4
  store i8 6, i8* bitcast (i32* @global_var_1bcdc.322 to i8*), align 4
  %v0_100b0 = load i32, i32* @r6, align 4
  %v1_100b0 = trunc i32 %v0_100b0 to i8
  store i8 %v1_100b0, i8* bitcast (i32* @global_var_1bcdd.323 to i8*), align 4
  %v1_100b4 = call i32 @function_116e8(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_100b4, i32* @r5, align 4
  %v4_100c8 = call i32 @function_10478(i32 %v1_100b4, i32 ptrtoint ([8 x i8]* @global_var_135cc.325 to i32), i32 7)
  %v0_100cc = load i32, i32* @r7, align 4
  %v0_100d0 = load i32, i32* @r5, align 4
  store i32 %v0_100d0, i32* @global_var_1bce0.326, align 4
  %v1_100d4 = trunc i32 %v0_100cc to i8
  store i8 %v1_100d4, i8* bitcast (i32* @global_var_1bce4.327 to i8*), align 4
  %v0_100d8 = load i32, i32* @r6, align 4
  %v1_100d8 = trunc i32 %v0_100d8 to i8
  store i8 %v1_100d8, i8* bitcast (i32* @global_var_1bce5.328 to i8*), align 4
  %v1_100dc = call i32 @function_116e8(i32 %v0_100cc)
  %v0_100e0 = load i32, i32* @r7, align 4
  store i32 %v1_100dc, i32* @r5, align 4
  %v4_100ec = call i32 @function_10478(i32 %v1_100dc, i32 ptrtoint ([8 x i8]* @global_var_135d4.330 to i32), i32 %v0_100e0)
  %v0_100f4 = load i32, i32* @r5, align 4
  store i32 %v0_100f4, i32* @global_var_1bce8.331, align 4
  %v0_100f8 = load i32, i32* @r7, align 4
  %v1_100f8 = trunc i32 %v0_100f8 to i8
  store i8 %v1_100f8, i8* bitcast (i32* @global_var_1bcec.332 to i8*), align 4
  %v0_100fc = load i32, i32* @r6, align 4
  %v1_100fc = trunc i32 %v0_100fc to i8
  store i8 %v1_100fc, i8* bitcast (i32* @global_var_1bced.333 to i8*), align 4
  %v1_10100 = call i32 @function_116e8(i32 3)
  store i32 %v1_10100, i32* @r5, align 4
  %v4_10110 = call i32 @function_10478(i32 %v1_10100, i32 ptrtoint ([4 x i8]* @global_var_135dc.335 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1bcfc.336 to i8*), align 4
  %v0_10120 = load i32, i32* @r5, align 4
  store i32 %v0_10120, i32* @global_var_1bcf8.337, align 4
  %v0_10124 = load i32, i32* @r6, align 4
  %v1_10124 = trunc i32 %v0_10124 to i8
  store i8 %v1_10124, i8* bitcast (i32* @global_var_1bcfd.338 to i8*), align 4
  %v1_10128 = call i32 @function_116e8(i32 20)
  store i32 %v1_10128, i32* @r5, align 4
  %v3_10138 = call i32 @function_10478(i32 %v1_10128, i32 ptrtoint (i32* @global_var_135e0.340 to i32), i32 20)
  store i8 20, i8* bitcast (i32* @global_var_1bcf4.341 to i8*), align 4
  %v0_10148 = load i32, i32* @r5, align 4
  store i32 %v0_10148, i32* @global_var_1bcf0.342, align 4
  %v0_1014c = load i32, i32* @r6, align 4
  %v1_1014c = trunc i32 %v0_1014c to i8
  store i8 %v1_1014c, i8* bitcast (i32* @global_var_1bcf5.343 to i8*), align 4
  %v1_10150 = call i32 @function_116e8(i32 25)
  store i32 %v1_10150, i32* @r5, align 4
  %v3_10160 = call i32 @function_10478(i32 %v1_10150, i32 ptrtoint (i32* @global_var_135f8.345 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1bd04.346 to i8*), align 4
  %v0_10170 = load i32, i32* @r5, align 4
  store i32 %v0_10170, i32* @global_var_1bd00.347, align 4
  %v0_10174 = load i32, i32* @r6, align 4
  %v1_10174 = trunc i32 %v0_10174 to i8
  store i8 %v1_10174, i8* bitcast (i32* @global_var_1bd05.348 to i8*), align 4
  %v1_10178 = call i32 @function_116e8(i32 9)
  store i32 %v1_10178, i32* @r5, align 4
  %v4_10188 = call i32 @function_10478(i32 %v1_10178, i32 ptrtoint ([10 x i8]* @global_var_13614.350 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1bd0c.351 to i8*), align 4
  %v0_10198 = load i32, i32* @r5, align 4
  store i32 %v0_10198, i32* @global_var_1bd08.352, align 4
  %v0_1019c = load i32, i32* @r6, align 4
  %v1_1019c = trunc i32 %v0_1019c to i8
  store i8 %v1_1019c, i8* bitcast (i32* @global_var_1bd0d.353 to i8*), align 4
  %v1_101a0 = call i32 @function_116e8(i32 16)
  store i32 %v1_101a0, i32* @r5, align 4
  %v4_101b0 = call i32 @function_10478(i32 %v1_101a0, i32 ptrtoint ([17 x i8]* @global_var_13620.355 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1bd24.356 to i8*), align 4
  %v0_101c0 = load i32, i32* @r5, align 4
  store i32 %v0_101c0, i32* @global_var_1bd20.357, align 4
  %v0_101c4 = load i32, i32* @r6, align 4
  %v1_101c4 = trunc i32 %v0_101c4 to i8
  store i8 %v1_101c4, i8* bitcast (i32* @global_var_1bd25.358 to i8*), align 4
  %v1_101c8 = call i32 @function_116e8(i32 22)
  store i32 %v1_101c8, i32* @r5, align 4
  %v4_101d8 = call i32 @function_10478(i32 %v1_101c8, i32 ptrtoint ([23 x i8]* @global_var_13634.360 to i32), i32 22)
  %v0_101e0 = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1bd2c.361 to i8*), align 4
  %v0_101e8 = load i32, i32* @r5, align 4
  store i32 %v0_101e8, i32* @global_var_1bd28.362, align 4
  %v0_101ec = load i32, i32* @r6, align 4
  %v1_101ec = trunc i32 %v0_101ec to i8
  store i8 %v1_101ec, i8* bitcast (i32* @global_var_1bd2d.363 to i8*), align 4
  %v1_101f0 = call i32 @function_116e8(i32 %v0_101e0)
  %v0_101f4 = load i32, i32* @r7, align 4
  store i32 %v1_101f0, i32* @r5, align 4
  %v4_10200 = call i32 @function_10478(i32 %v1_101f0, i32 ptrtoint ([8 x i8]* @global_var_1364c.365 to i32), i32 %v0_101f4)
  %v0_10208 = load i32, i32* @r5, align 4
  store i32 %v0_10208, i32* @global_var_1bc70.366, align 4
  %v0_1020c = load i32, i32* @r7, align 4
  %v1_1020c = trunc i32 %v0_1020c to i8
  store i8 %v1_1020c, i8* bitcast (i32* @global_var_1bc74.367 to i8*), align 4
  %v0_10210 = load i32, i32* @r6, align 4
  %v1_10210 = trunc i32 %v0_10210 to i8
  store i8 %v1_10210, i8* bitcast (i32* @global_var_1bc75.368 to i8*), align 4
  %v1_10214 = call i32 @function_116e8(i32 5)
  store i32 %v1_10214, i32* @r5, align 4
  %v4_10224 = call i32 @function_10478(i32 %v1_10214, i32 ptrtoint ([6 x i8]* @global_var_13654.370 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1bc7c.371 to i8*), align 4
  %v0_10234 = load i32, i32* @r5, align 4
  store i32 %v0_10234, i32* @global_var_1bc78.372, align 4
  %v0_10238 = load i32, i32* @r6, align 4
  %v1_10238 = trunc i32 %v0_10238 to i8
  store i8 %v1_10238, i8* bitcast (i32* @global_var_1bc7d.373 to i8*), align 4
  %v1_1023c = call i32 @function_116e8(i32 4)
  store i32 %v1_1023c, i32* @r5, align 4
  %v4_1024c = call i32 @function_10478(i32 %v1_1023c, i32 ptrtoint ([5 x i8]* @global_var_1365c.375 to i32), i32 4)
  %v0_10254 = load i32, i32* %r8.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1bc8c.376 to i8*), align 4
  %v0_1025c = load i32, i32* @r5, align 4
  store i32 %v0_1025c, i32* @global_var_1bc88.377, align 4
  %v0_10260 = load i32, i32* @r6, align 4
  %v1_10260 = trunc i32 %v0_10260 to i8
  store i8 %v1_10260, i8* bitcast (i32* @global_var_1bc8d.378 to i8*), align 4
  %v1_10264 = call i32 @function_116e8(i32 %v0_10254)
  %v0_1026c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10264, i32* @r5, align 4
  %v4_10274 = call i32 @function_10478(i32 %v1_10264, i32 ptrtoint ([7 x i8]* @global_var_13664.380 to i32), i32 %v0_1026c)
  %v0_1027c = load i32, i32* @r5, align 4
  store i32 %v0_1027c, i32* @global_var_1bc90.381, align 4
  %v1_10280 = trunc i32 %v0_1026c to i8
  store i8 %v1_10280, i8* bitcast (i32* @global_var_1bc94.382 to i8*), align 4
  %v0_10284 = load i32, i32* @r6, align 4
  %v1_10284 = trunc i32 %v0_10284 to i8
  store i8 %v1_10284, i8* bitcast (i32* @global_var_1bc95.383 to i8*), align 4
  %v1_10288 = call i32 @function_116e8(i32 14)
  store i32 %v1_10288, i32* @r5, align 4
  %v0_10298 = load i32, i32* @r7, align 4
  %v2_10298 = mul i32 %v0_10298, 2
  store i32 %v2_10298, i32* @r7, align 4
  %v4_1029c = call i32 @function_10478(i32 %v1_10288, i32 ptrtoint ([15 x i8]* @global_var_1366c.385 to i32), i32 14)
  %v0_102a4 = load i32, i32* @r5, align 4
  store i32 %v0_102a4, i32* @global_var_1bc98.386, align 4
  %v0_102a8 = load i32, i32* @r7, align 4
  %v1_102a8 = trunc i32 %v0_102a8 to i8
  store i8 %v1_102a8, i8* bitcast (i32* @global_var_1bc9c.387 to i8*), align 4
  %v0_102ac = load i32, i32* @r6, align 4
  %v1_102ac = trunc i32 %v0_102ac to i8
  store i8 %v1_102ac, i8* bitcast (i32* @global_var_1bc9d.388 to i8*), align 4
  %v1_102b0 = call i32 @function_116e8(i32 10)
  store i32 %v1_102b0, i32* @r5, align 4
  %v4_102c0 = call i32 @function_10478(i32 %v1_102b0, i32 ptrtoint ([11 x i8]* @global_var_1367c.390 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1bca4.391 to i8*), align 4
  %v0_102d0 = load i32, i32* @r5, align 4
  store i32 %v0_102d0, i32* @global_var_1bca0.392, align 4
  %v0_102d4 = load i32, i32* @r6, align 4
  %v1_102d4 = trunc i32 %v0_102d4 to i8
  store i8 %v1_102d4, i8* bitcast (i32* @global_var_1bca5.393 to i8*), align 4
  %v1_102d8 = call i32 @function_116e8(i32 21)
  store i32 %v1_102d8, i32* @r5, align 4
  %v3_102e8 = call i32 @function_10478(i32 %v1_102d8, i32 ptrtoint (i32* @global_var_136d0.395 to i32), i32 21)
  %v0_102f0 = load i32, i32* %sl.global-to-local, align 4
  store i8 21, i8* bitcast (i32* @global_var_1bcac.396 to i8*), align 4
  %v0_102f8 = load i32, i32* @r5, align 4
  store i32 %v0_102f8, i32* @global_var_1bca8.397, align 4
  %v0_102fc = load i32, i32* @r6, align 4
  %v1_102fc = trunc i32 %v0_102fc to i8
  store i8 %v1_102fc, i8* bitcast (i32* @global_var_1bcad.398 to i8*), align 4
  %v1_10300 = call i32 @function_116e8(i32 %v0_102f0)
  %v0_10308 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_10300, i32* @r5, align 4
  %v4_10310 = call i32 @function_10478(i32 %v1_10300, i32 ptrtoint ([18 x i8]* @global_var_13688.400 to i32), i32 %v0_10308)
  %v0_10318 = load i32, i32* @r5, align 4
  store i32 %v0_10318, i32* @global_var_1bcb0.401, align 4
  %v1_1031c = trunc i32 %v0_10308 to i8
  store i8 %v1_1031c, i8* bitcast (i32* @global_var_1bcb4.402 to i8*), align 4
  %v0_10320 = load i32, i32* @r6, align 4
  %v1_10320 = trunc i32 %v0_10320 to i8
  store i8 %v1_10320, i8* bitcast (i32* @global_var_1bcb5.403 to i8*), align 4
  %v1_10324 = call i32 @function_116e8(i32 12)
  store i32 %v1_10324, i32* @r5, align 4
  %v4_10334 = call i32 @function_10478(i32 %v1_10324, i32 ptrtoint ([13 x i8]* @global_var_1369c.405 to i32), i32 12)
  %v0_1033c = load i32, i32* @r7, align 4
  store i8 12, i8* bitcast (i32* @global_var_1bcbc.406 to i8*), align 4
  %v0_10344 = load i32, i32* @r5, align 4
  store i32 %v0_10344, i32* @global_var_1bcb8.407, align 4
  %v0_10348 = load i32, i32* @r6, align 4
  %v1_10348 = trunc i32 %v0_10348 to i8
  store i8 %v1_10348, i8* bitcast (i32* @global_var_1bcbd.408 to i8*), align 4
  %v1_1034c = call i32 @function_116e8(i32 %v0_1033c)
  %v0_10354 = load i32, i32* @r7, align 4
  store i32 %v1_1034c, i32* @r5, align 4
  %v4_1035c = call i32 @function_10478(i32 %v1_1034c, i32 ptrtoint ([15 x i8]* @global_var_136ac.410 to i32), i32 %v0_10354)
  %v0_10364 = load i32, i32* @r5, align 4
  store i32 %v0_10364, i32* @global_var_1bcc0.411, align 4
  %v0_10368 = load i32, i32* @r7, align 4
  %v1_10368 = trunc i32 %v0_10368 to i8
  store i8 %v1_10368, i8* bitcast (i32* @global_var_1bcc4.412 to i8*), align 4
  %v0_1036c = load i32, i32* @r6, align 4
  %v1_1036c = trunc i32 %v0_1036c to i8
  store i8 %v1_1036c, i8* bitcast (i32* @global_var_1bcc5.413 to i8*), align 4
  %v1_10370 = call i32 @function_116e8(i32 19)
  %v4_10380 = call i32 @function_10478(i32 %v1_10370, i32 ptrtoint ([20 x i8]* @global_var_136bc.415 to i32), i32 19)
  %v0_10388 = load i32, i32* @r6, align 4
  %v1_10388 = trunc i32 %v0_10388 to i8
  store i8 %v1_10388, i8* bitcast (i32* @global_var_1bccd.416 to i8*), align 4
  store i32 %v1_10370, i32* @global_var_1bcc8.417, align 4
  store i8 19, i8* bitcast (i32* @global_var_1bccc.418 to i8*), align 4
  %v2_10394 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10394, i32* @r4, align 4
  store i32 %v6_ffe0, i32* @r5, align 4
  store i32 %v9_ffe0, i32* @r6, align 4
  store i32 %v12_ffe0, i32* @r7, align 4
  ret i32 %v4_10380

; uselistorder directives
  uselistorder i32 %v1_1034c, { 1, 0 }
  uselistorder i32 %v1_10300, { 1, 0 }
  uselistorder i32 %v1_10264, { 1, 0 }
  uselistorder i32 %v1_101f0, { 1, 0 }
  uselistorder i32 %v1_100dc, { 1, 0 }
  uselistorder i32 %v1_100b4, { 1, 0 }
  uselistorder i32 %v1_10040, { 1, 0 }
  uselistorder i32 %v1_ffe8, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 10, 11, 0, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i8 16, { 15, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 3, 1, 4, 2 }
  uselistorder i8 58, { 9, 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @function_10478, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 5, 9, 6, 8, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1bc58.292 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_103fc(i8* %arg1) local_unnamed_addr {
dec_label_pc_103fc:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_10400 = load i8, i8* %arg1, align 1
  %v4_10400 = zext i8 %v3_10400 to i32
  %v2_10404 = icmp eq i8 %v3_10400, 0
  br i1 %v2_10404, label %dec_label_pc_10420, label %bb

dec_label_pc_10420:                               ; preds = %dec_label_pc_10410, %dec_label_pc_103fc
  %merge = phi i32 [ %v4_10400, %dec_label_pc_103fc ], [ %v1_10410, %dec_label_pc_10410 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_103fc
  br label %dec_label_pc_10410

dec_label_pc_10410:                               ; preds = %dec_label_pc_10410, %bb
  %v0_10410 = phi i32 [ %v1_10410, %dec_label_pc_10410 ], [ 0, %bb ]
  %v1_10410 = add i32 %v0_10410, 1
  %v2_10414 = add i32 %v1_10410, %tmp
  %v3_10414 = inttoptr i32 %v2_10414 to i8*
  %v4_10414 = load i8, i8* %v3_10414, align 1
  %v2_10418 = icmp eq i8 %v4_10414, 0
  br i1 %v2_10418, label %dec_label_pc_10420, label %dec_label_pc_10410

; uselistorder directives
  uselistorder i32 %v1_10410, { 1, 0, 2 }
}

define i32 @function_10424(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10424:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10424 = load i8, i8* %arg1, align 1
  %v3_10424 = zext i8 %v2_10424 to i32
  %v2_10428 = icmp eq i8 %v2_10424, 0
  br i1 %v2_10428, label %dec_label_pc_1046c, label %dec_label_pc_10430

dec_label_pc_10430:                               ; preds = %dec_label_pc_10424
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %dec_label_pc_10434, %dec_label_pc_10430
  %v0_10434 = phi i32 [ %v1_10434, %dec_label_pc_10434 ], [ 0, %dec_label_pc_10430 ]
  %v1_10434 = add i32 %v0_10434, 1
  store i32 %v1_10434, i32* %ip.global-to-local, align 4
  %v2_10438 = add i32 %v1_10434, %tmp
  %v3_10438 = inttoptr i32 %v2_10438 to i8*
  %v4_10438 = load i8, i8* %v3_10438, align 1
  %v2_1043c = icmp eq i8 %v4_10438, 0
  br i1 %v2_1043c, label %dec_label_pc_10444, label %dec_label_pc_10434

dec_label_pc_10444:                               ; preds = %dec_label_pc_10434
  %v7_10444 = icmp eq i32 %v0_10434, -2
  br i1 %v7_10444, label %dec_label_pc_10464, label %dec_label_pc_10450.preheader

dec_label_pc_10450.preheader:                     ; preds = %dec_label_pc_10444, %dec_label_pc_1046c
  %storemerge = phi i32 [ %v3_10424, %dec_label_pc_1046c ], [ %v1_10434, %dec_label_pc_10444 ]
  %v2_1045c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_10450

dec_label_pc_10450:                               ; preds = %dec_label_pc_10450.dec_label_pc_10450_crit_edge, %dec_label_pc_10450.preheader
  %v2_1045c = phi i32 [ %v5_1045c, %dec_label_pc_10450.dec_label_pc_10450_crit_edge ], [ %v2_1045c.pre, %dec_label_pc_10450.preheader ]
  %v0_10454 = phi i32 [ %v0_10454.pre, %dec_label_pc_10450.dec_label_pc_10450_crit_edge ], [ %tmp, %dec_label_pc_10450.preheader ]
  %v0_10450 = phi i32 [ %v0_10450.pre, %dec_label_pc_10450.dec_label_pc_10450_crit_edge ], [ %storemerge, %dec_label_pc_10450.preheader ]
  %v1_10450 = add i32 %v0_10450, -1
  store i32 %v1_10450, i32* @r2, align 4
  %v1_10454 = inttoptr i32 %v0_10454 to i8*
  %v2_10454 = load i8, i8* %v1_10454, align 1
  %v5_10454 = add i32 %v0_10454, 1
  store i32 %v5_10454, i32* %r1.global-to-local, align 4
  %v3_10458 = icmp eq i32 %v0_10450, 0
  %v3_1045c = inttoptr i32 %v2_1045c to i8*
  store i8 %v2_10454, i8* %v3_1045c, align 1
  %v4_1045c = load i32, i32* @r0, align 4
  %v5_1045c = add i32 %v4_1045c, 1
  store i32 %v5_1045c, i32* @r0, align 4
  br i1 %v3_10458, label %dec_label_pc_10464.loopexit, label %dec_label_pc_10450.dec_label_pc_10450_crit_edge

dec_label_pc_10450.dec_label_pc_10450_crit_edge:  ; preds = %dec_label_pc_10450
  %v0_10450.pre = load i32, i32* @r2, align 4
  %v0_10454.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10450

dec_label_pc_10464.loopexit:                      ; preds = %dec_label_pc_10450
  %v0_10464.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %dec_label_pc_10464.loopexit, %dec_label_pc_10444
  %v0_10464 = phi i32 [ %v0_10464.pre, %dec_label_pc_10464.loopexit ], [ %v1_10434, %dec_label_pc_10444 ]
  ret i32 %v0_10464

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10424
  store i32 %v3_10424, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10450.preheader

; uselistorder directives
  uselistorder i32 %v5_1045c, { 1, 0 }
  uselistorder i32 %v0_10454, { 1, 0 }
  uselistorder i32 %v1_10434, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_10424, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10450.preheader, { 1, 0 }
}

define i32 @function_10478(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10478:
  %v2_10478 = icmp eq i32 %arg3, 0
  br i1 %v2_10478, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_10484, %dec_label_pc_10478
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_10478
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %dec_label_pc_10484, %bb
  %v0_10484 = phi i32 [ %v1_1048c, %dec_label_pc_10484 ], [ 0, %bb ]
  %v2_10484 = add i32 %v0_10484, %arg2
  %v3_10484 = inttoptr i32 %v2_10484 to i8*
  %v4_10484 = load i8, i8* %v3_10484, align 1
  %v4_10488 = add i32 %v0_10484, %arg1
  %v5_10488 = inttoptr i32 %v4_10488 to i8*
  store i8 %v4_10484, i8* %v5_10488, align 1
  %v0_1048c = load i32, i32* @ip, align 4
  %v1_1048c = add i32 %v0_1048c, 1
  store i32 %v1_1048c, i32* @ip, align 4
  %v9_10490 = icmp eq i32 %v1_1048c, %arg3
  br i1 %v9_10490, label %.loopexit, label %dec_label_pc_10484

; uselistorder directives
  uselistorder i32 %v1_1048c, { 1, 2, 0 }
}

define i32 @function_1049c() local_unnamed_addr {
dec_label_pc_1049c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_1049c = load i32, i32* @r1, align 4
  %v2_1049c = icmp eq i32 %v0_1049c, 0
  br i1 %v2_1049c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_1049c
  %v2_104a0 = load i32, i32* @r0, align 4
  ret i32 %v2_104a0

bb3:                                              ; preds = %dec_label_pc_1049c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_104ac.dec_label_pc_104ac_crit_edge, %bb3
  %v2_104ac = phi i32 [ %v1_104b0, %dec_label_pc_104ac.dec_label_pc_104ac_crit_edge ], [ 0, %bb3 ]
  %v0_104ac.off0 = phi i8 [ %extract.t, %dec_label_pc_104ac.dec_label_pc_104ac_crit_edge ], [ 0, %bb3 ]
  %v3_104ac = load i32, i32* @r0, align 4
  %v4_104ac = add i32 %v3_104ac, %v2_104ac
  %v5_104ac = inttoptr i32 %v4_104ac to i8*
  store i8 %v0_104ac.off0, i8* %v5_104ac, align 1
  %v0_104b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_104b0 = add i32 %v0_104b0, 1
  store i32 %v1_104b0, i32* %r3.global-to-local, align 4
  %v1_104b4 = load i32, i32* @r1, align 4
  %v9_104b4 = icmp eq i32 %v1_104b0, %v1_104b4
  br i1 %v9_104b4, label %dec_label_pc_104bc, label %dec_label_pc_104ac.dec_label_pc_104ac_crit_edge

dec_label_pc_104ac.dec_label_pc_104ac_crit_edge:  ; preds = %dec_label_pc_104ac
  %v0_104ac.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_104ac.pre to i8
  br label %dec_label_pc_104ac

dec_label_pc_104bc:                               ; preds = %dec_label_pc_104ac
  %v1_104bc = load i32, i32* @r0, align 4
  ret i32 %v1_104bc

; uselistorder directives
  uselistorder i32 %v1_104b0, { 1, 2, 0 }
}

define i32 @function_104c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_104c0:
  store i32 %arg4, i32* @lr, align 4
  %v7_104d4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_104d4, label %dec_label_pc_104d8, label %dec_label_pc_104e0

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104f4, %dec_label_pc_104c0, %dec_label_pc_104e0
  ret i32 -1

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104c0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_104d8, label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104e0
  br label %dec_label_pc_10500

dec_label_pc_104f4:                               ; preds = %dec_label_pc_10518, %dec_label_pc_10500
  %v1_104f4 = add i32 %v0_10520, 1
  %v9_104f8 = icmp eq i32 %v1_104f4, %arg2
  br i1 %v9_104f8, label %dec_label_pc_104d8, label %dec_label_pc_10500

dec_label_pc_10500:                               ; preds = %dec_label_pc_104f4, %dec_label_pc_104e8
  %v0_10520 = phi i32 [ %v1_104f4, %dec_label_pc_104f4 ], [ 0, %dec_label_pc_104e8 ]
  %v0_1050c = phi i32 [ %v1_1050c., %dec_label_pc_104f4 ], [ 0, %dec_label_pc_104e8 ]
  %v2_10500 = add i32 %v0_1050c, %arg3
  %v3_10500 = inttoptr i32 %v2_10500 to i8*
  %v4_10500 = load i8, i8* %v3_10500, align 1
  %v2_10504 = add i32 %v0_10520, %arg1
  %v3_10504 = inttoptr i32 %v2_10504 to i8*
  %v4_10504 = load i8, i8* %v3_10504, align 1
  %v9_10508 = icmp eq i8 %v4_10504, %v4_10500
  %v1_1050c = add i32 %v0_1050c, 1
  %v1_1050c. = select i1 %v9_10508, i32 %v1_1050c, i32 0
  br i1 %v9_10508, label %dec_label_pc_10518, label %dec_label_pc_104f4

dec_label_pc_10518:                               ; preds = %dec_label_pc_10500
  %v9_10518 = icmp eq i32 %v1_1050c., %arg4
  br i1 %v9_10518, label %dec_label_pc_10520, label %dec_label_pc_104f4

dec_label_pc_10520:                               ; preds = %dec_label_pc_10518
  %v1_10520 = add i32 %v0_10520, 1
  ret i32 %v1_10520

; uselistorder directives
  uselistorder i1 %v9_10508, { 1, 0 }
  uselistorder i32 %v0_1050c, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_104d8, { 0, 2, 1 }
}

define i32 @function_10528(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10528:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10528 = load i32, i32* @r4, align 4
  store i32 %v3_10528, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %.thread, %dec_label_pc_1054c, %bb, %dec_label_pc_10528
  %v0_10534 = phi i32 [ %tmp, %dec_label_pc_10528 ], [ %v5_10534, %bb ], [ %v5_10534, %dec_label_pc_1054c ], [ %v5_10534, %.thread ]
  %v1_10534 = inttoptr i32 %v0_10534 to i8*
  %v2_10534 = load i8, i8* %v1_10534, align 1
  %v3_10534 = zext i8 %v2_10534 to i32
  %v5_10534 = add i32 %v0_10534, 1
  store i32 %v5_10534, i32* %r5.global-to-local, align 4
  %v7_1053c = icmp eq i8 %v2_10534, 9
  br i1 %v7_1053c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10534
  store i32 %v3_10534, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10534

bb:                                               ; preds = %dec_label_pc_10534
  %v8_10540 = icmp eq i8 %v2_10534, 32
  store i32 %v3_10534, i32* %r4.global-to-local, align 4
  br i1 %v8_10540, label %dec_label_pc_10534, label %dec_label_pc_1054c

dec_label_pc_1054c:                               ; preds = %bb
  %v7_1054c = icmp eq i8 %v2_10534, 10
  br i1 %v7_1054c, label %dec_label_pc_10534, label %dec_label_pc_10554

dec_label_pc_10554:                               ; preds = %dec_label_pc_1054c
  %v7_10554 = icmp eq i8 %v2_10534, 45
  br i1 %v7_10554, label %dec_label_pc_10634, label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %dec_label_pc_10554
  %v7_1055c = icmp eq i8 %v2_10534, 43
  br i1 %v7_1055c, label %bb48, label %dec_label_pc_1056c

bb48:                                             ; preds = %dec_label_pc_1055c
  %v2_10560 = inttoptr i32 %v5_10534 to i8*
  %v3_10560 = load i8, i8* %v2_10560, align 1
  %v4_10560 = zext i8 %v3_10560 to i32
  store i32 %v4_10560, i32* %r4.global-to-local, align 4
  %v6_10560 = add i32 %v0_10534, 2
  store i32 %v6_10560, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1056c

dec_label_pc_1056c:                               ; preds = %bb48, %dec_label_pc_1055c, %dec_label_pc_10634
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10634 ], [ 2147483647, %dec_label_pc_1055c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10634 ], [ 0, %dec_label_pc_1055c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10574 = call i32 @function_10a04(i32 %storemerge1, i32 %arg2)
  %v0_10578 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10578, i32* @r1, align 4
  store i32 %v2_10574, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_10584 = call i32 @function_108f4()
  store i32 %v0_10584, i32* @lr, align 4
  %v0_10594.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %.thread8, %dec_label_pc_1056c
  %v2_1061011 = phi i32 [ %v1_1062c26, %.thread8 ], [ 0, %dec_label_pc_1056c ]
  %v1_105ec = phi i32 [ %v0_1062024, %.thread8 ], [ 0, %dec_label_pc_1056c ]
  %v1_105d4 = phi i32 [ %v3_10618, %.thread8 ], [ %v0_10594.pre, %dec_label_pc_1056c ]
  %v1_10594 = urem i32 %v1_105d4, 256
  %v1_10598 = add nsw i32 %v1_10594, -48
  %v1_105a0 = add nsw i32 %v1_10594, -97
  %v1_105a4 = add i32 %v1_105d4, -48
  %v1_105a8 = add nsw i32 %v1_10594, -65
  %tmp71 = icmp ult i32 %v1_10598, 10
  br i1 %tmp71, label %dec_label_pc_105d8, label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_10594
  %v2_105b0 = icmp ugt i32 %v1_105a8, 24
  %v7_105b0 = icmp eq i32 %v1_105a8, 25
  %v2_105b4 = xor i1 %v7_105b0, true
  %v3_105b4 = and i1 %v2_105b0, %v2_105b4
  br i1 %v3_105b4, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_105b0
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_105b0, %bb49
  %v0_105c820 = phi i32 [ %v1_105a4, %dec_label_pc_105b0 ], [ 0, %bb49 ]
  %v2_105b8 = xor i1 %v2_105b0, true
  %v3_105b8 = or i1 %v7_105b0, %v2_105b8
  br i1 %v3_105b8, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_105c8 = phi i32 [ %v0_105c820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_105b4, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_105c0 = icmp ugt i32 %v1_105a0, 24
  %v11_105c0 = icmp eq i32 %v1_105a0, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_105c4 = phi i1 [ %v7_105b0, %bb52 ], [ %v11_105c0, %bb53 ]
  %v0_105c4 = phi i1 [ %v2_105b0, %bb52 ], [ %v6_105c0, %bb53 ]
  %v2_105c4 = xor i1 %v1_105c4, true
  %v3_105c4 = and i1 %v0_105c4, %v2_105c4
  br i1 %v3_105c4, label %dec_label_pc_10620, label %dec_label_pc_105c8

dec_label_pc_105c8:                               ; preds = %bb54
  %v2_105c8 = icmp eq i32 %v0_105c8, 0
  %. = select i1 %v2_105c8, i32 87, i32 55
  %v2_105d4 = sub i32 %v1_105d4, %.
  br label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %dec_label_pc_10594, %dec_label_pc_105c8
  %v0_105ec34 = phi i32 [ %v1_105a8, %dec_label_pc_10594 ], [ %., %dec_label_pc_105c8 ]
  %v3_1061012 = phi i32 [ %v1_105a4, %dec_label_pc_10594 ], [ %v2_105d4, %dec_label_pc_105c8 ]
  %v1_105d8 = load i32, i32* %r6.global-to-local, align 4
  %v6_105dc = icmp slt i32 %v3_1061012, %v1_105d8
  br i1 %v6_105dc, label %dec_label_pc_105e0, label %dec_label_pc_10620

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105d8
  %v3_105e0 = icmp uge i32 %v2_1061011, %v0_10584
  %v9_105e0 = icmp eq i32 %v2_1061011, %v0_10584
  %v2_105e4 = xor i1 %v3_105e0, true
  %v3_105e4 = or i1 %v9_105e0, %v2_105e4
  br i1 %v3_105e4, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_105e0
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_105e0, %bb57
  %v0_105ec33 = phi i32 [ %v0_105ec34, %dec_label_pc_105e0 ], [ 0, %bb57 ]
  %v2_105e8 = xor i1 %v9_105e0, true
  %v3_105e8 = and i1 %v3_105e0, %v2_105e8
  br i1 %v3_105e8, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_105ec = phi i32 [ %v0_105ec33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_105ec, 0
  %v4_105ec = zext i1 %tmp72 to i32
  %v5_105ec = or i32 %v0_105ec, %v4_105ec
  %v7_105ec = icmp eq i32 %v5_105ec, 0
  br i1 %v7_105ec, label %dec_label_pc_105f8, label %.thread8

dec_label_pc_105f8:                               ; preds = %bb60
  %v1_10604 = load i32, i32* %r8.global-to-local, align 4
  %v7_10608 = icmp sgt i32 %v3_1061012, %v1_10604
  br i1 %v7_10608, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_105f8
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_105f8
  %v2_1060c = icmp eq i1 %v9_105e0, false
  br i1 %v2_1060c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1061013 = mul i32 %v1_105d8, %v2_1061011
  %v5_1061014 = add i32 %v4_1061013, %v3_1061012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1062c26 = phi i32 [ %v2_1061011, %bb63 ], [ %v2_1061011, %bb60 ], [ %v5_1061014, %bb64 ]
  %v0_1062024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10618 = load i32, i32* %r5.global-to-local, align 4
  %v1_10618 = inttoptr i32 %v0_10618 to i8*
  %v2_10618 = load i8, i8* %v1_10618, align 1
  %v3_10618 = zext i8 %v2_10618 to i32
  store i32 %v3_10618, i32* %r4.global-to-local, align 4
  %v5_10618 = add i32 %v0_10618, 1
  store i32 %v5_10618, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10594

dec_label_pc_10620:                               ; preds = %dec_label_pc_105d8, %bb54
  %v1_10620 = icmp slt i32 %v1_105ec, 0
  %v0_10644 = load i32, i32* %sl.global-to-local, align 4
  %v2_10644 = icmp eq i32 %v0_10644, 0
  br i1 %v1_10620, label %dec_label_pc_10644, label %dec_label_pc_10628

dec_label_pc_10628:                               ; preds = %dec_label_pc_10620
  br i1 %v2_10644, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10628
  %v2_1062c = sub i32 0, %v2_1061011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10628, %bb65
  %v23_10630 = phi i32 [ %v2_1061011, %dec_label_pc_10628 ], [ %v2_1062c, %bb65 ]
  %v2_10630 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10630, i32* @r4, align 4
  ret i32 %v23_10630

dec_label_pc_10634:                               ; preds = %dec_label_pc_10554
  %v1_10634 = inttoptr i32 %v5_10534 to i8*
  %v2_10634 = load i8, i8* %v1_10634, align 1
  %v3_10634 = zext i8 %v2_10634 to i32
  store i32 %v3_10634, i32* %r4.global-to-local, align 4
  %v5_10634 = add i32 %v0_10534, 2
  store i32 %v5_10634, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1056c

dec_label_pc_10644:                               ; preds = %dec_label_pc_10620
  %.70 = select i1 %v2_10644, i32 2147483647, i32 -2147483648
  %v2_10650 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10650, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10618, { 1, 0 }
  uselistorder i1 %v9_105e0, { 1, 0, 2 }
  uselistorder i1 %v3_105e0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_105b0, { 1, 2, 0 }
  uselistorder i1 %v2_105b0, { 1, 0, 2 }
  uselistorder i32 %v1_10594, { 1, 2, 0 }
  uselistorder i32 %v1_105d4, { 1, 2, 0 }
  uselistorder i32 %v1_105ec, { 1, 0 }
  uselistorder i32 %v2_1061011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_10584, { 1, 0, 2 }
  uselistorder i32 %v5_10534, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10534, { 1, 0 }
  uselistorder i32 %v0_10534, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i8 9, { 3, 4, 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_105d8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1056c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10534, { 1, 2, 0, 3 }
}

define i32 @function_10654(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10654:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10654 = load i32, i32* @r4, align 4
  store i32 %v3_10654, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1066c

dec_label_pc_1066c:                               ; preds = %dec_label_pc_10698.dec_label_pc_1066c_crit_edge, %dec_label_pc_10654
  %v0_10670 = phi i32 [ %v0_10670.pre, %dec_label_pc_10698.dec_label_pc_1066c_crit_edge ], [ %arg3, %dec_label_pc_10654 ]
  %v0_1066c = phi i32 [ %v1_10684, %dec_label_pc_10698.dec_label_pc_1066c_crit_edge ], [ %tmp, %dec_label_pc_10654 ]
  %tmp12 = inttoptr i32 %v0_1066c to i32*
  %v5_10678 = call i32 @function_10e44(i32 %v0_10670, i32* %tmp12, i32 1)
  %v7_1067c = icmp eq i32 %v5_10678, 1
  %v0_10680 = load i32, i32* @r4, align 4
  %v1_10684 = add i32 %v0_10680, 1
  store i32 %v1_10684, i32* @r4, align 4
  %v0_1068c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_1067c, label %dec_label_pc_1068c, label %dec_label_pc_106a4

dec_label_pc_1068c:                               ; preds = %dec_label_pc_1066c
  %v1_1068c = add i32 %v0_1068c, 1
  store i32 %v1_1068c, i32* %r5.global-to-local, align 4
  %v0_10690 = load i32, i32* %r7.global-to-local, align 4
  %v7_10694 = icmp sgt i32 %v0_10690, %v1_1068c
  br i1 %v7_10694, label %dec_label_pc_10698, label %dec_label_pc_106a4

dec_label_pc_10698:                               ; preds = %dec_label_pc_1068c
  %v1_10698 = inttoptr i32 %v0_10680 to i8*
  %v2_10698 = load i8, i8* %v1_10698, align 1
  %v7_1069c = icmp eq i8 %v2_10698, 10
  br i1 %v7_1069c, label %dec_label_pc_106a4, label %dec_label_pc_10698.dec_label_pc_1066c_crit_edge

dec_label_pc_10698.dec_label_pc_1066c_crit_edge:  ; preds = %dec_label_pc_10698
  %v0_10670.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1066c

dec_label_pc_106a4:                               ; preds = %dec_label_pc_1066c, %dec_label_pc_10698, %dec_label_pc_1068c
  %v0_106a4 = phi i32 [ %v1_1068c, %dec_label_pc_10698 ], [ %v1_1068c, %dec_label_pc_1068c ], [ %v0_1068c, %dec_label_pc_1066c ]
  %v2_106a4 = icmp eq i32 %v0_106a4, 0
  %v1_106a8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_106a4, i32 0, i32 %v1_106a8
  %v2_106b0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_106b0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10684, { 1, 0 }
  uselistorder i8 10, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32*, i32)* @function_10e44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106a4, { 1, 2, 0 }
}

define i32 @function_106b4() local_unnamed_addr {
dec_label_pc_106b4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_106b4 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_106c4 = call i32 @function_11224()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_106cc = inttoptr i32 %v0_106c4 to i32*
  store i32 0, i32* %v2_106cc, align 4
  %v0_106d8 = load i32, i32* %r6.global-to-local, align 4
  %v3_106dc = call i32 @function_11550(i32 2, i32 2, i32 %v0_106d8)
  %v7_106e8 = icmp eq i32 %v3_106dc, -1
  store i32 %v3_106dc, i32* %r5.global-to-local, align 4
  %v2_106f4 = load i32, i32* @r4, align 4
  br i1 %v7_106e8, label %dec_label_pc_10744, label %dec_label_pc_10708

dec_label_pc_10708:                               ; preds = %dec_label_pc_106b4
  %v7_106f4 = shl i32 2056, %v2_106f4
  %v8_106f4 = or i32 %v7_106f4, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10724 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10724 = call i32 @function_113ac(i32 %v3_106dc, %sockaddr* %v3_10724, i32 %v2_106f4)
  %v2_1072c = ptrtoint i32* %stack_var_-24 to i32
  %v0_10730 = load i32, i32* %r5.global-to-local, align 4
  %v4_10734 = call i32 @function_113d8(i32 %v0_10730, %sockaddr* %v3_10724, i32 %v2_1072c)
  %v1_1073c = call i32 @function_10c7c(i32 %v0_10730)
  br label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %dec_label_pc_106b4, %dec_label_pc_10708
  %v0_10744 = phi i32 [ %v0_106d8, %dec_label_pc_106b4 ], [ %v8_106f4, %dec_label_pc_10708 ]
  store i32 %v3_106b4, i32* @r4, align 4
  ret i32 %v0_10744

; uselistorder directives
  uselistorder i32 %v3_106dc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_113ac, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11550, { 16, 18, 14, 15, 17, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10744, { 1, 0 }
}

define i32 @function_10750(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10750:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10754 = load i8, i8* %tmp, align 1
  %v2_10758 = icmp eq i8 %v3_10754, 0
  br i1 %v2_10758, label %bb, label %dec_label_pc_1076c

bb:                                               ; preds = %dec_label_pc_10750
  %v4_10754 = zext i8 %v3_10754 to i32
  br label %dec_label_pc_10780

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10750
  br label %dec_label_pc_10770

dec_label_pc_10770:                               ; preds = %dec_label_pc_10770, %dec_label_pc_1076c
  %v0_10770 = phi i32 [ %v1_10770, %dec_label_pc_10770 ], [ 0, %dec_label_pc_1076c ]
  %v1_10770 = add i32 %v0_10770, 1
  %v2_10774 = add i32 %v1_10770, %arg2
  %v3_10774 = inttoptr i32 %v2_10774 to i8*
  %v4_10774 = load i8, i8* %v3_10774, align 1
  %v2_10778 = icmp eq i8 %v4_10774, 0
  br i1 %v2_10778, label %dec_label_pc_10780, label %dec_label_pc_10770

dec_label_pc_10780:                               ; preds = %dec_label_pc_10770, %bb
  %v0_107c418 = phi i32 [ %v4_10754, %bb ], [ %v1_10770, %dec_label_pc_10770 ]
  %v0_107881 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_107881, 1
  br i1 %tmp27, label %dec_label_pc_107d4, label %dec_label_pc_10794

dec_label_pc_10794:                               ; preds = %dec_label_pc_10780, %dec_label_pc_10788.backedge
  %v0_1078c.in = phi i32 [ %v0_1078c, %dec_label_pc_10788.backedge ], [ %v0_107881, %dec_label_pc_10780 ]
  %v0_107b8 = phi i32 [ %v1_107b8., %dec_label_pc_10788.backedge ], [ 0, %dec_label_pc_10780 ]
  %v0_10794 = phi i32 [ %v5_10794, %dec_label_pc_10788.backedge ], [ %tmp20, %dec_label_pc_10780 ]
  %v0_1078c = add i32 %v0_1078c.in, -1
  %v1_10794 = inttoptr i32 %v0_10794 to i8*
  %v2_10794 = load i8, i8* %v1_10794, align 1
  %v3_10794 = zext i8 %v2_10794 to i32
  store i32 %v3_10794, i32* @lr, align 4
  %v5_10794 = add i32 %v0_10794, 1
  %v2_10798 = add i32 %v0_107b8, %arg2
  %v3_10798 = inttoptr i32 %v2_10798 to i8*
  %v4_10798 = load i8, i8* %v3_10798, align 1
  %v6_10798 = zext i8 %v4_10798 to i32
  %v1_1079c = add nsw i32 %v3_10794, -65
  %v1_107a0 = add nsw i32 %v6_10798, -65
  %tmp35 = icmp ult i32 %v1_1079c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_10794
  %v5_107a8 = or i32 %v3_10794, 96
  store i32 %v5_107a8, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10794, %bb28
  %v0_107b4 = phi i32 [ %v3_10794, %dec_label_pc_10794 ], [ %v5_107a8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_107a0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_107b0 = or i32 %v6_10798, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_107b4 = phi i32 [ %v6_10798, %bb29 ], [ %v5_107b0, %bb30 ]
  %v9_107b4 = icmp eq i32 %v0_107b4, %v1_107b4
  %v1_107b8 = add i32 %v0_107b8, 1
  %v1_107b8. = select i1 %v9_107b4, i32 %v1_107b8, i32 0
  br i1 %v9_107b4, label %dec_label_pc_107c4, label %dec_label_pc_10788.backedge

dec_label_pc_10788.backedge:                      ; preds = %bb31, %dec_label_pc_107c4
  %tmp32 = icmp slt i32 %v0_1078c, 1
  br i1 %tmp32, label %dec_label_pc_107d4, label %dec_label_pc_10794

dec_label_pc_107c4:                               ; preds = %bb31
  %v9_107c4 = icmp eq i32 %v0_107c418, %v1_107b8.
  br i1 %v9_107c4, label %dec_label_pc_107cc, label %dec_label_pc_10788.backedge

dec_label_pc_107cc:                               ; preds = %dec_label_pc_107c4
  %v2_107cc = sub i32 %v5_10794, %tmp20
  ret i32 %v2_107cc

dec_label_pc_107d4:                               ; preds = %dec_label_pc_10788.backedge, %dec_label_pc_10780
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_107b8., { 1, 0 }
  uselistorder i32 %v0_10794, { 1, 0 }
  uselistorder i32 %v0_107b8, { 1, 0 }
  uselistorder i8 %v3_10754, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10788.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10794, { 1, 0 }
}

define i32 @function_107dc(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_107dc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_107dc = load i32, i32* @r4, align 4
  store i32 %v3_107dc, i32* %stack_var_-28, align 4
  %v22_107dc = ptrtoint i32* %stack_var_-28 to i32
  %v0_107e0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_107e0, i32* %r8.global-to-local, align 4
  %v2_107e0 = icmp eq i32 %v0_107e0, 0
  store i1 %v2_107e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_107e0, label %dec_label_pc_108d0, label %dec_label_pc_107f0

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107dc
  %v3_107f0 = icmp eq i8 %arg1, 0
  store i1 %v3_107f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107f0, label %.thread, label %dec_label_pc_10804

.thread:                                          ; preds = %dec_label_pc_107f0
  %v4_107f8 = inttoptr i32 %v0_107e0 to i8*
  store i8 48, i8* %v4_107f8, align 1
  %v0_107fc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_107fc.pr.pr, label %.thread1, label %dec_label_pc_10804

.thread1:                                         ; preds = %.thread
  %v4_107fc = load i32, i32* %r8.global-to-local, align 4
  %v5_107fc = add i32 %v4_107fc, 1
  %v6_107fc = inttoptr i32 %v5_107fc to i8*
  store i8 0, i8* %v6_107fc, align 1
  %v0_10800.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10800.pr.pr, label %dec_label_pc_108d0, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107f0, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_10808 = icmp eq i32 %arg2, 10
  store i1 %v7_10808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10808, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_10804
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10804
  %v4_10804 = zext i1 %tmp39 to i32
  store i32 %v4_10804, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_1082c

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1083c

dec_label_pc_1082c:                               ; preds = %bb
  %v2_1082c = sub nsw i32 0, %tmp
  store i32 %v2_1082c, i32* %r4.global-to-local, align 4
  store i1 %v3_107f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107f0, label %dec_label_pc_108dc, label %dec_label_pc_1083c

dec_label_pc_1083c:                               ; preds = %dec_label_pc_1082c, %.thread4
  %v0_1084410 = phi i32 [ %tmp, %.thread4 ], [ %v2_1082c, %dec_label_pc_1082c ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_1082c ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_10840 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_10840, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %bb37, %dec_label_pc_1083c
  %v0_10844 = phi i32 [ %v0_10868, %bb37 ], [ %v0_1084410, %dec_label_pc_1083c ]
  store i32 %v0_10844, i32* %r0.global-to-local, align 4
  %v0_10848 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10848, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10844, 16777216
  %v1_1084c = sdiv i32 %sext, 16777216
  %v3_1084c = call i32 @function_10a04(i32 %v1_1084c, i32 %v0_10848)
  store i32 %v3_1084c, i32* %r0.global-to-local, align 4
  %v7_10850 = icmp eq i32 %v3_1084c, 9
  store i1 %v7_10850, i1* %cpsr_z.global-to-local, align 1
  %v1_10854 = add i32 %v3_1084c, 48
  %v0_10858 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10858, i32* @r1, align 4
  %v7_1085c = icmp sgt i32 %v3_1084c, 9
  %extract.t = trunc i32 %v1_10854 to i8
  br i1 %v7_1085c, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_10844
  %v9_1085c = add i32 %v3_1084c, 55
  %extract.t20 = trunc i32 %v9_1085c to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_10844, %bb36
  %v0_10864.off0 = phi i8 [ %extract.t, %dec_label_pc_10844 ], [ %extract.t20, %bb36 ]
  %v0_10860 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10860, i32* @r0, align 4
  %v2_10864 = load i32, i32* %r7.global-to-local, align 4
  %v3_10864 = inttoptr i32 %v2_10864 to i8*
  store i8 %v0_10864.off0, i8* %v3_10864, align 1
  %v4_10864 = load i32, i32* %r7.global-to-local, align 4
  %v5_10864 = add i32 %v4_10864, -1
  store i32 %v5_10864, i32* %r7.global-to-local, align 4
  %v0_10868 = call i32 @function_108f4()
  store i32 %v0_10868, i32* %r0.global-to-local, align 4
  store i32 %v0_10868, i32* %r4.global-to-local, align 4
  %v2_1086c = icmp eq i32 %v0_10868, 0
  store i1 %v2_1086c, i1* %cpsr_z.global-to-local, align 1
  %v0_10870 = load i32, i32* %r6.global-to-local, align 4
  %v1_10870 = add i32 %v0_10870, -1
  store i32 %v1_10870, i32* %r6.global-to-local, align 4
  br i1 %v2_1086c, label %dec_label_pc_10878, label %dec_label_pc_10844

dec_label_pc_10878:                               ; preds = %bb37
  %v0_10878 = load i32, i32* %sl.global-to-local, align 4
  %v2_10878 = icmp eq i32 %v0_10878, 0
  store i1 %v2_10878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10878, label %bb38, label %dec_label_pc_108e0

bb38:                                             ; preds = %dec_label_pc_10878
  store i32 %v0_10870, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %bb38, %dec_label_pc_108e0
  %v1_10890 = phi i32 [ %v0_10870, %bb38 ], [ %v1_10888.pre, %dec_label_pc_108e0 ]
  %v2_10884 = ptrtoint i32* %stack_var_-62 to i32
  %v2_10888 = add i32 %v1_10890, %v2_10884
  %v3_10888 = inttoptr i32 %v2_10888 to i8*
  %v4_10888 = load i8, i8* %v3_10888, align 1
  %v6_10888 = zext i8 %v4_10888 to i32
  store i32 %v6_10888, i32* %r2.global-to-local, align 4
  %v2_1088c = icmp eq i8 %v4_10888, 0
  store i1 %v2_1088c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10888, i32* %r1.global-to-local, align 4
  br i1 %v2_1088c, label %dec_label_pc_108b4, label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10884
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1089c

dec_label_pc_1089c:                               ; preds = %dec_label_pc_1089c, %dec_label_pc_10898
  %v0_1089c = phi i32 [ %v1_1089c, %dec_label_pc_1089c ], [ 0, %dec_label_pc_10898 ]
  %v1_1089c = add i32 %v0_1089c, 1
  store i32 %v1_1089c, i32* %r2.global-to-local, align 4
  %v2_108a0 = add i32 %v1_1089c, %v2_10888
  %v3_108a0 = inttoptr i32 %v2_108a0 to i8*
  %v4_108a0 = load i8, i8* %v3_108a0, align 1
  %v2_108a4 = icmp eq i8 %v4_108a0, 0
  store i1 %v2_108a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108a4, label %dec_label_pc_108ac, label %dec_label_pc_1089c

dec_label_pc_108ac:                               ; preds = %dec_label_pc_1089c
  %v7_108ac = icmp eq i32 %v0_1089c, -2
  store i1 %v7_108ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108ac, label %dec_label_pc_108d0, label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108ac, %dec_label_pc_10884
  %v0_108bc17 = phi i32 [ %v1_1089c, %dec_label_pc_108ac ], [ %v6_10888, %dec_label_pc_10884 ]
  store i32 %v2_10888, i32* %r0.global-to-local, align 4
  %v0_108b8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108b8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_108bc

dec_label_pc_108bc:                               ; preds = %dec_label_pc_108bc.dec_label_pc_108bc_crit_edge, %dec_label_pc_108b4
  %v2_108c8 = phi i32 [ %v5_108c8, %dec_label_pc_108bc.dec_label_pc_108bc_crit_edge ], [ %v0_108b8, %dec_label_pc_108b4 ]
  %v0_108c0 = phi i32 [ %v0_108c0.pre, %dec_label_pc_108bc.dec_label_pc_108bc_crit_edge ], [ %v2_10888, %dec_label_pc_108b4 ]
  %v0_108bc = phi i32 [ %v0_108bc.pre, %dec_label_pc_108bc.dec_label_pc_108bc_crit_edge ], [ %v0_108bc17, %dec_label_pc_108b4 ]
  %v1_108bc = add i32 %v0_108bc, -1
  store i32 %v1_108bc, i32* %r2.global-to-local, align 4
  %v1_108c0 = inttoptr i32 %v0_108c0 to i8*
  %v2_108c0 = load i8, i8* %v1_108c0, align 1
  %v5_108c0 = add i32 %v0_108c0, 1
  store i32 %v5_108c0, i32* %r0.global-to-local, align 4
  %v3_108c4 = icmp eq i32 %v0_108bc, 0
  store i1 %v3_108c4, i1* %cpsr_z.global-to-local, align 1
  %v3_108c8 = inttoptr i32 %v2_108c8 to i8*
  store i8 %v2_108c0, i8* %v3_108c8, align 1
  %v4_108c8 = load i32, i32* %r1.global-to-local, align 4
  %v5_108c8 = add i32 %v4_108c8, 1
  store i32 %v5_108c8, i32* %r1.global-to-local, align 4
  br i1 %v3_108c4, label %dec_label_pc_108d0, label %dec_label_pc_108bc.dec_label_pc_108bc_crit_edge

dec_label_pc_108bc.dec_label_pc_108bc_crit_edge:  ; preds = %dec_label_pc_108bc
  %v0_108bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_108c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_108bc

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108bc, %dec_label_pc_108ac, %.thread1, %dec_label_pc_107dc
  %v0_108d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108d0, i32* %r0.global-to-local, align 4
  %v2_108d8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_108d8, i32* @r4, align 4
  ret i32 %v0_108d0

dec_label_pc_108dc:                               ; preds = %dec_label_pc_1082c
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_108e0

dec_label_pc_108e0:                               ; preds = %dec_label_pc_10878, %dec_label_pc_108dc
  %v1_108e4 = phi i32 [ %v1_10870, %dec_label_pc_10878 ], [ 32, %dec_label_pc_108dc ]
  %v2_108e4 = add i32 %v1_108e4, %v22_107dc
  store i32 %v2_108e4, i32* %r2.global-to-local, align 4
  %v3_108ec = add i32 %v2_108e4, -34
  %v4_108ec = inttoptr i32 %v3_108ec to i8*
  store i8 45, i8* %v4_108ec, align 1
  %v1_10888.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10884

; uselistorder directives
  uselistorder i32 %v5_108c8, { 1, 0 }
  uselistorder i1 %v3_108c4, { 1, 0 }
  uselistorder i32 %v0_108c0, { 1, 0 }
  uselistorder i1 %v7_108ac, { 1, 0 }
  uselistorder i32 %v1_1089c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_10888, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10868, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1084c, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_107f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_107e0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_10a04, { 2, 1, 9, 7, 8, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_108e0, { 1, 0 }
  uselistorder label %dec_label_pc_10884, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_10804, { 2, 1, 0 }
}

define i32 @function_108f4() local_unnamed_addr {
dec_label_pc_108f4:
  %v0_108f4 = load i32, i32* @r1, align 4
  %v1_108f4 = add i32 %v0_108f4, -1
  store i32 %v1_108f4, i32* @r2, align 4
  %v7_108f4 = icmp eq i32 %v0_108f4, 1
  br i1 %v7_108f4, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_108f4
  %v2_108f8 = load i32, i32* @r0, align 4
  ret i32 %v2_108f8

bb82:                                             ; preds = %dec_label_pc_108f4
  %v2_108f4 = icmp eq i32 %v0_108f4, 0
  br i1 %v2_108f4, label %dec_label_pc_109dc, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %bb82
  %v0_10900 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_10900, %v0_108f4
  br i1 %tmp, label %dec_label_pc_10908, label %dec_label_pc_10994

dec_label_pc_10908:                               ; preds = %dec_label_pc_10900
  %v2_10908 = and i32 %v1_108f4, %v0_108f4
  %v4_10908 = icmp eq i32 %v2_10908, 0
  br i1 %v4_10908, label %dec_label_pc_109a0, label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %dec_label_pc_10908
  %v3_10910 = icmp ult i32 %v0_108f4, 536870912
  br i1 %v3_10910, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10910
  %v4_10914 = mul i32 %v0_108f4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10910, %.thread
  %v0_10934.pr36.ph = phi i32 [ %v4_10914, %.thread ], [ %v0_108f4, %dec_label_pc_10910 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10910 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10934.pr36 = phi i32 [ %v4_10928, %bb85 ], [ %v0_10934.pr36.ph, %.preheader.preheader ]
  %v1_1092c = phi i32 [ %v4_1092c, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_10920 = icmp ugt i32 %v0_10934.pr36, 268435455
  br i1 %v2_10920, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10934thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10924 = icmp ult i32 %v0_10934.pr36, %v0_10900
  br i1 %v4_10924, label %bb84, label %dec_label_pc_10934thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_10928 = and i32 %v0_10934.pr36, 268435456
  %v3_10928 = icmp eq i32 %v2_10928, 0
  %v4_10928 = mul i32 %v0_10934.pr36, 16
  br i1 %v3_10928, label %bb85, label %dec_label_pc_10934.loopexit

bb85:                                             ; preds = %bb84
  %v2_1092c = and i32 %v1_1092c, 268435456
  %v3_1092c = icmp eq i32 %v2_1092c, 0
  %v4_1092c = mul i32 %v1_1092c, 16
  br i1 %v3_1092c, label %.preheader, label %dec_label_pc_10934thread-pre-split.loopexit.loopexit

dec_label_pc_10934thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1094048.ph = phi i32 [ %v1_1092c, %bb83 ], [ %v4_1092c, %bb85 ]
  %v0_10934.pr38.ph = phi i32 [ %v0_10934.pr36, %bb83 ], [ %v4_10928, %bb85 ]
  br label %dec_label_pc_10934thread-pre-split.loopexit

dec_label_pc_10934thread-pre-split.loopexit:      ; preds = %dec_label_pc_10934thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1094048 = phi i32 [ %v1_1092c, %.thread2 ], [ %v1_1094048.ph, %dec_label_pc_10934thread-pre-split.loopexit.loopexit ]
  %v0_10934.pr38 = phi i32 [ %v0_10934.pr36, %.thread2 ], [ %v0_10934.pr38.ph, %dec_label_pc_10934thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10934thread-pre-split

dec_label_pc_10934thread-pre-split:               ; preds = %dec_label_pc_10934thread-pre-split.loopexit, %bb87
  %v1_1094046 = phi i32 [ %v1_1094048, %dec_label_pc_10934thread-pre-split.loopexit ], [ %v3_10940, %bb87 ]
  %v0_10934.pr = phi i32 [ %v0_10934.pr38, %dec_label_pc_10934thread-pre-split.loopexit ], [ %v3_1093c, %bb87 ]
  br label %dec_label_pc_10934

dec_label_pc_10934.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %dec_label_pc_10934.loopexit, %dec_label_pc_10934thread-pre-split
  %v1_10940 = phi i32 [ %v1_1094046, %dec_label_pc_10934thread-pre-split ], [ %v1_1092c, %dec_label_pc_10934.loopexit ]
  %v1_1093c = phi i32 [ %v0_10934.pr, %dec_label_pc_10934thread-pre-split ], [ %v4_10928, %dec_label_pc_10934.loopexit ]
  %v2_10934 = icmp slt i32 %v1_1093c, 0
  br i1 %v2_10934, label %dec_label_pc_10948, label %bb86

bb86:                                             ; preds = %dec_label_pc_10934
  %v4_10938 = icmp ult i32 %v1_1093c, %v0_10900
  br i1 %v4_10938, label %bb87, label %dec_label_pc_10948

bb87:                                             ; preds = %bb86
  %v3_1093c = mul i32 %v1_1093c, 2
  %v2_10940 = icmp slt i32 %v1_10940, 0
  %v3_10940 = mul i32 %v1_10940, 2
  br i1 %v2_10940, label %dec_label_pc_10948, label %dec_label_pc_10934thread-pre-split

dec_label_pc_10948:                               ; preds = %bb86, %dec_label_pc_10934, %bb87
  %v2_1095459 = phi i32 [ %v3_10940, %bb87 ], [ %v1_10940, %bb86 ], [ %v1_10940, %dec_label_pc_10934 ]
  %v1_1094c51 = phi i32 [ %v3_1093c, %bb87 ], [ %v1_1093c, %bb86 ], [ %v1_1093c, %dec_label_pc_10934 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_1094c

dec_label_pc_1094c:                               ; preds = %.thread11, %dec_label_pc_10948
  %v1_10980 = phi i32 [ %v4_10980, %.thread11 ], [ %v2_1095459, %dec_label_pc_10948 ]
  %v1_10954 = phi i32 [ %v0_1098c, %.thread11 ], [ 0, %dec_label_pc_10948 ]
  %v1_10984 = phi i32 [ %v4_10984, %.thread11 ], [ %v1_1094c51, %dec_label_pc_10948 ]
  %v1_10950 = phi i32 [ %v0_1097c, %.thread11 ], [ %v0_10900, %dec_label_pc_10948 ]
  %v3_1094c = icmp ult i32 %v1_10950, %v1_10984
  br i1 %v3_1094c, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_1094c
  %v3_10950 = sub i32 %v1_10950, %v1_10984
  %v3_10954 = or i32 %v1_10954, %v1_10980
  store i32 %v3_10954, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_1094c, %bb88
  %v1_1095c = phi i32 [ %v1_10950, %dec_label_pc_1094c ], [ %v3_10950, %bb88 ]
  %v1_10960 = phi i32 [ %v1_10954, %dec_label_pc_1094c ], [ %v3_10954, %bb88 ]
  %v4_10958 = udiv i32 %v1_10984, 2
  %v6_10958 = icmp ult i32 %v1_1095c, %v4_10958
  br i1 %v6_10958, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_1095c = urem i32 %v1_10984, 2
  %v4_1095c = icmp eq i32 %v3_1095c, 0
  %v6_1095c = sub i32 %v1_1095c, %v4_10958
  br i1 %v4_1095c, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10960 = udiv i32 %v1_10980, 2
  %v6_10960 = or i32 %v1_10960, %v5_10960
  store i32 %v6_10960, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_10968 = phi i32 [ %v6_1095c, %bb89 ], [ %v1_1095c, %.thread7 ], [ %v6_1095c, %bb90 ]
  %v1_1096c = phi i32 [ %v1_10960, %bb89 ], [ %v1_10960, %.thread7 ], [ %v6_10960, %bb90 ]
  %v4_10964 = udiv i32 %v1_10984, 4
  %v6_10964 = icmp ult i32 %v1_10968, %v4_10964
  br i1 %v6_10964, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_10968 = and i32 %v1_10984, 2
  %v4_10968 = icmp eq i32 %v3_10968, 0
  %v6_10968 = sub i32 %v1_10968, %v4_10964
  br i1 %v4_10968, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_1096c = udiv i32 %v1_10980, 4
  %v6_1096c = or i32 %v1_1096c, %v5_1096c
  store i32 %v6_1096c, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10974 = phi i32 [ %v6_10968, %bb91 ], [ %v1_10968, %.thread8 ], [ %v6_10968, %bb92 ]
  %v1_10978 = phi i32 [ %v1_1096c, %bb91 ], [ %v1_1096c, %.thread8 ], [ %v6_1096c, %bb92 ]
  %v4_10970 = udiv i32 %v1_10984, 8
  %v6_10970 = icmp ult i32 %v1_10974, %v4_10970
  br i1 %v6_10970, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10974 = and i32 %v1_10984, 4
  %v4_10974 = icmp eq i32 %v3_10974, 0
  %v6_10974 = sub i32 %v1_10974, %v4_10970
  br i1 %v4_10974, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_10978 = udiv i32 %v1_10980, 8
  %v6_10978 = or i32 %v1_10978, %v5_10978
  store i32 %v6_10978, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_1098c = phi i32 [ %v1_10978, %bb93 ], [ %v1_10978, %.thread9 ], [ %v6_10978, %bb94 ]
  %v0_1097c = phi i32 [ %v6_10974, %bb93 ], [ %v1_10974, %.thread9 ], [ %v6_10974, %bb94 ]
  %v2_1097c = icmp eq i32 %v0_1097c, 0
  br i1 %v2_1097c, label %dec_label_pc_1098c, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_10980, 16
  br i1 %tmp142, label %dec_label_pc_1098c, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_10980 = udiv i32 %v1_10980, 16
  %v4_10984 = udiv i32 %v1_10984, 16
  br label %dec_label_pc_1094c

dec_label_pc_1098c:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_1098c

dec_label_pc_10994:                               ; preds = %dec_label_pc_10900
  %v9_10900 = icmp eq i32 %v0_10900, %v0_108f4
  %. = zext i1 %v9_10900 to i32
  ret i32 %.

dec_label_pc_109a0:                               ; preds = %dec_label_pc_10908
  %v2_109a0 = icmp ugt i32 %v0_108f4, 65535
  br i1 %v2_109a0, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_109a0
  %v2_109a4 = and i32 %v0_108f4, 32768
  %v3_109a4 = icmp eq i32 %v2_109a4, 0
  %v4_109a4 = udiv i32 %v0_108f4, 65536
  br i1 %v3_109a4, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_109a0
  %v0_109b065 = phi i32 [ %v0_108f4, %dec_label_pc_109a0 ], [ %v4_109a4, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_109b4 = phi i32 [ %v0_109b065, %.thread16 ], [ %v4_109a4, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_109b0 = icmp ugt i32 %v1_109b4, 255
  br i1 %v2_109b0, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_109b4 = and i32 %v1_109b4, 128
  %v3_109b4 = icmp eq i32 %v2_109b4, 0
  %v4_109b4 = udiv i32 %v1_109b4, 256
  br i1 %v3_109b4, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_109b8 = or i32 %storemerge, 8
  store i32 %v2_109b8, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_109c4 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_109b8, %bb102 ]
  %v1_109c0 = phi i32 [ %v1_109b4, %bb100 ], [ %v4_109b4, %bb101 ], [ %v4_109b4, %bb102 ]
  %v2_109bc = icmp ugt i32 %v1_109c0, 15
  br i1 %v2_109bc, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_109c0 = and i32 %v1_109c0, 8
  %v3_109c0 = icmp eq i32 %v2_109c0, 0
  %v4_109c0 = udiv i32 %v1_109c0, 16
  br i1 %v3_109c0, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_109c4 = add nsw i32 %v1_109c4, 4
  store i32 %v2_109c4, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_109cc = phi i32 [ %v1_109c4, %.thread17 ], [ %v1_109c4, %bb103 ], [ %v2_109c4, %bb104 ]
  %v5_109d0 = phi i32 [ %v1_109c0, %.thread17 ], [ %v4_109c0, %bb103 ], [ %v4_109c0, %bb104 ]
  %v2_109c8 = icmp ugt i32 %v5_109d0, 3
  %v7_109c8 = icmp eq i32 %v5_109d0, 4
  %v2_109cc = xor i1 %v7_109c8, true
  %v3_109cc = and i1 %v2_109c8, %v2_109cc
  br i1 %v3_109cc, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_109cc = add nsw i32 %v4_109cc, 3
  store i32 %v5_109cc, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_109d0 = phi i32 [ %v4_109cc, %.thread18 ], [ %v5_109cc, %bb105 ]
  %v2_109d0 = xor i1 %v2_109c8, true
  %v3_109d0 = or i1 %v7_109c8, %v2_109d0
  br i1 %v3_109d0, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_109d0 = udiv i32 %v5_109d0, 2
  %v9_109d0 = add i32 %v4_109d0, %v8_109d0
  store i32 %v9_109d0, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_109d4 = phi i32 [ %v4_109d0, %bb106 ], [ %v9_109d0, %bb107 ]
  %v6_109d4 = lshr i32 %v0_10900, %v1_109d4
  ret i32 %v6_109d4

dec_label_pc_109dc:                               ; preds = %bb82
  %v0_109dc = load i32, i32* @lr, align 4
  %v0_109e0 = call i32 @function_10bb4()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_109dc)
  %v6_109ec = load i32, i32* @r1, align 4
  %v9_109ec = load i32, i32* @lr, align 4
  %v0_109f0 = call i32 @function_108f4()
  store i32 %v6_109ec, i32* @r2, align 4
  store i32 %v9_109ec, i32* @lr, align 4
  ret i32 %v0_109f0

; uselistorder directives
  uselistorder i32 %v4_109d0, { 1, 0 }
  uselistorder i1 %v7_109c8, { 1, 0 }
  uselistorder i32 %v4_109c0, { 1, 0 }
  uselistorder i32 %v1_109c0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_109b8, { 1, 0 }
  uselistorder i32 %v4_109b4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_109b4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_109a4, { 1, 0 }
  uselistorder i32 %v0_1097c, { 1, 0 }
  uselistorder i32 %v4_10970, { 1, 0 }
  uselistorder i32 %v1_10978, { 1, 2, 0 }
  uselistorder i32 %v4_10964, { 1, 0 }
  uselistorder i32 %v1_1096c, { 1, 2, 0 }
  uselistorder i32 %v4_10958, { 1, 0 }
  uselistorder i32 %v1_10960, { 1, 2, 0 }
  uselistorder i32 %v1_10984, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10954, { 1, 0 }
  uselistorder i32 %v1_10980, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10940, { 1, 0 }
  uselistorder i32 %v3_1093c, { 1, 0 }
  uselistorder i32 %v1_1093c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10940, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1092c, { 1, 0 }
  uselistorder i32 %v4_10928, { 2, 1, 0 }
  uselistorder i32 %v1_1092c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10934.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_10900, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_108f4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_1098c, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10948, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10934thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10a04(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a04:
  store i32 %arg1, i32* @r0, align 4
  %v1_10a04 = add i32 %arg2, -1
  store i32 %v1_10a04, i32* @r2, align 4
  %v2_10a04 = icmp eq i32 %arg2, 0
  br i1 %v2_10a04, label %dec_label_pc_10ac0, label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_10a04
  %v7_10a04 = icmp eq i32 %arg2, 1
  br i1 %v7_10a04, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_10a0c
  %v1_10a0c = load i32, i32* @r0, align 4
  %v10_10a0c = icmp eq i32 %v1_10a0c, %arg2
  br i1 %v10_10a0c, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_10a0c, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_10a0c = icmp ult i32 %v1_10a0c, %arg2
  br i1 %v4_10a0c, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_10a14 = and i32 %v1_10a04, %arg2
  %v8_10a14 = icmp eq i32 %v6_10a14, 0
  br i1 %v8_10a14, label %.thread67, label %dec_label_pc_10a24.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_10a18 = phi i32 [ %v1_10a0c, %bb75 ], [ 0, %.thread65 ]
  %v3_10a18 = and i32 %v1_10a18, %v1_10a04
  br label %bb76

dec_label_pc_10a24.preheader:                     ; preds = %bb75
  %v2_10a2499 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_10a2499, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_10ab4, %bb74, %bb89, %bb84, %dec_label_pc_10a84, %.thread67
  %v5_10a1c = phi i32 [ %v1_10a0c, %bb74 ], [ %v3_10a18, %.thread67 ], [ %v1_10a60.v6_10a60.v6_10a68.v6_10a70, %dec_label_pc_10a84 ], [ 0, %bb84 ], [ %v1_10ab8, %dec_label_pc_10ab4 ], [ %v2_10ab4, %bb89 ]
  ret i32 %v5_10a1c

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_10a24.preheader
  %v0_10a38.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_10a24.preheader ], [ %v4_10a2c, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10a24.preheader ], [ %v2_10a3011, %.thread1.thread9 ]
  br label %dec_label_pc_10a38thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_10a24.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_10a3011, %.thread1.thread9 ], [ 0, %dec_label_pc_10a24.preheader ]
  %v0_10a38.pr33100 = phi i32 [ %v4_10a2c, %.thread1.thread9 ], [ %arg2, %dec_label_pc_10a24.preheader ]
  %v4_10a28 = icmp ult i32 %v0_10a38.pr33100, %v1_10a0c
  br i1 %v4_10a28, label %bb78, label %dec_label_pc_10a38thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_10a2c = and i32 %v0_10a38.pr33100, 268435456
  %v3_10a2c = icmp eq i32 %v2_10a2c, 0
  %v4_10a2c = mul i32 %v0_10a38.pr33100, 16
  br i1 %v3_10a2c, label %.thread1.thread9, label %dec_label_pc_10a38.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_10a3011 = add i32 %storemerge101, 4
  %v2_10a24 = icmp ugt i32 %v4_10a2c, 268435455
  br i1 %v2_10a24, label %.thread, label %bb77

dec_label_pc_10a38thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_10a38thread-pre-split.loopexit

dec_label_pc_10a38thread-pre-split.loopexit:      ; preds = %dec_label_pc_10a38thread-pre-split.loopexit.loopexit, %.thread
  %v0_10a38.pr3398 = phi i32 [ %v0_10a38.pr33.lcssa, %.thread ], [ %v0_10a38.pr33100, %dec_label_pc_10a38thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_10a38thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10a38thread-pre-split

dec_label_pc_10a38thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10a38thread-pre-split.loopexit
  %v1_10a4439 = phi i32 [ %storemerge95, %dec_label_pc_10a38thread-pre-split.loopexit ], [ %v2_10a44, %.thread4 ]
  %v0_10a38.pr = phi i32 [ %v0_10a38.pr3398, %dec_label_pc_10a38thread-pre-split.loopexit ], [ %v3_10a40, %.thread4 ]
  br label %dec_label_pc_10a38

dec_label_pc_10a38.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_10a38

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a38.loopexit, %dec_label_pc_10a38thread-pre-split
  %v0_10a4c.pr = phi i32 [ %v1_10a4439, %dec_label_pc_10a38thread-pre-split ], [ %storemerge101, %dec_label_pc_10a38.loopexit ]
  %v1_10a40 = phi i32 [ %v0_10a38.pr, %dec_label_pc_10a38thread-pre-split ], [ %v4_10a2c, %dec_label_pc_10a38.loopexit ]
  %v2_10a38 = icmp slt i32 %v1_10a40, 0
  br i1 %v2_10a38, label %dec_label_pc_10a4c, label %bb79

bb79:                                             ; preds = %dec_label_pc_10a38
  %v4_10a3c = icmp ult i32 %v1_10a40, %v1_10a0c
  br i1 %v4_10a3c, label %.thread4, label %dec_label_pc_10a4c

.thread4:                                         ; preds = %bb79
  %v3_10a40 = mul i32 %v1_10a40, 2
  %v2_10a44 = add i32 %v0_10a4c.pr, 1
  br label %dec_label_pc_10a38thread-pre-split

dec_label_pc_10a4c:                               ; preds = %bb79, %dec_label_pc_10a38
  %v2_10a4c = add i32 %v0_10a4c.pr, -3
  store i32 %v2_10a4c, i32* @r2, align 4
  %v5_10a50 = icmp slt i32 %v0_10a4c.pr, 3
  br i1 %v5_10a50, label %dec_label_pc_10a90, label %dec_label_pc_10a54

dec_label_pc_10a54:                               ; preds = %dec_label_pc_10a4c, %bb83
  %v6_10a7c = phi i32 [ %v0_10a84, %bb83 ], [ %v2_10a4c, %dec_label_pc_10a4c ]
  %v1_10a58 = phi i32 [ %v1_10a60.v6_10a60.v6_10a68.v6_10a70, %bb83 ], [ %v1_10a0c, %dec_label_pc_10a4c ]
  %v3_10a7812 = phi i32 [ %v3_10a78, %bb83 ], [ %v1_10a40, %dec_label_pc_10a4c ]
  %v3_10a54 = icmp ult i32 %v1_10a58, %v3_10a7812
  %v3_10a58 = select i1 %v3_10a54, i32 0, i32 %v3_10a7812
  %v1_10a60 = sub i32 %v1_10a58, %v3_10a58
  %v4_10a5c = udiv i32 %v3_10a7812, 2
  %v6_10a5c = icmp ult i32 %v1_10a60, %v4_10a5c
  %v6_10a60 = select i1 %v6_10a5c, i32 0, i32 %v4_10a5c
  %v1_10a60.v6_10a60 = sub i32 %v1_10a60, %v6_10a60
  %.demorgan = and i1 %v3_10a54, %v6_10a5c
  %v4_10a64 = udiv i32 %v3_10a7812, 4
  %v6_10a64 = icmp ult i32 %v1_10a60.v6_10a60, %v4_10a64
  %v6_10a68 = select i1 %v6_10a64, i32 0, i32 %v4_10a64
  %v1_10a60.v6_10a60.v6_10a68 = sub i32 %v1_10a60.v6_10a60, %v6_10a68
  %.demorgan71 = and i1 %.demorgan, %v6_10a64
  %v4_10a6c = udiv i32 %v3_10a7812, 8
  %v6_10a6c = icmp ult i32 %v1_10a60.v6_10a60.v6_10a68, %v4_10a6c
  %v6_10a70 = select i1 %v6_10a6c, i32 0, i32 %v4_10a6c
  %v1_10a60.v6_10a60.v6_10a68.v6_10a70 = sub i32 %v1_10a60.v6_10a60.v6_10a68, %v6_10a70
  %.demorgan72 = and i1 %.demorgan71, %v6_10a6c
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10a54
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10a54, %bb80
  %v2_10a74 = add i32 %v1_10a60.v6_10a60.v6_10a68.v6_10a70, -1
  %v4_10a74 = sub i32 0, %v1_10a60.v6_10a60.v6_10a68.v6_10a70
  %v5_10a74 = and i32 %v1_10a60.v6_10a60.v6_10a68.v6_10a70, %v4_10a74
  %v3_10a78 = udiv i32 %v3_10a7812, 16
  %v5_10a7c = icmp slt i32 %v1_10a60.v6_10a60.v6_10a68.v6_10a70, 1
  br i1 %v5_10a7c, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_10a7c = add i32 %v6_10a7c, -4
  store i32 %v7_10a7c, i32* @r2, align 4
  %v9_10a7c = sub i32 3, %v6_10a7c
  %v10_10a7c = and i32 %v9_10a7c, %v6_10a7c
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_10a84 = phi i32 [ %v6_10a7c, %bb81 ], [ %v7_10a7c, %bb82 ]
  %v0_10a8015.in = phi i32 [ %v2_10a74, %bb81 ], [ %v7_10a7c, %bb82 ]
  %v1_10a8014.in = phi i32 [ %v5_10a74, %bb81 ], [ %v10_10a7c, %bb82 ]
  %v1_10a8014 = icmp slt i32 %v1_10a8014.in, 0
  %v0_10a8015 = icmp slt i32 %v0_10a8015.in, 0
  %v2_10a80 = xor i1 %v0_10a8015, %v1_10a8014
  br i1 %v2_10a80, label %dec_label_pc_10a84, label %dec_label_pc_10a54

dec_label_pc_10a84:                               ; preds = %bb83
  %v1_10a84 = urem i32 %v0_10a84, 4
  %v2_10a84 = icmp eq i32 %v1_10a84, 0
  br i1 %v2_10a84, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_10a84
  %v3_10a88 = icmp eq i32 %v1_10a60.v6_10a60.v6_10a68.v6_10a70, 0
  br i1 %v3_10a88, label %bb76, label %dec_label_pc_10a90

dec_label_pc_10a90:                               ; preds = %bb84, %dec_label_pc_10a4c
  %v0_10aa4 = phi i32 [ %v3_10a78, %bb84 ], [ %v1_10a40, %dec_label_pc_10a4c ]
  %v1_10aa0 = phi i32 [ %v1_10a60.v6_10a60.v6_10a68.v6_10a70, %bb84 ], [ %v1_10a0c, %dec_label_pc_10a4c ]
  %v0_10a90 = phi i32 [ %v0_10a84, %bb84 ], [ %v2_10a4c, %dec_label_pc_10a4c ]
  %v5_10a94 = icmp slt i32 %v0_10a90, -2
  br i1 %v5_10a94, label %dec_label_pc_10ab4, label %dec_label_pc_10a98

dec_label_pc_10a98:                               ; preds = %dec_label_pc_10a90
  %v8_10a90 = icmp eq i32 %v0_10a90, -2
  br i1 %v8_10a90, label %dec_label_pc_10aa8, label %dec_label_pc_10a9c

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10a98
  %v3_10a9c = icmp ult i32 %v1_10aa0, %v0_10aa4
  br i1 %v3_10a9c, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_10a9c
  %v2_10a9c = sub i32 %v1_10aa0, %v0_10aa4
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_10a9c, %bb85
  %v0_10aa852 = phi i32 [ %v1_10aa0, %dec_label_pc_10a9c ], [ %v2_10a9c, %bb85 ]
  %v3_10aa4 = udiv i32 %v0_10aa4, 2
  br label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10a98, %bb86
  %v0_10ab0 = phi i32 [ %v0_10aa4, %dec_label_pc_10a98 ], [ %v3_10aa4, %bb86 ]
  %v1_10aac = phi i32 [ %v1_10aa0, %dec_label_pc_10a98 ], [ %v0_10aa852, %bb86 ]
  %v3_10aa8 = icmp ult i32 %v1_10aac, %v0_10ab0
  br i1 %v3_10aa8, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_10aa8
  %v2_10aa8 = sub i32 %v1_10aac, %v0_10ab0
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_10aa8, %bb87
  %v0_10ab455 = phi i32 [ %v1_10aac, %dec_label_pc_10aa8 ], [ %v2_10aa8, %bb87 ]
  %v3_10ab0 = udiv i32 %v0_10ab0, 2
  br label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10a90, %bb88
  %v2_10ab8 = phi i32 [ %v0_10aa4, %dec_label_pc_10a90 ], [ %v3_10ab0, %bb88 ]
  %v1_10ab8 = phi i32 [ %v1_10aa0, %dec_label_pc_10a90 ], [ %v0_10ab455, %bb88 ]
  %v3_10ab4 = icmp ult i32 %v1_10ab8, %v2_10ab8
  br i1 %v3_10ab4, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_10ab4
  %v2_10ab4 = sub i32 %v1_10ab8, %v2_10ab8
  br label %bb76

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10a04
  %v0_10ac0 = load i32, i32* @lr, align 4
  %v0_10ac4 = call i32 @function_10bb4()
  call void @__pseudo_branch(i32 %v0_10ac0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10ab8, { 1, 2, 0 }
  uselistorder i32 %v0_10aa4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10a84, { 1, 0, 2 }
  uselistorder i32 %v7_10a7c, { 1, 0, 2 }
  uselistorder i32 %v3_10a78, { 1, 0 }
  uselistorder i32 %v1_10a60.v6_10a60.v6_10a68.v6_10a70, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_10a6c, { 1, 0 }
  uselistorder i32 %v4_10a64, { 1, 0 }
  uselistorder i32 %v4_10a5c, { 1, 0 }
  uselistorder i32 %v6_10a7c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10a4c, { 1, 0, 2 }
  uselistorder i32 %v1_10a40, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_10a2c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10a38.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10a0c, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_10ab4, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_10aa8, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10a54, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_10ad0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ad0:
  store i32 %arg1, i32* @r0, align 4
  %v2_10ad0 = icmp eq i32 %arg2, 0
  br i1 %v2_10ad0, label %dec_label_pc_10ba4, label %dec_label_pc_10ad8

dec_label_pc_10ad8:                               ; preds = %dec_label_pc_10ad0
  %v1_10ad0 = icmp slt i32 %arg2, 0
  br i1 %v1_10ad0, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_10ad8
  %v2_10ad8 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_10ad8, %bb
  %v4_10af0 = phi i32 [ %arg2, %dec_label_pc_10ad8 ], [ %v2_10ad8, %bb ]
  %v0_10adc = load i32, i32* @r0, align 4
  %v1_10adc = icmp slt i32 %v0_10adc, 0
  br i1 %v1_10adc, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_10ae0 = sub i32 0, %v0_10adc
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_10ae8 = phi i32 [ %v0_10adc, %bb79 ], [ %v2_10ae0, %bb80 ]
  %v1_10ae4 = add i32 %v4_10af0, -1
  %v7_10ae4 = icmp eq i32 %v4_10af0, 1
  br i1 %v7_10ae4, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_10ae8 = icmp eq i32 %v1_10ae8, %v4_10af0
  br i1 %v10_10ae8, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_10ae8 = icmp ult i32 %v1_10ae8, %v4_10af0
  br i1 %v4_10ae8, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_10af0 = and i32 %v1_10ae4, %v4_10af0
  %v8_10af0 = icmp eq i32 %v6_10af0, 0
  br i1 %v8_10af0, label %.thread72, label %dec_label_pc_10b00.preheader

dec_label_pc_10b00.preheader:                     ; preds = %bb84
  %v2_10b00109 = icmp ugt i32 %v4_10af0, 268435455
  br i1 %v2_10b00109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_10af464 = phi i32 [ %v1_10ae8, %bb84 ], [ 0, %.thread70 ]
  %v3_10af4 = and i32 %v1_10af464, %v1_10ae4
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_10b00.preheader
  %v0_10b14.pr35.lcssa = phi i32 [ %v4_10af0, %dec_label_pc_10b00.preheader ], [ %v4_10b08, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10b00.preheader ], [ %v2_10b0c9, %.thread2.thread7 ]
  br label %dec_label_pc_10b14thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_10b00.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_10b0c9, %.thread2.thread7 ], [ 0, %dec_label_pc_10b00.preheader ]
  %v0_10b14.pr35110 = phi i32 [ %v4_10b08, %.thread2.thread7 ], [ %v4_10af0, %dec_label_pc_10b00.preheader ]
  %v4_10b04 = icmp ult i32 %v0_10b14.pr35110, %v1_10ae8
  br i1 %v4_10b04, label %bb86, label %dec_label_pc_10b14thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_10b08 = and i32 %v0_10b14.pr35110, 268435456
  %v3_10b08 = icmp eq i32 %v2_10b08, 0
  %v4_10b08 = mul i32 %v0_10b14.pr35110, 16
  br i1 %v3_10b08, label %.thread2.thread7, label %dec_label_pc_10b14.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_10b0c9 = add i32 %storemerge111, 4
  %v2_10b00 = icmp ugt i32 %v4_10b08, 268435455
  br i1 %v2_10b00, label %.thread1, label %bb85

dec_label_pc_10b14thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_10b14thread-pre-split.loopexit

dec_label_pc_10b14thread-pre-split.loopexit:      ; preds = %dec_label_pc_10b14thread-pre-split.loopexit.loopexit, %.thread1
  %v0_10b14.pr35108 = phi i32 [ %v0_10b14.pr35.lcssa, %.thread1 ], [ %v0_10b14.pr35110, %dec_label_pc_10b14thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_10b14thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10b14thread-pre-split

dec_label_pc_10b14thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10b14thread-pre-split.loopexit
  %v1_10b2041 = phi i32 [ %storemerge105, %dec_label_pc_10b14thread-pre-split.loopexit ], [ %v2_10b20, %.thread4 ]
  %v2_10b1836 = phi i32 [ %v1_10ae8, %dec_label_pc_10b14thread-pre-split.loopexit ], [ %v2_10b18, %.thread4 ]
  %v0_10b14.pr = phi i32 [ %v0_10b14.pr35108, %dec_label_pc_10b14thread-pre-split.loopexit ], [ %v3_10b1c, %.thread4 ]
  br label %dec_label_pc_10b14

dec_label_pc_10b14.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_10b14

dec_label_pc_10b14:                               ; preds = %dec_label_pc_10b14.loopexit, %dec_label_pc_10b14thread-pre-split
  %v0_10b28.pr = phi i32 [ %v1_10b2041, %dec_label_pc_10b14thread-pre-split ], [ %storemerge111, %dec_label_pc_10b14.loopexit ]
  %v2_10b18 = phi i32 [ %v2_10b1836, %dec_label_pc_10b14thread-pre-split ], [ %v1_10ae8, %dec_label_pc_10b14.loopexit ]
  %v1_10b1c = phi i32 [ %v0_10b14.pr, %dec_label_pc_10b14thread-pre-split ], [ %v4_10b08, %dec_label_pc_10b14.loopexit ]
  %v2_10b14 = icmp slt i32 %v1_10b1c, 0
  br i1 %v2_10b14, label %dec_label_pc_10b28, label %bb87

bb87:                                             ; preds = %dec_label_pc_10b14
  %v4_10b18 = icmp ult i32 %v1_10b1c, %v2_10b18
  br i1 %v4_10b18, label %.thread4, label %dec_label_pc_10b28

.thread4:                                         ; preds = %bb87
  %v3_10b1c = mul i32 %v1_10b1c, 2
  %v2_10b20 = add i32 %v0_10b28.pr, 1
  br label %dec_label_pc_10b14thread-pre-split

dec_label_pc_10b28:                               ; preds = %bb87, %dec_label_pc_10b14
  %v2_10b28 = add i32 %v0_10b28.pr, -3
  %v5_10b2c = icmp slt i32 %v0_10b28.pr, 3
  br i1 %v5_10b2c, label %dec_label_pc_10b6c, label %dec_label_pc_10b30

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b28, %bb91
  %v6_10b58 = phi i32 [ %v0_10b60, %bb91 ], [ %v2_10b28, %dec_label_pc_10b28 ]
  %v1_10b34 = phi i32 [ %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, %bb91 ], [ %v2_10b18, %dec_label_pc_10b28 ]
  %v3_10b5410 = phi i32 [ %v3_10b54, %bb91 ], [ %v1_10b1c, %dec_label_pc_10b28 ]
  %v3_10b30 = icmp ult i32 %v1_10b34, %v3_10b5410
  %v3_10b34 = select i1 %v3_10b30, i32 0, i32 %v3_10b5410
  %v1_10b3c = sub i32 %v1_10b34, %v3_10b34
  %v4_10b38 = udiv i32 %v3_10b5410, 2
  %v6_10b38 = icmp ult i32 %v1_10b3c, %v4_10b38
  %v6_10b3c = select i1 %v6_10b38, i32 0, i32 %v4_10b38
  %v1_10b3c.v6_10b3c = sub i32 %v1_10b3c, %v6_10b3c
  %.demorgan = and i1 %v3_10b30, %v6_10b38
  %v4_10b40 = udiv i32 %v3_10b5410, 4
  %v6_10b40 = icmp ult i32 %v1_10b3c.v6_10b3c, %v4_10b40
  %v6_10b44 = select i1 %v6_10b40, i32 0, i32 %v4_10b40
  %v1_10b3c.v6_10b3c.v6_10b44 = sub i32 %v1_10b3c.v6_10b3c, %v6_10b44
  %.demorgan76 = and i1 %.demorgan, %v6_10b40
  %v4_10b48 = udiv i32 %v3_10b5410, 8
  %v6_10b48 = icmp ult i32 %v1_10b3c.v6_10b3c.v6_10b44, %v4_10b48
  %v6_10b4c = select i1 %v6_10b48, i32 0, i32 %v4_10b48
  %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c = sub i32 %v1_10b3c.v6_10b3c.v6_10b44, %v6_10b4c
  %.demorgan77 = and i1 %.demorgan76, %v6_10b48
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_10b30
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_10b30, %bb88
  %v2_10b50 = add i32 %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, -1
  %v4_10b50 = sub i32 0, %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c
  %v5_10b50 = and i32 %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, %v4_10b50
  %v3_10b54 = udiv i32 %v3_10b5410, 16
  %v5_10b58 = icmp slt i32 %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, 1
  br i1 %v5_10b58, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_10b58 = add i32 %v6_10b58, -4
  %v9_10b58 = sub i32 3, %v6_10b58
  %v10_10b58 = and i32 %v9_10b58, %v6_10b58
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_10b60 = phi i32 [ %v6_10b58, %bb89 ], [ %v7_10b58, %bb90 ]
  %v0_10b5c13.in = phi i32 [ %v2_10b50, %bb89 ], [ %v7_10b58, %bb90 ]
  %v1_10b5c12.in = phi i32 [ %v5_10b50, %bb89 ], [ %v10_10b58, %bb90 ]
  %v1_10b5c12 = icmp slt i32 %v1_10b5c12.in, 0
  %v0_10b5c13 = icmp slt i32 %v0_10b5c13.in, 0
  %v2_10b5c = xor i1 %v0_10b5c13, %v1_10b5c12
  br i1 %v2_10b5c, label %dec_label_pc_10b60, label %dec_label_pc_10b30

dec_label_pc_10b60:                               ; preds = %bb91
  %v1_10b60 = urem i32 %v0_10b60, 4
  %v2_10b60 = icmp eq i32 %v1_10b60, 0
  br i1 %v2_10b60, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_10b60
  %v3_10b64 = icmp eq i32 %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, 0
  br i1 %v3_10b64, label %.thread6, label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %bb92, %dec_label_pc_10b28
  %v0_10b80 = phi i32 [ %v3_10b54, %bb92 ], [ %v1_10b1c, %dec_label_pc_10b28 ]
  %v1_10b7c = phi i32 [ %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, %bb92 ], [ %v2_10b18, %dec_label_pc_10b28 ]
  %v0_10b6c = phi i32 [ %v0_10b60, %bb92 ], [ %v2_10b28, %dec_label_pc_10b28 ]
  %v5_10b70 = icmp slt i32 %v0_10b6c, -2
  br i1 %v5_10b70, label %dec_label_pc_10b90, label %dec_label_pc_10b74

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b6c
  %v8_10b6c = icmp eq i32 %v0_10b6c, -2
  br i1 %v8_10b6c, label %dec_label_pc_10b84, label %dec_label_pc_10b78

dec_label_pc_10b78:                               ; preds = %dec_label_pc_10b74
  %v3_10b78 = icmp ult i32 %v1_10b7c, %v0_10b80
  br i1 %v3_10b78, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_10b78
  %v2_10b78 = sub i32 %v1_10b7c, %v0_10b80
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_10b78, %bb93
  %v0_10b8454 = phi i32 [ %v1_10b7c, %dec_label_pc_10b78 ], [ %v2_10b78, %bb93 ]
  %v3_10b80 = udiv i32 %v0_10b80, 2
  br label %dec_label_pc_10b84

dec_label_pc_10b84:                               ; preds = %dec_label_pc_10b74, %bb94
  %v0_10b8c = phi i32 [ %v0_10b80, %dec_label_pc_10b74 ], [ %v3_10b80, %bb94 ]
  %v1_10b88 = phi i32 [ %v1_10b7c, %dec_label_pc_10b74 ], [ %v0_10b8454, %bb94 ]
  %v3_10b84 = icmp ult i32 %v1_10b88, %v0_10b8c
  br i1 %v3_10b84, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_10b84
  %v2_10b84 = sub i32 %v1_10b88, %v0_10b8c
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_10b84, %bb95
  %v0_10b9057 = phi i32 [ %v1_10b88, %dec_label_pc_10b84 ], [ %v2_10b84, %bb95 ]
  %v3_10b8c = udiv i32 %v0_10b8c, 2
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b6c, %bb96
  %v2_10b94 = phi i32 [ %v0_10b80, %dec_label_pc_10b6c ], [ %v3_10b8c, %bb96 ]
  %v1_10b94 = phi i32 [ %v1_10b7c, %dec_label_pc_10b6c ], [ %v0_10b9057, %bb96 ]
  %v3_10b90 = icmp ult i32 %v1_10b94, %v2_10b94
  br i1 %v3_10b90, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_10b90
  %v2_10b90 = sub i32 %v1_10b94, %v2_10b94
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_10b90, %bb83, %.thread72, %dec_label_pc_10b60, %bb92, %bb97
  %v1_10b9c = phi i32 [ %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, %dec_label_pc_10b60 ], [ 0, %bb92 ], [ %v1_10b94, %dec_label_pc_10b90 ], [ %v2_10b90, %bb97 ], [ %v3_10af4, %.thread72 ], [ %v1_10ae8, %bb83 ]
  br i1 %v1_10adc, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_10b9c = sub i32 0, %v1_10b9c
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_10ba0 = phi i32 [ %v1_10b9c, %.thread6 ], [ %v2_10b9c, %bb98 ]
  ret i32 %v1_10ba0

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10ad0
  %v0_10ba4 = load i32, i32* @lr, align 4
  %v0_10ba8 = call i32 @function_10bb4()
  call void @__pseudo_branch(i32 %v0_10ba4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_10b80, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10b60, { 1, 0, 2 }
  uselistorder i32 %v7_10b58, { 1, 0 }
  uselistorder i32 %v3_10b54, { 1, 0 }
  uselistorder i32 %v1_10b3c.v6_10b3c.v6_10b44.v6_10b4c, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_10b48, { 1, 0 }
  uselistorder i32 %v4_10b40, { 1, 0 }
  uselistorder i32 %v4_10b38, { 1, 0 }
  uselistorder i32 %v6_10b58, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10b28, { 1, 0 }
  uselistorder i32 %v1_10b1c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_10b18, { 1, 0, 3, 2 }
  uselistorder i32 %v4_10b08, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10b14.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10ae8, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_10af0, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_10bb4, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10b90, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10b84, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_10b30, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_10bb4() local_unnamed_addr {
dec_label_pc_10bb4:
  %v1_10bb4 = load i32, i32* @r0, align 4
  ret i32 %v1_10bb4
}

define i32 @function_10bb8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10bb8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_10bb8 = load i32, i32* @r2, align 4
  %v1_10bc8 = add i32 %arg2, -12
  store i32 %v6_10bb8, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_10bc8, 2
  br i1 %tmp, label %dec_label_pc_10bf0, label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %dec_label_pc_10bb8
  %v0_10be8 = call i32 @function_10c2c()
  br label %dec_label_pc_10c1c

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10bb8
  %v2_10bf8 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_10bf8, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_10bf8, -4095
  br i1 %tmp8, label %dec_label_pc_10c1c, label %dec_label_pc_10c08

dec_label_pc_10c08:                               ; preds = %dec_label_pc_10bf0
  %v0_10c08 = call i32 @function_11224()
  %v0_10c0c = load i32, i32* %r4.global-to-local, align 4
  %v1_10c0c = sub i32 0, %v0_10c0c
  %v2_10c10 = inttoptr i32 %v0_10c08 to i32*
  store i32 %v1_10c0c, i32* %v2_10c10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10c08, %dec_label_pc_10bf0, %dec_label_pc_10be8
  %storemerge = phi i32 [ %v0_10be8, %dec_label_pc_10be8 ], [ %v2_10bf8, %dec_label_pc_10bf0 ], [ -1, %dec_label_pc_10c08 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10bf8, { 1, 0, 2 }
}

define i32 @function_10c2c() local_unnamed_addr {
dec_label_pc_10c2c:
  %r4.global-to-local = alloca i32, align 4
  %v0_10c4c = load i32, i32* @r0, align 4
  store i32 %v0_10c4c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c4c, -4095
  br i1 %tmp, label %dec_label_pc_10c68, label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c2c
  %v0_10c58 = call i32 @function_11224()
  %v0_10c5c = load i32, i32* %r4.global-to-local, align 4
  %v1_10c5c = sub i32 0, %v0_10c5c
  %v2_10c60 = inttoptr i32 %v0_10c58 to i32*
  store i32 %v1_10c5c, i32* %v2_10c60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c2c, %dec_label_pc_10c58
  %v0_10c68 = phi i32 [ %v0_10c4c, %dec_label_pc_10c2c ], [ -1, %dec_label_pc_10c58 ]
  ret i32 %v0_10c68

; uselistorder directives
  uselistorder i32 %v0_10c4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c68, { 1, 0 }
}

define i32 @function_10c7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c7c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c7c = load i32, i32* @r4, align 4
  store i32 %v3_10c7c, i32* %stack_var_-8, align 4
  %v1_10c80 = call i32 @close(i32 %arg1)
  store i32 %v1_10c80, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_10c80, -4095
  br i1 %tmp, label %dec_label_pc_10ca0, label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c7c
  %v0_10c90 = call i32 @function_11224()
  %v0_10c94 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c94 = sub i32 0, %v0_10c94
  %v2_10c98 = inttoptr i32 %v0_10c90 to i32*
  store i32 %v1_10c94, i32* %v2_10c98, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ca0

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c7c, %dec_label_pc_10c90
  %v0_10ca0 = phi i32 [ %v1_10c80, %dec_label_pc_10c7c ], [ -1, %dec_label_pc_10c90 ]
  %v2_10ca4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ca4, i32* @r4, align 4
  ret i32 %v0_10ca0

; uselistorder directives
  uselistorder i32 %v1_10c80, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ca0, { 1, 0 }
}

define i32 @function_10ca8() local_unnamed_addr {
dec_label_pc_10ca8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ca8 = load i32, i32* @r4, align 4
  store i32 %v3_10ca8, i32* %stack_var_-8, align 4
  %v0_10cac = call i32 @fork()
  store i32 %v0_10cac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cac, -4095
  br i1 %tmp, label %dec_label_pc_10ccc, label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10ca8
  %v0_10cbc = call i32 @function_11224()
  %v0_10cc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10cc0 = sub i32 0, %v0_10cc0
  %v2_10cc4 = inttoptr i32 %v0_10cbc to i32*
  store i32 %v1_10cc0, i32* %v2_10cc4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %dec_label_pc_10ca8, %dec_label_pc_10cbc
  %v0_10ccc = phi i32 [ %v0_10cac, %dec_label_pc_10ca8 ], [ -1, %dec_label_pc_10cbc ]
  %v2_10cd0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10cd0, i32* @r4, align 4
  ret i32 %v0_10ccc

; uselistorder directives
  uselistorder i32 %v0_10cac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ccc, { 1, 0 }
}

define i32 @function_10cd4() local_unnamed_addr {
dec_label_pc_10cd4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10cd4 = load i32, i32* @r4, align 4
  store i32 %v3_10cd4, i32* %stack_var_-8, align 4
  %v0_10cd8 = call i32 @getpid()
  store i32 %v0_10cd8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10cd8, -4095
  br i1 %tmp, label %dec_label_pc_10cf8, label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10cd4
  %v0_10ce8 = call i32 @function_11224()
  %v0_10cec = load i32, i32* %r4.global-to-local, align 4
  %v1_10cec = sub i32 0, %v0_10cec
  %v2_10cf0 = inttoptr i32 %v0_10ce8 to i32*
  store i32 %v1_10cec, i32* %v2_10cf0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %dec_label_pc_10cd4, %dec_label_pc_10ce8
  %v0_10cf8 = phi i32 [ %v0_10cd8, %dec_label_pc_10cd4 ], [ -1, %dec_label_pc_10ce8 ]
  %v2_10cfc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10cfc, i32* @r4, align 4
  ret i32 %v0_10cf8

; uselistorder directives
  uselistorder i32 %v0_10cd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10cf8, { 1, 0 }
}

define i32 @function_10d00() local_unnamed_addr {
dec_label_pc_10d00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d00 = load i32, i32* @r4, align 4
  store i32 %v3_10d00, i32* %stack_var_-8, align 4
  %v0_10d04 = call i32 @getppid()
  store i32 %v0_10d04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10d04, -4095
  br i1 %tmp, label %dec_label_pc_10d24, label %dec_label_pc_10d14

dec_label_pc_10d14:                               ; preds = %dec_label_pc_10d00
  %v0_10d14 = call i32 @function_11224()
  %v0_10d18 = load i32, i32* %r4.global-to-local, align 4
  %v1_10d18 = sub i32 0, %v0_10d18
  %v2_10d1c = inttoptr i32 %v0_10d14 to i32*
  store i32 %v1_10d18, i32* %v2_10d1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d24

dec_label_pc_10d24:                               ; preds = %dec_label_pc_10d00, %dec_label_pc_10d14
  %v0_10d24 = phi i32 [ %v0_10d04, %dec_label_pc_10d00 ], [ -1, %dec_label_pc_10d14 ]
  %v2_10d28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10d28, i32* @r4, align 4
  ret i32 %v0_10d24

; uselistorder directives
  uselistorder i32 %v0_10d04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d24, { 1, 0 }
}

define i32 @function_10d2c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10d2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10d2c = load i32, i32* @r3, align 4
  store i32 %v9_10d2c, i32* %stack_var_-4, align 4
  %v2_10d38 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10d38, i32* @r3, align 4
  %v2_10d48 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_10d48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10d48, -4095
  br i1 %tmp, label %dec_label_pc_10d68, label %dec_label_pc_10d58

dec_label_pc_10d58:                               ; preds = %dec_label_pc_10d2c
  %v0_10d58 = call i32 @function_11224()
  %v0_10d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_10d5c = sub i32 0, %v0_10d5c
  store i32 %v1_10d5c, i32* @r3, align 4
  %v2_10d60 = inttoptr i32 %v0_10d58 to i32*
  store i32 %v1_10d5c, i32* %v2_10d60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d68

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d2c, %dec_label_pc_10d58
  %v0_10d68 = phi i32 [ %v2_10d48, %dec_label_pc_10d2c ], [ -1, %dec_label_pc_10d58 ]
  ret i32 %v0_10d68

; uselistorder directives
  uselistorder i32 %v2_10d48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_10d68, { 1, 0 }
}

define i32 @function_10d7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d7c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10d7c = load i32, i32* @r4, align 4
  store i32 %v3_10d7c, i32* %stack_var_-8, align 4
  %v2_10d80 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_10d84 = icmp eq i32 %v2_10d80, -4096
  store i1 %v7_10d84, i1* @cpsr_z, align 1
  store i32 %v2_10d80, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10d80, -4095
  br i1 %tmp, label %dec_label_pc_10da0, label %dec_label_pc_10d90

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d7c
  %v0_10d90 = call i32 @function_11224()
  %v0_10d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_10d94 = sub i32 0, %v0_10d94
  %v2_10d98 = inttoptr i32 %v0_10d90 to i32*
  store i32 %v1_10d94, i32* %v2_10d98, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d7c, %dec_label_pc_10d90
  %v0_10da0 = phi i32 [ %v2_10d80, %dec_label_pc_10d7c ], [ -1, %dec_label_pc_10d90 ]
  %v2_10da4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10da4, i32* @r4, align 4
  ret i32 %v0_10da0

; uselistorder directives
  uselistorder i32 %v2_10d80, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_10da0, { 1, 0 }
}

define i32 @function_10da8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10da8:
  %r4.global-to-local = alloca i32, align 4
  %v6_10da8 = load i32, i32* @r2, align 4
  %v1_10db8 = and i32 %arg2, 64
  store i32 %v1_10db8, i32* @r3, align 4
  %v2_10db8 = icmp eq i32 %v1_10db8, 0
  br i1 %v2_10db8, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_10da8
  store i32 %v6_10da8, i32* @r3, align 4
  %phitmp = urem i32 %v6_10da8, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10da8, %bb
  %v0_10dc8 = phi i32 [ 0, %dec_label_pc_10da8 ], [ %phitmp, %bb ]
  store i32 %v0_10dc8, i32* @r2, align 4
  %v4_10dd0 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_10dd4 = icmp eq i32 %v4_10dd0, -4096
  store i1 %v7_10dd4, i1* @cpsr_z, align 1
  store i32 %v4_10dd0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10dd0, -4095
  br i1 %tmp, label %dec_label_pc_10df0, label %dec_label_pc_10de0

dec_label_pc_10de0:                               ; preds = %.thread1
  %v0_10de0 = call i32 @function_11224()
  %v0_10de4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10de4 = sub i32 0, %v0_10de4
  store i32 %v1_10de4, i32* @r3, align 4
  %v2_10de8 = inttoptr i32 %v0_10de0 to i32*
  store i32 %v1_10de4, i32* %v2_10de8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10df0

dec_label_pc_10df0:                               ; preds = %.thread1, %dec_label_pc_10de0
  %v0_10df0 = phi i32 [ %v4_10dd0, %.thread1 ], [ -1, %dec_label_pc_10de0 ]
  ret i32 %v0_10df0

; uselistorder directives
  uselistorder i32 %v4_10dd0, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10df0, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_10e04(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e04:
  store i32 %arg1, i32* @r2, align 4
  %v0_10e0c = load i32, i32* @r0, align 4
  %v2_10e0c = inttoptr i32 %v0_10e0c to i8*
  %v3_10e0c = call i32 @function_10da8(i8* %v2_10e0c, i32 577)
  %v0_10e10 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e10, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_10e04
  %v6_10e10 = and i32 %v3_10e0c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_10e04, %bb
  %v7_10e10 = phi i32 [ %v3_10e0c, %dec_label_pc_10e04 ], [ %v6_10e10, %bb ]
  ret i32 %v7_10e10

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_10e14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10e14 = load i32, i32* @r4, align 4
  store i32 %v3_10e14, i32* %stack_var_-8, align 4
  %v2_10e1c = load i32, i32* @r2, align 4
  %v3_10e1c = load i32, i32* @r3, align 4
  %v4_10e1c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_10e1c, i32 %v3_10e1c, i32 0)
  store i32 %v4_10e1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10e1c, -4095
  br i1 %tmp, label %dec_label_pc_10e3c, label %dec_label_pc_10e2c

dec_label_pc_10e2c:                               ; preds = %dec_label_pc_10e14
  %v0_10e2c = call i32 @function_11224()
  %v0_10e30 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e30 = sub i32 0, %v0_10e30
  %v2_10e34 = inttoptr i32 %v0_10e2c to i32*
  store i32 %v1_10e30, i32* %v2_10e34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %dec_label_pc_10e14, %dec_label_pc_10e2c
  %v0_10e3c = phi i32 [ %v4_10e1c, %dec_label_pc_10e14 ], [ -1, %dec_label_pc_10e2c ]
  %v2_10e40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10e40, i32* @r4, align 4
  ret i32 %v0_10e3c

; uselistorder directives
  uselistorder i32 %v4_10e1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10e3c, { 1, 0 }
}

define i32 @function_10e44(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10e44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10e44 = load i32, i32* @r4, align 4
  store i32 %v3_10e44, i32* %stack_var_-8, align 4
  %v4_10e48 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10e48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10e48, -4095
  br i1 %tmp, label %dec_label_pc_10e68, label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %dec_label_pc_10e44
  %v0_10e58 = call i32 @function_11224()
  %v0_10e5c = load i32, i32* %r4.global-to-local, align 4
  %v1_10e5c = sub i32 0, %v0_10e5c
  %v2_10e60 = inttoptr i32 %v0_10e58 to i32*
  store i32 %v1_10e5c, i32* %v2_10e60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e68

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e44, %dec_label_pc_10e58
  %v0_10e68 = phi i32 [ %v4_10e48, %dec_label_pc_10e44 ], [ -1, %dec_label_pc_10e58 ]
  %v2_10e6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10e6c, i32* @r4, align 4
  ret i32 %v0_10e68

; uselistorder directives
  uselistorder i32 %v4_10e48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10e68, { 1, 0 }
}

define i32 @function_10e70(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10e70:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_10e70 = load i32, i32* @r4, align 4
  store i32 %v3_10e70, i32* %stack_var_-8, align 4
  %v7_10e74 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_10e74, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_10e74, -4095
  br i1 %tmp6, label %dec_label_pc_10e94, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e70
  %v0_10e84 = call i32 @function_11224()
  %v0_10e88 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e88 = sub i32 0, %v0_10e88
  %v2_10e8c = inttoptr i32 %v0_10e84 to i32*
  store i32 %v1_10e88, i32* %v2_10e8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e94

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10e70, %dec_label_pc_10e84
  %v0_10e94 = phi i32 [ %v7_10e74, %dec_label_pc_10e70 ], [ -1, %dec_label_pc_10e84 ]
  %v2_10e98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10e98, i32* @r4, align 4
  ret i32 %v0_10e94

; uselistorder directives
  uselistorder i32 %v7_10e74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10e94, { 1, 0 }
}

define i32 @function_10e9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10e9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10e9c = load i32, i32* @r4, align 4
  store i32 %v3_10e9c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10ec4, label %dec_label_pc_10eb4

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10e9c
  %v0_10eb4 = call i32 @function_11224()
  %v0_10eb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10eb8 = sub i32 0, %v0_10eb8
  %v2_10ebc = inttoptr i32 %v0_10eb4 to i32*
  store i32 %v1_10eb8, i32* %v2_10ebc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10ec8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %dec_label_pc_10e9c, %dec_label_pc_10eb4
  %v2_10ec8 = phi i32 [ %v3_10e9c, %dec_label_pc_10e9c ], [ %v2_10ec8.pre, %dec_label_pc_10eb4 ]
  %v0_10ec4 = phi i32 [ %arg1, %dec_label_pc_10e9c ], [ -1, %dec_label_pc_10eb4 ]
  store i32 %v2_10ec8, i32* @r4, align 4
  ret i32 %v0_10ec4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ec4, { 1, 0 }
}

define i32 @function_10ecc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ecc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ecc = load i32, i32* @r4, align 4
  store i32 %v3_10ecc, i32* %stack_var_-8, align 4
  %v0_10ed0 = call i32 @setsid()
  store i32 %v0_10ed0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ed0, -4095
  br i1 %tmp, label %dec_label_pc_10ef0, label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10ecc
  %v0_10ee0 = call i32 @function_11224()
  %v0_10ee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ee4 = sub i32 0, %v0_10ee4
  %v2_10ee8 = inttoptr i32 %v0_10ee0 to i32*
  store i32 %v1_10ee4, i32* %v2_10ee8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10ecc, %dec_label_pc_10ee0
  %v0_10ef0 = phi i32 [ %v0_10ed0, %dec_label_pc_10ecc ], [ -1, %dec_label_pc_10ee0 ]
  %v2_10ef4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ef4, i32* @r4, align 4
  ret i32 %v0_10ef0

; uselistorder directives
  uselistorder i32 %v0_10ed0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ef0, { 1, 0 }
}

define i32 @function_10ef8(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ef8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ef8 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_10ef8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10ef8
  %v3_10f005 = load i32, i32* @r4, align 4
  store i32 %v3_10f005, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10f20

bb:                                               ; preds = %dec_label_pc_10ef8
  %v3_10f00 = load i32, i32* @r4, align 4
  store i32 %v3_10f00, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_10f20, label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %bb
  %v0_10f0c = call i32 @function_11224()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10f18 = inttoptr i32 %v0_10f0c to i32*
  store i32 22, i32* %v2_10f18, align 4
  %v0_10f44.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f44

dec_label_pc_10f20:                               ; preds = %.thread, %bb
  %v7_10f20 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_10f20, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_10f20, -4095
  br i1 %tmp13, label %dec_label_pc_10f40, label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10f20
  %v0_10f30 = call i32 @function_11224()
  %v0_10f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_10f34 = sub i32 0, %v0_10f34
  %v2_10f38 = inttoptr i32 %v0_10f30 to i32*
  store i32 %v1_10f34, i32* %v2_10f38, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f40

dec_label_pc_10f40:                               ; preds = %dec_label_pc_10f20, %dec_label_pc_10f30
  %v0_10f40 = phi i32 [ %v7_10f20, %dec_label_pc_10f20 ], [ -1, %dec_label_pc_10f30 ]
  store i32 %v0_10f40, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f44

dec_label_pc_10f44:                               ; preds = %dec_label_pc_10f0c, %dec_label_pc_10f40
  %v0_10f44 = phi i32 [ %v0_10f44.pre, %dec_label_pc_10f0c ], [ %v0_10f40, %dec_label_pc_10f40 ]
  %v2_10f48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10f48, i32* @r4, align 4
  ret i32 %v0_10f44

; uselistorder directives
  uselistorder i32 %v7_10f20, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10f44, { 1, 0 }
  uselistorder label %dec_label_pc_10f40, { 1, 0 }
  uselistorder label %dec_label_pc_10f20, { 1, 0 }
}

define i32 @function_10f4c(i32* %arg1) local_unnamed_addr {
dec_label_pc_10f4c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10f4c = load i32, i32* @r4, align 4
  store i32 %v3_10f4c, i32* %stack_var_-8, align 4
  %v2_10f50 = call i32 @time(i32* %arg1)
  store i32 %v2_10f50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10f50, -4095
  br i1 %tmp, label %dec_label_pc_10f70, label %dec_label_pc_10f60

dec_label_pc_10f60:                               ; preds = %dec_label_pc_10f4c
  %v0_10f60 = call i32 @function_11224()
  %v0_10f64 = load i32, i32* %r4.global-to-local, align 4
  %v1_10f64 = sub i32 0, %v0_10f64
  %v2_10f68 = inttoptr i32 %v0_10f60 to i32*
  store i32 %v1_10f64, i32* %v2_10f68, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f70

dec_label_pc_10f70:                               ; preds = %dec_label_pc_10f4c, %dec_label_pc_10f60
  %v0_10f70 = phi i32 [ %v2_10f50, %dec_label_pc_10f4c ], [ -1, %dec_label_pc_10f60 ]
  %v2_10f74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10f74, i32* @r4, align 4
  ret i32 %v0_10f70

; uselistorder directives
  uselistorder i32 %v2_10f50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10f70, { 1, 0 }
}

define i32 @function_10f78(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10f78:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10f78 = load i32, i32* @r4, align 4
  store i32 %v3_10f78, i32* %stack_var_-8, align 4
  %v4_10f7c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10f7c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10f7c, -4095
  br i1 %tmp, label %dec_label_pc_10f9c, label %dec_label_pc_10f8c

dec_label_pc_10f8c:                               ; preds = %dec_label_pc_10f78
  %v0_10f8c = call i32 @function_11224()
  %v0_10f90 = load i32, i32* %r4.global-to-local, align 4
  %v1_10f90 = sub i32 0, %v0_10f90
  %v2_10f94 = inttoptr i32 %v0_10f8c to i32*
  store i32 %v1_10f90, i32* %v2_10f94, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f78, %dec_label_pc_10f8c
  %v0_10f9c = phi i32 [ %v4_10f7c, %dec_label_pc_10f78 ], [ -1, %dec_label_pc_10f8c ]
  %v2_10fa0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10fa0, i32* @r4, align 4
  ret i32 %v0_10f9c

; uselistorder directives
  uselistorder i32 %v4_10f7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10f9c, { 1, 0 }
}

define i32 @function_10fa4(i32* %arg1) local_unnamed_addr {
dec_label_pc_10fa4:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10fa4 = load i32, i32* @r4, align 4
  store i32 %v3_10fa4, i32* %stack_var_-20, align 4
  %v6_10fa4 = load i32, i32* @r5, align 4
  %v9_10fa4 = load i32, i32* @r6, align 4
  %v12_10fa4 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_10fac = load i32, i32* %arg1, align 4
  store i32 %v2_10fac, i32* %r4.global-to-local, align 4
  %v2_10fb0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_10fb4 = add i32 %tmp, 24
  store i32 %v1_10fb4, i32* @r6, align 4
  %v3_10fb8 = icmp eq i32 %v2_10fac, -1
  store i32 %v2_10fb0, i32* @r7, align 4
  store i32 %v1_10fb4, i32* %r2.global-to-local, align 4
  store i32 %v2_10fb0, i32* @r0, align 4
  br i1 %v3_10fb8, label %dec_label_pc_10fd0, label %dec_label_pc_10fe4

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10fa4
  %v0_10fd0 = call i32 @function_11224()
  %v0_10fd8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10fd8, i32* %r2.global-to-local, align 4
  %v2_10fdc = inttoptr i32 %v0_10fd0 to i32*
  store i32 9, i32* %v2_10fdc, align 4
  %v0_1103c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1103c

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10fa4
  %v8_10fec = call i32 @function_120d8(i32 %v2_10fb0, i32 ptrtoint (i32* @global_var_120d0.421 to i32), i32 %v1_10fb4, i32 73944, i32 %v3_10fa4, i32 %v6_10fa4, i32 %v9_10fa4)
  %v1_10ffc = call i32 @function_120d0()
  %v0_11008 = load i32, i32* @r5, align 4
  %v1_11008 = inttoptr i32 %v0_11008 to i32*
  %v2_11008 = load i32, i32* %v1_11008, align 4
  store i32 %v2_11008, i32* @r4, align 4
  store i32 %v2_10fb0, i32* @r0, align 4
  store i32 -1, i32* %v1_11008, align 4
  store i32 ptrtoint (i32* @global_var_11020.425 to i32), i32* @lr, align 4
  %v8_1101c = call i32 @function_120d8(i32 %v2_10fb0, i32 1, i32 %v1_10fb4, i32 73944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11020 = load i32, i32* @r5, align 4
  %v1_11020 = add i32 %v0_11020, 12
  %v2_11020 = inttoptr i32 %v1_11020 to i32*
  %v3_11020 = load i32, i32* %v2_11020, align 4
  store i32 %v3_11020, i32* @r0, align 4
  %v0_11024 = call i32 @function_11894()
  %v0_11028 = load i32, i32* @r5, align 4
  store i32 %v0_11028, i32* @r0, align 4
  %v0_1102c = call i32 @function_11894()
  %v0_11030 = load i32, i32* @r4, align 4
  %v1_11034 = call i32 @function_10c7c(i32 %v0_11030)
  store i32 %v1_11034, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1103c

dec_label_pc_1103c:                               ; preds = %dec_label_pc_10fd0, %dec_label_pc_10fe4
  %v0_1103c = phi i32 [ %v0_1103c.pre, %dec_label_pc_10fd0 ], [ %v1_11034, %dec_label_pc_10fe4 ]
  %v2_11044 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11044, i32* @r4, align 4
  store i32 %v6_10fa4, i32* @r5, align 4
  store i32 %v9_10fa4, i32* @r6, align 4
  store i32 %v12_10fa4, i32* @r7, align 4
  ret i32 %v0_1103c

; uselistorder directives
  uselistorder i32 %v1_10fb4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_10fb0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_10fa4, { 1, 0 }
  uselistorder i32 %v6_10fa4, { 1, 0 }
  uselistorder label %dec_label_pc_1103c, { 1, 0 }
}

define i32 @function_11058(i32 %arg1) local_unnamed_addr {
dec_label_pc_11058:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_11058 = load i32, i32* @r4, align 4
  %v9_11058 = load i32, i32* @r6, align 4
  %v12_11058 = load i32, i32* @r7, align 4
  %v2_11064 = inttoptr i32 %arg1 to i8*
  %v3_11064 = call i32 @function_10da8(i8* %v2_11064, i32 18432)
  store i32 %v3_11064, i32* @r0, align 4
  store i32 %v3_11064, i32* @r7, align 4
  %v1_11068 = icmp slt i32 %v3_11064, 0
  br i1 %v1_11068, label %.thread1, label %dec_label_pc_11074

.thread1:                                         ; preds = %dec_label_pc_11058
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_11144

dec_label_pc_11074:                               ; preds = %dec_label_pc_11058
  %v2_11060 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_11060, i32* @r1, align 4
  %v0_11078 = call i32 @function_124fc()
  %v1_1107c = icmp slt i32 %v0_11078, 0
  br i1 %v1_1107c, label %dec_label_pc_1109c, label %dec_label_pc_11084

dec_label_pc_11084:                               ; preds = %dec_label_pc_11074
  %v0_11084 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_11090 = call i32 @function_10bb8(i32 %v0_11084, i32 2)
  %v1_11094 = icmp slt i32 %v2_11090, 0
  br i1 %v1_11094, label %dec_label_pc_1109c, label %dec_label_pc_110bc

dec_label_pc_1109c:                               ; preds = %dec_label_pc_11084, %dec_label_pc_11074
  %v0_1109c = call i32 @function_11224()
  store i32 %v0_1109c, i32* %r5.global-to-local, align 4
  %v0_110a4 = load i32, i32* @r7, align 4
  %v1_110a8 = inttoptr i32 %v0_1109c to i32*
  %v2_110a8 = load i32, i32* %v1_110a8, align 4
  store i32 %v2_110a8, i32* @r4, align 4
  %v1_110ac = call i32 @function_10c7c(i32 %v0_110a4)
  store i32 0, i32* @r6, align 4
  %v0_110b4 = load i32, i32* @r4, align 4
  %v1_110b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_110b4 = inttoptr i32 %v1_110b4 to i32*
  store i32 %v0_110b4, i32* %v2_110b4, align 4
  br label %dec_label_pc_11144

dec_label_pc_110bc:                               ; preds = %dec_label_pc_11084
  %v1_110c0 = call i32 @function_116e8(i32 48)
  store i32 %v1_110c0, i32* @r6, align 4
  %v2_110c4 = icmp eq i32 %v1_110c0, 0
  br i1 %v2_110c4, label %dec_label_pc_11114, label %dec_label_pc_110cc

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110bc
  store i32 0, i32* @r4, align 4
  %v2_110d0 = add i32 %v1_110c0, 16
  %v3_110d0 = inttoptr i32 %v2_110d0 to i32*
  store i32 0, i32* %v3_110d0, align 4
  %v2_110d8 = icmp ugt i32 %tmp, 511
  %v1_110dc = load i32, i32* @r6, align 4
  %v2_110dc = add i32 %v1_110dc, 20
  %v3_110dc = inttoptr i32 %v2_110dc to i32*
  store i32 %tmp, i32* %v3_110dc, align 4
  br i1 %v2_110d8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_110cc
  %v2_110e4 = load i32, i32* @r6, align 4
  %v3_110e4 = add i32 %v2_110e4, 20
  %v4_110e4 = inttoptr i32 %v3_110e4 to i32*
  store i32 512, i32* %v4_110e4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_110cc, %bb
  %v0_110e8 = load i32, i32* @r7, align 4
  %v1_110e8 = load i32, i32* @r6, align 4
  %v2_110e8 = inttoptr i32 %v1_110e8 to i32*
  store i32 %v0_110e8, i32* %v2_110e8, align 4
  %v0_110ec = load i32, i32* @r4, align 4
  %v1_110ec = load i32, i32* @r6, align 4
  %v2_110ec = add i32 %v1_110ec, 8
  %v3_110ec = inttoptr i32 %v2_110ec to i32*
  store i32 %v0_110ec, i32* %v3_110ec, align 4
  %v0_110f0 = load i32, i32* @r4, align 4
  %v1_110f0 = load i32, i32* @r6, align 4
  %v2_110f0 = add i32 %v1_110f0, 4
  %v3_110f0 = inttoptr i32 %v2_110f0 to i32*
  store i32 %v0_110f0, i32* %v3_110f0, align 4
  %v0_110f8 = load i32, i32* @r6, align 4
  %v1_110f8 = add i32 %v0_110f8, 20
  %v2_110f8 = inttoptr i32 %v1_110f8 to i32*
  %v3_110f8 = load i32, i32* %v2_110f8, align 4
  %v2_110fc = call i32 @function_1183c(i32 1, i32 %v3_110f8)
  %v2_11100 = icmp eq i32 %v2_110fc, 0
  %v1_11104 = load i32, i32* @r6, align 4
  %v2_11104 = add i32 %v1_11104, 12
  %v3_11104 = inttoptr i32 %v2_11104 to i32*
  store i32 %v2_110fc, i32* %v3_11104, align 4
  br i1 %v2_11100, label %dec_label_pc_1110c, label %dec_label_pc_11130

dec_label_pc_1110c:                               ; preds = %.thread
  %v0_1110c = load i32, i32* @r6, align 4
  store i32 %v0_1110c, i32* @r0, align 4
  %v0_11110 = call i32 @function_11894()
  br label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_110bc, %dec_label_pc_1110c
  %v0_11114 = load i32, i32* @r7, align 4
  %v1_11118 = call i32 @function_10c7c(i32 %v0_11114)
  %v0_1111c = call i32 @function_11224()
  store i32 0, i32* @r6, align 4
  %v2_11128 = inttoptr i32 %v0_1111c to i32*
  store i32 12, i32* %v2_11128, align 4
  br label %dec_label_pc_11144

dec_label_pc_11130:                               ; preds = %.thread
  store i32 69956, i32* @lr, align 4
  %v1_11140 = call i32 @function_120d0()
  br label %dec_label_pc_11144

dec_label_pc_11144:                               ; preds = %.thread1, %dec_label_pc_11114, %dec_label_pc_1109c, %dec_label_pc_11130
  %v0_11144 = load i32, i32* @r6, align 4
  store i32 %v3_11058, i32* @r4, align 4
  store i32 %v9_11058, i32* @r6, align 4
  store i32 %v12_11058, i32* @r7, align 4
  ret i32 %v0_11144

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_1183c, { 32, 33, 34, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 3, 2, 17, 16, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 512, { 0, 6, 9, 7, 1, 2, 10, 8, 11, 3, 12, 4, 13, 5, 14 }
  uselistorder i32 (i32)* @function_10c7c, { 13, 12, 11, 26, 31, 30, 25, 24, 29, 28, 23, 22, 27, 21, 20, 19, 18, 17, 16, 15, 14, 10, 2, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_11144, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11114, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11154(i32* %arg1) local_unnamed_addr {
dec_label_pc_11154:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11154 = load i32, i32* @r4, align 4
  %v6_11154 = load i32, i32* @r5, align 4
  %v9_11154 = load i32, i32* @lr, align 4
  %v1_11158 = add i32 %tmp, 24
  store i32 %v1_11158, i32* @r4, align 4
  %v2_1115c = ptrtoint i32* %stack_var_-28 to i32
  store i32 73944, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_1115c, i32* @r0, align 4
  store i32 %v1_11158, i32* %r2.global-to-local, align 4
  %v8_11178 = call i32 @function_120d8(i32 %v2_1115c, i32 ptrtoint (i32* @global_var_120d0.421 to i32), i32 %v1_11158, i32 73944, i32 %v3_11154, i32 %v6_11154, i32 %v9_11154)
  %v0_1117c = load i32, i32* @r4, align 4
  store i32 %v0_1117c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120d0.421 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1118c.430 to i32), i32* @lr, align 4
  %v1_11188 = call i32 @function_120d0()
  store i32 %v1_11188, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_111c0, %dec_label_pc_11154
  %v0_1118c = load i32, i32* @r5, align 4
  %v1_1118c = add i32 %v0_1118c, 4
  %v2_1118c = inttoptr i32 %v1_1118c to i32*
  %v3_1118c = load i32, i32* %v2_1118c, align 4
  store i32 %v3_1118c, i32* %r2.global-to-local, align 4
  %v4_1118c = add i32 %v0_1118c, 8
  %v5_1118c = inttoptr i32 %v4_1118c to i32*
  %v6_1118c = load i32, i32* %v5_1118c, align 4
  store i32 %v6_1118c, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_1118c, %v3_1118c
  br i1 %tmp8, label %dec_label_pc_111c0, label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_1118c
  %v1_11198 = inttoptr i32 %v0_1118c to i32*
  %v2_11198 = load i32, i32* %v1_11198, align 4
  store i32 %v2_11198, i32* @r0, align 4
  %v1_1119c = add i32 %v0_1118c, 12
  %v2_1119c = inttoptr i32 %v1_1119c to i32*
  %v3_1119c = load i32, i32* %v2_1119c, align 4
  %v1_111a0 = add i32 %v0_1118c, 20
  %v2_111a0 = inttoptr i32 %v1_111a0 to i32*
  %v3_111a0 = load i32, i32* %v2_111a0, align 4
  store i32 %v3_111a0, i32* @r2, align 4
  %v4_111a4 = call i32 @function_1254c(i32 %v2_11198, i32 %v3_1119c, i32 %v3_111a0, i32 %v6_1118c)
  store i32 %v4_111a4, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_111a4, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_111b4

.thread:                                          ; preds = %dec_label_pc_11198
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_111f4

dec_label_pc_111b4:                               ; preds = %dec_label_pc_11198
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_111b8 = load i32, i32* @r5, align 4
  %v2_111b8 = add i32 %v1_111b8, 4
  %v3_111b8 = inttoptr i32 %v2_111b8 to i32*
  store i32 0, i32* %v3_111b8, align 4
  %v1_111bc = load i32, i32* @r5, align 4
  %v2_111bc = add i32 %v1_111bc, 8
  %v3_111bc = inttoptr i32 %v2_111bc to i32*
  store i32 %v4_111a4, i32* %v3_111bc, align 4
  %v0_111c0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_111c0

dec_label_pc_111c0:                               ; preds = %dec_label_pc_1118c, %dec_label_pc_111b4
  %v1_111d8 = phi i32 [ %v0_1118c, %dec_label_pc_1118c ], [ %v0_111c0.pre, %dec_label_pc_111b4 ]
  %v1_111c0 = add i32 %v1_111d8, 4
  %v2_111c0 = inttoptr i32 %v1_111c0 to i32*
  %v3_111c0 = load i32, i32* %v2_111c0, align 4
  store i32 %v3_111c0, i32* %r2.global-to-local, align 4
  %v1_111c4 = add i32 %v1_111d8, 12
  %v2_111c4 = inttoptr i32 %v1_111c4 to i32*
  %v3_111c4 = load i32, i32* %v2_111c4, align 4
  store i32 %v3_111c4, i32* %ip.global-to-local, align 4
  %v2_111c8 = add i32 %v3_111c4, %v3_111c0
  store i32 %v2_111c8, i32* @r4, align 4
  %v1_111cc = add i32 %v2_111c8, 4
  %v2_111cc = inttoptr i32 %v1_111cc to i32*
  %v3_111cc = load i32, i32* %v2_111cc, align 4
  %v1_111d0 = add i32 %v2_111c8, 8
  %v2_111d0 = inttoptr i32 %v1_111d0 to i8*
  %v3_111d0 = load i8, i8* %v2_111d0, align 1
  %v4_111d0 = zext i8 %v3_111d0 to i32
  store i32 %v4_111d0, i32* %r3.global-to-local, align 4
  %v1_111d4 = add i32 %v2_111c8, 9
  %v2_111d4 = inttoptr i32 %v1_111d4 to i8*
  %v3_111d4 = load i8, i8* %v2_111d4, align 1
  %v4_111d4 = zext i8 %v3_111d4 to i32
  store i32 %v4_111d4, i32* %r0.global-to-local, align 4
  %v2_111d8 = add i32 %v1_111d8, 16
  %v3_111d8 = inttoptr i32 %v2_111d8 to i32*
  store i32 %v3_111cc, i32* %v3_111d8, align 4
  %v0_111dc = load i32, i32* %r2.global-to-local, align 4
  %v1_111dc = load i32, i32* %ip.global-to-local, align 4
  %v2_111dc = add i32 %v1_111dc, %v0_111dc
  %v3_111dc = inttoptr i32 %v2_111dc to i32*
  %v4_111dc = load i32, i32* %v3_111dc, align 4
  %v0_111e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_111e0 = load i32, i32* %r0.global-to-local, align 4
  %v4_111e0 = mul i32 %v1_111e0, 256
  %v5_111e0 = or i32 %v4_111e0, %v0_111e0
  store i32 %v5_111e0, i32* %r3.global-to-local, align 4
  %v2_111e4 = add i32 %v5_111e0, %v0_111dc
  store i32 %v2_111e4, i32* @r2, align 4
  %v2_111e8 = icmp eq i32 %v4_111dc, 0
  %v1_111ec = load i32, i32* @r5, align 4
  %v2_111ec = add i32 %v1_111ec, 4
  %v3_111ec = inttoptr i32 %v2_111ec to i32*
  store i32 %v2_111e4, i32* %v3_111ec, align 4
  br i1 %v2_111e8, label %dec_label_pc_1118c, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111c0, %.thread
  store i32 %v2_1115c, i32* @r0, align 4
  store i32 73944, i32* %r3.global-to-local, align 4
  store i32 70152, i32* @lr, align 4
  %v3_11204 = load i32, i32* @r2, align 4
  %v8_11204 = call i32 @function_120d8(i32 %v2_1115c, i32 1, i32 %v3_11204, i32 73944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11208 = load i32, i32* @r4, align 4
  store i32 %v0_11208, i32* %r0.global-to-local, align 4
  store i32 %v3_11154, i32* @r4, align 4
  store i32 %v6_11154, i32* @r5, align 4
  ret i32 %v0_11208

; uselistorder directives
  uselistorder i32 %v1_111d8, { 0, 2, 1 }
  uselistorder i32 %v6_1118c, { 1, 0, 2 }
  uselistorder i32 %v0_1118c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_1115c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_11158, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_111c0, { 1, 0 }
}

define i32 @function_11224() local_unnamed_addr {
dec_label_pc_11224:
  ret i32 ptrtoint (i32* @global_var_1bc24.433 to i32)
}

define i32 @function_11230(i32 %arg1) local_unnamed_addr {
dec_label_pc_11230:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_1123c = bitcast i32* %stack_var_-20 to %tms*
  %v2_1123c = call i32 @function_128dc(%tms* %v1_1123c)
  %v2_11244 = load i32, i32* %stack_var_-20, align 4
  %v2_11248 = add i32 %v2_11244, %tmp
  %v2_11250 = mul i32 %v2_11248, 10000
  %v1_11254 = and i32 %v2_11250, 2147483632
  ret i32 %v1_11254

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_11270(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11270:
  %v0_11270 = call i32 @function_12cf0()
  ret i32 %v0_11270
}

define i32 @function_11280(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11280:
  %v0_11280 = call i32 @function_12cf0()
  ret i32 %v0_11280

; uselistorder directives
  uselistorder i32 ()* @function_12cf0, { 1, 0 }
}

define i32 @function_11290(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11290:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_11294 = load i32, i32* @r2, align 4
  %v8_11294 = icmp eq i32 %v0_11294, 8
  store i1 %v8_11294, i1* %cpsr_z.global-to-local, align 1
  %v5_11298 = icmp slt i32 %v0_11294, 8
  br i1 %v5_11298, label %dec_label_pc_112f8, label %dec_label_pc_1129c

dec_label_pc_1129c:                               ; preds = %dec_label_pc_11290
  %v4_1129c = mul i32 %arg2, 256
  %v5_1129c = or i32 %v4_1129c, %arg2
  %v4_112a0 = mul i32 %v5_1129c, 65536
  %v5_112a0 = or i32 %v4_112a0, %v5_1129c
  store i32 %v5_112a0, i32* %r1.global-to-local, align 4
  %v1_112a457 = urem i32 %tmp, 4
  %v2_112a458 = icmp eq i32 %v1_112a457, 0
  store i1 %v2_112a458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_112a458, label %dec_label_pc_112b4, label %bb

bb:                                               ; preds = %dec_label_pc_1129c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1129c ]
  %v3_112a859 = phi i32 [ %v6_112a8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1129c ]
  %v4_112a8 = inttoptr i32 %v3_112a859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_112a8, align 1
  %v5_112a8 = load i32, i32* %r3.global-to-local, align 4
  %v6_112a8 = add i32 %v5_112a8, 1
  store i32 %v6_112a8, i32* %r3.global-to-local, align 4
  %v0_112ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_112b8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_112ac.pr, label %dec_label_pc_112b4, label %.thread

.thread:                                          ; preds = %bb
  %v2_112ac = add i32 %v0_112b8.pr.pre, -1
  store i32 %v2_112ac, i32* @r2, align 4
  %v1_112a4 = urem i32 %v6_112a8, 4
  %v2_112a4 = icmp eq i32 %v1_112a4, 0
  store i1 %v2_112a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112a4, label %dec_label_pc_112b4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_112a8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_112a8.pre to i8
  br label %bb

dec_label_pc_112b4:                               ; preds = %.thread, %bb, %dec_label_pc_1129c
  %v0_112c028 = phi i32 [ %tmp, %dec_label_pc_1129c ], [ %v6_112a8, %bb ], [ %v6_112a8, %.thread ]
  %v0_112b8.pr = phi i32 [ %v0_11294, %dec_label_pc_1129c ], [ %v0_112b8.pr.pre, %bb ], [ %v2_112ac, %.thread ]
  %v0_112b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_112b4, i32* %ip.global-to-local, align 4
  %v8_112b810 = icmp eq i32 %v0_112b8.pr, 8
  store i1 %v8_112b810, i1* %cpsr_z.global-to-local, align 1
  %v5_112bc11 = icmp slt i32 %v0_112b8.pr, 8
  br i1 %v5_112bc11, label %dec_label_pc_112f8, label %dec_label_pc_112c0.preheader

dec_label_pc_112c0.preheader:                     ; preds = %dec_label_pc_112b4
  %v1_112c046 = inttoptr i32 %v0_112c028 to i32*
  store i32 %v0_112b4, i32* %v1_112c046, align 4
  %v3_112c047 = add i32 %v0_112c028, 4
  %v4_112c048 = inttoptr i32 %v3_112c047 to i32*
  %v5_112c049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_112c049, i32* %v4_112c048, align 4
  %v6_112c050 = add i32 %v0_112c028, 8
  store i32 %v6_112c050, i32* %r3.global-to-local, align 4
  %v0_112c451 = load i32, i32* @r2, align 4
  %v1_112c452 = add i32 %v0_112c451, -8
  store i32 %v1_112c452, i32* %r2.global-to-local, align 4
  %v5_112cc53 = icmp slt i32 %v1_112c452, 8
  br i1 %v5_112cc53, label %dec_label_pc_112c0.dec_label_pc_112f8.loopexit_crit_edge, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112c0.preheader, %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge
  %v6_112c055 = phi i32 [ %v6_112c0, %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge ], [ %v6_112c050, %dec_label_pc_112c0.preheader ]
  %v0_112c054 = phi i32 [ %v12_112ec, %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge ], [ %v0_112c028, %dec_label_pc_112c0.preheader ]
  %v1_112d0 = inttoptr i32 %v6_112c055 to i32*
  %v2_112d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_112d0, i32* %v1_112d0, align 4
  %v3_112d0 = add i32 %v0_112c054, 12
  %v4_112d0 = inttoptr i32 %v3_112d0 to i32*
  %v5_112d0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_112d0, i32* %v4_112d0, align 4
  %v6_112d0 = add i32 %v0_112c054, 16
  store i32 %v6_112d0, i32* %r3.global-to-local, align 4
  %v0_112d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112d4 = add i32 %v0_112d4, -8
  store i32 %v1_112d4, i32* %r2.global-to-local, align 4
  %v5_112dc = icmp slt i32 %v1_112d4, 8
  br i1 %v5_112dc, label %dec_label_pc_112d0.dec_label_pc_112f8.loopexit_crit_edge, label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112d0
  %v1_112e0 = inttoptr i32 %v6_112d0 to i32*
  %v2_112e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_112e0, i32* %v1_112e0, align 4
  %v3_112e0 = add i32 %v0_112c054, 20
  %v4_112e0 = inttoptr i32 %v3_112e0 to i32*
  %v5_112e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_112e0, i32* %v4_112e0, align 4
  %v6_112e0 = add i32 %v0_112c054, 24
  store i32 %v6_112e0, i32* %r3.global-to-local, align 4
  %v0_112e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112e4 = add i32 %v0_112e4, -8
  store i32 %v1_112e4, i32* %r2.global-to-local, align 4
  %v5_112ec = icmp slt i32 %v1_112e4, 8
  br i1 %v5_112ec, label %dec_label_pc_112e0.dec_label_pc_112f8.loopexit_crit_edge, label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_112e0
  %v7_112ec = inttoptr i32 %v6_112e0 to i32*
  %v8_112ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_112ec, i32* %v7_112ec, align 4
  %v9_112ec = add i32 %v0_112c054, 28
  %v10_112ec = inttoptr i32 %v9_112ec to i32*
  %v11_112ec = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_112ec, i32* %v10_112ec, align 4
  %v12_112ec = add i32 %v0_112c054, 32
  store i32 %v12_112ec, i32* %r3.global-to-local, align 4
  %v6_112f0 = load i32, i32* %r2.global-to-local, align 4
  %v7_112f0 = add i32 %v6_112f0, -8
  store i32 %v7_112f0, i32* %r2.global-to-local, align 4
  %v5_112bc = icmp slt i32 %v7_112f0, 8
  br i1 %v5_112bc, label %dec_label_pc_112b8.dec_label_pc_112f8.loopexit_crit_edge, label %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge

dec_label_pc_112b8.dec_label_pc_112c0_crit_edge:  ; preds = %dec_label_pc_112b8
  %v2_112c0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_112c0 = inttoptr i32 %v12_112ec to i32*
  store i32 %v2_112c0.pre, i32* %v1_112c0, align 4
  %v3_112c0 = add i32 %v0_112c054, 36
  %v4_112c0 = inttoptr i32 %v3_112c0 to i32*
  %v5_112c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_112c0, i32* %v4_112c0, align 4
  %v6_112c0 = add i32 %v0_112c054, 40
  store i32 %v6_112c0, i32* %r3.global-to-local, align 4
  %v0_112c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_112c4 = add i32 %v0_112c4, -8
  store i32 %v1_112c4, i32* %r2.global-to-local, align 4
  %v5_112cc = icmp slt i32 %v1_112c4, 8
  br i1 %v5_112cc, label %dec_label_pc_112c0.dec_label_pc_112f8.loopexit_crit_edge, label %dec_label_pc_112d0

dec_label_pc_112c0.dec_label_pc_112f8.loopexit_crit_edge: ; preds = %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge, %dec_label_pc_112c0.preheader
  %v1_112c4.lcssa = phi i32 [ %v1_112c452, %dec_label_pc_112c0.preheader ], [ %v1_112c4, %dec_label_pc_112b8.dec_label_pc_112c0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112f8

dec_label_pc_112b8.dec_label_pc_112f8.loopexit_crit_edge: ; preds = %dec_label_pc_112b8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112f8

dec_label_pc_112d0.dec_label_pc_112f8.loopexit_crit_edge: ; preds = %dec_label_pc_112d0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112f8

dec_label_pc_112e0.dec_label_pc_112f8.loopexit_crit_edge: ; preds = %dec_label_pc_112e0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_112f8

dec_label_pc_112f8:                               ; preds = %dec_label_pc_112b4, %dec_label_pc_112c0.dec_label_pc_112f8.loopexit_crit_edge, %dec_label_pc_112b8.dec_label_pc_112f8.loopexit_crit_edge, %dec_label_pc_112d0.dec_label_pc_112f8.loopexit_crit_edge, %dec_label_pc_112e0.dec_label_pc_112f8.loopexit_crit_edge, %dec_label_pc_11290
  %v0_11300 = phi i32 [ %v0_11294, %dec_label_pc_11290 ], [ %v1_112e4, %dec_label_pc_112e0.dec_label_pc_112f8.loopexit_crit_edge ], [ %v1_112d4, %dec_label_pc_112d0.dec_label_pc_112f8.loopexit_crit_edge ], [ %v7_112f0, %dec_label_pc_112b8.dec_label_pc_112f8.loopexit_crit_edge ], [ %v1_112c4.lcssa, %dec_label_pc_112c0.dec_label_pc_112f8.loopexit_crit_edge ], [ %v0_112b8.pr, %dec_label_pc_112b4 ]
  %v2_112f8 = icmp eq i32 %v0_11300, 0
  store i1 %v2_112f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112f8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_112f8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_112f8
  %v1_11300 = sub i32 7, %v0_11300
  store i32 %v1_11300, i32* %r2.global-to-local, align 4
  %v3_11304 = mul i32 %v1_11300, 4
  %v4_11304 = add i32 %v3_11304, ptrtoint (i32* @global_var_1130c.435 to i32)
  call void @__pseudo_branch(i32 %v4_11304)
  %v0_1130c = load i32, i32* %r1.global-to-local, align 4
  %v1_1130c = trunc i32 %v0_1130c to i8
  %v2_1130c = load i32, i32* %r3.global-to-local, align 4
  %v3_1130c = inttoptr i32 %v2_1130c to i8*
  store i8 %v1_1130c, i8* %v3_1130c, align 1
  %v4_1130c = load i32, i32* %r3.global-to-local, align 4
  %v5_1130c = add i32 %v4_1130c, 1
  store i32 %v5_1130c, i32* %r3.global-to-local, align 4
  %v0_11310 = load i32, i32* %r1.global-to-local, align 4
  %v1_11310 = trunc i32 %v0_11310 to i8
  %v3_11310 = inttoptr i32 %v5_1130c to i8*
  store i8 %v1_11310, i8* %v3_11310, align 1
  %v4_11310 = load i32, i32* %r3.global-to-local, align 4
  %v5_11310 = add i32 %v4_11310, 1
  store i32 %v5_11310, i32* %r3.global-to-local, align 4
  %v0_11314 = load i32, i32* %r1.global-to-local, align 4
  %v1_11314 = trunc i32 %v0_11314 to i8
  %v3_11314 = inttoptr i32 %v5_11310 to i8*
  store i8 %v1_11314, i8* %v3_11314, align 1
  %v4_11314 = load i32, i32* %r3.global-to-local, align 4
  %v5_11314 = add i32 %v4_11314, 1
  store i32 %v5_11314, i32* %r3.global-to-local, align 4
  %v0_11318 = load i32, i32* %r1.global-to-local, align 4
  %v1_11318 = trunc i32 %v0_11318 to i8
  %v3_11318 = inttoptr i32 %v5_11314 to i8*
  store i8 %v1_11318, i8* %v3_11318, align 1
  %v4_11318 = load i32, i32* %r3.global-to-local, align 4
  %v5_11318 = add i32 %v4_11318, 1
  store i32 %v5_11318, i32* %r3.global-to-local, align 4
  %v0_1131c = load i32, i32* %r1.global-to-local, align 4
  %v1_1131c = trunc i32 %v0_1131c to i8
  %v3_1131c = inttoptr i32 %v5_11318 to i8*
  store i8 %v1_1131c, i8* %v3_1131c, align 1
  %v4_1131c = load i32, i32* %r3.global-to-local, align 4
  %v5_1131c = add i32 %v4_1131c, 1
  store i32 %v5_1131c, i32* %r3.global-to-local, align 4
  %v0_11320 = load i32, i32* %r1.global-to-local, align 4
  %v1_11320 = trunc i32 %v0_11320 to i8
  %v3_11320 = inttoptr i32 %v5_1131c to i8*
  store i8 %v1_11320, i8* %v3_11320, align 1
  %v4_11320 = load i32, i32* %r3.global-to-local, align 4
  %v5_11320 = add i32 %v4_11320, 1
  store i32 %v5_11320, i32* %r3.global-to-local, align 4
  %v0_11324 = load i32, i32* %r1.global-to-local, align 4
  %v1_11324 = trunc i32 %v0_11324 to i8
  %v3_11324 = inttoptr i32 %v5_11320 to i8*
  store i8 %v1_11324, i8* %v3_11324, align 1
  %v4_11324 = load i32, i32* %r3.global-to-local, align 4
  %v5_11324 = add i32 %v4_11324, 1
  store i32 %v5_11324, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_112c0, { 1, 0 }
  uselistorder i32 %v12_112ec, { 1, 2, 0 }
  uselistorder i32 %v0_112c054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_112b8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_112a8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1129c, { 1, 0 }
  uselistorder i32 %v0_11294, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_112f8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_112d0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11330(i32 %arg1) local_unnamed_addr {
dec_label_pc_11330:
  %stack_var_-8 = alloca i32, align 4
  %v2_11334 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_11334, i32* @r1, align 4
  %v0_1133c = call i32 @function_13180()
  %v2_11340 = icmp eq i32 %v0_1133c, 0
  br i1 %v2_11340, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11330
  %v3_11348 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_11330, %bb
  %v5_11350 = phi i32 [ -1, %dec_label_pc_11330 ], [ %v3_11348, %bb ]
  ret i32 %v5_11350

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_11354(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11354:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11354 = load i32, i32* @r4, align 4
  store i32 %v3_11354, i32* %stack_var_-8, align 4
  %v5_11358 = inttoptr i32 %arg3 to i32*
  %v6_11358 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_11358)
  store i32 %v6_11358, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_11358, -4095
  br i1 %tmp, label %dec_label_pc_11378, label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_11354
  %v0_11368 = call i32 @function_11224()
  %v0_1136c = load i32, i32* %r4.global-to-local, align 4
  %v1_1136c = sub i32 0, %v0_1136c
  %v2_11370 = inttoptr i32 %v0_11368 to i32*
  store i32 %v1_1136c, i32* %v2_11370, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11378

dec_label_pc_11378:                               ; preds = %dec_label_pc_11354, %dec_label_pc_11368
  %v0_11378 = phi i32 [ %v6_11358, %dec_label_pc_11354 ], [ -1, %dec_label_pc_11368 ]
  %v2_1137c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1137c, i32* @r4, align 4
  ret i32 %v0_11378

; uselistorder directives
  uselistorder i32 %v6_11358, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11378, { 1, 0 }
}

define i32 @function_11380(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11380:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11380 = load i32, i32* @r4, align 4
  store i32 %v3_11380, i32* %stack_var_-8, align 4
  %v5_11384 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11384, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11384, -4095
  br i1 %tmp, label %dec_label_pc_113a4, label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_11380
  %v0_11394 = call i32 @function_11224()
  %v0_11398 = load i32, i32* %r4.global-to-local, align 4
  %v1_11398 = sub i32 0, %v0_11398
  %v2_1139c = inttoptr i32 %v0_11394 to i32*
  store i32 %v1_11398, i32* %v2_1139c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113a4

dec_label_pc_113a4:                               ; preds = %dec_label_pc_11380, %dec_label_pc_11394
  %v0_113a4 = phi i32 [ %v5_11384, %dec_label_pc_11380 ], [ -1, %dec_label_pc_11394 ]
  %v2_113a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_113a8, i32* @r4, align 4
  ret i32 %v0_113a4

; uselistorder directives
  uselistorder i32 %v5_11384, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113a4, { 1, 0 }
}

define i32 @function_113ac(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113ac = load i32, i32* @r4, align 4
  store i32 %v3_113ac, i32* %stack_var_-8, align 4
  %v5_113b0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_113b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_113b0, -4095
  br i1 %tmp, label %dec_label_pc_113d0, label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_113ac
  %v0_113c0 = call i32 @function_11224()
  %v0_113c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_113c4 = sub i32 0, %v0_113c4
  %v2_113c8 = inttoptr i32 %v0_113c0 to i32*
  store i32 %v1_113c4, i32* %v2_113c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_113ac, %dec_label_pc_113c0
  %v0_113d0 = phi i32 [ %v5_113b0, %dec_label_pc_113ac ], [ -1, %dec_label_pc_113c0 ]
  %v2_113d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_113d4, i32* @r4, align 4
  ret i32 %v0_113d0

; uselistorder directives
  uselistorder i32 %v5_113b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113d0, { 1, 0 }
}

define i32 @function_113d8(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113d8 = load i32, i32* @r4, align 4
  store i32 %v3_113d8, i32* %stack_var_-8, align 4
  %v5_113dc = inttoptr i32 %arg3 to i32*
  %v6_113dc = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_113dc)
  store i32 %v6_113dc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_113dc, -4095
  br i1 %tmp, label %dec_label_pc_113fc, label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %dec_label_pc_113d8
  %v0_113ec = call i32 @function_11224()
  %v0_113f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_113f0 = sub i32 0, %v0_113f0
  %v2_113f4 = inttoptr i32 %v0_113ec to i32*
  store i32 %v1_113f0, i32* %v2_113f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113fc

dec_label_pc_113fc:                               ; preds = %dec_label_pc_113d8, %dec_label_pc_113ec
  %v0_113fc = phi i32 [ %v6_113dc, %dec_label_pc_113d8 ], [ -1, %dec_label_pc_113ec ]
  %v2_11400 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11400, i32* @r4, align 4
  ret i32 %v0_113fc

; uselistorder directives
  uselistorder i32 %v6_113dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113fc, { 1, 0 }
}

define i32 @function_11404(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11404:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11404 = load i32, i32* @r4, align 4
  store i32 %v3_11404, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1140c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_1140c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1140c, -4095
  br i1 %tmp, label %dec_label_pc_1142c, label %dec_label_pc_1141c

dec_label_pc_1141c:                               ; preds = %dec_label_pc_11404
  %v0_1141c = call i32 @function_11224()
  %v0_11420 = load i32, i32* %r4.global-to-local, align 4
  %v1_11420 = sub i32 0, %v0_11420
  %v2_11424 = inttoptr i32 %v0_1141c to i32*
  store i32 %v1_11420, i32* %v2_11424, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1142c

dec_label_pc_1142c:                               ; preds = %dec_label_pc_11404, %dec_label_pc_1141c
  %v0_1142c = phi i32 [ %v5_1140c, %dec_label_pc_11404 ], [ -1, %dec_label_pc_1141c ]
  %v2_11430 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11430, i32* @r4, align 4
  ret i32 %v0_1142c

; uselistorder directives
  uselistorder i32 %v5_1140c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1142c, { 1, 0 }
}

define i32 @function_11434(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11434:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11434 = load i32, i32* @r4, align 4
  store i32 %v3_11434, i32* %stack_var_-8, align 4
  %v2_11438 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_11438, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11438, -4095
  br i1 %tmp, label %dec_label_pc_11458, label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %dec_label_pc_11434
  %v0_11448 = call i32 @function_11224()
  %v0_1144c = load i32, i32* %r4.global-to-local, align 4
  %v1_1144c = sub i32 0, %v0_1144c
  %v2_11450 = inttoptr i32 %v0_11448 to i32*
  store i32 %v1_1144c, i32* %v2_11450, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11458

dec_label_pc_11458:                               ; preds = %dec_label_pc_11434, %dec_label_pc_11448
  %v0_11458 = phi i32 [ %v2_11438, %dec_label_pc_11434 ], [ -1, %dec_label_pc_11448 ]
  %v2_1145c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1145c, i32* @r4, align 4
  ret i32 %v0_11458

; uselistorder directives
  uselistorder i32 %v2_11438, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11458, { 1, 0 }
}

define i32 @function_11460(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11460:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11460 = load i32, i32* @r4, align 4
  store i32 %v3_11460, i32* %stack_var_-8, align 4
  %v5_11464 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11464, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11464, -4095
  br i1 %tmp, label %dec_label_pc_11484, label %dec_label_pc_11474

dec_label_pc_11474:                               ; preds = %dec_label_pc_11460
  %v0_11474 = call i32 @function_11224()
  %v0_11478 = load i32, i32* %r4.global-to-local, align 4
  %v1_11478 = sub i32 0, %v0_11478
  %v2_1147c = inttoptr i32 %v0_11474 to i32*
  store i32 %v1_11478, i32* %v2_1147c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11484

dec_label_pc_11484:                               ; preds = %dec_label_pc_11460, %dec_label_pc_11474
  %v0_11484 = phi i32 [ %v5_11464, %dec_label_pc_11460 ], [ -1, %dec_label_pc_11474 ]
  %v2_11488 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11488, i32* @r4, align 4
  ret i32 %v0_11484

; uselistorder directives
  uselistorder i32 %v5_11464, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11484, { 1, 0 }
}

define i32 @function_1148c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1148c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1148c = load i32, i32* @r4, align 4
  store i32 %v3_1148c, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11498 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_11498, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11498, -4095
  br i1 %tmp, label %dec_label_pc_114b8, label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %dec_label_pc_1148c
  %v0_114a8 = call i32 @function_11224()
  %v0_114ac = load i32, i32* %r4.global-to-local, align 4
  %v1_114ac = sub i32 0, %v0_114ac
  %v2_114b0 = inttoptr i32 %v0_114a8 to i32*
  store i32 %v1_114ac, i32* %v2_114b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114b8

dec_label_pc_114b8:                               ; preds = %dec_label_pc_1148c, %dec_label_pc_114a8
  %v0_114b8 = phi i32 [ %v5_11498, %dec_label_pc_1148c ], [ -1, %dec_label_pc_114a8 ]
  %v2_114bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_114bc, i32* @r4, align 4
  ret i32 %v0_114b8

; uselistorder directives
  uselistorder i32 %v5_11498, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114b8, { 1, 0 }
}

define i32 @function_114c0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_114c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114c0 = load i32, i32* @r4, align 4
  store i32 %v3_114c0, i32* %stack_var_-8, align 4
  %v5_114c4 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_114c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_114c4, -4095
  br i1 %tmp, label %dec_label_pc_114e4, label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114c0
  %v0_114d4 = call i32 @function_11224()
  %v0_114d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_114d8 = sub i32 0, %v0_114d8
  %v2_114dc = inttoptr i32 %v0_114d4 to i32*
  store i32 %v1_114d8, i32* %v2_114dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114e4

dec_label_pc_114e4:                               ; preds = %dec_label_pc_114c0, %dec_label_pc_114d4
  %v0_114e4 = phi i32 [ %v5_114c4, %dec_label_pc_114c0 ], [ -1, %dec_label_pc_114d4 ]
  %v2_114e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_114e8, i32* @r4, align 4
  ret i32 %v0_114e4

; uselistorder directives
  uselistorder i32 %v5_114c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114e4, { 1, 0 }
}

define i32 @function_114ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_114ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_114ec = load i32, i32* @r4, align 4
  store i32 %v3_114ec, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_114f8 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_114f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_114f8, -4095
  br i1 %tmp, label %dec_label_pc_11518, label %dec_label_pc_11508

dec_label_pc_11508:                               ; preds = %dec_label_pc_114ec
  %v0_11508 = call i32 @function_11224()
  %v0_1150c = load i32, i32* %r4.global-to-local, align 4
  %v1_1150c = sub i32 0, %v0_1150c
  %v2_11510 = inttoptr i32 %v0_11508 to i32*
  store i32 %v1_1150c, i32* %v2_11510, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %dec_label_pc_114ec, %dec_label_pc_11508
  %v0_11518 = phi i32 [ %v5_114f8, %dec_label_pc_114ec ], [ -1, %dec_label_pc_11508 ]
  %v2_1151c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1151c, i32* @r4, align 4
  ret i32 %v0_11518

; uselistorder directives
  uselistorder i32 %v5_114f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11518, { 1, 0 }
}

define i32 @function_11520(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11520:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11520 = load i32, i32* @r4, align 4
  store i32 %v3_11520, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11528 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_11528, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11528, -4095
  br i1 %tmp, label %dec_label_pc_11548, label %dec_label_pc_11538

dec_label_pc_11538:                               ; preds = %dec_label_pc_11520
  %v0_11538 = call i32 @function_11224()
  %v0_1153c = load i32, i32* %r4.global-to-local, align 4
  %v1_1153c = sub i32 0, %v0_1153c
  %v2_11540 = inttoptr i32 %v0_11538 to i32*
  store i32 %v1_1153c, i32* %v2_11540, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11548

dec_label_pc_11548:                               ; preds = %dec_label_pc_11520, %dec_label_pc_11538
  %v0_11548 = phi i32 [ %v5_11528, %dec_label_pc_11520 ], [ -1, %dec_label_pc_11538 ]
  %v2_1154c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1154c, i32* @r4, align 4
  ret i32 %v0_11548

; uselistorder directives
  uselistorder i32 %v5_11528, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11548, { 1, 0 }
}

define i32 @function_11550(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11550:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11550 = load i32, i32* @r4, align 4
  store i32 %v3_11550, i32* %stack_var_-8, align 4
  %v3_11554 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_11554, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11554, -4095
  br i1 %tmp, label %dec_label_pc_11574, label %dec_label_pc_11564

dec_label_pc_11564:                               ; preds = %dec_label_pc_11550
  %v0_11564 = call i32 @function_11224()
  %v0_11568 = load i32, i32* %r4.global-to-local, align 4
  %v1_11568 = sub i32 0, %v0_11568
  %v2_1156c = inttoptr i32 %v0_11564 to i32*
  store i32 %v1_11568, i32* %v2_1156c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11574

dec_label_pc_11574:                               ; preds = %dec_label_pc_11550, %dec_label_pc_11564
  %v0_11574 = phi i32 [ %v3_11554, %dec_label_pc_11550 ], [ -1, %dec_label_pc_11564 ]
  %v2_11578 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11578, i32* @r4, align 4
  ret i32 %v0_11574

; uselistorder directives
  uselistorder i32 %v3_11554, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11574, { 1, 0 }
}

define i32 @function_1157c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1157c:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_11598, label %dec_label_pc_11588

dec_label_pc_11588:                               ; preds = %dec_label_pc_1157c
  %v8_1158c = icmp sgt i32 %arg1, 64
  br i1 %v8_1158c, label %dec_label_pc_11598, label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %dec_label_pc_11588
  %v0_11594 = call i32 @function_116a0()
  br label %dec_label_pc_11598

dec_label_pc_11598:                               ; preds = %dec_label_pc_11588, %dec_label_pc_1157c, %dec_label_pc_11590
  %v0_11598 = call i32 @function_11224()
  %v2_115a0 = inttoptr i32 %v0_11598 to i32*
  store i32 22, i32* %v2_115a0, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11598, { 2, 0, 1 }
}

define i32 @function_115ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_115ac:
  store i32 128, i32* @r2, align 4
  %v0_115b8 = load i32, i32* @r0, align 4
  %v2_115b8 = inttoptr i32 %v0_115b8 to i8*
  %v3_115b8 = call i32 @function_11290(i8* %v2_115b8, i32 0)
  ret i32 0
}

define i32 @function_115c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115c4:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_115c4 = load i32, i32* @r4, align 4
  store i32 %v3_115c4, i32* %stack_var_-12, align 4
  %v6_115c4 = load i32, i32* @r5, align 4
  %v10_115c4 = ptrtoint i32* %stack_var_-12 to i32
  %v7_115c8 = icmp eq i32 %arg2, -1
  %v0_115d4.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_115c8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_115c4
  br label %dec_label_pc_115ec

bb:                                               ; preds = %dec_label_pc_115c4
  %v2_115d0 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_115d4.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_115d4.pre, 1
  br i1 %tmp19, label %dec_label_pc_115ec, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %bb
  %v7_115e0 = icmp sgt i32 %v0_115d4.pre, 64
  br i1 %v7_115e0, label %dec_label_pc_115ec, label %bb20

bb20:                                             ; preds = %dec_label_pc_115dc
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1161024 = add i32 %v10_115c4, 124
  store i32 %v5_1161024, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11600

dec_label_pc_115ec:                               ; preds = %.thread, %dec_label_pc_115dc, %bb
  %v0_115ec = call i32 @function_11224()
  store i32 %v0_115ec, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_115f8 = inttoptr i32 %v0_115ec to i32*
  store i32 22, i32* %v2_115f8, align 4
  %v0_1166c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_11600:                               ; preds = %bb20, %dec_label_pc_11600
  %v5_1161025 = phi i32 [ %v5_1161024, %bb20 ], [ %v5_11610, %dec_label_pc_11600 ]
  %v2_11604 = add i32 %v5_1161025, -136
  %v3_11604 = inttoptr i32 %v2_11604 to i32*
  store i32 0, i32* %v3_11604, align 4
  %v0_11608.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11608 = add i32 %v0_11608.pre, -1
  store i32 %v1_11608, i32* %r0.global-to-local, align 4
  %v6_11608 = icmp slt i32 %v1_11608, 0
  %v4_11610 = mul i32 %v1_11608, 4
  %v5_11610 = add i32 %v4_11610, %v10_115c4
  store i32 %v5_11610, i32* %r2.global-to-local, align 4
  br i1 %v6_11608, label %dec_label_pc_11618, label %dec_label_pc_11600

dec_label_pc_11618:                               ; preds = %dec_label_pc_11600
  %v2_11618 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_11618, i32* @r5, align 4
  %v2_1161c = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_1161c, i32* @r0, align 4
  %v0_11620 = load i32, i32* @r4, align 4
  store i32 %v0_11620, i32* @r1, align 4
  %v0_11624 = call i32 @function_116a0()
  store i32 %v0_11624, i32* %r0.global-to-local, align 4
  %v1_11628 = icmp slt i32 %v0_11624, 0
  br i1 %v1_11628, label %dec_label_pc_11668, label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %dec_label_pc_11618
  %v0_11630 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1bcd0.437 to i32), i32* %r0.global-to-local, align 4
  %v2_11638 = call i32 @function_1167c(i32 ptrtoint (i32* @global_var_1bcd0.437 to i32), i32 %v0_11630)
  store i32 %v2_115d0, i32* %r2.global-to-local, align 4
  %v0_11650 = load i32, i32* @r4, align 4
  store i32 %v0_11650, i32* %r0.global-to-local, align 4
  %v4_11658 = call i32 @function_123bc(i32 %v0_11650, i32* nonnull %stack_var_-152, i32 %v2_115d0)
  store i32 %v4_11658, i32* %r0.global-to-local, align 4
  %v1_1165c = icmp slt i32 %v4_11658, 0
  br i1 %v1_1165c, label %dec_label_pc_11668, label %bb23

bb23:                                             ; preds = %dec_label_pc_11630
  %v5_11660 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_11660, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_11668:                               ; preds = %dec_label_pc_11630, %dec_label_pc_11618
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %bb23, %dec_label_pc_115ec, %dec_label_pc_11668
  %v0_1166c = phi i32 [ %v5_11660, %bb23 ], [ %v0_1166c.pre, %dec_label_pc_115ec ], [ -1, %dec_label_pc_11668 ]
  store i32 %v0_1166c, i32* %r0.global-to-local, align 4
  %v2_11674 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11674, i32* @r4, align 4
  store i32 %v6_115c4, i32* @r5, align 4
  ret i32 %v0_1166c

; uselistorder directives
  uselistorder i32 %v0_1166c, { 1, 0 }
  uselistorder i32 %v5_11610, { 1, 0 }
  uselistorder i32 %v1_11608, { 0, 2, 1 }
  uselistorder i32 %v2_115d0, { 1, 0 }
  uselistorder i32 %v0_115d4.pre, { 1, 0, 2 }
  uselistorder i32 %v10_115c4, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_1166c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11600, { 1, 0 }
  uselistorder label %dec_label_pc_115ec, { 1, 2, 0 }
}

define i32 @function_1167c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1167c:
  %v1_1167c = add i32 %arg2, -1
  %v3_11680 = udiv i32 %v1_1167c, 32
  %v4_11684 = mul nuw nsw i32 %v3_11680, 4
  %v5_11684 = add i32 %v4_11684, %arg1
  %v6_11684 = inttoptr i32 %v5_11684 to i32*
  %v7_11684 = load i32, i32* %v6_11684, align 4
  %v1_11688 = urem i32 %v1_1167c, 32
  %v7_11690 = shl i32 1, %v1_11688
  %v8_11690 = and i32 %v7_11684, %v7_11690
  %v10_11690 = icmp ne i32 %v8_11690, 0
  %. = zext i1 %v10_11690 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_1167c, { 1, 0 }
}

define i32 @function_116a0() local_unnamed_addr {
dec_label_pc_116a0:
  %v0_116a0 = load i32, i32* @r1, align 4
  %v1_116a0 = add i32 %v0_116a0, -1
  %v3_116a4 = udiv i32 %v1_116a0, 32
  %v0_116a8 = load i32, i32* @r0, align 4
  %v4_116a8 = mul nuw nsw i32 %v3_116a4, 4
  %v5_116a8 = add i32 %v0_116a8, %v4_116a8
  %v6_116a8 = inttoptr i32 %v5_116a8 to i32*
  %v7_116a8 = load i32, i32* %v6_116a8, align 4
  %v1_116ac = urem i32 %v1_116a0, 32
  %v7_116b4 = shl i32 1, %v1_116ac
  %v8_116b4 = or i32 %v7_116a8, %v7_116b4
  store i32 %v8_116b4, i32* %v6_116a8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_116a0, { 1, 0 }
}

define i32 @function_116c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_116c4:
  %v1_116c4 = add i32 %arg2, -1
  %v3_116c8 = udiv i32 %v1_116c4, 32
  %v4_116cc = mul nuw nsw i32 %v3_116c8, 4
  %v5_116cc = add i32 %v4_116cc, %arg1
  %v6_116cc = inttoptr i32 %v5_116cc to i32*
  %v7_116cc = load i32, i32* %v6_116cc, align 4
  %v1_116d0 = urem i32 %v1_116c4, 32
  %tmp = shl i32 -1, %v1_116d0
  %v8_116d8 = add i32 %tmp, -1
  %v9_116d8 = and i32 %v7_116cc, %v8_116d8
  store i32 %v9_116d8, i32* %v6_116cc, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_116c4, { 1, 0 }
}

define i32 @function_116e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_116e8:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_116e8 = load i32, i32* @r4, align 4
  %v6_116e8 = load i32, i32* @r5, align 4
  %v9_116e8 = load i32, i32* @r6, align 4
  %v0_116ec = load i32, i32* %r0.global-to-local, align 4
  %v2_116ec = icmp eq i32 %v0_116ec, 0
  %v2_116f0 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_116ec, label %bb, label %dec_label_pc_116fc

bb:                                               ; preds = %dec_label_pc_116e8
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11704

dec_label_pc_116fc:                               ; preds = %dec_label_pc_116e8
  %tmp = icmp ugt i32 %v0_116ec, -8
  br i1 %tmp, label %dec_label_pc_11808, label %dec_label_pc_11704

dec_label_pc_11704:                               ; preds = %bb, %dec_label_pc_116fc
  %v0_11704 = phi i32 [ %v0_116ec, %dec_label_pc_116fc ], [ 1, %bb ]
  %v1_11704 = add i32 %v0_11704, 4
  store i32 %v1_11704, i32* %stack_var_-20, align 4
  store i32 %v2_116f0, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1bbec.439 to i32), i32* %r0.global-to-local, align 4
  %v1_1171c = call i32 @function_120d0()
  store i32 ptrtoint (i32** @global_var_1ba2c.443 to i32), i32* %r0.global-to-local, align 4
  %v3_11728 = call i32 @function_11a9c(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v2_116f0)
  store i32 %v3_11728, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbec.439 to i32), i32* %r0.global-to-local, align 4
  store i32 71488, i32* @lr, align 4
  %v1_1173c = call i32 @function_120d0()
  store i32 %v1_1173c, i32* %r0.global-to-local, align 4
  %v2_11740 = icmp eq i32 %v3_11728, 0
  br i1 %v2_11740, label %dec_label_pc_11748, label %dec_label_pc_117f8

dec_label_pc_11748:                               ; preds = %dec_label_pc_11704
  %v2_1174c = load i32, i32* @global_var_1bc14.446, align 4
  store i32 %v2_1174c, i32* @r4, align 4
  %v2_11750 = load i32, i32* %stack_var_-20, align 4
  %v3_11754 = icmp ult i32 %v2_11750, %v2_1174c
  br i1 %v3_11754, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_11748
  %v3_11758 = add i32 %v2_1174c, -1
  %v2_1175c = add i32 %v3_11758, %v2_11750
  %v2_11760 = sub i32 0, %v2_1174c
  %v3_11764 = and i32 %v2_1175c, %v2_11760
  store i32 %v3_11764, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11748, %bb14
  store i32 ptrtoint (i32* @global_var_1bd50.448 to i32), i32* %r0.global-to-local, align 4
  %v1_11770 = call i32 @function_120d0()
  %v0_11774 = load i32, i32* @r4, align 4
  store i32 %v0_11774, i32* %r0.global-to-local, align 4
  %v1_11778 = call i32 @function_12884(i32 %v0_11774)
  store i32 %v1_11778, i32* %r0.global-to-local, align 4
  %v7_1177c = icmp eq i32 %v1_11778, -1
  br i1 %v7_1177c, label %bb15, label %dec_label_pc_11788

bb15:                                             ; preds = %.thread3
  store i32 %v1_11778, i32* @r5, align 4
  br label %dec_label_pc_1179c

dec_label_pc_11788:                               ; preds = %.thread3
  %v1_11788 = add i32 %v1_11778, 3
  %v1_1178c = and i32 %v1_11788, -4
  store i32 %v1_1178c, i32* @r5, align 4
  %v9_11790 = icmp eq i32 %v1_1178c, %v1_11778
  br i1 %v9_11790, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_11788
  %v3_11794 = sub i32 %v1_1178c, %v1_11778
  store i32 %v3_11794, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_11788, %bb16
  %v1_11798 = xor i1 %v9_11790, true
  call void @__pseudo_cond_branch(i1 %v1_11798, i32 ptrtoint (i32* @global_var_12884.449 to i32))
  br label %dec_label_pc_1179c

dec_label_pc_1179c:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1bd50.448 to i32), i32* %r0.global-to-local, align 4
  store i32 71596, i32* @lr, align 4
  %v1_117a8 = call i32 @function_120d0()
  store i32 %v1_117a8, i32* %r0.global-to-local, align 4
  %v0_117ac = load i32, i32* @r5, align 4
  %v7_117ac = icmp eq i32 %v0_117ac, -1
  br i1 %v7_117ac, label %dec_label_pc_11808, label %dec_label_pc_117b4

dec_label_pc_117b4:                               ; preds = %dec_label_pc_1179c
  store i32 ptrtoint (i32* @global_var_1bbec.439 to i32), i32* %r0.global-to-local, align 4
  %v1_117c0 = call i32 @function_120d0()
  %v0_117c4 = load i32, i32* @r4, align 4
  %v0_117c8 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ba2c.443 to i32), i32* %r0.global-to-local, align 4
  %v4_117d0 = call i32 @function_11bf0(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v0_117c8, i32 %v0_117c4)
  store i32 ptrtoint (i32** @global_var_1ba2c.443 to i32), i32* %r0.global-to-local, align 4
  %v3_117dc = call i32 @function_11a9c(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v2_116f0)
  store i32 %v3_117dc, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bbec.439 to i32), i32* %r0.global-to-local, align 4
  store i32 71664, i32* @lr, align 4
  %v1_117ec = call i32 @function_120d0()
  store i32 %v1_117ec, i32* %r0.global-to-local, align 4
  %v2_117f0 = icmp eq i32 %v3_117dc, 0
  br i1 %v2_117f0, label %dec_label_pc_11808, label %dec_label_pc_117f8

dec_label_pc_117f8:                               ; preds = %dec_label_pc_11704, %dec_label_pc_117b4
  %v1_117fc = phi i32 [ %v3_11728, %dec_label_pc_11704 ], [ %v3_117dc, %dec_label_pc_117b4 ]
  %v2_117f8 = load i32, i32* %stack_var_-20, align 4
  %v2_117fc = inttoptr i32 %v1_117fc to i32*
  store i32 %v2_117f8, i32* %v2_117fc, align 4
  %v3_117fc = load i32, i32* %r4.global-to-local, align 4
  %v4_117fc = add i32 %v3_117fc, 4
  store i32 %v4_117fc, i32* %r4.global-to-local, align 4
  %v2_11800 = icmp eq i32 %v4_117fc, 0
  br i1 %v2_11800, label %dec_label_pc_11808, label %dec_label_pc_11818

dec_label_pc_11808:                               ; preds = %dec_label_pc_117f8, %dec_label_pc_117b4, %dec_label_pc_1179c, %dec_label_pc_116fc
  %v0_11808 = call i32 @function_11224()
  store i32 %v0_11808, i32* %r0.global-to-local, align 4
  %v2_11810 = inttoptr i32 %v0_11808 to i32*
  store i32 12, i32* %v2_11810, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11818

dec_label_pc_11818:                               ; preds = %dec_label_pc_117f8, %dec_label_pc_11808
  %v0_11818 = phi i32 [ %v4_117fc, %dec_label_pc_117f8 ], [ 0, %dec_label_pc_11808 ]
  store i32 %v0_11818, i32* %r0.global-to-local, align 4
  store i32 %v3_116e8, i32* @r4, align 4
  store i32 %v6_116e8, i32* @r5, align 4
  store i32 %v9_116e8, i32* @r6, align 4
  ret i32 %v0_11818

; uselistorder directives
  uselistorder i32 %v0_11818, { 1, 0 }
  uselistorder i32 %v3_117dc, { 1, 0, 2 }
  uselistorder i32 %v1_1178c, { 1, 0, 2 }
  uselistorder i32 %v1_11778, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_11728, { 1, 0, 2 }
  uselistorder i32 %v0_116ec, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 2, 7, 9, 10, 11, 4, 13, 12, 5, 15, 14, 3, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_11818, { 1, 0 }
  uselistorder label %dec_label_pc_117f8, { 1, 0 }
  uselistorder label %dec_label_pc_1179c, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11704, { 1, 0 }
}

define i32 @function_1183c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1183c:
  %stack_var_-12 = alloca i32, align 4
  %v3_1183c = load i32, i32* @r4, align 4
  store i32 %v3_1183c, i32* %stack_var_-12, align 4
  %v6_1183c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_11844 = mul i32 %arg2, %arg1
  store i32 %v2_11844, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11848 = icmp eq i32 %arg1, 0
  store i32 %v2_11844, i32* @r0, align 4
  br i1 %v2_11848, label %dec_label_pc_11874, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %dec_label_pc_1183c
  %v0_11854 = call i32 @function_108f4()
  %v0_11858 = load i32, i32* @r5, align 4
  %v9_11858 = icmp eq i32 %v0_11858, %v0_11854
  store i32 0, i32* @r5, align 4
  br i1 %v9_11858, label %dec_label_pc_11854.dec_label_pc_11874_crit_edge, label %dec_label_pc_11864

dec_label_pc_11854.dec_label_pc_11874_crit_edge:  ; preds = %dec_label_pc_11854
  %v0_11874.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11874

dec_label_pc_11864:                               ; preds = %dec_label_pc_11854
  %v0_11864 = call i32 @function_11224()
  %v2_1186c = inttoptr i32 %v0_11864 to i32*
  store i32 12, i32* %v2_1186c, align 4
  br label %dec_label_pc_1188c

dec_label_pc_11874:                               ; preds = %dec_label_pc_11854.dec_label_pc_11874_crit_edge, %dec_label_pc_1183c
  %v0_11874 = phi i32 [ %v0_11874.pre, %dec_label_pc_11854.dec_label_pc_11874_crit_edge ], [ %v2_11844, %dec_label_pc_1183c ]
  %v1_11878 = call i32 @function_116e8(i32 %v0_11874)
  store i32 %v1_11878, i32* @r5, align 4
  %v0_11880 = load i32, i32* @r4, align 4
  store i32 %v0_11880, i32* @r2, align 4
  store i32 71820, i32* @lr, align 4
  %v1_11888 = icmp ne i32 %v1_11878, 0
  call void @__pseudo_cond_branch(i1 %v1_11888, i32 ptrtoint (i32* @global_var_11290.450 to i32))
  br label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11864, %dec_label_pc_11874
  %v0_1188c = load i32, i32* @r5, align 4
  %v2_11890 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11890, i32* @r4, align 4
  store i32 %v6_1183c, i32* @r5, align 4
  ret i32 %v0_1188c

; uselistorder directives
  uselistorder i32 ()* @function_108f4, { 1, 3, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1188c, { 1, 0 }
}

define i32 @function_11894() local_unnamed_addr {
dec_label_pc_11894:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_11894 = load i32, i32* @r0, align 4
  %v2_11894 = icmp eq i32 %v0_11894, 0
  %v3_11898 = load i32, i32* @r4, align 4
  store i32 %v3_11898, i32* %stack_var_-24, align 4
  %v6_11898 = load i32, i32* @r5, align 4
  %v9_11898 = load i32, i32* @r6, align 4
  %v15_11898 = load i32, i32* @r8, align 4
  br i1 %v2_11894, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_11894
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_11894
  %v1_118a0 = add i32 %v0_11894, -4
  %v2_118a0 = inttoptr i32 %v1_118a0 to i32*
  %v3_118a0 = load i32, i32* %v2_118a0, align 4
  store i32 %v3_118a0, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ba2c.443 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_118a0, i32* @r4, align 4
  %v1_118b8 = call i32 @function_120d0()
  %v0_118bc = load i32, i32* @r4, align 4
  %v0_118c0 = load i32, i32* @r5, align 4
  %v4_118c8 = call i32 @function_11bf0(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v0_118bc, i32 %v0_118c0)
  %v1_118d0 = inttoptr i32 %v4_118c8 to i32*
  %v2_118d0 = load i32, i32* %v1_118d0, align 4
  store i32 %v2_118d0, i32* %r6.global-to-local, align 4
  %v2_118d4 = load i32, i32* @global_var_1bc14.446, align 4
  %v4_118d8 = mul i32 %v2_118d4, 8
  %v6_118d8 = icmp ult i32 %v2_118d0, %v4_118d8
  store i32 %v4_118c8, i32* @r4, align 4
  br i1 %v6_118d8, label %dec_label_pc_11918, label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %bb11
  %v1_118ec = call i32 @function_120d0()
  %v1_118f4 = call i32 @function_12884(i32 0)
  %v0_118f8 = load i32, i32* @r4, align 4
  %v1_118f8 = add i32 %v0_118f8, 12
  store i32 %v1_118f8, i32* @r5, align 4
  %v9_118fc = icmp eq i32 %v1_118f8, %v1_118f4
  br i1 %v9_118fc, label %dec_label_pc_11920, label %dec_label_pc_11904

dec_label_pc_11904:                               ; preds = %dec_label_pc_118e4
  %v1_11910 = call i32 @function_120d0()
  br label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %bb11, %dec_label_pc_11904, %bb14
  %v2_11918 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11918, i32* @r4, align 4
  store i32 %v6_11898, i32* @r5, align 4
  store i32 %v9_11898, i32* %r6.global-to-local, align 4
  store i32 %v15_11898, i32* %r8.global-to-local, align 4
  %v0_1191c = call i32 @function_120d0()
  %v0_11920.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11920

dec_label_pc_11920:                               ; preds = %dec_label_pc_118e4, %dec_label_pc_11918
  %v1_11928 = phi i32 [ %v0_118f8, %dec_label_pc_118e4 ], [ %v0_11920.pre, %dec_label_pc_11918 ]
  %v1_11920 = add i32 %v1_11928, 4
  %v2_11920 = inttoptr i32 %v1_11920 to i32*
  %v3_11920 = load i32, i32* %v2_11920, align 4
  %v2_11924 = icmp eq i32 %v3_11920, 0
  br i1 %v2_11924, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11920
  %v2_11928 = add i32 %v1_11928, 8
  %v3_11928 = inttoptr i32 %v2_11928 to i32*
  %v4_11928 = load i32, i32* %v3_11928, align 4
  %v3_1192c = add i32 %v3_11920, 8
  %v4_1192c = inttoptr i32 %v3_1192c to i32*
  store i32 %v4_11928, i32* %v4_1192c, align 4
  %v0_11930.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11920, %bb12
  %v0_11930 = phi i32 [ %v1_11928, %dec_label_pc_11920 ], [ %v0_11930.pre, %bb12 ]
  %v1_11930 = add i32 %v0_11930, 8
  %v2_11930 = inttoptr i32 %v1_11930 to i32*
  %v3_11930 = load i32, i32* %v2_11930, align 4
  %v1_11934 = add i32 %v0_11930, 4
  %v2_11934 = inttoptr i32 %v1_11934 to i32*
  %v3_11934 = load i32, i32* %v2_11934, align 4
  %v2_11938 = icmp eq i32 %v3_11930, 0
  br i1 %v2_11938, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_1193c = add i32 %v3_11930, 4
  %v4_1193c = inttoptr i32 %v3_1193c to i32*
  store i32 %v3_11934, i32* %v4_1193c, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_11940 = load i32, i32* %r8.global-to-local, align 4
  %v3_11940 = inttoptr i32 %v2_11940 to i32*
  store i32 %v3_11934, i32* %v3_11940, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_11950 = call i32 @function_120d0()
  %v0_11954 = load i32, i32* %r6.global-to-local, align 4
  %v1_11954 = load i32, i32* @r4, align 4
  %v0_1195c = load i32, i32* @r5, align 4
  %v2_11954 = sub i32 12, %v0_11954
  %v1_11958 = add i32 %v2_11954, %v1_11954
  %v2_1195c = sub i32 %v1_11958, %v0_1195c
  %v1_11960 = call i32 @function_12884(i32 %v2_1195c)
  br label %dec_label_pc_11918

; uselistorder directives
  uselistorder i32 %v0_11930, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_12884, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_11920, { 1, 0 }
  uselistorder label %dec_label_pc_11918, { 2, 1, 0 }
}

define i32 @function_11984(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11984:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11984 = load i32, i32* @r4, align 4
  store i32 %v3_11984, i32* %stack_var_-24, align 4
  %v6_11984 = load i32, i32* @r5, align 4
  %v9_11984 = load i32, i32* @r6, align 4
  %v12_11984 = load i32, i32* @r7, align 4
  %v15_11984 = load i32, i32* @r8, align 4
  %v18_11984 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11988 = icmp eq i32 %arg2, 0
  %v0_1198c = load i32, i32* @r0, align 4
  store i32 %v0_1198c, i32* @r7, align 4
  br i1 %v2_11988, label %dec_label_pc_11994, label %dec_label_pc_1199c

dec_label_pc_11994:                               ; preds = %dec_label_pc_11984
  %v0_11994 = call i32 @function_11894()
  %v0_119a4.pre = load i32, i32* @r4, align 4
  %v2_119a8.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_119a4

dec_label_pc_1199c:                               ; preds = %dec_label_pc_11984
  %v2_1199c = icmp eq i32 %v0_1198c, 0
  br i1 %v2_1199c, label %dec_label_pc_119a4, label %dec_label_pc_119b0

dec_label_pc_119a4:                               ; preds = %dec_label_pc_1199c, %dec_label_pc_11994
  %v2_119a8 = phi i32 [ %v3_11984, %dec_label_pc_1199c ], [ %v2_119a8.pre, %dec_label_pc_11994 ]
  %v0_119a4 = phi i32 [ %arg2, %dec_label_pc_1199c ], [ %v0_119a4.pre, %dec_label_pc_11994 ]
  store i32 %v2_119a8, i32* @r4, align 4
  store i32 %v6_11984, i32* @r5, align 4
  store i32 %v9_11984, i32* @r6, align 4
  store i32 %v12_11984, i32* @r7, align 4
  store i32 %v18_11984, i32* @lr, align 4
  %v1_119ac = call i32 @function_116e8(i32 %v0_119a4)
  %v0_119b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %dec_label_pc_1199c, %dec_label_pc_119a4
  %v0_119c8 = phi i32 [ %v0_1198c, %dec_label_pc_1199c ], [ %v1_119ac, %dec_label_pc_119a4 ]
  %v0_119b0 = phi i32 [ %arg2, %dec_label_pc_1199c ], [ %v0_119b0.pre, %dec_label_pc_119a4 ]
  %v1_119b0 = add i32 %v0_119b0, 7
  %v1_119b4 = and i32 %v1_119b0, -4
  store i32 %v1_119b4, i32* @r5, align 4
  %v2_119b8 = icmp ugt i32 %v1_119b4, 10
  %v1_119bc = add i32 %v0_119c8, -4
  %v2_119bc = inttoptr i32 %v1_119bc to i32*
  %v3_119bc = load i32, i32* %v2_119bc, align 4
  store i32 %v3_119bc, i32* @r6, align 4
  br i1 %v2_119b8, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_119b0
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_119b0, %bb
  %v0_11a44 = phi i32 [ %v1_119b4, %dec_label_pc_119b0 ], [ 12, %bb ]
  store i32 %v1_119bc, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_11a44, %v3_119bc
  br i1 %tmp, label %dec_label_pc_119d0, label %dec_label_pc_11a44

dec_label_pc_119d0:                               ; preds = %bb14
  %v2_119c4 = sub i32 %v0_11a44, %v3_119bc
  %v1_119e0 = call i32 @function_120d0()
  %v0_119e8 = load i32, i32* @r8, align 4
  %v1_119e8 = load i32, i32* @r6, align 4
  %v2_119e8 = add i32 %v1_119e8, %v0_119e8
  %v4_119f0 = call i32 @function_11b30(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v2_119e8, i32 %v2_119c4)
  store i32 %v4_119f0, i32* @r4, align 4
  store i32 72200, i32* @lr, align 4
  %v1_11a04 = call i32 @function_120d0()
  %v0_11a08 = load i32, i32* @r4, align 4
  %v2_11a08 = icmp eq i32 %v0_11a08, 0
  br i1 %v2_11a08, label %dec_label_pc_11a18, label %.thread

.thread:                                          ; preds = %dec_label_pc_119d0
  %v1_11a0c = load i32, i32* @r6, align 4
  %v3_11a0c = add i32 %v1_11a0c, %v0_11a08
  %v2_11a10 = load i32, i32* @r7, align 4
  %v3_11a10 = add i32 %v2_11a10, -4
  %v4_11a10 = inttoptr i32 %v3_11a10 to i32*
  store i32 %v3_11a0c, i32* %v4_11a10, align 4
  br label %dec_label_pc_11a84

dec_label_pc_11a18:                               ; preds = %dec_label_pc_119d0
  %v0_11a18 = load i32, i32* @r5, align 4
  %v1_11a18 = add i32 %v0_11a18, -4
  %v1_11a1c = call i32 @function_116e8(i32 %v1_11a18)
  store i32 %v1_11a1c, i32* @r0, align 4
  store i32 %v1_11a1c, i32* @r4, align 4
  %v2_11a20 = icmp eq i32 %v1_11a1c, 0
  br i1 %v2_11a20, label %dec_label_pc_11a3c, label %dec_label_pc_11a28

dec_label_pc_11a28:                               ; preds = %dec_label_pc_11a18
  %v0_11a28 = load i32, i32* @r6, align 4
  %v1_11a28 = add i32 %v0_11a28, -4
  store i32 %v1_11a28, i32* @r2, align 4
  %v0_11a2c = load i32, i32* @r7, align 4
  store i32 %v0_11a2c, i32* @r1, align 4
  %v3_11a30 = call i32 @function_11270(i32 %v1_11a1c, i32 %v0_11a2c, i32 %v1_11a28)
  %v0_11a34 = load i32, i32* @r7, align 4
  store i32 %v0_11a34, i32* @r0, align 4
  %v0_11a38 = call i32 @function_11894()
  %v0_11a3c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11a3c

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a18, %dec_label_pc_11a28
  %v0_11a3c = phi i32 [ 0, %dec_label_pc_11a18 ], [ %v0_11a3c.pre, %dec_label_pc_11a28 ]
  store i32 %v0_11a3c, i32* @r7, align 4
  br label %dec_label_pc_11a84

dec_label_pc_11a44:                               ; preds = %bb14
  %v1_11a44 = add i32 %v0_11a44, 28
  %tmp15 = icmp ugt i32 %v1_11a44, %v3_119bc
  br i1 %tmp15, label %dec_label_pc_11a84, label %dec_label_pc_11a50

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a44
  %v1_11a5c = call i32 @function_120d0()
  %v0_11a60 = load i32, i32* @r8, align 4
  %v1_11a60 = load i32, i32* @r5, align 4
  %v2_11a60 = add i32 %v1_11a60, %v0_11a60
  %v1_11a64 = load i32, i32* @r6, align 4
  %v2_11a64 = sub i32 %v1_11a64, %v1_11a60
  %v4_11a6c = call i32 @function_11bf0(i32* bitcast (i32** @global_var_1ba2c.443 to i32*), i32 %v2_11a60, i32 %v2_11a64)
  store i32 72320, i32* @lr, align 4
  %v1_11a7c = call i32 @function_120d0()
  %v0_11a80 = load i32, i32* @r5, align 4
  %v1_11a80 = load i32, i32* @r7, align 4
  %v2_11a80 = add i32 %v1_11a80, -4
  %v3_11a80 = inttoptr i32 %v2_11a80 to i32*
  store i32 %v0_11a80, i32* %v3_11a80, align 4
  br label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %.thread, %dec_label_pc_11a44, %dec_label_pc_11a3c, %dec_label_pc_11a50
  %v0_11a84 = load i32, i32* @r7, align 4
  %v2_11a88 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11a88, i32* @r4, align 4
  store i32 %v6_11984, i32* @r5, align 4
  store i32 %v9_11984, i32* @r6, align 4
  store i32 %v12_11984, i32* @r7, align 4
  store i32 %v15_11984, i32* @r8, align 4
  ret i32 %v0_11a84

; uselistorder directives
  uselistorder i32 %v1_11a60, { 1, 0 }
  uselistorder i32 %v0_11a44, { 1, 2, 0 }
  uselistorder i32 %v3_119bc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1ba2c.443, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1ba2c.443 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_116e8, { 1, 31, 0, 4, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 6, 5, 3 }
  uselistorder i32 ()* @function_11894, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 97, 98, 99, 100, 101, 111, 4, 5, 7, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 11, 12, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 48, 2, 49, 3, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 63, 64, 62, 65, 66, 67, 68, 70, 69, 71, 72, 73, 75, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 122, 118, 119, 120, 121, 123, 124, 125, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117 }
  uselistorder i32* @r7, { 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 6, 14, 7, 2, 5, 21, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 57, 58, 59, 60, 61, 62, 63, 64, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32, 33, 65, 0, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 1, 4, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 188, 189, 190, 191, 193, 194, 195, 196, 228, 229, 230, 231, 236, 232, 233, 234, 235, 237, 238, 239, 240, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227 }
  uselistorder label %dec_label_pc_11a84, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11a3c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_119b0, { 1, 0 }
}

define i32 @function_11a9c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a9c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_11a9c = inttoptr i32 %arg2 to i32*
  %v2_11a9c = load i32, i32* %v1_11a9c, align 4
  %v3_11aa0 = load i32, i32* @r4, align 4
  store i32 %v3_11aa0, i32* %stack_var_-8, align 4
  %v1_11aa4 = add i32 %v2_11a9c, 3
  %v1_11aa8 = and i32 %v1_11aa4, -4
  store i32 %v1_11aa8, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_11ab0 = icmp ugt i32 %v1_11aa8, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11ab8 = load i32, i32* %arg1, align 4
  store i32 %v2_11ab8, i32* %r0.global-to-local, align 4
  br i1 %v2_11ab0, label %dec_label_pc_11b24.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_11a9c
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b24.preheader

dec_label_pc_11b24.preheader:                     ; preds = %dec_label_pc_11a9c, %bb
  %v1_11ad8 = phi i32 [ %v1_11aa8, %dec_label_pc_11a9c ], [ 12, %bb ]
  %v2_11b249 = icmp eq i32 %v2_11ab8, 0
  br i1 %v2_11b249, label %dec_label_pc_11b2c, label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11b24.preheader, %dec_label_pc_11b20
  %v2_11adc = phi i32 [ %v3_11b20, %dec_label_pc_11b20 ], [ %v2_11ab8, %dec_label_pc_11b24.preheader ]
  %v1_11ac4 = inttoptr i32 %v2_11adc to i32*
  %v2_11ac4 = load i32, i32* %v1_11ac4, align 4
  store i32 %v2_11ac4, i32* @ip, align 4
  %v3_11ac8 = icmp ult i32 %v2_11ac4, %v1_11ad8
  br i1 %v3_11ac8, label %dec_label_pc_11b20, label %dec_label_pc_11ad0

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11ac4
  %v1_11ad0 = add i32 %v1_11ad8, 44
  %v3_11ad4 = icmp ult i32 %v2_11ac4, %v1_11ad0
  br i1 %v3_11ad4, label %dec_label_pc_11ae4, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_11ad0
  %v2_11ac8.le = sub i32 %v2_11ac4, %v1_11ad8
  store i32 %v2_11ac8.le, i32* %v1_11ac4, align 4
  %v0_11b10.pre = load i32, i32* @ip, align 4
  %v0_11b18.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ad0
  %v1_11ae4 = add i32 %v2_11adc, 4
  %v2_11ae4 = inttoptr i32 %v1_11ae4 to i32*
  %v3_11ae4 = load i32, i32* %v2_11ae4, align 4
  store i32 %v3_11ae4, i32* %r2.global-to-local, align 4
  %v2_11ae8 = icmp eq i32 %v3_11ae4, 0
  br i1 %v2_11ae8, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_11ae4
  %v2_11aec = add i32 %v2_11adc, 8
  %v3_11aec = inttoptr i32 %v2_11aec to i32*
  %v4_11aec = load i32, i32* %v3_11aec, align 4
  %v3_11af0 = add i32 %v3_11ae4, 8
  %v4_11af0 = inttoptr i32 %v3_11af0 to i32*
  store i32 %v4_11aec, i32* %v4_11af0, align 4
  %v0_11af4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11ae4, %bb27
  %v0_11af4 = phi i32 [ %v2_11adc, %dec_label_pc_11ae4 ], [ %v0_11af4.pre, %bb27 ]
  %v1_11af4 = add i32 %v0_11af4, 8
  %v2_11af4 = inttoptr i32 %v1_11af4 to i32*
  %v3_11af4 = load i32, i32* %v2_11af4, align 4
  %v1_11af8 = add i32 %v0_11af4, 4
  %v2_11af8 = inttoptr i32 %v1_11af8 to i32*
  %v3_11af8 = load i32, i32* %v2_11af8, align 4
  %v2_11afc = icmp eq i32 %v3_11af4, 0
  br i1 %v2_11afc, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_11b00 = add i32 %v3_11af4, 4
  %v4_11b00 = inttoptr i32 %v3_11b00 to i32*
  store i32 %v3_11af8, i32* %v4_11b00, align 4
  %v1_11b08 = load i32, i32* @ip, align 4
  store i32 %v1_11b08, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_11b04 = load i32, i32* %r1.global-to-local, align 4
  %v3_11b04 = inttoptr i32 %v2_11b04 to i32*
  store i32 %v3_11af8, i32* %v3_11b04, align 4
  %v1_11b0c.pre = load i32, i32* @ip, align 4
  store i32 %v1_11b0c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_11b18 = phi i32 [ %v0_11b18.pre, %.thread._crit_edge ], [ %v1_11b08, %bb28 ], [ %v1_11b0c.pre, %.thread5 ]
  %v0_11b10 = phi i32 [ %v0_11b10.pre, %.thread._crit_edge ], [ %v1_11b08, %bb28 ], [ %v1_11b0c.pre, %.thread5 ]
  %v1_11b10 = load i32, i32* %r0.global-to-local, align 4
  %v2_11b10 = sub i32 %v1_11b10, %v0_11b10
  %v1_11b14 = add i32 %v2_11b10, 12
  store i32 %v1_11b14, i32* %r0.global-to-local, align 4
  %v1_11b18 = load i32, i32* %r4.global-to-local, align 4
  %v2_11b18 = inttoptr i32 %v1_11b18 to i32*
  store i32 %v0_11b18, i32* %v2_11b18, align 4
  %v2_11b1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b1c, i32* %r4.global-to-local, align 4
  ret i32 %v1_11b14

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11ac4
  %v1_11b20 = add i32 %v2_11adc, 4
  %v2_11b20 = inttoptr i32 %v1_11b20 to i32*
  %v3_11b20 = load i32, i32* %v2_11b20, align 4
  store i32 %v3_11b20, i32* %r0.global-to-local, align 4
  %v2_11b24 = icmp eq i32 %v3_11b20, 0
  br i1 %v2_11b24, label %dec_label_pc_11b24.dec_label_pc_11b2c_crit_edge, label %dec_label_pc_11ac4

dec_label_pc_11b24.dec_label_pc_11b2c_crit_edge:  ; preds = %dec_label_pc_11b20
  br label %dec_label_pc_11b2c

dec_label_pc_11b2c:                               ; preds = %dec_label_pc_11b24.dec_label_pc_11b2c_crit_edge, %dec_label_pc_11b24.preheader
  store i32 %v3_11aa0, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11b20, { 1, 2, 0 }
  uselistorder i32 %v0_11af4, { 1, 0 }
  uselistorder i32 %v2_11ac4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11adc, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11ad8, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_11ac4, { 1, 0 }
  uselistorder label %dec_label_pc_11b24.preheader, { 1, 0 }
}

define i32 @function_11b30(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b30:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_11b34 = load i32, i32* %arg1, align 4
  store i32 %v2_11b34, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_11bac6 = icmp eq i32 %v2_11b34, 0
  br i1 %v2_11bac6, label %dec_label_pc_11bb4, label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b30, %dec_label_pc_11ba8
  %v0_11b80 = phi i32 [ %v3_11ba8, %dec_label_pc_11ba8 ], [ %v2_11b34, %dec_label_pc_11b30 ]
  %v1_11b40 = inttoptr i32 %v0_11b80 to i32*
  %v2_11b40 = load i32, i32* %v1_11b40, align 4
  store i32 %v2_11b40, i32* %r0.global-to-local, align 4
  %v2_11b44 = sub i32 %v0_11b80, %v2_11b40
  %v1_11b48 = add i32 %v2_11b44, 12
  %v3_11b4c = icmp uge i32 %v1_11b48, %arg2
  %v9_11b4c = icmp eq i32 %v1_11b48, %arg2
  %v2_11b50 = xor i1 %v9_11b4c, true
  %v3_11b50 = and i1 %v3_11b4c, %v2_11b50
  br i1 %v3_11b50, label %dec_label_pc_11ba8, label %dec_label_pc_11b54

dec_label_pc_11b54:                               ; preds = %dec_label_pc_11b40
  br i1 %v9_11b4c, label %dec_label_pc_11b58, label %dec_label_pc_11bb4

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b54
  %v1_11b58 = add i32 %arg3, 3
  %v1_11b5c = and i32 %v1_11b58, -4
  store i32 %v1_11b5c, i32* %r2.global-to-local, align 4
  %v2_11b60 = sub i32 %v2_11b40, %v1_11b5c
  %v3_11b60 = icmp ult i32 %v2_11b40, %v1_11b5c
  br i1 %v3_11b60, label %dec_label_pc_11bb4, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b58
  %v1_11b68 = add i32 %v1_11b5c, 44
  %v3_11b6c = icmp ult i32 %v2_11b40, %v1_11b68
  br i1 %v3_11b6c, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_11b68
  store i32 %v2_11b60, i32* %v1_11b40, align 4
  %v1_11b78 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_11b78, i32* %r0.global-to-local, align 4
  ret i32 %v1_11b78

.thread2:                                         ; preds = %dec_label_pc_11b68
  %v1_11b80 = add i32 %v0_11b80, 4
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %r2.global-to-local, align 4
  %v2_11b84 = icmp eq i32 %v3_11b80, 0
  br i1 %v2_11b84, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_11b88 = add i32 %v0_11b80, 8
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  %v4_11b88 = load i32, i32* %v3_11b88, align 4
  %v3_11b8c = add i32 %v3_11b80, 8
  %v4_11b8c = inttoptr i32 %v3_11b8c to i32*
  store i32 %v4_11b88, i32* %v4_11b8c, align 4
  %v0_11b90.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_11b90 = phi i32 [ %v0_11b80, %.thread2 ], [ %v0_11b90.pre, %bb17 ]
  %v1_11b90 = add i32 %v0_11b90, 8
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %r2.global-to-local, align 4
  %v1_11b94 = add i32 %v0_11b90, 4
  %v2_11b94 = inttoptr i32 %v1_11b94 to i32*
  %v3_11b94 = load i32, i32* %v2_11b94, align 4
  %v2_11b98 = icmp eq i32 %v3_11b90, 0
  br i1 %v2_11b98, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_11b9c = add i32 %v3_11b90, 4
  %v4_11b9c = inttoptr i32 %v3_11b9c to i32*
  store i32 %v3_11b94, i32* %v4_11b9c, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_11ba0 = load i32, i32* %lr.global-to-local, align 4
  %v3_11ba0 = inttoptr i32 %v2_11ba0 to i32*
  store i32 %v3_11b94, i32* %v3_11ba0, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_11ba4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_11ba4

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11b40
  %v1_11ba8 = add i32 %v0_11b80, 4
  %v2_11ba8 = inttoptr i32 %v1_11ba8 to i32*
  %v3_11ba8 = load i32, i32* %v2_11ba8, align 4
  store i32 %v3_11ba8, i32* %ip.global-to-local, align 4
  %v2_11bac = icmp eq i32 %v3_11ba8, 0
  br i1 %v2_11bac, label %dec_label_pc_11bac.dec_label_pc_11bb4.loopexit_crit_edge, label %dec_label_pc_11b40

dec_label_pc_11bac.dec_label_pc_11bb4.loopexit_crit_edge: ; preds = %dec_label_pc_11ba8
  br label %dec_label_pc_11bb4

dec_label_pc_11bb4:                               ; preds = %dec_label_pc_11b58, %dec_label_pc_11b30, %dec_label_pc_11bac.dec_label_pc_11bb4.loopexit_crit_edge, %dec_label_pc_11b54
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11ba8, { 1, 2, 0 }
  uselistorder i32 %v0_11b90, { 1, 0 }
  uselistorder i32 %v1_11b5c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_11b4c, { 1, 0 }
  uselistorder i32 %v2_11b40, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_11b80, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_11bb4, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11b40, { 1, 0 }
}

define i32 @function_11bbc() local_unnamed_addr {
dec_label_pc_11bbc:
  %v0_11bbc = load i32, i32* @r2, align 4
  %v2_11bbc = icmp eq i32 %v0_11bbc, 0
  %v0_11bc0 = load i32, i32* @r3, align 4
  %v1_11bc0 = load i32, i32* @r1, align 4
  %v2_11bc0 = add i32 %v1_11bc0, 4
  %v3_11bc0 = inttoptr i32 %v2_11bc0 to i32*
  store i32 %v0_11bc0, i32* %v3_11bc0, align 4
  %v0_11bc4 = load i32, i32* @r2, align 4
  %v1_11bc4 = load i32, i32* @r1, align 4
  %v2_11bc4 = add i32 %v1_11bc4, 8
  %v3_11bc4 = inttoptr i32 %v2_11bc4 to i32*
  store i32 %v0_11bc4, i32* %v3_11bc4, align 4
  %v1_11bcc = load i32, i32* @r1, align 4
  br i1 %v2_11bbc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11bbc
  %v2_11bc8 = load i32, i32* @r2, align 4
  %v3_11bc8 = add i32 %v2_11bc8, 4
  %v4_11bc8 = inttoptr i32 %v3_11bc8 to i32*
  store i32 %v1_11bcc, i32* %v4_11bc8, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_11bbc
  %v2_11bcc = load i32, i32* @r0, align 4
  %v3_11bcc = inttoptr i32 %v2_11bcc to i32*
  store i32 %v1_11bcc, i32* %v3_11bcc, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_11bd0 = load i32, i32* @r3, align 4
  %v2_11bd0 = icmp eq i32 %v0_11bd0, 0
  br i1 %v2_11bd0, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_11bd4 = load i32, i32* @r1, align 4
  %v3_11bd4 = add i32 %v0_11bd0, 8
  %v4_11bd4 = inttoptr i32 %v3_11bd4 to i32*
  store i32 %v1_11bd4, i32* %v4_11bd4, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_11bd8 = load i32, i32* @r0, align 4
  ret i32 %v1_11bd8

; uselistorder directives
  uselistorder i32 %v1_11bcc, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11bdc() local_unnamed_addr {
dec_label_pc_11bdc:
  %v0_11bdc = load i32, i32* @r2, align 4
  %v2_11bdc = icmp eq i32 %v0_11bdc, 0
  %v1_11be0 = load i32, i32* @r1, align 4
  br i1 %v2_11bdc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11bdc
  %v2_11be0 = load i32, i32* @r0, align 4
  %v3_11be0 = inttoptr i32 %v2_11be0 to i32*
  store i32 %v1_11be0, i32* %v3_11be0, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_11bdc
  %v3_11be4 = add i32 %v0_11bdc, 4
  %v4_11be4 = inttoptr i32 %v3_11be4 to i32*
  store i32 %v1_11be0, i32* %v4_11be4, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_11be8 = load i32, i32* @r2, align 4
  %v1_11be8 = load i32, i32* @r1, align 4
  %v2_11be8 = add i32 %v1_11be8, 8
  %v3_11be8 = inttoptr i32 %v2_11be8 to i32*
  store i32 %v0_11be8, i32* %v3_11be8, align 4
  %v1_11bec = load i32, i32* @r0, align 4
  ret i32 %v1_11bec

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11bf0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bf0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11bf0 = load i32, i32* @r4, align 4
  store i32 %v3_11bf0, i32* %stack_var_-20, align 4
  %v2_11bf4 = load i32, i32* %arg1, align 4
  store i32 %v2_11bf4, i32* %r4.global-to-local, align 4
  %v2_11bf8 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_11c142 = icmp eq i32 %v2_11bf4, 0
  br i1 %v2_11c142, label %dec_label_pc_11cc4, label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bf0, %dec_label_pc_11c0c
  %v0_11c54 = phi i32 [ %v0_11c5c, %dec_label_pc_11c0c ], [ 0, %dec_label_pc_11bf0 ]
  %v0_11c5c = phi i32 [ %v3_11c10, %dec_label_pc_11c0c ], [ %v2_11bf4, %dec_label_pc_11bf0 ]
  %v1_11c185.in = phi i32 [ %v3_11c10, %dec_label_pc_11c0c ], [ %v2_11bf4, %dec_label_pc_11bf0 ]
  %v1_11c185 = add i32 %v1_11c185.in, 12
  %v3_11c04 = icmp ult i32 %v1_11c185, %arg2
  br i1 %v3_11c04, label %dec_label_pc_11c0c, label %dec_label_pc_11c24

dec_label_pc_11c0c:                               ; preds = %dec_label_pc_11c04
  store i32 %v0_11c5c, i32* %r6.global-to-local, align 4
  %v1_11c10 = add i32 %v0_11c5c, 4
  %v2_11c10 = inttoptr i32 %v1_11c10 to i32*
  %v3_11c10 = load i32, i32* %v2_11c10, align 4
  store i32 %v3_11c10, i32* %r4.global-to-local, align 4
  %v2_11c14 = icmp eq i32 %v3_11c10, 0
  br i1 %v2_11c14, label %dec_label_pc_11c14.dec_label_pc_11cc4.loopexit_crit_edge, label %dec_label_pc_11c04

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c04
  %v1_11c24 = inttoptr i32 %v0_11c5c to i32*
  %v2_11c24 = load i32, i32* %v1_11c24, align 4
  store i32 %v2_11c24, i32* @ip, align 4
  %v2_11c28 = sub i32 %v0_11c5c, %v2_11c24
  %v1_11c2c = add i32 %v2_11c28, 12
  %v3_11c30 = icmp uge i32 %v1_11c2c, %v2_11bf8
  %v9_11c30 = icmp eq i32 %v1_11c2c, %v2_11bf8
  %v2_11c34 = xor i1 %v9_11c30, true
  %v3_11c34 = and i1 %v3_11c30, %v2_11c34
  br i1 %v3_11c34, label %dec_label_pc_11cc4, label %dec_label_pc_11c38

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c24
  %v2_11c38 = add i32 %v2_11c24, %arg3
  store i32 %v2_11c38, i32* %r7.global-to-local, align 4
  br i1 %v9_11c30, label %dec_label_pc_11c40, label %dec_label_pc_11c6c

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11c38
  %v2_11c40 = icmp eq i32 %v0_11c54, 0
  br i1 %v2_11c40, label %dec_label_pc_11cb8, label %dec_label_pc_11c48

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c40
  %v1_11c48 = add i32 %v0_11c54, 12
  %v9_11c4c = icmp eq i32 %v1_11c48, %arg2
  br i1 %v9_11c4c, label %dec_label_pc_11c54, label %dec_label_pc_11cb8

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c48
  %v1_11c54 = inttoptr i32 %v0_11c54 to i32*
  %v2_11c54 = load i32, i32* %v1_11c54, align 4
  %v1_11c58 = add i32 %v0_11c54, 8
  %v2_11c58 = inttoptr i32 %v1_11c58 to i32*
  %v3_11c58 = load i32, i32* %v2_11c58, align 4
  store i32 %v3_11c58, i32* @r2, align 4
  store i32 %v0_11c5c, i32* @r1, align 4
  %v2_11c60 = add i32 %v2_11c54, %v2_11c38
  store i32 %v2_11c60, i32* %r7.global-to-local, align 4
  %v0_11c64 = call i32 @function_11bdc()
  br label %dec_label_pc_11cb8

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c38
  %v1_11c6c = add i32 %v0_11c5c, 4
  %v2_11c6c = inttoptr i32 %v1_11c6c to i32*
  %v3_11c6c = load i32, i32* %v2_11c6c, align 4
  store i32 %v3_11c6c, i32* %r5.global-to-local, align 4
  %v2_11c70 = icmp eq i32 %v3_11c6c, 0
  br i1 %v2_11c70, label %dec_label_pc_11ca4, label %dec_label_pc_11c78

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c6c
  %v1_11c78 = inttoptr i32 %v3_11c6c to i32*
  %v2_11c78 = load i32, i32* %v1_11c78, align 4
  store i32 %v2_11c78, i32* @ip, align 4
  %v2_11c7c = sub i32 %v3_11c6c, %v2_11c78
  %v1_11c80 = add i32 %v2_11c7c, 12
  %v9_11c84 = icmp eq i32 %v2_11bf8, %v1_11c80
  br i1 %v9_11c84, label %dec_label_pc_11c8c, label %dec_label_pc_11ca4

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c78
  store i32 %v0_11c54, i32* @r2, align 4
  store i32 %v3_11c6c, i32* @r1, align 4
  %v2_11c94 = add i32 %v2_11c78, %v2_11c38
  store i32 %v2_11c94, i32* %r7.global-to-local, align 4
  %v0_11c98 = call i32 @function_11bdc()
  %v0_11c9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11c9c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cb8

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11c78, %dec_label_pc_11c6c
  %v2_11ca4 = add i32 %v0_11c5c, %arg3
  store i32 %v2_11ca4, i32* %r4.global-to-local, align 4
  store i32 %v3_11c6c, i32* @r3, align 4
  store i32 %v0_11c54, i32* @r2, align 4
  store i32 %v2_11ca4, i32* @r1, align 4
  %v0_11cb4 = call i32 @function_11bbc()
  br label %dec_label_pc_11cb8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11c48, %dec_label_pc_11c40, %dec_label_pc_11c8c, %dec_label_pc_11c54, %dec_label_pc_11ca4
  %v0_11cb8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11cb8, i32* %r5.global-to-local, align 4
  %v0_11cbc = load i32, i32* %r7.global-to-local, align 4
  %v2_11cbc = inttoptr i32 %v0_11cb8 to i32*
  store i32 %v0_11cbc, i32* %v2_11cbc, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11c14.dec_label_pc_11cc4.loopexit_crit_edge: ; preds = %dec_label_pc_11c0c
  br label %dec_label_pc_11cc4

dec_label_pc_11cc4:                               ; preds = %dec_label_pc_11bf0, %dec_label_pc_11c14.dec_label_pc_11cc4.loopexit_crit_edge, %dec_label_pc_11c24
  %v1_11cc4 = add i32 %v2_11bf8, -12
  store i32 %v1_11cc4, i32* %r5.global-to-local, align 4
  %v3_11cc8 = inttoptr i32 %v1_11cc4 to i32*
  store i32 %arg3, i32* %v3_11cc8, align 4
  %v0_11ccc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11ccc, i32* @r3, align 4
  %v0_11cd0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11cd0, i32* @r2, align 4
  %v0_11cd4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11cd4, i32* @r1, align 4
  %v0_11cd8 = call i32 @function_11bbc()
  br label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cb8, %dec_label_pc_11cc4
  %v0_11cdc = load i32, i32* %r5.global-to-local, align 4
  %v2_11ce0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11ce0, i32* @r4, align 4
  ret i32 %v0_11cdc

; uselistorder directives
  uselistorder i32 %v3_11c6c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_11c30, { 1, 0 }
  uselistorder i32 %v3_11c10, { 2, 3, 1, 0 }
  uselistorder i32 %v0_11c5c, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_11c54, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_11bbc, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_11bdc, { 1, 0 }
  uselistorder i32* @ip, { 17, 18, 1, 19, 0, 20, 21, 22, 23, 7, 8, 9, 10, 11, 12, 13, 4, 5, 6, 2, 14, 15, 3, 16 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11cdc, { 1, 0 }
  uselistorder label %dec_label_pc_11cc4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11cb8, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
}

define i32 @function_11ce4() local_unnamed_addr {
dec_label_pc_11d00.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_11ce4 = ptrtoint i32* %stack_var_-268 to i32
  %v1_11cf4 = call i32 @function_120d0()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_11d00 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_11d00

dec_label_pc_11d00:                               ; preds = %dec_label_pc_11d00.lr.ph, %dec_label_pc_11d00
  %v1_11d04 = phi i32 [ 31, %dec_label_pc_11d00.lr.ph ], [ %v1_11d10, %dec_label_pc_11d00 ]
  %v4_11d04 = mul i32 %v1_11d04, 4
  %v5_11d04 = add i32 %v4_11d04, %v2_11d00
  %v2_11d0c = add i32 %v5_11d04, -128
  %v3_11d0c = inttoptr i32 %v2_11d0c to i32*
  store i32 0, i32* %v3_11d0c, align 4
  %v0_11d10 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d10 = add i32 %v0_11d10, -1
  store i32 %v1_11d10, i32* %r1.global-to-local, align 4
  %v6_11d10 = icmp slt i32 %v1_11d10, 0
  br i1 %v6_11d10, label %dec_label_pc_11d18, label %dec_label_pc_11d00

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d00
  %v2_11d18 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_11d18, i32* @r4, align 4
  store i32 %v2_11d18, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_11d24 = call i32 @function_116a0()
  %v2_11d28 = icmp eq i32 %v0_11d24, 0
  br i1 %v2_11d28, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_11d18
  store i32 %v2_11d18, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11d18, %bb
  store i32 73020, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11d28, i32 ptrtoint (i32* @global_var_10ef8.465 to i32))
  %v2_11d40 = load i32, i32* @global_var_1bc04.467, align 4
  %v2_11d44 = icmp eq i32 %v2_11d40, 0
  br i1 %v2_11d44, label %dec_label_pc_11d4c, label %dec_label_pc_11d7c

dec_label_pc_11d4c:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1bc04.467, align 4
  br label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11dcc, %dec_label_pc_11d4c
  %v1_11d60 = call i32 @function_120d0()
  %v1_11d68 = call i32 @function_1326c(i32 6)
  store i32 73084, i32* @lr, align 4
  %v1_11d78 = call i32 @function_120d0()
  %v2_11d80.pre = load i32, i32* @global_var_1bc04.467, align 4
  br label %dec_label_pc_11d7c

dec_label_pc_11d7c:                               ; preds = %.thread1, %dec_label_pc_11d54
  %v0_11df0 = phi i32 [ %v2_11d40, %.thread1 ], [ %v2_11d80.pre, %dec_label_pc_11d54 ]
  store i32 ptrtoint (i32* @global_var_1bc04.467 to i32), i32* %ip.global-to-local, align 4
  %v7_11d84 = icmp eq i32 %v0_11df0, 1
  br i1 %v7_11d84, label %dec_label_pc_11db4.lr.ph, label %dec_label_pc_11de8

dec_label_pc_11db4.lr.ph:                         ; preds = %dec_label_pc_11d7c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1bc04.467, align 4
  %v2_11da0 = bitcast i32* %stack_var_-268 to i8*
  %v3_11da0 = call i32 @function_11290(i8* %v2_11da0, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11db4.lr.ph, %dec_label_pc_11db4
  %v1_11db8 = phi i32 [ 31, %dec_label_pc_11db4.lr.ph ], [ %v1_11dc4, %dec_label_pc_11db4 ]
  %v4_11db8 = mul i32 %v1_11db8, 4
  %v5_11db8 = add i32 %v4_11db8, %v2_11d00
  %v2_11dc0 = add i32 %v5_11db8, -264
  %v3_11dc0 = inttoptr i32 %v2_11dc0 to i32*
  store i32 -1, i32* %v3_11dc0, align 4
  %v0_11dc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11dc4 = add i32 %v0_11dc4, -1
  store i32 %v1_11dc4, i32* %r1.global-to-local, align 4
  %v6_11dc4 = icmp slt i32 %v1_11dc4, 0
  br i1 %v6_11dc4, label %dec_label_pc_11dcc, label %dec_label_pc_11db4

dec_label_pc_11dcc:                               ; preds = %dec_label_pc_11db4
  store i32 %v2_11ce4, i32* %r1.global-to-local, align 4
  %v4_11de0 = call i32 @function_123bc(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_11d54

dec_label_pc_11de8:                               ; preds = %dec_label_pc_11d7c
  %v7_11de8 = icmp eq i32 %v0_11df0, 2
  br i1 %v7_11de8, label %dec_label_pc_11df0, label %dec_label_pc_11dfc

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11de8
  store i32 3, i32* @global_var_1bc04.467, align 4
  %v0_11df8 = call i32 @function_11ce4()
  %v2_11dfc.pre = load i32, i32* @global_var_1bc04.467, align 4
  br label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %dec_label_pc_11de8, %dec_label_pc_11df0
  %v1_11e04 = phi i32 [ %v0_11df0, %dec_label_pc_11de8 ], [ %v2_11dfc.pre, %dec_label_pc_11df0 ]
  %v7_11e00 = icmp eq i32 %v1_11e04, 3
  br i1 %v7_11e00, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_11dfc
  %v2_11e0c = load i32, i32* %ip.global-to-local, align 4
  %v3_11e0c = inttoptr i32 %v2_11e0c to i32*
  store i32 4, i32* %v3_11e0c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11dfc, %bb27
  call void @__pseudo_cond_branch(i1 %v7_11e00, i32 ptrtoint (i32* @global_var_124d4.469 to i32))
  br label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11e14, %.thread3
  %v0_11e14 = call i32 @function_11ce4()
  br label %dec_label_pc_11e14

; uselistorder directives
  uselistorder i32 %v1_11dc4, { 2, 1, 0 }
  uselistorder i32 %v1_11d10, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1bc04.467, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11dfc, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 0 }
  uselistorder label %dec_label_pc_11d7c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11d00, { 1, 0 }
}

define i32 @function_11e2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e2c:
  %stack_var_-16 = alloca i32, align 4
  %v2_11e2c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_11e2c, i32* @r0, align 4
  %v8_11e48 = call i32 @function_120d8(i32 %v2_11e2c, i32 ptrtoint (i32* @global_var_120d0.421 to i32), i32 ptrtoint (i32* @global_var_1bb4c.472 to i32), i32 73944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_11e58 = call i32 @function_120d0()
  %v2_11e60 = load i32, i32* @global_var_1bc08.476, align 4
  %v2_11e64 = icmp eq i32 %v2_11e60, 0
  br i1 %v2_11e64, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11e2c
  call void @__pseudo_branch(i32 %v2_11e60)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11e2c, %bb
  store i32 %v2_11e2c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_11e88.478 to i32), i32* @lr, align 4
  %v8_11e84 = call i32 @function_120d8(i32 %v2_11e2c, i32 1, i32 ptrtoint (i32* @global_var_1bb4c.472 to i32), i32 73944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_11e84, i32* @r0, align 4
  %v1_11e88 = call i32 @function_12064(i32 %v8_11e84)
  store i1 true, i1* @cpsr_z, align 1
  %v0_11e9c = load i32, i32* @r4, align 4
  %v1_11ea0 = call i32 @function_124d4(i32 %v0_11e9c)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_11e2c, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_120d0, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_120d8, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 73944, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1bb4c.472 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_120d0.421 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11ec0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ec0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11ec0 = load i32, i32* @r4, align 4
  store i32 %v3_11ec0, i32* %stack_var_-20, align 4
  %v6_11ec0 = load i32, i32* @r5, align 4
  %v9_11ec0 = load i32, i32* @r6, align 4
  %v16_11ec0 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_11ec4 = icmp eq i32 %arg1, 0
  %v2_11ec8 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_11ec4, label %dec_label_pc_1204c, label %dec_label_pc_11ee0.preheader

dec_label_pc_11ee0.preheader:                     ; preds = %dec_label_pc_11ec0
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_11ee817 = add i32 %v16_11ec0, 124
  br label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ee0.preheader, %dec_label_pc_11ed8
  %v5_11ee818 = phi i32 [ %v5_11ee817, %dec_label_pc_11ee0.preheader ], [ %v5_11ee8, %dec_label_pc_11ed8 ]
  %v2_11edc = add i32 %v5_11ee818, -136
  %v3_11edc = inttoptr i32 %v2_11edc to i32*
  store i32 0, i32* %v3_11edc, align 4
  %v0_11ee0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11ee0 = add i32 %v0_11ee0.pre, -1
  store i32 %v1_11ee0, i32* %r1.global-to-local, align 4
  %v6_11ee0 = icmp slt i32 %v1_11ee0, 0
  %v4_11ee8 = mul i32 %v1_11ee0, 4
  %v5_11ee8 = add i32 %v4_11ee8, %v16_11ec0
  br i1 %v6_11ee0, label %dec_label_pc_11ef0, label %dec_label_pc_11ed8

dec_label_pc_11ef0:                               ; preds = %dec_label_pc_11ed8
  %v2_11ef0 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_11ef0, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11f00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_11f00, i32* %stack_var_-28, align 4
  %v0_11f08 = call i32 @function_116a0()
  store i32 %v0_11f08, i32* %r0.global-to-local, align 4
  %v1_11f0c = load i32, i32* @r5, align 4
  %v5_11f10 = icmp slt i32 %v0_11f08, %v1_11f0c
  br i1 %v5_11f10, label %dec_label_pc_12054, label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %dec_label_pc_11ef0
  %v2_11f14 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_11f14, i32* @r4, align 4
  store i32 %v1_11f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_11ef0, i32* %r1.global-to-local, align 4
  %v3_11f24 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_11f24 = call i32 @function_10ef8(i32 %v1_11f0c, %_TYPEDEF_sigset_t* %v3_11f24, i32 %v2_11f14)
  store i32 %v4_11f24, i32* %r0.global-to-local, align 4
  %v1_11f28 = load i32, i32* @r5, align 4
  %v9_11f28 = icmp eq i32 %v4_11f24, %v1_11f28
  br i1 %v9_11f28, label %dec_label_pc_11f30, label %dec_label_pc_12054

dec_label_pc_11f30:                               ; preds = %dec_label_pc_11f14
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_11f14, i32* %r0.global-to-local, align 4
  %v2_11f38 = call i32 @function_1167c(i32 %v2_11f14, i32 17)
  store i32 %v2_11f38, i32* %r0.global-to-local, align 4
  %v1_11f3c = load i32, i32* @r5, align 4
  %v9_11f3c = icmp eq i32 %v2_11f38, %v1_11f3c
  br i1 %v9_11f3c, label %dec_label_pc_11f54.preheader, label %dec_label_pc_11f30.dec_label_pc_1201c_crit_edge

dec_label_pc_11f30.dec_label_pc_1201c_crit_edge:  ; preds = %dec_label_pc_11f30
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_1201c

dec_label_pc_11f54.preheader:                     ; preds = %dec_label_pc_11f30
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f4c

dec_label_pc_11f4c:                               ; preds = %dec_label_pc_11f54.preheader, %dec_label_pc_11f4c
  %v5_11f5c16 = phi i32 [ %v5_11ee817, %dec_label_pc_11f54.preheader ], [ %v5_11f5c, %dec_label_pc_11f4c ]
  %v2_11f50 = add i32 %v5_11f5c16, -136
  %v3_11f50 = inttoptr i32 %v2_11f50 to i32*
  store i32 0, i32* %v3_11f50, align 4
  %v0_11f54.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11f54 = add i32 %v0_11f54.pre, -1
  store i32 %v1_11f54, i32* %r1.global-to-local, align 4
  %v6_11f54 = icmp slt i32 %v1_11f54, 0
  %v4_11f5c = mul i32 %v1_11f54, 4
  %v5_11f5c = add i32 %v4_11f5c, %v16_11ec0
  br i1 %v6_11f54, label %dec_label_pc_11f64, label %dec_label_pc_11f4c

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f4c
  store i32 %v2_11ef0, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11f6c = call i32 @function_116a0()
  store i32 %v0_11f6c, i32* %r0.global-to-local, align 4
  %v1_11f70 = icmp slt i32 %v0_11f6c, 0
  br i1 %v1_11f70, label %dec_label_pc_12054, label %dec_label_pc_11f78

dec_label_pc_11f78:                               ; preds = %dec_label_pc_11f64
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_11f84 = call i32 @function_123bc(i32 17, i32* null, i32 %v2_11ec8)
  store i32 %v4_11f84, i32* %r0.global-to-local, align 4
  %v1_11f88 = icmp slt i32 %v4_11f84, 0
  br i1 %v1_11f88, label %dec_label_pc_11f90, label %dec_label_pc_11fb8

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f78
  %v0_11f90 = call i32 @function_11224()
  store i32 %v2_11f14, i32* %r1.global-to-local, align 4
  store i32 %v0_11f90, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11fa4 = inttoptr i32 %v0_11f90 to i32*
  %v2_11fa4 = load i32, i32* %v1_11fa4, align 4
  store i32 %v2_11fa4, i32* @r4, align 4
  %v3_11fa8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11fa8 = call i32 @function_10ef8(i32 2, %_TYPEDEF_sigset_t* %v3_11fa8, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_11fb0 = load i32, i32* @r4, align 4
  %v1_11fb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_11fb0 = inttoptr i32 %v1_11fb0 to i32*
  store i32 %v0_11fb0, i32* %v2_11fb0, align 4
  %v17_1205c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12058

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_11f78
  %v2_11fb8 = load i32, i32* %stack_var_-424, align 4
  %v7_11fbc = icmp eq i32 %v2_11fb8, 1
  %v2_11fc4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11fc4, i32* @r4, align 4
  br i1 %v7_11fbc, label %dec_label_pc_11fcc, label %dec_label_pc_12000

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11fb8
  store i32 %v2_11fc4, i32* %r1.global-to-local, align 4
  store i32 %v2_11fc4, i32* %r0.global-to-local, align 4
  %v2_11fd4 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11fd4 = call i32 @function_12858(%timespec* %v2_11fd4, i32 %v2_11fc4)
  store i32 %v3_11fd4, i32* %r0.global-to-local, align 4
  store i32 %v3_11fd4, i32* %r6.global-to-local, align 4
  %v0_11fdc = call i32 @function_11224()
  store i32 %v2_11f14, i32* %r1.global-to-local, align 4
  store i32 %v0_11fdc, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11ff0 = inttoptr i32 %v0_11fdc to i32*
  %v2_11ff0 = load i32, i32* %v1_11ff0, align 4
  store i32 %v2_11ff0, i32* @r4, align 4
  %v3_11ff4 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11ff4 = call i32 @function_10ef8(i32 2, %_TYPEDEF_sigset_t* %v3_11ff4, i32 0)
  store i32 %v4_11ff4, i32* %r0.global-to-local, align 4
  %v0_11ff8 = load i32, i32* @r4, align 4
  %v1_11ff8 = load i32, i32* %r5.global-to-local, align 4
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i32*
  store i32 %v0_11ff8, i32* %v2_11ff8, align 4
  %v0_12028.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12028

dec_label_pc_12000:                               ; preds = %dec_label_pc_11fb8
  store i32 %v2_11f14, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_1200c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1200c = call i32 @function_10ef8(i32 2, %_TYPEDEF_sigset_t* %v3_1200c, i32 0)
  store i32 %v4_1200c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1201c

dec_label_pc_1201c:                               ; preds = %dec_label_pc_11f30.dec_label_pc_1201c_crit_edge, %dec_label_pc_12000
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_11f30.dec_label_pc_1201c_crit_edge ], [ %v2_11fc4, %dec_label_pc_12000 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_12020 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12020 = call i32 @function_12858(%timespec* %v2_12020, i32 %storemerge.pre-phi)
  store i32 %v3_12020, i32* %r0.global-to-local, align 4
  store i32 %v3_12020, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12028

dec_label_pc_12028:                               ; preds = %dec_label_pc_11fcc, %dec_label_pc_1201c
  %v0_12028 = phi i32 [ %v0_12028.pr, %dec_label_pc_11fcc ], [ %v3_12020, %dec_label_pc_1201c ]
  %v2_12028 = icmp eq i32 %v0_12028, 0
  br i1 %v2_12028, label %dec_label_pc_1204c, label %dec_label_pc_12030

dec_label_pc_12030:                               ; preds = %dec_label_pc_12028
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12038 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_12038, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12058

dec_label_pc_1204c:                               ; preds = %dec_label_pc_11ec0, %dec_label_pc_12028
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12058

dec_label_pc_12054:                               ; preds = %dec_label_pc_11f14, %dec_label_pc_11f64, %dec_label_pc_11ef0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12058

dec_label_pc_12058:                               ; preds = %dec_label_pc_12030, %dec_label_pc_1204c, %dec_label_pc_11f90, %dec_label_pc_12054
  %v17_1205c = phi i32 [ %v3_12038, %dec_label_pc_12030 ], [ 0, %dec_label_pc_1204c ], [ %v17_1205c.pre, %dec_label_pc_11f90 ], [ -1, %dec_label_pc_12054 ]
  %v2_1205c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1205c, i32* @r4, align 4
  store i32 %v6_11ec0, i32* @r5, align 4
  store i32 %v9_11ec0, i32* @r6, align 4
  ret i32 %v17_1205c

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_11fc4, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_11f54, { 0, 2, 1 }
  uselistorder i32 %v2_11f14, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_11f0c, { 1, 0, 2 }
  uselistorder i32 %v1_11ee0, { 0, 2, 1 }
  uselistorder i32 %v16_11ec0, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 1, 9, 8, 11, 10, 2, 12, 14, 15, 13, 17, 16, 18, 3, 19, 22, 20, 21, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_123bc, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_10ef8, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_116a0, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12058, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12054, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1204c, { 1, 0 }
  uselistorder label %dec_label_pc_12028, { 1, 0 }
  uselistorder label %dec_label_pc_1201c, { 1, 0 }
  uselistorder label %dec_label_pc_11f4c, { 1, 0 }
  uselistorder label %dec_label_pc_11ed8, { 1, 0 }
}

define i32 @function_12064(i32 %arg1) local_unnamed_addr {
dec_label_pc_12090:
  %stack_var_-8 = alloca i32, align 4
  %v3_12064 = load i32, i32* @r4, align 4
  store i32 %v3_12064, i32* %stack_var_-8, align 4
  %v2_12094 = load i32, i32* @global_var_1bc18.485, align 4
  %v2_12098 = icmp eq i32 %v2_12094, 0
  br i1 %v2_12098, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12090
  store i32 73892, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_12094)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12090, %bb
  %v2_120a8 = load i32, i32* @global_var_1bc1c.487, align 4
  %v2_120ac = icmp eq i32 %v2_120a8, 0
  br i1 %v2_120ac, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_120b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_120b0, i32* @r4, align 4
  %v9_120b0 = load i32, i32* @r0, align 4
  ret i32 %v9_120b0

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_120bc.488 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_120a8)
  %v2_120bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120bc, i32* @r4, align 4
  %v8_120bc = load i32, i32* @r0, align 4
  ret i32 %v8_120bc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_120d0() local_unnamed_addr {
dec_label_pc_120d0:
  ret i32 0
}

define i32 @function_120d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_120d8:
  %v1_120d8 = load i32, i32* @r0, align 4
  ret i32 %v1_120d8
}

define i32 @function_120dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120dc:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_120dc = load i32, i32* @r4, align 4
  store i32 %v3_120dc, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_120ec = call i32 @function_10bb8(i32 %arg1, i32 1)
  %v7_120f0 = icmp eq i32 %v2_120ec, -1
  br i1 %v7_120f0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_120dc
  %v3_120f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_120f4, i32* @r4, align 4
  ret i32 %v2_120ec

bb4:                                              ; preds = %dec_label_pc_120dc
  %v0_120f8 = load i32, i32* @r4, align 4
  %v4_12100 = call i32 @function_10da8(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_136e8.490, i32 0, i32 0), i32 %v0_120f8)
  %v1_12104 = load i32, i32* %r5.global-to-local, align 4
  %v9_12104 = icmp eq i32 %v4_12100, %v1_12104
  br i1 %v9_12104, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_12108 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12108, i32* @r4, align 4
  ret i32 %v4_12100

bb6:                                              ; preds = %bb4
  %v0_1210c = call i32 @function_11ce4()
  %v0_12110 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12110, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_1210c

; uselistorder directives
  uselistorder i32 %v2_120ec, { 1, 0 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 12, 9, 6, 7, 1, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_11ce4, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_10da8, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_10bb8, { 0, 3, 9, 8, 11, 10, 13, 12, 7, 6, 5, 4, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_12114(i32 %arg1) local_unnamed_addr {
dec_label_pc_12114:
  %v2_12118 = load i32, i32* @global_var_1bc20.492, align 4
  %v2_1211c = icmp eq i32 %v2_12118, 0
  br i1 %v2_1211c, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_12114
  %v6_12128 = load i32, i32* @r0, align 4
  ret i32 %v6_12128

bb2:                                              ; preds = %dec_label_pc_12114
  store i32 1, i32* @global_var_1bc20.492, align 4
  store i32 4096, i32* @global_var_1bc14.446, align 4
  ret i32 undef
}

define i32 @function_12170(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12170:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_12174 = mul i32 %arg2, 4
  %v5_12174 = add i32 %tmp, %v4_12174
  %v2_12178 = load i32, i32* %arg3, align 4
  %v2_1217c = ptrtoint i32* %stack_var_-120 to i32
  %v1_12180 = add i32 %v5_12174, 4
  %v9_12184 = icmp eq i32 %v1_12180, %v2_12178
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1bc0c.497, align 4
  store i32 %v1_12180, i32* @global_var_1bc10.499, align 4
  store i32 %arg6, i32* @global_var_1bc1c.487, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_12184, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_12170
  store i32 %v5_12174, i32* @global_var_1bc10.499, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_12170, %bb
  %v2_121c4 = bitcast i32* %stack_var_-120 to i8*
  %v3_121c4 = call i32 @function_11290(i8* %v2_121c4, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1bc10.499, align 4
  br label %dec_label_pc_121d4

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121d4, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_121d4, %dec_label_pc_121d4 ]
  %v1_121d4 = inttoptr i32 %storemerge to i32*
  %v2_121d4 = load i32, i32* %v1_121d4, align 4
  %v4_121d4 = add i32 %storemerge, 4
  %v2_121d8 = icmp eq i32 %v2_121d4, 0
  br i1 %v2_121d8, label %dec_label_pc_121e4, label %dec_label_pc_121d4

dec_label_pc_121e4:                               ; preds = %dec_label_pc_121d4
  store i32 %v4_121d4, i32* @r4, align 4
  %v1_1220422 = inttoptr i32 %v4_121d4 to i32*
  %v2_1220423 = load i32, i32* %v1_1220422, align 4
  %v2_1220825 = icmp eq i32 %v2_1220423, 0
  br i1 %v2_1220825, label %dec_label_pc_12210, label %dec_label_pc_121ec

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121e4, %dec_label_pc_12204
  %v5_121f0 = phi i32 [ %v2_12204, %dec_label_pc_12204 ], [ %v2_1220423, %dec_label_pc_121e4 ]
  %v2_121ec = icmp ugt i32 %v5_121f0, 13
  %v7_121ec = icmp eq i32 %v5_121f0, 14
  %v2_121f0 = xor i1 %v2_121ec, true
  %v3_121f0 = or i1 %v7_121ec, %v2_121f0
  br i1 %v3_121f0, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_121ec
  %v6_121f0 = and i32 %v5_121f0, 536870912
  %v7_121f0 = icmp ne i32 %v6_121f0, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_121ec, %bb42
  %v1_121fc = phi i1 [ %v2_121ec, %dec_label_pc_121ec ], [ %v7_121f0, %bb42 ]
  %v2_121f4 = xor i1 %v1_121fc, true
  %v3_121f4 = or i1 %v7_121ec, %v2_121f4
  br i1 %v3_121f4, label %bb44, label %dec_label_pc_12204

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_12204

dec_label_pc_12204:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_121f4, i32 ptrtoint (i32* @global_var_11270.501 to i32))
  %v0_12200 = load i32, i32* @r4, align 4
  %v1_12200 = add i32 %v0_12200, 8
  store i32 %v1_12200, i32* @r4, align 4
  %v1_12204 = inttoptr i32 %v1_12200 to i32*
  %v2_12204 = load i32, i32* %v1_12204, align 4
  %v2_12208 = icmp eq i32 %v2_12204, 0
  br i1 %v2_12208, label %dec_label_pc_12210, label %dec_label_pc_121ec

dec_label_pc_12210:                               ; preds = %dec_label_pc_12204, %dec_label_pc_121e4
  %v1_12214 = call i32 @function_13284(i32 %v2_1217c)
  store i32 %v1_12214, i32* @r0, align 4
  %v1_12218 = call i32 @function_12114(i32 %v1_12214)
  store i32 %v1_12218, i32* @r0, align 4
  %v2_12224 = icmp eq i32 %tmp37, 0
  br i1 %v2_12224, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12210
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12210, %bb45
  %v0_12234 = phi i32 [ %tmp37, %dec_label_pc_12210 ], [ 4096, %bb45 ]
  %v3_1222c = icmp eq i32 %tmp36, -1
  %v8_1222c = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1bc14.446 to i32), i32* @r2, align 4
  store i32 %v0_12234, i32* @global_var_1bc14.446, align 4
  br i1 %v3_1222c, label %dec_label_pc_1223c, label %dec_label_pc_12264

dec_label_pc_1223c:                               ; preds = %bb46
  %v0_1223c = call i32 @function_127c8()
  store i32 %v0_1223c, i32* @r0, align 4
  store i32 %v0_1223c, i32* @r4, align 4
  %v0_12244 = call i32 @function_12770()
  %v0_12248 = load i32, i32* @r4, align 4
  %v9_12248 = icmp eq i32 %v0_12248, %v0_12244
  br i1 %v9_12248, label %dec_label_pc_12250, label %dec_label_pc_1228c

dec_label_pc_12250:                               ; preds = %dec_label_pc_1223c
  %v1_12250 = call i32 @function_1279c(i32 %v0_12244)
  store i32 %v1_12250, i32* @r0, align 4
  store i32 %v1_12250, i32* @r4, align 4
  %v0_12258 = call i32 @function_12744()
  %v0_1225c = load i32, i32* @r4, align 4
  %v9_1225c = icmp eq i32 %v0_1225c, %v0_12258
  br i1 %v9_1225c, label %dec_label_pc_12264, label %dec_label_pc_1228c

dec_label_pc_12264:                               ; preds = %dec_label_pc_12250, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_1222c, label %dec_label_pc_122f8, label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_12264
  %v9_12274 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_12274, label %dec_label_pc_1227c, label %dec_label_pc_1228c

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12270
  br label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %dec_label_pc_1227c, %dec_label_pc_12270, %dec_label_pc_12250, %dec_label_pc_1223c
  %v2_12294 = call i32 @function_120dc(i32 0, i32 32768)
  %v2_122a0 = call i32 @function_120dc(i32 1, i32 32770)
  %v2_122ac = call i32 @function_120dc(i32 2, i32 32770)
  br label %dec_label_pc_122f8

dec_label_pc_122f8:                               ; preds = %dec_label_pc_1228c, %dec_label_pc_12264
  %v0_122bc = load i32, i32* %r6.global-to-local, align 4
  %v1_122bc = inttoptr i32 %v0_122bc to i32*
  %v2_122bc = load i32, i32* %v1_122bc, align 4
  store i32 %v2_122bc, i32* @global_var_1bb64, align 4
  store i32 %arg5, i32* @global_var_1bc18.485, align 4
  %v2_122f8 = icmp eq i32 %arg4, 0
  br i1 %v2_122f8, label %dec_label_pc_12334, label %bb47

bb47:                                             ; preds = %dec_label_pc_122f8
  br label %dec_label_pc_12334

dec_label_pc_12334:                               ; preds = %dec_label_pc_122f8, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12344 = call i32 @function_11224()
  %v2_1234c = inttoptr i32 %v1_12344 to i32*
  store i32 0, i32* %v2_1234c, align 4
  %v0_12378 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_12384 = call i32 @function_11e2c(i32 %v0_12378)
  ret i32 %v1_12384

; uselistorder directives
  uselistorder i32 %v2_12204, { 1, 0 }
  uselistorder i32 %v1_12200, { 1, 0 }
  uselistorder i1 %v2_121ec, { 1, 0 }
  uselistorder i32 %v4_121d4, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_11e2c, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_120dc, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1bc14.446, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 6, 4, 7, 2, 5, 8, 9 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 72, 2, 3, 4, 5, 6, 47, 7, 8, 9, 10, 11, 15, 16, 17, 73, 74, 75, 76, 65, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 18, 19, 93, 94, 95, 48, 64, 13, 14, 63, 12, 96, 31, 30, 53, 59, 54, 60, 51, 58, 52, 62, 97, 20, 98, 99, 21, 22, 23, 100, 66, 67, 24, 25, 101, 68, 69, 26, 27, 102, 70, 71, 28, 29, 50, 103, 104, 61, 105, 32, 55, 33, 45, 56, 34, 46, 35, 36, 37, 57, 38, 49, 39, 40, 41, 42, 43, 44 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12334, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_12204, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_121ec, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_123bc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_123bc:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_123bc = load i32, i32* @r4, align 4
  %v6_123bc = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_123c0 = icmp eq i32* %arg2, null
  %v2_123c4 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_123c0, label %dec_label_pc_12430, label %dec_label_pc_123d4

dec_label_pc_123d4:                               ; preds = %dec_label_pc_123bc
  %v2_123d8 = load i32, i32* %arg2, align 4
  %v4_123d8 = add i32 %tmp, 4
  store i32 %v4_123d8, i32* @r1, align 4
  %v2_123dc = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_123dc, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_123d8, i32* %stack_var_-156, align 4
  %v3_123e8 = call i32 @function_11270(i32 %v2_123dc, i32 %v4_123d8, i32 128)
  store i32 %v3_123e8, i32* %r0.global-to-local, align 4
  %v0_123ec = load i32, i32* @r4, align 4
  %v1_123ec = add i32 %v0_123ec, 132
  %v2_123ec = inttoptr i32 %v1_123ec to i32*
  %v3_123ec = load i32, i32* %v2_123ec, align 4
  %v1_123f0 = and i32 %v3_123ec, 67108864
  %v2_123f0 = icmp eq i32 %v1_123f0, 0
  br i1 %v2_123f0, label %dec_label_pc_12404, label %bb

bb:                                               ; preds = %dec_label_pc_123d4
  br label %dec_label_pc_12420

dec_label_pc_12404:                               ; preds = %dec_label_pc_123d4
  %v1_1240c = and i32 %v3_123ec, 4
  %v2_1240c = icmp eq i32 %v1_1240c, 0
  br i1 %v2_1240c, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12404
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12404, %bb20
  br label %dec_label_pc_12420

dec_label_pc_12420:                               ; preds = %bb, %bb21
  %v2_12420 = icmp eq i32 %v0_123ec, 0
  %v3_12424 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12424 = select i1 %v2_12420, i32 0, i32 %v3_12424
  %v0_12430.pre = load i32, i32* @r5, align 4
  %v0_12440.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12430

dec_label_pc_12430:                               ; preds = %dec_label_pc_12420, %dec_label_pc_123bc
  %v0_12440 = phi i32 [ %arg1, %dec_label_pc_123bc ], [ %v0_12440.pre, %dec_label_pc_12420 ]
  %v0_12430 = phi i32 [ %arg3, %dec_label_pc_123bc ], [ %v0_12430.pre, %dec_label_pc_12420 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_123bc ], [ %.v3_12424, %dec_label_pc_12420 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12430 = icmp eq i32 %v0_12430, 0
  %.v2_123c4 = select i1 %v2_12430, i32 0, i32 %v2_123c4
  store i32 %.v2_123c4, i32* @r2, align 4
  store i32 %v0_12440, i32* %r0.global-to-local, align 4
  %v1_12444 = call i32 @function_124a8(i32 %v0_12440)
  store i32 %v1_12444, i32* %r0.global-to-local, align 4
  %v0_12448 = load i32, i32* @r5, align 4
  %v2_12448 = icmp eq i32 %v0_12448, 0
  br i1 %v2_12448, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12430
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12430, %bb25
  %v0_12458.pr = phi i32 [ 0, %dec_label_pc_12430 ], [ 1, %bb25 ]
  %v1_12450 = icmp slt i32 %v1_12444, 0
  br i1 %v1_12450, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_1248c

thread-pre-split:                                 ; preds = %bb26
  %v2_12458 = icmp eq i32 %v0_12458.pr, 0
  store i32 %v1_12444, i32* @r4, align 4
  br i1 %v2_12458, label %dec_label_pc_1248c, label %dec_label_pc_12464

dec_label_pc_12464:                               ; preds = %thread-pre-split
  %v2_12464 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_12448, i32* %r0.global-to-local, align 4
  %v2_1246c = inttoptr i32 %v0_12448 to i32*
  store i32 %v2_12464, i32* %v2_1246c, align 4
  %v3_1246c = load i32, i32* %r0.global-to-local, align 4
  %v4_1246c = add i32 %v3_1246c, 4
  store i32 %v4_1246c, i32* @r0, align 4
  %v2_12470 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12470, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_12478 = call i32 @function_11270(i32 %v4_1246c, i32 %v2_12470, i32 128)
  store i32 %v3_12478, i32* %r0.global-to-local, align 4
  %v1_12480 = load i32, i32* @r5, align 4
  %v2_12480 = add i32 %v1_12480, 136
  %v3_12480 = inttoptr i32 %v2_12480 to i32*
  %v1_12488 = load i32, i32* @r5, align 4
  %v2_12488 = add i32 %v1_12488, 132
  %v3_12488 = inttoptr i32 %v2_12488 to i32*
  %v0_1248c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1248c

dec_label_pc_1248c:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_12464
  %v0_1248c = phi i32 [ %v1_12444, %thread-pre-split ], [ %v0_1248c.pre, %dec_label_pc_12464 ], [ %v1_12444, %thread-pre-split.thread ]
  store i32 %v0_1248c, i32* %r0.global-to-local, align 4
  store i32 %v3_123bc, i32* @r4, align 4
  store i32 %v6_123bc, i32* @r5, align 4
  ret i32 %v0_1248c

; uselistorder directives
  uselistorder i32 %v0_1248c, { 1, 0 }
  uselistorder i32 %v0_12448, { 1, 0, 2 }
  uselistorder i32 %v0_12440, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_1248c, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12420, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_124a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_124a8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124a8 = load i32, i32* @r4, align 4
  store i32 %v3_124a8, i32* %stack_var_-8, align 4
  %v1_124ac = load i32, i32* @r1, align 4
  %v2_124ac = inttoptr i32 %v1_124ac to %sigaction*
  %v3_124ac = load i32, i32* @r2, align 4
  %v4_124ac = inttoptr i32 %v3_124ac to %sigaction*
  %v5_124ac = call i32 @sigaction(i32 %arg1, %sigaction* %v2_124ac, %sigaction* %v4_124ac)
  store i32 %v5_124ac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_124ac, -4095
  br i1 %tmp, label %dec_label_pc_124cc, label %dec_label_pc_124bc

dec_label_pc_124bc:                               ; preds = %dec_label_pc_124a8
  %v0_124bc = call i32 @function_11224()
  %v0_124c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_124c0 = sub i32 0, %v0_124c0
  %v2_124c4 = inttoptr i32 %v0_124bc to i32*
  store i32 %v1_124c0, i32* %v2_124c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_124cc

dec_label_pc_124cc:                               ; preds = %dec_label_pc_124a8, %dec_label_pc_124bc
  %v0_124cc = phi i32 [ %v5_124ac, %dec_label_pc_124a8 ], [ -1, %dec_label_pc_124bc ]
  %v2_124d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_124d0, i32* %r4.global-to-local, align 4
  ret i32 %v0_124cc

; uselistorder directives
  uselistorder i32 %v5_124ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124cc, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_124d4(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_124d4:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_124fc() local_unnamed_addr {
dec_label_pc_124fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_1250c = load i32, i32* @r0, align 4
  %v4_1250c = call i32 @fstat(i32 %v0_1250c, %stat* %tmp4)
  store i32 %v4_1250c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1250c, -4095
  br i1 %tmp, label %dec_label_pc_12530, label %dec_label_pc_1251c

dec_label_pc_1251c:                               ; preds = %dec_label_pc_124fc
  %v0_1251c = call i32 @function_11224()
  %v0_12520 = load i32, i32* %r4.global-to-local, align 4
  %v1_12520 = sub i32 0, %v0_12520
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12528 = inttoptr i32 %v0_1251c to i32*
  store i32 %v1_12520, i32* %v2_12528, align 4
  br label %dec_label_pc_12540

dec_label_pc_12530:                               ; preds = %dec_label_pc_124fc
  %v2_12530 = icmp eq i32 %v4_1250c, 0
  store i32 75072, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12530, i32 ptrtoint (i32* @global_var_12c18.518 to i32))
  br label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %dec_label_pc_1251c, %dec_label_pc_12530
  %v0_12540 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_12540

; uselistorder directives
  uselistorder i32 %v4_1250c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 14, 12, 13, 10, 11, 3, 0, 1, 2, 4, 5, 7, 8, 9 }
  uselistorder label %dec_label_pc_12540, { 1, 0 }
}

define i32 @function_1254c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1254c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_1254c = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12554 = call i32 @function_125e0()
  store i32 %v0_12554, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_12554, 1
  br i1 %tmp8, label %dec_label_pc_125d8, label %dec_label_pc_125c4.preheader

dec_label_pc_125c4.preheader:                     ; preds = %dec_label_pc_1254c
  %v5_1255c = load i32, i32* @r4, align 4
  %v7_1255c = add i32 %v5_1255c, %v0_12554
  store i32 %v7_1255c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_12568:                               ; preds = %dec_label_pc_125c4
  %v1_12568 = add i32 %v2_12578, 16
  %v2_12568 = inttoptr i32 %v1_12568 to i32*
  %v3_12568 = load i32, i32* %v2_12568, align 4
  store i32 %v3_12568, i32* @lr, align 4
  %v2_1256c = inttoptr i32 %v1_125c8 to i32*
  %v3_1256c = load i32, i32* %v2_1256c, align 4
  store i32 %v3_1256c, i32* %r2.global-to-local, align 4
  %v1_12570 = add i32 %v2_12578, 18
  %v2_12570 = inttoptr i32 %v1_12570 to i8*
  %v3_12570 = load i8, i8* %v2_12570, align 1
  %v4_12570 = zext i8 %v3_12570 to i32
  store i32 %v4_12570, i32* %ip.global-to-local, align 4
  %v3_12574 = sdiv i32 %v3_12568, 256
  store i32 %v3_12574, i32* %r3.global-to-local, align 4
  %v1_12578 = trunc i32 %v3_12568 to i8
  %v4_12578 = inttoptr i32 %v1_125c8 to i8*
  store i8 %v1_12578, i8* %v4_12578, align 1
  %v0_1257c = load i32, i32* %r2.global-to-local, align 4
  %v1_1257c = load i32, i32* @r4, align 4
  %v2_1257c = add i32 %v1_1257c, 4
  %v3_1257c = inttoptr i32 %v2_1257c to i32*
  store i32 %v0_1257c, i32* %v3_1257c, align 4
  %v0_12580 = load i32, i32* %ip.global-to-local, align 4
  %v1_12580 = trunc i32 %v0_12580 to i8
  %v2_12580 = load i32, i32* @r4, align 4
  %v3_12580 = add i32 %v2_12580, 10
  %v4_12580 = inttoptr i32 %v3_12580 to i8*
  store i8 %v1_12580, i8* %v4_12580, align 1
  %v0_12584 = load i32, i32* %r3.global-to-local, align 4
  %v1_12584 = trunc i32 %v0_12584 to i8
  %v2_12584 = load i32, i32* @r4, align 4
  %v3_12584 = add i32 %v2_12584, 9
  %v4_12584 = inttoptr i32 %v3_12584 to i8*
  store i8 %v1_12584, i8* %v4_12584, align 1
  %v0_12588 = load i32, i32* @r4, align 4
  %v1_12588 = add i32 %v0_12588, 8
  %v2_12588 = inttoptr i32 %v1_12588 to i8*
  %v3_12588 = load i8, i8* %v2_12588, align 1
  %v4_12588 = zext i8 %v3_12588 to i32
  store i32 %v4_12588, i32* %r2.global-to-local, align 4
  %v0_1258c = load i32, i32* @r5, align 4
  %v1_1258c = add i32 %v0_1258c, 1
  %v2_1258c = inttoptr i32 %v1_1258c to i8*
  %v3_1258c = load i8, i8* %v2_1258c, align 1
  %v4_1258c = zext i8 %v3_1258c to i32
  store i32 %v4_1258c, i32* %r3.global-to-local, align 4
  %v4_12590 = mul nuw nsw i32 %v4_1258c, 256
  %v5_12590 = or i32 %v4_12590, %v4_12588
  %v1_12594 = add nsw i32 %v5_12590, -19
  store i32 %v1_12594, i32* @r2, align 4
  %v3_12598 = call i32 @function_11280(i32 %v1_125d0, i32 %v1_125cc, i32 %v1_12594)
  %v0_1259c = load i32, i32* @r4, align 4
  %v1_1259c = add i32 %v0_1259c, 8
  %v2_1259c = inttoptr i32 %v1_1259c to i8*
  %v3_1259c = load i8, i8* %v2_1259c, align 1
  %v4_1259c = zext i8 %v3_1259c to i32
  store i32 %v4_1259c, i32* %r3.global-to-local, align 4
  %v0_125a0 = load i32, i32* @r5, align 4
  %v1_125a0 = add i32 %v0_125a0, 1
  %v2_125a0 = inttoptr i32 %v1_125a0 to i8*
  %v3_125a0 = load i8, i8* %v2_125a0, align 1
  %v4_125a0 = zext i8 %v3_125a0 to i32
  store i32 %v0_1259c, i32* @r0, align 4
  %v4_125a8 = mul nuw nsw i32 %v4_125a0, 256
  %v5_125a8 = or i32 %v4_125a8, %v4_1259c
  store i32 %v5_125a8, i32* @r2, align 4
  store i32 %v0_1259c, i32* @r1, align 4
  %v3_125b0 = call i32 @function_11280(i32 %v0_1259c, i32 %v0_1259c, i32 %v5_125a8)
  %v0_125b4 = load i32, i32* @r4, align 4
  %v1_125b4 = add i32 %v0_125b4, 8
  %v2_125b4 = inttoptr i32 %v1_125b4 to i8*
  %v3_125b4 = load i8, i8* %v2_125b4, align 1
  %v4_125b4 = zext i8 %v3_125b4 to i32
  store i32 %v4_125b4, i32* %r3.global-to-local, align 4
  %v0_125b8 = load i32, i32* @r5, align 4
  %v1_125b8 = add i32 %v0_125b8, 1
  %v2_125b8 = inttoptr i32 %v1_125b8 to i8*
  %v3_125b8 = load i8, i8* %v2_125b8, align 1
  %v4_125b8 = zext i8 %v3_125b8 to i32
  store i32 %v4_125b8, i32* @r2, align 4
  %v4_125bc = mul nuw nsw i32 %v4_125b8, 256
  %v5_125bc = or i32 %v4_125bc, %v4_125b4
  store i32 %v5_125bc, i32* %r3.global-to-local, align 4
  %v2_125c0 = add i32 %v5_125bc, %v0_125b4
  store i32 %v2_125c0, i32* @r4, align 4
  %v1_125c4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %dec_label_pc_125c4.preheader, %dec_label_pc_12568
  %v1_125c4 = phi i32 [ %v7_1255c, %dec_label_pc_125c4.preheader ], [ %v1_125c4.pre, %dec_label_pc_12568 ]
  %v2_12578 = phi i32 [ %v5_1255c, %dec_label_pc_125c4.preheader ], [ %v2_125c0, %dec_label_pc_12568 ]
  %v3_125c4 = icmp ult i32 %v2_12578, %v1_125c4
  %v1_125c8 = add i32 %v2_12578, 8
  store i32 %v1_125c8, i32* @r5, align 4
  %v1_125cc = add i32 %v2_12578, 19
  store i32 %v1_125cc, i32* @r1, align 4
  %v1_125d0 = add i32 %v2_12578, 11
  store i32 %v1_125d0, i32* @r0, align 4
  br i1 %v3_125c4, label %dec_label_pc_12568, label %dec_label_pc_125d8.loopexit

dec_label_pc_125d8.loopexit:                      ; preds = %dec_label_pc_125c4
  %v0_125d8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_1254c, %dec_label_pc_125d8.loopexit
  %v0_125d8 = phi i32 [ %v0_125d8.pre, %dec_label_pc_125d8.loopexit ], [ %v0_12554, %dec_label_pc_1254c ]
  store i32 %v6_1254c, i32* @r5, align 4
  ret i32 %v0_125d8

; uselistorder directives
  uselistorder i32 %v1_125d0, { 1, 0 }
  uselistorder i32 %v1_125cc, { 1, 0 }
  uselistorder i32 %v1_125c8, { 2, 1, 0 }
  uselistorder i32 %v2_12578, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_1259c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_12568, { 1, 0, 2 }
  uselistorder i32 %v5_1255c, { 1, 0 }
  uselistorder i32 %v0_12554, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_11280, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_125d8, { 1, 0 }
  uselistorder label %dec_label_pc_125c4, { 1, 0 }
}

define i32 @function_125e0() local_unnamed_addr {
dec_label_pc_125e0:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_125e4 = load i32, i32* @r4, align 4
  %v9_125e4 = load i32, i32* @r6, align 4
  %v0_125e8 = load i32, i32* @r2, align 4
  %v1_125e8 = add i32 %v0_125e8, 6
  %v2_125f0 = ptrtoint i32* %stack_var_-60 to i32
  %v1_125f4 = and i32 %v1_125e8, -4
  store i32 %v1_125f4, i32* %r3.global-to-local, align 4
  %v2_125f8 = sub i32 %v2_125f0, %v1_125f4
  %v0_125fc = load i32, i32* @r1, align 4
  store i32 %v0_125fc, i32* %r8.global-to-local, align 4
  store i32 %v0_125e8, i32* %stack_var_-60, align 4
  store i32 %v2_125f8, i32* %sl.global-to-local, align 4
  %v0_12608 = load i32, i32* @r0, align 4
  %v1_1260c = inttoptr i32 %v2_125f8 to %linux_dirent64*
  store i32 %v2_125f8, i32* %r1.global-to-local, align 4
  %v5_12610 = call i32 @getdents64(i32 %v0_12608, %linux_dirent64* %v1_1260c, i32 %v0_125e8)
  store i32 %v5_12610, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_12610, -4095
  br i1 %tmp, label %dec_label_pc_12634, label %dec_label_pc_12620

dec_label_pc_12620:                               ; preds = %dec_label_pc_125e0
  %v0_12620 = call i32 @function_11224()
  %v0_12624 = load i32, i32* @r6, align 4
  %v1_12624 = sub i32 0, %v0_12624
  store i32 %v1_12624, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_1262c = inttoptr i32 %v0_12620 to i32*
  store i32 %v1_12624, i32* %v2_1262c, align 4
  %v0_1263c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1263c

dec_label_pc_12634:                               ; preds = %dec_label_pc_125e0
  br i1 false, label %dec_label_pc_1263c, label %dec_label_pc_12644

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12634, %dec_label_pc_12620
  %v0_1263c = phi i32 [ -1, %dec_label_pc_12634 ], [ %v0_1263c.pre, %dec_label_pc_12620 ]
  store i32 %v0_1263c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12738

dec_label_pc_12644:                               ; preds = %dec_label_pc_12634
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_1264c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1264c, i32* @r5, align 4
  %v0_12650 = load i32, i32* @sp, align 4
  store i32 %v0_12650, i32* @r4, align 4
  br label %dec_label_pc_12714

dec_label_pc_12660:                               ; preds = %dec_label_pc_12714
  %v2_1272c = add i32 %v3_12718, %v0_1272c
  %v1_12660 = add i32 %v0_12664, 17
  %v2_12660 = inttoptr i32 %v1_12660 to i8*
  %v3_12660 = load i8, i8* %v2_12660, align 1
  %v4_12660 = zext i8 %v3_12660 to i32
  %v2_12664 = inttoptr i32 %v1_12720 to i8*
  %v3_12664 = load i8, i8* %v2_12664, align 1
  %v4_12664 = zext i8 %v3_12664 to i32
  %v4_12668 = mul nuw nsw i32 %v4_12660, 256
  %v5_12668 = or i32 %v4_12664, %v4_12668
  %v1_1266c = add nuw nsw i32 %v5_12668, 3
  %v1_12670 = and i32 %v1_1266c, 131068
  store i32 %v1_12670, i32* %r3.global-to-local, align 4
  %v2_12674 = add i32 %v1_12670, %v2_126b4
  store i32 %v2_12674, i32* %sb.global-to-local, align 4
  %v9_12678 = icmp eq i32 %v2_12674, %v2_1272c
  %v1_1267c = and i32 %v1_1266c, 128
  %v2_12680 = icmp eq i32 %v1_1267c, 0
  %v3_12680 = or i1 %v9_12678, %v2_12680
  br i1 %v3_12680, label %dec_label_pc_126b4, label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12660
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_12694 = call i32 @function_127f4(i32 %v0_12608, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_12698 = load i32, i32* @r5, align 4
  %v1_12698 = load i32, i32* %r8.global-to-local, align 4
  %v9_12698 = icmp eq i32 %v0_12698, %v1_12698
  br i1 %v9_12698, label %dec_label_pc_126a0, label %dec_label_pc_12734

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12684
  %v0_126a0 = call i32 @function_11224()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_126ac = inttoptr i32 %v0_126a0 to i32*
  store i32 22, i32* %v2_126ac, align 4
  %v0_12738.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12738

dec_label_pc_126b4:                               ; preds = %dec_label_pc_12660
  %v3_1267c11 = udiv i32 %v1_1266c, 256
  %v1_126b4 = trunc i32 %v3_1267c11 to i8
  %v3_126b4 = add i32 %v2_126b4, 17
  %v4_126b4 = inttoptr i32 %v3_126b4 to i8*
  store i8 %v1_126b4, i8* %v4_126b4, align 1
  %v0_126b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_126b8 = trunc i32 %v0_126b8 to i8
  %v2_126b8 = load i32, i32* @r5, align 4
  %v3_126b8 = add i32 %v2_126b8, 16
  %v4_126b8 = inttoptr i32 %v3_126b8 to i8*
  store i8 %v1_126b8, i8* %v4_126b8, align 1
  %v0_126bc = load i32, i32* @r4, align 4
  %v1_126bc = add i32 %v0_126bc, 8
  %v1_126c0 = inttoptr i32 %v1_126bc to i32*
  %v2_126c0 = load i32, i32* %v1_126c0, align 4
  %v3_126c0 = add i32 %v0_126bc, 12
  %v4_126c0 = inttoptr i32 %v3_126c0 to i32*
  %v5_126c0 = load i32, i32* %v4_126c0, align 4
  store i32 %v5_126c0, i32* %r3.global-to-local, align 4
  %v1_126cc = inttoptr i32 %v0_126bc to i32*
  %v2_126cc = load i32, i32* %v1_126cc, align 4
  %v3_126cc = add i32 %v0_126bc, 4
  %v4_126cc = inttoptr i32 %v3_126cc to i32*
  %v5_126cc = load i32, i32* %v4_126cc, align 4
  store i32 %v5_126cc, i32* %r3.global-to-local, align 4
  %v0_126d0 = load i32, i32* @r5, align 4
  %v1_126d0 = inttoptr i32 %v0_126d0 to i32*
  store i32 %v2_126cc, i32* %v1_126d0, align 4
  %v3_126d0 = add i32 %v0_126d0, 4
  %v4_126d0 = inttoptr i32 %v3_126d0 to i32*
  %v5_126d0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_126d0, i32* %v4_126d0, align 4
  %v0_126d4 = load i32, i32* @r4, align 4
  %v1_126d4 = add i32 %v0_126d4, 8
  %v1_126d8 = inttoptr i32 %v1_126d4 to i32*
  %v2_126d8 = load i32, i32* %v1_126d8, align 4
  %v3_126d8 = add i32 %v0_126d4, 12
  %v4_126d8 = inttoptr i32 %v3_126d8 to i32*
  %v5_126d8 = load i32, i32* %v4_126d8, align 4
  store i32 %v5_126d8, i32* %r3.global-to-local, align 4
  %v1_126dc = load i32, i32* @r5, align 4
  %v2_126dc = add i32 %v1_126dc, 8
  %v3_126dc = inttoptr i32 %v2_126dc to i32*
  store i32 %v2_126d8, i32* %v3_126dc, align 4
  %v0_126e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_126e0 = load i32, i32* @r5, align 4
  %v2_126e0 = add i32 %v1_126e0, 12
  %v3_126e0 = inttoptr i32 %v2_126e0 to i32*
  store i32 %v0_126e0, i32* %v3_126e0, align 4
  %v0_126e4 = load i32, i32* @r4, align 4
  %v1_126e4 = add i32 %v0_126e4, 18
  %v2_126e4 = inttoptr i32 %v1_126e4 to i8*
  %v3_126e4 = load i8, i8* %v2_126e4, align 1
  %v4_126e4 = zext i8 %v3_126e4 to i32
  store i32 %v4_126e4, i32* %r3.global-to-local, align 4
  %v2_126e8 = load i32, i32* @r5, align 4
  %v3_126e8 = add i32 %v2_126e8, 18
  %v4_126e8 = inttoptr i32 %v3_126e8 to i8*
  store i8 %v3_126e4, i8* %v4_126e8, align 1
  %v0_126ec = load i32, i32* @r4, align 4
  %v1_126ec = add i32 %v0_126ec, 16
  %v2_126ec = inttoptr i32 %v1_126ec to i8*
  %v3_126ec = load i8, i8* %v2_126ec, align 1
  %v4_126ec = zext i8 %v3_126ec to i32
  %v0_126f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_126f0 = add i32 %v0_126f0, 1
  %v2_126f0 = inttoptr i32 %v1_126f0 to i8*
  %v3_126f0 = load i8, i8* %v2_126f0, align 1
  %v4_126f0 = zext i8 %v3_126f0 to i32
  store i32 %v4_126f0, i32* %r3.global-to-local, align 4
  %v4_126f4 = mul nuw nsw i32 %v4_126f0, 256
  %v5_126f4 = or i32 %v4_126f4, %v4_126ec
  %v1_126f8 = add nsw i32 %v5_126f4, -19
  store i32 %v1_126f8, i32* @r2, align 4
  %v3_126fc = call i32 @function_11270(i32 %v1_12724, i32 %v1_12728, i32 %v1_126f8)
  %v0_12700 = load i32, i32* @r4, align 4
  %v1_12700 = add i32 %v0_12700, 16
  %v2_12700 = inttoptr i32 %v1_12700 to i8*
  %v3_12700 = load i8, i8* %v2_12700, align 1
  %v4_12700 = zext i8 %v3_12700 to i32
  store i32 %v4_12700, i32* %r3.global-to-local, align 4
  %v0_12704 = load i32, i32* %r7.global-to-local, align 4
  %v1_12704 = add i32 %v0_12704, 1
  %v2_12704 = inttoptr i32 %v1_12704 to i8*
  %v3_12704 = load i8, i8* %v2_12704, align 1
  %v4_12704 = zext i8 %v3_12704 to i32
  %v4_12708 = mul nuw nsw i32 %v4_12704, 256
  %v5_12708 = or i32 %v4_12708, %v4_12700
  store i32 %v5_12708, i32* %r3.global-to-local, align 4
  %v2_1270c = add i32 %v5_12708, %v0_12700
  store i32 %v2_1270c, i32* @r4, align 4
  %v0_12710 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12710, i32* @r5, align 4
  %v1_12714.pre = load i32, i32* @r6, align 4
  %v0_1272c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12714

dec_label_pc_12714:                               ; preds = %dec_label_pc_12644, %dec_label_pc_126b4
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_12644 ], [ %v2_126c0, %dec_label_pc_126b4 ]
  %v0_1272c = phi i32 [ %v0_1264c, %dec_label_pc_12644 ], [ %v0_1272c.pre, %dec_label_pc_126b4 ]
  %v2_126b4 = phi i32 [ %v0_1264c, %dec_label_pc_12644 ], [ %v0_12710, %dec_label_pc_126b4 ]
  %v0_12664 = phi i32 [ %v0_12650, %dec_label_pc_12644 ], [ %v2_1270c, %dec_label_pc_126b4 ]
  %v1_12714 = phi i32 [ %v5_12610, %dec_label_pc_12644 ], [ %v1_12714.pre, %dec_label_pc_126b4 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_12644 ], [ %v5_126c0, %dec_label_pc_126b4 ]
  %v0_12714 = load i32, i32* %sl.global-to-local, align 4
  %v2_12714 = add i32 %v0_12714, %v1_12714
  store i32 %v2_12714, i32* %r3.global-to-local, align 4
  %v3_12718 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_12718, i32* @r2, align 4
  %v3_1271c = icmp ult i32 %v0_12664, %v2_12714
  %v1_12720 = add i32 %v0_12664, 16
  store i32 %v1_12720, i32* %r7.global-to-local, align 4
  %v1_12724 = add i32 %v2_126b4, 19
  store i32 %v1_12724, i32* @r0, align 4
  %v1_12728 = add i32 %v0_12664, 19
  store i32 %v1_12728, i32* @r1, align 4
  br i1 %v3_1271c, label %dec_label_pc_12660, label %dec_label_pc_12734

dec_label_pc_12734:                               ; preds = %dec_label_pc_12714, %dec_label_pc_12684
  %v1_12734 = phi i32 [ %v0_12698, %dec_label_pc_12684 ], [ %v2_126b4, %dec_label_pc_12714 ]
  %v0_12734 = phi i32 [ %v1_12698, %dec_label_pc_12684 ], [ %v0_1272c, %dec_label_pc_12714 ]
  %v2_12734 = sub i32 %v1_12734, %v0_12734
  store i32 %v2_12734, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12738

dec_label_pc_12738:                               ; preds = %dec_label_pc_126a0, %dec_label_pc_1263c, %dec_label_pc_12734
  %v0_12738 = phi i32 [ %v0_12738.pre, %dec_label_pc_126a0 ], [ %v0_1263c, %dec_label_pc_1263c ], [ %v2_12734, %dec_label_pc_12734 ]
  store i32 %v3_125e4, i32* @r4, align 4
  store i32 %v9_125e4, i32* %r6.global-to-local, align 4
  ret i32 %v0_12738

; uselistorder directives
  uselistorder i32 %v1_12728, { 1, 0 }
  uselistorder i32 %v1_12724, { 1, 0 }
  uselistorder i32 %v1_12720, { 1, 0 }
  uselistorder i32 %v3_12718, { 1, 0 }
  uselistorder i32 %v0_12664, { 2, 1, 3, 0 }
  uselistorder i32 %v2_126b4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_126bc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1264c, { 1, 0, 2 }
  uselistorder i32 %v5_12610, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_11270, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 4, 5, 25, 6, 26, 18, 9, 10, 11, 19, 0, 20, 12, 13, 14, 15, 16, 17, 1, 21, 2, 22, 3, 7, 8, 23, 24 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_12738, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12714, { 1, 0 }
}

define i32 @function_12744() local_unnamed_addr {
dec_label_pc_12744:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12744 = load i32, i32* @r4, align 4
  store i32 %v3_12744, i32* %stack_var_-8, align 4
  %v0_1274c = load i32, i32* @r0, align 4
  store i32 %v0_1274c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1274c, -4095
  br i1 %tmp, label %dec_label_pc_12768, label %dec_label_pc_12758

dec_label_pc_12758:                               ; preds = %dec_label_pc_12744
  %v0_12758 = call i32 @function_11224()
  %v0_1275c = load i32, i32* %r4.global-to-local, align 4
  %v1_1275c = sub i32 0, %v0_1275c
  %v2_12760 = inttoptr i32 %v0_12758 to i32*
  store i32 %v1_1275c, i32* %v2_12760, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1276c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12768

dec_label_pc_12768:                               ; preds = %dec_label_pc_12744, %dec_label_pc_12758
  %v2_1276c = phi i32 [ %v3_12744, %dec_label_pc_12744 ], [ %v2_1276c.pre, %dec_label_pc_12758 ]
  %v0_12768 = phi i32 [ %v0_1274c, %dec_label_pc_12744 ], [ -1, %dec_label_pc_12758 ]
  store i32 %v2_1276c, i32* @r4, align 4
  ret i32 %v0_12768

; uselistorder directives
  uselistorder i32 %v0_1274c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12768, { 1, 0 }
}

define i32 @function_12770() local_unnamed_addr {
dec_label_pc_12770:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12770 = load i32, i32* @r4, align 4
  store i32 %v3_12770, i32* %stack_var_-8, align 4
  %v0_12778 = load i32, i32* @r0, align 4
  store i32 %v0_12778, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12778, -4095
  br i1 %tmp, label %dec_label_pc_12794, label %dec_label_pc_12784

dec_label_pc_12784:                               ; preds = %dec_label_pc_12770
  %v0_12784 = call i32 @function_11224()
  %v0_12788 = load i32, i32* %r4.global-to-local, align 4
  %v1_12788 = sub i32 0, %v0_12788
  %v2_1278c = inttoptr i32 %v0_12784 to i32*
  store i32 %v1_12788, i32* %v2_1278c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12798.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12794

dec_label_pc_12794:                               ; preds = %dec_label_pc_12770, %dec_label_pc_12784
  %v2_12798 = phi i32 [ %v3_12770, %dec_label_pc_12770 ], [ %v2_12798.pre, %dec_label_pc_12784 ]
  %v0_12794 = phi i32 [ %v0_12778, %dec_label_pc_12770 ], [ -1, %dec_label_pc_12784 ]
  store i32 %v2_12798, i32* @r4, align 4
  ret i32 %v0_12794

; uselistorder directives
  uselistorder i32 %v0_12778, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12794, { 1, 0 }
}

define i32 @function_1279c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1279c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1279c = load i32, i32* @r4, align 4
  store i32 %v3_1279c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_127c0, label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_1279c
  %v0_127b0 = call i32 @function_11224()
  %v0_127b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_127b4 = sub i32 0, %v0_127b4
  %v2_127b8 = inttoptr i32 %v0_127b0 to i32*
  store i32 %v1_127b4, i32* %v2_127b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_127c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_127c0

dec_label_pc_127c0:                               ; preds = %dec_label_pc_1279c, %dec_label_pc_127b0
  %v2_127c4 = phi i32 [ %v3_1279c, %dec_label_pc_1279c ], [ %v2_127c4.pre, %dec_label_pc_127b0 ]
  %v0_127c0 = phi i32 [ %arg1, %dec_label_pc_1279c ], [ -1, %dec_label_pc_127b0 ]
  store i32 %v2_127c4, i32* %r4.global-to-local, align 4
  ret i32 %v0_127c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_127c0, { 1, 0 }
}

define i32 @function_127c8() local_unnamed_addr {
dec_label_pc_127c8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_127c8 = load i32, i32* @r4, align 4
  store i32 %v3_127c8, i32* %stack_var_-8, align 4
  %v0_127d0 = load i32, i32* @r0, align 4
  store i32 %v0_127d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_127d0, -4095
  br i1 %tmp, label %dec_label_pc_127ec, label %dec_label_pc_127dc

dec_label_pc_127dc:                               ; preds = %dec_label_pc_127c8
  %v0_127dc = call i32 @function_11224()
  %v0_127e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_127e0 = sub i32 0, %v0_127e0
  %v2_127e4 = inttoptr i32 %v0_127dc to i32*
  store i32 %v1_127e0, i32* %v2_127e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_127f0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_127ec

dec_label_pc_127ec:                               ; preds = %dec_label_pc_127c8, %dec_label_pc_127dc
  %v2_127f0 = phi i32 [ %v3_127c8, %dec_label_pc_127c8 ], [ %v2_127f0.pre, %dec_label_pc_127dc ]
  %v0_127ec = phi i32 [ %v0_127d0, %dec_label_pc_127c8 ], [ -1, %dec_label_pc_127dc ]
  store i32 %v2_127f0, i32* %r4.global-to-local, align 4
  ret i32 %v0_127ec

; uselistorder directives
  uselistorder i32 %v0_127d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_127ec, { 1, 0 }
}

define i32 @function_127f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_127f4:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12838, label %dec_label_pc_12824

dec_label_pc_12824:                               ; preds = %dec_label_pc_127f4
  %v0_12824 = call i32 @function_11224()
  %v0_12828 = load i32, i32* %r4.global-to-local, align 4
  %v1_12828 = sub i32 0, %v0_12828
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12830 = inttoptr i32 %v0_12824 to i32*
  store i32 %v1_12828, i32* %v2_12830, align 4
  %v0_12840.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12840

dec_label_pc_12838:                               ; preds = %dec_label_pc_127f4
  %v2_12838 = icmp eq i32 %arg1, 0
  br i1 %v2_12838, label %dec_label_pc_1284c, label %dec_label_pc_12840

dec_label_pc_12840:                               ; preds = %dec_label_pc_12838, %dec_label_pc_12824
  %v0_12840 = phi i32 [ %arg1, %dec_label_pc_12838 ], [ %v0_12840.pre, %dec_label_pc_12824 ]
  br label %dec_label_pc_12850

dec_label_pc_1284c:                               ; preds = %dec_label_pc_12838
  br label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_12840, %dec_label_pc_1284c
  %v14_12854 = phi i32 [ %v0_12840, %dec_label_pc_12840 ], [ %tmp9, %dec_label_pc_1284c ]
  ret i32 %v14_12854

; uselistorder directives
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_12850, { 1, 0 }
}

define i32 @function_12858(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12858:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_12858 = load i32, i32* @r4, align 4
  store i32 %v3_12858, i32* %stack_var_-8, align 4
  %v6_1285c = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_1285c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_1285c, -4095
  br i1 %tmp6, label %dec_label_pc_1287c, label %dec_label_pc_1286c

dec_label_pc_1286c:                               ; preds = %dec_label_pc_12858
  %v0_1286c = call i32 @function_11224()
  %v0_12870 = load i32, i32* %r4.global-to-local, align 4
  %v1_12870 = sub i32 0, %v0_12870
  %v2_12874 = inttoptr i32 %v0_1286c to i32*
  store i32 %v1_12870, i32* %v2_12874, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1287c

dec_label_pc_1287c:                               ; preds = %dec_label_pc_12858, %dec_label_pc_1286c
  %v0_1287c = phi i32 [ %v6_1285c, %dec_label_pc_12858 ], [ -1, %dec_label_pc_1286c ]
  %v2_12880 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12880, i32* %r4.global-to-local, align 4
  ret i32 %v0_1287c

; uselistorder directives
  uselistorder i32 %v6_1285c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1287c, { 1, 0 }
}

define i32 @function_12884(i32 %arg1) local_unnamed_addr {
dec_label_pc_12884:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12884 = load i32, i32* @r4, align 4
  store i32 %v3_12884, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1bc2c.520 to i32), i32* %r4.global-to-local, align 4
  %v2_1288c = load i32, i32* @global_var_1bc2c.520, align 4
  %v2_12890 = icmp eq i32 %v2_1288c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_12890, label %dec_label_pc_128a0, label %dec_label_pc_128ac

dec_label_pc_128a0:                               ; preds = %dec_label_pc_12884
  %v2_128a0 = call i32 @function_132a8(i32* null)
  %v1_128a4 = icmp slt i32 %v2_128a0, 0
  br i1 %v1_128a4, label %dec_label_pc_128cc, label %dec_label_pc_128acthread-pre-split

dec_label_pc_128acthread-pre-split:               ; preds = %dec_label_pc_128a0
  %v0_128b0.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_128ac.pre = load i32, i32* @global_var_1bc2c.520, align 4
  br label %dec_label_pc_128ac

dec_label_pc_128ac:                               ; preds = %dec_label_pc_128acthread-pre-split, %dec_label_pc_12884
  %v2_128ac = phi i32 [ %v2_128ac.pre, %dec_label_pc_128acthread-pre-split ], [ %v2_1288c, %dec_label_pc_12884 ]
  %v1_128b8 = phi i32 [ %v0_128b0.pr, %dec_label_pc_128acthread-pre-split ], [ %arg1, %dec_label_pc_12884 ]
  %v2_128b0 = icmp eq i32 %v1_128b8, 0
  store i32 %v2_128ac, i32* %r4.global-to-local, align 4
  br i1 %v2_128b0, label %dec_label_pc_128d0, label %dec_label_pc_128c0

dec_label_pc_128c0:                               ; preds = %dec_label_pc_128ac
  %v2_128b8 = add i32 %v1_128b8, %v2_128ac
  %v1_128c0 = inttoptr i32 %v2_128b8 to i32*
  %v2_128c0 = call i32 @function_132a8(i32* %v1_128c0)
  %v1_128c4 = icmp slt i32 %v2_128c0, 0
  br i1 %v1_128c4, label %dec_label_pc_128cc, label %dec_label_pc_128c0.dec_label_pc_128d0_crit_edge

dec_label_pc_128c0.dec_label_pc_128d0_crit_edge:  ; preds = %dec_label_pc_128c0
  %v0_128d0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_128d0

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128c0, %dec_label_pc_128a0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_128d0

dec_label_pc_128d0:                               ; preds = %dec_label_pc_128c0.dec_label_pc_128d0_crit_edge, %dec_label_pc_128ac, %dec_label_pc_128cc
  %v0_128d0 = phi i32 [ %v0_128d0.pre, %dec_label_pc_128c0.dec_label_pc_128d0_crit_edge ], [ %v2_128ac, %dec_label_pc_128ac ], [ -1, %dec_label_pc_128cc ]
  %v2_128d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_128d4, i32* @r4, align 4
  ret i32 %v0_128d0

; uselistorder directives
  uselistorder i32 %v2_128ac, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 5, 29, 30, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28 }
  uselistorder label %dec_label_pc_128d0, { 2, 0, 1 }
}

define i32 @function_128dc(%tms* %arg1) local_unnamed_addr {
dec_label_pc_128dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_128dc = load i32, i32* @r4, align 4
  store i32 %v3_128dc, i32* %stack_var_-8, align 4
  %v3_128e0 = call i32 @times(%tms* %arg1)
  store i32 %v3_128e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_128e0, -4095
  br i1 %tmp, label %dec_label_pc_12900, label %dec_label_pc_128f0

dec_label_pc_128f0:                               ; preds = %dec_label_pc_128dc
  %v0_128f0 = call i32 @function_11224()
  %v0_128f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_128f4 = sub i32 0, %v0_128f4
  %v2_128f8 = inttoptr i32 %v0_128f0 to i32*
  store i32 %v1_128f4, i32* %v2_128f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12900

dec_label_pc_12900:                               ; preds = %dec_label_pc_128dc, %dec_label_pc_128f0
  %v0_12900 = phi i32 [ %v3_128e0, %dec_label_pc_128dc ], [ -1, %dec_label_pc_128f0 ]
  %v2_12904 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12904, i32* %r4.global-to-local, align 4
  ret i32 %v0_12900

; uselistorder directives
  uselistorder i32 %v3_128e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12900, { 1, 0 }
}

define i32 @function_12908(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12908:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_12924 = inttoptr i32 %arg2 to i8*
  %v3_12924 = call i32 @function_11290(i8* %v2_12924, i32 0)
  %v1_12928 = add i32 %tmp, 1
  %v2_12928 = inttoptr i32 %v1_12928 to i8*
  %v3_12928 = load i8, i8* %v2_12928, align 1
  %v4_12928 = zext i8 %v3_12928 to i32
  %v1_1292c = add i32 %tmp, 5
  %v2_1292c = inttoptr i32 %v1_1292c to i8*
  %v3_1292c = load i8, i8* %v2_1292c, align 1
  %v4_1292c = zext i8 %v3_1292c to i32
  %v2_12930 = load i8, i8* %arg1, align 1
  %v3_12930 = zext i8 %v2_12930 to i32
  %v1_12934 = add i32 %tmp, 4
  %v2_12934 = inttoptr i32 %v1_12934 to i8*
  %v3_12934 = load i8, i8* %v2_12934, align 1
  %v4_12934 = zext i8 %v3_12934 to i32
  %v1_12938 = add i32 %tmp, 2
  %v2_12938 = inttoptr i32 %v1_12938 to i8*
  %v3_12938 = load i8, i8* %v2_12938, align 1
  %v4_12938 = zext i8 %v3_12938 to i32
  %v1_1293c = add i32 %tmp, 6
  %v2_1293c = inttoptr i32 %v1_1293c to i8*
  %v3_1293c = load i8, i8* %v2_1293c, align 1
  %v4_1293c = zext i8 %v3_1293c to i32
  %v1_12940 = add i32 %tmp, 3
  %v2_12940 = inttoptr i32 %v1_12940 to i8*
  %v3_12940 = load i8, i8* %v2_12940, align 1
  %v4_12940 = zext i8 %v3_12940 to i32
  %v4_12944 = mul nuw nsw i32 %v4_12928, 256
  %v5_12944 = or i32 %v3_12930, %v4_12944
  %v4_12948 = mul nuw nsw i32 %v4_1292c, 256
  %v5_12948 = or i32 %v4_12934, %v4_12948
  %v1_1294c = add i32 %tmp, 7
  %v2_1294c = inttoptr i32 %v1_1294c to i8*
  %v3_1294c = load i8, i8* %v2_1294c, align 1
  %v4_1294c = zext i8 %v3_1294c to i32
  %v4_12950 = mul nuw nsw i32 %v4_12938, 65536
  %v5_12950 = or i32 %v4_12950, %v5_12944
  %v4_12954 = mul nuw nsw i32 %v4_1293c, 65536
  %v5_12954 = or i32 %v4_12954, %v5_12948
  %v4_12958 = mul nuw i32 %v4_12940, 16777216
  %v5_12958 = or i32 %v4_12958, %v5_12950
  %v4_1295c = mul nuw i32 %v4_1294c, 16777216
  %v5_1295c = or i32 %v4_1295c, %v5_12954
  store i32 %v5_1295c, i32* %r3.global-to-local, align 4
  %v0_12960 = load i32, i32* %r7.global-to-local, align 4
  %v1_12960 = inttoptr i32 %v0_12960 to i32*
  store i32 %v5_12958, i32* %v1_12960, align 4
  %v3_12960 = add i32 %v0_12960, 4
  %v4_12960 = inttoptr i32 %v3_12960 to i32*
  %v5_12960 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12960, i32* %v4_12960, align 4
  %v0_12964 = load i32, i32* %r4.global-to-local, align 4
  %v1_12964 = add i32 %v0_12964, 89
  %v2_12964 = inttoptr i32 %v1_12964 to i8*
  %v3_12964 = load i8, i8* %v2_12964, align 1
  %v4_12964 = zext i8 %v3_12964 to i32
  %v1_12968 = add i32 %v0_12964, 93
  %v2_12968 = inttoptr i32 %v1_12968 to i8*
  %v3_12968 = load i8, i8* %v2_12968, align 1
  %v4_12968 = zext i8 %v3_12968 to i32
  %v1_1296c = add i32 %v0_12964, 88
  %v2_1296c = inttoptr i32 %v1_1296c to i8*
  %v3_1296c = load i8, i8* %v2_1296c, align 1
  %v4_1296c = zext i8 %v3_1296c to i32
  %v1_12970 = add i32 %v0_12964, 92
  %v2_12970 = inttoptr i32 %v1_12970 to i8*
  %v3_12970 = load i8, i8* %v2_12970, align 1
  %v4_12970 = zext i8 %v3_12970 to i32
  store i32 %v4_12970, i32* %r3.global-to-local, align 4
  %v1_12974 = add i32 %v0_12964, 94
  %v2_12974 = inttoptr i32 %v1_12974 to i8*
  %v3_12974 = load i8, i8* %v2_12974, align 1
  %v4_12974 = zext i8 %v3_12974 to i32
  %v1_12978 = add i32 %v0_12964, 90
  %v2_12978 = inttoptr i32 %v1_12978 to i8*
  %v3_12978 = load i8, i8* %v2_12978, align 1
  %v4_12978 = zext i8 %v3_12978 to i32
  %v1_1297c = add i32 %v0_12964, 91
  %v2_1297c = inttoptr i32 %v1_1297c to i8*
  %v3_1297c = load i8, i8* %v2_1297c, align 1
  %v4_1297c = zext i8 %v3_1297c to i32
  %v4_12980 = mul nuw nsw i32 %v4_12964, 256
  %v5_12980 = or i32 %v4_1296c, %v4_12980
  %v4_12984 = mul nuw nsw i32 %v4_12968, 256
  %v5_12984 = or i32 %v4_12970, %v4_12984
  store i32 %v5_12984, i32* %r3.global-to-local, align 4
  %v1_12988 = add i32 %v0_12964, 95
  %v2_12988 = inttoptr i32 %v1_12988 to i8*
  %v3_12988 = load i8, i8* %v2_12988, align 1
  %v4_12988 = zext i8 %v3_12988 to i32
  %v4_1298c = mul nuw nsw i32 %v4_12974, 65536
  %v5_1298c = or i32 %v4_1298c, %v5_12984
  store i32 %v5_1298c, i32* %r3.global-to-local, align 4
  %v4_12990 = mul nuw nsw i32 %v4_12978, 65536
  %v5_12990 = or i32 %v4_12990, %v5_12980
  %v4_12994 = mul nuw i32 %v4_1297c, 16777216
  %v5_12994 = or i32 %v4_12994, %v5_12990
  %v4_12998 = mul nuw i32 %v4_12988, 16777216
  %v5_12998 = or i32 %v4_12998, %v5_1298c
  store i32 %v5_12998, i32* %r6.global-to-local, align 4
  %v1_1299c = load i32, i32* %r7.global-to-local, align 4
  %v2_1299c = add i32 %v1_1299c, 88
  %v3_1299c = inttoptr i32 %v2_1299c to i32*
  store i32 %v5_12994, i32* %v3_1299c, align 4
  %v0_129a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_129a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129a0 = add i32 %v1_129a0, 92
  %v3_129a0 = inttoptr i32 %v2_129a0 to i32*
  store i32 %v0_129a0, i32* %v3_129a0, align 4
  %v0_129a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129a4 = add i32 %v0_129a4, 13
  %v2_129a4 = inttoptr i32 %v1_129a4 to i8*
  %v3_129a4 = load i8, i8* %v2_129a4, align 1
  %v4_129a4 = zext i8 %v3_129a4 to i32
  %v1_129a8 = add i32 %v0_129a4, 12
  %v2_129a8 = inttoptr i32 %v1_129a8 to i8*
  %v3_129a8 = load i8, i8* %v2_129a8, align 1
  %v4_129a8 = zext i8 %v3_129a8 to i32
  store i32 %v4_129a8, i32* %r3.global-to-local, align 4
  %v1_129ac = add i32 %v0_129a4, 14
  %v2_129ac = inttoptr i32 %v1_129ac to i8*
  %v3_129ac = load i8, i8* %v2_129ac, align 1
  %v4_129ac = zext i8 %v3_129ac to i32
  %v4_129b0 = mul nuw nsw i32 %v4_129a4, 256
  %v5_129b0 = or i32 %v4_129a8, %v4_129b0
  store i32 %v5_129b0, i32* %r3.global-to-local, align 4
  %v1_129b4 = add i32 %v0_129a4, 15
  %v2_129b4 = inttoptr i32 %v1_129b4 to i8*
  %v3_129b4 = load i8, i8* %v2_129b4, align 1
  %v4_129b4 = zext i8 %v3_129b4 to i32
  %v4_129b8 = mul nuw nsw i32 %v4_129ac, 65536
  %v5_129b8 = or i32 %v4_129b8, %v5_129b0
  %v4_129bc = mul nuw i32 %v4_129b4, 16777216
  %v5_129bc = or i32 %v5_129b8, %v4_129bc
  store i32 %v5_129bc, i32* %r3.global-to-local, align 4
  %v1_129c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129c0 = add i32 %v1_129c0, 12
  %v3_129c0 = inttoptr i32 %v2_129c0 to i32*
  store i32 %v5_129bc, i32* %v3_129c0, align 4
  %v0_129c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129c4 = add i32 %v0_129c4, 17
  %v2_129c4 = inttoptr i32 %v1_129c4 to i8*
  %v3_129c4 = load i8, i8* %v2_129c4, align 1
  %v4_129c4 = zext i8 %v3_129c4 to i32
  %v1_129c8 = add i32 %v0_129c4, 16
  %v2_129c8 = inttoptr i32 %v1_129c8 to i8*
  %v3_129c8 = load i8, i8* %v2_129c8, align 1
  %v4_129c8 = zext i8 %v3_129c8 to i32
  store i32 %v4_129c8, i32* %r3.global-to-local, align 4
  %v1_129cc = add i32 %v0_129c4, 18
  %v2_129cc = inttoptr i32 %v1_129cc to i8*
  %v3_129cc = load i8, i8* %v2_129cc, align 1
  %v4_129cc = zext i8 %v3_129cc to i32
  %v4_129d0 = mul nuw nsw i32 %v4_129c4, 256
  %v5_129d0 = or i32 %v4_129c8, %v4_129d0
  store i32 %v5_129d0, i32* %r3.global-to-local, align 4
  %v1_129d4 = add i32 %v0_129c4, 19
  %v2_129d4 = inttoptr i32 %v1_129d4 to i8*
  %v3_129d4 = load i8, i8* %v2_129d4, align 1
  %v4_129d4 = zext i8 %v3_129d4 to i32
  %v4_129d8 = mul nuw nsw i32 %v4_129cc, 65536
  %v5_129d8 = or i32 %v4_129d8, %v5_129d0
  %v4_129dc = mul nuw i32 %v4_129d4, 16777216
  %v5_129dc = or i32 %v5_129d8, %v4_129dc
  store i32 %v5_129dc, i32* %r3.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129e0 = add i32 %v1_129e0, 16
  %v3_129e0 = inttoptr i32 %v2_129e0 to i32*
  store i32 %v5_129dc, i32* %v3_129e0, align 4
  %v0_129e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129e4 = add i32 %v0_129e4, 21
  %v2_129e4 = inttoptr i32 %v1_129e4 to i8*
  %v3_129e4 = load i8, i8* %v2_129e4, align 1
  %v4_129e4 = zext i8 %v3_129e4 to i32
  %v1_129e8 = add i32 %v0_129e4, 20
  %v2_129e8 = inttoptr i32 %v1_129e8 to i8*
  %v3_129e8 = load i8, i8* %v2_129e8, align 1
  %v4_129e8 = zext i8 %v3_129e8 to i32
  store i32 %v4_129e8, i32* %r3.global-to-local, align 4
  %v1_129ec = add i32 %v0_129e4, 22
  %v2_129ec = inttoptr i32 %v1_129ec to i8*
  %v3_129ec = load i8, i8* %v2_129ec, align 1
  %v4_129ec = zext i8 %v3_129ec to i32
  %v4_129f0 = mul nuw nsw i32 %v4_129e4, 256
  %v5_129f0 = or i32 %v4_129e8, %v4_129f0
  store i32 %v5_129f0, i32* %r3.global-to-local, align 4
  %v1_129f4 = add i32 %v0_129e4, 23
  %v2_129f4 = inttoptr i32 %v1_129f4 to i8*
  %v3_129f4 = load i8, i8* %v2_129f4, align 1
  %v4_129f4 = zext i8 %v3_129f4 to i32
  %v4_129f8 = mul nuw nsw i32 %v4_129ec, 65536
  %v5_129f8 = or i32 %v4_129f8, %v5_129f0
  %v4_129fc = mul nuw i32 %v4_129f4, 16777216
  %v5_129fc = or i32 %v5_129f8, %v4_129fc
  store i32 %v5_129fc, i32* %r3.global-to-local, align 4
  %v1_12a00 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a00 = add i32 %v1_12a00, 20
  %v3_12a00 = inttoptr i32 %v2_12a00 to i32*
  store i32 %v5_129fc, i32* %v3_12a00, align 4
  %v0_12a04 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a04 = add i32 %v0_12a04, 25
  %v2_12a04 = inttoptr i32 %v1_12a04 to i8*
  %v3_12a04 = load i8, i8* %v2_12a04, align 1
  %v4_12a04 = zext i8 %v3_12a04 to i32
  %v1_12a08 = add i32 %v0_12a04, 24
  %v2_12a08 = inttoptr i32 %v1_12a08 to i8*
  %v3_12a08 = load i8, i8* %v2_12a08, align 1
  %v4_12a08 = zext i8 %v3_12a08 to i32
  store i32 %v4_12a08, i32* %r3.global-to-local, align 4
  %v1_12a0c = add i32 %v0_12a04, 26
  %v2_12a0c = inttoptr i32 %v1_12a0c to i8*
  %v3_12a0c = load i8, i8* %v2_12a0c, align 1
  %v4_12a0c = zext i8 %v3_12a0c to i32
  %v4_12a10 = mul nuw nsw i32 %v4_12a04, 256
  %v5_12a10 = or i32 %v4_12a08, %v4_12a10
  store i32 %v5_12a10, i32* %r3.global-to-local, align 4
  %v1_12a14 = add i32 %v0_12a04, 27
  %v2_12a14 = inttoptr i32 %v1_12a14 to i8*
  %v3_12a14 = load i8, i8* %v2_12a14, align 1
  %v4_12a14 = zext i8 %v3_12a14 to i32
  %v4_12a18 = mul nuw nsw i32 %v4_12a0c, 65536
  %v5_12a18 = or i32 %v4_12a18, %v5_12a10
  %v4_12a1c = mul nuw i32 %v4_12a14, 16777216
  %v5_12a1c = or i32 %v5_12a18, %v4_12a1c
  store i32 %v5_12a1c, i32* %r3.global-to-local, align 4
  %v1_12a20 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a20 = add i32 %v1_12a20, 24
  %v3_12a20 = inttoptr i32 %v2_12a20 to i32*
  store i32 %v5_12a1c, i32* %v3_12a20, align 4
  %v0_12a24 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a24 = add i32 %v0_12a24, 29
  %v2_12a24 = inttoptr i32 %v1_12a24 to i8*
  %v3_12a24 = load i8, i8* %v2_12a24, align 1
  %v4_12a24 = zext i8 %v3_12a24 to i32
  %v1_12a28 = add i32 %v0_12a24, 28
  %v2_12a28 = inttoptr i32 %v1_12a28 to i8*
  %v3_12a28 = load i8, i8* %v2_12a28, align 1
  %v4_12a28 = zext i8 %v3_12a28 to i32
  store i32 %v4_12a28, i32* %r3.global-to-local, align 4
  %v1_12a2c = add i32 %v0_12a24, 30
  %v2_12a2c = inttoptr i32 %v1_12a2c to i8*
  %v3_12a2c = load i8, i8* %v2_12a2c, align 1
  %v4_12a2c = zext i8 %v3_12a2c to i32
  %v4_12a30 = mul nuw nsw i32 %v4_12a24, 256
  %v5_12a30 = or i32 %v4_12a28, %v4_12a30
  store i32 %v5_12a30, i32* %r3.global-to-local, align 4
  %v1_12a34 = add i32 %v0_12a24, 31
  %v2_12a34 = inttoptr i32 %v1_12a34 to i8*
  %v3_12a34 = load i8, i8* %v2_12a34, align 1
  %v4_12a34 = zext i8 %v3_12a34 to i32
  %v4_12a38 = mul nuw nsw i32 %v4_12a2c, 65536
  %v5_12a38 = or i32 %v4_12a38, %v5_12a30
  %v4_12a3c = mul nuw i32 %v4_12a34, 16777216
  %v5_12a3c = or i32 %v5_12a38, %v4_12a3c
  store i32 %v5_12a3c, i32* %r3.global-to-local, align 4
  %v1_12a40 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a40 = add i32 %v1_12a40, 28
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  store i32 %v5_12a3c, i32* %v3_12a40, align 4
  %v0_12a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a44 = add i32 %v0_12a44, 33
  %v2_12a44 = inttoptr i32 %v1_12a44 to i8*
  %v3_12a44 = load i8, i8* %v2_12a44, align 1
  %v4_12a44 = zext i8 %v3_12a44 to i32
  %v1_12a48 = add i32 %v0_12a44, 37
  %v2_12a48 = inttoptr i32 %v1_12a48 to i8*
  %v3_12a48 = load i8, i8* %v2_12a48, align 1
  %v4_12a48 = zext i8 %v3_12a48 to i32
  %v1_12a4c = add i32 %v0_12a44, 32
  %v2_12a4c = inttoptr i32 %v1_12a4c to i8*
  %v3_12a4c = load i8, i8* %v2_12a4c, align 1
  %v4_12a4c = zext i8 %v3_12a4c to i32
  %v1_12a50 = add i32 %v0_12a44, 36
  %v2_12a50 = inttoptr i32 %v1_12a50 to i8*
  %v3_12a50 = load i8, i8* %v2_12a50, align 1
  %v4_12a50 = zext i8 %v3_12a50 to i32
  store i32 %v4_12a50, i32* %r3.global-to-local, align 4
  %v1_12a54 = add i32 %v0_12a44, 34
  %v2_12a54 = inttoptr i32 %v1_12a54 to i8*
  %v3_12a54 = load i8, i8* %v2_12a54, align 1
  %v4_12a54 = zext i8 %v3_12a54 to i32
  %v1_12a58 = add i32 %v0_12a44, 38
  %v2_12a58 = inttoptr i32 %v1_12a58 to i8*
  %v3_12a58 = load i8, i8* %v2_12a58, align 1
  %v4_12a58 = zext i8 %v3_12a58 to i32
  %v1_12a5c = add i32 %v0_12a44, 35
  %v2_12a5c = inttoptr i32 %v1_12a5c to i8*
  %v3_12a5c = load i8, i8* %v2_12a5c, align 1
  %v4_12a5c = zext i8 %v3_12a5c to i32
  %v4_12a60 = mul nuw nsw i32 %v4_12a44, 256
  %v5_12a60 = or i32 %v4_12a4c, %v4_12a60
  %v4_12a64 = mul nuw nsw i32 %v4_12a48, 256
  %v5_12a64 = or i32 %v4_12a50, %v4_12a64
  store i32 %v5_12a64, i32* %r3.global-to-local, align 4
  %v1_12a68 = add i32 %v0_12a44, 39
  %v2_12a68 = inttoptr i32 %v1_12a68 to i8*
  %v3_12a68 = load i8, i8* %v2_12a68, align 1
  %v4_12a68 = zext i8 %v3_12a68 to i32
  %v4_12a6c = mul nuw nsw i32 %v4_12a54, 65536
  %v5_12a6c = or i32 %v4_12a6c, %v5_12a60
  %v4_12a70 = mul nuw nsw i32 %v4_12a58, 65536
  %v5_12a70 = or i32 %v4_12a70, %v5_12a64
  %v4_12a74 = mul nuw i32 %v4_12a5c, 16777216
  %v5_12a74 = or i32 %v5_12a6c, %v4_12a74
  %v4_12a78 = mul nuw i32 %v4_12a68, 16777216
  %v5_12a78 = or i32 %v5_12a70, %v4_12a78
  store i32 %v5_12a78, i32* %r3.global-to-local, align 4
  %v1_12a8c = load i32, i32* %r7.global-to-local, align 4
  %v2_12a8c = add i32 %v1_12a8c, 32
  %v3_12a8c = inttoptr i32 %v2_12a8c to i32*
  store i32 %v5_12a74, i32* %v3_12a8c, align 4
  %v0_12a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a90 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a90 = add i32 %v1_12a90, 36
  %v3_12a90 = inttoptr i32 %v2_12a90 to i32*
  store i32 %v0_12a90, i32* %v3_12a90, align 4
  %v0_12a94 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a94 = add i32 %v0_12a94, 45
  %v2_12a94 = inttoptr i32 %v1_12a94 to i8*
  %v3_12a94 = load i8, i8* %v2_12a94, align 1
  %v4_12a94 = zext i8 %v3_12a94 to i32
  %v1_12a98 = add i32 %v0_12a94, 49
  %v2_12a98 = inttoptr i32 %v1_12a98 to i8*
  %v3_12a98 = load i8, i8* %v2_12a98, align 1
  %v4_12a98 = zext i8 %v3_12a98 to i32
  %v1_12a9c = add i32 %v0_12a94, 44
  %v2_12a9c = inttoptr i32 %v1_12a9c to i8*
  %v3_12a9c = load i8, i8* %v2_12a9c, align 1
  %v4_12a9c = zext i8 %v3_12a9c to i32
  %v1_12aa0 = add i32 %v0_12a94, 48
  %v2_12aa0 = inttoptr i32 %v1_12aa0 to i8*
  %v3_12aa0 = load i8, i8* %v2_12aa0, align 1
  %v4_12aa0 = zext i8 %v3_12aa0 to i32
  store i32 %v4_12aa0, i32* %r3.global-to-local, align 4
  %v1_12aa4 = add i32 %v0_12a94, 46
  %v2_12aa4 = inttoptr i32 %v1_12aa4 to i8*
  %v3_12aa4 = load i8, i8* %v2_12aa4, align 1
  %v4_12aa4 = zext i8 %v3_12aa4 to i32
  %v1_12aa8 = add i32 %v0_12a94, 50
  %v2_12aa8 = inttoptr i32 %v1_12aa8 to i8*
  %v3_12aa8 = load i8, i8* %v2_12aa8, align 1
  %v4_12aa8 = zext i8 %v3_12aa8 to i32
  %v1_12aac = add i32 %v0_12a94, 47
  %v2_12aac = inttoptr i32 %v1_12aac to i8*
  %v3_12aac = load i8, i8* %v2_12aac, align 1
  %v4_12aac = zext i8 %v3_12aac to i32
  %v4_12ab0 = mul nuw nsw i32 %v4_12a94, 256
  %v5_12ab0 = or i32 %v4_12a9c, %v4_12ab0
  %v4_12ab4 = mul nuw nsw i32 %v4_12a98, 256
  %v5_12ab4 = or i32 %v4_12aa0, %v4_12ab4
  store i32 %v5_12ab4, i32* %r3.global-to-local, align 4
  %v1_12ab8 = add i32 %v0_12a94, 51
  %v2_12ab8 = inttoptr i32 %v1_12ab8 to i8*
  %v3_12ab8 = load i8, i8* %v2_12ab8, align 1
  %v4_12ab8 = zext i8 %v3_12ab8 to i32
  %v4_12abc = mul nuw nsw i32 %v4_12aa4, 65536
  %v5_12abc = or i32 %v4_12abc, %v5_12ab0
  %v4_12ac0 = mul nuw nsw i32 %v4_12aa8, 65536
  %v5_12ac0 = or i32 %v4_12ac0, %v5_12ab4
  %v4_12ac4 = mul nuw i32 %v4_12aac, 16777216
  %v5_12ac4 = or i32 %v5_12abc, %v4_12ac4
  %v4_12ac8 = mul nuw i32 %v4_12ab8, 16777216
  %v5_12ac8 = or i32 %v5_12ac0, %v4_12ac8
  store i32 %v5_12ac8, i32* %r3.global-to-local, align 4
  %v1_12adc = load i32, i32* %r7.global-to-local, align 4
  %v2_12adc = add i32 %v1_12adc, 44
  %v3_12adc = inttoptr i32 %v2_12adc to i32*
  store i32 %v5_12ac4, i32* %v3_12adc, align 4
  %v0_12ae0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12ae0 = load i32, i32* %r7.global-to-local, align 4
  %v2_12ae0 = add i32 %v1_12ae0, 48
  %v3_12ae0 = inttoptr i32 %v2_12ae0 to i32*
  store i32 %v0_12ae0, i32* %v3_12ae0, align 4
  %v0_12ae4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ae4 = add i32 %v0_12ae4, 53
  %v2_12ae4 = inttoptr i32 %v1_12ae4 to i8*
  %v3_12ae4 = load i8, i8* %v2_12ae4, align 1
  %v4_12ae4 = zext i8 %v3_12ae4 to i32
  %v1_12ae8 = add i32 %v0_12ae4, 52
  %v2_12ae8 = inttoptr i32 %v1_12ae8 to i8*
  %v3_12ae8 = load i8, i8* %v2_12ae8, align 1
  %v4_12ae8 = zext i8 %v3_12ae8 to i32
  store i32 %v4_12ae8, i32* %r3.global-to-local, align 4
  %v1_12aec = add i32 %v0_12ae4, 54
  %v2_12aec = inttoptr i32 %v1_12aec to i8*
  %v3_12aec = load i8, i8* %v2_12aec, align 1
  %v4_12aec = zext i8 %v3_12aec to i32
  %v4_12af0 = mul nuw nsw i32 %v4_12ae4, 256
  %v5_12af0 = or i32 %v4_12ae8, %v4_12af0
  store i32 %v5_12af0, i32* %r3.global-to-local, align 4
  %v1_12af4 = add i32 %v0_12ae4, 55
  %v2_12af4 = inttoptr i32 %v1_12af4 to i8*
  %v3_12af4 = load i8, i8* %v2_12af4, align 1
  %v4_12af4 = zext i8 %v3_12af4 to i32
  %v4_12af8 = mul nuw nsw i32 %v4_12aec, 65536
  %v5_12af8 = or i32 %v4_12af8, %v5_12af0
  %v4_12afc = mul nuw i32 %v4_12af4, 16777216
  %v5_12afc = or i32 %v5_12af8, %v4_12afc
  store i32 %v5_12afc, i32* %r3.global-to-local, align 4
  %v1_12b00 = load i32, i32* %r7.global-to-local, align 4
  %v2_12b00 = add i32 %v1_12b00, 52
  %v3_12b00 = inttoptr i32 %v2_12b00 to i32*
  store i32 %v5_12afc, i32* %v3_12b00, align 4
  %v0_12b04 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b04 = add i32 %v0_12b04, 57
  %v2_12b04 = inttoptr i32 %v1_12b04 to i8*
  %v3_12b04 = load i8, i8* %v2_12b04, align 1
  %v4_12b04 = zext i8 %v3_12b04 to i32
  %v1_12b08 = add i32 %v0_12b04, 56
  %v2_12b08 = inttoptr i32 %v1_12b08 to i8*
  %v3_12b08 = load i8, i8* %v2_12b08, align 1
  %v4_12b08 = zext i8 %v3_12b08 to i32
  %v1_12b0c = add i32 %v0_12b04, 60
  %v2_12b0c = inttoptr i32 %v1_12b0c to i8*
  %v3_12b0c = load i8, i8* %v2_12b0c, align 1
  %v4_12b0c = zext i8 %v3_12b0c to i32
  store i32 %v4_12b0c, i32* %r3.global-to-local, align 4
  %v1_12b10 = add i32 %v0_12b04, 61
  %v2_12b10 = inttoptr i32 %v1_12b10 to i8*
  %v3_12b10 = load i8, i8* %v2_12b10, align 1
  %v4_12b10 = zext i8 %v3_12b10 to i32
  %v1_12b14 = add i32 %v0_12b04, 58
  %v2_12b14 = inttoptr i32 %v1_12b14 to i8*
  %v3_12b14 = load i8, i8* %v2_12b14, align 1
  %v4_12b14 = zext i8 %v3_12b14 to i32
  %v1_12b18 = add i32 %v0_12b04, 62
  %v2_12b18 = inttoptr i32 %v1_12b18 to i8*
  %v3_12b18 = load i8, i8* %v2_12b18, align 1
  %v4_12b18 = zext i8 %v3_12b18 to i32
  %v1_12b1c = add i32 %v0_12b04, 59
  %v2_12b1c = inttoptr i32 %v1_12b1c to i8*
  %v3_12b1c = load i8, i8* %v2_12b1c, align 1
  %v4_12b1c = zext i8 %v3_12b1c to i32
  %v4_12b20 = mul nuw nsw i32 %v4_12b04, 256
  %v5_12b20 = or i32 %v4_12b08, %v4_12b20
  %v4_12b24 = mul nuw nsw i32 %v4_12b10, 256
  %v5_12b24 = or i32 %v4_12b24, %v4_12b0c
  store i32 %v5_12b24, i32* %r3.global-to-local, align 4
  %v1_12b28 = add i32 %v0_12b04, 63
  %v2_12b28 = inttoptr i32 %v1_12b28 to i8*
  %v3_12b28 = load i8, i8* %v2_12b28, align 1
  %v4_12b28 = zext i8 %v3_12b28 to i32
  %v4_12b2c = mul nuw nsw i32 %v4_12b14, 65536
  %v5_12b2c = or i32 %v4_12b2c, %v5_12b20
  %v4_12b30 = mul nuw nsw i32 %v4_12b18, 65536
  %v5_12b30 = or i32 %v4_12b30, %v5_12b24
  %v4_12b34 = mul nuw i32 %v4_12b28, 16777216
  %v5_12b34 = or i32 %v5_12b30, %v4_12b34
  %v4_12b38 = mul nuw i32 %v4_12b1c, 16777216
  %v5_12b38 = or i32 %v5_12b2c, %v4_12b38
  store i32 %v5_12b34, i32* %r3.global-to-local, align 4
  %v1_12b48 = load i32, i32* %r7.global-to-local, align 4
  %v2_12b48 = add i32 %v1_12b48, 56
  %v3_12b48 = inttoptr i32 %v2_12b48 to i32*
  store i32 %v5_12b38, i32* %v3_12b48, align 4
  %v0_12b4c = load i32, i32* %r3.global-to-local, align 4
  %v1_12b4c = load i32, i32* %r7.global-to-local, align 4
  %v2_12b4c = add i32 %v1_12b4c, 60
  %v3_12b4c = inttoptr i32 %v2_12b4c to i32*
  store i32 %v0_12b4c, i32* %v3_12b4c, align 4
  %v0_12b50 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b50 = add i32 %v0_12b50, 65
  %v2_12b50 = inttoptr i32 %v1_12b50 to i8*
  %v3_12b50 = load i8, i8* %v2_12b50, align 1
  %v4_12b50 = zext i8 %v3_12b50 to i32
  %v1_12b54 = add i32 %v0_12b50, 64
  %v2_12b54 = inttoptr i32 %v1_12b54 to i8*
  %v3_12b54 = load i8, i8* %v2_12b54, align 1
  %v4_12b54 = zext i8 %v3_12b54 to i32
  store i32 %v4_12b54, i32* %r3.global-to-local, align 4
  %v1_12b58 = add i32 %v0_12b50, 66
  %v2_12b58 = inttoptr i32 %v1_12b58 to i8*
  %v3_12b58 = load i8, i8* %v2_12b58, align 1
  %v4_12b58 = zext i8 %v3_12b58 to i32
  %v4_12b5c = mul nuw nsw i32 %v4_12b50, 256
  %v5_12b5c = or i32 %v4_12b54, %v4_12b5c
  store i32 %v5_12b5c, i32* %r3.global-to-local, align 4
  %v1_12b60 = add i32 %v0_12b50, 67
  %v2_12b60 = inttoptr i32 %v1_12b60 to i8*
  %v3_12b60 = load i8, i8* %v2_12b60, align 1
  %v4_12b60 = zext i8 %v3_12b60 to i32
  %v4_12b64 = mul nuw nsw i32 %v4_12b58, 65536
  %v5_12b64 = or i32 %v4_12b64, %v5_12b5c
  %v4_12b68 = mul nuw i32 %v4_12b60, 16777216
  %v5_12b68 = or i32 %v5_12b64, %v4_12b68
  store i32 %v5_12b68, i32* %r3.global-to-local, align 4
  %v1_12b6c = load i32, i32* %r7.global-to-local, align 4
  %v2_12b6c = add i32 %v1_12b6c, 64
  %v3_12b6c = inttoptr i32 %v2_12b6c to i32*
  store i32 %v5_12b68, i32* %v3_12b6c, align 4
  %v0_12b70 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b70 = add i32 %v0_12b70, 73
  %v2_12b70 = inttoptr i32 %v1_12b70 to i8*
  %v3_12b70 = load i8, i8* %v2_12b70, align 1
  %v4_12b70 = zext i8 %v3_12b70 to i32
  %v1_12b74 = add i32 %v0_12b70, 72
  %v2_12b74 = inttoptr i32 %v1_12b74 to i8*
  %v3_12b74 = load i8, i8* %v2_12b74, align 1
  %v4_12b74 = zext i8 %v3_12b74 to i32
  store i32 %v4_12b74, i32* %r3.global-to-local, align 4
  %v1_12b78 = add i32 %v0_12b70, 74
  %v2_12b78 = inttoptr i32 %v1_12b78 to i8*
  %v3_12b78 = load i8, i8* %v2_12b78, align 1
  %v4_12b78 = zext i8 %v3_12b78 to i32
  %v4_12b7c = mul nuw nsw i32 %v4_12b70, 256
  %v5_12b7c = or i32 %v4_12b74, %v4_12b7c
  store i32 %v5_12b7c, i32* %r3.global-to-local, align 4
  %v1_12b80 = add i32 %v0_12b70, 75
  %v2_12b80 = inttoptr i32 %v1_12b80 to i8*
  %v3_12b80 = load i8, i8* %v2_12b80, align 1
  %v4_12b80 = zext i8 %v3_12b80 to i32
  %v4_12b84 = mul nuw nsw i32 %v4_12b78, 65536
  %v5_12b84 = or i32 %v4_12b84, %v5_12b7c
  %v4_12b88 = mul nuw i32 %v4_12b80, 16777216
  %v5_12b88 = or i32 %v5_12b84, %v4_12b88
  store i32 %v5_12b88, i32* %r3.global-to-local, align 4
  %v1_12b8c = load i32, i32* %r7.global-to-local, align 4
  %v2_12b8c = add i32 %v1_12b8c, 72
  %v3_12b8c = inttoptr i32 %v2_12b8c to i32*
  store i32 %v5_12b88, i32* %v3_12b8c, align 4
  %v0_12b90 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b90 = add i32 %v0_12b90, 81
  %v2_12b90 = inttoptr i32 %v1_12b90 to i8*
  %v3_12b90 = load i8, i8* %v2_12b90, align 1
  %v4_12b90 = zext i8 %v3_12b90 to i32
  %v1_12b94 = add i32 %v0_12b90, 80
  %v2_12b94 = inttoptr i32 %v1_12b94 to i8*
  %v3_12b94 = load i8, i8* %v2_12b94, align 1
  %v4_12b94 = zext i8 %v3_12b94 to i32
  store i32 %v4_12b94, i32* %r3.global-to-local, align 4
  %v1_12b98 = add i32 %v0_12b90, 82
  %v2_12b98 = inttoptr i32 %v1_12b98 to i8*
  %v3_12b98 = load i8, i8* %v2_12b98, align 1
  %v4_12b98 = zext i8 %v3_12b98 to i32
  %v4_12b9c = mul nuw nsw i32 %v4_12b90, 256
  %v5_12b9c = or i32 %v4_12b94, %v4_12b9c
  store i32 %v5_12b9c, i32* %r3.global-to-local, align 4
  %v1_12ba0 = add i32 %v0_12b90, 83
  %v2_12ba0 = inttoptr i32 %v1_12ba0 to i8*
  %v3_12ba0 = load i8, i8* %v2_12ba0, align 1
  %v4_12ba0 = zext i8 %v3_12ba0 to i32
  %v4_12ba4 = mul nuw nsw i32 %v4_12b98, 65536
  %v5_12ba4 = or i32 %v4_12ba4, %v5_12b9c
  %v4_12ba8 = mul nuw i32 %v4_12ba0, 16777216
  %v5_12ba8 = or i32 %v5_12ba4, %v4_12ba8
  store i32 %v5_12ba8, i32* %r3.global-to-local, align 4
  %v1_12bac = load i32, i32* %r7.global-to-local, align 4
  %v2_12bac = add i32 %v1_12bac, 80
  %v3_12bac = inttoptr i32 %v2_12bac to i32*
  store i32 %v5_12ba8, i32* %v3_12bac, align 4
  %v0_12bb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bb0 = add i32 %v0_12bb0, 69
  %v2_12bb0 = inttoptr i32 %v1_12bb0 to i8*
  %v3_12bb0 = load i8, i8* %v2_12bb0, align 1
  %v4_12bb0 = zext i8 %v3_12bb0 to i32
  %v1_12bb4 = add i32 %v0_12bb0, 68
  %v2_12bb4 = inttoptr i32 %v1_12bb4 to i8*
  %v3_12bb4 = load i8, i8* %v2_12bb4, align 1
  %v4_12bb4 = zext i8 %v3_12bb4 to i32
  store i32 %v4_12bb4, i32* %r3.global-to-local, align 4
  %v1_12bb8 = add i32 %v0_12bb0, 70
  %v2_12bb8 = inttoptr i32 %v1_12bb8 to i8*
  %v3_12bb8 = load i8, i8* %v2_12bb8, align 1
  %v4_12bb8 = zext i8 %v3_12bb8 to i32
  %v4_12bbc = mul nuw nsw i32 %v4_12bb0, 256
  %v5_12bbc = or i32 %v4_12bb4, %v4_12bbc
  store i32 %v5_12bbc, i32* %r3.global-to-local, align 4
  %v1_12bc0 = add i32 %v0_12bb0, 71
  %v2_12bc0 = inttoptr i32 %v1_12bc0 to i8*
  %v3_12bc0 = load i8, i8* %v2_12bc0, align 1
  %v4_12bc0 = zext i8 %v3_12bc0 to i32
  %v4_12bc4 = mul nuw nsw i32 %v4_12bb8, 65536
  %v5_12bc4 = or i32 %v4_12bc4, %v5_12bbc
  %v4_12bc8 = mul nuw i32 %v4_12bc0, 16777216
  %v5_12bc8 = or i32 %v5_12bc4, %v4_12bc8
  store i32 %v5_12bc8, i32* %r3.global-to-local, align 4
  %v1_12bcc = load i32, i32* %r7.global-to-local, align 4
  %v2_12bcc = add i32 %v1_12bcc, 68
  %v3_12bcc = inttoptr i32 %v2_12bcc to i32*
  store i32 %v5_12bc8, i32* %v3_12bcc, align 4
  %v0_12bd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bd0 = add i32 %v0_12bd0, 77
  %v2_12bd0 = inttoptr i32 %v1_12bd0 to i8*
  %v3_12bd0 = load i8, i8* %v2_12bd0, align 1
  %v4_12bd0 = zext i8 %v3_12bd0 to i32
  %v1_12bd4 = add i32 %v0_12bd0, 76
  %v2_12bd4 = inttoptr i32 %v1_12bd4 to i8*
  %v3_12bd4 = load i8, i8* %v2_12bd4, align 1
  %v4_12bd4 = zext i8 %v3_12bd4 to i32
  store i32 %v4_12bd4, i32* %r3.global-to-local, align 4
  %v1_12bd8 = add i32 %v0_12bd0, 78
  %v2_12bd8 = inttoptr i32 %v1_12bd8 to i8*
  %v3_12bd8 = load i8, i8* %v2_12bd8, align 1
  %v4_12bd8 = zext i8 %v3_12bd8 to i32
  %v4_12bdc = mul nuw nsw i32 %v4_12bd0, 256
  %v5_12bdc = or i32 %v4_12bd4, %v4_12bdc
  store i32 %v5_12bdc, i32* %r3.global-to-local, align 4
  %v1_12be0 = add i32 %v0_12bd0, 79
  %v2_12be0 = inttoptr i32 %v1_12be0 to i8*
  %v3_12be0 = load i8, i8* %v2_12be0, align 1
  %v4_12be0 = zext i8 %v3_12be0 to i32
  %v4_12be4 = mul nuw nsw i32 %v4_12bd8, 65536
  %v5_12be4 = or i32 %v4_12be4, %v5_12bdc
  %v4_12be8 = mul nuw i32 %v4_12be0, 16777216
  %v5_12be8 = or i32 %v5_12be4, %v4_12be8
  store i32 %v5_12be8, i32* %r3.global-to-local, align 4
  %v1_12bec = load i32, i32* %r7.global-to-local, align 4
  %v2_12bec = add i32 %v1_12bec, 76
  %v3_12bec = inttoptr i32 %v2_12bec to i32*
  store i32 %v5_12be8, i32* %v3_12bec, align 4
  %v0_12bf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bf0 = add i32 %v0_12bf0, 85
  %v2_12bf0 = inttoptr i32 %v1_12bf0 to i8*
  %v3_12bf0 = load i8, i8* %v2_12bf0, align 1
  %v4_12bf0 = zext i8 %v3_12bf0 to i32
  %v1_12bf4 = add i32 %v0_12bf0, 84
  %v2_12bf4 = inttoptr i32 %v1_12bf4 to i8*
  %v3_12bf4 = load i8, i8* %v2_12bf4, align 1
  %v4_12bf4 = zext i8 %v3_12bf4 to i32
  store i32 %v4_12bf4, i32* %r3.global-to-local, align 4
  %v1_12bf8 = add i32 %v0_12bf0, 86
  %v2_12bf8 = inttoptr i32 %v1_12bf8 to i8*
  %v3_12bf8 = load i8, i8* %v2_12bf8, align 1
  %v4_12bf8 = zext i8 %v3_12bf8 to i32
  %v4_12bfc = mul nuw nsw i32 %v4_12bf0, 256
  %v5_12bfc = or i32 %v4_12bf4, %v4_12bfc
  store i32 %v5_12bfc, i32* %r3.global-to-local, align 4
  %v1_12c00 = add i32 %v0_12bf0, 87
  %v2_12c00 = inttoptr i32 %v1_12c00 to i8*
  %v3_12c00 = load i8, i8* %v2_12c00, align 1
  %v4_12c00 = zext i8 %v3_12c00 to i32
  %v4_12c04 = mul nuw nsw i32 %v4_12bf8, 65536
  %v5_12c04 = or i32 %v4_12c04, %v5_12bfc
  %v4_12c08 = mul nuw i32 %v4_12c00, 16777216
  %v5_12c08 = or i32 %v5_12c04, %v4_12c08
  store i32 %v5_12c08, i32* %r3.global-to-local, align 4
  %v1_12c0c = load i32, i32* %r7.global-to-local, align 4
  %v2_12c0c = add i32 %v1_12c0c, 84
  %v3_12c0c = inttoptr i32 %v2_12c0c to i32*
  store i32 %v5_12c08, i32* %v3_12c0c, align 4
  ret i32 %v4_12b10

; uselistorder directives
  uselistorder i32 %v4_12b10, { 1, 0 }
  uselistorder i32 %v0_12b04, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12a94, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12a44, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12964, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 58, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 2, 0, 3, 1 }
  uselistorder i32 29, { 1, 2, 3, 0 }
  uselistorder i32 26, { 2, 0, 1, 3 }
  uselistorder i32 25, { 4, 8, 9, 1, 0, 3, 5, 6, 7, 2 }
  uselistorder i32 23, { 5, 0, 6, 1, 7, 2, 8, 9, 10, 3, 12, 11, 4 }
  uselistorder i32 22, { 10, 1, 15, 2, 3, 4, 5, 0, 6, 11, 7, 12, 8, 13, 14, 9 }
  uselistorder i32 21, { 6, 1, 0, 7, 2, 8, 3, 9, 4, 10, 11, 12, 5 }
  uselistorder i32 19, { 12, 17, 18, 19, 4, 1, 5, 13, 6, 14, 7, 15, 0, 16, 2, 20, 21, 8, 22, 3, 23, 9, 24, 10, 25, 11 }
  uselistorder i32 18, { 7, 11, 12, 13, 2, 8, 3, 9, 4, 10, 6, 14, 5, 15, 0, 16, 1, 17 }
  uselistorder i32 17, { 15, 23, 0, 4, 24, 25, 5, 26, 27, 1, 21, 2, 6, 16, 7, 17, 8, 18, 22, 19, 20, 9, 28, 10, 29, 11, 30, 12, 31, 13, 32, 33, 3, 34, 35, 36, 14, 37, 38, 39, 40, 41 }
  uselistorder i32 6, { 27, 33, 14, 15, 74, 2, 30, 3, 16, 28, 0, 31, 17, 32, 29, 4, 18, 19, 20, 5, 21, 34, 35, 36, 6, 37, 38, 39, 40, 7, 41, 42, 43, 44, 8, 45, 9, 46, 47, 22, 48, 10, 49, 50, 51, 23, 52, 11, 53, 54, 55, 24, 56, 57, 58, 59, 60, 25, 61, 12, 62, 67, 68, 69, 70, 71, 26, 72, 13, 73, 1, 63, 64, 65, 66 }
}

define i32 @function_12c18(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c18:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12c18 = load i32, i32* @r4, align 4
  store i32 %v3_12c18, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_12c30 = inttoptr i32 %arg2 to i8*
  %v3_12c30 = call i32 @function_11290(i8* %v2_12c30, i32 0)
  store i32 %v3_12c30, i32* %r0.global-to-local, align 4
  %v0_12c34 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c34 = inttoptr i32 %v0_12c34 to i32*
  %v2_12c34 = load i32, i32* %v1_12c34, align 4
  store i32 %v2_12c34, i32* %r3.global-to-local, align 4
  %v1_12c38 = add i32 %v0_12c34, 4
  %v2_12c38 = inttoptr i32 %v1_12c38 to i32*
  %v3_12c38 = load i32, i32* %v2_12c38, align 4
  store i32 %v3_12c38, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_12c40 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c40 = inttoptr i32 %v0_12c40 to i32*
  store i32 %v2_12c34, i32* %v1_12c40, align 4
  %v3_12c40 = add i32 %v0_12c40, 4
  %v4_12c40 = inttoptr i32 %v3_12c40 to i32*
  %v5_12c40 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12c40, i32* %v4_12c40, align 4
  %v0_12c44 = load i32, i32* %r2.global-to-local, align 4
  %v1_12c44 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c44 = add i32 %v1_12c44, 12
  %v3_12c44 = inttoptr i32 %v2_12c44 to i32*
  store i32 %v0_12c44, i32* %v3_12c44, align 4
  %v0_12c48 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c48 = add i32 %v0_12c48, 9
  %v2_12c48 = inttoptr i32 %v1_12c48 to i8*
  %v3_12c48 = load i8, i8* %v2_12c48, align 1
  %v4_12c48 = zext i8 %v3_12c48 to i32
  store i32 %v4_12c48, i32* %r2.global-to-local, align 4
  %v1_12c4c = add i32 %v0_12c48, 8
  %v2_12c4c = inttoptr i32 %v1_12c4c to i8*
  %v3_12c4c = load i8, i8* %v2_12c4c, align 1
  %v4_12c4c = zext i8 %v3_12c4c to i32
  %v4_12c50 = mul nuw nsw i32 %v4_12c48, 256
  %v5_12c50 = or i32 %v4_12c4c, %v4_12c50
  store i32 %v5_12c50, i32* %r3.global-to-local, align 4
  %v1_12c54 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c54 = add i32 %v1_12c54, 16
  %v3_12c54 = inttoptr i32 %v2_12c54 to i32*
  store i32 %v5_12c50, i32* %v3_12c54, align 4
  %v0_12c58 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c58 = add i32 %v0_12c58, 11
  %v2_12c58 = inttoptr i32 %v1_12c58 to i8*
  %v3_12c58 = load i8, i8* %v2_12c58, align 1
  %v4_12c58 = zext i8 %v3_12c58 to i32
  store i32 %v4_12c58, i32* %r2.global-to-local, align 4
  %v1_12c5c = add i32 %v0_12c58, 10
  %v2_12c5c = inttoptr i32 %v1_12c5c to i8*
  %v3_12c5c = load i8, i8* %v2_12c5c, align 1
  %v4_12c5c = zext i8 %v3_12c5c to i32
  %v4_12c60 = mul nuw nsw i32 %v4_12c58, 256
  %v5_12c60 = or i32 %v4_12c5c, %v4_12c60
  store i32 %v5_12c60, i32* %r3.global-to-local, align 4
  %v1_12c64 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c64 = add i32 %v1_12c64, 20
  %v3_12c64 = inttoptr i32 %v2_12c64 to i32*
  store i32 %v5_12c60, i32* %v3_12c64, align 4
  %v0_12c68 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c68 = add i32 %v0_12c68, 13
  %v2_12c68 = inttoptr i32 %v1_12c68 to i8*
  %v3_12c68 = load i8, i8* %v2_12c68, align 1
  %v4_12c68 = zext i8 %v3_12c68 to i32
  store i32 %v4_12c68, i32* %r2.global-to-local, align 4
  %v1_12c6c = add i32 %v0_12c68, 12
  %v2_12c6c = inttoptr i32 %v1_12c6c to i8*
  %v3_12c6c = load i8, i8* %v2_12c6c, align 1
  %v4_12c6c = zext i8 %v3_12c6c to i32
  %v4_12c70 = mul nuw nsw i32 %v4_12c68, 256
  %v5_12c70 = or i32 %v4_12c6c, %v4_12c70
  store i32 %v5_12c70, i32* %r3.global-to-local, align 4
  %v1_12c74 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c74 = add i32 %v1_12c74, 24
  %v3_12c74 = inttoptr i32 %v2_12c74 to i32*
  store i32 %v5_12c70, i32* %v3_12c74, align 4
  %v0_12c78 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c78 = add i32 %v0_12c78, 20
  %v2_12c78 = inttoptr i32 %v1_12c78 to i32*
  %v3_12c78 = load i32, i32* %v2_12c78, align 4
  store i32 %v3_12c78, i32* %r3.global-to-local, align 4
  %v1_12c7c = add i32 %v0_12c78, 14
  %v2_12c7c = inttoptr i32 %v1_12c7c to i8*
  %v3_12c7c = load i8, i8* %v2_12c7c, align 1
  %v4_12c7c = zext i8 %v3_12c7c to i32
  store i32 %v4_12c7c, i32* %r0.global-to-local, align 4
  %v1_12c80 = add i32 %v0_12c78, 15
  %v2_12c80 = inttoptr i32 %v1_12c80 to i8*
  %v3_12c80 = load i8, i8* %v2_12c80, align 1
  %v4_12c80 = zext i8 %v3_12c80 to i32
  store i32 %v4_12c80, i32* %ip.global-to-local, align 4
  %v1_12c84 = add i32 %v0_12c78, 16
  %v2_12c84 = inttoptr i32 %v1_12c84 to i32*
  %v3_12c84 = load i32, i32* %v2_12c84, align 4
  store i32 %v3_12c84, i32* %r1.global-to-local, align 4
  %v1_12c88 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c88 = add i32 %v1_12c88, 44
  %v3_12c88 = inttoptr i32 %v2_12c88 to i32*
  store i32 %v3_12c78, i32* %v3_12c88, align 4
  %v0_12c8c = load i32, i32* %r5.global-to-local, align 4
  %v1_12c8c = add i32 %v0_12c8c, 24
  %v2_12c8c = inttoptr i32 %v1_12c8c to i32*
  %v3_12c8c = load i32, i32* %v2_12c8c, align 4
  store i32 %v3_12c8c, i32* %r3.global-to-local, align 4
  %v1_12c90 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c90 = add i32 %v1_12c90, 48
  %v3_12c90 = inttoptr i32 %v2_12c90 to i32*
  store i32 %v3_12c8c, i32* %v3_12c90, align 4
  %v0_12c94 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c94 = add i32 %v0_12c94, 28
  %v2_12c94 = inttoptr i32 %v1_12c94 to i32*
  %v3_12c94 = load i32, i32* %v2_12c94, align 4
  store i32 %v3_12c94, i32* %r3.global-to-local, align 4
  %v1_12c98 = load i32, i32* %r6.global-to-local, align 4
  %v2_12c98 = add i32 %v1_12c98, 52
  %v3_12c98 = inttoptr i32 %v2_12c98 to i32*
  store i32 %v3_12c94, i32* %v3_12c98, align 4
  %v0_12c9c = load i32, i32* %r5.global-to-local, align 4
  %v1_12c9c = add i32 %v0_12c9c, 32
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r3.global-to-local, align 4
  %v1_12ca0 = load i32, i32* %r6.global-to-local, align 4
  %v2_12ca0 = add i32 %v1_12ca0, 56
  %v3_12ca0 = inttoptr i32 %v2_12ca0 to i32*
  store i32 %v3_12c9c, i32* %v3_12ca0, align 4
  %v0_12ca4 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ca4 = add i32 %v0_12ca4, 40
  %v2_12ca4 = inttoptr i32 %v1_12ca4 to i32*
  %v3_12ca4 = load i32, i32* %v2_12ca4, align 4
  store i32 %v3_12ca4, i32* %r3.global-to-local, align 4
  %v1_12ca8 = load i32, i32* %r6.global-to-local, align 4
  %v2_12ca8 = add i32 %v1_12ca8, 64
  %v3_12ca8 = inttoptr i32 %v2_12ca8 to i32*
  store i32 %v3_12ca4, i32* %v3_12ca8, align 4
  %v0_12cac = load i32, i32* %r5.global-to-local, align 4
  %v1_12cac = add i32 %v0_12cac, 48
  %v2_12cac = inttoptr i32 %v1_12cac to i32*
  %v3_12cac = load i32, i32* %v2_12cac, align 4
  store i32 %v3_12cac, i32* %r3.global-to-local, align 4
  %v1_12cb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_12cb0 = add i32 %v1_12cb0, 72
  %v3_12cb0 = inttoptr i32 %v2_12cb0 to i32*
  store i32 %v3_12cac, i32* %v3_12cb0, align 4
  %v0_12cb4 = load i32, i32* %r5.global-to-local, align 4
  %v1_12cb4 = add i32 %v0_12cb4, 36
  %v2_12cb4 = inttoptr i32 %v1_12cb4 to i32*
  %v3_12cb4 = load i32, i32* %v2_12cb4, align 4
  store i32 %v3_12cb4, i32* %r3.global-to-local, align 4
  %v1_12cb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_12cb8 = add i32 %v1_12cb8, 60
  %v3_12cb8 = inttoptr i32 %v2_12cb8 to i32*
  store i32 %v3_12cb4, i32* %v3_12cb8, align 4
  %v0_12cbc = load i32, i32* %r5.global-to-local, align 4
  %v1_12cbc = add i32 %v0_12cbc, 44
  %v2_12cbc = inttoptr i32 %v1_12cbc to i32*
  %v3_12cbc = load i32, i32* %v2_12cbc, align 4
  store i32 %v3_12cbc, i32* %r3.global-to-local, align 4
  %v0_12cc0 = load i32, i32* %r0.global-to-local, align 4
  %v1_12cc0 = load i32, i32* %ip.global-to-local, align 4
  %v4_12cc0 = mul i32 %v1_12cc0, 256
  %v5_12cc0 = or i32 %v4_12cc0, %v0_12cc0
  store i32 %v5_12cc0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_12cc8 = load i32, i32* %r6.global-to-local, align 4
  %v2_12cc8 = add i32 %v1_12cc8, 28
  %v3_12cc8 = inttoptr i32 %v2_12cc8 to i32*
  store i32 %v5_12cc0, i32* %v3_12cc8, align 4
  %v0_12ccc = load i32, i32* %r1.global-to-local, align 4
  %v1_12ccc = load i32, i32* %r6.global-to-local, align 4
  %v2_12ccc = add i32 %v1_12ccc, 32
  %v3_12ccc = inttoptr i32 %v2_12ccc to i32*
  store i32 %v0_12ccc, i32* %v3_12ccc, align 4
  %v0_12cd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_12cd0 = add i32 %v1_12cd0, 36
  %v3_12cd0 = inttoptr i32 %v2_12cd0 to i32*
  store i32 %v0_12cd0, i32* %v3_12cd0, align 4
  %v0_12cd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_12cd4 = load i32, i32* %r6.global-to-local, align 4
  %v2_12cd4 = add i32 %v1_12cd4, 68
  %v3_12cd4 = inttoptr i32 %v2_12cd4 to i32*
  store i32 %v0_12cd4, i32* %v3_12cd4, align 4
  %v0_12cd8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12cd8 = add i32 %v0_12cd8, 52
  %v2_12cd8 = inttoptr i32 %v1_12cd8 to i32*
  %v3_12cd8 = load i32, i32* %v2_12cd8, align 4
  store i32 %v3_12cd8, i32* %r3.global-to-local, align 4
  %v1_12cdc = load i32, i32* %r6.global-to-local, align 4
  %v2_12cdc = add i32 %v1_12cdc, 76
  %v3_12cdc = inttoptr i32 %v2_12cdc to i32*
  store i32 %v3_12cd8, i32* %v3_12cdc, align 4
  %v2_12ce0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12ce0, i32* %r4.global-to-local, align 4
  ret i32 %v5_12cc0

; uselistorder directives
  uselistorder i32 %v0_12c78, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 11, 12, 1, 5, 43, 13, 15, 16, 0, 6, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 9, 26, 27, 28, 10, 29, 30, 31, 2, 32, 33, 34, 35, 36, 3, 37, 38, 39, 40, 41, 4, 42 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 15, { 18, 11, 10, 12, 2, 13, 3, 14, 4, 15, 5, 16, 6, 17, 7, 8, 0, 19, 20, 9, 21, 22, 23, 24, 1, 25 }
  uselistorder i32 14, { 10, 9, 18, 0, 1, 8, 4, 5, 6, 7, 11, 12, 2, 13, 14, 15, 16, 3, 17 }
  uselistorder i32 13, { 14, 9, 8, 10, 11, 12, 13, 0, 1, 5, 6, 7, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 27, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41 }
  uselistorder i32 9, { 35, 36, 37, 7, 4, 38, 8, 5, 31, 24, 10, 28, 11, 27, 9, 3, 32, 25, 33, 2, 26, 34, 6, 12, 29, 30, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 1, 22, 50, 39, 40, 23, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52 }
  uselistorder i32 (i8*, i32)* @function_11290, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_12cf0() local_unnamed_addr {
dec_label_pc_12cf0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12cf0 = load i32, i32* @r1, align 4
  %v1_12cf0 = load i32, i32* @r0, align 4
  %v2_12cf0 = sub i32 %v0_12cf0, %v1_12cf0
  %v3_12cf0 = icmp ult i32 %v0_12cf0, %v1_12cf0
  %v4_12cf0 = xor i32 %v1_12cf0, %v0_12cf0
  %v5_12cf0 = xor i32 %v2_12cf0, %v0_12cf0
  %v6_12cf0 = and i32 %v5_12cf0, %v4_12cf0
  %v7_12cf0 = icmp slt i32 %v6_12cf0, 0
  store i1 %v7_12cf0, i1* %cpsr_v.global-to-local, align 1
  %v8_12cf0 = icmp slt i32 %v2_12cf0, 0
  store i1 %v8_12cf0, i1* %cpsr_n.global-to-local, align 1
  %v9_12cf0 = icmp eq i32 %v0_12cf0, %v1_12cf0
  store i1 %v9_12cf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12cf0, label %dec_label_pc_12f3c, label %dec_label_pc_12cf8

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cf0
  br i1 %v9_12cf0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_12cf8
  %merge = phi i32 [ %v0_12cf0, %dec_label_pc_12cf8 ], [ %v2_12fd0, %bb141 ], [ %v11_12fec, %bb144 ], [ %v7_12fec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12cf8
  store i32 %v1_12cf0, i32* %stack_var_-8, align 4
  %v0_12d00 = load i32, i32* @r2, align 4
  %v2_12d00 = add i32 %v0_12d00, -4
  store i32 %v2_12d00, i32* %r2.global-to-local, align 4
  %v4_12d00 = sub i32 3, %v0_12d00
  %v5_12d00 = and i32 %v4_12d00, %v0_12d00
  %v6_12d00 = icmp slt i32 %v5_12d00, 0
  store i1 %v6_12d00, i1* %cpsr_v.global-to-local, align 1
  %v7_12d00 = icmp slt i32 %v2_12d00, 0
  store i1 %v7_12d00, i1* %cpsr_n.global-to-local, align 1
  %v8_12d00 = icmp eq i32 %v0_12d00, 4
  store i1 %v8_12d00, i1* %cpsr_z.global-to-local, align 1
  %v5_12d04 = icmp slt i32 %v0_12d00, 4
  br i1 %v5_12d04, label %bb131, label %dec_label_pc_12d08

dec_label_pc_12d08:                               ; preds = %bb
  %v1_12d08 = urem i32 %v1_12cf0, 4
  store i32 %v1_12d08, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12d08 = icmp eq i32 %v1_12d08, 0
  store i1 %v2_12d08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12d08, label %dec_label_pc_12d10, label %dec_label_pc_12db4

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12d08
  %v1_12d10 = urem i32 %v0_12cf0, 4
  store i32 %v1_12d10, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12d10 = icmp eq i32 %v1_12d10, 0
  store i1 %v2_12d10, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_12cf0 to i2
  br i1 %v2_12d10, label %dec_label_pc_12d18, label %dec_label_pc_12de4

dec_label_pc_12d18:                               ; preds = %dec_label_pc_12d10, %dec_label_pc_12ddc
  %v0_12d3092 = phi i32 [ %v1_12cf0, %dec_label_pc_12d10 ], [ %v0_12e2c75, %dec_label_pc_12ddc ]
  %v0_12d2c91 = phi i32 [ %v0_12cf0, %dec_label_pc_12d10 ], [ %v0_12ddc, %dec_label_pc_12ddc ]
  %v0_12d18 = phi i32 [ %v2_12d00, %dec_label_pc_12d10 ], [ %v2_12dd4, %dec_label_pc_12ddc ]
  %v2_12d18 = add i32 %v0_12d18, -8
  store i32 %v2_12d18, i32* %r2.global-to-local, align 4
  %v4_12d18 = sub i32 7, %v0_12d18
  %v5_12d18 = and i32 %v4_12d18, %v0_12d18
  %v6_12d18 = icmp slt i32 %v5_12d18, 0
  store i1 %v6_12d18, i1* %cpsr_v.global-to-local, align 1
  %v7_12d18 = icmp slt i32 %v2_12d18, 0
  store i1 %v7_12d18, i1* %cpsr_n.global-to-local, align 1
  %v8_12d18 = icmp eq i32 %v0_12d18, 8
  store i1 %v8_12d18, i1* %cpsr_z.global-to-local, align 1
  %v5_12d1c = icmp slt i32 %v0_12d18, 8
  br i1 %v5_12d1c, label %dec_label_pc_12d6c, label %dec_label_pc_12d20

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12d18
  %v2_12d20 = add i32 %v0_12d18, -28
  store i32 %v2_12d20, i32* %r2.global-to-local, align 4
  %v4_12d20 = sub i32 27, %v0_12d18
  %v5_12d20 = and i32 %v4_12d20, %v2_12d18
  %v6_12d20 = icmp slt i32 %v5_12d20, 0
  store i1 %v6_12d20, i1* %cpsr_v.global-to-local, align 1
  %v7_12d20 = icmp slt i32 %v2_12d20, 0
  store i1 %v7_12d20, i1* %cpsr_n.global-to-local, align 1
  %v8_12d20 = icmp eq i32 %v2_12d18, 20
  store i1 %v8_12d20, i1* %cpsr_z.global-to-local, align 1
  %v5_12d24 = icmp slt i32 %v2_12d18, 20
  br i1 %v5_12d24, label %dec_label_pc_12d58, label %dec_label_pc_12d28

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12d20
  %v0_12d28 = load i32, i32* @r4, align 4
  store i32 %v0_12d28, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12d2c

dec_label_pc_12d2c:                               ; preds = %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge, %dec_label_pc_12d28
  %v0_12d30 = phi i32 [ %v12_12d38, %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge ], [ %v0_12d3092, %dec_label_pc_12d28 ]
  %v0_12d2c = phi i32 [ %v0_12d2c.pre, %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge ], [ %v0_12d2c91, %dec_label_pc_12d28 ]
  %v1_12d2c = inttoptr i32 %v0_12d2c to i32*
  %v2_12d2c = load i32, i32* %v1_12d2c, align 4
  store i32 %v2_12d2c, i32* %r3.global-to-local, align 4
  %v3_12d2c = add i32 %v0_12d2c, 4
  %v4_12d2c = inttoptr i32 %v3_12d2c to i32*
  %v5_12d2c = load i32, i32* %v4_12d2c, align 4
  store i32 %v5_12d2c, i32* %r4.global-to-local, align 4
  %v6_12d2c = add i32 %v0_12d2c, 8
  %v7_12d2c = inttoptr i32 %v6_12d2c to i32*
  %v8_12d2c = load i32, i32* %v7_12d2c, align 4
  store i32 %v8_12d2c, i32* %ip.global-to-local, align 4
  %v9_12d2c = add i32 %v0_12d2c, 12
  %v10_12d2c = inttoptr i32 %v9_12d2c to i32*
  %v11_12d2c = load i32, i32* %v10_12d2c, align 4
  store i32 %v11_12d2c, i32* %lr.global-to-local, align 4
  %v12_12d2c = add i32 %v0_12d2c, 16
  store i32 %v12_12d2c, i32* %r1.global-to-local, align 4
  %v1_12d30 = inttoptr i32 %v0_12d30 to i32*
  store i32 %v2_12d2c, i32* %v1_12d30, align 4
  %v3_12d30 = add i32 %v0_12d30, 4
  %v4_12d30 = inttoptr i32 %v3_12d30 to i32*
  %v5_12d30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12d30, i32* %v4_12d30, align 4
  %v6_12d30 = add i32 %v0_12d30, 8
  %v7_12d30 = inttoptr i32 %v6_12d30 to i32*
  %v8_12d30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12d30, i32* %v7_12d30, align 4
  %v9_12d30 = add i32 %v0_12d30, 12
  %v10_12d30 = inttoptr i32 %v9_12d30 to i32*
  %v11_12d30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_12d30, i32* %v10_12d30, align 4
  %v12_12d30 = add i32 %v0_12d30, 16
  store i32 %v12_12d30, i32* %r0.global-to-local, align 4
  %v0_12d34 = load i32, i32* %r1.global-to-local, align 4
  %v1_12d34 = inttoptr i32 %v0_12d34 to i32*
  %v2_12d34 = load i32, i32* %v1_12d34, align 4
  store i32 %v2_12d34, i32* %r3.global-to-local, align 4
  %v3_12d34 = add i32 %v0_12d34, 4
  %v4_12d34 = inttoptr i32 %v3_12d34 to i32*
  %v5_12d34 = load i32, i32* %v4_12d34, align 4
  store i32 %v5_12d34, i32* %r4.global-to-local, align 4
  %v6_12d34 = add i32 %v0_12d34, 8
  %v7_12d34 = inttoptr i32 %v6_12d34 to i32*
  %v8_12d34 = load i32, i32* %v7_12d34, align 4
  store i32 %v8_12d34, i32* %ip.global-to-local, align 4
  %v9_12d34 = add i32 %v0_12d34, 12
  %v10_12d34 = inttoptr i32 %v9_12d34 to i32*
  %v11_12d34 = load i32, i32* %v10_12d34, align 4
  store i32 %v11_12d34, i32* @lr, align 4
  %v12_12d34 = add i32 %v0_12d34, 16
  store i32 %v12_12d34, i32* @r1, align 4
  %v1_12d38 = inttoptr i32 %v12_12d30 to i32*
  store i32 %v2_12d34, i32* %v1_12d38, align 4
  %v3_12d38 = add i32 %v0_12d30, 20
  %v4_12d38 = inttoptr i32 %v3_12d38 to i32*
  %v5_12d38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12d38, i32* %v4_12d38, align 4
  %v6_12d38 = add i32 %v0_12d30, 24
  %v7_12d38 = inttoptr i32 %v6_12d38 to i32*
  %v8_12d38 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12d38, i32* %v7_12d38, align 4
  %v9_12d38 = add i32 %v0_12d30, 28
  %v10_12d38 = inttoptr i32 %v9_12d38 to i32*
  %v11_12d38 = load i32, i32* @lr, align 4
  store i32 %v11_12d38, i32* %v10_12d38, align 4
  %v12_12d38 = add i32 %v0_12d30, 32
  store i32 %v12_12d38, i32* @r0, align 4
  %v0_12d3c = load i32, i32* %r2.global-to-local, align 4
  %v2_12d3c = add i32 %v0_12d3c, -32
  store i32 %v2_12d3c, i32* %r2.global-to-local, align 4
  %v6_12d40 = icmp slt i32 %v0_12d3c, 32
  br i1 %v6_12d40, label %dec_label_pc_12d44, label %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge

dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge:  ; preds = %dec_label_pc_12d2c
  %v0_12d2c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12d2c

dec_label_pc_12d44:                               ; preds = %dec_label_pc_12d2c
  %v4_12d44 = add i32 %v0_12d3c, -16
  %v6_12d44 = add i32 %v0_12d3c, 2147483616
  %v7_12d44 = and i32 %v4_12d44, %v6_12d44
  %v8_12d44 = icmp slt i32 %v7_12d44, 0
  store i1 %v8_12d44, i1* %cpsr_v.global-to-local, align 1
  %v9_12d44 = icmp slt i32 %v4_12d44, 0
  store i1 %v9_12d44, i1* %cpsr_n.global-to-local, align 1
  %v10_12d44 = icmp eq i32 %v4_12d44, 0
  store i1 %v10_12d44, i1* %cpsr_z.global-to-local, align 1
  %v5_12d48 = icmp slt i32 %v2_12d3c, -16
  br i1 %v5_12d48, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_12d44
  %v6_12d48 = load i32, i32* @r1, align 4
  %v7_12d48 = inttoptr i32 %v6_12d48 to i32*
  %v8_12d48 = load i32, i32* %v7_12d48, align 4
  store i32 %v8_12d48, i32* %r3.global-to-local, align 4
  %v9_12d48 = add i32 %v6_12d48, 4
  %v10_12d48 = inttoptr i32 %v9_12d48 to i32*
  %v11_12d48 = load i32, i32* %v10_12d48, align 4
  store i32 %v11_12d48, i32* %r4.global-to-local, align 4
  %v12_12d48 = add i32 %v6_12d48, 8
  %v13_12d48 = inttoptr i32 %v12_12d48 to i32*
  %v14_12d48 = load i32, i32* %v13_12d48, align 4
  store i32 %v14_12d48, i32* %ip.global-to-local, align 4
  %v15_12d48 = add i32 %v6_12d48, 12
  %v16_12d48 = inttoptr i32 %v15_12d48 to i32*
  %v17_12d48 = load i32, i32* %v16_12d48, align 4
  store i32 %v17_12d48, i32* @lr, align 4
  %v18_12d48 = add i32 %v6_12d48, 16
  store i32 %v18_12d48, i32* @r1, align 4
  %v7_12d4c = inttoptr i32 %v12_12d38 to i32*
  store i32 %v8_12d48, i32* %v7_12d4c, align 4
  %v9_12d4c = add i32 %v0_12d30, 36
  %v10_12d4c = inttoptr i32 %v9_12d4c to i32*
  %v11_12d4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_12d4c, i32* %v10_12d4c, align 4
  %v12_12d4c = add i32 %v0_12d30, 40
  %v13_12d4c = inttoptr i32 %v12_12d4c to i32*
  %v14_12d4c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_12d4c, i32* %v13_12d4c, align 4
  %v15_12d4c = add i32 %v0_12d30, 44
  %v16_12d4c = inttoptr i32 %v15_12d4c to i32*
  %v17_12d4c = load i32, i32* @lr, align 4
  store i32 %v17_12d4c, i32* %v16_12d4c, align 4
  %v18_12d4c = add i32 %v0_12d30, 48
  store i32 %v18_12d4c, i32* @r0, align 4
  %v6_12d50 = load i32, i32* %r2.global-to-local, align 4
  %v7_12d50 = add i32 %v6_12d50, -16
  store i32 %v7_12d50, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12d44, %bb128
  %v3_12d60101 = phi i32 [ %v12_12d38, %dec_label_pc_12d44 ], [ %v18_12d4c, %bb128 ]
  %v0_12d5895 = phi i32 [ %v2_12d3c, %dec_label_pc_12d44 ], [ %v7_12d50, %bb128 ]
  %v2_12d54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12d54, i32* @r4, align 4
  br label %dec_label_pc_12d58

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d20, %.thread1
  %v3_12d60100 = phi i32 [ %v0_12d3092, %dec_label_pc_12d20 ], [ %v3_12d60101, %.thread1 ]
  %v0_12d58 = phi i32 [ %v2_12d20, %dec_label_pc_12d20 ], [ %v0_12d5895, %.thread1 ]
  %v1_12d58 = add i32 %v0_12d58, 20
  store i32 %v1_12d58, i32* %r2.global-to-local, align 4
  %v3_12d58 = sub i32 0, %v0_12d58
  %v4_12d58 = and i32 %v1_12d58, %v3_12d58
  %v5_12d58 = icmp slt i32 %v4_12d58, 0
  store i1 %v5_12d58, i1* %cpsr_v.global-to-local, align 1
  %v6_12d58 = icmp slt i32 %v1_12d58, 0
  store i1 %v6_12d58, i1* %cpsr_n.global-to-local, align 1
  %v7_12d58 = icmp eq i32 %v1_12d58, 0
  store i1 %v7_12d58, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12d5c

dec_label_pc_12d5c:                               ; preds = %.thread117, %dec_label_pc_12d58
  %v0_12d6c.pre147 = phi i32 [ %v0_12d6c.pre, %.thread117 ], [ %v1_12d58, %dec_label_pc_12d58 ]
  %v3_12d60 = phi i32 [ %v3_12d6098118, %.thread117 ], [ %v3_12d60100, %dec_label_pc_12d58 ]
  %v1_12d64 = phi i1 [ %v1_12d68, %.thread117 ], [ %v5_12d58, %dec_label_pc_12d58 ]
  %v0_12d64 = phi i1 [ %v0_12d68, %.thread117 ], [ %v6_12d58, %dec_label_pc_12d58 ]
  %v2_12d5c = xor i1 %v1_12d64, %v0_12d64
  br i1 %v2_12d5c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_12d5c
  %v3_12d5c = load i32, i32* @r1, align 4
  %v4_12d5c = inttoptr i32 %v3_12d5c to i32*
  %v5_12d5c = load i32, i32* %v4_12d5c, align 4
  store i32 %v5_12d5c, i32* %r3.global-to-local, align 4
  %v6_12d5c = add i32 %v3_12d5c, 4
  %v7_12d5c = inttoptr i32 %v6_12d5c to i32*
  %v8_12d5c = load i32, i32* %v7_12d5c, align 4
  store i32 %v8_12d5c, i32* %ip.global-to-local, align 4
  %v9_12d5c = add i32 %v3_12d5c, 8
  %v10_12d5c = inttoptr i32 %v9_12d5c to i32*
  %v11_12d5c = load i32, i32* %v10_12d5c, align 4
  store i32 %v11_12d5c, i32* @lr, align 4
  %v12_12d5c = add i32 %v3_12d5c, 12
  store i32 %v12_12d5c, i32* @r1, align 4
  %v4_12d60 = inttoptr i32 %v3_12d60 to i32*
  store i32 %v5_12d5c, i32* %v4_12d60, align 4
  %v6_12d60 = add i32 %v3_12d60, 4
  %v7_12d60 = inttoptr i32 %v6_12d60 to i32*
  %v8_12d60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12d60, i32* %v7_12d60, align 4
  %v9_12d60 = add i32 %v3_12d60, 8
  %v10_12d60 = inttoptr i32 %v9_12d60 to i32*
  %v11_12d60 = load i32, i32* @lr, align 4
  store i32 %v11_12d60, i32* %v10_12d60, align 4
  %v12_12d60 = add i32 %v3_12d60, 12
  store i32 %v12_12d60, i32* @r0, align 4
  %v3_12d64 = load i32, i32* %r2.global-to-local, align 4
  %v4_12d64 = add i32 %v3_12d64, -12
  store i32 %v4_12d64, i32* %r2.global-to-local, align 4
  %v6_12d64 = sub i32 11, %v3_12d64
  %v7_12d64 = and i32 %v6_12d64, %v3_12d64
  %v8_12d64 = icmp slt i32 %v7_12d64, 0
  store i1 %v8_12d64, i1* %cpsr_v.global-to-local, align 1
  %v9_12d64 = icmp slt i32 %v4_12d64, 0
  store i1 %v9_12d64, i1* %cpsr_n.global-to-local, align 1
  %v10_12d64 = icmp eq i32 %v3_12d64, 12
  store i1 %v10_12d64, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_12d5c, %bb129
  %v0_12d6c.pre = phi i32 [ %v4_12d64, %bb129 ], [ %v0_12d6c.pre147, %dec_label_pc_12d5c ]
  %v3_12d6098118 = phi i32 [ %v12_12d60, %bb129 ], [ %v3_12d60, %dec_label_pc_12d5c ]
  %v1_12d68 = phi i1 [ %v8_12d64, %bb129 ], [ %v1_12d64, %dec_label_pc_12d5c ]
  %v0_12d68 = phi i1 [ %v9_12d64, %bb129 ], [ %v0_12d64, %dec_label_pc_12d5c ]
  %v2_12d68 = xor i1 %v1_12d68, %v0_12d68
  br i1 %v2_12d68, label %dec_label_pc_12d6c, label %dec_label_pc_12d5c

dec_label_pc_12d6c:                               ; preds = %.thread117, %dec_label_pc_12d18
  %v7_12d7c = phi i32 [ %v0_12d3092, %dec_label_pc_12d18 ], [ %v3_12d6098118, %.thread117 ]
  %v0_12d6c = phi i32 [ %v2_12d18, %dec_label_pc_12d18 ], [ %v0_12d6c.pre, %.thread117 ]
  %v2_12d6c = add i32 %v0_12d6c, 8
  store i32 %v2_12d6c, i32* %r2.global-to-local, align 4
  %v4_12d6c = sub i32 0, %v0_12d6c
  %v5_12d6c = and i32 %v2_12d6c, %v4_12d6c
  %v6_12d6c = icmp slt i32 %v5_12d6c, 0
  store i1 %v6_12d6c, i1* %cpsr_v.global-to-local, align 1
  %v7_12d6c = icmp slt i32 %v2_12d6c, 0
  store i1 %v7_12d6c, i1* %cpsr_n.global-to-local, align 1
  %v8_12d6c = icmp eq i32 %v2_12d6c, 0
  store i1 %v8_12d6c, i1* %cpsr_z.global-to-local, align 1
  %v5_12d70 = icmp slt i32 %v0_12d6c, -8
  br i1 %v5_12d70, label %bb131, label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d6c
  %v6_12d74 = add i32 %v0_12d6c, 4
  store i32 %v6_12d74, i32* %r2.global-to-local, align 4
  %v8_12d74 = sub i32 -5, %v0_12d6c
  %v9_12d74 = and i32 %v8_12d74, %v2_12d6c
  %v10_12d74 = icmp slt i32 %v9_12d74, 0
  store i1 %v10_12d74, i1* %cpsr_v.global-to-local, align 1
  %v11_12d74 = icmp slt i32 %v6_12d74, 0
  store i1 %v11_12d74, i1* %cpsr_n.global-to-local, align 1
  %v12_12d74 = icmp eq i32 %v2_12d6c, 4
  store i1 %v12_12d74, i1* %cpsr_z.global-to-local, align 1
  %v5_12d78 = icmp slt i32 %v2_12d6c, 4
  %v6_12d78 = load i32, i32* @r1, align 4
  %v7_12d78 = inttoptr i32 %v6_12d78 to i32*
  %v8_12d78 = load i32, i32* %v7_12d78, align 4
  store i32 %v8_12d78, i32* %r3.global-to-local, align 4
  %v10_12d78 = add i32 %v6_12d78, 4
  br i1 %v5_12d78, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_12d74
  store i32 %v10_12d78, i32* @r1, align 4
  %v8_12d7c = inttoptr i32 %v7_12d7c to i32*
  store i32 %v8_12d78, i32* %v8_12d7c, align 4
  %v9_12d7c = load i32, i32* @r0, align 4
  %v10_12d7c = add i32 %v9_12d7c, 4
  store i32 %v10_12d7c, i32* @r0, align 4
  %v0_12d8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_12d74
  %v10_12d80 = inttoptr i32 %v10_12d78 to i32*
  %v11_12d80 = load i32, i32* %v10_12d80, align 4
  store i32 %v11_12d80, i32* %ip.global-to-local, align 4
  %v12_12d80 = add i32 %v6_12d78, 8
  store i32 %v12_12d80, i32* @r1, align 4
  %v7_12d84 = inttoptr i32 %v7_12d7c to i32*
  store i32 %v8_12d78, i32* %v7_12d84, align 4
  %v9_12d84 = add i32 %v7_12d7c, 4
  %v10_12d84 = inttoptr i32 %v9_12d84 to i32*
  %v11_12d84 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12d84, i32* %v10_12d84, align 4
  %v12_12d84 = add i32 %v7_12d7c, 8
  store i32 %v12_12d84, i32* @r0, align 4
  %v6_12d88 = load i32, i32* %r2.global-to-local, align 4
  %v7_12d88 = add i32 %v6_12d88, -4
  store i32 %v7_12d88, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_12d6c, %bb, %dec_label_pc_12f34, %dec_label_pc_12ec8, %dec_label_pc_12e5c, %bb130
  %v2_12d9c = phi i32 [ %v10_12d7c, %.thread5 ], [ %v0_12e2c75, %.thread11 ], [ %v7_12d7c, %dec_label_pc_12d6c ], [ %v1_12cf0, %bb ], [ %v2_12d9c113, %dec_label_pc_12f34 ], [ %v2_12d9c112, %dec_label_pc_12ec8 ], [ %v2_12d9c111, %dec_label_pc_12e5c ], [ %v12_12d84, %bb130 ]
  %v0_12d8c = phi i32 [ %v0_12d8c.pre, %.thread5 ], [ %v2_12dd4, %.thread11 ], [ %v2_12d6c, %dec_label_pc_12d6c ], [ %v2_12d00, %bb ], [ %v0_12d8c109, %dec_label_pc_12f34 ], [ %v0_12d8c108, %dec_label_pc_12ec8 ], [ %v0_12d8c107, %dec_label_pc_12e5c ], [ %v7_12d88, %bb130 ]
  %v1_12d8c = add i32 %v0_12d8c, 4
  store i32 %v1_12d8c, i32* %r2.global-to-local, align 4
  %v3_12d8c = sub i32 0, %v0_12d8c
  %v4_12d8c = and i32 %v1_12d8c, %v3_12d8c
  %v5_12d8c = icmp slt i32 %v4_12d8c, 0
  store i1 %v5_12d8c, i1* %cpsr_v.global-to-local, align 1
  %v6_12d8c = icmp slt i32 %v1_12d8c, 0
  store i1 %v6_12d8c, i1* %cpsr_n.global-to-local, align 1
  %v7_12d8c = icmp eq i32 %v1_12d8c, 0
  store i1 %v7_12d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12d8c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_12d90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_12d90, i32* %r0.global-to-local, align 4
  ret i32 %v3_12d90

bb133:                                            ; preds = %bb131
  %v1_12d94 = add i32 %v0_12d8c, 2
  %v3_12d94 = sub i32 -3, %v0_12d8c
  %v4_12d94 = and i32 %v3_12d94, %v1_12d8c
  %v5_12d94 = icmp slt i32 %v4_12d94, 0
  store i1 %v5_12d94, i1* %cpsr_v.global-to-local, align 1
  %v6_12d94 = icmp slt i32 %v1_12d94, 0
  store i1 %v6_12d94, i1* %cpsr_n.global-to-local, align 1
  %v7_12d94 = icmp eq i32 %v1_12d8c, 2
  store i1 %v7_12d94, i1* %cpsr_z.global-to-local, align 1
  %v0_12d98 = load i32, i32* @r1, align 4
  %v1_12d98 = inttoptr i32 %v0_12d98 to i8*
  %v2_12d98 = load i8, i8* %v1_12d98, align 1
  %v3_12d98 = zext i8 %v2_12d98 to i32
  store i32 %v3_12d98, i32* %r3.global-to-local, align 4
  %v5_12d98 = add i32 %v0_12d98, 1
  store i32 %v5_12d98, i32* %r1.global-to-local, align 4
  %v3_12d9c = inttoptr i32 %v2_12d9c to i8*
  store i8 %v2_12d98, i8* %v3_12d9c, align 1
  %v4_12d9c = load i32, i32* @r0, align 4
  %v5_12d9c = add i32 %v4_12d9c, 1
  store i32 %v5_12d9c, i32* %r0.global-to-local, align 4
  %v0_12da0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12da0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12da0 = xor i1 %v0_12da0, %v1_12da0
  br i1 %v2_12da0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_12da0 = load i32, i32* %r1.global-to-local, align 4
  %v4_12da0 = inttoptr i32 %v3_12da0 to i8*
  %v5_12da0 = load i8, i8* %v4_12da0, align 1
  %v6_12da0 = zext i8 %v5_12da0 to i32
  store i32 %v6_12da0, i32* %r3.global-to-local, align 4
  %v8_12da0 = add i32 %v3_12da0, 1
  store i32 %v8_12da0, i32* %r1.global-to-local, align 4
  %v6_12da4 = inttoptr i32 %v5_12d9c to i8*
  store i8 %v5_12da0, i8* %v6_12da4, align 1
  %v7_12da4 = load i32, i32* %r0.global-to-local, align 4
  %v8_12da4 = add i32 %v7_12da4, 1
  store i32 %v8_12da4, i32* %r0.global-to-local, align 4
  %v1_12da8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12da8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_12dac = phi i32 [ %v8_12da4, %bb134 ], [ %v5_12d9c, %bb133 ]
  %v2_12dac = phi i1 [ %v2_12da8.pre, %bb134 ], [ %v1_12da0, %bb133 ]
  %v1_12dac = phi i1 [ %v1_12da8.pre, %bb134 ], [ %v0_12da0, %bb133 ]
  %v0_12da8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12da8 = xor i1 %v2_12dac, %v1_12dac
  %v4_12da8 = or i1 %v0_12da8, %v3_12da8
  br i1 %v4_12da8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_12da8 = load i32, i32* %r1.global-to-local, align 4
  %v6_12da8 = inttoptr i32 %v5_12da8 to i8*
  %v7_12da8 = load i8, i8* %v6_12da8, align 1
  %v8_12da8 = zext i8 %v7_12da8 to i32
  store i32 %v8_12da8, i32* %r3.global-to-local, align 4
  %v10_12da8 = add i32 %v5_12da8, 1
  store i32 %v10_12da8, i32* %r1.global-to-local, align 4
  %v8_12dac = inttoptr i32 %v7_12dac to i8*
  store i8 %v7_12da8, i8* %v8_12dac, align 1
  %v9_12dac = load i32, i32* %r0.global-to-local, align 4
  %v10_12dac = add i32 %v9_12dac, 1
  store i32 %v10_12dac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_12db0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12db0, i32* %r0.global-to-local, align 4
  ret i32 %v2_12db0

dec_label_pc_12db4:                               ; preds = %dec_label_pc_12d08
  %v1_12db4 = sub nsw i32 4, %v1_12d08
  store i32 %v1_12db4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12db8 = icmp ult i32 %v1_12db4, 2
  store i1 %v8_12db8, i1* %cpsr_n.global-to-local, align 1
  %v9_12db8 = icmp eq i32 %v1_12db4, 2
  store i1 %v9_12db8, i1* %cpsr_z.global-to-local, align 1
  %v1_12dbc = inttoptr i32 %v0_12cf0 to i8*
  %v2_12dbc = load i8, i8* %v1_12dbc, align 1
  %v3_12dbc = zext i8 %v2_12dbc to i32
  store i32 %v3_12dbc, i32* %r3.global-to-local, align 4
  %v5_12dbc = add i32 %v0_12cf0, 1
  store i32 %v5_12dbc, i32* @r1, align 4
  %v3_12dc0 = inttoptr i32 %v1_12cf0 to i8*
  store i8 %v2_12dbc, i8* %v3_12dc0, align 1
  %v4_12dc0 = load i32, i32* @r0, align 4
  %v5_12dc0 = add i32 %v4_12dc0, 1
  store i32 %v5_12dc0, i32* @r0, align 4
  br i1 %v8_12db8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_12db4
  %v6_12dc4 = load i32, i32* @r1, align 4
  %v7_12dc4 = inttoptr i32 %v6_12dc4 to i8*
  %v8_12dc4 = load i8, i8* %v7_12dc4, align 1
  %v9_12dc4 = zext i8 %v8_12dc4 to i32
  store i32 %v9_12dc4, i32* %r3.global-to-local, align 4
  %v11_12dc4 = add i32 %v6_12dc4, 1
  store i32 %v11_12dc4, i32* @r1, align 4
  %v9_12dc8 = inttoptr i32 %v5_12dc0 to i8*
  store i8 %v8_12dc4, i8* %v9_12dc8, align 1
  %v10_12dc8 = load i32, i32* @r0, align 4
  %v11_12dc8 = add i32 %v10_12dc8, 1
  store i32 %v11_12dc8, i32* @r0, align 4
  br i1 %v9_12db8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_12dcc = load i32, i32* @r1, align 4
  %v9_12dcc = inttoptr i32 %v8_12dcc to i8*
  %v10_12dcc = load i8, i8* %v9_12dcc, align 1
  %v11_12dcc = zext i8 %v10_12dcc to i32
  store i32 %v11_12dcc, i32* %r3.global-to-local, align 4
  %v13_12dcc = add i32 %v8_12dcc, 1
  store i32 %v13_12dcc, i32* @r1, align 4
  %v11_12dd0 = inttoptr i32 %v11_12dc8 to i8*
  store i8 %v10_12dcc, i8* %v11_12dd0, align 1
  %v12_12dd0 = load i32, i32* @r0, align 4
  %v13_12dd0 = add i32 %v12_12dd0, 1
  store i32 %v13_12dd0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_12db4, %bb137
  %v0_12e2c75 = phi i32 [ %v11_12dc8, %bb136 ], [ %v5_12dc0, %dec_label_pc_12db4 ], [ %v13_12dd0, %bb137 ]
  %v0_12dd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12dd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_12dd4 = sub i32 %v0_12dd4, %v1_12dd4
  store i32 %v2_12dd4, i32* %r2.global-to-local, align 4
  %v4_12dd4 = xor i32 %v1_12dd4, %v0_12dd4
  %v5_12dd4 = xor i32 %v2_12dd4, %v0_12dd4
  %v6_12dd4 = and i32 %v5_12dd4, %v4_12dd4
  %v7_12dd4 = icmp slt i32 %v6_12dd4, 0
  store i1 %v7_12dd4, i1* %cpsr_v.global-to-local, align 1
  %v8_12dd4 = icmp slt i32 %v2_12dd4, 0
  store i1 %v8_12dd4, i1* %cpsr_n.global-to-local, align 1
  %v9_12dd4 = icmp eq i32 %v0_12dd4, %v1_12dd4
  store i1 %v9_12dd4, i1* %cpsr_z.global-to-local, align 1
  %v5_12dd8 = icmp slt i32 %v0_12dd4, %v1_12dd4
  br i1 %v5_12dd8, label %bb131, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %.thread11
  %v0_12ddc = load i32, i32* @r1, align 4
  %v1_12ddc = urem i32 %v0_12ddc, 4
  store i32 %v1_12ddc, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12ddc = icmp eq i32 %v1_12ddc, 0
  store i1 %v2_12ddc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_12ddc to i2
  br i1 %v2_12ddc, label %dec_label_pc_12d18, label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12d10, %dec_label_pc_12ddc
  %v0_12e2c74 = phi i32 [ %v1_12cf0, %dec_label_pc_12d10 ], [ %v0_12e2c75, %dec_label_pc_12ddc ]
  %v0_12ed8 = phi i32 [ %v2_12d00, %dec_label_pc_12d10 ], [ %v2_12dd4, %dec_label_pc_12ddc ]
  %v0_12dec.off0 = phi i2 [ %extract.t, %dec_label_pc_12d10 ], [ %extract.t123, %dec_label_pc_12ddc ]
  %v0_12de4 = phi i32 [ %v0_12cf0, %dec_label_pc_12d10 ], [ %v0_12ddc, %dec_label_pc_12ddc ]
  %v1_12de4 = and i32 %v0_12de4, -4
  store i32 %v1_12de4, i32* %r1.global-to-local, align 4
  %v1_12de8 = inttoptr i32 %v1_12de4 to i32*
  %v2_12de8 = load i32, i32* %v1_12de8, align 4
  store i32 %v2_12de8, i32* @lr, align 4
  %v4_12de8 = add i32 %v1_12de4, 4
  store i32 %v4_12de8, i32* %r1.global-to-local, align 4
  %v2_12ed0 = add i32 %v0_12ed8, -12
  %v4_12ed0 = sub i32 11, %v0_12ed8
  %v5_12ed0 = and i32 %v4_12ed0, %v0_12ed8
  %v6_12ed0 = icmp slt i32 %v5_12ed0, 0
  store i1 %v6_12ed0, i1* %cpsr_v.global-to-local, align 1
  %v7_12ed0 = icmp slt i32 %v2_12ed0, 0
  store i1 %v7_12ed0, i1* %cpsr_n.global-to-local, align 1
  %v8_12ed0 = icmp eq i32 %v0_12ed8, 12
  store i1 %v8_12ed0, i1* %cpsr_z.global-to-local, align 1
  %v5_12ed4 = icmp slt i32 %v0_12ed8, 12
  switch i2 %v0_12dec.off0, label %dec_label_pc_12df8 [
    i2 -1, label %dec_label_pc_12ed0
    i2 -2, label %dec_label_pc_12e64
  ]

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de4
  br i1 %v5_12ed4, label %dec_label_pc_12e44, label %dec_label_pc_12e00

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12df8
  store i32 %v2_12ed0, i32* %r2.global-to-local, align 4
  %v3_12e04 = load i32, i32* @r4, align 4
  store i32 %v3_12e04, i32* %stack_var_-16, align 4
  %v6_12e04 = load i32, i32* @r5, align 4
  store i32 %v6_12e04, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12e08

dec_label_pc_12e08:                               ; preds = %dec_label_pc_12e08.dec_label_pc_12e08_crit_edge, %dec_label_pc_12e00
  %v0_12e2c = phi i32 [ %v12_12e2c, %dec_label_pc_12e08.dec_label_pc_12e08_crit_edge ], [ %v0_12e2c74, %dec_label_pc_12e00 ]
  %v0_12e0c = phi i32 [ %v0_12e0c.pre, %dec_label_pc_12e08.dec_label_pc_12e08_crit_edge ], [ %v4_12de8, %dec_label_pc_12e00 ]
  %v0_12e08 = phi i32 [ %v0_12e08.pre, %dec_label_pc_12e08.dec_label_pc_12e08_crit_edge ], [ %v2_12de8, %dec_label_pc_12e00 ]
  %v3_12e08 = udiv i32 %v0_12e08, 256
  store i32 %v3_12e08, i32* %r3.global-to-local, align 4
  %v1_12e0c = inttoptr i32 %v0_12e0c to i32*
  %v2_12e0c = load i32, i32* %v1_12e0c, align 4
  store i32 %v2_12e0c, i32* %r4.global-to-local, align 4
  %v3_12e0c = add i32 %v0_12e0c, 4
  %v4_12e0c = inttoptr i32 %v3_12e0c to i32*
  %v5_12e0c = load i32, i32* %v4_12e0c, align 4
  store i32 %v5_12e0c, i32* %r5.global-to-local, align 4
  %v6_12e0c = add i32 %v0_12e0c, 8
  %v7_12e0c = inttoptr i32 %v6_12e0c to i32*
  %v8_12e0c = load i32, i32* %v7_12e0c, align 4
  store i32 %v8_12e0c, i32* %ip.global-to-local, align 4
  %v9_12e0c = add i32 %v0_12e0c, 12
  %v10_12e0c = inttoptr i32 %v9_12e0c to i32*
  %v11_12e0c = load i32, i32* %v10_12e0c, align 4
  store i32 %v11_12e0c, i32* @lr, align 4
  %v12_12e0c = add i32 %v0_12e0c, 16
  store i32 %v12_12e0c, i32* %r1.global-to-local, align 4
  %v4_12e10 = mul i32 %v2_12e0c, 16777216
  %v5_12e10 = or i32 %v4_12e10, %v3_12e08
  store i32 %v5_12e10, i32* %r3.global-to-local, align 4
  %v3_12e14 = udiv i32 %v2_12e0c, 256
  %v4_12e18 = mul i32 %v5_12e0c, 16777216
  %v5_12e18 = or i32 %v4_12e18, %v3_12e14
  store i32 %v5_12e18, i32* %r4.global-to-local, align 4
  %v3_12e1c = udiv i32 %v5_12e0c, 256
  %v4_12e20 = mul i32 %v8_12e0c, 16777216
  %v5_12e20 = or i32 %v4_12e20, %v3_12e1c
  store i32 %v5_12e20, i32* %r5.global-to-local, align 4
  %v3_12e24 = udiv i32 %v8_12e0c, 256
  %v4_12e28 = mul i32 %v11_12e0c, 16777216
  %v5_12e28 = or i32 %v4_12e28, %v3_12e24
  store i32 %v5_12e28, i32* %ip.global-to-local, align 4
  %v1_12e2c = inttoptr i32 %v0_12e2c to i32*
  store i32 %v5_12e10, i32* %v1_12e2c, align 4
  %v3_12e2c = add i32 %v0_12e2c, 4
  %v4_12e2c = inttoptr i32 %v3_12e2c to i32*
  %v5_12e2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12e2c, i32* %v4_12e2c, align 4
  %v6_12e2c = add i32 %v0_12e2c, 8
  %v7_12e2c = inttoptr i32 %v6_12e2c to i32*
  %v8_12e2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12e2c, i32* %v7_12e2c, align 4
  %v9_12e2c = add i32 %v0_12e2c, 12
  %v10_12e2c = inttoptr i32 %v9_12e2c to i32*
  %v11_12e2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12e2c, i32* %v10_12e2c, align 4
  %v12_12e2c = add i32 %v0_12e2c, 16
  store i32 %v12_12e2c, i32* @r0, align 4
  %v0_12e30 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e30 = add i32 %v0_12e30, -16
  store i32 %v2_12e30, i32* %r2.global-to-local, align 4
  %v6_12e34 = icmp slt i32 %v0_12e30, 16
  br i1 %v6_12e34, label %dec_label_pc_12e38, label %dec_label_pc_12e08.dec_label_pc_12e08_crit_edge

dec_label_pc_12e08.dec_label_pc_12e08_crit_edge:  ; preds = %dec_label_pc_12e08
  %v0_12e08.pre = load i32, i32* @lr, align 4
  %v0_12e0c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e08

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e08
  %v2_12e38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12e38, i32* @r4, align 4
  %v5_12e38 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12e38, i32* @r5, align 4
  %v2_12e3c = add i32 %v0_12e30, -4
  store i32 %v2_12e3c, i32* %r2.global-to-local, align 4
  %v4_12e3c = add i32 %v0_12e30, 2147483632
  %v5_12e3c = and i32 %v2_12e3c, %v4_12e3c
  %v6_12e3c = icmp slt i32 %v5_12e3c, 0
  store i1 %v6_12e3c, i1* %cpsr_v.global-to-local, align 1
  %v7_12e3c = icmp slt i32 %v2_12e3c, 0
  store i1 %v7_12e3c, i1* %cpsr_n.global-to-local, align 1
  %v8_12e3c = icmp eq i32 %v2_12e3c, 0
  store i1 %v8_12e3c, i1* %cpsr_z.global-to-local, align 1
  %v5_12e40 = icmp slt i32 %v2_12e30, -12
  br i1 %v5_12e40, label %dec_label_pc_12e5c, label %dec_label_pc_12e44

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e38, %dec_label_pc_12df8, %dec_label_pc_12e44
  %v1_12e50 = phi i32 [ %v4_12e50, %dec_label_pc_12e44 ], [ %v12_12e2c, %dec_label_pc_12e38 ], [ %v0_12e2c74, %dec_label_pc_12df8 ]
  %v0_12e44 = load i32, i32* @lr, align 4
  %v3_12e44 = udiv i32 %v0_12e44, 256
  store i32 %v3_12e44, i32* %ip.global-to-local, align 4
  %v0_12e48 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e48 = inttoptr i32 %v0_12e48 to i32*
  %v2_12e48 = load i32, i32* %v1_12e48, align 4
  store i32 %v2_12e48, i32* @lr, align 4
  %v4_12e48 = add i32 %v0_12e48, 4
  store i32 %v4_12e48, i32* %r1.global-to-local, align 4
  %v4_12e4c = mul i32 %v2_12e48, 16777216
  %v5_12e4c = or i32 %v4_12e4c, %v3_12e44
  store i32 %v5_12e4c, i32* %ip.global-to-local, align 4
  %v2_12e50 = inttoptr i32 %v1_12e50 to i32*
  store i32 %v5_12e4c, i32* %v2_12e50, align 4
  %v3_12e50 = load i32, i32* @r0, align 4
  %v4_12e50 = add i32 %v3_12e50, 4
  store i32 %v4_12e50, i32* @r0, align 4
  %v0_12e54 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e54 = add i32 %v0_12e54, -4
  store i32 %v2_12e54, i32* %r2.global-to-local, align 4
  %v6_12e58 = icmp slt i32 %v0_12e54, 4
  br i1 %v6_12e58, label %dec_label_pc_12e5c.loopexit, label %dec_label_pc_12e44

dec_label_pc_12e5c.loopexit:                      ; preds = %dec_label_pc_12e44
  %v4_12e54 = sub i32 3, %v0_12e54
  %v5_12e54 = and i32 %v4_12e54, %v0_12e54
  %v6_12e54 = icmp slt i32 %v5_12e54, 0
  %v7_12e54 = icmp slt i32 %v2_12e54, 0
  store i1 %v6_12e54, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12e54, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e5c.loopexit, %dec_label_pc_12e38
  %v2_12d9c111 = phi i32 [ %v4_12e50, %dec_label_pc_12e5c.loopexit ], [ %v12_12e2c, %dec_label_pc_12e38 ]
  %v0_12d8c107 = phi i32 [ %v2_12e54, %dec_label_pc_12e5c.loopexit ], [ %v2_12e3c, %dec_label_pc_12e38 ]
  %v0_12e5c = load i32, i32* %r1.global-to-local, align 4
  %v1_12e5c = add i32 %v0_12e5c, -3
  store i32 %v1_12e5c, i32* @r1, align 4
  br label %bb131

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12de4
  br i1 %v5_12ed4, label %dec_label_pc_12eb0, label %dec_label_pc_12e6c

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12e64
  store i32 %v2_12ed0, i32* %r2.global-to-local, align 4
  %v3_12e70 = load i32, i32* @r4, align 4
  store i32 %v3_12e70, i32* %stack_var_-16, align 4
  %v6_12e70 = load i32, i32* @r5, align 4
  store i32 %v6_12e70, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge, %dec_label_pc_12e6c
  %v0_12e98 = phi i32 [ %v12_12e98, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v0_12e2c74, %dec_label_pc_12e6c ]
  %v0_12e78 = phi i32 [ %v0_12e78.pre, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v4_12de8, %dec_label_pc_12e6c ]
  %v0_12e74 = phi i32 [ %v0_12e74.pre, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v2_12de8, %dec_label_pc_12e6c ]
  %v3_12e74 = udiv i32 %v0_12e74, 65536
  store i32 %v3_12e74, i32* %r3.global-to-local, align 4
  %v1_12e78 = inttoptr i32 %v0_12e78 to i32*
  %v2_12e78 = load i32, i32* %v1_12e78, align 4
  store i32 %v2_12e78, i32* %r4.global-to-local, align 4
  %v3_12e78 = add i32 %v0_12e78, 4
  %v4_12e78 = inttoptr i32 %v3_12e78 to i32*
  %v5_12e78 = load i32, i32* %v4_12e78, align 4
  store i32 %v5_12e78, i32* %r5.global-to-local, align 4
  %v6_12e78 = add i32 %v0_12e78, 8
  %v7_12e78 = inttoptr i32 %v6_12e78 to i32*
  %v8_12e78 = load i32, i32* %v7_12e78, align 4
  store i32 %v8_12e78, i32* %ip.global-to-local, align 4
  %v9_12e78 = add i32 %v0_12e78, 12
  %v10_12e78 = inttoptr i32 %v9_12e78 to i32*
  %v11_12e78 = load i32, i32* %v10_12e78, align 4
  store i32 %v11_12e78, i32* @lr, align 4
  %v12_12e78 = add i32 %v0_12e78, 16
  store i32 %v12_12e78, i32* %r1.global-to-local, align 4
  %v4_12e7c = mul i32 %v2_12e78, 65536
  %v5_12e7c = or i32 %v4_12e7c, %v3_12e74
  store i32 %v5_12e7c, i32* %r3.global-to-local, align 4
  %v3_12e80 = udiv i32 %v2_12e78, 65536
  %v4_12e84 = mul i32 %v5_12e78, 65536
  %v5_12e84 = or i32 %v4_12e84, %v3_12e80
  store i32 %v5_12e84, i32* %r4.global-to-local, align 4
  %v3_12e88 = udiv i32 %v5_12e78, 65536
  %v4_12e8c = mul i32 %v8_12e78, 65536
  %v5_12e8c = or i32 %v4_12e8c, %v3_12e88
  store i32 %v5_12e8c, i32* %r5.global-to-local, align 4
  %v3_12e90 = udiv i32 %v8_12e78, 65536
  %v4_12e94 = mul i32 %v11_12e78, 65536
  %v5_12e94 = or i32 %v4_12e94, %v3_12e90
  store i32 %v5_12e94, i32* %ip.global-to-local, align 4
  %v1_12e98 = inttoptr i32 %v0_12e98 to i32*
  store i32 %v5_12e7c, i32* %v1_12e98, align 4
  %v3_12e98 = add i32 %v0_12e98, 4
  %v4_12e98 = inttoptr i32 %v3_12e98 to i32*
  %v5_12e98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12e98, i32* %v4_12e98, align 4
  %v6_12e98 = add i32 %v0_12e98, 8
  %v7_12e98 = inttoptr i32 %v6_12e98 to i32*
  %v8_12e98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12e98, i32* %v7_12e98, align 4
  %v9_12e98 = add i32 %v0_12e98, 12
  %v10_12e98 = inttoptr i32 %v9_12e98 to i32*
  %v11_12e98 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12e98, i32* %v10_12e98, align 4
  %v12_12e98 = add i32 %v0_12e98, 16
  store i32 %v12_12e98, i32* @r0, align 4
  %v0_12e9c = load i32, i32* %r2.global-to-local, align 4
  %v2_12e9c = add i32 %v0_12e9c, -16
  store i32 %v2_12e9c, i32* %r2.global-to-local, align 4
  %v6_12ea0 = icmp slt i32 %v0_12e9c, 16
  br i1 %v6_12ea0, label %dec_label_pc_12ea4, label %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge

dec_label_pc_12e74.dec_label_pc_12e74_crit_edge:  ; preds = %dec_label_pc_12e74
  %v0_12e74.pre = load i32, i32* @lr, align 4
  %v0_12e78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12e74
  %v2_12ea4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12ea4, i32* @r4, align 4
  %v5_12ea4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12ea4, i32* @r5, align 4
  %v2_12ea8 = add i32 %v0_12e9c, -4
  store i32 %v2_12ea8, i32* %r2.global-to-local, align 4
  %v4_12ea8 = add i32 %v0_12e9c, 2147483632
  %v5_12ea8 = and i32 %v2_12ea8, %v4_12ea8
  %v6_12ea8 = icmp slt i32 %v5_12ea8, 0
  store i1 %v6_12ea8, i1* %cpsr_v.global-to-local, align 1
  %v7_12ea8 = icmp slt i32 %v2_12ea8, 0
  store i1 %v7_12ea8, i1* %cpsr_n.global-to-local, align 1
  %v8_12ea8 = icmp eq i32 %v2_12ea8, 0
  store i1 %v8_12ea8, i1* %cpsr_z.global-to-local, align 1
  %v5_12eac = icmp slt i32 %v2_12e9c, -12
  br i1 %v5_12eac, label %dec_label_pc_12ec8, label %dec_label_pc_12eb0

dec_label_pc_12eb0:                               ; preds = %dec_label_pc_12ea4, %dec_label_pc_12e64, %dec_label_pc_12eb0
  %v1_12ebc = phi i32 [ %v4_12ebc, %dec_label_pc_12eb0 ], [ %v12_12e98, %dec_label_pc_12ea4 ], [ %v0_12e2c74, %dec_label_pc_12e64 ]
  %v0_12eb0 = load i32, i32* @lr, align 4
  %v3_12eb0 = udiv i32 %v0_12eb0, 65536
  store i32 %v3_12eb0, i32* %ip.global-to-local, align 4
  %v0_12eb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12eb4 = inttoptr i32 %v0_12eb4 to i32*
  %v2_12eb4 = load i32, i32* %v1_12eb4, align 4
  store i32 %v2_12eb4, i32* @lr, align 4
  %v4_12eb4 = add i32 %v0_12eb4, 4
  store i32 %v4_12eb4, i32* %r1.global-to-local, align 4
  %v4_12eb8 = mul i32 %v2_12eb4, 65536
  %v5_12eb8 = or i32 %v4_12eb8, %v3_12eb0
  store i32 %v5_12eb8, i32* %ip.global-to-local, align 4
  %v2_12ebc = inttoptr i32 %v1_12ebc to i32*
  store i32 %v5_12eb8, i32* %v2_12ebc, align 4
  %v3_12ebc = load i32, i32* @r0, align 4
  %v4_12ebc = add i32 %v3_12ebc, 4
  store i32 %v4_12ebc, i32* @r0, align 4
  %v0_12ec0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ec0 = add i32 %v0_12ec0, -4
  store i32 %v2_12ec0, i32* %r2.global-to-local, align 4
  %v6_12ec4 = icmp slt i32 %v0_12ec0, 4
  br i1 %v6_12ec4, label %dec_label_pc_12ec8.loopexit, label %dec_label_pc_12eb0

dec_label_pc_12ec8.loopexit:                      ; preds = %dec_label_pc_12eb0
  %v4_12ec0 = sub i32 3, %v0_12ec0
  %v5_12ec0 = and i32 %v4_12ec0, %v0_12ec0
  %v6_12ec0 = icmp slt i32 %v5_12ec0, 0
  %v7_12ec0 = icmp slt i32 %v2_12ec0, 0
  store i1 %v6_12ec0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12ec0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12ec8

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12ec8.loopexit, %dec_label_pc_12ea4
  %v2_12d9c112 = phi i32 [ %v4_12ebc, %dec_label_pc_12ec8.loopexit ], [ %v12_12e98, %dec_label_pc_12ea4 ]
  %v0_12d8c108 = phi i32 [ %v2_12ec0, %dec_label_pc_12ec8.loopexit ], [ %v2_12ea8, %dec_label_pc_12ea4 ]
  %v0_12ec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ec8 = add i32 %v0_12ec8, -2
  store i32 %v1_12ec8, i32* @r1, align 4
  br label %bb131

dec_label_pc_12ed0:                               ; preds = %dec_label_pc_12de4
  br i1 %v5_12ed4, label %dec_label_pc_12f1c, label %dec_label_pc_12ed8

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12ed0
  store i32 %v2_12ed0, i32* %r2.global-to-local, align 4
  %v3_12edc = load i32, i32* @r4, align 4
  store i32 %v3_12edc, i32* %stack_var_-16, align 4
  %v6_12edc = load i32, i32* @r5, align 4
  store i32 %v6_12edc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge, %dec_label_pc_12ed8
  %v0_12f04 = phi i32 [ %v12_12f04, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v0_12e2c74, %dec_label_pc_12ed8 ]
  %v0_12ee4 = phi i32 [ %v0_12ee4.pre, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v4_12de8, %dec_label_pc_12ed8 ]
  %v0_12ee0 = phi i32 [ %v0_12ee0.pre, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v2_12de8, %dec_label_pc_12ed8 ]
  %v3_12ee0 = udiv i32 %v0_12ee0, 16777216
  store i32 %v3_12ee0, i32* %r3.global-to-local, align 4
  %v1_12ee4 = inttoptr i32 %v0_12ee4 to i32*
  %v2_12ee4 = load i32, i32* %v1_12ee4, align 4
  store i32 %v2_12ee4, i32* %r4.global-to-local, align 4
  %v3_12ee4 = add i32 %v0_12ee4, 4
  %v4_12ee4 = inttoptr i32 %v3_12ee4 to i32*
  %v5_12ee4 = load i32, i32* %v4_12ee4, align 4
  store i32 %v5_12ee4, i32* %r5.global-to-local, align 4
  %v6_12ee4 = add i32 %v0_12ee4, 8
  %v7_12ee4 = inttoptr i32 %v6_12ee4 to i32*
  %v8_12ee4 = load i32, i32* %v7_12ee4, align 4
  store i32 %v8_12ee4, i32* %ip.global-to-local, align 4
  %v9_12ee4 = add i32 %v0_12ee4, 12
  %v10_12ee4 = inttoptr i32 %v9_12ee4 to i32*
  %v11_12ee4 = load i32, i32* %v10_12ee4, align 4
  store i32 %v11_12ee4, i32* @lr, align 4
  %v12_12ee4 = add i32 %v0_12ee4, 16
  store i32 %v12_12ee4, i32* %r1.global-to-local, align 4
  %v4_12ee8 = mul i32 %v2_12ee4, 256
  %v5_12ee8 = or i32 %v4_12ee8, %v3_12ee0
  store i32 %v5_12ee8, i32* %r3.global-to-local, align 4
  %v3_12eec = udiv i32 %v2_12ee4, 16777216
  %v4_12ef0 = mul i32 %v5_12ee4, 256
  %v5_12ef0 = or i32 %v4_12ef0, %v3_12eec
  store i32 %v5_12ef0, i32* %r4.global-to-local, align 4
  %v3_12ef4 = udiv i32 %v5_12ee4, 16777216
  %v4_12ef8 = mul i32 %v8_12ee4, 256
  %v5_12ef8 = or i32 %v4_12ef8, %v3_12ef4
  store i32 %v5_12ef8, i32* %r5.global-to-local, align 4
  %v3_12efc = udiv i32 %v8_12ee4, 16777216
  %v4_12f00 = mul i32 %v11_12ee4, 256
  %v5_12f00 = or i32 %v4_12f00, %v3_12efc
  store i32 %v5_12f00, i32* %ip.global-to-local, align 4
  %v1_12f04 = inttoptr i32 %v0_12f04 to i32*
  store i32 %v5_12ee8, i32* %v1_12f04, align 4
  %v3_12f04 = add i32 %v0_12f04, 4
  %v4_12f04 = inttoptr i32 %v3_12f04 to i32*
  %v5_12f04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12f04, i32* %v4_12f04, align 4
  %v6_12f04 = add i32 %v0_12f04, 8
  %v7_12f04 = inttoptr i32 %v6_12f04 to i32*
  %v8_12f04 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12f04, i32* %v7_12f04, align 4
  %v9_12f04 = add i32 %v0_12f04, 12
  %v10_12f04 = inttoptr i32 %v9_12f04 to i32*
  %v11_12f04 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_12f04, i32* %v10_12f04, align 4
  %v12_12f04 = add i32 %v0_12f04, 16
  store i32 %v12_12f04, i32* @r0, align 4
  %v0_12f08 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f08 = add i32 %v0_12f08, -16
  store i32 %v2_12f08, i32* %r2.global-to-local, align 4
  %v6_12f0c = icmp slt i32 %v0_12f08, 16
  br i1 %v6_12f0c, label %dec_label_pc_12f10, label %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge

dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge:  ; preds = %dec_label_pc_12ee0
  %v0_12ee0.pre = load i32, i32* @lr, align 4
  %v0_12ee4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12ee0
  %v2_12f10 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12f10, i32* @r4, align 4
  %v5_12f10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12f10, i32* @r5, align 4
  %v2_12f14 = add i32 %v0_12f08, -4
  store i32 %v2_12f14, i32* %r2.global-to-local, align 4
  %v4_12f14 = add i32 %v0_12f08, 2147483632
  %v5_12f14 = and i32 %v2_12f14, %v4_12f14
  %v6_12f14 = icmp slt i32 %v5_12f14, 0
  store i1 %v6_12f14, i1* %cpsr_v.global-to-local, align 1
  %v7_12f14 = icmp slt i32 %v2_12f14, 0
  store i1 %v7_12f14, i1* %cpsr_n.global-to-local, align 1
  %v8_12f14 = icmp eq i32 %v2_12f14, 0
  store i1 %v8_12f14, i1* %cpsr_z.global-to-local, align 1
  %v5_12f18 = icmp slt i32 %v2_12f08, -12
  br i1 %v5_12f18, label %dec_label_pc_12f34, label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12f10, %dec_label_pc_12ed0, %dec_label_pc_12f1c
  %v1_12f28 = phi i32 [ %v4_12f28, %dec_label_pc_12f1c ], [ %v12_12f04, %dec_label_pc_12f10 ], [ %v0_12e2c74, %dec_label_pc_12ed0 ]
  %v0_12f1c = load i32, i32* @lr, align 4
  %v3_12f1c = udiv i32 %v0_12f1c, 16777216
  store i32 %v3_12f1c, i32* %ip.global-to-local, align 4
  %v0_12f20 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f20 = inttoptr i32 %v0_12f20 to i32*
  %v2_12f20 = load i32, i32* %v1_12f20, align 4
  store i32 %v2_12f20, i32* @lr, align 4
  %v4_12f20 = add i32 %v0_12f20, 4
  store i32 %v4_12f20, i32* %r1.global-to-local, align 4
  %v4_12f24 = mul i32 %v2_12f20, 256
  %v5_12f24 = or i32 %v4_12f24, %v3_12f1c
  store i32 %v5_12f24, i32* %ip.global-to-local, align 4
  %v2_12f28 = inttoptr i32 %v1_12f28 to i32*
  store i32 %v5_12f24, i32* %v2_12f28, align 4
  %v3_12f28 = load i32, i32* @r0, align 4
  %v4_12f28 = add i32 %v3_12f28, 4
  store i32 %v4_12f28, i32* @r0, align 4
  %v0_12f2c = load i32, i32* %r2.global-to-local, align 4
  %v2_12f2c = add i32 %v0_12f2c, -4
  store i32 %v2_12f2c, i32* %r2.global-to-local, align 4
  %v6_12f30 = icmp slt i32 %v0_12f2c, 4
  br i1 %v6_12f30, label %dec_label_pc_12f34.loopexit, label %dec_label_pc_12f1c

dec_label_pc_12f34.loopexit:                      ; preds = %dec_label_pc_12f1c
  %v4_12f2c = sub i32 3, %v0_12f2c
  %v5_12f2c = and i32 %v4_12f2c, %v0_12f2c
  %v6_12f2c = icmp slt i32 %v5_12f2c, 0
  %v7_12f2c = icmp slt i32 %v2_12f2c, 0
  store i1 %v6_12f2c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12f2c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12f34

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f34.loopexit, %dec_label_pc_12f10
  %v2_12d9c113 = phi i32 [ %v4_12f28, %dec_label_pc_12f34.loopexit ], [ %v12_12f04, %dec_label_pc_12f10 ]
  %v0_12d8c109 = phi i32 [ %v2_12f2c, %dec_label_pc_12f34.loopexit ], [ %v2_12f14, %dec_label_pc_12f10 ]
  %v0_12f34 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f34 = add i32 %v0_12f34, -1
  store i32 %v1_12f34, i32* @r1, align 4
  br label %bb131

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12cf0
  %v1_12f3c = load i32, i32* @r2, align 4
  %v2_12f3c = add i32 %v1_12f3c, %v0_12cf0
  store i32 %v2_12f3c, i32* %r1.global-to-local, align 4
  %v2_12f40 = add i32 %v1_12f3c, %v1_12cf0
  store i32 %v2_12f40, i32* %r0.global-to-local, align 4
  %v2_12f44 = add i32 %v1_12f3c, -4
  store i32 %v2_12f44, i32* %r2.global-to-local, align 4
  %v4_12f44 = sub i32 3, %v1_12f3c
  %v5_12f44 = and i32 %v4_12f44, %v1_12f3c
  %v6_12f44 = icmp slt i32 %v5_12f44, 0
  store i1 %v6_12f44, i1* %cpsr_v.global-to-local, align 1
  %v7_12f44 = icmp slt i32 %v2_12f44, 0
  store i1 %v7_12f44, i1* %cpsr_n.global-to-local, align 1
  %v8_12f44 = icmp eq i32 %v1_12f3c, 4
  store i1 %v8_12f44, i1* %cpsr_z.global-to-local, align 1
  %v5_12f48 = icmp slt i32 %v1_12f3c, 4
  br i1 %v5_12f48, label %bb141, label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f3c
  %v1_12f4c = urem i32 %v2_12f40, 4
  store i32 %v1_12f4c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12f4c = icmp eq i32 %v1_12f4c, 0
  store i1 %v2_12f4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f4c, label %dec_label_pc_12f54, label %dec_label_pc_12ff4

dec_label_pc_12f54:                               ; preds = %dec_label_pc_12f4c
  %v1_12f54 = urem i32 %v2_12f3c, 4
  store i32 %v1_12f54, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12f54 = icmp eq i32 %v1_12f54, 0
  store i1 %v2_12f54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f54, label %dec_label_pc_12f5c, label %dec_label_pc_13020

dec_label_pc_12f5c:                               ; preds = %dec_label_pc_12f54, %dec_label_pc_13018
  %v0_12f7448 = phi i32 [ %v2_12f40, %dec_label_pc_12f54 ], [ %v0_1306831, %dec_label_pc_13018 ]
  %v0_12f7047 = phi i32 [ %v2_12f3c, %dec_label_pc_12f54 ], [ %v0_13018, %dec_label_pc_13018 ]
  %v0_12f5c = phi i32 [ %v2_12f44, %dec_label_pc_12f54 ], [ %v2_13010, %dec_label_pc_13018 ]
  %v2_12f5c = add i32 %v0_12f5c, -8
  store i32 %v2_12f5c, i32* %r2.global-to-local, align 4
  %v4_12f5c = sub i32 7, %v0_12f5c
  %v5_12f5c = and i32 %v4_12f5c, %v0_12f5c
  %v6_12f5c = icmp slt i32 %v5_12f5c, 0
  store i1 %v6_12f5c, i1* %cpsr_v.global-to-local, align 1
  %v7_12f5c = icmp slt i32 %v2_12f5c, 0
  store i1 %v7_12f5c, i1* %cpsr_n.global-to-local, align 1
  %v8_12f5c = icmp eq i32 %v0_12f5c, 8
  store i1 %v8_12f5c, i1* %cpsr_z.global-to-local, align 1
  %v5_12f60 = icmp slt i32 %v0_12f5c, 8
  br i1 %v5_12f60, label %dec_label_pc_12fac, label %dec_label_pc_12f64

dec_label_pc_12f64:                               ; preds = %dec_label_pc_12f5c
  %v3_12f64 = load i32, i32* @r4, align 4
  store i32 %v3_12f64, i32* %stack_var_-8, align 4
  %v6_12f64 = load i32, i32* @lr, align 4
  %v2_12f68 = add i32 %v0_12f5c, -28
  store i32 %v2_12f68, i32* %r2.global-to-local, align 4
  %v4_12f68 = sub i32 27, %v0_12f5c
  %v5_12f68 = and i32 %v4_12f68, %v2_12f5c
  %v6_12f68 = icmp slt i32 %v5_12f68, 0
  store i1 %v6_12f68, i1* %cpsr_v.global-to-local, align 1
  %v7_12f68 = icmp slt i32 %v2_12f68, 0
  store i1 %v7_12f68, i1* %cpsr_n.global-to-local, align 1
  %v8_12f68 = icmp eq i32 %v2_12f5c, 20
  store i1 %v8_12f68, i1* %cpsr_z.global-to-local, align 1
  %v5_12f6c = icmp slt i32 %v2_12f5c, 20
  br i1 %v5_12f6c, label %dec_label_pc_12f88, label %dec_label_pc_12f70

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f64, %dec_label_pc_12f70.dec_label_pc_12f70_crit_edge
  %v0_12f74 = phi i32 [ %v1_12f7c, %dec_label_pc_12f70.dec_label_pc_12f70_crit_edge ], [ %v0_12f7448, %dec_label_pc_12f64 ]
  %v0_12f70 = phi i32 [ %v0_12f70.pre, %dec_label_pc_12f70.dec_label_pc_12f70_crit_edge ], [ %v0_12f7047, %dec_label_pc_12f64 ]
  %v1_12f70 = add i32 %v0_12f70, -4
  %v2_12f70 = inttoptr i32 %v1_12f70 to i32*
  %v3_12f70 = load i32, i32* %v2_12f70, align 4
  store i32 %v3_12f70, i32* %r3.global-to-local, align 4
  %v4_12f70 = add i32 %v0_12f70, -8
  %v5_12f70 = inttoptr i32 %v4_12f70 to i32*
  %v6_12f70 = load i32, i32* %v5_12f70, align 4
  store i32 %v6_12f70, i32* %r4.global-to-local, align 4
  %v7_12f70 = add i32 %v0_12f70, -12
  %v8_12f70 = inttoptr i32 %v7_12f70 to i32*
  %v9_12f70 = load i32, i32* %v8_12f70, align 4
  store i32 %v9_12f70, i32* %ip.global-to-local, align 4
  %v10_12f70 = add i32 %v0_12f70, -16
  %v11_12f70 = inttoptr i32 %v10_12f70 to i32*
  %v12_12f70 = load i32, i32* %v11_12f70, align 4
  store i32 %v12_12f70, i32* %lr.global-to-local, align 4
  store i32 %v10_12f70, i32* %r1.global-to-local, align 4
  %v1_12f74 = add i32 %v0_12f74, -16
  %v2_12f74 = inttoptr i32 %v1_12f74 to i32*
  store i32 %v3_12f70, i32* %v2_12f74, align 4
  %v4_12f74 = add i32 %v0_12f74, -12
  %v5_12f74 = inttoptr i32 %v4_12f74 to i32*
  %v6_12f74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12f74, i32* %v5_12f74, align 4
  %v7_12f74 = add i32 %v0_12f74, -8
  %v8_12f74 = inttoptr i32 %v7_12f74 to i32*
  %v9_12f74 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12f74, i32* %v8_12f74, align 4
  %v10_12f74 = add i32 %v0_12f74, -4
  %v11_12f74 = inttoptr i32 %v10_12f74 to i32*
  %v12_12f74 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12f74, i32* %v11_12f74, align 4
  store i32 %v1_12f74, i32* %r0.global-to-local, align 4
  %v0_12f78 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f78 = add i32 %v0_12f78, -4
  %v2_12f78 = inttoptr i32 %v1_12f78 to i32*
  %v3_12f78 = load i32, i32* %v2_12f78, align 4
  store i32 %v3_12f78, i32* %r3.global-to-local, align 4
  %v4_12f78 = add i32 %v0_12f78, -8
  %v5_12f78 = inttoptr i32 %v4_12f78 to i32*
  %v6_12f78 = load i32, i32* %v5_12f78, align 4
  store i32 %v6_12f78, i32* %r4.global-to-local, align 4
  %v7_12f78 = add i32 %v0_12f78, -12
  %v8_12f78 = inttoptr i32 %v7_12f78 to i32*
  %v9_12f78 = load i32, i32* %v8_12f78, align 4
  store i32 %v9_12f78, i32* %ip.global-to-local, align 4
  %v10_12f78 = add i32 %v0_12f78, -16
  %v11_12f78 = inttoptr i32 %v10_12f78 to i32*
  %v12_12f78 = load i32, i32* %v11_12f78, align 4
  store i32 %v12_12f78, i32* %lr.global-to-local, align 4
  store i32 %v10_12f78, i32* %r1.global-to-local, align 4
  %v1_12f7c = add i32 %v0_12f74, -32
  %v2_12f7c = inttoptr i32 %v1_12f7c to i32*
  store i32 %v3_12f78, i32* %v2_12f7c, align 4
  %v4_12f7c = add i32 %v0_12f74, -28
  %v5_12f7c = inttoptr i32 %v4_12f7c to i32*
  %v6_12f7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12f7c, i32* %v5_12f7c, align 4
  %v7_12f7c = add i32 %v0_12f74, -24
  %v8_12f7c = inttoptr i32 %v7_12f7c to i32*
  %v9_12f7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12f7c, i32* %v8_12f7c, align 4
  %v10_12f7c = add i32 %v0_12f74, -20
  %v11_12f7c = inttoptr i32 %v10_12f7c to i32*
  %v12_12f7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12f7c, i32* %v11_12f7c, align 4
  store i32 %v1_12f7c, i32* %r0.global-to-local, align 4
  %v0_12f80 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f80 = add i32 %v0_12f80, -32
  store i32 %v2_12f80, i32* %r2.global-to-local, align 4
  %v6_12f84 = icmp slt i32 %v0_12f80, 32
  br i1 %v6_12f84, label %dec_label_pc_12f88.loopexit, label %dec_label_pc_12f70.dec_label_pc_12f70_crit_edge

dec_label_pc_12f70.dec_label_pc_12f70_crit_edge:  ; preds = %dec_label_pc_12f70
  %v0_12f70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f70

dec_label_pc_12f88.loopexit:                      ; preds = %dec_label_pc_12f70
  %v4_12f80 = sub i32 31, %v0_12f80
  %v5_12f80 = and i32 %v4_12f80, %v0_12f80
  %v6_12f80 = icmp slt i32 %v5_12f80, 0
  %v7_12f80 = icmp slt i32 %v2_12f80, 0
  store i1 %v6_12f80, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12f80, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f88.loopexit, %dec_label_pc_12f64
  %v6_12f90 = phi i32 [ %v1_12f7c, %dec_label_pc_12f88.loopexit ], [ %v0_12f7448, %dec_label_pc_12f64 ]
  %v0_12f98.pr = phi i32 [ %v2_12f80, %dec_label_pc_12f88.loopexit ], [ %v2_12f68, %dec_label_pc_12f64 ]
  %v4_12f88 = add i32 %v0_12f98.pr, 16
  %v6_12f88 = sub i32 0, %v0_12f98.pr
  %v7_12f88 = and i32 %v4_12f88, %v6_12f88
  %v8_12f88 = icmp slt i32 %v7_12f88, 0
  store i1 %v8_12f88, i1* %cpsr_v.global-to-local, align 1
  %v9_12f88 = icmp slt i32 %v4_12f88, 0
  store i1 %v9_12f88, i1* %cpsr_n.global-to-local, align 1
  %v10_12f88 = icmp eq i32 %v4_12f88, 0
  store i1 %v10_12f88, i1* %cpsr_z.global-to-local, align 1
  %v5_12f8c = icmp slt i32 %v0_12f98.pr, -16
  br i1 %v5_12f8c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_12f88
  %v6_12f8c = load i32, i32* %r1.global-to-local, align 4
  %v7_12f8c = add i32 %v6_12f8c, -4
  %v8_12f8c = inttoptr i32 %v7_12f8c to i32*
  %v9_12f8c = load i32, i32* %v8_12f8c, align 4
  store i32 %v9_12f8c, i32* %r3.global-to-local, align 4
  %v10_12f8c = add i32 %v6_12f8c, -8
  %v11_12f8c = inttoptr i32 %v10_12f8c to i32*
  %v12_12f8c = load i32, i32* %v11_12f8c, align 4
  store i32 %v12_12f8c, i32* %r4.global-to-local, align 4
  %v13_12f8c = add i32 %v6_12f8c, -12
  %v14_12f8c = inttoptr i32 %v13_12f8c to i32*
  %v15_12f8c = load i32, i32* %v14_12f8c, align 4
  store i32 %v15_12f8c, i32* %ip.global-to-local, align 4
  %v16_12f8c = add i32 %v6_12f8c, -16
  %v17_12f8c = inttoptr i32 %v16_12f8c to i32*
  %v18_12f8c = load i32, i32* %v17_12f8c, align 4
  store i32 %v18_12f8c, i32* %lr.global-to-local, align 4
  store i32 %v16_12f8c, i32* %r1.global-to-local, align 4
  %v7_12f90 = add i32 %v6_12f90, -16
  %v8_12f90 = inttoptr i32 %v7_12f90 to i32*
  store i32 %v9_12f8c, i32* %v8_12f90, align 4
  %v10_12f90 = add i32 %v6_12f90, -12
  %v11_12f90 = inttoptr i32 %v10_12f90 to i32*
  %v12_12f90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_12f90, i32* %v11_12f90, align 4
  %v13_12f90 = add i32 %v6_12f90, -8
  %v14_12f90 = inttoptr i32 %v13_12f90 to i32*
  %v15_12f90 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_12f90, i32* %v14_12f90, align 4
  %v16_12f90 = add i32 %v6_12f90, -4
  %v17_12f90 = inttoptr i32 %v16_12f90 to i32*
  %v18_12f90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_12f90, i32* %v17_12f90, align 4
  store i32 %v7_12f90, i32* %r0.global-to-local, align 4
  %v6_12f94 = load i32, i32* %r2.global-to-local, align 4
  %v7_12f94 = add i32 %v6_12f94, -16
  store i32 %v7_12f94, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_12f88, %bb138
  %v6_12fa0 = phi i32 [ %v7_12f90, %bb138 ], [ %v6_12f90, %dec_label_pc_12f88 ]
  %v0_12f98 = phi i32 [ %v7_12f94, %bb138 ], [ %v0_12f98.pr, %dec_label_pc_12f88 ]
  %v4_12f98 = add i32 %v0_12f98, 20
  store i32 %v4_12f98, i32* %r2.global-to-local, align 4
  %v6_12f98 = sub i32 0, %v0_12f98
  %v7_12f98 = and i32 %v4_12f98, %v6_12f98
  %v8_12f98 = icmp slt i32 %v7_12f98, 0
  store i1 %v8_12f98, i1* %cpsr_v.global-to-local, align 1
  %v9_12f98 = icmp slt i32 %v4_12f98, 0
  store i1 %v9_12f98, i1* %cpsr_n.global-to-local, align 1
  %v10_12f98 = icmp eq i32 %v4_12f98, 0
  store i1 %v10_12f98, i1* %cpsr_z.global-to-local, align 1
  %v5_12f9c = icmp slt i32 %v0_12f98, -20
  br i1 %v5_12f9c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_12f9c = load i32, i32* %r1.global-to-local, align 4
  %v7_12f9c = add i32 %v6_12f9c, -4
  %v8_12f9c = inttoptr i32 %v7_12f9c to i32*
  %v9_12f9c = load i32, i32* %v8_12f9c, align 4
  store i32 %v9_12f9c, i32* %r3.global-to-local, align 4
  %v10_12f9c = add i32 %v6_12f9c, -8
  %v11_12f9c = inttoptr i32 %v10_12f9c to i32*
  %v12_12f9c = load i32, i32* %v11_12f9c, align 4
  store i32 %v12_12f9c, i32* %ip.global-to-local, align 4
  %v13_12f9c = add i32 %v6_12f9c, -12
  %v14_12f9c = inttoptr i32 %v13_12f9c to i32*
  %v15_12f9c = load i32, i32* %v14_12f9c, align 4
  store i32 %v15_12f9c, i32* %lr.global-to-local, align 4
  store i32 %v13_12f9c, i32* %r1.global-to-local, align 4
  %v7_12fa0 = add i32 %v6_12fa0, -12
  %v8_12fa0 = inttoptr i32 %v7_12fa0 to i32*
  store i32 %v9_12f9c, i32* %v8_12fa0, align 4
  %v10_12fa0 = add i32 %v6_12fa0, -8
  %v11_12fa0 = inttoptr i32 %v10_12fa0 to i32*
  %v12_12fa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_12fa0, i32* %v11_12fa0, align 4
  %v13_12fa0 = add i32 %v6_12fa0, -4
  %v14_12fa0 = inttoptr i32 %v13_12fa0 to i32*
  %v15_12fa0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_12fa0, i32* %v14_12fa0, align 4
  store i32 %v7_12fa0, i32* %r0.global-to-local, align 4
  %v6_12fa4 = load i32, i32* %r2.global-to-local, align 4
  %v7_12fa4 = add i32 %v6_12fa4, -12
  store i32 %v7_12fa4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_12fc456 = phi i32 [ %v6_12fa0, %.thread13 ], [ %v7_12fa0, %bb139 ]
  %v0_12fac54 = phi i32 [ %v4_12f98, %.thread13 ], [ %v7_12fa4, %bb139 ]
  %v2_12fa8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12fa8, i32* @r4, align 4
  store i32 %v6_12f64, i32* @lr, align 4
  br label %dec_label_pc_12fac

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12f5c, %.thread15
  %v7_12fbc = phi i32 [ %v0_12f7448, %dec_label_pc_12f5c ], [ %v6_12fc456, %.thread15 ]
  %v0_12fac = phi i32 [ %v2_12f5c, %dec_label_pc_12f5c ], [ %v0_12fac54, %.thread15 ]
  %v2_12fac = add i32 %v0_12fac, 8
  store i32 %v2_12fac, i32* %r2.global-to-local, align 4
  %v4_12fac = sub i32 0, %v0_12fac
  %v5_12fac = and i32 %v2_12fac, %v4_12fac
  %v6_12fac = icmp slt i32 %v5_12fac, 0
  store i1 %v6_12fac, i1* %cpsr_v.global-to-local, align 1
  %v7_12fac = icmp slt i32 %v2_12fac, 0
  store i1 %v7_12fac, i1* %cpsr_n.global-to-local, align 1
  %v8_12fac = icmp eq i32 %v2_12fac, 0
  store i1 %v8_12fac, i1* %cpsr_z.global-to-local, align 1
  %v5_12fb0 = icmp slt i32 %v0_12fac, -8
  br i1 %v5_12fb0, label %bb141, label %dec_label_pc_12fb4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12fac
  %v6_12fb4 = add i32 %v0_12fac, 4
  store i32 %v6_12fb4, i32* %r2.global-to-local, align 4
  %v8_12fb4 = sub i32 -5, %v0_12fac
  %v9_12fb4 = and i32 %v8_12fb4, %v2_12fac
  %v10_12fb4 = icmp slt i32 %v9_12fb4, 0
  store i1 %v10_12fb4, i1* %cpsr_v.global-to-local, align 1
  %v11_12fb4 = icmp slt i32 %v6_12fb4, 0
  store i1 %v11_12fb4, i1* %cpsr_n.global-to-local, align 1
  %v12_12fb4 = icmp eq i32 %v2_12fac, 4
  store i1 %v12_12fb4, i1* %cpsr_z.global-to-local, align 1
  %v5_12fb8 = icmp slt i32 %v2_12fac, 4
  %v6_12fb8 = load i32, i32* %r1.global-to-local, align 4
  %v7_12fb8 = add i32 %v6_12fb8, -4
  %v8_12fb8 = inttoptr i32 %v7_12fb8 to i32*
  %v9_12fb8 = load i32, i32* %v8_12fb8, align 4
  store i32 %v9_12fb8, i32* %r3.global-to-local, align 4
  br i1 %v5_12fb8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_12fb4
  store i32 %v7_12fb8, i32* %r1.global-to-local, align 4
  %v8_12fbc = add i32 %v7_12fbc, -4
  %v9_12fbc = inttoptr i32 %v8_12fbc to i32*
  store i32 %v9_12fb8, i32* %v9_12fbc, align 4
  %v10_12fbc = load i32, i32* %r0.global-to-local, align 4
  %v11_12fbc = add i32 %v10_12fbc, -4
  store i32 %v11_12fbc, i32* %r0.global-to-local, align 4
  %v0_12fcc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_12fb4
  %v10_12fc0 = add i32 %v6_12fb8, -8
  %v11_12fc0 = inttoptr i32 %v10_12fc0 to i32*
  %v12_12fc0 = load i32, i32* %v11_12fc0, align 4
  store i32 %v12_12fc0, i32* %ip.global-to-local, align 4
  store i32 %v10_12fc0, i32* %r1.global-to-local, align 4
  %v7_12fc4 = add i32 %v7_12fbc, -8
  %v8_12fc4 = inttoptr i32 %v7_12fc4 to i32*
  store i32 %v9_12fb8, i32* %v8_12fc4, align 4
  %v10_12fc4 = add i32 %v7_12fbc, -4
  %v11_12fc4 = inttoptr i32 %v10_12fc4 to i32*
  %v12_12fc4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_12fc4, i32* %v11_12fc4, align 4
  store i32 %v7_12fc4, i32* %r0.global-to-local, align 4
  %v6_12fc8 = load i32, i32* %r2.global-to-local, align 4
  %v7_12fc8 = add i32 %v6_12fc8, -4
  store i32 %v7_12fc8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_12fac, %dec_label_pc_12f3c, %dec_label_pc_13170, %dec_label_pc_13104, %dec_label_pc_13098, %bb140
  %v2_12fd0 = phi i32 [ %v11_12fbc, %.thread19 ], [ %v0_1306831, %.thread25 ], [ %v7_12fbc, %dec_label_pc_12fac ], [ %v2_12f40, %dec_label_pc_12f3c ], [ %v2_12fdc64, %dec_label_pc_13170 ], [ %v2_12fdc63, %dec_label_pc_13104 ], [ %v2_12fdc62, %dec_label_pc_13098 ], [ %v7_12fc4, %bb140 ]
  %v0_12fcc = phi i32 [ %v0_12fcc.pre, %.thread19 ], [ %v2_13010, %.thread25 ], [ %v2_12fac, %dec_label_pc_12fac ], [ %v2_12f44, %dec_label_pc_12f3c ], [ %v0_12fcc60, %dec_label_pc_13170 ], [ %v0_12fcc59, %dec_label_pc_13104 ], [ %v0_12fcc58, %dec_label_pc_13098 ], [ %v7_12fc8, %bb140 ]
  %v1_12fcc = add i32 %v0_12fcc, 4
  store i32 %v1_12fcc, i32* %r2.global-to-local, align 4
  %v3_12fcc = sub i32 0, %v0_12fcc
  %v4_12fcc = and i32 %v1_12fcc, %v3_12fcc
  %v5_12fcc = icmp slt i32 %v4_12fcc, 0
  store i1 %v5_12fcc, i1* %cpsr_v.global-to-local, align 1
  %v6_12fcc = icmp slt i32 %v1_12fcc, 0
  store i1 %v6_12fcc, i1* %cpsr_n.global-to-local, align 1
  %v7_12fcc = icmp eq i32 %v1_12fcc, 0
  store i1 %v7_12fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12fcc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_12fd4 = add i32 %v0_12fcc, 2
  %v3_12fd4 = sub i32 -3, %v0_12fcc
  %v4_12fd4 = and i32 %v3_12fd4, %v1_12fcc
  %v5_12fd4 = icmp slt i32 %v4_12fd4, 0
  store i1 %v5_12fd4, i1* %cpsr_v.global-to-local, align 1
  %v6_12fd4 = icmp slt i32 %v1_12fd4, 0
  store i1 %v6_12fd4, i1* %cpsr_n.global-to-local, align 1
  %v7_12fd4 = icmp eq i32 %v1_12fcc, 2
  store i1 %v7_12fd4, i1* %cpsr_z.global-to-local, align 1
  %v0_12fd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12fd8 = add i32 %v0_12fd8, -1
  %v2_12fd8 = inttoptr i32 %v1_12fd8 to i8*
  %v3_12fd8 = load i8, i8* %v2_12fd8, align 1
  %v4_12fd8 = zext i8 %v3_12fd8 to i32
  store i32 %v4_12fd8, i32* %r3.global-to-local, align 4
  store i32 %v1_12fd8, i32* %r1.global-to-local, align 4
  %v3_12fdc = add i32 %v2_12fd0, -1
  %v4_12fdc = inttoptr i32 %v3_12fdc to i8*
  store i8 %v3_12fd8, i8* %v4_12fdc, align 1
  %v5_12fdc = load i32, i32* %r0.global-to-local, align 4
  %v6_12fdc = add i32 %v5_12fdc, -1
  store i32 %v6_12fdc, i32* %r0.global-to-local, align 4
  %v0_12fe0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12fe0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12fe0 = xor i1 %v0_12fe0, %v1_12fe0
  br i1 %v2_12fe0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_12fe0 = load i32, i32* %r1.global-to-local, align 4
  %v4_12fe0 = add i32 %v3_12fe0, -1
  %v5_12fe0 = inttoptr i32 %v4_12fe0 to i8*
  %v6_12fe0 = load i8, i8* %v5_12fe0, align 1
  %v7_12fe0 = zext i8 %v6_12fe0 to i32
  store i32 %v7_12fe0, i32* %r3.global-to-local, align 4
  store i32 %v4_12fe0, i32* %r1.global-to-local, align 4
  %v6_12fe4 = add i32 %v5_12fdc, -2
  %v7_12fe4 = inttoptr i32 %v6_12fe4 to i8*
  store i8 %v6_12fe0, i8* %v7_12fe4, align 1
  %v8_12fe4 = load i32, i32* %r0.global-to-local, align 4
  %v9_12fe4 = add i32 %v8_12fe4, -1
  store i32 %v9_12fe4, i32* %r0.global-to-local, align 4
  %v1_12fe8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12fe8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_12fec = phi i32 [ %v9_12fe4, %bb143 ], [ %v6_12fdc, %bb142 ]
  %v2_12fec = phi i1 [ %v2_12fe8.pre, %bb143 ], [ %v1_12fe0, %bb142 ]
  %v1_12fec = phi i1 [ %v1_12fe8.pre, %bb143 ], [ %v0_12fe0, %bb142 ]
  %v0_12fe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12fe8 = xor i1 %v2_12fec, %v1_12fec
  %v4_12fe8 = or i1 %v0_12fe8, %v3_12fe8
  br i1 %v4_12fe8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_12fe8 = load i32, i32* %r1.global-to-local, align 4
  %v6_12fe8 = add i32 %v5_12fe8, -1
  %v7_12fe8 = inttoptr i32 %v6_12fe8 to i8*
  %v8_12fe8 = load i8, i8* %v7_12fe8, align 1
  %v9_12fe8 = zext i8 %v8_12fe8 to i32
  store i32 %v9_12fe8, i32* %r3.global-to-local, align 4
  store i32 %v6_12fe8, i32* %r1.global-to-local, align 4
  %v8_12fec = add i32 %v7_12fec, -1
  %v9_12fec = inttoptr i32 %v8_12fec to i8*
  store i8 %v8_12fe8, i8* %v9_12fec, align 1
  %v10_12fec = load i32, i32* %r0.global-to-local, align 4
  %v11_12fec = add i32 %v10_12fec, -1
  store i32 %v11_12fec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12f4c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12ff4 = icmp eq i32 %v1_12f4c, 1
  store i1 %v8_12ff4, i1* %cpsr_n.global-to-local, align 1
  %v9_12ff4 = icmp eq i32 %v1_12f4c, 2
  store i1 %v9_12ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_12ff8 = add i32 %v2_12f3c, -1
  %v2_12ff8 = inttoptr i32 %v1_12ff8 to i8*
  %v3_12ff8 = load i8, i8* %v2_12ff8, align 1
  %v4_12ff8 = zext i8 %v3_12ff8 to i32
  store i32 %v4_12ff8, i32* %r3.global-to-local, align 4
  store i32 %v1_12ff8, i32* %r1.global-to-local, align 4
  %v3_12ffc = add i32 %v2_12f40, -1
  %v4_12ffc = inttoptr i32 %v3_12ffc to i8*
  store i8 %v3_12ff8, i8* %v4_12ffc, align 1
  %v5_12ffc = load i32, i32* %r0.global-to-local, align 4
  %v6_12ffc = add i32 %v5_12ffc, -1
  store i32 %v6_12ffc, i32* %r0.global-to-local, align 4
  br i1 %v8_12ff4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_12ff4
  %v6_13000 = load i32, i32* %r1.global-to-local, align 4
  %v7_13000 = add i32 %v6_13000, -1
  %v8_13000 = inttoptr i32 %v7_13000 to i8*
  %v9_13000 = load i8, i8* %v8_13000, align 1
  %v10_13000 = zext i8 %v9_13000 to i32
  store i32 %v10_13000, i32* %r3.global-to-local, align 4
  store i32 %v7_13000, i32* %r1.global-to-local, align 4
  %v9_13004 = add i32 %v5_12ffc, -2
  %v10_13004 = inttoptr i32 %v9_13004 to i8*
  store i8 %v9_13000, i8* %v10_13004, align 1
  %v11_13004 = load i32, i32* %r0.global-to-local, align 4
  %v12_13004 = add i32 %v11_13004, -1
  store i32 %v12_13004, i32* %r0.global-to-local, align 4
  br i1 %v9_12ff4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_13008 = load i32, i32* %r1.global-to-local, align 4
  %v9_13008 = add i32 %v8_13008, -1
  %v10_13008 = inttoptr i32 %v9_13008 to i8*
  %v11_13008 = load i8, i8* %v10_13008, align 1
  %v12_13008 = zext i8 %v11_13008 to i32
  store i32 %v12_13008, i32* %r3.global-to-local, align 4
  store i32 %v9_13008, i32* %r1.global-to-local, align 4
  %v11_1300c = add i32 %v11_13004, -2
  %v12_1300c = inttoptr i32 %v11_1300c to i8*
  store i8 %v11_13008, i8* %v12_1300c, align 1
  %v13_1300c = load i32, i32* %r0.global-to-local, align 4
  %v14_1300c = add i32 %v13_1300c, -1
  store i32 %v14_1300c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_12ff4, %bb146
  %v0_1306831 = phi i32 [ %v12_13004, %bb145 ], [ %v6_12ffc, %dec_label_pc_12ff4 ], [ %v14_1300c, %bb146 ]
  %v0_13010 = load i32, i32* %r2.global-to-local, align 4
  %v1_13010 = load i32, i32* %ip.global-to-local, align 4
  %v2_13010 = sub i32 %v0_13010, %v1_13010
  store i32 %v2_13010, i32* %r2.global-to-local, align 4
  %v4_13010 = xor i32 %v1_13010, %v0_13010
  %v5_13010 = xor i32 %v2_13010, %v0_13010
  %v6_13010 = and i32 %v5_13010, %v4_13010
  %v7_13010 = icmp slt i32 %v6_13010, 0
  store i1 %v7_13010, i1* %cpsr_v.global-to-local, align 1
  %v8_13010 = icmp slt i32 %v2_13010, 0
  store i1 %v8_13010, i1* %cpsr_n.global-to-local, align 1
  %v9_13010 = icmp eq i32 %v0_13010, %v1_13010
  store i1 %v9_13010, i1* %cpsr_z.global-to-local, align 1
  %v5_13014 = icmp slt i32 %v0_13010, %v1_13010
  br i1 %v5_13014, label %bb141, label %dec_label_pc_13018

dec_label_pc_13018:                               ; preds = %.thread25
  %v0_13018 = load i32, i32* %r1.global-to-local, align 4
  %v1_13018 = urem i32 %v0_13018, 4
  store i32 %v1_13018, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13018 = icmp eq i32 %v1_13018, 0
  store i1 %v2_13018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13018, label %dec_label_pc_12f5c, label %dec_label_pc_13020

dec_label_pc_13020:                               ; preds = %dec_label_pc_12f54, %dec_label_pc_13018
  %v0_1306830 = phi i32 [ %v2_12f40, %dec_label_pc_12f54 ], [ %v0_1306831, %dec_label_pc_13018 ]
  %v0_13114 = phi i32 [ %v2_12f44, %dec_label_pc_12f54 ], [ %v2_13010, %dec_label_pc_13018 ]
  %v0_13020 = phi i32 [ %v2_12f3c, %dec_label_pc_12f54 ], [ %v0_13018, %dec_label_pc_13018 ]
  %v0_13028 = phi i32 [ %v1_12f54, %dec_label_pc_12f54 ], [ %v1_13018, %dec_label_pc_13018 ]
  %v1_13020 = and i32 %v0_13020, -4
  store i32 %v1_13020, i32* %r1.global-to-local, align 4
  %v1_13024 = inttoptr i32 %v1_13020 to i32*
  %v2_13024 = load i32, i32* %v1_13024, align 4
  store i32 %v2_13024, i32* %r3.global-to-local, align 4
  %v7_13028 = icmp ult i32 %v0_13028, 2
  %v2_1310c = add i32 %v0_13114, -12
  %v4_1310c = sub i32 11, %v0_13114
  %v5_1310c = and i32 %v4_1310c, %v0_13114
  %v6_1310c = icmp slt i32 %v5_1310c, 0
  store i1 %v6_1310c, i1* %cpsr_v.global-to-local, align 1
  %v7_1310c = icmp slt i32 %v2_1310c, 0
  store i1 %v7_1310c, i1* %cpsr_n.global-to-local, align 1
  %v8_1310c = icmp eq i32 %v0_13114, 12
  store i1 %v8_1310c, i1* %cpsr_z.global-to-local, align 1
  %v5_13110 = icmp slt i32 %v0_13114, 12
  br i1 %v7_13028, label %dec_label_pc_1310c, label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13020
  %v8_13028 = icmp eq i32 %v0_13028, 2
  br i1 %v8_13028, label %dec_label_pc_130a0, label %dec_label_pc_13034

dec_label_pc_13034:                               ; preds = %dec_label_pc_13030
  br i1 %v5_13110, label %dec_label_pc_13080, label %dec_label_pc_1303c

dec_label_pc_1303c:                               ; preds = %dec_label_pc_13034
  store i32 %v2_1310c, i32* %r2.global-to-local, align 4
  %v3_13040 = load i32, i32* @r4, align 4
  store i32 %v3_13040, i32* %stack_var_-12, align 4
  %v6_13040 = load i32, i32* @r5, align 4
  store i32 %v6_13040, i32* %stack_var_-8, align 4
  %v9_13040 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13044

dec_label_pc_13044:                               ; preds = %dec_label_pc_13044.dec_label_pc_13044_crit_edge, %dec_label_pc_1303c
  %v0_13068 = phi i32 [ %v1_13068, %dec_label_pc_13044.dec_label_pc_13044_crit_edge ], [ %v0_1306830, %dec_label_pc_1303c ]
  %v0_13048 = phi i32 [ %v0_13048.pre, %dec_label_pc_13044.dec_label_pc_13044_crit_edge ], [ %v1_13020, %dec_label_pc_1303c ]
  %v0_13044 = phi i32 [ %v0_13044.pre, %dec_label_pc_13044.dec_label_pc_13044_crit_edge ], [ %v2_13024, %dec_label_pc_1303c ]
  %v3_13044 = mul i32 %v0_13044, 256
  store i32 %v3_13044, i32* %lr.global-to-local, align 4
  %v1_13048 = add i32 %v0_13048, -4
  %v2_13048 = inttoptr i32 %v1_13048 to i32*
  %v3_13048 = load i32, i32* %v2_13048, align 4
  store i32 %v3_13048, i32* %r3.global-to-local, align 4
  %v4_13048 = add i32 %v0_13048, -8
  %v5_13048 = inttoptr i32 %v4_13048 to i32*
  %v6_13048 = load i32, i32* %v5_13048, align 4
  store i32 %v6_13048, i32* %r4.global-to-local, align 4
  %v7_13048 = add i32 %v0_13048, -12
  %v8_13048 = inttoptr i32 %v7_13048 to i32*
  %v9_13048 = load i32, i32* %v8_13048, align 4
  store i32 %v9_13048, i32* %r5.global-to-local, align 4
  %v10_13048 = add i32 %v0_13048, -16
  %v11_13048 = inttoptr i32 %v10_13048 to i32*
  %v12_13048 = load i32, i32* %v11_13048, align 4
  store i32 %v10_13048, i32* %r1.global-to-local, align 4
  %v4_1304c = udiv i32 %v12_13048, 16777216
  %v5_1304c = or i32 %v4_1304c, %v3_13044
  store i32 %v5_1304c, i32* %lr.global-to-local, align 4
  %v3_13050 = mul i32 %v12_13048, 256
  %v4_13054 = udiv i32 %v9_13048, 16777216
  %v5_13054 = or i32 %v3_13050, %v4_13054
  store i32 %v5_13054, i32* %ip.global-to-local, align 4
  %v3_13058 = mul i32 %v9_13048, 256
  %v4_1305c = udiv i32 %v6_13048, 16777216
  %v5_1305c = or i32 %v3_13058, %v4_1305c
  store i32 %v5_1305c, i32* %r5.global-to-local, align 4
  %v3_13060 = mul i32 %v6_13048, 256
  %v4_13064 = udiv i32 %v3_13048, 16777216
  %v5_13064 = or i32 %v3_13060, %v4_13064
  store i32 %v5_13064, i32* %r4.global-to-local, align 4
  %v1_13068 = add i32 %v0_13068, -16
  %v2_13068 = inttoptr i32 %v1_13068 to i32*
  store i32 %v5_13064, i32* %v2_13068, align 4
  %v4_13068 = add i32 %v0_13068, -12
  %v5_13068 = inttoptr i32 %v4_13068 to i32*
  %v6_13068 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13068, i32* %v5_13068, align 4
  %v7_13068 = add i32 %v0_13068, -8
  %v8_13068 = inttoptr i32 %v7_13068 to i32*
  %v9_13068 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13068, i32* %v8_13068, align 4
  %v10_13068 = add i32 %v0_13068, -4
  %v11_13068 = inttoptr i32 %v10_13068 to i32*
  %v12_13068 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13068, i32* %v11_13068, align 4
  store i32 %v1_13068, i32* %r0.global-to-local, align 4
  %v0_1306c = load i32, i32* %r2.global-to-local, align 4
  %v2_1306c = add i32 %v0_1306c, -16
  store i32 %v2_1306c, i32* %r2.global-to-local, align 4
  %v6_13070 = icmp slt i32 %v0_1306c, 16
  br i1 %v6_13070, label %dec_label_pc_13074, label %dec_label_pc_13044.dec_label_pc_13044_crit_edge

dec_label_pc_13044.dec_label_pc_13044_crit_edge:  ; preds = %dec_label_pc_13044
  %v0_13044.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13048.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13044

dec_label_pc_13074:                               ; preds = %dec_label_pc_13044
  %v2_13074 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13074, i32* @r4, align 4
  %v5_13074 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13074, i32* @r5, align 4
  store i32 %v9_13040, i32* @lr, align 4
  %v2_13078 = add i32 %v0_1306c, -4
  store i32 %v2_13078, i32* %r2.global-to-local, align 4
  %v4_13078 = add i32 %v0_1306c, 2147483632
  %v5_13078 = and i32 %v2_13078, %v4_13078
  %v6_13078 = icmp slt i32 %v5_13078, 0
  store i1 %v6_13078, i1* %cpsr_v.global-to-local, align 1
  %v7_13078 = icmp slt i32 %v2_13078, 0
  store i1 %v7_13078, i1* %cpsr_n.global-to-local, align 1
  %v8_13078 = icmp eq i32 %v2_13078, 0
  store i1 %v8_13078, i1* %cpsr_z.global-to-local, align 1
  %v5_1307c = icmp slt i32 %v2_1306c, -12
  br i1 %v5_1307c, label %dec_label_pc_13098, label %dec_label_pc_13080

dec_label_pc_13080:                               ; preds = %dec_label_pc_13074, %dec_label_pc_13034, %dec_label_pc_13080
  %v1_1308c = phi i32 [ %v5_1308c, %dec_label_pc_13080 ], [ %v1_13068, %dec_label_pc_13074 ], [ %v0_1306830, %dec_label_pc_13034 ]
  %v0_13080 = load i32, i32* %r3.global-to-local, align 4
  %v3_13080 = mul i32 %v0_13080, 256
  store i32 %v3_13080, i32* %ip.global-to-local, align 4
  %v0_13084 = load i32, i32* %r1.global-to-local, align 4
  %v1_13084 = add i32 %v0_13084, -4
  %v2_13084 = inttoptr i32 %v1_13084 to i32*
  %v3_13084 = load i32, i32* %v2_13084, align 4
  store i32 %v3_13084, i32* %r3.global-to-local, align 4
  store i32 %v1_13084, i32* %r1.global-to-local, align 4
  %v4_13088 = udiv i32 %v3_13084, 16777216
  %v5_13088 = or i32 %v4_13088, %v3_13080
  store i32 %v5_13088, i32* %ip.global-to-local, align 4
  %v2_1308c = add i32 %v1_1308c, -4
  %v3_1308c = inttoptr i32 %v2_1308c to i32*
  store i32 %v5_13088, i32* %v3_1308c, align 4
  %v4_1308c = load i32, i32* %r0.global-to-local, align 4
  %v5_1308c = add i32 %v4_1308c, -4
  store i32 %v5_1308c, i32* %r0.global-to-local, align 4
  %v0_13090 = load i32, i32* %r2.global-to-local, align 4
  %v2_13090 = add i32 %v0_13090, -4
  store i32 %v2_13090, i32* %r2.global-to-local, align 4
  %v6_13094 = icmp slt i32 %v0_13090, 4
  br i1 %v6_13094, label %dec_label_pc_13098.loopexit, label %dec_label_pc_13080

dec_label_pc_13098.loopexit:                      ; preds = %dec_label_pc_13080
  %v4_13090 = sub i32 3, %v0_13090
  %v5_13090 = and i32 %v4_13090, %v0_13090
  %v6_13090 = icmp slt i32 %v5_13090, 0
  %v7_13090 = icmp slt i32 %v2_13090, 0
  store i1 %v6_13090, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13090, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13098

dec_label_pc_13098:                               ; preds = %dec_label_pc_13098.loopexit, %dec_label_pc_13074
  %v2_12fdc62 = phi i32 [ %v5_1308c, %dec_label_pc_13098.loopexit ], [ %v1_13068, %dec_label_pc_13074 ]
  %v0_12fcc58 = phi i32 [ %v2_13090, %dec_label_pc_13098.loopexit ], [ %v2_13078, %dec_label_pc_13074 ]
  %v0_13098 = load i32, i32* %r1.global-to-local, align 4
  %v1_13098 = add i32 %v0_13098, 3
  store i32 %v1_13098, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_130a0:                               ; preds = %dec_label_pc_13030
  br i1 %v5_13110, label %dec_label_pc_130ec, label %dec_label_pc_130a8

dec_label_pc_130a8:                               ; preds = %dec_label_pc_130a0
  store i32 %v2_1310c, i32* %r2.global-to-local, align 4
  %v3_130ac = load i32, i32* @r4, align 4
  store i32 %v3_130ac, i32* %stack_var_-12, align 4
  %v6_130ac = load i32, i32* @r5, align 4
  store i32 %v6_130ac, i32* %stack_var_-8, align 4
  %v9_130ac = load i32, i32* @lr, align 4
  br label %dec_label_pc_130b0

dec_label_pc_130b0:                               ; preds = %dec_label_pc_130b0.dec_label_pc_130b0_crit_edge, %dec_label_pc_130a8
  %v0_130d4 = phi i32 [ %v1_130d4, %dec_label_pc_130b0.dec_label_pc_130b0_crit_edge ], [ %v0_1306830, %dec_label_pc_130a8 ]
  %v0_130b4 = phi i32 [ %v0_130b4.pre, %dec_label_pc_130b0.dec_label_pc_130b0_crit_edge ], [ %v1_13020, %dec_label_pc_130a8 ]
  %v0_130b0 = phi i32 [ %v0_130b0.pre, %dec_label_pc_130b0.dec_label_pc_130b0_crit_edge ], [ %v2_13024, %dec_label_pc_130a8 ]
  %v3_130b0 = mul i32 %v0_130b0, 65536
  store i32 %v3_130b0, i32* %lr.global-to-local, align 4
  %v1_130b4 = add i32 %v0_130b4, -4
  %v2_130b4 = inttoptr i32 %v1_130b4 to i32*
  %v3_130b4 = load i32, i32* %v2_130b4, align 4
  store i32 %v3_130b4, i32* %r3.global-to-local, align 4
  %v4_130b4 = add i32 %v0_130b4, -8
  %v5_130b4 = inttoptr i32 %v4_130b4 to i32*
  %v6_130b4 = load i32, i32* %v5_130b4, align 4
  store i32 %v6_130b4, i32* %r4.global-to-local, align 4
  %v7_130b4 = add i32 %v0_130b4, -12
  %v8_130b4 = inttoptr i32 %v7_130b4 to i32*
  %v9_130b4 = load i32, i32* %v8_130b4, align 4
  store i32 %v9_130b4, i32* %r5.global-to-local, align 4
  %v10_130b4 = add i32 %v0_130b4, -16
  %v11_130b4 = inttoptr i32 %v10_130b4 to i32*
  %v12_130b4 = load i32, i32* %v11_130b4, align 4
  store i32 %v10_130b4, i32* %r1.global-to-local, align 4
  %v4_130b8 = udiv i32 %v12_130b4, 65536
  %v5_130b8 = or i32 %v4_130b8, %v3_130b0
  store i32 %v5_130b8, i32* %lr.global-to-local, align 4
  %v3_130bc = mul i32 %v12_130b4, 65536
  %v4_130c0 = udiv i32 %v9_130b4, 65536
  %v5_130c0 = or i32 %v3_130bc, %v4_130c0
  store i32 %v5_130c0, i32* %ip.global-to-local, align 4
  %v3_130c4 = mul i32 %v9_130b4, 65536
  %v4_130c8 = udiv i32 %v6_130b4, 65536
  %v5_130c8 = or i32 %v3_130c4, %v4_130c8
  store i32 %v5_130c8, i32* %r5.global-to-local, align 4
  %v3_130cc = mul i32 %v6_130b4, 65536
  %v4_130d0 = udiv i32 %v3_130b4, 65536
  %v5_130d0 = or i32 %v3_130cc, %v4_130d0
  store i32 %v5_130d0, i32* %r4.global-to-local, align 4
  %v1_130d4 = add i32 %v0_130d4, -16
  %v2_130d4 = inttoptr i32 %v1_130d4 to i32*
  store i32 %v5_130d0, i32* %v2_130d4, align 4
  %v4_130d4 = add i32 %v0_130d4, -12
  %v5_130d4 = inttoptr i32 %v4_130d4 to i32*
  %v6_130d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_130d4, i32* %v5_130d4, align 4
  %v7_130d4 = add i32 %v0_130d4, -8
  %v8_130d4 = inttoptr i32 %v7_130d4 to i32*
  %v9_130d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_130d4, i32* %v8_130d4, align 4
  %v10_130d4 = add i32 %v0_130d4, -4
  %v11_130d4 = inttoptr i32 %v10_130d4 to i32*
  %v12_130d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_130d4, i32* %v11_130d4, align 4
  store i32 %v1_130d4, i32* %r0.global-to-local, align 4
  %v0_130d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_130d8 = add i32 %v0_130d8, -16
  store i32 %v2_130d8, i32* %r2.global-to-local, align 4
  %v6_130dc = icmp slt i32 %v0_130d8, 16
  br i1 %v6_130dc, label %dec_label_pc_130e0, label %dec_label_pc_130b0.dec_label_pc_130b0_crit_edge

dec_label_pc_130b0.dec_label_pc_130b0_crit_edge:  ; preds = %dec_label_pc_130b0
  %v0_130b0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_130b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_130b0

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130b0
  %v2_130e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_130e0, i32* @r4, align 4
  %v5_130e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_130e0, i32* @r5, align 4
  store i32 %v9_130ac, i32* @lr, align 4
  %v2_130e4 = add i32 %v0_130d8, -4
  store i32 %v2_130e4, i32* %r2.global-to-local, align 4
  %v4_130e4 = add i32 %v0_130d8, 2147483632
  %v5_130e4 = and i32 %v2_130e4, %v4_130e4
  %v6_130e4 = icmp slt i32 %v5_130e4, 0
  store i1 %v6_130e4, i1* %cpsr_v.global-to-local, align 1
  %v7_130e4 = icmp slt i32 %v2_130e4, 0
  store i1 %v7_130e4, i1* %cpsr_n.global-to-local, align 1
  %v8_130e4 = icmp eq i32 %v2_130e4, 0
  store i1 %v8_130e4, i1* %cpsr_z.global-to-local, align 1
  %v5_130e8 = icmp slt i32 %v2_130d8, -12
  br i1 %v5_130e8, label %dec_label_pc_13104, label %dec_label_pc_130ec

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130e0, %dec_label_pc_130a0, %dec_label_pc_130ec
  %v1_130f8 = phi i32 [ %v5_130f8, %dec_label_pc_130ec ], [ %v1_130d4, %dec_label_pc_130e0 ], [ %v0_1306830, %dec_label_pc_130a0 ]
  %v0_130ec = load i32, i32* %r3.global-to-local, align 4
  %v3_130ec = mul i32 %v0_130ec, 65536
  store i32 %v3_130ec, i32* %ip.global-to-local, align 4
  %v0_130f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_130f0 = add i32 %v0_130f0, -4
  %v2_130f0 = inttoptr i32 %v1_130f0 to i32*
  %v3_130f0 = load i32, i32* %v2_130f0, align 4
  store i32 %v3_130f0, i32* %r3.global-to-local, align 4
  store i32 %v1_130f0, i32* %r1.global-to-local, align 4
  %v4_130f4 = udiv i32 %v3_130f0, 65536
  %v5_130f4 = or i32 %v4_130f4, %v3_130ec
  store i32 %v5_130f4, i32* %ip.global-to-local, align 4
  %v2_130f8 = add i32 %v1_130f8, -4
  %v3_130f8 = inttoptr i32 %v2_130f8 to i32*
  store i32 %v5_130f4, i32* %v3_130f8, align 4
  %v4_130f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_130f8 = add i32 %v4_130f8, -4
  store i32 %v5_130f8, i32* %r0.global-to-local, align 4
  %v0_130fc = load i32, i32* %r2.global-to-local, align 4
  %v2_130fc = add i32 %v0_130fc, -4
  store i32 %v2_130fc, i32* %r2.global-to-local, align 4
  %v6_13100 = icmp slt i32 %v0_130fc, 4
  br i1 %v6_13100, label %dec_label_pc_13104.loopexit, label %dec_label_pc_130ec

dec_label_pc_13104.loopexit:                      ; preds = %dec_label_pc_130ec
  %v4_130fc = sub i32 3, %v0_130fc
  %v5_130fc = and i32 %v4_130fc, %v0_130fc
  %v6_130fc = icmp slt i32 %v5_130fc, 0
  %v7_130fc = icmp slt i32 %v2_130fc, 0
  store i1 %v6_130fc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_130fc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13104

dec_label_pc_13104:                               ; preds = %dec_label_pc_13104.loopexit, %dec_label_pc_130e0
  %v2_12fdc63 = phi i32 [ %v5_130f8, %dec_label_pc_13104.loopexit ], [ %v1_130d4, %dec_label_pc_130e0 ]
  %v0_12fcc59 = phi i32 [ %v2_130fc, %dec_label_pc_13104.loopexit ], [ %v2_130e4, %dec_label_pc_130e0 ]
  %v0_13104 = load i32, i32* %r1.global-to-local, align 4
  %v1_13104 = add i32 %v0_13104, 2
  store i32 %v1_13104, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1310c:                               ; preds = %dec_label_pc_13020
  br i1 %v5_13110, label %dec_label_pc_13158, label %dec_label_pc_13114

dec_label_pc_13114:                               ; preds = %dec_label_pc_1310c
  store i32 %v2_1310c, i32* %r2.global-to-local, align 4
  %v3_13118 = load i32, i32* @r4, align 4
  store i32 %v3_13118, i32* %stack_var_-12, align 4
  %v6_13118 = load i32, i32* @r5, align 4
  store i32 %v6_13118, i32* %stack_var_-8, align 4
  %v9_13118 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1311c

dec_label_pc_1311c:                               ; preds = %dec_label_pc_1311c.dec_label_pc_1311c_crit_edge, %dec_label_pc_13114
  %v0_13140 = phi i32 [ %v1_13140, %dec_label_pc_1311c.dec_label_pc_1311c_crit_edge ], [ %v0_1306830, %dec_label_pc_13114 ]
  %v0_13120 = phi i32 [ %v0_13120.pre, %dec_label_pc_1311c.dec_label_pc_1311c_crit_edge ], [ %v1_13020, %dec_label_pc_13114 ]
  %v0_1311c = phi i32 [ %v0_1311c.pre, %dec_label_pc_1311c.dec_label_pc_1311c_crit_edge ], [ %v2_13024, %dec_label_pc_13114 ]
  %v3_1311c = mul i32 %v0_1311c, 16777216
  store i32 %v3_1311c, i32* %lr.global-to-local, align 4
  %v1_13120 = add i32 %v0_13120, -4
  %v2_13120 = inttoptr i32 %v1_13120 to i32*
  %v3_13120 = load i32, i32* %v2_13120, align 4
  store i32 %v3_13120, i32* %r3.global-to-local, align 4
  %v4_13120 = add i32 %v0_13120, -8
  %v5_13120 = inttoptr i32 %v4_13120 to i32*
  %v6_13120 = load i32, i32* %v5_13120, align 4
  store i32 %v6_13120, i32* %r4.global-to-local, align 4
  %v7_13120 = add i32 %v0_13120, -12
  %v8_13120 = inttoptr i32 %v7_13120 to i32*
  %v9_13120 = load i32, i32* %v8_13120, align 4
  store i32 %v9_13120, i32* %r5.global-to-local, align 4
  %v10_13120 = add i32 %v0_13120, -16
  %v11_13120 = inttoptr i32 %v10_13120 to i32*
  %v12_13120 = load i32, i32* %v11_13120, align 4
  store i32 %v10_13120, i32* %r1.global-to-local, align 4
  %v4_13124 = udiv i32 %v12_13120, 256
  %v5_13124 = or i32 %v4_13124, %v3_1311c
  store i32 %v5_13124, i32* %lr.global-to-local, align 4
  %v3_13128 = mul i32 %v12_13120, 16777216
  %v4_1312c = udiv i32 %v9_13120, 256
  %v5_1312c = or i32 %v3_13128, %v4_1312c
  store i32 %v5_1312c, i32* %ip.global-to-local, align 4
  %v3_13130 = mul i32 %v9_13120, 16777216
  %v4_13134 = udiv i32 %v6_13120, 256
  %v5_13134 = or i32 %v3_13130, %v4_13134
  store i32 %v5_13134, i32* %r5.global-to-local, align 4
  %v3_13138 = mul i32 %v6_13120, 16777216
  %v4_1313c = udiv i32 %v3_13120, 256
  %v5_1313c = or i32 %v3_13138, %v4_1313c
  store i32 %v5_1313c, i32* %r4.global-to-local, align 4
  %v1_13140 = add i32 %v0_13140, -16
  %v2_13140 = inttoptr i32 %v1_13140 to i32*
  store i32 %v5_1313c, i32* %v2_13140, align 4
  %v4_13140 = add i32 %v0_13140, -12
  %v5_13140 = inttoptr i32 %v4_13140 to i32*
  %v6_13140 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13140, i32* %v5_13140, align 4
  %v7_13140 = add i32 %v0_13140, -8
  %v8_13140 = inttoptr i32 %v7_13140 to i32*
  %v9_13140 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13140, i32* %v8_13140, align 4
  %v10_13140 = add i32 %v0_13140, -4
  %v11_13140 = inttoptr i32 %v10_13140 to i32*
  %v12_13140 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13140, i32* %v11_13140, align 4
  store i32 %v1_13140, i32* %r0.global-to-local, align 4
  %v0_13144 = load i32, i32* %r2.global-to-local, align 4
  %v2_13144 = add i32 %v0_13144, -16
  store i32 %v2_13144, i32* %r2.global-to-local, align 4
  %v6_13148 = icmp slt i32 %v0_13144, 16
  br i1 %v6_13148, label %dec_label_pc_1314c, label %dec_label_pc_1311c.dec_label_pc_1311c_crit_edge

dec_label_pc_1311c.dec_label_pc_1311c_crit_edge:  ; preds = %dec_label_pc_1311c
  %v0_1311c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13120.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1311c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_1311c
  %v2_1314c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1314c, i32* @r4, align 4
  %v5_1314c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1314c, i32* @r5, align 4
  store i32 %v9_13118, i32* @lr, align 4
  %v2_13150 = add i32 %v0_13144, -4
  store i32 %v2_13150, i32* %r2.global-to-local, align 4
  %v4_13150 = add i32 %v0_13144, 2147483632
  %v5_13150 = and i32 %v2_13150, %v4_13150
  %v6_13150 = icmp slt i32 %v5_13150, 0
  store i1 %v6_13150, i1* %cpsr_v.global-to-local, align 1
  %v7_13150 = icmp slt i32 %v2_13150, 0
  store i1 %v7_13150, i1* %cpsr_n.global-to-local, align 1
  %v8_13150 = icmp eq i32 %v2_13150, 0
  store i1 %v8_13150, i1* %cpsr_z.global-to-local, align 1
  %v5_13154 = icmp slt i32 %v2_13144, -12
  br i1 %v5_13154, label %dec_label_pc_13170, label %dec_label_pc_13158

dec_label_pc_13158:                               ; preds = %dec_label_pc_1314c, %dec_label_pc_1310c, %dec_label_pc_13158
  %v1_13164 = phi i32 [ %v5_13164, %dec_label_pc_13158 ], [ %v1_13140, %dec_label_pc_1314c ], [ %v0_1306830, %dec_label_pc_1310c ]
  %v0_13158 = load i32, i32* %r3.global-to-local, align 4
  %v3_13158 = mul i32 %v0_13158, 16777216
  store i32 %v3_13158, i32* %ip.global-to-local, align 4
  %v0_1315c = load i32, i32* %r1.global-to-local, align 4
  %v1_1315c = add i32 %v0_1315c, -4
  %v2_1315c = inttoptr i32 %v1_1315c to i32*
  %v3_1315c = load i32, i32* %v2_1315c, align 4
  store i32 %v3_1315c, i32* %r3.global-to-local, align 4
  store i32 %v1_1315c, i32* %r1.global-to-local, align 4
  %v4_13160 = udiv i32 %v3_1315c, 256
  %v5_13160 = or i32 %v4_13160, %v3_13158
  store i32 %v5_13160, i32* %ip.global-to-local, align 4
  %v2_13164 = add i32 %v1_13164, -4
  %v3_13164 = inttoptr i32 %v2_13164 to i32*
  store i32 %v5_13160, i32* %v3_13164, align 4
  %v4_13164 = load i32, i32* %r0.global-to-local, align 4
  %v5_13164 = add i32 %v4_13164, -4
  store i32 %v5_13164, i32* %r0.global-to-local, align 4
  %v0_13168 = load i32, i32* %r2.global-to-local, align 4
  %v2_13168 = add i32 %v0_13168, -4
  store i32 %v2_13168, i32* %r2.global-to-local, align 4
  %v6_1316c = icmp slt i32 %v0_13168, 4
  br i1 %v6_1316c, label %dec_label_pc_13170.loopexit, label %dec_label_pc_13158

dec_label_pc_13170.loopexit:                      ; preds = %dec_label_pc_13158
  %v4_13168 = sub i32 3, %v0_13168
  %v5_13168 = and i32 %v4_13168, %v0_13168
  %v6_13168 = icmp slt i32 %v5_13168, 0
  %v7_13168 = icmp slt i32 %v2_13168, 0
  store i1 %v6_13168, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13168, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13170

dec_label_pc_13170:                               ; preds = %dec_label_pc_13170.loopexit, %dec_label_pc_1314c
  %v2_12fdc64 = phi i32 [ %v5_13164, %dec_label_pc_13170.loopexit ], [ %v1_13140, %dec_label_pc_1314c ]
  %v0_12fcc60 = phi i32 [ %v2_13168, %dec_label_pc_13170.loopexit ], [ %v2_13150, %dec_label_pc_1314c ]
  %v0_13170 = load i32, i32* %r1.global-to-local, align 4
  %v1_13170 = add i32 %v0_13170, 1
  store i32 %v1_13170, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_13164, { 0, 2, 1 }
  uselistorder i32 %v3_13158, { 1, 0 }
  uselistorder i32 %v2_13150, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13140, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13120, { 1, 0 }
  uselistorder i32 %v3_1311c, { 1, 0 }
  uselistorder i32 %v0_13120, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13140, { 3, 2, 1, 0 }
  uselistorder i32 %v5_130f8, { 0, 2, 1 }
  uselistorder i32 %v3_130ec, { 1, 0 }
  uselistorder i32 %v2_130e4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_130d4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_130b4, { 1, 0 }
  uselistorder i32 %v3_130b0, { 1, 0 }
  uselistorder i32 %v0_130b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_130d4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1308c, { 0, 2, 1 }
  uselistorder i32 %v3_13080, { 1, 0 }
  uselistorder i32 %v2_13078, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13068, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13048, { 1, 0 }
  uselistorder i32 %v3_13044, { 1, 0 }
  uselistorder i32 %v0_13048, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13068, { 3, 2, 1, 0 }
  uselistorder i1 %v5_13110, { 2, 0, 1 }
  uselistorder i32 %v0_13028, { 1, 0 }
  uselistorder i32 %v0_13114, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1306830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13018, { 2, 1, 0 }
  uselistorder i32 %v0_13018, { 2, 0, 1 }
  uselistorder i32 %v2_13010, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13010, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13010, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1306831, { 2, 1, 0 }
  uselistorder i32 %v11_12fec, { 1, 0 }
  uselistorder i32 %v7_12fec, { 1, 0 }
  uselistorder i32 %v1_12fcc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12fcc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12fd0, { 1, 0 }
  uselistorder i32 %v7_12fc4, { 0, 2, 1 }
  uselistorder i32 %v10_12fc0, { 1, 0 }
  uselistorder i32 %v9_12fb8, { 1, 0, 2 }
  uselistorder i32 %v6_12fb4, { 1, 0 }
  uselistorder i32 %v2_12fac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12fac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12fbc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12fa0, { 0, 2, 1 }
  uselistorder i32 %v13_12f9c, { 1, 0 }
  uselistorder i32 %v4_12f98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_12f98, { 2, 0, 1 }
  uselistorder i32 %v6_12fa0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12f90, { 0, 2, 1 }
  uselistorder i32 %v16_12f8c, { 1, 0 }
  uselistorder i32 %v4_12f88, { 1, 2, 0 }
  uselistorder i32 %v0_12f98.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_12f90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12f7c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_12f78, { 1, 0 }
  uselistorder i32 %v1_12f74, { 1, 0 }
  uselistorder i32 %v10_12f70, { 1, 0 }
  uselistorder i32 %v0_12f70, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12f74, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_12f68, { 0, 2, 1 }
  uselistorder i32 %v2_12f5c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12f5c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_12f7448, { 1, 2, 0 }
  uselistorder i32 %v1_12f54, { 2, 1, 0 }
  uselistorder i32 %v1_12f4c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_12f44, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_12f40, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_12f3c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_12f3c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_12f28, { 0, 2, 1 }
  uselistorder i32 %v3_12f1c, { 1, 0 }
  uselistorder i32 %v2_12f14, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12f04, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12ee4, { 1, 0, 2 }
  uselistorder i32 %v5_12ee4, { 1, 0, 2 }
  uselistorder i32 %v2_12ee4, { 1, 0, 2 }
  uselistorder i32 %v3_12ee0, { 1, 0 }
  uselistorder i32 %v0_12ee4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12f04, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12ebc, { 0, 2, 1 }
  uselistorder i32 %v3_12eb0, { 1, 0 }
  uselistorder i32 %v2_12ea8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12e98, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12e78, { 1, 0, 2 }
  uselistorder i32 %v5_12e78, { 1, 0, 2 }
  uselistorder i32 %v2_12e78, { 1, 0, 2 }
  uselistorder i32 %v3_12e74, { 1, 0 }
  uselistorder i32 %v0_12e78, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12e98, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12e50, { 0, 2, 1 }
  uselistorder i32 %v3_12e44, { 1, 0 }
  uselistorder i32 %v2_12e3c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12e2c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12e0c, { 1, 0, 2 }
  uselistorder i32 %v5_12e0c, { 1, 0, 2 }
  uselistorder i32 %v2_12e0c, { 1, 0, 2 }
  uselistorder i32 %v3_12e08, { 1, 0 }
  uselistorder i32 %v0_12e0c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12e2c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_12ed4, { 2, 0, 1 }
  uselistorder i32 %v0_12ed8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_12e2c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12ddc, { 1, 0 }
  uselistorder i32 %v0_12ddc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_12dd4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12dd4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12dd4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_12e2c75, { 2, 1, 0 }
  uselistorder i32 %v1_12db4, { 1, 0, 2 }
  uselistorder i32 %v1_12d8c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12d8c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_12d78, { 1, 0, 2 }
  uselistorder i32 %v6_12d74, { 1, 0 }
  uselistorder i32 %v2_12d6c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12d6c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12d7c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_12d64, { 0, 2, 1 }
  uselistorder i32 %v3_12d64, { 3, 0, 1, 2 }
  uselistorder i1 %v0_12d64, { 1, 0 }
  uselistorder i1 %v1_12d64, { 1, 0 }
  uselistorder i32 %v3_12d60, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12d58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_12d44, { 1, 2, 0 }
  uselistorder i32 %v12_12d38, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12d2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12d30, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_12d20, { 0, 2, 1 }
  uselistorder i32 %v2_12d18, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12d18, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_12d10, { 1, 0 }
  uselistorder i32 %v1_12d08, { 2, 1, 0 }
  uselistorder i32 %v2_12d00, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_12d00, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_12cf0, { 1, 0 }
  uselistorder i32 %v1_12cf0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_12cf0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 6, 3, 8, 4, 44, 7, 45, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 19, 20, 21, 22, 46, 23, 0, 25, 1, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 6, 9, 5, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 6, 7, 4, 9, 5, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 23, 24, 1, 0, 15, 17, 16, 18, 2, 20, 19, 25, 21, 8, 3, 9, 4, 22, 10, 5, 6, 11, 12, 7, 13, 14 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 18, 19, 20, 14 }
  uselistorder i32 65536, { 5, 4, 10, 6, 11, 7, 12, 8, 13, 9, 14, 15, 16, 20, 17, 21, 18, 22, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 60, 59, 61, 1, 62, 63, 2, 64, 0, 3, 65, 66, 67, 68, 69, 72, 70, 71, 73, 74, 75, 80, 81, 82, 83, 76, 77, 78, 79, 84, 87, 88, 85, 89, 86, 90, 91, 94, 95, 96, 92, 93, 97, 99, 98, 101, 102, 100, 103, 104, 105, 108, 109, 106, 110, 107, 111, 112, 115, 116, 117, 113, 114, 118, 138, 120, 119, 121, 123, 122, 125, 124, 126, 127, 129, 130, 131, 128, 132, 133, 135, 136, 137, 134 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 62, 61, 63, 65, 64, 66, 72, 67, 73, 68, 74, 69, 75, 76, 70, 77, 71, 79, 78, 81, 80, 83, 82, 85, 84, 86, 87, 88, 92, 89, 93, 90, 94, 91, 95, 96, 97, 98, 101, 99, 102, 100, 103, 105, 104, 106, 107, 109, 108, 111, 110, 112, 114, 113, 115, 116, 117, 120, 118, 119, 122, 121, 123, 129, 124, 130, 125, 131, 126, 128, 132, 133, 134, 127, 135, 136, 142, 137, 143, 138, 144, 139, 141, 145, 146, 147, 140, 148 }
  uselistorder i32* @r5, { 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 186, 187, 188, 190, 568, 569, 570, 571, 572, 0, 573, 574, 191, 192, 193, 194, 195, 196, 453, 454, 455, 456, 457, 458, 459, 460, 490, 491, 492, 493, 494, 495, 504, 505, 506, 513, 514, 515, 516, 507, 508, 509, 510, 511, 512, 59, 60, 61, 197, 198, 4, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 13, 14, 109, 110, 111, 112, 113, 114, 15, 115, 42, 116, 117, 118, 3, 2, 119, 120, 16, 17, 18, 19, 20, 43, 10, 11, 12, 46, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 44, 45, 121, 122, 123, 124, 125, 51, 126, 127, 7, 128, 129, 130, 131, 140, 141, 142, 132, 133, 134, 135, 136, 137, 138, 139, 5, 52, 53, 54, 55, 56, 57, 58, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 1, 163, 164, 165, 166, 167, 168, 6, 169, 170, 171, 172, 173, 174, 175, 176, 210, 211, 212, 213, 214, 8, 215, 216, 217, 218, 219, 220, 221, 222, 9, 223, 224, 225, 226, 227, 228, 234, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 262, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 287, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 334, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 517, 518, 519, 520, 521, 522, 531, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 496, 499, 497, 498, 500, 501, 502, 503 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 7, 8, 9, 17, 18, 10, 11, 12, 13, 14, 0, 15, 16, 19, 20, 21, 22, 3, 23, 4, 24, 5, 25, 26, 27, 28, 29, 30, 31, 1, 32, 33, 34, 6, 35, 36, 37, 2, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 4, 5, 2, 3, 1, 6, 7 }
  uselistorder i32 40, { 1, 7, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2 }
  uselistorder i32 24, { 0, 69, 70, 33, 34, 1, 71, 72, 31, 32, 11, 37, 12, 38, 63, 39, 64, 40, 56, 35, 36, 59, 41, 13, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 55, 61, 57, 58, 65, 66, 67, 62, 68, 2, 73, 14, 15, 3, 74, 16, 17, 4, 75, 76, 77, 18, 19, 5, 20, 21, 22, 6, 23, 7, 8, 24, 78, 25, 9, 79, 80, 81, 26, 27, 84, 28, 10, 85, 29, 82, 30, 83 }
  uselistorder i32 16, { 31, 32, 33, 165, 34, 166, 167, 35, 168, 169, 36, 170, 171, 172, 173, 174, 175, 87, 88, 68, 69, 92, 89, 90, 91, 93, 23, 94, 95, 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 46, 77, 47, 37, 51, 70, 71, 48, 72, 49, 73, 50, 74, 78, 80, 81, 82, 24, 67, 13, 14, 21, 65, 15, 83, 16, 52, 79, 53, 75, 76, 40, 39, 38, 84, 41, 85, 42, 54, 55, 86, 43, 56, 25, 96, 97, 98, 99, 26, 100, 101, 102, 103, 104, 105, 106, 29, 107, 108, 109, 58, 110, 44, 57, 111, 112, 59, 113, 114, 115, 17, 116, 117, 1, 60, 118, 119, 120, 61, 121, 122, 123, 124, 125, 2, 62, 126, 127, 18, 128, 66, 19, 129, 63, 130, 131, 132, 20, 30, 133, 64, 134, 135, 3, 45, 136, 137, 138, 139, 140, 141, 27, 142, 143, 144, 145, 147, 146, 148, 149, 151, 152, 153, 154, 155, 28, 156, 157, 158, 159, 160, 162, 161, 163, 164, 150 }
  uselistorder i32 20, { 101, 2, 102, 103, 0, 3, 104, 34, 35, 22, 23, 1, 36, 37, 38, 39, 16, 4, 24, 17, 25, 18, 26, 19, 27, 29, 5, 30, 6, 31, 21, 28, 32, 33, 40, 43, 41, 7, 42, 44, 45, 46, 47, 49, 50, 48, 8, 51, 52, 53, 54, 55, 56, 59, 60, 57, 9, 58, 61, 62, 63, 64, 65, 66, 69, 70, 67, 10, 68, 71, 72, 73, 74, 77, 78, 75, 11, 76, 79, 80, 81, 82, 83, 84, 87, 85, 20, 86, 88, 89, 90, 93, 13, 91, 12, 92, 94, 96, 99, 15, 97, 14, 98, 100, 95 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 29, 30, 31, 70, 77, 7, 35, 2, 8, 33, 9, 32, 0, 10, 36, 11, 37, 12, 38, 13, 39, 14, 40, 15, 41, 16, 42, 17, 43, 18, 44, 19, 45, 20, 46, 34, 21, 22, 23, 47, 48, 49, 24, 50, 51, 52, 53, 3, 54, 55, 56, 57, 25, 58, 4, 59, 26, 60, 61, 5, 62, 63, 6, 64, 65, 66, 67, 68, 27, 69, 72, 73, 74, 75, 28, 76, 1, 71 }
  uselistorder i32 -8, { 15, 16, 17, 18, 19, 20, 14, 13, 6, 12, 11, 10, 9, 21, 22, 23, 24, 7, 25, 0, 28, 8, 26, 27, 5, 1, 3, 2, 4 }
  uselistorder i1 false, { 21, 22, 23, 32, 13, 20, 33, 34, 17, 18, 19, 35, 12, 36, 37, 0, 26, 25, 27, 24, 2, 4, 14, 38, 5, 29, 3, 11, 15, 31, 6, 7, 8, 28, 1, 16, 9, 10, 30, 39, 40, 41 }
  uselistorder i32 4, { 75, 66, 67, 5, 379, 68, 380, 51, 6, 7, 69, 381, 70, 382, 383, 384, 385, 71, 386, 387, 388, 389, 72, 390, 391, 392, 393, 394, 8, 395, 396, 397, 398, 399, 73, 400, 50, 401, 402, 403, 404, 405, 406, 9, 10, 74, 407, 239, 240, 171, 172, 241, 242, 243, 408, 409, 410, 411, 412, 121, 122, 123, 52, 124, 125, 353, 355, 354, 351, 352, 318, 319, 320, 321, 356, 357, 358, 359, 341, 342, 343, 360, 361, 126, 127, 128, 129, 130, 42, 11, 12, 244, 245, 246, 247, 248, 249, 13, 14, 58, 15, 16, 59, 362, 363, 169, 17, 18, 89, 76, 260, 250, 53, 175, 90, 176, 131, 177, 208, 209, 210, 193, 194, 49, 48, 211, 178, 179, 173, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 91, 196, 197, 198, 195, 60, 212, 92, 199, 77, 93, 94, 19, 213, 20, 214, 215, 21, 22, 216, 217, 44, 218, 43, 223, 95, 224, 96, 225, 97, 226, 98, 227, 99, 229, 100, 230, 231, 228, 219, 101, 220, 221, 222, 200, 132, 202, 23, 203, 204, 201, 24, 205, 45, 102, 206, 207, 232, 56, 55, 54, 233, 103, 25, 26, 27, 28, 29, 30, 234, 46, 235, 47, 236, 237, 238, 0, 104, 105, 106, 107, 251, 133, 252, 253, 254, 255, 134, 135, 109, 256, 57, 31, 108, 258, 78, 259, 261, 136, 262, 263, 137, 138, 264, 110, 265, 79, 266, 267, 139, 140, 268, 141, 269, 270, 142, 143, 61, 271, 111, 272, 80, 273, 274, 275, 276, 277, 278, 112, 81, 279, 280, 144, 281, 282, 283, 284, 145, 146, 2, 285, 113, 286, 82, 287, 288, 289, 147, 290, 291, 148, 149, 3, 62, 292, 114, 294, 83, 295, 296, 297, 298, 150, 151, 299, 300, 301, 152, 302, 303, 115, 304, 4, 305, 84, 306, 116, 307, 308, 309, 153, 310, 311, 312, 313, 314, 154, 155, 117, 315, 63, 85, 316, 86, 317, 364, 365, 156, 366, 367, 368, 118, 369, 119, 370, 371, 372, 373, 157, 158, 120, 374, 64, 375, 87, 376, 88, 378, 159, 322, 323, 32, 160, 324, 325, 33, 161, 326, 327, 34, 162, 65, 328, 329, 35, 330, 163, 331, 332, 36, 164, 333, 334, 37, 165, 335, 336, 38, 166, 337, 338, 39, 167, 339, 340, 40, 344, 168, 345, 346, 347, 348, 41, 349, 350, 1, 377, 293, 257, 170 }
  uselistorder i32* @r2, { 86, 87, 27, 9, 28, 30, 29, 31, 32, 33, 34, 7, 88, 1, 89, 94, 95, 98, 90, 61, 65, 66, 69, 67, 68, 62, 63, 64, 49, 70, 17, 0, 96, 3, 97, 6, 35, 36, 37, 8, 10, 91, 92, 93, 71, 72, 73, 11, 74, 75, 76, 77, 2, 78, 79, 80, 81, 82, 83, 4, 38, 84, 44, 45, 42, 43, 46, 18, 12, 13, 14, 21, 22, 19, 20, 15, 16, 85, 23, 24, 25, 26, 39, 40, 41, 47, 48, 5, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder label %dec_label_pc_13158, { 2, 0, 1 }
  uselistorder label %dec_label_pc_130ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13080, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13020, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_12fac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_12f70, { 1, 0 }
  uselistorder label %dec_label_pc_12f5c, { 1, 0 }
  uselistorder label %dec_label_pc_12f1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12eb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12de4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_12d58, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12d18, { 1, 0 }
}

define i32 @function_13178(i32 %arg1) local_unnamed_addr {
dec_label_pc_13178:
  ret i32 %arg1
}

define i32 @function_13180() local_unnamed_addr {
dec_label_pc_13180:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_13180 = load i32, i32* @r0, align 4
  %v2_13180 = icmp eq i32 %v0_13180, 0
  %v3_13184 = load i32, i32* @r4, align 4
  store i32 %v3_13184, i32* %stack_var_-20, align 4
  %v0_13188 = load i32, i32* @r1, align 4
  br i1 %v2_13180, label %dec_label_pc_13260, label %dec_label_pc_1319c.lr.ph

dec_label_pc_1319c:                               ; preds = %dec_label_pc_1319c.lr.ph, %dec_label_pc_13220
  %v1_13220 = phi i32 [ 0, %dec_label_pc_1319c.lr.ph ], [ %v5_13220, %dec_label_pc_13220 ]
  %v0_13224 = phi i32 [ 1, %dec_label_pc_1319c.lr.ph ], [ %v1_13224, %dec_label_pc_13220 ]
  %v0_131a4 = phi i32 [ %v0_13180, %dec_label_pc_1319c.lr.ph ], [ %v0_131a425, %dec_label_pc_13220 ]
  store i32 %v2_131a0.pre, i32* @lr, align 4
  %v1_131a4 = inttoptr i32 %v0_131a4 to i8*
  %v2_131a4 = load i8, i8* %v1_131a4, align 1
  %v3_131a4 = zext i8 %v2_131a4 to i32
  %v3_131a8 = mul nuw nsw i32 %v3_131a4, 2
  %v4_131a8 = add i32 %v3_131a8, %v2_131a0.pre
  %v5_131a8 = inttoptr i32 %v4_131a8 to i8*
  %v6_131a8 = load i8, i8* %v5_131a8, align 1
  %v1_131ac = and i8 %v6_131a8, 8
  %v2_131ac = icmp eq i8 %v1_131ac, 0
  br i1 %v2_131ac, label %dec_label_pc_13260, label %dec_label_pc_131b4

dec_label_pc_131b4:                               ; preds = %dec_label_pc_1319c
  br label %dec_label_pc_131d4

dec_label_pc_131bc:                               ; preds = %dec_label_pc_131d4
  %v3_131c0 = mul i32 %v0_13220, 10
  %v4_131c0 = add i32 %v3_131d4, %v3_131c0
  %v1_131c4 = add i32 %v4_131c0, -48
  %v8_131cc = icmp sgt i32 %v1_131c4, 255
  br i1 %v8_131cc, label %dec_label_pc_13260, label %dec_label_pc_131d0

dec_label_pc_131d0:                               ; preds = %dec_label_pc_131bc
  %v1_131d0 = add i32 %v0_13210, 1
  store i32 %v1_131d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_131d4

dec_label_pc_131d4:                               ; preds = %dec_label_pc_131b4, %dec_label_pc_131d0
  %v0_13220 = phi i32 [ 0, %dec_label_pc_131b4 ], [ %v1_131c4, %dec_label_pc_131d0 ]
  %v0_13210 = phi i32 [ %v0_131a4, %dec_label_pc_131b4 ], [ %v1_131d0, %dec_label_pc_131d0 ]
  %v1_131d4 = inttoptr i32 %v0_13210 to i8*
  %v2_131d4 = load i8, i8* %v1_131d4, align 1
  %v3_131d4 = zext i8 %v2_131d4 to i32
  %v2_131d8 = mul nuw nsw i32 %v3_131d4, 2
  %v2_131dc = add i32 %v2_131d8, %v2_131a0.pre
  %v3_131e0 = inttoptr i32 %v2_131dc to i8*
  %v4_131e0 = load i8, i8* %v3_131e0, align 1
  %v6_131e0 = zext i8 %v4_131e0 to i32
  %v1_131ec = and i32 %v6_131e0, 8
  %v2_131ec = icmp eq i32 %v1_131ec, 0
  br i1 %v2_131ec, label %dec_label_pc_131f4, label %dec_label_pc_131bc

dec_label_pc_131f4:                               ; preds = %dec_label_pc_131d4
  %v8_131f8 = icmp sgt i32 %v0_13224, 3
  br i1 %v8_131f8, label %dec_label_pc_1320c, label %dec_label_pc_131fc

dec_label_pc_131fc:                               ; preds = %dec_label_pc_131f4
  %v7_131fc = icmp eq i8 %v2_131d4, 46
  br i1 %v7_131fc, label %dec_label_pc_13204, label %dec_label_pc_13260

dec_label_pc_13204:                               ; preds = %dec_label_pc_131fc
  %v1_13204 = add i32 %v0_13210, 1
  store i32 %v1_13204, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13220

dec_label_pc_1320c:                               ; preds = %dec_label_pc_131f4
  %v2_1320c = icmp eq i8 %v2_131d4, 0
  %v1_13210 = add i32 %v0_13210, 1
  store i32 %v1_13210, i32* %r0.global-to-local, align 4
  br i1 %v2_1320c, label %dec_label_pc_13220, label %dec_label_pc_13218

dec_label_pc_13218:                               ; preds = %dec_label_pc_1320c
  %v1_13218 = and i32 %v6_131e0, 32
  %v2_13218 = icmp eq i32 %v1_13218, 0
  br i1 %v2_13218, label %dec_label_pc_13260, label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %dec_label_pc_13218, %dec_label_pc_1320c, %dec_label_pc_13204
  %v0_131a425 = phi i32 [ %v1_13210, %dec_label_pc_13218 ], [ %v1_13210, %dec_label_pc_1320c ], [ %v1_13204, %dec_label_pc_13204 ]
  %v4_13220 = mul i32 %v1_13220, 256
  %v5_13220 = or i32 %v0_13220, %v4_13220
  %v1_13224 = add nuw nsw i32 %v0_13224, 1
  %v7_1322c = icmp slt i32 %v1_13224, 5
  br i1 %v7_1322c, label %dec_label_pc_1319c, label %dec_label_pc_13230

dec_label_pc_1319c.lr.ph:                         ; preds = %dec_label_pc_13180
  %v2_131a0.pre = load i32, i32* bitcast (i32** @global_var_1bb6c.522 to i32*), align 4
  br label %dec_label_pc_1319c

dec_label_pc_13230:                               ; preds = %dec_label_pc_13220
  %v2_13230 = icmp eq i32 %v0_13188, 0
  br i1 %v2_13230, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_13230
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_13230
  %v3_1324c = call i32 @llvm.bswap.i32(i32 %v5_13220)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_13258 = inttoptr i32 %v0_13188 to i32*
  store i32 %v3_1324c, i32* %v3_13258, align 4
  %v2_1325c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1325c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1325c = phi i32 [ 1, %bb ], [ %v17_1325c.pre, %bb40 ]
  %v2_1325c = phi i32 [ %v3_13184, %bb ], [ %v2_1325c.pre, %bb40 ]
  store i32 %v2_1325c, i32* @r4, align 4
  ret i32 %v17_1325c

dec_label_pc_13260:                               ; preds = %dec_label_pc_131fc, %dec_label_pc_13218, %dec_label_pc_1319c, %dec_label_pc_131bc, %dec_label_pc_13180
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_13184, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_131a0.pre, { 2, 1, 0 }
  uselistorder i32 %v1_13224, { 1, 0 }
  uselistorder i32 %v0_13210, { 0, 1, 3, 2 }
  uselistorder i32 %v3_13184, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 16, 17, 20, 21, 22, 23, 24 }
  uselistorder i32 5, { 15, 36, 16, 6, 3, 18, 37, 4, 17, 38, 1, 19, 42, 20, 43, 21, 44, 22, 45, 23, 46, 24, 47, 25, 48, 26, 49, 27, 50, 28, 51, 29, 52, 30, 53, 31, 54, 0, 39, 40, 41, 32, 33, 34, 55, 56, 57, 58, 7, 59, 60, 61, 62, 8, 63, 64, 65, 66, 67, 68, 69, 70, 9, 71, 72, 35, 73, 10, 74, 75, 76, 11, 77, 78, 79, 80, 12, 81, 82, 83, 84, 85, 86, 87, 13, 88, 93, 94, 95, 96, 97, 98, 14, 99, 5, 89, 90, 2, 91, 92 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 60, 61, 65, 68, 69, 70, 66, 67, 71, 73, 72, 74, 75, 76, 423, 424, 77, 78, 79, 80, 81, 82, 83, 426, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 96, 97, 101, 100, 99, 102, 419, 427, 107, 103, 106, 104, 105, 425, 108, 109, 110, 111, 421, 112, 113, 114, 115, 116, 422, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 129, 128, 131, 133, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 143, 145, 146, 147, 151, 157, 152, 148, 149, 153, 154, 155, 158, 150, 159, 160, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 172, 175, 177, 179, 178, 176, 180, 183, 182, 181, 190, 187, 184, 191, 188, 185, 186, 192, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 209, 211, 212, 213, 224, 219, 214, 225, 220, 226, 227, 221, 228, 222, 215, 216, 217, 229, 218, 230, 223, 231, 232, 233, 234, 235, 236, 237, 238, 240, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 262, 259, 257, 263, 260, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 279, 278, 281, 288, 284, 289, 290, 285, 282, 291, 286, 283, 292, 287, 293, 294, 295, 296, 297, 298, 299, 302, 303, 300, 304, 301, 306, 305, 307, 308, 309, 310, 311, 314, 315, 318, 316, 312, 319, 317, 313, 322, 321, 320, 418, 428, 323, 324, 330, 325, 331, 326, 327, 332, 328, 333, 334, 329, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 353, 355, 356, 360, 361, 368, 362, 363, 369, 364, 357, 358, 370, 365, 359, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 385, 387, 388, 392, 393, 400, 394, 395, 401, 396, 389, 390, 402, 397, 391, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420 }
  uselistorder i32 32, { 53, 39, 40, 37, 46, 47, 42, 43, 4, 3, 6, 5, 8, 7, 38, 36, 48, 49, 10, 9, 12, 11, 14, 13, 16, 15, 41, 18, 17, 20, 19, 21, 23, 22, 25, 24, 26, 27, 29, 28, 44, 45, 50, 51, 30, 52, 31, 32, 0, 33, 1, 2, 34, 35 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 34, 77, 78, 182, 79, 80, 81, 82, 83, 84, 88, 115, 183, 4, 168, 171, 172, 0, 85, 21, 86, 22, 173, 87, 35, 23, 25, 89, 38, 90, 2, 91, 92, 93, 94, 36, 19, 98, 99, 100, 101, 39, 102, 40, 103, 41, 104, 42, 105, 43, 106, 44, 107, 45, 108, 46, 109, 47, 110, 48, 111, 24, 112, 49, 113, 37, 114, 50, 95, 51, 96, 97, 52, 53, 54, 55, 56, 57, 58, 59, 1, 116, 60, 61, 62, 63, 64, 117, 65, 118, 119, 120, 121, 122, 123, 66, 124, 67, 125, 68, 26, 126, 127, 128, 129, 130, 6, 5, 69, 27, 131, 132, 133, 134, 135, 136, 137, 8, 7, 70, 138, 28, 139, 140, 141, 142, 143, 144, 145, 146, 10, 9, 71, 147, 29, 148, 149, 150, 151, 152, 12, 11, 72, 153, 30, 154, 155, 156, 157, 73, 158, 14, 13, 74, 159, 31, 160, 161, 162, 163, 164, 165, 16, 15, 75, 166, 32, 167, 174, 175, 176, 177, 178, 179, 18, 17, 76, 180, 33, 181, 20, 169, 3, 170 }
  uselistorder i32 8, { 81, 122, 24, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 25, 139, 59, 60, 61, 62, 66, 63, 64, 65, 140, 114, 113, 111, 112, 97, 98, 99, 115, 116, 117, 105, 106, 107, 6, 28, 29, 26, 27, 16, 17, 20, 21, 30, 141, 67, 68, 69, 70, 7, 8, 45, 18, 9, 10, 15, 11, 12, 13, 14, 46, 35, 47, 23, 51, 52, 53, 54, 56, 36, 57, 58, 55, 48, 49, 37, 50, 38, 39, 40, 71, 22, 44, 31, 72, 73, 74, 75, 76, 19, 77, 78, 79, 80, 3, 82, 83, 84, 4, 85, 86, 87, 88, 89, 90, 91, 5, 92, 93, 94, 95, 96, 118, 119, 120, 121, 100, 32, 101, 33, 102, 34, 103, 41, 104, 43, 108, 109, 42, 110, 0, 1, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 9, 44, 45, 26, 27, 46, 0, 10, 3, 28, 32, 11, 31, 2, 34, 35, 29, 12, 36, 30, 37, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 43, 33, 18, 1, 19, 20, 21, 4, 47, 48, 49, 50, 22, 23, 51, 52, 53, 54, 55, 5, 56, 57, 58, 6, 59, 60, 61, 24, 62, 7, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 68, 8, 74, 25 }
  uselistorder i8 0, { 4, 0, 17, 18, 1, 6, 19, 20, 21, 5, 22, 23, 24, 25, 26, 27, 2, 8, 7, 9, 30, 32, 29, 11, 31, 12, 33, 34, 28, 3, 35, 36, 37, 38, 39, 14, 40, 41, 44, 15, 42, 43, 13, 45, 46, 47, 48, 49, 50, 10, 51, 52, 53, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }
  uselistorder i32 2, { 4, 136, 255, 256, 55, 257, 258, 47, 259, 46, 260, 45, 139, 79, 80, 179, 81, 180, 82, 181, 261, 51, 83, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 137, 14, 15, 16, 17, 18, 85, 86, 84, 48, 49, 19, 62, 158, 87, 90, 141, 148, 63, 140, 89, 142, 64, 143, 65, 144, 66, 145, 67, 146, 68, 147, 69, 153, 149, 150, 151, 152, 57, 91, 159, 20, 21, 160, 161, 162, 92, 163, 52, 138, 93, 164, 94, 165, 95, 166, 96, 167, 97, 168, 98, 169, 99, 170, 171, 88, 172, 22, 100, 154, 155, 23, 101, 102, 103, 156, 157, 104, 108, 173, 106, 174, 107, 175, 105, 109, 176, 24, 25, 26, 110, 177, 58, 111, 112, 113, 114, 59, 116, 117, 115, 70, 118, 119, 120, 178, 50, 54, 182, 183, 184, 243, 244, 185, 186, 187, 188, 189, 190, 191, 121, 192, 71, 193, 194, 195, 196, 197, 122, 72, 198, 199, 200, 201, 202, 203, 204, 123, 205, 73, 206, 207, 124, 208, 125, 126, 209, 210, 211, 212, 213, 214, 215, 216, 1, 27, 28, 29, 30, 31, 32, 127, 217, 74, 218, 219, 220, 221, 222, 2, 33, 34, 35, 36, 37, 38, 128, 75, 223, 224, 225, 226, 129, 227, 53, 228, 130, 229, 3, 39, 40, 41, 42, 43, 44, 131, 230, 76, 231, 232, 233, 234, 235, 236, 237, 238, 132, 239, 77, 240, 245, 246, 247, 133, 248, 134, 249, 250, 251, 252, 135, 253, 78, 254, 60, 241, 56, 61, 242 }
  uselistorder i32* @lr, { 79, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 128, 129, 130, 1, 131, 132, 133, 2, 134, 135, 136, 137, 138, 139, 140, 141, 33, 34, 142, 143, 144, 145, 146, 95, 96, 97, 98, 103, 104, 105, 106, 35, 36, 37, 38, 39, 19, 107, 4, 5, 108, 42, 43, 109, 6, 53, 54, 55, 56, 57, 44, 45, 46, 47, 48, 20, 21, 24, 25, 3, 28, 26, 27, 22, 23, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 110, 29, 30, 31, 32, 40, 41, 111, 112, 113, 49, 50, 51, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 114, 99, 100, 101, 102, 115, 116, 117, 82, 83, 84 }
  uselistorder i32* @r1, { 42, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 82, 83, 21, 22, 24, 23, 5, 7, 84, 0, 85, 25, 26, 87, 48, 53, 54, 57, 55, 56, 49, 50, 51, 52, 47, 58, 86, 13, 6, 43, 27, 8, 59, 28, 3, 60, 29, 30, 35, 36, 14, 9, 10, 11, 16, 15, 12, 61, 17, 18, 19, 20, 31, 32, 33, 4, 34, 62, 63, 2, 37, 38, 39, 40, 41, 44, 45, 46, 64 }
  uselistorder label %dec_label_pc_13260, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_131d4, { 1, 0 }
}

define i32 @function_1326c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1326c:
  %v3_1326c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13274 = call i32 @function_10cd4()
  %v0_13278 = load i32, i32* @r4, align 4
  store i32 %v3_1326c, i32* @r4, align 4
  %v2_13280 = call i32 @function_10d7c(i32 %v0_13274, i32 %v0_13278)
  ret i32 %v2_13280

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10d7c, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_13284(i32 %arg1) local_unnamed_addr {
dec_label_pc_13284:
  %v1_13284 = add i32 %arg1, 28
  %v2_13284 = inttoptr i32 %v1_13284 to i32*
  %v3_13284 = load i32, i32* %v2_13284, align 4
  %v1_1328c = add i32 %arg1, 44
  %v2_1328c = inttoptr i32 %v1_1328c to i32*
  %v3_1328c = load i32, i32* %v2_1328c, align 4
  store i32 %v3_13284, i32* @global_var_1bd68.524, align 4
  store i32 %v3_1328c, i32* @global_var_1bd6c.526, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 26, 0, 16, 17, 5, 6, 25, 1, 7, 8, 9, 10, 11, 12, 13, 2, 4, 15, 14, 18, 19, 20, 21, 22, 23, 24, 3 }
}

define i32 @function_132a8(i32* %arg1) local_unnamed_addr {
dec_label_pc_132a8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_132b0 = call i32 @brk(i32* %arg1)
  %v3_132b4 = icmp ult i32 %v2_132b0, %tmp
  store i32 %v2_132b0, i32* @global_var_1bc2c.520, align 4
  br i1 %v3_132b4, label %dec_label_pc_132c8, label %dec_label_pc_132d8

dec_label_pc_132c8:                               ; preds = %dec_label_pc_132a8
  %v0_132c8 = call i32 @function_11224()
  %v2_132d0 = inttoptr i32 %v0_132c8 to i32*
  store i32 12, i32* %v2_132d0, align 4
  br label %dec_label_pc_132d8

dec_label_pc_132d8:                               ; preds = %dec_label_pc_132a8, %dec_label_pc_132c8
  %v0_132d8 = phi i32 [ 0, %dec_label_pc_132a8 ], [ -1, %dec_label_pc_132c8 ]
  ret i32 %v0_132d8

; uselistorder directives
  uselistorder i32 12, { 17, 11, 108, 109, 110, 112, 113, 114, 115, 12, 111, 116, 117, 118, 119, 120, 121, 122, 59, 60, 29, 30, 61, 18, 19, 98, 99, 100, 0, 95, 101, 8, 102, 9, 96, 4, 97, 20, 21, 6, 62, 63, 22, 64, 65, 23, 13, 32, 33, 45, 46, 47, 34, 31, 35, 36, 37, 38, 39, 40, 42, 43, 41, 48, 49, 50, 10, 51, 52, 54, 55, 56, 24, 57, 5, 58, 53, 7, 44, 103, 66, 25, 67, 26, 68, 27, 69, 28, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 14, 81, 82, 83, 84, 15, 85, 86, 87, 88, 89, 90, 16, 91, 92, 93, 94, 104, 105, 106, 107, 1, 2, 3 }
  uselistorder i32 ()* @function_11224, { 19, 55, 37, 36, 9, 8, 7, 6, 35, 34, 33, 5, 56, 32, 31, 17, 18, 54, 53, 16, 15, 14, 26, 24, 52, 38, 51, 50, 23, 25, 49, 30, 29, 28, 48, 13, 4, 3, 47, 46, 27, 22, 45, 2, 11, 44, 43, 10, 21, 12, 1, 0, 42, 41, 40, 39, 20 }
  uselistorder i32* @global_var_1bc2c.520, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_132d8, { 1, 0 }
}

define i32 @function_132e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_132e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132e8 = load i32, i32* @global_var_1b9f8.482, align 4
  %v7_132ec = icmp eq i32 %v3_132e8, -1
  %v3_132f0 = load i32, i32* @r4, align 4
  store i32 %v3_132f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1b9f8.482 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_132ec, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_132e4
  store i32 %v3_132f0, i32* %r4.global-to-local, align 4
  %v9_132f8 = load i32, i32* @r0, align 4
  ret i32 %v9_132f8

.preheader:                                       ; preds = %dec_label_pc_132e4, %.preheader
  %v0_13300 = phi i32 [ %v3_13304, %.preheader ], [ %v3_132e8, %dec_label_pc_132e4 ]
  call void @__pseudo_branch(i32 %v0_13300)
  %v0_13304 = load i32, i32* %r4.global-to-local, align 4
  %v1_13304 = add i32 %v0_13304, -4
  %v2_13304 = inttoptr i32 %v1_13304 to i32*
  %v3_13304 = load i32, i32* %v2_13304, align 4
  store i32 %v1_13304, i32* %r4.global-to-local, align 4
  %v3_13308 = icmp eq i32 %v3_13304, -1
  br i1 %v3_13308, label %dec_label_pc_13310, label %.preheader

dec_label_pc_13310:                               ; preds = %.preheader
  %v2_13310 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13310, i32* %r4.global-to-local, align 4
  %v8_13310 = load i32, i32* @r0, align 4
  ret i32 %v8_13310

; uselistorder directives
  uselistorder i32 %v3_13304, { 1, 0 }
  uselistorder i32 %v3_132e8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 44, 15, 45, 46, 47, 3, 16, 17, 18, 48, 49, 50, 4, 19, 20, 21, 51, 52, 53, 5, 22, 23, 54, 14, 13, 55, 56, 57, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 58, 8, 31, 35, 36, 42, 37, 32, 33, 38, 39, 40, 41, 43, 7, 6, 34 }
  uselistorder i32 -1, { 150, 0, 91, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 151, 92, 228, 93, 265, 94, 250, 251, 95, 288, 96, 289, 97, 290, 98, 291, 139, 87, 252, 253, 99, 254, 255, 100, 292, 1, 152, 2, 101, 256, 257, 153, 154, 155, 140, 156, 3, 4, 86, 75, 76, 157, 158, 159, 84, 229, 160, 230, 5, 6, 102, 266, 103, 267, 104, 268, 105, 260, 106, 262, 107, 231, 108, 249, 109, 232, 110, 233, 111, 263, 112, 261, 113, 234, 114, 149, 115, 161, 116, 235, 117, 269, 118, 293, 294, 119, 236, 120, 237, 121, 258, 122, 259, 123, 238, 124, 295, 125, 271, 126, 239, 127, 240, 128, 272, 129, 264, 130, 270, 131, 296, 88, 297, 162, 163, 164, 165, 166, 167, 168, 169, 7, 8, 9, 132, 133, 10, 170, 15, 171, 241, 14, 172, 90, 89, 242, 11, 173, 222, 135, 223, 225, 226, 174, 175, 176, 134, 224, 16, 177, 79, 17, 178, 179, 18, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 227, 12, 200, 13, 201, 202, 19, 203, 204, 136, 243, 205, 20, 206, 244, 80, 77, 78, 21, 22, 207, 85, 23, 24, 25, 26, 27, 137, 208, 30, 141, 245, 29, 143, 246, 28, 142, 247, 31, 32, 144, 248, 33, 34, 35, 36, 37, 209, 38, 81, 39, 40, 42, 210, 138, 41, 82, 43, 44, 45, 46, 47, 48, 49, 211, 50, 145, 51, 52, 54, 212, 53, 55, 56, 57, 58, 213, 59, 60, 61, 214, 62, 63, 64, 215, 65, 66, 67, 68, 69, 216, 70, 71, 72, 217, 73, 74, 83, 218, 219, 220, 221, 146, 147, 148 }
  uselistorder i32* @global_var_1b9f8.482, { 1, 0 }
  uselistorder i32 1, { 495, 164, 322, 347, 850, 851, 852, 853, 854, 334, 496, 285, 919, 325, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 499, 498, 497, 289, 290, 293, 292, 288, 287, 291, 295, 296, 286, 294, 500, 66, 65, 61, 63, 62, 64, 67, 60, 656, 71, 68, 70, 69, 501, 59, 502, 30, 31, 503, 56, 200, 504, 299, 505, 147, 506, 257, 507, 258, 769, 770, 508, 282, 278, 283, 279, 280, 284, 281, 771, 772, 773, 383, 168, 169, 165, 167, 166, 509, 262, 510, 135, 0, 514, 513, 512, 511, 21, 20, 384, 515, 194, 195, 335, 385, 516, 216, 517, 774, 522, 521, 520, 519, 518, 80, 81, 84, 83, 82, 386, 523, 932, 336, 526, 525, 524, 260, 259, 527, 190, 191, 189, 192, 12, 13, 14, 15, 528, 106, 107, 105, 104, 529, 530, 302, 301, 531, 337, 897, 532, 219, 220, 387, 388, 321, 536, 535, 534, 533, 103, 102, 326, 537, 199, 538, 193, 539, 196, 540, 32, 541, 136, 542, 204, 543, 234, 544, 72, 545, 73, 546, 74, 547, 75, 548, 41, 549, 657, 658, 659, 660, 661, 662, 663, 933, 10, 11, 7, 8, 9, 550, 389, 390, 551, 150, 149, 151, 148, 353, 775, 552, 116, 354, 554, 553, 134, 133, 555, 179, 556, 45, 557, 43, 44, 558, 238, 559, 203, 560, 152, 561, 197, 562, 233, 170, 563, 40, 564, 237, 565, 303, 566, 263, 567, 261, 568, 232, 300, 108, 355, 718, 719, 356, 898, 899, 307, 900, 776, 777, 778, 317, 779, 571, 570, 569, 146, 143, 138, 139, 142, 140, 141, 137, 144, 145, 327, 795, 796, 328, 797, 573, 572, 277, 276, 780, 781, 782, 391, 574, 19, 18, 17, 16, 901, 338, 339, 1, 382, 902, 575, 48, 46, 49, 50, 47, 687, 689, 688, 392, 783, 298, 297, 903, 784, 785, 786, 57, 58, 904, 576, 218, 217, 820, 821, 577, 131, 130, 129, 128, 132, 798, 799, 578, 79, 78, 77, 76, 393, 666, 394, 667, 357, 668, 669, 720, 670, 684, 402, 664, 665, 403, 671, 341, 404, 405, 400, 672, 673, 401, 674, 675, 399, 676, 677, 398, 678, 679, 397, 680, 681, 396, 682, 683, 395, 685, 686, 721, 406, 722, 407, 723, 725, 726, 724, 727, 408, 728, 655, 340, 731, 729, 409, 730, 733, 410, 734, 735, 736, 348, 737, 738, 411, 739, 412, 740, 413, 741, 414, 742, 415, 743, 416, 744, 417, 745, 418, 746, 419, 747, 420, 748, 421, 749, 422, 750, 423, 756, 342, 757, 758, 318, 424, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 87, 88, 89, 97, 92, 93, 94, 95, 96, 91, 90, 751, 752, 425, 753, 754, 426, 755, 593, 173, 172, 176, 175, 177, 178, 174, 171, 732, 427, 595, 594, 265, 266, 264, 690, 691, 692, 693, 694, 695, 696, 308, 316, 697, 698, 343, 309, 699, 700, 701, 702, 310, 315, 703, 704, 344, 311, 705, 428, 707, 708, 429, 709, 706, 710, 352, 711, 329, 714, 715, 712, 713, 313, 312, 314, 716, 430, 717, 602, 601, 490, 600, 599, 598, 489, 597, 596, 154, 155, 153, 160, 158, 163, 159, 157, 162, 156, 161, 603, 198, 905, 605, 604, 254, 255, 253, 252, 251, 250, 247, 249, 256, 248, 246, 606, 433, 358, 759, 760, 359, 761, 431, 432, 434, 762, 763, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 618, 617, 616, 615, 614, 613, 612, 611, 610, 494, 609, 608, 607, 51, 53, 52, 55, 54, 446, 319, 447, 619, 450, 449, 448, 764, 621, 620, 765, 622, 451, 452, 453, 766, 767, 454, 345, 768, 320, 455, 626, 625, 624, 623, 86, 85, 792, 3, 787, 456, 788, 2, 789, 349, 790, 323, 324, 791, 793, 350, 794, 631, 630, 629, 628, 491, 492, 627, 906, 360, 907, 361, 908, 4, 909, 5, 6, 800, 801, 802, 803, 804, 805, 806, 807, 351, 808, 809, 810, 811, 457, 812, 458, 813, 459, 814, 815, 816, 817, 818, 634, 633, 632, 222, 223, 224, 229, 230, 225, 231, 226, 227, 221, 228, 822, 823, 824, 825, 826, 460, 461, 636, 635, 270, 268, 267, 269, 274, 273, 271, 272, 275, 827, 828, 829, 462, 830, 831, 832, 833, 834, 835, 463, 836, 464, 363, 362, 465, 837, 637, 22, 24, 26, 27, 29, 28, 25, 23, 838, 839, 466, 840, 467, 468, 366, 364, 365, 493, 638, 201, 202, 841, 842, 330, 843, 844, 845, 846, 469, 847, 331, 470, 471, 848, 367, 849, 639, 207, 210, 205, 206, 211, 212, 215, 213, 209, 214, 208, 855, 856, 857, 858, 859, 472, 860, 473, 369, 368, 474, 862, 475, 863, 640, 111, 113, 114, 115, 112, 110, 109, 864, 865, 866, 867, 868, 869, 870, 476, 871, 477, 872, 478, 374, 373, 479, 873, 370, 874, 371, 875, 372, 876, 645, 644, 643, 642, 641, 36, 37, 39, 38, 33, 35, 34, 877, 878, 879, 880, 881, 882, 480, 377, 376, 481, 883, 375, 884, 646, 181, 182, 183, 188, 186, 187, 184, 180, 185, 910, 911, 912, 913, 914, 915, 482, 380, 379, 483, 916, 378, 917, 651, 650, 649, 648, 647, 120, 119, 118, 123, 124, 127, 125, 117, 122, 126, 121, 885, 381, 484, 652, 99, 100, 101, 98, 886, 887, 485, 346, 486, 890, 487, 488, 891, 888, 889, 892, 893, 894, 895, 332, 896, 333, 243, 240, 242, 241, 245, 239, 244, 918, 236, 861, 235, 819, 42, 653, 654, 306, 305, 304 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13318() local_unnamed_addr {
dec_label_pc_13318:
  %v5_1331c = load i32, i32* @r0, align 4
  ret i32 %v5_1331c

; uselistorder directives
  uselistorder i32* @r0, { 6, 15, 16, 104, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 67, 68, 70, 69, 28, 152, 153, 33, 34, 35, 36, 17, 5, 12, 13, 71, 72, 29, 154, 155, 157, 25, 18, 115, 20, 114, 110, 31, 111, 9, 112, 116, 156, 44, 7, 73, 74, 75, 76, 30, 77, 78, 79, 80, 19, 158, 10, 21, 45, 14, 117, 11, 118, 119, 24, 81, 120, 22, 82, 23, 83, 84, 0, 37, 46, 47, 38, 39, 40, 48, 51, 52, 53, 54, 55, 1, 49, 50, 41, 42, 43, 121, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 85, 86, 87, 88, 89, 90, 91, 3, 92, 93, 94, 95, 96, 97, 98, 122, 123, 2, 99, 100, 101, 102, 103, 105, 107, 108, 109, 124, 125, 113, 106, 8, 4, 26, 27, 32 }
}

define i32 @function_13320() local_unnamed_addr {
entry:
  %v3_13324 = load i32, i32* @r4, align 4
  %v0_1332c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_13324)
  ret i32 %v0_1332c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 97, 0, 692, 693, 694, 695, 99, 98, 696, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 827, 828, 839, 840, 841, 842, 843, 844, 845, 846, 31, 847, 848, 849, 850, 851, 32, 852, 853, 854, 33, 855, 856, 857, 34, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 873, 874, 885, 886, 887, 888, 889, 890, 891, 892, 35, 893, 894, 895, 896, 897, 36, 898, 899, 900, 901, 902, 37, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 584, 585, 226, 586, 227, 489, 759, 760, 761, 762, 587, 588, 589, 916, 917, 918, 919, 228, 590, 1, 591, 592, 593, 920, 921, 922, 100, 923, 65, 924, 63, 64, 925, 926, 927, 229, 931, 230, 942, 944, 419, 185, 945, 231, 943, 232, 233, 2, 928, 929, 101, 594, 212, 595, 236, 214, 213, 596, 597, 598, 599, 235, 601, 602, 234, 603, 930, 238, 932, 239, 215, 933, 934, 936, 937, 237, 765, 767, 768, 41, 186, 769, 766, 763, 764, 3, 732, 735, 733, 734, 187, 4, 772, 770, 771, 188, 102, 736, 737, 738, 739, 741, 742, 240, 5, 743, 6, 779, 780, 103, 773, 774, 775, 776, 777, 778, 7, 8, 600, 490, 491, 492, 241, 9, 242, 781, 782, 415, 783, 416, 677, 708, 493, 576, 494, 495, 709, 678, 496, 697, 946, 947, 56, 604, 243, 605, 606, 607, 608, 244, 609, 610, 611, 612, 613, 614, 615, 497, 784, 935, 498, 499, 616, 643, 500, 417, 938, 68, 939, 820, 501, 502, 821, 744, 785, 940, 941, 10, 503, 84, 504, 505, 182, 181, 420, 69, 70, 71, 72, 430, 421, 43, 42, 85, 506, 507, 508, 509, 511, 510, 11, 786, 787, 184, 183, 422, 73, 74, 75, 76, 431, 423, 45, 44, 40, 52, 788, 432, 789, 790, 791, 77, 792, 793, 794, 795, 796, 104, 797, 424, 433, 425, 426, 798, 434, 92, 105, 617, 618, 619, 78, 620, 621, 622, 221, 46, 106, 245, 512, 66, 623, 624, 800, 799, 801, 802, 38, 107, 803, 110, 109, 108, 222, 223, 224, 112, 111, 113, 246, 625, 626, 114, 804, 805, 93, 115, 627, 116, 513, 117, 663, 664, 644, 645, 118, 646, 647, 448, 427, 514, 86, 515, 516, 449, 450, 446, 435, 253, 447, 469, 470, 451, 452, 119, 120, 453, 454, 455, 456, 436, 251, 457, 458, 437, 252, 459, 460, 438, 250, 461, 462, 439, 249, 463, 464, 440, 248, 465, 472, 441, 247, 466, 471, 467, 60, 47, 94, 95, 468, 418, 517, 254, 518, 190, 519, 255, 520, 523, 524, 122, 189, 521, 522, 256, 257, 525, 526, 216, 527, 528, 442, 57, 258, 530, 531, 532, 533, 534, 535, 536, 198, 197, 537, 259, 538, 79, 539, 540, 96, 541, 429, 542, 543, 544, 428, 545, 546, 547, 121, 260, 261, 548, 551, 552, 553, 554, 555, 123, 549, 124, 550, 12, 125, 529, 473, 474, 475, 62, 48, 476, 61, 49, 477, 478, 479, 480, 481, 482, 262, 483, 484, 486, 126, 485, 58, 487, 14, 13, 488, 806, 807, 556, 557, 263, 558, 560, 127, 561, 562, 563, 564, 565, 566, 567, 217, 264, 568, 59, 265, 569, 559, 15, 570, 199, 571, 266, 572, 573, 574, 575, 267, 579, 443, 225, 129, 128, 192, 268, 577, 578, 191, 580, 581, 582, 50, 583, 130, 131, 269, 67, 628, 629, 630, 631, 195, 632, 633, 634, 194, 635, 636, 637, 638, 89, 639, 641, 640, 87, 88, 132, 193, 201, 203, 202, 200, 270, 642, 218, 219, 220, 90, 133, 808, 53, 134, 648, 649, 80, 81, 54, 135, 136, 137, 204, 650, 91, 651, 652, 653, 196, 654, 138, 655, 656, 271, 657, 658, 659, 139, 140, 660, 141, 662, 82, 83, 55, 142, 143, 205, 665, 666, 667, 668, 144, 669, 670, 671, 145, 147, 146, 206, 673, 672, 148, 674, 675, 149, 676, 679, 154, 273, 680, 152, 153, 150, 151, 681, 682, 155, 683, 274, 275, 684, 272, 685, 156, 158, 157, 159, 687, 688, 686, 689, 16, 17, 18, 19, 20, 690, 160, 691, 161, 162, 207, 699, 698, 700, 702, 703, 701, 21, 22, 23, 24, 25, 704, 163, 707, 710, 711, 712, 51, 164, 166, 165, 208, 714, 713, 276, 715, 717, 718, 719, 720, 277, 721, 26, 27, 28, 716, 29, 30, 722, 167, 723, 724, 168, 170, 169, 209, 727, 725, 726, 278, 729, 728, 730, 171, 731, 809, 172, 174, 173, 210, 812, 811, 810, 279, 814, 813, 815, 175, 818, 211, 740, 280, 745, 746, 176, 747, 748, 749, 750, 177, 751, 281, 752, 753, 39, 754, 755, 756, 757, 758, 816, 178, 817, 705, 179, 706, 180, 661, 819, 444, 445, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962 }
  uselistorder i32* @r4, { 34, 586, 590, 591, 594, 595, 394, 395, 396, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 188, 71, 530, 531, 189, 612, 613, 614, 615, 616, 617, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 618, 619, 6, 620, 621, 622, 623, 637, 638, 639, 640, 32, 641, 30, 632, 633, 634, 635, 636, 624, 625, 626, 208, 209, 210, 211, 212, 213, 214, 215, 627, 628, 631, 532, 533, 534, 491, 7, 492, 493, 494, 8, 495, 9, 496, 497, 510, 10, 11, 511, 512, 513, 514, 515, 516, 535, 536, 12, 544, 545, 537, 538, 539, 540, 541, 542, 543, 72, 73, 74, 75, 76, 77, 546, 547, 548, 549, 550, 551, 349, 350, 430, 431, 78, 79, 174, 175, 80, 81, 82, 83, 432, 433, 351, 352, 84, 85, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 86, 87, 552, 553, 629, 630, 5, 88, 89, 90, 91, 234, 235, 262, 263, 92, 93, 588, 589, 94, 95, 592, 593, 517, 518, 554, 555, 236, 237, 96, 97, 98, 99, 238, 239, 240, 241, 242, 556, 557, 558, 100, 101, 102, 301, 302, 303, 264, 265, 266, 35, 36, 13, 103, 104, 105, 37, 106, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 107, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 131, 132, 133, 134, 135, 136, 1, 137, 125, 126, 127, 128, 129, 130, 114, 115, 116, 117, 118, 49, 50, 51, 52, 53, 54, 55, 56, 14, 57, 58, 59, 60, 61, 62, 63, 64, 0, 65, 66, 67, 68, 69, 70, 559, 560, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 15, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 31, 180, 181, 182, 183, 184, 185, 186, 2, 187, 243, 244, 245, 3, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 267, 268, 269, 270, 271, 280, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 4, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 16, 328, 17, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 18, 367, 19, 368, 20, 369, 21, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 22, 400, 23, 401, 24, 402, 25, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 452, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 26, 472, 27, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 561, 562, 563, 28, 564, 29, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 519, 523, 520, 521, 522, 524, 525, 526, 527, 528, 529, 580, 581, 582, 409, 410, 411, 33, 587 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
