source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_e9bc.14 = constant i32 -382906384
@global_var_1769c.17 = constant [4 x i8] c"GET\00"
@global_var_176a0.19 = constant i32 47
@global_var_124c8.22 = constant i32 -382910336
@global_var_17694.24 = constant i32 32
@global_var_1766c.26 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_17684.28 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_17690.30 = constant [3 x i8] c"\0D\0A\00"
@global_var_176a4.32 = constant [9 x i8] c"Cookie: \00"
@global_var_176b0.34 = constant [3 x i8] c"; \00"
@global_var_176bc.36 = constant i32 59
@global_var_176b4.38 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_176c0.40 = constant [5 x i8] c"http\00"
@global_var_176c8.42 = constant [5 x i8] c"url=\00"
@global_var_176d0.44 = constant [5 x i8] c"POST\00"
@global_var_176d8.46 = constant i32 39
@global_var_1188c.47 = constant i32 -439279616
@global_var_179d4.49 = constant i32 61
@global_var_13f88.50 = constant i32 -382909968
@global_var_2037c.54 = global i32 0
@global_var_d208.60 = constant i32 -382906384
@global_var_d674.62 = constant i32 -382906384
@global_var_c97c.64 = constant i32 -382906384
@global_var_c2a4.66 = constant i32 -382906384
@global_var_bb80.68 = constant i32 -382906384
@global_var_b354.70 = constant i32 -382906384
@global_var_acf4.72 = constant i32 -382906384
@global_var_a62c.74 = constant i32 -382906384
@global_var_8190.76 = constant i32 -382906384
@global_var_22408.78 = global i32 0
@global_var_20380.89 = global i32 0
@global_var_2240c.93 = local_unnamed_addr global i32 0
@global_var_20384.95 = global i32 0
@global_var_22414.102 = local_unnamed_addr global i32 0
@global_var_22412.103 = local_unnamed_addr global i32 0
@global_var_20388.108 = global i32 0
@global_var_176dc.116 = constant i32 10
@global_var_176e0.125 = constant i32 16777216
@global_var_20390.127 = global i32 0
@global_var_2039c.129 = global i32 0
@global_var_20394.131 = global i32 0
@global_var_20398.133 = global i32 0
@global_var_22428.143 = global i32 0
@global_var_203d4.145 = global i32 0
@global_var_203a0.147 = global i32 0
@global_var_203cc.149 = global i32 0
@global_var_22420.156 = global i32 0
@global_var_22424.158 = global i32 0
@global_var_203a6.161 = local_unnamed_addr global i32 0
@global_var_203b8.163 = global i32 0
@global_var_203ac.165 = local_unnamed_addr global i32 0
@global_var_203a8.166 = local_unnamed_addr global i32 0
@global_var_203ad.167 = local_unnamed_addr global i32 0
@global_var_203c6.170 = local_unnamed_addr global i32 0
@global_var_176f0.172 = constant [8 x i8] c"1!%1\229?\00"
@global_var_176e8.174 = constant [6 x i8] c"14=9>\00"
@global_var_176f8.176 = constant [5 x i8] c" 1##\00"
@global_var_17700.178 = constant [9 x i8] c"381>75=5\00"
@global_var_1770c.180 = constant i32 490349927
@global_var_176b8.182 = constant i32 0
@global_var_177ec.184 = constant [5 x i8] c"abcd\00"
@global_var_1771c.186 = constant [4 x i8] c"14=\00"
@global_var_17720.188 = constant [5 x i8] c"\22??$\00"
@global_var_17728.190 = constant [5 x i8] c"1>;?\00"
@global_var_17730.192 = constant [7 x i8] c"(3ceaa\00"
@global_var_17738.194 = constant [6 x i8] c"$$>5$\00"
@global_var_17740.196 = constant [9 x i8] c"8%>$egei\00"
@global_var_1774c.198 = constant [6 x i8] c"&9*(&\00"
@global_var_17754.200 = constant [6 x i8] c"abcde\00"
@global_var_1775c.202 = constant [9 x i8] c"a``a389>\00"
@global_var_17768.204 = constant [8 x i8] c"4561%<$\00"
@global_var_17770.206 = constant [4 x i8] c"abc\00"
@global_var_17774.208 = constant [7 x i8] c"1>$#<!\00"
@global_var_1777c.210 = constant [4 x i8] c"e% \00"
@global_var_17780.212 = constant [9 x i8] c":%1>$538\00"
@global_var_1778c.214 = constant [6 x i8] c"*<((~\00"
@global_var_17794.216 = constant [7 x i8] c"abcdef\00"
@global_var_1779c.218 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_177a8.220 = constant [7 x i8] c"\0A$5eba\00"
@global_var_177b0.222 = constant i32 490349927
@global_var_177c0.224 = constant [5 x i8] c"%#5\22\00"
@global_var_177c8.226 = constant [7 x i8] c"415=?>\00"
@global_var_177d0.228 = constant [4 x i8] c"29>\00"
@global_var_177d4.230 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_177dc.232 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_177e8.234 = constant [9 x i8] c"*)14abcd\00"
@global_var_203b0.235 = local_unnamed_addr global i32 0
@global_var_203ae.236 = local_unnamed_addr global i32 0
@global_var_203b4.237 = local_unnamed_addr global i32 0
@global_var_203bc.239 = local_unnamed_addr global i32 0
@global_var_203c8.240 = local_unnamed_addr global i32 0
@global_var_f344.242 = constant i32 -382910352
@global_var_177fa.245 = constant i32 2096127
@global_var_177f1.247 = constant i32 2095871
@global_var_22430.254 = global i32 0
@global_var_17800.261 = constant i32 39228
@global_var_22440.262 = local_unnamed_addr global i32 0
@global_var_22444.263 = local_unnamed_addr global i32 0
@global_var_17804.265 = constant i32 55430
@global_var_22450.266 = local_unnamed_addr global i32 0
@global_var_22454.267 = local_unnamed_addr global i32 0
@global_var_17808.269 = constant i32 1499028601
@global_var_22458.270 = local_unnamed_addr global i32 0
@global_var_2245c.271 = local_unnamed_addr global i32 0
@global_var_17828.273 = constant i32 1380928786
@global_var_22460.274 = local_unnamed_addr global i32 0
@global_var_22464.275 = local_unnamed_addr global i32 0
@global_var_17830.277 = constant i32 1480939538
@global_var_2246c.278 = local_unnamed_addr global i32 0
@global_var_22468.279 = local_unnamed_addr global i32 0
@global_var_17838.281 = constant i32 1029266194
@global_var_22470.282 = local_unnamed_addr global i32 0
@global_var_22474.283 = local_unnamed_addr global i32 0
@global_var_17840.285 = constant i32 1380928786
@global_var_2247c.286 = local_unnamed_addr global i32 0
@global_var_22478.287 = local_unnamed_addr global i32 0
@global_var_17850.289 = constant i32 1297895442
@global_var_22480.290 = local_unnamed_addr global i32 0
@global_var_22484.291 = local_unnamed_addr global i32 0
@global_var_17858.293 = constant i32 1548307986
@global_var_22488.294 = local_unnamed_addr global i32 0
@global_var_2248c.295 = local_unnamed_addr global i32 0
@global_var_17864.297 = constant i32 1414749203
@global_var_22490.298 = local_unnamed_addr global i32 0
@global_var_22494.299 = local_unnamed_addr global i32 0
@global_var_1786c.301 = constant i32 1380928786
@global_var_22498.302 = local_unnamed_addr global i32 0
@global_var_2249c.303 = local_unnamed_addr global i32 0
@global_var_17880.305 = constant i32 1380928786
@global_var_224a4.306 = local_unnamed_addr global i32 0
@global_var_224a0.307 = local_unnamed_addr global i32 0
@global_var_17890.309 = constant i32 1920627327
@global_var_224a8.310 = local_unnamed_addr global i32 0
@global_var_224ac.311 = local_unnamed_addr global i32 0
@global_var_1789c.313 = constant i32 1581864978
@global_var_224b0.314 = local_unnamed_addr global i32 0
@global_var_224b4.315 = local_unnamed_addr global i32 0
@global_var_178b0.317 = constant i32 1599867994
@global_var_224b8.318 = local_unnamed_addr global i32 0
@global_var_224bc.319 = local_unnamed_addr global i32 0
@global_var_178c8.321 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_224c0.322 = local_unnamed_addr global i32 0
@global_var_224c4.323 = local_unnamed_addr global i32 0
@global_var_178d4.325 = constant i32 1264081170
@global_var_224c8.326 = local_unnamed_addr global i32 0
@global_var_224cc.327 = local_unnamed_addr global i32 0
@global_var_178e4.329 = constant i32 1264081170
@global_var_224d0.330 = local_unnamed_addr global i32 0
@global_var_224d4.331 = local_unnamed_addr global i32 0
@global_var_178f8.333 = constant i32 1264081170
@global_var_224d8.334 = local_unnamed_addr global i32 0
@global_var_224dc.335 = local_unnamed_addr global i32 0
@global_var_17910.337 = constant i32 1264081170
@global_var_224e4.338 = local_unnamed_addr global i32 0
@global_var_224e0.339 = local_unnamed_addr global i32 0
@global_var_1792c.341 = constant i32 1264081170
@global_var_224e8.342 = local_unnamed_addr global i32 0
@global_var_224ec.343 = local_unnamed_addr global i32 0
@global_var_1793c.345 = constant [7 x i8] c"NUXQQ=\00"
@global_var_224f0.346 = local_unnamed_addr global i32 0
@global_var_224f4.347 = local_unnamed_addr global i32 0
@global_var_17944.349 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_224f8.350 = local_unnamed_addr global i32 0
@global_var_224fc.351 = local_unnamed_addr global i32 0
@global_var_1794c.353 = constant [8 x i8] c"NDNIXP=\00"
@global_var_22500.354 = local_unnamed_addr global i32 0
@global_var_22504.355 = local_unnamed_addr global i32 0
@global_var_17954.357 = constant [4 x i8] c"NU=\00"
@global_var_2250c.358 = local_unnamed_addr global i32 0
@global_var_22508.359 = local_unnamed_addr global i32 0
@global_var_17958.361 = constant i32 1398038290
@global_var_22510.362 = local_unnamed_addr global i32 0
@global_var_22514.363 = local_unnamed_addr global i32 0
@global_var_17970.365 = constant i32 1499028569
@global_var_22518.366 = local_unnamed_addr global i32 0
@global_var_2251c.367 = local_unnamed_addr global i32 0
@global_var_17990.369 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_22520.370 = local_unnamed_addr global i32 0
@global_var_22524.371 = local_unnamed_addr global i32 0
@global_var_22528.372 = local_unnamed_addr global i32 0
@global_var_2252c.373 = local_unnamed_addr global i32 0
@global_var_1799c.375 = constant [6 x i8] c"RZTS=\00"
@global_var_22530.376 = local_unnamed_addr global i32 0
@global_var_179a4.378 = constant [7 x i8] c"XSIXO=\00"
@global_var_22538.379 = local_unnamed_addr global i32 0
@global_var_179ac.381 = constant i32 1398038290
@global_var_22540.382 = local_unnamed_addr global i32 0
@global_var_179c0.384 = constant i32 1398038290
@global_var_22548.385 = local_unnamed_addr global i32 0
@global_var_179d8.387 = constant i32 1213361769
@global_var_22550.388 = local_unnamed_addr global i32 0
@global_var_179f0.390 = constant i32 1581864978
@global_var_22558.391 = local_unnamed_addr global i32 0
@global_var_17a04.393 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_22560.394 = local_unnamed_addr global i32 0
@global_var_17a10.396 = constant i32 1397969534
@global_var_22568.397 = local_unnamed_addr global i32 0
@global_var_17d34.399 = constant i32 1482579580
@global_var_22570.400 = local_unnamed_addr global i32 0
@global_var_17d88.402 = constant i32 1482579580
@global_var_22578.403 = local_unnamed_addr global i32 0
@global_var_17a28.405 = constant i32 1230197374
@global_var_22580.406 = local_unnamed_addr global i32 0
@global_var_17a5c.408 = constant i32 2118735950
@global_var_22588.409 = local_unnamed_addr global i32 0
@global_var_17a6c.411 = constant i32 1331386447
@global_var_22590.412 = local_unnamed_addr global i32 0
@global_var_17a78.414 = constant i32 1549685329
@global_var_22598.415 = local_unnamed_addr global i32 0
@global_var_17a84.417 = constant i32 273242190
@global_var_225a0.418 = local_unnamed_addr global i32 0
@global_var_17a94.420 = constant i32 1230197342
@global_var_225a8.421 = local_unnamed_addr global i32 0
@global_var_17aa8.423 = constant i32 1398558537
@global_var_225b0.424 = local_unnamed_addr global i32 0
@global_var_17abc.426 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_225b8.427 = local_unnamed_addr global i32 0
@global_var_17a1c.429 = constant i32 1297635414
@global_var_225c0.430 = local_unnamed_addr global i32 0
@global_var_17ac8.432 = constant i32 1397969502
@global_var_225c8.433 = local_unnamed_addr global i32 0
@global_var_17ad8.435 = constant i32 1263491150
@global_var_225d0.436 = local_unnamed_addr global i32 0
@global_var_17aec.438 = constant i32 1263491150
@global_var_225d8.439 = local_unnamed_addr global i32 0
@global_var_17b08.441 = constant i32 1413960304
@global_var_225e0.442 = local_unnamed_addr global i32 0
@global_var_17b7c.444 = constant i32 1413960304
@global_var_225e8.445 = local_unnamed_addr global i32 0
@global_var_17bf0.447 = constant i32 1413960304
@global_var_225f0.448 = local_unnamed_addr global i32 0
@global_var_17c40.450 = constant i32 1413960304
@global_var_225f8.451 = local_unnamed_addr global i32 0
@global_var_17cb4.453 = constant i32 1413960304
@global_var_22600.454 = local_unnamed_addr global i32 0
@global_var_22608.455 = local_unnamed_addr global i32 0
@global_var_22610.456 = local_unnamed_addr global i32 0
@global_var_22618.457 = local_unnamed_addr global i32 0
@global_var_17d28.459 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_22620.460 = local_unnamed_addr global i32 0
@global_var_1258c.466 = constant i32 -443088884
@global_var_203f4.483 = global i32 0
@global_var_129bc.485 = constant i32 -456978431
@global_var_22628.498 = global i32 0
@global_var_12f78.504 = constant i32 -478871519
@global_var_c7b4.514 = constant i32 167772253
@global_var_139f8.519 = constant i32 -478805983
@global_var_13dd4.528 = constant i32 -382906384
@global_var_203d8.536 = local_unnamed_addr global i32 0
@global_var_15660.538 = constant i32 -509591552
@global_var_203dc.545 = local_unnamed_addr global i32 0
@global_var_16094.548 = constant i32 -382909968
@global_var_14438.549 = constant i32 -494075872
@global_var_12490.550 = constant i32 -382910336
@global_var_17dc4.554 = constant [11 x i8] c"/proc/stat\00"
@global_var_17dd0.559 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_17de0.561 = constant [10 x i8] c"processor\00"
@global_var_17e04.563 = constant i32 604672
@global_var_145f8.566 = constant i32 -369098421
@global_var_203ec.579 = local_unnamed_addr global i32 0
@global_var_203f0.581 = local_unnamed_addr global i32 0
@global_var_17e08.584 = constant [10 x i8] c"/dev/null\00"
@global_var_14204.585 = constant i32 -442543860
@global_var_15ff8.590 = constant i32 -382910352
@global_var_129f0.595 = constant i32 -369094746
@global_var_14fc4.608 = constant i32 -335545128
@global_var_1548c.614 = constant i32 -382909456
@global_var_22404.617 = local_unnamed_addr global i32 0
@global_var_aa9c.619 = constant i32 -443744160
@global_var_a658.625 = constant [3 x i8] c"w$\00"
@global_var_17de8.627 = constant i32 114
@global_var_a5f8.629 = constant i32 -516948194
@global_var_164b8.633 = constant i32 -382906384
@global_var_15f98.651 = constant i32 -509607926
@global_var_18114.656 = constant i32 0
@global_var_17448.657 = constant i32 -382909968
@global_var_9ea8.664 = constant i32 -476053449
@global_var_162dc.668 = constant i32 -509607928
@global_var_9c70.682 = constant i32 -481296337
@global_var_902c.699 = constant [3 x i8] c":\22\00"
@global_var_2035c.2 = external global i8*
@global_var_20378.52 = external global i8*
@global_var_20379.58 = global i8 0
@global_var_22410.100 = global i16* null
@1 = internal constant [4 x i8] c"\BC\01\02\00"
@global_var_2038c.120 = external global i8*
@global_var_203d0.151 = global i16* null
@global_var_203a4.160 = external global i8*
@global_var_203c4.164 = local_unnamed_addr global i8 0
@global_var_203ba.168 = local_unnamed_addr global i16 0
@global_var_203c5.169 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r2, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_2035c.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_2035c.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v2_80e0.pre, %dec_label_pc_80c4 ], [ %v3_80b0, %entry ]
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_2035c.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_80ec
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 131384 to i32*), align 8
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb3, %dec_label_pc_8124
  ret i32 131384

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_14d34(i32 ptrtoint (i32* @global_var_e9bc.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 95820, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_14204()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-10572 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-20813 = alloca i32, align 4
  %v3_8190 = load i32, i32* @r4, align 4
  %v6_8190 = load i32, i32* @r5, align 4
  %v18_8190 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_81bc = inttoptr i32 %arg4 to i32*
  %v6_81bc = call i32 @function_9f20(i32 %arg3, i32* %v5_81bc, i32 20, i32 0, i32 %arg2)
  %v0_81c0 = load i32, i32* @r5, align 4
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_81cc = load i32, i32* @r4, align 4
  store i32 %v0_81cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32), i32* %r3.global-to-local, align 4
  %v6_81d4 = inttoptr i32 %v0_81c0 to i32*
  %v7_81d4 = call i32 @function_9f20(i32 %v0_81cc, i32* %v6_81d4, i32 19, i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32), i32 %v6_81bc)
  %v0_81d8 = load i32, i32* @r5, align 4
  store i32 %v0_81d8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_81d4, i32* @sb, align 4
  %v0_81e8 = load i32, i32* @r4, align 4
  store i32 %v0_81e8, i32* %r0.global-to-local, align 4
  %v5_81ec = inttoptr i32 %v0_81d8 to i32*
  %v6_81ec = call i32 @function_9f20(i32 %v0_81e8, i32* %v5_81ec, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_81f0 = load i32, i32* @r5, align 4
  store i32 %v0_81f0, i32* %r1.global-to-local, align 4
  store i32 %v6_81ec, i32* @sl, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_81fc = load i32, i32* @r4, align 4
  store i32 %v0_81fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176a0.19 to i32), i32* %r3.global-to-local, align 4
  %v5_8204 = inttoptr i32 %v0_81f0 to i32*
  %v6_8204 = call i32 @function_9f20(i32 %v0_81fc, i32* %v5_8204, i32 21, i32 ptrtoint (i32* @global_var_176a0.19 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8208 = load i32, i32* @r5, align 4
  store i32 %v0_8208, i32* %r1.global-to-local, align 4
  store i32 %v6_8204, i32* @r8, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8214 = load i32, i32* @r4, align 4
  store i32 %v0_8214, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_821c = inttoptr i32 %v0_8208 to i32*
  %v5_821c = call i32 @function_9fe8(i32 %v0_8214, i32* %v4_821c, i32 23, i32 1)
  %v0_8220 = load i32, i32* @r5, align 4
  store i32 %v0_8220, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_821c, i32* @r6, align 4
  %v0_8230 = load i32, i32* @r4, align 4
  store i32 %v0_8230, i32* %r0.global-to-local, align 4
  %v4_8234 = inttoptr i32 %v0_8220 to i32*
  %v5_8234 = call i32 @function_9fe8(i32 %v0_8230, i32* %v4_8234, i32 7, i32 80)
  %v2_823c = ptrtoint i32* %stack_var_-20813 to i32
  %v3_8244 = mul i32 %v5_8234, 65536
  store i32 %v3_8244, i32* %r3.global-to-local, align 4
  %tmp168 = bitcast i32* %stack_var_-20813 to i8*
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8258 = urem i32 %v5_8234, 65536
  store i32 %v3_8258, i32* @r7, align 4
  %v3_825c = call i32 @function_12940(i8* %tmp168, i32 0)
  store i32 %v3_825c, i32* %r0.global-to-local, align 4
  %v0_8260 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8260 = icmp eq i32 %v0_8260, 0
  store i1 %v2_8260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8260, label %.thread14, label %bb

bb:                                               ; preds = %dec_label_pc_8190
  %v1_8264 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_8264 = icmp eq i32 %v1_8264, 0
  store i1 %v3_8264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8264, label %bb169, label %dec_label_pc_8284

.thread14:                                        ; preds = %dec_label_pc_8190
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8274

bb169:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8274

dec_label_pc_8274:                                ; preds = %bb169, %dec_label_pc_82a4, %.thread14, %dec_label_pc_8294, %dec_label_pc_8284
  %v1_8280 = phi i32 [ %v2_82a8, %dec_label_pc_82a4 ], [ %v3_825c, %.thread14 ], [ %v3_825c, %bb169 ], [ %v2_8298, %dec_label_pc_8294 ], [ %v2_8288, %dec_label_pc_8284 ]
  store i32 %v3_8190, i32* %r4.global-to-local, align 4
  store i32 %v6_8190, i32* %r5.global-to-local, align 4
  store i32 %v18_8190, i32* %sb.global-to-local, align 4
  ret i32 %v1_8280

dec_label_pc_8284:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_8260, i32* %r0.global-to-local, align 4
  %v1_8288 = inttoptr i32 %v0_8260 to i8*
  %v2_8288 = call i32 @function_11864(i8* %v1_8288)
  store i32 %v2_8288, i32* %r0.global-to-local, align 4
  %v2_828c = icmp ugt i32 %v2_8288, 254
  store i1 %v2_828c, i1* %cpsr_c.global-to-local, align 1
  %v7_828c = icmp eq i32 %v2_8288, 255
  store i1 %v7_828c, i1* %cpsr_z.global-to-local, align 1
  %v8_8290 = icmp sgt i32 %v2_8288, 255
  br i1 %v8_8290, label %dec_label_pc_8274, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8284
  %v0_8294 = load i32, i32* @sl, align 4
  store i32 %v0_8294, i32* %r0.global-to-local, align 4
  %v1_8298 = inttoptr i32 %v0_8294 to i8*
  %v2_8298 = call i32 @function_11864(i8* %v1_8298)
  store i32 %v2_8298, i32* %r0.global-to-local, align 4
  %v2_829c = icmp ugt i32 %v2_8298, 126
  store i1 %v2_829c, i1* %cpsr_c.global-to-local, align 1
  %v7_829c = icmp eq i32 %v2_8298, 127
  store i1 %v7_829c, i1* %cpsr_z.global-to-local, align 1
  %v8_82a0 = icmp sgt i32 %v2_8298, 127
  br i1 %v8_82a0, label %dec_label_pc_8274, label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8294
  %v0_82a4 = load i32, i32* @sb, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82a8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82a8 = call i32 @function_11864(i8* %v1_82a8)
  store i32 %v2_82a8, i32* %r0.global-to-local, align 4
  %v2_82ac = icmp ugt i32 %v2_82a8, 8
  store i1 %v2_82ac, i1* %cpsr_c.global-to-local, align 1
  %v7_82ac = icmp eq i32 %v2_82a8, 9
  store i1 %v7_82ac, i1* %cpsr_z.global-to-local, align 1
  %v7_82b0 = icmp sgt i32 %v2_82a8, 9
  br i1 %v7_82b0, label %dec_label_pc_8274, label %bb170

bb170:                                            ; preds = %dec_label_pc_82a4
  %v10_82b0 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v8_82b4 = load i32, i32* @r4, align 4
  %v10_82b4 = add i32 %v10_82b0, 364
  %v11_82b4 = inttoptr i32 %v10_82b4 to i32*
  store i32 %v8_82b4, i32* %v11_82b4, align 4
  br label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %bb170, %bb174
  %v0_82bc = load i32, i32* @sb, align 4
  store i32 %v0_82bc, i32* %r0.global-to-local, align 4
  %v1_82c0 = inttoptr i32 %v0_82bc to i8*
  %v2_82c0 = call i32 @function_11864(i8* %v1_82c0)
  store i32 %v2_82c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_82c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_82c8, i32* %ip.global-to-local, align 4
  %v3_82cc = icmp uge i32 %v2_82c0, %v3_82c8
  store i1 %v3_82cc, i1* %cpsr_c.global-to-local, align 1
  %v9_82cc = icmp eq i32 %v2_82c0, %v3_82c8
  store i1 %v9_82cc, i1* %cpsr_z.global-to-local, align 1
  %v7_82d0 = icmp sgt i32 %v2_82c0, %v3_82c8
  br i1 %v7_82d0, label %dec_label_pc_82d4, label %dec_label_pc_8300

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82bc
  %v0_82d4 = load i32, i32* @sb, align 4
  %v2_82d4 = add i32 %v0_82d4, %v3_82c8
  %v3_82d4 = inttoptr i32 %v2_82d4 to i8*
  %v4_82d4 = load i8, i8* %v3_82d4, align 1
  %v6_82d4 = zext i8 %v4_82d4 to i32
  %v1_82d8 = add nsw i32 %v6_82d4, -32
  store i32 %v1_82d8, i32* %r2.global-to-local, align 4
  %v1_82dc = add nsw i32 %v6_82d4, -97
  store i32 %v1_82dc, i32* %r3.global-to-local, align 4
  %v2_82e0 = icmp ugt i32 %v1_82dc, 24
  store i1 %v2_82e0, i1* %cpsr_c.global-to-local, align 1
  %v7_82e0 = icmp eq i32 %v1_82dc, 25
  store i1 %v7_82e0, i1* %cpsr_z.global-to-local, align 1
  %v2_82e4 = xor i1 %v2_82e0, true
  %v3_82e4 = or i1 %v7_82e0, %v2_82e4
  br i1 %v3_82e4, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_82d4
  %v5_82e4 = trunc i32 %v1_82d8 to i8
  store i8 %v5_82e4, i8* %v3_82d4, align 1
  %v0_82e8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_82e8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb172

bb172:                                            ; preds = %dec_label_pc_82d4, %bb171
  %v1_82ec = phi i1 [ %v2_82e0, %dec_label_pc_82d4 ], [ %v1_82e8.pre, %bb171 ]
  %v0_82ec = phi i1 [ false, %dec_label_pc_82d4 ], [ %v0_82e8.pre, %bb171 ]
  %v2_82e8 = xor i1 %v1_82ec, true
  %v3_82e8 = or i1 %v0_82ec, %v2_82e8
  br i1 %v3_82e8, label %bb173, label %._crit_edge

._crit_edge:                                      ; preds = %bb172
  %v0_82f4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb174

bb173:                                            ; preds = %bb172
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v7_82ec = load i32, i32* %v11_82b4, align 4
  store i32 %v7_82ec, i32* %ip.global-to-local, align 4
  br label %bb174

bb174:                                            ; preds = %._crit_edge, %bb173
  %v0_82f4 = phi i32 [ %v0_82f4.pre, %._crit_edge ], [ %v7_82ec, %bb173 ]
  store i32 %v10_82b0, i32* @lr, align 4
  %v1_82f4 = add i32 %v0_82f4, 1
  store i32 %v1_82f4, i32* %ip.global-to-local, align 4
  store i32 %v1_82f4, i32* %stack_var_-44, align 4
  br label %dec_label_pc_82bc

dec_label_pc_8300:                                ; preds = %dec_label_pc_82bc
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8304 = call i32 @function_10e40(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_830c = call i32 @function_10e40(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8314 = call i32 @function_10e40(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_831c = call i32 @function_10e40(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8324 = call i32 @function_10e40(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_832c = call i32 @function_10e40(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_8334 = call i32 @function_10e40(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_833c = call i32 @function_10e40(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_10e40(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_10e40(i32 52)
  store i32 %v1_834c, i32* %r0.global-to-local, align 4
  %v0_8350 = load i32, i32* @r6, align 4
  %v3_8350 = icmp ugt i32 %v0_8350, 511
  store i1 %v3_8350, i1* %cpsr_c.global-to-local, align 1
  %v8_8350 = icmp eq i32 %v0_8350, 512
  store i1 %v8_8350, i1* %cpsr_z.global-to-local, align 1
  %v5_8354 = icmp slt i32 %v0_8350, 512
  br i1 %v5_8354, label %thread-pre-split, label %bb175

bb175:                                            ; preds = %dec_label_pc_8300
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8300, %bb175
  %v0_835c = phi i32 [ 512, %bb175 ], [ %v0_8350, %dec_label_pc_8300 ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_8360 = call i32 @function_10e40(i32 53)
  store i32 %v0_835c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_1383c(i32 %v0_835c, i32 3140)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8378 = icmp eq i32 %v0_835c, 0
  store i1 %v2_8378, i1* %cpsr_z.global-to-local, align 1
  %tmp176 = icmp slt i32 %v0_835c, 1
  br i1 %tmp176, label %dec_label_pc_84bc, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %thread-pre-split
  store i32 %v2_8370, i32* @r5, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_83b0 = and i32 %arg1, 536870912
  %v3_83b0 = icmp ne i32 %v2_83b0, 0
  %v5_83b0 = mul i32 %arg1, 24
  %v2_83b4 = add i32 %v5_83b0, %arg2
  %v1_83b8 = add i32 %v2_83b4, 16
  %v2_83b8 = inttoptr i32 %v1_83b8 to i32*
  br label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_9e04, %dec_label_pc_8384
  %v1_8398 = phi i32 [ %v1_9e20, %dec_label_pc_9e04 ], [ %v2_8370, %dec_label_pc_8384 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_8398 = inttoptr i32 %v1_8398 to i32*
  store i32 -1, i32* %v2_8398, align 4
  %v3_839c = load i32, i32* @r5, align 4
  %v4_839c = add i32 %v3_839c, 4
  %v5_839c = inttoptr i32 %v4_839c to i8*
  store i8 0, i8* %v5_839c, align 1
  %v0_83a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_83a0, i32* %r0.global-to-local, align 4
  %v5_83a4 = call i32 @function_12094(i32 %v0_83a0, i32 %arg1, i32 -1, i32 0)
  store i32 %v5_83a4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i1 %v3_83b0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_83b0, i32* %r3.global-to-local, align 4
  store i32 %v2_83b4, i32* @r6, align 4
  %v3_83b8 = load i32, i32* %v2_83b8, align 4
  store i32 %v3_83b8, i32* %r2.global-to-local, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 532
  store i32 %v1_83bc, i32* @lr, align 4
  store i32 %v1_83bc, i32* @r0, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  store i32 %v0_83c4, i32* %r1.global-to-local, align 4
  %v2_83c8 = add i32 %v0_83bc, 16
  %v3_83c8 = inttoptr i32 %v2_83c8 to i32*
  store i32 %v3_83b8, i32* %v3_83c8, align 4
  %v0_83cc = load i32, i32* @lr, align 4
  %v2_83d0 = inttoptr i32 %v1_83bc to i8*
  %v3_83d0 = call i32 @function_1188c(i8* %v2_83d0, i32 %v0_83c4)
  store i32 %v3_83d0, i32* %r0.global-to-local, align 4
  %v0_83d4 = load i32, i32* @r5, align 4
  %v1_83d4 = add i32 %v0_83d4, 532
  %v2_83d4 = inttoptr i32 %v1_83d4 to i8*
  %v3_83d4 = load i8, i8* %v2_83d4, align 1
  %v4_83d4 = zext i8 %v3_83d4 to i32
  store i32 %v4_83d4, i32* %r3.global-to-local, align 4
  %v2_83d8 = icmp ugt i8 %v3_83d4, 46
  store i1 %v2_83d8, i1* %cpsr_c.global-to-local, align 1
  %v7_83d8 = icmp eq i8 %v3_83d4, 47
  store i1 %v7_83d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_83d8, label %dec_label_pc_8404, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_838c
  store i32 %v0_83cc, i32* %r0.global-to-local, align 4
  %v1_83e4 = inttoptr i32 %v0_83cc to i8*
  %v2_83e4 = call i32 @function_11864(i8* %v1_83e4)
  store i32 %v2_83e4, i32* @r2, align 4
  %v0_83ec = load i32, i32* @r5, align 4
  %v1_83f0 = add i32 %v0_83ec, 533
  store i32 %v1_83f0, i32* @r0, align 4
  store i32 %v0_83cc, i32* @r1, align 4
  %v3_83f8 = call i32 @function_129e0(i32 %v1_83f0, i32 %v0_83cc, i32 %v2_83e4)
  store i32 %v3_83f8, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8400 = load i32, i32* @r5, align 4
  %v3_8400 = add i32 %v2_8400, 532
  %v4_8400 = inttoptr i32 %v3_8400 to i8*
  store i8 47, i8* %v4_8400, align 1
  %v0_8408.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8404

dec_label_pc_8404:                                ; preds = %dec_label_pc_838c, %dec_label_pc_83e0
  %v0_8408 = phi i32 [ %v0_83d4, %dec_label_pc_838c ], [ %v0_8408.pre, %dec_label_pc_83e0 ]
  %v0_8404 = load i32, i32* @sb, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v1_8408 = add i32 %v0_8408, 1440
  store i32 %v1_8408, i32* @r0, align 4
  %v2_840c = inttoptr i32 %v1_8408 to i8*
  %v3_840c = call i32 @function_1188c(i8* %v2_840c, i32 %v0_8404)
  %v0_8410 = load i32, i32* @r5, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  store i32 %v0_8414, i32* %r1.global-to-local, align 4
  %v1_8418 = add i32 %v0_8410, 1431
  store i32 %v1_8418, i32* @r0, align 4
  %v2_841c = inttoptr i32 %v1_8418 to i8*
  %v3_841c = call i32 @function_1188c(i8* %v2_841c, i32 %v0_8414)
  %v0_8420 = load i32, i32* @r5, align 4
  %v1_8424 = add i32 %v0_8420, 789
  store i32 %v1_8424, i32* @r0, align 4
  %v0_8428 = load i32, i32* @sl, align 4
  store i32 %v0_8428, i32* %r1.global-to-local, align 4
  %v2_842c = inttoptr i32 %v1_8424 to i8*
  %v3_842c = call i32 @function_1188c(i8* %v2_842c, i32 %v0_8428)
  store i32 %v3_842c, i32* %r0.global-to-local, align 4
  %v0_8430 = load i32, i32* @r6, align 4
  %v1_8430 = add i32 %v0_8430, 20
  %v2_8430 = inttoptr i32 %v1_8430 to i8*
  %v3_8430 = load i8, i8* %v2_8430, align 1
  %v4_8430 = zext i8 %v3_8430 to i32
  store i32 %v4_8430, i32* %r3.global-to-local, align 4
  %v2_8434 = icmp ugt i8 %v3_8430, 30
  store i1 %v2_8434, i1* %cpsr_c.global-to-local, align 1
  %v7_8434 = icmp eq i8 %v3_8430, 31
  store i1 %v7_8434, i1* %cpsr_z.global-to-local, align 1
  %v2_8438 = xor i1 %v7_8434, true
  %v3_8438 = and i1 %v2_8434, %v2_8438
  br i1 %v3_8438, label %dec_label_pc_8480, label %dec_label_pc_843c

dec_label_pc_843c:                                ; preds = %dec_label_pc_8404
  %v1_843c = add i32 %v0_8430, 16
  %v2_843c = inttoptr i32 %v1_843c to i32*
  %v3_843c = load i32, i32* %v2_843c, align 4
  store i32 %v3_843c, i32* @r4, align 4
  %v0_8440 = call i32 @function_f188()
  store i32 %v0_8440, i32* %r0.global-to-local, align 4
  %v0_8444 = load i32, i32* @r4, align 4
  %v1_8444 = and i32 %v0_8444, 16711680
  store i32 %v1_8444, i32* %r1.global-to-local, align 4
  %v3_8448 = udiv i32 %v0_8444, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_844c = udiv i32 %v1_8444, 256
  %v5_844c = or i32 %v4_844c, %v3_8448
  store i32 %v5_844c, i32* %r2.global-to-local, align 4
  %v1_8450 = and i32 %v0_8444, 65280
  store i32 %v1_8450, i32* %r3.global-to-local, align 4
  %v0_8454 = load i32, i32* @r6, align 4
  %v1_8454 = add i32 %v0_8454, 20
  %v2_8454 = inttoptr i32 %v1_8454 to i8*
  %v3_8454 = load i8, i8* %v2_8454, align 1
  %v4_8454 = zext i8 %v3_8454 to i32
  %v5_845c = call i32 @llvm.bswap.i32(i32 %v0_8444)
  %v7_8460 = lshr i32 %v0_8440, %v4_8454
  %v8_8460 = add i32 %v7_8460, %v5_845c
  store i32 %v8_8460, i32* %r2.global-to-local, align 4
  %v1_8464 = and i32 %v8_8460, 16711680
  store i32 %v1_8464, i32* %r0.global-to-local, align 4
  %v1_8470 = and i32 %v8_8460, 65280
  store i32 %v1_8470, i32* %r1.global-to-local, align 4
  %v2_8478 = and i32 %v8_8460, 256
  %v3_8478 = icmp ne i32 %v2_8478, 0
  store i1 %v3_8478, i1* %cpsr_c.global-to-local, align 1
  %v5_8478 = call i32 @llvm.bswap.i32(i32 %v8_8460)
  store i32 %v5_8478, i32* %r3.global-to-local, align 4
  %v1_847c = load i32, i32* @r5, align 4
  %v2_847c = add i32 %v1_847c, 16
  %v3_847c = inttoptr i32 %v2_847c to i32*
  store i32 %v5_8478, i32* %v3_847c, align 4
  br label %dec_label_pc_8480

dec_label_pc_8480:                                ; preds = %dec_label_pc_8404, %dec_label_pc_843c
  %v0_8480 = call i32 @function_f188()
  %v3_848c = udiv i32 %v0_8480, 5
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  store i32 %v3_848c, i32* %r3.global-to-local, align 4
  %v2_8498 = sub i32 %v0_8480, %v3_848c
  store i32 %v2_8498, i32* %r0.global-to-local, align 4
  %v7_849c = icmp eq i32 %v2_8498, 4
  store i1 %v7_849c, i1* %cpsr_z.global-to-local, align 1
  %v5_84a0 = and i32 %v2_8498, 1073741824
  %v6_84a0 = icmp ne i32 %v5_84a0, 0
  store i1 %v6_84a0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_8498, label %dec_label_pc_9e04 [
    i32 0, label %dec_label_pc_9ec8
    i32 1, label %dec_label_pc_9e9c
    i32 2, label %dec_label_pc_9ef4
    i32 3, label %dec_label_pc_9ddc
    i32 4, label %dec_label_pc_9e5c
  ]

dec_label_pc_84bc:                                ; preds = %thread-pre-split
  %v0_84cc = load i32, i32* @r7, align 4
  %v1_84cc = and i32 %v0_84cc, 128
  %v2_84cc = icmp ne i32 %v1_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_c.global-to-local, align 1
  %v3_84cc = udiv i32 %v0_84cc, 256
  store i32 %v3_84cc, i32* %r3.global-to-local, align 4
  %v1_84d0 = add i32 %v2_8370, 1452
  store i32 %v1_84d0, i32* %r1.global-to-local, align 4
  %v2_84d4 = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_84d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_84ec.preheader

dec_label_pc_84ec.preheader:                      ; preds = %dec_label_pc_84bc, %dec_label_pc_9e28
  %v0_9e38.sink = phi i32 [ %v0_9e38, %dec_label_pc_9e28 ], [ %v0_84cc, %dec_label_pc_84bc ]
  %stack_var_-20864.0.ph = phi i32 [ %v3_9e38, %dec_label_pc_9e28 ], [ %v3_84cc, %dec_label_pc_84bc ]
  %stack_var_-20860.0.ph = phi i32 [ %v2_9e40, %dec_label_pc_9e28 ], [ %v2_84d4, %dec_label_pc_84bc ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9e3c, %dec_label_pc_9e28 ], [ %v1_84d0, %dec_label_pc_84bc ]
  %v1_9e44 = urem i32 %v0_9e38.sink, 256
  store i32 %v1_9e44, i32* @r7, align 4
  %v2_8654 = ptrtoint i32* %stack_var_-152 to i32
  %v2_866c = ptrtoint i32* %stack_var_-44 to i32
  %v2_86b4 = ptrtoint i32* %stack_var_-76 to i32
  %v2_86d0 = ptrtoint i32* %stack_var_-40 to i32
  %v1_88b0 = inttoptr i32 %stack_var_-20860.0.ph to i8*
  %v2_8c0c = icmp eq i32 %v6_81bc, 0
  %v1_8b08 = inttoptr i32 %v6_81bc to i8*
  %v2_8738 = ptrtoint i32* %stack_var_-60 to i32
  %v2_873c = ptrtoint i32* %stack_var_-204 to i32
  %v2_8740 = ptrtoint i32* %stack_var_-332 to i32
  %v2_8820 = ptrtoint i32* %stack_var_-48 to i32
  %v2_882c = ptrtoint i32* %stack_var_-52 to i32
  %v4_868c = mul nuw nsw i32 %v1_9e44, 256
  %v5_868c = or i32 %v4_868c, %stack_var_-20864.0.ph
  br label %dec_label_pc_84ec

dec_label_pc_84ec:                                ; preds = %dec_label_pc_8718, %dec_label_pc_854c, %dec_label_pc_8710, %dec_label_pc_87ac, %dec_label_pc_84ec.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_84f0 = call i32 @function_12148(i32* null)
  store i32 %v2_84f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_851c225 = load i32, i32* @sp, align 4
  %v3_851c226 = add i32 %v2_851c225, 20688
  %v4_851c227 = inttoptr i32 %v3_851c226 to i32*
  store i32 0, i32* %v4_851c227, align 4
  br label %dec_label_pc_8508.dec_label_pc_8508_crit_edge

dec_label_pc_8508.dec_label_pc_8508_crit_edge:    ; preds = %dec_label_pc_84ec, %dec_label_pc_8508.dec_label_pc_8508_crit_edge
  %v0_8508.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_850c = add i32 %v0_8508.pre, 4
  store i32 %v1_850c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_8514 = add i32 %v0_8508.pre, 20684
  store i32 %v1_8514, i32* @lr, align 4
  %v7_8518 = icmp eq i32 %v1_850c, 128
  %v2_851c = load i32, i32* @sp, align 4
  %v3_851c = add i32 %v2_851c, %v1_8514
  %v4_851c = inttoptr i32 %v3_851c to i32*
  store i32 0, i32* %v4_851c, align 4
  br i1 %v7_8518, label %dec_label_pc_8524, label %dec_label_pc_8508.dec_label_pc_8508_crit_edge

dec_label_pc_8524:                                ; preds = %dec_label_pc_8508.dec_label_pc_8508_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v0_8528 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8528, i32* %stack_var_-332, align 4
  %v0_852c = load i32, i32* %r3.global-to-local, align 4
  %v1_8534228 = add i32 %v0_852c, -120
  store i32 %v1_8534228, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_853c229 = add i32 %v0_852c, 20432
  store i32 %v1_853c229, i32* %r2.global-to-local, align 4
  %v7_8540230 = icmp eq i32 %v1_8534228, 128
  %v2_8544231 = load i32, i32* @sp, align 4
  %v3_8544232 = add i32 %v2_8544231, %v1_853c229
  %v4_8544233 = inttoptr i32 %v3_8544232 to i32*
  store i32 0, i32* %v4_8544233, align 4
  br i1 %v7_8540230, label %dec_label_pc_854c, label %dec_label_pc_8530.dec_label_pc_8530_crit_edge

dec_label_pc_8530.dec_label_pc_8530_crit_edge:    ; preds = %dec_label_pc_8524, %dec_label_pc_8530.dec_label_pc_8530_crit_edge
  %v0_8530.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_8534 = add i32 %v0_8530.pre, 4
  store i32 %v1_8534, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_853c = add i32 %v0_8530.pre, 20556
  store i32 %v1_853c, i32* %r2.global-to-local, align 4
  %v7_8540 = icmp eq i32 %v1_8534, 128
  %v2_8544 = load i32, i32* @sp, align 4
  %v3_8544 = add i32 %v2_8544, %v1_853c
  %v4_8544 = inttoptr i32 %v3_8544 to i32*
  store i32 0, i32* %v4_8544, align 4
  br i1 %v7_8540, label %dec_label_pc_854c, label %dec_label_pc_8530.dec_label_pc_8530_crit_edge

dec_label_pc_854c:                                ; preds = %dec_label_pc_8530.dec_label_pc_8530_crit_edge, %dec_label_pc_8524
  store i32 %v0_835c, i32* %r3.global-to-local, align 4
  %v1_8550 = load i32, i32* %r0.global-to-local, align 4
  %v3_8550 = icmp uge i32 %v0_835c, %v1_8550
  store i1 %v3_8550, i1* %cpsr_c.global-to-local, align 1
  %v9_8550 = icmp eq i32 %v0_835c, %v1_8550
  store i1 %v9_8550, i1* %cpsr_z.global-to-local, align 1
  %v7_8554 = icmp sgt i32 %v0_835c, %v1_8550
  br i1 %v7_8554, label %dec_label_pc_8558, label %dec_label_pc_84ec

dec_label_pc_8558:                                ; preds = %dec_label_pc_854c
  store i32 %stack_var_-20872.0.ph, i32* @sl, align 4
  store i32 %v1_8550, i32* @r8, align 4
  store i32 %stack_var_-20872.0.ph, i32* @r6, align 4
  store i32 %v1_8550, i32* @r7, align 4
  br label %dec_label_pc_85cc

dec_label_pc_856c:                                ; preds = %dec_label_pc_85e0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_856c = icmp eq i8 %v3_85cc, 2
  store i1 %v7_856c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_856c, label %dec_label_pc_8cac, label %dec_label_pc_8574

dec_label_pc_8574:                                ; preds = %dec_label_pc_856c
  %v2_8574 = icmp ugt i8 %v3_85cc, 3
  store i1 %v2_8574, i1* %cpsr_c.global-to-local, align 1
  %v7_8574 = icmp eq i8 %v3_85cc, 4
  store i1 %v7_8574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8574, label %dec_label_pc_887c, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_8574
  %v1_857c = add nsw i32 %v4_85cc, -6
  %v2_857c = icmp ugt i8 %v3_85cc, 5
  store i1 %v2_857c, i1* %cpsr_c.global-to-local, align 1
  %v7_857c = icmp eq i8 %v3_85cc, 6
  store i1 %v7_857c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_857c, label %dec_label_pc_8cdc, label %dec_label_pc_8584

dec_label_pc_8584:                                ; preds = %dec_label_pc_857c
  %v2_8584 = icmp ugt i8 %v3_85cc, 6
  store i1 %v2_8584, i1* %cpsr_c.global-to-local, align 1
  %v7_8584 = icmp eq i8 %v3_85cc, 7
  store i1 %v7_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8584, label %dec_label_pc_8f18, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_8584
  %v2_858c = icmp ugt i8 %v3_85cc, 9
  store i1 %v2_858c, i1* %cpsr_c.global-to-local, align 1
  %v7_858c = icmp eq i8 %v3_85cc, 10
  store i1 %v7_858c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_858c, label %dec_label_pc_8f6c, label %dec_label_pc_8594

dec_label_pc_8594:                                ; preds = %dec_label_pc_858c
  %v1_8594 = add nsw i32 %v4_85cc, -11
  %v2_8594 = icmp ugt i8 %v3_85cc, 10
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  %v7_8594 = icmp eq i8 %v3_85cc, 11
  store i1 %v7_8594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8594, label %dec_label_pc_952c, label %dec_label_pc_859c

dec_label_pc_859c:                                ; preds = %dec_label_pc_8cac, %dec_label_pc_8594
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_85cc, align 1
  %v0_85a4 = load i32, i32* @r6, align 4
  %v1_85a4 = add i32 %v0_85a4, -1452
  %v2_85a4 = inttoptr i32 %v1_85a4 to i32*
  %v3_85a4 = load i32, i32* %v2_85a4, align 4
  store i32 %v3_85a4, i32* %r0.global-to-local, align 4
  %v1_85a8 = call i32 @function_124c8(i32 %v3_85a4)
  store i32 %v1_85a8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_85b0 = load i32, i32* @r6, align 4
  %v2_85b0 = add i32 %v1_85b0, -1452
  %v3_85b0 = inttoptr i32 %v2_85b0 to i32*
  store i32 -1, i32* %v3_85b0, align 4
  br label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_8f6c, %dec_label_pc_8f18, %dec_label_pc_8cdc, %dec_label_pc_86d8, %dec_label_pc_85e8, %dec_label_pc_952c, %bb180, %dec_label_pc_859c
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_85b8 = load i32, i32* @r7, align 4
  %v1_85b8 = add i32 %v0_85b8, 1
  store i32 %v1_85b8, i32* @r7, align 4
  %v0_85bc = load i32, i32* @r6, align 4
  %v3_85c0 = icmp uge i32 %v1_85b8, %v0_835c
  store i1 %v3_85c0, i1* %cpsr_c.global-to-local, align 1
  %v9_85c0 = icmp eq i32 %v1_85b8, %v0_835c
  store i1 %v9_85c0, i1* %cpsr_z.global-to-local, align 1
  %v1_85c4 = add i32 %v0_85bc, 3140
  store i32 %v1_85c4, i32* @r6, align 4
  br i1 %v9_85c0, label %dec_label_pc_85b4.dec_label_pc_8710_crit_edge, label %dec_label_pc_85cc

dec_label_pc_85b4.dec_label_pc_8710_crit_edge:    ; preds = %dec_label_pc_85b4
  %v0_8710.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_8710

dec_label_pc_85cc:                                ; preds = %dec_label_pc_86f8, %dec_label_pc_85b4, %dec_label_pc_8558
  %v3_8870 = phi i32 [ %stack_var_-20872.0.ph, %dec_label_pc_8558 ], [ %v1_85c4, %dec_label_pc_85b4 ], [ %v1_8708, %dec_label_pc_86f8 ]
  %v1_85cc = add i32 %v3_8870, -1448
  %v2_85cc = inttoptr i32 %v1_85cc to i8*
  %v3_85cc = load i8, i8* %v2_85cc, align 1
  %v4_85cc = zext i8 %v3_85cc to i32
  store i32 %v4_85cc, i32* @r3, align 4
  %v2_85d4 = icmp ne i8 %v3_85cc, 0
  store i1 %v2_85d4, i1* %cpsr_c.global-to-local, align 1
  %v6_85d4 = icmp eq i8 %v3_85cc, 0
  %v7_85d4 = icmp eq i8 %v3_85cc, 1
  store i1 %v7_85d4, i1* %cpsr_z.global-to-local, align 1
  %v1_85d8 = add i32 %v3_8870, -1452
  store i32 %v1_85d8, i32* @r5, align 4
  br i1 %v7_85d4, label %dec_label_pc_8864, label %dec_label_pc_85e0

dec_label_pc_85e0:                                ; preds = %dec_label_pc_85cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_85d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_85d4, label %dec_label_pc_85e8, label %dec_label_pc_856c

dec_label_pc_85e8:                                ; preds = %.thread19.dec_label_pc_85e8_crit_edge, %dec_label_pc_85e0
  %v0_85e8 = phi i32 [ %v0_85e8.pre, %.thread19.dec_label_pc_85e8_crit_edge ], [ %v3_8870, %dec_label_pc_85e0 ]
  %v1_85e8 = add i32 %v0_85e8, -1452
  %v2_85e8 = inttoptr i32 %v1_85e8 to i32*
  %v3_85e8 = load i32, i32* %v2_85e8, align 4
  store i32 %v3_85e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v2_85f4 = icmp eq i32 %v3_85e8, -1
  store i1 %v2_85f4, i1* %cpsr_c.global-to-local, align 1
  %v7_85f4 = icmp eq i32 %v3_85e8, -1
  store i1 %v7_85f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-76, align 4
  store i32 34316, i32* @lr, align 4
  %v1_8608 = xor i1 %v7_85f4, true
  call void @__pseudo_cond_branch(i1 %v1_8608, i32 ptrtoint (i32* @global_var_124c8.22 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8614 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8614, i32* %r2.global-to-local, align 4
  %v3_8618 = call i32 @function_12cd4(i32 2, i32 1, i32 %v0_8614)
  store i32 %v3_8618, i32* %r0.global-to-local, align 4
  %v2_861c = icmp eq i32 %v3_8618, -1
  store i1 %v2_861c, i1* %cpsr_c.global-to-local, align 1
  %v7_861c = icmp eq i32 %v3_8618, -1
  store i1 %v7_861c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8618, i32* @r4, align 4
  %v1_8624 = load i32, i32* @r6, align 4
  %v2_8624 = add i32 %v1_8624, -1452
  %v3_8624 = inttoptr i32 %v2_8624 to i32*
  store i32 %v3_8618, i32* %v3_8624, align 4
  br i1 %v7_861c, label %dec_label_pc_85b4, label %dec_label_pc_862c

dec_label_pc_862c:                                ; preds = %dec_label_pc_85e8
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_8630 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8630, i32* %r2.global-to-local, align 4
  %v2_8634 = call i32 @function_122fc(i32 %v3_8618, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_863c = or i32 %v2_8634, 2048
  store i32 %v1_863c, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  store i32 %v0_8640, i32* %r0.global-to-local, align 4
  %v2_8644 = call i32 @function_122fc(i32 %v0_8640, i32 4)
  store i32 %v2_8644, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_8654, i32* %r3.global-to-local, align 4
  %v0_8658 = load i32, i32* @r6, align 4
  %v1_8658 = add i32 %v0_8658, -1452
  %v2_8658 = inttoptr i32 %v1_8658 to i32*
  %v3_8658 = load i32, i32* %v2_8658, align 4
  store i32 %v3_8658, i32* %r0.global-to-local, align 4
  %v0_865c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_865c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-44, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_866c, i32* %r3.global-to-local, align 4
  %v5_8674 = call i32 @function_12c90(i32 %v3_8658, i32 %v0_865c, i32 8, i32 %v2_866c, i32 4)
  store i32 %v5_8674, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-20864.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v1_9e44, i32* %r2.global-to-local, align 4
  %v0_8680 = load i32, i32* @r6, align 4
  %v1_8680 = add i32 %v0_8680, -1436
  %v2_8680 = inttoptr i32 %v1_8680 to i32*
  %v3_8680 = load i32, i32* %v2_8680, align 4
  store i32 %v3_8680, i32* @r4, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_868c, i32* %r3.global-to-local, align 4
  %v1_8690 = add i32 %v0_8680, -1452
  %v2_8690 = inttoptr i32 %v1_8690 to i32*
  %v3_8690 = load i32, i32* %v2_8690, align 4
  store i32 %v3_8690, i32* %r0.global-to-local, align 4
  %v3_86a0 = add i32 %v0_8680, -1448
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 2, i8* %v4_86a0, align 1
  store i32 %v2_84f0, i32* %r3.global-to-local, align 4
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_86ac, i32* %stack_var_-76, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v2_86b4, i32* %r1.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r6, align 4
  %v2_86b8 = add i32 %v1_86b8, -1444
  %v3_86b8 = inttoptr i32 %v2_86b8 to i32*
  store i32 %v2_84f0, i32* %v3_86b8, align 4
  %v3_86bc = call i32 @function_12abc(i32 %v3_8690, i32 %v2_86b4, i32 16)
  store i32 %v3_86bc, i32* %r0.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r6, align 4
  %v1_86c0 = add i32 %v0_86c0, -1452
  %v2_86c0 = inttoptr i32 %v1_86c0 to i32*
  %v3_86c0 = load i32, i32* %v2_86c0, align 4
  store i32 %v3_86c0, i32* %ip.global-to-local, align 4
  %v3_86c8 = udiv i32 %v3_86c0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_86cc = mul nuw nsw i32 %v3_86c8, 4
  store i32 %v3_86cc, i32* %r2.global-to-local, align 4
  store i32 %v2_86d0, i32* @lr, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86d8:                                ; preds = %dec_label_pc_8cc0, %dec_label_pc_862c
  %v0_86e8 = phi i32 [ %v3_86c0, %dec_label_pc_862c ], [ %v3_8cc0, %dec_label_pc_8cc0 ]
  %v3_86cc.pn = phi i32 [ %v3_86cc, %dec_label_pc_862c ], [ %v3_8ccc, %dec_label_pc_8cc0 ]
  %storemerge = add i32 %v3_86cc.pn, %v2_86d0
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_86d8 = add i32 %storemerge, -292
  %v2_86d8 = inttoptr i32 %v1_86d8 to i32*
  %v3_86d8 = load i32, i32* %v2_86d8, align 4
  %v1_86dc = urem i32 %v0_86e8, 32
  store i32 %v1_86dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_86e4 = shl i32 1, %v1_86dc
  %v8_86e4 = or i32 %v3_86d8, %v7_86e4
  store i32 %v8_86e4, i32* %r1.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = sub i32 %v0_86e8, %v1_86e8
  %v3_86e8 = icmp uge i32 %v0_86e8, %v1_86e8
  store i1 %v3_86e8, i1* %cpsr_c.global-to-local, align 1
  %v4_86e8 = xor i32 %v1_86e8, %v0_86e8
  %v5_86e8 = xor i32 %v2_86e8, %v0_86e8
  %v6_86e8 = and i32 %v5_86e8, %v4_86e8
  %v7_86e8 = icmp slt i32 %v6_86e8, 0
  %v8_86e8 = icmp slt i32 %v2_86e8, 0
  %v9_86e8 = icmp eq i32 %v0_86e8, %v1_86e8
  store i1 %v9_86e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_86e4, i32* %v2_86d8, align 4
  %v3_86f0 = xor i1 %v8_86e8, %v7_86e8
  %v4_86f0 = or i1 %v9_86e8, %v3_86f0
  br i1 %v4_86f0, label %dec_label_pc_85b4, label %dec_label_pc_86f4

dec_label_pc_86f4:                                ; preds = %dec_label_pc_86d8
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_86f4 = add i32 %v1_86f4, %v0_86f4
  store i32 %v2_86f4, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_86f8:                                ; preds = %dec_label_pc_8fa0, %dec_label_pc_8f4c, %dec_label_pc_8d10, %dec_label_pc_86f4
  %v0_871065 = phi i32 [ %v2_8fa0, %dec_label_pc_8fa0 ], [ %v2_8f4c, %dec_label_pc_8f4c ], [ %v2_8d10, %dec_label_pc_8d10 ], [ %v2_86f4, %dec_label_pc_86f4 ]
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_86fc = load i32, i32* @r7, align 4
  %v1_86fc = add i32 %v0_86fc, 1
  store i32 %v1_86fc, i32* @r7, align 4
  %v0_8700 = load i32, i32* @r6, align 4
  %v3_8704 = icmp uge i32 %v1_86fc, %v0_835c
  store i1 %v3_8704, i1* %cpsr_c.global-to-local, align 1
  %v9_8704 = icmp eq i32 %v1_86fc, %v0_835c
  store i1 %v9_8704, i1* %cpsr_z.global-to-local, align 1
  %v1_8708 = add i32 %v0_8700, 3140
  store i32 %v1_8708, i32* @r6, align 4
  br i1 %v9_8704, label %dec_label_pc_8710, label %dec_label_pc_85cc

dec_label_pc_8710:                                ; preds = %dec_label_pc_86f8, %dec_label_pc_85b4.dec_label_pc_8710_crit_edge
  %v0_8748 = phi i32 [ %v0_8710.pre, %dec_label_pc_85b4.dec_label_pc_8710_crit_edge ], [ %v0_871065, %dec_label_pc_86f8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8710 = icmp eq i32 %v0_8748, 0
  store i1 %v2_8710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8710, label %dec_label_pc_84ec, label %dec_label_pc_8718

dec_label_pc_8718:                                ; preds = %dec_label_pc_8710
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-60, align 4
  store i32 %v2_8738, i32* %ip.global-to-local, align 4
  store i32 %v2_873c, i32* %r1.global-to-local, align 4
  store i32 %v2_8740, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_8748, i32* %r0.global-to-local, align 4
  %v5_8750 = call i32 @function_121ec(i32 %v0_8748, i32 %v2_873c, i32 %v2_8740, i32 0, i32 %v2_8738)
  store i32 %v5_8750, i32* @r4, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  store i32 %v0_8758, i32* %r0.global-to-local, align 4
  %v1_875c = inttoptr i32 %v0_8758 to i32*
  %v2_875c = call i32 @function_12148(i32* %v1_875c)
  store i32 %v2_875c, i32* %r0.global-to-local, align 4
  %v0_8760 = load i32, i32* @r4, align 4
  %v1_8760 = load i32, i32* @r5, align 4
  %v3_8760 = icmp uge i32 %v0_8760, %v1_8760
  store i1 %v3_8760, i1* %cpsr_c.global-to-local, align 1
  %v9_8760 = icmp eq i32 %v0_8760, %v1_8760
  store i1 %v9_8760, i1* %cpsr_z.global-to-local, align 1
  %v7_8768 = icmp sgt i32 %v0_8760, %v1_8760
  br i1 %v7_8768, label %dec_label_pc_876c, label %dec_label_pc_84ec

dec_label_pc_876c:                                ; preds = %dec_label_pc_8718
  %v0_87cc.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_87cc

dec_label_pc_8774:                                ; preds = %dec_label_pc_87e0, %dec_label_pc_884c
  %v1_8784 = phi i32 [ %v1_87f8, %dec_label_pc_87e0 ], [ %v1_8784.pre, %dec_label_pc_884c ]
  %v0_877c = phi i32 [ %v3_87e8, %dec_label_pc_87e0 ], [ %v0_877c.pre, %dec_label_pc_884c ]
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v2_877c = add i32 %v0_877c, %v2_86d0
  store i32 %v2_877c, i32* %r2.global-to-local, align 4
  %v1_8780 = add i32 %v2_877c, -164
  %v2_8780 = inttoptr i32 %v1_8780 to i32*
  %v3_8780 = load i32, i32* %v2_8780, align 4
  %v2_8784 = add i32 %v1_8784, -1
  %v3_8784 = shl i32 1, %v2_8784
  %v4_8784 = and i32 %v3_8780, %v3_8784
  %v5_8784 = icmp ne i32 %v4_8784, 0
  store i1 %v5_8784, i1* %cpsr_c.global-to-local, align 1
  %v6_8784 = lshr i32 %v3_8780, %v1_8784
  store i32 %v6_8784, i32* %r3.global-to-local, align 4
  %v1_8788 = urem i32 %v6_8784, 2
  %v2_8788 = icmp eq i32 %v1_8788, 0
  store i1 %v2_8788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8788, label %dec_label_pc_87ac, label %dec_label_pc_8790

dec_label_pc_8790:                                ; preds = %dec_label_pc_8774
  %v0_8790 = load i32, i32* @sl, align 4
  %v1_8790 = add i32 %v0_8790, -1448
  %v2_8790 = inttoptr i32 %v1_8790 to i8*
  %v3_8790 = load i8, i8* %v2_8790, align 1
  %v4_8790 = zext i8 %v3_8790 to i32
  store i32 %v4_8790, i32* %r3.global-to-local, align 4
  %v2_8794 = icmp ugt i8 %v3_8790, 5
  store i1 %v2_8794, i1* %cpsr_c.global-to-local, align 1
  %v7_8794 = icmp eq i8 %v3_8790, 6
  store i1 %v7_8794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8794, label %dec_label_pc_8fe8, label %dec_label_pc_879c

dec_label_pc_879c:                                ; preds = %dec_label_pc_8790
  %v2_879c = icmp ugt i8 %v3_8790, 6
  store i1 %v2_879c, i1* %cpsr_c.global-to-local, align 1
  %v7_879c = icmp eq i8 %v3_8790, 7
  store i1 %v7_879c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_879c, label %dec_label_pc_8d18, label %dec_label_pc_87a4

dec_label_pc_87a4:                                ; preds = %dec_label_pc_879c
  %v2_87a4 = icmp ugt i8 %v3_8790, 9
  store i1 %v2_87a4, i1* %cpsr_c.global-to-local, align 1
  %v7_87a4 = icmp eq i8 %v3_8790, 10
  store i1 %v7_87a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_87a4, label %dec_label_pc_9620, label %dec_label_pc_87ac

dec_label_pc_87ac:                                ; preds = %dec_label_pc_8e18, %dec_label_pc_96b0, %dec_label_pc_9660, %dec_label_pc_9038, %dec_label_pc_87a4, %dec_label_pc_8774, %dec_label_pc_87cc, %dec_label_pc_9b00, %dec_label_pc_99ac, %dec_label_pc_9934, %dec_label_pc_98d8, %dec_label_pc_96bc, %dec_label_pc_968c, %dec_label_pc_9670, %dec_label_pc_9614, %dec_label_pc_9510, %dec_label_pc_8f54
  store i32 %v0_835c, i32* %r3.global-to-local, align 4
  %v1_87b4 = add i32 %stack_var_-20820.0, 1
  store i32 %v1_87b4, i32* %r2.global-to-local, align 4
  %v0_87b8 = load i32, i32* @sl, align 4
  %v3_87bc = icmp uge i32 %v1_87b4, %v0_835c
  store i1 %v3_87bc, i1* %cpsr_c.global-to-local, align 1
  %v9_87bc = icmp eq i32 %v1_87b4, %v0_835c
  store i1 %v9_87bc, i1* %cpsr_z.global-to-local, align 1
  %v1_87c4 = add i32 %v0_87b8, 3140
  store i32 %v1_87c4, i32* @sl, align 4
  br i1 %v9_87bc, label %dec_label_pc_84ec, label %dec_label_pc_87cc

dec_label_pc_87cc:                                ; preds = %dec_label_pc_87ac, %dec_label_pc_876c
  %v0_87cc = phi i32 [ %v0_87cc.pre, %dec_label_pc_876c ], [ %v1_87c4, %dec_label_pc_87ac ]
  %stack_var_-20820.0 = phi i32 [ %v1_8760, %dec_label_pc_876c ], [ %v1_87b4, %dec_label_pc_87ac ]
  %v1_87cc = add i32 %v0_87cc, -1452
  %v2_87cc = inttoptr i32 %v1_87cc to i32*
  %v3_87cc = load i32, i32* %v2_87cc, align 4
  store i32 %v3_87cc, i32* %r0.global-to-local, align 4
  %v2_87d4 = icmp eq i32 %v3_87cc, -1
  store i1 %v2_87d4, i1* %cpsr_c.global-to-local, align 1
  %v7_87d4 = icmp eq i32 %v3_87cc, -1
  store i1 %v7_87d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_87cc, i32* %sb.global-to-local, align 4
  br i1 %v7_87d4, label %dec_label_pc_87ac, label %dec_label_pc_87e0

dec_label_pc_87e0:                                ; preds = %dec_label_pc_87cc
  %v3_87e0 = udiv i32 %v3_87cc, 32
  %v3_87e8 = mul nuw nsw i32 %v3_87e0, 4
  store i32 %v3_87e8, i32* @ip, align 4
  store i32 %v2_86d0, i32* @lr, align 4
  %v2_87f0 = add i32 %v3_87e8, %v2_86d0
  store i32 %v2_87f0, i32* %r2.global-to-local, align 4
  %v1_87f4 = add i32 %v2_87f0, -292
  %v2_87f4 = inttoptr i32 %v1_87f4 to i32*
  %v3_87f4 = load i32, i32* %v2_87f4, align 4
  %v1_87f8 = urem i32 %v3_87cc, 32
  store i32 %v1_87f8, i32* %r1.global-to-local, align 4
  %v2_87fc = add nsw i32 %v1_87f8, -1
  %v3_87fc = shl i32 1, %v2_87fc
  %v4_87fc = and i32 %v3_87f4, %v3_87fc
  %v5_87fc = icmp ne i32 %v4_87fc, 0
  store i1 %v5_87fc, i1* %cpsr_c.global-to-local, align 1
  %v6_87fc = lshr i32 %v3_87f4, %v1_87f8
  store i32 %v6_87fc, i32* %r3.global-to-local, align 4
  %v1_8800 = urem i32 %v6_87fc, 2
  %v2_8800 = icmp eq i32 %v1_8800, 0
  store i1 %v2_8800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8800, label %dec_label_pc_8774, label %dec_label_pc_8808

dec_label_pc_8808:                                ; preds = %dec_label_pc_87e0
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_8820, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %stack_var_-52, align 4
  store i32 %v2_882c, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_8838 = call i32 @function_12b2c(i32 %v3_87cc, i32 1, i32 4, i32 %v2_8820, i32 %v2_882c)
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_8840 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_8840, i32* %r3.global-to-local, align 4
  %v2_8844 = or i32 %v3_8840, %v5_8838
  store i32 %v2_8844, i32* %r0.global-to-local, align 4
  %v4_8844 = icmp eq i32 %v2_8844, 0
  store i1 %v4_8844, i1* %cpsr_z.global-to-local, align 1
  %v0_884c = load i32, i32* @sl, align 4
  %v1_884c = add i32 %v0_884c, -1452
  %v2_884c = inttoptr i32 %v1_884c to i32*
  %v3_884c = load i32, i32* %v2_884c, align 4
  br i1 %v4_8844, label %dec_label_pc_884c, label %dec_label_pc_8f54

dec_label_pc_884c:                                ; preds = %dec_label_pc_8808
  store i32 %v3_884c, i32* %r3.global-to-local, align 4
  %v3_8850 = udiv i32 %v3_884c, 32
  store i32 %v3_8850, i32* %r2.global-to-local, align 4
  %v1_8854 = urem i32 %v3_884c, 32
  store i32 %v1_8854, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8858 = mul nuw nsw i32 %v3_8850, 4
  store i32 %v3_8858, i32* @ip, align 4
  %v0_885c = load i32, i32* @r4, align 4
  %v1_885c = trunc i32 %v0_885c to i8
  %v3_885c = add i32 %v0_884c, -1448
  %v4_885c = inttoptr i32 %v3_885c to i8*
  store i8 %v1_885c, i8* %v4_885c, align 1
  %v0_877c.pre = load i32, i32* @ip, align 4
  %v1_8784.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8774

dec_label_pc_8864:                                ; preds = %dec_label_pc_85cc
  %v1_8864 = add i32 %v3_8870, 4
  %v2_8864 = inttoptr i32 %v1_8864 to i32*
  %v3_8864 = load i32, i32* %v2_8864, align 4
  store i32 %v3_8864, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8868 = icmp eq i32 %v3_8864, 0
  store i1 %v2_8868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8868, label %.thread19, label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8864
  store i32 4, i32* @r3, align 4
  store i8 4, i8* %v2_85cc, align 1
  %v0_8874.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8874.pr.pr, label %.thread17..thread19_crit_edge, label %dec_label_pc_887c

.thread17..thread19_crit_edge:                    ; preds = %.thread17
  %v1_8874.pre = load i32, i32* @r3, align 4
  %v3_8874.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8874.pre to i8
  br label %.thread19

.thread19:                                        ; preds = %.thread17..thread19_crit_edge, %dec_label_pc_8864
  %v3_8874 = phi i32 [ %v3_8874.pre, %.thread17..thread19_crit_edge ], [ %v3_8870, %dec_label_pc_8864 ]
  %v1_8874.off0 = phi i8 [ %extract.t, %.thread17..thread19_crit_edge ], [ 0, %dec_label_pc_8864 ]
  %v4_8874 = add i32 %v3_8874, -1448
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 %v1_8874.off0, i8* %v5_8874, align 1
  %v0_8878.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8878.pr, label %.thread19.dec_label_pc_85e8_crit_edge, label %dec_label_pc_887c

.thread19.dec_label_pc_85e8_crit_edge:            ; preds = %.thread19
  %v0_85e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_85e8

dec_label_pc_887c:                                ; preds = %.thread17, %.thread19, %dec_label_pc_8574
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  %v0_8884 = load i32, i32* @r5, align 4
  %v1_8884 = add i32 %v0_8884, 2112
  store i32 %v1_8884, i32* %r0.global-to-local, align 4
  %v1_8888 = load i32, i32* @r6, align 4
  %v2_8888 = add i32 %v1_8888, 12
  %v3_8888 = inttoptr i32 %v2_8888 to i32*
  store i32 -1, i32* %v3_8888, align 4
  %v0_888c = load i32, i32* %r0.global-to-local, align 4
  %v1_888c = add i32 %v0_888c, 4
  store i32 %v1_888c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8894 = load i32, i32* %sb.global-to-local, align 4
  %v1_8894 = load i32, i32* @r6, align 4
  %v2_8894 = inttoptr i32 %v1_8894 to i32*
  store i32 %v0_8894, i32* %v2_8894, align 4
  %v2_8898 = call i32 @function_118f8(i32 %v1_888c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_88a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_88a4 = load i32, i32* @r6, align 4
  %v2_88a4 = add i32 %v1_88a4, 660
  %v3_88a4 = inttoptr i32 %v2_88a4 to i32*
  store i32 %v0_88a4, i32* %v3_88a4, align 4
  %v2_88a8 = call i32 @function_118f8(i32 %stack_var_-20860.0.ph, i32 10240)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88b0 = call i32 @function_11864(i8* %v1_88b0)
  %v0_88b4 = load i32, i32* @r5, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_88bc = add i32 %v0_88b4, 1431
  store i32 %v1_88bc, i32* %fp.global-to-local, align 4
  %v2_88c0 = add i32 %v2_88b0, %stack_var_-20860.0.ph
  store i32 %v2_88c0, i32* @r0, align 4
  store i32 %v1_88bc, i32* %r1.global-to-local, align 4
  %v2_88c8 = inttoptr i32 %v2_88c0 to i8*
  %v3_88c8 = call i32 @function_1188c(i8* %v2_88c8, i32 %v1_88bc)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88d0 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_17694.24 to i32), i32* %r1.global-to-local, align 4
  %v2_88dc = add i32 %v2_88d0, %stack_var_-20860.0.ph
  store i32 %v2_88dc, i32* @r0, align 4
  %v2_88e0 = inttoptr i32 %v2_88dc to i8*
  %v3_88e0 = call i32 @function_1188c(i8* %v2_88e0, i32 ptrtoint (i32* @global_var_17694.24 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_88e8 = call i32 @function_11864(i8* %v1_88b0)
  %v2_88f0 = add i32 %v2_88e8, %stack_var_-20860.0.ph
  store i32 %v2_88f0, i32* @r0, align 4
  %v0_88f4 = load i32, i32* @r5, align 4
  %v1_88f4 = add i32 %v0_88f4, 532
  store i32 %v1_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = inttoptr i32 %v2_88f0 to i8*
  %v3_88f8 = call i32 @function_1188c(i8* %v2_88f8, i32 %v1_88f4)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8900 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1766c.26 to i32), i32* %r1.global-to-local, align 4
  %v2_890c = add i32 %v2_8900, %stack_var_-20860.0.ph
  store i32 %v2_890c, i32* @r0, align 4
  %v3_8910 = inttoptr i32 %v2_890c to i8*
  %v4_8910 = call i32 @function_1188c(i8* %v3_8910, i32 ptrtoint ([24 x i8]* @global_var_1766c.26 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8918 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v1_8920 = add i32 %v0_8920, 20
  store i32 %v1_8920, i32* %r1.global-to-local, align 4
  %v2_8924 = add i32 %v2_8918, %stack_var_-20860.0.ph
  store i32 %v2_8924, i32* @r0, align 4
  %v2_8928 = inttoptr i32 %v2_8924 to i8*
  %v3_8928 = call i32 @function_1188c(i8* %v2_8928, i32 %v1_8920)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8930 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17684.28 to i32), i32* %r1.global-to-local, align 4
  %v2_893c = add i32 %v2_8930, %stack_var_-20860.0.ph
  store i32 %v2_893c, i32* @r0, align 4
  %v3_8940 = inttoptr i32 %v2_893c to i8*
  %v4_8940 = call i32 @function_1188c(i8* %v3_8940, i32 ptrtoint ([9 x i8]* @global_var_17684.28 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8948 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  %v0_8950 = load i32, i32* @r5, align 4
  %v2_8954 = add i32 %v2_8948, %stack_var_-20860.0.ph
  store i32 %v2_8954, i32* @r0, align 4
  %v1_8958 = add i32 %v0_8950, 789
  store i32 %v1_8958, i32* %r1.global-to-local, align 4
  %v2_895c = inttoptr i32 %v2_8954 to i8*
  %v3_895c = call i32 @function_1188c(i8* %v2_895c, i32 %v1_8958)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8964 = call i32 @function_11864(i8* %v1_88b0)
  %v2_896c = add i32 %v2_8964, %stack_var_-20860.0.ph
  store i32 %v2_896c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v3_8974 = inttoptr i32 %v2_896c to i8*
  %v4_8974 = call i32 @function_1188c(i8* %v3_8974, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_897c = call i32 @function_10e40(i32 39)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8984 = call i32 @function_11864(i8* %v1_88b0)
  %v0_8988 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8988, i32* %r1.global-to-local, align 4
  store i32 %v2_8984, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_8994 = inttoptr i32 %v0_8988 to i32*
  %v3_8994 = call i32 @function_10d7c(i32 39, i32* %v2_8994)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8994, i32* %r1.global-to-local, align 4
  %v1_89a0 = load i32, i32* @r4, align 4
  %v2_89a0 = add i32 %v1_89a0, %stack_var_-20860.0.ph
  store i32 %v2_89a0, i32* @r0, align 4
  %v2_89a4 = inttoptr i32 %v2_89a0 to i8*
  %v3_89a4 = call i32 @function_1188c(i8* %v2_89a4, i32 %v3_8994)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_89ac = call i32 @function_10da0(i32 39)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b4 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_89c0 = add i32 %v2_89b4, %stack_var_-20860.0.ph
  store i32 %v2_89c0, i32* @r0, align 4
  %v3_89c4 = inttoptr i32 %v2_89c0 to i8*
  %v4_89c4 = call i32 @function_1188c(i8* %v3_89c4, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_89cc = call i32 @function_10e40(i32 40)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d4 = call i32 @function_11864(i8* %v1_88b0)
  %v0_89d8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_89d8, i32* %r1.global-to-local, align 4
  store i32 %v2_89d4, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v0_89d8 to i32*
  %v3_89e4 = call i32 @function_10d7c(i32 40, i32* %v2_89e4)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_89e4, i32* %r1.global-to-local, align 4
  %v1_89f0 = load i32, i32* @r4, align 4
  %v2_89f0 = add i32 %v1_89f0, %stack_var_-20860.0.ph
  store i32 %v2_89f0, i32* @r0, align 4
  %v2_89f4 = inttoptr i32 %v2_89f0 to i8*
  %v3_89f4 = call i32 @function_1188c(i8* %v2_89f4, i32 %v3_89e4)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_89fc = call i32 @function_10da0(i32 40)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a04 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8a10 = add i32 %v2_8a04, %stack_var_-20860.0.ph
  store i32 %v2_8a10, i32* @r0, align 4
  %v3_8a14 = inttoptr i32 %v2_8a10 to i8*
  %v4_8a14 = call i32 @function_1188c(i8* %v3_8a14, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8a1c = call i32 @function_10e40(i32 41)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a24 = call i32 @function_11864(i8* %v1_88b0)
  %v0_8a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 %v2_8a24, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v3_8a34 = call i32 @function_10d7c(i32 41, i32* %v2_8a34)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a34, i32* %r1.global-to-local, align 4
  %v1_8a40 = load i32, i32* @r4, align 4
  %v2_8a40 = add i32 %v1_8a40, %stack_var_-20860.0.ph
  store i32 %v2_8a40, i32* @r0, align 4
  %v2_8a44 = inttoptr i32 %v2_8a40 to i8*
  %v3_8a44 = call i32 @function_1188c(i8* %v2_8a44, i32 %v3_8a34)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8a4c = call i32 @function_10da0(i32 41)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a54 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8a60 = add i32 %v2_8a54, %stack_var_-20860.0.ph
  store i32 %v2_8a60, i32* @r0, align 4
  %v3_8a64 = inttoptr i32 %v2_8a60 to i8*
  %v4_8a64 = call i32 @function_1188c(i8* %v3_8a64, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 %v4_8a64, i32* %r0.global-to-local, align 4
  store i32 %v6_81bc, i32* %ip.global-to-local, align 4
  %v1_8a6c = load i32, i32* %sb.global-to-local, align 4
  %v3_8a6c = icmp uge i32 %v6_81bc, %v1_8a6c
  store i1 %v3_8a6c, i1* %cpsr_c.global-to-local, align 1
  %v9_8a6c = icmp eq i32 %v6_81bc, %v1_8a6c
  store i1 %v9_8a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8a6c, label %dec_label_pc_8b44, label %dec_label_pc_8a74

dec_label_pc_8a74:                                ; preds = %dec_label_pc_887c
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8a78 = call i32 @function_10e40(i32 42)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a80 = call i32 @function_11864(i8* %v1_88b0)
  %v0_8a84 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  store i32 %v2_8a80, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v3_8a90 = call i32 @function_10d7c(i32 42, i32* %v2_8a90)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v3_8a90, i32* %r1.global-to-local, align 4
  %v1_8a9c = load i32, i32* @r4, align 4
  %v2_8a9c = add i32 %v1_8a9c, %stack_var_-20860.0.ph
  store i32 %v2_8a9c, i32* @r0, align 4
  %v2_8aa0 = inttoptr i32 %v2_8a9c to i8*
  %v3_8aa0 = call i32 @function_1188c(i8* %v2_8aa0, i32 %v3_8a90)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8aa8 = call i32 @function_10da0(i32 42)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ab0 = call i32 @function_11864(i8* %v1_88b0)
  %v2_8ab8 = add i32 %v2_8ab0, %stack_var_-20860.0.ph
  store i32 %v2_8ab8, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v3_8ac0 = inttoptr i32 %v2_8ab8 to i8*
  %v4_8ac0 = call i32 @function_1188c(i8* %v3_8ac0, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ac8 = call i32 @function_11864(i8* %v1_88b0)
  %v0_8acc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8acc, i32* %r1.global-to-local, align 4
  store i32 %v2_8ac8, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_8ad8 = inttoptr i32 %v0_8acc to i32*
  %v3_8ad8 = call i32 @function_10d7c(i32 47, i32* %v2_8ad8)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8ad8, i32* %r1.global-to-local, align 4
  %v2_8ae4 = add i32 %v2_8ac8, %stack_var_-20860.0.ph
  store i32 %v2_8ae4, i32* @r0, align 4
  %v2_8ae8 = inttoptr i32 %v2_8ae4 to i8*
  %v3_8ae8 = call i32 @function_1188c(i8* %v2_8ae8, i32 %v3_8ad8)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8af0 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_17694.24 to i32), i32* %r1.global-to-local, align 4
  %v2_8afc = add i32 %v2_8af0, %stack_var_-20860.0.ph
  store i32 %v2_8afc, i32* @r0, align 4
  %v2_8b00 = inttoptr i32 %v2_8afc to i8*
  %v3_8b00 = call i32 @function_1188c(i8* %v2_8b00, i32 ptrtoint (i32* @global_var_17694.24 to i32))
  store i32 %v6_81bc, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_11864(i8* %v1_8b08)
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b14 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8b20 = add i32 %v2_8b14, %stack_var_-20860.0.ph
  store i32 %v2_8b20, i32* %r2.global-to-local, align 4
  %v0_8b24 = load i32, i32* @r4, align 4
  store i32 %v0_8b24, i32* %r0.global-to-local, align 4
  %v3_8b28 = trunc i32 %v0_8b24 to i8
  %v4_8b28 = call i32 @function_11d58(i8 %v3_8b28, i32 10, i32 %v2_8b20)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b30 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8b3c = add i32 %v2_8b30, %stack_var_-20860.0.ph
  store i32 %v2_8b3c, i32* @r0, align 4
  %v3_8b40 = inttoptr i32 %v2_8b3c to i8*
  %v4_8b40 = call i32 @function_1188c(i8* %v3_8b40, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 %v4_8b40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8b44

dec_label_pc_8b44:                                ; preds = %dec_label_pc_887c, %dec_label_pc_8a74
  %v0_8b44 = load i32, i32* @r6, align 4
  %v1_8b44 = add i32 %v0_8b44, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8b48 = icmp eq i32 %v3_8b44, 0
  store i1 %v2_8b48, i1* %cpsr_z.global-to-local, align 1
  %tmp177 = icmp slt i32 %v3_8b44, 1
  br i1 %tmp177, label %dec_label_pc_8bf0, label %dec_label_pc_8b50

dec_label_pc_8b50:                                ; preds = %dec_label_pc_8b44
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b54 = call i32 @function_11864(i8* %v1_88b0)
  %v2_8b5c = add i32 %v2_8b54, %stack_var_-20860.0.ph
  store i32 %v2_8b5c, i32* @r0, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_176a4.32 to i32), i32* %r1.global-to-local, align 4
  %v3_8b64 = inttoptr i32 %v2_8b5c to i8*
  %v4_8b64 = call i32 @function_1188c(i8* %v3_8b64, i32 ptrtoint ([9 x i8]* @global_var_176a4.32 to i32))
  store i32 %v4_8b64, i32* %r0.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r6, align 4
  %v1_8b68 = add i32 %v0_8b68, 16
  %v2_8b68 = inttoptr i32 %v1_8b68 to i32*
  %v3_8b68 = load i32, i32* %v2_8b68, align 4
  store i32 %v3_8b68, i32* %r3.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8b70 = icmp eq i32 %v3_8b68, 0
  store i1 %v2_8b70, i1* %cpsr_z.global-to-local, align 1
  %v0_8b74 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8b74, i32* %stack_var_-44, align 4
  %tmp178 = icmp slt i32 %v3_8b68, 1
  br i1 %tmp178, label %dec_label_pc_8bd8, label %dec_label_pc_8b7c

dec_label_pc_8b7c:                                ; preds = %dec_label_pc_8b50, %dec_label_pc_8b7c
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b80 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_8b88 = load i32, i32* %stack_var_-44, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_8b90 = and i32 %v3_8b88, 33554432
  %v2_8b90 = icmp ne i32 %v1_8b90, 0
  store i1 %v2_8b90, i1* %cpsr_c.global-to-local, align 1
  %v3_8b90 = mul i32 %v3_8b88, 128
  %v1_8b94 = add i32 %v3_8b90, 1472
  %v2_8b98 = add i32 %v2_8b80, %stack_var_-20860.0.ph
  store i32 %v2_8b98, i32* @r0, align 4
  %v0_8b9c = load i32, i32* @r5, align 4
  %v2_8b9c = add i32 %v1_8b94, %v0_8b9c
  store i32 %v2_8b9c, i32* %r1.global-to-local, align 4
  %v2_8ba0 = inttoptr i32 %v2_8b98 to i8*
  %v3_8ba0 = call i32 @function_1188c(i8* %v2_8ba0, i32 %v2_8b9c)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ba8 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176b0.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bb4 = add i32 %v2_8ba8, %stack_var_-20860.0.ph
  store i32 %v2_8bb4, i32* @r0, align 4
  %v3_8bb8 = inttoptr i32 %v2_8bb4 to i8*
  %v4_8bb8 = call i32 @function_1188c(i8* %v3_8bb8, i32 ptrtoint ([3 x i8]* @global_var_176b0.34 to i32))
  store i32 %v4_8bb8, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_8bc0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bc0, i32* %r3.global-to-local, align 4
  %v0_8bc4 = load i32, i32* @r6, align 4
  %v1_8bc4 = add i32 %v0_8bc4, 16
  %v2_8bc4 = inttoptr i32 %v1_8bc4 to i32*
  %v3_8bc4 = load i32, i32* %v2_8bc4, align 4
  store i32 %v3_8bc4, i32* %r2.global-to-local, align 4
  %v1_8bc8 = add i32 %v3_8bc0, 1
  store i32 %v1_8bc8, i32* %ip.global-to-local, align 4
  %v3_8bcc = icmp uge i32 %v3_8bc4, %v1_8bc8
  store i1 %v3_8bcc, i1* %cpsr_c.global-to-local, align 1
  %v9_8bcc = icmp eq i32 %v3_8bc4, %v1_8bc8
  store i1 %v9_8bcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8bc8, i32* %stack_var_-44, align 4
  %v8_8bd4 = icmp sgt i32 %v3_8bc4, %v1_8bc8
  br i1 %v8_8bd4, label %dec_label_pc_8b7c, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b7c, %dec_label_pc_8b50
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20860.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_1188c(i8* %v3_8bec, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8b44, %dec_label_pc_8bd8
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bf4 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8c00 = add i32 %v2_8bf4, %stack_var_-20860.0.ph
  store i32 %v2_8c00, i32* @r0, align 4
  %v3_8c04 = inttoptr i32 %v2_8c00 to i8*
  %v4_8c04 = call i32 @function_1188c(i8* %v3_8c04, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32))
  store i32 %v4_8c04, i32* %r0.global-to-local, align 4
  store i32 %v6_81bc, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_8c0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c0c, label %dec_label_pc_8c2c, label %dec_label_pc_8c14

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8bf0
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c18 = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v6_81bc, i32* %r1.global-to-local, align 4
  %v2_8c24 = add i32 %v2_8c18, %stack_var_-20860.0.ph
  store i32 %v2_8c24, i32* @r0, align 4
  %v2_8c28 = inttoptr i32 %v2_8c24 to i8*
  %v3_8c28 = call i32 @function_1188c(i8* %v2_8c28, i32 %v6_81bc)
  store i32 %v3_8c28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c2c

dec_label_pc_8c2c:                                ; preds = %dec_label_pc_8bf0, %dec_label_pc_8c14
  %v0_8c2c = load i32, i32* @r5, align 4
  %v1_8c2c = add i32 %v0_8c2c, 1440
  store i32 %v1_8c2c, i32* %r4.global-to-local, align 4
  %v0_8c30 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8c30, i32* %r0.global-to-local, align 4
  store i32 %v1_8c2c, i32* %r1.global-to-local, align 4
  %v2_8c38 = inttoptr i32 %v0_8c30 to i8*
  %v3_8c38 = call i32 @function_11c44(i8* %v2_8c38, i32 %v1_8c2c)
  store i32 %v3_8c38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8c3c = icmp eq i32 %v3_8c38, 0
  store i1 %v2_8c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c3c, label %dec_label_pc_967c, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c2c, %dec_label_pc_967c
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_8c48 = load i32, i32* @r6, align 4
  %v1_8c48 = add i32 %v0_8c48, -1452
  %v2_8c48 = inttoptr i32 %v1_8c48 to i32*
  %v3_8c48 = load i32, i32* %v2_8c48, align 4
  store i32 %v3_8c48, i32* @r4, align 4
  %v2_8c4c = call i32 @function_11864(i8* %v1_88b0)
  store i32 %stack_var_-20860.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8c4c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8c5c = load i32, i32* @r4, align 4
  store i32 %v0_8c5c, i32* %r0.global-to-local, align 4
  %v4_8c60 = call i32 @function_12c18(i32 %v0_8c5c, i32 %stack_var_-20860.0.ph, i32 %v2_8c4c, i32 16384)
  store i32 %v4_8c60, i32* %r0.global-to-local, align 4
  %v0_8c64 = load i32, i32* @r6, align 4
  %v1_8c64 = add i32 %v0_8c64, -1452
  %v2_8c64 = inttoptr i32 %v1_8c64 to i32*
  %v3_8c64 = load i32, i32* %v2_8c64, align 4
  store i32 %v3_8c64, i32* %ip.global-to-local, align 4
  %v3_8c6c = udiv i32 %v3_8c64, 32
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v3_8c74 = mul nuw nsw i32 %v3_8c6c, 4
  %v2_8c78 = add i32 %v3_8c74, %v2_86d0
  store i32 %v2_8c78, i32* %r2.global-to-local, align 4
  %v1_8c7c = add i32 %v2_8c78, -164
  %v2_8c7c = inttoptr i32 %v1_8c7c to i32*
  %v3_8c7c = load i32, i32* %v2_8c7c, align 4
  %v1_8c84 = urem i32 %v3_8c64, 32
  store i32 %v1_8c84, i32* %r0.global-to-local, align 4
  %v7_8c88 = shl i32 1, %v1_8c84
  %v8_8c88 = or i32 %v3_8c7c, %v7_8c88
  store i32 %v8_8c88, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v8_8c88, i32* %v2_8c7c, align 4
  %v0_8c94 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c94 = trunc i32 %v0_8c94 to i8
  %v2_8c94 = load i32, i32* @r6, align 4
  %v3_8c94 = add i32 %v2_8c94, -1448
  %v4_8c94 = inttoptr i32 %v3_8c94 to i8*
  store i8 %v1_8c94, i8* %v4_8c94, align 1
  %v0_8c98 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c98 = load i32, i32* @r8, align 4
  %v2_8c98 = sub i32 %v0_8c98, %v1_8c98
  %v3_8c98 = icmp uge i32 %v0_8c98, %v1_8c98
  store i1 %v3_8c98, i1* %cpsr_c.global-to-local, align 1
  %v4_8c98 = xor i32 %v1_8c98, %v0_8c98
  %v5_8c98 = xor i32 %v2_8c98, %v0_8c98
  %v6_8c98 = and i32 %v5_8c98, %v4_8c98
  %v7_8c98 = icmp slt i32 %v6_8c98, 0
  %v8_8c98 = icmp slt i32 %v2_8c98, 0
  %v9_8c98 = icmp eq i32 %v0_8c98, %v1_8c98
  store i1 %v9_8c98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_84f0, i32* %r2.global-to-local, align 4
  %v3_8ca0 = xor i1 %v8_8c98, %v7_8c98
  %v4_8ca0 = or i1 %v9_8c98, %v3_8ca0
  br i1 %v4_8ca0, label %bb180, label %bb179

bb179:                                            ; preds = %dec_label_pc_8c44
  %v6_8ca0 = add i32 %v0_8c98, 1
  store i32 %v6_8ca0, i32* @r8, align 4
  br label %bb180

bb180:                                            ; preds = %dec_label_pc_8c44, %bb179
  %v1_8ca4 = load i32, i32* @r6, align 4
  %v2_8ca4 = add i32 %v1_8ca4, -1440
  %v3_8ca4 = inttoptr i32 %v2_8ca4 to i32*
  store i32 %v2_84f0, i32* %v3_8ca4, align 4
  br label %dec_label_pc_85b4

dec_label_pc_8cac:                                ; preds = %dec_label_pc_856c
  %v1_8cac = add i32 %v3_8870, -1444
  %v2_8cac = inttoptr i32 %v1_8cac to i32*
  %v3_8cac = load i32, i32* %v2_8cac, align 4
  store i32 %v2_84f0, i32* %r1.global-to-local, align 4
  %v2_8cb4 = sub i32 %v2_84f0, %v3_8cac
  store i32 %v2_8cb4, i32* %r3.global-to-local, align 4
  %v2_8cb8 = icmp ugt i32 %v2_8cb4, 29
  store i1 %v2_8cb8, i1* %cpsr_c.global-to-local, align 1
  %v7_8cb8 = icmp eq i32 %v2_8cb4, 30
  store i1 %v7_8cb8, i1* %cpsr_z.global-to-local, align 1
  %v2_8cbc = xor i1 %v7_8cb8, true
  %v3_8cbc = and i1 %v2_8cb8, %v2_8cbc
  br i1 %v3_8cbc, label %dec_label_pc_859c, label %dec_label_pc_8cc0

dec_label_pc_8cc0:                                ; preds = %dec_label_pc_8cac
  %v2_8cc0 = inttoptr i32 %v1_85d8 to i32*
  %v3_8cc0 = load i32, i32* %v2_8cc0, align 4
  store i32 %v3_8cc0, i32* %ip.global-to-local, align 4
  %v3_8cc8 = udiv i32 %v3_8cc0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8ccc = mul nuw nsw i32 %v3_8cc8, 4
  store i32 %v3_8ccc, i32* %r2.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_86d8

dec_label_pc_8cdc:                                ; preds = %dec_label_pc_857c
  %v2_8cdc = inttoptr i32 %v1_85d8 to i32*
  %v3_8cdc = load i32, i32* %v2_8cdc, align 4
  store i32 %v3_8cdc, i32* %ip.global-to-local, align 4
  %v3_8ce4 = udiv i32 %v3_8cdc, 32
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v3_8cec = mul nuw nsw i32 %v3_8ce4, 4
  %v2_8cf0 = add i32 %v3_8cec, %v2_86d0
  store i32 %v2_8cf0, i32* %r2.global-to-local, align 4
  %v1_8cf4 = add i32 %v2_8cf0, -164
  %v2_8cf4 = inttoptr i32 %v1_8cf4 to i32*
  %v3_8cf4 = load i32, i32* %v2_8cf4, align 4
  %v1_8cf8 = urem i32 %v3_8cdc, 32
  store i32 %v1_8cf8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_8d00 = shl i32 1, %v1_8cf8
  %v8_8d00 = or i32 %v3_8cf4, %v7_8d00
  store i32 %v8_8d00, i32* %r1.global-to-local, align 4
  %v1_8d04 = load i32, i32* @r8, align 4
  %v2_8d04 = sub i32 %v3_8cdc, %v1_8d04
  %v3_8d04 = icmp uge i32 %v3_8cdc, %v1_8d04
  store i1 %v3_8d04, i1* %cpsr_c.global-to-local, align 1
  %v4_8d04 = xor i32 %v1_8d04, %v3_8cdc
  %v5_8d04 = xor i32 %v2_8d04, %v3_8cdc
  %v6_8d04 = and i32 %v5_8d04, %v4_8d04
  %v7_8d04 = icmp slt i32 %v6_8d04, 0
  %v8_8d04 = icmp slt i32 %v2_8d04, 0
  %v9_8d04 = icmp eq i32 %v3_8cdc, %v1_8d04
  store i1 %v9_8d04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d00, i32* %v2_8cf4, align 4
  %v3_8d0c = xor i1 %v8_8d04, %v7_8d04
  %v4_8d0c = or i1 %v9_8d04, %v3_8d0c
  br i1 %v4_8d0c, label %dec_label_pc_85b4, label %dec_label_pc_8d10

dec_label_pc_8d10:                                ; preds = %dec_label_pc_8cdc
  %v0_8d10 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v2_8d10 = add i32 %v1_8d10, %v0_8d10
  store i32 %v2_8d10, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8d18:                                ; preds = %dec_label_pc_879c
  %v0_8d18 = call i32 @function_128f0()
  store i32 %v0_8d18, i32* %r0.global-to-local, align 4
  %v0_8d1c = load i32, i32* @sl, align 4
  %v1_8d1c = add i32 %v0_8d1c, 660
  %v2_8d1c = inttoptr i32 %v1_8d1c to i32*
  %v3_8d1c = load i32, i32* %v2_8d1c, align 4
  store i32 %v3_8d1c, i32* @r3, align 4
  %v0_8d20 = load i32, i32* %sb.global-to-local, align 4
  %v2_8d24 = icmp ugt i32 %v3_8d1c, 1023
  store i1 %v2_8d24, i1* %cpsr_c.global-to-local, align 1
  %v7_8d24 = icmp eq i32 %v3_8d1c, 1024
  store i1 %v7_8d24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8d18, i32* %fp.global-to-local, align 4
  %v1_8d2c = add i32 %v0_8d20, 2116
  store i32 %v1_8d2c, i32* @r7, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e30, label %dec_label_pc_8d34

dec_label_pc_8d34:                                ; preds = %dec_label_pc_8d18, %dec_label_pc_8e30, %dec_label_pc_8e24
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8d38 = load i32, i32* %fp.global-to-local, align 4
  %v2_8d38 = inttoptr i32 %v1_8d38 to i32*
  store i32 0, i32* %v2_8d38, align 4
  %v0_8d3c = load i32, i32* @sl, align 4
  %v1_8d3c = add i32 %v0_8d3c, 660
  %v2_8d3c = inttoptr i32 %v1_8d3c to i32*
  %v3_8d3c = load i32, i32* %v2_8d3c, align 4
  store i32 %v3_8d3c, i32* %r1.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d3c, -1452
  %v2_8d40 = inttoptr i32 %v1_8d40 to i32*
  %v3_8d40 = load i32, i32* %v2_8d40, align 4
  store i32 %v3_8d40, i32* %r0.global-to-local, align 4
  %v1_8d44 = sub i32 1024, %v3_8d3c
  store i32 %v1_8d44, i32* %r2.global-to-local, align 4
  %v0_8d48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d48 = add i32 %v0_8d48, 16384
  store i32 %v1_8d48, i32* %r3.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r7, align 4
  %v2_8d4c = add i32 %v0_8d4c, %v3_8d3c
  store i32 %v2_8d4c, i32* %r1.global-to-local, align 4
  %v4_8d50 = call i32 @function_12ba4(i32 %v3_8d40, i32 %v2_8d4c, i32 %v1_8d44, i32 %v1_8d48)
  store i32 %v4_8d50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8d54 = icmp eq i32 %v4_8d50, 0
  store i1 %v2_8d54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d54, label %dec_label_pc_968c, label %dec_label_pc_8d5c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8d34
  %v2_8d5c = icmp eq i32 %v4_8d50, -1
  store i1 %v2_8d5c, i1* %cpsr_c.global-to-local, align 1
  %v7_8d5c = icmp eq i32 %v4_8d50, -1
  store i1 %v7_8d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d5c, label %dec_label_pc_96b0, label %dec_label_pc_8d64

dec_label_pc_8d64:                                ; preds = %dec_label_pc_8d5c
  %v0_8d64 = load i32, i32* @sl, align 4
  %v1_8d64 = add i32 %v0_8d64, 660
  %v2_8d64 = inttoptr i32 %v1_8d64 to i32*
  %v3_8d64 = load i32, i32* %v2_8d64, align 4
  store i32 %v2_875c, i32* %r1.global-to-local, align 4
  %v2_8d6c = add i32 %v3_8d64, %v4_8d50
  store i32 %v2_8d6c, i32* @r4, align 4
  store i32 %v2_8d6c, i32* %v2_8d64, align 4
  %v0_8d74 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d74 = load i32, i32* @sl, align 4
  %v2_8d74 = add i32 %v1_8d74, -1444
  %v3_8d74 = inttoptr i32 %v2_8d74 to i32*
  store i32 %v0_8d74, i32* %v3_8d74, align 4
  br label %dec_label_pc_8e04

dec_label_pc_8d7c:                                ; preds = %dec_label_pc_8e04
  %v1_8d7c = inttoptr i32 %v0_8e04 to i32*
  %v2_8d7c = load i32, i32* %v1_8d7c, align 4
  store i32 %v2_8d7c, i32* @r8, align 4
  %v1_8d80 = load i32, i32* @r4, align 4
  %v5_8d84 = icmp slt i32 %v3_8e04, %v1_8d80
  %storemerge49 = select i1 %v5_8d84, i32 %v3_8e04, i32 %v1_8d80
  store i32 %storemerge49, i32* @r6, align 4
  %v2_8d8c = sub i32 %v3_8e04, %storemerge49
  store i32 %v2_8d8c, i32* %r3.global-to-local, align 4
  %v2_8d90 = icmp ne i32 %v2_8d7c, 0
  store i1 %v2_8d90, i1* %cpsr_c.global-to-local, align 1
  %v7_8d90 = icmp eq i32 %v2_8d7c, 1
  store i1 %v7_8d90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d8c, i32* %v2_8e04, align 4
  br i1 %v7_8d90, label %dec_label_pc_8e54, label %.dec_label_pc_8da0thread-pre-split_crit_edge

.dec_label_pc_8da0thread-pre-split_crit_edge:     ; preds = %dec_label_pc_8d7c
  %v1_8d98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_8d98, i32* @r5, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8da0:                                ; preds = %dec_label_pc_8e10, %.dec_label_pc_8da0thread-pre-split_crit_edge, %dec_label_pc_8e7c
  %v0_8da0 = phi i32 [ %v3_8e7c, %dec_label_pc_8e7c ], [ %v1_8d98, %.dec_label_pc_8da0thread-pre-split_crit_edge ], [ %v3_8e04, %dec_label_pc_8e10 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8da0 = icmp eq i32 %v0_8da0, 0
  store i1 %v2_8da0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8da0, label %dec_label_pc_8da8, label %dec_label_pc_8dc8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8da0
  %v0_8da8 = load i32, i32* @sl, align 4
  %v1_8da8 = add i32 %v0_8da8, 8
  %v2_8da8 = inttoptr i32 %v1_8da8 to i32*
  %v3_8da8 = load i32, i32* %v2_8da8, align 4
  store i32 %v3_8da8, i32* @r4, align 4
  %v2_8dac = icmp ne i32 %v3_8da8, 0
  store i1 %v2_8dac, i1* %cpsr_c.global-to-local, align 1
  %v7_8dac = icmp eq i32 %v3_8da8, 1
  store i1 %v7_8dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8dac, label %dec_label_pc_8e84, label %dec_label_pc_8db4

dec_label_pc_8db4:                                ; preds = %dec_label_pc_8da8
  %v1_8db4 = add i32 %v0_8da8, 660
  %v2_8db4 = inttoptr i32 %v1_8db4 to i32*
  %v3_8db4 = load i32, i32* %v2_8db4, align 4
  %v0_8db8 = load i32, i32* @r6, align 4
  %v2_8db8 = sub i32 %v3_8db4, %v0_8db8
  store i32 %v2_8db8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8dbc = icmp eq i32 %v2_8db8, 0
  store i1 %v2_8dbc, i1* %cpsr_z.global-to-local, align 1
  %v2_8dc0 = add i32 %v0_8da8, 12
  %v3_8dc0 = inttoptr i32 %v2_8dc0 to i32*
  store i32 %v2_8db8, i32* %v3_8dc0, align 4
  br i1 %v2_8dbc, label %dec_label_pc_9670, label %dec_label_pc_8dc8

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8da0, %dec_label_pc_8e84, %dec_label_pc_8db4, %dec_label_pc_8f0c
  %v0_8dc8 = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8dc8 = icmp eq i32 %v0_8dc8, 0
  store i1 %v2_8dc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8dc8, label %dec_label_pc_8e18, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8dc8
  %v0_8dd0 = load i32, i32* @sl, align 4
  %v1_8dd0 = add i32 %v0_8dd0, 660
  %v2_8dd0 = inttoptr i32 %v1_8dd0 to i32*
  %v3_8dd0 = load i32, i32* %v2_8dd0, align 4
  store i32 %v3_8dd0, i32* @r3, align 4
  %v2_8dd4 = sub i32 %v3_8dd0, %v0_8dc8
  store i32 %v2_8dd4, i32* @r4, align 4
  store i32 %v2_8dd4, i32* @r2, align 4
  store i32 %v2_8dd4, i32* %v2_8dd0, align 4
  %v0_8de0 = load i32, i32* @r7, align 4
  %v1_8de0 = load i32, i32* @r6, align 4
  %v2_8de0 = add i32 %v1_8de0, %v0_8de0
  store i32 %v2_8de0, i32* @r1, align 4
  store i32 %v0_8de0, i32* @r0, align 4
  %v3_8de8 = call i32 @function_129e0(i32 %v0_8de0, i32 %v2_8de0, i32 %v2_8dd4)
  store i32 %v3_8de8, i32* %r0.global-to-local, align 4
  %v0_8dec = load i32, i32* @sl, align 4
  %v1_8dec = add i32 %v0_8dec, 660
  %v2_8dec = inttoptr i32 %v1_8dec to i32*
  %v3_8dec = load i32, i32* %v2_8dec, align 4
  store i32 %v3_8dec, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8df4 = load i32, i32* %sb.global-to-local, align 4
  %v2_8df4 = add i32 %v0_8df4, %v3_8dec
  store i32 %v2_8df4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v3_8dec, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  %v3_8dfc = add i32 %v2_8df4, 2116
  %v4_8dfc = inttoptr i32 %v3_8dfc to i8*
  store i8 0, i8* %v4_8dfc, align 1
  %v0_8e00 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8e00, label %dec_label_pc_8e18, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8d64
  %v0_8e04 = load i32, i32* @sl, align 4
  %v1_8e04 = add i32 %v0_8e04, 12
  %v2_8e04 = inttoptr i32 %v1_8e04 to i32*
  %v3_8e04 = load i32, i32* %v2_8e04, align 4
  store i32 %v3_8e04, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8e08 = icmp eq i32 %v3_8e04, 0
  store i1 %v2_8e08, i1* %cpsr_z.global-to-local, align 1
  %v5_8e0c = icmp sgt i32 %v3_8e04, 0
  br i1 %v5_8e0c, label %dec_label_pc_8d7c, label %dec_label_pc_8e10

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8e04
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8e18:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8dc8
  %v0_8e18 = load i32, i32* @sl, align 4
  %v1_8e18 = add i32 %v0_8e18, -1448
  %v2_8e18 = inttoptr i32 %v1_8e18 to i8*
  %v3_8e18 = load i8, i8* %v2_8e18, align 1
  %v4_8e18 = zext i8 %v3_8e18 to i32
  store i32 %v4_8e18, i32* %r3.global-to-local, align 4
  %v2_8e1c = icmp ugt i8 %v3_8e18, 6
  store i1 %v2_8e1c, i1* %cpsr_c.global-to-local, align 1
  %v7_8e1c = icmp eq i8 %v3_8e18, 7
  store i1 %v7_8e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e1c, label %dec_label_pc_8e24, label %dec_label_pc_87ac

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8e18
  %v1_8e24 = add i32 %v0_8e18, 660
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r3, align 4
  %v2_8e28 = icmp ugt i32 %v3_8e24, 1023
  store i1 %v2_8e28, i1* %cpsr_c.global-to-local, align 1
  %v7_8e28 = icmp eq i32 %v3_8e24, 1024
  store i1 %v7_8e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e28, label %dec_label_pc_8e30.loopexit, label %dec_label_pc_8d34

dec_label_pc_8e30.loopexit:                       ; preds = %dec_label_pc_8e24
  %v0_8e30.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_8e38.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8e30.loopexit, %dec_label_pc_8d18
  %v0_8e38 = phi i32 [ %v0_8e38.pre, %dec_label_pc_8e30.loopexit ], [ %v1_8d2c, %dec_label_pc_8d18 ]
  %v0_8e30 = phi i32 [ %v0_8e30.pre, %dec_label_pc_8e30.loopexit ], [ %v0_8d20, %dec_label_pc_8d18 ]
  %v1_8e34 = add i32 %v0_8e30, 2180
  store i32 %v1_8e34, i32* @r1, align 4
  store i32 %v0_8e38, i32* @r0, align 4
  store i32 960, i32* @r2, align 4
  %v3_8e40 = call i32 @function_129e0(i32 %v0_8e38, i32 %v1_8e34, i32 960)
  store i32 %v3_8e40, i32* %r0.global-to-local, align 4
  %v0_8e44 = load i32, i32* @sl, align 4
  %v1_8e44 = add i32 %v0_8e44, 660
  %v2_8e44 = inttoptr i32 %v1_8e44 to i32*
  %v3_8e44 = load i32, i32* %v2_8e44, align 4
  store i32 %v3_8e44, i32* %r3.global-to-local, align 4
  %v1_8e48 = add i32 %v3_8e44, -64
  store i32 %v1_8e48, i32* @r4, align 4
  store i32 %v1_8e48, i32* %v2_8e44, align 4
  br label %dec_label_pc_8d34

dec_label_pc_8e54:                                ; preds = %dec_label_pc_8d7c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_8e5c = call i32 @function_10d7c(i32 43, i32* null)
  %v0_8e60 = load i32, i32* @r4, align 4
  store i32 %v0_8e60, i32* %r1.global-to-local, align 4
  store i32 %v3_8e5c, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_8e6c = load i32, i32* @r7, align 4
  store i32 %v0_8e6c, i32* %r0.global-to-local, align 4
  %v4_8e70 = call i32 @function_1191c(i32 %v0_8e6c, i32 %v0_8e60, i32 %v3_8e5c, i32 11)
  store i32 %v4_8e70, i32* %r0.global-to-local, align 4
  %v3_8e74 = icmp eq i32 %v4_8e70, -1
  store i1 %v3_8e74, i1* %cpsr_c.global-to-local, align 1
  %v8_8e74 = icmp eq i32 %v4_8e70, -1
  store i1 %v8_8e74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8e74, label %dec_label_pc_8e7c, label %dec_label_pc_994c

dec_label_pc_8e7c:                                ; preds = %dec_label_pc_8e54
  %v0_8e7c = load i32, i32* @sl, align 4
  %v1_8e7c = add i32 %v0_8e7c, 12
  %v2_8e7c = inttoptr i32 %v1_8e7c to i32*
  %v3_8e7c = load i32, i32* %v2_8e7c, align 4
  store i32 %v3_8e7c, i32* @r5, align 4
  br label %dec_label_pc_8da0

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8da8
  %v0_8e84 = load i32, i32* @r7, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v1_8e88 = add i32 %v0_8da8, 660
  %v2_8e88 = inttoptr i32 %v1_8e88 to i32*
  %v3_8e88 = load i32, i32* %v2_8e88, align 4
  store i32 %v3_8e88, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8e94 = call i32 @function_1191c(i32 %v0_8e84, i32 %v3_8e88, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_8e94, i32* %r0.global-to-local, align 4
  %v2_8e98 = icmp eq i32 %v5_8e94, -1
  store i1 %v2_8e98, i1* %cpsr_c.global-to-local, align 1
  %v7_8e98 = icmp eq i32 %v5_8e94, -1
  store i1 %v7_8e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e98, label %dec_label_pc_8dc8, label %dec_label_pc_8ea0

dec_label_pc_8ea0:                                ; preds = %dec_label_pc_8e84
  %v0_8ea0 = load i32, i32* @sl, align 4
  %v1_8ea0 = add i32 %v0_8ea0, 660
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  %v3_8ea0 = load i32, i32* %v2_8ea0, align 4
  store i32 %v3_8ea0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_8eac = load i32, i32* @r7, align 4
  store i32 %v0_8eac, i32* %r0.global-to-local, align 4
  %v5_8eb0 = call i32 @function_1191c(i32 %v0_8eac, i32 %v3_8ea0, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  %v0_8eb4 = load i32, i32* %sb.global-to-local, align 4
  %v2_8eb4 = add i32 %v0_8eb4, %v5_8eb0
  store i32 %v2_8eb4, i32* %ip.global-to-local, align 4
  store i32 %v5_8eb0, i32* @r6, align 4
  store i32 %v5_8eb0, i32* %r1.global-to-local, align 4
  %v0_8ec0 = load i32, i32* @r7, align 4
  store i32 %v0_8ec0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32* %r2.global-to-local, align 4
  %v0_8ec8 = load i32, i32* @r4, align 4
  store i32 %v0_8ec8, i32* %r3.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  %v1_8ecc = trunc i32 %v0_8ecc to i8
  %v3_8ecc = add i32 %v2_8eb4, 2114
  %v4_8ecc = inttoptr i32 %v3_8ecc to i8*
  store i8 %v1_8ecc, i8* %v4_8ecc, align 1
  %v4_8ed0 = call i32 @function_1191c(i32 %v0_8ec0, i32 %v5_8eb0, i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32 %v0_8ec8)
  store i32 %v4_8ed0, i32* %r0.global-to-local, align 4
  %v2_8ed4 = icmp eq i32 %v4_8ed0, -1
  store i1 %v2_8ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_8ed4 = icmp eq i32 %v4_8ed0, -1
  store i1 %v7_8ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ed4, label %dec_label_pc_8ef8, label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8ea0
  %v0_8edc = load i32, i32* @r7, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v0_8ee0 = load i32, i32* @r6, align 4
  store i32 %v0_8ee0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32* %r2.global-to-local, align 4
  %v0_8ee8 = load i32, i32* @r4, align 4
  store i32 %v0_8ee8, i32* %r3.global-to-local, align 4
  %v4_8eec = call i32 @function_1191c(i32 %v0_8edc, i32 %v0_8ee0, i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32 %v0_8ee8)
  %v0_8ef0 = load i32, i32* %sb.global-to-local, align 4
  %v2_8ef0 = add i32 %v0_8ef0, %v4_8eec
  store i32 %v2_8ef0, i32* %r0.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r5, align 4
  %v1_8ef4 = trunc i32 %v0_8ef4 to i8
  %v3_8ef4 = add i32 %v2_8ef0, 2116
  %v4_8ef4 = inttoptr i32 %v3_8ef4 to i8*
  store i8 %v1_8ef4, i8* %v4_8ef4, align 1
  br label %dec_label_pc_8ef8

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8ea0, %dec_label_pc_8edc
  %v0_8ef8 = load i32, i32* @r7, align 4
  store i32 %v0_8ef8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_8f00 = inttoptr i32 %v0_8ef8 to i8*
  %v3_8f00 = call i32 @function_11988(i8* %v2_8f00, i32 16)
  store i32 %v3_8f00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8f04 = icmp eq i32 %v3_8f00, 0
  store i1 %v2_8f04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f04, label %dec_label_pc_9b00, label %dec_label_pc_8f0c

dec_label_pc_8f0c:                                ; preds = %dec_label_pc_8ef8
  %v1_8f0c = add i32 %v3_8f00, 2
  store i32 %v1_8f0c, i32* %r3.global-to-local, align 4
  %v1_8f10 = load i32, i32* @sl, align 4
  %v2_8f10 = add i32 %v1_8f10, 12
  %v3_8f10 = inttoptr i32 %v2_8f10 to i32*
  store i32 %v1_8f0c, i32* %v3_8f10, align 4
  br label %dec_label_pc_8dc8

dec_label_pc_8f18:                                ; preds = %dec_label_pc_8584
  %v2_8f18 = inttoptr i32 %v1_85d8 to i32*
  %v3_8f18 = load i32, i32* %v2_8f18, align 4
  store i32 %v3_8f18, i32* %ip.global-to-local, align 4
  %v3_8f20 = udiv i32 %v3_8f18, 32
  %v3_8f24 = mul nuw nsw i32 %v3_8f20, 4
  store i32 %v2_86d0, i32* @lr, align 4
  %v2_8f2c = add i32 %v3_8f24, %v2_86d0
  store i32 %v2_8f2c, i32* %r2.global-to-local, align 4
  %v1_8f30 = add i32 %v2_8f2c, -164
  %v2_8f30 = inttoptr i32 %v1_8f30 to i32*
  %v3_8f30 = load i32, i32* %v2_8f30, align 4
  %v1_8f34 = urem i32 %v3_8f18, 32
  store i32 %v1_8f34, i32* %r0.global-to-local, align 4
  store i32 %v1_857c, i32* %r3.global-to-local, align 4
  %v7_8f3c = shl i32 %v1_857c, %v1_8f34
  %v8_8f3c = or i32 %v3_8f30, %v7_8f3c
  store i32 %v8_8f3c, i32* %r1.global-to-local, align 4
  %v1_8f40 = load i32, i32* @r8, align 4
  %v2_8f40 = sub i32 %v3_8f18, %v1_8f40
  %v3_8f40 = icmp uge i32 %v3_8f18, %v1_8f40
  store i1 %v3_8f40, i1* %cpsr_c.global-to-local, align 1
  %v4_8f40 = xor i32 %v1_8f40, %v3_8f18
  %v5_8f40 = xor i32 %v2_8f40, %v3_8f18
  %v6_8f40 = and i32 %v5_8f40, %v4_8f40
  %v7_8f40 = icmp slt i32 %v6_8f40, 0
  %v8_8f40 = icmp slt i32 %v2_8f40, 0
  %v9_8f40 = icmp eq i32 %v3_8f18, %v1_8f40
  store i1 %v9_8f40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8f3c, i32* %v2_8f30, align 4
  %v3_8f48 = xor i1 %v8_8f40, %v7_8f40
  %v4_8f48 = or i1 %v9_8f40, %v3_8f48
  br i1 %v4_8f48, label %dec_label_pc_85b4, label %dec_label_pc_8f4c

dec_label_pc_8f4c:                                ; preds = %dec_label_pc_8f18
  %v0_8f4c = load i32, i32* %ip.global-to-local, align 4
  %v1_8f4c = load i32, i32* %r3.global-to-local, align 4
  %v2_8f4c = add i32 %v1_8f4c, %v0_8f4c
  store i32 %v2_8f4c, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8f54:                                ; preds = %dec_label_pc_8808
  store i32 %v3_884c, i32* %r0.global-to-local, align 4
  %v1_8f58 = call i32 @function_124c8(i32 %v3_884c)
  store i32 %v1_8f58, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_8f60 = load i32, i32* @sl, align 4
  %v2_8f60 = add i32 %v1_8f60, -1452
  %v3_8f60 = inttoptr i32 %v2_8f60 to i32*
  store i32 -1, i32* %v3_8f60, align 4
  %v0_8f64 = load i32, i32* @r5, align 4
  %v1_8f64 = trunc i32 %v0_8f64 to i8
  %v2_8f64 = load i32, i32* @sl, align 4
  %v3_8f64 = add i32 %v2_8f64, -1448
  %v4_8f64 = inttoptr i32 %v3_8f64 to i8*
  store i8 %v1_8f64, i8* %v4_8f64, align 1
  br label %dec_label_pc_87ac

dec_label_pc_8f6c:                                ; preds = %dec_label_pc_858c
  %v2_8f6c = inttoptr i32 %v1_85d8 to i32*
  %v3_8f6c = load i32, i32* %v2_8f6c, align 4
  store i32 %v3_8f6c, i32* %ip.global-to-local, align 4
  %v3_8f74 = udiv i32 %v3_8f6c, 32
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v3_8f7c = mul nuw nsw i32 %v3_8f74, 4
  %v2_8f80 = add i32 %v3_8f7c, %v2_86d0
  store i32 %v2_8f80, i32* %r2.global-to-local, align 4
  %v1_8f84 = add i32 %v2_8f80, -164
  %v2_8f84 = inttoptr i32 %v1_8f84 to i32*
  %v3_8f84 = load i32, i32* %v2_8f84, align 4
  %v1_8f88 = urem i32 %v3_8f6c, 32
  store i32 %v1_8f88, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_8f90 = shl i32 1, %v1_8f88
  %v8_8f90 = or i32 %v3_8f84, %v7_8f90
  store i32 %v8_8f90, i32* %r1.global-to-local, align 4
  %v1_8f94 = load i32, i32* @r8, align 4
  %v2_8f94 = sub i32 %v3_8f6c, %v1_8f94
  %v3_8f94 = icmp uge i32 %v3_8f6c, %v1_8f94
  store i1 %v3_8f94, i1* %cpsr_c.global-to-local, align 1
  %v4_8f94 = xor i32 %v1_8f94, %v3_8f6c
  %v5_8f94 = xor i32 %v2_8f94, %v3_8f6c
  %v6_8f94 = and i32 %v5_8f94, %v4_8f94
  %v7_8f94 = icmp slt i32 %v6_8f94, 0
  %v8_8f94 = icmp slt i32 %v2_8f94, 0
  %v9_8f94 = icmp eq i32 %v3_8f6c, %v1_8f94
  store i1 %v9_8f94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8f90, i32* %v2_8f84, align 4
  %v3_8f9c = xor i1 %v8_8f94, %v7_8f94
  %v4_8f9c = or i1 %v9_8f94, %v3_8f9c
  br i1 %v4_8f9c, label %dec_label_pc_85b4, label %dec_label_pc_8fa0

dec_label_pc_8fa0:                                ; preds = %dec_label_pc_8f6c
  %v0_8fa0 = load i32, i32* %ip.global-to-local, align 4
  %v1_8fa0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fa0 = add i32 %v1_8fa0, %v0_8fa0
  store i32 %v2_8fa0, i32* @r8, align 4
  br label %dec_label_pc_86f8

dec_label_pc_8fe8:                                ; preds = %dec_label_pc_8790
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8ff0 = call i32 @function_118f8(i32 %v2_823c, i32 10240)
  store i32 %v2_8ff0, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sl, align 4
  %v1_8ffc = add i32 %v0_8ffc, -1452
  %v2_8ffc = inttoptr i32 %v1_8ffc to i32*
  %v3_8ffc = load i32, i32* %v2_8ffc, align 4
  store i32 %v3_8ffc, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v4_9008 = call i32 @function_12ba4(i32 %v3_8ffc, i32 %v2_823c, i32 10240, i32 16386)
  store i32 %v4_9008, i32* %r0.global-to-local, align 4
  store i32 %v4_9008, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9010 = icmp eq i32 %v4_9008, 0
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r7, align 4
  %tmp181 = icmp slt i32 %v4_9008, 1
  br i1 %tmp181, label %dec_label_pc_9510, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8fe8
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  store i32 %v4_9008, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_902c = call i32 @function_1191c(i32 %v2_823c, i32 %v4_9008, i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32 4)
  store i32 %v5_902c, i32* %r0.global-to-local, align 4
  %v3_9030 = icmp eq i32 %v5_902c, -1
  store i1 %v3_9030, i1* %cpsr_c.global-to-local, align 1
  %v8_9030 = icmp eq i32 %v5_902c, -1
  store i1 %v8_9030, i1* %cpsr_z.global-to-local, align 1
  %v0_9038 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v3_9030, label %dec_label_pc_9038, label %dec_label_pc_9040

dec_label_pc_9038:                                ; preds = %dec_label_pc_901c
  %v3_9038 = icmp ugt i32 %v0_9038, 10239
  store i1 %v3_9038, i1* %cpsr_c.global-to-local, align 1
  %v8_9038 = icmp eq i32 %v0_9038, 10240
  store i1 %v8_9038, i1* %cpsr_z.global-to-local, align 1
  %v5_903c = icmp slt i32 %v0_9038, 10240
  br i1 %v5_903c, label %dec_label_pc_87ac, label %dec_label_pc_9040

dec_label_pc_9040:                                ; preds = %dec_label_pc_901c, %dec_label_pc_9038
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v0_9038, i32* %r1.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v5_9050 = call i32 @function_1191c(i32 %v2_823c, i32 %v0_9038, i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32 4)
  store i32 %v2_823c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v4_905c = add i32 %v5_9050, %v2_823c
  %v5_905c = inttoptr i32 %v4_905c to i8*
  store i8 0, i8* %v5_905c, align 1
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_9068 = inttoptr i32 %v0_9060 to i32*
  %v3_9068 = call i32 @function_10d7c(i32 53, i32* %v2_9068)
  %v0_906c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_906c, i32* @r1, align 4
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9078 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_906c, i32 %v3_9068)
  store i32 %v4_9078, i32* %r0.global-to-local, align 4
  %v2_907c = icmp eq i32 %v4_9078, -1
  store i1 %v2_907c, i1* %cpsr_c.global-to-local, align 1
  %v7_907c = icmp eq i32 %v4_9078, -1
  store i1 %v7_907c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_907c, label %.thread23, label %bb182

bb182:                                            ; preds = %dec_label_pc_9040
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_9084 = load i32, i32* @sl, align 4
  %v3_9084 = inttoptr i32 %v2_9084 to i32*
  store i32 2, i32* %v3_9084, align 4
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9040, %bb182
  %v0_9088 = load i32, i32* @r5, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_9090 = inttoptr i32 %v0_9088 to i32*
  %v3_9090 = call i32 @function_10d7c(i32 52, i32* %v2_9090)
  %v0_9094 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9094, i32* @r1, align 4
  store i32 %v3_9090, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90a0 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9094, i32 %v3_9090)
  store i32 %v4_90a0, i32* %r0.global-to-local, align 4
  %v2_90a4 = icmp eq i32 %v4_90a0, -1
  store i1 %v2_90a4, i1* %cpsr_c.global-to-local, align 1
  %v7_90a4 = icmp eq i32 %v4_90a0, -1
  store i1 %v7_90a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90a4, label %.thread24, label %bb183

bb183:                                            ; preds = %.thread23
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_90ac = load i32, i32* @sl, align 4
  %v3_90ac = inttoptr i32 %v2_90ac to i32*
  store i32 1, i32* %v3_90ac, align 4
  br label %.thread24

.thread24:                                        ; preds = %.thread23, %bb183
  %v0_90b0 = load i32, i32* @r5, align 4
  store i32 %v0_90b0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_90b8 = load i32, i32* @sl, align 4
  %v2_90b8 = add i32 %v1_90b8, 4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i32*
  store i32 %v0_90b0, i32* %v3_90b8, align 4
  %v2_90bc = inttoptr i32 %v0_90b0 to i32*
  %v3_90bc = call i32 @function_10d7c(i32 51, i32* %v2_90bc)
  %v0_90c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90c0, i32* @r1, align 4
  store i32 %v3_90bc, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90cc = call i32 @function_11bb4(i8* %tmp168, i32 %v0_90c0, i32 %v3_90bc)
  store i32 %v4_90cc, i32* %r0.global-to-local, align 4
  %v2_90d0 = icmp eq i32 %v4_90cc, -1
  store i1 %v2_90d0, i1* %cpsr_c.global-to-local, align 1
  %v7_90d0 = icmp eq i32 %v4_90cc, -1
  store i1 %v7_90d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90d0, label %.thread25, label %dec_label_pc_90d8

dec_label_pc_90d8:                                ; preds = %.thread24
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_90e0 = inttoptr i32 %v0_90d8 to i32*
  %v3_90e0 = call i32 @function_10d7c(i32 51, i32* %v2_90e0)
  %v0_90e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90e4, i32* @r1, align 4
  store i32 %v3_90e0, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_90f0 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_90e4, i32 %v3_90e0)
  store i32 %v4_90f0, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* @lr, align 4
  %v2_90f8 = add i32 %v4_90f0, %v2_823c
  %v3_90f8 = inttoptr i32 %v2_90f8 to i8*
  %v4_90f8 = load i8, i8* %v3_90f8, align 1
  %v2_9100 = icmp ugt i8 %v4_90f8, 31
  store i1 %v2_9100, i1* %cpsr_c.global-to-local, align 1
  %v7_9100 = icmp eq i8 %v4_90f8, 32
  store i1 %v7_9100, i1* %cpsr_z.global-to-local, align 1
  %v2_9108 = zext i1 %v7_9100 to i32
  %v2_9108.v4_90f0 = add i32 %v2_9108, %v4_90f0
  store i32 %v2_9108.v4_90f0, i32* @r4, align 4
  %v2_910c = add i32 %v2_9108.v4_90f0, %v2_823c
  store i32 %v2_910c, i32* @r6, align 4
  store i32 %v2_910c, i32* %r0.global-to-local, align 4
  %v1_9114 = load i32, i32* %fp.global-to-local, align 4
  %v2_9114 = sub i32 %v1_9114, %v2_9108.v4_90f0
  store i32 %v2_9114, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9120 = call i32 @function_1191c(i32 %v2_910c, i32 %v2_9114, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_9120, i32* %r0.global-to-local, align 4
  %v2_9124 = icmp eq i32 %v5_9120, -1
  store i1 %v2_9124, i1* %cpsr_c.global-to-local, align 1
  %v7_9124 = icmp eq i32 %v5_9120, -1
  store i1 %v7_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9124, label %.thread25, label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %dec_label_pc_90d8
  %v2_912c = icmp ne i32 %v5_9120, 0
  store i1 %v2_912c, i1* %cpsr_c.global-to-local, align 1
  %v7_912c = icmp eq i32 %v5_9120, 1
  store i1 %v7_912c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r2.global-to-local, align 4
  %v7_9134 = icmp slt i32 %v5_9120, 2
  br i1 %v7_9134, label %bb185, label %bb184

bb184:                                            ; preds = %dec_label_pc_912c
  %v9_9134 = add i32 %v5_9120, -2
  store i32 %v9_9134, i32* %r0.global-to-local, align 4
  br label %bb185

bb185:                                            ; preds = %dec_label_pc_912c, %bb184
  %v1_913c = phi i32 [ %v5_9120, %dec_label_pc_912c ], [ %v9_9134, %bb184 ]
  store i32 %v2_86d0, i32* %r2.global-to-local, align 4
  %v2_913c = add i32 %v1_913c, %v2_86d0
  %v1_9140 = load i32, i32* @r4, align 4
  %v2_9140 = add i32 %v2_913c, %v1_9140
  store i32 %v2_9140, i32* %r3.global-to-local, align 4
  %v0_9144 = load i32, i32* @r5, align 4
  %v1_9144 = trunc i32 %v0_9144 to i8
  %v3_9144 = load i32, i32* @r7, align 4
  %v4_9144 = add i32 %v3_9144, %v2_9140
  %v5_9144 = inttoptr i32 %v4_9144 to i8*
  store i8 %v1_9144, i8* %v5_9144, align 1
  %v0_9148 = load i32, i32* @r6, align 4
  store i32 %v0_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v0_9148 to i8*
  %v2_914c = call i32 @function_11864(i8* %v1_914c)
  %v0_9150 = load i32, i32* @r5, align 4
  store i32 %v0_9150, i32* %r1.global-to-local, align 4
  store i32 %v2_914c, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_915c = inttoptr i32 %v0_9150 to i32*
  %v3_915c = call i32 @function_10d7c(i32 50, i32* %v2_915c)
  %v0_9160 = load i32, i32* @r4, align 4
  store i32 %v0_9160, i32* @r1, align 4
  store i32 %v3_915c, i32* %r2.global-to-local, align 4
  %v0_9168 = load i32, i32* @r6, align 4
  store i32 %v0_9168, i32* %r0.global-to-local, align 4
  %v3_916c = inttoptr i32 %v0_9168 to i8*
  %v4_916c = call i32 @function_11bb4(i8* %v3_916c, i32 %v0_9160, i32 %v3_915c)
  store i32 %v4_916c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9170 = icmp eq i32 %v4_916c, 0
  store i1 %v2_9170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9170, label %.thread25, label %bb186

bb186:                                            ; preds = %bb185
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9178 = load i32, i32* @sl, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i32*
  store i32 1, i32* %v4_9178, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb185, %dec_label_pc_90d8, %.thread24, %bb186
  store i32 0, i32* @r7, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9188 = load i32, i32* @sl, align 4
  %v2_9188 = add i32 %v1_9188, 8
  %v3_9188 = inttoptr i32 %v2_9188 to i32*
  store i32 0, i32* %v3_9188, align 4
  %v3_918c = call i32 @function_10d7c(i32 48, i32* null)
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9190, i32* @r1, align 4
  store i32 %v3_918c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_919c = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9190, i32 %v3_918c)
  store i32 %v4_919c, i32* %r0.global-to-local, align 4
  %v2_91a4 = icmp eq i32 %v4_919c, -1
  store i1 %v2_91a4, i1* %cpsr_c.global-to-local, align 1
  %v7_91a4 = icmp eq i32 %v4_919c, -1
  store i1 %v7_91a4, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_91a4, label %.thread26, label %dec_label_pc_91b0

dec_label_pc_91b0:                                ; preds = %.thread25
  %v0_91b0 = load i32, i32* @r7, align 4
  store i32 %v0_91b0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_91b8 = inttoptr i32 %v0_91b0 to i32*
  %v3_91b8 = call i32 @function_10d7c(i32 48, i32* %v2_91b8)
  %v0_91bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91bc, i32* @r1, align 4
  store i32 %v3_91b8, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_91c8 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_91bc, i32 %v3_91b8)
  store i32 %v4_91c8, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %ip.global-to-local, align 4
  %v2_91d0 = add i32 %v4_91c8, %v2_823c
  %v3_91d0 = inttoptr i32 %v2_91d0 to i8*
  %v4_91d0 = load i8, i8* %v3_91d0, align 1
  store i32 %v2_823c, i32* @lr, align 4
  %v2_91d8 = icmp ugt i8 %v4_91d0, 31
  store i1 %v2_91d8, i1* %cpsr_c.global-to-local, align 1
  %v7_91d8 = icmp eq i8 %v4_91d0, 32
  store i1 %v7_91d8, i1* %cpsr_z.global-to-local, align 1
  %v2_91e0 = zext i1 %v7_91d8 to i32
  %v2_91e0.v4_91c8 = add i32 %v2_91e0, %v4_91c8
  store i32 %v2_91e0.v4_91c8, i32* @r4, align 4
  %v2_91e4 = add i32 %v2_91e0.v4_91c8, %v2_823c
  store i32 %v2_91e4, i32* @r5, align 4
  store i32 %v2_91e4, i32* %r0.global-to-local, align 4
  %v1_91ec = load i32, i32* %fp.global-to-local, align 4
  %v2_91ec = sub i32 %v1_91ec, %v2_91e0.v4_91c8
  store i32 %v2_91ec, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91f8 = call i32 @function_1191c(i32 %v2_91e4, i32 %v2_91ec, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_91f8, i32* %r0.global-to-local, align 4
  %v2_91fc = icmp eq i32 %v5_91f8, -1
  store i1 %v2_91fc, i1* %cpsr_c.global-to-local, align 1
  %v7_91fc = icmp eq i32 %v5_91f8, -1
  store i1 %v7_91fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91fc, label %.thread26, label %dec_label_pc_9204

dec_label_pc_9204:                                ; preds = %dec_label_pc_91b0
  %v2_9204 = icmp ne i32 %v5_91f8, 0
  store i1 %v2_9204, i1* %cpsr_c.global-to-local, align 1
  %v7_9204 = icmp eq i32 %v5_91f8, 1
  store i1 %v7_9204, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r1.global-to-local, align 4
  %v7_920c = icmp slt i32 %v5_91f8, 2
  br i1 %v7_920c, label %bb188, label %bb187

bb187:                                            ; preds = %dec_label_pc_9204
  %v9_920c = add i32 %v5_91f8, -2
  store i32 %v9_920c, i32* %r0.global-to-local, align 4
  br label %bb188

bb188:                                            ; preds = %dec_label_pc_9204, %bb187
  %v1_9214 = phi i32 [ %v5_91f8, %dec_label_pc_9204 ], [ %v9_920c, %bb187 ]
  store i32 %v2_86d0, i32* %r1.global-to-local, align 4
  %v2_9214 = add i32 %v1_9214, %v2_86d0
  %v1_9218 = load i32, i32* @r4, align 4
  %v2_9218 = add i32 %v2_9214, %v1_9218
  store i32 %v2_9218, i32* %r3.global-to-local, align 4
  %v0_921c = load i32, i32* @r7, align 4
  %v1_921c = trunc i32 %v0_921c to i8
  %v3_921c = load i32, i32* @r6, align 4
  %v4_921c = add i32 %v3_921c, %v2_9218
  %v5_921c = inttoptr i32 %v4_921c to i8*
  store i8 %v1_921c, i8* %v5_921c, align 1
  %v0_9220 = load i32, i32* @r5, align 4
  store i32 %v0_9220, i32* %r0.global-to-local, align 4
  %v1_9224 = inttoptr i32 %v0_9220 to i8*
  %v2_9224 = call i32 @function_11864(i8* %v1_9224)
  %v0_9228 = load i32, i32* @r7, align 4
  store i32 %v0_9228, i32* %r1.global-to-local, align 4
  store i32 %v2_9224, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_9234 = inttoptr i32 %v0_9228 to i32*
  %v3_9234 = call i32 @function_10d7c(i32 49, i32* %v2_9234)
  %v0_9238 = load i32, i32* @r4, align 4
  store i32 %v0_9238, i32* @r1, align 4
  store i32 %v3_9234, i32* %r2.global-to-local, align 4
  %v0_9240 = load i32, i32* @r5, align 4
  store i32 %v0_9240, i32* %r0.global-to-local, align 4
  %v3_9244 = inttoptr i32 %v0_9240 to i8*
  %v4_9244 = call i32 @function_11bb4(i8* %v3_9244, i32 %v0_9238, i32 %v3_9234)
  store i32 %v4_9244, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9248 = icmp eq i32 %v4_9244, 0
  store i1 %v2_9248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9248, label %.thread26, label %bb189

bb189:                                            ; preds = %bb188
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9250 = load i32, i32* @sl, align 4
  %v3_9250 = add i32 %v2_9250, 8
  %v4_9250 = inttoptr i32 %v3_9250 to i32*
  store i32 1, i32* %v4_9250, align 4
  br label %.thread26

.thread26:                                        ; preds = %bb188, %dec_label_pc_91b0, %.thread25, %bb189
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_925c = call i32 @function_10d7c(i32 47, i32* null)
  %v0_9260 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9260, i32* @r1, align 4
  store i32 %v3_925c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_926c = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9260, i32 %v3_925c)
  store i32 %v4_926c, i32* %r0.global-to-local, align 4
  %v2_9270 = icmp eq i32 %v4_926c, -1
  store i1 %v2_9270, i1* %cpsr_c.global-to-local, align 1
  %v7_9270 = icmp eq i32 %v4_926c, -1
  store i1 %v7_9270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9270, label %.thread, label %dec_label_pc_9288

.thread:                                          ; preds = %.thread26
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9280 = load i32, i32* @sl, align 4
  %v3_9280 = add i32 %v2_9280, 12
  %v4_9280 = inttoptr i32 %v3_9280 to i32*
  store i32 0, i32* %v4_9280, align 4
  br label %dec_label_pc_930c

dec_label_pc_9288:                                ; preds = %.thread26
  store i32 -20773, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9290 = call i32 @function_10d7c(i32 47, i32* null)
  %v0_9294 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9294, i32* @r1, align 4
  store i32 %v3_9290, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_92a0 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9294, i32 %v3_9290)
  store i32 %v4_92a0, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r2.global-to-local, align 4
  %v2_92a8 = add i32 %v4_92a0, %v2_823c
  %v3_92a8 = inttoptr i32 %v2_92a8 to i8*
  %v4_92a8 = load i8, i8* %v3_92a8, align 1
  %v2_92ac = icmp ugt i8 %v4_92a8, 31
  store i1 %v2_92ac, i1* %cpsr_c.global-to-local, align 1
  %v7_92ac = icmp eq i8 %v4_92a8, 32
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  %v2_92b8 = zext i1 %v7_92ac to i32
  %v2_92b8.v4_92a0 = add i32 %v2_92b8, %v4_92a0
  store i32 %v2_92b8.v4_92a0, i32* @r4, align 4
  %v2_92bc = add i32 %v2_92b8.v4_92a0, %v2_823c
  store i32 %v2_92bc, i32* @r5, align 4
  store i32 %v2_92bc, i32* %r0.global-to-local, align 4
  %v1_92c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_92c4 = sub i32 %v1_92c4, %v2_92b8.v4_92a0
  store i32 %v2_92c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_92d0 = call i32 @function_1191c(i32 %v2_92bc, i32 %v2_92c4, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_92d0, i32* %r0.global-to-local, align 4
  %v2_92d4 = icmp eq i32 %v5_92d0, -1
  store i1 %v2_92d4, i1* %cpsr_c.global-to-local, align 1
  %v7_92d4 = icmp eq i32 %v5_92d0, -1
  store i1 %v7_92d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d4, label %dec_label_pc_930c, label %dec_label_pc_92dc

dec_label_pc_92dc:                                ; preds = %dec_label_pc_9288
  %v2_92dc = icmp ne i32 %v5_92d0, 0
  store i1 %v2_92dc, i1* %cpsr_c.global-to-local, align 1
  %v7_92dc = icmp eq i32 %v5_92d0, 1
  store i1 %v7_92dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %ip.global-to-local, align 4
  %v7_92e4 = icmp slt i32 %v5_92d0, 2
  br i1 %v7_92e4, label %bb191, label %bb190

bb190:                                            ; preds = %dec_label_pc_92dc
  %v9_92e4 = add i32 %v5_92d0, -2
  store i32 %v9_92e4, i32* %r0.global-to-local, align 4
  br label %bb191

bb191:                                            ; preds = %dec_label_pc_92dc, %bb190
  %v1_92ec = phi i32 [ %v5_92d0, %dec_label_pc_92dc ], [ %v9_92e4, %bb190 ]
  store i32 %v2_86d0, i32* %ip.global-to-local, align 4
  %v2_92ec = add i32 %v1_92ec, %v2_86d0
  %v1_92f0 = load i32, i32* @r4, align 4
  %v2_92f0 = add i32 %v2_92ec, %v1_92f0
  store i32 %v2_92f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_92f8 = load i32, i32* @r5, align 4
  store i32 %v0_92f8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_9300 = load i32, i32* @r6, align 4
  %v4_9300 = add i32 %v3_9300, %v2_92f0
  %v5_9300 = inttoptr i32 %v4_9300 to i8*
  store i8 0, i8* %v5_9300, align 1
  %v2_9304 = inttoptr i32 %v0_92f8 to i8*
  %v3_9304 = call i32 @function_11988(i8* %v2_9304, i32 10)
  store i32 %v3_9304, i32* %r0.global-to-local, align 4
  %v1_9308 = load i32, i32* @sl, align 4
  %v2_9308 = add i32 %v1_9308, 12
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v3_9304, i32* %v3_9308, align 4
  br label %dec_label_pc_930c

dec_label_pc_930c:                                ; preds = %.thread, %dec_label_pc_9288, %bb191
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9310:                                ; preds = %dec_label_pc_94dc, %dec_label_pc_945c, %dec_label_pc_930c
  %v1_931c = phi i32 [ 0, %dec_label_pc_930c ], [ %v0_945c, %dec_label_pc_945c ], [ %v1_931c.pre.pre, %dec_label_pc_94dc ]
  store i32 %v2_823c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_931c = add i32 %v1_931c, %v2_823c
  store i32 %v2_931c, i32* @r4, align 4
  %v3_9320 = call i32 @function_10d7c(i32 46, i32* null)
  %v0_9324 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9324, i32* @r1, align 4
  store i32 %v3_9320, i32* %r2.global-to-local, align 4
  %v0_932c = load i32, i32* @r4, align 4
  store i32 %v0_932c, i32* %r0.global-to-local, align 4
  %v3_9330 = inttoptr i32 %v0_932c to i8*
  %v4_9330 = call i32 @function_11bb4(i8* %v3_9330, i32 %v0_9324, i32 %v3_9320)
  store i32 %v4_9330, i32* %r0.global-to-local, align 4
  store i32 -20773, i32* %ip.global-to-local, align 4
  %v2_933c = icmp eq i32 %v4_9330, -1
  store i1 %v2_933c, i1* %cpsr_c.global-to-local, align 1
  %v7_933c = icmp eq i32 %v4_9330, -1
  store i1 %v7_933c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_933c, label %dec_label_pc_9548, label %dec_label_pc_9348

dec_label_pc_9348:                                ; preds = %dec_label_pc_9310
  %v0_9348 = load i32, i32* @sl, align 4
  %v1_9348 = add i32 %v0_9348, 16
  %v2_9348 = inttoptr i32 %v1_9348 to i32*
  %v3_9348 = load i32, i32* %v2_9348, align 4
  store i32 %v3_9348, i32* %r3.global-to-local, align 4
  %v2_934c = icmp ugt i32 %v3_9348, 3
  store i1 %v2_934c, i1* %cpsr_c.global-to-local, align 1
  %v7_934c = icmp eq i32 %v3_9348, 4
  store i1 %v7_934c, i1* %cpsr_z.global-to-local, align 1
  %v8_9350 = icmp sgt i32 %v3_9348, 4
  br i1 %v8_9350, label %dec_label_pc_9548, label %dec_label_pc_9354

dec_label_pc_9354:                                ; preds = %dec_label_pc_9348
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_935c = call i32 @function_10d7c(i32 46, i32* null)
  %v0_9360 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9360, i32* @r1, align 4
  store i32 %v3_935c, i32* %r2.global-to-local, align 4
  %v0_9368 = load i32, i32* @r4, align 4
  store i32 %v0_9368, i32* %r0.global-to-local, align 4
  %v3_936c = inttoptr i32 %v0_9368 to i8*
  %v4_936c = call i32 @function_11bb4(i8* %v3_936c, i32 %v0_9360, i32 %v3_935c)
  store i32 %v4_936c, i32* %r0.global-to-local, align 4
  %v1_9374 = load i32, i32* @r5, align 4
  %v2_9374 = add i32 %v1_9374, %v4_936c
  store i32 %v2_9374, i32* @r8, align 4
  %v2_9378 = add i32 %v2_9374, %v2_823c
  %v3_9378 = inttoptr i32 %v2_9378 to i8*
  %v4_9378 = load i8, i8* %v3_9378, align 1
  %v6_9378 = zext i8 %v4_9378 to i32
  store i32 %v6_9378, i32* %r3.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9378, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9378, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_937c, label %bb192, label %bb193

bb192:                                            ; preds = %dec_label_pc_9354
  %v2_9380 = add i32 %v4_936c, 1
  store i32 %v2_9380, i32* %r0.global-to-local, align 4
  br label %bb193

bb193:                                            ; preds = %dec_label_pc_9354, %bb192
  %v1_9390 = phi i32 [ %v4_936c, %dec_label_pc_9354 ], [ %v2_9380, %bb192 ]
  %v1_9384 = load i32, i32* %fp.global-to-local, align 4
  %v2_9384 = sub i32 %v1_9384, %v1_9374
  store i32 %v2_9384, i32* %r3.global-to-local, align 4
  %v2_9388 = sub i32 %v2_9384, %v1_9390
  store i32 %v2_9388, i32* @r7, align 4
  %v0_938c = load i32, i32* @r4, align 4
  %v2_938c = add i32 %v0_938c, %v1_9390
  store i32 %v2_938c, i32* @r6, align 4
  br i1 %v7_937c, label %bb194, label %bb195

bb194:                                            ; preds = %bb193
  %v3_9390 = add i32 %v1_9390, %v1_9374
  store i32 %v3_9390, i32* @r8, align 4
  br label %bb195

bb195:                                            ; preds = %bb193, %bb194
  store i32 %v2_9388, i32* %r1.global-to-local, align 4
  store i32 %v2_938c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_93a4 = call i32 @function_1191c(i32 %v2_938c, i32 %v2_9388, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_93a4, i32* %r0.global-to-local, align 4
  %v2_93a8 = icmp eq i32 %v5_93a4, -1
  store i1 %v2_93a8, i1* %cpsr_c.global-to-local, align 1
  %v7_93a8 = icmp eq i32 %v5_93a4, -1
  store i1 %v7_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_93a4, i32* @r4, align 4
  br i1 %v7_93a8, label %dec_label_pc_945c, label %dec_label_pc_93b4

dec_label_pc_93b4:                                ; preds = %bb195
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v2_93b8 = icmp ne i32 %v5_93a4, 0
  store i1 %v2_93b8, i1* %cpsr_c.global-to-local, align 1
  %v7_93b8 = icmp eq i32 %v5_93a4, 1
  store i1 %v7_93b8, i1* %cpsr_z.global-to-local, align 1
  %v7_93bc = icmp slt i32 %v5_93a4, 2
  br i1 %v7_93bc, label %bb197, label %bb196

bb196:                                            ; preds = %dec_label_pc_93b4
  %v9_93bc = add i32 %v5_93a4, -2
  store i32 %v9_93bc, i32* @r4, align 4
  br label %bb197

bb197:                                            ; preds = %dec_label_pc_93b4, %bb196
  %v1_93c0 = load i32, i32* @r8, align 4
  %v2_93c0 = add i32 %v1_93c0, %v2_823c
  store i32 %v2_93c0, i32* @r5, align 4
  %v0_93c4 = load i32, i32* @r6, align 4
  store i32 %v0_93c4, i32* %r0.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r7, align 4
  store i32 %v0_93c8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_93d4 = call i32 @function_1191c(i32 %v0_93c4, i32 %v0_93c8, i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32 1)
  store i32 %v4_93d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_93d8 = icmp eq i32 %v4_93d4, 0
  store i1 %v2_93d8, i1* %cpsr_z.global-to-local, align 1
  %tmp198 = icmp slt i32 %v4_93d4, 1
  br i1 %tmp198, label %.dec_label_pc_93f8_crit_edge, label %dec_label_pc_93e0

.dec_label_pc_93f8_crit_edge:                     ; preds = %bb197
  %v1_9400.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_93f8

dec_label_pc_93e0:                                ; preds = %bb197
  %v0_93e0 = load i32, i32* @r6, align 4
  store i32 %v0_93e0, i32* %r0.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r7, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_93f0 = call i32 @function_1191c(i32 %v0_93e0, i32 %v0_93e4, i32 ptrtoint (i32* @global_var_176bc.36 to i32), i32 1)
  store i32 %v4_93f0, i32* %r0.global-to-local, align 4
  %v1_93f4 = add i32 %v4_93f0, -1
  store i32 %v1_93f4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_93f8

dec_label_pc_93f8:                                ; preds = %.dec_label_pc_93f8_crit_edge, %dec_label_pc_93e0
  %v1_9400 = phi i32 [ %v1_9400.pre, %.dec_label_pc_93f8_crit_edge ], [ %v1_93f4, %dec_label_pc_93e0 ]
  %v2_9400 = add i32 %v1_9400, %v2_86d0
  store i32 -20773, i32* @lr, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_940c = load i32, i32* @r8, align 4
  %v2_940c = add i32 %v2_9400, %v1_940c
  store i32 %v2_940c, i32* %r3.global-to-local, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v4_9414 = add i32 %v2_940c, -20773
  %v5_9414 = inttoptr i32 %v4_9414 to i8*
  store i8 0, i8* %v5_9414, align 1
  %storemerge6.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9434.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9434

dec_label_pc_9420:                                ; preds = %dec_label_pc_9434
  br i1 %v7_9424, label %dec_label_pc_9464, label %dec_label_pc_942c

dec_label_pc_942c:                                ; preds = %dec_label_pc_9420
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9434

dec_label_pc_9434:                                ; preds = %dec_label_pc_93f8, %dec_label_pc_942c
  %v0_9434 = phi i32 [ %v0_9420, %dec_label_pc_942c ], [ %v0_9434.pre, %dec_label_pc_93f8 ]
  %storemerge6 = phi i32 [ %v1_9448, %dec_label_pc_942c ], [ %storemerge6.pre, %dec_label_pc_93f8 ]
  store i32 %storemerge6, i32* %stack_var_-44, align 4
  store i32 %v0_9434, i32* %r0.global-to-local, align 4
  %v1_9438 = inttoptr i32 %v0_9434 to i8*
  %v2_9438 = call i32 @function_11864(i8* %v1_9438)
  store i32 %v2_9438, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9440 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9440, i32* %r4.global-to-local, align 4
  %v3_9444 = icmp uge i32 %v2_9438, %v3_9440
  store i1 %v3_9444, i1* %cpsr_c.global-to-local, align 1
  %v9_9444 = icmp eq i32 %v2_9438, %v3_9440
  store i1 %v9_9444, i1* %cpsr_z.global-to-local, align 1
  %v1_9448 = add i32 %v3_9440, 1
  store i32 %v1_9448, i32* %ip.global-to-local, align 4
  %v8_944c = icmp sgt i32 %v2_9438, %v3_9440
  %v0_9420 = load i32, i32* @r5, align 4
  %v2_9420 = add i32 %v0_9420, %v3_9440
  %v3_9420 = inttoptr i32 %v2_9420 to i8*
  %v4_9420 = load i8, i8* %v3_9420, align 1
  %v6_9420 = zext i8 %v4_9420 to i32
  store i32 %v6_9420, i32* %r3.global-to-local, align 4
  %v2_9424 = icmp ugt i8 %v4_9420, 60
  store i1 %v2_9424, i1* %cpsr_c.global-to-local, align 1
  %v7_9424 = icmp eq i8 %v4_9420, 61
  store i1 %v7_9424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_944c, label %dec_label_pc_9420, label %dec_label_pc_9450

dec_label_pc_9450:                                ; preds = %dec_label_pc_9434
  br i1 %v7_9424, label %dec_label_pc_9464, label %dec_label_pc_945c

dec_label_pc_945c:                                ; preds = %dec_label_pc_94a8, %dec_label_pc_94cc, %dec_label_pc_9450, %bb195
  %v0_945c = load i32, i32* @r8, align 4
  store i32 %v0_945c, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9464:                                ; preds = %dec_label_pc_9420, %dec_label_pc_9450
  %v0_9464 = load i32, i32* @sl, align 4
  %v1_9464 = add i32 %v0_9464, 16
  %v2_9464 = inttoptr i32 %v1_9464 to i32*
  %v3_9464 = load i32, i32* %v2_9464, align 4
  store i32 %v3_9464, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9470 = icmp eq i32 %v3_9464, 0
  store i1 %v2_9470, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %tmp199 = icmp slt i32 %v3_9464, 1
  br i1 %tmp199, label %dec_label_pc_94cc, label %dec_label_pc_947c

dec_label_pc_947c:                                ; preds = %dec_label_pc_9464
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_9484:                                ; preds = %dec_label_pc_94a8
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9488 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9488, i32* %r3.global-to-local, align 4
  %v0_948c = load i32, i32* @sl, align 4
  %v1_948c = add i32 %v0_948c, 16
  %v2_948c = inttoptr i32 %v1_948c to i32*
  %v3_948c = load i32, i32* %v2_948c, align 4
  %v1_9490 = add i32 %v3_9488, 1
  store i32 %v1_9490, i32* %ip.global-to-local, align 4
  %v3_9494 = icmp uge i32 %v3_948c, %v1_9490
  store i1 %v3_9494, i1* %cpsr_c.global-to-local, align 1
  %v9_9494 = icmp eq i32 %v3_948c, %v1_9490
  store i1 %v9_9494, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v1_9490, i32* %r1.global-to-local, align 4
  store i32 %v1_9490, i32* %stack_var_-44, align 4
  %v7_94a4 = icmp sgt i32 %v3_948c, %v1_9490
  %v0_94b4.pre = load i32, i32* @r5, align 4
  br i1 %v7_94a4, label %dec_label_pc_9484.dec_label_pc_94a8_crit_edge, label %dec_label_pc_94cc

dec_label_pc_9484.dec_label_pc_94a8_crit_edge:    ; preds = %dec_label_pc_9484
  %v0_94b8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_94a8:                                ; preds = %dec_label_pc_9484.dec_label_pc_94a8_crit_edge, %dec_label_pc_947c
  %v0_94b8 = phi i32 [ %v0_94b8.pre, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ %v3_9440, %dec_label_pc_947c ]
  %v0_94b4 = phi i32 [ %v0_94b4.pre, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ %v0_9420, %dec_label_pc_947c ]
  %v0_94a8 = phi i32 [ %v1_9490, %dec_label_pc_9484.dec_label_pc_94a8_crit_edge ], [ 0, %dec_label_pc_947c ]
  %v1_94a8 = and i32 %v0_94a8, 33554432
  %v2_94a8 = icmp ne i32 %v1_94a8, 0
  store i1 %v2_94a8, i1* %cpsr_c.global-to-local, align 1
  %v3_94a8 = mul i32 %v0_94a8, 128
  %v1_94ac = add i32 %v3_94a8, 1472
  %v0_94b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_94b0 = add i32 %v1_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r1.global-to-local, align 4
  store i32 %v0_94b4, i32* %r0.global-to-local, align 4
  store i32 %v0_94b8, i32* %r2.global-to-local, align 4
  %v3_94bc = inttoptr i32 %v0_94b4 to i8*
  %v4_94bc = call i32 @function_11cc4(i8* %v3_94bc, i32 %v2_94b0, i32 %v0_94b8)
  store i32 %v4_94bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v4_94bc, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9484, label %dec_label_pc_945c

dec_label_pc_94cc:                                ; preds = %dec_label_pc_9484, %dec_label_pc_9464
  %v0_94cc = phi i32 [ %v0_9420, %dec_label_pc_9464 ], [ %v0_94b4.pre, %dec_label_pc_9484 ]
  store i32 %v0_94cc, i32* %r0.global-to-local, align 4
  %v1_94d0 = inttoptr i32 %v0_94cc to i8*
  %v2_94d0 = call i32 @function_11864(i8* %v1_94d0)
  store i32 %v2_94d0, i32* %r0.global-to-local, align 4
  %v2_94d4 = icmp ugt i32 %v2_94d0, 126
  store i1 %v2_94d4, i1* %cpsr_c.global-to-local, align 1
  %v7_94d4 = icmp eq i32 %v2_94d0, 127
  store i1 %v7_94d4, i1* %cpsr_z.global-to-local, align 1
  %v8_94d8 = icmp sgt i32 %v2_94d0, 127
  br i1 %v8_94d8, label %dec_label_pc_945c, label %dec_label_pc_94dc

dec_label_pc_94dc:                                ; preds = %dec_label_pc_94cc
  %v0_94dc = load i32, i32* @sl, align 4
  %v1_94dc = add i32 %v0_94dc, 16
  %v2_94dc = inttoptr i32 %v1_94dc to i32*
  %v3_94dc = load i32, i32* %v2_94dc, align 4
  %v1_94e0 = and i32 %v3_94dc, 33554432
  %v2_94e0 = icmp ne i32 %v1_94e0, 0
  store i1 %v2_94e0, i1* %cpsr_c.global-to-local, align 1
  %v3_94e0 = mul i32 %v3_94dc, 128
  %v1_94e4 = add i32 %v3_94e0, 1472
  %v0_94e8 = load i32, i32* @r5, align 4
  store i32 %v0_94e8, i32* %r1.global-to-local, align 4
  %v0_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94e4, %v0_94ec
  store i32 %v2_94ec, i32* @r0, align 4
  %v2_94f0 = inttoptr i32 %v2_94ec to i8*
  %v3_94f0 = call i32 @function_1188c(i8* %v2_94f0, i32 %v0_94e8)
  store i32 %v3_94f0, i32* %r0.global-to-local, align 4
  %v0_94f4 = load i32, i32* @sl, align 4
  %v1_94f4 = add i32 %v0_94f4, 16
  %v2_94f4 = inttoptr i32 %v1_94f4 to i32*
  %v3_94f4 = load i32, i32* %v2_94f4, align 4
  %v0_94f8 = load i32, i32* @r8, align 4
  store i32 %v0_94f8, i32* @r5, align 4
  %v1_94fc = add i32 %v3_94f4, 1
  store i32 %v1_94fc, i32* %r3.global-to-local, align 4
  store i32 %v1_94fc, i32* %v2_94f4, align 4
  %v1_931c.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9310

dec_label_pc_9508:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_950c = load i32, i32* @r4, align 4
  %v2_950c = inttoptr i32 %v1_950c to i32*
  store i32 104, i32* %v2_950c, align 4
  br label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9654, %dec_label_pc_8fe8, %dec_label_pc_9508
  %v0_9510 = load i32, i32* @sl, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i32*
  %v3_9510 = load i32, i32* %v2_9510, align 4
  store i32 %v3_9510, i32* %r0.global-to-local, align 4
  %v1_9514 = call i32 @function_124c8(i32 %v3_9510)
  store i32 %v1_9514, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9520 = load i32, i32* @sl, align 4
  %v2_9520 = add i32 %v1_9520, -1452
  %v3_9520 = inttoptr i32 %v2_9520 to i32*
  store i32 -1, i32* %v3_9520, align 4
  %v0_9524 = load i32, i32* %r2.global-to-local, align 4
  %v1_9524 = trunc i32 %v0_9524 to i8
  %v2_9524 = load i32, i32* @sl, align 4
  %v3_9524 = add i32 %v2_9524, -1448
  %v4_9524 = inttoptr i32 %v3_9524 to i8*
  store i8 %v1_9524, i8* %v4_9524, align 1
  br label %dec_label_pc_87ac

dec_label_pc_952c:                                ; preds = %dec_label_pc_8594
  store i32 %v1_8594, i32* %r3.global-to-local, align 4
  %v1_9530 = trunc i32 %v1_8594 to i8
  store i8 %v1_9530, i8* %v2_85cc, align 1
  %v0_9534 = load i32, i32* @r6, align 4
  %v1_9534 = add i32 %v0_9534, -1452
  %v2_9534 = inttoptr i32 %v1_9534 to i32*
  %v3_9534 = load i32, i32* %v2_9534, align 4
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v1_9538 = call i32 @function_124c8(i32 %v3_9534)
  store i32 %v1_9538, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_9540 = load i32, i32* @r6, align 4
  %v2_9540 = add i32 %v1_9540, -1452
  %v3_9540 = inttoptr i32 %v2_9540 to i32*
  store i32 -1, i32* %v3_9540, align 4
  br label %dec_label_pc_85b4

dec_label_pc_9548:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9310
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_10d7c(i32 45, i32* null)
  %v0_9554 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9554, i32* @r1, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9560 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9554, i32 %v3_9550)
  store i32 %v4_9560, i32* %r0.global-to-local, align 4
  %v2_9564 = icmp eq i32 %v4_9560, -1
  store i1 %v2_9564, i1* %cpsr_c.global-to-local, align 1
  %v7_9564 = icmp eq i32 %v4_9560, -1
  store i1 %v7_9564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9564, label %dec_label_pc_96d8, label %dec_label_pc_956c

dec_label_pc_956c:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9574 = call i32 @function_10d7c(i32 45, i32* null)
  %v0_9578 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9578, i32* @r1, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_9584 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9578, i32 %v3_9574)
  store i32 %v4_9584, i32* %r0.global-to-local, align 4
  %v2_958c = add i32 %v4_9584, %v2_823c
  %v3_958c = inttoptr i32 %v2_958c to i8*
  %v4_958c = load i8, i8* %v3_958c, align 1
  %v2_9594 = icmp ugt i8 %v4_958c, 31
  store i1 %v2_9594, i1* %cpsr_c.global-to-local, align 1
  %v7_9594 = icmp eq i8 %v4_958c, 32
  store i1 %v7_9594, i1* %cpsr_z.global-to-local, align 1
  %v2_959c = zext i1 %v7_9594 to i32
  %v2_959c.v4_9584 = add i32 %v2_959c, %v4_9584
  store i32 %v2_959c.v4_9584, i32* @r4, align 4
  %v2_95a0 = add i32 %v2_959c.v4_9584, %v2_823c
  store i32 %v2_95a0, i32* @r6, align 4
  store i32 %v2_95a0, i32* %r0.global-to-local, align 4
  %v1_95a8 = load i32, i32* %fp.global-to-local, align 4
  %v2_95a8 = sub i32 %v1_95a8, %v2_959c.v4_9584
  store i32 %v2_95a8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_95b4 = call i32 @function_1191c(i32 %v2_95a0, i32 %v2_95a8, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_95b4, i32* %r0.global-to-local, align 4
  %v2_95b8 = icmp eq i32 %v5_95b4, -1
  store i1 %v2_95b8, i1* %cpsr_c.global-to-local, align 1
  %v7_95b8 = icmp eq i32 %v5_95b4, -1
  store i1 %v7_95b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95b8, label %dec_label_pc_96d8, label %dec_label_pc_95c0

dec_label_pc_95c0:                                ; preds = %dec_label_pc_956c
  %v2_95c0 = icmp ne i32 %v5_95b4, 0
  store i1 %v2_95c0, i1* %cpsr_c.global-to-local, align 1
  %v7_95c0 = icmp eq i32 %v5_95b4, 1
  store i1 %v7_95c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %r2.global-to-local, align 4
  %v7_95c8 = icmp slt i32 %v5_95b4, 2
  br i1 %v7_95c8, label %bb201, label %bb200

bb200:                                            ; preds = %dec_label_pc_95c0
  %v9_95c8 = add i32 %v5_95b4, -2
  store i32 %v9_95c8, i32* %r0.global-to-local, align 4
  br label %bb201

bb201:                                            ; preds = %dec_label_pc_95c0, %bb200
  %v1_95d0 = phi i32 [ %v5_95b4, %dec_label_pc_95c0 ], [ %v9_95c8, %bb200 ]
  %v2_95d0 = add i32 %v1_95d0, %v2_86d0
  store i32 -20773, i32* @lr, align 4
  %v1_95d8 = add i32 %v1_95d0, 1
  store i32 %v1_95d8, i32* @r5, align 4
  %v1_95dc = load i32, i32* @r4, align 4
  %v2_95dc = add i32 %v2_95d0, %v1_95dc
  store i32 %v2_95dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_95e4 = load i32, i32* @r6, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  store i32 %v1_95d8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176c0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_95f4 = add i32 %v2_95dc, -20773
  %v5_95f4 = inttoptr i32 %v4_95f4 to i8*
  store i8 0, i8* %v5_95f4, align 1
  %v5_95f8 = call i32 @function_1191c(i32 %v0_95e4, i32 %v1_95d8, i32 ptrtoint ([5 x i8]* @global_var_176c0.40 to i32), i32 4)
  store i32 %v5_95f8, i32* %r0.global-to-local, align 4
  %v2_95fc = icmp ugt i32 %v5_95f8, 3
  store i1 %v2_95fc, i1* %cpsr_c.global-to-local, align 1
  %v7_95fc = icmp eq i32 %v5_95f8, 4
  store i1 %v7_95fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95fc, label %dec_label_pc_99c0, label %dec_label_pc_9604

dec_label_pc_9604:                                ; preds = %bb201
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v1_9608 = load i32, i32* @r4, align 4
  %v2_9608 = add i32 %v1_9608, %v2_823c
  %v3_9608 = inttoptr i32 %v2_9608 to i8*
  %v4_9608 = load i8, i8* %v3_9608, align 1
  %v6_9608 = zext i8 %v4_9608 to i32
  store i32 %v6_9608, i32* %r3.global-to-local, align 4
  %v2_960c = icmp ugt i8 %v4_9608, 46
  store i1 %v2_960c, i1* %cpsr_c.global-to-local, align 1
  %v7_960c = icmp eq i8 %v4_9608, 47
  store i1 %v7_960c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_960c, label %dec_label_pc_9bc0, label %dec_label_pc_9614

dec_label_pc_9614:                                ; preds = %dec_label_pc_9660, %dec_label_pc_9bf0, %dec_label_pc_9bc0, %dec_label_pc_9a90, %dec_label_pc_9a74, %dec_label_pc_9604, %dec_label_pc_9c08, %dec_label_pc_9abc
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9618 = load i32, i32* @sl, align 4
  %v3_9618 = add i32 %v2_9618, -1448
  %v4_9618 = inttoptr i32 %v3_9618 to i8*
  store i8 1, i8* %v4_9618, align 1
  br label %dec_label_pc_87ac

dec_label_pc_9620:                                ; preds = %dec_label_pc_87a4
  %v0_9620 = call i32 @function_128f0()
  store i32 %v0_9620, i32* %r0.global-to-local, align 4
  store i32 %v0_9620, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_964c, %dec_label_pc_9620
  %v1_962c = phi i32 [ %v0_9620, %dec_label_pc_9620 ], [ %v0_9654, %dec_label_pc_964c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_962c = inttoptr i32 %v1_962c to i32*
  store i32 0, i32* %v2_962c, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v0_9634 = load i32, i32* @sl, align 4
  %v1_9634 = add i32 %v0_9634, -1452
  %v2_9634 = inttoptr i32 %v1_9634 to i32*
  %v3_9634 = load i32, i32* %v2_9634, align 4
  store i32 %v3_9634, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_963c = load i32, i32* %r3.global-to-local, align 4
  %v1_963c = add i32 %v0_963c, 16384
  store i32 %v1_963c, i32* %r3.global-to-local, align 4
  %v4_9640 = call i32 @function_12ba4(i32 %v3_9634, i32 %v2_823c, i32 10240, i32 %v1_963c)
  store i32 %v4_9640, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9644 = icmp eq i32 %v4_9640, 0
  store i1 %v2_9644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9644, label %dec_label_pc_9508, label %dec_label_pc_964c

dec_label_pc_964c:                                ; preds = %dec_label_pc_9628
  %v3_964c = icmp eq i32 %v4_9640, -1
  store i1 %v3_964c, i1* %cpsr_c.global-to-local, align 1
  %v8_964c = icmp eq i32 %v4_9640, -1
  store i1 %v8_964c, i1* %cpsr_z.global-to-local, align 1
  %v0_9654 = load i32, i32* @r4, align 4
  br i1 %v3_964c, label %dec_label_pc_9654, label %dec_label_pc_9628

dec_label_pc_9654:                                ; preds = %dec_label_pc_964c
  %v1_9654 = inttoptr i32 %v0_9654 to i32*
  %v2_9654 = load i32, i32* %v1_9654, align 4
  store i32 %v2_9654, i32* %r3.global-to-local, align 4
  %v2_9658 = icmp ugt i32 %v2_9654, 10
  store i1 %v2_9658, i1* %cpsr_c.global-to-local, align 1
  %v7_9658 = icmp eq i32 %v2_9654, 11
  store i1 %v7_9658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9658, label %dec_label_pc_9660, label %dec_label_pc_9510

dec_label_pc_9660:                                ; preds = %dec_label_pc_9654
  %v0_9660 = load i32, i32* @sl, align 4
  %v1_9660 = add i32 %v0_9660, -1448
  %v2_9660 = inttoptr i32 %v1_9660 to i8*
  %v3_9660 = load i8, i8* %v2_9660, align 1
  %v4_9660 = zext i8 %v3_9660 to i32
  store i32 %v4_9660, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9664 = icmp eq i8 %v3_9660, 0
  store i1 %v2_9664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9664, label %dec_label_pc_87ac, label %dec_label_pc_9614

dec_label_pc_9670:                                ; preds = %dec_label_pc_8db4
  %v0_9670 = load i32, i32* %r3.global-to-local, align 4
  %v1_9670 = add i32 %v0_9670, 1
  store i32 %v1_9670, i32* %r3.global-to-local, align 4
  %v1_9674 = trunc i32 %v1_9670 to i8
  %v2_9674 = load i32, i32* @sl, align 4
  %v3_9674 = add i32 %v2_9674, -1448
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  br label %dec_label_pc_87ac

dec_label_pc_967c:                                ; preds = %dec_label_pc_8c2c
  %v0_967c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9680, i32* %r1.global-to-local, align 4
  %v2_9684 = inttoptr i32 %v0_967c to i8*
  %v3_9684 = call i32 @function_1188c(i8* %v2_9684, i32 %v0_9680)
  store i32 %v3_9684, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c44

dec_label_pc_968c:                                ; preds = %dec_label_pc_8d34
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9690 = load i32, i32* %fp.global-to-local, align 4
  %v2_9690 = inttoptr i32 %v1_9690 to i32*
  store i32 104, i32* %v2_9690, align 4
  %v0_9694 = load i32, i32* @sl, align 4
  %v1_9694 = add i32 %v0_9694, -1452
  %v2_9694 = inttoptr i32 %v1_9694 to i32*
  %v3_9694 = load i32, i32* %v2_9694, align 4
  store i32 %v3_9694, i32* %r0.global-to-local, align 4
  %v1_9698 = call i32 @function_124c8(i32 %v3_9694)
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_96a4 = load i32, i32* @sl, align 4
  %v2_96a4 = add i32 %v1_96a4, -1452
  %v3_96a4 = inttoptr i32 %v2_96a4 to i32*
  store i32 -1, i32* %v3_96a4, align 4
  %v0_96a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @sl, align 4
  %v3_96a8 = add i32 %v2_96a8, -1448
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  br label %dec_label_pc_87ac

dec_label_pc_96b0:                                ; preds = %dec_label_pc_8d5c
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_96b0 = inttoptr i32 %v0_96b0 to i32*
  %v2_96b0 = load i32, i32* %v1_96b0, align 4
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  %v2_96b4 = icmp ugt i32 %v2_96b0, 10
  store i1 %v2_96b4, i1* %cpsr_c.global-to-local, align 1
  %v7_96b4 = icmp eq i32 %v2_96b0, 11
  store i1 %v7_96b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_96b4, label %dec_label_pc_87ac, label %dec_label_pc_96bc

dec_label_pc_96bc:                                ; preds = %dec_label_pc_96b0
  %v0_96bc = load i32, i32* @sl, align 4
  %v1_96bc = add i32 %v0_96bc, -1452
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r0.global-to-local, align 4
  %v1_96c0 = call i32 @function_124c8(i32 %v3_96bc)
  store i32 %v1_96c0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sl, align 4
  %v2_96cc = add i32 %v1_96cc, -1452
  %v3_96cc = inttoptr i32 %v2_96cc to i32*
  store i32 -1, i32* %v3_96cc, align 4
  %v0_96d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_96d0 = trunc i32 %v0_96d0 to i8
  %v2_96d0 = load i32, i32* @sl, align 4
  %v3_96d0 = add i32 %v2_96d0, -1448
  %v4_96d0 = inttoptr i32 %v3_96d0 to i8*
  store i8 %v1_96d0, i8* %v4_96d0, align 1
  br label %dec_label_pc_87ac

dec_label_pc_96d8:                                ; preds = %dec_label_pc_956c, %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_96e0 = call i32 @function_10d7c(i32 44, i32* null)
  %v0_96e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96e4, i32* @r1, align 4
  store i32 %v3_96e0, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_96f0 = call i32 @function_11bb4(i8* %tmp168, i32 %v0_96e4, i32 %v3_96e0)
  store i32 %v4_96f0, i32* %r0.global-to-local, align 4
  %v2_96f8 = icmp eq i32 %v4_96f0, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v4_96f0, -1
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_96f8, label %dec_label_pc_98f8, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96d8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_970c = call i32 @function_10d7c(i32 44, i32* null)
  %v0_9710 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9710, i32* @r1, align 4
  store i32 %v3_970c, i32* %r2.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v4_971c = call i32 @function_11bb4(i8* %tmp168, i32 %v0_9710, i32 %v3_970c)
  store i32 %v4_971c, i32* %r0.global-to-local, align 4
  %v2_9724 = add i32 %v4_971c, %v2_823c
  %v3_9724 = inttoptr i32 %v2_9724 to i8*
  %v4_9724 = load i8, i8* %v3_9724, align 1
  %v2_972c = icmp ugt i8 %v4_9724, 31
  store i1 %v2_972c, i1* %cpsr_c.global-to-local, align 1
  %v7_972c = icmp eq i8 %v4_9724, 32
  store i1 %v7_972c, i1* %cpsr_z.global-to-local, align 1
  %v2_9734 = zext i1 %v7_972c to i32
  %v2_9734.v4_971c = add i32 %v2_9734, %v4_971c
  store i32 %v2_9734.v4_971c, i32* @r4, align 4
  %v2_9738 = add i32 %v2_9734.v4_971c, %v2_823c
  store i32 %v2_9738, i32* @r5, align 4
  store i32 %v2_9738, i32* %r0.global-to-local, align 4
  %v1_9740 = load i32, i32* %fp.global-to-local, align 4
  %v2_9740 = sub i32 %v1_9740, %v2_9734.v4_971c
  store i32 %v2_9740, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_974c = call i32 @function_1191c(i32 %v2_9738, i32 %v2_9740, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2)
  store i32 %v5_974c, i32* %r0.global-to-local, align 4
  %v2_9750 = icmp eq i32 %v5_974c, -1
  store i1 %v2_9750, i1* %cpsr_c.global-to-local, align 1
  %v7_9750 = icmp eq i32 %v5_974c, -1
  store i1 %v7_9750, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_974c, i32* @r7, align 4
  br i1 %v7_9750, label %dec_label_pc_98f8, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %dec_label_pc_9704
  %v2_975c = icmp ne i32 %v5_974c, 0
  store i1 %v2_975c, i1* %cpsr_c.global-to-local, align 1
  %v7_975c = icmp eq i32 %v5_974c, 1
  store i1 %v7_975c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8654, i32* %ip.global-to-local, align 4
  %v7_9764 = icmp slt i32 %v5_974c, 2
  br i1 %v7_9764, label %bb203, label %bb202

bb202:                                            ; preds = %dec_label_pc_975c
  %v9_9764 = add i32 %v5_974c, -2
  store i32 %v9_9764, i32* @r7, align 4
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_975c, %bb202
  %v1_976c = phi i32 [ %v5_974c, %dec_label_pc_975c ], [ %v9_9764, %bb202 ]
  store i32 %v2_86d0, i32* %ip.global-to-local, align 4
  %v2_976c = add i32 %v1_976c, %v2_86d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9774 = load i32, i32* @r4, align 4
  %v2_9774 = add i32 %v2_976c, %v1_9774
  store i32 %v2_9774, i32* %r2.global-to-local, align 4
  %v3_9778 = load i32, i32* @r6, align 4
  %v4_9778 = add i32 %v3_9778, %v2_9774
  %v5_9778 = inttoptr i32 %v4_9778 to i8*
  store i8 0, i8* %v5_9778, align 1
  store i32 %v10_82b0, i32* @lr, align 4
  %v0_9780 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_9780, i32* %stack_var_-44, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  %v1_9788 = load i32, i32* @r4, align 4
  %v2_9788 = add i32 %v1_9788, %v2_823c
  %v3_9788 = inttoptr i32 %v2_9788 to i8*
  %v4_9788 = load i8, i8* %v3_9788, align 1
  %v6_9788 = zext i8 %v4_9788 to i32
  store i32 %v6_9788, i32* %r0.global-to-local, align 4
  %v1_978c = add nsw i32 %v6_9788, -48
  store i32 %v1_978c, i32* %r3.global-to-local, align 4
  %v2_9790 = icmp ugt i32 %v1_978c, 8
  store i1 %v2_9790, i1* %cpsr_c.global-to-local, align 1
  %v7_9790 = icmp eq i32 %v1_978c, 9
  store i1 %v7_9790, i1* %cpsr_z.global-to-local, align 1
  %v2_9794 = xor i1 %v7_9790, true
  %v3_9794 = and i1 %v2_9790, %v2_9794
  br i1 %v3_9794, label %.thread113, label %dec_label_pc_979c

.thread113:                                       ; preds = %bb203
  %v4_9794 = load i32, i32* @r5, align 4
  store i32 %v4_9794, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_97c4

dec_label_pc_979c:                                ; preds = %bb203
  %v1_97a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_97a0, %dec_label_pc_979c
  %v0_97b8 = phi i32 [ %v1_97b8, %dec_label_pc_97a0 ], [ 1, %dec_label_pc_979c ]
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v0_97b8, i32* %stack_var_-44, align 4
  %v2_97a8 = add i32 %v0_97b8, %v1_97a8.pre
  %v3_97a8 = inttoptr i32 %v2_97a8 to i8*
  %v4_97a8 = load i8, i8* %v3_97a8, align 1
  %v6_97a8 = zext i8 %v4_97a8 to i32
  store i32 %v6_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = add nsw i32 %v6_97a8, -48
  store i32 %v1_97ac, i32* %r3.global-to-local, align 4
  store i32 %v0_97b8, i32* %ip.global-to-local, align 4
  %v2_97b4 = icmp ugt i32 %v1_97ac, 8
  store i1 %v2_97b4, i1* %cpsr_c.global-to-local, align 1
  %v7_97b4 = icmp eq i32 %v1_97ac, 9
  store i1 %v7_97b4, i1* %cpsr_z.global-to-local, align 1
  %v1_97b8 = add i32 %v0_97b8, 1
  store i32 %v1_97b8, i32* @lr, align 4
  store i32 %v2_97a8, i32* %r1.global-to-local, align 4
  %v2_97c0 = xor i1 %v2_97b4, true
  %v3_97c0 = or i1 %v7_97b4, %v2_97c0
  br i1 %v3_97c0, label %dec_label_pc_97a0, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97a0, %.thread113
  %v2_97d0 = phi i32 [ %v4_9794, %.thread113 ], [ %v2_97a8, %dec_label_pc_97a0 ]
  %v0_97c4 = phi i32 [ %v6_9788, %.thread113 ], [ %v6_97a8, %dec_label_pc_97a0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_97c4 = icmp eq i32 %v0_97c4, 0
  store i1 %v2_97c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_97c4, label %dec_label_pc_98f8, label %dec_label_pc_97cc

dec_label_pc_97cc:                                ; preds = %dec_label_pc_97c4
  store i32 0, i32* @r6, align 4
  %v3_97d0 = inttoptr i32 %v2_97d0 to i8*
  store i8 0, i8* %v3_97d0, align 1
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_97d8 = load i32, i32* %stack_var_-44, align 4
  %v1_97dc = add i32 %v3_97d8, 1
  store i32 %v1_97dc, i32* %ip.global-to-local, align 4
  store i32 %v1_97dc, i32* %stack_var_-44, align 4
  %v0_97e4 = load i32, i32* @r5, align 4
  %v2_97e4 = add i32 %v0_97e4, %v1_97dc
  %v3_97e4 = inttoptr i32 %v2_97e4 to i8*
  %v4_97e4 = load i8, i8* %v3_97e4, align 1
  %v6_97e4 = zext i8 %v4_97e4 to i32
  store i32 %v6_97e4, i32* %r3.global-to-local, align 4
  %v2_97e8 = icmp ugt i8 %v4_97e4, 31
  store i1 %v2_97e8, i1* %cpsr_c.global-to-local, align 1
  %v7_97e8 = icmp eq i8 %v4_97e4, 32
  store i1 %v7_97e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97e8, label %bb205, label %bb204

bb204:                                            ; preds = %dec_label_pc_97cc
  store i32 %v2_97e4, i32* @r4, align 4
  br label %.thread37

bb205:                                            ; preds = %dec_label_pc_97cc
  %v2_97ec = add i32 %v3_97d8, 2
  store i32 %v2_97ec, i32* %ip.global-to-local, align 4
  %v2_97f0 = add i32 %v0_97e4, %v2_97ec
  store i32 %v2_97f0, i32* @r4, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 %v2_97ec, i32* %v11_82b4, align 4
  %v0_97fc.pre = load i32, i32* @r4, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb204, %bb205
  %v0_97fc = phi i32 [ %v2_97e4, %bb204 ], [ %v0_97fc.pre, %bb205 ]
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  %v1_9800 = inttoptr i32 %v0_97fc to i8*
  %v2_9800 = call i32 @function_11864(i8* %v1_9800)
  store i32 ptrtoint ([5 x i8]* @global_var_176c8.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9800, i32* @r1, align 4
  %v0_980c = load i32, i32* @r4, align 4
  store i32 %v0_980c, i32* %r0.global-to-local, align 4
  %v3_9810 = inttoptr i32 %v0_980c to i8*
  %v4_9810 = call i32 @function_11bb4(i8* %v3_9810, i32 %v2_9800, i32 ptrtoint ([5 x i8]* @global_var_176c8.42 to i32))
  store i32 %v4_9810, i32* %r0.global-to-local, align 4
  %v2_9814 = icmp eq i32 %v4_9810, -1
  store i1 %v2_9814, i1* %cpsr_c.global-to-local, align 1
  %v7_9814 = icmp eq i32 %v4_9810, -1
  store i1 %v7_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9814, label %.thread38, label %dec_label_pc_9824

.thread38:                                        ; preds = %.thread37
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v4_981c = load i32, i32* %v11_82b4, align 4
  store i32 %v4_981c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9858

dec_label_pc_9824:                                ; preds = %.thread37
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9828 = load i32, i32* %stack_var_-44, align 4
  %v0_982c = load i32, i32* @r5, align 4
  %v2_982c = add i32 %v0_982c, %v3_9828
  store i32 %v2_982c, i32* @r4, align 4
  store i32 %v2_982c, i32* %r0.global-to-local, align 4
  %v1_9834 = inttoptr i32 %v2_982c to i8*
  %v2_9834 = call i32 @function_11864(i8* %v1_9834)
  store i32 ptrtoint ([5 x i8]* @global_var_176c8.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9834, i32* @r1, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v4_9844 = inttoptr i32 %v0_9840 to i8*
  %v5_9844 = call i32 @function_11bb4(i8* %v4_9844, i32 %v2_9834, i32 ptrtoint ([5 x i8]* @global_var_176c8.42 to i32))
  store i32 %v5_9844, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_984c = load i32, i32* %stack_var_-44, align 4
  %v2_9850 = add i32 %v3_984c, %v5_9844
  store i32 %v2_9850, i32* %ip.global-to-local, align 4
  store i32 %v2_9850, i32* %stack_var_-44, align 4
  br label %dec_label_pc_9858

dec_label_pc_9858:                                ; preds = %.thread38, %dec_label_pc_9824
  %v0_9d34 = phi i32 [ %v4_981c, %.thread38 ], [ %v2_9850, %dec_label_pc_9824 ]
  %v0_9858 = load i32, i32* @r5, align 4
  %v2_9858 = add i32 %v0_9858, %v0_9d34
  %v3_9858 = inttoptr i32 %v2_9858 to i8*
  %v4_9858 = load i8, i8* %v3_9858, align 1
  %v6_9858 = zext i8 %v4_9858 to i32
  store i32 %v6_9858, i32* %r3.global-to-local, align 4
  %v2_985c = icmp ugt i8 %v4_9858, 33
  store i1 %v2_985c, i1* %cpsr_c.global-to-local, align 1
  %v7_985c = icmp eq i8 %v4_9858, 34
  store i1 %v7_985c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_985c, label %dec_label_pc_9d34, label %dec_label_pc_9864

dec_label_pc_9864:                                ; preds = %dec_label_pc_9d34, %dec_label_pc_9858, %dec_label_pc_9d5c
  %v0_9864 = load i32, i32* @r5, align 4
  store i32 %v0_9864, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_986c = inttoptr i32 %v0_9864 to i8*
  %v3_986c = call i32 @function_11988(i8* %v2_986c, i32 10)
  store i32 %v3_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v3_986c, -1
  store i32 %v1_9870, i32* %r3.global-to-local, align 4
  %v2_9874 = icmp ugt i32 %v1_9870, 7
  store i1 %v2_9874, i1* %cpsr_c.global-to-local, align 1
  %v7_9874 = icmp eq i32 %v1_9870, 8
  store i1 %v7_9874, i1* %cpsr_z.global-to-local, align 1
  %v2_9878 = xor i1 %v2_9874, true
  %v3_9878 = or i1 %v7_9874, %v2_9878
  br i1 %v3_9878, label %dec_label_pc_988c.preheader, label %dec_label_pc_98a0

dec_label_pc_988c.preheader:                      ; preds = %dec_label_pc_9864
  store i32 %v2_875c, i32* %r2.global-to-local, align 4
  %v6_987c = add i32 %v3_986c, %v2_875c
  store i32 %v6_987c, i32* @r4, align 4
  br label %dec_label_pc_988c

dec_label_pc_9888:                                ; preds = %dec_label_pc_988c
  %v1_9888 = call i32 @function_143e4(i32 1)
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_988c

dec_label_pc_988c:                                ; preds = %dec_label_pc_988c.preheader, %dec_label_pc_9888
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9890 = call i32 @function_12148(i32* null)
  %v0_9894 = load i32, i32* @r4, align 4
  %v3_9894 = icmp uge i32 %v0_9894, %v2_9890
  store i1 %v3_9894, i1* %cpsr_c.global-to-local, align 1
  %v9_9894 = icmp eq i32 %v0_9894, %v2_9890
  store i1 %v9_9894, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_989c = xor i1 %v9_9894, true
  %v3_989c = and i1 %v3_9894, %v2_989c
  br i1 %v3_989c, label %dec_label_pc_9888, label %dec_label_pc_98a0

dec_label_pc_98a0:                                ; preds = %dec_label_pc_988c, %dec_label_pc_9864
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_98a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98a4, i32* @r4, align 4
  %v0_98a8 = load i32, i32* @r5, align 4
  %v2_98a8 = add i32 %v0_98a8, %v3_98a4
  store i32 %v2_98a8, i32* @r6, align 4
  store i32 %v2_98a8, i32* %r0.global-to-local, align 4
  %v1_98b0 = inttoptr i32 %v2_98a8 to i8*
  %v2_98b0 = call i32 @function_11864(i8* %v1_98b0)
  store i32 ptrtoint ([5 x i8]* @global_var_176c0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_98b0, i32* @r1, align 4
  %v0_98bc = load i32, i32* @r6, align 4
  store i32 %v0_98bc, i32* %r0.global-to-local, align 4
  %v4_98c0 = inttoptr i32 %v0_98bc to i8*
  %v5_98c0 = call i32 @function_11bb4(i8* %v4_98c0, i32 %v2_98b0, i32 ptrtoint ([5 x i8]* @global_var_176c0.40 to i32))
  store i32 %v5_98c0, i32* %r0.global-to-local, align 4
  %v2_98c4 = icmp ugt i32 %v5_98c0, 3
  store i1 %v2_98c4, i1* %cpsr_c.global-to-local, align 1
  %v7_98c4 = icmp eq i32 %v5_98c0, 4
  store i1 %v7_98c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_98c4, label %dec_label_pc_9c20, label %dec_label_pc_98cc

dec_label_pc_98cc:                                ; preds = %dec_label_pc_98a0
  %v0_98cc = load i32, i32* @r5, align 4
  %v1_98cc = load i32, i32* @r4, align 4
  %v2_98cc = add i32 %v1_98cc, %v0_98cc
  %v3_98cc = inttoptr i32 %v2_98cc to i8*
  %v4_98cc = load i8, i8* %v3_98cc, align 1
  %v6_98cc = zext i8 %v4_98cc to i32
  store i32 %v6_98cc, i32* @r3, align 4
  %v2_98d0 = icmp ugt i8 %v4_98cc, 46
  store i1 %v2_98d0, i1* %cpsr_c.global-to-local, align 1
  %v7_98d0 = icmp eq i8 %v4_98cc, 47
  store i1 %v7_98d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_98d0, label %dec_label_pc_9d7c, label %dec_label_pc_98d8

dec_label_pc_98d8:                                ; preds = %dec_label_pc_9d98, %dec_label_pc_9d7c, %dec_label_pc_9ce4, %dec_label_pc_9cc8, %dec_label_pc_98cc, %dec_label_pc_9dc4, %dec_label_pc_9d10
  %v0_98d8 = load i32, i32* %sb.global-to-local, align 4
  %v1_98dc = add i32 %v0_98d8, 1431
  store i32 %v1_98dc, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_98e8 = call i32 @function_129f0()
  store i32 %v0_98e8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_98f0 = load i32, i32* @sl, align 4
  %v3_98f0 = add i32 %v2_98f0, -1448
  %v4_98f0 = inttoptr i32 %v3_98f0 to i8*
  store i8 10, i8* %v4_98f0, align 1
  br label %dec_label_pc_87ac

dec_label_pc_98f8:                                ; preds = %dec_label_pc_97c4, %dec_label_pc_9704, %dec_label_pc_96d8
  %v0_98f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98f8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_823c, i32* %r0.global-to-local, align 4
  %v5_9908 = call i32 @function_1191c(i32 %v2_823c, i32 %v0_98f8, i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), i32 4)
  %v0_990c = load i32, i32* %sb.global-to-local, align 4
  %v1_9910 = add i32 %v0_990c, 1431
  store i32 %v1_9910, i32* @r4, align 4
  store i32 %v5_9908, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176d0.44 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_9910, i32* %r0.global-to-local, align 4
  %v3_9920 = inttoptr i32 %v1_9910 to i8*
  %v4_9920 = call i32 @function_11c44(i8* %v3_9920, i32 ptrtoint ([5 x i8]* @global_var_176d0.44 to i32))
  store i32 %v4_9920, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9924 = icmp eq i32 %v4_9920, 0
  store i1 %v2_9924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9924, label %dec_label_pc_9ad4, label %dec_label_pc_992c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_98f8
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_9930 = load i32, i32* @sl, align 4
  %v3_9930 = add i32 %v2_9930, -1448
  %v4_9930 = inttoptr i32 %v3_9930 to i8*
  store i8 7, i8* %v4_9930, align 1
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %bb211, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r5, align 4
  store i32 %v0_9934, i32* %r2.global-to-local, align 4
  %v0_9938 = load i32, i32* @sl, align 4
  %v1_9938 = add i32 %v0_9938, -1452
  %v2_9938 = inttoptr i32 %v1_9938 to i32*
  %v3_9938 = load i32, i32* %v2_9938, align 4
  store i32 %v3_9938, i32* %r0.global-to-local, align 4
  store i32 %v2_823c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_9944 = call i32 @function_12ba4(i32 %v3_9938, i32 %v2_823c, i32 %v0_9934, i32 16384)
  store i32 %v4_9944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87ac

dec_label_pc_994c:                                ; preds = %dec_label_pc_8e54
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_9954 = load i32, i32* @sl, align 4
  %v1_9954 = add i32 %v0_9954, 660
  %v2_9954 = inttoptr i32 %v1_9954 to i32*
  %v3_9954 = load i32, i32* %v2_9954, align 4
  store i32 %v3_9954, i32* @r4, align 4
  %v3_9958 = call i32 @function_10d7c(i32 43, i32* null)
  %v0_995c = load i32, i32* @r4, align 4
  store i32 %v0_995c, i32* %r1.global-to-local, align 4
  store i32 %v3_9958, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9968 = load i32, i32* @r7, align 4
  store i32 %v0_9968, i32* %r0.global-to-local, align 4
  %v4_996c = call i32 @function_1191c(i32 %v0_9968, i32 %v0_995c, i32 %v3_9958, i32 11)
  store i32 %v4_996c, i32* %r0.global-to-local, align 4
  %v0_9970 = load i32, i32* @sl, align 4
  %v1_9970 = add i32 %v0_9970, 660
  %v2_9970 = inttoptr i32 %v1_9970 to i32*
  %v3_9970 = load i32, i32* %v2_9970, align 4
  %v0_9974 = load i32, i32* @r7, align 4
  %v2_9974 = add i32 %v0_9974, %v4_996c
  store i32 %v2_9974, i32* @r6, align 4
  store i32 %v4_996c, i32* @r4, align 4
  %v2_997c = sub i32 %v3_9970, %v4_996c
  store i32 %v2_997c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176d8.46 to i32), i32* %r2.global-to-local, align 4
  %v0_9984 = load i32, i32* @r8, align 4
  store i32 %v0_9984, i32* %r3.global-to-local, align 4
  store i32 %v2_9974, i32* %r0.global-to-local, align 4
  %v4_998c = call i32 @function_1191c(i32 %v2_9974, i32 %v2_997c, i32 ptrtoint (i32* @global_var_176d8.46 to i32), i32 %v0_9984)
  store i32 %v4_998c, i32* %r0.global-to-local, align 4
  %v0_9990 = load i32, i32* @sl, align 4
  %v1_9990 = add i32 %v0_9990, 16
  %v2_9990 = inttoptr i32 %v1_9990 to i32*
  %v3_9990 = load i32, i32* %v2_9990, align 4
  store i32 %v3_9990, i32* %r3.global-to-local, align 4
  %v1_9994 = load i32, i32* @r4, align 4
  %v2_9994 = add i32 %v1_9994, %v4_998c
  store i32 %v2_9994, i32* @r5, align 4
  %v0_9998 = load i32, i32* %sb.global-to-local, align 4
  %v2_9998 = add i32 %v0_9998, %v2_9994
  store i32 %v2_9998, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_99a0 = icmp ugt i32 %v3_9990, 3
  store i1 %v2_99a0, i1* %cpsr_c.global-to-local, align 1
  %v7_99a0 = icmp eq i32 %v3_9990, 4
  store i1 %v7_99a0, i1* %cpsr_z.global-to-local, align 1
  %v3_99a4 = add i32 %v2_9998, 2115
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 0, i8* %v4_99a4, align 1
  %v7_99a8 = icmp sgt i32 %v3_9990, 4
  br i1 %v7_99a8, label %dec_label_pc_99ac, label %dec_label_pc_9b14

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_9b14, %dec_label_pc_9b24
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v1_99b4 = load i32, i32* @sl, align 4
  %v2_99b4 = add i32 %v1_99b4, 12
  %v3_99b4 = inttoptr i32 %v2_99b4 to i32*
  store i32 -1, i32* %v3_99b4, align 4
  %v0_99b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_99b8 = trunc i32 %v0_99b8 to i8
  %v2_99b8 = load i32, i32* @sl, align 4
  %v3_99b8 = add i32 %v2_99b8, -1448
  %v4_99b8 = inttoptr i32 %v3_99b8 to i8*
  store i8 %v1_99b8, i8* %v4_99b8, align 1
  br label %dec_label_pc_87ac

dec_label_pc_99c0:                                ; preds = %bb201
  store i32 7, i32* @ip, align 4
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_99cc = load i32, i32* @r6, align 4
  %v1_99cc = add i32 %v0_99cc, 4
  %v2_99cc = inttoptr i32 %v1_99cc to i8*
  %v3_99cc = load i8, i8* %v2_99cc, align 1
  %v4_99cc = zext i8 %v3_99cc to i32
  store i32 %v4_99cc, i32* @r3, align 4
  %v2_99d0 = icmp ugt i8 %v3_99cc, 114
  store i1 %v2_99d0, i1* %cpsr_c.global-to-local, align 1
  %v7_99d0 = icmp eq i8 %v3_99cc, 115
  store i1 %v7_99d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99d0, label %bb206, label %.thread41

bb206:                                            ; preds = %dec_label_pc_99c0
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread41

.thread41:                                        ; preds = %dec_label_pc_99c0, %bb206
  %v3_99e0 = phi i32 [ 7, %dec_label_pc_99c0 ], [ 8, %bb206 ]
  store i32 %v0_99cc, i32* @r0, align 4
  %v1_99e8 = load i32, i32* @r5, align 4
  %v2_99e8 = sub i32 %v1_99e8, %v3_99e0
  store i32 %v2_99e8, i32* @r2, align 4
  %v2_99ec = add i32 %v3_99e0, %v0_99cc
  store i32 %v2_99ec, i32* @r1, align 4
  %v3_99f0 = call i32 @function_129e0(i32 %v0_99cc, i32 %v2_99ec, i32 %v2_99e8)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v0_99f8 = load i32, i32* @r7, align 4
  store i32 %v0_99f8, i32* %stack_var_-44, align 4
  store i32 %v2_823c, i32* @lr, align 4
  %v1_9a00 = load i32, i32* @r4, align 4
  %v2_9a00 = add i32 %v1_9a00, %v2_823c
  %v3_9a00 = inttoptr i32 %v2_9a00 to i8*
  %v4_9a00 = load i8, i8* %v3_9a00, align 1
  %v6_9a00 = zext i8 %v4_9a00 to i32
  store i32 %v6_9a00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a04 = icmp eq i8 %v4_9a00, 0
  store i1 %v2_9a04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a04, label %dec_label_pc_9a48, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %.thread41
  %v2_9a0c = icmp ugt i8 %v4_9a00, 46
  store i1 %v2_9a0c, i1* %cpsr_c.global-to-local, align 1
  %v7_9a0c = icmp eq i8 %v4_9a00, 47
  store i1 %v7_9a0c, i1* %cpsr_z.global-to-local, align 1
  %v1_9a10 = load i32, i32* @r6, align 4
  br i1 %v7_9a0c, label %bb207, label %dec_label_pc_9a18

bb207:                                            ; preds = %dec_label_pc_9a0c
  store i32 %v1_9a10, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9b08

dec_label_pc_9a18:                                ; preds = %dec_label_pc_9a0c
  store i32 %v0_99f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9a28

dec_label_pc_9a20:                                ; preds = %dec_label_pc_9a28
  %v2_9a20 = icmp ugt i8 %v4_9a34, 46
  store i1 %v2_9a20, i1* %cpsr_c.global-to-local, align 1
  %v7_9a20 = icmp eq i8 %v4_9a34, 47
  store i1 %v7_9a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a20, label %dec_label_pc_9b08, label %dec_label_pc_9a28

dec_label_pc_9a28:                                ; preds = %dec_label_pc_9a20, %dec_label_pc_9a18
  %v0_9a28 = phi i32 [ %v1_9a28, %dec_label_pc_9a20 ], [ %v0_99f8, %dec_label_pc_9a18 ]
  %v1_9a28 = add i32 %v0_9a28, 1
  store i32 %v1_9a28, i32* %ip.global-to-local, align 4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  store i32 %v1_9a28, i32* %stack_var_-44, align 4
  %v2_9a34 = add i32 %v1_9a28, %v1_9a10
  %v3_9a34 = inttoptr i32 %v2_9a34 to i8*
  %v4_9a34 = load i8, i8* %v3_9a34, align 1
  %v6_9a34 = zext i8 %v4_9a34 to i32
  store i32 %v6_9a34, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a38 = icmp eq i8 %v4_9a34, 0
  store i1 %v2_9a38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9a28, i32* %r1.global-to-local, align 4
  store i32 %v2_9a34, i32* %r2.global-to-local, align 4
  br i1 %v2_9a38, label %dec_label_pc_9a48, label %dec_label_pc_9a20

dec_label_pc_9a48:                                ; preds = %dec_label_pc_9a28, %.thread41, %dec_label_pc_9b08
  %v0_9a48 = load i32, i32* @r6, align 4
  store i32 %v0_9a48, i32* %r0.global-to-local, align 4
  %v1_9a4c = inttoptr i32 %v0_9a48 to i8*
  %v2_9a4c = call i32 @function_11864(i8* %v1_9a4c)
  store i32 %v2_9a4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9a50 = icmp eq i32 %v2_9a4c, 0
  store i1 %v2_9a50, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v2_9a4c, 1
  br i1 %tmp208, label %dec_label_pc_9a74, label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_9a48
  %v0_9a58 = load i32, i32* @r6, align 4
  store i32 %v0_9a58, i32* %r0.global-to-local, align 4
  %v1_9a5c = inttoptr i32 %v0_9a58 to i8*
  %v2_9a5c = call i32 @function_11864(i8* %v1_9a5c)
  store i32 %v2_9a5c, i32* %r0.global-to-local, align 4
  %v1_9a60 = add i32 %v2_9a5c, -127
  %v2_9a60 = icmp ugt i32 %v2_9a5c, 126
  store i1 %v2_9a60, i1* %cpsr_c.global-to-local, align 1
  %v3_9a60 = sub i32 126, %v2_9a5c
  %v4_9a60 = and i32 %v3_9a60, %v2_9a5c
  %v5_9a60 = icmp slt i32 %v4_9a60, 0
  %v6_9a60 = icmp slt i32 %v1_9a60, 0
  %v7_9a60 = icmp eq i32 %v2_9a5c, 127
  store i1 %v7_9a60, i1* %cpsr_z.global-to-local, align 1
  %v7_9a64 = icmp sgt i32 %v2_9a5c, 127
  br i1 %v7_9a64, label %.thread44, label %bb209

bb209:                                            ; preds = %dec_label_pc_9a58
  %v8_9a64 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a68 = add i32 %v8_9a64, 789
  store i32 %v9_9a68, i32* %r0.global-to-local, align 4
  %v8_9a6c = load i32, i32* @r6, align 4
  store i32 %v8_9a6c, i32* %r1.global-to-local, align 4
  br label %.thread44

.thread44:                                        ; preds = %dec_label_pc_9a58, %bb209
  store i32 39540, i32* @lr, align 4
  %v3_9a70 = xor i1 %v6_9a60, %v5_9a60
  %v4_9a70 = or i1 %v7_9a60, %v3_9a70
  call void @__pseudo_cond_branch(i1 %v4_9a70, i32 ptrtoint (i32* @global_var_1188c.47 to i32))
  br label %dec_label_pc_9a74

dec_label_pc_9a74:                                ; preds = %dec_label_pc_9a48, %.thread44
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9a78 = load i32, i32* %stack_var_-44, align 4
  %v0_9a7c = load i32, i32* @r6, align 4
  %v1_9a7c = add i32 %v0_9a7c, 1
  store i32 %v1_9a7c, i32* @r5, align 4
  %v2_9a80 = add i32 %v1_9a7c, %v3_9a78
  store i32 %v2_9a80, i32* %r0.global-to-local, align 4
  %v1_9a84 = inttoptr i32 %v2_9a80 to i8*
  %v2_9a84 = call i32 @function_11864(i8* %v1_9a84)
  store i32 %v2_9a84, i32* %r0.global-to-local, align 4
  %v2_9a88 = icmp ugt i32 %v2_9a84, 254
  store i1 %v2_9a88, i1* %cpsr_c.global-to-local, align 1
  %v7_9a88 = icmp eq i32 %v2_9a84, 255
  store i1 %v7_9a88, i1* %cpsr_z.global-to-local, align 1
  %v8_9a8c = icmp sgt i32 %v2_9a84, 255
  br i1 %v8_9a8c, label %dec_label_pc_9614, label %dec_label_pc_9a90

dec_label_pc_9a90:                                ; preds = %dec_label_pc_9a74
  %v0_9a90 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a94 = add i32 %v0_9a90, 533
  store i32 %v1_9a94, i32* @r4, align 4
  store i32 %v1_9a94, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9aa0 = call i32 @function_118f8(i32 %v1_9a94, i32 255)
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v3_9aa8 = load i32, i32* %stack_var_-44, align 4
  %v0_9aac = load i32, i32* @r5, align 4
  %v2_9aac = add i32 %v0_9aac, %v3_9aa8
  store i32 %v2_9aac, i32* %r0.global-to-local, align 4
  %v1_9ab0 = inttoptr i32 %v2_9aac to i8*
  %v2_9ab0 = call i32 @function_11864(i8* %v1_9ab0)
  store i32 %v2_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v2_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  %tmp210 = icmp slt i32 %v2_9ab0, 1
  br i1 %tmp210, label %dec_label_pc_9614, label %dec_label_pc_9abc

dec_label_pc_9abc:                                ; preds = %dec_label_pc_9a90
  %v3_9ac0 = load i32, i32* %stack_var_-44, align 4
  %v0_9ac4 = load i32, i32* @r4, align 4
  store i32 %v0_9ac4, i32* @r0, align 4
  %v0_9ac8 = load i32, i32* @r5, align 4
  %v2_9ac8 = add i32 %v0_9ac8, %v3_9ac0
  store i32 %v2_9ac8, i32* %r1.global-to-local, align 4
  %v2_9acc = inttoptr i32 %v0_9ac4 to i8*
  %v3_9acc = call i32 @function_1188c(i8* %v2_9acc, i32 %v2_9ac8)
  store i32 %v3_9acc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9614

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_98f8
  %v0_9ad4 = load i32, i32* @r4, align 4
  store i32 %v0_9ad4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32), i32* %r1.global-to-local, align 4
  %v3_9adc = inttoptr i32 %v0_9ad4 to i8*
  %v4_9adc = call i32 @function_11c44(i8* %v3_9adc, i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32))
  store i32 %v4_9adc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ae0 = icmp eq i32 %v4_9adc, 0
  store i1 %v2_9ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ae0, label %bb211, label %dec_label_pc_992c

bb211:                                            ; preds = %dec_label_pc_9ad4
  %v0_9ae8 = load i32, i32* %fp.global-to-local, align 4
  %v1_9ae8 = load i32, i32* @r5, align 4
  %v3_9ae8 = icmp uge i32 %v0_9ae8, %v1_9ae8
  store i1 %v3_9ae8, i1* %cpsr_c.global-to-local, align 1
  %v9_9ae8 = icmp eq i32 %v0_9ae8, %v1_9ae8
  store i1 %v9_9ae8, i1* %cpsr_z.global-to-local, align 1
  %v7_9aec = icmp sgt i32 %v0_9ae8, %v1_9ae8
  %. = select i1 %v7_9aec, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9af4 = trunc i32 %. to i8
  %v10_9af4 = load i32, i32* @sl, align 4
  %v11_9af4 = add i32 %v10_9af4, -1448
  %v12_9af4 = inttoptr i32 %v11_9af4 to i8*
  store i8 %v9_9af4, i8* %v12_9af4, align 1
  br label %dec_label_pc_9934

dec_label_pc_9b00:                                ; preds = %dec_label_pc_8ef8
  %v0_9b00 = load i32, i32* @r4, align 4
  %v1_9b00 = trunc i32 %v0_9b00 to i8
  %v2_9b00 = load i32, i32* @sl, align 4
  %v3_9b00 = add i32 %v2_9b00, -1448
  %v4_9b00 = inttoptr i32 %v3_9b00 to i8*
  store i8 %v1_9b00, i8* %v4_9b00, align 1
  br label %dec_label_pc_87ac

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9a20, %bb207
  %v2_9b0c = phi i32 [ %v1_9a10, %bb207 ], [ %v2_9a34, %dec_label_pc_9a20 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9b0c = inttoptr i32 %v2_9b0c to i8*
  store i8 0, i8* %v3_9b0c, align 1
  br label %dec_label_pc_9a48

dec_label_pc_9b14:                                ; preds = %dec_label_pc_994c
  %v0_9b14 = load i32, i32* @r6, align 4
  store i32 %v0_9b14, i32* %r0.global-to-local, align 4
  %v1_9b18 = inttoptr i32 %v0_9b14 to i8*
  %v2_9b18 = call i32 @function_11864(i8* %v1_9b18)
  store i32 %v2_9b18, i32* %r0.global-to-local, align 4
  %v2_9b1c = icmp ugt i32 %v2_9b18, 126
  store i1 %v2_9b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_9b1c = icmp eq i32 %v2_9b18, 127
  store i1 %v7_9b1c, i1* %cpsr_z.global-to-local, align 1
  %v8_9b20 = icmp sgt i32 %v2_9b18, 127
  br i1 %v8_9b20, label %dec_label_pc_99ac, label %dec_label_pc_9b24

dec_label_pc_9b24:                                ; preds = %dec_label_pc_9b14
  %v0_9b24 = load i32, i32* @sl, align 4
  %v1_9b24 = add i32 %v0_9b24, 16
  %v2_9b24 = inttoptr i32 %v1_9b24 to i32*
  %v3_9b24 = load i32, i32* %v2_9b24, align 4
  %v1_9b28 = and i32 %v3_9b24, 33554432
  %v2_9b28 = icmp ne i32 %v1_9b28, 0
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = mul i32 %v3_9b24, 128
  %v1_9b2c = add i32 %v3_9b28, 1472
  %v0_9b30 = load i32, i32* @r6, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b34 = add i32 %v1_9b2c, %v0_9b34
  store i32 %v2_9b34, i32* @r0, align 4
  %v2_9b38 = inttoptr i32 %v2_9b34 to i8*
  %v3_9b38 = call i32 @function_1188c(i8* %v2_9b38, i32 %v0_9b30)
  store i32 %v3_9b38, i32* %r0.global-to-local, align 4
  %v0_9b3c = load i32, i32* @sl, align 4
  %v1_9b3c = add i32 %v0_9b3c, 16
  %v2_9b3c = inttoptr i32 %v1_9b3c to i32*
  %v3_9b3c = load i32, i32* %v2_9b3c, align 4
  %v1_9b40 = and i32 %v3_9b3c, 33554432
  %v2_9b40 = icmp ne i32 %v1_9b40, 0
  store i1 %v2_9b40, i1* %cpsr_c.global-to-local, align 1
  %v3_9b40 = mul i32 %v3_9b3c, 128
  %v1_9b44 = add i32 %v3_9b40, 1472
  %v0_9b48 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b48 = add i32 %v1_9b44, %v0_9b48
  store i32 %v2_9b48, i32* @r4, align 4
  store i32 %v2_9b48, i32* %r0.global-to-local, align 4
  %v1_9b50 = inttoptr i32 %v2_9b48 to i8*
  %v2_9b50 = call i32 @function_11864(i8* %v1_9b50)
  store i32 ptrtoint (i32* @global_var_179d4.49 to i32), i32* %r1.global-to-local, align 4
  %v0_9b58 = load i32, i32* @r4, align 4
  %v2_9b58 = add i32 %v0_9b58, %v2_9b50
  store i32 %v2_9b58, i32* @r0, align 4
  %v2_9b5c = inttoptr i32 %v2_9b58 to i8*
  %v3_9b5c = call i32 @function_1188c(i8* %v2_9b5c, i32 ptrtoint (i32* @global_var_179d4.49 to i32))
  store i32 %v3_9b5c, i32* %r0.global-to-local, align 4
  %v0_9b60 = load i32, i32* @r5, align 4
  %v1_9b60 = add i32 %v0_9b60, 3
  store i32 %v1_9b60, i32* @r5, align 4
  %v0_9b64 = load i32, i32* @sl, align 4
  %v1_9b64 = add i32 %v0_9b64, 660
  %v2_9b64 = inttoptr i32 %v1_9b64 to i32*
  %v3_9b64 = load i32, i32* %v2_9b64, align 4
  %v0_9b68 = load i32, i32* @r7, align 4
  %v2_9b68 = add i32 %v0_9b68, %v1_9b60
  store i32 %v2_9b68, i32* @r6, align 4
  %v2_9b6c = sub i32 %v3_9b64, %v1_9b60
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  %v0_9b70 = load i32, i32* @r8, align 4
  store i32 %v0_9b70, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176d8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9b68, i32* %r0.global-to-local, align 4
  %v4_9b7c = call i32 @function_1191c(i32 %v2_9b68, i32 %v2_9b6c, i32 ptrtoint (i32* @global_var_176d8.46 to i32), i32 %v0_9b70)
  store i32 %v4_9b7c, i32* %r0.global-to-local, align 4
  %v0_9b80 = load i32, i32* @sl, align 4
  %v1_9b80 = add i32 %v0_9b80, 16
  %v2_9b80 = inttoptr i32 %v1_9b80 to i32*
  %v3_9b80 = load i32, i32* %v2_9b80, align 4
  %v1_9b84 = and i32 %v3_9b80, 33554432
  %v2_9b84 = icmp ne i32 %v1_9b84, 0
  store i1 %v2_9b84, i1* %cpsr_c.global-to-local, align 1
  %v3_9b84 = mul i32 %v3_9b80, 128
  %v1_9b88 = add i32 %v3_9b84, 1472
  %v0_9b8c = load i32, i32* %sb.global-to-local, align 4
  %v1_9b8c = load i32, i32* @r5, align 4
  %v2_9b90 = add i32 %v1_9b88, %v0_9b8c
  store i32 %v2_9b90, i32* @r4, align 4
  %v2_9b8c = add i32 %v0_9b8c, %v4_9b7c
  %v2_9b94 = add i32 %v2_9b8c, %v1_9b8c
  store i32 %v2_9b94, i32* @r5, align 4
  %v0_9b98 = load i32, i32* %fp.global-to-local, align 4
  %v1_9b98 = trunc i32 %v0_9b98 to i8
  %v3_9b98 = add i32 %v2_9b94, 2115
  %v4_9b98 = inttoptr i32 %v3_9b98 to i8*
  store i8 %v1_9b98, i8* %v4_9b98, align 1
  %v0_9b9c = load i32, i32* @r4, align 4
  store i32 %v0_9b9c, i32* %r0.global-to-local, align 4
  %v1_9ba0 = inttoptr i32 %v0_9b9c to i8*
  %v2_9ba0 = call i32 @function_11864(i8* %v1_9ba0)
  %v0_9ba4 = load i32, i32* @r6, align 4
  store i32 %v0_9ba4, i32* %r1.global-to-local, align 4
  %v0_9ba8 = load i32, i32* @r4, align 4
  %v2_9ba8 = add i32 %v0_9ba8, %v2_9ba0
  store i32 %v2_9ba8, i32* @r0, align 4
  %v2_9bac = inttoptr i32 %v2_9ba8 to i8*
  %v3_9bac = call i32 @function_1188c(i8* %v2_9bac, i32 %v0_9ba4)
  store i32 %v3_9bac, i32* %r0.global-to-local, align 4
  %v0_9bb0 = load i32, i32* @sl, align 4
  %v1_9bb0 = add i32 %v0_9bb0, 16
  %v2_9bb0 = inttoptr i32 %v1_9bb0 to i32*
  %v3_9bb0 = load i32, i32* %v2_9bb0, align 4
  %v1_9bb4 = add i32 %v3_9bb0, 1
  store i32 %v1_9bb4, i32* %r3.global-to-local, align 4
  store i32 %v1_9bb4, i32* %v2_9bb0, align 4
  br label %dec_label_pc_99ac

dec_label_pc_9bc0:                                ; preds = %dec_label_pc_9604
  %v0_9bc0 = load i32, i32* %sb.global-to-local, align 4
  %v1_9bc4 = add i32 %v0_9bc0, 533
  store i32 %v1_9bc4, i32* @r4, align 4
  store i32 %v1_9bc4, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9bd0 = call i32 @function_118f8(i32 %v1_9bc4, i32 255)
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_9bd8 = load i32, i32* %stack_var_-44, align 4
  %v0_9bdc = load i32, i32* @r6, align 4
  %v1_9bdc = add i32 %v0_9bdc, 1
  store i32 %v1_9bdc, i32* @r6, align 4
  %v2_9be0 = add i32 %v1_9bdc, %v3_9bd8
  store i32 %v2_9be0, i32* %r0.global-to-local, align 4
  %v1_9be4 = inttoptr i32 %v2_9be0 to i8*
  %v2_9be4 = call i32 @function_11864(i8* %v1_9be4)
  store i32 %v2_9be4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9be8 = icmp eq i32 %v2_9be4, 0
  store i1 %v2_9be8, i1* %cpsr_z.global-to-local, align 1
  %tmp212 = icmp slt i32 %v2_9be4, 1
  br i1 %tmp212, label %dec_label_pc_9614, label %dec_label_pc_9bf0

dec_label_pc_9bf0:                                ; preds = %dec_label_pc_9bc0
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9bf4 = load i32, i32* %stack_var_-44, align 4
  %v0_9bf8 = load i32, i32* @r6, align 4
  %v2_9bf8 = add i32 %v0_9bf8, %v3_9bf4
  store i32 %v2_9bf8, i32* %r0.global-to-local, align 4
  %v1_9bfc = inttoptr i32 %v2_9bf8 to i8*
  %v2_9bfc = call i32 @function_11864(i8* %v1_9bfc)
  store i32 %v2_9bfc, i32* %r0.global-to-local, align 4
  %v2_9c00 = icmp ugt i32 %v2_9bfc, 254
  store i1 %v2_9c00, i1* %cpsr_c.global-to-local, align 1
  %v7_9c00 = icmp eq i32 %v2_9bfc, 255
  store i1 %v7_9c00, i1* %cpsr_z.global-to-local, align 1
  %v8_9c04 = icmp sgt i32 %v2_9bfc, 255
  br i1 %v8_9c04, label %dec_label_pc_9614, label %dec_label_pc_9c08

dec_label_pc_9c08:                                ; preds = %dec_label_pc_9bf0
  store i32 %v10_82b0, i32* %ip.global-to-local, align 4
  %v3_9c0c = load i32, i32* %stack_var_-44, align 4
  %v0_9c10 = load i32, i32* @r4, align 4
  store i32 %v0_9c10, i32* @r0, align 4
  %v0_9c14 = load i32, i32* @r6, align 4
  %v2_9c14 = add i32 %v0_9c14, %v3_9c0c
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v2_9c18 = inttoptr i32 %v0_9c10 to i8*
  %v3_9c18 = call i32 @function_1188c(i8* %v2_9c18, i32 %v2_9c14)
  store i32 %v3_9c18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9614

dec_label_pc_9c20:                                ; preds = %dec_label_pc_98a0
  store i32 7, i32* @ip, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_9c2c = load i32, i32* @r6, align 4
  %v1_9c2c = add i32 %v0_9c2c, 4
  %v2_9c2c = inttoptr i32 %v1_9c2c to i8*
  %v3_9c2c = load i8, i8* %v2_9c2c, align 1
  %v4_9c2c = zext i8 %v3_9c2c to i32
  store i32 %v4_9c2c, i32* @r3, align 4
  %v2_9c30 = icmp ugt i8 %v3_9c2c, 114
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v7_9c30 = icmp eq i8 %v3_9c2c, 115
  store i1 %v7_9c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c30, label %bb213, label %.thread47

bb213:                                            ; preds = %dec_label_pc_9c20
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread47

.thread47:                                        ; preds = %dec_label_pc_9c20, %bb213
  %v3_9c40 = phi i32 [ 7, %dec_label_pc_9c20 ], [ 8, %bb213 ]
  %v1_9c44 = sub nsw i32 1, %v3_9c40
  %v1_9c48 = load i32, i32* @r7, align 4
  %v2_9c48 = add i32 %v1_9c48, %v1_9c44
  store i32 %v2_9c48, i32* @r2, align 4
  %v2_9c4c = add i32 %v3_9c40, %v0_9c2c
  store i32 %v2_9c4c, i32* @r1, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v3_9c54 = call i32 @function_129e0(i32 %v0_9c2c, i32 %v2_9c4c, i32 %v2_9c48)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v0_9c64 = load i32, i32* @r5, align 4
  %v1_9c64 = load i32, i32* @r4, align 4
  %v2_9c64 = add i32 %v1_9c64, %v0_9c64
  %v3_9c64 = inttoptr i32 %v2_9c64 to i8*
  %v4_9c64 = load i8, i8* %v3_9c64, align 1
  %v6_9c64 = zext i8 %v4_9c64 to i32
  store i32 %v6_9c64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_9c68 = icmp eq i8 %v4_9c64, 0
  store i1 %v9_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c68, label %dec_label_pc_9ca8, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %.thread47
  %v2_9c70 = icmp ugt i8 %v4_9c64, 46
  store i1 %v2_9c70, i1* %cpsr_c.global-to-local, align 1
  %v7_9c70 = icmp eq i8 %v4_9c64, 47
  store i1 %v7_9c70, i1* %cpsr_z.global-to-local, align 1
  %v1_9c74 = load i32, i32* @r6, align 4
  br i1 %v7_9c70, label %bb214, label %dec_label_pc_9c7c

bb214:                                            ; preds = %dec_label_pc_9c70
  store i32 %v1_9c74, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9d28

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9c70
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9c8c

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9c8c
  %v2_9c84 = icmp ugt i8 %v4_9c98, 46
  store i1 %v2_9c84, i1* %cpsr_c.global-to-local, align 1
  %v7_9c84 = icmp eq i8 %v4_9c98, 47
  store i1 %v7_9c84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c84, label %dec_label_pc_9d28, label %dec_label_pc_9c8c

dec_label_pc_9c8c:                                ; preds = %dec_label_pc_9c84, %dec_label_pc_9c7c
  %v0_9c8c = phi i32 [ %v1_9c8c, %dec_label_pc_9c84 ], [ 0, %dec_label_pc_9c7c ]
  %v1_9c8c = add i32 %v0_9c8c, 1
  store i32 %v1_9c8c, i32* %r1.global-to-local, align 4
  store i32 %v10_82b0, i32* @ip, align 4
  store i32 %v1_9c8c, i32* %stack_var_-44, align 4
  %v2_9c98 = add i32 %v1_9c8c, %v1_9c74
  %v3_9c98 = inttoptr i32 %v2_9c98 to i8*
  %v4_9c98 = load i8, i8* %v3_9c98, align 1
  %v6_9c98 = zext i8 %v4_9c98 to i32
  store i32 %v6_9c98, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9c9c = icmp eq i8 %v4_9c98, 0
  store i1 %v2_9c9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9c98, i32* %r2.global-to-local, align 4
  br i1 %v2_9c9c, label %dec_label_pc_9ca8, label %dec_label_pc_9c84

dec_label_pc_9ca8:                                ; preds = %dec_label_pc_9c8c, %.thread47, %dec_label_pc_9d28
  %v0_9ca8 = load i32, i32* @r6, align 4
  store i32 %v0_9ca8, i32* %r0.global-to-local, align 4
  %v1_9cac = inttoptr i32 %v0_9ca8 to i8*
  %v2_9cac = call i32 @function_11864(i8* %v1_9cac)
  store i32 %v2_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9cb0 = icmp eq i32 %v2_9cac, 0
  store i1 %v2_9cb0, i1* %cpsr_z.global-to-local, align 1
  %tmp215 = icmp slt i32 %v2_9cac, 1
  br i1 %tmp215, label %dec_label_pc_9cc8, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %dec_label_pc_9ca8
  %v0_9cb8 = load i32, i32* @r6, align 4
  store i32 %v0_9cb8, i32* %r0.global-to-local, align 4
  %v1_9cbc = inttoptr i32 %v0_9cb8 to i8*
  %v2_9cbc = call i32 @function_11864(i8* %v1_9cbc)
  store i32 %v2_9cbc, i32* %r0.global-to-local, align 4
  %v2_9cc0 = icmp ugt i32 %v2_9cbc, 126
  store i1 %v2_9cc0, i1* %cpsr_c.global-to-local, align 1
  %v7_9cc0 = icmp eq i32 %v2_9cbc, 127
  store i1 %v7_9cc0, i1* %cpsr_z.global-to-local, align 1
  %v7_9cc4 = icmp slt i32 %v2_9cbc, 128
  br i1 %v7_9cc4, label %dec_label_pc_9e88, label %dec_label_pc_9cc8

dec_label_pc_9cc8:                                ; preds = %dec_label_pc_9cb8, %dec_label_pc_9ca8, %dec_label_pc_9e88
  store i32 %v10_82b0, i32* @lr, align 4
  %v3_9ccc = load i32, i32* %stack_var_-44, align 4
  %v0_9cd0 = load i32, i32* @r6, align 4
  %v1_9cd0 = add i32 %v0_9cd0, 1
  store i32 %v1_9cd0, i32* @r5, align 4
  %v2_9cd4 = add i32 %v1_9cd0, %v3_9ccc
  store i32 %v2_9cd4, i32* %r0.global-to-local, align 4
  %v1_9cd8 = inttoptr i32 %v2_9cd4 to i8*
  %v2_9cd8 = call i32 @function_11864(i8* %v1_9cd8)
  store i32 %v2_9cd8, i32* %r0.global-to-local, align 4
  %v2_9cdc = icmp ugt i32 %v2_9cd8, 254
  store i1 %v2_9cdc, i1* %cpsr_c.global-to-local, align 1
  %v7_9cdc = icmp eq i32 %v2_9cd8, 255
  store i1 %v7_9cdc, i1* %cpsr_z.global-to-local, align 1
  %v8_9ce0 = icmp sgt i32 %v2_9cd8, 255
  br i1 %v8_9ce0, label %dec_label_pc_98d8, label %dec_label_pc_9ce4

dec_label_pc_9ce4:                                ; preds = %dec_label_pc_9cc8
  %v0_9ce4 = load i32, i32* %sb.global-to-local, align 4
  %v1_9ce8 = add i32 %v0_9ce4, 533
  store i32 %v1_9ce8, i32* @r4, align 4
  store i32 %v1_9ce8, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9cf4 = call i32 @function_118f8(i32 %v1_9ce8, i32 255)
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9cfc = load i32, i32* %stack_var_-44, align 4
  %v0_9d00 = load i32, i32* @r5, align 4
  %v2_9d00 = add i32 %v0_9d00, %v3_9cfc
  store i32 %v2_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v2_9d00 to i8*
  %v2_9d04 = call i32 @function_11864(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9d08 = icmp eq i32 %v2_9d04, 0
  store i1 %v2_9d08, i1* %cpsr_z.global-to-local, align 1
  %tmp216 = icmp slt i32 %v2_9d04, 1
  br i1 %tmp216, label %dec_label_pc_98d8, label %dec_label_pc_9d10

dec_label_pc_9d10:                                ; preds = %dec_label_pc_9ce4
  store i32 %v10_82b0, i32* %r2.global-to-local, align 4
  %v3_9d14 = load i32, i32* %stack_var_-44, align 4
  %v0_9d18 = load i32, i32* @r4, align 4
  store i32 %v0_9d18, i32* @r0, align 4
  %v0_9d1c = load i32, i32* @r5, align 4
  %v2_9d1c = add i32 %v0_9d1c, %v3_9d14
  store i32 %v2_9d1c, i32* %r1.global-to-local, align 4
  %v2_9d20 = inttoptr i32 %v0_9d18 to i8*
  %v3_9d20 = call i32 @function_1188c(i8* %v2_9d20, i32 %v2_9d1c)
  store i32 %v3_9d20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98d8

dec_label_pc_9d28:                                ; preds = %dec_label_pc_9c84, %bb214
  %v2_9d2c = phi i32 [ %v1_9c74, %bb214 ], [ %v2_9c98, %dec_label_pc_9c84 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9d2c = inttoptr i32 %v2_9d2c to i8*
  store i8 0, i8* %v3_9d2c, align 1
  br label %dec_label_pc_9ca8

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9858
  %v1_9d34 = add i32 %v0_9d34, 1
  store i32 %v1_9d34, i32* %ip.global-to-local, align 4
  %v2_9d38 = add i32 %v0_9858, %v1_9d34
  store i32 %v2_9d38, i32* %r4.global-to-local, align 4
  store i32 %v10_82b0, i32* @lr, align 4
  store i32 %v2_9d38, i32* %r0.global-to-local, align 4
  store i32 %v1_9d34, i32* %stack_var_-44, align 4
  %v1_9d48 = inttoptr i32 %v2_9d38 to i8*
  %v2_9d48 = call i32 @function_11864(i8* %v1_9d48)
  store i32 %v2_9d48, i32* %r0.global-to-local, align 4
  %v0_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v0_9d4c, %v2_9d48
  store i32 %v2_9d4c, i32* @r4, align 4
  %v1_9d50 = add i32 %v2_9d4c, -1
  %v2_9d50 = inttoptr i32 %v1_9d50 to i8*
  %v3_9d50 = load i8, i8* %v2_9d50, align 1
  %v4_9d50 = zext i8 %v3_9d50 to i32
  store i32 %v4_9d50, i32* %r3.global-to-local, align 4
  %v2_9d54 = icmp ugt i8 %v3_9d50, 33
  store i1 %v2_9d54, i1* %cpsr_c.global-to-local, align 1
  %v7_9d54 = icmp eq i8 %v3_9d50, 34
  store i1 %v7_9d54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d54, label %dec_label_pc_9d5c, label %dec_label_pc_9864

dec_label_pc_9d5c:                                ; preds = %dec_label_pc_9d34
  store i32 %v10_82b0, i32* %r1.global-to-local, align 4
  %v3_9d60 = load i32, i32* %stack_var_-44, align 4
  %v0_9d64 = load i32, i32* @r5, align 4
  %v2_9d64 = add i32 %v0_9d64, %v3_9d60
  store i32 %v2_9d64, i32* %r4.global-to-local, align 4
  store i32 %v2_9d64, i32* %r0.global-to-local, align 4
  %v1_9d6c = inttoptr i32 %v2_9d64 to i8*
  %v2_9d6c = call i32 @function_11864(i8* %v1_9d6c)
  store i32 %v2_9d6c, i32* %r0.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d64, %v2_9d6c
  store i32 %v2_9d70, i32* @r4, align 4
  %v0_9d74 = load i32, i32* @r6, align 4
  %v1_9d74 = trunc i32 %v0_9d74 to i8
  %v3_9d74 = add i32 %v2_9d70, -1
  %v4_9d74 = inttoptr i32 %v3_9d74 to i8*
  store i8 %v1_9d74, i8* %v4_9d74, align 1
  br label %dec_label_pc_9864

dec_label_pc_9d7c:                                ; preds = %dec_label_pc_98cc
  store i32 %v10_82b0, i32* %r3.global-to-local, align 4
  %v3_9d80 = load i32, i32* %stack_var_-44, align 4
  %v0_9d84 = load i32, i32* @r6, align 4
  %v1_9d84 = add i32 %v0_9d84, 1
  store i32 %v1_9d84, i32* @r5, align 4
  %v2_9d88 = add i32 %v1_9d84, %v3_9d80
  store i32 %v2_9d88, i32* %r0.global-to-local, align 4
  %v1_9d8c = inttoptr i32 %v2_9d88 to i8*
  %v2_9d8c = call i32 @function_11864(i8* %v1_9d8c)
  store i32 %v2_9d8c, i32* %r0.global-to-local, align 4
  %v2_9d90 = icmp ugt i32 %v2_9d8c, 254
  store i1 %v2_9d90, i1* %cpsr_c.global-to-local, align 1
  %v7_9d90 = icmp eq i32 %v2_9d8c, 255
  store i1 %v7_9d90, i1* %cpsr_z.global-to-local, align 1
  %v8_9d94 = icmp sgt i32 %v2_9d8c, 255
  br i1 %v8_9d94, label %dec_label_pc_98d8, label %dec_label_pc_9d98

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9d7c
  %v0_9d98 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d9c = add i32 %v0_9d98, 533
  store i32 %v1_9d9c, i32* @r4, align 4
  store i32 %v1_9d9c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9da8 = call i32 @function_118f8(i32 %v1_9d9c, i32 255)
  store i32 %v10_82b0, i32* @ip, align 4
  %v3_9db0 = load i32, i32* %stack_var_-44, align 4
  %v0_9db4 = load i32, i32* @r5, align 4
  %v2_9db4 = add i32 %v0_9db4, %v3_9db0
  store i32 %v2_9db4, i32* %r0.global-to-local, align 4
  %v1_9db8 = inttoptr i32 %v2_9db4 to i8*
  %v2_9db8 = call i32 @function_11864(i8* %v1_9db8)
  store i32 %v2_9db8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9dbc = icmp eq i32 %v2_9db8, 0
  store i1 %v2_9dbc, i1* %cpsr_z.global-to-local, align 1
  %tmp217 = icmp slt i32 %v2_9db8, 1
  br i1 %tmp217, label %dec_label_pc_98d8, label %dec_label_pc_9dc4

dec_label_pc_9dc4:                                ; preds = %dec_label_pc_9d98
  store i32 %v10_82b0, i32* @lr, align 4
  %v3_9dc8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* @r0, align 4
  %v0_9dd0 = load i32, i32* @r5, align 4
  %v2_9dd0 = add i32 %v0_9dd0, %v3_9dc8
  store i32 %v2_9dd0, i32* %r1.global-to-local, align 4
  %v2_9dd4 = inttoptr i32 %v0_9dcc to i8*
  %v3_9dd4 = call i32 @function_1188c(i8* %v2_9dd4, i32 %v2_9dd0)
  store i32 %v3_9dd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98d8

dec_label_pc_9ddc:                                ; preds = %dec_label_pc_8480
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_9de0 = call i32 @function_10e40(i32 57)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 57, i32* %r0.global-to-local, align 4
  %v3_9dec = call i32 @function_10d7c(i32 57, i32* null)
  store i32 %v3_9dec, i32* %r1.global-to-local, align 4
  %v0_9df4 = load i32, i32* @r5, align 4
  %v1_9df4 = add i32 %v0_9df4, 20
  store i32 %v1_9df4, i32* @r0, align 4
  %v2_9df8 = inttoptr i32 %v1_9df4 to i8*
  %v3_9df8 = call i32 @function_1188c(i8* %v2_9df8, i32 %v3_9dec)
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_9e00 = call i32 @function_10da0(i32 57)
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9e04:                                ; preds = %dec_label_pc_8480, %dec_label_pc_9ef4, %dec_label_pc_9ec8, %dec_label_pc_9e9c, %dec_label_pc_9e5c, %dec_label_pc_9ddc
  store i32 %v0_83cc, i32* @r0, align 4
  %v0_9e08 = load i32, i32* @r8, align 4
  store i32 %v0_9e08, i32* %r1.global-to-local, align 4
  %v2_9e0c = inttoptr i32 %v0_83cc to i8*
  %v3_9e0c = call i32 @function_1188c(i8* %v2_9e0c, i32 %v0_9e08)
  store i32 %v3_9e0c, i32* %r0.global-to-local, align 4
  store i32 %v0_835c, i32* %r2.global-to-local, align 4
  %v0_9e14 = load i32, i32* %fp.global-to-local, align 4
  %v1_9e14 = add i32 %v0_9e14, 1
  store i32 %v1_9e14, i32* %fp.global-to-local, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v3_9e1c = icmp uge i32 %v1_9e14, %v0_835c
  store i1 %v3_9e1c, i1* %cpsr_c.global-to-local, align 1
  %v9_9e1c = icmp eq i32 %v1_9e14, %v0_835c
  store i1 %v9_9e1c, i1* %cpsr_z.global-to-local, align 1
  %v1_9e20 = add i32 %v0_9e18, 3140
  store i32 %v1_9e20, i32* @r5, align 4
  br i1 %v9_9e1c, label %dec_label_pc_9e28, label %dec_label_pc_838c

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e04
  %v0_9e38 = load i32, i32* @r7, align 4
  %v1_9e38 = and i32 %v0_9e38, 128
  %v2_9e38 = icmp ne i32 %v1_9e38, 0
  store i1 %v2_9e38, i1* %cpsr_c.global-to-local, align 1
  %v3_9e38 = udiv i32 %v0_9e38, 256
  %v1_9e3c = add i32 %v2_8370, 1452
  store i32 %v1_9e3c, i32* %r3.global-to-local, align 4
  %v2_9e40 = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_9e40, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_84ec.preheader

dec_label_pc_9e5c:                                ; preds = %dec_label_pc_8480
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_9e60 = call i32 @function_10e40(i32 58)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 58, i32* %r0.global-to-local, align 4
  %v3_9e6c = call i32 @function_10d7c(i32 58, i32* null)
  store i32 %v3_9e6c, i32* %r1.global-to-local, align 4
  %v0_9e74 = load i32, i32* @r5, align 4
  %v1_9e74 = add i32 %v0_9e74, 20
  store i32 %v1_9e74, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v1_9e74 to i8*
  %v3_9e78 = call i32 @function_1188c(i8* %v2_9e78, i32 %v3_9e6c)
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_9e80 = call i32 @function_10da0(i32 58)
  store i32 %v1_9e80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9e88:                                ; preds = %dec_label_pc_9cb8
  %v0_9e88 = load i32, i32* %sb.global-to-local, align 4
  %v0_9e8c = load i32, i32* @r6, align 4
  store i32 %v0_9e8c, i32* %r1.global-to-local, align 4
  %v1_9e90 = add i32 %v0_9e88, 789
  store i32 %v1_9e90, i32* @r0, align 4
  %v2_9e94 = inttoptr i32 %v1_9e90 to i8*
  %v3_9e94 = call i32 @function_1188c(i8* %v2_9e94, i32 %v0_9e8c)
  store i32 %v3_9e94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9cc8

dec_label_pc_9e9c:                                ; preds = %dec_label_pc_8480
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_9ea0 = call i32 @function_10e40(i32 55)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 55, i32* %r0.global-to-local, align 4
  %v3_9eac = call i32 @function_10d7c(i32 55, i32* null)
  store i32 %v3_9eac, i32* %r1.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  %v1_9eb4 = add i32 %v0_9eb4, 20
  store i32 %v1_9eb4, i32* @r0, align 4
  %v2_9eb8 = inttoptr i32 %v1_9eb4 to i8*
  %v3_9eb8 = call i32 @function_1188c(i8* %v2_9eb8, i32 %v3_9eac)
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_9ec0 = call i32 @function_10da0(i32 55)
  store i32 %v1_9ec0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9ec8:                                ; preds = %dec_label_pc_8480
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9ecc = call i32 @function_10e40(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_9ed8 = call i32 @function_10d7c(i32 54, i32* null)
  store i32 %v3_9ed8, i32* %r1.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r5, align 4
  %v1_9ee0 = add i32 %v0_9ee0, 20
  store i32 %v1_9ee0, i32* @r0, align 4
  %v2_9ee4 = inttoptr i32 %v1_9ee0 to i8*
  %v3_9ee4 = call i32 @function_1188c(i8* %v2_9ee4, i32 %v3_9ed8)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9eec = call i32 @function_10da0(i32 54)
  store i32 %v1_9eec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

dec_label_pc_9ef4:                                ; preds = %dec_label_pc_8480
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_10e40(i32 56)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r0.global-to-local, align 4
  %v3_9f04 = call i32 @function_10d7c(i32 56, i32* null)
  store i32 %v3_9f04, i32* %r1.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 20
  store i32 %v1_9f0c, i32* @r0, align 4
  %v2_9f10 = inttoptr i32 %v1_9f0c to i8*
  %v3_9f10 = call i32 @function_1188c(i8* %v2_9f10, i32 %v3_9f04)
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_9f18 = call i32 @function_10da0(i32 56)
  store i32 %v1_9f18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e04

; uselistorder directives
  uselistorder i32 %v2_9e40, { 1, 0 }
  uselistorder i32 %v1_9e3c, { 1, 0 }
  uselistorder i32 %v0_9e38, { 0, 2, 1 }
  uselistorder i32 %v1_9e20, { 1, 0 }
  uselistorder i32 %v1_9d34, { 1, 0, 2 }
  uselistorder i8 %v4_9c98, { 2, 3, 1, 0 }
  uselistorder i32 %v1_9c8c, { 0, 2, 3, 1 }
  uselistorder i1 %v7_9c84, { 1, 0 }
  uselistorder i32 %v1_9c74, { 1, 0, 2 }
  uselistorder i1 %v7_9c70, { 1, 0 }
  uselistorder i1 %v9_9c68, { 1, 0 }
  uselistorder i32 %v0_9c2c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9b8c, { 1, 0 }
  uselistorder i32 %v2_9b68, { 1, 0, 2 }
  uselistorder i32 %v1_9b60, { 1, 0, 2 }
  uselistorder i32 %v1_9ae8, { 0, 2, 1 }
  uselistorder i32 %v0_9ae8, { 0, 2, 1 }
  uselistorder i32 %v2_9a5c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i8 %v4_9a34, { 2, 3, 1, 0 }
  uselistorder i32 %v1_9a28, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9a20, { 1, 0 }
  uselistorder i32 %v1_9a10, { 1, 0, 2 }
  uselistorder i1 %v7_9a0c, { 1, 0 }
  uselistorder i32 %v0_99cc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_9990, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9974, { 1, 0, 2 }
  uselistorder i32 %v4_996c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9894, { 1, 0 }
  uselistorder i32 %v0_9858, { 1, 0 }
  uselistorder i32 %v0_9d34, { 1, 0 }
  uselistorder i1 %v7_9814, { 1, 0 }
  uselistorder i32 %v0_97fc, { 1, 0 }
  uselistorder i32 %v2_97ec, { 1, 0, 2 }
  uselistorder i32 %v1_97b8, { 1, 0 }
  uselistorder i32 %v0_97b8, { 1, 2, 0, 3 }
  uselistorder i1 %v7_9750, { 1, 0 }
  uselistorder i32 %v5_974c, { 1, 2, 6, 4, 5, 3, 0, 7, 8 }
  uselistorder i32 %v2_9734.v4_971c, { 1, 0, 2 }
  uselistorder i1 %v7_96f8, { 1, 0 }
  uselistorder i32 %v1_95d8, { 1, 0, 2 }
  uselistorder i32 %v1_95d0, { 1, 0 }
  uselistorder i1 %v7_95b8, { 1, 0 }
  uselistorder i32 %v5_95b4, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_959c.v4_9584, { 1, 0, 2 }
  uselistorder i1 %v7_9564, { 1, 0 }
  uselistorder i32 %v0_94cc, { 1, 0 }
  uselistorder i32 %v0_94b4, { 1, 0 }
  uselistorder i32 %v0_94b8, { 1, 0 }
  uselistorder i32 %v1_9490, { 2, 3, 1, 0, 4, 5, 6 }
  uselistorder i32 %v0_945c, { 1, 0 }
  uselistorder i1 %v7_9424, { 0, 2, 1 }
  uselistorder i32 %v1_9448, { 1, 0 }
  uselistorder i32 %v3_9440, { 0, 1, 3, 2, 4, 5, 6 }
  uselistorder i32 %v0_9434, { 1, 0 }
  uselistorder i1 %v7_93a8, { 1, 0 }
  uselistorder i32 %v5_93a4, { 1, 4, 2, 3, 5, 0, 6, 7 }
  uselistorder i32 %v2_938c, { 1, 0, 2 }
  uselistorder i32 %v2_9388, { 1, 0, 2 }
  uselistorder i32 %v1_9374, { 0, 2, 1 }
  uselistorder i32 %v4_936c, { 1, 2, 0, 3 }
  uselistorder i1 %v7_933c, { 1, 0 }
  uselistorder i1 %v7_92d4, { 1, 0 }
  uselistorder i32 %v5_92d0, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_92b8.v4_92a0, { 1, 0, 2 }
  uselistorder i1 %v7_9270, { 1, 0 }
  uselistorder i1 %v7_91fc, { 1, 0 }
  uselistorder i32 %v5_91f8, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_91e0.v4_91c8, { 1, 0, 2 }
  uselistorder i1 %v7_91a4, { 1, 0 }
  uselistorder i1 %v7_9124, { 1, 0 }
  uselistorder i32 %v5_9120, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_9108.v4_90f0, { 1, 0, 2 }
  uselistorder i1 %v7_90d0, { 1, 0 }
  uselistorder i1 %v7_90a4, { 1, 0 }
  uselistorder i1 %v7_907c, { 1, 0 }
  uselistorder i32 %v0_9038, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_9008, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %v2_8fa0, { 1, 0 }
  uselistorder i32 %v2_8f94, { 1, 0 }
  uselistorder i32 %v1_8f94, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v3_8f6c, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v2_8f4c, { 1, 0 }
  uselistorder i32 %v2_8f40, { 1, 0 }
  uselistorder i32 %v1_8f40, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8f34, { 1, 0 }
  uselistorder i32 %v3_8f18, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_8ed4, { 1, 0 }
  uselistorder i32 %v5_8eb0, { 1, 2, 3, 0 }
  uselistorder i1 %v7_8e98, { 1, 0 }
  uselistorder i32 %v3_8e7c, { 1, 0 }
  uselistorder i32 %v0_8e38, { 1, 0 }
  uselistorder i32 %v3_8e04, { 4, 5, 6, 3, 1, 2, 0 }
  uselistorder i32* %v2_8e04, { 1, 0 }
  uselistorder i32 %v0_8e04, { 1, 0 }
  uselistorder i32 %v3_8dec, { 1, 0, 2 }
  uselistorder i32 %v0_8de0, { 1, 2, 0 }
  uselistorder i32 %storemerge49, { 1, 0 }
  uselistorder i1 %v7_8d5c, { 1, 0 }
  uselistorder i32 %v4_8d50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8d20, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v2_8d04, { 1, 0 }
  uselistorder i32 %v1_8d04, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8cf8, { 1, 0 }
  uselistorder i32 %v3_8cdc, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v3_8cc0, { 0, 2, 1 }
  uselistorder i32 %v2_8c98, { 1, 0 }
  uselistorder i32 %v1_8c98, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8c98, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_8c84, { 1, 0 }
  uselistorder i32 %v3_8c64, { 1, 0, 2 }
  uselistorder i32 %v1_8bc8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_8a6c, { 1, 0 }
  uselistorder i32 %v3_884c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_87f8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_87f4, { 1, 0 }
  uselistorder i32 %v3_87e8, { 2, 0, 1 }
  uselistorder i1 %v7_87d4, { 1, 0 }
  uselistorder i32 %v3_87cc, { 3, 2, 1, 0, 4, 5 }
  uselistorder i1 %v7_87a4, { 1, 0 }
  uselistorder i1 %v7_879c, { 1, 0 }
  uselistorder i32 %v3_8780, { 1, 0 }
  uselistorder i32 %v1_8760, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8760, { 0, 2, 1 }
  uselistorder i32 %v2_875c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8748, { 1, 0, 2 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v2_86e8, { 1, 0 }
  uselistorder i32 %v1_86e8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_86dc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v0_86e8, { 4, 1, 2, 5, 3, 0 }
  uselistorder i32 %v3_86cc, { 1, 0 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i1 %v7_861c, { 1, 0 }
  uselistorder i32 %v3_8618, { 3, 2, 1, 0, 4, 5 }
  uselistorder i1 %v7_85f4, { 1, 0 }
  uselistorder i32 %v4_85cc, { 2, 1, 0 }
  uselistorder i8 %v3_85cc, { 11, 12, 13, 14, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_85cc, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8870, { 4, 2, 3, 1, 0, 5 }
  uselistorder i1 %v7_8594, { 1, 0 }
  uselistorder i32 %v1_8594, { 1, 0 }
  uselistorder i1 %v7_858c, { 1, 0 }
  uselistorder i1 %v7_8584, { 1, 0 }
  uselistorder i1 %v7_857c, { 1, 0 }
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i1 %v7_8574, { 1, 0 }
  uselistorder i1 %v7_856c, { 1, 0 }
  uselistorder i32 %v1_8550, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_84f0, { 3, 2, 0, 4, 1, 5, 6 }
  uselistorder i8* %v1_88b0, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_86d0, { 0, 15, 1, 2, 3, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 22, 9, 23, 10, 13, 11, 14, 12, 24 }
  uselistorder i32 %v1_9e44, { 1, 0, 2 }
  uselistorder i32 %stack_var_-20860.0.ph, { 58, 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 63, 3, 68, 67, 4, 66, 65, 5, 62, 6, 79, 78, 7, 77, 76, 8, 75, 74, 9, 73, 72, 10, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 45, 17, 44, 43, 18, 42, 19, 41, 40, 20, 39, 38, 21, 37, 36, 22, 35, 34, 23, 33, 24, 32, 31, 25, 30, 29, 26, 27, 28 }
  uselistorder i32 %stack_var_-20864.0.ph, { 1, 0 }
  uselistorder i32 %v3_84cc, { 1, 0 }
  uselistorder i32 %v0_84cc, { 1, 0, 2 }
  uselistorder i32 %v2_8498, { 1, 0, 2, 3 }
  uselistorder i32 %v3_848c, { 1, 0, 2 }
  uselistorder i32 %v0_8480, { 1, 0 }
  uselistorder i32 %v5_8478, { 1, 0 }
  uselistorder i32 %v0_8444, { 1, 2, 0, 3 }
  uselistorder i32 %v0_83cc, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b4, { 1, 0 }
  uselistorder i32 %v5_83b0, { 1, 0 }
  uselistorder i32 %v2_8370, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_835c, { 4, 5, 19, 15, 16, 17, 2, 3, 18, 0, 1, 14, 10, 11, 12, 13, 20, 8, 9, 7, 6 }
  uselistorder i32 %v0_8350, { 0, 1, 3, 2 }
  uselistorder i1 %v2_82e0, { 1, 0, 2 }
  uselistorder i32* %v11_82b4, { 2, 0, 1, 3 }
  uselistorder i32 %v10_82b0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 32, 31, 30, 28, 27, 29, 26, 25, 12, 23, 22, 9, 8, 7, 24, 6, 38, 37, 36, 34, 35, 33, 43, 42, 41, 40, 39, 5, 4, 3, 2, 1, 0, 44, 45 }
  uselistorder i32 %v2_82a8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_8298, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_8288, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_8260, { 1, 0, 2 }
  uselistorder i8* %tmp168, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_823c, { 0, 28, 32, 33, 34, 35, 1, 30, 2, 3, 31, 36, 17, 18, 4, 27, 5, 6, 29, 37, 7, 26, 8, 9, 38, 10, 11, 24, 25, 39, 12, 21, 13, 22, 23, 40, 14, 15, 19, 20, 41, 42, 43, 16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 %v5_8234, { 1, 0 }
  uselistorder i32 %v6_81bc, { 3, 2, 4, 0, 8, 7, 6, 1, 5, 9 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 42, 40, 41 }
  uselistorder i32* %sb.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 10, 27, 28, 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 29, 30 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 7, 4, 5, 6, 8, 11, 9, 10, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 84, 37, 38, 40, 41, 42, 44, 43, 45, 46, 49, 50, 51, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 150, 151, 152, 153, 154, 155, 156, 157, 158, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 146, 147, 148, 149, 101, 102, 103, 104, 105, 106, 107, 111, 112, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 48, 126, 127, 125, 47, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 112, 113, 114, 75, 76, 77, 78, 79, 81, 82, 80, 83, 84, 86, 85, 87, 88, 89, 90, 91, 92, 93, 94, 38, 95, 96, 36, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 7, 8, 10, 49, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 58, 56, 57, 59, 60, 61, 62, 63, 64, 65, 161, 162, 163, 164, 165, 168, 166, 167, 169, 170, 171, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 153, 154, 155, 156, 157, 158, 159, 160, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 151, 0 }
  uselistorder i32* %r0.global-to-local, { 18, 17, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 33, 30, 29, 31, 207, 34, 202, 208, 73, 44, 35, 37, 36, 38, 40, 39, 42, 41, 45, 43, 46, 48, 47, 49, 51, 50, 53, 52, 57, 54, 55, 56, 58, 59, 61, 60, 63, 62, 64, 65, 66, 68, 67, 69, 70, 71, 74, 72, 76, 75, 77, 79, 78, 80, 83, 81, 82, 85, 84, 89, 86, 87, 88, 90, 92, 91, 94, 93, 95, 97, 96, 99, 98, 100, 101, 103, 102, 104, 105, 106, 6, 108, 107, 110, 109, 111, 113, 112, 114, 115, 116, 118, 117, 120, 119, 121, 123, 122, 124, 126, 125, 128, 127, 129, 131, 130, 132, 135, 133, 134, 137, 136, 139, 138, 140, 142, 141, 143, 146, 145, 148, 147, 149, 151, 150, 5, 152, 154, 153, 156, 155, 158, 157, 161, 159, 160, 163, 162, 164, 318, 317, 319, 15, 320, 321, 323, 322, 325, 324, 326, 328, 327, 329, 331, 330, 332, 333, 334, 16, 335, 337, 336, 338, 340, 339, 341, 14, 342, 343, 344, 345, 166, 165, 168, 167, 169, 171, 170, 172, 174, 173, 175, 177, 176, 178, 179, 181, 180, 183, 182, 186, 184, 185, 189, 187, 188, 192, 190, 191, 193, 195, 194, 196, 198, 197, 200, 199, 201, 203, 204, 4, 205, 210, 206, 209, 3, 211, 212, 2, 213, 214, 215, 216, 217, 218, 219, 220, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 256, 258, 259, 1, 260, 32, 261, 263, 262, 9, 265, 264, 8, 266, 267, 268, 144, 7, 269, 270, 271, 13, 272, 12, 273, 274, 11, 275, 10, 276, 277, 278, 280, 279, 281, 282, 283, 285, 284, 286, 287, 288, 290, 289, 292, 291, 294, 293, 296, 295, 298, 297, 299, 300, 301, 302, 303, 304, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 51, 52, 53, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32* %fp.global-to-local, { 0, 34, 1, 3, 2, 4, 5, 6, 7, 28, 27, 31, 8, 9, 10, 11, 12, 19, 20, 21, 22, 23, 24, 25, 13, 14, 15, 16, 17, 18, 26, 29, 30, 32, 33, 35, 36 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 142, 143, 101, 103, 102, 104, 105, 110, 112, 111, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 126, 127, 119, 120, 121, 122, 123, 124, 125, 128, 0, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 153, 154, 155, 107, 108, 109, 114, 116, 115, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 132, 133, 125, 126, 127, 128, 129, 130, 131, 134, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152 }
  uselistorder i32 ptrtoint (i32* @global_var_176d8.46 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176c8.42 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176c0.40 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176b4.38 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 -20773, { 1, 0, 2, 4, 3, 8, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_176bc.36 to i32), { 2, 4, 3, 5, 1, 6, 0, 7 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 -1452, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24 }
  uselistorder i32 1452, { 1, 0 }
  uselistorder i32 789, { 2, 0, 1, 3 }
  uselistorder i32 1431, { 1, 2, 0, 3 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 51, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 50, { 0, 2, 1, 3 }
  uselistorder i32 49, { 0, 2, 1, 3 }
  uselistorder i32 43, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_1769c.17 to i32), { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_9e04, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9cc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ca8, { 2, 0, 1 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %dec_label_pc_9a74, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %dec_label_pc_9a48, { 2, 0, 1 }
  uselistorder label %.thread41, { 1, 0 }
  uselistorder label %dec_label_pc_99ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_98d8, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_988c, { 1, 0 }
  uselistorder label %dec_label_pc_9864, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9858, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_9614, { 6, 1, 2, 7, 3, 4, 0, 5 }
  uselistorder label %bb201, { 1, 0 }
  uselistorder label %dec_label_pc_9510, { 0, 2, 1 }
  uselistorder label %dec_label_pc_9464, { 1, 0 }
  uselistorder label %dec_label_pc_945c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9434, { 1, 0 }
  uselistorder label %dec_label_pc_93f8, { 1, 0 }
  uselistorder label %bb197, { 1, 0 }
  uselistorder label %bb195, { 1, 0 }
  uselistorder label %bb193, { 1, 0 }
  uselistorder label %dec_label_pc_930c, { 2, 1, 0 }
  uselistorder label %bb191, { 1, 0 }
  uselistorder label %.thread26, { 3, 0, 1, 2 }
  uselistorder label %bb188, { 1, 0 }
  uselistorder label %.thread25, { 3, 0, 1, 2 }
  uselistorder label %bb185, { 1, 0 }
  uselistorder label %.thread24, { 1, 0 }
  uselistorder label %.thread23, { 1, 0 }
  uselistorder label %dec_label_pc_9040, { 1, 0 }
  uselistorder label %dec_label_pc_8ef8, { 1, 0 }
  uselistorder label %dec_label_pc_8dc8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_8da0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d34, { 1, 2, 0 }
  uselistorder label %bb180, { 1, 0 }
  uselistorder label %dec_label_pc_8c44, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 1, 0 }
  uselistorder label %dec_label_pc_8bf0, { 1, 0 }
  uselistorder label %dec_label_pc_8b7c, { 1, 0 }
  uselistorder label %dec_label_pc_8b44, { 1, 0 }
  uselistorder label %dec_label_pc_887c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_87ac, { 7, 8, 9, 10, 11, 1, 12, 13, 2, 14, 15, 3, 16, 0, 6, 4, 5 }
  uselistorder label %dec_label_pc_8774, { 1, 0 }
  uselistorder label %dec_label_pc_85b4, { 5, 0, 1, 2, 6, 3, 4, 7 }
  uselistorder label %dec_label_pc_8530.dec_label_pc_8530_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8508.dec_label_pc_8508_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_84ec, { 3, 0, 2, 1, 4 }
  uselistorder label %dec_label_pc_84ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8480, { 1, 0 }
  uselistorder label %dec_label_pc_8404, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb174, { 1, 0 }
  uselistorder label %bb172, { 1, 0 }
  uselistorder label %dec_label_pc_82bc, { 1, 0 }
  uselistorder label %dec_label_pc_8274, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f20(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f20:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_9f20 = icmp eq i32 %arg1, 0
  br i1 %v2_9f20, label %dec_label_pc_9f68, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %dec_label_pc_9f20
  %v0_9f30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f30 = add i32 %v0_9f30, 4
  %v2_9f30 = inttoptr i32 %v1_9f30 to i8*
  %v3_9f30 = load i8, i8* %v2_9f30, align 1
  %v4_9f30 = zext i8 %v3_9f30 to i32
  %v9_9f34 = icmp eq i32 %v4_9f30, %arg3
  br i1 %v9_9f34, label %dec_label_pc_9f74, label %dec_label_pc_9f58.preheader

dec_label_pc_9f58.preheader:                      ; preds = %dec_label_pc_9f30
  br label %dec_label_pc_9f58

dec_label_pc_9f48:                                ; preds = %dec_label_pc_9f58
  %v1_9f48 = add i32 %v0_9f50.in, 12
  %v2_9f48 = inttoptr i32 %v1_9f48 to i8*
  %v3_9f48 = load i8, i8* %v2_9f48, align 1
  %v4_9f48 = zext i8 %v3_9f48 to i32
  %v9_9f4c = icmp eq i32 %v4_9f48, %arg3
  br i1 %v9_9f4c, label %dec_label_pc_9f74, label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9f58.preheader, %dec_label_pc_9f48
  %v0_9f50.in = phi i32 [ %v0_9f30, %dec_label_pc_9f58.preheader ], [ %v0_9f50, %dec_label_pc_9f48 ]
  %v0_9f58 = phi i32 [ 0, %dec_label_pc_9f58.preheader ], [ %v1_9f58, %dec_label_pc_9f48 ]
  %v0_9f50 = add i32 %v0_9f50.in, 8
  %v1_9f58 = add i32 %v0_9f58, 1
  %v9_9f5c = icmp eq i32 %v1_9f58, %arg1
  store i32 %v0_9f50, i32* %r1.global-to-local, align 4
  br i1 %v9_9f5c, label %dec_label_pc_9f68, label %dec_label_pc_9f48

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f58, %dec_label_pc_9f20, %dec_label_pc_9f74
  %v0_9f68 = phi i32 [ %arg4, %dec_label_pc_9f20 ], [ %v2_9f74, %dec_label_pc_9f74 ], [ %arg4, %dec_label_pc_9f58 ]
  ret i32 %v0_9f68

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9f48, %dec_label_pc_9f30
  %v0_9f74 = phi i32 [ %v0_9f30, %dec_label_pc_9f30 ], [ %v0_9f50, %dec_label_pc_9f48 ]
  %v1_9f74 = inttoptr i32 %v0_9f74 to i32*
  %v2_9f74 = load i32, i32* %v1_9f74, align 4
  br label %dec_label_pc_9f68

; uselistorder directives
  uselistorder i32 %v1_9f58, { 1, 0 }
  uselistorder i32 %v0_9f50, { 1, 0, 2 }
  uselistorder i32 %v0_9f50.in, { 1, 0 }
  uselistorder i32 %v0_9f30, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
}

define i32 @function_9f7c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f7c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_9f7c = icmp eq i32 %arg1, 0
  %v6_9f80 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_9f7c, label %dec_label_pc_9fc4, label %dec_label_pc_9f8c

dec_label_pc_9f8c:                                ; preds = %dec_label_pc_9f7c
  %v0_9f8c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f8c = add i32 %v0_9f8c, 4
  %v2_9f8c = inttoptr i32 %v1_9f8c to i8*
  %v3_9f8c = load i8, i8* %v2_9f8c, align 1
  %v4_9f8c = zext i8 %v3_9f8c to i32
  %v9_9f90 = icmp eq i32 %v4_9f8c, %arg3
  br i1 %v9_9f90, label %dec_label_pc_9fd0, label %dec_label_pc_9fb4.preheader

dec_label_pc_9fb4.preheader:                      ; preds = %dec_label_pc_9f8c
  br label %dec_label_pc_9fb4

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9fb4
  %v1_9fa4 = add i32 %v0_9fac.in, 12
  %v2_9fa4 = inttoptr i32 %v1_9fa4 to i8*
  %v3_9fa4 = load i8, i8* %v2_9fa4, align 1
  %v4_9fa4 = zext i8 %v3_9fa4 to i32
  %v9_9fa8 = icmp eq i32 %v4_9fa4, %arg3
  br i1 %v9_9fa8, label %dec_label_pc_9fd0, label %dec_label_pc_9fb4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fb4.preheader, %dec_label_pc_9fa4
  %v0_9fac.in = phi i32 [ %v0_9f8c, %dec_label_pc_9fb4.preheader ], [ %v0_9fac, %dec_label_pc_9fa4 ]
  %v0_9fb4 = phi i32 [ 0, %dec_label_pc_9fb4.preheader ], [ %v1_9fb4, %dec_label_pc_9fa4 ]
  %v0_9fac = add i32 %v0_9fac.in, 8
  %v1_9fb4 = add i32 %v0_9fb4, 1
  %v9_9fb8 = icmp eq i32 %v1_9fb4, %arg1
  store i32 %v0_9fac, i32* %r1.global-to-local, align 4
  br i1 %v9_9fb8, label %dec_label_pc_9fc4, label %dec_label_pc_9fa4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9fd0, %dec_label_pc_9f7c, %dec_label_pc_9fdc
  %v0_9fc4 = phi i32 [ %arg4, %dec_label_pc_9fd0 ], [ %arg4, %dec_label_pc_9f7c ], [ %v1_9fdc, %dec_label_pc_9fdc ], [ %arg4, %dec_label_pc_9fb4 ]
  store i32 %v6_9f80, i32* @lr, align 4
  ret i32 %v0_9fc4

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_9f8c
  %v0_9fd0 = phi i32 [ %v0_9f8c, %dec_label_pc_9f8c ], [ %v0_9fac, %dec_label_pc_9fa4 ]
  %v1_9fd0 = inttoptr i32 %v0_9fd0 to i32*
  %v2_9fd0 = load i32, i32* %v1_9fd0, align 4
  store i32 %v2_9fd0, i32* @r0, align 4
  %v2_9fd4 = icmp eq i32 %v2_9fd0, 0
  br i1 %v2_9fd4, label %dec_label_pc_9fc4, label %dec_label_pc_9fdc

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fd0
  %v1_9fdc = call i32 @function_12a24(i32 %v2_9fd0)
  br label %dec_label_pc_9fc4

; uselistorder directives
  uselistorder i32 %v1_9fb4, { 1, 0 }
  uselistorder i32 %v0_9fac, { 1, 0, 2 }
  uselistorder i32 %v0_9fac.in, { 1, 0 }
  uselistorder i32 %v0_9f8c, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_9fb4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9fe8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_9fe8 = icmp eq i32 %arg1, 0
  %v3_9fec = load i32, i32* @r4, align 4
  store i32 %v3_9fec, i32* %stack_var_-8, align 4
  %v6_9fec = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_9fe8, label %dec_label_pc_a030, label %dec_label_pc_9ff8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_9fe8
  %v0_9ff8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ff8 = add i32 %v0_9ff8, 4
  %v2_9ff8 = inttoptr i32 %v1_9ff8 to i8*
  %v3_9ff8 = load i8, i8* %v2_9ff8, align 1
  %v4_9ff8 = zext i8 %v3_9ff8 to i32
  %v9_9ffc = icmp eq i32 %v4_9ff8, %arg3
  br i1 %v9_9ffc, label %dec_label_pc_a03c, label %dec_label_pc_a020.preheader

dec_label_pc_a020.preheader:                      ; preds = %dec_label_pc_9ff8
  br label %dec_label_pc_a020

dec_label_pc_a010:                                ; preds = %dec_label_pc_a020
  %v1_a010 = add i32 %v0_a018.in, 12
  %v2_a010 = inttoptr i32 %v1_a010 to i8*
  %v3_a010 = load i8, i8* %v2_a010, align 1
  %v4_a010 = zext i8 %v3_a010 to i32
  %v9_a014 = icmp eq i32 %v4_a010, %arg3
  br i1 %v9_a014, label %dec_label_pc_a03c, label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_a020.preheader, %dec_label_pc_a010
  %v0_a018.in = phi i32 [ %v0_9ff8, %dec_label_pc_a020.preheader ], [ %v0_a018, %dec_label_pc_a010 ]
  %v0_a020 = phi i32 [ 0, %dec_label_pc_a020.preheader ], [ %v1_a020, %dec_label_pc_a010 ]
  %v0_a018 = add i32 %v0_a018.in, 8
  %v1_a020 = add i32 %v0_a020, 1
  store i32 %v1_a020, i32* @lr, align 4
  %v9_a024 = icmp eq i32 %v1_a020, %arg1
  store i32 %v0_a018, i32* %r1.global-to-local, align 4
  br i1 %v9_a024, label %dec_label_pc_a030, label %dec_label_pc_a010

dec_label_pc_a030:                                ; preds = %dec_label_pc_a020, %dec_label_pc_a03c, %dec_label_pc_9fe8, %dec_label_pc_a048
  %v2_a034 = phi i32 [ %v3_9fec, %dec_label_pc_a03c ], [ %v3_9fec, %dec_label_pc_9fe8 ], [ %v2_a034.pre, %dec_label_pc_a048 ], [ %v3_9fec, %dec_label_pc_a020 ]
  %v0_a030 = phi i32 [ %arg4, %dec_label_pc_a03c ], [ %arg4, %dec_label_pc_9fe8 ], [ %v3_a04c, %dec_label_pc_a048 ], [ %arg4, %dec_label_pc_a020 ]
  store i32 %v2_a034, i32* @r4, align 4
  store i32 %v6_9fec, i32* @lr, align 4
  ret i32 %v0_a030

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a010, %dec_label_pc_9ff8
  %v0_a03c = phi i32 [ %v0_9ff8, %dec_label_pc_9ff8 ], [ %v0_a018, %dec_label_pc_a010 ]
  %v1_a03c = inttoptr i32 %v0_a03c to i32*
  %v2_a03c = load i32, i32* %v1_a03c, align 4
  %v2_a040 = icmp eq i32 %v2_a03c, 0
  br i1 %v2_a040, label %dec_label_pc_a030, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_a03c
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_a04c = inttoptr i32 %v2_a03c to i8*
  %v3_a04c = call i32 @function_11988(i8* %v2_a04c, i32 10)
  %v2_a034.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a030

; uselistorder directives
  uselistorder i32 %v1_a020, { 1, 2, 0 }
  uselistorder i32 %v0_a018, { 1, 0, 2 }
  uselistorder i32 %v0_a018.in, { 1, 0 }
  uselistorder i32 %v0_9ff8, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a030, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_a020, { 1, 0 }
}

define i32 @function_a058(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_a058:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_a058 = load i32, i32* @r5, align 4
  %v9_a058 = load i32, i32* @r6, align 4
  %v12_a058 = load i32, i32* @r7, align 4
  %v18_a058 = load i32, i32* @sb, align 4
  %v24_a058 = load i32, i32* @fp, align 4
  %v2_a05c = icmp ugt i32 %arg2, 2
  %v7_a05c = icmp eq i32 %arg2, 3
  store i1 %v7_a05c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_a068 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a068, i32* @r5, align 4
  %v2_a06c = xor i1 %v7_a05c, true
  %v3_a06c = and i1 %v2_a05c, %v2_a06c
  br i1 %v3_a06c, label %dec_label_pc_a07c, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a0c0, %.dec_label_pc_a070_crit_edge, %dec_label_pc_a0b4, %dec_label_pc_a0a4, %dec_label_pc_a07c, %dec_label_pc_a058, %dec_label_pc_a268
  %v1_a078 = phi i32 [ %v1_a078.pre, %.dec_label_pc_a070_crit_edge ], [ %v1_a080, %dec_label_pc_a0c0 ], [ %v1_a080, %dec_label_pc_a0b4 ], [ %v1_a080, %dec_label_pc_a0a4 ], [ %v1_a080, %dec_label_pc_a07c ], [ %v0_a068, %dec_label_pc_a058 ], [ %v0_a26c, %dec_label_pc_a268 ]
  store i32 %v6_a058, i32* @r5, align 4
  store i32 %v9_a058, i32* @r6, align 4
  store i32 %v12_a058, i32* @r7, align 4
  store i32 %v18_a058, i32* @sb, align 4
  store i32 %v24_a058, i32* @fp, align 4
  ret i32 %v1_a078

dec_label_pc_a07c:                                ; preds = %dec_label_pc_a058
  %v1_a07c = inttoptr i32 %v0_a068 to i32*
  %v2_a07c = load i32, i32* %v1_a07c, align 4
  %v1_a080 = and i32 %v2_a07c, 16711680
  store i32 %v1_a080, i32* %r0.global-to-local, align 4
  %v3_a084 = udiv i32 %v2_a07c, 16777216
  %v1_a088 = and i32 %v2_a07c, 65280
  store i32 %v1_a088, i32* %r2.global-to-local, align 4
  %v4_a08c = udiv i32 %v1_a080, 256
  %v5_a08c = or i32 %v4_a08c, %v3_a084
  %v4_a090 = mul nuw nsw i32 %v1_a088, 256
  %v5_a090 = or i32 %v5_a08c, %v4_a090
  store i32 %v5_a090, i32* %r3.global-to-local, align 4
  %v5_a094 = call i32 @llvm.bswap.i32(i32 %v2_a07c)
  store i32 %v5_a094, i32* %r1.global-to-local, align 4
  %v7_a098 = icmp eq i32 %arg2, 4
  store i1 %v7_a098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a098, label %dec_label_pc_a070, label %dec_label_pc_a0a4

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a07c
  %v1_a0a4 = add i32 %v0_a068, 4
  %v2_a0a4 = inttoptr i32 %v1_a0a4 to i8*
  %v3_a0a4 = load i8, i8* %v2_a0a4, align 1
  %v4_a0a4 = zext i8 %v3_a0a4 to i32
  store i32 %v4_a0a4, i32* %r3.global-to-local, align 4
  %v7_a0a8 = icmp eq i32 %arg2, 5
  store i1 %v7_a0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0a8, label %dec_label_pc_a070, label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a0a4
  %v1_a0b4 = add i32 %v0_a068, 5
  %v2_a0b4 = inttoptr i32 %v1_a0b4 to i8*
  %v3_a0b4 = load i8, i8* %v2_a0b4, align 1
  %v4_a0b4 = zext i8 %v3_a0b4 to i32
  store i32 %v4_a0b4, i32* @sb, align 4
  %v2_a0b8 = icmp eq i8 %v3_a0b4, 0
  store i1 %v2_a0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0b8, label %dec_label_pc_a070, label %dec_label_pc_a0c0

dec_label_pc_a0c0:                                ; preds = %dec_label_pc_a0b4
  %v2_a0c4 = mul nuw nsw i32 %v4_a0b4, 5
  store i32 %v2_a0c4, i32* @r7, align 4
  %v1_a0c8 = add i32 %arg2, -6
  store i32 %v1_a0c8, i32* %r3.global-to-local, align 4
  %v3_a0cc = icmp ult i32 %v1_a0c8, %v2_a0c4
  %v9_a0cc = icmp eq i32 %v1_a0c8, %v2_a0c4
  store i1 %v9_a0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a0cc, label %dec_label_pc_a070, label %dec_label_pc_a0d4

dec_label_pc_a0d4:                                ; preds = %dec_label_pc_a0c0
  store i32 %v4_a0b4, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_a0c8, i32* @r6, align 4
  %v2_a0e0 = call i32 @function_1383c(i32 %v4_a0b4, i32 24)
  store i32 %v2_a0e0, i32* @ip, align 4
  %v0_a0ec = load i32, i32* @r7, align 4
  %v1_a0ec = load i32, i32* @r4, align 4
  %v2_a0ec = sub i32 %v1_a0ec, %v0_a0ec
  store i32 %v2_a0ec, i32* @r7, align 4
  %v0_a0f0 = load i32, i32* @r5, align 4
  %v1_a0f0 = add i32 %v0_a0f0, 11
  store i32 %v1_a0f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0f4

dec_label_pc_a0f4:                                ; preds = %dec_label_pc_a0f4, %dec_label_pc_a0d4
  %v1_a0f8 = phi i32 [ %v1_a124, %dec_label_pc_a0f4 ], [ %v2_a0e0, %dec_label_pc_a0d4 ]
  %v0_a0f4 = phi i32 [ %v1_a120, %dec_label_pc_a0f4 ], [ %v1_a0f0, %dec_label_pc_a0d4 ]
  %v1_a0f4 = add i32 %v0_a0f4, -5
  %v2_a0f4 = inttoptr i32 %v1_a0f4 to i32*
  %v3_a0f4 = load i32, i32* %v2_a0f4, align 4
  store i32 %v3_a0f4, i32* %r1.global-to-local, align 4
  %v2_a0f8 = add i32 %v1_a0f8, 16
  %v3_a0f8 = inttoptr i32 %v2_a0f8 to i32*
  store i32 %v3_a0f4, i32* %v3_a0f8, align 4
  %v0_a0fc = load i32, i32* @r6, align 4
  %v1_a0fc = add i32 %v0_a0fc, -5
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r0.global-to-local, align 4
  %v1_a100 = add i32 %v0_a100, -1
  %v2_a100 = inttoptr i32 %v1_a100 to i8*
  %v3_a100 = load i8, i8* %v2_a100, align 1
  %v4_a100 = zext i8 %v3_a100 to i32
  store i32 %v4_a100, i32* %r2.global-to-local, align 4
  %v0_a104 = load i32, i32* @r7, align 4
  %v1_a104 = add i32 %v0_a104, -6
  store i32 %v1_a104, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_a10c = icmp eq i32 %v1_a0fc, %v1_a104
  store i1 %v9_a10c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_a100, i32* @r4, align 4
  %v2_a114 = load i32, i32* @ip, align 4
  %v3_a114 = add i32 %v2_a114, 20
  %v4_a114 = inttoptr i32 %v3_a114 to i8*
  store i8 %v3_a100, i8* %v4_a114, align 1
  %v0_a118 = load i32, i32* %r1.global-to-local, align 4
  %v1_a118 = load i32, i32* @ip, align 4
  %v2_a118 = add i32 %v1_a118, 4
  %v3_a118 = inttoptr i32 %v2_a118 to i32*
  store i32 %v0_a118, i32* %v3_a118, align 4
  %v0_a11c = load i32, i32* @lr, align 4
  %v1_a11c = trunc i32 %v0_a11c to i16
  %v2_a11c = load i32, i32* @ip, align 4
  %v3_a11c = inttoptr i32 %v2_a11c to i16*
  store i16 %v1_a11c, i16* %v3_a11c, align 2
  %v0_a120 = load i32, i32* %r0.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 5
  store i32 %v1_a120, i32* %r0.global-to-local, align 4
  %v0_a124 = load i32, i32* @ip, align 4
  %v1_a124 = add i32 %v0_a124, 24
  store i32 %v1_a124, i32* @ip, align 4
  %v0_a128 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a128, label %dec_label_pc_a12c, label %dec_label_pc_a0f4

dec_label_pc_a12c:                                ; preds = %dec_label_pc_a0f4
  %v0_a12c = load i32, i32* @r6, align 4
  %v2_a12c = icmp eq i32 %v0_a12c, 0
  store i1 %v2_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a12c, label %dec_label_pc_a22c, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a12c
  %v0_a134 = load i32, i32* @r4, align 4
  %v1_a134 = inttoptr i32 %v0_a134 to i8*
  %v2_a134 = load i8, i8* %v1_a134, align 1
  %v3_a134 = zext i8 %v2_a134 to i32
  store i32 %v3_a134, i32* @r5, align 4
  %v2_a138 = icmp eq i8 %v2_a134, 0
  store i1 %v2_a138, i1* %cpsr_z.global-to-local, align 1
  %v0_a13c = load i32, i32* @r7, align 4
  %v1_a13c = add i32 %v0_a13c, -7
  store i32 %v1_a13c, i32* @r8, align 4
  br i1 %v2_a138, label %bb, label %dec_label_pc_a148

bb:                                               ; preds = %dec_label_pc_a134
  store i32 %v3_a134, i32* @r6, align 4
  br label %dec_label_pc_a1fc

dec_label_pc_a148:                                ; preds = %dec_label_pc_a134
  store i32 %v3_a134, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a150 = call i32 @function_1383c(i32 %v3_a134, i32 8)
  store i32 %v2_a150, i32* %r0.global-to-local, align 4
  %v0_a154 = load i32, i32* @r8, align 4
  %v2_a154 = icmp eq i32 %v0_a154, 0
  store i1 %v2_a154, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a150, i32* @r6, align 4
  br i1 %v2_a154, label %dec_label_pc_a22c, label %dec_label_pc_a160

dec_label_pc_a160:                                ; preds = %dec_label_pc_a148
  %v0_a160 = load i32, i32* @r4, align 4
  %v1_a160 = add i32 %v0_a160, 1
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v0_a164 = load i32, i32* @r7, align 4
  %v7_a164 = icmp eq i32 %v0_a164, 8
  store i1 %v7_a164, i1* %cpsr_z.global-to-local, align 1
  %v3_a168 = add i32 %v2_a150, 4
  %v4_a168 = inttoptr i32 %v3_a168 to i8*
  store i8 %v3_a160, i8* %v4_a168, align 1
  %v0_a16c = load i32, i32* @r4, align 4
  %v1_a16c = add i32 %v0_a16c, 1
  store i32 %v1_a16c, i32* %r3.global-to-local, align 4
  %v0_a170 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a170, label %dec_label_pc_a22c, label %dec_label_pc_a174

dec_label_pc_a174:                                ; preds = %dec_label_pc_a160
  %v1_a174 = add i32 %v0_a16c, 2
  %v2_a174 = inttoptr i32 %v1_a174 to i8*
  %v3_a174 = load i8, i8* %v2_a174, align 1
  %v4_a174 = zext i8 %v3_a174 to i32
  store i32 %v4_a174, i32* @r4, align 4
  %v0_a178 = load i32, i32* @r7, align 4
  %v1_a178 = add i32 %v0_a178, -9
  store i32 %v1_a178, i32* @r7, align 4
  %v9_a17c = icmp eq i32 %v1_a178, %v4_a174
  store i1 %v9_a17c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a174, i32* %r1.global-to-local, align 4
  %v5_a184 = icmp slt i32 %v1_a178, %v4_a174
  br i1 %v5_a184, label %dec_label_pc_a22c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_a174
  %v7_a1844711 = add i32 %v0_a16c, 3
  store i32 %v7_a1844711, i32* @r8, align 4
  %v6_a188812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_a188812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_a1d4

dec_label_pc_a198:                                ; preds = %dec_label_pc_a1d4
  %v0_a198 = load i32, i32* @r7, align 4
  %v1_a198 = load i32, i32* @r4, align 4
  %v2_a198 = sub i32 %v0_a198, %v1_a198
  store i32 %v2_a198, i32* %r1.global-to-local, align 4
  %v9_a198 = icmp eq i32 %v0_a198, %v1_a198
  store i1 %v9_a198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a198, label %dec_label_pc_a22c, label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a198
  %v3_a1a0 = mul i32 %v0_a1f4, 8
  store i32 %v3_a1a0, i32* %r3.global-to-local, align 4
  %v1_a1a4 = load i32, i32* @r8, align 4
  %v2_a1a4 = add i32 %v1_a1a4, %v1_a198
  %v3_a1a4 = inttoptr i32 %v2_a1a4 to i8*
  %v4_a1a4 = load i8, i8* %v3_a1a4, align 1
  %v6_a1a4 = zext i8 %v4_a1a4 to i32
  store i32 %v6_a1a4, i32* %r2.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v2_a1a8 = add i32 %v0_a1a8, %v3_a1a0
  store i32 %v2_a1a8, i32* @sl, align 4
  %v1_a1ac = add i32 %v2_a198, -1
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v7_a1ac = icmp eq i32 %v2_a198, 1
  store i1 %v7_a1ac, i1* %cpsr_z.global-to-local, align 1
  %v3_a1b0 = add i32 %v2_a1a8, 4
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i8*
  store i8 %v4_a1a4, i8* %v4_a1b0, align 1
  %v0_a1b4 = load i32, i32* @r4, align 4
  %v1_a1b4 = load i32, i32* @r8, align 4
  %v2_a1b4 = add i32 %v1_a1b4, %v0_a1b4
  store i32 %v2_a1b4, i32* %r1.global-to-local, align 4
  %v0_a1b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1b8, label %dec_label_pc_a22c, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a1a0
  %v1_a1bc = add i32 %v2_a1b4, 1
  %v2_a1bc = inttoptr i32 %v1_a1bc to i8*
  %v3_a1bc = load i8, i8* %v2_a1bc, align 1
  %v4_a1bc = zext i8 %v3_a1bc to i32
  store i32 %v4_a1bc, i32* @r4, align 4
  %v0_a1c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c0 = add i32 %v0_a1c0, -1
  store i32 %v1_a1c0, i32* @r7, align 4
  %v2_a1c4 = sub i32 %v1_a1c0, %v4_a1bc
  %tmp47 = sub i32 0, %v2_a1c4
  %v6_a1c4 = and i32 %v1_a1c0, %tmp47
  %v7_a1c4 = icmp slt i32 %v6_a1c4, 0
  %v8_a1c4 = icmp slt i32 %v2_a1c4, 0
  %v9_a1c4 = icmp eq i32 %v1_a1c0, %v4_a1bc
  store i1 %v9_a1c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1bc, i32* %r1.global-to-local, align 4
  %v2_a1cc = xor i1 %v8_a1c4, %v7_a1c4
  br i1 %v2_a1cc, label %dec_label_pc_a22c, label %dec_label_pc_a1d0

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_a1bc
  %v1_a1d0 = add i32 %v2_a1b4, 2
  store i32 %v1_a1d0, i32* @r8, align 4
  br label %dec_label_pc_a1d4

dec_label_pc_a1d4:                                ; preds = %.thread10, %dec_label_pc_a1d0
  %v0_a1d8 = phi i32 [ %v4_a174, %.thread10 ], [ %v4_a1bc, %dec_label_pc_a1d0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a1d8 = add nuw nsw i32 %v0_a1d8, 1
  store i32 %v2_a1d8, i32* %r0.global-to-local, align 4
  %v2_a1dc = call i32 @function_1383c(i32 %v2_a1d8, i32 1)
  store i32 %v2_a1dc, i32* %r0.global-to-local, align 4
  %v0_a1e0 = load i32, i32* @fp, align 4
  %v1_a1e0 = add i32 %v0_a1e0, 1
  store i32 %v1_a1e0, i32* @fp, align 4
  %v1_a1e4 = load i32, i32* @sl, align 4
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i32*
  store i32 %v2_a1dc, i32* %v2_a1e4, align 4
  %v0_a1e8 = load i32, i32* @r8, align 4
  store i32 %v0_a1e8, i32* %r1.global-to-local, align 4
  %v0_a1ec = load i32, i32* @r4, align 4
  store i32 %v0_a1ec, i32* %r2.global-to-local, align 4
  %v3_a1f0 = call i32 @function_118d4(i32 %v2_a1dc, i32 %v0_a1e8, i32 %v0_a1ec)
  store i32 %v3_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i32, i32* @fp, align 4
  %v1_a1f4 = load i32, i32* @r5, align 4
  %v9_a1f4 = icmp eq i32 %v0_a1f4, %v1_a1f4
  store i1 %v9_a1f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a1f4, label %dec_label_pc_a1fc, label %dec_label_pc_a198

dec_label_pc_a1fc:                                ; preds = %dec_label_pc_a1d4, %bb
  %v0_a1fc = call i32 @function_128f0()
  store i32 %v0_a1fc, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a204 = inttoptr i32 %v0_a1fc to i32*
  store i32 0, i32* %v2_a204, align 4
  %v0_a208 = call i32 @function_121b8()
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v7_a20c = icmp eq i32 %v0_a208, -1
  %. = zext i1 %v7_a20c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_a218 = icmp eq i32 %v0_a208, 0
  store i1 %v2_a218, i1* %cpsr_z.global-to-local, align 1
  %tmp50 = icmp slt i32 %v0_a208, 1
  br i1 %tmp50, label %bb51, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_a1fc
  store i32 1, i32* %r2.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a22c

bb51:                                             ; preds = %dec_label_pc_a1fc
  store i32 %., i32* %r2.global-to-local, align 4
  %v2_a224 = icmp eq i1 %v7_a20c, false
  store i1 %v2_a224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a224, label %dec_label_pc_a274, label %dec_label_pc_a22c

dec_label_pc_a22c:                                ; preds = %dec_label_pc_a1bc, %dec_label_pc_a1a0, %dec_label_pc_a198, %dec_label_pc_a174, %.thread14, %bb51, %dec_label_pc_a160, %dec_label_pc_a148, %dec_label_pc_a12c
  store i32 %v2_a0e0, i32* %r3.global-to-local, align 4
  %v2_a230 = icmp eq i32 %v2_a0e0, 0
  store i1 %v2_a230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a230, label %bb53, label %bb52

bb52:                                             ; preds = %dec_label_pc_a22c
  store i32 %v2_a0e0, i32* %r0.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %dec_label_pc_a22c, %bb52
  store i32 41532, i32* @lr, align 4
  %v1_a238 = xor i1 %v2_a230, true
  call void @__pseudo_cond_branch(i1 %v1_a238, i32 ptrtoint (i32* @global_var_13f88.50 to i32))
  %v0_a23c = load i32, i32* @r6, align 4
  %v2_a23c = icmp eq i32 %v0_a23c, 0
  store i1 %v2_a23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a23c, label %.dec_label_pc_a070_crit_edge, label %dec_label_pc_a244

.dec_label_pc_a070_crit_edge:                     ; preds = %bb53
  %v1_a078.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a070

dec_label_pc_a244:                                ; preds = %bb53
  %v0_a244 = load i32, i32* @r5, align 4
  %v2_a244 = icmp eq i32 %v0_a244, 0
  store i1 %v2_a244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a244, label %dec_label_pc_a268, label %dec_label_pc_a24c

dec_label_pc_a24c:                                ; preds = %dec_label_pc_a244
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a24c
  %v1_a250 = phi i32 [ 0, %dec_label_pc_a24c ], [ %v1_a25c, %dec_label_pc_a250 ]
  %v0_a250 = phi i32 [ %v0_a23c, %dec_label_pc_a24c ], [ %v0_a268.pre, %dec_label_pc_a250 ]
  %v4_a250 = mul i32 %v1_a250, 8
  %v5_a250 = add i32 %v4_a250, %v0_a250
  %v6_a250 = inttoptr i32 %v5_a250 to i32*
  %v7_a250 = load i32, i32* %v6_a250, align 4
  store i32 %v7_a250, i32* %r0.global-to-local, align 4
  %v2_a254 = icmp eq i32 %v7_a250, 0
  store i1 %v2_a254, i1* %cpsr_z.global-to-local, align 1
  store i32 41564, i32* @lr, align 4
  %v1_a258 = xor i1 %v2_a254, true
  call void @__pseudo_cond_branch(i1 %v1_a258, i32 ptrtoint (i32* @global_var_13f88.50 to i32))
  %v0_a25c = load i32, i32* @r4, align 4
  %v1_a25c = add i32 %v0_a25c, 1
  store i32 %v1_a25c, i32* @r4, align 4
  %v0_a260 = load i32, i32* @r5, align 4
  %v9_a260 = icmp eq i32 %v0_a260, %v1_a25c
  store i1 %v9_a260, i1* %cpsr_z.global-to-local, align 1
  %v0_a268.pre = load i32, i32* @r6, align 4
  br i1 %v9_a260, label %dec_label_pc_a268, label %dec_label_pc_a250

dec_label_pc_a268:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a244
  %v0_a268 = phi i32 [ %v0_a23c, %dec_label_pc_a244 ], [ %v0_a268.pre, %dec_label_pc_a250 ]
  store i32 %v0_a268, i32* @r0, align 4
  %v0_a26c = call i32 @function_13f88()
  store i32 %v0_a26c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a070

dec_label_pc_a274:                                ; preds = %bb51
  store i32 ptrtoint (i8** @global_var_20378.52 to i32), i32* %r3.global-to-local, align 4
  %v2_a278 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a278 = zext i8 %v2_a278 to i32
  store i32 %v3_a278, i32* %r0.global-to-local, align 4
  %v2_a27c = icmp eq i8 %v2_a278, 0
  store i1 %v2_a27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a27c, label %dec_label_pc_a2e0, label %dec_label_pc_a284

dec_label_pc_a284:                                ; preds = %dec_label_pc_a274
  store i32 ptrtoint (i32* @global_var_2037c.54 to i32), i32* %r3.global-to-local, align 4
  %v2_a288 = load i32, i32* @global_var_2037c.54, align 4
  store i32 %v2_a288, i32* %r1.global-to-local, align 4
  %v1_a28c = inttoptr i32 %v2_a288 to i32*
  %v2_a28c = load i32, i32* %v1_a28c, align 4
  store i32 %v2_a28c, i32* @ip, align 4
  %v1_a294 = add i32 %v2_a28c, 4
  %v2_a294 = inttoptr i32 %v1_a294 to i8*
  %v3_a294 = load i8, i8* %v2_a294, align 1
  %v4_a294 = zext i8 %v3_a294 to i32
  store i32 %v4_a294, i32* %r3.global-to-local, align 4
  %v9_a298 = icmp eq i8 %v3_a294, %v3_a0a4
  store i1 %v9_a298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a298, label %dec_label_pc_a2c0, label %dec_label_pc_a2a0

dec_label_pc_a2a0:                                ; preds = %dec_label_pc_a284, %dec_label_pc_a2ac
  %v0_a2a0 = phi i32 [ %v1_a2a0, %dec_label_pc_a2ac ], [ 0, %dec_label_pc_a284 ]
  %v1_a2a0 = add i32 %v0_a2a0, 1
  store i32 %v1_a2a0, i32* %r2.global-to-local, align 4
  %v9_a2a4 = icmp eq i32 %v1_a2a0, %v3_a278
  store i1 %v9_a2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2a4, label %dec_label_pc_a2e0, label %dec_label_pc_a2ac

dec_label_pc_a2ac:                                ; preds = %dec_label_pc_a2a0
  %v4_a2ac = mul i32 %v1_a2a0, 4
  %v5_a2ac = add i32 %v4_a2ac, %v2_a288
  %v6_a2ac = inttoptr i32 %v5_a2ac to i32*
  %v7_a2ac = load i32, i32* %v6_a2ac, align 4
  store i32 %v7_a2ac, i32* @ip, align 4
  %v1_a2b4 = add i32 %v7_a2ac, 4
  %v2_a2b4 = inttoptr i32 %v1_a2b4 to i8*
  %v3_a2b4 = load i8, i8* %v2_a2b4, align 1
  %v4_a2b4 = zext i8 %v3_a2b4 to i32
  store i32 %v4_a2b4, i32* %r3.global-to-local, align 4
  %v9_a2b8 = icmp eq i8 %v3_a2b4, %v3_a0a4
  store i1 %v9_a2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2b8, label %dec_label_pc_a2c0, label %dec_label_pc_a2a0

dec_label_pc_a2c0:                                ; preds = %dec_label_pc_a2ac, %dec_label_pc_a284
  %v0_a2d4 = phi i32 [ %v2_a28c, %dec_label_pc_a284 ], [ %v7_a2ac, %dec_label_pc_a2ac ]
  store i32 %v5_a094, i32* %r0.global-to-local, align 4
  %v0_a2c8 = load i32, i32* @sb, align 4
  store i32 %v0_a2c8, i32* %r1.global-to-local, align 4
  store i32 %v2_a0e0, i32* %r2.global-to-local, align 4
  %v0_a2d0 = load i32, i32* @r5, align 4
  store i32 %v0_a2d0, i32* %r3.global-to-local, align 4
  %v1_a2d4 = inttoptr i32 %v0_a2d4 to i32*
  %v2_a2d4 = load i32, i32* %v1_a2d4, align 4
  store i32 %v2_a2d4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_a2d4)
  br label %dec_label_pc_a2e0

dec_label_pc_a2e0:                                ; preds = %dec_label_pc_a2a0, %dec_label_pc_a274, %dec_label_pc_a2c0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a2e4 = call i32 @function_1432c(i32 0)
  store i32 %v1_a2e4, i32* %r0.global-to-local, align 4
  %v0_a2e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a2e8, label %bb55, label %.thread17

bb55:                                             ; preds = %dec_label_pc_a2e0
  %v1_a2e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a2e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_a2e8 = sub i32 32, %v3_a2e8
  %v2_a2ec = load i32, i32* @ip, align 4
  %v4_a2ec = lshr i32 %v2_a2ec, %v3_a2e8
  %v6_a2ec = shl i32 %v2_a2ec, %v5_a2e8
  %v7_a2ec = or i32 %v6_a2ec, %v4_a2ec
  %v9_a2ec = and i32 %v7_a2ec, %v1_a2e8
  store i32 %v9_a2ec, i32* %r0.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_a2e0, %bb55
  %v10_a2ec = phi i32 [ %v1_a2e4, %dec_label_pc_a2e0 ], [ %v9_a2ec, %bb55 ]
  ret i32 %v10_a2ec

; uselistorder directives
  uselistorder i1 %v9_a2b8, { 1, 0 }
  uselistorder i32 %v1_a2a0, { 1, 2, 3, 0 }
  uselistorder i1 %v9_a298, { 1, 0 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v1_a25c, { 1, 2, 0 }
  uselistorder i1 %v2_a230, { 0, 2, 1 }
  uselistorder i1 %v2_a224, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_a20c, { 1, 0 }
  uselistorder i32 %v0_a208, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a1f4, { 1, 0 }
  uselistorder i32 %v2_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1c0, { 2, 0, 1, 3 }
  uselistorder i32 %v4_a1bc, { 0, 2, 1, 3 }
  uselistorder i32 %v3_a1a0, { 1, 0 }
  uselistorder i32 %v3_a134, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a124, { 1, 0 }
  uselistorder i32 %v1_a120, { 1, 0 }
  uselistorder i32 %v2_a0e0, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v4_a0b4, { 1, 0, 2, 3 }
  uselistorder i32 %v5_a094, { 1, 0 }
  uselistorder i32 %v1_a080, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_a07c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a068, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 1, 2, 3, 4, 6, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 4, 2, 6, 5, 7, 8 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 6, 7, 3, 4, 5, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 6, 4, 3, 5, 9, 7, 22, 8, 23, 21, 11, 10, 17, 18, 12, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 0, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %dec_label_pc_a2e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a2a0, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_a22c, { 5, 4, 0, 1, 2, 3, 6, 7, 8 }
  uselistorder label %dec_label_pc_a1d4, { 1, 0 }
  uselistorder label %dec_label_pc_a070, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_a2f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_a2f0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_a2f0 = load i32, i32* @r4, align 4
  store i32 %v3_a2f0, i32* %stack_var_-24, align 4
  %v6_a2f0 = load i32, i32* @r5, align 4
  %v9_a2f0 = load i32, i32* @r6, align 4
  %v12_a2f0 = load i32, i32* @r7, align 4
  %v15_a2f0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a2fc = call i32 @function_1383c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_20378.52 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_2037c.54 to i32), i32* @r6, align 4
  store i32 52284, i32* %r2.global-to-local, align 4
  store i32 %v2_a2fc, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_20379.58 to i32), i32* %r1.global-to-local, align 4
  %v2_a31c = load i32, i32* @global_var_2037c.54, align 4
  %v2_a320 = inttoptr i32 %v2_a2fc to i32*
  store i32 52284, i32* %v2_a320, align 4
  %v3_a324 = load i32, i32* @r4, align 4
  %v4_a324 = add i32 %v3_a324, 4
  %v5_a324 = inttoptr i32 %v4_a324 to i8*
  store i8 0, i8* %v5_a324, align 1
  %v0_a328 = load i32, i32* %r1.global-to-local, align 4
  %v3_a328 = mul i32 %v0_a328, 4
  store i32 %v3_a328, i32* %r1.global-to-local, align 4
  %v5_a32c = inttoptr i32 %v2_a31c to i32*
  %v6_a32c = call i32 @function_13970(i32* %v5_a32c, i32 %v3_a328, i32 52284, i32 0)
  %v2_a330 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a330 = zext i8 %v2_a330 to i32
  store i32 %v6_a32c, i32* %r2.global-to-local, align 4
  %v0_a338 = load i32, i32* @r4, align 4
  %v5_a338 = mul nuw nsw i32 %v3_a330, 4
  %v6_a338 = add i32 %v5_a338, %v6_a32c
  %v7_a338 = inttoptr i32 %v6_a338 to i32*
  store i32 %v0_a338, i32* %v7_a338, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_20379.58 to i32), i32* %r3.global-to-local, align 4
  %v1_a348 = load i32, i32* @r6, align 4
  %v2_a348 = inttoptr i32 %v1_a348 to i32*
  store i32 %v6_a32c, i32* %v2_a348, align 4
  %v0_a34c = load i32, i32* %r3.global-to-local, align 4
  %v1_a34c = trunc i32 %v0_a34c to i8
  %v2_a34c = load i32, i32* @r5, align 4
  %v3_a34c = inttoptr i32 %v2_a34c to i8*
  store i8 %v1_a34c, i8* %v3_a34c, align 1
  %v2_a350 = call i32 @function_1383c(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_d208.60 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_a350, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_20379.58 to i32), i32* %r1.global-to-local, align 4
  %v2_a368 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a36c = inttoptr i32 %v2_a350 to i32*
  store i32 ptrtoint (i32* @global_var_d208.60 to i32), i32* %v2_a36c, align 4
  %v0_a370 = load i32, i32* @r8, align 4
  %v1_a370 = trunc i32 %v0_a370 to i8
  %v2_a370 = load i32, i32* @r4, align 4
  %v3_a370 = add i32 %v2_a370, 4
  %v4_a370 = inttoptr i32 %v3_a370 to i8*
  store i8 %v1_a370, i8* %v4_a370, align 1
  %v0_a374 = load i32, i32* %r1.global-to-local, align 4
  %v3_a374 = mul i32 %v0_a374, 4
  store i32 %v3_a374, i32* %r1.global-to-local, align 4
  %v4_a378 = inttoptr i32 %v2_a368 to i32*
  %v5_a378 = call i32 @function_13970(i32* %v4_a378, i32 %v3_a374, i32 %v6_a32c, i32 ptrtoint (i32* @global_var_d208.60 to i32))
  %v2_a37c = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a37c = zext i8 %v2_a37c to i32
  store i32 %v3_a37c, i32* %r3.global-to-local, align 4
  store i32 %v5_a378, i32* %r2.global-to-local, align 4
  %v0_a384 = load i32, i32* @r4, align 4
  %v5_a384 = mul nuw nsw i32 %v3_a37c, 4
  %v6_a384 = add i32 %v5_a384, %v5_a378
  %v7_a384 = inttoptr i32 %v6_a384 to i32*
  store i32 %v0_a384, i32* %v7_a384, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a38c = load i32, i32* %r3.global-to-local, align 4
  %v1_a38c = load i32, i32* @r8, align 4
  %v2_a38c = add i32 %v1_a38c, %v0_a38c
  store i32 %v2_a38c, i32* %r3.global-to-local, align 4
  %v1_a394 = trunc i32 %v2_a38c to i8
  %v2_a394 = load i32, i32* @r5, align 4
  %v3_a394 = inttoptr i32 %v2_a394 to i8*
  store i8 %v1_a394, i8* %v3_a394, align 1
  %v0_a398 = load i32, i32* %r2.global-to-local, align 4
  %v1_a398 = load i32, i32* @r6, align 4
  %v2_a398 = inttoptr i32 %v1_a398 to i32*
  store i32 %v0_a398, i32* %v2_a398, align 4
  %v2_a39c = call i32 @function_1383c(i32 %v1_a38c, i32 8)
  %v2_a3a0 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a3a0 = zext i8 %v2_a3a0 to i32
  store i32 ptrtoint (i32* @global_var_d674.62 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a39c, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_a3b0 = load i32, i32* @r8, align 4
  %v2_a3b0 = add i32 %v1_a3b0, %v3_a3a0
  store i32 %v2_a3b0, i32* %r1.global-to-local, align 4
  %v2_a3b4 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a3b8 = inttoptr i32 %v2_a39c to i32*
  store i32 ptrtoint (i32* @global_var_d674.62 to i32), i32* %v2_a3b8, align 4
  %v3_a3bc = load i32, i32* @r4, align 4
  %v4_a3bc = add i32 %v3_a3bc, 4
  %v5_a3bc = inttoptr i32 %v4_a3bc to i8*
  store i8 2, i8* %v5_a3bc, align 1
  %v0_a3c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a3c0 = mul i32 %v0_a3c0, 4
  store i32 %v3_a3c0, i32* %r1.global-to-local, align 4
  %v5_a3c4 = inttoptr i32 %v2_a3b4 to i32*
  %v6_a3c4 = call i32 @function_13970(i32* %v5_a3c4, i32 %v3_a3c0, i32 ptrtoint (i32* @global_var_d674.62 to i32), i32 2)
  %v2_a3c8 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a3c8 = zext i8 %v2_a3c8 to i32
  store i32 %v3_a3c8, i32* %r3.global-to-local, align 4
  store i32 %v6_a3c4, i32* %r2.global-to-local, align 4
  %v0_a3d0 = load i32, i32* @r4, align 4
  %v5_a3d0 = mul nuw nsw i32 %v3_a3c8, 4
  %v6_a3d0 = add i32 %v5_a3d0, %v6_a3c4
  %v7_a3d0 = inttoptr i32 %v6_a3d0 to i32*
  store i32 %v0_a3d0, i32* %v7_a3d0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a3d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a3d8 = load i32, i32* @r8, align 4
  %v2_a3d8 = add i32 %v1_a3d8, %v0_a3d8
  store i32 %v2_a3d8, i32* %r3.global-to-local, align 4
  %v1_a3e0 = load i32, i32* @r6, align 4
  %v2_a3e0 = inttoptr i32 %v1_a3e0 to i32*
  store i32 %v6_a3c4, i32* %v2_a3e0, align 4
  %v0_a3e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a3e4 = trunc i32 %v0_a3e4 to i8
  %v2_a3e4 = load i32, i32* @r5, align 4
  %v3_a3e4 = inttoptr i32 %v2_a3e4 to i8*
  store i8 %v1_a3e4, i8* %v3_a3e4, align 1
  %v2_a3e8 = call i32 @function_1383c(i32 %v1_a3d8, i32 8)
  %v2_a3ec = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a3ec = zext i8 %v2_a3ec to i32
  store i32 ptrtoint (i32* @global_var_c97c.64 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_a3e8, i32* @r4, align 4
  %v1_a3fc = load i32, i32* @r8, align 4
  %v2_a3fc = add i32 %v1_a3fc, %v3_a3ec
  store i32 %v2_a3fc, i32* %r1.global-to-local, align 4
  %v2_a400 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a404 = inttoptr i32 %v2_a3e8 to i32*
  store i32 ptrtoint (i32* @global_var_c97c.64 to i32), i32* %v2_a404, align 4
  %v0_a408 = load i32, i32* @r7, align 4
  %v1_a408 = trunc i32 %v0_a408 to i8
  %v2_a408 = load i32, i32* @r4, align 4
  %v3_a408 = add i32 %v2_a408, 4
  %v4_a408 = inttoptr i32 %v3_a408 to i8*
  store i8 %v1_a408, i8* %v4_a408, align 1
  %v0_a40c = load i32, i32* %r1.global-to-local, align 4
  %v3_a40c = mul i32 %v0_a40c, 4
  store i32 %v3_a40c, i32* %r1.global-to-local, align 4
  %v4_a410 = inttoptr i32 %v2_a400 to i32*
  %v5_a410 = call i32 @function_13970(i32* %v4_a410, i32 %v3_a40c, i32 %v6_a3c4, i32 ptrtoint (i32* @global_var_c97c.64 to i32))
  %v2_a414 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a414 = zext i8 %v2_a414 to i32
  store i32 %v3_a414, i32* %r3.global-to-local, align 4
  store i32 %v5_a410, i32* %r2.global-to-local, align 4
  %v0_a41c = load i32, i32* @r4, align 4
  %v5_a41c = mul nuw nsw i32 %v3_a414, 4
  %v6_a41c = add i32 %v5_a41c, %v5_a410
  %v7_a41c = inttoptr i32 %v6_a41c to i32*
  store i32 %v0_a41c, i32* %v7_a41c, align 4
  %v0_a420 = load i32, i32* @r7, align 4
  store i32 %v0_a420, i32* %r1.global-to-local, align 4
  %v0_a424 = load i32, i32* %r3.global-to-local, align 4
  %v1_a424 = load i32, i32* @r8, align 4
  %v2_a424 = add i32 %v1_a424, %v0_a424
  store i32 %v2_a424, i32* %r3.global-to-local, align 4
  %v1_a42c = trunc i32 %v2_a424 to i8
  %v2_a42c = load i32, i32* @r5, align 4
  %v3_a42c = inttoptr i32 %v2_a42c to i8*
  store i8 %v1_a42c, i8* %v3_a42c, align 1
  %v0_a430 = load i32, i32* %r2.global-to-local, align 4
  %v1_a430 = load i32, i32* @r6, align 4
  %v2_a430 = inttoptr i32 %v1_a430 to i32*
  store i32 %v0_a430, i32* %v2_a430, align 4
  %v2_a434 = call i32 @function_1383c(i32 %v1_a424, i32 %v0_a420)
  %v2_a438 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a438 = zext i8 %v2_a438 to i32
  store i32 ptrtoint (i32* @global_var_c2a4.66 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a434, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_a448 = load i32, i32* @r8, align 4
  %v2_a448 = add i32 %v1_a448, %v3_a438
  store i32 %v2_a448, i32* %r1.global-to-local, align 4
  %v2_a44c = load i32, i32* @global_var_2037c.54, align 4
  %v2_a450 = inttoptr i32 %v2_a434 to i32*
  store i32 ptrtoint (i32* @global_var_c2a4.66 to i32), i32* %v2_a450, align 4
  %v3_a454 = load i32, i32* @r4, align 4
  %v4_a454 = add i32 %v3_a454, 4
  %v5_a454 = inttoptr i32 %v4_a454 to i8*
  store i8 3, i8* %v5_a454, align 1
  %v0_a458 = load i32, i32* %r1.global-to-local, align 4
  %v3_a458 = mul i32 %v0_a458, 4
  store i32 %v3_a458, i32* %r1.global-to-local, align 4
  %v5_a45c = inttoptr i32 %v2_a44c to i32*
  %v6_a45c = call i32 @function_13970(i32* %v5_a45c, i32 %v3_a458, i32 ptrtoint (i32* @global_var_c2a4.66 to i32), i32 3)
  %v2_a460 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a460 = zext i8 %v2_a460 to i32
  store i32 %v3_a460, i32* %r3.global-to-local, align 4
  store i32 %v6_a45c, i32* %r2.global-to-local, align 4
  %v0_a468 = load i32, i32* @r4, align 4
  %v5_a468 = mul nuw nsw i32 %v3_a460, 4
  %v6_a468 = add i32 %v5_a468, %v6_a45c
  %v7_a468 = inttoptr i32 %v6_a468 to i32*
  store i32 %v0_a468, i32* %v7_a468, align 4
  %v0_a46c = load i32, i32* @r7, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  %v0_a470 = load i32, i32* %r3.global-to-local, align 4
  %v1_a470 = load i32, i32* @r8, align 4
  %v2_a470 = add i32 %v1_a470, %v0_a470
  store i32 %v2_a470, i32* %r3.global-to-local, align 4
  %v1_a478 = trunc i32 %v2_a470 to i8
  %v2_a478 = load i32, i32* @r5, align 4
  %v3_a478 = inttoptr i32 %v2_a478 to i8*
  store i8 %v1_a478, i8* %v3_a478, align 1
  %v0_a47c = load i32, i32* %r2.global-to-local, align 4
  %v1_a47c = load i32, i32* @r6, align 4
  %v2_a47c = inttoptr i32 %v1_a47c to i32*
  store i32 %v0_a47c, i32* %v2_a47c, align 4
  %v2_a480 = call i32 @function_1383c(i32 %v1_a470, i32 %v0_a46c)
  %v2_a484 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a484 = zext i8 %v2_a484 to i32
  store i32 ptrtoint (i32* @global_var_bb80.68 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a480, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_a494 = load i32, i32* @r8, align 4
  %v2_a494 = add i32 %v1_a494, %v3_a484
  store i32 %v2_a494, i32* %r1.global-to-local, align 4
  %v2_a498 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a49c = inttoptr i32 %v2_a480 to i32*
  store i32 ptrtoint (i32* @global_var_bb80.68 to i32), i32* %v2_a49c, align 4
  %v3_a4a0 = load i32, i32* @r4, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 4
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i8*
  store i8 4, i8* %v5_a4a0, align 1
  %v0_a4a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a4 = mul i32 %v0_a4a4, 4
  store i32 %v3_a4a4, i32* %r1.global-to-local, align 4
  %v5_a4a8 = inttoptr i32 %v2_a498 to i32*
  %v6_a4a8 = call i32 @function_13970(i32* %v5_a4a8, i32 %v3_a4a4, i32 ptrtoint (i32* @global_var_bb80.68 to i32), i32 4)
  %v2_a4ac = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a4ac = zext i8 %v2_a4ac to i32
  store i32 %v3_a4ac, i32* %r3.global-to-local, align 4
  store i32 %v6_a4a8, i32* %r2.global-to-local, align 4
  %v0_a4b4 = load i32, i32* @r4, align 4
  %v5_a4b4 = mul nuw nsw i32 %v3_a4ac, 4
  %v6_a4b4 = add i32 %v5_a4b4, %v6_a4a8
  %v7_a4b4 = inttoptr i32 %v6_a4b4 to i32*
  store i32 %v0_a4b4, i32* %v7_a4b4, align 4
  %v0_a4b8 = load i32, i32* @r7, align 4
  store i32 %v0_a4b8, i32* %r1.global-to-local, align 4
  %v0_a4bc = load i32, i32* %r3.global-to-local, align 4
  %v1_a4bc = load i32, i32* @r8, align 4
  %v2_a4bc = add i32 %v1_a4bc, %v0_a4bc
  store i32 %v2_a4bc, i32* %r3.global-to-local, align 4
  %v1_a4c4 = trunc i32 %v2_a4bc to i8
  %v2_a4c4 = load i32, i32* @r5, align 4
  %v3_a4c4 = inttoptr i32 %v2_a4c4 to i8*
  store i8 %v1_a4c4, i8* %v3_a4c4, align 1
  %v0_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4c8 = load i32, i32* @r6, align 4
  %v2_a4c8 = inttoptr i32 %v1_a4c8 to i32*
  store i32 %v0_a4c8, i32* %v2_a4c8, align 4
  %v2_a4cc = call i32 @function_1383c(i32 %v1_a4bc, i32 %v0_a4b8)
  %v2_a4d0 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a4d0 = zext i8 %v2_a4d0 to i32
  store i32 ptrtoint (i32* @global_var_b354.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4cc, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_a4e0 = load i32, i32* @r8, align 4
  %v2_a4e0 = add i32 %v1_a4e0, %v3_a4d0
  store i32 %v2_a4e0, i32* %r1.global-to-local, align 4
  %v2_a4e4 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a4e8 = inttoptr i32 %v2_a4cc to i32*
  store i32 ptrtoint (i32* @global_var_b354.70 to i32), i32* %v2_a4e8, align 4
  %v3_a4ec = load i32, i32* @r4, align 4
  %v4_a4ec = add i32 %v3_a4ec, 4
  %v5_a4ec = inttoptr i32 %v4_a4ec to i8*
  store i8 5, i8* %v5_a4ec, align 1
  %v0_a4f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4f0 = mul i32 %v0_a4f0, 4
  store i32 %v3_a4f0, i32* %r1.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v2_a4e4 to i32*
  %v6_a4f4 = call i32 @function_13970(i32* %v5_a4f4, i32 %v3_a4f0, i32 ptrtoint (i32* @global_var_b354.70 to i32), i32 5)
  %v2_a4f8 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a4f8 = zext i8 %v2_a4f8 to i32
  store i32 %v3_a4f8, i32* %r3.global-to-local, align 4
  store i32 %v6_a4f4, i32* %r2.global-to-local, align 4
  %v0_a500 = load i32, i32* @r4, align 4
  %v5_a500 = mul nuw nsw i32 %v3_a4f8, 4
  %v6_a500 = add i32 %v5_a500, %v6_a4f4
  %v7_a500 = inttoptr i32 %v6_a500 to i32*
  store i32 %v0_a500, i32* %v7_a500, align 4
  %v0_a504 = load i32, i32* @r7, align 4
  store i32 %v0_a504, i32* %r1.global-to-local, align 4
  %v0_a508 = load i32, i32* %r3.global-to-local, align 4
  %v1_a508 = load i32, i32* @r8, align 4
  %v2_a508 = add i32 %v1_a508, %v0_a508
  store i32 %v2_a508, i32* %r3.global-to-local, align 4
  %v1_a510 = trunc i32 %v2_a508 to i8
  %v2_a510 = load i32, i32* @r5, align 4
  %v3_a510 = inttoptr i32 %v2_a510 to i8*
  store i8 %v1_a510, i8* %v3_a510, align 1
  %v0_a514 = load i32, i32* %r2.global-to-local, align 4
  %v1_a514 = load i32, i32* @r6, align 4
  %v2_a514 = inttoptr i32 %v1_a514 to i32*
  store i32 %v0_a514, i32* %v2_a514, align 4
  %v2_a518 = call i32 @function_1383c(i32 %v1_a508, i32 %v0_a504)
  %v2_a51c = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a51c = zext i8 %v2_a51c to i32
  store i32 ptrtoint (i32* @global_var_acf4.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a518, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_a52c = load i32, i32* @r8, align 4
  %v2_a52c = add i32 %v1_a52c, %v3_a51c
  store i32 %v2_a52c, i32* %r1.global-to-local, align 4
  %v2_a530 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a534 = inttoptr i32 %v2_a518 to i32*
  store i32 ptrtoint (i32* @global_var_acf4.72 to i32), i32* %v2_a534, align 4
  %v3_a538 = load i32, i32* @r4, align 4
  %v4_a538 = add i32 %v3_a538, 4
  %v5_a538 = inttoptr i32 %v4_a538 to i8*
  store i8 6, i8* %v5_a538, align 1
  %v0_a53c = load i32, i32* %r1.global-to-local, align 4
  %v3_a53c = mul i32 %v0_a53c, 4
  store i32 %v3_a53c, i32* %r1.global-to-local, align 4
  %v5_a540 = inttoptr i32 %v2_a530 to i32*
  %v6_a540 = call i32 @function_13970(i32* %v5_a540, i32 %v3_a53c, i32 ptrtoint (i32* @global_var_acf4.72 to i32), i32 6)
  %v2_a544 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a544 = zext i8 %v2_a544 to i32
  store i32 %v3_a544, i32* %r3.global-to-local, align 4
  store i32 %v6_a540, i32* %r2.global-to-local, align 4
  %v0_a54c = load i32, i32* @r4, align 4
  %v5_a54c = mul nuw nsw i32 %v3_a544, 4
  %v6_a54c = add i32 %v5_a54c, %v6_a540
  %v7_a54c = inttoptr i32 %v6_a54c to i32*
  store i32 %v0_a54c, i32* %v7_a54c, align 4
  %v0_a550 = load i32, i32* @r7, align 4
  store i32 %v0_a550, i32* %r1.global-to-local, align 4
  %v0_a554 = load i32, i32* %r3.global-to-local, align 4
  %v1_a554 = load i32, i32* @r8, align 4
  %v2_a554 = add i32 %v1_a554, %v0_a554
  store i32 %v2_a554, i32* %r3.global-to-local, align 4
  %v1_a55c = trunc i32 %v2_a554 to i8
  %v2_a55c = load i32, i32* @r5, align 4
  %v3_a55c = inttoptr i32 %v2_a55c to i8*
  store i8 %v1_a55c, i8* %v3_a55c, align 1
  %v0_a560 = load i32, i32* %r2.global-to-local, align 4
  %v1_a560 = load i32, i32* @r6, align 4
  %v2_a560 = inttoptr i32 %v1_a560 to i32*
  store i32 %v0_a560, i32* %v2_a560, align 4
  %v2_a564 = call i32 @function_1383c(i32 %v1_a554, i32 %v0_a550)
  %v2_a568 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a568 = zext i8 %v2_a568 to i32
  store i32 ptrtoint (i32* @global_var_a62c.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_a578 = load i32, i32* @r8, align 4
  %v2_a578 = add i32 %v1_a578, %v3_a568
  store i32 %v2_a578, i32* %r1.global-to-local, align 4
  %v2_a57c = load i32, i32* @global_var_2037c.54, align 4
  %v2_a580 = inttoptr i32 %v2_a564 to i32*
  store i32 ptrtoint (i32* @global_var_a62c.74 to i32), i32* %v2_a580, align 4
  %v3_a584 = load i32, i32* @r4, align 4
  %v4_a584 = add i32 %v3_a584, 4
  %v5_a584 = inttoptr i32 %v4_a584 to i8*
  store i8 7, i8* %v5_a584, align 1
  %v0_a588 = load i32, i32* %r1.global-to-local, align 4
  %v3_a588 = mul i32 %v0_a588, 4
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v5_a58c = inttoptr i32 %v2_a57c to i32*
  %v6_a58c = call i32 @function_13970(i32* %v5_a58c, i32 %v3_a588, i32 ptrtoint (i32* @global_var_a62c.74 to i32), i32 7)
  %v2_a590 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a590 = zext i8 %v2_a590 to i32
  store i32 %v3_a590, i32* %r3.global-to-local, align 4
  store i32 %v6_a58c, i32* %r2.global-to-local, align 4
  %v0_a598 = load i32, i32* @r4, align 4
  %v5_a598 = mul nuw nsw i32 %v3_a590, 4
  %v6_a598 = add i32 %v5_a598, %v6_a58c
  %v7_a598 = inttoptr i32 %v6_a598 to i32*
  store i32 %v0_a598, i32* %v7_a598, align 4
  %v0_a59c = load i32, i32* @r7, align 4
  store i32 %v0_a59c, i32* %r1.global-to-local, align 4
  %v0_a5a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5a0 = load i32, i32* @r8, align 4
  %v2_a5a0 = add i32 %v1_a5a0, %v0_a5a0
  store i32 %v2_a5a0, i32* %r3.global-to-local, align 4
  %v1_a5a8 = trunc i32 %v2_a5a0 to i8
  %v2_a5a8 = load i32, i32* @r5, align 4
  %v3_a5a8 = inttoptr i32 %v2_a5a8 to i8*
  store i8 %v1_a5a8, i8* %v3_a5a8, align 1
  %v0_a5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a5ac = load i32, i32* @r6, align 4
  %v2_a5ac = inttoptr i32 %v1_a5ac to i32*
  store i32 %v0_a5ac, i32* %v2_a5ac, align 4
  %v2_a5b0 = call i32 @function_1383c(i32 %v1_a5a0, i32 %v0_a59c)
  %v2_a5b4 = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a5b4 = zext i8 %v2_a5b4 to i32
  store i32 ptrtoint (i32* @global_var_8190.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5b0, i32* @r4, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_a5c4 = load i32, i32* @r8, align 4
  %v2_a5c4 = add i32 %v1_a5c4, %v3_a5b4
  store i32 %v2_a5c4, i32* %r1.global-to-local, align 4
  %v2_a5c8 = load i32, i32* @global_var_2037c.54, align 4
  %v2_a5cc = inttoptr i32 %v2_a5b0 to i32*
  store i32 ptrtoint (i32* @global_var_8190.76 to i32), i32* %v2_a5cc, align 4
  %v3_a5d0 = load i32, i32* @r4, align 4
  %v4_a5d0 = add i32 %v3_a5d0, 4
  %v5_a5d0 = inttoptr i32 %v4_a5d0 to i8*
  store i8 9, i8* %v5_a5d0, align 1
  %v0_a5d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a5d4 = mul i32 %v0_a5d4, 4
  store i32 %v3_a5d4, i32* %r1.global-to-local, align 4
  %v5_a5d8 = inttoptr i32 %v2_a5c8 to i32*
  %v6_a5d8 = call i32 @function_13970(i32* %v5_a5d8, i32 %v3_a5d4, i32 ptrtoint (i32* @global_var_8190.76 to i32), i32 9)
  %v2_a5dc = load i8, i8* bitcast (i8** @global_var_20378.52 to i8*), align 4
  %v3_a5dc = zext i8 %v2_a5dc to i32
  store i32 %v3_a5dc, i32* %r3.global-to-local, align 4
  %v1_a5e0 = load i32, i32* @r6, align 4
  %v2_a5e0 = inttoptr i32 %v1_a5e0 to i32*
  store i32 %v6_a5d8, i32* %v2_a5e0, align 4
  %v0_a5e4 = load i32, i32* @r4, align 4
  %v2_a5e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_a5e4 = mul i32 %v2_a5e4, 4
  %v6_a5e4 = add i32 %v5_a5e4, %v6_a5d8
  %v7_a5e4 = inttoptr i32 %v6_a5e4 to i32*
  store i32 %v0_a5e4, i32* %v7_a5e4, align 4
  %v0_a5e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5e8 = load i32, i32* @r8, align 4
  %v2_a5e8 = add i32 %v1_a5e8, %v0_a5e8
  store i32 %v2_a5e8, i32* %r2.global-to-local, align 4
  %v1_a5f0 = trunc i32 %v2_a5e8 to i8
  %v2_a5f0 = load i32, i32* @r5, align 4
  %v3_a5f0 = inttoptr i32 %v2_a5f0 to i8*
  store i8 %v1_a5f0, i8* %v3_a5f0, align 1
  %v2_a5f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_a5f4, i32* @r4, align 4
  store i32 %v6_a2f0, i32* @r5, align 4
  store i32 %v9_a2f0, i32* @r6, align 4
  store i32 %v12_a2f0, i32* @r7, align 4
  store i32 %v15_a2f0, i32* @r8, align 4
  ret i32 %v1_a5e8

; uselistorder directives
  uselistorder i32 %v1_a5e8, { 1, 0 }
  uselistorder i32 %v3_a5d4, { 1, 0 }
  uselistorder i32 %v1_a5a0, { 1, 0 }
  uselistorder i32 %v3_a588, { 1, 0 }
  uselistorder i32 %v1_a554, { 1, 0 }
  uselistorder i32 %v3_a53c, { 1, 0 }
  uselistorder i32 %v1_a508, { 1, 0 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v3_a4a4, { 1, 0 }
  uselistorder i32 %v1_a470, { 1, 0 }
  uselistorder i32 %v3_a458, { 1, 0 }
  uselistorder i32 %v1_a424, { 1, 0 }
  uselistorder i32 %v3_a40c, { 1, 0 }
  uselistorder i32 %v1_a3d8, { 1, 0 }
  uselistorder i32 %v6_a3c4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a3c0, { 1, 0 }
  uselistorder i32 %v1_a38c, { 1, 0 }
  uselistorder i32 %v3_a374, { 1, 0 }
  uselistorder i32 %v2_a350, { 1, 0 }
  uselistorder i32 %v6_a32c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a328, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i8 7, { 2, 3, 4, 0, 1 }
  uselistorder i8 4, { 2, 1, 0 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_20378.52 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_20379.58 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_20378.52, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_20378.52 to i32), { 1, 0 }
}

define i32 @function_a62c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a62c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a62c = load i32, i32* @r4, align 4
  %v24_a62c = load i32, i32* @fp, align 4
  %v27_a62c = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a658 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_a65c = load i32, i32* @r4, align 4
  store i32 %v0_a65c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a668 = load i32, i32* @sb, align 4
  store i32 %v0_a668, i32* %r3.global-to-local, align 4
  %v0_a66c = load i32, i32* @r5, align 4
  store i32 %v0_a66c, i32* %r0.global-to-local, align 4
  %v5_a670 = inttoptr i32 %v0_a65c to i32*
  %v6_a670 = call i32 @function_9fe8(i32 %v0_a66c, i32* %v5_a670, i32 2, i32 %v0_a668)
  %v1_a67c = urem i32 %v6_a670, 256
  store i32 %v1_a67c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a688 = load i32, i32* @r4, align 4
  store i32 %v0_a688, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r5, align 4
  store i32 %v0_a68c, i32* %r0.global-to-local, align 4
  %v5_a690 = trunc i32 %v6_a670 to i8
  %v6_a694 = inttoptr i32 %v0_a688 to i32*
  %v7_a694 = call i32 @function_9fe8(i32 %v0_a68c, i32* %v6_a694, i32 3, i32 65535)
  %v0_a698 = load i32, i32* @r4, align 4
  store i32 %v0_a698, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a694, i32* %fp.global-to-local, align 4
  %v0_a6a8 = load i32, i32* @r5, align 4
  store i32 %v0_a6a8, i32* %r0.global-to-local, align 4
  %v4_a6ac = inttoptr i32 %v0_a698 to i32*
  %v5_a6ac = call i32 @function_9fe8(i32 %v0_a6a8, i32* %v4_a6ac, i32 4, i32 64)
  %v1_a6b4 = urem i32 %v5_a6ac, 256
  store i32 %v1_a6b4, i32* %ip.global-to-local, align 4
  %v0_a6b8 = load i32, i32* @r4, align 4
  store i32 %v0_a6b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a6c4 = load i32, i32* @r5, align 4
  store i32 %v0_a6c4, i32* %r0.global-to-local, align 4
  %v6_a6cc = inttoptr i32 %v0_a6b8 to i32*
  %v7_a6cc = call i32 @function_9fe8(i32 %v0_a6c4, i32* %v6_a6cc, i32 5, i32 1)
  %v1_a6d8 = urem i32 %v7_a6cc, 256
  store i32 %v1_a6d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r4, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6e8 = load i32, i32* @r5, align 4
  store i32 %v0_a6e8, i32* %r0.global-to-local, align 4
  %v5_a6f0 = inttoptr i32 %v0_a6e4 to i32*
  %v6_a6f0 = call i32 @function_9fe8(i32 %v0_a6e8, i32* %v5_a6f0, i32 6, i32 65535)
  %v0_a6fc = load i32, i32* @r4, align 4
  store i32 %v0_a6fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r5, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v5_a70c = inttoptr i32 %v0_a6fc to i32*
  %v6_a70c = call i32 @function_9fe8(i32 %v0_a708, i32* %v5_a70c, i32 7, i32 65535)
  %v0_a710 = load i32, i32* @r4, align 4
  store i32 %v0_a710, i32* %r1.global-to-local, align 4
  %v0_a714 = load i32, i32* @sb, align 4
  store i32 %v0_a714, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a70c, i32* @r8, align 4
  %v0_a720 = load i32, i32* @r5, align 4
  store i32 %v0_a720, i32* %r0.global-to-local, align 4
  %v4_a724 = inttoptr i32 %v0_a710 to i32*
  %v5_a724 = call i32 @function_9fe8(i32 %v0_a720, i32* %v4_a724, i32 %v0_a714, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a734 = load i32, i32* @r4, align 4
  store i32 %v0_a734, i32* %r1.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r0.global-to-local, align 4
  %v4_a73c = inttoptr i32 %v0_a734 to i32*
  %v5_a73c = call i32 @function_9fe8(i32 %v0_a738, i32* %v4_a73c, i32 1, i32 1)
  %v1_a744 = urem i32 %v5_a73c, 256
  store i32 %v1_a744, i32* %ip.global-to-local, align 4
  %v0_a748 = load i32, i32* @r4, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a750 = load i32, i32* @sb, align 4
  store i32 %v0_a750, i32* %r3.global-to-local, align 4
  %v0_a754 = load i32, i32* @r5, align 4
  store i32 %v0_a754, i32* %r0.global-to-local, align 4
  %v5_a75c = inttoptr i32 %v0_a748 to i32*
  %v6_a75c = call i32 @function_9fe8(i32 %v0_a754, i32* %v5_a75c, i32 18, i32 %v0_a750)
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* %r1.global-to-local, align 4
  %v2_a768 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_a768, i32* %r3.global-to-local, align 4
  store i32 %v6_a75c, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a774 = load i32, i32* @r5, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v4_a778 = inttoptr i32 %v0_a764 to i32*
  %v5_a778 = call i32 @function_9fe8(i32 %v0_a774, i32* %v4_a778, i32 24, i32 %v2_a768)
  %v0_a780 = load i32, i32* @sb, align 4
  store i32 %v0_a780, i32* %r0.global-to-local, align 4
  %v1_a784 = inttoptr i32 %v0_a780 to i32*
  %v2_a784 = call i32 @function_12148(i32* %v1_a784)
  %v1_a788 = load i32, i32* @r6, align 4
  %v2_a788 = add i32 %v1_a788, %v2_a784
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a79c = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v7_a7a0 = icmp eq i32 %v3_a79c, -1
  store i1 %v7_a7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a7a0, label %dec_label_pc_acd8, label %dec_label_pc_a7ac

dec_label_pc_a7ac:                                ; preds = %dec_label_pc_a62c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a7b4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a7b4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a7bc = load i32, i32* @sb, align 4
  store i32 %v0_a7bc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a7c8 = call i32 @function_12c90(i32 %v3_a79c, i32 %v0_a7bc, i32 3, i32 %v6_a7b4, i32 4)
  store i32 %v5_a7c8, i32* %r0.global-to-local, align 4
  %v7_a7cc = icmp eq i32 %v5_a7c8, -1
  store i1 %v7_a7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a7cc, label %dec_label_pc_ace4, label %dec_label_pc_a7d4

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a7ac
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v3_a7dc = mul i32 %v6_a6f0, 65536
  store i32 %v3_a7dc, i32* %r1.global-to-local, align 4
  %v0_a7e0 = load i32, i32* @r8, align 4
  %v0_a7e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_a7e4 = mul i32 %v0_a7e4, 65536
  store i32 %v3_a7e4, i32* %fp.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r7, align 4
  %v1_a7e8 = urem i32 %v0_a7e8, 256
  store i32 %v1_a7e8, i32* @r7, align 4
  %v3_a7ec = urem i32 %v0_a7e4, 65536
  store i32 %v3_a7ec, i32* %r3.global-to-local, align 4
  %v3_a7f0 = urem i32 %v6_a6f0, 65536
  store i32 %v3_a7f0, i32* %ip.global-to-local, align 4
  %v3_a7f4 = urem i32 %v0_a7e0, 65536
  %v2_a7f8 = icmp eq i32 %arg2, 0
  store i1 %v2_a7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_a808 = load i32, i32* @sb, align 4
  store i32 %v0_a808, i32* %stack_var_-44, align 4
  br i1 %v2_a7f8, label %dec_label_pc_aa10.preheader, label %dec_label_pc_a81c

dec_label_pc_a81c:                                ; preds = %dec_label_pc_a7d4
  %v3_a7e0 = mul i32 %v0_a7e0, 65536
  %v3_a820 = mul i32 %v5_a724, 65536
  %v1_a824 = add i32 %v3_a820, 4325376
  %v0_a7e4.not = or i32 %v0_a7e4, -65536
  %v1_a828 = xor i32 %v0_a7e4.not, 65535
  %v3_a834 = mul i32 %v1_a828, 65536
  store i32 %v3_a834, i32* @r6, align 4
  %tmp68 = udiv i32 %v1_a824, 256
  %v3_a84c = and i32 %tmp68, 65280
  store i32 %v3_a84c, i32* %r3.global-to-local, align 4
  %v1_a850 = add i32 %v3_a820, 524288
  %tmp69 = mul i32 %v0_a7e4, 256
  %v3_a854 = and i32 %tmp69, 65280
  %v1_a858 = add i32 %v3_a820, 1835008
  %tmp70 = mul nsw i32 %v1_a828, 256
  %v3_a85c = and i32 %tmp70, 65280
  %v4_a860 = udiv i32 %v1_a824, 16777216
  %v5_a860 = or i32 %v4_a860, %tmp68
  %v3_a868 = udiv i32 %v1_a858, 256
  %v5_a86c = trunc i32 %v5_a860 to i16
  %tmp71 = udiv i32 %v0_a7e4, 256
  %v4_a870 = urem i32 %tmp71, 256
  %v5_a870 = or i32 %v4_a870, %v3_a854
  store i32 %v5_a870, i32* @r7, align 4
  %tmp72 = udiv i32 %v1_a828, 256
  %v4_a874 = urem i32 %tmp72, 256
  %v5_a874 = or i32 %v4_a874, %v3_a85c
  store i32 %v5_a874, i32* @fp, align 4
  store i32 %v3_a7e0, i32* %r2.global-to-local, align 4
  store i32 %v3_a7dc, i32* %r1.global-to-local, align 4
  %v1_a880 = and i32 %v3_a868, 65280
  %tmp73 = mul i32 %v6_a6f0, 256
  %v3_a884 = and i32 %tmp73, 65280
  %tmp74 = mul i32 %v0_a7e0, 256
  %v3_a888 = and i32 %tmp74, 65280
  %v4_a890 = udiv i32 %v1_a858, 16777216
  %v5_a890 = or i32 %v1_a880, %v4_a890
  store i32 %v5_a890, i32* @r5, align 4
  %tmp75 = udiv i32 %v6_a6f0, 256
  %v4_a894 = urem i32 %tmp75, 256
  %v5_a894 = or i32 %v4_a894, %v3_a884
  store i32 %v5_a894, i32* %r0.global-to-local, align 4
  %tmp76 = udiv i32 %v0_a7e0, 256
  %v4_a898 = urem i32 %tmp76, 256
  %v5_a898 = or i32 %v4_a898, %v3_a888
  store i32 %v5_a898, i32* %ip.global-to-local, align 4
  %tmp77 = udiv i32 %v1_a850, 256
  %v3_a89c = and i32 %tmp77, 65280
  store i32 %v3_a89c, i32* @lr, align 4
  %v5_a8a8 = trunc i32 %v5_a890 to i16
  %v4_a8ac = udiv i32 %v1_a850, 16777216
  %v5_a8ac = or i32 %v3_a89c, %v4_a8ac
  store i32 %v5_a8ac, i32* @r8, align 4
  store i32 %v0_a808, i32* @r4, align 4
  %v4_a908 = sext i8 %v5_a690 to i32
  %v1_a914 = trunc i32 %v5_a6ac to i8
  %v2_a9c8 = icmp eq i32 %v1_a7e8, 0
  %sext = mul nuw i32 %v5_a894, 65536
  %v4_a9ec = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_a898, 65536
  %v4_a9f4 = sdiv i32 %sext7, 65536
  br label %dec_label_pc_a8b4

dec_label_pc_a8b4:                                ; preds = %bb80, %dec_label_pc_a81c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a8c0 = call i32 @function_1383c(i32 1510, i32 4)
  store i32 %v2_a8c0, i32* %r0.global-to-local, align 4
  %v3_a8c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  %v2_a8cc = load i32, i32* @r4, align 4
  %v5_a8cc = mul i32 %v2_a8cc, 4
  %v6_a8cc = add i32 %v5_a8cc, %v2_a658
  %v7_a8cc = inttoptr i32 %v6_a8cc to i32*
  store i32 %v2_a8c0, i32* %v7_a8cc, align 4
  store i32 %v2_a658, i32* %r1.global-to-local, align 4
  %v0_a8d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d4 = mul i32 %v0_a8d4, 32
  store i32 %v3_a8d4, i32* %r3.global-to-local, align 4
  %v4_a8d8 = mul i32 %v0_a8d4, 4
  %v5_a8d8 = add i32 %v4_a8d8, %v2_a658
  %v6_a8d8 = inttoptr i32 %v5_a8d8 to i32*
  %v7_a8d8 = load i32, i32* %v6_a8d8, align 4
  store i32 %v7_a8d8, i32* %r4.global-to-local, align 4
  %v5_a8dc = mul i32 %v0_a8d4, 24
  store i32 %v5_a8dc, i32* %r3.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @sl, align 4
  %v2_a8e0 = add i32 %v1_a8e0, %v5_a8dc
  store i32 %v2_a8e0, i32* %lr.global-to-local, align 4
  %v1_a8e4 = inttoptr i32 %v7_a8d8 to i8*
  %v2_a8e4 = load i8, i8* %v1_a8e4, align 1
  %tmp = urem i8 %v2_a8e4, 16
  %v1_a8e8 = zext i8 %tmp to i32
  %v1_a8ec = or i32 %v1_a8e8, 64
  store i32 %v1_a8ec, i32* %r3.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v1_a8ec to i8
  store i8 %v1_a8f0, i8* %v1_a8e4, align 1
  %v0_a8f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a8f4 = inttoptr i32 %v0_a8f4 to i8*
  %v2_a8f4 = load i8, i8* %v1_a8f4, align 1
  %v1_a8f8 = and i8 %v2_a8f4, -16
  %v1_a8fc = or i8 %v1_a8f8, 5
  store i32 %v1_a6d8, i32* %r3.global-to-local, align 4
  store i8 %v1_a8fc, i8* %v1_a8f4, align 1
  store i32 %v4_a908, i32* %r1.global-to-local, align 4
  %v2_a90c = load i32, i32* %r4.global-to-local, align 4
  %v3_a90c = add i32 %v2_a90c, 1
  %v4_a90c = inttoptr i32 %v3_a90c to i8*
  store i8 %v5_a690, i8* %v4_a90c, align 1
  store i32 %v1_a6b4, i32* %r2.global-to-local, align 4
  %v2_a914 = load i32, i32* %r4.global-to-local, align 4
  %v3_a914 = add i32 %v2_a914, 8
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 %v1_a914, i8* %v4_a914, align 1
  %v0_a918 = load i32, i32* %r3.global-to-local, align 4
  %v2_a918 = icmp eq i32 %v0_a918, 0
  store i1 %v2_a918, i1* %cpsr_z.global-to-local, align 1
  %v2_a920 = load i32, i32* %r4.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 2
  %v4_a920 = inttoptr i32 %v3_a920 to i16*
  store i16 %v5_a86c, i16* %v4_a920, align 2
  %v2_a928 = load i32, i32* %r4.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 9
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 47, i8* %v4_a928, align 1
  store i32 %v5_a778, i32* %r3.global-to-local, align 4
  %v1_a930 = load i32, i32* %r4.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 12
  %v3_a930 = inttoptr i32 %v2_a930 to i32*
  store i32 %v5_a778, i32* %v3_a930, align 4
  %v0_a934 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a934, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a8b4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a938 = load i32, i32* %r4.global-to-local, align 4
  %v4_a938 = add i32 %v3_a938, 6
  %v5_a938 = inttoptr i32 %v4_a938 to i16*
  store i16 64, i16* %v5_a938, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a8b4, %bb
  %v0_a93c = load i32, i32* %lr.global-to-local, align 4
  %v1_a93c = add i32 %v0_a93c, 16
  %v2_a93c = inttoptr i32 %v1_a93c to i32*
  %v3_a93c = load i32, i32* %v2_a93c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_a944 = load i32, i32* %r4.global-to-local, align 4
  %v2_a944 = add i32 %v1_a944, 16
  %v3_a944 = inttoptr i32 %v2_a944 to i32*
  store i32 %v3_a93c, i32* %v3_a944, align 4
  %v0_a948 = load i32, i32* %r4.global-to-local, align 4
  %v1_a948 = add i32 %v0_a948, 24
  store i32 %v1_a948, i32* %r0.global-to-local, align 4
  %v1_a94c = add i32 %v0_a948, 20
  store i32 %v1_a94c, i32* %r1.global-to-local, align 4
  %v0_a950 = load i32, i32* %ip.global-to-local, align 4
  %v1_a950 = add i32 %v0_a950, 101
  store i32 %v1_a950, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r7, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v3_a95c = add i32 %v0_a948, 4
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* %ip.global-to-local, align 4
  %v1_a960 = trunc i32 %v0_a960 to i16
  %v2_a960 = load i32, i32* %r1.global-to-local, align 4
  %v3_a960 = add i32 %v2_a960, 2
  %v4_a960 = inttoptr i32 %v3_a960 to i16*
  store i16 %v1_a960, i16* %v4_a960, align 2
  %v0_a964 = load i32, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v0_a964 to i8
  %v2_a964 = load i32, i32* %r0.global-to-local, align 4
  %v3_a964 = add i32 %v2_a964, 13
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* %r2.global-to-local, align 4
  %v1_a968 = trunc i32 %v0_a968 to i8
  %v2_a968 = load i32, i32* %r0.global-to-local, align 4
  %v3_a968 = add i32 %v2_a968, 12
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v1_a968, i8* %v4_a968, align 1
  %v0_a96c = load i32, i32* %r4.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 38
  %v2_a96c = inttoptr i32 %v1_a96c to i8*
  %v3_a96c = load i8, i8* %v2_a96c, align 1
  %tmp86 = urem i8 %v3_a96c, 16
  %v1_a970 = zext i8 %tmp86 to i32
  %v1_a974 = or i32 %v1_a970, 64
  store i32 %v1_a974, i32* %r3.global-to-local, align 4
  %v1_a978 = trunc i32 %v1_a974 to i8
  store i8 %v1_a978, i8* %v2_a96c, align 1
  %v0_a97c = load i32, i32* %r4.global-to-local, align 4
  %v1_a97c = add i32 %v0_a97c, 38
  %v2_a97c = inttoptr i32 %v1_a97c to i8*
  %v3_a97c = load i8, i8* %v2_a97c, align 1
  %v4_a97c = zext i8 %v3_a97c to i32
  %v1_a980 = and i32 %v4_a97c, 240
  %v1_a984 = or i32 %v1_a980, 5
  store i32 %v1_a984, i32* %r2.global-to-local, align 4
  %v1_a988 = trunc i32 %v1_a984 to i8
  store i8 %v1_a988, i8* %v2_a97c, align 1
  store i32 %v4_a908, i32* %ip.global-to-local, align 4
  %v0_a990 = load i32, i32* %r4.global-to-local, align 4
  %v1_a990 = add i32 %v0_a990, 38
  store i32 %v1_a990, i32* @r5, align 4
  %v3_a994 = add i32 %v0_a990, 39
  %v4_a994 = inttoptr i32 %v3_a994 to i8*
  store i8 %v5_a690, i8* %v4_a994, align 1
  store i32 %v5_a890, i32* %lr.global-to-local, align 4
  %v2_a99c = load i32, i32* @r5, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v5_a8a8, i16* %v4_a99c, align 2
  store i32 %v1_a6b4, i32* %r1.global-to-local, align 4
  %v0_a9a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9a4, label %.thread8, label %bb78

.thread8:                                         ; preds = %.thread
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb79

bb78:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_a9ac = load i32, i32* @r5, align 4
  %v4_a9ac = add i32 %v3_a9ac, 6
  %v5_a9ac = inttoptr i32 %v4_a9ac to i16*
  store i16 64, i16* %v5_a9ac, align 2
  %v0_a9b0.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t85 = trunc i32 %v0_a9b0.pre to i8
  br label %bb79

bb79:                                             ; preds = %.thread8, %bb78
  %v5_a6ac.sink.off0 = phi i8 [ %v1_a914, %.thread8 ], [ %extract.t85, %bb78 ]
  %v2_a9b0 = load i32, i32* @r5, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 8
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v5_a6ac.sink.off0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r5, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 9
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = load i32, i32* @fp, align 4
  %v1_a9b8 = trunc i32 %v0_a9b8 to i16
  %v2_a9b8 = load i32, i32* @r5, align 4
  %v3_a9b8 = add i32 %v2_a9b8, 4
  %v4_a9b8 = inttoptr i32 %v3_a9b8 to i16*
  store i16 %v1_a9b8, i16* %v4_a9b8, align 2
  %v0_a9bc = call i32 @function_f188()
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  store i32 %v1_a7e8, i32* %ip.global-to-local, align 4
  store i1 %v2_a9c8, i1* %cpsr_z.global-to-local, align 1
  %v1_a9cc = sub i32 1023, %v0_a9bc
  store i32 %v1_a9cc, i32* %r3.global-to-local, align 4
  br i1 %v2_a9c8, label %.thread9, label %.thread10

.thread9:                                         ; preds = %bb79
  %v2_a9d4 = load i32, i32* @r5, align 4
  %v3_a9d4 = add i32 %v2_a9d4, 16
  %v4_a9d4 = inttoptr i32 %v3_a9d4 to i32*
  store i32 %v1_a9cc, i32* %v4_a9d4, align 4
  br label %bb80

.thread10:                                        ; preds = %bb79
  %v1_a9d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_a9d0 = add i32 %v1_a9d0, 16
  %v3_a9d0 = inttoptr i32 %v2_a9d0 to i32*
  %v4_a9d0 = load i32, i32* %v3_a9d0, align 4
  store i32 %v4_a9d0, i32* %r3.global-to-local, align 4
  %v2_a9d8 = load i32, i32* @r5, align 4
  %v3_a9d8 = add i32 %v2_a9d8, 16
  %v4_a9d8 = inttoptr i32 %v3_a9d8 to i32*
  store i32 %v4_a9d0, i32* %v4_a9d8, align 4
  br label %bb80

bb80:                                             ; preds = %.thread9, %.thread10
  %v1_a9dc = load i32, i32* @r5, align 4
  %v2_a9dc = add i32 %v1_a9dc, 12
  %v3_a9dc = inttoptr i32 %v2_a9dc to i32*
  store i32 %v0_a9bc, i32* %v3_a9dc, align 4
  %v3_a9e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a9e0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v0_a9e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a9e8 = add i32 %v0_a9e8, 58
  store i32 %v1_a9e8, i32* @r6, align 4
  store i32 %v4_a9ec, i32* %r1.global-to-local, align 4
  %v1_a9f0 = add i32 %v3_a9e0, 1
  store i32 %v1_a9f0, i32* @r4, align 4
  store i32 %v4_a9f4, i32* %r2.global-to-local, align 4
  %v9_a9f8 = icmp eq i32 %v1_a9f0, %arg2
  store i1 %v9_a9f8, i1* %cpsr_z.global-to-local, align 1
  %v0_a9fc = load i32, i32* @r8, align 4
  %v1_a9fc = trunc i32 %v0_a9fc to i16
  %v3_a9fc = add i32 %v0_a9e8, 62
  %v4_a9fc = inttoptr i32 %v3_a9fc to i16*
  store i16 %v1_a9fc, i16* %v4_a9fc, align 2
  %v0_aa00 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  %v2_aa00 = load i32, i32* @r6, align 4
  %v3_aa00 = inttoptr i32 %v2_aa00 to i16*
  store i16 %v1_aa00, i16* %v3_aa00, align 2
  %v0_aa04 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa04 = trunc i32 %v0_aa04 to i16
  %v2_aa04 = load i32, i32* @r6, align 4
  %v3_aa04 = add i32 %v2_aa04, 2
  %v4_aa04 = inttoptr i32 %v3_aa04 to i16*
  store i16 %v1_aa04, i16* %v4_aa04, align 2
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %stack_var_-44, align 4
  %v5_aa0c = icmp slt i32 %v1_a9f0, %arg2
  br i1 %v5_aa0c, label %dec_label_pc_a8b4, label %dec_label_pc_aa10.preheader

dec_label_pc_aa10.preheader:                      ; preds = %bb80, %dec_label_pc_a7d4
  %v1_aa2c = add i32 %v5_a724, 8
  %v1_aa30 = add i32 %v5_a724, 66
  %v2_aa3c = icmp eq i32 %v5_a778, -1
  %v7_aa3c = icmp eq i32 %v5_a778, -1
  %v3_ac34 = icmp eq i32 %v3_a7ec, 65535
  %v2_ac84 = icmp eq i32 %v1_a7e8, 0
  %v2_aa98 = ptrtoint i32* %stack_var_-48 to i32
  %v2_aab0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_aac0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_aacc = ptrtoint i32* %stack_var_-54 to i32
  %v2_aae0 = icmp eq i32 %v1_a744, 0
  br label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aa10.preheader, %dec_label_pc_acc4
  store i1 %v2_a7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a7f8, label %dec_label_pc_acc4, label %dec_label_pc_aa24

dec_label_pc_aa24:                                ; preds = %dec_label_pc_aa10
  store i32 %v5_a724, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* @fp, align 4
  store i32 %v1_aa30, i32* @sb, align 4
  br label %dec_label_pc_ab98

dec_label_pc_aa38:                                ; preds = %dec_label_pc_ab98
  store i32 %v5_a778, i32* %r1.global-to-local, align 4
  store i1 %v7_aa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa3c, label %dec_label_pc_ac24, label %dec_label_pc_aa44

dec_label_pc_aa44:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa38
  store i32 %v3_a7ec, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ac34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ac34, label %dec_label_pc_ac40, label %dec_label_pc_aa58

dec_label_pc_aa58:                                ; preds = %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge, %dec_label_pc_aa44
  %v1_aa5c = phi i32 [ %v1_aa5c.pre, %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge ], [ 65535, %dec_label_pc_aa44 ]
  store i32 %v3_a7f0, i32* %r3.global-to-local, align 4
  %v9_aa5c = icmp eq i32 %v3_a7f0, %v1_aa5c
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa5c, label %dec_label_pc_ac68, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_ac40, %dec_label_pc_aa58
  %v1_aa68 = phi i32 [ %v1_ac60, %dec_label_pc_ac40 ], [ %v1_aa5c, %dec_label_pc_aa58 ]
  store i32 %v3_a7f4, i32* %ip.global-to-local, align 4
  %v9_aa68 = icmp eq i32 %v3_a7f4, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa68, label %dec_label_pc_ac7c, label %dec_label_pc_aa70

dec_label_pc_aa70:                                ; preds = %dec_label_pc_ac68, %dec_label_pc_aa64
  store i32 %v1_a7e8, i32* @lr, align 4
  store i1 %v2_ac84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac84, label %dec_label_pc_ac98, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_aa70
  %v1_aa78 = load i32, i32* @r5, align 4
  %v2_aa78 = add i32 %v1_aa78, 16
  %v3_aa78 = inttoptr i32 %v2_aa78 to i32*
  %v4_aa78 = load i32, i32* %v3_aa78, align 4
  store i32 %v4_aa78, i32* %r3.global-to-local, align 4
  %v2_aa7c = load i32, i32* @r6, align 4
  %v3_aa7c = add i32 %v2_aa7c, 16
  %v4_aa7c = inttoptr i32 %v3_aa7c to i32*
  store i32 %v4_aa78, i32* %v4_aa7c, align 4
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %bb81, %.thread11, %dec_label_pc_ac98
  %v0_aa84 = call i32 @function_f188()
  store i32 %v0_aa84, i32* %r0.global-to-local, align 4
  store i32 %v0_aa84, i32* %stack_var_-48, align 4
  %v0_aa8c = call i32 @function_f188()
  store i32 %v0_aa8c, i32* %r0.global-to-local, align 4
  store i32 %v0_aa8c, i32* %stack_var_-52, align 4
  %v0_aa94 = call i32 @function_f188()
  store i32 %v2_aa98, i32* %r1.global-to-local, align 4
  store i32 %v0_aa94, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_aaa4 = load i32, i32* @r7, align 4
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  %v3_aaa8 = call i32 @function_118d4(i32 %v0_aaa4, i32 %v2_aa98, i32 4)
  %v0_aaac = load i32, i32* @r7, align 4
  %v1_aaac = add i32 %v0_aaac, 6
  store i32 %v1_aaac, i32* %r0.global-to-local, align 4
  store i32 %v2_aab0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_aab8 = call i32 @function_118d4(i32 %v1_aaac, i32 %v2_aab0, i32 4)
  %v0_aabc = load i32, i32* @r7, align 4
  %v1_aabc = add i32 %v0_aabc, 4
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  store i32 %v2_aac0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aac8 = call i32 @function_118d4(i32 %v1_aabc, i32 %v2_aac0, i32 2)
  store i32 %v2_aacc, i32* %r1.global-to-local, align 4
  %v0_aad0 = load i32, i32* @r7, align 4
  %v1_aad0 = add i32 %v0_aad0, 10
  store i32 %v1_aad0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aad8 = call i32 @function_118d4(i32 %v1_aad0, i32 %v2_aacc, i32 2)
  store i32 %v3_aad8, i32* %r0.global-to-local, align 4
  store i32 %v1_a744, i32* %r1.global-to-local, align 4
  store i1 %v2_aae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aae0, label %dec_label_pc_aae8, label %dec_label_pc_aca4

dec_label_pc_aae8:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aca4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaec = load i32, i32* @r5, align 4
  %v3_aaec = add i32 %v2_aaec, 10
  %v4_aaec = inttoptr i32 %v3_aaec to i16*
  store i16 0, i16* %v4_aaec, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aaf4 = load i32, i32* @r5, align 4
  store i32 %v0_aaf4, i32* @r0, align 4
  %v2_aaf8 = call i32 @function_dd58(i32 %v0_aaf4, i32 20)
  %v3_aaf8 = trunc i32 %v2_aaf8 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_ab00 = load i32, i32* @r5, align 4
  %v4_ab00 = add i32 %v3_ab00, 10
  %v5_ab00 = inttoptr i32 %v4_ab00 to i16*
  store i16 %v3_aaf8, i16* %v5_ab00, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ab08 = load i32, i32* %ip.global-to-local, align 4
  %v1_ab08 = trunc i32 %v0_ab08 to i16
  %v2_ab08 = load i32, i32* @r6, align 4
  %v3_ab08 = add i32 %v2_ab08, 10
  %v4_ab08 = inttoptr i32 %v3_ab08 to i16*
  store i16 %v1_ab08, i16* %v4_ab08, align 2
  %v0_ab0c = load i32, i32* @r6, align 4
  store i32 %v0_ab0c, i32* @r0, align 4
  %v2_ab10 = call i32 @function_dd58(i32 %v0_ab0c, i32 20)
  %v3_ab10 = trunc i32 %v2_ab10 to i16
  store i32 %v2_ab10, i32* %r0.global-to-local, align 4
  %v3_ab14 = load i32, i32* @r6, align 4
  %v4_ab14 = add i32 %v3_ab14, 10
  %v5_ab14 = inttoptr i32 %v4_ab14 to i16*
  store i16 %v3_ab10, i16* %v5_ab14, align 2
  %v2_ab1c = load i32, i32* @r8, align 4
  %v3_ab1c = add i32 %v2_ab1c, 6
  %v4_ab1c = inttoptr i32 %v3_ab1c to i16*
  store i16 0, i16* %v4_ab1c, align 2
  %v0_ab20 = load i32, i32* @r8, align 4
  store i32 %v0_ab20, i32* @r1, align 4
  %v1_ab24 = add i32 %v0_ab20, 4
  %v2_ab24 = inttoptr i32 %v1_ab24 to i16*
  %v3_ab24 = load i16, i16* %v2_ab24, align 2
  %v4_ab24 = zext i16 %v3_ab24 to i32
  store i32 %v4_ab24, i32* %r2.global-to-local, align 4
  %v0_ab28 = load i32, i32* @fp, align 4
  store i32 %v0_ab28, i32* %r3.global-to-local, align 4
  %v0_ab2c = load i32, i32* @r6, align 4
  store i32 %v0_ab2c, i32* %r0.global-to-local, align 4
  %v4_ab30 = call i32 @function_dda8(i32 %v0_ab2c, i32 %v0_ab20, i32 %v4_ab24, i32 %v0_ab28)
  %v5_ab30 = trunc i32 %v4_ab30 to i16
  store i32 %v4_ab30, i32* %r0.global-to-local, align 4
  %v3_ab34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab34, i32* %r2.global-to-local, align 4
  %v3_ab38 = mul i32 %v3_ab34, 32
  store i32 %v3_ab38, i32* %r3.global-to-local, align 4
  %v0_ab3c = load i32, i32* @r5, align 4
  %v1_ab3c = add i32 %v0_ab3c, 16
  %v2_ab3c = inttoptr i32 %v1_ab3c to i32*
  %v3_ab3c = load i32, i32* %v2_ab3c, align 4
  %v5_ab40 = mul i32 %v3_ab34, 24
  store i32 %v5_ab40, i32* %r3.global-to-local, align 4
  %v1_ab44 = load i32, i32* @sl, align 4
  %v2_ab44 = add i32 %v1_ab44, %v5_ab40
  store i32 %v2_ab44, i32* @lr, align 4
  %v2_ab48 = add i32 %v2_ab44, 4
  %v3_ab48 = inttoptr i32 %v2_ab48 to i32*
  store i32 %v3_ab3c, i32* %v3_ab48, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_ab54 = load i32, i32* @r8, align 4
  %v4_ab54 = add i32 %v3_ab54, 6
  %v5_ab54 = inttoptr i32 %v4_ab54 to i16*
  store i16 %v5_ab30, i16* %v5_ab54, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ab5c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab5c = trunc i32 %v0_ab5c to i16
  %v2_ab5c = load i32, i32* %r3.global-to-local, align 4
  %v3_ab5c = load i32, i32* @sl, align 4
  %v4_ab5c = add i32 %v3_ab5c, %v2_ab5c
  %v5_ab5c = inttoptr i32 %v4_ab5c to i16*
  store i16 %v1_ab5c, i16* %v5_ab5c, align 2
  %v0_ab60 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab60 = trunc i32 %v0_ab60 to i16
  %v2_ab60 = load i32, i32* @lr, align 4
  %v3_ab60 = add i32 %v2_ab60, 2
  %v4_ab60 = inttoptr i32 %v3_ab60 to i16*
  store i16 %v1_ab60, i16* %v4_ab60, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ab68 = load i32, i32* @r5, align 4
  store i32 %v0_ab68, i32* %r1.global-to-local, align 4
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v0_ab70 = load i32, i32* @sb, align 4
  store i32 %v0_ab70, i32* %r2.global-to-local, align 4
  %v0_ab74 = load i32, i32* @lr, align 4
  %v0_ab78 = load i32, i32* %ip.global-to-local, align 4
  %v6_ab7c = call i32 @function_12c50(i32 %v3_a79c, i32 %v0_ab68, i32 %v0_ab70, i32 16384, i32 %v0_ab74, i32 %v0_ab78)
  %v3_ab80 = load i32, i32* %stack_var_-44, align 4
  %v1_ab84 = add i32 %v3_ab80, 1
  store i32 %v1_ab84, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_ab8c = icmp eq i32 %v1_ab84, %arg2
  store i1 %v9_ab8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab84, i32* %stack_var_-44, align 4
  %v6_ab94 = icmp slt i32 %v1_ab84, %arg2
  br i1 %v6_ab94, label %dec_label_pc_ab98, label %dec_label_pc_acc4

dec_label_pc_ab98:                                ; preds = %dec_label_pc_aae8, %dec_label_pc_aa24
  %v1_abac = phi i32 [ %v1_ab84, %dec_label_pc_aae8 ], [ 0, %dec_label_pc_aa24 ]
  %v5_ab9c = mul i32 %v1_abac, 24
  %v1_aba0 = load i32, i32* @sl, align 4
  %v2_aba0 = add i32 %v1_aba0, %v5_ab9c
  store i32 %v2_aba0, i32* %r3.global-to-local, align 4
  store i32 %v2_a658, i32* %lr.global-to-local, align 4
  %v1_aba8 = add i32 %v2_aba0, 20
  %v2_aba8 = inttoptr i32 %v1_aba8 to i8*
  %v3_aba8 = load i8, i8* %v2_aba8, align 1
  %v4_aba8 = zext i8 %v3_aba8 to i32
  store i32 %v4_aba8, i32* %r2.global-to-local, align 4
  %v4_abac = mul i32 %v1_abac, 4
  %v5_abac = add i32 %v4_abac, %v2_a658
  %v6_abac = inttoptr i32 %v5_abac to i32*
  %v7_abac = load i32, i32* %v6_abac, align 4
  store i32 %v7_abac, i32* @r5, align 4
  %v2_abb0 = icmp ugt i8 %v3_aba8, 30
  %v7_abb0 = icmp eq i8 %v3_aba8, 31
  store i1 %v7_abb0, i1* %cpsr_z.global-to-local, align 1
  %v1_abb4 = add i32 %v7_abac, 24
  store i32 %v1_abb4, i32* @r7, align 4
  %v1_abb8 = add i32 %v7_abac, 38
  store i32 %v1_abb8, i32* @r6, align 4
  %v1_abbc = add i32 %v7_abac, 58
  store i32 %v1_abbc, i32* @r8, align 4
  %v2_abc0 = xor i1 %v7_abb0, true
  %v3_abc0 = and i1 %v2_abb0, %v2_abc0
  br i1 %v3_abc0, label %dec_label_pc_aa38, label %dec_label_pc_abc4

dec_label_pc_abc4:                                ; preds = %dec_label_pc_ab98
  %v1_abc4 = add i32 %v2_aba0, 16
  %v2_abc4 = inttoptr i32 %v1_abc4 to i32*
  %v3_abc4 = load i32, i32* %v2_abc4, align 4
  store i32 %v3_abc4, i32* %r4.global-to-local, align 4
  %v0_abc8 = call i32 @function_f188()
  store i32 %v0_abc8, i32* %r0.global-to-local, align 4
  %v3_abcc = load i32, i32* %stack_var_-44, align 4
  %v5_abd4 = mul i32 %v3_abcc, 24
  %v1_abd8 = and i32 %v3_abc4, 16711680
  store i32 %v1_abd8, i32* %ip.global-to-local, align 4
  %v3_abdc = udiv i32 %v3_abc4, 16777216
  %v4_abe0 = udiv i32 %v1_abd8, 256
  %v5_abe0 = or i32 %v4_abe0, %v3_abdc
  store i32 %v5_abe0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* @sl, align 4
  %v2_abe4 = add i32 %v1_abe4, %v5_abd4
  store i32 %v2_abe4, i32* %r1.global-to-local, align 4
  %v1_abe8 = and i32 %v3_abc4, 65280
  store i32 %v1_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe4, 20
  %v2_abec = inttoptr i32 %v1_abec to i8*
  %v3_abec = load i8, i8* %v2_abec, align 1
  %v4_abec = zext i8 %v3_abec to i32
  store i32 %v4_abec, i32* %ip.global-to-local, align 4
  %v5_abf4 = call i32 @llvm.bswap.i32(i32 %v3_abc4)
  %v7_abf8 = lshr i32 %v0_abc8, %v4_abec
  %v8_abf8 = add i32 %v7_abf8, %v5_abf4
  store i32 %v8_abf8, i32* %r2.global-to-local, align 4
  %v1_abfc = and i32 %v8_abf8, 16711680
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  store i32 %v5_a778, i32* %r1.global-to-local, align 4
  %v5_ac14 = call i32 @llvm.bswap.i32(i32 %v8_abf8)
  store i32 %v5_ac14, i32* %r3.global-to-local, align 4
  store i1 %v7_aa3c, i1* %cpsr_z.global-to-local, align 1
  %v1_ac1c = load i32, i32* @r5, align 4
  %v2_ac1c = add i32 %v1_ac1c, 16
  %v3_ac1c = inttoptr i32 %v2_ac1c to i32*
  store i32 %v5_ac14, i32* %v3_ac1c, align 4
  br i1 %v2_aa3c, label %dec_label_pc_ac24, label %dec_label_pc_aa44

dec_label_pc_ac24:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa38
  %v0_ac24 = call i32 @function_f188()
  store i32 %v0_ac24, i32* %r0.global-to-local, align 4
  store i32 %v3_a7ec, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ac34, i1* %cpsr_z.global-to-local, align 1
  %v1_ac38 = load i32, i32* @r5, align 4
  %v2_ac38 = add i32 %v1_ac38, 12
  %v3_ac38 = inttoptr i32 %v2_ac38 to i32*
  store i32 %v0_ac24, i32* %v3_ac38, align 4
  br i1 %v3_ac34, label %dec_label_pc_ac40, label %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge

dec_label_pc_ac24.dec_label_pc_aa58_crit_edge:    ; preds = %dec_label_pc_ac24
  %v1_aa5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aa58

dec_label_pc_ac40:                                ; preds = %dec_label_pc_ac24, %dec_label_pc_aa44
  %v0_ac40 = call i32 @function_f188()
  %v3_ac48 = urem i32 %v0_ac40, 65536
  store i32 %v3_ac48, i32* %r0.global-to-local, align 4
  %v1_ac50 = sub nsw i32 999, %v3_ac48
  store i32 %v1_ac50, i32* %r3.global-to-local, align 4
  %v1_ac54 = trunc i32 %v0_ac40 to i16
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i16*
  store i16 %v1_ac54, i16* %v4_ac54, align 2
  %v0_ac58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 4
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  store i32 %v3_a7f0, i32* %r3.global-to-local, align 4
  %v1_ac60 = load i32, i32* @r4, align 4
  %v9_ac60 = icmp eq i32 %v3_a7f0, %v1_ac60
  store i1 %v9_ac60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ac60, label %dec_label_pc_ac68, label %dec_label_pc_aa64

dec_label_pc_ac68:                                ; preds = %dec_label_pc_ac40, %dec_label_pc_aa58
  %v0_ac68 = call i32 @function_f188()
  %v1_ac68 = trunc i32 %v0_ac68 to i16
  store i32 %v0_ac68, i32* %r0.global-to-local, align 4
  store i32 %v3_a7f4, i32* %ip.global-to-local, align 4
  %v1_ac70 = load i32, i32* @r4, align 4
  %v9_ac70 = icmp eq i32 %v3_a7f4, %v1_ac70
  store i1 %v9_ac70, i1* %cpsr_z.global-to-local, align 1
  %v3_ac74 = load i32, i32* @r5, align 4
  %v4_ac74 = add i32 %v3_ac74, 58
  %v5_ac74 = inttoptr i32 %v4_ac74 to i16*
  store i16 %v1_ac68, i16* %v5_ac74, align 2
  br i1 %v9_ac70, label %dec_label_pc_ac7c, label %dec_label_pc_aa70

dec_label_pc_ac7c:                                ; preds = %dec_label_pc_ac68, %dec_label_pc_aa64
  %v0_ac7c = call i32 @function_f188()
  %v1_ac7c = trunc i32 %v0_ac7c to i16
  store i32 %v0_ac7c, i32* %r0.global-to-local, align 4
  store i32 %v1_a7e8, i32* @lr, align 4
  store i1 %v2_ac84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac84, label %.thread24, label %bb81

.thread24:                                        ; preds = %dec_label_pc_ac7c
  %v3_ac8c25 = load i32, i32* @r8, align 4
  %v4_ac8c26 = add i32 %v3_ac8c25, 2
  %v5_ac8c27 = inttoptr i32 %v4_ac8c26 to i16*
  store i16 %v1_ac7c, i16* %v5_ac8c27, align 2
  br label %dec_label_pc_ac98

bb81:                                             ; preds = %dec_label_pc_ac7c
  %v1_ac88 = load i32, i32* @r5, align 4
  %v2_ac88 = add i32 %v1_ac88, 16
  %v3_ac88 = inttoptr i32 %v2_ac88 to i32*
  %v4_ac88 = load i32, i32* %v3_ac88, align 4
  store i32 %v4_ac88, i32* %r3.global-to-local, align 4
  %v3_ac8c = load i32, i32* @r8, align 4
  %v4_ac8c = add i32 %v3_ac8c, 2
  %v5_ac8c = inttoptr i32 %v4_ac8c to i16*
  store i16 %v1_ac7c, i16* %v5_ac8c, align 2
  %v1_ac90 = load i32, i32* %r3.global-to-local, align 4
  %v2_ac90 = load i32, i32* @r6, align 4
  %v3_ac90 = add i32 %v2_ac90, 16
  %v4_ac90 = inttoptr i32 %v3_ac90 to i32*
  store i32 %v1_ac90, i32* %v4_ac90, align 4
  br label %dec_label_pc_aa84

dec_label_pc_ac98:                                ; preds = %.thread24, %dec_label_pc_aa70
  %v0_ac98 = call i32 @function_f188()
  store i32 %v0_ac98, i32* %r0.global-to-local, align 4
  %v1_ac9c = load i32, i32* @r6, align 4
  %v2_ac9c = add i32 %v1_ac9c, 16
  %v3_ac9c = inttoptr i32 %v2_ac9c to i32*
  store i32 %v0_ac98, i32* %v3_ac9c, align 4
  br label %dec_label_pc_aa84

dec_label_pc_aca4:                                ; preds = %dec_label_pc_aa84
  %v0_aca4 = load i32, i32* @r8, align 4
  %v1_aca4 = add i32 %v0_aca4, 8
  store i32 %v1_aca4, i32* @r4, align 4
  store i32 %v1_aca4, i32* %r0.global-to-local, align 4
  store i32 %v5_a724, i32* %r1.global-to-local, align 4
  %v2_acb0 = call i32 @function_f24c(i32 %v1_aca4, i32 %v5_a724)
  store i32 %v2_acb0, i32* %r0.global-to-local, align 4
  store i32 %v5_a724, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_acbc = load i32, i32* @r4, align 4
  %v4_acbc = add i32 %v2_acbc, %v5_a724
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 0, i8* %v5_acbc, align 1
  br label %dec_label_pc_aae8

dec_label_pc_acc4:                                ; preds = %dec_label_pc_aae8, %dec_label_pc_aa10
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_acc8 = call i32 @function_12148(i32* null)
  store i32 %v2_acc8, i32* %r0.global-to-local, align 4
  store i32 %v2_a788, i32* %ip.global-to-local, align 4
  %v9_acd0 = icmp eq i32 %v2_a788, %v2_acc8
  store i1 %v9_acd0, i1* %cpsr_z.global-to-local, align 1
  %v6_acd4 = icmp slt i32 %v2_a788, %v2_acc8
  br i1 %v6_acd4, label %dec_label_pc_acd8, label %dec_label_pc_aa10

dec_label_pc_acd8:                                ; preds = %dec_label_pc_acc4, %dec_label_pc_a62c, %dec_label_pc_ace4
  %v1_ace0 = phi i32 [ %v3_a79c, %dec_label_pc_a62c ], [ %v1_ace8, %dec_label_pc_ace4 ], [ %v2_acc8, %dec_label_pc_acc4 ]
  store i32 %v3_a62c, i32* %r4.global-to-local, align 4
  store i32 %v24_a62c, i32* %fp.global-to-local, align 4
  store i32 %v27_a62c, i32* %lr.global-to-local, align 4
  ret i32 %v1_ace0

dec_label_pc_ace4:                                ; preds = %dec_label_pc_a7ac
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v1_ace8 = call i32 @function_124c8(i32 %v3_a79c)
  store i32 %v1_ace8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_acd8

; uselistorder directives
  uselistorder i32 %v1_ace8, { 1, 0 }
  uselistorder i16 %v1_ac7c, { 1, 0 }
  uselistorder i32 %v0_ac7c, { 1, 0 }
  uselistorder i32 %v0_ac68, { 1, 0 }
  uselistorder i32 %v1_ac60, { 1, 0 }
  uselistorder i32 %v3_ac48, { 1, 0 }
  uselistorder i32 %v0_ac40, { 1, 0 }
  uselistorder i32 %v5_ac14, { 1, 0 }
  uselistorder i32 %v3_abc4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_abac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_ab84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ab34, { 1, 0, 2 }
  uselistorder i32 %v4_ab30, { 1, 0 }
  uselistorder i32 %v2_ab10, { 1, 0 }
  uselistorder i1 %v2_ac84, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ac34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_aa3c, { 2, 1, 0 }
  uselistorder i32 %v0_a9bc, { 1, 0, 2 }
  uselistorder i32 %v0_a8d4, { 1, 2, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v1_a828, { 2, 0, 1 }
  uselistorder i32 %v3_a820, { 2, 1, 0 }
  uselistorder i1 %v2_a7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a7ec, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a7e8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_a7e4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_a7e0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a7dc, { 1, 0 }
  uselistorder i1 %v7_a7cc, { 1, 0 }
  uselistorder i1 %v7_a7a0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a788, { 2, 1, 0 }
  uselistorder i32 %v5_a778, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a744, { 1, 2, 0 }
  uselistorder i32 %v5_a724, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_a6f0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_a6d8, { 1, 0 }
  uselistorder i32 %v1_a6b4, { 2, 1, 0 }
  uselistorder i32 %v5_a6ac, { 1, 0 }
  uselistorder i8 %v5_a690, { 0, 2, 1 }
  uselistorder i32 %v6_a670, { 1, 0 }
  uselistorder i32 %v2_a658, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 48, 5, 6, 8, 9, 7, 11, 10, 13, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 6, 5, 4, 1, 0, 3, 2, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_acd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aae8, { 1, 0 }
  uselistorder label %dec_label_pc_aa84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_acf4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_acf4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_acf4 = load i32, i32* @r4, align 4
  %v24_acf4 = load i32, i32* @fp, align 4
  %v27_acf4 = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ad20 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_ad24 = load i32, i32* @r4, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ad30 = load i32, i32* @sb, align 4
  store i32 %v0_ad30, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r5, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_9fe8(i32 %v0_ad34, i32* %v5_ad38, i32 2, i32 %v0_ad30)
  %v1_ad44 = urem i32 %v6_ad38, 256
  store i32 %v1_ad44, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ad50 = load i32, i32* @r4, align 4
  store i32 %v0_ad50, i32* %r1.global-to-local, align 4
  %v0_ad54 = load i32, i32* @r5, align 4
  %v5_ad58 = trunc i32 %v6_ad38 to i8
  %v6_ad5c = inttoptr i32 %v0_ad50 to i32*
  %v7_ad5c = call i32 @function_9fe8(i32 %v0_ad54, i32* %v6_ad5c, i32 3, i32 65535)
  %v0_ad60 = load i32, i32* @r4, align 4
  store i32 %v0_ad60, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_ad70 = load i32, i32* @r5, align 4
  %v5_ad74 = inttoptr i32 %v0_ad60 to i32*
  %v6_ad74 = call i32 @function_9fe8(i32 %v0_ad70, i32* %v5_ad74, i32 4, i32 64)
  %v1_ad7c = urem i32 %v6_ad74, 256
  store i32 %v1_ad7c, i32* %ip.global-to-local, align 4
  %v0_ad80 = load i32, i32* @r4, align 4
  store i32 %v0_ad80, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad8c = load i32, i32* @r5, align 4
  %v6_ad94 = inttoptr i32 %v0_ad80 to i32*
  %v7_ad94 = call i32 @function_9fe8(i32 %v0_ad8c, i32* %v6_ad94, i32 5, i32 1)
  %v1_ada0 = urem i32 %v7_ad94, 256
  store i32 %v1_ada0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  store i32 %v0_adac, i32* %r1.global-to-local, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %v5_adb8 = inttoptr i32 %v0_adac to i32*
  %v6_adb8 = call i32 @function_9fe8(i32 %v0_adb0, i32* %v5_adb8, i32 6, i32 65535)
  %v0_adc0 = load i32, i32* @r4, align 4
  store i32 %v0_adc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_adb8, i32* %fp.global-to-local, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  %v4_add4 = inttoptr i32 %v0_adc0 to i32*
  %v5_add4 = call i32 @function_9fe8(i32 %v0_add0, i32* %v4_add4, i32 7, i32 65535)
  %v0_add8 = load i32, i32* @r4, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @sb, align 4
  store i32 %v0_addc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_add4, i32* @r8, align 4
  %v0_ade8 = load i32, i32* @r5, align 4
  %v4_adec = inttoptr i32 %v0_add8 to i32*
  %v5_adec = call i32 @function_9fe8(i32 %v0_ade8, i32* %v4_adec, i32 %v0_addc, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  store i32 %v0_adfc, i32* %r1.global-to-local, align 4
  %v0_ae00 = load i32, i32* @r5, align 4
  %v4_ae04 = inttoptr i32 %v0_adfc to i32*
  %v5_ae04 = call i32 @function_9fe8(i32 %v0_ae00, i32* %v4_ae04, i32 1, i32 1)
  %v1_ae0c = urem i32 %v5_ae04, 256
  store i32 %v1_ae0c, i32* %ip.global-to-local, align 4
  %v0_ae10 = load i32, i32* @r4, align 4
  store i32 %v0_ae10, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ae18 = load i32, i32* @sb, align 4
  store i32 %v0_ae18, i32* %r3.global-to-local, align 4
  %v0_ae1c = load i32, i32* @r5, align 4
  %v5_ae24 = inttoptr i32 %v0_ae10 to i32*
  %v6_ae24 = call i32 @function_9fe8(i32 %v0_ae1c, i32* %v5_ae24, i32 18, i32 %v0_ae18)
  %v0_ae2c = load i32, i32* @r4, align 4
  store i32 %v0_ae2c, i32* %r1.global-to-local, align 4
  %v2_ae30 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_ae30, i32* %r3.global-to-local, align 4
  store i32 %v6_ae24, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_ae3c = load i32, i32* @r5, align 4
  %v4_ae40 = inttoptr i32 %v0_ae2c to i32*
  %v5_ae40 = call i32 @function_9fe8(i32 %v0_ae3c, i32* %v4_ae40, i32 24, i32 %v2_ae30)
  %v0_ae48 = load i32, i32* @sb, align 4
  %v1_ae4c = inttoptr i32 %v0_ae48 to i32*
  %v2_ae4c = call i32 @function_12148(i32* %v1_ae4c)
  %v1_ae50 = load i32, i32* @r6, align 4
  %v2_ae50 = add i32 %v1_ae50, %v2_ae4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae64 = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  %v7_ae68 = icmp eq i32 %v3_ae64, -1
  store i1 %v7_ae68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae68, label %dec_label_pc_b338, label %dec_label_pc_ae74

dec_label_pc_ae74:                                ; preds = %dec_label_pc_acf4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ae7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ae7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_ae84 = load i32, i32* @sb, align 4
  store i32 %v0_ae84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ae90 = call i32 @function_12c90(i32 %v3_ae64, i32 %v0_ae84, i32 3, i32 %v6_ae7c, i32 4)
  %v7_ae94 = icmp eq i32 %v5_ae90, -1
  store i1 %v7_ae94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae94, label %dec_label_pc_b344, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae74
  %v0_ae9c = load i32, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_aeb0 = load i32, i32* @r8, align 4
  %v3_aeb4 = mul i32 %v7_ad5c, 65536
  store i32 %v3_aeb4, i32* %r1.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r7, align 4
  %v1_aeb8 = urem i32 %v0_aeb8, 256
  store i32 %v1_aeb8, i32* @r7, align 4
  %v3_aebc = urem i32 %v0_ae9c, 65536
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v3_aec0 = urem i32 %v0_aeb0, 65536
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v2_aec4 = icmp eq i32 %arg2, 0
  store i1 %v2_aec4, i1* %cpsr_z.global-to-local, align 1
  %v0_aed4 = load i32, i32* @sb, align 4
  store i32 %v0_aed4, i32* %stack_var_-44, align 4
  %v3_aed8 = urem i32 %v7_ad5c, 65536
  store i32 %v3_aed8, i32* @fp, align 4
  br i1 %v2_aec4, label %dec_label_pc_b0cc.preheader, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_ae9c
  %v3_aeb0 = mul i32 %v0_aeb0, 65536
  %v3_ae9c = mul i32 %v0_ae9c, 65536
  %v3_aeec = mul i32 %v5_adec, 65536
  %v1_aef0 = add i32 %v3_aeec, 3407872
  %tmp68 = udiv i32 %v1_aef0, 256
  %v3_aefc = and i32 %tmp68, 65280
  %v7_ad5c.not = or i32 %v7_ad5c, -65536
  %v1_af00 = xor i32 %v7_ad5c.not, 65535
  %v4_af04 = udiv i32 %v1_aef0, 16777216
  %v5_af04 = or i32 %v3_aefc, %v4_af04
  store i32 %v3_aeb4, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v7_ad5c, 256
  %v3_af1c = and i32 %tmp69, 65280
  %tmp70 = mul nsw i32 %v1_af00, 256
  %v3_af20 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v7_ad5c, 256
  %v4_af24 = urem i32 %tmp71, 256
  %v5_af24 = or i32 %v4_af24, %v3_af1c
  %tmp72 = udiv i32 %v1_af00, 256
  %v4_af2c = urem i32 %tmp72, 256
  %v5_af2c = or i32 %v4_af2c, %v3_af20
  store i32 %v5_af2c, i32* @r6, align 4
  store i32 %v3_ae9c, i32* %r1.global-to-local, align 4
  store i32 %v3_aeb0, i32* %r2.global-to-local, align 4
  %v1_af40 = add i32 %v3_aeec, 524288
  %tmp73 = mul i32 %v0_ae9c, 256
  %v3_af44 = and i32 %tmp73, 65280
  %v1_af48 = add i32 %v3_aeec, 1835008
  store i32 %v1_af48, i32* @r5, align 4
  %tmp74 = mul i32 %v0_aeb0, 256
  %v3_af4c = and i32 %tmp74, 65280
  %v3_af54 = udiv i32 %v1_af48, 256
  %tmp75 = udiv i32 %v0_ae9c, 256
  %v4_af58 = urem i32 %tmp75, 256
  %v5_af58 = or i32 %v4_af58, %v3_af44
  %tmp76 = udiv i32 %v0_aeb0, 256
  %v4_af5c = urem i32 %tmp76, 256
  %v5_af5c = or i32 %v4_af5c, %v3_af4c
  store i32 %v5_af5c, i32* %ip.global-to-local, align 4
  %v1_af60 = and i32 %v3_af54, 65280
  %tmp77 = udiv i32 %v1_af40, 256
  %v3_af64 = and i32 %tmp77, 65280
  store i32 %v3_af64, i32* @lr, align 4
  %v4_af78 = udiv i32 %v1_af40, 16777216
  %v5_af78 = or i32 %v3_af64, %v4_af78
  store i32 %v5_af78, i32* @r7, align 4
  %v4_af7c = udiv i32 %v1_af48, 16777216
  %v5_af7c = or i32 %v1_af60, %v4_af7c
  store i32 %v5_af7c, i32* @r8, align 4
  store i32 %v0_aed4, i32* @r4, align 4
  %v4_afd4 = sext i8 %v5_ad58 to i32
  %v1_afe0 = trunc i32 %v6_ad74 to i8
  %sext = mul nuw i32 %v5_af04, 65536
  %v4_afe8 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_af24, 65536
  %v4_afec = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_af2c, 65536
  %v4_b054 = sdiv i32 %sext9, 65536
  %v2_b084 = icmp eq i32 %v1_aeb8, 0
  %sext10 = mul nuw i32 %v5_af58, 65536
  %v4_b0a8 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_af5c, 65536
  %v4_b0b0 = sdiv i32 %sext11, 65536
  %extract.t = trunc i32 %v4_afe8 to i16
  br label %dec_label_pc_af84

dec_label_pc_af84:                                ; preds = %bb82, %dec_label_pc_aee8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_af90 = call i32 @function_1383c(i32 1510, i32 4)
  store i32 %v2_ad20, i32* %ip.global-to-local, align 4
  %v2_af9c = load i32, i32* @r4, align 4
  %v5_af9c = mul i32 %v2_af9c, 4
  %v6_af9c = add i32 %v5_af9c, %v2_ad20
  %v7_af9c = inttoptr i32 %v6_af9c to i32*
  store i32 %v2_af90, i32* %v7_af9c, align 4
  %v3_afa0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afa0, i32* %r3.global-to-local, align 4
  %v0_afa4 = load i32, i32* %ip.global-to-local, align 4
  %v4_afa4 = mul i32 %v3_afa0, 4
  %v5_afa4 = add i32 %v0_afa4, %v4_afa4
  %v6_afa4 = inttoptr i32 %v5_afa4 to i32*
  %v7_afa4 = load i32, i32* %v6_afa4, align 4
  store i32 %v7_afa4, i32* %r4.global-to-local, align 4
  %v1_afa8 = inttoptr i32 %v7_afa4 to i8*
  %v2_afa8 = load i8, i8* %v1_afa8, align 1
  %tmp = urem i8 %v2_afa8, 16
  %v1_afac = zext i8 %tmp to i32
  %v1_afb0 = or i32 %v1_afac, 64
  store i32 %v1_afb0, i32* %r2.global-to-local, align 4
  %v1_afb4 = trunc i32 %v1_afb0 to i8
  store i8 %v1_afb4, i8* %v1_afa8, align 1
  %v0_afb8 = load i32, i32* %r3.global-to-local, align 4
  %v5_afbc = mul i32 %v0_afb8, 24
  store i32 %v5_afbc, i32* %r1.global-to-local, align 4
  %v0_afc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_afc0 = inttoptr i32 %v0_afc0 to i8*
  %v2_afc0 = load i8, i8* %v1_afc0, align 1
  %v1_afc4 = and i8 %v2_afc0, -16
  %v1_afc8 = or i8 %v1_afc4, 5
  store i32 %v1_ada0, i32* %lr.global-to-local, align 4
  store i8 %v1_afc8, i8* %v1_afc0, align 1
  store i32 %v4_afd4, i32* %r2.global-to-local, align 4
  %v2_afd8 = load i32, i32* %r4.global-to-local, align 4
  %v3_afd8 = add i32 %v2_afd8, 1
  %v4_afd8 = inttoptr i32 %v3_afd8 to i8*
  store i8 %v5_ad58, i8* %v4_afd8, align 1
  store i32 %v1_ad7c, i32* %r3.global-to-local, align 4
  %v2_afe0 = load i32, i32* %r4.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 8
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  %v0_afe4 = load i32, i32* %lr.global-to-local, align 4
  %v2_afe4 = icmp eq i32 %v0_afe4, 0
  store i1 %v2_afe4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_afe8, i32* %ip.global-to-local, align 4
  store i32 %v4_afec, i32* %lr.global-to-local, align 4
  br i1 %v2_afe4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_aff4 = load i32, i32* %r4.global-to-local, align 4
  %v4_aff4 = add i32 %v3_aff4, 6
  %v5_aff4 = inttoptr i32 %v4_aff4 to i16*
  store i16 64, i16* %v5_aff4, align 2
  %v0_aff8.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_aff8.pre to i16
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af84, %bb
  %v0_aff8.off0 = phi i16 [ %extract.t, %dec_label_pc_af84 ], [ %extract.t27, %bb ]
  %v2_aff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aff8 = add i32 %v2_aff8, 2
  %v4_aff8 = inttoptr i32 %v3_aff8 to i16*
  store i16 %v0_aff8.off0, i16* %v4_aff8, align 2
  %v0_affc = load i32, i32* %r4.global-to-local, align 4
  %v1_affc = add i32 %v0_affc, 20
  store i32 %v1_affc, i32* %r2.global-to-local, align 4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v3_b008 = add i32 %v0_affc, 9
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 47, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* %lr.global-to-local, align 4
  %v1_b00c = trunc i32 %v0_b00c to i16
  %v2_b00c = load i32, i32* %r4.global-to-local, align 4
  %v3_b00c = add i32 %v2_b00c, 4
  %v4_b00c = inttoptr i32 %v3_b00c to i16*
  store i16 %v1_b00c, i16* %v4_b00c, align 2
  %v0_b010 = load i32, i32* %ip.global-to-local, align 4
  %v1_b010 = trunc i32 %v0_b010 to i16
  %v2_b010 = load i32, i32* %r2.global-to-local, align 4
  %v3_b010 = add i32 %v2_b010, 2
  %v4_b010 = inttoptr i32 %v3_b010 to i16*
  store i16 %v1_b010, i16* %v4_b010, align 2
  store i32 %v5_ae40, i32* %lr.global-to-local, align 4
  %v0_b018 = load i32, i32* %r4.global-to-local, align 4
  %v1_b018 = add i32 %v0_b018, 24
  %v2_b018 = inttoptr i32 %v1_b018 to i8*
  %v3_b018 = load i8, i8* %v2_b018, align 1
  %v4_b018 = zext i8 %v3_b018 to i32
  store i32 %v4_b018, i32* %r2.global-to-local, align 4
  %v2_b01c = add i32 %v0_b018, 12
  %v3_b01c = inttoptr i32 %v2_b01c to i32*
  store i32 %v5_ae40, i32* %v3_b01c, align 4
  %v0_b020 = load i32, i32* %r2.global-to-local, align 4
  %v1_b020 = and i32 %v0_b020, -241
  %v1_b024 = or i32 %v1_b020, 64
  store i32 %v1_b024, i32* %r2.global-to-local, align 4
  %v0_b028 = load i32, i32* %r1.global-to-local, align 4
  %v1_b028 = load i32, i32* @sl, align 4
  %v2_b028 = add i32 %v1_b028, %v0_b028
  store i32 %v2_b028, i32* %r1.global-to-local, align 4
  %v1_b02c = add i32 %v2_b028, 16
  %v2_b02c = inttoptr i32 %v1_b02c to i32*
  %v3_b02c = load i32, i32* %v2_b02c, align 4
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v1_b030 = trunc i32 %v1_b024 to i8
  %v2_b030 = load i32, i32* %r4.global-to-local, align 4
  %v3_b030 = add i32 %v2_b030, 24
  %v4_b030 = inttoptr i32 %v3_b030 to i8*
  store i8 %v1_b030, i8* %v4_b030, align 1
  %v0_b034 = load i32, i32* %r4.global-to-local, align 4
  %v1_b034 = add i32 %v0_b034, 24
  %v2_b034 = inttoptr i32 %v1_b034 to i8*
  %v3_b034 = load i8, i8* %v2_b034, align 1
  %v1_b038 = and i8 %v3_b034, -16
  %v1_b03c = or i8 %v1_b038, 5
  store i8 %v1_b03c, i8* %v2_b034, align 1
  %v0_b044 = load i32, i32* %r1.global-to-local, align 4
  %v1_b044 = load i32, i32* %r4.global-to-local, align 4
  %v2_b044 = add i32 %v1_b044, 16
  %v3_b044 = inttoptr i32 %v2_b044 to i32*
  store i32 %v0_b044, i32* %v3_b044, align 4
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  %v0_b04c = load i32, i32* %r4.global-to-local, align 4
  %v1_b04c = add i32 %v0_b04c, 24
  store i32 %v1_b04c, i32* @r5, align 4
  %v3_b050 = add i32 %v0_b04c, 25
  %v4_b050 = inttoptr i32 %v3_b050 to i8*
  store i8 %v5_ad58, i8* %v4_b050, align 1
  store i32 %v4_b054, i32* %r2.global-to-local, align 4
  %v0_b058 = load i32, i32* @r8, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r5, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  %v0_b05c = load i32, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v0_b05c to i16
  %v2_b05c = load i32, i32* @r5, align 4
  %v3_b05c = add i32 %v2_b05c, 4
  %v4_b05c = inttoptr i32 %v3_b05c to i16*
  store i16 %v1_b05c, i16* %v4_b05c, align 2
  store i32 %v1_ad7c, i32* %r3.global-to-local, align 4
  %v0_b064 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b064, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 64, i32* %ip.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v2_b068 = load i32, i32* @r5, align 4
  %v3_b068 = add i32 %v2_b068, 8
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_afe0, i8* %v4_b068, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b070, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_b070 = load i32, i32* %ip.global-to-local, align 4
  %v2_b070 = trunc i32 %v1_b070 to i16
  %v3_b070 = load i32, i32* @r5, align 4
  %v4_b070 = add i32 %v3_b070, 6
  %v5_b070 = inttoptr i32 %v4_b070 to i16*
  store i16 %v2_b070, i16* %v5_b070, align 2
  %v0_b074.pre = load i32, i32* %r3.global-to-local, align 4
  %extract.t28 = trunc i32 %v0_b074.pre to i8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_b074.off0 = phi i8 [ 17, %bb79 ], [ %extract.t28, %bb80 ]
  %v2_b074 = load i32, i32* @r5, align 4
  %v3_b074 = add i32 %v2_b074, 9
  %v4_b074 = inttoptr i32 %v3_b074 to i8*
  store i8 %v0_b074.off0, i8* %v4_b074, align 1
  %v0_b078 = call i32 @function_f188()
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b084, i1* %cpsr_z.global-to-local, align 1
  %v1_b088 = sub i32 1023, %v0_b078
  store i32 %v1_b088, i32* %r3.global-to-local, align 4
  br i1 %v2_b084, label %.thread12, label %.thread13

.thread12:                                        ; preds = %bb81
  %v2_b090 = load i32, i32* @r5, align 4
  %v3_b090 = add i32 %v2_b090, 16
  %v4_b090 = inttoptr i32 %v3_b090 to i32*
  store i32 %v1_b088, i32* %v4_b090, align 4
  br label %bb82

.thread13:                                        ; preds = %bb81
  %v1_b08c = load i32, i32* %r4.global-to-local, align 4
  %v2_b08c = add i32 %v1_b08c, 16
  %v3_b08c = inttoptr i32 %v2_b08c to i32*
  %v4_b08c = load i32, i32* %v3_b08c, align 4
  store i32 %v4_b08c, i32* %r3.global-to-local, align 4
  %v2_b094 = load i32, i32* @r5, align 4
  %v3_b094 = add i32 %v2_b094, 16
  %v4_b094 = inttoptr i32 %v3_b094 to i32*
  store i32 %v4_b08c, i32* %v4_b094, align 4
  br label %bb82

bb82:                                             ; preds = %.thread12, %.thread13
  %v1_b098 = load i32, i32* @r5, align 4
  %v2_b098 = add i32 %v1_b098, 12
  %v3_b098 = inttoptr i32 %v2_b098 to i32*
  store i32 %v0_b078, i32* %v3_b098, align 4
  %v3_b09c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_b0a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b0a4 = add i32 %v0_b0a4, 44
  store i32 %v1_b0a4, i32* @r6, align 4
  store i32 %v4_b0a8, i32* %r2.global-to-local, align 4
  %v1_b0ac = add i32 %v3_b09c, 1
  store i32 %v1_b0ac, i32* @r4, align 4
  store i32 %v4_b0b0, i32* %r3.global-to-local, align 4
  %v9_b0b4 = icmp eq i32 %v1_b0ac, %arg2
  store i1 %v9_b0b4, i1* %cpsr_z.global-to-local, align 1
  %v0_b0b8 = load i32, i32* @r7, align 4
  %v1_b0b8 = trunc i32 %v0_b0b8 to i16
  %v3_b0b8 = add i32 %v0_b0a4, 48
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i16*
  store i16 %v1_b0b8, i16* %v4_b0b8, align 2
  %v0_b0bc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r6, align 4
  %v3_b0bc = inttoptr i32 %v2_b0bc to i16*
  store i16 %v1_b0bc, i16* %v3_b0bc, align 2
  %v0_b0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0c0 = trunc i32 %v0_b0c0 to i16
  %v2_b0c0 = load i32, i32* @r6, align 4
  %v3_b0c0 = add i32 %v2_b0c0, 2
  %v4_b0c0 = inttoptr i32 %v3_b0c0 to i16*
  store i16 %v1_b0c0, i16* %v4_b0c0, align 2
  %v0_b0c4 = load i32, i32* @r4, align 4
  store i32 %v0_b0c4, i32* %stack_var_-44, align 4
  %v5_b0c8 = icmp slt i32 %v1_b0ac, %arg2
  br i1 %v5_b0c8, label %dec_label_pc_af84, label %dec_label_pc_b0cc.preheader

dec_label_pc_b0cc.preheader:                      ; preds = %bb82, %dec_label_pc_ae9c
  %v1_b0e8 = add i32 %v5_adec, 8
  %v1_b0ec = add i32 %v5_adec, 52
  %v2_b0f8 = icmp eq i32 %v5_ae40, -1
  %v7_b0f8 = icmp eq i32 %v5_ae40, -1
  %v2_b2dc = icmp eq i32 %v1_aeb8, 0
  %v2_b2f8 = icmp eq i32 %v1_ae0c, 0
  br label %dec_label_pc_b0cc

dec_label_pc_b0cc:                                ; preds = %dec_label_pc_b0cc.preheader, %dec_label_pc_b324
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_aec4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aec4, label %dec_label_pc_b324, label %dec_label_pc_b0e0

dec_label_pc_b0e0:                                ; preds = %dec_label_pc_b0cc
  store i32 %v5_adec, i32* %lr.global-to-local, align 4
  store i32 %v1_b0e8, i32* @sb, align 4
  store i32 %v1_b0ec, i32* @r8, align 4
  br label %dec_label_pc_b1f8

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_b1f8
  store i32 %v5_ae40, i32* %r2.global-to-local, align 4
  store i1 %v7_b0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b0f8, label %dec_label_pc_b280, label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b220, %dec_label_pc_b0f4
  store i32 65535, i32* @r4, align 4
  %v0_b108 = load i32, i32* @fp, align 4
  %v9_b108 = icmp eq i32 %v0_b108, 65535
  store i1 %v9_b108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b108, label %dec_label_pc_b298, label %dec_label_pc_b110

dec_label_pc_b110:                                ; preds = %dec_label_pc_b280.dec_label_pc_b110_crit_edge, %dec_label_pc_b100
  %v1_b114 = phi i32 [ %v1_b114.pre, %dec_label_pc_b280.dec_label_pc_b110_crit_edge ], [ 65535, %dec_label_pc_b100 ]
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v9_b114 = icmp eq i32 %v3_aebc, %v1_b114
  store i1 %v9_b114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b114, label %dec_label_pc_b2c0, label %dec_label_pc_b11c

dec_label_pc_b11c:                                ; preds = %dec_label_pc_b298, %dec_label_pc_b110
  %v1_b120 = phi i32 [ %v1_b2b8, %dec_label_pc_b298 ], [ %v1_b114, %dec_label_pc_b110 ]
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v9_b120 = icmp eq i32 %v3_aec0, %v1_b120
  store i1 %v9_b120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b120, label %dec_label_pc_b2d4, label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b2c0, %dec_label_pc_b11c
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2dc, label %dec_label_pc_b2f0, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_b128
  %v1_b130 = load i32, i32* @r5, align 4
  %v2_b130 = add i32 %v1_b130, 16
  %v3_b130 = inttoptr i32 %v2_b130 to i32*
  %v4_b130 = load i32, i32* %v3_b130, align 4
  store i32 %v4_b130, i32* %r3.global-to-local, align 4
  %v2_b134 = load i32, i32* @r6, align 4
  %v3_b134 = add i32 %v2_b134, 16
  %v4_b134 = inttoptr i32 %v3_b134 to i32*
  store i32 %v4_b130, i32* %v4_b134, align 4
  br label %dec_label_pc_b13c

dec_label_pc_b13c:                                ; preds = %bb85, %.thread14
  store i32 %v1_ae0c, i32* %r1.global-to-local, align 4
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2f8, label %dec_label_pc_b148, label %dec_label_pc_b304

dec_label_pc_b148:                                ; preds = %dec_label_pc_b13c, %dec_label_pc_b2f0, %dec_label_pc_b304
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b14c = load i32, i32* @r5, align 4
  %v3_b14c = add i32 %v2_b14c, 10
  %v4_b14c = inttoptr i32 %v3_b14c to i16*
  store i16 0, i16* %v4_b14c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b154 = load i32, i32* @r5, align 4
  store i32 %v0_b154, i32* @r0, align 4
  %v2_b158 = call i32 @function_dd58(i32 %v0_b154, i32 20)
  %v3_b158 = trunc i32 %v2_b158 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_b160 = load i32, i32* @r5, align 4
  %v4_b160 = add i32 %v3_b160, 10
  %v5_b160 = inttoptr i32 %v4_b160 to i16*
  store i16 %v3_b158, i16* %v5_b160, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b168 = load i32, i32* %ip.global-to-local, align 4
  %v1_b168 = trunc i32 %v0_b168 to i16
  %v2_b168 = load i32, i32* @r6, align 4
  %v3_b168 = add i32 %v2_b168, 10
  %v4_b168 = inttoptr i32 %v3_b168 to i16*
  store i16 %v1_b168, i16* %v4_b168, align 2
  %v0_b16c = load i32, i32* @r6, align 4
  store i32 %v0_b16c, i32* @r0, align 4
  %v2_b170 = call i32 @function_dd58(i32 %v0_b16c, i32 20)
  %v3_b170 = trunc i32 %v2_b170 to i16
  %v3_b174 = load i32, i32* @r6, align 4
  %v4_b174 = add i32 %v3_b174, 10
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v3_b170, i16* %v5_b174, align 2
  %v2_b17c = load i32, i32* @r7, align 4
  %v3_b17c = add i32 %v2_b17c, 6
  %v4_b17c = inttoptr i32 %v3_b17c to i16*
  store i16 0, i16* %v4_b17c, align 2
  %v0_b180 = load i32, i32* @r7, align 4
  store i32 %v0_b180, i32* @r1, align 4
  %v1_b184 = add i32 %v0_b180, 4
  %v2_b184 = inttoptr i32 %v1_b184 to i16*
  %v3_b184 = load i16, i16* %v2_b184, align 2
  %v4_b184 = zext i16 %v3_b184 to i32
  store i32 %v4_b184, i32* %r2.global-to-local, align 4
  %v0_b188 = load i32, i32* @sb, align 4
  store i32 %v0_b188, i32* %r3.global-to-local, align 4
  %v0_b18c = load i32, i32* @r6, align 4
  %v4_b190 = call i32 @function_dda8(i32 %v0_b18c, i32 %v0_b180, i32 %v4_b184, i32 %v0_b188)
  %v5_b190 = trunc i32 %v4_b190 to i16
  %v3_b194 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b194, i32* %r2.global-to-local, align 4
  %v3_b198 = mul i32 %v3_b194, 32
  store i32 %v3_b198, i32* %r3.global-to-local, align 4
  %v0_b19c = load i32, i32* @r5, align 4
  %v1_b19c = add i32 %v0_b19c, 16
  %v2_b19c = inttoptr i32 %v1_b19c to i32*
  %v3_b19c = load i32, i32* %v2_b19c, align 4
  %v5_b1a0 = mul i32 %v3_b194, 24
  store i32 %v5_b1a0, i32* %r3.global-to-local, align 4
  %v1_b1a4 = load i32, i32* @sl, align 4
  %v2_b1a4 = add i32 %v1_b1a4, %v5_b1a0
  store i32 %v2_b1a4, i32* @lr, align 4
  %v2_b1a8 = add i32 %v2_b1a4, 4
  %v3_b1a8 = inttoptr i32 %v2_b1a8 to i32*
  store i32 %v3_b19c, i32* %v3_b1a8, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_b1b4 = load i32, i32* @r7, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 6
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v5_b190, i16* %v5_b1b4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b1bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1bc = trunc i32 %v0_b1bc to i16
  %v2_b1bc = load i32, i32* %r3.global-to-local, align 4
  %v3_b1bc = load i32, i32* @sl, align 4
  %v4_b1bc = add i32 %v3_b1bc, %v2_b1bc
  %v5_b1bc = inttoptr i32 %v4_b1bc to i16*
  store i16 %v1_b1bc, i16* %v5_b1bc, align 2
  %v0_b1c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b1c0 = trunc i32 %v0_b1c0 to i16
  %v2_b1c0 = load i32, i32* @lr, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 2
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i16*
  store i16 %v1_b1c0, i16* %v4_b1c0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r5, align 4
  store i32 %v0_b1c8, i32* %r1.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r2.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @lr, align 4
  %v0_b1d8 = load i32, i32* %ip.global-to-local, align 4
  %v6_b1dc = call i32 @function_12c50(i32 %v3_ae64, i32 %v0_b1c8, i32 %v0_b1d0, i32 16384, i32 %v0_b1d4, i32 %v0_b1d8)
  %v3_b1e0 = load i32, i32* %stack_var_-44, align 4
  %v1_b1e4 = add i32 %v3_b1e0, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_b1ec = icmp eq i32 %v1_b1e4, %arg2
  store i1 %v9_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b1e4, i32* %stack_var_-44, align 4
  %v6_b1f4 = icmp slt i32 %v1_b1e4, %arg2
  br i1 %v6_b1f4, label %dec_label_pc_b1f8, label %dec_label_pc_b324

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b148, %dec_label_pc_b0e0
  %v1_b20c = phi i32 [ %v1_b1e4, %dec_label_pc_b148 ], [ 0, %dec_label_pc_b0e0 ]
  %v5_b1fc = mul i32 %v1_b20c, 24
  %v1_b200 = load i32, i32* @sl, align 4
  %v2_b200 = add i32 %v1_b200, %v5_b1fc
  store i32 %v2_b200, i32* %r3.global-to-local, align 4
  store i32 %v2_ad20, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b200, 20
  %v2_b208 = inttoptr i32 %v1_b208 to i8*
  %v3_b208 = load i8, i8* %v2_b208, align 1
  %v4_b208 = zext i8 %v3_b208 to i32
  store i32 %v4_b208, i32* %r2.global-to-local, align 4
  %v4_b20c = mul i32 %v1_b20c, 4
  %v5_b20c = add i32 %v4_b20c, %v2_ad20
  %v6_b20c = inttoptr i32 %v5_b20c to i32*
  %v7_b20c = load i32, i32* %v6_b20c, align 4
  store i32 %v7_b20c, i32* @r5, align 4
  %v2_b210 = icmp ugt i8 %v3_b208, 30
  %v7_b210 = icmp eq i8 %v3_b208, 31
  store i1 %v7_b210, i1* %cpsr_z.global-to-local, align 1
  %v1_b214 = add i32 %v7_b20c, 24
  store i32 %v1_b214, i32* @r6, align 4
  %v1_b218 = add i32 %v7_b20c, 44
  store i32 %v1_b218, i32* @r7, align 4
  %v2_b21c = xor i1 %v7_b210, true
  %v3_b21c = and i1 %v2_b210, %v2_b21c
  br i1 %v3_b21c, label %dec_label_pc_b0f4, label %dec_label_pc_b220

dec_label_pc_b220:                                ; preds = %dec_label_pc_b1f8
  %v1_b220 = add i32 %v2_b200, 16
  %v2_b220 = inttoptr i32 %v1_b220 to i32*
  %v3_b220 = load i32, i32* %v2_b220, align 4
  store i32 %v3_b220, i32* %r4.global-to-local, align 4
  %v0_b224 = call i32 @function_f188()
  %v3_b228 = load i32, i32* %stack_var_-44, align 4
  %v5_b230 = mul i32 %v3_b228, 24
  %v1_b234 = and i32 %v3_b220, 16711680
  store i32 %v1_b234, i32* %ip.global-to-local, align 4
  %v3_b238 = udiv i32 %v3_b220, 16777216
  %v4_b23c = udiv i32 %v1_b234, 256
  %v5_b23c = or i32 %v4_b23c, %v3_b238
  store i32 %v5_b23c, i32* %r2.global-to-local, align 4
  %v1_b240 = load i32, i32* @sl, align 4
  %v2_b240 = add i32 %v1_b240, %v5_b230
  store i32 %v2_b240, i32* %r1.global-to-local, align 4
  %v1_b244 = and i32 %v3_b220, 65280
  store i32 %v1_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = add i32 %v2_b240, 20
  %v2_b248 = inttoptr i32 %v1_b248 to i8*
  %v3_b248 = load i8, i8* %v2_b248, align 1
  %v4_b248 = zext i8 %v3_b248 to i32
  store i32 %v4_b248, i32* %ip.global-to-local, align 4
  %v5_b250 = call i32 @llvm.bswap.i32(i32 %v3_b220)
  %v7_b254 = lshr i32 %v0_b224, %v4_b248
  %v8_b254 = add i32 %v7_b254, %v5_b250
  %v1_b260 = and i32 %v8_b254, 65280
  store i32 %v1_b260, i32* %r1.global-to-local, align 4
  %v5_b26c = call i32 @llvm.bswap.i32(i32 %v8_b254)
  store i32 %v5_b26c, i32* %r3.global-to-local, align 4
  store i32 %v5_ae40, i32* %r2.global-to-local, align 4
  store i1 %v7_b0f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b278 = load i32, i32* @r5, align 4
  %v2_b278 = add i32 %v1_b278, 16
  %v3_b278 = inttoptr i32 %v2_b278 to i32*
  store i32 %v5_b26c, i32* %v3_b278, align 4
  br i1 %v2_b0f8, label %dec_label_pc_b280, label %dec_label_pc_b100

dec_label_pc_b280:                                ; preds = %dec_label_pc_b220, %dec_label_pc_b0f4
  %v0_b280 = call i32 @function_f188()
  store i32 65535, i32* @r4, align 4
  %v0_b28c = load i32, i32* @fp, align 4
  %v9_b28c = icmp eq i32 %v0_b28c, 65535
  store i1 %v9_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = load i32, i32* @r5, align 4
  %v2_b290 = add i32 %v1_b290, 12
  %v3_b290 = inttoptr i32 %v2_b290 to i32*
  store i32 %v0_b280, i32* %v3_b290, align 4
  br i1 %v9_b28c, label %dec_label_pc_b298, label %dec_label_pc_b280.dec_label_pc_b110_crit_edge

dec_label_pc_b280.dec_label_pc_b110_crit_edge:    ; preds = %dec_label_pc_b280
  %v1_b114.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b110

dec_label_pc_b298:                                ; preds = %dec_label_pc_b280, %dec_label_pc_b100
  %v0_b298 = call i32 @function_f188()
  %v3_b2a0 = urem i32 %v0_b298, 65536
  %v1_b2a8 = sub nsw i32 999, %v3_b2a0
  store i32 %v1_b2a8, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b298 to i16
  %v2_b2ac = load i32, i32* @r5, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = trunc i32 %v0_b2b0 to i16
  %v2_b2b0 = load i32, i32* @r6, align 4
  %v3_b2b0 = add i32 %v2_b2b0, 4
  %v4_b2b0 = inttoptr i32 %v3_b2b0 to i16*
  store i16 %v1_b2b0, i16* %v4_b2b0, align 2
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v1_b2b8 = load i32, i32* @r4, align 4
  %v9_b2b8 = icmp eq i32 %v3_aebc, %v1_b2b8
  store i1 %v9_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b2b8, label %dec_label_pc_b2c0, label %dec_label_pc_b11c

dec_label_pc_b2c0:                                ; preds = %dec_label_pc_b298, %dec_label_pc_b110
  %v0_b2c0 = call i32 @function_f188()
  %v1_b2c0 = trunc i32 %v0_b2c0 to i16
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v1_b2c8 = load i32, i32* @r4, align 4
  %v9_b2c8 = icmp eq i32 %v3_aec0, %v1_b2c8
  store i1 %v9_b2c8, i1* %cpsr_z.global-to-local, align 1
  %v3_b2cc = load i32, i32* @r5, align 4
  %v4_b2cc = add i32 %v3_b2cc, 44
  %v5_b2cc = inttoptr i32 %v4_b2cc to i16*
  store i16 %v1_b2c0, i16* %v5_b2cc, align 2
  br i1 %v9_b2c8, label %dec_label_pc_b2d4, label %dec_label_pc_b128

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2c0, %dec_label_pc_b11c
  %v0_b2d4 = call i32 @function_f188()
  %v1_b2d4 = trunc i32 %v0_b2d4 to i16
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2dc, label %.thread29, label %bb85

.thread29:                                        ; preds = %dec_label_pc_b2d4
  %v3_b2e430 = load i32, i32* @r7, align 4
  %v4_b2e431 = add i32 %v3_b2e430, 2
  %v5_b2e432 = inttoptr i32 %v4_b2e431 to i16*
  store i16 %v1_b2d4, i16* %v5_b2e432, align 2
  br label %dec_label_pc_b2f0

bb85:                                             ; preds = %dec_label_pc_b2d4
  %v1_b2e0 = load i32, i32* @r5, align 4
  %v2_b2e0 = add i32 %v1_b2e0, 16
  %v3_b2e0 = inttoptr i32 %v2_b2e0 to i32*
  %v4_b2e0 = load i32, i32* %v3_b2e0, align 4
  store i32 %v4_b2e0, i32* %r3.global-to-local, align 4
  %v3_b2e4 = load i32, i32* @r7, align 4
  %v4_b2e4 = add i32 %v3_b2e4, 2
  %v5_b2e4 = inttoptr i32 %v4_b2e4 to i16*
  store i16 %v1_b2d4, i16* %v5_b2e4, align 2
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b2e8 = load i32, i32* @r6, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 16
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i32*
  store i32 %v1_b2e8, i32* %v4_b2e8, align 4
  br label %dec_label_pc_b13c

dec_label_pc_b2f0:                                ; preds = %.thread29, %dec_label_pc_b128
  %v0_b2f0 = call i32 @function_f188()
  store i32 %v1_ae0c, i32* %r1.global-to-local, align 4
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2fc = load i32, i32* @r6, align 4
  %v2_b2fc = add i32 %v1_b2fc, 16
  %v3_b2fc = inttoptr i32 %v2_b2fc to i32*
  store i32 %v0_b2f0, i32* %v3_b2fc, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b148, label %dec_label_pc_b304

dec_label_pc_b304:                                ; preds = %dec_label_pc_b13c, %dec_label_pc_b2f0
  %v0_b304 = load i32, i32* @r7, align 4
  %v1_b304 = add i32 %v0_b304, 8
  store i32 %v1_b304, i32* @r4, align 4
  store i32 %v5_adec, i32* %r1.global-to-local, align 4
  %v2_b310 = call i32 @function_f24c(i32 %v1_b304, i32 %v5_adec)
  store i32 %v5_adec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b31c = load i32, i32* @r4, align 4
  %v4_b31c = add i32 %v2_b31c, %v5_adec
  %v5_b31c = inttoptr i32 %v4_b31c to i8*
  store i8 0, i8* %v5_b31c, align 1
  br label %dec_label_pc_b148

dec_label_pc_b324:                                ; preds = %dec_label_pc_b148, %dec_label_pc_b0cc
  %v2_b328 = call i32 @function_12148(i32* null)
  store i32 %v2_ae50, i32* %ip.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v2_ae50, %v2_b328
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  %v6_b334 = icmp slt i32 %v2_ae50, %v2_b328
  br i1 %v6_b334, label %dec_label_pc_b338, label %dec_label_pc_b0cc

dec_label_pc_b338:                                ; preds = %dec_label_pc_b324, %dec_label_pc_acf4, %dec_label_pc_b344
  %v1_b340 = phi i32 [ %v3_ae64, %dec_label_pc_acf4 ], [ %v1_b348, %dec_label_pc_b344 ], [ %v2_b328, %dec_label_pc_b324 ]
  store i32 %v3_acf4, i32* %r4.global-to-local, align 4
  store i32 %v24_acf4, i32* %fp.global-to-local, align 4
  store i32 %v27_acf4, i32* %lr.global-to-local, align 4
  ret i32 %v1_b340

dec_label_pc_b344:                                ; preds = %dec_label_pc_ae74
  %v1_b348 = call i32 @function_124c8(i32 %v3_ae64)
  br label %dec_label_pc_b338

; uselistorder directives
  uselistorder i16 %v1_b2d4, { 1, 0 }
  uselistorder i32 %v1_b2b8, { 1, 0 }
  uselistorder i32 %v0_b298, { 1, 0 }
  uselistorder i32 %v5_b26c, { 1, 0 }
  uselistorder i32 %v3_b220, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_b20c, { 1, 0, 2 }
  uselistorder i32 %v1_b1e4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b194, { 1, 0, 2 }
  uselistorder i1 %v2_b2f8, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b2dc, { 2, 3, 1, 0 }
  uselistorder i1 %v7_b0f8, { 2, 1, 0 }
  uselistorder i32 %v0_b078, { 1, 0 }
  uselistorder i32 %v1_af00, { 1, 0 }
  uselistorder i32 %v3_aeec, { 2, 1, 0 }
  uselistorder i1 %v2_aec4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_aeb8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_aeb4, { 1, 0 }
  uselistorder i32 %v0_aeb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ae9c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_ae94, { 1, 0 }
  uselistorder i1 %v7_ae68, { 1, 0 }
  uselistorder i32 %v3_ae64, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_ae50, { 2, 1, 0 }
  uselistorder i32 %v5_ae40, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_ae0c, { 2, 1, 3, 0 }
  uselistorder i32 %v5_adec, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_ada0, { 1, 0 }
  uselistorder i32 %v1_ad7c, { 2, 1, 0 }
  uselistorder i32 %v6_ad74, { 1, 0 }
  uselistorder i32 %v7_ad5c, { 1, 0, 4, 3, 2 }
  uselistorder i8 %v5_ad58, { 0, 2, 1 }
  uselistorder i32 %v6_ad38, { 1, 0 }
  uselistorder i32 %v2_ad20, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 17, 18, 19, 20, 21, 31, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 15, 16, 23, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 17, 18, 25, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 33, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 14, 13, 16, 15, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 2, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 5, 6, 7 }
  uselistorder i8 47, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 1, 0, 3, 2, 8, 9, 10 }
  uselistorder label %dec_label_pc_b338, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b304, { 1, 0 }
  uselistorder label %dec_label_pc_b148, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b0cc, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b354(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b354:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i8 @__decompiler_undefined_function_4()
  %tmp33 = call i16 @__decompiler_undefined_function_1()
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b354 = load i32, i32* @r4, align 4
  %v27_b354 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @fp, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b380 = call i32 @function_1383c(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_b390 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_b394 = load i32, i32* @r4, align 4
  store i32 %v0_b394, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b3a0 = load i32, i32* @r7, align 4
  store i32 %v0_b3a0, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v5_b3a8 = inttoptr i32 %v0_b394 to i32*
  %v6_b3a8 = call i32 @function_9fe8(i32 %v0_b3a4, i32* %v5_b3a8, i32 2, i32 %v0_b3a0)
  %v1_b3b4 = urem i32 %v6_b3a8, 256
  store i32 %v1_b3b4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3c0 = load i32, i32* @r4, align 4
  store i32 %v0_b3c0, i32* %r1.global-to-local, align 4
  %v0_b3c4 = load i32, i32* @r5, align 4
  store i32 %v0_b3c4, i32* %r0.global-to-local, align 4
  %v5_b3c8 = trunc i32 %v6_b3a8 to i8
  %v6_b3cc = inttoptr i32 %v0_b3c0 to i32*
  %v7_b3cc = call i32 @function_9fe8(i32 %v0_b3c4, i32* %v6_b3cc, i32 3, i32 65535)
  %v0_b3d0 = load i32, i32* @r4, align 4
  store i32 %v0_b3d0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b3cc, i32* @r8, align 4
  %v0_b3e0 = load i32, i32* @r5, align 4
  store i32 %v0_b3e0, i32* %r0.global-to-local, align 4
  %v4_b3e4 = inttoptr i32 %v0_b3d0 to i32*
  %v5_b3e4 = call i32 @function_9fe8(i32 %v0_b3e0, i32* %v4_b3e4, i32 4, i32 64)
  %v1_b3ec = urem i32 %v5_b3e4, 256
  store i32 %v1_b3ec, i32* %ip.global-to-local, align 4
  %v0_b3f0 = load i32, i32* @r4, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b400 = trunc i32 %v5_b3e4 to i8
  %v6_b404 = inttoptr i32 %v0_b3f0 to i32*
  %v7_b404 = call i32 @function_9fe8(i32 %v0_b3fc, i32* %v6_b404, i32 5, i32 1)
  %v1_b410 = urem i32 %v7_b404, 256
  store i32 %v1_b410, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b418 = load i32, i32* @r4, align 4
  store i32 %v0_b418, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b420 = load i32, i32* @r5, align 4
  store i32 %v0_b420, i32* %r0.global-to-local, align 4
  %v5_b428 = inttoptr i32 %v0_b418 to i32*
  %v6_b428 = call i32 @function_9fe8(i32 %v0_b420, i32* %v5_b428, i32 7, i32 65535)
  %v0_b42c = load i32, i32* @r4, align 4
  store i32 %v0_b42c, i32* %r1.global-to-local, align 4
  %v3_b430 = mul i32 %v6_b428, 65536
  store i32 %v3_b430, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b438 = load i32, i32* @r7, align 4
  store i32 %v0_b438, i32* %r3.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r0.global-to-local, align 4
  %v3_b440 = urem i32 %v6_b428, 65536
  store i32 %v3_b440, i32* @sb, align 4
  %v4_b444 = inttoptr i32 %v0_b42c to i32*
  %v5_b444 = call i32 @function_9fe8(i32 %v0_b43c, i32* %v4_b444, i32 10, i32 %v0_b438)
  %v1_b44c = urem i32 %v5_b444, 256
  store i32 %v1_b44c, i32* %ip.global-to-local, align 4
  %v0_b450 = load i32, i32* @r4, align 4
  store i32 %v0_b450, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v5_b464 = inttoptr i32 %v0_b450 to i32*
  %v6_b464 = call i32 @function_9fe8(i32 %v0_b45c, i32* %v5_b464, i32 11, i32 1)
  %v1_b46c = urem i32 %v6_b464, 256
  store i32 %v1_b46c, i32* %ip.global-to-local, align 4
  %v0_b470 = load i32, i32* @r4, align 4
  store i32 %v0_b470, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r0.global-to-local, align 4
  %v5_b484 = inttoptr i32 %v0_b470 to i32*
  %v6_b484 = call i32 @function_9fe8(i32 %v0_b47c, i32* %v5_b484, i32 12, i32 1)
  %v1_b48c = urem i32 %v6_b484, 256
  store i32 %v1_b48c, i32* %ip.global-to-local, align 4
  %v0_b490 = load i32, i32* @r4, align 4
  store i32 %v0_b490, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b498 = load i32, i32* @r7, align 4
  store i32 %v0_b498, i32* %r3.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v5_b4a4 = inttoptr i32 %v0_b490 to i32*
  %v6_b4a4 = call i32 @function_9fe8(i32 %v0_b49c, i32* %v5_b4a4, i32 13, i32 %v0_b498)
  %v1_b4ac = urem i32 %v6_b4a4, 256
  store i32 %v1_b4ac, i32* %ip.global-to-local, align 4
  %v0_b4b0 = load i32, i32* @r4, align 4
  store i32 %v0_b4b0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b4b8 = load i32, i32* @r7, align 4
  store i32 %v0_b4b8, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r5, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c4 = inttoptr i32 %v0_b4b0 to i32*
  %v6_b4c4 = call i32 @function_9fe8(i32 %v0_b4bc, i32* %v5_b4c4, i32 14, i32 %v0_b4b8)
  %v1_b4cc = urem i32 %v6_b4c4, 256
  store i32 %v1_b4cc, i32* %ip.global-to-local, align 4
  %v0_b4d0 = load i32, i32* @r4, align 4
  store i32 %v0_b4d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @r7, align 4
  store i32 %v0_b4d8, i32* %r3.global-to-local, align 4
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r0.global-to-local, align 4
  %v5_b4e4 = inttoptr i32 %v0_b4d0 to i32*
  %v6_b4e4 = call i32 @function_9fe8(i32 %v0_b4dc, i32* %v5_b4e4, i32 15, i32 %v0_b4d8)
  %v1_b4ec = urem i32 %v6_b4e4, 256
  store i32 %v1_b4ec, i32* %ip.global-to-local, align 4
  %v0_b4f0 = load i32, i32* @r7, align 4
  store i32 %v0_b4f0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4f8 = load i32, i32* @r4, align 4
  store i32 %v0_b4f8, i32* %r1.global-to-local, align 4
  %v0_b4fc = load i32, i32* @r5, align 4
  store i32 %v0_b4fc, i32* %r0.global-to-local, align 4
  %v5_b504 = inttoptr i32 %v0_b4f8 to i32*
  %v6_b504 = call i32 @function_9fe8(i32 %v0_b4fc, i32* %v5_b504, i32 %v0_b4f0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b510 = load i32, i32* @r4, align 4
  store i32 %v0_b510, i32* %r1.global-to-local, align 4
  %v0_b518 = load i32, i32* @r5, align 4
  store i32 %v0_b518, i32* %r0.global-to-local, align 4
  %v4_b51c = inttoptr i32 %v0_b510 to i32*
  %v5_b51c = call i32 @function_9fe8(i32 %v0_b518, i32* %v4_b51c, i32 1, i32 1)
  %v1_b524 = urem i32 %v5_b51c, 256
  store i32 %v1_b524, i32* %r3.global-to-local, align 4
  %v0_b528 = load i32, i32* @r7, align 4
  store i32 %v0_b528, i32* %r0.global-to-local, align 4
  %v1_b530 = inttoptr i32 %v0_b528 to i32*
  %v2_b530 = call i32 @function_12148(i32* %v1_b530)
  %v1_b534 = load i32, i32* @r6, align 4
  %v2_b534 = add i32 %v1_b534, %v2_b530
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b548 = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  store i32 %v3_b548, i32* %r0.global-to-local, align 4
  %v7_b54c = icmp eq i32 %v3_b548, -1
  store i32 %v3_b548, i32* @sl, align 4
  br i1 %v7_b54c, label %dec_label_pc_b88c, label %dec_label_pc_b558

dec_label_pc_b558:                                ; preds = %dec_label_pc_b354
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b560 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b560, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b568 = load i32, i32* @r7, align 4
  store i32 %v0_b568, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b574 = call i32 @function_12c90(i32 %v3_b548, i32 %v0_b568, i32 3, i32 %v6_b560, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b574, i32* %r0.global-to-local, align 4
  %v7_b578 = icmp eq i32 %v5_b574, -1
  br i1 %v7_b578, label %dec_label_pc_b884, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b558
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v3_b588 = urem i32 %v0_b584, 65536
  store i32 %v3_b588, i32* @r3, align 4
  %v2_b58c = icmp eq i32 %arg2, 0
  %v0_b590 = load i32, i32* @r7, align 4
  store i32 %v0_b590, i32* %stack_var_-44, align 4
  %v5_b594 = trunc i32 %v0_b584 to i16
  br i1 %v2_b58c, label %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge, label %dec_label_pc_b59c.preheader

dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge: ; preds = %dec_label_pc_b580
  %.pre = sext i16 %v5_b594 to i32
  %.pre94 = add i32 %v6_b504, 40
  br label %dec_label_pc_b728.preheader

dec_label_pc_b59c.preheader:                      ; preds = %dec_label_pc_b580
  %v2_b5e0 = ptrtoint i32* %stack_var_-160 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b640 = ptrtoint i32* %stack_var_-80 to i32
  %v2_b648 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b64c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b6d4 = zext i8 %tmp32 to i32
  %v1_b6d8 = and i32 %v4_b6d4, 18
  %v2_b6dc = icmp eq i32 %v1_b6d8, 18
  %v1_b98c = add i32 %v6_b504, 40
  %v4_b9cc = sext i16 %v5_b594 to i32
  %v3_b9d8 = udiv i32 %v4_b9cc, 256
  %v1_bab4 = urem i32 %v5_b444, 2
  %tmp95 = sub nsw i32 0, %v1_bab4
  %v4_babc = and i32 %tmp95, 32
  %v1_bae8 = urem i32 %v6_b484, 2
  %tmp96 = sub nsw i32 0, %v1_bae8
  %v4_baf0 = and i32 %tmp96, 8
  %v1_bb34 = urem i32 %v6_b4e4, 2
  %v3_b6c0 = sext i16 %tmp62 to i32
  %v1_b6e4 = and i32 %v4_b6d4, 5
  %v2_b6e4 = icmp eq i32 %v1_b6e4, 0
  %v4_b620 = add i32 %v2_b5e0, 98
  %v5_b620 = inttoptr i32 %v4_b620 to i16*
  %v1_b9d4 = mul nsw i32 %v4_b9cc, 256
  %v4_b9e4 = and i32 %v1_b9d4, 65280
  %v5_b9e4 = or i32 %v4_b9e4, %v3_b9d8
  %v1_bacc = urem i32 %v6_b464, 2
  %tmp97 = sub nsw i32 0, %v1_bacc
  %v4_bad4 = and i32 %tmp97, 16
  %v1_bb00 = urem i32 %v6_b4a4, 2
  %tmp98 = sub nsw i32 0, %v1_bb00
  %v4_bb08 = and i32 %tmp98, 4
  %v1_bb18 = urem i32 %v6_b4c4, 2
  %tmp99 = sub nsw i32 0, %v1_bb18
  %v3_bb20 = and i32 %tmp99, 2
  br label %dec_label_pc_b59c.outer

dec_label_pc_b59c.outer:                          ; preds = %dec_label_pc_b59c.preheader, %.thread10
  %stack_var_-340.0.ph = phi i32 [ %tmp, %dec_label_pc_b59c.preheader ], [ %v0_ba18, %.thread10 ]
  %stack_var_-62.0.ph = phi i16 [ %tmp33, %dec_label_pc_b59c.preheader ], [ %stack_var_-62.2, %.thread10 ]
  %stack_var_-60.0.ph = phi i32 [ %tmp36, %dec_label_pc_b59c.preheader ], [ %v0_b930, %.thread10 ]
  br label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %dec_label_pc_b59c.outer, %dec_label_pc_b710
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b710 ], [ %stack_var_-62.0.ph, %dec_label_pc_b59c.outer ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b710 ], [ %stack_var_-60.0.ph, %dec_label_pc_b59c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b5a8 = call i32 @function_12cd4(i32 2, i32 1, i32 0)
  store i32 %v3_b5a8, i32* %r0.global-to-local, align 4
  %v7_b5ac = icmp eq i32 %v3_b5a8, -1
  store i32 %v3_b5a8, i32* @r8, align 4
  br i1 %v7_b5ac, label %dec_label_pc_b710, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b6ec
  %v0_b5c0 = phi i32 [ %v3_b700, %dec_label_pc_b6ec ], [ %v3_b5a8, %dec_label_pc_b59c ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6ec ], [ %stack_var_-62.0, %dec_label_pc_b59c ]
  %stack_var_-60.1 = phi i32 [ %v0_b930, %dec_label_pc_b6ec ], [ %stack_var_-60.0, %dec_label_pc_b59c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b5c0 = call i32 @function_122fc(i32 %v0_b5c0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b5c8 = or i32 %v2_b5c0, 2048
  store i32 %v1_b5c8, i32* %r2.global-to-local, align 4
  %v0_b5cc = load i32, i32* @r8, align 4
  store i32 %v0_b5cc, i32* %r0.global-to-local, align 4
  %v2_b5d0 = call i32 @function_122fc(i32 %v0_b5cc, i32 4)
  store i32 %v2_b5d0, i32* %r0.global-to-local, align 4
  %v3_b5d4 = load i32, i32* %stack_var_-44, align 4
  %v5_b5dc = mul i32 %v3_b5d4, 24
  store i32 %v2_b5e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_b5ec = load i32, i32* @fp, align 4
  %v2_b5ec = add i32 %v1_b5ec, %v5_b5dc
  store i32 %v2_b5ec, i32* %r3.global-to-local, align 4
  %v1_b5f0 = add i32 %v2_b5ec, 20
  %v2_b5f0 = inttoptr i32 %v1_b5f0 to i8*
  %v3_b5f0 = load i8, i8* %v2_b5f0, align 1
  %v4_b5f0 = zext i8 %v3_b5f0 to i32
  store i32 %v4_b5f0, i32* %r2.global-to-local, align 4
  %v2_b5f4 = icmp ugt i8 %v3_b5f0, 30
  %v7_b5f4 = icmp eq i8 %v3_b5f0, 31
  %v2_b5f8 = xor i1 %v7_b5f4, true
  %v3_b5f8 = and i1 %v2_b5f4, %v2_b5f8
  br i1 %v3_b5f8, label %bb, label %bb72

bb:                                               ; preds = %dec_label_pc_b5b8
  %v5_b5f8 = add i32 %v2_b5ec, 16
  %v6_b5f8 = inttoptr i32 %v5_b5f8 to i32*
  %v7_b5f8 = load i32, i32* %v6_b5f8, align 4
  store i32 %v7_b5f8, i32* %r3.global-to-local, align 4
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_b5b8, %bb
  %v4_b5fc = phi i32 [ %v2_b5ec, %dec_label_pc_b5b8 ], [ %v7_b5f8, %bb ]
  %v4_b5fc.stack_var_-60.1 = select i1 %v3_b5f8, i32 %v4_b5fc, i32 %stack_var_-60.1
  %v2_b600 = xor i1 %v2_b5f4, true
  %v3_b600 = or i1 %v7_b5f4, %v2_b600
  br i1 %v3_b600, label %dec_label_pc_b898, label %dec_label_pc_b604

dec_label_pc_b604:                                ; preds = %bb72, %dec_label_pc_b898
  %v0_b930 = phi i32 [ %v5_b8e4, %dec_label_pc_b898 ], [ %v4_b5fc.stack_var_-60.1, %bb72 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @sb, align 4
  %v9_b60c = icmp eq i32 %v0_b60c, 65535
  br i1 %v9_b60c, label %dec_label_pc_b8f0, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_b604
  %v4_b610 = udiv i32 %v0_b60c, 256
  %v2_b614 = urem i32 %v0_b60c, 256
  store i32 %v2_b614, i32* %r2.global-to-local, align 4
  %v5_b618 = mul nuw nsw i32 %v2_b614, 256
  %v6_b618 = or i32 %v5_b618, %v4_b610
  store i32 %v6_b618, i32* %r3.global-to-local, align 4
  store i32 %v2_b5e0, i32* %ip.global-to-local, align 4
  %v2_b620 = trunc i32 %v6_b618 to i16
  store i16 %v2_b620, i16* %v5_b620, align 2
  br label %dec_label_pc_b628

dec_label_pc_b628:                                ; preds = %.thread7, %dec_label_pc_b8f0
  %stack_var_-62.2 = phi i16 [ %v1_b8f0, %dec_label_pc_b8f0 ], [ %stack_var_-62.1, %.thread7 ]
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b630 = load i32, i32* @r8, align 4
  store i32 %v0_b630, i32* %r0.global-to-local, align 4
  %v3_b634 = call i32 @function_12abc(i32 %v0_b630, i32 %v2_b628, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b63c = call i32 @function_12148(i32* null)
  store i32 %v2_b63c, i32* %r0.global-to-local, align 4
  store i32 %v2_b640, i32* @r7, align 4
  store i32 %v2_b63c, i32* @r4, align 4
  store i32 %v2_b648, i32* @r6, align 4
  %v9_b6a0 = icmp eq i32 %tmp34, %v0_b930
  %v4_b6c8 = zext i16 %stack_var_-62.2 to i32
  %v9_b6b4 = icmp eq i1 %v9_b6a0, false
  %v9_b6cc = icmp eq i32 %v3_b6c0, %v4_b6c8
  br label %dec_label_pc_b664

dec_label_pc_b654:                                ; preds = %.thread, %dec_label_pc_b6bc, %dec_label_pc_b6e4, %bb76
  %v2_b654 = call i32 @function_12148(i32* null)
  %v0_b658 = load i32, i32* @r4, align 4
  %v2_b658 = sub i32 %v2_b654, %v0_b658
  store i32 %v2_b658, i32* %r0.global-to-local, align 4
  %v8_b660 = icmp sgt i32 %v2_b658, 10
  br i1 %v8_b660, label %dec_label_pc_b6ec, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b628
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b648, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b674 = load i32, i32* @sl, align 4
  store i32 %v0_b674, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_b684 = call i32 @function_12bdc(i32 %v0_b674, i32 %v2_b648, i32 256, i32 16384, i32 %v2_b640, i32 %v2_b64c)
  store i32 %v6_b684, i32* %r2.global-to-local, align 4
  %v7_b68c = icmp eq i32 %v6_b684, -1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b68c, label %dec_label_pc_b88c, label %dec_label_pc_b698

dec_label_pc_b698:                                ; preds = %dec_label_pc_b664
  store i32 %v0_b930, i32* %r1.global-to-local, align 4
  store i32 %tmp34, i32* @r3, align 4
  %tmp100 = icmp ult i32 %v6_b684, 41
  br i1 %tmp100, label %.thread, label %bb76

.thread:                                          ; preds = %dec_label_pc_b698
  br label %dec_label_pc_b654

bb76:                                             ; preds = %dec_label_pc_b698
  br i1 %v9_b6b4, label %dec_label_pc_b654, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %bb76
  store i32 %v3_b6c0, i32* @lr, align 4
  store i32 %v2_b5e0, i32* @r3, align 4
  store i32 %v4_b6c8, i32* %r2.global-to-local, align 4
  br i1 %v9_b6cc, label %dec_label_pc_b6d4, label %dec_label_pc_b654

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b6bc
  store i32 %v4_b6d4, i32* %r2.global-to-local, align 4
  store i32 %v1_b6d8, i32* @r3, align 4
  br i1 %v2_b6dc, label %dec_label_pc_b924, label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6d4
  br i1 %v2_b6e4, label %dec_label_pc_b654, label %dec_label_pc_b6ec

dec_label_pc_b6ec:                                ; preds = %dec_label_pc_b6e4, %dec_label_pc_b654
  %v0_b6ec = load i32, i32* @r8, align 4
  store i32 %v0_b6ec, i32* %r0.global-to-local, align 4
  %v1_b6f0 = call i32 @function_124c8(i32 %v0_b6ec)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b700 = call i32 @function_12cd4(i32 2, i32 1, i32 0)
  store i32 %v3_b700, i32* %r0.global-to-local, align 4
  %v3_b704 = icmp eq i32 %v3_b700, -1
  store i32 %v3_b700, i32* @r8, align 4
  br i1 %v3_b704, label %dec_label_pc_b710, label %dec_label_pc_b5b8

dec_label_pc_b710:                                ; preds = %dec_label_pc_b6ec, %dec_label_pc_b59c
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b59c ], [ %stack_var_-62.2, %dec_label_pc_b6ec ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b59c ], [ %v0_b930, %dec_label_pc_b6ec ]
  %v3_b710 = load i32, i32* %stack_var_-44, align 4
  %v1_b718 = add i32 %v3_b710, 1
  store i32 %v1_b718, i32* @r3, align 4
  store i32 %v1_b718, i32* %stack_var_-44, align 4
  %v5_b724 = icmp slt i32 %v1_b718, %arg2
  br i1 %v5_b724, label %dec_label_pc_b59c, label %dec_label_pc_b728.preheader

dec_label_pc_b728.preheader:                      ; preds = %.thread10, %dec_label_pc_b710, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge
  %v1_b760.pre-phi = phi i32 [ %.pre94, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge ], [ %v1_b98c, %dec_label_pc_b710 ], [ %v1_b98c, %.thread10 ]
  %v4_b844.pre-phi = phi i32 [ %.pre, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge ], [ %v4_b9cc, %dec_label_pc_b710 ], [ %v4_b9cc, %.thread10 ]
  %v3_b740 = mul i32 %v6_b504, 65536
  %v1_b744 = add i32 %v3_b740, 1310720
  %tmp78 = udiv i32 %v1_b744, 256
  %v3_b750 = and i32 %tmp78, 65280
  %v2_b85c = icmp eq i32 %v1_b524, 0
  %v4_b754 = udiv i32 %v1_b744, 16777216
  %v5_b754 = or i32 %v3_b750, %v4_b754
  %v1_b75c = add i32 %v6_b504, 20
  br label %dec_label_pc_b728

dec_label_pc_b728:                                ; preds = %dec_label_pc_b728.preheader, %dec_label_pc_b90c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b58c, label %dec_label_pc_b90c, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b728
  store i32 %v1_b744, i32* %r2.global-to-local, align 4
  store i32 %v6_b504, i32* %ip.global-to-local, align 4
  store i32 %v3_b750, i32* %r3.global-to-local, align 4
  store i32 %v5_b754, i32* @sb, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b75c, i32* @r8, align 4
  store i32 %v1_b760.pre-phi, i32* @r7, align 4
  br label %dec_label_pc_b858

dec_label_pc_b768:                                ; preds = %dec_label_pc_b858, %dec_label_pc_b864
  %v2_b76c = phi i32 [ %v7_b840, %dec_label_pc_b858 ], [ %v2_b76c.pre, %dec_label_pc_b864 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b76c = add i32 %v2_b76c, 10
  %v4_b76c = inttoptr i32 %v3_b76c to i16*
  store i16 0, i16* %v4_b76c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* @r0, align 4
  %v2_b778 = call i32 @function_dd58(i32 %v0_b774, i32 20)
  %v3_b778 = trunc i32 %v2_b778 to i16
  store i32 %v2_b778, i32* %r0.global-to-local, align 4
  %v3_b77c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b380, i32* %ip.global-to-local, align 4
  %v3_b784 = mul i32 %v3_b77c, 16
  %v2_b788 = add i32 %v3_b784, %v2_b380
  store i32 %v2_b788, i32* %r1.global-to-local, align 4
  %v1_b78c = add i32 %v2_b788, 4
  %v2_b78c = inttoptr i32 %v1_b78c to i32*
  %v3_b78c = load i32, i32* %v2_b78c, align 4
  %v3_b790 = mul i32 %v3_b78c, 65536
  store i32 %v3_b790, i32* %ip.global-to-local, align 4
  %tmp79 = mul i32 %v3_b78c, 256
  %v1_b798 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v3_b78c, 256
  %v4_b79c = urem i32 %tmp80, 256
  %v5_b79c = or i32 %v4_b79c, %v1_b798
  store i32 %v5_b79c, i32* %r3.global-to-local, align 4
  %v1_b7a0 = add i32 %v3_b78c, 1
  store i32 %v1_b7a0, i32* %r2.global-to-local, align 4
  store i32 %v1_b7a0, i32* %v2_b78c, align 4
  %v0_b7a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7a8 = load i32, i32* @r6, align 4
  %v2_b7a8 = add i32 %v1_b7a8, 4
  %v3_b7a8 = inttoptr i32 %v2_b7a8 to i32*
  store i32 %v0_b7a8, i32* %v3_b7a8, align 4
  %v0_b7ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ac = add i32 %v0_b7ac, 8
  %v2_b7ac = inttoptr i32 %v1_b7ac to i32*
  %v3_b7ac = load i32, i32* %v2_b7ac, align 4
  %tmp81 = mul i32 %v3_b7ac, 256
  %v1_b7b8 = and i32 %tmp81, 65280
  %tmp82 = udiv i32 %v3_b7ac, 256
  %v4_b7bc = urem i32 %tmp82, 256
  %v5_b7bc = or i32 %v4_b7bc, %v1_b7b8
  store i32 %v5_b7bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v3_b7c4 = load i32, i32* @r5, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 10
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v3_b778, i16* %v5_b7c4, align 2
  %v0_b7c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7c8 = load i32, i32* @r6, align 4
  %v2_b7c8 = add i32 %v1_b7c8, 8
  %v3_b7c8 = inttoptr i32 %v2_b7c8 to i32*
  store i32 %v0_b7c8, i32* %v3_b7c8, align 4
  %v0_b7cc = load i32, i32* @lr, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v2_b7cc = load i32, i32* @r6, align 4
  %v3_b7cc = add i32 %v2_b7cc, 16
  %v4_b7cc = inttoptr i32 %v3_b7cc to i16*
  store i16 %v1_b7cc, i16* %v4_b7cc, align 2
  %v0_b7d0 = load i32, i32* @r6, align 4
  store i32 %v0_b7d0, i32* @r1, align 4
  %v0_b7d4 = load i32, i32* @sb, align 4
  store i32 %v0_b7d4, i32* %r2.global-to-local, align 4
  %v0_b7d8 = load i32, i32* @r8, align 4
  store i32 %v0_b7d8, i32* %r3.global-to-local, align 4
  %v0_b7dc = load i32, i32* @r5, align 4
  store i32 %v0_b7dc, i32* %r0.global-to-local, align 4
  %v4_b7e0 = call i32 @function_dda8(i32 %v0_b7dc, i32 %v0_b7d0, i32 %v0_b7d4, i32 %v0_b7d8)
  %v5_b7e0 = trunc i32 %v4_b7e0 to i16
  store i32 %v4_b7e0, i32* %r0.global-to-local, align 4
  %v3_b7e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7e4, i32* %r3.global-to-local, align 4
  %v3_b7e8 = mul i32 %v3_b7e4, 32
  store i32 %v3_b7e8, i32* %lr.global-to-local, align 4
  %v3_b7ec = load i32, i32* @r6, align 4
  %v4_b7ec = add i32 %v3_b7ec, 16
  %v5_b7ec = inttoptr i32 %v4_b7ec to i16*
  store i16 %v5_b7e0, i16* %v5_b7ec, align 2
  %v0_b7f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b7f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp101 = mul i32 %v1_b7f0, -8
  %v5_b7f0 = add i32 %v0_b7f0, %tmp101
  store i32 %v5_b7f0, i32* %lr.global-to-local, align 4
  %v0_b7f4 = load i32, i32* @r6, align 4
  %v1_b7f4 = add i32 %v0_b7f4, 2
  %v2_b7f4 = inttoptr i32 %v1_b7f4 to i16*
  %v3_b7f4 = load i16, i16* %v2_b7f4, align 2
  %v1_b7f8 = load i32, i32* @fp, align 4
  %v2_b7f8 = add i32 %v1_b7f8, %v5_b7f0
  store i32 %v2_b7f8, i32* @lr, align 4
  %v3_b7fc = add i32 %v2_b7f8, 2
  %v4_b7fc = inttoptr i32 %v3_b7fc to i16*
  store i16 %v3_b7f4, i16* %v4_b7fc, align 2
  %v0_b800 = load i32, i32* @r5, align 4
  store i32 %v0_b800, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b80c = load i32, i32* @sl, align 4
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v0_b810 = load i32, i32* @r7, align 4
  store i32 %v0_b810, i32* %r2.global-to-local, align 4
  %v0_b814 = load i32, i32* @lr, align 4
  %v6_b81c = call i32 @function_12c50(i32 %v0_b80c, i32 %v0_b800, i32 %v0_b810, i32 16384, i32 %v0_b814, i32 16)
  %v3_b820 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b820, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_b828 = add i32 %v3_b820, 1
  store i32 %v1_b828, i32* %r0.global-to-local, align 4
  store i32 %v1_b828, i32* %stack_var_-44, align 4
  %v7_b834 = icmp slt i32 %v1_b828, %arg2
  br i1 %v7_b834, label %dec_label_pc_b858, label %dec_label_pc_b90c

dec_label_pc_b858:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b768
  %v1_b840 = phi i32 [ %v1_b828, %dec_label_pc_b768 ], [ 0, %dec_label_pc_b73c ]
  store i32 %v2_b390, i32* @lr, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b840 = mul i32 %v1_b840, 4
  %v5_b840 = add i32 %v4_b840, %v2_b390
  %v6_b840 = inttoptr i32 %v5_b840 to i32*
  %v7_b840 = load i32, i32* %v6_b840, align 4
  store i32 %v7_b840, i32* @r5, align 4
  store i32 %v4_b844.pre-phi, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v1_b850 = add i32 %v7_b840, 20
  store i32 %v1_b850, i32* @r6, align 4
  store i32 %v1_b524, i32* %r1.global-to-local, align 4
  br i1 %v2_b85c, label %dec_label_pc_b768, label %dec_label_pc_b864

dec_label_pc_b864:                                ; preds = %dec_label_pc_b858
  %v1_b864 = add i32 %v7_b840, 40
  store i32 %v1_b864, i32* @r4, align 4
  store i32 %v1_b864, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %r1.global-to-local, align 4
  %v2_b870 = call i32 @function_f24c(i32 %v1_b864, i32 %v6_b504)
  store i32 %v2_b870, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b87c = load i32, i32* @r4, align 4
  %v4_b87c = add i32 %v2_b87c, %v6_b504
  %v5_b87c = inttoptr i32 %v4_b87c to i8*
  store i8 0, i8* %v5_b87c, align 1
  %v2_b76c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b768

dec_label_pc_b884:                                ; preds = %dec_label_pc_b558
  %v0_b884 = load i32, i32* @sl, align 4
  store i32 %v0_b884, i32* %r0.global-to-local, align 4
  %v1_b888 = call i32 @function_124c8(i32 %v0_b884)
  store i32 %v1_b888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b88c

dec_label_pc_b88c:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b90c, %dec_label_pc_b354, %dec_label_pc_b884
  %v1_b894 = phi i32 [ %v3_b548, %dec_label_pc_b354 ], [ %v1_b888, %dec_label_pc_b884 ], [ %v2_b910, %dec_label_pc_b90c ], [ 0, %dec_label_pc_b664 ]
  store i32 %v3_b354, i32* %r4.global-to-local, align 4
  store i32 %v27_b354, i32* %lr.global-to-local, align 4
  ret i32 %v1_b894

dec_label_pc_b898:                                ; preds = %bb72
  %v1_b898 = add i32 %v4_b5fc, 16
  %v2_b898 = inttoptr i32 %v1_b898 to i32*
  %v3_b898 = load i32, i32* %v2_b898, align 4
  store i32 %v3_b898, i32* @r4, align 4
  %v0_b89c = call i32 @function_f188()
  store i32 %v0_b89c, i32* %r0.global-to-local, align 4
  %v3_b8a0 = load i32, i32* %stack_var_-44, align 4
  %v5_b8a8 = mul i32 %v3_b8a0, 24
  %v0_b8ac = load i32, i32* @r4, align 4
  %v1_b8ac = and i32 %v0_b8ac, 16711680
  store i32 %v1_b8ac, i32* %ip.global-to-local, align 4
  %v3_b8b0 = udiv i32 %v0_b8ac, 16777216
  %v4_b8b4 = udiv i32 %v1_b8ac, 256
  %v5_b8b4 = or i32 %v4_b8b4, %v3_b8b0
  store i32 %v5_b8b4, i32* %r2.global-to-local, align 4
  %v1_b8b8 = load i32, i32* @fp, align 4
  %v2_b8b8 = add i32 %v1_b8b8, %v5_b8a8
  store i32 %v2_b8b8, i32* %r1.global-to-local, align 4
  %v1_b8bc = and i32 %v0_b8ac, 65280
  store i32 %v1_b8bc, i32* %r3.global-to-local, align 4
  %v1_b8c0 = add i32 %v2_b8b8, 20
  %v2_b8c0 = inttoptr i32 %v1_b8c0 to i8*
  %v3_b8c0 = load i8, i8* %v2_b8c0, align 1
  %v4_b8c0 = zext i8 %v3_b8c0 to i32
  store i32 %v4_b8c0, i32* %ip.global-to-local, align 4
  %v5_b8c8 = call i32 @llvm.bswap.i32(i32 %v0_b8ac)
  %v7_b8cc = lshr i32 %v0_b89c, %v4_b8c0
  %v8_b8cc = add i32 %v7_b8cc, %v5_b8c8
  store i32 %v8_b8cc, i32* %r2.global-to-local, align 4
  %v1_b8d0 = and i32 %v8_b8cc, 16711680
  store i32 %v1_b8d0, i32* %r0.global-to-local, align 4
  %v1_b8dc = and i32 %v8_b8cc, 65280
  store i32 %v1_b8dc, i32* %r1.global-to-local, align 4
  %v5_b8e4 = call i32 @llvm.bswap.i32(i32 %v8_b8cc)
  store i32 %v5_b8e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b604

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b604
  %v0_b8f0 = call i32 @function_f188()
  %v1_b8f0 = trunc i32 %v0_b8f0 to i16
  store i32 %v0_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v2_b5e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b628

dec_label_pc_b90c:                                ; preds = %dec_label_pc_b768, %dec_label_pc_b728
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b910 = call i32 @function_12148(i32* null)
  store i32 %v2_b910, i32* %r0.global-to-local, align 4
  store i32 %v2_b534, i32* %r2.global-to-local, align 4
  %v6_b91c = icmp slt i32 %v2_b534, %v2_b910
  br i1 %v6_b91c, label %dec_label_pc_b88c, label %dec_label_pc_b728

dec_label_pc_b924:                                ; preds = %dec_label_pc_b6d4
  %v3_b924 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b924, i32* @r5, align 4
  store i32 %v2_b380, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r0.global-to-local, align 4
  %v5_b930 = mul i32 %v3_b924, 16
  %v6_b930 = add i32 %v5_b930, %v2_b380
  %v7_b930 = inttoptr i32 %v6_b930 to i32*
  store i32 %v0_b930, i32* %v7_b930, align 4
  %v0_b934 = load i32, i32* %r0.global-to-local, align 4
  %v1_b934 = add i32 %v0_b934, 4
  %v2_b934 = inttoptr i32 %v1_b934 to i32*
  %v3_b934 = load i32, i32* %v2_b934, align 4
  %v1_b938 = and i32 %v3_b934, 16711680
  store i32 %v1_b938, i32* %r0.global-to-local, align 4
  %v5_b94c = call i32 @llvm.bswap.i32(i32 %v3_b934)
  store i32 %v5_b94c, i32* %r3.global-to-local, align 4
  store i32 %v2_b380, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r5, align 4
  %v3_b954 = mul i32 %v0_b954, 16
  %v2_b958 = add i32 %v3_b954, %v2_b380
  store i32 %v2_b958, i32* %ip.global-to-local, align 4
  %v2_b95c = add i32 %v2_b958, 4
  %v3_b95c = inttoptr i32 %v2_b95c to i32*
  store i32 %v5_b94c, i32* %v3_b95c, align 4
  store i32 %stack_var_-340.0.ph, i32* %r2.global-to-local, align 4
  %v1_b964 = add i32 %stack_var_-340.0.ph, 8
  %v2_b964 = inttoptr i32 %v1_b964 to i32*
  %v3_b964 = load i32, i32* %v2_b964, align 4
  %v1_b970 = and i32 %v3_b964, 65280
  store i32 %v1_b970, i32* %r2.global-to-local, align 4
  %v5_b97c = call i32 @llvm.bswap.i32(i32 %v3_b964)
  store i32 %v5_b97c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v6_b504, i32* %r0.global-to-local, align 4
  %v1_b988 = add i32 %stack_var_-340.0.ph, 2
  %v2_b988 = inttoptr i32 %v1_b988 to i16*
  %v3_b988 = load i16, i16* %v2_b988, align 2
  %v4_b988 = zext i16 %v3_b988 to i32
  store i32 %v4_b988, i32* %r1.global-to-local, align 4
  store i32 %v1_b98c, i32* @r4, align 4
  %v2_b990 = load i32, i32* %ip.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 12
  %v4_b990 = inttoptr i32 %v3_b990 to i16*
  store i16 %v3_b988, i16* %v4_b990, align 2
  %v0_b994 = load i32, i32* @lr, align 4
  %v1_b994 = trunc i32 %v0_b994 to i16
  %v2_b994 = load i32, i32* %ip.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 14
  %v4_b994 = inttoptr i32 %v3_b994 to i16*
  store i16 %v1_b994, i16* %v4_b994, align 2
  %v0_b998 = load i32, i32* %r3.global-to-local, align 4
  %v1_b998 = load i32, i32* %ip.global-to-local, align 4
  %v2_b998 = add i32 %v1_b998, 8
  %v3_b998 = inttoptr i32 %v2_b998 to i32*
  store i32 %v0_b998, i32* %v3_b998, align 4
  %v0_b99c = load i32, i32* @r4, align 4
  store i32 %v0_b99c, i32* @r0, align 4
  %v0_b9a0 = call i32 @function_12f1c()
  store i32 %v0_b9a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b390, i32* %r3.global-to-local, align 4
  %v2_b9ac = load i32, i32* @r5, align 4
  %v5_b9ac = mul i32 %v2_b9ac, 4
  %v6_b9ac = add i32 %v5_b9ac, %v2_b390
  %v7_b9ac = inttoptr i32 %v6_b9ac to i32*
  store i32 %v0_b9a0, i32* %v7_b9ac, align 4
  %v3_b9b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9b0, i32* %r2.global-to-local, align 4
  %v0_b9b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b9b4 = mul i32 %v3_b9b0, 4
  %v5_b9b4 = add i32 %v0_b9b4, %v4_b9b4
  %v6_b9b4 = inttoptr i32 %v5_b9b4 to i32*
  %v7_b9b4 = load i32, i32* %v6_b9b4, align 4
  store i32 %v7_b9b4, i32* %ip.global-to-local, align 4
  %v1_b9b8 = inttoptr i32 %v7_b9b4 to i8*
  %v2_b9b8 = load i8, i8* %v1_b9b8, align 1
  %tmp102 = urem i8 %v2_b9b8, 16
  %v1_b9bc = zext i8 %tmp102 to i32
  %v1_b9c0 = or i32 %v1_b9bc, 64
  store i32 %v1_b9c0, i32* %r3.global-to-local, align 4
  %v1_b9c4 = trunc i32 %v1_b9c0 to i8
  store i8 %v1_b9c4, i8* %v1_b9b8, align 1
  %v0_b9c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b9c8 = inttoptr i32 %v0_b9c8 to i8*
  %v2_b9c8 = load i8, i8* %v1_b9c8, align 1
  store i32 %v4_b9cc, i32* %lr.global-to-local, align 4
  %v1_b9d0 = and i8 %v2_b9c8, -16
  %v1_b9dc = or i8 %v1_b9d0, 5
  %v0_b9e0 = load i32, i32* @r4, align 4
  %v3_b9e0 = mul i32 %v0_b9e0, 65536
  store i32 %v3_b9e0, i32* %r4.global-to-local, align 4
  store i32 %v5_b9e4, i32* %r1.global-to-local, align 4
  store i32 %v1_b410, i32* %r0.global-to-local, align 4
  store i8 %v1_b9dc, i8* %v1_b9c8, align 1
  %v0_b9f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9f0 = trunc i32 %v0_b9f0 to i16
  %v2_b9f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b9f0 = add i32 %v2_b9f0, 4
  %v4_b9f0 = inttoptr i32 %v3_b9f0 to i16*
  store i16 %v1_b9f0, i16* %v4_b9f0, align 2
  %v0_b9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b9f4 = udiv i32 %v0_b9f4, 256
  %v1_b9fc = and i32 %v3_b9f4, 65280
  store i32 %v1_b9fc, i32* %r2.global-to-local, align 4
  %v2_ba00 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba00 = add i32 %v2_ba00, 1
  %v4_ba00 = inttoptr i32 %v3_ba00 to i8*
  store i8 %v5_b3c8, i8* %v4_ba00, align 1
  %v0_ba04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba04 = load i32, i32* %r4.global-to-local, align 4
  %v4_ba04 = udiv i32 %v1_ba04, 16777216
  %v5_ba04 = or i32 %v4_ba04, %v0_ba04
  %v1_ba08 = trunc i32 %v5_ba04 to i16
  %v2_ba08 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba08 = add i32 %v2_ba08, 2
  %v4_ba08 = inttoptr i32 %v3_ba08 to i16*
  store i16 %v1_ba08, i16* %v4_ba08, align 2
  %v0_ba10 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v0_ba10, 20
  store i32 %v1_ba10, i32* %r3.global-to-local, align 4
  %v3_ba14 = add i32 %v0_ba10, 8
  %v4_ba14 = inttoptr i32 %v3_ba14 to i8*
  store i8 %v5_b400, i8* %v4_ba14, align 1
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v2_ba20 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba20 = add i32 %v2_ba20, 9
  %v4_ba20 = inttoptr i32 %v3_ba20 to i8*
  store i8 6, i8* %v4_ba20, align 1
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* %r2.global-to-local, align 4
  %v2_ba28 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_ba28, i32* %r1.global-to-local, align 4
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, 12
  %v3_ba2c = inttoptr i32 %v2_ba2c to i32*
  store i32 %v2_ba28, i32* %v3_ba2c, align 4
  %v0_ba30 = load i32, i32* %r0.global-to-local, align 4
  %v2_ba30 = icmp eq i32 %v0_ba30, 0
  %v3_ba34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba34, i32* %r3.global-to-local, align 4
  store i32 %v2_b380, i32* %r0.global-to-local, align 4
  br i1 %v2_ba30, label %.thread10, label %bb83

bb83:                                             ; preds = %dec_label_pc_b924
  store i32 64, i32* %lr.global-to-local, align 4
  %v3_ba40 = load i32, i32* %ip.global-to-local, align 4
  %v4_ba40 = add i32 %v3_ba40, 6
  %v5_ba40 = inttoptr i32 %v4_ba40 to i16*
  store i16 64, i16* %v5_ba40, align 2
  %v0_ba44.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_ba44.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_b924, %bb83
  %v0_ba48 = phi i32 [ %v3_ba34, %dec_label_pc_b924 ], [ %v1_ba44.pre, %bb83 ]
  %v1_ba4c = phi i32 [ %v2_b380, %dec_label_pc_b924 ], [ %v0_ba44.pre, %bb83 ]
  %v4_ba44 = mul i32 %v0_ba48, 16
  %v5_ba44 = add i32 %v4_ba44, %v1_ba4c
  %v6_ba44 = inttoptr i32 %v5_ba44 to i32*
  %v7_ba44 = load i32, i32* %v6_ba44, align 4
  store i32 %v7_ba44, i32* %r2.global-to-local, align 4
  store i32 %v5_ba44, i32* %r3.global-to-local, align 4
  %v1_ba50 = load i32, i32* %ip.global-to-local, align 4
  %v2_ba50 = add i32 %v1_ba50, 16
  %v3_ba50 = inttoptr i32 %v2_ba50 to i32*
  store i32 %v7_ba44, i32* %v3_ba50, align 4
  %v0_ba54 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba54 = add i32 %v0_ba54, 12
  %v2_ba54 = inttoptr i32 %v1_ba54 to i16*
  %v3_ba54 = load i16, i16* %v2_ba54, align 2
  %v4_ba54 = zext i16 %v3_ba54 to i32
  store i32 %v4_ba54, i32* %r1.global-to-local, align 4
  %v0_ba58 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba58 = add i32 %v0_ba58, 40
  store i32 %v1_ba58, i32* @r4, align 4
  %v3_ba5c = add i32 %v0_ba58, 20
  %v4_ba5c = inttoptr i32 %v3_ba5c to i16*
  store i16 %v3_ba54, i16* %v4_ba5c, align 2
  store i32 %v0_ba18, i32* %ip.global-to-local, align 4
  %v0_ba64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba64 = add i32 %v0_ba64, 8
  %v2_ba64 = inttoptr i32 %v1_ba64 to i32*
  %v3_ba64 = load i32, i32* %v2_ba64, align 4
  store i32 %v3_ba64, i32* %r1.global-to-local, align 4
  %v2_ba68 = add i32 %v0_ba18, 4
  %v3_ba68 = inttoptr i32 %v2_ba68 to i32*
  store i32 %v3_ba64, i32* %v3_ba68, align 4
  %v0_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v1_ba6c = add i32 %v0_ba6c, 13
  %v2_ba6c = inttoptr i32 %v1_ba6c to i8*
  %v3_ba6c = load i8, i8* %v2_ba6c, align 1
  %v4_ba6c = zext i8 %v3_ba6c to i32
  store i32 %v4_ba6c, i32* %r2.global-to-local, align 4
  %v0_ba70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba70, 4
  %v2_ba70 = inttoptr i32 %v1_ba70 to i32*
  %v3_ba70 = load i32, i32* %v2_ba70, align 4
  store i32 %v3_ba70, i32* %r1.global-to-local, align 4
  %v1_ba74 = add i32 %v0_ba70, 14
  %v2_ba74 = inttoptr i32 %v1_ba74 to i16*
  %v3_ba74 = load i16, i16* %v2_ba74, align 2
  %v4_ba74 = zext i16 %v3_ba74 to i32
  store i32 %v4_ba74, i32* %r3.global-to-local, align 4
  %v1_ba78 = or i32 %v4_ba6c, 1
  store i32 %v1_ba78, i32* %r2.global-to-local, align 4
  %v3_ba7c = add i32 %v0_ba6c, 2
  %v4_ba7c = inttoptr i32 %v3_ba7c to i16*
  store i16 %v3_ba74, i16* %v4_ba7c, align 2
  %v0_ba80 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba80 = trunc i32 %v0_ba80 to i8
  %v2_ba80 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba80 = add i32 %v2_ba80, 13
  %v4_ba80 = inttoptr i32 %v3_ba80 to i8*
  store i8 %v1_ba80, i8* %v4_ba80, align 1
  %v0_ba84 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba84 = add i32 %v0_ba84, 12
  %v2_ba84 = inttoptr i32 %v1_ba84 to i8*
  %v3_ba84 = load i8, i8* %v2_ba84, align 1
  %v4_ba84 = zext i8 %v3_ba84 to i32
  store i32 %v4_ba84, i32* %r3.global-to-local, align 4
  %v1_ba88 = add i32 %v0_ba84, 13
  %v2_ba88 = inttoptr i32 %v1_ba88 to i8*
  %v3_ba88 = load i8, i8* %v2_ba88, align 1
  %v4_ba88 = zext i8 %v3_ba88 to i32
  %tmp103 = urem i8 %v3_ba84, 16
  %v1_ba8c = zext i8 %tmp103 to i32
  %v1_ba90 = or i32 %v1_ba8c, 128
  store i32 %v1_ba90, i32* %r3.global-to-local, align 4
  %v1_ba94 = or i32 %v4_ba88, 16
  store i32 %v1_ba94, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba98 = add i32 %v0_ba84, 8
  %v3_ba98 = inttoptr i32 %v2_ba98 to i32*
  store i32 %v0_ba98, i32* %v3_ba98, align 4
  %v0_ba9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba9c = trunc i32 %v0_ba9c to i8
  %v2_ba9c = load i32, i32* %ip.global-to-local, align 4
  %v3_ba9c = add i32 %v2_ba9c, 12
  %v4_ba9c = inttoptr i32 %v3_ba9c to i8*
  store i8 %v1_ba9c, i8* %v4_ba9c, align 1
  %v0_baa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v2_baa0 = load i32, i32* %ip.global-to-local, align 4
  %v3_baa0 = add i32 %v2_baa0, 13
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = call i32 @function_f188()
  %v1_baa4 = trunc i32 %v0_baa4 to i16
  store i32 %v0_baa4, i32* %r0.global-to-local, align 4
  store i32 %v0_ba18, i32* %lr.global-to-local, align 4
  store i32 %v1_b44c, i32* %r1.global-to-local, align 4
  %v1_bab0 = add i32 %v0_ba18, 13
  %v2_bab0 = inttoptr i32 %v1_bab0 to i8*
  %v3_bab0 = load i8, i8* %v2_bab0, align 1
  %v4_bab0 = zext i8 %v3_bab0 to i32
  store i32 %v1_bab4, i32* %r2.global-to-local, align 4
  %v1_bab8 = and i32 %v4_bab0, 223
  %v5_babc = or i32 %v1_bab8, %v4_babc
  store i32 %v5_babc, i32* %r3.global-to-local, align 4
  %v1_bac0 = trunc i32 %v5_babc to i8
  store i8 %v1_bac0, i8* %v2_bab0, align 1
  store i32 %v1_b46c, i32* %ip.global-to-local, align 4
  %v0_bac8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bac8 = add i32 %v0_bac8, 13
  %v2_bac8 = inttoptr i32 %v1_bac8 to i8*
  %v3_bac8 = load i8, i8* %v2_bac8, align 1
  %v4_bac8 = zext i8 %v3_bac8 to i32
  store i32 %v1_bacc, i32* %r3.global-to-local, align 4
  %v1_bad0 = and i32 %v4_bac8, 239
  %v5_bad4 = or i32 %v1_bad0, %v4_bad4
  store i32 %v5_bad4, i32* %r2.global-to-local, align 4
  %v1_bad8 = trunc i32 %v5_bad4 to i8
  store i8 %v1_bad8, i8* %v2_bac8, align 1
  %v0_badc = load i32, i32* %lr.global-to-local, align 4
  %v1_badc = add i32 %v0_badc, 13
  %v2_badc = inttoptr i32 %v1_badc to i8*
  %v3_badc = load i8, i8* %v2_badc, align 1
  %v4_badc = zext i8 %v3_badc to i32
  store i32 %v1_b48c, i32* %lr.global-to-local, align 4
  store i32 %v0_ba18, i32* %r1.global-to-local, align 4
  store i32 %v1_bae8, i32* %r2.global-to-local, align 4
  %v1_baec = and i32 %v4_badc, 247
  %v5_baf0 = or i32 %v1_baec, %v4_baf0
  store i32 %v5_baf0, i32* %r3.global-to-local, align 4
  %v1_baf4 = trunc i32 %v5_baf0 to i8
  store i8 %v1_baf4, i8* %v2_bab0, align 1
  store i32 %v1_b4ac, i32* %ip.global-to-local, align 4
  %v0_bafc = load i32, i32* %r1.global-to-local, align 4
  %v1_bafc = add i32 %v0_bafc, 13
  %v2_bafc = inttoptr i32 %v1_bafc to i8*
  %v3_bafc = load i8, i8* %v2_bafc, align 1
  %v4_bafc = zext i8 %v3_bafc to i32
  store i32 %v1_bb00, i32* %r3.global-to-local, align 4
  %v1_bb04 = and i32 %v4_bafc, 251
  %v5_bb08 = or i32 %v1_bb04, %v4_bb08
  store i32 %v5_bb08, i32* %r2.global-to-local, align 4
  %v1_bb0c = trunc i32 %v5_bb08 to i8
  store i8 %v1_bb0c, i8* %v2_bafc, align 1
  store i32 %v1_b4cc, i32* @lr, align 4
  %v0_bb14 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb14 = add i32 %v0_bb14, 13
  %v2_bb14 = inttoptr i32 %v1_bb14 to i8*
  %v3_bb14 = load i8, i8* %v2_bb14, align 1
  %v4_bb14 = zext i8 %v3_bb14 to i32
  store i32 %v1_bb18, i32* %r2.global-to-local, align 4
  %v1_bb1c = and i32 %v4_bb14, 253
  %v4_bb20 = or i32 %v1_bb1c, %v3_bb20
  store i32 %v4_bb20, i32* %r3.global-to-local, align 4
  %v1_bb24 = trunc i32 %v4_bb20 to i8
  store i8 %v1_bb24, i8* %v2_bb14, align 1
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb28 = add i32 %v0_bb28, 13
  %v2_bb28 = inttoptr i32 %v1_bb28 to i8*
  %v3_bb28 = load i8, i8* %v2_bb28, align 1
  %v4_bb28 = zext i8 %v3_bb28 to i32
  %v1_bb30 = and i32 %v4_bb28, 254
  %v2_bb38 = or i32 %v1_bb30, %v1_bb34
  store i32 %v2_bb38, i32* %r3.global-to-local, align 4
  store i32 %v0_ba18, i32* %r2.global-to-local, align 4
  %v1_bb40 = trunc i32 %v2_bb38 to i8
  store i8 %v1_bb40, i8* %v2_bab0, align 1
  %v3_bb44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bb44 = add i32 %v3_bb44, 14
  %v5_bb44 = inttoptr i32 %v4_bb44 to i16*
  store i16 %v1_baa4, i16* %v5_bb44, align 2
  store i32 %v6_b504, i32* %r1.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r4, align 4
  store i32 %v0_bb4c, i32* %r0.global-to-local, align 4
  %v2_bb50 = call i32 @function_f24c(i32 %v0_bb4c, i32 %v6_b504)
  store i32 %v2_bb50, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %ip.global-to-local, align 4
  %v2_bb5c = load i32, i32* @r4, align 4
  %v4_bb5c = add i32 %v2_bb5c, %v6_b504
  %v5_bb5c = inttoptr i32 %v4_bb5c to i8*
  store i8 0, i8* %v5_bb5c, align 1
  %v3_bb60 = load i32, i32* %stack_var_-44, align 4
  %v1_bb68 = add i32 %v3_bb60, 1
  store i32 %v1_bb68, i32* @r3, align 4
  store i32 %v1_bb68, i32* %stack_var_-44, align 4
  %v5_bb74 = icmp slt i32 %v1_bb68, %arg2
  br i1 %v5_bb74, label %dec_label_pc_b59c.outer, label %dec_label_pc_b728.preheader

; uselistorder directives
  uselistorder i32 %v1_bb68, { 1, 0, 2 }
  uselistorder i8* %v2_bab0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_baa4, { 1, 0 }
  uselistorder i32 %v0_ba18, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 %v5_b94c, { 1, 0 }
  uselistorder i32 %v2_b910, { 1, 2, 0 }
  uselistorder i32 %v0_b8f0, { 1, 0 }
  uselistorder i32 %v0_b8ac, { 1, 2, 0, 3 }
  uselistorder i32 %v7_b840, { 0, 2, 3, 1 }
  uselistorder i32 %v1_b828, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b7f0, { 1, 0 }
  uselistorder i32 %v4_b7e0, { 1, 0 }
  uselistorder i32 %v3_b7ac, { 1, 0 }
  uselistorder i32 %v3_b78c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b778, { 1, 0 }
  uselistorder i32 %v3_b750, { 1, 0 }
  uselistorder i32 %v1_b744, { 2, 0, 1 }
  uselistorder i32 %v1_b718, { 1, 0, 2 }
  uselistorder i32 %v3_b700, { 0, 2, 3, 1 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 3, 1, 2 }
  uselistorder i32 %v0_b60c, { 1, 0, 2 }
  uselistorder i32 %v0_b930, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %v4_b5fc, { 1, 0 }
  uselistorder i1 %v7_b5f4, { 1, 0 }
  uselistorder i32 %v3_b5a8, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %stack_var_-340.0.ph, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v1_bb18, { 1, 0 }
  uselistorder i32 %v1_bb00, { 1, 0 }
  uselistorder i32 %v1_bacc, { 1, 0 }
  uselistorder i32 %v3_b6c0, { 1, 0 }
  uselistorder i32 %v1_bae8, { 1, 0 }
  uselistorder i32 %v1_bab4, { 1, 0 }
  uselistorder i32 %v4_b9cc, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_b98c, { 2, 0, 1 }
  uselistorder i32 %v1_b6d8, { 1, 0 }
  uselistorder i32 %v4_b6d4, { 2, 0, 1 }
  uselistorder i32 %v2_b5e0, { 3, 2, 1, 4, 0 }
  uselistorder i16 %v5_b594, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v3_b548, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b534, { 1, 0 }
  uselistorder i32 %v1_b524, { 2, 1, 0 }
  uselistorder i32 %v6_b504, { 2, 7, 6, 5, 8, 3, 12, 11, 10, 13, 4, 0, 9, 1 }
  uselistorder i32 %v1_b4cc, { 1, 0 }
  uselistorder i32 %v1_b4ac, { 1, 0 }
  uselistorder i32 %v1_b48c, { 1, 0 }
  uselistorder i32 %v1_b46c, { 1, 0 }
  uselistorder i32 %v1_b44c, { 1, 0 }
  uselistorder i32 %v6_b428, { 1, 0 }
  uselistorder i32 %v1_b410, { 1, 0 }
  uselistorder i32 %v5_b3e4, { 1, 0 }
  uselistorder i32 %v6_b3a8, { 1, 0 }
  uselistorder i32 %v2_b390, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b380, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 40, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 7, 3, 4, 5, 6, 12, 8, 9, 10, 11, 14, 13, 16, 15, 17, 19, 18, 22, 20, 26, 21, 23, 25, 24, 29, 27, 28, 30, 31, 32, 34, 35, 33, 36, 38, 37, 40, 39, 43, 42, 41, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32 %arg2, { 2, 1, 4, 5, 3, 0, 6, 8, 7, 9, 10, 11 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_b88c, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b768, { 1, 0 }
  uselistorder label %dec_label_pc_b728, { 1, 0 }
  uselistorder label %dec_label_pc_b654, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b628, { 1, 0 }
  uselistorder label %dec_label_pc_b604, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_b5b8, { 1, 0 }
  uselistorder label %dec_label_pc_b59c, { 1, 0 }
  uselistorder label %dec_label_pc_b59c.outer, { 1, 0 }
}

define i32 @function_bb80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bb80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bb80 = load i32, i32* @sb, align 4
  %v24_bb80 = load i32, i32* @fp, align 4
  %v27_bb80 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_bbac = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bbbc = load i32, i32* @sl, align 4
  store i32 %v0_bbbc, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r5, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_9fe8(i32 %v0_bbc0, i32* %v5_bbc4, i32 2, i32 %v0_bbbc)
  %v1_bbd0 = urem i32 %v6_bbc4, 256
  store i32 %v1_bbd0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bbdc = load i32, i32* @r4, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r0.global-to-local, align 4
  %v5_bbe4 = trunc i32 %v6_bbc4 to i8
  %v6_bbe8 = inttoptr i32 %v0_bbdc to i32*
  %v7_bbe8 = call i32 @function_9fe8(i32 %v0_bbe0, i32* %v6_bbe8, i32 3, i32 65535)
  %v0_bbec = load i32, i32* @r4, align 4
  store i32 %v0_bbec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bbfc = load i32, i32* @r5, align 4
  store i32 %v0_bbfc, i32* %r0.global-to-local, align 4
  %v5_bc00 = inttoptr i32 %v0_bbec to i32*
  %v6_bc00 = call i32 @function_9fe8(i32 %v0_bbfc, i32* %v5_bc00, i32 4, i32 64)
  %v1_bc08 = urem i32 %v6_bc00, 256
  store i32 %v1_bc08, i32* %ip.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r4, align 4
  store i32 %v0_bc0c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bc14 = load i32, i32* @sl, align 4
  store i32 %v0_bc14, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r5, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v6_bc20 = inttoptr i32 %v0_bc0c to i32*
  %v7_bc20 = call i32 @function_9fe8(i32 %v0_bc18, i32* %v6_bc20, i32 5, i32 %v0_bc14)
  %v1_bc2c = urem i32 %v7_bc20, 256
  store i32 %v1_bc2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  %v0_bc3c = load i32, i32* @r5, align 4
  store i32 %v0_bc3c, i32* %r0.global-to-local, align 4
  %v5_bc44 = inttoptr i32 %v0_bc38 to i32*
  %v6_bc44 = call i32 @function_9fe8(i32 %v0_bc3c, i32* %v5_bc44, i32 6, i32 65535)
  %v0_bc4c = load i32, i32* @r4, align 4
  store i32 %v0_bc4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bc44, i32* %fp.global-to-local, align 4
  %v0_bc5c = load i32, i32* @r5, align 4
  store i32 %v0_bc5c, i32* %r0.global-to-local, align 4
  %v4_bc60 = inttoptr i32 %v0_bc4c to i32*
  %v5_bc60 = call i32 @function_9fe8(i32 %v0_bc5c, i32* %v4_bc60, i32 7, i32 65535)
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v5_bc60, i32* %sb.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r5, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v4_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v5_bc7c = call i32 @function_9fe8(i32 %v0_bc78, i32* %v4_bc7c, i32 16, i32 65535)
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bc94 = load i32, i32* @r5, align 4
  store i32 %v0_bc94, i32* %r0.global-to-local, align 4
  %v5_bc98 = inttoptr i32 %v0_bc88 to i32*
  %v6_bc98 = call i32 @function_9fe8(i32 %v0_bc94, i32* %v5_bc98, i32 17, i32 65535)
  %v0_bc9c = load i32, i32* @r4, align 4
  store i32 %v0_bc9c, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_bca8 = load i32, i32* @sl, align 4
  store i32 %v0_bca8, i32* %r3.global-to-local, align 4
  %v0_bcac = load i32, i32* @r5, align 4
  store i32 %v0_bcac, i32* %r0.global-to-local, align 4
  %v5_bcb0 = inttoptr i32 %v0_bc9c to i32*
  %v6_bcb0 = call i32 @function_9fe8(i32 %v0_bcac, i32* %v5_bcb0, i32 10, i32 %v0_bca8)
  %v0_bcb4 = load i32, i32* @r4, align 4
  store i32 %v0_bcb4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bcc4 = load i32, i32* @r5, align 4
  store i32 %v0_bcc4, i32* %r0.global-to-local, align 4
  %v5_bcc8 = inttoptr i32 %v0_bcb4 to i32*
  %v6_bcc8 = call i32 @function_9fe8(i32 %v0_bcc4, i32* %v5_bcc8, i32 11, i32 1)
  %v0_bccc = load i32, i32* @r4, align 4
  store i32 %v0_bccc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_bcd8 = load i32, i32* @sl, align 4
  store i32 %v0_bcd8, i32* %r3.global-to-local, align 4
  %v0_bcdc = load i32, i32* @r5, align 4
  store i32 %v0_bcdc, i32* %r0.global-to-local, align 4
  %v5_bce0 = inttoptr i32 %v0_bccc to i32*
  %v6_bce0 = call i32 @function_9fe8(i32 %v0_bcdc, i32* %v5_bce0, i32 12, i32 %v0_bcd8)
  %v0_bce4 = load i32, i32* @r4, align 4
  store i32 %v0_bce4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @sl, align 4
  store i32 %v0_bcf0, i32* %r3.global-to-local, align 4
  %v0_bcf4 = load i32, i32* @r5, align 4
  store i32 %v0_bcf4, i32* %r0.global-to-local, align 4
  %v5_bcf8 = inttoptr i32 %v0_bce4 to i32*
  %v6_bcf8 = call i32 @function_9fe8(i32 %v0_bcf4, i32* %v5_bcf8, i32 13, i32 %v0_bcf0)
  %v0_bcfc = load i32, i32* @r4, align 4
  store i32 %v0_bcfc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_bd08 = load i32, i32* @sl, align 4
  store i32 %v0_bd08, i32* %r3.global-to-local, align 4
  %v0_bd0c = load i32, i32* @r5, align 4
  store i32 %v0_bd0c, i32* %r0.global-to-local, align 4
  %v5_bd10 = inttoptr i32 %v0_bcfc to i32*
  %v6_bd10 = call i32 @function_9fe8(i32 %v0_bd0c, i32* %v5_bd10, i32 14, i32 %v0_bd08)
  %v0_bd14 = load i32, i32* @r4, align 4
  store i32 %v0_bd14, i32* %r1.global-to-local, align 4
  %v0_bd1c = load i32, i32* @sl, align 4
  store i32 %v0_bd1c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_bd24 = load i32, i32* @r5, align 4
  store i32 %v0_bd24, i32* %r0.global-to-local, align 4
  %v5_bd28 = inttoptr i32 %v0_bd14 to i32*
  %v6_bd28 = call i32 @function_9fe8(i32 %v0_bd24, i32* %v5_bd28, i32 15, i32 %v0_bd1c)
  %v0_bd2c = load i32, i32* @r4, align 4
  store i32 %v0_bd2c, i32* %r1.global-to-local, align 4
  %v0_bd34 = load i32, i32* @sl, align 4
  store i32 %v0_bd34, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bd3c = load i32, i32* @r5, align 4
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v5_bd40 = inttoptr i32 %v0_bd2c to i32*
  %v6_bd40 = call i32 @function_9fe8(i32 %v0_bd3c, i32* %v5_bd40, i32 %v0_bd34, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r4, align 4
  store i32 %v0_bd4c, i32* %r1.global-to-local, align 4
  store i32 %v6_bd40, i32* @r8, align 4
  %v0_bd54 = load i32, i32* @r5, align 4
  store i32 %v0_bd54, i32* %r0.global-to-local, align 4
  %v4_bd58 = inttoptr i32 %v0_bd4c to i32*
  %v5_bd58 = call i32 @function_9fe8(i32 %v0_bd54, i32* %v4_bd58, i32 1, i32 1)
  %v2_bd64 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_bd64, i32* %r3.global-to-local, align 4
  %v1_bd68 = urem i32 %v5_bd58, 256
  store i32 %v1_bd68, i32* %ip.global-to-local, align 4
  %v0_bd6c = load i32, i32* @r4, align 4
  store i32 %v0_bd6c, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_bd74 = load i32, i32* @r5, align 4
  store i32 %v0_bd74, i32* %r0.global-to-local, align 4
  %v5_bd7c = inttoptr i32 %v0_bd6c to i32*
  %v6_bd7c = call i32 @function_9f7c(i32 %v0_bd74, i32* %v5_bd7c, i32 24, i32 %v2_bd64, i32 %v1_bd68)
  %v0_bd84 = load i32, i32* @sl, align 4
  store i32 %v0_bd84, i32* %r0.global-to-local, align 4
  %v1_bd88 = inttoptr i32 %v0_bd84 to i32*
  %v2_bd88 = call i32 @function_12148(i32* %v1_bd88)
  %v1_bd8c = load i32, i32* @r6, align 4
  %v2_bd8c = add i32 %v1_bd8c, %v2_bd88
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bda0 = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v7_bda4 = icmp eq i32 %v3_bda0, -1
  store i1 %v7_bda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bda4, label %dec_label_pc_c288, label %dec_label_pc_bdb0

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_bb80
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bdb8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bdb8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bdc0 = load i32, i32* @sl, align 4
  store i32 %v0_bdc0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bdcc = call i32 @function_12c90(i32 %v3_bda0, i32 %v0_bdc0, i32 3, i32 %v6_bdb8, i32 4)
  store i32 %v5_bdcc, i32* %r0.global-to-local, align 4
  %v7_bdd0 = icmp eq i32 %v5_bdcc, -1
  store i1 %v7_bdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bdd0, label %dec_label_pc_c294, label %dec_label_pc_bdd8

dec_label_pc_bdd8:                                ; preds = %dec_label_pc_bdb0
  store i32 %v7_bbe8, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_bde4 = load i32, i32* %fp.global-to-local, align 4
  %v0_bde8 = load i32, i32* %sb.global-to-local, align 4
  %v3_bde8 = mul i32 %v0_bde8, 65536
  store i32 %v3_bde8, i32* %sb.global-to-local, align 4
  %v3_bdec = urem i32 %v7_bbe8, 65536
  store i32 %v3_bdec, i32* %r2.global-to-local, align 4
  %v3_bdf0 = urem i32 %v0_bde4, 65536
  store i32 %v3_bdf0, i32* %r3.global-to-local, align 4
  %v3_bdf4 = urem i32 %v0_bde8, 65536
  store i32 %v3_bdf4, i32* %ip.global-to-local, align 4
  %v2_bdf8 = icmp eq i32 %arg2, 0
  store i1 %v2_bdf8, i1* %cpsr_z.global-to-local, align 1
  %v0_bdfc = load i32, i32* @sl, align 4
  store i32 %v0_bdfc, i32* %stack_var_-44, align 4
  br i1 %v2_bdf8, label %dec_label_pc_c038.preheader, label %dec_label_pc_be10

dec_label_pc_be10:                                ; preds = %dec_label_pc_bdd8
  %v0_be20 = load i32, i32* @r8, align 4
  %v3_be20 = mul i32 %v0_be20, 65536
  %v1_be28 = add i32 %v3_be20, 2621440
  %tmp59 = mul i32 %v0_bde4, 256
  %v3_be34 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bde8, 256
  %v3_be38 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bde4, 256
  %v4_be40 = urem i32 %tmp61, 256
  %v5_be40 = or i32 %v4_be40, %v3_be34
  %tmp62 = udiv i32 %v1_be28, 256
  %v3_be44 = and i32 %tmp62, 65280
  %tmp63 = mul i32 %v7_bbe8, 256
  %v3_be48 = and i32 %tmp63, 65280
  %tmp64 = udiv i32 %v0_bde8, 256
  %v4_be4c = urem i32 %tmp64, 256
  %v5_be4c = or i32 %v4_be4c, %v3_be38
  store i32 %v5_be4c, i32* @fp, align 4
  %v4_be5c = udiv i32 %v1_be28, 16777216
  %v5_be5c = or i32 %v3_be44, %v4_be5c
  store i32 %v5_be5c, i32* @lr, align 4
  %tmp65 = udiv i32 %v7_bbe8, 256
  %v4_be60 = urem i32 %tmp65, 256
  %v5_be60 = or i32 %v4_be60, %v3_be48
  store i32 %v5_be60, i32* @r5, align 4
  %tmp66 = mul i32 %v5_bc7c, 256
  %v3_be6c = and i32 %tmp66, 65280
  %v1_be70 = urem i32 %v6_bcb0, 2
  %v1_be74 = urem i32 %v6_bcc8, 2
  %tmp67 = udiv i32 %v5_bc7c, 256
  %v4_be78 = urem i32 %tmp67, 256
  %v5_be78 = or i32 %v4_be78, %v3_be6c
  %v1_be84 = urem i32 %v6_bce0, 2
  store i32 %v1_be84, i32* %r2.global-to-local, align 4
  %v1_be88 = urem i32 %v6_bcf8, 2
  store i32 %v1_be88, i32* %r3.global-to-local, align 4
  store i32 %v6_bd10, i32* %ip.global-to-local, align 4
  store i32 %v6_bd28, i32* %r0.global-to-local, align 4
  store i32 %v6_bce0, i32* %r1.global-to-local, align 4
  %v1_beb0 = urem i32 %v6_bd10, 2
  store i32 %v1_beb0, i32* @sb, align 4
  store i32 %v0_bdfc, i32* @r4, align 4
  %v1_beb8 = urem i32 %v6_bce0, 256
  store i32 %v1_beb8, i32* @r6, align 4
  %v1_bebc = urem i32 %v6_bd28, 2
  store i32 %v1_bebc, i32* @sl, align 4
  %v4_bf14 = sext i8 %v5_bbe4 to i32
  %sext6 = mul nuw i32 %v5_be5c, 65536
  %v4_bf30 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_be60, 65536
  %v4_bf38 = sdiv i32 %sext7, 65536
  %sext8 = mul nuw i32 %v5_be40, 65536
  %v4_bf54 = sdiv i32 %sext8, 65536
  %tmp = sub nsw i32 0, %v1_be74
  %v4_bfa4 = and i32 %tmp, 16
  %tmp70 = sub nsw i32 0, %v1_be84
  %v4_bfb8 = and i32 %tmp70, 8
  %tmp71 = sub nsw i32 0, %v1_be88
  %v4_bfcc = and i32 %tmp71, 4
  %v1_bf24 = trunc i32 %v6_bc00 to i8
  br label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %.thread10, %dec_label_pc_be10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_becc = call i32 @function_1383c(i32 1510, i32 1)
  %v2_bed4 = load i32, i32* @r4, align 4
  %v5_bed4 = mul i32 %v2_bed4, 4
  %v6_bed4 = add i32 %v5_bed4, %v2_bbac
  %v7_bed4 = inttoptr i32 %v6_bed4 to i32*
  store i32 %v2_becc, i32* %v7_bed4, align 4
  %v3_bed8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bed8, i32* %r2.global-to-local, align 4
  %v5_bee0 = mul i32 %v3_bed8, 24
  %v1_bee4 = load i32, i32* @r7, align 4
  %v2_bee4 = add i32 %v1_bee4, %v5_bee0
  store i32 %v2_bee4, i32* %r0.global-to-local, align 4
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v4_beec = mul i32 %v3_bed8, 4
  %v5_beec = add i32 %v4_beec, %v2_bbac
  %v6_beec = inttoptr i32 %v5_beec to i32*
  %v7_beec = load i32, i32* %v6_beec, align 4
  store i32 %v7_beec, i32* %r1.global-to-local, align 4
  %v1_bef0 = inttoptr i32 %v7_beec to i8*
  %v2_bef0 = load i8, i8* %v1_bef0, align 1
  %tmp72 = urem i8 %v2_bef0, 16
  %v1_bef4 = zext i8 %tmp72 to i32
  %v1_bef8 = or i32 %v1_bef4, 64
  store i32 %v1_bef8, i32* %r3.global-to-local, align 4
  %v1_befc = trunc i32 %v1_bef8 to i8
  store i8 %v1_befc, i8* %v1_bef0, align 1
  %v0_bf00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf00 = inttoptr i32 %v0_bf00 to i8*
  %v2_bf00 = load i8, i8* %v1_bf00, align 1
  %v1_bf04 = and i8 %v2_bf00, -16
  %v1_bf08 = or i8 %v1_bf04, 5
  store i32 %v1_bc2c, i32* %ip.global-to-local, align 4
  store i8 %v1_bf08, i8* %v1_bf00, align 1
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v2_bf18 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf18 = add i32 %v2_bf18, 1
  %v4_bf18 = inttoptr i32 %v3_bf18 to i8*
  store i8 %v5_bbe4, i8* %v4_bf18, align 1
  store i32 %v1_bc08, i32* %r3.global-to-local, align 4
  %v0_bf20 = load i32, i32* %ip.global-to-local, align 4
  %v2_bf20 = icmp eq i32 %v0_bf20, 0
  store i1 %v2_bf20, i1* %cpsr_z.global-to-local, align 1
  %v2_bf24 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf24 = add i32 %v2_bf24, 8
  %v4_bf24 = inttoptr i32 %v3_bf24 to i8*
  store i8 %v1_bf24, i8* %v4_bf24, align 1
  %v0_bf28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bec0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bf2c = load i32, i32* %r1.global-to-local, align 4
  %v4_bf2c = add i32 %v3_bf2c, 6
  %v5_bf2c = inttoptr i32 %v4_bf2c to i16*
  store i16 64, i16* %v5_bf2c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bec0, %bb
  store i32 %v4_bf30, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_bf38, i32* %r2.global-to-local, align 4
  %v2_bf3c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf3c = add i32 %v2_bf3c, 9
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 6, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* %ip.global-to-local, align 4
  %v1_bf40 = trunc i32 %v0_bf40 to i16
  %v2_bf40 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf40 = add i32 %v2_bf40, 2
  %v4_bf40 = inttoptr i32 %v3_bf40 to i16*
  store i16 %v1_bf40, i16* %v4_bf40, align 2
  store i32 %v6_bd7c, i32* %ip.global-to-local, align 4
  %v1_bf48 = load i32, i32* %r1.global-to-local, align 4
  %v2_bf48 = add i32 %v1_bf48, 12
  %v3_bf48 = inttoptr i32 %v2_bf48 to i32*
  store i32 %v6_bd7c, i32* %v3_bf48, align 4
  %v0_bf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf4c = trunc i32 %v0_bf4c to i16
  %v2_bf4c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf4c = add i32 %v2_bf4c, 4
  %v4_bf4c = inttoptr i32 %v3_bf4c to i16*
  store i16 %v1_bf4c, i16* %v4_bf4c, align 2
  %v0_bf50 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf50 = add i32 %v0_bf50, 16
  %v2_bf50 = inttoptr i32 %v1_bf50 to i32*
  %v3_bf50 = load i32, i32* %v2_bf50, align 4
  store i32 %v3_bf50, i32* %r2.global-to-local, align 4
  store i32 %v4_bf54, i32* %r0.global-to-local, align 4
  %v1_bf58 = load i32, i32* %r1.global-to-local, align 4
  %v2_bf58 = add i32 %v1_bf58, 16
  %v3_bf58 = inttoptr i32 %v2_bf58 to i32*
  store i32 %v3_bf50, i32* %v3_bf58, align 4
  %v0_bf5c = load i32, i32* %r0.global-to-local, align 4
  %v1_bf5c = trunc i32 %v0_bf5c to i16
  %v2_bf5c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf5c = add i32 %v2_bf5c, 20
  %v4_bf5c = inttoptr i32 %v3_bf5c to i16*
  store i16 %v1_bf5c, i16* %v4_bf5c, align 2
  %v0_bf60 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf60 = add i32 %v0_bf60, 20
  store i32 %v1_bf60, i32* @r4, align 4
  %v1_bf64 = add i32 %v0_bf60, 32
  %v2_bf64 = inttoptr i32 %v1_bf64 to i8*
  %v3_bf64 = load i8, i8* %v2_bf64, align 1
  %v4_bf64 = zext i8 %v3_bf64 to i32
  %v1_bf68 = and i32 %v4_bf64, 95
  store i32 %v1_bf68, i32* %r3.global-to-local, align 4
  %v1_bf6c = add i32 %v0_bf60, 33
  %v2_bf6c = inttoptr i32 %v1_bf6c to i8*
  %v3_bf6c = load i8, i8* %v2_bf6c, align 1
  %v4_bf6c = zext i8 %v3_bf6c to i32
  store i32 %v4_bf6c, i32* %r2.global-to-local, align 4
  %v1_bf70 = or i32 %v1_bf68, 80
  %v1_bf74 = add i32 %v0_bf60, 40
  store i32 %v1_bf74, i32* @r5, align 4
  store i32 %v1_be70, i32* %r1.global-to-local, align 4
  %v1_bf7c = trunc i32 %v1_bf70 to i8
  store i8 %v1_bf7c, i8* %v2_bf64, align 1
  store i32 %v5_be78, i32* %r3.global-to-local, align 4
  %v0_bf84 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf84 = and i32 %v0_bf84, -33
  %v1_bf88 = load i32, i32* %r1.global-to-local, align 4
  %v4_bf88 = mul i32 %v1_bf88, 32
  %v5_bf88 = or i32 %v4_bf88, %v1_bf84
  store i32 %v5_bf88, i32* %r2.global-to-local, align 4
  %v1_bf8c = load i32, i32* @r4, align 4
  %v2_bf8c = add i32 %v1_bf8c, 4
  %v3_bf8c = inttoptr i32 %v2_bf8c to i32*
  store i32 %v5_be78, i32* %v3_bf8c, align 4
  %v0_bf90 = load i32, i32* @fp, align 4
  %v1_bf90 = trunc i32 %v0_bf90 to i16
  %v2_bf90 = load i32, i32* @r4, align 4
  %v3_bf90 = add i32 %v2_bf90, 2
  %v4_bf90 = inttoptr i32 %v3_bf90 to i16*
  store i16 %v1_bf90, i16* %v4_bf90, align 2
  %v0_bf94 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* @r4, align 4
  %v3_bf94 = add i32 %v2_bf94, 13
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* @r4, align 4
  %v1_bf98 = add i32 %v0_bf98, 13
  %v2_bf98 = inttoptr i32 %v1_bf98 to i8*
  %v3_bf98 = load i8, i8* %v2_bf98, align 1
  %v4_bf98 = zext i8 %v3_bf98 to i32
  store i32 %v1_be74, i32* %ip.global-to-local, align 4
  %v1_bfa0 = and i32 %v4_bf98, 239
  %v5_bfa4 = or i32 %v1_bfa0, %v4_bfa4
  store i32 %v5_bfa4, i32* %r3.global-to-local, align 4
  %v1_bfa8 = trunc i32 %v5_bfa4 to i8
  store i8 %v1_bfa8, i8* %v2_bf98, align 1
  %v0_bfac = load i32, i32* @r4, align 4
  %v1_bfac = add i32 %v0_bfac, 13
  %v2_bfac = inttoptr i32 %v1_bfac to i8*
  %v3_bfac = load i8, i8* %v2_bfac, align 1
  %v4_bfac = zext i8 %v3_bfac to i32
  store i32 %v1_be84, i32* %r0.global-to-local, align 4
  %v1_bfb4 = and i32 %v4_bfac, 247
  %v5_bfb8 = or i32 %v1_bfb4, %v4_bfb8
  store i32 %v5_bfb8, i32* %r2.global-to-local, align 4
  %v1_bfbc = trunc i32 %v5_bfb8 to i8
  store i8 %v1_bfbc, i8* %v2_bfac, align 1
  %v0_bfc0 = load i32, i32* @r4, align 4
  %v1_bfc0 = add i32 %v0_bfc0, 13
  %v2_bfc0 = inttoptr i32 %v1_bfc0 to i8*
  %v3_bfc0 = load i8, i8* %v2_bfc0, align 1
  %v4_bfc0 = zext i8 %v3_bfc0 to i32
  store i32 %v1_be88, i32* %r1.global-to-local, align 4
  %v1_bfc8 = and i32 %v4_bfc0, 251
  %v5_bfcc = or i32 %v1_bfc8, %v4_bfcc
  store i32 %v5_bfcc, i32* %r3.global-to-local, align 4
  %v1_bfd0 = trunc i32 %v5_bfcc to i8
  store i8 %v1_bfd0, i8* %v2_bfc0, align 1
  %v0_bfd4 = load i32, i32* @r4, align 4
  %v1_bfd4 = add i32 %v0_bfd4, 13
  %v2_bfd4 = inttoptr i32 %v1_bfd4 to i8*
  %v3_bfd4 = load i8, i8* %v2_bfd4, align 1
  %v4_bfd4 = zext i8 %v3_bfd4 to i32
  %v1_bfd8 = and i32 %v4_bfd4, 253
  %v1_bfdc = load i32, i32* @sb, align 4
  %v3_bfdc = mul i32 %v1_bfdc, 2
  %v4_bfdc = or i32 %v3_bfdc, %v1_bfd8
  store i32 %v4_bfdc, i32* %r2.global-to-local, align 4
  %v1_bfe0 = trunc i32 %v4_bfdc to i8
  store i8 %v1_bfe0, i8* %v2_bfd4, align 1
  %v0_bfe4 = load i32, i32* @r4, align 4
  %v1_bfe4 = add i32 %v0_bfe4, 13
  %v2_bfe4 = inttoptr i32 %v1_bfe4 to i8*
  %v3_bfe4 = load i8, i8* %v2_bfe4, align 1
  %v4_bfe4 = zext i8 %v3_bfe4 to i32
  %v1_bfe8 = and i32 %v4_bfe4, 254
  %v0_bfec = load i32, i32* @sl, align 4
  %v2_bfec = or i32 %v1_bfe8, %v0_bfec
  store i32 %v2_bfec, i32* %r3.global-to-local, align 4
  %v1_bff0 = trunc i32 %v2_bfec to i8
  store i8 %v1_bff0, i8* %v2_bfe4, align 1
  %v0_bff4 = call i32 @function_f188()
  %v1_bff4 = trunc i32 %v0_bff4 to i16
  store i32 %v0_bff4, i32* %r0.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r6, align 4
  %v2_bff8 = icmp eq i32 %v0_bff8, 0
  store i1 %v2_bff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bff8, label %.thread10, label %bb68

bb68:                                             ; preds = %.thread
  %v1_bffc = load i32, i32* @r4, align 4
  %v2_bffc = add i32 %v1_bffc, 13
  %v3_bffc = inttoptr i32 %v2_bffc to i8*
  %v4_bffc = load i8, i8* %v3_bffc, align 1
  %v5_bffc = zext i8 %v4_bffc to i32
  %v2_c000 = or i32 %v5_bffc, 8
  store i32 %v2_c000, i32* %r3.global-to-local, align 4
  %v2_c004 = trunc i32 %v2_c000 to i8
  store i8 %v2_c004, i8* %v3_bffc, align 1
  br label %.thread10

.thread10:                                        ; preds = %.thread, %bb68
  %v3_c008 = load i32, i32* @r4, align 4
  %v4_c008 = add i32 %v3_c008, 14
  %v5_c008 = inttoptr i32 %v4_c008 to i16*
  store i16 %v1_bff4, i16* %v5_c008, align 2
  %v0_c00c = load i32, i32* @r8, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  %v0_c010 = load i32, i32* @r5, align 4
  store i32 %v0_c010, i32* %r0.global-to-local, align 4
  %v2_c014 = call i32 @function_f24c(i32 %v0_c010, i32 %v0_c00c)
  store i32 %v2_c014, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c01c = load i32, i32* @r5, align 4
  %v3_c01c = load i32, i32* @r8, align 4
  %v4_c01c = add i32 %v3_c01c, %v2_c01c
  %v5_c01c = inttoptr i32 %v4_c01c to i8*
  store i8 0, i8* %v5_c01c, align 1
  %v3_c020 = load i32, i32* %stack_var_-44, align 4
  %v1_c024 = add i32 %v3_c020, 1
  store i32 %v1_c024, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_c02c = icmp eq i32 %v1_c024, %arg2
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c024, i32* %stack_var_-44, align 4
  %v5_c034 = icmp slt i32 %v1_c024, %arg2
  br i1 %v5_c034, label %dec_label_pc_bec0, label %dec_label_pc_c038.preheader

dec_label_pc_c038.preheader:                      ; preds = %.thread10, %dec_label_pc_bdd8
  %v2_c074 = icmp eq i32 %v6_bd7c, -1
  %v7_c074 = icmp eq i32 %v6_bd7c, -1
  %v3_c1e8 = icmp eq i32 %v3_bdec, 65535
  %v2_c24c = icmp eq i32 %v1_bd68, 0
  br label %dec_label_pc_c038

dec_label_pc_c038:                                ; preds = %dec_label_pc_c038.preheader, %dec_label_pc_c274
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_bdf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bdf8, label %dec_label_pc_c274, label %dec_label_pc_c04c

dec_label_pc_c04c:                                ; preds = %dec_label_pc_c038
  %v0_c04c = load i32, i32* @r8, align 4
  %v3_c04c = mul i32 %v0_c04c, 65536
  %v1_c050 = add i32 %v3_c04c, 1310720
  store i32 %v1_c050, i32* %r2.global-to-local, align 4
  %tmp69 = udiv i32 %v1_c050, 256
  %v3_c058 = and i32 %tmp69, 65280
  store i32 %v3_c058, i32* %r3.global-to-local, align 4
  %v4_c05c = udiv i32 %v1_c050, 16777216
  %v5_c05c = or i32 %v3_c058, %v4_c05c
  store i32 %v5_c05c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c064 = add i32 %v0_c04c, 20
  store i32 %v1_c064, i32* @sb, align 4
  %v1_c068 = add i32 %v0_c04c, 40
  store i32 %v1_c068, i32* @sl, align 4
  br label %dec_label_pc_c154

dec_label_pc_c070:                                ; preds = %dec_label_pc_c154
  store i32 %v6_bd7c, i32* %r0.global-to-local, align 4
  store i1 %v7_c074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c074, label %dec_label_pc_c1d8, label %dec_label_pc_c07c

dec_label_pc_c07c:                                ; preds = %dec_label_pc_c178, %dec_label_pc_c070
  store i32 %v3_bdec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c1e8, label %dec_label_pc_c1f4, label %dec_label_pc_c090

dec_label_pc_c090:                                ; preds = %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge, %dec_label_pc_c07c
  %v1_c094 = phi i32 [ %v1_c094.pre, %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge ], [ 65535, %dec_label_pc_c07c ]
  store i32 %v3_bdf0, i32* %r2.global-to-local, align 4
  %v9_c094 = icmp eq i32 %v3_bdf0, %v1_c094
  store i1 %v9_c094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c094, label %dec_label_pc_c208, label %dec_label_pc_c09c

dec_label_pc_c09c:                                ; preds = %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge, %dec_label_pc_c090
  %v1_c0a0 = phi i32 [ %v1_c0a0.pre, %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge ], [ %v1_c094, %dec_label_pc_c090 ]
  store i32 %v3_bdf4, i32* %r3.global-to-local, align 4
  %v9_c0a0 = icmp eq i32 %v3_bdf4, %v1_c0a0
  store i1 %v9_c0a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0a0, label %dec_label_pc_c21c, label %dec_label_pc_c0a8

dec_label_pc_c0a8:                                ; preds = %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge, %dec_label_pc_c09c
  %v1_c0ac = phi i32 [ %v1_c0ac.pre, %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge ], [ %v1_c0a0, %dec_label_pc_c09c ]
  store i32 %v5_bc7c, i32* %ip.global-to-local, align 4
  %v9_c0ac = icmp eq i32 %v5_bc7c, %v1_c0ac
  store i1 %v9_c0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0ac, label %dec_label_pc_c230, label %dec_label_pc_c0b4

dec_label_pc_c0b4:                                ; preds = %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge, %dec_label_pc_c0a8
  %v1_c0b8 = phi i32 [ %v1_c0b8.pre, %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge ], [ %v1_c0ac, %dec_label_pc_c0a8 ]
  store i32 %v6_bc98, i32* %r0.global-to-local, align 4
  %v9_c0b8 = icmp eq i32 %v6_bc98, %v1_c0b8
  store i1 %v9_c0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0b8, label %dec_label_pc_c244, label %dec_label_pc_c0c0

dec_label_pc_c0c0:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c0b4
  store i32 %v1_bd68, i32* %r1.global-to-local, align 4
  store i1 %v2_c24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c24c, label %dec_label_pc_c0cc, label %dec_label_pc_c258

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c0c0, %dec_label_pc_c244, %dec_label_pc_c258
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c0d0 = load i32, i32* @r5, align 4
  %v3_c0d0 = add i32 %v2_c0d0, 10
  %v4_c0d0 = inttoptr i32 %v3_c0d0 to i16*
  store i16 0, i16* %v4_c0d0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r5, align 4
  store i32 %v0_c0d8, i32* @r0, align 4
  %v2_c0dc = call i32 @function_dd58(i32 %v0_c0d8, i32 20)
  %v3_c0dc = trunc i32 %v2_c0dc to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c0e4 = load i32, i32* @r5, align 4
  %v4_c0e4 = add i32 %v3_c0e4, 10
  %v5_c0e4 = inttoptr i32 %v4_c0e4 to i16*
  store i16 %v3_c0dc, i16* %v5_c0e4, align 2
  %v0_c0e8 = load i32, i32* @r6, align 4
  store i32 %v0_c0e8, i32* @r1, align 4
  %v0_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i16
  %v3_c0ec = add i32 %v0_c0e8, 16
  %v4_c0ec = inttoptr i32 %v3_c0ec to i16*
  store i16 %v1_c0ec, i16* %v4_c0ec, align 2
  %v0_c0f0 = load i32, i32* @fp, align 4
  store i32 %v0_c0f0, i32* %r2.global-to-local, align 4
  %v0_c0f4 = load i32, i32* @sb, align 4
  store i32 %v0_c0f4, i32* %r3.global-to-local, align 4
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r0.global-to-local, align 4
  %v4_c0fc = call i32 @function_dda8(i32 %v0_c0f8, i32 %v0_c0e8, i32 %v0_c0f0, i32 %v0_c0f4)
  %v5_c0fc = trunc i32 %v4_c0fc to i16
  store i32 %v4_c0fc, i32* %r0.global-to-local, align 4
  %v3_c100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c100, i32* %r3.global-to-local, align 4
  %v3_c104 = mul i32 %v3_c100, 32
  store i32 %v3_c104, i32* %lr.global-to-local, align 4
  %v3_c108 = load i32, i32* @r6, align 4
  %v4_c108 = add i32 %v3_c108, 16
  %v5_c108 = inttoptr i32 %v4_c108 to i16*
  store i16 %v5_c0fc, i16* %v5_c108, align 2
  %v0_c10c = load i32, i32* %lr.global-to-local, align 4
  %v1_c10c = load i32, i32* %r3.global-to-local, align 4
  %tmp73 = mul i32 %v1_c10c, -8
  %v5_c10c = add i32 %v0_c10c, %tmp73
  store i32 %v5_c10c, i32* %lr.global-to-local, align 4
  %v0_c110 = load i32, i32* @r6, align 4
  %v1_c110 = add i32 %v0_c110, 2
  %v2_c110 = inttoptr i32 %v1_c110 to i16*
  %v3_c110 = load i16, i16* %v2_c110, align 2
  %v1_c114 = load i32, i32* @r7, align 4
  %v2_c114 = add i32 %v1_c114, %v5_c10c
  store i32 %v2_c114, i32* @lr, align 4
  %v3_c118 = add i32 %v2_c114, 2
  %v4_c118 = inttoptr i32 %v3_c118 to i16*
  store i16 %v3_c110, i16* %v4_c118, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c124 = load i32, i32* @r5, align 4
  store i32 %v0_c124, i32* %r1.global-to-local, align 4
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v0_c12c = load i32, i32* @sl, align 4
  store i32 %v0_c12c, i32* %r2.global-to-local, align 4
  %v0_c134 = load i32, i32* @lr, align 4
  %v6_c138 = call i32 @function_12c50(i32 %v3_bda0, i32 %v0_c124, i32 %v0_c12c, i32 16384, i32 %v0_c134, i32 16)
  %v3_c13c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c13c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_c144 = add i32 %v3_c13c, 1
  store i32 %v1_c144, i32* %r0.global-to-local, align 4
  %v9_c148 = icmp eq i32 %v1_c144, %arg2
  store i1 %v9_c148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c144, i32* %stack_var_-44, align 4
  %v6_c150 = icmp slt i32 %v1_c144, %arg2
  br i1 %v6_c150, label %dec_label_pc_c154, label %dec_label_pc_c274

dec_label_pc_c154:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c04c
  %v1_c168 = phi i32 [ %v1_c144, %dec_label_pc_c0cc ], [ 0, %dec_label_pc_c04c ]
  %v5_c158 = mul i32 %v1_c168, 24
  %v1_c15c = load i32, i32* @r7, align 4
  %v2_c15c = add i32 %v1_c15c, %v5_c158
  store i32 %v2_c15c, i32* %r3.global-to-local, align 4
  store i32 %v2_bbac, i32* %ip.global-to-local, align 4
  %v1_c164 = add i32 %v2_c15c, 20
  %v2_c164 = inttoptr i32 %v1_c164 to i8*
  %v3_c164 = load i8, i8* %v2_c164, align 1
  %v4_c164 = zext i8 %v3_c164 to i32
  store i32 %v4_c164, i32* %r2.global-to-local, align 4
  %v4_c168 = mul i32 %v1_c168, 4
  %v5_c168 = add i32 %v4_c168, %v2_bbac
  %v6_c168 = inttoptr i32 %v5_c168 to i32*
  %v7_c168 = load i32, i32* %v6_c168, align 4
  store i32 %v7_c168, i32* @r5, align 4
  %v2_c16c = icmp ugt i8 %v3_c164, 30
  %v7_c16c = icmp eq i8 %v3_c164, 31
  store i1 %v7_c16c, i1* %cpsr_z.global-to-local, align 1
  %v1_c170 = add i32 %v7_c168, 20
  store i32 %v1_c170, i32* @r6, align 4
  %v2_c174 = xor i1 %v7_c16c, true
  %v3_c174 = and i1 %v2_c16c, %v2_c174
  br i1 %v3_c174, label %dec_label_pc_c070, label %dec_label_pc_c178

dec_label_pc_c178:                                ; preds = %dec_label_pc_c154
  %v1_c178 = add i32 %v2_c15c, 16
  %v2_c178 = inttoptr i32 %v1_c178 to i32*
  %v3_c178 = load i32, i32* %v2_c178, align 4
  %v0_c17c = call i32 @function_f188()
  store i32 %v0_c17c, i32* %r0.global-to-local, align 4
  %v3_c180 = load i32, i32* %stack_var_-44, align 4
  %v5_c188 = mul i32 %v3_c180, 24
  %v1_c18c = and i32 %v3_c178, 16711680
  store i32 %v1_c18c, i32* %ip.global-to-local, align 4
  %v3_c190 = udiv i32 %v3_c178, 16777216
  %v4_c194 = udiv i32 %v1_c18c, 256
  %v5_c194 = or i32 %v4_c194, %v3_c190
  store i32 %v5_c194, i32* %r2.global-to-local, align 4
  %v1_c198 = load i32, i32* @r7, align 4
  %v2_c198 = add i32 %v1_c198, %v5_c188
  store i32 %v2_c198, i32* %r1.global-to-local, align 4
  %v1_c19c = and i32 %v3_c178, 65280
  store i32 %v1_c19c, i32* %r3.global-to-local, align 4
  %v1_c1a0 = add i32 %v2_c198, 20
  %v2_c1a0 = inttoptr i32 %v1_c1a0 to i8*
  %v3_c1a0 = load i8, i8* %v2_c1a0, align 1
  %v4_c1a0 = zext i8 %v3_c1a0 to i32
  store i32 %v4_c1a0, i32* %ip.global-to-local, align 4
  %v5_c1a8 = call i32 @llvm.bswap.i32(i32 %v3_c178)
  %v7_c1ac = lshr i32 %v0_c17c, %v4_c1a0
  %v8_c1ac = add i32 %v7_c1ac, %v5_c1a8
  store i32 %v8_c1ac, i32* %r2.global-to-local, align 4
  %v1_c1bc = and i32 %v8_c1ac, 65280
  store i32 %v1_c1bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bd7c, i32* %r0.global-to-local, align 4
  %v5_c1c8 = call i32 @llvm.bswap.i32(i32 %v8_c1ac)
  store i32 %v5_c1c8, i32* %r3.global-to-local, align 4
  store i1 %v7_c074, i1* %cpsr_z.global-to-local, align 1
  %v1_c1d0 = load i32, i32* @r5, align 4
  %v2_c1d0 = add i32 %v1_c1d0, 16
  %v3_c1d0 = inttoptr i32 %v2_c1d0 to i32*
  store i32 %v5_c1c8, i32* %v3_c1d0, align 4
  br i1 %v2_c074, label %dec_label_pc_c1d8, label %dec_label_pc_c07c

dec_label_pc_c1d8:                                ; preds = %dec_label_pc_c178, %dec_label_pc_c070
  %v0_c1d8 = call i32 @function_f188()
  store i32 %v0_c1d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bdec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c1ec = load i32, i32* @r5, align 4
  %v2_c1ec = add i32 %v1_c1ec, 12
  %v3_c1ec = inttoptr i32 %v2_c1ec to i32*
  store i32 %v0_c1d8, i32* %v3_c1ec, align 4
  br i1 %v3_c1e8, label %dec_label_pc_c1f4, label %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge

dec_label_pc_c1d8.dec_label_pc_c090_crit_edge:    ; preds = %dec_label_pc_c1d8
  %v1_c094.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c090

dec_label_pc_c1f4:                                ; preds = %dec_label_pc_c1d8, %dec_label_pc_c07c
  %v0_c1f4 = call i32 @function_f188()
  %v1_c1f4 = trunc i32 %v0_c1f4 to i16
  store i32 %v0_c1f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bdf0, i32* %r2.global-to-local, align 4
  %v1_c1fc = load i32, i32* @r4, align 4
  %v9_c1fc = icmp eq i32 %v3_bdf0, %v1_c1fc
  store i1 %v9_c1fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c200 = load i32, i32* @r5, align 4
  %v4_c200 = add i32 %v3_c200, 4
  %v5_c200 = inttoptr i32 %v4_c200 to i16*
  store i16 %v1_c1f4, i16* %v5_c200, align 2
  br i1 %v9_c1fc, label %dec_label_pc_c208, label %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge

dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge:    ; preds = %dec_label_pc_c1f4
  %v1_c0a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c09c

dec_label_pc_c208:                                ; preds = %dec_label_pc_c1f4, %dec_label_pc_c090
  %v0_c208 = call i32 @function_f188()
  %v1_c208 = trunc i32 %v0_c208 to i16
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  store i32 %v3_bdf4, i32* %r3.global-to-local, align 4
  %v1_c210 = load i32, i32* @r4, align 4
  %v9_c210 = icmp eq i32 %v3_bdf4, %v1_c210
  store i1 %v9_c210, i1* %cpsr_z.global-to-local, align 1
  %v3_c214 = load i32, i32* @r5, align 4
  %v4_c214 = add i32 %v3_c214, 20
  %v5_c214 = inttoptr i32 %v4_c214 to i16*
  store i16 %v1_c208, i16* %v5_c214, align 2
  br i1 %v9_c210, label %dec_label_pc_c21c, label %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge

dec_label_pc_c208.dec_label_pc_c0a8_crit_edge:    ; preds = %dec_label_pc_c208
  %v1_c0ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0a8

dec_label_pc_c21c:                                ; preds = %dec_label_pc_c208, %dec_label_pc_c09c
  %v0_c21c = call i32 @function_f188()
  %v1_c21c = trunc i32 %v0_c21c to i16
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  store i32 %v5_bc7c, i32* %ip.global-to-local, align 4
  %v1_c224 = load i32, i32* @r4, align 4
  %v9_c224 = icmp eq i32 %v5_bc7c, %v1_c224
  store i1 %v9_c224, i1* %cpsr_z.global-to-local, align 1
  %v3_c228 = load i32, i32* @r6, align 4
  %v4_c228 = add i32 %v3_c228, 2
  %v5_c228 = inttoptr i32 %v4_c228 to i16*
  store i16 %v1_c21c, i16* %v5_c228, align 2
  br i1 %v9_c224, label %dec_label_pc_c230, label %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge

dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge:    ; preds = %dec_label_pc_c21c
  %v1_c0b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0b4

dec_label_pc_c230:                                ; preds = %dec_label_pc_c21c, %dec_label_pc_c0a8
  %v0_c230 = call i32 @function_f188()
  %v1_c234 = load i32, i32* @r6, align 4
  %v2_c234 = add i32 %v1_c234, 4
  %v3_c234 = inttoptr i32 %v2_c234 to i32*
  store i32 %v0_c230, i32* %v3_c234, align 4
  store i32 %v6_bc98, i32* %r0.global-to-local, align 4
  %v1_c23c = load i32, i32* @r4, align 4
  %v9_c23c = icmp eq i32 %v6_bc98, %v1_c23c
  store i1 %v9_c23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c23c, label %dec_label_pc_c244, label %dec_label_pc_c0c0

dec_label_pc_c244:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c0b4
  %v0_c244 = call i32 @function_f188()
  store i32 %v0_c244, i32* %r0.global-to-local, align 4
  store i32 %v1_bd68, i32* %r1.global-to-local, align 4
  store i1 %v2_c24c, i1* %cpsr_z.global-to-local, align 1
  %v1_c250 = load i32, i32* @r6, align 4
  %v2_c250 = add i32 %v1_c250, 8
  %v3_c250 = inttoptr i32 %v2_c250 to i32*
  store i32 %v0_c244, i32* %v3_c250, align 4
  br i1 %v2_c24c, label %dec_label_pc_c0cc, label %dec_label_pc_c258

dec_label_pc_c258:                                ; preds = %dec_label_pc_c0c0, %dec_label_pc_c244
  %v0_c258 = load i32, i32* @r5, align 4
  %v1_c258 = add i32 %v0_c258, 40
  store i32 %v1_c258, i32* @r4, align 4
  store i32 %v1_c258, i32* %r0.global-to-local, align 4
  %v0_c260 = load i32, i32* @r8, align 4
  store i32 %v0_c260, i32* %r1.global-to-local, align 4
  %v2_c264 = call i32 @function_f24c(i32 %v1_c258, i32 %v0_c260)
  store i32 %v2_c264, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c26c = load i32, i32* @r4, align 4
  %v3_c26c = load i32, i32* @r8, align 4
  %v4_c26c = add i32 %v3_c26c, %v2_c26c
  %v5_c26c = inttoptr i32 %v4_c26c to i8*
  store i8 0, i8* %v5_c26c, align 1
  br label %dec_label_pc_c0cc

dec_label_pc_c274:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c038
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c278 = call i32 @function_12148(i32* null)
  store i32 %v2_c278, i32* %r0.global-to-local, align 4
  store i32 %v2_bd8c, i32* %r1.global-to-local, align 4
  %v9_c280 = icmp eq i32 %v2_bd8c, %v2_c278
  store i1 %v9_c280, i1* %cpsr_z.global-to-local, align 1
  %v6_c284 = icmp slt i32 %v2_bd8c, %v2_c278
  br i1 %v6_c284, label %dec_label_pc_c288, label %dec_label_pc_c038

dec_label_pc_c288:                                ; preds = %dec_label_pc_c274, %dec_label_pc_bb80, %dec_label_pc_c294
  %v1_c290 = phi i32 [ %v3_bda0, %dec_label_pc_bb80 ], [ %v1_c298, %dec_label_pc_c294 ], [ %v2_c278, %dec_label_pc_c274 ]
  store i32 %v18_bb80, i32* %sb.global-to-local, align 4
  store i32 %v24_bb80, i32* %fp.global-to-local, align 4
  store i32 %v27_bb80, i32* %lr.global-to-local, align 4
  ret i32 %v1_c290

dec_label_pc_c294:                                ; preds = %dec_label_pc_bdb0
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v1_c298 = call i32 @function_124c8(i32 %v3_bda0)
  store i32 %v1_c298, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c288

; uselistorder directives
  uselistorder i32 %v1_c298, { 1, 0 }
  uselistorder i32 %v0_c21c, { 1, 0 }
  uselistorder i32 %v0_c208, { 1, 0 }
  uselistorder i32 %v0_c1f4, { 1, 0 }
  uselistorder i32 %v5_c1c8, { 1, 0 }
  uselistorder i32 %v3_c178, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c144, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_c10c, { 1, 0 }
  uselistorder i32 %v4_c0fc, { 1, 0 }
  uselistorder i32 %v0_c04c, { 2, 1, 0 }
  uselistorder i1 %v2_c24c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c1e8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c074, { 2, 1, 0 }
  uselistorder i32 %v1_c024, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bff4, { 1, 0 }
  uselistorder i32 %v0_bf60, { 1, 0, 2, 3 }
  uselistorder i32 %v1_be88, { 2, 0, 1 }
  uselistorder i32 %v1_be84, { 2, 0, 1 }
  uselistorder i32 %v1_be74, { 1, 0 }
  uselistorder i1 %v2_bdf8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bdec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bde8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_bde4, { 1, 0, 2 }
  uselistorder i1 %v7_bdd0, { 1, 0 }
  uselistorder i1 %v7_bda4, { 1, 0 }
  uselistorder i32 %v3_bda0, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bd8c, { 2, 1, 0 }
  uselistorder i32 %v6_bd7c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_bd68, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bce0, { 0, 2, 1 }
  uselistorder i32 %v6_bc98, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bc7c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bc2c, { 1, 0 }
  uselistorder i32 %v1_bc08, { 1, 0 }
  uselistorder i32 %v6_bc00, { 1, 0 }
  uselistorder i32 %v7_bbe8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bbe4, { 1, 0 }
  uselistorder i32 %v6_bbc4, { 1, 0 }
  uselistorder i32 %v2_bbac, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 7, 5, 8, 6, 9, 10, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20, 21, 23, 22, 29, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 3, 2, 1, 0, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_c288, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c258, { 1, 0 }
  uselistorder label %dec_label_pc_c0cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c038, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c2a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c2a4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c2a4 = load i32, i32* @r4, align 4
  %v24_c2a4 = load i32, i32* @fp, align 4
  %v27_c2a4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_c2d0 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_c2d4 = load i32, i32* @r4, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c2d0, i32* @sl, align 4
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v5_c2e8 = call i32 @function_9fe8(i32 %v0_c2e4, i32* %v4_c2e8, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  store i32 %v0_c300, i32* %r1.global-to-local, align 4
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r0.global-to-local, align 4
  %v5_c308 = trunc i32 %v5_c2e8 to i8
  %v6_c30c = inttoptr i32 %v0_c300 to i32*
  %v7_c30c = call i32 @function_9fe8(i32 %v0_c304, i32* %v6_c30c, i32 3, i32 65535)
  %v0_c310 = load i32, i32* @r4, align 4
  store i32 %v0_c310, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* @r5, align 4
  store i32 %v0_c320, i32* %r0.global-to-local, align 4
  %v5_c324 = inttoptr i32 %v0_c310 to i32*
  %v6_c324 = call i32 @function_9fe8(i32 %v0_c320, i32* %v5_c324, i32 4, i32 64)
  %v1_c32c = urem i32 %v6_c324, 256
  %v0_c330 = load i32, i32* @r4, align 4
  store i32 %v0_c330, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r5, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v6_c344 = inttoptr i32 %v0_c330 to i32*
  %v7_c344 = call i32 @function_9fe8(i32 %v0_c33c, i32* %v6_c344, i32 5, i32 1)
  %v1_c350 = urem i32 %v7_c344, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c35c = load i32, i32* @r4, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  %v0_c360 = load i32, i32* @r5, align 4
  store i32 %v0_c360, i32* %r0.global-to-local, align 4
  %v5_c368 = inttoptr i32 %v0_c35c to i32*
  %v6_c368 = call i32 @function_9fe8(i32 %v0_c360, i32* %v5_c368, i32 6, i32 65535)
  %v0_c374 = load i32, i32* @r4, align 4
  store i32 %v0_c374, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r0.global-to-local, align 4
  %v5_c384 = inttoptr i32 %v0_c374 to i32*
  %v6_c384 = call i32 @function_9fe8(i32 %v0_c380, i32* %v5_c384, i32 7, i32 65535)
  %v0_c38c = load i32, i32* @r4, align 4
  store i32 %v0_c38c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_c384, i32* %fp.global-to-local, align 4
  %v0_c39c = load i32, i32* @r5, align 4
  store i32 %v0_c39c, i32* %r0.global-to-local, align 4
  %v4_c3a0 = inttoptr i32 %v0_c38c to i32*
  %v5_c3a0 = call i32 @function_9fe8(i32 %v0_c39c, i32* %v4_c3a0, i32 16, i32 65535)
  %v0_c3a4 = load i32, i32* @r4, align 4
  store i32 %v0_c3a4, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @r5, align 4
  store i32 %v0_c3b4, i32* %r0.global-to-local, align 4
  %v5_c3b8 = inttoptr i32 %v0_c3a4 to i32*
  %v6_c3b8 = call i32 @function_9fe8(i32 %v0_c3b4, i32* %v5_c3b8, i32 17, i32 0)
  %v0_c3bc = load i32, i32* @r4, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3cc = load i32, i32* @r5, align 4
  store i32 %v0_c3cc, i32* %r0.global-to-local, align 4
  %v5_c3d0 = inttoptr i32 %v0_c3bc to i32*
  %v6_c3d0 = call i32 @function_9fe8(i32 %v0_c3cc, i32* %v5_c3d0, i32 10, i32 0)
  %v0_c3d4 = load i32, i32* @r4, align 4
  store i32 %v0_c3d4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3e4 = load i32, i32* @r5, align 4
  store i32 %v0_c3e4, i32* %r0.global-to-local, align 4
  %v5_c3e8 = inttoptr i32 %v0_c3d4 to i32*
  %v6_c3e8 = call i32 @function_9fe8(i32 %v0_c3e4, i32* %v5_c3e8, i32 11, i32 0)
  %v0_c3ec = load i32, i32* @r4, align 4
  store i32 %v0_c3ec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3fc = load i32, i32* @r5, align 4
  store i32 %v0_c3fc, i32* %r0.global-to-local, align 4
  %v5_c400 = inttoptr i32 %v0_c3ec to i32*
  %v6_c400 = call i32 @function_9fe8(i32 %v0_c3fc, i32* %v5_c400, i32 12, i32 0)
  %v0_c404 = load i32, i32* @r4, align 4
  store i32 %v0_c404, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c414 = load i32, i32* @r5, align 4
  store i32 %v0_c414, i32* %r0.global-to-local, align 4
  %v5_c418 = inttoptr i32 %v0_c404 to i32*
  %v6_c418 = call i32 @function_9fe8(i32 %v0_c414, i32* %v5_c418, i32 13, i32 0)
  %v0_c41c = load i32, i32* @r4, align 4
  store i32 %v0_c41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c42c = load i32, i32* @r5, align 4
  store i32 %v0_c42c, i32* %r0.global-to-local, align 4
  %v5_c430 = inttoptr i32 %v0_c41c to i32*
  %v6_c430 = call i32 @function_9fe8(i32 %v0_c42c, i32* %v5_c430, i32 14, i32 1)
  %v0_c434 = load i32, i32* @r4, align 4
  store i32 %v0_c434, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c444 = load i32, i32* @r5, align 4
  store i32 %v0_c444, i32* %r0.global-to-local, align 4
  %v5_c448 = inttoptr i32 %v0_c434 to i32*
  %v6_c448 = call i32 @function_9fe8(i32 %v0_c444, i32* %v5_c448, i32 15, i32 0)
  %v0_c450 = load i32, i32* @r4, align 4
  store i32 %v0_c450, i32* %r1.global-to-local, align 4
  %v2_c454 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_c454, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c460 = load i32, i32* @r5, align 4
  store i32 %v0_c460, i32* %r0.global-to-local, align 4
  %v5_c464 = inttoptr i32 %v0_c450 to i32*
  %v6_c464 = call i32 @function_9f7c(i32 %v0_c460, i32* %v5_c464, i32 24, i32 %v2_c454, i32 %v6_c448)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_12148(i32* null)
  %v1_c474 = load i32, i32* @r6, align 4
  %v2_c474 = add i32 %v1_c474, %v2_c470
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c488 = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  store i32 %v3_c488, i32* %r0.global-to-local, align 4
  %v7_c48c = icmp eq i32 %v3_c488, -1
  store i1 %v7_c48c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c488, i32* @r8, align 4
  br i1 %v7_c48c, label %dec_label_pc_c960, label %dec_label_pc_c498

dec_label_pc_c498:                                ; preds = %dec_label_pc_c2a4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c4a0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c4a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c4b4 = call i32 @function_12c90(i32 %v3_c488, i32 0, i32 3, i32 %v6_c4a0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c4b4, i32* %r0.global-to-local, align 4
  %v7_c4b8 = icmp eq i32 %v5_c4b4, -1
  store i1 %v7_c4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c4b8, label %dec_label_pc_c96c, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c498
  %v3_c4cc = mul i32 %v7_c30c, 65536
  store i32 %v3_c4cc, i32* %r0.global-to-local, align 4
  %v0_c4d4 = load i32, i32* %fp.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c3d0, i32* %r1.global-to-local, align 4
  %v3_c4e0 = urem i32 %v7_c30c, 65536
  store i32 %v3_c4e0, i32* %r2.global-to-local, align 4
  %v3_c4e4 = urem i32 %v6_c368, 65536
  store i32 %v3_c4e4, i32* %r3.global-to-local, align 4
  %v3_c4e8 = urem i32 %v0_c4d4, 65536
  %v0_c4ec = load i32, i32* @sb, align 4
  %v2_c4ec = icmp eq i32 %v0_c4ec, 0
  store i1 %v2_c4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c4fc = urem i32 %v6_c3d0, 256
  store i32 %v1_c4fc, i32* @fp, align 4
  br i1 %v2_c4ec, label %dec_label_pc_c750.preheader, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c4c0
  %trunc = trunc i32 %v7_c30c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp60 = mul nuw nsw i32 %v3_c4e4, 256
  %v3_c530 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_c4d4, 256
  %v3_c534 = and i32 %tmp61, 65280
  %tmp62 = mul i32 %v5_c3a0, 256
  %v3_c538 = and i32 %tmp62, 65280
  %v1_c53c = urem i32 %v6_c3d0, 2
  %tmp63 = udiv i32 %v6_c368, 256
  %v4_c540 = urem i32 %tmp63, 256
  %v5_c540 = or i32 %v3_c530, %v4_c540
  %tmp64 = udiv i32 %v0_c4d4, 256
  %v4_c544 = urem i32 %tmp64, 256
  %v5_c544 = or i32 %v4_c544, %v3_c534
  store i32 %v5_c544, i32* @r5, align 4
  %tmp65 = udiv i32 %v5_c3a0, 256
  %v4_c548 = urem i32 %tmp65, 256
  %v5_c548 = or i32 %v4_c548, %v3_c538
  store i32 %v5_c548, i32* @lr, align 4
  %v1_c55c = urem i32 %v6_c3e8, 2
  store i32 %v1_c55c, i32* %r1.global-to-local, align 4
  %v1_c560 = urem i32 %v6_c400, 2
  store i32 %v1_c560, i32* %r2.global-to-local, align 4
  %v1_c564 = urem i32 %v6_c418, 2
  store i32 %v1_c564, i32* %r3.global-to-local, align 4
  %v1_c568 = urem i32 %v6_c430, 2
  store i32 %v1_c568, i32* @r6, align 4
  %v1_c56c = urem i32 %v6_c448, 2
  store i32 %v1_c56c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_c5e8 = trunc i32 %v6_c324 to i8
  %sext6 = mul nuw i32 %v5_c540, 65536
  %v4_c614 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_c544, 65536
  %v6_c650 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_c55c
  %v4_c668 = and i32 %tmp, 16
  %tmp66 = sub nsw i32 0, %v1_c560
  %v4_c680 = and i32 %tmp66, 8
  %tmp67 = sub nsw i32 0, %v1_c564
  %v4_c694 = and i32 %tmp67, 4
  %tmp68 = sub nsw i32 0, %v1_c568
  %v3_c6a8 = and i32 %tmp68, 2
  br label %dec_label_pc_c594

dec_label_pc_c594:                                ; preds = %.thread, %dec_label_pc_c504
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c59c = call i32 @function_1383c(i32 128, i32 1)
  store i32 %v2_c59c, i32* %r0.global-to-local, align 4
  %v3_c5a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c5a0, i32* %r2.global-to-local, align 4
  %v1_c5a4 = load i32, i32* @sl, align 4
  %v2_c5a4 = load i32, i32* @r4, align 4
  %v5_c5a4 = mul i32 %v2_c5a4, 4
  %v6_c5a4 = add i32 %v5_c5a4, %v1_c5a4
  %v7_c5a4 = inttoptr i32 %v6_c5a4 to i32*
  store i32 %v2_c59c, i32* %v7_c5a4, align 4
  %v0_c5a8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c5a8 = mul i32 %v0_c5a8, 32
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v0_c5ac = load i32, i32* @sl, align 4
  %v4_c5ac = mul i32 %v0_c5a8, 4
  %v5_c5ac = add i32 %v0_c5ac, %v4_c5ac
  %v6_c5ac = inttoptr i32 %v5_c5ac to i32*
  %v7_c5ac = load i32, i32* %v6_c5ac, align 4
  store i32 %v7_c5ac, i32* %r4.global-to-local, align 4
  %v5_c5b0 = mul i32 %v0_c5a8, 24
  store i32 %v5_c5b0, i32* %r3.global-to-local, align 4
  %v1_c5b4 = load i32, i32* @r7, align 4
  %v2_c5b4 = add i32 %v1_c5b4, %v5_c5b0
  store i32 %v2_c5b4, i32* %r0.global-to-local, align 4
  %v1_c5b8 = inttoptr i32 %v7_c5ac to i8*
  %v2_c5b8 = load i8, i8* %v1_c5b8, align 1
  %tmp69 = urem i8 %v2_c5b8, 16
  %v1_c5bc = zext i8 %tmp69 to i32
  %v1_c5c0 = or i32 %v1_c5bc, 64
  store i32 %v1_c5c0, i32* %r3.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v1_c5c0 to i8
  store i8 %v1_c5c4, i8* %v1_c5b8, align 1
  %v0_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c5c8 = inttoptr i32 %v0_c5c8 to i8*
  %v2_c5c8 = load i8, i8* %v1_c5c8, align 1
  %v1_c5cc = and i8 %v2_c5c8, -16
  %v1_c5d0 = or i8 %v1_c5cc, 5
  store i32 %v1_c350, i32* %r1.global-to-local, align 4
  store i8 %v1_c5d0, i8* %v1_c5c8, align 1
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 1
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v5_c308, i8* %v4_c5e0, align 1
  store i32 %v1_c32c, i32* %r3.global-to-local, align 4
  %v2_c5e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 8
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  %v0_c5f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5f0 = icmp eq i32 %v0_c5f0, 0
  store i1 %v2_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v2_c5f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5f4 = add i32 %v2_c5f4, 4
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i16*
  store i16 %rev, i16* %v4_c5f4, align 2
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 9
  %v4_c5fc = inttoptr i32 %v3_c5fc to i8*
  store i8 6, i8* %v4_c5fc, align 1
  %v0_c600 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c600, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c594
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c604 = load i32, i32* %r4.global-to-local, align 4
  %v4_c604 = add i32 %v3_c604, 6
  %v5_c604 = inttoptr i32 %v4_c604 to i16*
  store i16 64, i16* %v5_c604, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c594, %bb
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  %v1_c60c = load i32, i32* %r4.global-to-local, align 4
  %v2_c60c = add i32 %v1_c60c, 12
  %v3_c60c = inttoptr i32 %v2_c60c to i32*
  store i32 %v6_c464, i32* %v3_c60c, align 4
  %v0_c610 = load i32, i32* %r0.global-to-local, align 4
  %v1_c610 = add i32 %v0_c610, 16
  %v2_c610 = inttoptr i32 %v1_c610 to i32*
  %v3_c610 = load i32, i32* %v2_c610, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  store i32 %v4_c614, i32* %r0.global-to-local, align 4
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 2
  %v4_c61c = inttoptr i32 %v3_c61c to i16*
  store i16 15360, i16* %v4_c61c, align 2
  %v0_c620 = load i32, i32* %r3.global-to-local, align 4
  %v1_c620 = load i32, i32* %r4.global-to-local, align 4
  %v2_c620 = add i32 %v1_c620, 16
  %v3_c620 = inttoptr i32 %v2_c620 to i32*
  store i32 %v0_c620, i32* %v3_c620, align 4
  %v0_c624 = load i32, i32* %r0.global-to-local, align 4
  %v1_c624 = trunc i32 %v0_c624 to i16
  %v2_c624 = load i32, i32* %r4.global-to-local, align 4
  %v3_c624 = add i32 %v2_c624, 20
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 %v1_c624, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* %r4.global-to-local, align 4
  %v1_c628 = add i32 %v0_c628, 20
  store i32 %v1_c628, i32* %r1.global-to-local, align 4
  %v1_c62c = add i32 %v0_c628, 32
  %v2_c62c = inttoptr i32 %v1_c62c to i8*
  %v3_c62c = load i8, i8* %v2_c62c, align 1
  %v4_c62c = zext i8 %v3_c62c to i32
  store i32 %v4_c62c, i32* %r3.global-to-local, align 4
  %v1_c630 = add i32 %v0_c628, 33
  %v2_c630 = inttoptr i32 %v1_c630 to i8*
  %v3_c630 = load i8, i8* %v2_c630, align 1
  %v4_c630 = zext i8 %v3_c630 to i32
  store i32 %v1_c53c, i32* %r0.global-to-local, align 4
  %v1_c638 = urem i8 %v3_c62c, 16
  %v1_c63c = or i8 %v1_c638, -96
  %v1_c640 = and i32 %v4_c630, 223
  store i32 %v1_c640, i32* %r2.global-to-local, align 4
  store i8 %v1_c63c, i8* %v2_c62c, align 1
  %v0_c648 = load i32, i32* %r2.global-to-local, align 4
  %v1_c648 = load i32, i32* %r0.global-to-local, align 4
  %v4_c648 = mul i32 %v1_c648, 32
  %v5_c648 = or i32 %v4_c648, %v0_c648
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i32 %v5_c548, i32* %r0.global-to-local, align 4
  store i32 %v6_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = trunc i32 %v5_c648 to i8
  %v2_c654 = load i32, i32* %r1.global-to-local, align 4
  %v3_c654 = add i32 %v2_c654, 13
  %v4_c654 = inttoptr i32 %v3_c654 to i8*
  store i8 %v1_c654, i8* %v4_c654, align 1
  %v0_c658 = load i32, i32* %r3.global-to-local, align 4
  %v1_c658 = trunc i32 %v0_c658 to i16
  %v2_c658 = load i32, i32* %r1.global-to-local, align 4
  %v3_c658 = add i32 %v2_c658, 2
  %v4_c658 = inttoptr i32 %v3_c658 to i16*
  store i16 %v1_c658, i16* %v4_c658, align 2
  %v0_c65c = load i32, i32* %r1.global-to-local, align 4
  %v1_c65c = add i32 %v0_c65c, 13
  %v2_c65c = inttoptr i32 %v1_c65c to i8*
  %v3_c65c = load i8, i8* %v2_c65c, align 1
  %v4_c65c = zext i8 %v3_c65c to i32
  store i32 %v1_c55c, i32* %r2.global-to-local, align 4
  %v1_c664 = and i32 %v4_c65c, 239
  %v5_c668 = or i32 %v1_c664, %v4_c668
  store i32 %v5_c668, i32* %r3.global-to-local, align 4
  %v0_c66c = load i32, i32* %r0.global-to-local, align 4
  %v2_c66c = add i32 %v0_c65c, 4
  %v3_c66c = inttoptr i32 %v2_c66c to i32*
  store i32 %v0_c66c, i32* %v3_c66c, align 4
  %v0_c670 = load i32, i32* %r3.global-to-local, align 4
  %v1_c670 = trunc i32 %v0_c670 to i8
  %v2_c670 = load i32, i32* %r1.global-to-local, align 4
  %v3_c670 = add i32 %v2_c670, 13
  %v4_c670 = inttoptr i32 %v3_c670 to i8*
  store i8 %v1_c670, i8* %v4_c670, align 1
  %v0_c674 = load i32, i32* %r1.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 13
  %v2_c674 = inttoptr i32 %v1_c674 to i8*
  %v3_c674 = load i8, i8* %v2_c674, align 1
  %v4_c674 = zext i8 %v3_c674 to i32
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  %v1_c67c = and i32 %v4_c674, 247
  %v5_c680 = or i32 %v1_c67c, %v4_c680
  store i32 %v5_c680, i32* %r2.global-to-local, align 4
  %v1_c684 = trunc i32 %v5_c680 to i8
  store i8 %v1_c684, i8* %v2_c674, align 1
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = add i32 %v0_c688, 13
  %v2_c688 = inttoptr i32 %v1_c688 to i8*
  %v3_c688 = load i8, i8* %v2_c688, align 1
  %v4_c688 = zext i8 %v3_c688 to i32
  store i32 %v1_c564, i32* %r0.global-to-local, align 4
  %v1_c690 = and i32 %v4_c688, 251
  %v5_c694 = or i32 %v1_c690, %v4_c694
  store i32 %v5_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = trunc i32 %v5_c694 to i8
  store i8 %v1_c698, i8* %v2_c688, align 1
  %v0_c69c = load i32, i32* %r1.global-to-local, align 4
  %v1_c69c = add i32 %v0_c69c, 13
  %v2_c69c = inttoptr i32 %v1_c69c to i8*
  %v3_c69c = load i8, i8* %v2_c69c, align 1
  %v4_c69c = zext i8 %v3_c69c to i32
  store i32 %v1_c568, i32* %r3.global-to-local, align 4
  %v1_c6a4 = and i32 %v4_c69c, 253
  %v4_c6a8 = or i32 %v1_c6a4, %v3_c6a8
  store i32 %v4_c6a8, i32* %r2.global-to-local, align 4
  %v1_c6ac = trunc i32 %v4_c6a8 to i8
  store i8 %v1_c6ac, i8* %v2_c69c, align 1
  %v0_c6b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c6b0 = add i32 %v0_c6b0, 13
  %v2_c6b0 = inttoptr i32 %v1_c6b0 to i8*
  %v3_c6b0 = load i8, i8* %v2_c6b0, align 1
  %v4_c6b0 = zext i8 %v3_c6b0 to i32
  store i32 %v1_c56c, i32* %r0.global-to-local, align 4
  %v1_c6b8 = and i32 %v4_c6b0, 254
  %v2_c6bc = or i32 %v1_c6b8, %v1_c56c
  store i32 %v2_c6bc, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 4, i32* @r6, align 4
  %v1_c6c8 = trunc i32 %v2_c6bc to i8
  store i8 %v1_c6c8, i8* %v2_c6b0, align 1
  %v0_c6cc = load i32, i32* @r5, align 4
  %v1_c6cc = trunc i32 %v0_c6cc to i8
  %v2_c6cc = load i32, i32* %r4.global-to-local, align 4
  %v3_c6cc = add i32 %v2_c6cc, 40
  %v4_c6cc = inttoptr i32 %v3_c6cc to i8*
  store i8 %v1_c6cc, i8* %v4_c6cc, align 1
  %v0_c6d0 = load i32, i32* @r6, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i8
  %v2_c6d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6d0 = add i32 %v2_c6d0, 41
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i8*
  store i8 %v1_c6d0, i8* %v4_c6d0, align 1
  %v0_c6d4 = call i32 @function_f188()
  %v1_c6d8 = urem i32 %v0_c6d4, 16
  %v1_c6dc = or i32 %v1_c6d8, 1392
  %v1_c6e0 = add nuw nsw i32 %v1_c6dc, 8
  %v3_c6e4 = mul nuw nsw i32 %v1_c6e0, 65536
  store i32 %v3_c6e4, i32* %r0.global-to-local, align 4
  %v3_c6e8 = mul nuw nsw i32 %v1_c6e0, 256
  %v5_c6f0 = or i32 %v3_c6e8, 5
  %v1_c6f4 = trunc i32 %v5_c6f0 to i16
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 42
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 %v1_c6f4, i16* %v4_c6f4, align 2
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_c700 = load i32, i32* %r4.global-to-local, align 4
  %v3_c700 = add i32 %v2_c700, 46
  %v4_c700 = inttoptr i32 %v3_c700 to i8*
  store i8 8, i8* %v4_c700, align 1
  %v0_c704 = load i32, i32* %r2.global-to-local, align 4
  %v1_c704 = trunc i32 %v0_c704 to i8
  %v2_c704 = load i32, i32* %r4.global-to-local, align 4
  %v3_c704 = add i32 %v2_c704, 47
  %v4_c704 = inttoptr i32 %v3_c704 to i8*
  store i8 %v1_c704, i8* %v4_c704, align 1
  %v0_c708 = load i32, i32* @r6, align 4
  %v1_c708 = trunc i32 %v0_c708 to i8
  %v2_c708 = load i32, i32* %r4.global-to-local, align 4
  %v3_c708 = add i32 %v2_c708, 44
  %v4_c708 = inttoptr i32 %v3_c708 to i8*
  store i8 %v1_c708, i8* %v4_c708, align 1
  %v0_c70c = load i32, i32* @r5, align 4
  %v1_c70c = trunc i32 %v0_c70c to i8
  %v2_c70c = load i32, i32* %r4.global-to-local, align 4
  %v3_c70c = add i32 %v2_c70c, 45
  %v4_c70c = inttoptr i32 %v3_c70c to i8*
  store i8 %v1_c70c, i8* %v4_c70c, align 1
  %v0_c710 = call i32 @function_f188()
  store i32 %v0_c710, i32* %r0.global-to-local, align 4
  %v2_c718 = load i32, i32* %r4.global-to-local, align 4
  %v3_c718 = add i32 %v2_c718, 59
  %v4_c718 = inttoptr i32 %v3_c718 to i8*
  store i8 6, i8* %v4_c718, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c728 = load i32, i32* %r4.global-to-local, align 4
  %v2_c728 = add i32 %v1_c728, 48
  %v3_c728 = inttoptr i32 %v2_c728 to i32*
  store i32 %v0_c710, i32* %v3_c728, align 4
  %v0_c72c = load i32, i32* %r3.global-to-local, align 4
  %v1_c72c = load i32, i32* %r4.global-to-local, align 4
  %v2_c72c = add i32 %v1_c72c, 52
  %v3_c72c = inttoptr i32 %v2_c72c to i32*
  store i32 %v0_c72c, i32* %v3_c72c, align 4
  %v0_c730 = load i32, i32* %r2.global-to-local, align 4
  %v1_c730 = trunc i32 %v0_c730 to i8
  %v2_c730 = load i32, i32* %r4.global-to-local, align 4
  %v3_c730 = add i32 %v2_c730, 56
  %v4_c730 = inttoptr i32 %v3_c730 to i8*
  store i8 %v1_c730, i8* %v4_c730, align 1
  %v0_c734 = load i32, i32* %r1.global-to-local, align 4
  %v1_c734 = trunc i32 %v0_c734 to i8
  %v2_c734 = load i32, i32* %r4.global-to-local, align 4
  %v3_c734 = add i32 %v2_c734, 58
  %v4_c734 = inttoptr i32 %v3_c734 to i8*
  store i8 %v1_c734, i8* %v4_c734, align 1
  %v0_c738 = load i32, i32* %r1.global-to-local, align 4
  %v1_c738 = trunc i32 %v0_c738 to i8
  %v2_c738 = load i32, i32* %r4.global-to-local, align 4
  %v3_c738 = add i32 %v2_c738, 57
  %v4_c738 = inttoptr i32 %v3_c738 to i8*
  store i8 %v1_c738, i8* %v4_c738, align 1
  %v3_c73c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c73c, i32* %r3.global-to-local, align 4
  %v1_c740 = load i32, i32* %r2.global-to-local, align 4
  %v2_c740 = add i32 %v1_c740, %v3_c73c
  store i32 %v2_c740, i32* @r4, align 4
  %v1_c744 = load i32, i32* @sb, align 4
  %v9_c744 = icmp eq i32 %v2_c740, %v1_c744
  store i1 %v9_c744, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c740, i32* %stack_var_-44, align 4
  %v5_c74c = icmp slt i32 %v2_c740, %v1_c744
  br i1 %v5_c74c, label %dec_label_pc_c594, label %dec_label_pc_c750.preheader

dec_label_pc_c750.preheader:                      ; preds = %.thread, %dec_label_pc_c4c0
  %v0_c75410 = phi i32 [ 0, %dec_label_pc_c4c0 ], [ %v1_c744, %.thread ]
  %v2_c76c = icmp eq i32 %v6_c464, -1
  %v7_c76c = icmp eq i32 %v6_c464, -1
  %v3_c780 = icmp eq i32 %v3_c4e0, 65535
  br label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c94c.dec_label_pc_c750_crit_edge, %dec_label_pc_c750.preheader
  %v0_c754 = phi i32 [ %v0_c754.pre, %dec_label_pc_c94c.dec_label_pc_c750_crit_edge ], [ %v0_c75410, %dec_label_pc_c750.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c754 = icmp eq i32 %v0_c754, 0
  store i1 %v2_c754, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c754, label %dec_label_pc_c94c, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c750
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c844

dec_label_pc_c768:                                ; preds = %dec_label_pc_c844
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  store i1 %v7_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c76c, label %dec_label_pc_c8c4, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c864, %dec_label_pc_c768
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c780, label %dec_label_pc_c8e0, label %dec_label_pc_c788

dec_label_pc_c788:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c774
  %v1_c78c = phi i32 [ %v1_c8d4, %dec_label_pc_c8c4 ], [ 65535, %dec_label_pc_c774 ]
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %v9_c78c = icmp eq i32 %v3_c4e4, %v1_c78c
  store i1 %v9_c78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c78c, label %dec_label_pc_c8f4, label %dec_label_pc_c794

dec_label_pc_c794:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge, %dec_label_pc_c788
  %v1_c798 = phi i32 [ %v1_c798.pre, %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge ], [ %v1_c78c, %dec_label_pc_c788 ]
  store i32 %v3_c4e8, i32* %r2.global-to-local, align 4
  %v9_c798 = icmp eq i32 %v3_c4e8, %v1_c798
  store i1 %v9_c798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c798, label %dec_label_pc_c908, label %dec_label_pc_c7a0

dec_label_pc_c7a0:                                ; preds = %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge, %dec_label_pc_c794
  %v1_c7a4 = phi i32 [ %v1_c7a4.pre, %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge ], [ %v1_c798, %dec_label_pc_c794 ]
  store i32 %v5_c3a0, i32* %r3.global-to-local, align 4
  %v9_c7a4 = icmp eq i32 %v5_c3a0, %v1_c7a4
  store i1 %v9_c7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7a4, label %dec_label_pc_c91c, label %dec_label_pc_c7ac

dec_label_pc_c7ac:                                ; preds = %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge, %dec_label_pc_c7a0
  %v1_c7b0 = phi i32 [ %v1_c7b0.pre, %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge ], [ %v1_c7a4, %dec_label_pc_c7a0 ]
  store i32 %v6_c3b8, i32* %r0.global-to-local, align 4
  %v9_c7b0 = icmp eq i32 %v6_c3b8, %v1_c7b0
  store i1 %v9_c7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7b0, label %dec_label_pc_c930, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c91c, %dec_label_pc_c7ac
  %v0_c7b8 = load i32, i32* @fp, align 4
  %v2_c7b8 = icmp eq i32 %v0_c7b8, 0
  store i1 %v2_c7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c7b8, label %dec_label_pc_c7c0, label %dec_label_pc_c940

dec_label_pc_c7c0:                                ; preds = %dec_label_pc_c7b8, %dec_label_pc_c930, %dec_label_pc_c940
  %v2_c7c4 = load i32, i32* @r5, align 4
  %v3_c7c4 = add i32 %v2_c7c4, 10
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i16*
  store i16 0, i16* %v4_c7c4, align 2
  %v0_c7c8 = load i32, i32* @r5, align 4
  store i32 %v0_c7c8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c7d0 = call i32 @function_dd58(i32 %v0_c7c8, i32 20)
  %v3_c7d0 = trunc i32 %v2_c7d0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c7d8 = load i32, i32* @r5, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 10
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v3_c7d0, i16* %v5_c7d8, align 2
  %v0_c7dc = load i32, i32* @r6, align 4
  store i32 %v0_c7dc, i32* @r1, align 4
  %v0_c7e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e0 = add i32 %v0_c7dc, 16
  %v4_c7e0 = inttoptr i32 %v3_c7e0 to i16*
  store i16 %v1_c7e0, i16* %v4_c7e0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c7ec = load i32, i32* @r5, align 4
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  %v4_c7f0 = call i32 @function_dda8(i32 %v0_c7ec, i32 %v0_c7dc, i32 10240, i32 40)
  %v5_c7f0 = trunc i32 %v4_c7f0 to i16
  store i32 %v4_c7f0, i32* %r0.global-to-local, align 4
  %v3_c7f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f4, i32* %r3.global-to-local, align 4
  %v3_c7f8 = mul i32 %v3_c7f4, 32
  store i32 %v3_c7f8, i32* %lr.global-to-local, align 4
  %v3_c7fc = load i32, i32* @r6, align 4
  %v4_c7fc = add i32 %v3_c7fc, 16
  %v5_c7fc = inttoptr i32 %v4_c7fc to i16*
  store i16 %v5_c7f0, i16* %v5_c7fc, align 2
  %v0_c800 = load i32, i32* %lr.global-to-local, align 4
  %v1_c800 = load i32, i32* %r3.global-to-local, align 4
  %tmp70 = mul i32 %v1_c800, -8
  %v5_c800 = add i32 %v0_c800, %tmp70
  store i32 %v5_c800, i32* %lr.global-to-local, align 4
  %v0_c804 = load i32, i32* @r6, align 4
  %v1_c804 = add i32 %v0_c804, 2
  %v2_c804 = inttoptr i32 %v1_c804 to i16*
  %v3_c804 = load i16, i16* %v2_c804, align 2
  %v1_c808 = load i32, i32* @r7, align 4
  %v2_c808 = add i32 %v1_c808, %v5_c800
  store i32 %v2_c808, i32* @lr, align 4
  %v3_c80c = add i32 %v2_c808, 2
  %v4_c80c = inttoptr i32 %v3_c80c to i16*
  store i16 %v3_c804, i16* %v4_c80c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  %v0_c81c = load i32, i32* @r8, align 4
  store i32 %v0_c81c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c824 = load i32, i32* @lr, align 4
  %v6_c82c = call i32 @function_12c50(i32 %v0_c81c, i32 %v0_c818, i32 60, i32 16384, i32 %v0_c824, i32 16)
  %v3_c830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c830, i32* %r3.global-to-local, align 4
  %v1_c834 = add i32 %v3_c830, 1
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  %v1_c838 = load i32, i32* @sb, align 4
  %v9_c838 = icmp eq i32 %v1_c834, %v1_c838
  store i1 %v9_c838, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c834, i32* %stack_var_-44, align 4
  %v6_c840 = icmp slt i32 %v1_c834, %v1_c838
  br i1 %v6_c840, label %dec_label_pc_c844, label %dec_label_pc_c94c

dec_label_pc_c844:                                ; preds = %dec_label_pc_c7c0, %dec_label_pc_c760
  %v1_c854 = phi i32 [ %v1_c834, %dec_label_pc_c7c0 ], [ 0, %dec_label_pc_c760 ]
  %v5_c848 = mul i32 %v1_c854, 24
  %v1_c84c = load i32, i32* @r7, align 4
  %v2_c84c = add i32 %v1_c84c, %v5_c848
  store i32 %v2_c84c, i32* %r3.global-to-local, align 4
  %v1_c850 = add i32 %v2_c84c, 20
  %v2_c850 = inttoptr i32 %v1_c850 to i8*
  %v3_c850 = load i8, i8* %v2_c850, align 1
  %v4_c850 = zext i8 %v3_c850 to i32
  store i32 %v4_c850, i32* %r2.global-to-local, align 4
  %v0_c854 = load i32, i32* @sl, align 4
  %v4_c854 = mul i32 %v1_c854, 4
  %v5_c854 = add i32 %v0_c854, %v4_c854
  %v6_c854 = inttoptr i32 %v5_c854 to i32*
  %v7_c854 = load i32, i32* %v6_c854, align 4
  store i32 %v7_c854, i32* @r5, align 4
  %v2_c858 = icmp ugt i8 %v3_c850, 30
  %v7_c858 = icmp eq i8 %v3_c850, 31
  store i1 %v7_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = add i32 %v7_c854, 20
  store i32 %v1_c85c, i32* @r6, align 4
  %v2_c860 = xor i1 %v7_c858, true
  %v3_c860 = and i1 %v2_c858, %v2_c860
  br i1 %v3_c860, label %dec_label_pc_c768, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c844
  %v1_c864 = add i32 %v2_c84c, 16
  %v2_c864 = inttoptr i32 %v1_c864 to i32*
  %v3_c864 = load i32, i32* %v2_c864, align 4
  store i32 %v3_c864, i32* %r4.global-to-local, align 4
  %v0_c868 = call i32 @function_f188()
  store i32 %v0_c868, i32* %r0.global-to-local, align 4
  %v3_c86c = load i32, i32* %stack_var_-44, align 4
  %v5_c874 = mul i32 %v3_c86c, 24
  %v0_c878 = load i32, i32* %r4.global-to-local, align 4
  %v1_c878 = and i32 %v0_c878, 16711680
  %v3_c87c = udiv i32 %v0_c878, 16777216
  %v4_c880 = udiv i32 %v1_c878, 256
  %v5_c880 = or i32 %v4_c880, %v3_c87c
  store i32 %v5_c880, i32* %r2.global-to-local, align 4
  %v1_c884 = load i32, i32* @r7, align 4
  %v2_c884 = add i32 %v1_c884, %v5_c874
  store i32 %v2_c884, i32* %r1.global-to-local, align 4
  %v1_c888 = and i32 %v0_c878, 65280
  store i32 %v1_c888, i32* %r3.global-to-local, align 4
  %v1_c88c = add i32 %v2_c884, 20
  %v2_c88c = inttoptr i32 %v1_c88c to i8*
  %v3_c88c = load i8, i8* %v2_c88c, align 1
  %v4_c88c = zext i8 %v3_c88c to i32
  %v5_c894 = call i32 @llvm.bswap.i32(i32 %v0_c878)
  %v7_c898 = lshr i32 %v0_c868, %v4_c88c
  %v8_c898 = add i32 %v7_c898, %v5_c894
  store i32 %v8_c898, i32* %r2.global-to-local, align 4
  %v1_c89c = and i32 %v8_c898, 16711680
  store i32 %v1_c89c, i32* %r0.global-to-local, align 4
  %v1_c8a8 = and i32 %v8_c898, 65280
  store i32 %v1_c8a8, i32* %r1.global-to-local, align 4
  %v5_c8b0 = call i32 @llvm.bswap.i32(i32 %v8_c898)
  %v1_c8b4 = load i32, i32* @r5, align 4
  %v2_c8b4 = add i32 %v1_c8b4, 16
  %v3_c8b4 = inttoptr i32 %v2_c8b4 to i32*
  store i32 %v5_c8b0, i32* %v3_c8b4, align 4
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  store i1 %v7_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c76c, label %dec_label_pc_c8c4, label %dec_label_pc_c774

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c864, %dec_label_pc_c768
  %v0_c8c4 = call i32 @function_f188()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c8cc = load i32, i32* @r5, align 4
  %v2_c8cc = add i32 %v1_c8cc, 12
  %v3_c8cc = inttoptr i32 %v2_c8cc to i32*
  store i32 %v0_c8c4, i32* %v3_c8cc, align 4
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  %v0_c8d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c8d4 = add i32 %v0_c8d4, -1
  store i32 %v1_c8d4, i32* @r4, align 4
  %v9_c8d8 = icmp eq i32 %v3_c4e0, %v1_c8d4
  store i1 %v9_c8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c8d8, label %dec_label_pc_c8e0, label %dec_label_pc_c788

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c774
  %v0_c8e0 = call i32 @function_f188()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i16
  store i32 %v0_c8e0, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %v1_c8e8 = load i32, i32* @r4, align 4
  %v9_c8e8 = icmp eq i32 %v3_c4e4, %v1_c8e8
  store i1 %v9_c8e8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8ec = load i32, i32* @r5, align 4
  %v4_c8ec = add i32 %v3_c8ec, 4
  %v5_c8ec = inttoptr i32 %v4_c8ec to i16*
  store i16 %v1_c8e0, i16* %v5_c8ec, align 2
  br i1 %v9_c8e8, label %dec_label_pc_c8f4, label %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge

dec_label_pc_c8e0.dec_label_pc_c794_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v1_c798.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c794

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c8e0, %dec_label_pc_c788
  %v0_c8f4 = call i32 @function_f188()
  %v1_c8f4 = trunc i32 %v0_c8f4 to i16
  store i32 %v0_c8f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e8, i32* %r2.global-to-local, align 4
  %v1_c8fc = load i32, i32* @r4, align 4
  %v9_c8fc = icmp eq i32 %v3_c4e8, %v1_c8fc
  store i1 %v9_c8fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c900 = load i32, i32* @r5, align 4
  %v4_c900 = add i32 %v3_c900, 20
  %v5_c900 = inttoptr i32 %v4_c900 to i16*
  store i16 %v1_c8f4, i16* %v5_c900, align 2
  br i1 %v9_c8fc, label %dec_label_pc_c908, label %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge

dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge:    ; preds = %dec_label_pc_c8f4
  %v1_c7a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c7a0

dec_label_pc_c908:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_c794
  %v0_c908 = call i32 @function_f188()
  %v1_c908 = trunc i32 %v0_c908 to i16
  store i32 %v0_c908, i32* %r0.global-to-local, align 4
  store i32 %v5_c3a0, i32* %r3.global-to-local, align 4
  %v1_c910 = load i32, i32* @r4, align 4
  %v9_c910 = icmp eq i32 %v5_c3a0, %v1_c910
  store i1 %v9_c910, i1* %cpsr_z.global-to-local, align 1
  %v3_c914 = load i32, i32* @r6, align 4
  %v4_c914 = add i32 %v3_c914, 2
  %v5_c914 = inttoptr i32 %v4_c914 to i16*
  store i16 %v1_c908, i16* %v5_c914, align 2
  br i1 %v9_c910, label %dec_label_pc_c91c, label %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge

dec_label_pc_c908.dec_label_pc_c7ac_crit_edge:    ; preds = %dec_label_pc_c908
  %v1_c7b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c7ac

dec_label_pc_c91c:                                ; preds = %dec_label_pc_c908, %dec_label_pc_c7a0
  %v0_c91c = call i32 @function_f188()
  %v1_c920 = load i32, i32* @r6, align 4
  %v2_c920 = add i32 %v1_c920, 4
  %v3_c920 = inttoptr i32 %v2_c920 to i32*
  store i32 %v0_c91c, i32* %v3_c920, align 4
  store i32 %v6_c3b8, i32* %r0.global-to-local, align 4
  %v1_c928 = load i32, i32* @r4, align 4
  %v9_c928 = icmp eq i32 %v6_c3b8, %v1_c928
  store i1 %v9_c928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c928, label %dec_label_pc_c930, label %dec_label_pc_c7b8

dec_label_pc_c930:                                ; preds = %dec_label_pc_c91c, %dec_label_pc_c7ac
  %v0_c930 = call i32 @function_f188()
  store i32 %v0_c930, i32* %r0.global-to-local, align 4
  %v0_c934 = load i32, i32* @fp, align 4
  %v2_c934 = icmp eq i32 %v0_c934, 0
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  %v1_c938 = load i32, i32* @r6, align 4
  %v2_c938 = add i32 %v1_c938, 8
  %v3_c938 = inttoptr i32 %v2_c938 to i32*
  store i32 %v0_c930, i32* %v3_c938, align 4
  br i1 %v2_c934, label %dec_label_pc_c7c0, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c7b8, %dec_label_pc_c930
  %v0_c940 = call i32 @function_f188()
  %v1_c940 = trunc i32 %v0_c940 to i16
  store i32 %v0_c940, i32* %r0.global-to-local, align 4
  %v3_c944 = load i32, i32* @r6, align 4
  %v4_c944 = add i32 %v3_c944, 18
  %v5_c944 = inttoptr i32 %v4_c944 to i16*
  store i16 %v1_c940, i16* %v5_c944, align 2
  br label %dec_label_pc_c7c0

dec_label_pc_c94c:                                ; preds = %dec_label_pc_c7c0, %dec_label_pc_c750
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c950 = call i32 @function_12148(i32* null)
  store i32 %v2_c950, i32* %r0.global-to-local, align 4
  store i32 %v2_c474, i32* %r3.global-to-local, align 4
  %v9_c958 = icmp eq i32 %v2_c474, %v2_c950
  store i1 %v9_c958, i1* %cpsr_z.global-to-local, align 1
  %v6_c95c = icmp slt i32 %v2_c474, %v2_c950
  br i1 %v6_c95c, label %dec_label_pc_c960, label %dec_label_pc_c94c.dec_label_pc_c750_crit_edge

dec_label_pc_c94c.dec_label_pc_c750_crit_edge:    ; preds = %dec_label_pc_c94c
  %v0_c754.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_c750

dec_label_pc_c960:                                ; preds = %dec_label_pc_c94c, %dec_label_pc_c2a4, %dec_label_pc_c96c
  %v1_c968 = phi i32 [ %v3_c488, %dec_label_pc_c2a4 ], [ %v1_c970, %dec_label_pc_c96c ], [ %v2_c950, %dec_label_pc_c94c ]
  store i32 %v3_c2a4, i32* %r4.global-to-local, align 4
  store i32 %v24_c2a4, i32* %fp.global-to-local, align 4
  store i32 %v27_c2a4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c968

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c498
  %v0_c96c = load i32, i32* @r8, align 4
  store i32 %v0_c96c, i32* %r0.global-to-local, align 4
  %v1_c970 = call i32 @function_124c8(i32 %v0_c96c)
  store i32 %v1_c970, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c960

; uselistorder directives
  uselistorder i32 %v1_c970, { 1, 0 }
  uselistorder i32 %v0_c940, { 1, 0 }
  uselistorder i32 %v0_c908, { 1, 0 }
  uselistorder i32 %v0_c8f4, { 1, 0 }
  uselistorder i32 %v0_c8e0, { 1, 0 }
  uselistorder i32 %v1_c8d4, { 1, 2, 0 }
  uselistorder i32 %v0_c878, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c834, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_c800, { 1, 0 }
  uselistorder i32 %v4_c7f0, { 1, 0 }
  uselistorder i1 %v3_c780, { 1, 0 }
  uselistorder i1 %v7_c76c, { 2, 1, 0 }
  uselistorder i32 %v2_c740, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c5a8, { 1, 2, 0 }
  uselistorder i32 %v1_c56c, { 2, 1, 0 }
  uselistorder i32 %v1_c568, { 2, 0, 1 }
  uselistorder i32 %v1_c564, { 2, 0, 1 }
  uselistorder i32 %v1_c560, { 2, 0, 1 }
  uselistorder i32 %v1_c55c, { 2, 0, 1 }
  uselistorder i32 %v3_c4e4, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_c4e0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c4d4, { 1, 0, 2 }
  uselistorder i1 %v7_c4b8, { 1, 0 }
  uselistorder i1 %v7_c48c, { 1, 0 }
  uselistorder i32 %v3_c488, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c474, { 2, 1, 0 }
  uselistorder i32 %v6_c464, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c3b8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c3a0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c324, { 1, 0 }
  uselistorder i32 %v7_c30c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 28, 21, 22, 23, 24, 25, 26, 27, 32, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 20, 26, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 20, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 8, 10, 11, 9, 12, 34, 33, 35, 32, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 52, 53, 54, 56, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 8 }
  uselistorder i32 57, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 58, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 45, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_c960, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c940, { 1, 0 }
  uselistorder label %dec_label_pc_c7c0, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c97c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c97c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_c9a0 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_c9ac = load i32, i32* @fp, align 4
  store i32 %v0_c9ac, i32* %r0.global-to-local, align 4
  %v2_c9b0 = call i32 @function_1383c(i32 %v0_c9ac, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_c9b0, i32* @sb, align 4
  %v0_c9cc = load i32, i32* @r4, align 4
  store i32 %v0_c9cc, i32* %r0.global-to-local, align 4
  %v4_c9d0 = inttoptr i32 %v0_c9bc to i32*
  %v5_c9d0 = call i32 @function_9fe8(i32 %v0_c9cc, i32* %v4_c9d0, i32 7, i32 65535)
  %v0_c9d4 = load i32, i32* @r5, align 4
  %v0_c9e0 = load i32, i32* @r6, align 4
  store i32 %v0_c9e0, i32* %r3.global-to-local, align 4
  %v0_c9e4 = load i32, i32* @r4, align 4
  store i32 %v0_c9e4, i32* %r0.global-to-local, align 4
  %v3_c9e8 = urem i32 %v5_c9d0, 65536
  store i32 %v3_c9e8, i32* @r8, align 4
  %v4_c9ec = inttoptr i32 %v0_c9d4 to i32*
  %v5_c9ec = call i32 @function_9fe8(i32 %v0_c9e4, i32* %v4_c9ec, i32 6, i32 %v0_c9e0)
  %v0_c9f0 = load i32, i32* @r5, align 4
  %v3_c9f4 = mul i32 %v5_c9ec, 65536
  store i32 %v3_c9f4, i32* @sl, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ca00 = load i32, i32* @r4, align 4
  store i32 %v0_ca00, i32* %r0.global-to-local, align 4
  %v4_ca04 = inttoptr i32 %v0_c9f0 to i32*
  %v5_ca04 = call i32 @function_9fe8(i32 %v0_ca00, i32* %v4_ca04, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ca14 = urem i32 %v5_ca04, 65536
  %v0_ca18 = load i32, i32* @r5, align 4
  %v0_ca1c = load i32, i32* @r4, align 4
  store i32 %v0_ca1c, i32* %r0.global-to-local, align 4
  %v4_ca24 = inttoptr i32 %v0_ca18 to i32*
  %v5_ca24 = call i32 @function_9fe8(i32 %v0_ca1c, i32* %v4_ca24, i32 1, i32 1)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ca30 = urem i32 %v5_ca24, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ca4c = call i32 @function_12148(i32* null)
  store i32 %v2_ca4c, i32* %r0.global-to-local, align 4
  %v0_ca50 = load i32, i32* @sl, align 4
  %v3_ca50 = udiv i32 %v0_ca50, 65536
  %v1_ca54 = load i32, i32* @r6, align 4
  %v9_ca54 = icmp eq i32 %v3_ca50, %v1_ca54
  br i1 %v9_ca54, label %dec_label_pc_cc28, label %bb

bb:                                               ; preds = %dec_label_pc_c97c
  %v4_ca5c = udiv i32 %v0_ca50, 16777216
  store i32 %v4_ca5c, i32* %r3.global-to-local, align 4
  %v1_ca60 = load i32, i32* @r7, align 4
  %v2_ca60 = add i32 %v1_ca60, %v2_ca4c
  store i32 %v2_ca60, i32* %r0.global-to-local, align 4
  %v2_ca58 = mul nuw nsw i32 %v3_ca50, 256
  %v6_ca64 = or i32 %v2_ca58, %v4_ca5c
  %extract.t58 = trunc i32 %v6_ca64 to i16
  br label %dec_label_pc_ca74

dec_label_pc_ca74:                                ; preds = %bb, %dec_label_pc_cc28
  %v6_ca64.sink.off0 = phi i16 [ %extract.t58, %bb ], [ %extract.t59, %dec_label_pc_cc28 ]
  %v0_ca6810 = phi i32 [ %v2_ca60, %bb ], [ %v2_ca6013, %dec_label_pc_cc28 ]
  %v0_ca74 = load i32, i32* @fp, align 4
  %v2_ca74 = icmp eq i32 %v0_ca74, 0
  br i1 %v2_ca74, label %dec_label_pc_cbac, label %dec_label_pc_ca7c

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca74
  store i32 0, i32* @sl, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_caa8 = ptrtoint i32* %stack_var_-56 to i32
  %v4_cac8 = sext i16 %v6_ca64.sink.off0 to i32
  br label %dec_label_pc_cafc

dec_label_pc_ca8c:                                ; preds = %.thread26, %dec_label_pc_cb38
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ca98 = call i32 @function_12cd4(i32 2, i32 2, i32 17)
  store i32 %v3_ca98, i32* %r0.global-to-local, align 4
  %v7_ca9c = icmp eq i32 %v3_ca98, -1
  %v0_caa0 = load i32, i32* @sl, align 4
  %v1_caa0 = add i32 %v0_caa0, 1
  store i32 %v1_caa0, i32* @sl, align 4
  %v0_caa4 = load i32, i32* @r7, align 4
  %v1_caa4 = add i32 %v0_caa4, 24
  store i32 %v1_caa4, i32* @r7, align 4
  %v1_cab0 = load i32, i32* @r6, align 4
  %v2_cab0 = load i32, i32* @sb, align 4
  %v3_cab0 = add i32 %v2_cab0, %v1_cab0
  %v4_cab0 = inttoptr i32 %v3_cab0 to i32*
  store i32 %v3_ca98, i32* %v4_cab0, align 4
  br i1 %v7_ca9c, label %dec_label_pc_cbd0.loopexit14, label %dec_label_pc_cab8

dec_label_pc_cab8:                                ; preds = %dec_label_pc_ca8c
  store i32 2, i32* %stack_var_-56, align 4
  store i32 %v4_cac8, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* %r0.global-to-local, align 4
  %v3_cad0 = call i32 @function_12a84(i32 %v0_cad0, i32 %v2_caa8, i32 16)
  store i32 %v3_cad0, i32* %r0.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r5, align 4
  %v1_cad4 = add i32 %v0_cad4, 20
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v4_cad4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_cad4, 32
  br i1 %tmp, label %dec_label_pc_cb4c, label %dec_label_pc_cae0

dec_label_pc_cae0:                                ; preds = %dec_label_pc_cab8
  %v0_cae0 = load i32, i32* @r6, align 4
  %v1_cae0 = load i32, i32* @sb, align 4
  %v2_cae0 = add i32 %v1_cae0, %v0_cae0
  %v3_cae0 = inttoptr i32 %v2_cae0 to i32*
  %v4_cae0 = load i32, i32* %v3_cae0, align 4
  store i32 %v4_cae0, i32* %r0.global-to-local, align 4
  %v3_caec = call i32 @function_12abc(i32 %v4_cae0, i32 %v0_cad4, i32 16)
  store i32 %v3_caec, i32* %r0.global-to-local, align 4
  %v0_caf0 = load i32, i32* @sl, align 4
  %v1_caf0 = load i32, i32* @fp, align 4
  %v9_caf0 = icmp eq i32 %v0_caf0, %v1_caf0
  %v0_caf4 = load i32, i32* @r6, align 4
  %v1_caf4 = add i32 %v0_caf4, 4
  store i32 %v1_caf4, i32* @r6, align 4
  br i1 %v9_caf0, label %dec_label_pc_cbac, label %dec_label_pc_cafc

dec_label_pc_cafc:                                ; preds = %dec_label_pc_cb4c, %dec_label_pc_cae0, %dec_label_pc_ca7c
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_cb0c = call i32 @function_1383c(i32 65535, i32 1)
  store i32 %v2_cb0c, i32* %r0.global-to-local, align 4
  %v0_cb10 = load i32, i32* @r8, align 4
  %v3_cb14 = udiv i32 %v0_cb10, 256
  %v1_cb10 = mul i32 %v0_cb10, 256
  %v4_cb18 = and i32 %v1_cb10, 65280
  %v5_cb18 = or i32 %v4_cb18, %v3_cb14
  store i32 %v5_cb18, i32* %r3.global-to-local, align 4
  %v2_cb1c = load i32, i32* %stack_var_-80, align 4
  %v1_cb20 = load i32, i32* @r7, align 4
  %v2_cb20 = add i32 %v1_cb20, %v2_cb1c
  store i32 %v2_cb20, i32* @r5, align 4
  %v1_cb28 = load i32, i32* @r4, align 4
  %v9_cb28 = icmp eq i32 %v0_cb10, %v1_cb28
  %v1_cb2c = load i32, i32* @r6, align 4
  %v3_cb2c = add i32 %v1_cb2c, %v2_c9a0
  %v4_cb2c = inttoptr i32 %v3_cb2c to i32*
  store i32 %v2_cb0c, i32* %v4_cb2c, align 4
  br i1 %v9_cb28, label %dec_label_pc_cb38, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_cafc
  %v1_cb3027 = load i32, i32* %r3.global-to-local, align 4
  %v2_cb3028 = trunc i32 %v1_cb3027 to i16
  %v3_cb3029 = load i32, i32* @r5, align 4
  %v4_cb3030 = add i32 %v3_cb3029, 2
  %v5_cb3031 = inttoptr i32 %v4_cb3030 to i16*
  store i16 %v2_cb3028, i16* %v5_cb3031, align 2
  br label %dec_label_pc_ca8c

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cafc
  %v0_cb38 = call i32 @function_f188()
  %v1_cb38 = trunc i32 %v0_cb38 to i16
  store i32 %v0_cb38, i32* %r0.global-to-local, align 4
  %v2_cb3c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_cb3c, i32* %r3.global-to-local, align 4
  %v1_cb40 = load i32, i32* @r7, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_cb3c
  store i32 %v2_cb40, i32* @r5, align 4
  %v4_cb44 = add i32 %v2_cb40, 2
  %v5_cb44 = inttoptr i32 %v4_cb44 to i16*
  store i16 %v1_cb38, i16* %v5_cb44, align 2
  br label %dec_label_pc_ca8c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cab8
  %v1_cb4c = add i32 %v0_cad4, 16
  %v2_cb4c = inttoptr i32 %v1_cb4c to i32*
  %v3_cb4c = load i32, i32* %v2_cb4c, align 4
  store i32 %v3_cb4c, i32* @r4, align 4
  %v0_cb50 = call i32 @function_f188()
  store i32 %v0_cb50, i32* %r0.global-to-local, align 4
  %v0_cb54 = load i32, i32* @r4, align 4
  %v1_cb60 = and i32 %v0_cb54, 65280
  store i32 %v1_cb60, i32* %r3.global-to-local, align 4
  %v0_cb64 = load i32, i32* @r5, align 4
  %v1_cb64 = add i32 %v0_cb64, 20
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v4_cb64 = zext i8 %v3_cb64 to i32
  %v5_cb6c = call i32 @llvm.bswap.i32(i32 %v0_cb54)
  %v7_cb70 = lshr i32 %v0_cb50, %v4_cb64
  %v8_cb70 = add i32 %v7_cb70, %v5_cb6c
  %v1_cb74 = and i32 %v8_cb70, 16711680
  store i32 %v1_cb74, i32* %r0.global-to-local, align 4
  %v5_cb88 = call i32 @llvm.bswap.i32(i32 %v8_cb70)
  store i32 %v5_cb88, i32* %r3.global-to-local, align 4
  %v2_cb8c = add i32 %v0_cb64, 4
  %v3_cb8c = inttoptr i32 %v2_cb8c to i32*
  store i32 %v5_cb88, i32* %v3_cb8c, align 4
  %v0_cb90 = load i32, i32* @r5, align 4
  %v0_cb94 = load i32, i32* @r6, align 4
  %v1_cb94 = load i32, i32* @sb, align 4
  %v2_cb94 = add i32 %v1_cb94, %v0_cb94
  %v3_cb94 = inttoptr i32 %v2_cb94 to i32*
  %v4_cb94 = load i32, i32* %v3_cb94, align 4
  store i32 %v4_cb94, i32* %r0.global-to-local, align 4
  %v3_cb9c = call i32 @function_12abc(i32 %v4_cb94, i32 %v0_cb90, i32 16)
  store i32 %v3_cb9c, i32* %r0.global-to-local, align 4
  %v0_cba0 = load i32, i32* @sl, align 4
  %v1_cba0 = load i32, i32* @fp, align 4
  %v9_cba0 = icmp eq i32 %v0_cba0, %v1_cba0
  %v0_cba4 = load i32, i32* @r6, align 4
  %v1_cba4 = add i32 %v0_cba4, 4
  store i32 %v1_cba4, i32* @r6, align 4
  br i1 %v9_cba0, label %dec_label_pc_cbac, label %dec_label_pc_cafc

dec_label_pc_cbac:                                ; preds = %dec_label_pc_cb4c, %dec_label_pc_cae0, %dec_label_pc_ca74
  %v1_cbb021 = phi i32 [ 0, %dec_label_pc_ca74 ], [ %v0_cba0, %dec_label_pc_cb4c ], [ %v0_caf0, %dec_label_pc_cae0 ]
  store i32 0, i32* @r5, align 4
  %v2_cbe4 = icmp eq i32 %v1_ca30, 0
  br label %dec_label_pc_cbb0

dec_label_pc_cbb0:                                ; preds = %dec_label_pc_cbb0.backedge, %dec_label_pc_cbac
  %v1_cbb0 = phi i32 [ %v1_cbb0.pre, %dec_label_pc_cbb0.backedge ], [ %v1_cbb021, %dec_label_pc_cbac ]
  %v1_cbe8 = phi i32 [ %v0_cbb019, %dec_label_pc_cbb0.backedge ], [ 0, %dec_label_pc_cbac ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_cbb8 = icmp slt i32 %v1_cbe8, %v1_cbb0
  br i1 %v5_cbb8, label %dec_label_pc_cbdc, label %dec_label_pc_cbbc

dec_label_pc_cbbc:                                ; preds = %dec_label_pc_cbb0
  %v2_cbbc = call i32 @function_12148(i32* null)
  store i32 %v2_cbbc, i32* %r0.global-to-local, align 4
  store i32 %v0_ca6810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_cbcc = icmp slt i32 %v0_ca6810, %v2_cbbc
  br i1 %v6_cbcc, label %dec_label_pc_cbd0, label %dec_label_pc_cbb0.backedge

dec_label_pc_cbd0.loopexit14:                     ; preds = %dec_label_pc_ca8c
  %v1_cbd8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cbd0

dec_label_pc_cbd0:                                ; preds = %dec_label_pc_cbbc, %dec_label_pc_cbd0.loopexit14
  %v1_cbd8 = phi i32 [ %v1_cbd8.pre, %dec_label_pc_cbd0.loopexit14 ], [ %v2_cbbc, %dec_label_pc_cbbc ]
  ret i32 %v1_cbd8

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbb0
  store i32 %v2_c9a0, i32* %r3.global-to-local, align 4
  %v4_cbe8 = mul i32 %v1_cbe8, 4
  %v5_cbe8 = add i32 %v4_cbe8, %v2_c9a0
  %v6_cbe8 = inttoptr i32 %v5_cbe8 to i32*
  %v7_cbe8 = load i32, i32* %v6_cbe8, align 4
  store i32 %v7_cbe8, i32* @r4, align 4
  br i1 %v2_cbe4, label %dec_label_pc_cbf0, label %dec_label_pc_cc0c

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cbdc, %dec_label_pc_cc0c
  %v0_cbf4 = phi i32 [ %v7_cbe8, %dec_label_pc_cbdc ], [ %v0_cbf4.pre, %dec_label_pc_cc0c ]
  %v1_cbf0 = phi i32 [ %v1_cbe8, %dec_label_pc_cbdc ], [ %v1_cbf0.pre, %dec_label_pc_cc0c ]
  %v0_cbf0 = load i32, i32* @sb, align 4
  %v4_cbf0 = mul i32 %v1_cbf0, 4
  %v5_cbf0 = add i32 %v4_cbf0, %v0_cbf0
  %v6_cbf0 = inttoptr i32 %v5_cbf0 to i32*
  %v7_cbf0 = load i32, i32* %v6_cbf0, align 4
  store i32 %v7_cbf0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_cc00 = call i32 @function_12c18(i32 %v7_cbf0, i32 %v0_cbf4, i32 %v3_ca14, i32 16384)
  store i32 %v4_cc00, i32* %r0.global-to-local, align 4
  %v0_cc04 = load i32, i32* @r5, align 4
  %v1_cc04 = add i32 %v0_cc04, 1
  store i32 %v1_cc04, i32* @r5, align 4
  br label %dec_label_pc_cbb0.backedge

dec_label_pc_cbb0.backedge:                       ; preds = %dec_label_pc_cbf0, %dec_label_pc_cbbc
  %v0_cbb019 = phi i32 [ %v1_cc04, %dec_label_pc_cbf0 ], [ 0, %dec_label_pc_cbbc ]
  %v1_cbb0.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_cbb0

dec_label_pc_cc0c:                                ; preds = %dec_label_pc_cbdc
  store i32 %v7_cbe8, i32* %r0.global-to-local, align 4
  %v2_cc14 = call i32 @function_f24c(i32 %v7_cbe8, i32 %v3_ca14)
  store i32 %v2_cc14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cc20 = load i32, i32* @r4, align 4
  %v4_cc20 = add i32 %v3_cc20, %v3_ca14
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 0, i8* %v5_cc20, align 1
  %v1_cbf0.pre = load i32, i32* @r5, align 4
  %v0_cbf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cc28:                                ; preds = %dec_label_pc_c97c
  %v1_ca6012 = load i32, i32* @r7, align 4
  %v2_ca6013 = add i32 %v1_ca6012, %v2_ca4c
  store i32 %v2_ca6013, i32* %r0.global-to-local, align 4
  %v0_cc28 = call i32 @function_f188()
  %v3_cc30 = urem i32 %v0_cc28, 65536
  store i32 %v3_cc30, i32* %r0.global-to-local, align 4
  %extract.t59 = trunc i32 %v0_cc28 to i16
  br label %dec_label_pc_ca74

; uselistorder directives
  uselistorder i32 %v0_cc28, { 1, 0 }
  uselistorder i32 %v2_ca6013, { 1, 0 }
  uselistorder i32 %v7_cbe8, { 2, 1, 0, 3 }
  uselistorder i32 %v5_cb88, { 1, 0 }
  uselistorder i32 %v0_cb38, { 1, 0 }
  uselistorder i32 %v0_cb10, { 2, 0, 1 }
  uselistorder i32 %v3_ca98, { 1, 0, 2 }
  uselistorder i32 %v0_ca6810, { 1, 0 }
  uselistorder i32 %v4_ca5c, { 1, 0 }
  uselistorder i32 %v3_ca14, { 2, 1, 0 }
  uselistorder i32 %v2_c9a0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 14, 13, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 18, 8, 7, 11, 9, 10, 12, 13, 22, 20, 15, 14, 31, 17, 19, 16, 21, 24, 23, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_cbf0, { 1, 0 }
  uselistorder label %dec_label_pc_cbd0, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c, { 1, 0 }
  uselistorder label %dec_label_pc_ca74, { 1, 0 }
}

define i32 @function_cc3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_cc3c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_cc3c = load i32, i32* @lr, align 4
  store i32 0, i32* @r8, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_cc68 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_cc6c = load i32, i32* @r4, align 4
  store i32 %v0_cc6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cc78 = load i32, i32* @r8, align 4
  store i32 %v0_cc78, i32* %r3.global-to-local, align 4
  %v0_cc7c = load i32, i32* @r5, align 4
  store i32 %v0_cc7c, i32* %r0.global-to-local, align 4
  %v5_cc80 = inttoptr i32 %v0_cc6c to i32*
  %v6_cc80 = call i32 @function_9fe8(i32 %v0_cc7c, i32* %v5_cc80, i32 2, i32 %v0_cc78)
  %v1_cc8c = urem i32 %v6_cc80, 256
  store i32 %v1_cc8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cc98 = load i32, i32* @r4, align 4
  store i32 %v0_cc98, i32* %r1.global-to-local, align 4
  %v0_cc9c = load i32, i32* @r5, align 4
  store i32 %v0_cc9c, i32* %r0.global-to-local, align 4
  %v5_cca0 = trunc i32 %v6_cc80 to i8
  %v6_cca4 = inttoptr i32 %v0_cc98 to i32*
  %v7_cca4 = call i32 @function_9fe8(i32 %v0_cc9c, i32* %v6_cca4, i32 3, i32 65535)
  %v0_cca8 = load i32, i32* @r4, align 4
  store i32 %v0_cca8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  store i32 %v0_ccb8, i32* %r0.global-to-local, align 4
  %v5_ccbc = inttoptr i32 %v0_cca8 to i32*
  %v6_ccbc = call i32 @function_9fe8(i32 %v0_ccb8, i32* %v5_ccbc, i32 4, i32 64)
  %v1_ccc4 = urem i32 %v6_ccbc, 256
  store i32 %v1_ccc4, i32* %ip.global-to-local, align 4
  %v0_ccc8 = load i32, i32* @r4, align 4
  store i32 %v0_ccc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ccd0 = load i32, i32* @r8, align 4
  store i32 %v0_ccd0, i32* %r3.global-to-local, align 4
  %v0_ccd4 = load i32, i32* @r5, align 4
  store i32 %v0_ccd4, i32* %r0.global-to-local, align 4
  %v5_ccd8 = trunc i32 %v6_ccbc to i8
  %v6_ccdc = inttoptr i32 %v0_ccc8 to i32*
  %v7_ccdc = call i32 @function_9fe8(i32 %v0_ccd4, i32* %v6_ccdc, i32 5, i32 %v0_ccd0)
  %v1_cce8 = urem i32 %v7_ccdc, 256
  store i32 %v1_cce8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ccf4 = load i32, i32* @r4, align 4
  store i32 %v0_ccf4, i32* %r1.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r5, align 4
  store i32 %v0_ccf8, i32* %r0.global-to-local, align 4
  %v5_cd00 = inttoptr i32 %v0_ccf4 to i32*
  %v6_cd00 = call i32 @function_9fe8(i32 %v0_ccf8, i32* %v5_cd00, i32 6, i32 65535)
  %v0_cd0c = load i32, i32* @r4, align 4
  store i32 %v0_cd0c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_cd18 = load i32, i32* @r5, align 4
  store i32 %v0_cd18, i32* %r0.global-to-local, align 4
  %v5_cd1c = inttoptr i32 %v0_cd0c to i32*
  %v6_cd1c = call i32 @function_9fe8(i32 %v0_cd18, i32* %v5_cd1c, i32 7, i32 65535)
  %v0_cd20 = load i32, i32* @r4, align 4
  store i32 %v0_cd20, i32* %r1.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r8, align 4
  store i32 %v0_cd28, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_cd30 = load i32, i32* @r5, align 4
  store i32 %v0_cd30, i32* %r0.global-to-local, align 4
  %v5_cd34 = inttoptr i32 %v0_cd20 to i32*
  %v6_cd34 = call i32 @function_9fe8(i32 %v0_cd30, i32* %v5_cd34, i32 %v0_cd28, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r4, align 4
  store i32 %v0_cd40, i32* %r1.global-to-local, align 4
  store i32 %v6_cd34, i32* @sl, align 4
  %v0_cd48 = load i32, i32* @r5, align 4
  store i32 %v0_cd48, i32* %r0.global-to-local, align 4
  %v4_cd4c = inttoptr i32 %v0_cd40 to i32*
  %v5_cd4c = call i32 @function_9fe8(i32 %v0_cd48, i32* %v4_cd4c, i32 1, i32 1)
  %v2_cd58 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_cd58, i32* %r3.global-to-local, align 4
  %v1_cd5c = urem i32 %v5_cd4c, 256
  store i32 %v1_cd5c, i32* %ip.global-to-local, align 4
  %v0_cd60 = load i32, i32* @r4, align 4
  store i32 %v0_cd60, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_cd68 = load i32, i32* @r5, align 4
  store i32 %v0_cd68, i32* %r0.global-to-local, align 4
  %v5_cd70 = inttoptr i32 %v0_cd60 to i32*
  %v6_cd70 = call i32 @function_9fe8(i32 %v0_cd68, i32* %v5_cd70, i32 24, i32 %v2_cd58)
  store i32 %v6_cd70, i32* @sb, align 4
  %v0_cd78 = load i32, i32* @r8, align 4
  store i32 %v0_cd78, i32* %r0.global-to-local, align 4
  %v1_cd7c = inttoptr i32 %v0_cd78 to i32*
  %v2_cd7c = call i32 @function_12148(i32* %v1_cd7c)
  %v1_cd80 = load i32, i32* @r6, align 4
  %v2_cd80 = add i32 %v1_cd80, %v2_cd7c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_cd94 = call i32 @function_12cd4(i32 2, i32 3, i32 17)
  store i32 %v3_cd94, i32* %r0.global-to-local, align 4
  %v7_cd98 = icmp eq i32 %v3_cd94, -1
  store i32 %v3_cd94, i32* @fp, align 4
  br i1 %v7_cd98, label %dec_label_pc_d1ec, label %dec_label_pc_cda4

dec_label_pc_cda4:                                ; preds = %dec_label_pc_cc3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_cdac = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_cdac, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_cdb4 = load i32, i32* @r8, align 4
  store i32 %v0_cdb4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_cdc0 = call i32 @function_12c90(i32 %v3_cd94, i32 %v0_cdb4, i32 3, i32 %v6_cdac, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_cdc0, i32* %r0.global-to-local, align 4
  %v7_cdc4 = icmp eq i32 %v5_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_d1f8, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_cda4
  %v0_cdcc = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_cdd8 = urem i32 %v0_cdcc, 65536
  %v3_cddc = icmp ugt i32 %v3_cdd8, 1459
  br i1 %v3_cddc, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_cdcc
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_cdcc, %bb
  %storemerge = phi i32 [ 1460, %bb ], [ %v3_cdd8, %dec_label_pc_cdcc ]
  %v0_cde8 = phi i32 [ 1460, %bb ], [ %v3_cdd8, %dec_label_pc_cdcc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v6_cd00, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_cdfc = mul i32 %v6_cd1c, 65536
  store i32 %v3_cdfc, i32* %r2.global-to-local, align 4
  %v3_ce04 = urem i32 %v7_cca4, 65536
  %v3_ce08 = urem i32 %v6_cd00, 65536
  store i32 %v3_ce08, i32* %ip.global-to-local, align 4
  %v3_ce0c = urem i32 %v6_cd1c, 65536
  store i32 %v3_ce0c, i32* %r0.global-to-local, align 4
  %v2_ce10 = icmp eq i32 %arg2, 0
  %v0_ce18 = load i32, i32* @r8, align 4
  store i32 %v0_ce18, i32* %stack_var_-44, align 4
  br i1 %v2_ce10, label %.dec_label_pc_cf44.preheader_crit_edge, label %dec_label_pc_ce2c

.dec_label_pc_cf44.preheader_crit_edge:           ; preds = %bb40
  %.pre = add nuw nsw i32 %v0_cde8, 8
  %.pre10 = add nuw nsw i32 %v0_cde8, 28
  br label %dec_label_pc_cf44.preheader

dec_label_pc_ce2c:                                ; preds = %bb40
  %v1_ce34 = add nuw nsw i32 %v0_cde8, 28
  %v1_ce38 = add nuw nsw i32 %v0_cde8, 8
  %tmp41 = mul nuw nsw i32 %v3_ce08, 256
  %v3_ce48 = and i32 %tmp41, 65280
  %v3_ce50 = mul i32 %v1_ce34, 65536
  store i32 %v3_ce50, i32* @lr, align 4
  %tmp42 = udiv i32 %v6_cd00, 256
  %v4_ce58 = urem i32 %tmp42, 256
  %v5_ce58 = or i32 %v3_ce48, %v4_ce58
  store i32 %v5_ce58, i32* @sl, align 4
  store i32 %v3_cdfc, i32* %r1.global-to-local, align 4
  %tmp43 = mul i32 %v6_cd1c, 256
  %v3_ce70 = and i32 %tmp43, 65280
  %v2_ce74 = icmp eq i32 %v1_cce8, 0
  %tmp44 = mul nuw nsw i32 %v1_ce34, 256
  %v3_ce78 = and i32 %tmp44, 65280
  store i32 %v3_ce78, i32* %r3.global-to-local, align 4
  %tmp45 = mul i32 %v7_cca4, 256
  %v3_ce7c = and i32 %tmp45, 65280
  store i32 %v3_ce7c, i32* %r2.global-to-local, align 4
  %tmp46 = mul nuw nsw i32 %v1_ce38, 256
  %v3_ce80 = and i32 %tmp46, 65280
  store i32 %v3_ce80, i32* %ip.global-to-local, align 4
  %tmp47 = udiv i32 %v6_cd1c, 256
  %v4_ce84 = urem i32 %tmp47, 256
  %v5_ce84 = or i32 %v4_ce84, %v3_ce70
  store i32 %v5_ce84, i32* %r0.global-to-local, align 4
  %tmp48 = udiv i32 %v7_cca4, 256
  %v4_ce88 = urem i32 %tmp48, 256
  %v5_ce88 = or i32 %v4_ce88, %v3_ce7c
  store i32 %v5_ce88, i32* @r8, align 4
  %tmp49 = udiv i32 %v1_ce34, 256
  %v4_ce8c = urem i32 %tmp49, 256
  %v5_ce8c = or i32 %v4_ce8c, %v3_ce78
  store i32 %v5_ce8c, i32* @r6, align 4
  %tmp50 = udiv i32 %v1_ce38, 256
  %v4_ce90 = urem i32 %tmp50, 256
  %v5_ce90 = or i32 %v4_ce90, %v3_ce80
  store i32 %v5_ce90, i32* @r5, align 4
  %v5_ce94 = trunc i32 %v5_ce84 to i16
  store i32 0, i32* @r4, align 4
  br i1 %v2_ce74, label %dec_label_pc_cea0.preheader, label %dec_label_pc_d12c.preheader

dec_label_pc_d12c.preheader:                      ; preds = %dec_label_pc_ce2c
  %v4_d17c = sext i8 %v5_ccd8 to i32
  %v4_d1bc = sext i16 %v5_ce94 to i32
  br label %dec_label_pc_d12c

dec_label_pc_cea0.preheader:                      ; preds = %dec_label_pc_ce2c
  %v4_cf18 = sext i16 %v5_ce94 to i32
  br label %dec_label_pc_cea0

dec_label_pc_cea0:                                ; preds = %dec_label_pc_cea0.preheader, %dec_label_pc_cea0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ceac = call i32 @function_1383c(i32 1510, i32 1)
  store i32 %v2_ceac, i32* %r0.global-to-local, align 4
  store i32 %v2_cc68, i32* %r2.global-to-local, align 4
  %v2_ceb8 = load i32, i32* @r4, align 4
  %v5_ceb8 = mul i32 %v2_ceb8, 4
  %v6_ceb8 = add i32 %v5_ceb8, %v2_cc68
  %v7_ceb8 = inttoptr i32 %v6_ceb8 to i32*
  store i32 %v2_ceac, i32* %v7_ceb8, align 4
  %v3_cebc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cebc, i32* %r1.global-to-local, align 4
  %v0_cec0 = load i32, i32* %r2.global-to-local, align 4
  %v4_cec0 = mul i32 %v3_cebc, 4
  %v5_cec0 = add i32 %v0_cec0, %v4_cec0
  %v6_cec0 = inttoptr i32 %v5_cec0 to i32*
  %v7_cec0 = load i32, i32* %v6_cec0, align 4
  store i32 %v7_cec0, i32* %r3.global-to-local, align 4
  %v1_cec4 = inttoptr i32 %v7_cec0 to i8*
  %v2_cec4 = load i8, i8* %v1_cec4, align 1
  %tmp = urem i8 %v2_cec4, 16
  %v1_cec8 = zext i8 %tmp to i32
  %v1_cecc = or i32 %v1_cec8, 64
  store i32 %v1_cecc, i32* %r2.global-to-local, align 4
  %v1_ced0 = trunc i32 %v1_cecc to i8
  store i8 %v1_ced0, i8* %v1_cec4, align 1
  %v0_ced4 = load i32, i32* %r3.global-to-local, align 4
  %v1_ced4 = inttoptr i32 %v0_ced4 to i8*
  %v2_ced4 = load i8, i8* %v1_ced4, align 1
  %v1_ced8 = and i8 %v2_ced4, -16
  %v1_cedc = or i8 %v1_ced8, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_cedc, i8* %v1_ced4, align 1
  %v0_cee8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_cee8 = add i32 %v2_cee8, 9
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v2_cef0 = load i32, i32* %r3.global-to-local, align 4
  %v3_cef0 = add i32 %v2_cef0, 1
  %v4_cef0 = inttoptr i32 %v3_cef0 to i8*
  store i8 %v5_cca0, i8* %v4_cef0, align 1
  %v0_cef8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cef8 = mul i32 %v0_cef8, 32
  store i32 %v3_cef8, i32* %r0.global-to-local, align 4
  %v2_cefc = load i32, i32* %r3.global-to-local, align 4
  %v3_cefc = add i32 %v2_cefc, 8
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v5_ccd8, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @sb, align 4
  %v1_cf00 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf00 = add i32 %v1_cf00, 12
  %v3_cf00 = inttoptr i32 %v2_cf00 to i32*
  store i32 %v0_cf00, i32* %v3_cf00, align 4
  %v0_cf04 = load i32, i32* %r0.global-to-local, align 4
  %v1_cf04 = load i32, i32* %r1.global-to-local, align 4
  %tmp52 = mul i32 %v1_cf04, -8
  %v5_cf04 = add i32 %v0_cf04, %tmp52
  %v1_cf08 = load i32, i32* @r7, align 4
  %v2_cf08 = add i32 %v5_cf04, %v1_cf08
  store i32 %v2_cf08, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_cf10 = add i32 %v1_cf04, 1
  store i32 %v1_cf10, i32* @r4, align 4
  %v1_cf14 = add i32 %v2_cf08, 16
  %v2_cf14 = inttoptr i32 %v1_cf14 to i32*
  %v3_cf14 = load i32, i32* %v2_cf14, align 4
  store i32 %v3_cf14, i32* %r2.global-to-local, align 4
  store i32 %v4_cf18, i32* %r0.global-to-local, align 4
  %v0_cf1c = load i32, i32* %r3.global-to-local, align 4
  %v1_cf1c = add i32 %v0_cf1c, 20
  store i32 %v1_cf1c, i32* %r1.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r6, align 4
  %v1_cf24 = trunc i32 %v0_cf24 to i16
  %v3_cf24 = add i32 %v0_cf1c, 2
  %v4_cf24 = inttoptr i32 %v3_cf24 to i16*
  store i16 %v1_cf24, i16* %v4_cf24, align 2
  %v0_cf28 = load i32, i32* @r8, align 4
  %v1_cf28 = trunc i32 %v0_cf28 to i16
  %v2_cf28 = load i32, i32* %r3.global-to-local, align 4
  %v3_cf28 = add i32 %v2_cf28, 4
  %v4_cf28 = inttoptr i32 %v3_cf28 to i16*
  store i16 %v1_cf28, i16* %v4_cf28, align 2
  %v0_cf2c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf2c = load i32, i32* %r3.global-to-local, align 4
  %v2_cf2c = add i32 %v1_cf2c, 16
  %v3_cf2c = inttoptr i32 %v2_cf2c to i32*
  store i32 %v0_cf2c, i32* %v3_cf2c, align 4
  %v0_cf30 = load i32, i32* @sl, align 4
  %v1_cf30 = trunc i32 %v0_cf30 to i16
  %v2_cf30 = load i32, i32* %r3.global-to-local, align 4
  %v3_cf30 = add i32 %v2_cf30, 20
  %v4_cf30 = inttoptr i32 %v3_cf30 to i16*
  store i16 %v1_cf30, i16* %v4_cf30, align 2
  %v0_cf34 = load i32, i32* @r5, align 4
  %v1_cf34 = trunc i32 %v0_cf34 to i16
  %v2_cf34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf34 = add i32 %v2_cf34, 4
  %v4_cf34 = inttoptr i32 %v3_cf34 to i16*
  store i16 %v1_cf34, i16* %v4_cf34, align 2
  %v0_cf38 = load i32, i32* %r0.global-to-local, align 4
  %v1_cf38 = trunc i32 %v0_cf38 to i16
  %v2_cf38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf38 = add i32 %v2_cf38, 2
  %v4_cf38 = inttoptr i32 %v3_cf38 to i16*
  store i16 %v1_cf38, i16* %v4_cf38, align 2
  %v0_cf3c = load i32, i32* @r4, align 4
  store i32 %v0_cf3c, i32* %stack_var_-44, align 4
  %v5_cf40 = icmp slt i32 %v1_cf10, %arg2
  br i1 %v5_cf40, label %dec_label_pc_cea0, label %dec_label_pc_cf44.preheader

dec_label_pc_cf44.preheader:                      ; preds = %dec_label_pc_d12c, %dec_label_pc_cea0, %.dec_label_pc_cf44.preheader_crit_edge
  %v1_cf64.pre-phi = phi i32 [ %.pre10, %.dec_label_pc_cf44.preheader_crit_edge ], [ %v1_ce34, %dec_label_pc_cea0 ], [ %v1_ce34, %dec_label_pc_d12c ]
  %v1_cf60.pre-phi = phi i32 [ %.pre, %.dec_label_pc_cf44.preheader_crit_edge ], [ %v1_ce38, %dec_label_pc_cea0 ], [ %v1_ce38, %dec_label_pc_d12c ]
  %v3_d0c4 = icmp eq i32 %v3_ce04, 65535
  %v2_d100 = icmp eq i32 %v1_cd5c, 0
  br label %dec_label_pc_cf44

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf44.preheader, %dec_label_pc_d1d8
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ce10, label %dec_label_pc_d1d8, label %dec_label_pc_cf58

dec_label_pc_cf58:                                ; preds = %dec_label_pc_cf44
  store i32 %v0_cde8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_cf60.pre-phi, i32* @sl, align 4
  store i32 %v1_cf64.pre-phi, i32* @r8, align 4
  br label %dec_label_pc_d034

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d034
  %v0_cf6c = load i32, i32* @sb, align 4
  %v7_cf6c = icmp eq i32 %v0_cf6c, -1
  br i1 %v7_cf6c, label %dec_label_pc_d0b4, label %dec_label_pc_cf74

dec_label_pc_cf74:                                ; preds = %dec_label_pc_d058, %dec_label_pc_cf6c
  store i32 %v3_ce04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  br i1 %v3_d0c4, label %dec_label_pc_d0d0, label %dec_label_pc_cf88

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge, %dec_label_pc_cf74
  %v1_cf8c = phi i32 [ %v1_cf8c.pre, %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge ], [ 65535, %dec_label_pc_cf74 ]
  store i32 %v3_ce08, i32* %r0.global-to-local, align 4
  %v9_cf8c = icmp eq i32 %v3_ce08, %v1_cf8c
  br i1 %v9_cf8c, label %dec_label_pc_d0e4, label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_d0d0, %dec_label_pc_cf88
  %v1_cf98 = phi i32 [ %v1_d0dc, %dec_label_pc_d0d0 ], [ %v1_cf8c, %dec_label_pc_cf88 ]
  store i32 %v3_ce0c, i32* %r1.global-to-local, align 4
  %v9_cf98 = icmp eq i32 %v3_ce0c, %v1_cf98
  br i1 %v9_cf98, label %dec_label_pc_d0f8, label %dec_label_pc_cfa0

dec_label_pc_cfa0:                                ; preds = %dec_label_pc_d0e4, %dec_label_pc_cf94
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  br i1 %v2_d100, label %dec_label_pc_cfac, label %dec_label_pc_d10c

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cfa0, %dec_label_pc_d0f8, %dec_label_pc_d10c
  %v2_cfb0 = load i32, i32* @r5, align 4
  %v3_cfb0 = add i32 %v2_cfb0, 10
  %v4_cfb0 = inttoptr i32 %v3_cfb0 to i16*
  store i16 0, i16* %v4_cfb0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cfb8 = load i32, i32* @r5, align 4
  store i32 %v0_cfb8, i32* @r0, align 4
  %v2_cfbc = call i32 @function_dd58(i32 %v0_cfb8, i32 20)
  %v3_cfbc = trunc i32 %v2_cfbc to i16
  store i32 %v2_cfbc, i32* %r0.global-to-local, align 4
  %v3_cfc0 = load i32, i32* @r5, align 4
  %v4_cfc0 = add i32 %v3_cfc0, 10
  %v5_cfc0 = inttoptr i32 %v4_cfc0 to i16*
  store i16 %v3_cfbc, i16* %v5_cfc0, align 2
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_cfc8 = load i32, i32* @r6, align 4
  %v3_cfc8 = add i32 %v2_cfc8, 6
  %v4_cfc8 = inttoptr i32 %v3_cfc8 to i16*
  store i16 0, i16* %v4_cfc8, align 2
  %v0_cfcc = load i32, i32* @r6, align 4
  %v1_cfcc = add i32 %v0_cfcc, 4
  %v2_cfcc = inttoptr i32 %v1_cfcc to i16*
  %v3_cfcc = load i16, i16* %v2_cfcc, align 2
  %v4_cfcc = zext i16 %v3_cfcc to i32
  store i32 %v4_cfcc, i32* %r2.global-to-local, align 4
  store i32 %v0_cfcc, i32* @r1, align 4
  %v0_cfd4 = load i32, i32* @sl, align 4
  store i32 %v0_cfd4, i32* %r3.global-to-local, align 4
  %v0_cfd8 = load i32, i32* @r5, align 4
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  %v4_cfdc = call i32 @function_dda8(i32 %v0_cfd8, i32 %v0_cfcc, i32 %v4_cfcc, i32 %v0_cfd4)
  %v5_cfdc = trunc i32 %v4_cfdc to i16
  store i32 %v4_cfdc, i32* %r0.global-to-local, align 4
  %v3_cfe0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cfe0, i32* %r3.global-to-local, align 4
  %v3_cfe4 = mul i32 %v3_cfe0, 32
  store i32 %v3_cfe4, i32* %lr.global-to-local, align 4
  %v3_cfe8 = load i32, i32* @r6, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 6
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i16*
  store i16 %v5_cfdc, i16* %v5_cfe8, align 2
  %v0_cfec = load i32, i32* %lr.global-to-local, align 4
  %v1_cfec = load i32, i32* %r3.global-to-local, align 4
  %tmp53 = mul i32 %v1_cfec, -8
  %v5_cfec = add i32 %v0_cfec, %tmp53
  store i32 %v5_cfec, i32* %lr.global-to-local, align 4
  %v0_cff0 = load i32, i32* @r6, align 4
  %v1_cff0 = add i32 %v0_cff0, 2
  %v2_cff0 = inttoptr i32 %v1_cff0 to i16*
  %v3_cff0 = load i16, i16* %v2_cff0, align 2
  %v1_cff4 = load i32, i32* @r7, align 4
  %v2_cff4 = add i32 %v1_cff4, %v5_cfec
  store i32 %v2_cff4, i32* @lr, align 4
  %v3_cff8 = add i32 %v2_cff4, 2
  %v4_cff8 = inttoptr i32 %v3_cff8 to i16*
  store i16 %v3_cff0, i16* %v4_cff8, align 2
  %v0_cffc = load i32, i32* @r8, align 4
  store i32 %v0_cffc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_d008 = load i32, i32* @r5, align 4
  store i32 %v0_d008, i32* %r1.global-to-local, align 4
  %v0_d00c = load i32, i32* @fp, align 4
  store i32 %v0_d00c, i32* %r0.global-to-local, align 4
  %v0_d010 = load i32, i32* @lr, align 4
  %v6_d018 = call i32 @function_12c50(i32 %v0_d00c, i32 %v0_d008, i32 %v0_cffc, i32 16384, i32 %v0_d010, i32 16)
  %v3_d01c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_d024 = add i32 %v3_d01c, 1
  store i32 %v1_d024, i32* %r0.global-to-local, align 4
  store i32 %v1_d024, i32* %stack_var_-44, align 4
  %v6_d030 = icmp slt i32 %v1_d024, %arg2
  br i1 %v6_d030, label %dec_label_pc_d034, label %dec_label_pc_d1d8

dec_label_pc_d034:                                ; preds = %dec_label_pc_cfac, %dec_label_pc_cf58
  %v1_d048 = phi i32 [ %v1_d024, %dec_label_pc_cfac ], [ 0, %dec_label_pc_cf58 ]
  %v5_d038 = mul i32 %v1_d048, 24
  %v1_d040 = load i32, i32* @r7, align 4
  %v2_d040 = add i32 %v1_d040, %v5_d038
  store i32 %v2_d040, i32* %r3.global-to-local, align 4
  %v1_d044 = add i32 %v2_d040, 20
  %v2_d044 = inttoptr i32 %v1_d044 to i8*
  %v3_d044 = load i8, i8* %v2_d044, align 1
  %v4_d044 = zext i8 %v3_d044 to i32
  store i32 %v4_d044, i32* %r2.global-to-local, align 4
  %v4_d048 = mul i32 %v1_d048, 4
  %v5_d048 = add i32 %v4_d048, %v2_cc68
  %v6_d048 = inttoptr i32 %v5_d048 to i32*
  %v7_d048 = load i32, i32* %v6_d048, align 4
  store i32 %v7_d048, i32* @r5, align 4
  %v1_d050 = add i32 %v7_d048, 20
  store i32 %v1_d050, i32* @r6, align 4
  %tmp54 = icmp ugt i8 %v3_d044, 31
  br i1 %tmp54, label %dec_label_pc_cf6c, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d034
  %v1_d058 = add i32 %v2_d040, 16
  %v2_d058 = inttoptr i32 %v1_d058 to i32*
  %v3_d058 = load i32, i32* %v2_d058, align 4
  %v0_d05c = call i32 @function_f188()
  store i32 %v0_d05c, i32* %r0.global-to-local, align 4
  %v3_d060 = load i32, i32* %stack_var_-44, align 4
  %v5_d068 = mul i32 %v3_d060, 24
  %v1_d06c = and i32 %v3_d058, 16711680
  store i32 %v1_d06c, i32* %ip.global-to-local, align 4
  %v3_d070 = udiv i32 %v3_d058, 16777216
  %v4_d074 = udiv i32 %v1_d06c, 256
  %v5_d074 = or i32 %v4_d074, %v3_d070
  store i32 %v5_d074, i32* %r2.global-to-local, align 4
  %v1_d078 = load i32, i32* @r7, align 4
  %v2_d078 = add i32 %v1_d078, %v5_d068
  store i32 %v2_d078, i32* %r1.global-to-local, align 4
  %v1_d07c = and i32 %v3_d058, 65280
  store i32 %v1_d07c, i32* %r3.global-to-local, align 4
  %v1_d080 = add i32 %v2_d078, 20
  %v2_d080 = inttoptr i32 %v1_d080 to i8*
  %v3_d080 = load i8, i8* %v2_d080, align 1
  %v4_d080 = zext i8 %v3_d080 to i32
  store i32 %v4_d080, i32* %ip.global-to-local, align 4
  %v5_d088 = call i32 @llvm.bswap.i32(i32 %v3_d058)
  %v7_d08c = lshr i32 %v0_d05c, %v4_d080
  %v8_d08c = add i32 %v7_d08c, %v5_d088
  store i32 %v8_d08c, i32* %r2.global-to-local, align 4
  %v1_d090 = and i32 %v8_d08c, 16711680
  store i32 %v1_d090, i32* %r0.global-to-local, align 4
  %v1_d09c = and i32 %v8_d08c, 65280
  store i32 %v1_d09c, i32* %r1.global-to-local, align 4
  %v5_d0a4 = call i32 @llvm.bswap.i32(i32 %v8_d08c)
  store i32 %v5_d0a4, i32* %r3.global-to-local, align 4
  %v0_d0a8 = load i32, i32* @sb, align 4
  %v3_d0a8 = icmp eq i32 %v0_d0a8, -1
  %v1_d0ac = load i32, i32* @r5, align 4
  %v2_d0ac = add i32 %v1_d0ac, 16
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  store i32 %v5_d0a4, i32* %v3_d0ac, align 4
  br i1 %v3_d0a8, label %dec_label_pc_d0b4, label %dec_label_pc_cf74

dec_label_pc_d0b4:                                ; preds = %dec_label_pc_d058, %dec_label_pc_cf6c
  %v0_d0b4 = call i32 @function_f188()
  store i32 %v0_d0b4, i32* %r0.global-to-local, align 4
  store i32 %v3_ce04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v1_d0c8 = load i32, i32* @r5, align 4
  %v2_d0c8 = add i32 %v1_d0c8, 12
  %v3_d0c8 = inttoptr i32 %v2_d0c8 to i32*
  store i32 %v0_d0b4, i32* %v3_d0c8, align 4
  br i1 %v3_d0c4, label %dec_label_pc_d0d0, label %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge

dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge:    ; preds = %dec_label_pc_d0b4
  %v1_cf8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cf88

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d0b4, %dec_label_pc_cf74
  %v0_d0d0 = call i32 @function_f188()
  %v1_d0d0 = trunc i32 %v0_d0d0 to i16
  %v3_d0d4 = load i32, i32* @r5, align 4
  %v4_d0d4 = add i32 %v3_d0d4, 4
  %v5_d0d4 = inttoptr i32 %v4_d0d4 to i16*
  store i16 %v1_d0d0, i16* %v5_d0d4, align 2
  store i32 %v3_ce08, i32* %r0.global-to-local, align 4
  %v1_d0dc = load i32, i32* @r4, align 4
  %v9_d0dc = icmp eq i32 %v3_ce08, %v1_d0dc
  br i1 %v9_d0dc, label %dec_label_pc_d0e4, label %dec_label_pc_cf94

dec_label_pc_d0e4:                                ; preds = %dec_label_pc_d0d0, %dec_label_pc_cf88
  %v0_d0e4 = call i32 @function_f188()
  %v1_d0e4 = trunc i32 %v0_d0e4 to i16
  store i32 %v0_d0e4, i32* %r0.global-to-local, align 4
  store i32 %v3_ce0c, i32* %r1.global-to-local, align 4
  %v1_d0ec = load i32, i32* @r4, align 4
  %v9_d0ec = icmp eq i32 %v3_ce0c, %v1_d0ec
  %v3_d0f0 = load i32, i32* @r5, align 4
  %v4_d0f0 = add i32 %v3_d0f0, 20
  %v5_d0f0 = inttoptr i32 %v4_d0f0 to i16*
  store i16 %v1_d0e4, i16* %v5_d0f0, align 2
  br i1 %v9_d0ec, label %dec_label_pc_d0f8, label %dec_label_pc_cfa0

dec_label_pc_d0f8:                                ; preds = %dec_label_pc_d0e4, %dec_label_pc_cf94
  %v0_d0f8 = call i32 @function_f188()
  %v1_d0f8 = trunc i32 %v0_d0f8 to i16
  store i32 %v0_d0f8, i32* %r0.global-to-local, align 4
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  %v3_d104 = load i32, i32* @r6, align 4
  %v4_d104 = add i32 %v3_d104, 2
  %v5_d104 = inttoptr i32 %v4_d104 to i16*
  store i16 %v1_d0f8, i16* %v5_d104, align 2
  br i1 %v2_d100, label %dec_label_pc_cfac, label %dec_label_pc_d10c

dec_label_pc_d10c:                                ; preds = %dec_label_pc_cfa0, %dec_label_pc_d0f8
  %v0_d10c = load i32, i32* @r5, align 4
  %v1_d10c = add i32 %v0_d10c, 28
  store i32 %v1_d10c, i32* @r4, align 4
  store i32 %v1_d10c, i32* %r0.global-to-local, align 4
  store i32 %v0_cde8, i32* %r1.global-to-local, align 4
  %v2_d118 = call i32 @function_f24c(i32 %v1_d10c, i32 %v0_cde8)
  store i32 %v2_d118, i32* %r0.global-to-local, align 4
  store i32 %v0_cde8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d124 = load i32, i32* @r4, align 4
  %v4_d124 = add i32 %v3_d124, %v0_cde8
  %v5_d124 = inttoptr i32 %v4_d124 to i8*
  store i8 0, i8* %v5_d124, align 1
  br label %dec_label_pc_cfac

dec_label_pc_d12c:                                ; preds = %dec_label_pc_d12c.preheader, %dec_label_pc_d12c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d138 = call i32 @function_1383c(i32 1510, i32 1)
  store i32 %v2_d138, i32* %r0.global-to-local, align 4
  store i32 %v2_cc68, i32* %ip.global-to-local, align 4
  %v3_d140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d140, i32* %r1.global-to-local, align 4
  %v2_d144 = load i32, i32* @r4, align 4
  %v5_d144 = mul i32 %v2_d144, 4
  %v6_d144 = add i32 %v5_d144, %v2_cc68
  %v7_d144 = inttoptr i32 %v6_d144 to i32*
  store i32 %v2_d138, i32* %v7_d144, align 4
  %v0_d148 = load i32, i32* %ip.global-to-local, align 4
  %v1_d148 = load i32, i32* %r1.global-to-local, align 4
  %v4_d148 = mul i32 %v1_d148, 4
  %v5_d148 = add i32 %v4_d148, %v0_d148
  %v6_d148 = inttoptr i32 %v5_d148 to i32*
  %v7_d148 = load i32, i32* %v6_d148, align 4
  store i32 %v7_d148, i32* %r3.global-to-local, align 4
  %v1_d14c = inttoptr i32 %v7_d148 to i8*
  %v2_d14c = load i8, i8* %v1_d14c, align 1
  %tmp55 = urem i8 %v2_d14c, 16
  %v1_d150 = zext i8 %tmp55 to i32
  %v1_d154 = or i32 %v1_d150, 64
  store i32 %v1_d154, i32* %r2.global-to-local, align 4
  %v1_d158 = trunc i32 %v1_d154 to i8
  store i8 %v1_d158, i8* %v1_d14c, align 1
  %v0_d15c = load i32, i32* %r3.global-to-local, align 4
  %v1_d15c = inttoptr i32 %v0_d15c to i8*
  %v2_d15c = load i8, i8* %v1_d15c, align 1
  %v1_d160 = and i8 %v2_d15c, -16
  %v1_d164 = or i8 %v1_d160, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_d164, i8* %v1_d15c, align 1
  %v0_d170 = load i32, i32* %ip.global-to-local, align 4
  %v1_d170 = trunc i32 %v0_d170 to i8
  %v2_d170 = load i32, i32* %r3.global-to-local, align 4
  %v3_d170 = add i32 %v2_d170, 9
  %v4_d170 = inttoptr i32 %v3_d170 to i8*
  store i8 %v1_d170, i8* %v4_d170, align 1
  %v2_d178 = load i32, i32* %r3.global-to-local, align 4
  %v3_d178 = add i32 %v2_d178, 1
  %v4_d178 = inttoptr i32 %v3_d178 to i8*
  store i8 %v5_cca0, i8* %v4_d178, align 1
  store i32 %v4_d17c, i32* %ip.global-to-local, align 4
  %v0_d180 = load i32, i32* %r1.global-to-local, align 4
  %v3_d180 = mul i32 %v0_d180, 32
  store i32 %v3_d180, i32* %r0.global-to-local, align 4
  %v2_d184 = load i32, i32* %r3.global-to-local, align 4
  %v3_d184 = add i32 %v2_d184, 8
  %v4_d184 = inttoptr i32 %v3_d184 to i8*
  store i8 %v5_ccd8, i8* %v4_d184, align 1
  %v0_d188 = load i32, i32* @sb, align 4
  %v1_d188 = load i32, i32* %r3.global-to-local, align 4
  %v2_d188 = add i32 %v1_d188, 12
  %v3_d188 = inttoptr i32 %v2_d188 to i32*
  store i32 %v0_d188, i32* %v3_d188, align 4
  %v0_d18c = load i32, i32* %r0.global-to-local, align 4
  %v1_d18c = load i32, i32* %r1.global-to-local, align 4
  %tmp56 = mul i32 %v1_d18c, -8
  %v5_d18c = add i32 %v0_d18c, %tmp56
  %v1_d190 = load i32, i32* @r7, align 4
  %v2_d190 = add i32 %v5_d18c, %v1_d190
  store i32 %v2_d190, i32* %r2.global-to-local, align 4
  %v1_d194 = add i32 %v2_d190, 16
  %v2_d194 = inttoptr i32 %v1_d194 to i32*
  %v3_d194 = load i32, i32* %v2_d194, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_d19c = load i32, i32* %r3.global-to-local, align 4
  %v2_d19c = add i32 %v1_d19c, 16
  %v3_d19c = inttoptr i32 %v2_d19c to i32*
  store i32 %v3_d194, i32* %v3_d19c, align 4
  store i32 64, i32* %r2.global-to-local, align 4
  %v0_d1a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d1a4 = add i32 %v0_d1a4, 1
  store i32 %v1_d1a4, i32* @r4, align 4
  %v0_d1a8 = load i32, i32* @r6, align 4
  %v1_d1a8 = trunc i32 %v0_d1a8 to i16
  %v2_d1a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1a8 = add i32 %v2_d1a8, 2
  %v4_d1a8 = inttoptr i32 %v3_d1a8 to i16*
  store i16 %v1_d1a8, i16* %v4_d1a8, align 2
  %v0_d1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_d1ac = add i32 %v0_d1ac, 20
  store i32 %v1_d1ac, i32* %r1.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r8, align 4
  %v1_d1b0 = trunc i32 %v0_d1b0 to i16
  %v3_d1b0 = add i32 %v0_d1ac, 4
  %v4_d1b0 = inttoptr i32 %v3_d1b0 to i16*
  store i16 %v1_d1b0, i16* %v4_d1b0, align 2
  %v0_d1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d1b4 = trunc i32 %v0_d1b4 to i16
  %v2_d1b4 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1b4 = add i32 %v2_d1b4, 6
  %v4_d1b4 = inttoptr i32 %v3_d1b4 to i16*
  store i16 %v1_d1b4, i16* %v4_d1b4, align 2
  %v0_d1b8 = load i32, i32* @sl, align 4
  %v1_d1b8 = trunc i32 %v0_d1b8 to i16
  %v2_d1b8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1b8 = add i32 %v2_d1b8, 20
  %v4_d1b8 = inttoptr i32 %v3_d1b8 to i16*
  store i16 %v1_d1b8, i16* %v4_d1b8, align 2
  store i32 %v4_d1bc, i32* %r3.global-to-local, align 4
  %v0_d1c0 = load i32, i32* @r4, align 4
  %v1_d1c0 = load i32, i32* %r0.global-to-local, align 4
  %v0_d1c4 = load i32, i32* @r5, align 4
  %v1_d1c4 = trunc i32 %v0_d1c4 to i16
  %v2_d1c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d1c4 = add i32 %v2_d1c4, 4
  %v4_d1c4 = inttoptr i32 %v3_d1c4 to i16*
  store i16 %v1_d1c4, i16* %v4_d1c4, align 2
  %v0_d1c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d1c8 = trunc i32 %v0_d1c8 to i16
  %v2_d1c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d1c8 = add i32 %v2_d1c8, 2
  %v4_d1c8 = inttoptr i32 %v3_d1c8 to i16*
  store i16 %v1_d1c8, i16* %v4_d1c8, align 2
  %v0_d1cc = load i32, i32* @r4, align 4
  store i32 %v0_d1cc, i32* %stack_var_-44, align 4
  %v5_d1d0 = icmp slt i32 %v0_d1c0, %v1_d1c0
  br i1 %v5_d1d0, label %dec_label_pc_d12c, label %dec_label_pc_cf44.preheader

dec_label_pc_d1d8:                                ; preds = %dec_label_pc_cfac, %dec_label_pc_cf44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d1dc = call i32 @function_12148(i32* null)
  store i32 %v2_d1dc, i32* %r0.global-to-local, align 4
  store i32 %v2_cd80, i32* %r3.global-to-local, align 4
  %v6_d1e8 = icmp slt i32 %v2_cd80, %v2_d1dc
  br i1 %v6_d1e8, label %dec_label_pc_d1ec, label %dec_label_pc_cf44

dec_label_pc_d1ec:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_cc3c, %dec_label_pc_d1f8
  %v1_d1f4 = phi i32 [ %v3_cd94, %dec_label_pc_cc3c ], [ %v1_d1fc, %dec_label_pc_d1f8 ], [ %v2_d1dc, %dec_label_pc_d1d8 ]
  store i32 %v27_cc3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_d1f4

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_cda4
  %v0_d1f8 = load i32, i32* @fp, align 4
  store i32 %v0_d1f8, i32* %r0.global-to-local, align 4
  %v1_d1fc = call i32 @function_124c8(i32 %v0_d1f8)
  store i32 %v1_d1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d1ec

; uselistorder directives
  uselistorder i32 %v1_d1fc, { 1, 0 }
  uselistorder i32 %v0_d0f8, { 1, 0 }
  uselistorder i32 %v0_d0e4, { 1, 0 }
  uselistorder i32 %v1_d0dc, { 1, 0 }
  uselistorder i32 %v5_d0a4, { 1, 0 }
  uselistorder i32 %v3_d058, { 2, 1, 3, 0 }
  uselistorder i32 %v1_d024, { 1, 2, 0, 3 }
  uselistorder i32 %v5_cfec, { 1, 0 }
  uselistorder i32 %v4_cfdc, { 1, 0 }
  uselistorder i32 %v0_cfcc, { 1, 0, 2 }
  uselistorder i32 %v2_cfbc, { 1, 0 }
  uselistorder i1 %v2_d100, { 1, 0 }
  uselistorder i32 %v1_cf04, { 1, 0 }
  uselistorder i16 %v5_ce94, { 1, 0 }
  uselistorder i32 %v3_ce80, { 1, 0 }
  uselistorder i32 %v3_ce7c, { 1, 0 }
  uselistorder i32 %v3_ce78, { 1, 0 }
  uselistorder i32 %v1_ce38, { 2, 3, 1, 0 }
  uselistorder i32 %v1_ce34, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v3_ce08, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_cdfc, { 1, 0 }
  uselistorder i32 %v0_cde8, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_cd94, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_cd80, { 1, 0 }
  uselistorder i32 %v1_cd5c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_cd1c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_cce8, { 1, 0 }
  uselistorder i8 %v5_ccd8, { 1, 0, 2 }
  uselistorder i32 %v6_ccbc, { 1, 0 }
  uselistorder i32 %v7_cca4, { 1, 0, 2 }
  uselistorder i32 %v6_cc80, { 1, 0 }
  uselistorder i32 %v2_cc68, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 8, 3, 4, 5, 6, 7, 10, 9, 12, 11, 14, 15, 13, 17, 16, 19, 18, 20, 22, 21, 29, 23, 24, 25, 26, 27, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 %arg2, { 2, 5, 4, 6, 0, 3, 1, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_d1ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d12c, { 1, 0 }
  uselistorder label %dec_label_pc_d10c, { 1, 0 }
  uselistorder label %dec_label_pc_cfac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cf44, { 1, 0 }
  uselistorder label %dec_label_pc_cea0, { 1, 0 }
  uselistorder label %bb40, { 1, 0 }
}

define i32 @function_d208(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d208:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_d208 = load i32, i32* @r4, align 4
  %v27_d208 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_d234 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_d238 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d240 = load i32, i32* @r7, align 4
  store i32 %v0_d240, i32* %r3.global-to-local, align 4
  store i32 %v2_d234, i32* @sb, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  %v4_d24c = inttoptr i32 %v0_d238 to i32*
  %v5_d24c = call i32 @function_9fe8(i32 %v0_d248, i32* %v4_d24c, i32 2, i32 %v0_d240)
  %v1_d258 = urem i32 %v5_d24c, 256
  store i32 %v1_d258, i32* %ip.global-to-local, align 4
  %v0_d25c = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d268 = load i32, i32* @r5, align 4
  %v5_d26c = trunc i32 %v5_d24c to i8
  %v6_d270 = inttoptr i32 %v0_d25c to i32*
  %v7_d270 = call i32 @function_9fe8(i32 %v0_d268, i32* %v6_d270, i32 3, i32 65535)
  %v0_d274 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d284 = load i32, i32* @r5, align 4
  %v5_d288 = inttoptr i32 %v0_d274 to i32*
  %v6_d288 = call i32 @function_9fe8(i32 %v0_d284, i32* %v5_d288, i32 4, i32 64)
  %v0_d290 = load i32, i32* @r4, align 4
  %v1_d294 = urem i32 %v6_d288, 256
  store i32 %v1_d294, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d29c = load i32, i32* @r7, align 4
  store i32 %v0_d29c, i32* %r3.global-to-local, align 4
  %v0_d2a0 = load i32, i32* @r5, align 4
  %v6_d2a8 = inttoptr i32 %v0_d290 to i32*
  %v7_d2a8 = call i32 @function_9fe8(i32 %v0_d2a0, i32* %v6_d2a8, i32 5, i32 %v0_d29c)
  %v1_d2b4 = urem i32 %v7_d2a8, 256
  store i32 %v1_d2b4, i32* %ip.global-to-local, align 4
  %v0_d2b8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r5, align 4
  %v5_d2cc = inttoptr i32 %v0_d2b8 to i32*
  %v6_d2cc = call i32 @function_9fe8(i32 %v0_d2c4, i32* %v5_d2cc, i32 6, i32 65535)
  %v0_d2d4 = load i32, i32* @r4, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d2e4 = load i32, i32* @r5, align 4
  %v5_d2e8 = inttoptr i32 %v0_d2d4 to i32*
  %v6_d2e8 = call i32 @function_9fe8(i32 %v0_d2e4, i32* %v5_d2e8, i32 7, i32 27015)
  store i32 %v6_d2e8, i32* @r4, align 4
  %v0_d2f0 = load i32, i32* @r7, align 4
  store i32 %v0_d2f0, i32* %stack_var_-48, align 4
  %v1_d2f8 = inttoptr i32 %v0_d2f0 to i32*
  %v2_d2f8 = call i32 @function_12148(i32* %v1_d2f8)
  %v1_d2fc = load i32, i32* @r6, align 4
  %v2_d2fc = add i32 %v1_d2fc, %v2_d2f8
  %v1_d308 = call i32 @function_10e40(i32 36)
  %v3_d314 = call i32 @function_10d7c(i32 36, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d328 = call i32 @function_12cd4(i32 2, i32 3, i32 17)
  %v7_d32c = icmp eq i32 %v3_d328, -1
  store i32 %v3_d328, i32* @sl, align 4
  br i1 %v7_d32c, label %dec_label_pc_d658, label %dec_label_pc_d338

dec_label_pc_d338:                                ; preds = %dec_label_pc_d208
  store i32 1, i32* %stack_var_-44, align 4
  %v6_d340 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_d340, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d348 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_d354 = call i32 @function_12c90(i32 %v3_d328, i32 %v0_d348, i32 3, i32 %v6_d340, i32 ptrtoint (i32* @0 to i32))
  %v7_d358 = icmp eq i32 %v5_d354, -1
  br i1 %v7_d358, label %dec_label_pc_d664, label %dec_label_pc_d360

dec_label_pc_d360:                                ; preds = %dec_label_pc_d338
  store i32 %v6_d2cc, i32* %r2.global-to-local, align 4
  %v0_d36c = load i32, i32* @r4, align 4
  %v3_d370 = mul i32 %v6_d2cc, 65536
  store i32 %v3_d370, i32* %ip.global-to-local, align 4
  %v3_d374 = urem i32 %v7_d270, 65536
  store i32 %v3_d374, i32* %r3.global-to-local, align 4
  %v3_d378 = urem i32 %v6_d2cc, 65536
  %v3_d37c = urem i32 %v0_d36c, 65536
  %v0_d380 = load i32, i32* @fp, align 4
  %v2_d380 = icmp eq i32 %v0_d380, 0
  %v0_d384 = load i32, i32* @r7, align 4
  store i32 %v0_d384, i32* %stack_var_-44, align 4
  br i1 %v2_d380, label %dec_label_pc_d4c4.preheader, label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d360
  %tmp39 = mul i32 %v7_d270, 256
  %v3_d3a0 = and i32 %tmp39, 65280
  store i32 %v3_d3a0, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v0_d36c, 256
  %v3_d3a4 = and i32 %tmp40, 65280
  %tmp41 = udiv i32 %v7_d270, 256
  %v4_d3ac = urem i32 %tmp41, 256
  %v5_d3ac = or i32 %v4_d3ac, %tmp39
  %tmp42 = udiv i32 %v0_d36c, 256
  %v4_d3b0 = urem i32 %tmp42, 256
  %v5_d3b0 = or i32 %v4_d3b0, %v3_d3a4
  store i32 %v5_d3b0, i32* @lr, align 4
  %tmp43 = mul i32 %v6_d2cc, 256
  %v3_d3b4 = and i32 %tmp43, 65280
  store i32 %v3_d3b4, i32* %r2.global-to-local, align 4
  %v5_d3b8 = trunc i32 %v5_d3ac to i16
  %tmp44 = udiv i32 %v6_d2cc, 256
  %v4_d3c0 = urem i32 %tmp44, 256
  %v5_d3c0 = or i32 %v4_d3c0, %v3_d3b4
  store i32 %v5_d3c0, i32* @r6, align 4
  store i32 %v0_d384, i32* @r4, align 4
  %sext5 = mul nuw i32 %v5_d3b0, 65536
  %v4_d490 = sdiv i32 %sext5, 65536
  %v1_d43c = trunc i32 %v6_d288 to i8
  br label %dec_label_pc_d3c8

dec_label_pc_d3c8:                                ; preds = %.thread, %dec_label_pc_d398
  %v2_d3d0 = call i32 @function_1383c(i32 128, i32 1)
  %v3_d3d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d3d4, i32* %r2.global-to-local, align 4
  %v1_d3d8 = load i32, i32* @sb, align 4
  %v2_d3d8 = load i32, i32* @r4, align 4
  %v5_d3d8 = mul i32 %v2_d3d8, 4
  %v6_d3d8 = add i32 %v5_d3d8, %v1_d3d8
  %v7_d3d8 = inttoptr i32 %v6_d3d8 to i32*
  store i32 %v2_d3d0, i32* %v7_d3d8, align 4
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v3_d3dc = mul i32 %v0_d3dc, 32
  store i32 %v3_d3dc, i32* %r3.global-to-local, align 4
  %v0_d3e0 = load i32, i32* @sb, align 4
  %v4_d3e0 = mul i32 %v0_d3dc, 4
  %v5_d3e0 = add i32 %v0_d3e0, %v4_d3e0
  %v6_d3e0 = inttoptr i32 %v5_d3e0 to i32*
  %v7_d3e0 = load i32, i32* %v6_d3e0, align 4
  store i32 %v7_d3e0, i32* @lr, align 4
  %v5_d3e4 = mul i32 %v0_d3dc, 24
  store i32 %v5_d3e4, i32* %r3.global-to-local, align 4
  %v1_d3e8 = load i32, i32* @r8, align 4
  %v2_d3e8 = add i32 %v1_d3e8, %v5_d3e4
  store i32 %v2_d3e8, i32* @r5, align 4
  %v1_d3ec = inttoptr i32 %v7_d3e0 to i8*
  %v2_d3ec = load i8, i8* %v1_d3ec, align 1
  %tmp = urem i8 %v2_d3ec, 16
  %v1_d3f0 = zext i8 %tmp to i32
  %v1_d3f4 = or i32 %v1_d3f0, 64
  store i32 %v1_d3f4, i32* %r3.global-to-local, align 4
  %v1_d3fc = trunc i32 %v1_d3f4 to i8
  store i8 %v1_d3fc, i8* %v1_d3ec, align 1
  %v0_d400 = load i32, i32* @lr, align 4
  %v1_d400 = inttoptr i32 %v0_d400 to i8*
  %v2_d400 = load i8, i8* %v1_d400, align 1
  %v1_d404 = and i8 %v2_d400, -16
  %v1_d408 = or i8 %v1_d404, 5
  store i8 %v1_d408, i8* %v1_d400, align 1
  %v2_d414 = load i32, i32* @lr, align 4
  %v3_d414 = add i32 %v2_d414, 1
  %v4_d414 = inttoptr i32 %v3_d414 to i8*
  store i8 %v5_d26c, i8* %v4_d414, align 1
  %v3_d418 = load i32, i32* %stack_var_-48, align 4
  %v3_d41c = mul i32 %v3_d418, 65536
  %v1_d420 = add i32 %v3_d41c, 2097152
  %v3_d424 = udiv i32 %v1_d420, 256
  %v1_d428 = and i32 %v3_d424, 65280
  %v4_d42c = udiv i32 %v1_d420, 16777216
  %v5_d42c = or i32 %v1_d428, %v4_d42c
  store i32 %v5_d42c, i32* %r3.global-to-local, align 4
  store i32 %v1_d2b4, i32* %r4.global-to-local, align 4
  %v3_d438 = urem i32 %v3_d418, 65536
  store i32 %v3_d438, i32* %r2.global-to-local, align 4
  %v2_d43c = load i32, i32* @lr, align 4
  %v3_d43c = add i32 %v2_d43c, 8
  %v4_d43c = inttoptr i32 %v3_d43c to i8*
  store i8 %v1_d43c, i8* %v4_d43c, align 1
  %v0_d440 = load i32, i32* %r3.global-to-local, align 4
  %v1_d440 = trunc i32 %v0_d440 to i16
  %v2_d440 = load i32, i32* @lr, align 4
  %v3_d440 = add i32 %v2_d440, 2
  %v4_d440 = inttoptr i32 %v3_d440 to i16*
  store i16 %v1_d440, i16* %v4_d440, align 2
  %v0_d444 = load i32, i32* %r2.global-to-local, align 4
  %v1_d444 = mul i32 %v0_d444, 65536
  %v3_d44c = add i32 %v1_d444, 786432
  store i32 %v3_d44c, i32* %r2.global-to-local, align 4
  %v2_d450 = load i32, i32* @lr, align 4
  %v3_d450 = add i32 %v2_d450, 4
  %v4_d450 = inttoptr i32 %v3_d450 to i16*
  store i16 %v5_d3b8, i16* %v4_d450, align 2
  %v0_d454 = load i32, i32* %r2.global-to-local, align 4
  %v3_d454 = udiv i32 %v0_d454, 256
  %v1_d458 = and i32 %v3_d454, 65280
  %v4_d45c = udiv i32 %v0_d454, 16777216
  %v5_d45c = or i32 %v1_d458, %v4_d45c
  store i32 %v5_d45c, i32* %ip.global-to-local, align 4
  %v2_d464 = load i32, i32* @lr, align 4
  %v3_d464 = add i32 %v2_d464, 9
  %v4_d464 = inttoptr i32 %v3_d464 to i8*
  store i8 17, i8* %v4_d464, align 1
  %v0_d468 = load i32, i32* %r4.global-to-local, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* %r3.global-to-local, align 4
  br i1 %v2_d468, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d3c8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_d474 = load i32, i32* @lr, align 4
  %v4_d474 = add i32 %v3_d474, 6
  %v5_d474 = inttoptr i32 %v4_d474 to i16*
  store i16 64, i16* %v5_d474, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d3c8, %bb
  %v2_d478 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_d478, i32* %r2.global-to-local, align 4
  %v1_d47c = load i32, i32* @lr, align 4
  %v2_d47c = add i32 %v1_d47c, 12
  %v3_d47c = inttoptr i32 %v2_d47c to i32*
  store i32 %v2_d478, i32* %v3_d47c, align 4
  %v0_d480 = load i32, i32* @r5, align 4
  %v1_d480 = add i32 %v0_d480, 16
  %v2_d480 = inttoptr i32 %v1_d480 to i32*
  %v3_d480 = load i32, i32* %v2_d480, align 4
  store i32 %v3_d480, i32* %r3.global-to-local, align 4
  %v0_d484 = load i32, i32* @lr, align 4
  %v1_d484 = add i32 %v0_d484, 20
  store i32 %v1_d484, i32* %r4.global-to-local, align 4
  %v0_d488 = load i32, i32* %ip.global-to-local, align 4
  %v1_d488 = trunc i32 %v0_d488 to i16
  %v3_d488 = add i32 %v0_d484, 24
  %v4_d488 = inttoptr i32 %v3_d488 to i16*
  store i16 %v1_d488, i16* %v4_d488, align 2
  %v0_d48c = load i32, i32* %r3.global-to-local, align 4
  %v1_d48c = load i32, i32* @lr, align 4
  %v2_d48c = add i32 %v1_d48c, 16
  %v3_d48c = inttoptr i32 %v2_d48c to i32*
  store i32 %v0_d48c, i32* %v3_d48c, align 4
  store i32 %v4_d490, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d498 = load i32, i32* @lr, align 4
  %v2_d498 = add i32 %v1_d498, 28
  %v3_d498 = inttoptr i32 %v2_d498 to i32*
  store i32 -1, i32* %v3_d498, align 4
  %v0_d49c = load i32, i32* %ip.global-to-local, align 4
  %v1_d49c = trunc i32 %v0_d49c to i16
  %v2_d49c = load i32, i32* %r4.global-to-local, align 4
  %v3_d49c = add i32 %v2_d49c, 2
  %v4_d49c = inttoptr i32 %v3_d49c to i16*
  store i16 %v1_d49c, i16* %v4_d49c, align 2
  %v0_d4a0 = load i32, i32* @lr, align 4
  %v1_d4a0 = add i32 %v0_d4a0, 32
  %v0_d4a4 = load i32, i32* @r6, align 4
  %v1_d4a4 = trunc i32 %v0_d4a4 to i16
  %v3_d4a4 = add i32 %v0_d4a0, 20
  %v4_d4a4 = inttoptr i32 %v3_d4a4 to i16*
  store i16 %v1_d4a4, i16* %v4_d4a4, align 2
  %v3_d4a8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d4a8, i32* %r2.global-to-local, align 4
  %v3_d4ac = call i32 @function_118d4(i32 %v1_d4a0, i32 %v3_d314, i32 %v3_d4a8)
  %v3_d4b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d4b0, i32* %r3.global-to-local, align 4
  %v1_d4b4 = add i32 %v3_d4b0, 1
  store i32 %v1_d4b4, i32* @r4, align 4
  %v1_d4b8 = load i32, i32* @fp, align 4
  store i32 %v1_d4b4, i32* %stack_var_-44, align 4
  %v5_d4c0 = icmp slt i32 %v1_d4b4, %v1_d4b8
  br i1 %v5_d4c0, label %dec_label_pc_d3c8, label %dec_label_pc_d4c4.preheader

dec_label_pc_d4c4.preheader:                      ; preds = %.thread, %dec_label_pc_d360
  %v0_d4c8.ph = phi i32 [ 0, %dec_label_pc_d360 ], [ %v1_d4b8, %.thread ]
  %v3_d4e0 = icmp eq i32 %v3_d374, 65535
  br label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d4c4.preheader, %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge
  %v0_d4c8 = phi i32 [ %v0_d4c8.pre, %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge ], [ %v0_d4c8.ph, %dec_label_pc_d4c4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d4c8 = icmp eq i32 %v0_d4c8, 0
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d4c8, label %dec_label_pc_d644, label %dec_label_pc_d4d4

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4c4
  br label %dec_label_pc_d588

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d588
  br i1 %v3_d4e0, label %dec_label_pc_d610, label %dec_label_pc_d4e8

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge, %dec_label_pc_d4dc
  %v1_d4ec = phi i32 [ %v1_d4ec.pre, %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge ], [ 65535, %dec_label_pc_d4dc ]
  store i32 %v3_d378, i32* %r2.global-to-local, align 4
  %v9_d4ec = icmp eq i32 %v3_d378, %v1_d4ec
  br i1 %v9_d4ec, label %dec_label_pc_d624, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge, %dec_label_pc_d4e8
  %v1_d4f8 = phi i32 [ %v1_d4f8.pre, %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge ], [ %v1_d4ec, %dec_label_pc_d4e8 ]
  store i32 %v3_d37c, i32* %r3.global-to-local, align 4
  %v9_d4f8 = icmp eq i32 %v3_d37c, %v1_d4f8
  br i1 %v9_d4f8, label %dec_label_pc_d638, label %dec_label_pc_d500

dec_label_pc_d500:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4f4, %dec_label_pc_d638
  store i32 0, i32* @r4, align 4
  %v2_d508 = load i32, i32* @r5, align 4
  %v3_d508 = add i32 %v2_d508, 10
  %v4_d508 = inttoptr i32 %v3_d508 to i16*
  store i16 0, i16* %v4_d508, align 2
  %v0_d50c = load i32, i32* @r5, align 4
  store i32 %v0_d50c, i32* @r0, align 4
  %v2_d510 = call i32 @function_dd58(i32 %v0_d50c, i32 20)
  %v3_d510 = trunc i32 %v2_d510 to i16
  %v3_d514 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d514, i32* %r3.global-to-local, align 4
  %v3_d518 = load i32, i32* @r5, align 4
  %v4_d518 = add i32 %v3_d518, 10
  %v5_d518 = inttoptr i32 %v4_d518 to i16*
  store i16 %v3_d510, i16* %v5_d518, align 2
  %v0_d51c = load i32, i32* @r6, align 4
  store i32 %v0_d51c, i32* @r1, align 4
  %v1_d520 = add i32 %v0_d51c, 4
  %v2_d520 = inttoptr i32 %v1_d520 to i16*
  %v3_d520 = load i16, i16* %v2_d520, align 2
  %v4_d520 = zext i16 %v3_d520 to i32
  store i32 %v4_d520, i32* %r2.global-to-local, align 4
  %v0_d524 = load i32, i32* @r4, align 4
  %v1_d524 = trunc i32 %v0_d524 to i16
  %v3_d524 = add i32 %v0_d51c, 6
  %v4_d524 = inttoptr i32 %v3_d524 to i16*
  store i16 %v1_d524, i16* %v4_d524, align 2
  %v0_d528 = load i32, i32* %r3.global-to-local, align 4
  %v1_d528 = add i32 %v0_d528, 12
  store i32 %v1_d528, i32* %r3.global-to-local, align 4
  %v0_d52c = load i32, i32* @r5, align 4
  %v4_d530 = call i32 @function_dda8(i32 %v0_d52c, i32 %v0_d51c, i32 %v4_d520, i32 %v1_d528)
  %v5_d530 = trunc i32 %v4_d530 to i16
  %v3_d534 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d534, i32* %r3.global-to-local, align 4
  %v3_d538 = mul i32 %v3_d534, 32
  store i32 %v3_d538, i32* %lr.global-to-local, align 4
  %v3_d53c = load i32, i32* @r6, align 4
  %v4_d53c = add i32 %v3_d53c, 6
  %v5_d53c = inttoptr i32 %v4_d53c to i16*
  store i16 %v5_d530, i16* %v5_d53c, align 2
  %v0_d540 = load i32, i32* %lr.global-to-local, align 4
  %v1_d540 = load i32, i32* %r3.global-to-local, align 4
  %tmp45 = mul i32 %v1_d540, -8
  %v5_d540 = add i32 %v0_d540, %tmp45
  store i32 %v5_d540, i32* %lr.global-to-local, align 4
  %v0_d544 = load i32, i32* @r6, align 4
  %v1_d544 = add i32 %v0_d544, 2
  %v2_d544 = inttoptr i32 %v1_d544 to i16*
  %v3_d544 = load i16, i16* %v2_d544, align 2
  %v3_d548 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d548, i32* %r2.global-to-local, align 4
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d540
  store i32 %v2_d54c, i32* @lr, align 4
  %v3_d550 = add i32 %v2_d54c, 2
  %v4_d550 = inttoptr i32 %v3_d550 to i16*
  store i16 %v3_d544, i16* %v4_d550, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_d55c = load i32, i32* @r5, align 4
  %v0_d560 = load i32, i32* %r2.global-to-local, align 4
  %v1_d560 = add i32 %v0_d560, 32
  store i32 %v1_d560, i32* %r2.global-to-local, align 4
  %v0_d564 = load i32, i32* @sl, align 4
  %v0_d568 = load i32, i32* @lr, align 4
  %v6_d570 = call i32 @function_12c50(i32 %v0_d564, i32 %v0_d55c, i32 %v1_d560, i32 16384, i32 %v0_d568, i32 16)
  %v3_d574 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d574, i32* %r3.global-to-local, align 4
  %v1_d578 = add i32 %v3_d574, 1
  %v1_d57c = load i32, i32* @fp, align 4
  store i32 %v1_d578, i32* %stack_var_-44, align 4
  %v6_d584 = icmp slt i32 %v1_d578, %v1_d57c
  br i1 %v6_d584, label %dec_label_pc_d588, label %dec_label_pc_d644

dec_label_pc_d588:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d4d4
  %v1_d598 = phi i32 [ %v1_d578, %dec_label_pc_d500 ], [ 0, %dec_label_pc_d4d4 ]
  %v5_d58c = mul i32 %v1_d598, 24
  %v1_d590 = load i32, i32* @r8, align 4
  %v2_d590 = add i32 %v1_d590, %v5_d58c
  store i32 %v2_d590, i32* %r3.global-to-local, align 4
  %v1_d594 = add i32 %v2_d590, 20
  %v2_d594 = inttoptr i32 %v1_d594 to i8*
  %v3_d594 = load i8, i8* %v2_d594, align 1
  %v4_d594 = zext i8 %v3_d594 to i32
  store i32 %v4_d594, i32* %r2.global-to-local, align 4
  %v0_d598 = load i32, i32* @sb, align 4
  %v4_d598 = mul i32 %v1_d598, 4
  %v5_d598 = add i32 %v0_d598, %v4_d598
  %v6_d598 = inttoptr i32 %v5_d598 to i32*
  %v7_d598 = load i32, i32* %v6_d598, align 4
  store i32 %v7_d598, i32* @r5, align 4
  store i32 65535, i32* @r7, align 4
  %v1_d5a8 = add i32 %v7_d598, 20
  store i32 %v1_d5a8, i32* @r6, align 4
  %tmp46 = icmp ugt i8 %v3_d594, 31
  br i1 %tmp46, label %dec_label_pc_d4dc, label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d588
  %v1_d5b0 = add i32 %v2_d590, 16
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i32*
  %v3_d5b0 = load i32, i32* %v2_d5b0, align 4
  store i32 %v3_d5b0, i32* %r4.global-to-local, align 4
  %v0_d5b4 = call i32 @function_f188()
  %v3_d5b8 = load i32, i32* %stack_var_-44, align 4
  %v5_d5c0 = mul i32 %v3_d5b8, 24
  %v1_d5c4 = and i32 %v3_d5b0, 16711680
  store i32 %v1_d5c4, i32* %ip.global-to-local, align 4
  %v3_d5c8 = udiv i32 %v3_d5b0, 16777216
  %v4_d5cc = udiv i32 %v1_d5c4, 256
  %v5_d5cc = or i32 %v4_d5cc, %v3_d5c8
  store i32 %v5_d5cc, i32* %r2.global-to-local, align 4
  %v1_d5d0 = load i32, i32* @r8, align 4
  %v2_d5d0 = add i32 %v1_d5d0, %v5_d5c0
  %v1_d5d4 = and i32 %v3_d5b0, 65280
  store i32 %v1_d5d4, i32* %r3.global-to-local, align 4
  %v1_d5d8 = add i32 %v2_d5d0, 20
  %v2_d5d8 = inttoptr i32 %v1_d5d8 to i8*
  %v3_d5d8 = load i8, i8* %v2_d5d8, align 1
  %v4_d5d8 = zext i8 %v3_d5d8 to i32
  store i32 %v4_d5d8, i32* %ip.global-to-local, align 4
  %v5_d5e0 = call i32 @llvm.bswap.i32(i32 %v3_d5b0)
  %v7_d5e4 = lshr i32 %v0_d5b4, %v4_d5d8
  %v8_d5e4 = add i32 %v7_d5e4, %v5_d5e0
  store i32 %v8_d5e4, i32* %r2.global-to-local, align 4
  %v5_d600 = call i32 @llvm.bswap.i32(i32 %v8_d5e4)
  store i32 %v5_d600, i32* %r3.global-to-local, align 4
  %v1_d604 = load i32, i32* @r7, align 4
  %v9_d604 = icmp eq i32 %v3_d374, %v1_d604
  %v1_d608 = load i32, i32* @r5, align 4
  %v2_d608 = add i32 %v1_d608, 16
  %v3_d608 = inttoptr i32 %v2_d608 to i32*
  store i32 %v5_d600, i32* %v3_d608, align 4
  br i1 %v9_d604, label %dec_label_pc_d610, label %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge

dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge:    ; preds = %dec_label_pc_d5b0
  %v1_d4ec.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d610:                                ; preds = %dec_label_pc_d5b0, %dec_label_pc_d4dc
  %v0_d610 = call i32 @function_f188()
  %v1_d610 = trunc i32 %v0_d610 to i16
  store i32 %v3_d378, i32* %r2.global-to-local, align 4
  %v1_d618 = load i32, i32* @r7, align 4
  %v9_d618 = icmp eq i32 %v3_d378, %v1_d618
  %v3_d61c = load i32, i32* @r5, align 4
  %v4_d61c = add i32 %v3_d61c, 4
  %v5_d61c = inttoptr i32 %v4_d61c to i16*
  store i16 %v1_d610, i16* %v5_d61c, align 2
  br i1 %v9_d618, label %dec_label_pc_d624, label %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge

dec_label_pc_d610.dec_label_pc_d4f4_crit_edge:    ; preds = %dec_label_pc_d610
  %v1_d4f8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4f4

dec_label_pc_d624:                                ; preds = %dec_label_pc_d610, %dec_label_pc_d4e8
  %v0_d624 = call i32 @function_f188()
  %v1_d624 = trunc i32 %v0_d624 to i16
  store i32 %v3_d37c, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r7, align 4
  %v9_d62c = icmp eq i32 %v3_d37c, %v1_d62c
  %v3_d630 = load i32, i32* @r5, align 4
  %v4_d630 = add i32 %v3_d630, 20
  %v5_d630 = inttoptr i32 %v4_d630 to i16*
  store i16 %v1_d624, i16* %v5_d630, align 2
  br i1 %v9_d62c, label %dec_label_pc_d638, label %dec_label_pc_d500

dec_label_pc_d638:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4f4
  %v0_d638 = call i32 @function_f188()
  %v1_d638 = trunc i32 %v0_d638 to i16
  %v3_d63c = load i32, i32* @r6, align 4
  %v4_d63c = add i32 %v3_d63c, 2
  %v5_d63c = inttoptr i32 %v4_d63c to i16*
  store i16 %v1_d638, i16* %v5_d63c, align 2
  br label %dec_label_pc_d500

dec_label_pc_d644:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d4c4
  %v2_d648 = call i32 @function_12148(i32* null)
  store i32 %v2_d2fc, i32* %ip.global-to-local, align 4
  %v6_d654 = icmp slt i32 %v2_d2fc, %v2_d648
  br i1 %v6_d654, label %dec_label_pc_d658, label %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge

dec_label_pc_d644.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d644
  %v0_d4c8.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d658:                                ; preds = %dec_label_pc_d644, %dec_label_pc_d208, %dec_label_pc_d664
  %v1_d660 = phi i32 [ %v3_d328, %dec_label_pc_d208 ], [ %v1_d668, %dec_label_pc_d664 ], [ %v2_d648, %dec_label_pc_d644 ]
  store i32 %v3_d208, i32* %r4.global-to-local, align 4
  store i32 %v27_d208, i32* %lr.global-to-local, align 4
  ret i32 %v1_d660

dec_label_pc_d664:                                ; preds = %dec_label_pc_d338
  %v0_d664 = load i32, i32* @sl, align 4
  %v1_d668 = call i32 @function_124c8(i32 %v0_d664)
  br label %dec_label_pc_d658

; uselistorder directives
  uselistorder i32 %v5_d600, { 1, 0 }
  uselistorder i32 %v3_d5b0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_d578, { 1, 2, 0 }
  uselistorder i32 %v5_d540, { 1, 0 }
  uselistorder i32 %v0_d51c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d4b4, { 1, 0, 2 }
  uselistorder i32 %v3_d418, { 1, 0 }
  uselistorder i32 %v0_d3dc, { 1, 2, 0 }
  uselistorder i32 %v3_d3b4, { 1, 0 }
  uselistorder i32 %v3_d374, { 0, 2, 1 }
  uselistorder i32 %v0_d36c, { 1, 0, 2 }
  uselistorder i32 %v3_d328, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d2fc, { 1, 0 }
  uselistorder i32 %v6_d2cc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_d2b4, { 1, 0 }
  uselistorder i32 %v6_d288, { 1, 0 }
  uselistorder i32 %v7_d270, { 1, 0, 2 }
  uselistorder i32 %v5_d24c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder label %dec_label_pc_d658, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d500, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d4c4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d674(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d674:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v9_d674 = load i32, i32* @r6, align 4
  %v18_d674 = load i32, i32* @sb, align 4
  %v27_d674 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_d6a4 = call i32 @function_1383c(i32 %arg2, i32 4)
  %v0_d6a8 = load i32, i32* @r4, align 4
  store i32 %v0_d6a8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d6b4 = load i32, i32* @sl, align 4
  store i32 %v0_d6b4, i32* %r3.global-to-local, align 4
  %v0_d6b8 = load i32, i32* @r5, align 4
  store i32 %v0_d6b8, i32* %r0.global-to-local, align 4
  %v5_d6bc = inttoptr i32 %v0_d6a8 to i32*
  %v6_d6bc = call i32 @function_9fe8(i32 %v0_d6b8, i32* %v5_d6bc, i32 2, i32 %v0_d6b4)
  %v1_d6c8 = urem i32 %v6_d6bc, 256
  store i32 %v1_d6c8, i32* %ip.global-to-local, align 4
  %v0_d6cc = load i32, i32* @r4, align 4
  store i32 %v0_d6cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6d8 = load i32, i32* @r5, align 4
  store i32 %v0_d6d8, i32* %r0.global-to-local, align 4
  %v6_d6e0 = inttoptr i32 %v0_d6cc to i32*
  %v7_d6e0 = call i32 @function_9fe8(i32 %v0_d6d8, i32* %v6_d6e0, i32 3, i32 65535)
  %v0_d6e4 = load i32, i32* @r4, align 4
  store i32 %v0_d6e4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d6f4 = load i32, i32* @r5, align 4
  store i32 %v0_d6f4, i32* %r0.global-to-local, align 4
  %v5_d6f8 = inttoptr i32 %v0_d6e4 to i32*
  %v6_d6f8 = call i32 @function_9fe8(i32 %v0_d6f4, i32* %v5_d6f8, i32 4, i32 64)
  %v0_d700 = load i32, i32* @r4, align 4
  store i32 %v0_d700, i32* %r1.global-to-local, align 4
  %v1_d704 = urem i32 %v6_d6f8, 256
  store i32 %v1_d704, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d70c = load i32, i32* @sl, align 4
  store i32 %v0_d70c, i32* %r3.global-to-local, align 4
  %v0_d710 = load i32, i32* @r5, align 4
  store i32 %v0_d710, i32* %r0.global-to-local, align 4
  %v6_d718 = inttoptr i32 %v0_d700 to i32*
  %v7_d718 = call i32 @function_9fe8(i32 %v0_d710, i32* %v6_d718, i32 5, i32 %v0_d70c)
  %v1_d724 = urem i32 %v7_d718, 256
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  %v0_d728 = load i32, i32* @r4, align 4
  store i32 %v0_d728, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d734 = load i32, i32* @r5, align 4
  store i32 %v0_d734, i32* %r0.global-to-local, align 4
  %v5_d73c = inttoptr i32 %v0_d728 to i32*
  %v6_d73c = call i32 @function_9fe8(i32 %v0_d734, i32* %v5_d73c, i32 6, i32 65535)
  %v0_d740 = load i32, i32* @r4, align 4
  store i32 %v0_d740, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_d750 = load i32, i32* @r5, align 4
  store i32 %v0_d750, i32* %r0.global-to-local, align 4
  %v5_d754 = inttoptr i32 %v0_d740 to i32*
  %v6_d754 = call i32 @function_9fe8(i32 %v0_d750, i32* %v5_d754, i32 7, i32 53)
  %v0_d75c = load i32, i32* @r4, align 4
  store i32 %v0_d75c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_d76c = load i32, i32* @r5, align 4
  store i32 %v0_d76c, i32* %r0.global-to-local, align 4
  %v5_d770 = inttoptr i32 %v0_d75c to i32*
  %v6_d770 = call i32 @function_9fe8(i32 %v0_d76c, i32* %v5_d770, i32 9, i32 65535)
  %v0_d774 = load i32, i32* @r4, align 4
  store i32 %v0_d774, i32* %r1.global-to-local, align 4
  %v0_d77c = load i32, i32* @sl, align 4
  store i32 %v0_d77c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r0.global-to-local, align 4
  %v5_d788 = inttoptr i32 %v0_d774 to i32*
  %v6_d788 = call i32 @function_9fe8(i32 %v0_d784, i32* %v5_d788, i32 %v0_d77c, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_d790 = load i32, i32* @sl, align 4
  store i32 %v0_d790, i32* %r3.global-to-local, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  store i32 %v0_d794, i32* %r1.global-to-local, align 4
  %v0_d79c = load i32, i32* @r5, align 4
  store i32 %v0_d79c, i32* %r0.global-to-local, align 4
  %v5_d7a0 = inttoptr i32 %v0_d794 to i32*
  %v6_d7a0 = call i32 @function_9f20(i32 %v0_d79c, i32* %v5_d7a0, i32 8, i32 %v0_d790, i32 %v6_d788)
  store i32 %v6_d7a0, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_d7ac = call i32 @function_10e40(i32 37)
  %v0_d7b0 = load i32, i32* @sl, align 4
  store i32 %v0_d7b0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_d7b8 = inttoptr i32 %v0_d7b0 to i32*
  %v3_d7b8 = call i32 @function_10d7c(i32 37, i32* %v2_d7b8)
  store i32 %v3_d7b8, i32* %r0.global-to-local, align 4
  %v0_d7bc = load i32, i32* @sl, align 4
  store i32 %v0_d7bc, i32* %r1.global-to-local, align 4
  %v2_d7c0 = call i32 @function_120d4(i32 %v3_d7b8, i32 %v0_d7bc)
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_d7cc = call i32 @function_10da0(i32 37)
  store i32 %v1_d7cc, i32* %r0.global-to-local, align 4
  %v0_d7d0 = load i32, i32* @r4, align 4
  %v1_d7d0 = load i32, i32* @sl, align 4
  %v9_d7d0 = icmp eq i32 %v0_d7d0, %v1_d7d0
  store i1 %v9_d7d0, i1* %cpsr_z.global-to-local, align 1
  %v5_d7d4 = icmp slt i32 %v0_d7d0, %v1_d7d0
  br i1 %v5_d7d4, label %dec_label_pc_d890, label %dec_label_pc_d7d8

dec_label_pc_d7d8:                                ; preds = %dec_label_pc_d674
  %v2_d7dc = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_d7dc, i32* %sb.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_d7dc, i32* %r1.global-to-local, align 4
  store i32 %v0_d7d0, i32* %r0.global-to-local, align 4
  %v1_d7ec = call i32 @function_12260(i32 %v0_d7d0)
  store i32 %v1_d7ec, i32* @r6, align 4
  %v0_d7f4 = load i32, i32* @r4, align 4
  store i32 %v0_d7f4, i32* %r0.global-to-local, align 4
  %v1_d7f8 = call i32 @function_124c8(i32 %v0_d7f4)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_d800 = call i32 @function_10e40(i32 38)
  %v0_d804 = load i32, i32* @sl, align 4
  store i32 %v0_d804, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_d80c = inttoptr i32 %v0_d804 to i32*
  %v3_d80c = call i32 @function_10d7c(i32 38, i32* %v2_d80c)
  %v0_d810 = load i32, i32* @r6, align 4
  store i32 %v0_d810, i32* @r1, align 4
  store i32 %v3_d80c, i32* %r2.global-to-local, align 4
  store i32 %v2_d7dc, i32* %r0.global-to-local, align 4
  %v3_d81c = bitcast i32* %stack_var_-2124 to i8*
  %v4_d81c = call i32 @function_11bb4(i8* %v3_d81c, i32 %v0_d810, i32 %v3_d80c)
  store i32 %v4_d81c, i32* @r8, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_d828 = call i32 @function_10da0(i32 38)
  store i32 %v1_d828, i32* %r0.global-to-local, align 4
  %v0_d82c = load i32, i32* @r8, align 4
  %v7_d82c = icmp eq i32 %v0_d82c, -1
  store i1 %v7_d82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d82c, label %dec_label_pc_d890, label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7d8
  %v0_d834 = load i32, i32* @r6, align 4
  %v9_d834 = icmp eq i32 %v0_d834, %v0_d82c
  store i1 %v9_d834, i1* %cpsr_z.global-to-local, align 1
  %v7_d838 = icmp sgt i32 %v0_d834, %v0_d82c
  br i1 %v7_d838, label %dec_label_pc_d83c, label %dec_label_pc_d890

dec_label_pc_d83c:                                ; preds = %dec_label_pc_d834
  %v0_d83c = load i32, i32* @sl, align 4
  store i32 %v0_d83c, i32* %r1.global-to-local, align 4
  %v0_d840 = load i32, i32* %sb.global-to-local, align 4
  %v2_d840 = add i32 %v0_d840, %v0_d82c
  store i32 %v2_d840, i32* %ip.global-to-local, align 4
  %v1_d850 = add i32 %v0_d834, -1
  br label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %dec_label_pc_d884, %dec_label_pc_d83c
  %v0_d884 = phi i32 [ %v1_d884, %dec_label_pc_d884 ], [ %v0_d82c, %dec_label_pc_d83c ]
  %v0_d86c = phi i32 [ %v0_d86c27, %dec_label_pc_d884 ], [ %v0_d83c, %dec_label_pc_d83c ]
  %v0_d84c = phi i32 [ %v0_d84c23, %dec_label_pc_d884 ], [ %v0_d83c, %dec_label_pc_d83c ]
  %v0_d854 = phi i32 [ %v1_d854, %dec_label_pc_d884 ], [ %v2_d840, %dec_label_pc_d83c ]
  %v1_d848 = inttoptr i32 %v0_d854 to i8*
  %v2_d848 = load i8, i8* %v1_d848, align 1
  %v3_d848 = zext i8 %v2_d848 to i32
  store i32 %v3_d848, i32* %r0.global-to-local, align 4
  %v2_d84c = icmp eq i32 %v0_d84c, 0
  store i1 %v2_d84c, i1* %cpsr_z.global-to-local, align 1
  %v1_d854 = add i32 %v0_d854, 1
  store i32 %v1_d854, i32* %ip.global-to-local, align 4
  %v1_d858 = add nsw i32 %v3_d848, -48
  store i32 %v1_d858, i32* @lr, align 4
  br i1 %v2_d84c, label %dec_label_pc_d860, label %dec_label_pc_d870

dec_label_pc_d860:                                ; preds = %dec_label_pc_d848
  %v7_d860 = icmp eq i8 %v2_d848, 9
  store i1 %v7_d860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d860, label %dec_label_pc_d884, label %bb

bb:                                               ; preds = %dec_label_pc_d860
  %v8_d864 = icmp eq i8 %v2_d848, 32
  store i1 %v8_d864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d864, label %dec_label_pc_d884, label %dec_label_pc_d86c

dec_label_pc_d86c:                                ; preds = %bb
  %v1_d86c = add i32 %v0_d86c, 1
  store i32 %v1_d86c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d870

dec_label_pc_d870:                                ; preds = %dec_label_pc_d848, %dec_label_pc_d86c
  %v0_d86c28 = phi i32 [ %v0_d86c, %dec_label_pc_d848 ], [ %v1_d86c, %dec_label_pc_d86c ]
  %v0_d84c24 = phi i32 [ %v0_d84c, %dec_label_pc_d848 ], [ %v1_d86c, %dec_label_pc_d86c ]
  %v7_d870 = icmp eq i8 %v2_d848, 46
  store i1 %v7_d870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d870, label %dec_label_pc_d87c, label %bb113

bb113:                                            ; preds = %dec_label_pc_d870
  %v3_d874 = icmp ugt i32 %v1_d858, 8
  %v8_d874 = icmp eq i32 %v1_d858, 9
  store i1 %v8_d874, i1* %cpsr_z.global-to-local, align 1
  %v2_d878 = xor i1 %v8_d874, true
  %v3_d878 = and i1 %v3_d874, %v2_d878
  br i1 %v3_d878, label %dec_label_pc_dce4, label %dec_label_pc_d87c

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d870, %bb113
  %v9_d87c = icmp eq i32 %v1_d850, %v0_d884
  store i1 %v9_d87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d87c, label %dec_label_pc_dce4, label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %dec_label_pc_d860, %dec_label_pc_d87c, %bb
  %v0_d86c27 = phi i32 [ %v0_d86c, %dec_label_pc_d860 ], [ %v0_d86c28, %dec_label_pc_d87c ], [ %v0_d86c, %bb ]
  %v0_d84c23 = phi i32 [ 0, %dec_label_pc_d860 ], [ %v0_d84c24, %dec_label_pc_d87c ], [ 0, %bb ]
  %v1_d884 = add i32 %v0_d884, 1
  %v9_d888 = icmp eq i32 %v1_d884, %v0_d834
  store i1 %v9_d888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d888, label %dec_label_pc_d890, label %dec_label_pc_d848

dec_label_pc_d890:                                ; preds = %dec_label_pc_d884, %dec_label_pc_d834, %dec_label_pc_d7d8, %dec_label_pc_d674
  %v0_d890 = call i32 @function_f188()
  %v1_d894 = urem i32 %v0_d890, 4
  store i32 %v1_d894, i32* %r0.global-to-local, align 4
  %v2_d898 = icmp eq i32 %v1_d894, 3
  store i1 %v2_d898, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d890 to i2
  switch i2 %trunc, label %dec_label_pc_d8c410 [
    i2 0, label %dec_label_pc_dd30
    i2 1, label %dec_label_pc_dd44
    i2 -2, label %dec_label_pc_dd20
    i2 -1, label %dec_label_pc_d8b4
  ]

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d890
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_d8c410:                              ; preds = %dec_label_pc_d890
  unreachable

dec_label_pc_d8c4:                                ; preds = %dec_label_pc_dd44, %dec_label_pc_dd30, %dec_label_pc_dd20, %dec_label_pc_dce4, %dec_label_pc_d8b4
  %stack_var_-2184.0 = phi i32 [ 33686020, %dec_label_pc_d8b4 ], [ 104859200, %dec_label_pc_dd20 ], [ 707416650, %dec_label_pc_dd44 ], [ 134744072, %dec_label_pc_dd30 ], [ %v1_dd14, %dec_label_pc_dce4 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d8c8 = call i32 @function_12148(i32* null)
  %v0_d8cc = load i32, i32* @r7, align 4
  %v2_d8cc = icmp eq i32 %v0_d8cc, 0
  store i1 %v2_d8cc, i1* %cpsr_z.global-to-local, align 1
  %v1_d8d0 = load i32, i32* @fp, align 4
  %v2_d8d0 = add i32 %v1_d8d0, %v2_d8c8
  store i32 %v2_d8d0, i32* %r0.global-to-local, align 4
  br i1 %v2_d8cc, label %dec_label_pc_dcbc, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8c4
  store i32 %v0_d8cc, i32* %r0.global-to-local, align 4
  %v1_d8e0 = inttoptr i32 %v0_d8cc to i8*
  %v2_d8e0 = call i32 @function_11864(i8* %v1_d8e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d8f4 = call i32 @function_12cd4(i32 2, i32 3, i32 17)
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v7_d8f8 = icmp eq i32 %v3_d8f4, -1
  store i1 %v7_d8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8f8, label %dec_label_pc_dcbc, label %dec_label_pc_d904

dec_label_pc_d904:                                ; preds = %dec_label_pc_d8dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_d90c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_d90c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_d920 = call i32 @function_12c90(i32 %v3_d8f4, i32 0, i32 3, i32 %v6_d90c, i32 4)
  store i32 %v5_d920, i32* %r0.global-to-local, align 4
  %v7_d924 = icmp eq i32 %v5_d920, -1
  store i1 %v7_d924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d924, label %dec_label_pc_dcb4, label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d904
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_d940 = mul i32 %v7_d6e0, 65536
  store i32 %v3_d940, i32* %r6.global-to-local, align 4
  %v3_d948 = mul i32 %v6_d754, 65536
  store i32 %v3_d948, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_d958 = urem i32 %v7_d6e0, 65536
  %v3_d95c = urem i32 %v6_d73c, 65536
  store i32 %v3_d95c, i32* %r0.global-to-local, align 4
  %v3_d960 = urem i32 %v6_d754, 65536
  store i32 %v3_d960, i32* %r1.global-to-local, align 4
  %v3_d964 = urem i32 %v6_d770, 65536
  store i32 %v3_d964, i32* %r2.global-to-local, align 4
  %v2_d968 = icmp eq i32 %arg2, 0
  store i1 %v2_d968, i1* %cpsr_z.global-to-local, align 1
  %v1_d96c = urem i32 %v6_d788, 256
  store i32 %v1_d96c, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d968, label %dec_label_pc_dccc.critedge, label %dec_label_pc_d988

dec_label_pc_d988:                                ; preds = %dec_label_pc_d92c
  %v3_d93c = mul i32 %v6_d770, 65536
  %v2_d994 = add i32 %v2_d8e0, %v1_d96c
  %v3_d998 = mul i32 %v2_d994, 65536
  %v1_d9a4 = add i32 %v3_d998, 1769472
  %tmp114 = mul nuw nsw i32 %v3_d960, 256
  %v3_d9a8 = and i32 %tmp114, 65280
  %v1_d9ac = add i32 %v3_d998, 3080192
  %tmp115 = udiv i32 %v6_d754, 256
  %v4_d9bc = urem i32 %tmp115, 256
  %v5_d9bc = or i32 %v3_d9a8, %v4_d9bc
  store i32 %v5_d9bc, i32* @sb, align 4
  store i32 %v3_d93c, i32* %ip.global-to-local, align 4
  %tmp116 = udiv i32 %v1_d9a4, 256
  %v3_d9c4 = and i32 %tmp116, 65280
  %tmp117 = udiv i32 %v1_d9ac, 256
  %v3_d9c8 = and i32 %tmp117, 65280
  store i32 %v3_d9c8, i32* %r2.global-to-local, align 4
  %tmp118 = mul i32 %v6_d770, 256
  %v3_d9cc = and i32 %tmp118, 65280
  %v4_d9d0 = udiv i32 %v1_d9a4, 16777216
  %v5_d9d0 = or i32 %v3_d9c4, %v4_d9d0
  store i32 %v5_d9d0, i32* @fp, align 4
  %tmp119 = mul i32 %v7_d6e0, 256
  %v3_d9d8 = and i32 %tmp119, 65280
  store i32 %v3_d9d8, i32* %r1.global-to-local, align 4
  %v4_d9dc = udiv i32 %v1_d9ac, 16777216
  %v5_d9dc = or i32 %v3_d9c8, %v4_d9dc
  store i32 %v5_d9dc, i32* %r3.global-to-local, align 4
  %tmp120 = udiv i32 %v6_d770, 256
  %v4_d9e0 = urem i32 %tmp120, 256
  %v5_d9e0 = or i32 %v4_d9e0, %v3_d9cc
  store i32 %v5_d9e0, i32* @r4, align 4
  store i32 %v2_d8e0, i32* @lr, align 4
  %tmp121 = udiv i32 %v7_d6e0, 256
  %v4_d9e8 = urem i32 %tmp121, 256
  %v5_d9e8 = or i32 %v4_d9e8, %v3_d9d8
  %tmp122 = mul i32 %v6_d73c, 256
  %v3_d9ec = and i32 %tmp122, 65280
  store i32 %v3_d9ec, i32* %r0.global-to-local, align 4
  %tmp123 = udiv i32 %v6_d73c, 256
  %v4_d9fc = urem i32 %tmp123, 256
  %v5_d9fc = or i32 %v4_d9fc, %v3_d9ec
  store i32 %v5_d9fc, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_da04 = add i32 %v2_d8e0, 1
  store i32 %v1_da04, i32* @r6, align 4
  %v1_da4c = trunc i32 %v6_d6bc to i8
  %sext = mul i32 %v6_d6f8, 16777216
  %v4_da50 = sdiv i32 %sext, 16777216
  %sext6 = mul nuw i32 %v5_d9dc, 65536
  %v4_da58 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_d9e8, 65536
  %v4_da5c = sdiv i32 %sext7, 65536
  %sext8 = mul nuw i32 %v5_d9e0, 65536
  %v4_dab8 = sdiv i32 %sext8, 65536
  %v2_dadc = icmp eq i32 %v2_d8e0, 0
  %tmp124 = icmp slt i32 %v2_d8e0, 1
  %v1_da64 = trunc i32 %v4_da50 to i8
  br label %dec_label_pc_da08

dec_label_pc_da08:                                ; preds = %dec_label_pc_db28, %dec_label_pc_d988
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_da10 = call i32 @function_1383c(i32 600, i32 1)
  store i32 %v2_da10, i32* %r0.global-to-local, align 4
  store i32 %v2_d6a4, i32* %r1.global-to-local, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da18, i32* %r3.global-to-local, align 4
  %v2_da1c = load i32, i32* @r5, align 4
  %v5_da1c = mul i32 %v2_da1c, 4
  %v6_da1c = add i32 %v5_da1c, %v2_d6a4
  %v7_da1c = inttoptr i32 %v6_da1c to i32*
  store i32 %v2_da10, i32* %v7_da1c, align 4
  %v0_da20 = load i32, i32* %r1.global-to-local, align 4
  %v1_da20 = load i32, i32* %r3.global-to-local, align 4
  %v4_da20 = mul i32 %v1_da20, 4
  %v5_da20 = add i32 %v4_da20, %v0_da20
  %v6_da20 = inttoptr i32 %v5_da20 to i32*
  %v7_da20 = load i32, i32* %v6_da20, align 4
  store i32 %v7_da20, i32* %r1.global-to-local, align 4
  %v1_da24 = inttoptr i32 %v7_da20 to i8*
  %v2_da24 = load i8, i8* %v1_da24, align 1
  %tmp = urem i8 %v2_da24, 16
  %v1_da28 = zext i8 %tmp to i32
  %v1_da2c = or i32 %v1_da28, 64
  store i32 %v1_da2c, i32* %r2.global-to-local, align 4
  %v1_da30 = trunc i32 %v1_da2c to i8
  store i8 %v1_da30, i8* %v1_da24, align 1
  %v0_da34 = load i32, i32* %r1.global-to-local, align 4
  %v1_da34 = inttoptr i32 %v0_da34 to i8*
  %v2_da34 = load i8, i8* %v1_da34, align 1
  %v1_da38 = and i8 %v2_da34, -16
  %v1_da3c = or i8 %v1_da38, 5
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  store i8 %v1_da3c, i8* %v1_da34, align 1
  store i32 %v1_d6c8, i32* %lr.global-to-local, align 4
  %v2_da4c = load i32, i32* %r1.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 1
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  store i32 %v4_da50, i32* %r3.global-to-local, align 4
  %v0_da54 = load i32, i32* %ip.global-to-local, align 4
  %v2_da54 = icmp eq i32 %v0_da54, 0
  store i1 %v2_da54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_da58, i32* %r0.global-to-local, align 4
  store i32 %v4_da5c, i32* %r2.global-to-local, align 4
  br i1 %v2_da54, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_da08
  store i32 64, i32* %lr.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_da08, %bb125
  %v2_da64 = load i32, i32* %r1.global-to-local, align 4
  %v3_da64 = add i32 %v2_da64, 8
  %v4_da64 = inttoptr i32 %v3_da64 to i8*
  store i8 %v1_da64, i8* %v4_da64, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_da6c = load i32, i32* %r1.global-to-local, align 4
  %v3_da6c = add i32 %v2_da6c, 9
  %v4_da6c = inttoptr i32 %v3_da6c to i8*
  store i8 17, i8* %v4_da6c, align 1
  %v0_da70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da70, label %bb128, label %bb127

bb127:                                            ; preds = %bb126
  %v1_da70 = load i32, i32* %lr.global-to-local, align 4
  %v2_da70 = trunc i32 %v1_da70 to i16
  %v3_da70 = load i32, i32* %r1.global-to-local, align 4
  %v4_da70 = add i32 %v3_da70, 6
  %v5_da70 = inttoptr i32 %v4_da70 to i16*
  store i16 %v2_da70, i16* %v5_da70, align 2
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* @lr, align 4
  %v0_da78 = load i32, i32* %r0.global-to-local, align 4
  %v1_da78 = trunc i32 %v0_da78 to i16
  %v2_da78 = load i32, i32* %r1.global-to-local, align 4
  %v3_da78 = add i32 %v2_da78, 2
  %v4_da78 = inttoptr i32 %v3_da78 to i16*
  store i16 %v1_da78, i16* %v4_da78, align 2
  %v0_da7c = load i32, i32* %r2.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i16
  %v2_da7c = load i32, i32* %r1.global-to-local, align 4
  %v3_da7c = add i32 %v2_da7c, 4
  %v4_da7c = inttoptr i32 %v3_da7c to i16*
  store i16 %v1_da7c, i16* %v4_da7c, align 2
  %v2_da80 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_da80, i32* %r3.global-to-local, align 4
  %v0_da84 = load i32, i32* %r1.global-to-local, align 4
  %v1_da84 = add i32 %v0_da84, 20
  store i32 %v1_da84, i32* %r0.global-to-local, align 4
  %v1_da88 = add i32 %v0_da84, 41
  store i32 %v1_da88, i32* %r2.global-to-local, align 4
  %v0_da8c = load i32, i32* @fp, align 4
  %v1_da8c = trunc i32 %v0_da8c to i16
  %v3_da8c = add i32 %v0_da84, 24
  %v4_da8c = inttoptr i32 %v3_da8c to i16*
  store i16 %v1_da8c, i16* %v4_da8c, align 2
  %v0_da90 = load i32, i32* @sb, align 4
  %v1_da90 = trunc i32 %v0_da90 to i16
  %v2_da90 = load i32, i32* %r0.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 2
  %v4_da90 = inttoptr i32 %v3_da90 to i16*
  store i16 %v1_da90, i16* %v4_da90, align 2
  %v0_da94 = load i32, i32* %r1.global-to-local, align 4
  %v1_da94 = add i32 %v0_da94, 28
  store i32 %v1_da94, i32* %ip.global-to-local, align 4
  %v0_da98 = load i32, i32* %r2.global-to-local, align 4
  %v1_da98 = load i32, i32* @sl, align 4
  %v2_da98 = add i32 %v1_da98, %v0_da98
  store i32 %v2_da98, i32* @r4, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_daa4 = load i32, i32* @r8, align 4
  %v1_daa4 = trunc i32 %v0_daa4 to i16
  %v3_daa4 = add i32 %v0_da94, 20
  %v4_daa4 = inttoptr i32 %v3_daa4 to i16*
  store i16 %v1_daa4, i16* %v4_daa4, align 2
  %v0_daa8 = load i32, i32* %r3.global-to-local, align 4
  %v1_daa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_daa8 = add i32 %v1_daa8, 12
  %v3_daa8 = inttoptr i32 %v2_daa8 to i32*
  store i32 %v0_daa8, i32* %v3_daa8, align 4
  %v0_daac = load i32, i32* %r0.global-to-local, align 4
  %v1_daac = trunc i32 %v0_daac to i16
  %v2_daac = load i32, i32* %ip.global-to-local, align 4
  %v3_daac = add i32 %v2_daac, 4
  %v4_daac = inttoptr i32 %v3_daac to i16*
  store i16 %v1_daac, i16* %v4_daac, align 2
  %v0_dab0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dab0 = trunc i32 %v0_dab0 to i16
  %v2_dab0 = load i32, i32* %ip.global-to-local, align 4
  %v3_dab0 = add i32 %v2_dab0, 2
  %v4_dab0 = inttoptr i32 %v3_dab0 to i16*
  store i16 %v1_dab0, i16* %v4_dab0, align 2
  store i32 %stack_var_-2184.0, i32* %r3.global-to-local, align 4
  store i32 %v4_dab8, i32* %ip.global-to-local, align 4
  %v1_dabc = load i32, i32* %r1.global-to-local, align 4
  %v2_dabc = add i32 %v1_dabc, 16
  %v3_dabc = inttoptr i32 %v2_dabc to i32*
  store i32 %stack_var_-2184.0, i32* %v3_dabc, align 4
  %v0_dac0 = load i32, i32* %ip.global-to-local, align 4
  %v1_dac0 = trunc i32 %v0_dac0 to i16
  %v2_dac0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dac0 = add i32 %v2_dac0, 28
  %v4_dac0 = inttoptr i32 %v3_dac0 to i16*
  store i16 %v1_dac0, i16* %v4_dac0, align 2
  %v0_dac4 = load i32, i32* @sl, align 4
  %v1_dac4 = trunc i32 %v0_dac4 to i8
  %v2_dac4 = load i32, i32* %r1.global-to-local, align 4
  %v3_dac4 = add i32 %v2_dac4, 40
  %v4_dac4 = inttoptr i32 %v3_dac4 to i8*
  store i8 %v1_dac4, i8* %v4_dac4, align 1
  %v0_dac8 = load i32, i32* @r4, align 4
  %v1_dac8 = add i32 %v0_dac8, 1
  store i32 %v1_dac8, i32* %r0.global-to-local, align 4
  %v0_dacc = load i32, i32* @r7, align 4
  store i32 %v0_dacc, i32* %r1.global-to-local, align 4
  %v0_dad0 = load i32, i32* @r6, align 4
  store i32 %v0_dad0, i32* %r2.global-to-local, align 4
  %v3_dad4 = call i32 @function_118d4(i32 %v1_dac8, i32 %v0_dacc, i32 %v0_dad0)
  store i32 %v3_dad4, i32* %r0.global-to-local, align 4
  store i32 %v2_d8e0, i32* %lr.global-to-local, align 4
  store i1 %v2_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp124, label %.dec_label_pc_db28_crit_edge, label %dec_label_pc_daec

.dec_label_pc_db28_crit_edge:                     ; preds = %bb128
  %v5_dae0 = load i32, i32* @r4, align 4
  store i32 %v5_dae0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_db28

dec_label_pc_daec:                                ; preds = %bb128
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_daf0 = load i32, i32* @r4, align 4
  store i32 %v0_daf0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_daf8

dec_label_pc_daf8:                                ; preds = %.thread21, %dec_label_pc_daec
  %v1_db00 = phi i32 [ %v1_db0035, %.thread21 ], [ 0, %dec_label_pc_daec ]
  %v0_db1419 = phi i32 [ %v0_db20, %.thread21 ], [ 0, %dec_label_pc_daec ]
  %v1_daf8 = load i32, i32* @r7, align 4
  %v2_daf8 = add i32 %v1_daf8, %v0_db1419
  %v3_daf8 = inttoptr i32 %v2_daf8 to i8*
  %v4_daf8 = load i8, i8* %v3_daf8, align 1
  %v6_daf8 = zext i8 %v4_daf8 to i32
  store i32 %v6_daf8, i32* %r3.global-to-local, align 4
  %v7_dafc = icmp eq i8 %v4_daf8, 46
  store i1 %v7_dafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dafc, label %bb129, label %bb131

bb129:                                            ; preds = %dec_label_pc_daf8
  %v2_db00 = trunc i32 %v1_db00 to i8
  %v3_db00 = load i32, i32* %r0.global-to-local, align 4
  %v4_db00 = inttoptr i32 %v3_db00 to i8*
  store i8 %v2_db00, i8* %v4_db00, align 1
  %v0_db08.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_db04 = load i32, i32* %ip.global-to-local, align 4
  %v1_db04 = add i32 %v0_db04, 1
  store i32 %v1_db04, i32* %r2.global-to-local, align 4
  br i1 %v0_db08.pr, label %bb132, label %bb130

bb130:                                            ; preds = %bb129
  %v2_db0817 = urem i32 %v1_db04, 256
  store i32 %v2_db0817, i32* %ip.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v0_db14.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_db14 = add i32 %v0_db14.pre, 1
  store i32 %v1_db14, i32* %r1.global-to-local, align 4
  br label %.thread21

bb131:                                            ; preds = %dec_label_pc_daf8
  %v1_db0413 = add nsw i32 %v1_db00, 1
  %v2_db08 = urem i32 %v1_db0413, 256
  store i32 %v2_db08, i32* %ip.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v1_db1420 = add i32 %v0_db1419, 1
  store i32 %v1_db1420, i32* %r1.global-to-local, align 4
  br label %.thread21

bb132:                                            ; preds = %bb129
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v1_db10.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_db10 = load i32, i32* @r4, align 4
  %v3_db10 = add i32 %v2_db10, %v1_db10.pre
  store i32 %v3_db10, i32* %r3.global-to-local, align 4
  %v1_db1465 = add i32 %v1_db10.pre, 1
  store i32 %v1_db1465, i32* %r1.global-to-local, align 4
  %v2_db18 = add i32 %v3_db10, 1
  store i32 %v2_db18, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread21

.thread21:                                        ; preds = %bb131, %bb130, %bb132
  %v0_db20 = phi i32 [ %v1_db14, %bb130 ], [ %v1_db1420, %bb131 ], [ %v1_db1465, %bb132 ]
  %v1_db0035 = phi i32 [ %v2_db0817, %bb130 ], [ %v2_db08, %bb131 ], [ 0, %bb132 ]
  %v9_db20 = icmp eq i32 %v0_db20, %v2_d8e0
  store i1 %v9_db20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db20, label %dec_label_pc_db28.loopexit, label %dec_label_pc_daf8

dec_label_pc_db28.loopexit:                       ; preds = %.thread21
  %v2_db28.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_db0035 to i8
  br label %dec_label_pc_db28

dec_label_pc_db28:                                ; preds = %.dec_label_pc_db28_crit_edge, %dec_label_pc_db28.loopexit
  %v0_db28.pre.sink.off0 = phi i8 [ 0, %.dec_label_pc_db28_crit_edge ], [ %extract.t71, %dec_label_pc_db28.loopexit ]
  %v2_db28 = phi i32 [ %v5_dae0, %.dec_label_pc_db28_crit_edge ], [ %v2_db28.pre, %dec_label_pc_db28.loopexit ]
  %v3_db28 = inttoptr i32 %v2_db28 to i8*
  store i8 %v0_db28.pre.sink.off0, i8* %v3_db28, align 1
  %v3_db2c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_db34 = add i32 %v3_db2c, 1
  store i32 %v1_db34, i32* @r5, align 4
  store i32 %v2_d8e0, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_db40 = load i32, i32* @r4, align 4
  %v2_db40 = add i32 %v0_db40, %v2_d8e0
  store i32 %v2_db40, i32* %r2.global-to-local, align 4
  %v9_db44 = icmp eq i32 %v1_db34, %arg2
  store i1 %v9_db44, i1* %cpsr_z.global-to-local, align 1
  %v3_db48 = add i32 %v2_db40, 4
  %v4_db48 = inttoptr i32 %v3_db48 to i16*
  store i16 256, i16* %v4_db48, align 2
  %v0_db4c = load i32, i32* @lr, align 4
  %v1_db4c = trunc i32 %v0_db4c to i16
  %v2_db4c = load i32, i32* %r2.global-to-local, align 4
  %v3_db4c = add i32 %v2_db4c, 2
  %v4_db4c = inttoptr i32 %v3_db4c to i16*
  store i16 %v1_db4c, i16* %v4_db4c, align 2
  %v0_db50 = load i32, i32* @r5, align 4
  store i32 %v0_db50, i32* %stack_var_-44, align 4
  %v8_db54 = icmp slt i32 %v1_db34, %arg2
  br i1 %v8_db54, label %dec_label_pc_da08, label %dec_label_pc_db58

dec_label_pc_db58:                                ; preds = %dec_label_pc_db28, %dec_label_pc_dccc
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_d968, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d968, label %dec_label_pc_dccc, label %dec_label_pc_db6c

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db58
  store i32 %v2_d8e0, i32* %r1.global-to-local, align 4
  %v1_db70 = load i32, i32* @sl, align 4
  %v2_db70 = add i32 %v1_db70, %v2_d8e0
  store i32 %v2_db70, i32* %r3.global-to-local, align 4
  %v1_db74 = add i32 %v2_db70, 47
  store i32 %v1_db74, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_db7c = add i32 %v2_db70, 27
  store i32 %v1_db7c, i32* @sb, align 4
  %v3_dc58 = icmp eq i32 %v3_d958, 65535
  %v3_db88 = icmp eq i32 %v3_d95c, 65535
  br label %dec_label_pc_dc44

dec_label_pc_db84:                                ; preds = %dec_label_pc_dc44
  store i32 %v3_d95c, i32* %ip.global-to-local, align 4
  store i1 %v3_db88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_db88, label %dec_label_pc_dc80, label %dec_label_pc_db90

dec_label_pc_db90:                                ; preds = %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge, %dec_label_pc_db84
  %v1_db94 = phi i32 [ %v1_db94.pre, %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge ], [ 65535, %dec_label_pc_db84 ]
  store i32 %v3_d960, i32* @lr, align 4
  %v9_db94 = icmp eq i32 %v3_d960, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db94, label %dec_label_pc_dc94, label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge, %dec_label_pc_db90
  %v1_dba0 = phi i32 [ %v1_dba0.pre, %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge ], [ %v1_db94, %dec_label_pc_db90 ]
  store i32 %v3_d964, i32* %r0.global-to-local, align 4
  %v9_dba0 = icmp eq i32 %v3_d964, %v1_dba0
  store i1 %v9_dba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dba0, label %dec_label_pc_dca8, label %dec_label_pc_dba8

dec_label_pc_dba8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_db9c, %dec_label_pc_dca8
  %v0_dba8 = load i32, i32* @r7, align 4
  store i32 %v0_dba8, i32* %r0.global-to-local, align 4
  %v0_dbac = load i32, i32* @sl, align 4
  store i32 %v0_dbac, i32* %r1.global-to-local, align 4
  %v2_dbb0 = call i32 @function_f24c(i32 %v0_dba8, i32 %v0_dbac)
  %v0_dbb4 = load i32, i32* @r8, align 4
  %v1_dbb4 = trunc i32 %v0_dbb4 to i8
  %v2_dbb4 = load i32, i32* @r7, align 4
  %v3_dbb4 = load i32, i32* @sl, align 4
  %v4_dbb4 = add i32 %v3_dbb4, %v2_dbb4
  %v5_dbb4 = inttoptr i32 %v4_dbb4 to i8*
  store i8 %v1_dbb4, i8* %v5_dbb4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dbbc = load i32, i32* @r8, align 4
  %v1_dbbc = trunc i32 %v0_dbbc to i16
  %v2_dbbc = load i32, i32* @r4, align 4
  %v3_dbbc = add i32 %v2_dbbc, 10
  %v4_dbbc = inttoptr i32 %v3_dbbc to i16*
  store i16 %v1_dbbc, i16* %v4_dbbc, align 2
  %v0_dbc0 = load i32, i32* @r4, align 4
  store i32 %v0_dbc0, i32* @r0, align 4
  %v2_dbc4 = call i32 @function_dd58(i32 %v0_dbc0, i32 20)
  %v3_dbc4 = trunc i32 %v2_dbc4 to i16
  store i32 %v2_dbc4, i32* %r0.global-to-local, align 4
  %v3_dbc8 = load i32, i32* @r4, align 4
  %v4_dbc8 = add i32 %v3_dbc8, 10
  %v5_dbc8 = inttoptr i32 %v4_dbc8 to i16*
  store i16 %v3_dbc4, i16* %v5_dbc8, align 2
  %v0_dbcc = load i32, i32* @r6, align 4
  store i32 %v0_dbcc, i32* @r1, align 4
  %v1_dbd0 = add i32 %v0_dbcc, 4
  %v2_dbd0 = inttoptr i32 %v1_dbd0 to i16*
  %v3_dbd0 = load i16, i16* %v2_dbd0, align 2
  %v4_dbd0 = zext i16 %v3_dbd0 to i32
  store i32 %v4_dbd0, i32* %r2.global-to-local, align 4
  %v0_dbd4 = load i32, i32* @r8, align 4
  %v1_dbd4 = trunc i32 %v0_dbd4 to i16
  %v3_dbd4 = add i32 %v0_dbcc, 6
  %v4_dbd4 = inttoptr i32 %v3_dbd4 to i16*
  store i16 %v1_dbd4, i16* %v4_dbd4, align 2
  %v0_dbd8 = load i32, i32* @sb, align 4
  store i32 %v0_dbd8, i32* %r3.global-to-local, align 4
  %v0_dbdc = load i32, i32* @r4, align 4
  store i32 %v0_dbdc, i32* %r0.global-to-local, align 4
  %v4_dbe0 = call i32 @function_dda8(i32 %v0_dbdc, i32 %v0_dbcc, i32 %v4_dbd0, i32 %v0_dbd8)
  %v5_dbe0 = trunc i32 %v4_dbe0 to i16
  store i32 %v4_dbe0, i32* %r0.global-to-local, align 4
  %v3_dbe4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dbe4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_dbec = mul i32 %v3_dbe4, 32
  store i32 %v3_dbec, i32* %ip.global-to-local, align 4
  %v3_dbf0 = load i32, i32* @r6, align 4
  %v4_dbf0 = add i32 %v3_dbf0, 6
  %v5_dbf0 = inttoptr i32 %v4_dbf0 to i16*
  store i16 %v5_dbe0, i16* %v5_dbf0, align 2
  store i32 %stack_var_-2184.0, i32* %r2.global-to-local, align 4
  %v0_dbf8 = load i32, i32* @r6, align 4
  %v1_dbf8 = add i32 %v0_dbf8, 2
  %v2_dbf8 = inttoptr i32 %v1_dbf8 to i16*
  %v3_dbf8 = load i16, i16* %v2_dbf8, align 2
  %v4_dbf8 = zext i16 %v3_dbf8 to i32
  store i32 %v4_dbf8, i32* %r6.global-to-local, align 4
  %v0_dbfc = load i32, i32* %ip.global-to-local, align 4
  %v1_dbfc = load i32, i32* %r3.global-to-local, align 4
  %tmp135 = mul i32 %v1_dbfc, -8
  %v5_dbfc = add i32 %v0_dbfc, %tmp135
  %v1_dc00 = load i32, i32* %r1.global-to-local, align 4
  %v2_dc00 = add i32 %v1_dc00, %v5_dbfc
  store i32 %v2_dc00, i32* %ip.global-to-local, align 4
  %v2_dc04 = add i32 %v2_dc00, 4
  %v3_dc04 = inttoptr i32 %v2_dc04 to i32*
  store i32 %stack_var_-2184.0, i32* %v3_dc04, align 4
  %v0_dc08 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc08 = trunc i32 %v0_dc08 to i16
  %v2_dc08 = load i32, i32* %ip.global-to-local, align 4
  %v3_dc08 = add i32 %v2_dc08, 2
  %v4_dc08 = inttoptr i32 %v3_dc08 to i16*
  store i16 %v1_dc08, i16* %v4_dc08, align 2
  %v0_dc0c = load i32, i32* @r4, align 4
  store i32 %v0_dc0c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v0_dc18 = load i32, i32* @fp, align 4
  store i32 %v0_dc18, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_dc20 = load i32, i32* %ip.global-to-local, align 4
  %v6_dc28 = call i32 @function_12c50(i32 %v3_d8f4, i32 %v0_dc0c, i32 %v0_dc18, i32 16384, i32 %v0_dc20, i32 16)
  %v3_dc2c = load i32, i32* %stack_var_-44, align 4
  %v1_dc30 = add i32 %v3_dc2c, 1
  store i32 %v1_dc30, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_dc38 = icmp eq i32 %v1_dc30, %arg2
  store i1 %v9_dc38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dc30, i32* %stack_var_-44, align 4
  %v7_dc40 = icmp slt i32 %v1_dc30, %arg2
  br i1 %v7_dc40, label %dec_label_pc_dc44, label %dec_label_pc_dccc

dec_label_pc_dc44:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_db6c
  %v1_dc50 = phi i32 [ %v1_dc30, %dec_label_pc_dba8 ], [ 0, %dec_label_pc_db6c ]
  store i32 %v2_d6a4, i32* %r2.global-to-local, align 4
  store i32 %v3_d958, i32* %r3.global-to-local, align 4
  %v4_dc50 = mul i32 %v1_dc50, 4
  %v5_dc50 = add i32 %v4_dc50, %v2_d6a4
  %v6_dc50 = inttoptr i32 %v5_dc50 to i32*
  %v7_dc50 = load i32, i32* %v6_dc50, align 4
  store i32 %v7_dc50, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_dc58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_dc60 = add i32 %v7_dc50, 20
  store i32 %v1_dc60, i32* @r6, align 4
  %v1_dc64 = add i32 %v7_dc50, 41
  store i32 %v1_dc64, i32* @r7, align 4
  br i1 %v3_dc58, label %dec_label_pc_dc6c, label %dec_label_pc_db84

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc44
  %v0_dc6c = call i32 @function_f188()
  %v1_dc6c = trunc i32 %v0_dc6c to i16
  store i32 %v0_dc6c, i32* %r0.global-to-local, align 4
  store i32 %v3_d95c, i32* %ip.global-to-local, align 4
  %v1_dc74 = load i32, i32* @r5, align 4
  %v9_dc74 = icmp eq i32 %v3_d95c, %v1_dc74
  store i1 %v9_dc74, i1* %cpsr_z.global-to-local, align 1
  %v3_dc78 = load i32, i32* @r4, align 4
  %v4_dc78 = add i32 %v3_dc78, 4
  %v5_dc78 = inttoptr i32 %v4_dc78 to i16*
  store i16 %v1_dc6c, i16* %v5_dc78, align 2
  br i1 %v9_dc74, label %dec_label_pc_dc80, label %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge

dec_label_pc_dc6c.dec_label_pc_db90_crit_edge:    ; preds = %dec_label_pc_dc6c
  %v1_db94.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_db90

dec_label_pc_dc80:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db84
  %v0_dc80 = call i32 @function_f188()
  %v1_dc80 = trunc i32 %v0_dc80 to i16
  store i32 %v0_dc80, i32* %r0.global-to-local, align 4
  store i32 %v3_d960, i32* @lr, align 4
  %v1_dc88 = load i32, i32* @r5, align 4
  %v9_dc88 = icmp eq i32 %v3_d960, %v1_dc88
  store i1 %v9_dc88, i1* %cpsr_z.global-to-local, align 1
  %v3_dc8c = load i32, i32* @r4, align 4
  %v4_dc8c = add i32 %v3_dc8c, 20
  %v5_dc8c = inttoptr i32 %v4_dc8c to i16*
  store i16 %v1_dc80, i16* %v5_dc8c, align 2
  br i1 %v9_dc88, label %dec_label_pc_dc94, label %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge

dec_label_pc_dc80.dec_label_pc_db9c_crit_edge:    ; preds = %dec_label_pc_dc80
  %v1_dba0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_db9c

dec_label_pc_dc94:                                ; preds = %dec_label_pc_dc80, %dec_label_pc_db90
  %v0_dc94 = call i32 @function_f188()
  %v1_dc94 = trunc i32 %v0_dc94 to i16
  %v3_dc98 = load i32, i32* @r6, align 4
  %v4_dc98 = add i32 %v3_dc98, 2
  %v5_dc98 = inttoptr i32 %v4_dc98 to i16*
  store i16 %v1_dc94, i16* %v5_dc98, align 2
  store i32 %v3_d964, i32* %r0.global-to-local, align 4
  %v1_dca0 = load i32, i32* @r5, align 4
  %v9_dca0 = icmp eq i32 %v3_d964, %v1_dca0
  store i1 %v9_dca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dca0, label %dec_label_pc_dca8, label %dec_label_pc_dba8

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_db9c
  %v0_dca8 = call i32 @function_f188()
  %v1_dca8 = trunc i32 %v0_dca8 to i16
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  %v3_dcac = load i32, i32* @r4, align 4
  %v4_dcac = add i32 %v3_dcac, 28
  %v5_dcac = inttoptr i32 %v4_dcac to i16*
  store i16 %v1_dca8, i16* %v5_dcac, align 2
  br label %dec_label_pc_dba8

dec_label_pc_dcb4:                                ; preds = %dec_label_pc_d904
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v1_dcb8 = call i32 @function_124c8(i32 %v3_d8f4)
  store i32 %v1_dcb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dcbc

dec_label_pc_dcbc:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_d8dc, %dec_label_pc_d8c4, %dec_label_pc_dcb4
  %v1_dcc8 = phi i32 [ %v3_d8f4, %dec_label_pc_d8dc ], [ %v2_d8d0, %dec_label_pc_d8c4 ], [ %v1_dcb8, %dec_label_pc_dcb4 ], [ %v2_dcd0, %dec_label_pc_dccc ]
  store i32 %v9_d674, i32* %r6.global-to-local, align 4
  store i32 %v18_d674, i32* %sb.global-to-local, align 4
  store i32 %v27_d674, i32* %lr.global-to-local, align 4
  ret i32 %v1_dcc8

dec_label_pc_dccc.critedge:                       ; preds = %dec_label_pc_d92c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_dccc.critedge, %dec_label_pc_db58
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dcd0 = call i32 @function_12148(i32* null)
  store i32 %v2_dcd0, i32* %r0.global-to-local, align 4
  %v9_dcd8 = icmp eq i32 %v2_d8d0, %v2_dcd0
  store i1 %v9_dcd8, i1* %cpsr_z.global-to-local, align 1
  %v6_dcdc = icmp slt i32 %v2_d8d0, %v2_dcd0
  br i1 %v6_dcdc, label %dec_label_pc_dcbc, label %dec_label_pc_db58

dec_label_pc_dce4:                                ; preds = %dec_label_pc_d87c, %bb113
  %v0_d884.lcssa = phi i32 [ %v1_d850, %dec_label_pc_d87c ], [ %v0_d884, %bb113 ]
  %v2_dce8 = sub i32 %v0_d884.lcssa, %v0_d82c
  store i32 %v2_dce8, i32* @r4, align 4
  %v2_dcec = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d840, i32* %r1.global-to-local, align 4
  store i32 %v2_dcec, i32* %r0.global-to-local, align 4
  store i32 %v2_dce8, i32* %r2.global-to-local, align 4
  %v3_dcfc = call i32 @function_118d4(i32 %v2_dcec, i32 %v2_d840, i32 %v2_dce8)
  %v2_dd00 = ptrtoint i32* %stack_var_-40 to i32
  %v1_dd04 = load i32, i32* @r4, align 4
  %v2_dd04 = add i32 %v1_dd04, %v2_dd00
  store i32 %v2_dd04, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dcec, i32* @r0, align 4
  %v3_dd10 = add i32 %v2_dd04, -36
  %v4_dd10 = inttoptr i32 %v3_dd10 to i8*
  store i8 0, i8* %v4_dd10, align 1
  %v1_dd14 = call i32 @function_12a24(i32 %v2_dcec)
  store i32 %v1_dd14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd20:                                ; preds = %dec_label_pc_d890
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd30:                                ; preds = %dec_label_pc_d890
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd44:                                ; preds = %dec_label_pc_d890
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_d8c4

; uselistorder directives
  uselistorder i32 %v1_dd14, { 1, 0 }
  uselistorder i32 %v2_dcec, { 0, 1, 3, 2 }
  uselistorder i32 %v2_dce8, { 1, 0, 2 }
  uselistorder i32 %v2_dcd0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_dca8, { 1, 0 }
  uselistorder i32 %v0_dc80, { 1, 0 }
  uselistorder i32 %v0_dc6c, { 1, 0 }
  uselistorder i32 %v7_dc50, { 1, 0, 2 }
  uselistorder i32 %v1_dc30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_dbe0, { 1, 0 }
  uselistorder i32 %v0_dbcc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_dbc4, { 1, 0 }
  uselistorder i1 %v3_db88, { 1, 0 }
  uselistorder i1 %v3_dc58, { 1, 0 }
  uselistorder i32 %v1_db10.pre, { 1, 0 }
  uselistorder i32 %v2_db08, { 1, 0 }
  uselistorder i32 %v2_db0817, { 1, 0 }
  uselistorder i32 %v0_db1419, { 1, 0 }
  uselistorder i32 %v1_db00, { 1, 0 }
  uselistorder i32 %v3_d9ec, { 1, 0 }
  uselistorder i32 %v3_d9d8, { 1, 0 }
  uselistorder i32 %v3_d998, { 1, 0 }
  uselistorder i32 %v1_d96c, { 1, 0 }
  uselistorder i32 %v3_d960, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_d95c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d924, { 1, 0 }
  uselistorder i1 %v7_d8f8, { 1, 0 }
  uselistorder i32 %v3_d8f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d8e0, { 0, 13, 1, 8, 3, 6, 7, 5, 9, 11, 10, 4, 12, 2 }
  uselistorder i32 %v2_d8d0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_d8cc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2184.0, { 0, 3, 2, 1 }
  uselistorder i32 %v1_d894, { 1, 0 }
  uselistorder i32 %v0_d890, { 1, 0 }
  uselistorder i32 %v1_d884, { 1, 0 }
  uselistorder i1 %v7_d870, { 1, 0 }
  uselistorder i32 %v1_d86c, { 1, 0, 2 }
  uselistorder i1 %v8_d864, { 1, 0 }
  uselistorder i1 %v7_d860, { 1, 0 }
  uselistorder i32 %v1_d854, { 1, 0 }
  uselistorder i8 %v2_d848, { 2, 0, 1, 3 }
  uselistorder i32 %v0_d84c, { 1, 0 }
  uselistorder i32 %v0_d86c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d840, { 1, 0, 2, 3 }
  uselistorder i32 %v0_d83c, { 1, 0, 2 }
  uselistorder i32 %v0_d834, { 1, 0, 2, 3 }
  uselistorder i1 %v7_d82c, { 1, 0 }
  uselistorder i32 %v0_d82c, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_d7d0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_d770, { 2, 0, 1, 3 }
  uselistorder i32 %v6_d754, { 0, 2, 1 }
  uselistorder i32 %v6_d73c, { 1, 0, 2 }
  uselistorder i32 %v1_d724, { 1, 0 }
  uselistorder i32 %v7_d6e0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_d6c8, { 1, 0 }
  uselistorder i32 %v6_d6bc, { 1, 0 }
  uselistorder i32 %v2_d6a4, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 38, 9, 6, 7, 8, 10, 11, 12, 1, 13, 2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 52, 51, 1, 10, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 67, 7, 5, 8, 6, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19, 22, 20, 21, 23, 24, 32, 25, 26, 27, 28, 29, 30, 31, 36, 33, 34, 35, 37, 39, 38, 41, 40, 42, 43, 44, 46, 45, 47, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 32, 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 (i32)* @function_12a24, { 1, 0 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i8 17, { 1, 2, 0 }
  uselistorder i8 -16, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 37, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 53, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg2, { 3, 4, 6, 7, 0, 1, 5, 2, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_dccc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dcbc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_dba8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_db58, { 1, 0 }
  uselistorder label %dec_label_pc_db28, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_d884, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d87c, { 1, 0 }
  uselistorder label %dec_label_pc_d870, { 1, 0 }
}

define i32 @function_dd58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dd58:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_dd7c, label %dec_label_pc_dd64

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dd58
  %v0_dd6c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_dd68

dec_label_pc_dd68:                                ; preds = %dec_label_pc_dd68, %dec_label_pc_dd64
  %v0_dd74 = phi i32 [ %v2_dd74, %dec_label_pc_dd68 ], [ 0, %dec_label_pc_dd64 ]
  %v0_dd6c = phi i32 [ %v5_dd6c, %dec_label_pc_dd68 ], [ %v0_dd6c.pre, %dec_label_pc_dd64 ]
  %v0_dd68 = phi i32 [ %v1_dd68, %dec_label_pc_dd68 ], [ %arg1, %dec_label_pc_dd64 ]
  %v1_dd68 = add i32 %v0_dd68, -2
  %v1_dd6c = inttoptr i32 %v0_dd6c to i16*
  %v2_dd6c = load i16, i16* %v1_dd6c, align 2
  %v3_dd6c = zext i16 %v2_dd6c to i32
  %v5_dd6c = add i32 %v0_dd6c, -2
  store i32 %v5_dd6c, i32* @r0, align 4
  %v2_dd74 = add i32 %v3_dd6c, %v0_dd74
  %v1_dd68.cmp = icmp ugt i32 %v1_dd68, 1
  br i1 %v1_dd68.cmp, label %dec_label_pc_dd68, label %dec_label_pc_dd7c.loopexit

dec_label_pc_dd7c.loopexit:                       ; preds = %dec_label_pc_dd68
  br label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd58, %dec_label_pc_dd7c.loopexit
  %v1_dd84 = phi i32 [ %v2_dd74, %dec_label_pc_dd7c.loopexit ], [ 0, %dec_label_pc_dd58 ]
  %v0_dd7c = phi i32 [ %v1_dd68, %dec_label_pc_dd7c.loopexit ], [ %arg1, %dec_label_pc_dd58 ]
  %v7_dd7c = icmp eq i32 %v0_dd7c, 1
  br i1 %v7_dd7c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_dd7c
  %v1_dd80 = load i32, i32* @r0, align 4
  %v2_dd80 = inttoptr i32 %v1_dd80 to i8*
  %v3_dd80 = load i8, i8* %v2_dd80, align 1
  %v4_dd80 = zext i8 %v3_dd80 to i32
  %v3_dd84 = add i32 %v1_dd84, %v4_dd80
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_dd7c, %bb
  %v0_dd88 = phi i32 [ %v1_dd84, %dec_label_pc_dd7c ], [ %v3_dd84, %bb ]
  %v3_dd8c = urem i32 %v0_dd88, 65536
  %v4_dd90 = udiv i32 %v0_dd88, 65536
  %v5_dd90 = add nuw nsw i32 %v4_dd90, %v3_dd8c
  %v4_dd94 = udiv i32 %v5_dd90, 65536
  %v5_dd94 = add nuw nsw i32 %v4_dd94, %v5_dd90
  %v1_dd98 = urem i32 %v5_dd94, 65536
  %v3_dda0 = xor i32 %v1_dd98, 65535
  ret i32 %v3_dda0

; uselistorder directives
  uselistorder i32 %v5_dd90, { 1, 0 }
  uselistorder i32 %v5_dd6c, { 1, 0 }
  uselistorder i32 %v1_dd68, { 1, 0, 2 }
  uselistorder i32 %v0_dd6c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_dd7c, { 1, 0 }
}

define i32 @function_dda8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dda8:
  %v1_ddb8 = add i32 %arg1, 12
  %v2_ddb8 = inttoptr i32 %v1_ddb8 to i32*
  %v3_ddb8 = load i32, i32* %v2_ddb8, align 4
  %v1_ddbc = add i32 %arg1, 16
  %v2_ddbc = inttoptr i32 %v1_ddbc to i32*
  %v3_ddbc = load i32, i32* %v2_ddbc, align 4
  %v7_ddc0 = icmp sgt i32 %arg3, 1
  br i1 %v7_ddc0, label %dec_label_pc_ddcc.preheader, label %dec_label_pc_dde0

dec_label_pc_ddcc.preheader:                      ; preds = %dec_label_pc_dda8
  %v0_ddd0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_ddcc.preheader, %dec_label_pc_ddcc
  %v0_ddd8 = phi i32 [ 0, %dec_label_pc_ddcc.preheader ], [ %v2_ddd8, %dec_label_pc_ddcc ]
  %v0_ddd0 = phi i32 [ %v0_ddd0.pre, %dec_label_pc_ddcc.preheader ], [ %v5_ddd0, %dec_label_pc_ddcc ]
  %v0_ddcc = phi i32 [ %arg3, %dec_label_pc_ddcc.preheader ], [ %v1_ddcc, %dec_label_pc_ddcc ]
  %v1_ddcc = add nsw i32 %v0_ddcc, -2
  %v1_ddd0 = inttoptr i32 %v0_ddd0 to i16*
  %v2_ddd0 = load i16, i16* %v1_ddd0, align 2
  %v3_ddd0 = zext i16 %v2_ddd0 to i32
  %v5_ddd0 = add i32 %v0_ddd0, -2
  store i32 %v5_ddd0, i32* @r1, align 4
  %v2_ddd8 = add i32 %v3_ddd0, %v0_ddd8
  %v8_dddc = icmp sgt i32 %v1_ddcc, 1
  br i1 %v8_dddc, label %dec_label_pc_ddcc, label %dec_label_pc_dde0.loopexit

dec_label_pc_dde0.loopexit:                       ; preds = %dec_label_pc_ddcc
  br label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %dec_label_pc_dde0.loopexit, %dec_label_pc_dda8
  %v1_ddec = phi i32 [ %v2_ddd8, %dec_label_pc_dde0.loopexit ], [ 0, %dec_label_pc_dda8 ]
  %v0_dde0 = phi i32 [ %v1_ddcc, %dec_label_pc_dde0.loopexit ], [ %arg3, %dec_label_pc_dda8 ]
  %v7_dde0 = icmp eq i32 %v0_dde0, 1
  br i1 %v7_dde0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_dde0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_dde0
  %v1_dde4 = load i32, i32* @r1, align 4
  %v2_dde4 = inttoptr i32 %v1_dde4 to i8*
  %v3_dde4 = load i8, i8* %v2_dde4, align 1
  %v4_dde4 = zext i8 %v3_dde4 to i32
  %v3_ddec = add i32 %v4_dde4, %v1_ddec
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_de14 = phi i32 [ %v1_ddec, %.thread ], [ %v3_ddec, %bb ]
  %v0_ddf4 = mul i32 %v3_ddb8, 65536
  %v3_ddf4 = udiv i32 %v0_ddf4, 65536
  %v3_ddf8 = urem i32 %v3_ddbc, 65536
  %v4_de00 = udiv i32 %v3_ddb8, 65536
  %v2_ddfc = add nuw nsw i32 %v3_ddf8, %v4_de00
  %v5_de00 = add nuw nsw i32 %v2_ddfc, %v3_ddf4
  %v1_de04 = add i32 %arg1, 9
  %v2_de04 = inttoptr i32 %v1_de04 to i8*
  %v3_de04 = load i8, i8* %v2_de04, align 1
  %v4_de04 = zext i8 %v3_de04 to i32
  %v4_de08 = udiv i32 %v3_ddbc, 65536
  %v3_de10 = mul nuw nsw i32 %v4_de04, 256
  %v5_de08 = add i32 %v4_de08, %arg2
  %v2_de0c = add i32 %v5_de08, %v1_de14
  %v2_de14 = add i32 %v2_de0c, %v5_de00
  %v2_de18 = add i32 %v2_de14, %v3_de10
  %tmp = icmp ult i32 %v2_de18, 65536
  br i1 %tmp, label %dec_label_pc_de38, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %bb19, %dec_label_pc_de24
  %v2_de2c5 = phi i32 [ %v2_de2c, %dec_label_pc_de24 ], [ %v2_de18, %bb19 ]
  %v3_de306.in = phi i32 [ %v2_de2c, %dec_label_pc_de24 ], [ %v2_de18, %bb19 ]
  %v3_de306 = udiv i32 %v3_de306.in, 65536
  %v3_de28 = urem i32 %v2_de2c5, 65536
  %v2_de2c = add nuw nsw i32 %v3_de28, %v3_de306
  %tmp20 = icmp ult i32 %v2_de2c, 65536
  br i1 %tmp20, label %dec_label_pc_de38.loopexit, label %dec_label_pc_de24

dec_label_pc_de38.loopexit:                       ; preds = %dec_label_pc_de24
  br label %dec_label_pc_de38

dec_label_pc_de38:                                ; preds = %dec_label_pc_de38.loopexit, %bb19
  %v0_de38 = phi i32 [ %v2_de2c, %dec_label_pc_de38.loopexit ], [ %v2_de18, %bb19 ]
  %v1_de38 = urem i32 %v0_de38, 65536
  %v3_de40 = xor i32 %v1_de38, 65535
  ret i32 %v3_de40

; uselistorder directives
  uselistorder i32 %v2_de2c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_de18, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ddec, { 1, 0 }
  uselistorder i32 %v5_ddd0, { 1, 0 }
  uselistorder i32 %v0_ddd0, { 1, 0 }
  uselistorder i32 %v3_ddb8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_de24, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_ddcc, { 1, 0 }
}

define i32 @function_de4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_de4c:
  %v2_de58 = load i32, i32* @global_var_20380.89, align 4
  %v2_de60 = call i32 @function_12294(i32 %v2_de58, i32 9)
  ret i32 %v2_de60
}

define i32 @function_de74(i32 %arg1) local_unnamed_addr {
dec_label_pc_de74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_de74 = load i32, i32* @r4, align 4
  %v6_de74 = load i32, i32* @r5, align 4
  %v9_de74 = load i32, i32* @r6, align 4
  %v12_de74 = load i32, i32* @r7, align 4
  %v15_de74 = load i32, i32* @r8, align 4
  %v18_de74 = load i32, i32* @sb, align 4
  %v21_de74 = load i32, i32* @sl, align 4
  %v24_de74 = load i32, i32* @fp, align 4
  %v27_de74 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_de90 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_de90, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_debc = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_debc, i32* @fp, align 4
  %v3_dec8 = call i32 @function_12940(i8* nonnull %stack_var_-585, i32 0)
  %v2_decc = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_decc, i32* @sl, align 4
  %v0_ded0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_dedc = bitcast i32* %stack_var_-8777 to i8*
  %v3_dedc = call i32 @function_12940(i8* %v2_dedc, i32 %v0_ded0)
  %v0_dee4 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_def0 = bitcast i32* %stack_var_-4681 to i8*
  %v3_def0 = call i32 @function_12940(i8* %v2_def0, i32 %v0_dee4)
  %v2_def4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_def4, i32* @sb, align 4
  %v0_def8 = load i32, i32* %r4.global-to-local, align 4
  %v3_def8 = udiv i32 %v0_def8, 256
  %v1_defc = urem i32 %v0_def8, 256
  store i32 %v1_defc, i32* @r4, align 4
  %v3_df0c = trunc i32 %v3_def8 to i8
  %v4_df0c = call i32 @function_11d58(i8 %v3_df0c, i32 16, i32 %v2_def4)
  %v2_df14 = call i32 @function_11864(i8* nonnull %stack_var_-72)
  %v7_df18 = icmp eq i32 %v2_df14, 2
  br i1 %v7_df18, label %dec_label_pc_e3c4, label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %dec_label_pc_de74, %dec_label_pc_e3c4
  %v1_df24 = call i32 @function_10e40(i32 6)
  %v1_df2c = call i32 @function_10e40(i32 7)
  %v1_df34 = call i32 @function_10e40(i32 8)
  %v1_df3c = call i32 @function_10e40(i32 9)
  %v0_df40 = load i32, i32* @r5, align 4
  %v2_df48 = inttoptr i32 %v0_df40 to i32*
  %v3_df48 = call i32 @function_10d7c(i32 9, i32* %v2_df48)
  %v0_df4c = load i32, i32* @r5, align 4
  %v2_df50 = call i32 @function_120d4(i32 %v3_df48, i32 %v0_df4c)
  %v7_df54 = icmp eq i32 %v2_df50, -1
  store i32 %v2_df50, i32* @r8, align 4
  br i1 %v7_df54, label %bb, label %dec_label_pc_df64.preheader

bb:                                               ; preds = %dec_label_pc_df20
  %v1_df5c = load i32, i32* @r5, align 4
  store i32 %v1_df5c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e384

dec_label_pc_df64.preheader:                      ; preds = %dec_label_pc_df20
  %v4_df7057 = call i32 @function_11ac4(i8* nonnull %stack_var_-585, i32 512, i32 %v2_df50)
  %v2_df7459 = icmp eq i32 %v4_df7057, 0
  br i1 %v2_df7459, label %dec_label_pc_e0fc.loopexit, label %dec_label_pc_df7c.lr.ph

dec_label_pc_df7c.lr.ph:                          ; preds = %dec_label_pc_df64.preheader
  %v2_dfc4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df7c.lr.ph, %dec_label_pc_df64.backedge
  %v3_df80 = load i8, i8* %stack_var_-585, align 1
  %v4_df80 = sext i8 %v3_df80 to i32
  %v2_df84 = icmp eq i8 %v3_df80, 0
  br i1 %v2_df84, label %bb134, label %bb133

bb133:                                            ; preds = %dec_label_pc_df7c
  %v8_df88 = icmp eq i8 %v3_df80, 58
  br i1 %v8_df88, label %.thread8, label %dec_label_pc_df9c

.thread8:                                         ; preds = %bb133
  br label %dec_label_pc_dfb4

bb134:                                            ; preds = %dec_label_pc_df7c
  br label %dec_label_pc_dfb4

dec_label_pc_df9c:                                ; preds = %bb133
  %v1_dfa4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dfa0

dec_label_pc_dfa0:                                ; preds = %bb135, %dec_label_pc_df9c
  %v0_dfa0 = phi i32 [ %v1_dfa0, %bb135 ], [ 0, %dec_label_pc_df9c ]
  %v1_dfa0 = add i32 %v0_dfa0, 1
  %v2_dfa4 = add i32 %v1_dfa0, %v1_dfa4.pre
  %v3_dfa4 = inttoptr i32 %v2_dfa4 to i8*
  %v4_dfa4 = load i8, i8* %v3_dfa4, align 1
  %v6_dfa4 = zext i8 %v4_dfa4 to i32
  %v2_dfa8 = icmp eq i8 %v4_dfa4, 0
  br i1 %v2_dfa8, label %dec_label_pc_dfb4, label %bb135

bb135:                                            ; preds = %dec_label_pc_dfa0
  %v8_dfac = icmp eq i8 %v4_dfa4, 58
  br i1 %v8_dfac, label %dec_label_pc_dfb4, label %dec_label_pc_dfa0

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_dfa0, %bb135, %bb134, %.thread8
  %v1_dfe0 = phi i32 [ 0, %.thread8 ], [ 0, %bb134 ], [ %v1_dfa0, %bb135 ], [ %v1_dfa0, %dec_label_pc_dfa0 ]
  %v0_dfb4 = phi i32 [ %v4_df80, %.thread8 ], [ %v4_df80, %bb134 ], [ %v6_dfa4, %bb135 ], [ %v6_dfa4, %dec_label_pc_dfa0 ]
  %v2_dfb4 = icmp eq i32 %v0_dfb4, 0
  br i1 %v2_dfb4, label %dec_label_pc_df64.backedge, label %dec_label_pc_dfbc

dec_label_pc_df64.backedge:                       ; preds = %dec_label_pc_dfb4, %dec_label_pc_e084, %dec_label_pc_e0d0, %dec_label_pc_e000
  %v0_df6c = load i32, i32* @r8, align 4
  %v4_df70 = call i32 @function_11ac4(i8* nonnull %stack_var_-585, i32 512, i32 %v0_df6c)
  %v2_df74 = icmp eq i32 %v4_df70, 0
  br i1 %v2_df74, label %dec_label_pc_e0fc.loopexit, label %dec_label_pc_df7c

dec_label_pc_dfbc:                                ; preds = %dec_label_pc_dfb4
  %v1_dfc0 = add i32 %v1_dfe0, 2
  %v2_dfc8 = add i32 %v1_dfc0, %v2_dfc4
  %v1_dfcc = add i32 %v2_dfc8, -545
  %v2_dfcc = inttoptr i32 %v1_dfcc to i8*
  %v3_dfcc = load i8, i8* %v2_dfcc, align 1
  %v2_dfd0 = icmp eq i8 %v3_dfcc, 0
  br i1 %v2_dfd0, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_dfbc
  %v8_dfd4 = icmp eq i8 %v3_dfcc, 32
  br i1 %v8_dfd4, label %.thread13, label %dec_label_pc_dfe0

.thread13:                                        ; preds = %bb136
  store i32 %v1_dfc0, i32* @r5, align 4
  br label %dec_label_pc_e000

bb137:                                            ; preds = %dec_label_pc_dfbc
  store i32 %v1_dfc0, i32* @r5, align 4
  br label %dec_label_pc_e000

dec_label_pc_dfe0:                                ; preds = %bb136
  %v0_dfe0 = load i32, i32* @r6, align 4
  %v2_dfe0 = add i32 %v0_dfe0, %v1_dfe0
  br label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %bb138, %dec_label_pc_dfe0
  %v0_dff416 = phi i32 [ %v1_dff4, %bb138 ], [ %v1_dfc0, %dec_label_pc_dfe0 ]
  %v0_dff818 = phi i32 [ %v1_dff8, %bb138 ], [ %v2_dfe0, %dec_label_pc_dfe0 ]
  %v1_dfe8 = add i32 %v0_dff818, 3
  %v2_dfe8 = inttoptr i32 %v1_dfe8 to i8*
  %v3_dfe8 = load i8, i8* %v2_dfe8, align 1
  %v2_dfec = icmp eq i8 %v3_dfe8, 0
  br i1 %v2_dfec, label %.thread15, label %bb138

.thread15:                                        ; preds = %dec_label_pc_dfe8
  %v1_dff417 = add i32 %v0_dff416, 1
  store i32 %v1_dff417, i32* @r5, align 4
  br label %dec_label_pc_e000

bb138:                                            ; preds = %dec_label_pc_dfe8
  %v8_dff0 = icmp eq i8 %v3_dfe8, 32
  %v1_dff4 = add i32 %v0_dff416, 1
  store i32 %v1_dff4, i32* @r5, align 4
  %v1_dff8 = add i32 %v0_dff818, 1
  br i1 %v8_dff0, label %dec_label_pc_e000, label %dec_label_pc_dfe8

dec_label_pc_e000:                                ; preds = %bb138, %bb137, %.thread15, %.thread13
  %v1_e00c = phi i32 [ %v1_dff417, %.thread15 ], [ %v1_dfc0, %.thread13 ], [ %v1_dfc0, %bb137 ], [ %v1_dff4, %bb138 ]
  %v0_e000 = load i32, i32* @r6, align 4
  %v2_e000 = add i32 %v0_e000, %v1_dfc0
  store i32 %v2_e000, i32* @r4, align 4
  %v2_e00c = add i32 %v1_e00c, %v2_dfc4
  store i32 0, i32* @r7, align 4
  %v3_e014 = add i32 %v2_e00c, -545
  %v4_e014 = inttoptr i32 %v3_e014 to i8*
  store i8 0, i8* %v4_e014, align 1
  %v0_e018 = load i32, i32* @r4, align 4
  %v1_e01c = inttoptr i32 %v0_e018 to i8*
  %v2_e01c = call i32 @function_11864(i8* %v1_e01c)
  store i32 %v2_e01c, i32* @r1, align 4
  %v0_e028 = load i32, i32* @r4, align 4
  %v3_e02c = inttoptr i32 %v0_e028 to i8*
  %v4_e02c = call i32 @function_11bb4(i8* %v3_e02c, i32 %v2_e01c, i32 %v2_def4)
  %v7_e030 = icmp eq i32 %v4_e02c, -1
  br i1 %v7_e030, label %dec_label_pc_df64.backedge, label %dec_label_pc_e04c.preheader

dec_label_pc_e04c.preheader:                      ; preds = %dec_label_pc_e000
  %v1_e034 = load i32, i32* @r7, align 4
  %v1_e038 = load i32, i32* @r6, align 4
  %v2_e038 = load i32, i32* @r5, align 4
  %v3_e038 = add i32 %v2_e038, %v1_e038
  store i32 %v1_e034, i32* @lr, align 4
  %v1_e04c49 = add i32 %v3_e038, 2
  %v2_e04c50 = inttoptr i32 %v1_e04c49 to i8*
  %v3_e04c51 = load i8, i8* %v2_e04c50, align 1
  %v2_e05053 = icmp eq i8 %v3_e04c51, 0
  %v1_e05455 = add i32 %v2_e038, 2
  br i1 %v2_e05053, label %dec_label_pc_e084, label %dec_label_pc_e05c

dec_label_pc_e05c:                                ; preds = %dec_label_pc_e04c.preheader, %dec_label_pc_e04c.backedge
  %v0_e08484 = phi i32 [ %v0_e08482, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e06c.pr = phi i32 [ %v0_e06c.pr71, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e398 = phi i32 [ %v0_e39874, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e05479 = phi i32 [ %v1_e054, %dec_label_pc_e04c.backedge ], [ %v1_e05455, %dec_label_pc_e04c.preheader ]
  %v0_e07c = phi i32 [ %v0_e04c, %dec_label_pc_e04c.backedge ], [ %v3_e038, %dec_label_pc_e04c.preheader ]
  %v1_e060.in = phi i8 [ %v3_e04c, %dec_label_pc_e04c.backedge ], [ %v3_e04c51, %dec_label_pc_e04c.preheader ]
  %v7_e05c = icmp eq i8 %v1_e060.in, 9
  br i1 %v7_e05c, label %bb140, label %bb139

bb139:                                            ; preds = %dec_label_pc_e05c
  %v8_e060 = icmp eq i8 %v1_e060.in, 32
  br i1 %v8_e060, label %.thread27, label %dec_label_pc_e06c

.thread27:                                        ; preds = %bb139
  br label %dec_label_pc_e078

bb140:                                            ; preds = %dec_label_pc_e05c
  br label %dec_label_pc_e078

dec_label_pc_e06c:                                ; preds = %bb139
  %v7_e06c = icmp eq i32 %v0_e06c.pr, 1
  br i1 %v7_e06c, label %dec_label_pc_e398, label %dec_label_pc_e074

dec_label_pc_e074:                                ; preds = %dec_label_pc_e398, %dec_label_pc_e06c
  %v0_e07876 = phi i32 [ %v1_e398, %dec_label_pc_e398 ], [ %v0_e398, %dec_label_pc_e06c ]
  br label %dec_label_pc_e078

dec_label_pc_e078:                                ; preds = %bb140, %.thread27, %dec_label_pc_e074
  %v0_e078 = phi i32 [ %v0_e398, %.thread27 ], [ %v0_e398, %bb140 ], [ %v0_e07876, %dec_label_pc_e074 ]
  %v0_e06c.pr72 = phi i32 [ 1, %.thread27 ], [ 1, %bb140 ], [ 0, %dec_label_pc_e074 ]
  %v7_e080 = icmp sgt i32 %v0_e078, 6
  br i1 %v7_e080, label %dec_label_pc_e084, label %dec_label_pc_e04c.backedge

dec_label_pc_e084:                                ; preds = %dec_label_pc_e04c.backedge, %dec_label_pc_e078, %dec_label_pc_e04c.preheader
  %v1_e0d4 = phi i32 [ %v1_e05455, %dec_label_pc_e04c.preheader ], [ %v1_e054, %dec_label_pc_e04c.backedge ], [ %v0_e05479, %dec_label_pc_e078 ]
  %v0_e084 = phi i32 [ %v1_e034, %dec_label_pc_e04c.preheader ], [ %v0_e08482, %dec_label_pc_e04c.backedge ], [ %v0_e08484, %dec_label_pc_e078 ]
  %v2_e084 = icmp eq i32 %v0_e084, 0
  br i1 %v2_e084, label %dec_label_pc_df64.backedge, label %dec_label_pc_e090

dec_label_pc_e090:                                ; preds = %dec_label_pc_e084
  %v2_e098 = add i32 %v1_e0d4, %v2_dfc4
  %v1_e09c = add i32 %v2_e098, -545
  %v2_e09c = inttoptr i32 %v1_e09c to i8*
  %v3_e09c = load i8, i8* %v2_e09c, align 1
  %v2_e0a0 = icmp eq i8 %v3_e09c, 0
  br i1 %v2_e0a0, label %dec_label_pc_e0d0, label %bb141

bb141:                                            ; preds = %dec_label_pc_e090
  %v8_e0a4 = icmp eq i8 %v3_e09c, 32
  br i1 %v8_e0a4, label %dec_label_pc_e0d0, label %dec_label_pc_e0ac

dec_label_pc_e0ac:                                ; preds = %bb141
  %v2_e0ac = add i32 %v1_e0d4, %v1_e038
  br label %dec_label_pc_e0b0

dec_label_pc_e0b0:                                ; preds = %bb142, %dec_label_pc_e0ac
  %v0_e0bc30 = phi i32 [ %v1_e0bc, %bb142 ], [ %v1_e0d4, %dec_label_pc_e0ac ]
  %v0_e0b0 = phi i32 [ %v1_e0b0, %bb142 ], [ %v2_e0ac, %dec_label_pc_e0ac ]
  %v1_e0b0 = add i32 %v0_e0b0, 1
  %v2_e0b0 = inttoptr i32 %v1_e0b0 to i8*
  %v3_e0b0 = load i8, i8* %v2_e0b0, align 1
  %v2_e0b4 = icmp eq i8 %v3_e0b0, 0
  br i1 %v2_e0b4, label %.thread29, label %bb142

.thread29:                                        ; preds = %dec_label_pc_e0b0
  %v1_e0bc31 = add i32 %v0_e0bc30, 1
  br label %dec_label_pc_e0c4

bb142:                                            ; preds = %dec_label_pc_e0b0
  %v8_e0b8 = icmp eq i8 %v3_e0b0, 32
  %v1_e0bc = add i32 %v0_e0bc30, 1
  br i1 %v8_e0b8, label %dec_label_pc_e0c4, label %dec_label_pc_e0b0

dec_label_pc_e0c4:                                ; preds = %bb142, %.thread29
  %v1_e0cc = phi i32 [ %v1_e0bc31, %.thread29 ], [ %v1_e0bc, %bb142 ]
  %v2_e0cc = add i32 %v1_e0cc, %v2_dfc4
  br label %dec_label_pc_e0d0

dec_label_pc_e0d0:                                ; preds = %dec_label_pc_e090, %bb141, %dec_label_pc_e0c4
  %v2_e0dc = phi i32 [ %v2_e098, %dec_label_pc_e090 ], [ %v2_e098, %bb141 ], [ %v2_e0cc, %dec_label_pc_e0c4 ]
  %v2_e0d4 = add i32 %v1_e0d4, %v1_e038
  store i32 %v2_e0d4, i32* @r4, align 4
  %v3_e0dc = add i32 %v2_e0dc, -545
  %v4_e0dc = inttoptr i32 %v3_e0dc to i8*
  store i8 0, i8* %v4_e0dc, align 1
  %v1_e0e0 = inttoptr i32 %v2_e0d4 to i8*
  %v2_e0e0 = call i32 @function_11864(i8* %v1_e0e0)
  %v8_e0e8 = icmp sgt i32 %v2_e0e0, 15
  br i1 %v8_e0e8, label %dec_label_pc_df64.backedge, label %dec_label_pc_e0ec

dec_label_pc_e0ec:                                ; preds = %dec_label_pc_e0d0
  %v0_e0f0 = load i32, i32* @r4, align 4
  %v2_e0f4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_e0f4, i32* @r0, align 4
  %v2_e0f8 = bitcast i32* %stack_var_-56 to i8*
  %v3_e0f8 = call i32 @function_1188c(i8* %v2_e0f8, i32 %v0_e0f0)
  br label %dec_label_pc_e0fc

dec_label_pc_e0fc.loopexit:                       ; preds = %dec_label_pc_df64.backedge, %dec_label_pc_df64.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre100 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_e0fc

dec_label_pc_e0fc:                                ; preds = %dec_label_pc_e0fc.loopexit, %dec_label_pc_e0ec
  %v1_e10c.pre-phi = phi i8* [ %.pre100, %dec_label_pc_e0fc.loopexit ], [ %v2_e0f8, %dec_label_pc_e0ec ]
  %v2_e108.pre-phi = phi i32 [ %.pre, %dec_label_pc_e0fc.loopexit ], [ %v2_e0f4, %dec_label_pc_e0ec ]
  %v0_e0fc = load i32, i32* @r8, align 4
  %v1_e100 = call i32 @function_124c8(i32 %v0_e0fc)
  %v2_e10c = call i32 @function_11864(i8* %v1_e10c.pre-phi)
  store i32 %v2_e10c, i32* @r4, align 4
  %v2_e110 = icmp eq i32 %v2_e10c, 0
  br i1 %v2_e110, label %dec_label_pc_e368, label %dec_label_pc_e11c

dec_label_pc_e11c:                                ; preds = %dec_label_pc_e0fc
  %v3_e124 = call i32 @function_10d7c(i32 6, i32* null)
  %v1_e128 = call i32 @function_126c4(i32 %v3_e124)
  store i32 %v1_e128, i32* @sb, align 4
  %v2_e12c = icmp eq i32 %v1_e128, 0
  br i1 %v2_e12c, label %dec_label_pc_e35c, label %dec_label_pc_e13c.preheader

dec_label_pc_e13c.preheader:                      ; preds = %dec_label_pc_e11c
  store i32 0, i32* @r5, align 4
  %v1_e14044 = inttoptr i32 %v1_e128 to i32*
  %v2_e14045 = call i32 @function_12808(i32* %v1_e14044)
  %v2_e14447 = icmp eq i32 %v2_e14045, 0
  br i1 %v2_e14447, label %dec_label_pc_e350, label %dec_label_pc_e14c.preheader

dec_label_pc_e13c.loopexit:                       ; preds = %dec_label_pc_e154, %dec_label_pc_e164, %dec_label_pc_e1d0
  %v0_e13c = load i32, i32* @sb, align 4
  %v1_e140 = inttoptr i32 %v0_e13c to i32*
  %v2_e140 = call i32 @function_12808(i32* %v1_e140)
  %v2_e144 = icmp eq i32 %v2_e140, 0
  br i1 %v2_e144, label %dec_label_pc_e350, label %dec_label_pc_e14c.preheader

dec_label_pc_e14c.preheader:                      ; preds = %dec_label_pc_e13c.preheader, %dec_label_pc_e13c.loopexit
  %v0_e15492 = phi i32 [ %v2_e140, %dec_label_pc_e13c.loopexit ], [ %v2_e14045, %dec_label_pc_e13c.preheader ]
  br label %dec_label_pc_e14c

dec_label_pc_e14c:                                ; preds = %dec_label_pc_e14c.preheader, %dec_label_pc_e338
  %v0_e16c = phi i32 [ %v0_e15492, %dec_label_pc_e14c.preheader ], [ %v2_e344, %dec_label_pc_e338 ]
  %v0_e14c = load i32, i32* @r5, align 4
  %v2_e14c = icmp eq i32 %v0_e14c, 0
  br i1 %v2_e14c, label %dec_label_pc_e154, label %dec_label_pc_e350

dec_label_pc_e154:                                ; preds = %dec_label_pc_e14c
  %v1_e154 = add i32 %v0_e16c, 11
  %v2_e154 = inttoptr i32 %v1_e154 to i8*
  %v3_e154 = load i8, i8* %v2_e154, align 1
  %v4_e154 = zext i8 %v3_e154 to i32
  %v1_e158 = add nsw i32 %v4_e154, -48
  %tmp = icmp ugt i32 %v1_e158, 9
  br i1 %tmp, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e164

dec_label_pc_e164:                                ; preds = %dec_label_pc_e154
  store i32 %v1_e154, i32* @r7, align 4
  %v3_e170 = call i32 @function_10d7c(i32 6, i32* null)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e17c = call i32 @function_1188c(i8* %v2_def0, i32 %v3_e170)
  %v2_e184 = call i32 @function_11864(i8* %v2_def0)
  %v0_e188 = load i32, i32* @r7, align 4
  %v1_e18c = load i32, i32* @sl, align 4
  %v2_e18c = add i32 %v1_e18c, %v2_e184
  store i32 %v2_e18c, i32* @r0, align 4
  %v2_e190 = inttoptr i32 %v2_e18c to i8*
  %v3_e190 = call i32 @function_1188c(i8* %v2_e190, i32 %v0_e188)
  %v2_e198 = call i32 @function_11864(i8* %v2_def0)
  %v0_e19c = load i32, i32* @r5, align 4
  store i32 %v2_e198, i32* @r4, align 4
  %v2_e1a8 = inttoptr i32 %v0_e19c to i32*
  %v3_e1a8 = call i32 @function_10d7c(i32 7, i32* %v2_e1a8)
  %v0_e1b0 = load i32, i32* @r4, align 4
  %v1_e1b0 = load i32, i32* @sl, align 4
  %v2_e1b0 = add i32 %v1_e1b0, %v0_e1b0
  store i32 %v2_e1b0, i32* @r0, align 4
  %v2_e1b4 = inttoptr i32 %v2_e1b0 to i8*
  %v3_e1b4 = call i32 @function_1188c(i8* %v2_e1b4, i32 %v3_e1a8)
  %v3_e1c4 = call i32 @function_1222c(i32 %v2_decc, i32 %v2_debc, i32 4096)
  %v7_e1c8 = icmp eq i32 %v3_e1c4, -1
  br i1 %v7_e1c8, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %dec_label_pc_e164
  %v0_e1d0 = load i32, i32* @r5, align 4
  %v2_e1d8 = inttoptr i32 %v0_e1d0 to i32*
  %v3_e1d8 = call i32 @function_10d7c(i32 6, i32* %v2_e1d8)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e1e4 = call i32 @function_1188c(i8* %v2_def0, i32 %v3_e1d8)
  %v2_e1ec = call i32 @function_11864(i8* %v2_def0)
  %v0_e1f0 = load i32, i32* @r7, align 4
  %v1_e1f4 = load i32, i32* @sl, align 4
  %v2_e1f4 = add i32 %v1_e1f4, %v2_e1ec
  store i32 %v2_e1f4, i32* @r0, align 4
  %v2_e1f8 = inttoptr i32 %v2_e1f4 to i8*
  %v3_e1f8 = call i32 @function_1188c(i8* %v2_e1f8, i32 %v0_e1f0)
  %v2_e200 = call i32 @function_11864(i8* %v2_def0)
  %v0_e204 = load i32, i32* @r5, align 4
  store i32 %v2_e200, i32* @r4, align 4
  %v2_e210 = inttoptr i32 %v0_e204 to i32*
  %v3_e210 = call i32 @function_10d7c(i32 8, i32* %v2_e210)
  %v0_e218 = load i32, i32* @r4, align 4
  %v1_e218 = load i32, i32* @sl, align 4
  %v2_e218 = add i32 %v1_e218, %v0_e218
  store i32 %v2_e218, i32* @r0, align 4
  %v2_e21c = inttoptr i32 %v2_e218 to i8*
  %v3_e21c = call i32 @function_1188c(i8* %v2_e21c, i32 %v3_e210)
  %v1_e224 = call i32 @function_126c4(i32 %v2_decc)
  store i32 %v1_e224, i32* @r8, align 4
  %v2_e228 = icmp eq i32 %v1_e224, 0
  br i1 %v2_e228, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e230.preheader

dec_label_pc_e230.preheader:                      ; preds = %dec_label_pc_e1d0
  %v1_e23439 = inttoptr i32 %v1_e224 to i32*
  %v2_e23440 = call i32 @function_12808(i32* %v1_e23439)
  store i32 %v2_e23440, i32* @r6, align 4
  %v2_e23842 = icmp eq i32 %v2_e23440, 0
  br i1 %v2_e23842, label %dec_label_pc_e338, label %dec_label_pc_e248thread-pre-split

dec_label_pc_e230.loopexit:                       ; preds = %dec_label_pc_e250, %dec_label_pc_e2e8
  %v0_e230 = load i32, i32* @r8, align 4
  %v1_e234 = inttoptr i32 %v0_e230 to i32*
  %v2_e234 = call i32 @function_12808(i32* %v1_e234)
  store i32 %v2_e234, i32* @r6, align 4
  %v2_e238 = icmp eq i32 %v2_e234, 0
  br i1 %v2_e238, label %dec_label_pc_e338, label %dec_label_pc_e248thread-pre-split

dec_label_pc_e248thread-pre-split:                ; preds = %dec_label_pc_e230.preheader, %dec_label_pc_e230.loopexit
  %v0_e248.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e248thread-pre-split, %dec_label_pc_e310
  %v0_e248 = phi i32 [ %v0_e248.pr, %dec_label_pc_e248thread-pre-split ], [ 1, %dec_label_pc_e310 ]
  %v2_e248 = icmp eq i32 %v0_e248, 0
  br i1 %v2_e248, label %dec_label_pc_e250, label %dec_label_pc_e338

dec_label_pc_e250:                                ; preds = %dec_label_pc_e248
  %v2_e250 = call i32 @function_118f8(i32 %v2_debc, i32 4096)
  %v0_e254 = load i32, i32* @r5, align 4
  %v2_e25c = inttoptr i32 %v0_e254 to i32*
  %v3_e25c = call i32 @function_10d7c(i32 6, i32* %v2_e25c)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e268 = call i32 @function_1188c(i8* %v2_def0, i32 %v3_e25c)
  %v2_e270 = call i32 @function_11864(i8* %v2_def0)
  %v0_e274 = load i32, i32* @r7, align 4
  %v1_e278 = load i32, i32* @sl, align 4
  %v2_e278 = add i32 %v1_e278, %v2_e270
  store i32 %v2_e278, i32* @r0, align 4
  %v2_e27c = inttoptr i32 %v2_e278 to i8*
  %v3_e27c = call i32 @function_1188c(i8* %v2_e27c, i32 %v0_e274)
  %v2_e284 = call i32 @function_11864(i8* %v2_def0)
  %v0_e288 = load i32, i32* @r5, align 4
  store i32 %v2_e284, i32* @r4, align 4
  %v2_e294 = inttoptr i32 %v0_e288 to i32*
  %v3_e294 = call i32 @function_10d7c(i32 8, i32* %v2_e294)
  %v0_e29c = load i32, i32* @r4, align 4
  %v1_e29c = load i32, i32* @sl, align 4
  %v2_e29c = add i32 %v1_e29c, %v0_e29c
  store i32 %v2_e29c, i32* @r0, align 4
  %v2_e2a0 = inttoptr i32 %v2_e29c to i8*
  %v3_e2a0 = call i32 @function_1188c(i8* %v2_e2a0, i32 %v3_e294)
  %v2_e2a8 = call i32 @function_11864(i8* %v2_def0)
  %v1_e2b0 = load i32, i32* @sl, align 4
  %v2_e2b0 = add i32 %v1_e2b0, %v2_e2a8
  store i32 %v2_e2b0, i32* @r0, align 4
  %v2_e2b4 = inttoptr i32 %v2_e2b0 to i8*
  %v3_e2b4 = call i32 @function_1188c(i8* %v2_e2b4, i32 ptrtoint (i32* @global_var_176a0.19 to i32))
  %v2_e2bc = call i32 @function_11864(i8* %v2_def0)
  %v0_e2c0 = load i32, i32* @r6, align 4
  %v1_e2c0 = add i32 %v0_e2c0, 11
  %v1_e2c4 = load i32, i32* @sl, align 4
  %v2_e2c4 = add i32 %v1_e2c4, %v2_e2bc
  store i32 %v2_e2c4, i32* @r0, align 4
  %v2_e2c8 = inttoptr i32 %v2_e2c4 to i8*
  %v3_e2c8 = call i32 @function_1188c(i8* %v2_e2c8, i32 %v1_e2c0)
  %v3_e2d8 = call i32 @function_1222c(i32 %v2_decc, i32 %v2_debc, i32 4096)
  %v7_e2dc = icmp eq i32 %v3_e2d8, -1
  br i1 %v7_e2dc, label %dec_label_pc_e230.loopexit, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e250
  %v2_e2e8 = call i32 @function_11864(i8* %v2_dedc)
  store i32 %v2_e2e8, i32* @r1, align 4
  %v4_e2fc = call i32 @function_11bb4(i8* %v2_dedc, i32 %v2_e2e8, i32 %v2_e108.pre-phi)
  %v7_e300 = icmp eq i32 %v4_e2fc, -1
  br i1 %v7_e300, label %dec_label_pc_e230.loopexit, label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e2e8
  %v0_e308 = load i32, i32* @r7, align 4
  %v2_e310 = inttoptr i32 %v0_e308 to i8*
  %v3_e310 = call i32 @function_11988(i8* %v2_e310, i32 10)
  %v2_e318 = call i32 @function_12294(i32 %v3_e310, i32 9)
  %v0_e31c = load i32, i32* @r8, align 4
  %v1_e320 = inttoptr i32 %v0_e31c to i32*
  %v2_e320 = call i32 @function_12808(i32* %v1_e320)
  store i32 %v2_e320, i32* @r6, align 4
  %v2_e324 = icmp eq i32 %v2_e320, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e324, label %dec_label_pc_e338, label %dec_label_pc_e248

dec_label_pc_e338:                                ; preds = %dec_label_pc_e230.loopexit, %dec_label_pc_e310, %dec_label_pc_e248, %dec_label_pc_e230.preheader
  %v0_e338 = load i32, i32* @r8, align 4
  %v1_e33c = inttoptr i32 %v0_e338 to i32*
  %v2_e33c = call i32 @function_124fc(i32* %v1_e33c)
  %v0_e340 = load i32, i32* @sb, align 4
  %v1_e344 = inttoptr i32 %v0_e340 to i32*
  %v2_e344 = call i32 @function_12808(i32* %v1_e344)
  %v2_e348 = icmp eq i32 %v2_e344, 0
  br i1 %v2_e348, label %dec_label_pc_e350, label %dec_label_pc_e14c

dec_label_pc_e350:                                ; preds = %dec_label_pc_e13c.loopexit, %dec_label_pc_e338, %dec_label_pc_e14c, %dec_label_pc_e13c.preheader
  %v0_e350 = load i32, i32* @sb, align 4
  %v1_e354 = inttoptr i32 %v0_e350 to i32*
  %v2_e354 = call i32 @function_124fc(i32* %v1_e354)
  %v0_e358 = load i32, i32* @r5, align 4
  %v1_e358 = urem i32 %v0_e358, 256
  br label %dec_label_pc_e35c

dec_label_pc_e35c:                                ; preds = %dec_label_pc_e11c, %dec_label_pc_e350
  %storemerge = phi i32 [ %v1_e358, %dec_label_pc_e350 ], [ 0, %dec_label_pc_e11c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e360 = call i32 @function_143e4(i32 1)
  br label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e0fc, %dec_label_pc_e35c
  %v1_e368 = call i32 @function_10da0(i32 6)
  %v1_e370 = call i32 @function_10da0(i32 7)
  %v1_e378 = call i32 @function_10da0(i32 8)
  %v1_e380 = call i32 @function_10da0(i32 9)
  %v0_e384.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %bb, %dec_label_pc_e368
  %v0_e384 = phi i32 [ %v1_df5c, %bb ], [ %v0_e384.pre, %dec_label_pc_e368 ]
  store i32 %v3_de74, i32* @r4, align 4
  store i32 %v6_de74, i32* @r5, align 4
  store i32 %v9_de74, i32* @r6, align 4
  store i32 %v12_de74, i32* @r7, align 4
  store i32 %v15_de74, i32* @r8, align 4
  store i32 %v18_de74, i32* @sb, align 4
  store i32 %v21_de74, i32* @sl, align 4
  store i32 %v24_de74, i32* @fp, align 4
  store i32 %v27_de74, i32* @lr, align 4
  ret i32 %v0_e384

dec_label_pc_e398:                                ; preds = %dec_label_pc_e06c
  %v1_e398 = add i32 %v0_e398, 1
  %v7_e39c = icmp eq i32 %v0_e398, 0
  br i1 %v7_e39c, label %dec_label_pc_e3a4, label %dec_label_pc_e074

dec_label_pc_e3a4:                                ; preds = %dec_label_pc_e398
  %v1_e3a4 = add i32 %v0_e07c, 3
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i8*
  %v3_e3a4 = load i8, i8* %v2_e3a4, align 1
  %v7_e3a8 = icmp eq i8 %v3_e3a4, 65
  br i1 %v7_e3a8, label %dec_label_pc_e3bc, label %dec_label_pc_e3b0

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_e3a4, %dec_label_pc_e3bc
  %v0_e08483 = phi i32 [ %v0_e08484, %dec_label_pc_e3a4 ], [ 1, %dec_label_pc_e3bc ]
  br label %dec_label_pc_e04c.backedge

dec_label_pc_e04c.backedge:                       ; preds = %dec_label_pc_e3b0, %dec_label_pc_e078
  %v0_e08482 = phi i32 [ %v0_e08483, %dec_label_pc_e3b0 ], [ %v0_e08484, %dec_label_pc_e078 ]
  %v0_e39874 = phi i32 [ %v1_e398, %dec_label_pc_e3b0 ], [ %v0_e078, %dec_label_pc_e078 ]
  %v0_e06c.pr71 = phi i32 [ 0, %dec_label_pc_e3b0 ], [ %v0_e06c.pr72, %dec_label_pc_e078 ]
  %v0_e04c = add i32 %v0_e07c, 1
  %v1_e04c = add i32 %v0_e07c, 3
  %v2_e04c = inttoptr i32 %v1_e04c to i8*
  %v3_e04c = load i8, i8* %v2_e04c, align 1
  %v2_e050 = icmp eq i8 %v3_e04c, 0
  %v1_e054 = add i32 %v0_e05479, 1
  br i1 %v2_e050, label %dec_label_pc_e084, label %dec_label_pc_e05c

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3a4
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_e3b0

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_de74
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_df20

; uselistorder directives
  uselistorder i32 %v1_e054, { 1, 0 }
  uselistorder i8 %v3_e04c, { 1, 0 }
  uselistorder i32 %v0_e08482, { 1, 0 }
  uselistorder i32 %v1_e398, { 1, 0 }
  uselistorder i32 %v2_e344, { 1, 0 }
  uselistorder i32 %v1_e0b0, { 1, 0 }
  uselistorder i32 %v0_e0bc30, { 1, 0 }
  uselistorder i32 %v1_e0d4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e078, { 1, 0 }
  uselistorder i32 %v0_e05479, { 1, 0 }
  uselistorder i32 %v0_e398, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e08484, { 1, 2, 0 }
  uselistorder i32 %v1_e05455, { 1, 0 }
  uselistorder i32 %v2_e038, { 1, 0 }
  uselistorder i32 %v1_e034, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_dff4, { 0, 2, 1 }
  uselistorder i32 %v0_dff416, { 1, 0 }
  uselistorder i32 %v1_dfc0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_df50, { 1, 2, 0 }
  uselistorder i32 %v0_def8, { 1, 0 }
  uselistorder i32 %v2_def4, { 1, 0, 2 }
  uselistorder i8* %v2_dedc, { 1, 0, 2 }
  uselistorder i32 %v2_debc, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_1222c, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11bb4, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 11, 12, 13, 14 }
  uselistorder i32 (i8*, i32, i32)* @function_11ac4, { 1, 0 }
  uselistorder label %dec_label_pc_e3b0, { 1, 0 }
  uselistorder label %dec_label_pc_e384, { 1, 0 }
  uselistorder label %dec_label_pc_e368, { 1, 0 }
  uselistorder label %dec_label_pc_e35c, { 1, 0 }
  uselistorder label %dec_label_pc_e350, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e338, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e248, { 1, 0 }
  uselistorder label %dec_label_pc_e248thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e230.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e14c, { 1, 0 }
  uselistorder label %dec_label_pc_e14c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e13c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e0d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e078, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e05c, { 1, 0 }
  uselistorder label %dec_label_pc_e000, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_df64.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_dfb4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_df7c, { 1, 0 }
  uselistorder label %dec_label_pc_df20, { 1, 0 }
}

define i32 @function_e3f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e3f0:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v3_e3f0 = load i32, i32* @r4, align 4
  %v6_e3f0 = load i32, i32* @r5, align 4
  %v9_e3f0 = load i32, i32* @r6, align 4
  %v12_e3f0 = load i32, i32* @r7, align 4
  %v15_e3f0 = load i32, i32* @r8, align 4
  %v18_e3f0 = load i32, i32* @sb, align 4
  %v21_e3f0 = load i32, i32* @sl, align 4
  %v24_e3f0 = load i32, i32* @fp, align 4
  %v2_e3fc = call i32 @function_12148(i32* null)
  store i32 %v2_e3fc, i32* @r0, align 4
  store i32 %v2_e3fc, i32* @r5, align 4
  %v0_e404 = call i32 @function_121b8()
  %v7_e408 = icmp eq i32 %v0_e404, -1
  %. = zext i1 %v7_e408 to i32
  %tmp69 = icmp slt i32 %v0_e404, 1
  %storemerge50 = select i1 %tmp69, i32 %., i32 1
  store i32 %storemerge50, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20380.89 to i32), i32* %r3.global-to-local, align 4
  %v2_e424 = icmp eq i32 %storemerge50, 0
  store i32 %v0_e404, i32* @global_var_20380.89, align 4
  br i1 %v2_e424, label %dec_label_pc_e43c, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e48c, %dec_label_pc_e3f0
  %v1_e438 = phi i32 [ %v0_e404, %dec_label_pc_e3f0 ], [ 0, %dec_label_pc_e48c ]
  store i32 %v3_e3f0, i32* @r4, align 4
  store i32 %v6_e3f0, i32* @r5, align 4
  store i32 %v9_e3f0, i32* @r6, align 4
  store i32 %v12_e3f0, i32* @r7, align 4
  store i32 %v15_e3f0, i32* @r8, align 4
  store i32 %v18_e3f0, i32* @sb, align 4
  store i32 %v21_e3f0, i32* @sl, align 4
  store i32 %v24_e3f0, i32* @fp, align 4
  ret i32 %v1_e438

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e3f0
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v1_e450 = call i32 @function_de74(i32 20736)
  %v2_e454 = icmp eq i32 %v1_e450, 0
  br i1 %v2_e454, label %dec_label_pc_e45c, label %dec_label_pc_e6b8

dec_label_pc_e45c:                                ; preds = %dec_label_pc_e43c, %dec_label_pc_e6b8, %dec_label_pc_e6e0
  %v1_e460 = call i32 @function_143e4(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_e468 = call i32 @function_12f1c()
  %v1_e468 = inttoptr i32 %v0_e468 to i8*
  store i32 %v0_e468, i32* @global_var_2240c.93, align 4
  store i32 ptrtoint (i32* @global_var_20384.95 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v1_e468, align 1
  %v0_e480 = load i32, i32* %r2.global-to-local, align 4
  %v1_e480 = load i32, i32* %r3.global-to-local, align 4
  %v2_e480 = inttoptr i32 %v1_e480 to i32*
  store i32 %v0_e480, i32* %v2_e480, align 4
  %v0_e484 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e484, i32* @fp, align 4
  store i32 400, i32* @r6, align 4
  %v2_e580 = ptrtoint i32* %stack_var_-120 to i32
  %v2_e58c = bitcast i32* %stack_var_-120 to i8*
  %v2_e5ec = ptrtoint i32* %stack_var_-632 to i32
  br label %dec_label_pc_e48c

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e54c, %dec_label_pc_e45c
  %v1_e490 = call i32 @function_10e40(i32 6)
  %v3_e49c = call i32 @function_10d7c(i32 6, i32* null)
  %v1_e4a0 = call i32 @function_126c4(i32 %v3_e49c)
  store i32 %v1_e4a0, i32* @sl, align 4
  %v2_e4a4 = icmp eq i32 %v1_e4a0, 0
  br i1 %v2_e4a4, label %dec_label_pc_e430, label %dec_label_pc_e4ac

dec_label_pc_e4ac:                                ; preds = %dec_label_pc_e48c
  %v1_e4b0 = call i32 @function_10da0(i32 6)
  %v0_e4b431 = load i32, i32* @sl, align 4
  %v1_e4b832 = inttoptr i32 %v0_e4b431 to i32*
  %v2_e4b833 = call i32 @function_12808(i32* %v1_e4b832)
  %v2_e4bc35 = icmp eq i32 %v2_e4b833, 0
  br i1 %v2_e4bc35, label %dec_label_pc_e54c, label %dec_label_pc_e4c4.preheader

dec_label_pc_e4c4.preheader:                      ; preds = %dec_label_pc_e4ac, %dec_label_pc_e4b4.backedge
  %v0_e4c440 = phi i32 [ %v2_e4b8, %dec_label_pc_e4b4.backedge ], [ %v2_e4b833, %dec_label_pc_e4ac ]
  br label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4c4.preheader, %dec_label_pc_e534
  %v0_e4d4 = phi i32 [ %v0_e4c440, %dec_label_pc_e4c4.preheader ], [ %v2_e540, %dec_label_pc_e534 ]
  %v1_e4c4 = add i32 %v0_e4d4, 11
  %v2_e4c4 = inttoptr i32 %v1_e4c4 to i8*
  %v3_e4c4 = load i8, i8* %v2_e4c4, align 1
  %v4_e4c4 = zext i8 %v3_e4c4 to i32
  %v1_e4c8 = add nsw i32 %v4_e4c4, -48
  store i32 %v1_e4c8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e4c8, 9
  br i1 %tmp, label %dec_label_pc_e4b4.backedge, label %dec_label_pc_e4d4

dec_label_pc_e4d4:                                ; preds = %dec_label_pc_e4c4
  store i32 %v1_e4c4, i32* @r4, align 4
  %v3_e4e0 = call i32 @function_11988(i8* %v2_e4c4, i32 10)
  %v0_e4e4 = load i32, i32* @r6, align 4
  store i32 %v3_e4e0, i32* @r8, align 4
  %v0_e4ec = load i32, i32* @fp, align 4
  %v1_e4ec = add i32 %v0_e4ec, 1
  store i32 %v1_e4ec, i32* @fp, align 4
  %v5_e4f0 = icmp slt i32 %v0_e4e4, %v3_e4e0
  %v2_e55c = call i32 @function_12148(i32* null)
  br i1 %v5_e4f0, label %dec_label_pc_e558, label %dec_label_pc_e4f4

dec_label_pc_e4f4:                                ; preds = %dec_label_pc_e4d4
  %v0_e4fc = load i32, i32* @r5, align 4
  %v2_e4fc = sub i32 %v2_e55c, %v0_e4fc
  %v7_e504 = icmp slt i32 %v2_e4fc, 601
  br i1 %v7_e504, label %dec_label_pc_e50c, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e4f4
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_e4b4.backedge

dec_label_pc_e50c:                                ; preds = %dec_label_pc_e4f4
  %v0_e50c = load i32, i32* @r8, align 4
  %v7_e510 = icmp slt i32 %v0_e50c, 401
  br i1 %v7_e510, label %dec_label_pc_e4b4.backedge, label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %dec_label_pc_e50c
  %v2_e518 = load i32, i32* @fp, align 4
  %v3_e518 = zext i32 %v2_e518 to i64
  %v4_e518 = mul nuw i64 %v3_e518, 3435973837
  %v3_e51c1 = udiv i64 %v4_e518, 34359738368
  %v3_e5203 = mul nuw nsw i64 %v3_e51c1, 8
  %v3_e520 = trunc i64 %v3_e5203 to i32
  store i32 %v3_e520, i32* %r3.global-to-local, align 4
  %v2_e5245 = mul nuw nsw i64 %v3_e51c1, 2
  %v2_e524 = trunc i64 %v2_e5245 to i32
  %v2_e528 = add i32 %v3_e520, %v2_e524
  store i32 %v2_e528, i32* %r2.global-to-local, align 4
  %v9_e52c = icmp eq i32 %v2_e518, %v2_e528
  br i1 %v9_e52c, label %dec_label_pc_e534, label %dec_label_pc_e4b4.backedge

dec_label_pc_e534:                                ; preds = %dec_label_pc_e514
  %v1_e538 = call i32 @function_143e4(i32 1)
  %v0_e53c = load i32, i32* @sl, align 4
  %v1_e540 = inttoptr i32 %v0_e53c to i32*
  %v2_e540 = call i32 @function_12808(i32* %v1_e540)
  %v2_e544 = icmp eq i32 %v2_e540, 0
  br i1 %v2_e544, label %dec_label_pc_e54c, label %dec_label_pc_e4c4

dec_label_pc_e54c:                                ; preds = %dec_label_pc_e4b4.backedge, %dec_label_pc_e534, %dec_label_pc_e4ac
  %v0_e54c = load i32, i32* @sl, align 4
  %v1_e550 = inttoptr i32 %v0_e54c to i32*
  %v2_e550 = call i32 @function_124fc(i32* %v1_e550)
  br label %dec_label_pc_e48c

dec_label_pc_e558:                                ; preds = %dec_label_pc_e4d4
  %v1_e568 = call i32 @function_10e40(i32 6)
  %v1_e570 = call i32 @function_10e40(i32 10)
  %v3_e57c = call i32 @function_10d7c(i32 6, i32* null)
  store i32 %v2_e580, i32* @sb, align 4
  store i32 %v2_e580, i32* @r0, align 4
  %v3_e58c = call i32 @function_1188c(i8* %v2_e58c, i32 %v3_e57c)
  %v1_e590 = load i32, i32* @sb, align 4
  %v2_e590 = add i32 %v1_e590, %v3_e58c
  store i32 %v2_e590, i32* @r5, align 4
  %v0_e594 = load i32, i32* @r4, align 4
  store i32 %v2_e590, i32* @r0, align 4
  %v2_e59c = inttoptr i32 %v2_e590 to i8*
  %v3_e59c = call i32 @function_1188c(i8* %v2_e59c, i32 %v0_e594)
  store i32 %v3_e59c, i32* @r4, align 4
  %v3_e5ac = call i32 @function_10d7c(i32 10, i32* null)
  %v0_e5b4 = load i32, i32* @r4, align 4
  %v1_e5b4 = load i32, i32* @r5, align 4
  %v2_e5b4 = add i32 %v1_e5b4, %v0_e5b4
  store i32 %v2_e5b4, i32* @r0, align 4
  %v2_e5b8 = inttoptr i32 %v2_e5b4 to i8*
  %v3_e5b8 = call i32 @function_1188c(i8* %v2_e5b8, i32 %v3_e5ac)
  %v1_e5c0 = call i32 @function_10da0(i32 6)
  %v1_e5c8 = call i32 @function_10da0(i32 10)
  %v2_e5d4 = call i32 @function_120d4(i32 %v2_e580, i32 0)
  %v7_e5d8 = icmp eq i32 %v2_e5d4, -1
  store i32 %v2_e5d4, i32* @r7, align 4
  br i1 %v7_e5d8, label %dec_label_pc_e684, label %dec_label_pc_e5e4

dec_label_pc_e5e4:                                ; preds = %dec_label_pc_e558
  %v1_e5e8 = call i32 @function_10e40(i32 62)
  store i32 %v2_e5ec, i32* @r6, align 4
  %v0_e5f027 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_e5fc28 = call i32 @function_12260(i32 %v0_e5f027)
  store i32 %v1_e5fc28, i32* @r4, align 4
  %tmp72 = icmp slt i32 %v1_e5fc28, 1
  br i1 %tmp72, label %dec_label_pc_e6a4, label %dec_label_pc_e608

dec_label_pc_e608:                                ; preds = %dec_label_pc_e5e4, %dec_label_pc_e5f0.backedge
  %v3_e610 = call i32 @function_10d7c(i32 62, i32* null)
  store i32 %v3_e610, i32* @r5, align 4
  %v3_e620 = call i32 @function_10d7c(i32 62, i32* null)
  %v1_e624 = inttoptr i32 %v3_e620 to i8*
  %v2_e624 = call i32 @function_11864(i8* %v1_e624)
  %v0_e628 = load i32, i32* @r4, align 4
  %v5_e62c = icmp slt i32 %v0_e628, %v2_e624
  br i1 %v5_e62c, label %dec_label_pc_e5f0.backedge, label %.thread12

dec_label_pc_e5f0.backedge:                       ; preds = %dec_label_pc_e654, %.thread12, %dec_label_pc_e608
  %v0_e5f0 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_e5fc = call i32 @function_12260(i32 %v0_e5f0)
  store i32 %v1_e5fc, i32* @r4, align 4
  %tmp73 = icmp slt i32 %v1_e5fc, 1
  br i1 %tmp73, label %dec_label_pc_e6a4, label %dec_label_pc_e608

.thread12:                                        ; preds = %dec_label_pc_e608
  %v1_e63819 = add i32 %v0_e628, -1
  store i32 %v1_e63819, i32* @r4, align 4
  %v2_e63820 = icmp eq i32 %v0_e628, 0
  br i1 %v2_e63820, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e640.lr.ph

dec_label_pc_e640.lr.ph:                          ; preds = %.thread12
  %v0_e640.pre = load i32, i32* @r5, align 4
  %v1_e644.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %dec_label_pc_e654, %dec_label_pc_e640.lr.ph
  %v0_e638 = phi i32 [ %v1_e63819, %dec_label_pc_e640.lr.ph ], [ %v1_e638, %dec_label_pc_e654 ]
  %v0_e654 = phi i32 [ 0, %dec_label_pc_e640.lr.ph ], [ %v1_e654, %dec_label_pc_e654 ]
  %v1_e640 = phi i32 [ 0, %dec_label_pc_e640.lr.ph ], [ %v1_e64043, %dec_label_pc_e654 ]
  %v2_e640 = add i32 %v1_e640, %v0_e640.pre
  %v3_e640 = inttoptr i32 %v2_e640 to i8*
  %v4_e640 = load i8, i8* %v3_e640, align 1
  %v6_e640 = zext i8 %v4_e640 to i32
  store i32 %v6_e640, i32* %r2.global-to-local, align 4
  %v2_e644 = add i32 %v0_e654, %v1_e644.pre
  %v3_e644 = inttoptr i32 %v2_e644 to i8*
  %v4_e644 = load i8, i8* %v3_e644, align 1
  %v6_e644 = zext i8 %v4_e644 to i32
  store i32 %v6_e644, i32* %r3.global-to-local, align 4
  %v9_e648 = icmp eq i8 %v4_e644, %v4_e640
  br i1 %v9_e648, label %dec_label_pc_e65c, label %bb74

bb74:                                             ; preds = %dec_label_pc_e640
  br label %dec_label_pc_e654

dec_label_pc_e654:                                ; preds = %bb74, %dec_label_pc_e65c
  %v1_e64043 = phi i32 [ %v1_e65c, %dec_label_pc_e65c ], [ 0, %bb74 ]
  %v1_e654 = add i32 %v0_e654, 1
  %v1_e638 = add i32 %v0_e638, -1
  store i32 %v1_e638, i32* @r4, align 4
  %v2_e638 = icmp eq i32 %v0_e638, 0
  br i1 %v2_e638, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e640

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e640
  %v1_e65c = add i32 %v1_e640, 1
  %v9_e660 = icmp eq i32 %v2_e624, %v1_e65c
  br i1 %v9_e660, label %dec_label_pc_e668, label %dec_label_pc_e654

dec_label_pc_e668:                                ; preds = %dec_label_pc_e65c
  %v1_e66c = call i32 @function_10da0(i32 62)
  %v0_e670 = load i32, i32* @r7, align 4
  %v1_e674 = call i32 @function_124c8(i32 %v0_e670)
  %v0_e678 = load i32, i32* @r8, align 4
  %v2_e680 = call i32 @function_12294(i32 %v0_e678, i32 9)
  br label %dec_label_pc_e684

dec_label_pc_e684:                                ; preds = %dec_label_pc_e558, %dec_label_pc_e6a4, %dec_label_pc_e668
  %v2_e68c = call i32 @function_118f8(i32 %v2_e580, i32 64)
  %v1_e694 = call i32 @function_143e4(i32 1)
  store i32 %v2_e55c, i32* @r5, align 4
  %v0_e69c = load i32, i32* @r8, align 4
  store i32 %v0_e69c, i32* @r6, align 4
  br label %dec_label_pc_e4b4.backedge

dec_label_pc_e4b4.backedge:                       ; preds = %dec_label_pc_e514, %dec_label_pc_e50c, %dec_label_pc_e4c4, %dec_label_pc_e684, %.thread7
  %v0_e4b4 = load i32, i32* @sl, align 4
  %v1_e4b8 = inttoptr i32 %v0_e4b4 to i32*
  %v2_e4b8 = call i32 @function_12808(i32* %v1_e4b8)
  %v2_e4bc = icmp eq i32 %v2_e4b8, 0
  br i1 %v2_e4bc, label %dec_label_pc_e54c, label %dec_label_pc_e4c4.preheader

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e5f0.backedge, %dec_label_pc_e5e4
  %v1_e6a8 = call i32 @function_10da0(i32 62)
  %v0_e6ac = load i32, i32* @r7, align 4
  %v1_e6b0 = call i32 @function_124c8(i32 %v0_e6ac)
  br label %dec_label_pc_e684

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e43c
  %v2_e440 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_e440, i32* %r3.global-to-local, align 4
  %v0_e6c0 = load i32, i32* @r4, align 4
  store i32 %v0_e6c0, i32* %r2.global-to-local, align 4
  %v3_e6d0 = call i32 @function_12cd4(i32 2, i32 1, i32 %v0_e6c0)
  %v7_e6d4 = icmp eq i32 %v3_e6d0, -1
  store i32 %v3_e6d0, i32* @r4, align 4
  br i1 %v7_e6d4, label %dec_label_pc_e45c, label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e6b8
  %v2_e6e0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e6e8 = call i32 @function_12a84(i32 %v3_e6d0, i32 %v2_e6e0, i32 16)
  %v0_e6ec = load i32, i32* @r4, align 4
  %v2_e6f4 = call i32 @function_12b70(i32 %v0_e6ec, i32 1)
  br label %dec_label_pc_e45c

; uselistorder directives
  uselistorder i32 %v3_e6d0, { 2, 1, 0 }
  uselistorder i32 %v2_e4b8, { 1, 0 }
  uselistorder i32 %v1_e65c, { 1, 0 }
  uselistorder i32 %v1_e638, { 1, 0 }
  uselistorder i32 %v1_e640, { 1, 0 }
  uselistorder i32 %v0_e654, { 1, 0 }
  uselistorder i32 %v0_e638, { 1, 0 }
  uselistorder i32 %v0_e628, { 1, 0, 2 }
  uselistorder i32 %v2_e624, { 1, 0 }
  uselistorder i32 %v2_e5d4, { 1, 0 }
  uselistorder i32 %v2_e540, { 1, 0 }
  uselistorder i32 %storemerge50, { 1, 0 }
  uselistorder i32 %v0_e404, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 (i8*, i32)* @function_11988, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 (i32*)* @function_12808, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_126c4, { 2, 1, 0 }
  uselistorder i32* @global_var_20380.89, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e4b4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_e684, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e654, { 1, 0 }
  uselistorder label %dec_label_pc_e608, { 1, 0 }
  uselistorder label %dec_label_pc_e4c4, { 1, 0 }
  uselistorder label %dec_label_pc_e4c4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e45c, { 2, 1, 0 }
}

define i32 @function_e70c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e70c:
  store i32 59172, i32* inttoptr (i32 131512 to i32*), align 8
  ret i32 %arg1
}

define i32 @function_e724(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e724:
  %v1_e72c = call i32 @function_10e40(i32 2)
  store i32 ptrtoint (i16** @global_var_22410.100 to i32), i32* @r4, align 4
  store i32 1503156639, i32* @global_var_22414.102, align 4
  %v3_e744 = call i32 @function_10d7c(i32 2, i32* null)
  %v4_e744 = inttoptr i32 %v3_e744 to i16*
  %v3_e748 = load i16, i16* %v4_e744, align 2
  store i16 %v3_e748, i16* bitcast (i32* @global_var_22412.103 to i16*), align 4
  %v1_e754 = call i32 @function_10da0(i32 2)
  ret i32 %v1_e754
}

define i32 @function_e768(i32 %arg1) local_unnamed_addr {
dec_label_pc_e768:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_e768 = load i32, i32* @r6, align 4
  %v12_e768 = load i32, i32* @r7, align 4
  %v15_e768 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e784 = call i32 @function_12cd4(i32 2, i32 1, i32 0)
  store i32 %v3_e784, i32* %r0.global-to-local, align 4
  store i32 131504, i32* @r6, align 4
  %v7_e78c = icmp eq i32 %v3_e784, -1
  store i32 %v3_e784, i32* inttoptr (i32 131504 to i32*), align 16
  br i1 %v7_e78c, label %dec_label_pc_e768.dec_label_pc_e844_crit_edge, label %dec_label_pc_e798

dec_label_pc_e768.dec_label_pc_e844_crit_edge:    ; preds = %dec_label_pc_e768
  %v1_e84c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e844

dec_label_pc_e798:                                ; preds = %dec_label_pc_e768
  %v2_e798 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_e798, i32* @r3, align 4
  %v0_e79c = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_e7ac = load i32, i32* %r0.global-to-local, align 4
  %v5_e7ac = call i32 @function_12c90(i32 %v0_e7ac, i32 %v0_e79c, i32 2, i32 %v2_e798, i32 4)
  store i32 %v5_e7ac, i32* %r0.global-to-local, align 4
  %v0_e7b0 = load i32, i32* @r6, align 4
  %v1_e7b0 = inttoptr i32 %v0_e7b0 to i32*
  %v2_e7b0 = load i32, i32* %v1_e7b0, align 4
  store i32 %v2_e7b0, i32* %r0.global-to-local, align 4
  %v2_e7c0 = call i32 @function_122fc(i32 %v2_e7b0, i32 3)
  %v0_e7c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_e7b0, i32* %r0.global-to-local, align 4
  %v2_e7d0 = call i32 @function_122fc(i32 %v2_e7b0, i32 %v0_e7c4)
  store i32 %v2_e7d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_e800 = call i32 @function_128f0()
  store i32 %v0_e800, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_e808 = inttoptr i32 %v0_e800 to i32*
  store i32 0, i32* %v2_e808, align 4
  %v2_e80c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e80c, i32* @r5, align 4
  store i32 %v0_e800, i32* @r4, align 4
  %v0_e81c = load i32, i32* @r6, align 4
  %v1_e81c = inttoptr i32 %v0_e81c to i32*
  %v2_e81c = load i32, i32* %v1_e81c, align 4
  store i32 %v2_e81c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_e828 = call i32 @function_12a84(i32 %v2_e81c, i32 %v2_e80c, i32 16)
  store i32 %v3_e828, i32* %r0.global-to-local, align 4
  %v7_e82c = icmp eq i32 %v3_e828, -1
  br i1 %v7_e82c, label %dec_label_pc_e850, label %dec_label_pc_e834

dec_label_pc_e834:                                ; preds = %dec_label_pc_e798
  %v2_e83c = load i32, i32* inttoptr (i32 131504 to i32*), align 16
  store i32 %v2_e83c, i32* %r0.global-to-local, align 4
  %v2_e840 = call i32 @function_12b70(i32 %v2_e83c, i32 1)
  store i32 %v2_e840, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e768.dec_label_pc_e844_crit_edge, %dec_label_pc_e85c, %dec_label_pc_e834
  %v1_e84c = phi i32 [ %v1_e84c.pre, %dec_label_pc_e768.dec_label_pc_e844_crit_edge ], [ %v1_e8a4, %dec_label_pc_e85c ], [ %v2_e840, %dec_label_pc_e834 ]
  store i32 %v9_e768, i32* @r6, align 4
  store i32 %v12_e768, i32* @r7, align 4
  store i32 %v15_e768, i32* @r8, align 4
  ret i32 %v1_e84c

dec_label_pc_e850:                                ; preds = %dec_label_pc_e798
  %v0_e850 = load i32, i32* @r4, align 4
  %v1_e850 = inttoptr i32 %v0_e850 to i32*
  %v2_e850 = load i32, i32* %v1_e850, align 4
  %v7_e854 = icmp eq i32 %v2_e850, 99
  br i1 %v7_e854, label %dec_label_pc_e8ac, label %dec_label_pc_e85c

dec_label_pc_e85c:                                ; preds = %dec_label_pc_e8ac, %bb, %dec_label_pc_e850
  %v0_e874 = load i32, i32* @r6, align 4
  %v1_e874 = inttoptr i32 %v0_e874 to i32*
  %v2_e874 = load i32, i32* %v1_e874, align 4
  store i32 %v2_e874, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_e884 = call i32 @function_12abc(i32 %v2_e874, i32 %v2_e80c, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_e88c = call i32 @function_143e4(i32 5)
  store i32 %v1_e88c, i32* %r0.global-to-local, align 4
  %v0_e890 = load i32, i32* @r6, align 4
  %v1_e890 = inttoptr i32 %v0_e890 to i32*
  %v2_e890 = load i32, i32* %v1_e890, align 4
  store i32 %v2_e890, i32* %r0.global-to-local, align 4
  %v1_e894 = call i32 @function_124c8(i32 %v2_e890)
  store i32 50951, i32* %r0.global-to-local, align 4
  %v1_e8a0 = call i32 @function_de74(i32 50951)
  store i32 %v1_e8a0, i32* %r0.global-to-local, align 4
  %v1_e8a4 = call i32 @function_e768(i32 %v1_e8a0)
  store i32 %v1_e8a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e844

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e850
  %v0_e8ac = load i32, i32* @r8, align 4
  %v1_e8ac = inttoptr i32 %v0_e8ac to i8*
  %v2_e8ac = load i8, i8* %v1_e8ac, align 1
  %v3_e8ac = zext i8 %v2_e8ac to i32
  %v1_e8b0 = load i32, i32* @r7, align 4
  %v9_e8b0 = icmp eq i32 %v3_e8ac, %v1_e8b0
  br i1 %v9_e8b0, label %dec_label_pc_e85c, label %bb

bb:                                               ; preds = %dec_label_pc_e8ac
  %v2_e8b8 = trunc i32 %v1_e8b0 to i8
  store i8 %v2_e8b8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_e85c

; uselistorder directives
  uselistorder i32 %v1_e8a4, { 1, 0 }
  uselistorder i32 %v2_e80c, { 1, 0, 2 }
  uselistorder i32 %v2_e7b0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_e784, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 1, 0, 2, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 17, 16, 18, 15 }
  uselistorder i32 (i32)* @function_de74, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12b70, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12a84, { 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_e85c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e844, { 1, 2, 0 }
}

define i32 @function_e8c0(i16 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e8c0:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = sext i16 %arg1 to i32
  %v0_e8c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e8c0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e8c0
  %v5_e8c0 = inttoptr i32 %arg2 to i16*
  store i16 %arg1, i16* %v5_e8c0, align 2
  %v8_e8c0 = load i32, i32* %r2.global-to-local, align 4
  %v9_e8c0 = sub i32 %v8_e8c0, %tmp
  store i32 %v9_e8c0, i32* %r2.global-to-local, align 4
  %v5_e8c4 = inttoptr i32 %v9_e8c0 to i16*
  store i16 %arg1, i16* %v5_e8c4, align 2
  %v6_e8c4 = load i32, i32* @ip, align 4
  %v7_e8c4 = load i32, i32* %r2.global-to-local, align 4
  %v8_e8c4 = sub i32 %v7_e8c4, %v6_e8c4
  %v2_e8c8 = load i32, i32* @r8, align 4
  %v5_e8c8 = mul i32 %v2_e8c8, 256
  %v6_e8c8 = and i32 %v5_e8c8, %v8_e8c4
  store i32 %v6_e8c8, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e8c0, %bb
  ret i32 %tmp

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 0, 1 }
  uselistorder i16 %arg1, { 1, 0, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e8cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_e8cc:
  %stack_var_-20 = alloca i32, align 4
  %v3_e8cc = load i32, i32* @r4, align 4
  %v6_e8cc = load i32, i32* @r5, align 4
  %v0_e8d4 = call i32 @function_121b8()
  %v7_e8d8 = icmp eq i32 %v0_e8d4, -1
  %. = zext i1 %v7_e8d8 to i32
  %tmp12 = icmp slt i32 %v0_e8d4, 1
  %storemerge5 = select i1 %tmp12, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_e8f4 = icmp eq i32 %storemerge5, 0
  store i32 %v0_e8d4, i32* @global_var_20388.108, align 4
  br i1 %v2_e8f4, label %dec_label_pc_e90c, label %dec_label_pc_e900

dec_label_pc_e900:                                ; preds = %dec_label_pc_e8cc
  store i32 %v3_e8cc, i32* @r4, align 4
  store i32 %v6_e8cc, i32* @r5, align 4
  ret i32 %v0_e8d4

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e8cc
  store i32 1, i32* %stack_var_-20, align 4
  %v1_e918 = call i32 @function_10e40(i32 59)
  %v1_e920 = call i32 @function_10e40(i32 60)
  %v0_e924 = load i32, i32* @r5, align 4
  %v2_e92c = inttoptr i32 %v0_e924 to i32*
  %v3_e92c = call i32 @function_10d7c(i32 59, i32* %v2_e92c)
  %v2_e934 = call i32 @function_120d4(i32 %v3_e92c, i32 2)
  %v7_e938 = icmp eq i32 %v2_e934, -1
  store i32 %v2_e934, i32* @r4, align 4
  br i1 %v7_e938, label %dec_label_pc_e980, label %dec_label_pc_e944

dec_label_pc_e944:                                ; preds = %dec_label_pc_e980, %dec_label_pc_e90c
  %v0_e950 = phi i32 [ %v2_e990, %dec_label_pc_e980 ], [ %v2_e934, %dec_label_pc_e90c ]
  %v2_e954 = ptrtoint i32* %stack_var_-20 to i32
  %v3_e958 = call i32 @function_1243c(i32 %v0_e950, i32 -2147199228, i32 %v2_e954)
  br label %dec_label_pc_e95c

dec_label_pc_e95c:                                ; preds = %dec_label_pc_e95c, %dec_label_pc_e944
  %v0_e968 = load i32, i32* @r4, align 4
  %v3_e970 = call i32 @function_1243c(i32 %v0_e968, i32 -2147199227, i32 0)
  %v1_e978 = call i32 @function_143e4(i32 10)
  br label %dec_label_pc_e95c

dec_label_pc_e980:                                ; preds = %dec_label_pc_e90c
  %v0_e980 = load i32, i32* @r5, align 4
  %v2_e988 = inttoptr i32 %v0_e980 to i32*
  %v3_e988 = call i32 @function_10d7c(i32 60, i32* %v2_e988)
  %v2_e990 = call i32 @function_120d4(i32 %v3_e988, i32 2)
  %v3_e994 = icmp eq i32 %v2_e990, -1
  store i32 %v2_e990, i32* @r4, align 4
  br i1 %v3_e994, label %dec_label_pc_e9a0, label %dec_label_pc_e944

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e980
  %v1_e9a4 = call i32 @function_10da0(i32 59)
  %v1_e9ac = call i32 @function_10da0(i32 60)
  %v0_e9b0 = load i32, i32* @r5, align 4
  %v1_e9b4 = call i32 @function_1432c(i32 %v0_e9b0)
  %v0_e9b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e9b8, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_e9a0
  %v2_e9b8 = load i32, i32* @r8, align 4
  %v5_e9b8 = mul i32 %v2_e9b8, 128
  %v6_e9b8 = and i32 %v5_e9b8, %arg1
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_e9a0, %bb15
  %v7_e9b8 = phi i32 [ %v1_e9b4, %dec_label_pc_e9a0 ], [ %v6_e9b8, %bb15 ]
  ret i32 %v7_e9b8

; uselistorder directives
  uselistorder i32 %v2_e990, { 1, 2, 0 }
  uselistorder i32 %v2_e934, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_e8d4, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 59, { 0, 1, 2, 4, 3 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_e9bc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e9bc:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_e9bc = load i32, i32* @r8, align 4
  %v2_e9cc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_e9cc, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_e9e4 = call i32 @function_12d6c(i32* nonnull %stack_var_-64)
  store i32 %v2_e9cc, i32* @r0, align 4
  %v2_e9f0 = call i32 @function_12d28(i32 %v2_e9cc, i32 2)
  %v0_e9f4 = load i32, i32* @r5, align 4
  store i32 %v0_e9f4, i32* %r2.global-to-local, align 4
  %v3_ea00 = call i32 @function_12490(i32 %v0_e9f4, i32 %v2_e9cc, i32 %v0_e9f4)
  %v2_ea0c = call i32 @function_12d80(i32 17, i32 1)
  %v2_ea18 = call i32 @function_12d80(i32 5, i32 59148)
  %v0_ea1c = call i32 @function_11b20()
  store i32 ptrtoint (i16** @global_var_22410.100 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_22414.102, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_ea1c, i32* @global_var_22408.78, align 4
  store i16 5888, i16* bitcast (i32* @global_var_22412.103 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_22410.100 to i16*), align 4
  %v6_ea44 = call i32 @function_10ee0(i32 %v0_ea1c, i32 ptrtoint (i32* @global_var_22408.78 to i32), i32 ptrtoint (i16** @global_var_22410.100 to i32), i32 5888)
  store i32 59172, i32* %r3.global-to-local, align 4
  store i32 131512, i32* @lr, align 4
  %v2_ea50 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_ea50, i32* @sb, align 4
  store i32 59172, i32* inttoptr (i32 131512 to i32*), align 8
  %v1_ea58 = call i32 @function_e768(i32 %v6_ea44)
  %v1_ea5c = call i32 @function_f1e4(i32 %v1_ea58)
  %v2_ea68 = call i32 @function_118f8(i32 %v2_ea50, i32 32)
  %v0_ea6c = load i32, i32* @r6, align 4
  %v7_ea6c = icmp eq i32 %v0_ea6c, 2
  br i1 %v7_ea6c, label %dec_label_pc_eb9c, label %dec_label_pc_ea74

dec_label_pc_ea74:                                ; preds = %dec_label_pc_eb9c, %dec_label_pc_e9bc, %dec_label_pc_ebac
  %v0_ea74 = call i32 @function_f188()
  store i32 %v0_ea74, i32* @r6, align 4
  %v0_ea7c = load i32, i32* @r8, align 4
  %v1_ea7c = inttoptr i32 %v0_ea7c to i32*
  %v2_ea7c = load i32, i32* %v1_ea7c, align 4
  %v1_ea80 = inttoptr i32 %v2_ea7c to i8*
  %v2_ea80 = call i32 @function_11864(i8* %v1_ea80)
  %v0_ea88 = load i32, i32* @r8, align 4
  %v1_ea88 = inttoptr i32 %v0_ea88 to i32*
  %v2_ea88 = load i32, i32* %v1_ea88, align 4
  %v1_ea8c = inttoptr i32 %v2_ea88 to i8*
  %v2_ea8c = call i32 @function_11864(i8* %v1_ea8c)
  %v1_ea90 = sub i32 20, %v2_ea80
  store i32 %v2_ea8c, i32* @r4, align 4
  %v0_ea98 = load i32, i32* @r6, align 4
  %v2_ea9c = call i32 @function_11f50(i32 %v0_ea98, i32 %v1_ea90)
  %v2_eaa0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_eaa0, i32* @r5, align 4
  %v0_eaa4 = load i32, i32* @r4, align 4
  %v2_eaa4 = add i32 %v0_eaa4, %v1_ea90
  store i32 %v2_eaa4, i32* @r4, align 4
  %v2_eab0 = call i32 @function_f24c(i32 %v2_eaa0, i32 %v2_eaa4)
  %v2_eab4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_eab8 = load i32, i32* @r4, align 4
  %v2_eab8 = add i32 %v1_eab8, %v2_eab4
  store i32 %v2_eab8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_eac4 = load i32, i32* @r8, align 4
  %v1_eac4 = inttoptr i32 %v0_eac4 to i32*
  %v2_eac4 = load i32, i32* %v1_eac4, align 4
  store i32 %v2_eac4, i32* @r0, align 4
  %v3_eac8 = add i32 %v2_eab8, -80
  %v4_eac8 = inttoptr i32 %v3_eac8 to i8*
  store i8 0, i8* %v4_eac8, align 1
  %v2_eacc = inttoptr i32 %v2_eac4 to i8*
  %v3_eacc = call i32 @function_1188c(i8* %v2_eacc, i32 %v2_eaa0)
  %v2_ead8 = call i32 @function_118f8(i32 %v2_eaa0, i32 32)
  %v0_eadc = call i32 @function_f188()
  store i32 %v0_eadc, i32* @r7, align 4
  %v0_eae4 = load i32, i32* @r8, align 4
  %v1_eae4 = inttoptr i32 %v0_eae4 to i32*
  %v2_eae4 = load i32, i32* %v1_eae4, align 4
  %v1_eae8 = inttoptr i32 %v2_eae4 to i8*
  %v2_eae8 = call i32 @function_11864(i8* %v1_eae8)
  store i32 %v2_eae8, i32* @r6, align 4
  %v0_eaf0 = load i32, i32* @r8, align 4
  %v1_eaf0 = inttoptr i32 %v0_eaf0 to i32*
  %v2_eaf0 = load i32, i32* %v1_eaf0, align 4
  %v1_eaf4 = inttoptr i32 %v2_eaf0 to i8*
  %v2_eaf4 = call i32 @function_11864(i8* %v1_eaf4)
  %v0_eaf8 = load i32, i32* @r6, align 4
  %v1_eaf8 = sub i32 20, %v0_eaf8
  store i32 %v2_eaf4, i32* @r4, align 4
  %v0_eb00 = load i32, i32* @r7, align 4
  %v2_eb04 = call i32 @function_11f50(i32 %v0_eb00, i32 %v1_eaf8)
  %v0_eb08 = load i32, i32* @r4, align 4
  %v2_eb08 = add i32 %v0_eb08, %v1_eaf8
  store i32 %v2_eb08, i32* @r4, align 4
  %v2_eb14 = call i32 @function_f24c(i32 %v2_eaa0, i32 %v2_eb08)
  store i32 %v2_eab4, i32* %r2.global-to-local, align 4
  %v1_eb1c = load i32, i32* @r4, align 4
  %v2_eb1c = add i32 %v1_eb1c, %v2_eab4
  store i32 %v2_eb1c, i32* %r3.global-to-local, align 4
  %v0_eb20 = load i32, i32* @sl, align 4
  %v1_eb20 = trunc i32 %v0_eb20 to i8
  %v3_eb20 = add i32 %v2_eb1c, -80
  %v4_eb20 = inttoptr i32 %v3_eb20 to i8*
  store i8 %v1_eb20, i8* %v4_eb20, align 1
  %v4_eb2c = call i32 @function_12178(i32 15, i32 %v2_eaa0, i32 %v2_eab4, i32 %v2_eb1c)
  %v1_eb34 = call i32 @function_10e40(i32 5)
  %v3_eb44 = call i32 @function_10d7c(i32 5, i32* nonnull %stack_var_-48)
  %v3_eb48 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_eb48, i32* %r2.global-to-local, align 4
  %v2_eb54 = call i32 @function_123d4(i32 1, i32 %v3_eb44)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_eb64 = call i32 @function_123d4(i32 1, i32 ptrtoint (i32* @global_var_176dc.116 to i32))
  %v1_eb6c = call i32 @function_10da0(i32 5)
  %v1_eb70 = call i32 @function_a2f0(i32 %v1_eb6c)
  %v1_eb74 = call i32 @function_e3f0(i32 %v1_eb70)
  store i32 %v1_eb74, i32* @r0, align 4
  %v1_eb78 = call i32 @function_e8cc(i32 %v1_eb74)
  store i32 %v1_eb78, i32* @r0, align 4
  %v0_eb7c = call i32 @function_121b8()
  %v1_eb80 = load i32, i32* @sl, align 4
  %v7_eb84 = icmp sgt i32 %v0_eb7c, %v1_eb80
  br i1 %v7_eb84, label %dec_label_pc_eb88, label %dec_label_pc_ebd4

dec_label_pc_eb88:                                ; preds = %dec_label_pc_ea74
  store i32 %v15_e9bc, i32* %r8.global-to-local, align 4
  ret i32 %v1_eb80

dec_label_pc_eb9c:                                ; preds = %dec_label_pc_e9bc
  %v0_eb9c = load i32, i32* @r8, align 4
  %v1_eb9c = add i32 %v0_eb9c, 4
  %v2_eb9c = inttoptr i32 %v1_eb9c to i32*
  %v3_eb9c = load i32, i32* %v2_eb9c, align 4
  %v1_eba0 = inttoptr i32 %v3_eb9c to i8*
  %v2_eba0 = call i32 @function_11864(i8* %v1_eba0)
  %v8_eba8 = icmp sgt i32 %v2_eba0, 31
  br i1 %v8_eba8, label %dec_label_pc_ea74, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb9c
  %v0_ebac = load i32, i32* @r8, align 4
  %v1_ebac = add i32 %v0_ebac, 4
  %v2_ebac = inttoptr i32 %v1_ebac to i32*
  %v3_ebac = load i32, i32* %v2_ebac, align 4
  store i32 %v2_ea50, i32* @r0, align 4
  %v2_ebb4 = bitcast i32* %stack_var_-152 to i8*
  %v3_ebb4 = call i32 @function_1188c(i8* %v2_ebb4, i32 %v3_ebac)
  %v0_ebb8 = load i32, i32* @r8, align 4
  %v1_ebb8 = add i32 %v0_ebb8, 4
  %v2_ebb8 = inttoptr i32 %v1_ebb8 to i32*
  %v3_ebb8 = load i32, i32* %v2_ebb8, align 4
  %v1_ebc0 = inttoptr i32 %v3_ebb8 to i8*
  %v2_ebc0 = call i32 @function_11864(i8* %v1_ebc0)
  %v2_ebcc = call i32 @function_118f8(i32 %v3_ebb8, i32 %v2_ebc0)
  br label %dec_label_pc_ea74

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ea74
  %v1_ebd4 = call i32 @function_12408(i32 %v0_eb7c)
  %v0_ebdc = load i32, i32* @sl, align 4
  %v1_ebe0 = call i32 @function_124c8(i32 %v0_ebdc)
  %v1_ebe8 = call i32 @function_124c8(i32 1)
  %v1_ebf0 = call i32 @function_124c8(i32 2)
  store i32 131508, i32* @fp, align 4
  %v1_ebf8 = call i32 @function_a2f0(i32 %v1_ebf0)
  %v1_ebfc = call i32 @function_e3f0(i32 %v1_ebf8)
  store i32 %v1_ebfc, i32* @r0, align 4
  %v1_ec00 = call i32 @function_e8cc(i32 %v1_ebfc)
  store i32 %v1_ec00, i32* @r0, align 4
  %v1_ec04 = call i32 @function_f56c(i32 %v1_ec00)
  %v0_ec08 = load i32, i32* @sl, align 4
  %v2_ec0c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_ec0c, i32* @r7, align 4
  %v2_ec10 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_ec10, i32* @r6, align 4
  %v2_ecf0 = ptrtoint i32* %stack_var_-72 to i32
  %v2_ed40 = ptrtoint i32* %stack_var_-168 to i32
  %v2_ef1c = ptrtoint i32* %stack_var_-56 to i32
  %v2_ef24 = ptrtoint i8** %stack_var_-42 to i32
  %v2_f0cc = ptrtoint i32* %stack_var_-1432 to i32
  %v2_ef40 = ptrtoint i32* %stack_var_-52 to i32
  %v1_eff4 = bitcast i32* %stack_var_-152 to i8*
  %v2_efb4 = ptrtoint i32* %stack_var_-88 to i32
  %v1_efd0 = sub i32 0, %v1_ebd4
  br label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_f054, %dec_label_pc_f0f0, %bb43, %dec_label_pc_eff0, %dec_label_pc_ee24, %dec_label_pc_ee14, %bb40, %dec_label_pc_f144, %dec_label_pc_f0b0, %dec_label_pc_f064, %dec_label_pc_f040, %dec_label_pc_ef6c, %dec_label_pc_ee94, %dec_label_pc_edcc, %dec_label_pc_ebd4
  %stack_var_-1436.0 = phi i32 [ %v0_ec08, %dec_label_pc_ebd4 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_ee14 ], [ %stack_var_-1436.1, %dec_label_pc_ee24 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_f064 ], [ %stack_var_-1436.1, %dec_label_pc_ee94 ], [ %stack_var_-1436.1, %dec_label_pc_f0f0 ], [ %stack_var_-1436.1, %dec_label_pc_f144 ], [ %stack_var_-1436.1, %dec_label_pc_f0b0 ], [ %stack_var_-1436.1, %dec_label_pc_edcc ], [ %stack_var_-1436.1, %dec_label_pc_eff0 ], [ %stack_var_-1436.1, %dec_label_pc_f040 ], [ %stack_var_-1436.1, %dec_label_pc_ef6c ], [ %stack_var_-1436.1, %dec_label_pc_f054 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ec20, %dec_label_pc_ec14
  %v1_ec24 = phi i32 [ %v1_ec28, %dec_label_pc_ec20 ], [ 4, %dec_label_pc_ec14 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ec24 = load i32, i32* @r7, align 4
  %v3_ec24 = add i32 %v2_ec24, %v1_ec24
  %v4_ec24 = inttoptr i32 %v3_ec24 to i32*
  store i32 0, i32* %v4_ec24, align 4
  %v0_ec28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec28 = add i32 %v0_ec28, 4
  store i32 %v1_ec28, i32* %r3.global-to-local, align 4
  %v7_ec2c = icmp eq i32 %v1_ec28, 128
  br i1 %v7_ec2c, label %dec_label_pc_ec34, label %dec_label_pc_ec20

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec20
  %v0_ec34 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ec34, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec3c

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec3c, %dec_label_pc_ec34
  %v1_ec40 = phi i32 [ %v1_ec44, %dec_label_pc_ec3c ], [ 4, %dec_label_pc_ec34 ]
  store i32 0, i32* @r4, align 4
  %v2_ec40 = load i32, i32* @r6, align 4
  %v3_ec40 = add i32 %v2_ec40, %v1_ec40
  %v4_ec40 = inttoptr i32 %v3_ec40 to i32*
  store i32 0, i32* %v4_ec40, align 4
  %v0_ec44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec44 = add i32 %v0_ec44, 4
  store i32 %v1_ec44, i32* %r3.global-to-local, align 4
  %v7_ec48 = icmp eq i32 %v1_ec44, 128
  br i1 %v7_ec48, label %dec_label_pc_ec50, label %dec_label_pc_ec3c

dec_label_pc_ec50:                                ; preds = %dec_label_pc_ec3c
  store i32 131504, i32* %r3.global-to-local, align 4
  %v2_ec54 = load i32, i32* inttoptr (i32 131504 to i32*), align 16
  %v7_ec58 = icmp eq i32 %v2_ec54, -1
  br i1 %v7_ec58, label %dec_label_pc_ec84, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec50
  %v3_ec60 = udiv i32 %v2_ec54, 32
  %v3_ec64 = mul nuw nsw i32 %v3_ec60, 4
  store i32 %v2_eab4, i32* %ip.global-to-local, align 4
  %v2_ec6c = add i32 %v3_ec64, %v2_eab4
  store i32 %v2_ec6c, i32* %r3.global-to-local, align 4
  %v1_ec70 = add i32 %v2_ec6c, -240
  %v2_ec70 = inttoptr i32 %v1_ec70 to i32*
  %v3_ec70 = load i32, i32* %v2_ec70, align 4
  %v1_ec74 = urem i32 %v2_ec54, 32
  %v7_ec7c = shl i32 1, %v1_ec74
  %v8_ec7c = or i32 %v3_ec70, %v7_ec7c
  store i32 %v8_ec7c, i32* %r2.global-to-local, align 4
  store i32 %v8_ec7c, i32* %v2_ec70, align 4
  br label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec50, %dec_label_pc_ec60
  %v0_ec84 = load i32, i32* @fp, align 4
  %v1_ec84 = inttoptr i32 %v0_ec84 to i32*
  %v2_ec84 = load i32, i32* %v1_ec84, align 4
  store i32 %v2_ec84, i32* @r3, align 4
  %v7_ec88 = icmp eq i32 %v2_ec84, -1
  store i32 131508, i32* %r8.global-to-local, align 4
  br i1 %v7_ec88, label %dec_label_pc_eeac, label %dec_label_pc_ec94

dec_label_pc_ec94:                                ; preds = %dec_label_pc_eeac, %dec_label_pc_ec84, %bb42
  %v2_ec98 = load i8, i8* bitcast (i8** @global_var_2038c.120 to i8*), align 4
  %v3_ec98 = zext i8 %v2_ec98 to i32
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  %v2_ec9c = icmp eq i8 %v2_ec98, 0
  %v0_ede8 = load i32, i32* @fp, align 4
  %v1_ede8 = inttoptr i32 %v0_ede8 to i32*
  %v2_ede8 = load i32, i32* %v1_ede8, align 4
  store i32 %v2_ede8, i32* %ip.global-to-local, align 4
  %v3_edec = udiv i32 %v2_ede8, 32
  store i32 %v3_edec, i32* %r3.global-to-local, align 4
  br i1 %v2_ec9c, label %dec_label_pc_ede8, label %dec_label_pc_eca4

dec_label_pc_eca4:                                ; preds = %dec_label_pc_ec94
  %v3_ecb0 = mul nuw nsw i32 %v3_edec, 4
  %v2_ecb4 = add i32 %v3_ecb0, %v2_eab4
  store i32 %v2_ecb4, i32* %r3.global-to-local, align 4
  %v1_ecb8 = add i32 %v2_ecb4, -368
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  %v3_ecb8 = load i32, i32* %v2_ecb8, align 4
  %v1_ecbc = urem i32 %v2_ede8, 32
  %v7_ecc4 = shl i32 1, %v1_ecbc
  %v8_ecc4 = or i32 %v3_ecb8, %v7_ecc4
  store i32 %v8_ecc4, i32* %r2.global-to-local, align 4
  store i32 %v8_ecc4, i32* %v2_ecb8, align 4
  br label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ede8, %dec_label_pc_eca4
  store i32 131504, i32* %r3.global-to-local, align 4
  %v2_ecd0 = load i32, i32* inttoptr (i32 131504 to i32*), align 16
  store i32 0, i32* @lr, align 4
  %v0_ecd8 = load i32, i32* %ip.global-to-local, align 4
  %v5_ecdc = icmp slt i32 %v0_ecd8, %v2_ecd0
  br i1 %v5_ecdc, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_eccc
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_eccc, %bb
  %v0_ecec = phi i32 [ %v2_ecd0, %dec_label_pc_eccc ], [ %v0_ecd8, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_ecec = add i32 %v0_ecec, 1
  store i32 %v2_ecf0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ec10, i32* %r2.global-to-local, align 4
  %v5_ed08 = call i32 @function_121ec(i32 %v1_ecec, i32 %v2_ec0c, i32 %v2_ec10, i32 0, i32 %v2_ecf0)
  %v8_ed0c = icmp eq i32 %v5_ed08, -1
  br i1 %v8_ed0c, label %dec_label_pc_ec14, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %bb40
  %v6_ed08 = trunc i32 %v5_ed08 to i16
  %v3_ed14 = icmp eq i16 %v6_ed08, 0
  br i1 %v3_ed14, label %dec_label_pc_ed1c, label %dec_label_pc_ed50

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ed14
  %v5_ed28 = srem i32 %stack_var_-1436.0, 6
  %v4_ed30 = sub i32 %stack_var_-1436.0, %v5_ed28
  store i32 %v4_ed30, i32* %r3.global-to-local, align 4
  %v2_ed38 = icmp eq i32 %v5_ed28, 0
  %v1_ed3c = add i32 %stack_var_-1436.0, 1
  store i32 %v1_ed3c, i32* @lr, align 4
  store i32 %v2_ed40, i32* %r2.global-to-local, align 4
  %v7_ed44 = inttoptr i32 %v5_ed08 to i8*
  store i8* %v7_ed44, i8** %stack_var_-42, align 4
  br i1 %v2_ed38, label %dec_label_pc_ef1c, label %dec_label_pc_ed50

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed14, %dec_label_pc_ed1c, %dec_label_pc_ef1c
  %stack_var_-1436.1 = phi i32 [ %v1_ed3c, %dec_label_pc_ef1c ], [ %v1_ed3c, %dec_label_pc_ed1c ], [ %stack_var_-1436.0, %dec_label_pc_ed14 ]
  store i32 131504, i32* %r3.global-to-local, align 4
  %v2_ed54 = load i32, i32* inttoptr (i32 131504 to i32*), align 16
  %v7_ed58 = icmp eq i32 %v2_ed54, -1
  br i1 %v7_ed58, label %dec_label_pc_ed84, label %dec_label_pc_ed60

dec_label_pc_ed60:                                ; preds = %dec_label_pc_ed50
  %v3_ed60 = udiv i32 %v2_ed54, 32
  %v3_ed64 = mul nuw nsw i32 %v3_ed60, 4
  store i32 %v2_eab4, i32* %ip.global-to-local, align 4
  %v2_ed6c = add i32 %v3_ed64, %v2_eab4
  store i32 %v2_ed6c, i32* %r3.global-to-local, align 4
  %v1_ed70 = add i32 %v2_ed6c, -240
  %v2_ed70 = inttoptr i32 %v1_ed70 to i32*
  %v3_ed70 = load i32, i32* %v2_ed70, align 4
  %v1_ed74 = urem i32 %v2_ed54, 32
  %v6_ed78 = lshr i32 %v3_ed70, %v1_ed74
  store i32 %v6_ed78, i32* %r2.global-to-local, align 4
  %v1_ed7c = urem i32 %v6_ed78, 2
  %v2_ed7c = icmp eq i32 %v1_ed7c, 0
  br i1 %v2_ed7c, label %dec_label_pc_ed84, label %dec_label_pc_efa8

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ed60, %dec_label_pc_ed50
  %v2_ed88 = load i8, i8* bitcast (i8** @global_var_2038c.120 to i8*), align 4
  %v3_ed88 = zext i8 %v2_ed88 to i32
  store i32 %v3_ed88, i32* @r4, align 4
  %v2_ed8c = icmp eq i8 %v2_ed88, 0
  %v0_ee14 = load i32, i32* @fp, align 4
  %v1_ee14 = inttoptr i32 %v0_ee14 to i32*
  %v2_ee14 = load i32, i32* %v1_ee14, align 4
  br i1 %v2_ed8c, label %dec_label_pc_ee14, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed84
  %v3_ed98 = udiv i32 %v2_ee14, 32
  store i32 %v2_eab4, i32* %r2.global-to-local, align 4
  %v3_eda0 = mul nuw nsw i32 %v3_ed98, 4
  %v2_eda4 = add i32 %v3_eda0, %v2_eab4
  store i32 %v2_eda4, i32* %r3.global-to-local, align 4
  %v1_eda8 = add i32 %v2_eda4, -368
  %v2_eda8 = inttoptr i32 %v1_eda8 to i32*
  %v3_eda8 = load i32, i32* %v2_eda8, align 4
  %v1_edac = urem i32 %v2_ee14, 32
  %v6_edb0 = lshr i32 %v3_eda8, %v1_edac
  store i32 %v6_edb0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_2038c.120 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_edbc = urem i32 %v6_edb0, 2
  %v2_edbc = icmp eq i32 %v1_edbc, 0
  store i8 0, i8* bitcast (i8** @global_var_2038c.120 to i8*), align 4
  store i32 131508, i32* @r5, align 4
  br i1 %v2_edbc, label %dec_label_pc_edcc, label %dec_label_pc_ef38

dec_label_pc_edcc:                                ; preds = %dec_label_pc_ed94
  store i32 60884, i32* @lr, align 4
  %v1_edd0 = icmp ne i32 %v2_ee14, -1
  call void @__pseudo_cond_branch(i1 %v1_edd0, i32 ptrtoint (i32* @global_var_124c8.22 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_edd8 = load i32, i32* @r5, align 4
  %v2_edd8 = inttoptr i32 %v1_edd8 to i32*
  store i32 -1, i32* %v2_edd8, align 4
  %v1_ede0 = call i32 @function_143e4(i32 1)
  br label %dec_label_pc_ec14

dec_label_pc_ede8:                                ; preds = %dec_label_pc_ec94
  store i32 %v2_eab4, i32* %r2.global-to-local, align 4
  %v3_edf4 = mul nuw nsw i32 %v3_edec, 4
  %v2_edf8 = add i32 %v3_edf4, %v2_eab4
  store i32 %v2_edf8, i32* %r3.global-to-local, align 4
  %v1_edfc = add i32 %v2_edf8, -240
  %v2_edfc = inttoptr i32 %v1_edfc to i32*
  %v3_edfc = load i32, i32* %v2_edfc, align 4
  %v1_ee00 = urem i32 %v2_ede8, 32
  %v7_ee08 = shl i32 1, %v1_ee00
  %v8_ee08 = or i32 %v3_edfc, %v7_ee08
  store i32 %v8_ee08, i32* %r2.global-to-local, align 4
  store i32 %v8_ee08, i32* %v2_edfc, align 4
  br label %dec_label_pc_eccc

dec_label_pc_ee14:                                ; preds = %dec_label_pc_ed84
  %v7_ee18 = icmp eq i32 %v2_ee14, -1
  store i32 131508, i32* @r8, align 4
  br i1 %v7_ee18, label %dec_label_pc_ec14, label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %dec_label_pc_ee14
  %v3_ee24 = udiv i32 %v2_ee14, 32
  store i32 %v2_eab4, i32* %r2.global-to-local, align 4
  %v3_ee2c = mul nuw nsw i32 %v3_ee24, 4
  %v2_ee30 = add i32 %v3_ee2c, %v2_eab4
  store i32 %v2_ee30, i32* %r3.global-to-local, align 4
  %v1_ee34 = add i32 %v2_ee30, -240
  %v2_ee34 = inttoptr i32 %v1_ee34 to i32*
  %v3_ee34 = load i32, i32* %v2_ee34, align 4
  %v1_ee38 = urem i32 %v2_ee14, 32
  %v6_ee3c = lshr i32 %v3_ee34, %v1_ee38
  store i32 %v6_ee3c, i32* %r2.global-to-local, align 4
  %v1_ee40 = urem i32 %v6_ee3c, 2
  %v2_ee40 = icmp eq i32 %v1_ee40, 0
  br i1 %v2_ee40, label %dec_label_pc_ec14, label %dec_label_pc_ee48

dec_label_pc_ee48:                                ; preds = %dec_label_pc_ee24
  %v6_ee4c = inttoptr i32 %v3_ed88 to i8*
  store i8* %v6_ee4c, i8** %stack_var_-42, align 4
  store i32 %v2_ef24, i32* @sl, align 4
  %v0_ee50 = call i32 @function_128f0()
  %v0_ee54 = load i32, i32* @r4, align 4
  %v2_ee54 = inttoptr i32 %v0_ee50 to i32*
  store i32 %v0_ee54, i32* %v2_ee54, align 4
  store i32 %v0_ee50, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_ee64 = load i32, i32* @r8, align 4
  %v1_ee64 = inttoptr i32 %v0_ee64 to i32*
  %v2_ee64 = load i32, i32* %v1_ee64, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_ee70 = call i32 @function_12ba4(i32 %v2_ee64, i32 %v2_ef24, i32 2, i32 16386)
  %v7_ee74 = icmp eq i32 %v4_ee70, -1
  br i1 %v7_ee74, label %dec_label_pc_f054, label %dec_label_pc_ee7c

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ee48
  %v2_ee7c = icmp eq i32 %v4_ee70, 0
  br i1 %v2_ee7c, label %dec_label_pc_f064, label %dec_label_pc_ee84

dec_label_pc_ee84:                                ; preds = %dec_label_pc_ee7c
  store i32 %v2_ed40, i32* %ip.global-to-local, align 4
  %v3_ee88 = load i8*, i8** %stack_var_-42, align 4
  %v4_ee88 = ptrtoint i8* %v3_ee88 to i32
  store i32 %v4_ee88, i32* %r3.global-to-local, align 4
  %v2_ee8c = icmp eq i8* %v3_ee88, null
  br i1 %v2_ee8c, label %dec_label_pc_ee94, label %dec_label_pc_f094

dec_label_pc_ee94:                                ; preds = %dec_label_pc_ee84
  %v0_ee94 = load i32, i32* @r8, align 4
  %v1_ee94 = inttoptr i32 %v0_ee94 to i32*
  %v2_ee94 = load i32, i32* %v1_ee94, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_eea0 = add i32 %v4_ee88, 16384
  store i32 %v1_eea0, i32* %r3.global-to-local, align 4
  %v4_eea4 = call i32 @function_12ba4(i32 %v2_ee94, i32 %v2_ef24, i32 2, i32 %v1_eea0)
  br label %dec_label_pc_ec14

dec_label_pc_eeac:                                ; preds = %dec_label_pc_ec84
  %v0_eeb4 = load i32, i32* @r4, align 4
  store i32 %v0_eeb4, i32* %r2.global-to-local, align 4
  %v3_eeb8 = call i32 @function_12cd4(i32 2, i32 1, i32 %v0_eeb4)
  %v7_eebc = icmp eq i32 %v3_eeb8, -1
  store i32 %v3_eeb8, i32* @r5, align 4
  %v1_eec4 = load i32, i32* %r8.global-to-local, align 4
  %v2_eec4 = inttoptr i32 %v1_eec4 to i32*
  store i32 %v3_eeb8, i32* %v2_eec4, align 4
  br i1 %v7_eebc, label %dec_label_pc_ec94, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eeac
  %v0_eecc = load i32, i32* @r4, align 4
  store i32 %v0_eecc, i32* %r2.global-to-local, align 4
  %v2_eed4 = call i32 @function_122fc(i32 %v3_eeb8, i32 3)
  %v1_eedc = or i32 %v2_eed4, 2048
  store i32 %v1_eedc, i32* %r2.global-to-local, align 4
  %v0_eee0 = load i32, i32* @r5, align 4
  %v2_eee4 = call i32 @function_122fc(i32 %v0_eee0, i32 4)
  %v2_eeec = load i32, i32* inttoptr (i32 131512 to i32*), align 8
  store i32 %v2_eeec, i32* %r3.global-to-local, align 4
  %v2_eef0 = icmp eq i32 %v2_eeec, 0
  br i1 %v2_eef0, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_eecc
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_eecc, %bb41
  %v2_eef8 = xor i1 %v2_eef0, true
  call void @__pseudo_cond_branch(i1 %v2_eef8, i32 %v2_eeec)
  store i32 ptrtoint (i8** @global_var_2038c.120 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ef04 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef04 = inttoptr i32 %v0_ef04 to i32*
  %v2_ef04 = load i32, i32* %v1_ef04, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_2038c.120 to i8*), align 4
  %v4_ef14 = call i32 @function_12abc(i32 %v2_ef04, i32 ptrtoint (i16** @global_var_22410.100 to i32), i32 16)
  br label %dec_label_pc_ec94

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_ed1c
  %v0_ef20 = load i32, i32* @fp, align 4
  %v1_ef20 = inttoptr i32 %v0_ef20 to i32*
  %v2_ef20 = load i32, i32* %v1_ef20, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ef30 = call i32 @function_12c18(i32 %v2_ef20, i32 %v2_ef24, i32 2, i32 16384)
  br label %dec_label_pc_ed50

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ed94
  store i32 4, i32* @r4, align 4
  store i32 %v2_ef40, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_ef1c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_ef5c = call i32 @function_12b2c(i32 %v2_ee14, i32 1, i32 4, i32 %v2_ef40, i32 %v2_ef1c)
  %v3_ef60 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ef60, i32* %r3.global-to-local, align 4
  %v2_ef64 = icmp eq i32 %v3_ef60, 0
  br i1 %v2_ef64, label %dec_label_pc_eff0, label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_ef38
  %v0_ef6c = load i32, i32* @r5, align 4
  %v1_ef6c = inttoptr i32 %v0_ef6c to i32*
  %v2_ef6c = load i32, i32* %v1_ef6c, align 4
  %v1_ef70 = call i32 @function_124c8(i32 %v2_ef6c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ef78 = load i32, i32* @r5, align 4
  %v2_ef78 = inttoptr i32 %v1_ef78 to i32*
  store i32 -1, i32* %v2_ef78, align 4
  %v0_ef7c = call i32 @function_f188()
  %v3_ef84 = zext i32 %v0_ef7c to i64
  %v4_ef84 = mul nuw i64 %v3_ef84, 3435973837
  %v7_ef84 = trunc i64 %v4_ef84 to i32
  store i32 %v7_ef84, i32* %ip.global-to-local, align 4
  %v3_ef881 = udiv i64 %v4_ef84, 34359738368
  %v3_ef8c3 = mul nuw nsw i64 %v3_ef881, 8
  %v3_ef8c = trunc i64 %v3_ef8c3 to i32
  store i32 %v3_ef8c, i32* %r2.global-to-local, align 4
  %v2_ef905 = mul nuw nsw i64 %v3_ef881, 2
  %v2_ef90 = trunc i64 %v2_ef905 to i32
  %v2_ef94 = add i32 %v3_ef8c, %v2_ef90
  store i32 %v2_ef94, i32* %r3.global-to-local, align 4
  %v2_ef98 = sub i32 %v0_ef7c, %v2_ef94
  %v1_ef9c = add i32 %v2_ef98, 1
  %v1_efa0 = call i32 @function_143e4(i32 %v1_ef9c)
  br label %dec_label_pc_ec14

dec_label_pc_efa8:                                ; preds = %dec_label_pc_ed60
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_ef40, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_efbc = call i32 @function_12a4c(i32 %v2_ed54, i32 %v2_efb4, i32 %v2_ef40, i32 16, i32 16)
  %v1_efc0 = call i32 @function_f31c(i32 %v5_efbc)
  %v1_efc4 = call i32 @function_de4c(i32 %v1_efc0)
  store i32 %v1_ebd4, i32* @lr, align 4
  %v2_efd4 = call i32 @function_12294(i32 %v1_efd0, i32 9)
  store i32 ptrtoint (i32* @global_var_20388.108 to i32), i32* %r3.global-to-local, align 4
  %v2_efdc = load i32, i32* @global_var_20388.108, align 4
  %v2_efe0 = icmp eq i32 %v2_efdc, 0
  br i1 %v2_efe0, label %dec_label_pc_efe8, label %dec_label_pc_f088

dec_label_pc_efe8:                                ; preds = %dec_label_pc_efa8, %dec_label_pc_f088
  %v1_efec = call i32 @function_1432c(i32 0)
  br label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %dec_label_pc_ef38, %dec_label_pc_efe8
  %v2_eff4 = call i32 @function_11864(i8* %v1_eff4)
  %sext = mul i32 %v2_eff4, 16777216
  %v1_eff8 = sdiv i32 %sext, 16777216
  %v7_eff8 = inttoptr i32 %v1_eff8 to i8*
  store i8* %v7_eff8, i8** %stack_var_-42, align 4
  %v0_effc = call i32 @function_11b20()
  %v0_f004 = load i32, i32* @r4, align 4
  store i32 %v0_f004, i32* %r2.global-to-local, align 4
  store i32 %v0_effc, i32* @global_var_22408.78, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f014 = load i32, i32* @r5, align 4
  %v1_f014 = inttoptr i32 %v0_f014 to i32*
  %v2_f014 = load i32, i32* %v1_f014, align 4
  %v4_f018 = call i32 @function_12c18(i32 %v2_f014, i32 ptrtoint (i32* @global_var_176e0.125 to i32), i32 %v0_f004, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f024 = load i32, i32* @r5, align 4
  %v1_f024 = inttoptr i32 %v0_f024 to i32*
  %v2_f024 = load i32, i32* %v1_f024, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f030 = call i32 @function_12c18(i32 %v2_f024, i32 %v2_ef24, i32 1, i32 16384)
  %v3_f034 = load i8*, i8** %stack_var_-42, align 4
  %v4_f034 = ptrtoint i8* %v3_f034 to i32
  store i32 %v4_f034, i32* %r2.global-to-local, align 4
  %v3_f038 = icmp eq i8* %v3_f034, null
  br i1 %v3_f038, label %dec_label_pc_ec14, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_eff0
  %v0_f040 = load i32, i32* @r5, align 4
  %v1_f040 = inttoptr i32 %v0_f040 to i32*
  %v2_f040 = load i32, i32* %v1_f040, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f04c = call i32 @function_12c18(i32 %v2_f040, i32 %v2_ea50, i32 %v4_f034, i32 16384)
  br label %dec_label_pc_ec14

dec_label_pc_f054:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_ee48
  %v0_f054 = load i32, i32* @r5, align 4
  %v1_f054 = inttoptr i32 %v0_f054 to i32*
  %v2_f054 = load i32, i32* %v1_f054, align 4
  store i32 %v2_f054, i32* %r3.global-to-local, align 4
  %v7_f058 = icmp eq i32 %v2_f054, 4
  br i1 %v7_f058, label %dec_label_pc_ec14, label %bb43

bb43:                                             ; preds = %dec_label_pc_f054
  %v8_f05c = icmp eq i32 %v2_f054, 11
  br i1 %v8_f05c, label %dec_label_pc_ec14, label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f0e8, %bb43, %dec_label_pc_ee7c
  %v0_f064 = load i32, i32* @fp, align 4
  %v1_f064 = inttoptr i32 %v0_f064 to i32*
  %v2_f064 = load i32, i32* %v1_f064, align 4
  store i32 61552, i32* @lr, align 4
  %v1_f06c = icmp ne i32 %v2_f064, -1
  call void @__pseudo_cond_branch(i1 %v1_f06c, i32 ptrtoint (i32* @global_var_124c8.22 to i32))
  store i32 131508, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 131508 to i32*), align 4
  %v1_f080 = call i32 @function_143e4(i32 1)
  br label %dec_label_pc_ec14

dec_label_pc_f088:                                ; preds = %dec_label_pc_efa8
  %v2_f08c = call i32 @function_12294(i32 %v2_efdc, i32 9)
  br label %dec_label_pc_efe8

dec_label_pc_f094:                                ; preds = %dec_label_pc_ee84
  %v3_f094 = udiv i32 %v4_ee88, 256
  %v1_f098 = urem i32 %v4_ee88, 256
  store i32 %v1_f098, i32* %r3.global-to-local, align 4
  %v4_f09c = mul nuw nsw i32 %v1_f098, 256
  %v5_f09c = or i32 %v4_f09c, %v3_f094
  %v6_f09c = trunc i32 %v5_f09c to i16
  store i32 %v5_f09c, i32* %r2.global-to-local, align 4
  %v7_f0a8 = inttoptr i32 %v5_f09c to i8*
  store i8* %v7_f0a8, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_f09c, 1025
  br i1 %tmp44, label %dec_label_pc_f0c4, label %dec_label_pc_f0b0

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f094
  %v0_f0b0 = load i32, i32* @r8, align 4
  %v1_f0b0 = inttoptr i32 %v0_f0b0 to i32*
  %v2_f0b0 = load i32, i32* %v1_f0b0, align 4
  %v1_f0b4 = call i32 @function_124c8(i32 %v2_f0b0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f0bc = load i32, i32* @r8, align 4
  %v2_f0bc = inttoptr i32 %v1_f0bc to i32*
  store i32 -1, i32* %v2_f0bc, align 4
  br label %dec_label_pc_ec14

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f094
  %v0_f0c4 = load i32, i32* @r4, align 4
  %v1_f0c4 = load i32, i32* @r5, align 4
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  store i32 %v0_f0c4, i32* %v2_f0c4, align 4
  store i32 %v2_f0cc, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_f0d4 = load i32, i32* @r8, align 4
  %v1_f0d4 = inttoptr i32 %v0_f0d4 to i32*
  %v2_f0d4 = load i32, i32* %v1_f0d4, align 4
  %v7_f0dc = call i32 @function_12ba4(i32 %v2_f0d4, i32 %v2_f0cc, i32 %v5_f09c, i32 16386)
  %v7_f0e0 = icmp eq i32 %v7_f0dc, -1
  br i1 %v7_f0e0, label %dec_label_pc_f054, label %dec_label_pc_f0e8

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_f0c4
  %v2_f0e8 = icmp eq i32 %v7_f0dc, 0
  br i1 %v2_f0e8, label %dec_label_pc_f064, label %dec_label_pc_f0f0

dec_label_pc_f0f0:                                ; preds = %dec_label_pc_f0e8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0fc = load i32, i32* @r8, align 4
  %v1_f0fc = inttoptr i32 %v0_f0fc to i32*
  %v2_f0fc = load i32, i32* %v1_f0fc, align 4
  %v4_f100 = call i32 @function_12ba4(i32 %v2_f0fc, i32 %v2_ef24, i32 2, i32 16384)
  %v3_f108 = load i8*, i8** %stack_var_-42, align 4
  %v4_f108 = ptrtoint i8* %v3_f108 to i32
  %v3_f10c = udiv i32 %v4_f108, 256
  %v1_f110 = urem i32 %v4_f108, 256
  store i32 %v1_f110, i32* %r3.global-to-local, align 4
  %v4_f114 = mul nuw nsw i32 %v1_f110, 256
  %v5_f114 = or i32 %v4_f114, %v3_f10c
  store i32 %v5_f114, i32* %ip.global-to-local, align 4
  store i32 %v2_ed40, i32* @lr, align 4
  store i32 %v5_f114, i32* %r2.global-to-local, align 4
  %v0_f124 = load i32, i32* @r8, align 4
  %v1_f124 = inttoptr i32 %v0_f124 to i32*
  %v2_f124 = load i32, i32* %v1_f124, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f12c = inttoptr i32 %v5_f114 to i8*
  store i8* %v6_f12c, i8** %stack_var_-42, align 4
  %v6_f130 = call i32 @function_12ba4(i32 %v2_f124, i32 %v2_f0cc, i32 %v5_f114, i32 16384)
  store i32 %v2_ed40, i32* %r2.global-to-local, align 4
  %v3_f138 = load i8*, i8** %stack_var_-42, align 4
  %v3_f13c = icmp eq i8* %v3_f138, null
  br i1 %v3_f13c, label %dec_label_pc_ec14, label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f0f0
  %v4_f138 = ptrtoint i8* %v3_f138 to i32
  %v5_f148 = call i32 @function_a058(i32* nonnull %stack_var_-1432, i32 %v4_f138, i32 %v2_ed40)
  br label %dec_label_pc_ec14

; uselistorder directives
  uselistorder i8* %v3_f138, { 1, 0 }
  uselistorder i32 %v5_f114, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f108, { 1, 0 }
  uselistorder i32 %v7_f0dc, { 1, 0 }
  uselistorder i32 %v5_f09c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_eeb8, { 3, 2, 1, 0 }
  uselistorder i32 %v4_ee88, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ee70, { 1, 0 }
  uselistorder i32 %v2_ee14, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_ed54, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ed3c, { 1, 0, 2 }
  uselistorder i32 %v5_ed08, { 1, 2, 0 }
  uselistorder i32 %v2_ec54, { 2, 1, 0 }
  uselistorder i32 %v1_ec44, { 1, 2, 0 }
  uselistorder i32 %v1_ec28, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_ef40, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ef24, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_ef1c, { 1, 0 }
  uselistorder i32 %v2_ed40, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ec10, { 1, 0, 2 }
  uselistorder i32 %v2_eab4, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_eaa0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e9cc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_20388.108, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_143e4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_2038c.120 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_2038c.120 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 131504 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_e8cc, { 1, 0 }
  uselistorder i32 (i32)* @function_e3f0, { 1, 0 }
  uselistorder i32 (i32)* @function_a2f0, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_1188c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 20, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i32, i32)* @function_f24c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_e768, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12d80, { 1, 0 }
  uselistorder label %dec_label_pc_eff0, { 1, 0 }
  uselistorder label %dec_label_pc_efe8, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_ed50, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_ec94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ec84, { 1, 0 }
  uselistorder label %dec_label_pc_ec14, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_ea74, { 2, 0, 1 }
}

define i32 @function_f16c(i16 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f16c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_f16c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f16c, label %bb, label %dec_label_pc_f16c..thread1_crit_edge

dec_label_pc_f16c..thread1_crit_edge:             ; preds = %dec_label_pc_f16c
  %v0_f178.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_f16c
  %v4_f16c = inttoptr i32 %arg3 to i16*
  store i16 %arg1, i16* %v4_f16c, align 2
  %v5_f16c = load i32, i32* @r4, align 4
  %v6_f16c = load i32, i32* %r2.global-to-local, align 4
  %v7_f16c = sub i32 %v6_f16c, %v5_f16c
  store i32 %v7_f16c, i32* %r2.global-to-local, align 4
  %v1_f170 = load i32, i32* %r0.global-to-local, align 4
  %v2_f170 = trunc i32 %v1_f170 to i16
  %v4_f170 = inttoptr i32 %v7_f16c to i16*
  store i16 %v2_f170, i16* %v4_f170, align 2
  %v5_f170 = load i32, i32* %r0.global-to-local, align 4
  %v6_f170 = load i32, i32* %r2.global-to-local, align 4
  %v7_f170 = sub i32 %v6_f170, %v5_f170
  store i32 %v7_f170, i32* %r2.global-to-local, align 4
  %v2_f174 = load i32, i32* @ip, align 4
  %v3_f174 = and i32 %v2_f174, 33554432
  %v4_f174 = icmp ne i32 %v3_f174, 0
  store i1 %v4_f174, i1* %cpsr_c.global-to-local, align 1
  %v5_f174 = mul i32 %v2_f174, 128
  %v6_f174 = and i32 %v5_f174, %v7_f170
  store i32 %v6_f174, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_f16c..thread1_crit_edge, %bb
  %v0_f178 = phi i1 [ %v0_f178.pre, %dec_label_pc_f16c..thread1_crit_edge ], [ %v4_f174, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_f178, i32 -22307796)
  %v0_f180 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f180, label %bb4, label %.thread1..thread2_crit_edge

.thread1..thread2_crit_edge:                      ; preds = %.thread1
  %v9_f184.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

bb4:                                              ; preds = %.thread1
  %v1_f180 = load i32, i32* %r2.global-to-local, align 4
  %v2_f180 = load i32, i32* @r8, align 4
  %v5_f180 = mul i32 %v2_f180, 128
  %v6_f180 = and i32 %v5_f180, %v1_f180
  store i32 %v6_f180, i32* %r0.global-to-local, align 4
  %v6_f184 = and i32 %v6_f180, 4096
  %v7_f184 = icmp ne i32 %v6_f184, 0
  store i1 %v7_f184, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1..thread2_crit_edge, %bb4
  %v9_f184 = phi i32 [ %v9_f184.pre, %.thread1..thread2_crit_edge ], [ %v6_f180, %bb4 ]
  ret i32 %v9_f184

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_f188() local_unnamed_addr {
dec_label_pc_f188:
  %v2_f194 = load i32, i32* @global_var_20390.127, align 4
  %v2_f198 = load i32, i32* @global_var_2039c.129, align 4
  %v4_f1a4 = mul i32 %v2_f194, 2048
  %v5_f1a4 = xor i32 %v4_f1a4, %v2_f194
  %v4_f1a8 = udiv i32 %v2_f198, 524288
  %v5_f1a8 = xor i32 %v4_f1a8, %v2_f198
  %v2_f1ac = load i32, i32* @global_var_20394.131, align 4
  %v2_f1b0 = load i32, i32* @global_var_20398.133, align 4
  %v2_f1b4 = xor i32 %v5_f1a8, %v5_f1a4
  %v4_f1b8 = udiv i32 %v5_f1a4, 256
  %v5_f1b8 = xor i32 %v2_f1b4, %v4_f1b8
  store i32 %v2_f1ac, i32* @global_var_20390.127, align 4
  store i32 %v2_f1b0, i32* @global_var_20394.131, align 4
  store i32 %v2_f198, i32* @global_var_20398.133, align 4
  store i32 %v5_f1b8, i32* @global_var_2039c.129, align 4
  ret i32 %v5_f1b8

; uselistorder directives
  uselistorder i32 %v2_f198, { 2, 1, 0 }
  uselistorder i32 %v2_f194, { 1, 0 }
}

define i32 @function_f1e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_f1e4:
  %v2_f1f0 = call i32 @function_12148(i32* null)
  store i32 %v2_f1f0, i32* @r0, align 4
  store i32 %v2_f1f0, i32* @global_var_20390.127, align 4
  %v0_f1fc = call i32 @function_12134()
  store i32 %v0_f1fc, i32* @r0, align 4
  %v0_f204 = call i32 @function_120c0()
  %v2_f20c = xor i32 %v0_f1fc, %v0_f204
  store i32 %v2_f20c, i32* @global_var_20394.131, align 4
  %v1_f214 = call i32 @function_1290c(i32 %v2_f20c)
  %v2_f218 = load i32, i32* @global_var_20394.131, align 4
  %v2_f224 = xor i32 %v2_f218, %v1_f214
  store i32 %v2_f224, i32* @global_var_2039c.129, align 4
  store i32 %v1_f214, i32* @global_var_20398.133, align 4
  ret i32 %v1_f214

; uselistorder directives
  uselistorder i32 %v1_f214, { 1, 2, 0 }
}

define i32 @function_f24c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f24c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_f24c = load i32, i32* @r4, align 4
  %v6_f24c = load i32, i32* @r5, align 4
  %v9_f24c = load i32, i32* @r6, align 4
  %v12_f24c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f260 = call i32 @function_10e40(i32 61)
  %v3_f26c = call i32 @function_10d7c(i32 61, i32* null)
  store i32 %v3_f26c, i32* @r1, align 4
  %v2_f278 = bitcast i32* %stack_var_-72 to i8*
  %v3_f278 = call i32 @function_12a00(i8* %v2_f278, i32 %v3_f26c)
  %v2_f27c = icmp eq i32 %arg2, 0
  br i1 %v2_f27c, label %dec_label_pc_f2f8, label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %dec_label_pc_f24c
  store i32 ptrtoint (i32* @global_var_20390.127 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20394.131 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20398.133 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_2039c.129 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_f2dc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_f298

dec_label_pc_f298:                                ; preds = %dec_label_pc_f298.dec_label_pc_f298_crit_edge, %dec_label_pc_f284
  %v1_f2bc = phi i32 [ %v1_f2bc.pre, %dec_label_pc_f298.dec_label_pc_f298_crit_edge ], [ ptrtoint (i32* @global_var_20390.127 to i32), %dec_label_pc_f284 ]
  %v2_f298 = load i32, i32* @global_var_2039c.129, align 4
  store i32 %v2_f298, i32* %r2.global-to-local, align 4
  %v2_f29c = load i32, i32* @global_var_20390.127, align 4
  %v4_f2a0 = udiv i32 %v2_f298, 524288
  %v5_f2a0 = xor i32 %v4_f2a0, %v2_f298
  %v4_f2a4 = mul i32 %v2_f29c, 2048
  %v5_f2a4 = xor i32 %v4_f2a4, %v2_f29c
  %v2_f2a8 = xor i32 %v5_f2a0, %v5_f2a4
  %v2_f2ac = load i32, i32* @global_var_20394.131, align 4
  %v2_f2b0 = load i32, i32* @global_var_20398.133, align 4
  store i32 %v2_f2b0, i32* %ip.global-to-local, align 4
  %v4_f2b4 = udiv i32 %v5_f2a4, 256
  %v5_f2b4 = xor i32 %v2_f2a8, %v4_f2b4
  store i32 %v5_f2b4, i32* @r4, align 4
  %v2_f2bc = inttoptr i32 %v1_f2bc to i32*
  store i32 %v2_f2ac, i32* %v2_f2bc, align 4
  %v0_f2c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_f2c0 = load i32, i32* %r8.global-to-local, align 4
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i32*
  store i32 %v0_f2c0, i32* %v2_f2c0, align 4
  %v0_f2c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f2c4 = load i32, i32* @r7, align 4
  %v2_f2c4 = inttoptr i32 %v1_f2c4 to i32*
  store i32 %v0_f2c4, i32* %v2_f2c4, align 4
  %v0_f2c8 = load i32, i32* @r4, align 4
  %v1_f2c8 = load i32, i32* @r6, align 4
  %v2_f2c8 = inttoptr i32 %v1_f2c8 to i32*
  store i32 %v0_f2c8, i32* %v2_f2c8, align 4
  %v2_f2cc = call i32 @function_11864(i8* %v2_f278)
  %v0_f2d4 = load i32, i32* @r4, align 4
  %v2_f2d8 = call i32 @function_11f50(i32 %v0_f2d4, i32 %v2_f2cc)
  %v2_f2e0 = add i32 %v2_f2cc, %v2_f2dc
  %v1_f2e4 = add i32 %v2_f2e0, -32
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i8*
  %v3_f2e4 = load i8, i8* %v2_f2e4, align 1
  %v2_f2e8 = load i32, i32* @r5, align 4
  %v3_f2e8 = load i32, i32* %fp.global-to-local, align 4
  %v4_f2e8 = add i32 %v3_f2e8, %v2_f2e8
  %v5_f2e8 = inttoptr i32 %v4_f2e8 to i8*
  store i8 %v3_f2e4, i8* %v5_f2e8, align 1
  %v0_f2ec = load i32, i32* @r5, align 4
  %v1_f2ec = add i32 %v0_f2ec, 1
  store i32 %v1_f2ec, i32* @r5, align 4
  %v1_f2f0 = load i32, i32* %sb.global-to-local, align 4
  %v9_f2f0 = icmp eq i32 %v1_f2ec, %v1_f2f0
  br i1 %v9_f2f0, label %dec_label_pc_f2f8, label %dec_label_pc_f298.dec_label_pc_f298_crit_edge

dec_label_pc_f298.dec_label_pc_f298_crit_edge:    ; preds = %dec_label_pc_f298
  %v1_f2bc.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f298

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f298, %dec_label_pc_f24c
  %v1_f2fc = call i32 @function_10da0(i32 61)
  store i32 %v3_f24c, i32* @r4, align 4
  store i32 %v6_f24c, i32* @r5, align 4
  store i32 %v9_f24c, i32* @r6, align 4
  store i32 %v12_f24c, i32* @r7, align 4
  ret i32 %v1_f2fc

; uselistorder directives
  uselistorder i32 %v2_f29c, { 1, 0 }
  uselistorder i32 %v2_f298, { 1, 0, 2 }
  uselistorder i32* @global_var_2039c.129, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_20398.133, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_20394.131, { 2, 5, 3, 1, 0, 4 }
  uselistorder i32* @global_var_20390.127, { 2, 4, 1, 0, 3 }
}

define i32 @function_f31c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f31c:
  %v2_f328 = load i32, i32* @global_var_22428.143, align 4
  %v2_f330 = call i32 @function_12294(i32 %v2_f328, i32 9)
  ret i32 %v2_f330
}

define i32 @function_f344() local_unnamed_addr {
dec_label_pc_f344:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f344 = load i32, i32* @r4, align 4
  store i32 %v3_f344, i32* %stack_var_-16, align 4
  %v12_f344 = load i32, i32* @lr, align 4
  %v0_f348 = load i32, i32* @r0, align 4
  store i32 %v0_f348, i32* %r5.global-to-local, align 4
  %v1_f34c = add i32 %v0_f348, 4
  %v2_f34c = inttoptr i32 %v1_f34c to i32*
  %v3_f34c = load i32, i32* %v2_f34c, align 4
  store i32 %v3_f34c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 62320, i32* @lr, align 4
  %v1_f36c = icmp ne i32 %v3_f34c, -1
  call void @__pseudo_cond_branch(i1 %v1_f36c, i32 ptrtoint (i32* @global_var_124c8.22 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f37c = call i32 @function_12cd4(i32 2, i32 1, i32 0)
  store i32 %v3_f37c, i32* %r0.global-to-local, align 4
  %v7_f380 = icmp eq i32 %v3_f37c, -1
  %v1_f384 = load i32, i32* %r5.global-to-local, align 4
  %v2_f384 = add i32 %v1_f384, 4
  %v3_f384 = inttoptr i32 %v2_f384 to i32*
  store i32 %v3_f37c, i32* %v3_f384, align 4
  br i1 %v7_f380, label %dec_label_pc_f344.dec_label_pc_f3fc_crit_edge, label %dec_label_pc_f38c

dec_label_pc_f344.dec_label_pc_f3fc_crit_edge:    ; preds = %dec_label_pc_f344
  %v1_f404.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f3fc

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f344
  %v2_f350 = ptrtoint i32* %stack_var_-32 to i32
  %v0_f38c = load i32, i32* %r5.global-to-local, align 4
  %v1_f38c = add i32 %v0_f38c, 28
  store i32 %v1_f38c, i32* %r0.global-to-local, align 4
  %v0_f390 = load i32, i32* %r6.global-to-local, align 4
  %v2_f390 = add i32 %v0_f38c, 24
  %v3_f390 = inttoptr i32 %v2_f390 to i32*
  store i32 %v0_f390, i32* %v3_f390, align 4
  %v2_f398 = call i32 @function_118f8(i32 %v1_f38c, i32 256)
  store i32 %v2_f398, i32* %r0.global-to-local, align 4
  %v0_f39c = load i32, i32* %r5.global-to-local, align 4
  %v1_f39c = add i32 %v0_f39c, 4
  %v2_f39c = inttoptr i32 %v1_f39c to i32*
  %v3_f39c = load i32, i32* %v2_f39c, align 4
  store i32 %v3_f39c, i32* %r4.global-to-local, align 4
  %v0_f3a0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f3a0, i32* %r2.global-to-local, align 4
  store i32 %v3_f39c, i32* %r0.global-to-local, align 4
  %v2_f3ac = call i32 @function_122fc(i32 %v3_f39c, i32 3)
  %v1_f3b4 = or i32 %v2_f3ac, 2048
  store i32 %v1_f3b4, i32* %r2.global-to-local, align 4
  %v0_f3b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f3b8, i32* %r0.global-to-local, align 4
  %v2_f3bc = call i32 @function_122fc(i32 %v0_f3b8, i32 4)
  store i32 %v2_f3bc, i32* %r0.global-to-local, align 4
  %v2_f3c4 = load i32, i32* @global_var_203d4.145, align 4
  store i32 %v2_f3c4, i32* %r2.global-to-local, align 4
  %v1_f3cc = load i32, i32* %r5.global-to-local, align 4
  %v2_f3cc = add i32 %v1_f3cc, 12
  %v3_f3cc = inttoptr i32 %v2_f3cc to i32*
  store i32 1, i32* %v3_f3cc, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_f3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f3d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f3d8 = add i32 %v1_f3d8, 8
  %v3_f3d8 = inttoptr i32 %v2_f3d8 to i32*
  store i32 %v0_f3d8, i32* %v3_f3d8, align 4
  %v0_f3dc = load i32, i32* %r5.global-to-local, align 4
  %v1_f3dc = add i32 %v0_f3dc, 16
  %v2_f3dc = inttoptr i32 %v1_f3dc to i32*
  %v3_f3dc = load i32, i32* %v2_f3dc, align 4
  store i32 %v3_f3dc, i32* @ip, align 4
  %v1_f3e0 = add i32 %v0_f3dc, 4
  %v2_f3e0 = inttoptr i32 %v1_f3e0 to i32*
  %v3_f3e0 = load i32, i32* %v2_f3e0, align 4
  store i32 %v3_f3e0, i32* %r0.global-to-local, align 4
  %v1_f3e4 = add i32 %v0_f3dc, 20
  %v2_f3e4 = inttoptr i32 %v1_f3e4 to i16*
  %v3_f3e4 = load i16, i16* %v2_f3e4, align 2
  %v4_f3e4 = zext i16 %v3_f3e4 to i32
  store i32 %v4_f3e4, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f3f8 = call i32 @function_12abc(i32 %v3_f3e0, i32 %v2_f350, i32 16)
  store i32 %v3_f3f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f3fc

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f344.dec_label_pc_f3fc_crit_edge, %dec_label_pc_f38c
  %v1_f404 = phi i32 [ %v1_f404.pre, %dec_label_pc_f344.dec_label_pc_f3fc_crit_edge ], [ %v3_f3f8, %dec_label_pc_f38c ]
  %v2_f400 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f400, i32* @r4, align 4
  store i32 %v12_f344, i32* @lr, align 4
  ret i32 %v1_f404

; uselistorder directives
  uselistorder i32 %v3_f37c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 6, 5, 9, 10, 8, 7 }
  uselistorder i32 (i32, i32)* @function_118f8, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f3fc, { 1, 0 }
}

define i32 @function_f40c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f40c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_f40c = load i32, i32* @r4, align 4
  %v6_f40c = load i32, i32* @r5, align 4
  %v9_f40c = load i32, i32* @r6, align 4
  %v12_f40c = load i32, i32* @r7, align 4
  %v15_f40c = load i32, i32* @r8, align 4
  %v18_f40c = load i32, i32* @sb, align 4
  %v21_f40c = load i32, i32* @sl, align 4
  %v24_f40c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_203a0.147 to i32), i32* @fp, align 4
  %v2_f414 = load i32, i32* @global_var_203a0.147, align 4
  store i32 ptrtoint (i32* @global_var_203cc.149 to i32), i32* @sl, align 4
  %v1_f420 = add i32 %v2_f414, 1
  store i32 %v1_f420, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f42c = load i32, i32* @global_var_203cc.149, align 4
  store i32 %v2_f42c, i32* %r0.global-to-local, align 4
  %v3_f430 = mul i32 %v1_f420, 16
  store i32 %v3_f430, i32* %r1.global-to-local, align 4
  %v4_f438 = inttoptr i32 %v2_f42c to i32*
  %v5_f438 = call i32 @function_13970(i32* %v4_f438, i32 %v3_f430, i32 %arg3, i32 %v1_f420)
  %v2_f43c = load i32, i32* @global_var_203a0.147, align 4
  store i32 %v2_f43c, i32* %r2.global-to-local, align 4
  store i32 %v5_f438, i32* @r8, align 4
  %v0_f444 = load i32, i32* @r5, align 4
  store i32 %v0_f444, i32* %r0.global-to-local, align 4
  %v1_f44c = load i32, i32* @sl, align 4
  %v2_f44c = inttoptr i32 %v1_f44c to i32*
  store i32 %v5_f438, i32* %v2_f44c, align 4
  %v1_f450 = inttoptr i32 %v0_f444 to i8*
  %v2_f450 = call i32 @function_11864(i8* %v1_f450)
  %sext = mul i32 %v2_f450, 16777216
  %v1_f454 = sdiv i32 %sext, 16777216
  %v2_f454 = add nsw i32 %v1_f454, 1
  store i32 %v2_f454, i32* @r4, align 4
  store i32 %v1_f454, i32* @r7, align 4
  store i32 %v2_f454, i32* @r0, align 4
  %v0_f460 = call i32 @function_12f1c()
  store i32 %v0_f460, i32* %r0.global-to-local, align 4
  %v0_f464 = load i32, i32* @r5, align 4
  store i32 %v0_f464, i32* %r1.global-to-local, align 4
  %v0_f468 = load i32, i32* @r4, align 4
  store i32 %v0_f468, i32* %r2.global-to-local, align 4
  store i32 %v0_f460, i32* %r6.global-to-local, align 4
  %v3_f470 = call i32 @function_118d4(i32 %v0_f460, i32 %v0_f464, i32 %v0_f468)
  store i32 %v3_f470, i32* %r0.global-to-local, align 4
  %v0_f474 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_f474, 1
  %extract.t6 = trunc i32 %v0_f474 to i8
  br i1 %tmp22, label %dec_label_pc_f498, label %dec_label_pc_f47c

dec_label_pc_f47c:                                ; preds = %dec_label_pc_f40c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f480

dec_label_pc_f480:                                ; preds = %dec_label_pc_f480, %dec_label_pc_f47c
  %v2_f488 = phi i32 [ %v1_f48c, %dec_label_pc_f480 ], [ 0, %dec_label_pc_f47c ]
  %v1_f480 = load i32, i32* %r6.global-to-local, align 4
  %v2_f480 = add i32 %v1_f480, %v2_f488
  %v3_f480 = inttoptr i32 %v2_f480 to i8*
  %v4_f480 = load i8, i8* %v3_f480, align 1
  %v6_f480 = zext i8 %v4_f480 to i32
  %v1_f484 = xor i32 %v6_f480, 80
  store i32 %v1_f484, i32* %r3.global-to-local, align 4
  %v1_f488 = trunc i32 %v1_f484 to i8
  store i8 %v1_f488, i8* %v3_f480, align 1
  %v0_f48c = load i32, i32* %r2.global-to-local, align 4
  %v1_f48c = add i32 %v0_f48c, 1
  store i32 %v1_f48c, i32* %r2.global-to-local, align 4
  %v1_f490 = load i32, i32* @r7, align 4
  %v9_f490 = icmp eq i32 %v1_f48c, %v1_f490
  br i1 %v9_f490, label %dec_label_pc_f498.loopexit, label %dec_label_pc_f480

dec_label_pc_f498.loopexit:                       ; preds = %dec_label_pc_f480
  %extract.t = trunc i32 %v1_f48c to i8
  br label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f498.loopexit, %dec_label_pc_f40c
  %v0_f4a8.off0 = phi i8 [ %extract.t, %dec_label_pc_f498.loopexit ], [ %extract.t6, %dec_label_pc_f40c ]
  %v2_f498 = load i32, i32* @global_var_203a0.147, align 4
  %v2_f49c = load i32, i32* @global_var_203cc.149, align 4
  %v3_f4a0 = mul i32 %v2_f498, 16
  store i32 %v3_f4a0, i32* @sb, align 4
  %v2_f4a4 = add i32 %v2_f49c, %v3_f4a0
  store i32 %v2_f4a4, i32* %r2.global-to-local, align 4
  %v3_f4a8 = add i32 %v2_f4a4, 12
  %v4_f4a8 = inttoptr i32 %v3_f4a8 to i8*
  store i8 %v0_f4a8.off0, i8* %v4_f4a8, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_f43c, i32* %r3.global-to-local, align 4
  %v0_f4b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f4b4 = load i32, i32* @r8, align 4
  %v5_f4b4 = mul i32 %v2_f43c, 16
  %v6_f4b4 = add i32 %v1_f4b4, %v5_f4b4
  %v7_f4b4 = inttoptr i32 %v6_f4b4 to i32*
  store i32 %v0_f4b4, i32* %v7_f4b4, align 4
  %v2_f4b8 = load i32, i32* @global_var_203cc.149, align 4
  store i32 %v2_f4b8, i32* @r7, align 4
  %v1_f4bc = inttoptr i32 %arg2 to i8*
  %v2_f4bc = call i32 @function_11864(i8* %v1_f4bc)
  %sext1 = mul i32 %v2_f4bc, 16777216
  %v1_f4c0 = sdiv i32 %sext1, 16777216
  %v2_f4c0 = add nsw i32 %v1_f4c0, 1
  store i32 %v2_f4c0, i32* @r4, align 4
  store i32 %v1_f4c0, i32* @r6, align 4
  store i32 %v2_f4c0, i32* @r0, align 4
  %v0_f4cc = call i32 @function_12f1c()
  store i32 %v0_f4cc, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f4d4 = load i32, i32* @r4, align 4
  store i32 %v0_f4d4, i32* %r2.global-to-local, align 4
  store i32 %v0_f4cc, i32* %r5.global-to-local, align 4
  %v3_f4dc = call i32 @function_118d4(i32 %v0_f4cc, i32 %arg2, i32 %v0_f4d4)
  store i32 %v3_f4dc, i32* %r0.global-to-local, align 4
  %v0_f4e0 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_f4e0, 1
  %extract.t8 = trunc i32 %v0_f4e0 to i8
  br i1 %tmp23, label %dec_label_pc_f504, label %dec_label_pc_f4e8

dec_label_pc_f4e8:                                ; preds = %dec_label_pc_f498
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %dec_label_pc_f4ec, %dec_label_pc_f4e8
  %v2_f4f4 = phi i32 [ %v1_f4f8, %dec_label_pc_f4ec ], [ 0, %dec_label_pc_f4e8 ]
  %v1_f4ec = load i32, i32* %r5.global-to-local, align 4
  %v2_f4ec = add i32 %v1_f4ec, %v2_f4f4
  %v3_f4ec = inttoptr i32 %v2_f4ec to i8*
  %v4_f4ec = load i8, i8* %v3_f4ec, align 1
  %v6_f4ec = zext i8 %v4_f4ec to i32
  %v1_f4f0 = xor i32 %v6_f4ec, 80
  store i32 %v1_f4f0, i32* %r3.global-to-local, align 4
  %v1_f4f4 = trunc i32 %v1_f4f0 to i8
  store i8 %v1_f4f4, i8* %v3_f4ec, align 1
  %v0_f4f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f4f8 = add i32 %v0_f4f8, 1
  store i32 %v1_f4f8, i32* %r2.global-to-local, align 4
  %v1_f4fc = load i32, i32* @r6, align 4
  %v9_f4fc = icmp eq i32 %v1_f4f8, %v1_f4fc
  br i1 %v9_f4fc, label %dec_label_pc_f504.loopexit, label %dec_label_pc_f4ec

dec_label_pc_f504.loopexit:                       ; preds = %dec_label_pc_f4ec
  %extract.t7 = trunc i32 %v1_f4f8 to i8
  br label %dec_label_pc_f504

dec_label_pc_f504:                                ; preds = %dec_label_pc_f504.loopexit, %dec_label_pc_f498
  %v0_f514.off0 = phi i8 [ %extract.t7, %dec_label_pc_f504.loopexit ], [ %extract.t8, %dec_label_pc_f498 ]
  %v2_f504 = load i32, i32* @global_var_203a0.147, align 4
  store i32 %v2_f504, i32* %r0.global-to-local, align 4
  %v2_f508 = load i32, i32* @global_var_203cc.149, align 4
  %v3_f50c = mul i32 %v2_f504, 16
  store i32 %v3_f50c, i32* %r1.global-to-local, align 4
  %v2_f510 = or i32 %v3_f50c, 13
  %v3_f514 = add i32 %v2_f510, %v2_f508
  %v4_f514 = inttoptr i32 %v3_f514 to i8*
  store i8 %v0_f514.off0, i8* %v4_f514, align 1
  store i32 ptrtoint (i16** @global_var_203d0.151 to i32), i32* %r4.global-to-local, align 4
  %v2_f520 = load i16, i16* bitcast (i16** @global_var_203d0.151 to i16*), align 4
  %v3_f520 = zext i16 %v2_f520 to i32
  store i32 %v3_f520, i32* %lr.global-to-local, align 4
  %v2_f528 = load i32, i32* @global_var_203cc.149, align 4
  store i32 %v2_f528, i32* %r2.global-to-local, align 4
  %v0_f530 = load i32, i32* %r1.global-to-local, align 4
  %v2_f530 = add i32 %v0_f530, %v2_f528
  store i32 %v2_f530, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_203d0.151 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_f538 = load i32, i32* @sb, align 4
  %v1_f538 = load i32, i32* @r7, align 4
  %v2_f538 = add i32 %v1_f538, %v0_f538
  store i32 %v2_f538, i32* %ip.global-to-local, align 4
  %v0_f53c = load i32, i32* %r0.global-to-local, align 4
  %v1_f53c = add i32 %v0_f53c, 1
  store i32 %v1_f53c, i32* %r0.global-to-local, align 4
  %v3_f540 = add i32 %v2_f530, 10
  %v4_f540 = inttoptr i32 %v3_f540 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_203d0.151 to i32), i32 16), i32 16) to i16), i16* %v4_f540, align 2
  %v0_f544 = load i32, i32* %lr.global-to-local, align 4
  %v1_f544 = trunc i32 %v0_f544 to i16
  %v2_f544 = load i32, i32* %r1.global-to-local, align 4
  %v3_f544 = add i32 %v2_f544, 8
  %v4_f544 = inttoptr i32 %v3_f544 to i16*
  store i16 %v1_f544, i16* %v4_f544, align 2
  %v0_f548 = load i32, i32* %r5.global-to-local, align 4
  %v1_f548 = load i32, i32* %ip.global-to-local, align 4
  %v2_f548 = add i32 %v1_f548, 4
  %v3_f548 = inttoptr i32 %v2_f548 to i32*
  store i32 %v0_f548, i32* %v3_f548, align 4
  %v1_f54c = load i32, i32* @fp, align 4
  %v2_f54c = inttoptr i32 %v1_f54c to i32*
  store i32 %v1_f53c, i32* %v2_f54c, align 4
  %v0_f550 = load i32, i32* %r3.global-to-local, align 4
  %v1_f550 = trunc i32 %v0_f550 to i16
  %v2_f550 = load i32, i32* %r4.global-to-local, align 4
  %v3_f550 = inttoptr i32 %v2_f550 to i16*
  store i16 %v1_f550, i16* %v3_f550, align 2
  store i32 %v3_f40c, i32* @r4, align 4
  store i32 %v6_f40c, i32* @r5, align 4
  store i32 %v9_f40c, i32* @r6, align 4
  store i32 %v12_f40c, i32* @r7, align 4
  store i32 %v15_f40c, i32* @r8, align 4
  store i32 %v18_f40c, i32* @sb, align 4
  store i32 %v21_f40c, i32* @sl, align 4
  store i32 %v24_f40c, i32* @fp, align 4
  ret i32 %v1_f53c

; uselistorder directives
  uselistorder i32 %v3_f50c, { 1, 0 }
  uselistorder i32 %v1_f4f8, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f4cc, { 1, 0, 2 }
  uselistorder i32 %v3_f4a0, { 1, 0 }
  uselistorder i32 %v1_f48c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f460, { 1, 0, 2 }
  uselistorder i32 %v2_f43c, { 1, 0, 2 }
  uselistorder i32 %v3_f430, { 1, 0 }
  uselistorder i32 %v1_f420, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_11864, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 80, 81, 47, 48, 49, 50, 51, 73, 74, 75, 76, 77, 78, 79, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_f56c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f56c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp314 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i16, align 2
  %tmp342 = call i16 @__decompiler_undefined_function_1()
  %v3_f56c = load i32, i32* @r4, align 4
  %v6_f56c = load i32, i32* @r5, align 4
  %v18_f56c = load i32, i32* @sb, align 4
  %v24_f56c = load i32, i32* @fp, align 4
  %v0_f578 = call i32 @function_121b8()
  store i32 %v0_f578, i32* %r0.global-to-local, align 4
  %v7_f57c = icmp eq i32 %v0_f578, -1
  %. = zext i1 %v7_f57c to i32
  %tmp345 = icmp slt i32 %v0_f578, 1
  %storemerge308 = select i1 %tmp345, i32 %., i32 1
  store i32 %storemerge308, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_22428.143 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f598 = icmp eq i32 %storemerge308, 0
  store i1 %v2_f598, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f578, i32* @global_var_22428.143, align 4
  br i1 %v2_f598, label %dec_label_pc_f5b4, label %dec_label_pc_f5a4

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_f56c
  store i32 %v3_f56c, i32* %r4.global-to-local, align 4
  store i32 %v6_f56c, i32* @r5, align 4
  store i32 %v18_f56c, i32* @sb, align 4
  store i32 %v24_f56c, i32* @fp, align 4
  ret i32 %v0_f578

dec_label_pc_f5b4:                                ; preds = %dec_label_pc_f56c
  %v0_f5b4 = call i32 @function_11b20()
  store i32 %v0_f5b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f5b4, i32* @global_var_22408.78, align 4
  %v1_f5c0 = call i32 @function_f1e4(i32 %v0_f5b4)
  %v0_f5c4 = load i32, i32* @r4, align 4
  store i32 %v0_f5c4, i32* %r0.global-to-local, align 4
  %v1_f5c8 = inttoptr i32 %v0_f5c4 to i32*
  %v2_f5c8 = call i32 @function_12148(i32* %v1_f5c8)
  store i32 ptrtoint (i32* @global_var_203d4.145 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f5c8, i32* @global_var_203d4.145, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f5dc = call i32 @function_1383c(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_22420.156 to i32), i32* %r3.global-to-local, align 4
  %v0_f5e4 = load i32, i32* @r4, align 4
  %v5_f5e4 = trunc i32 %v0_f5e4 to i16
  store i16 %v5_f5e4, i16* %stack_var_-52, align 2
  store i32 %v2_f5dc, i32* @global_var_22420.156, align 4
  store i32 %v0_f5e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge, %dec_label_pc_f5b4
  %v2_f5fc = phi i32 [ %v2_f5fc.pre, %dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge ], [ %v2_f5dc, %dec_label_pc_f5b4 ]
  %v0_f604 = phi i32 [ %v0_f634, %dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge ], [ %v0_f5e4, %dec_label_pc_f5b4 ]
  %v3_f5f0162 = phi i16 [ %v5_f634, %dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge ], [ %v5_f5e4, %dec_label_pc_f5b4 ]
  %v4_f5f0 = sext i16 %v3_f5f0162 to i32
  %v3_f5f8 = mul i32 %v0_f604, 256
  store i32 %v3_f5f8, i32* %ip.global-to-local, align 4
  %v2_f60c = mul nsw i32 %v4_f5f0, 288
  %v2_f610 = mul i32 %v0_f604, 288
  %v1_f614 = add nsw i32 %v4_f5f0, 1
  store i32 %v1_f614, i32* %r0.global-to-local, align 4
  %v2_f618 = add i32 %v2_f60c, %v2_f5fc
  store i32 %v2_f618, i32* %r2.global-to-local, align 4
  %v2_f61c = add i32 %v2_f610, %v2_f5fc
  store i32 %v2_f61c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_f62c = add i32 %v2_f618, 4
  %v3_f62c = inttoptr i32 %v2_f62c to i32*
  store i32 -1, i32* %v3_f62c, align 4
  %v0_f630 = load i32, i32* @r5, align 4
  %v1_f630 = load i32, i32* %r1.global-to-local, align 4
  %v2_f630 = add i32 %v1_f630, 12
  %v3_f630 = inttoptr i32 %v2_f630 to i32*
  store i32 %v0_f630, i32* %v3_f630, align 4
  %v0_f634 = load i32, i32* %r0.global-to-local, align 4
  %v5_f634 = trunc i32 %v0_f634 to i16
  %v7_f638 = icmp sgt i16 %v3_f5f0162, 254
  br i1 %v7_f638, label %dec_label_pc_f63c, label %dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge

dec_label_pc_f5f0.dec_label_pc_f5f0_crit_edge:    ; preds = %dec_label_pc_f5f0
  %v2_f5fc.pre = load i32, i32* @global_var_22420.156, align 4
  br label %dec_label_pc_f5f0

dec_label_pc_f63c:                                ; preds = %dec_label_pc_f5f0
  store i16 %v5_f634, i16* %stack_var_-52, align 2
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_f648 = call i32 @function_12cd4(i32 2, i32 3, i32 6)
  store i32 %v3_f648, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22424.158 to i32), i32* %r2.global-to-local, align 4
  %v2_f650 = icmp eq i32 %v3_f648, -1
  store i1 %v2_f650, i1* %cpsr_c.global-to-local, align 1
  %v7_f650 = icmp eq i32 %v3_f648, -1
  store i1 %v7_f650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f648, i32* %r4.global-to-local, align 4
  store i32 %v3_f648, i32* @global_var_22424.158, align 4
  br i1 %v7_f650, label %dec_label_pc_fdbc, label %dec_label_pc_f660

dec_label_pc_f660:                                ; preds = %dec_label_pc_f63c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f664 = load i32, i32* @r5, align 4
  store i32 %v0_f664, i32* %r2.global-to-local, align 4
  %v2_f668 = call i32 @function_122fc(i32 %v3_f648, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f670 = or i32 %v2_f668, 2048
  store i32 %v1_f670, i32* %r2.global-to-local, align 4
  %v0_f674 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f674, i32* %r0.global-to-local, align 4
  %v2_f678 = call i32 @function_122fc(i32 %v0_f674, i32 4)
  %v2_f680 = load i32, i32* @global_var_22424.158, align 4
  store i32 %v2_f680, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_f68c = load i32, i32* @r5, align 4
  store i32 %v0_f68c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f694 = ptrtoint i16* %stack_var_-52 to i32
  store i32 %v2_f694, i32* %r3.global-to-local, align 4
  store i16 1, i16* %stack_var_-52, align 2
  %v5_f6a4 = call i32 @function_12c90(i32 %v2_f680, i32 %v0_f68c, i32 3, i32 %v2_f694, i32 4)
  store i32 %v5_f6a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6a8 = icmp eq i32 %v5_f6a4, 0
  store i1 %v2_f6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6a8, label %dec_label_pc_f6b0, label %dec_label_pc_fdb0

dec_label_pc_f6b0:                                ; preds = %dec_label_pc_f660, %dec_label_pc_f6b0
  %v0_f6b0 = call i32 @function_f188()
  %v3_f6b4 = mul i32 %v0_f6b0, 65536
  store i32 %v3_f6b4, i32* %r0.global-to-local, align 4
  %v1_f6bc = mul i32 %v0_f6b0, 256
  %v3_f6c0 = and i32 %v1_f6bc, 65280
  %tmp348 = udiv i32 %v0_f6b0, 256
  %v4_f6c4 = urem i32 %tmp348, 256
  %v5_f6c4 = or i32 %v4_f6c4, %v3_f6c0
  store i32 %v5_f6c4, i32* %r3.global-to-local, align 4
  %v2_f6c8 = icmp ugt i32 %v5_f6c4, 1023
  store i1 %v2_f6c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c8 = icmp eq i32 %v5_f6c4, 1024
  store i1 %v7_f6c8, i1* %cpsr_z.global-to-local, align 1
  %v3_f6d0 = icmp ult i32 %v5_f6c4, 1022
  br i1 %v3_f6d0, label %dec_label_pc_f6b0, label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_f6b0
  %v5_f6cc.le = trunc i32 %v0_f6b0 to i16
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %r0.global-to-local, align 4
  %v2_f6d8 = load i8, i8* bitcast (i8** @global_var_203a4.160 to i8*), align 4
  %v3_f6d8 = zext i8 %v2_f6d8 to i32
  %v1_f6dc = and i32 %v3_f6d8, 240
  %v1_f6e0 = or i32 %v1_f6dc, 5
  store i32 %v1_f6e0, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_203a4.160 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_203a6.161 to i16*), align 4
  %v0_f700 = call i32 @function_f188()
  %v1_f700 = trunc i32 %v0_f700 to i16
  %v3_f708 = load i8, i8* @global_var_203c4.164, align 1
  store i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %ip.global-to-local, align 4
  %tmp = urem i8 %v3_f708, 16
  %v1_f714 = zext i8 %tmp to i32
  %v1_f718 = or i32 %v1_f714, 80
  store i32 %v1_f718, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 6, i32* @r4, align 4
  store i8 64, i8* bitcast (i32* @global_var_203ac.165 to i8*), align 4
  store i16 %v1_f700, i16* bitcast (i32* @global_var_203a8.166 to i16*), align 4
  %v1_f72c = trunc i32 %v1_f718 to i8
  store i8 %v1_f72c, i8* @global_var_203c4.164, align 1
  store i8 6, i8* bitcast (i32* @global_var_203ad.167 to i8*), align 4
  %v4_f734 = sext i16 %v5_f6cc.le to i32
  store i32 %v4_f734, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_203ba.168, align 2
  store i16 %v5_f6cc.le, i16* bitcast (i32* @global_var_203b8.163 to i16*), align 4
  %v0_f744 = call i32 @function_f188()
  %v1_f744 = trunc i32 %v0_f744 to i16
  %v3_f74c = load i8, i8* @global_var_203c5.169, align 1
  %v4_f74c = zext i8 %v3_f74c to i32
  store i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32* %ip.global-to-local, align 4
  %v1_f754 = or i32 %v4_f74c, 2
  store i32 %v1_f754, i32* %r3.global-to-local, align 4
  store i16 %v1_f744, i16* bitcast (i32* @global_var_203c6.170 to i16*), align 4
  store i32 ptrtoint ([8 x i8]* @global_var_176f0.172 to i32), i32* %r1.global-to-local, align 4
  %v1_f760 = trunc i32 %v1_f754 to i8
  store i8 %v1_f760, i8* @global_var_203c5.169, align 1
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f76c = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint ([8 x i8]* @global_var_176f0.172 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176f8.176 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f77c = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint ([5 x i8]* @global_var_176f8.176 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17700.178 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f78c = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint ([9 x i8]* @global_var_17700.178 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r1.global-to-local, align 4
  %v5_f79c = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1770c.180 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f7ac = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint (i32* @global_var_1770c.180 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f7bc = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_177ec.184 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f7cc = call i32 @function_f40c(i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), i32 ptrtoint ([5 x i8]* @global_var_177ec.184 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_1771c.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f7dc = call i32 @function_f40c(i32 ptrtoint ([4 x i8]* @global_var_1771c.186 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_17728.190 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f7ec = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_17728.190 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_17730.192 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f7fc = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_17730.192 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f80c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_17738.194 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f81c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_17738.194 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17740.196 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f82c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_17740.196 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1774c.198 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f83c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_1774c.198 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_17754.200 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f84c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_17754.200 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1775c.202 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f85c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_1775c.202 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_17768.204 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f86c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_17768.204 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_17770.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f87c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([4 x i8]* @global_var_17770.206 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_17774.208 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f88c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_17774.208 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1777c.210 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f89c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([4 x i8]* @global_var_1777c.210 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17780.212 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f8ac = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_17780.212 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17700.178 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f8bc = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_17700.178 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1770c.180 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f8cc = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint (i32* @global_var_1770c.180 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1778c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f8dc = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_1778c.214 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_17794.216 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f8ec = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_17794.216 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_1779c.218 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_f8fc = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([11 x i8]* @global_var_1779c.218 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_177a8.220 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f90c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_177a8.220 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_177b0.222 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f91c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), i32 ptrtoint (i32* @global_var_177b0.222 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_17768.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f92c = call i32 @function_f40c(i32 ptrtoint ([8 x i8]* @global_var_17768.204 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_177c0.224 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_177c0.224 to i32), i32* %r1.global-to-local, align 4
  %v5_f93c = call i32 @function_f40c(i32 ptrtoint ([5 x i8]* @global_var_177c0.224 to i32), i32 ptrtoint ([5 x i8]* @global_var_177c0.224 to i32), i32 8)
  %v0_f940 = load i32, i32* @r4, align 4
  store i32 %v0_f940, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_177c8.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  %v4_f94c = call i32 @function_f40c(i32 ptrtoint ([7 x i8]* @global_var_177c8.226 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 %v0_f940)
  store i32 ptrtoint ([4 x i8]* @global_var_177d0.228 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f95c = call i32 @function_f40c(i32 ptrtoint ([4 x i8]* @global_var_177d0.228 to i32), i32 ptrtoint (i32* @global_var_176b8.182 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_177d4.230 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_177d4.230 to i32), i32* %r1.global-to-local, align 4
  %v5_f96c = call i32 @function_f40c(i32 ptrtoint ([8 x i8]* @global_var_177d4.230 to i32), i32 ptrtoint ([8 x i8]* @global_var_177d4.230 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_177dc.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_177e8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_f97c = call i32 @function_f40c(i32 ptrtoint ([11 x i8]* @global_var_177dc.232 to i32), i32 ptrtoint ([9 x i8]* @global_var_177e8.234 to i32), i32 18)
  store i32 %v5_f97c, i32* %r0.global-to-local, align 4
  %v2_f984 = ptrtoint i32* %stack_var_-1866 to i32
  br label %dec_label_pc_f98c

dec_label_pc_f98c:                                ; preds = %dec_label_pc_100cc, %dec_label_pc_f6d4
  %stack_var_-1880.0 = phi i32 [ %v2_f984, %dec_label_pc_f6d4 ], [ %stack_var_-1880.1, %dec_label_pc_100cc ]
  %stack_var_-1876.0 = phi i16 [ %v5_f6cc.le, %dec_label_pc_f6d4 ], [ %stack_var_-1876.1, %dec_label_pc_100cc ]
  store i32 ptrtoint (i32* @global_var_203d4.145 to i32), i32* %r0.global-to-local, align 4
  %v2_f990 = load i32, i32* @global_var_203d4.145, align 4
  store i32 %v2_f990, i32* @r4, align 4
  %v0_f994 = load i32, i32* @fp, align 4
  %v3_f994 = icmp uge i32 %v0_f994, %v2_f990
  store i1 %v3_f994, i1* %cpsr_c.global-to-local, align 1
  %v9_f994 = icmp eq i32 %v0_f994, %v2_f990
  store i1 %v9_f994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f994, label %dec_label_pc_fc14, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f98c
  store i32 0, i32* %r3.global-to-local, align 4
  store i16 0, i16* %stack_var_-52, align 2
  %v2_f9a4 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %.thread39, %dec_label_pc_f99c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_f9bc = call i32 @function_f188()
  %v1_f9bc = trunc i32 %v0_f9bc to i16
  store i32 %v0_f9bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %r2.global-to-local, align 4
  %v2_f9c8 = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_f9c8, i32* %r3.global-to-local, align 4
  store i16 %v1_f9bc, i16* bitcast (i32* @global_var_203a8.166 to i16*), align 4
  store i32 %v2_f9c8, i32* @global_var_203b0.235, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_faa8, %dec_label_pc_fa04, %dec_label_pc_fadc, %dec_label_pc_fad0, %dec_label_pc_fac4, %dec_label_pc_fab8, %.thread30, %bb367, %bb366, %bb365, %bb364, %bb363, %dec_label_pc_faa0, %dec_label_pc_fa98, %bb359, %dec_label_pc_fa68, %dec_label_pc_fa44, %bb352, %dec_label_pc_fa14, %bb351, %dec_label_pc_f9fc, %bb350, %bb369, %dec_label_pc_f9a8
  %v0_f9d4 = call i32 @function_f188()
  store i32 %v0_f9d4, i32* %r0.global-to-local, align 4
  %v1_f9d8 = urem i32 %v0_f9d4, 256
  store i32 %v1_f9d8, i32* %r1.global-to-local, align 4
  %v3_f9dc = udiv i32 %v0_f9d4, 256
  store i32 %v3_f9dc, i32* %r3.global-to-local, align 4
  %v3_f9e0 = udiv i32 %v0_f9d4, 65536
  store i32 %v3_f9e0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e4 = icmp eq i32 %v1_f9d8, 0
  store i1 %v2_f9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e4, label %bb350, label %bb349

bb349:                                            ; preds = %dec_label_pc_f9d4
  %v3_f9e8 = icmp ugt i32 %v1_f9d8, 126
  store i1 %v3_f9e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f9e8 = icmp eq i32 %v1_f9d8, 127
  store i1 %v8_f9e8, i1* %cpsr_z.global-to-local, align 1
  br label %bb350

bb350:                                            ; preds = %dec_label_pc_f9d4, %bb349
  %v0_f9f8 = phi i1 [ true, %dec_label_pc_f9d4 ], [ %v8_f9e8, %bb349 ]
  %v1_f9ec = urem i32 %v3_f9dc, 256
  store i32 %v1_f9ec, i32* %ip.global-to-local, align 4
  %v1_f9f0 = urem i32 %v3_f9e0, 256
  store i32 %v1_f9f0, i32* %r2.global-to-local, align 4
  %v1_f9f4 = and i32 %v0_f9d4, 8388608
  %v2_f9f4 = icmp ne i32 %v1_f9f4, 0
  store i1 %v2_f9f4, i1* %cpsr_c.global-to-local, align 1
  %v3_f9f4 = udiv i32 %v0_f9d4, 16777216
  store i32 %v3_f9f4, i32* %r0.global-to-local, align 4
  br i1 %v0_f9f8, label %dec_label_pc_f9d4, label %dec_label_pc_f9fc

dec_label_pc_f9fc:                                ; preds = %bb350
  %v2_f9fc = icmp ugt i32 %v1_f9d8, 2
  store i1 %v2_f9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9fc = icmp eq i32 %v1_f9d8, 3
  store i1 %v7_f9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9fc, label %dec_label_pc_f9d4, label %dec_label_pc_fa04

dec_label_pc_fa04:                                ; preds = %dec_label_pc_f9fc
  %v1_fa04 = add nsw i32 %v1_f9d8, -15
  store i32 %v1_fa04, i32* %r3.global-to-local, align 4
  %v2_fa08 = icmp ugt i32 %v1_f9d8, 55
  store i1 %v2_fa08, i1* %cpsr_c.global-to-local, align 1
  %v7_fa08 = icmp eq i32 %v1_f9d8, 56
  store i1 %v7_fa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa08, label %dec_label_pc_f9d4, label %bb351

bb351:                                            ; preds = %dec_label_pc_fa04
  %v3_fa0c = icmp ne i32 %v1_fa04, 0
  store i1 %v3_fa0c, i1* %cpsr_c.global-to-local, align 1
  %v8_fa0c = icmp eq i32 %v1_fa04, 1
  store i1 %v8_fa0c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa10 = xor i1 %v3_fa0c, true
  %v3_fa10 = or i1 %v8_fa0c, %v2_fa10
  br i1 %v3_fa10, label %dec_label_pc_f9d4, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %bb351
  %v2_fa14 = icmp ugt i32 %v1_f9d8, 9
  store i1 %v2_fa14, i1* %cpsr_c.global-to-local, align 1
  %v7_fa14 = icmp eq i32 %v1_f9d8, 10
  store i1 %v7_fa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa14, label %dec_label_pc_f9d4, label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_fa14
  %v2_fa1c = icmp ugt i32 %v1_f9d8, 191
  store i1 %v2_fa1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa1c = icmp eq i32 %v1_f9d8, 192
  store i1 %v7_fa1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa1c, label %bb352, label %dec_label_pc_fa28

bb352:                                            ; preds = %dec_label_pc_fa1c
  %v3_fa20 = icmp ugt i32 %v1_f9ec, 167
  store i1 %v3_fa20, i1* %cpsr_c.global-to-local, align 1
  %v8_fa20 = icmp eq i32 %v1_f9ec, 168
  store i1 %v8_fa20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa20, label %dec_label_pc_f9d4, label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_fa1c, %bb352
  %v7_fa28 = icmp eq i32 %v1_f9d8, 172
  %.429 = zext i1 %v7_fa28 to i32
  store i32 %.429, i32* %r3.global-to-local, align 4
  %v2_fa34 = icmp ugt i32 %v1_f9ec, 14
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  %v7_fa34 = icmp eq i32 %v1_f9ec, 15
  store i1 %v7_fa34, i1* %cpsr_z.global-to-local, align 1
  %v2_fa38 = xor i1 %v2_fa34, true
  %v3_fa38 = or i1 %v7_fa34, %v2_fa38
  br i1 %v3_fa38, label %.thread8, label %bb355

.thread8:                                         ; preds = %dec_label_pc_fa28
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa4c

bb355:                                            ; preds = %dec_label_pc_fa28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa3c = icmp eq i1 %v7_fa28, false
  store i1 %v2_fa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa3c, label %dec_label_pc_fa4c, label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %bb355
  %v2_fa44 = icmp ugt i32 %v1_f9ec, 30
  store i1 %v2_fa44, i1* %cpsr_c.global-to-local, align 1
  %v7_fa44 = icmp eq i32 %v1_f9ec, 31
  store i1 %v7_fa44, i1* %cpsr_z.global-to-local, align 1
  %v2_fa48 = xor i1 %v2_fa44, true
  %v3_fa48 = or i1 %v7_fa44, %v2_fa48
  br i1 %v3_fa48, label %dec_label_pc_f9d4, label %dec_label_pc_fa4c

dec_label_pc_fa4c:                                ; preds = %.thread8, %dec_label_pc_fa44, %bb355
  %v7_fa4c = icmp eq i32 %v1_f9d8, 100
  %.430 = zext i1 %v7_fa4c to i32
  store i32 %.430, i32* %r3.global-to-local, align 4
  %v2_fa58 = icmp ugt i32 %v1_f9ec, 62
  store i1 %v2_fa58, i1* %cpsr_c.global-to-local, align 1
  %v7_fa58 = icmp eq i32 %v1_f9ec, 63
  store i1 %v7_fa58, i1* %cpsr_z.global-to-local, align 1
  %v2_fa5c = xor i1 %v2_fa58, true
  %v3_fa5c = or i1 %v7_fa58, %v2_fa5c
  br i1 %v3_fa5c, label %.thread13, label %bb358

.thread13:                                        ; preds = %dec_label_pc_fa4c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa70

bb358:                                            ; preds = %dec_label_pc_fa4c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa60 = icmp eq i1 %v7_fa4c, false
  store i1 %v2_fa60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa60, label %dec_label_pc_fa70, label %dec_label_pc_fa68

dec_label_pc_fa68:                                ; preds = %bb358
  %v2_fa68 = icmp ugt i32 %v1_f9ec, 125
  store i1 %v2_fa68, i1* %cpsr_c.global-to-local, align 1
  %v7_fa68 = icmp eq i32 %v1_f9ec, 126
  store i1 %v7_fa68, i1* %cpsr_z.global-to-local, align 1
  %v2_fa6c = xor i1 %v2_fa68, true
  %v3_fa6c = or i1 %v7_fa68, %v2_fa6c
  br i1 %v3_fa6c, label %dec_label_pc_f9d4, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %.thread13, %dec_label_pc_fa68, %bb358
  %v2_fa70 = icmp ugt i32 %v1_f9d8, 168
  store i1 %v2_fa70, i1* %cpsr_c.global-to-local, align 1
  %v7_fa70 = icmp eq i32 %v1_f9d8, 169
  store i1 %v7_fa70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa70, label %bb359, label %dec_label_pc_fa7c

bb359:                                            ; preds = %dec_label_pc_fa70
  %v3_fa74 = icmp eq i32 %v1_f9ec, 255
  store i1 %v3_fa74, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fa74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa74, label %dec_label_pc_f9d4, label %dec_label_pc_fa7c

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_fa70, %bb359
  %v7_fa7c = icmp eq i32 %v1_f9d8, 198
  %.431 = zext i1 %v7_fa7c to i32
  store i32 %.431, i32* %r3.global-to-local, align 4
  %v2_fa88 = icmp ugt i32 %v1_f9ec, 16
  store i1 %v2_fa88, i1* %cpsr_c.global-to-local, align 1
  %v7_fa88 = icmp eq i32 %v1_f9ec, 17
  store i1 %v7_fa88, i1* %cpsr_z.global-to-local, align 1
  %v2_fa8c = xor i1 %v2_fa88, true
  %v3_fa8c = or i1 %v7_fa88, %v2_fa8c
  br i1 %v3_fa8c, label %.thread19, label %bb362

.thread19:                                        ; preds = %dec_label_pc_fa7c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faa0

bb362:                                            ; preds = %dec_label_pc_fa7c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa90 = icmp eq i1 %v7_fa7c, false
  store i1 %v2_fa90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa90, label %dec_label_pc_faa0, label %dec_label_pc_fa98

dec_label_pc_fa98:                                ; preds = %bb362
  %v2_fa98 = icmp ugt i32 %v1_f9ec, 18
  store i1 %v2_fa98, i1* %cpsr_c.global-to-local, align 1
  %v7_fa98 = icmp eq i32 %v1_f9ec, 19
  store i1 %v7_fa98, i1* %cpsr_z.global-to-local, align 1
  %v2_fa9c = xor i1 %v2_fa98, true
  %v3_fa9c = or i1 %v7_fa98, %v2_fa9c
  br i1 %v3_fa9c, label %dec_label_pc_f9d4, label %dec_label_pc_faa0

dec_label_pc_faa0:                                ; preds = %.thread19, %dec_label_pc_fa98, %bb362
  %v2_faa0 = icmp ugt i32 %v1_f9d8, 222
  store i1 %v2_faa0, i1* %cpsr_c.global-to-local, align 1
  %v7_faa0 = icmp eq i32 %v1_f9d8, 223
  store i1 %v7_faa0, i1* %cpsr_z.global-to-local, align 1
  %v2_faa4 = xor i1 %v7_faa0, true
  %v3_faa4 = and i1 %v2_faa0, %v2_faa4
  br i1 %v3_faa4, label %dec_label_pc_f9d4, label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_faa0
  %v1_faa8 = add nsw i32 %v1_f9d8, -6
  store i32 %v1_faa8, i32* %r3.global-to-local, align 4
  %v2_faac = icmp ugt i32 %v1_f9d8, 10
  store i1 %v2_faac, i1* %cpsr_c.global-to-local, align 1
  %v7_faac = icmp eq i32 %v1_f9d8, 11
  store i1 %v7_faac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faac, label %dec_label_pc_f9d4, label %bb363

bb363:                                            ; preds = %dec_label_pc_faa8
  %v3_fab0 = icmp ne i32 %v1_faa8, 0
  store i1 %v3_fab0, i1* %cpsr_c.global-to-local, align 1
  %v8_fab0 = icmp eq i32 %v1_faa8, 1
  store i1 %v8_fab0, i1* %cpsr_z.global-to-local, align 1
  %v2_fab4 = xor i1 %v3_fab0, true
  %v3_fab4 = or i1 %v8_fab0, %v2_fab4
  br i1 %v3_fab4, label %dec_label_pc_f9d4, label %dec_label_pc_fab8

dec_label_pc_fab8:                                ; preds = %bb363
  %v2_fab8 = icmp ugt i32 %v1_f9d8, 21
  store i1 %v2_fab8, i1* %cpsr_c.global-to-local, align 1
  %v7_fab8 = icmp eq i32 %v1_f9d8, 22
  store i1 %v7_fab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab8, label %dec_label_pc_f9d4, label %bb364

bb364:                                            ; preds = %dec_label_pc_fab8
  %v3_fabc = icmp ugt i32 %v1_f9d8, 20
  store i1 %v3_fabc, i1* %cpsr_c.global-to-local, align 1
  %v8_fabc = icmp eq i32 %v1_f9d8, 21
  store i1 %v8_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fabc, label %dec_label_pc_f9d4, label %dec_label_pc_fac4

dec_label_pc_fac4:                                ; preds = %bb364
  %v2_fac4 = icmp ugt i32 %v1_f9d8, 27
  store i1 %v2_fac4, i1* %cpsr_c.global-to-local, align 1
  %v7_fac4 = icmp eq i32 %v1_f9d8, 28
  store i1 %v7_fac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac4, label %dec_label_pc_f9d4, label %bb365

bb365:                                            ; preds = %dec_label_pc_fac4
  %v3_fac8 = icmp ugt i32 %v1_f9d8, 25
  store i1 %v3_fac8, i1* %cpsr_c.global-to-local, align 1
  %v8_fac8 = icmp eq i32 %v1_f9d8, 26
  store i1 %v8_fac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fac8, label %dec_label_pc_f9d4, label %dec_label_pc_fad0

dec_label_pc_fad0:                                ; preds = %bb365
  %v2_fad0 = icmp ugt i32 %v1_f9d8, 29
  store i1 %v2_fad0, i1* %cpsr_c.global-to-local, align 1
  %v7_fad0 = icmp eq i32 %v1_f9d8, 30
  store i1 %v7_fad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fad0, label %dec_label_pc_f9d4, label %bb366

bb366:                                            ; preds = %dec_label_pc_fad0
  %v3_fad4 = icmp ugt i32 %v1_f9d8, 28
  store i1 %v3_fad4, i1* %cpsr_c.global-to-local, align 1
  %v8_fad4 = icmp eq i32 %v1_f9d8, 29
  store i1 %v8_fad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fad4, label %dec_label_pc_f9d4, label %dec_label_pc_fadc

dec_label_pc_fadc:                                ; preds = %bb366
  %v2_fadc = icmp ugt i32 %v1_f9d8, 54
  store i1 %v2_fadc, i1* %cpsr_c.global-to-local, align 1
  %v7_fadc = icmp eq i32 %v1_f9d8, 55
  store i1 %v7_fadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fadc, label %dec_label_pc_f9d4, label %bb367

bb367:                                            ; preds = %dec_label_pc_fadc
  %v3_fae0 = icmp ugt i32 %v1_f9d8, 32
  store i1 %v3_fae0, i1* %cpsr_c.global-to-local, align 1
  %v8_fae0 = icmp eq i32 %v1_f9d8, 33
  store i1 %v8_fae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fae0, label %dec_label_pc_f9d4, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %bb367
  %v2_fae8 = icmp ugt i32 %v1_f9d8, 214
  store i1 %v2_fae8, i1* %cpsr_c.global-to-local, align 1
  %v7_fae8 = icmp eq i32 %v1_f9d8, 215
  store i1 %v7_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae8, label %.thread30, label %bb368

bb368:                                            ; preds = %dec_label_pc_fae8
  %v3_faec = icmp ugt i32 %v1_f9d8, 213
  store i1 %v3_faec, i1* %cpsr_c.global-to-local, align 1
  %v8_faec = icmp eq i32 %v1_f9d8, 214
  store i1 %v8_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faec, label %bb369, label %dec_label_pc_fafc

.thread30:                                        ; preds = %dec_label_pc_fae8
  br label %dec_label_pc_f9d4

bb369:                                            ; preds = %bb368
  br label %dec_label_pc_f9d4

dec_label_pc_fafc:                                ; preds = %bb368
  %v5_fb08 = call i32 @llvm.bswap.i32(i32 %v0_f9d4)
  store i32 %v5_fb08, i32* %r3.global-to-local, align 4
  %tmp370 = and i32 %v0_f9d4, 65280
  %tmp371 = call i32 @llvm.bswap.i32(i32 %tmp370)
  %v3_fb10 = udiv i32 %v5_fb08, 16777216
  %tmp372 = and i32 %v0_f9d4, 16711680
  %tmp373 = call i32 @llvm.bswap.i32(i32 %tmp372)
  %v4_fb18 = udiv i32 %tmp371, 256
  %v4_fb1c = mul nuw nsw i32 %tmp373, 256
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* @r0, align 4
  %tmp374 = and i32 %v0_f9d4, 65536
  %v3_fb24 = icmp ne i32 %tmp374, 0
  store i1 %v3_fb24, i1* %cpsr_c.global-to-local, align 1
  %v4_fb24 = mul i32 %v5_fb08, 16777216
  %v5_fb18 = or i32 %v4_fb24, %v3_fb10
  %v5_fb1c = or i32 %v5_fb18, %v4_fb18
  %v5_fb24 = or i32 %v5_fb1c, %v4_fb1c
  store i32 %v5_fb24, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_203ae.236 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_fb24, i32* @global_var_203b4.237, align 4
  %v3_fb34 = call i32 @function_dd58(i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32 20)
  store i32 %v3_fb34, i32* %r0.global-to-local, align 4
  %v3_fb38 = load i16, i16* %stack_var_-52, align 2
  %v4_fb38 = sext i16 %v3_fb38 to i32
  store i32 %v4_fb38, i32* %r1.global-to-local, align 4
  %tmp531 = sdiv i16 %v3_fb38, 10
  %v5_fb48 = zext i16 %tmp531 to i32
  %v3_fb4c = mul nuw nsw i32 %v5_fb48, 8
  store i32 %v3_fb4c, i32* %r2.global-to-local, align 4
  %v2_fb54 = mul nuw nsw i32 %v5_fb48, 10
  store i32 %v2_fb54, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %ip.global-to-local, align 4
  %v3_fb5c = icmp uge i32 %v4_fb38, %v2_fb54
  store i1 %v3_fb5c, i1* %cpsr_c.global-to-local, align 1
  %v9_fb5c = icmp eq i32 %v4_fb38, %v2_fb54
  store i1 %v9_fb5c, i1* %cpsr_z.global-to-local, align 1
  %v1_fb60 = trunc i32 %v3_fb34 to i16
  store i16 %v1_fb60, i16* bitcast (i32* @global_var_203ae.236 to i16*), align 4
  br i1 %v9_fb5c, label %bb375, label %.thread37.thread

.thread37.thread:                                 ; preds = %dec_label_pc_fafc
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32 2) to i16*), align 2
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %r0.global-to-local, align 4
  br label %.thread39

bb375:                                            ; preds = %dec_label_pc_fafc
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %r0.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32 2) to i16*), align 2
  br label %.thread39

.thread39:                                        ; preds = %.thread37.thread, %bb375
  %v4_fb84 = load i32, i32* @global_var_203b4.237, align 4
  store i32 %v4_fb84, i32* @global_var_203bc.239, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_203c8.240 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_fba4 = call i32 @function_dda8(i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32 ptrtoint (i32* @global_var_203b8.163 to i32), i32 5120, i32 20)
  %v6_fba4 = trunc i32 %v5_fba4 to i16
  store i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32* %r1.global-to-local, align 4
  %v2_fbb0 = load i32, i32* @global_var_22424.158, align 4
  store i16 %v6_fba4, i16* bitcast (i32* @global_var_203c8.240 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f9a4, i32* %ip.global-to-local, align 4
  store i32 %v2_fbb0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_fbf8 = call i32 @function_12c50(i32 %v2_fbb0, i32 ptrtoint (i8** @global_var_203a4.160 to i32), i32 40, i32 16384, i32 %v2_f9a4, i32 16)
  store i32 %v7_fbf8, i32* %r0.global-to-local, align 4
  %v3_fbfc = load i16, i16* %stack_var_-52, align 2
  %v4_fbfc = sext i16 %v3_fbfc to i32
  %v1_fc00 = add nsw i32 %v4_fbfc, 1
  store i32 %v1_fc00, i32* %r3.global-to-local, align 4
  %v3_fc04 = icmp ugt i32 %v1_fc00, 383
  store i1 %v3_fc04, i1* %cpsr_c.global-to-local, align 1
  %v8_fc04 = icmp eq i32 %v1_fc00, 384
  store i1 %v8_fc04, i1* %cpsr_z.global-to-local, align 1
  %v5_fc08 = trunc i32 %v1_fc00 to i16
  store i16 %v5_fc08, i16* %stack_var_-52, align 2
  %v5_fc0c = icmp slt i32 %v1_fc00, 384
  br i1 %v5_fc0c, label %dec_label_pc_f9a8, label %dec_label_pc_fc10

dec_label_pc_fc10:                                ; preds = %.thread39
  %v0_fc10 = load i32, i32* @r4, align 4
  store i32 %v0_fc10, i32* @fp, align 4
  br label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_f98c, %dec_label_pc_fc10
  %v0_fc14 = call i32 @function_128f0()
  store i32 %v0_fc14, i32* @sb, align 4
  store i32 %stack_var_-1880.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_fc24 = add i32 %stack_var_-1880.0, 20
  store i32 %v1_fc24, i32* @r4, align 4
  %v1_fc78 = add i32 %stack_var_-1880.0, 16
  %v2_fc78 = inttoptr i32 %v1_fc78 to i32*
  %v1_fc8c = add i32 %stack_var_-1880.0, 9
  %v2_fc8c = inttoptr i32 %v1_fc8c to i8*
  %v4_fcb8 = sext i16 %stack_var_-1876.0 to i32
  %v1_fd20 = add i32 %stack_var_-1880.0, 12
  %v2_fd20 = inttoptr i32 %v1_fd20 to i32*
  br label %dec_label_pc_fc28

dec_label_pc_fc28:                                ; preds = %dec_label_pc_fce8, %dec_label_pc_fce0, %dec_label_pc_fcd8, %dec_label_pc_fcb4, %dec_label_pc_fca4, %dec_label_pc_fc88, %dec_label_pc_fc70, %dec_label_pc_fcd0, %dec_label_pc_fcc4, %dec_label_pc_fc68, %dec_label_pc_fda0, %dec_label_pc_fc14
  %v1_fc2c = phi i32 [ %v0_fc14, %dec_label_pc_fc14 ], [ %v1_fc2c.pre.pre, %dec_label_pc_fda0 ], [ %v0_fc5c, %dec_label_pc_fc68 ], [ %v0_fc5c, %dec_label_pc_fcc4 ], [ %v0_fc5c, %dec_label_pc_fcd0 ], [ %v0_fc5c, %dec_label_pc_fc70 ], [ %v0_fc5c, %dec_label_pc_fc88 ], [ %v0_fc5c, %dec_label_pc_fca4 ], [ %v0_fc5c, %dec_label_pc_fcb4 ], [ %v0_fc5c, %dec_label_pc_fcd8 ], [ %v0_fc5c, %dec_label_pc_fce0 ], [ %v0_fc5c, %dec_label_pc_fce8 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_fc2c = inttoptr i32 %v1_fc2c to i32*
  store i32 0, i32* %v2_fc2c, align 4
  %v2_fc38 = load i32, i32* @global_var_22424.158, align 4
  store i32 %v2_fc38, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc48 = load i32, i32* %ip.global-to-local, align 4
  %v6_fc50 = call i32 @function_12bdc(i32 %v2_fc38, i32 %stack_var_-1880.0, i32 1514, i32 16384, i32 %v0_fc48, i32 %v0_fc48)
  store i32 %v6_fc50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc54 = icmp eq i32 %v6_fc50, 0
  store i1 %v2_fc54, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v6_fc50, 1
  br i1 %tmp376, label %dec_label_pc_fdc4, label %dec_label_pc_fc5c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc28
  %v0_fc5c = load i32, i32* @sb, align 4
  %v1_fc5c = inttoptr i32 %v0_fc5c to i32*
  %v2_fc5c = load i32, i32* %v1_fc5c, align 4
  store i32 %v2_fc5c, i32* %r3.global-to-local, align 4
  %v2_fc60 = icmp ugt i32 %v2_fc5c, 10
  store i1 %v2_fc60, i1* %cpsr_c.global-to-local, align 1
  %v7_fc60 = icmp eq i32 %v2_fc5c, 11
  store i1 %v7_fc60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc60, label %dec_label_pc_fdc4, label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fc5c
  %v2_fc68 = icmp ugt i32 %v6_fc50, 38
  store i1 %v2_fc68, i1* %cpsr_c.global-to-local, align 1
  %v7_fc68 = icmp eq i32 %v6_fc50, 39
  store i1 %v7_fc68, i1* %cpsr_z.global-to-local, align 1
  %v2_fc6c = xor i1 %v2_fc68, true
  %v3_fc6c = or i1 %v7_fc68, %v2_fc6c
  br i1 %v3_fc6c, label %dec_label_pc_fc28, label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fc68
  store i32 %stack_var_-1880.0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22408.78 to i32), i32* %ip.global-to-local, align 4
  %v3_fc78 = load i32, i32* %v2_fc78, align 4
  store i32 %v3_fc78, i32* %r2.global-to-local, align 4
  %v2_fc7c = load i32, i32* @global_var_22408.78, align 4
  store i32 %v2_fc7c, i32* %r3.global-to-local, align 4
  %v3_fc80 = icmp uge i32 %v3_fc78, %v2_fc7c
  store i1 %v3_fc80, i1* %cpsr_c.global-to-local, align 1
  %v9_fc80 = icmp eq i32 %v3_fc78, %v2_fc7c
  store i1 %v9_fc80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fc80, label %dec_label_pc_fc88, label %dec_label_pc_fc28

dec_label_pc_fc88:                                ; preds = %dec_label_pc_fc70
  %v3_fc8c = load i8, i8* %v2_fc8c, align 1
  %v4_fc8c = zext i8 %v3_fc8c to i32
  store i32 %v4_fc8c, i32* %r3.global-to-local, align 4
  %v2_fc90 = icmp ugt i8 %v3_fc8c, 5
  store i1 %v2_fc90, i1* %cpsr_c.global-to-local, align 1
  %v7_fc90 = icmp eq i8 %v3_fc8c, 6
  store i1 %v7_fc90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc90, label %dec_label_pc_fc98, label %dec_label_pc_fc28

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc88
  %v0_fc98 = load i32, i32* @r4, align 4
  %v1_fc98 = inttoptr i32 %v0_fc98 to i16*
  %v2_fc98 = load i16, i16* %v1_fc98, align 2
  %v3_fc98 = zext i16 %v2_fc98 to i32
  store i32 %v3_fc98, i32* %ip.global-to-local, align 4
  %v2_fc9c = icmp ugt i16 %v2_fc98, 5887
  store i1 %v2_fc9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc9c = icmp eq i16 %v2_fc98, 5888
  store i1 %v7_fc9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc9c, label %dec_label_pc_fcb4, label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc98
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fcac = icmp ugt i16 %v2_fc98, 4872
  store i1 %v3_fcac, i1* %cpsr_c.global-to-local, align 1
  %v9_fcac = icmp eq i16 %v2_fc98, 4873
  store i1 %v9_fcac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcac, label %dec_label_pc_fcb4, label %dec_label_pc_fc28

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fca4, %dec_label_pc_fc98
  %v1_fcb4 = add i32 %v0_fc98, 2
  %v2_fcb4 = inttoptr i32 %v1_fcb4 to i16*
  %v3_fcb4 = load i16, i16* %v2_fcb4, align 2
  %v4_fcb4 = zext i16 %v3_fcb4 to i32
  store i32 %v4_fcb4, i32* %r3.global-to-local, align 4
  store i32 %v4_fcb8, i32* %r0.global-to-local, align 4
  %v3_fcbc = icmp uge i32 %v4_fcb4, %v4_fcb8
  store i1 %v3_fcbc, i1* %cpsr_c.global-to-local, align 1
  %v9_fcbc = icmp eq i32 %v4_fcb4, %v4_fcb8
  store i1 %v9_fcbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcbc, label %dec_label_pc_fcc4, label %dec_label_pc_fc28

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcb4
  %v1_fcc4 = add i32 %v0_fc98, 13
  %v2_fcc4 = inttoptr i32 %v1_fcc4 to i8*
  %v3_fcc4 = load i8, i8* %v2_fcc4, align 1
  %v4_fcc4 = zext i8 %v3_fcc4 to i32
  store i32 %v4_fcc4, i32* %r3.global-to-local, align 4
  %v1_fcc8 = and i32 %v4_fcc4, 2
  %v2_fcc8 = icmp eq i32 %v1_fcc8, 0
  store i1 %v2_fcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcc8, label %dec_label_pc_fc28, label %dec_label_pc_fcd0

dec_label_pc_fcd0:                                ; preds = %dec_label_pc_fcc4
  %v1_fcd0 = and i32 %v4_fcc4, 16
  %v2_fcd0 = icmp eq i32 %v1_fcd0, 0
  store i1 %v2_fcd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcd0, label %dec_label_pc_fc28, label %dec_label_pc_fcd8

dec_label_pc_fcd8:                                ; preds = %dec_label_pc_fcd0
  %v1_fcd8 = and i32 %v4_fcc4, 4
  %v2_fcd8 = icmp eq i32 %v1_fcd8, 0
  store i1 %v2_fcd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcd8, label %dec_label_pc_fce0, label %dec_label_pc_fc28

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fcd8
  %tmp532 = urem i8 %v3_fcc4, 2
  %v2_fce0 = icmp eq i8 %tmp532, 0
  store i1 %v2_fce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fce0, label %dec_label_pc_fce8, label %dec_label_pc_fc28

dec_label_pc_fce8:                                ; preds = %dec_label_pc_fce0
  %v1_fce8 = add i32 %v0_fc98, 8
  %v2_fce8 = inttoptr i32 %v1_fce8 to i32*
  %v3_fce8 = load i32, i32* %v2_fce8, align 4
  %v5_fd00 = call i32 @llvm.bswap.i32(i32 %v3_fce8)
  %v1_fd04 = add i32 %v5_fd00, -1
  store i32 %v1_fd04, i32* %r2.global-to-local, align 4
  %v1_fd08 = and i32 %v1_fd04, 16711680
  store i32 %v1_fd08, i32* %r0.global-to-local, align 4
  %v3_fd0c = udiv i32 %v1_fd04, 16777216
  %v4_fd14 = udiv i32 %v1_fd08, 256
  %v5_fd14 = or i32 %v4_fd14, %v3_fd0c
  %v1_fd10 = mul i32 %v1_fd04, 256
  %v4_fd18 = and i32 %v1_fd10, 16711680
  %v5_fd18 = or i32 %v5_fd14, %v4_fd18
  store i32 %v5_fd18, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v3_fd20 = load i32, i32* %v2_fd20, align 4
  store i32 %v3_fd20, i32* @lr, align 4
  %v5_fd24 = call i32 @llvm.bswap.i32(i32 %v1_fd04)
  store i32 %v5_fd24, i32* %r3.global-to-local, align 4
  %v3_fd28 = icmp uge i32 %v5_fd24, %v3_fd20
  store i1 %v3_fd28, i1* %cpsr_c.global-to-local, align 1
  %v9_fd28 = icmp eq i32 %v5_fd24, %v3_fd20
  store i1 %v9_fd28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd28, label %dec_label_pc_fd30, label %dec_label_pc_fc28

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fce8
  %v0_fd30 = load i32, i32* @r5, align 4
  %v2_fd30 = icmp ugt i32 %v0_fd30, 254
  store i1 %v2_fd30, i1* %cpsr_c.global-to-local, align 1
  %v7_fd30 = icmp eq i32 %v0_fd30, 255
  store i1 %v7_fd30, i1* %cpsr_z.global-to-local, align 1
  %v8_fd34 = icmp sgt i32 %v0_fd30, 255
  br i1 %v8_fd34, label %dec_label_pc_fdc4, label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_fd30
  %v2_fd40 = load i32, i32* @global_var_22420.156, align 4
  store i32 %v2_fd40, i32* %r1.global-to-local, align 4
  %v3_fd44 = mul i32 %v0_fd30, 256
  store i32 %v3_fd44, i32* %r2.global-to-local, align 4
  %v2_fd48 = mul i32 %v0_fd30, 288
  store i32 %v2_fd48, i32* %r3.global-to-local, align 4
  %v2_fd4c = add i32 %v2_fd40, %v2_fd48
  store i32 %v2_fd4c, i32* @r0, align 4
  %v1_fd50 = add i32 %v2_fd4c, 12
  %v2_fd50 = inttoptr i32 %v1_fd50 to i32*
  %v3_fd50 = load i32, i32* %v2_fd50, align 4
  store i32 %v3_fd50, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd54 = icmp eq i32 %v3_fd50, 0
  store i1 %v2_fd54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd54, label %dec_label_pc_fd98, label %dec_label_pc_fd74.preheader

dec_label_pc_fd74.preheader:                      ; preds = %dec_label_pc_fd38
  %v2_fd58 = add i32 %v0_fd30, 1
  %v2_fd60 = and i32 %v2_fd58, 134217728
  %v3_fd60 = icmp ne i32 %v2_fd60, 0
  store i1 %v3_fd60, i1* %cpsr_c.global-to-local, align 1
  %v3_fd64 = mul i32 %v2_fd58, 288
  %v3_fd68 = add i32 %v2_fd40, %v3_fd64
  store i32 %v3_fd68, i32* %r3.global-to-local, align 4
  store i32 %v0_fd30, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fd74

dec_label_pc_fd74:                                ; preds = %dec_label_pc_fd74.preheader, %dec_label_pc_fd80
  %v0_fd80 = phi i32 [ %v3_fd68, %dec_label_pc_fd74.preheader ], [ %v1_fd8c, %dec_label_pc_fd80 ]
  %v0_fd74 = phi i32 [ %v0_fd30, %dec_label_pc_fd74.preheader ], [ %v1_fd74, %dec_label_pc_fd80 ]
  %v1_fd74 = add i32 %v0_fd74, 1
  store i32 %v1_fd74, i32* %r2.global-to-local, align 4
  %v7_fd78 = icmp eq i32 %v1_fd74, 256
  br i1 %v7_fd78, label %dec_label_pc_fdc4.loopexit, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd74
  store i32 %v0_fd80, i32* @r0, align 4
  %v1_fd84 = add i32 %v0_fd80, 12
  %v2_fd84 = inttoptr i32 %v1_fd84 to i32*
  %v3_fd84 = load i32, i32* %v2_fd84, align 4
  %v2_fd88 = icmp eq i32 %v3_fd84, 0
  %v1_fd8c = add i32 %v0_fd80, 288
  store i32 %v1_fd8c, i32* %r3.global-to-local, align 4
  br i1 %v2_fd88, label %dec_label_pc_fd94, label %dec_label_pc_fd74

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fd80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fd74, i32* @r5, align 4
  br label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd38, %dec_label_pc_fd94
  %v1_fda0 = phi i32 [ %v2_fd4c, %dec_label_pc_fd38 ], [ %v0_fd80, %dec_label_pc_fd94 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd98 = icmp eq i32 %v1_fda0, 0
  store i1 %v2_fd98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd98, label %dec_label_pc_fdc4, label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd98
  %v2_fda0 = add i32 %v1_fda0, 16
  %v3_fda0 = inttoptr i32 %v2_fda0 to i32*
  store i32 %v3_fd20, i32* %v3_fda0, align 4
  %v0_fda4 = load i32, i32* %ip.global-to-local, align 4
  %v1_fda4 = trunc i32 %v0_fda4 to i16
  %v2_fda4 = load i32, i32* @r0, align 4
  %v3_fda4 = add i32 %v2_fda4, 20
  %v4_fda4 = inttoptr i32 %v3_fda4 to i16*
  store i16 %v1_fda4, i16* %v4_fda4, align 2
  %v0_fda8 = call i32 @function_f344()
  store i32 %v0_fda8, i32* %r0.global-to-local, align 4
  %v1_fc2c.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_fc28

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_f660
  store i32 ptrtoint (i32* @global_var_22424.158 to i32), i32* %ip.global-to-local, align 4
  %v2_fdb4 = load i32, i32* @global_var_22424.158, align 4
  store i32 %v2_fdb4, i32* %r0.global-to-local, align 4
  %v1_fdb8 = call i32 @function_124c8(i32 %v2_fdb4)
  store i32 %v1_fdb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_f63c, %dec_label_pc_fdb0
  %v0_fdbc = load i32, i32* @r5, align 4
  store i32 %v0_fdbc, i32* %r0.global-to-local, align 4
  %v1_fdc0 = call i32 @function_1432c(i32 %v0_fdbc)
  store i32 %v1_fdc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdc4

dec_label_pc_fdc4.loopexit:                       ; preds = %dec_label_pc_fd74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdc4

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fd98, %dec_label_pc_fd30, %dec_label_pc_fc5c, %dec_label_pc_fc28, %dec_label_pc_fdc4.loopexit, %dec_label_pc_fdbc
  %stack_var_-1880.1 = phi i32 [ %tmp314, %dec_label_pc_fdbc ], [ %stack_var_-1880.0, %dec_label_pc_fdc4.loopexit ], [ %stack_var_-1880.0, %dec_label_pc_fc28 ], [ %stack_var_-1880.0, %dec_label_pc_fc5c ], [ %stack_var_-1880.0, %dec_label_pc_fd30 ], [ %stack_var_-1880.0, %dec_label_pc_fd98 ]
  %stack_var_-1876.1 = phi i16 [ %tmp342, %dec_label_pc_fdbc ], [ %stack_var_-1876.0, %dec_label_pc_fdc4.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_fc28 ], [ %stack_var_-1876.0, %dec_label_pc_fc5c ], [ %stack_var_-1876.0, %dec_label_pc_fd30 ], [ %stack_var_-1876.0, %dec_label_pc_fd98 ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 1668, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fde0486 = load i32, i32* @sp, align 4
  %v3_fde0487 = add i32 %v2_fde0486, 1668
  %v4_fde0488 = inttoptr i32 %v3_fde0487 to i32*
  store i32 0, i32* %v4_fde0488, align 4
  br label %dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge

dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge:    ; preds = %dec_label_pc_fdc4, %dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge
  %v0_fdd0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fdd0 = add i32 %v0_fdd0.pre, 1664
  store i32 %v1_fdd0, i32* %ip.global-to-local, align 4
  %v1_fdd4 = add i32 %v0_fdd0.pre, 4
  store i32 %v1_fdd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_fddc = icmp eq i32 %v1_fdd4, 128
  %v2_fde0 = load i32, i32* @sp, align 4
  %v3_fde0 = add i32 %v2_fde0, %v1_fdd0
  %v4_fde0 = inttoptr i32 %v3_fde0 to i32*
  store i32 0, i32* %v4_fde0, align 4
  br i1 %v7_fddc, label %dec_label_pc_fde8, label %dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fde8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_fde8, i32* %stack_var_-352, align 4
  %v1_fdf0480 = add i32 %v0_fde8, 1540
  store i32 %v1_fdf0480, i32* @lr, align 4
  %v1_fdf4481 = add i32 %v0_fde8, 8
  store i32 %v1_fdf4481, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_fdfc482 = icmp eq i32 %v1_fdf4481, 128
  %v2_fe00483 = load i32, i32* @sp, align 4
  %v3_fe00484 = add i32 %v2_fe00483, %v1_fdf0480
  %v4_fe00485 = inttoptr i32 %v3_fe00484 to i32*
  store i32 0, i32* %v4_fe00485, align 4
  br i1 %v7_fdfc482, label %dec_label_pc_fe08, label %dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge

dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge:    ; preds = %dec_label_pc_fde8, %dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge
  %v0_fdf0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_fdf0 = add i32 %v0_fdf0.pre, 1536
  store i32 %v1_fdf0, i32* @lr, align 4
  %v1_fdf4 = add i32 %v0_fdf0.pre, 4
  store i32 %v1_fdf4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_fdfc = icmp eq i32 %v1_fdf4, 128
  %v2_fe00 = load i32, i32* @sp, align 4
  %v3_fe00 = add i32 %v2_fe00, %v1_fdf0
  %v4_fe00 = inttoptr i32 %v3_fe00 to i32*
  store i32 0, i32* %v4_fe00, align 4
  br i1 %v7_fdfc, label %dec_label_pc_fe08, label %dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge

dec_label_pc_fe08:                                ; preds = %dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge, %dec_label_pc_fde8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe08 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fe08, i32* @r6, align 4
  store i32 %v0_fe08, i32* @r5, align 4
  %v5_fe10 = trunc i32 %v0_fe08 to i16
  store i16 %v5_fe10, i16* %stack_var_-52, align 2
  %v2_10cac = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_fe68

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fe98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fe84, i1* %cpsr_z.global-to-local, align 1
  %v1_10c9c = add i32 %v2_fe7c, 4
  %v2_10c9c = inttoptr i32 %v1_10c9c to i32*
  %v3_10c9c = load i32, i32* %v2_10c9c, align 4
  br i1 %v7_fe84, label %dec_label_pc_10c9c, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fe18
  store i32 %v3_10c9c, i32* %ip.global-to-local, align 4
  %v3_fe28 = udiv i32 %v3_10c9c, 32
  store i32 %v2_10cac, i32* %r0.global-to-local, align 4
  %v3_fe30 = mul nuw nsw i32 %v3_fe28, 4
  %v2_fe34 = add i32 %v3_fe30, %v2_10cac
  store i32 %v2_fe34, i32* %r3.global-to-local, align 4
  %v1_fe38 = add i32 %v2_fe34, -184
  %v2_fe38 = inttoptr i32 %v1_fe38 to i32*
  %v3_fe38 = load i32, i32* %v2_fe38, align 4
  %v1_fe3c = urem i32 %v3_10c9c, 32
  store i32 %v1_fe3c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fe44 = shl i32 1, %v1_fe3c
  %v8_fe44 = or i32 %v3_fe38, %v7_fe44
  store i32 %v8_fe44, i32* %r2.global-to-local, align 4
  store i32 %v8_fe44, i32* %v2_fe38, align 4
  %v0_fe4c = load i32, i32* @r6, align 4
  %v1_fe4c = load i32, i32* %ip.global-to-local, align 4
  %v3_fe4c = icmp uge i32 %v0_fe4c, %v1_fe4c
  store i1 %v3_fe4c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe4c = icmp eq i32 %v0_fe4c, %v1_fe4c
  store i1 %v9_fe4c, i1* %cpsr_z.global-to-local, align 1
  %v5_fe50 = icmp slt i32 %v0_fe4c, %v1_fe4c
  br i1 %v5_fe50, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_fe20
  store i32 %v1_fe4c, i32* @r6, align 4
  br label %bb378

bb378:                                            ; preds = %.thread56, %bb384, %bb382, %bb428, %dec_label_pc_fefc, %dec_label_pc_fe20, %bb377
  %v3_fe54 = load i16, i16* %stack_var_-52, align 2
  %v4_fe54 = sext i16 %v3_fe54 to i32
  store i32 %v4_fe54, i32* %r3.global-to-local, align 4
  %v1_fe58 = add nsw i32 %v4_fe54, 1
  store i32 %v1_fe58, i32* %r2.global-to-local, align 4
  %v2_fe5c = icmp ugt i32 %v1_fe58, 254
  store i1 %v2_fe5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe5c = icmp eq i32 %v1_fe58, 255
  store i1 %v7_fe5c, i1* %cpsr_z.global-to-local, align 1
  %v5_fe60 = trunc i32 %v1_fe58 to i16
  store i16 %v5_fe60, i16* %stack_var_-52, align 2
  %v8_fe64 = icmp sgt i16 %v3_fe54, 254
  br i1 %v8_fe64, label %dec_label_pc_ff08, label %dec_label_pc_fe68

dec_label_pc_fe68:                                ; preds = %bb378, %dec_label_pc_fe08
  %v0_fe74 = phi i32 [ %v1_fe58, %bb378 ], [ %v0_fe08, %dec_label_pc_fe08 ]
  store i32 ptrtoint (i32* @global_var_22420.156 to i32), i32* %r0.global-to-local, align 4
  %v3_fe6c = mul i32 %v0_fe74, 256
  store i32 %v3_fe6c, i32* %r3.global-to-local, align 4
  %v2_fe70 = load i32, i32* @global_var_22420.156, align 4
  store i32 %v2_fe70, i32* %r1.global-to-local, align 4
  %v2_fe78 = mul i32 %v0_fe74, 288
  store i32 %v2_fe78, i32* %r2.global-to-local, align 4
  %v2_fe7c = add i32 %v2_fe70, %v2_fe78
  store i32 %v2_fe7c, i32* @r4, align 4
  %v1_fe80 = add i32 %v2_fe7c, 12
  %v2_fe80 = inttoptr i32 %v1_fe80 to i32*
  %v3_fe80 = load i32, i32* %v2_fe80, align 4
  store i32 %v3_fe80, i32* %ip.global-to-local, align 4
  %v2_fe84 = icmp ne i32 %v3_fe80, 0
  store i1 %v2_fe84, i1* %cpsr_c.global-to-local, align 1
  %v7_fe84 = icmp eq i32 %v3_fe80, 1
  store i1 %v7_fe84, i1* %cpsr_z.global-to-local, align 1
  %v2_fe88 = xor i1 %v2_fe84, true
  %v3_fe88 = or i1 %v7_fe84, %v2_fe88
  br i1 %v3_fe88, label %bb379, label %bb380

bb379:                                            ; preds = %dec_label_pc_fe68
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb380

bb380:                                            ; preds = %dec_label_pc_fe68, %bb379
  %v1_fea8173 = phi i32 [ %v2_fe70, %dec_label_pc_fe68 ], [ 5, %bb379 ]
  %v2_fe8c = xor i1 %v7_fe84, true
  %v3_fe8c = and i1 %v2_fe84, %v2_fe8c
  br i1 %v3_fe8c, label %bb381, label %bb382

bb381:                                            ; preds = %bb380
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb382

bb382:                                            ; preds = %bb380, %bb381
  %v1_fea8 = phi i32 [ %v1_fea8173, %bb380 ], [ 30, %bb381 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe90 = icmp eq i32 %v3_fe80, 0
  store i1 %v2_fe90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe90, label %bb378, label %dec_label_pc_fe98

dec_label_pc_fe98:                                ; preds = %bb382
  store i32 ptrtoint (i32* @global_var_203d4.145 to i32), i32* %r2.global-to-local, align 4
  %v2_fe9c = load i32, i32* @global_var_203d4.145, align 4
  store i32 %v2_fe9c, i32* %r3.global-to-local, align 4
  %v1_fea0 = add i32 %v2_fe7c, 8
  %v2_fea0 = inttoptr i32 %v1_fea0 to i32*
  %v3_fea0 = load i32, i32* %v2_fea0, align 4
  store i32 %v3_fea0, i32* %r2.global-to-local, align 4
  %v2_fea4 = sub i32 %v2_fe9c, %v3_fea0
  store i32 %v2_fea4, i32* %r3.global-to-local, align 4
  %v3_fea8 = icmp uge i32 %v2_fea4, %v1_fea8
  store i1 %v3_fea8, i1* %cpsr_c.global-to-local, align 1
  %v9_fea8 = icmp eq i32 %v2_fea4, %v1_fea8
  store i1 %v9_fea8, i1* %cpsr_z.global-to-local, align 1
  %v2_feac = xor i1 %v3_fea8, true
  %v3_feac = or i1 %v9_fea8, %v2_feac
  br i1 %v3_feac, label %dec_label_pc_fe18, label %dec_label_pc_feb0

dec_label_pc_feb0:                                ; preds = %dec_label_pc_fe98
  %v1_feb0 = add i32 %v2_fe7c, 4
  %v2_feb0 = inttoptr i32 %v1_feb0 to i32*
  %v3_feb0 = load i32, i32* %v2_feb0, align 4
  store i32 %v3_feb0, i32* %r0.global-to-local, align 4
  %v1_feb4 = call i32 @function_124c8(i32 %v3_feb0)
  store i32 %v1_feb4, i32* %r0.global-to-local, align 4
  %v0_feb8 = load i32, i32* @r4, align 4
  %v1_feb8 = add i32 %v0_feb8, 12
  %v2_feb8 = inttoptr i32 %v1_feb8 to i32*
  %v3_feb8 = load i32, i32* %v2_feb8, align 4
  store i32 %v3_feb8, i32* %r3.global-to-local, align 4
  %v2_febc = icmp ugt i32 %v3_feb8, 1
  store i1 %v2_febc, i1* %cpsr_c.global-to-local, align 1
  %v7_febc = icmp eq i32 %v3_feb8, 2
  store i1 %v7_febc, i1* %cpsr_z.global-to-local, align 1
  %v2_fec0 = xor i1 %v2_febc, true
  %v3_fec0 = or i1 %v7_febc, %v2_fec0
  br i1 %v3_fec0, label %bb383, label %.thread279

.thread279:                                       ; preds = %dec_label_pc_feb0
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fec8276280 = add i32 %v0_feb8, 4
  %v3_fec8277281 = inttoptr i32 %v2_fec8276280 to i32*
  store i32 -1, i32* %v3_fec8277281, align 4
  br label %bb384

bb383:                                            ; preds = %dec_label_pc_feb0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fec8273 = add i32 %v0_feb8, 4
  %v3_fec8274 = inttoptr i32 %v2_fec8273 to i32*
  store i32 -1, i32* %v3_fec8274, align 4
  %v4_fecc = load i32, i32* %r3.global-to-local, align 4
  %v5_fecc = load i32, i32* @r4, align 4
  %v6_fecc = add i32 %v5_fecc, 12
  %v7_fecc = inttoptr i32 %v6_fecc to i32*
  store i32 %v4_fecc, i32* %v7_fecc, align 4
  %v4_fed0 = load i32, i32* %r3.global-to-local, align 4
  %v5_fed0 = trunc i32 %v4_fed0 to i8
  %v6_fed0 = load i32, i32* @r4, align 4
  %v7_fed0 = add i32 %v6_fed0, 284
  %v8_fed0 = inttoptr i32 %v7_fed0 to i8*
  store i8 %v5_fed0, i8* %v8_fed0, align 1
  %v0_fed4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fed4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb384

bb384:                                            ; preds = %.thread279, %bb383
  %v1_fed4 = phi i1 [ %v1_fed4.pre, %bb383 ], [ %v2_febc, %.thread279 ]
  %v0_fed4 = phi i1 [ %v0_fed4.pre, %bb383 ], [ false, %.thread279 ]
  %v2_fed4 = xor i1 %v1_fed4, true
  %v3_fed4 = or i1 %v0_fed4, %v2_fed4
  br i1 %v3_fed4, label %bb378, label %dec_label_pc_fed8

dec_label_pc_fed8:                                ; preds = %bb384
  %v0_fed8 = load i32, i32* @r4, align 4
  %v1_fed8 = add i32 %v0_fed8, 284
  %v2_fed8 = inttoptr i32 %v1_fed8 to i8*
  %v3_fed8 = load i8, i8* %v2_fed8, align 1
  %v4_fed8 = zext i8 %v3_fed8 to i32
  %v1_fedc = add nuw nsw i32 %v4_fed8, 1
  %v1_fee0 = urem i32 %v1_fedc, 256
  store i32 %v1_fee0, i32* %r3.global-to-local, align 4
  %v2_fee4 = icmp ugt i32 %v1_fee0, 9
  store i1 %v2_fee4, i1* %cpsr_c.global-to-local, align 1
  %v7_fee4 = icmp eq i32 %v1_fee0, 10
  store i1 %v7_fee4, i1* %cpsr_z.global-to-local, align 1
  %v1_fee8 = trunc i32 %v1_fedc to i8
  store i8 %v1_fee8, i8* %v2_fed8, align 1
  %v0_feec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_feec, label %.thread56, label %dec_label_pc_fefc

.thread56:                                        ; preds = %dec_label_pc_fed8
  %v1_feec = load i32, i32* %r3.global-to-local, align 4
  %v2_feec = add i32 %v1_feec, -10
  store i32 %v2_feec, i32* %r3.global-to-local, align 4
  %v2_fef0 = load i32, i32* @r4, align 4
  %v3_fef0 = add i32 %v2_fef0, 12
  %v4_fef0 = inttoptr i32 %v3_fef0 to i32*
  store i32 %v2_feec, i32* %v4_fef0, align 4
  %v1_fef4 = load i32, i32* %r3.global-to-local, align 4
  %v2_fef4 = trunc i32 %v1_fef4 to i8
  %v3_fef4 = load i32, i32* @r4, align 4
  %v4_fef4 = add i32 %v3_fef4, 284
  %v5_fef4 = inttoptr i32 %v4_fef4 to i8*
  store i8 %v2_fef4, i8* %v5_fef4, align 1
  %v0_fef8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fef8.pr.pr, label %bb378, label %dec_label_pc_fefc

dec_label_pc_fefc:                                ; preds = %dec_label_pc_fed8, %.thread56
  %v0_fefc = load i32, i32* @r4, align 4
  store i32 %v0_fefc, i32* @r0, align 4
  %v0_ff00 = call i32 @function_f344()
  store i32 %v0_ff00, i32* %r0.global-to-local, align 4
  br label %bb378

dec_label_pc_ff08:                                ; preds = %bb378
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ff14 = load i32, i32* @r5, align 4
  %v1_ff14 = load i32, i32* @r6, align 4
  %v3_ff14 = icmp uge i32 %v0_ff14, %v1_ff14
  store i1 %v3_ff14, i1* %cpsr_c.global-to-local, align 1
  %v9_ff14 = icmp eq i32 %v0_ff14, %v1_ff14
  store i1 %v9_ff14, i1* %cpsr_z.global-to-local, align 1
  %v5_ff18 = icmp slt i32 %v0_ff14, %v1_ff14
  %storemerge134 = select i1 %v5_ff18, i32 %v1_ff14, i32 %v0_ff14
  %v2_ff24 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_ff24, i32* %ip.global-to-local, align 4
  %v2_ff28 = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_ff28, i32* %r1.global-to-local, align 4
  %v2_ff2c = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_ff2c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ff34 = add i32 %storemerge134, 1
  store i32 %v1_ff34, i32* %r0.global-to-local, align 4
  %v5_ff40 = call i32 @function_121ec(i32 %v1_ff34, i32 %v2_ff28, i32 %v2_ff2c, i32 0, i32 %v2_ff24)
  %v0_ff44 = load i32, i32* @r4, align 4
  store i32 %v0_ff44, i32* %r0.global-to-local, align 4
  %v1_ff48 = inttoptr i32 %v0_ff44 to i32*
  %v2_ff48 = call i32 @function_12148(i32* %v1_ff48)
  store i32 %v2_ff48, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203d4.145 to i32), i32* @lr, align 4
  %v0_ff50 = load i32, i32* @r4, align 4
  %v5_ff50 = trunc i32 %v0_ff50 to i16
  store i16 %v5_ff50, i16* %stack_var_-52, align 2
  store i32 %v2_ff48, i32* @global_var_203d4.145, align 4
  %v2_1092c = ptrtoint i32* %stack_var_-45 to i32
  %v2_10940 = ptrtoint i32* %stack_var_-80 to i32
  %v2_10948 = ptrtoint i32* %stack_var_-77 to i32
  %v2_106fc = ptrtoint i32* %stack_var_-60 to i32
  %v2_10710 = ptrtoint i8* %stack_var_-56 to i32
  %v2_10718 = bitcast i8* %stack_var_-56 to i32*
  %v2_10a38 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_100cc, %dec_label_pc_ff08
  %v0_ff64 = phi i32 [ %v1_100d0, %dec_label_pc_100cc ], [ %v0_ff50, %dec_label_pc_ff08 ]
  store i32 ptrtoint (i32* @global_var_22420.156 to i32), i32* %r0.global-to-local, align 4
  %v3_ff5c = mul i32 %v0_ff64, 256
  store i32 %v3_ff5c, i32* %r3.global-to-local, align 4
  %v2_ff60 = load i32, i32* @global_var_22420.156, align 4
  store i32 %v2_ff60, i32* %r1.global-to-local, align 4
  %v2_ff68 = mul i32 %v0_ff64, 288
  store i32 %v2_ff68, i32* %r2.global-to-local, align 4
  %v2_ff6c = add i32 %v2_ff60, %v2_ff68
  store i32 %v2_ff6c, i32* @r5, align 4
  %v1_ff70 = add i32 %v2_ff6c, 4
  %v2_ff70 = inttoptr i32 %v1_ff70 to i32*
  %v3_ff70 = load i32, i32* %v2_ff70, align 4
  store i32 %v3_ff70, i32* %r0.global-to-local, align 4
  %v2_ff74 = icmp eq i32 %v3_ff70, -1
  store i1 %v2_ff74, i1* %cpsr_c.global-to-local, align 1
  %v7_ff74 = icmp eq i32 %v3_ff70, -1
  store i1 %v7_ff74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff74, label %dec_label_pc_100cc, label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff58
  %v3_ff7c = udiv i32 %v3_ff70, 32
  store i32 %v2_10cac, i32* %r1.global-to-local, align 4
  %v3_ff88 = mul nuw nsw i32 %v3_ff7c, 4
  store i32 %v3_ff88, i32* @ip, align 4
  %v2_ff8c = add i32 %v3_ff88, %v2_10cac
  store i32 %v2_ff8c, i32* %r2.global-to-local, align 4
  %v1_ff90 = add i32 %v2_ff8c, -312
  %v2_ff90 = inttoptr i32 %v1_ff90 to i32*
  %v3_ff90 = load i32, i32* %v2_ff90, align 4
  %v1_ff94 = urem i32 %v3_ff70, 32
  store i32 %v1_ff94, i32* %r1.global-to-local, align 4
  %v2_ff98 = add nsw i32 %v1_ff94, -1
  %v3_ff98 = shl i32 1, %v2_ff98
  %v4_ff98 = and i32 %v3_ff90, %v3_ff98
  %v5_ff98 = icmp ne i32 %v4_ff98, 0
  store i1 %v5_ff98, i1* %cpsr_c.global-to-local, align 1
  %v6_ff98 = lshr i32 %v3_ff90, %v1_ff94
  store i32 %v6_ff98, i32* %r3.global-to-local, align 4
  %v1_ff9c = urem i32 %v6_ff98, 2
  %v2_ff9c = icmp eq i32 %v1_ff9c, 0
  store i1 %v2_ff9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff9c, label %dec_label_pc_ffa4, label %dec_label_pc_10b1c

dec_label_pc_ffa4:                                ; preds = %dec_label_pc_ff7c, %dec_label_pc_10bcc
  %v1_ffb4 = phi i32 [ %v1_ff94, %dec_label_pc_ff7c ], [ %v1_ffb4.pre, %dec_label_pc_10bcc ]
  %v0_ffac = phi i32 [ %v3_ff88, %dec_label_pc_ff7c ], [ %v0_ffac.pre, %dec_label_pc_10bcc ]
  store i32 %v2_10cac, i32* %r3.global-to-local, align 4
  %v2_ffac = add i32 %v0_ffac, %v2_10cac
  store i32 %v2_ffac, i32* %r2.global-to-local, align 4
  %v1_ffb0 = add i32 %v2_ffac, -184
  %v2_ffb0 = inttoptr i32 %v1_ffb0 to i32*
  %v3_ffb0 = load i32, i32* %v2_ffb0, align 4
  %v2_ffb4 = add i32 %v1_ffb4, -1
  %v3_ffb4 = shl i32 1, %v2_ffb4
  %v4_ffb4 = and i32 %v3_ffb0, %v3_ffb4
  %v5_ffb4 = icmp ne i32 %v4_ffb4, 0
  store i1 %v5_ffb4, i1* %cpsr_c.global-to-local, align 1
  %v6_ffb4 = lshr i32 %v3_ffb0, %v1_ffb4
  store i32 %v6_ffb4, i32* %r3.global-to-local, align 4
  %v1_ffb8 = urem i32 %v6_ffb4, 2
  %v2_ffb8 = icmp eq i32 %v1_ffb8, 0
  store i1 %v2_ffb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffb8, label %dec_label_pc_100cc, label %dec_label_pc_ffc0.preheader

dec_label_pc_ffc0.preheader:                      ; preds = %dec_label_pc_ffa4
  %v0_ffc0156 = load i32, i32* @r5, align 4
  %v1_ffc0157 = add i32 %v0_ffc0156, 12
  %v2_ffc0158 = inttoptr i32 %v1_ffc0157 to i32*
  %v3_ffc0159 = load i32, i32* %v2_ffc0158, align 4
  store i32 %v3_ffc0159, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc4155161 = icmp eq i32 %v3_ffc0159, 0
  store i1 %v2_ffc4155161, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc4155161, label %dec_label_pc_100cc, label %dec_label_pc_ffcc.lr.ph

dec_label_pc_ffc0.loopexit:                       ; preds = %dec_label_pc_109dc, %dec_label_pc_1084c
  %v0_ffc0 = load i32, i32* @r5, align 4
  %v1_ffc0 = add i32 %v0_ffc0, 12
  %v2_ffc0 = inttoptr i32 %v1_ffc0 to i32*
  %v3_ffc0 = load i32, i32* %v2_ffc0, align 4
  store i32 %v3_ffc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc4155 = icmp eq i32 %v3_ffc0, 0
  store i1 %v2_ffc4155, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc4155, label %dec_label_pc_100cc, label %dec_label_pc_ffcc.lr.ph

dec_label_pc_ffcc.lr.ph:                          ; preds = %dec_label_pc_ffc0.preheader, %dec_label_pc_ffc0.loopexit
  %v0_ffcc189 = phi i32 [ %v0_ffc0, %dec_label_pc_ffc0.loopexit ], [ %v0_ffc0156, %dec_label_pc_ffc0.preheader ]
  br label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ffc4.backedge.thread, %dec_label_pc_ffc4.backedge, %dec_label_pc_ffc4.backedge.thread528, %dec_label_pc_ffcc.lr.ph
  %v0_10aac = phi i32 [ %v0_ffcc189, %dec_label_pc_ffcc.lr.ph ], [ %v0_ffcc186, %dec_label_pc_ffc4.backedge ], [ %v0_10040, %dec_label_pc_ffc4.backedge.thread ], [ %v0_10040, %dec_label_pc_ffc4.backedge.thread528 ]
  %v1_ffcc = add i32 %v0_10aac, 24
  %v2_ffcc = inttoptr i32 %v1_ffcc to i32*
  %v3_ffcc = load i32, i32* %v2_ffcc, align 4
  store i32 %v3_ffcc, i32* @r3, align 4
  %v2_ffd0 = icmp ugt i32 %v3_ffcc, 255
  store i1 %v2_ffd0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd0 = icmp eq i32 %v3_ffcc, 256
  store i1 %v7_ffd0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10aac, 28
  store i32 %.pre, i32* %sl.global-to-local, align 4
  br i1 %v7_ffd0, label %dec_label_pc_10aac, label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffcc, %dec_label_pc_10aac
  store i32 0, i32* @r6, align 4
  %v1_ffe0 = load i32, i32* @sb, align 4
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  store i32 0, i32* %v2_ffe0, align 4
  %v0_ffe4 = load i32, i32* @r5, align 4
  %v1_ffe4 = add i32 %v0_ffe4, 24
  %v2_ffe4 = inttoptr i32 %v1_ffe4 to i32*
  %v3_ffe4 = load i32, i32* %v2_ffe4, align 4
  store i32 %v3_ffe4, i32* %r2.global-to-local, align 4
  %v0_ffe8 = load i32, i32* %sl.global-to-local, align 4
  %v2_ffe8 = add i32 %v0_ffe8, %v3_ffe4
  store i32 %v2_ffe8, i32* @r4, align 4
  %v1_ffec = add i32 %v0_ffe4, 4
  %v2_ffec = inttoptr i32 %v1_ffec to i32*
  %v3_ffec = load i32, i32* %v2_ffec, align 4
  store i32 %v3_ffec, i32* %r0.global-to-local, align 4
  %v1_fff0 = sub i32 256, %v3_ffe4
  store i32 %v1_fff0, i32* %r2.global-to-local, align 4
  store i32 %v2_ffe8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fffc = call i32 @function_12ba4(i32 %v3_ffec, i32 %v2_ffe8, i32 %v1_fff0, i32 16384)
  store i32 %v4_fffc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10000 = icmp eq i32 %v4_fffc, 0
  store i1 %v2_10000, i1* %cpsr_z.global-to-local, align 1
  %tmp385 = icmp slt i32 %v4_fffc, 1
  br i1 %tmp385, label %dec_label_pc_10078, label %dec_label_pc_10008

dec_label_pc_10008:                               ; preds = %dec_label_pc_ffdc
  %v0_10008 = load i32, i32* @r6, align 4
  store i32 %v0_10008, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1000c

dec_label_pc_1000c:                               ; preds = %.thread63, %dec_label_pc_10008
  %v3_10018 = phi i32 [ %v1_1001c, %.thread63 ], [ %v0_10008, %dec_label_pc_10008 ]
  %v1_1000c = load i32, i32* @r4, align 4
  %v2_1000c = add i32 %v1_1000c, %v3_10018
  %v3_1000c = inttoptr i32 %v2_1000c to i8*
  %v4_1000c = load i8, i8* %v3_1000c, align 1
  %v6_1000c = zext i8 %v4_1000c to i32
  store i32 %v6_1000c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10010 = icmp eq i8 %v4_1000c, 0
  store i1 %v2_10010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10010, label %bb386, label %.thread63

bb386:                                            ; preds = %dec_label_pc_1000c
  %v2_10014 = add nuw nsw i32 %v6_1000c, 65
  store i32 %v2_10014, i32* %r3.global-to-local, align 4
  %v2_10018 = trunc i32 %v2_10014 to i8
  store i8 %v2_10018, i8* %v3_1000c, align 1
  %v0_1001c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_1000c, %bb386
  %v0_1001c = phi i32 [ %v3_10018, %dec_label_pc_1000c ], [ %v0_1001c.pre, %bb386 ]
  %v1_1001c = add i32 %v0_1001c, 1
  store i32 %v1_1001c, i32* %r2.global-to-local, align 4
  %v3_10020 = icmp uge i32 %v1_1001c, %v4_fffc
  store i1 %v3_10020, i1* %cpsr_c.global-to-local, align 1
  %v9_10020 = icmp eq i32 %v1_1001c, %v4_fffc
  store i1 %v9_10020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10020, label %dec_label_pc_10028, label %dec_label_pc_1000c

dec_label_pc_10028:                               ; preds = %.thread63, %dec_label_pc_1007c
  store i32 ptrtoint (i32* @global_var_203d4.145 to i32), i32* @ip, align 4
  %v0_1002c = load i32, i32* @r5, align 4
  %v1_1002c = add i32 %v0_1002c, 24
  %v2_1002c = inttoptr i32 %v1_1002c to i32*
  %v3_1002c = load i32, i32* %v2_1002c, align 4
  %v2_10030 = load i32, i32* @global_var_203d4.145, align 4
  store i32 %v2_10030, i32* %r2.global-to-local, align 4
  %v2_10034 = add i32 %v3_1002c, %v4_fffc
  store i32 %v2_10034, i32* %r3.global-to-local, align 4
  store i32 %v2_10034, i32* %v2_1002c, align 4
  %v0_1003c = load i32, i32* %r2.global-to-local, align 4
  %v1_1003c = load i32, i32* @r5, align 4
  %v2_1003c = add i32 %v1_1003c, 8
  %v3_1003c = inttoptr i32 %v2_1003c to i32*
  store i32 %v0_1003c, i32* %v3_1003c, align 4
  br label %dec_label_pc_10040

dec_label_pc_10040:                               ; preds = %dec_label_pc_10160, %dec_label_pc_10028
  %v0_10040 = load i32, i32* @r5, align 4
  %v1_10040 = add i32 %v0_10040, 12
  %v2_10040 = inttoptr i32 %v1_10040 to i32*
  %v3_10040 = load i32, i32* %v2_10040, align 4
  store i32 %v3_10040, i32* %r0.global-to-local, align 4
  %v1_10044 = add i32 %v3_10040, -2
  store i32 %v1_10044, i32* @r3, align 4
  %v7_10048 = icmp eq i32 %v1_10044, 8
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  %v5_1004c = and i32 %v1_10044, 1073741824
  %v6_1004c = icmp ne i32 %v5_1004c, 0
  store i1 %v6_1004c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10040, label %dec_label_pc_ffc4.backedge [
    i32 2, label %dec_label_pc_10858
    i32 3, label %dec_label_pc_1066c
    i32 4, label %dec_label_pc_10764
    i32 5, label %dec_label_pc_104d8
    i32 6, label %dec_label_pc_10330
    i32 7, label %dec_label_pc_1025c
    i32 8, label %dec_label_pc_10404
    i32 9, label %dec_label_pc_10188
    i32 10, label %dec_label_pc_100e4
  ]

dec_label_pc_10078:                               ; preds = %dec_label_pc_ffdc
  br i1 %v2_10000, label %dec_label_pc_10c90, label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10078
  %v3_1007c = icmp eq i32 %v4_fffc, -1
  store i1 %v3_1007c, i1* %cpsr_c.global-to-local, align 1
  %v8_1007c = icmp eq i32 %v4_fffc, -1
  store i1 %v8_1007c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1007c, label %dec_label_pc_10084, label %dec_label_pc_10028

dec_label_pc_10084:                               ; preds = %dec_label_pc_1007c
  %v0_10084 = load i32, i32* @sb, align 4
  %v1_10084 = inttoptr i32 %v0_10084 to i32*
  %v2_10084 = load i32, i32* %v1_10084, align 4
  store i32 %v2_10084, i32* %r3.global-to-local, align 4
  %v2_10088 = icmp ugt i32 %v2_10084, 10
  store i1 %v2_10088, i1* %cpsr_c.global-to-local, align 1
  %v7_10088 = icmp eq i32 %v2_10084, 11
  store i1 %v7_10088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10088, label %dec_label_pc_100cc, label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %dec_label_pc_10084, %dec_label_pc_10c90
  %v0_10090 = load i32, i32* @r5, align 4
  %v1_10090 = add i32 %v0_10090, 4
  %v2_10090 = inttoptr i32 %v1_10090 to i32*
  %v3_10090 = load i32, i32* %v2_10090, align 4
  store i32 %v3_10090, i32* %r0.global-to-local, align 4
  %v1_10094 = call i32 @function_124c8(i32 %v3_10090)
  store i32 %v1_10094, i32* %r0.global-to-local, align 4
  %v0_10098 = load i32, i32* @r5, align 4
  %v1_10098 = add i32 %v0_10098, 284
  %v2_10098 = inttoptr i32 %v1_10098 to i8*
  %v3_10098 = load i8, i8* %v2_10098, align 1
  %v4_10098 = zext i8 %v3_10098 to i32
  %v1_1009c = add nuw nsw i32 %v4_10098, 1
  %v1_100a0 = urem i32 %v1_1009c, 256
  store i32 %v1_100a0, i32* %r3.global-to-local, align 4
  %v2_100a4 = icmp ugt i32 %v1_100a0, 8
  store i1 %v2_100a4, i1* %cpsr_c.global-to-local, align 1
  %v7_100a4 = icmp eq i32 %v1_100a0, 9
  store i1 %v7_100a4, i1* %cpsr_z.global-to-local, align 1
  %v1_100a8 = trunc i32 %v1_1009c to i8
  store i8 %v1_100a8, i8* %v2_10098, align 1
  %v0_100ac = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_100ac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_100ac = xor i1 %v1_100ac, true
  %v3_100ac = and i1 %v0_100ac, %v2_100ac
  br i1 %v3_100ac, label %bb387, label %.thread293

.thread293:                                       ; preds = %dec_label_pc_10090
  store i32 -1, i32* %r2.global-to-local, align 4
  %v1_100b8289294 = load i32, i32* @r5, align 4
  %v2_100b8290295 = add i32 %v1_100b8289294, 4
  %v3_100b8291296 = inttoptr i32 %v2_100b8290295 to i32*
  store i32 -1, i32* %v3_100b8291296, align 4
  br label %bb388

bb387:                                            ; preds = %dec_label_pc_10090
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_100b8285 = load i32, i32* @r5, align 4
  %v2_100b8286 = add i32 %v1_100b8285, 4
  %v3_100b8287 = inttoptr i32 %v2_100b8286 to i32*
  store i32 -1, i32* %v3_100b8287, align 4
  %v4_100bc = load i32, i32* %r0.global-to-local, align 4
  %v5_100bc = load i32, i32* @r5, align 4
  %v6_100bc = add i32 %v5_100bc, 12
  %v7_100bc = inttoptr i32 %v6_100bc to i32*
  store i32 %v4_100bc, i32* %v7_100bc, align 4
  %v4_100c0 = load i32, i32* %r3.global-to-local, align 4
  %v5_100c0 = trunc i32 %v4_100c0 to i8
  %v6_100c0 = load i32, i32* @r5, align 4
  %v7_100c0 = add i32 %v6_100c0, 284
  %v8_100c0 = inttoptr i32 %v7_100c0 to i8*
  store i8 %v5_100c0, i8* %v8_100c0, align 1
  %v0_100c4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_100c4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb388

bb388:                                            ; preds = %.thread293, %bb387
  %v1_100c8 = phi i1 [ %v1_100c4.pre, %bb387 ], [ %v0_100ac, %.thread293 ]
  %v0_100c8 = phi i1 [ %v0_100c4.pre, %bb387 ], [ %v1_100ac, %.thread293 ]
  %v2_100c4 = xor i1 %v1_100c8, true
  %v3_100c4 = or i1 %v0_100c8, %v2_100c4
  br i1 %v3_100c4, label %bb389, label %bb390

bb389:                                            ; preds = %bb388
  %v4_100c4 = load i32, i32* @r5, align 4
  store i32 %v4_100c4, i32* %r0.global-to-local, align 4
  br label %bb390

bb390:                                            ; preds = %bb388, %bb389
  store i32 65740, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_100c4, i32 ptrtoint (i32* @global_var_f344.242 to i32))
  br label %dec_label_pc_100cc

dec_label_pc_100cc:                               ; preds = %dec_label_pc_ffc0.loopexit, %dec_label_pc_ffc4.backedge, %dec_label_pc_ffc0.preheader, %dec_label_pc_10084, %dec_label_pc_ffa4, %dec_label_pc_ff58, %dec_label_pc_10bec, %bb390
  %v3_100cc = load i16, i16* %stack_var_-52, align 2
  %v4_100cc = sext i16 %v3_100cc to i32
  store i32 %v4_100cc, i32* %r3.global-to-local, align 4
  %v1_100d0 = add nsw i32 %v4_100cc, 1
  store i32 %v1_100d0, i32* @r4, align 4
  %v2_100d4 = icmp ugt i32 %v1_100d0, 254
  store i1 %v2_100d4, i1* %cpsr_c.global-to-local, align 1
  %v7_100d4 = icmp eq i32 %v1_100d0, 255
  store i1 %v7_100d4, i1* %cpsr_z.global-to-local, align 1
  %v5_100d8 = trunc i32 %v1_100d0 to i16
  store i16 %v5_100d8, i16* %stack_var_-52, align 2
  %v7_100dc = icmp sgt i16 %v3_100cc, 254
  br i1 %v7_100dc, label %dec_label_pc_f98c, label %dec_label_pc_ff58

dec_label_pc_100e4:                               ; preds = %dec_label_pc_10040
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_100e8 = call i32 @function_10e40(i32 30)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_100f8 = call i32 @function_10d7c(i32 30, i32* %v2_10718)
  %v3_100fc = load i8, i8* %stack_var_-56, align 1
  %v4_100fc = sext i8 %v3_100fc to i32
  store i32 %v3_100f8, i32* %r2.global-to-local, align 4
  %v1_10104 = add nsw i32 %v4_100fc, -1
  store i32 %v1_10104, i32* %r3.global-to-local, align 4
  %v0_10108 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10108, i32* %r0.global-to-local, align 4
  %v0_1010c = load i32, i32* @r5, align 4
  %v1_1010c = add i32 %v0_1010c, 24
  %v2_1010c = inttoptr i32 %v1_1010c to i32*
  %v3_1010c = load i32, i32* %v2_1010c, align 4
  store i32 %v3_1010c, i32* %r1.global-to-local, align 4
  %v4_10110 = call i32 @function_1191c(i32 %v0_10108, i32 %v3_1010c, i32 %v3_100f8, i32 %v1_10104)
  %v2_10114 = icmp eq i32 %v4_10110, -1
  store i1 %v2_10114, i1* %cpsr_c.global-to-local, align 1
  %v7_10114 = icmp eq i32 %v4_10110, -1
  store i1 %v7_10114, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10110, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_109e0 = call i32 @function_10da0(i32 30)
  br i1 %v7_10114, label %dec_label_pc_109dc, label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_100e4
  store i32 %v1_109e0, i32* %r0.global-to-local, align 4
  %v0_10128 = load i32, i32* @r5, align 4
  %v1_10128 = add i32 %v0_10128, 4
  %v2_10128 = inttoptr i32 %v1_10128 to i32*
  %v3_10128 = load i32, i32* %v2_10128, align 4
  store i32 %v3_10128, i32* %r0.global-to-local, align 4
  %v1_1012c = call i32 @function_124c8(i32 %v3_10128)
  store i32 %v1_1012c, i32* %r0.global-to-local, align 4
  %v0_10130 = load i32, i32* @r5, align 4
  %v1_10130 = add i32 %v0_10130, 284
  %v2_10130 = inttoptr i32 %v1_10130 to i8*
  %v3_10130 = load i8, i8* %v2_10130, align 1
  %v4_10130 = zext i8 %v3_10130 to i32
  %v1_10134 = add nuw nsw i32 %v4_10130, 1
  %v1_10138 = urem i32 %v1_10134, 256
  store i32 %v1_10138, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10140 = icmp ugt i32 %v1_10138, 9
  store i1 %v2_10140, i1* %cpsr_c.global-to-local, align 1
  %v7_10140 = icmp eq i32 %v1_10138, 10
  store i1 %v7_10140, i1* %cpsr_z.global-to-local, align 1
  %v2_10144 = add i32 %v0_10130, 4
  %v3_10144 = inttoptr i32 %v2_10144 to i32*
  store i32 -1, i32* %v3_10144, align 4
  %v0_10148 = load i32, i32* @r3, align 4
  %v1_10148 = trunc i32 %v0_10148 to i8
  %v2_10148 = load i32, i32* @r5, align 4
  %v3_10148 = add i32 %v2_10148, 284
  %v4_10148 = inttoptr i32 %v3_10148 to i8*
  store i8 %v1_10148, i8* %v4_10148, align 1
  %v0_1014c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1014c, label %dec_label_pc_10150, label %dec_label_pc_10ad0

dec_label_pc_10150:                               ; preds = %dec_label_pc_10120
  store i32 0, i32* @r3, align 4
  %v1_10154 = load i32, i32* @r5, align 4
  %v2_10154 = add i32 %v1_10154, 12
  %v3_10154 = inttoptr i32 %v2_10154 to i32*
  store i32 0, i32* %v3_10154, align 4
  %v0_10158 = load i32, i32* @r3, align 4
  %v1_10158 = trunc i32 %v0_10158 to i8
  %v2_10158 = load i32, i32* @r5, align 4
  %v3_10158 = add i32 %v2_10158, 284
  %v4_10158 = inttoptr i32 %v3_10158 to i8*
  store i8 %v1_10158, i8* %v4_10158, align 1
  br label %dec_label_pc_1015c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_10ad0, %dec_label_pc_10150
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10160

dec_label_pc_10160:                               ; preds = %dec_label_pc_1084c, %dec_label_pc_10614, %dec_label_pc_10480, %dec_label_pc_103ac, %dec_label_pc_102d8, %dec_label_pc_10204, %dec_label_pc_1015c
  %v0_10160 = load i32, i32* @r5, align 4
  %v1_10160 = add i32 %v0_10160, 24
  %v2_10160 = inttoptr i32 %v1_10160 to i32*
  %v3_10160 = load i32, i32* %v2_10160, align 4
  %v0_10164 = load i32, i32* @r7, align 4
  %v2_10164 = sub i32 %v0_10164, %v3_10160
  %v3_10164 = icmp uge i32 %v0_10164, %v3_10160
  store i1 %v3_10164, i1* %cpsr_c.global-to-local, align 1
  %v4_10164 = xor i32 %v0_10164, %v3_10160
  %v5_10164 = xor i32 %v2_10164, %v0_10164
  %v6_10164 = and i32 %v5_10164, %v4_10164
  %v7_10164 = icmp slt i32 %v6_10164, 0
  %v8_10164 = icmp slt i32 %v2_10164, 0
  %v9_10164 = icmp eq i32 %v0_10164, %v3_10160
  store i1 %v9_10164, i1* %cpsr_z.global-to-local, align 1
  %v2_10168 = xor i1 %v8_10164, %v7_10164
  %v0_10164.v3_10160 = select i1 %v2_10168, i32 %v0_10164, i32 %v3_10160
  store i32 %v0_10164.v3_10160, i32* %r1.global-to-local, align 4
  %v2_10170 = sub i32 %v3_10160, %v0_10164.v3_10160
  store i32 %v2_10170, i32* @r2, align 4
  store i32 %v2_10170, i32* %v2_10160, align 4
  %v0_10178 = load i32, i32* %sl.global-to-local, align 4
  %v1_10178 = load i32, i32* %r1.global-to-local, align 4
  %v2_10178 = add i32 %v1_10178, %v0_10178
  store i32 %v2_10178, i32* @r1, align 4
  store i32 %v0_10178, i32* @r0, align 4
  %v3_10180 = call i32 @function_129e0(i32 %v0_10178, i32 %v2_10178, i32 %v2_10170)
  store i32 %v3_10180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10040

dec_label_pc_10188:                               ; preds = %dec_label_pc_10040
  %v1_10188 = add i32 %v0_10040, 24
  %v2_10188 = inttoptr i32 %v1_10188 to i32*
  %v3_10188 = load i32, i32* %v2_10188, align 4
  store i32 %v3_10188, i32* %r2.global-to-local, align 4
  %v1_1018c = add i32 %v3_10188, -1
  store i32 %v1_1018c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10190 = icmp eq i32 %v1_1018c, 0
  store i1 %v2_10190, i1* %cpsr_z.global-to-local, align 1
  %tmp393 = icmp slt i32 %v1_1018c, 1
  br i1 %tmp393, label %dec_label_pc_ffc4.backedge.thread, label %dec_label_pc_10198

dec_label_pc_10198:                               ; preds = %dec_label_pc_10188
  %v2_10198 = add i32 %v1_1018c, %v0_10040
  store i32 %v2_10198, i32* %r3.global-to-local, align 4
  %v1_1019c = add i32 %v2_10198, 28
  %v2_1019c = inttoptr i32 %v1_1019c to i8*
  %v3_1019c = load i8, i8* %v2_1019c, align 1
  %v4_1019c = zext i8 %v3_1019c to i32
  store i32 %v4_1019c, i32* %r3.global-to-local, align 4
  %v2_101a0 = icmp ugt i8 %v3_1019c, 61
  store i1 %v2_101a0, i1* %cpsr_c.global-to-local, align 1
  %v7_101a0 = icmp eq i8 %v3_1019c, 62
  store i1 %v7_101a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a0, label %dec_label_pc_10204, label %bb394

bb394:                                            ; preds = %dec_label_pc_10198
  %v3_101a4 = icmp ugt i8 %v3_1019c, 57
  store i1 %v3_101a4, i1* %cpsr_c.global-to-local, align 1
  %v8_101a4 = icmp eq i8 %v3_1019c, 58
  store i1 %v8_101a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101a4, label %dec_label_pc_10204, label %dec_label_pc_101ac

dec_label_pc_101ac:                               ; preds = %bb394
  %v2_101ac = icmp ugt i8 %v3_1019c, 35
  store i1 %v2_101ac, i1* %cpsr_c.global-to-local, align 1
  %v7_101ac = icmp eq i8 %v3_1019c, 36
  store i1 %v7_101ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101ac, label %dec_label_pc_10204, label %dec_label_pc_101b4

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101ac
  %v2_101b4 = icmp ugt i8 %v3_1019c, 34
  store i1 %v2_101b4, i1* %cpsr_c.global-to-local, align 1
  %v7_101b4 = icmp eq i8 %v3_1019c, 35
  store i1 %v7_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b4, label %dec_label_pc_10204, label %dec_label_pc_101bc

dec_label_pc_101bc:                               ; preds = %dec_label_pc_101b4
  %v2_101bc = icmp ugt i8 %v3_1019c, 36
  store i1 %v2_101bc, i1* %cpsr_c.global-to-local, align 1
  %v7_101bc = icmp eq i8 %v3_1019c, 37
  store i1 %v7_101bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101bc, label %dec_label_pc_10204, label %dec_label_pc_101ec.preheader

dec_label_pc_101ec.preheader:                     ; preds = %dec_label_pc_101bc
  %v3_101c0 = add i32 %v0_10040, 28
  %v2_101c4 = add i32 %v3_101c0, %v3_10188
  store i32 %v2_101c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_101ec

dec_label_pc_101d0:                               ; preds = %bb395
  %v2_101d0 = icmp ugt i8 %v3_101f4, 35
  store i1 %v2_101d0, i1* %cpsr_c.global-to-local, align 1
  %v7_101d0 = icmp eq i8 %v3_101f4, 36
  store i1 %v7_101d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101d0, label %dec_label_pc_10204, label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %dec_label_pc_101d0
  %v2_101d8 = icmp ugt i8 %v3_101f4, 34
  store i1 %v2_101d8, i1* %cpsr_c.global-to-local, align 1
  %v7_101d8 = icmp eq i8 %v3_101f4, 35
  store i1 %v7_101d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101d8, label %dec_label_pc_10204, label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %dec_label_pc_101d8
  %v2_101e0 = icmp ugt i8 %v3_101f4, 36
  store i1 %v2_101e0, i1* %cpsr_c.global-to-local, align 1
  %v7_101e0 = icmp eq i8 %v3_101f4, 37
  store i1 %v7_101e0, i1* %cpsr_z.global-to-local, align 1
  %v1_101e4 = add i32 %v0_101e4, -1
  store i32 %v1_101e4, i32* %r3.global-to-local, align 4
  br i1 %v7_101e0, label %dec_label_pc_10204, label %dec_label_pc_101ec

dec_label_pc_101ec:                               ; preds = %dec_label_pc_101ec.preheader, %dec_label_pc_101e0
  %v0_101e4 = phi i32 [ %v2_101c4, %dec_label_pc_101ec.preheader ], [ %v1_101e4, %dec_label_pc_101e0 ]
  %v0_101ec = phi i32 [ %v1_1018c, %dec_label_pc_101ec.preheader ], [ %v1_101ec, %dec_label_pc_101e0 ]
  %v1_101ec = add i32 %v0_101ec, -1
  store i32 %v1_101ec, i32* %r1.global-to-local, align 4
  %v2_101ec = icmp ne i32 %v0_101ec, 0
  store i1 %v2_101ec, i1* %cpsr_c.global-to-local, align 1
  %v7_101ec = icmp eq i32 %v0_101ec, 1
  store i1 %v7_101ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101ec, label %dec_label_pc_ffc4.backedge.thread528, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101ec
  %v1_101f4 = add i32 %v0_101e4, -2
  %v2_101f4 = inttoptr i32 %v1_101f4 to i8*
  %v3_101f4 = load i8, i8* %v2_101f4, align 1
  %v4_101f4 = zext i8 %v3_101f4 to i32
  store i32 %v4_101f4, i32* %r2.global-to-local, align 4
  %v2_101f8 = icmp ugt i8 %v3_101f4, 61
  store i1 %v2_101f8, i1* %cpsr_c.global-to-local, align 1
  %v7_101f8 = icmp eq i8 %v3_101f4, 62
  store i1 %v7_101f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101f8, label %dec_label_pc_10204, label %bb395

bb395:                                            ; preds = %dec_label_pc_101f4
  %v3_101fc = icmp ugt i8 %v3_101f4, 57
  store i1 %v3_101fc, i1* %cpsr_c.global-to-local, align 1
  %v8_101fc = icmp eq i8 %v3_101f4, 58
  store i1 %v8_101fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101fc, label %dec_label_pc_10204, label %dec_label_pc_101d0

dec_label_pc_10204:                               ; preds = %dec_label_pc_101f4, %bb395, %dec_label_pc_101e0, %dec_label_pc_101d8, %dec_label_pc_101d0, %dec_label_pc_101bc, %dec_label_pc_10198, %dec_label_pc_101b4, %dec_label_pc_101ac, %bb394
  %v0_10208 = phi i32 [ %v1_1018c, %dec_label_pc_101bc ], [ %v1_1018c, %dec_label_pc_10198 ], [ %v1_1018c, %dec_label_pc_101b4 ], [ %v1_1018c, %dec_label_pc_101ac ], [ %v1_1018c, %bb394 ], [ %v1_101ec, %dec_label_pc_101d0 ], [ %v1_101ec, %dec_label_pc_101d8 ], [ %v1_101ec, %dec_label_pc_101e0 ], [ %v1_101ec, %bb395 ], [ %v1_101ec, %dec_label_pc_101f4 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10208 = add i32 %v0_10208, 1
  store i32 %v1_10208, i32* @r7, align 4
  %v1_1020c = call i32 @function_10e40(i32 28)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_1021c = call i32 @function_10d7c(i32 28, i32* nonnull %stack_var_-60)
  store i32 %v3_1021c, i32* %r0.global-to-local, align 4
  %v3_10220 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10220, i32* %r2.global-to-local, align 4
  store i32 %v3_1021c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1022c = load i32, i32* @r5, align 4
  %v1_1022c = add i32 %v0_1022c, 4
  %v2_1022c = inttoptr i32 %v1_1022c to i32*
  %v3_1022c = load i32, i32* %v2_1022c, align 4
  store i32 %v3_1022c, i32* %r0.global-to-local, align 4
  %v4_10230 = call i32 @function_12c18(i32 %v3_1022c, i32 %v3_1021c, i32 %v3_10220, i32 16384)
  store i32 %v4_10230, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10240 = load i32, i32* @r5, align 4
  %v1_10240 = add i32 %v0_10240, 4
  %v2_10240 = inttoptr i32 %v1_10240 to i32*
  %v3_10240 = load i32, i32* %v2_10240, align 4
  store i32 %v3_10240, i32* %r0.global-to-local, align 4
  %v4_10244 = call i32 @function_12c18(i32 %v3_10240, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_1024c = call i32 @function_10da0(i32 28)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10254 = load i32, i32* @r5, align 4
  %v2_10254 = add i32 %v1_10254, 12
  %v3_10254 = inttoptr i32 %v2_10254 to i32*
  store i32 10, i32* %v3_10254, align 4
  br label %dec_label_pc_10160

dec_label_pc_1025c:                               ; preds = %dec_label_pc_10040
  %v1_1025c = add i32 %v0_10040, 24
  %v2_1025c = inttoptr i32 %v1_1025c to i32*
  %v3_1025c = load i32, i32* %v2_1025c, align 4
  store i32 %v3_1025c, i32* %r2.global-to-local, align 4
  %v1_10260 = add i32 %v3_1025c, -1
  store i32 %v1_10260, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10264 = icmp eq i32 %v1_10260, 0
  store i1 %v2_10264, i1* %cpsr_z.global-to-local, align 1
  %tmp396 = icmp slt i32 %v1_10260, 1
  br i1 %tmp396, label %dec_label_pc_ffc4.backedge.thread, label %dec_label_pc_1026c

dec_label_pc_1026c:                               ; preds = %dec_label_pc_1025c
  %v2_1026c = add i32 %v1_10260, %v0_10040
  store i32 %v2_1026c, i32* %r3.global-to-local, align 4
  %v1_10270 = add i32 %v2_1026c, 28
  %v2_10270 = inttoptr i32 %v1_10270 to i8*
  %v3_10270 = load i8, i8* %v2_10270, align 1
  %v4_10270 = zext i8 %v3_10270 to i32
  store i32 %v4_10270, i32* %r3.global-to-local, align 4
  %v2_10274 = icmp ugt i8 %v3_10270, 61
  store i1 %v2_10274, i1* %cpsr_c.global-to-local, align 1
  %v7_10274 = icmp eq i8 %v3_10270, 62
  store i1 %v7_10274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10274, label %dec_label_pc_102d8, label %bb397

bb397:                                            ; preds = %dec_label_pc_1026c
  %v3_10278 = icmp ugt i8 %v3_10270, 57
  store i1 %v3_10278, i1* %cpsr_c.global-to-local, align 1
  %v8_10278 = icmp eq i8 %v3_10270, 58
  store i1 %v8_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10278, label %dec_label_pc_102d8, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %bb397
  %v2_10280 = icmp ugt i8 %v3_10270, 35
  store i1 %v2_10280, i1* %cpsr_c.global-to-local, align 1
  %v7_10280 = icmp eq i8 %v3_10270, 36
  store i1 %v7_10280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10280, label %dec_label_pc_102d8, label %dec_label_pc_10288

dec_label_pc_10288:                               ; preds = %dec_label_pc_10280
  %v2_10288 = icmp ugt i8 %v3_10270, 34
  store i1 %v2_10288, i1* %cpsr_c.global-to-local, align 1
  %v7_10288 = icmp eq i8 %v3_10270, 35
  store i1 %v7_10288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10288, label %dec_label_pc_102d8, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %dec_label_pc_10288
  %v2_10290 = icmp ugt i8 %v3_10270, 36
  store i1 %v2_10290, i1* %cpsr_c.global-to-local, align 1
  %v7_10290 = icmp eq i8 %v3_10270, 37
  store i1 %v7_10290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10290, label %dec_label_pc_102d8, label %dec_label_pc_102c0.preheader

dec_label_pc_102c0.preheader:                     ; preds = %dec_label_pc_10290
  %v3_10294 = add i32 %v0_10040, 28
  %v2_10298 = add i32 %v3_10294, %v3_1025c
  store i32 %v2_10298, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_102c0

dec_label_pc_102a4:                               ; preds = %bb398
  %v2_102a4 = icmp ugt i8 %v3_102c8, 35
  store i1 %v2_102a4, i1* %cpsr_c.global-to-local, align 1
  %v7_102a4 = icmp eq i8 %v3_102c8, 36
  store i1 %v7_102a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102a4, label %dec_label_pc_102d8, label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_102a4
  %v2_102ac = icmp ugt i8 %v3_102c8, 34
  store i1 %v2_102ac, i1* %cpsr_c.global-to-local, align 1
  %v7_102ac = icmp eq i8 %v3_102c8, 35
  store i1 %v7_102ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102ac, label %dec_label_pc_102d8, label %dec_label_pc_102b4

dec_label_pc_102b4:                               ; preds = %dec_label_pc_102ac
  %v2_102b4 = icmp ugt i8 %v3_102c8, 36
  store i1 %v2_102b4, i1* %cpsr_c.global-to-local, align 1
  %v7_102b4 = icmp eq i8 %v3_102c8, 37
  store i1 %v7_102b4, i1* %cpsr_z.global-to-local, align 1
  %v1_102b8 = add i32 %v0_102b8, -1
  store i32 %v1_102b8, i32* %r3.global-to-local, align 4
  br i1 %v7_102b4, label %dec_label_pc_102d8, label %dec_label_pc_102c0

dec_label_pc_102c0:                               ; preds = %dec_label_pc_102c0.preheader, %dec_label_pc_102b4
  %v0_102b8 = phi i32 [ %v2_10298, %dec_label_pc_102c0.preheader ], [ %v1_102b8, %dec_label_pc_102b4 ]
  %v0_102c0 = phi i32 [ %v1_10260, %dec_label_pc_102c0.preheader ], [ %v1_102c0, %dec_label_pc_102b4 ]
  %v1_102c0 = add i32 %v0_102c0, -1
  store i32 %v1_102c0, i32* %r1.global-to-local, align 4
  %v2_102c0 = icmp ne i32 %v0_102c0, 0
  store i1 %v2_102c0, i1* %cpsr_c.global-to-local, align 1
  %v7_102c0 = icmp eq i32 %v0_102c0, 1
  store i1 %v7_102c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102c0, label %dec_label_pc_ffc4.backedge.thread528, label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102c0
  %v1_102c8 = add i32 %v0_102b8, -2
  %v2_102c8 = inttoptr i32 %v1_102c8 to i8*
  %v3_102c8 = load i8, i8* %v2_102c8, align 1
  %v4_102c8 = zext i8 %v3_102c8 to i32
  store i32 %v4_102c8, i32* %r2.global-to-local, align 4
  %v2_102cc = icmp ugt i8 %v3_102c8, 61
  store i1 %v2_102cc, i1* %cpsr_c.global-to-local, align 1
  %v7_102cc = icmp eq i8 %v3_102c8, 62
  store i1 %v7_102cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102cc, label %dec_label_pc_102d8, label %bb398

bb398:                                            ; preds = %dec_label_pc_102c8
  %v3_102d0 = icmp ugt i8 %v3_102c8, 57
  store i1 %v3_102d0, i1* %cpsr_c.global-to-local, align 1
  %v8_102d0 = icmp eq i8 %v3_102c8, 58
  store i1 %v8_102d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_102d0, label %dec_label_pc_102d8, label %dec_label_pc_102a4

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102c8, %bb398, %dec_label_pc_102b4, %dec_label_pc_102ac, %dec_label_pc_102a4, %dec_label_pc_10290, %dec_label_pc_1026c, %dec_label_pc_10288, %dec_label_pc_10280, %bb397
  %v0_102dc = phi i32 [ %v1_10260, %dec_label_pc_10290 ], [ %v1_10260, %dec_label_pc_1026c ], [ %v1_10260, %dec_label_pc_10288 ], [ %v1_10260, %dec_label_pc_10280 ], [ %v1_10260, %bb397 ], [ %v1_102c0, %dec_label_pc_102a4 ], [ %v1_102c0, %dec_label_pc_102ac ], [ %v1_102c0, %dec_label_pc_102b4 ], [ %v1_102c0, %bb398 ], [ %v1_102c0, %dec_label_pc_102c8 ]
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_102dc = add i32 %v0_102dc, 1
  store i32 %v1_102dc, i32* @r7, align 4
  %v1_102e0 = call i32 @function_10e40(i32 24)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_102f0 = call i32 @function_10d7c(i32 24, i32* nonnull %stack_var_-60)
  store i32 %v3_102f0, i32* %r0.global-to-local, align 4
  %v3_102f4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_102f4, i32* %r2.global-to-local, align 4
  store i32 %v3_102f0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10300 = load i32, i32* @r5, align 4
  %v1_10300 = add i32 %v0_10300, 4
  %v2_10300 = inttoptr i32 %v1_10300 to i32*
  %v3_10300 = load i32, i32* %v2_10300, align 4
  store i32 %v3_10300, i32* %r0.global-to-local, align 4
  %v4_10304 = call i32 @function_12c18(i32 %v3_10300, i32 %v3_102f0, i32 %v3_102f4, i32 16384)
  store i32 %v4_10304, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10314 = load i32, i32* @r5, align 4
  %v1_10314 = add i32 %v0_10314, 4
  %v2_10314 = inttoptr i32 %v1_10314 to i32*
  %v3_10314 = load i32, i32* %v2_10314, align 4
  store i32 %v3_10314, i32* %r0.global-to-local, align 4
  %v4_10318 = call i32 @function_12c18(i32 %v3_10314, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10320 = call i32 @function_10da0(i32 24)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10328 = load i32, i32* @r5, align 4
  %v2_10328 = add i32 %v1_10328, 12
  %v3_10328 = inttoptr i32 %v2_10328 to i32*
  store i32 8, i32* %v3_10328, align 4
  br label %dec_label_pc_10160

dec_label_pc_10330:                               ; preds = %dec_label_pc_10040
  %v1_10330 = add i32 %v0_10040, 24
  %v2_10330 = inttoptr i32 %v1_10330 to i32*
  %v3_10330 = load i32, i32* %v2_10330, align 4
  store i32 %v3_10330, i32* %r2.global-to-local, align 4
  %v1_10334 = add i32 %v3_10330, -1
  store i32 %v1_10334, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10338 = icmp eq i32 %v1_10334, 0
  store i1 %v2_10338, i1* %cpsr_z.global-to-local, align 1
  %tmp399 = icmp slt i32 %v1_10334, 1
  br i1 %tmp399, label %dec_label_pc_ffc4.backedge.thread, label %dec_label_pc_10340

dec_label_pc_10340:                               ; preds = %dec_label_pc_10330
  %v2_10340 = add i32 %v1_10334, %v0_10040
  store i32 %v2_10340, i32* %r3.global-to-local, align 4
  %v1_10344 = add i32 %v2_10340, 28
  %v2_10344 = inttoptr i32 %v1_10344 to i8*
  %v3_10344 = load i8, i8* %v2_10344, align 1
  %v4_10344 = zext i8 %v3_10344 to i32
  store i32 %v4_10344, i32* %r3.global-to-local, align 4
  %v2_10348 = icmp ugt i8 %v3_10344, 61
  store i1 %v2_10348, i1* %cpsr_c.global-to-local, align 1
  %v7_10348 = icmp eq i8 %v3_10344, 62
  store i1 %v7_10348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10348, label %dec_label_pc_103ac, label %bb400

bb400:                                            ; preds = %dec_label_pc_10340
  %v3_1034c = icmp ugt i8 %v3_10344, 57
  store i1 %v3_1034c, i1* %cpsr_c.global-to-local, align 1
  %v8_1034c = icmp eq i8 %v3_10344, 58
  store i1 %v8_1034c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1034c, label %dec_label_pc_103ac, label %dec_label_pc_10354

dec_label_pc_10354:                               ; preds = %bb400
  %v2_10354 = icmp ugt i8 %v3_10344, 35
  store i1 %v2_10354, i1* %cpsr_c.global-to-local, align 1
  %v7_10354 = icmp eq i8 %v3_10344, 36
  store i1 %v7_10354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10354, label %dec_label_pc_103ac, label %dec_label_pc_1035c

dec_label_pc_1035c:                               ; preds = %dec_label_pc_10354
  %v2_1035c = icmp ugt i8 %v3_10344, 34
  store i1 %v2_1035c, i1* %cpsr_c.global-to-local, align 1
  %v7_1035c = icmp eq i8 %v3_10344, 35
  store i1 %v7_1035c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1035c, label %dec_label_pc_103ac, label %dec_label_pc_10364

dec_label_pc_10364:                               ; preds = %dec_label_pc_1035c
  %v2_10364 = icmp ugt i8 %v3_10344, 36
  store i1 %v2_10364, i1* %cpsr_c.global-to-local, align 1
  %v7_10364 = icmp eq i8 %v3_10344, 37
  store i1 %v7_10364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10364, label %dec_label_pc_103ac, label %dec_label_pc_10394.preheader

dec_label_pc_10394.preheader:                     ; preds = %dec_label_pc_10364
  %v3_10368 = add i32 %v0_10040, 28
  %v2_1036c = add i32 %v3_10368, %v3_10330
  store i32 %v2_1036c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10394

dec_label_pc_10378:                               ; preds = %bb401
  %v2_10378 = icmp ugt i8 %v3_1039c, 35
  store i1 %v2_10378, i1* %cpsr_c.global-to-local, align 1
  %v7_10378 = icmp eq i8 %v3_1039c, 36
  store i1 %v7_10378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10378, label %dec_label_pc_103ac, label %dec_label_pc_10380

dec_label_pc_10380:                               ; preds = %dec_label_pc_10378
  %v2_10380 = icmp ugt i8 %v3_1039c, 34
  store i1 %v2_10380, i1* %cpsr_c.global-to-local, align 1
  %v7_10380 = icmp eq i8 %v3_1039c, 35
  store i1 %v7_10380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10380, label %dec_label_pc_103ac, label %dec_label_pc_10388

dec_label_pc_10388:                               ; preds = %dec_label_pc_10380
  %v2_10388 = icmp ugt i8 %v3_1039c, 36
  store i1 %v2_10388, i1* %cpsr_c.global-to-local, align 1
  %v7_10388 = icmp eq i8 %v3_1039c, 37
  store i1 %v7_10388, i1* %cpsr_z.global-to-local, align 1
  %v1_1038c = add i32 %v0_1038c, -1
  store i32 %v1_1038c, i32* %r3.global-to-local, align 4
  br i1 %v7_10388, label %dec_label_pc_103ac, label %dec_label_pc_10394

dec_label_pc_10394:                               ; preds = %dec_label_pc_10394.preheader, %dec_label_pc_10388
  %v0_1038c = phi i32 [ %v2_1036c, %dec_label_pc_10394.preheader ], [ %v1_1038c, %dec_label_pc_10388 ]
  %v0_10394 = phi i32 [ %v1_10334, %dec_label_pc_10394.preheader ], [ %v1_10394, %dec_label_pc_10388 ]
  %v1_10394 = add i32 %v0_10394, -1
  store i32 %v1_10394, i32* %r1.global-to-local, align 4
  %v2_10394 = icmp ne i32 %v0_10394, 0
  store i1 %v2_10394, i1* %cpsr_c.global-to-local, align 1
  %v7_10394 = icmp eq i32 %v0_10394, 1
  store i1 %v7_10394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10394, label %dec_label_pc_ffc4.backedge.thread528, label %dec_label_pc_1039c

dec_label_pc_1039c:                               ; preds = %dec_label_pc_10394
  %v1_1039c = add i32 %v0_1038c, -2
  %v2_1039c = inttoptr i32 %v1_1039c to i8*
  %v3_1039c = load i8, i8* %v2_1039c, align 1
  %v4_1039c = zext i8 %v3_1039c to i32
  store i32 %v4_1039c, i32* %r2.global-to-local, align 4
  %v2_103a0 = icmp ugt i8 %v3_1039c, 61
  store i1 %v2_103a0, i1* %cpsr_c.global-to-local, align 1
  %v7_103a0 = icmp eq i8 %v3_1039c, 62
  store i1 %v7_103a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a0, label %dec_label_pc_103ac, label %bb401

bb401:                                            ; preds = %dec_label_pc_1039c
  %v3_103a4 = icmp ugt i8 %v3_1039c, 57
  store i1 %v3_103a4, i1* %cpsr_c.global-to-local, align 1
  %v8_103a4 = icmp eq i8 %v3_1039c, 58
  store i1 %v8_103a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103a4, label %dec_label_pc_103ac, label %dec_label_pc_10378

dec_label_pc_103ac:                               ; preds = %dec_label_pc_1039c, %bb401, %dec_label_pc_10388, %dec_label_pc_10380, %dec_label_pc_10378, %dec_label_pc_10364, %dec_label_pc_10340, %dec_label_pc_1035c, %dec_label_pc_10354, %bb400
  %v0_103b0 = phi i32 [ %v1_10334, %dec_label_pc_10364 ], [ %v1_10334, %dec_label_pc_10340 ], [ %v1_10334, %dec_label_pc_1035c ], [ %v1_10334, %dec_label_pc_10354 ], [ %v1_10334, %bb400 ], [ %v1_10394, %dec_label_pc_10378 ], [ %v1_10394, %dec_label_pc_10380 ], [ %v1_10394, %dec_label_pc_10388 ], [ %v1_10394, %bb401 ], [ %v1_10394, %dec_label_pc_1039c ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_103b0 = add i32 %v0_103b0, 1
  store i32 %v1_103b0, i32* @r7, align 4
  %v1_103b4 = call i32 @function_10e40(i32 26)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_103c4 = call i32 @function_10d7c(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_103c4, i32* %r0.global-to-local, align 4
  %v3_103c8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_103c8, i32* %r2.global-to-local, align 4
  store i32 %v3_103c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d4 = load i32, i32* @r5, align 4
  %v1_103d4 = add i32 %v0_103d4, 4
  %v2_103d4 = inttoptr i32 %v1_103d4 to i32*
  %v3_103d4 = load i32, i32* %v2_103d4, align 4
  store i32 %v3_103d4, i32* %r0.global-to-local, align 4
  %v4_103d8 = call i32 @function_12c18(i32 %v3_103d4, i32 %v3_103c4, i32 %v3_103c8, i32 16384)
  store i32 %v4_103d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103e8 = load i32, i32* @r5, align 4
  %v1_103e8 = add i32 %v0_103e8, 4
  %v2_103e8 = inttoptr i32 %v1_103e8 to i32*
  %v3_103e8 = load i32, i32* %v2_103e8, align 4
  store i32 %v3_103e8, i32* %r0.global-to-local, align 4
  %v4_103ec = call i32 @function_12c18(i32 %v3_103e8, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_103f4 = call i32 @function_10da0(i32 26)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_103fc = load i32, i32* @r5, align 4
  %v2_103fc = add i32 %v1_103fc, 12
  %v3_103fc = inttoptr i32 %v2_103fc to i32*
  store i32 7, i32* %v3_103fc, align 4
  br label %dec_label_pc_10160

dec_label_pc_10404:                               ; preds = %dec_label_pc_10040
  %v1_10404 = add i32 %v0_10040, 24
  %v2_10404 = inttoptr i32 %v1_10404 to i32*
  %v3_10404 = load i32, i32* %v2_10404, align 4
  store i32 %v3_10404, i32* %r2.global-to-local, align 4
  %v1_10408 = add i32 %v3_10404, -1
  store i32 %v1_10408, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1040c = icmp eq i32 %v1_10408, 0
  store i1 %v2_1040c, i1* %cpsr_z.global-to-local, align 1
  %tmp402 = icmp slt i32 %v1_10408, 1
  br i1 %tmp402, label %dec_label_pc_ffc4.backedge.thread, label %dec_label_pc_10414

dec_label_pc_10414:                               ; preds = %dec_label_pc_10404
  %v2_10414 = add i32 %v1_10408, %v0_10040
  store i32 %v2_10414, i32* %r3.global-to-local, align 4
  %v1_10418 = add i32 %v2_10414, 28
  %v2_10418 = inttoptr i32 %v1_10418 to i8*
  %v3_10418 = load i8, i8* %v2_10418, align 1
  %v4_10418 = zext i8 %v3_10418 to i32
  store i32 %v4_10418, i32* %r3.global-to-local, align 4
  %v2_1041c = icmp ugt i8 %v3_10418, 61
  store i1 %v2_1041c, i1* %cpsr_c.global-to-local, align 1
  %v7_1041c = icmp eq i8 %v3_10418, 62
  store i1 %v7_1041c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1041c, label %dec_label_pc_10480, label %bb403

bb403:                                            ; preds = %dec_label_pc_10414
  %v3_10420 = icmp ugt i8 %v3_10418, 57
  store i1 %v3_10420, i1* %cpsr_c.global-to-local, align 1
  %v8_10420 = icmp eq i8 %v3_10418, 58
  store i1 %v8_10420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10420, label %dec_label_pc_10480, label %dec_label_pc_10428

dec_label_pc_10428:                               ; preds = %bb403
  %v2_10428 = icmp ugt i8 %v3_10418, 35
  store i1 %v2_10428, i1* %cpsr_c.global-to-local, align 1
  %v7_10428 = icmp eq i8 %v3_10418, 36
  store i1 %v7_10428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10428, label %dec_label_pc_10480, label %dec_label_pc_10430

dec_label_pc_10430:                               ; preds = %dec_label_pc_10428
  %v2_10430 = icmp ugt i8 %v3_10418, 34
  store i1 %v2_10430, i1* %cpsr_c.global-to-local, align 1
  %v7_10430 = icmp eq i8 %v3_10418, 35
  store i1 %v7_10430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10430, label %dec_label_pc_10480, label %dec_label_pc_10438

dec_label_pc_10438:                               ; preds = %dec_label_pc_10430
  %v2_10438 = icmp ugt i8 %v3_10418, 36
  store i1 %v2_10438, i1* %cpsr_c.global-to-local, align 1
  %v7_10438 = icmp eq i8 %v3_10418, 37
  store i1 %v7_10438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10438, label %dec_label_pc_10480, label %dec_label_pc_10468.preheader

dec_label_pc_10468.preheader:                     ; preds = %dec_label_pc_10438
  %v3_1043c = add i32 %v0_10040, 28
  %v2_10440 = add i32 %v3_1043c, %v3_10404
  store i32 %v2_10440, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10468

dec_label_pc_1044c:                               ; preds = %bb404
  %v2_1044c = icmp ugt i8 %v3_10470, 35
  store i1 %v2_1044c, i1* %cpsr_c.global-to-local, align 1
  %v7_1044c = icmp eq i8 %v3_10470, 36
  store i1 %v7_1044c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1044c, label %dec_label_pc_10480, label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_1044c
  %v2_10454 = icmp ugt i8 %v3_10470, 34
  store i1 %v2_10454, i1* %cpsr_c.global-to-local, align 1
  %v7_10454 = icmp eq i8 %v3_10470, 35
  store i1 %v7_10454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10454, label %dec_label_pc_10480, label %dec_label_pc_1045c

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10454
  %v2_1045c = icmp ugt i8 %v3_10470, 36
  store i1 %v2_1045c, i1* %cpsr_c.global-to-local, align 1
  %v7_1045c = icmp eq i8 %v3_10470, 37
  store i1 %v7_1045c, i1* %cpsr_z.global-to-local, align 1
  %v1_10460 = add i32 %v0_10460, -1
  store i32 %v1_10460, i32* %r3.global-to-local, align 4
  br i1 %v7_1045c, label %dec_label_pc_10480, label %dec_label_pc_10468

dec_label_pc_10468:                               ; preds = %dec_label_pc_10468.preheader, %dec_label_pc_1045c
  %v0_10460 = phi i32 [ %v2_10440, %dec_label_pc_10468.preheader ], [ %v1_10460, %dec_label_pc_1045c ]
  %v0_10468 = phi i32 [ %v1_10408, %dec_label_pc_10468.preheader ], [ %v1_10468, %dec_label_pc_1045c ]
  %v1_10468 = add i32 %v0_10468, -1
  store i32 %v1_10468, i32* %r1.global-to-local, align 4
  %v2_10468 = icmp ne i32 %v0_10468, 0
  store i1 %v2_10468, i1* %cpsr_c.global-to-local, align 1
  %v7_10468 = icmp eq i32 %v0_10468, 1
  store i1 %v7_10468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10468, label %dec_label_pc_ffc4.backedge.thread528, label %dec_label_pc_10470

dec_label_pc_10470:                               ; preds = %dec_label_pc_10468
  %v1_10470 = add i32 %v0_10460, -2
  %v2_10470 = inttoptr i32 %v1_10470 to i8*
  %v3_10470 = load i8, i8* %v2_10470, align 1
  %v4_10470 = zext i8 %v3_10470 to i32
  store i32 %v4_10470, i32* %r2.global-to-local, align 4
  %v2_10474 = icmp ugt i8 %v3_10470, 61
  store i1 %v2_10474, i1* %cpsr_c.global-to-local, align 1
  %v7_10474 = icmp eq i8 %v3_10470, 62
  store i1 %v7_10474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10474, label %dec_label_pc_10480, label %bb404

bb404:                                            ; preds = %dec_label_pc_10470
  %v3_10478 = icmp ugt i8 %v3_10470, 57
  store i1 %v3_10478, i1* %cpsr_c.global-to-local, align 1
  %v8_10478 = icmp eq i8 %v3_10470, 58
  store i1 %v8_10478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10478, label %dec_label_pc_10480, label %dec_label_pc_1044c

dec_label_pc_10480:                               ; preds = %dec_label_pc_10470, %bb404, %dec_label_pc_1045c, %dec_label_pc_10454, %dec_label_pc_1044c, %dec_label_pc_10438, %dec_label_pc_10414, %dec_label_pc_10430, %dec_label_pc_10428, %bb403
  %v0_10484 = phi i32 [ %v1_10408, %dec_label_pc_10438 ], [ %v1_10408, %dec_label_pc_10414 ], [ %v1_10408, %dec_label_pc_10430 ], [ %v1_10408, %dec_label_pc_10428 ], [ %v1_10408, %bb403 ], [ %v1_10468, %dec_label_pc_1044c ], [ %v1_10468, %dec_label_pc_10454 ], [ %v1_10468, %dec_label_pc_1045c ], [ %v1_10468, %bb404 ], [ %v1_10468, %dec_label_pc_10470 ]
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10484 = add i32 %v0_10484, 1
  store i32 %v1_10484, i32* @r7, align 4
  %v1_10488 = call i32 @function_10e40(i32 27)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10498 = call i32 @function_10d7c(i32 27, i32* nonnull %stack_var_-60)
  store i32 %v3_10498, i32* %r0.global-to-local, align 4
  %v3_1049c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1049c, i32* %r2.global-to-local, align 4
  store i32 %v3_10498, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104a8 = load i32, i32* @r5, align 4
  %v1_104a8 = add i32 %v0_104a8, 4
  %v2_104a8 = inttoptr i32 %v1_104a8 to i32*
  %v3_104a8 = load i32, i32* %v2_104a8, align 4
  store i32 %v3_104a8, i32* %r0.global-to-local, align 4
  %v4_104ac = call i32 @function_12c18(i32 %v3_104a8, i32 %v3_10498, i32 %v3_1049c, i32 16384)
  store i32 %v4_104ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104bc = load i32, i32* @r5, align 4
  %v1_104bc = add i32 %v0_104bc, 4
  %v2_104bc = inttoptr i32 %v1_104bc to i32*
  %v3_104bc = load i32, i32* %v2_104bc, align 4
  store i32 %v3_104bc, i32* %r0.global-to-local, align 4
  %v4_104c0 = call i32 @function_12c18(i32 %v3_104bc, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_104c8 = call i32 @function_10da0(i32 27)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_104d0 = load i32, i32* @r5, align 4
  %v2_104d0 = add i32 %v1_104d0, 12
  %v3_104d0 = inttoptr i32 %v2_104d0 to i32*
  store i32 9, i32* %v3_104d0, align 4
  br label %dec_label_pc_10160

dec_label_pc_104d8:                               ; preds = %dec_label_pc_10040
  %v1_104d8 = add i32 %v0_10040, 24
  %v2_104d8 = inttoptr i32 %v1_104d8 to i32*
  %v3_104d8 = load i32, i32* %v2_104d8, align 4
  store i32 %v3_104d8, i32* %r2.global-to-local, align 4
  %v1_104dc = add i32 %v3_104d8, -1
  store i32 %v1_104dc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104e0 = icmp eq i32 %v1_104dc, 0
  store i1 %v2_104e0, i1* %cpsr_z.global-to-local, align 1
  %tmp405 = icmp slt i32 %v1_104dc, 1
  br i1 %tmp405, label %dec_label_pc_ffc4.backedge.thread, label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104d8
  %v2_104e8 = add i32 %v1_104dc, %v0_10040
  store i32 %v2_104e8, i32* %r3.global-to-local, align 4
  %v1_104ec = add i32 %v2_104e8, 28
  %v2_104ec = inttoptr i32 %v1_104ec to i8*
  %v3_104ec = load i8, i8* %v2_104ec, align 1
  %v4_104ec = zext i8 %v3_104ec to i32
  store i32 %v4_104ec, i32* %r3.global-to-local, align 4
  %v2_104f0 = icmp ugt i8 %v3_104ec, 61
  store i1 %v2_104f0, i1* %cpsr_c.global-to-local, align 1
  %v7_104f0 = icmp eq i8 %v3_104ec, 62
  store i1 %v7_104f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104f0, label %dec_label_pc_10614, label %bb406

bb406:                                            ; preds = %dec_label_pc_104e8
  %v3_104f4 = icmp ugt i8 %v3_104ec, 57
  store i1 %v3_104f4, i1* %cpsr_c.global-to-local, align 1
  %v8_104f4 = icmp eq i8 %v3_104ec, 58
  store i1 %v8_104f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_104f4, label %dec_label_pc_10614, label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %bb406
  %v2_104fc = icmp ugt i8 %v3_104ec, 35
  store i1 %v2_104fc, i1* %cpsr_c.global-to-local, align 1
  %v7_104fc = icmp eq i8 %v3_104ec, 36
  store i1 %v7_104fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104fc, label %dec_label_pc_10614, label %dec_label_pc_10504

dec_label_pc_10504:                               ; preds = %dec_label_pc_104fc
  %v2_10504 = icmp ugt i8 %v3_104ec, 34
  store i1 %v2_10504, i1* %cpsr_c.global-to-local, align 1
  %v7_10504 = icmp eq i8 %v3_104ec, 35
  store i1 %v7_10504, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10504, label %dec_label_pc_10614, label %dec_label_pc_1050c

dec_label_pc_1050c:                               ; preds = %dec_label_pc_10504
  %v2_1050c = icmp ugt i8 %v3_104ec, 36
  store i1 %v2_1050c, i1* %cpsr_c.global-to-local, align 1
  %v7_1050c = icmp eq i8 %v3_104ec, 37
  store i1 %v7_1050c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1050c, label %dec_label_pc_10614, label %dec_label_pc_105fc.preheader

dec_label_pc_105fc.preheader:                     ; preds = %dec_label_pc_1050c
  %v3_10510 = add i32 %v0_10040, 28
  %v2_10514 = add i32 %v3_10510, %v3_104d8
  store i32 %v2_10514, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105e0:                               ; preds = %bb407
  %v2_105e0 = icmp ugt i8 %v3_10604, 35
  store i1 %v2_105e0, i1* %cpsr_c.global-to-local, align 1
  %v7_105e0 = icmp eq i8 %v3_10604, 36
  store i1 %v7_105e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e0, label %dec_label_pc_10614, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105e0
  %v2_105e8 = icmp ugt i8 %v3_10604, 34
  store i1 %v2_105e8, i1* %cpsr_c.global-to-local, align 1
  %v7_105e8 = icmp eq i8 %v3_10604, 35
  store i1 %v7_105e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e8, label %dec_label_pc_10614, label %dec_label_pc_105f0

dec_label_pc_105f0:                               ; preds = %dec_label_pc_105e8
  %v2_105f0 = icmp ugt i8 %v3_10604, 36
  store i1 %v2_105f0, i1* %cpsr_c.global-to-local, align 1
  %v7_105f0 = icmp eq i8 %v3_10604, 37
  store i1 %v7_105f0, i1* %cpsr_z.global-to-local, align 1
  %v1_105f4 = add i32 %v0_105f4, -1
  store i32 %v1_105f4, i32* %r3.global-to-local, align 4
  br i1 %v7_105f0, label %dec_label_pc_10614, label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105fc.preheader, %dec_label_pc_105f0
  %v0_105f4 = phi i32 [ %v2_10514, %dec_label_pc_105fc.preheader ], [ %v1_105f4, %dec_label_pc_105f0 ]
  %v0_105fc = phi i32 [ %v1_104dc, %dec_label_pc_105fc.preheader ], [ %v1_105fc, %dec_label_pc_105f0 ]
  %v1_105fc = add i32 %v0_105fc, -1
  store i32 %v1_105fc, i32* %r1.global-to-local, align 4
  %v2_105fc = icmp ne i32 %v0_105fc, 0
  store i1 %v2_105fc, i1* %cpsr_c.global-to-local, align 1
  %v7_105fc = icmp eq i32 %v0_105fc, 1
  store i1 %v7_105fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105fc, label %dec_label_pc_ffc4.backedge.thread528, label %dec_label_pc_10604

dec_label_pc_10604:                               ; preds = %dec_label_pc_105fc
  %v1_10604 = add i32 %v0_105f4, -2
  %v2_10604 = inttoptr i32 %v1_10604 to i8*
  %v3_10604 = load i8, i8* %v2_10604, align 1
  %v4_10604 = zext i8 %v3_10604 to i32
  store i32 %v4_10604, i32* %r2.global-to-local, align 4
  %v2_10608 = icmp ugt i8 %v3_10604, 61
  store i1 %v2_10608, i1* %cpsr_c.global-to-local, align 1
  %v7_10608 = icmp eq i8 %v3_10604, 62
  store i1 %v7_10608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10608, label %dec_label_pc_10614, label %bb407

bb407:                                            ; preds = %dec_label_pc_10604
  %v3_1060c = icmp ugt i8 %v3_10604, 57
  store i1 %v3_1060c, i1* %cpsr_c.global-to-local, align 1
  %v8_1060c = icmp eq i8 %v3_10604, 58
  store i1 %v8_1060c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1060c, label %dec_label_pc_10614, label %dec_label_pc_105e0

dec_label_pc_10614:                               ; preds = %dec_label_pc_10604, %bb407, %dec_label_pc_105f0, %dec_label_pc_105e8, %dec_label_pc_105e0, %dec_label_pc_1050c, %dec_label_pc_104e8, %dec_label_pc_10504, %dec_label_pc_104fc, %bb406
  %v0_10618 = phi i32 [ %v1_104dc, %dec_label_pc_1050c ], [ %v1_104dc, %dec_label_pc_104e8 ], [ %v1_104dc, %dec_label_pc_10504 ], [ %v1_104dc, %dec_label_pc_104fc ], [ %v1_104dc, %bb406 ], [ %v1_105fc, %dec_label_pc_105e0 ], [ %v1_105fc, %dec_label_pc_105e8 ], [ %v1_105fc, %dec_label_pc_105f0 ], [ %v1_105fc, %bb407 ], [ %v1_105fc, %dec_label_pc_10604 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10618 = add i32 %v0_10618, 1
  store i32 %v1_10618, i32* @r7, align 4
  %v1_1061c = call i32 @function_10e40(i32 25)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_1062c = call i32 @function_10d7c(i32 25, i32* nonnull %stack_var_-60)
  store i32 %v3_1062c, i32* %r0.global-to-local, align 4
  %v3_10630 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10630, i32* %r2.global-to-local, align 4
  store i32 %v3_1062c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1063c = load i32, i32* @r5, align 4
  %v1_1063c = add i32 %v0_1063c, 4
  %v2_1063c = inttoptr i32 %v1_1063c to i32*
  %v3_1063c = load i32, i32* %v2_1063c, align 4
  store i32 %v3_1063c, i32* %r0.global-to-local, align 4
  %v4_10640 = call i32 @function_12c18(i32 %v3_1063c, i32 %v3_1062c, i32 %v3_10630, i32 16384)
  store i32 %v4_10640, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10650 = load i32, i32* @r5, align 4
  %v1_10650 = add i32 %v0_10650, 4
  %v2_10650 = inttoptr i32 %v1_10650 to i32*
  %v3_10650 = load i32, i32* %v2_10650, align 4
  store i32 %v3_10650, i32* %r0.global-to-local, align 4
  %v4_10654 = call i32 @function_12c18(i32 %v3_10650, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1065c = call i32 @function_10da0(i32 25)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10664 = load i32, i32* @r5, align 4
  %v2_10664 = add i32 %v1_10664, 12
  %v3_10664 = inttoptr i32 %v2_10664 to i32*
  store i32 6, i32* %v3_10664, align 4
  br label %dec_label_pc_10160

dec_label_pc_1066c:                               ; preds = %dec_label_pc_10040
  %v1_1066c = add i32 %v0_10040, 24
  %v2_1066c = inttoptr i32 %v1_1066c to i32*
  %v3_1066c = load i32, i32* %v2_1066c, align 4
  store i32 %v3_1066c, i32* %r2.global-to-local, align 4
  %v1_10670 = add i32 %v3_1066c, -1
  store i32 %v1_10670, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10674 = icmp eq i32 %v1_10670, 0
  store i1 %v2_10674, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v1_10670, 1
  br i1 %tmp408, label %dec_label_pc_106e8, label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_1066c
  %v2_1067c = add i32 %v1_10670, %v0_10040
  store i32 %v2_1067c, i32* %r3.global-to-local, align 4
  %v1_10680 = add i32 %v2_1067c, 28
  %v2_10680 = inttoptr i32 %v1_10680 to i8*
  %v3_10680 = load i8, i8* %v2_10680, align 1
  %v4_10680 = zext i8 %v3_10680 to i32
  store i32 %v4_10680, i32* %r3.global-to-local, align 4
  %v2_10684 = icmp ugt i8 %v3_10680, 61
  store i1 %v2_10684, i1* %cpsr_c.global-to-local, align 1
  %v7_10684 = icmp eq i8 %v3_10680, 62
  store i1 %v7_10684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10684, label %dec_label_pc_109a0, label %bb409

bb409:                                            ; preds = %dec_label_pc_1067c
  %v3_10688 = icmp ugt i8 %v3_10680, 57
  store i1 %v3_10688, i1* %cpsr_c.global-to-local, align 1
  %v8_10688 = icmp eq i8 %v3_10680, 58
  store i1 %v8_10688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10688, label %dec_label_pc_109a0, label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %bb409
  %v2_10690 = icmp ugt i8 %v3_10680, 35
  store i1 %v2_10690, i1* %cpsr_c.global-to-local, align 1
  %v7_10690 = icmp eq i8 %v3_10680, 36
  store i1 %v7_10690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10690, label %dec_label_pc_109a0, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v2_10698 = icmp ugt i8 %v3_10680, 34
  store i1 %v2_10698, i1* %cpsr_c.global-to-local, align 1
  %v7_10698 = icmp eq i8 %v3_10680, 35
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10698, label %dec_label_pc_109a0, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10698
  %v2_106a0 = icmp ugt i8 %v3_10680, 36
  store i1 %v2_106a0, i1* %cpsr_c.global-to-local, align 1
  %v7_106a0 = icmp eq i8 %v3_10680, 37
  store i1 %v7_106a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106a0, label %dec_label_pc_109a0, label %dec_label_pc_106e0.preheader

dec_label_pc_106e0.preheader:                     ; preds = %dec_label_pc_106a0
  %v3_106a4 = add i32 %v0_10040, 28
  %v2_106a8 = add i32 %v3_106a4, %v3_1066c
  store i32 %v2_106a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106e0

dec_label_pc_106b4:                               ; preds = %dec_label_pc_106e0
  %v1_106b4 = add i32 %v0_106d8, -2
  %v2_106b4 = inttoptr i32 %v1_106b4 to i8*
  %v3_106b4 = load i8, i8* %v2_106b4, align 1
  %v4_106b4 = zext i8 %v3_106b4 to i32
  store i32 %v4_106b4, i32* %r2.global-to-local, align 4
  %v2_106b8 = icmp ugt i8 %v3_106b4, 61
  store i1 %v2_106b8, i1* %cpsr_c.global-to-local, align 1
  %v7_106b8 = icmp eq i8 %v3_106b4, 62
  store i1 %v7_106b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106b8, label %dec_label_pc_109a0, label %bb410

bb410:                                            ; preds = %dec_label_pc_106b4
  %v3_106bc = icmp ugt i8 %v3_106b4, 57
  store i1 %v3_106bc, i1* %cpsr_c.global-to-local, align 1
  %v8_106bc = icmp eq i8 %v3_106b4, 58
  store i1 %v8_106bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106bc, label %dec_label_pc_109a0, label %dec_label_pc_106c4

dec_label_pc_106c4:                               ; preds = %bb410
  %v2_106c4 = icmp ugt i8 %v3_106b4, 35
  store i1 %v2_106c4, i1* %cpsr_c.global-to-local, align 1
  %v7_106c4 = icmp eq i8 %v3_106b4, 36
  store i1 %v7_106c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106c4, label %dec_label_pc_109a0, label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106c4
  %v2_106cc = icmp ugt i8 %v3_106b4, 34
  store i1 %v2_106cc, i1* %cpsr_c.global-to-local, align 1
  %v7_106cc = icmp eq i8 %v3_106b4, 35
  store i1 %v7_106cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106cc, label %dec_label_pc_109a0, label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_106cc
  %v2_106d4 = icmp ugt i8 %v3_106b4, 36
  store i1 %v2_106d4, i1* %cpsr_c.global-to-local, align 1
  %v7_106d4 = icmp eq i8 %v3_106b4, 37
  store i1 %v7_106d4, i1* %cpsr_z.global-to-local, align 1
  %v1_106d8 = add i32 %v0_106d8, -1
  store i32 %v1_106d8, i32* %r3.global-to-local, align 4
  br i1 %v7_106d4, label %dec_label_pc_109a0, label %dec_label_pc_106e0

dec_label_pc_106e0:                               ; preds = %dec_label_pc_106e0.preheader, %dec_label_pc_106d4
  %v0_106d8 = phi i32 [ %v2_106a8, %dec_label_pc_106e0.preheader ], [ %v1_106d8, %dec_label_pc_106d4 ]
  %v0_106e0 = phi i32 [ %v1_10670, %dec_label_pc_106e0.preheader ], [ %v1_106e0, %dec_label_pc_106d4 ]
  %v1_106e0 = add i32 %v0_106e0, -1
  store i32 %v1_106e0, i32* %r0.global-to-local, align 4
  %v2_106e0 = icmp ne i32 %v0_106e0, 0
  store i1 %v2_106e0, i1* %cpsr_c.global-to-local, align 1
  %v7_106e0 = icmp eq i32 %v0_106e0, 1
  store i1 %v7_106e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106e0, label %dec_label_pc_106e8, label %dec_label_pc_106b4

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106e0, %dec_label_pc_1066c
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_106ec = call i32 @function_10e40(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_106f4 = call i32 @function_10e40(i32 33)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_10704 = call i32 @function_10d7c(i32 32, i32* nonnull %stack_var_-60)
  store i32 %v3_10704, i32* @r4, align 4
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_10718 = call i32 @function_10d7c(i32 33, i32* %v2_10718)
  %v3_1071c = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_10718, 16777216
  %v1_10720 = sdiv i32 %sext, 16777216
  store i32 %v1_10720, i32* @r6, align 4
  %v0_10724 = load i32, i32* @r4, align 4
  store i32 %v0_10724, i32* %r2.global-to-local, align 4
  %v1_10728 = add i32 %v3_1071c, -1
  store i32 %v1_10728, i32* %r3.global-to-local, align 4
  %v0_1072c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1072c, i32* %r0.global-to-local, align 4
  %v0_10730 = load i32, i32* @r5, align 4
  %v1_10730 = add i32 %v0_10730, 24
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* %r1.global-to-local, align 4
  %v4_10734 = call i32 @function_1191c(i32 %v0_1072c, i32 %v3_10730, i32 %v0_10724, i32 %v1_10728)
  store i32 %v4_10734, i32* %r0.global-to-local, align 4
  %v2_10738 = icmp eq i32 %v4_10734, -1
  store i1 %v2_10738, i1* %cpsr_c.global-to-local, align 1
  %v7_10738 = icmp eq i32 %v4_10734, -1
  store i1 %v7_10738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10738, label %dec_label_pc_10adc, label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_10adc, %dec_label_pc_106e8
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1074c = call i32 @function_10da0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10754 = call i32 @function_10da0(i32 33)
  store i32 %v1_10754, i32* %r0.global-to-local, align 4
  %v0_10758 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10758 = icmp eq i32 %v0_10758, 0
  store i1 %v2_10758, i1* %cpsr_z.global-to-local, align 1
  %tmp411 = icmp slt i32 %v0_10758, 1
  br i1 %tmp411, label %dec_label_pc_1084c, label %dec_label_pc_10748.dec_label_pc_109a4_crit_edge

dec_label_pc_10748.dec_label_pc_109a4_crit_edge:  ; preds = %dec_label_pc_10748
  %v0_109a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_109a4

dec_label_pc_10764:                               ; preds = %dec_label_pc_10040
  %v1_10764 = add i32 %v0_10040, 24
  %v2_10764 = inttoptr i32 %v1_10764 to i32*
  %v3_10764 = load i32, i32* %v2_10764, align 4
  store i32 %v3_10764, i32* %r2.global-to-local, align 4
  %v1_10768 = add i32 %v3_10764, -1
  store i32 %v1_10768, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1076c = icmp eq i32 %v1_10768, 0
  store i1 %v2_1076c, i1* %cpsr_z.global-to-local, align 1
  %tmp412 = icmp slt i32 %v1_10768, 1
  br i1 %tmp412, label %dec_label_pc_107d0, label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_10764
  %v2_10774 = add i32 %v1_10768, %v0_10040
  store i32 %v2_10774, i32* %r3.global-to-local, align 4
  %v1_10778 = add i32 %v2_10774, 28
  %v2_10778 = inttoptr i32 %v1_10778 to i8*
  %v3_10778 = load i8, i8* %v2_10778, align 1
  %v4_10778 = zext i8 %v3_10778 to i32
  store i32 %v4_10778, i32* %r3.global-to-local, align 4
  %v2_1077c = icmp ugt i8 %v3_10778, 61
  store i1 %v2_1077c, i1* %cpsr_c.global-to-local, align 1
  %v7_1077c = icmp eq i8 %v3_10778, 62
  store i1 %v7_1077c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1077c, label %dec_label_pc_10998, label %bb413

bb413:                                            ; preds = %dec_label_pc_10774
  %v3_10780 = icmp ugt i8 %v3_10778, 57
  store i1 %v3_10780, i1* %cpsr_c.global-to-local, align 1
  %v8_10780 = icmp eq i8 %v3_10778, 58
  store i1 %v8_10780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10780, label %dec_label_pc_10998, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %bb413
  %v2_10788 = icmp ugt i8 %v3_10778, 35
  store i1 %v2_10788, i1* %cpsr_c.global-to-local, align 1
  %v7_10788 = icmp eq i8 %v3_10778, 36
  store i1 %v7_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10788, label %dec_label_pc_10998, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10788
  %v2_10790 = icmp ugt i8 %v3_10778, 34
  store i1 %v2_10790, i1* %cpsr_c.global-to-local, align 1
  %v7_10790 = icmp eq i8 %v3_10778, 35
  store i1 %v7_10790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10790, label %dec_label_pc_10998, label %dec_label_pc_107c8.preheader

dec_label_pc_107c8.preheader:                     ; preds = %dec_label_pc_10790
  %v3_10794 = add i32 %v0_10040, 28
  %v2_10798 = add i32 %v3_10794, %v3_10764
  store i32 %v2_10798, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_107c8

dec_label_pc_107a4:                               ; preds = %dec_label_pc_107c8
  %v1_107a4 = add i32 %v0_107c0, -2
  %v2_107a4 = inttoptr i32 %v1_107a4 to i8*
  %v3_107a4 = load i8, i8* %v2_107a4, align 1
  %v4_107a4 = zext i8 %v3_107a4 to i32
  store i32 %v4_107a4, i32* %r2.global-to-local, align 4
  %v2_107a8 = icmp ugt i8 %v3_107a4, 61
  store i1 %v2_107a8, i1* %cpsr_c.global-to-local, align 1
  %v7_107a8 = icmp eq i8 %v3_107a4, 62
  store i1 %v7_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a8, label %dec_label_pc_10998, label %bb414

bb414:                                            ; preds = %dec_label_pc_107a4
  %v3_107ac = icmp ugt i8 %v3_107a4, 57
  store i1 %v3_107ac, i1* %cpsr_c.global-to-local, align 1
  %v8_107ac = icmp eq i8 %v3_107a4, 58
  store i1 %v8_107ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_107ac, label %dec_label_pc_10998, label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %bb414
  %v2_107b4 = icmp ugt i8 %v3_107a4, 35
  store i1 %v2_107b4, i1* %cpsr_c.global-to-local, align 1
  %v7_107b4 = icmp eq i8 %v3_107a4, 36
  store i1 %v7_107b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107b4, label %dec_label_pc_10998, label %dec_label_pc_107bc

dec_label_pc_107bc:                               ; preds = %dec_label_pc_107b4
  %v2_107bc = icmp ugt i8 %v3_107a4, 34
  store i1 %v2_107bc, i1* %cpsr_c.global-to-local, align 1
  %v7_107bc = icmp eq i8 %v3_107a4, 35
  store i1 %v7_107bc, i1* %cpsr_z.global-to-local, align 1
  %v1_107c0 = add i32 %v0_107c0, -1
  store i32 %v1_107c0, i32* %r3.global-to-local, align 4
  br i1 %v7_107bc, label %dec_label_pc_10998, label %dec_label_pc_107c8

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107c8.preheader, %dec_label_pc_107bc
  %v0_107c0 = phi i32 [ %v2_10798, %dec_label_pc_107c8.preheader ], [ %v1_107c0, %dec_label_pc_107bc ]
  %v0_107c8 = phi i32 [ %v1_10768, %dec_label_pc_107c8.preheader ], [ %v1_107c8, %dec_label_pc_107bc ]
  %v1_107c8 = add i32 %v0_107c8, -1
  store i32 %v1_107c8, i32* %r0.global-to-local, align 4
  %v2_107c8 = icmp ne i32 %v0_107c8, 0
  store i1 %v2_107c8, i1* %cpsr_c.global-to-local, align 1
  %v7_107c8 = icmp eq i32 %v0_107c8, 1
  store i1 %v7_107c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107c8, label %dec_label_pc_107d0, label %dec_label_pc_107a4

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107c8, %dec_label_pc_10764
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_107d4 = call i32 @function_10e40(i32 31)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_107e4 = call i32 @function_10d7c(i32 31, i32* %v2_10718)
  %v3_107e8 = load i8, i8* %stack_var_-56, align 1
  %v4_107e8 = sext i8 %v3_107e8 to i32
  store i32 %v3_107e4, i32* %r2.global-to-local, align 4
  %v1_107f0 = add nsw i32 %v4_107e8, -1
  store i32 %v1_107f0, i32* %r3.global-to-local, align 4
  %v0_107f4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_107f4, i32* %r0.global-to-local, align 4
  %v0_107f8 = load i32, i32* @r5, align 4
  %v1_107f8 = add i32 %v0_107f8, 24
  %v2_107f8 = inttoptr i32 %v1_107f8 to i32*
  %v3_107f8 = load i32, i32* %v2_107f8, align 4
  store i32 %v3_107f8, i32* %r1.global-to-local, align 4
  %v4_107fc = call i32 @function_1191c(i32 %v0_107f4, i32 %v3_107f8, i32 %v3_107e4, i32 %v1_107f0)
  store i32 %v4_107fc, i32* %r0.global-to-local, align 4
  %v1_10800 = add i32 %v4_107fc, 1
  store i32 %v1_10800, i32* @r7, align 4
  %v2_10800 = icmp eq i32 %v4_107fc, -1
  store i1 %v2_10800, i1* %cpsr_c.global-to-local, align 1
  %v7_10800 = icmp eq i32 %v1_10800, 0
  store i1 %v7_10800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10800, label %thread-pre-split103, label %bb415

bb415:                                            ; preds = %dec_label_pc_107d0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split103

thread-pre-split103:                              ; preds = %dec_label_pc_107d0, %bb415
  %v0_10808 = phi i1 [ false, %bb415 ], [ true, %dec_label_pc_107d0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10808, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10c0c = call i32 @function_10da0(i32 31)
  store i32 %v1_10c0c, i32* %r0.global-to-local, align 4
  %v0_10c10 = load i32, i32* @r5, align 4
  br i1 %v0_10808, label %dec_label_pc_10c08, label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %thread-pre-split103, %dec_label_pc_10998
  %v0_10818 = phi i32 [ %v0_10040, %dec_label_pc_10998 ], [ %v0_10c10, %thread-pre-split103 ]
  %v1_10818 = inttoptr i32 %v0_10818 to i32*
  %v2_10818 = load i32, i32* %v1_10818, align 4
  store i32 %v2_10818, i32* %r3.global-to-local, align 4
  %v1_1081c = add i32 %v0_10818, 4
  %v2_1081c = inttoptr i32 %v1_1081c to i32*
  %v3_1081c = load i32, i32* %v2_1081c, align 4
  store i32 %v3_1081c, i32* %r0.global-to-local, align 4
  %v1_10820 = add i32 %v2_10818, 13
  %v2_10820 = inttoptr i32 %v1_10820 to i8*
  %v3_10820 = load i8, i8* %v2_10820, align 1
  %v4_10820 = zext i8 %v3_10820 to i32
  store i32 %v4_10820, i32* %r2.global-to-local, align 4
  %v1_10824 = add i32 %v2_10818, 4
  %v2_10824 = inttoptr i32 %v1_10824 to i32*
  %v3_10824 = load i32, i32* %v2_10824, align 4
  store i32 %v3_10824, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1082c = call i32 @function_12c18(i32 %v3_1081c, i32 %v3_10824, i32 %v4_10820, i32 16384)
  store i32 %v4_1082c, i32* %r0.global-to-local, align 4
  %v0_10830 = load i32, i32* @r5, align 4
  %v1_10830 = add i32 %v0_10830, 4
  %v2_10830 = inttoptr i32 %v1_10830 to i32*
  %v3_10830 = load i32, i32* %v2_10830, align 4
  store i32 %v3_10830, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_10840 = call i32 @function_12c18(i32 %v3_10830, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10848 = load i32, i32* @r5, align 4
  %v2_10848 = add i32 %v1_10848, 12
  %v3_10848 = inttoptr i32 %v2_10848 to i32*
  store i32 5, i32* %v3_10848, align 4
  br label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10918, %bb419, %dec_label_pc_10748, %dec_label_pc_10a28, %dec_label_pc_109a4, %dec_label_pc_10a6c, %dec_label_pc_10818
  %v0_1084c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1084c = icmp eq i32 %v0_1084c, 0
  store i1 %v2_1084c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1084c, label %dec_label_pc_ffc0.loopexit, label %dec_label_pc_10160

dec_label_pc_10858:                               ; preds = %dec_label_pc_10040
  %v1_10858 = add i32 %v0_10040, 24
  %v2_10858 = inttoptr i32 %v1_10858 to i32*
  %v3_10858 = load i32, i32* %v2_10858, align 4
  store i32 %v3_10858, i32* %r2.global-to-local, align 4
  %v0_1085c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1085c, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_10864146 = icmp eq i32 %v3_10858, 0
  store i1 %v3_10864146, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10864146, i1* %cpsr_z.global-to-local, align 1
  %v6_10868153 = icmp sgt i32 %v3_10858, 0
  br i1 %v6_10868153, label %dec_label_pc_1086c.preheader, label %dec_label_pc_10918

dec_label_pc_10864.loopexit:                      ; preds = %dec_label_pc_10888
  %v2_10890 = add i32 %v1_10890, 2
  store i32 %v2_10890, i32* @r4, align 4
  %v2_10894 = add i32 %v1_10894, 2
  store i32 %v2_10894, i32* @r7, align 4
  %v3_10864 = icmp uge i32 %v2_10894, %v1_10864
  store i1 %v3_10864, i1* %cpsr_c.global-to-local, align 1
  %v9_10864 = icmp eq i32 %v2_10894, %v1_10864
  store i1 %v9_10864, i1* %cpsr_z.global-to-local, align 1
  %v6_10868 = icmp slt i32 %v2_10894, %v1_10864
  br i1 %v6_10868, label %dec_label_pc_1086c.preheader, label %dec_label_pc_10918

dec_label_pc_1086c.preheader:                     ; preds = %dec_label_pc_10858, %dec_label_pc_10864.loopexit
  %v6_10920239 = phi i32 [ %v6_10920240, %dec_label_pc_10864.loopexit ], [ %v0_10040, %dec_label_pc_10858 ]
  %v1_10894222 = phi i32 [ %v2_10894, %dec_label_pc_10864.loopexit ], [ 0, %dec_label_pc_10858 ]
  %v1_10878220 = phi i32 [ %v1_10864, %dec_label_pc_10864.loopexit ], [ %v3_10858, %dec_label_pc_10858 ]
  %v0_1086c218 = phi i32 [ %v2_10890, %dec_label_pc_10864.loopexit ], [ %v0_1085c, %dec_label_pc_10858 ]
  br label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_1086c.preheader, %dec_label_pc_108fc
  %v6_10920240 = phi i32 [ %v6_10920239, %dec_label_pc_1086c.preheader ], [ %v0_10904, %dec_label_pc_108fc ]
  %v1_10894 = phi i32 [ %v1_10894222, %dec_label_pc_1086c.preheader ], [ %v1_10908, %dec_label_pc_108fc ]
  %v1_10864 = phi i32 [ %v1_10878220, %dec_label_pc_1086c.preheader ], [ %v3_10904, %dec_label_pc_108fc ]
  %v1_10890 = phi i32 [ %v0_1086c218, %dec_label_pc_1086c.preheader ], [ %v1_10910, %dec_label_pc_108fc ]
  %v1_1086c = inttoptr i32 %v1_10890 to i8*
  %v2_1086c = load i8, i8* %v1_1086c, align 1
  %v3_1086c = zext i8 %v2_1086c to i32
  store i32 %v3_1086c, i32* @r3, align 4
  %v2_10870 = icmp eq i8 %v2_1086c, -1
  store i1 %v2_10870, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10870, label %dec_label_pc_10878, label %dec_label_pc_10918

dec_label_pc_10878:                               ; preds = %dec_label_pc_1086c
  %v0_10878 = load i32, i32* %sl.global-to-local, align 4
  %v2_10878 = add i32 %v0_10878, %v1_10864
  store i32 %v2_10878, i32* %r1.global-to-local, align 4
  %v1_1087c = add i32 %v1_10890, 1
  store i32 %v1_1087c, i32* @r6, align 4
  %v3_10880 = icmp uge i32 %v2_10878, %v1_1087c
  store i1 %v3_10880, i1* %cpsr_c.global-to-local, align 1
  %v9_10880 = icmp eq i32 %v2_10878, %v1_1087c
  store i1 %v9_10880, i1* %cpsr_z.global-to-local, align 1
  %v2_10884 = xor i1 %v3_10880, true
  %v3_10884 = or i1 %v9_10880, %v2_10884
  br i1 %v3_10884, label %dec_label_pc_10918, label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10878
  %v2_10888 = inttoptr i32 %v1_1087c to i8*
  %v3_10888 = load i8, i8* %v2_10888, align 1
  %v4_10888 = zext i8 %v3_10888 to i32
  store i32 %v4_10888, i32* @r3, align 4
  %v2_1088c = icmp eq i8 %v3_10888, -1
  store i1 %v2_1088c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1088c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1088c, label %dec_label_pc_10864.loopexit, label %dec_label_pc_1089c

dec_label_pc_1089c:                               ; preds = %dec_label_pc_10888
  %v2_1089c = icmp ugt i8 %v3_10888, -4
  store i1 %v2_1089c, i1* %cpsr_c.global-to-local, align 1
  %v7_1089c = icmp eq i8 %v3_10888, -3
  store i1 %v7_1089c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1089c, label %dec_label_pc_10928, label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_1089c
  %v1_108a4 = add i32 %v1_10890, 2
  store i32 %v1_108a4, i32* @r3, align 4
  %v3_108a8 = icmp uge i32 %v2_10878, %v1_108a4
  store i1 %v3_108a8, i1* %cpsr_c.global-to-local, align 1
  %v9_108a8 = icmp eq i32 %v2_10878, %v1_108a4
  store i1 %v9_108a8, i1* %cpsr_z.global-to-local, align 1
  %v2_108ac = xor i1 %v3_108a8, true
  %v3_108ac = or i1 %v9_108a8, %v2_108ac
  br i1 %v3_108ac, label %dec_label_pc_10918, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_10988, %bb420, %.thread115, %dec_label_pc_108a4
  %v0_108b0 = load i32, i32* @r6, align 4
  %v1_108b0 = inttoptr i32 %v0_108b0 to i8*
  %v2_108b0 = load i8, i8* %v1_108b0, align 1
  %v3_108b0 = zext i8 %v2_108b0 to i32
  store i32 %v3_108b0, i32* %r3.global-to-local, align 4
  %v2_108b4 = icmp ugt i8 %v2_108b0, -4
  store i1 %v2_108b4, i1* %cpsr_c.global-to-local, align 1
  %v7_108b4 = icmp eq i8 %v2_108b0, -3
  store i1 %v7_108b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b4, label %.thread107, label %dec_label_pc_108c4

.thread107:                                       ; preds = %dec_label_pc_108b0
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_108b0, align 1
  %v0_108c0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108c0.pr.pr, label %.thread110, label %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge

.thread107.dec_label_pc_108c4thread-pre-split_crit_edge: ; preds = %.thread107
  %v0_108c4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_108b0, %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge
  %v0_108c4.pr = phi i32 [ %v0_108c4.pr.pre, %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge ], [ %v3_108b0, %dec_label_pc_108b0 ]
  %v2_108c4 = icmp ugt i32 %v0_108c4.pr, 250
  store i1 %v2_108c4, i1* %cpsr_c.global-to-local, align 1
  %v7_108c4 = icmp eq i32 %v0_108c4.pr, 251
  store i1 %v7_108c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c4, label %bb416, label %.thread110

bb416:                                            ; preds = %dec_label_pc_108c4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_108cc = load i32, i32* @r6, align 4
  %v4_108cc = inttoptr i32 %v3_108cc to i8*
  store i8 -3, i8* %v4_108cc, align 1
  br label %.thread110

.thread110:                                       ; preds = %dec_label_pc_108c4, %.thread107, %bb416
  %v0_108d0 = load i32, i32* @r4, align 4
  %v1_108d0 = add i32 %v0_108d0, 2
  %v2_108d0 = inttoptr i32 %v1_108d0 to i8*
  %v3_108d0 = load i8, i8* %v2_108d0, align 1
  %v4_108d0 = zext i8 %v3_108d0 to i32
  store i32 %v4_108d0, i32* %r3.global-to-local, align 4
  %v2_108d4 = icmp ugt i8 %v3_108d0, -4
  store i1 %v2_108d4, i1* %cpsr_c.global-to-local, align 1
  %v7_108d4 = icmp eq i8 %v3_108d0, -3
  store i1 %v7_108d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d4, label %.thread111, label %dec_label_pc_108e4

.thread111:                                       ; preds = %.thread110
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_108d0, align 1
  %v0_108e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108e0.pr.pr, label %.thread114, label %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge

.thread111.dec_label_pc_108e4thread-pre-split_crit_edge: ; preds = %.thread111
  %v0_108e4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %.thread110, %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge
  %v0_108e4.pr = phi i32 [ %v0_108e4.pr.pre, %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge ], [ %v4_108d0, %.thread110 ]
  %v2_108e4 = icmp ugt i32 %v0_108e4.pr, 250
  store i1 %v2_108e4, i1* %cpsr_c.global-to-local, align 1
  %v7_108e4 = icmp eq i32 %v0_108e4.pr, 251
  store i1 %v7_108e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e4, label %bb417, label %.thread114

bb417:                                            ; preds = %dec_label_pc_108e4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_108ec = load i32, i32* @r4, align 4
  %v4_108ec = add i32 %v3_108ec, 2
  %v5_108ec = inttoptr i32 %v4_108ec to i8*
  store i8 -3, i8* %v5_108ec, align 1
  br label %.thread114

.thread114:                                       ; preds = %dec_label_pc_108e4, %.thread111, %bb417
  %v0_108f0 = load i32, i32* @r5, align 4
  %v1_108f0 = add i32 %v0_108f0, 4
  %v2_108f0 = inttoptr i32 %v1_108f0 to i32*
  %v3_108f0 = load i32, i32* %v2_108f0, align 4
  store i32 %v3_108f0, i32* %r0.global-to-local, align 4
  %v0_108f4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_10a84, %.thread114
  %v0_10900 = phi i32 [ %v3_10a9c, %dec_label_pc_10a84 ], [ %v3_108f0, %.thread114 ]
  %storemerge4 = phi i32 [ %v2_10948, %dec_label_pc_10a84 ], [ %v0_108f4, %.thread114 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10a84 ], [ 3, %.thread114 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_10900 = call i32 @function_12c18(i32 %v0_10900, i32 %storemerge4, i32 %storemerge, i32 16384)
  store i32 %v4_10900, i32* %r0.global-to-local, align 4
  %v0_10904 = load i32, i32* @r5, align 4
  %v1_10904 = add i32 %v0_10904, 24
  %v2_10904 = inttoptr i32 %v1_10904 to i32*
  %v3_10904 = load i32, i32* %v2_10904, align 4
  store i32 %v3_10904, i32* %r2.global-to-local, align 4
  %v0_10908 = load i32, i32* @r7, align 4
  %v1_10908 = add i32 %v0_10908, 3
  store i32 %v1_10908, i32* @r7, align 4
  %v3_1090c = icmp uge i32 %v1_10908, %v3_10904
  store i1 %v3_1090c, i1* %cpsr_c.global-to-local, align 1
  %v9_1090c = icmp eq i32 %v1_10908, %v3_10904
  store i1 %v9_1090c, i1* %cpsr_z.global-to-local, align 1
  %v0_10910 = load i32, i32* @r4, align 4
  %v1_10910 = add i32 %v0_10910, 3
  store i32 %v1_10910, i32* @r4, align 4
  %v5_10914 = icmp slt i32 %v1_10908, %v3_10904
  br i1 %v5_10914, label %dec_label_pc_1086c, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10864.loopexit, %dec_label_pc_1086c, %dec_label_pc_108fc, %dec_label_pc_108a4, %dec_label_pc_10878, %dec_label_pc_10858, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge
  %v6_10920 = phi i32 [ %v0_10954, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge ], [ %v0_10040, %dec_label_pc_10858 ], [ %v6_10920240, %dec_label_pc_1086c ], [ %v0_10904, %dec_label_pc_108fc ], [ %v6_10920240, %dec_label_pc_108a4 ], [ %v6_10920240, %dec_label_pc_10878 ], [ %v6_10920240, %dec_label_pc_10864.loopexit ]
  %v0_10918 = phi i32 [ %v0_10918.pre.pre, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge ], [ 0, %dec_label_pc_10858 ], [ %v1_10894, %dec_label_pc_1086c ], [ %v1_10908, %dec_label_pc_108fc ], [ %v1_10894, %dec_label_pc_108a4 ], [ %v1_10894, %dec_label_pc_10878 ], [ %v2_10894, %dec_label_pc_10864.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918 = icmp eq i32 %v0_10918, 0
  store i1 %v2_10918, i1* %cpsr_z.global-to-local, align 1
  %tmp418 = icmp slt i32 %v0_10918, 1
  br i1 %tmp418, label %dec_label_pc_1084c, label %bb419

bb419:                                            ; preds = %dec_label_pc_10918
  store i32 3, i32* %r0.global-to-local, align 4
  %v7_10920 = add i32 %v6_10920, 12
  %v8_10920 = inttoptr i32 %v7_10920 to i32*
  store i32 3, i32* %v8_10920, align 4
  br label %dec_label_pc_1084c

dec_label_pc_10928:                               ; preds = %dec_label_pc_1089c
  store i32 %v2_1092c, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_177fa.245 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_1092c, i32* @r0, align 4
  %v0_1093c = call i32 @function_129f0()
  store i32 9, i32* @r2, align 4
  store i32 %v2_10948, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_177f1.247 to i32), i32* @r1, align 4
  %v0_10950 = call i32 @function_129f0()
  store i32 %v0_10950, i32* %r0.global-to-local, align 4
  %v0_10954 = load i32, i32* @r5, align 4
  %v1_10954 = add i32 %v0_10954, 24
  %v2_10954 = inttoptr i32 %v1_10954 to i32*
  %v3_10954 = load i32, i32* %v2_10954, align 4
  %v0_10958 = load i32, i32* @r4, align 4
  %v1_10958 = add i32 %v0_10958, 2
  store i32 %v1_10958, i32* %r2.global-to-local, align 4
  %v0_1095c = load i32, i32* %sl.global-to-local, align 4
  %v2_1095c = add i32 %v0_1095c, %v3_10954
  store i32 %v2_1095c, i32* @r3, align 4
  %v3_10960 = icmp uge i32 %v2_1095c, %v1_10958
  store i1 %v3_10960, i1* %cpsr_c.global-to-local, align 1
  %v9_10960 = icmp eq i32 %v2_1095c, %v1_10958
  store i1 %v9_10960, i1* %cpsr_z.global-to-local, align 1
  %v2_10964 = xor i1 %v3_10960, true
  %v3_10964 = or i1 %v9_10960, %v2_10964
  br i1 %v3_10964, label %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge, label %dec_label_pc_10968

dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge: ; preds = %dec_label_pc_10928
  %v0_10918.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10918

dec_label_pc_10968:                               ; preds = %dec_label_pc_10928
  %v2_10968 = inttoptr i32 %v1_10958 to i8*
  %v3_10968 = load i8, i8* %v2_10968, align 1
  %v4_10968 = zext i8 %v3_10968 to i32
  store i32 %v4_10968, i32* %r3.global-to-local, align 4
  %v2_1096c = icmp ugt i8 %v3_10968, 30
  store i1 %v2_1096c, i1* %cpsr_c.global-to-local, align 1
  %v7_1096c = icmp eq i8 %v3_10968, 31
  store i1 %v7_1096c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1096c, label %dec_label_pc_10a84, label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_10968
  %v1_10974 = inttoptr i32 %v0_10958 to i8*
  %v2_10974 = load i8, i8* %v1_10974, align 1
  %v3_10974 = zext i8 %v2_10974 to i32
  store i32 %v3_10974, i32* %r3.global-to-local, align 4
  %v2_10978 = icmp ugt i8 %v2_10974, -4
  store i1 %v2_10978, i1* %cpsr_c.global-to-local, align 1
  %v7_10978 = icmp eq i8 %v2_10974, -3
  store i1 %v7_10978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10978, label %.thread115, label %dec_label_pc_10988

.thread115:                                       ; preds = %dec_label_pc_10974
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_10974, align 1
  %v0_10984.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10984.pr.pr, label %dec_label_pc_108b0, label %.thread115.dec_label_pc_10988thread-pre-split_crit_edge

.thread115.dec_label_pc_10988thread-pre-split_crit_edge: ; preds = %.thread115
  %v0_10988.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10988

dec_label_pc_10988:                               ; preds = %dec_label_pc_10974, %.thread115.dec_label_pc_10988thread-pre-split_crit_edge
  %v0_10988.pr = phi i32 [ %v0_10988.pr.pre, %.thread115.dec_label_pc_10988thread-pre-split_crit_edge ], [ %v3_10974, %dec_label_pc_10974 ]
  %v2_10988 = icmp ugt i32 %v0_10988.pr, 250
  store i1 %v2_10988, i1* %cpsr_c.global-to-local, align 1
  %v7_10988 = icmp eq i32 %v0_10988.pr, 251
  store i1 %v7_10988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10988, label %bb420, label %dec_label_pc_108b0

bb420:                                            ; preds = %dec_label_pc_10988
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10990 = load i32, i32* @r4, align 4
  %v4_10990 = inttoptr i32 %v3_10990 to i8*
  store i8 -3, i8* %v4_10990, align 1
  br label %dec_label_pc_108b0

dec_label_pc_10998:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_107bc, %dec_label_pc_107b4, %bb414, %dec_label_pc_10790, %dec_label_pc_10774, %dec_label_pc_10788, %bb413
  %v0_10998 = phi i32 [ %v1_10768, %dec_label_pc_10790 ], [ %v1_10768, %dec_label_pc_10774 ], [ %v1_10768, %dec_label_pc_10788 ], [ %v1_10768, %bb413 ], [ %v1_107c8, %bb414 ], [ %v1_107c8, %dec_label_pc_107b4 ], [ %v1_107c8, %dec_label_pc_107bc ], [ %v1_107c8, %dec_label_pc_107a4 ]
  %v1_10998 = add i32 %v0_10998, 1
  store i32 %v1_10998, i32* @r7, align 4
  br label %dec_label_pc_10818

dec_label_pc_109a0:                               ; preds = %dec_label_pc_106b4, %dec_label_pc_106d4, %dec_label_pc_106cc, %dec_label_pc_106c4, %bb410, %dec_label_pc_106a0, %dec_label_pc_1067c, %dec_label_pc_10698, %dec_label_pc_10690, %bb409
  %v0_109a0 = phi i32 [ %v1_10670, %dec_label_pc_106a0 ], [ %v1_10670, %dec_label_pc_1067c ], [ %v1_10670, %dec_label_pc_10698 ], [ %v1_10670, %dec_label_pc_10690 ], [ %v1_10670, %bb409 ], [ %v1_106e0, %bb410 ], [ %v1_106e0, %dec_label_pc_106c4 ], [ %v1_106e0, %dec_label_pc_106cc ], [ %v1_106e0, %dec_label_pc_106d4 ], [ %v1_106e0, %dec_label_pc_106b4 ]
  %v1_109a0 = add i32 %v0_109a0, 1
  store i32 %v1_109a0, i32* @r7, align 4
  br label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_10748.dec_label_pc_109a4_crit_edge, %dec_label_pc_109a0
  %v0_109a4 = phi i32 [ %v0_109a4.pre, %dec_label_pc_10748.dec_label_pc_109a4_crit_edge ], [ %v0_10040, %dec_label_pc_109a0 ]
  %v1_109a4 = inttoptr i32 %v0_109a4 to i32*
  %v2_109a4 = load i32, i32* %v1_109a4, align 4
  store i32 %v2_109a4, i32* %r3.global-to-local, align 4
  %v1_109a8 = add i32 %v0_109a4, 4
  %v2_109a8 = inttoptr i32 %v1_109a8 to i32*
  %v3_109a8 = load i32, i32* %v2_109a8, align 4
  store i32 %v3_109a8, i32* %r0.global-to-local, align 4
  %v1_109ac = add i32 %v2_109a4, 12
  %v2_109ac = inttoptr i32 %v1_109ac to i8*
  %v3_109ac = load i8, i8* %v2_109ac, align 1
  %v4_109ac = zext i8 %v3_109ac to i32
  store i32 %v4_109ac, i32* %r2.global-to-local, align 4
  %v1_109b0 = inttoptr i32 %v2_109a4 to i32*
  %v2_109b0 = load i32, i32* %v1_109b0, align 4
  store i32 %v2_109b0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_109b8 = call i32 @function_12c18(i32 %v3_109a8, i32 %v2_109b0, i32 %v4_109ac, i32 16384)
  store i32 %v4_109b8, i32* %r0.global-to-local, align 4
  %v0_109bc = load i32, i32* @r5, align 4
  %v1_109bc = add i32 %v0_109bc, 4
  %v2_109bc = inttoptr i32 %v1_109bc to i32*
  %v3_109bc = load i32, i32* %v2_109bc, align 4
  store i32 %v3_109bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_109cc = call i32 @function_12c18(i32 %v3_109bc, i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_109d4 = load i32, i32* @r5, align 4
  %v2_109d4 = add i32 %v1_109d4, 12
  %v3_109d4 = inttoptr i32 %v2_109d4 to i32*
  store i32 4, i32* %v3_109d4, align 4
  br label %dec_label_pc_1084c

dec_label_pc_109dc:                               ; preds = %dec_label_pc_100e4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_109e8 = call i32 @function_10e40(i32 29)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_109f8 = call i32 @function_10d7c(i32 29, i32* nonnull %v2_10718)
  store i32 %v3_109f8, i32* %r0.global-to-local, align 4
  %v3_109fc = load i8, i8* %stack_var_-56, align 1
  %v4_109fc = sext i8 %v3_109fc to i32
  store i32 %v3_109f8, i32* %r2.global-to-local, align 4
  %v1_10a04 = add nsw i32 %v4_109fc, -1
  store i32 %v1_10a04, i32* %r3.global-to-local, align 4
  %v0_10a08 = load i32, i32* @r5, align 4
  %v1_10a08 = add i32 %v0_10a08, 24
  %v2_10a08 = inttoptr i32 %v1_10a08 to i32*
  %v3_10a08 = load i32, i32* %v2_10a08, align 4
  store i32 %v3_10a08, i32* %r1.global-to-local, align 4
  %v0_10a0c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10a0c, i32* %r0.global-to-local, align 4
  %v4_10a10 = call i32 @function_1191c(i32 %v0_10a0c, i32 %v3_10a08, i32 %v3_109f8, i32 %v1_10a04)
  store i32 %v4_10a10, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_10a1c = call i32 @function_10da0(i32 29)
  store i32 %v1_10a1c, i32* @r0, align 4
  %v0_10a20 = load i32, i32* @r7, align 4
  %v2_10a20 = icmp eq i32 %v0_10a20, -1
  store i1 %v2_10a20, i1* %cpsr_c.global-to-local, align 1
  %v7_10a20 = icmp eq i32 %v0_10a20, -1
  store i1 %v7_10a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a20, label %dec_label_pc_ffc0.loopexit, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %dec_label_pc_109dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a28 = icmp eq i32 %v0_10a20, 0
  store i1 %v2_10a28, i1* %cpsr_z.global-to-local, align 1
  %tmp421 = icmp slt i32 %v0_10a20, 1
  br i1 %tmp421, label %dec_label_pc_1084c, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a28
  %v0_10a30 = load i32, i32* @r5, align 4
  %v1_10a30 = add i32 %v0_10a30, 20
  %v2_10a30 = inttoptr i32 %v1_10a30 to i16*
  %v3_10a30 = load i16, i16* %v2_10a30, align 2
  %v4_10a30 = zext i16 %v3_10a30 to i32
  store i32 %v4_10a30, i32* %r3.global-to-local, align 4
  %v1_10a34 = add i32 %v0_10a30, 16
  %v2_10a34 = inttoptr i32 %v1_10a34 to i32*
  %v3_10a34 = load i32, i32* %v2_10a34, align 4
  store i32 %v3_10a34, i32* %r2.global-to-local, align 4
  store i32 %v2_10a38, i32* @lr, align 4
  store i32 %v4_10a30, i32* %stack_var_-42, align 4
  store i32 %v3_10a34, i32* %stack_var_-60, align 4
  %v1_10a44 = inttoptr i32 %v0_10a30 to i32*
  %v2_10a44 = load i32, i32* %v1_10a44, align 4
  store i32 %v2_10a44, i32* %r8.global-to-local, align 4
  %v0_10a48 = call i32 @function_121b8()
  store i32 %v0_10a48, i32* %r0.global-to-local, align 4
  %v7_10a4c = icmp eq i32 %v0_10a48, -1
  %.432 = zext i1 %v7_10a4c to i32
  store i32 %.432, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a58 = icmp eq i32 %v0_10a48, 0
  store i1 %v2_10a58, i1* %cpsr_z.global-to-local, align 1
  %tmp424 = icmp slt i32 %v0_10a48, 1
  br i1 %tmp424, label %bb425, label %.thread121

.thread121:                                       ; preds = %dec_label_pc_10a30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10a6c

bb425:                                            ; preds = %dec_label_pc_10a30
  store i32 %.432, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a64 = icmp eq i1 %v7_10a4c, false
  store i1 %v2_10a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a64, label %dec_label_pc_10c18, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %.thread121, %bb425
  %v0_10a6c = load i32, i32* @r5, align 4
  %v1_10a6c = add i32 %v0_10a6c, 4
  %v2_10a6c = inttoptr i32 %v1_10a6c to i32*
  %v3_10a6c = load i32, i32* %v2_10a6c, align 4
  store i32 %v3_10a6c, i32* %r0.global-to-local, align 4
  %v1_10a70 = call i32 @function_124c8(i32 %v3_10a6c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10a78 = load i32, i32* @r4, align 4
  %v1_10a78 = load i32, i32* @r5, align 4
  %v2_10a78 = add i32 %v1_10a78, 4
  %v3_10a78 = inttoptr i32 %v2_10a78 to i32*
  store i32 %v0_10a78, i32* %v3_10a78, align 4
  %v0_10a7c = load i32, i32* %r0.global-to-local, align 4
  %v1_10a7c = load i32, i32* @r5, align 4
  %v2_10a7c = add i32 %v1_10a7c, 12
  %v3_10a7c = inttoptr i32 %v2_10a7c to i32*
  store i32 %v0_10a7c, i32* %v3_10a7c, align 4
  br label %dec_label_pc_1084c

dec_label_pc_10a84:                               ; preds = %dec_label_pc_10968
  store i32 %v2_1092c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10a90 = add i32 %v0_10954, 4
  %v2_10a90 = inttoptr i32 %v1_10a90 to i32*
  %v3_10a90 = load i32, i32* %v2_10a90, align 4
  store i32 %v3_10a90, i32* %r0.global-to-local, align 4
  %v4_10a94 = call i32 @function_12c18(i32 %v3_10a90, i32 %v2_1092c, i32 3, i32 16384)
  store i32 %v4_10a94, i32* %r0.global-to-local, align 4
  store i32 %v2_10940, i32* %r1.global-to-local, align 4
  %v0_10a9c = load i32, i32* @r5, align 4
  %v1_10a9c = add i32 %v0_10a9c, 4
  %v2_10a9c = inttoptr i32 %v1_10a9c to i32*
  %v3_10a9c = load i32, i32* %v2_10a9c, align 4
  store i32 %v3_10a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_108fc

dec_label_pc_10aac:                               ; preds = %dec_label_pc_ffcc
  store i32 %.pre, i32* @r0, align 4
  %v1_10ab4 = add i32 %v0_10aac, 92
  store i32 %v1_10ab4, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10abc = call i32 @function_129e0(i32 %.pre, i32 %v1_10ab4, i32 192)
  store i32 %v3_10abc, i32* %r0.global-to-local, align 4
  %v0_10ac0 = load i32, i32* @r5, align 4
  %v1_10ac0 = add i32 %v0_10ac0, 24
  %v2_10ac0 = inttoptr i32 %v1_10ac0 to i32*
  %v3_10ac0 = load i32, i32* %v2_10ac0, align 4
  %v1_10ac4 = add i32 %v3_10ac0, -64
  store i32 %v1_10ac4, i32* %r3.global-to-local, align 4
  store i32 %v1_10ac4, i32* %v2_10ac0, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10120
  %v0_10ad0 = load i32, i32* @r5, align 4
  store i32 %v0_10ad0, i32* @r0, align 4
  %v0_10ad4 = call i32 @function_f344()
  store i32 %v0_10ad4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1015c

dec_label_pc_10adc:                               ; preds = %dec_label_pc_106e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10adc = load i8, i8* %stack_var_-56, align 1
  %v4_10adc = sext i8 %v3_10adc to i32
  %v0_10ae0 = load i32, i32* @r6, align 4
  store i32 %v0_10ae0, i32* %r2.global-to-local, align 4
  %v1_10ae4 = add nsw i32 %v4_10adc, -1
  store i32 %v1_10ae4, i32* %r3.global-to-local, align 4
  %v0_10ae8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10ae8, i32* %r0.global-to-local, align 4
  %v0_10aec = load i32, i32* @r5, align 4
  %v1_10aec = add i32 %v0_10aec, 24
  %v2_10aec = inttoptr i32 %v1_10aec to i32*
  %v3_10aec = load i32, i32* %v2_10aec, align 4
  store i32 %v3_10aec, i32* %r1.global-to-local, align 4
  %v4_10af0 = call i32 @function_1191c(i32 %v0_10ae8, i32 %v3_10aec, i32 %v0_10ae0, i32 %v1_10ae4)
  store i32 %v4_10af0, i32* %r0.global-to-local, align 4
  %v1_10af4 = add i32 %v4_10af0, 1
  store i32 %v1_10af4, i32* @r7, align 4
  %v2_10af4 = icmp eq i32 %v4_10af0, -1
  store i1 %v2_10af4, i1* %cpsr_c.global-to-local, align 1
  %v7_10af4 = icmp eq i32 %v1_10af4, 0
  store i1 %v7_10af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10af4, label %dec_label_pc_10b04, label %dec_label_pc_10748

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10adc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10b08 = call i32 @function_10da0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10b10 = call i32 @function_10da0(i32 33)
  store i32 %v1_10b10, i32* %r0.global-to-local, align 4
  %v0_10b14 = load i32, i32* @r5, align 4
  %v1_10b14 = add i32 %v0_10b14, 12
  %v2_10b14 = inttoptr i32 %v1_10b14 to i32*
  %v3_10b14 = load i32, i32* %v2_10b14, align 4
  store i32 %v3_10b14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ffc4.backedge

dec_label_pc_ffc4.backedge.thread:                ; preds = %dec_label_pc_10188, %dec_label_pc_1025c, %dec_label_pc_10330, %dec_label_pc_10404, %dec_label_pc_104d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffcc

dec_label_pc_ffc4.backedge.thread528:             ; preds = %dec_label_pc_105fc, %dec_label_pc_10394, %dec_label_pc_102c0, %dec_label_pc_10468, %dec_label_pc_101ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffcc

dec_label_pc_ffc4.backedge:                       ; preds = %dec_label_pc_10040, %dec_label_pc_10b04, %dec_label_pc_10c08
  %v0_ffcc186 = phi i32 [ %v0_10c10, %dec_label_pc_10c08 ], [ %v0_10b14, %dec_label_pc_10b04 ], [ %v0_10040, %dec_label_pc_10040 ]
  %v0_ffc4.be = phi i32 [ %v3_10c10, %dec_label_pc_10c08 ], [ %v3_10b14, %dec_label_pc_10b04 ], [ %v3_10040, %dec_label_pc_10040 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc4 = icmp eq i32 %v0_ffc4.be, 0
  store i1 %v2_ffc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc4, label %dec_label_pc_100cc, label %dec_label_pc_ffcc

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_ff7c
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_10710, i32* %r3.global-to-local, align 4
  store i32 %v2_106fc, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  store i32 4, i32* %stack_var_-60, align 4
  %v5_10b48 = call i32 @function_12b2c(i32 %v3_ff70, i32 1, i32 4, i32 %v2_10710, i32 %v2_106fc)
  %v3_10b4c = load i8, i8* %stack_var_-56, align 1
  %v4_10b4c = sext i8 %v3_10b4c to i32
  store i32 %v4_10b4c, i32* %r3.global-to-local, align 4
  %v2_10b50 = or i32 %v4_10b4c, %v5_10b48
  store i32 %v2_10b50, i32* %r0.global-to-local, align 4
  %v4_10b50 = icmp eq i32 %v2_10b50, 0
  store i1 %v4_10b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10b50, label %dec_label_pc_10b58, label %dec_label_pc_10bec

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b1c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10b5c = load i32, i32* @r5, align 4
  %v2_10b5c = add i32 %v1_10b5c, 12
  %v3_10b5c = inttoptr i32 %v2_10b5c to i32*
  store i32 2, i32* %v3_10b5c, align 4
  %v0_10b60 = call i32 @function_f188()
  store i32 %v0_10b60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_203d0.151 to i32), i32* %r3.global-to-local, align 4
  %v2_10b68 = load i16, i16* bitcast (i16** @global_var_203d0.151 to i16*), align 4
  %v3_10b68 = zext i16 %v2_10b68 to i32
  store i32 %v3_10b68, i32* %r1.global-to-local, align 4
  %v3_10b6c = call i32 @function_11f50(i32 %v0_10b60, i32 %v3_10b68)
  store i32 %v3_10b6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203a0.147 to i32), i32* %r3.global-to-local, align 4
  %v2_10b74 = load i32, i32* @global_var_203a0.147, align 4
  store i32 %v2_10b74, i32* %ip.global-to-local, align 4
  %v1_10b7c = load i32, i32* @r4, align 4
  %v9_10b7c = icmp eq i32 %v2_10b74, %v1_10b7c
  store i1 %v9_10b7c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10b68, i32* %r1.global-to-local, align 4
  %v7_10b84 = icmp sgt i32 %v2_10b74, %v1_10b7c
  br i1 %v7_10b84, label %dec_label_pc_10b88, label %dec_label_pc_10bc8

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b58
  %v2_10b8c = load i32, i32* @global_var_203cc.149, align 4
  store i32 %v2_10b8c, i32* %r3.global-to-local, align 4
  store i32 %v1_10b7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ba8

dec_label_pc_10b98:                               ; preds = %dec_label_pc_10bb8, %dec_label_pc_10ba8
  %v1_10b98 = add i32 %v0_10b98, 1
  store i32 %v1_10b98, i32* %r2.global-to-local, align 4
  %v9_10b9c = icmp eq i32 %v1_10b98, %v2_10b74
  %v1_10ba0 = add i32 %v0_10ba0, 16
  store i32 %v1_10ba0, i32* %r3.global-to-local, align 4
  br i1 %v9_10b9c, label %dec_label_pc_10bc8.loopexit, label %dec_label_pc_10ba8

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_10b98, %dec_label_pc_10b88
  %v0_10b98 = phi i32 [ %v1_10b98, %dec_label_pc_10b98 ], [ %v1_10b7c, %dec_label_pc_10b88 ]
  %v0_10ba0 = phi i32 [ %v1_10ba0, %dec_label_pc_10b98 ], [ %v2_10b8c, %dec_label_pc_10b88 ]
  store i32 %v0_10ba0, i32* %r0.global-to-local, align 4
  %v1_10bac = add i32 %v0_10ba0, 8
  %v2_10bac = inttoptr i32 %v1_10bac to i16*
  %v3_10bac = load i16, i16* %v2_10bac, align 2
  %v4_10bac = zext i16 %v3_10bac to i32
  store i32 %v4_10bac, i32* %r3.global-to-local, align 4
  %tmp426 = icmp ugt i16 %v3_10bac, %v2_10b68
  br i1 %tmp426, label %dec_label_pc_10b98, label %dec_label_pc_10bb8

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10ba8
  %v1_10bb8 = add i32 %v0_10ba0, 10
  %v2_10bb8 = inttoptr i32 %v1_10bb8 to i16*
  %v3_10bb8 = load i16, i16* %v2_10bb8, align 2
  %v4_10bb8 = zext i16 %v3_10bb8 to i32
  store i32 %v4_10bb8, i32* %r3.global-to-local, align 4
  %v3_10bbc = icmp uge i16 %v3_10bb8, %v2_10b68
  %v9_10bbc = icmp eq i16 %v3_10bb8, %v2_10b68
  %v2_10bc0 = xor i1 %v3_10bbc, true
  %v3_10bc0 = or i1 %v9_10bbc, %v2_10bc0
  br i1 %v3_10bc0, label %dec_label_pc_10b98, label %dec_label_pc_10bcc.loopexit

dec_label_pc_10bc8.loopexit:                      ; preds = %dec_label_pc_10b98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10bc8

dec_label_pc_10bc8:                               ; preds = %dec_label_pc_10bc8.loopexit, %dec_label_pc_10b58
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc.loopexit:                      ; preds = %dec_label_pc_10bb8
  store i1 %v3_10bbc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10bcc.loopexit, %dec_label_pc_10bc8
  %v0_10be0 = phi i32 [ %v0_10ba0, %dec_label_pc_10bcc.loopexit ], [ 0, %dec_label_pc_10bc8 ]
  %v0_10bcc = load i32, i32* @r5, align 4
  %v1_10bcc = add i32 %v0_10bcc, 4
  %v2_10bcc = inttoptr i32 %v1_10bcc to i32*
  %v3_10bcc = load i32, i32* %v2_10bcc, align 4
  %v3_10bd0 = udiv i32 %v3_10bcc, 32
  store i32 %v3_10bd0, i32* %r2.global-to-local, align 4
  %v1_10bd4 = urem i32 %v3_10bcc, 32
  store i32 %v1_10bd4, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10bd8 = mul nuw nsw i32 %v3_10bd0, 4
  store i32 %v3_10bd8, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10be0 = inttoptr i32 %v0_10bcc to i32*
  store i32 %v0_10be0, i32* %v2_10be0, align 4
  %v0_10be4 = load i32, i32* %r3.global-to-local, align 4
  %v1_10be4 = load i32, i32* @r5, align 4
  %v2_10be4 = add i32 %v1_10be4, 24
  %v3_10be4 = inttoptr i32 %v2_10be4 to i32*
  store i32 %v0_10be4, i32* %v3_10be4, align 4
  %v0_ffac.pre = load i32, i32* @ip, align 4
  %v1_ffb4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffa4

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10b1c
  %v0_10bec = load i32, i32* @r5, align 4
  %v1_10bec = add i32 %v0_10bec, 4
  %v2_10bec = inttoptr i32 %v1_10bec to i32*
  %v3_10bec = load i32, i32* %v2_10bec, align 4
  store i32 %v3_10bec, i32* %r0.global-to-local, align 4
  %v1_10bf0 = call i32 @function_124c8(i32 %v3_10bec)
  store i32 %v1_10bf0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10bf8 = load i32, i32* @r4, align 4
  %v1_10bf8 = load i32, i32* @r5, align 4
  %v2_10bf8 = add i32 %v1_10bf8, 12
  %v3_10bf8 = inttoptr i32 %v2_10bf8 to i32*
  store i32 %v0_10bf8, i32* %v3_10bf8, align 4
  %v0_10bfc = load i32, i32* %r3.global-to-local, align 4
  %v1_10bfc = load i32, i32* @r5, align 4
  %v2_10bfc = add i32 %v1_10bfc, 4
  %v3_10bfc = inttoptr i32 %v2_10bfc to i32*
  store i32 %v0_10bfc, i32* %v3_10bfc, align 4
  %v0_10c00 = load i32, i32* @r4, align 4
  %v1_10c00 = trunc i32 %v0_10c00 to i8
  %v2_10c00 = load i32, i32* @r5, align 4
  %v3_10c00 = add i32 %v2_10c00, 284
  %v4_10c00 = inttoptr i32 %v3_10c00 to i8*
  store i8 %v1_10c00, i8* %v4_10c00, align 1
  br label %dec_label_pc_100cc

dec_label_pc_10c08:                               ; preds = %thread-pre-split103
  %v1_10c10 = add i32 %v0_10c10, 12
  %v2_10c10 = inttoptr i32 %v1_10c10 to i32*
  %v3_10c10 = load i32, i32* %v2_10c10, align 4
  store i32 %v3_10c10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ffc4.backedge

dec_label_pc_10c18:                               ; preds = %bb425
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10c24 = call i32 @function_12cd4(i32 2, i32 1, i32 0)
  store i32 %v3_10c24, i32* %r0.global-to-local, align 4
  %v2_10c28 = icmp eq i32 %v3_10c24, -1
  store i1 %v2_10c28, i1* %cpsr_c.global-to-local, align 1
  %v7_10c28 = icmp eq i32 %v3_10c24, -1
  store i1 %v7_10c28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10c24, i32* @r4, align 4
  br i1 %v7_10c28, label %dec_label_pc_10d74, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c18
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c38 = call i32 @function_10e40(i32 4)
  store i32 1503156639, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_22410.100 to i32), i32* %r3.global-to-local, align 4
  %v0_10c44 = load i32, i32* @r6, align 4
  store i32 %v0_10c44, i32* %r1.global-to-local, align 4
  store i32 1503156639, i32* @global_var_22414.102, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10c50 = inttoptr i32 %v0_10c44 to i32*
  %v3_10c50 = call i32 @function_10d7c(i32 4, i32* %v2_10c50)
  store i32 %v2_10a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c64 = call i32 @function_10da0(i32 4)
  %v0_10c68 = load i32, i32* @r4, align 4
  store i32 %v0_10c68, i32* %r0.global-to-local, align 4
  store i32 %v2_10a38, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10c74 = call i32 @function_12abc(i32 %v0_10c68, i32 %v2_10a38, i32 16)
  store i32 %v3_10c74, i32* %r0.global-to-local, align 4
  %v3_10c78 = icmp eq i32 %v3_10c74, -1
  store i1 %v3_10c78, i1* %cpsr_c.global-to-local, align 1
  %v8_10c78 = icmp eq i32 %v3_10c74, -1
  store i1 %v8_10c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c78, label %dec_label_pc_10c80, label %dec_label_pc_10cd0

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c34
  %v0_10c80 = load i32, i32* @r4, align 4
  store i32 %v0_10c80, i32* %r0.global-to-local, align 4
  %v1_10c84 = call i32 @function_124c8(i32 %v0_10c80)
  %v0_10c88 = load i32, i32* @r6, align 4
  store i32 %v0_10c88, i32* %r0.global-to-local, align 4
  %v1_10c8c = call i32 @function_1432c(i32 %v0_10c88)
  store i32 %v1_10c8c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10078, %dec_label_pc_10c80
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10c94 = load i32, i32* @sb, align 4
  %v2_10c94 = inttoptr i32 %v1_10c94 to i32*
  store i32 104, i32* %v2_10c94, align 4
  br label %dec_label_pc_10090

dec_label_pc_10c9c:                               ; preds = %dec_label_pc_fe18
  store i32 %v3_10c9c, i32* %r0.global-to-local, align 4
  %v3_10ca4 = udiv i32 %v3_10c9c, 32
  %v3_10ca8 = mul nuw nsw i32 %v3_10ca4, 4
  store i32 %v2_10cac, i32* @lr, align 4
  %v2_10cb0 = add i32 %v3_10ca8, %v2_10cac
  store i32 %v2_10cb0, i32* %r3.global-to-local, align 4
  %v1_10cb4 = add i32 %v2_10cb0, -312
  %v2_10cb4 = inttoptr i32 %v1_10cb4 to i32*
  %v3_10cb4 = load i32, i32* %v2_10cb4, align 4
  %v1_10cb8 = urem i32 %v3_10c9c, 32
  store i32 %v1_10cb8, i32* %r1.global-to-local, align 4
  %v7_10cbc = shl i32 1, %v1_10cb8
  %v8_10cbc = or i32 %v3_10cb4, %v7_10cbc
  store i32 %v8_10cbc, i32* %r2.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @r5, align 4
  %v3_10cc0 = icmp uge i32 %v0_10cc0, %v3_10c9c
  store i1 %v3_10cc0, i1* %cpsr_c.global-to-local, align 1
  %v9_10cc0 = icmp eq i32 %v0_10cc0, %v3_10c9c
  store i1 %v9_10cc0, i1* %cpsr_z.global-to-local, align 1
  %v5_10cc4 = icmp slt i32 %v0_10cc0, %v3_10c9c
  br i1 %v5_10cc4, label %bb427, label %bb428

bb427:                                            ; preds = %dec_label_pc_10c9c
  store i32 %v3_10c9c, i32* @r5, align 4
  br label %bb428

bb428:                                            ; preds = %dec_label_pc_10c9c, %bb427
  store i32 %v8_10cbc, i32* %v2_10cb4, align 4
  br label %bb378

dec_label_pc_10cd0:                               ; preds = %dec_label_pc_10c34
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ce0 = load i32, i32* @r4, align 4
  store i32 %v0_10ce0, i32* %r0.global-to-local, align 4
  %v0_10ce4 = load i32, i32* @r6, align 4
  %v6_10ce4 = trunc i32 %v0_10ce4 to i8
  store i8 %v6_10ce4, i8* %stack_var_-56, align 1
  %v6_10ce8 = call i32 @function_12c18(i32 %v0_10ce0, i32 %v2_10710, i32 1, i32 16384)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cfc = load i32, i32* @r4, align 4
  store i32 %v0_10cfc, i32* %r0.global-to-local, align 4
  %v4_10d00 = call i32 @function_12c18(i32 %v0_10cfc, i32 %v2_106fc, i32 4, i32 16384)
  %v2_10d08 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_10d08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d14 = load i32, i32* @r4, align 4
  store i32 %v0_10d14, i32* %r0.global-to-local, align 4
  %v4_10d18 = call i32 @function_12c18(i32 %v0_10d14, i32 %v2_10d08, i32 2, i32 16384)
  %v0_10d1c = load i32, i32* %r8.global-to-local, align 4
  %v1_10d1c = add i32 %v0_10d1c, 12
  store i32 %v1_10d1c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d28 = load i32, i32* @r4, align 4
  store i32 %v0_10d28, i32* %r0.global-to-local, align 4
  %v4_10d2c = call i32 @function_12c18(i32 %v0_10d28, i32 %v1_10d1c, i32 1, i32 16384)
  store i32 %v4_10d2c, i32* %r0.global-to-local, align 4
  %v0_10d30 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d30 = inttoptr i32 %v0_10d30 to i32*
  %v2_10d30 = load i32, i32* %v1_10d30, align 4
  store i32 %v2_10d30, i32* %r1.global-to-local, align 4
  %v1_10d34 = add i32 %v0_10d30, 12
  %v2_10d34 = inttoptr i32 %v1_10d34 to i8*
  %v3_10d34 = load i8, i8* %v2_10d34, align 1
  %v4_10d34 = zext i8 %v3_10d34 to i32
  store i32 %v4_10d34, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d3c = load i32, i32* @r4, align 4
  store i32 %v0_10d3c, i32* %r0.global-to-local, align 4
  %v4_10d40 = call i32 @function_12c18(i32 %v0_10d3c, i32 %v2_10d30, i32 %v4_10d34, i32 16384)
  %v0_10d44 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d44 = add i32 %v0_10d44, 13
  store i32 %v1_10d44, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d50 = load i32, i32* @r4, align 4
  store i32 %v0_10d50, i32* %r0.global-to-local, align 4
  %v4_10d54 = call i32 @function_12c18(i32 %v0_10d50, i32 %v1_10d44, i32 1, i32 16384)
  %v0_10d58 = load i32, i32* @r4, align 4
  store i32 %v0_10d58, i32* %r0.global-to-local, align 4
  %v0_10d5c = load i32, i32* %r8.global-to-local, align 4
  %v1_10d5c = add i32 %v0_10d5c, 13
  %v2_10d5c = inttoptr i32 %v1_10d5c to i8*
  %v3_10d5c = load i8, i8* %v2_10d5c, align 1
  %v4_10d5c = zext i8 %v3_10d5c to i32
  store i32 %v4_10d5c, i32* %r2.global-to-local, align 4
  %v1_10d60 = add i32 %v0_10d5c, 4
  %v2_10d60 = inttoptr i32 %v1_10d60 to i32*
  %v3_10d60 = load i32, i32* %v2_10d60, align 4
  store i32 %v3_10d60, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10d68 = call i32 @function_12c18(i32 %v0_10d58, i32 %v3_10d60, i32 %v4_10d5c, i32 16384)
  %v0_10d6c = load i32, i32* @r4, align 4
  store i32 %v0_10d6c, i32* %r0.global-to-local, align 4
  %v1_10d70 = call i32 @function_124c8(i32 %v0_10d6c)
  store i32 %v1_10d70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10c18, %dec_label_pc_10cd0
  %v0_10d74 = load i32, i32* @r6, align 4
  store i32 %v0_10d74, i32* %r0.global-to-local, align 4
  %v1_10d78 = call i32 @function_1432c(i32 %v0_10d74)
  store i32 %v1_10d78, i32* %r0.global-to-local, align 4
  ret i32 %v1_10d78

; uselistorder directives
  uselistorder i32 %v0_10cc0, { 0, 2, 1 }
  uselistorder i32 %v1_10cb8, { 1, 0 }
  uselistorder i1 %v7_10c28, { 1, 0 }
  uselistorder i32 %v3_10c24, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10c10, { 1, 0 }
  uselistorder i32 %v3_10bcc, { 1, 0 }
  uselistorder i1 %v3_10bbc, { 1, 0 }
  uselistorder i32 %v0_10ba0, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_10b74, { 0, 2, 1, 3 }
  uselistorder i32 %v4_10af0, { 1, 0, 2 }
  uselistorder i32 %v3_10a9c, { 1, 0 }
  uselistorder i1 %v2_10a64, { 1, 0 }
  uselistorder i32 %.432, { 1, 0 }
  uselistorder i1 %v7_10a4c, { 1, 0 }
  uselistorder i32 %v0_10a48, { 2, 1, 0, 3 }
  uselistorder i1 %v7_10a20, { 1, 0 }
  uselistorder i32 %v0_10a20, { 2, 1, 0, 3 }
  uselistorder i32 %v0_109a4, { 1, 0 }
  uselistorder i32 %v0_10988.pr, { 1, 0 }
  uselistorder i32 %v0_10954, { 1, 2, 0 }
  uselistorder i32 %v0_10918, { 1, 0 }
  uselistorder i32 %v1_10910, { 1, 0 }
  uselistorder i32 %v1_10908, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10904, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10904, { 0, 2, 1 }
  uselistorder i32 %v0_108e4.pr, { 1, 0 }
  uselistorder i32 %v0_108c4.pr, { 1, 0 }
  uselistorder i1 %v7_1089c, { 1, 0 }
  uselistorder i1 %v2_1088c, { 1, 0, 2 }
  uselistorder i1 %v2_10870, { 1, 0, 2 }
  uselistorder i32 %v1_10890, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10864, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_10894, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10818, { 1, 0 }
  uselistorder i32 %v0_10c10, { 1, 0, 2 }
  uselistorder i1 %v0_10808, { 1, 0 }
  uselistorder i32 %v4_107fc, { 1, 0, 2 }
  uselistorder i32 %v1_107c8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_107c8, { 0, 2, 1 }
  uselistorder i32 %v0_107c0, { 1, 0 }
  uselistorder i1 %v7_107bc, { 1, 0 }
  uselistorder i1 %v7_107b4, { 1, 0 }
  uselistorder i1 %v8_107ac, { 1, 0 }
  uselistorder i1 %v7_10790, { 1, 0 }
  uselistorder i1 %v7_10788, { 1, 0 }
  uselistorder i1 %v8_10780, { 1, 0 }
  uselistorder i32 %v1_10768, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v7_10738, { 1, 0 }
  uselistorder i32 %v1_106e0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_106e0, { 0, 2, 1 }
  uselistorder i32 %v0_106d8, { 1, 0 }
  uselistorder i1 %v7_106d4, { 1, 0 }
  uselistorder i1 %v7_106cc, { 1, 0 }
  uselistorder i1 %v7_106c4, { 1, 0 }
  uselistorder i1 %v8_106bc, { 1, 0 }
  uselistorder i1 %v7_106a0, { 1, 0 }
  uselistorder i1 %v7_10698, { 1, 0 }
  uselistorder i1 %v7_10690, { 1, 0 }
  uselistorder i1 %v8_10688, { 1, 0 }
  uselistorder i32 %v1_10670, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_1060c, { 1, 0 }
  uselistorder i8 %v3_10604, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_105fc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_105fc, { 0, 2, 1 }
  uselistorder i32 %v0_105f4, { 1, 0 }
  uselistorder i1 %v7_105f0, { 1, 0 }
  uselistorder i1 %v7_105e8, { 1, 0 }
  uselistorder i1 %v7_105e0, { 1, 0 }
  uselistorder i1 %v7_1050c, { 1, 0 }
  uselistorder i1 %v7_10504, { 1, 0 }
  uselistorder i1 %v7_104fc, { 1, 0 }
  uselistorder i1 %v8_104f4, { 1, 0 }
  uselistorder i32 %v1_104dc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_10478, { 1, 0 }
  uselistorder i8 %v3_10470, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10468, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10468, { 0, 2, 1 }
  uselistorder i32 %v0_10460, { 1, 0 }
  uselistorder i1 %v7_1045c, { 1, 0 }
  uselistorder i1 %v7_10454, { 1, 0 }
  uselistorder i1 %v7_1044c, { 1, 0 }
  uselistorder i1 %v7_10438, { 1, 0 }
  uselistorder i1 %v7_10430, { 1, 0 }
  uselistorder i1 %v7_10428, { 1, 0 }
  uselistorder i1 %v8_10420, { 1, 0 }
  uselistorder i32 %v1_10408, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_103a4, { 1, 0 }
  uselistorder i8 %v3_1039c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10394, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10394, { 0, 2, 1 }
  uselistorder i32 %v0_1038c, { 1, 0 }
  uselistorder i1 %v7_10388, { 1, 0 }
  uselistorder i1 %v7_10380, { 1, 0 }
  uselistorder i1 %v7_10378, { 1, 0 }
  uselistorder i1 %v7_10364, { 1, 0 }
  uselistorder i1 %v7_1035c, { 1, 0 }
  uselistorder i1 %v7_10354, { 1, 0 }
  uselistorder i1 %v8_1034c, { 1, 0 }
  uselistorder i32 %v1_10334, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_102d0, { 1, 0 }
  uselistorder i8 %v3_102c8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_102c0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_102c0, { 0, 2, 1 }
  uselistorder i32 %v0_102b8, { 1, 0 }
  uselistorder i1 %v7_102b4, { 1, 0 }
  uselistorder i1 %v7_102ac, { 1, 0 }
  uselistorder i1 %v7_102a4, { 1, 0 }
  uselistorder i1 %v7_10290, { 1, 0 }
  uselistorder i1 %v7_10288, { 1, 0 }
  uselistorder i1 %v7_10280, { 1, 0 }
  uselistorder i1 %v8_10278, { 1, 0 }
  uselistorder i32 %v1_10260, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_101fc, { 1, 0 }
  uselistorder i8 %v3_101f4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_101ec, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_101ec, { 0, 2, 1 }
  uselistorder i32 %v0_101e4, { 1, 0 }
  uselistorder i1 %v7_101e0, { 1, 0 }
  uselistorder i1 %v7_101d8, { 1, 0 }
  uselistorder i1 %v7_101d0, { 1, 0 }
  uselistorder i1 %v7_101bc, { 1, 0 }
  uselistorder i1 %v7_101b4, { 1, 0 }
  uselistorder i1 %v7_101ac, { 1, 0 }
  uselistorder i1 %v8_101a4, { 1, 0 }
  uselistorder i32 %v1_1018c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_10178, { 1, 2, 0 }
  uselistorder i32 %v2_10164, { 1, 0 }
  uselistorder i32 %v0_10164, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_10160, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_10138, { 2, 1, 0 }
  uselistorder i1 %v7_10114, { 1, 0 }
  uselistorder i32 %v4_10110, { 1, 0, 2 }
  uselistorder i32 %v1_100d0, { 0, 2, 3, 4, 1 }
  uselistorder i1 %v1_100ac, { 1, 0 }
  uselistorder i32 %v1_100a0, { 2, 1, 0 }
  uselistorder i32 %v1_1009c, { 1, 0 }
  uselistorder i32 %v0_10040, { 2, 21, 4, 3, 20, 19, 5, 6, 23, 7, 8, 22, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 1, 0 }
  uselistorder i32 %v1_1001c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10018, { 1, 0 }
  uselistorder i32 %v4_fffc, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ffe8, { 1, 0, 2 }
  uselistorder i32 %v3_ffe4, { 1, 0, 2 }
  uselistorder i32 %v0_10aac, { 1, 0, 2 }
  uselistorder i32 %v3_ffb0, { 1, 0 }
  uselistorder i32 %v1_ff94, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ff90, { 1, 0 }
  uselistorder i32 %v3_ff88, { 1, 2, 0 }
  uselistorder i1 %v7_ff74, { 1, 0 }
  uselistorder i32 %v3_ff70, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ff64, { 1, 0 }
  uselistorder i32 %v2_10a38, { 1, 0, 2, 3 }
  uselistorder i32* %v2_10718, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10710, { 4, 5, 1, 0, 3, 6, 7, 2 }
  uselistorder i32 %v2_106fc, { 1, 0, 3, 2, 9, 8, 5, 7, 6, 4 }
  uselistorder i32 %v2_10948, { 1, 0 }
  uselistorder i32 %v1_ff14, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ff14, { 0, 1, 3, 2 }
  uselistorder i32 %v1_fee0, { 2, 1, 0 }
  uselistorder i32 %v1_fedc, { 1, 0 }
  uselistorder i1 %v2_febc, { 1, 0, 2 }
  uselistorder i32 %v0_feb8, { 1, 0, 2 }
  uselistorder i1 %v7_fe84, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_fe84, { 1, 0, 2 }
  uselistorder i32 %v2_fe7c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_fe70, { 1, 0, 2 }
  uselistorder i32 %v0_fe74, { 1, 0 }
  uselistorder i32 %v1_fe58, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_fe4c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fe4c, { 0, 2, 1 }
  uselistorder i32 %v1_fe3c, { 1, 0 }
  uselistorder i32 %v3_10c9c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_10cac, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %v1_fd8c, { 1, 0 }
  uselistorder i32 %v1_fd74, { 0, 2, 3, 1 }
  uselistorder i32 %v0_fd80, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fd30, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_fd24, { 2, 1, 0 }
  uselistorder i32 %v1_fd04, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_fce0, { 1, 0 }
  uselistorder i1 %v9_fcac, { 1, 0 }
  uselistorder i32 %v0_fc5c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fc00, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_fbb0, { 1, 0 }
  uselistorder i32 %v5_fb48, { 1, 0 }
  uselistorder i1 %v2_fa90, { 1, 0 }
  uselistorder i1 %v3_fa74, { 1, 0, 2 }
  uselistorder i1 %v2_fa60, { 1, 0 }
  uselistorder i1 %v2_fa3c, { 1, 0 }
  uselistorder i32 %v1_f9ec, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f9d8, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f9d4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_f9bc, { 1, 0 }
  uselistorder i32 %v0_f994, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 1, 2, 3, 4, 5, 8, 11, 10, 6, 7, 9, 13, 12 }
  uselistorder i16 %v5_f6cc.le, { 0, 2, 1 }
  uselistorder i32 %v0_f6b0, { 3, 2, 0, 1 }
  uselistorder i1 %v7_f650, { 1, 0 }
  uselistorder i32 %v3_f648, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_f634, { 1, 0 }
  uselistorder i32 %v0_f604, { 1, 0 }
  uselistorder i32 %storemerge308, { 1, 0 }
  uselistorder i32 %v0_f578, { 1, 2, 3, 0, 4 }
  uselistorder i16* %stack_var_-52, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0, 2 }
  uselistorder i32* %stack_var_-96, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i8* %stack_var_-56, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-60, { 6, 7, 8, 0, 9, 1, 10, 4, 11, 2, 12, 3, 13, 5, 14 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 4, 7, 0, 1, 3, 2, 5, 8, 9, 6, 10 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r3.global-to-local, { 142, 143, 144, 145, 146, 147, 148, 51, 52, 149, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 21, 65, 0, 150, 151, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 133, 134, 135, 137, 138, 139, 140, 141, 152, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 91, 88, 93, 154, 155, 94, 95, 153, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 136, 112, 113, 114, 115, 117, 116, 119, 118, 132, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i32* %r2.global-to-local, { 120, 121, 122, 123, 124, 125, 126, 31, 127, 128, 129, 32, 33, 34, 35, 10, 0, 130, 131, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 115, 116, 117, 118, 119, 132, 133, 113, 114, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 111, 112, 48, 49, 51, 50, 47, 136, 52, 137, 53, 134, 135, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r1.global-to-local, { 109, 110, 111, 112, 113, 114, 115, 33, 116, 117, 118, 119, 34, 35, 36, 37, 38, 8, 1, 2, 120, 121, 9, 10, 0, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 103, 104, 105, 106, 107, 108, 100, 101, 122, 123, 39, 40, 41, 42, 43, 45, 46, 47, 44, 48, 49, 50, 51, 102, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32* %r0.global-to-local, { 183, 182, 185, 184, 186, 187, 188, 190, 189, 191, 192, 193, 74, 195, 194, 196, 198, 197, 199, 200, 201, 203, 202, 7, 78, 75, 76, 77, 79, 82, 81, 80, 21, 23, 22, 24, 27, 25, 0, 86, 1, 3, 2, 204, 205, 206, 207, 208, 209, 211, 210, 212, 26, 28, 30, 29, 4, 5, 8, 6, 10, 12, 14, 13, 11, 9, 16, 15, 17, 18, 19, 20, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 52, 51, 54, 53, 56, 55, 57, 58, 60, 59, 62, 61, 64, 63, 65, 66, 68, 67, 70, 69, 72, 71, 73, 173, 176, 174, 178, 177, 180, 179, 181, 214, 216, 215, 217, 213, 218, 219, 220, 83, 84, 85, 89, 87, 88, 94, 90, 91, 149, 92, 93, 95, 97, 96, 98, 103, 99, 102, 100, 101, 104, 106, 107, 105, 110, 108, 109, 113, 111, 112, 115, 114, 175, 172, 117, 116, 118, 120, 119, 122, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 160, 162, 167, 163, 164, 165, 166, 168, 169, 170, 171 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 21, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i1* %cpsr_z.global-to-local, { 97, 204, 205, 216, 217, 98, 99, 111, 0, 187, 32, 33, 35, 206, 95, 208, 210, 211, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 178, 209, 20, 21, 26, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 207, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 73, 74, 75, 79, 80, 81, 83, 84, 85, 91, 92, 93, 88, 89, 90, 94, 96, 188, 189, 190, 191, 195, 196, 197, 192, 193, 194, 198, 199, 200, 201, 202, 203, 212, 213, 214, 215, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 179, 180, 112, 113, 114, 115, 117, 116, 118, 119, 120, 123, 125, 126, 124, 121, 122, 218, 219, 185, 127, 186, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 87, 160, 161, 162, 163, 164, 86, 165, 166, 167, 82, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 220, 184 }
  uselistorder i1* %cpsr_c.global-to-local, { 94, 201, 202, 95, 181, 182, 96, 108, 0, 183, 29, 30, 32, 203, 90, 204, 206, 207, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 174, 205, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 185, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 58, 59, 60, 64, 65, 66, 67, 68, 69, 73, 74, 75, 70, 71, 72, 77, 78, 79, 80, 82, 83, 88, 89, 91, 85, 86, 87, 92, 93, 184, 186, 187, 188, 192, 193, 194, 189, 190, 191, 195, 196, 197, 198, 199, 200, 208, 209, 210, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 175, 176, 109, 110, 111, 112, 113, 114, 115, 118, 120, 121, 119, 116, 117, 211, 212, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 84, 155, 156, 157, 158, 159, 81, 160, 161, 162, 76, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 213, 180 }
  uselistorder i32 ptrtoint (i16** @global_var_22410.100 to i32), { 4, 0, 1, 3, 2 }
  uselistorder i16* bitcast (i16** @global_var_203d0.151 to i16*), { 1, 0 }
  uselistorder i16** @global_var_203d0.151, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_203d0.151 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12b2c, { 2, 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 30, { 4, 0, 1, 5, 2, 3, 6 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_17690.30 to i32), { 6, 23, 7, 24, 0, 25, 3, 26, 1, 27, 2, 28, 4, 29, 16, 30, 17, 31, 18, 32, 19, 33, 20, 34, 21, 35, 5, 36, 22, 37, 8, 38, 9, 39, 10, 40, 11, 41, 12, 42, 13, 43, 14, 44, 15, 45 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12c18, { 7, 6, 5, 4, 3, 2, 1, 28, 24, 23, 27, 26, 25, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 14, 13, 12, 11, 10, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14 }
  uselistorder i32 (i32)* @function_10da0, { 12, 36, 35, 11, 37, 34, 33, 32, 31, 30, 29, 13, 10, 9, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1191c, { 23, 21, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32*)* @function_10d7c, { 28, 29, 0, 1, 2, 3, 4, 5, 6, 27, 30, 31, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 59, 43, 44, 45, 46, 47, 52, 48, 49, 50, 51 }
  uselistorder i32 (i32)* @function_10e40, { 23, 22, 46, 45, 44, 43, 42, 41, 40, 24, 21, 20, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12ba4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_121ec, { 2, 1, 0 }
  uselistorder i32 ()* @function_f344, { 0, 2, 1 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2, 6, 7, 8, 9, 10 }
  uselistorder i8 2, { 0, 3, 2, 1 }
  uselistorder i8 5, { 12, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 11, 13, 10 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 38, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_12bdc, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_12c50, { 8, 7, 6, 5, 0, 4, 3, 1, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_dda8, { 8, 7, 6, 5, 0, 4, 3, 1, 2 }
  uselistorder i16 4873, { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_dd58, { 10, 9, 8, 7, 0, 6, 5, 2, 1, 4, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 54, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 223, { 2, 0, 1 }
  uselistorder i32 62, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i32 127, { 4, 5, 2, 6, 0, 7, 1, 8, 3, 9 }
  uselistorder i32 126, { 7, 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_17768.204 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_17720.188 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_176b8.182 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1770c.180 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_17700.178 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_f40c, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_176e8.174 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_203c5.169, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 0, 2, 1, 3 }
  uselistorder i8 6, { 4, 5, 6, 7, 8, 9, 3, 10, 0, 11, 1, 2 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 12, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_203b8.163 to i32), { 1, 2, 0, 3, 4 }
  uselistorder i8* @global_var_203c4.164, { 1, 0 }
  uselistorder i32 10240, { 6, 3, 7, 2, 8, 1, 9, 4, 10, 5, 11, 0, 12 }
  uselistorder i8** @global_var_203a4.160, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_203a4.160 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1, 3, 4 }
  uselistorder i32 ()* @function_f188, { 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 4, 3, 2, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 8, 7, 6, 5, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12c90, { 10, 9, 8, 7, 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i32 2048, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32* @global_var_22424.158, { 1, 2, 3, 4, 0, 5 }
  uselistorder i16 254, { 1, 2, 0 }
  uselistorder i32* @global_var_22420.156, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 7, 0, 1, 4, 5, 6, 8 }
  uselistorder i32* @global_var_203d4.145, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @function_f1e4, { 1, 0 }
  uselistorder i32* @global_var_22408.78, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_22408.78 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_11b20, { 2, 1, 0 }
  uselistorder i32* @global_var_22428.143, { 0, 2, 1 }
  uselistorder i32 ()* @function_121b8, { 1, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_10d74, { 1, 0 }
  uselistorder label %bb428, { 1, 0 }
  uselistorder label %dec_label_pc_10c90, { 1, 0 }
  uselistorder label %dec_label_pc_ffc4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ffc4.backedge.thread528, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_ffc4.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10a6c, { 1, 0 }
  uselistorder label %dec_label_pc_109a4, { 1, 0 }
  uselistorder label %dec_label_pc_109a0, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10998, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_10988, { 1, 0 }
  uselistorder label %dec_label_pc_10918, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread114, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108e4, { 1, 0 }
  uselistorder label %.thread110, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108c4, { 1, 0 }
  uselistorder label %dec_label_pc_108b0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1086c, { 1, 0 }
  uselistorder label %dec_label_pc_1086c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1084c, { 5, 3, 4, 1, 0, 6, 2 }
  uselistorder label %dec_label_pc_10818, { 1, 0 }
  uselistorder label %thread-pre-split103, { 1, 0 }
  uselistorder label %dec_label_pc_107c8, { 1, 0 }
  uselistorder label %dec_label_pc_106e0, { 1, 0 }
  uselistorder label %dec_label_pc_10614, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_105fc, { 1, 0 }
  uselistorder label %dec_label_pc_10480, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10468, { 1, 0 }
  uselistorder label %dec_label_pc_103ac, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10394, { 1, 0 }
  uselistorder label %dec_label_pc_102d8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_102c0, { 1, 0 }
  uselistorder label %dec_label_pc_10204, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_101ec, { 1, 0 }
  uselistorder label %dec_label_pc_100cc, { 6, 1, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb390, { 1, 0 }
  uselistorder label %bb388, { 1, 0 }
  uselistorder label %dec_label_pc_10090, { 1, 0 }
  uselistorder label %dec_label_pc_10028, { 1, 0 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_ffdc, { 1, 0 }
  uselistorder label %dec_label_pc_ffcc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ffcc.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ffa4, { 1, 0 }
  uselistorder label %dec_label_pc_fefc, { 1, 0 }
  uselistorder label %bb384, { 1, 0 }
  uselistorder label %bb382, { 1, 0 }
  uselistorder label %bb380, { 1, 0 }
  uselistorder label %bb378, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_fdf0.dec_label_pc_fdf0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdd0.dec_label_pc_fdd0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdc4, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_fdbc, { 1, 0 }
  uselistorder label %dec_label_pc_fd98, { 1, 0 }
  uselistorder label %dec_label_pc_fd74, { 1, 0 }
  uselistorder label %dec_label_pc_fc28, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fc14, { 1, 0 }
  uselistorder label %.thread39, { 1, 0 }
  uselistorder label %dec_label_pc_faa0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa7c, { 1, 0 }
  uselistorder label %dec_label_pc_fa70, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa4c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa28, { 1, 0 }
  uselistorder label %bb350, { 1, 0 }
  uselistorder label %dec_label_pc_f9d4, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_f6b0, { 1, 0 }
}

define i32 @function_10d7c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10d7c:
  store i32 ptrtoint (i32* @global_var_22430.254 to i32), i32* @r2, align 4
  %v3_10d80 = mul i32 %arg1, 8
  %v2_10d84 = add i32 %v3_10d80, ptrtoint (i32* @global_var_22430.254 to i32)
  store i32 %v2_10d84, i32* @r3, align 4
  %v2_10d88 = icmp eq i32* %arg2, null
  br i1 %v2_10d88, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10d7c
  %v3_10d904 = inttoptr i32 %v2_10d84 to i32*
  %v4_10d905 = load i32, i32* %v3_10d904, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_10d7c
  %v2_10d8c = add i32 %v3_10d80, add (i32 ptrtoint (i32* @global_var_22430.254 to i32), i32 4)
  %v3_10d8c = inttoptr i32 %v2_10d8c to i16*
  %v4_10d8c = load i16, i16* %v3_10d8c, align 4
  %v5_10d8c = zext i16 %v4_10d8c to i32
  store i32 %v5_10d8c, i32* @r3, align 4
  %v3_10d90 = inttoptr i32 %v2_10d84 to i32*
  %v4_10d90 = load i32, i32* %v3_10d90, align 4
  store i32 %v5_10d8c, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_10d906 = phi i32 [ %v4_10d905, %.thread ], [ %v4_10d90, %bb ]
  ret i32 %v4_10d906

; uselistorder directives
  uselistorder i32 %v2_10d84, { 1, 0, 2 }
  uselistorder i32 %v3_10d80, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_10da0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10da0:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10da8 = mul i32 %arg1, 8
  %v2_10dac = add i32 %v3_10da8, ptrtoint (i32* @global_var_22430.254 to i32)
  %v2_10db0 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  %v1_10db4 = add i32 %v3_10da8, add (i32 ptrtoint (i32* @global_var_22430.254 to i32), i32 4)
  %v2_10db4 = inttoptr i32 %v1_10db4 to i16*
  %v3_10db4 = load i16, i16* %v2_10db4, align 4
  %v3_10db8 = udiv i32 %v2_10db0, 256
  store i32 %v3_10db8, i32* @r2, align 4
  %v2_10dbc = icmp eq i16 %v3_10db4, 0
  store i1 %v2_10dbc, i1* @cpsr_z, align 1
  %v3_10dc0 = udiv i32 %v2_10db0, 65536
  store i32 %v3_10dc0, i32* @r3, align 4
  %v3_10dc4 = load i32, i32* @r4, align 4
  store i32 %v3_10dc4, i32* %stack_var_-16, align 4
  %v1_10dc8 = urem i32 %v3_10db8, 256
  store i32 %v1_10dc8, i32* %r6.global-to-local, align 4
  %v1_10dcc = urem i32 %v3_10dc0, 256
  store i32 %v1_10dcc, i32* %r5.global-to-local, align 4
  %v3_10dd0 = udiv i32 %v2_10db0, 16777216
  store i32 %v3_10dd0, i32* %r4.global-to-local, align 4
  %v1_10dd4 = urem i32 %v2_10db0, 256
  store i32 %v1_10dd4, i32* %lr.global-to-local, align 4
  br i1 %v2_10dbc, label %dec_label_pc_10e30, label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10da0
  store i32 0, i32* @ip, align 4
  %v1_10de0 = inttoptr i32 %v2_10dac to i32*
  br label %dec_label_pc_10de0

dec_label_pc_10de0:                               ; preds = %dec_label_pc_10de0.dec_label_pc_10de0_crit_edge, %dec_label_pc_10ddc
  %v0_10de8 = phi i32 [ %v0_10de8.pre, %dec_label_pc_10de0.dec_label_pc_10de0_crit_edge ], [ %v1_10dd4, %dec_label_pc_10ddc ]
  %v2_10dec = phi i32 [ %v1_10e24, %dec_label_pc_10de0.dec_label_pc_10de0_crit_edge ], [ 0, %dec_label_pc_10ddc ]
  %v2_10de0 = load i32, i32* %v1_10de0, align 4
  %v2_10de4 = add i32 %v2_10de0, %v2_10dec
  %v3_10de4 = inttoptr i32 %v2_10de4 to i8*
  %v4_10de4 = load i8, i8* %v3_10de4, align 1
  %v6_10de4 = zext i8 %v4_10de4 to i32
  %v2_10de8 = xor i32 %v6_10de4, %v0_10de8
  %v1_10dec = trunc i32 %v2_10de8 to i8
  store i8 %v1_10dec, i8* %v3_10de4, align 1
  %v2_10df0 = load i32, i32* %v1_10de0, align 4
  %v0_10df4 = load i32, i32* @ip, align 4
  %v2_10df4 = add i32 %v0_10df4, %v2_10df0
  %v3_10df4 = inttoptr i32 %v2_10df4 to i8*
  %v4_10df4 = load i8, i8* %v3_10df4, align 1
  %v6_10df4 = zext i8 %v4_10df4 to i32
  %v0_10df8 = load i32, i32* %r6.global-to-local, align 4
  %v2_10df8 = xor i32 %v0_10df8, %v6_10df4
  %v1_10dfc = trunc i32 %v2_10df8 to i8
  store i8 %v1_10dfc, i8* %v3_10df4, align 1
  %v2_10e00 = load i32, i32* %v1_10de0, align 4
  %v0_10e04 = load i32, i32* @ip, align 4
  %v2_10e04 = add i32 %v0_10e04, %v2_10e00
  %v3_10e04 = inttoptr i32 %v2_10e04 to i8*
  %v4_10e04 = load i8, i8* %v3_10e04, align 1
  %v6_10e04 = zext i8 %v4_10e04 to i32
  %v0_10e08 = load i32, i32* %r5.global-to-local, align 4
  %v2_10e08 = xor i32 %v0_10e08, %v6_10e04
  %v1_10e0c = trunc i32 %v2_10e08 to i8
  store i8 %v1_10e0c, i8* %v3_10e04, align 1
  %v2_10e10 = load i32, i32* %v1_10de0, align 4
  %v0_10e14 = load i32, i32* @ip, align 4
  %v2_10e14 = add i32 %v0_10e14, %v2_10e10
  %v3_10e14 = inttoptr i32 %v2_10e14 to i8*
  %v4_10e14 = load i8, i8* %v3_10e14, align 1
  %v6_10e14 = zext i8 %v4_10e14 to i32
  %v0_10e18 = load i32, i32* %r4.global-to-local, align 4
  %v2_10e18 = xor i32 %v0_10e18, %v6_10e14
  store i32 %v2_10e18, i32* @r3, align 4
  %v1_10e1c = trunc i32 %v2_10e18 to i8
  store i8 %v1_10e1c, i8* %v3_10e14, align 1
  %v3_10e20 = load i16, i16* %v2_10db4, align 4
  %v4_10e20 = zext i16 %v3_10e20 to i32
  store i32 %v4_10e20, i32* @r2, align 4
  %v0_10e24 = load i32, i32* @ip, align 4
  %v1_10e24 = add i32 %v0_10e24, 1
  store i32 %v1_10e24, i32* @ip, align 4
  %v9_10e28 = icmp eq i32 %v4_10e20, %v1_10e24
  store i1 %v9_10e28, i1* @cpsr_z, align 1
  %v8_10e2c = icmp sgt i32 %v4_10e20, %v1_10e24
  br i1 %v8_10e2c, label %dec_label_pc_10de0.dec_label_pc_10de0_crit_edge, label %dec_label_pc_10e30.loopexit

dec_label_pc_10de0.dec_label_pc_10de0_crit_edge:  ; preds = %dec_label_pc_10de0
  %v0_10de8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10de0

dec_label_pc_10e30.loopexit:                      ; preds = %dec_label_pc_10de0
  %v2_10e30.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10e30.loopexit, %dec_label_pc_10da0
  %v2_10e30 = phi i32 [ %v2_10e30.pre, %dec_label_pc_10e30.loopexit ], [ %v3_10dc4, %dec_label_pc_10da0 ]
  store i32 %v2_10e30, i32* @r4, align 4
  ret i32 %v2_10dac

; uselistorder directives
  uselistorder i32 %v1_10e24, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10dd4, { 1, 0 }
  uselistorder i32 %v3_10dc0, { 1, 0 }
  uselistorder i32 %v3_10db8, { 1, 0 }
  uselistorder i32 %v2_10db0, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10dac, { 1, 0 }
  uselistorder i32 %v3_10da8, { 1, 0 }
}

define i32 @function_10e40(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e40:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10e48 = mul i32 %arg1, 8
  %v2_10e4c = add i32 %v3_10e48, ptrtoint (i32* @global_var_22430.254 to i32)
  %v2_10e50 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  %v1_10e54 = add i32 %v3_10e48, add (i32 ptrtoint (i32* @global_var_22430.254 to i32), i32 4)
  %v2_10e54 = inttoptr i32 %v1_10e54 to i16*
  %v3_10e54 = load i16, i16* %v2_10e54, align 4
  %v3_10e58 = udiv i32 %v2_10e50, 256
  %v2_10e5c = icmp eq i16 %v3_10e54, 0
  %v3_10e60 = udiv i32 %v2_10e50, 65536
  %v3_10e64 = load i32, i32* @r4, align 4
  store i32 %v3_10e64, i32* %stack_var_-16, align 4
  %v1_10e68 = urem i32 %v3_10e58, 256
  store i32 %v1_10e68, i32* %r6.global-to-local, align 4
  %v1_10e6c = urem i32 %v3_10e60, 256
  store i32 %v1_10e6c, i32* %r5.global-to-local, align 4
  %v3_10e70 = udiv i32 %v2_10e50, 16777216
  store i32 %v3_10e70, i32* %r4.global-to-local, align 4
  %v1_10e74 = urem i32 %v2_10e50, 256
  store i32 %v1_10e74, i32* %lr.global-to-local, align 4
  br i1 %v2_10e5c, label %dec_label_pc_10ed0, label %dec_label_pc_10e7c

dec_label_pc_10e7c:                               ; preds = %dec_label_pc_10e40
  store i32 0, i32* @ip, align 4
  %v1_10e80 = inttoptr i32 %v2_10e4c to i32*
  br label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %dec_label_pc_10e80.dec_label_pc_10e80_crit_edge, %dec_label_pc_10e7c
  %v0_10e88 = phi i32 [ %v0_10e88.pre, %dec_label_pc_10e80.dec_label_pc_10e80_crit_edge ], [ %v1_10e74, %dec_label_pc_10e7c ]
  %v2_10e8c = phi i32 [ %v1_10ec4, %dec_label_pc_10e80.dec_label_pc_10e80_crit_edge ], [ 0, %dec_label_pc_10e7c ]
  %v2_10e80 = load i32, i32* %v1_10e80, align 4
  %v2_10e84 = add i32 %v2_10e80, %v2_10e8c
  %v3_10e84 = inttoptr i32 %v2_10e84 to i8*
  %v4_10e84 = load i8, i8* %v3_10e84, align 1
  %v6_10e84 = zext i8 %v4_10e84 to i32
  %v2_10e88 = xor i32 %v6_10e84, %v0_10e88
  %v1_10e8c = trunc i32 %v2_10e88 to i8
  store i8 %v1_10e8c, i8* %v3_10e84, align 1
  %v2_10e90 = load i32, i32* %v1_10e80, align 4
  %v0_10e94 = load i32, i32* @ip, align 4
  %v2_10e94 = add i32 %v0_10e94, %v2_10e90
  %v3_10e94 = inttoptr i32 %v2_10e94 to i8*
  %v4_10e94 = load i8, i8* %v3_10e94, align 1
  %v6_10e94 = zext i8 %v4_10e94 to i32
  %v0_10e98 = load i32, i32* %r6.global-to-local, align 4
  %v2_10e98 = xor i32 %v0_10e98, %v6_10e94
  %v1_10e9c = trunc i32 %v2_10e98 to i8
  store i8 %v1_10e9c, i8* %v3_10e94, align 1
  %v2_10ea0 = load i32, i32* %v1_10e80, align 4
  %v0_10ea4 = load i32, i32* @ip, align 4
  %v2_10ea4 = add i32 %v0_10ea4, %v2_10ea0
  %v3_10ea4 = inttoptr i32 %v2_10ea4 to i8*
  %v4_10ea4 = load i8, i8* %v3_10ea4, align 1
  %v6_10ea4 = zext i8 %v4_10ea4 to i32
  %v0_10ea8 = load i32, i32* %r5.global-to-local, align 4
  %v2_10ea8 = xor i32 %v0_10ea8, %v6_10ea4
  %v1_10eac = trunc i32 %v2_10ea8 to i8
  store i8 %v1_10eac, i8* %v3_10ea4, align 1
  %v2_10eb0 = load i32, i32* %v1_10e80, align 4
  %v0_10eb4 = load i32, i32* @ip, align 4
  %v2_10eb4 = add i32 %v0_10eb4, %v2_10eb0
  %v3_10eb4 = inttoptr i32 %v2_10eb4 to i8*
  %v4_10eb4 = load i8, i8* %v3_10eb4, align 1
  %v6_10eb4 = zext i8 %v4_10eb4 to i32
  %v0_10eb8 = load i32, i32* %r4.global-to-local, align 4
  %v2_10eb8 = xor i32 %v0_10eb8, %v6_10eb4
  %v1_10ebc = trunc i32 %v2_10eb8 to i8
  store i8 %v1_10ebc, i8* %v3_10eb4, align 1
  %v3_10ec0 = load i16, i16* %v2_10e54, align 4
  %v4_10ec0 = zext i16 %v3_10ec0 to i32
  %v0_10ec4 = load i32, i32* @ip, align 4
  %v1_10ec4 = add i32 %v0_10ec4, 1
  store i32 %v1_10ec4, i32* @ip, align 4
  %v8_10ecc = icmp sgt i32 %v4_10ec0, %v1_10ec4
  br i1 %v8_10ecc, label %dec_label_pc_10e80.dec_label_pc_10e80_crit_edge, label %dec_label_pc_10ed0.loopexit

dec_label_pc_10e80.dec_label_pc_10e80_crit_edge:  ; preds = %dec_label_pc_10e80
  %v0_10e88.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10e80

dec_label_pc_10ed0.loopexit:                      ; preds = %dec_label_pc_10e80
  %v2_10ed0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10ed0

dec_label_pc_10ed0:                               ; preds = %dec_label_pc_10ed0.loopexit, %dec_label_pc_10e40
  %v2_10ed0 = phi i32 [ %v2_10ed0.pre, %dec_label_pc_10ed0.loopexit ], [ %v3_10e64, %dec_label_pc_10e40 ]
  store i32 %v2_10ed0, i32* @r4, align 4
  ret i32 %v2_10e4c

; uselistorder directives
  uselistorder i32 %v1_10ec4, { 1, 2, 0 }
  uselistorder i32 %v1_10e74, { 1, 0 }
  uselistorder i32 %v2_10e50, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10e4c, { 1, 0 }
  uselistorder i32 %v3_10e48, { 1, 0 }
}

define i32 @function_10ee0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10ee0:
  %r5.global-to-local = alloca i32, align 4
  %v3_10ee0 = load i32, i32* @r4, align 4
  %v6_10ee0 = load i32, i32* @r5, align 4
  %v9_10ee0 = load i32, i32* @r6, align 4
  %v12_10ee0 = load i32, i32* @r7, align 4
  %v15_10ee0 = load i32, i32* @r8, align 4
  %v21_10ee0 = load i32, i32* @sl, align 4
  %v24_10ee0 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_10eec = call i32 @function_12f1c()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_22430.254 to i32), i32* @r4, align 4
  store i32 %v0_10eec, i32* @r6, align 4
  %v3_10f04 = call i32 @function_118d4(i32 %v0_10eec, i32 ptrtoint (i32* @global_var_17800.261 to i32), i32 2)
  %v0_10f08 = load i32, i32* @r5, align 4
  store i32 %v0_10f08, i32* @r0, align 4
  %v0_10f0c = load i32, i32* @r6, align 4
  store i32 %v0_10f0c, i32* @global_var_22440.262, align 4
  %v1_10f10 = trunc i32 %v0_10f08 to i16
  store i16 %v1_10f10, i16* bitcast (i32* @global_var_22444.263 to i16*), align 4
  %v0_10f14 = call i32 @function_12f1c()
  %v0_10f18 = load i32, i32* @r5, align 4
  store i32 %v0_10f14, i32* @r6, align 4
  %v3_10f24 = call i32 @function_118d4(i32 %v0_10f14, i32 ptrtoint (i32* @global_var_17804.265 to i32), i32 %v0_10f18)
  store i32 29, i32* @r0, align 4
  %v0_10f2c = load i32, i32* @r6, align 4
  store i32 %v0_10f2c, i32* @global_var_22450.266, align 4
  %v0_10f30 = load i32, i32* @r5, align 4
  %v1_10f30 = trunc i32 %v0_10f30 to i16
  store i16 %v1_10f30, i16* bitcast (i32* @global_var_22454.267 to i16*), align 4
  %v0_10f34 = call i32 @function_12f1c()
  store i32 %v0_10f34, i32* @r5, align 4
  %v3_10f44 = call i32 @function_118d4(i32 %v0_10f34, i32 ptrtoint (i32* @global_var_17808.269 to i32), i32 29)
  store i32 7, i32* @r0, align 4
  %v0_10f50 = load i32, i32* @r5, align 4
  store i32 %v0_10f50, i32* @global_var_22458.270, align 4
  store i16 29, i16* bitcast (i32* @global_var_2245c.271 to i16*), align 4
  %v0_10f58 = call i32 @function_12f1c()
  store i32 7, i32* @r6, align 4
  store i32 %v0_10f58, i32* @r5, align 4
  %v3_10f6c = call i32 @function_118d4(i32 %v0_10f58, i32 ptrtoint (i32* @global_var_17828.273 to i32), i32 7)
  store i32 5, i32* @r0, align 4
  %v0_10f74 = load i32, i32* @r5, align 4
  store i32 %v0_10f74, i32* @global_var_22460.274, align 4
  %v0_10f78 = load i32, i32* @r6, align 4
  %v1_10f78 = trunc i32 %v0_10f78 to i16
  store i16 %v1_10f78, i16* bitcast (i32* @global_var_22464.275 to i16*), align 4
  %v0_10f7c = call i32 @function_12f1c()
  store i32 %v0_10f7c, i32* @r5, align 4
  %v3_10f8c = call i32 @function_118d4(i32 %v0_10f7c, i32 ptrtoint (i32* @global_var_17830.277 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_2246c.278 to i16*), align 4
  %v0_10f9c = load i32, i32* @r5, align 4
  store i32 %v0_10f9c, i32* @global_var_22468.279, align 4
  %v0_10fa0 = call i32 @function_12f1c()
  store i32 %v0_10fa0, i32* @r5, align 4
  %v3_10fb0 = call i32 @function_118d4(i32 %v0_10fa0, i32 ptrtoint (i32* @global_var_17838.281 to i32), i32 4)
  store i32 14, i32* @r0, align 4
  %v0_10fbc = load i32, i32* @r5, align 4
  store i32 %v0_10fbc, i32* @global_var_22470.282, align 4
  store i16 4, i16* bitcast (i32* @global_var_22474.283 to i16*), align 4
  %v0_10fc4 = call i32 @function_12f1c()
  store i32 %v0_10fc4, i32* @r5, align 4
  %v3_10fd4 = call i32 @function_118d4(i32 %v0_10fc4, i32 ptrtoint (i32* @global_var_17840.285 to i32), i32 14)
  store i32 6, i32* @r0, align 4
  store i16 14, i16* bitcast (i32* @global_var_2247c.286 to i16*), align 4
  %v0_10fe4 = load i32, i32* @r5, align 4
  store i32 %v0_10fe4, i32* @global_var_22478.287, align 4
  %v0_10fe8 = call i32 @function_12f1c()
  store i32 6, i32* @r7, align 4
  store i32 %v0_10fe8, i32* @r5, align 4
  %v3_10ffc = call i32 @function_118d4(i32 %v0_10fe8, i32 ptrtoint (i32* @global_var_17850.289 to i32), i32 6)
  store i32 8, i32* @r0, align 4
  %v0_11004 = load i32, i32* @r5, align 4
  store i32 %v0_11004, i32* @global_var_22480.290, align 4
  %v0_11008 = load i32, i32* @r7, align 4
  %v1_11008 = trunc i32 %v0_11008 to i16
  store i16 %v1_11008, i16* bitcast (i32* @global_var_22484.291 to i16*), align 4
  %v0_1100c = call i32 @function_12f1c()
  store i32 8, i32* @sl, align 4
  store i32 %v0_1100c, i32* @r5, align 4
  %v3_11020 = call i32 @function_118d4(i32 %v0_1100c, i32 ptrtoint (i32* @global_var_17858.293 to i32), i32 8)
  %v0_11024 = load i32, i32* @r6, align 4
  store i32 %v0_11024, i32* @r0, align 4
  %v0_11028 = load i32, i32* @r5, align 4
  store i32 %v0_11028, i32* @global_var_22488.294, align 4
  %v0_1102c = load i32, i32* @sl, align 4
  %v1_1102c = trunc i32 %v0_1102c to i16
  store i16 %v1_1102c, i16* bitcast (i32* @global_var_2248c.295 to i16*), align 4
  %v0_11030 = call i32 @function_12f1c()
  %v0_11034 = load i32, i32* @r6, align 4
  store i32 %v0_11030, i32* @r5, align 4
  %v3_11040 = call i32 @function_118d4(i32 %v0_11030, i32 ptrtoint (i32* @global_var_17864.297 to i32), i32 %v0_11034)
  store i32 16, i32* @r0, align 4
  %v0_11048 = load i32, i32* @r5, align 4
  store i32 %v0_11048, i32* @global_var_22490.298, align 4
  %v0_1104c = load i32, i32* @r6, align 4
  %v1_1104c = trunc i32 %v0_1104c to i16
  store i16 %v1_1104c, i16* bitcast (i32* @global_var_22494.299 to i16*), align 4
  %v0_11050 = call i32 @function_12f1c()
  store i32 %v0_11050, i32* @r5, align 4
  %v3_11060 = call i32 @function_118d4(i32 %v0_11050, i32 ptrtoint (i32* @global_var_1786c.301 to i32), i32 16)
  store i32 14, i32* @r0, align 4
  %v0_1106c = load i32, i32* @r5, align 4
  store i32 %v0_1106c, i32* @global_var_22498.302, align 4
  store i16 16, i16* bitcast (i32* @global_var_2249c.303 to i16*), align 4
  %v0_11074 = call i32 @function_12f1c()
  store i32 %v0_11074, i32* @r5, align 4
  %v3_11084 = call i32 @function_118d4(i32 %v0_11074, i32 ptrtoint (i32* @global_var_17880.305 to i32), i32 14)
  store i32 9, i32* @r0, align 4
  store i16 14, i16* bitcast (i32* @global_var_224a4.306 to i16*), align 4
  %v0_11094 = load i32, i32* @r5, align 4
  store i32 %v0_11094, i32* @global_var_224a0.307, align 4
  %v0_11098 = call i32 @function_12f1c()
  store i32 9, i32* @sb, align 4
  store i32 %v0_11098, i32* @r5, align 4
  %v3_110ac = call i32 @function_118d4(i32 %v0_11098, i32 ptrtoint (i32* @global_var_17890.309 to i32), i32 9)
  store i32 19, i32* @r0, align 4
  %v0_110b4 = load i32, i32* @r5, align 4
  store i32 %v0_110b4, i32* @global_var_224a8.310, align 4
  %v0_110b8 = load i32, i32* @sb, align 4
  %v1_110b8 = trunc i32 %v0_110b8 to i16
  store i16 %v1_110b8, i16* bitcast (i32* @global_var_224ac.311 to i16*), align 4
  %v0_110bc = call i32 @function_12f1c()
  store i32 19, i32* @fp, align 4
  store i32 %v0_110bc, i32* @r5, align 4
  %v3_110d0 = call i32 @function_118d4(i32 %v0_110bc, i32 ptrtoint (i32* @global_var_1789c.313 to i32), i32 19)
  store i32 23, i32* @r0, align 4
  %v0_110d8 = load i32, i32* @r5, align 4
  store i32 %v0_110d8, i32* @global_var_224b0.314, align 4
  %v0_110dc = load i32, i32* @fp, align 4
  %v1_110dc = trunc i32 %v0_110dc to i16
  store i16 %v1_110dc, i16* bitcast (i32* @global_var_224b4.315 to i16*), align 4
  %v0_110e0 = call i32 @function_12f1c()
  store i32 23, i32* @r8, align 4
  store i32 %v0_110e0, i32* @r5, align 4
  %v3_110f4 = call i32 @function_118d4(i32 %v0_110e0, i32 ptrtoint (i32* @global_var_178b0.317 to i32), i32 23)
  %v0_110f8 = load i32, i32* @sl, align 4
  store i32 %v0_110f8, i32* @r0, align 4
  %v0_110fc = load i32, i32* @r5, align 4
  store i32 %v0_110fc, i32* @global_var_224b8.318, align 4
  %v0_11100 = load i32, i32* @r8, align 4
  %v1_11100 = trunc i32 %v0_11100 to i16
  store i16 %v1_11100, i16* bitcast (i32* @global_var_224bc.319 to i16*), align 4
  %v0_11104 = call i32 @function_12f1c()
  %v0_1110c = load i32, i32* @sl, align 4
  store i32 %v0_11104, i32* @r5, align 4
  %v4_11114 = call i32 @function_118d4(i32 %v0_11104, i32 ptrtoint ([9 x i8]* @global_var_178c8.321 to i32), i32 %v0_1110c)
  store i32 14, i32* @r0, align 4
  %v0_1111c = load i32, i32* @r5, align 4
  store i32 %v0_1111c, i32* @global_var_224c0.322, align 4
  %v0_11120 = load i32, i32* @sl, align 4
  %v1_11120 = trunc i32 %v0_11120 to i16
  store i16 %v1_11120, i16* bitcast (i32* @global_var_224c4.323 to i16*), align 4
  %v0_11124 = call i32 @function_12f1c()
  store i32 %v0_11124, i32* @r5, align 4
  %v3_11134 = call i32 @function_118d4(i32 %v0_11124, i32 ptrtoint (i32* @global_var_178d4.325 to i32), i32 14)
  %v0_1113c = load i32, i32* @fp, align 4
  store i32 %v0_1113c, i32* @r0, align 4
  %v0_11140 = load i32, i32* @r5, align 4
  store i32 %v0_11140, i32* @global_var_224c8.326, align 4
  store i16 14, i16* bitcast (i32* @global_var_224cc.327 to i16*), align 4
  %v0_11148 = call i32 @function_12f1c()
  %v0_11150 = load i32, i32* @fp, align 4
  store i32 %v0_11148, i32* @r5, align 4
  %v3_11158 = call i32 @function_118d4(i32 %v0_11148, i32 ptrtoint (i32* @global_var_178e4.329 to i32), i32 %v0_11150)
  %v0_1115c = load i32, i32* @r8, align 4
  store i32 %v0_1115c, i32* @r0, align 4
  %v0_11160 = load i32, i32* @r5, align 4
  store i32 %v0_11160, i32* @global_var_224d0.330, align 4
  %v0_11164 = load i32, i32* @fp, align 4
  %v1_11164 = trunc i32 %v0_11164 to i16
  store i16 %v1_11164, i16* bitcast (i32* @global_var_224d4.331 to i16*), align 4
  %v0_11168 = call i32 @function_12f1c()
  %v0_11170 = load i32, i32* @r8, align 4
  store i32 %v0_11168, i32* @r5, align 4
  %v3_11178 = call i32 @function_118d4(i32 %v0_11168, i32 ptrtoint (i32* @global_var_178f8.333 to i32), i32 %v0_11170)
  store i32 24, i32* @r0, align 4
  %v0_11180 = load i32, i32* @r5, align 4
  store i32 %v0_11180, i32* @global_var_224d8.334, align 4
  %v0_11184 = load i32, i32* @r8, align 4
  %v1_11184 = trunc i32 %v0_11184 to i16
  store i16 %v1_11184, i16* bitcast (i32* @global_var_224dc.335 to i16*), align 4
  %v0_11188 = call i32 @function_12f1c()
  store i32 %v0_11188, i32* @r5, align 4
  %v3_11198 = call i32 @function_118d4(i32 %v0_11188, i32 ptrtoint (i32* @global_var_17910.337 to i32), i32 24)
  store i32 15, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_224e4.338 to i16*), align 4
  %v0_111a8 = load i32, i32* @r5, align 4
  store i32 %v0_111a8, i32* @global_var_224e0.339, align 4
  %v0_111ac = call i32 @function_12f1c()
  store i32 %v0_111ac, i32* @r5, align 4
  %v3_111bc = call i32 @function_118d4(i32 %v0_111ac, i32 ptrtoint (i32* @global_var_1792c.341 to i32), i32 15)
  %v0_111c4 = load i32, i32* @r7, align 4
  store i32 %v0_111c4, i32* @r0, align 4
  %v0_111c8 = load i32, i32* @r5, align 4
  store i32 %v0_111c8, i32* @global_var_224e8.342, align 4
  store i16 15, i16* bitcast (i32* @global_var_224ec.343 to i16*), align 4
  %v0_111d0 = call i32 @function_12f1c()
  %v0_111d4 = load i32, i32* @r7, align 4
  store i32 %v0_111d0, i32* @r5, align 4
  %v4_111e0 = call i32 @function_118d4(i32 %v0_111d0, i32 ptrtoint ([7 x i8]* @global_var_1793c.345 to i32), i32 %v0_111d4)
  %v0_111e4 = load i32, i32* @r6, align 4
  store i32 %v0_111e4, i32* @r0, align 4
  %v0_111e8 = load i32, i32* @r5, align 4
  store i32 %v0_111e8, i32* @global_var_224f0.346, align 4
  %v0_111ec = load i32, i32* @r7, align 4
  %v1_111ec = trunc i32 %v0_111ec to i16
  store i16 %v1_111ec, i16* bitcast (i32* @global_var_224f4.347 to i16*), align 4
  %v0_111f0 = call i32 @function_12f1c()
  %v0_111f4 = load i32, i32* @r6, align 4
  store i32 %v0_111f0, i32* @r5, align 4
  %v4_11200 = call i32 @function_118d4(i32 %v0_111f0, i32 ptrtoint ([8 x i8]* @global_var_17944.349 to i32), i32 %v0_111f4)
  %v0_11204 = load i32, i32* @r6, align 4
  store i32 %v0_11204, i32* @r0, align 4
  %v0_11208 = load i32, i32* @r5, align 4
  store i32 %v0_11208, i32* @global_var_224f8.350, align 4
  %v1_1120c = trunc i32 %v0_11204 to i16
  store i16 %v1_1120c, i16* bitcast (i32* @global_var_224fc.351 to i16*), align 4
  %v0_11210 = call i32 @function_12f1c()
  %v0_11214 = load i32, i32* @r6, align 4
  store i32 %v0_11210, i32* @r5, align 4
  %v4_11220 = call i32 @function_118d4(i32 %v0_11210, i32 ptrtoint ([8 x i8]* @global_var_1794c.353 to i32), i32 %v0_11214)
  store i32 3, i32* @r0, align 4
  %v0_11228 = load i32, i32* @r5, align 4
  store i32 %v0_11228, i32* @global_var_22500.354, align 4
  %v0_1122c = load i32, i32* @r6, align 4
  %v1_1122c = trunc i32 %v0_1122c to i16
  store i16 %v1_1122c, i16* bitcast (i32* @global_var_22504.355 to i16*), align 4
  %v0_11230 = call i32 @function_12f1c()
  store i32 %v0_11230, i32* @r5, align 4
  %v4_11240 = call i32 @function_118d4(i32 %v0_11230, i32 ptrtoint ([4 x i8]* @global_var_17954.357 to i32), i32 3)
  %v0_11248 = load i32, i32* @r8, align 4
  store i32 %v0_11248, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_2250c.358 to i16*), align 4
  %v0_11250 = load i32, i32* @r5, align 4
  store i32 %v0_11250, i32* @global_var_22508.359, align 4
  %v0_11254 = call i32 @function_12f1c()
  %v0_1125c = load i32, i32* @r8, align 4
  store i32 %v0_11254, i32* @r5, align 4
  %v3_11264 = call i32 @function_118d4(i32 %v0_11254, i32 ptrtoint (i32* @global_var_17958.361 to i32), i32 %v0_1125c)
  store i32 28, i32* @r0, align 4
  %v0_1126c = load i32, i32* @r5, align 4
  store i32 %v0_1126c, i32* @global_var_22510.362, align 4
  %v0_11270 = load i32, i32* @r8, align 4
  %v1_11270 = trunc i32 %v0_11270 to i16
  store i16 %v1_11270, i16* bitcast (i32* @global_var_22514.363 to i16*), align 4
  %v0_11274 = call i32 @function_12f1c()
  store i32 %v0_11274, i32* @r5, align 4
  %v3_11284 = call i32 @function_118d4(i32 %v0_11274, i32 ptrtoint (i32* @global_var_17970.365 to i32), i32 28)
  %v0_1128c = load i32, i32* @sb, align 4
  store i32 %v0_1128c, i32* @r0, align 4
  %v0_11290 = load i32, i32* @r5, align 4
  store i32 %v0_11290, i32* @global_var_22518.366, align 4
  store i16 28, i16* bitcast (i32* @global_var_2251c.367 to i16*), align 4
  %v0_11298 = call i32 @function_12f1c()
  %v0_1129c = load i32, i32* @sb, align 4
  store i32 %v0_11298, i32* @r5, align 4
  %v4_112a8 = call i32 @function_118d4(i32 %v0_11298, i32 ptrtoint ([10 x i8]* @global_var_17990.369 to i32), i32 %v0_1129c)
  %v0_112ac = load i32, i32* @sl, align 4
  store i32 %v0_112ac, i32* @r0, align 4
  %v0_112b0 = load i32, i32* @r5, align 4
  store i32 %v0_112b0, i32* @global_var_22520.370, align 4
  %v0_112b4 = load i32, i32* @sb, align 4
  %v1_112b4 = trunc i32 %v0_112b4 to i16
  store i16 %v1_112b4, i16* bitcast (i32* @global_var_22524.371 to i16*), align 4
  %v0_112b8 = call i32 @function_12f1c()
  %v0_112c0 = load i32, i32* @sl, align 4
  store i32 %v0_112b8, i32* @r5, align 4
  %v4_112c8 = call i32 @function_118d4(i32 %v0_112b8, i32 ptrtoint ([9 x i8]* @global_var_178c8.321 to i32), i32 %v0_112c0)
  store i32 5, i32* @r0, align 4
  %v0_112d0 = load i32, i32* @r5, align 4
  store i32 %v0_112d0, i32* @global_var_22528.372, align 4
  %v0_112d4 = load i32, i32* @sl, align 4
  %v1_112d4 = trunc i32 %v0_112d4 to i16
  store i16 %v1_112d4, i16* bitcast (i32* @global_var_2252c.373 to i16*), align 4
  %v0_112d8 = call i32 @function_12f1c()
  store i32 %v0_112d8, i32* @r5, align 4
  %v4_112e8 = call i32 @function_118d4(i32 %v0_112d8, i32 ptrtoint ([6 x i8]* @global_var_1799c.375 to i32), i32 5)
  %v0_112f4 = load i32, i32* @r7, align 4
  store i32 %v0_112f4, i32* @r0, align 4
  %v2_112f8 = load i32, i32* @r4, align 4
  %v4_112f8 = add i32 %v2_112f8, 260
  %v5_112f8 = inttoptr i32 %v4_112f8 to i16*
  store i16 5, i16* %v5_112f8, align 2
  %v0_112fc = load i32, i32* @r5, align 4
  store i32 %v0_112fc, i32* @global_var_22530.376, align 4
  %v0_11300 = call i32 @function_12f1c()
  %v0_11304 = load i32, i32* @r7, align 4
  store i32 %v0_11300, i32* @r5, align 4
  %v4_11310 = call i32 @function_118d4(i32 %v0_11300, i32 ptrtoint ([7 x i8]* @global_var_179a4.378 to i32), i32 %v0_11304)
  store i32 16, i32* @r0, align 4
  %v0_1131c = load i32, i32* @r7, align 4
  %v1_1131c = trunc i32 %v0_1131c to i16
  %v2_1131c = load i32, i32* @r4, align 4
  %v4_1131c = add i32 %v2_1131c, 268
  %v5_1131c = inttoptr i32 %v4_1131c to i16*
  store i16 %v1_1131c, i16* %v5_1131c, align 2
  %v0_11320 = load i32, i32* @r5, align 4
  store i32 %v0_11320, i32* @global_var_22538.379, align 4
  %v0_11324 = call i32 @function_12f1c()
  store i32 %v0_11324, i32* %r5.global-to-local, align 4
  %v3_11334 = call i32 @function_118d4(i32 %v0_11324, i32 ptrtoint (i32* @global_var_179ac.381 to i32), i32 16)
  store i32 21, i32* @r0, align 4
  %v2_11344 = load i32, i32* @r4, align 4
  %v4_11344 = add i32 %v2_11344, 276
  %v5_11344 = inttoptr i32 %v4_11344 to i16*
  store i16 16, i16* %v5_11344, align 2
  %v0_11348 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11348, i32* @global_var_22540.382, align 4
  %v0_1134c = load i32, i32* @r0, align 4
  store i32 %v0_1134c, i32* @r5, align 4
  %v0_11350 = call i32 @function_12f1c()
  %v0_11354 = load i32, i32* @r5, align 4
  store i32 %v0_11350, i32* @r6, align 4
  %v3_11360 = call i32 @function_118d4(i32 %v0_11350, i32 ptrtoint (i32* @global_var_179c0.384 to i32), i32 %v0_11354)
  %v0_11368 = load i32, i32* @r5, align 4
  store i32 %v0_11368, i32* @r0, align 4
  %v1_1136c = trunc i32 %v0_11368 to i16
  %v2_1136c = load i32, i32* @r4, align 4
  %v4_1136c = add i32 %v2_1136c, 284
  %v5_1136c = inttoptr i32 %v4_1136c to i16*
  store i16 %v1_1136c, i16* %v5_1136c, align 2
  %v0_11370 = load i32, i32* @r6, align 4
  store i32 %v0_11370, i32* @global_var_22548.385, align 4
  %v0_11374 = call i32 @function_12f1c()
  %v0_11378 = load i32, i32* @r5, align 4
  store i32 %v0_11374, i32* @r6, align 4
  %v3_11384 = call i32 @function_118d4(i32 %v0_11374, i32 ptrtoint (i32* @global_var_179d8.387 to i32), i32 %v0_11378)
  store i32 17, i32* @r0, align 4
  %v0_11390 = load i32, i32* @r5, align 4
  %v1_11390 = trunc i32 %v0_11390 to i16
  %v2_11390 = load i32, i32* @r4, align 4
  %v4_11390 = add i32 %v2_11390, 292
  %v5_11390 = inttoptr i32 %v4_11390 to i16*
  store i16 %v1_11390, i16* %v5_11390, align 2
  %v0_11394 = load i32, i32* @r6, align 4
  store i32 %v0_11394, i32* @global_var_22550.388, align 4
  %v0_11398 = call i32 @function_12f1c()
  store i32 %v0_11398, i32* @r5, align 4
  %v3_113a8 = call i32 @function_118d4(i32 %v0_11398, i32 ptrtoint (i32* @global_var_179f0.390 to i32), i32 17)
  store i32 11, i32* @r0, align 4
  %v2_113b8 = load i32, i32* @r4, align 4
  %v4_113b8 = add i32 %v2_113b8, 300
  %v5_113b8 = inttoptr i32 %v4_113b8 to i16*
  store i16 17, i16* %v5_113b8, align 2
  %v0_113bc = load i32, i32* @r5, align 4
  store i32 %v0_113bc, i32* @global_var_22558.391, align 4
  %v0_113c0 = call i32 @function_12f1c()
  store i32 %v0_113c0, i32* @r5, align 4
  %v0_113d0 = load i32, i32* @r7, align 4
  %v1_113d0 = add i32 %v0_113d0, 5
  store i32 %v1_113d0, i32* @r7, align 4
  %v4_113d4 = call i32 @function_118d4(i32 %v0_113c0, i32 ptrtoint ([12 x i8]* @global_var_17a04.393 to i32), i32 11)
  %v0_113dc = load i32, i32* @r8, align 4
  store i32 %v0_113dc, i32* @r0, align 4
  %v0_113e0 = load i32, i32* @r7, align 4
  %v1_113e0 = trunc i32 %v0_113e0 to i16
  %v2_113e0 = load i32, i32* @r4, align 4
  %v4_113e0 = add i32 %v2_113e0, 308
  %v5_113e0 = inttoptr i32 %v4_113e0 to i16*
  store i16 %v1_113e0, i16* %v5_113e0, align 2
  %v0_113e4 = load i32, i32* @r5, align 4
  store i32 %v0_113e4, i32* @global_var_22560.394, align 4
  %v0_113e8 = call i32 @function_12f1c()
  %v0_113f0 = load i32, i32* @r8, align 4
  store i32 %v0_113e8, i32* @r5, align 4
  %v3_113f8 = call i32 @function_118d4(i32 %v0_113e8, i32 ptrtoint (i32* @global_var_17a10.396 to i32), i32 %v0_113f0)
  store i32 83, i32* @r0, align 4
  %v0_11404 = load i32, i32* @r8, align 4
  %v1_11404 = trunc i32 %v0_11404 to i16
  %v2_11404 = load i32, i32* @r4, align 4
  %v4_11404 = add i32 %v2_11404, 316
  %v5_11404 = inttoptr i32 %v4_11404 to i16*
  store i16 %v1_11404, i16* %v5_11404, align 2
  %v0_11408 = load i32, i32* @r5, align 4
  store i32 %v0_11408, i32* @global_var_22568.397, align 4
  %v0_1140c = call i32 @function_12f1c()
  store i32 %v0_1140c, i32* @r5, align 4
  %v3_1141c = call i32 @function_118d4(i32 %v0_1140c, i32 ptrtoint (i32* @global_var_17d34.399 to i32), i32 83)
  store i32 32, i32* @r0, align 4
  %v2_1142c = load i32, i32* @r4, align 4
  %v4_1142c = add i32 %v2_1142c, 324
  %v5_1142c = inttoptr i32 %v4_1142c to i16*
  store i16 83, i16* %v5_1142c, align 2
  %v0_11430 = load i32, i32* @r5, align 4
  store i32 %v0_11430, i32* @global_var_22570.400, align 4
  %v0_11434 = call i32 @function_12f1c()
  store i32 %v0_11434, i32* @r5, align 4
  %v3_11444 = call i32 @function_118d4(i32 %v0_11434, i32 ptrtoint (i32* @global_var_17d88.402 to i32), i32 32)
  store i32 48, i32* @r0, align 4
  %v2_11454 = load i32, i32* @r4, align 4
  %v4_11454 = add i32 %v2_11454, 332
  %v5_11454 = inttoptr i32 %v4_11454 to i16*
  store i16 32, i16* %v5_11454, align 2
  %v0_11458 = load i32, i32* @r5, align 4
  store i32 %v0_11458, i32* @global_var_22578.403, align 4
  %v0_1145c = call i32 @function_12f1c()
  store i32 %v0_1145c, i32* @r5, align 4
  %v3_1146c = call i32 @function_118d4(i32 %v0_1145c, i32 ptrtoint (i32* @global_var_17a28.405 to i32), i32 48)
  store i32 12, i32* @r0, align 4
  %v2_1147c = load i32, i32* @r4, align 4
  %v4_1147c = add i32 %v2_1147c, 340
  %v5_1147c = inttoptr i32 %v4_1147c to i16*
  store i16 48, i16* %v5_1147c, align 2
  %v0_11480 = load i32, i32* @r5, align 4
  store i32 %v0_11480, i32* @global_var_22580.406, align 4
  %v0_11484 = call i32 @function_12f1c()
  store i32 12, i32* @r6, align 4
  store i32 %v0_11484, i32* @r5, align 4
  %v3_11498 = call i32 @function_118d4(i32 %v0_11484, i32 ptrtoint (i32* @global_var_17a5c.408 to i32), i32 12)
  %v0_114a0 = load i32, i32* @sb, align 4
  store i32 %v0_114a0, i32* @r0, align 4
  %v0_114a4 = load i32, i32* @r6, align 4
  %v1_114a4 = trunc i32 %v0_114a4 to i16
  %v2_114a4 = load i32, i32* @r4, align 4
  %v4_114a4 = add i32 %v2_114a4, 348
  %v5_114a4 = inttoptr i32 %v4_114a4 to i16*
  store i16 %v1_114a4, i16* %v5_114a4, align 2
  %v0_114a8 = load i32, i32* @r5, align 4
  store i32 %v0_114a8, i32* @global_var_22588.409, align 4
  %v0_114ac = call i32 @function_12f1c()
  %v0_114b0 = load i32, i32* @sb, align 4
  store i32 %v0_114ac, i32* @r5, align 4
  %v3_114bc = call i32 @function_118d4(i32 %v0_114ac, i32 ptrtoint (i32* @global_var_17a6c.411 to i32), i32 %v0_114b0)
  store i32 10, i32* @r0, align 4
  %v0_114c8 = load i32, i32* @sb, align 4
  %v1_114c8 = trunc i32 %v0_114c8 to i16
  %v2_114c8 = load i32, i32* @r4, align 4
  %v4_114c8 = add i32 %v2_114c8, 356
  %v5_114c8 = inttoptr i32 %v4_114c8 to i16*
  store i16 %v1_114c8, i16* %v5_114c8, align 2
  %v0_114cc = load i32, i32* @r5, align 4
  store i32 %v0_114cc, i32* @global_var_22590.412, align 4
  %v0_114d0 = call i32 @function_12f1c()
  store i32 %v0_114d0, i32* @r5, align 4
  %v0_114e0 = load i32, i32* @sb, align 4
  %v1_114e0 = add i32 %v0_114e0, 1
  store i32 %v1_114e0, i32* @sb, align 4
  %v3_114e4 = call i32 @function_118d4(i32 %v0_114d0, i32 ptrtoint (i32* @global_var_17a78.414 to i32), i32 10)
  %v0_114ec = load i32, i32* @r6, align 4
  store i32 %v0_114ec, i32* @r0, align 4
  %v0_114f0 = load i32, i32* @sb, align 4
  %v1_114f0 = trunc i32 %v0_114f0 to i16
  %v2_114f0 = load i32, i32* @r4, align 4
  %v4_114f0 = add i32 %v2_114f0, 364
  %v5_114f0 = inttoptr i32 %v4_114f0 to i16*
  store i16 %v1_114f0, i16* %v5_114f0, align 2
  %v0_114f4 = load i32, i32* @r5, align 4
  store i32 %v0_114f4, i32* @global_var_22598.415, align 4
  %v0_114f8 = call i32 @function_12f1c()
  %v0_114fc = load i32, i32* @r6, align 4
  store i32 %v0_114f8, i32* @r5, align 4
  %v3_11508 = call i32 @function_118d4(i32 %v0_114f8, i32 ptrtoint (i32* @global_var_17a84.417 to i32), i32 %v0_114fc)
  store i32 16, i32* @r0, align 4
  %v0_11514 = load i32, i32* @r6, align 4
  %v1_11514 = trunc i32 %v0_11514 to i16
  %v2_11514 = load i32, i32* @r4, align 4
  %v4_11514 = add i32 %v2_11514, 372
  %v5_11514 = inttoptr i32 %v4_11514 to i16*
  store i16 %v1_11514, i16* %v5_11514, align 2
  %v0_11518 = load i32, i32* @r5, align 4
  store i32 %v0_11518, i32* @global_var_225a0.418, align 4
  %v0_1151c = call i32 @function_12f1c()
  store i32 %v0_1151c, i32* @r5, align 4
  %v3_1152c = call i32 @function_118d4(i32 %v0_1151c, i32 ptrtoint (i32* @global_var_17a94.420 to i32), i32 16)
  %v0_11538 = load i32, i32* @fp, align 4
  store i32 %v0_11538, i32* @r0, align 4
  %v2_1153c = load i32, i32* @r4, align 4
  %v4_1153c = add i32 %v2_1153c, 380
  %v5_1153c = inttoptr i32 %v4_1153c to i16*
  store i16 16, i16* %v5_1153c, align 2
  %v0_11540 = load i32, i32* @r5, align 4
  store i32 %v0_11540, i32* @global_var_225a8.421, align 4
  %v0_11544 = call i32 @function_12f1c()
  %v0_1154c = load i32, i32* @fp, align 4
  store i32 %v0_11544, i32* @r5, align 4
  %v3_11554 = call i32 @function_118d4(i32 %v0_11544, i32 ptrtoint (i32* @global_var_17aa8.423 to i32), i32 %v0_1154c)
  %v0_1155c = load i32, i32* @sl, align 4
  store i32 %v0_1155c, i32* @r0, align 4
  %v0_11560 = load i32, i32* @fp, align 4
  %v1_11560 = trunc i32 %v0_11560 to i16
  %v2_11560 = load i32, i32* @r4, align 4
  %v4_11560 = add i32 %v2_11560, 388
  %v5_11560 = inttoptr i32 %v4_11560 to i16*
  store i16 %v1_11560, i16* %v5_11560, align 2
  %v0_11564 = load i32, i32* @r5, align 4
  store i32 %v0_11564, i32* @global_var_225b0.424, align 4
  %v0_11568 = call i32 @function_12f1c()
  %v0_11570 = load i32, i32* @sl, align 4
  store i32 %v0_11568, i32* @r5, align 4
  %v4_11578 = call i32 @function_118d4(i32 %v0_11568, i32 ptrtoint ([9 x i8]* @global_var_17abc.426 to i32), i32 %v0_11570)
  %v0_11580 = load i32, i32* @r7, align 4
  store i32 %v0_11580, i32* @r0, align 4
  %v0_11584 = load i32, i32* @sl, align 4
  %v1_11584 = trunc i32 %v0_11584 to i16
  %v2_11584 = load i32, i32* @r4, align 4
  %v4_11584 = add i32 %v2_11584, 396
  %v5_11584 = inttoptr i32 %v4_11584 to i16*
  store i16 %v1_11584, i16* %v5_11584, align 2
  %v0_11588 = load i32, i32* @r5, align 4
  store i32 %v0_11588, i32* @global_var_225b8.427, align 4
  %v0_1158c = call i32 @function_12f1c()
  %v0_11594 = load i32, i32* @r7, align 4
  store i32 %v0_1158c, i32* @r5, align 4
  %v3_1159c = call i32 @function_118d4(i32 %v0_1158c, i32 ptrtoint (i32* @global_var_17a1c.429 to i32), i32 %v0_11594)
  %v0_115a4 = load i32, i32* @r6, align 4
  store i32 %v0_115a4, i32* @r0, align 4
  %v0_115a8 = load i32, i32* @r7, align 4
  %v1_115a8 = trunc i32 %v0_115a8 to i16
  %v2_115a8 = load i32, i32* @r4, align 4
  %v4_115a8 = add i32 %v2_115a8, 404
  %v5_115a8 = inttoptr i32 %v4_115a8 to i16*
  store i16 %v1_115a8, i16* %v5_115a8, align 2
  %v0_115ac = load i32, i32* @r5, align 4
  store i32 %v0_115ac, i32* @global_var_225c0.430, align 4
  %v0_115b0 = call i32 @function_12f1c()
  %v0_115b4 = load i32, i32* @r6, align 4
  store i32 %v0_115b0, i32* @r5, align 4
  %v3_115c0 = call i32 @function_118d4(i32 %v0_115b0, i32 ptrtoint (i32* @global_var_17ac8.432 to i32), i32 %v0_115b4)
  store i32 18, i32* @r0, align 4
  %v0_115cc = load i32, i32* @r6, align 4
  %v1_115cc = trunc i32 %v0_115cc to i16
  %v2_115cc = load i32, i32* @r4, align 4
  %v4_115cc = add i32 %v2_115cc, 412
  %v5_115cc = inttoptr i32 %v4_115cc to i16*
  store i16 %v1_115cc, i16* %v5_115cc, align 2
  %v0_115d0 = load i32, i32* @r5, align 4
  store i32 %v0_115d0, i32* @global_var_225c8.433, align 4
  %v0_115d4 = call i32 @function_12f1c()
  store i32 %v0_115d4, i32* @r5, align 4
  %v3_115e4 = call i32 @function_118d4(i32 %v0_115d4, i32 ptrtoint (i32* @global_var_17ad8.435 to i32), i32 18)
  store i32 25, i32* @r0, align 4
  %v2_115f4 = load i32, i32* @r4, align 4
  %v4_115f4 = add i32 %v2_115f4, 420
  %v5_115f4 = inttoptr i32 %v4_115f4 to i16*
  store i16 18, i16* %v5_115f4, align 2
  %v0_115f8 = load i32, i32* @r5, align 4
  store i32 %v0_115f8, i32* @global_var_225d0.436, align 4
  %v0_115fc = call i32 @function_12f1c()
  store i32 %v0_115fc, i32* %r5.global-to-local, align 4
  %v3_1160c = call i32 @function_118d4(i32 %v0_115fc, i32 ptrtoint (i32* @global_var_17aec.438 to i32), i32 25)
  store i32 115, i32* @r0, align 4
  %v2_1161c = load i32, i32* @r4, align 4
  %v4_1161c = add i32 %v2_1161c, 428
  %v5_1161c = inttoptr i32 %v4_1161c to i16*
  store i16 25, i16* %v5_1161c, align 2
  %v0_11620 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11620, i32* @global_var_225d8.439, align 4
  %v0_11624 = load i32, i32* @r0, align 4
  store i32 %v0_11624, i32* @r5, align 4
  %v0_11628 = call i32 @function_12f1c()
  %v0_1162c = load i32, i32* @r5, align 4
  store i32 %v0_11628, i32* @r6, align 4
  %v3_11638 = call i32 @function_118d4(i32 %v0_11628, i32 ptrtoint (i32* @global_var_17b08.441 to i32), i32 %v0_1162c)
  %v0_11640 = load i32, i32* @r5, align 4
  store i32 %v0_11640, i32* @r0, align 4
  %v1_11644 = trunc i32 %v0_11640 to i16
  %v2_11644 = load i32, i32* @r4, align 4
  %v4_11644 = add i32 %v2_11644, 436
  %v5_11644 = inttoptr i32 %v4_11644 to i16*
  store i16 %v1_11644, i16* %v5_11644, align 2
  %v0_11648 = load i32, i32* @r6, align 4
  store i32 %v0_11648, i32* @global_var_225e0.442, align 4
  %v0_1164c = call i32 @function_12f1c()
  %v0_11650 = load i32, i32* @r5, align 4
  store i32 %v0_1164c, i32* @r6, align 4
  %v3_1165c = call i32 @function_118d4(i32 %v0_1164c, i32 ptrtoint (i32* @global_var_17b7c.444 to i32), i32 %v0_11650)
  store i32 79, i32* @r0, align 4
  %v0_11668 = load i32, i32* @r5, align 4
  %v1_11668 = trunc i32 %v0_11668 to i16
  %v2_11668 = load i32, i32* @r4, align 4
  %v4_11668 = add i32 %v2_11668, 444
  %v5_11668 = inttoptr i32 %v4_11668 to i16*
  store i16 %v1_11668, i16* %v5_11668, align 2
  %v0_1166c = load i32, i32* @r6, align 4
  store i32 %v0_1166c, i32* @global_var_225e8.445, align 4
  %v0_11670 = call i32 @function_12f1c()
  store i32 %v0_11670, i32* %r5.global-to-local, align 4
  %v3_11680 = call i32 @function_118d4(i32 %v0_11670, i32 ptrtoint (i32* @global_var_17bf0.447 to i32), i32 79)
  store i32 114, i32* @r0, align 4
  %v2_11690 = load i32, i32* @r4, align 4
  %v4_11690 = add i32 %v2_11690, 452
  %v5_11690 = inttoptr i32 %v4_11690 to i16*
  store i16 79, i16* %v5_11690, align 2
  %v0_11694 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11694, i32* @global_var_225f0.448, align 4
  %v0_11698 = load i32, i32* @r0, align 4
  store i32 %v0_11698, i32* @r5, align 4
  %v0_1169c = call i32 @function_12f1c()
  %v0_116a0 = load i32, i32* @r5, align 4
  store i32 %v0_1169c, i32* @r6, align 4
  %v3_116ac = call i32 @function_118d4(i32 %v0_1169c, i32 ptrtoint (i32* @global_var_17c40.450 to i32), i32 %v0_116a0)
  %v0_116b4 = load i32, i32* @r5, align 4
  store i32 %v0_116b4, i32* @r0, align 4
  %v1_116b8 = trunc i32 %v0_116b4 to i16
  %v2_116b8 = load i32, i32* @r4, align 4
  %v4_116b8 = add i32 %v2_116b8, 460
  %v5_116b8 = inttoptr i32 %v4_116b8 to i16*
  store i16 %v1_116b8, i16* %v5_116b8, align 2
  %v0_116bc = load i32, i32* @r6, align 4
  store i32 %v0_116bc, i32* @global_var_225f8.451, align 4
  %v0_116c0 = call i32 @function_12f1c()
  %v0_116c4 = load i32, i32* @r5, align 4
  store i32 %v0_116c0, i32* @r6, align 4
  %v3_116d0 = call i32 @function_118d4(i32 %v0_116c0, i32 ptrtoint (i32* @global_var_17cb4.453 to i32), i32 %v0_116c4)
  store i32 14, i32* @r0, align 4
  %v0_116dc = load i32, i32* @r5, align 4
  %v1_116dc = trunc i32 %v0_116dc to i16
  %v2_116dc = load i32, i32* @r4, align 4
  %v4_116dc = add i32 %v2_116dc, 468
  %v5_116dc = inttoptr i32 %v4_116dc to i16*
  store i16 %v1_116dc, i16* %v5_116dc, align 2
  %v0_116e0 = load i32, i32* @r6, align 4
  store i32 %v0_116e0, i32* @global_var_22600.454, align 4
  %v0_116e4 = call i32 @function_12f1c()
  store i32 %v0_116e4, i32* @r5, align 4
  %v3_116f4 = call i32 @function_118d4(i32 %v0_116e4, i32 ptrtoint (i32* @global_var_178d4.325 to i32), i32 14)
  %v0_11700 = load i32, i32* @fp, align 4
  store i32 %v0_11700, i32* @r0, align 4
  %v2_11704 = load i32, i32* @r4, align 4
  %v4_11704 = add i32 %v2_11704, 476
  %v5_11704 = inttoptr i32 %v4_11704 to i16*
  store i16 14, i16* %v5_11704, align 2
  %v0_11708 = load i32, i32* @r5, align 4
  store i32 %v0_11708, i32* @global_var_22608.455, align 4
  %v0_1170c = call i32 @function_12f1c()
  %v0_11714 = load i32, i32* @fp, align 4
  store i32 %v0_1170c, i32* @r5, align 4
  %v3_1171c = call i32 @function_118d4(i32 %v0_1170c, i32 ptrtoint (i32* @global_var_178e4.329 to i32), i32 %v0_11714)
  %v0_11724 = load i32, i32* @r8, align 4
  store i32 %v0_11724, i32* @r0, align 4
  %v0_11728 = load i32, i32* @fp, align 4
  %v1_11728 = trunc i32 %v0_11728 to i16
  %v2_11728 = load i32, i32* @r4, align 4
  %v4_11728 = add i32 %v2_11728, 484
  %v5_11728 = inttoptr i32 %v4_11728 to i16*
  store i16 %v1_11728, i16* %v5_11728, align 2
  %v0_1172c = load i32, i32* @r5, align 4
  store i32 %v0_1172c, i32* @global_var_22610.456, align 4
  %v0_11730 = call i32 @function_12f1c()
  %v0_11738 = load i32, i32* @r8, align 4
  store i32 %v0_11730, i32* @r5, align 4
  %v3_11740 = call i32 @function_118d4(i32 %v0_11730, i32 ptrtoint (i32* @global_var_178b0.317 to i32), i32 %v0_11738)
  %v0_11748 = load i32, i32* @sb, align 4
  store i32 %v0_11748, i32* @r0, align 4
  %v0_1174c = load i32, i32* @r8, align 4
  %v1_1174c = trunc i32 %v0_1174c to i16
  %v2_1174c = load i32, i32* @r4, align 4
  %v4_1174c = add i32 %v2_1174c, 492
  %v5_1174c = inttoptr i32 %v4_1174c to i16*
  store i16 %v1_1174c, i16* %v5_1174c, align 2
  %v0_11750 = load i32, i32* @r5, align 4
  store i32 %v0_11750, i32* @global_var_22618.457, align 4
  %v0_11754 = call i32 @function_12f1c()
  %v0_1175c = load i32, i32* @sb, align 4
  store i32 %v0_11754, i32* %r5.global-to-local, align 4
  %v4_11764 = call i32 @function_118d4(i32 %v0_11754, i32 ptrtoint ([11 x i8]* @global_var_17d28.459 to i32), i32 %v0_1175c)
  %v0_1176c = load i32, i32* @sb, align 4
  %v1_1176c = trunc i32 %v0_1176c to i16
  %v2_1176c = load i32, i32* @r4, align 4
  %v4_1176c = add i32 %v2_1176c, 500
  %v5_1176c = inttoptr i32 %v4_1176c to i16*
  store i16 %v1_1176c, i16* %v5_1176c, align 2
  %v0_11770 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11770, i32* @global_var_22620.460, align 4
  store i32 %v3_10ee0, i32* @r4, align 4
  store i32 %v6_10ee0, i32* @r5, align 4
  store i32 %v9_10ee0, i32* @r6, align 4
  store i32 %v12_10ee0, i32* @r7, align 4
  store i32 %v15_10ee0, i32* @r8, align 4
  store i32 %v21_10ee0, i32* @sl, align 4
  store i32 %v24_10ee0, i32* @fp, align 4
  ret i32 %v4_11764

; uselistorder directives
  uselistorder i32 %v0_11754, { 1, 0 }
  uselistorder i32 %v0_11730, { 1, 0 }
  uselistorder i32 %v0_1170c, { 1, 0 }
  uselistorder i32 %v0_116c0, { 1, 0 }
  uselistorder i32 %v0_1169c, { 1, 0 }
  uselistorder i32 %v0_1164c, { 1, 0 }
  uselistorder i32 %v0_11628, { 1, 0 }
  uselistorder i32 %v0_115b0, { 1, 0 }
  uselistorder i32 %v0_1158c, { 1, 0 }
  uselistorder i32 %v0_11568, { 1, 0 }
  uselistorder i32 %v0_11544, { 1, 0 }
  uselistorder i32 %v0_114f8, { 1, 0 }
  uselistorder i32 %v0_114ac, { 1, 0 }
  uselistorder i32 %v0_11484, { 1, 0 }
  uselistorder i32 %v0_113e8, { 1, 0 }
  uselistorder i32 %v0_11374, { 1, 0 }
  uselistorder i32 %v0_11350, { 1, 0 }
  uselistorder i32 %v0_11300, { 1, 0 }
  uselistorder i32 %v0_112b8, { 1, 0 }
  uselistorder i32 %v0_11298, { 1, 0 }
  uselistorder i32 %v0_11254, { 1, 0 }
  uselistorder i32 %v0_11210, { 1, 0 }
  uselistorder i32 %v0_111f0, { 1, 0 }
  uselistorder i32 %v0_111d0, { 1, 0 }
  uselistorder i32 %v0_11168, { 1, 0 }
  uselistorder i32 %v0_11148, { 1, 0 }
  uselistorder i32 %v0_11104, { 1, 0 }
  uselistorder i32 %v0_110e0, { 1, 0 }
  uselistorder i32 %v0_110bc, { 1, 0 }
  uselistorder i32 %v0_11098, { 1, 0 }
  uselistorder i32 %v0_11030, { 1, 0 }
  uselistorder i32 %v0_1100c, { 1, 0 }
  uselistorder i32 %v0_10fe8, { 1, 0 }
  uselistorder i32 %v0_10f58, { 1, 0 }
  uselistorder i32 %v0_10f14, { 1, 0 }
  uselistorder i32 %v0_10eec, { 1, 0 }
  uselistorder i32 284, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 21, { 2, 3, 1, 0, 4 }
  uselistorder i32 23, { 0, 2, 3, 1, 4 }
  uselistorder i32 29, { 0, 9, 1, 6, 2, 7, 3, 8, 10, 4, 5 }
  uselistorder i32 (i32, i32, i32)* @function_118d4, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_22430.254 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_11864(i8* %arg1) local_unnamed_addr {
dec_label_pc_11864:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11868 = load i8, i8* %arg1, align 1
  %v2_1186c = icmp eq i8 %v3_11868, 0
  %v0_11870 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1186c, i32 %v0_11870)
  br label %dec_label_pc_11878

dec_label_pc_11878:                               ; preds = %dec_label_pc_11878, %dec_label_pc_11864
  %v0_11878 = phi i32 [ %v1_11878, %dec_label_pc_11878 ], [ 0, %dec_label_pc_11864 ]
  %v1_11878 = add i32 %v0_11878, 1
  %v2_1187c = add i32 %v1_11878, %tmp
  %v3_1187c = inttoptr i32 %v2_1187c to i8*
  %v4_1187c = load i8, i8* %v3_1187c, align 1
  %v6_1187c = zext i8 %v4_1187c to i32
  store i32 %v6_1187c, i32* @r3, align 4
  %v2_11880 = icmp eq i8 %v4_1187c, 0
  br i1 %v2_11880, label %dec_label_pc_11888, label %dec_label_pc_11878

dec_label_pc_11888:                               ; preds = %dec_label_pc_11878
  ret i32 %v1_11878
}

define i32 @function_1188c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1188c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_1188c = load i8, i8* %arg1, align 1
  %v3_1188c = zext i8 %v2_1188c to i32
  %v2_11890 = icmp eq i8 %v2_1188c, 0
  br i1 %v2_11890, label %bb, label %dec_label_pc_1189c

bb:                                               ; preds = %dec_label_pc_1188c
  store i32 %v3_1188c, i32* @ip, align 4
  br label %dec_label_pc_118b0

dec_label_pc_1189c:                               ; preds = %dec_label_pc_1188c
  br label %dec_label_pc_118a0

dec_label_pc_118a0:                               ; preds = %dec_label_pc_118a0, %dec_label_pc_1189c
  %v0_118a0 = phi i32 [ %v1_118a0, %dec_label_pc_118a0 ], [ 0, %dec_label_pc_1189c ]
  %v1_118a0 = add i32 %v0_118a0, 1
  store i32 %v1_118a0, i32* @ip, align 4
  %v2_118a4 = add i32 %v1_118a0, %tmp
  %v3_118a4 = inttoptr i32 %v2_118a4 to i8*
  %v4_118a4 = load i8, i8* %v3_118a4, align 1
  %v2_118a8 = icmp eq i8 %v4_118a4, 0
  br i1 %v2_118a8, label %dec_label_pc_118b0, label %dec_label_pc_118a0

dec_label_pc_118b0:                               ; preds = %dec_label_pc_118a0, %bb
  %v0_118b0 = phi i32 [ %v3_1188c, %bb ], [ %v1_118a0, %dec_label_pc_118a0 ]
  br label %dec_label_pc_118bc

dec_label_pc_118b8:                               ; preds = %dec_label_pc_118bc
  %v0_118b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_118b8 = add i32 %v0_118b8, 1
  %v2_118b8 = inttoptr i32 %v1_118b8 to i8*
  %v3_118b8 = load i8, i8* %v2_118b8, align 1
  store i32 %v1_118b8, i32* %r1.global-to-local, align 4
  %v0_118bc.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_118bc

dec_label_pc_118bc:                               ; preds = %dec_label_pc_118b0, %dec_label_pc_118b8
  %v0_118c4.off0 = phi i8 [ %v2_1188c, %dec_label_pc_118b0 ], [ %v3_118b8, %dec_label_pc_118b8 ]
  %v0_118bc = phi i32 [ %v0_118b0, %dec_label_pc_118b0 ], [ %v0_118bc.pr, %dec_label_pc_118b8 ]
  %v1_118bc = add i32 %v0_118bc, -1
  store i32 %v1_118bc, i32* @r3, align 4
  %v3_118c0 = icmp eq i32 %v0_118bc, 0
  %v2_118c4 = load i32, i32* @r0, align 4
  %v3_118c4 = inttoptr i32 %v2_118c4 to i8*
  store i8 %v0_118c4.off0, i8* %v3_118c4, align 1
  %v4_118c4 = load i32, i32* @r0, align 4
  %v5_118c4 = add i32 %v4_118c4, 1
  store i32 %v5_118c4, i32* @r0, align 4
  br i1 %v3_118c0, label %dec_label_pc_118cc, label %dec_label_pc_118b8

dec_label_pc_118cc:                               ; preds = %dec_label_pc_118bc
  %v0_118cc = load i32, i32* @ip, align 4
  ret i32 %v0_118cc

; uselistorder directives
  uselistorder i32 %v0_118bc, { 1, 0 }
  uselistorder i32 %v1_118a0, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_118bc, { 1, 0 }
}

define i32 @function_118d4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118d4:
  %v2_118d4 = icmp eq i32 %arg3, 0
  %v0_118d8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_118d4, i32 %v0_118d8)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_118e0

dec_label_pc_118e0:                               ; preds = %dec_label_pc_118e0, %dec_label_pc_118d4
  %v0_118e0 = phi i32 [ %v1_118e8, %dec_label_pc_118e0 ], [ 0, %dec_label_pc_118d4 ]
  %v2_118e0 = add i32 %v0_118e0, %arg2
  %v3_118e0 = inttoptr i32 %v2_118e0 to i8*
  %v4_118e0 = load i8, i8* %v3_118e0, align 1
  %v4_118e4 = add i32 %v0_118e0, %arg1
  %v5_118e4 = inttoptr i32 %v4_118e4 to i8*
  store i8 %v4_118e0, i8* %v5_118e4, align 1
  %v0_118e8 = load i32, i32* @ip, align 4
  %v1_118e8 = add i32 %v0_118e8, 1
  store i32 %v1_118e8, i32* @ip, align 4
  %v9_118ec = icmp eq i32 %v1_118e8, %arg3
  br i1 %v9_118ec, label %dec_label_pc_118f4, label %dec_label_pc_118e0

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118e0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_118e8, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_118f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_118f8:
  %r2.global-to-local = alloca i32, align 4
  %v2_118f8 = icmp eq i32 %arg2, 0
  %v0_118fc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_118f8, i32 %v0_118fc)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11904

dec_label_pc_11904:                               ; preds = %dec_label_pc_11904, %dec_label_pc_118f8
  %v2_11908 = phi i32 [ %v1_1190c, %dec_label_pc_11904 ], [ 0, %dec_label_pc_118f8 ]
  store i32 0, i32* @r3, align 4
  %v4_11908 = add i32 %v2_11908, %arg1
  %v5_11908 = inttoptr i32 %v4_11908 to i8*
  store i8 0, i8* %v5_11908, align 1
  %v0_1190c = load i32, i32* %r2.global-to-local, align 4
  %v1_1190c = add i32 %v0_1190c, 1
  store i32 %v1_1190c, i32* %r2.global-to-local, align 4
  %v9_11910 = icmp eq i32 %v1_1190c, %arg2
  br i1 %v9_11910, label %dec_label_pc_11918, label %dec_label_pc_11904

dec_label_pc_11918:                               ; preds = %dec_label_pc_11904
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_1190c, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_1191c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1191c:
  %v7_11930 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11930, label %dec_label_pc_11938, label %dec_label_pc_11940

dec_label_pc_11938:                               ; preds = %dec_label_pc_11954, %dec_label_pc_11940, %dec_label_pc_1191c, %dec_label_pc_11980
  %storemerge = phi i32 [ %v1_11980, %dec_label_pc_11980 ], [ -1, %dec_label_pc_1191c ], [ -1, %dec_label_pc_11940 ], [ -1, %dec_label_pc_11954 ]
  ret i32 %storemerge

dec_label_pc_11940:                               ; preds = %dec_label_pc_1191c
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_11938, label %dec_label_pc_11948

dec_label_pc_11948:                               ; preds = %dec_label_pc_11940
  br label %dec_label_pc_11960

dec_label_pc_11954:                               ; preds = %bb, %dec_label_pc_11974
  %v1_119603 = phi i32 [ %v1_11974, %dec_label_pc_11974 ], [ 0, %bb ]
  %v1_11954 = add i32 %v0_11980, 1
  %v9_11958 = icmp eq i32 %v1_11954, %arg2
  br i1 %v9_11958, label %dec_label_pc_11938, label %dec_label_pc_11960

dec_label_pc_11960:                               ; preds = %dec_label_pc_11954, %dec_label_pc_11948
  %v0_11980 = phi i32 [ %v1_11954, %dec_label_pc_11954 ], [ 0, %dec_label_pc_11948 ]
  %v1_11960 = phi i32 [ %v1_119603, %dec_label_pc_11954 ], [ 0, %dec_label_pc_11948 ]
  %v2_11960 = add i32 %v1_11960, %arg3
  %v3_11960 = inttoptr i32 %v2_11960 to i8*
  %v4_11960 = load i8, i8* %v3_11960, align 1
  %v2_11964 = add i32 %v0_11980, %arg1
  %v3_11964 = inttoptr i32 %v2_11964 to i8*
  %v4_11964 = load i8, i8* %v3_11964, align 1
  %v9_11968 = icmp eq i8 %v4_11964, %v4_11960
  br i1 %v9_11968, label %dec_label_pc_11974, label %bb

bb:                                               ; preds = %dec_label_pc_11960
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_11954

dec_label_pc_11974:                               ; preds = %dec_label_pc_11960
  %v1_11974 = add i32 %v1_11960, 1
  store i32 %v1_11974, i32* @ip, align 4
  %v9_11978 = icmp eq i32 %v1_11974, %arg4
  br i1 %v9_11978, label %dec_label_pc_11980, label %dec_label_pc_11954

dec_label_pc_11980:                               ; preds = %dec_label_pc_11974
  %v1_11980 = add i32 %v0_11980, 1
  br label %dec_label_pc_11938

; uselistorder directives
  uselistorder i32 %v1_11974, { 1, 2, 0 }
  uselistorder i32 %v1_11960, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11954, { 1, 0 }
  uselistorder label %dec_label_pc_11938, { 3, 0, 1, 2 }
}

define i32 @function_11988(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11988:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11988 = load i32, i32* @r4, align 4
  %v12_11988 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11998

dec_label_pc_11998:                               ; preds = %.thread, %dec_label_pc_119ac, %bb, %dec_label_pc_11988
  %v0_11998 = phi i32 [ %tmp, %dec_label_pc_11988 ], [ %v5_11998, %bb ], [ %v5_11998, %dec_label_pc_119ac ], [ %v5_11998, %.thread ]
  %v1_11998 = inttoptr i32 %v0_11998 to i8*
  %v2_11998 = load i8, i8* %v1_11998, align 1
  %v5_11998 = add i32 %v0_11998, 1
  store i32 %v5_11998, i32* %r5.global-to-local, align 4
  %v7_1199c = icmp eq i8 %v2_11998, 9
  br i1 %v7_1199c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11998
  br label %dec_label_pc_11998

bb:                                               ; preds = %dec_label_pc_11998
  %v3_11998 = zext i8 %v2_11998 to i32
  %v8_119a0 = icmp eq i8 %v2_11998, 32
  store i32 %v3_11998, i32* @r4, align 4
  br i1 %v8_119a0, label %dec_label_pc_11998, label %dec_label_pc_119ac

dec_label_pc_119ac:                               ; preds = %bb
  %v7_119ac = icmp eq i8 %v2_11998, 10
  br i1 %v7_119ac, label %dec_label_pc_11998, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_119ac
  %v7_119b4 = icmp eq i8 %v2_11998, 45
  br i1 %v7_119b4, label %dec_label_pc_11aa4, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119b4
  %v7_119bc = icmp eq i8 %v2_11998, 43
  br i1 %v7_119bc, label %bb44, label %dec_label_pc_119cc

bb44:                                             ; preds = %dec_label_pc_119bc
  %v2_119c0 = inttoptr i32 %v5_11998 to i8*
  %v3_119c0 = load i8, i8* %v2_119c0, align 1
  %v4_119c0 = zext i8 %v3_119c0 to i32
  store i32 %v4_119c0, i32* @r4, align 4
  %v6_119c0 = add i32 %v0_11998, 2
  store i32 %v6_119c0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119cc

dec_label_pc_119cc:                               ; preds = %bb44, %dec_label_pc_119bc, %dec_label_pc_11aa4
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11aa4 ], [ 2147483647, %dec_label_pc_119bc ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11aa4 ], [ 0, %dec_label_pc_119bc ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_119d4 = call i32 @function_11f50(i32 %storemerge1, i32 %arg2)
  %v0_119d8 = load i32, i32* @r7, align 4
  store i32 %v0_119d8, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_119e0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_119e0, i32* @r1, align 4
  %v0_119e4 = call i32 @function_11e54()
  store i32 0, i32* @ip, align 4
  %v0_119f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_119f4.outer

dec_label_pc_119f4.outer:                         ; preds = %.thread5, %dec_label_pc_119cc
  %v2_11a70.ph = phi i32 [ %v5_11a70, %.thread5 ], [ 0, %dec_label_pc_119cc ]
  %v1_11a34.ph = phi i32 [ %v4_11a74, %.thread5 ], [ %v0_119f4.pre, %dec_label_pc_119cc ]
  %v1_11a4c.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_119cc ]
  %v3_11a40 = icmp uge i32 %v2_11a70.ph, %v0_119e4
  %v9_11a40 = icmp eq i32 %v2_11a70.ph, %v0_119e4
  %v2_11a44 = xor i1 %v3_11a40, true
  %v3_11a44 = or i1 %v9_11a40, %v2_11a44
  %v2_11a48 = xor i1 %v9_11a40, true
  %v3_11a48 = and i1 %v3_11a40, %v2_11a48
  %v2_11a68 = icmp eq i1 %v9_11a40, false
  br label %dec_label_pc_119f4

dec_label_pc_119f4:                               ; preds = %dec_label_pc_119f4.outer, %dec_label_pc_11a7c
  %v1_11a4c = phi i32 [ -1, %dec_label_pc_11a7c ], [ %v1_11a4c.ph, %dec_label_pc_119f4.outer ]
  %v1_11a34 = phi i32 [ %v3_11a7c, %dec_label_pc_11a7c ], [ %v1_11a34.ph, %dec_label_pc_119f4.outer ]
  %v1_119f4 = urem i32 %v1_11a34, 256
  %v1_119f8 = add nsw i32 %v1_119f4, -48
  %v1_11a00 = add nsw i32 %v1_119f4, -97
  %v1_11a04 = add i32 %v1_11a34, -48
  %v1_11a08 = add nsw i32 %v1_119f4, -65
  %tmp75 = icmp ult i32 %v1_119f8, 10
  br i1 %tmp75, label %dec_label_pc_11a38, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_119f4
  %v2_11a10 = icmp ugt i32 %v1_11a08, 24
  %v7_11a10 = icmp eq i32 %v1_11a08, 25
  %v2_11a14 = xor i1 %v7_11a10, true
  %v3_11a14 = and i1 %v2_11a10, %v2_11a14
  br i1 %v3_11a14, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11a10
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11a10, %bb45
  %v0_11a2814 = phi i32 [ %v1_11a04, %dec_label_pc_11a10 ], [ 0, %bb45 ]
  %v2_11a18 = xor i1 %v2_11a10, true
  %v3_11a18 = or i1 %v7_11a10, %v2_11a18
  br i1 %v3_11a18, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_11a28 = phi i32 [ %v0_11a2814, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_11a14, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_11a20 = icmp ugt i32 %v1_11a00, 24
  %v11_11a20 = icmp eq i32 %v1_11a00, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_11a24 = phi i1 [ %v7_11a10, %bb48 ], [ %v11_11a20, %bb49 ]
  %v0_11a24 = phi i1 [ %v2_11a10, %bb48 ], [ %v6_11a20, %bb49 ]
  %v2_11a24 = xor i1 %v1_11a24, true
  %v3_11a24 = and i1 %v0_11a24, %v2_11a24
  br i1 %v3_11a24, label %dec_label_pc_11a88, label %dec_label_pc_11a28

dec_label_pc_11a28:                               ; preds = %bb50
  %v2_11a28 = icmp eq i32 %v0_11a28, 0
  %. = select i1 %v2_11a28, i32 87, i32 55
  %v2_11a34 = sub i32 %v1_11a34, %.
  br label %dec_label_pc_11a38

dec_label_pc_11a38:                               ; preds = %dec_label_pc_119f4, %dec_label_pc_11a28
  %v0_11a4c29 = phi i32 [ %v1_11a08, %dec_label_pc_119f4 ], [ %., %dec_label_pc_11a28 ]
  %v3_11a70 = phi i32 [ %v1_11a04, %dec_label_pc_119f4 ], [ %v2_11a34, %dec_label_pc_11a28 ]
  %v1_11a38 = load i32, i32* %r6.global-to-local, align 4
  %v2_11a38 = sub i32 %v3_11a70, %v1_11a38
  %v4_11a38 = xor i32 %v1_11a38, %v3_11a70
  %v5_11a38 = xor i32 %v2_11a38, %v3_11a70
  %v6_11a38 = and i32 %v5_11a38, %v4_11a38
  %v7_11a38 = icmp slt i32 %v6_11a38, 0
  %v8_11a38 = icmp slt i32 %v2_11a38, 0
  %v2_11a3c = xor i1 %v8_11a38, %v7_11a38
  br i1 %v2_11a3c, label %dec_label_pc_11a40, label %dec_label_pc_11a88

dec_label_pc_11a40:                               ; preds = %dec_label_pc_11a38
  br i1 %v3_11a44, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_11a40
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_11a40, %bb53
  %v0_11a4c28 = phi i32 [ %v0_11a4c29, %dec_label_pc_11a40 ], [ 0, %bb53 ]
  br i1 %v3_11a48, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_11a4c = phi i32 [ %v0_11a4c28, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_11a4c, 0
  %v4_11a4c = zext i1 %tmp76 to i32
  %v5_11a4c = or i32 %v0_11a4c, %v4_11a4c
  %v7_11a4c = icmp eq i32 %v5_11a4c, 0
  br i1 %v7_11a4c, label %dec_label_pc_11a54, label %dec_label_pc_11a7c

dec_label_pc_11a54:                               ; preds = %bb56
  %v1_11a60 = load i32, i32* %r8.global-to-local, align 4
  %v2_11a60 = sub i32 %v3_11a70, %v1_11a60
  %v4_11a60 = xor i32 %v1_11a60, %v3_11a70
  %v5_11a60 = xor i32 %v2_11a60, %v3_11a70
  %v6_11a60 = and i32 %v5_11a60, %v4_11a60
  %v7_11a60 = icmp slt i32 %v6_11a60, 0
  %v8_11a60 = icmp slt i32 %v2_11a60, 0
  %v9_11a60 = icmp eq i32 %v3_11a70, %v1_11a60
  %v3_11a64 = xor i1 %v8_11a60, %v7_11a60
  %v4_11a64 = or i1 %v9_11a60, %v3_11a64
  br i1 %v4_11a64, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_11a54
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_11a54
  store i32 1, i32* @ip, align 4
  br i1 %v2_11a68, label %.thread5, label %dec_label_pc_11a7c

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_11a70 = mul i32 %v1_11a38, %v2_11a70.ph
  %v5_11a70 = add i32 %v4_11a70, %v3_11a70
  %v1_11a74 = load i32, i32* %r5.global-to-local, align 4
  %v2_11a74 = inttoptr i32 %v1_11a74 to i8*
  %v3_11a74 = load i8, i8* %v2_11a74, align 1
  %v4_11a74 = zext i8 %v3_11a74 to i32
  %v6_11a74 = add i32 %v1_11a74, 1
  store i32 %v6_11a74, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119f4.outer

dec_label_pc_11a7c:                               ; preds = %thread-pre-split, %bb56
  %v0_11a7c = load i32, i32* %r5.global-to-local, align 4
  %v1_11a7c = inttoptr i32 %v0_11a7c to i8*
  %v2_11a7c = load i8, i8* %v1_11a7c, align 1
  %v3_11a7c = zext i8 %v2_11a7c to i32
  %v5_11a7c = add i32 %v0_11a7c, 1
  store i32 %v5_11a7c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_119f4

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a38, %bb50
  %v1_11a88 = icmp slt i32 %v1_11a4c, 0
  %v0_11ab4 = load i32, i32* %sl.global-to-local, align 4
  %v2_11ab4 = icmp eq i32 %v0_11ab4, 0
  br i1 %v1_11a88, label %dec_label_pc_11ab4, label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a88
  br i1 %v2_11ab4, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_11a90
  %v2_11a94 = sub i32 0, %v2_11a70.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_11a90, %bb59
  %v1_11aa0 = phi i32 [ -2147483648, %bb61 ], [ %v2_11a70.ph, %dec_label_pc_11a90 ], [ %v2_11a94, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_11988, i32* @r4, align 4
  store i32 %v12_11988, i32* @r7, align 4
  ret i32 %v1_11aa0

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_119b4
  %v1_11aa4 = inttoptr i32 %v5_11998 to i8*
  %v2_11aa4 = load i8, i8* %v1_11aa4, align 1
  %v3_11aa4 = zext i8 %v2_11aa4 to i32
  store i32 %v3_11aa4, i32* @r4, align 4
  %v5_11aa4 = add i32 %v0_11998, 2
  store i32 %v5_11aa4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119cc

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11a88
  br i1 %v2_11ab4, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_11ab4
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_11ab4
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_11ab4, { 1, 0 }
  uselistorder i32 %v2_11a60, { 1, 0 }
  uselistorder i32 %v1_11a60, { 1, 0, 2 }
  uselistorder i32 %v2_11a38, { 1, 0 }
  uselistorder i32 %v3_11a70, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11a10, { 1, 2, 0 }
  uselistorder i1 %v2_11a10, { 1, 0, 2 }
  uselistorder i32 %v1_119f4, { 1, 2, 0 }
  uselistorder i32 %v1_11a34, { 1, 2, 0 }
  uselistorder i32 %v1_11a4c, { 1, 0 }
  uselistorder i1 %v9_11a40, { 1, 0, 2 }
  uselistorder i1 %v3_11a40, { 1, 0 }
  uselistorder i32 %v2_11a70.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_119e4, { 1, 0 }
  uselistorder i32 %v5_11998, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_11998, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_11998, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 10, 11, 0, 9, 1, 6, 2, 7, 3, 8, 5, 4, 12 }
  uselistorder i8 32, { 2, 3, 4, 0, 5, 6, 7, 1, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 9, { 5, 0, 1, 4, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_11a38, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_119f4, { 1, 0 }
  uselistorder label %dec_label_pc_119cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11998, { 1, 2, 0, 3 }
}

define i32 @function_11ac4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ac4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11ac4 = load i32, i32* @r4, align 4
  store i32 %v3_11ac4, i32* %stack_var_-24, align 4
  %v12_11ac4 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11adc

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11b00.dec_label_pc_11adc_crit_edge, %dec_label_pc_11ac4
  %v0_11ae0 = phi i32 [ %v0_11ae0.pre, %dec_label_pc_11b00.dec_label_pc_11adc_crit_edge ], [ %arg3, %dec_label_pc_11ac4 ]
  %v1_11ae8 = call i32 @function_12260(i32 %v0_11ae0)
  %v7_11aec = icmp eq i32 %v1_11ae8, 1
  %v0_11af4 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11aec, label %dec_label_pc_11af4, label %dec_label_pc_11b0c

dec_label_pc_11af4:                               ; preds = %dec_label_pc_11adc
  %v1_11af4 = add i32 %v0_11af4, 1
  store i32 %v1_11af4, i32* %r5.global-to-local, align 4
  %v1_11af8 = load i32, i32* %r8.global-to-local, align 4
  %v6_11afc = icmp slt i32 %v1_11af4, %v1_11af8
  br i1 %v6_11afc, label %dec_label_pc_11b00, label %.loopexit

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af4
  %v0_11b00 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b00 = inttoptr i32 %v0_11b00 to i8*
  %v2_11b00 = load i8, i8* %v1_11b00, align 1
  %v5_11b00 = add i32 %v0_11b00, 1
  store i32 %v5_11b00, i32* %r4.global-to-local, align 4
  %v7_11b04 = icmp eq i8 %v2_11b00, 10
  br i1 %v7_11b04, label %dec_label_pc_11b0c, label %dec_label_pc_11b00.dec_label_pc_11adc_crit_edge

dec_label_pc_11b00.dec_label_pc_11adc_crit_edge:  ; preds = %dec_label_pc_11b00
  %v0_11ae0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11adc

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11adc, %dec_label_pc_11b00
  %v0_11b0c = phi i32 [ %v1_11af4, %dec_label_pc_11b00 ], [ %v0_11af4, %dec_label_pc_11adc ]
  %v2_11b0c = icmp eq i32 %v0_11b0c, 0
  br i1 %v2_11b0c, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_11b0c
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_11af4, %dec_label_pc_11b0c, %bb
  %v0_11b14 = load i32, i32* @r7, align 4
  %v2_11b18 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11b18, i32* @r4, align 4
  store i32 %v12_11ac4, i32* @r7, align 4
  ret i32 %v0_11b14

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11b0c, { 1, 0 }
}

define i32 @function_11b20() local_unnamed_addr {
dec_label_pc_11b20:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_11b30 = call i32 @function_128f0()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11b38 = inttoptr i32 %v0_11b30 to i32*
  store i32 0, i32* %v2_11b38, align 4
  %v0_11b44 = load i32, i32* %r4.global-to-local, align 4
  %v3_11b48 = call i32 @function_12cd4(i32 2, i32 2, i32 %v0_11b44)
  %v7_11b4c = icmp eq i32 %v3_11b48, -1
  store i32 %v3_11b48, i32* %r5.global-to-local, align 4
  br i1 %v7_11b4c, label %bb, label %dec_label_pc_11b5c

bb:                                               ; preds = %dec_label_pc_11b20
  %v1_11b54 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11b5c:                               ; preds = %dec_label_pc_11b20
  %v2_11b68 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11b68, i32* %r4.global-to-local, align 4
  %v0_11b74 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_11b88 = call i32 @function_12abc(i32 %v3_11b48, i32 %v2_11b68, i32 %v0_11b74)
  %v2_11b90 = ptrtoint i32* %stack_var_-20 to i32
  %v0_11b94 = load i32, i32* %r5.global-to-local, align 4
  %v3_11b98 = call i32 @function_12af4(i32 %v0_11b94, i32 %v2_11b68, i32 %v2_11b90)
  %v1_11ba0 = call i32 @function_124c8(i32 %v0_11b94)
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %bb, %dec_label_pc_11b5c
  %storemerge = phi i32 [ 134744072, %dec_label_pc_11b5c ], [ %v1_11b54, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_11b48, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32 134744072, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_12abc, { 1, 2, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12cd4, { 3, 4, 17, 18, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_11ba8, { 1, 0 }
}

define i32 @function_11bb4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bb4:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_11bb8 = load i8, i8* %tmp, align 1
  %v2_11bbc = icmp eq i8 %v3_11bb8, 0
  br i1 %v2_11bbc, label %bb, label %dec_label_pc_11bd0

bb:                                               ; preds = %dec_label_pc_11bb4
  %v4_11bb8 = zext i8 %v3_11bb8 to i32
  br label %dec_label_pc_11be4

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11bb4
  br label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bd4, %dec_label_pc_11bd0
  %v0_11bd4 = phi i32 [ %v1_11bd4, %dec_label_pc_11bd4 ], [ 0, %dec_label_pc_11bd0 ]
  %v1_11bd4 = add i32 %v0_11bd4, 1
  %v2_11bd8 = add i32 %v1_11bd4, %arg2
  %v3_11bd8 = inttoptr i32 %v2_11bd8 to i8*
  %v4_11bd8 = load i8, i8* %v3_11bd8, align 1
  %v2_11bdc = icmp eq i8 %v4_11bd8, 0
  br i1 %v2_11bdc, label %dec_label_pc_11be4, label %dec_label_pc_11bd4

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bd4, %bb
  %v0_11c2821 = phi i32 [ %v4_11bb8, %bb ], [ %v1_11bd4, %dec_label_pc_11bd4 ]
  %v0_11bec2 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_11bec2, 1
  br i1 %tmp29, label %dec_label_pc_11c3c, label %dec_label_pc_11bf8

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11be4, %dec_label_pc_11bec.backedge
  %v0_11bf0.in = phi i32 [ %v0_11bf0, %dec_label_pc_11bec.backedge ], [ %v0_11bec2, %dec_label_pc_11be4 ]
  %v1_11c04 = phi i32 [ %v1_11c0415, %dec_label_pc_11bec.backedge ], [ 0, %dec_label_pc_11be4 ]
  %v0_11bf8 = phi i32 [ %v5_11bf8, %dec_label_pc_11bec.backedge ], [ %tmp23, %dec_label_pc_11be4 ]
  %v0_11bf0 = add i32 %v0_11bf0.in, -1
  %v1_11bf8 = inttoptr i32 %v0_11bf8 to i8*
  %v2_11bf8 = load i8, i8* %v1_11bf8, align 1
  %v3_11bf8 = zext i8 %v2_11bf8 to i32
  store i32 %v3_11bf8, i32* @ip, align 4
  %v5_11bf8 = add i32 %v0_11bf8, 1
  %v1_11bfc = add nsw i32 %v3_11bf8, -65
  %v2_11c04 = add i32 %v1_11c04, %arg2
  %v3_11c04 = inttoptr i32 %v2_11c04 to i8*
  %v4_11c04 = load i8, i8* %v3_11c04, align 1
  %v6_11c04 = zext i8 %v4_11c04 to i32
  %v1_11c08 = add nsw i32 %v6_11c04, -65
  %tmp38 = icmp ult i32 %v1_11bfc, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_11bf8
  %v5_11c0c = or i32 %v3_11bf8, 96
  store i32 %v5_11c0c, i32* @ip, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_11bf8, %bb30
  %v0_11c18 = phi i32 [ %v3_11bf8, %dec_label_pc_11bf8 ], [ %v5_11c0c, %bb30 ]
  %tmp39 = icmp ult i32 %v1_11c08, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_11c14 = or i32 %v6_11c04, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_11c18 = phi i32 [ %v6_11c04, %bb31 ], [ %v5_11c14, %bb32 ]
  %v9_11c18 = icmp eq i32 %v0_11c18, %v1_11c18
  br i1 %v9_11c18, label %dec_label_pc_11c24, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_11bec.backedge

dec_label_pc_11bec.backedge:                      ; preds = %bb34, %dec_label_pc_11c24
  %v1_11c0415 = phi i32 [ 0, %bb34 ], [ %v1_11c24, %dec_label_pc_11c24 ]
  %tmp35 = icmp slt i32 %v0_11bf0, 1
  br i1 %tmp35, label %dec_label_pc_11c3c, label %dec_label_pc_11bf8

dec_label_pc_11c24:                               ; preds = %bb33
  %v1_11c24 = add i32 %v1_11c04, 1
  %v9_11c28 = icmp eq i32 %v0_11c2821, %v1_11c24
  br i1 %v9_11c28, label %dec_label_pc_11c30, label %dec_label_pc_11bec.backedge

dec_label_pc_11c30:                               ; preds = %dec_label_pc_11c24
  %v2_11c30 = sub i32 %v5_11bf8, %tmp23
  br label %dec_label_pc_11c3c

dec_label_pc_11c3c:                               ; preds = %dec_label_pc_11bec.backedge, %dec_label_pc_11be4, %dec_label_pc_11c30
  %storemerge = phi i32 [ %v2_11c30, %dec_label_pc_11c30 ], [ -1, %dec_label_pc_11be4 ], [ -1, %dec_label_pc_11bec.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11c24, { 1, 0 }
  uselistorder i32 %v0_11bf8, { 1, 0 }
  uselistorder i32 %v1_11c04, { 1, 0 }
  uselistorder i8 %v3_11bb8, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 5, 3, 6, 4, 7, 8 }
  uselistorder label %dec_label_pc_11c3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11bec.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_11bf8, { 1, 0 }
}

define i32 @function_11c44(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c44:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11c44 = load i8, i8* %arg1, align 1
  %v2_11c48 = icmp eq i8 %v2_11c44, 0
  br i1 %v2_11c48, label %bb, label %dec_label_pc_11c54

bb:                                               ; preds = %dec_label_pc_11c44
  %v3_11c44 = zext i8 %v2_11c44 to i32
  br label %dec_label_pc_11c68

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c44
  br label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c58, %dec_label_pc_11c54
  %v0_11c58 = phi i32 [ %v1_11c58, %dec_label_pc_11c58 ], [ 0, %dec_label_pc_11c54 ]
  %v1_11c58 = add i32 %v0_11c58, 1
  %v2_11c5c = add i32 %v1_11c58, %tmp
  %v3_11c5c = inttoptr i32 %v2_11c5c to i8*
  %v4_11c5c = load i8, i8* %v3_11c5c, align 1
  %v2_11c60 = icmp eq i8 %v4_11c5c, 0
  br i1 %v2_11c60, label %dec_label_pc_11c68, label %dec_label_pc_11c58

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11c58, %bb
  %v0_11cb43 = phi i32 [ %v3_11c44, %bb ], [ %v1_11c58, %dec_label_pc_11c58 ]
  %v1_11c68 = inttoptr i32 %arg2 to i8*
  %v2_11c68 = load i8, i8* %v1_11c68, align 1
  %v2_11c6c = icmp eq i8 %v2_11c68, 0
  br i1 %v2_11c6c, label %bb21, label %dec_label_pc_11c78

bb21:                                             ; preds = %dec_label_pc_11c68
  %v3_11c68 = zext i8 %v2_11c68 to i32
  br label %dec_label_pc_11c8c

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c68
  br label %dec_label_pc_11c7c

dec_label_pc_11c7c:                               ; preds = %dec_label_pc_11c7c, %dec_label_pc_11c78
  %v0_11c7c = phi i32 [ %v1_11c7c, %dec_label_pc_11c7c ], [ 0, %dec_label_pc_11c78 ]
  %v1_11c7c = add i32 %v0_11c7c, 1
  %v2_11c80 = add i32 %v1_11c7c, %arg2
  %v3_11c80 = inttoptr i32 %v2_11c80 to i8*
  %v4_11c80 = load i8, i8* %v3_11c80, align 1
  %v2_11c84 = icmp eq i8 %v4_11c80, 0
  br i1 %v2_11c84, label %dec_label_pc_11c8c, label %dec_label_pc_11c7c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c7c, %bb21
  %v0_11c8c = phi i32 [ %v3_11c68, %bb21 ], [ %v1_11c7c, %dec_label_pc_11c7c ]
  %v9_11c8c = icmp eq i32 %v0_11c8c, %v0_11cb43
  br i1 %v9_11c8c, label %dec_label_pc_11cb4.preheader, label %dec_label_pc_11c94

dec_label_pc_11cb4.preheader:                     ; preds = %dec_label_pc_11c8c
  %v2_11cb45 = icmp eq i32 %v0_11cb43, 0
  br i1 %v2_11cb45, label %dec_label_pc_11cbc, label %dec_label_pc_11c9c

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c9c, %dec_label_pc_11c8c
  ret i32 0

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11cac, %dec_label_pc_11cb4.preheader
  %v0_11cb4.in = phi i32 [ %v0_11cb4, %dec_label_pc_11cac ], [ %v0_11cb43, %dec_label_pc_11cb4.preheader ]
  %v0_11cb0 = phi i32 [ %v1_11cb0, %dec_label_pc_11cac ], [ %arg2, %dec_label_pc_11cb4.preheader ]
  %v0_11cac = phi i32 [ %v1_11cac, %dec_label_pc_11cac ], [ %tmp, %dec_label_pc_11cb4.preheader ]
  %v0_11cb4 = add i32 %v0_11cb4.in, -1
  %v1_11c9c = inttoptr i32 %v0_11cac to i8*
  %v2_11c9c = load i8, i8* %v1_11c9c, align 1
  %v1_11ca0 = inttoptr i32 %v0_11cb0 to i8*
  %v2_11ca0 = load i8, i8* %v1_11ca0, align 1
  %v9_11ca4 = icmp eq i8 %v2_11c9c, %v2_11ca0
  br i1 %v9_11ca4, label %dec_label_pc_11cac, label %dec_label_pc_11c94

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11c9c
  %v1_11cac = add i32 %v0_11cac, 1
  %v1_11cb0 = add i32 %v0_11cb0, 1
  %v2_11cb4 = icmp eq i32 %v0_11cb4, 0
  br i1 %v2_11cb4, label %dec_label_pc_11cbc, label %dec_label_pc_11c9c

dec_label_pc_11cbc:                               ; preds = %dec_label_pc_11cac, %dec_label_pc_11cb4.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11c68, { 1, 0 }
  uselistorder i8 %v2_11c44, { 1, 0 }
}

define i32 @function_11cc4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11cc4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11cc8 = load i8, i8* %arg1, align 1
  %v2_11ccc = icmp eq i8 %v2_11cc8, 0
  %v0_11cd0 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_11ccc, label %bb, label %dec_label_pc_11cdc

bb:                                               ; preds = %dec_label_pc_11cc4
  %v3_11cc8 = zext i8 %v2_11cc8 to i32
  br label %dec_label_pc_11cf0

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cc4
  br label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11ce0, %dec_label_pc_11cdc
  %v0_11ce0 = phi i32 [ %v1_11ce0, %dec_label_pc_11ce0 ], [ 0, %dec_label_pc_11cdc ]
  %v1_11ce0 = add i32 %v0_11ce0, 1
  %v2_11ce4 = add i32 %v1_11ce0, %tmp
  %v3_11ce4 = inttoptr i32 %v2_11ce4 to i8*
  %v4_11ce4 = load i8, i8* %v3_11ce4, align 1
  %v2_11ce8 = icmp eq i8 %v4_11ce4, 0
  br i1 %v2_11ce8, label %dec_label_pc_11cf0, label %dec_label_pc_11ce0

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11ce0, %bb
  %v6_11d18 = phi i32 [ %v3_11cc8, %bb ], [ %v1_11ce0, %dec_label_pc_11ce0 ]
  %v0_11cf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11cf0 = inttoptr i32 %v0_11cf0 to i8*
  %v2_11cf0 = load i8, i8* %v1_11cf0, align 1
  %v3_11cf0 = zext i8 %v2_11cf0 to i32
  %v2_11cf4 = icmp eq i8 %v2_11cf0, 0
  br i1 %v2_11cf4, label %bb26, label %dec_label_pc_11d00

bb26:                                             ; preds = %dec_label_pc_11cf0
  store i32 %v3_11cf0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d14

dec_label_pc_11d00:                               ; preds = %dec_label_pc_11cf0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d04

dec_label_pc_11d04:                               ; preds = %dec_label_pc_11d04, %dec_label_pc_11d00
  %v0_11d04 = phi i32 [ %v1_11d04, %dec_label_pc_11d04 ], [ 0, %dec_label_pc_11d00 ]
  %v1_11d04 = add i32 %v0_11d04, 1
  store i32 %v1_11d04, i32* %r2.global-to-local, align 4
  %v2_11d08 = add i32 %v1_11d04, %v0_11cf0
  %v3_11d08 = inttoptr i32 %v2_11d08 to i8*
  %v4_11d08 = load i8, i8* %v3_11d08, align 1
  %v2_11d0c = icmp eq i8 %v4_11d08, 0
  br i1 %v2_11d0c, label %dec_label_pc_11d14, label %dec_label_pc_11d04

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d04, %bb26
  %v0_11d14 = phi i32 [ %v3_11cf0, %bb26 ], [ %v1_11d04, %dec_label_pc_11d04 ]
  %v2_11d14 = sub i32 %v0_11d14, %v0_11cd0
  %v4_11d14 = xor i32 %v0_11d14, %v0_11cd0
  %v5_11d14 = xor i32 %v2_11d14, %v0_11d14
  %v6_11d14 = and i32 %v5_11d14, %v4_11d14
  %v5_11d18 = icmp slt i32 %v0_11d14, %v0_11cd0
  br i1 %v5_11d18, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_11d14
  %v8_11d18 = sub i32 %v6_11d18, %v0_11cd0
  %v10_11d18 = xor i32 %v6_11d18, %v0_11cd0
  %v11_11d18 = xor i32 %v8_11d18, %v6_11d18
  %v12_11d18 = and i32 %v11_11d18, %v10_11d18
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_11d14, %bb27
  %v1_11d1c.in = phi i32 [ %v6_11d14, %dec_label_pc_11d14 ], [ %v12_11d18, %bb27 ]
  %v0_11d1c.in = phi i32 [ %v2_11d14, %dec_label_pc_11d14 ], [ %v8_11d18, %bb27 ]
  %v0_11d1c = icmp slt i32 %v0_11d1c.in, 0
  %v1_11d1c = icmp slt i32 %v1_11d1c.in, 0
  %v2_11d1c = xor i1 %v1_11d1c, %v0_11d1c
  br i1 %v2_11d1c, label %dec_label_pc_11d48, label %dec_label_pc_11d2c.preheader

dec_label_pc_11d2c.preheader:                     ; preds = %bb28
  %v2_11d2c5 = icmp eq i32 %v0_11cd0, 0
  br i1 %v2_11d2c5, label %dec_label_pc_11d48, label %dec_label_pc_11d34

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d34
  %v1_11d24 = add i32 %v0_11d24, 1
  %v1_11d28 = add i32 %v0_11d28, 1
  store i32 %v1_11d28, i32* %r1.global-to-local, align 4
  %v2_11d2c = icmp eq i32 %v0_11d2c, 0
  br i1 %v2_11d2c, label %dec_label_pc_11d48, label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d24, %dec_label_pc_11d2c.preheader
  %v0_11d2c.in = phi i32 [ %v0_11d2c, %dec_label_pc_11d24 ], [ %v0_11cd0, %dec_label_pc_11d2c.preheader ]
  %v0_11d28 = phi i32 [ %v1_11d28, %dec_label_pc_11d24 ], [ %v0_11cf0, %dec_label_pc_11d2c.preheader ]
  %v0_11d24 = phi i32 [ %v1_11d24, %dec_label_pc_11d24 ], [ %tmp, %dec_label_pc_11d2c.preheader ]
  %v0_11d2c = add i32 %v0_11d2c.in, -1
  %v1_11d34 = inttoptr i32 %v0_11d24 to i8*
  %v2_11d34 = load i8, i8* %v1_11d34, align 1
  %v3_11d34 = zext i8 %v2_11d34 to i32
  store i32 %v3_11d34, i32* %r2.global-to-local, align 4
  %v1_11d38 = inttoptr i32 %v0_11d28 to i8*
  %v2_11d38 = load i8, i8* %v1_11d38, align 1
  %v9_11d3c = icmp eq i8 %v2_11d34, %v2_11d38
  br i1 %v9_11d3c, label %dec_label_pc_11d24, label %dec_label_pc_11d48

dec_label_pc_11d48:                               ; preds = %dec_label_pc_11d24, %dec_label_pc_11d2c.preheader, %dec_label_pc_11d34, %bb28
  %storemerge = phi i32 [ 0, %bb28 ], [ 1, %dec_label_pc_11d2c.preheader ], [ 1, %dec_label_pc_11d24 ], [ 0, %dec_label_pc_11d34 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_11d24, { 1, 0 }
  uselistorder i32 %v0_11d28, { 1, 0 }
  uselistorder i32 %v0_11d14, { 3, 0, 1, 2 }
  uselistorder i32 %v1_11d04, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11cd0, { 0, 3, 1, 4, 6, 2, 5 }
  uselistorder i8 %v2_11cc8, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d48, { 2, 0, 1, 3 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_11d58(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d58:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_11d58 = load i32, i32* @r4, align 4
  %v12_11d58 = load i32, i32* @r7, align 4
  %v0_11d5c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11d5c, i32* %r8.global-to-local, align 4
  %v2_11d5c = icmp eq i32 %v0_11d5c, 0
  store i1 %v2_11d5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11d5c, label %dec_label_pc_11e3c, label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %dec_label_pc_11d58
  %v3_11d6c = icmp eq i8 %arg1, 0
  store i1 %v3_11d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11d6c, label %.thread, label %dec_label_pc_11d80

.thread:                                          ; preds = %dec_label_pc_11d6c
  %v4_11d74 = inttoptr i32 %v0_11d5c to i8*
  store i8 48, i8* %v4_11d74, align 1
  %v0_11d78.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d78.pr.pr, label %.thread1, label %dec_label_pc_11d80

.thread1:                                         ; preds = %.thread
  %v4_11d78 = load i32, i32* %r8.global-to-local, align 4
  %v5_11d78 = add i32 %v4_11d78, 1
  %v6_11d78 = inttoptr i32 %v5_11d78 to i8*
  store i8 0, i8* %v6_11d78, align 1
  %v0_11d7c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d7c.pr.pr, label %dec_label_pc_11e3c, label %dec_label_pc_11d80

dec_label_pc_11d80:                               ; preds = %dec_label_pc_11d6c, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_11d84 = icmp eq i32 %arg2, 10
  store i1 %v7_11d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d84, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_11d80
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_11d80
  %v4_11d80 = zext i1 %tmp47 to i32
  store i32 %v4_11d80, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_11da48 = sub nsw i32 0, %tmp
  %tmp.v3_11da48 = select i1 %phitmp, i32 %tmp, i32 %v3_11da48
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_11da48, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_11db0 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_11db0, i32* @r7, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %bb45, %.thread6
  %v0_11db4 = phi i32 [ %v0_11dd8, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_11db4, i32* %r0.global-to-local, align 4
  %v0_11db8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11db8, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11db4, 16777216
  %v1_11dbc = sdiv i32 %sext, 16777216
  %v3_11dbc = call i32 @function_11f50(i32 %v1_11dbc, i32 %v0_11db8)
  %v7_11dc0 = icmp eq i32 %v0_11db8, 9
  store i1 %v7_11dc0, i1* %cpsr_z.global-to-local, align 1
  %v1_11dc4 = add i32 %v0_11db8, 48
  %v0_11dc8 = load i32, i32* @r4, align 4
  store i32 %v0_11dc8, i32* @r0, align 4
  %v7_11dcc = icmp sgt i32 %v0_11db8, 9
  %extract.t = trunc i32 %v1_11dc4 to i8
  br i1 %v7_11dcc, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_11db4
  %v9_11dcc = add i32 %v0_11db8, 55
  %extract.t27 = trunc i32 %v9_11dcc to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_11db4, %bb44
  %v0_11dd4.off0 = phi i8 [ %extract.t, %dec_label_pc_11db4 ], [ %extract.t27, %bb44 ]
  %v0_11dd0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11dd0, i32* @r1, align 4
  %v2_11dd4 = load i32, i32* %r5.global-to-local, align 4
  %v3_11dd4 = load i32, i32* @r7, align 4
  %v4_11dd4 = add i32 %v3_11dd4, %v2_11dd4
  %v5_11dd4 = inttoptr i32 %v4_11dd4 to i8*
  store i8 %v0_11dd4.off0, i8* %v5_11dd4, align 1
  %v0_11dd8 = call i32 @function_11e54()
  store i32 %v0_11dd8, i32* %r0.global-to-local, align 4
  store i32 %v0_11dd8, i32* @r4, align 4
  %v2_11ddc = icmp eq i32 %v0_11dd8, 0
  store i1 %v2_11ddc, i1* %cpsr_z.global-to-local, align 1
  %v0_11de0 = load i32, i32* %r5.global-to-local, align 4
  %v1_11de0 = add i32 %v0_11de0, -1
  store i32 %v1_11de0, i32* %r5.global-to-local, align 4
  br i1 %v2_11ddc, label %dec_label_pc_11de8, label %dec_label_pc_11db4

dec_label_pc_11de8:                               ; preds = %bb45
  %v0_11de8 = load i32, i32* %sl.global-to-local, align 4
  %v2_11de8 = icmp eq i32 %v0_11de8, 0
  store i1 %v2_11de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11de8, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_11de8
  %v3_11dec = ptrtoint i32* %stack_var_-32 to i32
  %v3_11df0 = add i32 %v1_11de0, %v3_11dec
  store i32 %v3_11df0, i32* %r2.global-to-local, align 4
  %v4_11df8 = add i32 %v3_11df0, -34
  %v5_11df8 = inttoptr i32 %v4_11df8 to i8*
  store i8 45, i8* %v5_11df8, align 1
  %v0_11dfc.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_11dfc.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_11dfc.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_11de8
  %v1_11dfc = phi i32 [ %v1_11de0, %dec_label_pc_11de8 ], [ %v1_11dfc.pre, %.thread11 ]
  %v2_11dfc = add i32 %v1_11dfc, 1
  store i32 %v2_11dfc, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_11e08 = phi i32 [ %v2_11dfc, %.thread12 ], [ %v1_11dfc.pre, %.thread11 ]
  %v0_11e00 = load i32, i32* @r7, align 4
  %v2_11e00 = add i32 %v0_11e00, %v1_11e08
  %v3_11e00 = inttoptr i32 %v2_11e00 to i8*
  %v4_11e00 = load i8, i8* %v3_11e00, align 1
  %v6_11e00 = zext i8 %v4_11e00 to i32
  %v2_11e04 = icmp eq i8 %v4_11e00, 0
  store i1 %v2_11e04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11e00, i32* %r2.global-to-local, align 4
  br i1 %v2_11e04, label %dec_label_pc_11e4c, label %dec_label_pc_11e14.preheader

dec_label_pc_11e14.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11e14.preheader, %dec_label_pc_11e14
  %v0_11e14 = phi i32 [ 0, %dec_label_pc_11e14.preheader ], [ %v1_11e14, %dec_label_pc_11e14 ]
  %v1_11e14 = add i32 %v0_11e14, 1
  store i32 %v1_11e14, i32* %r1.global-to-local, align 4
  %v2_11e18 = add i32 %v1_11e14, %v2_11e00
  %v3_11e18 = inttoptr i32 %v2_11e18 to i8*
  %v4_11e18 = load i8, i8* %v3_11e18, align 1
  %v2_11e1c = icmp eq i8 %v4_11e18, 0
  store i1 %v2_11e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e1c, label %dec_label_pc_11e24, label %dec_label_pc_11e14

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e14, %dec_label_pc_11e4c
  %v0_11e2824 = phi i32 [ %v6_11e00, %dec_label_pc_11e4c ], [ %v1_11e14, %dec_label_pc_11e14 ]
  %v0_11e24 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11e24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge, %dec_label_pc_11e24
  %v2_11e34 = phi i32 [ %v5_11e34, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v0_11e24, %dec_label_pc_11e24 ]
  %v0_11e2c = phi i32 [ %v0_11e2c.pre, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v2_11e00, %dec_label_pc_11e24 ]
  %v0_11e28 = phi i32 [ %v0_11e28.pre, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v0_11e2824, %dec_label_pc_11e24 ]
  %v1_11e28 = add i32 %v0_11e28, -1
  store i32 %v1_11e28, i32* %r1.global-to-local, align 4
  %v1_11e2c = inttoptr i32 %v0_11e2c to i8*
  %v2_11e2c = load i8, i8* %v1_11e2c, align 1
  %v5_11e2c = add i32 %v0_11e2c, 1
  store i32 %v5_11e2c, i32* %r2.global-to-local, align 4
  %v3_11e30 = icmp eq i32 %v0_11e28, 0
  store i1 %v3_11e30, i1* %cpsr_z.global-to-local, align 1
  %v3_11e34 = inttoptr i32 %v2_11e34 to i8*
  store i8 %v2_11e2c, i8* %v3_11e34, align 1
  %v4_11e34 = load i32, i32* %r0.global-to-local, align 4
  %v5_11e34 = add i32 %v4_11e34, 1
  store i32 %v5_11e34, i32* %r0.global-to-local, align 4
  br i1 %v3_11e30, label %dec_label_pc_11e3c, label %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge

dec_label_pc_11e28.dec_label_pc_11e28_crit_edge:  ; preds = %dec_label_pc_11e28
  %v0_11e28.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11e2c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e28, %.thread1, %dec_label_pc_11d58
  %v0_11e3c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11e3c, i32* %r0.global-to-local, align 4
  store i32 %v3_11d58, i32* @r4, align 4
  store i32 %v12_11d58, i32* @r7, align 4
  ret i32 %v0_11e3c

dec_label_pc_11e4c:                               ; preds = %.thread11._crit_edge
  store i32 %v6_11e00, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e24

; uselistorder directives
  uselistorder i32 %v5_11e34, { 1, 0 }
  uselistorder i1 %v3_11e30, { 1, 0 }
  uselistorder i32 %v0_11e2c, { 1, 0 }
  uselistorder i32 %v1_11e14, { 0, 1, 3, 2 }
  uselistorder i32 %v6_11e00, { 1, 0 }
  uselistorder i32 %v2_11e00, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11dfc.pre, { 1, 0 }
  uselistorder i32 %v1_11de0, { 1, 0, 2 }
  uselistorder i32 %v0_11dd8, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11db8, { 2, 0, 1, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_11d5c, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 9, 0, 5, 4, 1, 6, 2, 7, 3, 8 }
  uselistorder i32 (i32, i32)* @function_11f50, { 1, 0, 5, 2, 4, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e24, { 1, 0 }
  uselistorder label %dec_label_pc_11e14, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_11d80, { 2, 1, 0 }
}

define i32 @function_11e54() local_unnamed_addr {
dec_label_pc_11e54:
  %r2.global-to-local = alloca i32, align 4
  %v0_11e54 = load i32, i32* @r1, align 4
  %v1_11e54 = add i32 %v0_11e54, -1
  store i32 %v1_11e54, i32* %r2.global-to-local, align 4
  %v2_11e54 = icmp eq i32 %v0_11e54, 0
  %v7_11e54 = icmp eq i32 %v0_11e54, 1
  %v0_11e58 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_11e54, i32 %v0_11e58)
  br i1 %v2_11e54, label %dec_label_pc_11f3c, label %dec_label_pc_11e60

dec_label_pc_11e60:                               ; preds = %dec_label_pc_11e54
  %v0_11e60 = load i32, i32* @r0, align 4
  %v1_11e60 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_11e60, %v1_11e60
  br i1 %tmp, label %dec_label_pc_11e68, label %dec_label_pc_11ef4

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e60
  %v1_11e68 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e68 = and i32 %v1_11e68, %v1_11e60
  %v4_11e68 = icmp eq i32 %v2_11e68, 0
  br i1 %v4_11e68, label %dec_label_pc_11f00, label %dec_label_pc_11e70

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11e68
  %v3_11e70 = icmp ult i32 %v1_11e60, 536870912
  br i1 %v3_11e70, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11e70
  %v4_11e74 = mul i32 %v1_11e60, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11e70, %.thread
  %v0_11e94.pr36.ph = phi i32 [ %v4_11e74, %.thread ], [ %v1_11e60, %dec_label_pc_11e70 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11e70 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_11e94.pr36 = phi i32 [ %v4_11e88, %bb81 ], [ %v0_11e94.pr36.ph, %.preheader.preheader ]
  %v1_11e8c = phi i32 [ %v4_11e8c, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_11e80 = icmp ugt i32 %v0_11e94.pr36, 268435455
  br i1 %v2_11e80, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11e94thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_11e84 = icmp ult i32 %v0_11e94.pr36, %v0_11e60
  br i1 %v4_11e84, label %bb80, label %dec_label_pc_11e94thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_11e88 = and i32 %v0_11e94.pr36, 268435456
  %v3_11e88 = icmp eq i32 %v2_11e88, 0
  %v4_11e88 = mul i32 %v0_11e94.pr36, 16
  br i1 %v3_11e88, label %bb81, label %dec_label_pc_11e94.loopexit

bb81:                                             ; preds = %bb80
  %v2_11e8c = and i32 %v1_11e8c, 268435456
  %v3_11e8c = icmp eq i32 %v2_11e8c, 0
  %v4_11e8c = mul i32 %v1_11e8c, 16
  br i1 %v3_11e8c, label %.preheader, label %dec_label_pc_11e94thread-pre-split.loopexit.loopexit

dec_label_pc_11e94thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_11ea048.ph = phi i32 [ %v1_11e8c, %bb ], [ %v4_11e8c, %bb81 ]
  %v0_11e94.pr38.ph = phi i32 [ %v0_11e94.pr36, %bb ], [ %v4_11e88, %bb81 ]
  br label %dec_label_pc_11e94thread-pre-split.loopexit

dec_label_pc_11e94thread-pre-split.loopexit:      ; preds = %dec_label_pc_11e94thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11ea048 = phi i32 [ %v1_11e8c, %.thread2 ], [ %v1_11ea048.ph, %dec_label_pc_11e94thread-pre-split.loopexit.loopexit ]
  %v0_11e94.pr38 = phi i32 [ %v0_11e94.pr36, %.thread2 ], [ %v0_11e94.pr38.ph, %dec_label_pc_11e94thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11e94thread-pre-split

dec_label_pc_11e94thread-pre-split:               ; preds = %dec_label_pc_11e94thread-pre-split.loopexit, %bb83
  %v1_11ea046 = phi i32 [ %v1_11ea048, %dec_label_pc_11e94thread-pre-split.loopexit ], [ %v3_11ea0, %bb83 ]
  %v0_11e94.pr = phi i32 [ %v0_11e94.pr38, %dec_label_pc_11e94thread-pre-split.loopexit ], [ %v3_11e9c, %bb83 ]
  br label %dec_label_pc_11e94

dec_label_pc_11e94.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e94.loopexit, %dec_label_pc_11e94thread-pre-split
  %v1_11ea0 = phi i32 [ %v1_11ea046, %dec_label_pc_11e94thread-pre-split ], [ %v1_11e8c, %dec_label_pc_11e94.loopexit ]
  %v1_11e9c = phi i32 [ %v0_11e94.pr, %dec_label_pc_11e94thread-pre-split ], [ %v4_11e88, %dec_label_pc_11e94.loopexit ]
  %v2_11e94 = icmp slt i32 %v1_11e9c, 0
  br i1 %v2_11e94, label %dec_label_pc_11ea8, label %bb82

bb82:                                             ; preds = %dec_label_pc_11e94
  %v4_11e98 = icmp ult i32 %v1_11e9c, %v0_11e60
  br i1 %v4_11e98, label %bb83, label %dec_label_pc_11ea8

bb83:                                             ; preds = %bb82
  %v3_11e9c = mul i32 %v1_11e9c, 2
  %v2_11ea0 = icmp slt i32 %v1_11ea0, 0
  %v3_11ea0 = mul i32 %v1_11ea0, 2
  br i1 %v2_11ea0, label %dec_label_pc_11ea8, label %dec_label_pc_11e94thread-pre-split

dec_label_pc_11ea8:                               ; preds = %bb82, %dec_label_pc_11e94, %bb83
  %v2_11eb459 = phi i32 [ %v3_11ea0, %bb83 ], [ %v1_11ea0, %bb82 ], [ %v1_11ea0, %dec_label_pc_11e94 ]
  %v1_11eac51 = phi i32 [ %v3_11e9c, %bb83 ], [ %v1_11e9c, %bb82 ], [ %v1_11e9c, %dec_label_pc_11e94 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11eac

dec_label_pc_11eac:                               ; preds = %.thread11, %dec_label_pc_11ea8
  %v1_11ee0 = phi i32 [ %v4_11ee0, %.thread11 ], [ %v2_11eb459, %dec_label_pc_11ea8 ]
  %v1_11eb4 = phi i32 [ %v0_11eec, %.thread11 ], [ 0, %dec_label_pc_11ea8 ]
  %v1_11ee4 = phi i32 [ %v4_11ee4, %.thread11 ], [ %v1_11eac51, %dec_label_pc_11ea8 ]
  %v1_11eb0 = phi i32 [ %v0_11edc, %.thread11 ], [ %v0_11e60, %dec_label_pc_11ea8 ]
  %v3_11eac = icmp ult i32 %v1_11eb0, %v1_11ee4
  br i1 %v3_11eac, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_11eac
  %v3_11eb0 = sub i32 %v1_11eb0, %v1_11ee4
  %v3_11eb4 = or i32 %v1_11eb4, %v1_11ee0
  store i32 %v3_11eb4, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11eac, %bb84
  %v1_11ebc = phi i32 [ %v1_11eb0, %dec_label_pc_11eac ], [ %v3_11eb0, %bb84 ]
  %v1_11ec0 = phi i32 [ %v1_11eb4, %dec_label_pc_11eac ], [ %v3_11eb4, %bb84 ]
  %v4_11eb8 = udiv i32 %v1_11ee4, 2
  %v6_11eb8 = icmp ult i32 %v1_11ebc, %v4_11eb8
  br i1 %v6_11eb8, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_11ebc = urem i32 %v1_11ee4, 2
  %v4_11ebc = icmp eq i32 %v3_11ebc, 0
  %v6_11ebc = sub i32 %v1_11ebc, %v4_11eb8
  br i1 %v4_11ebc, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_11ec0 = udiv i32 %v1_11ee0, 2
  %v6_11ec0 = or i32 %v1_11ec0, %v5_11ec0
  store i32 %v6_11ec0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_11ec8 = phi i32 [ %v6_11ebc, %bb85 ], [ %v1_11ebc, %.thread7 ], [ %v6_11ebc, %bb86 ]
  %v1_11ecc = phi i32 [ %v1_11ec0, %bb85 ], [ %v1_11ec0, %.thread7 ], [ %v6_11ec0, %bb86 ]
  %v4_11ec4 = udiv i32 %v1_11ee4, 4
  %v6_11ec4 = icmp ult i32 %v1_11ec8, %v4_11ec4
  br i1 %v6_11ec4, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_11ec8 = and i32 %v1_11ee4, 2
  %v4_11ec8 = icmp eq i32 %v3_11ec8, 0
  %v6_11ec8 = sub i32 %v1_11ec8, %v4_11ec4
  br i1 %v4_11ec8, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11ecc = udiv i32 %v1_11ee0, 4
  %v6_11ecc = or i32 %v1_11ecc, %v5_11ecc
  store i32 %v6_11ecc, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_11ed4 = phi i32 [ %v6_11ec8, %bb87 ], [ %v1_11ec8, %.thread8 ], [ %v6_11ec8, %bb88 ]
  %v1_11ed8 = phi i32 [ %v1_11ecc, %bb87 ], [ %v1_11ecc, %.thread8 ], [ %v6_11ecc, %bb88 ]
  %v4_11ed0 = udiv i32 %v1_11ee4, 8
  %v6_11ed0 = icmp ult i32 %v1_11ed4, %v4_11ed0
  br i1 %v6_11ed0, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_11ed4 = and i32 %v1_11ee4, 4
  %v4_11ed4 = icmp eq i32 %v3_11ed4, 0
  %v6_11ed4 = sub i32 %v1_11ed4, %v4_11ed0
  br i1 %v4_11ed4, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11ed8 = udiv i32 %v1_11ee0, 8
  %v6_11ed8 = or i32 %v1_11ed8, %v5_11ed8
  store i32 %v6_11ed8, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_11eec = phi i32 [ %v1_11ed8, %bb89 ], [ %v1_11ed8, %.thread9 ], [ %v6_11ed8, %bb90 ]
  %v0_11edc = phi i32 [ %v6_11ed4, %bb89 ], [ %v1_11ed4, %.thread9 ], [ %v6_11ed4, %bb90 ]
  %v2_11edc = icmp eq i32 %v0_11edc, 0
  br i1 %v2_11edc, label %dec_label_pc_11eec, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_11ee0, 16
  br i1 %tmp138, label %dec_label_pc_11eec, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_11ee0 = udiv i32 %v1_11ee0, 16
  %v4_11ee4 = udiv i32 %v1_11ee4, 16
  br label %dec_label_pc_11eac

dec_label_pc_11eec:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_11eec

dec_label_pc_11ef4:                               ; preds = %dec_label_pc_11e60
  %v9_11e60 = icmp eq i32 %v0_11e60, %v1_11e60
  %. = zext i1 %v9_11e60 to i32
  ret i32 %.

dec_label_pc_11f00:                               ; preds = %dec_label_pc_11e68
  %v2_11f00 = icmp ugt i32 %v1_11e60, 65535
  br i1 %v2_11f00, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_11f00
  %v2_11f04 = and i32 %v1_11e60, 32768
  %v3_11f04 = icmp eq i32 %v2_11f04, 0
  %v4_11f04 = udiv i32 %v1_11e60, 65536
  br i1 %v3_11f04, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_11f00
  %v0_11f1065 = phi i32 [ %v1_11e60, %dec_label_pc_11f00 ], [ %v4_11f04, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_11f14 = phi i32 [ %v0_11f1065, %.thread16 ], [ %v4_11f04, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11f10 = icmp ugt i32 %v1_11f14, 255
  br i1 %v2_11f10, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_11f14 = and i32 %v1_11f14, 128
  %v3_11f14 = icmp eq i32 %v2_11f14, 0
  %v4_11f14 = udiv i32 %v1_11f14, 256
  br i1 %v3_11f14, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_11f18 = or i32 %storemerge, 8
  store i32 %v2_11f18, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_11f24 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_11f18, %bb98 ]
  %v1_11f20 = phi i32 [ %v1_11f14, %bb96 ], [ %v4_11f14, %bb97 ], [ %v4_11f14, %bb98 ]
  %v2_11f1c = icmp ugt i32 %v1_11f20, 15
  br i1 %v2_11f1c, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_11f20 = and i32 %v1_11f20, 8
  %v3_11f20 = icmp eq i32 %v2_11f20, 0
  %v4_11f20 = udiv i32 %v1_11f20, 16
  br i1 %v3_11f20, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11f24 = add nsw i32 %v1_11f24, 4
  store i32 %v2_11f24, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_11f2c = phi i32 [ %v1_11f24, %.thread17 ], [ %v1_11f24, %bb99 ], [ %v2_11f24, %bb100 ]
  %v5_11f30 = phi i32 [ %v1_11f20, %.thread17 ], [ %v4_11f20, %bb99 ], [ %v4_11f20, %bb100 ]
  %v2_11f28 = icmp ugt i32 %v5_11f30, 3
  %v7_11f28 = icmp eq i32 %v5_11f30, 4
  %v2_11f2c = xor i1 %v7_11f28, true
  %v3_11f2c = and i1 %v2_11f28, %v2_11f2c
  br i1 %v3_11f2c, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_11f2c = add nsw i32 %v4_11f2c, 3
  store i32 %v5_11f2c, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_11f30 = phi i32 [ %v4_11f2c, %.thread18 ], [ %v5_11f2c, %bb101 ]
  %v2_11f30 = xor i1 %v2_11f28, true
  %v3_11f30 = or i1 %v7_11f28, %v2_11f30
  br i1 %v3_11f30, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_11f30 = udiv i32 %v5_11f30, 2
  %v9_11f30 = add i32 %v4_11f30, %v8_11f30
  store i32 %v9_11f30, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_11f34 = phi i32 [ %v4_11f30, %bb102 ], [ %v9_11f30, %bb103 ]
  %v6_11f34 = lshr i32 %v0_11e60, %v1_11f34
  ret i32 %v6_11f34

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11e54
  %v0_11f3c = load i32, i32* @lr, align 4
  %v0_11f40 = call i32 @function_120ac()
  store i32 %v0_11f3c, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11f30, { 1, 0 }
  uselistorder i1 %v7_11f28, { 1, 0 }
  uselistorder i32 %v4_11f20, { 1, 0 }
  uselistorder i32 %v1_11f20, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11f18, { 1, 0 }
  uselistorder i32 %v4_11f14, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11f14, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11f04, { 1, 0 }
  uselistorder i32 %v0_11edc, { 1, 0 }
  uselistorder i32 %v4_11ed0, { 1, 0 }
  uselistorder i32 %v1_11ed8, { 1, 2, 0 }
  uselistorder i32 %v4_11ec4, { 1, 0 }
  uselistorder i32 %v1_11ecc, { 1, 2, 0 }
  uselistorder i32 %v4_11eb8, { 1, 0 }
  uselistorder i32 %v1_11ec0, { 1, 2, 0 }
  uselistorder i32 %v1_11ee4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11eb4, { 1, 0 }
  uselistorder i32 %v1_11ee0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11ea0, { 1, 0 }
  uselistorder i32 %v3_11e9c, { 1, 0 }
  uselistorder i32 %v1_11e9c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11ea0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11e8c, { 1, 0 }
  uselistorder i32 %v4_11e88, { 2, 1, 0 }
  uselistorder i32 %v1_11e8c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11e94.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_11e60, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_11e60, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11e54, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11eec, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11ea8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e94thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11f50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f50:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_11f54 = call i32 @function_11e54()
  ret i32 %v0_11f54
}

define i32 @function_11f68() local_unnamed_addr {
dec_label_pc_11f68:
  %v0_11f68 = load i32, i32* @r1, align 4
  %v1_11f68 = icmp slt i32 %v0_11f68, 0
  %v2_11f68 = icmp eq i32 %v0_11f68, 0
  %v0_11f6c = load i32, i32* @r0, align 4
  %v2_11f6c = xor i32 %v0_11f6c, %v0_11f68
  br i1 %v2_11f68, label %dec_label_pc_12080, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f68
  br i1 %v1_11f68, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_11f74
  %v2_11f74 = sub i32 0, %v0_11f68
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_11f74, %bb
  %v1_12040 = phi i32 [ %v2_11f74, %bb ], [ %v0_11f68, %dec_label_pc_11f74 ]
  %v1_11f78 = add i32 %v1_12040, -1
  %v7_11f78 = icmp eq i32 %v1_12040, 1
  br i1 %v7_11f78, label %dec_label_pc_12020, label %dec_label_pc_11f80

dec_label_pc_11f80:                               ; preds = %thread-pre-split
  %v1_11f80 = icmp slt i32 %v0_11f6c, 0
  br i1 %v1_11f80, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_11f80
  %v2_11f84 = sub i32 0, %v0_11f6c
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_11f80, %bb84
  %v0_12074 = phi i32 [ %v0_11f6c, %dec_label_pc_11f80 ], [ %v2_11f84, %bb84 ]
  %v3_11f88 = icmp uge i32 %v0_12074, %v1_12040
  %v9_11f88 = icmp eq i32 %v0_12074, %v1_12040
  %v2_11f8c = xor i1 %v3_11f88, true
  %v3_11f8c = or i1 %v9_11f88, %v2_11f8c
  br i1 %v3_11f8c, label %dec_label_pc_1202c, label %dec_label_pc_11f90

dec_label_pc_11f90:                               ; preds = %bb85
  %v2_11f90 = and i32 %v1_11f78, %v1_12040
  %v4_11f90 = icmp eq i32 %v2_11f90, 0
  br i1 %v4_11f90, label %dec_label_pc_1203c, label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f90
  %v3_11f98 = icmp ult i32 %v1_12040, 536870912
  br i1 %v3_11f98, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11f98
  %v4_11f9c = mul i32 %v1_12040, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11f98, %.thread
  %v0_11fbc.pr40.ph = phi i32 [ %v4_11f9c, %.thread ], [ %v1_12040, %dec_label_pc_11f98 ]
  %storemerge142 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11f98 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb88
  %v0_11fbc.pr40 = phi i32 [ %v4_11fb0, %bb88 ], [ %v0_11fbc.pr40.ph, %.preheader.preheader ]
  %v1_11fb4 = phi i32 [ %v4_11fb4, %bb88 ], [ %storemerge142, %.preheader.preheader ]
  %v2_11fa8 = icmp ugt i32 %v0_11fbc.pr40, 268435455
  br i1 %v2_11fa8, label %.thread3, label %bb86

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_11fbcthread-pre-split.loopexit

bb86:                                             ; preds = %.preheader
  %v4_11fac = icmp ult i32 %v0_11fbc.pr40, %v0_12074
  br i1 %v4_11fac, label %bb87, label %dec_label_pc_11fbcthread-pre-split.loopexit.loopexit

bb87:                                             ; preds = %bb86
  %v2_11fb0 = and i32 %v0_11fbc.pr40, 268435456
  %v3_11fb0 = icmp eq i32 %v2_11fb0, 0
  %v4_11fb0 = mul i32 %v0_11fbc.pr40, 16
  br i1 %v3_11fb0, label %bb88, label %dec_label_pc_11fbc.loopexit

bb88:                                             ; preds = %bb87
  %v2_11fb4 = and i32 %v1_11fb4, 268435456
  %v3_11fb4 = icmp eq i32 %v2_11fb4, 0
  %v4_11fb4 = mul i32 %v1_11fb4, 16
  br i1 %v3_11fb4, label %.preheader, label %dec_label_pc_11fbcthread-pre-split.loopexit.loopexit

dec_label_pc_11fbcthread-pre-split.loopexit.loopexit: ; preds = %bb88, %bb86
  %v1_11fc852.ph = phi i32 [ %v1_11fb4, %bb86 ], [ %v4_11fb4, %bb88 ]
  %v0_11fbc.pr42.ph = phi i32 [ %v0_11fbc.pr40, %bb86 ], [ %v4_11fb0, %bb88 ]
  br label %dec_label_pc_11fbcthread-pre-split.loopexit

dec_label_pc_11fbcthread-pre-split.loopexit:      ; preds = %dec_label_pc_11fbcthread-pre-split.loopexit.loopexit, %.thread3
  %v1_11fc852 = phi i32 [ %v1_11fb4, %.thread3 ], [ %v1_11fc852.ph, %dec_label_pc_11fbcthread-pre-split.loopexit.loopexit ]
  %v0_11fbc.pr42 = phi i32 [ %v0_11fbc.pr40, %.thread3 ], [ %v0_11fbc.pr42.ph, %dec_label_pc_11fbcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11fbcthread-pre-split

dec_label_pc_11fbcthread-pre-split:               ; preds = %dec_label_pc_11fbcthread-pre-split.loopexit, %bb90
  %v1_11fc850 = phi i32 [ %v1_11fc852, %dec_label_pc_11fbcthread-pre-split.loopexit ], [ %v3_11fc8, %bb90 ]
  %v2_11fc048 = phi i32 [ %v0_12074, %dec_label_pc_11fbcthread-pre-split.loopexit ], [ %v2_11fc0, %bb90 ]
  %v0_11fbc.pr = phi i32 [ %v0_11fbc.pr42, %dec_label_pc_11fbcthread-pre-split.loopexit ], [ %v3_11fc4, %bb90 ]
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc.loopexit:                      ; preds = %bb87
  br label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11fbc.loopexit, %dec_label_pc_11fbcthread-pre-split
  %v1_11fc8 = phi i32 [ %v1_11fc850, %dec_label_pc_11fbcthread-pre-split ], [ %v1_11fb4, %dec_label_pc_11fbc.loopexit ]
  %v2_11fc0 = phi i32 [ %v2_11fc048, %dec_label_pc_11fbcthread-pre-split ], [ %v0_12074, %dec_label_pc_11fbc.loopexit ]
  %v1_11fc4 = phi i32 [ %v0_11fbc.pr, %dec_label_pc_11fbcthread-pre-split ], [ %v4_11fb0, %dec_label_pc_11fbc.loopexit ]
  %v2_11fbc = icmp slt i32 %v1_11fc4, 0
  br i1 %v2_11fbc, label %dec_label_pc_11fd0, label %bb89

bb89:                                             ; preds = %dec_label_pc_11fbc
  %v4_11fc0 = icmp ult i32 %v1_11fc4, %v2_11fc0
  br i1 %v4_11fc0, label %bb90, label %dec_label_pc_11fd0

bb90:                                             ; preds = %bb89
  %v3_11fc4 = mul i32 %v1_11fc4, 2
  %v2_11fc8 = icmp slt i32 %v1_11fc8, 0
  %v3_11fc8 = mul i32 %v1_11fc8, 2
  br i1 %v2_11fc8, label %dec_label_pc_11fd0, label %dec_label_pc_11fbcthread-pre-split

dec_label_pc_11fd0:                               ; preds = %bb89, %dec_label_pc_11fbc, %bb90
  %v2_11fdc63 = phi i32 [ %v3_11fc8, %bb90 ], [ %v1_11fc8, %bb89 ], [ %v1_11fc8, %dec_label_pc_11fbc ]
  %v1_11fd455 = phi i32 [ %v3_11fc4, %bb90 ], [ %v1_11fc4, %bb89 ], [ %v1_11fc4, %dec_label_pc_11fbc ]
  br label %dec_label_pc_11fd4

dec_label_pc_11fd4:                               ; preds = %.thread13, %dec_label_pc_11fd0
  %v1_12008 = phi i32 [ %v4_12008, %.thread13 ], [ %v2_11fdc63, %dec_label_pc_11fd0 ]
  %v1_11fdc = phi i32 [ %v1_12018, %.thread13 ], [ 0, %dec_label_pc_11fd0 ]
  %v1_1200c = phi i32 [ %v4_1200c, %.thread13 ], [ %v1_11fd455, %dec_label_pc_11fd0 ]
  %v1_11fd8 = phi i32 [ %v0_12004, %.thread13 ], [ %v0_12074, %dec_label_pc_11fd0 ]
  %v3_11fd4 = icmp ult i32 %v1_11fd8, %v1_1200c
  br i1 %v3_11fd4, label %.thread8, label %bb91

bb91:                                             ; preds = %dec_label_pc_11fd4
  %v3_11fd8 = sub i32 %v1_11fd8, %v1_1200c
  %v3_11fdc = or i32 %v1_11fdc, %v1_12008
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_11fd4, %bb91
  %v1_11fe4 = phi i32 [ %v1_11fd8, %dec_label_pc_11fd4 ], [ %v3_11fd8, %bb91 ]
  %v1_11fe8 = phi i32 [ %v1_11fdc, %dec_label_pc_11fd4 ], [ %v3_11fdc, %bb91 ]
  %v4_11fe0 = udiv i32 %v1_1200c, 2
  %v6_11fe0 = icmp ult i32 %v1_11fe4, %v4_11fe0
  br i1 %v6_11fe0, label %.thread9, label %bb92

bb92:                                             ; preds = %.thread8
  %v3_11fe4 = urem i32 %v1_1200c, 2
  %v4_11fe4 = icmp eq i32 %v3_11fe4, 0
  %v6_11fe4 = sub i32 %v1_11fe4, %v4_11fe0
  br i1 %v4_11fe4, label %.thread9, label %bb93

bb93:                                             ; preds = %bb92
  %v5_11fe8 = udiv i32 %v1_12008, 2
  %v6_11fe8 = or i32 %v1_11fe8, %v5_11fe8
  br label %.thread9

.thread9:                                         ; preds = %bb92, %.thread8, %bb93
  %v1_11ff0 = phi i32 [ %v6_11fe4, %bb92 ], [ %v1_11fe4, %.thread8 ], [ %v6_11fe4, %bb93 ]
  %v1_11ff4 = phi i32 [ %v1_11fe8, %bb92 ], [ %v1_11fe8, %.thread8 ], [ %v6_11fe8, %bb93 ]
  %v4_11fec = udiv i32 %v1_1200c, 4
  %v6_11fec = icmp ult i32 %v1_11ff0, %v4_11fec
  br i1 %v6_11fec, label %.thread10, label %bb94

bb94:                                             ; preds = %.thread9
  %v3_11ff0 = and i32 %v1_1200c, 2
  %v4_11ff0 = icmp eq i32 %v3_11ff0, 0
  %v6_11ff0 = sub i32 %v1_11ff0, %v4_11fec
  br i1 %v4_11ff0, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  %v5_11ff4 = udiv i32 %v1_12008, 4
  %v6_11ff4 = or i32 %v1_11ff4, %v5_11ff4
  br label %.thread10

.thread10:                                        ; preds = %bb94, %.thread9, %bb95
  %v1_11ffc = phi i32 [ %v6_11ff0, %bb94 ], [ %v1_11ff0, %.thread9 ], [ %v6_11ff0, %bb95 ]
  %v1_12000 = phi i32 [ %v1_11ff4, %bb94 ], [ %v1_11ff4, %.thread9 ], [ %v6_11ff4, %bb95 ]
  %v4_11ff8 = udiv i32 %v1_1200c, 8
  %v6_11ff8 = icmp ult i32 %v1_11ffc, %v4_11ff8
  br i1 %v6_11ff8, label %thread-pre-split12, label %bb96

bb96:                                             ; preds = %.thread10
  %v3_11ffc = and i32 %v1_1200c, 4
  %v4_11ffc = icmp eq i32 %v3_11ffc, 0
  %v6_11ffc = sub i32 %v1_11ffc, %v4_11ff8
  br i1 %v4_11ffc, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %bb96
  %v5_12000 = udiv i32 %v1_12008, 8
  %v6_12000 = or i32 %v1_12000, %v5_12000
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb97, %.thread10, %bb96
  %v1_12018 = phi i32 [ %v1_12000, %bb96 ], [ %v1_12000, %.thread10 ], [ %v6_12000, %bb97 ]
  %v0_12004 = phi i32 [ %v6_11ffc, %bb96 ], [ %v1_11ffc, %.thread10 ], [ %v6_11ffc, %bb97 ]
  %v2_12004 = icmp eq i32 %v0_12004, 0
  br i1 %v2_12004, label %dec_label_pc_12014, label %bb98

bb98:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_12008, 16
  br i1 %tmp, label %dec_label_pc_12014, label %.thread13

.thread13:                                        ; preds = %bb98
  %v4_12008 = udiv i32 %v1_12008, 16
  %v4_1200c = udiv i32 %v1_1200c, 16
  br label %dec_label_pc_11fd4

dec_label_pc_12014:                               ; preds = %thread-pre-split12, %bb98
  %v1_12014 = icmp slt i32 %v2_11f6c, 0
  br i1 %v1_12014, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_12014
  %v2_12018 = sub i32 0, %v1_12018
  br label %.thread16

.thread16:                                        ; preds = %bb103, %bb102, %bb100, %dec_label_pc_12020, %dec_label_pc_12014, %bb99
  %v1_1201c = phi i32 [ %v1_12018, %dec_label_pc_12014 ], [ %v2_12018, %bb99 ], [ %v2_12024, %bb100 ], [ undef, %dec_label_pc_12020 ], [ %v1_1203880, %bb102 ], [ %v2_12034, %bb103 ]
  ret i32 %v1_1201c

dec_label_pc_12020:                               ; preds = %thread-pre-split
  br i1 %v1_11f68, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_12020
  %v2_12024 = sub i32 0, %v0_11f6c
  br label %.thread16

dec_label_pc_1202c:                               ; preds = %bb85
  br i1 %v3_11f88, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_1202c
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_1202c, %bb101
  %v1_1203880 = phi i32 [ %v0_11f6c, %dec_label_pc_1202c ], [ 0, %bb101 ]
  br i1 %v9_11f88, label %bb103, label %.thread16

bb103:                                            ; preds = %bb102
  %v4_12030 = ashr i32 %v2_11f6c, 31
  %v2_12034 = or i32 %v4_12030, 1
  br label %.thread16

dec_label_pc_1203c:                               ; preds = %dec_label_pc_11f90
  %v2_1203c = icmp ugt i32 %v1_12040, 65535
  br i1 %v2_1203c, label %bb104, label %.thread19

bb104:                                            ; preds = %dec_label_pc_1203c
  %v2_12040 = and i32 %v1_12040, 32768
  %v3_12040 = icmp eq i32 %v2_12040, 0
  %v4_12040 = udiv i32 %v1_12040, 65536
  br i1 %v3_12040, label %.thread19, label %bb105

.thread19:                                        ; preds = %bb104, %dec_label_pc_1203c
  %v0_1204c70 = phi i32 [ %v1_12040, %dec_label_pc_1203c ], [ %v4_12040, %bb104 ]
  br label %bb105

bb105:                                            ; preds = %bb104, %.thread19
  %v1_12050 = phi i32 [ %v0_1204c70, %.thread19 ], [ %v4_12040, %bb104 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb104 ]
  %v2_1204c = icmp ugt i32 %v1_12050, 255
  br i1 %v2_1204c, label %bb106, label %.thread20

bb106:                                            ; preds = %bb105
  %v2_12050 = and i32 %v1_12050, 128
  %v3_12050 = icmp eq i32 %v2_12050, 0
  %v4_12050 = udiv i32 %v1_12050, 256
  br i1 %v3_12050, label %.thread20, label %bb107

bb107:                                            ; preds = %bb106
  %v2_12054 = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb106, %bb105, %bb107
  %v1_12060 = phi i32 [ %storemerge, %bb105 ], [ %storemerge, %bb106 ], [ %v2_12054, %bb107 ]
  %v1_1205c = phi i32 [ %v1_12050, %bb105 ], [ %v4_12050, %bb106 ], [ %v4_12050, %bb107 ]
  %v2_12058 = icmp ugt i32 %v1_1205c, 15
  br i1 %v2_12058, label %bb108, label %.thread21

bb108:                                            ; preds = %.thread20
  %v2_1205c = and i32 %v1_1205c, 8
  %v3_1205c = icmp eq i32 %v2_1205c, 0
  %v4_1205c = udiv i32 %v1_1205c, 16
  br i1 %v3_1205c, label %.thread21, label %bb109

bb109:                                            ; preds = %bb108
  %v2_12060 = add nsw i32 %v1_12060, 4
  br label %.thread21

.thread21:                                        ; preds = %bb108, %.thread20, %bb109
  %v4_12068 = phi i32 [ %v1_12060, %.thread20 ], [ %v1_12060, %bb108 ], [ %v2_12060, %bb109 ]
  %v5_1206c = phi i32 [ %v1_1205c, %.thread20 ], [ %v4_1205c, %bb108 ], [ %v4_1205c, %bb109 ]
  %v2_12064 = icmp ugt i32 %v5_1206c, 3
  %v7_12064 = icmp eq i32 %v5_1206c, 4
  %v2_12068 = xor i1 %v7_12064, true
  %v3_12068 = and i1 %v2_12064, %v2_12068
  br i1 %v3_12068, label %bb110, label %bb111

bb110:                                            ; preds = %.thread21
  %v5_12068 = add nsw i32 %v4_12068, 3
  br label %bb111

bb111:                                            ; preds = %.thread21, %bb110
  %v4_1206c = phi i32 [ %v4_12068, %.thread21 ], [ %v5_12068, %bb110 ]
  %v2_1206c = xor i1 %v2_12064, true
  %v3_1206c = or i1 %v7_12064, %v2_1206c
  br i1 %v3_1206c, label %bb112, label %bb113

bb112:                                            ; preds = %bb111
  %v8_1206c = udiv i32 %v5_1206c, 2
  %v9_1206c = add i32 %v4_1206c, %v8_1206c
  br label %bb113

bb113:                                            ; preds = %bb111, %bb112
  %v1_12074 = phi i32 [ %v4_1206c, %bb111 ], [ %v9_1206c, %bb112 ]
  %v1_12070 = icmp slt i32 %v2_11f6c, 0
  %v6_12074 = lshr i32 %v0_12074, %v1_12074
  %v2_12078 = sub i32 0, %v6_12074
  %v2_12078.v6_12074 = select i1 %v1_12070, i32 %v2_12078, i32 %v6_12074
  ret i32 %v2_12078.v6_12074

dec_label_pc_12080:                               ; preds = %dec_label_pc_11f68
  %v0_12084 = call i32 @function_120ac()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1206c, { 1, 0 }
  uselistorder i1 %v7_12064, { 1, 0 }
  uselistorder i32 %v4_1205c, { 1, 0 }
  uselistorder i32 %v1_1205c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12050, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_12050, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12040, { 1, 0 }
  uselistorder i32 %v0_12004, { 1, 0 }
  uselistorder i32 %v4_11ff8, { 1, 0 }
  uselistorder i32 %v1_12000, { 1, 2, 0 }
  uselistorder i32 %v4_11fec, { 1, 0 }
  uselistorder i32 %v1_11ff4, { 1, 2, 0 }
  uselistorder i32 %v4_11fe0, { 1, 0 }
  uselistorder i32 %v1_11fe8, { 1, 2, 0 }
  uselistorder i32 %v1_1200c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11fdc, { 1, 0 }
  uselistorder i32 %v1_12008, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11fc8, { 1, 0 }
  uselistorder i32 %v3_11fc4, { 1, 0 }
  uselistorder i32 %v1_11fc4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11fc0, { 1, 0 }
  uselistorder i32 %v1_11fc8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11fb4, { 1, 0 }
  uselistorder i32 %v4_11fb0, { 2, 1, 0 }
  uselistorder i32 %v1_11fb4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11fbc.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_11f88, { 1, 0 }
  uselistorder i32 %v1_12040, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_11f6c, { 1, 0, 2 }
  uselistorder i32 %v0_11f6c, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %v0_11f68, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @function_120ac, { 1, 0 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %bb111, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_11fd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11fbcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_12094(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12094:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_12098 = call i32 @function_11f68()
  ret i32 %v0_12098
}

define i32 @function_120ac() local_unnamed_addr {
dec_label_pc_120ac:
  %v1_120b4 = call i32 @function_12d0c(i32 8)
  ret i32 %v1_120b4
}

define i32 @function_120c0() local_unnamed_addr {
dec_label_pc_120c0:
  %v1_120d0 = load i32, i32* @r0, align 4
  ret i32 %v1_120d0
}

define i32 @function_120d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120d4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_120d4 = load i32, i32* @r2, align 4
  %v9_120d4 = load i32, i32* @r3, align 4
  store i32 %v9_120d4, i32* %stack_var_-4, align 4
  %v1_120e4 = and i32 %arg2, 64
  %v2_120e4 = icmp eq i32 %v1_120e4, 0
  br i1 %v2_120e4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_120d4
  %v3_120ec = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_120ec, i32* @r3, align 4
  %phitmp = urem i32 %v6_120d4, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_120d4, %bb
  %v0_120f0 = phi i32 [ 0, %dec_label_pc_120d4 ], [ %phitmp, %bb ]
  store i32 %v0_120f0, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12120, label %dec_label_pc_12110

dec_label_pc_12110:                               ; preds = %.thread
  %v0_12110 = call i32 @function_128f0()
  %v0_12114 = load i32, i32* %r7.global-to-local, align 4
  %v1_12114 = sub i32 0, %v0_12114
  store i32 %v1_12114, i32* @r3, align 4
  %v2_12118 = inttoptr i32 %v0_12110 to i32*
  store i32 %v1_12114, i32* %v2_12118, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12120

dec_label_pc_12120:                               ; preds = %.thread, %dec_label_pc_12110
  %v0_12120 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_12110 ]
  ret i32 %v0_12120

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12120, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12134() local_unnamed_addr {
dec_label_pc_12134:
  %v1_12144 = load i32, i32* @r0, align 4
  ret i32 %v1_12144
}

define i32 @function_12148(i32* %arg1) local_unnamed_addr {
dec_label_pc_12148:
  %stack_var_-16 = alloca i32, align 4
  %v2_1214c = ptrtoint i32* %stack_var_-16 to i32
  %v2_1215c = call i32 @function_122c8(i32 %v2_1214c, i32 0)
  %v2_12160 = load i32, i32* %stack_var_-16, align 4
  %v2_12164 = icmp eq i32* %arg1, null
  br i1 %v2_12164, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_12148
  store i32 %v2_12160, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_12148, %bb
  ret i32 %v2_12160

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_12178(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12178:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_121ac, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12178
  %v0_1219c = call i32 @function_128f0()
  %v0_121a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_121a0 = sub i32 0, %v0_121a0
  %v2_121a4 = inttoptr i32 %v0_1219c to i32*
  store i32 %v1_121a0, i32* %v2_121a4, align 4
  br label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12178, %dec_label_pc_1219c
  %v1_121b4 = phi i32 [ %arg1, %dec_label_pc_12178 ], [ -1, %dec_label_pc_1219c ]
  ret i32 %v1_121b4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_121ac, { 1, 0 }
}

define i32 @function_121b8() local_unnamed_addr {
dec_label_pc_121b8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_121b8 = load i32, i32* @r7, align 4
  store i32 %v3_121b8, i32* %stack_var_-8, align 4
  %v0_121c4 = load i32, i32* @r0, align 4
  store i32 %v0_121c4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_121c4, -4095
  br i1 %tmp, label %dec_label_pc_121e4, label %dec_label_pc_121d4

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121b8
  %v0_121d4 = call i32 @function_128f0()
  %v0_121d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_121d8 = sub i32 0, %v0_121d8
  %v2_121dc = inttoptr i32 %v0_121d4 to i32*
  store i32 %v1_121d8, i32* %v2_121dc, align 4
  %v2_121e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_121e4

dec_label_pc_121e4:                               ; preds = %dec_label_pc_121b8, %dec_label_pc_121d4
  %v1_121e8 = phi i32 [ %v0_121c4, %dec_label_pc_121b8 ], [ -1, %dec_label_pc_121d4 ]
  %v2_121e4 = phi i32 [ %v3_121b8, %dec_label_pc_121b8 ], [ %v2_121e4.pre, %dec_label_pc_121d4 ]
  store i32 %v2_121e4, i32* @r7, align 4
  ret i32 %v1_121e8

; uselistorder directives
  uselistorder i32 %v0_121c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121e4, { 1, 0 }
}

define i32 @function_121ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_121ec:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1221c, label %dec_label_pc_1220c

dec_label_pc_1220c:                               ; preds = %dec_label_pc_121ec
  %v0_1220c = call i32 @function_128f0()
  %v0_12210 = load i32, i32* %r4.global-to-local, align 4
  %v1_12210 = sub i32 0, %v0_12210
  %v2_12214 = inttoptr i32 %v0_1220c to i32*
  store i32 %v1_12210, i32* %v2_12214, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_121ec, %dec_label_pc_1220c
  %v0_1221c = phi i32 [ %arg1, %dec_label_pc_121ec ], [ -1, %dec_label_pc_1220c ]
  ret i32 %v0_1221c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1221c, { 1, 0 }
}

define i32 @function_1222c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1222c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1222c = load i32, i32* @r7, align 4
  store i32 %v3_1222c, i32* %stack_var_-8, align 4
  %v0_12238 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12238, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12238, -4095
  br i1 %tmp, label %dec_label_pc_12258, label %dec_label_pc_12248

dec_label_pc_12248:                               ; preds = %dec_label_pc_1222c
  %v0_12248 = call i32 @function_128f0()
  %v0_1224c = load i32, i32* %r7.global-to-local, align 4
  %v1_1224c = sub i32 0, %v0_1224c
  %v2_12250 = inttoptr i32 %v0_12248 to i32*
  store i32 %v1_1224c, i32* %v2_12250, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12258.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12258

dec_label_pc_12258:                               ; preds = %dec_label_pc_1222c, %dec_label_pc_12248
  %v1_1225c = phi i32 [ %v0_12238, %dec_label_pc_1222c ], [ -1, %dec_label_pc_12248 ]
  %v2_12258 = phi i32 [ %v3_1222c, %dec_label_pc_1222c ], [ %v2_12258.pre, %dec_label_pc_12248 ]
  store i32 %v2_12258, i32* @r7, align 4
  ret i32 %v1_1225c

; uselistorder directives
  uselistorder i32 %v0_12238, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12258, { 1, 0 }
}

define i32 @function_12260(i32 %arg1) local_unnamed_addr {
dec_label_pc_12260:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12260 = load i32, i32* @r7, align 4
  store i32 %v3_12260, i32* %stack_var_-8, align 4
  %v0_1226c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1226c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1226c, -4095
  br i1 %tmp, label %dec_label_pc_1228c, label %dec_label_pc_1227c

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12260
  %v0_1227c = call i32 @function_128f0()
  %v0_12280 = load i32, i32* %r7.global-to-local, align 4
  %v1_12280 = sub i32 0, %v0_12280
  %v2_12284 = inttoptr i32 %v0_1227c to i32*
  store i32 %v1_12280, i32* %v2_12284, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1228c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %dec_label_pc_12260, %dec_label_pc_1227c
  %v1_12290 = phi i32 [ %v0_1226c, %dec_label_pc_12260 ], [ -1, %dec_label_pc_1227c ]
  %v2_1228c = phi i32 [ %v3_12260, %dec_label_pc_12260 ], [ %v2_1228c.pre, %dec_label_pc_1227c ]
  store i32 %v2_1228c, i32* @r7, align 4
  ret i32 %v1_12290

; uselistorder directives
  uselistorder i32 %v0_1226c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1228c, { 1, 0 }
}

define i32 @function_12294(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12294:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12294 = load i32, i32* @r7, align 4
  store i32 %v3_12294, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_122bc, label %dec_label_pc_122ac

dec_label_pc_122ac:                               ; preds = %dec_label_pc_12294
  %v0_122ac = call i32 @function_128f0()
  %v0_122b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_122b0 = sub i32 0, %v0_122b0
  %v2_122b4 = inttoptr i32 %v0_122ac to i32*
  store i32 %v1_122b0, i32* %v2_122b4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_122c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_12294, %dec_label_pc_122ac
  %v2_122c0 = phi i32 [ %v3_12294, %dec_label_pc_12294 ], [ %v2_122c0.pre, %dec_label_pc_122ac ]
  %v0_122bc = phi i32 [ %arg1, %dec_label_pc_12294 ], [ -1, %dec_label_pc_122ac ]
  store i32 %v2_122c0, i32* @r7, align 4
  ret i32 %v0_122bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122bc, { 1, 0 }
}

define i32 @function_122c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122c8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122c8 = load i32, i32* @r7, align 4
  store i32 %v3_122c8, i32* %stack_var_-8, align 4
  %v0_122d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_122d4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_122d4, -4095
  br i1 %tmp, label %dec_label_pc_122f4, label %dec_label_pc_122e4

dec_label_pc_122e4:                               ; preds = %dec_label_pc_122c8
  %v0_122e4 = call i32 @function_128f0()
  %v0_122e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_122e8 = sub i32 0, %v0_122e8
  store i32 %v1_122e8, i32* @r3, align 4
  %v2_122ec = inttoptr i32 %v0_122e4 to i32*
  store i32 %v1_122e8, i32* %v2_122ec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_122f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_122f4

dec_label_pc_122f4:                               ; preds = %dec_label_pc_122c8, %dec_label_pc_122e4
  %v1_122f8 = phi i32 [ %v0_122d4, %dec_label_pc_122c8 ], [ -1, %dec_label_pc_122e4 ]
  %v2_122f4 = phi i32 [ %v3_122c8, %dec_label_pc_122c8 ], [ %v2_122f4.pre, %dec_label_pc_122e4 ]
  store i32 %v2_122f4, i32* @r7, align 4
  ret i32 %v1_122f8

; uselistorder directives
  uselistorder i32 %v0_122d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_122f4, { 1, 0 }
}

define i32 @function_122fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122fc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_122fc = load i32, i32* @r3, align 4
  store i32 %v9_122fc, i32* %stack_var_-4, align 4
  %v2_12314 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_12314, i32* @r3, align 4
  %v0_12338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12338, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12338, -4095
  br i1 %tmp, label %dec_label_pc_12358, label %dec_label_pc_12348

dec_label_pc_12348:                               ; preds = %dec_label_pc_122fc
  %v0_12348 = call i32 @function_128f0()
  %v0_1234c = load i32, i32* %r7.global-to-local, align 4
  %v1_1234c = sub i32 0, %v0_1234c
  store i32 %v1_1234c, i32* @r3, align 4
  %v2_12350 = inttoptr i32 %v0_12348 to i32*
  store i32 %v1_1234c, i32* %v2_12350, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12358

dec_label_pc_12358:                               ; preds = %dec_label_pc_122fc, %dec_label_pc_12348
  %v1_12364 = phi i32 [ %v0_12338, %dec_label_pc_122fc ], [ -1, %dec_label_pc_12348 ]
  ret i32 %v1_12364

; uselistorder directives
  uselistorder i32 %v0_12338, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12358, { 1, 0 }
}

define i32 @function_12368(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12368:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_123a4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_123a4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_123a4, -4095
  br i1 %tmp, label %dec_label_pc_123c4, label %dec_label_pc_123b4

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12368
  %v0_123b4 = call i32 @function_128f0()
  %v0_123b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_123b8 = sub i32 0, %v0_123b8
  %v2_123bc = inttoptr i32 %v0_123b4 to i32*
  store i32 %v1_123b8, i32* %v2_123bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123c4

dec_label_pc_123c4:                               ; preds = %dec_label_pc_12368, %dec_label_pc_123b4
  %v1_123d0 = phi i32 [ %v0_123a4, %dec_label_pc_12368 ], [ -1, %dec_label_pc_123b4 ]
  ret i32 %v1_123d0

; uselistorder directives
  uselistorder i32 %v0_123a4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_123c4, { 1, 0 }
}

define i32 @function_123d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123d4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123d4 = load i32, i32* @r7, align 4
  store i32 %v3_123d4, i32* %stack_var_-8, align 4
  %v0_123e0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_123e0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_123e0, -4095
  br i1 %tmp, label %dec_label_pc_12400, label %dec_label_pc_123f0

dec_label_pc_123f0:                               ; preds = %dec_label_pc_123d4
  %v0_123f0 = call i32 @function_128f0()
  %v0_123f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_123f4 = sub i32 0, %v0_123f4
  %v2_123f8 = inttoptr i32 %v0_123f0 to i32*
  store i32 %v1_123f4, i32* %v2_123f8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12400.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %dec_label_pc_123d4, %dec_label_pc_123f0
  %v1_12404 = phi i32 [ %v0_123e0, %dec_label_pc_123d4 ], [ -1, %dec_label_pc_123f0 ]
  %v2_12400 = phi i32 [ %v3_123d4, %dec_label_pc_123d4 ], [ %v2_12400.pre, %dec_label_pc_123f0 ]
  store i32 %v2_12400, i32* @r7, align 4
  ret i32 %v1_12404

; uselistorder directives
  uselistorder i32 %v0_123e0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12400, { 1, 0 }
}

define i32 @function_12408(i32 %arg1) local_unnamed_addr {
dec_label_pc_12408:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12408 = load i32, i32* @r7, align 4
  store i32 %v3_12408, i32* %stack_var_-8, align 4
  %v0_12414 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12414, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12414, -4095
  br i1 %tmp, label %dec_label_pc_12434, label %dec_label_pc_12424

dec_label_pc_12424:                               ; preds = %dec_label_pc_12408
  %v0_12424 = call i32 @function_128f0()
  %v0_12428 = load i32, i32* %r7.global-to-local, align 4
  %v1_12428 = sub i32 0, %v0_12428
  %v2_1242c = inttoptr i32 %v0_12424 to i32*
  store i32 %v1_12428, i32* %v2_1242c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12434.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12434

dec_label_pc_12434:                               ; preds = %dec_label_pc_12408, %dec_label_pc_12424
  %v1_12438 = phi i32 [ %v0_12414, %dec_label_pc_12408 ], [ -1, %dec_label_pc_12424 ]
  %v2_12434 = phi i32 [ %v3_12408, %dec_label_pc_12408 ], [ %v2_12434.pre, %dec_label_pc_12424 ]
  store i32 %v2_12434, i32* @r7, align 4
  ret i32 %v1_12438

; uselistorder directives
  uselistorder i32 %v0_12414, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12434, { 1, 0 }
}

define i32 @function_1243c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1243c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1243c = load i32, i32* @r3, align 4
  store i32 %v9_1243c, i32* %stack_var_-4, align 4
  %v2_12448 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_12448, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1247c, label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_1243c
  %v0_1246c = call i32 @function_128f0()
  %v0_12470 = load i32, i32* %r7.global-to-local, align 4
  %v1_12470 = sub i32 0, %v0_12470
  store i32 %v1_12470, i32* @r3, align 4
  %v2_12474 = inttoptr i32 %v0_1246c to i32*
  store i32 %v1_12470, i32* %v2_12474, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1247c

dec_label_pc_1247c:                               ; preds = %dec_label_pc_1243c, %dec_label_pc_1246c
  %v0_1247c = phi i32 [ %arg1, %dec_label_pc_1243c ], [ -1, %dec_label_pc_1246c ]
  ret i32 %v0_1247c

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1247c, { 1, 0 }
}

define i32 @function_12490(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12490:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12490 = load i32, i32* @r7, align 4
  store i32 %v3_12490, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_124bc, label %dec_label_pc_124ac

dec_label_pc_124ac:                               ; preds = %dec_label_pc_12490
  %v0_124ac = call i32 @function_128f0()
  %v0_124b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_124b0 = sub i32 0, %v0_124b0
  %v2_124b4 = inttoptr i32 %v0_124ac to i32*
  store i32 %v1_124b0, i32* %v2_124b4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_124c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124bc

dec_label_pc_124bc:                               ; preds = %dec_label_pc_12490, %dec_label_pc_124ac
  %v2_124c0 = phi i32 [ %v3_12490, %dec_label_pc_12490 ], [ %v2_124c0.pre, %dec_label_pc_124ac ]
  %v0_124bc = phi i32 [ %arg1, %dec_label_pc_12490 ], [ -1, %dec_label_pc_124ac ]
  store i32 %v2_124c0, i32* @r7, align 4
  ret i32 %v0_124bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124bc, { 1, 0 }
}

define i32 @function_124c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_124c8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124c8 = load i32, i32* @r7, align 4
  store i32 %v3_124c8, i32* %stack_var_-8, align 4
  %v0_124d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_124d4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_124d4, -4095
  br i1 %tmp, label %dec_label_pc_124f4, label %dec_label_pc_124e4

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124c8
  %v0_124e4 = call i32 @function_128f0()
  %v0_124e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_124e8 = sub i32 0, %v0_124e8
  store i32 %v1_124e8, i32* @r3, align 4
  %v2_124ec = inttoptr i32 %v0_124e4 to i32*
  store i32 %v1_124e8, i32* %v2_124ec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_124f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124f4

dec_label_pc_124f4:                               ; preds = %dec_label_pc_124c8, %dec_label_pc_124e4
  %v1_124f8 = phi i32 [ %v0_124d4, %dec_label_pc_124c8 ], [ -1, %dec_label_pc_124e4 ]
  %v2_124f4 = phi i32 [ %v3_124c8, %dec_label_pc_124c8 ], [ %v2_124f4.pre, %dec_label_pc_124e4 ]
  store i32 %v2_124f4, i32* @r7, align 4
  ret i32 %v1_124f8

; uselistorder directives
  uselistorder i32 %v0_124d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_124f4, { 1, 0 }
}

define i32 @function_124fc(i32* %arg1) local_unnamed_addr {
dec_label_pc_124fc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_124fc = load i32, i32* @r4, align 4
  store i32 %v3_124fc, i32* %stack_var_-24, align 4
  %v9_124fc = load i32, i32* @r6, align 4
  %v12_124fc = load i32, i32* @r7, align 4
  %v15_124fc = load i32, i32* @r8, align 4
  %v18_124fc = load i32, i32* @lr, align 4
  %v2_12500 = load i32, i32* %arg1, align 4
  store i32 %v2_12500, i32* %r4.global-to-local, align 4
  %v3_12508 = icmp eq i32 %v2_12500, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 131388, i32* @r6, align 4
  br i1 %v3_12508, label %dec_label_pc_1251c, label %dec_label_pc_12530

dec_label_pc_1251c:                               ; preds = %dec_label_pc_124fc
  %v0_1251c = call i32 @function_128f0()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_12524 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12524, i32* %r2.global-to-local, align 4
  %v2_12528 = inttoptr i32 %v0_1251c to i32*
  store i32 9, i32* %v2_12528, align 4
  %v0_125d0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125d0

dec_label_pc_12530:                               ; preds = %dec_label_pc_124fc
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_12534 = add i32 %tmp, 24
  store i32 %v1_12534, i32* %r4.global-to-local, align 4
  store i32 %v1_12534, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12548 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12548)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12560 = load i32, i32* @r6, align 4
  %v2_12560 = add i32 %v0_12560, 16
  %v3_12560 = inttoptr i32 %v2_12560 to i32*
  %v4_12560 = load i32, i32* %v3_12560, align 4
  call void @__pseudo_branch(i32 %v4_12560)
  %v0_1256c = load i32, i32* @r7, align 4
  %v1_1256c = inttoptr i32 %v0_1256c to i32*
  %v2_1256c = load i32, i32* %v1_1256c, align 4
  store i32 %v2_1256c, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_1257c = load i32, i32* @r8, align 4
  store i32 %v0_1257c, i32* %v1_1256c, align 4
  %v0_12580 = load i32, i32* @r6, align 4
  %v1_12580 = load i32, i32* %r3.global-to-local, align 4
  %v2_12580 = add i32 %v1_12580, %v0_12580
  %v3_12580 = inttoptr i32 %v2_12580 to i32*
  %v4_12580 = load i32, i32* %v3_12580, align 4
  store i32 ptrtoint (i32* @global_var_1258c.466 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12580)
  %v0_1258c = load i32, i32* @r7, align 4
  %v1_1258c = add i32 %v0_1258c, 12
  %v2_1258c = inttoptr i32 %v1_1258c to i32*
  %v3_1258c = load i32, i32* %v2_1258c, align 4
  store i32 %v3_1258c, i32* @r0, align 4
  %v0_12590 = call i32 @function_13f88()
  %v0_12594 = load i32, i32* @r7, align 4
  store i32 %v0_12594, i32* @r0, align 4
  %v0_12598 = call i32 @function_13f88()
  %v0_125a0 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_125a0, -4095
  br i1 %tmp11, label %dec_label_pc_125cc, label %dec_label_pc_125bc

dec_label_pc_125bc:                               ; preds = %dec_label_pc_12530
  %v0_125bc = call i32 @function_128f0()
  %v0_125c0 = load i32, i32* @r4, align 4
  %v1_125c0 = sub i32 0, %v0_125c0
  store i32 %v1_125c0, i32* %r3.global-to-local, align 4
  %v2_125c4 = inttoptr i32 %v0_125bc to i32*
  store i32 %v1_125c0, i32* %v2_125c4, align 4
  %v0_125c8 = load i32, i32* @r8, align 4
  br label %dec_label_pc_125cc

dec_label_pc_125cc:                               ; preds = %dec_label_pc_12530, %dec_label_pc_125bc
  %v0_125cc = phi i32 [ %v0_125a0, %dec_label_pc_12530 ], [ %v0_125c8, %dec_label_pc_125bc ]
  store i32 %v0_125cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125d0

dec_label_pc_125d0:                               ; preds = %dec_label_pc_1251c, %dec_label_pc_125cc
  %v0_125d0 = phi i32 [ %v0_125d0.pre, %dec_label_pc_1251c ], [ %v0_125cc, %dec_label_pc_125cc ]
  %v2_125d8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_125d8, i32* @r4, align 4
  store i32 %v9_124fc, i32* @r6, align 4
  store i32 %v12_124fc, i32* @r7, align 4
  store i32 %v15_124fc, i32* @r8, align 4
  store i32 %v18_124fc, i32* @lr, align 4
  ret i32 %v0_125d0

; uselistorder directives
  uselistorder i32 %v0_125a0, { 1, 0 }
  uselistorder label %dec_label_pc_125d0, { 1, 0 }
  uselistorder label %dec_label_pc_125cc, { 1, 0 }
}

define i32 @function_125e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_125e4:
  %v0_125e4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_125e4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_125e4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_125e4, %bb
  %v10_125f0 = phi i32 [ %arg1, %dec_label_pc_125e4 ], [ 0, %bb ]
  ret i32 %v10_125f0

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_125f4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125f4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_125f4 = load i32, i32* @r5, align 4
  %v9_125f4 = load i32, i32* @r6, align 4
  %v12_125f4 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_12608 = call i32 @function_12f1c()
  %v2_12610 = icmp eq i32 %v0_12608, 0
  store i32 131388, i32* @r6, align 4
  br i1 %v2_12610, label %bb, label %dec_label_pc_12620

bb:                                               ; preds = %dec_label_pc_125f4
  br label %dec_label_pc_126ac

dec_label_pc_12620:                               ; preds = %dec_label_pc_125f4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_12624 = load i32, i32* @r4, align 4
  %v2_12624 = icmp ugt i32 %v0_12624, 511
  %v2_12628 = add i32 %v0_12608, 4
  %v3_12628 = inttoptr i32 %v2_12628 to i32*
  store i32 0, i32* %v3_12628, align 4
  %v0_1262c = load i32, i32* %r3.global-to-local, align 4
  %v2_1262c = add i32 %v0_12608, 16
  %v3_1262c = inttoptr i32 %v2_1262c to i32*
  store i32 %v0_1262c, i32* %v3_1262c, align 4
  %v0_12630 = load i32, i32* %r3.global-to-local, align 4
  %v2_12630 = add i32 %v0_12608, 8
  %v3_12630 = inttoptr i32 %v2_12630 to i32*
  store i32 %v0_12630, i32* %v3_12630, align 4
  br i1 %v2_12624, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_12620
  %v0_126382 = load i32, i32* @r4, align 4
  %v2_126383 = add i32 %v0_12608, 20
  %v3_126384 = inttoptr i32 %v2_126383 to i32*
  store i32 %v0_126382, i32* %v3_126384, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_12620
  %v1_12634 = load i32, i32* %r3.global-to-local, align 4
  %v2_12634 = add i32 %v1_12634, 512
  store i32 %v2_12634, i32* %r3.global-to-local, align 4
  %v0_12638 = load i32, i32* @r4, align 4
  %v2_12638 = add i32 %v0_12608, 20
  %v3_12638 = inttoptr i32 %v2_12638 to i32*
  store i32 %v0_12638, i32* %v3_12638, align 4
  %v1_1263c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_1263c, i32* %v3_12638, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_12608, i32* @r5, align 4
  %v0_12644 = load i32, i32* @r7, align 4
  %v2_12644 = inttoptr i32 %v0_12608 to i32*
  store i32 %v0_12644, i32* %v2_12644, align 4
  %v0_12648 = load i32, i32* @r5, align 4
  %v1_12648 = add i32 %v0_12648, 20
  %v2_12648 = inttoptr i32 %v1_12648 to i32*
  %v3_12648 = load i32, i32* %v2_12648, align 4
  store i32 %v3_12648, i32* %r1.global-to-local, align 4
  %v2_12650 = call i32 @function_1383c(i32 1, i32 %v3_12648)
  %v2_12654 = icmp eq i32 %v2_12650, 0
  store i32 %v2_12650, i32* @r4, align 4
  %v1_1265c = load i32, i32* @r5, align 4
  %v2_1265c = add i32 %v1_1265c, 12
  %v3_1265c = inttoptr i32 %v2_1265c to i32*
  store i32 %v2_12650, i32* %v3_1265c, align 4
  br i1 %v2_12654, label %dec_label_pc_12664, label %dec_label_pc_12674

dec_label_pc_12664:                               ; preds = %bb17
  %v0_12664 = load i32, i32* @r5, align 4
  store i32 %v0_12664, i32* @r0, align 4
  %v0_12668 = call i32 @function_13f88()
  %v0_1266c = load i32, i32* @r4, align 4
  br label %dec_label_pc_126ac

dec_label_pc_12674:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_1269c = load i32, i32* @r5, align 4
  %v1_1269c = add i32 %v0_1269c, 24
  %v1_126a0 = inttoptr i32 %v1_1269c to i32*
  store i32 0, i32* %v1_126a0, align 4
  %v3_126a0 = add i32 %v0_1269c, 28
  %v4_126a0 = inttoptr i32 %v3_126a0 to i32*
  %v5_126a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_126a0, i32* %v4_126a0, align 4
  %v6_126a0 = add i32 %v0_1269c, 32
  %v7_126a0 = inttoptr i32 %v6_126a0 to i32*
  %v8_126a0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_126a0, i32* %v7_126a0, align 4
  %v9_126a0 = add i32 %v0_1269c, 36
  %v10_126a0 = inttoptr i32 %v9_126a0 to i32*
  %v11_126a0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_126a0, i32* %v10_126a0, align 4
  %v12_126a0 = add i32 %v0_1269c, 40
  %v2_126a4 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_126a8 = inttoptr i32 %v12_126a0 to i32*
  store i32 %v2_126a4, i32* %v1_126a8, align 4
  %v3_126a8 = add i32 %v0_1269c, 44
  %v4_126a8 = inttoptr i32 %v3_126a8 to i32*
  %v5_126a8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_126a8, i32* %v4_126a8, align 4
  %v0_126ac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_126ac

dec_label_pc_126ac:                               ; preds = %bb, %dec_label_pc_12664, %dec_label_pc_12674
  %v0_126ac = phi i32 [ 0, %bb ], [ %v0_1266c, %dec_label_pc_12664 ], [ %v0_126ac.pre, %dec_label_pc_12674 ]
  store i32 %v6_125f4, i32* @r5, align 4
  store i32 %v9_125f4, i32* @r6, align 4
  store i32 %v12_125f4, i32* @r7, align 4
  ret i32 %v0_126ac

; uselistorder directives
  uselistorder i32 %v2_12650, { 1, 0, 2 }
  uselistorder i32 %v0_12608, { 2, 1, 4, 0, 6, 3, 5, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 11, 10, 1, 6, 2, 7, 12, 8, 13, 9, 14, 3, 15, 4, 16, 0, 17, 5, 18 }
  uselistorder label %dec_label_pc_126ac, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_126c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_126c4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_126c4 = load i32, i32* @r7, align 4
  %v2_126cc = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_126f4, label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126c4
  %v0_126e4 = call i32 @function_128f0()
  %v0_126e8 = load i32, i32* @r7, align 4
  %v1_126e8 = sub i32 0, %v0_126e8
  %v2_126ec = inttoptr i32 %v0_126e4 to i32*
  store i32 %v1_126e8, i32* %v2_126ec, align 4
  br label %dec_label_pc_12718

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126c4
  %v1_126f4 = icmp slt i32 %arg1, 0
  br i1 %v1_126f4, label %dec_label_pc_12718, label %dec_label_pc_126fc

dec_label_pc_126fc:                               ; preds = %dec_label_pc_126f4
  store i32 %v2_126cc, i32* @r1, align 4
  %v0_12700 = call i32 @function_1523c()
  %v1_12704 = icmp slt i32 %v0_12700, 0
  br i1 %v1_12704, label %dec_label_pc_1270c, label %dec_label_pc_12720

dec_label_pc_1270c:                               ; preds = %dec_label_pc_126fc
  br label %dec_label_pc_12718

dec_label_pc_12718:                               ; preds = %dec_label_pc_1270c, %dec_label_pc_126f4, %dec_label_pc_126e4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1275c

dec_label_pc_12720:                               ; preds = %dec_label_pc_126fc
  %v0_12728 = load i32, i32* @r7, align 4
  %v3_1272c = call i32 @function_12368(i32 %v0_12728, i32 2, i32 1)
  %v0_12730 = load i32, i32* @r7, align 4
  %v2_12738 = call i32 @function_125f4(i32 %v0_12730, i32 %tmp)
  store i32 %v2_12738, i32* %r4.global-to-local, align 4
  %v2_1273c = icmp eq i32 %v2_12738, 0
  br i1 %v2_1273c, label %dec_label_pc_12744, label %dec_label_pc_1275c

dec_label_pc_12744:                               ; preds = %dec_label_pc_12720
  %v0_12750 = call i32 @function_128f0()
  %v2_12758 = inttoptr i32 %v0_12750 to i32*
  store i32 12, i32* %v2_12758, align 4
  %v0_1275c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1275c

dec_label_pc_1275c:                               ; preds = %dec_label_pc_12720, %dec_label_pc_12718, %dec_label_pc_12744
  %v0_1275c = phi i32 [ %v2_12738, %dec_label_pc_12720 ], [ 0, %dec_label_pc_12718 ], [ %v0_1275c.pre, %dec_label_pc_12744 ]
  store i32 %v6_126c4, i32* @r7, align 4
  ret i32 %v0_1275c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1275c, { 2, 0, 1 }
}

define i32 @function_1276c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1276c:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_1276c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1276c, label %bb, label %dec_label_pc_1276c._crit_edge

dec_label_pc_1276c._crit_edge:                    ; preds = %dec_label_pc_1276c
  br label %bb11

bb:                                               ; preds = %dec_label_pc_1276c
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_1276c._crit_edge, %bb
  %v2_12774 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_12774, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12780 = call i32 @function_1523c()
  store i32 %v0_12780, i32* @r5, align 4
  %v2_12784 = icmp eq i32 %v0_12780, 0
  br i1 %v2_12784, label %dec_label_pc_1278c, label %dec_label_pc_127f4

dec_label_pc_1278c:                               ; preds = %bb11
  %v1_12790 = and i32 %tmp5, 61440
  store i32 %v1_12790, i32* @r3, align 4
  %v7_12794 = icmp eq i32 %v1_12790, 16384
  br i1 %v7_12794, label %dec_label_pc_127ac, label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_1278c
  %v0_1279c = call i32 @function_128f0()
  br label %dec_label_pc_127d8

dec_label_pc_127ac:                               ; preds = %dec_label_pc_1278c
  %v0_127ac = load i32, i32* @r4, align 4
  %v2_127b4 = call i32 @function_122fc(i32 %v0_127ac, i32 3)
  %v7_127b8 = icmp eq i32 %v2_127b4, -1
  br i1 %v7_127b8, label %dec_label_pc_127f4, label %dec_label_pc_127c0

dec_label_pc_127c0:                               ; preds = %dec_label_pc_127ac
  %v1_127c0 = urem i32 %v2_127b4, 4
  %v7_127c4 = icmp eq i32 %v1_127c0, 1
  br i1 %v7_127c4, label %dec_label_pc_127cc, label %dec_label_pc_127e0

dec_label_pc_127cc:                               ; preds = %dec_label_pc_127c0
  %v0_127cc = call i32 @function_128f0()
  br label %dec_label_pc_127d8

dec_label_pc_127d8:                               ; preds = %dec_label_pc_1279c, %dec_label_pc_127cc
  %storemerge2 = phi i32 [ %v0_1279c, %dec_label_pc_1279c ], [ %v0_127cc, %dec_label_pc_127cc ]
  %storemerge = phi i32 [ 20, %dec_label_pc_1279c ], [ 22, %dec_label_pc_127cc ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_127d8 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_127d8, align 4
  %v0_127f8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127f8

dec_label_pc_127e0:                               ; preds = %dec_label_pc_127c0
  %v0_127e0 = load i32, i32* @r4, align 4
  %v2_127e8 = call i32 @function_125f4(i32 %v0_127e0, i32 %tmp)
  store i32 %v2_127e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127f8

dec_label_pc_127f4:                               ; preds = %bb11, %dec_label_pc_127ac
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127f8

dec_label_pc_127f8:                               ; preds = %dec_label_pc_127e0, %dec_label_pc_127d8, %dec_label_pc_127f4
  %v0_127f8 = phi i32 [ %v2_127e8, %dec_label_pc_127e0 ], [ %v0_127f8.pre, %dec_label_pc_127d8 ], [ 0, %dec_label_pc_127f4 ]
  ret i32 %v0_127f8

; uselistorder directives
  uselistorder i32 %v2_127b4, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_125f4, { 1, 0 }
  uselistorder i32 ()* @function_1523c, { 1, 0 }
  uselistorder label %dec_label_pc_127f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_127f4, { 1, 0 }
  uselistorder label %dec_label_pc_127d8, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_12808(i32* %arg1) local_unnamed_addr {
dec_label_pc_12808:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_12808 = load i32, i32* @r4, align 4
  %v6_12808 = load i32, i32* @r5, align 4
  %v9_12808 = load i32, i32* @r6, align 4
  %v12_12808 = load i32, i32* @r7, align 4
  %v15_12808 = load i32, i32* @lr, align 4
  store i32 131388, i32* @r6, align 4
  %v1_1281c = add i32 %tmp, 24
  store i32 %v1_1281c, i32* @r4, align 4
  %v4_12820 = load i32, i32* inttoptr (i32 131424 to i32*), align 32
  store i32 %v4_12820, i32* %r1.global-to-local, align 4
  store i32 %v1_1281c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_12834 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12834)
  %v0_12848 = load i32, i32* @r6, align 4
  %v2_12848 = add i32 %v0_12848, 16
  %v3_12848 = inttoptr i32 %v2_12848 to i32*
  %v4_12848 = load i32, i32* %v3_12848, align 4
  store i32 %v4_12848, i32* @ip, align 4
  store i32 75860, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12848)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12858

dec_label_pc_12858:                               ; preds = %dec_label_pc_12888, %dec_label_pc_12808
  %v0_12858 = load i32, i32* @r5, align 4
  %v1_12858 = add i32 %v0_12858, 4
  %v2_12858 = inttoptr i32 %v1_12858 to i32*
  %v3_12858 = load i32, i32* %v2_12858, align 4
  store i32 %v3_12858, i32* %r2.global-to-local, align 4
  %v4_12858 = add i32 %v0_12858, 8
  %v5_12858 = inttoptr i32 %v4_12858 to i32*
  %v6_12858 = load i32, i32* %v5_12858, align 4
  %tmp10 = icmp ugt i32 %v6_12858, %v3_12858
  br i1 %tmp10, label %dec_label_pc_12888, label %dec_label_pc_12864

dec_label_pc_12864:                               ; preds = %dec_label_pc_12858
  %v1_12864 = inttoptr i32 %v0_12858 to i32*
  %v2_12864 = load i32, i32* %v1_12864, align 4
  %v1_12868 = add i32 %v0_12858, 12
  %v2_12868 = inttoptr i32 %v1_12868 to i32*
  %v3_12868 = load i32, i32* %v2_12868, align 4
  store i32 %v3_12868, i32* %r1.global-to-local, align 4
  %v1_1286c = add i32 %v0_12858, 20
  %v2_1286c = inttoptr i32 %v1_1286c to i32*
  %v3_1286c = load i32, i32* %v2_1286c, align 4
  store i32 %v3_1286c, i32* %r2.global-to-local, align 4
  %v4_12870 = call i32 @function_151a8(i32 %v2_12864, i32 %v3_12868, i32 %v3_1286c, i32 %v6_12858)
  %tmp9 = icmp slt i32 %v4_12870, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_12880

.thread:                                          ; preds = %dec_label_pc_12864
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_128b4

dec_label_pc_12880:                               ; preds = %dec_label_pc_12864
  %v1_12880 = load i32, i32* @r5, align 4
  %v2_12880 = add i32 %v1_12880, 8
  %v3_12880 = inttoptr i32 %v2_12880 to i32*
  store i32 %v4_12870, i32* %v3_12880, align 4
  %v0_12884 = load i32, i32* @r7, align 4
  %v1_12884 = load i32, i32* @r5, align 4
  %v2_12884 = add i32 %v1_12884, 4
  %v3_12884 = inttoptr i32 %v2_12884 to i32*
  store i32 %v0_12884, i32* %v3_12884, align 4
  %v0_12888.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12888

dec_label_pc_12888:                               ; preds = %dec_label_pc_12858, %dec_label_pc_12880
  %v1_12898 = phi i32 [ %v0_12858, %dec_label_pc_12858 ], [ %v0_12888.pre, %dec_label_pc_12880 ]
  %v1_12888 = add i32 %v1_12898, 4
  %v2_12888 = inttoptr i32 %v1_12888 to i32*
  %v3_12888 = load i32, i32* %v2_12888, align 4
  store i32 %v3_12888, i32* %r2.global-to-local, align 4
  %v1_1288c = add i32 %v1_12898, 12
  %v2_1288c = inttoptr i32 %v1_1288c to i32*
  %v3_1288c = load i32, i32* %v2_1288c, align 4
  store i32 %v3_1288c, i32* %r1.global-to-local, align 4
  %v2_12890 = add i32 %v3_1288c, %v3_12888
  store i32 %v2_12890, i32* @r4, align 4
  %v1_12894 = add i32 %v2_12890, 4
  %v2_12894 = inttoptr i32 %v1_12894 to i32*
  %v3_12894 = load i32, i32* %v2_12894, align 4
  %v2_12898 = add i32 %v1_12898, 16
  %v3_12898 = inttoptr i32 %v2_12898 to i32*
  store i32 %v3_12894, i32* %v3_12898, align 4
  %v0_1289c = load i32, i32* @r4, align 4
  %v1_1289c = add i32 %v0_1289c, 8
  %v2_1289c = inttoptr i32 %v1_1289c to i16*
  %v3_1289c = load i16, i16* %v2_1289c, align 2
  %v4_1289c = zext i16 %v3_1289c to i32
  %v0_128a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_128a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_128a0 = add i32 %v1_128a0, %v0_128a0
  %v3_128a0 = inttoptr i32 %v2_128a0 to i32*
  %v4_128a0 = load i32, i32* %v3_128a0, align 4
  store i32 %v4_128a0, i32* %r1.global-to-local, align 4
  %v2_128a4 = add i32 %v0_128a0, %v4_1289c
  %v2_128a8 = icmp eq i32 %v4_128a0, 0
  %v1_128ac = load i32, i32* @r5, align 4
  %v2_128ac = add i32 %v1_128ac, 4
  %v3_128ac = inttoptr i32 %v2_128ac to i32*
  store i32 %v2_128a4, i32* %v3_128ac, align 4
  br i1 %v2_128a8, label %dec_label_pc_12858, label %dec_label_pc_128b4

dec_label_pc_128b4:                               ; preds = %dec_label_pc_12888, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_128c0 = load i32, i32* @r6, align 4
  %v2_128c0 = add i32 %v0_128c0, 24
  %v3_128c0 = inttoptr i32 %v2_128c0 to i32*
  %v4_128c0 = load i32, i32* %v3_128c0, align 4
  call void @__pseudo_branch(i32 %v4_128c0)
  %v0_128cc = load i32, i32* @r4, align 4
  store i32 %v3_12808, i32* @r4, align 4
  store i32 %v6_12808, i32* @r5, align 4
  store i32 %v9_12808, i32* @r6, align 4
  store i32 %v12_12808, i32* @r7, align 4
  store i32 %v15_12808, i32* @lr, align 4
  ret i32 %v0_128cc

; uselistorder directives
  uselistorder i32 %v1_12898, { 0, 2, 1 }
  uselistorder i32 %v6_12858, { 1, 0 }
  uselistorder i32 %v0_12858, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_12888, { 1, 0 }
}

define i32 @function_128e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_128e0:
  %v0_128e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_128e0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_128e0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_128e0, %bb
  %v10_128ec = phi i32 [ %arg1, %dec_label_pc_128e0 ], [ 0, %bb ]
  ret i32 %v10_128ec

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_128f0() local_unnamed_addr {
dec_label_pc_128f0:
  store i32 131388, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_203f4.483 to i32)
}

define i32 @function_1290c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1290c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_12910 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12910, i32* @r0, align 4
  %v1_12918 = call i32 @function_15618(i32 %v2_12910)
  %v2_1291c = load i32, i32* %stack_var_-24, align 4
  %v2_12920 = add i32 %v2_1291c, %tmp
  %v2_12928 = mul i32 %v2_12920, 10000
  %v1_1292c = and i32 %v2_12928, 2147483632
  ret i32 %v1_1292c

; uselistorder directives
  uselistorder i32 %v2_12910, { 1, 0 }
}

define i32 @function_12940(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12940:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_12944 = load i32, i32* @r2, align 4
  %v8_12944 = icmp eq i32 %v0_12944, 8
  store i1 %v8_12944, i1* %cpsr_z.global-to-local, align 1
  %v5_12948 = icmp slt i32 %v0_12944, 8
  br i1 %v5_12948, label %dec_label_pc_129a8, label %dec_label_pc_1294c

dec_label_pc_1294c:                               ; preds = %dec_label_pc_12940
  %v4_1294c = mul i32 %arg2, 256
  %v5_1294c = or i32 %v4_1294c, %arg2
  %v4_12950 = mul i32 %v5_1294c, 65536
  %v5_12950 = or i32 %v4_12950, %v5_1294c
  store i32 %v5_12950, i32* %r1.global-to-local, align 4
  %v1_1295457 = urem i32 %tmp, 4
  %v2_1295458 = icmp eq i32 %v1_1295457, 0
  store i1 %v2_1295458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1295458, label %dec_label_pc_12964, label %bb

bb:                                               ; preds = %dec_label_pc_1294c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1294c ]
  %v3_1295859 = phi i32 [ %v6_12958, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1294c ]
  %v4_12958 = inttoptr i32 %v3_1295859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12958, align 1
  %v5_12958 = load i32, i32* @r3, align 4
  %v6_12958 = add i32 %v5_12958, 1
  store i32 %v6_12958, i32* @r3, align 4
  %v0_1295c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12968.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1295c.pr, label %dec_label_pc_12964, label %.thread

.thread:                                          ; preds = %bb
  %v2_1295c = add i32 %v0_12968.pr.pre, -1
  store i32 %v2_1295c, i32* @r2, align 4
  %v1_12954 = urem i32 %v6_12958, 4
  %v2_12954 = icmp eq i32 %v1_12954, 0
  store i1 %v2_12954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12954, label %dec_label_pc_12964, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12958.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12958.pre to i8
  br label %bb

dec_label_pc_12964:                               ; preds = %.thread, %bb, %dec_label_pc_1294c
  %v0_1297028 = phi i32 [ %tmp, %dec_label_pc_1294c ], [ %v6_12958, %bb ], [ %v6_12958, %.thread ]
  %v0_12968.pr = phi i32 [ %v0_12944, %dec_label_pc_1294c ], [ %v0_12968.pr.pre, %bb ], [ %v2_1295c, %.thread ]
  %v0_12964 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12964, i32* @ip, align 4
  %v8_1296810 = icmp eq i32 %v0_12968.pr, 8
  store i1 %v8_1296810, i1* %cpsr_z.global-to-local, align 1
  %v5_1296c11 = icmp slt i32 %v0_12968.pr, 8
  br i1 %v5_1296c11, label %dec_label_pc_129a8, label %dec_label_pc_12970.preheader

dec_label_pc_12970.preheader:                     ; preds = %dec_label_pc_12964
  %v1_1297046 = inttoptr i32 %v0_1297028 to i32*
  store i32 %v0_12964, i32* %v1_1297046, align 4
  %v3_1297047 = add i32 %v0_1297028, 4
  %v4_1297048 = inttoptr i32 %v3_1297047 to i32*
  %v5_1297049 = load i32, i32* @ip, align 4
  store i32 %v5_1297049, i32* %v4_1297048, align 4
  %v6_1297050 = add i32 %v0_1297028, 8
  store i32 %v6_1297050, i32* @r3, align 4
  %v0_1297451 = load i32, i32* @r2, align 4
  %v1_1297452 = add i32 %v0_1297451, -8
  store i32 %v1_1297452, i32* %r2.global-to-local, align 4
  %v5_1297c53 = icmp slt i32 %v1_1297452, 8
  br i1 %v5_1297c53, label %dec_label_pc_12970.dec_label_pc_129a8.loopexit_crit_edge, label %dec_label_pc_12980

dec_label_pc_12980:                               ; preds = %dec_label_pc_12970.preheader, %dec_label_pc_12968.dec_label_pc_12970_crit_edge
  %v6_1297055 = phi i32 [ %v6_12970, %dec_label_pc_12968.dec_label_pc_12970_crit_edge ], [ %v6_1297050, %dec_label_pc_12970.preheader ]
  %v0_1297054 = phi i32 [ %v12_1299c, %dec_label_pc_12968.dec_label_pc_12970_crit_edge ], [ %v0_1297028, %dec_label_pc_12970.preheader ]
  %v1_12980 = inttoptr i32 %v6_1297055 to i32*
  %v2_12980 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12980, i32* %v1_12980, align 4
  %v3_12980 = add i32 %v0_1297054, 12
  %v4_12980 = inttoptr i32 %v3_12980 to i32*
  %v5_12980 = load i32, i32* @ip, align 4
  store i32 %v5_12980, i32* %v4_12980, align 4
  %v6_12980 = add i32 %v0_1297054, 16
  store i32 %v6_12980, i32* @r3, align 4
  %v0_12984 = load i32, i32* %r2.global-to-local, align 4
  %v1_12984 = add i32 %v0_12984, -8
  store i32 %v1_12984, i32* %r2.global-to-local, align 4
  %v5_1298c = icmp slt i32 %v1_12984, 8
  br i1 %v5_1298c, label %dec_label_pc_12980.dec_label_pc_129a8.loopexit_crit_edge, label %dec_label_pc_12990

dec_label_pc_12990:                               ; preds = %dec_label_pc_12980
  %v1_12990 = inttoptr i32 %v6_12980 to i32*
  %v2_12990 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12990, i32* %v1_12990, align 4
  %v3_12990 = add i32 %v0_1297054, 20
  %v4_12990 = inttoptr i32 %v3_12990 to i32*
  %v5_12990 = load i32, i32* @ip, align 4
  store i32 %v5_12990, i32* %v4_12990, align 4
  %v6_12990 = add i32 %v0_1297054, 24
  store i32 %v6_12990, i32* @r3, align 4
  %v0_12994 = load i32, i32* %r2.global-to-local, align 4
  %v1_12994 = add i32 %v0_12994, -8
  store i32 %v1_12994, i32* %r2.global-to-local, align 4
  %v5_1299c = icmp slt i32 %v1_12994, 8
  br i1 %v5_1299c, label %dec_label_pc_12990.dec_label_pc_129a8.loopexit_crit_edge, label %dec_label_pc_12968

dec_label_pc_12968:                               ; preds = %dec_label_pc_12990
  %v7_1299c = inttoptr i32 %v6_12990 to i32*
  %v8_1299c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1299c, i32* %v7_1299c, align 4
  %v9_1299c = add i32 %v0_1297054, 28
  %v10_1299c = inttoptr i32 %v9_1299c to i32*
  %v11_1299c = load i32, i32* @ip, align 4
  store i32 %v11_1299c, i32* %v10_1299c, align 4
  %v12_1299c = add i32 %v0_1297054, 32
  store i32 %v12_1299c, i32* @r3, align 4
  %v6_129a0 = load i32, i32* %r2.global-to-local, align 4
  %v7_129a0 = add i32 %v6_129a0, -8
  store i32 %v7_129a0, i32* %r2.global-to-local, align 4
  %v5_1296c = icmp slt i32 %v7_129a0, 8
  br i1 %v5_1296c, label %dec_label_pc_12968.dec_label_pc_129a8.loopexit_crit_edge, label %dec_label_pc_12968.dec_label_pc_12970_crit_edge

dec_label_pc_12968.dec_label_pc_12970_crit_edge:  ; preds = %dec_label_pc_12968
  %v2_12970.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12970 = inttoptr i32 %v12_1299c to i32*
  store i32 %v2_12970.pre, i32* %v1_12970, align 4
  %v3_12970 = add i32 %v0_1297054, 36
  %v4_12970 = inttoptr i32 %v3_12970 to i32*
  %v5_12970 = load i32, i32* @ip, align 4
  store i32 %v5_12970, i32* %v4_12970, align 4
  %v6_12970 = add i32 %v0_1297054, 40
  store i32 %v6_12970, i32* @r3, align 4
  %v0_12974 = load i32, i32* %r2.global-to-local, align 4
  %v1_12974 = add i32 %v0_12974, -8
  store i32 %v1_12974, i32* %r2.global-to-local, align 4
  %v5_1297c = icmp slt i32 %v1_12974, 8
  br i1 %v5_1297c, label %dec_label_pc_12970.dec_label_pc_129a8.loopexit_crit_edge, label %dec_label_pc_12980

dec_label_pc_12968.dec_label_pc_129a8.loopexit_crit_edge: ; preds = %dec_label_pc_12968
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129a8

dec_label_pc_12970.dec_label_pc_129a8.loopexit_crit_edge: ; preds = %dec_label_pc_12968.dec_label_pc_12970_crit_edge, %dec_label_pc_12970.preheader
  %v1_12974.lcssa = phi i32 [ %v1_1297452, %dec_label_pc_12970.preheader ], [ %v1_12974, %dec_label_pc_12968.dec_label_pc_12970_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129a8

dec_label_pc_12980.dec_label_pc_129a8.loopexit_crit_edge: ; preds = %dec_label_pc_12980
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129a8

dec_label_pc_12990.dec_label_pc_129a8.loopexit_crit_edge: ; preds = %dec_label_pc_12990
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129a8

dec_label_pc_129a8:                               ; preds = %dec_label_pc_12964, %dec_label_pc_12968.dec_label_pc_129a8.loopexit_crit_edge, %dec_label_pc_12970.dec_label_pc_129a8.loopexit_crit_edge, %dec_label_pc_12980.dec_label_pc_129a8.loopexit_crit_edge, %dec_label_pc_12990.dec_label_pc_129a8.loopexit_crit_edge, %dec_label_pc_12940
  %v0_129b0 = phi i32 [ %v0_12944, %dec_label_pc_12940 ], [ %v1_12994, %dec_label_pc_12990.dec_label_pc_129a8.loopexit_crit_edge ], [ %v1_12984, %dec_label_pc_12980.dec_label_pc_129a8.loopexit_crit_edge ], [ %v1_12974.lcssa, %dec_label_pc_12970.dec_label_pc_129a8.loopexit_crit_edge ], [ %v7_129a0, %dec_label_pc_12968.dec_label_pc_129a8.loopexit_crit_edge ], [ %v0_12968.pr, %dec_label_pc_12964 ]
  %v2_129a8 = icmp eq i32 %v0_129b0, 0
  store i1 %v2_129a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_129a8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_129a8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_129a8
  %v1_129b0 = sub i32 7, %v0_129b0
  store i32 %v1_129b0, i32* %r2.global-to-local, align 4
  %v3_129b4 = mul i32 %v1_129b0, 4
  %v4_129b4 = add i32 %v3_129b4, ptrtoint (i32* @global_var_129bc.485 to i32)
  call void @__pseudo_branch(i32 %v4_129b4)
  %v0_129bc = load i32, i32* %r1.global-to-local, align 4
  %v1_129bc = trunc i32 %v0_129bc to i8
  %v2_129bc = load i32, i32* @r3, align 4
  %v3_129bc = inttoptr i32 %v2_129bc to i8*
  store i8 %v1_129bc, i8* %v3_129bc, align 1
  %v4_129bc = load i32, i32* @r3, align 4
  %v5_129bc = add i32 %v4_129bc, 1
  store i32 %v5_129bc, i32* %r3.global-to-local, align 4
  %v0_129c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129c0 = trunc i32 %v0_129c0 to i8
  %v3_129c0 = inttoptr i32 %v5_129bc to i8*
  store i8 %v1_129c0, i8* %v3_129c0, align 1
  %v4_129c0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129c0 = add i32 %v4_129c0, 1
  store i32 %v5_129c0, i32* %r3.global-to-local, align 4
  %v0_129c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129c4 = trunc i32 %v0_129c4 to i8
  %v3_129c4 = inttoptr i32 %v5_129c0 to i8*
  store i8 %v1_129c4, i8* %v3_129c4, align 1
  %v4_129c4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129c4 = add i32 %v4_129c4, 1
  store i32 %v5_129c4, i32* %r3.global-to-local, align 4
  %v0_129c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_129c8 = trunc i32 %v0_129c8 to i8
  %v3_129c8 = inttoptr i32 %v5_129c4 to i8*
  store i8 %v1_129c8, i8* %v3_129c8, align 1
  %v4_129c8 = load i32, i32* %r3.global-to-local, align 4
  %v5_129c8 = add i32 %v4_129c8, 1
  store i32 %v5_129c8, i32* %r3.global-to-local, align 4
  %v0_129cc = load i32, i32* %r1.global-to-local, align 4
  %v1_129cc = trunc i32 %v0_129cc to i8
  %v3_129cc = inttoptr i32 %v5_129c8 to i8*
  store i8 %v1_129cc, i8* %v3_129cc, align 1
  %v4_129cc = load i32, i32* %r3.global-to-local, align 4
  %v5_129cc = add i32 %v4_129cc, 1
  store i32 %v5_129cc, i32* %r3.global-to-local, align 4
  %v0_129d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d0 = trunc i32 %v0_129d0 to i8
  %v3_129d0 = inttoptr i32 %v5_129cc to i8*
  store i8 %v1_129d0, i8* %v3_129d0, align 1
  %v4_129d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129d0 = add i32 %v4_129d0, 1
  store i32 %v5_129d0, i32* %r3.global-to-local, align 4
  %v0_129d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  %v3_129d4 = inttoptr i32 %v5_129d0 to i8*
  store i8 %v1_129d4, i8* %v3_129d4, align 1
  %v4_129d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129d4 = add i32 %v4_129d4, 1
  store i32 %v5_129d4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12970, { 1, 0 }
  uselistorder i32 %v12_1299c, { 1, 2, 0 }
  uselistorder i32 %v0_1297054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12968.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12958, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1294c, { 1, 0 }
  uselistorder i32 %v0_12944, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_129a8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12980, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_129e0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_129e0:
  %v0_129e0 = call i32 @function_16890()
  ret i32 %v0_129e0
}

define i32 @function_129f0() local_unnamed_addr {
dec_label_pc_129f0:
  %v0_129f0 = call i32 @function_16890()
  ret i32 %v0_129f0
}

define i32 @function_12a00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12a00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_12a101 = load i32, i32* @r1, align 4
  %v1_12a102 = inttoptr i32 %v0_12a101 to i8*
  %v2_12a103 = load i8, i8* %v1_12a102, align 1
  %v2_12a145 = icmp eq i8 %v2_12a103, 0
  store i1 %v2_12a145, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_12a103, i8* %arg1, align 1
  br i1 %v2_12a145, label %dec_label_pc_12a20, label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_12a00, %dec_label_pc_12a08
  %v0_12a08 = load i32, i32* @r1, align 4
  %v1_12a08 = add i32 %v0_12a08, 1
  store i32 %v1_12a08, i32* @r1, align 4
  %v0_12a0c = load i32, i32* %r2.global-to-local, align 4
  %v1_12a0c = add i32 %v0_12a0c, 1
  store i32 %v1_12a0c, i32* %r2.global-to-local, align 4
  %v1_12a10 = inttoptr i32 %v1_12a08 to i8*
  %v2_12a10 = load i8, i8* %v1_12a10, align 1
  %v2_12a14 = icmp eq i8 %v2_12a10, 0
  store i1 %v2_12a14, i1* %cpsr_z.global-to-local, align 1
  %v3_12a18 = inttoptr i32 %v1_12a0c to i8*
  store i8 %v2_12a10, i8* %v3_12a18, align 1
  %v0_12a1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12a1c, label %dec_label_pc_12a20, label %dec_label_pc_12a08

dec_label_pc_12a20:                               ; preds = %dec_label_pc_12a08, %dec_label_pc_12a00
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12a08, { 1, 0 }
}

define i32 @function_12a24(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a24:
  %stack_var_-12 = alloca i32, align 4
  %v2_12a2c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_12a2c, i32* @r1, align 4
  %v0_12a30 = call i32 @function_170fc()
  %v2_12a34 = icmp eq i32 %v0_12a30, 0
  %v4_12a38 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_12a34, i32 -1, i32 %v4_12a38
  ret i32 %storemerge
}

define i32 @function_12a4c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12a4c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a4c = load i32, i32* @r7, align 4
  store i32 %v3_12a4c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12a74, label %dec_label_pc_12a64

dec_label_pc_12a64:                               ; preds = %dec_label_pc_12a4c
  %v0_12a64 = call i32 @function_128f0()
  %v0_12a68 = load i32, i32* %r7.global-to-local, align 4
  %v1_12a68 = sub i32 0, %v0_12a68
  %v2_12a6c = inttoptr i32 %v0_12a64 to i32*
  store i32 %v1_12a68, i32* %v2_12a6c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12a78.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12a74

dec_label_pc_12a74:                               ; preds = %dec_label_pc_12a4c, %dec_label_pc_12a64
  %v2_12a78 = phi i32 [ %v3_12a4c, %dec_label_pc_12a4c ], [ %v2_12a78.pre, %dec_label_pc_12a64 ]
  %v0_12a74 = phi i32 [ %arg1, %dec_label_pc_12a4c ], [ -1, %dec_label_pc_12a64 ]
  store i32 %v2_12a78, i32* @r7, align 4
  ret i32 %v0_12a74

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a74, { 1, 0 }
}

define i32 @function_12a84(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a84:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a84 = load i32, i32* @r7, align 4
  store i32 %v3_12a84, i32* %stack_var_-8, align 4
  %v0_12a90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12a90, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a90, -4095
  br i1 %tmp, label %dec_label_pc_12ab0, label %dec_label_pc_12aa0

dec_label_pc_12aa0:                               ; preds = %dec_label_pc_12a84
  %v0_12aa0 = call i32 @function_128f0()
  %v0_12aa4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12aa4 = sub i32 0, %v0_12aa4
  %v2_12aa8 = inttoptr i32 %v0_12aa0 to i32*
  store i32 %v1_12aa4, i32* %v2_12aa8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12ab0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12a84, %dec_label_pc_12aa0
  %v1_12ab4 = phi i32 [ %v0_12a90, %dec_label_pc_12a84 ], [ -1, %dec_label_pc_12aa0 ]
  %v2_12ab0 = phi i32 [ %v3_12a84, %dec_label_pc_12a84 ], [ %v2_12ab0.pre, %dec_label_pc_12aa0 ]
  store i32 %v2_12ab0, i32* @r7, align 4
  ret i32 %v1_12ab4

; uselistorder directives
  uselistorder i32 %v0_12a90, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ab0, { 1, 0 }
}

define i32 @function_12abc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12abc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12abc = load i32, i32* @r7, align 4
  store i32 %v3_12abc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12ae4, label %dec_label_pc_12ad4

dec_label_pc_12ad4:                               ; preds = %dec_label_pc_12abc
  %v0_12ad4 = call i32 @function_128f0()
  %v0_12ad8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ad8 = sub i32 0, %v0_12ad8
  store i32 %v1_12ad8, i32* @r3, align 4
  %v2_12adc = inttoptr i32 %v0_12ad4 to i32*
  store i32 %v1_12ad8, i32* %v2_12adc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12ae8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12ae4

dec_label_pc_12ae4:                               ; preds = %dec_label_pc_12abc, %dec_label_pc_12ad4
  %v2_12ae8 = phi i32 [ %v3_12abc, %dec_label_pc_12abc ], [ %v2_12ae8.pre, %dec_label_pc_12ad4 ]
  %v0_12ae4 = phi i32 [ %arg1, %dec_label_pc_12abc ], [ -1, %dec_label_pc_12ad4 ]
  store i32 %v2_12ae8, i32* @r7, align 4
  ret i32 %v0_12ae4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ae4, { 1, 0 }
}

define i32 @function_12af4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12af4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12af4 = load i32, i32* @r7, align 4
  store i32 %v3_12af4, i32* %stack_var_-8, align 4
  %v0_12b00 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12b00, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12b00, -4095
  br i1 %tmp, label %dec_label_pc_12b20, label %dec_label_pc_12b10

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12af4
  %v0_12b10 = call i32 @function_128f0()
  %v0_12b14 = load i32, i32* %r7.global-to-local, align 4
  %v1_12b14 = sub i32 0, %v0_12b14
  %v2_12b18 = inttoptr i32 %v0_12b10 to i32*
  store i32 %v1_12b14, i32* %v2_12b18, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12b20.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12af4, %dec_label_pc_12b10
  %v1_12b24 = phi i32 [ %v0_12b00, %dec_label_pc_12af4 ], [ -1, %dec_label_pc_12b10 ]
  %v2_12b20 = phi i32 [ %v3_12af4, %dec_label_pc_12af4 ], [ %v2_12b20.pre, %dec_label_pc_12b10 ]
  store i32 %v2_12b20, i32* @r7, align 4
  ret i32 %v1_12b24

; uselistorder directives
  uselistorder i32 %v0_12b00, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b20, { 1, 0 }
}

define i32 @function_12b2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12b2c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12b60, label %dec_label_pc_12b50

dec_label_pc_12b50:                               ; preds = %dec_label_pc_12b2c
  %v0_12b50 = call i32 @function_128f0()
  %v0_12b54 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b54 = sub i32 0, %v0_12b54
  %v2_12b58 = inttoptr i32 %v0_12b50 to i32*
  store i32 %v1_12b54, i32* %v2_12b58, align 4
  br label %dec_label_pc_12b60

dec_label_pc_12b60:                               ; preds = %dec_label_pc_12b2c, %dec_label_pc_12b50
  %v1_12b68 = phi i32 [ %arg1, %dec_label_pc_12b2c ], [ -1, %dec_label_pc_12b50 ]
  ret i32 %v1_12b68

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b60, { 1, 0 }
}

define i32 @function_12b70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b70:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b70 = load i32, i32* @r7, align 4
  store i32 %v3_12b70, i32* %stack_var_-8, align 4
  %v0_12b7c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12b7c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12b7c, -4095
  br i1 %tmp, label %dec_label_pc_12b9c, label %dec_label_pc_12b8c

dec_label_pc_12b8c:                               ; preds = %dec_label_pc_12b70
  %v0_12b8c = call i32 @function_128f0()
  %v0_12b90 = load i32, i32* %r7.global-to-local, align 4
  %v1_12b90 = sub i32 0, %v0_12b90
  %v2_12b94 = inttoptr i32 %v0_12b8c to i32*
  store i32 %v1_12b90, i32* %v2_12b94, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12b9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12b70, %dec_label_pc_12b8c
  %v1_12ba0 = phi i32 [ %v0_12b7c, %dec_label_pc_12b70 ], [ -1, %dec_label_pc_12b8c ]
  %v2_12b9c = phi i32 [ %v3_12b70, %dec_label_pc_12b70 ], [ %v2_12b9c.pre, %dec_label_pc_12b8c ]
  store i32 %v2_12b9c, i32* @r7, align 4
  ret i32 %v1_12ba0

; uselistorder directives
  uselistorder i32 %v0_12b7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b9c, { 1, 0 }
}

define i32 @function_12ba4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12ba4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ba4 = load i32, i32* @r7, align 4
  store i32 %v3_12ba4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12bcc, label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %dec_label_pc_12ba4
  %v0_12bbc = call i32 @function_128f0()
  %v0_12bc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12bc0 = sub i32 0, %v0_12bc0
  %v2_12bc4 = inttoptr i32 %v0_12bbc to i32*
  store i32 %v1_12bc0, i32* %v2_12bc4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12bd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_12bcc:                               ; preds = %dec_label_pc_12ba4, %dec_label_pc_12bbc
  %v2_12bd0 = phi i32 [ %v3_12ba4, %dec_label_pc_12ba4 ], [ %v2_12bd0.pre, %dec_label_pc_12bbc ]
  %v0_12bcc = phi i32 [ %arg1, %dec_label_pc_12ba4 ], [ -1, %dec_label_pc_12bbc ]
  store i32 %v2_12bd0, i32* @r7, align 4
  ret i32 %v0_12bcc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bcc, { 1, 0 }
}

define i32 @function_12bdc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12bdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12bdc = load i32, i32* @r4, align 4
  store i32 %v3_12bdc, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c0c, label %dec_label_pc_12bfc

dec_label_pc_12bfc:                               ; preds = %dec_label_pc_12bdc
  %v0_12bfc = call i32 @function_128f0()
  %v0_12c00 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c00 = sub i32 0, %v0_12c00
  %v2_12c04 = inttoptr i32 %v0_12bfc to i32*
  store i32 %v1_12c00, i32* %v2_12c04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c10.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_12c0c

dec_label_pc_12c0c:                               ; preds = %dec_label_pc_12bdc, %dec_label_pc_12bfc
  %v2_12c10 = phi i32 [ %v3_12bdc, %dec_label_pc_12bdc ], [ %v2_12c10.pre, %dec_label_pc_12bfc ]
  %v0_12c0c = phi i32 [ %arg1, %dec_label_pc_12bdc ], [ -1, %dec_label_pc_12bfc ]
  store i32 %v2_12c10, i32* @r4, align 4
  ret i32 %v0_12c0c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c0c, { 1, 0 }
}

define i32 @function_12c18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12c18:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c18 = load i32, i32* @r7, align 4
  store i32 %v3_12c18, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c40, label %dec_label_pc_12c30

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c18
  %v0_12c30 = call i32 @function_128f0()
  %v0_12c34 = load i32, i32* %r7.global-to-local, align 4
  %v1_12c34 = sub i32 0, %v0_12c34
  store i32 %v1_12c34, i32* @r3, align 4
  %v2_12c38 = inttoptr i32 %v0_12c30 to i32*
  store i32 %v1_12c34, i32* %v2_12c38, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12c44.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %dec_label_pc_12c18, %dec_label_pc_12c30
  %v2_12c44 = phi i32 [ %v3_12c18, %dec_label_pc_12c18 ], [ %v2_12c44.pre, %dec_label_pc_12c30 ]
  %v0_12c40 = phi i32 [ %arg1, %dec_label_pc_12c18 ], [ -1, %dec_label_pc_12c30 ]
  store i32 %v2_12c44, i32* @r7, align 4
  ret i32 %v0_12c40

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c40, { 1, 0 }
}

define i32 @function_12c50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12c50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12c50 = load i32, i32* @r4, align 4
  store i32 %v3_12c50, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c80, label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c50
  %v0_12c70 = call i32 @function_128f0()
  %v0_12c74 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c74 = sub i32 0, %v0_12c74
  %v2_12c78 = inttoptr i32 %v0_12c70 to i32*
  store i32 %v1_12c74, i32* %v2_12c78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c84.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c50, %dec_label_pc_12c70
  %v2_12c84 = phi i32 [ %v3_12c50, %dec_label_pc_12c50 ], [ %v2_12c84.pre, %dec_label_pc_12c70 ]
  %v0_12c80 = phi i32 [ %arg1, %dec_label_pc_12c50 ], [ -1, %dec_label_pc_12c70 ]
  store i32 %v2_12c84, i32* @r4, align 4
  ret i32 %v0_12c80

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c80, { 1, 0 }
}

define i32 @function_12c90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12c90:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12cc4, label %dec_label_pc_12cb4

dec_label_pc_12cb4:                               ; preds = %dec_label_pc_12c90
  %v0_12cb4 = call i32 @function_128f0()
  %v0_12cb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12cb8 = sub i32 0, %v0_12cb8
  store i32 %v1_12cb8, i32* @r3, align 4
  %v2_12cbc = inttoptr i32 %v0_12cb4 to i32*
  store i32 %v1_12cb8, i32* %v2_12cbc, align 4
  br label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12c90, %dec_label_pc_12cb4
  %v1_12ccc = phi i32 [ %arg1, %dec_label_pc_12c90 ], [ -1, %dec_label_pc_12cb4 ]
  ret i32 %v1_12ccc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12cc4, { 1, 0 }
}

define i32 @function_12cd4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cd4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12cd4 = load i32, i32* @r7, align 4
  store i32 %v3_12cd4, i32* %stack_var_-8, align 4
  %v0_12ce0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12ce0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12ce0, -4095
  br i1 %tmp, label %dec_label_pc_12d00, label %dec_label_pc_12cf0

dec_label_pc_12cf0:                               ; preds = %dec_label_pc_12cd4
  %v0_12cf0 = call i32 @function_128f0()
  %v0_12cf4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12cf4 = sub i32 0, %v0_12cf4
  store i32 %v1_12cf4, i32* @r3, align 4
  %v2_12cf8 = inttoptr i32 %v0_12cf0 to i32*
  store i32 %v1_12cf4, i32* %v2_12cf8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12d00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12d00

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12cd4, %dec_label_pc_12cf0
  %v1_12d04 = phi i32 [ %v0_12ce0, %dec_label_pc_12cd4 ], [ -1, %dec_label_pc_12cf0 ]
  %v2_12d00 = phi i32 [ %v3_12cd4, %dec_label_pc_12cd4 ], [ %v2_12d00.pre, %dec_label_pc_12cf0 ]
  store i32 %v2_12d00, i32* @r7, align 4
  ret i32 %v1_12d04

; uselistorder directives
  uselistorder i32 %v0_12ce0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d00, { 1, 0 }
}

define i32 @function_12d0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12d0c:
  store i32 %arg1, i32* @r0, align 4
  %v3_12d0c = load i32, i32* @r4, align 4
  %v0_12d14 = call i32 @function_12134()
  %v2_12d1c = call i32 @function_12294(i32 %v0_12d14, i32 %arg1)
  store i32 %v3_12d0c, i32* @r4, align 4
  ret i32 %v2_12d1c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12294, { 0, 6, 5, 4, 3, 2, 1 }
}

define i32 @function_12d28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d28:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_12d40, label %dec_label_pc_12d38

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d28
  %v7_12d3c = icmp slt i32 %arg1, 65
  br i1 %v7_12d3c, label %dec_label_pc_12d54, label %dec_label_pc_12d40

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d38, %dec_label_pc_12d28
  %v0_12d40 = call i32 @function_128f0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12d4c = inttoptr i32 %v0_12d40 to i32*
  store i32 22, i32* %v2_12d4c, align 4
  %v0_12d5c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d5c

dec_label_pc_12d54:                               ; preds = %dec_label_pc_12d38
  %v0_12d54 = call i32 @function_12e5c()
  store i32 %v0_12d54, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d5c

dec_label_pc_12d5c:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d54
  %v0_12d5c = phi i32 [ %v0_12d5c.pre, %dec_label_pc_12d40 ], [ %v0_12d54, %dec_label_pc_12d54 ]
  ret i32 %v0_12d5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12d5c, { 1, 0 }
}

define i32 @function_12d6c(i32* %arg1) local_unnamed_addr {
dec_label_pc_12d6c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_12d74 = add i32 %tmp, 4
  %v3_12d74 = inttoptr i32 %v2_12d74 to i32*
  store i32 0, i32* %v3_12d74, align 4
  %v1_12d78 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d78 = inttoptr i32 %v1_12d78 to i32*
  store i32 0, i32* %v2_12d78, align 4
  ret i32 0
}

define i32 @function_12d80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d80:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12d80 = load i32, i32* @r4, align 4
  store i32 %v3_12d80, i32* %stack_var_-16, align 4
  %v6_12d80 = load i32, i32* @r5, align 4
  %v9_12d80 = load i32, i32* @r6, align 4
  %v7_12d88 = icmp eq i32 %arg2, -1
  br i1 %v7_12d88, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_12d80
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_12d80
  %v2_12d90 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_12dac

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12db4

dec_label_pc_12dac:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_12db0 = icmp slt i32 %arg1, 65
  br i1 %v7_12db0, label %dec_label_pc_12dc8, label %dec_label_pc_12db4

dec_label_pc_12db4:                               ; preds = %.thread16, %dec_label_pc_12dac
  %v0_12db4 = call i32 @function_128f0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12dc0 = inttoptr i32 %v0_12db4 to i32*
  store i32 22, i32* %v2_12dc0, align 4
  %v0_12e20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_12dc8:                               ; preds = %dec_label_pc_12dac
  %v2_12dc8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12dc8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12dd0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12dd0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_12de0 = call i32 @function_12e5c()
  %v0_12de8 = load i32, i32* @r5, align 4
  %v2_12df0 = call i32 @function_12e38(i32 ptrtoint (i32* @global_var_22628.498 to i32), i32 %v0_12de8)
  store i32 %v2_12d90, i32* %r2.global-to-local, align 4
  %v0_12e08 = load i32, i32* @r5, align 4
  %v3_12e10 = call i32 @function_15070(i32 %v0_12e08, i32 %v2_12dc8, i32 %v2_12d90)
  %v1_12e14 = icmp slt i32 %v3_12e10, 0
  br i1 %v1_12e14, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_12dc8
  %v5_12e18 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_12e18, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_12dc8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_12db4, %bb32
  %v0_12e20 = phi i32 [ %v5_12e18, %bb31 ], [ %v0_12e20.pre, %dec_label_pc_12db4 ], [ -1, %bb32 ]
  %v2_12e28 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12e28, i32* @r4, align 4
  store i32 %v6_12d80, i32* @r5, align 4
  store i32 %v9_12d80, i32* @r6, align 4
  ret i32 %v0_12e20

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 ()* @function_12e5c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12db4, { 1, 0 }
}

define i32 @function_12e38(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e38:
  %v1_12e38 = add i32 %arg2, -1
  %v3_12e3c = udiv i32 %v1_12e38, 32
  %v4_12e40 = mul nuw nsw i32 %v3_12e3c, 4
  %v5_12e40 = add i32 %v4_12e40, %arg1
  %v6_12e40 = inttoptr i32 %v5_12e40 to i32*
  %v7_12e40 = load i32, i32* %v6_12e40, align 4
  %v1_12e44 = urem i32 %v1_12e38, 32
  %v7_12e4c = shl i32 1, %v1_12e44
  %v8_12e4c = and i32 %v7_12e40, %v7_12e4c
  %v10_12e4c = icmp ne i32 %v8_12e4c, 0
  %. = zext i1 %v10_12e4c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12e38, { 1, 0 }
}

define i32 @function_12e5c() local_unnamed_addr {
dec_label_pc_12e5c:
  %v0_12e5c = load i32, i32* @r1, align 4
  %v1_12e5c = add i32 %v0_12e5c, -1
  %v3_12e60 = udiv i32 %v1_12e5c, 32
  %v0_12e64 = load i32, i32* @r0, align 4
  %v4_12e64 = mul nuw nsw i32 %v3_12e60, 4
  %v5_12e64 = add i32 %v0_12e64, %v4_12e64
  %v6_12e64 = inttoptr i32 %v5_12e64 to i32*
  %v7_12e64 = load i32, i32* %v6_12e64, align 4
  %v1_12e68 = urem i32 %v1_12e5c, 32
  %v7_12e70 = shl i32 1, %v1_12e68
  %v8_12e70 = or i32 %v7_12e64, %v7_12e70
  store i32 %v8_12e70, i32* %v6_12e64, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12e5c, { 1, 0 }
}

define i32 @function_12e80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e80:
  %v1_12e80 = add i32 %arg2, -1
  %v3_12e84 = udiv i32 %v1_12e80, 32
  %v4_12e88 = mul nuw nsw i32 %v3_12e84, 4
  %v5_12e88 = add i32 %v4_12e88, %arg1
  %v6_12e88 = inttoptr i32 %v5_12e88 to i32*
  %v7_12e88 = load i32, i32* %v6_12e88, align 4
  %v1_12e8c = urem i32 %v1_12e80, 32
  %tmp = shl i32 -1, %v1_12e8c
  %v8_12e94 = add i32 %tmp, -1
  %v9_12e94 = and i32 %v7_12e88, %v8_12e94
  store i32 %v9_12e94, i32* %v6_12e88, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12e80, { 1, 0 }
}

define i32 @function_12ea4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ea4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_12ea4 = udiv i32 %arg1, 256
  store i32 %v3_12ea4, i32* %r1.global-to-local, align 4
  %v2_12ea8 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_12ea8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_12ea4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_12ea4, %bb
  %v0_12eb4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12ea8, i32 %v0_12eb4)
  %v0_12eb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12eb8 = add i32 %v0_12eb8, 1048320
  %v3_12ebc = udiv i32 %v1_12eb8, 65536
  %v1_12ec0 = and i32 %v3_12ebc, 8
  %v6_12ec4 = shl i32 %v0_12eb8, %v1_12ec0
  %v1_12ec8 = add i32 %v6_12ec4, 520192
  %v3_12ecc = udiv i32 %v1_12ec8, 65536
  %v1_12ed0 = and i32 %v3_12ecc, 4
  %v6_12ed4 = shl i32 %v6_12ec4, %v1_12ed0
  %v1_12ed8 = add i32 %v6_12ed4, 245760
  %v3_12edc = udiv i32 %v1_12ed8, 65536
  %v1_12ee0 = and i32 %v3_12edc, 2
  %v6_12ee4 = shl i32 %v6_12ed4, %v1_12ee0
  store i32 %v6_12ee4, i32* %r1.global-to-local, align 4
  %v1_12ee8 = sub nsw i32 13, %v1_12ec0
  %v2_12eec = sub nsw i32 %v1_12ee8, %v1_12ed0
  %v3_12ef0 = udiv i32 %v6_12ee4, 32768
  %v4_12ef0 = sub nuw nsw i32 -1, %v3_12ef0
  %v4_12ef4 = udiv i32 %v6_12ee4, 16384
  %v5_12ef4 = and i32 %v4_12ef4, %v4_12ef0
  %v2_12ef8 = sub nsw i32 %v2_12eec, %v1_12ee0
  %v2_12efc = add nsw i32 %v2_12ef8, %v5_12ef4
  %v1_12f00 = add nsw i32 %v2_12efc, 6
  %v0_12f04 = load i32, i32* %ip.global-to-local, align 4
  %v6_12f04 = lshr i32 %v0_12f04, %v1_12f00
  %v3_12f08 = mul nsw i32 %v2_12efc, 4
  %v1_12f0c = add nsw i32 %v3_12f08, 32
  %v1_12f10 = urem i32 %v6_12f04, 4
  %v2_12f14 = or i32 %v1_12f10, %v1_12f0c
  ret i32 %v2_12f14

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12f1c() local_unnamed_addr {
dec_label_pc_12f1c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12f1c = load i32, i32* @r4, align 4
  %v6_12f1c = load i32, i32* @r5, align 4
  %v9_12f1c = load i32, i32* @r6, align 4
  %v12_12f1c = load i32, i32* @r7, align 4
  %v15_12f1c = load i32, i32* @r8, align 4
  %v18_12f1c = load i32, i32* @sb, align 4
  %v21_12f1c = load i32, i32* @sl, align 4
  %v24_12f1c = load i32, i32* @fp, align 4
  %v27_12f1c = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  %v4_12f30 = load i32, i32* inttoptr (i32 131456 to i32*), align 128
  store i32 %v4_12f30, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_12f3c = load i32, i32* inttoptr (i32 131424 to i32*), align 32
  store i32 %v4_12f3c, i32* %r1.global-to-local, align 4
  %v0_12f40 = load i32, i32* @r0, align 4
  store i32 %v0_12f40, i32* @r5, align 4
  store i32 %v4_12f30, i32* %r2.global-to-local, align 4
  %v2_12f48 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12f48, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %ip.global-to-local, align 4
  %v4_12f54 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  store i32 %v4_12f54, i32* %ip.global-to-local, align 4
  store i32 77664, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12f54)
  %v0_12f60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12f60, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  %v4_12f6c = load i32, i32* inttoptr (i32 131404 to i32*), align 4
  store i32 %v4_12f6c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12f78.504 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12f6c)
  %v0_12f78 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_12f78, -32
  br i1 %tmp, label %dec_label_pc_12f94, label %dec_label_pc_12f80

dec_label_pc_12f80:                               ; preds = %dec_label_pc_12f1c
  %v0_12f80 = call i32 @function_128f0()
  store i32 %v0_12f80, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_12f8c = inttoptr i32 %v0_12f80 to i32*
  store i32 12, i32* %v2_12f8c, align 4
  br label %dec_label_pc_13810

dec_label_pc_12f94:                               ; preds = %dec_label_pc_12f1c
  %v1_12f94 = add i32 %v0_12f78, 11
  store i32 %v1_12f94, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r2.global-to-local, align 4
  %v2_12fa0 = icmp ugt i32 %v1_12f94, 14
  %v7_12fa0 = icmp eq i32 %v1_12f94, 15
  %v2_12fa4 = xor i1 %v7_12fa0, true
  %v3_12fa4 = and i1 %v2_12fa0, %v2_12fa4
  br i1 %v3_12fa4, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_12f94
  %v5_12fa4 = and i32 %v1_12f94, -8
  store i32 %v5_12fa4, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_12f94, %bb
  %v4_12fa8 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_12fa8, i32* @r0, align 4
  %v1_12fac = inttoptr i32 %v4_12fa8 to i32*
  %v2_12fac = load i32, i32* %v1_12fac, align 4
  store i32 %v2_12fac, i32* @r4, align 4
  %v2_12fb0 = xor i1 %v2_12fa0, true
  %v3_12fb0 = or i1 %v7_12fa0, %v2_12fb0
  br i1 %v3_12fb0, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_12fb4 = urem i32 %v2_12fac, 2
  %v2_12fb4 = icmp eq i32 %v1_12fb4, 0
  br i1 %v2_12fb4, label %dec_label_pc_12fbc, label %dec_label_pc_12fcc

dec_label_pc_12fbc:                               ; preds = %bb140
  %v2_12fbc = icmp eq i32 %v2_12fac, 0
  br i1 %v2_12fbc, label %dec_label_pc_12fc4, label %dec_label_pc_133a8

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12fbc
  %v0_12fc4 = call i32 @function_13dd4()
  store i32 %v0_12fc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133a8

dec_label_pc_12fcc:                               ; preds = %bb140
  %v0_12fcc = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_12fcc, %v2_12fac
  br i1 %tmp201, label %dec_label_pc_12ff4, label %dec_label_pc_12fd4

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fcc
  %v1_12fd4 = add i32 %v4_12fa8, -4
  store i32 %v1_12fd4, i32* %r1.global-to-local, align 4
  %v3_12fd8 = udiv i32 %v0_12fcc, 8
  store i32 %v3_12fd8, i32* %r2.global-to-local, align 4
  %v4_12fdc = mul nuw i32 %v3_12fd8, 4
  %v5_12fdc = add i32 %v4_12fdc, %v1_12fd4
  %v6_12fdc = inttoptr i32 %v5_12fdc to i32*
  %v7_12fdc = load i32, i32* %v6_12fdc, align 4
  store i32 %v7_12fdc, i32* %r0.global-to-local, align 4
  %v2_12fe0 = icmp eq i32 %v7_12fdc, 0
  br i1 %v2_12fe0, label %dec_label_pc_12ff4, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12fd4
  %v2_12fe4 = add i32 %v7_12fdc, 8
  %v3_12fe4 = inttoptr i32 %v2_12fe4 to i32*
  %v4_12fe4 = load i32, i32* %v3_12fe4, align 4
  store i32 %v4_12fe4, i32* %r3.global-to-local, align 4
  store i32 %v2_12fe4, i32* %r0.global-to-local, align 4
  store i32 %v2_12fe4, i32* %r4.global-to-local, align 4
  store i32 %v4_12fe4, i32* %v6_12fdc, align 4
  br label %dec_label_pc_137f4

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12fd4, %dec_label_pc_12fcc
  %tmp202 = icmp ugt i32 %v0_12fcc, 255
  br i1 %tmp202, label %dec_label_pc_13044, label %dec_label_pc_12ffc

dec_label_pc_12ffc:                               ; preds = %dec_label_pc_12ff4
  store i32 131388, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13004 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  %v3_13008 = udiv i32 %v0_12fcc, 8
  store i32 %v3_13008, i32* @r7, align 4
  %v4_1300c = mul nuw i32 %v3_13008, 8
  %v5_1300c = add i32 %v4_13004, %v4_1300c
  store i32 %v5_1300c, i32* %r3.global-to-local, align 4
  %v1_13010 = add i32 %v5_1300c, 44
  store i32 %v1_13010, i32* %ip.global-to-local, align 4
  %v1_13014 = add i32 %v5_1300c, 56
  %v2_13014 = inttoptr i32 %v1_13014 to i32*
  %v3_13014 = load i32, i32* %v2_13014, align 4
  store i32 %v3_13014, i32* %r0.global-to-local, align 4
  %v9_13018 = icmp eq i32 %v3_13014, %v1_13010
  br i1 %v9_13018, label %dec_label_pc_131a4, label %dec_label_pc_13020

dec_label_pc_13020:                               ; preds = %dec_label_pc_12ffc
  %v2_13020 = add i32 %v3_13014, %v0_12fcc
  store i32 %v2_13020, i32* %r3.global-to-local, align 4
  %v1_13024 = add i32 %v2_13020, 4
  %v2_13024 = inttoptr i32 %v1_13024 to i32*
  %v3_13024 = load i32, i32* %v2_13024, align 4
  store i32 %v3_13024, i32* %r2.global-to-local, align 4
  %v1_13028 = add i32 %v3_13014, 12
  %v2_13028 = inttoptr i32 %v1_13028 to i32*
  %v3_13028 = load i32, i32* %v2_13028, align 4
  store i32 %v3_13028, i32* %r1.global-to-local, align 4
  %v1_1302c = or i32 %v3_13024, 1
  store i32 %v1_1302c, i32* %r2.global-to-local, align 4
  %v1_13030 = add i32 %v3_13014, 8
  store i32 %v1_13030, i32* %r4.global-to-local, align 4
  store i32 %v1_1302c, i32* %v2_13024, align 4
  %v0_13038 = load i32, i32* %ip.global-to-local, align 4
  %v1_13038 = load i32, i32* %r1.global-to-local, align 4
  %v2_13038 = add i32 %v1_13038, 8
  %v3_13038 = inttoptr i32 %v2_13038 to i32*
  store i32 %v0_13038, i32* %v3_13038, align 4
  %v0_1303c = load i32, i32* %r1.global-to-local, align 4
  %v1_1303c = load i32, i32* %ip.global-to-local, align 4
  %v2_1303c = add i32 %v1_1303c, 12
  %v3_1303c = inttoptr i32 %v2_1303c to i32*
  store i32 %v0_1303c, i32* %v3_1303c, align 4
  br label %dec_label_pc_137f4

dec_label_pc_13044:                               ; preds = %dec_label_pc_12ff4
  store i32 %v0_12fcc, i32* %r0.global-to-local, align 4
  %v1_13048 = call i32 @function_12ea4(i32 %v0_12fcc)
  store i32 %v1_13048, i32* %r0.global-to-local, align 4
  %v0_1304c = load i32, i32* @r4, align 4
  %v1_1304c = and i32 %v0_1304c, 2
  %v2_1304c = icmp eq i32 %v1_1304c, 0
  store i32 %v1_13048, i32* @r7, align 4
  br i1 %v2_1304c, label %dec_label_pc_131a4, label %dec_label_pc_13058

dec_label_pc_13058:                               ; preds = %dec_label_pc_13044
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  %v4_13060 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_13060, i32* @r0, align 4
  %v0_13064 = call i32 @function_13dd4()
  store i32 %v0_13064, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_131a4

dec_label_pc_1306c:                               ; preds = %dec_label_pc_131b8
  %v1_1306c = add i32 %v3_131b8, 4
  %v2_1306c = inttoptr i32 %v1_1306c to i32*
  %v3_1306c = load i32, i32* %v2_1306c, align 4
  store i32 %v3_1306c, i32* %r3.global-to-local, align 4
  %v0_13070 = load i32, i32* @sl, align 4
  %v1_13074 = and i32 %v3_1306c, -4
  store i32 %v1_13074, i32* %r4.global-to-local, align 4
  %v1_13078 = add i32 %v3_131b8, 12
  %v2_13078 = inttoptr i32 %v1_13078 to i32*
  %v3_13078 = load i32, i32* %v2_13078, align 4
  store i32 %v3_13078, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_13070, 255
  br i1 %tmp203, label %dec_label_pc_130d4, label %dec_label_pc_13080

dec_label_pc_13080:                               ; preds = %dec_label_pc_1306c
  %v9_13080 = icmp eq i32 %v3_13078, %v0_130d8
  br i1 %v9_13080, label %dec_label_pc_13088, label %dec_label_pc_130d4

dec_label_pc_13088:                               ; preds = %dec_label_pc_13080
  %v0_13088 = load i32, i32* @sb, align 4
  %v1_13088 = add i32 %v0_13088, 48
  %v2_13088 = inttoptr i32 %v1_13088 to i32*
  %v3_13088 = load i32, i32* %v2_13088, align 4
  store i32 %v3_13088, i32* %r3.global-to-local, align 4
  %v9_1308c = icmp eq i32 %v3_131b8, %v3_13088
  br i1 %v9_1308c, label %dec_label_pc_13094, label %dec_label_pc_130d4

dec_label_pc_13094:                               ; preds = %dec_label_pc_13088
  %v1_13094 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_13074, %v1_13094
  br i1 %tmp204, label %dec_label_pc_1309c, label %dec_label_pc_130d4

dec_label_pc_1309c:                               ; preds = %dec_label_pc_13094
  %v2_1309c = sub i32 %v1_13074, %v0_13070
  store i32 %v2_1309c, i32* %r2.global-to-local, align 4
  %v2_130a0 = add i32 %v0_13070, %v3_131b8
  store i32 %v2_130a0, i32* %r3.global-to-local, align 4
  %v1_130a4 = or i32 %v0_13070, 1
  store i32 %v1_130a4, i32* %r0.global-to-local, align 4
  %v1_130a8 = or i32 %v2_1309c, 1
  store i32 %v1_130a8, i32* %r1.global-to-local, align 4
  %v1_130ac = add i32 %v3_131b8, 8
  store i32 %v1_130ac, i32* %r4.global-to-local, align 4
  %v2_130b0 = add i32 %v0_130d8, 8
  %v3_130b0 = inttoptr i32 %v2_130b0 to i32*
  store i32 %v2_130a0, i32* %v3_130b0, align 4
  %v0_130b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_130b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_130b4 = add i32 %v1_130b4, 12
  %v3_130b4 = inttoptr i32 %v2_130b4 to i32*
  store i32 %v0_130b4, i32* %v3_130b4, align 4
  %v0_130b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_130b8 = load i32, i32* @r6, align 4
  %v2_130b8 = add i32 %v1_130b8, 4
  %v3_130b8 = inttoptr i32 %v2_130b8 to i32*
  store i32 %v0_130b8, i32* %v3_130b8, align 4
  %v0_130bc = load i32, i32* %r3.global-to-local, align 4
  %v1_130bc = load i32, i32* @sb, align 4
  %v2_130bc = add i32 %v1_130bc, 48
  %v3_130bc = inttoptr i32 %v2_130bc to i32*
  store i32 %v0_130bc, i32* %v3_130bc, align 4
  %v0_130c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_130c0 = load i32, i32* %r3.global-to-local, align 4
  %v3_130c0 = add i32 %v1_130c0, %v0_130c0
  %v4_130c0 = inttoptr i32 %v3_130c0 to i32*
  store i32 %v0_130c0, i32* %v4_130c0, align 4
  %v0_130c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_130c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_130c4 = add i32 %v1_130c4, 4
  %v3_130c4 = inttoptr i32 %v2_130c4 to i32*
  store i32 %v0_130c4, i32* %v3_130c4, align 4
  %v0_130c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_130c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_130c8 = add i32 %v1_130c8, 12
  %v3_130c8 = inttoptr i32 %v2_130c8 to i32*
  store i32 %v0_130c8, i32* %v3_130c8, align 4
  %v0_130cc = load i32, i32* %ip.global-to-local, align 4
  %v1_130cc = load i32, i32* %r3.global-to-local, align 4
  %v2_130cc = add i32 %v1_130cc, 8
  %v3_130cc = inttoptr i32 %v2_130cc to i32*
  store i32 %v0_130cc, i32* %v3_130cc, align 4
  br label %dec_label_pc_137f4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_13094, %dec_label_pc_13088, %dec_label_pc_13080, %dec_label_pc_1306c
  %v9_130d4 = icmp eq i32 %v1_13074, %v0_13070
  %v2_130d8 = add i32 %v3_13078, 8
  %v3_130d8 = inttoptr i32 %v2_130d8 to i32*
  store i32 %v0_130d8, i32* %v3_130d8, align 4
  %v0_130dc = load i32, i32* %ip.global-to-local, align 4
  %v1_130dc = load i32, i32* %r5.global-to-local, align 4
  %v2_130dc = add i32 %v1_130dc, 12
  %v3_130dc = inttoptr i32 %v2_130dc to i32*
  store i32 %v0_130dc, i32* %v3_130dc, align 4
  br i1 %v9_130d4, label %dec_label_pc_13234.loopexit, label %dec_label_pc_130f0

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130d4
  %v0_130f0 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_130f0, 255
  br i1 %tmp205, label %dec_label_pc_13114, label %dec_label_pc_130f8

dec_label_pc_130f8:                               ; preds = %dec_label_pc_130f0
  store i32 131388, i32* %r2.global-to-local, align 4
  %v1_130fc = load i32, i32* %r8.global-to-local, align 4
  %v2_130fc = add i32 %v1_130fc, 131388
  %v3_130fc = inttoptr i32 %v2_130fc to i32*
  %v4_130fc = load i32, i32* %v3_130fc, align 4
  %v3_13100 = udiv i32 %v0_130f0, 8
  store i32 %v3_13100, i32* %r0.global-to-local, align 4
  %v4_13104 = mul nuw i32 %v3_13100, 8
  %v5_13104 = add i32 %v4_130fc, %v4_13104
  store i32 %v5_13104, i32* %r3.global-to-local, align 4
  %v1_13108 = add i32 %v5_13104, 44
  store i32 %v1_13108, i32* %ip.global-to-local, align 4
  %v1_1310c = add i32 %v5_13104, 52
  %v2_1310c = inttoptr i32 %v1_1310c to i32*
  %v3_1310c = load i32, i32* %v2_1310c, align 4
  store i32 %v3_1310c, i32* @lr, align 4
  br label %dec_label_pc_1316c

dec_label_pc_13114:                               ; preds = %dec_label_pc_130f0
  store i32 %v0_130f0, i32* %r0.global-to-local, align 4
  %v1_13118 = call i32 @function_12ea4(i32 %v0_130f0)
  store i32 %v1_13118, i32* %r0.global-to-local, align 4
  store i32 131388, i32* %ip.global-to-local, align 4
  %v1_13120 = load i32, i32* %r8.global-to-local, align 4
  %v2_13120 = add i32 %v1_13120, 131388
  %v3_13120 = inttoptr i32 %v2_13120 to i32*
  %v4_13120 = load i32, i32* %v3_13120, align 4
  %v4_13124 = mul i32 %v1_13118, 8
  %v5_13124 = add i32 %v4_13120, %v4_13124
  store i32 %v5_13124, i32* %r3.global-to-local, align 4
  %v1_13128 = add i32 %v5_13124, 44
  store i32 %v1_13128, i32* %ip.global-to-local, align 4
  %v1_1312c = add i32 %v5_13124, 52
  %v2_1312c = inttoptr i32 %v1_1312c to i32*
  %v3_1312c = load i32, i32* %v2_1312c, align 4
  store i32 %v3_1312c, i32* @lr, align 4
  %v9_13130 = icmp eq i32 %v3_1312c, %v1_13128
  br i1 %v9_13130, label %dec_label_pc_1316c, label %dec_label_pc_13138

dec_label_pc_13138:                               ; preds = %dec_label_pc_13114
  %v1_13138 = add i32 %v5_13124, 56
  %v2_13138 = inttoptr i32 %v1_13138 to i32*
  %v3_13138 = load i32, i32* %v2_13138, align 4
  store i32 %v3_13138, i32* %r1.global-to-local, align 4
  %v1_1313c = add i32 %v3_13138, 4
  %v2_1313c = inttoptr i32 %v1_1313c to i32*
  %v3_1313c = load i32, i32* %v2_1313c, align 4
  store i32 %v3_1313c, i32* %r3.global-to-local, align 4
  %v0_13140 = load i32, i32* %r4.global-to-local, align 4
  %v3_13140 = icmp ult i32 %v0_13140, %v3_1313c
  br i1 %v3_13140, label %.thread, label %dec_label_pc_1315c.preheader

.thread:                                          ; preds = %dec_label_pc_13138
  store i32 %v1_13128, i32* @lr, align 4
  store i32 %v3_13138, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1316c

dec_label_pc_1315c.preheader:                     ; preds = %dec_label_pc_13138
  %v2_13148 = or i32 %v0_13140, 1
  store i32 %v2_13148, i32* %r2.global-to-local, align 4
  %v1_1315c179 = add i32 %v3_1312c, 4
  %v2_1315c180 = inttoptr i32 %v1_1315c179 to i32*
  %v3_1315c181 = load i32, i32* %v2_1315c180, align 4
  store i32 %v3_1315c181, i32* %r3.global-to-local, align 4
  %v3_13160183 = icmp ult i32 %v2_13148, %v3_1315c181
  br i1 %v3_13160183, label %dec_label_pc_13158, label %dec_label_pc_13168

dec_label_pc_13158:                               ; preds = %dec_label_pc_1315c.preheader, %dec_label_pc_13158
  %v0_13168184 = phi i32 [ %v3_13158, %dec_label_pc_13158 ], [ %v3_1312c, %dec_label_pc_1315c.preheader ]
  %v1_13158 = add i32 %v0_13168184, 8
  %v2_13158 = inttoptr i32 %v1_13158 to i32*
  %v3_13158 = load i32, i32* %v2_13158, align 4
  store i32 %v3_13158, i32* @lr, align 4
  %v1_1315c = add i32 %v3_13158, 4
  %v2_1315c = inttoptr i32 %v1_1315c to i32*
  %v3_1315c = load i32, i32* %v2_1315c, align 4
  store i32 %v3_1315c, i32* %r3.global-to-local, align 4
  %v3_13160 = icmp ult i32 %v2_13148, %v3_1315c
  br i1 %v3_13160, label %dec_label_pc_13158, label %dec_label_pc_13168

dec_label_pc_13168:                               ; preds = %dec_label_pc_13158, %dec_label_pc_1315c.preheader
  %v0_13168.lcssa = phi i32 [ %v3_1312c, %dec_label_pc_1315c.preheader ], [ %v3_13158, %dec_label_pc_13158 ]
  %v1_13168 = add i32 %v0_13168.lcssa, 12
  %v2_13168 = inttoptr i32 %v1_13168 to i32*
  %v3_13168 = load i32, i32* %v2_13168, align 4
  store i32 %v3_13168, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1316c

dec_label_pc_1316c:                               ; preds = %.thread, %dec_label_pc_13114, %dec_label_pc_130f8, %dec_label_pc_13168
  %v0_1318c = phi i32 [ %v1_13128, %dec_label_pc_13114 ], [ %v1_13108, %dec_label_pc_130f8 ], [ %v3_13168, %dec_label_pc_13168 ], [ %v3_13138, %.thread ]
  %v0_13180 = phi i32 [ %v1_13118, %dec_label_pc_13114 ], [ %v3_13100, %dec_label_pc_130f8 ], [ %v1_13118, %dec_label_pc_13168 ], [ %v1_13118, %.thread ]
  %v1_13170 = phi i32 [ %v1_13120, %dec_label_pc_13114 ], [ %v1_130fc, %dec_label_pc_130f8 ], [ %v1_13120, %dec_label_pc_13168 ], [ %v1_13120, %.thread ]
  store i32 131388, i32* %r2.global-to-local, align 4
  %v2_13170 = add i32 %v1_13170, 131388
  %v3_13170 = inttoptr i32 %v2_13170 to i32*
  %v4_13170 = load i32, i32* %v3_13170, align 4
  %v3_13174 = sdiv i32 %v0_13180, 32
  store i32 %v3_13174, i32* %r3.global-to-local, align 4
  %v4_13178 = mul nsw i32 %v3_13174, 4
  %v5_13178 = add i32 %v4_13170, %v4_13178
  store i32 %v5_13178, i32* %r1.global-to-local, align 4
  %v1_1317c = add i32 %v5_13178, 820
  %v2_1317c = inttoptr i32 %v1_1317c to i32*
  %v3_1317c = load i32, i32* %v2_1317c, align 4
  %v1_13180 = urem i32 %v0_13180, 32
  store i32 %v1_13180, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_13188 = shl i32 1, %v1_13180
  %v8_13188 = or i32 %v3_1317c, %v7_13188
  store i32 %v8_13188, i32* %r3.global-to-local, align 4
  %v1_1318c = load i32, i32* @r6, align 4
  %v2_1318c = add i32 %v1_1318c, 12
  %v3_1318c = inttoptr i32 %v2_1318c to i32*
  store i32 %v0_1318c, i32* %v3_1318c, align 4
  %v0_13190 = load i32, i32* @lr, align 4
  %v1_13190 = load i32, i32* @r6, align 4
  %v2_13190 = add i32 %v1_13190, 8
  %v3_13190 = inttoptr i32 %v2_13190 to i32*
  store i32 %v0_13190, i32* %v3_13190, align 4
  %v0_13194 = load i32, i32* %r3.global-to-local, align 4
  %v1_13194 = load i32, i32* %r1.global-to-local, align 4
  %v2_13194 = add i32 %v1_13194, 820
  %v3_13194 = inttoptr i32 %v2_13194 to i32*
  store i32 %v0_13194, i32* %v3_13194, align 4
  %v0_13198 = load i32, i32* @r6, align 4
  %v1_13198 = load i32, i32* @lr, align 4
  %v2_13198 = add i32 %v1_13198, 12
  %v3_13198 = inttoptr i32 %v2_13198 to i32*
  store i32 %v0_13198, i32* %v3_13198, align 4
  %v0_1319c = load i32, i32* @r6, align 4
  %v1_1319c = load i32, i32* %ip.global-to-local, align 4
  %v2_1319c = add i32 %v1_1319c, 8
  %v3_1319c = inttoptr i32 %v2_1319c to i32*
  store i32 %v0_1319c, i32* %v3_1319c, align 4
  %v0_131b8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_131b8

dec_label_pc_131a4:                               ; preds = %dec_label_pc_13044, %dec_label_pc_12ffc, %dec_label_pc_13058
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  %v4_131ac = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_131ac, i32* @sb, align 4
  %v0_131b0 = load i32, i32* @sl, align 4
  %v1_131b0 = add i32 %v0_131b0, 16
  store i32 %v1_131b0, i32* @fp, align 4
  %v1_131b4 = add i32 %v4_131ac, 52
  store i32 %v1_131b4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_131b8

dec_label_pc_131b8:                               ; preds = %dec_label_pc_1316c, %dec_label_pc_131a4
  %v0_130d8 = phi i32 [ %v0_131b8.pre, %dec_label_pc_1316c ], [ %v1_131b4, %dec_label_pc_131a4 ]
  %v1_131b8 = add i32 %v0_130d8, 12
  %v2_131b8 = inttoptr i32 %v1_131b8 to i32*
  %v3_131b8 = load i32, i32* %v2_131b8, align 4
  store i32 %v3_131b8, i32* @r6, align 4
  %v9_131bc = icmp eq i32 %v3_131b8, %v0_130d8
  br i1 %v9_131bc, label %dec_label_pc_131c4, label %dec_label_pc_1306c

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131b8
  %v0_131c4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_131c4, 256
  %v0_1327c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_131c4.dec_label_pc_1327c_crit_edge, label %dec_label_pc_131cc

dec_label_pc_131c4.dec_label_pc_1327c_crit_edge:  ; preds = %dec_label_pc_131c4
  %.pre200 = mul i32 %v0_1327c.pre, 8
  br label %dec_label_pc_1327c

dec_label_pc_131cc:                               ; preds = %dec_label_pc_131c4
  %v4_131cc = mul i32 %v0_1327c.pre, 8
  %v5_131cc = add i32 %v4_131cc, %v0_130d8
  store i32 %v5_131cc, i32* %r3.global-to-local, align 4
  %v1_131d0 = add i32 %v5_131cc, -8
  store i32 %v1_131d0, i32* %r1.global-to-local, align 4
  %v1_131d4 = add i32 %v5_131cc, 4
  %v2_131d4 = inttoptr i32 %v1_131d4 to i32*
  %storemerge.pre = load i32, i32* %v2_131d4, align 4
  br label %dec_label_pc_13274

dec_label_pc_131dc:                               ; preds = %dec_label_pc_13274
  %v1_131dc = add i32 %v1_13204, 4
  %v2_131dc = inttoptr i32 %v1_131dc to i32*
  %v3_131dc = load i32, i32* %v2_131dc, align 4
  store i32 %v3_131dc, i32* %r3.global-to-local, align 4
  %v1_131e0 = and i32 %v3_131dc, -4
  store i32 %v1_131e0, i32* %r2.global-to-local, align 4
  %v3_131e4 = icmp ult i32 %v1_131e0, %v0_131c4
  %v1_131e8 = add i32 %v1_13204, 12
  %v2_131e8 = inttoptr i32 %v1_131e8 to i32*
  %v3_131e8 = load i32, i32* %v2_131e8, align 4
  store i32 %v3_131e8, i32* %r0.global-to-local, align 4
  br i1 %v3_131e4, label %dec_label_pc_13274, label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131dc
  %v1_131f0 = add i32 %v1_13204, 8
  %v2_131f0 = inttoptr i32 %v1_131f0 to i32*
  %v3_131f0 = load i32, i32* %v2_131f0, align 4
  store i32 %v3_131f0, i32* %r1.global-to-local, align 4
  %v1_131f4 = add i32 %v3_131f0, 12
  %v2_131f4 = inttoptr i32 %v1_131f4 to i32*
  %v3_131f4 = load i32, i32* %v2_131f4, align 4
  store i32 %v3_131f4, i32* %r3.global-to-local, align 4
  %v9_131f8 = icmp eq i32 %v3_131f4, %v1_13204
  br i1 %v9_131f8, label %dec_label_pc_13200, label %dec_label_pc_1320c

dec_label_pc_13200:                               ; preds = %dec_label_pc_131f0
  %v1_13200 = add i32 %v3_131e8, 8
  %v2_13200 = inttoptr i32 %v1_13200 to i32*
  %v3_13200 = load i32, i32* %v2_13200, align 4
  store i32 %v3_13200, i32* %r3.global-to-local, align 4
  %v9_13204 = icmp eq i32 %v3_13200, %v1_13204
  br i1 %v9_13204, label %dec_label_pc_13210, label %dec_label_pc_1320c

dec_label_pc_1320c:                               ; preds = %dec_label_pc_131f0, %dec_label_pc_13200
  %v0_1320c = call i32 @function_14204()
  store i32 %v0_1320c, i32* %r0.global-to-local, align 4
  %v0_13210.pre = load i32, i32* @sl, align 4
  %v1_13210.pre = load i32, i32* @r2, align 4
  %v0_13218.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_13210

dec_label_pc_13210:                               ; preds = %dec_label_pc_13200, %dec_label_pc_1320c
  %v1_13218 = phi i32 [ %v3_131e8, %dec_label_pc_13200 ], [ %v0_1320c, %dec_label_pc_1320c ]
  %v0_13218 = phi i32 [ %v3_131f0, %dec_label_pc_13200 ], [ %v0_13218.pre, %dec_label_pc_1320c ]
  %v1_13210 = phi i32 [ %v1_131e0, %dec_label_pc_13200 ], [ %v1_13210.pre, %dec_label_pc_1320c ]
  %v0_13210 = phi i32 [ %v0_131c4, %dec_label_pc_13200 ], [ %v0_13210.pre, %dec_label_pc_1320c ]
  %v2_13210 = sub i32 %v1_13210, %v0_13210
  store i32 %v2_13210, i32* %lr.global-to-local, align 4
  %v2_13218 = add i32 %v1_13218, 8
  %v3_13218 = inttoptr i32 %v2_13218 to i32*
  store i32 %v0_13218, i32* %v3_13218, align 4
  %v0_1321c = load i32, i32* %r0.global-to-local, align 4
  %v1_1321c = load i32, i32* %r1.global-to-local, align 4
  %v2_1321c = add i32 %v1_1321c, 12
  %v3_1321c = inttoptr i32 %v2_1321c to i32*
  store i32 %v0_1321c, i32* %v3_1321c, align 4
  %v0_13220 = load i32, i32* %ip.global-to-local, align 4
  %v1_13220 = add i32 %v0_13220, 8
  store i32 %v1_13220, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_13210, 15
  br i1 %tmp207, label %dec_label_pc_13240, label %dec_label_pc_13228

dec_label_pc_13228:                               ; preds = %dec_label_pc_13210
  %v1_13228 = load i32, i32* %r2.global-to-local, align 4
  %v2_13228 = add i32 %v1_13228, %v0_13220
  store i32 %v2_13228, i32* %r2.global-to-local, align 4
  %v1_1322c = add i32 %v2_13228, 4
  %v2_1322c = inttoptr i32 %v1_1322c to i32*
  %v3_1322c = load i32, i32* %v2_1322c, align 4
  store i32 %v3_1322c, i32* %r3.global-to-local, align 4
  store i32 %v1_13220, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234.loopexit:                      ; preds = %dec_label_pc_130d4
  %v1_130e0 = load i32, i32* @r6, align 4
  %v2_130e0 = load i32, i32* @sl, align 4
  %v3_130e0 = add i32 %v2_130e0, %v1_130e0
  store i32 %v3_130e0, i32* %r2.global-to-local, align 4
  %v2_130e4 = add i32 %v3_130e0, 4
  %v3_130e4 = inttoptr i32 %v2_130e4 to i32*
  %v4_130e4 = load i32, i32* %v3_130e4, align 4
  store i32 %v4_130e4, i32* %r3.global-to-local, align 4
  %v2_130e8 = add i32 %v1_130e0, 8
  store i32 %v2_130e8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %.dec_label_pc_13234_crit_edge, %dec_label_pc_13234.loopexit, %dec_label_pc_13228
  %v1_13238 = phi i32 [ %v4_1335c, %.dec_label_pc_13234_crit_edge ], [ %v3_130e0, %dec_label_pc_13234.loopexit ], [ %v2_13228, %dec_label_pc_13228 ]
  %v0_13234 = phi i32 [ %v7_1335c, %.dec_label_pc_13234_crit_edge ], [ %v4_130e4, %dec_label_pc_13234.loopexit ], [ %v3_1322c, %dec_label_pc_13228 ]
  %v1_13234 = or i32 %v0_13234, 1
  store i32 %v1_13234, i32* %r3.global-to-local, align 4
  %v2_13238 = add i32 %v1_13238, 4
  %v3_13238 = inttoptr i32 %v2_13238 to i32*
  store i32 %v1_13234, i32* %v3_13238, align 4
  br label %dec_label_pc_137f4

dec_label_pc_13240:                               ; preds = %dec_label_pc_13210
  %v1_13240 = load i32, i32* @sl, align 4
  %v2_13240 = add i32 %v1_13240, %v0_13220
  store i32 %v2_13240, i32* %r2.global-to-local, align 4
  %v1_13244 = or i32 %v1_13240, 1
  store i32 %v1_13244, i32* %r3.global-to-local, align 4
  %v0_13248 = load i32, i32* %lr.global-to-local, align 4
  %v1_13248 = or i32 %v0_13248, 1
  store i32 %v1_13248, i32* %r1.global-to-local, align 4
  store i32 %v1_13220, i32* %r4.global-to-local, align 4
  %v2_13250 = add i32 %v0_13220, 4
  %v3_13250 = inttoptr i32 %v2_13250 to i32*
  store i32 %v1_13244, i32* %v3_13250, align 4
  %v0_13254 = load i32, i32* %r2.global-to-local, align 4
  %v1_13254 = load i32, i32* @r6, align 4
  %v2_13254 = add i32 %v1_13254, 8
  %v3_13254 = inttoptr i32 %v2_13254 to i32*
  store i32 %v0_13254, i32* %v3_13254, align 4
  %v0_13258 = load i32, i32* %r2.global-to-local, align 4
  %v1_13258 = load i32, i32* @r6, align 4
  %v2_13258 = add i32 %v1_13258, 12
  %v3_13258 = inttoptr i32 %v2_13258 to i32*
  store i32 %v0_13258, i32* %v3_13258, align 4
  %v0_1325c = load i32, i32* %lr.global-to-local, align 4
  %v1_1325c = load i32, i32* %r2.global-to-local, align 4
  %v3_1325c = add i32 %v1_1325c, %v0_1325c
  %v4_1325c = inttoptr i32 %v3_1325c to i32*
  store i32 %v0_1325c, i32* %v4_1325c, align 4
  %v0_13260 = load i32, i32* %r1.global-to-local, align 4
  %v1_13260 = load i32, i32* %r2.global-to-local, align 4
  %v2_13260 = add i32 %v1_13260, 4
  %v3_13260 = inttoptr i32 %v2_13260 to i32*
  store i32 %v0_13260, i32* %v3_13260, align 4
  %v0_13264 = load i32, i32* @r6, align 4
  %v1_13264 = load i32, i32* %r2.global-to-local, align 4
  %v2_13264 = add i32 %v1_13264, 12
  %v3_13264 = inttoptr i32 %v2_13264 to i32*
  store i32 %v0_13264, i32* %v3_13264, align 4
  %v0_13268 = load i32, i32* @r6, align 4
  %v1_13268 = load i32, i32* %r2.global-to-local, align 4
  %v2_13268 = add i32 %v1_13268, 8
  %v3_13268 = inttoptr i32 %v2_13268 to i32*
  store i32 %v0_13268, i32* %v3_13268, align 4
  br label %dec_label_pc_137f4

dec_label_pc_13274:                               ; preds = %dec_label_pc_131dc, %dec_label_pc_131cc
  %v1_13204 = phi i32 [ %storemerge.pre, %dec_label_pc_131cc ], [ %v3_131e8, %dec_label_pc_131dc ]
  store i32 %v1_13204, i32* %ip.global-to-local, align 4
  %v9_13274 = icmp eq i32 %v1_13204, %v1_131d0
  br i1 %v9_13274, label %dec_label_pc_1327c.loopexit, label %dec_label_pc_131dc

dec_label_pc_1327c.loopexit:                      ; preds = %dec_label_pc_13274
  br label %dec_label_pc_1327c

dec_label_pc_1327c:                               ; preds = %dec_label_pc_131c4.dec_label_pc_1327c_crit_edge, %dec_label_pc_1327c.loopexit
  %v4_132ac.pre-phi = phi i32 [ %.pre200, %dec_label_pc_131c4.dec_label_pc_1327c_crit_edge ], [ %v4_131cc, %dec_label_pc_1327c.loopexit ]
  %v1_1327c = add i32 %v0_1327c.pre, 1
  store i32 %v1_1327c, i32* %r2.global-to-local, align 4
  %v1_13280 = urem i32 %v1_1327c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 131388, i32* %r0.global-to-local, align 4
  %v6_1328c = shl i32 1, %v1_13280
  store i32 %v6_1328c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13294 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_13294, i32* %r3.global-to-local, align 4
  %v3_13298 = udiv i32 %v1_1327c, 32
  store i32 %v3_13298, i32* @r5, align 4
  %v4_1329c = mul nuw nsw i32 %v3_13298, 4
  %v5_1329c = add i32 %v4_13294, %v4_1329c
  store i32 %v5_1329c, i32* %r2.global-to-local, align 4
  %v1_132a0 = add i32 %v5_1329c, 820
  %v2_132a0 = inttoptr i32 %v1_132a0 to i32*
  %v3_132a0 = load i32, i32* %v2_132a0, align 4
  store i32 %v3_132a0, i32* @r4, align 4
  %v1_132a4 = add i32 %v4_13294, 52
  store i32 %v1_132a4, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_132ac = add i32 %v1_132a4, %v4_132ac.pre-phi
  store i32 %v5_132ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132b0

dec_label_pc_132b0:                               ; preds = %dec_label_pc_13318, %dec_label_pc_1327c
  %v1_132b8 = phi i32 [ %v1_132b8.pre, %dec_label_pc_13318 ], [ %v3_132a0, %dec_label_pc_1327c ]
  %v0_132b8 = phi i32 [ %v0_132b0.pre, %dec_label_pc_13318 ], [ %v6_1328c, %dec_label_pc_1327c ]
  %v1_132b0 = sub i32 1, %v0_132b8
  %v2_132b0 = icmp ult i32 %v0_132b8, 2
  %v1_132b0. = select i1 %v2_132b0, i32 %v1_132b0, i32 0
  store i32 %v1_132b0., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_132b8, %v1_132b8
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_132b0
  %v5_132bc = or i32 %v1_132b0., 1
  store i32 %v5_132bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_132c8.preheader

bb142:                                            ; preds = %dec_label_pc_132b0
  %v2_132c0 = icmp eq i32 %v1_132b0., 0
  br i1 %v2_132c0, label %.dec_label_pc_13304.preheader_crit_edge, label %dec_label_pc_132c8.preheader

.dec_label_pc_13304.preheader_crit_edge:          ; preds = %bb142
  %v0_132fc54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13304.preheader

dec_label_pc_132c8.preheader:                     ; preds = %bb142, %.thread12
  %v0_132c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_132c8

dec_label_pc_132c8:                               ; preds = %dec_label_pc_132c8.preheader, %dec_label_pc_132d4
  %v0_132c8 = phi i32 [ %v0_132c8.pre, %dec_label_pc_132c8.preheader ], [ %v1_132c8, %dec_label_pc_132d4 ]
  %v1_132c8 = add i32 %v0_132c8, 1
  store i32 %v1_132c8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_132c8, 2
  br i1 %tmp208, label %dec_label_pc_133a8.loopexit, label %dec_label_pc_132d4

dec_label_pc_132d4:                               ; preds = %dec_label_pc_132c8
  store i32 131388, i32* %r3.global-to-local, align 4
  %v1_132d8 = load i32, i32* @r8, align 4
  %v2_132d8 = add i32 %v1_132d8, 131388
  %v3_132d8 = inttoptr i32 %v2_132d8 to i32*
  %v4_132d8 = load i32, i32* %v3_132d8, align 4
  store i32 %v4_132d8, i32* %r2.global-to-local, align 4
  %v4_132dc = mul i32 %v1_132c8, 4
  %v5_132dc = add i32 %v4_132d8, %v4_132dc
  store i32 %v5_132dc, i32* %r3.global-to-local, align 4
  %v1_132e0 = add i32 %v5_132dc, 820
  %v2_132e0 = inttoptr i32 %v1_132e0 to i32*
  %v3_132e0 = load i32, i32* %v2_132e0, align 4
  store i32 %v3_132e0, i32* @r4, align 4
  %v2_132e4 = icmp eq i32 %v3_132e0, 0
  br i1 %v2_132e4, label %dec_label_pc_132c8, label %dec_label_pc_132ec

dec_label_pc_132ec:                               ; preds = %dec_label_pc_132d4
  %v4_132ec = mul i32 %v1_132c8, 256
  %v5_132ec = add i32 %v4_132d8, %v4_132ec
  store i32 %v5_132ec, i32* %r3.global-to-local, align 4
  %v1_132f0 = add i32 %v5_132ec, 44
  store i32 %v1_132f0, i32* %r0.global-to-local, align 4
  %v0_132f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_132f4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13304.preheader

dec_label_pc_13304.preheader:                     ; preds = %.dec_label_pc_13304.preheader_crit_edge, %dec_label_pc_132ec
  %v0_132fc54 = phi i32 [ %v1_132f0, %dec_label_pc_132ec ], [ %v0_132fc54.pre, %.dec_label_pc_13304.preheader_crit_edge ]
  %v0_13320 = phi i32 [ %v3_132e0, %dec_label_pc_132ec ], [ %v1_132b8, %.dec_label_pc_13304.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_132f4, %dec_label_pc_132ec ], [ %v0_132b8, %.dec_label_pc_13304.preheader_crit_edge ]
  %v2_1330451 = and i32 %ip.promoted, %v0_13320
  %v4_1330453 = icmp eq i32 %v2_1330451, 0
  br i1 %v4_1330453, label %dec_label_pc_132fc, label %dec_label_pc_1330c

dec_label_pc_132fc:                               ; preds = %dec_label_pc_13304.preheader, %dec_label_pc_132fc
  %v2_1330056 = phi i32 [ %v2_13300, %dec_label_pc_132fc ], [ %ip.promoted, %dec_label_pc_13304.preheader ]
  %v0_132fc55 = phi i32 [ %v1_132fc, %dec_label_pc_132fc ], [ %v0_132fc54, %dec_label_pc_13304.preheader ]
  %v1_132fc = add i32 %v0_132fc55, 8
  %v2_13300 = mul i32 %v2_1330056, 2
  %v2_13304 = and i32 %v2_13300, %v0_13320
  %v4_13304 = icmp eq i32 %v2_13304, 0
  br i1 %v4_13304, label %dec_label_pc_132fc, label %dec_label_pc_13304.dec_label_pc_1330c_crit_edge

dec_label_pc_13304.dec_label_pc_1330c_crit_edge:  ; preds = %dec_label_pc_132fc
  store i32 %v1_132fc, i32* %r0.global-to-local, align 4
  store i32 %v2_13300, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1330c

dec_label_pc_1330c:                               ; preds = %dec_label_pc_13304.dec_label_pc_1330c_crit_edge, %dec_label_pc_13304.preheader
  %v0_1332c = phi i32 [ %v2_13300, %dec_label_pc_13304.dec_label_pc_1330c_crit_edge ], [ %ip.promoted, %dec_label_pc_13304.preheader ]
  %v0_13350 = phi i32 [ %v1_132fc, %dec_label_pc_13304.dec_label_pc_1330c_crit_edge ], [ %v0_132fc54, %dec_label_pc_13304.preheader ]
  %v1_1330c = add i32 %v0_13350, 12
  %v2_1330c = inttoptr i32 %v1_1330c to i32*
  %v3_1330c = load i32, i32* %v2_1330c, align 4
  store i32 %v3_1330c, i32* @lr, align 4
  %v9_13310 = icmp eq i32 %v3_1330c, %v0_13350
  br i1 %v9_13310, label %dec_label_pc_13318, label %dec_label_pc_13338

dec_label_pc_13318:                               ; preds = %dec_label_pc_1330c
  store i32 131388, i32* %r0.global-to-local, align 4
  %v1_1331c = load i32, i32* @r8, align 4
  %v2_1331c = add i32 %v1_1331c, 131388
  %v3_1331c = inttoptr i32 %v2_1331c to i32*
  %v4_1331c = load i32, i32* %v3_1331c, align 4
  %v2_13320 = sub i32 -1, %v0_1332c
  %v3_13320 = and i32 %v0_13320, %v2_13320
  store i32 %v3_13320, i32* @r4, align 4
  %v1_13324 = load i32, i32* @r5, align 4
  %v4_13324 = mul i32 %v1_13324, 4
  %v5_13324 = add i32 %v4_13324, %v4_1331c
  store i32 %v5_13324, i32* %r3.global-to-local, align 4
  %v1_13328 = add i32 %v0_13350, 8
  store i32 %v1_13328, i32* %r0.global-to-local, align 4
  %v2_1332c = mul i32 %v0_1332c, 2
  store i32 %v2_1332c, i32* %ip.global-to-local, align 4
  %v2_13330 = add i32 %v5_13324, 820
  %v3_13330 = inttoptr i32 %v2_13330 to i32*
  store i32 %v3_13320, i32* %v3_13330, align 4
  %v0_132b0.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_132b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_132b0

dec_label_pc_13338:                               ; preds = %dec_label_pc_1330c
  %v1_13338 = add i32 %v3_1330c, 4
  %v2_13338 = inttoptr i32 %v1_13338 to i32*
  %v3_13338 = load i32, i32* %v2_13338, align 4
  store i32 %v3_13338, i32* %r3.global-to-local, align 4
  %v1_1333c = and i32 %v3_13338, -4
  store i32 %v1_1333c, i32* %r2.global-to-local, align 4
  %v0_13340 = load i32, i32* @sl, align 4
  %v2_13340 = sub i32 %v1_1333c, %v0_13340
  store i32 %v2_13340, i32* %ip.global-to-local, align 4
  %v1_13344 = add i32 %v3_1330c, 12
  %v2_13344 = inttoptr i32 %v1_13344 to i32*
  %v3_13344 = load i32, i32* %v2_13344, align 4
  store i32 %v3_13344, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_13340, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_13338
  %v6_1334c = add i32 %v1_1333c, %v3_1330c
  store i32 %v6_1334c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_13338, %bb143
  %v2_13350 = add i32 %v3_13344, 8
  %v3_13350 = inttoptr i32 %v2_13350 to i32*
  store i32 %v0_13350, i32* %v3_13350, align 4
  %v0_13354 = load i32, i32* %r3.global-to-local, align 4
  %v1_13354 = load i32, i32* %r0.global-to-local, align 4
  %v2_13354 = add i32 %v1_13354, 12
  %v3_13354 = inttoptr i32 %v2_13354 to i32*
  store i32 %v0_13354, i32* %v3_13354, align 4
  %v4_13358 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_13234_crit_edge, label %dec_label_pc_13364

.dec_label_pc_13234_crit_edge:                    ; preds = %bb144
  %v5_13358 = add i32 %v4_13358, 8
  store i32 %v5_13358, i32* %r4.global-to-local, align 4
  %v4_1335c = load i32, i32* %r2.global-to-local, align 4
  %v5_1335c = add i32 %v4_1335c, 4
  %v6_1335c = inttoptr i32 %v5_1335c to i32*
  %v7_1335c = load i32, i32* %v6_1335c, align 4
  store i32 %v7_1335c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13234

dec_label_pc_13364:                               ; preds = %bb144
  %v1_13364 = load i32, i32* @sl, align 4
  %v2_13364 = add i32 %v1_13364, %v4_13358
  store i32 %v2_13364, i32* %r1.global-to-local, align 4
  %v1_1336c = load i32, i32* @r6, align 4
  %v2_1336c = add i32 %v1_1336c, 8
  %v3_1336c = inttoptr i32 %v2_1336c to i32*
  store i32 %v2_13364, i32* %v3_1336c, align 4
  %v0_13370 = load i32, i32* %r1.global-to-local, align 4
  %v1_13370 = load i32, i32* @r6, align 4
  %v2_13370 = add i32 %v1_13370, 12
  %v3_13370 = inttoptr i32 %v2_13370 to i32*
  store i32 %v0_13370, i32* %v3_13370, align 4
  %v0_13374 = load i32, i32* @r6, align 4
  %v1_13374 = load i32, i32* %r1.global-to-local, align 4
  %v2_13374 = add i32 %v1_13374, 8
  %v3_13374 = inttoptr i32 %v2_13374 to i32*
  store i32 %v0_13374, i32* %v3_13374, align 4
  %v0_13378 = load i32, i32* @r6, align 4
  %v1_13378 = load i32, i32* %r1.global-to-local, align 4
  %v2_13378 = add i32 %v1_13378, 12
  %v3_13378 = inttoptr i32 %v2_13378 to i32*
  store i32 %v0_13378, i32* %v3_13378, align 4
  %tmp210 = icmp ult i32 %v1_13364, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_13364
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r2.global-to-local, align 4
  %v8_13384 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v8_13384, i32* %r3.global-to-local, align 4
  %v4_13388 = load i32, i32* %r1.global-to-local, align 4
  %v6_13388 = add i32 %v8_13384, 48
  %v7_13388 = inttoptr i32 %v6_13388 to i32*
  store i32 %v4_13388, i32* %v7_13388, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_13364, %bb145
  %v0_1338c = load i32, i32* @sl, align 4
  %v1_1338c = or i32 %v0_1338c, 1
  store i32 %v1_1338c, i32* %r2.global-to-local, align 4
  %v0_13390 = load i32, i32* %ip.global-to-local, align 4
  %v1_13390 = or i32 %v0_13390, 1
  store i32 %v1_13390, i32* %r3.global-to-local, align 4
  %v0_13394 = load i32, i32* @lr, align 4
  %v1_13394 = add i32 %v0_13394, 8
  store i32 %v1_13394, i32* %r4.global-to-local, align 4
  %v2_13398 = add i32 %v0_13394, 4
  %v3_13398 = inttoptr i32 %v2_13398 to i32*
  store i32 %v1_1338c, i32* %v3_13398, align 4
  %v0_1339c = load i32, i32* %ip.global-to-local, align 4
  %v1_1339c = load i32, i32* %r1.global-to-local, align 4
  %v3_1339c = add i32 %v1_1339c, %v0_1339c
  %v4_1339c = inttoptr i32 %v3_1339c to i32*
  store i32 %v0_1339c, i32* %v4_1339c, align 4
  %v0_133a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_133a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_133a0 = add i32 %v1_133a0, 4
  %v3_133a0 = inttoptr i32 %v2_133a0 to i32*
  store i32 %v0_133a0, i32* %v3_133a0, align 4
  br label %dec_label_pc_137f4

dec_label_pc_133a8.loopexit:                      ; preds = %dec_label_pc_132c8
  br label %dec_label_pc_133a8

dec_label_pc_133a8:                               ; preds = %dec_label_pc_133a8.loopexit, %dec_label_pc_12fbc, %dec_label_pc_12fc4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %ip.global-to-local, align 4
  %v4_133b0 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_133b0, i32* @r0, align 4
  %v1_133b4 = add i32 %v4_133b0, 44
  %v2_133b4 = inttoptr i32 %v1_133b4 to i32*
  %v3_133b4 = load i32, i32* %v2_133b4, align 4
  store i32 %v3_133b4, i32* %ip.global-to-local, align 4
  %v1_133b8 = add i32 %v3_133b4, 4
  %v2_133b8 = inttoptr i32 %v1_133b8 to i32*
  %v3_133b8 = load i32, i32* %v2_133b8, align 4
  %v0_133bc = load i32, i32* @sl, align 4
  %v1_133bc = add i32 %v0_133bc, 16
  store i32 %v1_133bc, i32* %r1.global-to-local, align 4
  %v1_133c0 = and i32 %v3_133b8, -4
  store i32 %v1_133c0, i32* %r3.global-to-local, align 4
  %v3_133c4 = icmp ult i32 %v1_133c0, %v1_133bc
  br i1 %v3_133c4, label %dec_label_pc_133f4, label %dec_label_pc_133d0

dec_label_pc_133d0:                               ; preds = %dec_label_pc_133a8
  %v2_133d0 = sub i32 %v1_133c0, %v0_133bc
  %v2_133d4 = add i32 %v0_133bc, %v3_133b4
  store i32 %v2_133d4, i32* %r1.global-to-local, align 4
  %v1_133d8 = or i32 %v2_133d0, 1
  store i32 %v1_133d8, i32* %r3.global-to-local, align 4
  %v1_133dc = or i32 %v0_133bc, 1
  store i32 %v1_133dc, i32* %r2.global-to-local, align 4
  %v1_133e0 = add i32 %v3_133b4, 8
  store i32 %v1_133e0, i32* %r4.global-to-local, align 4
  store i32 %v1_133dc, i32* %v2_133b8, align 4
  %v0_133e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_133e8 = load i32, i32* @r0, align 4
  %v2_133e8 = add i32 %v1_133e8, 44
  %v3_133e8 = inttoptr i32 %v2_133e8 to i32*
  store i32 %v0_133e8, i32* %v3_133e8, align 4
  %v0_133ec = load i32, i32* %r3.global-to-local, align 4
  %v1_133ec = load i32, i32* %r1.global-to-local, align 4
  %v2_133ec = add i32 %v1_133ec, 4
  %v3_133ec = inttoptr i32 %v2_133ec to i32*
  store i32 %v0_133ec, i32* %v3_133ec, align 4
  br label %dec_label_pc_137f4

dec_label_pc_133f4:                               ; preds = %dec_label_pc_133a8
  %v1_133f4 = inttoptr i32 %v4_133b0 to i32*
  %v2_133f4 = load i32, i32* %v1_133f4, align 4
  store i32 %v2_133f4, i32* %r3.global-to-local, align 4
  %v1_133f8 = and i32 %v2_133f4, 2
  store i32 %v1_133f8, i32* %ip.global-to-local, align 4
  %v2_133f8 = icmp eq i32 %v1_133f8, 0
  %v1_133fc = add i32 %v4_133b0, 860
  %v2_133fc = inttoptr i32 %v1_133fc to i32*
  %v3_133fc = load i32, i32* %v2_133fc, align 4
  store i32 %v3_133fc, i32* %r1.global-to-local, align 4
  br i1 %v2_133f8, label %dec_label_pc_13414, label %dec_label_pc_13404

dec_label_pc_13404:                               ; preds = %dec_label_pc_133f4
  %v0_13404 = call i32 @function_13dd4()
  %v0_13408 = load i32, i32* @sl, align 4
  %v1_13408 = add i32 %v0_13408, -7
  store i32 %v1_13408, i32* @r0, align 4
  %v0_1340c = call i32 @function_12f1c()
  store i32 %v0_1340c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_137f0

dec_label_pc_13414:                               ; preds = %dec_label_pc_133f4
  %v1_13414 = add i32 %v4_133b0, 844
  %v2_13414 = inttoptr i32 %v1_13414 to i32*
  %v3_13414 = load i32, i32* %v2_13414, align 4
  store i32 %v3_13414, i32* %r3.global-to-local, align 4
  %v3_13418 = icmp ult i32 %v0_133bc, %v3_13414
  %v1_1341c = add i32 %v3_133fc, -1
  store i32 %v1_1341c, i32* %sb.global-to-local, align 4
  br i1 %v3_13418, label %dec_label_pc_134f0, label %dec_label_pc_13424

dec_label_pc_13424:                               ; preds = %dec_label_pc_13414
  %v1_13424 = add i32 %v4_133b0, 852
  %v2_13424 = inttoptr i32 %v1_13424 to i32*
  %v3_13424 = load i32, i32* %v2_13424, align 4
  store i32 %v3_13424, i32* %r2.global-to-local, align 4
  %v1_13428 = add i32 %v4_133b0, 848
  %v2_13428 = inttoptr i32 %v1_13428 to i32*
  %v3_13428 = load i32, i32* %v2_13428, align 4
  store i32 %v3_13428, i32* %r3.global-to-local, align 4
  %v6_13430 = icmp slt i32 %v3_13428, %v3_13424
  br i1 %v6_13430, label %dec_label_pc_13434, label %dec_label_pc_134f0

dec_label_pc_13434:                               ; preds = %dec_label_pc_13424
  %v1_13434 = add i32 %v0_133bc, 10
  %v2_13438 = add i32 %v1_13434, %v3_133fc
  store i32 %v2_13438, i32* %r3.global-to-local, align 4
  %v2_1343c = sub i32 0, %v3_133fc
  %v3_1343c = and i32 %v2_13438, %v2_1343c
  store i32 %v3_1343c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_1343c, %v0_133bc
  br i1 %tmp211, label %dec_label_pc_13448, label %dec_label_pc_134f0

dec_label_pc_13448:                               ; preds = %dec_label_pc_13434
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_1343c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_13460 = call i32 @function_15008(i32 0, i32 %v3_1343c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_13460, i32* %r0.global-to-local, align 4
  %v7_13464 = icmp eq i32 %v6_13460, -1
  br i1 %v7_13464, label %dec_label_pc_13448.dec_label_pc_134f0_crit_edge, label %dec_label_pc_1346c

dec_label_pc_13448.dec_label_pc_134f0_crit_edge:  ; preds = %dec_label_pc_13448
  %v1_13514.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_134f0

dec_label_pc_1346c:                               ; preds = %dec_label_pc_13448
  %v1_1346c = urem i32 %v6_13460, 8
  store i32 %v1_1346c, i32* %r2.global-to-local, align 4
  %v2_1346c = icmp eq i32 %v1_1346c, 0
  br i1 %v2_1346c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_1346c
  %v2_13470 = sub nsw i32 8, %v1_1346c
  store i32 %v2_13470, i32* %r3.global-to-local, align 4
  %v2_13474 = load i32, i32* @r4, align 4
  %v3_13474 = sub i32 %v2_13474, %v2_13470
  %v3_13478 = add i32 %v2_13470, %v6_13460
  store i32 %v3_13478, i32* %lr.global-to-local, align 4
  %v2_13480 = or i32 %v3_13474, 2
  store i32 %v2_13480, i32* %r2.global-to-local, align 4
  %v5_13488 = inttoptr i32 %v3_13478 to i32*
  store i32 %v2_13470, i32* %v5_13488, align 4
  %v1_1348c = load i32, i32* %r2.global-to-local, align 4
  %v2_1348c = load i32, i32* %lr.global-to-local, align 4
  %v3_1348c = add i32 %v2_1348c, 4
  %v4_1348c = inttoptr i32 %v3_1348c to i32*
  store i32 %v1_1348c, i32* %v4_1348c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_1346c
  store i32 %v6_13460, i32* %lr.global-to-local, align 4
  %v1_1348447 = load i32, i32* @r4, align 4
  %v2_1348448 = or i32 %v1_1348447, 2
  store i32 %v2_1348448, i32* %r3.global-to-local, align 4
  %v3_13490 = inttoptr i32 %v6_13460 to i32*
  store i32 0, i32* %v3_13490, align 4
  %v1_13494 = load i32, i32* %r3.global-to-local, align 4
  %v2_13494 = load i32, i32* %lr.global-to-local, align 4
  %v3_13494 = add i32 %v2_13494, 4
  %v4_13494 = inttoptr i32 %v3_13494 to i32*
  store i32 %v1_13494, i32* %v4_13494, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 131388, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_134a0 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_134a0, i32* %ip.global-to-local, align 4
  %v1_134a4 = add i32 %v4_134a0, 848
  %v2_134a4 = inttoptr i32 %v1_134a4 to i32*
  %v3_134a4 = load i32, i32* %v2_134a4, align 4
  store i32 %v3_134a4, i32* %r3.global-to-local, align 4
  %v1_134a8 = add i32 %v4_134a0, 856
  %v2_134a8 = inttoptr i32 %v1_134a8 to i32*
  %v3_134a8 = load i32, i32* %v2_134a8, align 4
  store i32 %v3_134a8, i32* %r2.global-to-local, align 4
  %v1_134ac = add i32 %v3_134a4, 1
  store i32 %v1_134ac, i32* %r3.global-to-local, align 4
  %v7_134b4 = icmp sgt i32 %v1_134ac, %v3_134a8
  br i1 %v7_134b4, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_134ac, i32* %v2_134a8, align 4
  %v0_134b8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_134b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_134b8 = phi i32 [ %v4_134a0, %.thread27 ], [ %v1_134b8.pre, %bb147 ]
  %v0_134b8 = phi i32 [ %v1_134ac, %.thread27 ], [ %v0_134b8.pre, %bb147 ]
  %v2_134b8 = add i32 %v1_134b8, 848
  %v3_134b8 = inttoptr i32 %v2_134b8 to i32*
  store i32 %v0_134b8, i32* %v3_134b8, align 4
  %v0_134bc = load i32, i32* %ip.global-to-local, align 4
  %v1_134bc = add i32 %v0_134bc, 868
  %v2_134bc = inttoptr i32 %v1_134bc to i32*
  %v3_134bc = load i32, i32* %v2_134bc, align 4
  store i32 %v3_134bc, i32* %r3.global-to-local, align 4
  %v1_134c0 = add i32 %v0_134bc, 880
  %v2_134c0 = inttoptr i32 %v1_134c0 to i32*
  %v3_134c0 = load i32, i32* %v2_134c0, align 4
  store i32 %v3_134c0, i32* %r2.global-to-local, align 4
  %v0_134c4 = load i32, i32* @r4, align 4
  %v2_134c4 = add i32 %v0_134c4, %v3_134bc
  store i32 %v2_134c4, i32* %r1.global-to-local, align 4
  %v1_134c8 = add i32 %v0_134bc, 872
  %v2_134c8 = inttoptr i32 %v1_134c8 to i32*
  %v3_134c8 = load i32, i32* %v2_134c8, align 4
  store i32 %v3_134c8, i32* %r3.global-to-local, align 4
  %v1_134d0 = add i32 %v0_134bc, 884
  %v2_134d0 = inttoptr i32 %v1_134d0 to i32*
  %v3_134d0 = load i32, i32* %v2_134d0, align 4
  store i32 %v3_134d0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_134c4, %v3_134c0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_134c4, i32* %v2_134c0, align 4
  %v0_134d8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_134d8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_134d8 = phi i32 [ %v0_134bc, %bb148 ], [ %v1_134d8.pre, %bb149 ]
  %v0_134d8 = phi i32 [ %v2_134c4, %bb148 ], [ %v0_134d8.pre, %bb149 ]
  %v2_134d8 = add i32 %v1_134d8, 868
  %v3_134d8 = inttoptr i32 %v2_134d8 to i32*
  store i32 %v0_134d8, i32* %v3_134d8, align 4
  %v0_134dc = load i32, i32* %r1.global-to-local, align 4
  %v1_134dc = load i32, i32* %r3.global-to-local, align 4
  %v2_134dc = add i32 %v1_134dc, %v0_134dc
  store i32 %v2_134dc, i32* %r1.global-to-local, align 4
  %v1_134e0 = load i32, i32* %r2.global-to-local, align 4
  %v0_134e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_134e4 = add i32 %v0_134e4, 8
  store i32 %v1_134e4, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_134dc, %v1_134e0
  br i1 %tmp213, label %bb151, label %dec_label_pc_137f0

bb151:                                            ; preds = %bb150
  %v5_134e8 = load i32, i32* %ip.global-to-local, align 4
  %v6_134e8 = add i32 %v5_134e8, 884
  %v7_134e8 = inttoptr i32 %v6_134e8 to i32*
  store i32 %v2_134dc, i32* %v7_134e8, align 4
  br label %dec_label_pc_137f0

dec_label_pc_134f0:                               ; preds = %dec_label_pc_13434, %dec_label_pc_13414, %dec_label_pc_13448.dec_label_pc_134f0_crit_edge, %dec_label_pc_13424
  %v1_13514 = phi i32 [ %v1_13514.pre, %dec_label_pc_13448.dec_label_pc_134f0_crit_edge ], [ %v0_133bc, %dec_label_pc_13424 ], [ %v0_133bc, %dec_label_pc_13414 ], [ %v0_133bc, %dec_label_pc_13434 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %ip.global-to-local, align 4
  %v4_134f8 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_134f8, i32* %r3.global-to-local, align 4
  %v1_134fc = add i32 %v4_134f8, 44
  %v2_134fc = inttoptr i32 %v1_134fc to i32*
  %v3_134fc = load i32, i32* %v2_134fc, align 4
  store i32 %v3_134fc, i32* %r0.global-to-local, align 4
  %v1_13500 = add i32 %v4_134f8, 864
  %v2_13500 = inttoptr i32 %v1_13500 to i32*
  %v3_13500 = load i32, i32* %v2_13500, align 4
  store i32 %v3_13500, i32* %r2.global-to-local, align 4
  %v1_13504 = add i32 %v4_134f8, 840
  %v2_13504 = inttoptr i32 %v1_13504 to i32*
  %v3_13504 = load i32, i32* %v2_13504, align 4
  store i32 %v3_13504, i32* %r3.global-to-local, align 4
  %v1_13508 = add i32 %v3_134fc, 4
  %v2_13508 = inttoptr i32 %v1_13508 to i32*
  %v3_13508 = load i32, i32* %v2_13508, align 4
  store i32 %v3_13508, i32* %r1.global-to-local, align 4
  %v1_13510 = urem i32 %v3_13500, 2
  %v2_13510 = icmp eq i32 %v1_13510, 0
  %v1_1350c = add i32 %v1_13514, 16
  %v2_13514 = add i32 %v1_1350c, %v3_13504
  store i32 %v2_13514, i32* %r3.global-to-local, align 4
  %v1_13518 = and i32 %v3_13508, -4
  store i32 %v1_13518, i32* @r8, align 4
  br i1 %v2_13510, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_134f0
  %v3_1351c = sub i32 %v2_13514, %v1_13518
  store i32 %v3_1351c, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_134f0, %bb152
  %v0_13520 = phi i32 [ %v2_13514, %dec_label_pc_134f0 ], [ %v3_1351c, %bb152 ]
  %v1_13520 = load i32, i32* %sb.global-to-local, align 4
  %v2_13520 = add i32 %v1_13520, %v0_13520
  store i32 %v2_13520, i32* %r3.global-to-local, align 4
  %v1_13524 = sub i32 -1, %v1_13520
  store i32 %v1_13524, i32* %fp.global-to-local, align 4
  %v2_13528 = and i32 %v2_13520, %v1_13524
  store i32 %v2_13528, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_13528, 1
  br i1 %tmp154, label %dec_label_pc_1354c, label %dec_label_pc_13538

dec_label_pc_13538:                               ; preds = %bb153
  store i32 %v2_13528, i32* %r0.global-to-local, align 4
  %v1_1353c = call i32 @function_15294(i32 %v2_13528)
  store i32 %v1_1353c, i32* %r0.global-to-local, align 4
  %v3_13540 = icmp eq i32 %v1_1353c, -1
  store i32 %v1_1353c, i32* @r4, align 4
  br i1 %v3_13540, label %dec_label_pc_1354c, label %dec_label_pc_135b8

dec_label_pc_1354c:                               ; preds = %dec_label_pc_13538, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  %v4_13554 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_13554, i32* %r6.global-to-local, align 4
  %v1_13558 = add i32 %v4_13554, 864
  %v2_13558 = inttoptr i32 %v1_13558 to i32*
  %v3_13558 = load i32, i32* %v2_13558, align 4
  store i32 %v3_13558, i32* %r3.global-to-local, align 4
  %v1_1355c = urem i32 %v3_13558, 2
  %v2_1355c = icmp eq i32 %v1_1355c, 0
  br i1 %v2_1355c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_1354c
  %v1_13560 = load i32, i32* @r8, align 4
  %v2_13560 = load i32, i32* %sb.global-to-local, align 4
  %v3_13560 = add i32 %v2_13560, %v1_13560
  %v2_13564 = load i32, i32* @r5, align 4
  %v3_13564 = add i32 %v3_13560, %v2_13564
  store i32 %v3_13564, i32* %r3.global-to-local, align 4
  %v2_13568 = load i32, i32* %fp.global-to-local, align 4
  %v3_13568 = and i32 %v2_13568, %v3_13564
  store i32 %v3_13568, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_1354c
  %v0_1356c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_1356c = phi i32 [ %v0_1356c.pr, %.thread29thread-pre-split ], [ %v3_13568, %bb155 ]
  %v2_1356c = icmp ugt i32 %v0_1356c, 1048575
  br i1 %v2_1356c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_13584 = phi i32 [ %v0_1356c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_13574 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_13584, %v1_13574
  br i1 %tmp214, label %dec_label_pc_1357c, label %dec_label_pc_137e0

dec_label_pc_1357c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_13584, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_13598 = call i32 @function_15008(i32 0, i32 %v0_13584, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_13598, i32* %r0.global-to-local, align 4
  %v3_1359c = icmp eq i32 %v6_13598, -1
  %v8_1359c = icmp eq i32 %v6_13598, -1
  store i32 %v6_13598, i32* @r4, align 4
  br i1 %v8_1359c, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_1357c
  %v1_135a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_135a4 = add i32 %v1_135a4, 864
  %v3_135a4 = inttoptr i32 %v2_135a4 to i32*
  %v4_135a4 = load i32, i32* %v3_135a4, align 4
  %v2_135a8 = load i32, i32* @r5, align 4
  %v3_135a8 = add i32 %v2_135a8, %v6_13598
  store i32 %v3_135a8, i32* %r0.global-to-local, align 4
  %v2_135ac = and i32 %v4_135a4, -2
  store i32 %v2_135ac, i32* %r3.global-to-local, align 4
  store i32 %v2_135ac, i32* %v3_135a4, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_1357c, %bb158
  br i1 %v3_1359c, label %dec_label_pc_135b8, label %dec_label_pc_135bc

dec_label_pc_135b8:                               ; preds = %.thread32, %dec_label_pc_13538
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_135bc

dec_label_pc_135bc:                               ; preds = %.thread32, %dec_label_pc_135b8
  %v0_135bc = load i32, i32* @r4, align 4
  %v7_135bc = icmp eq i32 %v0_135bc, -1
  br i1 %v7_135bc, label %dec_label_pc_137e0, label %dec_label_pc_135c4

dec_label_pc_135c4:                               ; preds = %dec_label_pc_135bc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r2.global-to-local, align 4
  %v4_135cc = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_135cc, i32* %ip.global-to-local, align 4
  store i32 %v3_134fc, i32* %r2.global-to-local, align 4
  %v1_135d4 = add i32 %v4_135cc, 872
  %v2_135d4 = inttoptr i32 %v1_135d4 to i32*
  %v3_135d4 = load i32, i32* %v2_135d4, align 4
  %v1_135d8 = load i32, i32* @r8, align 4
  %v2_135d8 = add i32 %v1_135d8, %v3_134fc
  store i32 %v2_135d8, i32* %r1.global-to-local, align 4
  %v0_135dc = load i32, i32* @r5, align 4
  %v2_135dc = add i32 %v0_135dc, %v3_135d4
  store i32 %v2_135dc, i32* %r3.global-to-local, align 4
  %v9_135e0 = icmp eq i32 %v0_135bc, %v2_135d8
  br i1 %v9_135e0, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_135c4
  store i32 %v2_135dc, i32* %v2_135d4, align 4
  br label %dec_label_pc_135fc

bb159:                                            ; preds = %dec_label_pc_135c4
  %v1_135e4 = load i32, i32* %r0.global-to-local, align 4
  %v8_135e4 = icmp eq i32 %v1_135e4, -1
  store i32 %v2_135dc, i32* %v2_135d4, align 4
  br i1 %v8_135e4, label %.thread34, label %dec_label_pc_135fc

.thread34:                                        ; preds = %bb159
  %v1_135ec = load i32, i32* @r5, align 4
  %v2_135ec = load i32, i32* @r8, align 4
  %v3_135ec = add i32 %v2_135ec, %v1_135ec
  %v2_135f0 = or i32 %v3_135ec, 1
  store i32 %v2_135f0, i32* %r3.global-to-local, align 4
  %v2_135f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_135f4 = add i32 %v2_135f4, 4
  %v4_135f4 = inttoptr i32 %v3_135f4 to i32*
  store i32 %v2_135f0, i32* %v4_135f4, align 4
  br label %dec_label_pc_13774

dec_label_pc_135fc:                               ; preds = %bb159, %.thread122
  %v0_13600.pr = load i32, i32* @r8, align 4
  %v0_135fc = load i32, i32* %ip.global-to-local, align 4
  %v1_135fc = add i32 %v0_135fc, 864
  %v2_135fc = inttoptr i32 %v1_135fc to i32*
  %v3_135fc = load i32, i32* %v2_135fc, align 4
  store i32 %v3_135fc, i32* %r2.global-to-local, align 4
  %v2_13600 = icmp eq i32 %v0_13600.pr, 0
  br i1 %v2_13600, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_135fc
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_135fc
  %v2_13608 = urem i32 %v3_135fc, 2
  store i32 %v2_13608, i32* %r3.global-to-local, align 4
  %v2_1360c = icmp eq i32 %v2_13608, 0
  br i1 %v2_1360c, label %.thread40, label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %.thread36
  %v0_13614 = load i32, i32* @r4, align 4
  %v1_13614 = load i32, i32* %r1.global-to-local, align 4
  %v3_13614 = icmp ult i32 %v0_13614, %v1_13614
  br i1 %v3_13614, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_13614
  %v2_13618 = and i32 %v3_135fc, -2
  store i32 %v2_13618, i32* %r3.global-to-local, align 4
  store i32 %v2_13618, i32* %v2_135fc, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_13614, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %ip.global-to-local, align 4
  %v4_13628 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_13628, i32* @r7, align 4
  %v1_1362c = add i32 %v4_13628, 864
  %v2_1362c = inttoptr i32 %v1_1362c to i32*
  %v3_1362c = load i32, i32* %v2_1362c, align 4
  store i32 %v3_1362c, i32* %r3.global-to-local, align 4
  %v1_13630 = urem i32 %v3_1362c, 2
  store i32 %v1_13630, i32* @r6, align 4
  %v2_13630 = icmp eq i32 %v1_13630, 0
  br i1 %v2_13630, label %dec_label_pc_136c4, label %dec_label_pc_13638

dec_label_pc_13638:                               ; preds = %.thread40
  %v0_13638 = load i32, i32* @r8, align 4
  %v2_13638 = icmp eq i32 %v0_13638, 0
  br i1 %v2_13638, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_13638
  %v2_1363c = add i32 %v4_13628, 872
  %v3_1363c = inttoptr i32 %v2_1363c to i32*
  %v4_1363c = load i32, i32* %v3_1363c, align 4
  store i32 %v4_1363c, i32* %r2.global-to-local, align 4
  %v1_13640 = load i32, i32* %r1.global-to-local, align 4
  %v2_13640 = load i32, i32* @r4, align 4
  %v3_13640 = sub i32 %v2_13640, %v1_13640
  %v3_13644 = add i32 %v3_13640, %v4_1363c
  store i32 %v3_13644, i32* %r3.global-to-local, align 4
  store i32 %v3_13644, i32* %v3_1363c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_13638, %bb161
  %v0_1364c = load i32, i32* @r4, align 4
  %v1_1364c = urem i32 %v0_1364c, 8
  store i32 %v1_1364c, i32* %r3.global-to-local, align 4
  %v2_1364c = icmp eq i32 %v1_1364c, 0
  br i1 %v2_1364c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_13650 = sub nsw i32 8, %v1_1364c
  store i32 %v2_13650, i32* %r3.global-to-local, align 4
  %v3_13654 = add i32 %v2_13650, %v0_1364c
  store i32 %v3_13654, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_1365c = phi i32 [ 0, %.thread43 ], [ %v2_13650, %bb162 ]
  %v1_13658 = load i32, i32* @r5, align 4
  %v2_13658 = add i32 %v1_13658, %v0_1364c
  store i32 %v2_13658, i32* @r6, align 4
  %v1_1365c = load i32, i32* @r8, align 4
  %v2_1365c = add i32 %v2_13658, %v0_1365c
  %v2_13660 = add i32 %v2_1365c, %v1_1365c
  store i32 %v2_13660, i32* %r1.global-to-local, align 4
  %v1_13664 = load i32, i32* %sb.global-to-local, align 4
  %v2_13664 = add i32 %v1_13664, %v2_13660
  %v1_13668 = load i32, i32* %fp.global-to-local, align 4
  %v2_13668 = and i32 %v1_13668, %v2_13664
  store i32 %v2_13668, i32* %r2.global-to-local, align 4
  %v2_1366c = sub i32 0, %v2_13658
  store i32 %v2_1366c, i32* %r3.global-to-local, align 4
  %v2_13670 = sub i32 %v2_13668, %v2_13658
  store i32 %v2_13670, i32* @r5, align 4
  store i32 %v2_13670, i32* %r0.global-to-local, align 4
  br i1 %v2_1364c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_1364c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_1367c = call i32 @function_15294(i32 %v2_13670)
  store i32 %v1_1367c, i32* %r0.global-to-local, align 4
  %v3_13680 = icmp eq i32 %v1_1367c, -1
  br i1 %v3_13680, label %dec_label_pc_13688, label %dec_label_pc_13698

dec_label_pc_13688:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1368c = call i32 @function_15294(i32 0)
  store i32 %v1_1368c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_136f0

dec_label_pc_13698:                               ; preds = %bb164
  %v1_13698 = load i32, i32* @r4, align 4
  %v3_13698 = icmp ult i32 %v1_1367c, %v1_13698
  br i1 %v3_13698, label %dec_label_pc_136a0, label %dec_label_pc_136f0

dec_label_pc_136a0:                               ; preds = %dec_label_pc_13698
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r0.global-to-local, align 4
  %v4_136a8 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_136a8, i32* %r2.global-to-local, align 4
  %v1_136ac = add i32 %v4_136a8, 864
  %v2_136ac = inttoptr i32 %v1_136ac to i32*
  %v3_136ac = load i32, i32* %v2_136ac, align 4
  %v0_136b0 = load i32, i32* @r6, align 4
  store i32 %v0_136b0, i32* %r0.global-to-local, align 4
  %v1_136b4 = and i32 %v3_136ac, -2
  store i32 %v1_136b4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_136b4, i32* %v2_136ac, align 4
  br label %dec_label_pc_136f0

dec_label_pc_136c4:                               ; preds = %.thread40
  %v0_136c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_136c4 = icmp eq i32 %v0_136c4, -1
  br i1 %v3_136c4, label %dec_label_pc_136cc, label %dec_label_pc_136e8

dec_label_pc_136cc:                               ; preds = %dec_label_pc_136c4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_136d0 = call i32 @function_15294(i32 0)
  store i32 %v1_136d0, i32* %r0.global-to-local, align 4
  %v0_136d4 = load i32, i32* @r7, align 4
  %v1_136d4 = add i32 %v0_136d4, 872
  %v2_136d4 = inttoptr i32 %v1_136d4 to i32*
  %v3_136d4 = load i32, i32* %v2_136d4, align 4
  store i32 %v3_136d4, i32* %r2.global-to-local, align 4
  %v0_136d8 = load i32, i32* @r4, align 4
  %v0_136dc = load i32, i32* @r5, align 4
  %v2_136d8 = add i32 %v3_136d4, %v1_136d0
  %v2_136dc = sub i32 %v2_136d8, %v0_136d8
  %v2_136e0 = sub i32 %v2_136dc, %v0_136dc
  store i32 %v2_136e0, i32* %r3.global-to-local, align 4
  store i32 %v2_136e0, i32* %v2_136d4, align 4
  %v0_136ec.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136c4, %dec_label_pc_136cc
  %v0_136ec = phi i32 [ 0, %dec_label_pc_136c4 ], [ %v0_136ec.pre, %dec_label_pc_136cc ]
  %v0_136e8 = load i32, i32* @r4, align 4
  store i32 %v0_136e8, i32* @r7, align 4
  store i32 %v0_136ec, i32* @r5, align 4
  br label %dec_label_pc_136f0

dec_label_pc_136f0:                               ; preds = %dec_label_pc_13698, %dec_label_pc_136a0, %dec_label_pc_13688, %dec_label_pc_136e8
  %v0_136f0 = load i32, i32* %r0.global-to-local, align 4
  %v7_136f0 = icmp eq i32 %v0_136f0, -1
  br i1 %v7_136f0, label %dec_label_pc_13774, label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136f0
  %v1_136f8 = load i32, i32* @r5, align 4
  %v2_136f8 = add i32 %v1_136f8, %v0_136f0
  %v0_136fc = load i32, i32* @r7, align 4
  %v2_136fc = sub i32 %v2_136f8, %v0_136fc
  %v1_13700 = or i32 %v2_136fc, 1
  %v2_13704 = add i32 %v0_136fc, 4
  %v3_13704 = inttoptr i32 %v2_13704 to i32*
  store i32 %v1_13700, i32* %v3_13704, align 4
  store i32 131388, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13710 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_13710, i32* @r6, align 4
  %v1_13714 = add i32 %v4_13710, 872
  %v2_13714 = inttoptr i32 %v1_13714 to i32*
  %v3_13714 = load i32, i32* %v2_13714, align 4
  %v0_13718 = load i32, i32* @r8, align 4
  %v2_13718 = icmp eq i32 %v0_13718, 0
  %v0_1371c = load i32, i32* @r5, align 4
  %v2_1371c = add i32 %v0_1371c, %v3_13714
  store i32 %v2_1371c, i32* %r3.global-to-local, align 4
  store i32 %v2_1371c, i32* %v2_13714, align 4
  %v0_13724 = load i32, i32* @r7, align 4
  %v1_13724 = load i32, i32* @r6, align 4
  %v2_13724 = add i32 %v1_13724, 44
  %v3_13724 = inttoptr i32 %v2_13724 to i32*
  store i32 %v0_13724, i32* %v3_13724, align 4
  br i1 %v2_13718, label %dec_label_pc_13774, label %dec_label_pc_1372c

dec_label_pc_1372c:                               ; preds = %dec_label_pc_136f8
  %v0_13730 = load i32, i32* @r8, align 4
  %v1_13730 = add i32 %v0_13730, -12
  %v1_13734 = and i32 %v1_13730, -8
  store i32 %v3_134fc, i32* %ip.global-to-local, align 4
  %v2_1373c = add i32 %v1_13734, %v3_134fc
  store i32 %v2_1373c, i32* %r1.global-to-local, align 4
  %v2_13740 = icmp ugt i32 %v1_13734, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_13748 = or i32 %v1_13734, 1
  store i32 %v1_13748, i32* %r3.global-to-local, align 4
  store i32 %v1_13748, i32* %v2_13508, align 4
  %v0_13750 = load i32, i32* %r2.global-to-local, align 4
  %v1_13750 = load i32, i32* %r1.global-to-local, align 4
  %v2_13750 = add i32 %v1_13750, 8
  %v3_13750 = inttoptr i32 %v2_13750 to i32*
  store i32 %v0_13750, i32* %v3_13750, align 4
  %v0_13754 = load i32, i32* %r2.global-to-local, align 4
  %v1_13754 = load i32, i32* %r1.global-to-local, align 4
  %v2_13754 = add i32 %v1_13754, 4
  %v3_13754 = inttoptr i32 %v2_13754 to i32*
  store i32 %v0_13754, i32* %v3_13754, align 4
  br i1 %v2_13740, label %dec_label_pc_1375c, label %dec_label_pc_13774

dec_label_pc_1375c:                               ; preds = %dec_label_pc_1372c
  %v0_1375c = load i32, i32* @r6, align 4
  %v1_1375c = add i32 %v0_1375c, 836
  %v2_1375c = inttoptr i32 %v1_1375c to i32*
  %v3_1375c = load i32, i32* %v2_1375c, align 4
  store i32 %v3_1375c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13764 = load i32, i32* %ip.global-to-local, align 4
  %v1_13764 = add i32 %v0_13764, 8
  store i32 %v1_13764, i32* @r0, align 4
  store i32 -1, i32* %v2_1375c, align 4
  %v0_1376c = call i32 @function_13f88()
  store i32 %v0_1376c, i32* %r0.global-to-local, align 4
  %v0_13770 = load i32, i32* @r4, align 4
  %v1_13770 = load i32, i32* @r6, align 4
  %v2_13770 = add i32 %v1_13770, 836
  %v3_13770 = inttoptr i32 %v2_13770 to i32*
  store i32 %v0_13770, i32* %v3_13770, align 4
  br label %dec_label_pc_13774

dec_label_pc_13774:                               ; preds = %.thread34, %dec_label_pc_1372c, %dec_label_pc_136f8, %dec_label_pc_136f0, %dec_label_pc_1375c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r0.global-to-local, align 4
  %v4_1377c = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_1377c, i32* %lr.global-to-local, align 4
  %v1_13780 = add i32 %v4_1377c, 872
  store i32 %v1_13780, i32* %r1.global-to-local, align 4
  %v1_13784 = inttoptr i32 %v1_13780 to i32*
  %v2_13784 = load i32, i32* %v1_13784, align 4
  store i32 %v2_13784, i32* %r1.global-to-local, align 4
  %v3_13784 = add i32 %v4_1377c, 876
  %v4_13784 = inttoptr i32 %v3_13784 to i32*
  %v5_13784 = load i32, i32* %v4_13784, align 4
  store i32 %v5_13784, i32* %r3.global-to-local, align 4
  %v1_1378c = add i32 %v4_1377c, 868
  %v2_1378c = inttoptr i32 %v1_1378c to i32*
  %v3_1378c = load i32, i32* %v2_1378c, align 4
  store i32 %v3_1378c, i32* %r3.global-to-local, align 4
  %v1_13790 = add i32 %v4_1377c, 884
  %v2_13790 = inttoptr i32 %v1_13790 to i32*
  %v3_13790 = load i32, i32* %v2_13790, align 4
  store i32 %v3_13790, i32* %r2.global-to-local, align 4
  %v2_13794 = add i32 %v3_1378c, %v2_13784
  store i32 %v2_13794, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_13784, %v5_13784
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_13774
  store i32 %v2_13784, i32* %v4_13784, align 4
  %v0_1379c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_1379c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_13774, %bb165
  %v1_1379c = phi i32 [ %v3_13790, %dec_label_pc_13774 ], [ %v1_1379c.pre, %bb165 ]
  %v4_137a0 = phi i32 [ %v2_13794, %dec_label_pc_13774 ], [ %v0_1379c.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_137a0, %v1_1379c
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_137a0 = load i32, i32* %lr.global-to-local, align 4
  %v6_137a0 = add i32 %v5_137a0, 884
  %v7_137a0 = inttoptr i32 %v6_137a0 to i32*
  store i32 %v4_137a0, i32* %v7_137a0, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_137a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_137a4 = add i32 %v0_137a4, 44
  %v2_137a4 = inttoptr i32 %v1_137a4 to i32*
  %v3_137a4 = load i32, i32* %v2_137a4, align 4
  store i32 %v3_137a4, i32* %ip.global-to-local, align 4
  %v1_137a8 = add i32 %v3_137a4, 4
  %v2_137a8 = inttoptr i32 %v1_137a8 to i32*
  %v3_137a8 = load i32, i32* %v2_137a8, align 4
  store i32 %v1_133bc, i32* %r1.global-to-local, align 4
  %v1_137b0 = and i32 %v3_137a8, -4
  store i32 %v1_137b0, i32* %r3.global-to-local, align 4
  %v3_137b4 = icmp ult i32 %v1_137b0, %v1_133bc
  br i1 %v3_137b4, label %dec_label_pc_137e0, label %dec_label_pc_137bc

dec_label_pc_137bc:                               ; preds = %bb168
  %v0_137bc = load i32, i32* @sl, align 4
  %v2_137bc = sub i32 %v1_137b0, %v0_137bc
  %v2_137c0 = add i32 %v0_137bc, %v3_137a4
  store i32 %v2_137c0, i32* %r1.global-to-local, align 4
  %v1_137c4 = or i32 %v2_137bc, 1
  store i32 %v1_137c4, i32* %r3.global-to-local, align 4
  %v1_137c8 = or i32 %v0_137bc, 1
  store i32 %v1_137c8, i32* %r2.global-to-local, align 4
  %v1_137cc = add i32 %v3_137a4, 8
  store i32 %v1_137cc, i32* %r0.global-to-local, align 4
  store i32 %v1_137c8, i32* %v2_137a8, align 4
  %v0_137d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_137d4 = load i32, i32* %lr.global-to-local, align 4
  %v2_137d4 = add i32 %v1_137d4, 44
  %v3_137d4 = inttoptr i32 %v2_137d4 to i32*
  store i32 %v0_137d4, i32* %v3_137d4, align 4
  %v0_137d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_137d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_137d8 = add i32 %v1_137d8, 4
  %v3_137d8 = inttoptr i32 %v2_137d8 to i32*
  store i32 %v0_137d8, i32* %v3_137d8, align 4
  br label %dec_label_pc_137f0

dec_label_pc_137e0:                               ; preds = %bb157, %bb168, %dec_label_pc_135bc
  %v0_137e0 = call i32 @function_128f0()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_137e8 = inttoptr i32 %v0_137e0 to i32*
  store i32 12, i32* %v2_137e8, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_137f0

dec_label_pc_137f0:                               ; preds = %bb151, %bb150, %dec_label_pc_137bc, %dec_label_pc_13404, %dec_label_pc_137e0
  %v0_137f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_137f0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137f4

dec_label_pc_137f4:                               ; preds = %.thread1, %dec_label_pc_133d0, %.thread121, %dec_label_pc_13240, %dec_label_pc_13234, %dec_label_pc_1309c, %dec_label_pc_13020, %dec_label_pc_137f0
  store i32 %v2_12f48, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 131388, i32* %r2.global-to-local, align 4
  %v4_13804 = load i32, i32* inttoptr (i32 131412 to i32*), align 4
  store i32 %v4_13804, i32* @ip, align 4
  store i32 79888, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13804)
  br label %dec_label_pc_13810

dec_label_pc_13810:                               ; preds = %dec_label_pc_12f80, %dec_label_pc_137f4
  %v0_13810 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13810, i32* %r0.global-to-local, align 4
  store i32 %v3_12f1c, i32* @r4, align 4
  store i32 %v6_12f1c, i32* @r5, align 4
  store i32 %v9_12f1c, i32* @r6, align 4
  store i32 %v12_12f1c, i32* @r7, align 4
  store i32 %v15_12f1c, i32* @r8, align 4
  store i32 %v18_12f1c, i32* @sb, align 4
  store i32 %v21_12f1c, i32* @sl, align 4
  store i32 %v24_12f1c, i32* @fp, align 4
  store i32 %v27_12f1c, i32* @lr, align 4
  ret i32 %v0_13810

; uselistorder directives
  uselistorder i32 %v0_137bc, { 1, 0, 2 }
  uselistorder i32 %v3_137a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_137a0, { 1, 0 }
  uselistorder i32 %v2_13784, { 2, 0, 1, 3 }
  uselistorder i32 %v4_1377c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_13734, { 1, 2, 0 }
  uselistorder i32 %v0_136fc, { 1, 0 }
  uselistorder i32 %v0_136f0, { 1, 0 }
  uselistorder i32 %v2_136e0, { 1, 0 }
  uselistorder i32 %v2_13670, { 2, 1, 0 }
  uselistorder i32 %v2_13658, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13650, { 1, 0, 2 }
  uselistorder i32 %v1_1364c, { 2, 1, 0 }
  uselistorder i32 %v0_1364c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_13630, { 1, 0 }
  uselistorder i32 %v2_13608, { 1, 0 }
  uselistorder i32 %v3_135fc, { 1, 0, 2 }
  uselistorder i32 %v2_135dc, { 1, 0, 2 }
  uselistorder i32* %v2_135d4, { 1, 0, 2 }
  uselistorder i32 %v0_135bc, { 1, 0 }
  uselistorder i32 %v6_13598, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13584, { 2, 1, 0 }
  uselistorder i32 %v0_1356c, { 1, 0 }
  uselistorder i32 %v2_13528, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13524, { 1, 0 }
  uselistorder i32 %v3_134fc, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_134dc, { 1, 0, 2 }
  uselistorder i32 %v2_134c4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1346c, { 2, 1, 0 }
  uselistorder i32 %v6_13460, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_1343c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_133fc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_133bc, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_133b4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_133b0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_1339c, { 1, 0 }
  uselistorder i32 %v7_1335c, { 1, 0 }
  uselistorder i32 %v4_1335c, { 1, 0 }
  uselistorder i32 %v0_1332c, { 1, 0 }
  uselistorder i32 %v2_13300, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_132fc54, { 1, 0 }
  uselistorder i32 %v1_132c8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_132b0., { 1, 2, 0 }
  uselistorder i32 %v0_132b8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_132b8, { 1, 0 }
  uselistorder i32 %v3_13298, { 1, 0 }
  uselistorder i32 %v4_13294, { 1, 0, 2 }
  uselistorder i32 %v1_13204, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1325c, { 1, 0 }
  uselistorder i32 %v1_13240, { 1, 0 }
  uselistorder i32 %v1_130e0, { 1, 0 }
  uselistorder i32 %v0_13220, { 2, 0, 1, 3 }
  uselistorder i32 %v3_131e8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1327c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_131c4, { 2, 1, 0 }
  uselistorder i32 %v3_131b8, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_130d8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_13180, { 1, 0 }
  uselistorder i32 %v3_13174, { 1, 0 }
  uselistorder i32 %v0_13180, { 1, 0 }
  uselistorder i32 %v3_13158, { 0, 2, 3, 1 }
  uselistorder i32 %v2_13148, { 1, 0, 2 }
  uselistorder i32 %v3_13100, { 2, 1, 0 }
  uselistorder i32 %v0_130f0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_130c0, { 1, 0 }
  uselistorder i32 %v1_13074, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13070, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_13014, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_13008, { 1, 0 }
  uselistorder i32 %v3_12fd8, { 1, 0 }
  uselistorder i32 %v0_12fcc, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_12fac, { 0, 2, 1, 3 }
  uselistorder i1 %v7_12fa0, { 1, 0 }
  uselistorder i32 %v0_12f78, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 40, 41, 42, 44, 45, 46, 47, 0, 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 89, 76, 77, 78, 79, 80, 82, 83, 84, 85, 109, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 25, 2, 4, 5, 57, 17, 9, 6, 18, 7, 8, 11, 10, 15, 12, 19, 14, 13, 20, 16, 56, 22, 21, 23, 55, 24, 26, 31, 27, 28, 0, 29, 30, 32, 33, 34, 37, 38, 35, 36, 43, 40, 39, 41, 42, 44, 54, 45, 46, 47, 48, 53, 49, 52, 51, 50 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 13, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 23, 24, 36, 35, 28, 25, 0, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_15008, { 1, 0 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_12ea4, { 1, 0 }
  uselistorder label %dec_label_pc_13810, { 1, 0 }
  uselistorder label %dec_label_pc_137f4, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_137f0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_137e0, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_13774, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_136f0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_136e8, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_135bc, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_134f0, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_133a8, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_132fc, { 1, 0 }
  uselistorder label %dec_label_pc_13304.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_132c8, { 1, 0 }
  uselistorder label %dec_label_pc_1327c, { 1, 0 }
  uselistorder label %dec_label_pc_13210, { 1, 0 }
  uselistorder label %dec_label_pc_1320c, { 1, 0 }
  uselistorder label %dec_label_pc_131b8, { 1, 0 }
  uselistorder label %dec_label_pc_131a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1316c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13158, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_13824(i32 %arg1) local_unnamed_addr {
dec_label_pc_13824:
  %v0_13824 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13824, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13824
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13824, %bb
  %v10_13838 = phi i32 [ %arg1, %dec_label_pc_13824 ], [ 0, %bb ]
  ret i32 %v10_13838

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1383c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1383c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_1383c = load i32, i32* @r4, align 4
  %v6_1383c = load i32, i32* @r5, align 4
  %v9_1383c = load i32, i32* @r6, align 4
  %v12_1383c = load i32, i32* @lr, align 4
  %v2_13844 = icmp eq i32 %arg1, 0
  store i32 131388, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_13854 = mul i32 %arg2, %arg1
  store i32 %v2_13854, i32* @r6, align 4
  br i1 %v2_13844, label %dec_label_pc_13884, label %dec_label_pc_1385c

dec_label_pc_1385c:                               ; preds = %dec_label_pc_1383c
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_13854, i32* @r0, align 4
  %v0_13864 = call i32 @function_11e54()
  %v0_13868 = load i32, i32* @r4, align 4
  %v9_13868 = icmp eq i32 %v0_13868, %v0_13864
  br i1 %v9_13868, label %dec_label_pc_1385c.dec_label_pc_13884_crit_edge, label %dec_label_pc_13870

dec_label_pc_1385c.dec_label_pc_13884_crit_edge:  ; preds = %dec_label_pc_1385c
  %v0_13888.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13884

dec_label_pc_13870:                               ; preds = %dec_label_pc_1385c
  %v0_13870 = call i32 @function_128f0()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_1387c = inttoptr i32 %v0_13870 to i32*
  store i32 12, i32* %v2_1387c, align 4
  br label %dec_label_pc_13948

dec_label_pc_13884:                               ; preds = %dec_label_pc_1385c.dec_label_pc_13884_crit_edge, %dec_label_pc_1383c
  %v0_138a0 = phi i32 [ %v0_13888.pre, %dec_label_pc_1385c.dec_label_pc_13884_crit_edge ], [ 131388, %dec_label_pc_1383c ]
  %v2_13888 = add i32 %v0_138a0, 68
  %v3_13888 = inttoptr i32 %v2_13888 to i32*
  %v4_13888 = load i32, i32* %v3_13888, align 4
  store i32 %v4_13888, i32* @r4, align 4
  %v2_138a0 = add i32 %v0_138a0, 72
  %v3_138a0 = inttoptr i32 %v2_138a0 to i32*
  %v4_138a0 = load i32, i32* %v3_138a0, align 4
  store i32 %v4_138a0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_138a0)
  %v0_138b4 = load i32, i32* @r5, align 4
  %v2_138b4 = add i32 %v0_138b4, 16
  %v3_138b4 = inttoptr i32 %v2_138b4 to i32*
  %v4_138b4 = load i32, i32* %v3_138b4, align 4
  store i32 %v4_138b4, i32* %ip.global-to-local, align 4
  store i32 80064, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_138b4)
  %v0_138c0 = load i32, i32* @r6, align 4
  store i32 %v0_138c0, i32* @r0, align 4
  %v0_138c4 = call i32 @function_12f1c()
  store i32 %v0_138c4, i32* %r4.global-to-local, align 4
  %v2_138c8 = icmp eq i32 %v0_138c4, 0
  br i1 %v2_138c8, label %.thread, label %dec_label_pc_138d0

dec_label_pc_138d0:                               ; preds = %dec_label_pc_13884
  %v1_138d0 = add i32 %v0_138c4, -4
  %v2_138d0 = inttoptr i32 %v1_138d0 to i32*
  %v3_138d0 = load i32, i32* %v2_138d0, align 4
  %v1_138d4 = and i32 %v3_138d0, 2
  %v2_138d4 = icmp eq i32 %v1_138d4, 0
  br i1 %v2_138d4, label %dec_label_pc_138dc, label %.thread

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138d0
  %v1_138dc7 = add i32 %v3_138d0, -4
  %v1_138e0 = and i32 %v1_138dc7, -4
  store i32 %v1_138e0, i32* @r2, align 4
  %v3_138e4 = udiv i32 %v1_138e0, 4
  store i32 %v3_138e4, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_138e0, 36
  %v2_138ec = icmp ult i32 %v1_138e0, 33
  %v3_138ec = or i1 %tmp, %v2_138ec
  br i1 %v3_138ec, label %dec_label_pc_138f8, label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_138dc
  %v2_138f0 = inttoptr i32 %v0_138c4 to i8*
  %v3_138f0 = call i32 @function_12940(i8* %v2_138f0, i32 0)
  br label %.thread

dec_label_pc_138f8:                               ; preds = %dec_label_pc_138dc
  %tmp8 = icmp eq i32 %v1_138e0, 16
  %v2_138fc = inttoptr i32 %v0_138c4 to i32*
  store i32 0, i32* %v2_138fc, align 4
  %v1_13900 = load i32, i32* %r4.global-to-local, align 4
  %v2_13900 = add i32 %v1_13900, 4
  %v3_13900 = inttoptr i32 %v2_13900 to i32*
  store i32 0, i32* %v3_13900, align 4
  %v1_13904 = load i32, i32* %r4.global-to-local, align 4
  %v2_13904 = add i32 %v1_13904, 8
  %v3_13904 = inttoptr i32 %v2_13904 to i32*
  store i32 0, i32* %v3_13904, align 4
  %v2_13908 = icmp ult i32 %v1_138e0, 13
  %v3_13908 = or i1 %tmp8, %v2_13908
  br i1 %v3_13908, label %.thread, label %dec_label_pc_1390c

dec_label_pc_1390c:                               ; preds = %dec_label_pc_138f8
  %v0_1390c = load i32, i32* %ip.global-to-local, align 4
  %v1_13910 = load i32, i32* %r4.global-to-local, align 4
  %v2_13910 = add i32 %v1_13910, 12
  %v3_13910 = inttoptr i32 %v2_13910 to i32*
  store i32 0, i32* %v3_13910, align 4
  %v1_13914 = load i32, i32* %r4.global-to-local, align 4
  %v2_13914 = add i32 %v1_13914, 16
  %v3_13914 = inttoptr i32 %v2_13914 to i32*
  store i32 0, i32* %v3_13914, align 4
  %tmp9 = icmp ult i32 %v0_1390c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_1391c

dec_label_pc_1391c:                               ; preds = %dec_label_pc_1390c
  %v0_1391c = load i32, i32* %ip.global-to-local, align 4
  %v7_1391c = icmp eq i32 %v0_1391c, 9
  %v1_13920 = load i32, i32* %r4.global-to-local, align 4
  %v2_13920 = add i32 %v1_13920, 20
  %v3_13920 = inttoptr i32 %v2_13920 to i32*
  store i32 0, i32* %v3_13920, align 4
  %v1_13924 = load i32, i32* %r4.global-to-local, align 4
  %v2_13924 = add i32 %v1_13924, 24
  %v3_13924 = inttoptr i32 %v2_13924 to i32*
  store i32 0, i32* %v3_13924, align 4
  br i1 %v7_1391c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1391c
  %v2_13928 = load i32, i32* %r4.global-to-local, align 4
  %v3_13928 = add i32 %v2_13928, 32
  %v4_13928 = inttoptr i32 %v3_13928 to i32*
  store i32 0, i32* %v4_13928, align 4
  %v2_1392c = load i32, i32* %r4.global-to-local, align 4
  %v3_1392c = add i32 %v2_1392c, 28
  %v4_1392c = inttoptr i32 %v3_1392c to i32*
  store i32 0, i32* %v4_1392c, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1391c, %dec_label_pc_138d0, %dec_label_pc_1390c, %dec_label_pc_138f8, %dec_label_pc_13884, %dec_label_pc_138f0, %bb
  %v0_1393c = load i32, i32* @r5, align 4
  %v2_1393c = add i32 %v0_1393c, 24
  %v3_1393c = inttoptr i32 %v2_1393c to i32*
  %v4_1393c = load i32, i32* %v3_1393c, align 4
  store i32 %v4_1393c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1393c)
  br label %dec_label_pc_13948

dec_label_pc_13948:                               ; preds = %dec_label_pc_13870, %.thread
  %v0_13948 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_1383c, i32* @r4, align 4
  store i32 %v6_1383c, i32* @r5, align 4
  store i32 %v9_1383c, i32* @r6, align 4
  store i32 %v12_1383c, i32* @lr, align 4
  ret i32 %v0_13948

; uselistorder directives
  uselistorder i32 %v1_138e0, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_138c4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 2, 7, 3, 8, 4, 9, 5, 10, 11, 6, 1 }
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13948, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1395c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1395c:
  %v0_1395c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1395c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1395c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1395c, %bb
  %v10_1396c = phi i32 [ %arg1, %dec_label_pc_1395c ], [ 0, %bb ]
  ret i32 %v10_1396c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_13970(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13970:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_13970 = load i32, i32* @r4, align 4
  %v6_13970 = load i32, i32* @r5, align 4
  %v9_13970 = load i32, i32* @r6, align 4
  %v12_13970 = load i32, i32* @r7, align 4
  %v15_13970 = load i32, i32* @r8, align 4
  %v18_13970 = load i32, i32* @sb, align 4
  %v21_13970 = load i32, i32* @sl, align 4
  %v24_13970 = load i32, i32* @fp, align 4
  %v27_13970 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1397c = icmp eq i32* %arg1, null
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80264), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1397c, label %dec_label_pc_13990, label %dec_label_pc_139a0

dec_label_pc_13990:                               ; preds = %dec_label_pc_13970
  store i32 %arg2, i32* @r0, align 4
  %v0_13994 = call i32 @function_12f1c()
  store i32 %v0_13994, i32* %r0.global-to-local, align 4
  store i32 %v0_13994, i32* @r4, align 4
  br label %dec_label_pc_13cf8

dec_label_pc_139a0:                               ; preds = %dec_label_pc_13970
  %v2_139a0 = icmp eq i32 %arg2, 0
  br i1 %v2_139a0, label %dec_label_pc_139a8, label %dec_label_pc_139b4

dec_label_pc_139a8:                               ; preds = %dec_label_pc_139a0
  %v0_139a8 = call i32 @function_13f88()
  store i32 %v0_139a8, i32* %r0.global-to-local, align 4
  %v0_139ac = load i32, i32* @r6, align 4
  store i32 %v0_139ac, i32* @r4, align 4
  br label %dec_label_pc_13cf8

dec_label_pc_139b4:                               ; preds = %dec_label_pc_139a0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_139bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80332) to i32*), align 4
  store i32 %v4_139bc, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_139bc, i32* %r2.global-to-local, align 4
  %v4_139c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80300) to i32*), align 4
  store i32 %v4_139c8, i32* %r1.global-to-local, align 4
  %v2_139cc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_139cc, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_139d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80336) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_139d4)
  %v0_139e0 = load i32, i32* @r4, align 4
  store i32 %v0_139e0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80264), i32* %r1.global-to-local, align 4
  %v4_139ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80280) to i32*), align 4
  store i32 %v4_139ec, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_139f8.519 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_139ec)
  %v0_139f8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_139f8, -32
  br i1 %tmp36, label %dec_label_pc_13a14, label %dec_label_pc_13a00

dec_label_pc_13a00:                               ; preds = %dec_label_pc_139b4
  %v0_13a00 = call i32 @function_128f0()
  store i32 %v0_13a00, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_13a0c = inttoptr i32 %v0_13a00 to i32*
  store i32 12, i32* %v2_13a0c, align 4
  br label %dec_label_pc_13cf8

dec_label_pc_13a14:                               ; preds = %dec_label_pc_139b4
  %v1_13a14 = add i32 %v0_139f8, 11
  store i32 %v1_13a14, i32* %r0.global-to-local, align 4
  %v0_13a18 = load i32, i32* @r5, align 4
  %v1_13a18 = add i32 %v0_13a18, -4
  %v2_13a18 = inttoptr i32 %v1_13a18 to i32*
  %v3_13a18 = load i32, i32* %v2_13a18, align 4
  store i32 %v3_13a18, i32* %r2.global-to-local, align 4
  %v2_13a1c = icmp ugt i32 %v1_13a14, 14
  %v7_13a1c = icmp eq i32 %v1_13a14, 15
  %v2_13a20 = xor i1 %v2_13a1c, true
  %v3_13a20 = or i1 %v7_13a1c, %v2_13a20
  br i1 %v3_13a20, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_13a14
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_13a14, %bb
  %v2_13a24 = xor i1 %v7_13a1c, true
  %v3_13a24 = and i1 %v2_13a1c, %v2_13a24
  br i1 %v3_13a24, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_13a24 = and i32 %v1_13a14, -8
  store i32 %v5_13a24, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_13a28 = and i32 %v3_13a18, 2
  %v2_13a28 = icmp eq i32 %v1_13a28, 0
  %v1_13a2c = add i32 %v0_13a18, -8
  store i32 %v1_13a2c, i32* @sl, align 4
  %v1_13a30 = and i32 %v3_13a18, -4
  store i32 %v1_13a30, i32* @r6, align 4
  br i1 %v2_13a28, label %dec_label_pc_13a38, label %dec_label_pc_13c10

dec_label_pc_13a38:                               ; preds = %bb29
  %v1_13a38 = load i32, i32* @sb, align 4
  %v3_13a38 = icmp ult i32 %v1_13a30, %v1_13a38
  br i1 %v3_13a38, label %dec_label_pc_13a44, label %bb30

bb30:                                             ; preds = %dec_label_pc_13a38
  store i32 %v1_13a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13a44:                               ; preds = %dec_label_pc_13a38
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13a4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80296) to i32*), align 4
  store i32 %v4_13a4c, i32* %r0.global-to-local, align 4
  %v1_13a50 = add i32 %v4_13a4c, 44
  %v2_13a50 = inttoptr i32 %v1_13a50 to i32*
  %v3_13a50 = load i32, i32* %v2_13a50, align 4
  store i32 %v3_13a50, i32* %r3.global-to-local, align 4
  %v2_13a54 = add i32 %v1_13a30, %v1_13a2c
  store i32 %v2_13a54, i32* @r4, align 4
  %v9_13a58 = icmp eq i32 %v2_13a54, %v3_13a50
  %v1_13a5c = add i32 %v2_13a54, 4
  %v2_13a5c = inttoptr i32 %v1_13a5c to i32*
  %v3_13a5c = load i32, i32* %v2_13a5c, align 4
  store i32 %v3_13a5c, i32* %r1.global-to-local, align 4
  br i1 %v9_13a58, label %dec_label_pc_13a64, label %dec_label_pc_13aa0

dec_label_pc_13a64:                               ; preds = %dec_label_pc_13a44
  %v1_13a64 = and i32 %v3_13a5c, -4
  %v2_13a68 = add i32 %v1_13a64, %v1_13a30
  store i32 %v2_13a68, i32* %r1.global-to-local, align 4
  %v1_13a6c = add i32 %v1_13a38, 16
  store i32 %v1_13a6c, i32* %r3.global-to-local, align 4
  %v3_13a70 = icmp ult i32 %v2_13a68, %v1_13a6c
  br i1 %v3_13a70, label %dec_label_pc_13af4, label %dec_label_pc_13a78

dec_label_pc_13a78:                               ; preds = %dec_label_pc_13a64
  %v2_13a78 = sub i32 %v2_13a68, %v1_13a38
  %v1_13a7c = urem i32 %v3_13a18, 2
  %v2_13a80 = add i32 %v1_13a38, %v1_13a2c
  store i32 %v2_13a80, i32* %r1.global-to-local, align 4
  %v2_13a84 = or i32 %v1_13a38, %v1_13a7c
  store i32 %v2_13a84, i32* %r2.global-to-local, align 4
  %v1_13a88 = or i32 %v2_13a78, 1
  store i32 %v1_13a88, i32* %r3.global-to-local, align 4
  store i32 %v0_13a18, i32* @r4, align 4
  store i32 %v2_13a84, i32* %v2_13a18, align 4
  %v0_13a94 = load i32, i32* %r1.global-to-local, align 4
  %v1_13a94 = load i32, i32* %r0.global-to-local, align 4
  %v2_13a94 = add i32 %v1_13a94, 44
  %v3_13a94 = inttoptr i32 %v2_13a94 to i32*
  store i32 %v0_13a94, i32* %v3_13a94, align 4
  %v0_13a98 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a98 = load i32, i32* %r1.global-to-local, align 4
  %v2_13a98 = add i32 %v1_13a98, 4
  %v3_13a98 = inttoptr i32 %v2_13a98 to i32*
  store i32 %v0_13a98, i32* %v3_13a98, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a44
  %v1_13aa0 = and i32 %v3_13a5c, -2
  %v2_13aa4 = add i32 %v1_13aa0, %v2_13a54
  store i32 %v2_13aa4, i32* %r3.global-to-local, align 4
  %v1_13aa8 = add i32 %v2_13aa4, 4
  %v2_13aa8 = inttoptr i32 %v1_13aa8 to i32*
  %v3_13aa8 = load i32, i32* %v2_13aa8, align 4
  store i32 %v3_13aa8, i32* %r3.global-to-local, align 4
  %v1_13aac = urem i32 %v3_13aa8, 2
  %v2_13aac = icmp eq i32 %v1_13aac, 0
  br i1 %v2_13aac, label %dec_label_pc_13ab4, label %dec_label_pc_13af4

dec_label_pc_13ab4:                               ; preds = %dec_label_pc_13aa0
  %v1_13ab4 = and i32 %v3_13a5c, -4
  store i32 %v1_13ab4, i32* %r3.global-to-local, align 4
  %v2_13ab8 = add i32 %v1_13ab4, %v1_13a30
  store i32 %v2_13ab8, i32* %r0.global-to-local, align 4
  %v3_13abc = icmp ult i32 %v2_13ab8, %v1_13a38
  br i1 %v3_13abc, label %dec_label_pc_13af4, label %dec_label_pc_13ac4

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13ab4
  %v1_13ac4 = add i32 %v1_13a30, %v0_13a18
  %v2_13ac4 = inttoptr i32 %v1_13ac4 to i32*
  %v3_13ac4 = load i32, i32* %v2_13ac4, align 4
  store i32 %v3_13ac4, i32* %r1.global-to-local, align 4
  %v1_13ac8 = add i32 %v3_13ac4, 12
  %v2_13ac8 = inttoptr i32 %v1_13ac8 to i32*
  %v3_13ac8 = load i32, i32* %v2_13ac8, align 4
  store i32 %v3_13ac8, i32* %r3.global-to-local, align 4
  %v9_13acc = icmp eq i32 %v3_13ac8, %v2_13a54
  %v1_13ad0 = add i32 %v2_13a54, 12
  %v2_13ad0 = inttoptr i32 %v1_13ad0 to i32*
  %v3_13ad0 = load i32, i32* %v2_13ad0, align 4
  store i32 %v3_13ad0, i32* %r2.global-to-local, align 4
  br i1 %v9_13acc, label %dec_label_pc_13ad8, label %dec_label_pc_13ae4

dec_label_pc_13ad8:                               ; preds = %dec_label_pc_13ac4
  %v1_13ad8 = add i32 %v3_13ad0, 8
  %v2_13ad8 = inttoptr i32 %v1_13ad8 to i32*
  %v3_13ad8 = load i32, i32* %v2_13ad8, align 4
  store i32 %v3_13ad8, i32* %r3.global-to-local, align 4
  %v9_13adc = icmp eq i32 %v3_13ad8, %v2_13a54
  br i1 %v9_13adc, label %dec_label_pc_13ae8, label %dec_label_pc_13ae4

dec_label_pc_13ae4:                               ; preds = %dec_label_pc_13ac4, %dec_label_pc_13ad8
  %v0_13ae4 = call i32 @function_14204()
  store i32 %v0_13ae4, i32* %r0.global-to-local, align 4
  %v0_13ae8.pre = load i32, i32* @r1, align 4
  %v1_13ae8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13ae8

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13ad8, %dec_label_pc_13ae4
  %v1_13ae8 = phi i32 [ %v3_13ad0, %dec_label_pc_13ad8 ], [ %v1_13ae8.pre, %dec_label_pc_13ae4 ]
  %v0_13ae8 = phi i32 [ %v3_13ac4, %dec_label_pc_13ad8 ], [ %v0_13ae8.pre, %dec_label_pc_13ae4 ]
  %v2_13ae8 = add i32 %v1_13ae8, 8
  %v3_13ae8 = inttoptr i32 %v2_13ae8 to i32*
  store i32 %v0_13ae8, i32* %v3_13ae8, align 4
  %v0_13aec = load i32, i32* %r2.global-to-local, align 4
  %v1_13aec = load i32, i32* %r1.global-to-local, align 4
  %v2_13aec = add i32 %v1_13aec, 12
  %v3_13aec = inttoptr i32 %v2_13aec to i32*
  store i32 %v0_13aec, i32* %v3_13aec, align 4
  %v1_13ba8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13a64, %dec_label_pc_13ab4, %dec_label_pc_13aa0
  %v1_13af4 = add i32 %v1_13a38, -7
  store i32 %v1_13af4, i32* @r0, align 4
  %v0_13af8 = call i32 @function_12f1c()
  store i32 %v0_13af8, i32* @r0, align 4
  store i32 %v0_13af8, i32* %r1.global-to-local, align 4
  %v2_13afc = icmp eq i32 %v0_13af8, 0
  br i1 %v2_13afc, label %bb31, label %dec_label_pc_13b08

bb31:                                             ; preds = %dec_label_pc_13af4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13b08:                               ; preds = %dec_label_pc_13af4
  %v1_13b10.pre = load i32, i32* @r4, align 4
  %v1_13b08 = add i32 %v0_13af8, -4
  %v2_13b08 = inttoptr i32 %v1_13b08 to i32*
  %v3_13b08 = load i32, i32* %v2_13b08, align 4
  store i32 %v3_13b08, i32* @r3, align 4
  %v1_13b0c = add i32 %v0_13af8, -8
  store i32 %v1_13b0c, i32* @r7, align 4
  %v9_13b10 = icmp eq i32 %v1_13b0c, %v1_13b10.pre
  br i1 %v9_13b10, label %.thread2, label %dec_label_pc_13b20

.thread2:                                         ; preds = %dec_label_pc_13b08
  %v2_13b14 = and i32 %v3_13b08, -4
  store i32 %v2_13b14, i32* %r3.global-to-local, align 4
  %v2_13b18 = load i32, i32* @r6, align 4
  %v3_13b18 = add i32 %v2_13b18, %v2_13b14
  store i32 %v3_13b18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13b20:                               ; preds = %dec_label_pc_13b08
  %v0_13b20 = load i32, i32* @r6, align 4
  %v1_13b20 = add i32 %v0_13b20, -4
  store i32 %v1_13b20, i32* @r2, align 4
  %v3_13b24 = udiv i32 %v1_13b20, 4
  store i32 %v3_13b24, i32* @ip, align 4
  %tmp37 = and i32 %v1_13b20, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_13b2c = icmp ult i32 %v1_13b20, 36
  %v3_13b2c = or i1 %tmp38, %v2_13b2c
  %v0_13b3c = load i32, i32* @r5, align 4
  br i1 %v3_13b2c, label %dec_label_pc_13b3c, label %dec_label_pc_13b30

dec_label_pc_13b30:                               ; preds = %dec_label_pc_13b20
  store i32 %v0_13b3c, i32* @r1, align 4
  %v0_13b34 = call i32 @function_129f0()
  store i32 %v0_13b34, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_13b3c:                               ; preds = %dec_label_pc_13b20
  %v1_13b3c = inttoptr i32 %v0_13b3c to i32*
  %v2_13b3c = load i32, i32* %v1_13b3c, align 4
  store i32 %v2_13b3c, i32* %r3.global-to-local, align 4
  %v2_13b40 = inttoptr i32 %v0_13af8 to i32*
  store i32 %v2_13b3c, i32* %v2_13b40, align 4
  %v0_13b44 = load i32, i32* @r5, align 4
  %v1_13b44 = add i32 %v0_13b44, 4
  %v2_13b44 = inttoptr i32 %v1_13b44 to i32*
  %v3_13b44 = load i32, i32* %v2_13b44, align 4
  store i32 %v3_13b44, i32* %r3.global-to-local, align 4
  %v1_13b48 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b48 = add i32 %v1_13b48, 4
  %v3_13b48 = inttoptr i32 %v2_13b48 to i32*
  store i32 %v3_13b44, i32* %v3_13b48, align 4
  %v0_13b4c = load i32, i32* @r5, align 4
  %v1_13b4c = add i32 %v0_13b4c, 8
  %v2_13b4c = inttoptr i32 %v1_13b4c to i32*
  %v3_13b4c = load i32, i32* %v2_13b4c, align 4
  store i32 %v3_13b4c, i32* %r3.global-to-local, align 4
  %v0_13b50 = load i32, i32* @ip, align 4
  %v1_13b54 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b54 = add i32 %v1_13b54, 8
  %v3_13b54 = inttoptr i32 %v2_13b54 to i32*
  store i32 %v3_13b4c, i32* %v3_13b54, align 4
  %tmp39 = icmp ult i32 %v0_13b50, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_13b5c

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b3c
  %v0_13b5c = load i32, i32* @r5, align 4
  %v1_13b5c = add i32 %v0_13b5c, 12
  %v2_13b5c = inttoptr i32 %v1_13b5c to i32*
  %v3_13b5c = load i32, i32* %v2_13b5c, align 4
  store i32 %v3_13b5c, i32* %r3.global-to-local, align 4
  %v1_13b60 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b60 = add i32 %v1_13b60, 12
  %v3_13b60 = inttoptr i32 %v2_13b60 to i32*
  store i32 %v3_13b5c, i32* %v3_13b60, align 4
  %v0_13b64 = load i32, i32* @r5, align 4
  %v1_13b64 = add i32 %v0_13b64, 16
  %v2_13b64 = inttoptr i32 %v1_13b64 to i32*
  %v3_13b64 = load i32, i32* %v2_13b64, align 4
  store i32 %v3_13b64, i32* %r3.global-to-local, align 4
  %v0_13b68 = load i32, i32* @ip, align 4
  %v1_13b6c = load i32, i32* %r1.global-to-local, align 4
  %v2_13b6c = add i32 %v1_13b6c, 16
  %v3_13b6c = inttoptr i32 %v2_13b6c to i32*
  store i32 %v3_13b64, i32* %v3_13b6c, align 4
  %tmp40 = icmp ult i32 %v0_13b68, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_13b74

dec_label_pc_13b74:                               ; preds = %dec_label_pc_13b5c
  %v0_13b74 = load i32, i32* @r5, align 4
  %v1_13b74 = add i32 %v0_13b74, 20
  %v2_13b74 = inttoptr i32 %v1_13b74 to i32*
  %v3_13b74 = load i32, i32* %v2_13b74, align 4
  store i32 %v3_13b74, i32* %r3.global-to-local, align 4
  %v1_13b78 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b78 = add i32 %v1_13b78, 20
  %v3_13b78 = inttoptr i32 %v2_13b78 to i32*
  store i32 %v3_13b74, i32* %v3_13b78, align 4
  %v0_13b7c = load i32, i32* @r5, align 4
  %v1_13b7c = add i32 %v0_13b7c, 24
  %v2_13b7c = inttoptr i32 %v1_13b7c to i32*
  %v3_13b7c = load i32, i32* %v2_13b7c, align 4
  store i32 %v3_13b7c, i32* %r3.global-to-local, align 4
  %v1_13b80 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b80 = add i32 %v1_13b80, 24
  %v3_13b80 = inttoptr i32 %v2_13b80 to i32*
  store i32 %v3_13b7c, i32* %v3_13b80, align 4
  %v0_13b84 = load i32, i32* @ip, align 4
  %v7_13b84 = icmp eq i32 %v0_13b84, 9
  br i1 %v7_13b84, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_13b74
  %v1_13b88 = load i32, i32* @r5, align 4
  %v2_13b88 = add i32 %v1_13b88, 28
  %v3_13b88 = inttoptr i32 %v2_13b88 to i32*
  %v4_13b88 = load i32, i32* %v3_13b88, align 4
  store i32 %v4_13b88, i32* %r3.global-to-local, align 4
  %v2_13b8c = load i32, i32* %r1.global-to-local, align 4
  %v3_13b8c = add i32 %v2_13b8c, 28
  %v4_13b8c = inttoptr i32 %v3_13b8c to i32*
  store i32 %v4_13b88, i32* %v4_13b8c, align 4
  %v1_13b90 = load i32, i32* @r5, align 4
  %v2_13b90 = add i32 %v1_13b90, 32
  %v3_13b90 = inttoptr i32 %v2_13b90 to i32*
  %v4_13b90 = load i32, i32* %v3_13b90, align 4
  store i32 %v4_13b90, i32* %r3.global-to-local, align 4
  %v2_13b94 = load i32, i32* %r1.global-to-local, align 4
  %v3_13b94 = add i32 %v2_13b94, 32
  %v4_13b94 = inttoptr i32 %v3_13b94 to i32*
  store i32 %v4_13b90, i32* %v4_13b94, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13b74, %dec_label_pc_13b5c, %dec_label_pc_13b3c, %dec_label_pc_13b30, %bb32
  %v0_13b98 = load i32, i32* @r5, align 4
  store i32 %v0_13b98, i32* @r0, align 4
  %v0_13b9c = call i32 @function_13f88()
  store i32 %v0_13b9c, i32* %r0.global-to-local, align 4
  %v0_13ba0 = load i32, i32* @r7, align 4
  %v1_13ba0 = add i32 %v0_13ba0, 8
  store i32 %v1_13ba0, i32* @r4, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13ba8:                               ; preds = %bb30, %.thread2, %dec_label_pc_13ae8
  %v0_13bbc = phi i32 [ %v3_13b18, %.thread2 ], [ %v1_13a30, %bb30 ], [ %v1_13ba8.pre, %dec_label_pc_13ae8 ]
  %v0_13ba8 = load i32, i32* @sb, align 4
  %v2_13ba8 = sub i32 %v0_13bbc, %v0_13ba8
  store i32 %v2_13ba8, i32* %r1.global-to-local, align 4
  %v0_13bb0 = load i32, i32* @sl, align 4
  %v1_13bb0 = add i32 %v0_13bb0, 4
  %v2_13bb0 = inttoptr i32 %v1_13bb0 to i32*
  %v3_13bb0 = load i32, i32* %v2_13bb0, align 4
  %tmp41 = icmp ugt i32 %v2_13ba8, 15
  %v1_13bd8 = urem i32 %v3_13bb0, 2
  store i32 %v1_13bd8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_13bd8, label %dec_label_pc_13bb8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13ba8
  %v2_13bbc = or i32 %v1_13bd8, %v0_13bbc
  store i32 %v2_13bbc, i32* %r3.global-to-local, align 4
  store i32 %v2_13bbc, i32* %v2_13bb0, align 4
  %v0_13bc4 = load i32, i32* @sl, align 4
  %v1_13bc4 = load i32, i32* %r0.global-to-local, align 4
  %v2_13bc4 = add i32 %v1_13bc4, %v0_13bc4
  store i32 %v2_13bc4, i32* %r2.global-to-local, align 4
  %v1_13bc8 = add i32 %v2_13bc4, 4
  %v2_13bc8 = inttoptr i32 %v1_13bc8 to i32*
  %v3_13bc8 = load i32, i32* %v2_13bc8, align 4
  %v1_13bcc = or i32 %v3_13bc8, 1
  store i32 %v1_13bcc, i32* %r3.global-to-local, align 4
  store i32 %v1_13bcc, i32* %v2_13bc8, align 4
  br label %dec_label_pc_13c08

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13ba8
  %v2_13bdc = add i32 %v0_13bb0, %v0_13ba8
  store i32 %v2_13bdc, i32* %r0.global-to-local, align 4
  %v2_13be0 = or i32 %v1_13bd8, %v0_13ba8
  store i32 %v2_13be0, i32* %r3.global-to-local, align 4
  %v1_13be4 = or i32 %v2_13ba8, 1
  store i32 %v1_13be4, i32* %r2.global-to-local, align 4
  store i32 %v2_13be0, i32* %v2_13bb0, align 4
  %v0_13bec = load i32, i32* %r2.global-to-local, align 4
  %v1_13bec = load i32, i32* %r0.global-to-local, align 4
  %v2_13bec = add i32 %v1_13bec, 4
  %v3_13bec = inttoptr i32 %v2_13bec to i32*
  store i32 %v0_13bec, i32* %v3_13bec, align 4
  %v0_13bf0 = load i32, i32* %r0.global-to-local, align 4
  %v1_13bf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_13bf0 = add i32 %v1_13bf0, %v0_13bf0
  store i32 %v2_13bf0, i32* %r2.global-to-local, align 4
  %v1_13bf4 = add i32 %v2_13bf0, 4
  %v2_13bf4 = inttoptr i32 %v1_13bf4 to i32*
  %v3_13bf4 = load i32, i32* %v2_13bf4, align 4
  %v1_13bf8 = or i32 %v3_13bf4, 1
  store i32 %v1_13bf8, i32* %r3.global-to-local, align 4
  store i32 %v1_13bf8, i32* %v2_13bf4, align 4
  %v0_13c00 = load i32, i32* %r0.global-to-local, align 4
  %v1_13c00 = add i32 %v0_13c00, 8
  store i32 %v1_13c00, i32* @r0, align 4
  %v0_13c04 = call i32 @function_13f88()
  store i32 %v0_13c04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bb8, %dec_label_pc_13bd8
  %v0_13c08 = load i32, i32* @sl, align 4
  %v1_13c08 = add i32 %v0_13c08, 8
  store i32 %v1_13c08, i32* @r4, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13c10:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80264), i32* %r1.global-to-local, align 4
  %v4_13c18 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80296) to i32*), align 4
  store i32 %v4_13c18, i32* @r8, align 4
  %v2_13c1c = inttoptr i32 %v1_13a2c to i32*
  %v3_13c1c = load i32, i32* %v2_13c1c, align 4
  store i32 %v3_13c1c, i32* @r4, align 4
  %v1_13c20 = add i32 %v4_13c18, 860
  %v2_13c20 = inttoptr i32 %v1_13c20 to i32*
  %v3_13c20 = load i32, i32* %v2_13c20, align 4
  %v1_13c24 = add i32 %v3_13c1c, 4
  %v1_13c28 = add i32 %v3_13c20, -1
  store i32 %v1_13c28, i32* %r2.global-to-local, align 4
  %v2_13c2c = add i32 %v1_13c24, %v1_13c28
  %v1_13c30 = load i32, i32* @sb, align 4
  %v2_13c30 = add i32 %v2_13c2c, %v1_13c30
  store i32 %v2_13c30, i32* %r3.global-to-local, align 4
  %v2_13c34 = sub i32 0, %v3_13c20
  %v3_13c34 = and i32 %v2_13c30, %v2_13c34
  store i32 %v3_13c34, i32* @r7, align 4
  %v2_13c38 = sub i32 %v3_13c34, %v3_13c1c
  store i32 %v2_13c38, i32* @fp, align 4
  %v9_13c3c = icmp eq i32 %v1_13a30, %v2_13c38
  br i1 %v9_13c3c, label %dec_label_pc_13cb0, label %dec_label_pc_13c44

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c10
  %v2_13c44 = sub i32 %v1_13a2c, %v3_13c1c
  store i32 %v2_13c44, i32* %r0.global-to-local, align 4
  %v2_13c48 = add i32 %v3_13c1c, %v1_13a30
  store i32 %v2_13c48, i32* %r1.global-to-local, align 4
  store i32 %v3_13c34, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_13c54 = call i32 @function_155d8(i32 %v2_13c44, i32 %v2_13c48, i32 %v3_13c34, i32 1)
  store i32 %v4_13c54, i32* %r0.global-to-local, align 4
  %v7_13c58 = icmp eq i32 %v4_13c54, -1
  br i1 %v7_13c58, label %dec_label_pc_13ca4, label %dec_label_pc_13c60

dec_label_pc_13c60:                               ; preds = %dec_label_pc_13c44
  %v1_13c60 = load i32, i32* @r4, align 4
  %v2_13c60 = add i32 %v1_13c60, %v4_13c54
  store i32 %v2_13c60, i32* %r0.global-to-local, align 4
  %v0_13c64 = load i32, i32* @fp, align 4
  %v1_13c64 = or i32 %v0_13c64, 2
  store i32 %v1_13c64, i32* %r3.global-to-local, align 4
  %v2_13c68 = add i32 %v2_13c60, 4
  %v3_13c68 = inttoptr i32 %v2_13c68 to i32*
  store i32 %v1_13c64, i32* %v3_13c68, align 4
  %v0_13c6c = load i32, i32* @r8, align 4
  %v1_13c6c = add i32 %v0_13c6c, 868
  %v2_13c6c = inttoptr i32 %v1_13c6c to i32*
  %v3_13c6c = load i32, i32* %v2_13c6c, align 4
  store i32 %v3_13c6c, i32* %r3.global-to-local, align 4
  %v1_13c70 = add i32 %v0_13c6c, 880
  %v2_13c70 = inttoptr i32 %v1_13c70 to i32*
  %v3_13c70 = load i32, i32* %v2_13c70, align 4
  store i32 %v3_13c70, i32* %r2.global-to-local, align 4
  %v0_13c74 = load i32, i32* @r6, align 4
  %v2_13c74 = sub i32 %v3_13c6c, %v0_13c74
  store i32 %v2_13c74, i32* %r3.global-to-local, align 4
  %v1_13c78 = load i32, i32* @r7, align 4
  %v2_13c78 = add i32 %v1_13c78, %v2_13c74
  store i32 %v2_13c78, i32* %r1.global-to-local, align 4
  %v1_13c7c = add i32 %v0_13c6c, 872
  %v2_13c7c = inttoptr i32 %v1_13c7c to i32*
  %v3_13c7c = load i32, i32* %v2_13c7c, align 4
  store i32 %v3_13c7c, i32* %r3.global-to-local, align 4
  %v1_13c84 = add i32 %v0_13c6c, 884
  %v2_13c84 = inttoptr i32 %v1_13c84 to i32*
  %v3_13c84 = load i32, i32* %v2_13c84, align 4
  store i32 %v3_13c84, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_13c78, %v3_13c70
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_13c60
  store i32 %v2_13c78, i32* %v2_13c70, align 4
  %v0_13c8c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c8c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_13c60, %bb33
  %v1_13c8c = phi i32 [ %v0_13c6c, %dec_label_pc_13c60 ], [ %v1_13c8c.pre, %bb33 ]
  %v0_13c8c = phi i32 [ %v2_13c78, %dec_label_pc_13c60 ], [ %v0_13c8c.pre, %bb33 ]
  %v2_13c8c = add i32 %v1_13c8c, 868
  %v3_13c8c = inttoptr i32 %v2_13c8c to i32*
  store i32 %v0_13c8c, i32* %v3_13c8c, align 4
  %v0_13c90 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c90 = load i32, i32* %r3.global-to-local, align 4
  %v2_13c90 = add i32 %v1_13c90, %v0_13c90
  store i32 %v2_13c90, i32* %r1.global-to-local, align 4
  %v1_13c94 = load i32, i32* %r2.global-to-local, align 4
  %v0_13c98 = load i32, i32* %r0.global-to-local, align 4
  %v1_13c98 = add i32 %v0_13c98, 8
  store i32 %v1_13c98, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_13c90, %v1_13c94
  br i1 %tmp43, label %bb35, label %dec_label_pc_13cdc

bb35:                                             ; preds = %bb34
  %v5_13c9c = load i32, i32* @r8, align 4
  %v6_13c9c = add i32 %v5_13c9c, 884
  %v7_13c9c = inttoptr i32 %v6_13c9c to i32*
  store i32 %v2_13c90, i32* %v7_13c9c, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13ca4:                               ; preds = %dec_label_pc_13c44
  %v0_13ca4 = load i32, i32* @sb, align 4
  %v1_13ca4 = add i32 %v0_13ca4, 4
  store i32 %v1_13ca4, i32* %r3.global-to-local, align 4
  %v0_13ca8 = load i32, i32* @r6, align 4
  %v3_13ca8 = icmp ult i32 %v0_13ca8, %v1_13ca4
  br i1 %v3_13ca8, label %dec_label_pc_13cb8, label %dec_label_pc_13ca4.dec_label_pc_13cb0_crit_edge

dec_label_pc_13ca4.dec_label_pc_13cb0_crit_edge:  ; preds = %dec_label_pc_13ca4
  %v0_13cb0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13cb0

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13ca4.dec_label_pc_13cb0_crit_edge, %dec_label_pc_13c10
  %v0_13cb0 = phi i32 [ %v0_13cb0.pre, %dec_label_pc_13ca4.dec_label_pc_13cb0_crit_edge ], [ %v0_13a18, %dec_label_pc_13c10 ]
  store i32 %v0_13cb0, i32* @r4, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13ca4
  %v1_13cb8 = add i32 %v0_13ca4, -7
  store i32 %v1_13cb8, i32* @r0, align 4
  %v0_13cbc = call i32 @function_12f1c()
  store i32 %v0_13cbc, i32* @r0, align 4
  store i32 %v0_13cbc, i32* @r4, align 4
  %v2_13cc0 = icmp eq i32 %v0_13cbc, 0
  br i1 %v2_13cc0, label %dec_label_pc_13cdc, label %dec_label_pc_13cc8

dec_label_pc_13cc8:                               ; preds = %dec_label_pc_13cb8
  %v0_13cc8 = load i32, i32* @r6, align 4
  %v1_13cc8 = add i32 %v0_13cc8, -8
  store i32 %v1_13cc8, i32* @r2, align 4
  %v0_13ccc = load i32, i32* @r5, align 4
  store i32 %v0_13ccc, i32* @r1, align 4
  %v0_13cd0 = call i32 @function_129f0()
  %v0_13cd4 = load i32, i32* @r5, align 4
  store i32 %v0_13cd4, i32* @r0, align 4
  %v0_13cd8 = call i32 @function_13f88()
  store i32 %v0_13cd8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13cdc

dec_label_pc_13cdc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_13cb8, %dec_label_pc_13cb0, %dec_label_pc_13c08, %.thread6, %dec_label_pc_13a78, %dec_label_pc_13cc8
  store i32 %v2_139cc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80264), i32* %r2.global-to-local, align 4
  %v4_13cec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80288) to i32*), align 4
  store i32 %v4_13cec, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_13cec)
  br label %dec_label_pc_13cf8

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13a00, %dec_label_pc_139a8, %dec_label_pc_13990, %dec_label_pc_13cdc
  %v0_13cf8 = load i32, i32* @r4, align 4
  store i32 %v0_13cf8, i32* %r0.global-to-local, align 4
  store i32 %v3_13970, i32* @r4, align 4
  store i32 %v6_13970, i32* @r5, align 4
  store i32 %v9_13970, i32* @r6, align 4
  store i32 %v12_13970, i32* @r7, align 4
  store i32 %v15_13970, i32* @r8, align 4
  store i32 %v18_13970, i32* @sb, align 4
  store i32 %v21_13970, i32* @sl, align 4
  store i32 %v24_13970, i32* @fp, align 4
  store i32 %v27_13970, i32* @lr, align 4
  ret i32 %v0_13cf8

; uselistorder directives
  uselistorder i32 %v2_13c90, { 1, 0, 2 }
  uselistorder i32 %v2_13c78, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13c54, { 1, 0, 2 }
  uselistorder i32 %v3_13c34, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13bd8, { 2, 1, 0 }
  uselistorder i32 %v2_13ba8, { 1, 0, 2 }
  uselistorder i32 %v0_13b3c, { 1, 0 }
  uselistorder i32 %v0_13af8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_13a5c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_13a54, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_13a38, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_13a30, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_13a2c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_13a1c, { 1, 0 }
  uselistorder i32 %v0_13a18, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_139f8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80296) to i32*), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_c7b4.514 to i32), i32 80264), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13cf8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13cdc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_13c08, { 1, 0 }
  uselistorder label %dec_label_pc_13ba8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13af4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13ae8, { 1, 0 }
  uselistorder label %dec_label_pc_13ae4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_13d0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d0c:
  %v0_13d0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13d0c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13d0c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13d0c, %bb
  %v10_13d20 = phi i32 [ %arg1, %dec_label_pc_13d0c ], [ 0, %bb ]
  ret i32 %v10_13d20

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_13d24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13d24:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_13d24 = add i32 %arg2, 44
  %v2_13d24 = inttoptr i32 %v1_13d24 to i32*
  %v3_13d24 = load i32, i32* %v2_13d24, align 4
  %v3_13d28 = load i32, i32* @r4, align 4
  store i32 %v3_13d28, i32* %stack_var_-20, align 4
  %v1_13d2c = add i32 %v3_13d24, 4
  %v2_13d2c = inttoptr i32 %v1_13d2c to i32*
  %v3_13d2c = load i32, i32* %v2_13d2c, align 4
  %v1_13d30 = add i32 %arg2, 860
  %v2_13d30 = inttoptr i32 %v1_13d30 to i32*
  %v3_13d30 = load i32, i32* %v2_13d30, align 4
  store i32 %v3_13d30, i32* @r4, align 4
  %v1_13d34 = and i32 %v3_13d2c, -4
  store i32 %v1_13d34, i32* @r6, align 4
  %v1_13d38 = add i32 %v1_13d34, -17
  %v2_13d3c = add i32 %v1_13d38, %v3_13d30
  store i32 %arg2, i32* @r5, align 4
  %v2_13d48 = sub i32 %v2_13d3c, %arg1
  store i32 %v2_13d48, i32* @r0, align 4
  store i32 %v3_13d30, i32* @r1, align 4
  %v0_13d50 = call i32 @function_11e54()
  %v1_13d54 = add i32 %v0_13d50, -1
  store i32 %v1_13d54, i32* %r0.global-to-local, align 4
  %v0_13d58 = load i32, i32* @r4, align 4
  %v2_13d58 = mul i32 %v0_13d58, %v1_13d54
  store i32 %v2_13d58, i32* %r7.global-to-local, align 4
  %v2_13d5c = icmp eq i32 %v2_13d58, 0
  store i1 %v2_13d5c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_13d58, 1
  br i1 %tmp8, label %dec_label_pc_13dc4, label %dec_label_pc_13d64

dec_label_pc_13d64:                               ; preds = %dec_label_pc_13d24
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_13d68 = call i32 @function_15294(i32 0)
  store i32 %v1_13d68, i32* %r0.global-to-local, align 4
  %v0_13d6c = load i32, i32* @r5, align 4
  %v1_13d6c = add i32 %v0_13d6c, 44
  %v2_13d6c = inttoptr i32 %v1_13d6c to i32*
  %v3_13d6c = load i32, i32* %v2_13d6c, align 4
  %v0_13d70 = load i32, i32* @r6, align 4
  %v2_13d70 = add i32 %v0_13d70, %v3_13d6c
  %v9_13d74 = icmp eq i32 %v1_13d68, %v2_13d70
  store i1 %v9_13d74, i1* @cpsr_z, align 1
  store i32 %v1_13d68, i32* @r4, align 4
  br i1 %v9_13d74, label %dec_label_pc_13d80, label %dec_label_pc_13dc4

dec_label_pc_13d80:                               ; preds = %dec_label_pc_13d64
  %v0_13d80 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d80 = sub i32 0, %v0_13d80
  store i32 %v1_13d80, i32* %r0.global-to-local, align 4
  %v1_13d84 = call i32 @function_15294(i32 %v1_13d80)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_13d8c = call i32 @function_15294(i32 0)
  store i32 %v1_13d8c, i32* %r0.global-to-local, align 4
  %v7_13d90 = icmp eq i32 %v1_13d8c, -1
  store i1 %v7_13d90, i1* @cpsr_z, align 1
  br i1 %v7_13d90, label %dec_label_pc_13dc4, label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d80
  %v0_13d98 = load i32, i32* @r4, align 4
  %v2_13d98 = sub i32 %v0_13d98, %v1_13d8c
  store i32 %v2_13d98, i32* %r0.global-to-local, align 4
  %v9_13d98 = icmp eq i32 %v0_13d98, %v1_13d8c
  store i1 %v9_13d98, i1* @cpsr_z, align 1
  br i1 %v9_13d98, label %dec_label_pc_13dc4, label %dec_label_pc_13da0

dec_label_pc_13da0:                               ; preds = %dec_label_pc_13d98
  %v0_13da0 = load i32, i32* @r5, align 4
  %v1_13da0 = add i32 %v0_13da0, 872
  %v2_13da0 = inttoptr i32 %v1_13da0 to i32*
  %v3_13da0 = load i32, i32* %v2_13da0, align 4
  %v1_13da4 = load i32, i32* @r6, align 4
  %v2_13da4 = sub i32 %v1_13da4, %v2_13d98
  store i32 %v2_13da4, i32* %r2.global-to-local, align 4
  %v1_13da8 = add i32 %v0_13da0, 44
  %v2_13da8 = inttoptr i32 %v1_13da8 to i32*
  %v3_13da8 = load i32, i32* %v2_13da8, align 4
  store i32 %v3_13da8, i32* %r1.global-to-local, align 4
  %v2_13dac = sub i32 %v3_13da0, %v2_13d98
  %v1_13db0 = or i32 %v2_13da4, 1
  store i32 %v1_13db0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_13dac, i32* %v2_13da0, align 4
  %v0_13dbc = load i32, i32* %r2.global-to-local, align 4
  %v1_13dbc = load i32, i32* %r1.global-to-local, align 4
  %v2_13dbc = add i32 %v1_13dbc, 4
  %v3_13dbc = inttoptr i32 %v2_13dbc to i32*
  store i32 %v0_13dbc, i32* %v3_13dbc, align 4
  %v1_13dd0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc8

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13d64, %dec_label_pc_13d98, %dec_label_pc_13d80, %dec_label_pc_13d24
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc8

dec_label_pc_13dc8:                               ; preds = %dec_label_pc_13da0, %dec_label_pc_13dc4
  %v1_13dd0 = phi i32 [ %v1_13dd0.pre, %dec_label_pc_13da0 ], [ 0, %dec_label_pc_13dc4 ]
  %v2_13dcc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13dcc, i32* @r4, align 4
  ret i32 %v1_13dd0

; uselistorder directives
  uselistorder i1 %v7_13d90, { 1, 0 }
  uselistorder i32 %v1_13d8c, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_15294, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_11e54, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13dc8, { 1, 0 }
  uselistorder label %dec_label_pc_13dc4, { 1, 2, 0, 3 }
}

define i32 @function_13dd4() local_unnamed_addr {
dec_label_pc_13dd4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13dd4 = load i32, i32* @r4, align 4
  store i32 %v3_13dd4, i32* %stack_var_-36, align 4
  %v0_13dd8 = load i32, i32* @r0, align 4
  %v1_13dd8 = inttoptr i32 %v0_13dd8 to i32*
  %v2_13dd8 = load i32, i32* %v1_13dd8, align 4
  store i32 %v2_13dd8, i32* %r3.global-to-local, align 4
  %v2_13ddc = icmp eq i32 %v2_13dd8, 0
  store i32 %v0_13dd8, i32* @r4, align 4
  br i1 %v2_13ddc, label %dec_label_pc_13f14.preheader, label %dec_label_pc_13df0

dec_label_pc_13f14.preheader:                     ; preds = %dec_label_pc_13dd4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_13f1c25 = add i32 %v0_13dd8, 52
  store i32 %v1_13f1c25, i32* %r3.global-to-local, align 4
  %v2_13f2426 = add i32 %v0_13dd8, 60
  %v3_13f2427 = inttoptr i32 %v2_13f2426 to i32*
  store i32 %v1_13f1c25, i32* %v3_13f2427, align 4
  %v0_13f2828 = load i32, i32* %r3.global-to-local, align 4
  %v2_13f2829 = add i32 %v0_13f2828, 12
  %v3_13f2830 = inttoptr i32 %v2_13f2829 to i32*
  store i32 %v0_13f2828, i32* %v3_13f2830, align 4
  br label %dec_label_pc_13f14.dec_label_pc_13f14_crit_edge

dec_label_pc_13df0:                               ; preds = %dec_label_pc_13dd4
  %v1_13df0 = and i32 %v2_13dd8, -3
  %v3_13df4 = udiv i32 %v2_13dd8, 8
  store i32 %v3_13df4, i32* %r2.global-to-local, align 4
  store i32 %v1_13df0, i32* %v1_13dd8, align 4
  %v0_13dfc = load i32, i32* @r0, align 4
  %v1_13dfc = add i32 %v0_13dfc, -4
  store i32 %v1_13dfc, i32* %r3.global-to-local, align 4
  %v1_13e00 = load i32, i32* %r2.global-to-local, align 4
  %v4_13e00 = mul i32 %v1_13e00, 4
  %v5_13e00 = add i32 %v4_13e00, %v1_13dfc
  store i32 %v5_13e00, i32* %sb.global-to-local, align 4
  %v1_13e04 = add i32 %v0_13dfc, 52
  store i32 %v1_13e04, i32* %r7.global-to-local, align 4
  %v1_13e08 = add i32 %v0_13dfc, 4
  store i32 %v1_13e08, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13f0c, %dec_label_pc_13df0
  %v1_13f0410 = phi i32 [ %v1_13f04, %dec_label_pc_13f0c ], [ %v5_13e00, %dec_label_pc_13df0 ]
  %v1_13e1c = phi i32 [ %v1_13f0c, %dec_label_pc_13f0c ], [ %v1_13e08, %dec_label_pc_13df0 ]
  %v1_13e10 = inttoptr i32 %v1_13e1c to i32*
  %v2_13e10 = load i32, i32* %v1_13e10, align 4
  store i32 %v2_13e10, i32* %r1.global-to-local, align 4
  %v2_13e14 = icmp eq i32 %v2_13e10, 0
  br i1 %v2_13e14, label %dec_label_pc_13f04, label %dec_label_pc_13e1c

dec_label_pc_13e1c:                               ; preds = %dec_label_pc_13e10
  %v0_13e1c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13e1c, i32* %v1_13e10, align 4
  %v0_13e20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e20

dec_label_pc_13e20:                               ; preds = %dec_label_pc_13ef8, %dec_label_pc_13e1c
  %v0_13e3c = phi i32 [ %v0_13ef8, %dec_label_pc_13ef8 ], [ %v0_13e20.pre, %dec_label_pc_13e1c ]
  %v1_13e20 = add i32 %v0_13e3c, 4
  %v2_13e20 = inttoptr i32 %v1_13e20 to i32*
  %v3_13e20 = load i32, i32* %v2_13e20, align 4
  store i32 %v3_13e20, i32* %r3.global-to-local, align 4
  %v1_13e24 = and i32 %v3_13e20, -2
  store i32 %v1_13e24, i32* %lr.global-to-local, align 4
  %v2_13e28 = add i32 %v1_13e24, %v0_13e3c
  store i32 %v2_13e28, i32* @r0, align 4
  %v1_13e2c = urem i32 %v3_13e20, 2
  %v2_13e2c = icmp eq i32 %v1_13e2c, 0
  %v1_13e30 = add i32 %v0_13e3c, 8
  %v2_13e30 = inttoptr i32 %v1_13e30 to i32*
  %v3_13e30 = load i32, i32* %v2_13e30, align 4
  store i32 %v3_13e30, i32* %sl.global-to-local, align 4
  %v1_13e34 = add i32 %v2_13e28, 4
  %v2_13e34 = inttoptr i32 %v1_13e34 to i32*
  %v3_13e34 = load i32, i32* %v2_13e34, align 4
  store i32 %v3_13e34, i32* %r8.global-to-local, align 4
  br i1 %v2_13e2c, label %dec_label_pc_13e3c, label %dec_label_pc_13e70

dec_label_pc_13e3c:                               ; preds = %dec_label_pc_13e20
  %v1_13e3c = inttoptr i32 %v0_13e3c to i32*
  %v2_13e3c = load i32, i32* %v1_13e3c, align 4
  store i32 %v2_13e3c, i32* %r5.global-to-local, align 4
  %v2_13e40 = sub i32 %v0_13e3c, %v2_13e3c
  store i32 %v2_13e40, i32* %r3.global-to-local, align 4
  %v1_13e44 = add i32 %v2_13e40, 8
  %v2_13e44 = inttoptr i32 %v1_13e44 to i32*
  %v3_13e44 = load i32, i32* %v2_13e44, align 4
  store i32 %v3_13e44, i32* %ip.global-to-local, align 4
  %v1_13e48 = add i32 %v3_13e44, 12
  %v2_13e48 = inttoptr i32 %v1_13e48 to i32*
  %v3_13e48 = load i32, i32* %v2_13e48, align 4
  store i32 %v3_13e48, i32* %r1.global-to-local, align 4
  %v9_13e4c = icmp eq i32 %v3_13e48, %v2_13e40
  %v1_13e50 = add i32 %v2_13e40, 12
  %v2_13e50 = inttoptr i32 %v1_13e50 to i32*
  %v3_13e50 = load i32, i32* %v2_13e50, align 4
  store i32 %v3_13e50, i32* %r2.global-to-local, align 4
  br i1 %v9_13e4c, label %dec_label_pc_13e58, label %dec_label_pc_13eb4

dec_label_pc_13e58:                               ; preds = %dec_label_pc_13e3c
  %v1_13e58 = add i32 %v3_13e50, 8
  %v2_13e58 = inttoptr i32 %v1_13e58 to i32*
  %v3_13e58 = load i32, i32* %v2_13e58, align 4
  store i32 %v3_13e58, i32* %r3.global-to-local, align 4
  %v9_13e5c = icmp eq i32 %v3_13e58, %v2_13e40
  br i1 %v9_13e5c, label %dec_label_pc_13e64, label %dec_label_pc_13eb4

dec_label_pc_13e64:                               ; preds = %dec_label_pc_13e58
  store i32 %v3_13e44, i32* %v2_13e58, align 4
  %v0_13e68 = load i32, i32* %r2.global-to-local, align 4
  %v1_13e68 = load i32, i32* %ip.global-to-local, align 4
  %v2_13e68 = add i32 %v1_13e68, 12
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  store i32 %v0_13e68, i32* %v3_13e68, align 4
  %v0_13e6c = load i32, i32* %lr.global-to-local, align 4
  %v1_13e6c = load i32, i32* %r5.global-to-local, align 4
  %v2_13e6c = add i32 %v1_13e6c, %v0_13e6c
  store i32 %v2_13e6c, i32* %lr.global-to-local, align 4
  %v0_13e74.pre = load i32, i32* @r0, align 4
  %v0_13e78.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13e70

dec_label_pc_13e70:                               ; preds = %dec_label_pc_13e20, %dec_label_pc_13e64
  %v0_13ee8 = phi i32 [ %v1_13e24, %dec_label_pc_13e20 ], [ %v2_13e6c, %dec_label_pc_13e64 ]
  %v0_13e78 = phi i32 [ %v3_13e34, %dec_label_pc_13e20 ], [ %v0_13e78.pre, %dec_label_pc_13e64 ]
  %v1_13e8c = phi i32 [ %v2_13e28, %dec_label_pc_13e20 ], [ %v0_13e74.pre, %dec_label_pc_13e64 ]
  %v0_13e70 = load i32, i32* @r4, align 4
  %v1_13e70 = add i32 %v0_13e70, 44
  %v2_13e70 = inttoptr i32 %v1_13e70 to i32*
  %v3_13e70 = load i32, i32* %v2_13e70, align 4
  store i32 %v3_13e70, i32* %r3.global-to-local, align 4
  %v9_13e74 = icmp eq i32 %v1_13e8c, %v3_13e70
  %v1_13e78 = and i32 %v0_13e78, -4
  store i32 %v1_13e78, i32* %r5.global-to-local, align 4
  br i1 %v9_13e74, label %dec_label_pc_13ee8, label %dec_label_pc_13e80

dec_label_pc_13e80:                               ; preds = %dec_label_pc_13e70
  %v2_13e80 = add i32 %v1_13e8c, %v1_13e78
  store i32 %v2_13e80, i32* %r3.global-to-local, align 4
  %v1_13e84 = add i32 %v2_13e80, 4
  %v2_13e84 = inttoptr i32 %v1_13e84 to i32*
  %v3_13e84 = load i32, i32* %v2_13e84, align 4
  store i32 %v3_13e84, i32* %r3.global-to-local, align 4
  %v1_13e88 = urem i32 %v3_13e84, 2
  %v2_13e88 = icmp eq i32 %v1_13e88, 0
  %v2_13e8c = add i32 %v1_13e8c, 4
  %v3_13e8c = inttoptr i32 %v2_13e8c to i32*
  store i32 %v1_13e78, i32* %v3_13e8c, align 4
  br i1 %v2_13e88, label %dec_label_pc_13e94, label %dec_label_pc_13e80.dec_label_pc_13ec4_crit_edge

dec_label_pc_13e80.dec_label_pc_13ec4_crit_edge:  ; preds = %dec_label_pc_13e80
  %v0_13ec8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13e80
  %v0_13e94 = load i32, i32* @r0, align 4
  %v1_13e94 = add i32 %v0_13e94, 8
  %v2_13e94 = inttoptr i32 %v1_13e94 to i32*
  %v3_13e94 = load i32, i32* %v2_13e94, align 4
  store i32 %v3_13e94, i32* %ip.global-to-local, align 4
  %v1_13e98 = add i32 %v3_13e94, 12
  %v2_13e98 = inttoptr i32 %v1_13e98 to i32*
  %v3_13e98 = load i32, i32* %v2_13e98, align 4
  store i32 %v3_13e98, i32* %r3.global-to-local, align 4
  %v9_13e9c = icmp eq i32 %v3_13e98, %v0_13e94
  %v1_13ea0 = add i32 %v0_13e94, 12
  %v2_13ea0 = inttoptr i32 %v1_13ea0 to i32*
  %v3_13ea0 = load i32, i32* %v2_13ea0, align 4
  store i32 %v3_13ea0, i32* %r2.global-to-local, align 4
  br i1 %v9_13e9c, label %dec_label_pc_13ea8, label %dec_label_pc_13eb4

dec_label_pc_13ea8:                               ; preds = %dec_label_pc_13e94
  %v1_13ea8 = add i32 %v3_13ea0, 8
  %v2_13ea8 = inttoptr i32 %v1_13ea8 to i32*
  %v3_13ea8 = load i32, i32* %v2_13ea8, align 4
  store i32 %v3_13ea8, i32* %r3.global-to-local, align 4
  %v9_13eac = icmp eq i32 %v3_13ea8, %v0_13e94
  br i1 %v9_13eac, label %dec_label_pc_13eb8, label %dec_label_pc_13eb4

dec_label_pc_13eb4:                               ; preds = %dec_label_pc_13e94, %dec_label_pc_13e58, %dec_label_pc_13e3c, %dec_label_pc_13ea8
  %v0_13eb4 = call i32 @function_14204()
  store i32 %v0_13eb4, i32* @r0, align 4
  %v0_13eb8.pre = load i32, i32* @ip, align 4
  %v1_13eb8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13eb8

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13ea8, %dec_label_pc_13eb4
  %v1_13eb8 = phi i32 [ %v3_13ea0, %dec_label_pc_13ea8 ], [ %v1_13eb8.pre, %dec_label_pc_13eb4 ]
  %v0_13eb8 = phi i32 [ %v3_13e94, %dec_label_pc_13ea8 ], [ %v0_13eb8.pre, %dec_label_pc_13eb4 ]
  %v2_13eb8 = add i32 %v1_13eb8, 8
  %v3_13eb8 = inttoptr i32 %v2_13eb8 to i32*
  store i32 %v0_13eb8, i32* %v3_13eb8, align 4
  %v0_13ebc = load i32, i32* %r2.global-to-local, align 4
  %v1_13ebc = load i32, i32* %ip.global-to-local, align 4
  %v2_13ebc = add i32 %v1_13ebc, 12
  %v3_13ebc = inttoptr i32 %v2_13ebc to i32*
  store i32 %v0_13ebc, i32* %v3_13ebc, align 4
  %v0_13ec0 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ec0 = add i32 %v1_13ec0, %v0_13ec0
  store i32 %v2_13ec0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13e80.dec_label_pc_13ec4_crit_edge, %dec_label_pc_13eb8
  %v0_13ec8 = phi i32 [ %v0_13ec8.pre, %dec_label_pc_13e80.dec_label_pc_13ec4_crit_edge ], [ %v2_13ec0, %dec_label_pc_13eb8 ]
  %v0_13ec4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ec4 = add i32 %v0_13ec4, 8
  %v2_13ec4 = inttoptr i32 %v1_13ec4 to i32*
  %v3_13ec4 = load i32, i32* %v2_13ec4, align 4
  store i32 %v3_13ec4, i32* %r2.global-to-local, align 4
  %v1_13ec8 = or i32 %v0_13ec8, 1
  store i32 %v1_13ec8, i32* %r3.global-to-local, align 4
  %v0_13ecc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13ecc, i32* %v2_13ec4, align 4
  %v0_13ed0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ed0 = load i32, i32* %r2.global-to-local, align 4
  %v2_13ed0 = add i32 %v1_13ed0, 12
  %v3_13ed0 = inttoptr i32 %v2_13ed0 to i32*
  store i32 %v0_13ed0, i32* %v3_13ed0, align 4
  %v0_13ed4 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ed4 = load i32, i32* %r1.global-to-local, align 4
  %v3_13ed4 = add i32 %v1_13ed4, %v0_13ed4
  %v4_13ed4 = inttoptr i32 %v3_13ed4 to i32*
  store i32 %v0_13ed4, i32* %v4_13ed4, align 4
  %v0_13ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13ed8 = load i32, i32* %r1.global-to-local, align 4
  %v2_13ed8 = add i32 %v1_13ed8, 4
  %v3_13ed8 = inttoptr i32 %v2_13ed8 to i32*
  store i32 %v0_13ed8, i32* %v3_13ed8, align 4
  %v0_13edc = load i32, i32* %r2.global-to-local, align 4
  %v1_13edc = load i32, i32* %r1.global-to-local, align 4
  %v2_13edc = add i32 %v1_13edc, 8
  %v3_13edc = inttoptr i32 %v2_13edc to i32*
  store i32 %v0_13edc, i32* %v3_13edc, align 4
  %v0_13ee0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ee0 = load i32, i32* %r1.global-to-local, align 4
  %v2_13ee0 = add i32 %v1_13ee0, 12
  %v3_13ee0 = inttoptr i32 %v2_13ee0 to i32*
  store i32 %v0_13ee0, i32* %v3_13ee0, align 4
  br label %dec_label_pc_13ef8

dec_label_pc_13ee8:                               ; preds = %dec_label_pc_13e70
  %v2_13ee8 = add i32 %v1_13e78, %v0_13ee8
  %v1_13eec = or i32 %v2_13ee8, 1
  store i32 %v1_13eec, i32* %r3.global-to-local, align 4
  %v1_13ef0 = load i32, i32* %r1.global-to-local, align 4
  %v2_13ef0 = add i32 %v1_13ef0, 4
  %v3_13ef0 = inttoptr i32 %v2_13ef0 to i32*
  store i32 %v1_13eec, i32* %v3_13ef0, align 4
  %v0_13ef4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ef4 = load i32, i32* @r4, align 4
  %v2_13ef4 = add i32 %v1_13ef4, 44
  %v3_13ef4 = inttoptr i32 %v2_13ef4 to i32*
  store i32 %v0_13ef4, i32* %v3_13ef4, align 4
  br label %dec_label_pc_13ef8

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13ec4, %dec_label_pc_13ee8
  %v0_13ef8 = load i32, i32* %sl.global-to-local, align 4
  %v2_13ef8 = icmp eq i32 %v0_13ef8, 0
  store i32 %v0_13ef8, i32* %r1.global-to-local, align 4
  br i1 %v2_13ef8, label %dec_label_pc_13f04.loopexit, label %dec_label_pc_13e20

dec_label_pc_13f04.loopexit:                      ; preds = %dec_label_pc_13ef8
  %v0_13f04.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13f04.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13f04

dec_label_pc_13f04:                               ; preds = %dec_label_pc_13f04.loopexit, %dec_label_pc_13e10
  %v1_13f04 = phi i32 [ %v1_13f04.pre, %dec_label_pc_13f04.loopexit ], [ %v1_13f0410, %dec_label_pc_13e10 ]
  %v0_13f0c = phi i32 [ %v0_13f04.pre, %dec_label_pc_13f04.loopexit ], [ %v1_13e1c, %dec_label_pc_13e10 ]
  %v9_13f04 = icmp eq i32 %v0_13f0c, %v1_13f04
  br i1 %v9_13f04, label %dec_label_pc_13f7c, label %dec_label_pc_13f0c

dec_label_pc_13f0c:                               ; preds = %dec_label_pc_13f04
  %v1_13f0c = add i32 %v0_13f0c, 4
  store i32 %v1_13f0c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13f14.dec_label_pc_13f14_crit_edge:  ; preds = %dec_label_pc_13f14.preheader, %dec_label_pc_13f14.dec_label_pc_13f14_crit_edge
  %v0_13f14.pre = load i32, i32* @r4, align 4
  %v1_13f14.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13f14 = mul i32 %v1_13f14.pre, 8
  %v5_13f14 = add i32 %v4_13f14, %v0_13f14.pre
  %v1_13f18 = add i32 %v1_13f14.pre, 1
  store i32 %v1_13f18, i32* %r2.global-to-local, align 4
  %v1_13f1c = add i32 %v5_13f14, 44
  store i32 %v1_13f1c, i32* %r3.global-to-local, align 4
  %v2_13f24 = add i32 %v5_13f14, 52
  %v3_13f24 = inttoptr i32 %v2_13f24 to i32*
  store i32 %v1_13f1c, i32* %v3_13f24, align 4
  %v0_13f28 = load i32, i32* %r3.global-to-local, align 4
  %v2_13f28 = add i32 %v0_13f28, 12
  %v3_13f28 = inttoptr i32 %v2_13f28 to i32*
  store i32 %v0_13f28, i32* %v3_13f28, align 4
  %v7_13f2c = icmp sgt i32 %v1_13f18, 95
  br i1 %v7_13f2c, label %dec_label_pc_13f30, label %dec_label_pc_13f14.dec_label_pc_13f14_crit_edge

dec_label_pc_13f30:                               ; preds = %dec_label_pc_13f14.dec_label_pc_13f14_crit_edge
  %v0_13f30 = load i32, i32* @r4, align 4
  %v1_13f30 = inttoptr i32 %v0_13f30 to i32*
  %v2_13f30 = load i32, i32* %v1_13f30, align 4
  store i32 %v2_13f30, i32* %r2.global-to-local, align 4
  %v1_13f34 = add i32 %v0_13f30, 864
  %v2_13f34 = inttoptr i32 %v1_13f34 to i32*
  %v3_13f34 = load i32, i32* %v2_13f34, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13f3c = urem i32 %v2_13f30, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_13f44 = or i32 %v3_13f34, 1
  store i32 %v1_13f44, i32* %r1.global-to-local, align 4
  %v1_13f48 = or i32 %v1_13f3c, 72
  store i32 %v1_13f48, i32* %r2.global-to-local, align 4
  %v1_13f4c = add i32 %v0_13f30, 52
  store i32 %v1_13f4c, i32* %ip.global-to-local, align 4
  %v2_13f50 = add i32 %v0_13f30, 840
  %v3_13f50 = inttoptr i32 %v2_13f50 to i32*
  store i32 0, i32* %v3_13f50, align 4
  %v0_13f54 = load i32, i32* %r3.global-to-local, align 4
  %v1_13f54 = add i32 %v0_13f54, 65536
  store i32 %v1_13f54, i32* %r3.global-to-local, align 4
  %v0_13f58 = load i32, i32* %r0.global-to-local, align 4
  %v1_13f58 = load i32, i32* @r4, align 4
  %v2_13f58 = add i32 %v1_13f58, 836
  %v3_13f58 = inttoptr i32 %v2_13f58 to i32*
  store i32 %v0_13f58, i32* %v3_13f58, align 4
  %v0_13f5c = load i32, i32* %r0.global-to-local, align 4
  %v1_13f5c = load i32, i32* @r4, align 4
  %v2_13f5c = add i32 %v1_13f5c, 844
  %v3_13f5c = inttoptr i32 %v2_13f5c to i32*
  store i32 %v0_13f5c, i32* %v3_13f5c, align 4
  %v1_13f60 = load i32, i32* @r4, align 4
  %v2_13f60 = add i32 %v1_13f60, 852
  %v3_13f60 = inttoptr i32 %v2_13f60 to i32*
  store i32 %v1_13f54, i32* %v3_13f60, align 4
  %v1_13f64 = load i32, i32* @r4, align 4
  %v2_13f64 = add i32 %v1_13f64, 864
  %v3_13f64 = inttoptr i32 %v2_13f64 to i32*
  store i32 %v1_13f44, i32* %v3_13f64, align 4
  %v1_13f68 = load i32, i32* @r4, align 4
  %v2_13f68 = inttoptr i32 %v1_13f68 to i32*
  store i32 %v1_13f48, i32* %v2_13f68, align 4
  %v0_13f6c = load i32, i32* %ip.global-to-local, align 4
  %v1_13f6c = load i32, i32* @r4, align 4
  %v2_13f6c = add i32 %v1_13f6c, 44
  %v3_13f6c = inttoptr i32 %v2_13f6c to i32*
  store i32 %v0_13f6c, i32* %v3_13f6c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_13f74 = call i32 @function_145dc(i32 30, i32 %v1_13f44, i32 %v1_13f48, i32 %v1_13f54)
  store i32 %v4_13f74, i32* @r0, align 4
  %v1_13f78 = load i32, i32* @r4, align 4
  %v2_13f78 = add i32 %v1_13f78, 860
  %v3_13f78 = inttoptr i32 %v2_13f78 to i32*
  store i32 %v4_13f74, i32* %v3_13f78, align 4
  br label %dec_label_pc_13f7c

dec_label_pc_13f7c:                               ; preds = %dec_label_pc_13f04, %dec_label_pc_13f30
  %v2_13f80 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13f80, i32* @r4, align 4
  %v1_13f84 = load i32, i32* @r0, align 4
  ret i32 %v1_13f84

; uselistorder directives
  uselistorder i32 %v0_13f30, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13f28, { 1, 0 }
  uselistorder i32 %v1_13f0c, { 1, 0 }
  uselistorder i32 %v0_13ef8, { 0, 2, 1 }
  uselistorder i32 %v0_13ed4, { 1, 0 }
  uselistorder i32 %v1_13e24, { 1, 0, 2 }
  uselistorder i32 %v0_13e3c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13dfc, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 11, 2, 6, 3, 7, 4, 8, 0, 9, 10, 5, 12 }
  uselistorder label %dec_label_pc_13f7c, { 1, 0 }
  uselistorder label %dec_label_pc_13f14.dec_label_pc_13f14_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13ef8, { 1, 0 }
  uselistorder label %dec_label_pc_13ec4, { 1, 0 }
  uselistorder label %dec_label_pc_13eb8, { 1, 0 }
  uselistorder label %dec_label_pc_13eb4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13e70, { 1, 0 }
}

define i32 @function_13f88() local_unnamed_addr {
dec_label_pc_13f88:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_13f88 = load i32, i32* @r4, align 4
  %v6_13f88 = load i32, i32* @r5, align 4
  %v9_13f88 = load i32, i32* @r6, align 4
  %v12_13f88 = load i32, i32* @r7, align 4
  %v18_13f88 = load i32, i32* @lr, align 4
  %v0_13f90 = load i32, i32* @r0, align 4
  store i32 %v0_13f90, i32* @r6, align 4
  %v2_13f90 = icmp eq i32 %v0_13f90, 0
  %v2_13f94 = ptrtoint i32* %stack_var_-40 to i32
  store i32 131388, i32* @r7, align 4
  br i1 %v2_13f90, label %dec_label_pc_1419c, label %dec_label_pc_13fa0

dec_label_pc_13fa0:                               ; preds = %dec_label_pc_13f88
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_13fa4 = load i32, i32* inttoptr (i32 131456 to i32*), align 128
  store i32 %v4_13fa4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_13fa4, i32* %r2.global-to-local, align 4
  %v4_13fb0 = load i32, i32* inttoptr (i32 131424 to i32*), align 32
  store i32 %v4_13fb0, i32* %r1.global-to-local, align 4
  store i32 %v2_13f94, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_13fbc = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  store i32 %v4_13fbc, i32* %ip.global-to-local, align 4
  store i32 81864, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13fbc)
  %v0_13fc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13fc8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13fd0 = load i32, i32* @r7, align 4
  %v2_13fd0 = add i32 %v0_13fd0, 16
  %v3_13fd0 = inttoptr i32 %v2_13fd0 to i32*
  %v4_13fd0 = load i32, i32* %v3_13fd0, align 4
  store i32 %v4_13fd0, i32* %ip.global-to-local, align 4
  store i32 81884, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13fd0)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_13fe0 = load i32, i32* @r7, align 4
  %v2_13fe0 = add i32 %v0_13fe0, 32
  %v3_13fe0 = inttoptr i32 %v2_13fe0 to i32*
  %v4_13fe0 = load i32, i32* %v3_13fe0, align 4
  store i32 %v4_13fe0, i32* @lr, align 4
  %v0_13fe4 = load i32, i32* @r6, align 4
  %v1_13fe4 = add i32 %v0_13fe4, -4
  %v2_13fe4 = inttoptr i32 %v1_13fe4 to i32*
  %v3_13fe4 = load i32, i32* %v2_13fe4, align 4
  store i32 %v3_13fe4, i32* %r2.global-to-local, align 4
  %v1_13fe8 = inttoptr i32 %v4_13fe0 to i32*
  %v2_13fe8 = load i32, i32* %v1_13fe8, align 4
  store i32 %v2_13fe8, i32* %r3.global-to-local, align 4
  %v1_13fec = and i32 %v3_13fe4, -4
  store i32 %v1_13fec, i32* %ip.global-to-local, align 4
  %v1_13ff0 = add i32 %v0_13fe4, -8
  store i32 %v1_13ff0, i32* @r5, align 4
  store i32 %v1_13ff0, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_13fec, %v2_13fe8
  br i1 %tmp, label %dec_label_pc_14020, label %dec_label_pc_14000

dec_label_pc_14000:                               ; preds = %dec_label_pc_13fa0
  %v1_14000 = or i32 %v2_13fe8, 3
  store i32 %v1_14000, i32* %r3.global-to-local, align 4
  store i32 %v1_14000, i32* %v1_13fe8, align 4
  %v3_14004 = load i32, i32* @lr, align 4
  %v4_14004 = add i32 %v3_14004, -8
  store i32 %v4_14004, i32* %lr.global-to-local, align 4
  %v0_14008 = load i32, i32* %ip.global-to-local, align 4
  %v3_14008 = udiv i32 %v0_14008, 8
  store i32 %v3_14008, i32* %r1.global-to-local, align 4
  %v1_1400c = add i32 %v3_14004, -4
  store i32 %v1_1400c, i32* %r2.global-to-local, align 4
  %v4_14010 = mul nuw i32 %v3_14008, 4
  %v5_14010 = add i32 %v4_14010, %v1_1400c
  %v6_14010 = inttoptr i32 %v5_14010 to i32*
  %v7_14010 = load i32, i32* %v6_14010, align 4
  store i32 %v7_14010, i32* %r3.global-to-local, align 4
  %v1_14014 = load i32, i32* @r5, align 4
  %v2_14014 = add i32 %v1_14014, 8
  %v3_14014 = inttoptr i32 %v2_14014 to i32*
  store i32 %v7_14010, i32* %v3_14014, align 4
  %v0_14018 = load i32, i32* @r5, align 4
  %v1_14018 = load i32, i32* %r2.global-to-local, align 4
  %v2_14018 = load i32, i32* %r1.global-to-local, align 4
  %v5_14018 = mul i32 %v2_14018, 4
  %v6_14018 = add i32 %v5_14018, %v1_14018
  %v7_14018 = inttoptr i32 %v6_14018 to i32*
  store i32 %v0_14018, i32* %v7_14018, align 4
  br label %dec_label_pc_14184

dec_label_pc_14020:                               ; preds = %dec_label_pc_13fa0
  %v1_14020 = and i32 %v3_13fe4, 2
  %v2_14020 = icmp eq i32 %v1_14020, 0
  br i1 %v2_14020, label %dec_label_pc_14028, label %dec_label_pc_1415c

dec_label_pc_14028:                               ; preds = %dec_label_pc_14020
  %v1_14028 = or i32 %v2_13fe8, 1
  store i32 %v1_14028, i32* %r3.global-to-local, align 4
  store i32 %v1_14028, i32* %v1_13fe8, align 4
  %v0_14030 = load i32, i32* @r6, align 4
  %v1_14030 = add i32 %v0_14030, -4
  %v2_14030 = inttoptr i32 %v1_14030 to i32*
  %v3_14030 = load i32, i32* %v2_14030, align 4
  store i32 %v3_14030, i32* %r3.global-to-local, align 4
  %v0_14034 = load i32, i32* @r5, align 4
  %v1_14034 = load i32, i32* %ip.global-to-local, align 4
  %v2_14034 = add i32 %v1_14034, %v0_14034
  store i32 %v2_14034, i32* %lr.global-to-local, align 4
  %v1_14038 = urem i32 %v3_14030, 2
  %v2_14038 = icmp eq i32 %v1_14038, 0
  %v1_1403c = add i32 %v2_14034, 4
  %v2_1403c = inttoptr i32 %v1_1403c to i32*
  %v3_1403c = load i32, i32* %v2_1403c, align 4
  store i32 %v3_1403c, i32* %r8.global-to-local, align 4
  br i1 %v2_14038, label %dec_label_pc_14044, label %dec_label_pc_14078

dec_label_pc_14044:                               ; preds = %dec_label_pc_14028
  %v1_14044 = add i32 %v0_14030, -8
  %v2_14044 = inttoptr i32 %v1_14044 to i32*
  %v3_14044 = load i32, i32* %v2_14044, align 4
  store i32 %v3_14044, i32* %r1.global-to-local, align 4
  %v2_14048 = sub i32 %v0_14034, %v3_14044
  store i32 %v2_14048, i32* %r3.global-to-local, align 4
  %v1_1404c = add i32 %v2_14048, 8
  %v2_1404c = inttoptr i32 %v1_1404c to i32*
  %v3_1404c = load i32, i32* %v2_1404c, align 4
  store i32 %v3_1404c, i32* %r2.global-to-local, align 4
  %v1_14050 = add i32 %v3_1404c, 12
  %v2_14050 = inttoptr i32 %v1_14050 to i32*
  %v3_14050 = load i32, i32* %v2_14050, align 4
  store i32 %v3_14050, i32* %r4.global-to-local, align 4
  %v9_14054 = icmp eq i32 %v3_14050, %v2_14048
  %v1_14058 = add i32 %v2_14048, 12
  %v2_14058 = inttoptr i32 %v1_14058 to i32*
  %v3_14058 = load i32, i32* %v2_14058, align 4
  store i32 %v3_14058, i32* %r0.global-to-local, align 4
  br i1 %v9_14054, label %dec_label_pc_14060, label %dec_label_pc_140c4

dec_label_pc_14060:                               ; preds = %dec_label_pc_14044
  %v1_14060 = add i32 %v3_14058, 8
  %v2_14060 = inttoptr i32 %v1_14060 to i32*
  %v3_14060 = load i32, i32* %v2_14060, align 4
  store i32 %v3_14060, i32* %r3.global-to-local, align 4
  %v9_14064 = icmp eq i32 %v3_14060, %v2_14048
  br i1 %v9_14064, label %dec_label_pc_1406c, label %dec_label_pc_140c4

dec_label_pc_1406c:                               ; preds = %dec_label_pc_14060
  store i32 %v3_1404c, i32* %v2_14060, align 4
  %v0_14070 = load i32, i32* %r0.global-to-local, align 4
  %v1_14070 = load i32, i32* %r2.global-to-local, align 4
  %v2_14070 = add i32 %v1_14070, 12
  %v3_14070 = inttoptr i32 %v2_14070 to i32*
  store i32 %v0_14070, i32* %v3_14070, align 4
  %v0_14074 = load i32, i32* %ip.global-to-local, align 4
  %v1_14074 = load i32, i32* %r1.global-to-local, align 4
  %v2_14074 = add i32 %v1_14074, %v0_14074
  store i32 %v2_14074, i32* %ip.global-to-local, align 4
  %v0_14084.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14088.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_14028, %dec_label_pc_1406c
  %v0_14104 = phi i32 [ %v1_14034, %dec_label_pc_14028 ], [ %v2_14074, %dec_label_pc_1406c ]
  %v0_14088 = phi i32 [ %v3_1403c, %dec_label_pc_14028 ], [ %v0_14088.pre, %dec_label_pc_1406c ]
  %v1_1409c = phi i32 [ %v2_14034, %dec_label_pc_14028 ], [ %v0_14084.pre, %dec_label_pc_1406c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1407c = load i32, i32* @r7, align 4
  %v2_1407c = add i32 %v0_1407c, 32
  %v3_1407c = inttoptr i32 %v2_1407c to i32*
  %v4_1407c = load i32, i32* %v3_1407c, align 4
  store i32 %v4_1407c, i32* %r2.global-to-local, align 4
  %v1_14080 = add i32 %v4_1407c, 44
  %v2_14080 = inttoptr i32 %v1_14080 to i32*
  %v3_14080 = load i32, i32* %v2_14080, align 4
  store i32 %v3_14080, i32* %r3.global-to-local, align 4
  %v9_14084 = icmp eq i32 %v1_1409c, %v3_14080
  %v1_14088 = and i32 %v0_14088, -4
  store i32 %v1_14088, i32* %r0.global-to-local, align 4
  br i1 %v9_14084, label %dec_label_pc_14104, label %dec_label_pc_14090

dec_label_pc_14090:                               ; preds = %dec_label_pc_14078
  %v2_14090 = add i32 %v1_1409c, %v1_14088
  store i32 %v2_14090, i32* %r3.global-to-local, align 4
  %v1_14094 = add i32 %v2_14090, 4
  %v2_14094 = inttoptr i32 %v1_14094 to i32*
  %v3_14094 = load i32, i32* %v2_14094, align 4
  store i32 %v3_14094, i32* %r3.global-to-local, align 4
  %v1_14098 = urem i32 %v3_14094, 2
  %v2_14098 = icmp eq i32 %v1_14098, 0
  %v2_1409c = add i32 %v1_1409c, 4
  %v3_1409c = inttoptr i32 %v2_1409c to i32*
  store i32 %v1_14088, i32* %v3_1409c, align 4
  br i1 %v2_14098, label %dec_label_pc_140a4, label %dec_label_pc_14090.dec_label_pc_140d4_crit_edge

dec_label_pc_14090.dec_label_pc_140d4_crit_edge:  ; preds = %dec_label_pc_14090
  %v0_140e4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_140d4

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14090
  %v0_140a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_140a4 = add i32 %v0_140a4, 8
  %v2_140a4 = inttoptr i32 %v1_140a4 to i32*
  %v3_140a4 = load i32, i32* %v2_140a4, align 4
  store i32 %v3_140a4, i32* %r1.global-to-local, align 4
  %v1_140a8 = add i32 %v3_140a4, 12
  %v2_140a8 = inttoptr i32 %v1_140a8 to i32*
  %v3_140a8 = load i32, i32* %v2_140a8, align 4
  store i32 %v3_140a8, i32* %r3.global-to-local, align 4
  %v9_140ac = icmp eq i32 %v3_140a8, %v0_140a4
  %v1_140b0 = add i32 %v0_140a4, 12
  %v2_140b0 = inttoptr i32 %v1_140b0 to i32*
  %v3_140b0 = load i32, i32* %v2_140b0, align 4
  store i32 %v3_140b0, i32* %r2.global-to-local, align 4
  br i1 %v9_140ac, label %dec_label_pc_140b8, label %dec_label_pc_140c4

dec_label_pc_140b8:                               ; preds = %dec_label_pc_140a4
  %v1_140b8 = add i32 %v3_140b0, 8
  %v2_140b8 = inttoptr i32 %v1_140b8 to i32*
  %v3_140b8 = load i32, i32* %v2_140b8, align 4
  store i32 %v3_140b8, i32* %r3.global-to-local, align 4
  %v9_140bc = icmp eq i32 %v3_140b8, %v0_140a4
  br i1 %v9_140bc, label %dec_label_pc_140c8, label %dec_label_pc_140c4

dec_label_pc_140c4:                               ; preds = %dec_label_pc_140a4, %dec_label_pc_14060, %dec_label_pc_14044, %dec_label_pc_140b8
  %v0_140c4 = call i32 @function_14204()
  store i32 %v0_140c4, i32* %r0.global-to-local, align 4
  %v0_140c8.pre = load i32, i32* @r1, align 4
  %v1_140c8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_140c8

dec_label_pc_140c8:                               ; preds = %dec_label_pc_140b8, %dec_label_pc_140c4
  %v1_140c8 = phi i32 [ %v3_140b0, %dec_label_pc_140b8 ], [ %v1_140c8.pre, %dec_label_pc_140c4 ]
  %v0_140c8 = phi i32 [ %v3_140a4, %dec_label_pc_140b8 ], [ %v0_140c8.pre, %dec_label_pc_140c4 ]
  %v2_140c8 = add i32 %v1_140c8, 8
  %v3_140c8 = inttoptr i32 %v2_140c8 to i32*
  store i32 %v0_140c8, i32* %v3_140c8, align 4
  %v0_140cc = load i32, i32* %r2.global-to-local, align 4
  %v1_140cc = load i32, i32* %r1.global-to-local, align 4
  %v2_140cc = add i32 %v1_140cc, 12
  %v3_140cc = inttoptr i32 %v2_140cc to i32*
  store i32 %v0_140cc, i32* %v3_140cc, align 4
  %v0_140d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_140d0 = load i32, i32* %r0.global-to-local, align 4
  %v2_140d0 = add i32 %v1_140d0, %v0_140d0
  store i32 %v2_140d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_14090.dec_label_pc_140d4_crit_edge, %dec_label_pc_140c8
  %v0_140e4 = phi i32 [ %v0_140e4.pre, %dec_label_pc_14090.dec_label_pc_140d4_crit_edge ], [ %v2_140d0, %dec_label_pc_140c8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_140d8 = load i32, i32* @r7, align 4
  %v2_140d8 = add i32 %v0_140d8, 32
  %v3_140d8 = inttoptr i32 %v2_140d8 to i32*
  %v4_140d8 = load i32, i32* %v3_140d8, align 4
  %v1_140dc = add i32 %v4_140d8, 52
  store i32 %v1_140dc, i32* %r3.global-to-local, align 4
  %v1_140e0 = add i32 %v4_140d8, 60
  %v2_140e0 = inttoptr i32 %v1_140e0 to i32*
  %v3_140e0 = load i32, i32* %v2_140e0, align 4
  store i32 %v3_140e0, i32* %r1.global-to-local, align 4
  %v1_140e4 = or i32 %v0_140e4, 1
  store i32 %v1_140e4, i32* %r2.global-to-local, align 4
  %v1_140e8 = load i32, i32* %r4.global-to-local, align 4
  %v2_140e8 = add i32 %v1_140e8, 12
  %v3_140e8 = inttoptr i32 %v2_140e8 to i32*
  store i32 %v1_140dc, i32* %v3_140e8, align 4
  %v0_140ec = load i32, i32* %r1.global-to-local, align 4
  %v1_140ec = load i32, i32* %r4.global-to-local, align 4
  %v2_140ec = add i32 %v1_140ec, 8
  %v3_140ec = inttoptr i32 %v2_140ec to i32*
  store i32 %v0_140ec, i32* %v3_140ec, align 4
  %v0_140f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_140f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_140f0 = add i32 %v1_140f0, 4
  %v3_140f0 = inttoptr i32 %v2_140f0 to i32*
  store i32 %v0_140f0, i32* %v3_140f0, align 4
  %v0_140f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_140f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_140f4 = add i32 %v1_140f4, %v0_140f4
  %v4_140f4 = inttoptr i32 %v3_140f4 to i32*
  store i32 %v0_140f4, i32* %v4_140f4, align 4
  %v0_140f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_140f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_140f8 = add i32 %v1_140f8, 12
  %v3_140f8 = inttoptr i32 %v2_140f8 to i32*
  store i32 %v0_140f8, i32* %v3_140f8, align 4
  %v0_140fc = load i32, i32* %r4.global-to-local, align 4
  %v1_140fc = load i32, i32* %r3.global-to-local, align 4
  %v2_140fc = add i32 %v1_140fc, 8
  %v3_140fc = inttoptr i32 %v2_140fc to i32*
  store i32 %v0_140fc, i32* %v3_140fc, align 4
  br label %dec_label_pc_14114

dec_label_pc_14104:                               ; preds = %dec_label_pc_14078
  %v2_14104 = add i32 %v1_14088, %v0_14104
  store i32 %v2_14104, i32* %ip.global-to-local, align 4
  %v1_14108 = or i32 %v2_14104, 1
  store i32 %v1_14108, i32* %r3.global-to-local, align 4
  %v0_1410c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1410c, i32* %v2_14080, align 4
  %v0_14110 = load i32, i32* %r3.global-to-local, align 4
  %v1_14110 = load i32, i32* %r4.global-to-local, align 4
  %v2_14110 = add i32 %v1_14110, 4
  %v3_14110 = inttoptr i32 %v2_14110 to i32*
  store i32 %v0_14110, i32* %v3_14110, align 4
  br label %dec_label_pc_14114

dec_label_pc_14114:                               ; preds = %dec_label_pc_140d4, %dec_label_pc_14104
  %v0_14114 = load i32, i32* %ip.global-to-local, align 4
  %v3_14118 = icmp ult i32 %v0_14114, 131070
  br i1 %v3_14118, label %dec_label_pc_14184, label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14114
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_14120 = load i32, i32* @r7, align 4
  %v2_14120 = add i32 %v0_14120, 32
  %v3_14120 = inttoptr i32 %v2_14120 to i32*
  %v4_14120 = load i32, i32* %v3_14120, align 4
  store i32 %v4_14120, i32* @r4, align 4
  %v1_14124 = inttoptr i32 %v4_14120 to i32*
  %v2_14124 = load i32, i32* %v1_14124, align 4
  store i32 %v2_14124, i32* %r3.global-to-local, align 4
  %v1_14128 = and i32 %v2_14124, 2
  %v2_14128 = icmp eq i32 %v1_14128, 0
  br i1 %v2_14128, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_1411c
  store i32 %v4_14120, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_1411c, %bb
  store i32 82228, i32* @lr, align 4
  %v1_14130 = xor i1 %v2_14128, true
  call void @__pseudo_cond_branch(i1 %v1_14130, i32 ptrtoint (i32* @global_var_13dd4.528 to i32))
  %v0_14134 = load i32, i32* @r4, align 4
  %v1_14134 = add i32 %v0_14134, 44
  %v2_14134 = inttoptr i32 %v1_14134 to i32*
  %v3_14134 = load i32, i32* %v2_14134, align 4
  store i32 %v3_14134, i32* %r3.global-to-local, align 4
  %v1_14138 = add i32 %v3_14134, 4
  %v2_14138 = inttoptr i32 %v1_14138 to i32*
  %v3_14138 = load i32, i32* %v2_14138, align 4
  store i32 %v3_14138, i32* %r3.global-to-local, align 4
  %v1_1413c = add i32 %v0_14134, 836
  %v2_1413c = inttoptr i32 %v1_1413c to i32*
  %v3_1413c = load i32, i32* %v2_1413c, align 4
  store i32 %v3_1413c, i32* %r2.global-to-local, align 4
  %v1_14140 = and i32 %v3_14138, -4
  store i32 %v1_14140, i32* %r3.global-to-local, align 4
  %v3_14144 = icmp ult i32 %v1_14140, %v3_1413c
  br i1 %v3_14144, label %dec_label_pc_14184, label %dec_label_pc_1414c

dec_label_pc_1414c:                               ; preds = %bb15
  store i32 %v0_14134, i32* %r1.global-to-local, align 4
  %v1_14150 = add i32 %v0_14134, 840
  %v2_14150 = inttoptr i32 %v1_14150 to i32*
  %v3_14150 = load i32, i32* %v2_14150, align 4
  store i32 %v3_14150, i32* %r0.global-to-local, align 4
  %v2_14154 = call i32 @function_13d24(i32 %v3_14150, i32 %v0_14134)
  store i32 %v2_14154, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14184

dec_label_pc_1415c:                               ; preds = %dec_label_pc_14020
  %v2_1415c = inttoptr i32 %v1_13ff0 to i32*
  %v3_1415c = load i32, i32* %v2_1415c, align 4
  store i32 %v3_1415c, i32* %r0.global-to-local, align 4
  %v1_14160 = add i32 %v4_13fe0, 848
  %v2_14160 = inttoptr i32 %v1_14160 to i32*
  %v3_14160 = load i32, i32* %v2_14160, align 4
  store i32 %v3_14160, i32* %r2.global-to-local, align 4
  %v1_14164 = add i32 %v4_13fe0, 868
  %v2_14164 = inttoptr i32 %v1_14164 to i32*
  %v3_14164 = load i32, i32* %v2_14164, align 4
  %v2_14168 = add i32 %v3_1415c, %v1_13fec
  store i32 %v2_14168, i32* %r1.global-to-local, align 4
  %v1_1416c = add i32 %v3_14160, -1
  store i32 %v1_1416c, i32* %r2.global-to-local, align 4
  %v2_14170 = sub i32 %v3_14164, %v2_14168
  store i32 %v2_14170, i32* %r3.global-to-local, align 4
  store i32 %v2_14170, i32* %v2_14164, align 4
  %v1_14178 = load i32, i32* @lr, align 4
  %v2_14178 = add i32 %v1_14178, 848
  %v3_14178 = inttoptr i32 %v2_14178 to i32*
  store i32 %v1_1416c, i32* %v3_14178, align 4
  %v0_1417c = load i32, i32* %r0.global-to-local, align 4
  %v1_1417c = load i32, i32* @r5, align 4
  %v2_1417c = sub i32 %v1_1417c, %v0_1417c
  store i32 %v2_1417c, i32* %r0.global-to-local, align 4
  %v4_14180 = call i32 @function_15570(i32 %v2_1417c, i32 %v2_14168, i32 %v1_1416c, i32 %v2_14170)
  store i32 %v4_14180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14184

dec_label_pc_14184:                               ; preds = %bb15, %dec_label_pc_14114, %dec_label_pc_1414c, %dec_label_pc_14000, %dec_label_pc_1415c
  store i32 %v2_13f94, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14190 = load i32, i32* @r7, align 4
  %v2_14190 = add i32 %v0_14190, 24
  %v3_14190 = inttoptr i32 %v2_14190 to i32*
  %v4_14190 = load i32, i32* %v3_14190, align 4
  store i32 %v4_14190, i32* @ip, align 4
  store i32 82332, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14190)
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_13f88, %dec_label_pc_14184
  store i32 %v3_13f88, i32* @r4, align 4
  store i32 %v6_13f88, i32* @r5, align 4
  store i32 %v9_13f88, i32* @r6, align 4
  store i32 %v12_13f88, i32* @r7, align 4
  store i32 %v18_13f88, i32* @lr, align 4
  ret i32 %v2_13f94

; uselistorder directives
  uselistorder i32 %v0_14134, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_140f4, { 1, 0 }
  uselistorder i32 %v1_14034, { 1, 0 }
  uselistorder i32 %v0_14034, { 1, 0 }
  uselistorder i32 %v3_14008, { 1, 0 }
  uselistorder i32 %v1_13fec, { 1, 0, 2 }
  uselistorder i32 %v2_13fe8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13fe0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13f90, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 14, 0, 1, 2, 13, 4, 5, 11, 12, 6, 7, 8, 10, 9 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_1419c, { 1, 0 }
  uselistorder label %dec_label_pc_14184, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_14114, { 1, 0 }
  uselistorder label %dec_label_pc_140d4, { 1, 0 }
  uselistorder label %dec_label_pc_140c8, { 1, 0 }
  uselistorder label %dec_label_pc_140c4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_14078, { 1, 0 }
}

define i32 @function_141ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_141ac:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_141ac = load i1, i1* @cpsr_z, align 1
  %v2_141ac = load i32, i32* @r4, align 4
  br i1 %v0_141ac, label %bb, label %dec_label_pc_141ac..thread4_crit_edge

dec_label_pc_141ac..thread4_crit_edge:            ; preds = %dec_label_pc_141ac
  %v0_141d8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_141ac
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_141ac..thread4_crit_edge, %bb
  %v0_141d8 = phi i32 [ %v0_141d8.pre, %dec_label_pc_141ac..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_141ac, i32* %stack_var_-12, align 4
  %v6_141c4 = load i32, i32* @r5, align 4
  %v9_141c4 = load i32, i32* @lr, align 4
  %v4_141d4 = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_141d4, i32* @r5, align 4
  store i32 %v0_141d8, i32* @r4, align 4
  store i32 %v4_141d4, i32* @r0, align 4
  %v0_141e4 = call i32 @function_13dd4()
  %v0_141e8 = load i32, i32* @r4, align 4
  store i32 %v0_141e8, i32* %r0.global-to-local, align 4
  %v0_141ec = load i32, i32* @r5, align 4
  %v2_141f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_141f4, i32* @r4, align 4
  store i32 %v6_141c4, i32* @r5, align 4
  store i32 %v9_141c4, i32* @lr, align 4
  %v2_141f8 = call i32 @function_13d24(i32 %v0_141e8, i32 %v0_141ec)
  store i32 %v2_141f8, i32* %r0.global-to-local, align 4
  %v0_141fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_141fc, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_14200 = phi i32 [ %v2_141f8, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_14200

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_13d24, { 1, 0 }
  uselistorder i32 ()* @function_13dd4, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 131420 to i32*), { 15, 5, 6, 7, 8, 9, 4, 10, 3, 11, 0, 12, 13, 2, 14, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_14204() local_unnamed_addr {
dec_label_pc_14204:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 131388, i32* @r5, align 4
  %v4_1421c = load i32, i32* inttoptr (i32 131404 to i32*), align 4
  store i32 82472, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1421c)
  %v2_14238 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_14244 = call i32 @function_12490(i32 1, i32 %v2_14238, i32 0)
  %v4_1424c = load i32, i32* @global_var_203d8.536, align 4
  %v2_14250 = icmp eq i32 %v4_1424c, 0
  br i1 %v2_14250, label %dec_label_pc_14258, label %dec_label_pc_14298

dec_label_pc_14258:                               ; preds = %dec_label_pc_14204
  store i32 1, i32* @global_var_203d8.536, align 4
  br label %dec_label_pc_14260

dec_label_pc_14260:                               ; preds = %dec_label_pc_142a8, %dec_label_pc_14258
  %v0_14264 = load i32, i32* @r5, align 4
  %v2_14264 = add i32 %v0_14264, 160
  store i32 %v2_14264, i32* @r4, align 4
  %v2_14270 = add i32 %v0_14264, 36
  %v3_14270 = inttoptr i32 %v2_14270 to i32*
  %v4_14270 = load i32, i32* %v3_14270, align 4
  call void @__pseudo_branch(i32 %v4_14270)
  %v1_14280 = call i32 @function_12d0c(i32 6)
  %v0_1428c = load i32, i32* @r5, align 4
  %v2_1428c = add i32 %v0_1428c, 16
  %v3_1428c = inttoptr i32 %v2_1428c to i32*
  %v4_1428c = load i32, i32* %v3_1428c, align 4
  store i32 82584, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1428c)
  %v4_1429c.pre = load i32, i32* @global_var_203d8.536, align 4
  br label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %dec_label_pc_14204, %dec_label_pc_14260
  %v0_142ac = phi i32 [ %v4_1424c, %dec_label_pc_14204 ], [ %v4_1429c.pre, %dec_label_pc_14260 ]
  %v7_142a0 = icmp eq i32 %v0_142ac, 1
  br i1 %v7_142a0, label %dec_label_pc_142a8, label %dec_label_pc_142e4

dec_label_pc_142a8:                               ; preds = %dec_label_pc_14298
  %v2_142a8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_142a8, i32* @r4, align 4
  store i32 2, i32* @global_var_203d8.536, align 4
  store i32 20, i32* @r2, align 4
  %v2_142c0 = bitcast i32* %stack_var_-28 to i8*
  %v3_142c0 = call i32 @function_12940(i8* %v2_142c0, i32 0)
  %v3_142dc = call i32 @function_15070(i32 6, i32 %v2_142a8, i32 0)
  br label %dec_label_pc_14260

dec_label_pc_142e4:                               ; preds = %dec_label_pc_14298
  %v7_142e4 = icmp eq i32 %v0_142ac, 2
  br i1 %v7_142e4, label %dec_label_pc_142ec, label %dec_label_pc_142f8

dec_label_pc_142ec:                               ; preds = %dec_label_pc_142e4
  store i32 3, i32* @global_var_203d8.536, align 4
  %v0_142f4 = call i32 @function_14204()
  %v4_142f8.pre = load i32, i32* @global_var_203d8.536, align 4
  br label %dec_label_pc_142f8

dec_label_pc_142f8:                               ; preds = %dec_label_pc_142e4, %dec_label_pc_142ec
  %v1_14300 = phi i32 [ %v0_142ac, %dec_label_pc_142e4 ], [ %v4_142f8.pre, %dec_label_pc_142ec ]
  %v7_142fc = icmp eq i32 %v1_14300, 3
  br i1 %v7_142fc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_142f8
  store i32 4, i32* @global_var_203d8.536, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_142f8, %bb
  call void @__pseudo_cond_branch(i1 %v7_142fc, i32 ptrtoint (i32* @global_var_15660.538 to i32))
  br label %dec_label_pc_14310

dec_label_pc_14310:                               ; preds = %dec_label_pc_14310, %.thread1
  %v0_14310 = call i32 @function_14204()
  br label %dec_label_pc_14310

; uselistorder directives
  uselistorder i32 ()* @function_14204, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 76, 16, 36, 37, 17, 35, 3, 38, 18, 39, 0, 19, 20, 21, 22, 23, 24, 1, 25, 26, 27, 28, 5, 29, 40, 41, 42, 6, 43, 44, 45, 46, 7, 47, 48, 49, 50, 8, 51, 9, 52, 53, 30, 54, 10, 55, 56, 57, 31, 58, 11, 59, 60, 32, 61, 62, 63, 64, 65, 33, 66, 12, 67, 68, 69, 70, 71, 72, 34, 73, 13, 74, 4, 75, 2 }
  uselistorder i32* @global_var_203d8.536, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 131404 to i32*), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_142f8, { 1, 0 }
  uselistorder label %dec_label_pc_14298, { 1, 0 }
}

define i32 @function_1431c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1431c:
  %v0_1431c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1431c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1431c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1431c, %bb
  %v4_14328 = phi i32 [ %arg1, %dec_label_pc_1431c ], [ 0, %bb ]
  ret i32 %v4_14328

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1432c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1432c:
  %stack_var_-16 = alloca i32, align 4
  store i32 131388, i32* @r5, align 4
  %v4_14338 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  store i32 %v4_14338, i32* @r4, align 4
  %v2_14340 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_14358 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14358)
  %v0_1436c = load i32, i32* @r5, align 4
  %v2_1436c = add i32 %v0_1436c, 16
  %v3_1436c = inttoptr i32 %v2_1436c to i32*
  %v4_1436c = load i32, i32* %v3_1436c, align 4
  call void @__pseudo_branch(i32 %v4_1436c)
  %v4_1437c = load i32, i32* @global_var_203dc.545, align 4
  %v2_14380 = icmp eq i32 %v4_1437c, 0
  br i1 %v2_14380, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1432c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1432c, %bb
  %v2_1438c = xor i1 %v2_14380, true
  call void @__pseudo_cond_branch(i1 %v2_1438c, i32 %v4_1437c)
  store i32 %v2_14340, i32* @r0, align 4
  %v0_1439c = load i32, i32* @r5, align 4
  %v2_1439c = add i32 %v0_1439c, 24
  %v3_1439c = inttoptr i32 %v2_1439c to i32*
  %v4_1439c = load i32, i32* %v3_1439c, align 4
  call void @__pseudo_branch(i32 %v4_1439c)
  %v0_143a8 = call i32 @function_14bf8()
  %v0_143b0 = load i32, i32* @r5, align 4
  %v9_143b0 = icmp eq i32 %v0_143b0, 41128
  br i1 %v9_143b0, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_143b8 = xor i1 %v9_143b0, true
  call void @__pseudo_cond_branch(i1 %v2_143b8, i32 ptrtoint (i32* @global_var_16094.548 to i32))
  %v0_143bc = load i32, i32* @r6, align 4
  %v1_143c0 = call i32 @function_15660(i32 %v0_143bc)
  %v0_143c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_143c4, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v5_143c4 = mul i32 %v1_143c0, 268435456
  %v6_143c4 = and i32 %v5_143c4, %v1_143c0
  store i32 %v6_143c4, i32* @fp, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_143dc = phi i32 [ %v1_143c0, %bb9 ], [ 0, %bb10 ]
  ret i32 %v10_143dc

; uselistorder directives
  uselistorder i32 %v1_143c0, { 2, 1, 0 }
  uselistorder i1 %v9_143b0, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_143e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_143e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_143e4 = load i32, i32* @r4, align 4
  %v6_143e4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_143e8 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_143e8, label %dec_label_pc_1447c, label %dec_label_pc_143f8

dec_label_pc_143f8:                               ; preds = %dec_label_pc_143e4
  %v2_14408 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_1441c = call i32 @function_15070(i32 17, i32 0, i32 %v2_14408)
  %v3_14420 = load i32, i32* %stack_var_-44, align 4
  %v7_14424 = icmp eq i32 %v3_14420, 1
  br i1 %v7_14424, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_143f8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_143f8, %bb
  call void @__pseudo_cond_branch(i1 %v7_14424, i32 ptrtoint (i32* @global_var_12490.550 to i32))
  %v2_14438 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14440 = call i32 @function_155a4(i32 %v2_14438, i32 %v2_14438)
  %v2_14444 = icmp eq i32 %v2_14440, 0
  br i1 %v2_14444, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_14458 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_14458, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_14468 = load i32, i32* %stack_var_-24, align 4
  %v1_1446c = and i32 %v3_14468, 65536
  %v2_1446c = icmp eq i32 %v1_1446c, 0
  br i1 %v2_1446c, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_1446c, i32 ptrtoint (i32* @global_var_12490.550 to i32))
  %v0_1447c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_143e4, %.thread6
  %v0_1447c = phi i32 [ %v0_1447c.pre, %.thread6 ], [ 0, %dec_label_pc_143e4 ]
  store i32 %v3_143e4, i32* @r4, align 4
  store i32 %v6_143e4, i32* @lr, align 4
  ret i32 %v0_1447c

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_15070, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1447c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14490() local_unnamed_addr {
dec_label_pc_14490:
  %stack_var_-36 = alloca i32, align 4
  store i32 131388, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_17dc4.554 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_144b0 = call i32 @function_15ad4(i32 ptrtoint ([11 x i8]* @global_var_17dc4.554 to i32))
  store i32 %v2_144b0, i32* @r6, align 4
  %v2_144b4 = icmp eq i32 %v2_144b0, 0
  br i1 %v2_144b4, label %dec_label_pc_14534, label %dec_label_pc_144bc

dec_label_pc_144bc:                               ; preds = %dec_label_pc_14490
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_17694.24 to i32), i32* @r8, align 4
  %v2_144c8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_144c8, i32* @r7, align 4
  br label %bb18

dec_label_pc_144d0:                               ; preds = %bb18
  %v3_144d0 = load i32, i32* %stack_var_-36, align 4
  %v1_144d4 = inttoptr i32 %v3_144d0 to i32*
  %v2_144d4 = load i32, i32* %v1_144d4, align 4
  %v1_144d8 = inttoptr i32 %v2_144d4 to i8*
  %v2_144d8 = load i8, i8* %v1_144d8, align 1
  %v7_144dc = icmp eq i8 %v2_144d8, 99
  br i1 %v7_144dc, label %dec_label_pc_144e4, label %.backedge3

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144d0
  %v1_144e4 = add i32 %v2_144d4, 1
  %v2_144e4 = inttoptr i32 %v1_144e4 to i8*
  %v3_144e4 = load i8, i8* %v2_144e4, align 1
  %v7_144e8 = icmp eq i8 %v3_144e4, 112
  br i1 %v7_144e8, label %dec_label_pc_144f0, label %.backedge3

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144e4
  %v1_144f0 = add i32 %v2_144d4, 2
  %v2_144f0 = inttoptr i32 %v1_144f0 to i8*
  %v3_144f0 = load i8, i8* %v2_144f0, align 1
  %v7_144f4 = icmp eq i8 %v3_144f0, 117
  br i1 %v7_144f4, label %dec_label_pc_144fc, label %.backedge3

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144f0
  %v1_144fc = add i32 %v2_144d4, 3
  %v2_144fc = inttoptr i32 %v1_144fc to i8*
  %v3_144fc = load i8, i8* %v2_144fc, align 1
  %v4_144fc = zext i8 %v3_144fc to i32
  %v0_14500 = load i32, i32* @r4, align 4
  %v1_14500 = load i32, i32* @sl, align 4
  %v2_14500 = add i32 %v1_14500, %v0_14500
  %v3_14500 = inttoptr i32 %v2_14500 to i32*
  %v4_14500 = load i32, i32* %v3_14500, align 4
  %v2_14504 = mul nuw nsw i32 %v4_144fc, 2
  %v2_14508 = add i32 %v4_14500, %v2_14504
  %v3_14508 = inttoptr i32 %v2_14508 to i16*
  %v4_14508 = load i16, i16* %v3_14508, align 2
  %v1_1450c = and i16 %v4_14508, 8
  %v2_1450c = icmp eq i16 %v1_1450c, 0
  br i1 %v2_1450c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_144fc
  %v1_14510 = load i32, i32* @r5, align 4
  %v2_14510 = add i32 %v1_14510, 1
  store i32 %v2_14510, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_144fc, %dec_label_pc_144d0, %dec_label_pc_144e4, %dec_label_pc_144f0
  %v0_14514.pre = load i32, i32* @r6, align 4
  %v0_14520.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_144bc
  %v0_14520 = phi i32 [ %v0_14520.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_17694.24 to i32), %dec_label_pc_144bc ]
  %v0_14514 = phi i32 [ %v0_14514.pre, %.backedge3 ], [ %v2_144b0, %dec_label_pc_144bc ]
  %v4_14524 = inttoptr i32 %v0_14514 to i32*
  %v5_14524 = call i32 @function_15778(i32* %v4_14524, i32 %v2_144c8, i32 258, i32 %v0_14520)
  %v2_14528 = icmp eq i32 %v5_14524, 0
  br i1 %v2_14528, label %dec_label_pc_14598, label %dec_label_pc_144d0

dec_label_pc_14534:                               ; preds = %dec_label_pc_14490
  store i32 ptrtoint ([14 x i8]* @global_var_17dd0.559 to i32), i32* @r0, align 4
  %v2_1453c = call i32 @function_15ad4(i32 ptrtoint ([14 x i8]* @global_var_17dd0.559 to i32))
  store i32 %v2_1453c, i32* @r6, align 4
  %v2_14540 = icmp eq i32 %v2_1453c, 0
  br i1 %v2_14540, label %bb19, label %dec_label_pc_1454c

bb19:                                             ; preds = %dec_label_pc_14534
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_14598

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14534
  store i32 ptrtoint ([10 x i8]* @global_var_17de0.561 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_17e04.563 to i32), i32* @r7, align 4
  %v2_1455c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1455c, i32* @r4, align 4
  br label %bb21

dec_label_pc_14564:                               ; preds = %bb21
  %v0_14590 = load i32, i32* @r8, align 4
  %v1_14590 = inttoptr i32 %v0_14590 to i8*
  %v3_14564 = load i32, i32* %stack_var_-36, align 4
  %v1_14568 = inttoptr i32 %v3_14564 to i32*
  %v2_14568 = load i32, i32* %v1_14568, align 4
  store i32 %v2_14568, i32* @r1, align 4
  %v4_1456c = call i32 @function_16d80(i8* %v1_14590, i32 %v2_14568)
  %v2_14570 = icmp eq i32 %v4_1456c, 0
  br i1 %v2_14570, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_14564
  %v1_14574 = load i32, i32* @r5, align 4
  %v2_14574 = add i32 %v1_14574, 1
  store i32 %v2_14574, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_14564
  %v0_14580.pre = load i32, i32* @r7, align 4
  %v0_14584.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_1454c
  %v0_14584 = phi i32 [ %v0_14584.pre, %.backedge ], [ %v2_1453c, %dec_label_pc_1454c ]
  %v0_14580 = phi i32 [ %v0_14580.pre, %.backedge ], [ ptrtoint (i32* @global_var_17e04.563 to i32), %dec_label_pc_1454c ]
  %v4_14588 = inttoptr i32 %v0_14584 to i32*
  %v5_14588 = call i32 @function_15778(i32* %v4_14588, i32 %v2_1455c, i32 459266, i32 %v0_14580)
  %v2_1458c = icmp eq i32 %v5_14588, 0
  br i1 %v2_1458c, label %dec_label_pc_14598, label %dec_label_pc_14564

dec_label_pc_14598:                               ; preds = %bb18, %bb21, %bb19
  %v0_14598 = load i32, i32* @r6, align 4
  %v1_1459c = inttoptr i32 %v0_14598 to i32*
  %v2_1459c = call i32 @function_15aa0(i32* %v1_1459c)
  %v0_145a0 = load i32, i32* @r5, align 4
  %v2_145a0 = icmp eq i32 %v0_145a0, 0
  %.v0_145a0 = select i1 %v2_145a0, i32 1, i32 %v0_145a0
  ret i32 %.v0_145a0

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_17694.24 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i32)* @function_15ad4, { 1, 0 }
  uselistorder label %dec_label_pc_14598, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_145dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_145dc:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_149c4

bb:                                               ; preds = %dec_label_pc_145dc
  %v7_145f0 = mul i32 %arg1, 4
  %v8_145f0 = add i32 %v7_145f0, ptrtoint (i32* @global_var_145f8.566 to i32)
  call void @__pseudo_branch(i32 %v8_145f0)
  br label %dec_label_pc_149c4

dec_label_pc_149c4:                               ; preds = %bb, %dec_label_pc_145dc
  %v0_149c4 = call i32 @function_128f0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_149d0 = inttoptr i32 %v0_149c4 to i32*
  store i32 22, i32* %v2_149d0, align 4
  %v0_14b80 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_14b80

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_14bf8() local_unnamed_addr {
dec_label_pc_14c1c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14bf8 = load i32, i32* @r4, align 4
  store i32 %v3_14bf8, i32* %stack_var_-16, align 4
  store i32 131380, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14c1c:                               ; preds = %dec_label_pc_14c1c.dec_label_pc_14c1c_crit_edge, %dec_label_pc_14c1c.lr.ph
  %v1_14c1c = phi i32 [ %v1_14c28, %dec_label_pc_14c1c.dec_label_pc_14c1c_crit_edge ], [ 0, %dec_label_pc_14c1c.lr.ph ]
  %v0_14c1c = phi i32 [ %v0_14c1c.pre, %dec_label_pc_14c1c.dec_label_pc_14c1c_crit_edge ], [ 131380, %dec_label_pc_14c1c.lr.ph ]
  %v4_14c1c = mul i32 %v1_14c1c, 4
  %v5_14c1c = add i32 %v4_14c1c, %v0_14c1c
  %v6_14c1c = inttoptr i32 %v5_14c1c to i32*
  %v7_14c1c = load i32, i32* %v6_14c1c, align 4
  call void @__pseudo_branch(i32 %v7_14c1c)
  %v0_14c28 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c28 = add i32 %v0_14c28, -1
  store i32 %v1_14c28, i32* %r4.global-to-local, align 4
  %v2_14c28 = icmp eq i32 %v0_14c28, 0
  br i1 %v2_14c28, label %dec_label_pc_14c30, label %dec_label_pc_14c1c.dec_label_pc_14c1c_crit_edge

dec_label_pc_14c1c.dec_label_pc_14c1c_crit_edge:  ; preds = %dec_label_pc_14c1c
  %v0_14c1c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c1c

dec_label_pc_14c30:                               ; preds = %dec_label_pc_14c1c
  %v4_14c34 = load i32, i32* @global_var_203ec.579, align 4
  %v2_14c38 = icmp eq i32 %v4_14c34, 0
  br i1 %v2_14c38, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14c30
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14c30, %bb
  %v2_14c40 = xor i1 %v2_14c38, true
  call void @__pseudo_cond_branch(i1 %v2_14c40, i32 %v4_14c34)
  %v4_14c48 = load i32, i32* @global_var_203f0.581, align 4
  %v2_14c4c = icmp eq i32 %v4_14c48, 0
  br i1 %v2_14c4c, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_14c54 = xor i1 %v2_14c4c, true
  call void @__pseudo_cond_branch(i1 %v2_14c54, i32 %v4_14c48)
  %v2_14c58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c58, i32* %r4.global-to-local, align 4
  %v1_14c5c = load i32, i32* @r0, align 4
  ret i32 %v1_14c5c

; uselistorder directives
  uselistorder i32 %v1_14c28, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14c74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c74:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_14c88 = call i32 @function_122fc(i32 %arg1, i32 1)
  %v3_14c90 = icmp eq i32 %v2_14c88, -1
  store i32 131388, i32* @r3, align 4
  br i1 %v3_14c90, label %dec_label_pc_14c9c, label %dec_label_pc_14cb4

dec_label_pc_14c9c:                               ; preds = %dec_label_pc_14c74
  %v0_14ca0 = load i32, i32* %r5.global-to-local, align 4
  %v3_14ca8 = call i32 @function_120d4(i32 ptrtoint ([10 x i8]* @global_var_17e08.584 to i32), i32 %v0_14ca0)
  %v1_14cac = load i32, i32* %r4.global-to-local, align 4
  %v1_14cb0 = icmp ne i32 %v3_14ca8, %v1_14cac
  call void @__pseudo_cond_branch(i1 %v1_14cb0, i32 ptrtoint (i32* @global_var_14204.585 to i32))
  br label %dec_label_pc_14cb4

dec_label_pc_14cb4:                               ; preds = %dec_label_pc_14c74, %dec_label_pc_14c9c
  %v1_14cbc = phi i32 [ %v2_14c88, %dec_label_pc_14c74 ], [ %v3_14ca8, %dec_label_pc_14c9c ]
  ret i32 %v1_14cbc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14cb4, { 1, 0 }
}

define i32 @function_14cc8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14cc8:
  %r4.global-to-local = alloca i32, align 4
  store i32 131388, i32* %r4.global-to-local, align 4
  %v4_14cd8 = load i32, i32* inttoptr (i32 131480 to i32*), align 8
  %v1_14cdc = inttoptr i32 %v4_14cd8 to i32*
  %v2_14cdc = load i32, i32* %v1_14cdc, align 4
  %v2_14ce0 = icmp eq i32 %v2_14cdc, 0
  br i1 %v2_14ce0, label %dec_label_pc_14ce8, label %dec_label_pc_14d1c

dec_label_pc_14ce8:                               ; preds = %dec_label_pc_14cc8
  %v4_14cec = load i32, i32* inttoptr (i32 131440 to i32*), align 16
  %v2_14cf4 = icmp eq i32 %v4_14cec, 0
  store i32 4096, i32* %v1_14cdc, align 4
  br i1 %v2_14cf4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14ce8
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14ce8, %bb
  %v2_14d00 = xor i1 %v2_14cf4, true
  call void @__pseudo_cond_branch(i1 %v2_14d00, i32 %v4_14cec)
  %v0_14d08 = load i32, i32* %r4.global-to-local, align 4
  %v2_14d10 = icmp eq i32 %v0_14d08, 41284
  br i1 %v2_14d10, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_14d18 = xor i1 %v2_14d10, true
  call void @__pseudo_cond_branch(i1 %v2_14d18, i32 ptrtoint (i32* @global_var_15ff8.590 to i32))
  br label %dec_label_pc_14d1c

dec_label_pc_14d1c:                               ; preds = %dec_label_pc_14cc8, %bb6
  %v1_14d20 = load i32, i32* @r0, align 4
  ret i32 %v1_14d20

; uselistorder directives
  uselistorder i1 %v2_14d10, { 1, 0 }
  uselistorder label %dec_label_pc_14d1c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_14d34(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14d34:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_14d3c = add i32 %tmp, 4
  store i32 %v1_14d3c, i32* %ip.global-to-local, align 4
  %v2_14d40 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 131388, i32* @r6, align 4
  %v3_14d4c = mul i32 %arg2, 4
  store i32 %v3_14d4c, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_14d54 = load i32, i32* inttoptr (i32 131408 to i32*), align 16
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_14d5c = ptrtoint i32* %stack_var_-120 to i32
  %v4_14d60 = load i32, i32* inttoptr (i32 131416 to i32*), align 8
  store i32 %v4_14d60, i32* %r4.global-to-local, align 4
  %v2_14d68 = add i32 %v1_14d3c, %v3_14d4c
  store i32 %v2_14d68, i32* %ip.global-to-local, align 4
  %v9_14d6c = icmp eq i32 %v2_14d68, %v2_14d40
  store i1 %v9_14d6c, i1* %cpsr_z.global-to-local, align 1
  %v2_14d70 = inttoptr i32 %v4_14d54 to i32*
  store i32 %arg7, i32* %v2_14d70, align 4
  store i32 692, i32* %r2.global-to-local, align 4
  %v0_14d7c = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_14d6c, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_14d34
  %v1_14d80 = load i32, i32* @r7, align 4
  %v2_14d80 = load i32, i32* %r5.global-to-local, align 4
  %v3_14d80 = add i32 %v2_14d80, %v1_14d80
  store i32 %v3_14d80, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_203f0.581, align 4
  %v0_14d88 = load i32, i32* %ip.global-to-local, align 4
  %v1_14d88 = load i32, i32* %r4.global-to-local, align 4
  %v2_14d88 = inttoptr i32 %v1_14d88 to i32*
  store i32 %v0_14d88, i32* %v2_14d88, align 4
  store i32 120, i32* @r2, align 4
  %v1_14d94 = load i32, i32* %r3.global-to-local, align 4
  %v2_14d94 = load i32, i32* %r4.global-to-local, align 4
  %v3_14d94 = inttoptr i32 %v2_14d94 to i32*
  store i32 %v1_14d94, i32* %v3_14d94, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_14d34
  store i32 %arg6, i32* @global_var_203f0.581, align 4
  %v0_14d88.c = load i32, i32* %ip.global-to-local, align 4
  %v1_14d88.c = load i32, i32* %r4.global-to-local, align 4
  %v2_14d88.c = inttoptr i32 %v1_14d88.c to i32*
  store i32 %v0_14d88.c, i32* %v2_14d88.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  store i32 %v2_14d5c, i32* %r0.global-to-local, align 4
  %v2_14da0 = bitcast i32* %stack_var_-120 to i8*
  %v3_14da0 = call i32 @function_12940(i8* %v2_14da0, i32 0)
  store i32 %v3_14da0, i32* %r0.global-to-local, align 4
  %v0_14da4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14da4 = inttoptr i32 %v0_14da4 to i32*
  %storemerge.pre = load i32, i32* %v1_14da4, align 4
  br label %dec_label_pc_14db0

dec_label_pc_14db0:                               ; preds = %dec_label_pc_14db0, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_14db0, %dec_label_pc_14db0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_14db0 = inttoptr i32 %storemerge to i32*
  %v2_14db0 = load i32, i32* %v1_14db0, align 4
  store i32 %v2_14db0, i32* %r3.global-to-local, align 4
  %v4_14db0 = add i32 %storemerge, 4
  store i32 %v4_14db0, i32* %r2.global-to-local, align 4
  %v2_14db4 = icmp eq i32 %v2_14db0, 0
  br i1 %v2_14db4, label %dec_label_pc_14dc0, label %dec_label_pc_14db0

dec_label_pc_14dc0:                               ; preds = %dec_label_pc_14db0
  store i32 %v4_14db0, i32* @r4, align 4
  store i32 %v2_14d5c, i32* @r5, align 4
  %v1_14de429 = inttoptr i32 %v4_14db0 to i32*
  %v2_14de430 = load i32, i32* %v1_14de429, align 4
  store i32 %v2_14de430, i32* %r3.global-to-local, align 4
  %v2_14de832 = icmp eq i32 %v2_14de430, 0
  store i1 %v2_14de832, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14de832, label %dec_label_pc_14df0, label %dec_label_pc_14dcc

dec_label_pc_14dcc:                               ; preds = %dec_label_pc_14dc0, %dec_label_pc_14de4
  %v5_14dd0 = phi i32 [ %v2_14de4, %dec_label_pc_14de4 ], [ %v2_14de430, %dec_label_pc_14dc0 ]
  %v2_14dcc = icmp ugt i32 %v5_14dd0, 13
  %v7_14dcc = icmp eq i32 %v5_14dd0, 14
  store i1 %v7_14dcc, i1* %cpsr_z.global-to-local, align 1
  %v2_14dd0 = xor i1 %v2_14dcc, true
  %v3_14dd0 = or i1 %v7_14dcc, %v2_14dd0
  br i1 %v3_14dd0, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_14dcc
  %v4_14dd0 = load i32, i32* @r5, align 4
  %v6_14dd0 = and i32 %v5_14dd0, 536870912
  %v7_14dd0 = icmp ne i32 %v6_14dd0, 0
  %v8_14dd0 = mul i32 %v5_14dd0, 8
  %v9_14dd0 = add i32 %v4_14dd0, %v8_14dd0
  store i32 %v9_14dd0, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_14dcc, %bb58
  %v1_14ddc = phi i1 [ %v2_14dcc, %dec_label_pc_14dcc ], [ %v7_14dd0, %bb58 ]
  %v2_14dd4 = xor i1 %v1_14ddc, true
  %v3_14dd4 = or i1 %v7_14dcc, %v2_14dd4
  br i1 %v3_14dd4, label %bb60, label %dec_label_pc_14de4

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14de4

dec_label_pc_14de4:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_14dd4, i32 ptrtoint (i32* @global_var_129f0.595 to i32))
  %v0_14de0 = load i32, i32* @r4, align 4
  %v1_14de0 = add i32 %v0_14de0, 8
  store i32 %v1_14de0, i32* @r4, align 4
  %v1_14de4 = inttoptr i32 %v1_14de0 to i32*
  %v2_14de4 = load i32, i32* %v1_14de4, align 4
  store i32 %v2_14de4, i32* %r3.global-to-local, align 4
  %v2_14de8 = icmp eq i32 %v2_14de4, 0
  store i1 %v2_14de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14de8, label %dec_label_pc_14df0, label %dec_label_pc_14dcc

dec_label_pc_14df0:                               ; preds = %dec_label_pc_14de4, %dec_label_pc_14dc0
  store i32 %v2_14d5c, i32* %r0.global-to-local, align 4
  %v1_14df4 = call i32 @function_171f4(i32 %v2_14d5c)
  store i32 %v1_14df4, i32* @r0, align 4
  %v1_14df8 = call i32 @function_14cc8(i32 %v1_14df4)
  store i32 %v1_14df8, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_14e04 = load i32, i32* @r6, align 4
  %v2_14e04 = add i32 %v0_14e04, 92
  %v3_14e04 = inttoptr i32 %v2_14e04 to i32*
  %v4_14e04 = load i32, i32* %v3_14e04, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_14e0c = icmp eq i32 %tmp53, 0
  store i1 %v2_14e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e0c, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_14df0
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_14df0, %bb61
  %v0_14e18 = phi i32 [ %tmp53, %dec_label_pc_14df0 ], [ 4096, %bb61 ]
  %v3_14e14 = icmp eq i32 %tmp52, -1
  %v8_14e14 = icmp eq i32 %tmp52, -1
  store i1 %v8_14e14, i1* %cpsr_z.global-to-local, align 1
  %v2_14e18 = inttoptr i32 %v4_14e04 to i32*
  store i32 %v0_14e18, i32* %v2_14e18, align 4
  br i1 %v3_14e14, label %dec_label_pc_14e20, label %dec_label_pc_14e48

dec_label_pc_14e20:                               ; preds = %bb62
  %v0_14e20 = call i32 @function_15138()
  store i32 %v0_14e20, i32* @r0, align 4
  store i32 %v0_14e20, i32* @r4, align 4
  %v0_14e28 = call i32 @function_15194()
  store i32 %v0_14e28, i32* @r0, align 4
  %v0_14e2c = load i32, i32* @r4, align 4
  %v9_14e2c = icmp eq i32 %v0_14e2c, %v0_14e28
  store i1 %v9_14e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e2c, label %dec_label_pc_14e34, label %dec_label_pc_14e70

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e20
  %v1_14e34 = call i32 @function_15300(i32 %v0_14e28)
  store i32 %v1_14e34, i32* @r0, align 4
  store i32 %v1_14e34, i32* @r4, align 4
  %v0_14e3c = call i32 @function_15180()
  store i32 %v0_14e3c, i32* @r0, align 4
  %v0_14e40 = load i32, i32* @r4, align 4
  %v9_14e40 = icmp eq i32 %v0_14e40, %v0_14e3c
  store i1 %v9_14e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e40, label %dec_label_pc_14e48, label %dec_label_pc_14e70

dec_label_pc_14e48:                               ; preds = %dec_label_pc_14e34, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_14e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14e14, label %dec_label_pc_14e94, label %dec_label_pc_14e54

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e48
  store i32 %tmp51, i32* @r3, align 4
  %v9_14e58 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_14e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e58, label %dec_label_pc_14e60, label %dec_label_pc_14e70

dec_label_pc_14e60:                               ; preds = %dec_label_pc_14e54
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_14e68 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_14e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e68, label %dec_label_pc_14e94, label %dec_label_pc_14e70

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14e54, %dec_label_pc_14e34, %dec_label_pc_14e20, %dec_label_pc_14e60
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_14e78 = call i32 @function_14c74(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14e84 = call i32 @function_14c74(i32 1, i32 32770)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_14e90 = call i32 @function_14c74(i32 2, i32 32770)
  store i32 %v2_14e90, i32* @r0, align 4
  br label %dec_label_pc_14e94

dec_label_pc_14e94:                               ; preds = %dec_label_pc_14e60, %dec_label_pc_14e48, %dec_label_pc_14e70
  %v0_14e94 = load i32, i32* @r7, align 4
  %v1_14e94 = inttoptr i32 %v0_14e94 to i32*
  %v2_14e94 = load i32, i32* %v1_14e94, align 4
  store i32 %v2_14e94, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_14e9c = load i32, i32* @r6, align 4
  %v3_14e9c = add i32 %v1_14e9c, 208
  %v4_14e9c = inttoptr i32 %v3_14e9c to i32*
  store i32 %v2_14e94, i32* %v4_14e9c, align 4
  %v0_14ea0 = load i32, i32* @r7, align 4
  %v1_14ea0 = inttoptr i32 %v0_14ea0 to i32*
  %v2_14ea0 = load i32, i32* %v1_14ea0, align 4
  store i32 %v2_14ea0, i32* @r4, align 4
  %v2_14ea4 = icmp eq i32 %v2_14ea0, 0
  store i1 %v2_14ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ea4, label %dec_label_pc_14f48.lr.ph, label %dec_label_pc_14eac

dec_label_pc_14eac:                               ; preds = %dec_label_pc_14e94
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_14eb0 = load i32, i32* @r6, align 4
  %v2_14eb0 = add i32 %v0_14eb0, 112
  %v3_14eb0 = inttoptr i32 %v2_14eb0 to i32*
  %v4_14eb0 = load i32, i32* %v3_14eb0, align 4
  store i32 %v4_14eb0, i32* %r3.global-to-local, align 4
  %v2_14eb4 = inttoptr i32 %v4_14eb0 to i32*
  store i32 %v2_14ea0, i32* %v2_14eb4, align 4
  %v0_14ebc = load i32, i32* @r7, align 4
  %v1_14ebc = inttoptr i32 %v0_14ebc to i32*
  %v2_14ebc = load i32, i32* %v1_14ebc, align 4
  store i32 %v2_14ebc, i32* %r0.global-to-local, align 4
  %v4_14ec0 = call i32 @function_16e30(i32 %v2_14ebc, i32 47, i32 %v2_14e94, i32 %v4_14eb0)
  store i32 %v4_14ec0, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_14ec8 = icmp eq i32 %v4_14ec0, 0
  store i1 %v2_14ec8, i1* %cpsr_z.global-to-local, align 1
  %v0_14ecc = load i32, i32* @r6, align 4
  %v2_14ecc = add i32 %v0_14ecc, 60
  %v3_14ecc = inttoptr i32 %v2_14ecc to i32*
  %v4_14ecc = load i32, i32* %v3_14ecc, align 4
  store i32 %v4_14ecc, i32* %r2.global-to-local, align 4
  br i1 %v2_14ec8, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_14eac
  %v2_14ed447 = inttoptr i32 %v4_14ecc to i32*
  store i32 0, i32* %v2_14ed447, align 4
  br label %dec_label_pc_14f48.lr.ph

bb63:                                             ; preds = %dec_label_pc_14eac
  %v2_14ed0 = add i32 %v4_14ec0, 1
  store i32 %v2_14ed0, i32* %r3.global-to-local, align 4
  %v2_14ed4 = inttoptr i32 %v4_14ecc to i32*
  store i32 %v4_14ec0, i32* %v2_14ed4, align 4
  %v1_14ed8 = load i32, i32* %r3.global-to-local, align 4
  %v2_14ed8 = load i32, i32* %r2.global-to-local, align 4
  %v3_14ed8 = inttoptr i32 %v2_14ed8 to i32*
  store i32 %v1_14ed8, i32* %v3_14ed8, align 4
  br label %dec_label_pc_14f48.lr.ph

dec_label_pc_14f48.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_14e94
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_14ef0 = load i32, i32* @r6, align 4
  %v2_14ef0 = add i32 %v0_14ef0, -12
  store i32 %v2_14ef0, i32* %r8.global-to-local, align 4
  store i32 688, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_203ec.579, align 4
  %v2_14f20 = icmp eq i32 %v0_14d7c, 0
  store i1 %v2_14f20, i1* %cpsr_z.global-to-local, align 1
  %v2_14f28 = xor i1 %v2_14f20, true
  call void @__pseudo_cond_branch(i1 %v2_14f28, i32 %v0_14d7c)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_14f3c = load i32, i32* @r6, align 4
  %v2_14f3c = add i32 %v0_14f3c, -12
  store i32 %v2_14f3c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14f48

dec_label_pc_14f48:                               ; preds = %dec_label_pc_14f48.dec_label_pc_14f48_crit_edge, %dec_label_pc_14f48.lr.ph
  %v1_14f48 = phi i32 [ %v1_14f54, %dec_label_pc_14f48.dec_label_pc_14f48_crit_edge ], [ 0, %dec_label_pc_14f48.lr.ph ]
  %v0_14f48 = phi i32 [ %v0_14f48.pre, %dec_label_pc_14f48.dec_label_pc_14f48_crit_edge ], [ %v2_14f3c, %dec_label_pc_14f48.lr.ph ]
  %v4_14f48 = mul i32 %v1_14f48, 4
  %v5_14f48 = add i32 %v4_14f48, %v0_14f48
  %v6_14f48 = inttoptr i32 %v5_14f48 to i32*
  %v7_14f48 = load i32, i32* %v6_14f48, align 4
  store i32 %v7_14f48, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14f48)
  %v0_14f54 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f54 = add i32 %v0_14f54, 1
  store i32 %v1_14f54, i32* %r4.global-to-local, align 4
  %v1_14f58 = load i32, i32* %r5.global-to-local, align 4
  %v3_14f58 = icmp ult i32 %v1_14f54, %v1_14f58
  %v9_14f58 = icmp eq i32 %v1_14f54, %v1_14f58
  store i1 %v9_14f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14f58, label %dec_label_pc_14f48.dec_label_pc_14f48_crit_edge, label %dec_label_pc_14f60

dec_label_pc_14f48.dec_label_pc_14f48_crit_edge:  ; preds = %dec_label_pc_14f48
  %v0_14f48.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14f48

dec_label_pc_14f60:                               ; preds = %dec_label_pc_14f48
  %v0_14f64.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_14f64 = add i32 %v0_14f64.pre, 104
  %v3_14f64 = inttoptr i32 %v2_14f64 to i32*
  %v4_14f64 = load i32, i32* %v3_14f64, align 4
  store i32 %v4_14f64, i32* %r2.global-to-local, align 4
  store i32 %v4_14f64, i32* %r3.global-to-local, align 4
  %v2_14f6c = icmp eq i32 %v4_14f64, 0
  store i1 %v2_14f6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14f6c, label %dec_label_pc_14f84, label %dec_label_pc_14f74

dec_label_pc_14f74:                               ; preds = %dec_label_pc_14f60
  call void @__pseudo_branch(i32 %v4_14f64)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14f80 = load i32, i32* @r0, align 4
  %v2_14f80 = inttoptr i32 %v1_14f80 to i32*
  store i32 0, i32* %v2_14f80, align 4
  %v0_14f88.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14f84

dec_label_pc_14f84:                               ; preds = %dec_label_pc_14f60, %dec_label_pc_14f74
  %v0_14f88 = phi i32 [ %v0_14f64.pre, %dec_label_pc_14f60 ], [ %v0_14f88.pre, %dec_label_pc_14f74 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_14f88 = add i32 %v0_14f88, 80
  %v3_14f88 = inttoptr i32 %v2_14f88 to i32*
  %v4_14f88 = load i32, i32* %v3_14f88, align 4
  store i32 %v4_14f88, i32* %r2.global-to-local, align 4
  store i32 %v4_14f88, i32* %r3.global-to-local, align 4
  %v2_14f90 = icmp eq i32 %v4_14f88, 0
  store i1 %v2_14f90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14f90, label %dec_label_pc_14fa8, label %dec_label_pc_14f98

dec_label_pc_14f98:                               ; preds = %dec_label_pc_14f84
  call void @__pseudo_branch(i32 %v4_14f88)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14fa4 = load i32, i32* @r0, align 4
  %v2_14fa4 = inttoptr i32 %v1_14fa4 to i32*
  store i32 0, i32* %v2_14fa4, align 4
  %v0_14fac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14fa8

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f84, %dec_label_pc_14f98
  %v0_14fac = phi i32 [ %v0_14f88, %dec_label_pc_14f84 ], [ %v0_14fac.pre, %dec_label_pc_14f98 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_14fac = add i32 %v0_14fac, 28
  %v3_14fac = inttoptr i32 %v2_14fac to i32*
  %v4_14fac = load i32, i32* %v3_14fac, align 4
  store i32 %v4_14fac, i32* %r3.global-to-local, align 4
  %v1_14fb4 = inttoptr i32 %v4_14fac to i32*
  %v2_14fb4 = load i32, i32* %v1_14fb4, align 4
  store i32 %v2_14fb4, i32* %r2.global-to-local, align 4
  %v0_14fb8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_14fb8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14fc4 = call i32 @function_1432c(i32 %v0_14fb8)
  store i32 %v1_14fc4, i32* %r0.global-to-local, align 4
  %v0_14fc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14fc8, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_14fa8
  %v2_14fc8 = load i32, i32* %ip.global-to-local, align 4
  %v2_14fcc = load i32, i32* %r4.global-to-local, align 4
  %v8_14fcc = shl i32 %v2_14fcc, %v1_14fc4
  %v9_14fcc = and i32 %v8_14fcc, %v1_14fc4
  %v8_14fd0 = shl i32 %v2_14fc8, %v9_14fcc
  %v9_14fd0 = and i32 %v8_14fd0, %v9_14fcc
  store i32 %v9_14fd0, i32* %r0.global-to-local, align 4
  %v2_14fd4 = trunc i32 %v9_14fd0 to i16
  %v4_14fd4 = inttoptr i32 %v9_14fd0 to i16*
  store i16 %v2_14fd4, i16* %v4_14fd4, align 2
  %v5_14fd4 = load i32, i32* %r4.global-to-local, align 4
  %v6_14fd4 = load i32, i32* %r0.global-to-local, align 4
  %v7_14fd4 = sub i32 %v6_14fd4, %v5_14fd4
  %v2_14fd8 = load i32, i32* %ip.global-to-local, align 4
  %v8_14fd8 = ashr i32 %v2_14fd8, %v7_14fd4
  %v9_14fd8 = and i32 %v8_14fd8, %v7_14fd4
  %v2_14fdc = load i32, i32* %r2.global-to-local, align 4
  %v3_14fdc = and i32 %v9_14fd8, %v2_14fdc
  store i32 %v3_14fdc, i32* %r8.global-to-local, align 4
  %v2_14fe0 = inttoptr i32 %v9_14fd8 to i64*
  %v3_14fe0 = load i64, i64* %v2_14fe0, align 4
  %v6_14fe0 = udiv i64 %v3_14fe0, 4294967296
  %v7_14fe0 = trunc i64 %v6_14fe0 to i32
  %v9_14fe0 = sub i32 %v7_14fe0, %v9_14fd8
  %v5_14fe4 = sub i32 32, %v9_14fe0
  %v6_14fe4 = shl i32 %v9_14fe0, %v5_14fe4
  %v9_14fe4 = and i32 %v6_14fe4, %v9_14fe0
  %v8_14fe8 = lshr i32 %v2_14fd8, %v9_14fe4
  %v9_14fe8 = and i32 %v8_14fe8, %v9_14fe4
  store i32 %v9_14fe8, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14fa8, %bb64
  %v10_14fe8 = phi i32 [ %v1_14fc4, %dec_label_pc_14fa8 ], [ %v9_14fe8, %bb64 ]
  ret i32 %v10_14fe8

; uselistorder directives
  uselistorder i32 %v9_14fd8, { 2, 1, 0 }
  uselistorder i32 %v9_14fd0, { 1, 0, 2 }
  uselistorder i32 %v1_14fc4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14f64.pre, { 1, 0 }
  uselistorder i32 %v1_14f58, { 1, 0 }
  uselistorder i32 %v1_14f54, { 3, 2, 1, 0 }
  uselistorder i32 %v4_14ecc, { 1, 0, 2 }
  uselistorder i1 %v8_14e14, { 1, 2, 0 }
  uselistorder i32 %v2_14de4, { 1, 2, 0 }
  uselistorder i1 %v2_14dcc, { 1, 0 }
  uselistorder i32 %v5_14dd0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14db0, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_14d7c, { 1, 0 }
  uselistorder i32 %v2_14d5c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_14d4c, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 0, 5, 7, 6, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 2, 13, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_1432c, { 0, 3, 2, 6, 5, 4, 1 }
  uselistorder i32 47, { 0, 6, 7, 8, 2, 9, 3, 10, 1, 11, 12, 4, 13, 5 }
  uselistorder i32 (i32, i32)* @function_14c74, { 2, 1, 0 }
  uselistorder i32 536870912, { 2, 0, 1, 3 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14fa8, { 1, 0 }
  uselistorder label %dec_label_pc_14f84, { 1, 0 }
  uselistorder label %dec_label_pc_14f48.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14e94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14e70, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_14de4, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_14dcc, { 1, 0 }
}

define i32 @function_15008(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_15008:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15008 = load i32, i32* @r4, align 4
  store i32 %v3_15008, i32* %stack_var_-16, align 4
  %v3_15014 = urem i32 %arg3, 4096
  %v2_15018 = icmp eq i32 %v3_15014, 0
  br i1 %v2_15018, label %dec_label_pc_15034, label %dec_label_pc_15020

dec_label_pc_15020:                               ; preds = %dec_label_pc_15008
  %v0_15020 = call i32 @function_128f0()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1502c = inttoptr i32 %v0_15020 to i32*
  store i32 22, i32* %v2_1502c, align 4
  %v0_15064.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15064

dec_label_pc_15034:                               ; preds = %dec_label_pc_15008
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15060, label %dec_label_pc_15050

dec_label_pc_15050:                               ; preds = %dec_label_pc_15034
  %v0_15050 = call i32 @function_128f0()
  %v0_15054 = load i32, i32* %r4.global-to-local, align 4
  %v1_15054 = sub i32 0, %v0_15054
  %v2_15058 = inttoptr i32 %v0_15050 to i32*
  store i32 %v1_15054, i32* %v2_15058, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15060

dec_label_pc_15060:                               ; preds = %dec_label_pc_15034, %dec_label_pc_15050
  %v0_15060 = phi i32 [ %arg1, %dec_label_pc_15034 ], [ -1, %dec_label_pc_15050 ]
  store i32 %v0_15060, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15064

dec_label_pc_15064:                               ; preds = %dec_label_pc_15020, %dec_label_pc_15060
  %v0_15064 = phi i32 [ %v0_15064.pre, %dec_label_pc_15020 ], [ %v0_15060, %dec_label_pc_15060 ]
  %v2_15068 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15068, i32* @r4, align 4
  ret i32 %v0_15064

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15064, { 1, 0 }
  uselistorder label %dec_label_pc_15060, { 1, 0 }
}

define i32 @function_15070(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15070:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15070 = load i32, i32* @r4, align 4
  %v6_15070 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_15078 = icmp eq i32 %arg2, 0
  store i32 131388, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_15078, label %dec_label_pc_150cc, label %dec_label_pc_15090

dec_label_pc_15090:                               ; preds = %dec_label_pc_15070
  %v1_15090 = add i32 %arg2, 4
  %v2_15090 = inttoptr i32 %v1_15090 to i32*
  %v3_15090 = load i32, i32* %v2_15090, align 4
  store i32 %v3_15090, i32* @r3, align 4
  %v1_15094 = and i32 %v3_15090, 67108864
  %v2_15094 = icmp eq i32 %v1_15094, 0
  br i1 %v2_15094, label %dec_label_pc_1509c, label %dec_label_pc_150cc

dec_label_pc_1509c:                               ; preds = %dec_label_pc_15090
  store i32 20, i32* @r2, align 4
  %v2_150a0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_150a0, i32* @r0, align 4
  %v0_150a4 = call i32 @function_129f0()
  store i32 %v2_150a0, i32* @ip, align 4
  %v0_150cc.pre = load i32, i32* @r5, align 4
  %v0_150d4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %dec_label_pc_15090, %dec_label_pc_15070, %dec_label_pc_1509c
  %v0_150d4 = phi i32 [ %arg3, %dec_label_pc_15090 ], [ %arg3, %dec_label_pc_15070 ], [ %v0_150d4.pre, %dec_label_pc_1509c ]
  %v0_150d0 = phi i32 [ %arg2, %dec_label_pc_15090 ], [ 0, %dec_label_pc_15070 ], [ %v2_150a0, %dec_label_pc_1509c ]
  %v0_150cc = phi i32 [ %arg1, %dec_label_pc_15090 ], [ %arg1, %dec_label_pc_15070 ], [ %v0_150cc.pre, %dec_label_pc_1509c ]
  %v4_150dc = call i32 @function_1562c(i32 %v0_150cc, i32 %v0_150d0, i32 %v0_150d4, i32 8)
  store i32 %v3_15070, i32* @r4, align 4
  store i32 %v6_15070, i32* @r5, align 4
  ret i32 %v4_150dc

; uselistorder directives
  uselistorder label %dec_label_pc_150cc, { 2, 0, 1 }
}

define i32 @function_150f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_150f0:
  %v0_150f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_150f0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_150f0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_150f0, %bb
  %v0_15104 = phi i32 [ %arg1, %dec_label_pc_150f0 ], [ 0, %bb ]
  ret i32 %v0_15104

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15110() local_unnamed_addr {
dec_label_pc_15110:
  %v4_1511c = load i32, i32* inttoptr (i32 131480 to i32*), align 8
  %v1_15120 = inttoptr i32 %v4_1511c to i32*
  %v2_15120 = load i32, i32* %v1_15120, align 4
  %v2_15124 = icmp eq i32 %v2_15120, 0
  br i1 %v2_15124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_15110
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_15110, %bb
  %v1_1512c = phi i32 [ %v2_15120, %dec_label_pc_15110 ], [ 4096, %bb ]
  ret i32 %v1_1512c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_15138() local_unnamed_addr {
dec_label_pc_15138:
  %v1_15148 = load i32, i32* @r0, align 4
  ret i32 %v1_15148
}

define i32 @function_1514c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1514c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1514c = load i32, i32* @r7, align 4
  store i32 %v3_1514c, i32* %stack_var_-8, align 4
  %v0_15158 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15158, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15158, -4095
  br i1 %tmp, label %dec_label_pc_15178, label %dec_label_pc_15168

dec_label_pc_15168:                               ; preds = %dec_label_pc_1514c
  %v0_15168 = call i32 @function_128f0()
  %v0_1516c = load i32, i32* %r7.global-to-local, align 4
  %v1_1516c = sub i32 0, %v0_1516c
  %v2_15170 = inttoptr i32 %v0_15168 to i32*
  store i32 %v1_1516c, i32* %v2_15170, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15178.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_1514c, %dec_label_pc_15168
  %v1_1517c = phi i32 [ %v0_15158, %dec_label_pc_1514c ], [ -1, %dec_label_pc_15168 ]
  %v2_15178 = phi i32 [ %v3_1514c, %dec_label_pc_1514c ], [ %v2_15178.pre, %dec_label_pc_15168 ]
  store i32 %v2_15178, i32* %r7.global-to-local, align 4
  ret i32 %v1_1517c

; uselistorder directives
  uselistorder i32 %v0_15158, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15178, { 1, 0 }
}

define i32 @function_15180() local_unnamed_addr {
dec_label_pc_15180:
  %v1_15190 = load i32, i32* @r0, align 4
  ret i32 %v1_15190
}

define i32 @function_15194() local_unnamed_addr {
dec_label_pc_15194:
  %v1_151a4 = load i32, i32* @r0, align 4
  ret i32 %v1_151a4
}

define i32 @function_151a8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_151a8:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_151a8 = load i32, i32* @r5, align 4
  %v18_151a8 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151d8, label %dec_label_pc_151c4

dec_label_pc_151c4:                               ; preds = %dec_label_pc_151a8
  %v0_151c4 = call i32 @function_128f0()
  %v0_151c8 = load i32, i32* @r5, align 4
  %v1_151c8 = sub i32 0, %v0_151c8
  store i32 %v1_151c8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_151d0 = inttoptr i32 %v0_151c4 to i32*
  store i32 %v1_151c8, i32* %v2_151d0, align 4
  br label %dec_label_pc_1522c

dec_label_pc_151d8:                               ; preds = %dec_label_pc_151a8
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_151d8
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_151e0 = add i32 %arg2, %arg1
  store i32 %v3_151e0, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_151d8, %bb
  %v1_1521c4 = phi i32 [ %v18_151a8, %dec_label_pc_151d8 ], [ %v3_151e0, %bb ]
  %v0_152182 = phi i32 [ 141, %dec_label_pc_151d8 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_1522c, label %dec_label_pc_15218

dec_label_pc_151ec:                               ; preds = %dec_label_pc_15218
  %v1_151ec = add i32 %v0_151ec, 8
  %v2_151ec = inttoptr i32 %v1_151ec to i16*
  %v3_151ec = load i16, i16* %v2_151ec, align 2
  %v4_151ec = zext i16 %v3_151ec to i32
  %v2_151f0 = add i32 %v4_151ec, %v0_151ec
  store i32 %v2_151f0, i32* %r3.global-to-local, align 4
  %v1_151f4 = add i32 %v2_151f0, -1
  %v2_151f4 = inttoptr i32 %v1_151f4 to i8*
  %v3_151f4 = load i8, i8* %v2_151f4, align 1
  %v4_151f4 = zext i8 %v3_151f4 to i32
  store i32 %v4_151f4, i32* @r4, align 4
  %v1_151f8 = call i32 @function_16d20(i32 %v1_15218)
  %v0_151fc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_151fc, i32* @r1, align 4
  %v1_15200 = add i32 %v1_151f8, 1
  store i32 %v1_15200, i32* @r2, align 4
  %v0_15204 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15204, i32* @r0, align 4
  %v3_15208 = call i32 @function_129e0(i32 %v0_15204, i32 %v0_151fc, i32 %v1_15200)
  %v0_1520c = load i32, i32* %r7.global-to-local, align 4
  %v1_1520c = add i32 %v0_1520c, 8
  %v2_1520c = inttoptr i32 %v1_1520c to i16*
  %v3_1520c = load i16, i16* %v2_1520c, align 2
  %v4_1520c = zext i16 %v3_1520c to i32
  store i32 %v4_1520c, i32* %r3.global-to-local, align 4
  %v0_15210 = load i32, i32* @r4, align 4
  %v1_15210 = trunc i32 %v0_15210 to i8
  %v3_15210 = add i32 %v0_1520c, 10
  %v4_15210 = inttoptr i32 %v3_15210 to i8*
  store i8 %v1_15210, i8* %v4_15210, align 1
  %v0_15214 = load i32, i32* %r7.global-to-local, align 4
  %v1_15214 = load i32, i32* %r3.global-to-local, align 4
  %v2_15214 = add i32 %v1_15214, %v0_15214
  store i32 %v2_15214, i32* %r7.global-to-local, align 4
  %v1_1521c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_15218

dec_label_pc_15218:                               ; preds = %.thread, %dec_label_pc_151ec
  %v1_1521c = phi i32 [ %v1_1521c.pre, %dec_label_pc_151ec ], [ %v1_1521c4, %.thread ]
  %v0_151ec = phi i32 [ %v2_15214, %dec_label_pc_151ec ], [ %v0_152182, %.thread ]
  %v1_15218 = add i32 %v0_151ec, 10
  store i32 %v1_15218, i32* %r6.global-to-local, align 4
  %v3_1521c = icmp ult i32 %v0_151ec, %v1_1521c
  %v1_15224 = add i32 %v0_151ec, 11
  store i32 %v1_15224, i32* %r8.global-to-local, align 4
  br i1 %v3_1521c, label %dec_label_pc_151ec, label %dec_label_pc_1522c

dec_label_pc_1522c:                               ; preds = %dec_label_pc_15218, %.thread, %dec_label_pc_151c4
  %v0_1522c = load i32, i32* @r5, align 4
  store i32 %v6_151a8, i32* @r5, align 4
  store i32 %v18_151a8, i32* @sl, align 4
  ret i32 %v0_1522c

; uselistorder directives
  uselistorder i32 %v1_15218, { 1, 0 }
  uselistorder i32 %v0_151ec, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_151a8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_129e0, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15218, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1523c() local_unnamed_addr {
dec_label_pc_1523c:
  %r7.global-to-local = alloca i32, align 4
  %v0_15244 = load i32, i32* @r1, align 4
  store i32 %v0_15244, i32* @r3, align 4
  %v0_15254 = load i32, i32* @r0, align 4
  store i32 %v0_15254, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15254, -4095
  br i1 %tmp, label %dec_label_pc_15274, label %dec_label_pc_15260

dec_label_pc_15260:                               ; preds = %dec_label_pc_1523c
  %v0_15260 = call i32 @function_128f0()
  %v0_15264 = load i32, i32* %r7.global-to-local, align 4
  %v1_15264 = sub i32 0, %v0_15264
  store i32 %v1_15264, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1526c = inttoptr i32 %v0_15260 to i32*
  store i32 %v1_15264, i32* %v2_1526c, align 4
  br label %dec_label_pc_15284

dec_label_pc_15274:                               ; preds = %dec_label_pc_1523c
  %v2_15274 = icmp eq i32 %v0_15254, 0
  br i1 %v2_15274, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15274
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15274, %bb
  call void @__pseudo_cond_branch(i1 %v2_15274, i32 ptrtoint (i32* @global_var_1548c.614 to i32))
  br label %dec_label_pc_15284

dec_label_pc_15284:                               ; preds = %dec_label_pc_15260, %.thread
  %v0_15284 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_15284

; uselistorder directives
  uselistorder i32 %v0_15254, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15284, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15294(i32 %arg1) local_unnamed_addr {
dec_label_pc_15294:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15294 = load i32, i32* @r4, align 4
  store i32 %v3_15294, i32* %stack_var_-16, align 4
  store i32 131388, i32* %r4.global-to-local, align 4
  %v4_152a4 = load i32, i32* @global_var_22404.617, align 4
  %v2_152a8 = icmp eq i32 %v4_152a4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_152a8, label %dec_label_pc_152b4, label %dec_label_pc_152c4

dec_label_pc_152b4:                               ; preds = %dec_label_pc_15294
  %v1_152b8 = call i32 @function_1722c(i32 0)
  %v1_152bc = icmp slt i32 %v1_152b8, 0
  br i1 %v1_152bc, label %dec_label_pc_152e8, label %dec_label_pc_152c4thread-pre-split

dec_label_pc_152c4thread-pre-split:               ; preds = %dec_label_pc_152b4
  %v0_152c8.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_152c4.pre = load i32, i32* @global_var_22404.617, align 4
  br label %dec_label_pc_152c4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152c4thread-pre-split, %dec_label_pc_15294
  %v0_152d4 = phi i32 [ %v4_152c4.pre, %dec_label_pc_152c4thread-pre-split ], [ %v4_152a4, %dec_label_pc_15294 ]
  %v1_152d8 = phi i32 [ %v0_152c8.pr, %dec_label_pc_152c4thread-pre-split ], [ %arg1, %dec_label_pc_15294 ]
  %v2_152c8 = icmp eq i32 %v1_152d8, 0
  store i32 %v0_152d4, i32* %r4.global-to-local, align 4
  br i1 %v2_152c8, label %dec_label_pc_152ec, label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152c4
  %v2_152d8 = add i32 %v1_152d8, %v0_152d4
  %v1_152dc = call i32 @function_1722c(i32 %v2_152d8)
  %v1_152e0 = icmp slt i32 %v1_152dc, 0
  br i1 %v1_152e0, label %dec_label_pc_152e8, label %dec_label_pc_152d4.dec_label_pc_152ec_crit_edge

dec_label_pc_152d4.dec_label_pc_152ec_crit_edge:  ; preds = %dec_label_pc_152d4
  %v0_152ec.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152ec

dec_label_pc_152e8:                               ; preds = %dec_label_pc_152d4, %dec_label_pc_152b4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152ec

dec_label_pc_152ec:                               ; preds = %dec_label_pc_152c4, %dec_label_pc_152d4.dec_label_pc_152ec_crit_edge, %dec_label_pc_152e8
  %v0_152ec = phi i32 [ %v0_152ec.pre, %dec_label_pc_152d4.dec_label_pc_152ec_crit_edge ], [ -1, %dec_label_pc_152e8 ], [ %v0_152d4, %dec_label_pc_152c4 ]
  %v2_152f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_152f0, i32* @r4, align 4
  ret i32 %v0_152ec

; uselistorder directives
  uselistorder i32 %v0_152d4, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1722c, { 1, 0 }
  uselistorder label %dec_label_pc_152ec, { 2, 1, 0 }
}

define i32 @function_15300(i32 %arg1) local_unnamed_addr {
dec_label_pc_15300:
  %v1_15310 = load i32, i32* @r0, align 4
  ret i32 %v1_15310
}

define i32 @function_15314(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15314:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15314 = load i32, i32* @r4, align 4
  store i32 %v3_15314, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_1532c = inttoptr i32 %arg2 to i8*
  %v3_1532c = call i32 @function_12940(i8* %v2_1532c, i32 0)
  %v2_15330 = load i32, i32* %arg1, align 4
  store i32 %v2_15330, i32* %r3.global-to-local, align 4
  %v3_15330 = add i32 %tmp, 4
  %v4_15330 = inttoptr i32 %v3_15330 to i32*
  %v5_15330 = load i32, i32* %v4_15330, align 4
  store i32 %v5_15330, i32* %r4.global-to-local, align 4
  %v0_15334 = load i32, i32* %r5.global-to-local, align 4
  %v1_15334 = inttoptr i32 %v0_15334 to i32*
  store i32 %v2_15330, i32* %v1_15334, align 4
  %v3_15334 = add i32 %v0_15334, 4
  %v4_15334 = inttoptr i32 %v3_15334 to i32*
  %v5_15334 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15334, i32* %v4_15334, align 4
  %v0_15338 = load i32, i32* %r6.global-to-local, align 4
  %v1_15338 = add i32 %v0_15338, 12
  %v2_15338 = inttoptr i32 %v1_15338 to i32*
  %v3_15338 = load i32, i32* %v2_15338, align 4
  %v1_1533c = load i32, i32* %r5.global-to-local, align 4
  %v2_1533c = add i32 %v1_1533c, 12
  %v3_1533c = inttoptr i32 %v2_1533c to i32*
  store i32 %v3_15338, i32* %v3_1533c, align 4
  %v0_15340 = load i32, i32* %r6.global-to-local, align 4
  %v1_15340 = add i32 %v0_15340, 96
  store i32 %v1_15340, i32* %r3.global-to-local, align 4
  %v1_15344 = inttoptr i32 %v1_15340 to i32*
  %v2_15344 = load i32, i32* %v1_15344, align 4
  store i32 %v2_15344, i32* %r3.global-to-local, align 4
  %v3_15344 = add i32 %v0_15340, 100
  %v4_15344 = inttoptr i32 %v3_15344 to i32*
  %v5_15344 = load i32, i32* %v4_15344, align 4
  store i32 %v5_15344, i32* %r4.global-to-local, align 4
  %v1_15348 = add i32 %v0_15340, 56
  %v2_15348 = inttoptr i32 %v1_15348 to i32*
  %v3_15348 = load i32, i32* %v2_15348, align 4
  store i32 %v3_15348, i32* %r2.global-to-local, align 4
  %v1_1534c = load i32, i32* %r5.global-to-local, align 4
  %v2_1534c = add i32 %v1_1534c, 96
  %v3_1534c = inttoptr i32 %v2_1534c to i32*
  store i32 %v2_15344, i32* %v3_1534c, align 4
  %v0_15350 = load i32, i32* %r4.global-to-local, align 4
  %v1_15350 = load i32, i32* %r5.global-to-local, align 4
  %v2_15350 = add i32 %v1_15350, 100
  %v3_15350 = inttoptr i32 %v2_15350 to i32*
  store i32 %v0_15350, i32* %v3_15350, align 4
  %v0_15354 = load i32, i32* %r6.global-to-local, align 4
  %v1_15354 = add i32 %v0_15354, 24
  store i32 %v1_15354, i32* %ip.global-to-local, align 4
  %v1_15358 = inttoptr i32 %v1_15354 to i32*
  %v2_15358 = load i32, i32* %v1_15358, align 4
  store i32 %v2_15358, i32* %ip.global-to-local, align 4
  %v3_15358 = add i32 %v0_15354, 28
  %v4_15358 = inttoptr i32 %v3_15358 to i32*
  %v5_15358 = load i32, i32* %v4_15358, align 4
  store i32 %v5_15358, i32* %lr.global-to-local, align 4
  %v0_1535c = load i32, i32* %r2.global-to-local, align 4
  %v1_1535c = load i32, i32* %r5.global-to-local, align 4
  %v2_1535c = add i32 %v1_1535c, 56
  %v3_1535c = inttoptr i32 %v2_1535c to i32*
  store i32 %v0_1535c, i32* %v3_1535c, align 4
  %v0_15360 = load i32, i32* %r6.global-to-local, align 4
  %v1_15360 = add i32 %v0_15360, 72
  store i32 %v1_15360, i32* %r3.global-to-local, align 4
  %v1_15364 = add i32 %v0_15360, 32
  store i32 %v1_15364, i32* %r7.global-to-local, align 4
  %v1_15368 = inttoptr i32 %v1_15364 to i32*
  %v2_15368 = load i32, i32* %v1_15368, align 4
  store i32 %v2_15368, i32* %r7.global-to-local, align 4
  %v3_15368 = add i32 %v0_15360, 36
  %v4_15368 = inttoptr i32 %v3_15368 to i32*
  %v5_15368 = load i32, i32* %v4_15368, align 4
  store i32 %v5_15368, i32* %r8.global-to-local, align 4
  %v1_1536c = inttoptr i32 %v1_15360 to i32*
  %v2_1536c = load i32, i32* %v1_1536c, align 4
  %v3_1536c = add i32 %v0_15360, 76
  %v4_1536c = inttoptr i32 %v3_1536c to i32*
  %v5_1536c = load i32, i32* %v4_1536c, align 4
  store i32 %v5_1536c, i32* %r1.global-to-local, align 4
  %v0_15370 = load i32, i32* %r5.global-to-local, align 4
  %v1_15370 = add i32 %v0_15370, 72
  %v1_15374 = inttoptr i32 %v1_15370 to i32*
  store i32 %v2_1536c, i32* %v1_15374, align 4
  %v3_15374 = add i32 %v0_15370, 76
  %v4_15374 = inttoptr i32 %v3_15374 to i32*
  %v5_15374 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15374, i32* %v4_15374, align 4
  %v0_15378 = load i32, i32* %r7.global-to-local, align 4
  %v1_15378 = load i32, i32* %r5.global-to-local, align 4
  %v2_15378 = add i32 %v1_15378, 32
  %v3_15378 = inttoptr i32 %v2_15378 to i32*
  store i32 %v0_15378, i32* %v3_15378, align 4
  %v0_1537c = load i32, i32* %r8.global-to-local, align 4
  %v1_1537c = load i32, i32* %r5.global-to-local, align 4
  %v2_1537c = add i32 %v1_1537c, 36
  %v3_1537c = inttoptr i32 %v2_1537c to i32*
  store i32 %v0_1537c, i32* %v3_1537c, align 4
  %v0_15380 = load i32, i32* %r6.global-to-local, align 4
  %v1_15380 = add i32 %v0_15380, 80
  store i32 %v1_15380, i32* %r3.global-to-local, align 4
  %v1_15384 = add i32 %v0_15380, 48
  store i32 %v1_15384, i32* %r7.global-to-local, align 4
  %v1_15388 = inttoptr i32 %v1_15384 to i32*
  %v2_15388 = load i32, i32* %v1_15388, align 4
  store i32 %v2_15388, i32* %r7.global-to-local, align 4
  %v3_15388 = add i32 %v0_15380, 52
  %v4_15388 = inttoptr i32 %v3_15388 to i32*
  %v5_15388 = load i32, i32* %v4_15388, align 4
  store i32 %v5_15388, i32* %r8.global-to-local, align 4
  %v1_1538c = inttoptr i32 %v1_15380 to i32*
  %v2_1538c = load i32, i32* %v1_1538c, align 4
  %v3_1538c = add i32 %v0_15380, 84
  %v4_1538c = inttoptr i32 %v3_1538c to i32*
  %v5_1538c = load i32, i32* %v4_1538c, align 4
  store i32 %v5_1538c, i32* %r1.global-to-local, align 4
  %v1_15390 = add i32 %v0_15380, 16
  %v2_15390 = inttoptr i32 %v1_15390 to i32*
  %v3_15390 = load i32, i32* %v2_15390, align 4
  store i32 %v3_15390, i32* %r2.global-to-local, align 4
  %v0_15394 = load i32, i32* %r5.global-to-local, align 4
  %v1_15394 = add i32 %v0_15394, 80
  %v1_15398 = inttoptr i32 %v1_15394 to i32*
  store i32 %v2_1538c, i32* %v1_15398, align 4
  %v3_15398 = add i32 %v0_15394, 84
  %v4_15398 = inttoptr i32 %v3_15398 to i32*
  %v5_15398 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15398, i32* %v4_15398, align 4
  %v0_1539c = load i32, i32* %r7.global-to-local, align 4
  %v1_1539c = load i32, i32* %r5.global-to-local, align 4
  %v2_1539c = add i32 %v1_1539c, 48
  %v3_1539c = inttoptr i32 %v2_1539c to i32*
  store i32 %v0_1539c, i32* %v3_1539c, align 4
  %v0_153a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_153a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_153a0 = add i32 %v1_153a0, 52
  %v3_153a0 = inttoptr i32 %v2_153a0 to i32*
  store i32 %v0_153a0, i32* %v3_153a0, align 4
  %v0_153a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_153a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_153a4 = add i32 %v1_153a4, 16
  %v3_153a4 = inttoptr i32 %v2_153a4 to i32*
  store i32 %v0_153a4, i32* %v3_153a4, align 4
  %v0_153a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_153a8 = add i32 %v0_153a8, 88
  store i32 %v1_153a8, i32* %r3.global-to-local, align 4
  %v1_153ac = add i32 %v0_153a8, 20
  %v2_153ac = inttoptr i32 %v1_153ac to i32*
  %v3_153ac = load i32, i32* %v2_153ac, align 4
  store i32 %v3_153ac, i32* %r2.global-to-local, align 4
  %v1_153b0 = inttoptr i32 %v1_153a8 to i32*
  %v2_153b0 = load i32, i32* %v1_153b0, align 4
  %v3_153b0 = add i32 %v0_153a8, 92
  %v4_153b0 = inttoptr i32 %v3_153b0 to i32*
  %v5_153b0 = load i32, i32* %v4_153b0, align 4
  store i32 %v5_153b0, i32* %r1.global-to-local, align 4
  %v1_153b4 = add i32 %v0_153a8, 64
  store i32 %v1_153b4, i32* %r6.global-to-local, align 4
  %v1_153b8 = inttoptr i32 %v1_153b4 to i32*
  %v2_153b8 = load i32, i32* %v1_153b8, align 4
  store i32 %v2_153b8, i32* %r6.global-to-local, align 4
  %v3_153b8 = add i32 %v0_153a8, 68
  %v4_153b8 = inttoptr i32 %v3_153b8 to i32*
  %v5_153b8 = load i32, i32* %v4_153b8, align 4
  store i32 %v5_153b8, i32* %r7.global-to-local, align 4
  %v0_153bc = load i32, i32* %r5.global-to-local, align 4
  %v1_153bc = add i32 %v0_153bc, 88
  store i32 %v1_153bc, i32* %r3.global-to-local, align 4
  %v2_153c0 = add i32 %v0_153bc, 20
  %v3_153c0 = inttoptr i32 %v2_153c0 to i32*
  store i32 %v3_153ac, i32* %v3_153c0, align 4
  %v0_153c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_153c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_153c4 = add i32 %v1_153c4, 24
  %v3_153c4 = inttoptr i32 %v2_153c4 to i32*
  store i32 %v0_153c4, i32* %v3_153c4, align 4
  %v0_153c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_153c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_153c8 = add i32 %v1_153c8, 28
  %v3_153c8 = inttoptr i32 %v2_153c8 to i32*
  store i32 %v0_153c8, i32* %v3_153c8, align 4
  %v0_153cc = load i32, i32* %r6.global-to-local, align 4
  %v1_153cc = load i32, i32* %r5.global-to-local, align 4
  %v2_153cc = add i32 %v1_153cc, 64
  %v3_153cc = inttoptr i32 %v2_153cc to i32*
  store i32 %v0_153cc, i32* %v3_153cc, align 4
  %v0_153d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_153d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_153d0 = add i32 %v1_153d0, 68
  %v3_153d0 = inttoptr i32 %v2_153d0 to i32*
  store i32 %v0_153d0, i32* %v3_153d0, align 4
  %v0_153d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_153d4 = inttoptr i32 %v0_153d4 to i32*
  store i32 %v2_153b0, i32* %v1_153d4, align 4
  %v3_153d4 = add i32 %v0_153d4, 4
  %v4_153d4 = inttoptr i32 %v3_153d4 to i32*
  %v5_153d4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_153d4, i32* %v4_153d4, align 4
  %v2_153d8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_153d8, i32* %r4.global-to-local, align 4
  ret i32 %v2_153b0

; uselistorder directives
  uselistorder i32 %v0_153a8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15380, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 5, 0, 1, 2, 6, 3, 7, 4, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_153e0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_153e0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_153e0 = load i32, i32* @r4, align 4
  store i32 %v3_153e0, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_153f8 = inttoptr i32 %arg2 to i8*
  %v3_153f8 = call i32 @function_12940(i8* %v2_153f8, i32 0)
  %v2_153fc = load i32, i32* %arg1, align 4
  %v3_153fc = add i32 %tmp, 4
  %v4_153fc = inttoptr i32 %v3_153fc to i32*
  %v5_153fc = load i32, i32* %v4_153fc, align 4
  store i32 %v5_153fc, i32* %r4.global-to-local, align 4
  %v0_15400 = load i32, i32* %r6.global-to-local, align 4
  %v1_15400 = inttoptr i32 %v0_15400 to i32*
  store i32 %v2_153fc, i32* %v1_15400, align 4
  %v3_15400 = add i32 %v0_15400, 4
  %v4_15400 = inttoptr i32 %v3_15400 to i32*
  %v5_15400 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15400, i32* %v4_15400, align 4
  %v0_15404 = load i32, i32* %r5.global-to-local, align 4
  %v1_15404 = add i32 %v0_15404, 32
  %v1_15408 = inttoptr i32 %v1_15404 to i32*
  %v2_15408 = load i32, i32* %v1_15408, align 4
  %v3_15408 = add i32 %v0_15404, 36
  %v4_15408 = inttoptr i32 %v3_15408 to i32*
  %v5_15408 = load i32, i32* %v4_15408, align 4
  store i32 %v5_15408, i32* %r4.global-to-local, align 4
  %v1_1540c = add i32 %v0_15404, 96
  %v2_1540c = inttoptr i32 %v1_1540c to i32*
  %v3_1540c = load i32, i32* %v2_1540c, align 4
  store i32 %v3_1540c, i32* %r2.global-to-local, align 4
  %v1_15410 = load i32, i32* %r6.global-to-local, align 4
  %v2_15410 = add i32 %v1_15410, 32
  %v3_15410 = inttoptr i32 %v2_15410 to i32*
  store i32 %v2_15408, i32* %v3_15410, align 4
  %v0_15414 = load i32, i32* %r4.global-to-local, align 4
  %v1_15414 = load i32, i32* %r6.global-to-local, align 4
  %v2_15414 = add i32 %v1_15414, 36
  %v3_15414 = inttoptr i32 %v2_15414 to i32*
  store i32 %v0_15414, i32* %v3_15414, align 4
  %v0_15418 = load i32, i32* %r2.global-to-local, align 4
  %v1_15418 = load i32, i32* %r6.global-to-local, align 4
  %v2_15418 = add i32 %v1_15418, 12
  %v3_15418 = inttoptr i32 %v2_15418 to i32*
  store i32 %v0_15418, i32* %v3_15418, align 4
  %v0_1541c = load i32, i32* %r5.global-to-local, align 4
  %v1_1541c = add i32 %v0_1541c, 48
  %v2_1541c = inttoptr i32 %v1_1541c to i32*
  %v3_1541c = load i32, i32* %v2_1541c, align 4
  %v1_15420 = add i32 %v0_1541c, 24
  store i32 %v1_15420, i32* %ip.global-to-local, align 4
  %v1_15424 = inttoptr i32 %v1_15420 to i32*
  %v2_15424 = load i32, i32* %v1_15424, align 4
  store i32 %v2_15424, i32* %ip.global-to-local, align 4
  %v3_15424 = add i32 %v0_1541c, 28
  %v4_15424 = inttoptr i32 %v3_15424 to i32*
  %v5_15424 = load i32, i32* %v4_15424, align 4
  store i32 %v5_15424, i32* %lr.global-to-local, align 4
  %v1_15428 = load i32, i32* %r6.global-to-local, align 4
  %v2_15428 = add i32 %v1_15428, 44
  %v3_15428 = inttoptr i32 %v2_15428 to i32*
  store i32 %v3_1541c, i32* %v3_15428, align 4
  %v0_1542c = load i32, i32* %r5.global-to-local, align 4
  %v1_1542c = add i32 %v0_1542c, 64
  %v2_1542c = inttoptr i32 %v1_1542c to i32*
  %v3_1542c = load i32, i32* %v2_1542c, align 4
  %v1_15430 = add i32 %v0_1542c, 56
  %v2_15430 = inttoptr i32 %v1_15430 to i32*
  %v3_15430 = load i32, i32* %v2_15430, align 4
  store i32 %v3_15430, i32* %r2.global-to-local, align 4
  %v1_15434 = load i32, i32* %r6.global-to-local, align 4
  %v2_15434 = add i32 %v1_15434, 52
  %v3_15434 = inttoptr i32 %v2_15434 to i32*
  store i32 %v3_1542c, i32* %v3_15434, align 4
  %v0_15438 = load i32, i32* %r2.global-to-local, align 4
  %v1_15438 = load i32, i32* %r6.global-to-local, align 4
  %v2_15438 = add i32 %v1_15438, 48
  %v3_15438 = inttoptr i32 %v2_15438 to i32*
  store i32 %v0_15438, i32* %v3_15438, align 4
  %v0_1543c = load i32, i32* %r5.global-to-local, align 4
  %v1_1543c = add i32 %v0_1543c, 72
  %v1_15440 = inttoptr i32 %v1_1543c to i32*
  %v2_15440 = load i32, i32* %v1_15440, align 4
  %v3_15440 = add i32 %v0_1543c, 76
  %v4_15440 = inttoptr i32 %v3_15440 to i32*
  %v5_15440 = load i32, i32* %v4_15440, align 4
  store i32 %v5_15440, i32* %r1.global-to-local, align 4
  %v0_15444 = load i32, i32* %r6.global-to-local, align 4
  %v1_15444 = add i32 %v0_15444, 56
  %v1_15448 = inttoptr i32 %v1_15444 to i32*
  store i32 %v2_15440, i32* %v1_15448, align 4
  %v3_15448 = add i32 %v0_15444, 60
  %v4_15448 = inttoptr i32 %v3_15448 to i32*
  %v5_15448 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15448, i32* %v4_15448, align 4
  %v0_1544c = load i32, i32* %r5.global-to-local, align 4
  %v1_1544c = add i32 %v0_1544c, 80
  %v1_15450 = inttoptr i32 %v1_1544c to i32*
  %v2_15450 = load i32, i32* %v1_15450, align 4
  %v3_15450 = add i32 %v0_1544c, 84
  %v4_15450 = inttoptr i32 %v3_15450 to i32*
  %v5_15450 = load i32, i32* %v4_15450, align 4
  store i32 %v5_15450, i32* %r1.global-to-local, align 4
  %v0_15454 = load i32, i32* %r6.global-to-local, align 4
  %v1_15454 = add i32 %v0_15454, 64
  %v1_15458 = inttoptr i32 %v1_15454 to i32*
  store i32 %v2_15450, i32* %v1_15458, align 4
  %v3_15458 = add i32 %v0_15454, 68
  %v4_15458 = inttoptr i32 %v3_15458 to i32*
  %v5_15458 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15458, i32* %v4_15458, align 4
  %v0_1545c = load i32, i32* %r5.global-to-local, align 4
  %v1_1545c = add i32 %v0_1545c, 16
  %v2_1545c = inttoptr i32 %v1_1545c to i32*
  %v3_1545c = load i32, i32* %v2_1545c, align 4
  %v1_15460 = load i32, i32* %r6.global-to-local, align 4
  %v2_15460 = add i32 %v1_15460, 16
  %v3_15460 = inttoptr i32 %v2_15460 to i32*
  store i32 %v3_1545c, i32* %v3_15460, align 4
  %v0_15464 = load i32, i32* %r5.global-to-local, align 4
  %v1_15464 = add i32 %v0_15464, 88
  %v1_15468 = add i32 %v0_15464, 20
  %v2_15468 = inttoptr i32 %v1_15468 to i32*
  %v3_15468 = load i32, i32* %v2_15468, align 4
  store i32 %v3_15468, i32* %r2.global-to-local, align 4
  %v1_1546c = inttoptr i32 %v1_15464 to i32*
  %v2_1546c = load i32, i32* %v1_1546c, align 4
  %v3_1546c = add i32 %v0_15464, 92
  %v4_1546c = inttoptr i32 %v3_1546c to i32*
  %v5_1546c = load i32, i32* %v4_1546c, align 4
  store i32 %v5_1546c, i32* %r1.global-to-local, align 4
  %v0_15470 = load i32, i32* %r6.global-to-local, align 4
  %v1_15470 = add i32 %v0_15470, 72
  %v1_15474 = inttoptr i32 %v1_15470 to i32*
  store i32 %v2_1546c, i32* %v1_15474, align 4
  %v3_15474 = add i32 %v0_15470, 76
  %v4_15474 = inttoptr i32 %v3_15474 to i32*
  %v5_15474 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15474, i32* %v4_15474, align 4
  %v0_15478 = load i32, i32* %r2.global-to-local, align 4
  %v1_15478 = load i32, i32* %r6.global-to-local, align 4
  %v2_15478 = add i32 %v1_15478, 20
  %v3_15478 = inttoptr i32 %v2_15478 to i32*
  store i32 %v0_15478, i32* %v3_15478, align 4
  %v0_1547c = load i32, i32* %ip.global-to-local, align 4
  %v1_1547c = load i32, i32* %r6.global-to-local, align 4
  %v2_1547c = add i32 %v1_1547c, 24
  %v3_1547c = inttoptr i32 %v2_1547c to i32*
  store i32 %v0_1547c, i32* %v3_1547c, align 4
  %v0_15480 = load i32, i32* %lr.global-to-local, align 4
  %v1_15480 = load i32, i32* %r6.global-to-local, align 4
  %v2_15480 = add i32 %v1_15480, 28
  %v3_15480 = inttoptr i32 %v2_15480 to i32*
  store i32 %v0_15480, i32* %v3_15480, align 4
  %v2_15484 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15484, i32* %r4.global-to-local, align 4
  ret i32 %v2_1546c

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_1548c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1548c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_154a8 = inttoptr i32 %arg2 to i8*
  %v3_154a8 = call i32 @function_12940(i8* %v2_154a8, i32 0)
  %v1_154ac = add i32 %tmp, 4
  %v2_154ac = inttoptr i32 %v1_154ac to i32*
  %v3_154ac = load i32, i32* %v2_154ac, align 4
  %v2_154b0 = load i32, i32* %arg1, align 4
  store i32 %v2_154b0, i32* %r8.global-to-local, align 4
  %v1_154b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154b4 = add i32 %v1_154b4, 12
  %v3_154b4 = inttoptr i32 %v2_154b4 to i32*
  store i32 %v3_154ac, i32* %v3_154b4, align 4
  %v0_154b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154b8 = add i32 %v0_154b8, 20
  %v2_154b8 = inttoptr i32 %v1_154b8 to i32*
  %v3_154b8 = load i32, i32* %v2_154b8, align 4
  %v1_154bc = add i32 %v0_154b8, 16
  %v2_154bc = inttoptr i32 %v1_154bc to i32*
  %v3_154bc = load i32, i32* %v2_154bc, align 4
  store i32 %v3_154bc, i32* %r6.global-to-local, align 4
  %v1_154c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_154c0 = add i32 %v1_154c0, 44
  %v3_154c0 = inttoptr i32 %v2_154c0 to i32*
  store i32 %v3_154b8, i32* %v3_154c0, align 4
  %v0_154c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154c4 = add i32 %v0_154c4, 24
  %v2_154c4 = inttoptr i32 %v1_154c4 to i32*
  %v3_154c4 = load i32, i32* %v2_154c4, align 4
  %v1_154c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_154c8 = add i32 %v1_154c8, 48
  %v3_154c8 = inttoptr i32 %v2_154c8 to i32*
  store i32 %v3_154c4, i32* %v3_154c8, align 4
  %v0_154cc = load i32, i32* %r4.global-to-local, align 4
  %v1_154cc = add i32 %v0_154cc, 28
  %v2_154cc = inttoptr i32 %v1_154cc to i32*
  %v3_154cc = load i32, i32* %v2_154cc, align 4
  %v1_154d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_154d0 = add i32 %v1_154d0, 52
  %v3_154d0 = inttoptr i32 %v2_154d0 to i32*
  store i32 %v3_154cc, i32* %v3_154d0, align 4
  %v0_154d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154d4 = add i32 %v0_154d4, 32
  %v1_154d8 = inttoptr i32 %v1_154d4 to i32*
  %v2_154d8 = load i32, i32* %v1_154d8, align 4
  %v3_154d8 = add i32 %v0_154d4, 36
  %v4_154d8 = inttoptr i32 %v3_154d8 to i32*
  %v5_154d8 = load i32, i32* %v4_154d8, align 4
  store i32 %v5_154d8, i32* %r1.global-to-local, align 4
  %v0_154dc = load i32, i32* %r5.global-to-local, align 4
  %v1_154dc = add i32 %v0_154dc, 56
  %v1_154e0 = inttoptr i32 %v1_154dc to i32*
  store i32 %v2_154d8, i32* %v1_154e0, align 4
  %v3_154e0 = add i32 %v0_154dc, 60
  %v4_154e0 = inttoptr i32 %v3_154e0 to i32*
  %v5_154e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_154e0, i32* %v4_154e0, align 4
  %v0_154e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154e4 = add i32 %v0_154e4, 40
  %v1_154e8 = inttoptr i32 %v1_154e4 to i32*
  %v2_154e8 = load i32, i32* %v1_154e8, align 4
  %v3_154e8 = add i32 %v0_154e4, 44
  %v4_154e8 = inttoptr i32 %v3_154e8 to i32*
  %v5_154e8 = load i32, i32* %v4_154e8, align 4
  store i32 %v5_154e8, i32* %r1.global-to-local, align 4
  %v0_154ec = load i32, i32* %r5.global-to-local, align 4
  %v1_154ec = add i32 %v0_154ec, 64
  %v1_154f0 = inttoptr i32 %v1_154ec to i32*
  store i32 %v2_154e8, i32* %v1_154f0, align 4
  %v3_154f0 = add i32 %v0_154ec, 68
  %v4_154f0 = inttoptr i32 %v3_154f0 to i32*
  %v5_154f0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_154f0, i32* %v4_154f0, align 4
  %v0_154f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154f4 = add i32 %v0_154f4, 48
  %v1_154f8 = inttoptr i32 %v1_154f4 to i32*
  %v2_154f8 = load i32, i32* %v1_154f8, align 4
  %v3_154f8 = add i32 %v0_154f4, 52
  %v4_154f8 = inttoptr i32 %v3_154f8 to i32*
  %v5_154f8 = load i32, i32* %v4_154f8, align 4
  store i32 %v5_154f8, i32* %r1.global-to-local, align 4
  %v1_154fc = add i32 %v0_154f4, 8
  %v2_154fc = inttoptr i32 %v1_154fc to i16*
  %v3_154fc = load i16, i16* %v2_154fc, align 2
  %v4_154fc = zext i16 %v3_154fc to i32
  store i32 %v4_154fc, i32* %r2.global-to-local, align 4
  %v1_15500 = add i32 %v0_154f4, 10
  %v2_15500 = inttoptr i32 %v1_15500 to i16*
  %v3_15500 = load i16, i16* %v2_15500, align 2
  %v4_15500 = zext i16 %v3_15500 to i32
  store i32 %v4_15500, i32* %ip.global-to-local, align 4
  %v1_15504 = add i32 %v0_154f4, 12
  %v2_15504 = inttoptr i32 %v1_15504 to i16*
  %v3_15504 = load i16, i16* %v2_15504, align 2
  %v4_15504 = zext i16 %v3_15504 to i32
  store i32 %v4_15504, i32* %lr.global-to-local, align 4
  %v1_15508 = add i32 %v0_154f4, 14
  %v2_15508 = inttoptr i32 %v1_15508 to i16*
  %v3_15508 = load i16, i16* %v2_15508, align 2
  %v4_15508 = zext i16 %v3_15508 to i32
  store i32 %v4_15508, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_15514 = load i32, i32* %r5.global-to-local, align 4
  %v1_15514 = add i32 %v0_15514, 72
  %v1_15518 = inttoptr i32 %v1_15514 to i32*
  store i32 %v2_154f8, i32* %v1_15518, align 4
  %v3_15518 = add i32 %v0_15514, 76
  %v4_15518 = inttoptr i32 %v3_15518 to i32*
  %v5_15518 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15518, i32* %v4_15518, align 4
  %v0_1551c = load i32, i32* %r5.global-to-local, align 4
  %v1_1551c = inttoptr i32 %v0_1551c to i32*
  %v2_1551c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_1551c, i32* %v1_1551c, align 4
  %v3_1551c = add i32 %v0_1551c, 4
  %v4_1551c = inttoptr i32 %v3_1551c to i32*
  %v5_1551c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_1551c, i32* %v4_1551c, align 4
  %v0_15520 = load i32, i32* %r6.global-to-local, align 4
  %v1_15520 = load i32, i32* %r5.global-to-local, align 4
  %v2_15520 = add i32 %v1_15520, 32
  %v3_15520 = inttoptr i32 %v2_15520 to i32*
  store i32 %v0_15520, i32* %v3_15520, align 4
  %v0_15524 = load i32, i32* %r7.global-to-local, align 4
  %v1_15524 = load i32, i32* %r5.global-to-local, align 4
  %v2_15524 = add i32 %v1_15524, 36
  %v3_15524 = inttoptr i32 %v2_15524 to i32*
  store i32 %v0_15524, i32* %v3_15524, align 4
  %v0_15528 = load i32, i32* %r2.global-to-local, align 4
  %v1_15528 = load i32, i32* %r5.global-to-local, align 4
  %v2_15528 = add i32 %v1_15528, 16
  %v3_15528 = inttoptr i32 %v2_15528 to i32*
  store i32 %v0_15528, i32* %v3_15528, align 4
  %v0_1552c = load i32, i32* %ip.global-to-local, align 4
  %v1_1552c = load i32, i32* %r5.global-to-local, align 4
  %v2_1552c = add i32 %v1_1552c, 20
  %v3_1552c = inttoptr i32 %v2_1552c to i32*
  store i32 %v0_1552c, i32* %v3_1552c, align 4
  %v0_15530 = load i32, i32* %lr.global-to-local, align 4
  %v1_15530 = load i32, i32* %r5.global-to-local, align 4
  %v2_15530 = add i32 %v1_15530, 24
  %v3_15530 = inttoptr i32 %v2_15530 to i32*
  store i32 %v0_15530, i32* %v3_15530, align 4
  %v0_15534 = load i32, i32* %r4.global-to-local, align 4
  %v1_15534 = load i32, i32* %r5.global-to-local, align 4
  %v2_15534 = add i32 %v1_15534, 28
  %v3_15534 = inttoptr i32 %v2_15534 to i32*
  store i32 %v0_15534, i32* %v3_15534, align 4
  ret i32 %v2_154f8

; uselistorder directives
  uselistorder i32 %v0_154f4, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 7, 8, 9, 2, 10 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_15544() local_unnamed_addr {
dec_label_pc_15544:
  %stack_var_-16 = alloca i32, align 4
  %v2_15548 = ptrtoint i32* %stack_var_-16 to i32
  %v2_15554 = call i32 @function_17278(i32 7, i32 %v2_15548)
  %v1_15558 = icmp slt i32 %v2_15554, 0
  %v5_1555c = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_15558, i32 256, i32 %v5_1555c
  ret i32 %storemerge
}

define i32 @function_15570(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15570:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15570 = load i32, i32* @r7, align 4
  store i32 %v3_15570, i32* %stack_var_-8, align 4
  %v0_1557c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1557c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1557c, -4095
  br i1 %tmp, label %dec_label_pc_1559c, label %dec_label_pc_1558c

dec_label_pc_1558c:                               ; preds = %dec_label_pc_15570
  %v0_1558c = call i32 @function_128f0()
  %v0_15590 = load i32, i32* %r7.global-to-local, align 4
  %v1_15590 = sub i32 0, %v0_15590
  %v2_15594 = inttoptr i32 %v0_1558c to i32*
  store i32 %v1_15590, i32* %v2_15594, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1559c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1559c

dec_label_pc_1559c:                               ; preds = %dec_label_pc_15570, %dec_label_pc_1558c
  %v1_155a0 = phi i32 [ %v0_1557c, %dec_label_pc_15570 ], [ -1, %dec_label_pc_1558c ]
  %v2_1559c = phi i32 [ %v3_15570, %dec_label_pc_15570 ], [ %v2_1559c.pre, %dec_label_pc_1558c ]
  store i32 %v2_1559c, i32* @r7, align 4
  ret i32 %v1_155a0

; uselistorder directives
  uselistorder i32 %v0_1557c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1559c, { 1, 0 }
}

define i32 @function_155a4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_155a4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_155a4 = load i32, i32* @r7, align 4
  store i32 %v3_155a4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_155cc, label %dec_label_pc_155bc

dec_label_pc_155bc:                               ; preds = %dec_label_pc_155a4
  %v0_155bc = call i32 @function_128f0()
  %v0_155c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_155c0 = sub i32 0, %v0_155c0
  %v2_155c4 = inttoptr i32 %v0_155bc to i32*
  store i32 %v1_155c0, i32* %v2_155c4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_155d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_155cc

dec_label_pc_155cc:                               ; preds = %dec_label_pc_155a4, %dec_label_pc_155bc
  %v2_155d0 = phi i32 [ %v3_155a4, %dec_label_pc_155a4 ], [ %v2_155d0.pre, %dec_label_pc_155bc ]
  %v0_155cc = phi i32 [ %arg1, %dec_label_pc_155a4 ], [ -1, %dec_label_pc_155bc ]
  store i32 %v2_155d0, i32* @r7, align 4
  ret i32 %v0_155cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_155cc, { 1, 0 }
}

define i32 @function_155d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_155d8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1560c, label %dec_label_pc_155fc

dec_label_pc_155fc:                               ; preds = %dec_label_pc_155d8
  %v0_155fc = call i32 @function_128f0()
  %v0_15600 = load i32, i32* %r4.global-to-local, align 4
  %v1_15600 = sub i32 0, %v0_15600
  %v2_15604 = inttoptr i32 %v0_155fc to i32*
  store i32 %v1_15600, i32* %v2_15604, align 4
  br label %dec_label_pc_1560c

dec_label_pc_1560c:                               ; preds = %dec_label_pc_155d8, %dec_label_pc_155fc
  %v1_15614 = phi i32 [ %arg1, %dec_label_pc_155d8 ], [ -1, %dec_label_pc_155fc ]
  ret i32 %v1_15614

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1560c, { 1, 0 }
}

define i32 @function_15618(i32 %arg1) local_unnamed_addr {
dec_label_pc_15618:
  %v1_15628 = load i32, i32* @r0, align 4
  ret i32 %v1_15628
}

define i32 @function_1562c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1562c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1562c = load i32, i32* @r7, align 4
  store i32 %v3_1562c, i32* %stack_var_-8, align 4
  %v0_15638 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15638, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15638, -4095
  br i1 %tmp, label %dec_label_pc_15658, label %dec_label_pc_15648

dec_label_pc_15648:                               ; preds = %dec_label_pc_1562c
  %v0_15648 = call i32 @function_128f0()
  %v0_1564c = load i32, i32* %r7.global-to-local, align 4
  %v1_1564c = sub i32 0, %v0_1564c
  %v2_15650 = inttoptr i32 %v0_15648 to i32*
  store i32 %v1_1564c, i32* %v2_15650, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15658.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15658

dec_label_pc_15658:                               ; preds = %dec_label_pc_1562c, %dec_label_pc_15648
  %v1_1565c = phi i32 [ %v0_15638, %dec_label_pc_1562c ], [ -1, %dec_label_pc_15648 ]
  %v2_15658 = phi i32 [ %v3_1562c, %dec_label_pc_1562c ], [ %v2_15658.pre, %dec_label_pc_15648 ]
  store i32 %v2_15658, i32* @r7, align 4
  ret i32 %v1_1565c

; uselistorder directives
  uselistorder i32 %v0_15638, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15658, { 1, 0 }
}

define i32 @function_15660(i32 %arg1) local_unnamed_addr {
dec_label_pc_15660:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15664.outer

dec_label_pc_15664.outer:                         ; preds = %dec_label_pc_1567c, %dec_label_pc_15660
  %v0_15664.ph = phi i32 [ %v0_15664.pre.pre, %dec_label_pc_1567c ], [ %arg1, %dec_label_pc_15660 ]
  %tmp = icmp ult i32 %v0_15664.ph, -4095
  br label %dec_label_pc_15664

dec_label_pc_15664:                               ; preds = %dec_label_pc_15664.outer, %dec_label_pc_15664
  br i1 %tmp, label %dec_label_pc_15664, label %dec_label_pc_1567c

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15664
  %v0_1567c = call i32 @function_128f0()
  %v1_15680 = sub i32 0, %v0_15664.ph
  %v2_15684 = inttoptr i32 %v0_1567c to i32*
  store i32 %v1_15680, i32* %v2_15684, align 4
  %v0_15664.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15664.outer

; uselistorder directives
  uselistorder i32 %v0_15664.ph, { 1, 0 }
  uselistorder label %dec_label_pc_15664, { 1, 0 }
}

define i32 @function_1568c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1568c:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_aa9c.619 to i32), i32 87712), i32* @r6, align 4
  %v1_156a0 = add i32 %tmp, 24
  store i32 %v1_156a0, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_156b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_aa9c.619 to i32), i32 87784) to i32*), align 4
  store i32 %v4_156b8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_156b8)
  %v0_156cc = load i32, i32* @r6, align 4
  %v2_156cc = add i32 %v0_156cc, 16
  %v3_156cc = inttoptr i32 %v2_156cc to i32*
  %v4_156cc = load i32, i32* %v3_156cc, align 4
  store i32 %v4_156cc, i32* %ip.global-to-local, align 4
  store i32 87768, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_156cc)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_156dc

dec_label_pc_156dc:                               ; preds = %dec_label_pc_1570c, %dec_label_pc_1568c
  %v0_156dc = load i32, i32* @r5, align 4
  %v1_156dc = add i32 %v0_156dc, 4
  %v2_156dc = inttoptr i32 %v1_156dc to i32*
  %v3_156dc = load i32, i32* %v2_156dc, align 4
  %v4_156dc = add i32 %v0_156dc, 8
  %v5_156dc = inttoptr i32 %v4_156dc to i32*
  %v6_156dc = load i32, i32* %v5_156dc, align 4
  %tmp10 = icmp ugt i32 %v6_156dc, %v3_156dc
  br i1 %tmp10, label %dec_label_pc_1570c, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_156dc
  %v1_156e8 = inttoptr i32 %v0_156dc to i32*
  %v2_156e8 = load i32, i32* %v1_156e8, align 4
  %v1_156ec = add i32 %v0_156dc, 12
  %v2_156ec = inttoptr i32 %v1_156ec to i32*
  %v3_156ec = load i32, i32* %v2_156ec, align 4
  %v1_156f0 = add i32 %v0_156dc, 20
  %v2_156f0 = inttoptr i32 %v1_156f0 to i32*
  %v3_156f0 = load i32, i32* %v2_156f0, align 4
  %v4_156f4 = inttoptr i32 %v3_156ec to i32*
  %v5_156f4 = call i32 @function_172ac(i32 %v2_156e8, i32* %v4_156f4, i32 %v3_156f0, i32 %v6_156dc)
  %tmp9 = icmp slt i32 %v5_156f4, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_15704

.thread:                                          ; preds = %dec_label_pc_156e8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1573c

dec_label_pc_15704:                               ; preds = %dec_label_pc_156e8
  %v1_15704 = load i32, i32* @r5, align 4
  %v2_15704 = add i32 %v1_15704, 8
  %v3_15704 = inttoptr i32 %v2_15704 to i32*
  store i32 %v5_156f4, i32* %v3_15704, align 4
  %v0_15708 = load i32, i32* @r7, align 4
  %v1_15708 = load i32, i32* @r5, align 4
  %v2_15708 = add i32 %v1_15708, 4
  %v3_15708 = inttoptr i32 %v2_15708 to i32*
  store i32 %v0_15708, i32* %v3_15708, align 4
  %v0_1570c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1570c

dec_label_pc_1570c:                               ; preds = %dec_label_pc_156dc, %dec_label_pc_15704
  %v1_15730 = phi i32 [ %v0_156dc, %dec_label_pc_156dc ], [ %v0_1570c.pre, %dec_label_pc_15704 ]
  %v1_1570c = add i32 %v1_15730, 4
  %v2_1570c = inttoptr i32 %v1_1570c to i32*
  %v3_1570c = load i32, i32* %v2_1570c, align 4
  %v1_15710 = add i32 %v1_15730, 12
  %v2_15710 = inttoptr i32 %v1_15710 to i32*
  %v3_15710 = load i32, i32* %v2_15710, align 4
  %v2_15714 = add i32 %v3_15710, %v3_1570c
  store i32 %v2_15714, i32* @r4, align 4
  %v3_15718 = inttoptr i32 %v2_15714 to i32*
  %v4_15718 = load i32, i32* %v3_15718, align 4
  %v1_1571c = add i32 %v2_15714, 4
  %v2_1571c = inttoptr i32 %v1_1571c to i32*
  %v3_1571c = load i32, i32* %v2_1571c, align 4
  %v1_15720 = add i32 %v2_15714, 16
  %v2_15720 = inttoptr i32 %v1_15720 to i16*
  %v3_15720 = load i16, i16* %v2_15720, align 2
  %v4_15720 = zext i16 %v3_15720 to i32
  %v1_15724 = add i32 %v2_15714, 8
  %v2_15724 = inttoptr i32 %v1_15724 to i32*
  %v3_15724 = load i32, i32* %v2_15724, align 4
  store i32 %v3_15724, i32* %ip.global-to-local, align 4
  %v2_15728 = add i32 %v4_15720, %v3_1570c
  %v2_1572c = or i32 %v3_1571c, %v4_15718
  %v4_1572c = icmp eq i32 %v2_1572c, 0
  store i32 %v2_15728, i32* %v2_1570c, align 4
  %v0_15734 = load i32, i32* %ip.global-to-local, align 4
  %v1_15734 = load i32, i32* @r5, align 4
  %v2_15734 = add i32 %v1_15734, 16
  %v3_15734 = inttoptr i32 %v2_15734 to i32*
  store i32 %v0_15734, i32* %v3_15734, align 4
  br i1 %v4_1572c, label %dec_label_pc_156dc, label %dec_label_pc_1573c

dec_label_pc_1573c:                               ; preds = %dec_label_pc_1570c, %.thread
  %v0_15748 = load i32, i32* @r6, align 4
  %v2_15748 = add i32 %v0_15748, 24
  %v3_15748 = inttoptr i32 %v2_15748 to i32*
  %v4_15748 = load i32, i32* %v3_15748, align 4
  store i32 %v4_15748, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15748)
  %v0_15754 = load i32, i32* @r4, align 4
  ret i32 %v0_15754

; uselistorder directives
  uselistorder i32 %v2_15714, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15730, { 1, 0 }
  uselistorder i32 %v6_156dc, { 1, 0 }
  uselistorder i32 %v0_156dc, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1570c, { 1, 0 }
}

define i32 @function_15768(i32 %arg1) local_unnamed_addr {
dec_label_pc_15768:
  %v0_15768 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15768, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15768
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15768, %bb
  %v10_15774 = phi i32 [ %arg1, %dec_label_pc_15768 ], [ 0, %bb ]
  ret i32 %v10_15774

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_15778(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15778:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15778 = load i32, i32* @r4, align 4
  %v6_15778 = load i32, i32* @r5, align 4
  %v9_15778 = load i32, i32* @r6, align 4
  %v12_15778 = load i32, i32* @r7, align 4
  %v15_15778 = load i32, i32* @r8, align 4
  %v18_15778 = load i32, i32* @sb, align 4
  %v21_15778 = load i32, i32* @sl, align 4
  %v24_15778 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1577c = icmp eq i32* %arg1, null
  store i1 %v2_1577c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_1577c, label %dec_label_pc_15a8c, label %dec_label_pc_15794

dec_label_pc_15794:                               ; preds = %dec_label_pc_15778
  %v1_15794 = urem i32 %arg3, 256
  store i32 %v1_15794, i32* @sb, align 4
  %v1_15798 = udiv i32 %arg3, 256
  %v3_1579c = urem i32 %v1_15798, 256
  %v3_157a0 = mul nuw nsw i32 %v1_15794, 4
  %v1_157a8 = or i32 %v3_157a0, 1
  %v1_157b4 = and i32 %arg3, 131072
  %v1_157b8 = add nsw i32 %v1_15794, -1
  %v1_157c4 = and i32 %arg3, 262144
  store i32 %v1_157c4, i32* %r2.global-to-local, align 4
  %v1_157c8 = and i32 %arg3, 65536
  store i32 %v1_157c8, i32* %r3.global-to-local, align 4
  store i32 %v1_157c8, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_157d8 = add i32 %arg4, 1
  store i32 %v1_157d8, i32* @sl, align 4
  %v2_15958 = inttoptr i32 %arg2 to i32*
  %v2_15968 = icmp eq i32 %v1_157b4, 0
  %v2_159c0 = icmp eq i32 %v1_157c4, 0
  br label %dec_label_pc_157dc

dec_label_pc_157dc:                               ; preds = %dec_label_pc_157dc.backedge, %dec_label_pc_15794
  %v2_157f8 = phi i32 [ %v0_157dc.pre, %dec_label_pc_157dc.backedge ], [ %tmp, %dec_label_pc_15794 ]
  %v1_157dc = add i32 %v2_157f8, 4
  %v2_157dc = inttoptr i32 %v1_157dc to i32*
  %v3_157dc = load i32, i32* %v2_157dc, align 4
  store i32 %v3_157dc, i32* %r3.global-to-local, align 4
  %v2_157e0 = icmp eq i32 %v3_157dc, 0
  store i1 %v2_157e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_157e0, label %dec_label_pc_157e8, label %dec_label_pc_15830

dec_label_pc_157e8:                               ; preds = %dec_label_pc_157dc
  %v1_157e8 = add i32 %v2_157f8, 16
  %v2_157e8 = inttoptr i32 %v1_157e8 to i32*
  %v3_157e8 = load i32, i32* %v2_157e8, align 4
  store i32 %v3_157e8, i32* %r3.global-to-local, align 4
  %v2_157ec = icmp eq i32 %v3_157e8, 0
  store i1 %v2_157ec, i1* %cpsr_z.global-to-local, align 1
  %v1_157f0 = add i32 %v2_157f8, 8
  %v2_157f0 = inttoptr i32 %v1_157f0 to i32*
  %v3_157f0 = load i32, i32* %v2_157f0, align 4
  store i32 %v3_157f0, i32* %r3.global-to-local, align 4
  br i1 %v2_157ec, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_157e8
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_157e8, align 4
  %v0_157fc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_157e8, %bb
  %v0_157fc = phi i32 [ %v0_157fc.pre, %bb ], [ %v3_157f0, %dec_label_pc_157e8 ]
  %v2_157fc = icmp eq i32 %v0_157fc, 0
  store i1 %v2_157fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_157fc, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_157a8, i32* %r3.global-to-local, align 4
  %v2_15804 = load i32, i32* @r5, align 4
  %v3_15804 = add i32 %v2_15804, 8
  %v4_15804 = inttoptr i32 %v3_15804 to i32*
  store i32 %v1_157a8, i32* %v4_15804, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_15808 = load i32, i32* @r5, align 4
  %v1_15808 = add i32 %v0_15808, 16
  %v2_15808 = inttoptr i32 %v1_15808 to i32*
  %v3_15808 = load i32, i32* %v2_15808, align 4
  store i32 %v3_15808, i32* %r0.global-to-local, align 4
  %v1_1580c = add i32 %v0_15808, 8
  %v2_1580c = inttoptr i32 %v1_1580c to i32*
  %v3_1580c = load i32, i32* %v2_1580c, align 4
  store i32 %v3_1580c, i32* %r3.global-to-local, align 4
  %v2_15810 = add i32 %v3_1580c, %v3_15808
  store i32 %v2_15810, i32* @r0, align 4
  %v0_15814 = call i32 @function_12f1c()
  store i32 %v0_15814, i32* %r0.global-to-local, align 4
  %v2_15818 = icmp eq i32 %v0_15814, 0
  store i1 %v2_15818, i1* %cpsr_z.global-to-local, align 1
  %v1_1581c = load i32, i32* @r5, align 4
  %v2_1581c = add i32 %v1_1581c, 4
  %v3_1581c = inttoptr i32 %v2_1581c to i32*
  store i32 %v0_15814, i32* %v3_1581c, align 4
  br i1 %v2_15818, label %dec_label_pc_15a8c, label %dec_label_pc_15824

dec_label_pc_15824:                               ; preds = %.thread
  %v0_15824 = load i32, i32* @r5, align 4
  %v1_15824 = add i32 %v0_15824, 20
  %v2_15824 = inttoptr i32 %v1_15824 to i32*
  %v3_15824 = load i32, i32* %v2_15824, align 4
  %v1_15828 = or i32 %v3_15824, 1
  store i32 %v1_15828, i32* %r3.global-to-local, align 4
  store i32 %v1_15828, i32* %v2_15824, align 4
  %v0_15830.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15830

dec_label_pc_15830:                               ; preds = %dec_label_pc_157dc, %dec_label_pc_15824
  %v1_15838 = phi i32 [ %v2_157f8, %dec_label_pc_157dc ], [ %v0_15830.pre, %dec_label_pc_15824 ]
  %v1_15830 = add i32 %v1_15838, 4
  %v2_15830 = inttoptr i32 %v1_15830 to i32*
  %v3_15830 = load i32, i32* %v2_15830, align 4
  store i32 %v3_15830, i32* %r2.global-to-local, align 4
  %v4_15830 = add i32 %v1_15838, 8
  %v5_15830 = inttoptr i32 %v4_15830 to i32*
  %v6_15830 = load i32, i32* %v5_15830, align 4
  %v2_15834 = add i32 %v6_15830, %v3_15830
  store i32 %v2_15834, i32* %r3.global-to-local, align 4
  %v2_15838 = add i32 %v1_15838, 12
  %v3_15838 = inttoptr i32 %v2_15838 to i32*
  store i32 %v2_15834, i32* %v3_15838, align 4
  %v0_1583c = load i32, i32* @fp, align 4
  store i32 %v0_1583c, i32* @r6, align 4
  br label %dec_label_pc_15840

dec_label_pc_15840:                               ; preds = %dec_label_pc_158cc, %dec_label_pc_158b8, %dec_label_pc_15830
  %v0_15848 = phi i32 [ %v0_1583c, %dec_label_pc_15830 ], [ %v1_158b8, %dec_label_pc_158b8 ], [ %v0_15848.pre.pre, %dec_label_pc_158cc ]
  %v0_15840 = load i32, i32* @r5, align 4
  %v1_15840 = add i32 %v0_15840, 12
  store i32 %v1_15840, i32* %r0.global-to-local, align 4
  %v1_15844 = inttoptr i32 %v1_15840 to i32*
  %v2_15844 = load i32, i32* %v1_15844, align 4
  store i32 %v2_15844, i32* %r0.global-to-local, align 4
  %v3_15844 = add i32 %v0_15840, 16
  %v4_15844 = inttoptr i32 %v3_15844 to i32*
  %v5_15844 = load i32, i32* %v4_15844, align 4
  %v2_15848 = add i32 %v2_15844, %v0_15848
  store i32 %v2_15848, i32* %r0.global-to-local, align 4
  %v2_1584c = sub i32 %v5_15844, %v0_15848
  %v1_15850 = inttoptr i32 %v0_15840 to i32*
  %v2_15850 = load i32, i32* %v1_15850, align 4
  store i32 %v2_15850, i32* %r2.global-to-local, align 4
  %v3_15854 = call i32 @function_16274(i32 %v2_15848, i32 %v2_1584c, i32 %v2_15850)
  store i32 %v3_15854, i32* %r0.global-to-local, align 4
  store i32 %v3_15854, i32* %r4.global-to-local, align 4
  %v2_15858 = icmp eq i32 %v3_15854, 0
  store i1 %v2_15858, i1* %cpsr_z.global-to-local, align 1
  %v0_15860 = load i32, i32* @r5, align 4
  %v1_15860 = add i32 %v0_15860, 12
  br i1 %v2_15858, label %dec_label_pc_15860, label %dec_label_pc_15878

dec_label_pc_15860:                               ; preds = %dec_label_pc_15840
  store i32 %v1_15860, i32* %r0.global-to-local, align 4
  %v1_15864 = inttoptr i32 %v1_15860 to i32*
  %v2_15864 = load i32, i32* %v1_15864, align 4
  store i32 %v2_15864, i32* %r0.global-to-local, align 4
  %v3_15864 = add i32 %v0_15860, 16
  %v4_15864 = inttoptr i32 %v3_15864 to i32*
  %v5_15864 = load i32, i32* %v4_15864, align 4
  store i32 %v5_15864, i32* @r2, align 4
  %v2_1586c = inttoptr i32 %v2_15864 to i8*
  %v3_1586c = call i32 @function_12940(i8* %v2_1586c, i32 0)
  store i32 %v3_1586c, i32* %r0.global-to-local, align 4
  %v0_15870 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15a90

dec_label_pc_15878:                               ; preds = %dec_label_pc_15840
  %v2_15878 = inttoptr i32 %v1_15860 to i32*
  %v3_15878 = load i32, i32* %v2_15878, align 4
  store i32 %v3_15878, i32* @r4, align 4
  %v1_1587c = load i32, i32* @r6, align 4
  %v2_1587c = add i32 %v1_1587c, %v3_15878
  store i32 %v2_1587c, i32* %r0.global-to-local, align 4
  %v1_15880 = call i32 @function_16d20(i32 %v2_1587c)
  %v0_15888 = load i32, i32* @r6, align 4
  %v2_15888 = add i32 %v0_15888, %v1_15880
  store i32 %v2_15888, i32* @r6, align 4
  %v0_1588c = load i32, i32* @r4, align 4
  store i32 %v0_1588c, i32* @r0, align 4
  %v2_15890 = call i32 @function_16f6c(i32 %v0_1588c, i32 10)
  store i32 %v2_15890, i32* %r0.global-to-local, align 4
  %v2_15894 = icmp eq i32 %v2_15890, 0
  store i1 %v2_15894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15894, label %dec_label_pc_158c0, label %dec_label_pc_1589c

dec_label_pc_1589c:                               ; preds = %dec_label_pc_15878
  %v1_1589c = inttoptr i32 %v2_15890 to i8*
  %v2_1589c = load i8, i8* %v1_1589c, align 1
  %v3_1589c = zext i8 %v2_1589c to i32
  %v1_158a0 = add nuw nsw i32 %v3_1589c, 255
  %v1_158a4 = urem i32 %v1_158a0, 256
  store i32 %v1_158a4, i32* %r3.global-to-local, align 4
  %v7_158a8 = icmp eq i32 %v1_158a4, 92
  store i1 %v7_158a8, i1* %cpsr_z.global-to-local, align 1
  %v1_158ac = trunc i32 %v1_158a0 to i8
  store i8 %v1_158ac, i8* %v1_1589c, align 1
  %v0_158b0 = load i32, i32* @r6, align 4
  %v1_158b0 = add i32 %v0_158b0, -1
  store i32 %v1_158b0, i32* @r6, align 4
  %v0_158b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_158b4, label %dec_label_pc_158b8, label %dec_label_pc_15944

dec_label_pc_158b8:                               ; preds = %dec_label_pc_1589c
  %v1_158b8 = add i32 %v0_158b0, -2
  store i32 %v1_158b8, i32* @r6, align 4
  br label %dec_label_pc_15840

dec_label_pc_158c0:                               ; preds = %dec_label_pc_15878
  %v0_158c0 = load i32, i32* @r5, align 4
  %v1_158c0 = add i32 %v0_158c0, 20
  %v2_158c0 = inttoptr i32 %v1_158c0 to i32*
  %v3_158c0 = load i32, i32* %v2_158c0, align 4
  store i32 %v3_158c0, i32* %r3.global-to-local, align 4
  %v2_158c4 = icmp eq i32 %v3_158c0, 0
  store i1 %v2_158c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158c4, label %dec_label_pc_158fc, label %dec_label_pc_158cc

dec_label_pc_158cc:                               ; preds = %dec_label_pc_158c0
  %v1_158cc = add i32 %v0_158c0, 16
  %v2_158cc = inttoptr i32 %v1_158cc to i32*
  %v3_158cc = load i32, i32* %v2_158cc, align 4
  store i32 %v3_158cc, i32* %r3.global-to-local, align 4
  %v1_158d0 = add i32 %v0_158c0, 8
  %v2_158d0 = inttoptr i32 %v1_158d0 to i32*
  %v3_158d0 = load i32, i32* %v2_158d0, align 4
  %v1_158d4 = add i32 %v3_158cc, 4096
  store i32 %v1_158d4, i32* %r3.global-to-local, align 4
  %v2_158d8 = add i32 %v3_158d0, %v1_158d4
  store i32 %v1_158d4, i32* %v2_158cc, align 4
  %v0_158e0 = load i32, i32* @r5, align 4
  %v1_158e0 = add i32 %v0_158e0, 4
  %v2_158e0 = inttoptr i32 %v1_158e0 to i32*
  %v3_158e0 = load i32, i32* %v2_158e0, align 4
  store i32 %v3_158e0, i32* %r0.global-to-local, align 4
  %v4_158e4 = inttoptr i32 %v3_158e0 to i32*
  %v5_158e4 = call i32 @function_13970(i32* %v4_158e4, i32 %v2_158d8, i32 %v2_15850, i32 %v1_158d4)
  store i32 %v5_158e4, i32* %r0.global-to-local, align 4
  %v0_158e8 = load i32, i32* @r5, align 4
  %v1_158e8 = add i32 %v0_158e8, 8
  %v2_158e8 = inttoptr i32 %v1_158e8 to i32*
  %v3_158e8 = load i32, i32* %v2_158e8, align 4
  %v2_158ec = add i32 %v3_158e8, %v5_158e4
  store i32 %v2_158ec, i32* %r3.global-to-local, align 4
  %v2_158f0 = add i32 %v0_158e8, 12
  %v3_158f0 = inttoptr i32 %v2_158f0 to i32*
  store i32 %v2_158ec, i32* %v3_158f0, align 4
  %v1_158f4 = load i32, i32* @r5, align 4
  %v2_158f4 = add i32 %v1_158f4, 4
  %v3_158f4 = inttoptr i32 %v2_158f4 to i32*
  store i32 %v5_158e4, i32* %v3_158f4, align 4
  %v0_15848.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15840

dec_label_pc_158fc:                               ; preds = %dec_label_pc_158c0, %.dec_label_pc_158fc_crit_edge
  %v0_158fc = phi i32 [ %v0_158fc.pre, %.dec_label_pc_158fc_crit_edge ], [ %v0_158c0, %dec_label_pc_158c0 ]
  %v1_158fc = inttoptr i32 %v0_158fc to i32*
  %v2_158fc = load i32, i32* %v1_158fc, align 4
  %v1_15900 = add i32 %v2_158fc, 52
  %v2_15900 = inttoptr i32 %v1_15900 to i32*
  %v3_15900 = load i32, i32* %v2_15900, align 4
  store i32 %v3_15900, i32* %r3.global-to-local, align 4
  %v2_15904 = icmp eq i32 %v3_15900, 0
  store i1 %v2_15904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15904, label %dec_label_pc_15930, label %dec_label_pc_1590c

dec_label_pc_1590c:                               ; preds = %dec_label_pc_158fc
  %v1_1590c = add i32 %v2_158fc, 16
  %v2_1590c = inttoptr i32 %v1_1590c to i32*
  %v3_1590c = load i32, i32* %v2_1590c, align 4
  store i32 %v3_1590c, i32* %r2.global-to-local, align 4
  %v1_15910 = add i32 %v2_158fc, 24
  %v2_15910 = inttoptr i32 %v1_15910 to i32*
  %v3_15910 = load i32, i32* %v2_15910, align 4
  store i32 %v3_15910, i32* %r3.global-to-local, align 4
  %v3_15914 = icmp ult i32 %v3_1590c, %v3_15910
  %v9_15914 = icmp eq i32 %v3_1590c, %v3_15910
  store i1 %v9_15914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15914, label %dec_label_pc_15938thread-pre-split, label %dec_label_pc_15924

dec_label_pc_15924:                               ; preds = %dec_label_pc_1590c
  store i32 %v2_158fc, i32* %r0.global-to-local, align 4
  %v1_15928 = inttoptr i32 %v2_158fc to i16*
  %v2_15928 = call i32 @function_166c4(i16* %v1_15928)
  store i32 %v2_15928, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15938

dec_label_pc_15930:                               ; preds = %dec_label_pc_158fc
  store i32 %v2_158fc, i32* %r0.global-to-local, align 4
  %v1_15934 = call i32 @function_16198(i32 %v2_158fc)
  store i32 %v1_15934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15938

dec_label_pc_15938thread-pre-split:               ; preds = %dec_label_pc_1590c
  %v2_15918 = inttoptr i32 %v3_1590c to i8*
  %v3_15918 = load i8, i8* %v2_15918, align 1
  %v4_15918 = zext i8 %v3_15918 to i32
  store i32 %v4_15918, i32* %r0.global-to-local, align 4
  %v6_15918 = add i32 %v3_1590c, 1
  store i32 %v6_15918, i32* %r2.global-to-local, align 4
  store i32 %v6_15918, i32* %v2_1590c, align 4
  %v0_15938.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15938

dec_label_pc_15938:                               ; preds = %dec_label_pc_15938thread-pre-split, %dec_label_pc_15924, %dec_label_pc_15930
  %v1_1593c = phi i32 [ %v0_15938.pr, %dec_label_pc_15938thread-pre-split ], [ %v2_15928, %dec_label_pc_15924 ], [ %v1_15934, %dec_label_pc_15930 ]
  %v7_15938 = icmp eq i32 %v1_1593c, 10
  store i1 %v7_15938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15938, label %dec_label_pc_15944.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_15938
  %v8_1593c = icmp eq i32 %v1_1593c, -1
  store i1 %v8_1593c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1593c, label %dec_label_pc_15944.loopexit, label %.dec_label_pc_158fc_crit_edge

.dec_label_pc_158fc_crit_edge:                    ; preds = %bb68
  %v0_158fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_158fc

dec_label_pc_15944.loopexit:                      ; preds = %bb68, %dec_label_pc_15938
  %v0_15944.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15944

dec_label_pc_15944:                               ; preds = %dec_label_pc_1589c, %dec_label_pc_15944.loopexit
  %v0_15944 = phi i32 [ %v0_15944.pre, %dec_label_pc_15944.loopexit ], [ %v1_158b0, %dec_label_pc_1589c ]
  %v7_15944 = icmp eq i32 %v0_15944, -1
  store i1 %v7_15944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15944, label %dec_label_pc_15a8c, label %dec_label_pc_1594c

dec_label_pc_1594c:                               ; preds = %dec_label_pc_15944
  %v0_1594c = load i32, i32* @r5, align 4
  %v1_1594c = add i32 %v0_1594c, 4
  %v2_1594c = inttoptr i32 %v1_1594c to i32*
  %v3_1594c = load i32, i32* %v2_1594c, align 4
  store i32 %v3_1594c, i32* %r0.global-to-local, align 4
  store i32 %v3_157a0, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_1594c, i32* %v2_15958, align 4
  %v0_1595c = load i32, i32* @fp, align 4
  %v2_15960 = inttoptr i32 %v3_1594c to i8*
  %v3_15960 = call i32 @function_12940(i8* %v2_15960, i32 %v0_1595c)
  store i32 %v3_15960, i32* %r0.global-to-local, align 4
  store i32 %v1_157b4, i32* %r2.global-to-local, align 4
  store i1 %v2_15968, i1* %cpsr_z.global-to-local, align 1
  %v0_1596c = load i32, i32* @r5, align 4
  %v1_1596c = add i32 %v0_1596c, 12
  %v2_1596c = inttoptr i32 %v1_1596c to i32*
  %v3_1596c = load i32, i32* %v2_1596c, align 4
  store i32 %v3_1596c, i32* @r4, align 4
  br i1 %v2_15968, label %dec_label_pc_15984, label %dec_label_pc_15974

dec_label_pc_15974:                               ; preds = %dec_label_pc_1594c
  store i32 %v3_1596c, i32* @r0, align 4
  %v0_15978 = load i32, i32* @sl, align 4
  %v2_1597c = inttoptr i32 %v3_1596c to i8*
  %v3_1597c = call i32 @function_16de4(i8* %v2_1597c, i32 %v0_15978)
  store i32 %v3_1597c, i32* %r0.global-to-local, align 4
  %v0_15980 = load i32, i32* @r4, align 4
  %v2_15980 = add i32 %v0_15980, %v3_1597c
  store i32 %v2_15980, i32* @r4, align 4
  br label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_1594c, %dec_label_pc_15974
  %v0_15a5c13 = phi i32 [ %v3_1596c, %dec_label_pc_1594c ], [ %v2_15980, %dec_label_pc_15974 ]
  %v1_15984 = inttoptr i32 %v0_15a5c13 to i8*
  %v2_15984 = load i8, i8* %v1_15984, align 1
  %v3_15984 = zext i8 %v2_15984 to i32
  store i32 %v3_15984, i32* %r2.global-to-local, align 4
  %v2_15988 = icmp eq i8 %v2_15984, 0
  store i1 %v2_15988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15988, label %dec_label_pc_157dc.backedge, label %dec_label_pc_15990

dec_label_pc_157dc.backedge:                      ; preds = %dec_label_pc_15984, %dec_label_pc_15a84, %dec_label_pc_15990
  %v0_157dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_157dc

dec_label_pc_15990:                               ; preds = %dec_label_pc_15984
  %v0_15990 = load i32, i32* @r7, align 4
  %v1_15990 = inttoptr i32 %v0_15990 to i8*
  %v2_15990 = load i8, i8* %v1_15990, align 1
  %v3_15990 = zext i8 %v2_15990 to i32
  store i32 %v3_15990, i32* %r3.global-to-local, align 4
  %v9_15994 = icmp eq i8 %v2_15990, %v2_15984
  store i1 %v9_15994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15994, label %dec_label_pc_157dc.backedge, label %dec_label_pc_15a5c.preheader

dec_label_pc_15a5c.preheader:                     ; preds = %dec_label_pc_15990
  %v1_15998 = load i32, i32* @fp, align 4
  store i32 %v1_15998, i32* @r6, align 4
  %v2_15a5c15 = load i8, i8* %v1_15984, align 1
  %v3_15a5c16 = zext i8 %v2_15a5c15 to i32
  store i32 %v3_15a5c16, i32* %r2.global-to-local, align 4
  %v2_15a6017 = icmp eq i8 %v2_15a5c15, 0
  store i1 %v2_15a6017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a6017, label %dec_label_pc_15a78, label %dec_label_pc_15a68.preheader

dec_label_pc_15a68.preheader:                     ; preds = %dec_label_pc_15a5c.preheader
  %v2_15a6882 = load i8, i8* %v1_15990, align 1
  %v3_15a6883 = zext i8 %v2_15a6882 to i32
  store i32 %v3_15a6883, i32* %r3.global-to-local, align 4
  %v9_15a6c86 = icmp eq i8 %v2_15a6882, %v2_15a5c15
  store i1 %v9_15a6c86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a6c86, label %dec_label_pc_15a78, label %bb74

dec_label_pc_159a4:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_159a8 = load i32, i32* %v2_15958, align 4
  store i32 %v2_159a8, i32* %r3.global-to-local, align 4
  store i32 %v1_157b8, i32* %r2.global-to-local, align 4
  %v9_159b0 = icmp eq i32 %v2_159b488, %v1_157b8
  store i1 %v9_159b0, i1* %cpsr_z.global-to-local, align 1
  %v5_159b4 = mul i32 %v2_159b488, 4
  %v6_159b4 = add i32 %v2_159a8, %v5_159b4
  %v7_159b4 = inttoptr i32 %v6_159b4 to i32*
  store i32 %v0_159b487, i32* %v7_159b4, align 4
  br i1 %v9_159b0, label %dec_label_pc_159bc, label %dec_label_pc_159c8

dec_label_pc_159bc:                               ; preds = %dec_label_pc_159a4
  store i32 %v1_157c4, i32* %r3.global-to-local, align 4
  store i1 %v2_159c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159c0, label %dec_label_pc_159c8, label %dec_label_pc_159e8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159bc, %dec_label_pc_159a4
  %v0_159c8 = load i32, i32* @r7, align 4
  %v1_159c8 = inttoptr i32 %v0_159c8 to i8*
  %v2_159c8 = load i8, i8* %v1_159c8, align 1
  %v3_159c8 = zext i8 %v2_159c8 to i32
  store i32 %v3_159c8, i32* %r3.global-to-local, align 4
  %v2_159cc = icmp eq i8 %v2_159c8, 0
  store i1 %v2_159cc, i1* %cpsr_z.global-to-local, align 1
  %v0_159d0 = load i32, i32* @r4, align 4
  store i32 %v0_159d0, i32* @r0, align 4
  %v1_159d4 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_159cc, i32 %v1_159d4, i32 %v0_159c8
  store i32 %storemerge, i32* @r1, align 4
  %v0_159dc = call i32 @function_16da0()
  store i32 %v0_159dc, i32* %r0.global-to-local, align 4
  %v0_159e0 = load i32, i32* @r4, align 4
  %v2_159e0 = add i32 %v0_159e0, %v0_159dc
  store i32 %v2_159e0, i32* @r4, align 4
  br label %dec_label_pc_15a20

dec_label_pc_159e8:                               ; preds = %dec_label_pc_159bc
  %v0_159e8 = load i32, i32* @r4, align 4
  store i32 %v0_159e8, i32* @r0, align 4
  %v0_159ec = load i32, i32* @r7, align 4
  %v1_159ec = inttoptr i32 %v0_159ec to i8*
  %v2_159ec = load i8, i8* %v1_159ec, align 1
  %v3_159ec = zext i8 %v2_159ec to i32
  %v5_159f0 = call i32 @function_16e80(i32 %v0_159e8, i32 %v3_159ec, i32 %v1_157b8, i32 %v1_157c4)
  store i32 %v5_159f0, i32* %r0.global-to-local, align 4
  store i32 %v1_157b4, i32* %r2.global-to-local, align 4
  store i1 %v2_15968, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_159f0, i32* @r4, align 4
  br i1 %v2_15968, label %dec_label_pc_15a20, label %dec_label_pc_15a0c

dec_label_pc_15a08:                               ; preds = %dec_label_pc_15a0c
  %v1_15a08 = add i32 %v0_15a20.pre, -1
  store i32 %v1_15a08, i32* @r4, align 4
  br label %dec_label_pc_15a0c

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_159e8, %dec_label_pc_15a08
  %v0_15a0c = phi i32 [ %v1_15a08, %dec_label_pc_15a08 ], [ %v5_159f0, %dec_label_pc_159e8 ]
  %v1_15a0c = add i32 %v0_15a0c, -1
  %v2_15a0c = inttoptr i32 %v1_15a0c to i8*
  %v3_15a0c = load i8, i8* %v2_15a0c, align 1
  %v4_15a0c = zext i8 %v3_15a0c to i32
  %v0_15a10 = load i32, i32* @sl, align 4
  store i32 %v0_15a10, i32* @r0, align 4
  %v2_15a14 = call i32 @function_16f6c(i32 %v0_15a10, i32 %v4_15a0c)
  store i32 %v2_15a14, i32* %r0.global-to-local, align 4
  %v2_15a18 = icmp eq i32 %v2_15a14, 0
  store i1 %v2_15a18, i1* %cpsr_z.global-to-local, align 1
  %v0_15a20.pre = load i32, i32* @r4, align 4
  br i1 %v2_15a18, label %dec_label_pc_15a20, label %dec_label_pc_15a08

dec_label_pc_15a20:                               ; preds = %dec_label_pc_15a0c, %dec_label_pc_159e8, %dec_label_pc_159c8
  %v3_15a2c = phi i32 [ %v5_159f0, %dec_label_pc_159e8 ], [ %v2_159e0, %dec_label_pc_159c8 ], [ %v0_15a20.pre, %dec_label_pc_15a0c ]
  %v1_15a20 = inttoptr i32 %v3_15a2c to i8*
  %v2_15a20 = load i8, i8* %v1_15a20, align 1
  %v3_15a20 = zext i8 %v2_15a20 to i32
  store i32 %v3_15a20, i32* %r2.global-to-local, align 4
  %v0_15a24 = load i32, i32* @r7, align 4
  %v1_15a24 = inttoptr i32 %v0_15a24 to i8*
  %v2_15a24 = load i8, i8* %v1_15a24, align 1
  %v3_15a24 = zext i8 %v2_15a24 to i32
  store i32 %v3_15a24, i32* %r3.global-to-local, align 4
  %v9_15a28 = icmp eq i8 %v2_15a24, %v2_15a20
  store i1 %v9_15a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a28, label %bb71, label %dec_label_pc_15a34

bb71:                                             ; preds = %dec_label_pc_15a20
  %v1_15a2c = load i32, i32* @fp, align 4
  %v2_15a2c = trunc i32 %v1_15a2c to i8
  store i8 %v2_15a2c, i8* %v1_15a20, align 1
  %v0_15a30.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15a30.pr, label %bb73, label %.dec_label_pc_15a34_crit_edge

.dec_label_pc_15a34_crit_edge:                    ; preds = %bb71
  %v0_15a34.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %.dec_label_pc_15a34_crit_edge, %dec_label_pc_15a20
  %v0_15a34 = phi i32 [ %v0_15a34.pre, %.dec_label_pc_15a34_crit_edge ], [ %v3_15a20, %dec_label_pc_15a20 ]
  %v2_15a34 = icmp eq i32 %v0_15a34, 0
  store i1 %v2_15a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a34, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_15a34
  %v1_15a38 = load i32, i32* @fp, align 4
  %v2_15a38 = trunc i32 %v1_15a38 to i8
  %v3_15a38 = load i32, i32* @r4, align 4
  %v4_15a38 = inttoptr i32 %v3_15a38 to i8*
  store i8 %v2_15a38, i8* %v4_15a38, align 1
  %v5_15a38 = load i32, i32* @r4, align 4
  %v6_15a38 = add i32 %v5_15a38, 1
  store i32 %v6_15a38, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_15a34, %bb72
  %v2_15a3c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15a3c, i32* %r3.global-to-local, align 4
  %v2_15a40 = icmp eq i32 %v2_15a3c, 0
  store i1 %v2_15a40, i1* %cpsr_z.global-to-local, align 1
  %v0_15a5c.pre = load i32, i32* @r4, align 4
  br i1 %v2_15a40, label %dec_label_pc_15a58, label %dec_label_pc_15a48

dec_label_pc_15a48:                               ; preds = %bb73
  store i32 %v0_15a5c.pre, i32* @r0, align 4
  %v0_15a4c = load i32, i32* @sl, align 4
  %v2_15a50 = inttoptr i32 %v0_15a5c.pre to i8*
  %v3_15a50 = call i32 @function_16de4(i8* %v2_15a50, i32 %v0_15a4c)
  store i32 %v3_15a50, i32* %r0.global-to-local, align 4
  %v0_15a54 = load i32, i32* @r4, align 4
  %v2_15a54 = add i32 %v0_15a54, %v3_15a50
  store i32 %v2_15a54, i32* @r4, align 4
  br label %dec_label_pc_15a58

dec_label_pc_15a58:                               ; preds = %bb73, %dec_label_pc_15a48
  %v0_15a5c = phi i32 [ %v2_15a54, %dec_label_pc_15a48 ], [ %v0_15a5c.pre, %bb73 ]
  %v0_15a58 = load i32, i32* @r6, align 4
  %v1_15a58 = add i32 %v0_15a58, 1
  store i32 %v1_15a58, i32* @r6, align 4
  %v1_15a5c = inttoptr i32 %v0_15a5c to i8*
  %v2_15a5c = load i8, i8* %v1_15a5c, align 1
  %v3_15a5c = zext i8 %v2_15a5c to i32
  store i32 %v3_15a5c, i32* %r2.global-to-local, align 4
  %v2_15a60 = icmp eq i8 %v2_15a5c, 0
  store i1 %v2_15a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a60, label %dec_label_pc_15a78, label %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge

dec_label_pc_15a58.dec_label_pc_15a68_crit_edge:  ; preds = %dec_label_pc_15a58
  %v0_15a68.pre = load i32, i32* @r7, align 4
  %v1_15a68 = inttoptr i32 %v0_15a68.pre to i8*
  %v2_15a68 = load i8, i8* %v1_15a68, align 1
  %v3_15a68 = zext i8 %v2_15a68 to i32
  store i32 %v3_15a68, i32* %r3.global-to-local, align 4
  %v9_15a6c = icmp eq i8 %v2_15a68, %v2_15a5c
  store i1 %v9_15a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a6c, label %dec_label_pc_15a78, label %bb74

bb74:                                             ; preds = %dec_label_pc_15a68.preheader, %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge
  %v2_159b488 = phi i32 [ %v1_15a58, %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge ], [ %v1_15998, %dec_label_pc_15a68.preheader ]
  %v0_159b487 = phi i32 [ %v0_15a5c, %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge ], [ %v0_15a5c13, %dec_label_pc_15a68.preheader ]
  %v2_15a70 = load i32, i32* @sb, align 4
  %v3_15a70 = sub i32 %v2_159b488, %v2_15a70
  %v5_15a70 = xor i32 %v2_15a70, %v2_159b488
  %v6_15a70 = xor i32 %v3_15a70, %v2_159b488
  %v7_15a70 = and i32 %v6_15a70, %v5_15a70
  %v8_15a70 = icmp slt i32 %v7_15a70, 0
  %v9_15a70 = icmp slt i32 %v3_15a70, 0
  %v10_15a70 = icmp eq i32 %v2_159b488, %v2_15a70
  store i1 %v10_15a70, i1* %cpsr_z.global-to-local, align 1
  %v2_15a74 = xor i1 %v9_15a70, %v8_15a70
  br i1 %v2_15a74, label %dec_label_pc_159a4, label %dec_label_pc_15a78

dec_label_pc_15a78:                               ; preds = %dec_label_pc_15a68.preheader, %bb74, %dec_label_pc_15a58, %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge, %dec_label_pc_15a5c.preheader
  %v0_15a7c = phi i32 [ %v1_15998, %dec_label_pc_15a5c.preheader ], [ %v1_15998, %dec_label_pc_15a68.preheader ], [ %v2_159b488, %bb74 ], [ %v1_15a58, %dec_label_pc_15a58 ], [ %v1_15a58, %dec_label_pc_15a58.dec_label_pc_15a68_crit_edge ]
  store i32 %v3_1579c, i32* %r2.global-to-local, align 4
  %v9_15a7c = icmp eq i32 %v0_15a7c, %v3_1579c
  store i1 %v9_15a7c, i1* %cpsr_z.global-to-local, align 1
  %v6_15a80 = icmp slt i32 %v0_15a7c, %v3_1579c
  br i1 %v6_15a80, label %dec_label_pc_15a84, label %dec_label_pc_15a90

dec_label_pc_15a84:                               ; preds = %dec_label_pc_15a78
  %v0_15a84 = load i32, i32* @r8, align 4
  %v1_15a84 = and i32 %v0_15a84, 1048576
  %v2_15a84 = icmp eq i32 %v1_15a84, 0
  store i1 %v2_15a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a84, label %dec_label_pc_157dc.backedge, label %dec_label_pc_15a8c

dec_label_pc_15a8c:                               ; preds = %dec_label_pc_15a84, %dec_label_pc_15944, %.thread, %dec_label_pc_15778
  br label %dec_label_pc_15a90

dec_label_pc_15a90:                               ; preds = %dec_label_pc_15a78, %dec_label_pc_15860, %dec_label_pc_15a8c
  %v0_15a90 = phi i32 [ %v0_15870, %dec_label_pc_15860 ], [ 0, %dec_label_pc_15a8c ], [ %v0_15a7c, %dec_label_pc_15a78 ]
  store i32 %v0_15a90, i32* %r0.global-to-local, align 4
  store i32 %v3_15778, i32* @r4, align 4
  store i32 %v6_15778, i32* @r5, align 4
  store i32 %v9_15778, i32* @r6, align 4
  store i32 %v12_15778, i32* @r7, align 4
  store i32 %v15_15778, i32* @r8, align 4
  store i32 %v18_15778, i32* @sb, align 4
  store i32 %v21_15778, i32* @sl, align 4
  store i32 %v24_15778, i32* @fp, align 4
  ret i32 %v0_15a90

; uselistorder directives
  uselistorder i32 %v0_15a90, { 1, 0 }
  uselistorder i32 %v0_15a7c, { 0, 2, 1 }
  uselistorder i32 %v3_15a70, { 1, 0 }
  uselistorder i32 %v2_15a70, { 1, 0, 2 }
  uselistorder i32 %v2_159b488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_15a6c, { 1, 0 }
  uselistorder i32 %v0_15a5c.pre, { 0, 2, 1 }
  uselistorder i32 %v5_159f0, { 1, 0, 2, 3 }
  uselistorder i1 %v9_15a6c86, { 1, 0 }
  uselistorder i1 %v9_15994, { 1, 0 }
  uselistorder i32 %v3_1596c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_15944, { 1, 0 }
  uselistorder i1 %v8_1593c, { 1, 0 }
  uselistorder i32 %v3_1590c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_158fc, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_158e4, { 1, 0, 2 }
  uselistorder i32 %v1_158d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_158c0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_158b8, { 1, 0 }
  uselistorder i32 %v1_158a4, { 1, 0 }
  uselistorder i32 %v1_158a0, { 1, 0 }
  uselistorder i32 %v1_15860, { 2, 0, 1 }
  uselistorder i32 %v0_15848, { 1, 0 }
  uselistorder i32 %v1_15838, { 0, 2, 1 }
  uselistorder i1 %v2_15968, { 1, 0, 2, 3 }
  uselistorder i32 %v1_157c4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_157b8, { 2, 1, 0 }
  uselistorder i32 %v3_157a0, { 1, 0 }
  uselistorder i32 %v3_1579c, { 2, 1, 0 }
  uselistorder i32 %v1_15794, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_16d20, { 1, 0 }
  uselistorder i32* @sl, { 6, 7, 8, 9, 10, 11, 12, 44, 0, 45, 46, 13, 14, 127, 128, 129, 130, 131, 132, 135, 136, 137, 1, 138, 139, 140, 141, 142, 143, 145, 2, 144, 147, 146, 148, 149, 150, 151, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 39, 4, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 116, 117, 119, 120, 121, 124, 122, 123, 125, 126, 134, 133, 5, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 210, 3, 213, 214, 215, 216, 217 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_15a90, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a78, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_15a58, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a0c, { 1, 0 }
  uselistorder label %dec_label_pc_157dc.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15984, { 1, 0 }
  uselistorder label %dec_label_pc_15944, { 1, 0 }
  uselistorder label %dec_label_pc_15938, { 0, 2, 1 }
  uselistorder label %dec_label_pc_158fc, { 1, 0 }
  uselistorder label %dec_label_pc_15830, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_15aa0(i32* %arg1) local_unnamed_addr {
dec_label_pc_15aa0:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_15aa4 = icmp eq i32* %arg1, null
  br i1 %v2_15aa4, label %dec_label_pc_15acc, label %dec_label_pc_15aac

dec_label_pc_15aac:                               ; preds = %dec_label_pc_15aa0
  %v2_15aac = load i32, i32* %arg1, align 4
  %v1_15ab0 = inttoptr i32 %v2_15aac to i16*
  %v2_15ab0 = call i32 @function_15b1c(i16* %v1_15ab0)
  %v0_15ab4 = load i32, i32* @r4, align 4
  %v1_15ab4 = add i32 %v0_15ab4, 20
  %v2_15ab4 = inttoptr i32 %v1_15ab4 to i32*
  %v3_15ab4 = load i32, i32* %v2_15ab4, align 4
  %v2_15ab8 = icmp eq i32 %v3_15ab4, 0
  br i1 %v2_15ab8, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15aac
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15aac, %bb
  store i32 88772, i32* @lr, align 4
  %v1_15ac0 = xor i1 %v2_15ab8, true
  call void @__pseudo_cond_branch(i1 %v1_15ac0, i32 ptrtoint (i32* @global_var_13f88.50 to i32))
  %v0_15ac4 = load i32, i32* @r4, align 4
  store i32 %v0_15ac4, i32* @r0, align 4
  %v0_15ac8 = call i32 @function_13f88()
  br label %dec_label_pc_15acc

dec_label_pc_15acc:                               ; preds = %dec_label_pc_15aa0, %bb6
  %v1_15ad0 = phi i32 [ 0, %dec_label_pc_15aa0 ], [ %v0_15ac8, %bb6 ]
  ret i32 %v1_15ad0

; uselistorder directives
  uselistorder i32* null, { 0, 4, 5, 1, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 7, 25, 26, 27, 28, 29, 3, 30, 31, 32, 35, 33, 34, 48, 36, 9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 8, 46, 47 }
  uselistorder label %dec_label_pc_15acc, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_15ad4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ad4:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15ae0 = load i32, i32* @r4, align 4
  store i32 %v3_15ae0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_17de8.627 to i32), i32* @r1, align 4
  %v0_15ae8 = call i32 @function_15cd0()
  store i32 %v0_15ae8, i32* %r0.global-to-local, align 4
  store i32 %v0_15ae8, i32* @r4, align 4
  %v2_15aec = icmp eq i32 %v0_15ae8, 0
  br i1 %v2_15aec, label %bb, label %dec_label_pc_15af8

bb:                                               ; preds = %dec_label_pc_15ad4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15af8:                               ; preds = %dec_label_pc_15ad4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15b00 = call i32 @function_1383c(i32 1, i32 24)
  store i32 %v2_15b00, i32* %r0.global-to-local, align 4
  %v2_15b04 = icmp eq i32 %v2_15b00, 0
  br i1 %v2_15b04, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15af8
  %v1_15b08 = load i32, i32* @r4, align 4
  %v3_15b08 = inttoptr i32 %v2_15b00 to i32*
  store i32 %v1_15b08, i32* %v3_15b08, align 4
  %v1_15b10.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15af8, %bb4
  %v1_15b10 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15af8 ], [ %v1_15b10.pre, %bb4 ]
  %v2_15b0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15b0c, i32* @r4, align 4
  ret i32 %v1_15b10

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_1383c, { 36, 34, 35, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 1, 23, 22, 21, 20, 19, 2, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_15b1c(i16* %arg1) local_unnamed_addr {
dec_label_pc_15b1c:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15b1c = load i32, i32* @r4, align 4
  store i32 %v3_15b1c, i32* %stack_var_-36, align 4
  %v6_15b1c = load i32, i32* @r5, align 4
  %v9_15b1c = load i32, i32* @r6, align 4
  %v12_15b1c = load i32, i32* @r7, align 4
  %v2_15b20 = add i32 %tmp, 52
  %v3_15b20 = inttoptr i32 %v2_15b20 to i32*
  %v4_15b20 = load i32, i32* %v3_15b20, align 4
  %v1_15b28 = sub i32 1, %v4_15b20
  %v2_15b28 = icmp ult i32 %v4_15b20, 2
  br i1 %v2_15b28, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_15b1c
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_15b1c, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_15b28, %dec_label_pc_15b1c ]
  %v0_15b30 = phi i32 [ 0, %bb ], [ %v1_15b28, %dec_label_pc_15b1c ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_15b30 = icmp eq i32 %v0_15b30, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_a5f8.629 to i32), i32 88900), i32* @r6, align 4
  br i1 %v2_15b30, label %dec_label_pc_15b7c, label %dec_label_pc_15b44

dec_label_pc_15b44:                               ; preds = %bb18
  %v4_15b5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_a5f8.629 to i32), i32 88972) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_15b5c)
  %v0_15b70 = load i32, i32* @r6, align 4
  %v2_15b70 = add i32 %v0_15b70, 16
  %v3_15b70 = inttoptr i32 %v2_15b70 to i32*
  %v4_15b70 = load i32, i32* %v3_15b70, align 4
  call void @__pseudo_branch(i32 %v4_15b70)
  %v0_15b7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %bb18, %dec_label_pc_15b44
  %v1_15b84 = phi i32 [ %tmp, %bb18 ], [ %v0_15b7c.pre, %dec_label_pc_15b44 ]
  %v1_15b7c = inttoptr i32 %v1_15b84 to i16*
  %v2_15b7c = load i16, i16* %v1_15b7c, align 2
  %v3_15b7c = zext i16 %v2_15b7c to i32
  %v1_15b80 = and i32 %v3_15b7c, 64
  %v2_15b80 = icmp eq i32 %v1_15b80, 0
  br i1 %v2_15b80, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_15b7c
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_15b7c, %bb19
  %storemerge26 = phi i32 [ %v1_15b84, %bb19 ], [ %v1_15b80, %dec_label_pc_15b7c ]
  %v1_15b88 = xor i1 %v2_15b80, true
  call void @__pseudo_cond_branch(i1 %v1_15b88, i32 ptrtoint (i32* @global_var_164b8.633 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_15b90 = load i32, i32* @r5, align 4
  %v1_15b90 = add i32 %v0_15b90, 4
  %v2_15b90 = inttoptr i32 %v1_15b90 to i32*
  %v3_15b90 = load i32, i32* %v2_15b90, align 4
  %v1_15b94 = call i32 @function_124c8(i32 %v3_15b90)
  %v0_15b9c = load i32, i32* @r6, align 4
  %v2_15ba8 = add i32 %v0_15b9c, 108
  %v3_15ba8 = inttoptr i32 %v2_15ba8 to i32*
  %v4_15ba8 = load i32, i32* %v3_15ba8, align 4
  store i32 %v4_15ba8, i32* @r7, align 4
  %v1_15bb0 = load i32, i32* @r5, align 4
  %v2_15bb0 = add i32 %v1_15bb0, 4
  %v3_15bb0 = inttoptr i32 %v2_15bb0 to i32*
  store i32 -1, i32* %v3_15bb0, align 4
  %v0_15bb8 = load i32, i32* @r6, align 4
  %v2_15bb8 = add i32 %v0_15bb8, 72
  %v3_15bb8 = inttoptr i32 %v2_15bb8 to i32*
  %v4_15bb8 = load i32, i32* %v3_15bb8, align 4
  %v1_15bc0 = icmp slt i32 %v1_15b94, 0
  store i32 %v4_15bb8, i32* %stack_var_-80, align 4
  br i1 %v1_15bc0, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_15bb8)
  %v0_15be8 = load i32, i32* @r6, align 4
  %v2_15be8 = add i32 %v0_15be8, 16
  %v3_15be8 = inttoptr i32 %v2_15be8 to i32*
  %v4_15be8 = load i32, i32* %v3_15be8, align 4
  call void @__pseudo_branch(i32 %v4_15be8)
  %v0_15bf8 = load i32, i32* @r6, align 4
  %v2_15bf8 = add i32 %v0_15bf8, 12
  %v3_15bf8 = inttoptr i32 %v2_15bf8 to i32*
  %v4_15bf8 = load i32, i32* %v3_15bf8, align 4
  %v1_15bfc = inttoptr i32 %v4_15bf8 to i32*
  %v2_15bfc = load i32, i32* %v1_15bfc, align 4
  %v1_15c04 = add i32 %v2_15bfc, 1
  %v2_15c08 = add i32 %v0_15bf8, 24
  %v3_15c08 = inttoptr i32 %v2_15c08 to i32*
  %v4_15c08 = load i32, i32* %v3_15c08, align 4
  store i32 %v4_15c08, i32* @r4, align 4
  store i32 %v1_15c04, i32* %v1_15bfc, align 4
  call void @__pseudo_branch(i32 %v4_15c08)
  %v0_15c20 = load i32, i32* @r5, align 4
  %v1_15c20 = inttoptr i32 %v0_15c20 to i16*
  %v2_15c20 = load i16, i16* %v1_15c20, align 2
  %v1_15c24 = and i16 %v2_15c20, 24576
  %v1_15c28 = or i16 %v1_15c24, 48
  %v0_15c2c = load i32, i32* %sb.global-to-local, align 4
  %v2_15c2c = icmp eq i32 %v0_15c2c, 0
  store i16 %v1_15c28, i16* %v1_15c20, align 2
  br i1 %v2_15c2c, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_15c40 = xor i1 %v2_15c2c, true
  call void @__pseudo_cond_branch(i1 %v2_15c40, i32 %v4_15c08)
  %v0_15c44 = load i32, i32* @r5, align 4
  %v1_15c44 = inttoptr i32 %v0_15c44 to i16*
  %v2_15c44 = load i16, i16* %v1_15c44, align 2
  %v1_15c48 = and i16 %v2_15c44, 16384
  %v2_15c48 = icmp eq i16 %v1_15c48, 0
  br i1 %v2_15c48, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_15c50 = xor i1 %v2_15c48, true
  call void @__pseudo_cond_branch(i1 %v1_15c50, i32 ptrtoint (i32* @global_var_13f88.50 to i32))
  %v2_15c5c = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_15c5c)
  call void @__pseudo_branch(i32 %v4_15be8)
  %v0_15c7c = load i32, i32* @r6, align 4
  %v2_15c7c = add i32 %v0_15c7c, 48
  %v3_15c7c = inttoptr i32 %v2_15c7c to i32*
  %v4_15c7c = load i32, i32* %v3_15c7c, align 4
  %v1_15c80 = inttoptr i32 %v4_15c7c to i32*
  %v2_15c80 = load i32, i32* %v1_15c80, align 4
  %v1_15c84 = add i32 %v2_15c80, 1
  store i32 %v1_15c84, i32* %v1_15c80, align 4
  call void @__pseudo_branch(i32 %v4_15c08)
  %v0_15c9c = call i32 @function_16330()
  %v0_15ca0 = load i32, i32* %sl.global-to-local, align 4
  %v2_15ca8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15ca8, i32* @r4, align 4
  store i32 %v6_15b1c, i32* @r5, align 4
  store i32 %v9_15b1c, i32* @r6, align 4
  store i32 %v12_15b1c, i32* @r7, align 4
  ret i32 %v0_15ca0

; uselistorder directives
  uselistorder i1 %v2_15c48, { 1, 0 }
  uselistorder i32 %v4_15c08, { 0, 2, 1, 3 }
  uselistorder i32 %v4_15b20, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_124c8, { 34, 7, 11, 10, 33, 9, 8, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_15b7c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_15cb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15cb4:
  %v0_15cb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15cb4, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_15cb4
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15cb4, %bb
  %v10_15ccc = phi i32 [ %arg1, %dec_label_pc_15cb4 ], [ 0, %bb ]
  ret i32 %v10_15ccc

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_15cd0() local_unnamed_addr {
dec_label_pc_15cd0:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15ce0 = call i32 @function_15cf0()
  ret i32 %v0_15ce0
}

define i32 @function_15cf0() local_unnamed_addr {
dec_label_pc_15cf0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15cf0 = load i32, i32* @r4, align 4
  store i32 %v3_15cf0, i32* %stack_var_-36, align 4
  %v6_15cf0 = load i32, i32* @r5, align 4
  %v9_15cf0 = load i32, i32* @r6, align 4
  %v18_15cf0 = load i32, i32* @sb, align 4
  %v24_15cf0 = load i32, i32* @fp, align 4
  %v0_15cf4 = load i32, i32* @r1, align 4
  %v1_15cf4 = inttoptr i32 %v0_15cf4 to i8*
  %v2_15cf4 = load i8, i8* %v1_15cf4, align 1
  %v3_15cf4 = zext i8 %v2_15cf4 to i32
  store i32 %v3_15cf4, i32* @ip, align 4
  %v7_15cfc = icmp eq i8 %v2_15cf4, 114
  store i32 131388, i32* @fp, align 4
  %v2_15d04 = ptrtoint i32* %stack_var_-72 to i32
  %v0_15d08 = load i32, i32* @r0, align 4
  store i32 %v0_15d08, i32* @r6, align 4
  %v0_15d0c = load i32, i32* @r2, align 4
  store i32 %v0_15d0c, i32* @sb, align 4
  %v0_15d10 = load i32, i32* @r3, align 4
  store i32 %v0_15d10, i32* @r5, align 4
  br i1 %v7_15cfc, label %dec_label_pc_15d5c, label %dec_label_pc_15d18

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15cf0
  %v7_15d18 = icmp eq i8 %v2_15cf4, 119
  br i1 %v7_15d18, label %bb, label %dec_label_pc_15d24

bb:                                               ; preds = %dec_label_pc_15d18
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15d60

dec_label_pc_15d24:                               ; preds = %dec_label_pc_15d18
  %v7_15d24 = icmp eq i8 %v2_15cf4, 97
  br i1 %v7_15d24, label %bb32, label %dec_label_pc_15d30

bb32:                                             ; preds = %dec_label_pc_15d24
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15d60

dec_label_pc_15d30:                               ; preds = %dec_label_pc_15d24, %dec_label_pc_15de4, %dec_label_pc_15db8
  %v0_15d30 = call i32 @function_128f0()
  store i32 %v0_15d30, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15d38 = load i32, i32* @sb, align 4
  %v2_15d38 = icmp eq i32 %v0_15d38, 0
  %v2_15d3c = inttoptr i32 %v0_15d30 to i32*
  store i32 22, i32* %v2_15d3c, align 4
  br i1 %v2_15d38, label %dec_label_pc_15fb0, label %dec_label_pc_15d44

dec_label_pc_15d44:                               ; preds = %dec_label_pc_15e08._crit_edge, %dec_label_pc_15d30
  %v0_15d44 = load i32, i32* @sb, align 4
  %v1_15d44 = inttoptr i32 %v0_15d44 to i16*
  %v2_15d44 = load i16, i16* %v1_15d44, align 2
  %v3_15d44 = zext i16 %v2_15d44 to i32
  store i32 %v3_15d44, i32* %r3.global-to-local, align 4
  %v1_15d48 = and i32 %v3_15d44, 8192
  %v2_15d48 = icmp eq i32 %v1_15d48, 0
  br i1 %v2_15d48, label %dec_label_pc_15fb0, label %dec_label_pc_15d50

dec_label_pc_15d50:                               ; preds = %dec_label_pc_15d44
  store i32 %v0_15d44, i32* @r0, align 4
  %v0_15d54 = call i32 @function_13f88()
  store i32 %v0_15d54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15fb0

dec_label_pc_15d5c:                               ; preds = %dec_label_pc_15cf0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15d60

dec_label_pc_15d60:                               ; preds = %bb, %bb32, %dec_label_pc_15d5c
  %v1_15d78 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_15d5c ]
  %v1_15d60 = add i32 %v0_15cf4, 1
  %v2_15d60 = inttoptr i32 %v1_15d60 to i8*
  %v3_15d60 = load i8, i8* %v2_15d60, align 1
  %v7_15d64 = icmp eq i8 %v3_15d60, 98
  %v1_15d60.v0_15cf4 = select i1 %v7_15d64, i32 %v1_15d60, i32 %v0_15cf4
  store i32 %v1_15d60.v0_15cf4, i32* %r3.global-to-local, align 4
  %v1_15d70 = add i32 %v1_15d60.v0_15cf4, 1
  %v2_15d70 = inttoptr i32 %v1_15d70 to i8*
  %v3_15d70 = load i8, i8* %v2_15d70, align 1
  %v4_15d70 = zext i8 %v3_15d70 to i32
  store i32 %v4_15d70, i32* @r3, align 4
  %v7_15d74 = icmp eq i8 %v3_15d70, 43
  br i1 %v7_15d74, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_15d60
  store i32 %v1_15d78, i32* @r3, align 4
  %v2_15d7c = add nuw nsw i32 %v1_15d78, 1
  store i32 %v2_15d7c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15d60, %bb35
  %v2_15d80 = icmp eq i32 %v0_15d0c, 0
  br i1 %v2_15d80, label %dec_label_pc_15d88, label %dec_label_pc_15db0

dec_label_pc_15d88:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_15d8c = call i32 @function_12f1c()
  store i32 %v0_15d8c, i32* %r0.global-to-local, align 4
  store i32 %v0_15d8c, i32* @sb, align 4
  %v3_15d90 = icmp eq i32 %v0_15d8c, 0
  br i1 %v3_15d90, label %dec_label_pc_15fb4, label %dec_label_pc_15d98

dec_label_pc_15d98:                               ; preds = %dec_label_pc_15d88
  %v2_15d9c = add i32 %v0_15d8c, 8
  %v3_15d9c = inttoptr i32 %v2_15d9c to i32*
  store i32 0, i32* %v3_15d9c, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_15da4 = load i32, i32* @sb, align 4
  %v3_15da4 = inttoptr i32 %v2_15da4 to i16*
  store i16 8192, i16* %v3_15da4, align 2
  %v0_15da8 = load i32, i32* @sb, align 4
  %v1_15da8 = add i32 %v0_15da8, 56
  store i32 %v1_15da8, i32* @r0, align 4
  %v1_15dac = call i32 @function_16060(i32 %v1_15da8)
  store i32 %v1_15dac, i32* %r0.global-to-local, align 4
  %v0_15db0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15db0

dec_label_pc_15db0:                               ; preds = %.thread3, %dec_label_pc_15d98
  %v0_15e08 = phi i32 [ %v0_15d10, %.thread3 ], [ %v0_15db0.pre, %dec_label_pc_15d98 ]
  %v1_15db0 = icmp slt i32 %v0_15e08, 0
  br i1 %v1_15db0, label %dec_label_pc_15e08, label %dec_label_pc_15db8

dec_label_pc_15db8:                               ; preds = %dec_label_pc_15db0
  %v0_15dbc = load i32, i32* @r4, align 4
  %v2_15dbc = and i32 %v0_15dbc, 131075
  %v1_15dc0 = add nuw nsw i32 %v2_15dbc, 1
  store i32 %v1_15dc0, i32* %r2.global-to-local, align 4
  %v0_15dc4 = load i32, i32* @r6, align 4
  %v1_15dc4 = add i32 %v0_15dc4, 1
  %v2_15dc8 = and i32 %v1_15dc4, %v1_15dc0
  store i32 %v2_15dc8, i32* %r3.global-to-local, align 4
  %v9_15dcc = icmp eq i32 %v2_15dc8, %v1_15dc0
  %v1_15dd0 = load i32, i32* @sb, align 4
  %v2_15dd0 = add i32 %v1_15dd0, 4
  %v3_15dd0 = inttoptr i32 %v2_15dd0 to i32*
  store i32 %v0_15e08, i32* %v3_15dd0, align 4
  br i1 %v9_15dcc, label %dec_label_pc_15dd8, label %dec_label_pc_15d30

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15db8
  %v0_15dd8 = load i32, i32* @r4, align 4
  %v1_15dd8 = load i32, i32* @r6, align 4
  %v2_15dd8 = sub i32 -1, %v1_15dd8
  %v3_15dd8 = and i32 %v0_15dd8, %v2_15dd8
  store i32 %v3_15dd8, i32* @r3, align 4
  %v1_15ddc = and i32 %v3_15dd8, 1024
  %v2_15ddc = icmp eq i32 %v1_15ddc, 0
  br i1 %v2_15ddc, label %dec_label_pc_15dfc, label %dec_label_pc_15de4

dec_label_pc_15de4:                               ; preds = %dec_label_pc_15dd8
  %v0_15de4 = load i32, i32* @r5, align 4
  store i32 %v0_15de4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_15df0 = call i32 @function_122fc(i32 %v0_15de4, i32 4)
  store i32 %v2_15df0, i32* %r0.global-to-local, align 4
  %v2_15df4 = icmp eq i32 %v2_15df0, 0
  br i1 %v2_15df4, label %dec_label_pc_15de4.dec_label_pc_15dfc_crit_edge, label %dec_label_pc_15d30

dec_label_pc_15de4.dec_label_pc_15dfc_crit_edge:  ; preds = %dec_label_pc_15de4
  %v0_15dfc.pre = load i32, i32* @r6, align 4
  %v0_15e00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15dfc

dec_label_pc_15dfc:                               ; preds = %dec_label_pc_15de4.dec_label_pc_15dfc_crit_edge, %dec_label_pc_15dd8
  %v0_15e00 = phi i32 [ %v0_15e00.pre, %dec_label_pc_15de4.dec_label_pc_15dfc_crit_edge ], [ %v0_15dd8, %dec_label_pc_15dd8 ]
  %v0_15dfc = phi i32 [ %v0_15dfc.pre, %dec_label_pc_15de4.dec_label_pc_15dfc_crit_edge ], [ %v1_15dd8, %dec_label_pc_15dd8 ]
  %v1_15dfc = and i32 %v0_15dfc, 131072
  store i32 %v1_15dfc, i32* %r3.global-to-local, align 4
  %v2_15e00 = or i32 %v1_15dfc, %v0_15e00
  store i32 %v2_15e00, i32* @r4, align 4
  br label %dec_label_pc_15e2c

dec_label_pc_15e08:                               ; preds = %dec_label_pc_15db0
  %v7_15e08 = icmp eq i32 %v0_15e08, -1
  %v0_15e14.pre = load i32, i32* @r4, align 4
  br i1 %v7_15e08, label %dec_label_pc_15e08._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_15e08
  %v2_15e0c = or i32 %v0_15e14.pre, 131072
  store i32 %v2_15e0c, i32* @r4, align 4
  br label %dec_label_pc_15e08._crit_edge

dec_label_pc_15e08._crit_edge:                    ; preds = %dec_label_pc_15e08, %bb36
  %v0_15e14 = phi i32 [ %v2_15e0c, %bb36 ], [ %v0_15e14.pre, %dec_label_pc_15e08 ]
  %v0_15e10 = load i32, i32* @r6, align 4
  store i32 %v0_15e10, i32* %r0.global-to-local, align 4
  store i32 %v0_15e14, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15e1c = call i32 @function_120d4(i32 %v0_15e10, i32 %v0_15e14)
  store i32 %v2_15e1c, i32* %r0.global-to-local, align 4
  %v1_15e20 = icmp slt i32 %v2_15e1c, 0
  %v1_15e24 = load i32, i32* @sb, align 4
  %v2_15e24 = add i32 %v1_15e24, 4
  %v3_15e24 = inttoptr i32 %v2_15e24 to i32*
  store i32 %v2_15e1c, i32* %v3_15e24, align 4
  br i1 %v1_15e20, label %dec_label_pc_15d44, label %.dec_label_pc_15e2c_crit_edge

.dec_label_pc_15e2c_crit_edge:                    ; preds = %dec_label_pc_15e08._crit_edge
  %v0_15e30.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e2c

dec_label_pc_15e2c:                               ; preds = %.dec_label_pc_15e2c_crit_edge, %dec_label_pc_15dfc
  %v0_15e48 = phi i32 [ %v0_15e30.pre, %.dec_label_pc_15e2c_crit_edge ], [ %v2_15e00, %dec_label_pc_15dfc ]
  %v0_15e2c = load i32, i32* @sb, align 4
  %v1_15e2c = inttoptr i32 %v0_15e2c to i16*
  %v2_15e2c = load i16, i16* %v1_15e2c, align 2
  %v3_15e2c = zext i16 %v2_15e2c to i32
  %v1_15e30 = urem i32 %v0_15e48, 4
  %v1_15e34 = and i32 %v0_15e48, 1024
  %v1_15e38 = and i32 %v3_15e2c, 8192
  %v1_15e3c = add nuw nsw i32 %v1_15e30, 1
  %v2_15e40 = or i32 %v1_15e38, %v1_15e34
  store i32 %v2_15e40, i32* %r3.global-to-local, align 4
  %v1_15e44 = xor i32 %v1_15e3c, 3
  store i32 %v1_15e44, i32* %r1.global-to-local, align 4
  %v1_15e48 = and i32 %v0_15e48, 131072
  store i32 %v1_15e48, i32* %r2.global-to-local, align 4
  %v2_15e48 = icmp eq i32 %v1_15e48, 0
  %v1_15e4c = add i32 %v0_15e2c, 4
  %v2_15e4c = inttoptr i32 %v1_15e4c to i32*
  %v3_15e4c = load i32, i32* %v2_15e4c, align 4
  store i32 %v3_15e4c, i32* @r5, align 4
  br i1 %v2_15e48, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_15e2c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_15e2c, %bb37
  %v0_15e58 = phi i32 [ 0, %dec_label_pc_15e2c ], [ 32768, %bb37 ]
  %v4_15e54 = mul nuw nsw i32 %v1_15e44, 16
  %v5_15e54 = or i32 %v2_15e40, %v4_15e54
  store i32 %v5_15e54, i32* %r3.global-to-local, align 4
  %v2_15e58 = or i32 %v0_15e58, %v5_15e54
  store i32 %v2_15e58, i32* %r2.global-to-local, align 4
  %v8_15e5c = icmp eq i32 %v3_15e4c, 2147483647
  %v1_15e60 = trunc i32 %v2_15e58 to i16
  store i16 %v1_15e60, i16* %v1_15e2c, align 2
  br i1 %v8_15e5c, label %dec_label_pc_15e90, label %dec_label_pc_15e68

dec_label_pc_15e68:                               ; preds = %bb38
  %v0_15e68 = call i32 @function_128f0()
  store i32 %v0_15e68, i32* @r4, align 4
  %v0_15e70 = load i32, i32* @r5, align 4
  store i32 %v0_15e70, i32* @r0, align 4
  %v1_15e74 = inttoptr i32 %v0_15e68 to i32*
  %v2_15e74 = load i32, i32* %v1_15e74, align 4
  store i32 %v2_15e74, i32* @r5, align 4
  %v1_15e78 = call i32 @function_1705c(i32 %v0_15e70)
  store i32 %v1_15e78, i32* %r0.global-to-local, align 4
  %v2_15e7c = icmp eq i32 %v1_15e78, 0
  br i1 %v2_15e7c, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_15e68
  %v1_15e80 = load i32, i32* @sb, align 4
  %v2_15e80 = inttoptr i32 %v1_15e80 to i16*
  %v3_15e80 = load i16, i16* %v2_15e80, align 2
  %v4_15e80 = zext i16 %v3_15e80 to i32
  %v2_15e84 = or i32 %v4_15e80, 256
  store i32 %v2_15e84, i32* %r3.global-to-local, align 4
  %v2_15e88 = trunc i32 %v2_15e84 to i16
  store i16 %v2_15e88, i16* %v2_15e80, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15e68, %bb39
  %v0_15e8c = load i32, i32* @r5, align 4
  %v1_15e8c = load i32, i32* @r4, align 4
  %v2_15e8c = inttoptr i32 %v1_15e8c to i32*
  store i32 %v0_15e8c, i32* %v2_15e8c, align 4
  br label %dec_label_pc_15e90

dec_label_pc_15e90:                               ; preds = %bb38, %.thread5
  %v0_15e90 = load i32, i32* @sb, align 4
  %v1_15e90 = add i32 %v0_15e90, 8
  %v2_15e90 = inttoptr i32 %v1_15e90 to i32*
  %v3_15e90 = load i32, i32* %v2_15e90, align 4
  store i32 %v3_15e90, i32* %r3.global-to-local, align 4
  %v2_15e94 = icmp eq i32 %v3_15e90, 0
  br i1 %v2_15e94, label %dec_label_pc_15e9c, label %bb40

dec_label_pc_15e9c:                               ; preds = %dec_label_pc_15e90
  store i32 4096, i32* @r0, align 4
  %v0_15ea0 = call i32 @function_12f1c()
  store i32 %v0_15ea0, i32* %r0.global-to-local, align 4
  %v2_15ea4 = icmp eq i32 %v0_15ea0, 0
  %v1_15eb4.pre = load i32, i32* @sb, align 4
  br i1 %v2_15ea4, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_15e9c
  %v2_15ea8 = inttoptr i32 %v1_15eb4.pre to i16*
  %v3_15ea8 = load i16, i16* %v2_15ea8, align 2
  %v4_15ea8 = zext i16 %v3_15ea8 to i32
  %v2_15eac = add i32 %v0_15ea0, 4096
  store i32 %v2_15eac, i32* %r2.global-to-local, align 4
  %v2_15eb0 = or i32 %v4_15ea8, 16384
  store i32 %v2_15eb0, i32* %r3.global-to-local, align 4
  %v2_15eb4 = add i32 %v1_15eb4.pre, 8
  %v3_15eb4 = inttoptr i32 %v2_15eb4 to i32*
  store i32 %v0_15ea0, i32* %v3_15eb4, align 4
  %v1_15eb8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15eb8 = load i32, i32* @sb, align 4
  %v3_15eb8 = add i32 %v2_15eb8, 12
  %v4_15eb8 = inttoptr i32 %v3_15eb8 to i32*
  store i32 %v1_15eb8, i32* %v4_15eb8, align 4
  %v1_15ebc = load i32, i32* %r3.global-to-local, align 4
  %v2_15ebc = trunc i32 %v1_15ebc to i16
  %v3_15ebc = load i32, i32* @sb, align 4
  %v4_15ebc = inttoptr i32 %v3_15ebc to i16*
  store i16 %v2_15ebc, i16* %v4_15ebc, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_15e9c
  %v2_15eb419 = add i32 %v1_15eb4.pre, 8
  %v3_15eb420 = inttoptr i32 %v2_15eb419 to i32*
  store i32 0, i32* %v3_15eb420, align 4
  %v2_15ec0 = load i32, i32* @sb, align 4
  %v3_15ec0 = add i32 %v2_15ec0, 12
  %v4_15ec0 = inttoptr i32 %v3_15ec0 to i32*
  store i32 0, i32* %v4_15ec0, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_15e90, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_15ecc = load i32, i32* @fp, align 4
  %v2_15ecc = add i32 %v0_15ecc, 56
  %v3_15ecc = inttoptr i32 %v2_15ecc to i32*
  %v4_15ecc = load i32, i32* %v3_15ecc, align 4
  store i32 %v4_15ecc, i32* %r3.global-to-local, align 4
  %v2_15ed0 = load i32, i32* @sb, align 4
  %v3_15ed0 = add i32 %v2_15ed0, 2
  %v4_15ed0 = inttoptr i32 %v3_15ed0 to i8*
  store i8 0, i8* %v4_15ed0, align 1
  %v0_15ed4 = load i32, i32* @sb, align 4
  %v1_15ed4 = inttoptr i32 %v0_15ed4 to i16*
  %v2_15ed4 = load i16, i16* %v1_15ed4, align 2
  %v3_15ed4 = zext i16 %v2_15ed4 to i32
  store i32 %v3_15ed4, i32* %r2.global-to-local, align 4
  %v0_15ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ed8 = inttoptr i32 %v0_15ed8 to i32*
  %v2_15ed8 = load i32, i32* %v1_15ed8, align 4
  store i32 %v2_15ed8, i32* %r1.global-to-local, align 4
  %v1_15edc = add i32 %v0_15ed4, 8
  %v2_15edc = inttoptr i32 %v1_15edc to i32*
  %v3_15edc = load i32, i32* %v2_15edc, align 4
  store i32 %v3_15edc, i32* %r3.global-to-local, align 4
  %v1_15ee0 = and i32 %v3_15ed4, 8192
  %v2_15ee0 = icmp eq i32 %v1_15ee0, 0
  %v2_15ee4 = add i32 %v0_15ed4, 20
  %v3_15ee4 = inttoptr i32 %v2_15ee4 to i32*
  store i32 %v3_15edc, i32* %v3_15ee4, align 4
  %v0_15ee8 = load i32, i32* %r0.global-to-local, align 4
  %v1_15ee8 = load i32, i32* @sb, align 4
  %v2_15ee8 = add i32 %v1_15ee8, 44
  %v3_15ee8 = inttoptr i32 %v2_15ee8 to i32*
  store i32 %v0_15ee8, i32* %v3_15ee8, align 4
  %v0_15eec = load i32, i32* %r1.global-to-local, align 4
  %v1_15eec = load i32, i32* @sb, align 4
  %v2_15eec = add i32 %v1_15eec, 52
  %v3_15eec = inttoptr i32 %v2_15eec to i32*
  store i32 %v0_15eec, i32* %v3_15eec, align 4
  %v0_15ef0 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ef0 = load i32, i32* @sb, align 4
  %v2_15ef0 = add i32 %v1_15ef0, 24
  %v3_15ef0 = inttoptr i32 %v2_15ef0 to i32*
  store i32 %v0_15ef0, i32* %v3_15ef0, align 4
  %v0_15ef4 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ef4 = load i32, i32* @sb, align 4
  %v2_15ef4 = add i32 %v1_15ef4, 28
  %v3_15ef4 = inttoptr i32 %v2_15ef4 to i32*
  store i32 %v0_15ef4, i32* %v3_15ef4, align 4
  %v0_15ef8 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ef8 = load i32, i32* @sb, align 4
  %v2_15ef8 = add i32 %v1_15ef8, 16
  %v3_15ef8 = inttoptr i32 %v2_15ef8 to i32*
  store i32 %v0_15ef8, i32* %v3_15ef8, align 4
  br i1 %v2_15ee0, label %dec_label_pc_15fb4, label %dec_label_pc_15f00

dec_label_pc_15f00:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_15f04 = load i32, i32* @fp, align 4
  %v2_15f04 = add i32 %v0_15f04, 36
  %v3_15f04 = inttoptr i32 %v2_15f04 to i32*
  %v4_15f04 = load i32, i32* %v3_15f04, align 4
  store i32 %v4_15f04, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_15f0c = add i32 %v0_15f04, 108
  %v3_15f0c = inttoptr i32 %v2_15f0c to i32*
  %v4_15f0c = load i32, i32* %v3_15f0c, align 4
  store i32 %v4_15f0c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_15f14 = ptrtoint i32* %stack_var_-56 to i32
  %v2_15f18 = add i32 %v0_15f04, 72
  %v3_15f18 = inttoptr i32 %v2_15f18 to i32*
  %v4_15f18 = load i32, i32* %v3_15f18, align 4
  store i32 %v4_15f04, i32* %r1.global-to-local, align 4
  store i32 %v4_15f0c, i32* %r2.global-to-local, align 4
  store i32 %v2_15f14, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f18)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15f34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15f34, i32* %r0.global-to-local, align 4
  %v0_15f38 = load i32, i32* @fp, align 4
  %v2_15f38 = add i32 %v0_15f38, 16
  %v3_15f38 = inttoptr i32 %v2_15f38 to i32*
  %v4_15f38 = load i32, i32* %v3_15f38, align 4
  call void @__pseudo_branch(i32 %v4_15f38)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15f48 = load i32, i32* @fp, align 4
  %v2_15f48 = add i32 %v0_15f48, 96
  %v3_15f48 = inttoptr i32 %v2_15f48 to i32*
  %v4_15f48 = load i32, i32* %v3_15f48, align 4
  store i32 %v4_15f48, i32* %r4.global-to-local, align 4
  %v0_15f4c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15f4c, i32* %r1.global-to-local, align 4
  store i32 %v4_15f48, i32* %r2.global-to-local, align 4
  store i32 %v2_15d04, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f18)
  store i32 %v4_15f48, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f38)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_15f70 = load i32, i32* @fp, align 4
  %v2_15f70 = add i32 %v0_15f70, 44
  %v3_15f70 = inttoptr i32 %v2_15f70 to i32*
  %v4_15f70 = load i32, i32* %v3_15f70, align 4
  store i32 %v4_15f70, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_15f78 = inttoptr i32 %v4_15f70 to i32*
  %v2_15f78 = load i32, i32* %v1_15f78, align 4
  store i32 %v2_15f78, i32* %r2.global-to-local, align 4
  store i32 %v2_15d04, i32* %r0.global-to-local, align 4
  %v1_15f80 = load i32, i32* @sb, align 4
  %v2_15f80 = add i32 %v1_15f80, 32
  %v3_15f80 = inttoptr i32 %v2_15f80 to i32*
  store i32 %v2_15f78, i32* %v3_15f80, align 4
  %v0_15f84 = load i32, i32* @fp, align 4
  %v1_15f84 = load i32, i32* %r3.global-to-local, align 4
  %v2_15f84 = add i32 %v1_15f84, %v0_15f84
  %v3_15f84 = inttoptr i32 %v2_15f84 to i32*
  %v4_15f84 = load i32, i32* %v3_15f84, align 4
  store i32 %v4_15f84, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15f8c = load i32, i32* @sb, align 4
  %v1_15f8c = load i32, i32* @ip, align 4
  %v2_15f8c = inttoptr i32 %v1_15f8c to i32*
  store i32 %v0_15f8c, i32* %v2_15f8c, align 4
  call void @__pseudo_branch(i32 %v4_15f84)
  store i32 %v2_15f14, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f84)
  br label %dec_label_pc_15fb4

dec_label_pc_15fb0:                               ; preds = %dec_label_pc_15d44, %dec_label_pc_15d30, %dec_label_pc_15d50
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_15fb4

dec_label_pc_15fb4:                               ; preds = %bb40, %dec_label_pc_15d88, %dec_label_pc_15f00, %dec_label_pc_15fb0
  %v0_15fb4 = load i32, i32* @sb, align 4
  store i32 %v0_15fb4, i32* %r0.global-to-local, align 4
  %v2_15fbc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15fbc, i32* %r4.global-to-local, align 4
  store i32 %v6_15cf0, i32* @r5, align 4
  store i32 %v9_15cf0, i32* @r6, align 4
  store i32 %v18_15cf0, i32* @sb, align 4
  store i32 %v24_15cf0, i32* @fp, align 4
  ret i32 %v0_15fb4

; uselistorder directives
  uselistorder i32 %v1_15eb4.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15e48, { 1, 2, 0 }
  uselistorder i32 %v0_15e14, { 1, 0 }
  uselistorder i32 %v1_15dd8, { 1, 0 }
  uselistorder i32 %v0_15dd8, { 1, 0 }
  uselistorder i32 %v1_15dc0, { 1, 0, 2 }
  uselistorder i32 %v1_15d78, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 45, 0, 46, 32, 63, 33, 64, 34, 65, 35, 66, 36, 67, 37, 68, 14, 69, 1, 47, 28, 51, 29, 52, 27, 48, 30, 49, 31, 50, 2, 53, 3, 54, 4, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 11, 62, 38, 70, 12, 71, 13, 72, 17, 73, 16, 74, 40, 75, 41, 76, 15, 77, 39, 78, 79, 18, 80, 19, 81, 20, 82, 42, 83, 21, 84, 22, 85, 24, 86, 23, 87, 25, 88, 26, 89, 44, 90, 91, 92, 43, 93 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 14, 3, 7, 11, 5, 4, 6, 12, 13 }
  uselistorder i32 32768, { 1, 5, 2, 0, 4, 3 }
  uselistorder i32 (i32, i32)* @function_120d4, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_122fc, { 14, 0, 13, 10, 9, 12, 11, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32 ()* @function_12f1c, { 72, 71, 70, 4, 3, 2, 0, 1, 6, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5 }
  uselistorder i32 80, { 6, 3, 4, 5, 1, 2, 9, 7, 8, 10, 0, 11 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 ()* @function_13f88, { 10, 9, 5, 4, 3, 2, 0, 8, 7, 6, 1 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 109, 96, 97, 98, 99, 105, 107, 106, 108, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 62, 63, 64, 65, 66, 67, 68, 1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 2, 103, 104 }
  uselistorder i32* @sb, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 121, 122, 123, 124, 125, 126, 127, 128, 133, 136, 134, 135, 137, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1, 51, 52, 57, 58, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 2, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder label %dec_label_pc_15fb4, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_15fb0, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15e90, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_15e08._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15db0, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15d60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d30, { 1, 2, 0 }
}

define i32 @function_15fc8(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15fc8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_15fc8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15fc8, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_15fc8
  %v1_15fd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15fd0 = load i32, i32* %r3.global-to-local, align 4
  %v3_15fd0 = and i32 %v2_15fd0, %v1_15fd0
  %v2_15fd4 = trunc i32 %v3_15fd0 to i16
  %v4_15fd4 = inttoptr i32 %v3_15fd0 to i16*
  store i16 %v2_15fd4, i16* %v4_15fd4, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15fc8, %bb
  %v0_15ffc = call i32 @function_128f0()
  store i32 %v0_15ffc, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_16008 = inttoptr i32 %v0_15ffc to i32*
  %v2_16008 = load i32, i32* %v1_16008, align 4
  store i32 %v2_16008, i32* @r6, align 4
  %v1_1600c = call i32 @function_1705c(i32 0)
  %v2_16014 = icmp eq i32 %v1_1600c, 0
  store i32 131388, i32* @r4, align 4
  br i1 %v2_16014, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_16020 = load i16, i16* inttoptr (i32 131692 to i16*), align 4
  %v7_16020 = zext i16 %v5_16020 to i32
  %v2_16024 = xor i32 %v7_16020, 256
  store i32 %v2_16024, i32* @r3, align 4
  %v2_16028 = trunc i32 %v2_16024 to i16
  store i16 %v2_16028, i16* inttoptr (i32 131692 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_16030 = call i32 @function_1705c(i32 1)
  %v2_16034 = icmp eq i32 %v1_16030, 0
  br i1 %v2_16034, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_1603c = load i32, i32* @r4, align 4
  %v3_1603c = add i32 %v1_1603c, 304
  store i32 %v3_1603c, i32* %r2.global-to-local, align 4
  %v2_16040 = add i32 %v1_1603c, 384
  %v3_16040 = inttoptr i32 %v2_16040 to i16*
  %v4_16040 = load i16, i16* %v3_16040, align 2
  %v5_16040 = zext i16 %v4_16040 to i32
  %v2_16044 = xor i32 %v5_16040, 256
  store i32 %v2_16044, i32* %r3.global-to-local, align 4
  %v2_16048 = trunc i32 %v2_16044 to i16
  store i16 %v2_16048, i16* %v3_16040, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_1604c = load i32, i32* @r6, align 4
  %v1_1604c = load i32, i32* @r5, align 4
  %v2_1604c = inttoptr i32 %v1_1604c to i32*
  store i32 %v0_1604c, i32* %v2_1604c, align 4
  ret i32 %v1_16030

; uselistorder directives
  uselistorder i32 %v3_15fd0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1705c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_16060(i32 %arg1) local_unnamed_addr {
dec_label_pc_16060:
  store i32 131388, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_18114.656 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_1607c = call i32 @function_129f0()
  ret i32 %v0_1607c
}

define i32 @function_16168(i32 %arg1) local_unnamed_addr {
dec_label_pc_16168:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16168 = load i32, i32* @r4, align 4
  store i32 %v3_16168, i32* %stack_var_-8, align 4
  %v1_1616c = add i32 %arg1, 8
  %v2_1616c = inttoptr i32 %v1_1616c to i32*
  %v3_1616c = load i32, i32* %v2_1616c, align 4
  %v1_16170 = add i32 %arg1, 16
  %v2_16170 = inttoptr i32 %v1_16170 to i32*
  %v3_16170 = load i32, i32* %v2_16170, align 4
  %v9_16174 = icmp eq i32 %v3_16170, %v3_1616c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_16174, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_16168
  store i32 %v3_1616c, i32* %v2_16170, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_16168, %bb
  %v1_16180 = xor i1 %v9_16174, true
  call void @__pseudo_cond_branch(i1 %v1_16180, i32 ptrtoint (i32* @global_var_17448.657 to i32))
  %v0_16184 = load i32, i32* %r4.global-to-local, align 4
  %v1_16184 = add i32 %v0_16184, 8
  %v2_16184 = inttoptr i32 %v1_16184 to i32*
  %v3_16184 = load i32, i32* %v2_16184, align 4
  %v1_16188 = add i32 %v0_16184, 16
  %v2_16188 = inttoptr i32 %v1_16188 to i32*
  %v3_16188 = load i32, i32* %v2_16188, align 4
  %v2_1618c = sub i32 %v3_16188, %v3_16184
  %v2_16190 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16190, i32* @r4, align 4
  ret i32 %v2_1618c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_16198(i32 %arg1) local_unnamed_addr {
dec_label_pc_16198:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_16198 = load i32, i32* @r4, align 4
  store i32 %v3_16198, i32* %stack_var_-16, align 4
  %v6_16198 = load i32, i32* @r5, align 4
  %v12_16198 = load i32, i32* @lr, align 4
  %v1_1619c = add i32 %arg1, 52
  %v2_1619c = inttoptr i32 %v1_1619c to i32*
  %v3_1619c = load i32, i32* %v2_1619c, align 4
  %v2_161a4 = icmp eq i32 %v3_1619c, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 131388, i32* %r6.global-to-local, align 4
  br i1 %v2_161a4, label %dec_label_pc_161dc, label %dec_label_pc_161b8

dec_label_pc_161b8:                               ; preds = %dec_label_pc_16198
  %v1_161b8 = add i32 %arg1, 16
  %v2_161b8 = inttoptr i32 %v1_161b8 to i32*
  %v3_161b8 = load i32, i32* %v2_161b8, align 4
  %v1_161bc = add i32 %arg1, 24
  %v2_161bc = inttoptr i32 %v1_161bc to i32*
  %v3_161bc = load i32, i32* %v2_161bc, align 4
  %v3_161c0 = icmp ult i32 %v3_161b8, %v3_161bc
  br i1 %v3_161c0, label %.thread, label %dec_label_pc_161d0

.thread:                                          ; preds = %dec_label_pc_161b8
  %v2_161c4 = inttoptr i32 %v3_161b8 to i8*
  %v3_161c4 = load i8, i8* %v2_161c4, align 1
  %v4_161c4 = zext i8 %v3_161c4 to i32
  store i32 %v4_161c4, i32* %r4.global-to-local, align 4
  %v6_161c4 = add i32 %v3_161b8, 1
  store i32 %v6_161c4, i32* %v2_161b8, align 4
  br label %dec_label_pc_16250

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161b8
  %v1_161d0 = inttoptr i32 %arg1 to i16*
  %v2_161d0 = call i32 @function_166c4(i16* %v1_161d0)
  store i32 %v2_161d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16250

dec_label_pc_161dc:                               ; preds = %dec_label_pc_16198
  %v1_161e0 = add i32 %arg1, 56
  store i32 %v1_161e0, i32* @r4, align 4
  %v4_161f4 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_161f4)
  %v0_16208 = load i32, i32* %r6.global-to-local, align 4
  %v2_16208 = add i32 %v0_16208, 16
  %v3_16208 = inttoptr i32 %v2_16208 to i32*
  %v4_16208 = load i32, i32* %v3_16208, align 4
  store i32 90644, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_16208)
  %v0_16214 = load i32, i32* @r5, align 4
  %v1_16214 = add i32 %v0_16214, 16
  %v2_16214 = inttoptr i32 %v1_16214 to i32*
  %v3_16214 = load i32, i32* %v2_16214, align 4
  %v1_16218 = add i32 %v0_16214, 24
  %v2_16218 = inttoptr i32 %v1_16218 to i32*
  %v3_16218 = load i32, i32* %v2_16218, align 4
  %v3_1621c = icmp ult i32 %v3_16214, %v3_16218
  br i1 %v3_1621c, label %.thread2, label %dec_label_pc_1622c

.thread2:                                         ; preds = %dec_label_pc_161dc
  %v2_16220 = inttoptr i32 %v3_16214 to i8*
  %v3_16220 = load i8, i8* %v2_16220, align 1
  %v4_16220 = zext i8 %v3_16220 to i32
  store i32 %v4_16220, i32* %r4.global-to-local, align 4
  %v6_16220 = add i32 %v3_16214, 1
  store i32 %v6_16220, i32* %v2_16214, align 4
  br label %dec_label_pc_16238

dec_label_pc_1622c:                               ; preds = %dec_label_pc_161dc
  %v1_16230 = inttoptr i32 %v0_16214 to i16*
  %v2_16230 = call i32 @function_166c4(i16* %v1_16230)
  store i32 %v2_16230, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16238

dec_label_pc_16238:                               ; preds = %.thread2, %dec_label_pc_1622c
  %v0_16244 = load i32, i32* %r6.global-to-local, align 4
  %v2_16244 = add i32 %v0_16244, 24
  %v3_16244 = inttoptr i32 %v2_16244 to i32*
  %v4_16244 = load i32, i32* %v3_16244, align 4
  store i32 %v4_16244, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_16244)
  br label %dec_label_pc_16250

dec_label_pc_16250:                               ; preds = %.thread, %dec_label_pc_161d0, %dec_label_pc_16238
  %v0_16250 = load i32, i32* %r4.global-to-local, align 4
  %v2_16258 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16258, i32* @r4, align 4
  store i32 %v6_16198, i32* @r5, align 4
  store i32 %v12_16198, i32* @lr, align 4
  ret i32 %v0_16250

; uselistorder directives
  uselistorder i32 %v3_16214, { 1, 0, 2 }
  uselistorder i32 %v3_161b8, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 4, 1, 3, 2, 0, 5 }
  uselistorder label %dec_label_pc_16250, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16238, { 1, 0 }
}

define i32 @function_16264(i32 %arg1) local_unnamed_addr {
dec_label_pc_16264:
  %v0_16264 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16264, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_16264
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16264, %bb
  %v10_16270 = phi i32 [ %arg1, %dec_label_pc_16264 ], [ 0, %bb ]
  ret i32 %v10_16270

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_16274(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16274:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_16274 = load i32, i32* @r4, align 4
  store i32 %v3_16274, i32* %stack_var_-28, align 4
  %v6_16274 = load i32, i32* @r5, align 4
  %v9_16274 = load i32, i32* @r6, align 4
  %v12_16274 = load i32, i32* @r7, align 4
  %v21_16274 = load i32, i32* @lr, align 4
  %v1_16278 = add i32 %arg3, 52
  %v2_16278 = inttoptr i32 %v1_16278 to i32*
  %v3_16278 = load i32, i32* %v2_16278, align 4
  %v1_16280 = sub i32 1, %v3_16278
  %v2_16280 = icmp ult i32 %v3_16278, 2
  br i1 %v2_16280, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_16274
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_16274, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_16280, %dec_label_pc_16274 ]
  %v0_16288 = phi i32 [ 0, %bb ], [ %v1_16280, %dec_label_pc_16274 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_16288 = icmp eq i32 %v0_16288, 0
  store i32 add (i32 ptrtoint (i32* @global_var_9ea8.664 to i32), i32 90772), i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_16288, label %dec_label_pc_162dc, label %dec_label_pc_162a4

dec_label_pc_162a4:                               ; preds = %bb16
  %v1_162a8 = add i32 %arg3, 56
  store i32 %v1_162a8, i32* @r4, align 4
  %v4_162bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_9ea8.664 to i32), i32 90844) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_162bc)
  %v0_162d0 = load i32, i32* @r5, align 4
  %v2_162d0 = add i32 %v0_162d0, 16
  %v3_162d0 = inttoptr i32 %v2_162d0 to i32*
  %v4_162d0 = load i32, i32* %v3_162d0, align 4
  store i32 %v4_162d0, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_162dc.668 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_162d0)
  %v0_162dc.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_162e0.pre = load i32, i32* @r7, align 4
  %v0_162e4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_162dc

dec_label_pc_162dc:                               ; preds = %bb16, %dec_label_pc_162a4
  %v0_162e4 = phi i32 [ %arg3, %bb16 ], [ %v0_162e4.pre, %dec_label_pc_162a4 ]
  %v0_162e0 = phi i32 [ %arg2, %bb16 ], [ %v0_162e0.pre, %dec_label_pc_162a4 ]
  %v0_162dc = phi i32 [ %arg1, %bb16 ], [ %v0_162dc.pre, %dec_label_pc_162a4 ]
  %v3_162e8 = inttoptr i32 %v0_162dc to i8*
  %v4_162e8 = call i32 @function_167f0(i8* %v3_162e8, i32 %v0_162e0, i32 %v0_162e4)
  %v0_162ec = load i32, i32* %sl.global-to-local, align 4
  %v2_162ec = icmp eq i32 %v0_162ec, 0
  store i32 %v4_162e8, i32* %r4.global-to-local, align 4
  br i1 %v2_162ec, label %dec_label_pc_162dc..thread3_crit_edge, label %bb17

dec_label_pc_162dc..thread3_crit_edge:            ; preds = %dec_label_pc_162dc
  %v0_16308.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_162dc
  %v1_16300 = load i32, i32* @r5, align 4
  %v3_16300 = add i32 %v1_16300, 24
  %v4_16300 = inttoptr i32 %v3_16300 to i32*
  %v5_16300 = load i32, i32* %v4_16300, align 4
  store i32 %v5_16300, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_162dc..thread3_crit_edge, %bb17
  %v0_16308 = phi i32 [ %v0_16308.pre, %dec_label_pc_162dc..thread3_crit_edge ], [ %v5_16300, %bb17 ]
  %v2_16308 = xor i1 %v2_162ec, true
  call void @__pseudo_cond_branch(i1 %v2_16308, i32 %v0_16308)
  %v0_1630c = load i32, i32* %r4.global-to-local, align 4
  %v2_16314 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16314, i32* %r4.global-to-local, align 4
  store i32 %v6_16274, i32* @r5, align 4
  store i32 %v9_16274, i32* @r6, align 4
  store i32 %v12_16274, i32* @r7, align 4
  store i32 %v21_16274, i32* @lr, align 4
  ret i32 %v0_1630c

; uselistorder directives
  uselistorder i32 %v3_16278, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 10, 11, 12, 13, 14, 2, 15, 8, 9, 3, 18, 19, 1, 20, 0, 21, 22, 4, 5, 16, 17, 6, 23, 7, 24 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_162dc, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_16320(i32 %arg1) local_unnamed_addr {
dec_label_pc_16320:
  %v0_16320 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16320, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_16320
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16320, %bb
  %v10_1632c = phi i32 [ %arg1, %dec_label_pc_16320 ], [ 0, %bb ]
  ret i32 %v10_1632c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_16330() local_unnamed_addr {
dec_label_pc_16330:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_16330 = load i32, i32* @r4, align 4
  store i32 %v3_16330, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 131388, i32* %r6.global-to-local, align 4
  %v4_16340 = load i32, i32* inttoptr (i32 131424 to i32*), align 32
  store i32 %v4_16340, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_16348 = load i32, i32* inttoptr (i32 131496 to i32*), align 8
  store i32 %v4_16348, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_16354 = load i32, i32* inttoptr (i32 131460 to i32*), align 4
  store i32 %v4_16354, i32* %r7.global-to-local, align 4
  %v2_16360 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_16354)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_16374 = load i32, i32* %r6.global-to-local, align 4
  %v2_16374 = add i32 %v0_16374, 16
  %v3_16374 = inttoptr i32 %v2_16374 to i32*
  %v4_16374 = load i32, i32* %v3_16374, align 4
  store i32 %v4_16374, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16374)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_16384 = load i32, i32* %r6.global-to-local, align 4
  %v2_16384 = add i32 %v0_16384, 12
  %v3_16384 = inttoptr i32 %v2_16384 to i32*
  %v4_16384 = load i32, i32* %v3_16384, align 4
  store i32 %v4_16384, i32* %r3.global-to-local, align 4
  %v1_16388 = inttoptr i32 %v4_16384 to i32*
  %v2_16388 = load i32, i32* %v1_16388, align 4
  store i32 %v2_16388, i32* %r3.global-to-local, align 4
  %v7_1638c = icmp eq i32 %v2_16388, 1
  br i1 %v7_1638c, label %dec_label_pc_16394, label %dec_label_pc_16454

dec_label_pc_16394:                               ; preds = %dec_label_pc_16330
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_16398 = add i32 %v0_16384, 48
  %v3_16398 = inttoptr i32 %v2_16398 to i32*
  %v4_16398 = load i32, i32* %v3_16398, align 4
  store i32 %v4_16398, i32* %r3.global-to-local, align 4
  %v1_1639c = inttoptr i32 %v4_16398 to i32*
  %v2_1639c = load i32, i32* %v1_1639c, align 4
  store i32 %v2_1639c, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_1639c, 1
  br i1 %tmp30, label %dec_label_pc_16454, label %dec_label_pc_163a8

dec_label_pc_163a8:                               ; preds = %dec_label_pc_16394
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_163ac = add i32 %v0_16384, 96
  %v3_163ac = inttoptr i32 %v2_163ac to i32*
  %v4_163ac = load i32, i32* %v3_163ac, align 4
  store i32 %v4_163ac, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16354)
  call void @__pseudo_branch(i32 %v4_16374)
  %v0_163d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_163d4 = add i32 %v0_163d4, 44
  %v3_163d4 = inttoptr i32 %v2_163d4 to i32*
  %v4_163d4 = load i32, i32* %v3_163d4, align 4
  store i32 %v4_163d4, i32* %r3.global-to-local, align 4
  %v1_163d8 = inttoptr i32 %v4_163d4 to i32*
  %v2_163d8 = load i32, i32* %v1_163d8, align 4
  store i32 %v2_163d8, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1642411 = icmp eq i32 %v2_163d8, 0
  br i1 %v2_1642411, label %dec_label_pc_16430, label %dec_label_pc_163e8

dec_label_pc_163e8:                               ; preds = %dec_label_pc_163a8, %dec_label_pc_16420
  %v0_1640c2 = phi i32 [ %v0_16420, %dec_label_pc_16420 ], [ %v2_163d8, %dec_label_pc_163a8 ]
  %v1_163e8 = inttoptr i32 %v0_1640c2 to i16*
  %v2_163e8 = load i16, i16* %v1_163e8, align 2
  %v3_163e8 = zext i16 %v2_163e8 to i32
  store i32 %v3_163e8, i32* %r3.global-to-local, align 4
  %v2_163ec = and i32 %v3_163e8, 32816
  %v7_163f0 = icmp eq i32 %v2_163ec, 48
  %v1_163f4 = add i32 %v0_1640c2, 32
  %v2_163f4 = inttoptr i32 %v1_163f4 to i32*
  %v3_163f4 = load i32, i32* %v2_163f4, align 4
  store i32 %v3_163f4, i32* %r5.global-to-local, align 4
  br i1 %v7_163f0, label %dec_label_pc_16400, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_163e8
  store i32 %v0_1640c2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16420

dec_label_pc_16400:                               ; preds = %dec_label_pc_163e8
  %v0_16400 = load i32, i32* %r7.global-to-local, align 4
  %v2_16400 = icmp eq i32 %v0_16400, 0
  br i1 %v2_16400, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_16400
  %v1_16404 = load i32, i32* %r6.global-to-local, align 4
  %v2_16404 = load i32, i32* %r8.global-to-local, align 4
  %v3_16404 = add i32 %v2_16404, %v1_16404
  %v4_16404 = inttoptr i32 %v3_16404 to i32*
  %v5_16404 = load i32, i32* %v4_16404, align 4
  store i32 %v5_16404, i32* %r3.global-to-local, align 4
  %v3_16408 = inttoptr i32 %v5_16404 to i32*
  store i32 %v3_163f4, i32* %v3_16408, align 4
  %v0_1640c = load i32, i32* %r4.global-to-local, align 4
  %v1_1640c = inttoptr i32 %v0_1640c to i16*
  %v2_1640c = load i16, i16* %v1_1640c, align 2
  %v3_1640c = zext i16 %v2_1640c to i32
  store i32 %v3_1640c, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_16400
  %v2_1640c8 = load i16, i16* %v1_163e8, align 2
  %v3_1640c9 = zext i16 %v2_1640c8 to i32
  store i32 %v3_1640c9, i32* %r3.global-to-local, align 4
  %v3_16410 = add i32 %v0_16400, 32
  %v4_16410 = inttoptr i32 %v3_16410 to i32*
  store i32 %v3_163f4, i32* %v4_16410, align 4
  %v0_16414.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_16414 = phi i32 [ %v3_1640c, %.thread ], [ %v0_16414.pre, %bb ]
  %v1_16414 = and i32 %v0_16414, 8192
  %v2_16414 = icmp eq i32 %v1_16414, 0
  br i1 %v2_16414, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_1641c = xor i1 %v2_16414, true
  call void @__pseudo_cond_branch(i1 %v1_1641c, i32 ptrtoint (i32* @global_var_13f88.50 to i32))
  %v0_16420.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16420

dec_label_pc_16420:                               ; preds = %.thread21, %bb33
  %v0_16420 = phi i32 [ %v0_16420.pre, %bb33 ], [ %v3_163f4, %.thread21 ]
  store i32 %v0_16420, i32* %r4.global-to-local, align 4
  %v2_16424 = icmp eq i32 %v0_16420, 0
  br i1 %v2_16424, label %dec_label_pc_16424.dec_label_pc_16430_crit_edge, label %dec_label_pc_163e8

dec_label_pc_16424.dec_label_pc_16430_crit_edge:  ; preds = %dec_label_pc_16420
  %v0_1643c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16430

dec_label_pc_16430:                               ; preds = %dec_label_pc_16424.dec_label_pc_16430_crit_edge, %dec_label_pc_163a8
  %v0_1643c = phi i32 [ %v0_1643c.pre, %dec_label_pc_16424.dec_label_pc_16430_crit_edge ], [ %v0_163d4, %dec_label_pc_163a8 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_1643c = add i32 %v0_1643c, 24
  %v3_1643c = inttoptr i32 %v2_1643c to i32*
  %v4_1643c = load i32, i32* %v3_1643c, align 4
  call void @__pseudo_branch(i32 %v4_1643c)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_1644c = load i32, i32* %r6.global-to-local, align 4
  %v2_1644c = add i32 %v0_1644c, 48
  %v3_1644c = inttoptr i32 %v2_1644c to i32*
  %v4_1644c = load i32, i32* %v3_1644c, align 4
  store i32 %v4_1644c, i32* %r3.global-to-local, align 4
  %v0_16450 = load i32, i32* %r4.global-to-local, align 4
  %v2_16450 = inttoptr i32 %v4_1644c to i32*
  store i32 %v0_16450, i32* %v2_16450, align 4
  %v0_16458.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16454

dec_label_pc_16454:                               ; preds = %dec_label_pc_16330, %dec_label_pc_16394, %dec_label_pc_16430
  %v0_16458 = phi i32 [ %v0_16384, %dec_label_pc_16330 ], [ %v0_16384, %dec_label_pc_16394 ], [ %v0_16458.pre, %dec_label_pc_16430 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16458 = add i32 %v0_16458, 12
  %v3_16458 = inttoptr i32 %v2_16458 to i32*
  %v4_16458 = load i32, i32* %v3_16458, align 4
  %v1_1645c = inttoptr i32 %v4_16458 to i32*
  %v2_1645c = load i32, i32* %v1_1645c, align 4
  %v1_16460 = add i32 %v2_1645c, -1
  store i32 %v1_16460, i32* %v1_1645c, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_16474 = load i32, i32* %r6.global-to-local, align 4
  %v2_16474 = add i32 %v0_16474, 24
  %v3_16474 = inttoptr i32 %v2_16474 to i32*
  %v4_16474 = load i32, i32* %v3_16474, align 4
  call void @__pseudo_branch(i32 %v4_16474)
  %v2_16484 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16484, i32* %r4.global-to-local, align 4
  ret i32 %v2_16360

; uselistorder directives
  uselistorder i32 %v0_16420, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 7, 2, 0, 3, 4, 5, 6, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 131460 to i32*), { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32* inttoptr (i32 131424 to i32*), { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_16454, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16420, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_163e8, { 1, 0 }
}

define i32 @function_16490(i16* %arg1) local_unnamed_addr {
dec_label_pc_16490:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_16490 = load i1, i1* @cpsr_z, align 1
  %v2_16490 = load i32, i32* @r4, align 4
  br i1 %v0_16490, label %bb, label %dec_label_pc_16490..thread9_crit_edge

dec_label_pc_16490..thread9_crit_edge:            ; preds = %dec_label_pc_16490
  %v0_164cc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread9

bb:                                               ; preds = %dec_label_pc_16490
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16490..thread9_crit_edge, %bb
  %v0_1666c = phi i32 [ %v0_164cc.pre, %dec_label_pc_16490..thread9_crit_edge ], [ 0, %bb ]
  store i32 %v2_16490, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_9c70.682 to i32), i32 91340), i32* %sb.global-to-local, align 4
  %v4_164c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_9c70.682 to i32), i32 91384) to i32*), align 4
  store i32 %v4_164c8, i32* %r3.global-to-local, align 4
  %v9_164cc = icmp eq i32 %v0_1666c, %v4_164c8
  store i32 %v0_1666c, i32* %fp.global-to-local, align 4
  br i1 %v9_164cc, label %bb50, label %dec_label_pc_164e4

bb50:                                             ; preds = %.thread9
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_164f4

dec_label_pc_164e4:                               ; preds = %.thread9
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_164e8 = icmp eq i32 %v0_1666c, 0
  br i1 %v2_164e8, label %dec_label_pc_164f4, label %dec_label_pc_1665c

dec_label_pc_164f4:                               ; preds = %bb50, %dec_label_pc_164e4
  %stack_var_-60.1.in = phi i32 [ 0, %bb50 ], [ 256, %dec_label_pc_164e4 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_16508 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_9c70.682 to i32), i32 91448) to i32*), align 4
  store i32 %v4_16508, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_16510 = ptrtoint i32* %stack_var_-56 to i32
  %v4_16514 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_9c70.682 to i32), i32 91412) to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  store i32 %v4_16508, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16514)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_16534 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16534, i32* %r0.global-to-local, align 4
  %v0_16538 = load i32, i32* %sb.global-to-local, align 4
  %v2_16538 = add i32 %v0_16538, 16
  %v3_16538 = inttoptr i32 %v2_16538 to i32*
  %v4_16538 = load i32, i32* %v3_16538, align 4
  call void @__pseudo_branch(i32 %v4_16538)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16548 = add i32 %v0_16538, 12
  %v3_16548 = inttoptr i32 %v2_16548 to i32*
  %v4_16548 = load i32, i32* %v3_16548, align 4
  store i32 %v4_16548, i32* %r2.global-to-local, align 4
  %v1_1654c = inttoptr i32 %v4_16548 to i32*
  %v2_1654c = load i32, i32* %v1_1654c, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_16554 = add i32 %v2_1654c, 1
  store i32 %v1_16554, i32* %r3.global-to-local, align 4
  %v2_16558 = add i32 %v0_16538, 24
  %v3_16558 = inttoptr i32 %v2_16558 to i32*
  %v4_16558 = load i32, i32* %v3_16558, align 4
  store i32 %v1_16554, i32* %v1_1654c, align 4
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16558)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_16574 = load i32, i32* %sb.global-to-local, align 4
  %v2_16574 = add i32 %v0_16574, 96
  %v3_16574 = inttoptr i32 %v2_16574 to i32*
  %v4_16574 = load i32, i32* %v3_16574, align 4
  store i32 %v4_16574, i32* @r4, align 4
  store i32 %v4_16574, i32* %r2.global-to-local, align 4
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16514)
  %v0_1658c = load i32, i32* @r4, align 4
  store i32 %v0_1658c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16538)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_1659c = load i32, i32* %sb.global-to-local, align 4
  %v2_1659c = add i32 %v0_1659c, 44
  %v3_1659c = inttoptr i32 %v2_1659c to i32*
  %v4_1659c = load i32, i32* %v3_1659c, align 4
  store i32 %v4_1659c, i32* %r3.global-to-local, align 4
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  %v1_165a8 = inttoptr i32 %v4_1659c to i32*
  %v2_165a8 = load i32, i32* %v1_165a8, align 4
  store i32 %v2_165a8, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_16558)
  %v0_165b4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_165b4, i32* @r6, align 4
  %v2_165b8 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_165b8, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_1664c.pr = load i32, i32* @r7, align 4
  %v2_1664c29 = icmp eq i32 %v0_1664c.pr, 0
  br i1 %v2_1664c29, label %dec_label_pc_16654, label %dec_label_pc_165c0

dec_label_pc_165c0:                               ; preds = %dec_label_pc_164f4, %dec_label_pc_16648
  %v0_165cc = phi i32 [ %v3_16648, %dec_label_pc_16648 ], [ %v0_1664c.pr, %dec_label_pc_164f4 ]
  %v1_165c0 = inttoptr i32 %v0_165cc to i16*
  %v2_165c0 = load i16, i16* %v1_165c0, align 2
  %v3_165c0 = zext i16 %v2_165c0 to i32
  store i32 %v3_165c0, i32* %r3.global-to-local, align 4
  %v1_165c4 = and i32 %v3_165c0, 64
  %v2_165c4 = icmp eq i32 %v1_165c4, 0
  br i1 %v2_165c4, label %dec_label_pc_16648, label %dec_label_pc_165cc

dec_label_pc_165cc:                               ; preds = %dec_label_pc_165c0
  %v1_165cc = add i32 %v0_165cc, 56
  store i32 %v1_165cc, i32* @r4, align 4
  store i32 %v1_165cc, i32* %r2.global-to-local, align 4
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  %v0_165dc = load i32, i32* %sb.global-to-local, align 4
  %v1_165dc = load i32, i32* %fp.global-to-local, align 4
  %v2_165dc = add i32 %v1_165dc, %v0_165dc
  %v3_165dc = inttoptr i32 %v2_165dc to i32*
  %v4_165dc = load i32, i32* %v3_165dc, align 4
  call void @__pseudo_branch(i32 %v4_165dc)
  %v0_165e8 = load i32, i32* @r4, align 4
  store i32 %v0_165e8, i32* %r0.global-to-local, align 4
  %v0_165ec = load i32, i32* %sb.global-to-local, align 4
  %v1_165ec = load i32, i32* @r8, align 4
  %v2_165ec = add i32 %v1_165ec, %v0_165ec
  %v3_165ec = inttoptr i32 %v2_165ec to i32*
  %v4_165ec = load i32, i32* %v3_165ec, align 4
  call void @__pseudo_branch(i32 %v4_165ec)
  %v0_165f8 = load i32, i32* @r7, align 4
  %v1_165f8 = inttoptr i32 %v0_165f8 to i16*
  %v2_165f8 = load i16, i16* %v1_165f8, align 2
  %v3_165f8 = zext i16 %v2_165f8 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_16600 = or i32 %v3_165f8, %stack_var_-60.1.in
  %v1_16604 = xor i32 %v2_16600, 320
  store i32 %v1_16604, i32* %r3.global-to-local, align 4
  %v1_16608 = and i32 %v1_16604, 832
  %v2_16608 = icmp eq i32 %v1_16608, 0
  br i1 %v2_16608, label %dec_label_pc_16610, label %bb51

dec_label_pc_16610:                               ; preds = %dec_label_pc_165cc
  store i32 %v0_165f8, i32* %r0.global-to-local, align 4
  %v1_16614 = call i32 @function_16168(i32 %v0_165f8)
  store i32 %v1_16614, i32* %r0.global-to-local, align 4
  %v2_16618 = icmp eq i32 %v1_16614, 0
  br i1 %v2_16618, label %.thread17, label %.thread18

.thread17:                                        ; preds = %dec_label_pc_16610
  %v1_1661c = load i32, i32* @r7, align 4
  %v2_1661c = inttoptr i32 %v1_1661c to i16*
  %v3_1661c = load i16, i16* %v2_1661c, align 2
  %v4_1661c = zext i16 %v3_1661c to i32
  store i32 %v4_1661c, i32* %r3.global-to-local, align 4
  %v2_16620 = add i32 %v1_1661c, 8
  %v3_16620 = inttoptr i32 %v2_16620 to i32*
  %v4_16620 = load i32, i32* %v3_16620, align 4
  store i32 %v4_16620, i32* %r2.global-to-local, align 4
  %v2_16624 = and i32 %v4_1661c, 65471
  store i32 %v2_16624, i32* %r3.global-to-local, align 4
  %v3_16628 = add i32 %v1_1661c, 28
  %v4_16628 = inttoptr i32 %v3_16628 to i32*
  store i32 %v4_16620, i32* %v4_16628, align 4
  %v1_1662c = load i32, i32* %r3.global-to-local, align 4
  %v2_1662c = trunc i32 %v1_1662c to i16
  %v3_1662c = load i32, i32* @r7, align 4
  %v4_1662c = inttoptr i32 %v3_1662c to i16*
  store i16 %v2_1662c, i16* %v4_1662c, align 2
  br label %bb51

.thread18:                                        ; preds = %dec_label_pc_16610
  store i32 -1, i32* @r6, align 4
  br label %bb51

bb51:                                             ; preds = %.thread17, %dec_label_pc_165cc, %.thread18
  store i32 %v2_16510, i32* %r0.global-to-local, align 4
  %v0_1663c = load i32, i32* %sb.global-to-local, align 4
  %v1_1663c = load i32, i32* %sl.global-to-local, align 4
  %v2_1663c = add i32 %v1_1663c, %v0_1663c
  %v3_1663c = inttoptr i32 %v2_1663c to i32*
  %v4_1663c = load i32, i32* %v3_1663c, align 4
  call void @__pseudo_branch(i32 %v4_1663c)
  %v0_16648.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16648

dec_label_pc_16648:                               ; preds = %dec_label_pc_165c0, %bb51
  %v0_16648 = phi i32 [ %v0_165cc, %dec_label_pc_165c0 ], [ %v0_16648.pre, %bb51 ]
  %v1_16648 = add i32 %v0_16648, 32
  %v2_16648 = inttoptr i32 %v1_16648 to i32*
  %v3_16648 = load i32, i32* %v2_16648, align 4
  store i32 %v3_16648, i32* @r7, align 4
  %v2_1664c = icmp eq i32 %v3_16648, 0
  br i1 %v2_1664c, label %dec_label_pc_16654, label %dec_label_pc_165c0

dec_label_pc_16654:                               ; preds = %dec_label_pc_16648, %dec_label_pc_164f4
  %v0_16654 = call i32 @function_16330()
  store i32 %v0_16654, i32* %r0.global-to-local, align 4
  %v0_16690.pre = load i32, i32* @r6, align 4
  br label %bb53

dec_label_pc_1665c:                               ; preds = %dec_label_pc_164e4
  %v1_1665c = inttoptr i32 %v0_1666c to i16*
  %v2_1665c = load i16, i16* %v1_1665c, align 2
  %v3_1665c = zext i16 %v2_1665c to i32
  %v1_16660 = and i32 %v3_1665c, 64
  store i32 %v1_16660, i32* %r3.global-to-local, align 4
  %v2_16660 = icmp eq i32 %v1_16660, 0
  br i1 %v2_16660, label %bb52, label %dec_label_pc_1666c

bb52:                                             ; preds = %dec_label_pc_1665c
  br label %bb53

dec_label_pc_1666c:                               ; preds = %dec_label_pc_1665c
  %v1_1666c = call i32 @function_16168(i32 %v0_1666c)
  store i32 %v1_1666c, i32* %r0.global-to-local, align 4
  %v2_16670 = icmp eq i32 %v1_1666c, 0
  br i1 %v2_16670, label %.thread25, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_1666c
  br label %bb53

.thread25:                                        ; preds = %dec_label_pc_1666c
  %v1_16674 = load i32, i32* %fp.global-to-local, align 4
  %v2_16674 = inttoptr i32 %v1_16674 to i16*
  %v3_16674 = load i16, i16* %v2_16674, align 2
  %v4_16674 = zext i16 %v3_16674 to i32
  store i32 %v4_16674, i32* %r3.global-to-local, align 4
  %v2_16678 = add i32 %v1_16674, 8
  %v3_16678 = inttoptr i32 %v2_16678 to i32*
  %v4_16678 = load i32, i32* %v3_16678, align 4
  store i32 %v4_16678, i32* %r2.global-to-local, align 4
  %v2_1667c = and i32 %v4_16674, 65471
  store i32 %v2_1667c, i32* %r3.global-to-local, align 4
  %v2_16680 = trunc i32 %v2_1667c to i16
  store i16 %v2_16680, i16* %v2_16674, align 2
  %v1_16684 = load i32, i32* %r2.global-to-local, align 4
  %v2_16684 = load i32, i32* %fp.global-to-local, align 4
  %v3_16684 = add i32 %v2_16684, 28
  %v4_16684 = inttoptr i32 %v3_16684 to i32*
  store i32 %v1_16684, i32* %v4_16684, align 4
  br label %bb53

bb53:                                             ; preds = %bb52, %.thread27, %dec_label_pc_16654, %.thread25
  %v0_16690 = phi i32 [ -1, %.thread27 ], [ 0, %bb52 ], [ %v0_16690.pre, %dec_label_pc_16654 ], [ 0, %.thread25 ]
  store i32 %v0_16690, i32* %r0.global-to-local, align 4
  %v2_16698 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_16698, i32* %r4.global-to-local, align 4
  ret i32 %v0_16690

; uselistorder directives
  uselistorder i32 %v0_16690, { 1, 0 }
  uselistorder i32 %v3_16648, { 1, 2, 0 }
  uselistorder i32 %v0_165f8, { 1, 0, 2 }
  uselistorder i32 %v0_16538, { 1, 0, 2 }
  uselistorder i32 %v0_1666c, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_16330, { 1, 0 }
  uselistorder i32 56, { 11, 12, 13, 1, 2, 14, 16, 7, 8, 9, 10, 0, 3, 15, 17, 4, 18, 5, 19, 6, 20 }
  uselistorder i32* @r8, { 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 142, 143, 2, 144, 145, 146, 174, 175, 176, 177, 178, 4, 179, 180, 181, 182, 183, 184, 185, 186, 66, 67, 68, 69, 70, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 80, 81, 82, 84, 85, 86, 87, 88, 90, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 0, 137, 134, 135, 136, 138, 139, 140, 141, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 168, 169, 170, 5, 172, 173, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 3, 207, 208, 209, 210 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb53, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16648, { 1, 0 }
  uselistorder label %bb51, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165c0, { 1, 0 }
  uselistorder label %dec_label_pc_164f4, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_166a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_166a4:
  %v0_166a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_166a4, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_166a4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_166a4, %bb
  %v5_166c0 = phi i32 [ %arg1, %dec_label_pc_166a4 ], [ 0, %bb ]
  ret i32 %v5_166c0

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_166c4(i16* %arg1) local_unnamed_addr {
dec_label_pc_166c4:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_166c4 = load i32, i32* @r4, align 4
  store i32 %v3_166c4, i32* %stack_var_-12, align 4
  %v6_166c4 = load i32, i32* @r5, align 4
  %v9_166c4 = load i32, i32* @lr, align 4
  %v0_166c8 = load i32, i32* @r0, align 4
  %v1_166c8 = add i32 %v0_166c8, 16
  %v2_166c8 = inttoptr i32 %v1_166c8 to i32*
  %v3_166c8 = load i32, i32* %v2_166c8, align 4
  store i32 %v3_166c8, i32* %r2.global-to-local, align 4
  %v1_166cc = add i32 %v0_166c8, 24
  %v2_166cc = inttoptr i32 %v1_166cc to i32*
  %v3_166cc = load i32, i32* %v2_166cc, align 4
  %v3_166d0 = icmp ult i32 %v3_166c8, %v3_166cc
  store i32 %v0_166c8, i32* @r4, align 4
  br i1 %v3_166d0, label %bb, label %dec_label_pc_166f0

bb:                                               ; preds = %dec_label_pc_166c4
  %v2_166dc = inttoptr i32 %v3_166c8 to i8*
  %v3_166dc = load i8, i8* %v2_166dc, align 1
  %v4_166dc = zext i8 %v3_166dc to i32
  store i32 %v4_166dc, i32* %r0.global-to-local, align 4
  %v6_166dc = add i32 %v3_166c8, 1
  store i32 %v6_166dc, i32* %r2.global-to-local, align 4
  store i32 %v6_166dc, i32* %v2_166c8, align 4
  br label %dec_label_pc_167dc

dec_label_pc_166f0:                               ; preds = %dec_label_pc_166c4
  store i32 131388, i32* @r5, align 4
  %v1_166f0 = inttoptr i32 %v0_166c8 to i16*
  %v2_166f0 = load i16, i16* %v1_166f0, align 2
  %v3_166f0 = zext i16 %v2_166f0 to i32
  %v1_166f4 = and i32 %v3_166f0, 131
  %tmp24 = icmp ugt i32 %v1_166f4, 128
  br i1 %tmp24, label %dec_label_pc_16710, label %dec_label_pc_16700

dec_label_pc_16700:                               ; preds = %dec_label_pc_166f0
  store i32 128, i32* @r1, align 4
  %v0_16704 = call i32 @function_1752c()
  store i32 %v0_16704, i32* %r0.global-to-local, align 4
  %v2_16708 = icmp eq i32 %v0_16704, 0
  br i1 %v2_16708, label %dec_label_pc_16700.dec_label_pc_16710_crit_edge, label %dec_label_pc_167d8

dec_label_pc_16700.dec_label_pc_16710_crit_edge:  ; preds = %dec_label_pc_16700
  %v0_16710.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16710

dec_label_pc_16710:                               ; preds = %dec_label_pc_16700.dec_label_pc_16710_crit_edge, %dec_label_pc_166f0
  %v2_16750 = phi i32 [ %v0_16710.pre, %dec_label_pc_16700.dec_label_pc_16710_crit_edge ], [ %v0_166c8, %dec_label_pc_166f0 ]
  %v1_16710 = inttoptr i32 %v2_16750 to i16*
  %v2_16710 = load i16, i16* %v1_16710, align 2
  %v3_16710 = zext i16 %v2_16710 to i32
  store i32 %v3_16710, i32* %r2.global-to-local, align 4
  %v1_16714 = and i32 %v3_16710, 2
  %v2_16714 = icmp eq i32 %v1_16714, 0
  br i1 %v2_16714, label %dec_label_pc_16740, label %dec_label_pc_1671c

dec_label_pc_1671c:                               ; preds = %dec_label_pc_16710
  %tmp25 = urem i16 %v2_16710, 2
  %v1_1671c = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_1671c
  %v4_16720 = and i32 %tmp21, 4
  %v5_16720 = add i32 %v4_16720, %v2_16750
  %v1_16724 = add i32 %v5_16720, 36
  %v2_16724 = inttoptr i32 %v1_16724 to i8*
  %v3_16724 = load i8, i8* %v2_16724, align 1
  %v4_16724 = zext i8 %v3_16724 to i32
  %v1_16728 = add nsw i32 %v3_16710, -1
  store i32 %v1_16728, i32* %r2.global-to-local, align 4
  store i32 %v4_16724, i32* %r0.global-to-local, align 4
  %v2_16734 = add i32 %v2_16750, 40
  %v3_16734 = inttoptr i32 %v2_16734 to i32*
  store i32 0, i32* %v3_16734, align 4
  %v0_16738 = load i32, i32* %r2.global-to-local, align 4
  %v1_16738 = trunc i32 %v0_16738 to i16
  %v2_16738 = load i32, i32* @r4, align 4
  %v3_16738 = inttoptr i32 %v2_16738 to i16*
  store i16 %v1_16738, i16* %v3_16738, align 2
  br label %dec_label_pc_167dc

dec_label_pc_16740:                               ; preds = %dec_label_pc_16710
  %v1_16740 = add i32 %v2_16750, 16
  %v1_16744 = inttoptr i32 %v1_16740 to i32*
  %v2_16744 = load i32, i32* %v1_16744, align 4
  %v3_16744 = add i32 %v2_16750, 20
  %v4_16744 = inttoptr i32 %v3_16744 to i32*
  %v5_16744 = load i32, i32* %v4_16744, align 4
  %v9_16748 = icmp eq i32 %v5_16744, %v2_16744
  br i1 %v9_16748, label %dec_label_pc_16758, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_16740
  %v2_1674c = inttoptr i32 %v2_16744 to i8*
  %v3_1674c = load i8, i8* %v2_1674c, align 1
  %v4_1674c = zext i8 %v3_1674c to i32
  store i32 %v4_1674c, i32* %r0.global-to-local, align 4
  %v6_1674c = add i32 %v2_16744, 1
  store i32 %v6_1674c, i32* %v1_16744, align 4
  br label %dec_label_pc_167dc

dec_label_pc_16758:                               ; preds = %dec_label_pc_16740
  %v1_16758 = add i32 %v2_16750, 4
  %v2_16758 = inttoptr i32 %v1_16758 to i32*
  %v3_16758 = load i32, i32* %v2_16758, align 4
  %v7_1675c = icmp eq i32 %v3_16758, -2
  br i1 %v7_1675c, label %.thread8, label %dec_label_pc_16770

.thread8:                                         ; preds = %dec_label_pc_16758
  %v2_16760 = or i16 %v2_16710, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16760, i16* %v1_16710, align 2
  br label %dec_label_pc_167dc

dec_label_pc_16770:                               ; preds = %dec_label_pc_16758
  %v1_16770 = and i32 %v3_16710, 768
  %v2_16770 = icmp eq i32 %v1_16770, 0
  br i1 %v2_16770, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_16770
  %v1_16778 = load i32, i32* @r5, align 4
  %v3_16778 = add i32 %v1_16778, 44
  %v4_16778 = inttoptr i32 %v3_16778 to i32*
  %v5_16778 = load i32, i32* %v4_16778, align 4
  store i32 %v5_16778, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_16770, %bb22
  %v1_1677c = xor i1 %v2_16770, true
  call void @__pseudo_cond_branch(i1 %v1_1677c, i32 ptrtoint (i32* @global_var_164b8.633 to i32))
  %v0_16780 = load i32, i32* @r4, align 4
  %v1_16780 = add i32 %v0_16780, 8
  store i32 %v1_16780, i32* %r2.global-to-local, align 4
  %v1_16784 = inttoptr i32 %v1_16780 to i32*
  %v2_16784 = load i32, i32* %v1_16784, align 4
  store i32 %v2_16784, i32* %r2.global-to-local, align 4
  %v3_16784 = add i32 %v0_16780, 12
  %v4_16784 = inttoptr i32 %v3_16784 to i32*
  %v5_16784 = load i32, i32* %v4_16784, align 4
  %v9_16788 = icmp eq i32 %v5_16784, %v2_16784
  br i1 %v9_16788, label %dec_label_pc_167bc, label %dec_label_pc_16790

dec_label_pc_16790:                               ; preds = %.thread10
  %v2_16790 = add i32 %v0_16780, 24
  %v3_16790 = inttoptr i32 %v2_16790 to i32*
  store i32 %v2_16784, i32* %v3_16790, align 4
  %v0_16794 = load i32, i32* @r4, align 4
  store i32 %v0_16794, i32* %r0.global-to-local, align 4
  %v2_16798 = call i32 @function_174fc(i32 %v0_16794)
  store i32 %v2_16798, i32* %r0.global-to-local, align 4
  %v2_1679c = icmp eq i32 %v2_16798, 0
  br i1 %v2_1679c, label %dec_label_pc_167d8, label %dec_label_pc_167a4

dec_label_pc_167a4:                               ; preds = %dec_label_pc_16790
  %v0_167a4 = load i32, i32* @r4, align 4
  %v1_167a4 = add i32 %v0_167a4, 20
  %v2_167a4 = inttoptr i32 %v1_167a4 to i32*
  %v3_167a4 = load i32, i32* %v2_167a4, align 4
  %v2_167a8 = add i32 %v0_167a4, 24
  %v3_167a8 = inttoptr i32 %v2_167a8 to i32*
  store i32 %v3_167a4, i32* %v3_167a8, align 4
  %v0_167ac = load i32, i32* @r4, align 4
  %v1_167ac = add i32 %v0_167ac, 16
  %v2_167ac = inttoptr i32 %v1_167ac to i32*
  %v3_167ac = load i32, i32* %v2_167ac, align 4
  %v1_167b0 = inttoptr i32 %v3_167ac to i8*
  %v2_167b0 = load i8, i8* %v1_167b0, align 1
  %v3_167b0 = zext i8 %v2_167b0 to i32
  store i32 %v3_167b0, i32* %r0.global-to-local, align 4
  %v5_167b0 = add i32 %v3_167ac, 1
  store i32 %v5_167b0, i32* %v2_167ac, align 4
  br label %dec_label_pc_167dc

dec_label_pc_167bc:                               ; preds = %.thread10
  %v1_167bc = inttoptr i32 %v0_16780 to i16*
  store i32 %v0_16780, i32* %r0.global-to-local, align 4
  %v2_167c0 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_167c8 = call i32 @function_173f0(i16* %v1_167bc, i32 %v2_167c0, i32 1)
  store i32 %v5_167c8, i32* %r0.global-to-local, align 4
  %v2_167cc = icmp eq i32 %v5_167c8, 0
  br i1 %v2_167cc, label %dec_label_pc_167d8, label %bb23

bb23:                                             ; preds = %dec_label_pc_167bc
  %v4_167d0 = load i8, i8* %stack_var_-17, align 1
  %v5_167d0 = sext i8 %v4_167d0 to i32
  store i32 %v5_167d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167dc

dec_label_pc_167d8:                               ; preds = %dec_label_pc_167bc, %dec_label_pc_16700, %dec_label_pc_16790
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167dc

dec_label_pc_167dc:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_167a4, %dec_label_pc_1671c, %dec_label_pc_167d8
  %v2_167e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_167e0, i32* @r4, align 4
  store i32 %v6_166c4, i32* @r5, align 4
  store i32 %v9_166c4, i32* @lr, align 4
  %v1_167e4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_167e4

; uselistorder directives
  uselistorder i32 %v2_16744, { 1, 0, 2 }
  uselistorder i32 %v2_16750, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_166c8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_166c8, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 128, { 19, 0, 16, 15, 20, 4, 21, 1, 2, 22, 23, 3, 12, 13, 24, 25, 17, 14, 6, 7, 8, 9, 10, 11, 26, 5, 27, 18 }
  uselistorder label %dec_label_pc_167dc, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_167d8, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_167f0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_167f0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_167f0 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_167f4 = icmp eq i32 %arg2, 0
  store i1 %v2_167f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1687c, label %dec_label_pc_16864.preheader

dec_label_pc_16864.preheader:                     ; preds = %dec_label_pc_167f0
  store i32 %tmp, i32* @r5, align 4
  %v1_168642 = add i32 %arg2, -1
  store i32 %v1_168642, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_168648 = icmp eq i32 %arg2, 1
  store i1 %v7_168648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_168648, label %dec_label_pc_1686c, label %dec_label_pc_16810

dec_label_pc_16810:                               ; preds = %dec_label_pc_16864.preheader, %dec_label_pc_16864.backedge.dec_label_pc_16810_crit_edge
  %v0_16834 = phi i32 [ %v0_16810.pre, %dec_label_pc_16864.backedge.dec_label_pc_16810_crit_edge ], [ %arg3, %dec_label_pc_16864.preheader ]
  %v1_16810 = add i32 %v0_16834, 16
  %v2_16810 = inttoptr i32 %v1_16810 to i32*
  %v3_16810 = load i32, i32* %v2_16810, align 4
  store i32 %v3_16810, i32* %r2.global-to-local, align 4
  %v1_16814 = add i32 %v0_16834, 24
  %v2_16814 = inttoptr i32 %v1_16814 to i32*
  %v3_16814 = load i32, i32* %v2_16814, align 4
  store i32 %v3_16814, i32* %r3.global-to-local, align 4
  %v3_16818 = icmp uge i32 %v3_16810, %v3_16814
  store i1 %v3_16818, i1* %cpsr_c.global-to-local, align 1
  %v9_16818 = icmp eq i32 %v3_16810, %v3_16814
  store i1 %v9_16818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16818, label %dec_label_pc_16834, label %dec_label_pc_16820

dec_label_pc_16820:                               ; preds = %dec_label_pc_16810
  %v1_16820 = inttoptr i32 %v3_16810 to i8*
  %v2_16820 = load i8, i8* %v1_16820, align 1
  %v3_16820 = zext i8 %v2_16820 to i32
  store i32 %v3_16820, i32* %r3.global-to-local, align 4
  %v5_16820 = add i32 %v3_16810, 1
  store i32 %v5_16820, i32* %r2.global-to-local, align 4
  %v2_16824 = load i32, i32* @r5, align 4
  %v3_16824 = inttoptr i32 %v2_16824 to i8*
  store i8 %v2_16820, i8* %v3_16824, align 1
  %v4_16824 = load i32, i32* @r5, align 4
  %v5_16824 = add i32 %v4_16824, 1
  store i32 %v5_16824, i32* @r5, align 4
  %v0_16828 = load i32, i32* %r3.global-to-local, align 4
  %v2_16828 = icmp ugt i32 %v0_16828, 9
  store i1 %v2_16828, i1* %cpsr_c.global-to-local, align 1
  %v7_16828 = icmp eq i32 %v0_16828, 10
  store i1 %v7_16828, i1* %cpsr_z.global-to-local, align 1
  %v0_1682c = load i32, i32* %r2.global-to-local, align 4
  %v1_1682c = load i32, i32* @r4, align 4
  %v2_1682c = add i32 %v1_1682c, 16
  %v3_1682c = inttoptr i32 %v2_1682c to i32*
  store i32 %v0_1682c, i32* %v3_1682c, align 4
  br i1 %v7_16828, label %dec_label_pc_1686c, label %dec_label_pc_16864.backedge

dec_label_pc_16834:                               ; preds = %dec_label_pc_16810
  %v1_16834 = inttoptr i32 %v0_16834 to i16*
  %v3_16838 = call i32 @function_166c4(i16* %v1_16834)
  %v3_1683c = icmp eq i32 %v3_16838, -1
  store i1 %v3_1683c, i1* %cpsr_c.global-to-local, align 1
  %v8_1683c = icmp eq i32 %v3_16838, -1
  store i1 %v8_1683c, i1* %cpsr_z.global-to-local, align 1
  %v1_16840 = urem i32 %v3_16838, 256
  store i32 %v1_16840, i32* %r3.global-to-local, align 4
  br i1 %v3_1683c, label %dec_label_pc_16848, label %dec_label_pc_16860

dec_label_pc_16848:                               ; preds = %dec_label_pc_16834
  %v0_16848 = load i32, i32* @r4, align 4
  %v1_16848 = inttoptr i32 %v0_16848 to i16*
  %v2_16848 = load i16, i16* %v1_16848, align 2
  %v3_16848 = zext i16 %v2_16848 to i32
  store i32 %v3_16848, i32* %r3.global-to-local, align 4
  %v1_1684c = and i32 %v3_16848, 8
  %v2_1684c = icmp eq i32 %v1_1684c, 0
  store i1 %v2_1684c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1684c, label %dec_label_pc_1686c, label %dec_label_pc_1687c

dec_label_pc_16860:                               ; preds = %dec_label_pc_16834
  %v1_16858 = trunc i32 %v3_16838 to i8
  %v2_16858 = load i32, i32* @r5, align 4
  %v3_16858 = inttoptr i32 %v2_16858 to i8*
  store i8 %v1_16858, i8* %v3_16858, align 1
  %v4_16858 = load i32, i32* @r5, align 4
  %v5_16858 = add i32 %v4_16858, 1
  store i32 %v5_16858, i32* @r5, align 4
  %v0_1685c = load i32, i32* %r3.global-to-local, align 4
  %v2_1685c = icmp ugt i32 %v0_1685c, 9
  store i1 %v2_1685c, i1* %cpsr_c.global-to-local, align 1
  %v7_1685c = icmp eq i32 %v0_1685c, 10
  store i1 %v7_1685c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1685c, label %dec_label_pc_1686c, label %dec_label_pc_16864.backedge

dec_label_pc_16864.backedge:                      ; preds = %dec_label_pc_16860, %dec_label_pc_16820
  %v0_16864 = load i32, i32* %r6.global-to-local, align 4
  %v1_16864 = add i32 %v0_16864, -1
  store i32 %v1_16864, i32* %r6.global-to-local, align 4
  %v2_16864 = icmp ne i32 %v0_16864, 0
  store i1 %v2_16864, i1* %cpsr_c.global-to-local, align 1
  %v7_16864 = icmp eq i32 %v0_16864, 1
  store i1 %v7_16864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16864, label %dec_label_pc_1686c, label %dec_label_pc_16864.backedge.dec_label_pc_16810_crit_edge

dec_label_pc_16864.backedge.dec_label_pc_16810_crit_edge: ; preds = %dec_label_pc_16864.backedge
  %v0_16810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16810

dec_label_pc_1686c:                               ; preds = %dec_label_pc_16860, %dec_label_pc_16864.backedge, %dec_label_pc_16820, %dec_label_pc_16864.preheader, %dec_label_pc_16848
  %v0_1686c = load i32, i32* @r5, align 4
  %v1_1686c = load i32, i32* @r7, align 4
  %v3_1686c = icmp uge i32 %v0_1686c, %v1_1686c
  store i1 %v3_1686c, i1* %cpsr_c.global-to-local, align 1
  %v9_1686c = icmp eq i32 %v0_1686c, %v1_1686c
  store i1 %v9_1686c, i1* %cpsr_z.global-to-local, align 1
  %v2_16870 = xor i1 %v9_1686c, true
  %v3_16870 = and i1 %v3_1686c, %v2_16870
  br i1 %v3_16870, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1686c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16874 = inttoptr i32 %v0_1686c to i8*
  store i8 0, i8* %v7_16874, align 1
  %v0_16878.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16878.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1686c, %bb
  %v1_16878 = phi i1 [ %v1_16878.pre, %bb ], [ %v9_1686c, %dec_label_pc_1686c ]
  %v0_16878 = phi i1 [ %v0_16878.pre, %bb ], [ %v3_1686c, %dec_label_pc_1686c ]
  %v2_16878 = xor i1 %v1_16878, true
  %v3_16878 = and i1 %v0_16878, %v2_16878
  br i1 %v3_16878, label %.dec_label_pc_16880_crit_edge, label %dec_label_pc_1687c

.dec_label_pc_16880_crit_edge:                    ; preds = %.thread14
  %v0_16880.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16880

dec_label_pc_1687c:                               ; preds = %dec_label_pc_167f0, %dec_label_pc_16848, %.thread14
  br label %dec_label_pc_16880

dec_label_pc_16880:                               ; preds = %.dec_label_pc_16880_crit_edge, %dec_label_pc_1687c
  %v0_16880 = phi i32 [ %v0_16880.pre, %.dec_label_pc_16880_crit_edge ], [ 0, %dec_label_pc_1687c ]
  store i32 %v6_167f0, i32* @r5, align 4
  ret i32 %v0_16880

; uselistorder directives
  uselistorder i1 %v9_1686c, { 1, 0, 2 }
  uselistorder i32 %v1_1686c, { 1, 0 }
  uselistorder i32 %v0_1686c, { 0, 2, 1 }
  uselistorder i32 %v0_16864, { 2, 0, 1 }
  uselistorder i32 %v0_1685c, { 1, 0 }
  uselistorder i32 %v3_16838, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16828, { 1, 0 }
  uselistorder i32 %v3_16810, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16834, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 82, 112, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 79, 29, 30, 31, 32, 33, 89, 88, 34, 131, 75, 80, 86, 113, 87, 122, 114, 103, 115, 116, 35, 117, 36, 37, 118, 119, 81, 120, 121, 77, 123, 124, 125, 126, 127, 128, 38, 39, 129, 130, 102, 101, 50, 51, 52, 132, 53, 54, 90, 91, 96, 92, 97, 84, 95, 133, 85, 100, 134, 40, 135, 41, 42, 43, 136, 104, 105, 44, 45, 137, 106, 107, 46, 47, 138, 108, 109, 48, 49, 83, 139, 140, 98, 141, 55, 76, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 142, 143, 144, 145, 93, 146, 147, 148, 149, 150, 151, 152, 70, 71, 153, 72, 73, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 69, 169, 170, 171, 172, 173, 174, 68, 175, 78, 94, 99, 74, 176, 66, 67, 111, 177, 110 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_16880, { 1, 0 }
  uselistorder label %dec_label_pc_1687c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1686c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16810, { 1, 0 }
}

define i32 @function_16890() local_unnamed_addr {
dec_label_pc_16890:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16890 = load i32, i32* @r1, align 4
  %v1_16890 = load i32, i32* @r0, align 4
  %v2_16890 = sub i32 %v0_16890, %v1_16890
  %v3_16890 = icmp ult i32 %v0_16890, %v1_16890
  %v4_16890 = xor i32 %v1_16890, %v0_16890
  %v5_16890 = xor i32 %v2_16890, %v0_16890
  %v6_16890 = and i32 %v5_16890, %v4_16890
  %v7_16890 = icmp slt i32 %v6_16890, 0
  store i1 %v7_16890, i1* %cpsr_v.global-to-local, align 1
  %v8_16890 = icmp slt i32 %v2_16890, 0
  store i1 %v8_16890, i1* %cpsr_n.global-to-local, align 1
  %v9_16890 = icmp eq i32 %v0_16890, %v1_16890
  store i1 %v9_16890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16890, label %dec_label_pc_16ae4, label %dec_label_pc_16898

dec_label_pc_16898:                               ; preds = %dec_label_pc_16890
  br i1 %v9_16890, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16898
  %merge = phi i32 [ %v0_16890, %dec_label_pc_16898 ], [ %v2_16b78, %bb150 ], [ %v11_16b94, %bb153 ], [ %v7_16b94, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16898
  %v5_1689c = inttoptr i32 %v1_16890 to i8*
  store i8* %v5_1689c, i8** %stack_var_-8, align 4
  %v8_1689c = load i32, i32* @lr, align 4
  %v0_168a0 = load i32, i32* @r2, align 4
  %v2_168a0 = add i32 %v0_168a0, -4
  store i32 %v2_168a0, i32* %r2.global-to-local, align 4
  %v4_168a0 = sub i32 3, %v0_168a0
  %v5_168a0 = and i32 %v4_168a0, %v0_168a0
  %v6_168a0 = icmp slt i32 %v5_168a0, 0
  store i1 %v6_168a0, i1* %cpsr_v.global-to-local, align 1
  %v7_168a0 = icmp slt i32 %v2_168a0, 0
  store i1 %v7_168a0, i1* %cpsr_n.global-to-local, align 1
  %v8_168a0 = icmp eq i32 %v0_168a0, 4
  store i1 %v8_168a0, i1* %cpsr_z.global-to-local, align 1
  %v5_168a4 = icmp slt i32 %v0_168a0, 4
  br i1 %v5_168a4, label %bb140, label %dec_label_pc_168a8

dec_label_pc_168a8:                               ; preds = %bb
  %v1_168a8 = urem i32 %v1_16890, 4
  store i32 %v1_168a8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168a8 = icmp eq i32 %v1_168a8, 0
  store i1 %v2_168a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_168a8, label %dec_label_pc_168b0, label %dec_label_pc_1695c

dec_label_pc_168b0:                               ; preds = %dec_label_pc_168a8
  %v1_168b0 = urem i32 %v0_16890, 4
  store i32 %v1_168b0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168b0 = icmp eq i32 %v1_168b0, 0
  store i1 %v2_168b0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16890 to i2
  br i1 %v2_168b0, label %dec_label_pc_168b8, label %dec_label_pc_1698c

dec_label_pc_168b8:                               ; preds = %dec_label_pc_168b0, %dec_label_pc_16984
  %v0_168d094 = phi i32 [ %v1_16890, %dec_label_pc_168b0 ], [ %v0_16aac77, %dec_label_pc_16984 ]
  %v0_168cc93 = phi i32 [ %v0_16890, %dec_label_pc_168b0 ], [ %v0_16984, %dec_label_pc_16984 ]
  %v0_168b8 = phi i32 [ %v2_168a0, %dec_label_pc_168b0 ], [ %v2_1697c, %dec_label_pc_16984 ]
  %v1_168b8 = add i32 %v0_168b8, -8
  store i32 %v1_168b8, i32* %r2.global-to-local, align 4
  %v3_168b8 = sub i32 7, %v0_168b8
  %v4_168b8 = and i32 %v3_168b8, %v0_168b8
  %v5_168b8 = icmp slt i32 %v4_168b8, 0
  store i1 %v5_168b8, i1* %cpsr_v.global-to-local, align 1
  %v6_168b8 = icmp slt i32 %v1_168b8, 0
  store i1 %v6_168b8, i1* %cpsr_n.global-to-local, align 1
  %v7_168b8 = icmp eq i32 %v0_168b8, 8
  store i1 %v7_168b8, i1* %cpsr_z.global-to-local, align 1
  %v2_168bc = xor i1 %v6_168b8, %v5_168b8
  br i1 %v2_168bc, label %dec_label_pc_1690c, label %dec_label_pc_168c0

dec_label_pc_168c0:                               ; preds = %dec_label_pc_168b8
  %v1_168c0 = add i32 %v0_168b8, -28
  store i32 %v1_168c0, i32* %r2.global-to-local, align 4
  %v3_168c0 = sub i32 27, %v0_168b8
  %v4_168c0 = and i32 %v3_168c0, %v1_168b8
  %v5_168c0 = icmp slt i32 %v4_168c0, 0
  store i1 %v5_168c0, i1* %cpsr_v.global-to-local, align 1
  %v6_168c0 = icmp slt i32 %v1_168c0, 0
  store i1 %v6_168c0, i1* %cpsr_n.global-to-local, align 1
  %v7_168c0 = icmp eq i32 %v1_168b8, 20
  store i1 %v7_168c0, i1* %cpsr_z.global-to-local, align 1
  %v2_168c4 = xor i1 %v6_168c0, %v5_168c0
  br i1 %v2_168c4, label %dec_label_pc_168f8, label %dec_label_pc_168c8

dec_label_pc_168c8:                               ; preds = %dec_label_pc_168c0
  %v0_168c8 = load i32, i32* @r4, align 4
  store i32 %v0_168c8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_168cc

dec_label_pc_168cc:                               ; preds = %dec_label_pc_168cc.dec_label_pc_168cc_crit_edge, %dec_label_pc_168c8
  %v0_168d0 = phi i32 [ %v12_168d8, %dec_label_pc_168cc.dec_label_pc_168cc_crit_edge ], [ %v0_168d094, %dec_label_pc_168c8 ]
  %v0_168cc = phi i32 [ %v0_168cc.pre, %dec_label_pc_168cc.dec_label_pc_168cc_crit_edge ], [ %v0_168cc93, %dec_label_pc_168c8 ]
  %v1_168cc = inttoptr i32 %v0_168cc to i32*
  %v2_168cc = load i32, i32* %v1_168cc, align 4
  %v3_168cc = add i32 %v0_168cc, 4
  %v4_168cc = inttoptr i32 %v3_168cc to i32*
  %v5_168cc = load i32, i32* %v4_168cc, align 4
  store i32 %v5_168cc, i32* %r4.global-to-local, align 4
  %v6_168cc = add i32 %v0_168cc, 8
  %v7_168cc = inttoptr i32 %v6_168cc to i32*
  %v8_168cc = load i32, i32* %v7_168cc, align 4
  store i32 %v8_168cc, i32* %ip.global-to-local, align 4
  %v9_168cc = add i32 %v0_168cc, 12
  %v10_168cc = inttoptr i32 %v9_168cc to i32*
  %v11_168cc = load i32, i32* %v10_168cc, align 4
  store i32 %v11_168cc, i32* %lr.global-to-local, align 4
  %v12_168cc = add i32 %v0_168cc, 16
  store i32 %v12_168cc, i32* %r1.global-to-local, align 4
  %v1_168d0 = inttoptr i32 %v0_168d0 to i32*
  store i32 %v2_168cc, i32* %v1_168d0, align 4
  %v3_168d0 = add i32 %v0_168d0, 4
  %v4_168d0 = inttoptr i32 %v3_168d0 to i32*
  %v5_168d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168d0, i32* %v4_168d0, align 4
  %v6_168d0 = add i32 %v0_168d0, 8
  %v7_168d0 = inttoptr i32 %v6_168d0 to i32*
  %v8_168d0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_168d0, i32* %v7_168d0, align 4
  %v9_168d0 = add i32 %v0_168d0, 12
  %v10_168d0 = inttoptr i32 %v9_168d0 to i32*
  %v11_168d0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168d0, i32* %v10_168d0, align 4
  %v12_168d0 = add i32 %v0_168d0, 16
  store i32 %v12_168d0, i32* %r0.global-to-local, align 4
  %v0_168d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_168d4 = inttoptr i32 %v0_168d4 to i32*
  %v2_168d4 = load i32, i32* %v1_168d4, align 4
  store i32 %v2_168d4, i32* @r3, align 4
  %v3_168d4 = add i32 %v0_168d4, 4
  %v4_168d4 = inttoptr i32 %v3_168d4 to i32*
  %v5_168d4 = load i32, i32* %v4_168d4, align 4
  store i32 %v5_168d4, i32* %r4.global-to-local, align 4
  %v6_168d4 = add i32 %v0_168d4, 8
  %v7_168d4 = inttoptr i32 %v6_168d4 to i32*
  %v8_168d4 = load i32, i32* %v7_168d4, align 4
  store i32 %v8_168d4, i32* @ip, align 4
  %v9_168d4 = add i32 %v0_168d4, 12
  %v10_168d4 = inttoptr i32 %v9_168d4 to i32*
  %v11_168d4 = load i32, i32* %v10_168d4, align 4
  store i32 %v11_168d4, i32* %lr.global-to-local, align 4
  %v12_168d4 = add i32 %v0_168d4, 16
  store i32 %v12_168d4, i32* @r1, align 4
  %v1_168d8 = inttoptr i32 %v12_168d0 to i32*
  store i32 %v2_168d4, i32* %v1_168d8, align 4
  %v3_168d8 = add i32 %v0_168d0, 20
  %v4_168d8 = inttoptr i32 %v3_168d8 to i32*
  %v5_168d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168d8, i32* %v4_168d8, align 4
  %v6_168d8 = add i32 %v0_168d0, 24
  %v7_168d8 = inttoptr i32 %v6_168d8 to i32*
  %v8_168d8 = load i32, i32* @ip, align 4
  store i32 %v8_168d8, i32* %v7_168d8, align 4
  %v9_168d8 = add i32 %v0_168d0, 28
  %v10_168d8 = inttoptr i32 %v9_168d8 to i32*
  %v11_168d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168d8, i32* %v10_168d8, align 4
  %v12_168d8 = add i32 %v0_168d0, 32
  store i32 %v12_168d8, i32* @r0, align 4
  %v0_168dc = load i32, i32* %r2.global-to-local, align 4
  %v1_168dc = add i32 %v0_168dc, -32
  store i32 %v1_168dc, i32* %r2.global-to-local, align 4
  %v3_168dc = sub i32 31, %v0_168dc
  %v4_168dc = and i32 %v3_168dc, %v0_168dc
  %v5_168dc = icmp slt i32 %v4_168dc, 0
  %v6_168dc = icmp slt i32 %v1_168dc, 0
  %v2_168e0 = xor i1 %v6_168dc, %v5_168dc
  br i1 %v2_168e0, label %dec_label_pc_168e4, label %dec_label_pc_168cc.dec_label_pc_168cc_crit_edge

dec_label_pc_168cc.dec_label_pc_168cc_crit_edge:  ; preds = %dec_label_pc_168cc
  %v0_168cc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_168cc

dec_label_pc_168e4:                               ; preds = %dec_label_pc_168cc
  %v1_168e4 = add i32 %v0_168dc, -16
  %v3_168e4 = add i32 %v0_168dc, 2147483616
  %v4_168e4 = and i32 %v1_168e4, %v3_168e4
  %v5_168e4 = icmp slt i32 %v4_168e4, 0
  store i1 %v5_168e4, i1* %cpsr_v.global-to-local, align 1
  %v6_168e4 = icmp slt i32 %v1_168e4, 0
  store i1 %v6_168e4, i1* %cpsr_n.global-to-local, align 1
  %v7_168e4 = icmp eq i32 %v1_168e4, 0
  store i1 %v7_168e4, i1* %cpsr_z.global-to-local, align 1
  %v2_168e8 = xor i1 %v6_168e4, %v5_168e4
  br i1 %v2_168e8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_168e4
  %v3_168e8 = load i32, i32* @r1, align 4
  %v4_168e8 = inttoptr i32 %v3_168e8 to i32*
  %v5_168e8 = load i32, i32* %v4_168e8, align 4
  store i32 %v5_168e8, i32* @r3, align 4
  %v6_168e8 = add i32 %v3_168e8, 4
  %v7_168e8 = inttoptr i32 %v6_168e8 to i32*
  %v8_168e8 = load i32, i32* %v7_168e8, align 4
  store i32 %v8_168e8, i32* %r4.global-to-local, align 4
  %v9_168e8 = add i32 %v3_168e8, 8
  %v10_168e8 = inttoptr i32 %v9_168e8 to i32*
  %v11_168e8 = load i32, i32* %v10_168e8, align 4
  store i32 %v11_168e8, i32* @ip, align 4
  %v12_168e8 = add i32 %v3_168e8, 12
  %v13_168e8 = inttoptr i32 %v12_168e8 to i32*
  %v14_168e8 = load i32, i32* %v13_168e8, align 4
  store i32 %v14_168e8, i32* %lr.global-to-local, align 4
  %v15_168e8 = add i32 %v3_168e8, 16
  store i32 %v15_168e8, i32* @r1, align 4
  %v4_168ec = inttoptr i32 %v12_168d8 to i32*
  store i32 %v5_168e8, i32* %v4_168ec, align 4
  %v6_168ec = add i32 %v0_168d0, 36
  %v7_168ec = inttoptr i32 %v6_168ec to i32*
  %v8_168ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_168ec, i32* %v7_168ec, align 4
  %v9_168ec = add i32 %v0_168d0, 40
  %v10_168ec = inttoptr i32 %v9_168ec to i32*
  %v11_168ec = load i32, i32* @ip, align 4
  store i32 %v11_168ec, i32* %v10_168ec, align 4
  %v12_168ec = add i32 %v0_168d0, 44
  %v13_168ec = inttoptr i32 %v12_168ec to i32*
  %v14_168ec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_168ec, i32* %v13_168ec, align 4
  %v15_168ec = add i32 %v0_168d0, 48
  store i32 %v15_168ec, i32* @r0, align 4
  %v3_168f0 = load i32, i32* %r2.global-to-local, align 4
  %v4_168f0 = add i32 %v3_168f0, -16
  store i32 %v4_168f0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_168e4, %bb136
  %v3_16900102111 = phi i32 [ %v15_168ec, %bb136 ], [ %v12_168d8, %dec_label_pc_168e4 ]
  %v0_168f8.pre = phi i32 [ %v4_168f0, %bb136 ], [ %v1_168dc, %dec_label_pc_168e4 ]
  %v2_168f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_168f4, i32* @r4, align 4
  br label %dec_label_pc_168f8

dec_label_pc_168f8:                               ; preds = %dec_label_pc_168c0, %bb137
  %v3_16900101 = phi i32 [ %v0_168d094, %dec_label_pc_168c0 ], [ %v3_16900102111, %bb137 ]
  %v0_168f8 = phi i32 [ %v1_168c0, %dec_label_pc_168c0 ], [ %v0_168f8.pre, %bb137 ]
  %v1_168f8 = add i32 %v0_168f8, 20
  store i32 %v1_168f8, i32* %r2.global-to-local, align 4
  %v3_168f8 = sub i32 0, %v0_168f8
  %v4_168f8 = and i32 %v1_168f8, %v3_168f8
  %v5_168f8 = icmp slt i32 %v4_168f8, 0
  store i1 %v5_168f8, i1* %cpsr_v.global-to-local, align 1
  %v6_168f8 = icmp slt i32 %v1_168f8, 0
  store i1 %v6_168f8, i1* %cpsr_n.global-to-local, align 1
  %v7_168f8 = icmp eq i32 %v1_168f8, 0
  store i1 %v7_168f8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_168fc

dec_label_pc_168fc:                               ; preds = %.thread115, %dec_label_pc_168f8
  %v0_1690c.pre157 = phi i32 [ %v0_1690c.pre, %.thread115 ], [ %v1_168f8, %dec_label_pc_168f8 ]
  %v3_16900 = phi i32 [ %v3_1690099116, %.thread115 ], [ %v3_16900101, %dec_label_pc_168f8 ]
  %v1_16904 = phi i1 [ %v1_16908, %.thread115 ], [ %v5_168f8, %dec_label_pc_168f8 ]
  %v0_16904 = phi i1 [ %v0_16908, %.thread115 ], [ %v6_168f8, %dec_label_pc_168f8 ]
  %v2_168fc = xor i1 %v1_16904, %v0_16904
  br i1 %v2_168fc, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_168fc
  %v3_168fc = load i32, i32* @r1, align 4
  %v4_168fc = inttoptr i32 %v3_168fc to i32*
  %v5_168fc = load i32, i32* %v4_168fc, align 4
  store i32 %v5_168fc, i32* @r3, align 4
  %v6_168fc = add i32 %v3_168fc, 4
  %v7_168fc = inttoptr i32 %v6_168fc to i32*
  %v8_168fc = load i32, i32* %v7_168fc, align 4
  store i32 %v8_168fc, i32* @ip, align 4
  %v9_168fc = add i32 %v3_168fc, 8
  %v10_168fc = inttoptr i32 %v9_168fc to i32*
  %v11_168fc = load i32, i32* %v10_168fc, align 4
  store i32 %v11_168fc, i32* %lr.global-to-local, align 4
  %v12_168fc = add i32 %v3_168fc, 12
  store i32 %v12_168fc, i32* @r1, align 4
  %v4_16900 = inttoptr i32 %v3_16900 to i32*
  store i32 %v5_168fc, i32* %v4_16900, align 4
  %v6_16900 = add i32 %v3_16900, 4
  %v7_16900 = inttoptr i32 %v6_16900 to i32*
  %v8_16900 = load i32, i32* @ip, align 4
  store i32 %v8_16900, i32* %v7_16900, align 4
  %v9_16900 = add i32 %v3_16900, 8
  %v10_16900 = inttoptr i32 %v9_16900 to i32*
  %v11_16900 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16900, i32* %v10_16900, align 4
  %v12_16900 = add i32 %v3_16900, 12
  store i32 %v12_16900, i32* @r0, align 4
  %v3_16904 = load i32, i32* %r2.global-to-local, align 4
  %v4_16904 = add i32 %v3_16904, -12
  store i32 %v4_16904, i32* %r2.global-to-local, align 4
  %v6_16904 = sub i32 11, %v3_16904
  %v7_16904 = and i32 %v6_16904, %v3_16904
  %v8_16904 = icmp slt i32 %v7_16904, 0
  store i1 %v8_16904, i1* %cpsr_v.global-to-local, align 1
  %v9_16904 = icmp slt i32 %v4_16904, 0
  store i1 %v9_16904, i1* %cpsr_n.global-to-local, align 1
  %v10_16904 = icmp eq i32 %v3_16904, 12
  store i1 %v10_16904, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_168fc, %bb138
  %v0_1690c.pre = phi i32 [ %v4_16904, %bb138 ], [ %v0_1690c.pre157, %dec_label_pc_168fc ]
  %v3_1690099116 = phi i32 [ %v12_16900, %bb138 ], [ %v3_16900, %dec_label_pc_168fc ]
  %v1_16908 = phi i1 [ %v8_16904, %bb138 ], [ %v1_16904, %dec_label_pc_168fc ]
  %v0_16908 = phi i1 [ %v9_16904, %bb138 ], [ %v0_16904, %dec_label_pc_168fc ]
  %v2_16908 = xor i1 %v1_16908, %v0_16908
  br i1 %v2_16908, label %dec_label_pc_1690c, label %dec_label_pc_168fc

dec_label_pc_1690c:                               ; preds = %.thread115, %dec_label_pc_168b8
  %v4_1691c = phi i32 [ %v0_168d094, %dec_label_pc_168b8 ], [ %v3_1690099116, %.thread115 ]
  %v0_1690c = phi i32 [ %v1_168b8, %dec_label_pc_168b8 ], [ %v0_1690c.pre, %.thread115 ]
  %v1_1690c = add i32 %v0_1690c, 8
  store i32 %v1_1690c, i32* %r2.global-to-local, align 4
  %v3_1690c = sub i32 0, %v0_1690c
  %v4_1690c = and i32 %v1_1690c, %v3_1690c
  %v5_1690c = icmp slt i32 %v4_1690c, 0
  store i1 %v5_1690c, i1* %cpsr_v.global-to-local, align 1
  %v6_1690c = icmp slt i32 %v1_1690c, 0
  store i1 %v6_1690c, i1* %cpsr_n.global-to-local, align 1
  %v7_1690c = icmp eq i32 %v1_1690c, 0
  store i1 %v7_1690c, i1* %cpsr_z.global-to-local, align 1
  %v2_16910 = xor i1 %v6_1690c, %v5_1690c
  br i1 %v2_16910, label %bb140, label %dec_label_pc_16914

dec_label_pc_16914:                               ; preds = %dec_label_pc_1690c
  %v1_16914 = add i32 %v0_1690c, 4
  store i32 %v1_16914, i32* %r2.global-to-local, align 4
  %v3_16914 = sub i32 -5, %v0_1690c
  %v4_16914 = and i32 %v3_16914, %v1_1690c
  %v5_16914 = icmp slt i32 %v4_16914, 0
  store i1 %v5_16914, i1* %cpsr_v.global-to-local, align 1
  %v6_16914 = icmp slt i32 %v1_16914, 0
  store i1 %v6_16914, i1* %cpsr_n.global-to-local, align 1
  %v7_16914 = icmp eq i32 %v1_1690c, 4
  store i1 %v7_16914, i1* %cpsr_z.global-to-local, align 1
  %v2_16918 = xor i1 %v6_16914, %v5_16914
  %v3_16918 = load i32, i32* @r1, align 4
  %v4_16918 = inttoptr i32 %v3_16918 to i32*
  %v5_16918 = load i32, i32* %v4_16918, align 4
  store i32 %v5_16918, i32* @r3, align 4
  %v7_16918 = add i32 %v3_16918, 4
  br i1 %v2_16918, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16914
  store i32 %v7_16918, i32* @r1, align 4
  %v5_1691c = inttoptr i32 %v4_1691c to i32*
  store i32 %v5_16918, i32* %v5_1691c, align 4
  %v6_1691c = load i32, i32* @r0, align 4
  %v7_1691c = add i32 %v6_1691c, 4
  store i32 %v7_1691c, i32* @r0, align 4
  %v0_1692c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16914
  %v7_16920 = inttoptr i32 %v7_16918 to i32*
  %v8_16920 = load i32, i32* %v7_16920, align 4
  store i32 %v8_16920, i32* @ip, align 4
  %v9_16920 = add i32 %v3_16918, 8
  store i32 %v9_16920, i32* @r1, align 4
  %v4_16924 = inttoptr i32 %v4_1691c to i32*
  store i32 %v5_16918, i32* %v4_16924, align 4
  %v6_16924 = add i32 %v4_1691c, 4
  %v7_16924 = inttoptr i32 %v6_16924 to i32*
  %v8_16924 = load i32, i32* @ip, align 4
  store i32 %v8_16924, i32* %v7_16924, align 4
  %v9_16924 = add i32 %v4_1691c, 8
  store i32 %v9_16924, i32* @r0, align 4
  %v3_16928 = load i32, i32* %r2.global-to-local, align 4
  %v4_16928 = add i32 %v3_16928, -4
  store i32 %v4_16928, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1690c, %bb, %dec_label_pc_16adc, %dec_label_pc_16a70, %dec_label_pc_16a04, %bb139
  %v0_1692c = phi i32 [ %v0_1692c.pre, %.thread122 ], [ %v2_1697c, %.thread128 ], [ %v1_1690c, %dec_label_pc_1690c ], [ %v2_168a0, %bb ], [ %v0_1692c61, %dec_label_pc_16adc ], [ %v0_1692c60, %dec_label_pc_16a70 ], [ %v0_1692c59, %dec_label_pc_16a04 ], [ %v4_16928, %bb139 ]
  %v1_1692c = add i32 %v0_1692c, 4
  store i32 %v1_1692c, i32* %r2.global-to-local, align 4
  %v3_1692c = sub i32 0, %v0_1692c
  %v4_1692c = and i32 %v1_1692c, %v3_1692c
  %v5_1692c = icmp slt i32 %v4_1692c, 0
  store i1 %v5_1692c, i1* %cpsr_v.global-to-local, align 1
  %v6_1692c = icmp slt i32 %v1_1692c, 0
  store i1 %v6_1692c, i1* %cpsr_n.global-to-local, align 1
  %v7_1692c = icmp eq i32 %v1_1692c, 0
  store i1 %v7_1692c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1692c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16934.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16930 = load i8*, i8** %stack_var_-8, align 4
  %v4_16930 = ptrtoint i8* %v3_16930 to i32
  store i32 %v4_16930, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16934 = phi i32 [ %v0_16934.pre, %bb140.bb142_crit_edge ], [ %v8_1689c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1692c, i32 %v0_16934)
  %v0_16938 = load i32, i32* %r2.global-to-local, align 4
  %v1_16938 = add i32 %v0_16938, -2
  %v3_16938 = sub i32 1, %v0_16938
  %v4_16938 = and i32 %v3_16938, %v0_16938
  %v5_16938 = icmp slt i32 %v4_16938, 0
  store i1 %v5_16938, i1* %cpsr_v.global-to-local, align 1
  %v6_16938 = icmp slt i32 %v1_16938, 0
  store i1 %v6_16938, i1* %cpsr_n.global-to-local, align 1
  %v7_16938 = icmp eq i32 %v0_16938, 2
  store i1 %v7_16938, i1* %cpsr_z.global-to-local, align 1
  %v0_1693c = load i32, i32* @r1, align 4
  %v1_1693c = inttoptr i32 %v0_1693c to i8*
  %v2_1693c = load i8, i8* %v1_1693c, align 1
  %v5_1693c = add i32 %v0_1693c, 1
  store i32 %v5_1693c, i32* %r1.global-to-local, align 4
  %v2_16940 = load i32, i32* @r0, align 4
  %v3_16940 = inttoptr i32 %v2_16940 to i8*
  store i8 %v2_1693c, i8* %v3_16940, align 1
  %v4_16940 = load i32, i32* @r0, align 4
  %v5_16940 = add i32 %v4_16940, 1
  store i32 %v5_16940, i32* %r0.global-to-local, align 4
  %v0_16944 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16944 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16944 = xor i1 %v0_16944, %v1_16944
  br i1 %v2_16944, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16944 = load i32, i32* %r1.global-to-local, align 4
  %v4_16944 = inttoptr i32 %v3_16944 to i8*
  %v5_16944 = load i8, i8* %v4_16944, align 1
  %v8_16944 = add i32 %v3_16944, 1
  store i32 %v8_16944, i32* %r1.global-to-local, align 4
  %v6_16948 = inttoptr i32 %v5_16940 to i8*
  store i8 %v5_16944, i8* %v6_16948, align 1
  %v7_16948 = load i32, i32* %r0.global-to-local, align 4
  %v8_16948 = add i32 %v7_16948, 1
  store i32 %v8_16948, i32* %r0.global-to-local, align 4
  %v1_1694c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1694c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16950 = phi i32 [ %v8_16948, %bb143 ], [ %v5_16940, %bb142 ]
  %v2_16950 = phi i1 [ %v2_1694c.pre, %bb143 ], [ %v1_16944, %bb142 ]
  %v1_16950 = phi i1 [ %v1_1694c.pre, %bb143 ], [ %v0_16944, %bb142 ]
  %v0_1694c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1694c = xor i1 %v2_16950, %v1_16950
  %v4_1694c = or i1 %v0_1694c, %v3_1694c
  br i1 %v4_1694c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1694c = load i32, i32* %r1.global-to-local, align 4
  %v6_1694c = inttoptr i32 %v5_1694c to i8*
  %v7_1694c = load i8, i8* %v6_1694c, align 1
  %v10_1694c = add i32 %v5_1694c, 1
  store i32 %v10_1694c, i32* %r1.global-to-local, align 4
  %v8_16950 = inttoptr i32 %v7_16950 to i8*
  store i8 %v7_1694c, i8* %v8_16950, align 1
  %v9_16950 = load i32, i32* %r0.global-to-local, align 4
  %v10_16950 = add i32 %v9_16950, 1
  store i32 %v10_16950, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16954 = load i8*, i8** %stack_var_-8, align 4
  %v3_16954 = ptrtoint i8* %v2_16954 to i32
  store i32 %v3_16954, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1689c)
  %v0_1695c.pre = load i32, i32* @ip, align 4
  %v0_16964.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16968.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1695c

dec_label_pc_1695c:                               ; preds = %dec_label_pc_168a8, %.thread126
  %v2_16968 = phi i32 [ %v1_16890, %dec_label_pc_168a8 ], [ %v2_16968.pre, %.thread126 ]
  %v0_16964 = phi i32 [ %v0_16890, %dec_label_pc_168a8 ], [ %v0_16964.pre, %.thread126 ]
  %v0_1695c = phi i32 [ %v1_168a8, %dec_label_pc_168a8 ], [ %v0_1695c.pre, %.thread126 ]
  %v1_1695c = sub i32 4, %v0_1695c
  store i32 %v1_1695c, i32* @ip, align 4
  %v1_16960 = add i32 %v1_1695c, -2
  %v3_16960 = sub i32 1, %v1_1695c
  %v4_16960 = and i32 %v3_16960, %v1_1695c
  %v5_16960 = icmp slt i32 %v4_16960, 0
  store i1 %v5_16960, i1* %cpsr_v.global-to-local, align 1
  %v6_16960 = icmp slt i32 %v1_16960, 0
  store i1 %v6_16960, i1* %cpsr_n.global-to-local, align 1
  %v7_16960 = icmp eq i32 %v1_1695c, 2
  store i1 %v7_16960, i1* %cpsr_z.global-to-local, align 1
  %v1_16964 = inttoptr i32 %v0_16964 to i8*
  %v2_16964 = load i8, i8* %v1_16964, align 1
  %v3_16964 = zext i8 %v2_16964 to i32
  store i32 %v3_16964, i32* @r3, align 4
  %v5_16964 = add i32 %v0_16964, 1
  store i32 %v5_16964, i32* @r1, align 4
  %v3_16968 = inttoptr i32 %v2_16968 to i8*
  store i8 %v2_16964, i8* %v3_16968, align 1
  %v4_16968 = load i32, i32* @r0, align 4
  %v5_16968 = add i32 %v4_16968, 1
  store i32 %v5_16968, i32* @r0, align 4
  %v0_1696c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1696c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1696c = xor i1 %v0_1696c, %v1_1696c
  br i1 %v2_1696c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1695c
  %v3_1696c = load i32, i32* @r1, align 4
  %v4_1696c = inttoptr i32 %v3_1696c to i8*
  %v5_1696c = load i8, i8* %v4_1696c, align 1
  %v6_1696c = zext i8 %v5_1696c to i32
  store i32 %v6_1696c, i32* @r3, align 4
  %v8_1696c = add i32 %v3_1696c, 1
  store i32 %v8_1696c, i32* @r1, align 4
  %v6_16970 = inttoptr i32 %v5_16968 to i8*
  store i8 %v5_1696c, i8* %v6_16970, align 1
  %v7_16970 = load i32, i32* @r0, align 4
  %v8_16970 = add i32 %v7_16970, 1
  store i32 %v8_16970, i32* @r0, align 4
  %v1_16974.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16974.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1695c, %bb145
  %v7_16978 = phi i32 [ %v8_16970, %bb145 ], [ %v5_16968, %dec_label_pc_1695c ]
  %v2_16978 = phi i1 [ %v2_16974.pre, %bb145 ], [ %v1_1696c, %dec_label_pc_1695c ]
  %v1_16978 = phi i1 [ %v1_16974.pre, %bb145 ], [ %v0_1696c, %dec_label_pc_1695c ]
  %v0_16974 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16974 = xor i1 %v2_16978, %v1_16978
  %v4_16974 = or i1 %v0_16974, %v3_16974
  br i1 %v4_16974, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16974 = load i32, i32* @r1, align 4
  %v6_16974 = inttoptr i32 %v5_16974 to i8*
  %v7_16974 = load i8, i8* %v6_16974, align 1
  %v8_16974 = zext i8 %v7_16974 to i32
  store i32 %v8_16974, i32* @r3, align 4
  %v10_16974 = add i32 %v5_16974, 1
  store i32 %v10_16974, i32* @r1, align 4
  %v8_16978 = inttoptr i32 %v7_16978 to i8*
  store i8 %v7_16974, i8* %v8_16978, align 1
  %v9_16978 = load i32, i32* @r0, align 4
  %v10_16978 = add i32 %v9_16978, 1
  store i32 %v10_16978, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16aac77 = phi i32 [ %v10_16978, %bb146 ], [ %v7_16978, %.thread127 ]
  %v0_1697c = load i32, i32* %r2.global-to-local, align 4
  %v1_1697c = load i32, i32* @ip, align 4
  %v2_1697c = sub i32 %v0_1697c, %v1_1697c
  store i32 %v2_1697c, i32* %r2.global-to-local, align 4
  %v4_1697c = xor i32 %v1_1697c, %v0_1697c
  %v5_1697c = xor i32 %v2_1697c, %v0_1697c
  %v6_1697c = and i32 %v5_1697c, %v4_1697c
  %v7_1697c = icmp slt i32 %v6_1697c, 0
  store i1 %v7_1697c, i1* %cpsr_v.global-to-local, align 1
  %v8_1697c = icmp slt i32 %v2_1697c, 0
  store i1 %v8_1697c, i1* %cpsr_n.global-to-local, align 1
  %v9_1697c = icmp eq i32 %v0_1697c, %v1_1697c
  store i1 %v9_1697c, i1* %cpsr_z.global-to-local, align 1
  %v2_16980 = xor i1 %v8_1697c, %v7_1697c
  br i1 %v2_16980, label %bb140, label %dec_label_pc_16984

dec_label_pc_16984:                               ; preds = %.thread128
  %v0_16984 = load i32, i32* @r1, align 4
  %v1_16984 = urem i32 %v0_16984, 4
  store i32 %v1_16984, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16984 = icmp eq i32 %v1_16984, 0
  store i1 %v2_16984, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16984 to i2
  br i1 %v2_16984, label %dec_label_pc_168b8, label %dec_label_pc_1698c

dec_label_pc_1698c:                               ; preds = %dec_label_pc_168b0, %dec_label_pc_16984
  %v0_16aac76 = phi i32 [ %v1_16890, %dec_label_pc_168b0 ], [ %v0_16aac77, %dec_label_pc_16984 ]
  %v0_16a14 = phi i32 [ %v2_168a0, %dec_label_pc_168b0 ], [ %v2_1697c, %dec_label_pc_16984 ]
  %v0_16994.off0 = phi i2 [ %extract.t, %dec_label_pc_168b0 ], [ %extract.t131, %dec_label_pc_16984 ]
  %v0_1698c = phi i32 [ %v0_16890, %dec_label_pc_168b0 ], [ %v0_16984, %dec_label_pc_16984 ]
  %v1_1698c = and i32 %v0_1698c, -4
  store i32 %v1_1698c, i32* %r1.global-to-local, align 4
  %v1_16990 = inttoptr i32 %v1_1698c to i32*
  %v2_16990 = load i32, i32* %v1_16990, align 4
  store i32 %v2_16990, i32* %lr.global-to-local, align 4
  %v4_16990 = add i32 %v1_1698c, 4
  store i32 %v4_16990, i32* %r1.global-to-local, align 4
  %v1_16a0c = add i32 %v0_16a14, -12
  %v3_16a0c = sub i32 11, %v0_16a14
  %v4_16a0c = and i32 %v3_16a0c, %v0_16a14
  %v5_16a0c = icmp slt i32 %v4_16a0c, 0
  store i1 %v5_16a0c, i1* %cpsr_v.global-to-local, align 1
  %v6_16a0c = icmp slt i32 %v1_16a0c, 0
  store i1 %v6_16a0c, i1* %cpsr_n.global-to-local, align 1
  %v7_16a0c = icmp eq i32 %v0_16a14, 12
  store i1 %v7_16a0c, i1* %cpsr_z.global-to-local, align 1
  %v2_16a10 = xor i1 %v6_16a0c, %v5_16a0c
  switch i2 %v0_16994.off0, label %dec_label_pc_169a0 [
    i2 -1, label %dec_label_pc_16a78
    i2 -2, label %dec_label_pc_16a0c
  ]

dec_label_pc_169a0:                               ; preds = %dec_label_pc_1698c
  br i1 %v2_16a10, label %dec_label_pc_169ec, label %dec_label_pc_169a8

dec_label_pc_169a8:                               ; preds = %dec_label_pc_169a0
  store i32 %v1_16a0c, i32* %r2.global-to-local, align 4
  %v3_169ac = load i32, i32* @r4, align 4
  store i32 %v3_169ac, i32* %stack_var_-16, align 4
  %v6_169ac = load i32, i32* @r5, align 4
  store i32 %v6_169ac, i32* %stack_var_-12, align 4
  br label %dec_label_pc_169b0

dec_label_pc_169b0:                               ; preds = %dec_label_pc_169b0.dec_label_pc_169b0_crit_edge, %dec_label_pc_169a8
  %v0_169d4 = phi i32 [ %v12_169d4, %dec_label_pc_169b0.dec_label_pc_169b0_crit_edge ], [ %v0_16aac76, %dec_label_pc_169a8 ]
  %v0_169b4 = phi i32 [ %v0_169b4.pre, %dec_label_pc_169b0.dec_label_pc_169b0_crit_edge ], [ %v4_16990, %dec_label_pc_169a8 ]
  %v0_169b0 = phi i32 [ %v0_169b0.pre, %dec_label_pc_169b0.dec_label_pc_169b0_crit_edge ], [ %v2_16990, %dec_label_pc_169a8 ]
  %v3_169b0 = udiv i32 %v0_169b0, 256
  %v1_169b4 = inttoptr i32 %v0_169b4 to i32*
  %v2_169b4 = load i32, i32* %v1_169b4, align 4
  store i32 %v2_169b4, i32* %r4.global-to-local, align 4
  %v3_169b4 = add i32 %v0_169b4, 4
  %v4_169b4 = inttoptr i32 %v3_169b4 to i32*
  %v5_169b4 = load i32, i32* %v4_169b4, align 4
  store i32 %v5_169b4, i32* %r5.global-to-local, align 4
  %v6_169b4 = add i32 %v0_169b4, 8
  %v7_169b4 = inttoptr i32 %v6_169b4 to i32*
  %v8_169b4 = load i32, i32* %v7_169b4, align 4
  store i32 %v8_169b4, i32* %ip.global-to-local, align 4
  %v9_169b4 = add i32 %v0_169b4, 12
  %v10_169b4 = inttoptr i32 %v9_169b4 to i32*
  %v11_169b4 = load i32, i32* %v10_169b4, align 4
  store i32 %v11_169b4, i32* %lr.global-to-local, align 4
  %v12_169b4 = add i32 %v0_169b4, 16
  store i32 %v12_169b4, i32* %r1.global-to-local, align 4
  %v4_169b8 = mul i32 %v2_169b4, 16777216
  %v5_169b8 = or i32 %v4_169b8, %v3_169b0
  store i32 %v5_169b8, i32* @r3, align 4
  %v3_169bc = udiv i32 %v2_169b4, 256
  %v4_169c0 = mul i32 %v5_169b4, 16777216
  %v5_169c0 = or i32 %v4_169c0, %v3_169bc
  store i32 %v5_169c0, i32* %r4.global-to-local, align 4
  %v3_169c4 = udiv i32 %v5_169b4, 256
  %v4_169c8 = mul i32 %v8_169b4, 16777216
  %v5_169c8 = or i32 %v4_169c8, %v3_169c4
  store i32 %v5_169c8, i32* %r5.global-to-local, align 4
  %v3_169cc = udiv i32 %v8_169b4, 256
  %v4_169d0 = mul i32 %v11_169b4, 16777216
  %v5_169d0 = or i32 %v4_169d0, %v3_169cc
  store i32 %v5_169d0, i32* @ip, align 4
  %v1_169d4 = inttoptr i32 %v0_169d4 to i32*
  store i32 %v5_169b8, i32* %v1_169d4, align 4
  %v3_169d4 = add i32 %v0_169d4, 4
  %v4_169d4 = inttoptr i32 %v3_169d4 to i32*
  %v5_169d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_169d4, i32* %v4_169d4, align 4
  %v6_169d4 = add i32 %v0_169d4, 8
  %v7_169d4 = inttoptr i32 %v6_169d4 to i32*
  %v8_169d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_169d4, i32* %v7_169d4, align 4
  %v9_169d4 = add i32 %v0_169d4, 12
  %v10_169d4 = inttoptr i32 %v9_169d4 to i32*
  %v11_169d4 = load i32, i32* @ip, align 4
  store i32 %v11_169d4, i32* %v10_169d4, align 4
  %v12_169d4 = add i32 %v0_169d4, 16
  store i32 %v12_169d4, i32* @r0, align 4
  %v0_169d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_169d8 = add i32 %v0_169d8, -16
  store i32 %v1_169d8, i32* %r2.global-to-local, align 4
  %v3_169d8 = sub i32 15, %v0_169d8
  %v4_169d8 = and i32 %v3_169d8, %v0_169d8
  %v5_169d8 = icmp slt i32 %v4_169d8, 0
  %v6_169d8 = icmp slt i32 %v1_169d8, 0
  %v2_169dc = xor i1 %v6_169d8, %v5_169d8
  br i1 %v2_169dc, label %dec_label_pc_169e0, label %dec_label_pc_169b0.dec_label_pc_169b0_crit_edge

dec_label_pc_169b0.dec_label_pc_169b0_crit_edge:  ; preds = %dec_label_pc_169b0
  %v0_169b0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_169b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_169b0

dec_label_pc_169e0:                               ; preds = %dec_label_pc_169b0
  %v2_169e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_169e0, i32* @r4, align 4
  %v5_169e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_169e0, i32* @r5, align 4
  %v1_169e4 = add i32 %v0_169d8, -4
  store i32 %v1_169e4, i32* %r2.global-to-local, align 4
  %v3_169e4 = add i32 %v0_169d8, 2147483632
  %v4_169e4 = and i32 %v1_169e4, %v3_169e4
  %v5_169e4 = icmp slt i32 %v4_169e4, 0
  store i1 %v5_169e4, i1* %cpsr_v.global-to-local, align 1
  %v6_169e4 = icmp slt i32 %v1_169e4, 0
  store i1 %v6_169e4, i1* %cpsr_n.global-to-local, align 1
  %v7_169e4 = icmp eq i32 %v1_169e4, 0
  store i1 %v7_169e4, i1* %cpsr_z.global-to-local, align 1
  %v2_169e8 = xor i1 %v6_169e4, %v5_169e4
  br i1 %v2_169e8, label %dec_label_pc_16a04, label %dec_label_pc_169ec

dec_label_pc_169ec:                               ; preds = %dec_label_pc_169e0, %dec_label_pc_169a0, %dec_label_pc_169ec
  %v1_169f8 = phi i32 [ %v4_169f8, %dec_label_pc_169ec ], [ %v12_169d4, %dec_label_pc_169e0 ], [ %v0_16aac76, %dec_label_pc_169a0 ]
  %v0_169ec = load i32, i32* %lr.global-to-local, align 4
  %v3_169ec = udiv i32 %v0_169ec, 256
  store i32 %v3_169ec, i32* %ip.global-to-local, align 4
  %v0_169f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_169f0 = inttoptr i32 %v0_169f0 to i32*
  %v2_169f0 = load i32, i32* %v1_169f0, align 4
  store i32 %v2_169f0, i32* %lr.global-to-local, align 4
  %v4_169f0 = add i32 %v0_169f0, 4
  store i32 %v4_169f0, i32* %r1.global-to-local, align 4
  %v4_169f4 = mul i32 %v2_169f0, 16777216
  %v5_169f4 = or i32 %v4_169f4, %v3_169ec
  store i32 %v5_169f4, i32* @ip, align 4
  %v2_169f8 = inttoptr i32 %v1_169f8 to i32*
  store i32 %v5_169f4, i32* %v2_169f8, align 4
  %v3_169f8 = load i32, i32* @r0, align 4
  %v4_169f8 = add i32 %v3_169f8, 4
  store i32 %v4_169f8, i32* @r0, align 4
  %v0_169fc = load i32, i32* %r2.global-to-local, align 4
  %v1_169fc = add i32 %v0_169fc, -4
  store i32 %v1_169fc, i32* %r2.global-to-local, align 4
  %v3_169fc = sub i32 3, %v0_169fc
  %v4_169fc = and i32 %v3_169fc, %v0_169fc
  %v5_169fc = icmp slt i32 %v4_169fc, 0
  %v6_169fc = icmp slt i32 %v1_169fc, 0
  %v2_16a00 = xor i1 %v6_169fc, %v5_169fc
  br i1 %v2_16a00, label %dec_label_pc_16a04.loopexit, label %dec_label_pc_169ec

dec_label_pc_16a04.loopexit:                      ; preds = %dec_label_pc_169ec
  %v7_169fc = icmp eq i32 %v0_169fc, 4
  store i1 %v5_169fc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_169fc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_169fc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a04

dec_label_pc_16a04:                               ; preds = %dec_label_pc_16a04.loopexit, %dec_label_pc_169e0
  %v0_1692c59 = phi i32 [ %v1_169fc, %dec_label_pc_16a04.loopexit ], [ %v1_169e4, %dec_label_pc_169e0 ]
  %v0_16a04 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a04 = add i32 %v0_16a04, -3
  store i32 %v1_16a04, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a0c:                               ; preds = %dec_label_pc_1698c
  br i1 %v2_16a10, label %dec_label_pc_16a58, label %dec_label_pc_16a14

dec_label_pc_16a14:                               ; preds = %dec_label_pc_16a0c
  store i32 %v1_16a0c, i32* %r2.global-to-local, align 4
  %v3_16a18 = load i32, i32* @r4, align 4
  store i32 %v3_16a18, i32* %stack_var_-16, align 4
  %v6_16a18 = load i32, i32* @r5, align 4
  store i32 %v6_16a18, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a1c

dec_label_pc_16a1c:                               ; preds = %dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge, %dec_label_pc_16a14
  %v0_16a40 = phi i32 [ %v12_16a40, %dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge ], [ %v0_16aac76, %dec_label_pc_16a14 ]
  %v0_16a20 = phi i32 [ %v0_16a20.pre, %dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge ], [ %v4_16990, %dec_label_pc_16a14 ]
  %v0_16a1c = phi i32 [ %v0_16a1c.pre, %dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge ], [ %v2_16990, %dec_label_pc_16a14 ]
  %v3_16a1c = udiv i32 %v0_16a1c, 65536
  %v1_16a20 = inttoptr i32 %v0_16a20 to i32*
  %v2_16a20 = load i32, i32* %v1_16a20, align 4
  store i32 %v2_16a20, i32* %r4.global-to-local, align 4
  %v3_16a20 = add i32 %v0_16a20, 4
  %v4_16a20 = inttoptr i32 %v3_16a20 to i32*
  %v5_16a20 = load i32, i32* %v4_16a20, align 4
  store i32 %v5_16a20, i32* %r5.global-to-local, align 4
  %v6_16a20 = add i32 %v0_16a20, 8
  %v7_16a20 = inttoptr i32 %v6_16a20 to i32*
  %v8_16a20 = load i32, i32* %v7_16a20, align 4
  store i32 %v8_16a20, i32* %ip.global-to-local, align 4
  %v9_16a20 = add i32 %v0_16a20, 12
  %v10_16a20 = inttoptr i32 %v9_16a20 to i32*
  %v11_16a20 = load i32, i32* %v10_16a20, align 4
  store i32 %v11_16a20, i32* %lr.global-to-local, align 4
  %v12_16a20 = add i32 %v0_16a20, 16
  store i32 %v12_16a20, i32* %r1.global-to-local, align 4
  %v4_16a24 = mul i32 %v2_16a20, 65536
  %v5_16a24 = or i32 %v4_16a24, %v3_16a1c
  store i32 %v5_16a24, i32* @r3, align 4
  %v3_16a28 = udiv i32 %v2_16a20, 65536
  %v4_16a2c = mul i32 %v5_16a20, 65536
  %v5_16a2c = or i32 %v4_16a2c, %v3_16a28
  store i32 %v5_16a2c, i32* %r4.global-to-local, align 4
  %v3_16a30 = udiv i32 %v5_16a20, 65536
  %v4_16a34 = mul i32 %v8_16a20, 65536
  %v5_16a34 = or i32 %v4_16a34, %v3_16a30
  store i32 %v5_16a34, i32* %r5.global-to-local, align 4
  %v3_16a38 = udiv i32 %v8_16a20, 65536
  %v4_16a3c = mul i32 %v11_16a20, 65536
  %v5_16a3c = or i32 %v4_16a3c, %v3_16a38
  store i32 %v5_16a3c, i32* @ip, align 4
  %v1_16a40 = inttoptr i32 %v0_16a40 to i32*
  store i32 %v5_16a24, i32* %v1_16a40, align 4
  %v3_16a40 = add i32 %v0_16a40, 4
  %v4_16a40 = inttoptr i32 %v3_16a40 to i32*
  %v5_16a40 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16a40, i32* %v4_16a40, align 4
  %v6_16a40 = add i32 %v0_16a40, 8
  %v7_16a40 = inttoptr i32 %v6_16a40 to i32*
  %v8_16a40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16a40, i32* %v7_16a40, align 4
  %v9_16a40 = add i32 %v0_16a40, 12
  %v10_16a40 = inttoptr i32 %v9_16a40 to i32*
  %v11_16a40 = load i32, i32* @ip, align 4
  store i32 %v11_16a40, i32* %v10_16a40, align 4
  %v12_16a40 = add i32 %v0_16a40, 16
  store i32 %v12_16a40, i32* @r0, align 4
  %v0_16a44 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a44 = add i32 %v0_16a44, -16
  store i32 %v1_16a44, i32* %r2.global-to-local, align 4
  %v3_16a44 = sub i32 15, %v0_16a44
  %v4_16a44 = and i32 %v3_16a44, %v0_16a44
  %v5_16a44 = icmp slt i32 %v4_16a44, 0
  %v6_16a44 = icmp slt i32 %v1_16a44, 0
  %v2_16a48 = xor i1 %v6_16a44, %v5_16a44
  br i1 %v2_16a48, label %dec_label_pc_16a4c, label %dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge

dec_label_pc_16a1c.dec_label_pc_16a1c_crit_edge:  ; preds = %dec_label_pc_16a1c
  %v0_16a1c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a1c

dec_label_pc_16a4c:                               ; preds = %dec_label_pc_16a1c
  %v2_16a4c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16a4c, i32* @r4, align 4
  %v5_16a4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16a4c, i32* @r5, align 4
  %v1_16a50 = add i32 %v0_16a44, -4
  store i32 %v1_16a50, i32* %r2.global-to-local, align 4
  %v3_16a50 = add i32 %v0_16a44, 2147483632
  %v4_16a50 = and i32 %v1_16a50, %v3_16a50
  %v5_16a50 = icmp slt i32 %v4_16a50, 0
  store i1 %v5_16a50, i1* %cpsr_v.global-to-local, align 1
  %v6_16a50 = icmp slt i32 %v1_16a50, 0
  store i1 %v6_16a50, i1* %cpsr_n.global-to-local, align 1
  %v7_16a50 = icmp eq i32 %v1_16a50, 0
  store i1 %v7_16a50, i1* %cpsr_z.global-to-local, align 1
  %v2_16a54 = xor i1 %v6_16a50, %v5_16a50
  br i1 %v2_16a54, label %dec_label_pc_16a70, label %dec_label_pc_16a58

dec_label_pc_16a58:                               ; preds = %dec_label_pc_16a4c, %dec_label_pc_16a0c, %dec_label_pc_16a58
  %v1_16a64 = phi i32 [ %v4_16a64, %dec_label_pc_16a58 ], [ %v12_16a40, %dec_label_pc_16a4c ], [ %v0_16aac76, %dec_label_pc_16a0c ]
  %v0_16a58 = load i32, i32* %lr.global-to-local, align 4
  %v3_16a58 = udiv i32 %v0_16a58, 65536
  store i32 %v3_16a58, i32* %ip.global-to-local, align 4
  %v0_16a5c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a5c = inttoptr i32 %v0_16a5c to i32*
  %v2_16a5c = load i32, i32* %v1_16a5c, align 4
  store i32 %v2_16a5c, i32* %lr.global-to-local, align 4
  %v4_16a5c = add i32 %v0_16a5c, 4
  store i32 %v4_16a5c, i32* %r1.global-to-local, align 4
  %v4_16a60 = mul i32 %v2_16a5c, 65536
  %v5_16a60 = or i32 %v4_16a60, %v3_16a58
  store i32 %v5_16a60, i32* @ip, align 4
  %v2_16a64 = inttoptr i32 %v1_16a64 to i32*
  store i32 %v5_16a60, i32* %v2_16a64, align 4
  %v3_16a64 = load i32, i32* @r0, align 4
  %v4_16a64 = add i32 %v3_16a64, 4
  store i32 %v4_16a64, i32* @r0, align 4
  %v0_16a68 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a68 = add i32 %v0_16a68, -4
  store i32 %v1_16a68, i32* %r2.global-to-local, align 4
  %v3_16a68 = sub i32 3, %v0_16a68
  %v4_16a68 = and i32 %v3_16a68, %v0_16a68
  %v5_16a68 = icmp slt i32 %v4_16a68, 0
  %v6_16a68 = icmp slt i32 %v1_16a68, 0
  %v2_16a6c = xor i1 %v6_16a68, %v5_16a68
  br i1 %v2_16a6c, label %dec_label_pc_16a70.loopexit, label %dec_label_pc_16a58

dec_label_pc_16a70.loopexit:                      ; preds = %dec_label_pc_16a58
  %v7_16a68 = icmp eq i32 %v0_16a68, 4
  store i1 %v5_16a68, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a68, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a68, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a70

dec_label_pc_16a70:                               ; preds = %dec_label_pc_16a70.loopexit, %dec_label_pc_16a4c
  %v0_1692c60 = phi i32 [ %v1_16a68, %dec_label_pc_16a70.loopexit ], [ %v1_16a50, %dec_label_pc_16a4c ]
  %v0_16a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a70 = add i32 %v0_16a70, -2
  store i32 %v1_16a70, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a78:                               ; preds = %dec_label_pc_1698c
  br i1 %v2_16a10, label %dec_label_pc_16ac4, label %dec_label_pc_16a80

dec_label_pc_16a80:                               ; preds = %dec_label_pc_16a78
  store i32 %v1_16a0c, i32* %r2.global-to-local, align 4
  %v3_16a84 = load i32, i32* @r4, align 4
  store i32 %v3_16a84, i32* %stack_var_-16, align 4
  %v6_16a84 = load i32, i32* @r5, align 4
  store i32 %v6_16a84, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a88

dec_label_pc_16a88:                               ; preds = %dec_label_pc_16a88.dec_label_pc_16a88_crit_edge, %dec_label_pc_16a80
  %v0_16aac = phi i32 [ %v12_16aac, %dec_label_pc_16a88.dec_label_pc_16a88_crit_edge ], [ %v0_16aac76, %dec_label_pc_16a80 ]
  %v0_16a8c = phi i32 [ %v0_16a8c.pre, %dec_label_pc_16a88.dec_label_pc_16a88_crit_edge ], [ %v4_16990, %dec_label_pc_16a80 ]
  %v0_16a88 = phi i32 [ %v0_16a88.pre, %dec_label_pc_16a88.dec_label_pc_16a88_crit_edge ], [ %v2_16990, %dec_label_pc_16a80 ]
  %v3_16a88 = udiv i32 %v0_16a88, 16777216
  %v1_16a8c = inttoptr i32 %v0_16a8c to i32*
  %v2_16a8c = load i32, i32* %v1_16a8c, align 4
  store i32 %v2_16a8c, i32* %r4.global-to-local, align 4
  %v3_16a8c = add i32 %v0_16a8c, 4
  %v4_16a8c = inttoptr i32 %v3_16a8c to i32*
  %v5_16a8c = load i32, i32* %v4_16a8c, align 4
  store i32 %v5_16a8c, i32* %r5.global-to-local, align 4
  %v6_16a8c = add i32 %v0_16a8c, 8
  %v7_16a8c = inttoptr i32 %v6_16a8c to i32*
  %v8_16a8c = load i32, i32* %v7_16a8c, align 4
  store i32 %v8_16a8c, i32* %ip.global-to-local, align 4
  %v9_16a8c = add i32 %v0_16a8c, 12
  %v10_16a8c = inttoptr i32 %v9_16a8c to i32*
  %v11_16a8c = load i32, i32* %v10_16a8c, align 4
  store i32 %v11_16a8c, i32* %lr.global-to-local, align 4
  %v12_16a8c = add i32 %v0_16a8c, 16
  store i32 %v12_16a8c, i32* %r1.global-to-local, align 4
  %v4_16a90 = mul i32 %v2_16a8c, 256
  %v5_16a90 = or i32 %v4_16a90, %v3_16a88
  store i32 %v5_16a90, i32* @r3, align 4
  %v3_16a94 = udiv i32 %v2_16a8c, 16777216
  %v4_16a98 = mul i32 %v5_16a8c, 256
  %v5_16a98 = or i32 %v4_16a98, %v3_16a94
  store i32 %v5_16a98, i32* %r4.global-to-local, align 4
  %v3_16a9c = udiv i32 %v5_16a8c, 16777216
  %v4_16aa0 = mul i32 %v8_16a8c, 256
  %v5_16aa0 = or i32 %v4_16aa0, %v3_16a9c
  store i32 %v5_16aa0, i32* %r5.global-to-local, align 4
  %v3_16aa4 = udiv i32 %v8_16a8c, 16777216
  %v4_16aa8 = mul i32 %v11_16a8c, 256
  %v5_16aa8 = or i32 %v4_16aa8, %v3_16aa4
  store i32 %v5_16aa8, i32* @ip, align 4
  %v1_16aac = inttoptr i32 %v0_16aac to i32*
  store i32 %v5_16a90, i32* %v1_16aac, align 4
  %v3_16aac = add i32 %v0_16aac, 4
  %v4_16aac = inttoptr i32 %v3_16aac to i32*
  %v5_16aac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16aac, i32* %v4_16aac, align 4
  %v6_16aac = add i32 %v0_16aac, 8
  %v7_16aac = inttoptr i32 %v6_16aac to i32*
  %v8_16aac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16aac, i32* %v7_16aac, align 4
  %v9_16aac = add i32 %v0_16aac, 12
  %v10_16aac = inttoptr i32 %v9_16aac to i32*
  %v11_16aac = load i32, i32* @ip, align 4
  store i32 %v11_16aac, i32* %v10_16aac, align 4
  %v12_16aac = add i32 %v0_16aac, 16
  store i32 %v12_16aac, i32* @r0, align 4
  %v0_16ab0 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ab0 = add i32 %v0_16ab0, -16
  store i32 %v1_16ab0, i32* %r2.global-to-local, align 4
  %v3_16ab0 = sub i32 15, %v0_16ab0
  %v4_16ab0 = and i32 %v3_16ab0, %v0_16ab0
  %v5_16ab0 = icmp slt i32 %v4_16ab0, 0
  %v6_16ab0 = icmp slt i32 %v1_16ab0, 0
  %v2_16ab4 = xor i1 %v6_16ab0, %v5_16ab0
  br i1 %v2_16ab4, label %dec_label_pc_16ab8, label %dec_label_pc_16a88.dec_label_pc_16a88_crit_edge

dec_label_pc_16a88.dec_label_pc_16a88_crit_edge:  ; preds = %dec_label_pc_16a88
  %v0_16a88.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a8c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a88

dec_label_pc_16ab8:                               ; preds = %dec_label_pc_16a88
  %v2_16ab8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16ab8, i32* @r4, align 4
  %v5_16ab8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16ab8, i32* @r5, align 4
  %v1_16abc = add i32 %v0_16ab0, -4
  store i32 %v1_16abc, i32* %r2.global-to-local, align 4
  %v3_16abc = add i32 %v0_16ab0, 2147483632
  %v4_16abc = and i32 %v1_16abc, %v3_16abc
  %v5_16abc = icmp slt i32 %v4_16abc, 0
  store i1 %v5_16abc, i1* %cpsr_v.global-to-local, align 1
  %v6_16abc = icmp slt i32 %v1_16abc, 0
  store i1 %v6_16abc, i1* %cpsr_n.global-to-local, align 1
  %v7_16abc = icmp eq i32 %v1_16abc, 0
  store i1 %v7_16abc, i1* %cpsr_z.global-to-local, align 1
  %v2_16ac0 = xor i1 %v6_16abc, %v5_16abc
  br i1 %v2_16ac0, label %dec_label_pc_16adc, label %dec_label_pc_16ac4

dec_label_pc_16ac4:                               ; preds = %dec_label_pc_16ab8, %dec_label_pc_16a78, %dec_label_pc_16ac4
  %v1_16ad0 = phi i32 [ %v4_16ad0, %dec_label_pc_16ac4 ], [ %v12_16aac, %dec_label_pc_16ab8 ], [ %v0_16aac76, %dec_label_pc_16a78 ]
  %v0_16ac4 = load i32, i32* %lr.global-to-local, align 4
  %v3_16ac4 = udiv i32 %v0_16ac4, 16777216
  store i32 %v3_16ac4, i32* %ip.global-to-local, align 4
  %v0_16ac8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ac8 = inttoptr i32 %v0_16ac8 to i32*
  %v2_16ac8 = load i32, i32* %v1_16ac8, align 4
  store i32 %v2_16ac8, i32* %lr.global-to-local, align 4
  %v4_16ac8 = add i32 %v0_16ac8, 4
  store i32 %v4_16ac8, i32* %r1.global-to-local, align 4
  %v4_16acc = mul i32 %v2_16ac8, 256
  %v5_16acc = or i32 %v4_16acc, %v3_16ac4
  store i32 %v5_16acc, i32* @ip, align 4
  %v2_16ad0 = inttoptr i32 %v1_16ad0 to i32*
  store i32 %v5_16acc, i32* %v2_16ad0, align 4
  %v3_16ad0 = load i32, i32* @r0, align 4
  %v4_16ad0 = add i32 %v3_16ad0, 4
  store i32 %v4_16ad0, i32* @r0, align 4
  %v0_16ad4 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ad4 = add i32 %v0_16ad4, -4
  store i32 %v1_16ad4, i32* %r2.global-to-local, align 4
  %v3_16ad4 = sub i32 3, %v0_16ad4
  %v4_16ad4 = and i32 %v3_16ad4, %v0_16ad4
  %v5_16ad4 = icmp slt i32 %v4_16ad4, 0
  %v6_16ad4 = icmp slt i32 %v1_16ad4, 0
  %v2_16ad8 = xor i1 %v6_16ad4, %v5_16ad4
  br i1 %v2_16ad8, label %dec_label_pc_16adc.loopexit, label %dec_label_pc_16ac4

dec_label_pc_16adc.loopexit:                      ; preds = %dec_label_pc_16ac4
  %v7_16ad4 = icmp eq i32 %v0_16ad4, 4
  store i1 %v5_16ad4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16ad4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16ad4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16adc

dec_label_pc_16adc:                               ; preds = %dec_label_pc_16adc.loopexit, %dec_label_pc_16ab8
  %v0_1692c61 = phi i32 [ %v1_16ad4, %dec_label_pc_16adc.loopexit ], [ %v1_16abc, %dec_label_pc_16ab8 ]
  %v0_16adc = load i32, i32* %r1.global-to-local, align 4
  %v1_16adc = add i32 %v0_16adc, -1
  store i32 %v1_16adc, i32* @r1, align 4
  br label %bb140

dec_label_pc_16ae4:                               ; preds = %dec_label_pc_16890
  %v1_16ae4 = load i32, i32* @r2, align 4
  %v2_16ae4 = add i32 %v1_16ae4, %v0_16890
  store i32 %v2_16ae4, i32* %r1.global-to-local, align 4
  %v2_16ae8 = add i32 %v1_16ae4, %v1_16890
  store i32 %v2_16ae8, i32* %r0.global-to-local, align 4
  %v2_16aec = add i32 %v1_16ae4, -4
  store i32 %v2_16aec, i32* %r2.global-to-local, align 4
  %v4_16aec = sub i32 3, %v1_16ae4
  %v5_16aec = and i32 %v4_16aec, %v1_16ae4
  %v6_16aec = icmp slt i32 %v5_16aec, 0
  store i1 %v6_16aec, i1* %cpsr_v.global-to-local, align 1
  %v7_16aec = icmp slt i32 %v2_16aec, 0
  store i1 %v7_16aec, i1* %cpsr_n.global-to-local, align 1
  %v8_16aec = icmp eq i32 %v1_16ae4, 4
  store i1 %v8_16aec, i1* %cpsr_z.global-to-local, align 1
  %v5_16af0 = icmp slt i32 %v1_16ae4, 4
  br i1 %v5_16af0, label %bb150, label %dec_label_pc_16af4

dec_label_pc_16af4:                               ; preds = %dec_label_pc_16ae4
  %v1_16af4 = urem i32 %v2_16ae8, 4
  store i32 %v1_16af4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16af4 = icmp eq i32 %v1_16af4, 0
  store i1 %v2_16af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16af4, label %dec_label_pc_16afc, label %dec_label_pc_16b9c

dec_label_pc_16afc:                               ; preds = %dec_label_pc_16af4
  %v1_16afc = urem i32 %v2_16ae4, 4
  store i32 %v1_16afc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16afc = icmp eq i32 %v1_16afc, 0
  store i1 %v2_16afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16afc, label %dec_label_pc_16b04, label %dec_label_pc_16bc8

dec_label_pc_16b04:                               ; preds = %dec_label_pc_16afc, %dec_label_pc_16bc0
  %v0_16b1c37 = phi i32 [ %v2_16ae8, %dec_label_pc_16afc ], [ %v0_16c1020, %dec_label_pc_16bc0 ]
  %v0_16b1836 = phi i32 [ %v2_16ae4, %dec_label_pc_16afc ], [ %v0_16bc0, %dec_label_pc_16bc0 ]
  %v0_16b04 = phi i32 [ %v2_16aec, %dec_label_pc_16afc ], [ %v2_16bb8, %dec_label_pc_16bc0 ]
  %v2_16b04 = add i32 %v0_16b04, -8
  store i32 %v2_16b04, i32* %r2.global-to-local, align 4
  %v4_16b04 = sub i32 7, %v0_16b04
  %v5_16b04 = and i32 %v4_16b04, %v0_16b04
  %v6_16b04 = icmp slt i32 %v5_16b04, 0
  store i1 %v6_16b04, i1* %cpsr_v.global-to-local, align 1
  %v7_16b04 = icmp slt i32 %v2_16b04, 0
  store i1 %v7_16b04, i1* %cpsr_n.global-to-local, align 1
  %v8_16b04 = icmp eq i32 %v0_16b04, 8
  store i1 %v8_16b04, i1* %cpsr_z.global-to-local, align 1
  %v5_16b08 = icmp slt i32 %v0_16b04, 8
  br i1 %v5_16b08, label %dec_label_pc_16b54, label %dec_label_pc_16b0c

dec_label_pc_16b0c:                               ; preds = %dec_label_pc_16b04
  %v3_16b0c = load i32, i32* @r4, align 4
  %v5_16b0c = inttoptr i32 %v3_16b0c to i8*
  store i8* %v5_16b0c, i8** %stack_var_-8, align 4
  %v8_16b0c = load i32, i32* @lr, align 4
  %v2_16b10 = add i32 %v0_16b04, -28
  store i32 %v2_16b10, i32* %r2.global-to-local, align 4
  %v4_16b10 = sub i32 27, %v0_16b04
  %v5_16b10 = and i32 %v4_16b10, %v2_16b04
  %v6_16b10 = icmp slt i32 %v5_16b10, 0
  store i1 %v6_16b10, i1* %cpsr_v.global-to-local, align 1
  %v7_16b10 = icmp slt i32 %v2_16b10, 0
  store i1 %v7_16b10, i1* %cpsr_n.global-to-local, align 1
  %v8_16b10 = icmp eq i32 %v2_16b04, 20
  store i1 %v8_16b10, i1* %cpsr_z.global-to-local, align 1
  %v5_16b14 = icmp slt i32 %v2_16b04, 20
  br i1 %v5_16b14, label %dec_label_pc_16b30, label %dec_label_pc_16b18

dec_label_pc_16b18:                               ; preds = %dec_label_pc_16b0c, %dec_label_pc_16b18.dec_label_pc_16b18_crit_edge
  %v0_16b1c = phi i32 [ %v1_16b24, %dec_label_pc_16b18.dec_label_pc_16b18_crit_edge ], [ %v0_16b1c37, %dec_label_pc_16b0c ]
  %v0_16b18 = phi i32 [ %v0_16b18.pre, %dec_label_pc_16b18.dec_label_pc_16b18_crit_edge ], [ %v0_16b1836, %dec_label_pc_16b0c ]
  %v1_16b18 = add i32 %v0_16b18, -4
  %v2_16b18 = inttoptr i32 %v1_16b18 to i32*
  %v3_16b18 = load i32, i32* %v2_16b18, align 4
  %v4_16b18 = add i32 %v0_16b18, -8
  %v5_16b18 = inttoptr i32 %v4_16b18 to i32*
  %v6_16b18 = load i32, i32* %v5_16b18, align 4
  store i32 %v6_16b18, i32* %r4.global-to-local, align 4
  %v7_16b18 = add i32 %v0_16b18, -12
  %v8_16b18 = inttoptr i32 %v7_16b18 to i32*
  %v9_16b18 = load i32, i32* %v8_16b18, align 4
  store i32 %v9_16b18, i32* %ip.global-to-local, align 4
  %v10_16b18 = add i32 %v0_16b18, -16
  %v11_16b18 = inttoptr i32 %v10_16b18 to i32*
  %v12_16b18 = load i32, i32* %v11_16b18, align 4
  store i32 %v12_16b18, i32* %lr.global-to-local, align 4
  store i32 %v10_16b18, i32* %r1.global-to-local, align 4
  %v1_16b1c = add i32 %v0_16b1c, -16
  %v2_16b1c = inttoptr i32 %v1_16b1c to i32*
  store i32 %v3_16b18, i32* %v2_16b1c, align 4
  %v4_16b1c = add i32 %v0_16b1c, -12
  %v5_16b1c = inttoptr i32 %v4_16b1c to i32*
  %v6_16b1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b1c, i32* %v5_16b1c, align 4
  %v7_16b1c = add i32 %v0_16b1c, -8
  %v8_16b1c = inttoptr i32 %v7_16b1c to i32*
  %v9_16b1c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16b1c, i32* %v8_16b1c, align 4
  %v10_16b1c = add i32 %v0_16b1c, -4
  %v11_16b1c = inttoptr i32 %v10_16b1c to i32*
  %v12_16b1c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b1c, i32* %v11_16b1c, align 4
  store i32 %v1_16b1c, i32* %r0.global-to-local, align 4
  %v0_16b20 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b20 = add i32 %v0_16b20, -4
  %v2_16b20 = inttoptr i32 %v1_16b20 to i32*
  %v3_16b20 = load i32, i32* %v2_16b20, align 4
  store i32 %v3_16b20, i32* @r3, align 4
  %v4_16b20 = add i32 %v0_16b20, -8
  %v5_16b20 = inttoptr i32 %v4_16b20 to i32*
  %v6_16b20 = load i32, i32* %v5_16b20, align 4
  store i32 %v6_16b20, i32* %r4.global-to-local, align 4
  %v7_16b20 = add i32 %v0_16b20, -12
  %v8_16b20 = inttoptr i32 %v7_16b20 to i32*
  %v9_16b20 = load i32, i32* %v8_16b20, align 4
  store i32 %v9_16b20, i32* @ip, align 4
  %v10_16b20 = add i32 %v0_16b20, -16
  %v11_16b20 = inttoptr i32 %v10_16b20 to i32*
  %v12_16b20 = load i32, i32* %v11_16b20, align 4
  store i32 %v12_16b20, i32* %lr.global-to-local, align 4
  store i32 %v10_16b20, i32* %r1.global-to-local, align 4
  %v1_16b24 = add i32 %v0_16b1c, -32
  %v2_16b24 = inttoptr i32 %v1_16b24 to i32*
  store i32 %v3_16b20, i32* %v2_16b24, align 4
  %v4_16b24 = add i32 %v0_16b1c, -28
  %v5_16b24 = inttoptr i32 %v4_16b24 to i32*
  %v6_16b24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b24, i32* %v5_16b24, align 4
  %v7_16b24 = add i32 %v0_16b1c, -24
  %v8_16b24 = inttoptr i32 %v7_16b24 to i32*
  %v9_16b24 = load i32, i32* @ip, align 4
  store i32 %v9_16b24, i32* %v8_16b24, align 4
  %v10_16b24 = add i32 %v0_16b1c, -20
  %v11_16b24 = inttoptr i32 %v10_16b24 to i32*
  %v12_16b24 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b24, i32* %v11_16b24, align 4
  store i32 %v1_16b24, i32* %r0.global-to-local, align 4
  %v0_16b28 = load i32, i32* %r2.global-to-local, align 4
  %v2_16b28 = add i32 %v0_16b28, -32
  store i32 %v2_16b28, i32* %r2.global-to-local, align 4
  %v6_16b2c = icmp slt i32 %v0_16b28, 32
  br i1 %v6_16b2c, label %dec_label_pc_16b30.loopexit, label %dec_label_pc_16b18.dec_label_pc_16b18_crit_edge

dec_label_pc_16b18.dec_label_pc_16b18_crit_edge:  ; preds = %dec_label_pc_16b18
  %v0_16b18.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16b18

dec_label_pc_16b30.loopexit:                      ; preds = %dec_label_pc_16b18
  %v4_16b28 = sub i32 31, %v0_16b28
  %v5_16b28 = and i32 %v4_16b28, %v0_16b28
  %v6_16b28 = icmp slt i32 %v5_16b28, 0
  %v7_16b28 = icmp slt i32 %v2_16b28, 0
  store i1 %v6_16b28, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16b28, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16b30

dec_label_pc_16b30:                               ; preds = %dec_label_pc_16b30.loopexit, %dec_label_pc_16b0c
  %v6_16b38 = phi i32 [ %v1_16b24, %dec_label_pc_16b30.loopexit ], [ %v0_16b1c37, %dec_label_pc_16b0c ]
  %v0_16b40.pr = phi i32 [ %v2_16b28, %dec_label_pc_16b30.loopexit ], [ %v2_16b10, %dec_label_pc_16b0c ]
  %v4_16b30 = add i32 %v0_16b40.pr, 16
  %v6_16b30 = sub i32 0, %v0_16b40.pr
  %v7_16b30 = and i32 %v4_16b30, %v6_16b30
  %v8_16b30 = icmp slt i32 %v7_16b30, 0
  store i1 %v8_16b30, i1* %cpsr_v.global-to-local, align 1
  %v9_16b30 = icmp slt i32 %v4_16b30, 0
  store i1 %v9_16b30, i1* %cpsr_n.global-to-local, align 1
  %v10_16b30 = icmp eq i32 %v4_16b30, 0
  store i1 %v10_16b30, i1* %cpsr_z.global-to-local, align 1
  %v5_16b34 = icmp slt i32 %v0_16b40.pr, -16
  br i1 %v5_16b34, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16b30
  %v6_16b34 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b34 = add i32 %v6_16b34, -4
  %v8_16b34 = inttoptr i32 %v7_16b34 to i32*
  %v9_16b34 = load i32, i32* %v8_16b34, align 4
  store i32 %v9_16b34, i32* @r3, align 4
  %v10_16b34 = add i32 %v6_16b34, -8
  %v11_16b34 = inttoptr i32 %v10_16b34 to i32*
  %v12_16b34 = load i32, i32* %v11_16b34, align 4
  store i32 %v12_16b34, i32* %r4.global-to-local, align 4
  %v13_16b34 = add i32 %v6_16b34, -12
  %v14_16b34 = inttoptr i32 %v13_16b34 to i32*
  %v15_16b34 = load i32, i32* %v14_16b34, align 4
  store i32 %v15_16b34, i32* @ip, align 4
  %v16_16b34 = add i32 %v6_16b34, -16
  %v17_16b34 = inttoptr i32 %v16_16b34 to i32*
  %v18_16b34 = load i32, i32* %v17_16b34, align 4
  store i32 %v18_16b34, i32* %lr.global-to-local, align 4
  store i32 %v16_16b34, i32* %r1.global-to-local, align 4
  %v7_16b38 = add i32 %v6_16b38, -16
  %v8_16b38 = inttoptr i32 %v7_16b38 to i32*
  store i32 %v9_16b34, i32* %v8_16b38, align 4
  %v10_16b38 = add i32 %v6_16b38, -12
  %v11_16b38 = inttoptr i32 %v10_16b38 to i32*
  %v12_16b38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16b38, i32* %v11_16b38, align 4
  %v13_16b38 = add i32 %v6_16b38, -8
  %v14_16b38 = inttoptr i32 %v13_16b38 to i32*
  %v15_16b38 = load i32, i32* @ip, align 4
  store i32 %v15_16b38, i32* %v14_16b38, align 4
  %v16_16b38 = add i32 %v6_16b38, -4
  %v17_16b38 = inttoptr i32 %v16_16b38 to i32*
  %v18_16b38 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16b38, i32* %v17_16b38, align 4
  store i32 %v7_16b38, i32* %r0.global-to-local, align 4
  %v6_16b3c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b3c = add i32 %v6_16b3c, -16
  store i32 %v7_16b3c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16b30, %bb147
  %v6_16b48 = phi i32 [ %v7_16b38, %bb147 ], [ %v6_16b38, %dec_label_pc_16b30 ]
  %v0_16b40 = phi i32 [ %v7_16b3c, %bb147 ], [ %v0_16b40.pr, %dec_label_pc_16b30 ]
  %v4_16b40 = add i32 %v0_16b40, 20
  store i32 %v4_16b40, i32* %r2.global-to-local, align 4
  %v6_16b40 = sub i32 0, %v0_16b40
  %v7_16b40 = and i32 %v4_16b40, %v6_16b40
  %v8_16b40 = icmp slt i32 %v7_16b40, 0
  store i1 %v8_16b40, i1* %cpsr_v.global-to-local, align 1
  %v9_16b40 = icmp slt i32 %v4_16b40, 0
  store i1 %v9_16b40, i1* %cpsr_n.global-to-local, align 1
  %v10_16b40 = icmp eq i32 %v4_16b40, 0
  store i1 %v10_16b40, i1* %cpsr_z.global-to-local, align 1
  %v5_16b44 = icmp slt i32 %v0_16b40, -20
  br i1 %v5_16b44, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16b44 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b44 = add i32 %v6_16b44, -4
  %v8_16b44 = inttoptr i32 %v7_16b44 to i32*
  %v9_16b44 = load i32, i32* %v8_16b44, align 4
  store i32 %v9_16b44, i32* @r3, align 4
  %v10_16b44 = add i32 %v6_16b44, -8
  %v11_16b44 = inttoptr i32 %v10_16b44 to i32*
  %v12_16b44 = load i32, i32* %v11_16b44, align 4
  store i32 %v12_16b44, i32* @ip, align 4
  %v13_16b44 = add i32 %v6_16b44, -12
  %v14_16b44 = inttoptr i32 %v13_16b44 to i32*
  %v15_16b44 = load i32, i32* %v14_16b44, align 4
  store i32 %v15_16b44, i32* %lr.global-to-local, align 4
  store i32 %v13_16b44, i32* %r1.global-to-local, align 4
  %v7_16b48 = add i32 %v6_16b48, -12
  %v8_16b48 = inttoptr i32 %v7_16b48 to i32*
  store i32 %v9_16b44, i32* %v8_16b48, align 4
  %v10_16b48 = add i32 %v6_16b48, -8
  %v11_16b48 = inttoptr i32 %v10_16b48 to i32*
  %v12_16b48 = load i32, i32* @ip, align 4
  store i32 %v12_16b48, i32* %v11_16b48, align 4
  %v13_16b48 = add i32 %v6_16b48, -4
  %v14_16b48 = inttoptr i32 %v13_16b48 to i32*
  %v15_16b48 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16b48, i32* %v14_16b48, align 4
  store i32 %v7_16b48, i32* %r0.global-to-local, align 4
  %v6_16b4c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b4c = add i32 %v6_16b4c, -12
  store i32 %v7_16b4c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16b6c45 = phi i32 [ %v6_16b48, %.thread2 ], [ %v7_16b48, %bb148 ]
  %v0_16b5443 = phi i32 [ %v4_16b40, %.thread2 ], [ %v7_16b4c, %bb148 ]
  %v2_16b50 = load i8*, i8** %stack_var_-8, align 4
  %v3_16b50 = ptrtoint i8* %v2_16b50 to i32
  store i32 %v3_16b50, i32* @r4, align 4
  store i32 %v8_16b0c, i32* @lr, align 4
  br label %dec_label_pc_16b54

dec_label_pc_16b54:                               ; preds = %dec_label_pc_16b04, %.thread4
  %v7_16b64 = phi i32 [ %v0_16b1c37, %dec_label_pc_16b04 ], [ %v6_16b6c45, %.thread4 ]
  %v0_16b54 = phi i32 [ %v2_16b04, %dec_label_pc_16b04 ], [ %v0_16b5443, %.thread4 ]
  %v2_16b54 = add i32 %v0_16b54, 8
  store i32 %v2_16b54, i32* %r2.global-to-local, align 4
  %v4_16b54 = sub i32 0, %v0_16b54
  %v5_16b54 = and i32 %v2_16b54, %v4_16b54
  %v6_16b54 = icmp slt i32 %v5_16b54, 0
  store i1 %v6_16b54, i1* %cpsr_v.global-to-local, align 1
  %v7_16b54 = icmp slt i32 %v2_16b54, 0
  store i1 %v7_16b54, i1* %cpsr_n.global-to-local, align 1
  %v8_16b54 = icmp eq i32 %v2_16b54, 0
  store i1 %v8_16b54, i1* %cpsr_z.global-to-local, align 1
  %v5_16b58 = icmp slt i32 %v0_16b54, -8
  br i1 %v5_16b58, label %bb150, label %dec_label_pc_16b5c

dec_label_pc_16b5c:                               ; preds = %dec_label_pc_16b54
  %v6_16b5c = add i32 %v0_16b54, 4
  store i32 %v6_16b5c, i32* %r2.global-to-local, align 4
  %v8_16b5c = sub i32 -5, %v0_16b54
  %v9_16b5c = and i32 %v8_16b5c, %v2_16b54
  %v10_16b5c = icmp slt i32 %v9_16b5c, 0
  store i1 %v10_16b5c, i1* %cpsr_v.global-to-local, align 1
  %v11_16b5c = icmp slt i32 %v6_16b5c, 0
  store i1 %v11_16b5c, i1* %cpsr_n.global-to-local, align 1
  %v12_16b5c = icmp eq i32 %v2_16b54, 4
  store i1 %v12_16b5c, i1* %cpsr_z.global-to-local, align 1
  %v5_16b60 = icmp slt i32 %v2_16b54, 4
  %v6_16b60 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b60 = add i32 %v6_16b60, -4
  %v8_16b60 = inttoptr i32 %v7_16b60 to i32*
  %v9_16b60 = load i32, i32* %v8_16b60, align 4
  store i32 %v9_16b60, i32* @r3, align 4
  br i1 %v5_16b60, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16b5c
  store i32 %v7_16b60, i32* %r1.global-to-local, align 4
  %v8_16b64 = add i32 %v7_16b64, -4
  %v9_16b64 = inttoptr i32 %v8_16b64 to i32*
  store i32 %v9_16b60, i32* %v9_16b64, align 4
  %v10_16b64 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b64 = add i32 %v10_16b64, -4
  store i32 %v11_16b64, i32* %r0.global-to-local, align 4
  %v0_16b74.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16b5c
  %v10_16b68 = add i32 %v6_16b60, -8
  %v11_16b68 = inttoptr i32 %v10_16b68 to i32*
  %v12_16b68 = load i32, i32* %v11_16b68, align 4
  store i32 %v12_16b68, i32* @ip, align 4
  store i32 %v10_16b68, i32* %r1.global-to-local, align 4
  %v7_16b6c = add i32 %v7_16b64, -8
  %v8_16b6c = inttoptr i32 %v7_16b6c to i32*
  store i32 %v9_16b60, i32* %v8_16b6c, align 4
  %v10_16b6c = add i32 %v7_16b64, -4
  %v11_16b6c = inttoptr i32 %v10_16b6c to i32*
  %v12_16b6c = load i32, i32* @ip, align 4
  store i32 %v12_16b6c, i32* %v11_16b6c, align 4
  store i32 %v7_16b6c, i32* %r0.global-to-local, align 4
  %v6_16b70 = load i32, i32* %r2.global-to-local, align 4
  %v7_16b70 = add i32 %v6_16b70, -4
  store i32 %v7_16b70, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_16b54, %dec_label_pc_16ae4, %.thread14, %dec_label_pc_16d18, %dec_label_pc_16cac, %dec_label_pc_16c40, %bb149
  %v2_16b78 = phi i32 [ %v11_16b64, %.thread8 ], [ %v7_16b64, %dec_label_pc_16b54 ], [ %v2_16ae8, %dec_label_pc_16ae4 ], [ %v0_16c1020, %.thread14 ], [ %v2_16b8453, %dec_label_pc_16d18 ], [ %v2_16b8452, %dec_label_pc_16cac ], [ %v2_16b8451, %dec_label_pc_16c40 ], [ %v7_16b6c, %bb149 ]
  %v0_16b74 = phi i32 [ %v0_16b74.pre, %.thread8 ], [ %v2_16b54, %dec_label_pc_16b54 ], [ %v2_16aec, %dec_label_pc_16ae4 ], [ %v2_16bb8, %.thread14 ], [ %v0_16b7449, %dec_label_pc_16d18 ], [ %v0_16b7448, %dec_label_pc_16cac ], [ %v0_16b7447, %dec_label_pc_16c40 ], [ %v7_16b70, %bb149 ]
  %v1_16b74 = add i32 %v0_16b74, 4
  store i32 %v1_16b74, i32* %r2.global-to-local, align 4
  %v3_16b74 = sub i32 0, %v0_16b74
  %v4_16b74 = and i32 %v1_16b74, %v3_16b74
  %v5_16b74 = icmp slt i32 %v4_16b74, 0
  store i1 %v5_16b74, i1* %cpsr_v.global-to-local, align 1
  %v6_16b74 = icmp slt i32 %v1_16b74, 0
  store i1 %v6_16b74, i1* %cpsr_n.global-to-local, align 1
  %v7_16b74 = icmp eq i32 %v1_16b74, 0
  store i1 %v7_16b74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b74, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16b7c = add i32 %v0_16b74, 2
  %v3_16b7c = sub i32 -3, %v0_16b74
  %v4_16b7c = and i32 %v3_16b7c, %v1_16b74
  %v5_16b7c = icmp slt i32 %v4_16b7c, 0
  store i1 %v5_16b7c, i1* %cpsr_v.global-to-local, align 1
  %v6_16b7c = icmp slt i32 %v1_16b7c, 0
  store i1 %v6_16b7c, i1* %cpsr_n.global-to-local, align 1
  %v7_16b7c = icmp eq i32 %v1_16b74, 2
  store i1 %v7_16b7c, i1* %cpsr_z.global-to-local, align 1
  %v0_16b80 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b80 = add i32 %v0_16b80, -1
  %v2_16b80 = inttoptr i32 %v1_16b80 to i8*
  %v3_16b80 = load i8, i8* %v2_16b80, align 1
  %v4_16b80 = zext i8 %v3_16b80 to i32
  store i32 %v4_16b80, i32* @r3, align 4
  store i32 %v1_16b80, i32* %r1.global-to-local, align 4
  %v3_16b84 = add i32 %v2_16b78, -1
  %v4_16b84 = inttoptr i32 %v3_16b84 to i8*
  store i8 %v3_16b80, i8* %v4_16b84, align 1
  %v5_16b84 = load i32, i32* %r0.global-to-local, align 4
  %v6_16b84 = add i32 %v5_16b84, -1
  store i32 %v6_16b84, i32* %r0.global-to-local, align 4
  %v0_16b88 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16b88 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16b88 = xor i1 %v0_16b88, %v1_16b88
  br i1 %v2_16b88, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16b88 = load i32, i32* %r1.global-to-local, align 4
  %v4_16b88 = add i32 %v3_16b88, -1
  %v5_16b88 = inttoptr i32 %v4_16b88 to i8*
  %v6_16b88 = load i8, i8* %v5_16b88, align 1
  %v7_16b88 = zext i8 %v6_16b88 to i32
  store i32 %v7_16b88, i32* @r3, align 4
  store i32 %v4_16b88, i32* %r1.global-to-local, align 4
  %v6_16b8c = add i32 %v5_16b84, -2
  %v7_16b8c = inttoptr i32 %v6_16b8c to i8*
  store i8 %v6_16b88, i8* %v7_16b8c, align 1
  %v8_16b8c = load i32, i32* %r0.global-to-local, align 4
  %v9_16b8c = add i32 %v8_16b8c, -1
  store i32 %v9_16b8c, i32* %r0.global-to-local, align 4
  %v1_16b90.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16b90.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16b94 = phi i32 [ %v9_16b8c, %bb152 ], [ %v6_16b84, %bb151 ]
  %v2_16b94 = phi i1 [ %v2_16b90.pre, %bb152 ], [ %v1_16b88, %bb151 ]
  %v1_16b94 = phi i1 [ %v1_16b90.pre, %bb152 ], [ %v0_16b88, %bb151 ]
  %v0_16b90 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16b90 = xor i1 %v2_16b94, %v1_16b94
  %v4_16b90 = or i1 %v0_16b90, %v3_16b90
  br i1 %v4_16b90, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16b90 = load i32, i32* %r1.global-to-local, align 4
  %v6_16b90 = add i32 %v5_16b90, -1
  %v7_16b90 = inttoptr i32 %v6_16b90 to i8*
  %v8_16b90 = load i8, i8* %v7_16b90, align 1
  %v9_16b90 = zext i8 %v8_16b90 to i32
  store i32 %v9_16b90, i32* @r3, align 4
  store i32 %v6_16b90, i32* %r1.global-to-local, align 4
  %v8_16b94 = add i32 %v7_16b94, -1
  %v9_16b94 = inttoptr i32 %v8_16b94 to i8*
  store i8 %v8_16b90, i8* %v9_16b94, align 1
  %v10_16b94 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b94 = add i32 %v10_16b94, -1
  store i32 %v11_16b94, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16b9c:                               ; preds = %dec_label_pc_16af4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16b9c = icmp eq i32 %v1_16af4, 1
  store i1 %v8_16b9c, i1* %cpsr_n.global-to-local, align 1
  %v9_16b9c = icmp eq i32 %v1_16af4, 2
  store i1 %v9_16b9c, i1* %cpsr_z.global-to-local, align 1
  %v1_16ba0 = add i32 %v2_16ae4, -1
  %v2_16ba0 = inttoptr i32 %v1_16ba0 to i8*
  %v3_16ba0 = load i8, i8* %v2_16ba0, align 1
  %v4_16ba0 = zext i8 %v3_16ba0 to i32
  store i32 %v4_16ba0, i32* @r3, align 4
  store i32 %v1_16ba0, i32* %r1.global-to-local, align 4
  %v3_16ba4 = add i32 %v2_16ae8, -1
  %v4_16ba4 = inttoptr i32 %v3_16ba4 to i8*
  store i8 %v3_16ba0, i8* %v4_16ba4, align 1
  %v5_16ba4 = load i32, i32* %r0.global-to-local, align 4
  %v6_16ba4 = add i32 %v5_16ba4, -1
  store i32 %v6_16ba4, i32* %r0.global-to-local, align 4
  br i1 %v8_16b9c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16b9c
  %v6_16ba8 = load i32, i32* %r1.global-to-local, align 4
  %v7_16ba8 = add i32 %v6_16ba8, -1
  %v8_16ba8 = inttoptr i32 %v7_16ba8 to i8*
  %v9_16ba8 = load i8, i8* %v8_16ba8, align 1
  %v10_16ba8 = zext i8 %v9_16ba8 to i32
  store i32 %v10_16ba8, i32* @r3, align 4
  store i32 %v7_16ba8, i32* %r1.global-to-local, align 4
  %v9_16bac = add i32 %v5_16ba4, -2
  %v10_16bac = inttoptr i32 %v9_16bac to i8*
  store i8 %v9_16ba8, i8* %v10_16bac, align 1
  %v11_16bac = load i32, i32* %r0.global-to-local, align 4
  %v12_16bac = add i32 %v11_16bac, -1
  store i32 %v12_16bac, i32* %r0.global-to-local, align 4
  br i1 %v9_16b9c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16bb0 = load i32, i32* %r1.global-to-local, align 4
  %v9_16bb0 = add i32 %v8_16bb0, -1
  %v10_16bb0 = inttoptr i32 %v9_16bb0 to i8*
  %v11_16bb0 = load i8, i8* %v10_16bb0, align 1
  %v12_16bb0 = zext i8 %v11_16bb0 to i32
  store i32 %v12_16bb0, i32* @r3, align 4
  store i32 %v9_16bb0, i32* %r1.global-to-local, align 4
  %v11_16bb4 = add i32 %v11_16bac, -2
  %v12_16bb4 = inttoptr i32 %v11_16bb4 to i8*
  store i8 %v11_16bb0, i8* %v12_16bb4, align 1
  %v13_16bb4 = load i32, i32* %r0.global-to-local, align 4
  %v14_16bb4 = add i32 %v13_16bb4, -1
  store i32 %v14_16bb4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16b9c, %bb155
  %v0_16c1020 = phi i32 [ %v12_16bac, %bb154 ], [ %v6_16ba4, %dec_label_pc_16b9c ], [ %v14_16bb4, %bb155 ]
  %v0_16bb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_16bb8 = load i32, i32* @ip, align 4
  %v2_16bb8 = sub i32 %v0_16bb8, %v1_16bb8
  store i32 %v2_16bb8, i32* %r2.global-to-local, align 4
  %v4_16bb8 = xor i32 %v1_16bb8, %v0_16bb8
  %v5_16bb8 = xor i32 %v2_16bb8, %v0_16bb8
  %v6_16bb8 = and i32 %v5_16bb8, %v4_16bb8
  %v7_16bb8 = icmp slt i32 %v6_16bb8, 0
  store i1 %v7_16bb8, i1* %cpsr_v.global-to-local, align 1
  %v8_16bb8 = icmp slt i32 %v2_16bb8, 0
  store i1 %v8_16bb8, i1* %cpsr_n.global-to-local, align 1
  %v9_16bb8 = icmp eq i32 %v0_16bb8, %v1_16bb8
  store i1 %v9_16bb8, i1* %cpsr_z.global-to-local, align 1
  %v5_16bbc = icmp slt i32 %v0_16bb8, %v1_16bb8
  br i1 %v5_16bbc, label %bb150, label %dec_label_pc_16bc0

dec_label_pc_16bc0:                               ; preds = %.thread14
  %v0_16bc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16bc0 = urem i32 %v0_16bc0, 4
  store i32 %v1_16bc0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16bc0 = icmp eq i32 %v1_16bc0, 0
  store i1 %v2_16bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16bc0, label %dec_label_pc_16b04, label %dec_label_pc_16bc8

dec_label_pc_16bc8:                               ; preds = %dec_label_pc_16afc, %dec_label_pc_16bc0
  %v0_16c1019 = phi i32 [ %v2_16ae8, %dec_label_pc_16afc ], [ %v0_16c1020, %dec_label_pc_16bc0 ]
  %v0_16cbc = phi i32 [ %v2_16aec, %dec_label_pc_16afc ], [ %v2_16bb8, %dec_label_pc_16bc0 ]
  %v0_16bc8 = phi i32 [ %v2_16ae4, %dec_label_pc_16afc ], [ %v0_16bc0, %dec_label_pc_16bc0 ]
  %v0_16bd0 = phi i32 [ %v1_16afc, %dec_label_pc_16afc ], [ %v1_16bc0, %dec_label_pc_16bc0 ]
  %v1_16bc8 = and i32 %v0_16bc8, -4
  store i32 %v1_16bc8, i32* %r1.global-to-local, align 4
  %v1_16bcc = inttoptr i32 %v1_16bc8 to i32*
  %v2_16bcc = load i32, i32* %v1_16bcc, align 4
  store i32 %v2_16bcc, i32* @r3, align 4
  %v7_16bd0 = icmp ult i32 %v0_16bd0, 2
  %v2_16cb4 = add i32 %v0_16cbc, -12
  %v4_16cb4 = sub i32 11, %v0_16cbc
  %v5_16cb4 = and i32 %v4_16cb4, %v0_16cbc
  %v6_16cb4 = icmp slt i32 %v5_16cb4, 0
  store i1 %v6_16cb4, i1* %cpsr_v.global-to-local, align 1
  %v7_16cb4 = icmp slt i32 %v2_16cb4, 0
  store i1 %v7_16cb4, i1* %cpsr_n.global-to-local, align 1
  %v8_16cb4 = icmp eq i32 %v0_16cbc, 12
  store i1 %v8_16cb4, i1* %cpsr_z.global-to-local, align 1
  %v5_16cb8 = icmp slt i32 %v0_16cbc, 12
  br i1 %v7_16bd0, label %dec_label_pc_16cb4, label %dec_label_pc_16bd8

dec_label_pc_16bd8:                               ; preds = %dec_label_pc_16bc8
  %v8_16bd0 = icmp eq i32 %v0_16bd0, 2
  br i1 %v8_16bd0, label %dec_label_pc_16c48, label %dec_label_pc_16bdc

dec_label_pc_16bdc:                               ; preds = %dec_label_pc_16bd8
  br i1 %v5_16cb8, label %dec_label_pc_16c28, label %dec_label_pc_16be4

dec_label_pc_16be4:                               ; preds = %dec_label_pc_16bdc
  store i32 %v2_16cb4, i32* %r2.global-to-local, align 4
  %v3_16be8 = load i32, i32* @r4, align 4
  store i32 %v3_16be8, i32* %stack_var_-12, align 4
  %v6_16be8 = load i32, i32* @r5, align 4
  %v8_16be8 = inttoptr i32 %v6_16be8 to i8*
  store i8* %v8_16be8, i8** %stack_var_-8, align 4
  %v11_16be8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16bec

dec_label_pc_16bec:                               ; preds = %dec_label_pc_16bec.dec_label_pc_16bec_crit_edge, %dec_label_pc_16be4
  %v0_16c10 = phi i32 [ %v1_16c10, %dec_label_pc_16bec.dec_label_pc_16bec_crit_edge ], [ %v0_16c1019, %dec_label_pc_16be4 ]
  %v0_16bf0 = phi i32 [ %v0_16bf0.pre, %dec_label_pc_16bec.dec_label_pc_16bec_crit_edge ], [ %v1_16bc8, %dec_label_pc_16be4 ]
  %v0_16bec = phi i32 [ %v0_16bec.pre, %dec_label_pc_16bec.dec_label_pc_16bec_crit_edge ], [ %v2_16bcc, %dec_label_pc_16be4 ]
  %v3_16bec = mul i32 %v0_16bec, 256
  store i32 %v3_16bec, i32* %lr.global-to-local, align 4
  %v1_16bf0 = add i32 %v0_16bf0, -4
  %v2_16bf0 = inttoptr i32 %v1_16bf0 to i32*
  %v3_16bf0 = load i32, i32* %v2_16bf0, align 4
  store i32 %v3_16bf0, i32* @r3, align 4
  %v4_16bf0 = add i32 %v0_16bf0, -8
  %v5_16bf0 = inttoptr i32 %v4_16bf0 to i32*
  %v6_16bf0 = load i32, i32* %v5_16bf0, align 4
  store i32 %v6_16bf0, i32* %r4.global-to-local, align 4
  %v7_16bf0 = add i32 %v0_16bf0, -12
  %v8_16bf0 = inttoptr i32 %v7_16bf0 to i32*
  %v9_16bf0 = load i32, i32* %v8_16bf0, align 4
  store i32 %v9_16bf0, i32* %r5.global-to-local, align 4
  %v10_16bf0 = add i32 %v0_16bf0, -16
  %v11_16bf0 = inttoptr i32 %v10_16bf0 to i32*
  %v12_16bf0 = load i32, i32* %v11_16bf0, align 4
  store i32 %v10_16bf0, i32* %r1.global-to-local, align 4
  %v4_16bf4 = udiv i32 %v12_16bf0, 16777216
  %v5_16bf4 = or i32 %v4_16bf4, %v3_16bec
  store i32 %v5_16bf4, i32* %lr.global-to-local, align 4
  %v3_16bf8 = mul i32 %v12_16bf0, 256
  %v4_16bfc = udiv i32 %v9_16bf0, 16777216
  %v5_16bfc = or i32 %v3_16bf8, %v4_16bfc
  store i32 %v5_16bfc, i32* @ip, align 4
  %v3_16c00 = mul i32 %v9_16bf0, 256
  %v4_16c04 = udiv i32 %v6_16bf0, 16777216
  %v5_16c04 = or i32 %v3_16c00, %v4_16c04
  store i32 %v5_16c04, i32* %r5.global-to-local, align 4
  %v3_16c08 = mul i32 %v6_16bf0, 256
  %v4_16c0c = udiv i32 %v3_16bf0, 16777216
  %v5_16c0c = or i32 %v3_16c08, %v4_16c0c
  store i32 %v5_16c0c, i32* %r4.global-to-local, align 4
  %v1_16c10 = add i32 %v0_16c10, -16
  %v2_16c10 = inttoptr i32 %v1_16c10 to i32*
  store i32 %v5_16c0c, i32* %v2_16c10, align 4
  %v4_16c10 = add i32 %v0_16c10, -12
  %v5_16c10 = inttoptr i32 %v4_16c10 to i32*
  %v6_16c10 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c10, i32* %v5_16c10, align 4
  %v7_16c10 = add i32 %v0_16c10, -8
  %v8_16c10 = inttoptr i32 %v7_16c10 to i32*
  %v9_16c10 = load i32, i32* @ip, align 4
  store i32 %v9_16c10, i32* %v8_16c10, align 4
  %v10_16c10 = add i32 %v0_16c10, -4
  %v11_16c10 = inttoptr i32 %v10_16c10 to i32*
  %v12_16c10 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c10, i32* %v11_16c10, align 4
  store i32 %v1_16c10, i32* %r0.global-to-local, align 4
  %v0_16c14 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c14 = add i32 %v0_16c14, -16
  store i32 %v2_16c14, i32* %r2.global-to-local, align 4
  %v6_16c18 = icmp slt i32 %v0_16c14, 16
  br i1 %v6_16c18, label %dec_label_pc_16c1c, label %dec_label_pc_16bec.dec_label_pc_16bec_crit_edge

dec_label_pc_16bec.dec_label_pc_16bec_crit_edge:  ; preds = %dec_label_pc_16bec
  %v0_16bec.pre = load i32, i32* @r3, align 4
  %v0_16bf0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16bec

dec_label_pc_16c1c:                               ; preds = %dec_label_pc_16bec
  %v2_16c1c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c1c, i32* @r4, align 4
  %v5_16c1c = load i8*, i8** %stack_var_-8, align 4
  %v6_16c1c = ptrtoint i8* %v5_16c1c to i32
  store i32 %v6_16c1c, i32* @r5, align 4
  store i32 %v11_16be8, i32* @lr, align 4
  %v2_16c20 = add i32 %v0_16c14, -4
  store i32 %v2_16c20, i32* %r2.global-to-local, align 4
  %v4_16c20 = add i32 %v0_16c14, 2147483632
  %v5_16c20 = and i32 %v2_16c20, %v4_16c20
  %v6_16c20 = icmp slt i32 %v5_16c20, 0
  store i1 %v6_16c20, i1* %cpsr_v.global-to-local, align 1
  %v7_16c20 = icmp slt i32 %v2_16c20, 0
  store i1 %v7_16c20, i1* %cpsr_n.global-to-local, align 1
  %v8_16c20 = icmp eq i32 %v2_16c20, 0
  store i1 %v8_16c20, i1* %cpsr_z.global-to-local, align 1
  %v5_16c24 = icmp slt i32 %v2_16c14, -12
  br i1 %v5_16c24, label %dec_label_pc_16c40, label %dec_label_pc_16c28

dec_label_pc_16c28:                               ; preds = %dec_label_pc_16c1c, %dec_label_pc_16bdc, %dec_label_pc_16c28
  %v1_16c34 = phi i32 [ %v5_16c34, %dec_label_pc_16c28 ], [ %v1_16c10, %dec_label_pc_16c1c ], [ %v0_16c1019, %dec_label_pc_16bdc ]
  %v0_16c28 = load i32, i32* @r3, align 4
  %v3_16c28 = mul i32 %v0_16c28, 256
  store i32 %v3_16c28, i32* %ip.global-to-local, align 4
  %v0_16c2c = load i32, i32* %r1.global-to-local, align 4
  %v1_16c2c = add i32 %v0_16c2c, -4
  %v2_16c2c = inttoptr i32 %v1_16c2c to i32*
  %v3_16c2c = load i32, i32* %v2_16c2c, align 4
  store i32 %v3_16c2c, i32* @r3, align 4
  store i32 %v1_16c2c, i32* %r1.global-to-local, align 4
  %v4_16c30 = udiv i32 %v3_16c2c, 16777216
  %v5_16c30 = or i32 %v4_16c30, %v3_16c28
  store i32 %v5_16c30, i32* @ip, align 4
  %v2_16c34 = add i32 %v1_16c34, -4
  %v3_16c34 = inttoptr i32 %v2_16c34 to i32*
  store i32 %v5_16c30, i32* %v3_16c34, align 4
  %v4_16c34 = load i32, i32* %r0.global-to-local, align 4
  %v5_16c34 = add i32 %v4_16c34, -4
  store i32 %v5_16c34, i32* %r0.global-to-local, align 4
  %v0_16c38 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c38 = add i32 %v0_16c38, -4
  store i32 %v2_16c38, i32* %r2.global-to-local, align 4
  %v6_16c3c = icmp slt i32 %v0_16c38, 4
  br i1 %v6_16c3c, label %dec_label_pc_16c40.loopexit, label %dec_label_pc_16c28

dec_label_pc_16c40.loopexit:                      ; preds = %dec_label_pc_16c28
  %v4_16c38 = sub i32 3, %v0_16c38
  %v5_16c38 = and i32 %v4_16c38, %v0_16c38
  %v6_16c38 = icmp slt i32 %v5_16c38, 0
  %v7_16c38 = icmp slt i32 %v2_16c38, 0
  store i1 %v6_16c38, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16c38, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16c40

dec_label_pc_16c40:                               ; preds = %dec_label_pc_16c40.loopexit, %dec_label_pc_16c1c
  %v2_16b8451 = phi i32 [ %v5_16c34, %dec_label_pc_16c40.loopexit ], [ %v1_16c10, %dec_label_pc_16c1c ]
  %v0_16b7447 = phi i32 [ %v2_16c38, %dec_label_pc_16c40.loopexit ], [ %v2_16c20, %dec_label_pc_16c1c ]
  %v0_16c40 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c40 = add i32 %v0_16c40, 3
  store i32 %v1_16c40, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16c48:                               ; preds = %dec_label_pc_16bd8
  br i1 %v5_16cb8, label %dec_label_pc_16c94, label %dec_label_pc_16c50

dec_label_pc_16c50:                               ; preds = %dec_label_pc_16c48
  store i32 %v2_16cb4, i32* %r2.global-to-local, align 4
  %v3_16c54 = load i32, i32* @r4, align 4
  store i32 %v3_16c54, i32* %stack_var_-12, align 4
  %v6_16c54 = load i32, i32* @r5, align 4
  %v8_16c54 = inttoptr i32 %v6_16c54 to i8*
  store i8* %v8_16c54, i8** %stack_var_-8, align 4
  %v11_16c54 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16c58

dec_label_pc_16c58:                               ; preds = %dec_label_pc_16c58.dec_label_pc_16c58_crit_edge, %dec_label_pc_16c50
  %v0_16c7c = phi i32 [ %v1_16c7c, %dec_label_pc_16c58.dec_label_pc_16c58_crit_edge ], [ %v0_16c1019, %dec_label_pc_16c50 ]
  %v0_16c5c = phi i32 [ %v0_16c5c.pre, %dec_label_pc_16c58.dec_label_pc_16c58_crit_edge ], [ %v1_16bc8, %dec_label_pc_16c50 ]
  %v0_16c58 = phi i32 [ %v0_16c58.pre, %dec_label_pc_16c58.dec_label_pc_16c58_crit_edge ], [ %v2_16bcc, %dec_label_pc_16c50 ]
  %v3_16c58 = mul i32 %v0_16c58, 65536
  store i32 %v3_16c58, i32* %lr.global-to-local, align 4
  %v1_16c5c = add i32 %v0_16c5c, -4
  %v2_16c5c = inttoptr i32 %v1_16c5c to i32*
  %v3_16c5c = load i32, i32* %v2_16c5c, align 4
  store i32 %v3_16c5c, i32* @r3, align 4
  %v4_16c5c = add i32 %v0_16c5c, -8
  %v5_16c5c = inttoptr i32 %v4_16c5c to i32*
  %v6_16c5c = load i32, i32* %v5_16c5c, align 4
  store i32 %v6_16c5c, i32* %r4.global-to-local, align 4
  %v7_16c5c = add i32 %v0_16c5c, -12
  %v8_16c5c = inttoptr i32 %v7_16c5c to i32*
  %v9_16c5c = load i32, i32* %v8_16c5c, align 4
  store i32 %v9_16c5c, i32* %r5.global-to-local, align 4
  %v10_16c5c = add i32 %v0_16c5c, -16
  %v11_16c5c = inttoptr i32 %v10_16c5c to i32*
  %v12_16c5c = load i32, i32* %v11_16c5c, align 4
  store i32 %v10_16c5c, i32* %r1.global-to-local, align 4
  %v4_16c60 = udiv i32 %v12_16c5c, 65536
  %v5_16c60 = or i32 %v4_16c60, %v3_16c58
  store i32 %v5_16c60, i32* %lr.global-to-local, align 4
  %v3_16c64 = mul i32 %v12_16c5c, 65536
  %v4_16c68 = udiv i32 %v9_16c5c, 65536
  %v5_16c68 = or i32 %v3_16c64, %v4_16c68
  store i32 %v5_16c68, i32* @ip, align 4
  %v3_16c6c = mul i32 %v9_16c5c, 65536
  %v4_16c70 = udiv i32 %v6_16c5c, 65536
  %v5_16c70 = or i32 %v3_16c6c, %v4_16c70
  store i32 %v5_16c70, i32* %r5.global-to-local, align 4
  %v3_16c74 = mul i32 %v6_16c5c, 65536
  %v4_16c78 = udiv i32 %v3_16c5c, 65536
  %v5_16c78 = or i32 %v3_16c74, %v4_16c78
  store i32 %v5_16c78, i32* %r4.global-to-local, align 4
  %v1_16c7c = add i32 %v0_16c7c, -16
  %v2_16c7c = inttoptr i32 %v1_16c7c to i32*
  store i32 %v5_16c78, i32* %v2_16c7c, align 4
  %v4_16c7c = add i32 %v0_16c7c, -12
  %v5_16c7c = inttoptr i32 %v4_16c7c to i32*
  %v6_16c7c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c7c, i32* %v5_16c7c, align 4
  %v7_16c7c = add i32 %v0_16c7c, -8
  %v8_16c7c = inttoptr i32 %v7_16c7c to i32*
  %v9_16c7c = load i32, i32* @ip, align 4
  store i32 %v9_16c7c, i32* %v8_16c7c, align 4
  %v10_16c7c = add i32 %v0_16c7c, -4
  %v11_16c7c = inttoptr i32 %v10_16c7c to i32*
  %v12_16c7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c7c, i32* %v11_16c7c, align 4
  store i32 %v1_16c7c, i32* %r0.global-to-local, align 4
  %v0_16c80 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c80 = add i32 %v0_16c80, -16
  store i32 %v2_16c80, i32* %r2.global-to-local, align 4
  %v6_16c84 = icmp slt i32 %v0_16c80, 16
  br i1 %v6_16c84, label %dec_label_pc_16c88, label %dec_label_pc_16c58.dec_label_pc_16c58_crit_edge

dec_label_pc_16c58.dec_label_pc_16c58_crit_edge:  ; preds = %dec_label_pc_16c58
  %v0_16c58.pre = load i32, i32* @r3, align 4
  %v0_16c5c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c58

dec_label_pc_16c88:                               ; preds = %dec_label_pc_16c58
  %v2_16c88 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c88, i32* @r4, align 4
  %v5_16c88 = load i8*, i8** %stack_var_-8, align 4
  %v6_16c88 = ptrtoint i8* %v5_16c88 to i32
  store i32 %v6_16c88, i32* @r5, align 4
  store i32 %v11_16c54, i32* @lr, align 4
  %v2_16c8c = add i32 %v0_16c80, -4
  store i32 %v2_16c8c, i32* %r2.global-to-local, align 4
  %v4_16c8c = add i32 %v0_16c80, 2147483632
  %v5_16c8c = and i32 %v2_16c8c, %v4_16c8c
  %v6_16c8c = icmp slt i32 %v5_16c8c, 0
  store i1 %v6_16c8c, i1* %cpsr_v.global-to-local, align 1
  %v7_16c8c = icmp slt i32 %v2_16c8c, 0
  store i1 %v7_16c8c, i1* %cpsr_n.global-to-local, align 1
  %v8_16c8c = icmp eq i32 %v2_16c8c, 0
  store i1 %v8_16c8c, i1* %cpsr_z.global-to-local, align 1
  %v5_16c90 = icmp slt i32 %v2_16c80, -12
  br i1 %v5_16c90, label %dec_label_pc_16cac, label %dec_label_pc_16c94

dec_label_pc_16c94:                               ; preds = %dec_label_pc_16c88, %dec_label_pc_16c48, %dec_label_pc_16c94
  %v1_16ca0 = phi i32 [ %v5_16ca0, %dec_label_pc_16c94 ], [ %v1_16c7c, %dec_label_pc_16c88 ], [ %v0_16c1019, %dec_label_pc_16c48 ]
  %v0_16c94 = load i32, i32* @r3, align 4
  %v3_16c94 = mul i32 %v0_16c94, 65536
  store i32 %v3_16c94, i32* %ip.global-to-local, align 4
  %v0_16c98 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c98 = add i32 %v0_16c98, -4
  %v2_16c98 = inttoptr i32 %v1_16c98 to i32*
  %v3_16c98 = load i32, i32* %v2_16c98, align 4
  store i32 %v3_16c98, i32* @r3, align 4
  store i32 %v1_16c98, i32* %r1.global-to-local, align 4
  %v4_16c9c = udiv i32 %v3_16c98, 65536
  %v5_16c9c = or i32 %v4_16c9c, %v3_16c94
  store i32 %v5_16c9c, i32* @ip, align 4
  %v2_16ca0 = add i32 %v1_16ca0, -4
  %v3_16ca0 = inttoptr i32 %v2_16ca0 to i32*
  store i32 %v5_16c9c, i32* %v3_16ca0, align 4
  %v4_16ca0 = load i32, i32* %r0.global-to-local, align 4
  %v5_16ca0 = add i32 %v4_16ca0, -4
  store i32 %v5_16ca0, i32* %r0.global-to-local, align 4
  %v0_16ca4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ca4 = add i32 %v0_16ca4, -4
  store i32 %v2_16ca4, i32* %r2.global-to-local, align 4
  %v6_16ca8 = icmp slt i32 %v0_16ca4, 4
  br i1 %v6_16ca8, label %dec_label_pc_16cac.loopexit, label %dec_label_pc_16c94

dec_label_pc_16cac.loopexit:                      ; preds = %dec_label_pc_16c94
  %v4_16ca4 = sub i32 3, %v0_16ca4
  %v5_16ca4 = and i32 %v4_16ca4, %v0_16ca4
  %v6_16ca4 = icmp slt i32 %v5_16ca4, 0
  %v7_16ca4 = icmp slt i32 %v2_16ca4, 0
  store i1 %v6_16ca4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16ca4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16cac

dec_label_pc_16cac:                               ; preds = %dec_label_pc_16cac.loopexit, %dec_label_pc_16c88
  %v2_16b8452 = phi i32 [ %v5_16ca0, %dec_label_pc_16cac.loopexit ], [ %v1_16c7c, %dec_label_pc_16c88 ]
  %v0_16b7448 = phi i32 [ %v2_16ca4, %dec_label_pc_16cac.loopexit ], [ %v2_16c8c, %dec_label_pc_16c88 ]
  %v0_16cac = load i32, i32* %r1.global-to-local, align 4
  %v1_16cac = add i32 %v0_16cac, 2
  store i32 %v1_16cac, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16cb4:                               ; preds = %dec_label_pc_16bc8
  br i1 %v5_16cb8, label %dec_label_pc_16d00, label %dec_label_pc_16cbc

dec_label_pc_16cbc:                               ; preds = %dec_label_pc_16cb4
  store i32 %v2_16cb4, i32* %r2.global-to-local, align 4
  %v3_16cc0 = load i32, i32* @r4, align 4
  store i32 %v3_16cc0, i32* %stack_var_-12, align 4
  %v6_16cc0 = load i32, i32* @r5, align 4
  %v8_16cc0 = inttoptr i32 %v6_16cc0 to i8*
  store i8* %v8_16cc0, i8** %stack_var_-8, align 4
  %v11_16cc0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16cc4

dec_label_pc_16cc4:                               ; preds = %dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge, %dec_label_pc_16cbc
  %v0_16ce8 = phi i32 [ %v1_16ce8, %dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge ], [ %v0_16c1019, %dec_label_pc_16cbc ]
  %v0_16cc8 = phi i32 [ %v0_16cc8.pre, %dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge ], [ %v1_16bc8, %dec_label_pc_16cbc ]
  %v0_16cc4 = phi i32 [ %v0_16cc4.pre, %dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge ], [ %v2_16bcc, %dec_label_pc_16cbc ]
  %v3_16cc4 = mul i32 %v0_16cc4, 16777216
  store i32 %v3_16cc4, i32* %lr.global-to-local, align 4
  %v1_16cc8 = add i32 %v0_16cc8, -4
  %v2_16cc8 = inttoptr i32 %v1_16cc8 to i32*
  %v3_16cc8 = load i32, i32* %v2_16cc8, align 4
  store i32 %v3_16cc8, i32* @r3, align 4
  %v4_16cc8 = add i32 %v0_16cc8, -8
  %v5_16cc8 = inttoptr i32 %v4_16cc8 to i32*
  %v6_16cc8 = load i32, i32* %v5_16cc8, align 4
  store i32 %v6_16cc8, i32* %r4.global-to-local, align 4
  %v7_16cc8 = add i32 %v0_16cc8, -12
  %v8_16cc8 = inttoptr i32 %v7_16cc8 to i32*
  %v9_16cc8 = load i32, i32* %v8_16cc8, align 4
  store i32 %v9_16cc8, i32* %r5.global-to-local, align 4
  %v10_16cc8 = add i32 %v0_16cc8, -16
  %v11_16cc8 = inttoptr i32 %v10_16cc8 to i32*
  %v12_16cc8 = load i32, i32* %v11_16cc8, align 4
  store i32 %v10_16cc8, i32* %r1.global-to-local, align 4
  %v4_16ccc = udiv i32 %v12_16cc8, 256
  %v5_16ccc = or i32 %v4_16ccc, %v3_16cc4
  store i32 %v5_16ccc, i32* %lr.global-to-local, align 4
  %v3_16cd0 = mul i32 %v12_16cc8, 16777216
  %v4_16cd4 = udiv i32 %v9_16cc8, 256
  %v5_16cd4 = or i32 %v3_16cd0, %v4_16cd4
  store i32 %v5_16cd4, i32* @ip, align 4
  %v3_16cd8 = mul i32 %v9_16cc8, 16777216
  %v4_16cdc = udiv i32 %v6_16cc8, 256
  %v5_16cdc = or i32 %v3_16cd8, %v4_16cdc
  store i32 %v5_16cdc, i32* %r5.global-to-local, align 4
  %v3_16ce0 = mul i32 %v6_16cc8, 16777216
  %v4_16ce4 = udiv i32 %v3_16cc8, 256
  %v5_16ce4 = or i32 %v3_16ce0, %v4_16ce4
  store i32 %v5_16ce4, i32* %r4.global-to-local, align 4
  %v1_16ce8 = add i32 %v0_16ce8, -16
  %v2_16ce8 = inttoptr i32 %v1_16ce8 to i32*
  store i32 %v5_16ce4, i32* %v2_16ce8, align 4
  %v4_16ce8 = add i32 %v0_16ce8, -12
  %v5_16ce8 = inttoptr i32 %v4_16ce8 to i32*
  %v6_16ce8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16ce8, i32* %v5_16ce8, align 4
  %v7_16ce8 = add i32 %v0_16ce8, -8
  %v8_16ce8 = inttoptr i32 %v7_16ce8 to i32*
  %v9_16ce8 = load i32, i32* @ip, align 4
  store i32 %v9_16ce8, i32* %v8_16ce8, align 4
  %v10_16ce8 = add i32 %v0_16ce8, -4
  %v11_16ce8 = inttoptr i32 %v10_16ce8 to i32*
  %v12_16ce8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16ce8, i32* %v11_16ce8, align 4
  store i32 %v1_16ce8, i32* %r0.global-to-local, align 4
  %v0_16cec = load i32, i32* %r2.global-to-local, align 4
  %v2_16cec = add i32 %v0_16cec, -16
  store i32 %v2_16cec, i32* %r2.global-to-local, align 4
  %v6_16cf0 = icmp slt i32 %v0_16cec, 16
  br i1 %v6_16cf0, label %dec_label_pc_16cf4, label %dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge

dec_label_pc_16cc4.dec_label_pc_16cc4_crit_edge:  ; preds = %dec_label_pc_16cc4
  %v0_16cc4.pre = load i32, i32* @r3, align 4
  %v0_16cc8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16cc4

dec_label_pc_16cf4:                               ; preds = %dec_label_pc_16cc4
  %v2_16cf4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16cf4, i32* @r4, align 4
  %v5_16cf4 = load i8*, i8** %stack_var_-8, align 4
  %v6_16cf4 = ptrtoint i8* %v5_16cf4 to i32
  store i32 %v6_16cf4, i32* @r5, align 4
  store i32 %v11_16cc0, i32* @lr, align 4
  %v2_16cf8 = add i32 %v0_16cec, -4
  store i32 %v2_16cf8, i32* %r2.global-to-local, align 4
  %v4_16cf8 = add i32 %v0_16cec, 2147483632
  %v5_16cf8 = and i32 %v2_16cf8, %v4_16cf8
  %v6_16cf8 = icmp slt i32 %v5_16cf8, 0
  store i1 %v6_16cf8, i1* %cpsr_v.global-to-local, align 1
  %v7_16cf8 = icmp slt i32 %v2_16cf8, 0
  store i1 %v7_16cf8, i1* %cpsr_n.global-to-local, align 1
  %v8_16cf8 = icmp eq i32 %v2_16cf8, 0
  store i1 %v8_16cf8, i1* %cpsr_z.global-to-local, align 1
  %v5_16cfc = icmp slt i32 %v2_16cec, -12
  br i1 %v5_16cfc, label %dec_label_pc_16d18, label %dec_label_pc_16d00

dec_label_pc_16d00:                               ; preds = %dec_label_pc_16cf4, %dec_label_pc_16cb4, %dec_label_pc_16d00
  %v1_16d0c = phi i32 [ %v5_16d0c, %dec_label_pc_16d00 ], [ %v1_16ce8, %dec_label_pc_16cf4 ], [ %v0_16c1019, %dec_label_pc_16cb4 ]
  %v0_16d00 = load i32, i32* @r3, align 4
  %v3_16d00 = mul i32 %v0_16d00, 16777216
  store i32 %v3_16d00, i32* %ip.global-to-local, align 4
  %v0_16d04 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d04 = add i32 %v0_16d04, -4
  %v2_16d04 = inttoptr i32 %v1_16d04 to i32*
  %v3_16d04 = load i32, i32* %v2_16d04, align 4
  store i32 %v3_16d04, i32* @r3, align 4
  store i32 %v1_16d04, i32* %r1.global-to-local, align 4
  %v4_16d08 = udiv i32 %v3_16d04, 256
  %v5_16d08 = or i32 %v4_16d08, %v3_16d00
  store i32 %v5_16d08, i32* @ip, align 4
  %v2_16d0c = add i32 %v1_16d0c, -4
  %v3_16d0c = inttoptr i32 %v2_16d0c to i32*
  store i32 %v5_16d08, i32* %v3_16d0c, align 4
  %v4_16d0c = load i32, i32* %r0.global-to-local, align 4
  %v5_16d0c = add i32 %v4_16d0c, -4
  store i32 %v5_16d0c, i32* %r0.global-to-local, align 4
  %v0_16d10 = load i32, i32* %r2.global-to-local, align 4
  %v2_16d10 = add i32 %v0_16d10, -4
  store i32 %v2_16d10, i32* %r2.global-to-local, align 4
  %v6_16d14 = icmp slt i32 %v0_16d10, 4
  br i1 %v6_16d14, label %dec_label_pc_16d18.loopexit, label %dec_label_pc_16d00

dec_label_pc_16d18.loopexit:                      ; preds = %dec_label_pc_16d00
  %v4_16d10 = sub i32 3, %v0_16d10
  %v5_16d10 = and i32 %v4_16d10, %v0_16d10
  %v6_16d10 = icmp slt i32 %v5_16d10, 0
  %v7_16d10 = icmp slt i32 %v2_16d10, 0
  store i1 %v6_16d10, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16d10, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d18

dec_label_pc_16d18:                               ; preds = %dec_label_pc_16d18.loopexit, %dec_label_pc_16cf4
  %v2_16b8453 = phi i32 [ %v5_16d0c, %dec_label_pc_16d18.loopexit ], [ %v1_16ce8, %dec_label_pc_16cf4 ]
  %v0_16b7449 = phi i32 [ %v2_16d10, %dec_label_pc_16d18.loopexit ], [ %v2_16cf8, %dec_label_pc_16cf4 ]
  %v0_16d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d18 = add i32 %v0_16d18, 1
  store i32 %v1_16d18, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16d0c, { 0, 2, 1 }
  uselistorder i32 %v3_16d00, { 1, 0 }
  uselistorder i32 %v2_16cf8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ce8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16cc8, { 1, 0 }
  uselistorder i32 %v3_16cc4, { 1, 0 }
  uselistorder i32 %v0_16cc8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16ce8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16ca0, { 0, 2, 1 }
  uselistorder i32 %v3_16c94, { 1, 0 }
  uselistorder i32 %v2_16c8c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c7c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c5c, { 1, 0 }
  uselistorder i32 %v3_16c58, { 1, 0 }
  uselistorder i32 %v0_16c5c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c7c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16c34, { 0, 2, 1 }
  uselistorder i32 %v3_16c28, { 1, 0 }
  uselistorder i32 %v2_16c20, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c10, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16bf0, { 1, 0 }
  uselistorder i32 %v3_16bec, { 1, 0 }
  uselistorder i32 %v0_16bf0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c10, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16cb8, { 2, 0, 1 }
  uselistorder i32 %v0_16bd0, { 1, 0 }
  uselistorder i32 %v0_16cbc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16c1019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16bc0, { 2, 1, 0 }
  uselistorder i32 %v0_16bc0, { 2, 0, 1 }
  uselistorder i32 %v2_16bb8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16bb8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16bb8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16c1020, { 2, 1, 0 }
  uselistorder i32 %v11_16b94, { 1, 0 }
  uselistorder i32 %v7_16b94, { 1, 0 }
  uselistorder i32 %v1_16b74, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16b74, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16b78, { 1, 0 }
  uselistorder i32 %v7_16b6c, { 0, 2, 1 }
  uselistorder i32 %v10_16b68, { 1, 0 }
  uselistorder i32 %v9_16b60, { 1, 0, 2 }
  uselistorder i32 %v6_16b5c, { 1, 0 }
  uselistorder i32 %v2_16b54, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16b54, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16b64, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b48, { 0, 2, 1 }
  uselistorder i32 %v13_16b44, { 1, 0 }
  uselistorder i32 %v4_16b40, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16b40, { 2, 0, 1 }
  uselistorder i32 %v6_16b48, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b38, { 0, 2, 1 }
  uselistorder i32 %v16_16b34, { 1, 0 }
  uselistorder i32 %v4_16b30, { 1, 2, 0 }
  uselistorder i32 %v0_16b40.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16b38, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16b24, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16b20, { 1, 0 }
  uselistorder i32 %v1_16b1c, { 1, 0 }
  uselistorder i32 %v10_16b18, { 1, 0 }
  uselistorder i32 %v0_16b18, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16b1c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16b10, { 0, 2, 1 }
  uselistorder i32 %v2_16b04, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16b04, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16b1c37, { 1, 2, 0 }
  uselistorder i32 %v1_16afc, { 2, 1, 0 }
  uselistorder i32 %v1_16af4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16aec, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16ae8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16ae4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16ae4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16ad4, { 0, 2, 1 }
  uselistorder i32 %v4_16ad0, { 1, 0 }
  uselistorder i32 %v3_16ac4, { 1, 0 }
  uselistorder i32 %v1_16abc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ab0, { 1, 0 }
  uselistorder i32 %v12_16aac, { 0, 2, 1 }
  uselistorder i32 %v8_16a8c, { 1, 0, 2 }
  uselistorder i32 %v5_16a8c, { 1, 0, 2 }
  uselistorder i32 %v2_16a8c, { 1, 0, 2 }
  uselistorder i32 %v0_16a8c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16aac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a68, { 0, 2, 1 }
  uselistorder i32 %v4_16a64, { 1, 0 }
  uselistorder i32 %v3_16a58, { 1, 0 }
  uselistorder i32 %v1_16a50, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16a44, { 1, 0 }
  uselistorder i32 %v12_16a40, { 0, 2, 1 }
  uselistorder i32 %v8_16a20, { 1, 0, 2 }
  uselistorder i32 %v5_16a20, { 1, 0, 2 }
  uselistorder i32 %v2_16a20, { 1, 0, 2 }
  uselistorder i32 %v0_16a20, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16a40, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_169fc, { 0, 2, 1 }
  uselistorder i32 %v4_169f8, { 1, 0 }
  uselistorder i32 %v3_169ec, { 1, 0 }
  uselistorder i32 %v1_169e4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_169d8, { 1, 0 }
  uselistorder i32 %v12_169d4, { 0, 2, 1 }
  uselistorder i32 %v8_169b4, { 1, 0, 2 }
  uselistorder i32 %v5_169b4, { 1, 0, 2 }
  uselistorder i32 %v2_169b4, { 1, 0, 2 }
  uselistorder i32 %v0_169b4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_169d4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_16a10, { 0, 2, 1 }
  uselistorder i32 %v1_16a0c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16990, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16990, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16a14, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16aac76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16984, { 1, 0 }
  uselistorder i32 %v0_16984, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1697c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1697c, { 1, 0, 2 }
  uselistorder i32 %v0_1697c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16aac77, { 1, 0 }
  uselistorder i32 %v1_1695c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16964, { 1, 0 }
  uselistorder i32 %v0_16938, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1692c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16918, { 1, 0, 2 }
  uselistorder i32 %v1_16914, { 1, 0 }
  uselistorder i32 %v1_1690c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1690c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16904, { 0, 2, 1 }
  uselistorder i32 %v3_16904, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16904, { 1, 0 }
  uselistorder i1 %v1_16904, { 1, 0 }
  uselistorder i32 %v3_16900, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_168f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_168e4, { 1, 2, 0 }
  uselistorder i32 %v1_168dc, { 0, 2, 1 }
  uselistorder i32 %v12_168d8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_168cc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_168d0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_168c0, { 0, 2, 1 }
  uselistorder i32 %v1_168b8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_168b8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_168b0, { 1, 0 }
  uselistorder i32 %v1_168a8, { 2, 1, 0 }
  uselistorder i32 %v2_168a0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_168a0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1689c, { 1, 0 }
  uselistorder i32 %v2_16890, { 1, 0 }
  uselistorder i32 %v1_16890, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16890, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 8, 9, 10, 0, 18, 1, 19, 11, 12, 3, 13, 14, 4, 5, 6, 15, 7, 16, 2, 17 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 29, 2, 4, 5, 3, 6, 7, 8, 9, 16, 34, 39, 37, 38, 36, 30, 31, 20, 21, 32, 33, 35, 22, 23, 24, 25, 17, 26, 11, 12, 10, 13, 14, 15, 18, 19, 27, 28, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 7, 8, 9, 17, 23, 25, 0, 10, 11, 12, 13, 2, 14, 15, 16, 18, 19, 3, 20, 4, 21, 1, 22, 24, 5, 26, 27, 28, 6, 29 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 3, 5, 15, 4, 6, 7, 17, 18, 11, 12, 13, 14, 21, 22, 23, 19, 24, 8, 16, 20, 1, 9, 25, 2, 26, 10, 27 }
  uselistorder i32 40, { 2, 9, 11, 1, 4, 3, 10, 12, 5, 13, 14, 15, 16, 17, 18, 20, 19, 0, 6, 21, 7, 22, 8, 23 }
  uselistorder i32 36, { 4, 21, 5, 6, 7, 22, 8, 19, 9, 20, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16, 17, 18 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 4, 5, 10, 0, 6, 1, 7, 2, 8, 9, 3 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 6, 5 }
  uselistorder i32 24, { 0, 64, 65, 66, 67, 10, 11, 12, 14, 13, 15, 1, 16, 68, 69, 70, 17, 71, 18, 19, 72, 20, 63, 99, 100, 59, 60, 61, 62, 21, 22, 23, 24, 117, 118, 25, 121, 26, 2, 27, 101, 102, 28, 103, 56, 57, 29, 92, 93, 78, 94, 89, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 30, 84, 31, 85, 32, 86, 87, 88, 90, 91, 95, 96, 97, 98, 33, 34, 35, 36, 3, 37, 38, 8, 104, 105, 39, 40, 4, 41, 106, 42, 43, 44, 9, 107, 45, 46, 47, 108, 48, 5, 109, 110, 111, 112, 49, 50, 113, 51, 114, 52, 6, 115, 7, 53, 116, 119, 54, 120, 55, 58 }
  uselistorder i32 27, { 1, 0, 2, 6, 3, 7, 4, 8, 5, 9 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 175, 176, 177, 178, 179, 180, 181, 182, 183, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 114, 115, 184, 185, 12, 13, 116, 117, 118, 119, 120, 121, 104, 105, 106, 122, 135, 136, 123, 124, 125, 126, 127, 128, 129, 1, 130, 131, 133, 134, 132, 32, 33, 34, 35, 36, 37, 137, 138, 139, 140, 107, 141, 15, 16, 14, 17, 18, 19, 0, 23, 24, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 142, 143, 144, 112, 113, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174 }
  uselistorder label %dec_label_pc_16d00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16bc8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_16b54, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16b18, { 1, 0 }
  uselistorder label %dec_label_pc_16b04, { 1, 0 }
  uselistorder label %dec_label_pc_16ac4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a58, { 2, 0, 1 }
  uselistorder label %dec_label_pc_169ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1698c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1695c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_168f8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_168b8, { 1, 0 }
}

define i32 @function_16d20(i32 %arg1) local_unnamed_addr {
dec_label_pc_16d20:
  %v1_16d20 = and i32 %arg1, -4
  %v1_16d24 = inttoptr i32 %v1_16d20 to i32*
  %v2_16d24 = load i32, i32* %v1_16d24, align 4
  %v1_16d28 = urem i32 %arg1, 4
  store i32 %v1_16d28, i32* @r3, align 4
  %v2_16d28 = icmp eq i32 %v1_16d28, 0
  %v1_16d2c = sub nsw i32 0, %v1_16d28
  br i1 %v2_16d28, label %.preheader.preheader, label %dec_label_pc_16d34

dec_label_pc_16d34:                               ; preds = %dec_label_pc_16d20
  %v1_16d34 = or i32 %v2_16d24, 255
  %v7_16d38 = icmp eq i32 %v1_16d28, 1
  br i1 %v7_16d38, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_16d34
  %v9_16d3c = or i32 %v2_16d24, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_16d34, %bb
  %v8_16d44 = phi i32 [ %v1_16d34, %dec_label_pc_16d34 ], [ %v9_16d3c, %bb ]
  %v1_16d40 = add nsw i32 %v1_16d28, -2
  store i32 %v1_16d40, i32* @r3, align 4
  %v7_16d44 = icmp eq i32 %v1_16d28, 3
  br i1 %v7_16d44, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_16d44 = or i32 %v8_16d44, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_16d20
  %v1_16d54.ph = phi i32 [ %v2_16d24, %dec_label_pc_16d20 ], [ %v9_16d44, %bb34 ], [ %v8_16d44, %bb33 ]
  %v1_16d4838 = urem i32 %v1_16d54.ph, 256
  %v2_16d4839 = icmp eq i32 %v1_16d4838, 0
  %v2_16d4c40 = and i32 %v1_16d54.ph, 65280
  %v3_16d4c41 = icmp eq i32 %v2_16d4c40, 0
  %or.cond42 = or i1 %v2_16d4839, %v3_16d4c41
  %v2_16d5043 = and i32 %v1_16d54.ph, 16711680
  %v3_16d5044 = icmp eq i32 %v2_16d5043, 0
  %or.cond3145 = or i1 %v3_16d5044, %or.cond42
  %v4_16d5446 = icmp ult i32 %v1_16d54.ph, 16777216
  %or.cond3247 = or i1 %v4_16d5446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_16d64, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_16d581349 = phi i32 [ %v2_16d5814, %.thread4 ], [ %v1_16d2c, %.preheader.preheader ]
  %v1_16d5c48.in = phi i32 [ %v1_16d5c48, %.thread4 ], [ %v1_16d20, %.preheader.preheader ]
  %v1_16d5c48 = add i32 %v1_16d5c48.in, 4
  %v2_16d5814 = add i32 %v1_16d581349, 4
  %v2_16d5c = inttoptr i32 %v1_16d5c48 to i32*
  %v3_16d5c = load i32, i32* %v2_16d5c, align 4
  %v1_16d48 = urem i32 %v3_16d5c, 256
  %v2_16d48 = icmp eq i32 %v1_16d48, 0
  %v2_16d4c = and i32 %v3_16d5c, 65280
  %v3_16d4c = icmp eq i32 %v2_16d4c, 0
  %or.cond = or i1 %v2_16d48, %v3_16d4c
  %v2_16d50 = and i32 %v3_16d5c, 16711680
  %v3_16d50 = icmp eq i32 %v2_16d50, 0
  %or.cond31 = or i1 %v3_16d50, %or.cond
  %v4_16d54 = icmp ult i32 %v3_16d5c, 16777216
  %or.cond32 = or i1 %v4_16d54, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_16d64, label %.thread4

dec_label_pc_16d64:                               ; preds = %.thread4, %.preheader.preheader
  %v1_16d5813.lcssa = phi i32 [ %v1_16d2c, %.preheader.preheader ], [ %v2_16d5814, %.thread4 ]
  %v2_16d48.lcssa = phi i1 [ %v2_16d4839, %.preheader.preheader ], [ %v2_16d48, %.thread4 ]
  %v3_16d4c.lcssa = phi i1 [ %v3_16d4c41, %.preheader.preheader ], [ %v3_16d4c, %.thread4 ]
  %v3_16d50.lcssa = phi i1 [ %v3_16d5044, %.preheader.preheader ], [ %v3_16d50, %.thread4 ]
  br i1 %v2_16d48.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_16d64
  %v2_16d68 = add i32 %v1_16d5813.lcssa, 1
  br i1 %v3_16d4c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_16d7017 = add i32 %v1_16d5813.lcssa, 2
  br i1 %v3_16d50.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_16d78 = add i32 %v1_16d5813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_16d64, %bb35, %bb36, %bb37
  %v1_16d7c = phi i32 [ %v2_16d68, %bb35 ], [ %v2_16d7017, %bb36 ], [ %v2_16d78, %bb37 ], [ %v1_16d5813.lcssa, %dec_label_pc_16d64 ]
  ret i32 %v1_16d7c

; uselistorder directives
  uselistorder i32 %v1_16d5813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_16d5c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_16d54.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_16d28, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 -2, { 1, 3, 4, 2, 12, 13, 14, 0, 5, 28, 27, 29, 30, 31, 20, 21, 22, 23, 24, 25, 26, 15, 16, 17, 18, 19, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 65535, { 2, 93, 94, 0, 1, 13, 12, 3, 4, 44, 45, 24, 46, 23, 47, 15, 14, 5, 26, 48, 25, 49, 51, 16, 50, 6, 52, 53, 28, 54, 27, 55, 56, 57, 58, 29, 59, 60, 17, 61, 7, 32, 62, 63, 64, 31, 65, 30, 66, 68, 18, 67, 8, 69, 70, 36, 71, 33, 72, 34, 73, 35, 74, 19, 75, 76, 37, 77, 38, 78, 81, 82, 20, 79, 80, 9, 41, 83, 39, 84, 40, 85, 87, 21, 86, 10, 11, 88, 89, 43, 90, 42, 91, 22, 92 }
  uselistorder i32 -4, { 40, 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 37, 38, 39 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_16d80(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16d84.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_16d80

dec_label_pc_16d80:                               ; preds = %bb3, %bb
  %v0_16d84 = phi i32 [ %v0_16d84.pre, %bb ], [ %v5_16d84, %bb3 ]
  %v0_16d80 = phi i32 [ %tmp, %bb ], [ %v5_16d80, %bb3 ]
  %v1_16d80 = inttoptr i32 %v0_16d80 to i8*
  %v2_16d80 = load i8, i8* %v1_16d80, align 1
  %v1_16d84 = inttoptr i32 %v0_16d84 to i8*
  %v2_16d84 = load i8, i8* %v1_16d84, align 1
  %v3_16d84 = zext i8 %v2_16d84 to i32
  %v2_16d88 = icmp eq i8 %v2_16d80, 0
  br i1 %v2_16d88, label %.dec_label_pc_16d94_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_16d80
  %v5_16d84 = add i32 %v0_16d84, 1
  %v5_16d80 = add i32 %v0_16d80, 1
  %v3_16d80 = zext i8 %v2_16d80 to i32
  %v10_16d8c = icmp eq i8 %v2_16d80, %v2_16d84
  br i1 %v10_16d8c, label %dec_label_pc_16d80, label %dec_label_pc_16d94

.dec_label_pc_16d94_crit_edge:                    ; preds = %dec_label_pc_16d80
  br label %dec_label_pc_16d94

dec_label_pc_16d94:                               ; preds = %bb3, %.dec_label_pc_16d94_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16d94_crit_edge ], [ %v3_16d80, %bb3 ]
  %v2_16d94.pre-phi = sub nsw i32 %.pn, %v3_16d84
  ret i32 %v2_16d94.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16d80, { 0, 2, 1 }
  uselistorder i32 %v0_16d80, { 1, 0 }
  uselistorder i32 %v0_16d84, { 1, 0 }
  uselistorder label %dec_label_pc_16d94, { 1, 0 }
}

define i32 @function_16da0() local_unnamed_addr {
dec_label_pc_16da0:
  %stack_var_-16 = alloca i32, align 4
  %v3_16da0 = load i32, i32* @r4, align 4
  store i32 %v3_16da0, i32* %stack_var_-16, align 4
  %v6_16da0 = load i32, i32* @r5, align 4
  %v9_16da0 = load i32, i32* @r6, align 4
  %v0_16da4 = load i32, i32* @r0, align 4
  %v0_16da8 = load i32, i32* @r1, align 4
  store i32 %v0_16da8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_16dc48 = inttoptr i32 %v0_16da4 to i8*
  %v2_16dc49 = load i8, i8* %v1_16dc48, align 1
  %v2_16dc811 = icmp eq i8 %v2_16dc49, 0
  store i32 %v0_16da8, i32* @r0, align 4
  %v1_16dd012 = add i32 %v0_16da4, 1
  store i32 %v1_16dd012, i32* @r4, align 4
  br i1 %v2_16dc811, label %dec_label_pc_16dd8, label %dec_label_pc_16db4

dec_label_pc_16db4:                               ; preds = %dec_label_pc_16da0, %dec_label_pc_16dc0
  %v3_16dc414.in = phi i8 [ %v2_16dc4, %dec_label_pc_16dc0 ], [ %v2_16dc49, %dec_label_pc_16da0 ]
  %v0_16dcc13 = phi i32 [ %v0_16dcc.pre, %dec_label_pc_16dc0 ], [ %v0_16da8, %dec_label_pc_16da0 ]
  %v3_16dc414 = zext i8 %v3_16dc414.in to i32
  %v2_16db4 = call i32 @function_16f6c(i32 %v0_16dcc13, i32 %v3_16dc414)
  %v2_16db8 = icmp eq i32 %v2_16db4, 0
  %v0_16dc0 = load i32, i32* @r5, align 4
  br i1 %v2_16db8, label %dec_label_pc_16dc0, label %dec_label_pc_16dd8

dec_label_pc_16dc0:                               ; preds = %dec_label_pc_16db4
  %v1_16dc0 = add i32 %v0_16dc0, 1
  %v0_16dc4.pre = load i32, i32* @r4, align 4
  %v0_16dcc.pre = load i32, i32* @r6, align 4
  store i32 %v1_16dc0, i32* @r5, align 4
  %v1_16dc4 = inttoptr i32 %v0_16dc4.pre to i8*
  %v2_16dc4 = load i8, i8* %v1_16dc4, align 1
  %v2_16dc8 = icmp eq i8 %v2_16dc4, 0
  store i32 %v0_16dcc.pre, i32* @r0, align 4
  %v1_16dd0 = add i32 %v0_16dc4.pre, 1
  store i32 %v1_16dd0, i32* @r4, align 4
  br i1 %v2_16dc8, label %dec_label_pc_16dd8, label %dec_label_pc_16db4

dec_label_pc_16dd8:                               ; preds = %dec_label_pc_16dc0, %dec_label_pc_16db4, %dec_label_pc_16da0
  %v0_16dd8 = phi i32 [ 0, %dec_label_pc_16da0 ], [ %v0_16dc0, %dec_label_pc_16db4 ], [ %v1_16dc0, %dec_label_pc_16dc0 ]
  %v2_16ddc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16ddc, i32* @r4, align 4
  store i32 %v6_16da0, i32* @r5, align 4
  store i32 %v9_16da0, i32* @r6, align 4
  ret i32 %v0_16dd8

; uselistorder directives
  uselistorder i8 %v2_16dc4, { 1, 0 }
  uselistorder i32 %v0_16dcc.pre, { 1, 0 }
  uselistorder i32 %v0_16dc4.pre, { 1, 0 }
  uselistorder i32* @r6, { 25, 0, 26, 27, 1, 28, 29, 30, 2, 31, 32, 20, 21, 33, 34, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 4, 5, 52, 53, 54, 55, 56, 57, 58, 59, 22, 23, 24, 6, 7, 8, 425, 426, 427, 428, 429, 430, 431, 60, 9, 61, 10, 62, 423, 424, 312, 316, 317, 318, 319, 313, 314, 315, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 320, 345, 346, 347, 321, 322, 323, 324, 325, 11, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 337, 338, 339, 340, 342, 344, 73, 74, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 68, 69, 70, 71, 66, 72, 63, 64, 65, 67, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 259, 260, 261, 262, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 12, 138, 139, 140, 141, 142, 143, 157, 158, 159, 160, 17, 161, 162, 163, 13, 164, 165, 166, 170, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 178, 179, 180, 182, 183, 184, 185, 186, 187, 192, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 204, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 216, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 226, 227, 228, 230, 231, 232, 233, 240, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 252, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 263, 264, 265, 271, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 14, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 19, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 18, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 15, 16, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422 }
  uselistorder label %dec_label_pc_16db4, { 1, 0 }
}

define i32 @function_16de4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16de4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16e142 = load i32, i32* @r0, align 4
  %v1_16e143 = inttoptr i32 %v0_16e142 to i8*
  %v2_16e144 = load i8, i8* %v1_16e143, align 1
  %v3_16e145 = zext i8 %v2_16e144 to i32
  store i32 %v3_16e145, i32* @ip, align 4
  %v2_16e186 = icmp eq i8 %v2_16e144, 0
  br i1 %v2_16e186, label %dec_label_pc_16e24, label %dec_label_pc_16df8.preheader

dec_label_pc_16df0:                               ; preds = %dec_label_pc_16df8
  %v3_16df8 = zext i8 %v2_16df8 to i32
  %v1_16e00 = add i32 %v0_16e00, 1
  %v9_16df0 = icmp eq i32 %v0_16df010, %v3_16df8
  br i1 %v9_16df0, label %dec_label_pc_16e0c, label %dec_label_pc_16df8

dec_label_pc_16df8:                               ; preds = %dec_label_pc_16df8.preheader, %dec_label_pc_16df0
  %v0_16e00 = phi i32 [ %tmp, %dec_label_pc_16df8.preheader ], [ %v1_16e00, %dec_label_pc_16df0 ]
  %v1_16df8 = inttoptr i32 %v0_16e00 to i8*
  %v2_16df8 = load i8, i8* %v1_16df8, align 1
  %v2_16dfc = icmp eq i8 %v2_16df8, 0
  br i1 %v2_16dfc, label %dec_label_pc_16e24, label %dec_label_pc_16df0

dec_label_pc_16e0c:                               ; preds = %dec_label_pc_16df0
  %v1_16e0c = add i32 %v0_16e0c, 1
  %v1_16e10 = add i32 %v0_16e10, 1
  %v1_16e14 = inttoptr i32 %v1_16e10 to i8*
  %v2_16e14 = load i8, i8* %v1_16e14, align 1
  %v3_16e14 = zext i8 %v2_16e14 to i32
  store i32 %v3_16e14, i32* @ip, align 4
  %v2_16e18 = icmp eq i8 %v2_16e14, 0
  br i1 %v2_16e18, label %dec_label_pc_16e24, label %dec_label_pc_16df8.preheader

dec_label_pc_16df8.preheader:                     ; preds = %dec_label_pc_16de4, %dec_label_pc_16e0c
  %v0_16e10 = phi i32 [ %v1_16e10, %dec_label_pc_16e0c ], [ %v0_16e142, %dec_label_pc_16de4 ]
  %v0_16e0c = phi i32 [ %v1_16e0c, %dec_label_pc_16e0c ], [ 0, %dec_label_pc_16de4 ]
  %v0_16df010 = phi i32 [ %v3_16e14, %dec_label_pc_16e0c ], [ %v3_16e145, %dec_label_pc_16de4 ]
  br label %dec_label_pc_16df8

dec_label_pc_16e24:                               ; preds = %dec_label_pc_16e0c, %dec_label_pc_16df8, %dec_label_pc_16de4
  %v0_16e24 = phi i32 [ 0, %dec_label_pc_16de4 ], [ %v0_16e0c, %dec_label_pc_16df8 ], [ %v1_16e0c, %dec_label_pc_16e0c ]
  ret i32 %v0_16e24

; uselistorder directives
  uselistorder i32 %v0_16e00, { 1, 0 }
  uselistorder label %dec_label_pc_16df8.preheader, { 1, 0 }
}

define i32 @function_16e30(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16e30:
  store i32 %arg1, i32* @r0, align 4
  %v1_16e34 = urem i32 %arg2, 256
  store i32 %v1_16e34, i32* @r4, align 4
  %v2_16e34 = icmp eq i32 %v1_16e34, 0
  br i1 %v2_16e34, label %dec_label_pc_16e48, label %dec_label_pc_16e5c.preheader

dec_label_pc_16e5c.preheader:                     ; preds = %dec_label_pc_16e30
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_16e643 = call i32 @function_16f6c(i32 %arg1, i32 %v1_16e34)
  %v2_16e685 = icmp eq i32 %v2_16e643, 0
  br i1 %v2_16e685, label %dec_label_pc_16e70, label %dec_label_pc_16e54

dec_label_pc_16e48:                               ; preds = %dec_label_pc_16e30
  %v2_16e4c = call i32 @function_16f6c(i32 %arg1, i32 0)
  br label %dec_label_pc_16e74

dec_label_pc_16e54:                               ; preds = %dec_label_pc_16e5c.preheader, %dec_label_pc_16e54
  %v2_16e646 = phi i32 [ %v2_16e64, %dec_label_pc_16e54 ], [ %v2_16e643, %dec_label_pc_16e5c.preheader ]
  store i32 %v2_16e646, i32* @r5, align 4
  %v1_16e58 = add i32 %v2_16e646, 1
  store i32 %v1_16e58, i32* @r0, align 4
  %v0_16e60 = load i32, i32* @r4, align 4
  %v2_16e64 = call i32 @function_16f6c(i32 %v1_16e58, i32 %v0_16e60)
  %v2_16e68 = icmp eq i32 %v2_16e64, 0
  br i1 %v2_16e68, label %dec_label_pc_16e70, label %dec_label_pc_16e54

dec_label_pc_16e70:                               ; preds = %dec_label_pc_16e54, %dec_label_pc_16e5c.preheader
  %v0_16e70 = load i32, i32* @r5, align 4
  br label %dec_label_pc_16e74

dec_label_pc_16e74:                               ; preds = %dec_label_pc_16e48, %dec_label_pc_16e70
  %storemerge = phi i32 [ %v2_16e4c, %dec_label_pc_16e48 ], [ %v0_16e70, %dec_label_pc_16e70 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_16e64, { 1, 0 }
  uselistorder i32 %v1_16e58, { 1, 0 }
  uselistorder i32 %v1_16e34, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_16f6c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16e74, { 1, 0 }
  uselistorder label %dec_label_pc_16e54, { 1, 0 }
}

define i32 @function_16e80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16e80:
  %v1_16e84 = urem i32 %arg1, 256
  %v0_16ea42 = load i32, i32* @r0, align 4
  %v1_16ea43 = urem i32 %v0_16ea42, 4
  %v2_16ea44 = icmp eq i32 %v1_16ea43, 0
  br i1 %v2_16ea44, label %dec_label_pc_16eac, label %dec_label_pc_16e8c

dec_label_pc_16e8c:                               ; preds = %dec_label_pc_16e80, %dec_label_pc_16ea0
  %v0_16ea0 = phi i32 [ %v1_16ea0, %dec_label_pc_16ea0 ], [ %v0_16ea42, %dec_label_pc_16e80 ]
  %v1_16e8c = inttoptr i32 %v0_16ea0 to i8*
  %v2_16e8c = load i8, i8* %v1_16e8c, align 1
  %v3_16e8c = zext i8 %v2_16e8c to i32
  %v9_16e90 = icmp eq i32 %v3_16e8c, %v1_16e84
  br i1 %v9_16e90, label %dec_label_pc_16f5c, label %dec_label_pc_16e98

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16e8c
  %v2_16e98 = icmp eq i8 %v2_16e8c, 0
  br i1 %v2_16e98, label %dec_label_pc_16f5c, label %dec_label_pc_16ea0

dec_label_pc_16ea0:                               ; preds = %dec_label_pc_16e98
  %v1_16ea0 = add i32 %v0_16ea0, 1
  %v1_16ea4 = urem i32 %v1_16ea0, 4
  %v2_16ea4 = icmp eq i32 %v1_16ea4, 0
  br i1 %v2_16ea4, label %dec_label_pc_16eac, label %dec_label_pc_16e8c

dec_label_pc_16eac:                               ; preds = %dec_label_pc_16ea0, %dec_label_pc_16e80
  %v0_16eb0 = phi i32 [ %v0_16ea42, %dec_label_pc_16e80 ], [ %v1_16ea0, %dec_label_pc_16ea0 ]
  %v4_16eac = mul nuw nsw i32 %v1_16e84, 256
  %v5_16eac = or i32 %v4_16eac, %v1_16e84
  %v4_16eb4 = mul i32 %v5_16eac, 65536
  %v5_16eb4 = or i32 %v4_16eb4, %v5_16eac
  br label %dec_label_pc_16eb8

dec_label_pc_16eb8:                               ; preds = %dec_label_pc_16f54, %dec_label_pc_16ef4, %dec_label_pc_16eac
  %v0_16f1c = phi i32 [ %v0_16eb0, %dec_label_pc_16eac ], [ %v4_16eb8, %dec_label_pc_16ef4 ], [ %v4_16eb8, %dec_label_pc_16f54 ]
  %v1_16eb8 = inttoptr i32 %v0_16f1c to i32*
  %v2_16eb8 = load i32, i32* %v1_16eb8, align 4
  %v4_16eb8 = add i32 %v0_16f1c, 4
  %v2_16ec0 = xor i32 %v2_16eb8, %v5_16eb4
  %v2_16ec4 = add i32 %v2_16ec0, 2130640639
  store i32 %v2_16ec4, i32* @ip, align 4
  %v2_16ecc = add i32 %v2_16eb8, 2130640639
  %v1_16ed0 = sub i32 -1, %v2_16eb8
  %v2_16ed4 = xor i32 %v2_16ecc, %v1_16ed0
  %v2_16ee0 = and i32 %v2_16ed4, -2130640640
  %v2_16ee8 = icmp eq i32 %v2_16ee0, 0
  br i1 %v2_16ee8, label %dec_label_pc_16ef4, label %dec_label_pc_16efc

dec_label_pc_16ef4:                               ; preds = %dec_label_pc_16eb8
  %v1_16edc = sub i32 -1, %v2_16ec0
  %v2_16ee4 = xor i32 %v2_16ec4, %v1_16edc
  %v2_16eec = and i32 %v2_16ee4, -2130640640
  %v2_16ef4 = icmp eq i32 %v2_16eec, 0
  br i1 %v2_16ef4, label %dec_label_pc_16eb8, label %dec_label_pc_16efc

dec_label_pc_16efc:                               ; preds = %dec_label_pc_16eb8, %dec_label_pc_16ef4
  %v2_16efc = inttoptr i32 %v0_16f1c to i8*
  %v3_16efc = load i8, i8* %v2_16efc, align 1
  %v4_16efc = zext i8 %v3_16efc to i32
  %v9_16f00 = icmp eq i32 %v4_16efc, %v1_16e84
  br i1 %v9_16f00, label %dec_label_pc_16f5c, label %dec_label_pc_16f0c

dec_label_pc_16f0c:                               ; preds = %dec_label_pc_16efc
  %v2_16f0c = icmp eq i8 %v3_16efc, 0
  br i1 %v2_16f0c, label %dec_label_pc_16f5c, label %dec_label_pc_16f14

dec_label_pc_16f14:                               ; preds = %dec_label_pc_16f0c
  %v1_16f14 = add i32 %v0_16f1c, 1
  %v2_16f14 = inttoptr i32 %v1_16f14 to i8*
  %v3_16f14 = load i8, i8* %v2_16f14, align 1
  %v4_16f14 = zext i8 %v3_16f14 to i32
  %v9_16f18 = icmp eq i32 %v4_16f14, %v1_16e84
  br i1 %v9_16f18, label %dec_label_pc_16f5c, label %dec_label_pc_16f24

dec_label_pc_16f24:                               ; preds = %dec_label_pc_16f14
  %v2_16f24 = icmp eq i8 %v3_16f14, 0
  br i1 %v2_16f24, label %dec_label_pc_16f5c, label %dec_label_pc_16f2c

dec_label_pc_16f2c:                               ; preds = %dec_label_pc_16f24
  %v1_16f2c = add i32 %v0_16f1c, 2
  %v2_16f2c = inttoptr i32 %v1_16f2c to i8*
  %v3_16f2c = load i8, i8* %v2_16f2c, align 1
  %v4_16f2c = zext i8 %v3_16f2c to i32
  %v9_16f30 = icmp eq i32 %v4_16f2c, %v1_16e84
  br i1 %v9_16f30, label %dec_label_pc_16f5c, label %dec_label_pc_16f3c

dec_label_pc_16f3c:                               ; preds = %dec_label_pc_16f2c
  %v2_16f3c = icmp eq i8 %v3_16f2c, 0
  br i1 %v2_16f3c, label %dec_label_pc_16f5c, label %dec_label_pc_16f44

dec_label_pc_16f44:                               ; preds = %dec_label_pc_16f3c
  %v1_16f44 = add i32 %v0_16f1c, 3
  %v2_16f44 = inttoptr i32 %v1_16f44 to i8*
  %v3_16f44 = load i8, i8* %v2_16f44, align 1
  %v4_16f44 = zext i8 %v3_16f44 to i32
  %v9_16f48 = icmp eq i32 %v4_16f44, %v1_16e84
  br i1 %v9_16f48, label %dec_label_pc_16f5c, label %dec_label_pc_16f54

dec_label_pc_16f54:                               ; preds = %dec_label_pc_16f44
  %v2_16f54 = icmp eq i8 %v3_16f44, 0
  br i1 %v2_16f54, label %dec_label_pc_16f5c, label %dec_label_pc_16eb8

dec_label_pc_16f5c:                               ; preds = %dec_label_pc_16e98, %dec_label_pc_16e8c, %dec_label_pc_16f54, %dec_label_pc_16f44, %dec_label_pc_16f3c, %dec_label_pc_16f2c, %dec_label_pc_16f24, %dec_label_pc_16f14, %dec_label_pc_16f0c, %dec_label_pc_16efc
  %v1_16f60 = phi i32 [ %v1_16f44, %dec_label_pc_16f54 ], [ %v1_16f44, %dec_label_pc_16f44 ], [ %v1_16f2c, %dec_label_pc_16f3c ], [ %v1_16f2c, %dec_label_pc_16f2c ], [ %v1_16f14, %dec_label_pc_16f24 ], [ %v1_16f14, %dec_label_pc_16f14 ], [ %v0_16f1c, %dec_label_pc_16f0c ], [ %v0_16f1c, %dec_label_pc_16efc ], [ %v0_16ea0, %dec_label_pc_16e8c ], [ %v0_16ea0, %dec_label_pc_16e98 ]
  ret i32 %v1_16f60

; uselistorder directives
  uselistorder i32 %v4_16eb8, { 1, 0 }
  uselistorder i32 %v2_16eb8, { 0, 2, 1 }
  uselistorder i32 %v0_16f1c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_16eac, { 1, 0 }
  uselistorder i32 %v1_16ea0, { 1, 0, 2 }
  uselistorder i32 %v0_16ea42, { 2, 1, 0 }
  uselistorder i32 %v1_16e84, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_16f5c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_16efc, { 1, 0 }
  uselistorder label %dec_label_pc_16e8c, { 1, 0 }
}

define i32 @function_16f6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16f6c:
  %v1_16f70 = urem i32 %arg1, 256
  %v0_16f903 = load i32, i32* @r0, align 4
  %v1_16f904 = urem i32 %v0_16f903, 4
  %v2_16f905 = icmp eq i32 %v1_16f904, 0
  br i1 %v2_16f905, label %dec_label_pc_16f98, label %dec_label_pc_16f78

dec_label_pc_16f78:                               ; preds = %dec_label_pc_16f6c, %dec_label_pc_16f8c
  %v0_16f8c = phi i32 [ %v1_16f8c, %dec_label_pc_16f8c ], [ %v0_16f903, %dec_label_pc_16f6c ]
  %v1_16f78 = inttoptr i32 %v0_16f8c to i8*
  %v2_16f78 = load i8, i8* %v1_16f78, align 1
  %v3_16f78 = zext i8 %v2_16f78 to i32
  %v9_16f7c = icmp eq i32 %v3_16f78, %v1_16f70
  br i1 %v9_16f7c, label %dec_label_pc_1704c, label %dec_label_pc_16f84

dec_label_pc_16f84:                               ; preds = %dec_label_pc_16f78
  %v2_16f84 = icmp eq i8 %v2_16f78, 0
  br i1 %v2_16f84, label %dec_label_pc_17048, label %dec_label_pc_16f8c

dec_label_pc_16f8c:                               ; preds = %dec_label_pc_16f84
  %v1_16f8c = add i32 %v0_16f8c, 1
  %v1_16f90 = urem i32 %v1_16f8c, 4
  %v2_16f90 = icmp eq i32 %v1_16f90, 0
  br i1 %v2_16f90, label %dec_label_pc_16f98, label %dec_label_pc_16f78

dec_label_pc_16f98:                               ; preds = %dec_label_pc_16f8c, %dec_label_pc_16f6c
  %v0_16f9c = phi i32 [ %v0_16f903, %dec_label_pc_16f6c ], [ %v1_16f8c, %dec_label_pc_16f8c ]
  %v4_16f98 = mul nuw nsw i32 %v1_16f70, 256
  %v5_16f98 = or i32 %v4_16f98, %v1_16f70
  %v4_16fa0 = mul i32 %v5_16f98, 65536
  %v5_16fa0 = or i32 %v4_16fa0, %v5_16f98
  br label %dec_label_pc_16fa4

dec_label_pc_16fa4:                               ; preds = %dec_label_pc_17040, %dec_label_pc_16fe0, %dec_label_pc_16f98
  %v0_17008 = phi i32 [ %v0_16f9c, %dec_label_pc_16f98 ], [ %v4_16fa4, %dec_label_pc_16fe0 ], [ %v4_16fa4, %dec_label_pc_17040 ]
  %v1_16fa4 = inttoptr i32 %v0_17008 to i32*
  %v2_16fa4 = load i32, i32* %v1_16fa4, align 4
  %v4_16fa4 = add i32 %v0_17008, 4
  %v2_16fac = xor i32 %v2_16fa4, %v5_16fa0
  %v2_16fb0 = add i32 %v2_16fac, 2130640639
  store i32 %v2_16fb0, i32* @ip, align 4
  %v2_16fb8 = add i32 %v2_16fa4, 2130640639
  %v1_16fbc = sub i32 -1, %v2_16fa4
  %v2_16fc0 = xor i32 %v2_16fb8, %v1_16fbc
  %v2_16fcc = and i32 %v2_16fc0, -2130640640
  %v2_16fd4 = icmp eq i32 %v2_16fcc, 0
  br i1 %v2_16fd4, label %dec_label_pc_16fe0, label %dec_label_pc_16fe8

dec_label_pc_16fe0:                               ; preds = %dec_label_pc_16fa4
  %v1_16fc8 = sub i32 -1, %v2_16fac
  %v2_16fd0 = xor i32 %v2_16fb0, %v1_16fc8
  %v2_16fd8 = and i32 %v2_16fd0, -2130640640
  %v2_16fe0 = icmp eq i32 %v2_16fd8, 0
  br i1 %v2_16fe0, label %dec_label_pc_16fa4, label %dec_label_pc_16fe8

dec_label_pc_16fe8:                               ; preds = %dec_label_pc_16fa4, %dec_label_pc_16fe0
  %v2_16fe8 = inttoptr i32 %v0_17008 to i8*
  %v3_16fe8 = load i8, i8* %v2_16fe8, align 1
  %v4_16fe8 = zext i8 %v3_16fe8 to i32
  %v9_16fec = icmp eq i32 %v4_16fe8, %v1_16f70
  br i1 %v9_16fec, label %dec_label_pc_1704c, label %dec_label_pc_16ff8

dec_label_pc_16ff8:                               ; preds = %dec_label_pc_16fe8
  %v2_16ff8 = icmp eq i8 %v3_16fe8, 0
  br i1 %v2_16ff8, label %dec_label_pc_17048, label %dec_label_pc_17000

dec_label_pc_17000:                               ; preds = %dec_label_pc_16ff8
  %v1_17000 = add i32 %v0_17008, 1
  %v2_17000 = inttoptr i32 %v1_17000 to i8*
  %v3_17000 = load i8, i8* %v2_17000, align 1
  %v4_17000 = zext i8 %v3_17000 to i32
  %v9_17004 = icmp eq i32 %v4_17000, %v1_16f70
  br i1 %v9_17004, label %dec_label_pc_1704c, label %dec_label_pc_17010

dec_label_pc_17010:                               ; preds = %dec_label_pc_17000
  %v2_17010 = icmp eq i8 %v3_17000, 0
  br i1 %v2_17010, label %dec_label_pc_17048, label %dec_label_pc_17018

dec_label_pc_17018:                               ; preds = %dec_label_pc_17010
  %v1_17018 = add i32 %v0_17008, 2
  %v2_17018 = inttoptr i32 %v1_17018 to i8*
  %v3_17018 = load i8, i8* %v2_17018, align 1
  %v4_17018 = zext i8 %v3_17018 to i32
  %v9_1701c = icmp eq i32 %v4_17018, %v1_16f70
  br i1 %v9_1701c, label %dec_label_pc_1704c, label %dec_label_pc_17028

dec_label_pc_17028:                               ; preds = %dec_label_pc_17018
  %v2_17028 = icmp eq i8 %v3_17018, 0
  br i1 %v2_17028, label %dec_label_pc_17048, label %dec_label_pc_17030

dec_label_pc_17030:                               ; preds = %dec_label_pc_17028
  %v1_17030 = add i32 %v0_17008, 3
  %v2_17030 = inttoptr i32 %v1_17030 to i8*
  %v3_17030 = load i8, i8* %v2_17030, align 1
  %v4_17030 = zext i8 %v3_17030 to i32
  %v9_17034 = icmp eq i32 %v4_17030, %v1_16f70
  br i1 %v9_17034, label %dec_label_pc_1704c, label %dec_label_pc_17040

dec_label_pc_17040:                               ; preds = %dec_label_pc_17030
  %v2_17040 = icmp eq i8 %v3_17030, 0
  br i1 %v2_17040, label %dec_label_pc_17048, label %dec_label_pc_16fa4

dec_label_pc_17048:                               ; preds = %dec_label_pc_16f84, %dec_label_pc_17040, %dec_label_pc_17028, %dec_label_pc_17010, %dec_label_pc_16ff8
  br label %dec_label_pc_1704c

dec_label_pc_1704c:                               ; preds = %dec_label_pc_16f78, %dec_label_pc_17030, %dec_label_pc_17018, %dec_label_pc_17000, %dec_label_pc_16fe8, %dec_label_pc_17048
  %v1_17050 = phi i32 [ 0, %dec_label_pc_17048 ], [ %v1_17030, %dec_label_pc_17030 ], [ %v1_17018, %dec_label_pc_17018 ], [ %v1_17000, %dec_label_pc_17000 ], [ %v0_17008, %dec_label_pc_16fe8 ], [ %v0_16f8c, %dec_label_pc_16f78 ]
  ret i32 %v1_17050

; uselistorder directives
  uselistorder i32 %v4_16fa4, { 1, 0 }
  uselistorder i32 %v2_16fa4, { 0, 2, 1 }
  uselistorder i32 %v0_17008, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_16f98, { 1, 0 }
  uselistorder i32 %v1_16f8c, { 1, 0, 2 }
  uselistorder i32 %v0_16f903, { 2, 1, 0 }
  uselistorder i32 %v1_16f70, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 60, 61, 116, 62, 63, 64, 65, 66, 67, 74, 75, 117, 7, 109, 27, 110, 26, 111, 38, 112, 68, 113, 69, 39, 81, 28, 76, 77, 2, 78, 79, 80, 40, 20, 82, 41, 83, 42, 84, 29, 85, 43, 86, 44, 87, 45, 46, 47, 0, 88, 89, 22, 21, 48, 90, 49, 30, 91, 9, 8, 50, 31, 92, 11, 10, 51, 93, 32, 94, 95, 24, 23, 52, 96, 33, 97, 13, 12, 53, 98, 34, 99, 54, 100, 15, 14, 55, 101, 35, 102, 17, 16, 56, 103, 36, 104, 19, 18, 57, 105, 37, 106, 25, 107, 6, 108, 114, 70, 71, 72, 73, 58, 115, 59 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 143, 146, 142, 147, 26, 27, 28, 29, 30, 31, 32, 33, 34, 141, 35, 36, 37, 2, 38, 0, 3, 39, 40, 42, 41, 1, 45, 43, 44, 46, 52, 47, 53, 48, 54, 49, 50, 51, 57, 58, 59, 60, 55, 56, 140, 62, 61, 64, 63, 66, 67, 68, 65, 69, 71, 72, 73, 70, 74, 75, 77, 78, 76, 79, 144, 80, 83, 81, 84, 82, 86, 87, 88, 85, 89, 94, 90, 95, 91, 96, 92, 93, 98, 99, 100, 97, 101, 145, 102, 103, 104, 106, 105, 107, 115, 108, 116, 109, 117, 110, 118, 111, 119, 112, 113, 114, 121, 122, 123, 124, 120, 125, 130, 126, 131, 127, 128, 129, 133, 135, 136, 137, 132, 134, 139, 138 }
  uselistorder label %dec_label_pc_1704c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_17048, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16fe8, { 1, 0 }
  uselistorder label %dec_label_pc_16f78, { 1, 0 }
}

define i32 @function_1705c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1705c:
  %stack_var_-68 = alloca i32, align 4
  %v2_17064 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17064, i32* @r1, align 4
  %v0_17068 = call i32 @function_17080()
  %v1_1706c = sub i32 1, %v0_17068
  %v2_1706c = icmp ult i32 %v0_17068, 2
  br i1 %v2_1706c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1705c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1705c, %bb
  %v1_1707c = phi i32 [ %v1_1706c, %dec_label_pc_1705c ], [ 0, %bb ]
  ret i32 %v1_1707c

; uselistorder directives
  uselistorder i32 %v0_17068, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_17080() local_unnamed_addr {
dec_label_pc_17080:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_4()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17080 = load i32, i32* @r4, align 4
  %v6_17080 = load i32, i32* @r5, align 4
  %v2_17088 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1708c = load i32, i32* @r1, align 4
  store i32 %v0_1708c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_17098 = load i32, i32* @r0, align 4
  %v3_17098 = call i32 @function_1243c(i32 %v0_17098, i32 21505, i32 %v2_17088)
  store i32 %v3_17098, i32* %r0.global-to-local, align 4
  store i32 %v3_17098, i32* @r5, align 4
  %v2_1709c = icmp eq i32 %v3_17098, 0
  br i1 %v2_1709c, label %dec_label_pc_170a4, label %dec_label_pc_170e8

dec_label_pc_170a4:                               ; preds = %dec_label_pc_17080
  %v4_170b0 = zext i8 %tmp to i32
  store i32 %v4_170b0, i32* @ip, align 4
  %v3_170b4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_170b4, i32* @r3, align 4
  %v1_170b8 = load i32, i32* @r4, align 4
  %v2_170b8 = add i32 %v1_170b8, 4
  %v3_170b8 = inttoptr i32 %v2_170b8 to i32*
  %v0_170bc = load i32, i32* %r1.global-to-local, align 4
  %v1_170bc = load i32, i32* @r4, align 4
  %v2_170bc = add i32 %v1_170bc, 8
  %v3_170bc = inttoptr i32 %v2_170bc to i32*
  store i32 %v0_170bc, i32* %v3_170bc, align 4
  %v0_170c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_170c0 = load i32, i32* @r4, align 4
  %v2_170c0 = add i32 %v1_170c0, 12
  %v3_170c0 = inttoptr i32 %v2_170c0 to i32*
  store i32 %v0_170c0, i32* %v3_170c0, align 4
  %v2_170c4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_170c4, i32* @r1, align 4
  %v1_170cc = load i32, i32* @r4, align 4
  %v2_170cc = inttoptr i32 %v1_170cc to i32*
  store i32 %v3_170b4, i32* %v2_170cc, align 4
  %v0_170d0 = load i32, i32* @ip, align 4
  %v1_170d0 = trunc i32 %v0_170d0 to i8
  %v2_170d0 = load i32, i32* @r4, align 4
  %v3_170d0 = add i32 %v2_170d0, 16
  %v4_170d0 = inttoptr i32 %v3_170d0 to i8*
  store i8 %v1_170d0, i8* %v4_170d0, align 1
  %v0_170d4 = load i32, i32* @r4, align 4
  %v1_170d4 = add i32 %v0_170d4, 17
  store i32 %v1_170d4, i32* %r0.global-to-local, align 4
  %v4_170d8 = call i32 @function_175c4(i32 %v1_170d4, i32 %v2_170c4, i32 19, i32 %v3_170b4)
  store i32 %v4_170d8, i32* %r0.global-to-local, align 4
  %v0_170dc = load i32, i32* @r5, align 4
  store i32 %v0_170dc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_170e4 = inttoptr i32 %v4_170d8 to i8*
  %v3_170e4 = call i32 @function_12940(i8* %v2_170e4, i32 %v0_170dc)
  store i32 %v3_170e4, i32* %r0.global-to-local, align 4
  %v0_170e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_170e8

dec_label_pc_170e8:                               ; preds = %dec_label_pc_17080, %dec_label_pc_170a4
  %v0_170e8 = phi i32 [ %v3_17098, %dec_label_pc_17080 ], [ %v0_170e8.pre, %dec_label_pc_170a4 ]
  store i32 %v0_170e8, i32* %r0.global-to-local, align 4
  store i32 %v3_17080, i32* @r4, align 4
  store i32 %v6_17080, i32* @r5, align 4
  ret i32 %v0_170e8

; uselistorder directives
  uselistorder i32 %v0_170e8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_12940, { 2, 3, 4, 5, 0, 1, 12, 11, 9, 6, 7, 8, 10 }
  uselistorder i32 13, { 8, 7, 0, 1, 10, 11, 9, 12, 5, 13, 2, 14, 15, 16, 17, 18, 19, 20, 6, 21, 22, 23, 24, 25, 26, 27, 28, 3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41 }
  uselistorder i32 17, { 11, 1, 2, 12, 13, 3, 14, 4, 15, 5, 16, 6, 17, 18, 19, 7, 20, 8, 9, 21, 10, 22, 23, 24, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1243c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_170e8, { 1, 0 }
}

define i32 @function_170fc() local_unnamed_addr {
dec_label_pc_170fc:
  %r0.global-to-local = alloca i32, align 4
  %v0_17104 = load i32, i32* @r0, align 4
  %v2_17104 = icmp eq i32 %v0_17104, 0
  %v0_1710c = load i32, i32* @r1, align 4
  br i1 %v2_17104, label %dec_label_pc_171e0, label %dec_label_pc_17114

dec_label_pc_17114:                               ; preds = %dec_label_pc_170fc
  br label %dec_label_pc_1712c

dec_label_pc_1712c:                               ; preds = %dec_label_pc_17114, %dec_label_pc_171a4
  %v1_171a4 = phi i32 [ 0, %dec_label_pc_17114 ], [ %v5_171a4, %dec_label_pc_171a4 ]
  %v0_171a8 = phi i32 [ 1, %dec_label_pc_17114 ], [ %v1_171a8, %dec_label_pc_171a4 ]
  %v0_1712c = phi i32 [ %v0_17104, %dec_label_pc_17114 ], [ %v0_1712c12, %dec_label_pc_171a4 ]
  %v1_1712c = inttoptr i32 %v0_1712c to i8*
  %v2_1712c = load i8, i8* %v1_1712c, align 1
  %v3_1712c = zext i8 %v2_1712c to i32
  %v4_17130 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([3 x i8]* @global_var_902c.699 to i32), i32 94704) to i32*), align 4
  %v2_17134 = mul nuw nsw i32 %v3_1712c, 2
  %v2_17138 = add i32 %v2_17134, %v4_17130
  %v3_17138 = inttoptr i32 %v2_17138 to i16*
  %v4_17138 = load i16, i16* %v3_17138, align 2
  %v1_1713c = and i16 %v4_17138, 8
  %v2_1713c = icmp eq i16 %v1_1713c, 0
  br i1 %v2_1713c, label %dec_label_pc_171e0, label %dec_label_pc_17144

dec_label_pc_17144:                               ; preds = %dec_label_pc_1712c
  br label %dec_label_pc_17164

dec_label_pc_1714c:                               ; preds = %dec_label_pc_17164
  %v2_1714c = mul i32 %v0_171a4, 10
  %v1_17150 = add i32 %v2_1714c, -48
  %v2_17154 = add i32 %v3_17164, %v1_17150
  %v8_1715c = icmp sgt i32 %v2_17154, 255
  br i1 %v8_1715c, label %dec_label_pc_171e0, label %dec_label_pc_17160

dec_label_pc_17160:                               ; preds = %dec_label_pc_1714c
  %v1_17160 = add i32 %v0_17194, 1
  store i32 %v1_17160, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17164

dec_label_pc_17164:                               ; preds = %dec_label_pc_17144, %dec_label_pc_17160
  %v0_171a4 = phi i32 [ 0, %dec_label_pc_17144 ], [ %v2_17154, %dec_label_pc_17160 ]
  %v0_17194 = phi i32 [ %v0_1712c, %dec_label_pc_17144 ], [ %v1_17160, %dec_label_pc_17160 ]
  %v1_17164 = inttoptr i32 %v0_17194 to i8*
  %v2_17164 = load i8, i8* %v1_17164, align 1
  %v3_17164 = zext i8 %v2_17164 to i32
  %v2_17168 = mul nuw nsw i32 %v3_17164, 2
  %v2_1716c = add i32 %v2_17168, %v4_17130
  %v3_1716c = inttoptr i32 %v2_1716c to i16*
  %v4_1716c = load i16, i16* %v3_1716c, align 2
  %v6_1716c = zext i16 %v4_1716c to i32
  %v1_17170 = and i32 %v6_1716c, 8
  %v2_17170 = icmp eq i32 %v1_17170, 0
  br i1 %v2_17170, label %dec_label_pc_17178, label %dec_label_pc_1714c

dec_label_pc_17178:                               ; preds = %dec_label_pc_17164
  %v7_17178 = icmp eq i32 %v0_171a8, 4
  br i1 %v7_17178, label %dec_label_pc_17190, label %dec_label_pc_17180

dec_label_pc_17180:                               ; preds = %dec_label_pc_17178
  %v7_17180 = icmp eq i8 %v2_17164, 46
  br i1 %v7_17180, label %dec_label_pc_17188, label %dec_label_pc_171e0

dec_label_pc_17188:                               ; preds = %dec_label_pc_17180
  %v1_17188 = add i32 %v0_17194, 1
  store i32 %v1_17188, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171a4

dec_label_pc_17190:                               ; preds = %dec_label_pc_17178
  %v2_17190 = icmp eq i8 %v2_17164, 0
  %v1_17194 = add i32 %v0_17194, 1
  store i32 %v1_17194, i32* %r0.global-to-local, align 4
  br i1 %v2_17190, label %dec_label_pc_171a4, label %dec_label_pc_1719c

dec_label_pc_1719c:                               ; preds = %dec_label_pc_17190
  %v1_1719c = and i32 %v6_1716c, 32
  %v2_1719c = icmp eq i32 %v1_1719c, 0
  br i1 %v2_1719c, label %dec_label_pc_171e0, label %dec_label_pc_171a4

dec_label_pc_171a4:                               ; preds = %dec_label_pc_1719c, %dec_label_pc_17190, %dec_label_pc_17188
  %v0_1712c12 = phi i32 [ %v1_17194, %dec_label_pc_1719c ], [ %v1_17194, %dec_label_pc_17190 ], [ %v1_17188, %dec_label_pc_17188 ]
  %v4_171a4 = mul i32 %v1_171a4, 256
  %v5_171a4 = or i32 %v0_171a4, %v4_171a4
  %v1_171a8 = add nuw nsw i32 %v0_171a8, 1
  %v7_171b0 = icmp slt i32 %v1_171a8, 5
  br i1 %v7_171b0, label %dec_label_pc_1712c, label %dec_label_pc_171b4

dec_label_pc_171b4:                               ; preds = %dec_label_pc_171a4
  %v2_171b4 = icmp eq i32 %v0_1710c, 0
  br i1 %v2_171b4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_171b4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171e4

bb:                                               ; preds = %dec_label_pc_171b4
  %v4_171b8 = udiv i32 %v5_171a4, 16777216
  %v2_171bc = udiv i32 %v5_171a4, 256
  %v5_171c0 = and i32 %v2_171bc, 65280
  %v2_171c4 = and i32 %v5_171a4, 65280
  %v5_171c8 = mul nuw nsw i32 %v2_171c4, 256
  %v5_171cc = mul i32 %v0_171a4, 16777216
  %v6_171c0 = or i32 %v4_171b8, %v5_171cc
  %v6_171c8 = or i32 %v6_171c0, %v5_171c0
  %v6_171cc = or i32 %v6_171c8, %v5_171c8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_171d8 = inttoptr i32 %v0_1710c to i32*
  store i32 %v6_171cc, i32* %v3_171d8, align 4
  %v1_171e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171e4

dec_label_pc_171e0:                               ; preds = %dec_label_pc_17180, %dec_label_pc_1719c, %dec_label_pc_1712c, %dec_label_pc_1714c, %dec_label_pc_170fc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171e4

dec_label_pc_171e4:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_171e0
  %v1_171e8 = phi i32 [ %v1_171e8.pre, %bb ], [ 0, %dec_label_pc_171e0 ], [ 1, %.thread7.thread ]
  ret i32 %v1_171e8

; uselistorder directives
  uselistorder i32 %v1_171a8, { 1, 0 }
  uselistorder i32 %v5_171a4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17194, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 65, 1, 5, 0, 6, 2, 7, 8, 9, 10, 11, 37, 45, 46, 47, 12, 13, 14, 48, 49, 15, 16, 17, 18, 38, 50, 3, 51, 52, 19, 20, 39, 53, 54, 40, 21, 22, 23, 24, 25, 55, 56, 57, 58, 41, 42, 43, 4, 59, 60, 26, 61, 27, 28, 29, 30, 44, 62, 31, 32, 33, 63, 34, 35, 36, 64, 66, 67 }
  uselistorder i32 16777216, { 0, 1, 65, 64, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 41, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66 }
  uselistorder i32 5, { 13, 0, 48, 27, 14, 28, 15, 29, 16, 26, 3, 2, 30, 17, 31, 32, 18, 19, 20, 21, 22, 33, 23, 5, 34, 6, 35, 7, 36, 24, 8, 37, 9, 38, 39, 10, 40, 11, 41, 42, 12, 43, 4, 44, 45, 25, 46, 47, 1 }
  uselistorder i32 32, { 122, 62, 60, 106, 107, 108, 109, 115, 116, 102, 103, 104, 105, 126, 63, 64, 68, 65, 69, 66, 70, 67, 71, 72, 119, 120, 73, 123, 81, 82, 80, 83, 84, 85, 86, 87, 88, 75, 76, 1, 77, 2, 78, 4, 3, 74, 79, 89, 124, 6, 5, 8, 7, 10, 9, 61, 90, 125, 91, 114, 12, 11, 14, 13, 92, 110, 93, 111, 94, 112, 95, 113, 16, 15, 18, 17, 101, 20, 19, 21, 23, 22, 25, 24, 26, 27, 29, 28, 96, 97, 30, 117, 31, 118, 32, 33, 34, 35, 36, 37, 98, 38, 39, 40, 99, 41, 0, 42, 43, 44, 121, 46, 45, 48, 47, 50, 49, 51, 53, 52, 55, 54, 57, 56, 58, 59, 100 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 31, 23, 33, 2, 16, 3, 34, 36, 35, 24, 37, 38, 25, 39, 40, 0, 19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 1, 59, 60, 61, 27, 62, 65, 28, 63, 64, 26, 66, 67, 68, 69, 70, 71, 4, 72, 73, 74, 75, 76, 77, 78, 79, 29, 80, 81, 82, 84, 85, 18, 88, 89, 90, 22, 86, 87, 94, 20, 91, 92, 93, 21, 17, 95, 96, 83, 30, 97, 98, 99, 100 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 255, { 4, 22, 5, 0, 1, 2, 16, 17, 19, 18, 20, 6, 21, 3, 9, 23, 10, 24, 7, 25, 8, 26, 13, 27, 14, 28, 11, 29, 12, 30, 15, 31 }
  uselistorder i32 10, { 1, 34, 35, 36, 4, 49, 51, 50, 77, 78, 0, 5, 39, 40, 10, 37, 38, 29, 3, 41, 30, 11, 31, 42, 12, 43, 13, 44, 14, 45, 15, 46, 16, 47, 48, 17, 18, 19, 20, 21, 22, 6, 52, 53, 54, 55, 56, 57, 58, 59, 60, 23, 61, 62, 63, 7, 64, 65, 66, 24, 8, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 25, 79, 2, 80, 81, 27, 82, 32, 33, 9, 83, 26, 84, 28 }
  uselistorder i16 0, { 0, 1, 2, 4, 5, 6, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 2, { 3, 4, 160, 63, 64, 59, 297, 298, 75, 299, 300, 65, 301, 302, 166, 161, 167, 162, 97, 303, 5, 168, 304, 70, 278, 6, 7, 279, 8, 9, 58, 274, 10, 11, 12, 275, 280, 13, 14, 15, 16, 76, 281, 282, 17, 18, 0, 163, 283, 19, 284, 98, 20, 159, 21, 22, 23, 24, 25, 26, 158, 27, 28, 29, 30, 31, 99, 101, 100, 66, 67, 102, 184, 185, 103, 182, 104, 183, 105, 186, 106, 176, 169, 170, 171, 172, 173, 174, 107, 175, 81, 177, 82, 178, 83, 179, 84, 180, 85, 181, 77, 32, 33, 187, 190, 191, 108, 71, 164, 192, 109, 193, 111, 188, 110, 189, 87, 194, 113, 195, 112, 86, 196, 114, 197, 34, 35, 36, 115, 198, 199, 116, 117, 118, 120, 72, 121, 119, 200, 122, 123, 124, 125, 126, 201, 68, 74, 202, 203, 204, 205, 206, 207, 208, 209, 210, 127, 211, 88, 212, 213, 214, 215, 216, 217, 128, 89, 218, 219, 220, 221, 222, 223, 224, 225, 129, 226, 90, 227, 228, 60, 130, 131, 132, 229, 230, 231, 232, 233, 234, 235, 1, 37, 38, 39, 40, 41, 42, 133, 236, 91, 237, 238, 239, 240, 43, 241, 242, 44, 45, 46, 47, 48, 49, 134, 243, 92, 244, 245, 246, 247, 248, 249, 135, 250, 136, 251, 137, 252, 2, 50, 51, 52, 53, 54, 55, 138, 253, 93, 254, 255, 61, 256, 257, 258, 259, 260, 261, 139, 94, 262, 263, 62, 264, 265, 140, 266, 141, 267, 268, 269, 270, 271, 142, 272, 95, 273, 78, 276, 79, 80, 277, 165, 69, 144, 145, 285, 146, 147, 286, 148, 149, 287, 150, 151, 288, 152, 153, 289, 154, 155, 290, 73, 291, 292, 96, 293, 156, 294, 56, 57, 295, 143, 296, 157 }
  uselistorder label %dec_label_pc_171e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_171e0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17164, { 1, 0 }
  uselistorder label %dec_label_pc_1712c, { 1, 0 }
}

define i32 @function_171f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_171f4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 131388, i32* %r2.global-to-local, align 4
  %v4_17200 = load i32, i32* inttoptr (i32 131488 to i32*), align 32
  %v4_17208 = load i32, i32* inttoptr (i32 131452 to i32*), align 4
  store i32 %v4_17208, i32* %r1.global-to-local, align 4
  %v1_1720c = add i32 %arg1, 44
  %v2_1720c = inttoptr i32 %v1_1720c to i32*
  %v3_1720c = load i32, i32* %v2_1720c, align 4
  %v1_17210 = add i32 %arg1, 28
  %v2_17210 = inttoptr i32 %v1_17210 to i32*
  %v3_17210 = load i32, i32* %v2_17210, align 4
  store i32 %v3_17210, i32* %r2.global-to-local, align 4
  %v2_17214 = inttoptr i32 %v4_17200 to i32*
  store i32 %v3_1720c, i32* %v2_17214, align 4
  %v0_17218 = load i32, i32* %r2.global-to-local, align 4
  %v1_17218 = load i32, i32* %r1.global-to-local, align 4
  %v2_17218 = inttoptr i32 %v1_17218 to i32*
  store i32 %v0_17218, i32* %v2_17218, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 45, 0, 1, 3, 4, 5, 2, 6, 7, 8, 15, 9, 16, 14, 26, 27, 28, 29, 30, 31, 23, 24, 25, 21, 22, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 10, 17, 18, 19, 20, 11, 42, 12, 43, 13, 44 }
  uselistorder i32 131388, { 40, 0, 41, 1, 42, 2, 3, 43, 4, 5, 44, 6, 45, 46, 47, 7, 8, 9, 35, 31, 29, 28, 30, 32, 33, 34, 27, 36, 22, 24, 23, 21, 20, 25, 26, 17, 16, 19, 18, 15, 14, 13, 12, 37, 38, 39, 48, 49, 50, 10, 11 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17224(i32 %arg1) local_unnamed_addr {
dec_label_pc_17224:
  %v0_17224 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17224, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17224
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17224, %bb
  %v4_17228 = phi i32 [ %arg1, %dec_label_pc_17224 ], [ 0, %bb ]
  ret i32 %v4_17228

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 13, 24, 25, 26, 27, 14, 15, 16, 17, 18, 19, 28, 29, 20, 21, 22, 23, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1722c(i32 %arg1) local_unnamed_addr {
dec_label_pc_17268:
  store i32 %arg1, i32* @global_var_22404.617, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_22404.617, { 1, 0, 2 }
}

define i32 @function_17278(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_17278:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17278 = load i32, i32* @r7, align 4
  store i32 %v3_17278, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_172a0, label %dec_label_pc_17290

dec_label_pc_17290:                               ; preds = %dec_label_pc_17278
  %v0_17290 = call i32 @function_128f0()
  %v0_17294 = load i32, i32* %r7.global-to-local, align 4
  %v1_17294 = sub i32 0, %v0_17294
  %v2_17298 = inttoptr i32 %v0_17290 to i32*
  store i32 %v1_17294, i32* %v2_17298, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_172a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_172a0

dec_label_pc_172a0:                               ; preds = %dec_label_pc_17278, %dec_label_pc_17290
  %v2_172a4 = phi i32 [ %v3_17278, %dec_label_pc_17278 ], [ %v2_172a4.pre, %dec_label_pc_17290 ]
  %v0_172a0 = phi i32 [ %arg1, %dec_label_pc_17278 ], [ -1, %dec_label_pc_17290 ]
  store i32 %v2_172a4, i32* %r7.global-to-local, align 4
  ret i32 %v0_172a0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_172a0, { 1, 0 }
}

define i32 @function_172ac(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_172ac:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_172b0 = load i32, i32* @r4, align 4
  %v6_172b0 = load i32, i32* @r5, align 4
  %v12_172b0 = load i32, i32* @r7, align 4
  %v1_172b4 = add i32 %arg3, 14
  %v2_172bc = ptrtoint i32* %stack_var_-72 to i32
  %v1_172c0 = and i32 %v1_172b4, -8
  %v2_172c4 = sub i32 %v2_172bc, %v1_172c0
  %v1_172c8 = add i32 %v2_172c4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_172c8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_17304, label %dec_label_pc_172f0

dec_label_pc_172f0:                               ; preds = %dec_label_pc_172ac
  %v0_172f0 = call i32 @function_128f0()
  %v0_172f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_172f4 = sub i32 0, %v0_172f4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_172fc = inttoptr i32 %v0_172f0 to i32*
  store i32 %v1_172f4, i32* %v2_172fc, align 4
  %v0_1730c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1730c

dec_label_pc_17304:                               ; preds = %dec_label_pc_172ac
  br i1 false, label %dec_label_pc_1730c, label %dec_label_pc_17314

dec_label_pc_1730c:                               ; preds = %dec_label_pc_17304, %dec_label_pc_172f0
  %v0_1730c = phi i32 [ -1, %dec_label_pc_17304 ], [ %v0_1730c.pre, %dec_label_pc_172f0 ]
  store i32 %v0_1730c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173e0

dec_label_pc_17314:                               ; preds = %dec_label_pc_17304
  %v2_17314 = add i32 %v1_172c8, %arg1
  %v2_17318 = add i32 %tmp, %arg3
  store i32 %v2_17318, i32* @ip, align 4
  store i32 %v1_172c8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_173c8

dec_label_pc_17334:                               ; preds = %dec_label_pc_173c8
  %v1_17334 = add i32 %v0_17388, 16
  %v2_17334 = inttoptr i32 %v1_17334 to i16*
  %v3_17334 = load i16, i16* %v2_17334, align 2
  %v4_17334 = zext i16 %v3_17334 to i32
  %v1_17338 = add nuw nsw i32 %v4_17334, 7
  %v1_1733c = and i32 %v1_17338, 131064
  store i32 %v1_1733c, i32* %r2.global-to-local, align 4
  %v2_17344 = add i32 %v1_1733c, %v0_17390
  store i32 %v2_17344, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_17344, %v2_17318
  br i1 %tmp26, label %dec_label_pc_17350, label %dec_label_pc_17384

dec_label_pc_17350:                               ; preds = %dec_label_pc_17334
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17358 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_17358, i32* %r2.global-to-local, align 4
  %v0_1735c = load i32, i32* %sl.global-to-local, align 4
  %v1_17360 = load i32, i32* @sp, align 4
  %v2_17360 = inttoptr i32 %v1_17360 to i32*
  store i32 0, i32* %v2_17360, align 4
  %v4_17364 = call i32 @function_175e8(i32 %arg1, i32 0, i32 %v0_17358, i32 %v0_1735c)
  %v0_17368 = load i32, i32* @r5, align 4
  %v1_17368 = load i32, i32* %r6.global-to-local, align 4
  %v9_17368 = icmp eq i32 %v0_17368, %v1_17368
  br i1 %v9_17368, label %dec_label_pc_17370, label %dec_label_pc_173dc

dec_label_pc_17370:                               ; preds = %dec_label_pc_17350
  %v0_17370 = call i32 @function_128f0()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1737c = inttoptr i32 %v0_17370 to i32*
  store i32 22, i32* %v2_1737c, align 4
  %v0_173e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173e0

dec_label_pc_17384:                               ; preds = %dec_label_pc_17334
  %v1_17384 = inttoptr i32 %v0_17388 to i32*
  %v2_17384 = load i32, i32* %v1_17384, align 4
  %v3_17384 = add i32 %v0_17388, 4
  %v4_17384 = inttoptr i32 %v3_17384 to i32*
  %v5_17384 = load i32, i32* %v4_17384, align 4
  store i32 %v5_17384, i32* %r4.global-to-local, align 4
  %v1_17388 = add i32 %v0_17388, 8
  store i32 %v1_17388, i32* %sb.global-to-local, align 4
  %v1_1738c = inttoptr i32 %v1_17388 to i32*
  %v2_1738c = load i32, i32* %v1_1738c, align 4
  store i32 %v2_1738c, i32* %sb.global-to-local, align 4
  %v3_1738c = add i32 %v0_17388, 12
  %v4_1738c = inttoptr i32 %v3_1738c to i32*
  %v5_1738c = load i32, i32* %v4_1738c, align 4
  store i32 %v5_1738c, i32* %sl.global-to-local, align 4
  %v1_17390 = inttoptr i32 %v0_17390 to i32*
  store i32 %v2_17384, i32* %v1_17390, align 4
  %v3_17390 = add i32 %v0_17390, 4
  %v4_17390 = inttoptr i32 %v3_17390 to i32*
  %v5_17390 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17390, i32* %v4_17390, align 4
  %v0_17394 = load i32, i32* @r7, align 4
  %v1_17394 = add i32 %v0_17394, 8
  %v1_17398 = inttoptr i32 %v1_17394 to i32*
  %v2_17398 = load i32, i32* %v1_17398, align 4
  %v3_17398 = add i32 %v0_17394, 12
  %v4_17398 = inttoptr i32 %v3_17398 to i32*
  %v5_17398 = load i32, i32* %v4_17398, align 4
  store i32 %v5_17398, i32* @r4, align 4
  %v1_1739c = load i32, i32* @r5, align 4
  %v2_1739c = add i32 %v1_1739c, 8
  %v3_1739c = inttoptr i32 %v2_1739c to i32*
  store i32 %v2_17398, i32* %v3_1739c, align 4
  %v0_173a0 = load i32, i32* @r4, align 4
  %v1_173a0 = load i32, i32* @r5, align 4
  %v2_173a0 = add i32 %v1_173a0, 12
  %v3_173a0 = inttoptr i32 %v2_173a0 to i32*
  store i32 %v0_173a0, i32* %v3_173a0, align 4
  %v0_173a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_173a4 = trunc i32 %v0_173a4 to i16
  %v2_173a4 = load i32, i32* @r5, align 4
  %v3_173a4 = add i32 %v2_173a4, 16
  %v4_173a4 = inttoptr i32 %v3_173a4 to i16*
  store i16 %v1_173a4, i16* %v4_173a4, align 2
  %v0_173a8 = load i32, i32* @r7, align 4
  %v1_173a8 = add i32 %v0_173a8, 18
  %v2_173a8 = inttoptr i32 %v1_173a8 to i8*
  %v3_173a8 = load i8, i8* %v2_173a8, align 1
  %v4_173a8 = zext i8 %v3_173a8 to i32
  store i32 %v4_173a8, i32* @r3, align 4
  %v2_173ac = load i32, i32* @r5, align 4
  %v3_173ac = add i32 %v2_173ac, 18
  %v4_173ac = inttoptr i32 %v3_173ac to i8*
  store i8 %v3_173a8, i8* %v4_173ac, align 1
  %v0_173b0 = load i32, i32* @r7, align 4
  %v1_173b0 = add i32 %v0_173b0, 16
  %v2_173b0 = inttoptr i32 %v1_173b0 to i16*
  %v3_173b0 = load i16, i16* %v2_173b0, align 2
  %v4_173b0 = zext i16 %v3_173b0 to i32
  %v1_173b4 = add nsw i32 %v4_173b0, -19
  store i32 %v1_173b4, i32* @r2, align 4
  %v0_173b8 = call i32 @function_129f0()
  %v0_173bc = load i32, i32* @r7, align 4
  %v1_173bc = add i32 %v0_173bc, 16
  %v2_173bc = inttoptr i32 %v1_173bc to i16*
  %v3_173bc = load i16, i16* %v2_173bc, align 2
  %v4_173bc = zext i16 %v3_173bc to i32
  %v0_173c0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_173c0, i32* @r5, align 4
  %v2_173c4 = add i32 %v4_173bc, %v0_173bc
  store i32 %v2_173c4, i32* @r7, align 4
  br label %dec_label_pc_173c8

dec_label_pc_173c8:                               ; preds = %dec_label_pc_17314, %dec_label_pc_17384
  %v0_17390 = phi i32 [ %tmp, %dec_label_pc_17314 ], [ %v0_173c0, %dec_label_pc_17384 ]
  %v0_17388 = phi i32 [ %v1_172c8, %dec_label_pc_17314 ], [ %v2_173c4, %dec_label_pc_17384 ]
  %v3_173cc = icmp ult i32 %v0_17388, %v2_17314
  %v1_173d0 = add i32 %v0_17390, 19
  store i32 %v1_173d0, i32* @r0, align 4
  %v1_173d4 = add i32 %v0_17388, 19
  store i32 %v1_173d4, i32* @r1, align 4
  br i1 %v3_173cc, label %dec_label_pc_17334, label %dec_label_pc_173dc.loopexit

dec_label_pc_173dc.loopexit:                      ; preds = %dec_label_pc_173c8
  %v0_173dc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_173dc

dec_label_pc_173dc:                               ; preds = %dec_label_pc_173dc.loopexit, %dec_label_pc_17350
  %v1_173dc = phi i32 [ %v0_17390, %dec_label_pc_173dc.loopexit ], [ %v0_17368, %dec_label_pc_17350 ]
  %v0_173dc = phi i32 [ %v0_173dc.pre, %dec_label_pc_173dc.loopexit ], [ %v1_17368, %dec_label_pc_17350 ]
  %v2_173dc = sub i32 %v1_173dc, %v0_173dc
  store i32 %v2_173dc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173e0

dec_label_pc_173e0:                               ; preds = %dec_label_pc_17370, %dec_label_pc_1730c, %dec_label_pc_173dc
  %v0_173e0 = phi i32 [ %v0_173e0.pre, %dec_label_pc_17370 ], [ %v0_1730c, %dec_label_pc_1730c ], [ %v2_173dc, %dec_label_pc_173dc ]
  store i32 %v3_172b0, i32* %r4.global-to-local, align 4
  store i32 %v6_172b0, i32* @r5, align 4
  store i32 %v12_172b0, i32* @r7, align 4
  ret i32 %v0_173e0

; uselistorder directives
  uselistorder i32 %v0_17388, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_17390, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_172c8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 3, 4, 0, 1, 5, 6, 7, 2, 8 }
  uselistorder i32* @r3, { 9, 10, 41, 42, 76, 77, 3, 78, 79, 80, 4, 81, 82, 83, 5, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 11, 8, 12, 13, 14, 15, 16, 43, 44, 106, 115, 116, 117, 110, 51, 52, 53, 54, 55, 56, 57, 17, 18, 19, 121, 118, 119, 120, 1, 122, 123, 124, 111, 20, 58, 32, 33, 34, 112, 113, 114, 59, 107, 108, 109, 60, 61, 7, 62, 63, 64, 65, 66, 2, 27, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 35, 36, 38, 37, 39, 40, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 72, 6, 73, 74, 75 }
  uselistorder i32 18, { 6, 7, 2, 8, 5, 3, 9, 10, 4, 11, 0, 12, 1, 13 }
  uselistorder i32 22, { 1, 0, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32 7, { 30, 27, 28, 12, 0, 1, 50, 13, 32, 33, 14, 31, 4, 15, 34, 16, 35, 17, 36, 18, 19, 20, 21, 37, 6, 38, 22, 39, 7, 23, 40, 8, 41, 9, 42, 10, 43, 24, 44, 5, 45, 2, 25, 46, 3, 26, 47, 48, 29, 11, 49 }
  uselistorder i32* @ip, { 8, 9, 10, 81, 11, 12, 7, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 3, 115, 116, 117, 118, 119, 120, 121, 122, 123, 13, 0, 14, 15, 16, 17, 18, 124, 125, 45, 46, 4, 26, 27, 28, 29, 30, 31, 47, 48, 49, 129, 126, 127, 128, 1, 130, 25, 50, 51, 52, 53, 2, 54, 55, 56, 32, 33, 34, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 5, 20, 21, 22, 23, 19, 24, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 72, 73, 74, 75, 76, 77, 78, 6, 79, 80 }
  uselistorder i1 false, { 0, 24, 25, 26, 42, 17, 23, 43, 44, 45, 46, 47, 2, 1, 27, 30, 29, 28, 31, 4, 6, 37, 18, 19, 5, 14, 7, 34, 15, 13, 16, 8, 9, 10, 32, 3, 11, 12, 35, 38, 39, 40, 21, 41, 20, 22, 36, 33, 48 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 4, 3, 2, 5, 6, 7 }
  uselistorder i32 14, { 13, 20, 28, 9, 10, 11, 2, 14, 3, 15, 4, 16, 5, 17, 12, 6, 18, 7, 19, 8, 21, 22, 0, 23, 24, 25, 26, 1, 27 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_173e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_173c8, { 1, 0 }
}

define i32 @function_173f0(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_173f0:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_173f0 = load i32, i32* @r4, align 4
  store i32 %v3_173f0, i32* %stack_var_-12, align 4
  %v0_173f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_173f4 = inttoptr i32 %v0_173f4 to i16*
  %v2_173f4 = load i16, i16* %v1_173f4, align 2
  %v3_173f4 = zext i16 %v2_173f4 to i32
  %v1_173f8 = and i32 %v3_173f4, 4
  store i32 %v1_173f8, i32* %r5.global-to-local, align 4
  %v2_173f8 = icmp eq i32 %v1_173f8, 0
  store i32 %v0_173f4, i32* %r4.global-to-local, align 4
  br i1 %v2_173f8, label %dec_label_pc_1740c, label %bb

bb:                                               ; preds = %dec_label_pc_173f0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1740c:                               ; preds = %dec_label_pc_173f0
  %v1_1740c = icmp slt i32 %arg2, 0
  br i1 %v1_1740c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1740c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1740c, %bb18
  %v1_17414 = add i32 %v0_173f4, 4
  %v2_17414 = inttoptr i32 %v1_17414 to i32*
  %v3_17414 = load i32, i32* %v2_17414, align 4
  store i32 %v3_17414, i32* %r0.global-to-local, align 4
  %v1_17418 = call i32 @function_12260(i32 %v3_17414)
  store i32 %v1_17418, i32* %r0.global-to-local, align 4
  %v5_17420 = icmp sgt i32 %v1_17418, 0
  br i1 %v5_17420, label %.thread7, label %dec_label_pc_17424

dec_label_pc_17424:                               ; preds = %bb19
  %v2_1741c = icmp eq i32 %v1_17418, 0
  %v0_17424 = load i32, i32* %r4.global-to-local, align 4
  %v1_17424 = inttoptr i32 %v0_17424 to i16*
  %v2_17424 = load i16, i16* %v1_17424, align 2
  br i1 %v2_1741c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17424
  %v2_17428 = or i16 %v2_17424, 4
  store i16 %v2_17428, i16* %v1_17424, align 2
  %v1_17444.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17424
  %v2_1742c = or i16 %v2_17424, 8
  store i16 %v2_1742c, i16* %v1_17424, align 2
  %v1_17438 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_17438, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17444 = phi i32 [ %v1_17444.pre, %bb20 ], [ 0, %bb ], [ %v1_17418, %bb19 ], [ %v1_17438, %bb21 ]
  %v2_17440 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17440, i32* @r4, align 4
  ret i32 %v1_17444

; uselistorder directives
  uselistorder i16 %v2_17424, { 1, 0 }
  uselistorder i32 %v1_17418, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_12260, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_17448(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17448:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_17448 = load i32, i32* @r4, align 4
  store i32 %v3_17448, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_174602 = icmp eq i32 %arg3, 0
  store i1 %v2_174602, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_174602, label %dec_label_pc_174f0, label %dec_label_pc_17468

dec_label_pc_17460thread-pre-split:               ; preds = %dec_label_pc_17468
  %v3_17480 = load i32, i32* %r6.global-to-local, align 4
  %v5_17480 = add i32 %v3_17480, %v3_17478
  store i32 %v5_17480, i32* %r6.global-to-local, align 4
  %v4_17484 = load i32, i32* %r5.global-to-local, align 4
  %v5_17484 = sub i32 %v4_17484, %v3_17478
  store i32 %v5_17484, i32* %r5.global-to-local, align 4
  %v2_17460 = icmp eq i32 %v5_17484, 0
  store i1 %v2_17460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17460, label %dec_label_pc_17460.dec_label_pc_174f0.loopexit_crit_edge, label %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge

dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge: ; preds = %dec_label_pc_17460thread-pre-split
  %v3_17468.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_17474.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_17468

dec_label_pc_17468:                               ; preds = %dec_label_pc_17448, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge
  %v0_17474 = phi i32 [ %v0_17474.pre, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge ], [ %tmp, %dec_label_pc_17448 ]
  %v0_17470 = phi i32 [ %v5_17480, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge ], [ %arg2, %dec_label_pc_17448 ]
  %v3_17468 = phi i32 [ %v3_17468.pre, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge ], [ 2147483647, %dec_label_pc_17448 ]
  %v0_1746c.in = phi i32 [ %v5_17484, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge ], [ %arg3, %dec_label_pc_17448 ]
  %v3_1746c = phi i32 [ %v5_17484, %dec_label_pc_17460thread-pre-split.dec_label_pc_17468_crit_edge ], [ %arg3, %dec_label_pc_17448 ]
  %v0_1746c = icmp slt i32 %v0_1746c.in, 0
  %storemerge = select i1 %v0_1746c, i32 %v3_17468, i32 %v3_1746c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_17470, i32* %r1.global-to-local, align 4
  %v1_17474 = add i32 %v0_17474, 4
  %v2_17474 = inttoptr i32 %v1_17474 to i32*
  %v3_17474 = load i32, i32* %v2_17474, align 4
  %v3_17478 = call i32 @function_123d4(i32 %v3_17474, i32 %v0_17470)
  %v1_1747c = icmp slt i32 %v3_17478, 0
  %v2_1747c = icmp eq i32 %v3_17478, 0
  store i1 %v2_1747c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1747c, label %dec_label_pc_1748c, label %dec_label_pc_17460thread-pre-split

dec_label_pc_1748c:                               ; preds = %dec_label_pc_17468
  %v0_1748c = load i32, i32* %r4.global-to-local, align 4
  %v1_1748c = inttoptr i32 %v0_1748c to i16*
  %v2_1748c = load i16, i16* %v1_1748c, align 2
  %v3_1748c = zext i16 %v2_1748c to i32
  store i32 %v3_1748c, i32* %r3.global-to-local, align 4
  %v1_17490 = add i32 %v0_1748c, 8
  store i32 %v1_17490, i32* %r1.global-to-local, align 4
  %v1_17494 = inttoptr i32 %v1_17490 to i32*
  %v2_17494 = load i32, i32* %v1_17494, align 4
  store i32 %v2_17494, i32* %r1.global-to-local, align 4
  %v3_17494 = add i32 %v0_1748c, 12
  %v4_17494 = inttoptr i32 %v3_17494 to i32*
  %v5_17494 = load i32, i32* %v4_17494, align 4
  %v1_17498 = or i32 %v3_1748c, 8
  store i32 %v1_17498, i32* %r3.global-to-local, align 4
  %v2_1749c = sub i32 %v5_17494, %v2_17494
  store i32 %v2_1749c, i32* %r2.global-to-local, align 4
  %v9_1749c = icmp eq i32 %v5_17494, %v2_17494
  store i1 %v9_1749c, i1* %cpsr_z.global-to-local, align 1
  %v1_174a0 = trunc i32 %v1_17498 to i16
  store i16 %v1_174a0, i16* %v1_1748c, align 2
  br i1 %v9_1749c, label %dec_label_pc_1748c.dec_label_pc_174ec_crit_edge, label %dec_label_pc_174a8

dec_label_pc_1748c.dec_label_pc_174ec_crit_edge:  ; preds = %dec_label_pc_1748c
  %v0_174ec.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_174ec

dec_label_pc_174a8:                               ; preds = %dec_label_pc_1748c
  %v0_174a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_174a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_174a8 = icmp ult i32 %v0_174a8, %v1_174a8
  %v9_174a8 = icmp eq i32 %v0_174a8, %v1_174a8
  store i1 %v9_174a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_174a8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_174a8
  store i32 %v1_174a8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_174a8, %bb23
  %v2_174bc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_174d0
  %v2_174bc = phi i32 [ %v2_174bc.pre, %.preheader ], [ %v1_174d4, %dec_label_pc_174d0 ]
  %v0_174b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_174b0 = inttoptr i32 %v0_174b0 to i8*
  %v2_174b0 = load i8, i8* %v1_174b0, align 1
  %v3_174b0 = zext i8 %v2_174b0 to i32
  store i32 %v3_174b0, i32* %r3.global-to-local, align 4
  %v7_174b4 = icmp eq i8 %v2_174b0, 10
  store i1 %v7_174b4, i1* %cpsr_z.global-to-local, align 1
  %v1_174b8 = add i32 %v0_174b0, 1
  store i32 %v1_174b8, i32* %r6.global-to-local, align 4
  %v3_174bc = inttoptr i32 %v2_174bc to i8*
  store i8 %v2_174b0, i8* %v3_174bc, align 1
  %v0_174c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_174c0, label %dec_label_pc_174c4, label %dec_label_pc_174d0

dec_label_pc_174c4:                               ; preds = %bb24
  %v0_174c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_174c4 = inttoptr i32 %v0_174c4 to i16*
  %v2_174c4 = load i16, i16* %v1_174c4, align 2
  %v3_174c4 = zext i16 %v2_174c4 to i32
  store i32 %v3_174c4, i32* %r3.global-to-local, align 4
  %v1_174c8 = and i32 %v3_174c4, 256
  %v2_174c8 = icmp eq i32 %v1_174c8, 0
  store i1 %v2_174c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_174c8, label %dec_label_pc_174d0, label %dec_label_pc_174c4.dec_label_pc_174dc_crit_edge

dec_label_pc_174c4.dec_label_pc_174dc_crit_edge:  ; preds = %dec_label_pc_174c4
  %v0_174e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_174dc

dec_label_pc_174d0:                               ; preds = %dec_label_pc_174c4, %bb24
  %v0_174d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_174d0 = add i32 %v0_174d0, -1
  store i32 %v1_174d0, i32* %r2.global-to-local, align 4
  %v7_174d0 = icmp eq i32 %v0_174d0, 1
  store i1 %v7_174d0, i1* %cpsr_z.global-to-local, align 1
  %v0_174d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_174d4 = add i32 %v0_174d4, 1
  store i32 %v1_174d4, i32* %r1.global-to-local, align 4
  br i1 %v7_174d0, label %dec_label_pc_174d0.dec_label_pc_174dc_crit_edge, label %bb24

dec_label_pc_174d0.dec_label_pc_174dc_crit_edge:  ; preds = %dec_label_pc_174d0
  %v0_174dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_174dc

dec_label_pc_174dc:                               ; preds = %dec_label_pc_174c4.dec_label_pc_174dc_crit_edge, %dec_label_pc_174d0.dec_label_pc_174dc_crit_edge
  %v0_174e0 = phi i32 [ %v1_174d4, %dec_label_pc_174d0.dec_label_pc_174dc_crit_edge ], [ %v0_174e0.pre, %dec_label_pc_174c4.dec_label_pc_174dc_crit_edge ]
  %v0_174dc = phi i32 [ %v0_174dc.pre, %dec_label_pc_174d0.dec_label_pc_174dc_crit_edge ], [ %v0_174c4, %dec_label_pc_174c4.dec_label_pc_174dc_crit_edge ]
  %v1_174dc = add i32 %v0_174dc, 8
  %v2_174dc = inttoptr i32 %v1_174dc to i32*
  %v3_174dc = load i32, i32* %v2_174dc, align 4
  store i32 %v3_174dc, i32* %r3.global-to-local, align 4
  %v2_174e0 = add i32 %v0_174dc, 16
  %v3_174e0 = inttoptr i32 %v2_174e0 to i32*
  store i32 %v0_174e0, i32* %v3_174e0, align 4
  %v0_174e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_174e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_174e4 = sub i32 %v1_174e4, %v0_174e4
  store i32 %v2_174e4, i32* %r3.global-to-local, align 4
  %v1_174e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_174e8 = sub i32 %v1_174e8, %v2_174e4
  store i32 %v2_174e8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_174ec

dec_label_pc_174ec:                               ; preds = %dec_label_pc_1748c.dec_label_pc_174ec_crit_edge, %dec_label_pc_174dc
  %v0_174ec = phi i32 [ %v0_174ec.pre, %dec_label_pc_1748c.dec_label_pc_174ec_crit_edge ], [ %v2_174e8, %dec_label_pc_174dc ]
  %v1_174ec = load i32, i32* @r7, align 4
  %v2_174ec = sub i32 %v1_174ec, %v0_174ec
  br label %dec_label_pc_174f0

dec_label_pc_17460.dec_label_pc_174f0.loopexit_crit_edge: ; preds = %dec_label_pc_17460thread-pre-split
  %v0_174f0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_174f0

dec_label_pc_174f0:                               ; preds = %dec_label_pc_17448, %dec_label_pc_17460.dec_label_pc_174f0.loopexit_crit_edge, %dec_label_pc_174ec
  %v0_174f0 = phi i32 [ %v2_174ec, %dec_label_pc_174ec ], [ %v0_174f0.pre.pre, %dec_label_pc_17460.dec_label_pc_174f0.loopexit_crit_edge ], [ 0, %dec_label_pc_17448 ]
  %v2_174f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_174f4, i32* %r4.global-to-local, align 4
  ret i32 %v0_174f0

; uselistorder directives
  uselistorder i32 %v0_174dc, { 1, 0 }
  uselistorder i32 %v1_174d4, { 0, 2, 1 }
  uselistorder i32 %v0_174d0, { 1, 0 }
  uselistorder i32 %v1_174a8, { 0, 2, 1 }
  uselistorder i32 %v0_174a8, { 1, 0 }
  uselistorder i32 %v5_17494, { 1, 0 }
  uselistorder i32 %v2_17494, { 1, 0, 2 }
  uselistorder i32 %v3_17478, { 2, 3, 0, 1 }
  uselistorder i32 %v0_17470, { 1, 0 }
  uselistorder i32 %v5_17484, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 5, 3, 2, 6, 7, 8, 0 }
  uselistorder i32 256, { 256, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 248, 257, 254, 255, 258, 33, 35, 34, 36, 247, 0, 252, 1, 37, 38, 39, 40, 41, 43, 44, 45, 42, 47, 48, 49, 46, 50, 51, 259, 260, 52, 53, 54, 261, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 65, 64, 67, 250, 262, 251, 68, 69, 70, 72, 71, 73, 75, 74, 76, 77, 79, 78, 80, 263, 81, 82, 264, 93, 87, 83, 94, 88, 95, 89, 84, 85, 90, 91, 96, 92, 86, 97, 98, 99, 100, 101, 102, 103, 110, 107, 104, 111, 108, 112, 109, 105, 106, 113, 114, 115, 116, 127, 122, 128, 123, 129, 124, 130, 125, 117, 118, 119, 120, 131, 126, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 145, 149, 146, 150, 147, 142, 143, 144, 151, 152, 153, 154, 155, 165, 166, 160, 156, 167, 161, 168, 162, 157, 163, 169, 164, 158, 159, 170, 171, 172, 173, 174, 175, 180, 178, 176, 181, 179, 177, 182, 249, 265, 183, 185, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 210, 204, 211, 205, 206, 199, 200, 212, 207, 213, 208, 201, 202, 209, 214, 215, 216, 217, 218, 219, 224, 231, 225, 232, 226, 220, 221, 233, 227, 234, 228, 229, 222, 223, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 246 }
  uselistorder i8 10, { 4, 5, 0, 6, 1, 2, 3 }
  uselistorder i32 (i32, i32)* @function_123d4, { 2, 1, 0 }
  uselistorder i32 4, { 211, 212, 213, 205, 206, 399, 214, 474, 4, 5, 215, 6, 7, 81, 0, 8, 94, 89, 90, 9, 475, 91, 476, 66, 10, 11, 92, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 12, 494, 495, 496, 497, 498, 499, 65, 500, 501, 502, 503, 504, 505, 13, 14, 93, 506, 216, 107, 217, 15, 218, 108, 219, 220, 221, 222, 143, 223, 224, 225, 226, 227, 228, 16, 207, 208, 209, 210, 287, 288, 200, 201, 202, 203, 204, 507, 144, 109, 508, 17, 509, 145, 146, 67, 403, 404, 405, 406, 407, 408, 147, 148, 18, 409, 410, 411, 412, 413, 414, 415, 416, 149, 401, 402, 369, 370, 371, 372, 373, 374, 375, 376, 377, 19, 378, 379, 380, 417, 20, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 150, 151, 152, 432, 433, 436, 439, 434, 435, 110, 153, 437, 59, 438, 440, 441, 442, 444, 154, 22, 21, 443, 155, 156, 157, 257, 158, 60, 23, 24, 289, 290, 291, 292, 293, 25, 294, 445, 446, 199, 26, 27, 447, 448, 198, 28, 29, 111, 258, 68, 248, 112, 249, 30, 114, 250, 115, 251, 116, 252, 260, 261, 31, 262, 76, 77, 75, 263, 229, 230, 253, 254, 113, 235, 236, 237, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 62, 61, 264, 82, 265, 32, 266, 64, 63, 267, 33, 259, 268, 269, 274, 117, 275, 118, 119, 277, 278, 276, 270, 120, 271, 272, 273, 279, 80, 79, 78, 280, 121, 34, 35, 36, 37, 38, 39, 281, 70, 69, 282, 71, 122, 283, 284, 285, 123, 286, 295, 159, 296, 297, 298, 299, 300, 160, 161, 124, 301, 40, 125, 302, 95, 303, 304, 162, 305, 306, 163, 164, 307, 126, 308, 96, 309, 310, 165, 166, 311, 167, 312, 313, 314, 168, 169, 315, 127, 316, 97, 317, 170, 171, 318, 319, 320, 128, 98, 321, 322, 172, 323, 324, 325, 173, 174, 1, 129, 326, 99, 327, 328, 329, 175, 330, 331, 176, 177, 2, 83, 332, 130, 333, 100, 334, 335, 336, 337, 178, 179, 338, 339, 180, 340, 341, 131, 342, 3, 343, 101, 344, 132, 345, 346, 347, 181, 348, 349, 350, 351, 182, 183, 134, 352, 84, 353, 133, 354, 102, 355, 356, 357, 184, 358, 359, 360, 135, 361, 136, 362, 363, 364, 185, 186, 137, 365, 85, 366, 103, 367, 104, 368, 187, 41, 381, 188, 42, 382, 189, 43, 383, 190, 44, 384, 191, 86, 45, 385, 386, 192, 46, 387, 193, 47, 388, 194, 48, 389, 195, 49, 390, 196, 50, 391, 392, 197, 393, 394, 395, 396, 397, 398, 449, 400, 450, 451, 452, 105, 453, 87, 454, 455, 456, 457, 106, 458, 138, 459, 460, 461, 88, 462, 139, 463, 51, 52, 53, 54, 55, 464, 465, 466, 56, 74, 73, 72, 467, 57, 58, 140, 468, 141, 469, 470, 471, 142, 472, 473 }
  uselistorder i32 2147483647, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32* @r7, { 2, 30, 31, 19, 20, 21, 22, 23, 24, 25, 26, 29, 3, 32, 33, 34, 4, 35, 36, 37, 15, 38, 39, 5, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 49, 50, 51, 27, 28, 347, 348, 269, 270, 271, 272, 18, 349, 350, 351, 356, 357, 7, 52, 53, 273, 274, 275, 276, 277, 278, 279, 280, 281, 239, 240, 241, 242, 243, 244, 282, 283, 284, 285, 286, 287, 288, 289, 8, 290, 291, 292, 293, 294, 295, 296, 297, 298, 113, 114, 74, 75, 299, 300, 182, 183, 76, 77, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 126, 127, 128, 129, 135, 136, 137, 138, 139, 140, 301, 302, 354, 355, 78, 79, 80, 81, 303, 304, 352, 353, 157, 158, 141, 142, 245, 246, 305, 306, 307, 308, 309, 143, 144, 145, 146, 147, 310, 311, 17, 312, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 61, 70, 71, 62, 58, 9, 54, 55, 56, 57, 69, 59, 60, 63, 0, 64, 65, 66, 67, 68, 72, 73, 98, 99, 100, 101, 102, 103, 104, 225, 226, 227, 228, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 14, 118, 119, 120, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 159, 160, 162, 163, 164, 165, 166, 10, 167, 11, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 178, 180, 181, 16, 184, 187, 185, 186, 188, 189, 190, 191, 193, 192, 194, 195, 196, 198, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 1, 219, 216, 217, 218, 220, 221, 222, 223, 224, 233, 229, 230, 231, 232, 234, 235, 236, 237, 238, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 12, 337, 338, 339, 340, 341, 342, 343, 344, 13, 345, 346 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_174f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_174ec, { 1, 0 }
  uselistorder label %dec_label_pc_174dc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_17468, { 1, 0 }
}

define i32 @function_174fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_174fc:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_174fc = load i32, i32* @r4, align 4
  store i32 %v3_174fc, i32* %stack_var_-8, align 4
  %v1_17500 = add i32 %arg1, 8
  %v1_17504 = inttoptr i32 %v1_17500 to i32*
  %v2_17504 = load i32, i32* %v1_17504, align 4
  %v3_17504 = add i32 %arg1, 12
  %v4_17504 = inttoptr i32 %v3_17504 to i32*
  %v5_17504 = load i32, i32* %v4_17504, align 4
  %v2_17508 = sub i32 %v5_17504, %v2_17504
  store i32 %v2_17508, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17510 = inttoptr i32 %arg1 to i16*
  %v4_17510 = call i32 @function_173f0(i16* %v3_17510, i32 %v2_17504, i32 %v2_17508)
  %v0_17514 = load i32, i32* @r4, align 4
  %v1_17514 = add i32 %v0_17514, 8
  %v2_17514 = inttoptr i32 %v1_17514 to i32*
  %v3_17514 = load i32, i32* %v2_17514, align 4
  store i32 %v3_17514, i32* %r2.global-to-local, align 4
  %v2_17518 = add i32 %v3_17514, %v4_17510
  %v2_1751c = add i32 %v0_17514, 20
  %v3_1751c = inttoptr i32 %v2_1751c to i32*
  store i32 %v2_17518, i32* %v3_1751c, align 4
  %v0_17520 = load i32, i32* %r2.global-to-local, align 4
  %v1_17520 = load i32, i32* @r4, align 4
  %v2_17520 = add i32 %v1_17520, 16
  %v3_17520 = inttoptr i32 %v2_17520 to i32*
  store i32 %v0_17520, i32* %v3_17520, align 4
  %v2_17524 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17524, i32* @r4, align 4
  ret i32 %v4_17510

; uselistorder directives
  uselistorder i32 %v4_17510, { 1, 0 }
  uselistorder i32 20, { 26, 112, 3, 113, 114, 1, 115, 27, 9, 28, 29, 30, 31, 25, 40, 41, 21, 22, 23, 24, 116, 10, 117, 99, 100, 107, 2, 42, 11, 43, 44, 0, 32, 34, 35, 12, 36, 13, 37, 20, 33, 38, 39, 45, 47, 4, 46, 48, 49, 50, 51, 52, 53, 5, 54, 55, 56, 57, 58, 59, 61, 62, 14, 60, 63, 64, 65, 66, 67, 68, 70, 71, 15, 69, 72, 73, 74, 75, 77, 78, 16, 76, 79, 80, 81, 82, 83, 84, 86, 17, 85, 87, 88, 89, 92, 6, 90, 18, 91, 93, 94, 97, 7, 95, 19, 96, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 8, 111 }
  uselistorder i32 12, { 9, 10, 37, 11, 12, 40, 6, 172, 173, 174, 175, 176, 178, 179, 177, 180, 181, 182, 183, 184, 185, 186, 13, 14, 15, 16, 18, 17, 19, 41, 42, 20, 43, 44, 45, 46, 47, 38, 39, 85, 86, 34, 35, 36, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 3, 118, 119, 120, 121, 122, 21, 123, 141, 22, 23, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 153, 154, 155, 156, 157, 158, 159, 161, 162, 24, 163, 4, 87, 88, 25, 89, 90, 26, 63, 64, 59, 60, 49, 65, 66, 51, 61, 52, 53, 48, 50, 54, 55, 56, 57, 58, 62, 67, 68, 69, 5, 70, 71, 72, 73, 75, 76, 77, 27, 78, 28, 79, 29, 80, 30, 81, 31, 83, 84, 82, 74, 113, 91, 32, 92, 93, 94, 95, 96, 97, 98, 99, 33, 100, 101, 102, 7, 103, 104, 105, 106, 107, 108, 8, 109, 110, 111, 112, 114, 115, 116, 117, 0, 1, 2, 164, 165, 166, 167, 168, 170, 169, 171 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1752c() local_unnamed_addr {
dec_label_pc_1752c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1752c = load i32, i32* @r4, align 4
  store i32 %v3_1752c, i32* %stack_var_-12, align 4
  %v0_17530 = load i32, i32* @r0, align 4
  %v1_17530 = inttoptr i32 %v0_17530 to i16*
  %v2_17530 = load i16, i16* %v1_17530, align 2
  %v3_17530 = zext i16 %v2_17530 to i32
  store i32 %v3_17530, i32* %r3.global-to-local, align 4
  %v0_17534 = load i32, i32* @r1, align 4
  %v2_17534 = and i32 %v0_17534, %v3_17530
  %v4_17534 = icmp eq i32 %v2_17534, 0
  store i32 %v0_17530, i32* @r4, align 4
  br i1 %v4_17534, label %dec_label_pc_17544, label %dec_label_pc_17554

dec_label_pc_17544:                               ; preds = %dec_label_pc_1752c
  %v1_17544 = and i32 %v3_17530, 2176
  %v2_17544 = icmp eq i32 %v1_17544, 0
  br i1 %v2_17544, label %dec_label_pc_1754c, label %dec_label_pc_17560

dec_label_pc_1754c:                               ; preds = %dec_label_pc_17544
  %v2_1754c = or i32 %v0_17534, %v3_17530
  store i32 %v2_1754c, i32* %r3.global-to-local, align 4
  %v1_17550 = trunc i32 %v2_1754c to i16
  store i16 %v1_17550, i16* %v1_17530, align 2
  %v0_17554.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17554

dec_label_pc_17554:                               ; preds = %dec_label_pc_1752c, %dec_label_pc_1754c
  %v0_17554 = phi i32 [ %v0_17530, %dec_label_pc_1752c ], [ %v0_17554.pre, %dec_label_pc_1754c ]
  %v1_17554 = inttoptr i32 %v0_17554 to i16*
  %v2_17554 = load i16, i16* %v1_17554, align 2
  %v3_17554 = zext i16 %v2_17554 to i32
  store i32 %v3_17554, i32* %r3.global-to-local, align 4
  %v1_17558 = and i32 %v3_17554, 16
  store i32 %v1_17558, i32* %r5.global-to-local, align 4
  %v2_17558 = icmp eq i32 %v1_17558, 0
  br i1 %v2_17558, label %dec_label_pc_17580, label %dec_label_pc_17560

dec_label_pc_17560:                               ; preds = %dec_label_pc_17544, %dec_label_pc_17554
  %v0_17560 = call i32 @function_128f0()
  store i32 %v0_17560, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_17568 = inttoptr i32 %v0_17560 to i32*
  store i32 9, i32* %v2_17568, align 4
  br label %dec_label_pc_1756c

dec_label_pc_1756c:                               ; preds = %dec_label_pc_17588, %dec_label_pc_17560
  %v0_1756c = load i32, i32* @r4, align 4
  %v1_1756c = inttoptr i32 %v0_1756c to i16*
  %v2_1756c = load i16, i16* %v1_1756c, align 2
  %v3_1756c = zext i16 %v2_1756c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17574 = or i32 %v3_1756c, 8
  store i32 %v1_17574, i32* %r3.global-to-local, align 4
  %v1_17578 = trunc i32 %v1_17574 to i16
  store i16 %v1_17578, i16* %v1_1756c, align 2
  %v1_175c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_175b8

dec_label_pc_17580:                               ; preds = %dec_label_pc_17554
  %v1_17580 = and i32 %v3_17554, 64
  %v2_17580 = icmp eq i32 %v1_17580, 0
  br i1 %v2_17580, label %dec_label_pc_175a8, label %dec_label_pc_17588

dec_label_pc_17588:                               ; preds = %dec_label_pc_17580
  %v0_17588 = load i32, i32* @r0, align 4
  %v1_17588 = call i32 @function_16168(i32 %v0_17588)
  store i32 %v1_17588, i32* %r0.global-to-local, align 4
  %v2_1758c = icmp eq i32 %v1_17588, 0
  br i1 %v2_1758c, label %dec_label_pc_17594, label %dec_label_pc_1756c

dec_label_pc_17594:                               ; preds = %dec_label_pc_17588
  %v0_17594 = load i32, i32* @r4, align 4
  %v1_17594 = inttoptr i32 %v0_17594 to i16*
  %v2_17594 = load i16, i16* %v1_17594, align 2
  %v3_17594 = zext i16 %v2_17594 to i32
  store i32 %v3_17594, i32* %r3.global-to-local, align 4
  %v1_17598 = add i32 %v0_17594, 8
  %v2_17598 = inttoptr i32 %v1_17598 to i32*
  %v3_17598 = load i32, i32* %v2_17598, align 4
  %v1_1759c = and i32 %v3_17594, 65471
  store i32 %v1_1759c, i32* %r3.global-to-local, align 4
  %v2_175a0 = add i32 %v0_17594, 28
  %v3_175a0 = inttoptr i32 %v2_175a0 to i32*
  store i32 %v3_17598, i32* %v3_175a0, align 4
  %v0_175a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_175a4 = trunc i32 %v0_175a4 to i16
  %v2_175a4 = load i32, i32* @r4, align 4
  %v3_175a4 = inttoptr i32 %v2_175a4 to i16*
  store i16 %v1_175a4, i16* %v3_175a4, align 2
  %v0_175a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_175a8

dec_label_pc_175a8:                               ; preds = %dec_label_pc_17580, %dec_label_pc_17594
  %v2_175b0 = phi i32 [ %v0_17554, %dec_label_pc_17580 ], [ %v0_175a8.pre, %dec_label_pc_17594 ]
  %v1_175a8 = inttoptr i32 %v2_175b0 to i16*
  %v2_175a8 = load i16, i16* %v1_175a8, align 2
  %v3_175a8 = zext i16 %v2_175a8 to i32
  %v1_175ac = or i32 %v3_175a8, 1
  store i32 %v1_175ac, i32* %r3.global-to-local, align 4
  %v1_175b0 = trunc i32 %v1_175ac to i16
  store i16 %v1_175b0, i16* %v1_175a8, align 2
  %v0_175b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_175b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_175b8

dec_label_pc_175b8:                               ; preds = %dec_label_pc_1756c, %dec_label_pc_175a8
  %v1_175c0 = phi i32 [ %v1_175c0.pre, %dec_label_pc_1756c ], [ %v0_175b4, %dec_label_pc_175a8 ]
  %v2_175bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_175bc, i32* @r4, align 4
  ret i32 %v1_175c0

; uselistorder directives
  uselistorder i32 %v3_17530, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 24, 52, 7, 25, 26, 27, 41, 42, 22, 11, 23, 12, 13, 14, 15, 49, 50, 51, 8, 16, 17, 38, 0, 28, 1, 29, 2, 30, 3, 31, 4, 32, 5, 33, 18, 34, 19, 35, 20, 36, 6, 37, 9, 21, 40, 39, 43, 44, 45, 46, 47, 48, 10 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_16168, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 18, 9, 10, 11, 12, 48, 17, 2, 19, 20, 3, 21, 22, 23, 4, 24, 25, 26, 27, 5, 28, 29, 30, 6, 31, 32, 33, 7, 34, 35, 36, 0, 37, 38, 39, 40, 41, 8, 42, 43, 44, 45, 46, 1, 47 }
  uselistorder i32 8, { 90, 91, 92, 93, 94, 95, 96, 83, 84, 85, 86, 178, 97, 234, 45, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 98, 99, 100, 101, 102, 103, 104, 32, 105, 106, 107, 108, 109, 110, 111, 112, 113, 87, 88, 89, 126, 127, 128, 57, 252, 253, 69, 179, 180, 181, 182, 183, 184, 185, 186, 6, 70, 187, 188, 189, 190, 191, 192, 193, 194, 7, 163, 164, 165, 166, 167, 168, 169, 170, 195, 196, 197, 198, 199, 8, 200, 201, 9, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 219, 212, 213, 214, 215, 71, 26, 216, 217, 218, 72, 73, 10, 220, 221, 222, 223, 225, 226, 74, 11, 227, 12, 224, 48, 49, 46, 47, 28, 29, 42, 43, 50, 254, 129, 130, 131, 132, 58, 78, 35, 13, 14, 24, 15, 77, 36, 16, 17, 25, 18, 59, 115, 116, 19, 20, 21, 117, 60, 114, 79, 44, 118, 119, 120, 27, 30, 122, 22, 61, 123, 62, 124, 125, 121, 63, 64, 65, 66, 133, 76, 51, 134, 135, 136, 137, 138, 37, 139, 140, 141, 142, 3, 143, 144, 145, 4, 146, 147, 148, 149, 150, 151, 152, 5, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 171, 52, 172, 53, 173, 54, 174, 67, 175, 75, 23, 176, 68, 177, 0, 1, 2, 33, 38, 39, 34, 40, 41, 228, 80, 81, 229, 230, 231, 55, 232, 31, 82, 56, 233 }
  uselistorder i32 9, { 6, 32, 27, 28, 60, 62, 7, 45, 4, 63, 8, 35, 36, 33, 9, 10, 34, 29, 37, 2, 30, 38, 31, 11, 39, 12, 40, 13, 41, 14, 42, 15, 43, 16, 44, 17, 18, 19, 20, 0, 21, 22, 1, 23, 24, 25, 57, 46, 47, 26, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 3, 61, 64, 65, 5, 66 }
  uselistorder i32 16, { 104, 105, 106, 98, 99, 100, 101, 107, 36, 37, 38, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 108, 109, 110, 111, 112, 2, 1, 29, 51, 52, 53, 54, 115, 55, 116, 113, 114, 56, 57, 117, 9, 58, 59, 118, 119, 60, 61, 120, 121, 102, 103, 62, 139, 140, 94, 95, 96, 97, 63, 64, 65, 66, 212, 213, 214, 215, 67, 217, 3, 68, 218, 219, 0, 220, 221, 69, 28, 141, 70, 142, 71, 72, 10, 26, 11, 12, 4, 13, 14, 15, 27, 16, 17, 5, 18, 19, 73, 124, 74, 125, 75, 126, 76, 127, 77, 122, 128, 123, 131, 132, 133, 39, 93, 78, 134, 79, 135, 80, 81, 20, 90, 21, 22, 82, 129, 130, 42, 41, 40, 136, 43, 137, 44, 83, 84, 138, 45, 197, 85, 143, 144, 145, 146, 30, 147, 148, 149, 150, 151, 152, 153, 31, 154, 155, 156, 86, 157, 87, 46, 158, 159, 32, 160, 161, 23, 162, 163, 6, 47, 164, 165, 166, 33, 167, 168, 169, 170, 171, 7, 48, 172, 173, 174, 91, 24, 92, 175, 34, 176, 177, 178, 25, 35, 179, 88, 180, 181, 8, 49, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 208, 210, 211, 216, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 89, 232, 233, 234, 235, 50, 236, 237, 238, 239, 240 }
  uselistorder i32* @r1, { 14, 13, 53, 15, 16, 17, 18, 1, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 2, 104, 105, 19, 20, 21, 22, 0, 32, 33, 10, 23, 3, 55, 51, 52, 4, 56, 5, 28, 29, 12, 54, 45, 46, 7, 24, 34, 9, 57, 11, 58, 59, 60, 8, 61, 30, 25, 26, 27, 31, 47, 35, 36, 48, 49, 6, 37, 38, 39, 40, 41, 42, 43, 44, 50, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder label %dec_label_pc_175b8, { 1, 0 }
  uselistorder label %dec_label_pc_175a8, { 1, 0 }
  uselistorder label %dec_label_pc_17560, { 1, 0 }
  uselistorder label %dec_label_pc_17554, { 1, 0 }
}

define i32 @function_175c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_175c4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_175c4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_175d4 = call i32 @function_129f0()
  %v0_175d8 = load i32, i32* @r5, align 4
  %v1_175d8 = load i32, i32* @r4, align 4
  %v2_175d8 = add i32 %v1_175d8, %v0_175d8
  store i32 %v6_175c4, i32* @r5, align 4
  ret i32 %v2_175d8

; uselistorder directives
  uselistorder i32 ()* @function_129f0, { 7, 8, 6, 0, 3, 2, 5, 4, 1 }
  uselistorder i32* @r5, {}
  uselistorder i32* @r2, { 7, 11, 12, 41, 42, 13, 14, 15, 16, 17, 18, 23, 9, 10, 24, 43, 47, 48, 49, 50, 1, 53, 44, 2, 3, 28, 29, 4, 30, 5, 0, 51, 6, 52, 45, 46, 31, 32, 33, 22, 19, 20, 21, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 8 }
}

define i32 @function_175e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_175e8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_17628, label %dec_label_pc_17614

dec_label_pc_17614:                               ; preds = %dec_label_pc_175e8
  %v0_17614 = call i32 @function_128f0()
  %v0_17618 = load i32, i32* %r4.global-to-local, align 4
  %v1_17618 = sub i32 0, %v0_17618
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_17620 = inttoptr i32 %v0_17614 to i32*
  store i32 %v1_17618, i32* %v2_17620, align 4
  %v0_17630.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17630

dec_label_pc_17628:                               ; preds = %dec_label_pc_175e8
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_17628 = icmp eq i32 %arg1, 0
  br i1 %v2_17628, label %dec_label_pc_1763c, label %dec_label_pc_17630

dec_label_pc_17630:                               ; preds = %dec_label_pc_17628, %dec_label_pc_17614
  %v0_17630 = phi i32 [ %arg1, %dec_label_pc_17628 ], [ %v0_17630.pre, %dec_label_pc_17614 ]
  br label %dec_label_pc_17640

dec_label_pc_1763c:                               ; preds = %dec_label_pc_17628
  br label %dec_label_pc_17640

dec_label_pc_17640:                               ; preds = %dec_label_pc_17630, %dec_label_pc_1763c
  %v1_17648 = phi i32 [ %v0_17630, %dec_label_pc_17630 ], [ %tmp8, %dec_label_pc_1763c ]
  ret i32 %v1_17648

; uselistorder directives
  uselistorder i32 -1, { 296, 302, 187, 297, 298, 299, 127, 300, 128, 301, 97, 98, 99, 100, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 188, 189, 0, 190, 165, 303, 304, 191, 129, 305, 192, 1, 101, 306, 307, 170, 308, 193, 3, 2, 194, 195, 130, 380, 131, 132, 338, 133, 339, 118, 340, 326, 327, 328, 134, 295, 135, 341, 342, 4, 196, 197, 198, 343, 199, 5, 200, 6, 201, 171, 344, 10, 202, 203, 9, 11, 345, 8, 204, 205, 102, 7, 206, 103, 104, 105, 106, 207, 208, 209, 114, 311, 312, 12, 313, 136, 346, 137, 138, 336, 139, 347, 140, 335, 141, 348, 142, 325, 143, 144, 314, 145, 349, 146, 334, 147, 315, 117, 186, 13, 330, 210, 148, 350, 149, 382, 150, 316, 151, 317, 152, 318, 153, 329, 154, 384, 155, 351, 156, 381, 157, 332, 158, 331, 159, 352, 160, 161, 162, 383, 211, 212, 213, 214, 14, 15, 112, 115, 16, 17, 353, 116, 113, 167, 169, 215, 20, 216, 21, 217, 319, 218, 219, 107, 22, 220, 221, 222, 223, 224, 225, 226, 19, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 309, 163, 310, 23, 247, 248, 121, 122, 119, 120, 18, 249, 250, 251, 24, 252, 125, 126, 123, 124, 253, 25, 254, 164, 320, 108, 26, 27, 30, 173, 321, 172, 322, 29, 174, 323, 28, 31, 32, 175, 324, 33, 34, 35, 36, 37, 255, 38, 109, 39, 40, 42, 256, 166, 41, 110, 43, 44, 45, 46, 47, 48, 49, 257, 50, 176, 333, 51, 52, 258, 53, 54, 55, 56, 259, 57, 260, 58, 59, 60, 261, 61, 62, 262, 63, 64, 65, 66, 67, 263, 68, 69, 70, 264, 71, 72, 111, 265, 266, 337, 354, 355, 183, 356, 267, 75, 268, 76, 269, 77, 270, 182, 357, 181, 358, 95, 271, 78, 272, 79, 273, 178, 359, 184, 360, 274, 80, 275, 81, 276, 82, 277, 83, 278, 84, 279, 85, 280, 86, 281, 87, 282, 88, 283, 89, 284, 90, 285, 180, 361, 92, 286, 93, 287, 91, 288, 94, 289, 177, 362, 290, 96, 291, 292, 73, 293, 74, 294, 179, 363, 168, 185, 364 }
  uselistorder i32 ()* @function_128f0, { 62, 58, 61, 60, 59, 64, 57, 56, 5, 4, 28, 24, 23, 48, 47, 63, 22, 21, 20, 27, 17, 19, 18, 37, 36, 16, 15, 29, 14, 38, 13, 49, 12, 35, 11, 39, 34, 55, 54, 46, 44, 43, 42, 10, 2, 33, 32, 31, 45, 0, 9, 3, 40, 41, 8, 26, 30, 1, 53, 52, 51, 50, 25, 7, 6 }
  uselistorder i32 1, { 53, 52, 795, 619, 394, 395, 396, 620, 249, 796, 797, 798, 621, 283, 285, 284, 286, 281, 288, 282, 287, 622, 92, 91, 93, 623, 36, 37, 34, 40, 38, 35, 39, 624, 191, 79, 78, 430, 462, 431, 1006, 1007, 1008, 1009, 446, 341, 626, 625, 374, 375, 799, 627, 435, 1128, 436, 800, 1129, 801, 802, 803, 805, 804, 421, 628, 807, 806, 908, 909, 1130, 437, 1131, 1132, 1133, 1134, 1135, 1136, 791, 1137, 1138, 1139, 1140, 1141, 1142, 792, 612, 630, 629, 385, 386, 391, 393, 392, 387, 384, 388, 390, 389, 811, 808, 809, 810, 460, 438, 15, 13, 14, 17, 16, 501, 812, 813, 814, 815, 631, 613, 18, 19, 816, 634, 633, 632, 127, 130, 128, 131, 132, 133, 129, 502, 817, 636, 635, 344, 346, 345, 342, 343, 347, 818, 637, 178, 177, 176, 819, 820, 638, 100, 99, 639, 250, 503, 794, 246, 247, 821, 822, 823, 824, 825, 826, 827, 828, 439, 642, 641, 640, 336, 335, 340, 338, 337, 339, 829, 830, 831, 644, 643, 20, 21, 504, 832, 645, 258, 833, 834, 835, 836, 837, 505, 646, 157, 160, 159, 158, 161, 506, 162, 306, 647, 237, 236, 234, 648, 98, 649, 51, 50, 650, 265, 270, 264, 269, 273, 272, 268, 271, 266, 267, 651, 280, 279, 277, 276, 278, 274, 275, 652, 223, 224, 231, 232, 228, 229, 227, 230, 225, 226, 653, 251, 252, 383, 910, 180, 183, 181, 182, 654, 256, 255, 655, 213, 656, 112, 113, 1143, 507, 1144, 508, 1145, 657, 414, 409, 415, 413, 411, 416, 410, 417, 412, 186, 509, 151, 150, 658, 376, 377, 235, 424, 838, 839, 840, 659, 1011, 662, 661, 660, 179, 663, 1146, 447, 510, 665, 664, 666, 94, 1012, 1015, 1016, 1017, 667, 349, 354, 355, 353, 352, 356, 350, 351, 1018, 1019, 1020, 1021, 668, 361, 367, 360, 366, 365, 359, 369, 368, 363, 357, 362, 358, 364, 1013, 1014, 511, 669, 189, 188, 187, 190, 990, 512, 991, 992, 993, 994, 995, 670, 30, 31, 29, 32, 254, 253, 1022, 1023, 1024, 1025, 1026, 1027, 469, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 514, 1036, 1037, 1038, 1039, 1040, 513, 1041, 1042, 1043, 1044, 1045, 671, 399, 401, 397, 400, 405, 407, 404, 406, 408, 402, 403, 398, 166, 165, 515, 516, 872, 428, 675, 674, 673, 672, 233, 33, 440, 300, 676, 164, 163, 220, 677, 311, 678, 248, 679, 239, 680, 257, 681, 260, 259, 214, 682, 202, 201, 683, 244, 684, 119, 118, 685, 245, 686, 980, 981, 27, 28, 841, 842, 843, 844, 845, 846, 847, 1147, 7, 8, 9, 10, 687, 911, 517, 240, 241, 848, 688, 84, 518, 689, 312, 470, 519, 690, 310, 308, 309, 691, 97, 96, 95, 692, 200, 199, 693, 60, 694, 212, 695, 153, 152, 696, 185, 184, 217, 216, 697, 126, 125, 698, 222, 221, 699, 299, 700, 219, 218, 701, 243, 242, 332, 702, 348, 263, 703, 704, 215, 1046, 418, 1047, 419, 1048, 373, 1049, 1050, 1051, 1052, 423, 1053, 706, 705, 41, 48, 46, 44, 45, 42, 43, 47, 420, 432, 1054, 1055, 1056, 1057, 12, 11, 0, 1058, 1059, 1060, 1061, 1062, 441, 1063, 442, 1064, 708, 707, 370, 372, 371, 912, 913, 914, 709, 117, 116, 114, 115, 1065, 1066, 1067, 433, 448, 1, 422, 500, 1068, 293, 292, 294, 295, 1069, 1070, 1071, 520, 1072, 111, 996, 1074, 1073, 1075, 307, 1076, 873, 198, 1077, 710, 83, 82, 81, 80, 1078, 711, 305, 304, 303, 302, 521, 867, 522, 868, 473, 869, 449, 533, 870, 874, 472, 875, 854, 534, 535, 855, 850, 524, 849, 851, 852, 853, 527, 525, 429, 856, 526, 857, 858, 528, 859, 860, 531, 861, 862, 529, 863, 864, 530, 865, 866, 532, 871, 876, 877, 878, 536, 879, 880, 881, 537, 882, 793, 885, 884, 523, 883, 886, 887, 538, 888, 889, 890, 897, 898, 425, 539, 614, 722, 721, 720, 719, 718, 717, 716, 615, 715, 714, 713, 712, 101, 103, 102, 108, 109, 104, 105, 110, 107, 106, 891, 892, 540, 893, 894, 541, 895, 896, 171, 170, 169, 175, 172, 173, 174, 168, 167, 542, 543, 724, 723, 380, 381, 378, 379, 382, 982, 726, 725, 88, 89, 87, 86, 85, 90, 298, 296, 297, 546, 474, 899, 900, 475, 901, 544, 545, 547, 902, 903, 548, 549, 550, 551, 552, 553, 554, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 618, 729, 728, 727, 23, 24, 26, 25, 555, 426, 556, 740, 22, 559, 558, 557, 904, 742, 741, 290, 291, 560, 561, 562, 905, 906, 563, 461, 564, 907, 427, 565, 746, 745, 744, 743, 262, 261, 915, 921, 3, 450, 916, 566, 917, 2, 918, 463, 919, 451, 452, 920, 922, 923, 464, 924, 616, 750, 749, 617, 748, 747, 301, 983, 476, 477, 984, 4, 5, 6, 925, 926, 927, 434, 465, 466, 928, 929, 930, 931, 932, 568, 933, 567, 934, 569, 935, 936, 937, 754, 753, 752, 751, 205, 204, 207, 210, 208, 209, 203, 206, 211, 938, 939, 940, 570, 571, 756, 755, 56, 58, 59, 55, 57, 941, 942, 572, 943, 944, 945, 946, 573, 947, 574, 479, 478, 575, 948, 757, 194, 195, 197, 196, 192, 193, 949, 576, 950, 482, 480, 481, 759, 758, 333, 334, 951, 952, 953, 577, 954, 578, 579, 955, 483, 956, 760, 72, 73, 76, 74, 77, 71, 70, 75, 957, 958, 959, 580, 960, 581, 485, 484, 582, 961, 583, 962, 761, 63, 66, 67, 69, 68, 61, 65, 64, 62, 963, 964, 965, 966, 967, 968, 584, 969, 585, 970, 586, 490, 489, 587, 971, 486, 972, 487, 973, 488, 974, 767, 766, 765, 764, 763, 762, 143, 146, 147, 149, 148, 144, 145, 975, 976, 977, 588, 493, 492, 589, 978, 491, 979, 768, 327, 328, 330, 331, 326, 329, 324, 325, 985, 986, 987, 590, 496, 495, 591, 988, 494, 989, 773, 772, 771, 770, 769, 135, 139, 140, 141, 142, 134, 138, 137, 136, 997, 497, 592, 774, 154, 155, 156, 998, 999, 453, 593, 1002, 594, 595, 1003, 1000, 1001, 1004, 1005, 121, 122, 120, 124, 123, 1079, 775, 289, 1010, 238, 1080, 49, 1081, 601, 1082, 1083, 599, 1084, 600, 1085, 1086, 604, 1087, 1088, 468, 602, 1089, 603, 1090, 1091, 499, 1092, 1093, 456, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 444, 1101, 605, 1102, 606, 607, 1103, 1104, 1105, 1106, 457, 1107, 1108, 458, 1109, 1110, 459, 1111, 445, 455, 454, 1112, 1113, 598, 1114, 1115, 596, 1116, 443, 597, 498, 1117, 1119, 1120, 1118, 608, 1121, 609, 1122, 610, 1123, 1124, 790, 471, 1125, 1126, 467, 611, 1127, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 314, 315, 316, 321, 322, 318, 323, 317, 313, 319, 320, 788, 789, 54 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_17640, { 1, 0 }
}

define i32 @function_1764c() local_unnamed_addr {
entry:
  %v3_17650 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_17650)
  %v31_17658 = load i32, i32* @r0, align 4
  ret i32 %v31_17658

; uselistorder directives
  uselistorder i32* @r0, { 29, 25, 16, 55, 54, 202, 21, 4, 5, 277, 6, 20, 7, 56, 0, 57, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 1, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 58, 19, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 22, 27, 162, 163, 11, 12, 26, 304, 306, 307, 44, 45, 46, 47, 48, 49, 50, 51, 10, 23, 73, 74, 305, 75, 210, 14, 42, 43, 211, 2, 212, 213, 214, 209, 194, 39, 195, 196, 197, 40, 198, 199, 13, 222, 223, 215, 216, 217, 218, 219, 220, 221, 80, 81, 9, 82, 8, 18, 164, 165, 166, 167, 200, 28, 15, 17, 224, 24, 225, 226, 227, 228, 229, 230, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 78, 146, 38, 76, 77, 79, 147, 149, 150, 151, 152, 153, 154, 148, 31, 32, 33, 34, 155, 35, 36, 156, 157, 158, 159, 160, 161, 37, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 190, 191, 3, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 201, 41, 203, 204, 205, 206, 231, 207, 232, 208, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 30 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 44, 45, 46, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 47, 58 }
  uselistorder i32 0, { 563, 564, 573, 574, 575, 576, 577, 87, 578, 579, 580, 0, 581, 267, 46, 582, 313, 583, 584, 585, 297, 298, 565, 566, 571, 1, 88, 89, 936, 937, 938, 939, 121, 122, 940, 586, 123, 90, 1161, 1162, 1163, 268, 587, 588, 589, 269, 1164, 47, 270, 1165, 1166, 68, 38, 39, 590, 55, 2, 80, 81, 757, 56, 57, 58, 758, 759, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1172, 1173, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 29, 1192, 1193, 1194, 1195, 1196, 30, 1197, 1198, 1199, 31, 1200, 1201, 1202, 32, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1227, 1228, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 33, 1246, 1247, 1248, 1249, 1250, 34, 1251, 1252, 1253, 1254, 1255, 35, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 124, 591, 532, 592, 593, 594, 595, 596, 314, 315, 597, 598, 91, 92, 93, 599, 600, 604, 601, 602, 603, 271, 285, 605, 606, 94, 125, 609, 607, 608, 272, 610, 95, 611, 612, 3, 4, 96, 613, 557, 558, 316, 559, 614, 615, 616, 48, 49, 617, 618, 619, 126, 620, 621, 622, 623, 624, 317, 625, 626, 627, 628, 629, 630, 97, 631, 632, 633, 634, 5, 6, 127, 129, 635, 128, 636, 130, 637, 98, 638, 643, 644, 639, 640, 641, 646, 647, 648, 131, 649, 650, 651, 652, 653, 642, 645, 654, 99, 567, 568, 569, 1271, 1272, 914, 949, 950, 572, 760, 761, 299, 762, 318, 560, 319, 561, 951, 952, 953, 132, 954, 763, 764, 765, 562, 570, 100, 133, 1273, 1274, 955, 956, 320, 1278, 1279, 321, 1280, 1281, 134, 274, 1282, 1283, 322, 50, 1284, 1285, 323, 1292, 1293, 1296, 512, 273, 1297, 324, 1294, 1295, 1275, 1276, 533, 135, 255, 655, 657, 656, 136, 658, 659, 660, 325, 661, 82, 957, 73, 958, 138, 137, 959, 101, 1277, 102, 327, 328, 1287, 326, 103, 531, 104, 139, 965, 966, 967, 968, 969, 140, 970, 971, 972, 973, 974, 975, 976, 141, 960, 329, 961, 962, 330, 963, 964, 105, 915, 331, 142, 916, 917, 918, 919, 920, 106, 151, 143, 149, 148, 145, 147, 152, 144, 150, 146, 977, 978, 1002, 1003, 107, 979, 980, 156, 154, 155, 981, 982, 162, 161, 118, 153, 983, 984, 985, 986, 987, 988, 289, 288, 300, 332, 989, 990, 991, 51, 992, 158, 157, 159, 160, 117, 993, 994, 275, 995, 996, 83, 997, 998, 999, 1000, 1001, 7, 8, 683, 684, 52, 108, 9, 301, 333, 1004, 1005, 898, 1006, 871, 1007, 750, 1008, 685, 1009, 831, 686, 941, 1298, 1299, 59, 109, 766, 767, 768, 163, 662, 663, 164, 769, 774, 775, 776, 777, 165, 302, 166, 290, 291, 334, 770, 167, 771, 772, 110, 778, 1010, 1288, 687, 688, 689, 773, 1291, 1011, 1286, 798, 779, 1012, 921, 690, 335, 1289, 76, 1290, 10, 1013, 1014, 1015, 1016, 77, 1017, 168, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 169, 513, 534, 514, 515, 1025, 1026, 1027, 1028, 1029, 1030, 11, 1031, 1032, 78, 1033, 1034, 1035, 1036, 1037, 170, 1038, 516, 535, 517, 518, 1039, 536, 119, 171, 1040, 1041, 1042, 74, 286, 1043, 1044, 40, 111, 537, 276, 13, 12, 172, 1045, 173, 538, 14, 277, 174, 175, 176, 41, 177, 336, 691, 780, 781, 782, 1047, 1046, 1048, 1049, 1050, 1051, 36, 178, 1052, 1053, 1054, 179, 69, 70, 337, 311, 312, 1055, 181, 180, 182, 1056, 183, 1057, 1058, 184, 922, 923, 338, 185, 186, 187, 1059, 188, 1060, 189, 190, 692, 191, 693, 694, 695, 699, 668, 676, 677, 679, 664, 71, 42, 258, 259, 665, 678, 666, 539, 667, 669, 540, 670, 541, 671, 542, 672, 543, 673, 544, 674, 545, 675, 680, 681, 339, 682, 79, 696, 511, 697, 340, 698, 279, 278, 700, 701, 702, 703, 193, 192, 704, 705, 706, 546, 256, 707, 62, 63, 257, 708, 60, 61, 341, 710, 711, 519, 712, 713, 714, 715, 716, 342, 717, 718, 719, 120, 530, 720, 721, 722, 529, 723, 724, 343, 725, 726, 729, 730, 731, 194, 727, 195, 728, 16, 15, 196, 709, 899, 900, 528, 510, 732, 344, 733, 735, 197, 736, 737, 738, 739, 740, 741, 742, 199, 198, 743, 345, 744, 346, 745, 347, 734, 746, 292, 747, 348, 748, 378, 379, 349, 749, 350, 752, 547, 202, 201, 200, 281, 351, 751, 280, 753, 754, 755, 43, 756, 203, 352, 75, 783, 784, 785, 786, 284, 787, 788, 789, 283, 790, 791, 792, 793, 204, 794, 796, 795, 112, 113, 205, 282, 207, 206, 797, 208, 209, 53, 210, 799, 800, 84, 85, 54, 801, 211, 212, 260, 802, 214, 803, 215, 213, 353, 804, 805, 807, 806, 808, 216, 809, 810, 303, 811, 812, 813, 217, 218, 814, 219, 815, 220, 816, 221, 817, 818, 72, 819, 820, 222, 821, 822, 823, 223, 825, 224, 261, 826, 824, 827, 828, 829, 225, 830, 832, 227, 834, 835, 226, 833, 836, 114, 355, 356, 837, 838, 357, 358, 839, 354, 840, 841, 228, 842, 843, 229, 230, 844, 845, 115, 846, 847, 17, 18, 19, 20, 848, 849, 231, 305, 850, 851, 359, 852, 360, 853, 361, 854, 362, 855, 363, 856, 364, 857, 304, 858, 365, 859, 860, 861, 232, 863, 864, 233, 262, 865, 862, 866, 867, 868, 21, 22, 23, 869, 234, 870, 872, 873, 44, 874, 235, 875, 876, 236, 263, 878, 877, 366, 879, 881, 882, 883, 367, 884, 24, 25, 26, 880, 27, 28, 885, 237, 886, 887, 238, 890, 891, 892, 264, 893, 888, 889, 895, 894, 896, 239, 897, 901, 902, 240, 904, 905, 906, 241, 368, 908, 907, 903, 910, 911, 909, 912, 242, 913, 293, 924, 369, 925, 45, 926, 86, 927, 928, 929, 294, 930, 370, 931, 932, 933, 37, 287, 934, 935, 1061, 243, 1062, 942, 244, 943, 245, 1063, 944, 945, 946, 947, 1064, 948, 1065, 1066, 1067, 1068, 246, 247, 371, 1069, 1070, 520, 521, 522, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 548, 1084, 1085, 1086, 1087, 1088, 376, 1089, 1090, 549, 1091, 1092, 1093, 523, 1094, 524, 248, 249, 250, 1095, 1096, 1097, 1098, 550, 1099, 1100, 116, 1101, 1102, 551, 1103, 251, 1104, 1105, 1106, 552, 372, 373, 1107, 1108, 553, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 374, 1123, 1118, 1119, 1120, 1121, 554, 1122, 555, 1124, 375, 1125, 1126, 1127, 1128, 1129, 1130, 525, 1132, 1133, 1134, 1135, 1136, 295, 1137, 1140, 1141, 1138, 1139, 253, 252, 1142, 1143, 1144, 1145, 254, 1146, 1147, 265, 1148, 64, 65, 266, 1149, 66, 67, 377, 1150, 1131, 1151, 508, 509, 526, 296, 1152, 527, 1153, 1154, 1155, 1156, 1157, 306, 1158, 307, 1159, 308, 1160, 309, 556, 310, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314 }
  uselistorder i32* @r4, { 44, 57, 58, 59, 7, 60, 61, 62, 8, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 787, 788, 82, 83, 9, 1, 84, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 10, 85, 86, 87, 88, 89, 90, 91, 92, 93, 11, 94, 95, 98, 99, 100, 101, 45, 102, 103, 104, 105, 106, 107, 96, 97, 46, 47, 108, 109, 12, 110, 13, 111, 14, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 15, 132, 133, 134, 16, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 53, 54, 55, 56, 48, 49, 623, 624, 294, 295, 805, 806, 807, 625, 626, 810, 815, 816, 817, 818, 819, 820, 821, 808, 147, 148, 149, 627, 628, 629, 809, 811, 814, 150, 151, 152, 153, 630, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 17, 649, 650, 651, 652, 631, 632, 633, 634, 635, 636, 558, 559, 560, 561, 562, 563, 564, 565, 566, 18, 567, 568, 569, 570, 571, 572, 573, 574, 575, 653, 675, 676, 677, 678, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 36, 667, 668, 0, 669, 670, 671, 672, 673, 674, 182, 183, 184, 812, 813, 529, 530, 478, 479, 296, 297, 298, 299, 300, 301, 302, 154, 155, 156, 303, 304, 305, 6, 306, 307, 308, 309, 310, 311, 312, 679, 680, 681, 2, 682, 313, 314, 683, 684, 19, 685, 686, 687, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 688, 689, 690, 691, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 219, 220, 221, 222, 179, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 180, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 250, 251, 252, 3, 253, 244, 245, 246, 247, 248, 249, 237, 238, 531, 532, 533, 534, 535, 181, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 35, 287, 286, 34, 288, 289, 290, 291, 292, 4, 293, 315, 20, 5, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 341, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 21, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 22, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 23, 413, 24, 414, 25, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 26, 441, 27, 442, 28, 443, 29, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 30, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 536, 537, 538, 539, 31, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 692, 693, 694, 622, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 32, 726, 37, 727, 728, 42, 729, 731, 732, 733, 41, 730, 33, 734, 735, 736, 737, 738, 739, 740, 40, 741, 742, 743, 39, 744, 745, 746, 38, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 43, 786 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16* @__decompiler_undefined_function_3() local_unnamed_addr

declare i8 @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
