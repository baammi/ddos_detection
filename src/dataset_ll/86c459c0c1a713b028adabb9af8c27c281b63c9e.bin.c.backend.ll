source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1a020.2 = global i32 1
@global_var_1a0b8.3 = global i32* @global_var_1a020.2
@global_var_1a0c0.4 = global i32 0
@global_var_1a0c4.5 = global i32 35612
@global_var_1a0c8.6 = global i32 35612
@global_var_1a0cc.7 = global i32 35612
@global_var_1a0d0.8 = global i32 35612
@global_var_1a0d4.9 = global i32 35612
@global_var_1a0d8.10 = global i32 35612
@global_var_1a0dc.11 = global i32 35612
@global_var_1a0e0.12 = global i32 35612
@global_var_1a0e4.13 = global i32 35612
@global_var_1a0e8.14 = global i32 35612
@global_var_1a0ec.15 = global i32 35612
@global_var_1a0f0.16 = global i32 35612
@global_var_1a0f4.17 = global i32 35612
@global_var_1a0f8.18 = global i32 35612
@global_var_1a0fc.19 = global i32 35612
@global_var_1a100.20 = global i32 35612
@global_var_1a104.21 = global i32 35612
@global_var_1a108.22 = global i32 35612
@global_var_1a110.24 = global i32 35612
@global_var_1a114.25 = global i32 35612
@global_var_1a118.26 = global i32 35612
@global_var_1a11c.27 = global i32 35612
@global_var_1a120.28 = global i32 35612
@global_var_1a124.29 = global i32 35612
@global_var_1a128.30 = global i32 35612
@global_var_1a12c.31 = global i32 35612
@global_var_1a130.32 = global i32 35612
@global_var_1a134.33 = global i32 35612
@global_var_1a138.34 = global i32 35612
@global_var_1a13c.35 = global i32 35612
@global_var_1a140.36 = global i32 35612
@global_var_1a144.37 = global i32 35612
@global_var_1a148.38 = global i32 35612
@global_var_1a14c.39 = global i32 35612
@global_var_1a150.40 = global i32 35612
@global_var_1a154.41 = global i32 35612
@global_var_1a158.42 = global i32 35612
@global_var_1a160.44 = global i32 35612
@global_var_1a164.45 = global i32 35612
@global_var_1a168.46 = global i32 35612
@global_var_1a16c.47 = global i32 35612
@global_var_1a170.48 = global i32 35612
@global_var_1a174.49 = global i32 35612
@global_var_1a178.50 = global i32 35612
@global_var_1a17c.51 = global i32 35612
@global_var_1a180.52 = global i32 35612
@global_var_1a184.53 = global i32 35612
@global_var_1a018.57 = global i32 0
@global_var_1a190.58 = global i32* @global_var_1a018.57
@global_var_1a1ac.64 = global i32 0
@global_var_eb60.70 = constant i32 -382906384
@global_var_1a1c8.75 = global i32 0
@global_var_8fe0.76 = constant i32 -352321546
@global_var_8d58.77 = constant i32 -493894144
@global_var_b198.83 = constant i32 -382906384
@global_var_b65c.85 = constant i32 -382906384
@global_var_96a4.87 = constant i32 -382906384
@global_var_d678.89 = constant i32 -382906384
@global_var_cf04.91 = constant i32 -382906384
@global_var_c688.93 = constant i32 -382906384
@global_var_aa7c.96 = constant i32 -382906384
@global_var_a300.98 = constant i32 -382906384
@global_var_1a220.101 = global i32 0
@global_var_11db8.113 = constant i32 47
@global_var_1a228.115 = global i32 0
@global_var_1a1cc.117 = global i32 0
@global_var_ea20.121 = constant i32 -382910448
@global_var_1a1a0.123 = global i32 71648
@global_var_11dbc.125 = constant [15 x i8] c"159.89.179.146\00"
@global_var_1a230.128 = local_unnamed_addr global i32 0
@global_var_1a22f.129 = local_unnamed_addr global i32 0
@global_var_1a22e.130 = local_unnamed_addr global i32 0
@global_var_1a1d0.132 = global i32 0
@global_var_1a22d.138 = local_unnamed_addr global i32 0
@global_var_11dcc.142 = constant i32 10
@global_var_1a198.144 = global i32 -1
@global_var_1a19c.146 = global i32 -1
@global_var_8d4c.149 = constant i32 -493894144
@global_var_117e0.150 = constant i32 -382910224
@global_var_11dd0.152 = constant i32 16777216
@global_var_1a1d8.154 = global i32 0
@global_var_1a1e4.156 = global i32 0
@global_var_1a1dc.158 = global i32 0
@global_var_1a1e0.160 = global i32 0
@global_var_1a21c.174 = global i32 0
@global_var_1a1e8.176 = global i32 0
@global_var_1a214.178 = global i32 0
@global_var_1a244.183 = global i32 0
@global_var_1a23c.187 = global i32 0
@global_var_1a240.189 = global i32 0
@global_var_1a1ec.191 = global i32 0
@global_var_1a1ef.192 = local_unnamed_addr global i32 0
@global_var_1a1ee.193 = local_unnamed_addr global i32 0
@global_var_1a200.195 = global i32 0
@global_var_1a1f1.197 = local_unnamed_addr global i32 0
@global_var_1a1f5.198 = local_unnamed_addr global i32 0
@global_var_1a1f4.199 = local_unnamed_addr global i32 0
@global_var_1a203.200 = local_unnamed_addr global i32 0
@global_var_1a201.201 = local_unnamed_addr global i32 0
@global_var_1a1f0.202 = local_unnamed_addr global i32 0
@global_var_1a202.203 = local_unnamed_addr global i32 0
@global_var_1a20f.205 = local_unnamed_addr global i32 0
@global_var_1a20e.206 = local_unnamed_addr global i32 0
@global_var_11e5c.208 = constant [5 x i8] c"&;; \00"
@global_var_11e60.210 = constant i32 536542976
@global_var_11dd8.212 = constant [5 x i8] c"5:?;\00"
@global_var_11de0.214 = constant [9 x i8] c"<!: acam\00"
@global_var_11dec.216 = constant [7 x i8] c" 18:1 \00"
@global_var_11df4.218 = constant [8 x i8] c"0125!8 \00"
@global_var_11dfc.220 = constant [9 x i8] c"$5''#;&0\00"
@global_var_11e08.222 = constant [6 x i8] c"509=:\00"
@global_var_11e10.224 = constant [6 x i8] c"\22=.,\22\00"
@global_var_11e18.226 = constant [8 x i8] c"'!$$;& \00"
@global_var_11e20.228 = constant i32 423502179
@global_var_11e30.230 = constant [6 x i8] c"efg`a\00"
@global_var_11e38.232 = constant [5 x i8] c"!'1&\00"
@global_var_11e40.234 = constant i32 943467547
@global_var_11e4c.236 = constant i32 322070023
@global_var_1a1f8.237 = local_unnamed_addr global i32 0
@global_var_1a1f6.239 = local_unnamed_addr global i32 0
@global_var_1a1f7.240 = local_unnamed_addr global i32 0
@global_var_1a210.242 = local_unnamed_addr global i32 0
@global_var_1a211.243 = local_unnamed_addr global i32 0
@global_var_11e58.249 = constant [3 x i8] c"\0D\0A\00"
@global_var_11e6a.251 = constant i32 2096127
@global_var_11e61.253 = constant i32 2095871
@global_var_1a24c.256 = global i32 0
@global_var_1a1a4.259 = global i32 -555811921
@global_var_11e70.264 = constant [3 x i8] c"PT\00"
@global_var_1a254.265 = local_unnamed_addr global i32 0
@global_var_1a258.266 = local_unnamed_addr global i32 0
@global_var_1a259.267 = local_unnamed_addr global i32 0
@global_var_11e74.269 = constant i32 59987
@global_var_1a25c.270 = local_unnamed_addr global i32 0
@global_var_1a260.271 = local_unnamed_addr global i32 0
@global_var_1a261.272 = local_unnamed_addr global i32 0
@global_var_11e78.274 = constant i32 825375261
@global_var_1a268.275 = local_unnamed_addr global i32 0
@global_var_1a264.276 = local_unnamed_addr global i32 0
@global_var_1a269.277 = local_unnamed_addr global i32 0
@global_var_11e8c.279 = constant [7 x i8] c"'<188T\00"
@global_var_1a26c.280 = local_unnamed_addr global i32 0
@global_var_1a270.281 = local_unnamed_addr global i32 0
@global_var_1a271.282 = local_unnamed_addr global i32 0
@global_var_11e94.284 = constant [8 x i8] c"1:5681T\00"
@global_var_1a274.285 = local_unnamed_addr global i32 0
@global_var_1a278.286 = local_unnamed_addr global i32 0
@global_var_1a279.287 = local_unnamed_addr global i32 0
@global_var_11e9c.289 = constant [8 x i8] c"'-' 19T\00"
@global_var_1a27c.290 = local_unnamed_addr global i32 0
@global_var_1a280.291 = local_unnamed_addr global i32 0
@global_var_1a281.292 = local_unnamed_addr global i32 0
@global_var_11ea4.294 = constant [4 x i8] c"'<T\00"
@global_var_1a288.295 = local_unnamed_addr global i32 0
@global_var_1a284.296 = local_unnamed_addr global i32 0
@global_var_1a289.297 = local_unnamed_addr global i32 0
@global_var_11ea8.299 = constant i32 977090171
@global_var_1a290.300 = local_unnamed_addr global i32 0
@global_var_1a28c.301 = local_unnamed_addr global i32 0
@global_var_1a291.302 = local_unnamed_addr global i32 0
@global_var_11ebc.304 = constant i32 470227742
@global_var_1a298.305 = local_unnamed_addr global i32 0
@global_var_1a294.306 = local_unnamed_addr global i32 0
@global_var_1a299.307 = local_unnamed_addr global i32 0
@global_var_11ed8.309 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1a2a0.310 = local_unnamed_addr global i32 0
@global_var_1a29c.311 = local_unnamed_addr global i32 0
@global_var_1a2a1.312 = local_unnamed_addr global i32 0
@global_var_11ee4.314 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1a2a4.315 = local_unnamed_addr global i32 0
@global_var_1a2a8.316 = local_unnamed_addr global i32 0
@global_var_1a2a9.317 = local_unnamed_addr global i32 0
@global_var_11ef8.319 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1a2b0.320 = local_unnamed_addr global i32 0
@global_var_1a2ac.321 = local_unnamed_addr global i32 0
@global_var_1a2b1.322 = local_unnamed_addr global i32 0
@global_var_11f10.324 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1a2b4.325 = local_unnamed_addr global i32 0
@global_var_1a2b8.326 = local_unnamed_addr global i32 0
@global_var_1a2b9.327 = local_unnamed_addr global i32 0
@global_var_11f18.329 = constant [6 x i8] c"{1,1T\00"
@global_var_1a2c0.330 = local_unnamed_addr global i32 0
@global_var_1a2bc.331 = local_unnamed_addr global i32 0
@global_var_1a2c1.332 = local_unnamed_addr global i32 0
@global_var_11f20.334 = constant [5 x i8] c"{20T\00"
@global_var_1a2c8.335 = local_unnamed_addr global i32 0
@global_var_1a2c4.336 = local_unnamed_addr global i32 0
@global_var_1a2c9.337 = local_unnamed_addr global i32 0
@global_var_11f28.339 = constant [7 x i8] c"{95$'T\00"
@global_var_1a2cc.340 = local_unnamed_addr global i32 0
@global_var_1a2d0.341 = local_unnamed_addr global i32 0
@global_var_1a2d1.342 = local_unnamed_addr global i32 0
@global_var_11f30.344 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1a2d4.345 = local_unnamed_addr global i32 0
@global_var_1a2d8.346 = local_unnamed_addr global i32 0
@global_var_1a2d9.347 = local_unnamed_addr global i32 0
@global_var_11f40.349 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1a334.350 = local_unnamed_addr global i32 0
@global_var_1a338.351 = local_unnamed_addr global i32 0
@global_var_1a339.352 = local_unnamed_addr global i32 0
@global_var_11f4c.354 = constant [8 x i8] c"z5:=91T\00"
@global_var_1a33c.355 = local_unnamed_addr global i32 0
@global_var_1a340.356 = local_unnamed_addr global i32 0
@global_var_11f54.358 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1a2dc.359 = local_unnamed_addr global i32 0
@global_var_1a2e0.360 = local_unnamed_addr global i32 0
@global_var_1a2e1.361 = local_unnamed_addr global i32 0
@global_var_11f68.363 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1a2e4.364 = local_unnamed_addr global i32 0
@global_var_1a2e8.365 = local_unnamed_addr global i32 0
@global_var_1a2e9.366 = local_unnamed_addr global i32 0
@global_var_11ff0.368 = constant i32 557516544
@global_var_1a2f0.369 = local_unnamed_addr global i32 0
@global_var_1a2ec.370 = local_unnamed_addr global i32 0
@global_var_1a2f1.371 = local_unnamed_addr global i32 0
@global_var_11f74.373 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1a2f8.374 = local_unnamed_addr global i32 0
@global_var_1a2f4.375 = local_unnamed_addr global i32 0
@global_var_1a2f9.376 = local_unnamed_addr global i32 0
@global_var_11f88.378 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1a300.379 = local_unnamed_addr global i32 0
@global_var_1a2fc.380 = local_unnamed_addr global i32 0
@global_var_1a301.381 = local_unnamed_addr global i32 0
@global_var_11f98.383 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1a304.384 = local_unnamed_addr global i32 0
@global_var_1a308.385 = local_unnamed_addr global i32 0
@global_var_1a309.386 = local_unnamed_addr global i32 0
@global_var_11fa8.388 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1a310.389 = local_unnamed_addr global i32 0
@global_var_1a30c.390 = local_unnamed_addr global i32 0
@global_var_1a311.391 = local_unnamed_addr global i32 0
@global_var_11fbc.393 = constant [9 x i8] c"$662*7!E\00"
@global_var_1a314.394 = local_unnamed_addr global i32 0
@global_var_1a318.395 = local_unnamed_addr global i32 0
@global_var_1a319.396 = local_unnamed_addr global i32 0
@global_var_11fc8.398 = constant [6 x i8] c";3=:T\00"
@global_var_1a320.399 = local_unnamed_addr global i32 0
@global_var_1a31c.400 = local_unnamed_addr global i32 0
@global_var_1a321.401 = local_unnamed_addr global i32 0
@global_var_11fd0.403 = constant [7 x i8] c"1: 1&T\00"
@global_var_1a324.404 = local_unnamed_addr global i32 0
@global_var_1a328.405 = local_unnamed_addr global i32 0
@global_var_1a329.406 = local_unnamed_addr global i32 0
@global_var_11fd8.408 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1a331.409 = local_unnamed_addr global i32 0
@global_var_1a32c.410 = local_unnamed_addr global i32 0
@global_var_1a330.411 = local_unnamed_addr global i32 0
@global_var_1a010.413 = global i32 0
@global_var_1a00c.414 = global i32 -1
@global_var_1a1a8.55 = external global i8*
@global_var_1a1c4.73 = external global i8*
@global_var_1a1c5.81 = global i8 0
@global_var_1a224.119 = external global i8*
@global_var_1a22c.127 = global %sockaddr* null
@global_var_ea08.134 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1a1d4.148 = external global i8*
@global_var_1a218.180 = external global i8*
@global_var_1a219.181 = local_unnamed_addr global i8 0
@global_var_1a20c.196 = local_unnamed_addr global i8 0
@global_var_1a20d.204 = local_unnamed_addr global i8 0
@global_var_1a204.241 = local_unnamed_addr global i8 0
@global_var_1a1fc.238 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b04() local_unnamed_addr {
entry:
  %v3_8b08 = load i32, i32* @r4, align 4
  %v0_8b10 = call i32 @function_8dfc()
  %v1_8b14 = call i32 @function_11d68(i32 %v0_8b10)
  call void @__pseudo_branch(i32 %v3_8b08)
  ret i32 %v1_8b14
}

define i32 @function_8b1c(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b28 = load i32, i32* @global_var_1a0c0.4, align 4
  call void @__pseudo_branch(i32 %v3_8b28)
  %v0_8b2c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b2c, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v7_8b2c = load i32, i32* @r0, align 4
  ret i32 %v7_8b2c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b38 = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b38
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b44 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b44
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b50 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b50
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b5c = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b5c
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8b68 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8b68
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b74 = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b74
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8b80 = call i32 @getpid()
  ret i32 %v4_8b80
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8b8c = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8b8c
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b98 = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b98
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8ba4 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8ba4
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bb0 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bb0
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8bbc = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8bbc
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8bc8 = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8bc8
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8bd4 = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8bd4
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8be0 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8be0
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8bec = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8bec
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8bf8 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8bf8
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c04 = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c04
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c1c = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c1c
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c28 = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c28
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c34 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c34
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c40 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c40
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8c4c = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8c4c
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8c58 = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8c58
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8c64 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8c64
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8c70 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8c70
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8c7c = call i32 @unlink(i8* %name)
  ret i32 %v6_8c7c
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8c88 = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8c88
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8c94 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8c94
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8ca0 = call i32 @fork()
  ret i32 %v4_8ca0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8cac = call i32 @__uClibc_main()
  ret i32 %v4_8cac
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8cb8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8cb8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8cc4 = call i32 @getppid()
  ret i32 %v4_8cc4
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8cd0 = call i32 @time(i32* %timer)
  ret i32 %v6_8cd0
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8cdc = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8cdc
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8ce8 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8ce8
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8cf4 = call i32* @__errno_location()
  ret i32* %v4_8cf4
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8d0c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8d0c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d18 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d18
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d24 = call i32 @clock()
  ret i32 %v4_8d24
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d30 = call i32 @setsid()
  ret i32 %v4_8d30
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d3c = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d3c
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8d48 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8d48
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8d54 = call i32 @close(i32 %fd)
  ret i32 %v5_8d54
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8d6c = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8d6c
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8d78 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8d78
}

define i32 @function_8d7c() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8d7c = load i32, i32* @r4, align 4
  store i32 %v3_8d7c, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1a1a8.55 to i32), i32* %r5.global-to-local, align 4
  %v2_8d84 = load i8, i8* bitcast (i8** @global_var_1a1a8.55 to i8*), align 4
  %v2_8d88 = icmp eq i8 %v2_8d84, 0
  br i1 %v2_8d88, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8d8c = load i32, i32* @r0, align 4
  ret i32 %v12_8d8c

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1a190.58 to i32), i32* %r4.global-to-local, align 4
  %v2_8d94 = load i32, i32* bitcast (i32** @global_var_1a190.58 to i32*), align 4
  store i32 %v2_8d94, i32* %r2.global-to-local, align 4
  %v2_8d9c = icmp eq i32 %v2_8d94, 0
  br i1 %v2_8d9c, label %bb8, label %dec_label_pc_8da4.preheader

dec_label_pc_8da4.preheader:                      ; preds = %bb7
  %v1_8da49 = add i32 %v2_8d94, 4
  store i32 %v1_8da49, i32* bitcast (i32** @global_var_1a190.58 to i32*), align 4
  call void @__pseudo_branch(i32 %v2_8d94)
  %v2_8db411 = load i32, i32* bitcast (i32** @global_var_1a190.58 to i32*), align 4
  store i32 %v2_8db411, i32* %r2.global-to-local, align 4
  %v2_8dbc12 = icmp eq i32 %v2_8db411, 0
  br i1 %v2_8dbc12, label %.loopexit, label %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge

dec_label_pc_8da4.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8da4.preheader, %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge
  %v2_8db413 = phi i32 [ %v2_8db4, %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge ], [ %v2_8db411, %dec_label_pc_8da4.preheader ]
  %v1_8da8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_8da4 = add i32 %v2_8db413, 4
  %v2_8da8 = inttoptr i32 %v1_8da8.pre to i32*
  store i32 %v1_8da4, i32* %v2_8da8, align 4
  %v0_8db0 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8db0)
  %v2_8db4 = load i32, i32* bitcast (i32** @global_var_1a190.58 to i32*), align 4
  store i32 %v2_8db4, i32* %r2.global-to-local, align 4
  %v2_8dbc = icmp eq i32 %v2_8db4, 0
  br i1 %v2_8dbc, label %.loopexit, label %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge

.loopexit:                                        ; preds = %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge, %dec_label_pc_8da4.preheader
  %v2_8ddc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8ddc = phi i32 [ %v2_8ddc.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1a1a8.55 to i32), %bb7 ]
  %v3_8ddc = inttoptr i32 %v2_8ddc to i8*
  store i8 1, i8* %v3_8ddc, align 1
  %v2_8de0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8de0, i32* %r4.global-to-local, align 4
  %v11_8de0 = load i32, i32* @r0, align 4
  ret i32 %v11_8de0

; uselistorder directives
  uselistorder i32 %v2_8db4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* bitcast (i32** @global_var_1a190.58 to i32*), { 2, 0, 1, 3 }
  uselistorder i32** @global_var_1a190.58, { 1, 0 }
  uselistorder i8** @global_var_1a1a8.55, { 1, 0 }
  uselistorder label %dec_label_pc_8da4.dec_label_pc_8da4_crit_edge, { 1, 0 }
}

define i32 @function_8df0(i32 %arg1) local_unnamed_addr {
dec_label_pc_8df0:
  %v0_8df0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8df0, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8df0
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8df0, %bb
  %v5_8df8 = load i32, i32* @r0, align 4
  ret i32 %v5_8df8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8dfc() local_unnamed_addr {
.thread:
  %v2_8e1c = load i32, i32* inttoptr (i32 106524 to i32*), align 4
  %v2_8e20 = icmp eq i32 %v2_8e1c, 0
  br i1 %v2_8e20, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 106524

bb2:                                              ; preds = %.thread
  ret i32 106524

; uselistorder directives
  uselistorder i32 106524, { 1, 0, 2 }
}

define i32 @function_8e54() local_unnamed_addr {
dec_label_pc_8e54:
  %v5_8e58 = load i32, i32* @r0, align 4
  ret i32 %v5_8e58
}

; Function Attrs: noreturn
define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8e64 = ptrtoint i32* %stack_var_4 to i32
  %v7_8e84 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_eb60.70 to i32), i32 %arg2, i32 %v4_8e64, i32 35588, i32 73124, i32 %arg1, i32 %v4_8e64)
  call void @abort()
  unreachable
}

define i32 @function_8e98(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8e98:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8e98 = urem i32 %arg1, 256
  %v2_8e9c = icmp eq i32 %v1_8e98, 0
  %v1_8ea4 = urem i32 %arg3, 256
  br i1 %v2_8e9c, label %dec_label_pc_8ee8, label %dec_label_pc_8eb0

dec_label_pc_8eb0:                                ; preds = %dec_label_pc_8e98
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = add i32 %v0_8eb0, 4
  %v2_8eb0 = inttoptr i32 %v1_8eb0 to i8*
  %v3_8eb0 = load i8, i8* %v2_8eb0, align 1
  %v4_8eb0 = zext i8 %v3_8eb0 to i32
  %v9_8eb4 = icmp eq i32 %v4_8eb0, %v1_8ea4
  br i1 %v9_8eb4, label %dec_label_pc_8ef0, label %dec_label_pc_8ed8.preheader

dec_label_pc_8ed8.preheader:                      ; preds = %dec_label_pc_8eb0
  br label %dec_label_pc_8ed8

dec_label_pc_8ec8:                                ; preds = %dec_label_pc_8ed8
  %v1_8ec8 = add i32 %v0_8ed0.in, 12
  %v2_8ec8 = inttoptr i32 %v1_8ec8 to i8*
  %v3_8ec8 = load i8, i8* %v2_8ec8, align 1
  %v4_8ec8 = zext i8 %v3_8ec8 to i32
  %v9_8ecc = icmp eq i32 %v4_8ec8, %v1_8ea4
  br i1 %v9_8ecc, label %dec_label_pc_8ef0, label %dec_label_pc_8ed8

dec_label_pc_8ed8:                                ; preds = %dec_label_pc_8ed8.preheader, %dec_label_pc_8ec8
  %v0_8ed0.in = phi i32 [ %v0_8eb0, %dec_label_pc_8ed8.preheader ], [ %v0_8ed0, %dec_label_pc_8ec8 ]
  %v0_8ed8 = phi i32 [ 0, %dec_label_pc_8ed8.preheader ], [ %v1_8ed8, %dec_label_pc_8ec8 ]
  %v0_8ed0 = add i32 %v0_8ed0.in, 8
  %v1_8ed8 = add i32 %v0_8ed8, 1
  %v9_8edc = icmp eq i32 %v1_8ed8, %v1_8e98
  store i32 %v0_8ed0, i32* %r1.global-to-local, align 4
  br i1 %v9_8edc, label %dec_label_pc_8ee8, label %dec_label_pc_8ec8

dec_label_pc_8ee8:                                ; preds = %dec_label_pc_8ed8, %dec_label_pc_8e98
  ret i32 %arg4

dec_label_pc_8ef0:                                ; preds = %dec_label_pc_8ec8, %dec_label_pc_8eb0
  %v0_8ef0 = phi i32 [ %v0_8eb0, %dec_label_pc_8eb0 ], [ %v0_8ed0, %dec_label_pc_8ec8 ]
  %v1_8ef0 = inttoptr i32 %v0_8ef0 to i32*
  %v2_8ef0 = load i32, i32* %v1_8ef0, align 4
  ret i32 %v2_8ef0

; uselistorder directives
  uselistorder i32 %v1_8ed8, { 1, 0 }
  uselistorder i32 %v0_8ed0, { 1, 0, 2 }
  uselistorder i32 %v0_8ed0.in, { 1, 0 }
  uselistorder i32 %v0_8eb0, { 1, 0, 2 }
  uselistorder i32 %v1_8ea4, { 1, 0 }
  uselistorder i32 %v1_8e98, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8ed8, { 1, 0 }
}

define i32 @function_8efc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8efc:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_8efc = load i32, i32* @r4, align 4
  store i32 %v3_8efc, i32* %stack_var_-32, align 4
  %v6_8efc = load i32, i32* @r5, align 4
  %v9_8efc = load i32, i32* @r6, align 4
  %v12_8efc = load i32, i32* @r7, align 4
  %v18_8efc = load i32, i32* @sb, align 4
  %v0_8f00 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8f00, i32* @sb, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_8f08 = urem i32 %arg2, 256
  store i32 %v1_8f08, i32* %r7.global-to-local, align 4
  %v0_8f14 = call i32 @fork()
  %v2_8f18 = icmp eq i32 %v0_8f14, -1
  %. = zext i1 %v2_8f18 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8f14, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8efc
  store i32 1, i32* %r5.global-to-local, align 4
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8efc
  store i32 %., i32* %r5.global-to-local, align 4
  %v2_8f30 = icmp eq i1 %v2_8f18, false
  br i1 %v2_8f30, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  %v3_8f34 = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_8f34, i32* %r4.global-to-local, align 4
  store i32 %v6_8efc, i32* %r5.global-to-local, align 4
  store i32 %v9_8efc, i32* %r6.global-to-local, align 4
  store i32 %v12_8efc, i32* %r7.global-to-local, align 4
  store i32 %v18_8efc, i32* @sb, align 4
  ret i32 %v0_8f14

bb26:                                             ; preds = %bb24
  %v0_8f38 = call i32 @fork()
  %v2_8f3c = icmp eq i32 %v0_8f38, -1
  store i32 %v0_8f38, i32* %r4.global-to-local, align 4
  br i1 %v2_8f3c, label %dec_label_pc_8f6c, label %dec_label_pc_8f48

dec_label_pc_8f48:                                ; preds = %bb26
  %v2_8f48 = icmp eq i32 %v0_8f38, 0
  br i1 %v2_8f48, label %dec_label_pc_8f50, label %dec_label_pc_8f74

dec_label_pc_8f50:                                ; preds = %dec_label_pc_8f48
  %v0_8f50 = load i32, i32* %r6.global-to-local, align 4
  %v1_8f54 = call i32 @sleep(i32 %v0_8f50)
  %v0_8f58 = call i32 @getppid()
  %v2_8f60 = call i32 @kill(i32 %v0_8f58, i32 9)
  %v0_8f64 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_8f64)
  unreachable

dec_label_pc_8f6c:                                ; preds = %bb26
  %v0_8f6c = load i32, i32* %r5.global-to-local, align 4
  call void @exit(i32 %v0_8f6c)
  unreachable

dec_label_pc_8f74:                                ; preds = %dec_label_pc_8f48
  store i32 ptrtoint (i8** @global_var_1a1c4.73 to i32), i32* %r3.global-to-local, align 4
  %v2_8f78 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_8f78 = zext i8 %v2_8f78 to i32
  %v2_8f7c = icmp eq i8 %v2_8f78, 0
  br i1 %v2_8f7c, label %dec_label_pc_8fc0, label %dec_label_pc_8f84

dec_label_pc_8f84:                                ; preds = %dec_label_pc_8f74
  store i32 ptrtoint (i32* @global_var_1a1c8.75 to i32), i32* %r3.global-to-local, align 4
  %v2_8f88 = load i32, i32* @global_var_1a1c8.75, align 4
  %v1_8f8c = inttoptr i32 %v2_8f88 to i32*
  %v2_8f8c = load i32, i32* %v1_8f8c, align 4
  %v1_8f90 = add i32 %v2_8f8c, 4
  %v2_8f90 = inttoptr i32 %v1_8f90 to i8*
  %v3_8f90 = load i8, i8* %v2_8f90, align 1
  %v4_8f90 = zext i8 %v3_8f90 to i32
  store i32 %v4_8f90, i32* %r3.global-to-local, align 4
  %v1_8f94 = load i32, i32* %r7.global-to-local, align 4
  %v9_8f94 = icmp eq i32 %v4_8f90, %v1_8f94
  br i1 %v9_8f94, label %dec_label_pc_8fc8, label %dec_label_pc_8fb4.preheader

dec_label_pc_8fb4.preheader:                      ; preds = %dec_label_pc_8f84
  %v1_8f98 = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8fb4

dec_label_pc_8fa4:                                ; preds = %dec_label_pc_8fb4
  %v4_8fa4 = mul i32 %v1_8fb4, 4
  %v5_8fa4 = add i32 %v4_8fa4, %v2_8f88
  %v6_8fa4 = inttoptr i32 %v5_8fa4 to i32*
  %v7_8fa4 = load i32, i32* %v6_8fa4, align 4
  %v1_8fa8 = add i32 %v7_8fa4, 4
  %v2_8fa8 = inttoptr i32 %v1_8fa8 to i8*
  %v3_8fa8 = load i8, i8* %v2_8fa8, align 1
  %v4_8fa8 = zext i8 %v3_8fa8 to i32
  store i32 %v4_8fa8, i32* %r3.global-to-local, align 4
  %v9_8fac = icmp eq i32 %v4_8fa8, %v1_8f94
  br i1 %v9_8fac, label %dec_label_pc_8fc8, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8fb4.preheader, %dec_label_pc_8fa4
  %v0_8fb4 = phi i32 [ %v1_8f98, %dec_label_pc_8fb4.preheader ], [ %v1_8fb4, %dec_label_pc_8fa4 ]
  %v1_8fb4 = add i32 %v0_8fb4, 1
  %v9_8fb8 = icmp eq i32 %v1_8fb4, %v3_8f78
  br i1 %v9_8fb8, label %dec_label_pc_8fc0, label %dec_label_pc_8fa4

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8fb4, %dec_label_pc_8f74, %dec_label_pc_8fc8
  call void @exit(i32 0)
  unreachable

dec_label_pc_8fc8:                                ; preds = %dec_label_pc_8fa4, %dec_label_pc_8f84
  %v0_8fdc = phi i32 [ %v2_8f8c, %dec_label_pc_8f84 ], [ %v7_8fa4, %dec_label_pc_8fa4 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8fdc = inttoptr i32 %v0_8fdc to i32*
  %v2_8fdc = load i32, i32* %v1_8fdc, align 4
  call void @__pseudo_branch(i32 %v2_8fdc)
  br label %dec_label_pc_8fc0

; uselistorder directives
  uselistorder i32 %v1_8fb4, { 2, 0, 1 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v2_8f18, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8fc0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8fb4, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8fec(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8fec:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_8fec = load i32, i32* @r6, align 4
  %v12_8fec = load i32, i32* @r7, align 4
  %v18_8fec = load i32, i32* @sb, align 4
  %v21_8fec = load i32, i32* @sl, align 4
  %v27_8fec = load i32, i32* @lr, align 4
  %v7_8ff0 = icmp eq i32 %arg2, 3
  store i1 %v7_8ff0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8ffc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8ffc, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_9010, label %dec_label_pc_9004

dec_label_pc_9004:                                ; preds = %dec_label_pc_8fec
  %v7_9004 = icmp eq i32 %arg2, 4
  store i1 %v7_9004, i1* %cpsr_z.global-to-local, align 1
  %v1_9008 = inttoptr i32 %v0_8ffc to i32*
  %v2_9008 = load i32, i32* %v1_9008, align 4
  store i32 %v2_9008, i32* @sl, align 4
  br i1 %v7_9004, label %dec_label_pc_9010, label %dec_label_pc_9018

dec_label_pc_9010:                                ; preds = %dec_label_pc_9034, %.dec_label_pc_9010_crit_edge, %dec_label_pc_9004, %dec_label_pc_9028, %dec_label_pc_9018, %dec_label_pc_8fec
  %v29_9014 = phi i32 [ %v29_9014.pre, %.dec_label_pc_9010_crit_edge ], [ %v0_8ffc, %dec_label_pc_9034 ], [ %v0_8ffc, %dec_label_pc_9004 ], [ %v0_8ffc, %dec_label_pc_9028 ], [ %v0_8ffc, %dec_label_pc_9018 ], [ %v0_8ffc, %dec_label_pc_8fec ]
  store i32 %v9_8fec, i32* @r6, align 4
  store i32 %v12_8fec, i32* @r7, align 4
  store i32 %v18_8fec, i32* @sb, align 4
  store i32 %v21_8fec, i32* @sl, align 4
  ret i32 %v29_9014

dec_label_pc_9018:                                ; preds = %dec_label_pc_9004
  %v7_9018 = icmp eq i32 %arg2, 5
  store i1 %v7_9018, i1* %cpsr_z.global-to-local, align 1
  %v1_901c = add i32 %v0_8ffc, 4
  %v2_901c = inttoptr i32 %v1_901c to i8*
  %v3_901c = load i8, i8* %v2_901c, align 1
  %v4_901c = zext i8 %v3_901c to i32
  store i32 %v4_901c, i32* %r1.global-to-local, align 4
  br i1 %v7_9018, label %dec_label_pc_9010, label %dec_label_pc_9028

dec_label_pc_9028:                                ; preds = %dec_label_pc_9018
  %v1_9028 = add i32 %v0_8ffc, 5
  %v2_9028 = inttoptr i32 %v1_9028 to i8*
  %v3_9028 = load i8, i8* %v2_9028, align 1
  %v4_9028 = zext i8 %v3_9028 to i32
  store i32 %v4_9028, i32* @r7, align 4
  %v2_902c = icmp eq i8 %v3_9028, 0
  store i1 %v2_902c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_902c, label %dec_label_pc_9010, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %dec_label_pc_9028
  %v3_9034 = mul nuw nsw i32 %v4_9028, 4
  store i32 %v3_9034, i32* @sb, align 4
  %v1_9038 = add i32 %arg2, -6
  store i32 %v1_9038, i32* @r6, align 4
  %v2_903c = mul nuw nsw i32 %v4_9028, 5
  store i32 %v2_903c, i32* @r8, align 4
  %v3_9040 = icmp ult i32 %v1_9038, %v2_903c
  %v9_9040 = icmp eq i32 %v1_9038, %v2_903c
  store i1 %v9_9040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9040, label %dec_label_pc_9010, label %dec_label_pc_9048

dec_label_pc_9048:                                ; preds = %dec_label_pc_9034
  store i32 %v4_9028, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_9050 = call i32* @calloc(i32 %v4_9028, i32 24)
  %v4_9050 = ptrtoint i32* %v2_9050 to i32
  store i32 %v4_9050, i32* %r0.global-to-local, align 4
  %v0_9054 = load i32, i32* @r7, align 4
  %v2_9054 = icmp eq i32 %v0_9054, 0
  store i1 %v2_9054, i1* %cpsr_z.global-to-local, align 1
  %v0_905c = load i32, i32* @r4, align 4
  %v1_905c = add i32 %v0_905c, 6
  store i32 %v1_905c, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_9054, 1
  br i1 %tmp27, label %dec_label_pc_90b4thread-pre-split, label %dec_label_pc_9064

dec_label_pc_9064:                                ; preds = %dec_label_pc_9048
  store i32 %v4_9050, i32* %r1.global-to-local, align 4
  %v1_9068 = load i32, i32* @r8, align 4
  %v2_9068 = add i32 %v1_9068, %v0_905c
  store i32 %v2_9068, i32* %ip.global-to-local, align 4
  store i32 %v0_905c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_9078

dec_label_pc_9078:                                ; preds = %dec_label_pc_9078.dec_label_pc_9078_crit_edge, %dec_label_pc_9064
  %v2_9088 = phi i32 [ %v1_909c, %dec_label_pc_9078.dec_label_pc_9078_crit_edge ], [ %v4_9050, %dec_label_pc_9064 ]
  %v1_9084 = phi i32 [ %v1_9084.pre, %dec_label_pc_9078.dec_label_pc_9078_crit_edge ], [ %v2_9068, %dec_label_pc_9064 ]
  %v0_9080 = phi i32 [ %v0_9078.pre, %dec_label_pc_9078.dec_label_pc_9078_crit_edge ], [ %v0_905c, %dec_label_pc_9064 ]
  %v1_9078 = add i32 %v0_9080, 10
  %v2_9078 = inttoptr i32 %v1_9078 to i8*
  %v3_9078 = load i8, i8* %v2_9078, align 1
  %v1_907c = add i32 %v0_9080, 6
  %v2_907c = inttoptr i32 %v1_907c to i32*
  %v3_907c = load i32, i32* %v2_907c, align 4
  store i32 %v3_907c, i32* %r2.global-to-local, align 4
  %v1_9080 = add i32 %v0_9080, 5
  store i32 %v1_9080, i32* %r0.global-to-local, align 4
  %v9_9084 = icmp eq i32 %v1_9080, %v1_9084
  store i1 %v9_9084, i1* %cpsr_z.global-to-local, align 1
  %v3_9088 = add i32 %v2_9088, 20
  %v4_9088 = inttoptr i32 %v3_9088 to i8*
  store i8 %v3_9078, i8* %v4_9088, align 1
  %v0_908c = load i32, i32* %r2.global-to-local, align 4
  %v1_908c = load i32, i32* %r1.global-to-local, align 4
  %v2_908c = add i32 %v1_908c, 4
  %v3_908c = inttoptr i32 %v2_908c to i32*
  store i32 %v0_908c, i32* %v3_908c, align 4
  %v0_9090 = load i32, i32* %r2.global-to-local, align 4
  %v1_9090 = load i32, i32* %r1.global-to-local, align 4
  %v2_9090 = add i32 %v1_9090, 16
  %v3_9090 = inttoptr i32 %v2_9090 to i32*
  store i32 %v0_9090, i32* %v3_9090, align 4
  %v0_9094 = load i32, i32* @r4, align 4
  %v1_9094 = trunc i32 %v0_9094 to i8
  %v2_9094 = load i32, i32* %r1.global-to-local, align 4
  %v3_9094 = inttoptr i32 %v2_9094 to i8*
  store i8 %v1_9094, i8* %v3_9094, align 1
  %v0_9098 = load i32, i32* %lr.global-to-local, align 4
  %v1_9098 = trunc i32 %v0_9098 to i8
  %v2_9098 = load i32, i32* %r1.global-to-local, align 4
  %v3_9098 = add i32 %v2_9098, 1
  %v4_9098 = inttoptr i32 %v3_9098 to i8*
  store i8 %v1_9098, i8* %v4_9098, align 1
  %v0_909c = load i32, i32* %r1.global-to-local, align 4
  %v1_909c = add i32 %v0_909c, 24
  store i32 %v1_909c, i32* %r1.global-to-local, align 4
  %v0_90a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90a0, label %dec_label_pc_90a4, label %dec_label_pc_9078.dec_label_pc_9078_crit_edge

dec_label_pc_9078.dec_label_pc_9078_crit_edge:    ; preds = %dec_label_pc_9078
  %v0_9078.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9084.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9078

dec_label_pc_90a4:                                ; preds = %dec_label_pc_9078
  %v0_90a4 = load i32, i32* @sb, align 4
  %v1_90a4 = load i32, i32* @r7, align 4
  %v1_90a8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_90a4, %v0_90a4
  %v2_90a8 = sub i32 %v1_90a8, %sum
  %v0_90ac = load i32, i32* %r0.global-to-local, align 4
  %v1_90ac = add i32 %v0_90ac, 6
  store i32 %v1_90ac, i32* %fp.global-to-local, align 4
  %v1_90b0 = add i32 %v2_90a8, -6
  store i32 %v1_90b0, i32* @r6, align 4
  br label %dec_label_pc_90b4

dec_label_pc_90b4thread-pre-split:                ; preds = %dec_label_pc_9048
  %v0_90b4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_90b4

dec_label_pc_90b4:                                ; preds = %dec_label_pc_90b4thread-pre-split, %dec_label_pc_90a4
  %v0_90c0 = phi i32 [ %v1_905c, %dec_label_pc_90b4thread-pre-split ], [ %v1_90ac, %dec_label_pc_90a4 ]
  %v1_90b8 = phi i32 [ %v0_90b4.pr, %dec_label_pc_90b4thread-pre-split ], [ %v1_90b0, %dec_label_pc_90a4 ]
  %v2_90b4 = icmp eq i32 %v1_90b8, 0
  store i1 %v2_90b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90b4, label %dec_label_pc_91ec, label %dec_label_pc_90c0

dec_label_pc_90c0:                                ; preds = %dec_label_pc_90b4
  %v1_90c0 = inttoptr i32 %v0_90c0 to i8*
  %v2_90c0 = load i8, i8* %v1_90c0, align 1
  %v3_90c0 = zext i8 %v2_90c0 to i32
  store i32 %v3_90c0, i32* @sb, align 4
  %v2_90c4 = icmp eq i8 %v2_90c0, 0
  store i1 %v2_90c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90c4, label %dec_label_pc_91a4, label %dec_label_pc_90d4

dec_label_pc_90d4:                                ; preds = %dec_label_pc_90c0
  store i32 %v3_90c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_90dc = call i32* @calloc(i32 %v3_90c0, i32 8)
  %v4_90dc = ptrtoint i32* %v2_90dc to i32
  store i32 %v4_90dc, i32* %r0.global-to-local, align 4
  %v0_90e0 = load i32, i32* @sb, align 4
  %v2_90e0 = icmp eq i32 %v0_90e0, 0
  store i1 %v2_90e0, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_90e0, 1
  br i1 %tmp28, label %dec_label_pc_91a4, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_90d4
  %v0_90f0 = load i32, i32* @r6, align 4
  %v1_90f0 = add i32 %v0_90f0, -1
  store i32 %v1_90f0, i32* %r2.global-to-local, align 4
  %v7_90f0 = icmp eq i32 %v0_90f0, 1
  store i1 %v7_90f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90f0, label %dec_label_pc_91ec, label %dec_label_pc_90f8

dec_label_pc_90f8:                                ; preds = %dec_label_pc_90f0
  %v0_90f8 = load i32, i32* %fp.global-to-local, align 4
  %v1_90f8 = add i32 %v0_90f8, 1
  %v2_90f8 = inttoptr i32 %v1_90f8 to i8*
  %v3_90f8 = load i8, i8* %v2_90f8, align 1
  %v1_90fc = add i32 %v0_90f0, -2
  store i32 %v1_90fc, i32* %r2.global-to-local, align 4
  %v7_90fc = icmp eq i32 %v1_90f0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v3_9100 = add i32 %v4_90dc, 4
  %v4_9100 = inttoptr i32 %v3_9100 to i8*
  store i8 %v3_90f8, i8* %v4_9100, align 1
  %v0_9104 = load i32, i32* %fp.global-to-local, align 4
  %v1_9104 = add i32 %v0_9104, 1
  store i32 %v1_9104, i32* %r0.global-to-local, align 4
  %v0_9108 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9108, label %dec_label_pc_91ec, label %dec_label_pc_910c

dec_label_pc_910c:                                ; preds = %dec_label_pc_90f8
  %v1_910c = add i32 %v0_9104, 2
  %v2_910c = inttoptr i32 %v1_910c to i8*
  %v3_910c = load i8, i8* %v2_910c, align 1
  %v4_910c = zext i8 %v3_910c to i32
  store i32 %v4_910c, i32* @r4, align 4
  %v0_9110 = load i32, i32* %r2.global-to-local, align 4
  %v1_9110 = add i32 %v0_9110, -1
  store i32 %v1_9110, i32* @r8, align 4
  %v9_9114 = icmp eq i32 %v1_9110, %v4_910c
  store i1 %v9_9114, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_910c, i32* %r0.global-to-local, align 4
  %v5_911c = icmp slt i32 %v1_9110, %v4_910c
  br i1 %v5_911c, label %dec_label_pc_91ec, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %dec_label_pc_910c
  store i32 %v4_90dc, i32* @r5, align 4
  %v1_9128 = add i32 %v4_90dc, 8
  %v1_912c = add i32 %v0_9104, 3
  store i32 %v1_912c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_9170

dec_label_pc_913c:                                ; preds = %dec_label_pc_9170
  %v0_913c = load i32, i32* @r8, align 4
  %v1_913c = load i32, i32* @r4, align 4
  %v2_913c = sub i32 %v0_913c, %v1_913c
  store i32 %v2_913c, i32* %r2.global-to-local, align 4
  %v9_913c = icmp eq i32 %v0_913c, %v1_913c
  store i1 %v9_913c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_913c, label %dec_label_pc_91ec, label %dec_label_pc_9144

dec_label_pc_9144:                                ; preds = %dec_label_pc_913c
  %v1_9144 = load i32, i32* @r6, align 4
  %v2_9144 = add i32 %v1_9144, %v1_913c
  %v3_9144 = inttoptr i32 %v2_9144 to i8*
  %v4_9144 = load i8, i8* %v3_9144, align 1
  store i32 %v2_9144, i32* %r0.global-to-local, align 4
  %v1_914c = add i32 %v2_913c, -1
  store i32 %v1_914c, i32* %r2.global-to-local, align 4
  %v7_914c = icmp eq i32 %v2_913c, 1
  store i1 %v7_914c, i1* %cpsr_z.global-to-local, align 1
  %v3_9150 = add i32 %v2_9150, 4
  %v4_9150 = inttoptr i32 %v3_9150 to i8*
  store i8 %v4_9144, i8* %v4_9150, align 1
  %v0_9154 = load i32, i32* %r0.global-to-local, align 4
  %v0_9158 = load i32, i32* %r2.global-to-local, align 4
  %v1_9158 = add i32 %v0_9158, -1
  store i32 %v1_9158, i32* @r8, align 4
  %v1_915c = add i32 %v0_9154, 2
  store i32 %v1_915c, i32* @r6, align 4
  %v0_9160 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9160, label %dec_label_pc_91ec, label %dec_label_pc_9164

dec_label_pc_9164:                                ; preds = %dec_label_pc_9144
  %v1_9154 = add i32 %v0_9154, 1
  %v2_9164 = inttoptr i32 %v1_9154 to i8*
  %v3_9164 = load i8, i8* %v2_9164, align 1
  %v4_9164 = zext i8 %v3_9164 to i32
  store i32 %v4_9164, i32* @r4, align 4
  %v2_9168 = sub i32 %v1_9158, %v4_9164
  %tmp30 = sub i32 0, %v2_9168
  %v6_9168 = and i32 %v1_9158, %tmp30
  %v7_9168 = icmp slt i32 %v6_9168, 0
  %v8_9168 = icmp slt i32 %v2_9168, 0
  %v9_9168 = icmp eq i32 %v1_9158, %v4_9164
  store i1 %v9_9168, i1* %cpsr_z.global-to-local, align 1
  %v2_916c = xor i1 %v8_9168, %v7_9168
  br i1 %v2_916c, label %dec_label_pc_91ec, label %dec_label_pc_9170

dec_label_pc_9170:                                ; preds = %dec_label_pc_9164, %dec_label_pc_9120
  %v0_9174 = phi i32 [ %v4_910c, %dec_label_pc_9120 ], [ %v4_9164, %dec_label_pc_9164 ]
  %v2_9150 = phi i32 [ %v1_9128, %dec_label_pc_9120 ], [ %v1_9194, %dec_label_pc_9164 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_9174 = add nuw nsw i32 %v0_9174, 1
  store i32 %v1_9174, i32* %r0.global-to-local, align 4
  %v2_9178 = call i32* @calloc(i32 %v1_9174, i32 1)
  %v3_9178 = ptrtoint i32* %v2_9178 to i32
  store i32 %v3_9178, i32* %r0.global-to-local, align 4
  %v0_917c = load i32, i32* @r6, align 4
  store i32 %v0_917c, i32* %r1.global-to-local, align 4
  %v1_9180 = load i32, i32* @r5, align 4
  %v2_9180 = inttoptr i32 %v1_9180 to i32*
  store i32 %v3_9178, i32* %v2_9180, align 4
  %v0_9184 = load i32, i32* @r4, align 4
  store i32 %v0_9184, i32* %r2.global-to-local, align 4
  %v3_9188 = call i32 @function_115a4(i32 %v3_9178, i32 %v0_917c, i32 %v0_9184)
  store i32 %v3_9188, i32* %r0.global-to-local, align 4
  store i32 %v2_9150, i32* @r5, align 4
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  %v1_9190 = add i32 %v0_9190, 1
  store i32 %v1_9190, i32* %fp.global-to-local, align 4
  %v1_9194 = add i32 %v2_9150, 8
  store i32 %v1_9194, i32* %ip.global-to-local, align 4
  %v1_9198 = load i32, i32* @sb, align 4
  %v9_9198 = icmp eq i32 %v1_9190, %v1_9198
  store i1 %v9_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9198, label %dec_label_pc_91a4, label %dec_label_pc_913c

dec_label_pc_91a4:                                ; preds = %dec_label_pc_9170, %dec_label_pc_90d4, %dec_label_pc_90c0
  %stack_var_-48.1 = phi i32 [ %v3_90c0, %dec_label_pc_90c0 ], [ %v0_90e0, %dec_label_pc_90d4 ], [ %v0_90e0, %dec_label_pc_9170 ]
  %stack_var_-52.2 = phi i32 [ %v3_90c0, %dec_label_pc_90c0 ], [ %v4_90dc, %dec_label_pc_90d4 ], [ %v4_90dc, %dec_label_pc_9170 ]
  %v0_91a4 = call i32* @__errno_location()
  %v0_91a8 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_91b4 = mul i32 %v0_91a8, 16777216
  %v1_91a8 = mul i32 %v0_91a8, 256
  %v4_91b8 = and i32 %v1_91a8, 16711680
  %v5_91b8 = or i32 %v4_91b8, %v3_91b4
  store i32 %v5_91b8, i32* %r1.global-to-local, align 4
  %v1_91b0 = udiv i32 %v0_91a8, 256
  %v3_91bc = and i32 %v1_91b0, 65280
  store i32 %v3_91bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v0_91a4, align 4
  %v1_91c8 = load i32, i32* @sl, align 4
  %v4_91c8 = udiv i32 %v1_91c8, 16777216
  %v5_91c8 = or i32 %v4_91c8, %v3_91bc
  %v0_91cc = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* %ip.global-to-local, align 4
  %v1_91d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_91d4 = or i32 %v5_91c8, %v1_91d4
  store i32 %v2_91d4, i32* %r0.global-to-local, align 4
  store i32 %v4_901c, i32* %r1.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r7, align 4
  store i32 %v0_91e0, i32* %r2.global-to-local, align 4
  %v6_91e8 = trunc i32 %v0_91cc to i8
  %v7_91e8 = call i32 @function_8efc(i32 %v2_91d4, i32 %v4_901c, i32 %v0_91e0, i32 %v4_9050, i8 %v6_91e8, i32 %stack_var_-52.2)
  store i32 %v7_91e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91ec

dec_label_pc_91ec:                                ; preds = %dec_label_pc_9164, %dec_label_pc_9144, %dec_label_pc_913c, %dec_label_pc_910c, %dec_label_pc_90f8, %dec_label_pc_90f0, %dec_label_pc_90b4, %dec_label_pc_91a4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_90b4 ], [ %stack_var_-52.2, %dec_label_pc_91a4 ], [ %v4_90dc, %dec_label_pc_90f0 ], [ %v4_90dc, %dec_label_pc_90f8 ], [ %v4_90dc, %dec_label_pc_910c ], [ %v4_90dc, %dec_label_pc_913c ], [ %v4_90dc, %dec_label_pc_9144 ], [ %v4_90dc, %dec_label_pc_9164 ]
  store i32 %v4_9050, i32* %r1.global-to-local, align 4
  %v2_91f0 = icmp eq i32* %v2_9050, null
  store i1 %v2_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_91f0, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_91ec
  store i32 %v4_9050, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_91ec, %bb
  store i32 37372, i32* %lr.global-to-local, align 4
  %v1_91f8 = xor i1 %v2_91f0, true
  call void @__pseudo_cond_branch(i1 %v1_91f8, i32 ptrtoint (i32* @global_var_8d58.77 to i32))
  %v2_9200 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9200, label %.dec_label_pc_9010_crit_edge, label %dec_label_pc_9208

.dec_label_pc_9010_crit_edge:                     ; preds = %bb31
  %v29_9014.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9010

dec_label_pc_9208:                                ; preds = %bb31
  %v0_9208 = load i32, i32* @sb, align 4
  %v2_9208 = icmp eq i32 %v0_9208, 0
  store i1 %v2_9208, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_9208, 1
  br i1 %tmp32, label %dec_label_pc_9230, label %dec_label_pc_9210

dec_label_pc_9210:                                ; preds = %dec_label_pc_9208
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9214, %dec_label_pc_9210
  %v0_9220 = phi i32 [ %v1_9220, %dec_label_pc_9214 ], [ 0, %dec_label_pc_9210 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_9218 = mul i32 %v0_9220, 8
  %v5_9218 = add i32 %v4_9218, %stack_var_-52.3
  %v6_9218 = inttoptr i32 %v5_9218 to i32*
  %v7_9218 = load i32, i32* %v6_9218, align 4
  store i32 %v7_9218, i32* %r0.global-to-local, align 4
  %v2_921c = icmp eq i32 %v7_9218, 0
  store i1 %v2_921c, i1* %cpsr_z.global-to-local, align 1
  %v1_9220 = add i32 %v0_9220, 1
  store i32 37416, i32* %lr.global-to-local, align 4
  %v1_9224 = xor i1 %v2_921c, true
  call void @__pseudo_cond_branch(i1 %v1_9224, i32 ptrtoint (i32* @global_var_8d58.77 to i32))
  %v0_9228 = load i32, i32* @sb, align 4
  %v9_9228 = icmp eq i32 %v0_9228, %v1_9220
  store i1 %v9_9228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9228, label %dec_label_pc_9230, label %dec_label_pc_9214

dec_label_pc_9230:                                ; preds = %dec_label_pc_9214, %dec_label_pc_9208
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v9_8fec, i32* @r6, align 4
  store i32 %v12_8fec, i32* @r7, align 4
  store i32 %v18_8fec, i32* @sb, align 4
  store i32 %v21_8fec, i32* @sl, align 4
  store i32 %v27_8fec, i32* %lr.global-to-local, align 4
  %v1_923c = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_923c)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i1 %v2_91f0, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_91a8, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_9194, { 1, 0 }
  uselistorder i32 %v3_9178, { 0, 2, 1 }
  uselistorder i32 %v2_9150, { 2, 1, 0 }
  uselistorder i32 %v2_9168, { 1, 0 }
  uselistorder i32 %v4_9164, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9158, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9154, { 1, 0 }
  uselistorder i32 %v0_90f0, { 0, 2, 1 }
  uselistorder i32 %v0_90e0, { 0, 2, 1, 3 }
  uselistorder i32 %v4_90dc, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_90c0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_909c, { 1, 0 }
  uselistorder i32 %v0_9080, { 0, 2, 1 }
  uselistorder i32 %v0_905c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_9050, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_903c, { 2, 1, 0 }
  uselistorder i32 %v4_9028, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_901c, { 1, 0, 2 }
  uselistorder i32 %v0_8ffc, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 22, 6, 2, 7, 10, 14, 11, 8, 9, 12, 13, 20, 15, 17, 16, 18, 19, 23, 21, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 5, 3, 0, 4, 2, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_91ec, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_9010, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_9240(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9240:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9240 = urem i32 %arg1, 256
  %v2_9244 = icmp eq i32 %v1_9240, 0
  br i1 %v2_9244, label %dec_label_pc_9290, label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9240
  %v0_9254 = load i32, i32* %r1.global-to-local, align 4
  %v1_9254 = add i32 %v0_9254, 4
  %v2_9254 = inttoptr i32 %v1_9254 to i8*
  %v3_9254 = load i8, i8* %v2_9254, align 1
  %v4_9254 = zext i8 %v3_9254 to i32
  %v1_9258 = urem i32 %arg3, 256
  %v9_925c = icmp eq i32 %v4_9254, %v1_9258
  br i1 %v9_925c, label %dec_label_pc_9298, label %dec_label_pc_9280.preheader

dec_label_pc_9280.preheader:                      ; preds = %dec_label_pc_9254
  br label %dec_label_pc_9280

dec_label_pc_9270:                                ; preds = %dec_label_pc_9280
  %v1_9270 = add i32 %v0_9278.in, 12
  %v2_9270 = inttoptr i32 %v1_9270 to i8*
  %v3_9270 = load i8, i8* %v2_9270, align 1
  %v4_9270 = zext i8 %v3_9270 to i32
  %v9_9274 = icmp eq i32 %v1_9258, %v4_9270
  br i1 %v9_9274, label %dec_label_pc_9298, label %dec_label_pc_9280

dec_label_pc_9280:                                ; preds = %dec_label_pc_9280.preheader, %dec_label_pc_9270
  %v0_9278.in = phi i32 [ %v0_9254, %dec_label_pc_9280.preheader ], [ %v0_9278, %dec_label_pc_9270 ]
  %v0_9280 = phi i32 [ 0, %dec_label_pc_9280.preheader ], [ %v1_9280, %dec_label_pc_9270 ]
  %v0_9278 = add i32 %v0_9278.in, 8
  %v1_9280 = add i32 %v0_9280, 1
  %v9_9284 = icmp eq i32 %v1_9240, %v1_9280
  store i32 %v0_9278, i32* %r1.global-to-local, align 4
  br i1 %v9_9284, label %dec_label_pc_9290, label %dec_label_pc_9270

dec_label_pc_9290:                                ; preds = %dec_label_pc_9280, %dec_label_pc_9298, %dec_label_pc_9240
  ret i32 %arg4

dec_label_pc_9298:                                ; preds = %dec_label_pc_9270, %dec_label_pc_9254
  %v0_9298 = phi i32 [ %v0_9254, %dec_label_pc_9254 ], [ %v0_9278, %dec_label_pc_9270 ]
  %v1_9298 = inttoptr i32 %v0_9298 to i32*
  %v2_9298 = load i32, i32* %v1_9298, align 4
  %v3_929c = icmp eq i32 %v2_9298, 0
  br i1 %v3_929c, label %dec_label_pc_9290, label %dec_label_pc_92a4

dec_label_pc_92a4:                                ; preds = %dec_label_pc_9298
  %v3_9298 = inttoptr i32 %v2_9298 to i8*
  %v3_92a8 = call i32 @inet_addr(i8* %v3_9298)
  ret i32 %v3_92a8

; uselistorder directives
  uselistorder i32 %v2_9298, { 1, 0 }
  uselistorder i32 %v1_9280, { 1, 0 }
  uselistorder i32 %v0_9278, { 1, 0, 2 }
  uselistorder i32 %v0_9278.in, { 1, 0 }
  uselistorder i32 %v1_9258, { 1, 0 }
  uselistorder i32 %v0_9254, { 1, 0, 2 }
  uselistorder i32 %v1_9240, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9290, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9280, { 1, 0 }
}

define i32 @function_92ac(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_92ac:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_92ac = urem i32 %arg1, 256
  %v2_92b0 = icmp eq i32 %v1_92ac, 0
  %v3_92b4 = load i32, i32* @r4, align 4
  br i1 %v2_92b0, label %dec_label_pc_92fc, label %dec_label_pc_92c0

dec_label_pc_92c0:                                ; preds = %dec_label_pc_92ac
  %v0_92c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_92c0 = add i32 %v0_92c0, 4
  %v2_92c0 = inttoptr i32 %v1_92c0 to i8*
  %v3_92c0 = load i8, i8* %v2_92c0, align 1
  %v4_92c0 = zext i8 %v3_92c0 to i32
  %v1_92c4 = urem i32 %arg3, 256
  %v9_92c8 = icmp eq i32 %v4_92c0, %v1_92c4
  br i1 %v9_92c8, label %dec_label_pc_9304, label %dec_label_pc_92ec.preheader

dec_label_pc_92ec.preheader:                      ; preds = %dec_label_pc_92c0
  br label %dec_label_pc_92ec

dec_label_pc_92dc:                                ; preds = %dec_label_pc_92ec
  %v1_92dc = add i32 %v0_92e4.in, 12
  %v2_92dc = inttoptr i32 %v1_92dc to i8*
  %v3_92dc = load i8, i8* %v2_92dc, align 1
  %v4_92dc = zext i8 %v3_92dc to i32
  %v9_92e0 = icmp eq i32 %v1_92c4, %v4_92dc
  br i1 %v9_92e0, label %dec_label_pc_9304, label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.preheader, %dec_label_pc_92dc
  %v0_92e4.in = phi i32 [ %v0_92c0, %dec_label_pc_92ec.preheader ], [ %v0_92e4, %dec_label_pc_92dc ]
  %v0_92ec = phi i32 [ 0, %dec_label_pc_92ec.preheader ], [ %v1_92ec, %dec_label_pc_92dc ]
  %v0_92e4 = add i32 %v0_92e4.in, 8
  %v1_92ec = add i32 %v0_92ec, 1
  store i32 %v1_92ec, i32* @lr, align 4
  %v9_92f0 = icmp eq i32 %v1_92ac, %v1_92ec
  store i32 %v0_92e4, i32* %r1.global-to-local, align 4
  br i1 %v9_92f0, label %dec_label_pc_92fc, label %dec_label_pc_92dc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec, %dec_label_pc_9304, %dec_label_pc_92ac
  store i32 %v3_92b4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_9304:                                ; preds = %dec_label_pc_92dc, %dec_label_pc_92c0
  %v0_9304 = phi i32 [ %v0_92c0, %dec_label_pc_92c0 ], [ %v0_92e4, %dec_label_pc_92dc ]
  %v1_9304 = inttoptr i32 %v0_9304 to i32*
  %v2_9304 = load i32, i32* %v1_9304, align 4
  %v2_9308 = icmp eq i32 %v2_9304, 0
  br i1 %v2_9308, label %dec_label_pc_92fc, label %dec_label_pc_9310

dec_label_pc_9310:                                ; preds = %dec_label_pc_9304
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_92b4, i32* @r4, align 4
  %v2_9318 = inttoptr i32 %v2_9304 to i8*
  %v3_9318 = call i32 @function_11654(i8* %v2_9318, i32 10)
  ret i32 %v3_9318

; uselistorder directives
  uselistorder i32 %v1_92ec, { 1, 2, 0 }
  uselistorder i32 %v0_92e4, { 1, 0, 2 }
  uselistorder i32 %v0_92e4.in, { 1, 0 }
  uselistorder i32 %v1_92c4, { 1, 0 }
  uselistorder i32 %v0_92c0, { 1, 0, 2 }
  uselistorder i32 %v3_92b4, { 1, 0 }
  uselistorder i32 %v1_92ac, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_92fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
}

define i32 @function_931c(i32 %arg1) local_unnamed_addr {
dec_label_pc_931c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_931c = load i32, i32* @r4, align 4
  store i32 %v3_931c, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9328 = call i32* @calloc(i32 1, i32 8)
  %v3_9328 = ptrtoint i32* %v2_9328 to i32
  store i32 ptrtoint (i8** @global_var_1a1c4.73 to i32), i32* %r4.global-to-local, align 4
  %v2_9330 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9330 = zext i8 %v2_9330 to i32
  store i32 ptrtoint (i32* @global_var_1a1c8.75 to i32), i32* %r6.global-to-local, align 4
  store i32 40052, i32* %r2.global-to-local, align 4
  store i32 %v3_9328, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9344 = mul nuw nsw i32 %v3_9330, 4
  store i32 %v3_9344, i32* %r1.global-to-local, align 4
  %v2_9348 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 40052, i32* %v2_9328, align 4
  %v0_9350 = load i32, i32* %r3.global-to-local, align 4
  %v1_9350 = trunc i32 %v0_9350 to i8
  %v2_9350 = load i32, i32* %r5.global-to-local, align 4
  %v3_9350 = add i32 %v2_9350, 4
  %v4_9350 = inttoptr i32 %v3_9350 to i8*
  store i8 %v1_9350, i8* %v4_9350, align 1
  %v0_9354 = load i32, i32* %r1.global-to-local, align 4
  %v1_9354 = add i32 %v0_9354, 4
  store i32 %v1_9354, i32* %r1.global-to-local, align 4
  %v4_9358 = inttoptr i32 %v2_9348 to i32*
  %v5_9358 = call i32* @realloc(i32* %v4_9358, i32 %v1_9354)
  %v7_9358 = ptrtoint i32* %v5_9358 to i32
  %v2_935c = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_935c = zext i8 %v2_935c to i32
  store i32 %v3_935c, i32* %r3.global-to-local, align 4
  store i32 %v7_9358, i32* %ip.global-to-local, align 4
  %v0_9364 = load i32, i32* %r5.global-to-local, align 4
  %v5_9364 = mul nuw nsw i32 %v3_935c, 4
  %v6_9364 = add i32 %v5_9364, %v7_9358
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v0_9364, i32* %v7_9364, align 4
  store i32 ptrtoint (i8* @global_var_1a1c5.81 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9374 = load i32, i32* %r4.global-to-local, align 4
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  store i8 ptrtoint (i8* @global_var_1a1c5.81 to i8), i8* %v3_9374, align 1
  %v0_9378 = load i32, i32* %ip.global-to-local, align 4
  %v1_9378 = load i32, i32* %r6.global-to-local, align 4
  %v2_9378 = inttoptr i32 %v1_9378 to i32*
  store i32 %v0_9378, i32* %v2_9378, align 4
  %v2_937c = call i32* @calloc(i32 1, i32 8)
  %v3_937c = ptrtoint i32* %v2_937c to i32
  %v2_9380 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9380 = zext i8 %v2_9380 to i32
  store i32 ptrtoint (i32* @global_var_b198.83 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_937c, i32* %r5.global-to-local, align 4
  %v3_9390 = mul nuw nsw i32 %v3_9380, 4
  store i32 %v3_9390, i32* %r1.global-to-local, align 4
  %v2_9394 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_b198.83 to i32), i32* %v2_937c, align 4
  %v2_939c = load i32, i32* %r5.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 4
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 1, i8* %v4_939c, align 1
  %v0_93a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_93a0 = add i32 %v0_93a0, 4
  store i32 %v1_93a0, i32* %r1.global-to-local, align 4
  %v3_93a4 = inttoptr i32 %v2_9394 to i32*
  %v4_93a4 = call i32* @realloc(i32* %v3_93a4, i32 %v1_93a0)
  %v6_93a4 = ptrtoint i32* %v4_93a4 to i32
  %v2_93a8 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_93a8 = zext i8 %v2_93a8 to i32
  store i32 %v3_93a8, i32* %r3.global-to-local, align 4
  store i32 %v6_93a4, i32* %ip.global-to-local, align 4
  %v0_93b0 = load i32, i32* %r5.global-to-local, align 4
  %v5_93b0 = mul nuw nsw i32 %v3_93a8, 4
  %v6_93b0 = add i32 %v5_93b0, %v6_93a4
  %v7_93b0 = inttoptr i32 %v6_93b0 to i32*
  store i32 %v0_93b0, i32* %v7_93b0, align 4
  %v0_93b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_93b4 = add i32 %v1_93b4, %v0_93b4
  store i32 %v2_93b4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_93c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_93c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_93c0 = inttoptr i32 %v1_93c0 to i32*
  store i32 %v0_93c0, i32* %v2_93c0, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = inttoptr i32 %v2_93c4 to i8*
  store i8 %v1_93c4, i8* %v3_93c4, align 1
  %v2_93c8 = call i32* @calloc(i32 %v1_93b4, i32 8)
  %v4_93c8 = ptrtoint i32* %v2_93c8 to i32
  %v2_93cc = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_93cc = zext i8 %v2_93cc to i32
  store i32 ptrtoint (i32* @global_var_b65c.85 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_93c8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_93dc = mul nuw nsw i32 %v3_93cc, 4
  store i32 %v3_93dc, i32* %r1.global-to-local, align 4
  %v2_93e0 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_b65c.85 to i32), i32* %v2_93c8, align 4
  %v0_93e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93e8 = trunc i32 %v0_93e8 to i8
  %v2_93e8 = load i32, i32* %r5.global-to-local, align 4
  %v3_93e8 = add i32 %v2_93e8, 4
  %v4_93e8 = inttoptr i32 %v3_93e8 to i8*
  store i8 %v1_93e8, i8* %v4_93e8, align 1
  %v0_93ec = load i32, i32* %r1.global-to-local, align 4
  %v1_93ec = add i32 %v0_93ec, 4
  store i32 %v1_93ec, i32* %r1.global-to-local, align 4
  %v4_93f0 = inttoptr i32 %v2_93e0 to i32*
  %v5_93f0 = call i32* @realloc(i32* %v4_93f0, i32 %v1_93ec)
  %v7_93f0 = ptrtoint i32* %v5_93f0 to i32
  %v2_93f4 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_93f4 = zext i8 %v2_93f4 to i32
  store i32 %v3_93f4, i32* %r3.global-to-local, align 4
  store i32 %v7_93f0, i32* %ip.global-to-local, align 4
  %v1_93fc = load i32, i32* %r8.global-to-local, align 4
  %v2_93fc = add i32 %v1_93fc, %v3_93f4
  store i32 %v2_93fc, i32* %r2.global-to-local, align 4
  %v0_9400 = load i32, i32* %r5.global-to-local, align 4
  %v5_9400 = mul nuw nsw i32 %v3_93f4, 4
  %v6_9400 = add i32 %v5_9400, %v7_93f0
  %v7_9400 = inttoptr i32 %v6_9400 to i32*
  store i32 %v0_9400, i32* %v7_9400, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9408 = load i32, i32* %r8.global-to-local, align 4
  %v0_940c = load i32, i32* %r2.global-to-local, align 4
  %v1_940c = trunc i32 %v0_940c to i8
  %v2_940c = load i32, i32* %r4.global-to-local, align 4
  %v3_940c = inttoptr i32 %v2_940c to i8*
  store i8 %v1_940c, i8* %v3_940c, align 1
  %v0_9410 = load i32, i32* %ip.global-to-local, align 4
  %v1_9410 = load i32, i32* %r6.global-to-local, align 4
  %v2_9410 = inttoptr i32 %v1_9410 to i32*
  store i32 %v0_9410, i32* %v2_9410, align 4
  %v2_9414 = call i32* @calloc(i32 %v0_9408, i32 8)
  %v3_9414 = ptrtoint i32* %v2_9414 to i32
  %v2_9418 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9418 = zext i8 %v2_9418 to i32
  store i32 ptrtoint (i32* @global_var_96a4.87 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_9414, i32* %r5.global-to-local, align 4
  %v3_9428 = mul nuw nsw i32 %v3_9418, 4
  store i32 %v3_9428, i32* %r1.global-to-local, align 4
  %v2_942c = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_96a4.87 to i32), i32* %v2_9414, align 4
  %v2_9434 = load i32, i32* %r5.global-to-local, align 4
  %v3_9434 = add i32 %v2_9434, 4
  %v4_9434 = inttoptr i32 %v3_9434 to i8*
  store i8 8, i8* %v4_9434, align 1
  %v0_9438 = load i32, i32* %r1.global-to-local, align 4
  %v1_9438 = add i32 %v0_9438, 4
  store i32 %v1_9438, i32* %r1.global-to-local, align 4
  %v3_943c = inttoptr i32 %v2_942c to i32*
  %v4_943c = call i32* @realloc(i32* %v3_943c, i32 %v1_9438)
  %v6_943c = ptrtoint i32* %v4_943c to i32
  %v2_9440 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9440 = zext i8 %v2_9440 to i32
  store i32 %v3_9440, i32* %r3.global-to-local, align 4
  store i32 %v6_943c, i32* %ip.global-to-local, align 4
  %v0_9448 = load i32, i32* %r5.global-to-local, align 4
  %v5_9448 = mul nuw nsw i32 %v3_9440, 4
  %v6_9448 = add i32 %v5_9448, %v6_943c
  %v7_9448 = inttoptr i32 %v6_9448 to i32*
  store i32 %v0_9448, i32* %v7_9448, align 4
  %v0_944c = load i32, i32* %r3.global-to-local, align 4
  %v1_944c = load i32, i32* %r8.global-to-local, align 4
  %v2_944c = add i32 %v1_944c, %v0_944c
  store i32 %v2_944c, i32* %r2.global-to-local, align 4
  %v0_9450 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9450, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %ip.global-to-local, align 4
  %v1_9458 = load i32, i32* %r6.global-to-local, align 4
  %v2_9458 = inttoptr i32 %v1_9458 to i32*
  store i32 %v0_9458, i32* %v2_9458, align 4
  %v0_945c = load i32, i32* %r2.global-to-local, align 4
  %v1_945c = trunc i32 %v0_945c to i8
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = inttoptr i32 %v2_945c to i8*
  store i8 %v1_945c, i8* %v3_945c, align 1
  %v2_9460 = call i32* @calloc(i32 %v1_944c, i32 %v0_9450)
  %v4_9460 = ptrtoint i32* %v2_9460 to i32
  %v2_9464 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9464 = zext i8 %v2_9464 to i32
  store i32 ptrtoint (i32* @global_var_d678.89 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9460, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_9474 = mul nuw nsw i32 %v3_9464, 4
  store i32 %v3_9474, i32* %r1.global-to-local, align 4
  %v2_9478 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_d678.89 to i32), i32* %v2_9460, align 4
  %v0_9480 = load i32, i32* %r3.global-to-local, align 4
  %v1_9480 = trunc i32 %v0_9480 to i8
  %v2_9480 = load i32, i32* %r5.global-to-local, align 4
  %v3_9480 = add i32 %v2_9480, 4
  %v4_9480 = inttoptr i32 %v3_9480 to i8*
  store i8 %v1_9480, i8* %v4_9480, align 1
  %v0_9484 = load i32, i32* %r1.global-to-local, align 4
  %v1_9484 = add i32 %v0_9484, 4
  store i32 %v1_9484, i32* %r1.global-to-local, align 4
  %v4_9488 = inttoptr i32 %v2_9478 to i32*
  %v5_9488 = call i32* @realloc(i32* %v4_9488, i32 %v1_9484)
  %v7_9488 = ptrtoint i32* %v5_9488 to i32
  %v2_948c = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_948c = zext i8 %v2_948c to i32
  store i32 %v3_948c, i32* %r3.global-to-local, align 4
  store i32 %v7_9488, i32* %ip.global-to-local, align 4
  %v0_9494 = load i32, i32* %r5.global-to-local, align 4
  %v5_9494 = mul nuw nsw i32 %v3_948c, 4
  %v6_9494 = add i32 %v5_9494, %v7_9488
  %v7_9494 = inttoptr i32 %v6_9494 to i32*
  store i32 %v0_9494, i32* %v7_9494, align 4
  %v0_9498 = load i32, i32* %r3.global-to-local, align 4
  %v1_9498 = load i32, i32* %r8.global-to-local, align 4
  %v2_9498 = add i32 %v1_9498, %v0_9498
  store i32 %v2_9498, i32* %r2.global-to-local, align 4
  %v0_949c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_949c, i32* %r1.global-to-local, align 4
  %v0_94a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_94a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_94a4 = inttoptr i32 %v1_94a4 to i32*
  store i32 %v0_94a4, i32* %v2_94a4, align 4
  %v0_94a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a8 = trunc i32 %v0_94a8 to i8
  %v2_94a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a8 = inttoptr i32 %v2_94a8 to i8*
  store i8 %v1_94a8, i8* %v3_94a8, align 1
  %v2_94ac = call i32* @calloc(i32 %v1_9498, i32 %v0_949c)
  %v4_94ac = ptrtoint i32* %v2_94ac to i32
  %v2_94b0 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_94b0 = zext i8 %v2_94b0 to i32
  store i32 ptrtoint (i32* @global_var_cf04.91 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94ac, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_94c0 = mul nuw nsw i32 %v3_94b0, 4
  store i32 %v3_94c0, i32* %r1.global-to-local, align 4
  %v2_94c4 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_cf04.91 to i32), i32* %v2_94ac, align 4
  %v0_94cc = load i32, i32* %r3.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* %r5.global-to-local, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_94d0 = add i32 %v0_94d0, 4
  store i32 %v1_94d0, i32* %r1.global-to-local, align 4
  %v4_94d4 = inttoptr i32 %v2_94c4 to i32*
  %v5_94d4 = call i32* @realloc(i32* %v4_94d4, i32 %v1_94d0)
  %v7_94d4 = ptrtoint i32* %v5_94d4 to i32
  %v2_94d8 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_94d8 = zext i8 %v2_94d8 to i32
  store i32 %v3_94d8, i32* %r3.global-to-local, align 4
  store i32 %v7_94d4, i32* %ip.global-to-local, align 4
  %v0_94e0 = load i32, i32* %r5.global-to-local, align 4
  %v5_94e0 = mul nuw nsw i32 %v3_94d8, 4
  %v6_94e0 = add i32 %v5_94e0, %v7_94d4
  %v7_94e0 = inttoptr i32 %v6_94e0 to i32*
  store i32 %v0_94e0, i32* %v7_94e0, align 4
  %v0_94e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, %v0_94e4
  store i32 %v2_94e4, i32* %r2.global-to-local, align 4
  %v0_94e8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94e8, i32* %r1.global-to-local, align 4
  %v0_94f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_94f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_94f0 = inttoptr i32 %v1_94f0 to i32*
  store i32 %v0_94f0, i32* %v2_94f0, align 4
  %v0_94f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94f4 = trunc i32 %v0_94f4 to i8
  %v2_94f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_94f4 = inttoptr i32 %v2_94f4 to i8*
  store i8 %v1_94f4, i8* %v3_94f4, align 1
  %v2_94f8 = call i32* @calloc(i32 %v1_94e4, i32 %v0_94e8)
  %v4_94f8 = ptrtoint i32* %v2_94f8 to i32
  %v2_94fc = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_94fc = zext i8 %v2_94fc to i32
  store i32 ptrtoint (i32* @global_var_c688.93 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94f8, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_950c = mul nuw nsw i32 %v3_94fc, 4
  store i32 %v3_950c, i32* %r1.global-to-local, align 4
  %v2_9510 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_c688.93 to i32), i32* %v2_94f8, align 4
  %v0_9518 = load i32, i32* %r3.global-to-local, align 4
  %v1_9518 = trunc i32 %v0_9518 to i8
  %v2_9518 = load i32, i32* %r5.global-to-local, align 4
  %v3_9518 = add i32 %v2_9518, 4
  %v4_9518 = inttoptr i32 %v3_9518 to i8*
  store i8 %v1_9518, i8* %v4_9518, align 1
  %v0_951c = load i32, i32* %r1.global-to-local, align 4
  %v1_951c = add i32 %v0_951c, 4
  store i32 %v1_951c, i32* %r1.global-to-local, align 4
  %v4_9520 = inttoptr i32 %v2_9510 to i32*
  %v5_9520 = call i32* @realloc(i32* %v4_9520, i32 %v1_951c)
  %v7_9520 = ptrtoint i32* %v5_9520 to i32
  %v2_9524 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9524 = zext i8 %v2_9524 to i32
  store i32 %v3_9524, i32* %r3.global-to-local, align 4
  store i32 %v7_9520, i32* %ip.global-to-local, align 4
  %v0_952c = load i32, i32* %r5.global-to-local, align 4
  %v5_952c = mul nuw nsw i32 %v3_9524, 4
  %v6_952c = add i32 %v5_952c, %v7_9520
  %v7_952c = inttoptr i32 %v6_952c to i32*
  store i32 %v0_952c, i32* %v7_952c, align 4
  %v0_9530 = load i32, i32* %r3.global-to-local, align 4
  %v1_9530 = load i32, i32* %r8.global-to-local, align 4
  %v2_9530 = add i32 %v1_9530, %v0_9530
  store i32 %v2_9530, i32* %r2.global-to-local, align 4
  %v0_9534 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9534, i32* %r1.global-to-local, align 4
  %v0_953c = load i32, i32* %ip.global-to-local, align 4
  %v1_953c = load i32, i32* %r6.global-to-local, align 4
  %v2_953c = inttoptr i32 %v1_953c to i32*
  store i32 %v0_953c, i32* %v2_953c, align 4
  %v0_9540 = load i32, i32* %r2.global-to-local, align 4
  %v1_9540 = trunc i32 %v0_9540 to i8
  %v2_9540 = load i32, i32* %r4.global-to-local, align 4
  %v3_9540 = inttoptr i32 %v2_9540 to i8*
  store i8 %v1_9540, i8* %v3_9540, align 1
  %v2_9544 = call i32* @calloc(i32 %v1_9530, i32 %v0_9534)
  %v4_9544 = ptrtoint i32* %v2_9544 to i32
  %v2_9548 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9548 = zext i8 %v2_9548 to i32
  store i32 48652, i32* %r2.global-to-local, align 4
  store i32 %v4_9544, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_9558 = mul nuw nsw i32 %v3_9548, 4
  store i32 %v3_9558, i32* %r1.global-to-local, align 4
  %v2_955c = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 48652, i32* %v2_9544, align 4
  %v0_9564 = load i32, i32* %r3.global-to-local, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* %r5.global-to-local, align 4
  %v3_9564 = add i32 %v2_9564, 4
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* %r1.global-to-local, align 4
  %v1_9568 = add i32 %v0_9568, 4
  store i32 %v1_9568, i32* %r1.global-to-local, align 4
  %v4_956c = inttoptr i32 %v2_955c to i32*
  %v5_956c = call i32* @realloc(i32* %v4_956c, i32 %v1_9568)
  %v7_956c = ptrtoint i32* %v5_956c to i32
  %v2_9570 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9570 = zext i8 %v2_9570 to i32
  store i32 %v3_9570, i32* %r3.global-to-local, align 4
  store i32 %v7_956c, i32* %ip.global-to-local, align 4
  %v0_9578 = load i32, i32* %r5.global-to-local, align 4
  %v5_9578 = mul nuw nsw i32 %v3_9570, 4
  %v6_9578 = add i32 %v5_9578, %v7_956c
  %v7_9578 = inttoptr i32 %v6_9578 to i32*
  store i32 %v0_9578, i32* %v7_9578, align 4
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = load i32, i32* %r8.global-to-local, align 4
  %v2_957c = add i32 %v1_957c, %v0_957c
  store i32 %v2_957c, i32* %r2.global-to-local, align 4
  %v0_9580 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9580, i32* %r1.global-to-local, align 4
  %v0_9588 = load i32, i32* %ip.global-to-local, align 4
  %v1_9588 = load i32, i32* %r6.global-to-local, align 4
  %v2_9588 = inttoptr i32 %v1_9588 to i32*
  store i32 %v0_9588, i32* %v2_9588, align 4
  %v0_958c = load i32, i32* %r2.global-to-local, align 4
  %v1_958c = trunc i32 %v0_958c to i8
  %v2_958c = load i32, i32* %r4.global-to-local, align 4
  %v3_958c = inttoptr i32 %v2_958c to i8*
  store i8 %v1_958c, i8* %v3_958c, align 1
  %v2_9590 = call i32* @calloc(i32 %v1_957c, i32 %v0_9580)
  %v4_9590 = ptrtoint i32* %v2_9590 to i32
  %v2_9594 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9594 = zext i8 %v2_9594 to i32
  store i32 ptrtoint (i32* @global_var_aa7c.96 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9590, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_95a4 = mul nuw nsw i32 %v3_9594, 4
  store i32 %v3_95a4, i32* %r1.global-to-local, align 4
  %v2_95a8 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_aa7c.96 to i32), i32* %v2_9590, align 4
  %v0_95b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95b0 = trunc i32 %v0_95b0 to i8
  %v2_95b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_95b0 = add i32 %v2_95b0, 4
  %v4_95b0 = inttoptr i32 %v3_95b0 to i8*
  store i8 %v1_95b0, i8* %v4_95b0, align 1
  %v0_95b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95b4 = add i32 %v0_95b4, 4
  store i32 %v1_95b4, i32* %r1.global-to-local, align 4
  %v4_95b8 = inttoptr i32 %v2_95a8 to i32*
  %v5_95b8 = call i32* @realloc(i32* %v4_95b8, i32 %v1_95b4)
  %v7_95b8 = ptrtoint i32* %v5_95b8 to i32
  %v2_95bc = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_95bc = zext i8 %v2_95bc to i32
  store i32 %v3_95bc, i32* %r3.global-to-local, align 4
  store i32 %v7_95b8, i32* %ip.global-to-local, align 4
  %v0_95c4 = load i32, i32* %r5.global-to-local, align 4
  %v5_95c4 = mul nuw nsw i32 %v3_95bc, 4
  %v6_95c4 = add i32 %v5_95c4, %v7_95b8
  %v7_95c4 = inttoptr i32 %v6_95c4 to i32*
  store i32 %v0_95c4, i32* %v7_95c4, align 4
  %v0_95c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_95c8 = add i32 %v1_95c8, %v0_95c8
  store i32 %v2_95c8, i32* %r2.global-to-local, align 4
  %v0_95cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95cc, i32* %r1.global-to-local, align 4
  %v0_95d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_95d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_95d4 = inttoptr i32 %v1_95d4 to i32*
  store i32 %v0_95d4, i32* %v2_95d4, align 4
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = trunc i32 %v0_95d8 to i8
  %v2_95d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_95d8 = inttoptr i32 %v2_95d8 to i8*
  store i8 %v1_95d8, i8* %v3_95d8, align 1
  %v2_95dc = call i32* @calloc(i32 %v1_95c8, i32 %v0_95cc)
  %v4_95dc = ptrtoint i32* %v2_95dc to i32
  %v2_95e0 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_95e0 = zext i8 %v2_95e0 to i32
  store i32 ptrtoint (i32* @global_var_a300.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_95dc, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_95f0 = mul nuw nsw i32 %v3_95e0, 4
  store i32 %v3_95f0, i32* %r1.global-to-local, align 4
  %v2_95f4 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 ptrtoint (i32* @global_var_a300.98 to i32), i32* %v2_95dc, align 4
  %v0_95fc = load i32, i32* %r3.global-to-local, align 4
  %v1_95fc = trunc i32 %v0_95fc to i8
  %v2_95fc = load i32, i32* %r5.global-to-local, align 4
  %v3_95fc = add i32 %v2_95fc, 4
  %v4_95fc = inttoptr i32 %v3_95fc to i8*
  store i8 %v1_95fc, i8* %v4_95fc, align 1
  %v0_9600 = load i32, i32* %r1.global-to-local, align 4
  %v1_9600 = add i32 %v0_9600, 4
  store i32 %v1_9600, i32* %r1.global-to-local, align 4
  %v4_9604 = inttoptr i32 %v2_95f4 to i32*
  %v5_9604 = call i32* @realloc(i32* %v4_9604, i32 %v1_9600)
  %v7_9604 = ptrtoint i32* %v5_9604 to i32
  %v2_9608 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9608 = zext i8 %v2_9608 to i32
  store i32 %v3_9608, i32* %r3.global-to-local, align 4
  store i32 %v7_9604, i32* %ip.global-to-local, align 4
  %v0_9610 = load i32, i32* %r5.global-to-local, align 4
  %v5_9610 = mul nuw nsw i32 %v3_9608, 4
  %v6_9610 = add i32 %v5_9610, %v7_9604
  %v7_9610 = inttoptr i32 %v6_9610 to i32*
  store i32 %v0_9610, i32* %v7_9610, align 4
  %v0_9614 = load i32, i32* %r3.global-to-local, align 4
  %v1_9614 = load i32, i32* %r8.global-to-local, align 4
  %v2_9614 = add i32 %v1_9614, %v0_9614
  store i32 %v2_9614, i32* %r2.global-to-local, align 4
  %v0_9618 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9618, i32* %r1.global-to-local, align 4
  %v1_9620 = trunc i32 %v2_9614 to i8
  %v2_9620 = load i32, i32* %r4.global-to-local, align 4
  %v3_9620 = inttoptr i32 %v2_9620 to i8*
  store i8 %v1_9620, i8* %v3_9620, align 1
  %v0_9624 = load i32, i32* %ip.global-to-local, align 4
  %v1_9624 = load i32, i32* %r6.global-to-local, align 4
  %v2_9624 = inttoptr i32 %v1_9624 to i32*
  store i32 %v0_9624, i32* %v2_9624, align 4
  %v2_9628 = call i32* @calloc(i32 %v1_9614, i32 %v0_9618)
  %v4_9628 = ptrtoint i32* %v2_9628 to i32
  %v2_962c = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_962c = zext i8 %v2_962c to i32
  store i32 39308, i32* %r2.global-to-local, align 4
  store i32 %v4_9628, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_963c = mul nuw nsw i32 %v3_962c, 4
  store i32 %v3_963c, i32* %r1.global-to-local, align 4
  %v2_9640 = load i32, i32* @global_var_1a1c8.75, align 4
  store i32 39308, i32* %v2_9628, align 4
  %v0_9648 = load i32, i32* %r3.global-to-local, align 4
  %v1_9648 = trunc i32 %v0_9648 to i8
  %v2_9648 = load i32, i32* %r5.global-to-local, align 4
  %v3_9648 = add i32 %v2_9648, 4
  %v4_9648 = inttoptr i32 %v3_9648 to i8*
  store i8 %v1_9648, i8* %v4_9648, align 1
  %v0_964c = load i32, i32* %r1.global-to-local, align 4
  %v1_964c = add i32 %v0_964c, 4
  store i32 %v1_964c, i32* %r1.global-to-local, align 4
  %v4_9650 = inttoptr i32 %v2_9640 to i32*
  %v5_9650 = call i32* @realloc(i32* %v4_9650, i32 %v1_964c)
  %v6_9650 = ptrtoint i32* %v5_9650 to i32
  %v2_9654 = load i8, i8* bitcast (i8** @global_var_1a1c4.73 to i8*), align 4
  %v3_9654 = zext i8 %v2_9654 to i32
  store i32 %v3_9654, i32* %r3.global-to-local, align 4
  %v1_9658 = load i32, i32* %r6.global-to-local, align 4
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  store i32 %v6_9650, i32* %v2_9658, align 4
  %v0_965c = load i32, i32* %r5.global-to-local, align 4
  %v2_965c = load i32, i32* %r3.global-to-local, align 4
  %v5_965c = mul i32 %v2_965c, 4
  %v6_965c = add i32 %v5_965c, %v6_9650
  %v7_965c = inttoptr i32 %v6_965c to i32*
  store i32 %v0_965c, i32* %v7_965c, align 4
  %v0_9660 = load i32, i32* %r3.global-to-local, align 4
  %v1_9660 = load i32, i32* %r8.global-to-local, align 4
  %v2_9660 = add i32 %v1_9660, %v0_9660
  store i32 %v2_9660, i32* %r2.global-to-local, align 4
  %v1_9668 = trunc i32 %v2_9660 to i8
  %v2_9668 = load i32, i32* %r4.global-to-local, align 4
  %v3_9668 = inttoptr i32 %v2_9668 to i8*
  store i8 %v1_9668, i8* %v3_9668, align 1
  %v2_966c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_966c, i32* @r4, align 4
  ret i32 %v1_9660

; uselistorder directives
  uselistorder i32 %v1_9660, { 1, 0 }
  uselistorder i32 %v1_9614, { 1, 0 }
  uselistorder i32 %v1_95c8, { 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0 }
  uselistorder i32 %v1_9530, { 1, 0 }
  uselistorder i32 %v1_94e4, { 1, 0 }
  uselistorder i32 %v1_9498, { 1, 0 }
  uselistorder i32 %v1_944c, { 1, 0 }
  uselistorder i32 %v3_93f4, { 1, 0, 2 }
  uselistorder i32 %v1_93b4, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a1c4.73 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_1a1c4.73, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a1c4.73 to i32), { 1, 0 }
}

define i32 @function_96a4(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_96a4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_96a4 = load i32, i32* @r4, align 4
  %v6_96a4 = load i32, i32* @r5, align 4
  %v24_96a4 = load i32, i32* @fp, align 4
  %v1_96a8 = urem i32 %arg1, 256
  store i32 %v1_96a8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_96c0 = urem i32 %arg3, 256
  store i32 %v1_96c0, i32* @r4, align 4
  %v2_96c4 = call i32* @calloc(i32 %v1_96a8, i32 4)
  %v4_96c4 = ptrtoint i32* %v2_96c4 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_96c4, i32* @sl, align 4
  %v0_96d0 = load i32, i32* @r7, align 4
  %v2_96d4 = call i32* @calloc(i32 %v0_96d0, i32 4)
  %v3_96d4 = ptrtoint i32* %v2_96d4 to i32
  store i32 65535, i32* @r5, align 4
  %v0_96e0 = load i32, i32* @r6, align 4
  store i32 %v0_96e0, i32* %r1.global-to-local, align 4
  store i32 %v3_96d4, i32* @sb, align 4
  %v0_96f0 = load i32, i32* @r4, align 4
  %v4_96f4 = inttoptr i32 %v0_96e0 to i32*
  %v5_96f4 = call i32 @function_92ac(i32 %v0_96f0, i32* %v4_96f4, i32 7, i32 65535)
  %v3_96fc = urem i32 %v5_96f4, 65536
  %v0_9700 = load i32, i32* @r6, align 4
  store i32 %v0_9700, i32* %r1.global-to-local, align 4
  %v0_9708 = load i32, i32* @r5, align 4
  %v0_970c = load i32, i32* @r4, align 4
  %v5_9714 = inttoptr i32 %v0_9700 to i32*
  %v6_9714 = call i32 @function_92ac(i32 %v0_970c, i32* %v5_9714, i32 6, i32 %v0_9708)
  %v0_9718 = load i32, i32* @r6, align 4
  store i32 %v0_9718, i32* %r1.global-to-local, align 4
  %v3_971c = mul i32 %v6_9714, 65536
  store i32 %v3_971c, i32* %fp.global-to-local, align 4
  %v0_9728 = load i32, i32* @r4, align 4
  %v4_972c = inttoptr i32 %v0_9718 to i32*
  %v5_972c = call i32 @function_92ac(i32 %v0_9728, i32* %v4_972c, i32 0, i32 512)
  %v0_9738 = load i32, i32* @r6, align 4
  store i32 %v0_9738, i32* %r1.global-to-local, align 4
  %v0_973c = load i32, i32* @r4, align 4
  %v3_9744 = urem i32 %v5_972c, 65536
  store i32 %v3_9744, i32* @r6, align 4
  %v4_9748 = inttoptr i32 %v0_9738 to i32*
  %v5_9748 = call i32 @function_92ac(i32 %v0_973c, i32* %v4_9748, i32 1, i32 1)
  %v0_974c = load i32, i32* %fp.global-to-local, align 4
  %v3_974c = udiv i32 %v0_974c, 65536
  store i32 %v3_974c, i32* %r4.global-to-local, align 4
  %v1_9754 = load i32, i32* @r5, align 4
  %v9_9754 = icmp eq i32 %v3_974c, %v1_9754
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9754, label %dec_label_pc_977c, label %bb

bb:                                               ; preds = %dec_label_pc_96a4
  %v2_9768 = mul nuw nsw i32 %v3_974c, 256
  %v4_976c = and i32 %v2_9768, 65280
  %v1_9770 = urem i32 %v5_9748, 256
  store i32 %v1_9770, i32* @r8, align 4
  %v5_9774 = udiv i32 %v0_974c, 16777216
  %v6_9774 = or i32 %v4_976c, %v5_9774
  br label %dec_label_pc_9788

dec_label_pc_977c:                                ; preds = %dec_label_pc_96a4
  %v1_97708 = urem i32 %v5_9748, 256
  store i32 %v1_97708, i32* @r8, align 4
  %v0_977c = call i32 @function_f28c()
  %v3_9784 = urem i32 %v0_977c, 65536
  br label %dec_label_pc_9788

dec_label_pc_9788:                                ; preds = %bb, %dec_label_pc_977c
  %storemerge18 = phi i32 [ %v6_9774, %bb ], [ %v3_9784, %dec_label_pc_977c ]
  store i32 %storemerge18, i32* %fp.global-to-local, align 4
  %v0_9788 = load i32, i32* @r7, align 4
  %tmp43 = icmp slt i32 %v0_9788, 1
  br i1 %tmp43, label %dec_label_pc_9934.preheader.thread, label %dec_label_pc_9790

dec_label_pc_9934.preheader.thread:               ; preds = %dec_label_pc_9788
  br label %dec_label_pc_98fc

dec_label_pc_9934.preheader:                      ; preds = %dec_label_pc_9890
  %tmp454850 = icmp slt i32 %v1_97e4, 1
  br i1 %tmp454850, label %dec_label_pc_98fc, label %dec_label_pc_9900.lr.ph

dec_label_pc_9790:                                ; preds = %dec_label_pc_9788
  store i32 %v3_96fc, i32* %r1.global-to-local, align 4
  %v3_9794 = udiv i32 %v5_96f4, 256
  %v5_97a0 = trunc i32 %v3_9794 to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_97b8 = udiv i32 %v5_96f4, 65536
  %v4_97c8 = trunc i32 %v3_97b8 to i8
  store i8 %v4_97c8, i8* %stack_var_-80, align 1
  %v3_98dc = icmp eq i32 %v3_96fc, 65535
  %v2_9800 = ptrtoint i32* %stack_var_-52 to i32
  %tmp44 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_98c0

dec_label_pc_97d0:                                ; preds = %dec_label_pc_98c0
  %v2_97d0 = load i8, i8* %stack_var_-80, align 1
  %v3_97d0 = sext i8 %v2_97d0 to i32
  store i32 %v3_97d0, i32* %r1.global-to-local, align 4
  %v2_97d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_97d4 = add i32 %v2_97d4, 2
  %v4_97d4 = inttoptr i32 %v3_97d4 to i8*
  store i8 %v5_97a0, i8* %v4_97d4, align 1
  %v0_97d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_97d8 = trunc i32 %v0_97d8 to i8
  %v2_97d8 = load i32, i32* %r5.global-to-local, align 4
  %v3_97d8 = add i32 %v2_97d8, 3
  %v4_97d8 = inttoptr i32 %v3_97d8 to i8*
  store i8 %v1_97d8, i8* %v4_97d8, align 1
  br label %dec_label_pc_97dc

dec_label_pc_97dc:                                ; preds = %dec_label_pc_98e8, %dec_label_pc_97d0
  %v1_97e4 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_97f4 = call i32 @socket(i32 2, i32 17, i32 17)
  %v7_97fc = icmp eq i32 %v3_97f4, -1
  store i32 %v2_9800, i32* %r1.global-to-local, align 4
  %v2_980c = load i32, i32* @sb, align 4
  %v3_980c = add i32 %v2_980c, %stack_var_-60.0
  %v4_980c = inttoptr i32 %v3_980c to i32*
  store i32 %v3_97f4, i32* %v4_980c, align 4
  br i1 %v7_97fc, label %dec_label_pc_9940, label %dec_label_pc_9814

dec_label_pc_9814:                                ; preds = %dec_label_pc_97dc
  store i32 2, i32* %stack_var_-52, align 4
  %v11_9834 = call i32 @bind(i32 %v3_97f4, %sockaddr* %tmp44, i32 16)
  %v0_9838 = load i32, i32* %r5.global-to-local, align 4
  %v1_9838 = add i32 %v0_9838, 20
  %v2_9838 = inttoptr i32 %v1_9838 to i8*
  %v3_9838 = load i8, i8* %v2_9838, align 1
  %tmp54 = icmp ugt i8 %v3_9838, 31
  br i1 %tmp54, label %dec_label_pc_9890, label %dec_label_pc_9844

dec_label_pc_9844:                                ; preds = %dec_label_pc_9814
  %v1_9844 = add i32 %v0_9838, 16
  %v2_9844 = inttoptr i32 %v1_9844 to i32*
  %v3_9844 = load i32, i32* %v2_9844, align 4
  store i32 %v3_9844, i32* %r4.global-to-local, align 4
  %v0_9848 = call i32 @function_f28c()
  %v1_9850 = and i32 %v3_9844, 65280
  %v3_9858 = mul i32 %v3_9844, 16777216
  %v4_985c = mul nuw nsw i32 %v1_9850, 256
  %v5_985c = or i32 %v4_985c, %v3_9858
  store i32 %v5_985c, i32* %r1.global-to-local, align 4
  %v0_9864 = load i32, i32* %r5.global-to-local, align 4
  %v1_9864 = add i32 %v0_9864, 20
  %v2_9864 = inttoptr i32 %v1_9864 to i8*
  %v3_9864 = load i8, i8* %v2_9864, align 1
  %v4_9864 = zext i8 %v3_9864 to i32
  %v2_9868 = call i32 @llvm.bswap.i32(i32 %v3_9844)
  %v7_986c = lshr i32 %v0_9848, %v4_9864
  %v8_986c = add i32 %v7_986c, %v2_9868
  %v3_9878 = mul i32 %v8_986c, 16777216
  %v1_987c = and i32 %v8_986c, 65280
  %v4_9880 = mul nuw nsw i32 %v1_987c, 256
  %v5_9880 = or i32 %v4_9880, %v3_9878
  store i32 %v5_9880, i32* %r1.global-to-local, align 4
  %v2_9888 = call i32 @llvm.bswap.i32(i32 %v8_986c)
  %v2_988c = add i32 %v0_9864, 4
  %v3_988c = inttoptr i32 %v2_988c to i32*
  store i32 %v2_9888, i32* %v3_988c, align 4
  %v0_989c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9890

dec_label_pc_9890:                                ; preds = %dec_label_pc_9814, %dec_label_pc_9844
  %v0_989c = phi i32 [ %v0_9838, %dec_label_pc_9814 ], [ %v0_989c.pre, %dec_label_pc_9844 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9898 = load i32, i32* @sb, align 4
  %v2_9898 = add i32 %v1_9898, %stack_var_-60.0
  %v3_9898 = inttoptr i32 %v2_9898 to i32*
  %v4_9898 = load i32, i32* %v3_9898, align 4
  %v1_989c = inttoptr i32 %v0_989c to %sockaddr*
  store i32 %v0_989c, i32* %r1.global-to-local, align 4
  %v5_98a0 = call i32 @connect(i32 %v4_9898, %sockaddr* %v1_989c, i32 16)
  %v1_98ac = add i32 %stack_var_-60.0, 4
  %v1_98b0 = load i32, i32* @r7, align 4
  %v9_98b0 = icmp eq i32 %v1_97e4, %v1_98b0
  %v0_98b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_98b8 = add i32 %v0_98b8, 24
  store i32 %v1_98b8, i32* %r5.global-to-local, align 4
  br i1 %v9_98b0, label %dec_label_pc_9934.preheader, label %dec_label_pc_98c0

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9890, %dec_label_pc_9790
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9790 ], [ %v1_98ac, %dec_label_pc_9890 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_9790 ], [ %v1_97e4, %dec_label_pc_9890 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_98cc = call i32* @calloc(i32 65535, i32 1)
  %v3_98cc = ptrtoint i32* %v2_98cc to i32
  store i32 %v3_96fc, i32* %r1.global-to-local, align 4
  %v2_98e0 = load i32, i32* @sl, align 4
  %v3_98e0 = add i32 %v2_98e0, %stack_var_-60.0
  %v4_98e0 = inttoptr i32 %v3_98e0 to i32*
  store i32 %v3_98cc, i32* %v4_98e0, align 4
  br i1 %v3_98dc, label %dec_label_pc_98e8, label %dec_label_pc_97d0

dec_label_pc_98e8:                                ; preds = %dec_label_pc_98c0
  %v0_98e8 = call i32 @function_f28c()
  %v1_98e8 = trunc i32 %v0_98e8 to i8
  %v4_98ec = sdiv i32 %v0_98e8, 256
  %v1_98f0 = trunc i32 %v4_98ec to i8
  %v2_98f0 = load i32, i32* %r5.global-to-local, align 4
  %v3_98f0 = add i32 %v2_98f0, 3
  %v4_98f0 = inttoptr i32 %v3_98f0 to i8*
  store i8 %v1_98f0, i8* %v4_98f0, align 1
  %v3_98f4 = load i32, i32* %r5.global-to-local, align 4
  %v4_98f4 = add i32 %v3_98f4, 2
  %v5_98f4 = inttoptr i32 %v4_98f4 to i8*
  store i8 %v1_98e8, i8* %v5_98f4, align 1
  br label %dec_label_pc_97dc

dec_label_pc_98fc:                                ; preds = %dec_label_pc_9934.loopexit, %dec_label_pc_9934.preheader.thread, %dec_label_pc_9934.preheader, %dec_label_pc_9938.loopexit, %dec_label_pc_98fc
  br label %dec_label_pc_98fc

dec_label_pc_9900:                                ; preds = %dec_label_pc_9900.lr.ph, %dec_label_pc_9938.loopexit
  %v0_9900 = load i32, i32* @r8, align 4
  %v2_9900 = icmp eq i32 %v0_9900, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9900, label %dec_label_pc_9908, label %dec_label_pc_9948

dec_label_pc_9908:                                ; preds = %dec_label_pc_9900
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9910

dec_label_pc_9910:                                ; preds = %dec_label_pc_9910, %dec_label_pc_9908
  %v0_9918 = phi i32 [ %v1_9918, %dec_label_pc_9910 ], [ 0, %dec_label_pc_9908 ]
  %v0_9910 = phi i32 [ %v1_992c, %dec_label_pc_9910 ], [ 0, %dec_label_pc_9908 ]
  %v1_9910 = load i32, i32* @sb, align 4
  %v2_9910 = add i32 %v1_9910, %v0_9910
  %v3_9910 = inttoptr i32 %v2_9910 to i32*
  %v4_9910 = load i32, i32* %v3_9910, align 4
  %v1_9914 = load i32, i32* @sl, align 4
  %v2_9914 = add i32 %v1_9914, %v0_9910
  %v3_9914 = inttoptr i32 %v2_9914 to i32*
  %v4_9914 = load i32, i32* %v3_9914, align 4
  store i32 %v4_9914, i32* %r1.global-to-local, align 4
  %v1_9918 = add i32 %v0_9918, 1
  store i32 %v1_9918, i32* %r5.global-to-local, align 4
  %v0_991c = load i32, i32* @r6, align 4
  %v4_9924 = inttoptr i32 %v4_9914 to i32*
  %v5_9924 = call i32 @send(i32 %v4_9910, i32* %v4_9924, i32 %v0_991c, i32 16384)
  %v1_9928 = load i32, i32* @r7, align 4
  %v9_9928 = icmp eq i32 %v1_9918, %v1_9928
  %v0_992c = load i32, i32* %r4.global-to-local, align 4
  %v1_992c = add i32 %v0_992c, 4
  store i32 %v1_992c, i32* %r4.global-to-local, align 4
  br i1 %v9_9928, label %dec_label_pc_9934.loopexit, label %dec_label_pc_9910

dec_label_pc_9934.loopexit:                       ; preds = %dec_label_pc_9910
  %tmp4548 = icmp slt i32 %v1_9918, 1
  br i1 %tmp4548, label %dec_label_pc_98fc, label %dec_label_pc_9900.lr.ph

dec_label_pc_9900.lr.ph:                          ; preds = %dec_label_pc_9934.preheader, %dec_label_pc_9934.loopexit
  br label %dec_label_pc_9900

dec_label_pc_9938.loopexit:                       ; preds = %dec_label_pc_9950
  %tmp45 = icmp slt i32 %v0_9978, 1
  br i1 %tmp45, label %dec_label_pc_98fc, label %dec_label_pc_9900

dec_label_pc_9940:                                ; preds = %dec_label_pc_97dc
  store i32 %v3_96a4, i32* %r4.global-to-local, align 4
  store i32 %v6_96a4, i32* %r5.global-to-local, align 4
  store i32 %v24_96a4, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9948:                                ; preds = %dec_label_pc_9900
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9950

dec_label_pc_9950:                                ; preds = %dec_label_pc_9950, %dec_label_pc_9948
  %v0_9950 = phi i32 [ %v1_997c, %dec_label_pc_9950 ], [ 0, %dec_label_pc_9948 ]
  %v1_9950 = load i32, i32* @sl, align 4
  %v2_9950 = add i32 %v1_9950, %v0_9950
  %v3_9950 = inttoptr i32 %v2_9950 to i32*
  %v4_9950 = load i32, i32* %v3_9950, align 4
  store i32 %v4_9950, i32* @r4, align 4
  %v0_9954 = load i32, i32* @r6, align 4
  store i32 %v0_9954, i32* @r1, align 4
  %v1_995c = inttoptr i32 %v4_9950 to i8*
  %v2_995c = call i32 @function_f40c(i8* %v1_995c)
  %v0_9960 = load i32, i32* @r5, align 4
  %v1_9960 = add i32 %v0_9960, 1
  store i32 %v1_9960, i32* @r5, align 4
  %v0_9964 = load i32, i32* @fp, align 4
  %v1_9964 = load i32, i32* @sb, align 4
  %v2_9964 = add i32 %v1_9964, %v0_9964
  %v3_9964 = inttoptr i32 %v2_9964 to i32*
  %v4_9964 = load i32, i32* %v3_9964, align 4
  %v0_9968 = load i32, i32* @r4, align 4
  store i32 %v0_9968, i32* %r1.global-to-local, align 4
  %v0_996c = load i32, i32* @r6, align 4
  %v4_9974 = inttoptr i32 %v0_9968 to i32*
  %v5_9974 = call i32 @send(i32 %v4_9964, i32* %v4_9974, i32 %v0_996c, i32 16384)
  %v0_9978 = load i32, i32* @r5, align 4
  %v1_9978 = load i32, i32* @r7, align 4
  %v9_9978 = icmp eq i32 %v0_9978, %v1_9978
  %v0_997c = load i32, i32* @fp, align 4
  %v1_997c = add i32 %v0_997c, 4
  store i32 %v1_997c, i32* @fp, align 4
  br i1 %v9_9978, label %dec_label_pc_9938.loopexit, label %dec_label_pc_9950

; uselistorder directives
  uselistorder i32 %v1_997c, { 1, 0 }
  uselistorder i32 %v0_9978, { 1, 0 }
  uselistorder i32 %v1_992c, { 1, 0 }
  uselistorder i32 %v1_9918, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_986c, { 1, 2, 0 }
  uselistorder i32 %v3_9844, { 1, 2, 0, 3 }
  uselistorder i32 %v3_97f4, { 1, 2, 0 }
  uselistorder i32 %v1_97e4, { 1, 2, 0 }
  uselistorder i32 %v3_974c, { 0, 2, 1 }
  uselistorder i32 %v3_96fc, { 0, 2, 1 }
  uselistorder i32 %v1_96a8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 18, 19, 3, 4, 5, 13, 14, 15, 16, 17, 6, 7, 9, 8, 10, 12, 11, 0 }
  uselistorder label %dec_label_pc_9900.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9900, { 1, 0 }
  uselistorder label %dec_label_pc_98fc, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_9890, { 1, 0 }
  uselistorder label %dec_label_pc_9788, { 1, 0 }
}

define i32 @function_998c(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_998c:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_998c = load i32, i32* @r4, align 4
  %v6_998c = load i32, i32* @r5, align 4
  %v24_998c = load i32, i32* @fp, align 4
  %v1_9990 = urem i32 %arg1, 256
  store i32 %v1_9990, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_99a8 = urem i32 %arg3, 256
  store i32 %v1_99a8, i32* @r4, align 4
  %v2_99ac = call i32* @calloc(i32 %v1_9990, i32 4)
  %v4_99ac = ptrtoint i32* %v2_99ac to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_99ac, i32* @sl, align 4
  %v0_99b8 = load i32, i32* @r7, align 4
  %v2_99bc = call i32* @calloc(i32 %v0_99b8, i32 4)
  %v3_99bc = ptrtoint i32* %v2_99bc to i32
  store i32 65535, i32* @r5, align 4
  %v0_99c8 = load i32, i32* @r6, align 4
  store i32 %v0_99c8, i32* %r1.global-to-local, align 4
  store i32 %v3_99bc, i32* @sb, align 4
  %v0_99d8 = load i32, i32* @r4, align 4
  %v4_99dc = inttoptr i32 %v0_99c8 to i32*
  %v5_99dc = call i32 @function_92ac(i32 %v0_99d8, i32* %v4_99dc, i32 7, i32 65535)
  %v3_99e4 = urem i32 %v5_99dc, 65536
  %v0_99e8 = load i32, i32* @r6, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  %v0_99f0 = load i32, i32* @r5, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @function_92ac(i32 %v0_99f4, i32* %v5_99fc, i32 6, i32 %v0_99f0)
  %v0_9a00 = load i32, i32* @r6, align 4
  store i32 %v0_9a00, i32* %r1.global-to-local, align 4
  %v3_9a04 = mul i32 %v6_99fc, 65536
  store i32 %v3_9a04, i32* %fp.global-to-local, align 4
  %v0_9a10 = load i32, i32* @r4, align 4
  %v4_9a14 = inttoptr i32 %v0_9a00 to i32*
  %v5_9a14 = call i32 @function_92ac(i32 %v0_9a10, i32* %v4_9a14, i32 0, i32 1024)
  %v0_9a20 = load i32, i32* @r6, align 4
  store i32 %v0_9a20, i32* %r1.global-to-local, align 4
  %v0_9a24 = load i32, i32* @r4, align 4
  %v3_9a2c = urem i32 %v5_9a14, 65536
  store i32 %v3_9a2c, i32* @r6, align 4
  %v4_9a30 = inttoptr i32 %v0_9a20 to i32*
  %v5_9a30 = call i32 @function_92ac(i32 %v0_9a24, i32* %v4_9a30, i32 1, i32 1)
  %v0_9a34 = load i32, i32* %fp.global-to-local, align 4
  %v3_9a34 = udiv i32 %v0_9a34, 65536
  store i32 %v3_9a34, i32* %r4.global-to-local, align 4
  %v1_9a3c = load i32, i32* @r5, align 4
  %v9_9a3c = icmp eq i32 %v3_9a34, %v1_9a3c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9a3c, label %dec_label_pc_9a64, label %bb

bb:                                               ; preds = %dec_label_pc_998c
  %v2_9a50 = mul nuw nsw i32 %v3_9a34, 256
  %v4_9a54 = and i32 %v2_9a50, 65280
  %v1_9a58 = urem i32 %v5_9a30, 256
  store i32 %v1_9a58, i32* @r8, align 4
  %v5_9a5c = udiv i32 %v0_9a34, 16777216
  %v6_9a5c = or i32 %v4_9a54, %v5_9a5c
  br label %dec_label_pc_9a70

dec_label_pc_9a64:                                ; preds = %dec_label_pc_998c
  %v1_9a587 = urem i32 %v5_9a30, 256
  store i32 %v1_9a587, i32* @r8, align 4
  %v0_9a64 = call i32 @function_f28c()
  %v3_9a6c = urem i32 %v0_9a64, 65536
  br label %dec_label_pc_9a70

dec_label_pc_9a70:                                ; preds = %bb, %dec_label_pc_9a64
  %storemerge17 = phi i32 [ %v6_9a5c, %bb ], [ %v3_9a6c, %dec_label_pc_9a64 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9a70 = load i32, i32* @r7, align 4
  %tmp42 = icmp slt i32 %v0_9a70, 1
  br i1 %tmp42, label %dec_label_pc_9c1c.preheader.thread, label %dec_label_pc_9a78

dec_label_pc_9c1c.preheader.thread:               ; preds = %dec_label_pc_9a70
  br label %dec_label_pc_9be4

dec_label_pc_9c1c.preheader:                      ; preds = %dec_label_pc_9b78
  %tmp444749 = icmp slt i32 %v1_9acc, 1
  br i1 %tmp444749, label %dec_label_pc_9be4, label %dec_label_pc_9be8.lr.ph

dec_label_pc_9a78:                                ; preds = %dec_label_pc_9a70
  store i32 %v3_99e4, i32* %r1.global-to-local, align 4
  %v3_9a7c = udiv i32 %v5_99dc, 256
  %v5_9a88 = trunc i32 %v3_9a7c to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_9aa0 = udiv i32 %v5_99dc, 65536
  %v4_9ab0 = trunc i32 %v3_9aa0 to i8
  store i8 %v4_9ab0, i8* %stack_var_-80, align 1
  %v3_9bc4 = icmp eq i32 %v3_99e4, 65535
  %v2_9ae8 = ptrtoint i32* %stack_var_-52 to i32
  %tmp43 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9ba8

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9ba8
  %v2_9ab8 = load i8, i8* %stack_var_-80, align 1
  %v3_9ab8 = sext i8 %v2_9ab8 to i32
  store i32 %v3_9ab8, i32* %r1.global-to-local, align 4
  %v2_9abc = load i32, i32* %r5.global-to-local, align 4
  %v3_9abc = add i32 %v2_9abc, 2
  %v4_9abc = inttoptr i32 %v3_9abc to i8*
  store i8 %v5_9a88, i8* %v4_9abc, align 1
  %v0_9ac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ac0 = trunc i32 %v0_9ac0 to i8
  %v2_9ac0 = load i32, i32* %r5.global-to-local, align 4
  %v3_9ac0 = add i32 %v2_9ac0, 3
  %v4_9ac0 = inttoptr i32 %v3_9ac0 to i8*
  store i8 %v1_9ac0, i8* %v4_9ac0, align 1
  br label %dec_label_pc_9ac4

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9bd0, %dec_label_pc_9ab8
  %v1_9acc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9adc = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_9ae4 = icmp eq i32 %v3_9adc, -1
  store i32 %v2_9ae8, i32* %r1.global-to-local, align 4
  %v2_9af4 = load i32, i32* @sb, align 4
  %v3_9af4 = add i32 %v2_9af4, %stack_var_-60.0
  %v4_9af4 = inttoptr i32 %v3_9af4 to i32*
  store i32 %v3_9adc, i32* %v4_9af4, align 4
  br i1 %v7_9ae4, label %dec_label_pc_9c28, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9ac4
  store i32 2, i32* %stack_var_-52, align 4
  %v11_9b1c = call i32 @bind(i32 %v3_9adc, %sockaddr* %tmp43, i32 16)
  %v0_9b20 = load i32, i32* %r5.global-to-local, align 4
  %v1_9b20 = add i32 %v0_9b20, 20
  %v2_9b20 = inttoptr i32 %v1_9b20 to i8*
  %v3_9b20 = load i8, i8* %v2_9b20, align 1
  %tmp53 = icmp ugt i8 %v3_9b20, 31
  br i1 %tmp53, label %dec_label_pc_9b78, label %dec_label_pc_9b2c

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9afc
  %v1_9b2c = add i32 %v0_9b20, 16
  %v2_9b2c = inttoptr i32 %v1_9b2c to i32*
  %v3_9b2c = load i32, i32* %v2_9b2c, align 4
  store i32 %v3_9b2c, i32* %r4.global-to-local, align 4
  %v0_9b30 = call i32 @function_f28c()
  %v1_9b38 = and i32 %v3_9b2c, 65280
  %v3_9b40 = mul i32 %v3_9b2c, 16777216
  %v4_9b44 = mul nuw nsw i32 %v1_9b38, 256
  %v5_9b44 = or i32 %v4_9b44, %v3_9b40
  store i32 %v5_9b44, i32* %r1.global-to-local, align 4
  %v0_9b4c = load i32, i32* %r5.global-to-local, align 4
  %v1_9b4c = add i32 %v0_9b4c, 20
  %v2_9b4c = inttoptr i32 %v1_9b4c to i8*
  %v3_9b4c = load i8, i8* %v2_9b4c, align 1
  %v4_9b4c = zext i8 %v3_9b4c to i32
  %v2_9b50 = call i32 @llvm.bswap.i32(i32 %v3_9b2c)
  %v7_9b54 = lshr i32 %v0_9b30, %v4_9b4c
  %v8_9b54 = add i32 %v7_9b54, %v2_9b50
  %v3_9b60 = mul i32 %v8_9b54, 16777216
  %v1_9b64 = and i32 %v8_9b54, 65280
  %v4_9b68 = mul nuw nsw i32 %v1_9b64, 256
  %v5_9b68 = or i32 %v4_9b68, %v3_9b60
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  %v2_9b70 = call i32 @llvm.bswap.i32(i32 %v8_9b54)
  %v2_9b74 = add i32 %v0_9b4c, 4
  %v3_9b74 = inttoptr i32 %v2_9b74 to i32*
  store i32 %v2_9b70, i32* %v3_9b74, align 4
  %v0_9b84.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9b78

dec_label_pc_9b78:                                ; preds = %dec_label_pc_9afc, %dec_label_pc_9b2c
  %v0_9b84 = phi i32 [ %v0_9b20, %dec_label_pc_9afc ], [ %v0_9b84.pre, %dec_label_pc_9b2c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9b80 = load i32, i32* @sb, align 4
  %v2_9b80 = add i32 %v1_9b80, %stack_var_-60.0
  %v3_9b80 = inttoptr i32 %v2_9b80 to i32*
  %v4_9b80 = load i32, i32* %v3_9b80, align 4
  %v1_9b84 = inttoptr i32 %v0_9b84 to %sockaddr*
  store i32 %v0_9b84, i32* %r1.global-to-local, align 4
  %v5_9b88 = call i32 @connect(i32 %v4_9b80, %sockaddr* %v1_9b84, i32 16)
  %v1_9b94 = add i32 %stack_var_-60.0, 4
  %v1_9b98 = load i32, i32* @r7, align 4
  %v9_9b98 = icmp eq i32 %v1_9acc, %v1_9b98
  %v0_9ba0 = load i32, i32* %r5.global-to-local, align 4
  %v1_9ba0 = add i32 %v0_9ba0, 24
  store i32 %v1_9ba0, i32* %r5.global-to-local, align 4
  br i1 %v9_9b98, label %dec_label_pc_9c1c.preheader, label %dec_label_pc_9ba8

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9b78, %dec_label_pc_9a78
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9a78 ], [ %v1_9b94, %dec_label_pc_9b78 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_9a78 ], [ %v1_9acc, %dec_label_pc_9b78 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9bb4 = call i32* @calloc(i32 65535, i32 1)
  %v3_9bb4 = ptrtoint i32* %v2_9bb4 to i32
  store i32 %v3_99e4, i32* %r1.global-to-local, align 4
  %v2_9bc8 = load i32, i32* @sl, align 4
  %v3_9bc8 = add i32 %v2_9bc8, %stack_var_-60.0
  %v4_9bc8 = inttoptr i32 %v3_9bc8 to i32*
  store i32 %v3_9bb4, i32* %v4_9bc8, align 4
  br i1 %v3_9bc4, label %dec_label_pc_9bd0, label %dec_label_pc_9ab8

dec_label_pc_9bd0:                                ; preds = %dec_label_pc_9ba8
  %v0_9bd0 = call i32 @function_f28c()
  %v1_9bd0 = trunc i32 %v0_9bd0 to i8
  %v4_9bd4 = sdiv i32 %v0_9bd0, 256
  %v1_9bd8 = trunc i32 %v4_9bd4 to i8
  %v2_9bd8 = load i32, i32* %r5.global-to-local, align 4
  %v3_9bd8 = add i32 %v2_9bd8, 3
  %v4_9bd8 = inttoptr i32 %v3_9bd8 to i8*
  store i8 %v1_9bd8, i8* %v4_9bd8, align 1
  %v3_9bdc = load i32, i32* %r5.global-to-local, align 4
  %v4_9bdc = add i32 %v3_9bdc, 2
  %v5_9bdc = inttoptr i32 %v4_9bdc to i8*
  store i8 %v1_9bd0, i8* %v5_9bdc, align 1
  br label %dec_label_pc_9ac4

dec_label_pc_9be4:                                ; preds = %dec_label_pc_9c1c.loopexit, %dec_label_pc_9c1c.preheader.thread, %dec_label_pc_9c1c.preheader, %dec_label_pc_9c20.loopexit, %dec_label_pc_9be4
  br label %dec_label_pc_9be4

dec_label_pc_9be8:                                ; preds = %dec_label_pc_9be8.lr.ph, %dec_label_pc_9c20.loopexit
  %v0_9be8 = load i32, i32* @r8, align 4
  %v2_9be8 = icmp eq i32 %v0_9be8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9be8, label %dec_label_pc_9bf0, label %dec_label_pc_9c30

dec_label_pc_9bf0:                                ; preds = %dec_label_pc_9be8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bf8, %dec_label_pc_9bf0
  %v0_9c00 = phi i32 [ %v1_9c00, %dec_label_pc_9bf8 ], [ 0, %dec_label_pc_9bf0 ]
  %v0_9bf8 = phi i32 [ %v1_9c14, %dec_label_pc_9bf8 ], [ 0, %dec_label_pc_9bf0 ]
  %v1_9bf8 = load i32, i32* @sb, align 4
  %v2_9bf8 = add i32 %v1_9bf8, %v0_9bf8
  %v3_9bf8 = inttoptr i32 %v2_9bf8 to i32*
  %v4_9bf8 = load i32, i32* %v3_9bf8, align 4
  %v1_9bfc = load i32, i32* @sl, align 4
  %v2_9bfc = add i32 %v1_9bfc, %v0_9bf8
  %v3_9bfc = inttoptr i32 %v2_9bfc to i32*
  %v4_9bfc = load i32, i32* %v3_9bfc, align 4
  store i32 %v4_9bfc, i32* %r1.global-to-local, align 4
  %v1_9c00 = add i32 %v0_9c00, 1
  store i32 %v1_9c00, i32* %r5.global-to-local, align 4
  %v0_9c04 = load i32, i32* @r6, align 4
  %v4_9c0c = inttoptr i32 %v4_9bfc to i32*
  %v5_9c0c = call i32 @send(i32 %v4_9bf8, i32* %v4_9c0c, i32 %v0_9c04, i32 16384)
  %v1_9c10 = load i32, i32* @r7, align 4
  %v9_9c10 = icmp eq i32 %v1_9c00, %v1_9c10
  %v0_9c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c14 = add i32 %v0_9c14, 4
  store i32 %v1_9c14, i32* %r4.global-to-local, align 4
  br i1 %v9_9c10, label %dec_label_pc_9c1c.loopexit, label %dec_label_pc_9bf8

dec_label_pc_9c1c.loopexit:                       ; preds = %dec_label_pc_9bf8
  %tmp4447 = icmp slt i32 %v1_9c00, 1
  br i1 %tmp4447, label %dec_label_pc_9be4, label %dec_label_pc_9be8.lr.ph

dec_label_pc_9be8.lr.ph:                          ; preds = %dec_label_pc_9c1c.preheader, %dec_label_pc_9c1c.loopexit
  br label %dec_label_pc_9be8

dec_label_pc_9c20.loopexit:                       ; preds = %dec_label_pc_9c38
  %tmp44 = icmp slt i32 %v0_9c60, 1
  br i1 %tmp44, label %dec_label_pc_9be4, label %dec_label_pc_9be8

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9ac4
  store i32 %v3_998c, i32* %r4.global-to-local, align 4
  store i32 %v6_998c, i32* %r5.global-to-local, align 4
  store i32 %v24_998c, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9c30:                                ; preds = %dec_label_pc_9be8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9c38

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9c38, %dec_label_pc_9c30
  %v0_9c38 = phi i32 [ %v1_9c64, %dec_label_pc_9c38 ], [ 0, %dec_label_pc_9c30 ]
  %v1_9c38 = load i32, i32* @sl, align 4
  %v2_9c38 = add i32 %v1_9c38, %v0_9c38
  %v3_9c38 = inttoptr i32 %v2_9c38 to i32*
  %v4_9c38 = load i32, i32* %v3_9c38, align 4
  store i32 %v4_9c38, i32* @r4, align 4
  %v0_9c3c = load i32, i32* @r6, align 4
  store i32 %v0_9c3c, i32* @r1, align 4
  %v1_9c44 = inttoptr i32 %v4_9c38 to i8*
  %v2_9c44 = call i32 @function_f40c(i8* %v1_9c44)
  %v0_9c48 = load i32, i32* @r5, align 4
  %v1_9c48 = add i32 %v0_9c48, 1
  store i32 %v1_9c48, i32* @r5, align 4
  %v0_9c4c = load i32, i32* @fp, align 4
  %v1_9c4c = load i32, i32* @sb, align 4
  %v2_9c4c = add i32 %v1_9c4c, %v0_9c4c
  %v3_9c4c = inttoptr i32 %v2_9c4c to i32*
  %v4_9c4c = load i32, i32* %v3_9c4c, align 4
  %v0_9c50 = load i32, i32* @r4, align 4
  store i32 %v0_9c50, i32* %r1.global-to-local, align 4
  %v0_9c54 = load i32, i32* @r6, align 4
  %v4_9c5c = inttoptr i32 %v0_9c50 to i32*
  %v5_9c5c = call i32 @send(i32 %v4_9c4c, i32* %v4_9c5c, i32 %v0_9c54, i32 16384)
  %v0_9c60 = load i32, i32* @r5, align 4
  %v1_9c60 = load i32, i32* @r7, align 4
  %v9_9c60 = icmp eq i32 %v0_9c60, %v1_9c60
  %v0_9c64 = load i32, i32* @fp, align 4
  %v1_9c64 = add i32 %v0_9c64, 4
  store i32 %v1_9c64, i32* @fp, align 4
  br i1 %v9_9c60, label %dec_label_pc_9c20.loopexit, label %dec_label_pc_9c38

; uselistorder directives
  uselistorder i32 %v1_9c64, { 1, 0 }
  uselistorder i32 %v0_9c60, { 1, 0 }
  uselistorder i32 %v1_9c14, { 1, 0 }
  uselistorder i32 %v1_9c00, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_9b54, { 1, 2, 0 }
  uselistorder i32 %v3_9b2c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9adc, { 1, 2, 0 }
  uselistorder i32 %v1_9acc, { 1, 2, 0 }
  uselistorder i32 %v3_9a34, { 0, 2, 1 }
  uselistorder i32 %v3_99e4, { 0, 2, 1 }
  uselistorder i32 %v1_9990, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9be8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9be8, { 1, 0 }
  uselistorder label %dec_label_pc_9be4, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_9b78, { 1, 0 }
  uselistorder label %dec_label_pc_9a70, { 1, 0 }
}

define i32 @function_9c74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9c74:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9c74 = load i32, i32* @r4, align 4
  %v6_9c74 = load i32, i32* @r5, align 4
  %v9_9c74 = load i32, i32* @r6, align 4
  %v12_9c74 = load i32, i32* @r7, align 4
  %v18_9c74 = load i32, i32* @sb, align 4
  %v24_9c74 = load i32, i32* @fp, align 4
  %v1_9c78 = urem i32 %arg1, 256
  store i32 %v1_9c78, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_9c78, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9c90 = urem i32 %arg3, 256
  store i32 %v1_9c90, i32* @r4, align 4
  %v2_9c94 = call i32* @calloc(i32 %v1_9c78, i32 4)
  %v4_9c94 = ptrtoint i32* %v2_9c94 to i32
  %v0_9c98 = load i32, i32* @r5, align 4
  store i32 %v0_9c98, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ca8 = load i32, i32* @r4, align 4
  store i32 %v0_9ca8, i32* %r0.global-to-local, align 4
  %v5_9cac = inttoptr i32 %v0_9c98 to i32*
  %v6_9cac = call i32 @function_92ac(i32 %v0_9ca8, i32* %v5_9cac, i32 2, i32 0)
  %v1_9cb8 = urem i32 %v6_9cac, 256
  store i32 %v1_9cb8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9cc4 = load i32, i32* @r5, align 4
  store i32 %v0_9cc4, i32* %r1.global-to-local, align 4
  %v0_9cc8 = load i32, i32* @r4, align 4
  store i32 %v0_9cc8, i32* %r0.global-to-local, align 4
  %v5_9ccc = trunc i32 %v6_9cac to i8
  %v6_9cd0 = inttoptr i32 %v0_9cc4 to i32*
  %v7_9cd0 = call i32 @function_92ac(i32 %v0_9cc8, i32* %v6_9cd0, i32 3, i32 65535)
  %v0_9cd4 = load i32, i32* @r5, align 4
  store i32 %v0_9cd4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9cd0, i32* %fp.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r4, align 4
  store i32 %v0_9ce4, i32* %r0.global-to-local, align 4
  %v4_9ce8 = inttoptr i32 %v0_9cd4 to i32*
  %v5_9ce8 = call i32 @function_92ac(i32 %v0_9ce4, i32* %v4_9ce8, i32 4, i32 64)
  %v1_9cf0 = urem i32 %v5_9ce8, 256
  store i32 %v1_9cf0, i32* %ip.global-to-local, align 4
  %v0_9cf4 = load i32, i32* @r5, align 4
  store i32 %v0_9cf4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9d00 = load i32, i32* @r4, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v5_9d04 = trunc i32 %v5_9ce8 to i8
  %v6_9d08 = inttoptr i32 %v0_9cf4 to i32*
  %v7_9d08 = call i32 @function_92ac(i32 %v0_9d00, i32* %v6_9d08, i32 5, i32 0)
  %v1_9d14 = urem i32 %v7_9d08, 256
  store i32 %v1_9d14, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9d20 = load i32, i32* @r5, align 4
  store i32 %v0_9d20, i32* %r1.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r4, align 4
  store i32 %v0_9d24, i32* %r0.global-to-local, align 4
  %v5_9d2c = inttoptr i32 %v0_9d20 to i32*
  %v6_9d2c = call i32 @function_92ac(i32 %v0_9d24, i32* %v5_9d2c, i32 6, i32 65535)
  %v0_9d34 = load i32, i32* @r5, align 4
  store i32 %v0_9d34, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9d2c, i32* @r7, align 4
  %v0_9d44 = load i32, i32* @r4, align 4
  store i32 %v0_9d44, i32* %r0.global-to-local, align 4
  %v4_9d48 = inttoptr i32 %v0_9d34 to i32*
  %v5_9d48 = call i32 @function_92ac(i32 %v0_9d44, i32* %v4_9d48, i32 7, i32 65535)
  %v0_9d4c = load i32, i32* @r5, align 4
  store i32 %v0_9d4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9d48, i32* %sb.global-to-local, align 4
  %v0_9d5c = load i32, i32* @r4, align 4
  store i32 %v0_9d5c, i32* %r0.global-to-local, align 4
  %v4_9d60 = inttoptr i32 %v0_9d4c to i32*
  %v5_9d60 = call i32 @function_92ac(i32 %v0_9d5c, i32* %v4_9d60, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9d6c = load i32, i32* @r5, align 4
  store i32 %v0_9d6c, i32* %r1.global-to-local, align 4
  store i32 %v5_9d60, i32* @r6, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* %r0.global-to-local, align 4
  %v4_9d78 = inttoptr i32 %v0_9d6c to i32*
  %v5_9d78 = call i32 @function_92ac(i32 %v0_9d74, i32* %v4_9d78, i32 1, i32 1)
  %v2_9d84 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_9d84, i32* %r3.global-to-local, align 4
  %v1_9d88 = urem i32 %v5_9d78, 256
  store i32 %v1_9d88, i32* %ip.global-to-local, align 4
  %v0_9d8c = load i32, i32* @r5, align 4
  store i32 %v0_9d8c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9d94 = load i32, i32* @r4, align 4
  store i32 %v0_9d94, i32* %r0.global-to-local, align 4
  %v5_9d9c = inttoptr i32 %v0_9d8c to i32*
  %v6_9d9c = call i32 @function_92ac(i32 %v0_9d94, i32* %v5_9d9c, i32 25, i32 %v2_9d84)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9db0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9db0, i32* %r0.global-to-local, align 4
  %v2_9db4 = icmp eq i32 %v3_9db0, -1
  store i1 %v2_9db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9db4, label %dec_label_pc_a1dc, label %dec_label_pc_9dc0

dec_label_pc_9dc0:                                ; preds = %dec_label_pc_9c74
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9dc8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9dc8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_9ddc = call i32 @setsockopt(i32 %v3_9db0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_9ddc, i32* %r0.global-to-local, align 4
  %v2_9de0 = icmp eq i32 %v7_9ddc, -1
  store i1 %v2_9de0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9de0, label %dec_label_pc_a1d4, label %dec_label_pc_9de8

dec_label_pc_9de8:                                ; preds = %dec_label_pc_9dc0
  %v0_9de8 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9df4 = urem i32 %v0_9de8, 65536
  store i32 %v3_9df4, i32* %r2.global-to-local, align 4
  %v3_9df8 = icmp ugt i32 %v3_9df4, 1459
  %v9_9df8 = icmp eq i32 %v3_9df4, 1460
  store i1 %v9_9df8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9df8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9de8
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9de8, %bb
  %v0_9e00 = phi i32 [ %v3_9df4, %dec_label_pc_9de8 ], [ 1460, %bb ]
  %v0_9e04 = load i32, i32* @r7, align 4
  %v3_9e04 = mul i32 %v0_9e04, 65536
  store i32 %v3_9e04, i32* %r7.global-to-local, align 4
  %v3_9e08 = urem i32 %v0_9e04, 65536
  store i32 %v3_9e08, i32* %r3.global-to-local, align 4
  %v0_9e0c = load i32, i32* @sl, align 4
  %v2_9e0c = icmp eq i32 %v0_9e0c, 0
  store i1 %v2_9e0c, i1* %cpsr_z.global-to-local, align 1
  %v0_9e10 = load i32, i32* %fp.global-to-local, align 4
  %v3_9e10 = mul i32 %v0_9e10, 65536
  store i32 %v3_9e10, i32* %r0.global-to-local, align 4
  %v0_9e14 = load i32, i32* %sb.global-to-local, align 4
  %v3_9e14 = mul i32 %v0_9e14, 65536
  store i32 %v3_9e14, i32* %r5.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9e0c, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_9e00, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9e3c = phi i32 [ %v3_9e08, %bb71 ], [ %v0_9e00, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9e24 = urem i32 %v0_9e10, 65536
  store i32 %v3_9e24, i32* %r2.global-to-local, align 4
  %v3_9e28 = urem i32 %v0_9e14, 65536
  store i32 %v3_9e28, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9e44

.thread:                                          ; preds = %bb74
  %v6_9e38 = add nsw i32 %v5_9e3c, 28
  store i32 %v6_9e38, i32* @fp, align 4
  %v6_9e3c = add nsw i32 %v5_9e3c, 8
  store i32 %v6_9e3c, i32* @sb, align 4
  br label %dec_label_pc_9fb8

dec_label_pc_9e44:                                ; preds = %bb74
  %v1_9e48 = add nuw nsw i32 %v0_9e00, 28
  store i32 %v1_9e48, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9e48, 256
  %v1_9e54 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_9e10, 256
  %v3_9e58 = urem i32 %tmp76, 256
  %v2_9e6c = icmp eq i32 %v1_9d14, 0
  store i1 %v2_9e6c, i1* %cpsr_z.global-to-local, align 1
  %v1_9e70 = urem i32 %v0_9e10, 256
  %v1_9e78 = add nuw nsw i32 %v0_9e00, 8
  store i32 %v1_9e78, i32* @sb, align 4
  %v3_9e7c = mul i32 %v1_9e78, 65536
  store i32 %v3_9e7c, i32* %r6.global-to-local, align 4
  %v1_9e80 = urem i32 %v0_9e04, 256
  %v1_9e84 = urem i32 %v0_9e14, 256
  store i32 %v1_9e84, i32* %ip.global-to-local, align 4
  store i32 %v1_9e54, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_9e78, 256
  %v4_9e90 = mul nuw nsw i32 %v1_9e70, 256
  %v5_9e90 = or i32 %v4_9e90, %v3_9e58
  store i32 %v5_9e90, i32* %r0.global-to-local, align 4
  %v3_9e94 = mul nuw nsw i32 %v1_9e80, 256
  store i32 %v3_9e94, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_9e14, 256
  %v3_9e98 = urem i32 %tmp78, 256
  %v1_9e9c = and i32 %tmp77, 65280
  store i32 %v1_9e9c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9e48, 256
  %tmp80 = udiv i32 %v0_9e04, 256
  %v4_9ea4 = urem i32 %tmp80, 256
  %v5_9ea4 = or i32 %v4_9ea4, %v3_9e94
  store i32 %v5_9ea4, i32* %r4.global-to-local, align 4
  %v5_9ea8 = trunc i32 %tmp79 to i8
  %v5_9eac = trunc i32 %tmp76 to i8
  %v4_9eb0 = mul nuw nsw i32 %v1_9e84, 256
  %v5_9eb0 = or i32 %v4_9eb0, %v3_9e98
  store i32 %v5_9eb0, i32* %r5.global-to-local, align 4
  %tmp81 = udiv i32 %v1_9e78, 256
  %v4_9eb4 = urem i32 %tmp81, 256
  %v5_9eb4 = or i32 %v4_9eb4, %v1_9e9c
  store i32 %v5_9eb4, i32* %r7.global-to-local, align 4
  br i1 %v2_9e6c, label %dec_label_pc_9ebc, label %dec_label_pc_a1e4

dec_label_pc_9ebc:                                ; preds = %dec_label_pc_9e44
  %v3_9ebc36 = udiv i32 %v1_9e54, 256
  store i32 %v3_9ebc36, i32* %ip.global-to-local, align 4
  store i32 %v1_9e70, i32* %r0.global-to-local, align 4
  store i32 %v1_9e80, i32* %r1.global-to-local, align 4
  store i32 %v1_9e84, i32* %r2.global-to-local, align 4
  %v3_9ecc37 = udiv i32 %v1_9e9c, 256
  store i32 %v3_9ecc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_9f30 = sext i8 %v5_9ccc to i32
  %v4_9f70 = sext i8 %v5_9eac to i32
  %sext15 = mul i32 %v0_9e10, 16777216
  %v4_9f74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9e04, 16777216
  %v4_9f8c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9e78, 16777216
  %v4_9f90 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_9e14, 16777216
  %v4_9f94 = sdiv i32 %sext18, 16777216
  %v1_9f7c = trunc i32 %v1_9e48 to i8
  %v1_9f9c = trunc i32 %v4_9f90 to i8
  br label %dec_label_pc_9ee8

dec_label_pc_9ee8:                                ; preds = %dec_label_pc_9ee8, %dec_label_pc_9ebc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9ef4 = call i32* @calloc(i32 1510, i32 1)
  %v4_9ef4 = ptrtoint i32* %v2_9ef4 to i32
  store i32 %v4_9ef4, i32* %r0.global-to-local, align 4
  store i32 %v4_9c94, i32* %ip.global-to-local, align 4
  %v3_9efc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9efc, i32* %r2.global-to-local, align 4
  %v2_9f00 = load i32, i32* %r6.global-to-local, align 4
  %v5_9f00 = mul i32 %v2_9f00, 4
  %v6_9f00 = add i32 %v5_9f00, %v4_9c94
  %v7_9f00 = inttoptr i32 %v6_9f00 to i32*
  store i32 %v4_9ef4, i32* %v7_9f00, align 4
  %v0_9f04 = load i32, i32* %ip.global-to-local, align 4
  %v1_9f04 = load i32, i32* %r2.global-to-local, align 4
  %v4_9f04 = mul i32 %v1_9f04, 4
  %v5_9f04 = add i32 %v4_9f04, %v0_9f04
  %v6_9f04 = inttoptr i32 %v5_9f04 to i32*
  %v7_9f04 = load i32, i32* %v6_9f04, align 4
  store i32 %v7_9f04, i32* %r1.global-to-local, align 4
  %v1_9f08 = inttoptr i32 %v7_9f04 to i8*
  %v2_9f08 = load i8, i8* %v1_9f08, align 1
  %tmp = urem i8 %v2_9f08, 16
  %v1_9f0c = zext i8 %tmp to i32
  %v1_9f10 = or i32 %v1_9f0c, 64
  store i32 %v1_9f10, i32* %r3.global-to-local, align 4
  %v1_9f14 = trunc i32 %v1_9f10 to i8
  store i8 %v1_9f14, i8* %v1_9f08, align 1
  %v0_9f18 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f18 = inttoptr i32 %v0_9f18 to i8*
  %v2_9f18 = load i8, i8* %v1_9f18, align 1
  %v3_9f18 = zext i8 %v2_9f18 to i32
  %v1_9f1c = and i32 %v3_9f18, 240
  %v1_9f20 = or i32 %v1_9f1c, 5
  store i32 %v1_9f20, i32* %r2.global-to-local, align 4
  %v3_9f28 = add i32 %v0_9f18, 9
  %v4_9f28 = inttoptr i32 %v3_9f28 to i8*
  store i8 17, i8* %v4_9f28, align 1
  %v0_9f2c = load i32, i32* %r2.global-to-local, align 4
  %v1_9f2c = trunc i32 %v0_9f2c to i8
  %v2_9f2c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f2c = inttoptr i32 %v2_9f2c to i8*
  store i8 %v1_9f2c, i8* %v3_9f2c, align 1
  store i32 %v4_9f30, i32* %r0.global-to-local, align 4
  %v2_9f34 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f34 = add i32 %v2_9f34, 1
  %v4_9f34 = inttoptr i32 %v3_9f34 to i8*
  store i8 %v5_9ccc, i8* %v4_9f34, align 1
  %v2_9f3c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f3c = add i32 %v2_9f3c, 8
  %v4_9f3c = inttoptr i32 %v3_9f3c to i8*
  store i8 %v5_9d04, i8* %v4_9f3c, align 1
  %v3_9f40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f40, i32* %r2.global-to-local, align 4
  store i32 %v6_9d9c, i32* %ip.global-to-local, align 4
  %v3_9f48 = mul i32 %v3_9f40, 32
  store i32 %v3_9f48, i32* %r3.global-to-local, align 4
  %v1_9f4c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f4c = add i32 %v1_9f4c, 12
  %v3_9f4c = inttoptr i32 %v2_9f4c to i32*
  store i32 %v6_9d9c, i32* %v3_9f4c, align 4
  %v0_9f50 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f50 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_9f50, -8
  %v5_9f50 = add i32 %v0_9f50, %tmp83
  %v1_9f54 = load i32, i32* @r8, align 4
  %v2_9f54 = add i32 %v5_9f50, %v1_9f54
  store i32 %v2_9f54, i32* %r3.global-to-local, align 4
  %v1_9f58 = add i32 %v2_9f54, 16
  %v2_9f58 = inttoptr i32 %v1_9f58 to i32*
  %v3_9f58 = load i32, i32* %v2_9f58, align 4
  %v1_9f5c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f5c = add i32 %v1_9f5c, 16
  %v3_9f5c = inttoptr i32 %v2_9f5c to i32*
  store i32 %v3_9f58, i32* %v3_9f5c, align 4
  %v0_9f64 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f64 = add i32 %v0_9f64, 1
  store i32 %v1_9f64, i32* %r6.global-to-local, align 4
  %v2_9f68 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f68 = add i32 %v2_9f68, 2
  %v4_9f68 = inttoptr i32 %v3_9f68 to i8*
  store i8 %v5_9ea8, i8* %v4_9f68, align 1
  store i32 %v4_9f70, i32* %ip.global-to-local, align 4
  store i32 %v4_9f74, i32* %r0.global-to-local, align 4
  %v0_9f78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f78 = add i32 %v0_9f78, 20
  store i32 %v1_9f78, i32* %r3.global-to-local, align 4
  %v3_9f7c = add i32 %v0_9f78, 3
  %v4_9f7c = inttoptr i32 %v3_9f7c to i8*
  store i8 %v1_9f7c, i8* %v4_9f7c, align 1
  %v0_9f80 = load i32, i32* %ip.global-to-local, align 4
  %v1_9f80 = trunc i32 %v0_9f80 to i8
  %v2_9f80 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f80 = add i32 %v2_9f80, 4
  %v4_9f80 = inttoptr i32 %v3_9f80 to i8*
  store i8 %v1_9f80, i8* %v4_9f80, align 1
  %v0_9f84 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f84 = trunc i32 %v0_9f84 to i8
  %v2_9f84 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f84 = add i32 %v2_9f84, 5
  %v4_9f84 = inttoptr i32 %v3_9f84 to i8*
  store i8 %v1_9f84, i8* %v4_9f84, align 1
  %v0_9f88 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f88 = trunc i32 %v0_9f88 to i8
  %v2_9f88 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f88 = add i32 %v2_9f88, 20
  %v4_9f88 = inttoptr i32 %v3_9f88 to i8*
  store i8 %v1_9f88, i8* %v4_9f88, align 1
  store i32 %v4_9f8c, i32* %r2.global-to-local, align 4
  store i32 %v4_9f90, i32* %r1.global-to-local, align 4
  store i32 %v4_9f94, i32* %ip.global-to-local, align 4
  %v0_9f98 = load i32, i32* %r6.global-to-local, align 4
  %v1_9f98 = load i32, i32* @sl, align 4
  %v9_9f98 = icmp eq i32 %v0_9f98, %v1_9f98
  store i1 %v9_9f98, i1* %cpsr_z.global-to-local, align 1
  %v2_9f9c = load i32, i32* %r3.global-to-local, align 4
  %v3_9f9c = add i32 %v2_9f9c, 5
  %v4_9f9c = inttoptr i32 %v3_9f9c to i8*
  store i8 %v1_9f9c, i8* %v4_9f9c, align 1
  %v0_9fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fa0 = trunc i32 %v0_9fa0 to i8
  %v2_9fa0 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fa0 = add i32 %v2_9fa0, 1
  %v4_9fa0 = inttoptr i32 %v3_9fa0 to i8*
  store i8 %v1_9fa0, i8* %v4_9fa0, align 1
  %v0_9fa4 = load i32, i32* %r5.global-to-local, align 4
  %v1_9fa4 = trunc i32 %v0_9fa4 to i8
  %v2_9fa4 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fa4 = add i32 %v2_9fa4, 2
  %v4_9fa4 = inttoptr i32 %v3_9fa4 to i8*
  store i8 %v1_9fa4, i8* %v4_9fa4, align 1
  %v0_9fa8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9fa8 = trunc i32 %v0_9fa8 to i8
  %v2_9fa8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fa8 = add i32 %v2_9fa8, 3
  %v4_9fa8 = inttoptr i32 %v3_9fa8 to i8*
  store i8 %v1_9fa8, i8* %v4_9fa8, align 1
  %v0_9fac = load i32, i32* %r7.global-to-local, align 4
  %v1_9fac = trunc i32 %v0_9fac to i8
  %v2_9fac = load i32, i32* %r3.global-to-local, align 4
  %v3_9fac = add i32 %v2_9fac, 4
  %v4_9fac = inttoptr i32 %v3_9fac to i8*
  store i8 %v1_9fac, i8* %v4_9fac, align 1
  %v0_9fb0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9fb0, i32* %stack_var_-40, align 4
  %v5_9fb4 = icmp slt i32 %v0_9f98, %v1_9f98
  br i1 %v5_9fb4, label %dec_label_pc_9ee8, label %dec_label_pc_9fb8

dec_label_pc_9fb8:                                ; preds = %dec_label_pc_a218, %dec_label_pc_9ee8, %.thread
  %v0_9fb8 = load i32, i32* @sl, align 4
  %v2_9fb8 = icmp eq i32 %v0_9fb8, 0
  store i1 %v2_9fb8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a164 = icmp eq i32 %v3_9e24, 65535
  %v2_a030 = icmp eq i32 %v1_9d88, 0
  %v2_9ff8 = icmp eq i32 %v6_9d9c, -1
  br label %dec_label_pc_9fc0.outer

dec_label_pc_9fc0.outer:                          ; preds = %dec_label_pc_a0e0, %dec_label_pc_9fb8
  %v1_9fc0.ph.in = phi i32 [ %v1_a0d4, %dec_label_pc_a0e0 ], [ %v0_9fb8, %dec_label_pc_9fb8 ]
  %v0_9fc0.ph = phi i1 [ %v2_a0e0, %dec_label_pc_a0e0 ], [ %v2_9fb8, %dec_label_pc_9fb8 ]
  %v1_9fc0.ph = icmp slt i32 %v1_9fc0.ph.in, 0
  %v4_9fc0 = or i1 %v1_9fc0.ph, %v0_9fc0.ph
  br label %dec_label_pc_9fc0

dec_label_pc_9fc0:                                ; preds = %dec_label_pc_9fc0.outer, %dec_label_pc_9fc0
  br i1 %v4_9fc0, label %dec_label_pc_9fc0, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_a038, %dec_label_pc_9fc4
  %v1_9fe4 = phi i32 [ %v1_a0d0, %dec_label_pc_a038 ], [ 0, %dec_label_pc_9fc4 ]
  %v5_9fd4 = mul i32 %v1_9fe4, 24
  %v1_9fd8 = load i32, i32* @r8, align 4
  %v2_9fd8 = add i32 %v1_9fd8, %v5_9fd4
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  store i32 %v4_9c94, i32* %ip.global-to-local, align 4
  %v1_9fe0 = add i32 %v2_9fd8, 20
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i8*
  %v3_9fe0 = load i8, i8* %v2_9fe0, align 1
  %v4_9fe0 = zext i8 %v3_9fe0 to i32
  store i32 %v4_9fe0, i32* %r2.global-to-local, align 4
  %v4_9fe4 = mul i32 %v1_9fe4, 4
  %v5_9fe4 = add i32 %v4_9fe4, %v4_9c94
  %v6_9fe4 = inttoptr i32 %v5_9fe4 to i32*
  %v7_9fe4 = load i32, i32* %v6_9fe4, align 4
  store i32 %v7_9fe4, i32* @r5, align 4
  %v7_9fe8 = icmp eq i8 %v3_9fe0, 31
  store i1 %v7_9fe8, i1* %cpsr_z.global-to-local, align 1
  %v1_9fec = add i32 %v7_9fe4, 20
  store i32 %v1_9fec, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_9fe0, 32
  br i1 %tmp84, label %dec_label_pc_a0ec, label %dec_label_pc_9ff4

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9fd0
  store i32 %v6_9d9c, i32* %r0.global-to-local, align 4
  store i1 %v2_9ff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ff8, label %dec_label_pc_a154, label %dec_label_pc_a000

dec_label_pc_a000:                                ; preds = %dec_label_pc_a0ec, %dec_label_pc_9ff4
  store i32 %v3_9e24, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a164, label %dec_label_pc_a170, label %dec_label_pc_a014

dec_label_pc_a014:                                ; preds = %dec_label_pc_a154.dec_label_pc_a014_crit_edge, %dec_label_pc_a000
  %v1_a018 = phi i32 [ %v1_a018.pre, %dec_label_pc_a154.dec_label_pc_a014_crit_edge ], [ 65535, %dec_label_pc_a000 ]
  store i32 %v3_9e08, i32* %r2.global-to-local, align 4
  %v9_a018 = icmp eq i32 %v3_9e08, %v1_a018
  store i1 %v9_a018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a018, label %dec_label_pc_a18c, label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_a170.dec_label_pc_a020_crit_edge, %dec_label_pc_a014
  %v1_a024 = phi i32 [ %v1_a024.pre, %dec_label_pc_a170.dec_label_pc_a020_crit_edge ], [ %v1_a018, %dec_label_pc_a014 ]
  store i32 %v3_9e28, i32* %r3.global-to-local, align 4
  %v9_a024 = icmp eq i32 %v3_9e28, %v1_a024
  store i1 %v9_a024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a024, label %dec_label_pc_a1a8, label %dec_label_pc_a02c

dec_label_pc_a02c:                                ; preds = %dec_label_pc_a18c, %dec_label_pc_a020
  store i32 %v1_9d88, i32* %ip.global-to-local, align 4
  store i1 %v2_a030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a030, label %dec_label_pc_a038, label %dec_label_pc_a1c4

dec_label_pc_a038:                                ; preds = %dec_label_pc_a02c, %dec_label_pc_a1a8, %dec_label_pc_a1c4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a03c = load i32, i32* @r7, align 4
  %v1_a03c = trunc i32 %v0_a03c to i8
  %v2_a03c = load i32, i32* @r5, align 4
  %v3_a03c = add i32 %v2_a03c, 10
  %v4_a03c = inttoptr i32 %v3_a03c to i8*
  store i8 %v1_a03c, i8* %v4_a03c, align 1
  %v0_a040 = load i32, i32* @r7, align 4
  %v1_a040 = trunc i32 %v0_a040 to i8
  %v2_a040 = load i32, i32* @r5, align 4
  %v3_a040 = add i32 %v2_a040, 11
  %v4_a040 = inttoptr i32 %v3_a040 to i8*
  store i8 %v1_a040, i8* %v4_a040, align 1
  %v0_a044 = load i32, i32* @r5, align 4
  store i32 %v0_a044, i32* @r0, align 4
  %v2_a048 = call i32 @function_ddc4(i32 %v0_a044, i32 20)
  %v3_a048 = trunc i32 %v2_a048 to i8
  store i32 %v2_a048, i32* %r0.global-to-local, align 4
  %v4_a04c = sdiv i32 %v2_a048, 256
  store i32 %v4_a04c, i32* %r3.global-to-local, align 4
  %v1_a050 = trunc i32 %v4_a04c to i8
  %v2_a050 = load i32, i32* @r5, align 4
  %v3_a050 = add i32 %v2_a050, 11
  %v4_a050 = inttoptr i32 %v3_a050 to i8*
  store i8 %v1_a050, i8* %v4_a050, align 1
  %v3_a054 = load i32, i32* @r5, align 4
  %v4_a054 = add i32 %v3_a054, 10
  %v5_a054 = inttoptr i32 %v4_a054 to i8*
  store i8 %v3_a048, i8* %v5_a054, align 1
  %v0_a058 = load i32, i32* @r7, align 4
  %v1_a058 = trunc i32 %v0_a058 to i8
  %v2_a058 = load i32, i32* @r6, align 4
  %v3_a058 = add i32 %v2_a058, 6
  %v4_a058 = inttoptr i32 %v3_a058 to i8*
  store i8 %v1_a058, i8* %v4_a058, align 1
  %v0_a05c = load i32, i32* @r7, align 4
  %v1_a05c = trunc i32 %v0_a05c to i8
  %v2_a05c = load i32, i32* @r6, align 4
  %v3_a05c = add i32 %v2_a05c, 7
  %v4_a05c = inttoptr i32 %v3_a05c to i8*
  store i8 %v1_a05c, i8* %v4_a05c, align 1
  %v0_a060 = load i32, i32* @r5, align 4
  %v1_a060 = add i32 %v0_a060, 24
  %v2_a060 = inttoptr i32 %v1_a060 to i8*
  %v3_a060 = load i8, i8* %v2_a060, align 1
  %v4_a060 = zext i8 %v3_a060 to i32
  store i32 %v4_a060, i32* %r3.global-to-local, align 4
  %v1_a064 = add i32 %v0_a060, 25
  %v2_a064 = inttoptr i32 %v1_a064 to i8*
  %v3_a064 = load i8, i8* %v2_a064, align 1
  %v4_a064 = zext i8 %v3_a064 to i32
  %v0_a068 = load i32, i32* @r6, align 4
  store i32 %v0_a068, i32* @r1, align 4
  %v4_a06c = mul nuw nsw i32 %v4_a064, 256
  %v5_a06c = or i32 %v4_a06c, %v4_a060
  store i32 %v5_a06c, i32* %r2.global-to-local, align 4
  store i32 %v0_a060, i32* %r0.global-to-local, align 4
  %v0_a074 = load i32, i32* @sb, align 4
  store i32 %v0_a074, i32* %r3.global-to-local, align 4
  %v4_a078 = call i32 @function_de20(i32 %v0_a060, i32 %v0_a068, i32 %v5_a06c, i32 %v0_a074)
  %v5_a078 = trunc i32 %v4_a078 to i8
  store i32 %v4_a078, i32* %r0.global-to-local, align 4
  %v4_a07c38 = udiv i32 %v4_a078, 256
  %v1_a080 = trunc i32 %v4_a07c38 to i8
  %v2_a080 = load i32, i32* @r6, align 4
  %v3_a080 = add i32 %v2_a080, 7
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* @r6, align 4
  %v4_a084 = add i32 %v3_a084, 6
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v5_a078, i8* %v5_a084, align 1
  %v3_a088 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a088, i32* %r3.global-to-local, align 4
  %v0_a08c = load i32, i32* @r5, align 4
  %v1_a08c = add i32 %v0_a08c, 20
  %v2_a08c = inttoptr i32 %v1_a08c to i32*
  %v3_a08c = load i32, i32* %v2_a08c, align 4
  %v3_a094 = udiv i32 %v3_a08c, 65536
  store i32 %v3_a094, i32* %r2.global-to-local, align 4
  %v5_a098 = mul i32 %v3_a088, 24
  %v1_a09c = load i32, i32* @r8, align 4
  %v2_a09c = add i32 %v1_a09c, %v5_a098
  store i32 %v2_a09c, i32* %ip.global-to-local, align 4
  %v3_a0a035 = udiv i32 %v3_a08c, 16777216
  %v1_a0a4 = trunc i32 %v3_a0a035 to i8
  %v3_a0a4 = add i32 %v2_a09c, 3
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a8 = trunc i32 %v0_a0a8 to i8
  %v2_a0a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_a0a8 = add i32 %v2_a0a8, 2
  %v4_a0a8 = inttoptr i32 %v3_a0a8 to i8*
  store i8 %v1_a0a8, i8* %v4_a0a8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a0b0 = load i32, i32* @r5, align 4
  store i32 %v0_a0b0, i32* %r1.global-to-local, align 4
  store i32 %v3_9db0, i32* %r0.global-to-local, align 4
  %v0_a0b8 = load i32, i32* @fp, align 4
  store i32 %v0_a0b8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_a0c0 = load i32, i32* %ip.global-to-local, align 4
  %v4_a0c0 = inttoptr i32 %v0_a0c0 to %sockaddr*
  %v7_a0c8 = inttoptr i32 %v0_a0b0 to i32*
  %v9_a0c8 = call i32 @sendto(i32 %v3_9db0, i32* %v7_a0c8, i32 %v0_a0b8, i32 16384, %sockaddr* %v4_a0c0, i32 16)
  %v3_a0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0cc, i32* %r3.global-to-local, align 4
  %v1_a0d0 = add i32 %v3_a0cc, 1
  store i32 %v1_a0d0, i32* %r0.global-to-local, align 4
  %v1_a0d4 = load i32, i32* @sl, align 4
  %v9_a0d4 = icmp eq i32 %v1_a0d0, %v1_a0d4
  store i1 %v9_a0d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0d0, i32* %stack_var_-40, align 4
  %v5_a0dc = icmp slt i32 %v1_a0d0, %v1_a0d4
  br i1 %v5_a0dc, label %dec_label_pc_9fd0, label %dec_label_pc_a0e0

dec_label_pc_a0e0:                                ; preds = %dec_label_pc_a038
  %v2_a0e0 = icmp eq i32 %v1_a0d4, 0
  store i1 %v2_a0e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9fc0.outer

dec_label_pc_a0ec:                                ; preds = %dec_label_pc_9fd0
  %v1_a0ec = add i32 %v2_9fd8, 16
  %v2_a0ec = inttoptr i32 %v1_a0ec to i32*
  %v3_a0ec = load i32, i32* %v2_a0ec, align 4
  store i32 %v3_a0ec, i32* %r4.global-to-local, align 4
  %v0_a0f0 = call i32 @function_f28c()
  store i32 %v0_a0f0, i32* %r0.global-to-local, align 4
  %v3_a0f4 = load i32, i32* %stack_var_-40, align 4
  %v5_a0fc = mul i32 %v3_a0f4, 24
  %v1_a104 = load i32, i32* @r8, align 4
  %v2_a104 = add i32 %v1_a104, %v5_a0fc
  store i32 %v2_a104, i32* %r1.global-to-local, align 4
  %v1_a108 = and i32 %v3_a0ec, 65280
  store i32 %v1_a108, i32* %r3.global-to-local, align 4
  %v1_a100 = udiv i32 %v3_a0ec, 256
  %v3_a10c = and i32 %v1_a100, 65280
  store i32 %v3_a10c, i32* %r2.global-to-local, align 4
  %v3_a110 = mul i32 %v3_a0ec, 16777216
  store i32 %v3_a110, i32* %ip.global-to-local, align 4
  %v1_a114 = add i32 %v2_a104, 20
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  %v4_a118 = mul nuw nsw i32 %v1_a108, 256
  %v5_a118 = or i32 %v4_a118, %v3_a110
  store i32 %v5_a118, i32* %ip.global-to-local, align 4
  %v2_a120 = call i32 @llvm.bswap.i32(i32 %v3_a0ec)
  %v7_a124 = lshr i32 %v0_a0f0, %v4_a114
  %v8_a124 = add i32 %v7_a124, %v2_a120
  store i32 %v8_a124, i32* %r2.global-to-local, align 4
  %v3_a130 = mul i32 %v8_a124, 16777216
  %v1_a128 = mul i32 %v8_a124, 256
  %v4_a134 = and i32 %v1_a128, 16711680
  %v5_a134 = or i32 %v4_a134, %v3_a130
  store i32 %v5_a134, i32* %r1.global-to-local, align 4
  store i32 %v6_9d9c, i32* %r0.global-to-local, align 4
  %v2_a144 = call i32 @llvm.bswap.i32(i32 %v8_a124)
  store i32 %v2_a144, i32* %r3.global-to-local, align 4
  store i1 %v2_9ff8, i1* %cpsr_z.global-to-local, align 1
  %v1_a14c = load i32, i32* @r5, align 4
  %v2_a14c = add i32 %v1_a14c, 16
  %v3_a14c = inttoptr i32 %v2_a14c to i32*
  store i32 %v2_a144, i32* %v3_a14c, align 4
  br i1 %v2_9ff8, label %dec_label_pc_a154, label %dec_label_pc_a000

dec_label_pc_a154:                                ; preds = %dec_label_pc_a0ec, %dec_label_pc_9ff4
  %v0_a154 = call i32 @function_f28c()
  store i32 %v0_a154, i32* %r0.global-to-local, align 4
  store i32 %v3_9e24, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a164, i1* %cpsr_z.global-to-local, align 1
  %v1_a168 = load i32, i32* @r5, align 4
  %v2_a168 = add i32 %v1_a168, 12
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v0_a154, i32* %v3_a168, align 4
  br i1 %v3_a164, label %dec_label_pc_a170, label %dec_label_pc_a154.dec_label_pc_a014_crit_edge

dec_label_pc_a154.dec_label_pc_a014_crit_edge:    ; preds = %dec_label_pc_a154
  %v1_a018.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a014

dec_label_pc_a170:                                ; preds = %dec_label_pc_a154, %dec_label_pc_a000
  %v0_a170 = call i32 @function_f28c()
  %v1_a170 = trunc i32 %v0_a170 to i8
  store i32 %v0_a170, i32* %r0.global-to-local, align 4
  store i32 %v3_9e08, i32* %r2.global-to-local, align 4
  %v4_a178 = sdiv i32 %v0_a170, 256
  store i32 %v4_a178, i32* %r3.global-to-local, align 4
  %v1_a17c = load i32, i32* @r4, align 4
  %v9_a17c = icmp eq i32 %v3_9e08, %v1_a17c
  store i1 %v9_a17c, i1* %cpsr_z.global-to-local, align 1
  %v1_a180 = trunc i32 %v4_a178 to i8
  %v2_a180 = load i32, i32* @r5, align 4
  %v3_a180 = add i32 %v2_a180, 5
  %v4_a180 = inttoptr i32 %v3_a180 to i8*
  store i8 %v1_a180, i8* %v4_a180, align 1
  %v3_a184 = load i32, i32* @r5, align 4
  %v4_a184 = add i32 %v3_a184, 4
  %v5_a184 = inttoptr i32 %v4_a184 to i8*
  store i8 %v1_a170, i8* %v5_a184, align 1
  %v0_a188 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a188, label %dec_label_pc_a18c, label %dec_label_pc_a170.dec_label_pc_a020_crit_edge

dec_label_pc_a170.dec_label_pc_a020_crit_edge:    ; preds = %dec_label_pc_a170
  %v1_a024.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a020

dec_label_pc_a18c:                                ; preds = %dec_label_pc_a170, %dec_label_pc_a014
  %v0_a18c = call i32 @function_f28c()
  %v1_a18c = trunc i32 %v0_a18c to i8
  store i32 %v0_a18c, i32* %r0.global-to-local, align 4
  %v4_a190 = sdiv i32 %v0_a18c, 256
  store i32 %v4_a190, i32* %r3.global-to-local, align 4
  %v3_a194 = load i32, i32* @r5, align 4
  %v4_a194 = add i32 %v3_a194, 20
  %v5_a194 = inttoptr i32 %v4_a194 to i8*
  store i8 %v1_a18c, i8* %v5_a194, align 1
  %v0_a198 = load i32, i32* %r3.global-to-local, align 4
  %v1_a198 = trunc i32 %v0_a198 to i8
  %v2_a198 = load i32, i32* @r6, align 4
  %v3_a198 = add i32 %v2_a198, 1
  %v4_a198 = inttoptr i32 %v3_a198 to i8*
  store i8 %v1_a198, i8* %v4_a198, align 1
  store i32 %v3_9e28, i32* %r3.global-to-local, align 4
  %v1_a1a0 = load i32, i32* @r4, align 4
  %v9_a1a0 = icmp eq i32 %v3_9e28, %v1_a1a0
  store i1 %v9_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a1a0, label %dec_label_pc_a1a8, label %dec_label_pc_a02c

dec_label_pc_a1a8:                                ; preds = %dec_label_pc_a18c, %dec_label_pc_a020
  %v0_a1a8 = call i32 @function_f28c()
  %v1_a1a8 = trunc i32 %v0_a1a8 to i8
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  store i32 %v1_9d88, i32* %ip.global-to-local, align 4
  %v4_a1b0 = sdiv i32 %v0_a1a8, 256
  store i32 %v4_a1b0, i32* %r3.global-to-local, align 4
  store i1 %v2_a030, i1* %cpsr_z.global-to-local, align 1
  %v1_a1b8 = trunc i32 %v4_a1b0 to i8
  %v2_a1b8 = load i32, i32* @r6, align 4
  %v3_a1b8 = add i32 %v2_a1b8, 3
  %v4_a1b8 = inttoptr i32 %v3_a1b8 to i8*
  store i8 %v1_a1b8, i8* %v4_a1b8, align 1
  %v3_a1bc = load i32, i32* @r6, align 4
  %v4_a1bc = add i32 %v3_a1bc, 2
  %v5_a1bc = inttoptr i32 %v4_a1bc to i8*
  store i8 %v1_a1a8, i8* %v5_a1bc, align 1
  %v0_a1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1c0, label %dec_label_pc_a038, label %dec_label_pc_a1c4

dec_label_pc_a1c4:                                ; preds = %dec_label_pc_a02c, %dec_label_pc_a1a8
  %v0_a1c4 = load i32, i32* @r5, align 4
  %v1_a1c4 = add i32 %v0_a1c4, 28
  store i32 %v1_a1c4, i32* %r0.global-to-local, align 4
  store i32 %v0_9e00, i32* @r1, align 4
  %v1_a1cc = inttoptr i32 %v1_a1c4 to i8*
  %v2_a1cc = call i32 @function_f40c(i8* %v1_a1cc)
  store i32 %v2_a1cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a038

dec_label_pc_a1d4:                                ; preds = %dec_label_pc_9dc0
  store i32 %v3_9db0, i32* %r0.global-to-local, align 4
  %v1_a1d8 = call i32 @close(i32 %v3_9db0)
  store i32 %v1_a1d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_9c74, %dec_label_pc_a1d4
  %v29_a1e0 = phi i32 [ -1, %dec_label_pc_9c74 ], [ %v1_a1d8, %dec_label_pc_a1d4 ]
  store i32 %v3_9c74, i32* %r4.global-to-local, align 4
  store i32 %v6_9c74, i32* %r5.global-to-local, align 4
  store i32 %v9_9c74, i32* %r6.global-to-local, align 4
  store i32 %v12_9c74, i32* %r7.global-to-local, align 4
  store i32 %v18_9c74, i32* %sb.global-to-local, align 4
  store i32 %v24_9c74, i32* %fp.global-to-local, align 4
  ret i32 %v29_a1e0

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_9e44
  %v3_a1e8 = sext i8 %v5_9ea8 to i32
  %v7_a1e8 = sext i8 %v5_9eac to i32
  %v3_a1ec = sdiv i32 %v3_a1e8, 256
  store i32 %v3_a1ec, i32* %r0.global-to-local, align 4
  %v3_a1f0 = sdiv i32 %v7_a1e8, 256
  store i32 %v3_a1f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9e80, i32* %r2.global-to-local, align 4
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %v3_a1fc34 = udiv i32 %v1_9e9c, 256
  store i32 %v3_a1fc34, i32* %ip.global-to-local, align 4
  %v5_a210 = trunc i32 %v3_a1fc34 to i8
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_a268 = sext i8 %v5_9d04 to i32
  %sext12 = mul i32 %v0_9e04, 16777216
  %v4_a2d0 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_9e14, 16777216
  %v4_a2e0 = sdiv i32 %sext13, 16777216
  %v1_a2e8 = trunc i32 %v4_a2e0 to i8
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %dec_label_pc_a218, %dec_label_pc_a1e4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a224 = call i32* @calloc(i32 1510, i32 1)
  %v4_a224 = ptrtoint i32* %v2_a224 to i32
  store i32 %v4_a224, i32* %r0.global-to-local, align 4
  store i32 %v4_9c94, i32* %r1.global-to-local, align 4
  %v3_a22c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a22c, i32* %r2.global-to-local, align 4
  %v2_a230 = load i32, i32* %r6.global-to-local, align 4
  %v5_a230 = mul i32 %v2_a230, 4
  %v6_a230 = add i32 %v5_a230, %v4_9c94
  %v7_a230 = inttoptr i32 %v6_a230 to i32*
  store i32 %v4_a224, i32* %v7_a230, align 4
  %v0_a234 = load i32, i32* %r1.global-to-local, align 4
  %v1_a234 = load i32, i32* %r2.global-to-local, align 4
  %v4_a234 = mul i32 %v1_a234, 4
  %v5_a234 = add i32 %v4_a234, %v0_a234
  %v6_a234 = inttoptr i32 %v5_a234 to i32*
  %v7_a234 = load i32, i32* %v6_a234, align 4
  store i32 %v7_a234, i32* %r1.global-to-local, align 4
  %v1_a238 = inttoptr i32 %v7_a234 to i8*
  %v2_a238 = load i8, i8* %v1_a238, align 1
  %tmp85 = urem i8 %v2_a238, 16
  %v1_a23c = zext i8 %tmp85 to i32
  %v1_a240 = or i32 %v1_a23c, 64
  store i32 %v1_a240, i32* %r3.global-to-local, align 4
  %v1_a244 = trunc i32 %v1_a240 to i8
  store i8 %v1_a244, i8* %v1_a238, align 1
  %v0_a248 = load i32, i32* %r1.global-to-local, align 4
  %v1_a248 = inttoptr i32 %v0_a248 to i8*
  %v2_a248 = load i8, i8* %v1_a248, align 1
  %v3_a248 = zext i8 %v2_a248 to i32
  %v1_a24c = and i32 %v3_a248, 240
  %v1_a250 = or i32 %v1_a24c, 5
  store i32 %v1_a250, i32* %r2.global-to-local, align 4
  %v3_a258 = add i32 %v0_a248, 9
  %v4_a258 = inttoptr i32 %v3_a258 to i8*
  store i8 17, i8* %v4_a258, align 1
  %v0_a25c = load i32, i32* %r2.global-to-local, align 4
  %v1_a25c = trunc i32 %v0_a25c to i8
  %v2_a25c = load i32, i32* %r1.global-to-local, align 4
  %v3_a25c = inttoptr i32 %v2_a25c to i8*
  store i8 %v1_a25c, i8* %v3_a25c, align 1
  %v2_a264 = load i32, i32* %r1.global-to-local, align 4
  %v3_a264 = add i32 %v2_a264, 1
  %v4_a264 = inttoptr i32 %v3_a264 to i8*
  store i8 %v5_9ccc, i8* %v4_a264, align 1
  store i32 %v4_a268, i32* %r0.global-to-local, align 4
  %v2_a26c = load i32, i32* %r1.global-to-local, align 4
  %v3_a26c = add i32 %v2_a26c, 8
  %v4_a26c = inttoptr i32 %v3_a26c to i8*
  store i8 %v5_9d04, i8* %v4_a26c, align 1
  %v3_a270 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a270, i32* %r2.global-to-local, align 4
  store i32 %v6_9d9c, i32* %ip.global-to-local, align 4
  %v3_a278 = mul i32 %v3_a270, 32
  store i32 %v3_a278, i32* %r3.global-to-local, align 4
  %v1_a27c = load i32, i32* %r1.global-to-local, align 4
  %v2_a27c = add i32 %v1_a27c, 12
  %v3_a27c = inttoptr i32 %v2_a27c to i32*
  store i32 %v6_9d9c, i32* %v3_a27c, align 4
  %v0_a280 = load i32, i32* %r3.global-to-local, align 4
  %v1_a280 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_a280, -8
  %v5_a280 = add i32 %v0_a280, %tmp86
  %v1_a284 = load i32, i32* @r8, align 4
  %v2_a284 = add i32 %v5_a280, %v1_a284
  store i32 %v2_a284, i32* %r3.global-to-local, align 4
  %v1_a288 = add i32 %v2_a284, 16
  %v2_a288 = inttoptr i32 %v1_a288 to i32*
  %v3_a288 = load i32, i32* %v2_a288, align 4
  %v1_a28c = load i32, i32* %r1.global-to-local, align 4
  %v2_a28c = add i32 %v1_a28c, 16
  %v3_a28c = inttoptr i32 %v2_a28c to i32*
  store i32 %v3_a288, i32* %v3_a28c, align 4
  %v0_a294 = load i32, i32* %r2.global-to-local, align 4
  %v1_a294 = add i32 %v0_a294, 1
  store i32 %v1_a294, i32* %r6.global-to-local, align 4
  store i32 %v7_a1e8, i32* %ip.global-to-local, align 4
  store i32 %v3_a1ec, i32* %r2.global-to-local, align 4
  %v2_a2a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2a0 = add i32 %v2_a2a0, 2
  %v4_a2a0 = inttoptr i32 %v3_a2a0 to i8*
  store i8 %v5_9ea8, i8* %v4_a2a0, align 1
  store i32 %v3_a1f0, i32* %r0.global-to-local, align 4
  %v0_a2a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2a8 = trunc i32 %v0_a2a8 to i8
  %v2_a2a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2a8 = add i32 %v2_a2a8, 3
  %v4_a2a8 = inttoptr i32 %v3_a2a8 to i8*
  store i8 %v1_a2a8, i8* %v4_a2a8, align 1
  %v0_a2ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i8
  %v2_a2ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a2ac = add i32 %v2_a2ac, 4
  %v4_a2ac = inttoptr i32 %v3_a2ac to i8*
  store i8 %v1_a2ac, i8* %v4_a2ac, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a2b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a2b8 = add i32 %v0_a2b8, 20
  store i32 %v1_a2b8, i32* %r3.global-to-local, align 4
  %v0_a2bc = load i32, i32* %r0.global-to-local, align 4
  %v1_a2bc = trunc i32 %v0_a2bc to i8
  %v3_a2bc = add i32 %v0_a2b8, 5
  %v4_a2bc = inttoptr i32 %v3_a2bc to i8*
  store i8 %v1_a2bc, i8* %v4_a2bc, align 1
  %v0_a2c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2c0 = trunc i32 %v0_a2c0 to i8
  %v2_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2c0 = add i32 %v2_a2c0, 6
  %v4_a2c0 = inttoptr i32 %v3_a2c0 to i8*
  store i8 %v1_a2c0, i8* %v4_a2c0, align 1
  %v0_a2c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a2c4 = trunc i32 %v0_a2c4 to i8
  %v2_a2c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2c4 = add i32 %v2_a2c4, 7
  %v4_a2c4 = inttoptr i32 %v3_a2c4 to i8*
  store i8 %v1_a2c4, i8* %v4_a2c4, align 1
  %v0_a2c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2c8 = trunc i32 %v0_a2c8 to i8
  %v2_a2c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2c8 = add i32 %v2_a2c8, 20
  %v4_a2c8 = inttoptr i32 %v3_a2c8 to i8*
  store i8 %v1_a2c8, i8* %v4_a2c8, align 1
  store i32 %v3_a1fc34, i32* %r0.global-to-local, align 4
  store i32 %v4_a2d0, i32* %r1.global-to-local, align 4
  %v2_a2d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 5
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v5_a210, i8* %v4_a2d4, align 1
  %v0_a2d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a2d8 = trunc i32 %v0_a2d8 to i8
  %v2_a2d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_a2d8 = add i32 %v2_a2d8, 1
  %v4_a2d8 = inttoptr i32 %v3_a2d8 to i8*
  store i8 %v1_a2d8, i8* %v4_a2d8, align 1
  %v0_a2dc = load i32, i32* %r5.global-to-local, align 4
  %v1_a2dc = trunc i32 %v0_a2dc to i8
  %v2_a2dc = load i32, i32* %r3.global-to-local, align 4
  %v3_a2dc = add i32 %v2_a2dc, 2
  %v4_a2dc = inttoptr i32 %v3_a2dc to i8*
  store i8 %v1_a2dc, i8* %v4_a2dc, align 1
  store i32 %v4_a2e0, i32* %r2.global-to-local, align 4
  %v0_a2e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_a2e4 = load i32, i32* @sl, align 4
  %v9_a2e4 = icmp eq i32 %v0_a2e4, %v1_a2e4
  store i1 %v9_a2e4, i1* %cpsr_z.global-to-local, align 1
  %v2_a2e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_a2e8 = add i32 %v2_a2e8, 3
  %v4_a2e8 = inttoptr i32 %v3_a2e8 to i8*
  store i8 %v1_a2e8, i8* %v4_a2e8, align 1
  %v0_a2ec = load i32, i32* %r7.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i8
  %v2_a2ec = load i32, i32* %r3.global-to-local, align 4
  %v3_a2ec = add i32 %v2_a2ec, 4
  %v4_a2ec = inttoptr i32 %v3_a2ec to i8*
  store i8 %v1_a2ec, i8* %v4_a2ec, align 1
  %v0_a2f0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a2f0, i32* %stack_var_-40, align 4
  %v5_a2f4 = icmp slt i32 %v0_a2e4, %v1_a2e4
  br i1 %v5_a2f4, label %dec_label_pc_a218, label %dec_label_pc_9fb8

; uselistorder directives
  uselistorder i32 %v3_a1fc34, { 2, 0, 1 }
  uselistorder i32 %v3_a1f0, { 1, 0 }
  uselistorder i32 %v3_a1ec, { 1, 0 }
  uselistorder i32 %v7_a1e8, { 1, 0 }
  uselistorder i32 %v4_a1b0, { 1, 0 }
  uselistorder i32 %v0_a1a8, { 0, 2, 1 }
  uselistorder i32 %v0_a18c, { 0, 2, 1 }
  uselistorder i32 %v4_a178, { 1, 0 }
  uselistorder i32 %v0_a170, { 0, 2, 1 }
  uselistorder i32 %v2_a144, { 1, 0 }
  uselistorder i32 %v8_a124, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a110, { 1, 0 }
  uselistorder i32 %v3_a0ec, { 1, 3, 2, 0, 4 }
  uselistorder i1 %v2_a0e0, { 1, 0 }
  uselistorder i32 %v1_a0d4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_a0d0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_a078, { 0, 2, 1 }
  uselistorder i32 %v0_a060, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a04c, { 1, 0 }
  uselistorder i32 %v2_a048, { 0, 2, 1 }
  uselistorder i1 %v2_9ff8, { 3, 0, 1, 2 }
  uselistorder i1 %v3_a164, { 1, 0, 2, 3 }
  uselistorder i8 %v5_9ea8, { 0, 2, 1 }
  uselistorder i32 %v3_9e94, { 1, 0 }
  uselistorder i32 %v1_9e84, { 2, 3, 0, 1 }
  uselistorder i32 %v1_9e80, { 1, 2, 0 }
  uselistorder i32 %v1_9e78, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9e70, { 1, 0 }
  uselistorder i32 %v1_9e48, { 2, 1, 0, 3 }
  uselistorder i32 %v3_9e28, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9e24, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9e10, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_9e08, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9e04, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_9e00, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9df4, { 3, 1, 2, 0 }
  uselistorder i32 %v3_9db0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9d9c, { 1, 0, 6, 4, 5, 3, 2 }
  uselistorder i32 %v1_9d88, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9d14, { 1, 0 }
  uselistorder i8 %v5_9d04, { 1, 0, 2 }
  uselistorder i32 %v5_9ce8, { 1, 0 }
  uselistorder i8 %v5_9ccc, { 0, 2, 1 }
  uselistorder i32 %v6_9cac, { 1, 0 }
  uselistorder i32 %v4_9c94, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_9c78, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 8, 9, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r3.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 40, 41, 42, 43, 45, 44, 1, 3, 2, 5, 4, 6, 7, 8, 10, 9, 12, 11, 13, 15, 14, 21, 16, 17, 18, 19, 20, 26, 22, 23, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %ip.global-to-local, { 24, 25, 26, 27, 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_a1dc, { 1, 0 }
  uselistorder label %dec_label_pc_a1c4, { 1, 0 }
  uselistorder label %dec_label_pc_a038, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9fc0, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_a300(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a300:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a300 = load i32, i32* @r4, align 4
  %v6_a300 = load i32, i32* @r5, align 4
  %v9_a300 = load i32, i32* @r6, align 4
  %v12_a300 = load i32, i32* @r7, align 4
  %v15_a300 = load i32, i32* @r8, align 4
  %v21_a300 = load i32, i32* @sl, align 4
  %v1_a304 = urem i32 %arg1, 256
  store i32 %v1_a304, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a304, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a31c = urem i32 %arg3, 256
  store i32 %v1_a31c, i32* @r4, align 4
  %v2_a320 = call i32* @calloc(i32 %v1_a304, i32 4)
  %v4_a320 = ptrtoint i32* %v2_a320 to i32
  %v0_a324 = load i32, i32* @r5, align 4
  store i32 %v0_a324, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a334 = load i32, i32* @r4, align 4
  store i32 %v0_a334, i32* %r0.global-to-local, align 4
  %v5_a338 = inttoptr i32 %v0_a324 to i32*
  %v6_a338 = call i32 @function_92ac(i32 %v0_a334, i32* %v5_a338, i32 2, i32 0)
  %v1_a344 = urem i32 %v6_a338, 256
  store i32 %v1_a344, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a350 = load i32, i32* @r5, align 4
  store i32 %v0_a350, i32* %r1.global-to-local, align 4
  %v0_a354 = load i32, i32* @r4, align 4
  store i32 %v0_a354, i32* %r0.global-to-local, align 4
  %v5_a358 = trunc i32 %v6_a338 to i8
  %v6_a35c = inttoptr i32 %v0_a350 to i32*
  %v7_a35c = call i32 @function_92ac(i32 %v0_a354, i32* %v6_a35c, i32 3, i32 65535)
  %v0_a360 = load i32, i32* @r5, align 4
  store i32 %v0_a360, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a35c, i32* @r7, align 4
  %v0_a370 = load i32, i32* @r4, align 4
  store i32 %v0_a370, i32* %r0.global-to-local, align 4
  %v4_a374 = inttoptr i32 %v0_a360 to i32*
  %v5_a374 = call i32 @function_92ac(i32 %v0_a370, i32* %v4_a374, i32 4, i32 64)
  %v1_a37c = urem i32 %v5_a374, 256
  store i32 %v1_a37c, i32* %ip.global-to-local, align 4
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a38c = load i32, i32* @r4, align 4
  store i32 %v0_a38c, i32* %r0.global-to-local, align 4
  %v5_a390 = trunc i32 %v5_a374 to i8
  %v6_a394 = inttoptr i32 %v0_a380 to i32*
  %v7_a394 = call i32 @function_92ac(i32 %v0_a38c, i32* %v6_a394, i32 5, i32 1)
  %v1_a3a0 = urem i32 %v7_a394, 256
  store i32 %v1_a3a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a3ac = load i32, i32* @r5, align 4
  store i32 %v0_a3ac, i32* %r1.global-to-local, align 4
  %v0_a3b0 = load i32, i32* @r4, align 4
  store i32 %v0_a3b0, i32* %r0.global-to-local, align 4
  %v5_a3b8 = inttoptr i32 %v0_a3ac to i32*
  %v6_a3b8 = call i32 @function_92ac(i32 %v0_a3b0, i32* %v5_a3b8, i32 6, i32 65535)
  %v0_a3c0 = load i32, i32* @r5, align 4
  store i32 %v0_a3c0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a3b8, i32* @sl, align 4
  %v0_a3d0 = load i32, i32* @r4, align 4
  store i32 %v0_a3d0, i32* %r0.global-to-local, align 4
  %v4_a3d4 = inttoptr i32 %v0_a3c0 to i32*
  %v5_a3d4 = call i32 @function_92ac(i32 %v0_a3d0, i32* %v4_a3d4, i32 7, i32 65535)
  %v0_a3d8 = load i32, i32* @r5, align 4
  store i32 %v0_a3d8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a3d4, i32* @r8, align 4
  %v0_a3e8 = load i32, i32* @r4, align 4
  store i32 %v0_a3e8, i32* %r0.global-to-local, align 4
  %v4_a3ec = inttoptr i32 %v0_a3d8 to i32*
  %v5_a3ec = call i32 @function_92ac(i32 %v0_a3e8, i32* %v4_a3ec, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r5, align 4
  store i32 %v0_a3fc, i32* %r1.global-to-local, align 4
  %v0_a400 = load i32, i32* @r4, align 4
  store i32 %v0_a400, i32* %r0.global-to-local, align 4
  %v4_a404 = inttoptr i32 %v0_a3fc to i32*
  %v5_a404 = call i32 @function_92ac(i32 %v0_a400, i32* %v4_a404, i32 1, i32 1)
  %v1_a40c = urem i32 %v5_a404, 256
  store i32 %v1_a40c, i32* %ip.global-to-local, align 4
  %v0_a410 = load i32, i32* @r5, align 4
  store i32 %v0_a410, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a41c = load i32, i32* @r4, align 4
  store i32 %v0_a41c, i32* %r0.global-to-local, align 4
  %v5_a424 = inttoptr i32 %v0_a410 to i32*
  %v6_a424 = call i32 @function_92ac(i32 %v0_a41c, i32* %v5_a424, i32 19, i32 0)
  %v0_a42c = load i32, i32* @r5, align 4
  store i32 %v0_a42c, i32* %r1.global-to-local, align 4
  %v2_a430 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_a430, i32* %r3.global-to-local, align 4
  store i32 %v6_a424, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a43c = load i32, i32* @r4, align 4
  store i32 %v0_a43c, i32* %r0.global-to-local, align 4
  %v4_a440 = inttoptr i32 %v0_a42c to i32*
  %v5_a440 = call i32 @function_92ac(i32 %v0_a43c, i32* %v4_a440, i32 25, i32 %v2_a430)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a454 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a454, i32* %r0.global-to-local, align 4
  %v2_a458 = icmp eq i32 %v3_a454, -1
  store i1 %v2_a458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a458, label %dec_label_pc_a93c, label %dec_label_pc_a464

dec_label_pc_a464:                                ; preds = %dec_label_pc_a300
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a46c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a46c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_a480 = call i32 @setsockopt(i32 %v3_a454, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_a480, i32* %r0.global-to-local, align 4
  %v2_a484 = icmp eq i32 %v7_a480, -1
  store i1 %v2_a484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a484, label %dec_label_pc_a934, label %dec_label_pc_a48c

dec_label_pc_a48c:                                ; preds = %dec_label_pc_a464
  %v0_a48c = load i32, i32* @sl, align 4
  %v3_a48c = mul i32 %v0_a48c, 65536
  store i32 %v3_a48c, i32* %sl.global-to-local, align 4
  %v0_a490 = load i32, i32* @r8, align 4
  %v3_a490 = mul i32 %v0_a490, 65536
  store i32 %v3_a490, i32* %r8.global-to-local, align 4
  %v0_a498 = load i32, i32* @r7, align 4
  %v3_a498 = mul i32 %v0_a498, 65536
  store i32 %v3_a498, i32* %r7.global-to-local, align 4
  %v0_a49c = load i32, i32* @r6, align 4
  %v1_a49c = urem i32 %v0_a49c, 256
  store i32 %v1_a49c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a4a4 = urem i32 %v0_a498, 65536
  store i32 %v3_a4a4, i32* %r2.global-to-local, align 4
  %v3_a4a8 = urem i32 %v0_a48c, 65536
  store i32 %v3_a4a8, i32* %r3.global-to-local, align 4
  %v3_a4ac = urem i32 %v0_a490, 65536
  store i32 %v3_a4ac, i32* %r1.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @fp, align 4
  %v2_a4b0 = icmp eq i32 %v0_a4b0, 0
  store i1 %v2_a4b0, i1* %cpsr_z.global-to-local, align 1
  %tmp86 = icmp slt i32 %v0_a4b0, 1
  br i1 %tmp86, label %dec_label_pc_aa5c, label %dec_label_pc_a4d0

dec_label_pc_a4d0:                                ; preds = %dec_label_pc_a48c
  %v3_a4d4 = mul i32 %v5_a3ec, 65536
  %v0_a498.not = or i32 %v0_a498, -65536
  %v1_a4dc = xor i32 %v0_a498.not, 65535
  %v1_a4e4 = add i32 %v3_a4d4, 4325376
  %v1_a4e8 = urem i32 %v0_a48c, 256
  %v3_a4f0 = udiv i32 %v1_a4e4, 256
  %v1_a4f4 = add i32 %v3_a4d4, 524288
  %v1_a4fc = add i32 %v3_a4d4, 1835008
  %v1_a500 = urem i32 %v0_a490, 256
  %v1_a504 = and i32 %v3_a4f0, 65280
  store i32 %v1_a504, i32* %r0.global-to-local, align 4
  %v3_a50c = udiv i32 %v1_a4fc, 256
  %tmp87 = mul nsw i32 %v1_a4dc, 256
  %v1_a524 = and i32 %v3_a50c, 65280
  store i32 %v1_a524, i32* %ip.global-to-local, align 4
  %v1_a528 = and i32 %tmp87, 65280
  store i32 %v1_a528, i32* %lr.global-to-local, align 4
  %tmp89 = udiv i32 %v1_a4dc, 256
  %v4_a514 = sdiv i32 %v1_a4e4, 16777216
  %v5_a544 = trunc i32 %tmp89 to i8
  %v3_a550 = mul nuw nsw i32 %v1_a4e8, 256
  %v3_a558 = ashr i32 %v1_a4e4, 31
  %v3_a55c = mul nuw nsw i32 %v1_a500, 256
  store i32 %v3_a55c, i32* %r5.global-to-local, align 4
  %tmp90 = udiv i32 %v0_a48c, 256
  %v4_a560 = urem i32 %tmp90, 256
  %v5_a560 = or i32 %v4_a560, %v3_a550
  store i32 %v5_a560, i32* %r7.global-to-local, align 4
  %v3_a564 = udiv i32 %v1_a4f4, 256
  %tmp91 = udiv i32 %v0_a490, 256
  %v4_a568 = urem i32 %tmp91, 256
  %v5_a568 = or i32 %v4_a568, %v3_a55c
  store i32 %v5_a568, i32* %sl.global-to-local, align 4
  %v3_a574 = sdiv i32 %v3_a498, 16777216
  %v7_a574 = sdiv i32 %v1_a4fc, 16777216
  %v1_a578 = and i32 %v3_a564, 65280
  store i32 %v1_a578, i32* %r6.global-to-local, align 4
  %v3_a57c = ashr i32 %v3_a498, 31
  %v3_a580 = ashr i32 %v1_a4fc, 31
  %v3_a584 = udiv i32 %v1_a4dc, 65536
  %v4_a588 = udiv i32 %v1_a4f4, 16777216
  %v5_a588 = or i32 %v4_a588, %v1_a578
  store i32 %v5_a588, i32* %r8.global-to-local, align 4
  store i32 %v1_a4e8, i32* %r1.global-to-local, align 4
  store i32 %v1_a500, i32* %r2.global-to-local, align 4
  %v3_a5a038 = udiv i32 %v1_a578, 256
  store i32 %v3_a5a038, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_a600 = sext i8 %v5_a390 to i32
  %v2_a700 = icmp eq i32 %v1_a49c, 0
  %sext18 = mul i32 %v0_a48c, 16777216
  %v4_a714 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_a4f4, 256
  %v4_a728 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_a490, 16777216
  %v4_a730 = sdiv i32 %sext20, 16777216
  %v1_a614 = trunc i32 %v3_a558 to i8
  %v1_a738 = trunc i32 %v4_a728 to i8
  br label %dec_label_pc_a5b4

dec_label_pc_a5b4:                                ; preds = %bb98, %dec_label_pc_a4d0
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a5c0 = call i32* @calloc(i32 1510, i32 4)
  %v4_a5c0 = ptrtoint i32* %v2_a5c0 to i32
  store i32 %v4_a5c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a320, i32* %r1.global-to-local, align 4
  %v3_a5c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5c8, i32* %r3.global-to-local, align 4
  %v2_a5cc = load i32, i32* %r4.global-to-local, align 4
  %v5_a5cc = mul i32 %v2_a5cc, 4
  %v6_a5cc = add i32 %v5_a5cc, %v4_a320
  %v7_a5cc = inttoptr i32 %v6_a5cc to i32*
  store i32 %v4_a5c0, i32* %v7_a5cc, align 4
  %v0_a5d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5d0 = load i32, i32* %r3.global-to-local, align 4
  %v4_a5d0 = mul i32 %v1_a5d0, 4
  %v5_a5d0 = add i32 %v4_a5d0, %v0_a5d0
  %v6_a5d0 = inttoptr i32 %v5_a5d0 to i32*
  %v7_a5d0 = load i32, i32* %v6_a5d0, align 4
  store i32 %v7_a5d0, i32* %r4.global-to-local, align 4
  %v1_a5d4 = inttoptr i32 %v7_a5d0 to i8*
  %v2_a5d4 = load i8, i8* %v1_a5d4, align 1
  %tmp = urem i8 %v2_a5d4, 16
  %v1_a5d8 = zext i8 %tmp to i32
  %v1_a5dc = or i32 %v1_a5d8, 64
  store i32 %v1_a5dc, i32* %r2.global-to-local, align 4
  %v1_a5e0 = trunc i32 %v1_a5dc to i8
  store i8 %v1_a5e0, i8* %v1_a5d4, align 1
  %v0_a5e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a5e4 = inttoptr i32 %v0_a5e4 to i8*
  %v2_a5e4 = load i8, i8* %v1_a5e4, align 1
  %v1_a5e8 = and i8 %v2_a5e4, -16
  %v1_a5ec = or i8 %v1_a5e8, 5
  store i32 %v1_a3a0, i32* %r2.global-to-local, align 4
  store i8 %v1_a5ec, i8* %v1_a5e4, align 1
  %v2_a5fc = load i32, i32* %r4.global-to-local, align 4
  %v3_a5fc = add i32 %v2_a5fc, 1
  %v4_a5fc = inttoptr i32 %v3_a5fc to i8*
  store i8 %v5_a358, i8* %v4_a5fc, align 1
  store i32 %v4_a600, i32* %r1.global-to-local, align 4
  %v2_a604 = load i32, i32* %r4.global-to-local, align 4
  %v3_a604 = add i32 %v2_a604, 8
  %v4_a604 = inttoptr i32 %v3_a604 to i8*
  store i8 %v5_a390, i8* %v4_a604, align 1
  store i32 %v3_a558, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v9_a610 = icmp eq i32 %v0_a610, 0
  store i1 %v9_a610, i1* %cpsr_z.global-to-local, align 1
  %v2_a614 = load i32, i32* %r4.global-to-local, align 4
  %v3_a614 = add i32 %v2_a614, 3
  %v4_a614 = inttoptr i32 %v3_a614 to i8*
  store i8 %v1_a614, i8* %v4_a614, align 1
  store i32 %v4_a514, i32* %r2.global-to-local, align 4
  %v0_a61c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a61c, label %.thread22, label %.thread

.thread:                                          ; preds = %dec_label_pc_a5b4
  %v1_a61c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_a61c, i32* %r3.global-to-local, align 4
  %v2_a620 = trunc i32 %v1_a61c to i8
  %v3_a620 = load i32, i32* %r4.global-to-local, align 4
  %v4_a620 = add i32 %v3_a620, 7
  %v5_a620 = inttoptr i32 %v4_a620 to i8*
  store i8 %v2_a620, i8* %v5_a620, align 1
  %v0_a624.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a624.pr.pr, label %.thread22, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a628 = load i32, i32* %r4.global-to-local, align 4
  %v4_a628 = add i32 %v3_a628, 6
  %v5_a628 = inttoptr i32 %v4_a628 to i8*
  store i8 64, i8* %v5_a628, align 1
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_a5b4, %.thread, %bb
  %v0_a62c = load i32, i32* %r2.global-to-local, align 4
  %v1_a62c = trunc i32 %v0_a62c to i8
  %v2_a62c = load i32, i32* %r4.global-to-local, align 4
  %v3_a62c = add i32 %v2_a62c, 2
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v1_a62c, i8* %v4_a62c, align 1
  store i32 %v3_a57c, i32* %r2.global-to-local, align 4
  store i32 %v3_a574, i32* %r1.global-to-local, align 4
  %v2_a63c = load i32, i32* %r4.global-to-local, align 4
  %v3_a63c = add i32 %v2_a63c, 9
  %v4_a63c = inttoptr i32 %v3_a63c to i8*
  store i8 47, i8* %v4_a63c, align 1
  %v0_a640 = load i32, i32* %r2.global-to-local, align 4
  %v1_a640 = trunc i32 %v0_a640 to i8
  %v2_a640 = load i32, i32* %r4.global-to-local, align 4
  %v3_a640 = add i32 %v2_a640, 5
  %v4_a640 = inttoptr i32 %v3_a640 to i8*
  store i8 %v1_a640, i8* %v4_a640, align 1
  %v3_a644 = load i32, i32* %stack_var_-40, align 4
  %v5_a64c = mul i32 %v3_a644, 24
  store i32 %v5_a64c, i32* %r3.global-to-local, align 4
  store i32 %v5_a440, i32* %r2.global-to-local, align 4
  %v1_a654 = load i32, i32* %r4.global-to-local, align 4
  %v2_a654 = add i32 %v1_a654, 12
  %v3_a654 = inttoptr i32 %v2_a654 to i32*
  store i32 %v5_a440, i32* %v3_a654, align 4
  %v0_a658 = load i32, i32* %r3.global-to-local, align 4
  %v1_a658 = load i32, i32* @sb, align 4
  %v2_a658 = add i32 %v1_a658, %v0_a658
  store i32 %v2_a658, i32* %r3.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 16
  %v2_a65c = inttoptr i32 %v1_a65c to i32*
  %v3_a65c = load i32, i32* %v2_a65c, align 4
  store i32 %v3_a65c, i32* %r2.global-to-local, align 4
  %v0_a660 = load i32, i32* %r1.global-to-local, align 4
  %v1_a660 = trunc i32 %v0_a660 to i8
  %v2_a660 = load i32, i32* %r4.global-to-local, align 4
  %v3_a660 = add i32 %v2_a660, 4
  %v4_a660 = inttoptr i32 %v3_a660 to i8*
  store i8 %v1_a660, i8* %v4_a660, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_a668 = load i32, i32* %r4.global-to-local, align 4
  %v1_a668 = add i32 %v0_a668, 20
  store i32 %v1_a668, i32* %r1.global-to-local, align 4
  %v3_a66c = add i32 %v0_a668, 22
  %v4_a66c = inttoptr i32 %v3_a66c to i8*
  store i8 101, i8* %v4_a66c, align 1
  %v0_a670 = load i32, i32* %r2.global-to-local, align 4
  %v1_a670 = load i32, i32* %r4.global-to-local, align 4
  %v2_a670 = add i32 %v1_a670, 16
  %v3_a670 = inttoptr i32 %v2_a670 to i32*
  store i32 %v0_a670, i32* %v3_a670, align 4
  %v0_a674 = load i32, i32* %r4.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 24
  store i32 %v1_a674, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_a67c = load i32, i32* %r3.global-to-local, align 4
  %v1_a67c = add i32 %v0_a67c, -93
  store i32 %v1_a67c, i32* %r3.global-to-local, align 4
  %v2_a680 = load i32, i32* %r1.global-to-local, align 4
  %v3_a680 = add i32 %v2_a680, 3
  %v4_a680 = inttoptr i32 %v3_a680 to i8*
  store i8 88, i8* %v4_a680, align 1
  %v0_a684 = load i32, i32* %r3.global-to-local, align 4
  %v1_a684 = trunc i32 %v0_a684 to i8
  %v2_a684 = load i32, i32* %r0.global-to-local, align 4
  %v3_a684 = add i32 %v2_a684, 12
  %v4_a684 = inttoptr i32 %v3_a684 to i8*
  store i8 %v1_a684, i8* %v4_a684, align 1
  %v0_a688 = load i32, i32* %ip.global-to-local, align 4
  %v1_a688 = trunc i32 %v0_a688 to i8
  %v2_a688 = load i32, i32* %r0.global-to-local, align 4
  %v3_a688 = add i32 %v2_a688, 13
  %v4_a688 = inttoptr i32 %v3_a688 to i8*
  store i8 %v1_a688, i8* %v4_a688, align 1
  %v0_a68c = load i32, i32* %r4.global-to-local, align 4
  %v1_a68c = add i32 %v0_a68c, 38
  %v2_a68c = inttoptr i32 %v1_a68c to i8*
  %v3_a68c = load i8, i8* %v2_a68c, align 1
  %tmp103 = urem i8 %v3_a68c, 16
  %v1_a690 = zext i8 %tmp103 to i32
  %v1_a694 = or i32 %v1_a690, 64
  store i32 %v1_a694, i32* %r3.global-to-local, align 4
  %v1_a698 = trunc i32 %v1_a694 to i8
  store i8 %v1_a698, i8* %v2_a68c, align 1
  %v0_a69c = load i32, i32* %r4.global-to-local, align 4
  %v1_a69c = add i32 %v0_a69c, 38
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v1_a6a0 = and i8 %v3_a69c, -16
  %v1_a6a4 = or i8 %v1_a6a0, 5
  store i8 %v1_a6a4, i8* %v2_a69c, align 1
  %v0_a6b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a6b0 = add i32 %v0_a6b0, 38
  store i32 %v1_a6b0, i32* %r5.global-to-local, align 4
  %v3_a6b4 = add i32 %v0_a6b0, 39
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v5_a358, i8* %v4_a6b4, align 1
  store i32 %v7_a574, i32* %r1.global-to-local, align 4
  store i32 %tmp89, i32* %r3.global-to-local, align 4
  store i32 %v3_a580, i32* %r2.global-to-local, align 4
  %v2_a6c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6c4 = add i32 %v2_a6c4, 4
  %v4_a6c4 = inttoptr i32 %v3_a6c4 to i8*
  store i8 %v5_a544, i8* %v4_a6c4, align 1
  %v0_a6c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c8 = trunc i32 %v0_a6c8 to i8
  %v2_a6c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6c8 = add i32 %v2_a6c8, 2
  %v4_a6c8 = inttoptr i32 %v3_a6c8 to i8*
  store i8 %v1_a6c8, i8* %v4_a6c8, align 1
  %v0_a6cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6cc, label %bb93, label %bb92

bb92:                                             ; preds = %.thread22
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %.thread22, %bb92
  store i32 %v3_a584, i32* %r1.global-to-local, align 4
  %v0_a6d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6d4 = trunc i32 %v0_a6d4 to i8
  %v2_a6d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6d4 = add i32 %v2_a6d4, 3
  %v4_a6d4 = inttoptr i32 %v3_a6d4 to i8*
  store i8 %v1_a6d4, i8* %v4_a6d4, align 1
  store i32 %v4_a600, i32* %r2.global-to-local, align 4
  %v0_a6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6dc, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_a6dc = trunc i32 %v1_a6dc to i8
  %v3_a6dc = load i32, i32* %r5.global-to-local, align 4
  %v4_a6dc = add i32 %v3_a6dc, 6
  %v5_a6dc = inttoptr i32 %v4_a6dc to i8*
  store i8 %v2_a6dc, i8* %v5_a6dc, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a6e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6e4 = add i32 %v2_a6e4, 5
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v4_a6e4, align 1
  %v0_a6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e8 = trunc i32 %v0_a6e8 to i8
  %v2_a6e8 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6e8 = add i32 %v2_a6e8, 8
  %v4_a6e8 = inttoptr i32 %v3_a6e8 to i8*
  store i8 %v1_a6e8, i8* %v4_a6e8, align 1
  %v0_a6ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6ec, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_a6ec = load i32, i32* %ip.global-to-local, align 4
  %v2_a6ec = trunc i32 %v1_a6ec to i8
  %v3_a6ec = load i32, i32* %r5.global-to-local, align 4
  %v4_a6ec = add i32 %v3_a6ec, 7
  %v5_a6ec = inttoptr i32 %v4_a6ec to i8*
  store i8 %v2_a6ec, i8* %v5_a6ec, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_a6f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6f0 = trunc i32 %v0_a6f0 to i8
  %v2_a6f0 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6f0 = add i32 %v2_a6f0, 9
  %v4_a6f0 = inttoptr i32 %v3_a6f0 to i8*
  store i8 %v1_a6f0, i8* %v4_a6f0, align 1
  %v0_a6f4 = call i32 @function_f28c()
  store i32 %v0_a6f4, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %r1.global-to-local, align 4
  store i1 %v2_a700, i1* %cpsr_z.global-to-local, align 1
  %v1_a704 = sub i32 1023, %v0_a6f4
  store i32 %v1_a704, i32* %r3.global-to-local, align 4
  br i1 %v2_a700, label %.thread23, label %.thread24

.thread23:                                        ; preds = %bb97
  %v2_a70c = load i32, i32* %r5.global-to-local, align 4
  %v3_a70c = add i32 %v2_a70c, 16
  %v4_a70c = inttoptr i32 %v3_a70c to i32*
  store i32 %v1_a704, i32* %v4_a70c, align 4
  br label %bb98

.thread24:                                        ; preds = %bb97
  %v1_a708 = load i32, i32* %r4.global-to-local, align 4
  %v2_a708 = add i32 %v1_a708, 16
  %v3_a708 = inttoptr i32 %v2_a708 to i32*
  %v4_a708 = load i32, i32* %v3_a708, align 4
  store i32 %v4_a708, i32* %r3.global-to-local, align 4
  %v2_a710 = load i32, i32* %r5.global-to-local, align 4
  %v3_a710 = add i32 %v2_a710, 16
  %v4_a710 = inttoptr i32 %v3_a710 to i32*
  store i32 %v4_a708, i32* %v4_a710, align 4
  br label %bb98

bb98:                                             ; preds = %.thread23, %.thread24
  store i32 %v4_a714, i32* %r3.global-to-local, align 4
  %v0_a718 = load i32, i32* %r4.global-to-local, align 4
  %v1_a718 = add i32 %v0_a718, 58
  store i32 %v1_a718, i32* %r6.global-to-local, align 4
  %v1_a71c = load i32, i32* %r5.global-to-local, align 4
  %v2_a71c = add i32 %v1_a71c, 12
  %v3_a71c = inttoptr i32 %v2_a71c to i32*
  store i32 %v0_a6f4, i32* %v3_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = trunc i32 %v0_a720 to i8
  %v2_a720 = load i32, i32* %r6.global-to-local, align 4
  %v3_a720 = add i32 %v2_a720, 1
  %v4_a720 = inttoptr i32 %v3_a720 to i8*
  store i8 %v1_a720, i8* %v4_a720, align 1
  %v3_a724 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a724, i32* %r3.global-to-local, align 4
  store i32 %v4_a728, i32* %r2.global-to-local, align 4
  %v1_a72c = add i32 %v3_a724, 1
  store i32 %v1_a72c, i32* %r4.global-to-local, align 4
  store i32 %v4_a730, i32* %r1.global-to-local, align 4
  %v1_a734 = load i32, i32* @fp, align 4
  %v9_a734 = icmp eq i32 %v1_a72c, %v1_a734
  store i1 %v9_a734, i1* %cpsr_z.global-to-local, align 1
  %v2_a738 = load i32, i32* %r6.global-to-local, align 4
  %v3_a738 = add i32 %v2_a738, 5
  %v4_a738 = inttoptr i32 %v3_a738 to i8*
  store i8 %v1_a738, i8* %v4_a738, align 1
  %v0_a73c = load i32, i32* %r7.global-to-local, align 4
  %v1_a73c = trunc i32 %v0_a73c to i8
  %v2_a73c = load i32, i32* %r6.global-to-local, align 4
  %v3_a73c = inttoptr i32 %v2_a73c to i8*
  store i8 %v1_a73c, i8* %v3_a73c, align 1
  %v0_a740 = load i32, i32* %sl.global-to-local, align 4
  %v1_a740 = trunc i32 %v0_a740 to i8
  %v2_a740 = load i32, i32* %r6.global-to-local, align 4
  %v3_a740 = add i32 %v2_a740, 2
  %v4_a740 = inttoptr i32 %v3_a740 to i8*
  store i8 %v1_a740, i8* %v4_a740, align 1
  %v0_a744 = load i32, i32* %r1.global-to-local, align 4
  %v1_a744 = trunc i32 %v0_a744 to i8
  %v2_a744 = load i32, i32* %r6.global-to-local, align 4
  %v3_a744 = add i32 %v2_a744, 3
  %v4_a744 = inttoptr i32 %v3_a744 to i8*
  store i8 %v1_a744, i8* %v4_a744, align 1
  %v0_a748 = load i32, i32* %r8.global-to-local, align 4
  %v1_a748 = trunc i32 %v0_a748 to i8
  %v2_a748 = load i32, i32* %r6.global-to-local, align 4
  %v3_a748 = add i32 %v2_a748, 4
  %v4_a748 = inttoptr i32 %v3_a748 to i8*
  store i8 %v1_a748, i8* %v4_a748, align 1
  %v0_a74c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a74c, i32* %stack_var_-40, align 4
  %v5_a750 = icmp slt i32 %v1_a72c, %v1_a734
  br i1 %v5_a750, label %dec_label_pc_a5b4, label %dec_label_pc_a754

dec_label_pc_a754:                                ; preds = %bb98
  %v1_a75c = add i32 %v5_a3ec, 8
  store i32 %v1_a75c, i32* %r2.global-to-local, align 4
  %v1_a760 = add i32 %v5_a3ec, 66
  store i32 %v1_a760, i32* %r3.global-to-local, align 4
  %v0_a76c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a76c.preheader

dec_label_pc_a76c.preheader:                      ; preds = %dec_label_pc_a754, %dec_label_pc_aa5c
  %v0_a76c.pre = phi i32 [ %v0_a76c.pre.pre, %dec_label_pc_a754 ], [ %v0_a4b0, %dec_label_pc_aa5c ]
  %stack_var_-160.0.ph = phi i32 [ %v1_a760, %dec_label_pc_a754 ], [ %v1_aa68, %dec_label_pc_aa5c ]
  %stack_var_-156.0.ph = phi i32 [ %v1_a75c, %dec_label_pc_a754 ], [ %v1_aa64, %dec_label_pc_aa5c ]
  %v3_a9bc = icmp eq i32 %v3_a4a4, 65535
  %v2_aa2c = icmp eq i32 %v1_a49c, 0
  %v2_a810 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a828 = ptrtoint i32* %stack_var_-48 to i32
  %v2_a838 = ptrtoint i32* %stack_var_-52 to i32
  %v2_a844 = ptrtoint i32* %stack_var_-50 to i32
  %v2_a858 = icmp eq i32 %v1_a40c, 0
  %v2_a7b4 = icmp eq i32 %v5_a440, -1
  br label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a860, %dec_label_pc_a76c.preheader
  %v0_a76c = phi i32 [ %v0_a76c.pre, %dec_label_pc_a76c.preheader ], [ %v1_a924, %dec_label_pc_a860 ]
  %v2_a76c = icmp eq i32 %v0_a76c, 0
  store i1 %v2_a76c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp99 = icmp slt i32 %v0_a76c, 1
  br label %dec_label_pc_a774

dec_label_pc_a774:                                ; preds = %dec_label_pc_a774, %dec_label_pc_a76c
  br i1 %tmp99, label %dec_label_pc_a774, label %dec_label_pc_a778

dec_label_pc_a778:                                ; preds = %dec_label_pc_a774
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_a784

dec_label_pc_a784:                                ; preds = %dec_label_pc_a860, %dec_label_pc_a778
  %v1_a798 = phi i32 [ %v1_a920, %dec_label_pc_a860 ], [ 0, %dec_label_pc_a778 ]
  %v5_a788 = mul i32 %v1_a798, 24
  %v1_a78c = load i32, i32* @sb, align 4
  %v2_a78c = add i32 %v1_a78c, %v5_a788
  store i32 %v2_a78c, i32* %r3.global-to-local, align 4
  store i32 %v4_a320, i32* %r1.global-to-local, align 4
  %v1_a794 = add i32 %v2_a78c, 20
  %v2_a794 = inttoptr i32 %v1_a794 to i8*
  %v3_a794 = load i8, i8* %v2_a794, align 1
  %v4_a794 = zext i8 %v3_a794 to i32
  store i32 %v4_a794, i32* %r2.global-to-local, align 4
  %v4_a798 = mul i32 %v1_a798, 4
  %v5_a798 = add i32 %v4_a798, %v4_a320
  %v6_a798 = inttoptr i32 %v5_a798 to i32*
  %v7_a798 = load i32, i32* %v6_a798, align 4
  store i32 %v7_a798, i32* @r5, align 4
  %v7_a79c = icmp eq i8 %v3_a794, 31
  store i1 %v7_a79c, i1* %cpsr_z.global-to-local, align 1
  %v1_a7a0 = add i32 %v7_a798, 24
  store i32 %v1_a7a0, i32* @r8, align 4
  %v1_a7a4 = add i32 %v7_a798, 38
  store i32 %v1_a7a4, i32* @r6, align 4
  %v1_a7a8 = add i32 %v7_a798, 58
  store i32 %v1_a7a8, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_a794, 32
  br i1 %tmp104, label %dec_label_pc_a944, label %dec_label_pc_a7b0

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a784
  store i32 %v5_a440, i32* %r2.global-to-local, align 4
  store i1 %v2_a7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b4, label %dec_label_pc_a9ac, label %dec_label_pc_a7bc

dec_label_pc_a7bc:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7b0
  store i32 %v3_a4a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9bc, label %dec_label_pc_a9c8, label %dec_label_pc_a7d0

dec_label_pc_a7d0:                                ; preds = %dec_label_pc_a9ac.dec_label_pc_a7d0_crit_edge, %dec_label_pc_a7bc
  %v1_a7d4 = phi i32 [ %v1_a7d4.pre, %dec_label_pc_a9ac.dec_label_pc_a7d0_crit_edge ], [ 65535, %dec_label_pc_a7bc ]
  store i32 %v3_a4a8, i32* %r1.global-to-local, align 4
  %v9_a7d4 = icmp eq i32 %v3_a4a8, %v1_a7d4
  store i1 %v9_a7d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7d4, label %dec_label_pc_aa00, label %dec_label_pc_a7dc

dec_label_pc_a7dc:                                ; preds = %dec_label_pc_a9c8.dec_label_pc_a7dc_crit_edge, %dec_label_pc_a7d0
  %v1_a7e0 = phi i32 [ %v1_a7e0.pre, %dec_label_pc_a9c8.dec_label_pc_a7dc_crit_edge ], [ %v1_a7d4, %dec_label_pc_a7d0 ]
  store i32 %v3_a4ac, i32* %r2.global-to-local, align 4
  %v9_a7e0 = icmp eq i32 %v3_a4ac, %v1_a7e0
  store i1 %v9_a7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7e0, label %dec_label_pc_aa1c, label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_aa00, %dec_label_pc_a7dc
  store i32 %v1_a49c, i32* %r3.global-to-local, align 4
  store i1 %v2_aa2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa2c, label %dec_label_pc_aa40, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_a7e8
  %v1_a7f0 = load i32, i32* @r5, align 4
  %v2_a7f0 = add i32 %v1_a7f0, 16
  %v3_a7f0 = inttoptr i32 %v2_a7f0 to i32*
  %v4_a7f0 = load i32, i32* %v3_a7f0, align 4
  store i32 %v4_a7f0, i32* %r3.global-to-local, align 4
  %v2_a7f4 = load i32, i32* @r6, align 4
  %v3_a7f4 = add i32 %v2_a7f4, 16
  %v4_a7f4 = inttoptr i32 %v3_a7f4 to i32*
  store i32 %v4_a7f0, i32* %v4_a7f4, align 4
  br label %dec_label_pc_a7fc

dec_label_pc_a7fc:                                ; preds = %bb102, %.thread25, %dec_label_pc_aa40
  %v0_a7fc = call i32 @function_f28c()
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  store i32 %v0_a7fc, i32* %stack_var_-44, align 4
  %v0_a804 = call i32 @function_f28c()
  store i32 %v0_a804, i32* %r0.global-to-local, align 4
  store i32 %v0_a804, i32* %stack_var_-48, align 4
  %v0_a80c = call i32 @function_f28c()
  store i32 %v2_a810, i32* %r1.global-to-local, align 4
  store i32 %v0_a80c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a81c = load i32, i32* @r8, align 4
  store i32 %v0_a81c, i32* %r0.global-to-local, align 4
  %v3_a820 = call i32 @function_115a4(i32 %v0_a81c, i32 %v2_a810, i32 4)
  %v0_a824 = load i32, i32* @r8, align 4
  %v1_a824 = add i32 %v0_a824, 6
  store i32 %v1_a824, i32* %r0.global-to-local, align 4
  store i32 %v2_a828, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_a830 = call i32 @function_115a4(i32 %v1_a824, i32 %v2_a828, i32 4)
  %v0_a834 = load i32, i32* @r8, align 4
  %v1_a834 = add i32 %v0_a834, 4
  store i32 %v1_a834, i32* %r0.global-to-local, align 4
  store i32 %v2_a838, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a840 = call i32 @function_115a4(i32 %v1_a834, i32 %v2_a838, i32 2)
  store i32 %v2_a844, i32* %r1.global-to-local, align 4
  %v0_a848 = load i32, i32* @r8, align 4
  %v1_a848 = add i32 %v0_a848, 10
  store i32 %v1_a848, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a850 = call i32 @function_115a4(i32 %v1_a848, i32 %v2_a844, i32 2)
  store i32 %v3_a850, i32* %r0.global-to-local, align 4
  store i32 %v1_a40c, i32* %r1.global-to-local, align 4
  store i1 %v2_a858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a858, label %dec_label_pc_a860, label %dec_label_pc_aa4c

dec_label_pc_a860:                                ; preds = %dec_label_pc_a7fc, %dec_label_pc_aa4c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a864 = load i32, i32* @sl, align 4
  %v1_a864 = trunc i32 %v0_a864 to i8
  %v2_a864 = load i32, i32* @r5, align 4
  %v3_a864 = add i32 %v2_a864, 10
  %v4_a864 = inttoptr i32 %v3_a864 to i8*
  store i8 %v1_a864, i8* %v4_a864, align 1
  %v0_a868 = load i32, i32* @sl, align 4
  %v1_a868 = trunc i32 %v0_a868 to i8
  %v2_a868 = load i32, i32* @r5, align 4
  %v3_a868 = add i32 %v2_a868, 11
  %v4_a868 = inttoptr i32 %v3_a868 to i8*
  store i8 %v1_a868, i8* %v4_a868, align 1
  %v0_a86c = load i32, i32* @r5, align 4
  store i32 %v0_a86c, i32* @r0, align 4
  %v2_a870 = call i32 @function_ddc4(i32 %v0_a86c, i32 20)
  %v3_a870 = trunc i32 %v2_a870 to i8
  %v4_a874 = sdiv i32 %v2_a870, 256
  store i32 %v4_a874, i32* %r3.global-to-local, align 4
  %v1_a878 = trunc i32 %v4_a874 to i8
  %v2_a878 = load i32, i32* @r5, align 4
  %v3_a878 = add i32 %v2_a878, 11
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v3_a87c = load i32, i32* @r5, align 4
  %v4_a87c = add i32 %v3_a87c, 10
  %v5_a87c = inttoptr i32 %v4_a87c to i8*
  store i8 %v3_a870, i8* %v5_a87c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a884 = load i32, i32* @sl, align 4
  %v1_a884 = trunc i32 %v0_a884 to i8
  %v2_a884 = load i32, i32* @r6, align 4
  %v3_a884 = add i32 %v2_a884, 10
  %v4_a884 = inttoptr i32 %v3_a884 to i8*
  store i8 %v1_a884, i8* %v4_a884, align 1
  %v0_a888 = load i32, i32* @sl, align 4
  %v1_a888 = trunc i32 %v0_a888 to i8
  %v2_a888 = load i32, i32* @r6, align 4
  %v3_a888 = add i32 %v2_a888, 11
  %v4_a888 = inttoptr i32 %v3_a888 to i8*
  store i8 %v1_a888, i8* %v4_a888, align 1
  %v0_a88c = load i32, i32* @r6, align 4
  store i32 %v0_a88c, i32* @r0, align 4
  %v2_a890 = call i32 @function_ddc4(i32 %v0_a88c, i32 20)
  %v3_a890 = trunc i32 %v2_a890 to i8
  store i32 %v2_a890, i32* %r0.global-to-local, align 4
  %v4_a894 = sdiv i32 %v2_a890, 256
  store i32 %v4_a894, i32* %r3.global-to-local, align 4
  %v3_a898 = load i32, i32* @r6, align 4
  %v4_a898 = add i32 %v3_a898, 10
  %v5_a898 = inttoptr i32 %v4_a898 to i8*
  store i8 %v3_a890, i8* %v5_a898, align 1
  %v0_a89c = load i32, i32* %r3.global-to-local, align 4
  %v1_a89c = trunc i32 %v0_a89c to i8
  %v2_a89c = load i32, i32* @r6, align 4
  %v3_a89c = add i32 %v2_a89c, 11
  %v4_a89c = inttoptr i32 %v3_a89c to i8*
  store i8 %v1_a89c, i8* %v4_a89c, align 1
  %v0_a8a0 = load i32, i32* @r7, align 4
  %v1_a8a0 = add i32 %v0_a8a0, 4
  %v2_a8a0 = inttoptr i32 %v1_a8a0 to i8*
  %v3_a8a0 = load i8, i8* %v2_a8a0, align 1
  %v4_a8a0 = zext i8 %v3_a8a0 to i32
  store i32 %v4_a8a0, i32* %r3.global-to-local, align 4
  %v1_a8a4 = add i32 %v0_a8a0, 5
  %v2_a8a4 = inttoptr i32 %v1_a8a4 to i8*
  %v3_a8a4 = load i8, i8* %v2_a8a4, align 1
  %v4_a8a4 = zext i8 %v3_a8a4 to i32
  store i32 %v0_a8a0, i32* @r1, align 4
  %v4_a8ac = mul nuw nsw i32 %v4_a8a4, 256
  %v5_a8ac = or i32 %v4_a8ac, %v4_a8a0
  store i32 %v5_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i32, i32* @sl, align 4
  %v1_a8b0 = trunc i32 %v0_a8b0 to i8
  %v3_a8b0 = add i32 %v0_a8a0, 6
  %v4_a8b0 = inttoptr i32 %v3_a8b0 to i8*
  store i8 %v1_a8b0, i8* %v4_a8b0, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_a8b8 = load i32, i32* @sl, align 4
  %v1_a8b8 = trunc i32 %v0_a8b8 to i8
  %v2_a8b8 = load i32, i32* @r7, align 4
  %v3_a8b8 = add i32 %v2_a8b8, 7
  %v4_a8b8 = inttoptr i32 %v3_a8b8 to i8*
  store i8 %v1_a8b8, i8* %v4_a8b8, align 1
  %v0_a8bc = load i32, i32* @r6, align 4
  store i32 %v0_a8bc, i32* %r0.global-to-local, align 4
  %v4_a8c0 = call i32 @function_de20(i32 %v0_a8bc, i32 %v0_a8a0, i32 %v5_a8ac, i32 %stack_var_-156.0.ph)
  %v5_a8c0 = trunc i32 %v4_a8c0 to i8
  store i32 %v4_a8c0, i32* %r0.global-to-local, align 4
  %v3_a8c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8c4, i32* %r3.global-to-local, align 4
  %v3_a8c8 = mul i32 %v3_a8c4, 32
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  %v0_a8cc = load i32, i32* @r5, align 4
  %v1_a8cc = add i32 %v0_a8cc, 16
  %v2_a8cc = inttoptr i32 %v1_a8cc to i32*
  %v3_a8cc = load i32, i32* %v2_a8cc, align 4
  store i32 %v3_a8cc, i32* %r1.global-to-local, align 4
  %v5_a8d0 = mul i32 %v3_a8c4, 24
  store i32 %v5_a8d0, i32* %r2.global-to-local, align 4
  %v4_a8d440 = udiv i32 %v4_a8c0, 256
  %v1_a8d8 = trunc i32 %v4_a8d440 to i8
  %v2_a8d8 = load i32, i32* @r7, align 4
  %v3_a8d8 = add i32 %v2_a8d8, 7
  %v4_a8d8 = inttoptr i32 %v3_a8d8 to i8*
  store i8 %v1_a8d8, i8* %v4_a8d8, align 1
  %v0_a8dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a8dc = load i32, i32* @sb, align 4
  %v2_a8dc = add i32 %v1_a8dc, %v0_a8dc
  store i32 %v2_a8dc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a8e4 = load i32, i32* @r7, align 4
  %v4_a8e4 = add i32 %v3_a8e4, 6
  %v5_a8e4 = inttoptr i32 %v4_a8e4 to i8*
  store i8 %v5_a8c0, i8* %v5_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8e8 = add i32 %v1_a8e8, 4
  %v3_a8e8 = inttoptr i32 %v2_a8e8 to i32*
  store i32 %v0_a8e8, i32* %v3_a8e8, align 4
  %v0_a8ec = load i32, i32* %r3.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i8
  %v2_a8ec = load i32, i32* %r2.global-to-local, align 4
  %v3_a8ec = load i32, i32* @sb, align 4
  %v4_a8ec = add i32 %v3_a8ec, %v2_a8ec
  %v5_a8ec = inttoptr i32 %v4_a8ec to i8*
  store i8 %v1_a8ec, i8* %v5_a8ec, align 1
  %v0_a8f0 = load i32, i32* @sl, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i8
  %v2_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 2
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v4_a8f0, align 1
  %v0_a8f4 = load i32, i32* @sl, align 4
  %v1_a8f4 = trunc i32 %v0_a8f4 to i8
  %v2_a8f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_a8f4 = add i32 %v2_a8f4, 1
  %v4_a8f4 = inttoptr i32 %v3_a8f4 to i8*
  store i8 %v1_a8f4, i8* %v4_a8f4, align 1
  %v0_a8f8 = load i32, i32* @sl, align 4
  %v1_a8f8 = trunc i32 %v0_a8f8 to i8
  %v2_a8f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_a8f8 = add i32 %v2_a8f8, 3
  %v4_a8f8 = inttoptr i32 %v3_a8f8 to i8*
  store i8 %v1_a8f8, i8* %v4_a8f8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a904 = load i32, i32* @r5, align 4
  store i32 %v0_a904, i32* %r1.global-to-local, align 4
  store i32 %v3_a454, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_a910 = load i32, i32* %lr.global-to-local, align 4
  %v4_a910 = inttoptr i32 %v0_a910 to %sockaddr*
  %v7_a918 = inttoptr i32 %v0_a904 to i32*
  %v9_a918 = call i32 @sendto(i32 %v3_a454, i32* %v7_a918, i32 %stack_var_-160.0.ph, i32 16384, %sockaddr* %v4_a910, i32 16)
  %v3_a91c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add i32 %v3_a91c, 1
  store i32 %v1_a920, i32* %r0.global-to-local, align 4
  %v1_a924 = load i32, i32* @fp, align 4
  %v9_a924 = icmp eq i32 %v1_a920, %v1_a924
  store i1 %v9_a924, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a920, i32* %stack_var_-40, align 4
  %v6_a92c = icmp slt i32 %v1_a920, %v1_a924
  br i1 %v6_a92c, label %dec_label_pc_a784, label %dec_label_pc_a76c

dec_label_pc_a934:                                ; preds = %dec_label_pc_a464
  store i32 %v3_a454, i32* %r0.global-to-local, align 4
  %v1_a938 = call i32 @close(i32 %v3_a454)
  store i32 %v1_a938, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a93c

dec_label_pc_a93c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a934
  %v29_a940 = phi i32 [ -1, %dec_label_pc_a300 ], [ %v1_a938, %dec_label_pc_a934 ]
  store i32 %v3_a300, i32* %r4.global-to-local, align 4
  store i32 %v6_a300, i32* %r5.global-to-local, align 4
  store i32 %v9_a300, i32* %r6.global-to-local, align 4
  store i32 %v12_a300, i32* %r7.global-to-local, align 4
  store i32 %v15_a300, i32* %r8.global-to-local, align 4
  store i32 %v21_a300, i32* %sl.global-to-local, align 4
  ret i32 %v29_a940

dec_label_pc_a944:                                ; preds = %dec_label_pc_a784
  %v1_a944 = add i32 %v2_a78c, 16
  %v2_a944 = inttoptr i32 %v1_a944 to i32*
  %v3_a944 = load i32, i32* %v2_a944, align 4
  store i32 %v3_a944, i32* %r4.global-to-local, align 4
  %v0_a948 = call i32 @function_f28c()
  store i32 %v0_a948, i32* %r0.global-to-local, align 4
  %v3_a94c = load i32, i32* %stack_var_-40, align 4
  %v5_a954 = mul i32 %v3_a94c, 24
  %v0_a958 = load i32, i32* %r4.global-to-local, align 4
  %v1_a95c = load i32, i32* @sb, align 4
  %v2_a95c = add i32 %v1_a95c, %v5_a954
  store i32 %v2_a95c, i32* %r1.global-to-local, align 4
  %v1_a960 = and i32 %v0_a958, 65280
  store i32 %v1_a960, i32* %r3.global-to-local, align 4
  %v1_a958 = udiv i32 %v0_a958, 256
  %v3_a964 = and i32 %v1_a958, 65280
  store i32 %v3_a964, i32* %r2.global-to-local, align 4
  %v3_a968 = mul i32 %v0_a958, 16777216
  store i32 %v3_a968, i32* %ip.global-to-local, align 4
  %v1_a96c = add i32 %v2_a95c, 20
  %v2_a96c = inttoptr i32 %v1_a96c to i8*
  %v3_a96c = load i8, i8* %v2_a96c, align 1
  %v4_a96c = zext i8 %v3_a96c to i32
  store i32 %v4_a96c, i32* %lr.global-to-local, align 4
  %v4_a970 = mul nuw nsw i32 %v1_a960, 256
  %v5_a970 = or i32 %v4_a970, %v3_a968
  store i32 %v5_a970, i32* %ip.global-to-local, align 4
  %v2_a978 = call i32 @llvm.bswap.i32(i32 %v0_a958)
  %v7_a97c = lshr i32 %v0_a948, %v4_a96c
  %v8_a97c = add i32 %v7_a97c, %v2_a978
  %v3_a988 = mul i32 %v8_a97c, 16777216
  %v1_a98c = and i32 %v8_a97c, 65280
  store i32 %v1_a98c, i32* %r0.global-to-local, align 4
  store i32 %v5_a440, i32* %r2.global-to-local, align 4
  %v4_a998 = mul nuw nsw i32 %v1_a98c, 256
  %v5_a998 = or i32 %v4_a998, %v3_a988
  store i32 %v5_a998, i32* %r1.global-to-local, align 4
  %v2_a99c = call i32 @llvm.bswap.i32(i32 %v8_a97c)
  store i32 %v2_a99c, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b4, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a4 = load i32, i32* @r5, align 4
  %v2_a9a4 = add i32 %v1_a9a4, 16
  %v3_a9a4 = inttoptr i32 %v2_a9a4 to i32*
  store i32 %v2_a99c, i32* %v3_a9a4, align 4
  br i1 %v2_a7b4, label %dec_label_pc_a9ac, label %dec_label_pc_a7bc

dec_label_pc_a9ac:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7b0
  %v0_a9ac = call i32 @function_f28c()
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  store i32 %v3_a4a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9bc, i1* %cpsr_z.global-to-local, align 1
  %v1_a9c0 = load i32, i32* @r5, align 4
  %v2_a9c0 = add i32 %v1_a9c0, 12
  %v3_a9c0 = inttoptr i32 %v2_a9c0 to i32*
  store i32 %v0_a9ac, i32* %v3_a9c0, align 4
  br i1 %v3_a9bc, label %dec_label_pc_a9c8, label %dec_label_pc_a9ac.dec_label_pc_a7d0_crit_edge

dec_label_pc_a9ac.dec_label_pc_a7d0_crit_edge:    ; preds = %dec_label_pc_a9ac
  %v1_a7d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a7d0

dec_label_pc_a9c8:                                ; preds = %dec_label_pc_a9ac, %dec_label_pc_a7bc
  %v0_a9c8 = call i32 @function_f28c()
  %v3_a9d0 = urem i32 %v0_a9c8, 65536
  store i32 %v3_a9d0, i32* %r0.global-to-local, align 4
  %v1_a9d8 = sub nsw i32 999, %v3_a9d0
  store i32 %v1_a9d8, i32* %r2.global-to-local, align 4
  %v3_a9dc = sdiv i32 %v1_a9d8, 256
  store i32 %v3_a9dc, i32* %r1.global-to-local, align 4
  %v3_a9e039 = udiv i32 %v3_a9d0, 256
  store i32 %v3_a9e039, i32* %r3.global-to-local, align 4
  %v1_a9e4 = trunc i32 %v3_a9e039 to i8
  %v2_a9e4 = load i32, i32* @r5, align 4
  %v3_a9e4 = add i32 %v2_a9e4, 5
  %v4_a9e4 = inttoptr i32 %v3_a9e4 to i8*
  store i8 %v1_a9e4, i8* %v4_a9e4, align 1
  %v0_a9e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v0_a9e8 to i8
  %v2_a9e8 = load i32, i32* @r5, align 4
  %v3_a9e8 = add i32 %v2_a9e8, 4
  %v4_a9e8 = inttoptr i32 %v3_a9e8 to i8*
  store i8 %v1_a9e8, i8* %v4_a9e8, align 1
  %v0_a9ec = load i32, i32* %r1.global-to-local, align 4
  %v1_a9ec = trunc i32 %v0_a9ec to i8
  %v2_a9ec = load i32, i32* @r6, align 4
  %v3_a9ec = add i32 %v2_a9ec, 5
  %v4_a9ec = inttoptr i32 %v3_a9ec to i8*
  store i8 %v1_a9ec, i8* %v4_a9ec, align 1
  store i32 %v3_a4a8, i32* %r1.global-to-local, align 4
  %v1_a9f4 = load i32, i32* @r4, align 4
  %v9_a9f4 = icmp eq i32 %v3_a4a8, %v1_a9f4
  store i1 %v9_a9f4, i1* %cpsr_z.global-to-local, align 1
  %v0_a9f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9f8 = trunc i32 %v0_a9f8 to i8
  %v2_a9f8 = load i32, i32* @r6, align 4
  %v3_a9f8 = add i32 %v2_a9f8, 4
  %v4_a9f8 = inttoptr i32 %v3_a9f8 to i8*
  store i8 %v1_a9f8, i8* %v4_a9f8, align 1
  %v0_a9fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9fc, label %dec_label_pc_aa00, label %dec_label_pc_a9c8.dec_label_pc_a7dc_crit_edge

dec_label_pc_a9c8.dec_label_pc_a7dc_crit_edge:    ; preds = %dec_label_pc_a9c8
  %v1_a7e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a7dc

dec_label_pc_aa00:                                ; preds = %dec_label_pc_a9c8, %dec_label_pc_a7d0
  %v0_aa00 = call i32 @function_f28c()
  %v1_aa00 = trunc i32 %v0_aa00 to i8
  store i32 %v0_aa00, i32* %r0.global-to-local, align 4
  store i32 %v3_a4ac, i32* %r2.global-to-local, align 4
  %v4_aa08 = sdiv i32 %v0_aa00, 256
  store i32 %v4_aa08, i32* %r3.global-to-local, align 4
  %v1_aa0c = load i32, i32* @r4, align 4
  %v9_aa0c = icmp eq i32 %v3_a4ac, %v1_aa0c
  store i1 %v9_aa0c, i1* %cpsr_z.global-to-local, align 1
  %v3_aa10 = load i32, i32* @r5, align 4
  %v4_aa10 = add i32 %v3_aa10, 58
  %v5_aa10 = inttoptr i32 %v4_aa10 to i8*
  store i8 %v1_aa00, i8* %v5_aa10, align 1
  %v0_aa14 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa14 = trunc i32 %v0_aa14 to i8
  %v2_aa14 = load i32, i32* @r7, align 4
  %v3_aa14 = add i32 %v2_aa14, 1
  %v4_aa14 = inttoptr i32 %v3_aa14 to i8*
  store i8 %v1_aa14, i8* %v4_aa14, align 1
  %v0_aa18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa18, label %dec_label_pc_aa1c, label %dec_label_pc_a7e8

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_aa00, %dec_label_pc_a7dc
  %v0_aa1c = call i32 @function_f28c()
  %v1_aa1c = trunc i32 %v0_aa1c to i8
  store i32 %v0_aa1c, i32* %r0.global-to-local, align 4
  %v4_aa2041 = udiv i32 %v0_aa1c, 256
  %v1_aa24 = trunc i32 %v4_aa2041 to i8
  %v2_aa24 = load i32, i32* @r7, align 4
  %v3_aa24 = add i32 %v2_aa24, 3
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  store i32 %v1_a49c, i32* %r3.global-to-local, align 4
  store i1 %v2_aa2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa2c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_aa1c
  %v1_aa30 = load i32, i32* @r5, align 4
  %v2_aa30 = add i32 %v1_aa30, 16
  %v3_aa30 = inttoptr i32 %v2_aa30 to i32*
  %v4_aa30 = load i32, i32* %v3_aa30, align 4
  store i32 %v4_aa30, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_aa1c, %bb100
  %v3_aa34 = load i32, i32* @r7, align 4
  %v4_aa34 = add i32 %v3_aa34, 2
  %v5_aa34 = inttoptr i32 %v4_aa34 to i8*
  store i8 %v1_aa1c, i8* %v5_aa34, align 1
  %v0_aa38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa38, label %dec_label_pc_aa40, label %bb102

bb102:                                            ; preds = %bb101
  %v1_aa38 = load i32, i32* %r3.global-to-local, align 4
  %v2_aa38 = load i32, i32* @r6, align 4
  %v3_aa38 = add i32 %v2_aa38, 16
  %v4_aa38 = inttoptr i32 %v3_aa38 to i32*
  store i32 %v1_aa38, i32* %v4_aa38, align 4
  br label %dec_label_pc_a7fc

dec_label_pc_aa40:                                ; preds = %dec_label_pc_a7e8, %bb101
  %v0_aa40 = call i32 @function_f28c()
  store i32 %v0_aa40, i32* %r0.global-to-local, align 4
  %v1_aa44 = load i32, i32* @r6, align 4
  %v2_aa44 = add i32 %v1_aa44, 16
  %v3_aa44 = inttoptr i32 %v2_aa44 to i32*
  store i32 %v0_aa40, i32* %v3_aa44, align 4
  br label %dec_label_pc_a7fc

dec_label_pc_aa4c:                                ; preds = %dec_label_pc_a7fc
  %v0_aa4c = load i32, i32* @r7, align 4
  %v1_aa4c = add i32 %v0_aa4c, 8
  store i32 %v1_aa4c, i32* %r0.global-to-local, align 4
  store i32 %v5_a3ec, i32* @r1, align 4
  %v1_aa54 = inttoptr i32 %v1_aa4c to i8*
  %v2_aa54 = call i32 @function_f40c(i8* %v1_aa54)
  store i32 %v2_aa54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a860

dec_label_pc_aa5c:                                ; preds = %dec_label_pc_a48c
  %v1_aa64 = add i32 %v5_a3ec, 8
  store i32 %v1_aa64, i32* %r1.global-to-local, align 4
  %v1_aa68 = add i32 %v5_a3ec, 66
  store i32 %v1_aa68, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a76c.preheader

; uselistorder directives
  uselistorder i32 %v1_aa68, { 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0 }
  uselistorder i32 %v0_aa1c, { 0, 2, 1 }
  uselistorder i32 %v0_aa00, { 0, 2, 1 }
  uselistorder i32 %v3_a9d0, { 0, 2, 1 }
  uselistorder i32 %v2_a99c, { 1, 0 }
  uselistorder i32 %v8_a97c, { 1, 2, 0 }
  uselistorder i32 %v3_a968, { 1, 0 }
  uselistorder i32 %v0_a958, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a924, { 1, 2, 0 }
  uselistorder i32 %v1_a920, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a8c4, { 1, 0, 2 }
  uselistorder i32 %v4_a8c0, { 0, 2, 1 }
  uselistorder i32 %v0_a8a0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a890, { 0, 2, 1 }
  uselistorder i32 %v4_a874, { 1, 0 }
  uselistorder i32 %v7_a798, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a76c, { 1, 0 }
  uselistorder i1 %v2_a7b4, { 3, 0, 1, 2 }
  uselistorder i1 %v2_aa2c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a9bc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a6f4, { 1, 0, 2 }
  uselistorder i32 %v3_a55c, { 1, 0 }
  uselistorder i32 %tmp89, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v1_a4fc, { 2, 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32 %v1_a4e4, { 2, 1, 0 }
  uselistorder i32 %v1_a4dc, { 0, 2, 1 }
  uselistorder i32 %v3_a4d4, { 2, 1, 0 }
  uselistorder i32 %v0_a4b0, { 1, 0, 2 }
  uselistorder i32 %v3_a4a4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a49c, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_a498, { 2, 0, 1 }
  uselistorder i32 %v0_a498, { 2, 1, 0 }
  uselistorder i32 %v0_a490, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a48c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_a454, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_a440, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_a40c, { 1, 2, 0 }
  uselistorder i32 %v5_a3ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a3a0, { 1, 0 }
  uselistorder i8 %v5_a390, { 1, 0 }
  uselistorder i32 %v5_a374, { 1, 0 }
  uselistorder i32 %v6_a338, { 1, 0 }
  uselistorder i32 %v4_a320, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a304, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 19, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_aa40, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a93c, { 1, 0 }
  uselistorder label %dec_label_pc_a860, { 1, 0 }
  uselistorder label %dec_label_pc_a7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a76c.preheader, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread22, { 2, 1, 0 }
}

define i32 @function_aa7c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_aa7c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_aa7c = load i32, i32* @r4, align 4
  %v6_aa7c = load i32, i32* @r5, align 4
  %v9_aa7c = load i32, i32* @r6, align 4
  %v12_aa7c = load i32, i32* @r7, align 4
  %v15_aa7c = load i32, i32* @r8, align 4
  %v1_aa80 = urem i32 %arg1, 256
  store i32 %v1_aa80, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_aa80, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_aa98 = urem i32 %arg3, 256
  store i32 %v1_aa98, i32* @r4, align 4
  %v2_aa9c = call i32* @calloc(i32 %v1_aa80, i32 4)
  %v4_aa9c = ptrtoint i32* %v2_aa9c to i32
  %v0_aaa0 = load i32, i32* @r5, align 4
  store i32 %v0_aaa0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aab0 = load i32, i32* @r4, align 4
  store i32 %v0_aab0, i32* %r0.global-to-local, align 4
  %v5_aab4 = inttoptr i32 %v0_aaa0 to i32*
  %v6_aab4 = call i32 @function_92ac(i32 %v0_aab0, i32* %v5_aab4, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aacc = load i32, i32* @r5, align 4
  store i32 %v0_aacc, i32* %r1.global-to-local, align 4
  %v0_aad0 = load i32, i32* @r4, align 4
  store i32 %v0_aad0, i32* %r0.global-to-local, align 4
  %v5_aad4 = trunc i32 %v6_aab4 to i8
  %v6_aad8 = inttoptr i32 %v0_aacc to i32*
  %v7_aad8 = call i32 @function_92ac(i32 %v0_aad0, i32* %v6_aad8, i32 3, i32 65535)
  %v0_aadc = load i32, i32* @r5, align 4
  store i32 %v0_aadc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aad8, i32* @r7, align 4
  %v0_aaec = load i32, i32* @r4, align 4
  store i32 %v0_aaec, i32* %r0.global-to-local, align 4
  %v4_aaf0 = inttoptr i32 %v0_aadc to i32*
  %v5_aaf0 = call i32 @function_92ac(i32 %v0_aaec, i32* %v4_aaf0, i32 4, i32 64)
  %v0_aafc = load i32, i32* @r5, align 4
  store i32 %v0_aafc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ab08 = load i32, i32* @r4, align 4
  store i32 %v0_ab08, i32* %r0.global-to-local, align 4
  %v5_ab0c = trunc i32 %v5_aaf0 to i8
  %v6_ab10 = inttoptr i32 %v0_aafc to i32*
  %v7_ab10 = call i32 @function_92ac(i32 %v0_ab08, i32* %v6_ab10, i32 5, i32 1)
  %v1_ab1c = urem i32 %v7_ab10, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ab28 = load i32, i32* @r5, align 4
  store i32 %v0_ab28, i32* %r1.global-to-local, align 4
  %v0_ab2c = load i32, i32* @r4, align 4
  store i32 %v0_ab2c, i32* %r0.global-to-local, align 4
  %v5_ab34 = inttoptr i32 %v0_ab28 to i32*
  %v6_ab34 = call i32 @function_92ac(i32 %v0_ab2c, i32* %v5_ab34, i32 6, i32 65535)
  %v0_ab3c = load i32, i32* @r5, align 4
  store i32 %v0_ab3c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ab34, i32* @sl, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v4_ab50 = inttoptr i32 %v0_ab3c to i32*
  %v5_ab50 = call i32 @function_92ac(i32 %v0_ab4c, i32* %v4_ab50, i32 7, i32 65535)
  %v0_ab54 = load i32, i32* @r5, align 4
  store i32 %v0_ab54, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_ab50, i32* @r8, align 4
  %v0_ab64 = load i32, i32* @r4, align 4
  store i32 %v0_ab64, i32* %r0.global-to-local, align 4
  %v4_ab68 = inttoptr i32 %v0_ab54 to i32*
  %v5_ab68 = call i32 @function_92ac(i32 %v0_ab64, i32* %v4_ab68, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ab78 = load i32, i32* @r5, align 4
  store i32 %v0_ab78, i32* %r1.global-to-local, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v4_ab80 = inttoptr i32 %v0_ab78 to i32*
  %v5_ab80 = call i32 @function_92ac(i32 %v0_ab7c, i32* %v4_ab80, i32 1, i32 1)
  %v1_ab88 = urem i32 %v5_ab80, 256
  %v0_ab8c = load i32, i32* @r5, align 4
  store i32 %v0_ab8c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ab98 = load i32, i32* @r4, align 4
  store i32 %v0_ab98, i32* %r0.global-to-local, align 4
  %v5_aba0 = inttoptr i32 %v0_ab8c to i32*
  %v6_aba0 = call i32 @function_92ac(i32 %v0_ab98, i32* %v5_aba0, i32 19, i32 0)
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  %v2_abac = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_abac, i32* %r3.global-to-local, align 4
  store i32 %v6_aba0, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_abb8 = load i32, i32* @r4, align 4
  store i32 %v0_abb8, i32* %r0.global-to-local, align 4
  %v4_abbc = inttoptr i32 %v0_aba8 to i32*
  %v5_abbc = call i32 @function_92ac(i32 %v0_abb8, i32* %v4_abbc, i32 25, i32 %v2_abac)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_abd0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_abd0, i32* %r0.global-to-local, align 4
  %v2_abd4 = icmp eq i32 %v3_abd0, -1
  store i1 %v2_abd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abd4, label %dec_label_pc_b054, label %dec_label_pc_abe0

dec_label_pc_abe0:                                ; preds = %dec_label_pc_aa7c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_abe8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_abe8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_abfc = call i32 @setsockopt(i32 %v3_abd0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_abfc, i32* %r0.global-to-local, align 4
  %v2_ac00 = icmp eq i32 %v7_abfc, -1
  store i1 %v2_ac00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac00, label %dec_label_pc_b04c, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_abe0
  %v0_ac08 = load i32, i32* @sl, align 4
  %v0_ac14 = load i32, i32* @r8, align 4
  %v3_ac14 = mul i32 %v0_ac14, 65536
  store i32 %v3_ac14, i32* %r8.global-to-local, align 4
  %v0_ac18 = load i32, i32* @r7, align 4
  %v3_ac18 = mul i32 %v0_ac18, 65536
  store i32 %v3_ac18, i32* %r7.global-to-local, align 4
  %v0_ac1c = load i32, i32* @r6, align 4
  %v1_ac1c = urem i32 %v0_ac1c, 256
  store i32 %v1_ac1c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac24 = urem i32 %v0_ac08, 65536
  store i32 %v3_ac24, i32* %r2.global-to-local, align 4
  %v3_ac28 = urem i32 %v0_ac14, 65536
  store i32 %v3_ac28, i32* %r3.global-to-local, align 4
  %v0_ac2c = load i32, i32* @fp, align 4
  %v2_ac2c = icmp eq i32 %v0_ac2c, 0
  store i1 %v2_ac2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ac3c = urem i32 %v0_ac18, 65536
  store i32 %v3_ac3c, i32* @sl, align 4
  %tmp85 = icmp slt i32 %v0_ac2c, 1
  br i1 %tmp85, label %dec_label_pc_b178, label %dec_label_pc_ac4c

dec_label_pc_ac4c:                                ; preds = %dec_label_pc_ac08
  %v3_ac50 = mul i32 %v5_ab68, 65536
  %v1_ac54 = add i32 %v3_ac50, 3407872
  %v3_ac5c = udiv i32 %v1_ac54, 256
  %v0_ac18.not = or i32 %v0_ac18, -65536
  %v1_ac6c = xor i32 %v0_ac18.not, 65535
  %v1_ac70 = urem i32 %v0_ac14, 256
  %tmp86 = mul nsw i32 %v1_ac6c, 256
  %v1_ac88 = and i32 %v3_ac5c, 65280
  %v1_ac8c = add i32 %v3_ac50, 524288
  %v4_ac90 = udiv i32 %v1_ac54, 16777216
  %v5_ac90 = or i32 %v1_ac88, %v4_ac90
  store i32 %v5_ac90, i32* %r0.global-to-local, align 4
  %v1_ac94 = add i32 %v3_ac50, 1835008
  %v1_ac9c = and i32 %tmp86, 65280
  store i32 %v1_ac9c, i32* %lr.global-to-local, align 4
  %tmp87 = udiv i32 %v1_ac6c, 256
  %tmp88 = udiv i32 %v0_ac18, 256
  %v5_acb0 = trunc i32 %tmp87 to i8
  %tmp89 = udiv i32 %v0_ac08, 256
  %sext30 = mul i32 %tmp88, 16777216
  %v4_acd0 = sdiv i32 %sext30, 16777216
  %v3_acdc = mul nuw nsw i32 %v1_ac70, 256
  store i32 %v3_acdc, i32* %r5.global-to-local, align 4
  %v3_ace0 = udiv i32 %v1_ac8c, 256
  %tmp90 = udiv i32 %v0_ac14, 256
  %v4_ace8 = urem i32 %tmp90, 256
  %v5_ace8 = or i32 %v4_ace8, %v3_acdc
  store i32 %v5_ace8, i32* %r7.global-to-local, align 4
  %v3_acec = ashr i32 %sext30, 31
  %v3_acf8 = sdiv i32 %v1_ac94, 16777216
  %v1_acfc = and i32 %v3_ace0, 65280
  store i32 %v1_acfc, i32* %r6.global-to-local, align 4
  %sext31 = mul i32 %tmp89, 16777216
  %v4_ad04 = sdiv i32 %sext31, 16777216
  %v3_ad08 = ashr i32 %v1_ac94, 31
  %v3_ad0c = udiv i32 %v1_ac6c, 65536
  %v4_ad10 = udiv i32 %v1_ac8c, 16777216
  %v5_ad10 = or i32 %v1_acfc, %v4_ad10
  store i32 %v5_ad10, i32* %r8.global-to-local, align 4
  %v3_ad1c = ashr i32 %sext31, 31
  store i32 %v3_ad1c, i32* %r1.global-to-local, align 4
  store i32 %v1_ac70, i32* %r2.global-to-local, align 4
  %v3_ad2442 = udiv i32 %v1_acfc, 256
  store i32 %v3_ad2442, i32* %r3.global-to-local, align 4
  %v5_ad2c = trunc i32 %v3_ad1c to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_ad88 = sext i8 %v5_ab0c to i32
  %sext = mul i32 %v1_ac54, 256
  %v4_ad90 = sdiv i32 %sext, 16777216
  %sext17 = mul nuw i32 %v4_ac90, 16777216
  %v4_ada0 = sdiv i32 %sext17, 16777216
  %v2_ae74 = icmp eq i32 %v1_ac1c, 0
  %sext21 = mul i32 %v1_ac8c, 256
  %v4_ae94 = sdiv i32 %sext21, 16777216
  %sext22 = mul i32 %v0_ac14, 16777216
  %v7_aeac = sdiv i32 %sext22, 16777216
  %v1_ad9c = trunc i32 %v4_ad90 to i8
  br label %dec_label_pc_ad3c

dec_label_pc_ad3c:                                ; preds = %bb97, %dec_label_pc_ac4c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ad48 = call i32* @calloc(i32 1510, i32 4)
  %v4_ad48 = ptrtoint i32* %v2_ad48 to i32
  store i32 %v4_ad48, i32* %r0.global-to-local, align 4
  store i32 %v4_aa9c, i32* %r1.global-to-local, align 4
  %v3_ad50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad50, i32* %r3.global-to-local, align 4
  %v2_ad54 = load i32, i32* %r4.global-to-local, align 4
  %v5_ad54 = mul i32 %v2_ad54, 4
  %v6_ad54 = add i32 %v5_ad54, %v4_aa9c
  %v7_ad54 = inttoptr i32 %v6_ad54 to i32*
  store i32 %v4_ad48, i32* %v7_ad54, align 4
  %v0_ad58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad58 = load i32, i32* %r3.global-to-local, align 4
  %v4_ad58 = mul i32 %v1_ad58, 4
  %v5_ad58 = add i32 %v4_ad58, %v0_ad58
  %v6_ad58 = inttoptr i32 %v5_ad58 to i32*
  %v7_ad58 = load i32, i32* %v6_ad58, align 4
  store i32 %v7_ad58, i32* %r4.global-to-local, align 4
  %v1_ad5c = inttoptr i32 %v7_ad58 to i8*
  %v2_ad5c = load i8, i8* %v1_ad5c, align 1
  %tmp = urem i8 %v2_ad5c, 16
  %v1_ad60 = zext i8 %tmp to i32
  %v1_ad64 = or i32 %v1_ad60, 64
  store i32 %v1_ad64, i32* %r2.global-to-local, align 4
  %v1_ad68 = trunc i32 %v1_ad64 to i8
  store i8 %v1_ad68, i8* %v1_ad5c, align 1
  %v0_ad6c = load i32, i32* %r4.global-to-local, align 4
  %v1_ad6c = inttoptr i32 %v0_ad6c to i8*
  %v2_ad6c = load i8, i8* %v1_ad6c, align 1
  %v1_ad70 = and i8 %v2_ad6c, -16
  %v1_ad74 = or i8 %v1_ad70, 5
  store i32 %v1_ab1c, i32* %r2.global-to-local, align 4
  store i8 %v1_ad74, i8* %v1_ad6c, align 1
  %v2_ad84 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad84 = add i32 %v2_ad84, 1
  %v4_ad84 = inttoptr i32 %v3_ad84 to i8*
  store i8 %v5_aad4, i8* %v4_ad84, align 1
  store i32 %v4_ad88, i32* %r1.global-to-local, align 4
  %v2_ad8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad8c = add i32 %v2_ad8c, 8
  %v4_ad8c = inttoptr i32 %v3_ad8c to i8*
  store i8 %v5_ab0c, i8* %v4_ad8c, align 1
  store i32 %v4_ad90, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_ad98 = load i32, i32* %r2.global-to-local, align 4
  %v9_ad98 = icmp eq i32 %v0_ad98, 0
  store i1 %v9_ad98, i1* %cpsr_z.global-to-local, align 1
  %v2_ad9c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad9c = add i32 %v2_ad9c, 3
  %v4_ad9c = inttoptr i32 %v3_ad9c to i8*
  store i8 %v1_ad9c, i8* %v4_ad9c, align 1
  store i32 %v4_ada0, i32* %r2.global-to-local, align 4
  %v0_ada4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ada4, label %.thread24, label %.thread

.thread:                                          ; preds = %dec_label_pc_ad3c
  %v1_ada4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_ada4, i32* %r3.global-to-local, align 4
  %v2_ada8 = trunc i32 %v1_ada4 to i8
  %v3_ada8 = load i32, i32* %r4.global-to-local, align 4
  %v4_ada8 = add i32 %v3_ada8, 7
  %v5_ada8 = inttoptr i32 %v4_ada8 to i8*
  store i8 %v2_ada8, i8* %v5_ada8, align 1
  %v0_adac.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adac.pr.pr, label %.thread24, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_adb0 = load i32, i32* %r4.global-to-local, align 4
  %v4_adb0 = add i32 %v3_adb0, 6
  %v5_adb0 = inttoptr i32 %v4_adb0 to i8*
  store i8 64, i8* %v5_adb0, align 1
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ad3c, %.thread, %bb
  %v0_adb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_adb4 = trunc i32 %v0_adb4 to i8
  %v2_adb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adb4 = add i32 %v2_adb4, 2
  %v4_adb4 = inttoptr i32 %v3_adb4 to i8*
  store i8 %v1_adb4, i8* %v4_adb4, align 1
  store i32 %v3_acec, i32* %r2.global-to-local, align 4
  store i32 %v4_acd0, i32* %r1.global-to-local, align 4
  %v2_adc4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adc4 = add i32 %v2_adc4, 9
  %v4_adc4 = inttoptr i32 %v3_adc4 to i8*
  store i8 47, i8* %v4_adc4, align 1
  %v0_adc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_adc8 = trunc i32 %v0_adc8 to i8
  %v2_adc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_adc8 = add i32 %v2_adc8, 5
  %v4_adc8 = inttoptr i32 %v3_adc8 to i8*
  store i8 %v1_adc8, i8* %v4_adc8, align 1
  %v3_adcc = load i32, i32* %stack_var_-40, align 4
  %v5_add4 = mul i32 %v3_adcc, 24
  store i32 %v5_add4, i32* %r3.global-to-local, align 4
  store i32 %v5_abbc, i32* %r2.global-to-local, align 4
  %v1_addc = load i32, i32* %r4.global-to-local, align 4
  %v2_addc = add i32 %v1_addc, 12
  %v3_addc = inttoptr i32 %v2_addc to i32*
  store i32 %v5_abbc, i32* %v3_addc, align 4
  %v0_ade0 = load i32, i32* %r3.global-to-local, align 4
  %v1_ade0 = load i32, i32* @sb, align 4
  %v2_ade0 = add i32 %v1_ade0, %v0_ade0
  store i32 %v2_ade0, i32* %r3.global-to-local, align 4
  %v0_ade4 = load i32, i32* %r1.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* %r4.global-to-local, align 4
  %v3_ade4 = add i32 %v2_ade4, 4
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  %v0_ade8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ade8 = add i32 %v0_ade8, 16
  %v2_ade8 = inttoptr i32 %v1_ade8 to i32*
  %v3_ade8 = load i32, i32* %v2_ade8, align 4
  store i32 %v3_ade8, i32* %r2.global-to-local, align 4
  %v0_adec = load i32, i32* %r4.global-to-local, align 4
  %v1_adec = add i32 %v0_adec, 20
  store i32 %v1_adec, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_adf4 = load i32, i32* %r0.global-to-local, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v3_adf4 = add i32 %v0_adec, 23
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* %r1.global-to-local, align 4
  %v3_adf8 = add i32 %v2_adf8, 2
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* %r4.global-to-local, align 4
  %v1_adfc = add i32 %v0_adfc, 24
  %v2_adfc = inttoptr i32 %v1_adfc to i8*
  %v3_adfc = load i8, i8* %v2_adfc, align 1
  %tmp105 = urem i8 %v3_adfc, 16
  %v1_ae00 = zext i8 %tmp105 to i32
  %v1_ae04 = or i32 %v1_ae00, 64
  store i32 %v1_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v1_ae04 to i8
  store i8 %v1_ae08, i8* %v2_adfc, align 1
  %v0_ae0c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae0c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae0c = add i32 %v1_ae0c, 16
  %v3_ae0c = inttoptr i32 %v2_ae0c to i32*
  store i32 %v0_ae0c, i32* %v3_ae0c, align 4
  %v0_ae10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae10 = add i32 %v0_ae10, 24
  %v2_ae10 = inttoptr i32 %v1_ae10 to i8*
  %v3_ae10 = load i8, i8* %v2_ae10, align 1
  %v1_ae14 = and i8 %v3_ae10, -16
  %v1_ae18 = or i8 %v1_ae14, 5
  store i8 %v1_ae18, i8* %v2_ae10, align 1
  %v0_ae24 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae24 = add i32 %v0_ae24, 24
  store i32 %v1_ae24, i32* %r5.global-to-local, align 4
  %v3_ae28 = add i32 %v0_ae24, 25
  %v4_ae28 = inttoptr i32 %v3_ae28 to i8*
  store i8 %v5_aad4, i8* %v4_ae28, align 1
  store i32 %v3_acf8, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_ad08, i32* %r2.global-to-local, align 4
  %v2_ae38 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae38 = add i32 %v2_ae38, 4
  %v4_ae38 = inttoptr i32 %v3_ae38 to i8*
  store i8 %v5_acb0, i8* %v4_ae38, align 1
  %v0_ae3c = load i32, i32* %r1.global-to-local, align 4
  %v1_ae3c = trunc i32 %v0_ae3c to i8
  %v2_ae3c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae3c = add i32 %v2_ae3c, 2
  %v4_ae3c = inttoptr i32 %v3_ae3c to i8*
  store i8 %v1_ae3c, i8* %v4_ae3c, align 1
  %v0_ae40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae40, label %bb92, label %bb91

bb91:                                             ; preds = %.thread24
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread24, %bb91
  store i32 %v3_ad0c, i32* %r1.global-to-local, align 4
  %v0_ae48 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae48 = add i32 %v2_ae48, 3
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  store i32 %v4_ad88, i32* %r2.global-to-local, align 4
  %v0_ae50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae50, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_ae50 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae50 = trunc i32 %v1_ae50 to i8
  %v3_ae50 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae50 = add i32 %v3_ae50, 6
  %v5_ae50 = inttoptr i32 %v4_ae50 to i8*
  store i8 %v2_ae50, i8* %v5_ae50, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ae58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae58 = trunc i32 %v0_ae58 to i8
  %v2_ae58 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae58 = add i32 %v2_ae58, 5
  %v4_ae58 = inttoptr i32 %v3_ae58 to i8*
  store i8 %v1_ae58, i8* %v4_ae58, align 1
  %v0_ae5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae5c = trunc i32 %v0_ae5c to i8
  %v2_ae5c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae5c = add i32 %v2_ae5c, 8
  %v4_ae5c = inttoptr i32 %v3_ae5c to i8*
  store i8 %v1_ae5c, i8* %v4_ae5c, align 1
  %v0_ae60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae60, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ae60 = load i32, i32* %r0.global-to-local, align 4
  %v2_ae60 = trunc i32 %v1_ae60 to i8
  %v3_ae60 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae60 = add i32 %v3_ae60, 7
  %v5_ae60 = inttoptr i32 %v4_ae60 to i8*
  store i8 %v2_ae60, i8* %v5_ae60, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ae64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae64 = trunc i32 %v0_ae64 to i8
  %v2_ae64 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae64 = add i32 %v2_ae64, 9
  %v4_ae64 = inttoptr i32 %v3_ae64 to i8*
  store i8 %v1_ae64, i8* %v4_ae64, align 1
  %v0_ae68 = call i32 @function_f28c()
  store i32 %v0_ae68, i32* %r0.global-to-local, align 4
  store i32 %v1_ac1c, i32* %r1.global-to-local, align 4
  store i1 %v2_ae74, i1* %cpsr_z.global-to-local, align 1
  %v1_ae78 = sub i32 1023, %v0_ae68
  store i32 %v1_ae78, i32* %r3.global-to-local, align 4
  br i1 %v2_ae74, label %.thread25, label %.thread26

.thread25:                                        ; preds = %bb96
  %v2_ae80 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 16
  %v4_ae80 = inttoptr i32 %v3_ae80 to i32*
  store i32 %v1_ae78, i32* %v4_ae80, align 4
  br label %bb97

.thread26:                                        ; preds = %bb96
  %v1_ae7c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae7c = add i32 %v1_ae7c, 16
  %v3_ae7c = inttoptr i32 %v2_ae7c to i32*
  %v4_ae7c = load i32, i32* %v3_ae7c, align 4
  store i32 %v4_ae7c, i32* %r3.global-to-local, align 4
  %v2_ae84 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 16
  %v4_ae84 = inttoptr i32 %v3_ae84 to i32*
  store i32 %v4_ae7c, i32* %v4_ae84, align 4
  br label %bb97

bb97:                                             ; preds = %.thread25, %.thread26
  store i32 %v4_ad04, i32* %r3.global-to-local, align 4
  %v0_ae8c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae8c = add i32 %v0_ae8c, 44
  store i32 %v1_ae8c, i32* %r6.global-to-local, align 4
  %v1_ae90 = load i32, i32* %r5.global-to-local, align 4
  %v2_ae90 = add i32 %v1_ae90, 12
  %v3_ae90 = inttoptr i32 %v2_ae90 to i32*
  store i32 %v0_ae68, i32* %v3_ae90, align 4
  store i32 %v4_ae94, i32* %r2.global-to-local, align 4
  %v0_ae98 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae98 = trunc i32 %v0_ae98 to i8
  %v2_ae98 = load i32, i32* %r6.global-to-local, align 4
  %v3_ae98 = inttoptr i32 %v2_ae98 to i8*
  store i8 %v1_ae98, i8* %v3_ae98, align 1
  %v3_ae9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae9c, i32* %r3.global-to-local, align 4
  %v0_aea0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aea0 = trunc i32 %v0_aea0 to i8
  %v2_aea0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aea0 = add i32 %v2_aea0, 5
  %v4_aea0 = inttoptr i32 %v3_aea0 to i8*
  store i8 %v1_aea0, i8* %v4_aea0, align 1
  %v0_aea4 = load i32, i32* %r3.global-to-local, align 4
  %v1_aea4 = add i32 %v0_aea4, 1
  store i32 %v1_aea4, i32* %r4.global-to-local, align 4
  store i32 %v3_ad1c, i32* %r1.global-to-local, align 4
  store i32 %v7_aeac, i32* %r2.global-to-local, align 4
  %v1_aeb0 = load i32, i32* @fp, align 4
  %v9_aeb0 = icmp eq i32 %v1_aea4, %v1_aeb0
  store i1 %v9_aeb0, i1* %cpsr_z.global-to-local, align 1
  %v2_aeb4 = load i32, i32* %r6.global-to-local, align 4
  %v3_aeb4 = add i32 %v2_aeb4, 1
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i8*
  store i8 %v5_ad2c, i8* %v4_aeb4, align 1
  %v0_aeb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_aeb8 = trunc i32 %v0_aeb8 to i8
  %v2_aeb8 = load i32, i32* %r6.global-to-local, align 4
  %v3_aeb8 = add i32 %v2_aeb8, 2
  %v4_aeb8 = inttoptr i32 %v3_aeb8 to i8*
  store i8 %v1_aeb8, i8* %v4_aeb8, align 1
  %v0_aebc = load i32, i32* %r2.global-to-local, align 4
  %v1_aebc = trunc i32 %v0_aebc to i8
  %v2_aebc = load i32, i32* %r6.global-to-local, align 4
  %v3_aebc = add i32 %v2_aebc, 3
  %v4_aebc = inttoptr i32 %v3_aebc to i8*
  store i8 %v1_aebc, i8* %v4_aebc, align 1
  %v0_aec0 = load i32, i32* %r8.global-to-local, align 4
  %v1_aec0 = trunc i32 %v0_aec0 to i8
  %v2_aec0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aec0 = add i32 %v2_aec0, 4
  %v4_aec0 = inttoptr i32 %v3_aec0 to i8*
  store i8 %v1_aec0, i8* %v4_aec0, align 1
  %v0_aec4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_aec4, i32* %stack_var_-40, align 4
  %v5_aec8 = icmp slt i32 %v1_aea4, %v1_aeb0
  br i1 %v5_aec8, label %dec_label_pc_ad3c, label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %bb97
  %v1_aed4 = add i32 %v5_ab68, 8
  store i32 %v1_aed4, i32* %r3.global-to-local, align 4
  %v1_aed8 = add i32 %v5_ab68, 52
  store i32 %v1_aed8, i32* %r1.global-to-local, align 4
  %v0_aee4.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_aee4.preheader

dec_label_pc_aee4.preheader:                      ; preds = %dec_label_pc_aecc, %dec_label_pc_b178
  %v0_aee4.pre = phi i32 [ %v0_aee4.pre.pre, %dec_label_pc_aecc ], [ %v0_ac2c, %dec_label_pc_b178 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_aed8, %dec_label_pc_aecc ], [ %v1_b184, %dec_label_pc_b178 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_aed4, %dec_label_pc_aecc ], [ %v1_b180, %dec_label_pc_b178 ]
  %v2_b15c = icmp eq i32 %v1_ab88, 0
  %v2_af5c = icmp eq i32 %v1_ac1c, 0
  %v2_af28 = icmp eq i32 %v5_abbc, -1
  br label %dec_label_pc_aee4

dec_label_pc_aee4:                                ; preds = %dec_label_pc_af78, %dec_label_pc_aee4.preheader
  %v0_aee4 = phi i32 [ %v0_aee4.pre, %dec_label_pc_aee4.preheader ], [ %v1_b03c, %dec_label_pc_af78 ]
  %v2_aee4 = icmp eq i32 %v0_aee4, 0
  store i1 %v2_aee4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_aee4, 1
  br label %dec_label_pc_aeec

dec_label_pc_aeec:                                ; preds = %dec_label_pc_aeec, %dec_label_pc_aee4
  br i1 %tmp98, label %dec_label_pc_aeec, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aeec
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %dec_label_pc_af78, %dec_label_pc_aef0
  %v1_af10 = phi i32 [ %v1_b038, %dec_label_pc_af78 ], [ 0, %dec_label_pc_aef0 ]
  %v5_af00 = mul i32 %v1_af10, 24
  %v1_af04 = load i32, i32* @sb, align 4
  %v2_af04 = add i32 %v1_af04, %v5_af00
  store i32 %v2_af04, i32* %r3.global-to-local, align 4
  store i32 %v4_aa9c, i32* %r1.global-to-local, align 4
  %v1_af0c = add i32 %v2_af04, 20
  %v2_af0c = inttoptr i32 %v1_af0c to i8*
  %v3_af0c = load i8, i8* %v2_af0c, align 1
  %v4_af0c = zext i8 %v3_af0c to i32
  store i32 %v4_af0c, i32* %r2.global-to-local, align 4
  %v4_af10 = mul i32 %v1_af10, 4
  %v5_af10 = add i32 %v4_af10, %v4_aa9c
  %v6_af10 = inttoptr i32 %v5_af10 to i32*
  %v7_af10 = load i32, i32* %v6_af10, align 4
  store i32 %v7_af10, i32* @r5, align 4
  %v7_af14 = icmp eq i8 %v3_af0c, 31
  store i1 %v7_af14, i1* %cpsr_z.global-to-local, align 1
  %v1_af18 = add i32 %v7_af10, 24
  store i32 %v1_af18, i32* @r6, align 4
  %v1_af1c = add i32 %v7_af10, 44
  store i32 %v1_af1c, i32* @r7, align 4
  %tmp106 = icmp ult i8 %v3_af0c, 32
  br i1 %tmp106, label %dec_label_pc_b05c, label %dec_label_pc_af24

dec_label_pc_af24:                                ; preds = %dec_label_pc_aefc
  store i32 %v5_abbc, i32* %r2.global-to-local, align 4
  store i1 %v2_af28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af28, label %dec_label_pc_b0c4, label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %dec_label_pc_b05c, %dec_label_pc_af24
  store i32 65535, i32* @r4, align 4
  %v0_af38 = load i32, i32* @sl, align 4
  %v9_af38 = icmp eq i32 %v0_af38, 65535
  store i1 %v9_af38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af38, label %dec_label_pc_b0dc, label %dec_label_pc_af40

dec_label_pc_af40:                                ; preds = %dec_label_pc_b0c4.dec_label_pc_af40_crit_edge, %dec_label_pc_af30
  %v1_af44 = phi i32 [ %v1_af44.pre, %dec_label_pc_b0c4.dec_label_pc_af40_crit_edge ], [ 65535, %dec_label_pc_af30 ]
  store i32 %v3_ac24, i32* %r3.global-to-local, align 4
  %v9_af44 = icmp eq i32 %v3_ac24, %v1_af44
  store i1 %v9_af44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af44, label %dec_label_pc_b114, label %dec_label_pc_af4c

dec_label_pc_af4c:                                ; preds = %dec_label_pc_b0dc.dec_label_pc_af4c_crit_edge, %dec_label_pc_af40
  %v1_af50 = phi i32 [ %v1_af50.pre, %dec_label_pc_b0dc.dec_label_pc_af4c_crit_edge ], [ %v1_af44, %dec_label_pc_af40 ]
  store i32 %v3_ac28, i32* %r1.global-to-local, align 4
  %v9_af50 = icmp eq i32 %v3_ac28, %v1_af50
  store i1 %v9_af50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af50, label %dec_label_pc_b130, label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %dec_label_pc_b114, %dec_label_pc_af4c
  store i32 %v1_ac1c, i32* %r2.global-to-local, align 4
  store i1 %v2_af5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af5c, label %dec_label_pc_b154, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_af58
  %v1_af60 = load i32, i32* @r5, align 4
  %v2_af60 = add i32 %v1_af60, 16
  %v3_af60 = inttoptr i32 %v2_af60 to i32*
  %v4_af60 = load i32, i32* %v3_af60, align 4
  store i32 %v4_af60, i32* %r3.global-to-local, align 4
  %v2_af64 = load i32, i32* @r6, align 4
  %v3_af64 = add i32 %v2_af64, 16
  %v4_af64 = inttoptr i32 %v3_af64 to i32*
  store i32 %v4_af60, i32* %v4_af64, align 4
  br label %dec_label_pc_af6c

dec_label_pc_af6c:                                ; preds = %bb103, %.thread27
  store i32 %v1_ab88, i32* %r3.global-to-local, align 4
  store i1 %v2_b15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b15c, label %dec_label_pc_af78, label %dec_label_pc_b168

dec_label_pc_af78:                                ; preds = %dec_label_pc_af6c, %dec_label_pc_b154, %dec_label_pc_b168
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_af7c = load i32, i32* @r8, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r5, align 4
  %v3_af7c = add i32 %v2_af7c, 10
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  %v0_af80 = load i32, i32* @r8, align 4
  %v1_af80 = trunc i32 %v0_af80 to i8
  %v2_af80 = load i32, i32* @r5, align 4
  %v3_af80 = add i32 %v2_af80, 11
  %v4_af80 = inttoptr i32 %v3_af80 to i8*
  store i8 %v1_af80, i8* %v4_af80, align 1
  %v0_af84 = load i32, i32* @r5, align 4
  store i32 %v0_af84, i32* @r0, align 4
  %v2_af88 = call i32 @function_ddc4(i32 %v0_af84, i32 20)
  %v3_af88 = trunc i32 %v2_af88 to i8
  %v4_af8c = sdiv i32 %v2_af88, 256
  store i32 %v4_af8c, i32* %r3.global-to-local, align 4
  %v1_af90 = trunc i32 %v4_af8c to i8
  %v2_af90 = load i32, i32* @r5, align 4
  %v3_af90 = add i32 %v2_af90, 11
  %v4_af90 = inttoptr i32 %v3_af90 to i8*
  store i8 %v1_af90, i8* %v4_af90, align 1
  %v3_af94 = load i32, i32* @r5, align 4
  %v4_af94 = add i32 %v3_af94, 10
  %v5_af94 = inttoptr i32 %v4_af94 to i8*
  store i8 %v3_af88, i8* %v5_af94, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_af9c = load i32, i32* @r8, align 4
  %v1_af9c = trunc i32 %v0_af9c to i8
  %v2_af9c = load i32, i32* @r6, align 4
  %v3_af9c = add i32 %v2_af9c, 10
  %v4_af9c = inttoptr i32 %v3_af9c to i8*
  store i8 %v1_af9c, i8* %v4_af9c, align 1
  %v0_afa0 = load i32, i32* @r8, align 4
  %v1_afa0 = trunc i32 %v0_afa0 to i8
  %v2_afa0 = load i32, i32* @r6, align 4
  %v3_afa0 = add i32 %v2_afa0, 11
  %v4_afa0 = inttoptr i32 %v3_afa0 to i8*
  store i8 %v1_afa0, i8* %v4_afa0, align 1
  %v0_afa4 = load i32, i32* @r6, align 4
  store i32 %v0_afa4, i32* @r0, align 4
  %v2_afa8 = call i32 @function_ddc4(i32 %v0_afa4, i32 20)
  %v3_afa8 = trunc i32 %v2_afa8 to i8
  store i32 %v2_afa8, i32* %r0.global-to-local, align 4
  %v4_afac = sdiv i32 %v2_afa8, 256
  store i32 %v4_afac, i32* %r3.global-to-local, align 4
  %v3_afb0 = load i32, i32* @r6, align 4
  %v4_afb0 = add i32 %v3_afb0, 10
  %v5_afb0 = inttoptr i32 %v4_afb0 to i8*
  store i8 %v3_afa8, i8* %v5_afb0, align 1
  %v0_afb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afb4 = trunc i32 %v0_afb4 to i8
  %v2_afb4 = load i32, i32* @r6, align 4
  %v3_afb4 = add i32 %v2_afb4, 11
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  %v0_afb8 = load i32, i32* @r7, align 4
  %v1_afb8 = add i32 %v0_afb8, 4
  %v2_afb8 = inttoptr i32 %v1_afb8 to i8*
  %v3_afb8 = load i8, i8* %v2_afb8, align 1
  %v4_afb8 = zext i8 %v3_afb8 to i32
  store i32 %v4_afb8, i32* %r3.global-to-local, align 4
  %v1_afbc = add i32 %v0_afb8, 5
  %v2_afbc = inttoptr i32 %v1_afbc to i8*
  %v3_afbc = load i8, i8* %v2_afbc, align 1
  %v4_afbc = zext i8 %v3_afbc to i32
  store i32 %v0_afb8, i32* @r1, align 4
  %v4_afc4 = mul nuw nsw i32 %v4_afbc, 256
  %v5_afc4 = or i32 %v4_afc4, %v4_afb8
  store i32 %v5_afc4, i32* %r2.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r8, align 4
  %v1_afc8 = trunc i32 %v0_afc8 to i8
  %v3_afc8 = add i32 %v0_afb8, 6
  %v4_afc8 = inttoptr i32 %v3_afc8 to i8*
  store i8 %v1_afc8, i8* %v4_afc8, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_afd0 = load i32, i32* @r8, align 4
  %v1_afd0 = trunc i32 %v0_afd0 to i8
  %v2_afd0 = load i32, i32* @r7, align 4
  %v3_afd0 = add i32 %v2_afd0, 7
  %v4_afd0 = inttoptr i32 %v3_afd0 to i8*
  store i8 %v1_afd0, i8* %v4_afd0, align 1
  %v0_afd4 = load i32, i32* @r6, align 4
  store i32 %v0_afd4, i32* %r0.global-to-local, align 4
  %v4_afd8 = call i32 @function_de20(i32 %v0_afd4, i32 %v0_afb8, i32 %v5_afc4, i32 %stack_var_-152.0.ph)
  %v5_afd8 = trunc i32 %v4_afd8 to i8
  store i32 %v4_afd8, i32* %r0.global-to-local, align 4
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r3.global-to-local, align 4
  %v3_afe0 = mul i32 %v3_afdc, 32
  store i32 %v3_afe0, i32* %r2.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r5, align 4
  %v1_afe4 = add i32 %v0_afe4, 16
  %v2_afe4 = inttoptr i32 %v1_afe4 to i32*
  %v3_afe4 = load i32, i32* %v2_afe4, align 4
  store i32 %v3_afe4, i32* %r1.global-to-local, align 4
  %v5_afe8 = mul i32 %v3_afdc, 24
  store i32 %v5_afe8, i32* %r2.global-to-local, align 4
  %v4_afec43 = udiv i32 %v4_afd8, 256
  %v1_aff0 = trunc i32 %v4_afec43 to i8
  %v2_aff0 = load i32, i32* @r7, align 4
  %v3_aff0 = add i32 %v2_aff0, 7
  %v4_aff0 = inttoptr i32 %v3_aff0 to i8*
  store i8 %v1_aff0, i8* %v4_aff0, align 1
  %v0_aff4 = load i32, i32* %r2.global-to-local, align 4
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v0_aff4
  store i32 %v2_aff4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_affc = load i32, i32* @r7, align 4
  %v4_affc = add i32 %v3_affc, 6
  %v5_affc = inttoptr i32 %v4_affc to i8*
  store i8 %v5_afd8, i8* %v5_affc, align 1
  %v0_b000 = load i32, i32* %r1.global-to-local, align 4
  %v1_b000 = load i32, i32* %lr.global-to-local, align 4
  %v2_b000 = add i32 %v1_b000, 4
  %v3_b000 = inttoptr i32 %v2_b000 to i32*
  store i32 %v0_b000, i32* %v3_b000, align 4
  %v0_b004 = load i32, i32* %r3.global-to-local, align 4
  %v1_b004 = trunc i32 %v0_b004 to i8
  %v2_b004 = load i32, i32* %r2.global-to-local, align 4
  %v3_b004 = load i32, i32* @sb, align 4
  %v4_b004 = add i32 %v3_b004, %v2_b004
  %v5_b004 = inttoptr i32 %v4_b004 to i8*
  store i8 %v1_b004, i8* %v5_b004, align 1
  %v0_b008 = load i32, i32* @r8, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* %lr.global-to-local, align 4
  %v3_b008 = add i32 %v2_b008, 2
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r8, align 4
  %v1_b00c = trunc i32 %v0_b00c to i8
  %v2_b00c = load i32, i32* %lr.global-to-local, align 4
  %v3_b00c = add i32 %v2_b00c, 1
  %v4_b00c = inttoptr i32 %v3_b00c to i8*
  store i8 %v1_b00c, i8* %v4_b00c, align 1
  %v0_b010 = load i32, i32* @r8, align 4
  %v1_b010 = trunc i32 %v0_b010 to i8
  %v2_b010 = load i32, i32* %lr.global-to-local, align 4
  %v3_b010 = add i32 %v2_b010, 3
  %v4_b010 = inttoptr i32 %v3_b010 to i8*
  store i8 %v1_b010, i8* %v4_b010, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b01c = load i32, i32* @r5, align 4
  store i32 %v0_b01c, i32* %r1.global-to-local, align 4
  store i32 %v3_abd0, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b028 = load i32, i32* %lr.global-to-local, align 4
  %v4_b028 = inttoptr i32 %v0_b028 to %sockaddr*
  %v7_b030 = inttoptr i32 %v0_b01c to i32*
  %v9_b030 = call i32 @sendto(i32 %v3_abd0, i32* %v7_b030, i32 %stack_var_-120.0.ph, i32 16384, %sockaddr* %v4_b028, i32 16)
  %v3_b034 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b034, i32* %r3.global-to-local, align 4
  %v1_b038 = add i32 %v3_b034, 1
  store i32 %v1_b038, i32* %r0.global-to-local, align 4
  %v1_b03c = load i32, i32* @fp, align 4
  %v9_b03c = icmp eq i32 %v1_b038, %v1_b03c
  store i1 %v9_b03c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b038, i32* %stack_var_-40, align 4
  %v6_b044 = icmp slt i32 %v1_b038, %v1_b03c
  br i1 %v6_b044, label %dec_label_pc_aefc, label %dec_label_pc_aee4

dec_label_pc_b04c:                                ; preds = %dec_label_pc_abe0
  store i32 %v3_abd0, i32* %r0.global-to-local, align 4
  %v1_b050 = call i32 @close(i32 %v3_abd0)
  store i32 %v1_b050, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b054

dec_label_pc_b054:                                ; preds = %dec_label_pc_aa7c, %dec_label_pc_b04c
  %v29_b058 = phi i32 [ -1, %dec_label_pc_aa7c ], [ %v1_b050, %dec_label_pc_b04c ]
  store i32 %v3_aa7c, i32* %r4.global-to-local, align 4
  store i32 %v6_aa7c, i32* %r5.global-to-local, align 4
  store i32 %v9_aa7c, i32* %r6.global-to-local, align 4
  store i32 %v12_aa7c, i32* %r7.global-to-local, align 4
  store i32 %v15_aa7c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b058

dec_label_pc_b05c:                                ; preds = %dec_label_pc_aefc
  %v1_b05c = add i32 %v2_af04, 16
  %v2_b05c = inttoptr i32 %v1_b05c to i32*
  %v3_b05c = load i32, i32* %v2_b05c, align 4
  store i32 %v3_b05c, i32* %r4.global-to-local, align 4
  %v0_b060 = call i32 @function_f28c()
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v3_b064 = load i32, i32* %stack_var_-40, align 4
  %v5_b06c = mul i32 %v3_b064, 24
  %v0_b070 = load i32, i32* %r4.global-to-local, align 4
  %v1_b074 = load i32, i32* @sb, align 4
  %v2_b074 = add i32 %v1_b074, %v5_b06c
  store i32 %v2_b074, i32* %r1.global-to-local, align 4
  %v1_b078 = and i32 %v0_b070, 65280
  store i32 %v1_b078, i32* %r3.global-to-local, align 4
  %v1_b070 = udiv i32 %v0_b070, 256
  %v3_b07c = and i32 %v1_b070, 65280
  store i32 %v3_b07c, i32* %r2.global-to-local, align 4
  %v1_b084 = add i32 %v2_b074, 20
  %v2_b084 = inttoptr i32 %v1_b084 to i8*
  %v3_b084 = load i8, i8* %v2_b084, align 1
  %v4_b084 = zext i8 %v3_b084 to i32
  store i32 %v4_b084, i32* %lr.global-to-local, align 4
  %v2_b090 = call i32 @llvm.bswap.i32(i32 %v0_b070)
  %v7_b094 = lshr i32 %v0_b060, %v4_b084
  %v8_b094 = add i32 %v7_b094, %v2_b090
  %v3_b0a0 = mul i32 %v8_b094, 16777216
  %v1_b0a4 = and i32 %v8_b094, 65280
  store i32 %v1_b0a4, i32* %r0.global-to-local, align 4
  store i32 %v5_abbc, i32* %r2.global-to-local, align 4
  %v4_b0b0 = mul nuw nsw i32 %v1_b0a4, 256
  %v5_b0b0 = or i32 %v4_b0b0, %v3_b0a0
  store i32 %v5_b0b0, i32* %r1.global-to-local, align 4
  %v2_b0b4 = call i32 @llvm.bswap.i32(i32 %v8_b094)
  store i32 %v2_b0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_af28, i1* %cpsr_z.global-to-local, align 1
  %v1_b0bc = load i32, i32* @r5, align 4
  %v2_b0bc = add i32 %v1_b0bc, 16
  %v3_b0bc = inttoptr i32 %v2_b0bc to i32*
  store i32 %v2_b0b4, i32* %v3_b0bc, align 4
  br i1 %v2_af28, label %dec_label_pc_b0c4, label %dec_label_pc_af30

dec_label_pc_b0c4:                                ; preds = %dec_label_pc_b05c, %dec_label_pc_af24
  %v0_b0c4 = call i32 @function_f28c()
  store i32 %v0_b0c4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b0d0 = load i32, i32* @sl, align 4
  %v9_b0d0 = icmp eq i32 %v0_b0d0, 65535
  store i1 %v9_b0d0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0d4 = load i32, i32* @r5, align 4
  %v2_b0d4 = add i32 %v1_b0d4, 12
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0c4, i32* %v3_b0d4, align 4
  br i1 %v9_b0d0, label %dec_label_pc_b0dc, label %dec_label_pc_b0c4.dec_label_pc_af40_crit_edge

dec_label_pc_b0c4.dec_label_pc_af40_crit_edge:    ; preds = %dec_label_pc_b0c4
  %v1_af44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af40

dec_label_pc_b0dc:                                ; preds = %dec_label_pc_b0c4, %dec_label_pc_af30
  %v0_b0dc = call i32 @function_f28c()
  %v3_b0e4 = urem i32 %v0_b0dc, 65536
  store i32 %v3_b0e4, i32* %r0.global-to-local, align 4
  %v3_b0e816 = udiv i32 %v0_b0dc, 256
  %v1_b0ec = trunc i32 %v3_b0e816 to i8
  %v2_b0ec = load i32, i32* @r5, align 4
  %v3_b0ec = add i32 %v2_b0ec, 5
  %v4_b0ec = inttoptr i32 %v3_b0ec to i8*
  store i8 %v1_b0ec, i8* %v4_b0ec, align 1
  %v0_b0f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_ac24, i32* %r3.global-to-local, align 4
  %v1_b0f8 = sub i32 999, %v0_b0f0
  store i32 %v1_b0f8, i32* %r2.global-to-local, align 4
  %v3_b0fc = sdiv i32 %v1_b0f8, 256
  store i32 %v3_b0fc, i32* %r1.global-to-local, align 4
  %v1_b100 = load i32, i32* @r4, align 4
  %v9_b100 = icmp eq i32 %v3_ac24, %v1_b100
  store i1 %v9_b100, i1* %cpsr_z.global-to-local, align 1
  %v1_b104 = trunc i32 %v0_b0f0 to i8
  %v2_b104 = load i32, i32* @r5, align 4
  %v3_b104 = add i32 %v2_b104, 4
  %v4_b104 = inttoptr i32 %v3_b104 to i8*
  store i8 %v1_b104, i8* %v4_b104, align 1
  %v0_b108 = load i32, i32* %r1.global-to-local, align 4
  %v1_b108 = trunc i32 %v0_b108 to i8
  %v2_b108 = load i32, i32* @r6, align 4
  %v3_b108 = add i32 %v2_b108, 5
  %v4_b108 = inttoptr i32 %v3_b108 to i8*
  store i8 %v1_b108, i8* %v4_b108, align 1
  %v0_b10c = load i32, i32* %r2.global-to-local, align 4
  %v1_b10c = trunc i32 %v0_b10c to i8
  %v2_b10c = load i32, i32* @r6, align 4
  %v3_b10c = add i32 %v2_b10c, 4
  %v4_b10c = inttoptr i32 %v3_b10c to i8*
  store i8 %v1_b10c, i8* %v4_b10c, align 1
  %v0_b110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b110, label %dec_label_pc_b114, label %dec_label_pc_b0dc.dec_label_pc_af4c_crit_edge

dec_label_pc_b0dc.dec_label_pc_af4c_crit_edge:    ; preds = %dec_label_pc_b0dc
  %v1_af50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af4c

dec_label_pc_b114:                                ; preds = %dec_label_pc_b0dc, %dec_label_pc_af40
  %v0_b114 = call i32 @function_f28c()
  %v1_b114 = trunc i32 %v0_b114 to i8
  store i32 %v0_b114, i32* %r0.global-to-local, align 4
  store i32 %v3_ac28, i32* %r1.global-to-local, align 4
  %v4_b11c = sdiv i32 %v0_b114, 256
  store i32 %v4_b11c, i32* %r3.global-to-local, align 4
  %v1_b120 = load i32, i32* @r4, align 4
  %v9_b120 = icmp eq i32 %v3_ac28, %v1_b120
  store i1 %v9_b120, i1* %cpsr_z.global-to-local, align 1
  %v3_b124 = load i32, i32* @r5, align 4
  %v4_b124 = add i32 %v3_b124, 44
  %v5_b124 = inttoptr i32 %v4_b124 to i8*
  store i8 %v1_b114, i8* %v5_b124, align 1
  %v0_b128 = load i32, i32* %r3.global-to-local, align 4
  %v1_b128 = trunc i32 %v0_b128 to i8
  %v2_b128 = load i32, i32* @r7, align 4
  %v3_b128 = add i32 %v2_b128, 1
  %v4_b128 = inttoptr i32 %v3_b128 to i8*
  store i8 %v1_b128, i8* %v4_b128, align 1
  %v0_b12c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b12c, label %dec_label_pc_b130, label %dec_label_pc_af58

dec_label_pc_b130:                                ; preds = %dec_label_pc_b114, %dec_label_pc_af4c
  %v0_b130 = call i32 @function_f28c()
  %v1_b130 = trunc i32 %v0_b130 to i8
  store i32 %v0_b130, i32* %r0.global-to-local, align 4
  store i32 %v1_ac1c, i32* %r2.global-to-local, align 4
  %v4_b138 = sdiv i32 %v0_b130, 256
  store i32 %v4_b138, i32* %r3.global-to-local, align 4
  store i1 %v2_af5c, i1* %cpsr_z.global-to-local, align 1
  %v1_b140 = trunc i32 %v4_b138 to i8
  %v2_b140 = load i32, i32* @r7, align 4
  %v3_b140 = add i32 %v2_b140, 3
  %v4_b140 = inttoptr i32 %v3_b140 to i8*
  store i8 %v1_b140, i8* %v4_b140, align 1
  %v0_b144 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b144, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_b130
  %v1_b144 = load i32, i32* @r5, align 4
  %v2_b144 = add i32 %v1_b144, 16
  %v3_b144 = inttoptr i32 %v2_b144 to i32*
  %v4_b144 = load i32, i32* %v3_b144, align 4
  store i32 %v4_b144, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_b130, %bb101
  %v3_b148 = load i32, i32* @r7, align 4
  %v4_b148 = add i32 %v3_b148, 2
  %v5_b148 = inttoptr i32 %v4_b148 to i8*
  store i8 %v1_b130, i8* %v5_b148, align 1
  %v0_b14c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b14c, label %dec_label_pc_b154, label %bb103

bb103:                                            ; preds = %bb102
  %v1_b14c = load i32, i32* %r3.global-to-local, align 4
  %v2_b14c = load i32, i32* @r6, align 4
  %v3_b14c = add i32 %v2_b14c, 16
  %v4_b14c = inttoptr i32 %v3_b14c to i32*
  store i32 %v1_b14c, i32* %v4_b14c, align 4
  br label %dec_label_pc_af6c

dec_label_pc_b154:                                ; preds = %dec_label_pc_af58, %bb102
  %v0_b154 = call i32 @function_f28c()
  store i32 %v0_b154, i32* %r0.global-to-local, align 4
  store i32 %v1_ab88, i32* %r3.global-to-local, align 4
  store i1 %v2_b15c, i1* %cpsr_z.global-to-local, align 1
  %v1_b160 = load i32, i32* @r6, align 4
  %v2_b160 = add i32 %v1_b160, 16
  %v3_b160 = inttoptr i32 %v2_b160 to i32*
  store i32 %v0_b154, i32* %v3_b160, align 4
  br i1 %v2_b15c, label %dec_label_pc_af78, label %dec_label_pc_b168

dec_label_pc_b168:                                ; preds = %dec_label_pc_af6c, %dec_label_pc_b154
  %v0_b168 = load i32, i32* @r7, align 4
  %v1_b168 = add i32 %v0_b168, 8
  store i32 %v1_b168, i32* %r0.global-to-local, align 4
  store i32 %v5_ab68, i32* @r1, align 4
  %v1_b170 = inttoptr i32 %v1_b168 to i8*
  %v2_b170 = call i32 @function_f40c(i8* %v1_b170)
  store i32 %v2_b170, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af78

dec_label_pc_b178:                                ; preds = %dec_label_pc_ac08
  %v1_b180 = add i32 %v5_ab68, 8
  store i32 %v1_b180, i32* %r2.global-to-local, align 4
  %v1_b184 = add i32 %v5_ab68, 52
  store i32 %v1_b184, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_aee4.preheader

; uselistorder directives
  uselistorder i32 %v1_b184, { 1, 0 }
  uselistorder i32 %v1_b180, { 1, 0 }
  uselistorder i32 %v4_b138, { 1, 0 }
  uselistorder i32 %v0_b130, { 0, 2, 1 }
  uselistorder i32 %v0_b114, { 0, 2, 1 }
  uselistorder i32 %v2_b0b4, { 1, 0 }
  uselistorder i32 %v8_b094, { 1, 2, 0 }
  uselistorder i32 %v0_b070, { 1, 0, 2 }
  uselistorder i32 %v1_b03c, { 1, 2, 0 }
  uselistorder i32 %v1_b038, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_afdc, { 1, 0, 2 }
  uselistorder i32 %v4_afd8, { 0, 2, 1 }
  uselistorder i32 %v0_afb8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_afa8, { 0, 2, 1 }
  uselistorder i32 %v4_af8c, { 1, 0 }
  uselistorder i32 %v7_af10, { 1, 0, 2 }
  uselistorder i32 %v0_aee4, { 1, 0 }
  uselistorder i1 %v2_af28, { 3, 0, 1, 2 }
  uselistorder i1 %v2_b15c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aea4, { 1, 0, 2 }
  uselistorder i32 %v0_ae68, { 1, 0, 2 }
  uselistorder i32 %v3_ad1c, { 0, 2, 1 }
  uselistorder i32 %v3_acdc, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0 }
  uselistorder i32 %v1_ac94, { 1, 0 }
  uselistorder i32 %v1_ac70, { 1, 0 }
  uselistorder i32 %v1_ac6c, { 0, 2, 1 }
  uselistorder i32 %v3_ac50, { 2, 1, 0 }
  uselistorder i32 %v0_ac2c, { 1, 0, 2 }
  uselistorder i32 %v1_ac1c, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v0_ac18, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ac14, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_abd0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_abbc, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_ab88, { 1, 0, 2 }
  uselistorder i32 %v5_ab68, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_ab0c, { 1, 0 }
  uselistorder i32 %v4_aa9c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_aa80, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 1, 0 }
  uselistorder label %dec_label_pc_b168, { 1, 0 }
  uselistorder label %dec_label_pc_b154, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_b054, { 1, 0 }
  uselistorder label %dec_label_pc_af78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aee4.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread24, { 2, 1, 0 }
}

define i32 @function_b198(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b198:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b198 = load i32, i32* @r4, align 4
  %v6_b198 = load i32, i32* @r5, align 4
  %v9_b198 = load i32, i32* @r6, align 4
  %v12_b198 = load i32, i32* @r7, align 4
  %v1_b19c = urem i32 %arg1, 256
  store i32 %v1_b19c, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_b1b0 = urem i32 %arg3, 256
  store i32 %v1_b1b0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b1b8 = call i32* @calloc(i32 %v1_b19c, i32 4)
  %v4_b1b8 = ptrtoint i32* %v2_b1b8 to i32
  %v0_b1bc = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b1d0 = inttoptr i32 %v0_b1bc to i32*
  %v6_b1d0 = call i32 @function_92ac(i32 %v0_b1c8, i32* %v5_b1d0, i32 2, i32 0)
  %v1_b1dc = urem i32 %v6_b1d0, 256
  store i32 %v1_b1dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b1e8 = load i32, i32* @r4, align 4
  %v0_b1ec = load i32, i32* @r5, align 4
  %v5_b1f0 = trunc i32 %v6_b1d0 to i8
  %v6_b1f4 = inttoptr i32 %v0_b1ec to i32*
  %v7_b1f4 = call i32 @function_92ac(i32 %v0_b1e8, i32* %v6_b1f4, i32 3, i32 65535)
  %v0_b1f8 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b1f4, i32* @r7, align 4
  %v0_b208 = load i32, i32* @r4, align 4
  %v4_b20c = inttoptr i32 %v0_b1f8 to i32*
  %v5_b20c = call i32 @function_92ac(i32 %v0_b208, i32* %v4_b20c, i32 4, i32 64)
  %v1_b214 = urem i32 %v5_b20c, 256
  store i32 %v1_b214, i32* %ip.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b224 = load i32, i32* @r4, align 4
  %v5_b228 = trunc i32 %v5_b20c to i8
  %v6_b22c = inttoptr i32 %v0_b218 to i32*
  %v7_b22c = call i32 @function_92ac(i32 %v0_b224, i32* %v6_b22c, i32 5, i32 0)
  %v1_b238 = urem i32 %v7_b22c, 256
  store i32 %v1_b238, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b244 = load i32, i32* @r4, align 4
  %v0_b248 = load i32, i32* @r5, align 4
  %v5_b250 = inttoptr i32 %v0_b248 to i32*
  %v6_b250 = call i32 @function_92ac(i32 %v0_b244, i32* %v5_b250, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b260 = load i32, i32* @r5, align 4
  store i32 %v6_b250, i32* @r6, align 4
  %v0_b268 = load i32, i32* @r4, align 4
  %v4_b26c = inttoptr i32 %v0_b260 to i32*
  %v5_b26c = call i32 @function_92ac(i32 %v0_b268, i32* %v4_b26c, i32 7, i32 27015)
  store i32 %v5_b26c, i32* @r4, align 4
  %v1_b278 = call i32 @function_10f5c(i32 20)
  %v3_b284 = call i32 @function_10e78(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_b284, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b298 = call i32 @socket(i32 2, i32 3, i32 17)
  %v2_b29c = icmp eq i32 %v3_b298, -1
  store i1 %v2_b29c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b298, i32* %fp.global-to-local, align 4
  br i1 %v2_b29c, label %dec_label_pc_b650, label %dec_label_pc_b2a8

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b198
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b2b0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b2b0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b2c4 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_b2b0, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v2_b2c8 = icmp eq i32 %v6_b2c4, -1
  store i1 %v2_b2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2c8, label %dec_label_pc_b648, label %dec_label_pc_b2d0

dec_label_pc_b2d0:                                ; preds = %dec_label_pc_b2a8
  %v0_b2d0 = load i32, i32* @r4, align 4
  %v3_b2d0 = mul i32 %v0_b2d0, 65536
  store i32 %v3_b2d0, i32* %lr.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @r7, align 4
  %v0_b2d8 = load i32, i32* @r6, align 4
  %v3_b2d8 = mul i32 %v0_b2d8, 65536
  store i32 %v3_b2d8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_b2e0 = urem i32 %v0_b2d4, 65536
  %v3_b2e4 = urem i32 %v0_b2d8, 65536
  store i32 %v3_b2e4, i32* %r2.global-to-local, align 4
  %v3_b2e8 = urem i32 %v0_b2d0, 65536
  store i32 %v3_b2e8, i32* %r3.global-to-local, align 4
  %v0_b2ec = load i32, i32* %sb.global-to-local, align 4
  %v2_b2ec = icmp eq i32 %v0_b2ec, 0
  store i1 %v2_b2ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp51 = icmp slt i32 %v0_b2ec, 1
  br i1 %tmp51, label %dec_label_pc_b470, label %dec_label_pc_b304

dec_label_pc_b304:                                ; preds = %dec_label_pc_b2d0
  %v1_b308 = urem i32 %v0_b2d0, 256
  %v1_b30c = urem i32 %v0_b2d8, 256
  %v1_b310 = urem i32 %v0_b2d4, 256
  %v3_b314 = mul nuw nsw i32 %v1_b30c, 256
  %v3_b318 = mul nuw nsw i32 %v1_b308, 256
  %tmp52 = udiv i32 %v0_b2d4, 256
  %v3_b31c = urem i32 %tmp52, 256
  %v4_b320 = mul nuw nsw i32 %v1_b310, 256
  %v5_b320 = or i32 %v4_b320, %v3_b31c
  store i32 %v5_b320, i32* %r7.global-to-local, align 4
  %tmp53 = udiv i32 %v0_b2d0, 256
  %v4_b324 = urem i32 %tmp53, 256
  %v5_b324 = or i32 %v4_b324, %v3_b318
  store i32 %v5_b324, i32* %r5.global-to-local, align 4
  %tmp54 = udiv i32 %v0_b2d8, 256
  %v4_b328 = urem i32 %tmp54, 256
  %v5_b328 = or i32 %v4_b328, %v3_b314
  store i32 %v5_b328, i32* %r6.global-to-local, align 4
  store i32 %v1_b30c, i32* %r2.global-to-local, align 4
  store i32 %v1_b308, i32* %r3.global-to-local, align 4
  %v2_b3a4 = icmp eq i32 %v1_b238, 0
  %v4_b3a8 = sext i8 %v5_b228 to i32
  %sext = mul i32 %v0_b2d4, 16777216
  %v4_b3c4 = sdiv i32 %sext, 16777216
  %sext7 = mul i32 %v0_b2d8, 16777216
  %v4_b420 = sdiv i32 %sext7, 16777216
  %sext8 = mul i32 %v0_b2d0, 16777216
  %v4_b440 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %bb58, %dec_label_pc_b304
  %v2_b34c = call i32* @calloc(i32 128, i32 1)
  %v4_b34c = ptrtoint i32* %v2_b34c to i32
  store i32 %v4_b1b8, i32* %r2.global-to-local, align 4
  %v3_b354 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b354, i32* %r3.global-to-local, align 4
  %v2_b358 = load i32, i32* @r4, align 4
  %v5_b358 = mul i32 %v2_b358, 4
  %v6_b358 = add i32 %v5_b358, %v4_b1b8
  %v7_b358 = inttoptr i32 %v6_b358 to i32*
  store i32 %v4_b34c, i32* %v7_b358, align 4
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = load i32, i32* %r3.global-to-local, align 4
  %v4_b35c = mul i32 %v1_b35c, 4
  %v5_b35c = add i32 %v4_b35c, %v0_b35c
  %v6_b35c = inttoptr i32 %v5_b35c to i32*
  %v7_b35c = load i32, i32* %v6_b35c, align 4
  store i32 %v7_b35c, i32* %lr.global-to-local, align 4
  %v1_b360 = inttoptr i32 %v7_b35c to i8*
  %v2_b360 = load i8, i8* %v1_b360, align 1
  %tmp = urem i8 %v2_b360, 16
  %v1_b364 = zext i8 %tmp to i32
  %v1_b368 = or i32 %v1_b364, 64
  store i32 %v1_b368, i32* %r3.global-to-local, align 4
  %v1_b36c = trunc i32 %v1_b368 to i8
  store i8 %v1_b36c, i8* %v1_b360, align 1
  %v0_b370 = load i32, i32* %lr.global-to-local, align 4
  %v1_b370 = inttoptr i32 %v0_b370 to i8*
  %v2_b370 = load i8, i8* %v1_b370, align 1
  %v1_b374 = and i8 %v2_b370, -16
  %v1_b378 = or i8 %v1_b374, 5
  store i8 %v1_b378, i8* %v1_b370, align 1
  %v2_b384 = load i32, i32* %lr.global-to-local, align 4
  %v3_b384 = add i32 %v2_b384, 1
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v5_b1f0, i8* %v4_b384, align 1
  %v3_b388 = load i32, i32* %stack_var_-44, align 4
  %v1_b38c = add i32 %v3_b388, 32
  %tmp55 = mul i32 %v1_b38c, 256
  %v1_b398 = and i32 %tmp55, 65280
  %tmp56 = udiv i32 %v1_b38c, 256
  %v4_b39c = urem i32 %tmp56, 256
  %v5_b39c = or i32 %v4_b39c, %v1_b398
  store i32 %v5_b39c, i32* %r2.global-to-local, align 4
  store i1 %v2_b3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b3a8, i32* %r3.global-to-local, align 4
  %v2_b3ac = load i32, i32* %lr.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 8
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 %v5_b228, i8* %v4_b3ac, align 1
  %v0_b3b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3b0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b344
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b3b4 = load i32, i32* %lr.global-to-local, align 4
  %v4_b3b4 = add i32 %v3_b3b4, 6
  %v5_b3b4 = inttoptr i32 %v4_b3b4 to i8*
  store i8 64, i8* %v5_b3b4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b344, %bb
  %v0_b3b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3b8 = trunc i32 %v0_b3b8 to i8
  %v2_b3b8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3b8 = add i32 %v2_b3b8, 2
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v1_b3b8, i8* %v4_b3b8, align 1
  %v0_b3bc = load i32, i32* %r2.global-to-local, align 4
  %v3_b3bc = sdiv i32 %v0_b3bc, 256
  store i32 %v3_b3bc, i32* %ip.global-to-local, align 4
  store i32 %v4_b3c4, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 9
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 17, i8* %v4_b3c8, align 1
  store i32 ptrtoint (i32* @global_var_1a220.101 to i32), i32* %r3.global-to-local, align 4
  %v0_b3d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d0 = trunc i32 %v0_b3d0 to i8
  %v2_b3d0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3d0 = add i32 %v2_b3d0, 5
  %v4_b3d0 = inttoptr i32 %v3_b3d0 to i8*
  store i8 %v1_b3d0, i8* %v4_b3d0, align 1
  %v0_b3d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b3d4 = trunc i32 %v0_b3d4 to i8
  %v2_b3d4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3d4 = add i32 %v2_b3d4, 3
  %v4_b3d4 = inttoptr i32 %v3_b3d4 to i8*
  store i8 %v1_b3d4, i8* %v4_b3d4, align 1
  %v0_b3d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d8, label %.thread9, label %bb57

.thread9:                                         ; preds = %.thread
  %v3_b3dc10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3dc10, i32* %ip.global-to-local, align 4
  br label %bb58

bb57:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b3dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3dc, i32* %ip.global-to-local, align 4
  %v3_b3e0 = load i32, i32* %lr.global-to-local, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 7
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 0, i8* %v5_b3e0, align 1
  %v0_b3e8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %.thread9, %bb57
  %v0_b3e8 = phi i32 [ %v3_b3dc10, %.thread9 ], [ %v0_b3e8.pre, %bb57 ]
  %v2_b3e4 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_b3e4, i32* %r2.global-to-local, align 4
  %v3_b3e8 = mul i32 %v0_b3e8, 32
  store i32 %v3_b3e8, i32* %r3.global-to-local, align 4
  %v1_b3ec = load i32, i32* %lr.global-to-local, align 4
  %v2_b3ec = add i32 %v1_b3ec, 12
  %v3_b3ec = inttoptr i32 %v2_b3ec to i32*
  store i32 %v2_b3e4, i32* %v3_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f0 = load i32, i32* %ip.global-to-local, align 4
  %tmp61 = mul i32 %v1_b3f0, -8
  %v5_b3f0 = add i32 %v0_b3f0, %tmp61
  %v1_b3f4 = load i32, i32* @sl, align 4
  %v2_b3f4 = add i32 %v5_b3f0, %v1_b3f4
  store i32 %v2_b3f4, i32* %r3.global-to-local, align 4
  %v1_b3f8 = add i32 %v2_b3f4, 16
  %v2_b3f8 = inttoptr i32 %v1_b3f8 to i32*
  %v3_b3f8 = load i32, i32* %v2_b3f8, align 4
  %v1_b3fc = load i32, i32* %lr.global-to-local, align 4
  %v2_b3fc = add i32 %v1_b3fc, 16
  %v3_b3fc = inttoptr i32 %v2_b3fc to i32*
  store i32 %v3_b3f8, i32* %v3_b3fc, align 4
  %v3_b400 = load i32, i32* %stack_var_-44, align 4
  %v1_b404 = add i32 %v3_b400, 12
  %tmp59 = mul i32 %v1_b404, 256
  %v1_b414 = and i32 %tmp59, 65280
  %tmp60 = udiv i32 %v1_b404, 256
  %v4_b418 = urem i32 %tmp60, 256
  %v5_b418 = or i32 %v4_b418, %v1_b414
  store i32 %v5_b418, i32* %ip.global-to-local, align 4
  %v1_b41c = load i32, i32* %lr.global-to-local, align 4
  %v2_b41c = add i32 %v1_b41c, 28
  %v3_b41c = inttoptr i32 %v2_b41c to i32*
  store i32 -1, i32* %v3_b41c, align 4
  store i32 %v4_b420, i32* %r2.global-to-local, align 4
  %v0_b424 = load i32, i32* %lr.global-to-local, align 4
  %v1_b424 = add i32 %v0_b424, 20
  store i32 %v1_b424, i32* %r4.global-to-local, align 4
  %v0_b428 = load i32, i32* %ip.global-to-local, align 4
  %v3_b428 = sdiv i32 %v0_b428, 256
  store i32 %v3_b428, i32* %r3.global-to-local, align 4
  %v0_b42c = load i32, i32* %r7.global-to-local, align 4
  %v1_b42c = trunc i32 %v0_b42c to i8
  %v3_b42c = add i32 %v0_b424, 4
  %v4_b42c = inttoptr i32 %v3_b42c to i8*
  store i8 %v1_b42c, i8* %v4_b42c, align 1
  %v0_b430 = load i32, i32* %r6.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* %lr.global-to-local, align 4
  %v3_b430 = add i32 %v2_b430, 20
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = trunc i32 %v0_b434 to i8
  %v2_b434 = load i32, i32* %r4.global-to-local, align 4
  %v3_b434 = add i32 %v2_b434, 5
  %v4_b434 = inttoptr i32 %v3_b434 to i8*
  store i8 %v1_b434, i8* %v4_b434, align 1
  %v0_b438 = load i32, i32* %r5.global-to-local, align 4
  %v1_b438 = trunc i32 %v0_b438 to i8
  %v2_b438 = load i32, i32* %r4.global-to-local, align 4
  %v3_b438 = add i32 %v2_b438, 2
  %v4_b438 = inttoptr i32 %v3_b438 to i8*
  store i8 %v1_b438, i8* %v4_b438, align 1
  %v0_b43c = load i32, i32* %r2.global-to-local, align 4
  %v1_b43c = trunc i32 %v0_b43c to i8
  %v2_b43c = load i32, i32* %r4.global-to-local, align 4
  %v3_b43c = add i32 %v2_b43c, 1
  %v4_b43c = inttoptr i32 %v3_b43c to i8*
  store i8 %v1_b43c, i8* %v4_b43c, align 1
  store i32 %v4_b440, i32* %r3.global-to-local, align 4
  %v0_b444 = load i32, i32* %ip.global-to-local, align 4
  %v1_b444 = trunc i32 %v0_b444 to i8
  %v2_b444 = load i32, i32* %r4.global-to-local, align 4
  %v3_b444 = add i32 %v2_b444, 4
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v1_b444, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* %r3.global-to-local, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* %r4.global-to-local, align 4
  %v3_b448 = add i32 %v2_b448, 3
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r8.global-to-local, align 4
  %v0_b450 = load i32, i32* %lr.global-to-local, align 4
  %v1_b450 = add i32 %v0_b450, 32
  %v3_b454 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b454, i32* %r2.global-to-local, align 4
  %v3_b458 = call i32 @function_115a4(i32 %v1_b450, i32 %v0_b44c, i32 %v3_b454)
  %v3_b45c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b45c, i32* %r3.global-to-local, align 4
  %v1_b460 = add i32 %v3_b45c, 1
  store i32 %v1_b460, i32* @r4, align 4
  %v1_b464 = load i32, i32* %sb.global-to-local, align 4
  %v9_b464 = icmp eq i32 %v1_b460, %v1_b464
  store i1 %v9_b464, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b460, i32* %stack_var_-40, align 4
  %v5_b46c = icmp slt i32 %v1_b460, %v1_b464
  br i1 %v5_b46c, label %dec_label_pc_b344, label %dec_label_pc_b470

dec_label_pc_b470:                                ; preds = %bb58, %dec_label_pc_b2d0
  %v0_b470 = phi i32 [ %v0_b2ec, %dec_label_pc_b2d0 ], [ %v1_b464, %bb58 ]
  %v2_b470 = icmp eq i32 %v0_b470, 0
  store i1 %v2_b470, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b4b8 = icmp eq i32 %v3_b2e0, 65535
  br label %dec_label_pc_b478.outer

dec_label_pc_b478.outer:                          ; preds = %dec_label_pc_b588, %dec_label_pc_b470
  %v1_b478.ph.in = phi i32 [ %v1_b57c, %dec_label_pc_b588 ], [ %v0_b470, %dec_label_pc_b470 ]
  %v0_b478.ph = phi i1 [ %v2_b588, %dec_label_pc_b588 ], [ %v2_b470, %dec_label_pc_b470 ]
  %v1_b478.ph = icmp slt i32 %v1_b478.ph.in, 0
  %v4_b478 = or i1 %v1_b478.ph, %v0_b478.ph
  br label %dec_label_pc_b478

dec_label_pc_b478:                                ; preds = %dec_label_pc_b478.outer, %dec_label_pc_b478
  br i1 %v4_b478, label %dec_label_pc_b478, label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b478
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b4d8, %dec_label_pc_b47c
  %v1_b49c = phi i32 [ %v1_b578, %dec_label_pc_b4d8 ], [ 0, %dec_label_pc_b47c ]
  %v5_b48c = mul i32 %v1_b49c, 24
  %v1_b490 = load i32, i32* @sl, align 4
  %v2_b490 = add i32 %v1_b490, %v5_b48c
  store i32 %v2_b490, i32* %r3.global-to-local, align 4
  %v1_b498 = add i32 %v2_b490, 20
  %v2_b498 = inttoptr i32 %v1_b498 to i8*
  %v3_b498 = load i8, i8* %v2_b498, align 1
  %v4_b498 = zext i8 %v3_b498 to i32
  store i32 %v4_b498, i32* %r2.global-to-local, align 4
  %v4_b49c = mul i32 %v1_b49c, 4
  %v5_b49c = add i32 %v4_b49c, %v4_b1b8
  %v6_b49c = inttoptr i32 %v5_b49c to i32*
  %v7_b49c = load i32, i32* %v6_b49c, align 4
  store i32 %v7_b49c, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b498, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_b4ac = add i32 %v7_b49c, 20
  store i32 %v1_b4ac, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_b498, 32
  br i1 %tmp62, label %dec_label_pc_b594, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b488
  store i32 %v3_b2e0, i32* %r2.global-to-local, align 4
  store i1 %v3_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4b8, label %dec_label_pc_b5fc, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b594.dec_label_pc_b4c0_crit_edge, %dec_label_pc_b4b4
  %v1_b4c4 = phi i32 [ %v1_b4c4.pre, %dec_label_pc_b594.dec_label_pc_b4c0_crit_edge ], [ 65535, %dec_label_pc_b4b4 ]
  store i32 %v3_b2e4, i32* %r3.global-to-local, align 4
  %v9_b4c4 = icmp eq i32 %v3_b2e4, %v1_b4c4
  store i1 %v9_b4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c4, label %dec_label_pc_b618, label %dec_label_pc_b4cc

dec_label_pc_b4cc:                                ; preds = %dec_label_pc_b5fc.dec_label_pc_b4cc_crit_edge, %dec_label_pc_b4c0
  %v1_b4d0 = phi i32 [ %v1_b4d0.pre, %dec_label_pc_b5fc.dec_label_pc_b4cc_crit_edge ], [ %v1_b4c4, %dec_label_pc_b4c0 ]
  %v9_b4d0 = icmp eq i32 %v3_b2e8, %v1_b4d0
  store i1 %v9_b4d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d0, label %dec_label_pc_b634, label %dec_label_pc_b4d8

dec_label_pc_b4d8:                                ; preds = %dec_label_pc_b618, %dec_label_pc_b4cc, %dec_label_pc_b634
  %v0_b4dc = load i32, i32* %r8.global-to-local, align 4
  %v1_b4dc = trunc i32 %v0_b4dc to i8
  %v2_b4dc = load i32, i32* @r5, align 4
  %v3_b4dc = add i32 %v2_b4dc, 10
  %v4_b4dc = inttoptr i32 %v3_b4dc to i8*
  store i8 %v1_b4dc, i8* %v4_b4dc, align 1
  %v0_b4e0 = load i32, i32* %r8.global-to-local, align 4
  %v1_b4e0 = trunc i32 %v0_b4e0 to i8
  %v2_b4e0 = load i32, i32* @r5, align 4
  %v3_b4e0 = add i32 %v2_b4e0, 11
  %v4_b4e0 = inttoptr i32 %v3_b4e0 to i8*
  store i8 %v1_b4e0, i8* %v4_b4e0, align 1
  %v0_b4e4 = load i32, i32* @r5, align 4
  store i32 %v0_b4e4, i32* @r0, align 4
  %v2_b4e8 = call i32 @function_ddc4(i32 %v0_b4e4, i32 20)
  %v3_b4e8 = trunc i32 %v2_b4e8 to i8
  %v4_b4ec = sdiv i32 %v2_b4e8, 256
  store i32 %v4_b4ec, i32* %r3.global-to-local, align 4
  %v1_b4f0 = trunc i32 %v4_b4ec to i8
  %v2_b4f0 = load i32, i32* @r5, align 4
  %v3_b4f0 = add i32 %v2_b4f0, 11
  %v4_b4f0 = inttoptr i32 %v3_b4f0 to i8*
  store i8 %v1_b4f0, i8* %v4_b4f0, align 1
  %v3_b4f4 = load i32, i32* @r5, align 4
  %v4_b4f4 = add i32 %v3_b4f4, 10
  %v5_b4f4 = inttoptr i32 %v4_b4f4 to i8*
  store i8 %v3_b4e8, i8* %v5_b4f4, align 1
  %v0_b4f8 = load i32, i32* %r8.global-to-local, align 4
  %v1_b4f8 = trunc i32 %v0_b4f8 to i8
  %v2_b4f8 = load i32, i32* @r6, align 4
  %v3_b4f8 = add i32 %v2_b4f8, 6
  %v4_b4f8 = inttoptr i32 %v3_b4f8 to i8*
  store i8 %v1_b4f8, i8* %v4_b4f8, align 1
  %v0_b4fc = load i32, i32* %r8.global-to-local, align 4
  %v1_b4fc = trunc i32 %v0_b4fc to i8
  %v2_b4fc = load i32, i32* @r6, align 4
  %v3_b4fc = add i32 %v2_b4fc, 7
  %v4_b4fc = inttoptr i32 %v3_b4fc to i8*
  store i8 %v1_b4fc, i8* %v4_b4fc, align 1
  %v0_b500 = load i32, i32* @r5, align 4
  %v1_b500 = add i32 %v0_b500, 24
  %v2_b500 = inttoptr i32 %v1_b500 to i8*
  %v3_b500 = load i8, i8* %v2_b500, align 1
  %v4_b500 = zext i8 %v3_b500 to i32
  store i32 %v4_b500, i32* %r3.global-to-local, align 4
  %v1_b504 = add i32 %v0_b500, 25
  %v2_b504 = inttoptr i32 %v1_b504 to i8*
  %v3_b504 = load i8, i8* %v2_b504, align 1
  %v4_b504 = zext i8 %v3_b504 to i32
  %v4_b508 = mul nuw nsw i32 %v4_b504, 256
  %v5_b508 = or i32 %v4_b508, %v4_b500
  store i32 %v5_b508, i32* %r2.global-to-local, align 4
  %v3_b50c = load i32, i32* %stack_var_-44, align 4
  %v0_b510 = load i32, i32* @r6, align 4
  store i32 %v0_b510, i32* @r1, align 4
  %v1_b514 = add i32 %v3_b50c, 12
  store i32 %v1_b514, i32* %r3.global-to-local, align 4
  %v4_b51c = call i32 @function_de20(i32 %v0_b500, i32 %v0_b510, i32 %v5_b508, i32 %v1_b514)
  %v5_b51c = trunc i32 %v4_b51c to i8
  %v4_b52025 = udiv i32 %v4_b51c, 256
  %v1_b524 = trunc i32 %v4_b52025 to i8
  %v2_b524 = load i32, i32* @r6, align 4
  %v3_b524 = add i32 %v2_b524, 7
  %v4_b524 = inttoptr i32 %v3_b524 to i8*
  store i8 %v1_b524, i8* %v4_b524, align 1
  %v3_b528 = load i32, i32* @r6, align 4
  %v4_b528 = add i32 %v3_b528, 6
  %v5_b528 = inttoptr i32 %v4_b528 to i8*
  store i8 %v5_b51c, i8* %v5_b528, align 1
  %v3_b52c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  %v1_b530 = add i32 %v0_b530, 20
  %v2_b530 = inttoptr i32 %v1_b530 to i32*
  %v3_b530 = load i32, i32* %v2_b530, align 4
  %v5_b538 = mul i32 %v3_b52c, 24
  %v1_b53c = load i32, i32* @sl, align 4
  %v2_b53c = add i32 %v1_b53c, %v5_b538
  store i32 %v2_b53c, i32* %ip.global-to-local, align 4
  %v3_b540 = udiv i32 %v3_b530, 65536
  store i32 %v3_b540, i32* %r2.global-to-local, align 4
  %v1_b544 = trunc i32 %v3_b540 to i8
  %v3_b544 = add i32 %v2_b53c, 2
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* %r2.global-to-local, align 4
  %v3_b54826 = udiv i32 %v0_b548, 256
  %v3_b54c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b54c, i32* %r2.global-to-local, align 4
  %v1_b550 = trunc i32 %v3_b54826 to i8
  %v2_b550 = load i32, i32* %ip.global-to-local, align 4
  %v3_b550 = add i32 %v2_b550, 3
  %v4_b550 = inttoptr i32 %v3_b550 to i8*
  store i8 %v1_b550, i8* %v4_b550, align 1
  %v0_b554 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b55c = load i32, i32* %r2.global-to-local, align 4
  %v1_b55c = add i32 %v0_b55c, 32
  store i32 %v1_b55c, i32* %r2.global-to-local, align 4
  %v0_b560 = load i32, i32* %fp.global-to-local, align 4
  %v0_b568 = load i32, i32* %ip.global-to-local, align 4
  %v4_b568 = inttoptr i32 %v0_b568 to %sockaddr*
  %v7_b570 = inttoptr i32 %v0_b554 to i32*
  %v9_b570 = call i32 @sendto(i32 %v0_b560, i32* %v7_b570, i32 %v1_b55c, i32 16384, %sockaddr* %v4_b568, i32 16)
  %v3_b574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  %v1_b578 = add i32 %v3_b574, 1
  %v1_b57c = load i32, i32* %sb.global-to-local, align 4
  %v9_b57c = icmp eq i32 %v1_b578, %v1_b57c
  store i1 %v9_b57c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b578, i32* %stack_var_-40, align 4
  %v5_b584 = icmp slt i32 %v1_b578, %v1_b57c
  br i1 %v5_b584, label %dec_label_pc_b488, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b4d8
  %v2_b588 = icmp eq i32 %v1_b57c, 0
  store i1 %v2_b588, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b478.outer

dec_label_pc_b594:                                ; preds = %dec_label_pc_b488
  %v1_b594 = add i32 %v2_b490, 16
  %v2_b594 = inttoptr i32 %v1_b594 to i32*
  %v3_b594 = load i32, i32* %v2_b594, align 4
  store i32 %v3_b594, i32* @r4, align 4
  %v0_b598 = call i32 @function_f28c()
  %v3_b59c = load i32, i32* %stack_var_-40, align 4
  %v5_b5a4 = mul i32 %v3_b59c, 24
  %v0_b5a8 = load i32, i32* @r4, align 4
  %v1_b5ac = and i32 %v0_b5a8, 65280
  store i32 %v1_b5ac, i32* %r3.global-to-local, align 4
  %v1_b5a8 = udiv i32 %v0_b5a8, 256
  %v3_b5b0 = and i32 %v1_b5a8, 65280
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = load i32, i32* @sl, align 4
  %v2_b5b4 = add i32 %v1_b5b4, %v5_b5a4
  store i32 %v2_b5b4, i32* %ip.global-to-local, align 4
  %v1_b5c0 = add i32 %v2_b5b4, 20
  %v2_b5c0 = inttoptr i32 %v1_b5c0 to i8*
  %v3_b5c0 = load i8, i8* %v2_b5c0, align 1
  %v4_b5c0 = zext i8 %v3_b5c0 to i32
  store i32 %v4_b5c0, i32* %lr.global-to-local, align 4
  %v2_b5c8 = call i32 @llvm.bswap.i32(i32 %v0_b5a8)
  %v7_b5cc = lshr i32 %v0_b598, %v4_b5c0
  %v8_b5cc = add i32 %v7_b5cc, %v2_b5c8
  store i32 %v3_b2e0, i32* %r2.global-to-local, align 4
  %v2_b5ec = call i32 @llvm.bswap.i32(i32 %v8_b5cc)
  store i32 %v2_b5ec, i32* %r3.global-to-local, align 4
  %v1_b5f0 = load i32, i32* %r7.global-to-local, align 4
  %v9_b5f0 = icmp eq i32 %v3_b2e0, %v1_b5f0
  store i1 %v9_b5f0, i1* %cpsr_z.global-to-local, align 1
  %v1_b5f4 = load i32, i32* @r5, align 4
  %v2_b5f4 = add i32 %v1_b5f4, 16
  %v3_b5f4 = inttoptr i32 %v2_b5f4 to i32*
  store i32 %v2_b5ec, i32* %v3_b5f4, align 4
  br i1 %v9_b5f0, label %dec_label_pc_b5fc, label %dec_label_pc_b594.dec_label_pc_b4c0_crit_edge

dec_label_pc_b594.dec_label_pc_b4c0_crit_edge:    ; preds = %dec_label_pc_b594
  %v1_b4c4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4c0

dec_label_pc_b5fc:                                ; preds = %dec_label_pc_b594, %dec_label_pc_b4b4
  %v0_b5fc = call i32 @function_f28c()
  %v1_b5fc = trunc i32 %v0_b5fc to i8
  %v4_b60027 = udiv i32 %v0_b5fc, 256
  %v1_b604 = trunc i32 %v4_b60027 to i8
  %v2_b604 = load i32, i32* @r5, align 4
  %v3_b604 = add i32 %v2_b604, 5
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v1_b604, i8* %v4_b604, align 1
  store i32 %v3_b2e4, i32* %r3.global-to-local, align 4
  %v1_b60c = load i32, i32* %r7.global-to-local, align 4
  %v9_b60c = icmp eq i32 %v3_b2e4, %v1_b60c
  store i1 %v9_b60c, i1* %cpsr_z.global-to-local, align 1
  %v3_b610 = load i32, i32* @r5, align 4
  %v4_b610 = add i32 %v3_b610, 4
  %v5_b610 = inttoptr i32 %v4_b610 to i8*
  store i8 %v1_b5fc, i8* %v5_b610, align 1
  %v0_b614 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b614, label %dec_label_pc_b618, label %dec_label_pc_b5fc.dec_label_pc_b4cc_crit_edge

dec_label_pc_b5fc.dec_label_pc_b4cc_crit_edge:    ; preds = %dec_label_pc_b5fc
  %v1_b4d0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4cc

dec_label_pc_b618:                                ; preds = %dec_label_pc_b5fc, %dec_label_pc_b4c0
  %v0_b618 = call i32 @function_f28c()
  %v1_b618 = trunc i32 %v0_b618 to i8
  %v4_b620 = sdiv i32 %v0_b618, 256
  store i32 %v4_b620, i32* %r3.global-to-local, align 4
  %v1_b624 = load i32, i32* %r7.global-to-local, align 4
  %v9_b624 = icmp eq i32 %v3_b2e8, %v1_b624
  store i1 %v9_b624, i1* %cpsr_z.global-to-local, align 1
  %v3_b628 = load i32, i32* @r5, align 4
  %v4_b628 = add i32 %v3_b628, 20
  %v5_b628 = inttoptr i32 %v4_b628 to i8*
  store i8 %v1_b618, i8* %v5_b628, align 1
  %v0_b62c = load i32, i32* %r3.global-to-local, align 4
  %v1_b62c = trunc i32 %v0_b62c to i8
  %v2_b62c = load i32, i32* @r6, align 4
  %v3_b62c = add i32 %v2_b62c, 1
  %v4_b62c = inttoptr i32 %v3_b62c to i8*
  store i8 %v1_b62c, i8* %v4_b62c, align 1
  %v0_b630 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b630, label %dec_label_pc_b634, label %dec_label_pc_b4d8

dec_label_pc_b634:                                ; preds = %dec_label_pc_b618, %dec_label_pc_b4cc
  %v0_b634 = call i32 @function_f28c()
  %v1_b634 = trunc i32 %v0_b634 to i8
  %v4_b638 = sdiv i32 %v0_b634, 256
  store i32 %v4_b638, i32* %r3.global-to-local, align 4
  %v1_b63c = trunc i32 %v4_b638 to i8
  %v2_b63c = load i32, i32* @r6, align 4
  %v3_b63c = add i32 %v2_b63c, 3
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v1_b63c, i8* %v4_b63c, align 1
  %v3_b640 = load i32, i32* @r6, align 4
  %v4_b640 = add i32 %v3_b640, 2
  %v5_b640 = inttoptr i32 %v4_b640 to i8*
  store i8 %v1_b634, i8* %v5_b640, align 1
  br label %dec_label_pc_b4d8

dec_label_pc_b648:                                ; preds = %dec_label_pc_b2a8
  %v0_b648 = load i32, i32* %fp.global-to-local, align 4
  %v1_b64c = call i32 @close(i32 %v0_b648)
  br label %dec_label_pc_b650

dec_label_pc_b650:                                ; preds = %dec_label_pc_b198, %dec_label_pc_b648
  %v29_b654 = phi i32 [ -1, %dec_label_pc_b198 ], [ %v1_b64c, %dec_label_pc_b648 ]
  store i32 %v3_b198, i32* %r4.global-to-local, align 4
  store i32 %v6_b198, i32* %r5.global-to-local, align 4
  store i32 %v9_b198, i32* %r6.global-to-local, align 4
  store i32 %v12_b198, i32* %r7.global-to-local, align 4
  ret i32 %v29_b654

; uselistorder directives
  uselistorder i32 %v4_b638, { 1, 0 }
  uselistorder i32 %v2_b5ec, { 1, 0 }
  uselistorder i32 %v0_b5a8, { 1, 0, 2 }
  uselistorder i1 %v2_b588, { 1, 0 }
  uselistorder i32 %v1_b57c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_b578, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b540, { 1, 0 }
  uselistorder i32 %v4_b4ec, { 1, 0 }
  uselistorder i1 %v3_b4b8, { 1, 0 }
  uselistorder i32 %v1_b460, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b404, { 1, 0 }
  uselistorder i32 %v1_b38c, { 1, 0 }
  uselistorder i32 %v1_b30c, { 1, 0 }
  uselistorder i32 %v1_b308, { 1, 0 }
  uselistorder i32 %v0_b2d8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b2d0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_b238, { 1, 0 }
  uselistorder i8 %v5_b228, { 1, 0 }
  uselistorder i32 %v5_b20c, { 1, 0 }
  uselistorder i32 %v6_b1d0, { 1, 0 }
  uselistorder i32 %v1_b19c, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_b650, { 1, 0 }
  uselistorder label %dec_label_pc_b4d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b478, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b65c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b65c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_b65c = load i32, i32* @r4, align 4
  %v6_b65c = load i32, i32* @r5, align 4
  %v9_b65c = load i32, i32* @r6, align 4
  %v12_b65c = load i32, i32* @r7, align 4
  %v15_b65c = load i32, i32* @r8, align 4
  %v18_b65c = load i32, i32* @sb, align 4
  %v21_b65c = load i32, i32* @sl, align 4
  %v24_b65c = load i32, i32* @fp, align 4
  %v1_b668 = urem i32 %arg1, 256
  store i32 %v1_b668, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b674 = urem i32 %arg3, 256
  store i32 %v1_b674, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b680 = call i32* @calloc(i32 %v1_b668, i32 4)
  %v4_b680 = ptrtoint i32* %v2_b680 to i32
  %v0_b684 = load i32, i32* @r5, align 4
  store i32 %v0_b684, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b690 = load i32, i32* @r4, align 4
  store i32 %v0_b690, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b698 = inttoptr i32 %v0_b684 to i32*
  %v6_b698 = call i32 @function_92ac(i32 %v0_b690, i32* %v5_b698, i32 2, i32 0)
  %v1_b6a4 = urem i32 %v6_b698, 256
  store i32 %v1_b6a4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b6b0 = load i32, i32* @r4, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  %v5_b6b8 = trunc i32 %v6_b698 to i8
  %v6_b6bc = inttoptr i32 %v0_b6b4 to i32*
  %v7_b6bc = call i32 @function_92ac(i32 %v0_b6b0, i32* %v6_b6bc, i32 3, i32 65535)
  %v0_b6c0 = load i32, i32* @r5, align 4
  store i32 %v0_b6c0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_b6cc = load i32, i32* @r4, align 4
  store i32 %v0_b6cc, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_b6d4 = inttoptr i32 %v0_b6c0 to i32*
  %v6_b6d4 = call i32 @function_92ac(i32 %v0_b6cc, i32* %v5_b6d4, i32 4, i32 64)
  %v1_b6dc = urem i32 %v6_b6d4, 256
  store i32 %v1_b6dc, i32* %ip.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r5, align 4
  store i32 %v0_b6e0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6ec = load i32, i32* @r4, align 4
  store i32 %v0_b6ec, i32* %r0.global-to-local, align 4
  %v6_b6f4 = inttoptr i32 %v0_b6e0 to i32*
  %v7_b6f4 = call i32 @function_92ac(i32 %v0_b6ec, i32* %v6_b6f4, i32 5, i32 0)
  %v1_b700 = urem i32 %v7_b6f4, 256
  store i32 %v1_b700, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b70c = load i32, i32* @r4, align 4
  store i32 %v0_b70c, i32* %r0.global-to-local, align 4
  %v0_b710 = load i32, i32* @r5, align 4
  store i32 %v0_b710, i32* %r1.global-to-local, align 4
  %v5_b718 = inttoptr i32 %v0_b710 to i32*
  %v6_b718 = call i32 @function_92ac(i32 %v0_b70c, i32* %v5_b718, i32 6, i32 65535)
  %v0_b71c = load i32, i32* @r5, align 4
  store i32 %v0_b71c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_b718, i32* %fp.global-to-local, align 4
  %v0_b72c = load i32, i32* @r4, align 4
  store i32 %v0_b72c, i32* %r0.global-to-local, align 4
  %v4_b730 = inttoptr i32 %v0_b71c to i32*
  %v5_b730 = call i32 @function_92ac(i32 %v0_b72c, i32* %v4_b730, i32 7, i32 53)
  %v0_b738 = load i32, i32* @r5, align 4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_b730, i32* %sb.global-to-local, align 4
  %v0_b748 = load i32, i32* @r4, align 4
  store i32 %v0_b748, i32* %r0.global-to-local, align 4
  %v4_b74c = inttoptr i32 %v0_b738 to i32*
  %v5_b74c = call i32 @function_92ac(i32 %v0_b748, i32* %v4_b74c, i32 9, i32 65535)
  %v0_b750 = load i32, i32* @r5, align 4
  store i32 %v0_b750, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_b74c, i32* @sl, align 4
  %v0_b760 = load i32, i32* @r4, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v4_b764 = inttoptr i32 %v0_b750 to i32*
  %v5_b764 = call i32 @function_92ac(i32 %v0_b760, i32* %v4_b764, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b770 = load i32, i32* @r5, align 4
  store i32 %v0_b770, i32* %r1.global-to-local, align 4
  store i32 %v5_b764, i32* %r8.global-to-local, align 4
  %v0_b778 = load i32, i32* @r4, align 4
  store i32 %v0_b778, i32* %r0.global-to-local, align 4
  %v4_b77c = inttoptr i32 %v0_b770 to i32*
  %v5_b77c = call i32 @function_8e98(i32 %v0_b778, i32* %v4_b77c, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b788 = call i32 @function_10f5c(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_b794 = call i32 @function_10e78(i32 21, i32* null)
  %v4_b794 = inttoptr i32 %v3_b794 to i8*
  store i32 %v3_b794, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_b79c = call i32 (i8*, i32, ...) @open(i8* %v4_b794, i32 0)
  store i32 %v4_b79c, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b7a8 = call i32 @function_10ea4(i32 21)
  store i32 %v1_b7a8, i32* %r0.global-to-local, align 4
  %v0_b7ac = load i32, i32* @r4, align 4
  %v1_b7ac = icmp slt i32 %v0_b7ac, 0
  %v2_b7ac = icmp eq i32 %v0_b7ac, 0
  store i1 %v2_b7ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_b7ac, label %dec_label_pc_bd78, label %dec_label_pc_b7b4

dec_label_pc_b7b4:                                ; preds = %dec_label_pc_b65c
  %v2_b7b8 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_b7b8, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b7b8, i32* %r1.global-to-local, align 4
  store i32 %v0_b7ac, i32* %r0.global-to-local, align 4
  %v4_b7c8 = call i32 @read(i32 %v0_b7ac, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_b7c8, i32* @r5, align 4
  %v0_b7d0 = load i32, i32* @r4, align 4
  store i32 %v0_b7d0, i32* %r0.global-to-local, align 4
  %v1_b7d4 = call i32 @close(i32 %v0_b7d0)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b7dc = call i32 @function_10f5c(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_b7e8 = call i32 @function_10e78(i32 22, i32* null)
  %v0_b7ec = load i32, i32* @r5, align 4
  store i32 %v0_b7ec, i32* @r1, align 4
  store i32 %v3_b7e8, i32* %r2.global-to-local, align 4
  store i32 %v2_b7b8, i32* %r0.global-to-local, align 4
  %v3_b7f8 = bitcast i32* %stack_var_-2120 to i8*
  %v4_b7f8 = call i32 @function_1187c(i8* %v3_b7f8, i32 %v0_b7ec, i32 %v3_b7e8)
  store i32 %v4_b7f8, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b804 = call i32 @function_10ea4(i32 22)
  store i32 %v1_b804, i32* %r0.global-to-local, align 4
  %v0_b808 = load i32, i32* @r4, align 4
  %v2_b808 = icmp eq i32 %v0_b808, -1
  store i1 %v2_b808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b808, label %dec_label_pc_bd78, label %dec_label_pc_b810

dec_label_pc_b810:                                ; preds = %dec_label_pc_b7b4
  %v0_b810 = load i32, i32* @r5, align 4
  %v9_b810 = icmp eq i32 %v0_b810, %v0_b808
  store i1 %v9_b810, i1* %cpsr_z.global-to-local, align 1
  %v7_b814 = icmp sgt i32 %v0_b810, %v0_b808
  br i1 %v7_b814, label %dec_label_pc_b818, label %dec_label_pc_bd78

dec_label_pc_b818:                                ; preds = %dec_label_pc_b810
  store i32 %v0_b810, i32* %r3.global-to-local, align 4
  store i32 %v0_b808, i32* %r2.global-to-local, align 4
  %v0_b828 = load i32, i32* @r6, align 4
  %v2_b828 = add i32 %v0_b828, %v0_b808
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_b830 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_b830, i32* %r7.global-to-local, align 4
  %v1_b860 = add i32 %v0_b810, -1
  br label %dec_label_pc_b858

dec_label_pc_b83c:                                ; preds = %dec_label_pc_b880, %bb139
  %v9_b83c = icmp eq i32 %v0_b848, %v1_b860
  store i1 %v9_b83c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b83c, label %dec_label_pc_b88c, label %dec_label_pc_b844

dec_label_pc_b844:                                ; preds = %dec_label_pc_b870, %dec_label_pc_b83c, %bb
  %v0_b87c43 = phi i32 [ %v0_b87c, %dec_label_pc_b870 ], [ %v0_b87c44, %dec_label_pc_b83c ], [ %v0_b87c, %bb ]
  %v0_b85c39 = phi i32 [ 0, %dec_label_pc_b870 ], [ %v0_b85c40, %dec_label_pc_b83c ], [ 0, %bb ]
  store i32 %v0_b810, i32* %r0.global-to-local, align 4
  %v1_b848 = add i32 %v0_b848, 1
  store i32 %v1_b848, i32* %r2.global-to-local, align 4
  %v9_b84c = icmp eq i32 %v0_b810, %v1_b848
  store i1 %v9_b84c, i1* %cpsr_z.global-to-local, align 1
  %v1_b850 = add i32 %v0_b850, 1
  store i32 %v1_b850, i32* %r7.global-to-local, align 4
  br i1 %v9_b84c, label %dec_label_pc_bd78, label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b818
  %v0_b850 = phi i32 [ %v1_b850, %dec_label_pc_b844 ], [ %v2_b830, %dec_label_pc_b818 ]
  %v0_b848 = phi i32 [ %v1_b848, %dec_label_pc_b844 ], [ %v0_b808, %dec_label_pc_b818 ]
  %v0_b87c = phi i32 [ %v0_b87c43, %dec_label_pc_b844 ], [ 0, %dec_label_pc_b818 ]
  %v0_b85c = phi i32 [ %v0_b85c39, %dec_label_pc_b844 ], [ 0, %dec_label_pc_b818 ]
  %v0_b864 = phi i32 [ %v1_b864, %dec_label_pc_b844 ], [ %v2_b828, %dec_label_pc_b818 ]
  %v1_b858 = inttoptr i32 %v0_b864 to i8*
  %v2_b858 = load i8, i8* %v1_b858, align 1
  %v3_b858 = zext i8 %v2_b858 to i32
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v2_b85c = icmp eq i32 %v0_b85c, 0
  store i1 %v2_b85c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b860, i32* %ip.global-to-local, align 4
  %v1_b864 = add i32 %v0_b864, 1
  store i32 %v1_b864, i32* %r1.global-to-local, align 4
  %v1_b868 = add nsw i32 %v3_b858, -48
  store i32 %v1_b868, i32* %r0.global-to-local, align 4
  br i1 %v2_b85c, label %dec_label_pc_b870, label %dec_label_pc_b880

dec_label_pc_b870:                                ; preds = %dec_label_pc_b858
  %v7_b870 = icmp eq i8 %v2_b858, 9
  store i1 %v7_b870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b870, label %dec_label_pc_b844, label %bb

bb:                                               ; preds = %dec_label_pc_b870
  %v8_b874 = icmp eq i8 %v2_b858, 32
  store i1 %v8_b874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b874, label %dec_label_pc_b844, label %dec_label_pc_b87c

dec_label_pc_b87c:                                ; preds = %bb
  %v1_b87c = add i32 %v0_b87c, 1
  store i32 %v1_b87c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_b880

dec_label_pc_b880:                                ; preds = %dec_label_pc_b858, %dec_label_pc_b87c
  %v0_b87c44 = phi i32 [ %v0_b87c, %dec_label_pc_b858 ], [ %v1_b87c, %dec_label_pc_b87c ]
  %v0_b85c40 = phi i32 [ %v0_b85c, %dec_label_pc_b858 ], [ %v1_b87c, %dec_label_pc_b87c ]
  %v7_b880 = icmp eq i8 %v2_b858, 46
  store i1 %v7_b880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b880, label %dec_label_pc_b83c, label %bb139

bb139:                                            ; preds = %dec_label_pc_b880
  %v8_b884 = icmp eq i32 %v1_b868, 9
  store i1 %v8_b884, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_b868, 10
  br i1 %tmp, label %dec_label_pc_b83c, label %dec_label_pc_b88c

dec_label_pc_b88c:                                ; preds = %dec_label_pc_b83c, %bb139
  %v0_b848.lcssa = phi i32 [ %v1_b860, %dec_label_pc_b83c ], [ %v0_b848, %bb139 ]
  %v2_b890 = sub i32 %v0_b848.lcssa, %v0_b808
  store i32 %v2_b890, i32* %r2.global-to-local, align 4
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  store i32 %v2_b830, i32* %r0.global-to-local, align 4
  %v3_b89c = call i32 @function_115a4(i32 %v2_b830, i32 %v2_b828, i32 %v2_b890)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp140 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_b830, i32* %r0.global-to-local, align 4
  %v2_b8ac = load i32, i32* %r7.global-to-local, align 4
  %v3_b8ac = inttoptr i32 %v2_b8ac to i8*
  store i8 0, i8* %v3_b8ac, align 1
  %v3_b8b0 = call i32 @inet_addr(i8* %tmp140)
  store i32 %v3_b8b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8b8

dec_label_pc_b8b821:                              ; preds = %dec_label_pc_bd78
  unreachable

dec_label_pc_b8b8:                                ; preds = %dec_label_pc_bdf0, %dec_label_pc_bde0, %dec_label_pc_bdd4, %dec_label_pc_bdc0, %dec_label_pc_b88c
  %v29_bdbc75 = phi i32 [ %v1_bd7c, %dec_label_pc_bdf0 ], [ %v1_bd7c, %dec_label_pc_bde0 ], [ %v1_bd7c, %dec_label_pc_bdd4 ], [ %v1_bd7c, %dec_label_pc_bdc0 ], [ %v3_b8b0, %dec_label_pc_b88c ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_bdf0 ], [ 104859200, %dec_label_pc_bde0 ], [ 707416650, %dec_label_pc_bdd4 ], [ 134744072, %dec_label_pc_bdc0 ], [ %v3_b8b0, %dec_label_pc_b88c ]
  store i32 %v5_b77c, i32* %ip.global-to-local, align 4
  %v2_b8bc = icmp eq i32 %v5_b77c, 0
  store i1 %v2_b8bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8bc, label %dec_label_pc_bdb4, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_b8b8
  store i32 %v5_b77c, i32* %r0.global-to-local, align 4
  %v1_b8c8 = inttoptr i32 %v5_b77c to i8*
  %v2_b8c8 = call i32 @function_11528(i8* %v1_b8c8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b8dc = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b8dc, i32* %r0.global-to-local, align 4
  %v2_b8e0 = icmp eq i32 %v3_b8dc, -1
  store i1 %v2_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8e0, label %dec_label_pc_bdb4, label %dec_label_pc_b8ec

dec_label_pc_b8ec:                                ; preds = %dec_label_pc_b8c4
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b8f8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b8f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b90c = call i32 @setsockopt(i32 %v3_b8dc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b90c, i32* %r0.global-to-local, align 4
  %v2_b910 = icmp eq i32 %v7_b90c, -1
  store i1 %v2_b910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b910, label %dec_label_pc_bdac, label %dec_label_pc_b918

dec_label_pc_b918:                                ; preds = %dec_label_pc_b8ec
  store i32 %v1_b668, i32* %r0.global-to-local, align 4
  %v3_b920 = mul i32 %v7_b6bc, 65536
  store i32 %v3_b920, i32* %lr.global-to-local, align 4
  %v0_b924 = load i32, i32* @sl, align 4
  %v3_b924 = mul i32 %v0_b924, 65536
  store i32 %v3_b924, i32* %sl.global-to-local, align 4
  %v0_b928 = load i32, i32* %r8.global-to-local, align 4
  %v0_b92c = load i32, i32* %fp.global-to-local, align 4
  %v3_b92c = mul i32 %v0_b92c, 65536
  store i32 %v3_b92c, i32* %r5.global-to-local, align 4
  %v0_b930 = load i32, i32* %sb.global-to-local, align 4
  %v3_b930 = mul i32 %v0_b930, 65536
  store i32 %v3_b930, i32* %sb.global-to-local, align 4
  %v5_b934 = trunc i32 %v0_b928 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b93c = urem i32 %v7_b6bc, 65536
  store i32 %v3_b93c, i32* %r2.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b92c, 65536
  store i32 %v3_b940, i32* %r3.global-to-local, align 4
  %v3_b944 = urem i32 %v0_b930, 65536
  store i32 %v3_b944, i32* %r4.global-to-local, align 4
  %v3_b948 = urem i32 %v0_b924, 65536
  store i32 %v3_b948, i32* %r8.global-to-local, align 4
  %v2_b94c = icmp eq i32 %v1_b668, 0
  store i1 %v2_b94c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b94c, label %dec_label_pc_bd9c, label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b918
  %v4_b974 = sext i8 %v5_b934 to i32
  %v2_b978 = add i32 %v4_b974, %v2_b8c8
  store i32 %v2_b978, i32* @fp, align 4
  %v3_b97c = mul i32 %v2_b978, 65536
  %v1_b980 = add i32 %v3_b97c, 1769472
  store i32 %v1_b980, i32* %r6.global-to-local, align 4
  %v1_b984 = add i32 %v3_b97c, 3080192
  %v1_b998 = urem i32 %v0_b924, 256
  %v3_b9a8 = udiv i32 %v1_b980, 256
  %v1_b9ac = urem i32 %v7_b6bc, 256
  %v1_b9b0 = and i32 %v3_b9a8, 65280
  %v1_b9b4 = urem i32 %v0_b930, 256
  %v3_b9b8 = mul nuw nsw i32 %v1_b998, 256
  %v1_b9c0 = urem i32 %v0_b92c, 256
  %v3_b9c4 = mul nuw nsw i32 %v1_b9b4, 256
  %tmp141 = udiv i32 %v0_b924, 256
  %v4_b9c8 = urem i32 %tmp141, 256
  %v5_b9c8 = or i32 %v4_b9c8, %v3_b9b8
  store i32 %v5_b9c8, i32* %r8.global-to-local, align 4
  %v4_b9cc = udiv i32 %v1_b980, 16777216
  %v5_b9cc = or i32 %v1_b9b0, %v4_b9cc
  store i32 %v5_b9cc, i32* %sl.global-to-local, align 4
  %tmp142 = udiv i32 %v0_b92c, 256
  %v3_b9d8 = urem i32 %tmp142, 256
  %v4_b9dc = sdiv i32 %v1_b984, 16777216
  %tmp143 = udiv i32 %v7_b6bc, 256
  %v4_b9e4 = mul nuw nsw i32 %v1_b9c0, 256
  %v5_b9e4 = or i32 %v4_b9e4, %v3_b9d8
  store i32 %v5_b9e4, i32* %r5.global-to-local, align 4
  %tmp144 = udiv i32 %v0_b930, 256
  %v4_b9e8 = urem i32 %tmp144, 256
  %v5_b9e8 = or i32 %v4_b9e8, %v3_b9c4
  store i32 %v5_b9e8, i32* %sb.global-to-local, align 4
  store i32 %v1_b9ac, i32* %r0.global-to-local, align 4
  %v1_b9f4 = add i32 %v2_b8c8, 1
  store i32 %v1_b9f4, i32* %r7.global-to-local, align 4
  %v3_b9f8 = ashr i32 %v1_b984, 31
  store i32 %v3_b9f8, i32* %lr.global-to-local, align 4
  store i32 %v1_b9c0, i32* %r1.global-to-local, align 4
  store i32 %v1_b9b4, i32* %r2.global-to-local, align 4
  %v3_ba0476 = udiv i32 %v1_b9b0, 256
  store i32 %v3_ba0476, i32* %r3.global-to-local, align 4
  store i32 %v1_b998, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_ba68 = sext i8 %v5_b6b8 to i32
  %sext14 = mul i32 %v6_b6d4, 16777216
  %v4_ba80 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %tmp143, 16777216
  %v4_ba94 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v7_b6bc, 16777216
  %v4_ba98 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_b980, 256
  %v4_bac8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_b930, 16777216
  %v4_bacc = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_b92c, 16777216
  %v4_baf0 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_b924, 16777216
  %v4_bafc = sdiv i32 %sext20, 16777216
  %v1_ba78 = trunc i32 %v4_b9dc to i8
  %extract.t = trunc i32 %v3_b9f8 to i8
  br label %dec_label_pc_ba28

dec_label_pc_ba28:                                ; preds = %dec_label_pc_bb90, %dec_label_pc_b970
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ba30 = call i32* @calloc(i32 600, i32 1)
  %v4_ba30 = ptrtoint i32* %v2_ba30 to i32
  store i32 %v4_ba30, i32* %r0.global-to-local, align 4
  store i32 %v4_b680, i32* %lr.global-to-local, align 4
  %v3_ba38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ba38, i32* %r3.global-to-local, align 4
  %v2_ba3c = load i32, i32* %r4.global-to-local, align 4
  %v5_ba3c = mul i32 %v2_ba3c, 4
  %v6_ba3c = add i32 %v5_ba3c, %v4_b680
  %v7_ba3c = inttoptr i32 %v6_ba3c to i32*
  store i32 %v4_ba30, i32* %v7_ba3c, align 4
  %v0_ba40 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba40 = load i32, i32* %r3.global-to-local, align 4
  %v4_ba40 = mul i32 %v1_ba40, 4
  %v5_ba40 = add i32 %v4_ba40, %v0_ba40
  %v6_ba40 = inttoptr i32 %v5_ba40 to i32*
  %v7_ba40 = load i32, i32* %v6_ba40, align 4
  store i32 %v7_ba40, i32* %r1.global-to-local, align 4
  %v1_ba44 = inttoptr i32 %v7_ba40 to i8*
  %v2_ba44 = load i8, i8* %v1_ba44, align 1
  %tmp156 = urem i8 %v2_ba44, 16
  %v1_ba48 = zext i8 %tmp156 to i32
  %v1_ba4c = or i32 %v1_ba48, 64
  store i32 %v1_ba4c, i32* %r2.global-to-local, align 4
  %v1_ba50 = trunc i32 %v1_ba4c to i8
  store i8 %v1_ba50, i8* %v1_ba44, align 1
  %v0_ba54 = load i32, i32* %r1.global-to-local, align 4
  %v1_ba54 = inttoptr i32 %v0_ba54 to i8*
  %v2_ba54 = load i8, i8* %v1_ba54, align 1
  %v1_ba58 = and i8 %v2_ba54, -16
  %v1_ba5c = or i8 %v1_ba58, 5
  store i32 %v1_b700, i32* %r0.global-to-local, align 4
  store i8 %v1_ba5c, i8* %v1_ba54, align 1
  store i32 %v4_ba68, i32* %r2.global-to-local, align 4
  %v2_ba6c = load i32, i32* %r1.global-to-local, align 4
  %v3_ba6c = add i32 %v2_ba6c, 1
  %v4_ba6c = inttoptr i32 %v3_ba6c to i8*
  store i8 %v5_b6b8, i8* %v4_ba6c, align 1
  store i32 %v4_b9dc, i32* %r3.global-to-local, align 4
  %v0_ba74 = load i32, i32* %r0.global-to-local, align 4
  %v2_ba74 = icmp eq i32 %v0_ba74, 0
  store i1 %v2_ba74, i1* %cpsr_z.global-to-local, align 1
  %v2_ba78 = load i32, i32* %r1.global-to-local, align 4
  %v3_ba78 = add i32 %v2_ba78, 2
  %v4_ba78 = inttoptr i32 %v3_ba78 to i8*
  store i8 %v1_ba78, i8* %v4_ba78, align 1
  store i32 %v3_b9f8, i32* %r4.global-to-local, align 4
  store i32 %v4_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba84, label %.thread22, label %bb145

bb145:                                            ; preds = %dec_label_pc_ba28
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ba88 = load i32, i32* %r1.global-to-local, align 4
  %v4_ba88 = add i32 %v3_ba88, 6
  %v5_ba88 = inttoptr i32 %v4_ba88 to i8*
  store i8 64, i8* %v5_ba88, align 1
  %v0_ba90.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t77 = trunc i32 %v0_ba90.pre to i8
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_ba28, %bb145
  %v0_ba90.off0 = phi i8 [ %extract.t, %dec_label_pc_ba28 ], [ %extract.t77, %bb145 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ba90 = load i32, i32* %r1.global-to-local, align 4
  %v3_ba90 = add i32 %v2_ba90, 3
  %v4_ba90 = inttoptr i32 %v3_ba90 to i8*
  store i8 %v0_ba90.off0, i8* %v4_ba90, align 1
  store i32 %v4_ba94, i32* %ip.global-to-local, align 4
  store i32 %v4_ba98, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a220.101 to i32), i32* %r4.global-to-local, align 4
  %v0_baa0 = load i32, i32* %r0.global-to-local, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v2_baa0 = load i32, i32* %r1.global-to-local, align 4
  %v3_baa0 = add i32 %v2_baa0, 8
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* %r1.global-to-local, align 4
  %v3_baa4 = add i32 %v2_baa4, 9
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v0_baa8 = load i32, i32* %lr.global-to-local, align 4
  %v1_baa8 = trunc i32 %v0_baa8 to i8
  %v2_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_baa8 = add i32 %v2_baa8, 5
  %v4_baa8 = inttoptr i32 %v3_baa8 to i8*
  store i8 %v1_baa8, i8* %v4_baa8, align 1
  %v0_baac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_baac, label %.thread23, label %bb146

.thread23:                                        ; preds = %.thread22
  %v2_bab024 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_bab024, i32* %r3.global-to-local, align 4
  store i32 %v4_b974, i32* %lr.global-to-local, align 4
  br label %bb147

bb146:                                            ; preds = %.thread22
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bab0 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_bab0, i32* %r3.global-to-local, align 4
  store i32 %v4_b974, i32* %lr.global-to-local, align 4
  %v3_bab8 = load i32, i32* %r1.global-to-local, align 4
  %v4_bab8 = add i32 %v3_bab8, 7
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 0, i8* %v5_bab8, align 1
  %v0_bac0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_bac4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %.thread23, %bb146
  %v0_bac4 = phi i32 [ %v2_bab024, %.thread23 ], [ %v0_bac4.pre, %bb146 ]
  %v0_bac0 = phi i32 [ %v4_b974, %.thread23 ], [ %v0_bac0.pre, %bb146 ]
  %v0_babc = load i32, i32* %r1.global-to-local, align 4
  %v1_babc = add i32 %v0_bac0, 41
  %v2_bac0 = add i32 %v1_babc, %v0_babc
  store i32 %v2_bac0, i32* %r4.global-to-local, align 4
  %v2_bac4 = add i32 %v0_babc, 12
  %v3_bac4 = inttoptr i32 %v2_bac4 to i32*
  store i32 %v0_bac4, i32* %v3_bac4, align 4
  store i32 %v4_bac8, i32* %r2.global-to-local, align 4
  store i32 %v4_bacc, i32* %r3.global-to-local, align 4
  %v0_bad0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bad0 = add i32 %v0_bad0, 20
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  %v0_bad4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bad4 = trunc i32 %v0_bad4 to i8
  %v3_bad4 = add i32 %v0_bad0, 4
  %v4_bad4 = inttoptr i32 %v3_bad4 to i8*
  store i8 %v1_bad4, i8* %v4_bad4, align 1
  %v0_bad8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bad8 = trunc i32 %v0_bad8 to i8
  %v2_bad8 = load i32, i32* %r0.global-to-local, align 4
  %v3_bad8 = add i32 %v2_bad8, 5
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i32, i32* %r3.global-to-local, align 4
  %v1_badc = trunc i32 %v0_badc to i8
  %v2_badc = load i32, i32* %r0.global-to-local, align 4
  %v3_badc = add i32 %v2_badc, 3
  %v4_badc = inttoptr i32 %v3_badc to i8*
  store i8 %v1_badc, i8* %v4_badc, align 1
  %v0_bae0 = load i32, i32* %sb.global-to-local, align 4
  %v1_bae0 = trunc i32 %v0_bae0 to i8
  %v2_bae0 = load i32, i32* %r0.global-to-local, align 4
  %v3_bae0 = add i32 %v2_bae0, 2
  %v4_bae0 = inttoptr i32 %v3_bae0 to i8*
  store i8 %v1_bae0, i8* %v4_bae0, align 1
  %v0_bae4 = load i32, i32* %sl.global-to-local, align 4
  %v1_bae4 = trunc i32 %v0_bae4 to i8
  %v2_bae4 = load i32, i32* %r0.global-to-local, align 4
  %v3_bae4 = add i32 %v2_bae4, 4
  %v4_bae4 = inttoptr i32 %v3_bae4 to i8*
  store i8 %v1_bae4, i8* %v4_bae4, align 1
  %v0_bae8 = load i32, i32* %r5.global-to-local, align 4
  %v1_bae8 = trunc i32 %v0_bae8 to i8
  %v2_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bae8 = add i32 %v2_bae8, 20
  %v4_bae8 = inttoptr i32 %v3_bae8 to i8*
  store i8 %v1_bae8, i8* %v4_bae8, align 1
  store i32 %v4_baf0, i32* %r2.global-to-local, align 4
  %v1_baf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_baf4 = add i32 %v1_baf4, 16
  %v3_baf4 = inttoptr i32 %v2_baf4 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_baf4, align 4
  %v0_baf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_baf8 = trunc i32 %v0_baf8 to i8
  %v2_baf8 = load i32, i32* %r0.global-to-local, align 4
  %v3_baf8 = add i32 %v2_baf8, 1
  %v4_baf8 = inttoptr i32 %v3_baf8 to i8*
  store i8 %v1_baf8, i8* %v4_baf8, align 1
  store i32 %v4_bafc, i32* %lr.global-to-local, align 4
  store i32 %v4_b974, i32* %r0.global-to-local, align 4
  %v0_bb04 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb04 = add i32 %v0_bb04, 28
  store i32 %v1_bb04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb10 = load i32, i32* %r8.global-to-local, align 4
  %v1_bb10 = trunc i32 %v0_bb10 to i8
  %v4_bb10 = inttoptr i32 %v1_bb04 to i8*
  store i8 %v1_bb10, i8* %v4_bb10, align 1
  %v0_bb14 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb14 = trunc i32 %v0_bb14 to i8
  %v2_bb14 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb14 = add i32 %v2_bb14, 5
  %v4_bb14 = inttoptr i32 %v3_bb14 to i8*
  store i8 %v1_bb14, i8* %v4_bb14, align 1
  %v0_bb18 = load i32, i32* %lr.global-to-local, align 4
  %v1_bb18 = trunc i32 %v0_bb18 to i8
  %v2_bb18 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb18 = add i32 %v2_bb18, 1
  %v4_bb18 = inttoptr i32 %v3_bb18 to i8*
  store i8 %v1_bb18, i8* %v4_bb18, align 1
  %v0_bb1c = load i32, i32* %r3.global-to-local, align 4
  %v1_bb1c = trunc i32 %v0_bb1c to i8
  %v2_bb1c = load i32, i32* %ip.global-to-local, align 4
  %v3_bb1c = add i32 %v2_bb1c, 2
  %v4_bb1c = inttoptr i32 %v3_bb1c to i8*
  store i8 %v1_bb1c, i8* %v4_bb1c, align 1
  %v0_bb20 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb20 = trunc i32 %v0_bb20 to i8
  %v2_bb20 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb20 = add i32 %v2_bb20, 3
  %v4_bb20 = inttoptr i32 %v3_bb20 to i8*
  store i8 %v1_bb20, i8* %v4_bb20, align 1
  %v0_bb24 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb24 = trunc i32 %v0_bb24 to i8
  %v2_bb24 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb24 = add i32 %v2_bb24, 4
  %v4_bb24 = inttoptr i32 %v3_bb24 to i8*
  store i8 %v1_bb24, i8* %v4_bb24, align 1
  %v0_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb28 = trunc i32 %v0_bb28 to i8
  %v2_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb28 = add i32 %v2_bb28, 40
  %v4_bb28 = inttoptr i32 %v3_bb28 to i8*
  store i8 %v1_bb28, i8* %v4_bb28, align 1
  store i32 %v5_b77c, i32* %r1.global-to-local, align 4
  %v0_bb30 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_bb30, i32* %r2.global-to-local, align 4
  %v0_bb34 = load i32, i32* %r4.global-to-local, align 4
  %v1_bb34 = add i32 %v0_bb34, 1
  store i32 %v1_bb34, i32* %r0.global-to-local, align 4
  %v3_bb38 = call i32 @function_115a4(i32 %v1_bb34, i32 %v5_b77c, i32 %v0_bb30)
  store i32 %v3_bb38, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c8, i32* %r1.global-to-local, align 4
  %v1_bb40 = load i32, i32* %r6.global-to-local, align 4
  %v9_bb40 = icmp eq i32 %v2_b8c8, %v1_bb40
  store i1 %v9_bb40, i1* %cpsr_z.global-to-local, align 1
  %v7_bb44 = icmp sgt i32 %v2_b8c8, %v1_bb40
  store i32 %v1_bb40, i32* %lr.global-to-local, align 4
  %v0_bb54 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bb54, i32* %r2.global-to-local, align 4
  %extract.t79 = trunc i32 %v1_bb40 to i8
  br i1 %v7_bb44, label %dec_label_pc_bb50, label %dec_label_pc_bb90

dec_label_pc_bb50:                                ; preds = %bb147
  store i32 %v1_bb40, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %bb150, %dec_label_pc_bb50
  %v0_bb7886153 = phi i32 [ %v0_bb7886154, %bb150 ], [ %v1_bb40, %dec_label_pc_bb50 ]
  %v1_bb6c34 = phi i32 [ %v1_bb7c92, %bb150 ], [ %v1_bb40, %dec_label_pc_bb50 ]
  %v1_bb68.off0 = phi i8 [ %v1_bb6857.off0, %bb150 ], [ %extract.t79, %dec_label_pc_bb50 ]
  %v0_bb6c33 = phi i32 [ %v0_bb6c335589, %bb150 ], [ %v0_bb54, %dec_label_pc_bb50 ]
  store i32 %v5_b77c, i32* %ip.global-to-local, align 4
  %v2_bb60 = add i32 %v1_bb6c34, %v5_b77c
  %v3_bb60 = inttoptr i32 %v2_bb60 to i8*
  %v4_bb60 = load i8, i8* %v3_bb60, align 1
  %v6_bb60 = zext i8 %v4_bb60 to i32
  store i32 %v6_bb60, i32* %r3.global-to-local, align 4
  %v7_bb64 = icmp eq i8 %v4_bb60, 46
  store i1 %v7_bb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb64, label %bb148, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_bb5c
  %v2_bb6c35 = add i32 %v1_bb6c34, %v0_bb6c33
  store i32 %v2_bb6c35, i32* %r0.global-to-local, align 4
  br label %.thread36

bb148:                                            ; preds = %dec_label_pc_bb5c
  %v3_bb68 = load i32, i32* %r2.global-to-local, align 4
  %v4_bb68 = inttoptr i32 %v3_bb68 to i8*
  store i8 %v1_bb68.off0, i8* %v4_bb68, align 1
  %v0_bb70.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bb6c = load i32, i32* %r4.global-to-local, align 4
  %v1_bb6c = load i32, i32* %r1.global-to-local, align 4
  %v2_bb6c = add i32 %v1_bb6c, %v0_bb6c
  store i32 %v2_bb6c, i32* %r0.global-to-local, align 4
  br i1 %v0_bb70.pr, label %bb149, label %bb148..thread36_crit_edge

bb148..thread36_crit_edge:                        ; preds = %bb148
  %v0_bb7886.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread36

bb149:                                            ; preds = %bb148
  %v2_bb70 = add i32 %v2_bb6c, 1
  store i32 %v2_bb70, i32* %r2.global-to-local, align 4
  store i32 %v2_b8c8, i32* %r0.global-to-local, align 4
  %v0_bb78 = load i32, i32* %lr.global-to-local, align 4
  %v1_bb78 = add i32 %v0_bb78, 1
  store i32 %v1_bb78, i32* %ip.global-to-local, align 4
  %v1_bb7c = add i32 %v1_bb6c, 1
  store i32 %v1_bb7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb150

.thread36:                                        ; preds = %bb148..thread36_crit_edge, %.thread32
  %v0_bb7886 = phi i32 [ %v0_bb7886.pre, %bb148..thread36_crit_edge ], [ %v0_bb7886153, %.thread32 ]
  %v0_bb7c.ph = phi i32 [ %v1_bb6c, %bb148..thread36_crit_edge ], [ %v1_bb6c34, %.thread32 ]
  %v0_bb6c3355.ph = phi i32 [ %v0_bb6c, %bb148..thread36_crit_edge ], [ %v0_bb6c33, %.thread32 ]
  store i32 %v2_b8c8, i32* %r0.global-to-local, align 4
  %v1_bb7887 = add i32 %v0_bb7886, 1
  store i32 %v1_bb7887, i32* %ip.global-to-local, align 4
  %v1_bb7c88 = add i32 %v0_bb7c.ph, 1
  store i32 %v1_bb7c88, i32* %r1.global-to-local, align 4
  %v2_bb84 = urem i32 %v1_bb7887, 256
  store i32 %v2_bb84, i32* %lr.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_bb7887 to i8
  br label %bb150

bb150:                                            ; preds = %bb149, %.thread36
  %v0_bb7886154 = phi i32 [ 0, %bb149 ], [ %v2_bb84, %.thread36 ]
  %v1_bb7c92 = phi i32 [ %v1_bb7c, %bb149 ], [ %v1_bb7c88, %.thread36 ]
  %v0_bb6c335589 = phi i32 [ %v0_bb6c, %bb149 ], [ %v0_bb6c3355.ph, %.thread36 ]
  %v1_bb6857.off0 = phi i8 [ 0, %bb149 ], [ %extract.t82, %.thread36 ]
  %v9_bb88 = icmp eq i32 %v2_b8c8, %v1_bb7c92
  store i1 %v9_bb88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb88, label %dec_label_pc_bb90.loopexit, label %dec_label_pc_bb5c

dec_label_pc_bb90.loopexit:                       ; preds = %bb150
  %v2_bb90.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bb90

dec_label_pc_bb90:                                ; preds = %dec_label_pc_bb90.loopexit, %bb147
  %v2_bb90 = phi i32 [ %v2_bb90.pre, %dec_label_pc_bb90.loopexit ], [ %v0_bb54, %bb147 ]
  %v0_bb90.off0 = phi i8 [ %v1_bb6857.off0, %dec_label_pc_bb90.loopexit ], [ %extract.t79, %bb147 ]
  %v3_bb90 = inttoptr i32 %v2_bb90 to i8*
  store i8 %v0_bb90.off0, i8* %v3_bb90, align 1
  %v3_bb94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b8c8, i32* %r1.global-to-local, align 4
  %v0_bb9c = load i32, i32* %r4.global-to-local, align 4
  %v2_bb9c = add i32 %v0_bb9c, %v2_b8c8
  store i32 %v2_bb9c, i32* %r3.global-to-local, align 4
  %v1_bba0 = add i32 %v3_bb94, 1
  store i32 %v1_bba0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %lr.global-to-local, align 4
  %v9_bbb0 = icmp eq i32 %v1_b668, %v1_bba0
  store i1 %v9_bbb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bbb4 = add i32 %v2_bb9c, 2
  store i32 %v1_bbb4, i32* %r2.global-to-local, align 4
  %v4_bbb8 = inttoptr i32 %v1_bbb4 to i8*
  store i8 0, i8* %v4_bbb8, align 1
  %v0_bbbc = load i32, i32* %lr.global-to-local, align 4
  %v1_bbbc = trunc i32 %v0_bbbc to i8
  %v2_bbbc = load i32, i32* %r2.global-to-local, align 4
  %v3_bbbc = add i32 %v2_bbbc, 3
  %v4_bbbc = inttoptr i32 %v3_bbbc to i8*
  store i8 %v1_bbbc, i8* %v4_bbbc, align 1
  %v0_bbc0 = load i32, i32* %lr.global-to-local, align 4
  %v1_bbc0 = trunc i32 %v0_bbc0 to i8
  %v2_bbc0 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbc0 = add i32 %v2_bbc0, 1
  %v4_bbc0 = inttoptr i32 %v3_bbc0 to i8*
  store i8 %v1_bbc0, i8* %v4_bbc0, align 1
  %v0_bbc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bbc4 = trunc i32 %v0_bbc4 to i8
  %v2_bbc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbc4 = add i32 %v2_bbc4, 2
  %v4_bbc4 = inttoptr i32 %v3_bbc4 to i8*
  store i8 %v1_bbc4, i8* %v4_bbc4, align 1
  %v0_bbc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bbc8, i32* %stack_var_-40, align 4
  %v8_bbcc = icmp sgt i32 %v1_b668, %v1_bba0
  br i1 %v8_bbcc, label %dec_label_pc_ba28, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bb90, %dec_label_pc_bd9c
  %v4_bc40.pre-phi = phi i32 [ %v4_bda0, %dec_label_pc_bd9c ], [ %v4_b974, %dec_label_pc_bb90 ]
  store i32 %v1_b668, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b94c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bbdc

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbdc, %dec_label_pc_bd00, %dec_label_pc_bbd0
  br i1 %v2_b94c, label %dec_label_pc_bbdc, label %dec_label_pc_bbe0

dec_label_pc_bbe0:                                ; preds = %dec_label_pc_bbdc
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_bbf0 = load i32, i32* @fp, align 4
  %v1_bbf0 = add i32 %v0_bbf0, 27
  store i32 %v1_bbf0, i32* @sb, align 4
  %v1_bbf4 = add i32 %v0_bbf0, 47
  store i32 %v1_bbf4, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bbfc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bc3c.dec_label_pc_bbfc_crit_edge, %dec_label_pc_bbe0
  %v1_bc1c = phi i32 [ %v1_bc08.pre, %dec_label_pc_bc3c.dec_label_pc_bbfc_crit_edge ], [ 65535, %dec_label_pc_bbe0 ]
  %v1_bc04 = phi i32 [ %v1_bcec, %dec_label_pc_bc3c.dec_label_pc_bbfc_crit_edge ], [ 0, %dec_label_pc_bbe0 ]
  store i32 %v4_b680, i32* %r3.global-to-local, align 4
  store i32 %v3_b93c, i32* %r8.global-to-local, align 4
  %v4_bc04 = mul i32 %v1_bc04, 4
  %v5_bc04 = add i32 %v4_bc04, %v4_b680
  %v6_bc04 = inttoptr i32 %v5_bc04 to i32*
  %v7_bc04 = load i32, i32* %v6_bc04, align 4
  store i32 %v7_bc04, i32* @r4, align 4
  %v9_bc08 = icmp eq i32 %v3_b93c, %v1_bc1c
  store i1 %v9_bc08, i1* %cpsr_z.global-to-local, align 1
  %v1_bc0c = add i32 %v7_bc04, 20
  store i32 %v1_bc0c, i32* @r5, align 4
  %v1_bc10 = add i32 %v7_bc04, 28
  store i32 %v1_bc10, i32* @r8, align 4
  br i1 %v9_bc08, label %dec_label_pc_bd10, label %dec_label_pc_bc18

dec_label_pc_bc18:                                ; preds = %dec_label_pc_bbfc
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v9_bc1c = icmp eq i32 %v3_b940, %v1_bc1c
  store i1 %v9_bc1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc1c, label %dec_label_pc_bd2c, label %dec_label_pc_bc24

dec_label_pc_bc24:                                ; preds = %dec_label_pc_bd10.dec_label_pc_bc24_crit_edge, %dec_label_pc_bc18
  %v1_bc28 = phi i32 [ %v1_bc28.pre, %dec_label_pc_bd10.dec_label_pc_bc24_crit_edge ], [ %v1_bc1c, %dec_label_pc_bc18 ]
  store i32 %v3_b944, i32* %lr.global-to-local, align 4
  %v9_bc28 = icmp eq i32 %v3_b944, %v1_bc28
  store i1 %v9_bc28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc28, label %dec_label_pc_bd48, label %dec_label_pc_bc30

dec_label_pc_bc30:                                ; preds = %dec_label_pc_bd2c.dec_label_pc_bc30_crit_edge, %dec_label_pc_bc24
  %v1_bc34 = phi i32 [ %v1_bc34.pre, %dec_label_pc_bd2c.dec_label_pc_bc30_crit_edge ], [ %v1_bc28, %dec_label_pc_bc24 ]
  store i32 %v3_b948, i32* %r0.global-to-local, align 4
  %v9_bc34 = icmp eq i32 %v3_b948, %v1_bc34
  store i1 %v9_bc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc34, label %dec_label_pc_bd64, label %dec_label_pc_bc3c

dec_label_pc_bc3c:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bc30, %dec_label_pc_bd64
  %v0_bc3c = load i32, i32* @r4, align 4
  %v1_bc3c = add i32 %v0_bc3c, 41
  store i32 %v1_bc3c, i32* %r0.global-to-local, align 4
  store i32 %v4_bc40.pre-phi, i32* %r1.global-to-local, align 4
  %v2_bc44 = call i32 @function_f340(i32 %v1_bc3c, i32 %v4_bc40.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc4c = load i32, i32* @r7, align 4
  %v1_bc4c = trunc i32 %v0_bc4c to i8
  %v2_bc4c = load i32, i32* @r4, align 4
  %v3_bc4c = add i32 %v2_bc4c, 10
  %v4_bc4c = inttoptr i32 %v3_bc4c to i8*
  store i8 %v1_bc4c, i8* %v4_bc4c, align 1
  %v0_bc50 = load i32, i32* @r7, align 4
  %v1_bc50 = trunc i32 %v0_bc50 to i8
  %v2_bc50 = load i32, i32* @r4, align 4
  %v3_bc50 = add i32 %v2_bc50, 11
  %v4_bc50 = inttoptr i32 %v3_bc50 to i8*
  store i8 %v1_bc50, i8* %v4_bc50, align 1
  %v0_bc54 = load i32, i32* @r4, align 4
  store i32 %v0_bc54, i32* @r0, align 4
  %v2_bc58 = call i32 @function_ddc4(i32 %v0_bc54, i32 20)
  %v3_bc58 = trunc i32 %v2_bc58 to i8
  store i32 %v2_bc58, i32* %r0.global-to-local, align 4
  %v4_bc5c = sdiv i32 %v2_bc58, 256
  store i32 %v4_bc5c, i32* %r3.global-to-local, align 4
  %v1_bc60 = trunc i32 %v4_bc5c to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 11
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  %v3_bc64 = load i32, i32* @r4, align 4
  %v4_bc64 = add i32 %v3_bc64, 10
  %v5_bc64 = inttoptr i32 %v4_bc64 to i8*
  store i8 %v3_bc58, i8* %v5_bc64, align 1
  %v0_bc68 = load i32, i32* @r7, align 4
  %v1_bc68 = trunc i32 %v0_bc68 to i8
  %v2_bc68 = load i32, i32* @r5, align 4
  %v3_bc68 = add i32 %v2_bc68, 6
  %v4_bc68 = inttoptr i32 %v3_bc68 to i8*
  store i8 %v1_bc68, i8* %v4_bc68, align 1
  %v0_bc6c = load i32, i32* @r7, align 4
  %v1_bc6c = trunc i32 %v0_bc6c to i8
  %v2_bc6c = load i32, i32* @r5, align 4
  %v3_bc6c = add i32 %v2_bc6c, 7
  %v4_bc6c = inttoptr i32 %v3_bc6c to i8*
  store i8 %v1_bc6c, i8* %v4_bc6c, align 1
  %v0_bc70 = load i32, i32* @r4, align 4
  %v1_bc70 = add i32 %v0_bc70, 24
  %v2_bc70 = inttoptr i32 %v1_bc70 to i8*
  %v3_bc70 = load i8, i8* %v2_bc70, align 1
  %v4_bc70 = zext i8 %v3_bc70 to i32
  store i32 %v4_bc70, i32* %r3.global-to-local, align 4
  %v1_bc74 = add i32 %v0_bc70, 25
  %v2_bc74 = inttoptr i32 %v1_bc74 to i8*
  %v3_bc74 = load i8, i8* %v2_bc74, align 1
  %v4_bc74 = zext i8 %v3_bc74 to i32
  %v0_bc78 = load i32, i32* @r5, align 4
  store i32 %v0_bc78, i32* @r1, align 4
  %v4_bc7c = mul nuw nsw i32 %v4_bc74, 256
  %v5_bc7c = or i32 %v4_bc7c, %v4_bc70
  store i32 %v5_bc7c, i32* %r2.global-to-local, align 4
  store i32 %v0_bc70, i32* %r0.global-to-local, align 4
  %v0_bc84 = load i32, i32* @sb, align 4
  store i32 %v0_bc84, i32* %r3.global-to-local, align 4
  %v4_bc88 = call i32 @function_de20(i32 %v0_bc70, i32 %v0_bc78, i32 %v5_bc7c, i32 %v0_bc84)
  %v5_bc88 = trunc i32 %v4_bc88 to i8
  store i32 %v4_bc88, i32* %r0.global-to-local, align 4
  %v3_bc8c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_bc9c = mul i32 %v3_bc8c, 24
  %v2_bca0 = add i32 %v5_bc9c, %arg2
  store i32 %v2_bca0, i32* %lr.global-to-local, align 4
  %v4_bca4 = sdiv i32 %v4_bc88, 256
  store i32 %v4_bca4, i32* %r3.global-to-local, align 4
  %v3_bca8 = load i32, i32* @r5, align 4
  %v4_bca8 = add i32 %v3_bca8, 6
  %v5_bca8 = inttoptr i32 %v4_bca8 to i8*
  store i8 %v5_bc88, i8* %v5_bca8, align 1
  %v0_bcac = load i32, i32* %r3.global-to-local, align 4
  %v1_bcac = trunc i32 %v0_bcac to i8
  %v2_bcac = load i32, i32* @r5, align 4
  %v3_bcac = add i32 %v2_bcac, 7
  %v4_bcac = inttoptr i32 %v3_bcac to i8*
  store i8 %v1_bcac, i8* %v4_bcac, align 1
  %v0_bcb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_bcb0 = add i32 %v1_bcb0, 4
  %v3_bcb0 = inttoptr i32 %v2_bcb0 to i32*
  store i32 %v0_bcb0, i32* %v3_bcb0, align 4
  %v0_bcb4 = load i32, i32* @r4, align 4
  %v1_bcb4 = add i32 %v0_bcb4, 20
  %v2_bcb4 = inttoptr i32 %v1_bcb4 to i32*
  %v3_bcb4 = load i32, i32* %v2_bcb4, align 4
  %v3_bcb8 = udiv i32 %v3_bcb4, 65536
  store i32 %v3_bcb8, i32* %r3.global-to-local, align 4
  %v3_bcbc13 = udiv i32 %v3_bcb4, 16777216
  %v1_bcc0 = trunc i32 %v3_bcbc13 to i8
  %v2_bcc0 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcc0 = add i32 %v2_bcc0, 3
  %v4_bcc0 = inttoptr i32 %v3_bcc0 to i8*
  store i8 %v1_bcc0, i8* %v4_bcc0, align 1
  %v0_bcc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcc4 = trunc i32 %v0_bcc4 to i8
  %v2_bcc4 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcc4 = add i32 %v2_bcc4, 2
  %v4_bcc4 = inttoptr i32 %v3_bcc4 to i8*
  store i8 %v1_bcc4, i8* %v4_bcc4, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bcd0 = load i32, i32* @r4, align 4
  store i32 %v0_bcd0, i32* %r1.global-to-local, align 4
  store i32 %v3_b8dc, i32* %r0.global-to-local, align 4
  %v0_bcd8 = load i32, i32* @sl, align 4
  store i32 %v0_bcd8, i32* %r2.global-to-local, align 4
  %v0_bcdc = load i32, i32* %lr.global-to-local, align 4
  %v4_bcdc = inttoptr i32 %v0_bcdc to %sockaddr*
  %v7_bce4 = inttoptr i32 %v0_bcd0 to i32*
  %v9_bce4 = call i32 @sendto(i32 %v3_b8dc, i32* %v7_bce4, i32 %v0_bcd8, i32 16384, %sockaddr* %v4_bcdc, i32 16)
  %v3_bce8 = load i32, i32* %stack_var_-40, align 4
  %v1_bcec = add i32 %v3_bce8, 1
  store i32 %v1_bcec, i32* %r0.global-to-local, align 4
  store i32 %v1_b668, i32* %r3.global-to-local, align 4
  %v9_bcf4 = icmp eq i32 %v1_b668, %v1_bcec
  store i1 %v9_bcf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bcec, i32* %stack_var_-40, align 4
  %v8_bcfc = icmp sgt i32 %v1_b668, %v1_bcec
  br i1 %v8_bcfc, label %dec_label_pc_bc3c.dec_label_pc_bbfc_crit_edge, label %dec_label_pc_bd00

dec_label_pc_bc3c.dec_label_pc_bbfc_crit_edge:    ; preds = %dec_label_pc_bc3c
  %v1_bc08.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bbfc

dec_label_pc_bd00:                                ; preds = %dec_label_pc_bc3c
  store i32 %v1_b668, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bbdc

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bbfc
  %v0_bd10 = call i32 @function_f28c()
  %v1_bd10 = trunc i32 %v0_bd10 to i8
  store i32 %v0_bd10, i32* %r0.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bd18 = sdiv i32 %v0_bd10, 256
  store i32 %v4_bd18, i32* %r3.global-to-local, align 4
  %v1_bd1c = load i32, i32* @r6, align 4
  %v9_bd1c = icmp eq i32 %v3_b940, %v1_bd1c
  store i1 %v9_bd1c, i1* %cpsr_z.global-to-local, align 1
  %v1_bd20 = trunc i32 %v4_bd18 to i8
  %v2_bd20 = load i32, i32* @r4, align 4
  %v3_bd20 = add i32 %v2_bd20, 5
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v3_bd24 = load i32, i32* @r4, align 4
  %v4_bd24 = add i32 %v3_bd24, 4
  %v5_bd24 = inttoptr i32 %v4_bd24 to i8*
  store i8 %v1_bd10, i8* %v5_bd24, align 1
  %v0_bd28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd28, label %dec_label_pc_bd2c, label %dec_label_pc_bd10.dec_label_pc_bc24_crit_edge

dec_label_pc_bd10.dec_label_pc_bc24_crit_edge:    ; preds = %dec_label_pc_bd10
  %v1_bc28.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc24

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd10, %dec_label_pc_bc18
  %v0_bd2c = call i32 @function_f28c()
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  store i32 %v0_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v3_b944, i32* %lr.global-to-local, align 4
  %v4_bd34 = sdiv i32 %v0_bd2c, 256
  store i32 %v4_bd34, i32* %r3.global-to-local, align 4
  %v1_bd38 = load i32, i32* @r6, align 4
  %v9_bd38 = icmp eq i32 %v3_b944, %v1_bd38
  store i1 %v9_bd38, i1* %cpsr_z.global-to-local, align 1
  %v3_bd3c = load i32, i32* @r4, align 4
  %v4_bd3c = add i32 %v3_bd3c, 20
  %v5_bd3c = inttoptr i32 %v4_bd3c to i8*
  store i8 %v1_bd2c, i8* %v5_bd3c, align 1
  %v0_bd40 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd40 = trunc i32 %v0_bd40 to i8
  %v2_bd40 = load i32, i32* @r5, align 4
  %v3_bd40 = add i32 %v2_bd40, 1
  %v4_bd40 = inttoptr i32 %v3_bd40 to i8*
  store i8 %v1_bd40, i8* %v4_bd40, align 1
  %v0_bd44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd44, label %dec_label_pc_bd48, label %dec_label_pc_bd2c.dec_label_pc_bc30_crit_edge

dec_label_pc_bd2c.dec_label_pc_bc30_crit_edge:    ; preds = %dec_label_pc_bd2c
  %v1_bc34.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc30

dec_label_pc_bd48:                                ; preds = %dec_label_pc_bd2c, %dec_label_pc_bc24
  %v0_bd48 = call i32 @function_f28c()
  %v1_bd48 = trunc i32 %v0_bd48 to i8
  %v4_bd4c = sdiv i32 %v0_bd48, 256
  store i32 %v4_bd4c, i32* %r3.global-to-local, align 4
  %v3_bd50 = load i32, i32* @r5, align 4
  %v4_bd50 = add i32 %v3_bd50, 2
  %v5_bd50 = inttoptr i32 %v4_bd50 to i8*
  store i8 %v1_bd48, i8* %v5_bd50, align 1
  store i32 %v3_b948, i32* %r0.global-to-local, align 4
  %v1_bd58 = load i32, i32* @r6, align 4
  %v9_bd58 = icmp eq i32 %v3_b948, %v1_bd58
  store i1 %v9_bd58, i1* %cpsr_z.global-to-local, align 1
  %v0_bd5c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  %v2_bd5c = load i32, i32* @r5, align 4
  %v3_bd5c = add i32 %v2_bd5c, 3
  %v4_bd5c = inttoptr i32 %v3_bd5c to i8*
  store i8 %v1_bd5c, i8* %v4_bd5c, align 1
  %v0_bd60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd60, label %dec_label_pc_bd64, label %dec_label_pc_bc3c

dec_label_pc_bd64:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bc30
  %v0_bd64 = call i32 @function_f28c()
  %v1_bd64 = trunc i32 %v0_bd64 to i8
  store i32 %v0_bd64, i32* %r0.global-to-local, align 4
  %v4_bd68 = sdiv i32 %v0_bd64, 256
  store i32 %v4_bd68, i32* %r3.global-to-local, align 4
  %v3_bd6c = load i32, i32* @r4, align 4
  %v4_bd6c = add i32 %v3_bd6c, 28
  %v5_bd6c = inttoptr i32 %v4_bd6c to i8*
  store i8 %v1_bd64, i8* %v5_bd6c, align 1
  %v0_bd70 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd70 = trunc i32 %v0_bd70 to i8
  %v2_bd70 = load i32, i32* @r8, align 4
  %v3_bd70 = add i32 %v2_bd70, 1
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  br label %dec_label_pc_bc3c

dec_label_pc_bd78:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b810, %dec_label_pc_b7b4, %dec_label_pc_b65c
  %v0_bd78 = call i32 @function_f28c()
  %v1_bd7c = urem i32 %v0_bd78, 4
  store i32 %v1_bd7c, i32* %r0.global-to-local, align 4
  %v2_bd80 = icmp eq i32 %v1_bd7c, 3
  store i1 %v2_bd80, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bd78 to i2
  switch i2 %trunc, label %dec_label_pc_b8b821 [
    i2 0, label %dec_label_pc_bdc0
    i2 1, label %dec_label_pc_bdd4
    i2 -2, label %dec_label_pc_bde0
    i2 -1, label %dec_label_pc_bdf0
  ]

dec_label_pc_bd9c:                                ; preds = %dec_label_pc_b918
  store i32 %v2_b8c8, i32* %r0.global-to-local, align 4
  %v4_bda0 = sext i8 %v5_b934 to i32
  store i32 %v4_bda0, i32* %r1.global-to-local, align 4
  %v2_bda4 = add i32 %v4_bda0, %v2_b8c8
  store i32 %v2_bda4, i32* @fp, align 4
  br label %dec_label_pc_bbd0

dec_label_pc_bdac:                                ; preds = %dec_label_pc_b8ec
  store i32 %v3_b8dc, i32* %r0.global-to-local, align 4
  %v1_bdb0 = call i32 @close(i32 %v3_b8dc)
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdb4

dec_label_pc_bdb4:                                ; preds = %dec_label_pc_b8c4, %dec_label_pc_b8b8, %dec_label_pc_bdac
  %v29_bdbc = phi i32 [ -1, %dec_label_pc_b8c4 ], [ %v29_bdbc75, %dec_label_pc_b8b8 ], [ %v1_bdb0, %dec_label_pc_bdac ]
  store i32 %v3_b65c, i32* %r4.global-to-local, align 4
  store i32 %v6_b65c, i32* %r5.global-to-local, align 4
  store i32 %v9_b65c, i32* %r6.global-to-local, align 4
  store i32 %v12_b65c, i32* %r7.global-to-local, align 4
  store i32 %v15_b65c, i32* %r8.global-to-local, align 4
  store i32 %v18_b65c, i32* %sb.global-to-local, align 4
  store i32 %v21_b65c, i32* %sl.global-to-local, align 4
  store i32 %v24_b65c, i32* %fp.global-to-local, align 4
  ret i32 %v29_bdbc

dec_label_pc_bdc0:                                ; preds = %dec_label_pc_bd78
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b8b8

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_bd78
  store i32 707416650, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b8b8

dec_label_pc_bde0:                                ; preds = %dec_label_pc_bd78
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b8b8

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_bd78
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8b8

; uselistorder directives
  uselistorder i32 %v4_bda0, { 0, 2, 1 }
  uselistorder i32 %v1_bd7c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_bd78, { 1, 0 }
  uselistorder i32 %v0_bd64, { 0, 2, 1 }
  uselistorder i32 %v0_bd2c, { 0, 2, 1 }
  uselistorder i32 %v4_bd18, { 1, 0 }
  uselistorder i32 %v0_bd10, { 0, 2, 1 }
  uselistorder i32 %v1_bcec, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_bc88, { 0, 2, 1 }
  uselistorder i32 %v0_bc70, { 1, 0, 2, 3 }
  uselistorder i32 %v4_bc5c, { 1, 0 }
  uselistorder i32 %v2_bc58, { 0, 2, 1 }
  uselistorder i32 %v7_bc04, { 1, 0, 2 }
  uselistorder i32 %v4_bc40.pre-phi, { 1, 0 }
  uselistorder i32 %v2_bb84, { 1, 0 }
  uselistorder i32 %v1_bb7887, { 1, 0, 2 }
  uselistorder i32 %v1_bb6c, { 2, 1, 0 }
  uselistorder i32 %v0_bb6c, { 1, 2, 0 }
  uselistorder i32 %v0_bb6c33, { 1, 0 }
  uselistorder i32 %v1_bb6c34, { 2, 0, 1 }
  uselistorder i8 %extract.t79, { 1, 0 }
  uselistorder i32 %v1_bb40, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_babc, { 1, 0 }
  uselistorder i32 %v3_b9f8, { 1, 0, 2 }
  uselistorder i32 %v1_b9c0, { 1, 0 }
  uselistorder i32 %v1_b9b4, { 1, 0 }
  uselistorder i32 %v1_b998, { 1, 0 }
  uselistorder i32 %v1_b984, { 1, 0 }
  uselistorder i32 %v3_b97c, { 1, 0 }
  uselistorder i32 %v4_b974, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_b934, { 1, 0 }
  uselistorder i32 %v0_b930, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b92c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b924, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_b8dc, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v2_b8c8, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v3_b8b0, { 1, 0, 2 }
  uselistorder i1 %v7_b880, { 1, 0 }
  uselistorder i32 %v1_b87c, { 1, 0, 2 }
  uselistorder i1 %v8_b874, { 1, 0 }
  uselistorder i1 %v7_b870, { 1, 0 }
  uselistorder i32 %v1_b864, { 1, 0 }
  uselistorder i8 %v2_b858, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b85c, { 1, 0 }
  uselistorder i32 %v0_b87c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_b848, { 0, 2, 1 }
  uselistorder i32 %v1_b860, { 0, 2, 1 }
  uselistorder i32 %v2_b830, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_b828, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b810, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v0_b808, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32 %v0_b7ac, { 1, 0, 3, 2 }
  uselistorder i32 %v5_b77c, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_b700, { 1, 0 }
  uselistorder i32 %v7_b6bc, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_b6b8, { 1, 0 }
  uselistorder i32 %v6_b698, { 1, 0 }
  uselistorder i32 %v4_b680, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b668, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %sb.global-to-local, { 5, 0, 1, 4, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 6, 0, 1, 2, 5, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 6, 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 5, 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 37, 38, 39, 40, 41, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 21, 20, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 47, 48, 49, 51, 50, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 40, 41, 42, 43, 44, 45, 46, 27, 28, 29, 31, 30, 33, 32, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 60, 57, 58, 59, 62, 61, 63, 65, 64, 66, 4, 67, 3, 68, 69, 6, 5, 7, 8, 2, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 23, 24, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 1, 51, 52, 53, 55, 54, 56, 27, 26, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %lr.global-to-local, { 22, 26, 23, 24, 25, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %ip.global-to-local, { 21, 22, 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 19, 16, 23, 24, 11 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i8 46, { 1, 0 }
  uselistorder label %dec_label_pc_bdb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bc3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bbdc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bbd0, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_b88c, { 1, 0 }
  uselistorder label %dec_label_pc_b880, { 1, 0 }
  uselistorder label %dec_label_pc_b844, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b83c, { 1, 0 }
}

define i32 @function_be0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_be0c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_be0c = load i32, i32* @r4, align 4
  %v1_be10 = urem i32 %arg1, 256
  store i32 %v1_be10, i32* @fp, align 4
  store i32 %v1_be10, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_be28 = urem i32 %arg3, 256
  store i32 %v1_be28, i32* @r4, align 4
  %v2_be2c = call i32* @calloc(i32 %v1_be10, i32 16)
  %v4_be2c = ptrtoint i32* %v2_be2c to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_be38 = load i32, i32* @fp, align 4
  store i32 %v0_be38, i32* %r0.global-to-local, align 4
  %v2_be3c = call i32* @calloc(i32 %v0_be38, i32 4)
  %v4_be3c = ptrtoint i32* %v2_be3c to i32
  %v0_be40 = load i32, i32* @r5, align 4
  store i32 %v0_be40, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be50 = load i32, i32* @r4, align 4
  store i32 %v0_be50, i32* %r0.global-to-local, align 4
  %v5_be54 = inttoptr i32 %v0_be40 to i32*
  %v6_be54 = call i32 @function_92ac(i32 %v0_be50, i32* %v5_be54, i32 2, i32 0)
  %v1_be60 = urem i32 %v6_be54, 256
  store i32 %v1_be60, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be6c = load i32, i32* @r5, align 4
  store i32 %v0_be6c, i32* %r1.global-to-local, align 4
  %v0_be70 = load i32, i32* @r4, align 4
  store i32 %v0_be70, i32* %r0.global-to-local, align 4
  %v6_be78 = inttoptr i32 %v0_be6c to i32*
  %v7_be78 = call i32 @function_92ac(i32 %v0_be70, i32* %v6_be78, i32 3, i32 65535)
  %v0_be7c = load i32, i32* @r5, align 4
  store i32 %v0_be7c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be78, i32* @r6, align 4
  %v0_be8c = load i32, i32* @r4, align 4
  store i32 %v0_be8c, i32* %r0.global-to-local, align 4
  %v4_be90 = inttoptr i32 %v0_be7c to i32*
  %v5_be90 = call i32 @function_92ac(i32 %v0_be8c, i32* %v4_be90, i32 4, i32 64)
  %v1_be98 = urem i32 %v5_be90, 256
  store i32 %v1_be98, i32* %ip.global-to-local, align 4
  %v0_be9c = load i32, i32* @r5, align 4
  store i32 %v0_be9c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bea8 = load i32, i32* @r4, align 4
  store i32 %v0_bea8, i32* %r0.global-to-local, align 4
  %v6_beb0 = inttoptr i32 %v0_be9c to i32*
  %v7_beb0 = call i32 @function_92ac(i32 %v0_bea8, i32* %v6_beb0, i32 5, i32 1)
  %v1_bebc = urem i32 %v7_beb0, 256
  store i32 %v1_bebc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_bec4 = load i32, i32* @r5, align 4
  store i32 %v0_bec4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_becc = load i32, i32* @r4, align 4
  store i32 %v0_becc, i32* %r0.global-to-local, align 4
  %v5_bed4 = inttoptr i32 %v0_bec4 to i32*
  %v6_bed4 = call i32 @function_92ac(i32 %v0_becc, i32* %v5_bed4, i32 7, i32 65535)
  %v0_bed8 = load i32, i32* @r5, align 4
  store i32 %v0_bed8, i32* %r1.global-to-local, align 4
  %v3_bedc = mul i32 %v6_bed4, 65536
  store i32 %v3_bedc, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bee8 = load i32, i32* @r4, align 4
  store i32 %v0_bee8, i32* %r0.global-to-local, align 4
  %v4_beec = inttoptr i32 %v0_bed8 to i32*
  %v5_beec = call i32 @function_92ac(i32 %v0_bee8, i32* %v4_beec, i32 11, i32 1)
  %v1_bef4 = urem i32 %v5_beec, 256
  store i32 %v1_bef4, i32* %ip.global-to-local, align 4
  %v0_bef8 = load i32, i32* @r5, align 4
  store i32 %v0_bef8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r0.global-to-local, align 4
  %v5_bf0c = inttoptr i32 %v0_bef8 to i32*
  %v6_bf0c = call i32 @function_92ac(i32 %v0_bf04, i32* %v5_bf0c, i32 12, i32 1)
  %v1_bf14 = urem i32 %v6_bf0c, 256
  store i32 %v1_bf14, i32* %ip.global-to-local, align 4
  %v0_bf18 = load i32, i32* @r5, align 4
  store i32 %v0_bf18, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r4, align 4
  store i32 %v0_bf24, i32* %r0.global-to-local, align 4
  %v5_bf2c = inttoptr i32 %v0_bf18 to i32*
  %v6_bf2c = call i32 @function_92ac(i32 %v0_bf24, i32* %v5_bf2c, i32 13, i32 1)
  %v1_bf34 = urem i32 %v6_bf2c, 256
  store i32 %v1_bf34, i32* %ip.global-to-local, align 4
  %v0_bf38 = load i32, i32* @r5, align 4
  store i32 %v0_bf38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf44 = load i32, i32* @r4, align 4
  store i32 %v0_bf44, i32* %r0.global-to-local, align 4
  %v5_bf4c = inttoptr i32 %v0_bf38 to i32*
  %v6_bf4c = call i32 @function_92ac(i32 %v0_bf44, i32* %v5_bf4c, i32 14, i32 1)
  %v1_bf54 = urem i32 %v6_bf4c, 256
  store i32 %v1_bf54, i32* %ip.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r5, align 4
  store i32 %v0_bf58, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r4, align 4
  store i32 %v0_bf64, i32* %r0.global-to-local, align 4
  %v5_bf6c = inttoptr i32 %v0_bf58 to i32*
  %v6_bf6c = call i32 @function_92ac(i32 %v0_bf64, i32* %v5_bf6c, i32 15, i32 1)
  %v1_bf74 = urem i32 %v6_bf6c, 256
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  %v0_bf78 = load i32, i32* @r5, align 4
  store i32 %v0_bf78, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r4, align 4
  store i32 %v0_bf84, i32* %r0.global-to-local, align 4
  %v5_bf8c = inttoptr i32 %v0_bf78 to i32*
  %v6_bf8c = call i32 @function_92ac(i32 %v0_bf84, i32* %v5_bf8c, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bf8c, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bf9c = load i32, i32* @r5, align 4
  store i32 %v0_bf9c, i32* %r1.global-to-local, align 4
  %v0_bfa0 = load i32, i32* @r4, align 4
  store i32 %v0_bfa0, i32* %r0.global-to-local, align 4
  %v1_bfa4 = urem i32 %v6_bf8c, 256
  store i32 %v1_bfa4, i32* @r8, align 4
  %v4_bfa8 = inttoptr i32 %v0_bf9c to i32*
  %v5_bfa8 = call i32 @function_92ac(i32 %v0_bfa0, i32* %v4_bfa8, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r5, align 4
  store i32 %v0_bfb4, i32* %r1.global-to-local, align 4
  store i32 %v5_bfa8, i32* @sb, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  store i32 %v0_bfbc, i32* %r0.global-to-local, align 4
  %v4_bfc0 = inttoptr i32 %v0_bfb4 to i32*
  %v5_bfc0 = call i32 @function_92ac(i32 %v0_bfbc, i32* %v4_bfc0, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bfcc = urem i32 %v5_bfc0, 256
  store i32 %v1_bfcc, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bfdc = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r7, align 4
  %v3_bfe0 = udiv i32 %v0_bfe0, 65536
  store i32 %v3_bfe0, i32* %r1.global-to-local, align 4
  %v2_bfe4 = icmp eq i32 %v3_bfdc, -1
  store i1 %v2_bfe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bfe4, label %dec_label_pc_c268, label %dec_label_pc_bff4

dec_label_pc_bff4:                                ; preds = %dec_label_pc_be0c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bffc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bffc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c010 = call i32 @setsockopt(i32 %v3_bfdc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c010, i32* %r0.global-to-local, align 4
  %v2_c014 = icmp eq i32 %v7_c010, -1
  store i1 %v2_c014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c014, label %dec_label_pc_c260, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bff4
  %v0_c01c = load i32, i32* @fp, align 4
  %v2_c01c = icmp eq i32 %v0_c01c, 0
  store i1 %v2_c01c, i1* %cpsr_z.global-to-local, align 1
  %v0_c020 = load i32, i32* @r6, align 4
  %v3_c020 = mul i32 %v0_c020, 65536
  store i32 %v3_c020, i32* %r0.global-to-local, align 4
  %v3_c024 = urem i32 %v0_c020, 65536
  store i32 %v3_c024, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c01c, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c048.preheader

.thread27:                                        ; preds = %dec_label_pc_c01c
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c4e8

dec_label_pc_c048.preheader:                      ; preds = %dec_label_pc_c01c
  %v5_c02c = load i32, i32* @r7, align 4
  %v8_c02c = udiv i32 %v5_c02c, 16777216
  %tmp86 = udiv i32 %v0_c020, 256
  %v8_c030 = urem i32 %tmp86, 256
  store i32 %v8_c030, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c054 = urem i32 %v0_c020, 256
  %v3_c140 = icmp ugt i32 %v0_bfe0, -65537
  %v2_c164 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_c180 = mul nuw nsw i32 %v1_c054, 256
  %v5_c180 = or i32 %v8_c030, %v4_c180
  %sext11 = mul i32 %tmp86, 16777216
  %v4_c18c = sdiv i32 %sext11, 16777216
  %v3_c194 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_c1c4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_c1c8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_c210 = zext i8 %tmp41 to i32
  %v4_c214 = zext i8 %tmp40 to i32
  %v4_c220 = mul nuw nsw i32 %v4_c214, 256
  %v4_c230 = zext i8 %tmp to i32
  %v1_c234 = and i32 %v4_c230, 18
  %v2_c238 = icmp eq i32 %v1_c234, 18
  %v1_c150 = mul nuw nsw i32 %v3_bfe0, 256
  %v4_c154 = and i32 %v1_c150, 65280
  %v5_c154 = or i32 %v8_c02c, %v4_c154
  %v3_c158113 = udiv i32 %v4_c154, 256
  %v1_c15c = trunc i32 %v3_c158113 to i8
  %sext = mul i32 %v6_be54, 16777216
  %v4_c35c = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_be90, 16777216
  %v4_c370 = sdiv i32 %sext9, 16777216
  %v5_c220 = or i32 %v4_c210, %v4_c220
  %v1_c240 = and i32 %v4_c230, 5
  %v2_c240 = icmp eq i32 %v1_c240, 0
  %v1_c160 = trunc i32 %v8_c02c to i8
  %v1_c36c = trunc i32 %v4_c35c to i8
  %v1_c438 = urem i32 %v5_beec, 2
  %tmp114 = sub nsw i32 0, %v1_c438
  %v4_c440 = and i32 %tmp114, 32
  %v1_c450 = urem i32 %v6_bf0c, 2
  %tmp115 = sub nsw i32 0, %v1_c450
  %v4_c458 = and i32 %tmp115, 16
  %v1_c468 = urem i32 %v6_bf2c, 2
  %tmp116 = sub nsw i32 0, %v1_c468
  %v4_c470 = and i32 %tmp116, 8
  %v1_c480 = urem i32 %v6_bf4c, 2
  %tmp117 = sub nsw i32 0, %v1_c480
  %v4_c488 = and i32 %tmp117, 4
  %v1_c498 = urem i32 %v6_bf6c, 2
  %tmp118 = sub nsw i32 0, %v1_c498
  %v3_c4a0 = and i32 %tmp118, 2
  br label %dec_label_pc_c048

dec_label_pc_c048:                                ; preds = %dec_label_pc_c4d4, %dec_label_pc_c248, %dec_label_pc_c048.preheader
  store i32 %v8_c030, i32* %r3.global-to-local, align 4
  store i32 %v1_c054, i32* %ip.global-to-local, align 4
  %v0_c060 = load i32, i32* @sb, align 4
  %v1_c060 = add i32 %v0_c060, 40
  store i32 %v1_c060, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c070107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c070107, i32* %r0.global-to-local, align 4
  %v2_c074108 = icmp eq i32 %v3_c070107, -1
  store i1 %v2_c074108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c070107, i32* @r7, align 4
  br i1 %v2_c074108, label %dec_label_pc_c4d4, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_c048, %dec_label_pc_c254
  %v3_c070109 = phi i32 [ %v3_c070, %dec_label_pc_c254 ], [ %v3_c070107, %dec_label_pc_c048 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c088 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c070109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c090 = or i32 %v2_c088, 2048
  store i32 %v1_c090, i32* %r2.global-to-local, align 4
  %v0_c094 = load i32, i32* @r7, align 4
  store i32 %v0_c094, i32* %r0.global-to-local, align 4
  %v2_c098 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c094, i32 4)
  %v3_c09c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c09c, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c0b8 = mul i32 %v3_c09c, 24
  store i32 %v5_c0b8, i32* %r1.global-to-local, align 4
  %v2_c0bc = add i32 %v5_c0b8, %arg2
  store i32 %v2_c0bc, i32* %r2.global-to-local, align 4
  %v1_c0c0 = add i32 %v2_c0bc, 20
  %v2_c0c0 = inttoptr i32 %v1_c0c0 to i8*
  %v3_c0c0 = load i8, i8* %v2_c0c0, align 1
  %v4_c0c0 = zext i8 %v3_c0c0 to i32
  store i32 %v4_c0c0, i32* %r3.global-to-local, align 4
  %v2_c0c4 = icmp ugt i8 %v3_c0c0, 30
  %v7_c0c4 = icmp eq i8 %v3_c0c0, 31
  store i1 %v7_c0c4, i1* %cpsr_z.global-to-local, align 1
  %v2_c0c8 = xor i1 %v7_c0c4, true
  %v3_c0c8 = and i1 %v2_c0c4, %v2_c0c8
  %v5_c0c8 = add i32 %v2_c0bc, 16
  %v6_c0c8 = inttoptr i32 %v5_c0c8 to i32*
  %v7_c0c8 = load i32, i32* %v6_c0c8, align 4
  br i1 %v3_c0c8, label %dec_label_pc_c134, label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c080
  store i32 %v7_c0c8, i32* %r4.global-to-local, align 4
  %v0_c0d8 = call i32 @function_f28c()
  store i32 %v0_c0d8, i32* %r0.global-to-local, align 4
  %v3_c0dc = load i32, i32* %stack_var_-40, align 4
  %v5_c0e4 = mul i32 %v3_c0dc, 24
  %v2_c0f0 = add i32 %v5_c0e4, %arg2
  store i32 %v2_c0f0, i32* %r1.global-to-local, align 4
  %v1_c0ec = udiv i32 %v7_c0c8, 256
  %v3_c0f4 = and i32 %v1_c0ec, 65280
  store i32 %v3_c0f4, i32* %r2.global-to-local, align 4
  %v1_c0f8 = and i32 %v7_c0c8, 65280
  store i32 %v1_c0f8, i32* %r3.global-to-local, align 4
  %v3_c0fc = mul i32 %v7_c0c8, 16777216
  store i32 %v3_c0fc, i32* %ip.global-to-local, align 4
  %v1_c100 = add i32 %v2_c0f0, 20
  %v2_c100 = inttoptr i32 %v1_c100 to i8*
  %v3_c100 = load i8, i8* %v2_c100, align 1
  %v4_c100 = zext i8 %v3_c100 to i32
  store i32 %v4_c100, i32* %lr.global-to-local, align 4
  %v4_c104 = mul nuw nsw i32 %v1_c0f8, 256
  %v5_c104 = or i32 %v4_c104, %v3_c0fc
  store i32 %v5_c104, i32* %ip.global-to-local, align 4
  %v2_c10c = call i32 @llvm.bswap.i32(i32 %v7_c0c8)
  %v7_c110 = lshr i32 %v0_c0d8, %v4_c100
  %v8_c110 = add i32 %v7_c110, %v2_c10c
  store i32 %v8_c110, i32* %r2.global-to-local, align 4
  %v3_c11c = mul i32 %v8_c110, 16777216
  %v1_c120 = and i32 %v8_c110, 65280
  store i32 %v1_c120, i32* %r0.global-to-local, align 4
  %v4_c124 = mul nuw nsw i32 %v1_c120, 256
  %v5_c124 = or i32 %v4_c124, %v3_c11c
  store i32 %v5_c124, i32* %r1.global-to-local, align 4
  %v2_c12c = call i32 @llvm.bswap.i32(i32 %v8_c110)
  br label %dec_label_pc_c134

dec_label_pc_c134:                                ; preds = %dec_label_pc_c080, %dec_label_pc_c0d4
  %storemerge35 = phi i32 [ %v2_c12c, %dec_label_pc_c0d4 ], [ %v7_c0c8, %dec_label_pc_c080 ]
  store i32 %v3_bfe0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c140, label %dec_label_pc_c270, label %dec_label_pc_c148

dec_label_pc_c148:                                ; preds = %dec_label_pc_c134
  store i32 %v3_bfe0, i32* %r0.global-to-local, align 4
  store i32 %v8_c02c, i32* %r1.global-to-local, align 4
  store i32 %v5_c154, i32* %r3.global-to-local, align 4
  store i32 %v3_c158113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c270, %dec_label_pc_c148
  %stack_var_-57.0 = phi i8 [ %v1_c278, %dec_label_pc_c270 ], [ %v1_c15c, %dec_label_pc_c148 ]
  %storemerge = phi i8 [ %v1_c270, %dec_label_pc_c270 ], [ %v1_c160, %dec_label_pc_c148 ]
  store i32 %v2_c164, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c16c = load i32, i32* @r7, align 4
  store i32 %v0_c16c, i32* %r0.global-to-local, align 4
  %v5_c170 = call i32 @connect(i32 %v0_c16c, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_c180, i32* %r2.global-to-local, align 4
  %v2_c188 = call i32 @time(i32* null)
  store i32 %v2_c188, i32* %r0.global-to-local, align 4
  store i32 %v2_c188, i32* %r4.global-to-local, align 4
  store i32 %v3_c194, i32* %ip.global-to-local, align 4
  %v9_c1f4 = icmp eq i32 %tmp42, %storemerge35
  %v4_c218 = zext i8 %storemerge to i32
  %v4_c21c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c1f4 to i32
  %v9_c208 = icmp eq i1 %v9_c1f4, false
  %v4_c224 = mul nuw nsw i32 %v4_c21c, 256
  %v5_c224 = or i32 %v4_c224, %v4_c218
  %v9_c228 = icmp eq i32 %v5_c224, %v5_c220
  br label %dec_label_pc_c1b0

dec_label_pc_c1a0:                                ; preds = %.thread33, %dec_label_pc_c210, %dec_label_pc_c240, %bb90
  %v2_c1a0 = call i32 @time(i32* null)
  %v0_c1a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c1a4 = sub i32 %v2_c1a0, %v0_c1a4
  store i32 %v2_c1a4, i32* %r0.global-to-local, align 4
  %v7_c1a8 = icmp eq i32 %v2_c1a4, 10
  store i1 %v7_c1a8, i1* %cpsr_z.global-to-local, align 1
  %v8_c1ac = icmp sgt i32 %v2_c1a4, 10
  br i1 %v8_c1ac, label %dec_label_pc_c254, label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %dec_label_pc_c1a0, %dec_label_pc_c164
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_c1c4, i32* %r1.global-to-local, align 4
  store i32 %v2_c1c8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  %v10_c1d8 = call i32 @recvfrom(i32 %v3_bfdc, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_c1d8, i32* %r2.global-to-local, align 4
  %v2_c1e0 = icmp eq i32 %v10_c1d8, -1
  store i1 %v2_c1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_c1e0, label %dec_label_pc_c268, label %dec_label_pc_c1ec

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c1b0
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c200 = icmp eq i32 %v10_c1d8, 40
  store i1 %v7_c200, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_c1d8, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_c1ec
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c1a0

bb90:                                             ; preds = %dec_label_pc_c1ec
  store i1 %v9_c208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c208, label %dec_label_pc_c1a0, label %dec_label_pc_c210

dec_label_pc_c210:                                ; preds = %bb90
  store i32 %v4_c214, i32* %r1.global-to-local, align 4
  store i32 %v4_c218, i32* %ip.global-to-local, align 4
  store i32 %v4_c21c, i32* %r2.global-to-local, align 4
  store i32 %v5_c220, i32* %r3.global-to-local, align 4
  store i32 %v5_c224, i32* @r5, align 4
  store i1 %v9_c228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c228, label %dec_label_pc_c230, label %dec_label_pc_c1a0

dec_label_pc_c230:                                ; preds = %dec_label_pc_c210
  store i32 %v4_c230, i32* %r2.global-to-local, align 4
  store i32 %v1_c234, i32* %r3.global-to-local, align 4
  store i1 %v2_c238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c238, label %dec_label_pc_c284, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %dec_label_pc_c230
  store i1 %v2_c240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c240, label %dec_label_pc_c1a0, label %dec_label_pc_c248

dec_label_pc_c248:                                ; preds = %dec_label_pc_c240
  %v0_c248 = load i32, i32* @r7, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v1_c24c = call i32 @close(i32 %v0_c248)
  store i32 %v1_c24c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c048

dec_label_pc_c254:                                ; preds = %dec_label_pc_c1a0
  %v0_c254 = load i32, i32* @r7, align 4
  store i32 %v0_c254, i32* %r0.global-to-local, align 4
  %v1_c258 = call i32 @close(i32 %v0_c254)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c070 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c070, i32* %r0.global-to-local, align 4
  %v2_c074 = icmp eq i32 %v3_c070, -1
  store i1 %v2_c074, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c070, i32* @r7, align 4
  br i1 %v2_c074, label %dec_label_pc_c4d4, label %dec_label_pc_c080

dec_label_pc_c260:                                ; preds = %dec_label_pc_bff4
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  %v1_c264 = call i32 @close(i32 %v3_bfdc)
  store i32 %v1_c264, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c268

dec_label_pc_c268:                                ; preds = %dec_label_pc_c1b0, %dec_label_pc_be0c, %dec_label_pc_c260
  %v29_c26c = phi i32 [ -1, %dec_label_pc_be0c ], [ %v1_c264, %dec_label_pc_c260 ], [ 0, %dec_label_pc_c1b0 ]
  store i32 %v3_be0c, i32* %r4.global-to-local, align 4
  ret i32 %v29_c26c

dec_label_pc_c270:                                ; preds = %dec_label_pc_c134
  %v0_c270 = call i32 @function_f28c()
  %v1_c270 = trunc i32 %v0_c270 to i8
  store i32 %v0_c270, i32* %r0.global-to-local, align 4
  %v4_c274 = sdiv i32 %v0_c270, 256
  store i32 %v4_c274, i32* %r3.global-to-local, align 4
  %v1_c278 = trunc i32 %v4_c274 to i8
  br label %dec_label_pc_c164

dec_label_pc_c284:                                ; preds = %dec_label_pc_c230
  %v3_c284 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c284, i32* %r4.global-to-local, align 4
  store i32 %v4_be2c, i32* %r2.global-to-local, align 4
  %v3_c28c = mul i32 %v3_c284, 16
  store i32 %v3_c28c, i32* %ip.global-to-local, align 4
  %v3_c290 = add i32 %v3_c28c, %v4_be2c
  %v4_c290 = inttoptr i32 %v3_c290 to i32*
  store i32 %storemerge35, i32* %v4_c290, align 4
  %v0_c294 = load i32, i32* @r6, align 4
  %v1_c294 = add i32 %v0_c294, 4
  %v2_c294 = inttoptr i32 %v1_c294 to i32*
  %v3_c294 = load i32, i32* %v2_c294, align 4
  %v1_c2a0 = and i32 %v3_c294, 65280
  store i32 %v1_c2a0, i32* %r1.global-to-local, align 4
  %v3_c2a4 = mul i32 %v3_c294, 16777216
  store i32 %v4_be2c, i32* %r0.global-to-local, align 4
  %v4_c2b0 = mul nuw nsw i32 %v1_c2a0, 256
  %v5_c2b0 = or i32 %v4_c2b0, %v3_c2a4
  store i32 %v5_c2b0, i32* %r2.global-to-local, align 4
  %v1_c2b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c2b4 = add i32 %v1_c2b4, %v4_be2c
  store i32 %v2_c2b4, i32* %ip.global-to-local, align 4
  %v2_c2b8 = call i32 @llvm.bswap.i32(i32 %v3_c294)
  store i32 %v2_c2b8, i32* %r3.global-to-local, align 4
  %v2_c2bc = add i32 %v2_c2b4, 4
  %v3_c2bc = inttoptr i32 %v2_c2bc to i32*
  store i32 %v2_c2b8, i32* %v3_c2bc, align 4
  %v0_c2c0 = load i32, i32* @r6, align 4
  %v1_c2c0 = add i32 %v0_c2c0, 8
  %v2_c2c0 = inttoptr i32 %v1_c2c0 to i32*
  %v3_c2c0 = load i32, i32* %v2_c2c0, align 4
  store i32 %v3_c2c0, i32* %r0.global-to-local, align 4
  %v1_c2c8 = and i32 %v3_c2c0, 65280
  store i32 %v1_c2c8, i32* %r1.global-to-local, align 4
  %v3_c2cc = mul i32 %v3_c2c0, 16777216
  %v4_c2d4 = mul nuw nsw i32 %v1_c2c8, 256
  %v5_c2d4 = or i32 %v4_c2d4, %v3_c2cc
  store i32 %v5_c2d4, i32* %r2.global-to-local, align 4
  %v2_c2dc = call i32 @llvm.bswap.i32(i32 %v3_c2c0)
  store i32 %v2_c2dc, i32* %r3.global-to-local, align 4
  %v1_c2e0 = load i32, i32* %ip.global-to-local, align 4
  %v2_c2e0 = add i32 %v1_c2e0, 8
  %v3_c2e0 = inttoptr i32 %v2_c2e0 to i32*
  store i32 %v2_c2dc, i32* %v3_c2e0, align 4
  %v0_c2e4 = load i32, i32* @r6, align 4
  %v1_c2e4 = inttoptr i32 %v0_c2e4 to i32*
  %v2_c2e4 = load i32, i32* %v1_c2e4, align 4
  %v3_c2e8 = udiv i32 %v2_c2e4, 65536
  store i32 %v3_c2e8, i32* %r2.global-to-local, align 4
  %v3_c2ec6 = udiv i32 %v2_c2e4, 16777216
  store i32 %v3_c2ec6, i32* %r1.global-to-local, align 4
  %v0_c2f0 = load i32, i32* @r5, align 4
  %v3_c2f0 = sdiv i32 %v0_c2f0, 256
  store i32 %v3_c2f0, i32* %r3.global-to-local, align 4
  %v1_c2f4 = trunc i32 %v3_c2f0 to i8
  %v2_c2f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c2f4 = add i32 %v2_c2f4, 15
  %v4_c2f4 = inttoptr i32 %v3_c2f4 to i8*
  store i8 %v1_c2f4, i8* %v4_c2f4, align 1
  %v0_c2f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2f8 = trunc i32 %v0_c2f8 to i8
  %v2_c2f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c2f8 = add i32 %v2_c2f8, 13
  %v4_c2f8 = inttoptr i32 %v3_c2f8 to i8*
  store i8 %v1_c2f8, i8* %v4_c2f8, align 1
  %v0_c2fc = load i32, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v0_c2fc to i8
  %v2_c2fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c2fc = add i32 %v2_c2fc, 12
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v0_c300 = load i32, i32* @r5, align 4
  %v1_c300 = trunc i32 %v0_c300 to i8
  %v2_c300 = load i32, i32* %ip.global-to-local, align 4
  %v3_c300 = add i32 %v2_c300, 14
  %v4_c300 = inttoptr i32 %v3_c300 to i8*
  store i8 %v1_c300, i8* %v4_c300, align 1
  %v0_c304 = load i32, i32* @sl, align 4
  store i32 %v0_c304, i32* %r0.global-to-local, align 4
  %v1_c308 = call i32* @malloc(i32 %v0_c304)
  %v3_c308 = ptrtoint i32* %v1_c308 to i32
  store i32 %v3_c308, i32* %r0.global-to-local, align 4
  store i32 %v4_be3c, i32* %r1.global-to-local, align 4
  %v3_c310 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c310, i32* %r2.global-to-local, align 4
  %v2_c314 = load i32, i32* %r4.global-to-local, align 4
  %v5_c314 = mul i32 %v2_c314, 4
  %v6_c314 = add i32 %v5_c314, %v4_be3c
  %v7_c314 = inttoptr i32 %v6_c314 to i32*
  store i32 %v3_c308, i32* %v7_c314, align 4
  %v0_c318 = load i32, i32* %r1.global-to-local, align 4
  %v1_c318 = load i32, i32* %r2.global-to-local, align 4
  %v4_c318 = mul i32 %v1_c318, 4
  %v5_c318 = add i32 %v4_c318, %v0_c318
  %v6_c318 = inttoptr i32 %v5_c318 to i32*
  %v7_c318 = load i32, i32* %v6_c318, align 4
  store i32 %v7_c318, i32* @r4, align 4
  %v1_c31c = inttoptr i32 %v7_c318 to i8*
  %v2_c31c = load i8, i8* %v1_c31c, align 1
  %tmp120 = urem i8 %v2_c31c, 16
  %v1_c320 = zext i8 %tmp120 to i32
  %v1_c324 = or i32 %v1_c320, 64
  store i32 %v1_c324, i32* %r3.global-to-local, align 4
  %v1_c328 = trunc i32 %v1_c324 to i8
  store i8 %v1_c328, i8* %v1_c31c, align 1
  %v0_c32c = load i32, i32* @sl, align 4
  %v3_c32c = mul i32 %v0_c32c, 65536
  store i32 %v3_c32c, i32* %r2.global-to-local, align 4
  %v0_c330 = load i32, i32* @r4, align 4
  %v1_c330 = inttoptr i32 %v0_c330 to i8*
  %v2_c330 = load i8, i8* %v1_c330, align 1
  %v1_c338 = urem i32 %v0_c32c, 256
  %tmp91 = udiv i32 %v0_c32c, 256
  %v3_c33c = urem i32 %tmp91, 256
  %v1_c340 = and i8 %v2_c330, -16
  %v4_c344 = mul nuw nsw i32 %v1_c338, 256
  %v5_c344 = or i32 %v4_c344, %v3_c33c
  store i32 %v5_c344, i32* %r2.global-to-local, align 4
  %v1_c348 = or i8 %v1_c340, 5
  store i32 %v1_bebc, i32* %ip.global-to-local, align 4
  store i32 %v1_c338, i32* %r3.global-to-local, align 4
  store i8 %v1_c348, i8* %v1_c330, align 1
  %v0_c358 = load i32, i32* %r3.global-to-local, align 4
  %v1_c358 = trunc i32 %v0_c358 to i8
  %v2_c358 = load i32, i32* @r4, align 4
  %v3_c358 = add i32 %v2_c358, 3
  %v4_c358 = inttoptr i32 %v3_c358 to i8*
  store i8 %v1_c358, i8* %v4_c358, align 1
  store i32 %v4_c35c, i32* %r3.global-to-local, align 4
  %v0_c360 = load i32, i32* %ip.global-to-local, align 4
  %v2_c360 = icmp eq i32 %v0_c360, 0
  store i1 %v2_c360, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c18c, i32* %r0.global-to-local, align 4
  store i32 %v3_c194, i32* %r1.global-to-local, align 4
  %v2_c36c = load i32, i32* @r4, align 4
  %v3_c36c = add i32 %v2_c36c, 1
  %v4_c36c = inttoptr i32 %v3_c36c to i8*
  store i8 %v1_c36c, i8* %v4_c36c, align 1
  store i32 %v4_c370, i32* %ip.global-to-local, align 4
  %v0_c374 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c374, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_c284
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_c284, %bb92
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = trunc i32 %v0_c378 to i8
  %v2_c378 = load i32, i32* @r4, align 4
  %v3_c378 = add i32 %v2_c378, 2
  %v4_c378 = inttoptr i32 %v3_c378 to i8*
  store i8 %v1_c378, i8* %v4_c378, align 1
  %v0_c37c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c37c, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_c37c = load i32, i32* %r3.global-to-local, align 4
  %v2_c37c = trunc i32 %v1_c37c to i8
  %v3_c37c = load i32, i32* @r4, align 4
  %v4_c37c = add i32 %v3_c37c, 6
  %v5_c37c = inttoptr i32 %v4_c37c to i8*
  store i8 %v2_c37c, i8* %v5_c37c, align 1
  %v0_c380.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c380.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_c388 = load i32, i32* %ip.global-to-local, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r4, align 4
  %v3_c388 = add i32 %v2_c388, 8
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* %r3.global-to-local, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* @r4, align 4
  %v3_c38c = add i32 %v2_c38c, 9
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c390, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_c390 = load i32, i32* %r2.global-to-local, align 4
  %v2_c390 = trunc i32 %v1_c390 to i8
  %v3_c390 = load i32, i32* @r4, align 4
  %v4_c390 = add i32 %v3_c390, 7
  %v5_c390 = inttoptr i32 %v4_c390 to i8*
  store i8 %v2_c390, i8* %v5_c390, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_c398 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_c398, i32* %r3.global-to-local, align 4
  %v1_c39c = load i32, i32* @r4, align 4
  %v2_c39c = add i32 %v1_c39c, 12
  %v3_c39c = inttoptr i32 %v2_c39c to i32*
  store i32 %v2_c398, i32* %v3_c39c, align 4
  %v0_c3a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* @r4, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 4
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v3_c3a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3a4, i32* %r2.global-to-local, align 4
  store i32 %v4_be2c, i32* %r0.global-to-local, align 4
  %v4_c3ac = mul i32 %v3_c3a4, 16
  %v5_c3ac = add i32 %v4_c3ac, %v4_be2c
  %v6_c3ac = inttoptr i32 %v5_c3ac to i32*
  %v7_c3ac = load i32, i32* %v6_c3ac, align 4
  store i32 %v7_c3ac, i32* %r3.global-to-local, align 4
  %v0_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c3b0 = trunc i32 %v0_c3b0 to i8
  %v2_c3b0 = load i32, i32* @r4, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 5
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v1_c3b0, i8* %v4_c3b0, align 1
  %v0_c3b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3b4 = load i32, i32* @r4, align 4
  %v2_c3b4 = add i32 %v1_c3b4, 16
  %v3_c3b4 = inttoptr i32 %v2_c3b4 to i32*
  store i32 %v0_c3b4, i32* %v3_c3b4, align 4
  %v0_c3b8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c3b8 = mul i32 %v0_c3b8, 16
  %v1_c3bc = load i32, i32* %r0.global-to-local, align 4
  %v2_c3bc = add i32 %v1_c3bc, %v3_c3b8
  store i32 %v2_c3bc, i32* %r2.global-to-local, align 4
  %v1_c3c0 = add i32 %v2_c3bc, 13
  %v2_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v3_c3c0 = load i8, i8* %v2_c3c0, align 1
  %v4_c3c0 = zext i8 %v3_c3c0 to i32
  store i32 %v4_c3c0, i32* %r1.global-to-local, align 4
  %v1_c3c4 = add i32 %v2_c3bc, 12
  %v2_c3c4 = inttoptr i32 %v1_c3c4 to i8*
  %v3_c3c4 = load i8, i8* %v2_c3c4, align 1
  %v4_c3c4 = zext i8 %v3_c3c4 to i32
  %v4_c3c8 = mul nuw nsw i32 %v4_c3c0, 256
  %v5_c3c8 = or i32 %v4_c3c4, %v4_c3c8
  store i32 %v5_c3c8, i32* %r3.global-to-local, align 4
  %v2_c3cc = load i32, i32* @r4, align 4
  %v3_c3cc = add i32 %v2_c3cc, 20
  %v4_c3cc = inttoptr i32 %v3_c3cc to i8*
  store i8 %v3_c3c4, i8* %v4_c3cc, align 1
  %v0_c3d0 = load i32, i32* @r4, align 4
  %v1_c3d0 = add i32 %v0_c3d0, 20
  store i32 %v1_c3d0, i32* @r6, align 4
  %v0_c3d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c3d4 = sdiv i32 %v0_c3d4, 256
  store i32 %v3_c3d4, i32* %r3.global-to-local, align 4
  %v1_c3d8 = trunc i32 %v3_c3d4 to i8
  %v3_c3d8 = add i32 %v0_c3d0, 21
  %v4_c3d8 = inttoptr i32 %v3_c3d8 to i8*
  store i8 %v1_c3d8, i8* %v4_c3d8, align 1
  %v0_c3dc = load i32, i32* @r6, align 4
  %v1_c3dc = add i32 %v0_c3dc, 13
  %v2_c3dc = inttoptr i32 %v1_c3dc to i8*
  %v3_c3dc = load i8, i8* %v2_c3dc, align 1
  %v4_c3dc = zext i8 %v3_c3dc to i32
  store i32 %v4_c3dc, i32* %r3.global-to-local, align 4
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = add i32 %v0_c3e0, 8
  %v2_c3e0 = inttoptr i32 %v1_c3e0 to i32*
  %v3_c3e0 = load i32, i32* %v2_c3e0, align 4
  store i32 %v3_c3e0, i32* %r1.global-to-local, align 4
  %v1_c3e4 = or i32 %v4_c3dc, 1
  store i32 %v1_c3e4, i32* %r3.global-to-local, align 4
  %v1_c3e8 = add i32 %v0_c3e0, 15
  %v2_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v3_c3e8 = load i8, i8* %v2_c3e8, align 1
  %v4_c3e8 = zext i8 %v3_c3e8 to i32
  store i32 %v4_c3e8, i32* %ip.global-to-local, align 4
  %v1_c3ec = add i32 %v0_c3e0, 14
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v4_c3ec, i32* %r0.global-to-local, align 4
  %v2_c3f0 = add i32 %v0_c3dc, 4
  %v3_c3f0 = inttoptr i32 %v2_c3f0 to i32*
  store i32 %v3_c3e0, i32* %v3_c3f0, align 4
  %v0_c3f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3f4 = add i32 %v0_c3f4, 4
  %v2_c3f4 = inttoptr i32 %v1_c3f4 to i32*
  %v3_c3f4 = load i32, i32* %v2_c3f4, align 4
  store i32 %v3_c3f4, i32* %lr.global-to-local, align 4
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* @r6, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 13
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* @r6, align 4
  %v1_c3fc = add i32 %v0_c3fc, 12
  %v2_c3fc = inttoptr i32 %v1_c3fc to i8*
  %v3_c3fc = load i8, i8* %v2_c3fc, align 1
  %v4_c3fc = zext i8 %v3_c3fc to i32
  store i32 %v4_c3fc, i32* %r2.global-to-local, align 4
  %v1_c400 = add i32 %v0_c3fc, 13
  %v2_c400 = inttoptr i32 %v1_c400 to i8*
  %v3_c400 = load i8, i8* %v2_c400, align 1
  %v4_c400 = zext i8 %v3_c400 to i32
  %v0_c404 = load i32, i32* %r0.global-to-local, align 4
  %v1_c404 = load i32, i32* %ip.global-to-local, align 4
  %v4_c404 = mul i32 %v1_c404, 256
  %v5_c404 = or i32 %v4_c404, %v0_c404
  store i32 %v5_c404, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_c3fc, 16
  %v1_c408 = zext i8 %tmp121 to i32
  %v3_c40c = sdiv i32 %v5_c404, 256
  store i32 %v3_c40c, i32* %r1.global-to-local, align 4
  %v1_c410 = or i32 %v1_c408, 128
  store i32 %v1_c410, i32* %r2.global-to-local, align 4
  %v1_c414 = or i32 %v4_c400, 16
  store i32 %v1_c414, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v3_c40c to i8
  %v3_c418 = add i32 %v0_c3fc, 3
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %r2.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* @r6, align 4
  %v3_c41c = add i32 %v2_c41c, 12
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* %r3.global-to-local, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* @r6, align 4
  %v3_c420 = add i32 %v2_c420, 13
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  %v0_c424 = load i32, i32* %lr.global-to-local, align 4
  %v1_c424 = load i32, i32* @r6, align 4
  %v2_c424 = add i32 %v1_c424, 8
  %v3_c424 = inttoptr i32 %v2_c424 to i32*
  store i32 %v0_c424, i32* %v3_c424, align 4
  %v0_c428 = load i32, i32* %r0.global-to-local, align 4
  %v1_c428 = trunc i32 %v0_c428 to i8
  %v2_c428 = load i32, i32* @r6, align 4
  %v3_c428 = add i32 %v2_c428, 2
  %v4_c428 = inttoptr i32 %v3_c428 to i8*
  store i8 %v1_c428, i8* %v4_c428, align 1
  %v0_c42c = call i32 @function_f28c()
  %v1_c42c = trunc i32 %v0_c42c to i8
  store i32 %v0_c42c, i32* %r0.global-to-local, align 4
  store i32 %v1_bef4, i32* %r1.global-to-local, align 4
  %v0_c434 = load i32, i32* @r6, align 4
  %v1_c434 = add i32 %v0_c434, 13
  %v2_c434 = inttoptr i32 %v1_c434 to i8*
  %v3_c434 = load i8, i8* %v2_c434, align 1
  %v4_c434 = zext i8 %v3_c434 to i32
  store i32 %v1_c438, i32* %r2.global-to-local, align 4
  %v1_c43c = and i32 %v4_c434, 223
  %v5_c440 = or i32 %v1_c43c, %v4_c440
  store i32 %v5_c440, i32* %r3.global-to-local, align 4
  %v1_c444 = trunc i32 %v5_c440 to i8
  store i8 %v1_c444, i8* %v2_c434, align 1
  store i32 %v1_bf14, i32* %ip.global-to-local, align 4
  %v0_c44c = load i32, i32* @r6, align 4
  %v1_c44c = add i32 %v0_c44c, 13
  %v2_c44c = inttoptr i32 %v1_c44c to i8*
  %v3_c44c = load i8, i8* %v2_c44c, align 1
  %v4_c44c = zext i8 %v3_c44c to i32
  store i32 %v1_c450, i32* %r3.global-to-local, align 4
  %v1_c454 = and i32 %v4_c44c, 239
  %v5_c458 = or i32 %v1_c454, %v4_c458
  store i32 %v5_c458, i32* %r2.global-to-local, align 4
  %v1_c45c = trunc i32 %v5_c458 to i8
  store i8 %v1_c45c, i8* %v2_c44c, align 1
  store i32 %v1_bf34, i32* %r1.global-to-local, align 4
  %v0_c464 = load i32, i32* @r6, align 4
  %v1_c464 = add i32 %v0_c464, 13
  %v2_c464 = inttoptr i32 %v1_c464 to i8*
  %v3_c464 = load i8, i8* %v2_c464, align 1
  %v4_c464 = zext i8 %v3_c464 to i32
  store i32 %v1_c468, i32* %r2.global-to-local, align 4
  %v1_c46c = and i32 %v4_c464, 247
  %v5_c470 = or i32 %v1_c46c, %v4_c470
  store i32 %v5_c470, i32* %r3.global-to-local, align 4
  %v1_c474 = trunc i32 %v5_c470 to i8
  store i8 %v1_c474, i8* %v2_c464, align 1
  store i32 %v1_bf54, i32* %ip.global-to-local, align 4
  %v0_c47c = load i32, i32* @r6, align 4
  %v1_c47c = add i32 %v0_c47c, 13
  %v2_c47c = inttoptr i32 %v1_c47c to i8*
  %v3_c47c = load i8, i8* %v2_c47c, align 1
  %v4_c47c = zext i8 %v3_c47c to i32
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = and i32 %v4_c47c, 251
  %v5_c488 = or i32 %v1_c484, %v4_c488
  store i32 %v5_c488, i32* %r2.global-to-local, align 4
  %v1_c48c = trunc i32 %v5_c488 to i8
  store i8 %v1_c48c, i8* %v2_c47c, align 1
  store i32 %v1_bf74, i32* %r1.global-to-local, align 4
  %v0_c494 = load i32, i32* @r6, align 4
  %v1_c494 = add i32 %v0_c494, 13
  %v2_c494 = inttoptr i32 %v1_c494 to i8*
  %v3_c494 = load i8, i8* %v2_c494, align 1
  %v4_c494 = zext i8 %v3_c494 to i32
  store i32 %v1_c498, i32* %r2.global-to-local, align 4
  %v1_c49c = and i32 %v4_c494, 253
  %v4_c4a0 = or i32 %v1_c49c, %v3_c4a0
  store i32 %v4_c4a0, i32* %r3.global-to-local, align 4
  %v1_c4a4 = trunc i32 %v4_c4a0 to i8
  store i8 %v1_c4a4, i8* %v2_c494, align 1
  %v0_c4a8 = load i32, i32* @r6, align 4
  %v1_c4a8 = add i32 %v0_c4a8, 13
  %v2_c4a8 = inttoptr i32 %v1_c4a8 to i8*
  %v3_c4a8 = load i8, i8* %v2_c4a8, align 1
  %v4_c4a8 = zext i8 %v3_c4a8 to i32
  %v0_c4ac = load i32, i32* @r8, align 4
  %v1_c4ac = urem i32 %v0_c4ac, 2
  %v1_c4b0 = and i32 %v4_c4a8, 254
  store i32 %v1_c4b0, i32* %r2.global-to-local, align 4
  %v4_c4b437 = udiv i32 %v0_c42c, 256
  %v2_c4b8 = or i32 %v1_c4b0, %v1_c4ac
  store i32 %v2_c4b8, i32* %r3.global-to-local, align 4
  %v1_c4bc = trunc i32 %v4_c4b437 to i8
  %v3_c4bc = add i32 %v0_c4a8, 15
  %v4_c4bc = inttoptr i32 %v3_c4bc to i8*
  store i8 %v1_c4bc, i8* %v4_c4bc, align 1
  %v3_c4c0 = load i32, i32* @r6, align 4
  %v4_c4c0 = add i32 %v3_c4c0, 14
  %v5_c4c0 = inttoptr i32 %v4_c4c0 to i8*
  store i8 %v1_c42c, i8* %v5_c4c0, align 1
  %v0_c4c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c4 = trunc i32 %v0_c4c4 to i8
  %v2_c4c4 = load i32, i32* @r6, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 13
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* @r4, align 4
  %v1_c4c8 = add i32 %v0_c4c8, 40
  store i32 %v1_c4c8, i32* %r0.global-to-local, align 4
  %v0_c4cc = load i32, i32* @sb, align 4
  store i32 %v0_c4cc, i32* @r1, align 4
  %v1_c4d0 = inttoptr i32 %v1_c4c8 to i8*
  %v2_c4d0 = call i32 @function_f40c(i8* %v1_c4d0)
  store i32 %v2_c4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4d4

dec_label_pc_c4d4:                                ; preds = %dec_label_pc_c048, %dec_label_pc_c254, %bb97
  %v3_c4d4 = load i32, i32* %stack_var_-40, align 4
  %v1_c4d8 = add i32 %v3_c4d4, 1
  store i32 %v1_c4d8, i32* %r3.global-to-local, align 4
  %v1_c4dc = load i32, i32* @fp, align 4
  %v9_c4dc = icmp eq i32 %v1_c4d8, %v1_c4dc
  store i1 %v9_c4dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c4d8, i32* %stack_var_-40, align 4
  %v5_c4e4 = icmp slt i32 %v1_c4d8, %v1_c4dc
  br i1 %v5_c4e4, label %dec_label_pc_c048, label %dec_label_pc_c4e8

dec_label_pc_c4e8:                                ; preds = %dec_label_pc_c4d4, %.thread27
  %v0_c4f021 = phi i32 [ %v0_c01c, %.thread27 ], [ %v1_c4dc, %dec_label_pc_c4d4 ]
  %v0_c4e8 = load i32, i32* @sb, align 4
  %v1_c4e8 = add i32 %v0_c4e8, 40
  store i32 %v1_c4e8, i32* @sl, align 4
  %v1_c4ec = add i32 %v0_c4e8, 20
  store i32 %v1_c4ec, i32* @r7, align 4
  %v2_c668 = icmp eq i32 %v1_bfcc, 0
  %v3_c524 = icmp eq i32 %v3_c024, 65535
  br label %dec_label_pc_c4f0

dec_label_pc_c4f0:                                ; preds = %dec_label_pc_c54c, %dec_label_pc_c4e8
  %v0_c4f0 = phi i32 [ %v1_c62c, %dec_label_pc_c54c ], [ %v0_c4f021, %dec_label_pc_c4e8 ]
  %v2_c4f0 = icmp eq i32 %v0_c4f0, 0
  store i1 %v2_c4f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_c4f0, 1
  br label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c4f8, %dec_label_pc_c4f0
  br i1 %tmp98, label %dec_label_pc_c4f8, label %dec_label_pc_c4fc

dec_label_pc_c4fc:                                ; preds = %dec_label_pc_c4f8
  %v0_c4fc = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_c4fc, 256
  %v1_c504 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_c4fc, 256
  %v4_c508 = urem i32 %tmp100, 256
  %v5_c508 = or i32 %v4_c508, %v1_c504
  store i32 %v5_c508, i32* @r8, align 4
  store i32 %v4_be3c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c024, i32* %ip.global-to-local, align 4
  %v7_c51c = load i32, i32* %v2_be3c, align 4
  store i32 %v7_c51c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c524, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c530 = add i32 %v7_c51c, 20
  store i32 %v1_c530, i32* @r5, align 4
  br i1 %v3_c524, label %dec_label_pc_c658, label %dec_label_pc_c538

dec_label_pc_c538:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4fc
  %v0_c544 = phi i32 [ %v7_c644, %dec_label_pc_c638 ], [ %v7_c51c, %dec_label_pc_c4fc ]
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  %v0_c540 = load i32, i32* @sb, align 4
  store i32 %v0_c540, i32* @r1, align 4
  %v1_c544 = add i32 %v0_c544, 40
  store i32 %v1_c544, i32* %r0.global-to-local, align 4
  br i1 %v2_c668, label %dec_label_pc_c54c, label %dec_label_pc_c67c

dec_label_pc_c54c:                                ; preds = %dec_label_pc_c538, %dec_label_pc_c658, %dec_label_pc_c67c
  %v2_c54c = phi i32 [ %v0_c544, %dec_label_pc_c538 ], [ %v0_c670, %dec_label_pc_c658 ], [ %v2_c54c.pre, %dec_label_pc_c67c ]
  %v0_c54c = load i32, i32* @r6, align 4
  %v1_c54c = trunc i32 %v0_c54c to i8
  %v3_c54c = add i32 %v2_c54c, 10
  %v4_c54c = inttoptr i32 %v3_c54c to i8*
  store i8 %v1_c54c, i8* %v4_c54c, align 1
  %v0_c550 = load i32, i32* @r6, align 4
  %v1_c550 = trunc i32 %v0_c550 to i8
  %v2_c550 = load i32, i32* @r4, align 4
  %v3_c550 = add i32 %v2_c550, 11
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c558 = load i32, i32* @r4, align 4
  store i32 %v0_c558, i32* @r0, align 4
  %v2_c55c = call i32 @function_ddc4(i32 %v0_c558, i32 20)
  %v3_c55c = trunc i32 %v2_c55c to i8
  store i32 %v2_c55c, i32* %r0.global-to-local, align 4
  %v3_c560 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_be2c, i32* %r2.global-to-local, align 4
  %v3_c568 = mul i32 %v3_c560, 16
  %v2_c56c = add i32 %v3_c568, %v4_be2c
  store i32 %v2_c56c, i32* %r1.global-to-local, align 4
  %v1_c570 = add i32 %v2_c56c, 4
  %v2_c570 = inttoptr i32 %v1_c570 to i32*
  %v3_c570 = load i32, i32* %v2_c570, align 4
  %v3_c574 = mul i32 %v3_c570, 65536
  store i32 %v3_c574, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_c570, 256
  %v1_c57c = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_c570, 256
  %v4_c580 = urem i32 %tmp102, 256
  %v5_c580 = or i32 %v4_c580, %v1_c57c
  store i32 %v5_c580, i32* %r2.global-to-local, align 4
  %v1_c584 = add i32 %v3_c570, 1
  store i32 %v1_c584, i32* %r3.global-to-local, align 4
  store i32 %v1_c584, i32* %v2_c570, align 4
  %v0_c58c = load i32, i32* %r2.global-to-local, align 4
  %v1_c58c = load i32, i32* @r5, align 4
  %v2_c58c = add i32 %v1_c58c, 4
  %v3_c58c = inttoptr i32 %v2_c58c to i32*
  store i32 %v0_c58c, i32* %v3_c58c, align 4
  %v0_c590 = load i32, i32* %r1.global-to-local, align 4
  %v1_c590 = add i32 %v0_c590, 8
  %v2_c590 = inttoptr i32 %v1_c590 to i32*
  %v3_c590 = load i32, i32* %v2_c590, align 4
  %tmp103 = mul i32 %v3_c590, 256
  %v1_c59c = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_c590, 256
  %v4_c5a0 = urem i32 %tmp104, 256
  %v5_c5a0 = or i32 %v4_c5a0, %v1_c59c
  store i32 %v5_c5a0, i32* %r2.global-to-local, align 4
  %v4_c5a438 = udiv i32 %v2_c55c, 256
  %v1_c5a8 = trunc i32 %v4_c5a438 to i8
  %v2_c5a8 = load i32, i32* @r4, align 4
  %v3_c5a8 = add i32 %v2_c5a8, 11
  %v4_c5a8 = inttoptr i32 %v3_c5a8 to i8*
  store i8 %v1_c5a8, i8* %v4_c5a8, align 1
  %v3_c5ac = load i32, i32* @r4, align 4
  %v4_c5ac = add i32 %v3_c5ac, 10
  %v5_c5ac = inttoptr i32 %v4_c5ac to i8*
  store i8 %v3_c55c, i8* %v5_c5ac, align 1
  %v0_c5b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5b0 = load i32, i32* @r5, align 4
  %v2_c5b0 = add i32 %v1_c5b0, 8
  %v3_c5b0 = inttoptr i32 %v2_c5b0 to i32*
  store i32 %v0_c5b0, i32* %v3_c5b0, align 4
  %v0_c5b4 = load i32, i32* @r5, align 4
  store i32 %v0_c5b4, i32* @r1, align 4
  %v0_c5b8 = load i32, i32* @r8, align 4
  store i32 %v0_c5b8, i32* %r2.global-to-local, align 4
  %v0_c5bc = load i32, i32* @r7, align 4
  store i32 %v0_c5bc, i32* %r3.global-to-local, align 4
  %v0_c5c0 = load i32, i32* @r4, align 4
  store i32 %v0_c5c0, i32* %r0.global-to-local, align 4
  %v0_c5c4 = load i32, i32* @r6, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v3_c5c4 = add i32 %v0_c5b4, 16
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  %v0_c5c8 = load i32, i32* @r6, align 4
  %v1_c5c8 = trunc i32 %v0_c5c8 to i8
  %v2_c5c8 = load i32, i32* @r5, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 17
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i8*
  store i8 %v1_c5c8, i8* %v4_c5c8, align 1
  %v4_c5cc = call i32 @function_de20(i32 %v0_c5c0, i32 %v0_c5b4, i32 %v0_c5b8, i32 %v0_c5bc)
  %v5_c5cc = trunc i32 %v4_c5cc to i8
  store i32 %v4_c5cc, i32* %r0.global-to-local, align 4
  %v4_c5d039 = udiv i32 %v4_c5cc, 256
  %v1_c5d4 = trunc i32 %v4_c5d039 to i8
  %v2_c5d4 = load i32, i32* @r5, align 4
  %v3_c5d4 = add i32 %v2_c5d4, 17
  %v4_c5d4 = inttoptr i32 %v3_c5d4 to i8*
  store i8 %v1_c5d4, i8* %v4_c5d4, align 1
  %v3_c5d8 = load i32, i32* @r5, align 4
  %v4_c5d8 = add i32 %v3_c5d8, 16
  %v5_c5d8 = inttoptr i32 %v4_c5d8 to i8*
  store i8 %v5_c5cc, i8* %v5_c5d8, align 1
  %v3_c5dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5dc, i32* %r3.global-to-local, align 4
  %v0_c5e0 = load i32, i32* @r4, align 4
  %v1_c5e0 = add i32 %v0_c5e0, 20
  %v2_c5e0 = inttoptr i32 %v1_c5e0 to i32*
  %v3_c5e0 = load i32, i32* %v2_c5e0, align 4
  %v5_c5e8 = mul i32 %v3_c5dc, 24
  %v3_c5f0 = udiv i32 %v3_c5e0, 65536
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  %v2_c5f4 = add i32 %v5_c5e8, %arg2
  store i32 %v2_c5f4, i32* %ip.global-to-local, align 4
  %v3_c5f87 = udiv i32 %v3_c5e0, 16777216
  %v1_c5fc = trunc i32 %v3_c5f87 to i8
  %v3_c5fc = add i32 %v2_c5f4, 3
  %v4_c5fc = inttoptr i32 %v3_c5fc to i8*
  store i8 %v1_c5fc, i8* %v4_c5fc, align 1
  %v0_c600 = load i32, i32* %r2.global-to-local, align 4
  %v1_c600 = trunc i32 %v0_c600 to i8
  %v2_c600 = load i32, i32* %ip.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 2
  %v4_c600 = inttoptr i32 %v3_c600 to i8*
  store i8 %v1_c600, i8* %v4_c600, align 1
  %v0_c604 = load i32, i32* @r4, align 4
  store i32 %v0_c604, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  %v0_c610 = load i32, i32* @sl, align 4
  store i32 %v0_c610, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c618 = load i32, i32* %ip.global-to-local, align 4
  %v4_c618 = inttoptr i32 %v0_c618 to %sockaddr*
  %v7_c620 = inttoptr i32 %v0_c604 to i32*
  %v9_c620 = call i32 @sendto(i32 %v3_bfdc, i32* %v7_c620, i32 %v0_c610, i32 16384, %sockaddr* %v4_c618, i32 16)
  %v3_c624 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c624, i32* %r3.global-to-local, align 4
  %v1_c628 = add i32 %v3_c624, 1
  store i32 %v1_c628, i32* %r0.global-to-local, align 4
  %v1_c62c = load i32, i32* @fp, align 4
  %v9_c62c = icmp eq i32 %v1_c628, %v1_c62c
  store i1 %v9_c62c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c628, i32* %stack_var_-40, align 4
  %v6_c634 = icmp slt i32 %v1_c628, %v1_c62c
  br i1 %v6_c634, label %dec_label_pc_c638, label %dec_label_pc_c4f0

dec_label_pc_c638:                                ; preds = %dec_label_pc_c54c
  store i32 %v4_be3c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c024, i32* %ip.global-to-local, align 4
  %v4_c644 = mul i32 %v1_c628, 4
  %v5_c644 = add i32 %v4_c644, %v4_be3c
  %v6_c644 = inttoptr i32 %v5_c644 to i32*
  %v7_c644 = load i32, i32* %v6_c644, align 4
  store i32 %v7_c644, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c524, i1* %cpsr_z.global-to-local, align 1
  %v1_c650 = add i32 %v7_c644, 20
  store i32 %v1_c650, i32* @r5, align 4
  br i1 %v3_c524, label %dec_label_pc_c658, label %dec_label_pc_c538

dec_label_pc_c658:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4fc
  %v0_c658 = call i32 @function_f28c()
  %v1_c658 = trunc i32 %v0_c658 to i8
  %v4_c65c = sdiv i32 %v0_c658, 256
  store i32 %v4_c65c, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @r4, align 4
  %v4_c660 = add i32 %v3_c660, 4
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 %v1_c658, i8* %v5_c660, align 1
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  %v0_c66c = load i32, i32* %r3.global-to-local, align 4
  %v1_c66c = trunc i32 %v0_c66c to i8
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = add i32 %v2_c66c, 5
  %v4_c66c = inttoptr i32 %v3_c66c to i8*
  store i8 %v1_c66c, i8* %v4_c66c, align 1
  %v0_c670 = load i32, i32* @r4, align 4
  %v1_c670 = add i32 %v0_c670, 40
  store i32 %v1_c670, i32* %r0.global-to-local, align 4
  %v0_c674 = load i32, i32* @sb, align 4
  store i32 %v0_c674, i32* @r1, align 4
  %v0_c678 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c678, label %dec_label_pc_c54c, label %dec_label_pc_c67c

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c538, %dec_label_pc_c658
  %v0_c67c = phi i32 [ %v1_c544, %dec_label_pc_c538 ], [ %v1_c670, %dec_label_pc_c658 ]
  %v1_c67c = inttoptr i32 %v0_c67c to i8*
  %v2_c67c = call i32 @function_f40c(i8* %v1_c67c)
  store i32 %v2_c67c, i32* %r0.global-to-local, align 4
  %v2_c54c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c54c

; uselistorder directives
  uselistorder i32 %v0_c670, { 1, 0 }
  uselistorder i32 %v7_c644, { 1, 2, 0 }
  uselistorder i32 %v1_c62c, { 1, 2, 0 }
  uselistorder i32 %v1_c628, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c5cc, { 0, 2, 1 }
  uselistorder i32 %v0_c5b4, { 1, 0, 2 }
  uselistorder i32 %v3_c590, { 1, 0 }
  uselistorder i32 %v3_c570, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c55c, { 0, 2, 1 }
  uselistorder i32 %v0_c544, { 1, 0 }
  uselistorder i32 %v0_c4fc, { 1, 0 }
  uselistorder i32 %v0_c4f0, { 1, 0 }
  uselistorder i1 %v3_c524, { 2, 3, 1, 0 }
  uselistorder i1 %v2_c668, { 2, 1, 0 }
  uselistorder i32 %v1_c4d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c42c, { 0, 2, 1 }
  uselistorder i32 %v3_c40c, { 1, 0 }
  uselistorder i32 %v0_c3e0, { 1, 0, 2 }
  uselistorder i32 %v3_c3d4, { 1, 0 }
  uselistorder i32 %v1_c338, { 1, 0 }
  uselistorder i32 %v0_c32c, { 1, 2, 0 }
  uselistorder i32 %v3_c2f0, { 1, 0 }
  uselistorder i32 %v2_c2dc, { 1, 0 }
  uselistorder i32 %v3_c2c0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c2b8, { 1, 0 }
  uselistorder i32 %v3_c294, { 1, 0, 2 }
  uselistorder i32 %v3_c28c, { 1, 0 }
  uselistorder i32 %v4_c274, { 1, 0 }
  uselistorder i32 %v0_c270, { 0, 2, 1 }
  uselistorder i32 %v3_c070, { 1, 2, 3, 0 }
  uselistorder i32 %v5_c224, { 1, 0 }
  uselistorder i1 %v9_c208, { 1, 0 }
  uselistorder i32 %v4_c21c, { 1, 0 }
  uselistorder i32 %v4_c218, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c110, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c0fc, { 1, 0 }
  uselistorder i32 %v7_c0c8, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_c498, { 1, 0 }
  uselistorder i32 %v1_c480, { 1, 0 }
  uselistorder i32 %v1_c468, { 1, 0 }
  uselistorder i32 %v1_c450, { 1, 0 }
  uselistorder i32 %v1_c438, { 1, 0 }
  uselistorder i32 %v5_c220, { 1, 0 }
  uselistorder i32 %v3_c158113, { 1, 0 }
  uselistorder i1 %v2_c238, { 1, 0 }
  uselistorder i32 %v1_c234, { 1, 0 }
  uselistorder i32 %v4_c230, { 2, 0, 1 }
  uselistorder i32 %v4_c214, { 1, 0 }
  uselistorder i1 %v3_c140, { 1, 0 }
  uselistorder i32 %v1_c054, { 2, 1, 0 }
  uselistorder i32 %v8_c030, { 2, 1, 0 }
  uselistorder i32 %v8_c02c, { 1, 2, 0 }
  uselistorder i32 %v3_c024, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c020, { 1, 0, 3, 2 }
  uselistorder i32 %v3_bfe0, { 2, 3, 0, 1 }
  uselistorder i32 %v3_bfdc, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_bfcc, { 1, 0 }
  uselistorder i32 %v1_bf74, { 1, 0 }
  uselistorder i32 %v1_bf54, { 1, 0 }
  uselistorder i32 %v1_bf34, { 1, 0 }
  uselistorder i32 %v1_bf14, { 1, 0 }
  uselistorder i32 %v1_bef4, { 1, 0 }
  uselistorder i32 %v1_bebc, { 1, 0 }
  uselistorder i32 %v4_be3c, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_be2c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_be10, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 67, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 45, 42, 28, 31, 29, 32, 33, 30, 35, 34, 36, 37, 38, 40, 39, 41, 65, 64, 43, 44, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder label %dec_label_pc_c67c, { 1, 0 }
  uselistorder label %dec_label_pc_c54c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c4d4, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_c268, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c1a0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c134, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c688:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c688 = load i32, i32* @r4, align 4
  %v1_c68c = urem i32 %arg1, 256
  store i32 %v1_c68c, i32* @fp, align 4
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c6a4 = urem i32 %arg3, 256
  store i32 %v1_c6a4, i32* @r4, align 4
  %v2_c6a8 = call i32* @calloc(i32 %v1_c68c, i32 16)
  %v4_c6a8 = ptrtoint i32* %v2_c6a8 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c6b4 = load i32, i32* @fp, align 4
  store i32 %v0_c6b4, i32* %r0.global-to-local, align 4
  %v2_c6b8 = call i32* @calloc(i32 %v0_c6b4, i32 4)
  %v4_c6b8 = ptrtoint i32* %v2_c6b8 to i32
  %v0_c6bc = load i32, i32* @r5, align 4
  store i32 %v0_c6bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c6cc = load i32, i32* @r4, align 4
  store i32 %v0_c6cc, i32* %r0.global-to-local, align 4
  %v5_c6d0 = inttoptr i32 %v0_c6bc to i32*
  %v6_c6d0 = call i32 @function_92ac(i32 %v0_c6cc, i32* %v5_c6d0, i32 2, i32 0)
  %v1_c6dc = urem i32 %v6_c6d0, 256
  store i32 %v1_c6dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c6e8 = load i32, i32* @r5, align 4
  store i32 %v0_c6e8, i32* %r1.global-to-local, align 4
  %v0_c6ec = load i32, i32* @r4, align 4
  store i32 %v0_c6ec, i32* %r0.global-to-local, align 4
  %v6_c6f4 = inttoptr i32 %v0_c6e8 to i32*
  %v7_c6f4 = call i32 @function_92ac(i32 %v0_c6ec, i32* %v6_c6f4, i32 3, i32 65535)
  %v0_c6f8 = load i32, i32* @r5, align 4
  store i32 %v0_c6f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c6f4, i32* @r6, align 4
  %v0_c708 = load i32, i32* @r4, align 4
  store i32 %v0_c708, i32* %r0.global-to-local, align 4
  %v4_c70c = inttoptr i32 %v0_c6f8 to i32*
  %v5_c70c = call i32 @function_92ac(i32 %v0_c708, i32* %v4_c70c, i32 4, i32 64)
  %v1_c714 = urem i32 %v5_c70c, 256
  store i32 %v1_c714, i32* %ip.global-to-local, align 4
  %v0_c718 = load i32, i32* @r5, align 4
  store i32 %v0_c718, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c724 = load i32, i32* @r4, align 4
  store i32 %v0_c724, i32* %r0.global-to-local, align 4
  %v6_c72c = inttoptr i32 %v0_c718 to i32*
  %v7_c72c = call i32 @function_92ac(i32 %v0_c724, i32* %v6_c72c, i32 5, i32 1)
  %v1_c738 = urem i32 %v7_c72c, 256
  store i32 %v1_c738, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_c740 = load i32, i32* @r5, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c748 = load i32, i32* @r4, align 4
  store i32 %v0_c748, i32* %r0.global-to-local, align 4
  %v5_c750 = inttoptr i32 %v0_c740 to i32*
  %v6_c750 = call i32 @function_92ac(i32 %v0_c748, i32* %v5_c750, i32 7, i32 65535)
  %v0_c754 = load i32, i32* @r5, align 4
  store i32 %v0_c754, i32* %r1.global-to-local, align 4
  %v3_c758 = mul i32 %v6_c750, 65536
  store i32 %v3_c758, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c764 = load i32, i32* @r4, align 4
  store i32 %v0_c764, i32* %r0.global-to-local, align 4
  %v4_c768 = inttoptr i32 %v0_c754 to i32*
  %v5_c768 = call i32 @function_92ac(i32 %v0_c764, i32* %v4_c768, i32 11, i32 0)
  %v1_c770 = urem i32 %v5_c768, 256
  store i32 %v1_c770, i32* %ip.global-to-local, align 4
  %v0_c774 = load i32, i32* @r5, align 4
  store i32 %v0_c774, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c780 = load i32, i32* @r4, align 4
  store i32 %v0_c780, i32* %r0.global-to-local, align 4
  %v5_c788 = inttoptr i32 %v0_c774 to i32*
  %v6_c788 = call i32 @function_92ac(i32 %v0_c780, i32* %v5_c788, i32 12, i32 1)
  %v1_c790 = urem i32 %v6_c788, 256
  store i32 %v1_c790, i32* %ip.global-to-local, align 4
  %v0_c794 = load i32, i32* @r5, align 4
  store i32 %v0_c794, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7a0 = load i32, i32* @r4, align 4
  store i32 %v0_c7a0, i32* %r0.global-to-local, align 4
  %v5_c7a8 = inttoptr i32 %v0_c794 to i32*
  %v6_c7a8 = call i32 @function_92ac(i32 %v0_c7a0, i32* %v5_c7a8, i32 13, i32 1)
  %v1_c7b0 = urem i32 %v6_c7a8, 256
  store i32 %v1_c7b0, i32* %ip.global-to-local, align 4
  %v0_c7b4 = load i32, i32* @r5, align 4
  store i32 %v0_c7b4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c7c0 = load i32, i32* @r4, align 4
  store i32 %v0_c7c0, i32* %r0.global-to-local, align 4
  %v5_c7c8 = inttoptr i32 %v0_c7b4 to i32*
  %v6_c7c8 = call i32 @function_92ac(i32 %v0_c7c0, i32* %v5_c7c8, i32 14, i32 0)
  %v1_c7d0 = urem i32 %v6_c7c8, 256
  store i32 %v1_c7d0, i32* %ip.global-to-local, align 4
  %v0_c7d4 = load i32, i32* @r5, align 4
  store i32 %v0_c7d4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  store i32 %v0_c7e0, i32* %r0.global-to-local, align 4
  %v5_c7e8 = inttoptr i32 %v0_c7d4 to i32*
  %v6_c7e8 = call i32 @function_92ac(i32 %v0_c7e0, i32* %v5_c7e8, i32 15, i32 0)
  %v1_c7f0 = urem i32 %v6_c7e8, 256
  store i32 %v1_c7f0, i32* %ip.global-to-local, align 4
  %v0_c7f4 = load i32, i32* @r5, align 4
  store i32 %v0_c7f4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c800 = load i32, i32* @r4, align 4
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  %v5_c808 = inttoptr i32 %v0_c7f4 to i32*
  %v6_c808 = call i32 @function_92ac(i32 %v0_c800, i32* %v5_c808, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c808, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  %v0_c81c = load i32, i32* @r4, align 4
  store i32 %v0_c81c, i32* %r0.global-to-local, align 4
  %v1_c820 = urem i32 %v6_c808, 256
  store i32 %v1_c820, i32* @r8, align 4
  %v4_c824 = inttoptr i32 %v0_c818 to i32*
  %v5_c824 = call i32 @function_92ac(i32 %v0_c81c, i32* %v4_c824, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r5, align 4
  store i32 %v0_c830, i32* %r1.global-to-local, align 4
  store i32 %v5_c824, i32* @sb, align 4
  %v0_c838 = load i32, i32* @r4, align 4
  store i32 %v0_c838, i32* %r0.global-to-local, align 4
  %v4_c83c = inttoptr i32 %v0_c830 to i32*
  %v5_c83c = call i32 @function_92ac(i32 %v0_c838, i32* %v4_c83c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c848 = urem i32 %v5_c83c, 256
  store i32 %v1_c848, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c858 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c858, i32* %r0.global-to-local, align 4
  %v0_c85c = load i32, i32* @r7, align 4
  %v3_c85c = udiv i32 %v0_c85c, 65536
  store i32 %v3_c85c, i32* %r1.global-to-local, align 4
  %v2_c860 = icmp eq i32 %v3_c858, -1
  store i1 %v2_c860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c860, label %dec_label_pc_cae4, label %dec_label_pc_c870

dec_label_pc_c870:                                ; preds = %dec_label_pc_c688
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c878 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c878, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c88c = call i32 @setsockopt(i32 %v3_c858, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c88c, i32* %r0.global-to-local, align 4
  %v2_c890 = icmp eq i32 %v7_c88c, -1
  store i1 %v2_c890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c890, label %dec_label_pc_cadc, label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %dec_label_pc_c870
  %v0_c898 = load i32, i32* @fp, align 4
  %v2_c898 = icmp eq i32 %v0_c898, 0
  store i1 %v2_c898, i1* %cpsr_z.global-to-local, align 1
  %v0_c89c = load i32, i32* @r6, align 4
  %v3_c89c = mul i32 %v0_c89c, 65536
  store i32 %v3_c89c, i32* %r0.global-to-local, align 4
  %v3_c8a0 = urem i32 %v0_c89c, 65536
  store i32 %v3_c8a0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c898, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c8c4.preheader

.thread27:                                        ; preds = %dec_label_pc_c898
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_cd64

dec_label_pc_c8c4.preheader:                      ; preds = %dec_label_pc_c898
  %v5_c8a8 = load i32, i32* @r7, align 4
  %v8_c8a8 = udiv i32 %v5_c8a8, 16777216
  %tmp86 = udiv i32 %v0_c89c, 256
  %v8_c8ac = urem i32 %tmp86, 256
  store i32 %v8_c8ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c8d0 = urem i32 %v0_c89c, 256
  %v3_c9bc = icmp ugt i32 %v0_c85c, -65537
  %v2_c9e0 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_c9fc = mul nuw nsw i32 %v1_c8d0, 256
  %v5_c9fc = or i32 %v8_c8ac, %v4_c9fc
  %sext11 = mul i32 %tmp86, 16777216
  %v4_ca08 = sdiv i32 %sext11, 16777216
  %v3_ca10 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_ca40 = ptrtoint i32* %stack_var_-332 to i32
  %v2_ca44 = ptrtoint i32* %stack_var_-44 to i32
  %v4_ca8c = zext i8 %tmp41 to i32
  %v4_ca90 = zext i8 %tmp40 to i32
  %v4_ca9c = mul nuw nsw i32 %v4_ca90, 256
  %v4_caac = zext i8 %tmp to i32
  %v1_cab0 = and i32 %v4_caac, 18
  %v2_cab4 = icmp eq i32 %v1_cab0, 18
  %v1_c9cc = mul nuw nsw i32 %v3_c85c, 256
  %v4_c9d0 = and i32 %v1_c9cc, 65280
  %v5_c9d0 = or i32 %v8_c8a8, %v4_c9d0
  %v3_c9d4113 = udiv i32 %v4_c9d0, 256
  %v1_c9d8 = trunc i32 %v3_c9d4113 to i8
  %sext = mul i32 %v6_c6d0, 16777216
  %v4_cbd8 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_c70c, 16777216
  %v4_cbec = sdiv i32 %sext9, 16777216
  %v5_ca9c = or i32 %v4_ca8c, %v4_ca9c
  %v1_cabc = and i32 %v4_caac, 5
  %v2_cabc = icmp eq i32 %v1_cabc, 0
  %v1_c9dc = trunc i32 %v8_c8a8 to i8
  %v1_cbe8 = trunc i32 %v4_cbd8 to i8
  %v1_ccb4 = urem i32 %v5_c768, 2
  %tmp114 = sub nsw i32 0, %v1_ccb4
  %v4_ccbc = and i32 %tmp114, 32
  %v1_cccc = urem i32 %v6_c788, 2
  %tmp115 = sub nsw i32 0, %v1_cccc
  %v4_ccd4 = and i32 %tmp115, 16
  %v1_cce4 = urem i32 %v6_c7a8, 2
  %tmp116 = sub nsw i32 0, %v1_cce4
  %v4_ccec = and i32 %tmp116, 8
  %v1_ccfc = urem i32 %v6_c7c8, 2
  %tmp117 = sub nsw i32 0, %v1_ccfc
  %v4_cd04 = and i32 %tmp117, 4
  %v1_cd14 = urem i32 %v6_c7e8, 2
  %tmp118 = sub nsw i32 0, %v1_cd14
  %v3_cd1c = and i32 %tmp118, 2
  br label %dec_label_pc_c8c4

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_cd50, %dec_label_pc_cac4, %dec_label_pc_c8c4.preheader
  store i32 %v8_c8ac, i32* %r3.global-to-local, align 4
  store i32 %v1_c8d0, i32* %ip.global-to-local, align 4
  %v0_c8dc = load i32, i32* @sb, align 4
  %v1_c8dc = add i32 %v0_c8dc, 40
  store i32 %v1_c8dc, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c8ec107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c8ec107, i32* %r0.global-to-local, align 4
  %v2_c8f0108 = icmp eq i32 %v3_c8ec107, -1
  store i1 %v2_c8f0108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8ec107, i32* @r7, align 4
  br i1 %v2_c8f0108, label %dec_label_pc_cd50, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_cad0
  %v3_c8ec109 = phi i32 [ %v3_c8ec, %dec_label_pc_cad0 ], [ %v3_c8ec107, %dec_label_pc_c8c4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c904 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c8ec109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c90c = or i32 %v2_c904, 2048
  store i32 %v1_c90c, i32* %r2.global-to-local, align 4
  %v0_c910 = load i32, i32* @r7, align 4
  store i32 %v0_c910, i32* %r0.global-to-local, align 4
  %v2_c914 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c910, i32 4)
  %v3_c918 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c918, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c934 = mul i32 %v3_c918, 24
  store i32 %v5_c934, i32* %r1.global-to-local, align 4
  %v2_c938 = add i32 %v5_c934, %arg2
  store i32 %v2_c938, i32* %r2.global-to-local, align 4
  %v1_c93c = add i32 %v2_c938, 20
  %v2_c93c = inttoptr i32 %v1_c93c to i8*
  %v3_c93c = load i8, i8* %v2_c93c, align 1
  %v4_c93c = zext i8 %v3_c93c to i32
  store i32 %v4_c93c, i32* %r3.global-to-local, align 4
  %v2_c940 = icmp ugt i8 %v3_c93c, 30
  %v7_c940 = icmp eq i8 %v3_c93c, 31
  store i1 %v7_c940, i1* %cpsr_z.global-to-local, align 1
  %v2_c944 = xor i1 %v7_c940, true
  %v3_c944 = and i1 %v2_c940, %v2_c944
  %v5_c944 = add i32 %v2_c938, 16
  %v6_c944 = inttoptr i32 %v5_c944 to i32*
  %v7_c944 = load i32, i32* %v6_c944, align 4
  br i1 %v3_c944, label %dec_label_pc_c9b0, label %dec_label_pc_c950

dec_label_pc_c950:                                ; preds = %dec_label_pc_c8fc
  store i32 %v7_c944, i32* %r4.global-to-local, align 4
  %v0_c954 = call i32 @function_f28c()
  store i32 %v0_c954, i32* %r0.global-to-local, align 4
  %v3_c958 = load i32, i32* %stack_var_-40, align 4
  %v5_c960 = mul i32 %v3_c958, 24
  %v2_c96c = add i32 %v5_c960, %arg2
  store i32 %v2_c96c, i32* %r1.global-to-local, align 4
  %v1_c968 = udiv i32 %v7_c944, 256
  %v3_c970 = and i32 %v1_c968, 65280
  store i32 %v3_c970, i32* %r2.global-to-local, align 4
  %v1_c974 = and i32 %v7_c944, 65280
  store i32 %v1_c974, i32* %r3.global-to-local, align 4
  %v3_c978 = mul i32 %v7_c944, 16777216
  store i32 %v3_c978, i32* %ip.global-to-local, align 4
  %v1_c97c = add i32 %v2_c96c, 20
  %v2_c97c = inttoptr i32 %v1_c97c to i8*
  %v3_c97c = load i8, i8* %v2_c97c, align 1
  %v4_c97c = zext i8 %v3_c97c to i32
  store i32 %v4_c97c, i32* %lr.global-to-local, align 4
  %v4_c980 = mul nuw nsw i32 %v1_c974, 256
  %v5_c980 = or i32 %v4_c980, %v3_c978
  store i32 %v5_c980, i32* %ip.global-to-local, align 4
  %v2_c988 = call i32 @llvm.bswap.i32(i32 %v7_c944)
  %v7_c98c = lshr i32 %v0_c954, %v4_c97c
  %v8_c98c = add i32 %v7_c98c, %v2_c988
  store i32 %v8_c98c, i32* %r2.global-to-local, align 4
  %v3_c998 = mul i32 %v8_c98c, 16777216
  %v1_c99c = and i32 %v8_c98c, 65280
  store i32 %v1_c99c, i32* %r0.global-to-local, align 4
  %v4_c9a0 = mul nuw nsw i32 %v1_c99c, 256
  %v5_c9a0 = or i32 %v4_c9a0, %v3_c998
  store i32 %v5_c9a0, i32* %r1.global-to-local, align 4
  %v2_c9a8 = call i32 @llvm.bswap.i32(i32 %v8_c98c)
  br label %dec_label_pc_c9b0

dec_label_pc_c9b0:                                ; preds = %dec_label_pc_c8fc, %dec_label_pc_c950
  %storemerge35 = phi i32 [ %v2_c9a8, %dec_label_pc_c950 ], [ %v7_c944, %dec_label_pc_c8fc ]
  store i32 %v3_c85c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c9bc, label %dec_label_pc_caec, label %dec_label_pc_c9c4

dec_label_pc_c9c4:                                ; preds = %dec_label_pc_c9b0
  store i32 %v3_c85c, i32* %r0.global-to-local, align 4
  store i32 %v8_c8a8, i32* %r1.global-to-local, align 4
  store i32 %v5_c9d0, i32* %r3.global-to-local, align 4
  store i32 %v3_c9d4113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c9e0

dec_label_pc_c9e0:                                ; preds = %dec_label_pc_caec, %dec_label_pc_c9c4
  %stack_var_-57.0 = phi i8 [ %v1_caf4, %dec_label_pc_caec ], [ %v1_c9d8, %dec_label_pc_c9c4 ]
  %storemerge = phi i8 [ %v1_caec, %dec_label_pc_caec ], [ %v1_c9dc, %dec_label_pc_c9c4 ]
  store i32 %v2_c9e0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c9e8 = load i32, i32* @r7, align 4
  store i32 %v0_c9e8, i32* %r0.global-to-local, align 4
  %v5_c9ec = call i32 @connect(i32 %v0_c9e8, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c8d0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_c9fc, i32* %r2.global-to-local, align 4
  %v2_ca04 = call i32 @time(i32* null)
  store i32 %v2_ca04, i32* %r0.global-to-local, align 4
  store i32 %v2_ca04, i32* %r4.global-to-local, align 4
  store i32 %v3_ca10, i32* %ip.global-to-local, align 4
  %v9_ca70 = icmp eq i32 %tmp42, %storemerge35
  %v4_ca94 = zext i8 %storemerge to i32
  %v4_ca98 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_ca70 to i32
  %v9_ca84 = icmp eq i1 %v9_ca70, false
  %v4_caa0 = mul nuw nsw i32 %v4_ca98, 256
  %v5_caa0 = or i32 %v4_caa0, %v4_ca94
  %v9_caa4 = icmp eq i32 %v5_caa0, %v5_ca9c
  br label %dec_label_pc_ca2c

dec_label_pc_ca1c:                                ; preds = %.thread33, %dec_label_pc_ca8c, %dec_label_pc_cabc, %bb90
  %v2_ca1c = call i32 @time(i32* null)
  %v0_ca20 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca20 = sub i32 %v2_ca1c, %v0_ca20
  store i32 %v2_ca20, i32* %r0.global-to-local, align 4
  %v7_ca24 = icmp eq i32 %v2_ca20, 10
  store i1 %v7_ca24, i1* %cpsr_z.global-to-local, align 1
  %v8_ca28 = icmp sgt i32 %v2_ca20, 10
  br i1 %v8_ca28, label %dec_label_pc_cad0, label %dec_label_pc_ca2c

dec_label_pc_ca2c:                                ; preds = %dec_label_pc_ca1c, %dec_label_pc_c9e0
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ca40, i32* %r1.global-to-local, align 4
  store i32 %v2_ca44, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c858, i32* %r0.global-to-local, align 4
  %v10_ca54 = call i32 @recvfrom(i32 %v3_c858, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_ca54, i32* %r2.global-to-local, align 4
  %v2_ca5c = icmp eq i32 %v10_ca54, -1
  store i1 %v2_ca5c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_ca5c, label %dec_label_pc_cae4, label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %dec_label_pc_ca2c
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_ca7c = icmp eq i32 %v10_ca54, 40
  store i1 %v7_ca7c, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_ca54, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_ca68
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ca1c

bb90:                                             ; preds = %dec_label_pc_ca68
  store i1 %v9_ca84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ca84, label %dec_label_pc_ca1c, label %dec_label_pc_ca8c

dec_label_pc_ca8c:                                ; preds = %bb90
  store i32 %v4_ca90, i32* %r1.global-to-local, align 4
  store i32 %v4_ca94, i32* %ip.global-to-local, align 4
  store i32 %v4_ca98, i32* %r2.global-to-local, align 4
  store i32 %v5_ca9c, i32* %r3.global-to-local, align 4
  store i32 %v5_caa0, i32* @r5, align 4
  store i1 %v9_caa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_caa4, label %dec_label_pc_caac, label %dec_label_pc_ca1c

dec_label_pc_caac:                                ; preds = %dec_label_pc_ca8c
  store i32 %v4_caac, i32* %r2.global-to-local, align 4
  store i32 %v1_cab0, i32* %r3.global-to-local, align 4
  store i1 %v2_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cab4, label %dec_label_pc_cb00, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_caac
  store i1 %v2_cabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cabc, label %dec_label_pc_ca1c, label %dec_label_pc_cac4

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  %v0_cac4 = load i32, i32* @r7, align 4
  store i32 %v0_cac4, i32* %r0.global-to-local, align 4
  %v1_cac8 = call i32 @close(i32 %v0_cac4)
  store i32 %v1_cac8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c8c4

dec_label_pc_cad0:                                ; preds = %dec_label_pc_ca1c
  %v0_cad0 = load i32, i32* @r7, align 4
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  %v1_cad4 = call i32 @close(i32 %v0_cad0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c8ec = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c8ec, i32* %r0.global-to-local, align 4
  %v2_c8f0 = icmp eq i32 %v3_c8ec, -1
  store i1 %v2_c8f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8ec, i32* @r7, align 4
  br i1 %v2_c8f0, label %dec_label_pc_cd50, label %dec_label_pc_c8fc

dec_label_pc_cadc:                                ; preds = %dec_label_pc_c870
  store i32 %v3_c858, i32* %r0.global-to-local, align 4
  %v1_cae0 = call i32 @close(i32 %v3_c858)
  store i32 %v1_cae0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cae4

dec_label_pc_cae4:                                ; preds = %dec_label_pc_ca2c, %dec_label_pc_c688, %dec_label_pc_cadc
  %v29_cae8 = phi i32 [ -1, %dec_label_pc_c688 ], [ %v1_cae0, %dec_label_pc_cadc ], [ 0, %dec_label_pc_ca2c ]
  store i32 %v3_c688, i32* %r4.global-to-local, align 4
  ret i32 %v29_cae8

dec_label_pc_caec:                                ; preds = %dec_label_pc_c9b0
  %v0_caec = call i32 @function_f28c()
  %v1_caec = trunc i32 %v0_caec to i8
  store i32 %v0_caec, i32* %r0.global-to-local, align 4
  %v4_caf0 = sdiv i32 %v0_caec, 256
  store i32 %v4_caf0, i32* %r3.global-to-local, align 4
  %v1_caf4 = trunc i32 %v4_caf0 to i8
  br label %dec_label_pc_c9e0

dec_label_pc_cb00:                                ; preds = %dec_label_pc_caac
  %v3_cb00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb00, i32* %r4.global-to-local, align 4
  store i32 %v4_c6a8, i32* %r2.global-to-local, align 4
  %v3_cb08 = mul i32 %v3_cb00, 16
  store i32 %v3_cb08, i32* %ip.global-to-local, align 4
  %v3_cb0c = add i32 %v3_cb08, %v4_c6a8
  %v4_cb0c = inttoptr i32 %v3_cb0c to i32*
  store i32 %storemerge35, i32* %v4_cb0c, align 4
  %v0_cb10 = load i32, i32* @r6, align 4
  %v1_cb10 = add i32 %v0_cb10, 4
  %v2_cb10 = inttoptr i32 %v1_cb10 to i32*
  %v3_cb10 = load i32, i32* %v2_cb10, align 4
  %v1_cb1c = and i32 %v3_cb10, 65280
  store i32 %v1_cb1c, i32* %r1.global-to-local, align 4
  %v3_cb20 = mul i32 %v3_cb10, 16777216
  store i32 %v4_c6a8, i32* %r0.global-to-local, align 4
  %v4_cb2c = mul nuw nsw i32 %v1_cb1c, 256
  %v5_cb2c = or i32 %v4_cb2c, %v3_cb20
  store i32 %v5_cb2c, i32* %r2.global-to-local, align 4
  %v1_cb30 = load i32, i32* %ip.global-to-local, align 4
  %v2_cb30 = add i32 %v1_cb30, %v4_c6a8
  store i32 %v2_cb30, i32* %ip.global-to-local, align 4
  %v2_cb34 = call i32 @llvm.bswap.i32(i32 %v3_cb10)
  store i32 %v2_cb34, i32* %r3.global-to-local, align 4
  %v2_cb38 = add i32 %v2_cb30, 4
  %v3_cb38 = inttoptr i32 %v2_cb38 to i32*
  store i32 %v2_cb34, i32* %v3_cb38, align 4
  %v0_cb3c = load i32, i32* @r6, align 4
  %v1_cb3c = add i32 %v0_cb3c, 8
  %v2_cb3c = inttoptr i32 %v1_cb3c to i32*
  %v3_cb3c = load i32, i32* %v2_cb3c, align 4
  store i32 %v3_cb3c, i32* %r0.global-to-local, align 4
  %v1_cb44 = and i32 %v3_cb3c, 65280
  store i32 %v1_cb44, i32* %r1.global-to-local, align 4
  %v3_cb48 = mul i32 %v3_cb3c, 16777216
  %v4_cb50 = mul nuw nsw i32 %v1_cb44, 256
  %v5_cb50 = or i32 %v4_cb50, %v3_cb48
  store i32 %v5_cb50, i32* %r2.global-to-local, align 4
  %v2_cb58 = call i32 @llvm.bswap.i32(i32 %v3_cb3c)
  store i32 %v2_cb58, i32* %r3.global-to-local, align 4
  %v1_cb5c = load i32, i32* %ip.global-to-local, align 4
  %v2_cb5c = add i32 %v1_cb5c, 8
  %v3_cb5c = inttoptr i32 %v2_cb5c to i32*
  store i32 %v2_cb58, i32* %v3_cb5c, align 4
  %v0_cb60 = load i32, i32* @r6, align 4
  %v1_cb60 = inttoptr i32 %v0_cb60 to i32*
  %v2_cb60 = load i32, i32* %v1_cb60, align 4
  %v3_cb64 = udiv i32 %v2_cb60, 65536
  store i32 %v3_cb64, i32* %r2.global-to-local, align 4
  %v3_cb686 = udiv i32 %v2_cb60, 16777216
  store i32 %v3_cb686, i32* %r1.global-to-local, align 4
  %v0_cb6c = load i32, i32* @r5, align 4
  %v3_cb6c = sdiv i32 %v0_cb6c, 256
  store i32 %v3_cb6c, i32* %r3.global-to-local, align 4
  %v1_cb70 = trunc i32 %v3_cb6c to i8
  %v2_cb70 = load i32, i32* %ip.global-to-local, align 4
  %v3_cb70 = add i32 %v2_cb70, 15
  %v4_cb70 = inttoptr i32 %v3_cb70 to i8*
  store i8 %v1_cb70, i8* %v4_cb70, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %ip.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 13
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v0_cb78 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb78 = trunc i32 %v0_cb78 to i8
  %v2_cb78 = load i32, i32* %ip.global-to-local, align 4
  %v3_cb78 = add i32 %v2_cb78, 12
  %v4_cb78 = inttoptr i32 %v3_cb78 to i8*
  store i8 %v1_cb78, i8* %v4_cb78, align 1
  %v0_cb7c = load i32, i32* @r5, align 4
  %v1_cb7c = trunc i32 %v0_cb7c to i8
  %v2_cb7c = load i32, i32* %ip.global-to-local, align 4
  %v3_cb7c = add i32 %v2_cb7c, 14
  %v4_cb7c = inttoptr i32 %v3_cb7c to i8*
  store i8 %v1_cb7c, i8* %v4_cb7c, align 1
  %v0_cb80 = load i32, i32* @sl, align 4
  store i32 %v0_cb80, i32* %r0.global-to-local, align 4
  %v1_cb84 = call i32* @malloc(i32 %v0_cb80)
  %v3_cb84 = ptrtoint i32* %v1_cb84 to i32
  store i32 %v3_cb84, i32* %r0.global-to-local, align 4
  store i32 %v4_c6b8, i32* %r1.global-to-local, align 4
  %v3_cb8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb8c, i32* %r2.global-to-local, align 4
  %v2_cb90 = load i32, i32* %r4.global-to-local, align 4
  %v5_cb90 = mul i32 %v2_cb90, 4
  %v6_cb90 = add i32 %v5_cb90, %v4_c6b8
  %v7_cb90 = inttoptr i32 %v6_cb90 to i32*
  store i32 %v3_cb84, i32* %v7_cb90, align 4
  %v0_cb94 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb94 = load i32, i32* %r2.global-to-local, align 4
  %v4_cb94 = mul i32 %v1_cb94, 4
  %v5_cb94 = add i32 %v4_cb94, %v0_cb94
  %v6_cb94 = inttoptr i32 %v5_cb94 to i32*
  %v7_cb94 = load i32, i32* %v6_cb94, align 4
  store i32 %v7_cb94, i32* @r4, align 4
  %v1_cb98 = inttoptr i32 %v7_cb94 to i8*
  %v2_cb98 = load i8, i8* %v1_cb98, align 1
  %tmp120 = urem i8 %v2_cb98, 16
  %v1_cb9c = zext i8 %tmp120 to i32
  %v1_cba0 = or i32 %v1_cb9c, 64
  store i32 %v1_cba0, i32* %r3.global-to-local, align 4
  %v1_cba4 = trunc i32 %v1_cba0 to i8
  store i8 %v1_cba4, i8* %v1_cb98, align 1
  %v0_cba8 = load i32, i32* @sl, align 4
  %v3_cba8 = mul i32 %v0_cba8, 65536
  store i32 %v3_cba8, i32* %r2.global-to-local, align 4
  %v0_cbac = load i32, i32* @r4, align 4
  %v1_cbac = inttoptr i32 %v0_cbac to i8*
  %v2_cbac = load i8, i8* %v1_cbac, align 1
  %v1_cbb4 = urem i32 %v0_cba8, 256
  %tmp91 = udiv i32 %v0_cba8, 256
  %v3_cbb8 = urem i32 %tmp91, 256
  %v1_cbbc = and i8 %v2_cbac, -16
  %v4_cbc0 = mul nuw nsw i32 %v1_cbb4, 256
  %v5_cbc0 = or i32 %v4_cbc0, %v3_cbb8
  store i32 %v5_cbc0, i32* %r2.global-to-local, align 4
  %v1_cbc4 = or i8 %v1_cbbc, 5
  store i32 %v1_c738, i32* %ip.global-to-local, align 4
  store i32 %v1_cbb4, i32* %r3.global-to-local, align 4
  store i8 %v1_cbc4, i8* %v1_cbac, align 1
  %v0_cbd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbd4 = trunc i32 %v0_cbd4 to i8
  %v2_cbd4 = load i32, i32* @r4, align 4
  %v3_cbd4 = add i32 %v2_cbd4, 3
  %v4_cbd4 = inttoptr i32 %v3_cbd4 to i8*
  store i8 %v1_cbd4, i8* %v4_cbd4, align 1
  store i32 %v4_cbd8, i32* %r3.global-to-local, align 4
  %v0_cbdc = load i32, i32* %ip.global-to-local, align 4
  %v2_cbdc = icmp eq i32 %v0_cbdc, 0
  store i1 %v2_cbdc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ca08, i32* %r0.global-to-local, align 4
  store i32 %v3_ca10, i32* %r1.global-to-local, align 4
  %v2_cbe8 = load i32, i32* @r4, align 4
  %v3_cbe8 = add i32 %v2_cbe8, 1
  %v4_cbe8 = inttoptr i32 %v3_cbe8 to i8*
  store i8 %v1_cbe8, i8* %v4_cbe8, align 1
  store i32 %v4_cbec, i32* %ip.global-to-local, align 4
  %v0_cbf0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbf0, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_cb00
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_cb00, %bb92
  %v0_cbf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbf4 = trunc i32 %v0_cbf4 to i8
  %v2_cbf4 = load i32, i32* @r4, align 4
  %v3_cbf4 = add i32 %v2_cbf4, 2
  %v4_cbf4 = inttoptr i32 %v3_cbf4 to i8*
  store i8 %v1_cbf4, i8* %v4_cbf4, align 1
  %v0_cbf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbf8, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_cbf8 = load i32, i32* %r3.global-to-local, align 4
  %v2_cbf8 = trunc i32 %v1_cbf8 to i8
  %v3_cbf8 = load i32, i32* @r4, align 4
  %v4_cbf8 = add i32 %v3_cbf8, 6
  %v5_cbf8 = inttoptr i32 %v4_cbf8 to i8*
  store i8 %v2_cbf8, i8* %v5_cbf8, align 1
  %v0_cbfc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbfc.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_cc04 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc04 = trunc i32 %v0_cc04 to i8
  %v2_cc04 = load i32, i32* @r4, align 4
  %v3_cc04 = add i32 %v2_cc04, 8
  %v4_cc04 = inttoptr i32 %v3_cc04 to i8*
  store i8 %v1_cc04, i8* %v4_cc04, align 1
  %v0_cc08 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc08 = trunc i32 %v0_cc08 to i8
  %v2_cc08 = load i32, i32* @r4, align 4
  %v3_cc08 = add i32 %v2_cc08, 9
  %v4_cc08 = inttoptr i32 %v3_cc08 to i8*
  store i8 %v1_cc08, i8* %v4_cc08, align 1
  %v0_cc0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc0c, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_cc0c = load i32, i32* %r2.global-to-local, align 4
  %v2_cc0c = trunc i32 %v1_cc0c to i8
  %v3_cc0c = load i32, i32* @r4, align 4
  %v4_cc0c = add i32 %v3_cc0c, 7
  %v5_cc0c = inttoptr i32 %v4_cc0c to i8*
  store i8 %v2_cc0c, i8* %v5_cc0c, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_cc14 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_cc14, i32* %r3.global-to-local, align 4
  %v1_cc18 = load i32, i32* @r4, align 4
  %v2_cc18 = add i32 %v1_cc18, 12
  %v3_cc18 = inttoptr i32 %v2_cc18 to i32*
  store i32 %v2_cc14, i32* %v3_cc18, align 4
  %v0_cc1c = load i32, i32* %r0.global-to-local, align 4
  %v1_cc1c = trunc i32 %v0_cc1c to i8
  %v2_cc1c = load i32, i32* @r4, align 4
  %v3_cc1c = add i32 %v2_cc1c, 4
  %v4_cc1c = inttoptr i32 %v3_cc1c to i8*
  store i8 %v1_cc1c, i8* %v4_cc1c, align 1
  %v3_cc20 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc20, i32* %r2.global-to-local, align 4
  store i32 %v4_c6a8, i32* %r0.global-to-local, align 4
  %v4_cc28 = mul i32 %v3_cc20, 16
  %v5_cc28 = add i32 %v4_cc28, %v4_c6a8
  %v6_cc28 = inttoptr i32 %v5_cc28 to i32*
  %v7_cc28 = load i32, i32* %v6_cc28, align 4
  store i32 %v7_cc28, i32* %r3.global-to-local, align 4
  %v0_cc2c = load i32, i32* %r1.global-to-local, align 4
  %v1_cc2c = trunc i32 %v0_cc2c to i8
  %v2_cc2c = load i32, i32* @r4, align 4
  %v3_cc2c = add i32 %v2_cc2c, 5
  %v4_cc2c = inttoptr i32 %v3_cc2c to i8*
  store i8 %v1_cc2c, i8* %v4_cc2c, align 1
  %v0_cc30 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc30 = load i32, i32* @r4, align 4
  %v2_cc30 = add i32 %v1_cc30, 16
  %v3_cc30 = inttoptr i32 %v2_cc30 to i32*
  store i32 %v0_cc30, i32* %v3_cc30, align 4
  %v0_cc34 = load i32, i32* %r2.global-to-local, align 4
  %v3_cc34 = mul i32 %v0_cc34, 16
  %v1_cc38 = load i32, i32* %r0.global-to-local, align 4
  %v2_cc38 = add i32 %v1_cc38, %v3_cc34
  store i32 %v2_cc38, i32* %r2.global-to-local, align 4
  %v1_cc3c = add i32 %v2_cc38, 13
  %v2_cc3c = inttoptr i32 %v1_cc3c to i8*
  %v3_cc3c = load i8, i8* %v2_cc3c, align 1
  %v4_cc3c = zext i8 %v3_cc3c to i32
  store i32 %v4_cc3c, i32* %r1.global-to-local, align 4
  %v1_cc40 = add i32 %v2_cc38, 12
  %v2_cc40 = inttoptr i32 %v1_cc40 to i8*
  %v3_cc40 = load i8, i8* %v2_cc40, align 1
  %v4_cc40 = zext i8 %v3_cc40 to i32
  %v4_cc44 = mul nuw nsw i32 %v4_cc3c, 256
  %v5_cc44 = or i32 %v4_cc40, %v4_cc44
  store i32 %v5_cc44, i32* %r3.global-to-local, align 4
  %v2_cc48 = load i32, i32* @r4, align 4
  %v3_cc48 = add i32 %v2_cc48, 20
  %v4_cc48 = inttoptr i32 %v3_cc48 to i8*
  store i8 %v3_cc40, i8* %v4_cc48, align 1
  %v0_cc4c = load i32, i32* @r4, align 4
  %v1_cc4c = add i32 %v0_cc4c, 20
  store i32 %v1_cc4c, i32* @r6, align 4
  %v0_cc50 = load i32, i32* %r3.global-to-local, align 4
  %v3_cc50 = sdiv i32 %v0_cc50, 256
  store i32 %v3_cc50, i32* %r3.global-to-local, align 4
  %v1_cc54 = trunc i32 %v3_cc50 to i8
  %v3_cc54 = add i32 %v0_cc4c, 21
  %v4_cc54 = inttoptr i32 %v3_cc54 to i8*
  store i8 %v1_cc54, i8* %v4_cc54, align 1
  %v0_cc58 = load i32, i32* @r6, align 4
  %v1_cc58 = add i32 %v0_cc58, 13
  %v2_cc58 = inttoptr i32 %v1_cc58 to i8*
  %v3_cc58 = load i8, i8* %v2_cc58, align 1
  %v4_cc58 = zext i8 %v3_cc58 to i32
  store i32 %v4_cc58, i32* %r3.global-to-local, align 4
  %v0_cc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc5c = add i32 %v0_cc5c, 8
  %v2_cc5c = inttoptr i32 %v1_cc5c to i32*
  %v3_cc5c = load i32, i32* %v2_cc5c, align 4
  store i32 %v3_cc5c, i32* %r1.global-to-local, align 4
  %v1_cc60 = or i32 %v4_cc58, 1
  store i32 %v1_cc60, i32* %r3.global-to-local, align 4
  %v1_cc64 = add i32 %v0_cc5c, 15
  %v2_cc64 = inttoptr i32 %v1_cc64 to i8*
  %v3_cc64 = load i8, i8* %v2_cc64, align 1
  %v4_cc64 = zext i8 %v3_cc64 to i32
  store i32 %v4_cc64, i32* %ip.global-to-local, align 4
  %v1_cc68 = add i32 %v0_cc5c, 14
  %v2_cc68 = inttoptr i32 %v1_cc68 to i8*
  %v3_cc68 = load i8, i8* %v2_cc68, align 1
  %v4_cc68 = zext i8 %v3_cc68 to i32
  store i32 %v4_cc68, i32* %r0.global-to-local, align 4
  %v2_cc6c = add i32 %v0_cc58, 4
  %v3_cc6c = inttoptr i32 %v2_cc6c to i32*
  store i32 %v3_cc5c, i32* %v3_cc6c, align 4
  %v0_cc70 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc70 = add i32 %v0_cc70, 4
  %v2_cc70 = inttoptr i32 %v1_cc70 to i32*
  %v3_cc70 = load i32, i32* %v2_cc70, align 4
  store i32 %v3_cc70, i32* %lr.global-to-local, align 4
  %v0_cc74 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r6, align 4
  %v3_cc74 = add i32 %v2_cc74, 13
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r6, align 4
  %v1_cc78 = add i32 %v0_cc78, 12
  %v2_cc78 = inttoptr i32 %v1_cc78 to i8*
  %v3_cc78 = load i8, i8* %v2_cc78, align 1
  %v4_cc78 = zext i8 %v3_cc78 to i32
  store i32 %v4_cc78, i32* %r2.global-to-local, align 4
  %v1_cc7c = add i32 %v0_cc78, 13
  %v2_cc7c = inttoptr i32 %v1_cc7c to i8*
  %v3_cc7c = load i8, i8* %v2_cc7c, align 1
  %v4_cc7c = zext i8 %v3_cc7c to i32
  %v0_cc80 = load i32, i32* %r0.global-to-local, align 4
  %v1_cc80 = load i32, i32* %ip.global-to-local, align 4
  %v4_cc80 = mul i32 %v1_cc80, 256
  %v5_cc80 = or i32 %v4_cc80, %v0_cc80
  store i32 %v5_cc80, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_cc78, 16
  %v1_cc84 = zext i8 %tmp121 to i32
  %v3_cc88 = sdiv i32 %v5_cc80, 256
  store i32 %v3_cc88, i32* %r1.global-to-local, align 4
  %v1_cc8c = or i32 %v1_cc84, 128
  store i32 %v1_cc8c, i32* %r2.global-to-local, align 4
  %v1_cc90 = or i32 %v4_cc7c, 16
  store i32 %v1_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = trunc i32 %v3_cc88 to i8
  %v3_cc94 = add i32 %v0_cc78, 3
  %v4_cc94 = inttoptr i32 %v3_cc94 to i8*
  store i8 %v1_cc94, i8* %v4_cc94, align 1
  %v0_cc98 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc98 = trunc i32 %v0_cc98 to i8
  %v2_cc98 = load i32, i32* @r6, align 4
  %v3_cc98 = add i32 %v2_cc98, 12
  %v4_cc98 = inttoptr i32 %v3_cc98 to i8*
  store i8 %v1_cc98, i8* %v4_cc98, align 1
  %v0_cc9c = load i32, i32* %r3.global-to-local, align 4
  %v1_cc9c = trunc i32 %v0_cc9c to i8
  %v2_cc9c = load i32, i32* @r6, align 4
  %v3_cc9c = add i32 %v2_cc9c, 13
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v1_cc9c, i8* %v4_cc9c, align 1
  %v0_cca0 = load i32, i32* %lr.global-to-local, align 4
  %v1_cca0 = load i32, i32* @r6, align 4
  %v2_cca0 = add i32 %v1_cca0, 8
  %v3_cca0 = inttoptr i32 %v2_cca0 to i32*
  store i32 %v0_cca0, i32* %v3_cca0, align 4
  %v0_cca4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cca4 = trunc i32 %v0_cca4 to i8
  %v2_cca4 = load i32, i32* @r6, align 4
  %v3_cca4 = add i32 %v2_cca4, 2
  %v4_cca4 = inttoptr i32 %v3_cca4 to i8*
  store i8 %v1_cca4, i8* %v4_cca4, align 1
  %v0_cca8 = call i32 @function_f28c()
  %v1_cca8 = trunc i32 %v0_cca8 to i8
  store i32 %v0_cca8, i32* %r0.global-to-local, align 4
  store i32 %v1_c770, i32* %r1.global-to-local, align 4
  %v0_ccb0 = load i32, i32* @r6, align 4
  %v1_ccb0 = add i32 %v0_ccb0, 13
  %v2_ccb0 = inttoptr i32 %v1_ccb0 to i8*
  %v3_ccb0 = load i8, i8* %v2_ccb0, align 1
  %v4_ccb0 = zext i8 %v3_ccb0 to i32
  store i32 %v1_ccb4, i32* %r2.global-to-local, align 4
  %v1_ccb8 = and i32 %v4_ccb0, 223
  %v5_ccbc = or i32 %v1_ccb8, %v4_ccbc
  store i32 %v5_ccbc, i32* %r3.global-to-local, align 4
  %v1_ccc0 = trunc i32 %v5_ccbc to i8
  store i8 %v1_ccc0, i8* %v2_ccb0, align 1
  store i32 %v1_c790, i32* %ip.global-to-local, align 4
  %v0_ccc8 = load i32, i32* @r6, align 4
  %v1_ccc8 = add i32 %v0_ccc8, 13
  %v2_ccc8 = inttoptr i32 %v1_ccc8 to i8*
  %v3_ccc8 = load i8, i8* %v2_ccc8, align 1
  %v4_ccc8 = zext i8 %v3_ccc8 to i32
  store i32 %v1_cccc, i32* %r3.global-to-local, align 4
  %v1_ccd0 = and i32 %v4_ccc8, 239
  %v5_ccd4 = or i32 %v1_ccd0, %v4_ccd4
  store i32 %v5_ccd4, i32* %r2.global-to-local, align 4
  %v1_ccd8 = trunc i32 %v5_ccd4 to i8
  store i8 %v1_ccd8, i8* %v2_ccc8, align 1
  store i32 %v1_c7b0, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* @r6, align 4
  %v1_cce0 = add i32 %v0_cce0, 13
  %v2_cce0 = inttoptr i32 %v1_cce0 to i8*
  %v3_cce0 = load i8, i8* %v2_cce0, align 1
  %v4_cce0 = zext i8 %v3_cce0 to i32
  store i32 %v1_cce4, i32* %r2.global-to-local, align 4
  %v1_cce8 = and i32 %v4_cce0, 247
  %v5_ccec = or i32 %v1_cce8, %v4_ccec
  store i32 %v5_ccec, i32* %r3.global-to-local, align 4
  %v1_ccf0 = trunc i32 %v5_ccec to i8
  store i8 %v1_ccf0, i8* %v2_cce0, align 1
  store i32 %v1_c7d0, i32* %ip.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r6, align 4
  %v1_ccf8 = add i32 %v0_ccf8, 13
  %v2_ccf8 = inttoptr i32 %v1_ccf8 to i8*
  %v3_ccf8 = load i8, i8* %v2_ccf8, align 1
  %v4_ccf8 = zext i8 %v3_ccf8 to i32
  store i32 %v1_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = and i32 %v4_ccf8, 251
  %v5_cd04 = or i32 %v1_cd00, %v4_cd04
  store i32 %v5_cd04, i32* %r2.global-to-local, align 4
  %v1_cd08 = trunc i32 %v5_cd04 to i8
  store i8 %v1_cd08, i8* %v2_ccf8, align 1
  store i32 %v1_c7f0, i32* %r1.global-to-local, align 4
  %v0_cd10 = load i32, i32* @r6, align 4
  %v1_cd10 = add i32 %v0_cd10, 13
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cd14, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 253
  %v4_cd1c = or i32 %v1_cd18, %v3_cd1c
  store i32 %v4_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v4_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  %v0_cd24 = load i32, i32* @r6, align 4
  %v1_cd24 = add i32 %v0_cd24, 13
  %v2_cd24 = inttoptr i32 %v1_cd24 to i8*
  %v3_cd24 = load i8, i8* %v2_cd24, align 1
  %v4_cd24 = zext i8 %v3_cd24 to i32
  %v0_cd28 = load i32, i32* @r8, align 4
  %v1_cd28 = urem i32 %v0_cd28, 2
  %v1_cd2c = and i32 %v4_cd24, 254
  store i32 %v1_cd2c, i32* %r2.global-to-local, align 4
  %v4_cd3037 = udiv i32 %v0_cca8, 256
  %v2_cd34 = or i32 %v1_cd2c, %v1_cd28
  store i32 %v2_cd34, i32* %r3.global-to-local, align 4
  %v1_cd38 = trunc i32 %v4_cd3037 to i8
  %v3_cd38 = add i32 %v0_cd24, 15
  %v4_cd38 = inttoptr i32 %v3_cd38 to i8*
  store i8 %v1_cd38, i8* %v4_cd38, align 1
  %v3_cd3c = load i32, i32* @r6, align 4
  %v4_cd3c = add i32 %v3_cd3c, 14
  %v5_cd3c = inttoptr i32 %v4_cd3c to i8*
  store i8 %v1_cca8, i8* %v5_cd3c, align 1
  %v0_cd40 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd40 = trunc i32 %v0_cd40 to i8
  %v2_cd40 = load i32, i32* @r6, align 4
  %v3_cd40 = add i32 %v2_cd40, 13
  %v4_cd40 = inttoptr i32 %v3_cd40 to i8*
  store i8 %v1_cd40, i8* %v4_cd40, align 1
  %v0_cd44 = load i32, i32* @r4, align 4
  %v1_cd44 = add i32 %v0_cd44, 40
  store i32 %v1_cd44, i32* %r0.global-to-local, align 4
  %v0_cd48 = load i32, i32* @sb, align 4
  store i32 %v0_cd48, i32* @r1, align 4
  %v1_cd4c = inttoptr i32 %v1_cd44 to i8*
  %v2_cd4c = call i32 @function_f40c(i8* %v1_cd4c)
  store i32 %v2_cd4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd50

dec_label_pc_cd50:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_cad0, %bb97
  %v3_cd50 = load i32, i32* %stack_var_-40, align 4
  %v1_cd54 = add i32 %v3_cd50, 1
  store i32 %v1_cd54, i32* %r3.global-to-local, align 4
  %v1_cd58 = load i32, i32* @fp, align 4
  %v9_cd58 = icmp eq i32 %v1_cd54, %v1_cd58
  store i1 %v9_cd58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd54, i32* %stack_var_-40, align 4
  %v5_cd60 = icmp slt i32 %v1_cd54, %v1_cd58
  br i1 %v5_cd60, label %dec_label_pc_c8c4, label %dec_label_pc_cd64

dec_label_pc_cd64:                                ; preds = %dec_label_pc_cd50, %.thread27
  %v0_cd6c21 = phi i32 [ %v0_c898, %.thread27 ], [ %v1_cd58, %dec_label_pc_cd50 ]
  %v0_cd64 = load i32, i32* @sb, align 4
  %v1_cd64 = add i32 %v0_cd64, 40
  store i32 %v1_cd64, i32* @sl, align 4
  %v1_cd68 = add i32 %v0_cd64, 20
  store i32 %v1_cd68, i32* @r7, align 4
  %v2_cee4 = icmp eq i32 %v1_c848, 0
  %v3_cda0 = icmp eq i32 %v3_c8a0, 65535
  br label %dec_label_pc_cd6c

dec_label_pc_cd6c:                                ; preds = %dec_label_pc_cdc8, %dec_label_pc_cd64
  %v0_cd6c = phi i32 [ %v1_cea8, %dec_label_pc_cdc8 ], [ %v0_cd6c21, %dec_label_pc_cd64 ]
  %v2_cd6c = icmp eq i32 %v0_cd6c, 0
  store i1 %v2_cd6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_cd6c, 1
  br label %dec_label_pc_cd74

dec_label_pc_cd74:                                ; preds = %dec_label_pc_cd74, %dec_label_pc_cd6c
  br i1 %tmp98, label %dec_label_pc_cd74, label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd74
  %v0_cd78 = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_cd78, 256
  %v1_cd80 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_cd78, 256
  %v4_cd84 = urem i32 %tmp100, 256
  %v5_cd84 = or i32 %v4_cd84, %v1_cd80
  store i32 %v5_cd84, i32* @r8, align 4
  store i32 %v4_c6b8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c8a0, i32* %ip.global-to-local, align 4
  %v7_cd98 = load i32, i32* %v2_c6b8, align 4
  store i32 %v7_cd98, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cda0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_cdac = add i32 %v7_cd98, 20
  store i32 %v1_cdac, i32* @r5, align 4
  br i1 %v3_cda0, label %dec_label_pc_ced4, label %dec_label_pc_cdb4

dec_label_pc_cdb4:                                ; preds = %dec_label_pc_ceb4, %dec_label_pc_cd78
  %v0_cdc0 = phi i32 [ %v7_cec0, %dec_label_pc_ceb4 ], [ %v7_cd98, %dec_label_pc_cd78 ]
  store i1 %v2_cee4, i1* %cpsr_z.global-to-local, align 1
  %v0_cdbc = load i32, i32* @sb, align 4
  store i32 %v0_cdbc, i32* @r1, align 4
  %v1_cdc0 = add i32 %v0_cdc0, 40
  store i32 %v1_cdc0, i32* %r0.global-to-local, align 4
  br i1 %v2_cee4, label %dec_label_pc_cdc8, label %dec_label_pc_cef8

dec_label_pc_cdc8:                                ; preds = %dec_label_pc_cdb4, %dec_label_pc_ced4, %dec_label_pc_cef8
  %v2_cdc8 = phi i32 [ %v0_cdc0, %dec_label_pc_cdb4 ], [ %v0_ceec, %dec_label_pc_ced4 ], [ %v2_cdc8.pre, %dec_label_pc_cef8 ]
  %v0_cdc8 = load i32, i32* @r6, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v3_cdc8 = add i32 %v2_cdc8, 10
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* @r4, align 4
  %v3_cdcc = add i32 %v2_cdcc, 11
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cdd4 = load i32, i32* @r4, align 4
  store i32 %v0_cdd4, i32* @r0, align 4
  %v2_cdd8 = call i32 @function_ddc4(i32 %v0_cdd4, i32 20)
  %v3_cdd8 = trunc i32 %v2_cdd8 to i8
  store i32 %v2_cdd8, i32* %r0.global-to-local, align 4
  %v3_cddc = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_c6a8, i32* %r2.global-to-local, align 4
  %v3_cde4 = mul i32 %v3_cddc, 16
  %v2_cde8 = add i32 %v3_cde4, %v4_c6a8
  store i32 %v2_cde8, i32* %r1.global-to-local, align 4
  %v1_cdec = add i32 %v2_cde8, 4
  %v2_cdec = inttoptr i32 %v1_cdec to i32*
  %v3_cdec = load i32, i32* %v2_cdec, align 4
  %v3_cdf0 = mul i32 %v3_cdec, 65536
  store i32 %v3_cdf0, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_cdec, 256
  %v1_cdf8 = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_cdec, 256
  %v4_cdfc = urem i32 %tmp102, 256
  %v5_cdfc = or i32 %v4_cdfc, %v1_cdf8
  store i32 %v5_cdfc, i32* %r2.global-to-local, align 4
  %v1_ce00 = add i32 %v3_cdec, 1
  store i32 %v1_ce00, i32* %r3.global-to-local, align 4
  store i32 %v1_ce00, i32* %v2_cdec, align 4
  %v0_ce08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce08 = load i32, i32* @r5, align 4
  %v2_ce08 = add i32 %v1_ce08, 4
  %v3_ce08 = inttoptr i32 %v2_ce08 to i32*
  store i32 %v0_ce08, i32* %v3_ce08, align 4
  %v0_ce0c = load i32, i32* %r1.global-to-local, align 4
  %v1_ce0c = add i32 %v0_ce0c, 8
  %v2_ce0c = inttoptr i32 %v1_ce0c to i32*
  %v3_ce0c = load i32, i32* %v2_ce0c, align 4
  %tmp103 = mul i32 %v3_ce0c, 256
  %v1_ce18 = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_ce0c, 256
  %v4_ce1c = urem i32 %tmp104, 256
  %v5_ce1c = or i32 %v4_ce1c, %v1_ce18
  store i32 %v5_ce1c, i32* %r2.global-to-local, align 4
  %v4_ce2038 = udiv i32 %v2_cdd8, 256
  %v1_ce24 = trunc i32 %v4_ce2038 to i8
  %v2_ce24 = load i32, i32* @r4, align 4
  %v3_ce24 = add i32 %v2_ce24, 11
  %v4_ce24 = inttoptr i32 %v3_ce24 to i8*
  store i8 %v1_ce24, i8* %v4_ce24, align 1
  %v3_ce28 = load i32, i32* @r4, align 4
  %v4_ce28 = add i32 %v3_ce28, 10
  %v5_ce28 = inttoptr i32 %v4_ce28 to i8*
  store i8 %v3_cdd8, i8* %v5_ce28, align 1
  %v0_ce2c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce2c = load i32, i32* @r5, align 4
  %v2_ce2c = add i32 %v1_ce2c, 8
  %v3_ce2c = inttoptr i32 %v2_ce2c to i32*
  store i32 %v0_ce2c, i32* %v3_ce2c, align 4
  %v0_ce30 = load i32, i32* @r5, align 4
  store i32 %v0_ce30, i32* @r1, align 4
  %v0_ce34 = load i32, i32* @r8, align 4
  store i32 %v0_ce34, i32* %r2.global-to-local, align 4
  %v0_ce38 = load i32, i32* @r7, align 4
  store i32 %v0_ce38, i32* %r3.global-to-local, align 4
  %v0_ce3c = load i32, i32* @r4, align 4
  store i32 %v0_ce3c, i32* %r0.global-to-local, align 4
  %v0_ce40 = load i32, i32* @r6, align 4
  %v1_ce40 = trunc i32 %v0_ce40 to i8
  %v3_ce40 = add i32 %v0_ce30, 16
  %v4_ce40 = inttoptr i32 %v3_ce40 to i8*
  store i8 %v1_ce40, i8* %v4_ce40, align 1
  %v0_ce44 = load i32, i32* @r6, align 4
  %v1_ce44 = trunc i32 %v0_ce44 to i8
  %v2_ce44 = load i32, i32* @r5, align 4
  %v3_ce44 = add i32 %v2_ce44, 17
  %v4_ce44 = inttoptr i32 %v3_ce44 to i8*
  store i8 %v1_ce44, i8* %v4_ce44, align 1
  %v4_ce48 = call i32 @function_de20(i32 %v0_ce3c, i32 %v0_ce30, i32 %v0_ce34, i32 %v0_ce38)
  %v5_ce48 = trunc i32 %v4_ce48 to i8
  store i32 %v4_ce48, i32* %r0.global-to-local, align 4
  %v4_ce4c39 = udiv i32 %v4_ce48, 256
  %v1_ce50 = trunc i32 %v4_ce4c39 to i8
  %v2_ce50 = load i32, i32* @r5, align 4
  %v3_ce50 = add i32 %v2_ce50, 17
  %v4_ce50 = inttoptr i32 %v3_ce50 to i8*
  store i8 %v1_ce50, i8* %v4_ce50, align 1
  %v3_ce54 = load i32, i32* @r5, align 4
  %v4_ce54 = add i32 %v3_ce54, 16
  %v5_ce54 = inttoptr i32 %v4_ce54 to i8*
  store i8 %v5_ce48, i8* %v5_ce54, align 1
  %v3_ce58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce58, i32* %r3.global-to-local, align 4
  %v0_ce5c = load i32, i32* @r4, align 4
  %v1_ce5c = add i32 %v0_ce5c, 20
  %v2_ce5c = inttoptr i32 %v1_ce5c to i32*
  %v3_ce5c = load i32, i32* %v2_ce5c, align 4
  %v5_ce64 = mul i32 %v3_ce58, 24
  %v3_ce6c = udiv i32 %v3_ce5c, 65536
  store i32 %v3_ce6c, i32* %r2.global-to-local, align 4
  %v2_ce70 = add i32 %v5_ce64, %arg2
  store i32 %v2_ce70, i32* %ip.global-to-local, align 4
  %v3_ce747 = udiv i32 %v3_ce5c, 16777216
  %v1_ce78 = trunc i32 %v3_ce747 to i8
  %v3_ce78 = add i32 %v2_ce70, 3
  %v4_ce78 = inttoptr i32 %v3_ce78 to i8*
  store i8 %v1_ce78, i8* %v4_ce78, align 1
  %v0_ce7c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce7c = trunc i32 %v0_ce7c to i8
  %v2_ce7c = load i32, i32* %ip.global-to-local, align 4
  %v3_ce7c = add i32 %v2_ce7c, 2
  %v4_ce7c = inttoptr i32 %v3_ce7c to i8*
  store i8 %v1_ce7c, i8* %v4_ce7c, align 1
  %v0_ce80 = load i32, i32* @r4, align 4
  store i32 %v0_ce80, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c858, i32* %r0.global-to-local, align 4
  %v0_ce8c = load i32, i32* @sl, align 4
  store i32 %v0_ce8c, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_ce94 = load i32, i32* %ip.global-to-local, align 4
  %v4_ce94 = inttoptr i32 %v0_ce94 to %sockaddr*
  %v7_ce9c = inttoptr i32 %v0_ce80 to i32*
  %v9_ce9c = call i32 @sendto(i32 %v3_c858, i32* %v7_ce9c, i32 %v0_ce8c, i32 16384, %sockaddr* %v4_ce94, i32 16)
  %v3_cea0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cea0, i32* %r3.global-to-local, align 4
  %v1_cea4 = add i32 %v3_cea0, 1
  store i32 %v1_cea4, i32* %r0.global-to-local, align 4
  %v1_cea8 = load i32, i32* @fp, align 4
  %v9_cea8 = icmp eq i32 %v1_cea4, %v1_cea8
  store i1 %v9_cea8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cea4, i32* %stack_var_-40, align 4
  %v6_ceb0 = icmp slt i32 %v1_cea4, %v1_cea8
  br i1 %v6_ceb0, label %dec_label_pc_ceb4, label %dec_label_pc_cd6c

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_cdc8
  store i32 %v4_c6b8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c8a0, i32* %ip.global-to-local, align 4
  %v4_cec0 = mul i32 %v1_cea4, 4
  %v5_cec0 = add i32 %v4_cec0, %v4_c6b8
  %v6_cec0 = inttoptr i32 %v5_cec0 to i32*
  %v7_cec0 = load i32, i32* %v6_cec0, align 4
  store i32 %v7_cec0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cda0, i1* %cpsr_z.global-to-local, align 1
  %v1_cecc = add i32 %v7_cec0, 20
  store i32 %v1_cecc, i32* @r5, align 4
  br i1 %v3_cda0, label %dec_label_pc_ced4, label %dec_label_pc_cdb4

dec_label_pc_ced4:                                ; preds = %dec_label_pc_ceb4, %dec_label_pc_cd78
  %v0_ced4 = call i32 @function_f28c()
  %v1_ced4 = trunc i32 %v0_ced4 to i8
  %v4_ced8 = sdiv i32 %v0_ced4, 256
  store i32 %v4_ced8, i32* %r3.global-to-local, align 4
  %v3_cedc = load i32, i32* @r4, align 4
  %v4_cedc = add i32 %v3_cedc, 4
  %v5_cedc = inttoptr i32 %v4_cedc to i8*
  store i8 %v1_ced4, i8* %v5_cedc, align 1
  store i1 %v2_cee4, i1* %cpsr_z.global-to-local, align 1
  %v0_cee8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* @r4, align 4
  %v3_cee8 = add i32 %v2_cee8, 5
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v0_ceec = load i32, i32* @r4, align 4
  %v1_ceec = add i32 %v0_ceec, 40
  store i32 %v1_ceec, i32* %r0.global-to-local, align 4
  %v0_cef0 = load i32, i32* @sb, align 4
  store i32 %v0_cef0, i32* @r1, align 4
  %v0_cef4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cef4, label %dec_label_pc_cdc8, label %dec_label_pc_cef8

dec_label_pc_cef8:                                ; preds = %dec_label_pc_cdb4, %dec_label_pc_ced4
  %v0_cef8 = phi i32 [ %v1_cdc0, %dec_label_pc_cdb4 ], [ %v1_ceec, %dec_label_pc_ced4 ]
  %v1_cef8 = inttoptr i32 %v0_cef8 to i8*
  %v2_cef8 = call i32 @function_f40c(i8* %v1_cef8)
  store i32 %v2_cef8, i32* %r0.global-to-local, align 4
  %v2_cdc8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdc8

; uselistorder directives
  uselistorder i32 %v0_ceec, { 1, 0 }
  uselistorder i32 %v7_cec0, { 1, 2, 0 }
  uselistorder i32 %v1_cea8, { 1, 2, 0 }
  uselistorder i32 %v1_cea4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ce48, { 0, 2, 1 }
  uselistorder i32 %v0_ce30, { 1, 0, 2 }
  uselistorder i32 %v3_ce0c, { 1, 0 }
  uselistorder i32 %v3_cdec, { 3, 2, 0, 1 }
  uselistorder i32 %v2_cdd8, { 0, 2, 1 }
  uselistorder i32 %v0_cdc0, { 1, 0 }
  uselistorder i32 %v0_cd78, { 1, 0 }
  uselistorder i32 %v0_cd6c, { 1, 0 }
  uselistorder i1 %v3_cda0, { 2, 3, 1, 0 }
  uselistorder i1 %v2_cee4, { 2, 1, 0 }
  uselistorder i32 %v1_cd54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cca8, { 0, 2, 1 }
  uselistorder i32 %v3_cc88, { 1, 0 }
  uselistorder i32 %v0_cc5c, { 1, 0, 2 }
  uselistorder i32 %v3_cc50, { 1, 0 }
  uselistorder i32 %v1_cbb4, { 1, 0 }
  uselistorder i32 %v0_cba8, { 1, 2, 0 }
  uselistorder i32 %v3_cb6c, { 1, 0 }
  uselistorder i32 %v2_cb58, { 1, 0 }
  uselistorder i32 %v3_cb3c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_cb34, { 1, 0 }
  uselistorder i32 %v3_cb10, { 1, 0, 2 }
  uselistorder i32 %v3_cb08, { 1, 0 }
  uselistorder i32 %v4_caf0, { 1, 0 }
  uselistorder i32 %v0_caec, { 0, 2, 1 }
  uselistorder i32 %v3_c8ec, { 1, 2, 3, 0 }
  uselistorder i32 %v5_caa0, { 1, 0 }
  uselistorder i1 %v9_ca84, { 1, 0 }
  uselistorder i32 %v4_ca98, { 1, 0 }
  uselistorder i32 %v4_ca94, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c98c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c978, { 1, 0 }
  uselistorder i32 %v7_c944, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_cd14, { 1, 0 }
  uselistorder i32 %v1_ccfc, { 1, 0 }
  uselistorder i32 %v1_cce4, { 1, 0 }
  uselistorder i32 %v1_cccc, { 1, 0 }
  uselistorder i32 %v1_ccb4, { 1, 0 }
  uselistorder i32 %v5_ca9c, { 1, 0 }
  uselistorder i32 %v3_c9d4113, { 1, 0 }
  uselistorder i1 %v2_cab4, { 1, 0 }
  uselistorder i32 %v1_cab0, { 1, 0 }
  uselistorder i32 %v4_caac, { 2, 0, 1 }
  uselistorder i32 %v4_ca90, { 1, 0 }
  uselistorder i1 %v3_c9bc, { 1, 0 }
  uselistorder i32 %v1_c8d0, { 2, 1, 0 }
  uselistorder i32 %v8_c8ac, { 2, 1, 0 }
  uselistorder i32 %v8_c8a8, { 1, 2, 0 }
  uselistorder i32 %v3_c8a0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c89c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c85c, { 2, 3, 0, 1 }
  uselistorder i32 %v3_c858, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_c848, { 1, 0 }
  uselistorder i32 %v1_c7f0, { 1, 0 }
  uselistorder i32 %v1_c7d0, { 1, 0 }
  uselistorder i32 %v1_c7b0, { 1, 0 }
  uselistorder i32 %v1_c790, { 1, 0 }
  uselistorder i32 %v1_c770, { 1, 0 }
  uselistorder i32 %v1_c738, { 1, 0 }
  uselistorder i32 %v4_c6b8, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_c6a8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c68c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 67, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 45, 42, 28, 31, 29, 32, 33, 30, 35, 34, 36, 37, 38, 40, 39, 41, 65, 64, 43, 44, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_cef8, { 1, 0 }
  uselistorder label %dec_label_pc_cdc8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cd50, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_cae4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ca1c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c9b0, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
}

define i32 @function_cf04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cf04:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cf04 = load i32, i32* @r4, align 4
  %v1_cf08 = urem i32 %arg1, 256
  store i32 %v1_cf08, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_cf20 = urem i32 %arg3, 256
  store i32 %v1_cf20, i32* @r4, align 4
  %v2_cf24 = call i32* @calloc(i32 %v1_cf08, i32 4)
  %v4_cf24 = ptrtoint i32* %v2_cf24 to i32
  %v0_cf28 = load i32, i32* @r5, align 4
  store i32 %v0_cf28, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cf38 = load i32, i32* @r4, align 4
  %v5_cf3c = inttoptr i32 %v0_cf28 to i32*
  %v6_cf3c = call i32 @function_92ac(i32 %v0_cf38, i32* %v5_cf3c, i32 2, i32 0)
  %v1_cf48 = urem i32 %v6_cf3c, 256
  store i32 %v1_cf48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cf54 = load i32, i32* @r5, align 4
  store i32 %v0_cf54, i32* %r1.global-to-local, align 4
  %v0_cf58 = load i32, i32* @r4, align 4
  %v5_cf5c = trunc i32 %v6_cf3c to i8
  %v6_cf60 = inttoptr i32 %v0_cf54 to i32*
  %v7_cf60 = call i32 @function_92ac(i32 %v0_cf58, i32* %v6_cf60, i32 3, i32 65535)
  %v0_cf64 = load i32, i32* @r5, align 4
  store i32 %v0_cf64, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cf60, i32* @r8, align 4
  %v0_cf74 = load i32, i32* @r4, align 4
  %v4_cf78 = inttoptr i32 %v0_cf64 to i32*
  %v5_cf78 = call i32 @function_92ac(i32 %v0_cf74, i32* %v4_cf78, i32 4, i32 64)
  %v1_cf80 = urem i32 %v5_cf78, 256
  store i32 %v1_cf80, i32* %ip.global-to-local, align 4
  %v0_cf84 = load i32, i32* @r5, align 4
  store i32 %v0_cf84, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cf90 = load i32, i32* @r4, align 4
  %v6_cf98 = inttoptr i32 %v0_cf84 to i32*
  %v7_cf98 = call i32 @function_92ac(i32 %v0_cf90, i32* %v6_cf98, i32 5, i32 0)
  %v1_cfa4 = urem i32 %v7_cf98, 256
  store i32 %v1_cfa4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cfb0 = load i32, i32* @r5, align 4
  store i32 %v0_cfb0, i32* %r1.global-to-local, align 4
  %v0_cfb4 = load i32, i32* @r4, align 4
  %v5_cfbc = inttoptr i32 %v0_cfb0 to i32*
  %v6_cfbc = call i32 @function_92ac(i32 %v0_cfb4, i32* %v5_cfbc, i32 6, i32 65535)
  %v0_cfc4 = load i32, i32* @r5, align 4
  store i32 %v0_cfc4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cfbc, i32* @r7, align 4
  %v0_cfd4 = load i32, i32* @r4, align 4
  %v4_cfd8 = inttoptr i32 %v0_cfc4 to i32*
  %v5_cfd8 = call i32 @function_92ac(i32 %v0_cfd4, i32* %v4_cfd8, i32 7, i32 65535)
  %v0_cfe0 = load i32, i32* @r5, align 4
  store i32 %v0_cfe0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_cfd8, i32* @r6, align 4
  %v0_cff0 = load i32, i32* @r4, align 4
  %v4_cff4 = inttoptr i32 %v0_cfe0 to i32*
  %v5_cff4 = call i32 @function_92ac(i32 %v0_cff0, i32* %v4_cff4, i32 17, i32 65535)
  %v0_d000 = load i32, i32* @r5, align 4
  store i32 %v0_d000, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_d00c = load i32, i32* @r4, align 4
  %v5_d010 = inttoptr i32 %v0_d000 to i32*
  %v6_d010 = call i32 @function_92ac(i32 %v0_d00c, i32* %v5_d010, i32 18, i32 65535)
  %v0_d014 = load i32, i32* @r5, align 4
  store i32 %v0_d014, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d024 = load i32, i32* @r4, align 4
  %v5_d028 = inttoptr i32 %v0_d014 to i32*
  %v6_d028 = call i32 @function_92ac(i32 %v0_d024, i32* %v5_d028, i32 11, i32 0)
  %v0_d02c = load i32, i32* @r5, align 4
  store i32 %v0_d02c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d03c = load i32, i32* @r4, align 4
  %v5_d040 = inttoptr i32 %v0_d02c to i32*
  %v6_d040 = call i32 @function_92ac(i32 %v0_d03c, i32* %v5_d040, i32 12, i32 1)
  %v0_d044 = load i32, i32* @r5, align 4
  store i32 %v0_d044, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d054 = load i32, i32* @r4, align 4
  %v5_d058 = inttoptr i32 %v0_d044 to i32*
  %v6_d058 = call i32 @function_92ac(i32 %v0_d054, i32* %v5_d058, i32 13, i32 0)
  %v0_d05c = load i32, i32* @r5, align 4
  store i32 %v0_d05c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d06c = load i32, i32* @r4, align 4
  %v5_d070 = inttoptr i32 %v0_d05c to i32*
  %v6_d070 = call i32 @function_92ac(i32 %v0_d06c, i32* %v5_d070, i32 14, i32 0)
  %v0_d074 = load i32, i32* @r5, align 4
  store i32 %v0_d074, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d084 = load i32, i32* @r4, align 4
  %v5_d088 = inttoptr i32 %v0_d074 to i32*
  %v6_d088 = call i32 @function_92ac(i32 %v0_d084, i32* %v5_d088, i32 15, i32 0)
  %v0_d08c = load i32, i32* @r5, align 4
  store i32 %v0_d08c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d09c = load i32, i32* @r4, align 4
  %v5_d0a0 = inttoptr i32 %v0_d08c to i32*
  %v6_d0a0 = call i32 @function_92ac(i32 %v0_d09c, i32* %v5_d0a0, i32 16, i32 0)
  %v0_d0a4 = load i32, i32* @r5, align 4
  store i32 %v0_d0a4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_d0b4 = load i32, i32* @r4, align 4
  %v5_d0b8 = inttoptr i32 %v0_d0a4 to i32*
  %v6_d0b8 = call i32 @function_92ac(i32 %v0_d0b4, i32* %v5_d0b8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d0c8 = load i32, i32* @r5, align 4
  store i32 %v0_d0c8, i32* %r1.global-to-local, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  %v4_d0d0 = inttoptr i32 %v0_d0c8 to i32*
  %v5_d0d0 = call i32 @function_92ac(i32 %v0_d0cc, i32* %v4_d0d0, i32 1, i32 1)
  %v2_d0dc = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_d0dc, i32* %r3.global-to-local, align 4
  %v1_d0e0 = urem i32 %v5_d0d0, 256
  store i32 %v1_d0e0, i32* %ip.global-to-local, align 4
  %v0_d0e4 = load i32, i32* @r5, align 4
  store i32 %v0_d0e4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d0ec = load i32, i32* @r4, align 4
  %v5_d0f4 = inttoptr i32 %v0_d0e4 to i32*
  %v6_d0f4 = call i32 @function_9240(i32 %v0_d0ec, i32* %v5_d0f4, i32 25, i32 %v2_d0dc, i32 %v1_d0e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_d108 = call i32 @socket(i32 2, i32 3, i32 6)
  %v2_d10c = icmp eq i32 %v3_d108, -1
  store i1 %v2_d10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d10c, label %dec_label_pc_d544, label %dec_label_pc_d118

dec_label_pc_d118:                                ; preds = %dec_label_pc_cf04
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d120 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d120, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_d134 = call i32 @setsockopt(i32 %v3_d108, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v2_d138 = icmp eq i32 %v7_d134, -1
  store i1 %v2_d138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d138, label %dec_label_pc_d53c, label %dec_label_pc_d140

dec_label_pc_d140:                                ; preds = %dec_label_pc_d118
  %v0_d140 = load i32, i32* @r8, align 4
  %v0_d144 = load i32, i32* @r7, align 4
  %v0_d148 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d150 = urem i32 %v0_d140, 65536
  store i32 %v3_d150, i32* %r2.global-to-local, align 4
  %v3_d154 = urem i32 %v0_d144, 65536
  store i32 %v3_d154, i32* %r3.global-to-local, align 4
  %v3_d158 = urem i32 %v0_d148, 65536
  store i32 %v3_d158, i32* %ip.global-to-local, align 4
  %v0_d15c = load i32, i32* @fp, align 4
  %v2_d15c = icmp eq i32 %v0_d15c, 0
  store i1 %v2_d15c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_d15c, 1
  br i1 %tmp76, label %dec_label_pc_d65c, label %dec_label_pc_d174

dec_label_pc_d174:                                ; preds = %dec_label_pc_d140
  %v1_d17c = add i32 %v6_d0b8, 40
  %tmp77 = mul i32 %v1_d17c, 256
  %v1_d190 = urem i32 %v0_d144, 256
  %v1_d194 = and i32 %tmp77, 65280
  %v3_d198 = mul nuw nsw i32 %v1_d190, 256
  %v1_d1a0 = urem i32 %v0_d148, 256
  %tmp78 = udiv i32 %v0_d148, 256
  %v3_d1a4 = urem i32 %tmp78, 256
  %tmp79 = udiv i32 %v1_d17c, 256
  %tmp80 = udiv i32 %v0_d144, 256
  %v4_d1ac = urem i32 %tmp80, 256
  %v5_d1ac = or i32 %v4_d1ac, %v3_d198
  store i32 %v5_d1ac, i32* @sl, align 4
  %v4_d1b0 = mul nuw nsw i32 %v1_d1a0, 256
  %v5_d1b0 = or i32 %v4_d1b0, %v3_d1a4
  store i32 %v5_d1b0, i32* @r6, align 4
  %tmp81 = udiv i32 %v0_d140, 256
  %v3_d1c0 = urem i32 %tmp81, 256
  %v1_d1c4 = urem i32 %v0_d140, 256
  %tmp82 = mul i32 %v5_cff4, 256
  %v1_d1cc = and i32 %tmp82, 65280
  %v1_d1d0 = urem i32 %v6_d028, 2
  %v1_d1d4 = urem i32 %v6_d040, 2
  %v1_d1d8 = urem i32 %v6_d058, 2
  %tmp83 = udiv i32 %v5_cff4, 256
  %v4_d1dc = urem i32 %tmp83, 256
  %v5_d1dc = or i32 %v4_d1dc, %v1_d1cc
  store i32 %v5_d1dc, i32* @r8, align 4
  %v1_d1fc = urem i32 %v6_d070, 2
  %v1_d200 = urem i32 %v6_d088, 2
  %v1_d204 = urem i32 %v6_d0a0, 2
  %v1_d208 = urem i32 %v6_d058, 256
  %v4_d20c = mul nuw nsw i32 %v1_d1c4, 256
  %v5_d20c = or i32 %v4_d20c, %v3_d1c0
  store i32 %v5_d20c, i32* @r5, align 4
  %v3_d22026 = udiv i32 %v1_d194, 256
  store i32 %v3_d22026, i32* %r3.global-to-local, align 4
  store i32 %v1_d1c4, i32* %ip.global-to-local, align 4
  store i32 %v1_d190, i32* %r1.global-to-local, align 4
  store i32 %v1_d1a0, i32* %r2.global-to-local, align 4
  %v5_d23c = trunc i32 %v0_d144 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext9 = mul i32 %v5_cf78, 16777216
  %v4_d298 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v0_d140, 16777216
  %v4_d2a4 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %tmp79, 16777216
  %v4_d2b8 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v1_d17c, 16777216
  %v4_d2bc = sdiv i32 %sext12, 16777216
  %tmp = sub nsw i32 0, %v1_d1d0
  %v4_d30c = and i32 %tmp, 32
  %tmp94 = sub nsw i32 0, %v1_d1d4
  %v4_d320 = and i32 %tmp94, 16
  %tmp95 = sub nsw i32 0, %v1_d1d8
  %v4_d334 = and i32 %tmp95, 8
  %tmp96 = sub nsw i32 0, %v1_d1fc
  %v4_d348 = and i32 %tmp96, 4
  %tmp97 = sub nsw i32 0, %v1_d200
  %v3_d35c = and i32 %tmp97, 2
  %sext13 = mul i32 %v0_d148, 16777216
  %v7_d38c = sdiv i32 %sext13, 16777216
  %v1_d2a0 = trunc i32 %v4_d298 to i8
  %extract.t = trunc i32 %v4_d2a4 to i8
  %v3_d38c = sext i8 %v5_d23c to i32
  %v2_d3b0 = icmp eq i32 %v1_d208, 0
  br label %dec_label_pc_d248

dec_label_pc_d248:                                ; preds = %bb90, %dec_label_pc_d174
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d254 = call i32* @calloc(i32 1510, i32 1)
  %v4_d254 = ptrtoint i32* %v2_d254 to i32
  store i32 %v4_cf24, i32* %ip.global-to-local, align 4
  %v2_d260 = load i32, i32* %r4.global-to-local, align 4
  %v5_d260 = mul i32 %v2_d260, 4
  %v6_d260 = add i32 %v5_d260, %v4_cf24
  %v7_d260 = inttoptr i32 %v6_d260 to i32*
  store i32 %v4_d254, i32* %v7_d260, align 4
  %v3_d264 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d264, i32* %r3.global-to-local, align 4
  %v0_d268 = load i32, i32* %ip.global-to-local, align 4
  %v4_d268 = mul i32 %v3_d264, 4
  %v5_d268 = add i32 %v0_d268, %v4_d268
  %v6_d268 = inttoptr i32 %v5_d268 to i32*
  %v7_d268 = load i32, i32* %v6_d268, align 4
  store i32 %v7_d268, i32* @r7, align 4
  %v1_d26c = inttoptr i32 %v7_d268 to i8*
  %v2_d26c = load i8, i8* %v1_d26c, align 1
  %tmp98 = urem i8 %v2_d26c, 16
  %v1_d270 = zext i8 %tmp98 to i32
  %v1_d274 = or i32 %v1_d270, 64
  store i32 %v1_d274, i32* %r2.global-to-local, align 4
  %v1_d278 = trunc i32 %v1_d274 to i8
  store i8 %v1_d278, i8* %v1_d26c, align 1
  %v0_d27c = load i32, i32* @r7, align 4
  %v1_d27c = inttoptr i32 %v0_d27c to i8*
  %v2_d27c = load i8, i8* %v1_d27c, align 1
  %v1_d280 = and i8 %v2_d27c, -16
  %v1_d284 = or i8 %v1_d280, 5
  store i32 %v1_cfa4, i32* %r1.global-to-local, align 4
  store i8 %v1_d284, i8* %v1_d27c, align 1
  %v2_d294 = load i32, i32* @r7, align 4
  %v3_d294 = add i32 %v2_d294, 1
  %v4_d294 = inttoptr i32 %v3_d294 to i8*
  store i8 %v5_cf5c, i8* %v4_d294, align 1
  store i32 %v4_d298, i32* %r3.global-to-local, align 4
  %v0_d29c = load i32, i32* %r1.global-to-local, align 4
  %v2_d29c = icmp eq i32 %v0_d29c, 0
  store i1 %v2_d29c, i1* %cpsr_z.global-to-local, align 1
  %v2_d2a0 = load i32, i32* @r7, align 4
  %v3_d2a0 = add i32 %v2_d2a0, 8
  %v4_d2a0 = inttoptr i32 %v3_d2a0 to i8*
  store i8 %v1_d2a0, i8* %v4_d2a0, align 1
  store i32 %v4_d2a4, i32* %r2.global-to-local, align 4
  %v0_d2a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2a8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d248
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d2ac = load i32, i32* @r7, align 4
  %v4_d2ac = add i32 %v3_d2ac, 6
  %v5_d2ac = inttoptr i32 %v4_d2ac to i8*
  store i8 64, i8* %v5_d2ac, align 1
  %v0_d2b4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_d2b4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d248, %bb
  %v0_d2b4.off0 = phi i8 [ %extract.t, %dec_label_pc_d248 ], [ %extract.t27, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_d2b4 = load i32, i32* @r7, align 4
  %v3_d2b4 = add i32 %v2_d2b4, 5
  %v4_d2b4 = inttoptr i32 %v3_d2b4 to i8*
  store i8 %v0_d2b4.off0, i8* %v4_d2b4, align 1
  store i32 %v4_d2b8, i32* %ip.global-to-local, align 4
  store i32 %v4_d2bc, i32* %r1.global-to-local, align 4
  %v0_d2c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2c0, label %bb85, label %bb84

bb84:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %bb84
  %v0_d2c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2c4 = trunc i32 %v0_d2c4 to i8
  %v2_d2c4 = load i32, i32* @r7, align 4
  %v3_d2c4 = add i32 %v2_d2c4, 9
  %v4_d2c4 = inttoptr i32 %v3_d2c4 to i8*
  store i8 %v1_d2c4, i8* %v4_d2c4, align 1
  %v0_d2c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2c8, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  %v1_d2c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_d2c8 = trunc i32 %v1_d2c8 to i8
  %v3_d2c8 = load i32, i32* @r7, align 4
  %v4_d2c8 = add i32 %v3_d2c8, 7
  %v5_d2c8 = inttoptr i32 %v4_d2c8 to i8*
  store i8 %v2_d2c8, i8* %v5_d2c8, align 1
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  %v3_d2cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2cc, i32* %r2.global-to-local, align 4
  %v0_d2d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_d2d0 = trunc i32 %v0_d2d0 to i8
  %v2_d2d0 = load i32, i32* @r7, align 4
  %v3_d2d0 = add i32 %v2_d2d0, 2
  %v4_d2d0 = inttoptr i32 %v3_d2d0 to i8*
  store i8 %v1_d2d0, i8* %v4_d2d0, align 1
  store i32 %v6_d0f4, i32* %ip.global-to-local, align 4
  %v0_d2d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_d2d8 = mul i32 %v0_d2d8, 32
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v1_d2dc = load i32, i32* @r7, align 4
  %v2_d2dc = add i32 %v1_d2dc, 12
  %v3_d2dc = inttoptr i32 %v2_d2dc to i32*
  store i32 %v6_d0f4, i32* %v3_d2dc, align 4
  %v0_d2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2e0 = load i32, i32* %r2.global-to-local, align 4
  %tmp99 = mul i32 %v1_d2e0, -8
  %v5_d2e0 = add i32 %v0_d2e0, %tmp99
  %v1_d2e4 = load i32, i32* @sb, align 4
  %v2_d2e4 = add i32 %v1_d2e4, %v5_d2e0
  store i32 %v2_d2e4, i32* %r3.global-to-local, align 4
  %v1_d2e8 = add i32 %v2_d2e4, 16
  %v2_d2e8 = inttoptr i32 %v1_d2e8 to i32*
  %v3_d2e8 = load i32, i32* %v2_d2e8, align 4
  store i32 %v3_d2e8, i32* %r2.global-to-local, align 4
  %v0_d2ec = load i32, i32* %r1.global-to-local, align 4
  %v1_d2ec = trunc i32 %v0_d2ec to i8
  %v2_d2ec = load i32, i32* @r7, align 4
  %v3_d2ec = add i32 %v2_d2ec, 3
  %v4_d2ec = inttoptr i32 %v3_d2ec to i8*
  store i8 %v1_d2ec, i8* %v4_d2ec, align 1
  %v0_d2f0 = load i32, i32* @r5, align 4
  %v1_d2f0 = trunc i32 %v0_d2f0 to i8
  %v2_d2f0 = load i32, i32* @r7, align 4
  %v3_d2f0 = add i32 %v2_d2f0, 4
  %v4_d2f0 = inttoptr i32 %v3_d2f0 to i8*
  store i8 %v1_d2f0, i8* %v4_d2f0, align 1
  %v0_d2f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d2f4 = load i32, i32* @r7, align 4
  %v2_d2f4 = add i32 %v1_d2f4, 16
  %v3_d2f4 = inttoptr i32 %v2_d2f4 to i32*
  store i32 %v0_d2f4, i32* %v3_d2f4, align 4
  %v0_d2f8 = load i32, i32* @sl, align 4
  %v1_d2f8 = trunc i32 %v0_d2f8 to i8
  %v2_d2f8 = load i32, i32* @r7, align 4
  %v3_d2f8 = add i32 %v2_d2f8, 20
  %v4_d2f8 = inttoptr i32 %v3_d2f8 to i8*
  store i8 %v1_d2f8, i8* %v4_d2f8, align 1
  %v0_d2fc = load i32, i32* @r7, align 4
  %v1_d2fc = add i32 %v0_d2fc, 20
  store i32 %v1_d2fc, i32* @r4, align 4
  %v1_d300 = add i32 %v0_d2fc, 33
  %v2_d300 = inttoptr i32 %v1_d300 to i8*
  %v3_d300 = load i8, i8* %v2_d300, align 1
  %v4_d300 = zext i8 %v3_d300 to i32
  store i32 %v1_d1d0, i32* %r1.global-to-local, align 4
  %v1_d308 = and i32 %v4_d300, 223
  %v5_d30c = or i32 %v1_d308, %v4_d30c
  store i32 %v5_d30c, i32* %r3.global-to-local, align 4
  %v1_d310 = trunc i32 %v5_d30c to i8
  store i8 %v1_d310, i8* %v2_d300, align 1
  %v0_d314 = load i32, i32* @r4, align 4
  %v1_d314 = add i32 %v0_d314, 13
  %v2_d314 = inttoptr i32 %v1_d314 to i8*
  %v3_d314 = load i8, i8* %v2_d314, align 1
  %v4_d314 = zext i8 %v3_d314 to i32
  store i32 %v1_d1d4, i32* %r3.global-to-local, align 4
  %v1_d31c = and i32 %v4_d314, 239
  %v5_d320 = or i32 %v1_d31c, %v4_d320
  store i32 %v5_d320, i32* %r2.global-to-local, align 4
  %v1_d324 = trunc i32 %v5_d320 to i8
  store i8 %v1_d324, i8* %v2_d314, align 1
  %v0_d328 = load i32, i32* @r4, align 4
  %v1_d328 = add i32 %v0_d328, 13
  %v2_d328 = inttoptr i32 %v1_d328 to i8*
  %v3_d328 = load i8, i8* %v2_d328, align 1
  %v4_d328 = zext i8 %v3_d328 to i32
  store i32 %v1_d1d8, i32* %ip.global-to-local, align 4
  %v1_d330 = and i32 %v4_d328, 247
  %v5_d334 = or i32 %v1_d330, %v4_d334
  store i32 %v5_d334, i32* %r3.global-to-local, align 4
  %v1_d338 = trunc i32 %v5_d334 to i8
  store i8 %v1_d338, i8* %v2_d328, align 1
  %v0_d33c = load i32, i32* @r4, align 4
  %v1_d33c = add i32 %v0_d33c, 13
  %v2_d33c = inttoptr i32 %v1_d33c to i8*
  %v3_d33c = load i8, i8* %v2_d33c, align 1
  %v4_d33c = zext i8 %v3_d33c to i32
  store i32 %v1_d1fc, i32* %r1.global-to-local, align 4
  %v1_d344 = and i32 %v4_d33c, 251
  %v5_d348 = or i32 %v1_d344, %v4_d348
  store i32 %v5_d348, i32* %r2.global-to-local, align 4
  %v1_d34c = trunc i32 %v5_d348 to i8
  store i8 %v1_d34c, i8* %v2_d33c, align 1
  %v0_d350 = load i32, i32* @r4, align 4
  %v1_d350 = add i32 %v0_d350, 13
  %v2_d350 = inttoptr i32 %v1_d350 to i8*
  %v3_d350 = load i8, i8* %v2_d350, align 1
  %v4_d350 = zext i8 %v3_d350 to i32
  store i32 %v1_d200, i32* %r2.global-to-local, align 4
  %v1_d358 = and i32 %v4_d350, 253
  %v4_d35c = or i32 %v1_d358, %v3_d35c
  store i32 %v4_d35c, i32* %r3.global-to-local, align 4
  %v1_d360 = trunc i32 %v4_d35c to i8
  store i8 %v1_d360, i8* %v2_d350, align 1
  %v0_d364 = load i32, i32* @r4, align 4
  %v1_d364 = add i32 %v0_d364, 12
  %v2_d364 = inttoptr i32 %v1_d364 to i8*
  %v3_d364 = load i8, i8* %v2_d364, align 1
  %v4_d364 = zext i8 %v3_d364 to i32
  store i32 %v4_d364, i32* %r2.global-to-local, align 4
  %v1_d368 = add i32 %v0_d364, 13
  %v2_d368 = inttoptr i32 %v1_d368 to i8*
  %v3_d368 = load i8, i8* %v2_d368, align 1
  %v4_d368 = zext i8 %v3_d368 to i32
  store i32 %v1_d204, i32* %ip.global-to-local, align 4
  %tmp100 = urem i8 %v3_d364, 16
  %v1_d370 = zext i8 %tmp100 to i32
  %v1_d374 = and i32 %v4_d368, 254
  %v2_d378 = or i32 %v1_d374, %v1_d204
  store i32 %v2_d378, i32* %r3.global-to-local, align 4
  %v1_d37c = or i32 %v1_d370, 80
  store i32 %v1_d37c, i32* %r2.global-to-local, align 4
  %v1_d380 = trunc i32 %v2_d378 to i8
  store i8 %v1_d380, i8* %v2_d368, align 1
  %v0_d384 = load i32, i32* %r2.global-to-local, align 4
  %v1_d384 = trunc i32 %v0_d384 to i8
  %v2_d384 = load i32, i32* @r4, align 4
  %v3_d384 = add i32 %v2_d384, 12
  %v4_d384 = inttoptr i32 %v3_d384 to i8*
  store i8 %v1_d384, i8* %v4_d384, align 1
  store i32 %v3_d38c, i32* %r1.global-to-local, align 4
  store i32 %v7_d38c, i32* %r2.global-to-local, align 4
  %v2_d390 = load i32, i32* @r4, align 4
  %v3_d390 = add i32 %v2_d390, 1
  %v4_d390 = inttoptr i32 %v3_d390 to i8*
  store i8 %v5_d23c, i8* %v4_d390, align 1
  %v0_d394 = load i32, i32* %r2.global-to-local, align 4
  %v1_d394 = trunc i32 %v0_d394 to i8
  %v2_d394 = load i32, i32* @r4, align 4
  %v3_d394 = add i32 %v2_d394, 3
  %v4_d394 = inttoptr i32 %v3_d394 to i8*
  store i8 %v1_d394, i8* %v4_d394, align 1
  %v0_d398 = load i32, i32* @r6, align 4
  %v1_d398 = trunc i32 %v0_d398 to i8
  %v2_d398 = load i32, i32* @r4, align 4
  %v3_d398 = add i32 %v2_d398, 2
  %v4_d398 = inttoptr i32 %v3_d398 to i8*
  store i8 %v1_d398, i8* %v4_d398, align 1
  %v0_d39c = load i32, i32* @r8, align 4
  %v1_d39c = load i32, i32* @r4, align 4
  %v2_d39c = add i32 %v1_d39c, 4
  %v3_d39c = inttoptr i32 %v2_d39c to i32*
  store i32 %v0_d39c, i32* %v3_d39c, align 4
  %v0_d3a0 = call i32 @function_f28c()
  store i32 %v1_d208, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d3a0, 16777216
  %v1_d3a8 = sdiv i32 %sext, 16777216
  store i32 %v1_d3a8, i32* %r2.global-to-local, align 4
  %v3_d3ac = ashr i32 %sext, 31
  store i32 %v3_d3ac, i32* %r3.global-to-local, align 4
  store i1 %v2_d3b0, i1* %cpsr_z.global-to-local, align 1
  %v1_d3b4 = trunc i32 %v3_d3ac to i8
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v3_d3b4 = add i32 %v2_d3b4, 15
  %v4_d3b4 = inttoptr i32 %v3_d3b4 to i8*
  store i8 %v1_d3b4, i8* %v4_d3b4, align 1
  %v0_d3b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_d3c4.pre = load i32, i32* @r4, align 4
  br i1 %v0_d3b8, label %.thread14, label %bb88

bb88:                                             ; preds = %bb87
  %v2_d3b8 = add i32 %v2_d3c4.pre, 13
  %v3_d3b8 = inttoptr i32 %v2_d3b8 to i8*
  %v4_d3b8 = load i8, i8* %v3_d3b8, align 1
  %v5_d3b8 = zext i8 %v4_d3b8 to i32
  %v2_d3bc = or i32 %v5_d3b8, 8
  store i32 %v2_d3bc, i32* %r3.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb87, %bb88
  store i32 %v6_d0b8, i32* @r1, align 4
  %v0_d3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v0_d3c4 to i8
  %v3_d3c4 = add i32 %v2_d3c4.pre, 14
  %v4_d3c4 = inttoptr i32 %v3_d3c4 to i8*
  store i8 %v1_d3c4, i8* %v4_d3c4, align 1
  %v0_d3c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3c8, label %bb90, label %bb89

bb89:                                             ; preds = %.thread14
  %v1_d3c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d3c8 = trunc i32 %v1_d3c8 to i8
  %v3_d3c8 = load i32, i32* @r4, align 4
  %v4_d3c8 = add i32 %v3_d3c8, 13
  %v5_d3c8 = inttoptr i32 %v4_d3c8 to i8*
  store i8 %v2_d3c8, i8* %v5_d3c8, align 1
  br label %bb90

bb90:                                             ; preds = %.thread14, %bb89
  %v0_d3cc = load i32, i32* @r7, align 4
  %v1_d3cc = add i32 %v0_d3cc, 40
  %v1_d3d0 = inttoptr i32 %v1_d3cc to i8*
  %v2_d3d0 = call i32 @function_f40c(i8* %v1_d3d0)
  %v3_d3d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3d4, i32* %r3.global-to-local, align 4
  %v1_d3d8 = add i32 %v3_d3d4, 1
  store i32 %v1_d3d8, i32* %r4.global-to-local, align 4
  %v0_d3dc = load i32, i32* @fp, align 4
  %v9_d3dc = icmp eq i32 %v0_d3dc, %v1_d3d8
  store i1 %v9_d3dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d3d8, i32* %stack_var_-40, align 4
  %v8_d3e4 = icmp sgt i32 %v0_d3dc, %v1_d3d8
  br i1 %v8_d3e4, label %dec_label_pc_d248, label %dec_label_pc_d3e8

dec_label_pc_d3e8:                                ; preds = %bb90
  store i32 %v6_d0b8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d3f0.preheader

dec_label_pc_d3f0.preheader:                      ; preds = %dec_label_pc_d3e8, %dec_label_pc_d65c
  %v0_d3f018 = phi i32 [ %v0_d3dc, %dec_label_pc_d3e8 ], [ %v0_d15c, %dec_label_pc_d65c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_d17c, %dec_label_pc_d3e8 ], [ %v1_d664, %dec_label_pc_d65c ]
  %storemerge = add i32 %v6_d0b8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_d5a8 = icmp eq i32 %v6_d0f4, -1
  %v3_d5c4 = icmp eq i32 %v3_d150, 65535
  %v2_d640 = icmp eq i32 %v1_d0e0, 0
  br label %dec_label_pc_d3f0

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d498, %dec_label_pc_d3f0.preheader
  %v0_d3f0 = phi i32 [ %v0_d3f018, %dec_label_pc_d3f0.preheader ], [ %v0_d52c, %dec_label_pc_d498 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  store i1 %v2_d3f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp91 = icmp slt i32 %v0_d3f0, 1
  br label %dec_label_pc_d3f8

dec_label_pc_d3f8:                                ; preds = %dec_label_pc_d3f8, %dec_label_pc_d3f0
  br i1 %tmp91, label %dec_label_pc_d3f8, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f8
  %v0_d3fc = load i32, i32* @r8, align 4
  %v3_d3fc = mul i32 %v0_d3fc, 65536
  store i32 %v3_d3fc, i32* %r2.global-to-local, align 4
  %tmp92 = mul i32 %v0_d3fc, 256
  %v1_d404 = and i32 %tmp92, 65280
  store i32 %v1_d404, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp93 = udiv i32 %v0_d3fc, 256
  %v4_d410 = urem i32 %tmp93, 256
  %v5_d410 = or i32 %v4_d410, %v1_d404
  store i32 %v5_d410, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %dec_label_pc_d498, %dec_label_pc_d3fc
  %v1_d42c = phi i32 [ %v1_d528, %dec_label_pc_d498 ], [ 0, %dec_label_pc_d3fc ]
  %v5_d41c = mul i32 %v1_d42c, 24
  %v1_d420 = load i32, i32* @sb, align 4
  %v2_d420 = add i32 %v1_d420, %v5_d41c
  store i32 %v2_d420, i32* %r3.global-to-local, align 4
  store i32 %v4_cf24, i32* %ip.global-to-local, align 4
  %v1_d428 = add i32 %v2_d420, 20
  %v2_d428 = inttoptr i32 %v1_d428 to i8*
  %v3_d428 = load i8, i8* %v2_d428, align 1
  %v4_d428 = zext i8 %v3_d428 to i32
  store i32 %v4_d428, i32* %r2.global-to-local, align 4
  %v4_d42c = mul i32 %v1_d42c, 4
  %v5_d42c = add i32 %v4_d42c, %v4_cf24
  %v6_d42c = inttoptr i32 %v5_d42c to i32*
  %v7_d42c = load i32, i32* %v6_d42c, align 4
  store i32 %v7_d42c, i32* @r5, align 4
  %v7_d430 = icmp eq i8 %v3_d428, 31
  store i1 %v7_d430, i1* %cpsr_z.global-to-local, align 1
  %v1_d434 = add i32 %v7_d42c, 20
  store i32 %v1_d434, i32* @r6, align 4
  %tmp101 = icmp ult i8 %v3_d428, 32
  br i1 %tmp101, label %dec_label_pc_d54c, label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d418
  store i32 %v6_d0f4, i32* %r1.global-to-local, align 4
  store i1 %v3_d5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d5a8, label %dec_label_pc_d5b4, label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d54c, %dec_label_pc_d43c
  store i32 %v3_d150, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d5c4, label %dec_label_pc_d5d0, label %dec_label_pc_d45c

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d5b4.dec_label_pc_d45c_crit_edge, %dec_label_pc_d448
  %v1_d460 = phi i32 [ %v1_d460.pre, %dec_label_pc_d5b4.dec_label_pc_d45c_crit_edge ], [ 65535, %dec_label_pc_d448 ]
  store i32 %v3_d154, i32* %r3.global-to-local, align 4
  %v9_d460 = icmp eq i32 %v3_d154, %v1_d460
  store i1 %v9_d460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d460, label %dec_label_pc_d5ec, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d5d0.dec_label_pc_d468_crit_edge, %dec_label_pc_d45c
  %v1_d46c = phi i32 [ %v1_d46c.pre, %dec_label_pc_d5d0.dec_label_pc_d468_crit_edge ], [ %v1_d460, %dec_label_pc_d45c ]
  store i32 %v3_d158, i32* %ip.global-to-local, align 4
  %v9_d46c = icmp eq i32 %v3_d158, %v1_d46c
  store i1 %v9_d46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d46c, label %dec_label_pc_d608, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d5ec.dec_label_pc_d474_crit_edge, %dec_label_pc_d468
  %v1_d478 = phi i32 [ %v1_d478.pre, %dec_label_pc_d5ec.dec_label_pc_d474_crit_edge ], [ %v1_d46c, %dec_label_pc_d468 ]
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v9_d478 = icmp eq i32 %v5_cff4, %v1_d478
  store i1 %v9_d478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d478, label %dec_label_pc_d624, label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d608.dec_label_pc_d480_crit_edge, %dec_label_pc_d474
  %v1_d484 = phi i32 [ %v1_d484.pre, %dec_label_pc_d608.dec_label_pc_d480_crit_edge ], [ %v1_d478, %dec_label_pc_d474 ]
  store i32 %v6_d010, i32* %r2.global-to-local, align 4
  %v9_d484 = icmp eq i32 %v6_d010, %v1_d484
  store i1 %v9_d484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d484, label %dec_label_pc_d638, label %dec_label_pc_d48c

dec_label_pc_d48c:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d480
  store i32 %v1_d0e0, i32* %r3.global-to-local, align 4
  store i1 %v2_d640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d640, label %dec_label_pc_d498, label %dec_label_pc_d64c

dec_label_pc_d498:                                ; preds = %dec_label_pc_d48c, %dec_label_pc_d638, %dec_label_pc_d64c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d49c = load i32, i32* @r7, align 4
  %v1_d49c = trunc i32 %v0_d49c to i8
  %v2_d49c = load i32, i32* @r5, align 4
  %v3_d49c = add i32 %v2_d49c, 10
  %v4_d49c = inttoptr i32 %v3_d49c to i8*
  store i8 %v1_d49c, i8* %v4_d49c, align 1
  %v0_d4a0 = load i32, i32* @r7, align 4
  %v1_d4a0 = trunc i32 %v0_d4a0 to i8
  %v2_d4a0 = load i32, i32* @r5, align 4
  %v3_d4a0 = add i32 %v2_d4a0, 11
  %v4_d4a0 = inttoptr i32 %v3_d4a0 to i8*
  store i8 %v1_d4a0, i8* %v4_d4a0, align 1
  %v0_d4a4 = load i32, i32* @r5, align 4
  store i32 %v0_d4a4, i32* @r0, align 4
  %v2_d4a8 = call i32 @function_ddc4(i32 %v0_d4a4, i32 20)
  %v3_d4a8 = trunc i32 %v2_d4a8 to i8
  %v4_d4ac29 = udiv i32 %v2_d4a8, 256
  %v1_d4b0 = trunc i32 %v4_d4ac29 to i8
  %v2_d4b0 = load i32, i32* @r5, align 4
  %v3_d4b0 = add i32 %v2_d4b0, 11
  %v4_d4b0 = inttoptr i32 %v3_d4b0 to i8*
  store i8 %v1_d4b0, i8* %v4_d4b0, align 1
  %v3_d4b4 = load i32, i32* @r5, align 4
  %v4_d4b4 = add i32 %v3_d4b4, 10
  %v5_d4b4 = inttoptr i32 %v4_d4b4 to i8*
  store i8 %v3_d4a8, i8* %v5_d4b4, align 1
  %v0_d4b8 = load i32, i32* @r6, align 4
  store i32 %v0_d4b8, i32* @r1, align 4
  %v0_d4bc = load i32, i32* @sl, align 4
  store i32 %v0_d4bc, i32* %r2.global-to-local, align 4
  %v0_d4c0 = load i32, i32* @r8, align 4
  store i32 %v0_d4c0, i32* %r3.global-to-local, align 4
  %v0_d4c4 = load i32, i32* @r7, align 4
  %v1_d4c4 = trunc i32 %v0_d4c4 to i8
  %v3_d4c4 = add i32 %v0_d4b8, 16
  %v4_d4c4 = inttoptr i32 %v3_d4c4 to i8*
  store i8 %v1_d4c4, i8* %v4_d4c4, align 1
  %v0_d4c8 = load i32, i32* @r7, align 4
  %v1_d4c8 = trunc i32 %v0_d4c8 to i8
  %v2_d4c8 = load i32, i32* @r6, align 4
  %v3_d4c8 = add i32 %v2_d4c8, 17
  %v4_d4c8 = inttoptr i32 %v3_d4c8 to i8*
  store i8 %v1_d4c8, i8* %v4_d4c8, align 1
  %v0_d4cc = load i32, i32* @r5, align 4
  %v4_d4d0 = call i32 @function_de20(i32 %v0_d4cc, i32 %v0_d4b8, i32 %v0_d4bc, i32 %v0_d4c0)
  %v5_d4d0 = trunc i32 %v4_d4d0 to i8
  %v4_d4d430 = udiv i32 %v4_d4d0, 256
  %v1_d4d8 = trunc i32 %v4_d4d430 to i8
  %v2_d4d8 = load i32, i32* @r6, align 4
  %v3_d4d8 = add i32 %v2_d4d8, 17
  %v4_d4d8 = inttoptr i32 %v3_d4d8 to i8*
  store i8 %v1_d4d8, i8* %v4_d4d8, align 1
  %v3_d4dc = load i32, i32* @r6, align 4
  %v4_d4dc = add i32 %v3_d4dc, 16
  %v5_d4dc = inttoptr i32 %v4_d4dc to i8*
  store i8 %v5_d4d0, i8* %v5_d4dc, align 1
  %v3_d4e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d4e0, i32* %r3.global-to-local, align 4
  %v0_d4e4 = load i32, i32* @r5, align 4
  %v1_d4e4 = add i32 %v0_d4e4, 20
  %v2_d4e4 = inttoptr i32 %v1_d4e4 to i32*
  %v3_d4e4 = load i32, i32* %v2_d4e4, align 4
  %v3_d4ec = udiv i32 %v3_d4e4, 65536
  store i32 %v3_d4ec, i32* %r2.global-to-local, align 4
  %v5_d4f0 = mul i32 %v3_d4e0, 24
  %v1_d4f4 = load i32, i32* @sb, align 4
  %v2_d4f4 = add i32 %v1_d4f4, %v5_d4f0
  store i32 %v2_d4f4, i32* %ip.global-to-local, align 4
  %v3_d4f828 = udiv i32 %v3_d4e4, 16777216
  %v1_d4fc = trunc i32 %v3_d4f828 to i8
  %v3_d4fc = add i32 %v2_d4f4, 3
  %v4_d4fc = inttoptr i32 %v3_d4fc to i8*
  store i8 %v1_d4fc, i8* %v4_d4fc, align 1
  %v0_d500 = load i32, i32* %r2.global-to-local, align 4
  %v1_d500 = trunc i32 %v0_d500 to i8
  %v2_d500 = load i32, i32* %ip.global-to-local, align 4
  %v3_d500 = add i32 %v2_d500, 2
  %v4_d500 = inttoptr i32 %v3_d500 to i8*
  store i8 %v1_d500, i8* %v4_d500, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d508 = load i32, i32* @r5, align 4
  store i32 %v0_d508, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d518 = load i32, i32* %ip.global-to-local, align 4
  %v4_d518 = inttoptr i32 %v0_d518 to %sockaddr*
  %v7_d520 = inttoptr i32 %v0_d508 to i32*
  %v9_d520 = call i32 @sendto(i32 %v3_d108, i32* %v7_d520, i32 %stack_var_-168.0.ph, i32 16384, %sockaddr* %v4_d518, i32 16)
  %v3_d524 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d524, i32* %r3.global-to-local, align 4
  %v1_d528 = add i32 %v3_d524, 1
  %v0_d52c = load i32, i32* @fp, align 4
  %v9_d52c = icmp eq i32 %v0_d52c, %v1_d528
  store i1 %v9_d52c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d528, i32* %stack_var_-40, align 4
  %v7_d534 = icmp sgt i32 %v0_d52c, %v1_d528
  br i1 %v7_d534, label %dec_label_pc_d418, label %dec_label_pc_d3f0

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d118
  %v1_d540 = call i32 @close(i32 %v3_d108)
  br label %dec_label_pc_d544

dec_label_pc_d544:                                ; preds = %dec_label_pc_cf04, %dec_label_pc_d53c
  %v29_d548 = phi i32 [ -1, %dec_label_pc_cf04 ], [ %v1_d540, %dec_label_pc_d53c ]
  store i32 %v3_cf04, i32* %r4.global-to-local, align 4
  ret i32 %v29_d548

dec_label_pc_d54c:                                ; preds = %dec_label_pc_d418
  %v1_d54c = add i32 %v2_d420, 16
  %v2_d54c = inttoptr i32 %v1_d54c to i32*
  %v3_d54c = load i32, i32* %v2_d54c, align 4
  store i32 %v3_d54c, i32* %r4.global-to-local, align 4
  %v0_d550 = call i32 @function_f28c()
  %v3_d554 = load i32, i32* %stack_var_-40, align 4
  %v5_d55c = mul i32 %v3_d554, 24
  %v1_d564 = load i32, i32* @sb, align 4
  %v2_d564 = add i32 %v1_d564, %v5_d55c
  store i32 %v2_d564, i32* %r1.global-to-local, align 4
  %v1_d568 = and i32 %v3_d54c, 65280
  store i32 %v1_d568, i32* %r3.global-to-local, align 4
  %v1_d560 = udiv i32 %v3_d54c, 256
  %v3_d56c = and i32 %v1_d560, 65280
  store i32 %v3_d56c, i32* %r2.global-to-local, align 4
  %v3_d570 = mul i32 %v3_d54c, 16777216
  store i32 %v3_d570, i32* %ip.global-to-local, align 4
  %v1_d574 = add i32 %v2_d564, 20
  %v2_d574 = inttoptr i32 %v1_d574 to i8*
  %v3_d574 = load i8, i8* %v2_d574, align 1
  %v4_d574 = zext i8 %v3_d574 to i32
  %v4_d578 = mul nuw nsw i32 %v1_d568, 256
  %v5_d578 = or i32 %v4_d578, %v3_d570
  store i32 %v5_d578, i32* %ip.global-to-local, align 4
  %v2_d580 = call i32 @llvm.bswap.i32(i32 %v3_d54c)
  %v7_d584 = lshr i32 %v0_d550, %v4_d574
  %v8_d584 = add i32 %v7_d584, %v2_d580
  store i32 %v8_d584, i32* %r2.global-to-local, align 4
  %v2_d5a0 = call i32 @llvm.bswap.i32(i32 %v8_d584)
  store i32 %v2_d5a0, i32* %r3.global-to-local, align 4
  store i32 %v6_d0f4, i32* %r1.global-to-local, align 4
  store i1 %v3_d5a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5ac = load i32, i32* @r5, align 4
  %v2_d5ac = add i32 %v1_d5ac, 16
  %v3_d5ac = inttoptr i32 %v2_d5ac to i32*
  store i32 %v2_d5a0, i32* %v3_d5ac, align 4
  br i1 %v3_d5a8, label %dec_label_pc_d5b4, label %dec_label_pc_d448

dec_label_pc_d5b4:                                ; preds = %dec_label_pc_d54c, %dec_label_pc_d43c
  %v0_d5b4 = call i32 @function_f28c()
  store i32 %v3_d150, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d5c4, i1* %cpsr_z.global-to-local, align 1
  %v1_d5c8 = load i32, i32* @r5, align 4
  %v2_d5c8 = add i32 %v1_d5c8, 12
  %v3_d5c8 = inttoptr i32 %v2_d5c8 to i32*
  store i32 %v0_d5b4, i32* %v3_d5c8, align 4
  br i1 %v3_d5c4, label %dec_label_pc_d5d0, label %dec_label_pc_d5b4.dec_label_pc_d45c_crit_edge

dec_label_pc_d5b4.dec_label_pc_d45c_crit_edge:    ; preds = %dec_label_pc_d5b4
  %v1_d460.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d45c

dec_label_pc_d5d0:                                ; preds = %dec_label_pc_d5b4, %dec_label_pc_d448
  %v0_d5d0 = call i32 @function_f28c()
  %v1_d5d0 = trunc i32 %v0_d5d0 to i8
  %v4_d5d431 = udiv i32 %v0_d5d0, 256
  %v1_d5d8 = trunc i32 %v4_d5d431 to i8
  %v2_d5d8 = load i32, i32* @r5, align 4
  %v3_d5d8 = add i32 %v2_d5d8, 5
  %v4_d5d8 = inttoptr i32 %v3_d5d8 to i8*
  store i8 %v1_d5d8, i8* %v4_d5d8, align 1
  store i32 %v3_d154, i32* %r3.global-to-local, align 4
  %v1_d5e0 = load i32, i32* @r4, align 4
  %v9_d5e0 = icmp eq i32 %v3_d154, %v1_d5e0
  store i1 %v9_d5e0, i1* %cpsr_z.global-to-local, align 1
  %v3_d5e4 = load i32, i32* @r5, align 4
  %v4_d5e4 = add i32 %v3_d5e4, 4
  %v5_d5e4 = inttoptr i32 %v4_d5e4 to i8*
  store i8 %v1_d5d0, i8* %v5_d5e4, align 1
  %v0_d5e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d5e8, label %dec_label_pc_d5ec, label %dec_label_pc_d5d0.dec_label_pc_d468_crit_edge

dec_label_pc_d5d0.dec_label_pc_d468_crit_edge:    ; preds = %dec_label_pc_d5d0
  %v1_d46c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d468

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d5d0, %dec_label_pc_d45c
  %v0_d5ec = call i32 @function_f28c()
  %v1_d5ec = trunc i32 %v0_d5ec to i8
  store i32 %v3_d158, i32* %ip.global-to-local, align 4
  %v4_d5f4 = sdiv i32 %v0_d5ec, 256
  store i32 %v4_d5f4, i32* %r3.global-to-local, align 4
  %v1_d5f8 = load i32, i32* @r4, align 4
  %v9_d5f8 = icmp eq i32 %v3_d158, %v1_d5f8
  store i1 %v9_d5f8, i1* %cpsr_z.global-to-local, align 1
  %v3_d5fc = load i32, i32* @r5, align 4
  %v4_d5fc = add i32 %v3_d5fc, 20
  %v5_d5fc = inttoptr i32 %v4_d5fc to i8*
  store i8 %v1_d5ec, i8* %v5_d5fc, align 1
  %v0_d600 = load i32, i32* %r3.global-to-local, align 4
  %v1_d600 = trunc i32 %v0_d600 to i8
  %v2_d600 = load i32, i32* @r6, align 4
  %v3_d600 = add i32 %v2_d600, 1
  %v4_d600 = inttoptr i32 %v3_d600 to i8*
  store i8 %v1_d600, i8* %v4_d600, align 1
  %v0_d604 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d604, label %dec_label_pc_d608, label %dec_label_pc_d5ec.dec_label_pc_d474_crit_edge

dec_label_pc_d5ec.dec_label_pc_d474_crit_edge:    ; preds = %dec_label_pc_d5ec
  %v1_d478.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d474

dec_label_pc_d608:                                ; preds = %dec_label_pc_d5ec, %dec_label_pc_d468
  %v0_d608 = call i32 @function_f28c()
  %v1_d608 = trunc i32 %v0_d608 to i8
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v4_d610 = sdiv i32 %v0_d608, 256
  store i32 %v4_d610, i32* %r3.global-to-local, align 4
  %v1_d614 = load i32, i32* @r4, align 4
  %v9_d614 = icmp eq i32 %v5_cff4, %v1_d614
  store i1 %v9_d614, i1* %cpsr_z.global-to-local, align 1
  %v1_d618 = trunc i32 %v4_d610 to i8
  %v2_d618 = load i32, i32* @r6, align 4
  %v3_d618 = add i32 %v2_d618, 3
  %v4_d618 = inttoptr i32 %v3_d618 to i8*
  store i8 %v1_d618, i8* %v4_d618, align 1
  %v3_d61c = load i32, i32* @r6, align 4
  %v4_d61c = add i32 %v3_d61c, 2
  %v5_d61c = inttoptr i32 %v4_d61c to i8*
  store i8 %v1_d608, i8* %v5_d61c, align 1
  %v0_d620 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d620, label %dec_label_pc_d624, label %dec_label_pc_d608.dec_label_pc_d480_crit_edge

dec_label_pc_d608.dec_label_pc_d480_crit_edge:    ; preds = %dec_label_pc_d608
  %v1_d484.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d480

dec_label_pc_d624:                                ; preds = %dec_label_pc_d608, %dec_label_pc_d474
  %v0_d624 = call i32 @function_f28c()
  store i32 %v6_d010, i32* %r2.global-to-local, align 4
  %v1_d62c = load i32, i32* @r4, align 4
  %v9_d62c = icmp eq i32 %v6_d010, %v1_d62c
  store i1 %v9_d62c, i1* %cpsr_z.global-to-local, align 1
  %v1_d630 = load i32, i32* @r6, align 4
  %v2_d630 = add i32 %v1_d630, 4
  %v3_d630 = inttoptr i32 %v2_d630 to i32*
  store i32 %v0_d624, i32* %v3_d630, align 4
  br i1 %v9_d62c, label %dec_label_pc_d638, label %dec_label_pc_d48c

dec_label_pc_d638:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d480
  %v0_d638 = call i32 @function_f28c()
  store i32 %v1_d0e0, i32* %r3.global-to-local, align 4
  store i1 %v2_d640, i1* %cpsr_z.global-to-local, align 1
  %v1_d644 = load i32, i32* @r6, align 4
  %v2_d644 = add i32 %v1_d644, 8
  %v3_d644 = inttoptr i32 %v2_d644 to i32*
  store i32 %v0_d638, i32* %v3_d644, align 4
  br i1 %v2_d640, label %dec_label_pc_d498, label %dec_label_pc_d64c

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d48c, %dec_label_pc_d638
  %v0_d64c = load i32, i32* @r5, align 4
  %v1_d64c = add i32 %v0_d64c, 40
  store i32 %v6_d0b8, i32* @r1, align 4
  %v1_d654 = inttoptr i32 %v1_d64c to i8*
  %v2_d654 = call i32 @function_f40c(i8* %v1_d654)
  br label %dec_label_pc_d498

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d140
  store i32 %v6_d0b8, i32* %r3.global-to-local, align 4
  %v1_d664 = add i32 %v6_d0b8, 40
  store i32 %v1_d664, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d3f0.preheader

; uselistorder directives
  uselistorder i32 %v1_d664, { 1, 0 }
  uselistorder i32 %v4_d610, { 1, 0 }
  uselistorder i32 %v2_d5a0, { 1, 0 }
  uselistorder i32 %v3_d570, { 1, 0 }
  uselistorder i32 %v3_d54c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_d52c, { 1, 2, 0 }
  uselistorder i32 %v1_d528, { 2, 0, 3, 1 }
  uselistorder i32 %v0_d4b8, { 1, 0, 2 }
  uselistorder i32 %v0_d3fc, { 2, 0, 1 }
  uselistorder i32 %v0_d3f0, { 1, 0 }
  uselistorder i1 %v2_d640, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d5c4, { 1, 0, 2, 3 }
  uselistorder i1 %v3_d5a8, { 3, 2, 1, 0 }
  uselistorder i32 %v1_d3d8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d23c, { 1, 0 }
  uselistorder i32 %v1_d204, { 1, 0 }
  uselistorder i32 %v1_d200, { 1, 0 }
  uselistorder i32 %v1_d1fc, { 1, 0 }
  uselistorder i32 %v1_d1d8, { 1, 0 }
  uselistorder i32 %v1_d1d4, { 1, 0 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i32 %v1_d1c4, { 1, 0 }
  uselistorder i32 %v1_d1a0, { 1, 0 }
  uselistorder i32 %v1_d190, { 1, 0 }
  uselistorder i32 %v1_d17c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_d15c, { 1, 0, 2 }
  uselistorder i32 %v3_d150, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d144, { 3, 0, 1, 2 }
  uselistorder i32 %v0_d140, { 0, 2, 1, 3 }
  uselistorder i32 %v3_d108, { 1, 2, 0, 3 }
  uselistorder i32 %v6_d0f4, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v1_d0e0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_d0b8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_d010, { 3, 2, 1, 0 }
  uselistorder i32 %v5_cff4, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cfa4, { 1, 0 }
  uselistorder i32 %v6_cf3c, { 1, 0 }
  uselistorder i32 %v4_cf24, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cf08, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_d64c, { 1, 0 }
  uselistorder label %dec_label_pc_d544, { 1, 0 }
  uselistorder label %dec_label_pc_d498, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3f0.preheader, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d678(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d678:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d678 = load i32, i32* @r4, align 4
  %v6_d678 = load i32, i32* @r5, align 4
  %v9_d678 = load i32, i32* @r6, align 4
  %v12_d678 = load i32, i32* @r7, align 4
  %v1_d67c = urem i32 %arg1, 256
  store i32 %v1_d67c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d67c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d694 = urem i32 %arg3, 256
  store i32 %v1_d694, i32* @r4, align 4
  %v2_d698 = call i32* @calloc(i32 %v1_d67c, i32 4)
  %v3_d698 = ptrtoint i32* %v2_d698 to i32
  %v0_d69c = load i32, i32* @r5, align 4
  store i32 %v0_d69c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_d698, i32* %fp.global-to-local, align 4
  %v0_d6ac = load i32, i32* @r4, align 4
  store i32 %v0_d6ac, i32* %r0.global-to-local, align 4
  %v4_d6b0 = inttoptr i32 %v0_d69c to i32*
  %v5_d6b0 = call i32 @function_92ac(i32 %v0_d6ac, i32* %v4_d6b0, i32 2, i32 0)
  %v1_d6bc = urem i32 %v5_d6b0, 256
  store i32 %v1_d6bc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6c8 = load i32, i32* @r5, align 4
  store i32 %v0_d6c8, i32* %r1.global-to-local, align 4
  %v0_d6cc = load i32, i32* @r4, align 4
  store i32 %v0_d6cc, i32* %r0.global-to-local, align 4
  %v5_d6d0 = trunc i32 %v5_d6b0 to i8
  %v6_d6d4 = inttoptr i32 %v0_d6c8 to i32*
  %v7_d6d4 = call i32 @function_92ac(i32 %v0_d6cc, i32* %v6_d6d4, i32 3, i32 65535)
  %v0_d6d8 = load i32, i32* @r5, align 4
  store i32 %v0_d6d8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d6e8 = load i32, i32* @r4, align 4
  store i32 %v0_d6e8, i32* %r0.global-to-local, align 4
  %v5_d6ec = inttoptr i32 %v0_d6d8 to i32*
  %v6_d6ec = call i32 @function_92ac(i32 %v0_d6e8, i32* %v5_d6ec, i32 4, i32 64)
  %v1_d6f4 = urem i32 %v6_d6ec, 256
  store i32 %v1_d6f4, i32* %ip.global-to-local, align 4
  %v0_d6f8 = load i32, i32* @r5, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d704 = load i32, i32* @r4, align 4
  store i32 %v0_d704, i32* %r0.global-to-local, align 4
  %v6_d70c = inttoptr i32 %v0_d6f8 to i32*
  %v7_d70c = call i32 @function_92ac(i32 %v0_d704, i32* %v6_d70c, i32 5, i32 1)
  %v1_d718 = urem i32 %v7_d70c, 256
  store i32 %v1_d718, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d724 = load i32, i32* @r5, align 4
  store i32 %v0_d724, i32* %r1.global-to-local, align 4
  %v0_d728 = load i32, i32* @r4, align 4
  store i32 %v0_d728, i32* %r0.global-to-local, align 4
  %v5_d730 = inttoptr i32 %v0_d724 to i32*
  %v6_d730 = call i32 @function_92ac(i32 %v0_d728, i32* %v5_d730, i32 6, i32 65535)
  %v0_d738 = load i32, i32* @r5, align 4
  store i32 %v0_d738, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d730, i32* @r7, align 4
  %v0_d748 = load i32, i32* @r4, align 4
  store i32 %v0_d748, i32* %r0.global-to-local, align 4
  %v4_d74c = inttoptr i32 %v0_d738 to i32*
  %v5_d74c = call i32 @function_92ac(i32 %v0_d748, i32* %v4_d74c, i32 7, i32 65535)
  %v0_d754 = load i32, i32* @r5, align 4
  store i32 %v0_d754, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d74c, i32* @r6, align 4
  %v0_d764 = load i32, i32* @r4, align 4
  store i32 %v0_d764, i32* %r0.global-to-local, align 4
  %v4_d768 = inttoptr i32 %v0_d754 to i32*
  %v5_d768 = call i32 @function_92ac(i32 %v0_d764, i32* %v4_d768, i32 17, i32 65535)
  %v0_d76c = load i32, i32* @r5, align 4
  store i32 %v0_d76c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d77c = load i32, i32* @r4, align 4
  store i32 %v0_d77c, i32* %r0.global-to-local, align 4
  %v5_d780 = inttoptr i32 %v0_d76c to i32*
  %v6_d780 = call i32 @function_92ac(i32 %v0_d77c, i32* %v5_d780, i32 18, i32 0)
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  store i32 %v0_d794, i32* %r0.global-to-local, align 4
  %v5_d798 = inttoptr i32 %v0_d784 to i32*
  %v6_d798 = call i32 @function_92ac(i32 %v0_d794, i32* %v5_d798, i32 11, i32 0)
  %v0_d79c = load i32, i32* @r5, align 4
  store i32 %v0_d79c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7ac = load i32, i32* @r4, align 4
  store i32 %v0_d7ac, i32* %r0.global-to-local, align 4
  %v5_d7b0 = inttoptr i32 %v0_d79c to i32*
  %v6_d7b0 = call i32 @function_92ac(i32 %v0_d7ac, i32* %v5_d7b0, i32 12, i32 0)
  %v0_d7b4 = load i32, i32* @r5, align 4
  store i32 %v0_d7b4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v5_d7c8 = inttoptr i32 %v0_d7b4 to i32*
  %v6_d7c8 = call i32 @function_92ac(i32 %v0_d7c4, i32* %v5_d7c8, i32 13, i32 0)
  %v0_d7cc = load i32, i32* @r5, align 4
  store i32 %v0_d7cc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7dc = load i32, i32* @r4, align 4
  store i32 %v0_d7dc, i32* %r0.global-to-local, align 4
  %v5_d7e0 = inttoptr i32 %v0_d7cc to i32*
  %v6_d7e0 = call i32 @function_92ac(i32 %v0_d7dc, i32* %v5_d7e0, i32 14, i32 0)
  %v0_d7e4 = load i32, i32* @r5, align 4
  store i32 %v0_d7e4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d7f4 = load i32, i32* @r4, align 4
  store i32 %v0_d7f4, i32* %r0.global-to-local, align 4
  %v5_d7f8 = inttoptr i32 %v0_d7e4 to i32*
  %v6_d7f8 = call i32 @function_92ac(i32 %v0_d7f4, i32* %v5_d7f8, i32 15, i32 1)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 %v0_d7fc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  store i32 %v0_d80c, i32* %r0.global-to-local, align 4
  %v5_d810 = inttoptr i32 %v0_d7fc to i32*
  %v6_d810 = call i32 @function_92ac(i32 %v0_d80c, i32* %v5_d810, i32 16, i32 0)
  %v2_d81c = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_d81c, i32* %r3.global-to-local, align 4
  %v0_d820 = load i32, i32* @r5, align 4
  store i32 %v0_d820, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d828 = load i32, i32* @r4, align 4
  store i32 %v0_d828, i32* %r0.global-to-local, align 4
  %v5_d82c = inttoptr i32 %v0_d820 to i32*
  %v6_d82c = call i32 @function_9240(i32 %v0_d828, i32* %v5_d82c, i32 25, i32 %v2_d81c, i32 %v6_d810)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d840 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_d840, i32* %r0.global-to-local, align 4
  %v2_d844 = icmp eq i32 %v3_d840, -1
  store i1 %v2_d844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d840, i32* %sb.global-to-local, align 4
  br i1 %v2_d844, label %dec_label_pc_ddb8, label %dec_label_pc_d850

dec_label_pc_d850:                                ; preds = %dec_label_pc_d678
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d858 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d858, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d86c = call i32 @setsockopt(i32 0, i32 3, i32 %v6_d858, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d86c, i32* %r0.global-to-local, align 4
  %v2_d870 = icmp eq i32 %v6_d86c, -1
  store i1 %v2_d870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d870, label %dec_label_pc_ddb0, label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %dec_label_pc_d850
  %v3_d87c = mul i32 %v7_d6d4, 65536
  store i32 %v3_d87c, i32* %r4.global-to-local, align 4
  %v3_d880 = urem i32 %v7_d6d4, 65536
  %v0_d890 = load i32, i32* @r7, align 4
  %v3_d890 = mul i32 %v0_d890, 65536
  store i32 %v3_d890, i32* %r0.global-to-local, align 4
  %v0_d894 = load i32, i32* @r6, align 4
  %v3_d894 = mul i32 %v0_d894, 65536
  store i32 %v3_d894, i32* %r5.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_d89c = urem i32 %v0_d890, 65536
  store i32 %v3_d89c, i32* %ip.global-to-local, align 4
  %v3_d8a0 = urem i32 %v0_d894, 65536
  store i32 %v3_d8a0, i32* %r2.global-to-local, align 4
  %v1_d8a4 = urem i32 %v6_d798, 256
  store i32 %v1_d8a4, i32* %r3.global-to-local, align 4
  %v0_d8a8 = load i32, i32* @sl, align 4
  %v2_d8a8 = icmp eq i32 %v0_d8a8, 0
  store i1 %v2_d8a8, i1* %cpsr_z.global-to-local, align 1
  %tmp70 = icmp slt i32 %v0_d8a8, 1
  br i1 %tmp70, label %dec_label_pc_db5c, label %dec_label_pc_d8bc

dec_label_pc_d8bc:                                ; preds = %dec_label_pc_d878
  %v1_d8d4 = urem i32 %v0_d894, 256
  %tmp71 = udiv i32 %v0_d890, 256
  %v3_d8d8 = urem i32 %tmp71, 256
  %v1_d8dc = urem i32 %v0_d890, 256
  %v4_d8e0 = mul nuw nsw i32 %v1_d8dc, 256
  %v5_d8e0 = or i32 %v4_d8e0, %v3_d8d8
  store i32 %v5_d8e0, i32* %r7.global-to-local, align 4
  %tmp72 = udiv i32 %v7_d6d4, 256
  %tmp73 = mul i32 %v5_d768, 256
  %v1_d8fc = and i32 %tmp73, 65280
  %v1_d900 = urem i32 %v6_d798, 2
  %v3_d904 = mul nuw nsw i32 %v1_d8d4, 256
  store i32 %v3_d904, i32* %r1.global-to-local, align 4
  %v5_d908 = trunc i32 %tmp72 to i8
  %tmp74 = udiv i32 %v0_d894, 256
  %v4_d90c = urem i32 %tmp74, 256
  %v5_d90c = or i32 %v4_d90c, %v3_d904
  store i32 %v5_d90c, i32* %r6.global-to-local, align 4
  %v1_d910 = urem i32 %v6_d7b0, 2
  %v1_d914 = urem i32 %v6_d7c8, 2
  %tmp75 = udiv i32 %v5_d768, 256
  %v4_d918 = urem i32 %tmp75, 256
  %v5_d918 = or i32 %v4_d918, %v1_d8fc
  store i32 %v5_d918, i32* %r5.global-to-local, align 4
  %v1_d938 = urem i32 %v6_d7e0, 2
  %v1_d93c = urem i32 %v6_d7f8, 2
  %v1_d948 = urem i32 %v6_d810, 2
  store i32 %v1_d948, i32* %r0.global-to-local, align 4
  %v3_d94c = udiv i32 %v7_d6d4, 65536
  store i32 %v3_d94c, i32* %r2.global-to-local, align 4
  store i32 %v1_d8dc, i32* %r3.global-to-local, align 4
  store i32 %v1_d8d4, i32* %ip.global-to-local, align 4
  %v5_d964 = trunc i32 %v0_d894 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul i32 %v6_d6ec, 16777216
  %v4_d9b4 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_d900
  %v4_da28 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d910
  %v4_da3c = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d914
  %v4_da50 = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d938
  %v4_da64 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d93c
  %v3_da78 = and i32 %tmp82, 2
  %v7_daa8 = sext i8 %v5_d964 to i32
  %sext78 = mul i32 %v0_d890, 16777216
  %v3_daa8 = sdiv i32 %sext78, 16777216
  br label %dec_label_pc_d96c

dec_label_pc_d96c:                                ; preds = %bb77, %dec_label_pc_d8bc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d974 = call i32* @calloc(i32 128, i32 1)
  %v4_d974 = ptrtoint i32* %v2_d974 to i32
  store i32 %v4_d974, i32* %r0.global-to-local, align 4
  %v3_d978 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d978, i32* %r2.global-to-local, align 4
  %v1_d97c = load i32, i32* %fp.global-to-local, align 4
  %v2_d97c = load i32, i32* %r4.global-to-local, align 4
  %v5_d97c = mul i32 %v2_d97c, 4
  %v6_d97c = add i32 %v5_d97c, %v1_d97c
  %v7_d97c = inttoptr i32 %v6_d97c to i32*
  store i32 %v4_d974, i32* %v7_d97c, align 4
  %v0_d980 = load i32, i32* %fp.global-to-local, align 4
  %v1_d980 = load i32, i32* %r2.global-to-local, align 4
  %v4_d980 = mul i32 %v1_d980, 4
  %v5_d980 = add i32 %v4_d980, %v0_d980
  %v6_d980 = inttoptr i32 %v5_d980 to i32*
  %v7_d980 = load i32, i32* %v6_d980, align 4
  store i32 %v7_d980, i32* %r4.global-to-local, align 4
  %v1_d984 = inttoptr i32 %v7_d980 to i8*
  %v2_d984 = load i8, i8* %v1_d984, align 1
  %tmp83 = urem i8 %v2_d984, 16
  %v1_d988 = zext i8 %tmp83 to i32
  %v1_d98c = or i32 %v1_d988, 64
  store i32 %v1_d98c, i32* %r3.global-to-local, align 4
  %v1_d990 = trunc i32 %v1_d98c to i8
  store i8 %v1_d990, i8* %v1_d984, align 1
  %v0_d994 = load i32, i32* %r4.global-to-local, align 4
  %v1_d994 = inttoptr i32 %v0_d994 to i8*
  %v2_d994 = load i8, i8* %v1_d994, align 1
  %v1_d998 = and i8 %v2_d994, -16
  %v1_d99c = or i8 %v1_d998, 5
  store i32 %v1_d718, i32* %r0.global-to-local, align 4
  store i8 %v1_d99c, i8* %v1_d994, align 1
  %v2_d9ac = load i32, i32* %r4.global-to-local, align 4
  %v3_d9ac = add i32 %v2_d9ac, 1
  %v4_d9ac = inttoptr i32 %v3_d9ac to i8*
  store i8 %v5_d6d0, i8* %v4_d9ac, align 1
  store i32 %v4_d9b4, i32* %r2.global-to-local, align 4
  %v2_d9b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9b8 = add i32 %v2_d9b8, 4
  %v4_d9b8 = inttoptr i32 %v3_d9b8 to i8*
  store i8 %v5_d908, i8* %v4_d9b8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d9c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d9c4 = icmp eq i32 %v0_d9c4, 0
  store i1 %v2_d9c4, i1* %cpsr_z.global-to-local, align 1
  %v2_d9c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9c8 = add i32 %v2_d9c8, 3
  %v4_d9c8 = inttoptr i32 %v3_d9c8 to i8*
  store i8 60, i8* %v4_d9c8, align 1
  store i32 %v3_d94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d4 = trunc i32 %v0_d9d4 to i8
  %v2_d9d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9d4 = add i32 %v2_d9d4, 8
  %v4_d9d4 = inttoptr i32 %v3_d9d4 to i8*
  store i8 %v1_d9d4, i8* %v4_d9d4, align 1
  %v0_d9d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d9d8 = trunc i32 %v0_d9d8 to i8
  %v2_d9d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9d8 = add i32 %v2_d9d8, 9
  %v4_d9d8 = inttoptr i32 %v3_d9d8 to i8*
  store i8 %v1_d9d8, i8* %v4_d9d8, align 1
  %v0_d9dc = load i32, i32* %r3.global-to-local, align 4
  %v1_d9dc = trunc i32 %v0_d9dc to i8
  %v2_d9dc = load i32, i32* %r4.global-to-local, align 4
  %v3_d9dc = add i32 %v2_d9dc, 2
  %v4_d9dc = inttoptr i32 %v3_d9dc to i8*
  store i8 %v1_d9dc, i8* %v4_d9dc, align 1
  %v3_d9e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9e0, i32* %r2.global-to-local, align 4
  %v0_d9e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9e4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d96c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9e8 = load i32, i32* %r4.global-to-local, align 4
  %v4_d9e8 = add i32 %v3_d9e8, 6
  %v5_d9e8 = inttoptr i32 %v4_d9e8 to i8*
  store i8 64, i8* %v5_d9e8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d96c, %bb
  %v0_d9ec = load i32, i32* %r0.global-to-local, align 4
  %v1_d9ec = trunc i32 %v0_d9ec to i8
  %v2_d9ec = load i32, i32* %r4.global-to-local, align 4
  %v3_d9ec = add i32 %v2_d9ec, 5
  %v4_d9ec = inttoptr i32 %v3_d9ec to i8*
  store i8 %v1_d9ec, i8* %v4_d9ec, align 1
  %v0_d9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9f0, label %.thread10, label %bb76

.thread10:                                        ; preds = %.thread
  store i32 %v6_d82c, i32* %r0.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d82c, i32* %r0.global-to-local, align 4
  %v3_d9f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_d9f8 = add i32 %v3_d9f8, 7
  %v5_d9f8 = inttoptr i32 %v4_d9f8 to i8*
  store i8 0, i8* %v5_d9f8, align 1
  %v0_da00.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %.thread10, %bb76
  %v0_da00 = phi i32 [ %v6_d82c, %.thread10 ], [ %v0_da00.pre, %bb76 ]
  %v0_d9fc = load i32, i32* %r2.global-to-local, align 4
  %v3_d9fc = mul i32 %v0_d9fc, 32
  store i32 %v3_d9fc, i32* %r3.global-to-local, align 4
  %v1_da00 = load i32, i32* %r4.global-to-local, align 4
  %v2_da00 = add i32 %v1_da00, 12
  %v3_da00 = inttoptr i32 %v2_da00 to i32*
  store i32 %v0_da00, i32* %v3_da00, align 4
  %v0_da04 = load i32, i32* %r3.global-to-local, align 4
  %v1_da04 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_da04, -8
  %v5_da04 = add i32 %v0_da04, %tmp84
  %v1_da08 = load i32, i32* @r8, align 4
  %v2_da08 = add i32 %v1_da08, %v5_da04
  store i32 %v2_da08, i32* %r3.global-to-local, align 4
  %v1_da0c = add i32 %v2_da08, 16
  %v2_da0c = inttoptr i32 %v1_da0c to i32*
  %v3_da0c = load i32, i32* %v2_da0c, align 4
  store i32 %v3_da0c, i32* %r2.global-to-local, align 4
  %v0_da10 = load i32, i32* %r7.global-to-local, align 4
  %v1_da10 = trunc i32 %v0_da10 to i8
  %v2_da10 = load i32, i32* %r4.global-to-local, align 4
  %v3_da10 = add i32 %v2_da10, 20
  %v4_da10 = inttoptr i32 %v3_da10 to i8*
  store i8 %v1_da10, i8* %v4_da10, align 1
  %v0_da14 = load i32, i32* %r2.global-to-local, align 4
  %v1_da14 = load i32, i32* %r4.global-to-local, align 4
  %v2_da14 = add i32 %v1_da14, 16
  %v3_da14 = inttoptr i32 %v2_da14 to i32*
  store i32 %v0_da14, i32* %v3_da14, align 4
  %v0_da18 = load i32, i32* %r4.global-to-local, align 4
  %v1_da18 = add i32 %v0_da18, 20
  store i32 %v1_da18, i32* %r1.global-to-local, align 4
  %v1_da1c = add i32 %v0_da18, 33
  %v2_da1c = inttoptr i32 %v1_da1c to i8*
  %v3_da1c = load i8, i8* %v2_da1c, align 1
  %v4_da1c = zext i8 %v3_da1c to i32
  store i32 %v1_d900, i32* %r2.global-to-local, align 4
  %v1_da24 = and i32 %v4_da1c, 223
  %v5_da28 = or i32 %v1_da24, %v4_da28
  store i32 %v5_da28, i32* %r3.global-to-local, align 4
  %v1_da2c = trunc i32 %v5_da28 to i8
  store i8 %v1_da2c, i8* %v2_da1c, align 1
  %v0_da30 = load i32, i32* %r1.global-to-local, align 4
  %v1_da30 = add i32 %v0_da30, 13
  %v2_da30 = inttoptr i32 %v1_da30 to i8*
  %v3_da30 = load i8, i8* %v2_da30, align 1
  %v4_da30 = zext i8 %v3_da30 to i32
  store i32 %v1_d910, i32* %r3.global-to-local, align 4
  %v1_da38 = and i32 %v4_da30, 239
  %v5_da3c = or i32 %v1_da38, %v4_da3c
  store i32 %v5_da3c, i32* %r2.global-to-local, align 4
  %v1_da40 = trunc i32 %v5_da3c to i8
  store i8 %v1_da40, i8* %v2_da30, align 1
  %v0_da44 = load i32, i32* %r1.global-to-local, align 4
  %v1_da44 = add i32 %v0_da44, 13
  %v2_da44 = inttoptr i32 %v1_da44 to i8*
  %v3_da44 = load i8, i8* %v2_da44, align 1
  %v4_da44 = zext i8 %v3_da44 to i32
  store i32 %v1_d914, i32* %ip.global-to-local, align 4
  %v1_da4c = and i32 %v4_da44, 247
  %v5_da50 = or i32 %v1_da4c, %v4_da50
  store i32 %v5_da50, i32* %r3.global-to-local, align 4
  %v1_da54 = trunc i32 %v5_da50 to i8
  store i8 %v1_da54, i8* %v2_da44, align 1
  %v0_da58 = load i32, i32* %r1.global-to-local, align 4
  %v1_da58 = add i32 %v0_da58, 13
  %v2_da58 = inttoptr i32 %v1_da58 to i8*
  %v3_da58 = load i8, i8* %v2_da58, align 1
  %v4_da58 = zext i8 %v3_da58 to i32
  store i32 %v1_d938, i32* %r0.global-to-local, align 4
  %v1_da60 = and i32 %v4_da58, 251
  %v5_da64 = or i32 %v1_da60, %v4_da64
  store i32 %v5_da64, i32* %r2.global-to-local, align 4
  %v1_da68 = trunc i32 %v5_da64 to i8
  store i8 %v1_da68, i8* %v2_da58, align 1
  %v0_da6c = load i32, i32* %r1.global-to-local, align 4
  %v1_da6c = add i32 %v0_da6c, 13
  %v2_da6c = inttoptr i32 %v1_da6c to i8*
  %v3_da6c = load i8, i8* %v2_da6c, align 1
  %v4_da6c = zext i8 %v3_da6c to i32
  store i32 %v1_d93c, i32* %r2.global-to-local, align 4
  %v1_da74 = and i32 %v4_da6c, 253
  %v4_da78 = or i32 %v1_da74, %v3_da78
  store i32 %v4_da78, i32* %r3.global-to-local, align 4
  %v1_da7c = trunc i32 %v4_da78 to i8
  store i8 %v1_da7c, i8* %v2_da6c, align 1
  %v0_da80 = load i32, i32* %r1.global-to-local, align 4
  %v1_da80 = add i32 %v0_da80, 12
  %v2_da80 = inttoptr i32 %v1_da80 to i8*
  %v3_da80 = load i8, i8* %v2_da80, align 1
  %v4_da80 = zext i8 %v3_da80 to i32
  store i32 %v4_da80, i32* %r2.global-to-local, align 4
  %v1_da84 = add i32 %v0_da80, 13
  %v2_da84 = inttoptr i32 %v1_da84 to i8*
  %v3_da84 = load i8, i8* %v2_da84, align 1
  %v4_da84 = zext i8 %v3_da84 to i32
  %tmp85 = urem i8 %v3_da80, 16
  %v1_da8c = zext i8 %tmp85 to i32
  %v1_da90 = and i32 %v4_da84, 254
  %v2_da94 = or i32 %v1_da90, %v1_d948
  %v1_da98 = or i32 %v1_da8c, 160
  store i32 %v1_da98, i32* %r2.global-to-local, align 4
  %v1_da9c = trunc i32 %v2_da94 to i8
  store i8 %v1_da9c, i8* %v2_da84, align 1
  %v0_daa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_daa0 = trunc i32 %v0_daa0 to i8
  %v2_daa0 = load i32, i32* %r1.global-to-local, align 4
  %v3_daa0 = add i32 %v2_daa0, 12
  %v4_daa0 = inttoptr i32 %v3_daa0 to i8*
  store i8 %v1_daa0, i8* %v4_daa0, align 1
  store i32 %v3_daa8, i32* %r0.global-to-local, align 4
  store i32 %v7_daa8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_dab4 = load i32, i32* %r1.global-to-local, align 4
  %v3_dab4 = add i32 %v2_dab4, 3
  %v4_dab4 = inttoptr i32 %v3_dab4 to i8*
  store i8 %v5_d964, i8* %v4_dab4, align 1
  %v0_dab8 = load i32, i32* %r0.global-to-local, align 4
  %v1_dab8 = trunc i32 %v0_dab8 to i8
  %v2_dab8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dab8 = add i32 %v2_dab8, 1
  %v4_dab8 = inttoptr i32 %v3_dab8 to i8*
  store i8 %v1_dab8, i8* %v4_dab8, align 1
  %v0_dabc = load i32, i32* %r6.global-to-local, align 4
  %v1_dabc = trunc i32 %v0_dabc to i8
  %v2_dabc = load i32, i32* %r1.global-to-local, align 4
  %v3_dabc = add i32 %v2_dabc, 2
  %v4_dabc = inttoptr i32 %v3_dabc to i8*
  store i8 %v1_dabc, i8* %v4_dabc, align 1
  %v0_dac0 = load i32, i32* %r5.global-to-local, align 4
  %v1_dac0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dac0 = add i32 %v1_dac0, 4
  %v3_dac0 = inttoptr i32 %v2_dac0 to i32*
  store i32 %v0_dac0, i32* %v3_dac0, align 4
  %v0_dac4 = load i32, i32* %ip.global-to-local, align 4
  %v1_dac4 = trunc i32 %v0_dac4 to i8
  %v2_dac4 = load i32, i32* %r4.global-to-local, align 4
  %v3_dac4 = add i32 %v2_dac4, 41
  %v4_dac4 = inttoptr i32 %v3_dac4 to i8*
  store i8 %v1_dac4, i8* %v4_dac4, align 1
  %v0_dac8 = load i32, i32* %r3.global-to-local, align 4
  %v1_dac8 = trunc i32 %v0_dac8 to i8
  %v2_dac8 = load i32, i32* %r4.global-to-local, align 4
  %v3_dac8 = add i32 %v2_dac8, 40
  %v4_dac8 = inttoptr i32 %v3_dac8 to i8*
  store i8 %v1_dac8, i8* %v4_dac8, align 1
  %v0_dacc = call i32 @function_f28c()
  %v1_dad0 = mul i32 %v0_dacc, 256
  %v1_dad4 = and i32 %v1_dad0, 3840
  %v1_dad8 = or i32 %v1_dad4, 28672
  %v3_dae0 = add nuw nsw i32 %v1_dad8, 2048
  %v3_daec8 = udiv i32 %v3_dae0, 256
  store i32 %v3_daec8, i32* %r1.global-to-local, align 4
  %v0_daf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_daf0 = add i32 %v0_daf0, 42
  store i32 %v1_daf0, i32* %r2.global-to-local, align 4
  %v4_daf4 = inttoptr i32 %v1_daf0 to i8*
  store i8 5, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* %r2.global-to-local, align 4
  %v3_daf8 = add i32 %v2_daf8, 1
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_db04 = load i32, i32* %r4.global-to-local, align 4
  %v3_db04 = add i32 %v2_db04, 47
  %v4_db04 = inttoptr i32 %v3_db04 to i8*
  store i8 10, i8* %v4_db04, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_db10 = load i32, i32* %r3.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* %r4.global-to-local, align 4
  %v3_db10 = add i32 %v2_db10, 46
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r2.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* %r4.global-to-local, align 4
  %v3_db14 = add i32 %v2_db14, 45
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* %r0.global-to-local, align 4
  %v1_db18 = trunc i32 %v0_db18 to i8
  %v2_db18 = load i32, i32* %r4.global-to-local, align 4
  %v3_db18 = add i32 %v2_db18, 44
  %v4_db18 = inttoptr i32 %v3_db18 to i8*
  store i8 %v1_db18, i8* %v4_db18, align 1
  %v0_db1c = call i32 @function_f28c()
  store i32 %v0_db1c, i32* %r0.global-to-local, align 4
  %v2_db24 = load i32, i32* %r4.global-to-local, align 4
  %v3_db24 = add i32 %v2_db24, 56
  %v4_db24 = inttoptr i32 %v3_db24 to i8*
  store i8 1, i8* %v4_db24, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_db34 = load i32, i32* %r4.global-to-local, align 4
  %v2_db34 = add i32 %v1_db34, 48
  %v3_db34 = inttoptr i32 %v2_db34 to i32*
  store i32 %v0_db1c, i32* %v3_db34, align 4
  %v0_db38 = load i32, i32* %r2.global-to-local, align 4
  %v1_db38 = trunc i32 %v0_db38 to i8
  %v2_db38 = load i32, i32* %r4.global-to-local, align 4
  %v3_db38 = add i32 %v2_db38, 58
  %v4_db38 = inttoptr i32 %v3_db38 to i8*
  store i8 %v1_db38, i8* %v4_db38, align 1
  %v0_db3c = load i32, i32* %r3.global-to-local, align 4
  %v1_db3c = trunc i32 %v0_db3c to i8
  %v2_db3c = load i32, i32* %r4.global-to-local, align 4
  %v3_db3c = add i32 %v2_db3c, 59
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v0_db40 = load i32, i32* %ip.global-to-local, align 4
  %v1_db40 = load i32, i32* %r4.global-to-local, align 4
  %v2_db40 = add i32 %v1_db40, 52
  %v3_db40 = inttoptr i32 %v2_db40 to i32*
  store i32 %v0_db40, i32* %v3_db40, align 4
  %v0_db44 = load i32, i32* %r2.global-to-local, align 4
  %v1_db44 = trunc i32 %v0_db44 to i8
  %v2_db44 = load i32, i32* %r4.global-to-local, align 4
  %v3_db44 = add i32 %v2_db44, 57
  %v4_db44 = inttoptr i32 %v3_db44 to i8*
  store i8 %v1_db44, i8* %v4_db44, align 1
  %v3_db48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db48, i32* %r3.global-to-local, align 4
  %v1_db4c = add i32 %v3_db48, 1
  store i32 %v1_db4c, i32* %r4.global-to-local, align 4
  %v0_db50 = load i32, i32* @sl, align 4
  %v9_db50 = icmp eq i32 %v0_db50, %v1_db4c
  store i1 %v9_db50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db4c, i32* %stack_var_-40, align 4
  %v8_db58 = icmp sgt i32 %v0_db50, %v1_db4c
  br i1 %v8_db58, label %dec_label_pc_d96c, label %dec_label_pc_db5c

dec_label_pc_db5c:                                ; preds = %bb77, %dec_label_pc_d878
  %v0_db5c = phi i32 [ %v0_d8a8, %dec_label_pc_d878 ], [ %v0_db50, %bb77 ]
  %v2_db5c = icmp eq i32 %v0_db5c, 0
  store i1 %v2_db5c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dd14 = icmp eq i32 %v3_d880, 65535
  %v2_dd90 = icmp eq i32 %v1_d8a4, 0
  %v2_db98 = icmp eq i32 %v6_d82c, -1
  br label %dec_label_pc_db64.outer

dec_label_pc_db64.outer:                          ; preds = %dec_label_pc_dc90, %dec_label_pc_db5c
  %v1_db64.ph.in = phi i32 [ %v1_dc84, %dec_label_pc_dc90 ], [ %v0_db5c, %dec_label_pc_db5c ]
  %v0_db64.ph = phi i1 [ %v2_dc90, %dec_label_pc_dc90 ], [ %v2_db5c, %dec_label_pc_db5c ]
  %v1_db64.ph = icmp slt i32 %v1_db64.ph.in, 0
  %v4_db64 = or i1 %v1_db64.ph, %v0_db64.ph
  br label %dec_label_pc_db64

dec_label_pc_db64:                                ; preds = %dec_label_pc_db64.outer, %dec_label_pc_db64
  br i1 %v4_db64, label %dec_label_pc_db64, label %dec_label_pc_db68

dec_label_pc_db68:                                ; preds = %dec_label_pc_db64
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db74

dec_label_pc_db74:                                ; preds = %dec_label_pc_dbf0, %dec_label_pc_db68
  %v1_db84 = phi i32 [ %v1_dc80, %dec_label_pc_dbf0 ], [ 0, %dec_label_pc_db68 ]
  %v5_db78 = mul i32 %v1_db84, 24
  %v1_db7c = load i32, i32* @r8, align 4
  %v2_db7c = add i32 %v1_db7c, %v5_db78
  store i32 %v2_db7c, i32* %r3.global-to-local, align 4
  %v1_db80 = add i32 %v2_db7c, 20
  %v2_db80 = inttoptr i32 %v1_db80 to i8*
  %v3_db80 = load i8, i8* %v2_db80, align 1
  %v4_db80 = zext i8 %v3_db80 to i32
  store i32 %v4_db80, i32* %r2.global-to-local, align 4
  %v0_db84 = load i32, i32* %fp.global-to-local, align 4
  %v4_db84 = mul i32 %v1_db84, 4
  %v5_db84 = add i32 %v0_db84, %v4_db84
  %v6_db84 = inttoptr i32 %v5_db84 to i32*
  %v7_db84 = load i32, i32* %v6_db84, align 4
  store i32 %v7_db84, i32* @r5, align 4
  %v7_db88 = icmp eq i8 %v3_db80, 31
  store i1 %v7_db88, i1* %cpsr_z.global-to-local, align 1
  %v1_db8c = add i32 %v7_db84, 20
  store i32 %v1_db8c, i32* @r6, align 4
  %tmp86 = icmp ult i8 %v3_db80, 32
  br i1 %tmp86, label %dec_label_pc_dc9c, label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db74
  store i32 %v6_d82c, i32* %r0.global-to-local, align 4
  store i1 %v2_db98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_db98, label %dec_label_pc_dd04, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_db94
  store i32 %v3_d880, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_dd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dd14, label %dec_label_pc_dd20, label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_dd04.dec_label_pc_dbb4_crit_edge, %dec_label_pc_dba0
  %v1_dbb8 = phi i32 [ %v1_dbb8.pre, %dec_label_pc_dd04.dec_label_pc_dbb4_crit_edge ], [ 65535, %dec_label_pc_dba0 ]
  store i32 %v3_d89c, i32* %r3.global-to-local, align 4
  %v9_dbb8 = icmp eq i32 %v3_d89c, %v1_dbb8
  store i1 %v9_dbb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbb8, label %dec_label_pc_dd3c, label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_dd20.dec_label_pc_dbc0_crit_edge, %dec_label_pc_dbb4
  %v1_dbc4 = phi i32 [ %v1_dbc4.pre, %dec_label_pc_dd20.dec_label_pc_dbc0_crit_edge ], [ %v1_dbb8, %dec_label_pc_dbb4 ]
  store i32 %v3_d8a0, i32* %ip.global-to-local, align 4
  %v9_dbc4 = icmp eq i32 %v3_d8a0, %v1_dbc4
  store i1 %v9_dbc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbc4, label %dec_label_pc_dd58, label %dec_label_pc_dbcc

dec_label_pc_dbcc:                                ; preds = %dec_label_pc_dd3c.dec_label_pc_dbcc_crit_edge, %dec_label_pc_dbc0
  %v1_dbd0 = phi i32 [ %v1_dbd0.pre, %dec_label_pc_dd3c.dec_label_pc_dbcc_crit_edge ], [ %v1_dbc4, %dec_label_pc_dbc0 ]
  store i32 %v5_d768, i32* %r0.global-to-local, align 4
  %v9_dbd0 = icmp eq i32 %v5_d768, %v1_dbd0
  store i1 %v9_dbd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbd0, label %dec_label_pc_dd74, label %dec_label_pc_dbd8

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_dd58.dec_label_pc_dbd8_crit_edge, %dec_label_pc_dbcc
  %v1_dbdc = phi i32 [ %v1_dbdc.pre, %dec_label_pc_dd58.dec_label_pc_dbd8_crit_edge ], [ %v1_dbd0, %dec_label_pc_dbcc ]
  store i32 %v6_d780, i32* %r2.global-to-local, align 4
  %v9_dbdc = icmp eq i32 %v6_d780, %v1_dbdc
  store i1 %v9_dbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbdc, label %dec_label_pc_dd88, label %dec_label_pc_dbe4

dec_label_pc_dbe4:                                ; preds = %dec_label_pc_dd74, %dec_label_pc_dbd8
  store i32 %v1_d8a4, i32* %r3.global-to-local, align 4
  store i1 %v2_dd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd90, label %dec_label_pc_dbf0, label %dec_label_pc_dd9c

dec_label_pc_dbf0:                                ; preds = %dec_label_pc_dbe4, %dec_label_pc_dd88, %dec_label_pc_dd9c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dbf4 = load i32, i32* %r7.global-to-local, align 4
  %v1_dbf4 = trunc i32 %v0_dbf4 to i8
  %v2_dbf4 = load i32, i32* @r5, align 4
  %v3_dbf4 = add i32 %v2_dbf4, 10
  %v4_dbf4 = inttoptr i32 %v3_dbf4 to i8*
  store i8 %v1_dbf4, i8* %v4_dbf4, align 1
  %v0_dbf8 = load i32, i32* %r7.global-to-local, align 4
  %v1_dbf8 = trunc i32 %v0_dbf8 to i8
  %v2_dbf8 = load i32, i32* @r5, align 4
  %v3_dbf8 = add i32 %v2_dbf8, 11
  %v4_dbf8 = inttoptr i32 %v3_dbf8 to i8*
  store i8 %v1_dbf8, i8* %v4_dbf8, align 1
  %v0_dbfc = load i32, i32* @r5, align 4
  store i32 %v0_dbfc, i32* @r0, align 4
  %v2_dc00 = call i32 @function_ddc4(i32 %v0_dbfc, i32 20)
  %v3_dc00 = trunc i32 %v2_dc00 to i8
  %v4_dc0428 = udiv i32 %v2_dc00, 256
  %v1_dc08 = trunc i32 %v4_dc0428 to i8
  %v2_dc08 = load i32, i32* @r5, align 4
  %v3_dc08 = add i32 %v2_dc08, 11
  %v4_dc08 = inttoptr i32 %v3_dc08 to i8*
  store i8 %v1_dc08, i8* %v4_dc08, align 1
  %v3_dc0c = load i32, i32* @r5, align 4
  %v4_dc0c = add i32 %v3_dc0c, 10
  %v5_dc0c = inttoptr i32 %v4_dc0c to i8*
  store i8 %v3_dc00, i8* %v5_dc0c, align 1
  %v0_dc10 = load i32, i32* @r6, align 4
  store i32 %v0_dc10, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_dc1c = load i32, i32* %r7.global-to-local, align 4
  %v1_dc1c = trunc i32 %v0_dc1c to i8
  %v3_dc1c = add i32 %v0_dc10, 16
  %v4_dc1c = inttoptr i32 %v3_dc1c to i8*
  store i8 %v1_dc1c, i8* %v4_dc1c, align 1
  %v0_dc20 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc20 = trunc i32 %v0_dc20 to i8
  %v2_dc20 = load i32, i32* @r6, align 4
  %v3_dc20 = add i32 %v2_dc20, 17
  %v4_dc20 = inttoptr i32 %v3_dc20 to i8*
  store i8 %v1_dc20, i8* %v4_dc20, align 1
  %v0_dc24 = load i32, i32* @r5, align 4
  store i32 %v0_dc24, i32* %r0.global-to-local, align 4
  %v4_dc28 = call i32 @function_de20(i32 %v0_dc24, i32 %v0_dc10, i32 10240, i32 40)
  %v5_dc28 = trunc i32 %v4_dc28 to i8
  store i32 %v4_dc28, i32* %r0.global-to-local, align 4
  %v4_dc2c29 = udiv i32 %v4_dc28, 256
  %v1_dc30 = trunc i32 %v4_dc2c29 to i8
  %v2_dc30 = load i32, i32* @r6, align 4
  %v3_dc30 = add i32 %v2_dc30, 17
  %v4_dc30 = inttoptr i32 %v3_dc30 to i8*
  store i8 %v1_dc30, i8* %v4_dc30, align 1
  %v3_dc34 = load i32, i32* @r6, align 4
  %v4_dc34 = add i32 %v3_dc34, 16
  %v5_dc34 = inttoptr i32 %v4_dc34 to i8*
  store i8 %v5_dc28, i8* %v5_dc34, align 1
  %v3_dc38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dc38, i32* %r3.global-to-local, align 4
  %v0_dc3c = load i32, i32* @r5, align 4
  %v1_dc3c = add i32 %v0_dc3c, 20
  %v2_dc3c = inttoptr i32 %v1_dc3c to i32*
  %v3_dc3c = load i32, i32* %v2_dc3c, align 4
  %v3_dc44 = udiv i32 %v3_dc3c, 65536
  store i32 %v3_dc44, i32* %r2.global-to-local, align 4
  %v5_dc48 = mul i32 %v3_dc38, 24
  %v1_dc4c = load i32, i32* @r8, align 4
  %v2_dc4c = add i32 %v1_dc4c, %v5_dc48
  store i32 %v2_dc4c, i32* %ip.global-to-local, align 4
  %v3_dc5027 = udiv i32 %v3_dc3c, 16777216
  %v1_dc54 = trunc i32 %v3_dc5027 to i8
  %v3_dc54 = add i32 %v2_dc4c, 3
  %v4_dc54 = inttoptr i32 %v3_dc54 to i8*
  store i8 %v1_dc54, i8* %v4_dc54, align 1
  %v0_dc58 = load i32, i32* %r2.global-to-local, align 4
  %v1_dc58 = trunc i32 %v0_dc58 to i8
  %v2_dc58 = load i32, i32* %ip.global-to-local, align 4
  %v3_dc58 = add i32 %v2_dc58, 2
  %v4_dc58 = inttoptr i32 %v3_dc58 to i8*
  store i8 %v1_dc58, i8* %v4_dc58, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc60 = load i32, i32* @r5, align 4
  store i32 %v0_dc60, i32* %r1.global-to-local, align 4
  %v0_dc64 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dc64, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_dc70 = load i32, i32* %ip.global-to-local, align 4
  %v4_dc70 = inttoptr i32 %v0_dc70 to %sockaddr*
  %v7_dc78 = inttoptr i32 %v0_dc60 to i32*
  %v9_dc78 = call i32 @sendto(i32 %v0_dc64, i32* %v7_dc78, i32 60, i32 16384, %sockaddr* %v4_dc70, i32 16)
  %v3_dc7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dc7c, i32* %r3.global-to-local, align 4
  %v1_dc80 = add i32 %v3_dc7c, 1
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  %v1_dc84 = load i32, i32* @sl, align 4
  %v9_dc84 = icmp eq i32 %v1_dc80, %v1_dc84
  store i1 %v9_dc84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dc80, i32* %stack_var_-40, align 4
  %v5_dc8c = icmp slt i32 %v1_dc80, %v1_dc84
  br i1 %v5_dc8c, label %dec_label_pc_db74, label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dbf0
  %v2_dc90 = icmp eq i32 %v1_dc84, 0
  store i1 %v2_dc90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db64.outer

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_db74
  %v1_dc9c = add i32 %v2_db7c, 16
  %v2_dc9c = inttoptr i32 %v1_dc9c to i32*
  %v3_dc9c = load i32, i32* %v2_dc9c, align 4
  store i32 %v3_dc9c, i32* %r4.global-to-local, align 4
  %v0_dca0 = call i32 @function_f28c()
  store i32 %v0_dca0, i32* %r0.global-to-local, align 4
  %v3_dca4 = load i32, i32* %stack_var_-40, align 4
  %v5_dcac = mul i32 %v3_dca4, 24
  %v0_dcb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_dcb4 = load i32, i32* @r8, align 4
  %v2_dcb4 = add i32 %v1_dcb4, %v5_dcac
  store i32 %v2_dcb4, i32* %r1.global-to-local, align 4
  %v1_dcb8 = and i32 %v0_dcb0, 65280
  store i32 %v1_dcb8, i32* %r3.global-to-local, align 4
  %v1_dcb0 = udiv i32 %v0_dcb0, 256
  %v3_dcbc = and i32 %v1_dcb0, 65280
  store i32 %v3_dcbc, i32* %r2.global-to-local, align 4
  %v3_dcc0 = mul i32 %v0_dcb0, 16777216
  store i32 %v3_dcc0, i32* %ip.global-to-local, align 4
  %v1_dcc4 = add i32 %v2_dcb4, 20
  %v2_dcc4 = inttoptr i32 %v1_dcc4 to i8*
  %v3_dcc4 = load i8, i8* %v2_dcc4, align 1
  %v4_dcc4 = zext i8 %v3_dcc4 to i32
  %v4_dcc8 = mul nuw nsw i32 %v1_dcb8, 256
  %v5_dcc8 = or i32 %v4_dcc8, %v3_dcc0
  store i32 %v5_dcc8, i32* %ip.global-to-local, align 4
  %v2_dcd0 = call i32 @llvm.bswap.i32(i32 %v0_dcb0)
  %v7_dcd4 = lshr i32 %v0_dca0, %v4_dcc4
  %v8_dcd4 = add i32 %v7_dcd4, %v2_dcd0
  store i32 %v8_dcd4, i32* %r2.global-to-local, align 4
  %v3_dce0 = mul i32 %v8_dcd4, 16777216
  %v1_dcd8 = mul i32 %v8_dcd4, 256
  %v4_dce4 = and i32 %v1_dcd8, 16711680
  %v5_dce4 = or i32 %v4_dce4, %v3_dce0
  store i32 %v5_dce4, i32* %r1.global-to-local, align 4
  store i32 %v6_d82c, i32* %r0.global-to-local, align 4
  %v2_dcf4 = call i32 @llvm.bswap.i32(i32 %v8_dcd4)
  store i32 %v2_dcf4, i32* %r3.global-to-local, align 4
  store i1 %v2_db98, i1* %cpsr_z.global-to-local, align 1
  %v1_dcfc = load i32, i32* @r5, align 4
  %v2_dcfc = add i32 %v1_dcfc, 16
  %v3_dcfc = inttoptr i32 %v2_dcfc to i32*
  store i32 %v2_dcf4, i32* %v3_dcfc, align 4
  br i1 %v2_db98, label %dec_label_pc_dd04, label %dec_label_pc_dba0

dec_label_pc_dd04:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_db94
  %v0_dd04 = call i32 @function_f28c()
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  store i32 %v3_d880, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_dd14, i1* %cpsr_z.global-to-local, align 1
  %v1_dd18 = load i32, i32* @r5, align 4
  %v2_dd18 = add i32 %v1_dd18, 12
  %v3_dd18 = inttoptr i32 %v2_dd18 to i32*
  store i32 %v0_dd04, i32* %v3_dd18, align 4
  br i1 %v3_dd14, label %dec_label_pc_dd20, label %dec_label_pc_dd04.dec_label_pc_dbb4_crit_edge

dec_label_pc_dd04.dec_label_pc_dbb4_crit_edge:    ; preds = %dec_label_pc_dd04
  %v1_dbb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbb4

dec_label_pc_dd20:                                ; preds = %dec_label_pc_dd04, %dec_label_pc_dba0
  %v0_dd20 = call i32 @function_f28c()
  %v1_dd20 = trunc i32 %v0_dd20 to i8
  store i32 %v0_dd20, i32* %r0.global-to-local, align 4
  %v4_dd2430 = udiv i32 %v0_dd20, 256
  %v1_dd28 = trunc i32 %v4_dd2430 to i8
  %v2_dd28 = load i32, i32* @r5, align 4
  %v3_dd28 = add i32 %v2_dd28, 5
  %v4_dd28 = inttoptr i32 %v3_dd28 to i8*
  store i8 %v1_dd28, i8* %v4_dd28, align 1
  store i32 %v3_d89c, i32* %r3.global-to-local, align 4
  %v1_dd30 = load i32, i32* @r4, align 4
  %v9_dd30 = icmp eq i32 %v3_d89c, %v1_dd30
  store i1 %v9_dd30, i1* %cpsr_z.global-to-local, align 1
  %v3_dd34 = load i32, i32* @r5, align 4
  %v4_dd34 = add i32 %v3_dd34, 4
  %v5_dd34 = inttoptr i32 %v4_dd34 to i8*
  store i8 %v1_dd20, i8* %v5_dd34, align 1
  %v0_dd38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd38, label %dec_label_pc_dd3c, label %dec_label_pc_dd20.dec_label_pc_dbc0_crit_edge

dec_label_pc_dd20.dec_label_pc_dbc0_crit_edge:    ; preds = %dec_label_pc_dd20
  %v1_dbc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbc0

dec_label_pc_dd3c:                                ; preds = %dec_label_pc_dd20, %dec_label_pc_dbb4
  %v0_dd3c = call i32 @function_f28c()
  %v1_dd3c = trunc i32 %v0_dd3c to i8
  store i32 %v0_dd3c, i32* %r0.global-to-local, align 4
  store i32 %v3_d8a0, i32* %ip.global-to-local, align 4
  %v4_dd44 = sdiv i32 %v0_dd3c, 256
  store i32 %v4_dd44, i32* %r3.global-to-local, align 4
  %v1_dd48 = load i32, i32* @r4, align 4
  %v9_dd48 = icmp eq i32 %v3_d8a0, %v1_dd48
  store i1 %v9_dd48, i1* %cpsr_z.global-to-local, align 1
  %v3_dd4c = load i32, i32* @r5, align 4
  %v4_dd4c = add i32 %v3_dd4c, 20
  %v5_dd4c = inttoptr i32 %v4_dd4c to i8*
  store i8 %v1_dd3c, i8* %v5_dd4c, align 1
  %v0_dd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd50 = trunc i32 %v0_dd50 to i8
  %v2_dd50 = load i32, i32* @r6, align 4
  %v3_dd50 = add i32 %v2_dd50, 1
  %v4_dd50 = inttoptr i32 %v3_dd50 to i8*
  store i8 %v1_dd50, i8* %v4_dd50, align 1
  %v0_dd54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd54, label %dec_label_pc_dd58, label %dec_label_pc_dd3c.dec_label_pc_dbcc_crit_edge

dec_label_pc_dd3c.dec_label_pc_dbcc_crit_edge:    ; preds = %dec_label_pc_dd3c
  %v1_dbd0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbcc

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd3c, %dec_label_pc_dbc0
  %v0_dd58 = call i32 @function_f28c()
  %v1_dd58 = trunc i32 %v0_dd58 to i8
  %v4_dd5c = sdiv i32 %v0_dd58, 256
  store i32 %v4_dd5c, i32* %r3.global-to-local, align 4
  %v3_dd60 = load i32, i32* @r6, align 4
  %v4_dd60 = add i32 %v3_dd60, 2
  %v5_dd60 = inttoptr i32 %v4_dd60 to i8*
  store i8 %v1_dd58, i8* %v5_dd60, align 1
  store i32 %v5_d768, i32* %r0.global-to-local, align 4
  %v1_dd68 = load i32, i32* @r4, align 4
  %v9_dd68 = icmp eq i32 %v5_d768, %v1_dd68
  store i1 %v9_dd68, i1* %cpsr_z.global-to-local, align 1
  %v0_dd6c = load i32, i32* %r3.global-to-local, align 4
  %v1_dd6c = trunc i32 %v0_dd6c to i8
  %v2_dd6c = load i32, i32* @r6, align 4
  %v3_dd6c = add i32 %v2_dd6c, 3
  %v4_dd6c = inttoptr i32 %v3_dd6c to i8*
  store i8 %v1_dd6c, i8* %v4_dd6c, align 1
  %v0_dd70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd70, label %dec_label_pc_dd74, label %dec_label_pc_dd58.dec_label_pc_dbd8_crit_edge

dec_label_pc_dd58.dec_label_pc_dbd8_crit_edge:    ; preds = %dec_label_pc_dd58
  %v1_dbdc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbd8

dec_label_pc_dd74:                                ; preds = %dec_label_pc_dd58, %dec_label_pc_dbcc
  %v0_dd74 = call i32 @function_f28c()
  store i32 %v0_dd74, i32* %r0.global-to-local, align 4
  store i32 %v6_d780, i32* %r2.global-to-local, align 4
  %v1_dd7c = load i32, i32* @r4, align 4
  %v9_dd7c = icmp eq i32 %v6_d780, %v1_dd7c
  store i1 %v9_dd7c, i1* %cpsr_z.global-to-local, align 1
  %v1_dd80 = load i32, i32* @r6, align 4
  %v2_dd80 = add i32 %v1_dd80, 4
  %v3_dd80 = inttoptr i32 %v2_dd80 to i32*
  store i32 %v0_dd74, i32* %v3_dd80, align 4
  br i1 %v9_dd7c, label %dec_label_pc_dd88, label %dec_label_pc_dbe4

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd74, %dec_label_pc_dbd8
  %v0_dd88 = call i32 @function_f28c()
  store i32 %v0_dd88, i32* %r0.global-to-local, align 4
  store i32 %v1_d8a4, i32* %r3.global-to-local, align 4
  store i1 %v2_dd90, i1* %cpsr_z.global-to-local, align 1
  %v1_dd94 = load i32, i32* @r6, align 4
  %v2_dd94 = add i32 %v1_dd94, 8
  %v3_dd94 = inttoptr i32 %v2_dd94 to i32*
  store i32 %v0_dd88, i32* %v3_dd94, align 4
  br i1 %v2_dd90, label %dec_label_pc_dbf0, label %dec_label_pc_dd9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dbe4, %dec_label_pc_dd88
  %v0_dd9c = call i32 @function_f28c()
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  store i32 %v0_dd9c, i32* %r0.global-to-local, align 4
  %v4_dda0 = sdiv i32 %v0_dd9c, 256
  store i32 %v4_dda0, i32* %r3.global-to-local, align 4
  %v1_dda4 = trunc i32 %v4_dda0 to i8
  %v2_dda4 = load i32, i32* @r6, align 4
  %v3_dda4 = add i32 %v2_dda4, 19
  %v4_dda4 = inttoptr i32 %v3_dda4 to i8*
  store i8 %v1_dda4, i8* %v4_dda4, align 1
  %v3_dda8 = load i32, i32* @r6, align 4
  %v4_dda8 = add i32 %v3_dda8, 18
  %v5_dda8 = inttoptr i32 %v4_dda8 to i8*
  store i8 %v1_dd9c, i8* %v5_dda8, align 1
  br label %dec_label_pc_dbf0

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_d850
  %v0_ddb0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ddb0, i32* %r0.global-to-local, align 4
  %v1_ddb4 = call i32 @close(i32 %v0_ddb0)
  store i32 %v1_ddb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddb8

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_d678, %dec_label_pc_ddb0
  %v29_ddbc = phi i32 [ -1, %dec_label_pc_d678 ], [ %v1_ddb4, %dec_label_pc_ddb0 ]
  store i32 %v3_d678, i32* %r4.global-to-local, align 4
  store i32 %v6_d678, i32* %r5.global-to-local, align 4
  store i32 %v9_d678, i32* %r6.global-to-local, align 4
  store i32 %v12_d678, i32* %r7.global-to-local, align 4
  ret i32 %v29_ddbc

; uselistorder directives
  uselistorder i32 %v4_dda0, { 1, 0 }
  uselistorder i32 %v0_dd9c, { 0, 2, 1 }
  uselistorder i32 %v0_dd3c, { 0, 2, 1 }
  uselistorder i32 %v0_dd20, { 0, 2, 1 }
  uselistorder i32 %v2_dcf4, { 1, 0 }
  uselistorder i32 %v8_dcd4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_dcc0, { 1, 0 }
  uselistorder i32 %v0_dcb0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_dc90, { 1, 0 }
  uselistorder i32 %v1_dc84, { 0, 2, 3, 1 }
  uselistorder i32 %v1_dc80, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_dc28, { 0, 2, 1 }
  uselistorder i32 %v0_dc10, { 1, 0, 2 }
  uselistorder i1 %v2_db98, { 3, 0, 1, 2 }
  uselistorder i1 %v2_dd90, { 2, 3, 1, 0 }
  uselistorder i1 %v3_dd14, { 3, 2, 0, 1 }
  uselistorder i32 %v1_db4c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d964, { 1, 0 }
  uselistorder i32 %v3_d94c, { 1, 0 }
  uselistorder i32 %v1_d948, { 1, 0 }
  uselistorder i32 %v1_d93c, { 1, 0 }
  uselistorder i32 %v1_d938, { 1, 0 }
  uselistorder i32 %v1_d914, { 1, 0 }
  uselistorder i32 %v1_d910, { 1, 0 }
  uselistorder i32 %v3_d904, { 1, 0 }
  uselistorder i32 %v1_d900, { 1, 0 }
  uselistorder i32 %v1_d8dc, { 1, 0 }
  uselistorder i32 %v1_d8d4, { 1, 0 }
  uselistorder i32 %v1_d8a4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d89c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_d894, { 4, 0, 1, 3, 2 }
  uselistorder i32 %v0_d890, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v6_d82c, { 5, 3, 4, 0, 2, 1 }
  uselistorder i32 %v6_d780, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d768, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d718, { 1, 0 }
  uselistorder i32 %v7_d6d4, { 0, 1, 3, 2 }
  uselistorder i32 %v5_d6b0, { 1, 0 }
  uselistorder i32 %v1_d67c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 -8, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_ddb8, { 1, 0 }
  uselistorder label %dec_label_pc_dd9c, { 1, 0 }
  uselistorder label %dec_label_pc_dbf0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_db64, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ddc4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ddc4:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_ddf4, label %dec_label_pc_ddd0

dec_label_pc_ddd0:                                ; preds = %dec_label_pc_ddc4
  %v0_ddd4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ddd4

dec_label_pc_ddd4:                                ; preds = %dec_label_pc_ddd4, %dec_label_pc_ddd0
  %v0_dde8 = phi i32 [ %v2_dde8, %dec_label_pc_ddd4 ], [ 0, %dec_label_pc_ddd0 ]
  %v0_dddc = phi i32 [ %v1_dddc, %dec_label_pc_ddd4 ], [ %arg1, %dec_label_pc_ddd0 ]
  %v0_ddec = phi i32 [ %v1_ddec, %dec_label_pc_ddd4 ], [ %v0_ddd4.pre, %dec_label_pc_ddd0 ]
  %v1_ddd4 = inttoptr i32 %v0_ddec to i8*
  %v2_ddd4 = load i8, i8* %v1_ddd4, align 1
  %v3_ddd4 = zext i8 %v2_ddd4 to i32
  %v1_ddd8 = add i32 %v0_ddec, 1
  %v2_ddd8 = inttoptr i32 %v1_ddd8 to i8*
  %v3_ddd8 = load i8, i8* %v2_ddd8, align 1
  %v4_ddd8 = zext i8 %v3_ddd8 to i32
  %v1_dddc = add i32 %v0_dddc, -2
  %v4_dde0 = mul nuw nsw i32 %v4_ddd8, 256
  %v5_dde0 = or i32 %v4_dde0, %v3_ddd4
  %v2_dde8 = add i32 %v5_dde0, %v0_dde8
  %v1_ddec = add i32 %v0_ddec, 2
  store i32 %v1_ddec, i32* @r0, align 4
  %v1_dddc.cmp = icmp ugt i32 %v1_dddc, 1
  br i1 %v1_dddc.cmp, label %dec_label_pc_ddd4, label %dec_label_pc_ddf4

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_ddd4, %dec_label_pc_ddc4
  %v1_ddfc = phi i32 [ 0, %dec_label_pc_ddc4 ], [ %v2_dde8, %dec_label_pc_ddd4 ]
  %v0_ddf4 = phi i32 [ %arg1, %dec_label_pc_ddc4 ], [ %v1_dddc, %dec_label_pc_ddd4 ]
  %v7_ddf4 = icmp eq i32 %v0_ddf4, 1
  br i1 %v7_ddf4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ddf4
  %v1_ddf8 = load i32, i32* @r0, align 4
  %v2_ddf8 = inttoptr i32 %v1_ddf8 to i8*
  %v3_ddf8 = load i8, i8* %v2_ddf8, align 1
  %v4_ddf8 = zext i8 %v3_ddf8 to i32
  %v3_ddfc = add i32 %v1_ddfc, %v4_ddf8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ddf4, %bb
  %v0_de00 = phi i32 [ %v1_ddfc, %dec_label_pc_ddf4 ], [ %v3_ddfc, %bb ]
  %v3_de04 = urem i32 %v0_de00, 65536
  %v4_de08 = udiv i32 %v0_de00, 65536
  %v5_de08 = add nuw nsw i32 %v4_de08, %v3_de04
  %v4_de0c = udiv i32 %v5_de08, 65536
  %v5_de0c = add nuw nsw i32 %v4_de0c, %v5_de08
  %v1_de10 = urem i32 %v5_de0c, 65536
  %v3_de18 = xor i32 %v1_de10, 65535
  ret i32 %v3_de18

; uselistorder directives
  uselistorder i32 %v5_de08, { 1, 0 }
  uselistorder i32 %v1_ddec, { 1, 0 }
  uselistorder i32 %v1_dddc, { 1, 0, 2 }
  uselistorder i32 %v0_ddec, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_de20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de20:
  %v3_de30 = urem i32 %arg2, 65536
  %v1_de34 = add i32 %arg1, 12
  %v1_de38 = inttoptr i32 %v1_de34 to i32*
  %v2_de38 = load i32, i32* %v1_de38, align 4
  %v3_de38 = add i32 %arg1, 16
  %v4_de38 = inttoptr i32 %v3_de38 to i32*
  %v5_de38 = load i32, i32* %v4_de38, align 4
  %v7_de3c = icmp sgt i32 %arg3, 1
  br i1 %v7_de3c, label %dec_label_pc_de48.preheader, label %dec_label_pc_de68

dec_label_pc_de48.preheader:                      ; preds = %dec_label_pc_de20
  %v0_de48.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_de48

dec_label_pc_de48:                                ; preds = %dec_label_pc_de48.preheader, %dec_label_pc_de48
  %v0_de5c = phi i32 [ 0, %dec_label_pc_de48.preheader ], [ %v2_de5c, %dec_label_pc_de48 ]
  %v0_de50 = phi i32 [ %arg3, %dec_label_pc_de48.preheader ], [ %v1_de50, %dec_label_pc_de48 ]
  %v0_de60 = phi i32 [ %v0_de48.pre, %dec_label_pc_de48.preheader ], [ %v1_de60, %dec_label_pc_de48 ]
  %v1_de48 = inttoptr i32 %v0_de60 to i8*
  %v2_de48 = load i8, i8* %v1_de48, align 1
  %v3_de48 = zext i8 %v2_de48 to i32
  %v1_de4c = add i32 %v0_de60, 1
  %v2_de4c = inttoptr i32 %v1_de4c to i8*
  %v3_de4c = load i8, i8* %v2_de4c, align 1
  %v4_de4c = zext i8 %v3_de4c to i32
  %v1_de50 = add nsw i32 %v0_de50, -2
  %v4_de54 = mul nuw nsw i32 %v4_de4c, 256
  %v5_de54 = or i32 %v4_de54, %v3_de48
  %v2_de5c = add i32 %v5_de54, %v0_de5c
  %v1_de60 = add i32 %v0_de60, 2
  store i32 %v1_de60, i32* @r1, align 4
  %v8_de64 = icmp sgt i32 %v1_de50, 1
  br i1 %v8_de64, label %dec_label_pc_de48, label %dec_label_pc_de68

dec_label_pc_de68:                                ; preds = %dec_label_pc_de48, %dec_label_pc_de20
  %v1_de70 = phi i32 [ 0, %dec_label_pc_de20 ], [ %v2_de5c, %dec_label_pc_de48 ]
  %v0_de68 = phi i32 [ %arg3, %dec_label_pc_de20 ], [ %v1_de50, %dec_label_pc_de48 ]
  %v7_de68 = icmp eq i32 %v0_de68, 1
  br i1 %v7_de68, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de68
  %v1_de6c = load i32, i32* @r1, align 4
  %v2_de6c = inttoptr i32 %v1_de6c to i8*
  %v3_de6c = load i8, i8* %v2_de6c, align 1
  %v4_de6c = zext i8 %v3_de6c to i32
  %v3_de70 = add i32 %v4_de6c, %v1_de70
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de68, %bb
  %v0_de94 = phi i32 [ %v1_de70, %dec_label_pc_de68 ], [ %v3_de70, %bb ]
  %v3_de78 = urem i32 %v2_de38, 65536
  %v1_de80 = add i32 %arg1, 9
  %v2_de80 = inttoptr i32 %v1_de80 to i8*
  %v3_de80 = load i8, i8* %v2_de80, align 1
  %v4_de80 = zext i8 %v3_de80 to i32
  %v3_de84 = urem i32 %v5_de38, 65536
  %v4_de88 = udiv i32 %v2_de38, 65536
  %v3_de90 = mul nuw nsw i32 %v4_de80, 256
  %v4_de94 = udiv i32 %v5_de38, 65536
  %v5_de94 = add i32 %v0_de94, %v4_de94
  %v2_de98 = add i32 %v5_de94, %v3_de90
  %v5_de88 = add nuw nsw i32 %v3_de78, %v3_de30
  %v2_de8c = add nuw nsw i32 %v5_de88, %v4_de88
  %v2_de9c = add nuw nsw i32 %v2_de8c, %v3_de84
  %v2_dea0 = add i32 %v2_de98, %v2_de9c
  %tmp = icmp ult i32 %v2_dea0, 65536
  br i1 %tmp, label %dec_label_pc_dec0, label %dec_label_pc_deac

dec_label_pc_deac:                                ; preds = %.thread, %dec_label_pc_deac
  %v2_deb41 = phi i32 [ %v2_deb4, %dec_label_pc_deac ], [ %v2_dea0, %.thread ]
  %v3_deb82.in = phi i32 [ %v2_deb4, %dec_label_pc_deac ], [ %v2_dea0, %.thread ]
  %v3_deb82 = udiv i32 %v3_deb82.in, 65536
  %v3_deb0 = urem i32 %v2_deb41, 65536
  %v2_deb4 = add nuw nsw i32 %v3_deb0, %v3_deb82
  %tmp14 = icmp ult i32 %v2_deb4, 65536
  br i1 %tmp14, label %dec_label_pc_dec0.loopexit, label %dec_label_pc_deac

dec_label_pc_dec0.loopexit:                       ; preds = %dec_label_pc_deac
  br label %dec_label_pc_dec0

dec_label_pc_dec0:                                ; preds = %dec_label_pc_dec0.loopexit, %.thread
  %v0_dec0 = phi i32 [ %v2_deb4, %dec_label_pc_dec0.loopexit ], [ %v2_dea0, %.thread ]
  %v1_dec0 = urem i32 %v0_dec0, 65536
  %v3_dec8 = xor i32 %v1_dec0, 65535
  ret i32 %v3_dec8

; uselistorder directives
  uselistorder i32 %v2_deb4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_dea0, { 3, 0, 2, 1 }
  uselistorder i32 %v1_de70, { 1, 0 }
  uselistorder i32 %v1_de60, { 1, 0 }
  uselistorder i32 %v1_de50, { 0, 2, 1 }
  uselistorder i32 %v0_de60, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_deac, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_de48, { 1, 0 }
}

define i32 @function_ded0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ded0:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ded0 = load i32, i32* @r4, align 4
  store i32 %v3_ded0, i32* %stack_var_-36, align 4
  %v6_ded0 = load i32, i32* @r5, align 4
  %v9_ded0 = load i32, i32* @r6, align 4
  %v12_ded0 = load i32, i32* @r7, align 4
  %v15_ded0 = load i32, i32* @r8, align 4
  %v21_ded0 = load i32, i32* @sl, align 4
  %v2_dee4 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_dee4, i32* @sl, align 4
  %v3_deec = mul i32 %arg1, 65536
  store i32 %v3_deec, i32* @r5, align 4
  %v2_def8 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_df04 = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_df18 = load i32, i32* @r5, align 4
  %v3_df18 = udiv i32 %v0_df18, 65536
  store i32 %v3_df18, i32* %r4.global-to-local, align 4
  %v4_df1c = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_df20 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_df20, i32* @r6, align 4
  %v1_df28 = mul nuw nsw i32 %v3_df18, 256
  %v3_df34 = and i32 %v1_df28, 65280
  store i32 %v3_df34, i32* %r4.global-to-local, align 4
  %v2_df3c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_df3c, i32* %sb.global-to-local, align 4
  %v3_df40 = bitcast i8* %stack_var_-581 to i32*
  %v4_df40 = call i32* @memset(i32* %v3_df40, i32 0, i32 513)
  %v2_df44 = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_df44, i32* %sb.global-to-local, align 4
  %v0_df4c = load i32, i32* %r4.global-to-local, align 4
  %v1_df4c = load i32, i32* @r5, align 4
  %v4_df4c = udiv i32 %v1_df4c, 16777216
  %v5_df4c = or i32 %v4_df4c, %v0_df4c
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_df6c = trunc i32 %v5_df4c to i8
  %v4_df6c = call i32 @function_1198c(i8 %v3_df6c, i32 16, i32 %v2_df44)
  %v2_df74 = call i32 @function_11528(i8* nonnull %stack_var_-68)
  %v7_df78 = icmp eq i32 %v2_df74, 2
  br i1 %v7_df78, label %dec_label_pc_e440, label %dec_label_pc_df80

dec_label_pc_df80:                                ; preds = %dec_label_pc_ded0, %dec_label_pc_e440
  %v1_df84 = call i32 @function_10f5c(i32 13)
  %v1_df8c = call i32 @function_10f5c(i32 14)
  %v1_df94 = call i32 @function_10f5c(i32 15)
  %v1_df9c = call i32 @function_10f5c(i32 17)
  %v0_dfa0 = load i32, i32* @r4, align 4
  %v2_dfa8 = inttoptr i32 %v0_dfa0 to i32*
  %v3_dfa8 = call i32 @function_10e78(i32 17, i32* %v2_dfa8)
  %v4_dfa8 = inttoptr i32 %v3_dfa8 to i8*
  %v0_dfac = load i32, i32* @r4, align 4
  %v4_dfb0 = call i32 (i8*, i32, ...) @open(i8* %v4_dfa8, i32 %v0_dfac)
  %v2_dfb4 = icmp eq i32 %v4_dfb0, -1
  store i32 %v4_dfb0, i32* @r8, align 4
  br i1 %v2_dfb4, label %dec_label_pc_e3dc, label %dec_label_pc_dfc0.preheader

dec_label_pc_dfc0.preheader:                      ; preds = %dec_label_pc_df80
  %v4_dfcc54 = call i32 @function_11780(i32* %v3_df40, i32 512, i32 %v4_dfb0)
  %v2_dfd056 = icmp eq i32 %v4_dfcc54, 0
  br i1 %v2_dfd056, label %dec_label_pc_e160.loopexit, label %dec_label_pc_dfd8.lr.ph

dec_label_pc_dfd8.lr.ph:                          ; preds = %dec_label_pc_dfc0.preheader
  %v2_e020 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfd8.lr.ph, %dec_label_pc_dfc0.backedge
  %v3_dfdc = load i8, i8* %stack_var_-581, align 1
  %v4_dfdc = sext i8 %v3_dfdc to i32
  %v2_dfe0 = icmp eq i8 %v3_dfdc, 0
  br i1 %v2_dfe0, label %bb123, label %bb

bb:                                               ; preds = %dec_label_pc_dfd8
  %v8_dfe4 = icmp eq i8 %v3_dfdc, 58
  br i1 %v8_dfe4, label %.thread6, label %dec_label_pc_dff8

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e010

bb123:                                            ; preds = %dec_label_pc_dfd8
  br label %dec_label_pc_e010

dec_label_pc_dff8:                                ; preds = %bb
  %v1_e000.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dffc

dec_label_pc_dffc:                                ; preds = %bb124, %dec_label_pc_dff8
  %v0_dffc = phi i32 [ %v1_dffc, %bb124 ], [ 0, %dec_label_pc_dff8 ]
  %v1_dffc = add i32 %v0_dffc, 1
  %v2_e000 = add i32 %v1_dffc, %v1_e000.pre
  %v3_e000 = inttoptr i32 %v2_e000 to i8*
  %v4_e000 = load i8, i8* %v3_e000, align 1
  %v6_e000 = zext i8 %v4_e000 to i32
  %v2_e004 = icmp eq i8 %v4_e000, 0
  br i1 %v2_e004, label %dec_label_pc_e010, label %bb124

bb124:                                            ; preds = %dec_label_pc_dffc
  %v8_e008 = icmp eq i8 %v4_e000, 58
  br i1 %v8_e008, label %dec_label_pc_e010, label %dec_label_pc_dffc

dec_label_pc_e010:                                ; preds = %dec_label_pc_dffc, %bb124, %bb123, %.thread6
  %v1_e03c = phi i32 [ 0, %.thread6 ], [ 0, %bb123 ], [ %v1_dffc, %bb124 ], [ %v1_dffc, %dec_label_pc_dffc ]
  %v0_e010 = phi i32 [ %v4_dfdc, %.thread6 ], [ %v4_dfdc, %bb123 ], [ %v6_e000, %bb124 ], [ %v6_e000, %dec_label_pc_dffc ]
  %v2_e010 = icmp eq i32 %v0_e010, 0
  br i1 %v2_e010, label %dec_label_pc_dfc0.backedge, label %dec_label_pc_e018

dec_label_pc_dfc0.backedge:                       ; preds = %dec_label_pc_e010, %dec_label_pc_e0e8, %dec_label_pc_e134, %dec_label_pc_e05c
  %v0_dfc8 = load i32, i32* @r8, align 4
  %v4_dfcc = call i32 @function_11780(i32* %v3_df40, i32 512, i32 %v0_dfc8)
  %v2_dfd0 = icmp eq i32 %v4_dfcc, 0
  br i1 %v2_dfd0, label %dec_label_pc_e160.loopexit, label %dec_label_pc_dfd8

dec_label_pc_e018:                                ; preds = %dec_label_pc_e010
  %v1_e01c = add i32 %v1_e03c, 2
  %v2_e024 = add i32 %v1_e01c, %v2_e020
  %v1_e028 = add i32 %v2_e024, -545
  %v2_e028 = inttoptr i32 %v1_e028 to i8*
  %v3_e028 = load i8, i8* %v2_e028, align 1
  %v2_e02c = icmp eq i8 %v3_e028, 0
  br i1 %v2_e02c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_e018
  %v8_e030 = icmp eq i8 %v3_e028, 32
  br i1 %v8_e030, label %.thread10, label %dec_label_pc_e03c

.thread10:                                        ; preds = %bb125
  store i32 %v1_e01c, i32* @r5, align 4
  br label %dec_label_pc_e05c

bb126:                                            ; preds = %dec_label_pc_e018
  store i32 %v1_e01c, i32* @r5, align 4
  br label %dec_label_pc_e05c

dec_label_pc_e03c:                                ; preds = %bb125
  %v0_e03c = load i32, i32* @r6, align 4
  %v2_e03c = add i32 %v0_e03c, %v1_e03c
  br label %dec_label_pc_e040

dec_label_pc_e040:                                ; preds = %bb127, %dec_label_pc_e03c
  %v0_e04c13 = phi i32 [ %v1_e04c, %bb127 ], [ %v2_e03c, %dec_label_pc_e03c ]
  %v1_e040 = add i32 %v0_e04c13, 3
  %v2_e040 = inttoptr i32 %v1_e040 to i8*
  %v3_e040 = load i8, i8* %v2_e040, align 1
  %v2_e044 = icmp eq i8 %v3_e040, 0
  br i1 %v2_e044, label %.thread12, label %bb127

.thread12:                                        ; preds = %dec_label_pc_e040
  %v1_e04c14 = add i32 %v0_e04c13, 1
  br label %dec_label_pc_e054

bb127:                                            ; preds = %dec_label_pc_e040
  %v8_e048 = icmp eq i8 %v3_e040, 32
  %v1_e04c = add i32 %v0_e04c13, 1
  br i1 %v8_e048, label %dec_label_pc_e054, label %dec_label_pc_e040

dec_label_pc_e054:                                ; preds = %bb127, %.thread12
  %v1_e04c15 = phi i32 [ %v1_e04c14, %.thread12 ], [ %v1_e04c, %bb127 ]
  %v2_e054 = sub i32 %v1_e04c15, %v0_e03c
  %v1_e058 = add i32 %v2_e054, 2
  store i32 %v1_e058, i32* @r5, align 4
  br label %dec_label_pc_e05c

dec_label_pc_e05c:                                ; preds = %bb126, %.thread10, %dec_label_pc_e054
  %v1_e068 = phi i32 [ %v1_e01c, %.thread10 ], [ %v1_e01c, %bb126 ], [ %v1_e058, %dec_label_pc_e054 ]
  %v0_e05c = load i32, i32* @r6, align 4
  %v2_e05c = add i32 %v0_e05c, %v1_e01c
  store i32 %v2_e05c, i32* @r4, align 4
  %v2_e068 = add i32 %v1_e068, %v2_e020
  store i32 0, i32* @r7, align 4
  %v3_e074 = add i32 %v2_e068, -545
  %v4_e074 = inttoptr i32 %v3_e074 to i8*
  store i8 0, i8* %v4_e074, align 1
  %v1_e078 = inttoptr i32 %v2_e05c to i8*
  %v2_e078 = call i32 @function_11528(i8* %v1_e078)
  store i32 %v2_e078, i32* @r1, align 4
  %v0_e084 = load i32, i32* @r4, align 4
  %v3_e088 = inttoptr i32 %v0_e084 to i8*
  %v4_e088 = call i32 @function_1187c(i8* %v3_e088, i32 %v2_e078, i32 %v2_df44)
  %v2_e08c = icmp eq i32 %v4_e088, -1
  br i1 %v2_e08c, label %dec_label_pc_dfc0.backedge, label %dec_label_pc_e0a8.preheader

dec_label_pc_e0a8.preheader:                      ; preds = %dec_label_pc_e05c
  %v1_e090 = load i32, i32* @r7, align 4
  %v1_e094 = load i32, i32* @r6, align 4
  %v2_e094 = load i32, i32* @r5, align 4
  %v3_e094 = add i32 %v2_e094, %v1_e094
  store i32 %v1_e090, i32* @r4, align 4
  %v1_e0a846 = add i32 %v3_e094, 2
  %v2_e0a847 = inttoptr i32 %v1_e0a846 to i8*
  %v3_e0a848 = load i8, i8* %v2_e0a847, align 1
  %v2_e0ac50 = icmp eq i8 %v3_e0a848, 0
  %v1_e0b052 = add i32 %v2_e094, 2
  br i1 %v2_e0ac50, label %dec_label_pc_e0e8, label %dec_label_pc_e0b8

dec_label_pc_e0b8:                                ; preds = %dec_label_pc_e0a8.preheader, %dec_label_pc_e0a8.backedge
  %v0_e0e882 = phi i32 [ %v0_e0e881, %dec_label_pc_e0a8.backedge ], [ %v1_e090, %dec_label_pc_e0a8.preheader ]
  %v0_e0d0.pr = phi i32 [ %v0_e0d0.pr67, %dec_label_pc_e0a8.backedge ], [ %v1_e090, %dec_label_pc_e0a8.preheader ]
  %v0_e3ec = phi i32 [ %v0_e3ec70, %dec_label_pc_e0a8.backedge ], [ %v1_e090, %dec_label_pc_e0a8.preheader ]
  %v0_e0b078 = phi i32 [ %v1_e0b0, %dec_label_pc_e0a8.backedge ], [ %v1_e0b052, %dec_label_pc_e0a8.preheader ]
  %v0_e0e0 = phi i32 [ %v0_e0a8, %dec_label_pc_e0a8.backedge ], [ %v3_e094, %dec_label_pc_e0a8.preheader ]
  %v1_e0bc.in = phi i8 [ %v3_e0a8, %dec_label_pc_e0a8.backedge ], [ %v3_e0a848, %dec_label_pc_e0a8.preheader ]
  %v7_e0b8 = icmp eq i8 %v1_e0bc.in, 9
  br i1 %v7_e0b8, label %.thread23, label %bb128

bb128:                                            ; preds = %dec_label_pc_e0b8
  %v8_e0bc = icmp eq i8 %v1_e0bc.in, 32
  br i1 %v8_e0bc, label %.thread23.thread35, label %dec_label_pc_e0d0

.thread23.thread35:                               ; preds = %bb128
  br label %dec_label_pc_e0dc

.thread23:                                        ; preds = %dec_label_pc_e0b8
  br label %dec_label_pc_e0dc

dec_label_pc_e0d0:                                ; preds = %bb128
  %v7_e0d0 = icmp eq i32 %v0_e0d0.pr, 1
  br i1 %v7_e0d0, label %dec_label_pc_e3ec, label %dec_label_pc_e0d8

dec_label_pc_e0d8:                                ; preds = %dec_label_pc_e3ec, %dec_label_pc_e0d0
  %v0_e0dc75 = phi i32 [ %v1_e3ec, %dec_label_pc_e3ec ], [ %v0_e3ec, %dec_label_pc_e0d0 ]
  br label %dec_label_pc_e0dc

dec_label_pc_e0dc:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e0d8
  %v0_e0dc = phi i32 [ %v0_e3ec, %.thread23.thread35 ], [ %v0_e3ec, %.thread23 ], [ %v0_e0dc75, %dec_label_pc_e0d8 ]
  %v0_e0d0.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e0d8 ]
  %v7_e0e4 = icmp sgt i32 %v0_e0dc, 6
  br i1 %v7_e0e4, label %dec_label_pc_e0e8, label %dec_label_pc_e0a8.backedge

dec_label_pc_e0e8:                                ; preds = %dec_label_pc_e0a8.backedge, %dec_label_pc_e0dc, %dec_label_pc_e0a8.preheader
  %v1_e138 = phi i32 [ %v1_e0b052, %dec_label_pc_e0a8.preheader ], [ %v1_e0b0, %dec_label_pc_e0a8.backedge ], [ %v0_e0b078, %dec_label_pc_e0dc ]
  %v0_e0e8 = phi i32 [ %v1_e090, %dec_label_pc_e0a8.preheader ], [ %v0_e0e881, %dec_label_pc_e0a8.backedge ], [ %v0_e0e882, %dec_label_pc_e0dc ]
  %v2_e0e8 = icmp eq i32 %v0_e0e8, 0
  br i1 %v2_e0e8, label %dec_label_pc_dfc0.backedge, label %dec_label_pc_e0f4

dec_label_pc_e0f4:                                ; preds = %dec_label_pc_e0e8
  %v2_e0fc = add i32 %v1_e138, %v2_e020
  %v1_e100 = add i32 %v2_e0fc, -545
  %v2_e100 = inttoptr i32 %v1_e100 to i8*
  %v3_e100 = load i8, i8* %v2_e100, align 1
  %v2_e104 = icmp eq i8 %v3_e100, 0
  br i1 %v2_e104, label %dec_label_pc_e134, label %bb129

bb129:                                            ; preds = %dec_label_pc_e0f4
  %v8_e108 = icmp eq i8 %v3_e100, 32
  br i1 %v8_e108, label %dec_label_pc_e134, label %dec_label_pc_e110

dec_label_pc_e110:                                ; preds = %bb129
  %v2_e110 = add i32 %v1_e138, %v1_e094
  br label %dec_label_pc_e114

dec_label_pc_e114:                                ; preds = %bb130, %dec_label_pc_e110
  %v0_e12028 = phi i32 [ %v1_e120, %bb130 ], [ %v1_e138, %dec_label_pc_e110 ]
  %v0_e114 = phi i32 [ %v1_e114, %bb130 ], [ %v2_e110, %dec_label_pc_e110 ]
  %v1_e114 = add i32 %v0_e114, 1
  %v2_e114 = inttoptr i32 %v1_e114 to i8*
  %v3_e114 = load i8, i8* %v2_e114, align 1
  %v2_e118 = icmp eq i8 %v3_e114, 0
  br i1 %v2_e118, label %.thread27, label %bb130

.thread27:                                        ; preds = %dec_label_pc_e114
  %v1_e12029 = add i32 %v0_e12028, 1
  br label %dec_label_pc_e128

bb130:                                            ; preds = %dec_label_pc_e114
  %v8_e11c = icmp eq i8 %v3_e114, 32
  %v1_e120 = add i32 %v0_e12028, 1
  br i1 %v8_e11c, label %dec_label_pc_e128, label %dec_label_pc_e114

dec_label_pc_e128:                                ; preds = %bb130, %.thread27
  %v1_e130 = phi i32 [ %v1_e12029, %.thread27 ], [ %v1_e120, %bb130 ]
  %v2_e130 = add i32 %v1_e130, %v2_e020
  br label %dec_label_pc_e134

dec_label_pc_e134:                                ; preds = %dec_label_pc_e0f4, %bb129, %dec_label_pc_e128
  %v2_e140 = phi i32 [ %v2_e0fc, %dec_label_pc_e0f4 ], [ %v2_e0fc, %bb129 ], [ %v2_e130, %dec_label_pc_e128 ]
  %v2_e138 = add i32 %v1_e138, %v1_e094
  store i32 %v2_e138, i32* @r4, align 4
  %v3_e140 = add i32 %v2_e140, -545
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 0, i8* %v4_e140, align 1
  %v1_e144 = inttoptr i32 %v2_e138 to i8*
  %v2_e144 = call i32 @function_11528(i8* %v1_e144)
  %v8_e14c = icmp sgt i32 %v2_e144, 15
  br i1 %v8_e14c, label %dec_label_pc_dfc0.backedge, label %dec_label_pc_e150

dec_label_pc_e150:                                ; preds = %dec_label_pc_e134
  %v0_e154 = load i32, i32* @r4, align 4
  %v2_e158 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e158, i32* @r0, align 4
  %v2_e15c = bitcast i32* %stack_var_-52 to i8*
  %v3_e15c = call i32 @function_11550(i8* %v2_e15c, i32 %v0_e154)
  br label %dec_label_pc_e160

dec_label_pc_e160.loopexit:                       ; preds = %dec_label_pc_dfc0.backedge, %dec_label_pc_dfc0.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre92 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e160

dec_label_pc_e160:                                ; preds = %dec_label_pc_e160.loopexit, %dec_label_pc_e150
  %v1_e170.pre-phi = phi i8* [ %.pre92, %dec_label_pc_e160.loopexit ], [ %v2_e15c, %dec_label_pc_e150 ]
  %v2_e16c.pre-phi = phi i32 [ %.pre, %dec_label_pc_e160.loopexit ], [ %v2_e158, %dec_label_pc_e150 ]
  %v0_e160 = load i32, i32* @r8, align 4
  %v1_e164 = call i32 @close(i32 %v0_e160)
  %v2_e170 = call i32 @function_11528(i8* %v1_e170.pre-phi)
  store i32 %v2_e170, i32* @r4, align 4
  %v2_e174 = icmp eq i32 %v2_e170, 0
  br i1 %v2_e174, label %dec_label_pc_e41c, label %dec_label_pc_e17c

dec_label_pc_e17c:                                ; preds = %dec_label_pc_e160
  %v3_e184 = call i32 @function_10e78(i32 13, i32* null)
  %v4_e184 = inttoptr i32 %v3_e184 to i8*
  %v3_e188 = call %__dirstream* @opendir(i8* %v4_e184)
  %v5_e188 = ptrtoint %__dirstream* %v3_e188 to i32
  store i32 %v5_e188, i32* @r8, align 4
  %v2_e18c = icmp eq %__dirstream* %v3_e188, null
  br i1 %v2_e18c, label %dec_label_pc_e3bc, label %dec_label_pc_e19c.preheader

dec_label_pc_e19c.preheader:                      ; preds = %dec_label_pc_e17c
  store i32 0, i32* @r5, align 4
  %v3_e1a041 = call %dirent* @readdir(%__dirstream* nonnull %v3_e188)
  %v2_e1a444 = icmp eq %dirent* %v3_e1a041, null
  br i1 %v2_e1a444, label %dec_label_pc_e3b0, label %dec_label_pc_e1ac.preheader.lr.ph

dec_label_pc_e1ac.preheader.lr.ph:                ; preds = %dec_label_pc_e19c.preheader
  %v2_e1dc = bitcast i32* %stack_var_-4677 to i8*
  %tmp132 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_e1ac.preheader

dec_label_pc_e19c.loopexit:                       ; preds = %dec_label_pc_e1b4, %dec_label_pc_e1c8, %dec_label_pc_e230
  %v0_e19c = load i32, i32* @r8, align 4
  %v1_e19c = inttoptr i32 %v0_e19c to %__dirstream*
  %v3_e1a0 = call %dirent* @readdir(%__dirstream* %v1_e19c)
  %v2_e1a4 = icmp eq %dirent* %v3_e1a0, null
  br i1 %v2_e1a4, label %dec_label_pc_e3b0, label %dec_label_pc_e1ac.preheader

dec_label_pc_e1ac.preheader:                      ; preds = %dec_label_pc_e1ac.preheader.lr.ph, %dec_label_pc_e19c.loopexit
  %v0_e1b490.in = phi %dirent* [ %v3_e1a041, %dec_label_pc_e1ac.preheader.lr.ph ], [ %v3_e1a0, %dec_label_pc_e19c.loopexit ]
  br label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %dec_label_pc_e1ac.preheader, %dec_label_pc_e398
  %v0_e1c0.in = phi %dirent* [ %v0_e1b490.in, %dec_label_pc_e1ac.preheader ], [ %v3_e3a4, %dec_label_pc_e398 ]
  %v0_e1ac = load i32, i32* @r5, align 4
  %v2_e1ac = icmp eq i32 %v0_e1ac, 0
  br i1 %v2_e1ac, label %dec_label_pc_e1b4, label %dec_label_pc_e3b0

dec_label_pc_e1b4:                                ; preds = %dec_label_pc_e1ac
  %v0_e1c0 = ptrtoint %dirent* %v0_e1c0.in to i32
  %v1_e1b4 = add i32 %v0_e1c0, 11
  %v2_e1b4 = inttoptr i32 %v1_e1b4 to i8*
  %v3_e1b4 = load i8, i8* %v2_e1b4, align 1
  %v4_e1b4 = zext i8 %v3_e1b4 to i32
  %v1_e1b8 = add nsw i32 %v4_e1b4, -48
  store i32 %v1_e1b4, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e1b8, 9
  br i1 %tmp, label %dec_label_pc_e19c.loopexit, label %dec_label_pc_e1c8

dec_label_pc_e1c8:                                ; preds = %dec_label_pc_e1b4
  %v3_e1d0 = call i32 @function_10e78(i32 13, i32* null)
  store i32 %v2_dee4, i32* @r0, align 4
  %v3_e1dc = call i32 @function_11550(i8* %v2_e1dc, i32 %v3_e1d0)
  %v2_e1e4 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e1e8 = load i32, i32* @r7, align 4
  %v0_e1ec = load i32, i32* @sl, align 4
  %v2_e1ec = add i32 %v0_e1ec, %v2_e1e4
  store i32 %v2_e1ec, i32* @r0, align 4
  %v2_e1f0 = inttoptr i32 %v2_e1ec to i8*
  %v3_e1f0 = call i32 @function_11550(i8* %v2_e1f0, i32 %v0_e1e8)
  %v2_e1f8 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e1fc = load i32, i32* @r5, align 4
  store i32 %v2_e1f8, i32* %r4.global-to-local, align 4
  %v2_e208 = inttoptr i32 %v0_e1fc to i32*
  %v3_e208 = call i32 @function_10e78(i32 14, i32* %v2_e208)
  %v0_e210 = load i32, i32* @sl, align 4
  %v2_e210 = add i32 %v2_e1f8, %v0_e210
  store i32 %v2_e210, i32* @r0, align 4
  %v2_e214 = inttoptr i32 %v2_e210 to i8*
  %v3_e214 = call i32 @function_11550(i8* %v2_e214, i32 %v3_e208)
  %v7_e224 = call i32 @readlink(i8* %v2_e1dc, i8* %tmp132, i32 4096)
  %v2_e228 = icmp eq i32 %v7_e224, -1
  br i1 %v2_e228, label %dec_label_pc_e19c.loopexit, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e1c8
  %v0_e230 = load i32, i32* @r5, align 4
  %v2_e238 = inttoptr i32 %v0_e230 to i32*
  %v3_e238 = call i32 @function_10e78(i32 13, i32* %v2_e238)
  store i32 %v2_dee4, i32* @r0, align 4
  %v3_e244 = call i32 @function_11550(i8* %v2_e1dc, i32 %v3_e238)
  %v2_e24c = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e250 = load i32, i32* @r7, align 4
  %v0_e254 = load i32, i32* @sl, align 4
  %v2_e254 = add i32 %v0_e254, %v2_e24c
  store i32 %v2_e254, i32* @r0, align 4
  %v2_e258 = inttoptr i32 %v2_e254 to i8*
  %v3_e258 = call i32 @function_11550(i8* %v2_e258, i32 %v0_e250)
  %v2_e260 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e264 = load i32, i32* @r5, align 4
  store i32 %v2_e260, i32* %r4.global-to-local, align 4
  %v2_e270 = inttoptr i32 %v0_e264 to i32*
  %v3_e270 = call i32 @function_10e78(i32 15, i32* %v2_e270)
  %v0_e278 = load i32, i32* @sl, align 4
  %v2_e278 = add i32 %v2_e260, %v0_e278
  store i32 %v2_e278, i32* @r0, align 4
  %v2_e27c = inttoptr i32 %v2_e278 to i8*
  %v3_e27c = call i32 @function_11550(i8* %v2_e27c, i32 %v3_e270)
  %v3_e284 = call %__dirstream* @opendir(i8* %v2_e1dc)
  %v5_e284 = ptrtoint %__dirstream* %v3_e284 to i32
  store i32 %v5_e284, i32* %sb.global-to-local, align 4
  %v2_e288 = icmp eq %__dirstream* %v3_e284, null
  br i1 %v2_e288, label %dec_label_pc_e19c.loopexit, label %dec_label_pc_e290.preheader

dec_label_pc_e290.preheader:                      ; preds = %dec_label_pc_e230
  %v3_e294138 = call %dirent* @readdir(%__dirstream* nonnull %v3_e284)
  %v5_e294139 = ptrtoint %dirent* %v3_e294138 to i32
  store i32 %v5_e294139, i32* @r6, align 4
  %v2_e298140 = icmp eq %dirent* %v3_e294138, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_def8, i32* @r0, align 4
  br i1 %v2_e298140, label %dec_label_pc_e398, label %dec_label_pc_e2a8thread-pre-split

dec_label_pc_e290.loopexit:                       ; preds = %dec_label_pc_e2b0, %dec_label_pc_e348
  %v0_e290.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_e290 = inttoptr i32 %v0_e290.pre to %__dirstream*
  %v3_e294 = call %dirent* @readdir(%__dirstream* %v1_e290)
  %v5_e294 = ptrtoint %dirent* %v3_e294 to i32
  store i32 %v5_e294, i32* @r6, align 4
  %v2_e298 = icmp eq %dirent* %v3_e294, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_def8, i32* @r0, align 4
  br i1 %v2_e298, label %dec_label_pc_e398, label %dec_label_pc_e2a8thread-pre-split

dec_label_pc_e2a8thread-pre-split:                ; preds = %dec_label_pc_e290.preheader, %dec_label_pc_e290.loopexit
  %v0_e2a8.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e2a8thread-pre-split, %dec_label_pc_e370
  %v0_e2a8 = phi i32 [ %v0_e2a8.pr, %dec_label_pc_e2a8thread-pre-split ], [ 1, %dec_label_pc_e370 ]
  %v2_e2a8 = icmp eq i32 %v0_e2a8, 0
  br i1 %v2_e2a8, label %dec_label_pc_e2b0, label %dec_label_pc_e398

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e2a8
  %v0_e2b0 = call i32 @function_115c8()
  %v0_e2b4 = load i32, i32* @r5, align 4
  %v2_e2bc = inttoptr i32 %v0_e2b4 to i32*
  %v3_e2bc = call i32 @function_10e78(i32 13, i32* %v2_e2bc)
  store i32 %v2_dee4, i32* @r0, align 4
  %v3_e2c8 = call i32 @function_11550(i8* %v2_e1dc, i32 %v3_e2bc)
  %v2_e2d0 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e2d4 = load i32, i32* @r7, align 4
  %v0_e2d8 = load i32, i32* @sl, align 4
  %v2_e2d8 = add i32 %v0_e2d8, %v2_e2d0
  store i32 %v2_e2d8, i32* @r0, align 4
  %v2_e2dc = inttoptr i32 %v2_e2d8 to i8*
  %v3_e2dc = call i32 @function_11550(i8* %v2_e2dc, i32 %v0_e2d4)
  %v2_e2e4 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e2e8 = load i32, i32* @r5, align 4
  store i32 %v2_e2e4, i32* @r4, align 4
  %v2_e2f4 = inttoptr i32 %v0_e2e8 to i32*
  %v3_e2f4 = call i32 @function_10e78(i32 15, i32* %v2_e2f4)
  %v0_e2fc = load i32, i32* @sl, align 4
  %v1_e2fc = load i32, i32* @r4, align 4
  %v2_e2fc = add i32 %v1_e2fc, %v0_e2fc
  store i32 %v2_e2fc, i32* @r0, align 4
  %v2_e300 = inttoptr i32 %v2_e2fc to i8*
  %v3_e300 = call i32 @function_11550(i8* %v2_e300, i32 %v3_e2f4)
  %v2_e308 = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e310 = load i32, i32* @sl, align 4
  %v2_e310 = add i32 %v0_e310, %v2_e308
  store i32 %v2_e310, i32* @r0, align 4
  %v2_e314 = inttoptr i32 %v2_e310 to i8*
  %v3_e314 = call i32 @function_11550(i8* %v2_e314, i32 ptrtoint (i32* @global_var_11db8.113 to i32))
  %v2_e31c = call i32 @function_11528(i8* %v2_e1dc)
  %v0_e320 = load i32, i32* @r6, align 4
  %v1_e320 = add i32 %v0_e320, 11
  %v0_e324 = load i32, i32* @sl, align 4
  %v2_e324 = add i32 %v0_e324, %v2_e31c
  store i32 %v2_e324, i32* @r0, align 4
  %v2_e328 = inttoptr i32 %v2_e324 to i8*
  %v3_e328 = call i32 @function_11550(i8* %v2_e328, i32 %v1_e320)
  %v7_e338 = call i32 @readlink(i8* %v2_e1dc, i8* %tmp132, i32 4096)
  %v2_e33c = icmp eq i32 %v7_e338, -1
  br i1 %v2_e33c, label %dec_label_pc_e290.loopexit, label %dec_label_pc_e348

dec_label_pc_e348:                                ; preds = %dec_label_pc_e2b0
  %v2_e348 = call i32 @function_11528(i8* %tmp132)
  store i32 %v2_e348, i32* @r1, align 4
  %v4_e35c = call i32 @function_1187c(i8* %tmp132, i32 %v2_e348, i32 %v2_e16c.pre-phi)
  %v2_e360 = icmp eq i32 %v4_e35c, -1
  br i1 %v2_e360, label %dec_label_pc_e290.loopexit, label %dec_label_pc_e370

dec_label_pc_e370:                                ; preds = %dec_label_pc_e348
  %v0_e368 = load i32, i32* @r7, align 4
  %v2_e370 = inttoptr i32 %v0_e368 to i8*
  %v3_e370 = call i32 @function_11654(i8* %v2_e370, i32 10)
  %v2_e378 = call i32 @kill(i32 %v3_e370, i32 9)
  %v0_e37c = load i32, i32* %sb.global-to-local, align 4
  %v1_e37c = inttoptr i32 %v0_e37c to %__dirstream*
  %v3_e380 = call %dirent* @readdir(%__dirstream* %v1_e37c)
  %v5_e380 = ptrtoint %dirent* %v3_e380 to i32
  store i32 %v5_e380, i32* @r6, align 4
  %v2_e384 = icmp eq %dirent* %v3_e380, null
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_def8, i32* @r0, align 4
  br i1 %v2_e384, label %dec_label_pc_e398, label %dec_label_pc_e2a8

dec_label_pc_e398:                                ; preds = %dec_label_pc_e290.preheader, %dec_label_pc_e290.loopexit, %dec_label_pc_e370, %dec_label_pc_e2a8
  %v0_e398 = load i32, i32* %sb.global-to-local, align 4
  %v1_e398 = inttoptr i32 %v0_e398 to %__dirstream*
  %v3_e39c = call i32 @closedir(%__dirstream* %v1_e398)
  %v0_e3a0 = load i32, i32* @r8, align 4
  %v1_e3a0 = inttoptr i32 %v0_e3a0 to %__dirstream*
  %v3_e3a4 = call %dirent* @readdir(%__dirstream* %v1_e3a0)
  %v2_e3a8 = icmp eq %dirent* %v3_e3a4, null
  br i1 %v2_e3a8, label %dec_label_pc_e3b0, label %dec_label_pc_e1ac

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_e19c.loopexit, %dec_label_pc_e398, %dec_label_pc_e1ac, %dec_label_pc_e19c.preheader
  %v0_e3b0 = load i32, i32* @r8, align 4
  %v1_e3b0 = inttoptr i32 %v0_e3b0 to %__dirstream*
  %v3_e3b4 = call i32 @closedir(%__dirstream* %v1_e3b0)
  %v0_e3b8 = load i32, i32* @r5, align 4
  %v1_e3b8 = urem i32 %v0_e3b8, 256
  br label %dec_label_pc_e3bc

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e17c, %dec_label_pc_e3b0
  %storemerge = phi i32 [ %v1_e3b8, %dec_label_pc_e3b0 ], [ %v5_e188, %dec_label_pc_e17c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e3c0 = call i32 @sleep(i32 1)
  %v1_e3c8 = call i32 @function_10ea4(i32 13)
  %v1_e3d0 = call i32 @function_10ea4(i32 14)
  %v1_e3d8 = call i32 @function_10ea4(i32 15)
  br label %dec_label_pc_e3dc

dec_label_pc_e3dc:                                ; preds = %dec_label_pc_df80, %dec_label_pc_e41c, %dec_label_pc_e3bc
  %v0_e3dc = load i32, i32* @r4, align 4
  %v2_e3e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e3e8, i32* @r4, align 4
  store i32 %v6_ded0, i32* @r5, align 4
  store i32 %v9_ded0, i32* @r6, align 4
  store i32 %v12_ded0, i32* @r7, align 4
  store i32 %v15_ded0, i32* @r8, align 4
  store i32 %v21_ded0, i32* @sl, align 4
  ret i32 %v0_e3dc

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e0d0
  %v1_e3ec = add i32 %v0_e3ec, 1
  %v7_e3f0 = icmp eq i32 %v0_e3ec, 0
  br i1 %v7_e3f0, label %dec_label_pc_e3f8, label %dec_label_pc_e0d8

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e3ec
  %v1_e3f8 = add i32 %v0_e0e0, 3
  %v2_e3f8 = inttoptr i32 %v1_e3f8 to i8*
  %v3_e3f8 = load i8, i8* %v2_e3f8, align 1
  %v7_e3fc = icmp eq i8 %v3_e3f8, 65
  br i1 %v7_e3fc, label %dec_label_pc_e40c, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e3f8
  br label %dec_label_pc_e0a8.backedge

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e3f8
  store i32 %v1_e3ec, i32* @r4, align 4
  br label %dec_label_pc_e0a8.backedge

dec_label_pc_e0a8.backedge:                       ; preds = %.thread33, %dec_label_pc_e40c, %dec_label_pc_e0dc
  %v0_e0e881 = phi i32 [ %v1_e3ec, %dec_label_pc_e40c ], [ %v0_e0e882, %dec_label_pc_e0dc ], [ %v0_e0e882, %.thread33 ]
  %v0_e3ec70 = phi i32 [ %v1_e3ec, %dec_label_pc_e40c ], [ %v0_e0dc, %dec_label_pc_e0dc ], [ %v1_e3ec, %.thread33 ]
  %v0_e0d0.pr67 = phi i32 [ 0, %dec_label_pc_e40c ], [ %v0_e0d0.pr68, %dec_label_pc_e0dc ], [ 0, %.thread33 ]
  %v0_e0a8 = add i32 %v0_e0e0, 1
  %v1_e0a8 = add i32 %v0_e0e0, 3
  %v2_e0a8 = inttoptr i32 %v1_e0a8 to i8*
  %v3_e0a8 = load i8, i8* %v2_e0a8, align 1
  %v2_e0ac = icmp eq i8 %v3_e0a8, 0
  %v1_e0b0 = add i32 %v0_e0b078, 1
  br i1 %v2_e0ac, label %dec_label_pc_e0e8, label %dec_label_pc_e0b8

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e160
  %v1_e420 = call i32 @function_10ea4(i32 13)
  %v1_e428 = call i32 @function_10ea4(i32 14)
  %v1_e430 = call i32 @function_10ea4(i32 15)
  %v1_e438 = call i32 @function_10ea4(i32 17)
  br label %dec_label_pc_e3dc

dec_label_pc_e440:                                ; preds = %dec_label_pc_ded0
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_df80

; uselistorder directives
  uselistorder i32 %v1_e0b0, { 1, 0 }
  uselistorder i8 %v3_e0a8, { 1, 0 }
  uselistorder i32 %v0_e0e881, { 1, 0 }
  uselistorder i32 %v1_e3ec, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_e3a4, { 1, 0 }
  uselistorder i8* %tmp132, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e114, { 1, 0 }
  uselistorder i32 %v0_e12028, { 1, 0 }
  uselistorder i32 %v1_e138, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e0dc, { 1, 0 }
  uselistorder i32 %v0_e0b078, { 1, 0 }
  uselistorder i32 %v0_e3ec, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e0e882, { 1, 2, 0 }
  uselistorder i32 %v1_e0b052, { 1, 0 }
  uselistorder i32 %v2_e094, { 1, 0 }
  uselistorder i32 %v1_e090, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_e04c13, { 1, 0, 2 }
  uselistorder i32 %v0_e03c, { 1, 0 }
  uselistorder i32 %v1_e01c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32* %v3_df40, { 1, 0, 2 }
  uselistorder i32 %v2_def8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_11654, { 1, 0 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32*, i32, i32)* @function_11780, { 1, 0 }
  uselistorder i32 512, { 4, 0, 5, 7, 1, 8, 2, 9, 3, 10, 6 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e0a8.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e3dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e3bc, { 1, 0 }
  uselistorder label %dec_label_pc_e3b0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e398, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_e2a8, { 1, 0 }
  uselistorder label %dec_label_pc_e2a8thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e290.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e1ac, { 1, 0 }
  uselistorder label %dec_label_pc_e1ac.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e19c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e134, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e0dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e0b8, { 1, 0 }
  uselistorder label %dec_label_pc_e05c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dfc0.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e010, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_dfd8, { 1, 0 }
  uselistorder label %dec_label_pc_df80, { 1, 0 }
}

define i32 @function_e46c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e46c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-8380 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e46c = load i32, i32* @r4, align 4
  store i32 %v3_e46c, i32* %stack_var_-36, align 4
  %v6_e46c = load i32, i32* @r5, align 4
  %v9_e46c = load i32, i32* @r6, align 4
  %v12_e46c = load i32, i32* @r7, align 4
  %v15_e46c = load i32, i32* @r8, align 4
  %v18_e46c = load i32, i32* @sb, align 4
  %v21_e46c = load i32, i32* @sl, align 4
  %v24_e46c = load i32, i32* @fp, align 4
  %v2_e47c = call i32 @time(i32* null)
  store i32 %v2_e47c, i32* @r7, align 4
  %v0_e484 = call i32 @fork()
  %v2_e488 = icmp eq i32 %v0_e484, -1
  %. = zext i1 %v2_e488 to i32
  %tmp100 = icmp slt i32 %v0_e484, 1
  %storemerge74 = select i1 %tmp100, i32 %., i32 1
  store i32 %storemerge74, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1a228.115 to i32), i32* %r3.global-to-local, align 4
  %v2_e4a4 = icmp eq i32 %storemerge74, 0
  store i32 %v0_e484, i32* @global_var_1a228.115, align 4
  br i1 %v2_e4a4, label %dec_label_pc_e4bc, label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e5e4, %dec_label_pc_e4bc, %dec_label_pc_e46c
  %v29_e4b8 = phi i32 [ -1, %dec_label_pc_e4bc ], [ %v0_e484, %dec_label_pc_e46c ], [ %v5_e5f8, %dec_label_pc_e5e4 ]
  %v2_e4b8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e4b8, i32* @r4, align 4
  store i32 %v6_e46c, i32* @r5, align 4
  store i32 %v9_e46c, i32* @r6, align 4
  store i32 %v12_e46c, i32* @r7, align 4
  store i32 %v15_e46c, i32* @r8, align 4
  store i32 %v18_e46c, i32* @sb, align 4
  store i32 %v21_e46c, i32* @sl, align 4
  store i32 %v24_e46c, i32* @fp, align 4
  ret i32 %v29_e4b8

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e46c
  %v1_e4c0 = call i32 @sleep(i32 5)
  %v1_e4c8 = call i32* @malloc(i32 4096)
  %v3_e4c8 = ptrtoint i32* %v1_e4c8 to i32
  store i32 ptrtoint (i32* @global_var_1a1cc.117 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a224.119 to i32), i32* %r1.global-to-local, align 4
  store i32 %v3_e4c8, i32* %r2.global-to-local, align 4
  %v0_e4d8 = load i32, i32* @r5, align 4
  %v1_e4d8 = trunc i32 %v0_e4d8 to i8
  %v3_e4d8 = bitcast i32* %v1_e4c8 to i8*
  store i8 %v1_e4d8, i8* %v3_e4d8, align 1
  %v0_e4e0 = load i32, i32* @r5, align 4
  %v1_e4e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_e4e0 = inttoptr i32 %v1_e4e0 to i32*
  store i32 %v0_e4e0, i32* %v2_e4e0, align 4
  %v0_e4e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4e4 = inttoptr i32 %v1_e4e4 to i32*
  store i32 %v0_e4e4, i32* %v2_e4e4, align 4
  %v1_e4e8 = call i32 @function_10f5c(i32 13)
  %v1_e4f0 = call i32 @function_10f5c(i32 14)
  %v2_e4f8 = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_e4f8, i32* %r2.global-to-local, align 4
  %v0_e4fc = load i32, i32* @r5, align 4
  store i32 %v0_e4fc, i32* %r1.global-to-local, align 4
  store i32 %v2_e4f8, i32* %stack_var_-8388, align 4
  %v2_e508 = inttoptr i32 %v0_e4fc to i32*
  %v3_e508 = call i32 @function_10e78(i32 13, i32* %v2_e508)
  %v1_e510 = add i32 %v2_e4f8, -24
  store i32 %v1_e510, i32* %r3.global-to-local, align 4
  store i32 %v3_e508, i32* %r1.global-to-local, align 4
  store i32 %v1_e510, i32* @r0, align 4
  store i32 %v1_e510, i32* %stack_var_-8388, align 4
  %v2_e520 = inttoptr i32 %v1_e510 to i8*
  %v3_e520 = call i32 @function_11550(i8* %v2_e520, i32 %v3_e508)
  store i32 %v1_e510, i32* %r1.global-to-local, align 4
  %v2_e528 = add i32 %v1_e510, %v3_e520
  store i32 %v2_e528, i32* @r4, align 4
  %v1_e52c = call i32 @getpid()
  %v2_e534 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_e534, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_e53c = trunc i32 %v1_e52c to i8
  %v4_e53c = call i32 @function_1198c(i8 %v3_e53c, i32 10, i32 %v2_e534)
  store i32 %v4_e53c, i32* %r1.global-to-local, align 4
  %v0_e544 = load i32, i32* @r4, align 4
  store i32 %v0_e544, i32* @r0, align 4
  %v2_e548 = inttoptr i32 %v0_e544 to i8*
  %v3_e548 = call i32 @function_11550(i8* %v2_e548, i32 %v4_e53c)
  %v0_e54c = load i32, i32* @r5, align 4
  store i32 %v0_e54c, i32* %r1.global-to-local, align 4
  %v0_e550 = load i32, i32* @r4, align 4
  %v2_e550 = add i32 %v0_e550, %v3_e548
  store i32 %v2_e550, i32* @r4, align 4
  %v2_e558 = inttoptr i32 %v0_e54c to i32*
  %v3_e558 = call i32 @function_10e78(i32 14, i32* %v2_e558)
  store i32 %v3_e558, i32* %r1.global-to-local, align 4
  %v0_e560 = load i32, i32* @r4, align 4
  store i32 %v0_e560, i32* @r0, align 4
  %v2_e564 = inttoptr i32 %v0_e560 to i8*
  %v3_e564 = call i32 @function_11550(i8* %v2_e564, i32 %v3_e558)
  %v0_e568 = load i32, i32* @r5, align 4
  store i32 %v0_e568, i32* %r1.global-to-local, align 4
  store i32 %v3_e564, i32* @r6, align 4
  %v2_e570 = load i32, i32* %stack_var_-8388, align 4
  %v3_e570 = inttoptr i32 %v2_e570 to i8*
  %v4_e574 = call i32 (i8*, i32, ...) @open(i8* %v3_e570, i32 %v0_e568)
  %v2_e578 = icmp eq i32 %v4_e574, -1
  br i1 %v2_e578, label %dec_label_pc_e4b0, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %dec_label_pc_e4bc
  %v1_e580 = call i32 @close(i32 %v4_e574)
  %v1_e588 = call i32 @function_10ea4(i32 13)
  %v1_e590 = call i32 @function_10ea4(i32 14)
  store i32 ptrtoint (i8** @global_var_1a224.119 to i32), i32* %r3.global-to-local, align 4
  %v2_e59c = load i8*, i8** @global_var_1a224.119, align 4
  %v3_e59c = ptrtoint i8* %v2_e59c to i32
  store i32 %v3_e59c, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e5a4 = load i32, i32* %stack_var_-8388, align 4
  %v3_e5a4 = inttoptr i32 %v2_e5a4 to i8*
  %v6_e5a8 = call i32 @readlink(i8* %v3_e5a4, i8* %v2_e59c, i32 4095)
  %v2_e5ac = icmp eq i32 %v6_e5a8, -1
  br i1 %v2_e5ac, label %.thread4, label %bb103

bb103:                                            ; preds = %dec_label_pc_e580
  store i32 ptrtoint (i8** @global_var_1a224.119 to i32), i32* %r1.global-to-local, align 4
  %v3_e5b4 = load i32, i32* bitcast (i8** @global_var_1a224.119 to i32*), align 4
  store i32 %v3_e5b4, i32* %r3.global-to-local, align 4
  %v1_e5b8 = load i32, i32* @r5, align 4
  %v2_e5b8 = trunc i32 %v1_e5b8 to i8
  %v5_e5b8 = add i32 %v3_e5b4, %v6_e5a8
  %v6_e5b8 = inttoptr i32 %v5_e5b8 to i8*
  store i8 %v2_e5b8, i8* %v6_e5b8, align 1
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_e580, %bb103
  %v2_e5bc = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_e5bc, i32* %r2.global-to-local, align 4
  %v0_e5c0 = load i32, i32* @r4, align 4
  %v1_e5c0 = load i32, i32* @r6, align 4
  %v2_e5c0 = sub i32 %v0_e5c0, %v2_e5bc
  %v2_e5c4 = add i32 %v2_e5c0, %v1_e5c0
  store i32 %v2_e5c4, i32* @r1, align 4
  store i32 %v2_e5bc, i32* @r0, align 4
  %v0_e5cc = call i32 @function_115c8()
  %v0_e5d4 = load i32, i32* @r5, align 4
  store i32 %v0_e5d4, i32* @fp, align 4
  %v0_e5d8 = load i32, i32* @r7, align 4
  store i32 %v0_e5d8, i32* @r4, align 4
  %v2_e5dc = ptrtoint i32* %stack_var_-8380 to i32
  store i32 %v2_e5dc, i32* @sl, align 4
  store i32 400, i32* @r5, align 4
  %v2_e6f4 = ptrtoint i32* %stack_var_-188 to i32
  %v2_e6f8 = bitcast i32* %stack_var_-188 to i8*
  %v2_e744 = ptrtoint i32* %stack_var_-124 to i32
  %v2_e748 = bitcast i32* %stack_var_-124 to i8*
  %v2_e794 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e8a4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_e8b8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_e7c0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e5e4

dec_label_pc_e5e4:                                ; preds = %dec_label_pc_e6b8, %.thread4
  %v1_e5e8 = call i32 @function_10f5c(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e5f4 = call i32 @function_10e78(i32 13, i32* null)
  %v4_e5f4 = inttoptr i32 %v3_e5f4 to i8*
  %v3_e5f8 = call %__dirstream* @opendir(i8* %v4_e5f4)
  %v5_e5f8 = ptrtoint %__dirstream* %v3_e5f8 to i32
  store i32 %v5_e5f8, i32* @sb, align 4
  %v2_e5fc = icmp eq %__dirstream* %v3_e5f8, null
  br i1 %v2_e5fc, label %dec_label_pc_e4b0, label %dec_label_pc_e604

dec_label_pc_e604:                                ; preds = %dec_label_pc_e5e4
  %v1_e608 = call i32 @function_10ea4(i32 13)
  %v1_e614 = call i32 @function_ded0(i32 58811)
  %v1_e620 = call i32 @function_ded0(i32 50951)
  %v1_e62c = call i32 @function_ded0(i32 14853)
  %v0_e63044 = load i32, i32* @sb, align 4
  %v1_e63045 = inttoptr i32 %v0_e63044 to %__dirstream*
  %v3_e63446 = call %dirent* @readdir(%__dirstream* %v1_e63045)
  %v2_e63849 = icmp eq %dirent* %v3_e63446, null
  br i1 %v2_e63849, label %dec_label_pc_e6b8, label %dec_label_pc_e640.preheader

dec_label_pc_e640.preheader:                      ; preds = %dec_label_pc_e604, %dec_label_pc_e630.backedge
  %v0_e64054.in = phi %dirent* [ %v3_e634, %dec_label_pc_e630.backedge ], [ %v3_e63446, %dec_label_pc_e604 ]
  br label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %dec_label_pc_e640.preheader, %dec_label_pc_e6a0
  %v0_e650.in = phi %dirent* [ %v0_e64054.in, %dec_label_pc_e640.preheader ], [ %v3_e6ac, %dec_label_pc_e6a0 ]
  %v0_e650 = ptrtoint %dirent* %v0_e650.in to i32
  %v1_e640 = add i32 %v0_e650, 11
  %v2_e640 = inttoptr i32 %v1_e640 to i8*
  %v3_e640 = load i8, i8* %v2_e640, align 1
  %v4_e640 = zext i8 %v3_e640 to i32
  %v1_e644 = add nsw i32 %v4_e640, -48
  store i32 %v1_e644, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e644, 9
  br i1 %tmp, label %dec_label_pc_e630.backedge, label %dec_label_pc_e650

dec_label_pc_e650:                                ; preds = %dec_label_pc_e640
  store i32 %v1_e640, i32* @r6, align 4
  %v4_e658 = call i32 @atoi(i8* %v2_e640)
  %v0_e65c = load i32, i32* @r5, align 4
  store i32 %v4_e658, i32* @r7, align 4
  %v0_e664 = load i32, i32* @fp, align 4
  %v1_e664 = add i32 %v0_e664, 1
  store i32 %v1_e664, i32* @fp, align 4
  %v5_e668 = icmp slt i32 %v0_e65c, %v4_e658
  %v2_e6c8 = call i32 @time(i32* null)
  br i1 %v5_e668, label %dec_label_pc_e6c4, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %dec_label_pc_e650
  %v0_e674 = load i32, i32* @r4, align 4
  %v2_e674 = sub i32 %v2_e6c8, %v0_e674
  %v7_e67c = icmp slt i32 %v2_e674, 601
  br i1 %v7_e67c, label %dec_label_pc_e684, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e66c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_e630.backedge

dec_label_pc_e684:                                ; preds = %dec_label_pc_e66c
  %v0_e684 = load i32, i32* @r7, align 4
  %v7_e688 = icmp slt i32 %v0_e684, 401
  br i1 %v7_e688, label %dec_label_pc_e630.backedge, label %dec_label_pc_e68c

dec_label_pc_e68c:                                ; preds = %dec_label_pc_e684
  %v0_e68c = load i32, i32* @fp, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_e694 = urem i32 %v0_e68c, 10
  %v2_e698 = icmp eq i32 %v2_e694, 0
  br i1 %v2_e698, label %dec_label_pc_e6a0, label %dec_label_pc_e630.backedge

dec_label_pc_e6a0:                                ; preds = %dec_label_pc_e68c
  %v1_e6a4 = call i32 @sleep(i32 1)
  %v0_e6a8 = load i32, i32* @sb, align 4
  %v1_e6a8 = inttoptr i32 %v0_e6a8 to %__dirstream*
  %v3_e6ac = call %dirent* @readdir(%__dirstream* %v1_e6a8)
  %v2_e6b0 = icmp eq %dirent* %v3_e6ac, null
  br i1 %v2_e6b0, label %dec_label_pc_e6b8, label %dec_label_pc_e640

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e630.backedge, %dec_label_pc_e6a0, %dec_label_pc_e604
  %v0_e6b8 = load i32, i32* @sb, align 4
  %v1_e6b8 = inttoptr i32 %v0_e6b8 to %__dirstream*
  %v3_e6bc = call i32 @closedir(%__dirstream* %v1_e6b8)
  br label %dec_label_pc_e5e4

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e650
  %v1_e6d4 = call i32 @function_10f5c(i32 13)
  %v1_e6dc = call i32 @function_10f5c(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e6e8 = call i32 @function_10e78(i32 13, i32* null)
  store i32 %v3_e6e8, i32* %r1.global-to-local, align 4
  store i32 %v2_e6f4, i32* @r0, align 4
  %v3_e6f8 = call i32 @function_11550(i8* %v2_e6f8, i32 %v3_e6e8)
  store i32 %v2_e6f4, i32* %r3.global-to-local, align 4
  %v2_e704 = add i32 %v3_e6f8, %v2_e6f4
  store i32 %v2_e704, i32* %r5.global-to-local, align 4
  %v0_e708 = load i32, i32* @r6, align 4
  store i32 %v0_e708, i32* %r1.global-to-local, align 4
  store i32 %v2_e704, i32* @r0, align 4
  %v2_e710 = inttoptr i32 %v2_e704 to i8*
  %v3_e710 = call i32 @function_11550(i8* %v2_e710, i32 %v0_e708)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e720 = call i32 @function_10e78(i32 14, i32* null)
  store i32 %v3_e720, i32* %r1.global-to-local, align 4
  %v0_e728 = load i32, i32* %r5.global-to-local, align 4
  %v2_e728 = add i32 %v3_e710, %v0_e728
  store i32 %v2_e728, i32* @r0, align 4
  %v2_e72c = inttoptr i32 %v2_e728 to i8*
  %v3_e72c = call i32 @function_11550(i8* %v2_e72c, i32 %v3_e720)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e738 = call i32 @function_10e78(i32 13, i32* null)
  store i32 %v3_e738, i32* %r1.global-to-local, align 4
  store i32 %v2_e744, i32* @r0, align 4
  %v3_e748 = call i32 @function_11550(i8* %v2_e748, i32 %v3_e738)
  %v2_e754 = add i32 %v3_e748, %v2_e744
  store i32 %v2_e754, i32* @r5, align 4
  store i32 %v2_e754, i32* @r0, align 4
  %v0_e75c = load i32, i32* @r6, align 4
  store i32 %v0_e75c, i32* %r1.global-to-local, align 4
  %v2_e760 = inttoptr i32 %v2_e754 to i8*
  %v3_e760 = call i32 @function_11550(i8* %v2_e760, i32 %v0_e75c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_e760, i32* @r4, align 4
  %v3_e770 = call i32 @function_10e78(i32 29, i32* null)
  store i32 %v3_e770, i32* %r1.global-to-local, align 4
  %v0_e778 = load i32, i32* @r5, align 4
  %v1_e778 = load i32, i32* @r4, align 4
  %v2_e778 = add i32 %v1_e778, %v0_e778
  store i32 %v2_e778, i32* @r0, align 4
  %v2_e77c = inttoptr i32 %v2_e778 to i8*
  %v3_e77c = call i32 @function_11550(i8* %v2_e77c, i32 %v3_e770)
  %v1_e784 = call i32 @function_10ea4(i32 13)
  %v1_e78c = call i32 @function_10ea4(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e7a0 = load i32, i32* %stack_var_-8388, align 4
  %v3_e7a0 = inttoptr i32 %v2_e7a0 to i8*
  store i32 %v2_e7a0, i32* %r1.global-to-local, align 4
  %v7_e7a4 = call i32 @readlink(i8* %v2_e6f8, i8* %v3_e7a0, i32 4095)
  %v2_e7ac = icmp eq i32 %v7_e7a4, -1
  store i32 %v7_e7a4, i32* @r5, align 4
  store i32 -4248, i32* %r2.global-to-local, align 4
  br i1 %v2_e7ac, label %dec_label_pc_e874, label %dec_label_pc_e7bc

dec_label_pc_e7bc:                                ; preds = %dec_label_pc_e6c4
  store i32 %v2_e7c0, i32* %r1.global-to-local, align 4
  %v2_e7c4 = add i32 %v7_e7a4, %v2_e7c0
  store i32 %v2_e7c4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e7cc = add i32 %v2_e7c4, -4248
  %v5_e7cc = inttoptr i32 %v4_e7cc to i8*
  store i8 0, i8* %v5_e7cc, align 1
  %v1_e7d4 = call i32 @function_10f5c(i32 30)
  %v0_e7d8 = load i32, i32* @r4, align 4
  store i32 %v0_e7d8, i32* %r1.global-to-local, align 4
  %v2_e7e0 = inttoptr i32 %v0_e7d8 to i32*
  %v3_e7e0 = call i32 @function_10e78(i32 30, i32* %v2_e7e0)
  %v0_e7e4 = load i32, i32* @r5, align 4
  %v1_e7e4 = add i32 %v0_e7e4, -1
  store i32 %v1_e7e4, i32* @r1, align 4
  store i32 %v3_e7e0, i32* %r2.global-to-local, align 4
  %v2_e7ec = load i32, i32* %stack_var_-8388, align 4
  %v3_e7f0 = inttoptr i32 %v2_e7ec to i8*
  %v4_e7f0 = call i32 @function_1187c(i8* %v3_e7f0, i32 %v1_e7e4, i32 %v3_e7e0)
  %v2_e7f4 = icmp eq i32 %v4_e7f0, -1
  br i1 %v2_e7f4, label %dec_label_pc_e810, label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e7bc
  %v2_e7fc = load i32, i32* %stack_var_-8388, align 4
  %v3_e7fc = inttoptr i32 %v2_e7fc to i8*
  %v3_e800 = call i32 @unlink(i8* %v3_e7fc)
  %v0_e804 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e80c = call i32 @kill(i32 %v0_e804, i32 9)
  br label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e7bc, %dec_label_pc_e7fc
  %v1_e814 = call i32 @function_10ea4(i32 30)
  %v1_e818 = call i32 @getpid()
  %v0_e81c = load i32, i32* @r7, align 4
  %v9_e81c = icmp eq i32 %v0_e81c, %v1_e818
  br i1 %v9_e81c, label %dec_label_pc_e848, label %dec_label_pc_e824

dec_label_pc_e824:                                ; preds = %dec_label_pc_e810
  %v0_e824 = call i32 @getppid()
  %v0_e828 = load i32, i32* @r7, align 4
  %v9_e828 = icmp eq i32 %v0_e828, %v0_e824
  br i1 %v9_e828, label %dec_label_pc_e848, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e824
  store i32 ptrtoint (i8** @global_var_1a224.119 to i32), i32* %r2.global-to-local, align 4
  %v2_e834 = load i32, i32* %stack_var_-8388, align 4
  %v3_e838 = load i8*, i8** @global_var_1a224.119, align 4
  %v4_e838 = ptrtoint i8* %v3_e838 to i32
  store i32 %v4_e838, i32* %r1.global-to-local, align 4
  %v5_e83c = inttoptr i32 %v2_e834 to i8*
  %v6_e83c = call i32 @function_11908(i8* %v5_e83c, i32 %v4_e838, i32 ptrtoint (i8** @global_var_1a224.119 to i32))
  %v2_e840 = icmp eq i32 %v6_e83c, 0
  br i1 %v2_e840, label %dec_label_pc_e854, label %dec_label_pc_e830.dec_label_pc_e848_crit_edge

dec_label_pc_e830.dec_label_pc_e848_crit_edge:    ; preds = %dec_label_pc_e830
  %v0_e84c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e830.dec_label_pc_e848_crit_edge, %dec_label_pc_e824, %dec_label_pc_e810
  %v0_e84c = phi i32 [ %v0_e84c.pre, %dec_label_pc_e830.dec_label_pc_e848_crit_edge ], [ %v0_e824, %dec_label_pc_e824 ], [ %v1_e818, %dec_label_pc_e810 ]
  store i32 %v2_e6c8, i32* @r4, align 4
  store i32 %v0_e84c, i32* @r5, align 4
  br label %dec_label_pc_e630.backedge

dec_label_pc_e630.backedge:                       ; preds = %dec_label_pc_e68c, %dec_label_pc_e684, %dec_label_pc_e640, %dec_label_pc_e848, %dec_label_pc_e99c, %.thread5
  %v0_e630 = load i32, i32* @sb, align 4
  %v1_e630 = inttoptr i32 %v0_e630 to %__dirstream*
  %v3_e634 = call %dirent* @readdir(%__dirstream* %v1_e630)
  %v2_e638 = icmp eq %dirent* %v3_e634, null
  br i1 %v2_e638, label %dec_label_pc_e6b8, label %dec_label_pc_e640.preheader

dec_label_pc_e854:                                ; preds = %dec_label_pc_e830
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e858 = load i32, i32* %stack_var_-8388, align 4
  %v3_e858 = inttoptr i32 %v2_e858 to i8*
  %v4_e85c = call i32 (i8*, i32, ...) @open(i8* %v3_e858, i32 0)
  %v2_e860 = icmp eq i32 %v4_e85c, -1
  store i32 %v4_e85c, i32* @r4, align 4
  br i1 %v2_e860, label %dec_label_pc_e9ec, label %dec_label_pc_e86c

dec_label_pc_e86c:                                ; preds = %dec_label_pc_e854, %dec_label_pc_e9ec
  %v0_e86c = phi i32 [ %v4_e85c, %dec_label_pc_e854 ], [ %v0_e86c.pre, %dec_label_pc_e9ec ]
  %v1_e870 = call i32 @close(i32 %v0_e86c)
  br label %dec_label_pc_e874

dec_label_pc_e874:                                ; preds = %dec_label_pc_e6c4, %dec_label_pc_e86c
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e880 = call i32 (i8*, i32, ...) @open(i8* %v2_e6f8, i32 0)
  %v2_e884 = icmp eq i32 %v4_e880, -1
  store i32 %v4_e880, i32* @r8, align 4
  br i1 %v2_e884, label %dec_label_pc_e99c, label %dec_label_pc_e890

dec_label_pc_e890:                                ; preds = %dec_label_pc_e874
  %v1_e894 = call i32 @function_10f5c(i32 18)
  %v1_e89c = call i32 @function_10f5c(i32 19)
  store i32 %v2_e8a4, i32* %r1.global-to-local, align 4
  %v3_e8ac = call i32 @function_10e78(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_e8ac, i32* @r5, align 4
  store i32 %v2_e8b8, i32* %r1.global-to-local, align 4
  %v3_e8c0 = call i32 @function_10e78(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_e8c0, i32* @r6, align 4
  %v0_e8c8109 = load i32, i32* @r8, align 4
  store i32 %v2_e5dc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e8d4110 = call i32 @read(i32 %v0_e8c8109, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp104112 = icmp slt i32 %v4_e8d4110, 1
  br i1 %tmp104112, label %dec_label_pc_e9d0, label %dec_label_pc_e8e0

dec_label_pc_e8e0:                                ; preds = %dec_label_pc_e890, %dec_label_pc_e8c8.backedge
  %v4_e8d4113 = phi i32 [ %v4_e8d4, %dec_label_pc_e8c8.backedge ], [ %v4_e8d4110, %dec_label_pc_e890 ]
  store i32 %v2_e794, i32* %r3.global-to-local, align 4
  %v3_e8e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e8e4, i32* @r4, align 4
  %v5_e8ec = icmp slt i32 %v4_e8d4113, %v3_e8e4
  br i1 %v5_e8ec, label %dec_label_pc_e8fc, label %dec_label_pc_e950.lr.ph

dec_label_pc_e950.lr.ph:                          ; preds = %dec_label_pc_e8e0
  %v1_e94827 = add i32 %v4_e8d4113, -1
  store i32 %v1_e94827, i32* %r1.global-to-local, align 4
  %v0_e950.pre = load i32, i32* @r5, align 4
  %v1_e954.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_e950

dec_label_pc_e8fc:                                ; preds = %dec_label_pc_e948.backedge, %dec_label_pc_e8e0
  store i32 %v2_e794, i32* %r1.global-to-local, align 4
  %v3_e900 = load i32, i32* %stack_var_-44, align 4
  %v5_e908 = icmp slt i32 %v4_e8d4113, %v3_e900
  br i1 %v5_e908, label %dec_label_pc_e8c8.backedge, label %.thread19

.thread19:                                        ; preds = %dec_label_pc_e8fc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e91437 = icmp eq i32 %v4_e8d4113, 0
  br i1 %v2_e91437, label %dec_label_pc_e8c8.backedge, label %dec_label_pc_e91c.lr.ph

dec_label_pc_e8c8.backedge:                       ; preds = %dec_label_pc_e934, %.thread19, %dec_label_pc_e8fc
  %v0_e8c8 = load i32, i32* @r8, align 4
  store i32 %v2_e5dc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e8d4 = call i32 @read(i32 %v0_e8c8, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp104 = icmp slt i32 %v4_e8d4, 1
  br i1 %tmp104, label %dec_label_pc_e9d0, label %dec_label_pc_e8e0

dec_label_pc_e91c.lr.ph:                          ; preds = %.thread19
  %v0_e91c.pre = load i32, i32* @r6, align 4
  %v1_e920.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %dec_label_pc_e934, %dec_label_pc_e91c.lr.ph
  %v0_e914.in = phi i32 [ %v4_e8d4113, %dec_label_pc_e91c.lr.ph ], [ %v0_e914, %dec_label_pc_e934 ]
  %v0_e934 = phi i32 [ 0, %dec_label_pc_e91c.lr.ph ], [ %v1_e934, %dec_label_pc_e934 ]
  %v0_e928 = phi i32 [ 0, %dec_label_pc_e91c.lr.ph ], [ %v1_e928., %dec_label_pc_e934 ]
  %v0_e914 = add i32 %v0_e914.in, -1
  %v2_e91c = add i32 %v0_e928, %v0_e91c.pre
  %v3_e91c = inttoptr i32 %v2_e91c to i8*
  %v4_e91c = load i8, i8* %v3_e91c, align 1
  %v6_e91c = zext i8 %v4_e91c to i32
  store i32 %v6_e91c, i32* %r2.global-to-local, align 4
  %v2_e920 = add i32 %v0_e934, %v1_e920.pre
  %v3_e920 = inttoptr i32 %v2_e920 to i8*
  %v4_e920 = load i8, i8* %v3_e920, align 1
  %v6_e920 = zext i8 %v4_e920 to i32
  store i32 %v6_e920, i32* %r3.global-to-local, align 4
  %v9_e924 = icmp eq i8 %v4_e920, %v4_e91c
  %v1_e928 = add i32 %v0_e928, 1
  %v1_e928. = select i1 %v9_e924, i32 %v1_e928, i32 0
  store i32 %v1_e928., i32* %r1.global-to-local, align 4
  br i1 %v9_e924, label %dec_label_pc_e970, label %dec_label_pc_e934

dec_label_pc_e934:                                ; preds = %dec_label_pc_e970, %dec_label_pc_e91c
  %v1_e934 = add i32 %v0_e934, 1
  %v2_e914 = icmp eq i32 %v0_e914, 0
  br i1 %v2_e914, label %dec_label_pc_e8c8.backedge, label %dec_label_pc_e91c

dec_label_pc_e93c:                                ; preds = %dec_label_pc_e950
  %v9_e93c = icmp eq i32 %v3_e8e4, %v1_e95c.
  br i1 %v9_e93c, label %dec_label_pc_e978, label %dec_label_pc_e948.backedge

dec_label_pc_e948.backedge:                       ; preds = %dec_label_pc_e950, %dec_label_pc_e93c
  %storemerge = add i32 %storemerge.in, 1
  %v1_e948 = add i32 %v0_e948, -1
  store i32 %v1_e948, i32* %r1.global-to-local, align 4
  %v2_e948 = icmp eq i32 %v0_e948, 0
  br i1 %v2_e948, label %dec_label_pc_e8fc, label %dec_label_pc_e950

dec_label_pc_e950:                                ; preds = %dec_label_pc_e948.backedge, %dec_label_pc_e950.lr.ph
  %v0_e948 = phi i32 [ %v1_e94827, %dec_label_pc_e950.lr.ph ], [ %v1_e948, %dec_label_pc_e948.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_e950.lr.ph ], [ %storemerge, %dec_label_pc_e948.backedge ]
  %v0_e95c = phi i32 [ 0, %dec_label_pc_e950.lr.ph ], [ %v1_e95c., %dec_label_pc_e948.backedge ]
  %v2_e950 = add i32 %v0_e95c, %v0_e950.pre
  %v3_e950 = inttoptr i32 %v2_e950 to i8*
  %v4_e950 = load i8, i8* %v3_e950, align 1
  %v6_e950 = zext i8 %v4_e950 to i32
  store i32 %v6_e950, i32* %r2.global-to-local, align 4
  %v2_e954 = add i32 %storemerge.in, %v1_e954.pre
  %v3_e954 = inttoptr i32 %v2_e954 to i8*
  %v4_e954 = load i8, i8* %v3_e954, align 1
  %v6_e954 = zext i8 %v4_e954 to i32
  store i32 %v6_e954, i32* %r3.global-to-local, align 4
  %v9_e958 = icmp eq i8 %v4_e954, %v4_e950
  %v1_e95c = add i32 %v0_e95c, 1
  %v1_e95c. = select i1 %v9_e958, i32 %v1_e95c, i32 0
  br i1 %v9_e958, label %dec_label_pc_e93c, label %dec_label_pc_e948.backedge

dec_label_pc_e970:                                ; preds = %dec_label_pc_e91c
  %v9_e970 = icmp eq i32 %v3_e900, %v1_e928.
  br i1 %v9_e970, label %dec_label_pc_e978, label %dec_label_pc_e934

dec_label_pc_e978:                                ; preds = %dec_label_pc_e93c, %dec_label_pc_e970
  %v1_e97c = call i32 @function_10ea4(i32 18)
  %v1_e984 = call i32 @function_10ea4(i32 19)
  %v0_e988 = load i32, i32* @r8, align 4
  %v1_e98c = call i32 @close(i32 %v0_e988)
  %v0_e990 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e998 = call i32 @kill(i32 %v0_e990, i32 9)
  br label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e874, %dec_label_pc_e9d0, %dec_label_pc_e978
  store i32 64, i32* @r1, align 4
  store i32 %v2_e6f4, i32* @r0, align 4
  %v0_e9a8 = call i32 @function_115c8()
  store i32 %v2_e744, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e9b8 = call i32 @function_115c8()
  %v1_e9c0 = call i32 @sleep(i32 1)
  store i32 %v2_e6c8, i32* @r4, align 4
  %v0_e9c8 = load i32, i32* @r7, align 4
  store i32 %v0_e9c8, i32* @r5, align 4
  br label %dec_label_pc_e630.backedge

dec_label_pc_e9d0:                                ; preds = %dec_label_pc_e8c8.backedge, %dec_label_pc_e890
  %v1_e9d4 = call i32 @function_10ea4(i32 18)
  %v1_e9dc = call i32 @function_10ea4(i32 19)
  %v0_e9e0 = load i32, i32* @r8, align 4
  %v1_e9e4 = call i32 @close(i32 %v0_e9e0)
  br label %dec_label_pc_e99c

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e854
  %v0_e9ec = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e9f4 = call i32 @kill(i32 %v0_e9ec, i32 9)
  %v0_e86c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e86c

; uselistorder directives
  uselistorder i32 %v1_e95c., { 1, 0 }
  uselistorder i1 %v9_e958, { 1, 0 }
  uselistorder i32 %v0_e95c, { 1, 0 }
  uselistorder i32 %v1_e928., { 1, 2, 0 }
  uselistorder i1 %v9_e924, { 1, 0 }
  uselistorder i32 %v0_e928, { 1, 0 }
  uselistorder i32 %v0_e934, { 1, 0 }
  uselistorder i32 %v4_e8d4, { 1, 0 }
  uselistorder i32 %v4_e8d4113, { 0, 4, 3, 2, 1 }
  uselistorder %dirent* %v3_e634, { 1, 0 }
  uselistorder i32 %v2_e7a0, { 1, 0 }
  uselistorder %dirent* %v3_e6ac, { 1, 0 }
  uselistorder i32 %v5_e5f8, { 1, 0 }
  uselistorder i32 %v2_e744, { 1, 0, 2 }
  uselistorder i32 %v2_e6f4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e5dc, { 1, 0, 2 }
  uselistorder i32 %v2_e5bc, { 1, 0, 2 }
  uselistorder i32 %v1_e510, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge74, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-8380, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 13, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 0, 2, 3, 4, 6, 1, 5, 40, 41, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39 }
  uselistorder i32 64, { 9, 10, 11, 12, 7, 13, 14, 15, 0, 16, 17, 18, 1, 19, 20, 21, 2, 22, 23, 24, 8, 25, 26, 27, 3, 28, 29, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 6, 42 }
  uselistorder i32 (i32, i32)* @kill, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32, i32)* @function_1187c, { 0, 2, 1, 3 }
  uselistorder i32 (%__dirstream*)* @closedir, { 0, 2, 1, 3 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 4, 5, 1, 7, 3, 6, 0, 8, 2, 9 }
  uselistorder i32 (i32)* @function_ded0, { 2, 1, 0 }
  uselistorder %__dirstream* (i8*)* @opendir, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i8*, i32)* @readlink, { 1, 0, 3, 2, 4 }
  uselistorder i8** @global_var_1a224.119, { 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1a224.119 to i32), { 0, 4, 3, 2, 1 }
  uselistorder i32 4096, { 5, 9, 0, 1, 6, 10, 7, 11, 2, 8, 3, 4 }
  uselistorder label %dec_label_pc_e99c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e978, { 1, 0 }
  uselistorder label %dec_label_pc_e8e0, { 1, 0 }
  uselistorder label %dec_label_pc_e874, { 1, 0 }
  uselistorder label %dec_label_pc_e86c, { 1, 0 }
  uselistorder label %dec_label_pc_e630.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_e810, { 1, 0 }
  uselistorder label %dec_label_pc_e640, { 1, 0 }
  uselistorder label %dec_label_pc_e640.preheader, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_ea08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ea08:
  store i32 ptrtoint (i32* @global_var_ea20.121 to i32), i32* @global_var_1a1a0.123, align 4
  ret i32 %arg1
}

define i32 @function_ea20() local_unnamed_addr {
dec_label_pc_ea20:
  %stack_var_-8 = alloca i32, align 4
  %v3_ea20 = load i32, i32* @r4, align 4
  store i32 %v3_ea20, i32* %stack_var_-8, align 4
  %v1_ea28 = call i32 @function_10f5c(i32 1)
  %v3_ea30 = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_11dbc.125, i32 0, i32 0))
  store i32 %v3_ea30, i32* @global_var_1a230.128, align 4
  %v3_ea44 = call i32 @function_10e78(i32 1, i32* null)
  %v4_ea44 = inttoptr i32 %v3_ea44 to i8*
  %v2_ea48 = add i32 %v3_ea44, 1
  %v3_ea48 = inttoptr i32 %v2_ea48 to i8*
  %v4_ea48 = load i8, i8* %v3_ea48, align 1
  %v3_ea4c = load i8, i8* %v4_ea44, align 1
  store i8 %v4_ea48, i8* bitcast (i32* @global_var_1a22f.129 to i8*), align 4
  store i8 %v3_ea4c, i8* bitcast (i32* @global_var_1a22e.130 to i8*), align 4
  %v2_ea64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ea64, i32* @r4, align 4
  %v1_ea68 = call i32 @function_10ea4(i32 1)
  %v0_ea6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ea6c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ea20
  %v1_ea6c = load i32, i32* @r1, align 4
  %v2_ea6c = trunc i32 %v1_ea6c to i16
  %v4_ea6c = inttoptr i32 %v1_ea6c to i16*
  store i16 %v2_ea6c, i16* %v4_ea6c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ea20, %bb
  ret i32 %v1_ea68

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ea74(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea74:
  %v3_ea74 = load i32, i32* @r4, align 4
  %v6_ea74 = load i32, i32* @r5, align 4
  %v0_ea7c = call i32 @fork()
  %v2_ea80 = icmp eq i32 %v0_ea7c, -1
  %. = zext i1 %v2_ea80 to i32
  %tmp10 = icmp slt i32 %v0_ea7c, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_ea9c = icmp eq i32 %storemerge4, 0
  store i32 %v0_ea7c, i32* @global_var_1a1d0.132, align 4
  br i1 %v2_ea9c, label %dec_label_pc_eab0, label %dec_label_pc_eaa8

dec_label_pc_eaa8:                                ; preds = %dec_label_pc_ea74
  store i32 %v3_ea74, i32* @r4, align 4
  store i32 %v6_ea74, i32* @r5, align 4
  ret i32 %v0_ea7c

dec_label_pc_eab0:                                ; preds = %dec_label_pc_ea74
  %v1_eabc = call i32 @function_10f5c(i32 23)
  %v1_eac4 = call i32 @function_10f5c(i32 24)
  %v0_eac8 = load i32, i32* @r5, align 4
  %v2_ead0 = inttoptr i32 %v0_eac8 to i32*
  %v3_ead0 = call i32 @function_10e78(i32 23, i32* %v2_ead0)
  %v4_ead0 = inttoptr i32 %v3_ead0 to i8*
  %v4_ead8 = call i32 (i8*, i32, ...) @open(i8* %v4_ead0, i32 2)
  %v2_eadc = icmp eq i32 %v4_ead8, -1
  store i32 %v4_ead8, i32* @r4, align 4
  br i1 %v2_eadc, label %dec_label_pc_eb24, label %dec_label_pc_eae8

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eb24, %dec_label_pc_eab0
  %v0_eaf4 = phi i32 [ %v5_eb34, %dec_label_pc_eb24 ], [ %v4_ead8, %dec_label_pc_eab0 ]
  %v2_eafc = call i32 (i32, i32, ...) @ioctl(i32 %v0_eaf4, i32 -2147199228)
  br label %dec_label_pc_eb00

dec_label_pc_eb00:                                ; preds = %dec_label_pc_eb00, %dec_label_pc_eae8
  %v0_eb0c = load i32, i32* @r4, align 4
  %v2_eb14 = call i32 (i32, i32, ...) @ioctl(i32 %v0_eb0c, i32 -2147199227)
  %v1_eb1c = call i32 @sleep(i32 10)
  br label %dec_label_pc_eb00

dec_label_pc_eb24:                                ; preds = %dec_label_pc_eab0
  %v0_eb24 = load i32, i32* @r5, align 4
  %v2_eb2c = inttoptr i32 %v0_eb24 to i32*
  %v3_eb2c = call i32 @function_10e78(i32 24, i32* %v2_eb2c)
  %v4_eb2c = inttoptr i32 %v3_eb2c to i8*
  %v5_eb34 = call i32 (i8*, i32, ...) @open(i8* %v4_eb2c, i32 2)
  %v3_eb38 = icmp eq i32 %v5_eb34, -1
  store i32 %v5_eb34, i32* @r4, align 4
  br i1 %v3_eb38, label %dec_label_pc_eb44, label %dec_label_pc_eae8

dec_label_pc_eb44:                                ; preds = %dec_label_pc_eb24
  %v1_eb48 = call i32 @function_10ea4(i32 23)
  %v1_eb50 = call i32 @function_10ea4(i32 24)
  %v0_eb54 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_eb54)
  unreachable

; uselistorder directives
  uselistorder i32 %v5_eb34, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_ea7c, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 0, 3, 2, 1, 6, 5, 4, 7 }
}

define i32 @function_eb60(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_eb60:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eb60 = load i32, i32* @r4, align 4
  store i32 %v3_eb60, i32* %stack_var_-36, align 4
  %v6_eb60 = load i32, i32* @r5, align 4
  %v9_eb60 = load i32, i32* @r6, align 4
  %v15_eb60 = load i32, i32* @r8, align 4
  %v2_eb6c = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_eb6c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp41 = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_eb84 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp41)
  %v4_eb90 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp41, i32 2)
  %v0_eb94 = load i32, i32* @r5, align 4
  %v1_eb94 = inttoptr i32 %v0_eb94 to %_TYPEDEF_sigset_t*
  store i32 %v0_eb94, i32* %r2.global-to-local, align 4
  %v7_eba0 = call i32 @sigprocmask(i32 %v0_eb94, %_TYPEDEF_sigset_t* %tmp41, %_TYPEDEF_sigset_t* %v1_eb94)
  %v4_ebac = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_ebb8 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_ea08.134 to void (i32)*))
  %v0_ebbc = call i32 @function_117e0()
  store i32 %v0_ebbc, i32* @global_var_1a220.101, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a22f.129 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1a22c.127 to i8*), align 4
  store i32 1494907824, i32* @global_var_1a230.128, align 4
  %v0_ebe4 = load i32, i32* @r5, align 4
  %v1_ebe4 = trunc i32 %v0_ebe4 to i8
  store i8 %v1_ebe4, i8* bitcast (i32* @global_var_1a22e.130 to i8*), align 4
  store i8 %v1_ebe4, i8* bitcast (i32* @global_var_1a22d.138 to i8*), align 4
  %v6_ebec = call i32 @function_11014(i32 %v0_ebbc, i32 ptrtoint (%sockaddr** @global_var_1a22c.127 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_ea20.121 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ea20.121 to i32), i32* @global_var_1a1a0.123, align 4
  %v1_ebfc = call i32 @function_f2e4(i32 %v6_ebec)
  %v2_ec04 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_ec04, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_ec0c = call i32 @function_115c8()
  %v0_ec10 = load i32, i32* @r6, align 4
  %v7_ec10 = icmp eq i32 %v0_ec10, 2
  br i1 %v7_ec10, label %dec_label_pc_ed38, label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ed38, %dec_label_pc_eb60, %dec_label_pc_ed48
  %v0_ec18 = call i32 @function_f28c()
  store i32 %v0_ec18, i32* %r6.global-to-local, align 4
  %v0_ec20 = load i32, i32* @r8, align 4
  %v1_ec20 = inttoptr i32 %v0_ec20 to i32*
  %v2_ec20 = load i32, i32* %v1_ec20, align 4
  %v1_ec24 = inttoptr i32 %v2_ec20 to i8*
  %v2_ec24 = call i32 @function_11528(i8* %v1_ec24)
  store i32 %v2_ec24, i32* %r4.global-to-local, align 4
  %v0_ec2c = load i32, i32* @r8, align 4
  %v1_ec2c = inttoptr i32 %v0_ec2c to i32*
  %v2_ec2c = load i32, i32* %v1_ec2c, align 4
  %v1_ec30 = inttoptr i32 %v2_ec2c to i8*
  %v2_ec30 = call i32 @function_11528(i8* %v1_ec30)
  %v1_ec34 = sub i32 20, %v2_ec24
  store i32 %v2_ec30, i32* @r5, align 4
  %v0_ec3c = load i32, i32* %r6.global-to-local, align 4
  %v2_ec40 = urem i32 %v0_ec3c, %v1_ec34
  %v2_ec48 = add i32 %v2_ec40, %v2_ec30
  store i32 %v2_ec48, i32* @r4, align 4
  %v2_ec4c = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_ec4c, i32* @r6, align 4
  %v2_ec58 = call i32 @function_f340(i32 %v2_ec4c, i32 %v2_ec48)
  %v2_ec5c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ec5c, i32* %r2.global-to-local, align 4
  %v1_ec60 = load i32, i32* @r4, align 4
  %v2_ec60 = add i32 %v1_ec60, %v2_ec5c
  store i32 %v2_ec60, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_ec6c = load i32, i32* @r8, align 4
  %v1_ec6c = inttoptr i32 %v0_ec6c to i32*
  %v2_ec6c = load i32, i32* %v1_ec6c, align 4
  store i32 %v2_ec6c, i32* @r0, align 4
  %v3_ec70 = add i32 %v2_ec60, -56
  %v4_ec70 = inttoptr i32 %v3_ec70 to i8*
  store i8 0, i8* %v4_ec70, align 1
  %v2_ec74 = inttoptr i32 %v2_ec6c to i8*
  %v3_ec74 = call i32 @function_11550(i8* %v2_ec74, i32 %v2_ec4c)
  store i32 32, i32* @r1, align 4
  store i32 %v2_ec4c, i32* @r0, align 4
  %v0_ec80 = call i32 @function_115c8()
  %v0_ec84 = call i32 @function_f28c()
  store i32 %v0_ec84, i32* @r7, align 4
  %v0_ec8c = load i32, i32* @r8, align 4
  %v1_ec8c = inttoptr i32 %v0_ec8c to i32*
  %v2_ec8c = load i32, i32* %v1_ec8c, align 4
  %v1_ec90 = inttoptr i32 %v2_ec8c to i8*
  %v2_ec90 = call i32 @function_11528(i8* %v1_ec90)
  store i32 %v2_ec90, i32* %r4.global-to-local, align 4
  %v0_ec98 = load i32, i32* @r8, align 4
  %v1_ec98 = inttoptr i32 %v0_ec98 to i32*
  %v2_ec98 = load i32, i32* %v1_ec98, align 4
  %v1_ec9c = inttoptr i32 %v2_ec98 to i8*
  %v2_ec9c = call i32 @function_11528(i8* %v1_ec9c)
  %v1_eca0 = sub i32 20, %v2_ec90
  store i32 %v2_ec9c, i32* @r5, align 4
  %v0_eca8 = load i32, i32* @r7, align 4
  %v2_ecac = urem i32 %v0_eca8, %v1_eca0
  %v2_ecb0 = add i32 %v2_ecac, %v2_ec9c
  store i32 %v2_ecb0, i32* @r4, align 4
  %v2_ecbc = call i32 @function_f340(i32 %v2_ec4c, i32 %v2_ecb0)
  %v1_ecc4 = load i32, i32* @r4, align 4
  %v2_ecc4 = add i32 %v1_ecc4, %v2_ec5c
  store i32 %v2_ecc4, i32* %r3.global-to-local, align 4
  %v0_ecc8 = load i32, i32* @sb, align 4
  %v1_ecc8 = trunc i32 %v0_ecc8 to i8
  %v3_ecc8 = add i32 %v2_ecc4, -56
  %v4_ecc8 = inttoptr i32 %v3_ecc8 to i8*
  store i8 %v1_ecc8, i8* %v4_ecc8, align 1
  %v5_ecd4 = call i32 @prctl(i32 15, i32 %v2_ec4c, i32 %v2_ecc4, i32 %v2_ecc4, i32 ptrtoint (i32* @0 to i32))
  %v1_ecdc = call i32 @function_10f5c(i32 3)
  %v3_ece8 = call i32 @function_10e78(i32 3, i32* nonnull %stack_var_-52)
  %v3_ecec = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ecec, i32* %r2.global-to-local, align 4
  %v3_ecf8 = inttoptr i32 %v3_ece8 to i32*
  %v4_ecf8 = call i32 @write(i32 1, i32* %v3_ecf8, i32 %v3_ecec)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ed08 = call i32 @write(i32 ptrtoint (i32* @global_var_11dcc.142 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_ed10 = call i32 @function_10ea4(i32 3)
  %v1_ed14 = call i32 @function_931c(i32 %v1_ed10)
  %v1_ed18 = call i32 @function_e46c(i32 %v1_ed14)
  %v1_ed1c = call i32 @function_ea74(i32 %v1_ed18)
  %v0_ed20 = call i32 @fork()
  %v1_ed24 = load i32, i32* @sb, align 4
  %v7_ed28 = icmp sgt i32 %v0_ed20, %v1_ed24
  br i1 %v7_ed28, label %dec_label_pc_ed2c, label %dec_label_pc_ed74

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ec18
  %v2_ed34 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ed34, i32* %r4.global-to-local, align 4
  store i32 %v6_eb60, i32* %r5.global-to-local, align 4
  store i32 %v9_eb60, i32* %r6.global-to-local, align 4
  store i32 %v15_eb60, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_ed38:                                ; preds = %dec_label_pc_eb60
  %v0_ed38 = load i32, i32* @r8, align 4
  %v1_ed38 = add i32 %v0_ed38, 4
  %v2_ed38 = inttoptr i32 %v1_ed38 to i32*
  %v3_ed38 = load i32, i32* %v2_ed38, align 4
  %v1_ed3c = inttoptr i32 %v3_ed38 to i8*
  %v2_ed3c = call i32 @function_11528(i8* %v1_ed3c)
  %v8_ed44 = icmp sgt i32 %v2_ed3c, 31
  br i1 %v8_ed44, label %dec_label_pc_ec18, label %dec_label_pc_ed48

dec_label_pc_ed48:                                ; preds = %dec_label_pc_ed38
  %v0_ed4c = load i32, i32* @r8, align 4
  %v1_ed4c = add i32 %v0_ed4c, 4
  %v2_ed4c = inttoptr i32 %v1_ed4c to i32*
  %v3_ed4c = load i32, i32* %v2_ed4c, align 4
  store i32 %v2_ec04, i32* @r0, align 4
  %v2_ed54 = bitcast i32* %stack_var_-124 to i8*
  %v3_ed54 = call i32 @function_11550(i8* %v2_ed54, i32 %v3_ed4c)
  %v0_ed58 = load i32, i32* @r8, align 4
  %v1_ed58 = add i32 %v0_ed58, 4
  %v2_ed58 = inttoptr i32 %v1_ed58 to i32*
  %v3_ed58 = load i32, i32* %v2_ed58, align 4
  store i32 %v3_ed58, i32* %r4.global-to-local, align 4
  %v1_ed60 = inttoptr i32 %v3_ed58 to i8*
  %v2_ed60 = call i32 @function_11528(i8* %v1_ed60)
  store i32 %v2_ed60, i32* @r1, align 4
  store i32 %v3_ed58, i32* @r0, align 4
  %v0_ed6c = call i32 @function_115c8()
  br label %dec_label_pc_ec18

dec_label_pc_ed74:                                ; preds = %dec_label_pc_ec18
  %v1_ed74 = call i32 @setsid()
  %v0_ed78 = load i32, i32* @sb, align 4
  %v1_ed7c = call i32 @close(i32 %v0_ed78)
  %v1_ed84 = call i32 @close(i32 1)
  %v1_ed8c = call i32 @close(i32 2)
  %v1_ed90 = call i32 @function_931c(i32 %v1_ed8c)
  %v1_ed94 = call i32 @function_e46c(i32 %v1_ed90)
  %v1_ed98 = call i32 @function_ea74(i32 %v1_ed94)
  %v1_ed9c = call i32 @function_f768(i32 %v1_ed98)
  %v2_eda4 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_eda4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a19c.146 to i32), i32* @sl, align 4
  %v2_edbc = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_edbc, i32* @r6, align 4
  %v2_edc0 = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_edc0, i32* @r7, align 4
  %tmp42 = bitcast i32* %stack_var_-252 to %_TYPEDEF_fd_set*
  %tmp43 = bitcast i32* %stack_var_-380 to %_TYPEDEF_fd_set*
  %tmp44 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_f148 = bitcast i8** %stack_var_-38 to i32*
  %v2_f0e0 = ptrtoint i32* %stack_var_-44 to i32
  %v1_f158 = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_edc4

dec_label_pc_edc4:                                ; preds = %dec_label_pc_edc4.backedge, %dec_label_pc_ed74
  %v2_edcc49 = phi i32 [ %v2_edcc49.pre, %dec_label_pc_edc4.backedge ], [ %v2_edbc, %dec_label_pc_ed74 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_edcc51 = inttoptr i32 %v2_edcc49 to i32*
  store i32 0, i32* %v4_edcc51, align 4
  %v0_edd052 = load i32, i32* %r3.global-to-local, align 4
  %v1_edd053 = add i32 %v0_edd052, 4
  store i32 %v1_edd053, i32* %r3.global-to-local, align 4
  %v7_edd454 = icmp eq i32 %v1_edd053, 128
  br i1 %v7_edd454, label %dec_label_pc_eddc, label %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge

dec_label_pc_edcc.dec_label_pc_edcc_crit_edge:    ; preds = %dec_label_pc_edc4, %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge
  %v1_edd055 = phi i32 [ %v1_edd0, %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge ], [ %v1_edd053, %dec_label_pc_edc4 ]
  %v0_edcc.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_edcc = load i32, i32* @r6, align 4
  %v3_edcc = add i32 %v2_edcc, %v1_edd055
  %v4_edcc = inttoptr i32 %v3_edcc to i32*
  store i32 %v0_edcc.pre, i32* %v4_edcc, align 4
  %v0_edd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_edd0 = add i32 %v0_edd0, 4
  store i32 %v1_edd0, i32* %r3.global-to-local, align 4
  %v7_edd4 = icmp eq i32 %v1_edd0, 128
  br i1 %v7_edd4, label %dec_label_pc_eddc, label %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge, %dec_label_pc_edc4
  %v0_eddc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_eddc, i32* %r3.global-to-local, align 4
  store i32 %v0_eddc, i32* %r4.global-to-local, align 4
  %v2_ede456 = load i32, i32* @r7, align 4
  %v3_ede457 = add i32 %v2_ede456, %v0_eddc
  %v4_ede458 = inttoptr i32 %v3_ede457 to i32*
  store i32 %v0_eddc, i32* %v4_ede458, align 4
  %v0_ede859 = load i32, i32* %r3.global-to-local, align 4
  %v1_ede860 = add i32 %v0_ede859, 4
  store i32 %v1_ede860, i32* %r3.global-to-local, align 4
  %v7_edec61 = icmp eq i32 %v1_ede860, 128
  br i1 %v7_edec61, label %dec_label_pc_edf4, label %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge

dec_label_pc_ede4.dec_label_pc_ede4_crit_edge:    ; preds = %dec_label_pc_eddc, %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge
  %v1_ede862 = phi i32 [ %v1_ede8, %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge ], [ %v1_ede860, %dec_label_pc_eddc ]
  %v0_ede4.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_ede4 = load i32, i32* @r7, align 4
  %v3_ede4 = add i32 %v2_ede4, %v1_ede862
  %v4_ede4 = inttoptr i32 %v3_ede4 to i32*
  store i32 %v0_ede4.pre, i32* %v4_ede4, align 4
  %v0_ede8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ede8 = add i32 %v0_ede8, 4
  store i32 %v1_ede8, i32* %r3.global-to-local, align 4
  %v7_edec = icmp eq i32 %v1_ede8, 128
  br i1 %v7_edec, label %dec_label_pc_edf4, label %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge

dec_label_pc_edf4:                                ; preds = %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge, %dec_label_pc_eddc
  %v2_edf4 = load i32, i32* @global_var_1a198.144, align 4
  %v2_edf8 = icmp eq i32 %v2_edf4, -1
  br i1 %v2_edf8, label %dec_label_pc_ee24, label %dec_label_pc_ee00

dec_label_pc_ee00:                                ; preds = %dec_label_pc_edf4
  %v3_ee00 = udiv i32 %v2_edf4, 32
  %v3_ee04 = mul nuw nsw i32 %v3_ee00, 4
  %v2_ee0c = add i32 %v3_ee04, %v2_ec5c
  store i32 %v2_ee0c, i32* %r3.global-to-local, align 4
  %v1_ee10 = add i32 %v2_ee0c, -216
  %v2_ee10 = inttoptr i32 %v1_ee10 to i32*
  %v3_ee10 = load i32, i32* %v2_ee10, align 4
  %v1_ee14 = urem i32 %v2_edf4, 32
  %v7_ee1c = shl i32 1, %v1_ee14
  %v8_ee1c = or i32 %v3_ee10, %v7_ee1c
  store i32 %v8_ee1c, i32* %r2.global-to-local, align 4
  store i32 %v8_ee1c, i32* %v2_ee10, align 4
  br label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %dec_label_pc_edf4, %dec_label_pc_ee00
  %v2_ee24 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 %v2_ee24, i32* %r3.global-to-local, align 4
  %v2_ee28 = icmp eq i32 %v2_ee24, -1
  store i32 ptrtoint (i32* @global_var_1a19c.146 to i32), i32* %r8.global-to-local, align 4
  br i1 %v2_ee28, label %dec_label_pc_f060, label %dec_label_pc_ee34

dec_label_pc_ee34:                                ; preds = %dec_label_pc_f060, %dec_label_pc_ee24, %.thread
  store i32 ptrtoint (i8** @global_var_1a1d4.148 to i32), i32* %r2.global-to-local, align 4
  %v2_ee38 = load i8, i8* bitcast (i8** @global_var_1a1d4.148 to i8*), align 4
  %v2_ee3c = icmp eq i8 %v2_ee38, 0
  %v2_ef44 = load i32, i32* @global_var_1a19c.146, align 4
  %v3_ef48 = udiv i32 %v2_ef44, 32
  store i32 %v3_ef48, i32* %r3.global-to-local, align 4
  br i1 %v2_ee3c, label %dec_label_pc_ef44, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee34
  %v3_ee4c = mul nuw nsw i32 %v3_ef48, 4
  %v2_ee54 = add i32 %v3_ee4c, %v2_ec5c
  store i32 %v2_ee54, i32* %r3.global-to-local, align 4
  %v1_ee58 = add i32 %v2_ee54, -344
  %v2_ee58 = inttoptr i32 %v1_ee58 to i32*
  %v3_ee58 = load i32, i32* %v2_ee58, align 4
  %v1_ee5c = urem i32 %v2_ef44, 32
  %v7_ee64 = shl i32 1, %v1_ee5c
  %v8_ee64 = or i32 %v3_ee58, %v7_ee64
  store i32 %v8_ee64, i32* %r2.global-to-local, align 4
  store i32 %v8_ee64, i32* %v2_ee58, align 4
  br label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ef44, %dec_label_pc_ee44
  %v2_ee6c = load i32, i32* @global_var_1a198.144, align 4
  %v2_ee70 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 %v2_ee70, i32* %r3.global-to-local, align 4
  %v5_ee7c = icmp slt i32 %v2_ee6c, %v2_ee70
  br i1 %v5_ee7c, label %bb, label %bb46

bb:                                               ; preds = %dec_label_pc_ee6c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_ee6c, %bb
  %v0_ee94 = phi i32 [ %v2_ee6c, %dec_label_pc_ee6c ], [ %v2_ee70, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ee94 = add i32 %v0_ee94, 1
  store i32 %v2_edc0, i32* %r2.global-to-local, align 4
  %v13_eea8 = call i32 @select(i32 %v1_ee94, %_TYPEDEF_fd_set* %tmp42, %_TYPEDEF_fd_set* %tmp43, %_TYPEDEF_fd_set* null, %timeval* %tmp44)
  %v14_eea8 = trunc i32 %v13_eea8 to i8
  %v3_eeac = icmp eq i8 %v14_eea8, -1
  store i32 %v13_eea8, i32* %r3.global-to-local, align 4
  br i1 %v3_eeac, label %dec_label_pc_edc4.backedge, label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %bb46
  %v3_eeb8 = icmp eq i8 %v14_eea8, 0
  br i1 %v3_eeb8, label %dec_label_pc_eec0, label %dec_label_pc_eee0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeb8
  %v0_eec0 = load i32, i32* @sb, align 4
  %v6_eecc = inttoptr i32 %v13_eea8 to i8*
  store i8* %v6_eecc, i8** %stack_var_-38, align 4
  %v2_eed0 = srem i32 %v0_eec0, 6
  %v2_eed4 = icmp eq i32 %v2_eed0, 0
  %v1_eed8 = add i32 %v0_eec0, 1
  store i32 %v1_eed8, i32* @sb, align 4
  br i1 %v2_eed4, label %dec_label_pc_f130, label %dec_label_pc_eee0

dec_label_pc_eee0:                                ; preds = %dec_label_pc_eeb8, %dec_label_pc_eec0, %dec_label_pc_f130
  store i32 ptrtoint (i8** @global_var_1a1d4.148 to i32), i32* %r2.global-to-local, align 4
  %v2_eee4 = load i8, i8* bitcast (i8** @global_var_1a1d4.148 to i8*), align 4
  %v3_eee4 = zext i8 %v2_eee4 to i32
  store i32 %v3_eee4, i32* @r4, align 4
  %v2_eee8 = icmp eq i8 %v2_eee4, 0
  %v2_ef70 = load i32, i32* @global_var_1a19c.146, align 4
  br i1 %v2_eee8, label %dec_label_pc_ef70, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eee0
  %v3_eef4 = udiv i32 %v2_ef70, 32
  %v3_eefc = mul nuw nsw i32 %v3_eef4, 4
  %v2_ef00 = add i32 %v3_eefc, %v2_ec5c
  store i32 %v2_ef00, i32* %r3.global-to-local, align 4
  %v1_ef04 = add i32 %v2_ef00, -344
  %v2_ef04 = inttoptr i32 %v1_ef04 to i32*
  %v3_ef04 = load i32, i32* %v2_ef04, align 4
  %v1_ef08 = urem i32 %v2_ef70, 32
  %v6_ef0c = lshr i32 %v3_ef04, %v1_ef08
  store i32 %v6_ef0c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a1d4.148 to i32), i32* %r3.global-to-local, align 4
  %v1_ef18 = urem i32 %v6_ef0c, 2
  %v2_ef18 = icmp eq i32 %v1_ef18, 0
  store i8 0, i8* bitcast (i8** @global_var_1a1d4.148 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1a19c.146 to i32), i32* @r4, align 4
  br i1 %v2_ef18, label %dec_label_pc_ef28, label %dec_label_pc_f0d0

dec_label_pc_ef28:                                ; preds = %dec_label_pc_eef0
  %v1_ef2c = icmp ne i32 %v2_ef70, -1
  call void @__pseudo_cond_branch(i1 %v1_ef2c, i32 ptrtoint (i32* @global_var_8d4c.149 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ef34 = load i32, i32* @r4, align 4
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  store i32 -1, i32* %v2_ef34, align 4
  %v1_ef3c = call i32 @sleep(i32 1)
  br label %dec_label_pc_edc4.backedge

dec_label_pc_edc4.backedge:                       ; preds = %dec_label_pc_ef28, %dec_label_pc_f03c, %dec_label_pc_f108, %dec_label_pc_f1a4, %dec_label_pc_f1d0, %dec_label_pc_f1ec, %dec_label_pc_f254, %bb46, %dec_label_pc_ef70, %dec_label_pc_ef80, %dec_label_pc_f150, %bb48, %dec_label_pc_f200, %dec_label_pc_f1bc
  %v2_edcc49.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_edc4

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ee34
  store i32 %v2_ec5c, i32* %r2.global-to-local, align 4
  %v3_ef50 = mul nuw nsw i32 %v3_ef48, 4
  %v2_ef54 = add i32 %v3_ef50, %v2_ec5c
  store i32 %v2_ef54, i32* %r3.global-to-local, align 4
  %v1_ef58 = add i32 %v2_ef54, -216
  %v2_ef58 = inttoptr i32 %v1_ef58 to i32*
  %v3_ef58 = load i32, i32* %v2_ef58, align 4
  %v1_ef5c = urem i32 %v2_ef44, 32
  %v7_ef64 = shl i32 1, %v1_ef5c
  %v8_ef64 = or i32 %v3_ef58, %v7_ef64
  store i32 %v8_ef64, i32* %r2.global-to-local, align 4
  store i32 %v8_ef64, i32* %v2_ef58, align 4
  br label %dec_label_pc_ee6c

dec_label_pc_ef70:                                ; preds = %dec_label_pc_eee0
  %v2_ef74 = icmp eq i32 %v2_ef70, -1
  store i32 ptrtoint (i32* @global_var_1a19c.146 to i32), i32* @r8, align 4
  br i1 %v2_ef74, label %dec_label_pc_edc4.backedge, label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %dec_label_pc_ef70
  %v3_ef80 = udiv i32 %v2_ef70, 32
  %v3_ef84 = mul nuw nsw i32 %v3_ef80, 4
  %v2_ef8c = add i32 %v3_ef84, %v2_ec5c
  store i32 %v2_ef8c, i32* %r3.global-to-local, align 4
  %v1_ef90 = add i32 %v2_ef8c, -216
  %v2_ef90 = inttoptr i32 %v1_ef90 to i32*
  %v3_ef90 = load i32, i32* %v2_ef90, align 4
  %v1_ef94 = urem i32 %v2_ef70, 32
  %v6_ef98 = lshr i32 %v3_ef90, %v1_ef94
  store i32 %v6_ef98, i32* %r2.global-to-local, align 4
  %v1_ef9c = urem i32 %v6_ef98, 2
  %v2_ef9c = icmp eq i32 %v1_ef9c, 0
  br i1 %v2_ef9c, label %dec_label_pc_edc4.backedge, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_ef80
  %v6_efa4 = inttoptr i32 %v3_eee4 to i8*
  store i8* %v6_efa4, i8** %stack_var_-38, align 4
  %v0_efac = call i32* @__errno_location()
  %v1_efac = ptrtoint i32* %v0_efac to i32
  %v0_efb0 = load i32, i32* @r4, align 4
  store i32 %v0_efb0, i32* %v0_efac, align 4
  store i32 %v1_efac, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_efc4 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_efd0 = call i32 @recv(i32 %v2_efc4, i32* %v7_f148, i32 2, i32 16386)
  %v2_efd4 = icmp eq i32 %v5_efd0, -1
  br i1 %v2_efd4, label %dec_label_pc_f1bc, label %dec_label_pc_efdc

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efa4
  %v2_efdc = icmp eq i32 %v5_efd0, 0
  br i1 %v2_efdc, label %dec_label_pc_f03c, label %dec_label_pc_efe4

dec_label_pc_efe4:                                ; preds = %dec_label_pc_efdc
  %v3_efe4 = load i8*, i8** %stack_var_-38, align 4
  %v4_efe4 = ptrtoint i8* %v3_efe4 to i32
  store i32 %v3_eee4, i32* %r3.global-to-local, align 4
  %v4_efec = mul nuw nsw i32 %v3_eee4, 256
  %v5_efec = or i32 %v4_efe4, %v4_efec
  store i32 %v5_efec, i32* %r2.global-to-local, align 4
  %v7_efec = icmp eq i32 %v5_efec, 0
  br i1 %v7_efec, label %dec_label_pc_f1d0, label %dec_label_pc_eff4

dec_label_pc_eff4:                                ; preds = %dec_label_pc_efe4
  %v1_eff4 = mul i32 %v4_efe4, 256
  %v3_eff8 = and i32 %v1_eff4, 65280
  %v4_effc = udiv i32 %v5_efec, 256
  %v5_effc = or i32 %v3_eff8, %v4_effc
  %v6_effc = trunc i32 %v4_effc to i8
  store i32 %v5_effc, i32* %r2.global-to-local, align 4
  %v4_f000 = udiv i32 %v5_efec, 65536
  store i32 %v4_f000, i32* %r3.global-to-local, align 4
  %v3_f004 = icmp slt i8 %v6_effc, 0
  %v7_f00c = inttoptr i32 %v4_effc to i8*
  store i8* %v7_f00c, i8** %stack_var_-38, align 4
  br i1 %v3_f004, label %dec_label_pc_f1ec, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %dec_label_pc_eff4
  %v0_f014 = load i32, i32* @r4, align 4
  %v1_f014 = load i32, i32* @r5, align 4
  %v2_f014 = inttoptr i32 %v1_f014 to i32*
  store i32 %v0_f014, i32* %v2_f014, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f020 = load i32, i32* @global_var_1a19c.146, align 4
  %v9_f028 = call i32 @recv(i32 %v2_f020, i32* nonnull %stack_var_-1532, i32 %v4_effc, i32 16386)
  %v2_f02c = icmp eq i32 %v9_f028, -1
  br i1 %v2_f02c, label %dec_label_pc_f1bc, label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %dec_label_pc_f014
  %v2_f034 = icmp eq i32 %v9_f028, 0
  br i1 %v2_f034, label %dec_label_pc_f03c, label %dec_label_pc_f200

dec_label_pc_f03c:                                ; preds = %bb48, %dec_label_pc_f034, %dec_label_pc_efdc
  %v2_f03c = load i32, i32* @global_var_1a19c.146, align 4
  %v1_f044 = icmp ne i32 %v2_f03c, -1
  call void @__pseudo_cond_branch(i1 %v1_f044, i32 ptrtoint (i32* @global_var_8d4c.149 to i32))
  store i32 ptrtoint (i32* @global_var_1a19c.146 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1a19c.146, align 4
  %v1_f058 = call i32 @sleep(i32 1)
  br label %dec_label_pc_edc4.backedge

dec_label_pc_f060:                                ; preds = %dec_label_pc_ee24
  %v0_f068 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f068, i32* %r2.global-to-local, align 4
  %v3_f06c = call i32 @socket(i32 2, i32 1, i32 %v0_f068)
  %v2_f070 = icmp eq i32 %v3_f06c, -1
  store i32 %v3_f06c, i32* %r5.global-to-local, align 4
  %v1_f078 = load i32, i32* %r8.global-to-local, align 4
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  store i32 %v3_f06c, i32* %v2_f078, align 4
  br i1 %v2_f070, label %dec_label_pc_ee34, label %dec_label_pc_f080

dec_label_pc_f080:                                ; preds = %dec_label_pc_f060
  %v0_f080 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f080, i32* %r2.global-to-local, align 4
  %v2_f088 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f06c, i32 3)
  %v1_f090 = or i32 %v2_f088, 2048
  store i32 %v1_f090, i32* %r2.global-to-local, align 4
  %v0_f094 = load i32, i32* %r5.global-to-local, align 4
  %v2_f098 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f094, i32 4)
  store i32 ptrtoint (i32* @global_var_1a1a0.123 to i32), i32* %r2.global-to-local, align 4
  %v2_f0a0 = load i32, i32* @global_var_1a1a0.123, align 4
  store i32 %v2_f0a0, i32* %r3.global-to-local, align 4
  %v2_f0a4 = icmp eq i32 %v2_f0a0, 0
  br i1 %v2_f0a4, label %.thread, label %bb47

bb47:                                             ; preds = %dec_label_pc_f080
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_117e0.150 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f080, %bb47
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f0b8 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1a1d4.148 to i8*), align 4
  %v5_f0c8 = call i32 @connect(i32 %v2_f0b8, %sockaddr* bitcast (%sockaddr** @global_var_1a22c.127 to %sockaddr*), i32 16)
  br label %dec_label_pc_ee34

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_eef0
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_f0e0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v8_f0f8 = call i32 @getsockopt(i32 %v2_ef70, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  %v3_f0fc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f0fc, i32* %r3.global-to-local, align 4
  %v2_f100 = icmp eq i32 %v3_f0fc, 0
  br i1 %v2_f100, label %dec_label_pc_f150, label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_f0d0
  %v2_f108 = load i32, i32* @global_var_1a19c.146, align 4
  %v1_f10c = call i32 @close(i32 %v2_f108)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f114 = load i32, i32* @r4, align 4
  %v2_f114 = inttoptr i32 %v1_f114 to i32*
  store i32 -1, i32* %v2_f114, align 4
  %v0_f118 = call i32 @function_f28c()
  %v2_f120 = urem i32 %v0_f118, 10
  %v1_f124 = add nuw nsw i32 %v2_f120, 1
  %v1_f128 = call i32 @sleep(i32 %v1_f124)
  br label %dec_label_pc_edc4.backedge

dec_label_pc_f130:                                ; preds = %dec_label_pc_eec0
  %v2_f138 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_f148 = call i32 @send(i32 %v2_f138, i32* nonnull %v7_f148, i32 2, i32 16384)
  br label %dec_label_pc_eee0

dec_label_pc_f150:                                ; preds = %dec_label_pc_f0d0
  %v2_f158 = call i32 @function_11528(i8* %v1_f158)
  %sext = mul i32 %v2_f158, 16777216
  %v1_f15c = sdiv i32 %sext, 16777216
  %v7_f15c = inttoptr i32 %v1_f15c to i8*
  store i8* %v7_f15c, i8** %stack_var_-38, align 4
  %v0_f160 = call i32 @function_117e0()
  store i32 %v0_f160, i32* @global_var_1a220.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f174 = load i32, i32* @r5, align 4
  store i32 %v0_f174, i32* %r2.global-to-local, align 4
  %v2_f178 = load i32, i32* @global_var_1a19c.146, align 4
  %v5_f17c = call i32 @send(i32 %v2_f178, i32* nonnull @global_var_11dd0.152, i32 %v0_f174, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_f188 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f194 = call i32 @send(i32 %v2_f188, i32* %v7_f148, i32 1, i32 16384)
  %v3_f198 = load i8*, i8** %stack_var_-38, align 4
  %v4_f198 = ptrtoint i8* %v3_f198 to i32
  store i32 %v4_f198, i32* %r2.global-to-local, align 4
  %v3_f19c = icmp eq i8* %v3_f198, null
  br i1 %v3_f19c, label %dec_label_pc_edc4.backedge, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f150
  %v2_f1a8 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f1b4 = call i32 @send(i32 %v2_f1a8, i32* nonnull %stack_var_-124, i32 %v4_f198, i32 16384)
  br label %dec_label_pc_edc4.backedge

dec_label_pc_f1bc:                                ; preds = %dec_label_pc_f014, %dec_label_pc_efa4
  %v0_f1bc = load i32, i32* @r5, align 4
  %v1_f1bc = inttoptr i32 %v0_f1bc to i32*
  %v2_f1bc = load i32, i32* %v1_f1bc, align 4
  store i32 %v2_f1bc, i32* %r3.global-to-local, align 4
  %v7_f1c0 = icmp eq i32 %v2_f1bc, 4
  br i1 %v7_f1c0, label %dec_label_pc_edc4.backedge, label %bb48

bb48:                                             ; preds = %dec_label_pc_f1bc
  %v8_f1c4 = icmp eq i32 %v2_f1bc, 11
  br i1 %v8_f1c4, label %dec_label_pc_edc4.backedge, label %dec_label_pc_f03c

dec_label_pc_f1d0:                                ; preds = %dec_label_pc_efe4
  %v2_f1d4 = load i32, i32* @global_var_1a19c.146, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f1e4 = call i32 @recv(i32 %v2_f1d4, i32* nonnull %v7_f148, i32 2, i32 16384)
  br label %dec_label_pc_edc4.backedge

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_eff4
  %v2_f1ec = load i32, i32* @global_var_1a19c.146, align 4
  %v1_f1f0 = call i32 @close(i32 %v2_f1ec)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f1f8 = load i32, i32* @r8, align 4
  %v2_f1f8 = inttoptr i32 %v1_f1f8 to i32*
  store i32 -1, i32* %v2_f1f8, align 4
  br label %dec_label_pc_edc4.backedge

dec_label_pc_f200:                                ; preds = %dec_label_pc_f034
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f210 = load i32, i32* @global_var_1a19c.146, align 4
  %v5_f214 = call i32 @recv(i32 %v2_f210, i32* nonnull %v7_f148, i32 2, i32 16384)
  %v3_f218 = load i8*, i8** %stack_var_-38, align 4
  %v4_f218 = ptrtoint i8* %v3_f218 to i32
  %v4_f21c = urem i32 %v4_f000, 256
  %v4_f220 = mul i32 %v4_f218, 256
  %v5_f220 = or i32 %v4_f220, %v4_f21c
  store i32 %v5_f220, i32* %r2.global-to-local, align 4
  %v3_f228 = sdiv i32 %v4_f220, 256
  store i32 %v3_f228, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f234 = load i32, i32* @global_var_1a19c.146, align 4
  %v6_f23c = inttoptr i32 %v5_f220 to i8*
  store i8* %v6_f23c, i8** %stack_var_-38, align 4
  %v8_f240 = call i32 @recv(i32 %v2_f234, i32* nonnull %stack_var_-1532, i32 %v5_f220, i32 16384)
  %v3_f244 = load i8*, i8** %stack_var_-38, align 4
  %v4_f244 = ptrtoint i8* %v3_f244 to i32
  store i32 %v4_f244, i32* %r2.global-to-local, align 4
  %v4_f248 = urem i32 %v3_f228, 256
  store i32 %v4_f248, i32* %r3.global-to-local, align 4
  %v6_f24c = mul nuw nsw i32 %v4_f248, 256
  %v7_f24c = or i32 %v4_f244, %v6_f24c
  %v9_f24c = icmp eq i32 %v7_f24c, 0
  br i1 %v9_f24c, label %dec_label_pc_edc4.backedge, label %dec_label_pc_f254

dec_label_pc_f254:                                ; preds = %dec_label_pc_f200
  %v7_f258 = call i32 @function_8fec(i32* nonnull %stack_var_-1532, i32 %v7_f24c, i32 %v4_f244, i32 %v4_f248)
  br label %dec_label_pc_edc4.backedge

; uselistorder directives
  uselistorder i32 %v4_f248, { 2, 0, 1 }
  uselistorder i32 %v4_f244, { 1, 0, 2 }
  uselistorder i32 %v3_f228, { 1, 0 }
  uselistorder i32 %v5_f220, { 1, 0, 2 }
  uselistorder i32 %v4_f220, { 1, 0 }
  uselistorder i32 %v3_f06c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_effc, { 2, 3, 0, 1 }
  uselistorder i32 %v2_ef70, { 5, 2, 1, 6, 0, 4, 3 }
  uselistorder i32 %v13_eea8, { 1, 0, 2 }
  uselistorder i32 %v2_edf4, { 1, 0, 2 }
  uselistorder i32 %v1_ede8, { 1, 2, 0 }
  uselistorder i32 %v1_edd0, { 1, 2, 0 }
  uselistorder i32* %v7_f148, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_ecc4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ec5c, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_ec4c, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_eb94, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 44, 45, 36, 37, 33, 42, 43, 34, 35, 38, 39, 40, 41 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 0, 6, 1, 3, 2, 8, 7, 4, 5, 9 }
  uselistorder i8* bitcast (i8** @global_var_1a1d4.148 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1a1d4.148, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a1d4.148 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1a19c.146, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_ea74, { 1, 0 }
  uselistorder i32 (i32)* @function_e46c, { 1, 0 }
  uselistorder i32 (i32)* @function_931c, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_11550, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32, i32)* @function_f340, { 2, 1, 0 }
  uselistorder i32* @global_var_1a1a0.123, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ea20.121 to i32), { 0, 2, 1 }
  uselistorder %sockaddr** @global_var_1a22c.127, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_edc4.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_eee0, { 2, 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_ee34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee24, { 1, 0 }
  uselistorder label %dec_label_pc_ede4.dec_label_pc_ede4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_edcc.dec_label_pc_edcc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ec18, { 2, 0, 1 }
}

define i32 @function_f28c() local_unnamed_addr {
dec_label_pc_f28c:
  %v2_f298 = load i32, i32* @global_var_1a1d8.154, align 4
  %v2_f29c = load i32, i32* @global_var_1a1e4.156, align 4
  %v4_f2a8 = mul i32 %v2_f298, 2048
  %v5_f2a8 = xor i32 %v4_f2a8, %v2_f298
  %v4_f2ac = udiv i32 %v2_f29c, 524288
  %v5_f2ac = xor i32 %v4_f2ac, %v2_f29c
  %v2_f2b0 = load i32, i32* @global_var_1a1dc.158, align 4
  %v2_f2b4 = load i32, i32* @global_var_1a1e0.160, align 4
  %v2_f2b8 = xor i32 %v5_f2ac, %v5_f2a8
  %v4_f2bc = udiv i32 %v5_f2a8, 256
  %v5_f2bc = xor i32 %v2_f2b8, %v4_f2bc
  store i32 %v2_f2b0, i32* @global_var_1a1d8.154, align 4
  store i32 %v2_f2b4, i32* @global_var_1a1dc.158, align 4
  store i32 %v2_f29c, i32* @global_var_1a1e0.160, align 4
  store i32 %v5_f2bc, i32* @global_var_1a1e4.156, align 4
  ret i32 %v5_f2bc

; uselistorder directives
  uselistorder i32 %v2_f29c, { 2, 1, 0 }
  uselistorder i32 %v2_f298, { 1, 0 }
}

define i32 @function_f2e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2e4:
  %stack_var_-12 = alloca i32, align 4
  %v3_f2e4 = load i32, i32* @r4, align 4
  store i32 %v3_f2e4, i32* %stack_var_-12, align 4
  %v2_f2ec = call i32 @time(i32* null)
  store i32 %v2_f2ec, i32* @global_var_1a1d8.154, align 4
  %v1_f2f8 = call i32 @getpid()
  %v0_f300 = call i32 @getppid()
  %v2_f308 = xor i32 %v1_f2f8, %v0_f300
  store i32 %v2_f308, i32* @global_var_1a1dc.158, align 4
  %v1_f310 = call i32 @clock()
  %v2_f314 = load i32, i32* @global_var_1a1dc.158, align 4
  %v2_f320 = xor i32 %v2_f314, %v1_f310
  store i32 %v2_f320, i32* @global_var_1a1e4.156, align 4
  store i32 %v1_f310, i32* @global_var_1a1e0.160, align 4
  %v2_f32c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f32c, i32* @r4, align 4
  ret i32 %v1_f310

; uselistorder directives
  uselistorder i32 %v1_f310, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 1, 2, 0, 3 }
  uselistorder i32 ()* @getpid, { 0, 2, 1, 3 }
}

define i32 @function_f340(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f340:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f340 = load i32, i32* @r4, align 4
  store i32 %v3_f340, i32* %stack_var_-36, align 4
  %v6_f340 = load i32, i32* @r5, align 4
  %v9_f340 = load i32, i32* @r6, align 4
  %v12_f340 = load i32, i32* @r7, align 4
  %v28_f340 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f354 = call i32 @function_10f5c(i32 28)
  %v3_f360 = call i32 @function_10e78(i32 28, i32* null)
  %v1_f364 = inttoptr i32 %v3_f360 to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_f36c = call i8* @strcpy(i8* %tmp12, i8* %v1_f364)
  %v2_f370 = icmp eq i32 %arg2, 0
  br i1 %v2_f370, label %dec_label_pc_f3ec, label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %dec_label_pc_f340
  store i32 ptrtoint (i32* @global_var_1a1d8.154 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1dc.158 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1e0.160 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1a1e4.156 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_f38c

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge, %dec_label_pc_f378
  %v1_f3b0 = phi i32 [ %v1_f3b0.pre, %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge ], [ ptrtoint (i32* @global_var_1a1d8.154 to i32), %dec_label_pc_f378 ]
  %v2_f38c = load i32, i32* @global_var_1a1e4.156, align 4
  store i32 %v2_f38c, i32* %r2.global-to-local, align 4
  %v2_f390 = load i32, i32* @global_var_1a1d8.154, align 4
  %v4_f394 = udiv i32 %v2_f38c, 524288
  %v5_f394 = xor i32 %v4_f394, %v2_f38c
  %v4_f398 = mul i32 %v2_f390, 2048
  %v5_f398 = xor i32 %v4_f398, %v2_f390
  %v2_f39c = xor i32 %v5_f394, %v5_f398
  %v2_f3a0 = load i32, i32* @global_var_1a1dc.158, align 4
  %v2_f3a4 = load i32, i32* @global_var_1a1e0.160, align 4
  store i32 %v2_f3a4, i32* %ip.global-to-local, align 4
  %v4_f3a8 = udiv i32 %v5_f398, 256
  %v5_f3a8 = xor i32 %v2_f39c, %v4_f3a8
  store i32 %v5_f3a8, i32* @r4, align 4
  %v2_f3b0 = inttoptr i32 %v1_f3b0 to i32*
  store i32 %v2_f3a0, i32* %v2_f3b0, align 4
  %v0_f3b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_f3b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i32*
  store i32 %v0_f3b4, i32* %v2_f3b4, align 4
  %v0_f3b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f3b8 = load i32, i32* @r7, align 4
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  store i32 %v0_f3b8, i32* %v2_f3b8, align 4
  %v0_f3bc = load i32, i32* @r4, align 4
  %v1_f3bc = load i32, i32* @r6, align 4
  %v2_f3bc = inttoptr i32 %v1_f3bc to i32*
  store i32 %v0_f3bc, i32* %v2_f3bc, align 4
  %v2_f3c0 = call i32 @function_11528(i8* %tmp12)
  %v0_f3c8 = load i32, i32* @r4, align 4
  %v2_f3cc = urem i32 %v0_f3c8, %v2_f3c0
  %v2_f3d4 = add i32 %v2_f3cc, %v28_f340
  %v1_f3d8 = add i32 %v2_f3d4, -32
  %v2_f3d8 = inttoptr i32 %v1_f3d8 to i8*
  %v3_f3d8 = load i8, i8* %v2_f3d8, align 1
  %v2_f3dc = load i32, i32* @r5, align 4
  %v3_f3dc = load i32, i32* %fp.global-to-local, align 4
  %v4_f3dc = add i32 %v3_f3dc, %v2_f3dc
  %v5_f3dc = inttoptr i32 %v4_f3dc to i8*
  store i8 %v3_f3d8, i8* %v5_f3dc, align 1
  %v0_f3e0 = load i32, i32* @r5, align 4
  %v1_f3e0 = add i32 %v0_f3e0, 1
  store i32 %v1_f3e0, i32* @r5, align 4
  %v1_f3e4 = load i32, i32* %sb.global-to-local, align 4
  %v9_f3e4 = icmp eq i32 %v1_f3e0, %v1_f3e4
  br i1 %v9_f3e4, label %dec_label_pc_f3ec, label %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge

dec_label_pc_f38c.dec_label_pc_f38c_crit_edge:    ; preds = %dec_label_pc_f38c
  %v1_f3b0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f38c

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f38c, %dec_label_pc_f340
  %v1_f3f0 = call i32 @function_10ea4(i32 28)
  %v2_f3f8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f3f8, i32* @r4, align 4
  store i32 %v6_f340, i32* @r5, align 4
  store i32 %v9_f340, i32* @r6, align 4
  store i32 %v12_f340, i32* @r7, align 4
  ret i32 %v1_f3f0

; uselistorder directives
  uselistorder i32 %v2_f390, { 1, 0 }
  uselistorder i32 %v2_f38c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_f40c(i8* %arg1) local_unnamed_addr {
dec_label_pc_f40c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_f40c = load i32, i32* @r4, align 4
  store i32 %v3_f40c, i32* %stack_var_-36, align 4
  %v9_f40c = load i32, i32* @r6, align 4
  %v12_f40c = load i32, i32* @r7, align 4
  %v15_f40c = load i32, i32* @r8, align 4
  %v18_f40c = load i32, i32* @sb, align 4
  %v21_f40c = load i32, i32* @sl, align 4
  %v24_f40c = load i32, i32* @fp, align 4
  %v0_f410 = load i32, i32* @r1, align 4
  store i32 %v0_f410, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_f410, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_f40c
  store i32 %v3_f40c, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_f40c
  store i32 ptrtoint (i32* @global_var_1a1e4.156 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1e0.160 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1dc.158 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1d8.154 to i32), i32* %r8.global-to-local, align 4
  %v2_f42c = load i32, i32* @global_var_1a1e4.156, align 4
  store i32 %v2_f42c, i32* %lr.global-to-local, align 4
  %v2_f430 = load i32, i32* @global_var_1a1e0.160, align 4
  store i32 %v2_f430, i32* %r7.global-to-local, align 4
  %v2_f434 = load i32, i32* @global_var_1a1dc.158, align 4
  store i32 %v2_f434, i32* %r6.global-to-local, align 4
  %v2_f438 = load i32, i32* @global_var_1a1d8.154, align 4
  br label %dec_label_pc_f464

dec_label_pc_f440:                                ; preds = %dec_label_pc_f490
  %v3_f498 = sdiv i32 %v5_f47c, 256
  %v1_f440 = trunc i32 %v3_f498 to i8
  %v3_f440 = add i32 %v9_f484, 1
  %v4_f440 = inttoptr i32 %v3_f440 to i8*
  store i8 %v1_f440, i8* %v4_f440, align 1
  %v0_f444 = load i32, i32* %r3.global-to-local, align 4
  %v1_f444 = trunc i32 %v0_f444 to i8
  %v2_f444 = load i32, i32* %r5.global-to-local, align 4
  %v3_f444 = inttoptr i32 %v2_f444 to i8*
  store i8 %v1_f444, i8* %v3_f444, align 1
  %v0_f448 = load i32, i32* %r5.global-to-local, align 4
  %v1_f448 = add i32 %v0_f448, 2
  store i32 %v1_f448, i32* %r5.global-to-local, align 4
  %v0_f44c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f44c

dec_label_pc_f44c:                                ; preds = %.thread, %dec_label_pc_f440
  %v0_f44c = phi i32 [ %v9_f488, %.thread ], [ %v0_f44c.pre, %dec_label_pc_f440 ]
  %v2_f4407 = phi i32 [ %v12_f484, %.thread ], [ %v1_f448, %dec_label_pc_f440 ]
  %tmp22 = icmp slt i32 %v0_f44c, 1
  br i1 %tmp22, label %dec_label_pc_f4cc, label %dec_label_pc_f458

dec_label_pc_f458:                                ; preds = %dec_label_pc_f44c
  %v0_f450 = load i32, i32* %r6.global-to-local, align 4
  %v0_f458 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_f458, i32* %r6.global-to-local, align 4
  %v0_f45c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_f45c, i32* %r7.global-to-local, align 4
  %v0_f460 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f460, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f464

dec_label_pc_f464:                                ; preds = %bb21, %dec_label_pc_f458
  %v0_f4b4 = phi i32 [ %v2_f434, %bb21 ], [ %v0_f458, %dec_label_pc_f458 ]
  %v9_f484 = phi i32 [ %tmp, %bb21 ], [ %v2_f4407, %dec_label_pc_f458 ]
  %v0_f49c = phi i32 [ %v0_f410, %bb21 ], [ %v0_f44c, %dec_label_pc_f458 ]
  %v0_f4a8 = phi i32 [ %v2_f42c, %bb21 ], [ %v0_f460, %dec_label_pc_f458 ]
  %v0_f4a4 = phi i32 [ %v2_f438, %bb21 ], [ %v0_f450, %dec_label_pc_f458 ]
  %v4_f464 = mul i32 %v0_f4a4, 2048
  %v5_f464 = xor i32 %v4_f464, %v0_f4a4
  %v4_f468 = udiv i32 %v0_f4a8, 524288
  %v5_f468 = xor i32 %v4_f468, %v0_f4a8
  %v2_f46c = xor i32 %v5_f468, %v5_f464
  %v4_f47c = udiv i32 %v5_f464, 256
  %v5_f47c = xor i32 %v4_f47c, %v2_f46c
  store i32 %v5_f47c, i32* %r3.global-to-local, align 4
  %v7_f484 = icmp sgt i32 %v0_f49c, 3
  br i1 %v7_f484, label %.thread, label %dec_label_pc_f490

.thread:                                          ; preds = %dec_label_pc_f464
  %v10_f484 = inttoptr i32 %v9_f484 to i32*
  store i32 %v5_f47c, i32* %v10_f484, align 4
  %v11_f484 = load i32, i32* %r5.global-to-local, align 4
  %v12_f484 = add i32 %v11_f484, 4
  store i32 %v12_f484, i32* %r5.global-to-local, align 4
  %v8_f488 = load i32, i32* %r4.global-to-local, align 4
  %v9_f488 = add i32 %v8_f488, -4
  store i32 %v9_f488, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f44c

dec_label_pc_f490:                                ; preds = %dec_label_pc_f464
  store i32 %v5_f47c, i32* %r3.global-to-local, align 4
  %v7_f494 = icmp eq i32 %v0_f49c, 1
  %v1_f49c = add i32 %v0_f49c, -2
  store i32 %v1_f49c, i32* %r4.global-to-local, align 4
  br i1 %v7_f494, label %dec_label_pc_f4a4, label %dec_label_pc_f440

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_f490
  store i32 %v5_f47c, i32* %r3.global-to-local, align 4
  %v1_f4b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f4b4 = inttoptr i32 %v1_f4b4 to i32*
  store i32 %v0_f4b4, i32* %v2_f4b4, align 4
  %v0_f4b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_f4b8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i32*
  store i32 %v0_f4b8, i32* %v2_f4b8, align 4
  %v0_f4bc = load i32, i32* %lr.global-to-local, align 4
  %v1_f4bc = load i32, i32* %sb.global-to-local, align 4
  %v2_f4bc = inttoptr i32 %v1_f4bc to i32*
  store i32 %v0_f4bc, i32* %v2_f4bc, align 4
  %v0_f4c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f4c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_f4c0 = inttoptr i32 %v1_f4c0 to i32*
  store i32 %v0_f4c0, i32* %v2_f4c0, align 4
  %v0_f4c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f4c4 = trunc i32 %v0_f4c4 to i8
  %v2_f4c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_f4c4 = inttoptr i32 %v2_f4c4 to i8*
  store i8 %v1_f4c4, i8* %v3_f4c4, align 1
  %v2_f4c8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f4c8, i32* @r4, align 4
  store i32 %v9_f40c, i32* @r6, align 4
  store i32 %v12_f40c, i32* @r7, align 4
  store i32 %v15_f40c, i32* @r8, align 4
  store i32 %v18_f40c, i32* @sb, align 4
  store i32 %v21_f40c, i32* @sl, align 4
  store i32 %v24_f40c, i32* @fp, align 4
  ret i32 %v5_f464

dec_label_pc_f4cc:                                ; preds = %dec_label_pc_f44c
  %v0_f4cc = load i32, i32* %r3.global-to-local, align 4
  %v1_f4cc = load i32, i32* %fp.global-to-local, align 4
  %v2_f4cc = inttoptr i32 %v1_f4cc to i32*
  store i32 %v0_f4cc, i32* %v2_f4cc, align 4
  %v0_f4d0 = load i32, i32* %lr.global-to-local, align 4
  %v1_f4d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f4d0 = inttoptr i32 %v1_f4d0 to i32*
  store i32 %v0_f4d0, i32* %v2_f4d0, align 4
  %v0_f4d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_f4d4 = load i32, i32* %sl.global-to-local, align 4
  %v2_f4d4 = inttoptr i32 %v1_f4d4 to i32*
  store i32 %v0_f4d4, i32* %v2_f4d4, align 4
  %v0_f4d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_f4d8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i32*
  store i32 %v0_f4d8, i32* %v2_f4d8, align 4
  %v2_f4dc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f4dc, i32* @r4, align 4
  store i32 %v9_f40c, i32* @r6, align 4
  store i32 %v12_f40c, i32* @r7, align 4
  store i32 %v15_f40c, i32* @r8, align 4
  store i32 %v18_f40c, i32* @sb, align 4
  store i32 %v21_f40c, i32* @sl, align 4
  store i32 %v24_f40c, i32* @fp, align 4
  ret i32 %v5_f464

; uselistorder directives
  uselistorder i32 %v9_f488, { 1, 0 }
  uselistorder i32 %v12_f484, { 1, 0 }
  uselistorder i32 %v5_f47c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_f464, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f4a4, { 1, 0 }
  uselistorder i32 %v0_f4a8, { 1, 0 }
  uselistorder i32 %v0_f44c, { 1, 0 }
  uselistorder i32 %v24_f40c, { 1, 0 }
  uselistorder i32 %v21_f40c, { 1, 0 }
  uselistorder i32 %v18_f40c, { 1, 0 }
  uselistorder i32 %v15_f40c, { 1, 0 }
  uselistorder i32 %v12_f40c, { 1, 0 }
  uselistorder i32 %v9_f40c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1a1d8.154, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1a1d8.154 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1a1dc.158, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1a1e0.160, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1a1e4.156, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_f464, { 1, 0 }
}

define i32 @function_f4f0() local_unnamed_addr {
dec_label_pc_f4f0:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f4f0 = load i32, i32* @r4, align 4
  store i32 %v3_f4f0, i32* %stack_var_-16, align 4
  %v0_f4f4 = load i32, i32* @r0, align 4
  store i32 %v0_f4f4, i32* %r5.global-to-local, align 4
  %v1_f4f8 = add i32 %v0_f4f4, 4
  %v2_f4f8 = inttoptr i32 %v1_f4f8 to i32*
  %v3_f4f8 = load i32, i32* %v2_f4f8, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_f518 = icmp ne i32 %v3_f4f8, -1
  call void @__pseudo_cond_branch(i1 %v1_f518, i32 ptrtoint (i32* @global_var_8d4c.149 to i32))
  %v3_f528 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f528, i32* %r3.global-to-local, align 4
  %v2_f530 = icmp eq i32 %v3_f528, -1
  store i32 256, i32* @r1, align 4
  %v0_f538 = load i32, i32* %r5.global-to-local, align 4
  %v1_f538 = add i32 %v0_f538, 28
  store i32 %v1_f538, i32* @r0, align 4
  %v2_f53c = add i32 %v0_f538, 4
  %v3_f53c = inttoptr i32 %v2_f53c to i32*
  store i32 %v3_f528, i32* %v3_f53c, align 4
  br i1 %v2_f530, label %dec_label_pc_f4f0.dec_label_pc_f5b8_crit_edge, label %dec_label_pc_f544

dec_label_pc_f4f0.dec_label_pc_f5b8_crit_edge:    ; preds = %dec_label_pc_f4f0
  %v14_f5bc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f5b8

dec_label_pc_f544:                                ; preds = %dec_label_pc_f4f0
  %v0_f544 = load i32, i32* %r6.global-to-local, align 4
  %v1_f544 = load i32, i32* %r5.global-to-local, align 4
  %v2_f544 = add i32 %v1_f544, 24
  %v3_f544 = inttoptr i32 %v2_f544 to i32*
  store i32 %v0_f544, i32* %v3_f544, align 4
  %v0_f548 = call i32 @function_115c8()
  %v0_f54c = load i32, i32* %r5.global-to-local, align 4
  %v1_f54c = add i32 %v0_f54c, 4
  %v2_f54c = inttoptr i32 %v1_f54c to i32*
  %v3_f54c = load i32, i32* %v2_f54c, align 4
  %v2_f55c = call i32 (i32, i32, ...) @fcntl(i32 %v3_f54c, i32 3)
  %v2_f56c = call i32 (i32, i32, ...) @fcntl(i32 %v3_f54c, i32 4)
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %r3.global-to-local, align 4
  %v0_f574 = load i32, i32* %r5.global-to-local, align 4
  %v2_f578 = load i32, i32* @global_var_1a21c.174, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f584 = add i32 %v0_f574, 8
  %v3_f584 = inttoptr i32 %v2_f584 to i32*
  store i32 %v2_f578, i32* %v3_f584, align 4
  %v0_f588 = load i32, i32* %r3.global-to-local, align 4
  %v1_f588 = load i32, i32* %r5.global-to-local, align 4
  %v2_f588 = add i32 %v1_f588, 12
  %v3_f588 = inttoptr i32 %v2_f588 to i32*
  store i32 %v0_f588, i32* %v3_f588, align 4
  %v0_f590 = load i32, i32* %r5.global-to-local, align 4
  %v1_f590 = add i32 %v0_f590, 4
  %v2_f590 = inttoptr i32 %v1_f590 to i32*
  %v3_f590 = load i32, i32* %v2_f590, align 4
  %v0_f594 = load i32, i32* %r3.global-to-local, align 4
  %v2_f594 = mul i32 %v0_f594, 2
  store i32 %v2_f594, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_f594, i32* %stack_var_-32, align 4
  %v5_f5b4 = call i32 @connect(i32 %v3_f590, %sockaddr* %tmp13, i32 16)
  br label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f4f0.dec_label_pc_f5b8_crit_edge, %dec_label_pc_f544
  %v14_f5bc = phi i32 [ %v14_f5bc.pre, %dec_label_pc_f4f0.dec_label_pc_f5b8_crit_edge ], [ %v5_f5b4, %dec_label_pc_f544 ]
  %v2_f5bc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f5bc, i32* @r4, align 4
  ret i32 %v14_f5bc

; uselistorder directives
  uselistorder i32 %v2_f594, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_115c8, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f5b8, { 1, 0 }
}

define i32 @function_f5c4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f5c4:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1a1e8.176 to i32), i32* %r8.global-to-local, align 4
  %v2_f5cc = load i32, i32* @global_var_1a1e8.176, align 4
  store i32 ptrtoint (i32* @global_var_1a214.178 to i32), i32* %sb.global-to-local, align 4
  %v3_f5d8 = mul i32 %v2_f5cc, 16
  store i32 %v3_f5d8, i32* %r3.global-to-local, align 4
  %v3_f5e0 = urem i32 %arg3, 65536
  store i32 %v3_f5e0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_f5ec = load i32, i32* @global_var_1a214.178, align 4
  %v1_f5f0 = add i32 %v3_f5d8, 16
  store i32 %v1_f5f0, i32* %r1.global-to-local, align 4
  store i32 %v3_f5e0, i32* %stack_var_-44, align 4
  %v15_f5f8 = inttoptr i32 %v2_f5ec to i32*
  %v16_f5f8 = call i32* @realloc(i32* %v15_f5f8, i32 %v1_f5f0)
  %v18_f5f8 = ptrtoint i32* %v16_f5f8 to i32
  store i32 %v18_f5f8, i32* %sl.global-to-local, align 4
  %v0_f600 = load i32, i32* %r5.global-to-local, align 4
  %v1_f604 = load i32, i32* %sb.global-to-local, align 4
  %v2_f604 = inttoptr i32 %v1_f604 to i32*
  store i32 %v18_f5f8, i32* %v2_f604, align 4
  %v2_f608 = load i32, i32* @global_var_1a1e8.176, align 4
  store i32 %v2_f608, i32* %fp.global-to-local, align 4
  %v1_f60c = inttoptr i32 %v0_f600 to i8*
  %v2_f60c = call i32 @function_11528(i8* %v1_f60c)
  %sext = mul i32 %v2_f60c, 16777216
  %v1_f610 = sdiv i32 %sext, 16777216
  %v2_f610 = add nsw i32 %v1_f610, 1
  store i32 %v1_f610, i32* %r7.global-to-local, align 4
  %v1_f61c = call i32* @malloc(i32 %v2_f610)
  %v3_f61c = ptrtoint i32* %v1_f61c to i32
  %v0_f620 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f620, i32* %r1.global-to-local, align 4
  store i32 %v2_f610, i32* %r2.global-to-local, align 4
  store i32 %v3_f61c, i32* %r6.global-to-local, align 4
  %v3_f62c = call i32 @function_115a4(i32 %v3_f61c, i32 %v0_f620, i32 %v2_f610)
  %v0_f630 = load i32, i32* %r7.global-to-local, align 4
  %tmp21 = icmp slt i32 %v0_f630, 1
  %extract.t6 = trunc i32 %v0_f630 to i8
  br i1 %tmp21, label %dec_label_pc_f654, label %dec_label_pc_f638

dec_label_pc_f638:                                ; preds = %dec_label_pc_f5c4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f63c

dec_label_pc_f63c:                                ; preds = %dec_label_pc_f63c, %dec_label_pc_f638
  %v2_f644 = phi i32 [ %v1_f648, %dec_label_pc_f63c ], [ 0, %dec_label_pc_f638 ]
  %v1_f63c = load i32, i32* %r6.global-to-local, align 4
  %v2_f63c = add i32 %v1_f63c, %v2_f644
  %v3_f63c = inttoptr i32 %v2_f63c to i8*
  %v4_f63c = load i8, i8* %v3_f63c, align 1
  %v6_f63c = zext i8 %v4_f63c to i32
  %v1_f640 = xor i32 %v6_f63c, 84
  store i32 %v1_f640, i32* %r3.global-to-local, align 4
  %v1_f644 = trunc i32 %v1_f640 to i8
  store i8 %v1_f644, i8* %v3_f63c, align 1
  %v0_f648 = load i32, i32* %r2.global-to-local, align 4
  %v1_f648 = add i32 %v0_f648, 1
  store i32 %v1_f648, i32* %r2.global-to-local, align 4
  %v0_f64c = load i32, i32* %r7.global-to-local, align 4
  %v9_f64c = icmp eq i32 %v0_f64c, %v1_f648
  br i1 %v9_f64c, label %dec_label_pc_f654.loopexit, label %dec_label_pc_f63c

dec_label_pc_f654.loopexit:                       ; preds = %dec_label_pc_f63c
  %extract.t = trunc i32 %v1_f648 to i8
  br label %dec_label_pc_f654

dec_label_pc_f654:                                ; preds = %dec_label_pc_f654.loopexit, %dec_label_pc_f5c4
  %v0_f664.off0 = phi i8 [ %extract.t, %dec_label_pc_f654.loopexit ], [ %extract.t6, %dec_label_pc_f5c4 ]
  %v2_f654 = load i32, i32* @global_var_1a1e8.176, align 4
  %v2_f658 = load i32, i32* @global_var_1a214.178, align 4
  store i32 %v2_f658, i32* %r2.global-to-local, align 4
  %v3_f65c = mul i32 %v2_f654, 16
  %v2_f660 = add i32 %v2_f658, %v3_f65c
  store i32 %v2_f660, i32* %r3.global-to-local, align 4
  %v3_f664 = add i32 %v2_f660, 12
  %v4_f664 = inttoptr i32 %v3_f664 to i8*
  store i8 %v0_f664.off0, i8* %v4_f664, align 1
  %v0_f668 = load i32, i32* %r6.global-to-local, align 4
  %v1_f668 = load i32, i32* %sl.global-to-local, align 4
  %v2_f668 = load i32, i32* %fp.global-to-local, align 4
  %v5_f668 = mul i32 %v2_f668, 16
  %v6_f668 = add i32 %v5_f668, %v1_f668
  %v7_f668 = inttoptr i32 %v6_f668 to i32*
  store i32 %v0_f668, i32* %v7_f668, align 4
  %v2_f670 = load i32, i32* @global_var_1a1e8.176, align 4
  store i32 %v2_f670, i32* %r7.global-to-local, align 4
  %v2_f674 = load i32, i32* @global_var_1a214.178, align 4
  store i32 %v2_f674, i32* %sl.global-to-local, align 4
  %v1_f678 = inttoptr i32 %arg2 to i8*
  %v2_f678 = call i32 @function_11528(i8* %v1_f678)
  %sext1 = mul i32 %v2_f678, 16777216
  %v1_f67c = sdiv i32 %sext1, 16777216
  %v2_f67c = add nsw i32 %v1_f67c, 1
  store i32 %v1_f67c, i32* %r5.global-to-local, align 4
  %v1_f688 = call i32* @malloc(i32 %v2_f67c)
  %v3_f688 = ptrtoint i32* %v1_f688 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_f67c, i32* %r2.global-to-local, align 4
  store i32 %v3_f688, i32* %r6.global-to-local, align 4
  %v3_f698 = call i32 @function_115a4(i32 %v3_f688, i32 %arg2, i32 %v2_f67c)
  %v0_f69c = load i32, i32* %r5.global-to-local, align 4
  %tmp22 = icmp slt i32 %v0_f69c, 1
  %extract.t8 = trunc i32 %v0_f69c to i8
  br i1 %tmp22, label %dec_label_pc_f6c0, label %dec_label_pc_f6a4

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f654
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f6a8

dec_label_pc_f6a8:                                ; preds = %dec_label_pc_f6a8, %dec_label_pc_f6a4
  %v2_f6b0 = phi i32 [ %v1_f6b4, %dec_label_pc_f6a8 ], [ 0, %dec_label_pc_f6a4 ]
  %v1_f6a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f6a8 = add i32 %v1_f6a8, %v2_f6b0
  %v3_f6a8 = inttoptr i32 %v2_f6a8 to i8*
  %v4_f6a8 = load i8, i8* %v3_f6a8, align 1
  %v6_f6a8 = zext i8 %v4_f6a8 to i32
  %v1_f6ac = xor i32 %v6_f6a8, 84
  store i32 %v1_f6ac, i32* %r3.global-to-local, align 4
  %v1_f6b0 = trunc i32 %v1_f6ac to i8
  store i8 %v1_f6b0, i8* %v3_f6a8, align 1
  %v0_f6b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6b4 = add i32 %v0_f6b4, 1
  store i32 %v1_f6b4, i32* %r2.global-to-local, align 4
  %v0_f6b8 = load i32, i32* %r5.global-to-local, align 4
  %v9_f6b8 = icmp eq i32 %v0_f6b8, %v1_f6b4
  br i1 %v9_f6b8, label %dec_label_pc_f6c0.loopexit, label %dec_label_pc_f6a8

dec_label_pc_f6c0.loopexit:                       ; preds = %dec_label_pc_f6a8
  %extract.t7 = trunc i32 %v1_f6b4 to i8
  br label %dec_label_pc_f6c0

dec_label_pc_f6c0:                                ; preds = %dec_label_pc_f6c0.loopexit, %dec_label_pc_f654
  %v0_f6d0.off0 = phi i8 [ %extract.t7, %dec_label_pc_f6c0.loopexit ], [ %extract.t8, %dec_label_pc_f654 ]
  %v2_f6c0 = load i32, i32* @global_var_1a1e8.176, align 4
  %v2_f6c4 = load i32, i32* @global_var_1a214.178, align 4
  %v3_f6c8 = mul i32 %v2_f6c0, 16
  %v2_f6cc = or i32 %v3_f6c8, 13
  %v3_f6d0 = add i32 %v2_f6cc, %v2_f6c4
  %v4_f6d0 = inttoptr i32 %v3_f6d0 to i8*
  store i8 %v0_f6d0.off0, i8* %v4_f6d0, align 1
  %v2_f6d8 = load i32, i32* @global_var_1a1e8.176, align 4
  store i32 %v2_f6d8, i32* %lr.global-to-local, align 4
  %v4_f6dc = load i8, i8* @global_var_1a219.181, align 1
  %v5_f6dc = zext i8 %v4_f6dc to i32
  %v3_f6e0 = load i8, i8* bitcast (i8** @global_var_1a218.180 to i8*), align 4
  %v4_f6e0 = zext i8 %v3_f6e0 to i32
  %v2_f6e4 = load i32, i32* @global_var_1a214.178, align 4
  %v4_f6e8 = mul nuw nsw i32 %v5_f6dc, 256
  %v5_f6e8 = or i32 %v4_f6e0, %v4_f6e8
  store i32 %v5_f6e8, i32* %r2.global-to-local, align 4
  %v3_f6ec = mul i32 %v2_f6d8, 16
  %v2_f6f0 = add i32 %v2_f6e4, %v3_f6ec
  store i32 %v2_f6f0, i32* %r1.global-to-local, align 4
  %v3_f6f8 = add i32 %v2_f6f0, 9
  %v4_f6f8 = inttoptr i32 %v3_f6f8 to i8*
  store i8 %v4_f6dc, i8* %v4_f6f8, align 1
  %v0_f6fc = load i32, i32* %r2.global-to-local, align 4
  %v1_f6fc = trunc i32 %v0_f6fc to i8
  %v2_f6fc = load i32, i32* %r1.global-to-local, align 4
  %v3_f6fc = add i32 %v2_f6fc, 8
  %v4_f6fc = inttoptr i32 %v3_f6fc to i8*
  store i8 %v1_f6fc, i8* %v4_f6fc, align 1
  %v4_f700 = load i8, i8* @global_var_1a219.181, align 1
  %v5_f700 = zext i8 %v4_f700 to i32
  %v3_f704 = load i8, i8* bitcast (i8** @global_var_1a218.180 to i8*), align 4
  %v4_f704 = zext i8 %v3_f704 to i32
  %v4_f708 = mul nuw nsw i32 %v5_f700, 256
  %v5_f708 = or i32 %v4_f704, %v4_f708
  %v2_f70c = load i32, i32* %stack_var_-44, align 4
  %v2_f710 = add i32 %v5_f708, %v2_f70c
  store i32 %v2_f710, i32* %r3.global-to-local, align 4
  %v3_f7149 = udiv i32 %v2_f710, 256
  %v1_f718 = trunc i32 %v3_f7149 to i8
  %v2_f718 = load i32, i32* %r1.global-to-local, align 4
  %v3_f718 = add i32 %v2_f718, 11
  %v4_f718 = inttoptr i32 %v3_f718 to i8*
  store i8 %v1_f718, i8* %v4_f718, align 1
  %v0_f71c = load i32, i32* %r3.global-to-local, align 4
  %v1_f71c = trunc i32 %v0_f71c to i8
  %v2_f71c = load i32, i32* %r1.global-to-local, align 4
  %v3_f71c = add i32 %v2_f71c, 10
  %v4_f71c = inttoptr i32 %v3_f71c to i8*
  store i8 %v1_f71c, i8* %v4_f71c, align 1
  %v4_f720 = load i8, i8* @global_var_1a219.181, align 1
  %v5_f720 = zext i8 %v4_f720 to i32
  %v3_f724 = load i8, i8* bitcast (i8** @global_var_1a218.180 to i8*), align 4
  %v4_f724 = zext i8 %v3_f724 to i32
  %v4_f728 = mul nuw nsw i32 %v5_f720, 256
  %v5_f728 = or i32 %v4_f724, %v4_f728
  %v2_f72c = load i32, i32* %stack_var_-44, align 4
  %v2_f730 = add i32 %v5_f728, %v2_f72c
  store i32 %v2_f730, i32* %r2.global-to-local, align 4
  %v0_f734 = load i32, i32* %r7.global-to-local, align 4
  %v3_f734 = mul i32 %v0_f734, 16
  %v1_f738 = load i32, i32* %sl.global-to-local, align 4
  %v2_f738 = add i32 %v1_f738, %v3_f734
  store i32 %v2_f738, i32* %r3.global-to-local, align 4
  %v0_f73c = load i32, i32* %lr.global-to-local, align 4
  %v1_f73c = add i32 %v0_f73c, 1
  store i32 %v1_f73c, i32* %lr.global-to-local, align 4
  %v3_f740 = sdiv i32 %v2_f730, 256
  store i32 %v3_f740, i32* %r1.global-to-local, align 4
  %v0_f744 = load i32, i32* %r6.global-to-local, align 4
  %v2_f744 = add i32 %v2_f738, 4
  %v3_f744 = inttoptr i32 %v2_f744 to i32*
  store i32 %v0_f744, i32* %v3_f744, align 4
  %v0_f748 = load i32, i32* %lr.global-to-local, align 4
  %v1_f748 = load i32, i32* %r8.global-to-local, align 4
  %v2_f748 = inttoptr i32 %v1_f748 to i32*
  store i32 %v0_f748, i32* %v2_f748, align 4
  %v0_f74c = load i32, i32* %r1.global-to-local, align 4
  %v1_f74c = trunc i32 %v0_f74c to i8
  store i8 %v1_f74c, i8* @global_var_1a219.181, align 1
  %v0_f750 = load i32, i32* %r2.global-to-local, align 4
  %v1_f750 = trunc i32 %v0_f750 to i8
  store i8 %v1_f750, i8* bitcast (i8** @global_var_1a218.180 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1a218.180 to i32)

; uselistorder directives
  uselistorder i32 %v1_f6b4, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f688, { 1, 0 }
  uselistorder i32 %v2_f67c, { 1, 0, 2 }
  uselistorder i32 %v1_f648, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f61c, { 1, 0 }
  uselistorder i32 %v2_f610, { 1, 0, 2 }
  uselistorder i32 %v3_f5e0, { 1, 0 }
  uselistorder i32 %v3_f5d8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_11528, { 0, 1, 19, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23 }
  uselistorder i32* (i32*, i32)* @realloc, { 9, 11, 3, 8, 10, 4, 0, 6, 5, 7, 1, 2, 12 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f768(i32 %arg1) local_unnamed_addr {
dec_label_pc_f768:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f768 = load i32, i32* @r4, align 4
  store i32 %v3_f768, i32* %stack_var_-36, align 4
  %v15_f768 = load i32, i32* @r8, align 4
  %v18_f768 = load i32, i32* @sb, align 4
  %v21_f768 = load i32, i32* @sl, align 4
  %v0_f774 = call i32 @fork()
  store i32 %v0_f774, i32* %r0.global-to-local, align 4
  %v2_f778 = icmp eq i32 %v0_f774, -1
  %. = zext i1 %v2_f778 to i32
  %tmp293 = icmp slt i32 %v0_f774, 1
  %storemerge252 = select i1 %tmp293, i32 %., i32 1
  store i32 %storemerge252, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1a244.183 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f794 = icmp eq i32 %storemerge252, 0
  store i1 %v2_f794, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f774, i32* @global_var_1a244.183, align 4
  br i1 %v2_f794, label %dec_label_pc_f7ac, label %dec_label_pc_f7a0

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f768
  store i32 %v3_f768, i32* %r4.global-to-local, align 4
  store i32 %v15_f768, i32* %r8.global-to-local, align 4
  store i32 %v18_f768, i32* @sb, align 4
  store i32 %v21_f768, i32* %sl.global-to-local, align 4
  ret i32 %v0_f774

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f768
  %v0_f7ac = call i32 @function_117e0()
  store i32 %v0_f7ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a220.101 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f7ac, i32* @global_var_1a220.101, align 4
  %v1_f7b8 = call i32 @function_f2e4(i32 %v0_f7ac)
  %v0_f7bc = load i32, i32* @r4, align 4
  store i32 %v0_f7bc, i32* %r0.global-to-local, align 4
  %v1_f7c0 = inttoptr i32 %v0_f7bc to i32*
  %v2_f7c0 = call i32 @time(i32* %v1_f7c0)
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f7c0, i32* @global_var_1a21c.174, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f7d4 = call i32* @calloc(i32 256, i32 288)
  %v4_f7d4 = ptrtoint i32* %v2_f7d4 to i32
  store i32 %v4_f7d4, i32* %lr.global-to-local, align 4
  %v0_f7e0 = load i32, i32* @r4, align 4
  store i32 %v0_f7e0, i32* %stack_var_-52, align 4
  store i32 %v4_f7d4, i32* @global_var_1a23c.187, align 4
  store i32 %v0_f7e0, i32* %r3.global-to-local, align 4
  store i32 %v0_f7e0, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_f7e0, i32* %ip.global-to-local, align 4
  %v1_f7f8 = add i32 %v4_f7d4, 4
  store i32 %v1_f7f8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f7fc

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge, %dec_label_pc_f7ac
  %v0_f814 = phi i32 [ %v0_f814.pre, %dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge ], [ %v0_f7e0, %dec_label_pc_f7ac ]
  %v0_f804 = phi i32 [ %v0_f81c, %dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge ], [ %v0_f7e0, %dec_label_pc_f7ac ]
  %v1_f80c = phi i32 [ %v1_f80c.pre, %dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge ], [ %v4_f7d4, %dec_label_pc_f7ac ]
  %v3_f7fc = mul i32 %v0_f804, 256
  store i32 %v3_f7fc, i32* %r2.global-to-local, align 4
  %v1_f804 = add i32 %v0_f804, 1
  store i32 %v1_f804, i32* %ip.global-to-local, align 4
  %v2_f808 = mul i32 %v0_f804, 288
  %v2_f80c = add i32 %v1_f80c, 12
  %v2_f814 = add i32 %v2_f80c, %v2_f808
  %v3_f814 = inttoptr i32 %v2_f814 to i32*
  store i32 %v0_f814, i32* %v3_f814, align 4
  %v0_f818 = load i32, i32* %r0.global-to-local, align 4
  %v1_f818 = load i32, i32* %r1.global-to-local, align 4
  %v2_f818 = inttoptr i32 %v1_f818 to i32*
  store i32 %v0_f818, i32* %v2_f818, align 4
  %v3_f818 = load i32, i32* %r1.global-to-local, align 4
  %v4_f818 = add i32 %v3_f818, 288
  store i32 %v4_f818, i32* %r1.global-to-local, align 4
  %v0_f81c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f81c, i32* %r3.global-to-local, align 4
  %v7_f820 = icmp sgt i32 %v1_f804, 255
  br i1 %v7_f820, label %dec_label_pc_f824, label %dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge

dec_label_pc_f7fc.dec_label_pc_f7fc_crit_edge:    ; preds = %dec_label_pc_f7fc
  %v1_f80c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_f814.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f7fc

dec_label_pc_f824:                                ; preds = %dec_label_pc_f7fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f81c, i32* %stack_var_-52, align 4
  %v3_f834 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_f834, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a240.189 to i32), i32* %lr.global-to-local, align 4
  %v2_f83c = icmp eq i32 %v3_f834, -1
  store i1 %v2_f83c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f83c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f834, i32* %r4.global-to-local, align 4
  store i32 %v3_f834, i32* @global_var_1a240.189, align 4
  br i1 %v2_f83c, label %dec_label_pc_1000c, label %dec_label_pc_f84c

dec_label_pc_f84c:                                ; preds = %dec_label_pc_f824
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f850 = load i32, i32* @r5, align 4
  store i32 %v0_f850, i32* %r2.global-to-local, align 4
  %v2_f854 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f834, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f85c = or i32 %v2_f854, 2048
  store i32 %v1_f85c, i32* %r2.global-to-local, align 4
  %v0_f860 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f860, i32* %r0.global-to-local, align 4
  %v2_f864 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f860, i32 4)
  %v2_f870 = load i32, i32* @global_var_1a240.189, align 4
  store i32 %v2_f870, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_f878 = load i32, i32* @r5, align 4
  store i32 %v0_f878, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f880 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f880, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v7_f890 = call i32 @setsockopt(i32 %v2_f870, i32 %v0_f878, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v7_f890, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f894 = icmp eq i32 %v7_f890, 0
  store i1 %v2_f894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f894, label %dec_label_pc_f89c, label %dec_label_pc_100fc

dec_label_pc_f89c:                                ; preds = %dec_label_pc_f84c, %dec_label_pc_f89c
  %v0_f89c = call i32 @function_f28c()
  %v3_f8a0 = mul i32 %v0_f89c, 65536
  store i32 %v3_f8a0, i32* %r0.global-to-local, align 4
  %v1_f8ac = mul i32 %v0_f89c, 256
  %v3_f8b0 = and i32 %v1_f8ac, 65280
  %tmp296 = udiv i32 %v0_f89c, 256
  %v4_f8b4 = urem i32 %tmp296, 256
  %v5_f8b4 = or i32 %v4_f8b4, %v3_f8b0
  store i32 %v5_f8b4, i32* %r3.global-to-local, align 4
  %v2_f8b8 = icmp ugt i32 %v5_f8b4, 1023
  store i1 %v2_f8b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b8 = icmp eq i32 %v5_f8b4, 1024
  store i1 %v7_f8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_f8bc = icmp ult i32 %v5_f8b4, 1022
  br i1 %v3_f8bc, label %dec_label_pc_f89c, label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %dec_label_pc_f89c
  %v5_f8a8.le = trunc i32 %v0_f89c to i8
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1a1ec.191 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1a1ef.192 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a1ee.193 to i8*), align 4
  %v0_f8f4 = call i32 @function_f28c()
  %v1_f8f4 = trunc i32 %v0_f8f4 to i8
  store i32 %v0_f8f4, i32* %r0.global-to-local, align 4
  %v3_f8fc = load i8, i8* @global_var_1a20c.196, align 1
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %lr.global-to-local, align 4
  %v4_f904251 = udiv i32 %v0_f8f4, 256
  %v1_f908 = trunc i32 %v4_f904251 to i8
  store i8 %v1_f908, i8* bitcast (i32* @global_var_1a1f1.197 to i8*), align 4
  %v4_f90c = sext i8 %v5_f8a8.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1a1f5.198 to i8*), align 4
  %tmp = urem i8 %v3_f8fc, 16
  %v1_f918 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %r2.global-to-local, align 4
  %v1_f920 = and i32 %v4_f90c, 128
  %v2_f920 = icmp ne i32 %v1_f920, 0
  store i1 %v2_f920, i1* %cpsr_c.global-to-local, align 1
  %v3_f920 = sdiv i32 %v4_f90c, 256
  store i32 %v3_f920, i32* %ip.global-to-local, align 4
  %v1_f924 = or i32 %v1_f918, 80
  store i32 %v1_f924, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1a1f4.199 to i8*), align 4
  %v1_f930 = trunc i32 %v1_f924 to i8
  store i8 %v1_f930, i8* @global_var_1a20c.196, align 1
  store i8 23, i8* bitcast (i32* @global_var_1a203.200 to i8*), align 4
  store i32 %v4_f90c, i32* %r3.global-to-local, align 4
  %v1_f940 = trunc i32 %v3_f920 to i8
  store i8 %v1_f940, i8* bitcast (i32* @global_var_1a201.201 to i8*), align 4
  store i8 %v1_f8f4, i8* bitcast (i32* @global_var_1a1f0.202 to i8*), align 4
  store i8 %v5_f8a8.le, i8* bitcast (i32* @global_var_1a200.195 to i8*), align 4
  %v0_f94c = load i32, i32* @r5, align 4
  %v1_f94c = trunc i32 %v0_f94c to i8
  store i8 %v1_f94c, i8* bitcast (i32* @global_var_1a202.203 to i8*), align 4
  %v0_f950 = call i32 @function_f28c()
  %v1_f950 = trunc i32 %v0_f950 to i8
  %v3_f958 = load i8, i8* @global_var_1a20d.204, align 1
  %v4_f958 = zext i8 %v3_f958 to i32
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %lr.global-to-local, align 4
  %v2_f960 = and i32 %v0_f950, 128
  %v3_f960 = icmp ne i32 %v2_f960, 0
  store i1 %v3_f960, i1* %cpsr_c.global-to-local, align 1
  %v4_f960 = sdiv i32 %v0_f950, 256
  store i32 %v4_f960, i32* %ip.global-to-local, align 4
  %v1_f964 = or i32 %v4_f958, 2
  store i32 %v1_f964, i32* %r3.global-to-local, align 4
  %v1_f96c = trunc i32 %v4_f960 to i8
  store i8 %v1_f96c, i8* bitcast (i32* @global_var_1a20f.205 to i8*), align 4
  %v1_f970 = trunc i32 %v1_f964 to i8
  store i8 %v1_f970, i8* @global_var_1a20d.204, align 1
  store i8 %v1_f950, i8* bitcast (i32* @global_var_1a20e.206 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e60.210 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f984 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint (i32* @global_var_11e60.210 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_11dd8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f994 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([5 x i8]* @global_var_11dd8.212 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_11de0.214 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f9a4 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([9 x i8]* @global_var_11de0.214 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_11dec.216 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_11dec.216 to i32), i32* %r1.global-to-local, align 4
  %v5_f9b4 = call i32 @function_f5c4(i32 ptrtoint ([7 x i8]* @global_var_11dec.216 to i32), i32 ptrtoint ([7 x i8]* @global_var_11dec.216 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e60.210 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f9c4 = call i32 @function_f5c4(i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32 ptrtoint (i32* @global_var_11e60.210 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_11dfc.220 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f9d4 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([9 x i8]* @global_var_11dfc.220 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_11e08.222 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11e08.222 to i32), i32* %r1.global-to-local, align 4
  %v5_f9e4 = call i32 @function_f5c4(i32 ptrtoint ([6 x i8]* @global_var_11e08.222 to i32), i32 ptrtoint ([6 x i8]* @global_var_11e08.222 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11e10.224 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f9f4 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([6 x i8]* @global_var_11e10.224 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_11e18.226 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_11e18.226 to i32), i32* %r1.global-to-local, align 4
  %v5_fa04 = call i32 @function_f5c4(i32 ptrtoint ([8 x i8]* @global_var_11e18.226 to i32), i32 ptrtoint ([8 x i8]* @global_var_11e18.226 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fa14 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e20.228 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_fa24 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint (i32* @global_var_11e20.228 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11e30.230 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fa34 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), i32 ptrtoint ([6 x i8]* @global_var_11e30.230 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32* %r1.global-to-local, align 4
  %v5_fa44 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11e30.230 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fa54 = call i32 @function_f5c4(i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), i32 ptrtoint ([6 x i8]* @global_var_11e30.230 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e40.234 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fa64 = call i32 @function_f5c4(i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32 ptrtoint (i32* @global_var_11e40.234 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e4c.236 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fa74 = call i32 @function_f5c4(i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), i32 ptrtoint (i32* @global_var_11e4c.236 to i32), i32 15)
  %v2_fa7c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_fa7c, i32* %r0.global-to-local, align 4
  %v2_fa80 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_fa80, i32* %r1.global-to-local, align 4
  %tmp297 = bitcast i32* %stack_var_-1842 to i8*
  %v1_fe20 = add i32 %v2_fa7c, 16
  %v2_fe20 = inttoptr i32 %v1_fe20 to i32*
  %v1_fe44 = or i32 %v2_fa80, 1
  %v2_fe44 = inttoptr i32 %v1_fe44 to i8*
  %v1_fe68 = or i32 %v2_fa80, 2
  %v2_fe68 = inttoptr i32 %v1_fe68 to i8*
  %v1_fe6c = or i32 %v2_fa80, 3
  %v2_fe6c = inttoptr i32 %v1_fe6c to i8*
  %v1_fe84 = add i32 %v2_fa80, 13
  %v2_fe84 = inttoptr i32 %v1_fe84 to i8*
  %v1_fe30 = add i32 %v2_fa7c, 9
  %v2_fe30 = inttoptr i32 %v1_fe30 to i8*
  %v1_fea8 = add i32 %v2_fa80, 8
  %v2_fea8 = inttoptr i32 %v1_fea8 to i32*
  %v1_fee8 = add i32 %v2_fa7c, 12
  %v2_fee8 = inttoptr i32 %v1_fee8 to i32*
  %v2_1011c = ptrtoint i32* %stack_var_-36 to i32
  %v2_101a0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_101a4 = ptrtoint i32* %stack_var_-348 to i32
  %tmp340 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_101ac = ptrtoint i32* %stack_var_-64 to i32
  %v2_101b0 = ptrtoint i32* %stack_var_-220 to i32
  %tmp341 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp343 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_10b5c = ptrtoint i32* %stack_var_-41 to i32
  %v2_10b6c = ptrtoint i32* %stack_var_-73 to i32
  %v2_10348 = ptrtoint i32* %stack_var_-56 to i32
  %v2_10840 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fd94 = ptrtoint i32* %stack_var_-92 to i32
  %tmp298 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_fa8c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_1020c, %dec_label_pc_f8c0
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %r2.global-to-local, align 4
  %v2_fa90 = load i32, i32* @global_var_1a21c.174, align 4
  store i32 %v2_fa90, i32* %r8.global-to-local, align 4
  %v0_fa94 = load i32, i32* @fp, align 4
  %v3_fa94 = icmp uge i32 %v0_fa94, %v2_fa90
  store i1 %v3_fa94, i1* %cpsr_c.global-to-local, align 1
  %v9_fa94 = icmp eq i32 %v0_fa94, %v2_fa90
  store i1 %v9_fa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fa94, label %dec_label_pc_fdc0, label %dec_label_pc_fa9c

dec_label_pc_fa9c:                                ; preds = %dec_label_pc_fa8c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %.thread68.dec_label_pc_faa8_crit_edge, %dec_label_pc_fa9c
  %v0_faa8 = phi i32 [ %v0_faa8.pre, %.thread68.dec_label_pc_faa8_crit_edge ], [ 0, %dec_label_pc_fa9c ]
  store i32 %v0_faa8, i32* %stack_var_-92, align 4
  %v0_fab8 = call i32 @function_f28c()
  %v1_fab8 = trunc i32 %v0_fab8 to i8
  store i32 %v0_fab8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a220.101 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %lr.global-to-local, align 4
  %v2_fac4 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_fac4, i32* %r2.global-to-local, align 4
  %v2_fac8 = and i32 %v0_fab8, 128
  %v3_fac8 = icmp ne i32 %v2_fac8, 0
  store i1 %v3_fac8, i1* %cpsr_c.global-to-local, align 1
  %v4_fac8 = sdiv i32 %v0_fab8, 256
  store i32 %v4_fac8, i32* %r3.global-to-local, align 4
  %v1_facc = trunc i32 %v4_fac8 to i8
  store i8 %v1_facc, i8* bitcast (i32* @global_var_1a1f1.197 to i8*), align 4
  store i32 %v2_fac4, i32* @global_var_1a1f8.237, align 4
  store i8 %v1_fab8, i8* bitcast (i32* @global_var_1a1f0.202 to i8*), align 4
  br label %dec_label_pc_fad8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_fc30, %dec_label_pc_fb08, %dec_label_pc_fc64, %dec_label_pc_fc58, %dec_label_pc_fc4c, %dec_label_pc_fc40, %.thread53, %.thread37, %.thread33, %.thread29, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %dec_label_pc_fba4, %dec_label_pc_fb9c, %bb309, %dec_label_pc_fb6c, %dec_label_pc_fb48, %bb302, %dec_label_pc_fb18, %bb301, %dec_label_pc_fb00, %bb300, %bb326, %dec_label_pc_faa8
  %v0_fad8 = call i32 @function_f28c()
  store i32 %v0_fad8, i32* %r0.global-to-local, align 4
  %v1_fadc = urem i32 %v0_fad8, 256
  store i32 %v1_fadc, i32* %r1.global-to-local, align 4
  %v3_fae0 = udiv i32 %v0_fad8, 256
  store i32 %v3_fae0, i32* %r3.global-to-local, align 4
  %v3_fae4 = udiv i32 %v0_fad8, 65536
  store i32 %v3_fae4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fae8 = icmp eq i32 %v1_fadc, 0
  store i1 %v2_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fae8, label %bb300, label %bb299

bb299:                                            ; preds = %dec_label_pc_fad8
  %v3_faec = icmp ugt i32 %v1_fadc, 126
  store i1 %v3_faec, i1* %cpsr_c.global-to-local, align 1
  %v8_faec = icmp eq i32 %v1_fadc, 127
  store i1 %v8_faec, i1* %cpsr_z.global-to-local, align 1
  br label %bb300

bb300:                                            ; preds = %dec_label_pc_fad8, %bb299
  %v0_fafc = phi i1 [ true, %dec_label_pc_fad8 ], [ %v8_faec, %bb299 ]
  %v1_faf0 = urem i32 %v3_fae0, 256
  store i32 %v1_faf0, i32* %ip.global-to-local, align 4
  %v1_faf4 = urem i32 %v3_fae4, 256
  store i32 %v1_faf4, i32* %r2.global-to-local, align 4
  %v1_faf8 = and i32 %v0_fad8, 8388608
  %v2_faf8 = icmp ne i32 %v1_faf8, 0
  store i1 %v2_faf8, i1* %cpsr_c.global-to-local, align 1
  %v3_faf8 = udiv i32 %v0_fad8, 16777216
  store i32 %v3_faf8, i32* %r0.global-to-local, align 4
  br i1 %v0_fafc, label %dec_label_pc_fad8, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %bb300
  %v2_fb00 = icmp ugt i32 %v1_fadc, 2
  store i1 %v2_fb00, i1* %cpsr_c.global-to-local, align 1
  %v7_fb00 = icmp eq i32 %v1_fadc, 3
  store i1 %v7_fb00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb00, label %dec_label_pc_fad8, label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fb00
  %v1_fb08 = add nsw i32 %v1_fadc, -15
  store i32 %v1_fb08, i32* %r3.global-to-local, align 4
  %v2_fb0c = icmp ugt i32 %v1_fadc, 55
  store i1 %v2_fb0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb0c = icmp eq i32 %v1_fadc, 56
  store i1 %v7_fb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb0c, label %dec_label_pc_fad8, label %bb301

bb301:                                            ; preds = %dec_label_pc_fb08
  %v3_fb10 = icmp ne i32 %v1_fb08, 0
  store i1 %v3_fb10, i1* %cpsr_c.global-to-local, align 1
  %v8_fb10 = icmp eq i32 %v1_fb08, 1
  store i1 %v8_fb10, i1* %cpsr_z.global-to-local, align 1
  %v2_fb14 = xor i1 %v3_fb10, true
  %v3_fb14 = or i1 %v8_fb10, %v2_fb14
  br i1 %v3_fb14, label %dec_label_pc_fad8, label %dec_label_pc_fb18

dec_label_pc_fb18:                                ; preds = %bb301
  %v2_fb18 = icmp ugt i32 %v1_fadc, 9
  store i1 %v2_fb18, i1* %cpsr_c.global-to-local, align 1
  %v7_fb18 = icmp eq i32 %v1_fadc, 10
  store i1 %v7_fb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb18, label %dec_label_pc_fad8, label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb18
  %v2_fb20 = icmp ugt i32 %v1_fadc, 191
  store i1 %v2_fb20, i1* %cpsr_c.global-to-local, align 1
  %v7_fb20 = icmp eq i32 %v1_fadc, 192
  store i1 %v7_fb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb20, label %bb302, label %dec_label_pc_fb2c

bb302:                                            ; preds = %dec_label_pc_fb20
  %v3_fb24 = icmp ugt i32 %v1_faf0, 167
  store i1 %v3_fb24, i1* %cpsr_c.global-to-local, align 1
  %v8_fb24 = icmp eq i32 %v1_faf0, 168
  store i1 %v8_fb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb24, label %dec_label_pc_fad8, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb20, %bb302
  %v7_fb2c = icmp eq i32 %v1_fadc, 172
  %.381 = zext i1 %v7_fb2c to i32
  store i32 %.381, i32* %r3.global-to-local, align 4
  %v2_fb38 = icmp ugt i32 %v1_faf0, 14
  store i1 %v2_fb38, i1* %cpsr_c.global-to-local, align 1
  %v7_fb38 = icmp eq i32 %v1_faf0, 15
  store i1 %v7_fb38, i1* %cpsr_z.global-to-local, align 1
  %v2_fb3c = xor i1 %v2_fb38, true
  %v3_fb3c = or i1 %v7_fb38, %v2_fb3c
  br i1 %v3_fb3c, label %.thread13, label %bb305

.thread13:                                        ; preds = %dec_label_pc_fb2c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb50

bb305:                                            ; preds = %dec_label_pc_fb2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb40 = icmp eq i1 %v7_fb2c, false
  store i1 %v2_fb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb40, label %dec_label_pc_fb50, label %dec_label_pc_fb48

dec_label_pc_fb48:                                ; preds = %bb305
  %v2_fb48 = icmp ugt i32 %v1_faf0, 30
  store i1 %v2_fb48, i1* %cpsr_c.global-to-local, align 1
  %v7_fb48 = icmp eq i32 %v1_faf0, 31
  store i1 %v7_fb48, i1* %cpsr_z.global-to-local, align 1
  %v2_fb4c = xor i1 %v2_fb48, true
  %v3_fb4c = or i1 %v7_fb48, %v2_fb4c
  br i1 %v3_fb4c, label %dec_label_pc_fad8, label %dec_label_pc_fb50

dec_label_pc_fb50:                                ; preds = %.thread13, %dec_label_pc_fb48, %bb305
  %v7_fb50 = icmp eq i32 %v1_fadc, 100
  %.382 = zext i1 %v7_fb50 to i32
  store i32 %.382, i32* %r3.global-to-local, align 4
  %v2_fb5c = icmp ugt i32 %v1_faf0, 62
  store i1 %v2_fb5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb5c = icmp eq i32 %v1_faf0, 63
  store i1 %v7_fb5c, i1* %cpsr_z.global-to-local, align 1
  %v2_fb60 = xor i1 %v2_fb5c, true
  %v3_fb60 = or i1 %v7_fb5c, %v2_fb60
  br i1 %v3_fb60, label %.thread18, label %bb308

.thread18:                                        ; preds = %dec_label_pc_fb50
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb74

bb308:                                            ; preds = %dec_label_pc_fb50
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb64 = icmp eq i1 %v7_fb50, false
  store i1 %v2_fb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb64, label %dec_label_pc_fb74, label %dec_label_pc_fb6c

dec_label_pc_fb6c:                                ; preds = %bb308
  %v2_fb6c = icmp ugt i32 %v1_faf0, 125
  store i1 %v2_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb6c = icmp eq i32 %v1_faf0, 126
  store i1 %v7_fb6c, i1* %cpsr_z.global-to-local, align 1
  %v2_fb70 = xor i1 %v2_fb6c, true
  %v3_fb70 = or i1 %v7_fb6c, %v2_fb70
  br i1 %v3_fb70, label %dec_label_pc_fad8, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %.thread18, %dec_label_pc_fb6c, %bb308
  %v2_fb74 = icmp ugt i32 %v1_fadc, 168
  store i1 %v2_fb74, i1* %cpsr_c.global-to-local, align 1
  %v7_fb74 = icmp eq i32 %v1_fadc, 169
  store i1 %v7_fb74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb74, label %bb309, label %dec_label_pc_fb80

bb309:                                            ; preds = %dec_label_pc_fb74
  %v3_fb78 = icmp eq i32 %v1_faf0, 255
  store i1 %v3_fb78, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fb78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fb78, label %dec_label_pc_fad8, label %dec_label_pc_fb80

dec_label_pc_fb80:                                ; preds = %dec_label_pc_fb74, %bb309
  %v7_fb80 = icmp eq i32 %v1_fadc, 198
  %.383 = zext i1 %v7_fb80 to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_fb8c = icmp ugt i32 %v1_faf0, 16
  store i1 %v2_fb8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb8c = icmp eq i32 %v1_faf0, 17
  store i1 %v7_fb8c, i1* %cpsr_z.global-to-local, align 1
  %v2_fb90 = xor i1 %v2_fb8c, true
  %v3_fb90 = or i1 %v7_fb8c, %v2_fb90
  br i1 %v3_fb90, label %.thread24, label %bb312

.thread24:                                        ; preds = %dec_label_pc_fb80
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fba4

bb312:                                            ; preds = %dec_label_pc_fb80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb94 = icmp eq i1 %v7_fb80, false
  store i1 %v2_fb94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb94, label %dec_label_pc_fba4, label %dec_label_pc_fb9c

dec_label_pc_fb9c:                                ; preds = %bb312
  %v2_fb9c = icmp ugt i32 %v1_faf0, 18
  store i1 %v2_fb9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb9c = icmp eq i32 %v1_faf0, 19
  store i1 %v7_fb9c, i1* %cpsr_z.global-to-local, align 1
  %v2_fba0 = xor i1 %v2_fb9c, true
  %v3_fba0 = or i1 %v7_fb9c, %v2_fba0
  br i1 %v3_fba0, label %dec_label_pc_fad8, label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %.thread24, %dec_label_pc_fb9c, %bb312
  %v2_fba4 = icmp ugt i32 %v1_fadc, 222
  store i1 %v2_fba4, i1* %cpsr_c.global-to-local, align 1
  %v7_fba4 = icmp eq i32 %v1_fadc, 223
  store i1 %v7_fba4, i1* %cpsr_z.global-to-local, align 1
  %v2_fba8 = xor i1 %v7_fba4, true
  %v3_fba8 = and i1 %v2_fba4, %v2_fba8
  br i1 %v3_fba8, label %dec_label_pc_fad8, label %dec_label_pc_fbac

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fba4
  %v7_fbac = icmp eq i32 %v1_fadc, 106
  %.384 = zext i1 %v7_fbac to i32
  store i32 %.384, i32* %lr.global-to-local, align 4
  %v2_fbb8 = icmp ugt i32 %v1_faf0, 185
  store i1 %v2_fbb8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb8 = icmp eq i32 %v1_faf0, 186
  store i1 %v7_fbb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbb8, label %bb315, label %dec_label_pc_fbc4

bb315:                                            ; preds = %dec_label_pc_fbac
  %v2_fbac = icmp ugt i32 %v1_fadc, 105
  store i1 %v2_fbac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fbac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbac, label %dec_label_pc_fad8, label %dec_label_pc_fbc4.thread

dec_label_pc_fbc4.thread:                         ; preds = %bb315
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fbd8

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_fbac
  %v2_fbc4 = icmp ugt i32 %v1_faf0, 186
  store i1 %v2_fbc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc4 = icmp eq i32 %v1_faf0, 187
  store i1 %v7_fbc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbc4, label %.thread29, label %dec_label_pc_fbd8

.thread29:                                        ; preds = %dec_label_pc_fbc4
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbd0 = icmp eq i1 %v7_fbac, false
  store i1 %v2_fbd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fbd0, label %dec_label_pc_fbd8.thread, label %dec_label_pc_fad8

dec_label_pc_fbd8.thread:                         ; preds = %.thread29
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fbec

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fbc4, %dec_label_pc_fbc4.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fbd8 = icmp ugt i32 %v1_faf0, 184
  store i1 %v2_fbd8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd8 = icmp eq i32 %v1_faf0, 185
  store i1 %v7_fbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd8, label %.thread33, label %dec_label_pc_fbec

.thread33:                                        ; preds = %dec_label_pc_fbd8
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbe4 = icmp eq i1 %v7_fbac, false
  store i1 %v2_fbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fbe4, label %dec_label_pc_fbec.thread, label %dec_label_pc_fad8

dec_label_pc_fbec.thread:                         ; preds = %.thread33
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.thread38

dec_label_pc_fbec:                                ; preds = %dec_label_pc_fbd8, %dec_label_pc_fbd8.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fbec = icmp ugt i32 %v1_faf0, 183
  store i1 %v2_fbec, i1* %cpsr_c.global-to-local, align 1
  %v7_fbec = icmp eq i32 %v1_faf0, 184
  store i1 %v7_fbec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbec, label %.thread37, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_fbec.thread, %dec_label_pc_fbec
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc00

.thread37:                                        ; preds = %dec_label_pc_fbec
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbf8 = icmp eq i1 %v7_fbac, false
  store i1 %v2_fbf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fbf8, label %dec_label_pc_fc00, label %dec_label_pc_fad8

dec_label_pc_fc00:                                ; preds = %.thread38, %.thread37
  %v2_fc00 = icmp ugt i32 %v1_fadc, 149
  store i1 %v2_fc00, i1* %cpsr_c.global-to-local, align 1
  %v7_fc00 = icmp eq i32 %v1_fadc, 150
  store i1 %v7_fc00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc00, label %bb316, label %dec_label_pc_fc0c

bb316:                                            ; preds = %dec_label_pc_fc00
  %v3_fc04 = icmp ugt i32 %v1_faf0, 30
  store i1 %v3_fc04, i1* %cpsr_c.global-to-local, align 1
  %v8_fc04 = icmp eq i32 %v1_faf0, 31
  store i1 %v8_fc04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc04, label %dec_label_pc_fad8, label %dec_label_pc_fc0c.thread

dec_label_pc_fc0c.thread:                         ; preds = %bb316
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc18.thread

dec_label_pc_fc0c:                                ; preds = %dec_label_pc_fc00
  %v2_fc0c = icmp ugt i32 %v1_fadc, 48
  store i1 %v2_fc0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc0c = icmp eq i32 %v1_fadc, 49
  store i1 %v7_fc0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc0c, label %bb317, label %dec_label_pc_fc18

bb317:                                            ; preds = %dec_label_pc_fc0c
  %v3_fc10 = icmp ugt i32 %v1_faf0, 50
  store i1 %v3_fc10, i1* %cpsr_c.global-to-local, align 1
  %v8_fc10 = icmp eq i32 %v1_faf0, 51
  store i1 %v8_fc10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc10, label %dec_label_pc_fad8, label %dec_label_pc_fc18.thread

dec_label_pc_fc18.thread:                         ; preds = %dec_label_pc_fc0c.thread, %bb317
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc24.thread

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fc0c
  %v2_fc18 = icmp ugt i32 %v1_fadc, 177
  store i1 %v2_fc18, i1* %cpsr_c.global-to-local, align 1
  %v7_fc18 = icmp eq i32 %v1_fadc, 178
  store i1 %v7_fc18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc18, label %bb318, label %dec_label_pc_fc24

bb318:                                            ; preds = %dec_label_pc_fc18
  %v3_fc1c = icmp ugt i32 %v1_faf0, 61
  store i1 %v3_fc1c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc1c = icmp eq i32 %v1_faf0, 62
  store i1 %v8_fc1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc1c, label %dec_label_pc_fad8, label %dec_label_pc_fc24.thread

dec_label_pc_fc24.thread:                         ; preds = %dec_label_pc_fc18.thread, %bb318
  %v2_fc24396 = icmp ugt i32 %v1_fadc, 159
  store i1 %v2_fc24396, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc30.thread

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc18
  %v2_fc24 = icmp ugt i32 %v1_fadc, 159
  store i1 %v2_fc24, i1* %cpsr_c.global-to-local, align 1
  %v7_fc24 = icmp eq i32 %v1_fadc, 160
  store i1 %v7_fc24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc24, label %bb319, label %dec_label_pc_fc30

bb319:                                            ; preds = %dec_label_pc_fc24
  %v3_fc28 = icmp ugt i32 %v1_faf0, 12
  store i1 %v3_fc28, i1* %cpsr_c.global-to-local, align 1
  %v8_fc28 = icmp eq i32 %v1_faf0, 13
  store i1 %v8_fc28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc28, label %dec_label_pc_fad8, label %dec_label_pc_fc30.thread

dec_label_pc_fc30.thread:                         ; preds = %dec_label_pc_fc24.thread, %bb319
  %v1_fc30398 = add nsw i32 %v1_fadc, -6
  store i32 %v1_fc30398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb320

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fc24
  %v1_fc30 = add nsw i32 %v1_fadc, -6
  store i32 %v1_fc30, i32* %r3.global-to-local, align 4
  %v2_fc34 = icmp ugt i32 %v1_fadc, 10
  store i1 %v2_fc34, i1* %cpsr_c.global-to-local, align 1
  %v7_fc34 = icmp eq i32 %v1_fadc, 11
  store i1 %v7_fc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc34, label %dec_label_pc_fad8, label %bb320

bb320:                                            ; preds = %dec_label_pc_fc30.thread, %dec_label_pc_fc30
  %v1_fc30401 = phi i32 [ %v1_fc30398, %dec_label_pc_fc30.thread ], [ %v1_fc30, %dec_label_pc_fc30 ]
  %v3_fc38 = icmp ne i32 %v1_fc30401, 0
  store i1 %v3_fc38, i1* %cpsr_c.global-to-local, align 1
  %v8_fc38 = icmp eq i32 %v1_fc30401, 1
  store i1 %v8_fc38, i1* %cpsr_z.global-to-local, align 1
  %v2_fc3c = xor i1 %v3_fc38, true
  %v3_fc3c = or i1 %v8_fc38, %v2_fc3c
  br i1 %v3_fc3c, label %dec_label_pc_fad8, label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %bb320
  %v2_fc40 = icmp ugt i32 %v1_fadc, 21
  store i1 %v2_fc40, i1* %cpsr_c.global-to-local, align 1
  %v7_fc40 = icmp eq i32 %v1_fadc, 22
  store i1 %v7_fc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc40, label %dec_label_pc_fad8, label %bb321

bb321:                                            ; preds = %dec_label_pc_fc40
  %v3_fc44 = icmp ugt i32 %v1_fadc, 20
  store i1 %v3_fc44, i1* %cpsr_c.global-to-local, align 1
  %v8_fc44 = icmp eq i32 %v1_fadc, 21
  store i1 %v8_fc44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc44, label %dec_label_pc_fad8, label %dec_label_pc_fc4c

dec_label_pc_fc4c:                                ; preds = %bb321
  %v2_fc4c = icmp ugt i32 %v1_fadc, 27
  store i1 %v2_fc4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc4c = icmp eq i32 %v1_fadc, 28
  store i1 %v7_fc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc4c, label %dec_label_pc_fad8, label %bb322

bb322:                                            ; preds = %dec_label_pc_fc4c
  %v3_fc50 = icmp ugt i32 %v1_fadc, 25
  store i1 %v3_fc50, i1* %cpsr_c.global-to-local, align 1
  %v8_fc50 = icmp eq i32 %v1_fadc, 26
  store i1 %v8_fc50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc50, label %dec_label_pc_fad8, label %dec_label_pc_fc58

dec_label_pc_fc58:                                ; preds = %bb322
  %v2_fc58 = icmp ugt i32 %v1_fadc, 29
  store i1 %v2_fc58, i1* %cpsr_c.global-to-local, align 1
  %v7_fc58 = icmp eq i32 %v1_fadc, 30
  store i1 %v7_fc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc58, label %dec_label_pc_fad8, label %bb323

bb323:                                            ; preds = %dec_label_pc_fc58
  %v3_fc5c = icmp ugt i32 %v1_fadc, 28
  store i1 %v3_fc5c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc5c = icmp eq i32 %v1_fadc, 29
  store i1 %v8_fc5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc5c, label %dec_label_pc_fad8, label %dec_label_pc_fc64

dec_label_pc_fc64:                                ; preds = %bb323
  %v2_fc64 = icmp ugt i32 %v1_fadc, 54
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i32 %v1_fadc, 55
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc64, label %dec_label_pc_fad8, label %bb324

bb324:                                            ; preds = %dec_label_pc_fc64
  %v3_fc68 = icmp ugt i32 %v1_fadc, 32
  store i1 %v3_fc68, i1* %cpsr_c.global-to-local, align 1
  %v8_fc68 = icmp eq i32 %v1_fadc, 33
  store i1 %v8_fc68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc68, label %dec_label_pc_fad8, label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %bb324
  %v2_fc70 = icmp ugt i32 %v1_fadc, 214
  store i1 %v2_fc70, i1* %cpsr_c.global-to-local, align 1
  %v7_fc70 = icmp eq i32 %v1_fadc, 215
  store i1 %v7_fc70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc70, label %.thread53, label %bb325

bb325:                                            ; preds = %dec_label_pc_fc70
  %v3_fc74 = icmp ugt i32 %v1_fadc, 213
  store i1 %v3_fc74, i1* %cpsr_c.global-to-local, align 1
  %v8_fc74 = icmp eq i32 %v1_fadc, 214
  store i1 %v8_fc74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc74, label %bb326, label %dec_label_pc_fc84

.thread53:                                        ; preds = %dec_label_pc_fc70
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fad8

bb326:                                            ; preds = %bb325
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fad8

dec_label_pc_fc84:                                ; preds = %bb325
  store i32 0, i32* @r4, align 4
  %v5_fc90 = call i32 @llvm.bswap.i32(i32 %v0_fad8)
  store i32 %v5_fc90, i32* %r3.global-to-local, align 4
  %tmp327 = and i32 %v0_fad8, 65280
  %tmp328 = call i32 @llvm.bswap.i32(i32 %tmp327)
  %tmp329 = and i32 %v0_fad8, 16711680
  %tmp330 = call i32 @llvm.bswap.i32(i32 %tmp329)
  %v3_fc9c = mul nuw i32 %v3_faf8, 16777216
  %v3_fca0 = udiv i32 %tmp328, 256
  %v4_fca4 = mul nuw nsw i32 %tmp330, 256
  %tmp331 = and i32 %v0_fad8, 32768
  %v3_fca8 = icmp ne i32 %tmp331, 0
  store i1 %v3_fca8, i1* %cpsr_c.global-to-local, align 1
  %v4_fca8 = udiv i32 %v5_fc90, 16777216
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* @r0, align 4
  %v5_fca8 = or i32 %v4_fca8, %v3_fc9c
  %v5_fca4 = or i32 %v5_fca8, %v4_fca4
  %v2_fcb0 = or i32 %v5_fca4, %v3_fca0
  store i32 %v2_fcb0, i32* %r2.global-to-local, align 4
  %v4_fcb4 = trunc i32 %v4_fca8 to i8
  store i8 %v4_fcb4, i8* @global_var_1a1fc.238, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1a1f6.239 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a1f7.240 to i8*), align 4
  %v2_fcc4 = call i32 @function_ddc4(i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v2_fcc4, 16777216
  %v1_fccc = sdiv i32 %sext9, 16777216
  store i32 %v1_fccc, i32* %r3.global-to-local, align 4
  %v4_fcd0 = ashr i32 %sext9, 31
  store i32 %v4_fcd0, i32* %r2.global-to-local, align 4
  %v1_fcd4 = trunc i32 %v1_fccc to i8
  store i8 %v1_fcd4, i8* bitcast (i32* @global_var_1a1f6.239 to i8*), align 4
  %v1_fcd8 = trunc i32 %v4_fcd0 to i8
  store i8 %v1_fcd8, i8* bitcast (i32* @global_var_1a1f7.240 to i8*), align 4
  %v3_fcdc = load i32, i32* %stack_var_-52, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_fce4 = srem i32 %v3_fcdc, 10
  store i32 %v2_fce4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fce8 = icmp eq i32 %v2_fce4, 0
  store i1 %v2_fce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fce8, label %.thread232, label %bb332

.thread232:                                       ; preds = %dec_label_pc_fc84
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %lr.global-to-local, align 4
  br label %.thread63.thread106

bb332:                                            ; preds = %dec_label_pc_fc84
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_fcf8 = load i32, i32* @r4, align 4
  %v2_fcf8 = trunc i32 %v1_fcf8 to i8
  store i8 %v2_fcf8, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32 2) to i8*), align 2
  %v0_fcfc.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fcfc.pr.pre, label %.thread63.thread106, label %.thread60

.thread60:                                        ; preds = %bb332
  %v1_fcfc = load i32, i32* %r3.global-to-local, align 4
  %v2_fcfc = trunc i32 %v1_fcfc to i8
  %v3_fcfc = load i32, i32* %r0.global-to-local, align 4
  %v4_fcfc = add i32 %v3_fcfc, 3
  %v5_fcfc = inttoptr i32 %v4_fcfc to i8*
  store i8 %v2_fcfc, i8* %v5_fcfc, align 1
  %v0_fd04.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_fd04.pr.pr, label %.thread66, label %.thread68

.thread63.thread106:                              ; preds = %bb332, %.thread232
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %r0.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %.thread60, %.thread63.thread106
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_fd0c = load i32, i32* %lr.global-to-local, align 4
  %v4_fd0c = add i32 %v3_fd0c, 2
  %v5_fd0c = inttoptr i32 %v4_fd0c to i8*
  store i8 9, i8* %v5_fd0c, align 1
  %v0_fd10.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fd10.pr.pr, label %bb333, label %.thread68

bb333:                                            ; preds = %.thread66
  %v1_fd10 = load i32, i32* %r2.global-to-local, align 4
  %v2_fd10 = trunc i32 %v1_fd10 to i8
  %v3_fd10 = load i32, i32* %lr.global-to-local, align 4
  %v4_fd10 = add i32 %v3_fd10, 3
  %v5_fd10 = inttoptr i32 %v4_fd10 to i8*
  store i8 %v2_fd10, i8* %v5_fd10, align 1
  br label %.thread68

.thread68:                                        ; preds = %.thread60, %.thread66, %bb333
  %v3_fd14 = load i8, i8* @global_var_1a1fc.238, align 1
  %v4_fd14 = sext i8 %v3_fd14 to i32
  store i32 %v4_fd14, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* @r1, align 4
  store i8 %v3_fd14, i8* @global_var_1a204.241, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_fd2c = load i32, i32* %sl.global-to-local, align 4
  %v1_fd2c = trunc i32 %v0_fd2c to i8
  store i8 %v1_fd2c, i8* bitcast (i32* @global_var_1a210.242 to i8*), align 4
  store i8 %v1_fd2c, i8* bitcast (i32* @global_var_1a211.243 to i8*), align 4
  %v4_fd34 = call i32 @function_de20(i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_fd34, 16777216
  %v1_fd3c = sdiv i32 %sext, 16777216
  %v3_fd44 = ashr i32 %sext, 31
  %v2_fd48 = load i32, i32* @global_var_1a200.195, align 4
  %v1_fd50 = trunc i32 %v3_fd44 to i8
  store i8 %v1_fd50, i8* bitcast (i32* @global_var_1a211.243 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_fd64 = load i8, i8* @global_var_1a1fc.238, align 1
  %v4_fd64 = sext i8 %v3_fd64 to i32
  store i32 %v4_fd64, i32* %r4.global-to-local, align 4
  %v2_fd68 = load i32, i32* @global_var_1a240.189, align 4
  store i32 %v2_fd68, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a200.195 to i32), i32* %ip.global-to-local, align 4
  %v1_fd78 = and i32 %v2_fd48, 8388608
  %v2_fd78 = icmp ne i32 %v1_fd78, 0
  store i1 %v2_fd78, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_fd8c = trunc i32 %v1_fd3c to i8
  store i8 %v1_fd8c, i8* bitcast (i32* @global_var_1a210.242 to i8*), align 4
  store i32 %v2_fd94, i32* %lr.global-to-local, align 4
  %v9_fda4 = call i32 @sendto(i32 %v2_fd68, i32* nonnull @global_var_1a1ec.191, i32 40, i32 16384, %sockaddr* %tmp298, i32 16)
  store i32 %v9_fda4, i32* %r0.global-to-local, align 4
  %v3_fda8 = load i32, i32* %stack_var_-52, align 4
  %v1_fdac = add i32 %v3_fda8, 1
  store i32 %v1_fdac, i32* %r3.global-to-local, align 4
  %v3_fdb0 = icmp ugt i32 %v1_fdac, 383
  store i1 %v3_fdb0, i1* %cpsr_c.global-to-local, align 1
  %v8_fdb0 = icmp eq i32 %v1_fdac, 384
  store i1 %v8_fdb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fdac, i32* %stack_var_-52, align 4
  %v5_fdb8 = icmp slt i32 %v1_fdac, 384
  br i1 %v5_fdb8, label %.thread68.dec_label_pc_faa8_crit_edge, label %dec_label_pc_fdbc

.thread68.dec_label_pc_faa8_crit_edge:            ; preds = %.thread68
  %v0_faa8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_faa8

dec_label_pc_fdbc:                                ; preds = %.thread68
  %v0_fdbc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fdbc, i32* @fp, align 4
  br label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fa8c, %dec_label_pc_fdbc
  %v0_fdc0 = call i32* @__errno_location()
  %v2_fdc0 = ptrtoint i32* %v0_fdc0 to i32
  store i32 %v2_fdc0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_fdc0, i32* @sb, align 4
  br label %dec_label_pc_fdcc

dec_label_pc_fdcc:                                ; preds = %dec_label_pc_fea8, %dec_label_pc_fea0, %dec_label_pc_fe98, %dec_label_pc_fe64, %dec_label_pc_fe54, %dec_label_pc_fe30, %dec_label_pc_fe18, %dec_label_pc_fe90, %dec_label_pc_fe80, %dec_label_pc_fe10, %dec_label_pc_ff48, %dec_label_pc_fdc0
  %v1_fdd0 = phi i32 [ %v2_fdc0, %dec_label_pc_fdc0 ], [ %v1_fdd0.pre.pre, %dec_label_pc_ff48 ], [ %v0_fe04, %dec_label_pc_fe10 ], [ %v0_fe04, %dec_label_pc_fe80 ], [ %v0_fe04, %dec_label_pc_fe90 ], [ %v0_fe04, %dec_label_pc_fe18 ], [ %v0_fe04, %dec_label_pc_fe30 ], [ %v0_fe04, %dec_label_pc_fe54 ], [ %v0_fe04, %dec_label_pc_fe64 ], [ %v0_fe04, %dec_label_pc_fe98 ], [ %v0_fe04, %dec_label_pc_fea0 ], [ %v0_fe04, %dec_label_pc_fea8 ]
  %v2_fdd0 = inttoptr i32 %v1_fdd0 to i32*
  store i32 0, i32* %v2_fdd0, align 4
  %v2_fddc = load i32, i32* @global_var_1a240.189, align 4
  store i32 %v2_fddc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_fa7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_fdf8 = call i32 @recvfrom(i32 %v2_fddc, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_fdf8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdfc = icmp eq i32 %v10_fdf8, 0
  store i1 %v2_fdfc, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v10_fdf8, 1
  br i1 %tmp334, label %dec_label_pc_10014, label %dec_label_pc_fe04

dec_label_pc_fe04:                                ; preds = %dec_label_pc_fdcc
  %v0_fe04 = load i32, i32* @sb, align 4
  %v1_fe04 = inttoptr i32 %v0_fe04 to i32*
  %v2_fe04 = load i32, i32* %v1_fe04, align 4
  store i32 %v2_fe04, i32* %r3.global-to-local, align 4
  %v2_fe08 = icmp ugt i32 %v2_fe04, 10
  store i1 %v2_fe08, i1* %cpsr_c.global-to-local, align 1
  %v7_fe08 = icmp eq i32 %v2_fe04, 11
  store i1 %v7_fe08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe08, label %dec_label_pc_10014, label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fe04
  %v2_fe10 = icmp ugt i32 %v10_fdf8, 38
  store i1 %v2_fe10, i1* %cpsr_c.global-to-local, align 1
  %v7_fe10 = icmp eq i32 %v10_fdf8, 39
  store i1 %v7_fe10, i1* %cpsr_z.global-to-local, align 1
  %v2_fe14 = xor i1 %v2_fe10, true
  %v3_fe14 = or i1 %v7_fe10, %v2_fe14
  br i1 %v3_fe14, label %dec_label_pc_fdcc, label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fe10
  store i32 %v2_fa7c, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a220.101 to i32), i32* %r0.global-to-local, align 4
  %v3_fe20 = load i32, i32* %v2_fe20, align 4
  store i32 %v3_fe20, i32* %r2.global-to-local, align 4
  %v2_fe24 = load i32, i32* @global_var_1a220.101, align 4
  store i32 %v2_fe24, i32* %r3.global-to-local, align 4
  %v3_fe28 = icmp uge i32 %v3_fe20, %v2_fe24
  store i1 %v3_fe28, i1* %cpsr_c.global-to-local, align 1
  %v9_fe28 = icmp eq i32 %v3_fe20, %v2_fe24
  store i1 %v9_fe28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fe28, label %dec_label_pc_fe30, label %dec_label_pc_fdcc

dec_label_pc_fe30:                                ; preds = %dec_label_pc_fe18
  %v3_fe30 = load i8, i8* %v2_fe30, align 1
  %v4_fe30 = zext i8 %v3_fe30 to i32
  store i32 %v4_fe30, i32* %r3.global-to-local, align 4
  %v2_fe34 = icmp ugt i8 %v3_fe30, 5
  store i1 %v2_fe34, i1* %cpsr_c.global-to-local, align 1
  %v7_fe34 = icmp eq i8 %v3_fe30, 6
  store i1 %v7_fe34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe34, label %dec_label_pc_fe3c, label %dec_label_pc_fdcc

dec_label_pc_fe3c:                                ; preds = %dec_label_pc_fe30
  store i32 %v2_fa80, i32* %r1.global-to-local, align 4
  %v2_fe40 = load i8, i8* %tmp297, align 4
  %v3_fe40 = zext i8 %v2_fe40 to i32
  store i32 %v3_fe40, i32* %r2.global-to-local, align 4
  %v3_fe44 = load i8, i8* %v2_fe44, align 1
  %v4_fe44 = zext i8 %v3_fe44 to i32
  store i32 %v4_fe44, i32* %r3.global-to-local, align 4
  %v4_fe48 = mul nuw nsw i32 %v4_fe44, 256
  %v5_fe48 = or i32 %v4_fe48, %v3_fe40
  store i32 %v5_fe48, i32* %r2.global-to-local, align 4
  %v2_fe4c = icmp ugt i32 %v5_fe48, 5887
  store i1 %v2_fe4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe4c = icmp eq i32 %v5_fe48, 5888
  store i1 %v7_fe4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe4c, label %dec_label_pc_fe64, label %dec_label_pc_fe54

dec_label_pc_fe54:                                ; preds = %dec_label_pc_fe3c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fe5c = icmp ugt i32 %v5_fe48, 4872
  store i1 %v3_fe5c, i1* %cpsr_c.global-to-local, align 1
  %v9_fe5c = icmp eq i32 %v5_fe48, 4873
  store i1 %v9_fe5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fe5c, label %dec_label_pc_fe64, label %dec_label_pc_fdcc

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fe54, %dec_label_pc_fe3c
  store i32 %v2_fa80, i32* %r2.global-to-local, align 4
  %v3_fe68 = load i8, i8* %v2_fe68, align 2
  %v4_fe68 = zext i8 %v3_fe68 to i32
  store i32 %v4_fe68, i32* %r3.global-to-local, align 4
  %v3_fe6c = load i8, i8* %v2_fe6c, align 1
  %v4_fe6c = zext i8 %v3_fe6c to i32
  store i32 %v4_fe6c, i32* %r2.global-to-local, align 4
  store i32 %v4_f90c, i32* %ip.global-to-local, align 4
  %v4_fe74 = mul nuw nsw i32 %v4_fe6c, 256
  %v5_fe74 = or i32 %v4_fe74, %v4_fe68
  store i32 %v5_fe74, i32* %r3.global-to-local, align 4
  %v3_fe78 = icmp uge i32 %v5_fe74, %v4_f90c
  store i1 %v3_fe78, i1* %cpsr_c.global-to-local, align 1
  %v9_fe78 = icmp eq i32 %v5_fe74, %v4_f90c
  store i1 %v9_fe78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fe78, label %dec_label_pc_fe80, label %dec_label_pc_fdcc

dec_label_pc_fe80:                                ; preds = %dec_label_pc_fe64
  store i32 %v2_fa80, i32* %lr.global-to-local, align 4
  %v3_fe84 = load i8, i8* %v2_fe84, align 1
  %v4_fe84 = zext i8 %v3_fe84 to i32
  store i32 %v4_fe84, i32* %r3.global-to-local, align 4
  %v1_fe88 = and i32 %v4_fe84, 2
  %v2_fe88 = icmp eq i32 %v1_fe88, 0
  store i1 %v2_fe88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe88, label %dec_label_pc_fdcc, label %dec_label_pc_fe90

dec_label_pc_fe90:                                ; preds = %dec_label_pc_fe80
  %v1_fe90 = and i32 %v4_fe84, 16
  %v2_fe90 = icmp eq i32 %v1_fe90, 0
  store i1 %v2_fe90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe90, label %dec_label_pc_fdcc, label %dec_label_pc_fe98

dec_label_pc_fe98:                                ; preds = %dec_label_pc_fe90
  %v1_fe98 = and i32 %v4_fe84, 4
  %v2_fe98 = icmp eq i32 %v1_fe98, 0
  store i1 %v2_fe98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe98, label %dec_label_pc_fea0, label %dec_label_pc_fdcc

dec_label_pc_fea0:                                ; preds = %dec_label_pc_fe98
  %tmp504 = urem i8 %v3_fe84, 2
  %v2_fea0 = icmp eq i8 %tmp504, 0
  store i1 %v2_fea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fea0, label %dec_label_pc_fea8, label %dec_label_pc_fdcc

dec_label_pc_fea8:                                ; preds = %dec_label_pc_fea0
  %v3_fea8 = load i32, i32* %v2_fea8, align 4
  %v2_fec4 = call i32 @llvm.bswap.i32(i32 %v3_fea8)
  %v1_fec8 = add i32 %v2_fec4, -1
  %v1_fecc = udiv i32 %v1_fec8, 256
  %v3_fed0 = and i32 %v1_fecc, 65280
  %v1_fed4 = and i32 %v1_fec8, 65280
  store i32 %v1_fed4, i32* %r2.global-to-local, align 4
  %v3_fed8 = mul i32 %v1_fec8, 16777216
  %v4_fedc = udiv i32 %v1_fec8, 16777216
  %v5_fedc = or i32 %v3_fed0, %v4_fedc
  store i32 %v5_fedc, i32* %r1.global-to-local, align 4
  store i32 %v2_fa7c, i32* %r3.global-to-local, align 4
  %v4_fee4 = mul nuw nsw i32 %v1_fed4, 256
  %v5_fee4 = or i32 %v4_fee4, %v3_fed8
  store i32 %v5_fee4, i32* %r0.global-to-local, align 4
  %v3_fee8 = load i32, i32* %v2_fee8, align 4
  store i32 %v3_fee8, i32* %r2.global-to-local, align 4
  %v2_feec = call i32 @llvm.bswap.i32(i32 %v1_fec8)
  store i32 %v2_feec, i32* %ip.global-to-local, align 4
  %v3_fef0 = icmp uge i32 %v2_feec, %v3_fee8
  store i1 %v3_fef0, i1* %cpsr_c.global-to-local, align 1
  %v9_fef0 = icmp eq i32 %v2_feec, %v3_fee8
  store i1 %v9_fef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fef0, label %dec_label_pc_fef8, label %dec_label_pc_fdcc

dec_label_pc_fef8:                                ; preds = %dec_label_pc_fea8
  %v0_fef8 = load i32, i32* @r4, align 4
  %v2_fef8 = icmp ugt i32 %v0_fef8, 254
  store i1 %v2_fef8, i1* %cpsr_c.global-to-local, align 1
  %v7_fef8 = icmp eq i32 %v0_fef8, 255
  store i1 %v7_fef8, i1* %cpsr_z.global-to-local, align 1
  %v8_fefc = icmp sgt i32 %v0_fef8, 255
  br i1 %v8_fefc, label %dec_label_pc_10014, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fef8
  store i32 ptrtoint (i32* @global_var_1a23c.187 to i32), i32* %lr.global-to-local, align 4
  %v3_ff04 = mul i32 %v0_fef8, 256
  store i32 %v3_ff04, i32* %r2.global-to-local, align 4
  %v2_ff08 = load i32, i32* @global_var_1a23c.187, align 4
  store i32 %v2_ff08, i32* %r1.global-to-local, align 4
  %v2_ff10 = mul i32 %v0_fef8, 288
  store i32 %v2_ff10, i32* %r3.global-to-local, align 4
  %v2_ff14 = add i32 %v2_ff08, %v2_ff10
  store i32 %v2_ff14, i32* @r0, align 4
  %v1_ff18 = add i32 %v2_ff14, 12
  %v2_ff18 = inttoptr i32 %v1_ff18 to i32*
  %v3_ff18 = load i32, i32* %v2_ff18, align 4
  store i32 %v3_ff18, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff1c = icmp eq i32 %v3_ff18, 0
  store i1 %v2_ff1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff1c, label %dec_label_pc_ff48, label %dec_label_pc_ff28.preheader

dec_label_pc_ff28.preheader:                      ; preds = %dec_label_pc_ff00
  %v2_ff20 = add i32 %v2_ff14, 288
  store i32 %v2_ff20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ff28

dec_label_pc_ff28:                                ; preds = %dec_label_pc_ff28.preheader, %dec_label_pc_ff34
  %v0_ff34 = phi i32 [ %v2_ff20, %dec_label_pc_ff28.preheader ], [ %v1_ff40, %dec_label_pc_ff34 ]
  %v0_ff28 = phi i32 [ %v0_fef8, %dec_label_pc_ff28.preheader ], [ %v1_ff28, %dec_label_pc_ff34 ]
  %v1_ff28 = add i32 %v0_ff28, 1
  store i32 %v1_ff28, i32* @r4, align 4
  %v7_ff2c = icmp eq i32 %v1_ff28, 256
  br i1 %v7_ff2c, label %dec_label_pc_10014.loopexit, label %dec_label_pc_ff34

dec_label_pc_ff34:                                ; preds = %dec_label_pc_ff28
  store i32 %v0_ff34, i32* @r0, align 4
  %v1_ff38 = add i32 %v0_ff34, 12
  %v2_ff38 = inttoptr i32 %v1_ff38 to i32*
  %v3_ff38 = load i32, i32* %v2_ff38, align 4
  %v2_ff3c = icmp eq i32 %v3_ff38, 0
  %v1_ff40 = add i32 %v0_ff34, 288
  store i32 %v1_ff40, i32* %r3.global-to-local, align 4
  br i1 %v2_ff3c, label %dec_label_pc_ff48.loopexit, label %dec_label_pc_ff28

dec_label_pc_ff48.loopexit:                       ; preds = %dec_label_pc_ff34
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff48

dec_label_pc_ff48:                                ; preds = %dec_label_pc_ff48.loopexit, %dec_label_pc_ff00
  %v1_ff48 = phi i32 [ %v0_ff34, %dec_label_pc_ff48.loopexit ], [ %v2_ff14, %dec_label_pc_ff00 ]
  %v2_ff48 = add i32 %v1_ff48, 16
  %v3_ff48 = inttoptr i32 %v2_ff48 to i32*
  store i32 %v3_fee8, i32* %v3_ff48, align 4
  store i32 %v2_fa80, i32* %r1.global-to-local, align 4
  %v2_ff50 = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_ff50, i32* %r2.global-to-local, align 4
  %v1_ff54 = and i32 %v2_ff50, 128
  %v2_ff54 = icmp ne i32 %v1_ff54, 0
  store i1 %v2_ff54, i1* %cpsr_c.global-to-local, align 1
  %v3_ff54 = sdiv i32 %v2_ff50, 256
  store i32 %v3_ff54, i32* %r3.global-to-local, align 4
  %v1_ff58 = trunc i32 %v3_ff54 to i8
  %v2_ff58 = load i32, i32* @r0, align 4
  %v3_ff58 = add i32 %v2_ff58, 21
  %v4_ff58 = inttoptr i32 %v3_ff58 to i8*
  store i8 %v1_ff58, i8* %v4_ff58, align 1
  %v0_ff5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ff5c = trunc i32 %v0_ff5c to i8
  %v2_ff5c = load i32, i32* @r0, align 4
  %v3_ff5c = add i32 %v2_ff5c, 20
  %v4_ff5c = inttoptr i32 %v3_ff5c to i8*
  store i8 %v1_ff5c, i8* %v4_ff5c, align 1
  %v0_ff60 = call i32 @function_f4f0()
  store i32 %v0_ff60, i32* %r0.global-to-local, align 4
  %v1_fdd0.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_fdcc

dec_label_pc_ff68:                                ; preds = %dec_label_pc_10e04
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff78 = load i32, i32* @r4, align 4
  store i32 %v0_ff78, i32* %r0.global-to-local, align 4
  %v0_ff7c = load i32, i32* @r5, align 4
  store i32 %v0_ff7c, i32* %stack_var_-56, align 4
  %v6_ff80 = call i32 @send(i32 %v0_ff78, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10840, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff94 = load i32, i32* @r4, align 4
  store i32 %v0_ff94, i32* %r0.global-to-local, align 4
  %v5_ff98 = call i32 @send(i32 %v0_ff94, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_ffa0 = load i32, i32* @r6, align 4
  store i32 %v0_ffa0, i32* %r2.global-to-local, align 4
  %v2_ffa4 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_ffa4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffac = load i32, i32* @r4, align 4
  store i32 %v0_ffac, i32* %r0.global-to-local, align 4
  %v5_ffb0 = call i32 @send(i32 %v0_ffac, i32* nonnull %stack_var_-38, i32 %v0_ffa0, i32 16384)
  %v0_ffb4 = load i32, i32* %sl.global-to-local, align 4
  %v1_ffb4 = add i32 %v0_ffb4, 12
  store i32 %v1_ffb4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffc0 = load i32, i32* @r4, align 4
  store i32 %v0_ffc0, i32* %r0.global-to-local, align 4
  %v4_ffc4 = inttoptr i32 %v1_ffb4 to i32*
  %v5_ffc4 = call i32 @send(i32 %v0_ffc0, i32* %v4_ffc4, i32 1, i32 16384)
  store i32 %v5_ffc4, i32* %r0.global-to-local, align 4
  %v0_ffc8 = load i32, i32* %sl.global-to-local, align 4
  %v1_ffc8 = inttoptr i32 %v0_ffc8 to i32*
  %v2_ffc8 = load i32, i32* %v1_ffc8, align 4
  store i32 %v2_ffc8, i32* %r1.global-to-local, align 4
  %v1_ffcc = add i32 %v0_ffc8, 12
  %v2_ffcc = inttoptr i32 %v1_ffcc to i8*
  %v3_ffcc = load i8, i8* %v2_ffcc, align 1
  %v4_ffcc = zext i8 %v3_ffcc to i32
  store i32 %v4_ffcc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffd4 = load i32, i32* @r4, align 4
  store i32 %v0_ffd4, i32* %r0.global-to-local, align 4
  %v4_ffd8 = inttoptr i32 %v2_ffc8 to i32*
  %v5_ffd8 = call i32 @send(i32 %v0_ffd4, i32* %v4_ffd8, i32 %v4_ffcc, i32 16384)
  %v0_ffdc = load i32, i32* %sl.global-to-local, align 4
  %v1_ffdc = add i32 %v0_ffdc, 13
  store i32 %v1_ffdc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ffe8 = load i32, i32* @r4, align 4
  store i32 %v0_ffe8, i32* %r0.global-to-local, align 4
  %v4_ffec = inttoptr i32 %v1_ffdc to i32*
  %v5_ffec = call i32 @send(i32 %v0_ffe8, i32* %v4_ffec, i32 1, i32 16384)
  %v0_fff0 = load i32, i32* @r4, align 4
  store i32 %v0_fff0, i32* %r0.global-to-local, align 4
  %v0_fff4 = load i32, i32* %sl.global-to-local, align 4
  %v1_fff4 = add i32 %v0_fff4, 13
  %v2_fff4 = inttoptr i32 %v1_fff4 to i8*
  %v3_fff4 = load i8, i8* %v2_fff4, align 1
  %v4_fff4 = zext i8 %v3_fff4 to i32
  store i32 %v4_fff4, i32* %r2.global-to-local, align 4
  %v1_fff8 = add i32 %v0_fff4, 4
  %v2_fff8 = inttoptr i32 %v1_fff8 to i32*
  %v3_fff8 = load i32, i32* %v2_fff8, align 4
  store i32 %v3_fff8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10000 = inttoptr i32 %v3_fff8 to i32*
  %v5_10000 = call i32 @send(i32 %v0_fff0, i32* %v4_10000, i32 %v4_fff4, i32 16384)
  %v0_10004 = load i32, i32* @r4, align 4
  store i32 %v0_10004, i32* %r0.global-to-local, align 4
  %v1_10008 = call i32 @close(i32 %v0_10004)
  store i32 %v1_10008, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1000c

dec_label_pc_1000c:                               ; preds = %dec_label_pc_10de8, %dec_label_pc_f824, %dec_label_pc_100fc, %dec_label_pc_ff68
  %v0_1000c = load i32, i32* @r5, align 4
  store i32 %v0_1000c, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_1000c)
  unreachable

dec_label_pc_10014.loopexit:                      ; preds = %dec_label_pc_ff28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10014

dec_label_pc_10014:                               ; preds = %dec_label_pc_fef8, %dec_label_pc_fe04, %dec_label_pc_fdcc, %dec_label_pc_10014.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_10028451 = load i32, i32* %sp.global-to-local, align 4
  %v3_10028452 = add i32 %v2_10028451, 1664
  %v4_10028453 = inttoptr i32 %v3_10028452 to i32*
  store i32 0, i32* %v4_10028453, align 4
  br label %dec_label_pc_1001c.dec_label_pc_1001c_crit_edge

dec_label_pc_1001c.dec_label_pc_1001c_crit_edge:  ; preds = %dec_label_pc_10014, %dec_label_pc_1001c.dec_label_pc_1001c_crit_edge
  %v0_1001c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10028.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1001c = add i32 %v0_1001c.pre, 1664
  store i32 %v1_1001c, i32* %ip.global-to-local, align 4
  %v1_10020 = add i32 %v0_1001c.pre, 4
  store i32 %v1_10020, i32* %r3.global-to-local, align 4
  %v7_10024 = icmp eq i32 %v1_10020, 128
  %v2_10028 = load i32, i32* %sp.global-to-local, align 4
  %v3_10028 = add i32 %v2_10028, %v1_1001c
  %v4_10028 = inttoptr i32 %v3_10028 to i32*
  store i32 %v0_10028.pre, i32* %v4_10028, align 4
  br i1 %v7_10024, label %dec_label_pc_10030, label %dec_label_pc_1001c.dec_label_pc_1001c_crit_edge

dec_label_pc_10030:                               ; preds = %dec_label_pc_1001c.dec_label_pc_1001c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10030 = load i32, i32* %r2.global-to-local, align 4
  %v1_10034454 = add i32 %v0_10030, 1536
  store i32 %v1_10034454, i32* %lr.global-to-local, align 4
  %v1_10038455 = add i32 %v0_10030, 4
  store i32 %v1_10038455, i32* %r3.global-to-local, align 4
  %v7_1003c456 = icmp eq i32 %v1_10038455, 128
  %v2_10040457 = load i32, i32* %sp.global-to-local, align 4
  %v3_10040458 = add i32 %v2_10040457, %v1_10034454
  %v4_10040459 = inttoptr i32 %v3_10040458 to i32*
  store i32 %v0_10030, i32* %v4_10040459, align 4
  br i1 %v7_1003c456, label %dec_label_pc_10048, label %dec_label_pc_10034.dec_label_pc_10034_crit_edge

dec_label_pc_10034.dec_label_pc_10034_crit_edge:  ; preds = %dec_label_pc_10030, %dec_label_pc_10034.dec_label_pc_10034_crit_edge
  %v0_10034.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10040.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10034 = add i32 %v0_10034.pre, 1536
  store i32 %v1_10034, i32* %lr.global-to-local, align 4
  %v1_10038 = add i32 %v0_10034.pre, 4
  store i32 %v1_10038, i32* %r3.global-to-local, align 4
  %v7_1003c = icmp eq i32 %v1_10038, 128
  %v2_10040 = load i32, i32* %sp.global-to-local, align 4
  %v3_10040 = add i32 %v2_10040, %v1_10034
  %v4_10040 = inttoptr i32 %v3_10040 to i32*
  store i32 %v0_10040.pre, i32* %v4_10040, align 4
  br i1 %v7_1003c, label %dec_label_pc_10048, label %dec_label_pc_10034.dec_label_pc_10034_crit_edge

dec_label_pc_10048:                               ; preds = %dec_label_pc_10034.dec_label_pc_10034_crit_edge, %dec_label_pc_10030
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10048 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10048, i32* @r6, align 4
  store i32 %v0_10048, i32* @r5, align 4
  store i32 %v0_10048, i32* @r7, align 4
  store i32 %v0_10048, i32* %stack_var_-52, align 4
  br label %dec_label_pc_100c4

dec_label_pc_1005c:                               ; preds = %dec_label_pc_100ec, %dec_label_pc_100c4
  %storemerge245 = phi i32 [ 30, %dec_label_pc_100c4 ], [ 5, %dec_label_pc_100ec ]
  store i32 %storemerge245, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %r2.global-to-local, align 4
  %v2_10060 = load i32, i32* @global_var_1a21c.174, align 4
  store i32 %v2_10060, i32* %r3.global-to-local, align 4
  %v1_10064 = add i32 %v2_100d8, 8
  %v2_10064 = inttoptr i32 %v1_10064 to i32*
  %v3_10064 = load i32, i32* %v2_10064, align 4
  store i32 %v3_10064, i32* %r2.global-to-local, align 4
  %v2_10068 = sub i32 %v2_10060, %v3_10064
  store i32 %v2_10068, i32* %r3.global-to-local, align 4
  %v3_1006c = icmp uge i32 %v2_10068, %storemerge245
  store i1 %v3_1006c, i1* %cpsr_c.global-to-local, align 1
  %v9_1006c = icmp eq i32 %v2_10068, %storemerge245
  store i1 %v9_1006c, i1* %cpsr_z.global-to-local, align 1
  %v2_10070 = xor i1 %v9_1006c, true
  %v3_10070 = and i1 %v3_1006c, %v2_10070
  br i1 %v3_10070, label %dec_label_pc_10140, label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %dec_label_pc_1005c
  store i1 %v2_100e0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_100e0, i1* %cpsr_z.global-to-local, align 1
  %v1_1010c = add i32 %v2_100d8, 4
  %v2_1010c = inttoptr i32 %v1_1010c to i32*
  %v3_1010c = load i32, i32* %v2_1010c, align 4
  br i1 %v7_100e0, label %dec_label_pc_1010c, label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10074
  store i32 %v3_1010c, i32* %ip.global-to-local, align 4
  %v3_10084 = udiv i32 %v3_1010c, 32
  store i32 %v2_1011c, i32* %r0.global-to-local, align 4
  %v3_1008c = mul nuw nsw i32 %v3_10084, 4
  %v2_10090 = add i32 %v3_1008c, %v2_1011c
  store i32 %v2_10090, i32* %r3.global-to-local, align 4
  %v1_10094 = add i32 %v2_10090, -184
  %v2_10094 = inttoptr i32 %v1_10094 to i32*
  %v3_10094 = load i32, i32* %v2_10094, align 4
  %v1_10098 = urem i32 %v3_1010c, 32
  store i32 %v1_10098, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_100a0 = shl i32 1, %v1_10098
  %v8_100a0 = or i32 %v3_10094, %v7_100a0
  store i32 %v8_100a0, i32* %r2.global-to-local, align 4
  store i32 %v8_100a0, i32* %v2_10094, align 4
  %v0_100a8 = load i32, i32* @r6, align 4
  %v1_100a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_100a8 = icmp uge i32 %v0_100a8, %v1_100a8
  store i1 %v3_100a8, i1* %cpsr_c.global-to-local, align 1
  %v9_100a8 = icmp eq i32 %v0_100a8, %v1_100a8
  store i1 %v9_100a8, i1* %cpsr_z.global-to-local, align 1
  %v5_100ac = icmp slt i32 %v0_100a8, %v1_100a8
  br i1 %v5_100ac, label %bb336, label %bb337

bb336:                                            ; preds = %dec_label_pc_1007c
  store i32 %v1_100a8, i32* @r6, align 4
  br label %bb337

bb337:                                            ; preds = %dec_label_pc_100ec, %dec_label_pc_10180, %dec_label_pc_10174, %bb339, %dec_label_pc_1007c, %bb336
  %v3_100b0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_100b0, i32* %r3.global-to-local, align 4
  %v1_100b4 = add i32 %v3_100b0, 1
  store i32 %v1_100b4, i32* %r2.global-to-local, align 4
  %v2_100b8 = icmp ugt i32 %v1_100b4, 254
  store i1 %v2_100b8, i1* %cpsr_c.global-to-local, align 1
  %v7_100b8 = icmp eq i32 %v1_100b4, 255
  store i1 %v7_100b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_100b4, i32* %stack_var_-52, align 4
  %v8_100c0 = icmp sgt i32 %v1_100b4, 255
  br i1 %v8_100c0, label %dec_label_pc_1018c, label %dec_label_pc_100c4

dec_label_pc_100c4:                               ; preds = %bb337, %dec_label_pc_10048
  %v0_100d0 = phi i32 [ %v1_100b4, %bb337 ], [ %v0_10048, %dec_label_pc_10048 ]
  store i32 ptrtoint (i32* @global_var_1a23c.187 to i32), i32* %r0.global-to-local, align 4
  %v3_100c8 = mul i32 %v0_100d0, 256
  store i32 %v3_100c8, i32* %r3.global-to-local, align 4
  %v2_100cc = load i32, i32* @global_var_1a23c.187, align 4
  store i32 %v2_100cc, i32* %r1.global-to-local, align 4
  %v2_100d4 = mul i32 %v0_100d0, 288
  store i32 %v2_100d4, i32* %r2.global-to-local, align 4
  %v2_100d8 = add i32 %v2_100cc, %v2_100d4
  store i32 %v2_100d8, i32* @r4, align 4
  %v1_100dc = add i32 %v2_100d8, 12
  %v2_100dc = inttoptr i32 %v1_100dc to i32*
  %v3_100dc = load i32, i32* %v2_100dc, align 4
  store i32 %v3_100dc, i32* %ip.global-to-local, align 4
  %v2_100e0 = icmp ne i32 %v3_100dc, 0
  store i1 %v2_100e0, i1* %cpsr_c.global-to-local, align 1
  %v7_100e0 = icmp eq i32 %v3_100dc, 1
  store i1 %v7_100e0, i1* %cpsr_z.global-to-local, align 1
  %v2_100e4 = xor i1 %v7_100e0, true
  %v3_100e4 = and i1 %v2_100e0, %v2_100e4
  br i1 %v3_100e4, label %dec_label_pc_1005c, label %dec_label_pc_100ec

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100ec = icmp eq i32 %v3_100dc, 0
  store i1 %v2_100ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100ec, label %bb337, label %dec_label_pc_1005c

dec_label_pc_100fc:                               ; preds = %dec_label_pc_f84c
  store i32 ptrtoint (i32* @global_var_1a240.189 to i32), i32* %r2.global-to-local, align 4
  %v2_10100 = load i32, i32* @global_var_1a240.189, align 4
  store i32 %v2_10100, i32* %r0.global-to-local, align 4
  %v1_10104 = call i32 @close(i32 %v2_10100)
  store i32 %v1_10104, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1000c

dec_label_pc_1010c:                               ; preds = %dec_label_pc_10074
  store i32 %v3_1010c, i32* %r0.global-to-local, align 4
  %v3_10114 = udiv i32 %v3_1010c, 32
  %v3_10118 = mul nuw nsw i32 %v3_10114, 4
  store i32 %v2_1011c, i32* %lr.global-to-local, align 4
  %v2_10120 = add i32 %v3_10118, %v2_1011c
  store i32 %v2_10120, i32* %r3.global-to-local, align 4
  %v1_10124 = add i32 %v2_10120, -312
  %v2_10124 = inttoptr i32 %v1_10124 to i32*
  %v3_10124 = load i32, i32* %v2_10124, align 4
  %v1_10128 = urem i32 %v3_1010c, 32
  store i32 %v1_10128, i32* %r1.global-to-local, align 4
  %v7_1012c = shl i32 1, %v1_10128
  %v8_1012c = or i32 %v3_10124, %v7_1012c
  store i32 %v8_1012c, i32* %r2.global-to-local, align 4
  %v0_10130 = load i32, i32* @r5, align 4
  %v3_10130 = icmp uge i32 %v0_10130, %v3_1010c
  store i1 %v3_10130, i1* %cpsr_c.global-to-local, align 1
  %v9_10130 = icmp eq i32 %v0_10130, %v3_1010c
  store i1 %v9_10130, i1* %cpsr_z.global-to-local, align 1
  %v5_10134 = icmp slt i32 %v0_10130, %v3_1010c
  br i1 %v5_10134, label %bb338, label %bb339

bb338:                                            ; preds = %dec_label_pc_1010c
  store i32 %v3_1010c, i32* @r5, align 4
  br label %bb339

bb339:                                            ; preds = %dec_label_pc_1010c, %bb338
  store i32 %v8_1012c, i32* %v2_10124, align 4
  br label %bb337

dec_label_pc_10140:                               ; preds = %dec_label_pc_1005c
  %v1_10140 = add i32 %v2_100d8, 4
  %v2_10140 = inttoptr i32 %v1_10140 to i32*
  %v3_10140 = load i32, i32* %v2_10140, align 4
  store i32 %v3_10140, i32* %r0.global-to-local, align 4
  %v1_10144 = call i32 @close(i32 %v3_10140)
  store i32 %v1_10144, i32* %r0.global-to-local, align 4
  %v0_10148 = load i32, i32* @r4, align 4
  %v1_10148 = add i32 %v0_10148, 12
  %v2_10148 = inttoptr i32 %v1_10148 to i32*
  %v3_10148 = load i32, i32* %v2_10148, align 4
  store i32 %v3_10148, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10150 = icmp ugt i32 %v3_10148, 1
  store i1 %v2_10150, i1* %cpsr_c.global-to-local, align 1
  %v7_10150 = icmp eq i32 %v3_10148, 2
  store i1 %v7_10150, i1* %cpsr_z.global-to-local, align 1
  %v2_10154 = add i32 %v0_10148, 4
  %v3_10154 = inttoptr i32 %v2_10154 to i32*
  store i32 -1, i32* %v3_10154, align 4
  %v2_10158 = xor i1 %v2_10150, true
  %v3_10158 = or i1 %v7_10150, %v2_10158
  br i1 %v3_10158, label %dec_label_pc_10180, label %dec_label_pc_1015c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_10140
  %v0_1015c = load i32, i32* @r4, align 4
  %v1_1015c = add i32 %v0_1015c, 284
  %v2_1015c = inttoptr i32 %v1_1015c to i8*
  %v3_1015c = load i8, i8* %v2_1015c, align 1
  %v4_1015c = zext i8 %v3_1015c to i32
  %v1_10160 = add nuw nsw i32 %v4_1015c, 1
  %v1_10164 = urem i32 %v1_10160, 256
  store i32 %v1_10164, i32* %r3.global-to-local, align 4
  %v2_10168 = icmp ugt i32 %v1_10164, 9
  store i1 %v2_10168, i1* %cpsr_c.global-to-local, align 1
  %v7_10168 = icmp eq i32 %v1_10164, 10
  store i1 %v7_10168, i1* %cpsr_z.global-to-local, align 1
  %v1_1016c = trunc i32 %v1_10160 to i8
  store i8 %v1_1016c, i8* %v2_1015c, align 1
  %v0_10170 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10170, label %dec_label_pc_10180, label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_1015c
  %v0_10174 = load i32, i32* @r4, align 4
  store i32 %v0_10174, i32* @r0, align 4
  %v0_10178 = call i32 @function_f4f0()
  store i32 %v0_10178, i32* %r0.global-to-local, align 4
  br label %bb337

dec_label_pc_10180:                               ; preds = %dec_label_pc_1015c, %dec_label_pc_10140
  %v0_10180 = load i32, i32* @r7, align 4
  %v1_10180 = load i32, i32* @r4, align 4
  %v2_10180 = add i32 %v1_10180, 12
  %v3_10180 = inttoptr i32 %v2_10180 to i32*
  store i32 %v0_10180, i32* %v3_10180, align 4
  %v0_10184 = load i32, i32* @r7, align 4
  %v1_10184 = trunc i32 %v0_10184 to i8
  %v2_10184 = load i32, i32* @r4, align 4
  %v3_10184 = add i32 %v2_10184, 284
  %v4_10184 = inttoptr i32 %v3_10184 to i8*
  store i8 %v1_10184, i8* %v4_10184, align 1
  br label %bb337

dec_label_pc_1018c:                               ; preds = %bb337
  store i32 1, i32* %stack_var_-64, align 4
  %v0_10194 = load i32, i32* @r6, align 4
  %v1_10194 = load i32, i32* @r5, align 4
  %v3_10194 = icmp uge i32 %v0_10194, %v1_10194
  store i1 %v3_10194, i1* %cpsr_c.global-to-local, align 1
  %v9_10194 = icmp eq i32 %v0_10194, %v1_10194
  store i1 %v9_10194, i1* %cpsr_z.global-to-local, align 1
  %v5_10198 = icmp slt i32 %v0_10194, %v1_10194
  %storemerge108 = select i1 %v5_10198, i32 %v1_10194, i32 %v0_10194
  store i32 %v2_101a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_101ac, i32* %ip.global-to-local, align 4
  store i32 %v2_101b0, i32* %r1.global-to-local, align 4
  %v1_101b4 = add i32 %storemerge108, 1
  store i32 %v1_101b4, i32* %r0.global-to-local, align 4
  %v13_101c0 = call i32 @select(i32 %v1_101b4, %_TYPEDEF_fd_set* %tmp341, %_TYPEDEF_fd_set* %tmp340, %_TYPEDEF_fd_set* null, %timeval* %tmp343)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_101c8 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_101c8, i32* @global_var_1a21c.174, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_10220

dec_label_pc_101e4:                               ; preds = %dec_label_pc_10244, %dec_label_pc_10da0
  %v0_101fc = phi i32 [ %v3_10238, %dec_label_pc_10244 ], [ %v0_101e4.pre, %dec_label_pc_10da0 ]
  %v3_101e4 = udiv i32 %v0_101fc, 32
  %v3_101ec = mul nuw nsw i32 %v3_101e4, 4
  store i32 %v2_1011c, i32* %lr.global-to-local, align 4
  %v2_101f4 = add i32 %v3_101ec, %v2_1011c
  store i32 %v2_101f4, i32* %r3.global-to-local, align 4
  %v1_101f8 = add i32 %v2_101f4, -184
  %v2_101f8 = inttoptr i32 %v1_101f8 to i32*
  %v3_101f8 = load i32, i32* %v2_101f8, align 4
  %v1_101fc = urem i32 %v0_101fc, 32
  store i32 %v1_101fc, i32* %r1.global-to-local, align 4
  %v2_10200 = add nsw i32 %v1_101fc, -1
  %v3_10200 = shl i32 1, %v2_10200
  %v4_10200 = and i32 %v3_10200, %v3_101f8
  %v5_10200 = icmp ne i32 %v4_10200, 0
  store i1 %v5_10200, i1* %cpsr_c.global-to-local, align 1
  %v6_10200 = lshr i32 %v3_101f8, %v1_101fc
  store i32 %v6_10200, i32* %r2.global-to-local, align 4
  %v1_10204 = urem i32 %v6_10200, 2
  %v2_10204 = icmp eq i32 %v1_10204, 0
  store i1 %v2_10204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10204, label %dec_label_pc_1020c, label %dec_label_pc_103d4.preheader

dec_label_pc_103d4.preheader:                     ; preds = %dec_label_pc_101e4
  %v0_103d4129 = load i32, i32* @r6, align 4
  %v1_103d4130 = add i32 %v0_103d4129, 12
  %v2_103d4131 = inttoptr i32 %v1_103d4130 to i32*
  %v3_103d4132 = load i32, i32* %v2_103d4131, align 4
  store i32 %v3_103d4132, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103d8128134 = icmp eq i32 %v3_103d4132, 0
  store i1 %v2_103d8128134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103d8128134, label %dec_label_pc_1020c, label %dec_label_pc_103e0.lr.ph

dec_label_pc_1020c:                               ; preds = %dec_label_pc_103d4.loopexit, %dec_label_pc_103d8.backedge, %dec_label_pc_103d4.preheader, %dec_label_pc_101e4, %.thread241, %dec_label_pc_10cd0, %dec_label_pc_10220, %dec_label_pc_10db4, %dec_label_pc_10d10
  %v3_1020c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1020c, i32* %r3.global-to-local, align 4
  %v1_10210 = add i32 %v3_1020c, 1
  store i32 %v1_10210, i32* %r2.global-to-local, align 4
  %v2_10214 = icmp ugt i32 %v1_10210, 254
  store i1 %v2_10214, i1* %cpsr_c.global-to-local, align 1
  %v7_10214 = icmp eq i32 %v1_10210, 255
  store i1 %v7_10214, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10210, i32* %stack_var_-52, align 4
  %v8_1021c = icmp sgt i32 %v1_10210, 255
  br i1 %v8_1021c, label %dec_label_pc_fa8c, label %dec_label_pc_10220

dec_label_pc_10220:                               ; preds = %dec_label_pc_1020c, %dec_label_pc_1018c
  %v0_1022c = phi i32 [ %v1_10210, %dec_label_pc_1020c ], [ 0, %dec_label_pc_1018c ]
  store i32 ptrtoint (i32* @global_var_1a23c.187 to i32), i32* %ip.global-to-local, align 4
  %v3_10224 = mul i32 %v0_1022c, 256
  store i32 %v3_10224, i32* %r3.global-to-local, align 4
  %v2_10228 = load i32, i32* @global_var_1a23c.187, align 4
  store i32 %v2_10228, i32* %r1.global-to-local, align 4
  %v2_10230 = mul i32 %v0_1022c, 288
  store i32 %v2_10230, i32* %r2.global-to-local, align 4
  %v2_10234 = add i32 %v2_10228, %v2_10230
  store i32 %v2_10234, i32* @r6, align 4
  %v1_10238 = add i32 %v2_10234, 4
  %v2_10238 = inttoptr i32 %v1_10238 to i32*
  %v3_10238 = load i32, i32* %v2_10238, align 4
  store i32 %v3_10238, i32* %r4.global-to-local, align 4
  %v2_1023c = icmp eq i32 %v3_10238, -1
  store i1 %v2_1023c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1023c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1023c, label %dec_label_pc_1020c, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_10220
  %v3_10244 = udiv i32 %v3_10238, 32
  %v3_1024c = mul nuw nsw i32 %v3_10244, 4
  store i32 %v2_1011c, i32* %lr.global-to-local, align 4
  %v2_10254 = add i32 %v3_1024c, %v2_1011c
  store i32 %v2_10254, i32* %r3.global-to-local, align 4
  %v1_10258 = add i32 %v2_10254, -312
  %v2_10258 = inttoptr i32 %v1_10258 to i32*
  %v3_10258 = load i32, i32* %v2_10258, align 4
  %v1_1025c = urem i32 %v3_10238, 32
  store i32 %v1_1025c, i32* %r1.global-to-local, align 4
  %v2_10260 = add nsw i32 %v1_1025c, -1
  %v3_10260 = shl i32 1, %v2_10260
  %v4_10260 = and i32 %v3_10258, %v3_10260
  %v5_10260 = icmp ne i32 %v4_10260, 0
  store i1 %v5_10260, i1* %cpsr_c.global-to-local, align 1
  %v6_10260 = lshr i32 %v3_10258, %v1_1025c
  store i32 %v6_10260, i32* %r2.global-to-local, align 4
  %v1_10264 = urem i32 %v6_10260, 2
  %v2_10264 = icmp eq i32 %v1_10264, 0
  store i1 %v2_10264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10264, label %dec_label_pc_101e4, label %dec_label_pc_1026c

dec_label_pc_1026c:                               ; preds = %dec_label_pc_10244
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_10840, i32* %r3.global-to-local, align 4
  store i32 %v2_10348, i32* %ip.global-to-local, align 4
  store i32 %v3_10238, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v8_1029c = call i32 @getsockopt(i32 %v3_10238, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-56)
  %v3_102a0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_102a0, i32* %r3.global-to-local, align 4
  %v2_102a4 = or i32 %v3_102a0, %v8_1029c
  store i32 %v2_102a4, i32* %r0.global-to-local, align 4
  %v4_102a4 = icmp eq i32 %v2_102a4, 0
  store i1 %v4_102a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_102a4, label %dec_label_pc_102ac, label %dec_label_pc_10db4

dec_label_pc_102ac:                               ; preds = %dec_label_pc_1026c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_102b0 = load i32, i32* @r6, align 4
  %v2_102b0 = add i32 %v1_102b0, 12
  %v3_102b0 = inttoptr i32 %v2_102b0 to i32*
  store i32 2, i32* %v3_102b0, align 4
  %v0_102b4 = call i32 @function_f28c()
  %v3_102bc = load i8, i8* @global_var_1a219.181, align 1
  %v4_102bc = zext i8 %v3_102bc to i32
  store i32 %v4_102bc, i32* %r2.global-to-local, align 4
  %v2_102c0 = load i8, i8* bitcast (i8** @global_var_1a218.180 to i8*), align 4
  %v3_102c0 = zext i8 %v2_102c0 to i32
  %v4_102c4 = mul nuw nsw i32 %v4_102bc, 256
  %v5_102c4 = or i32 %v3_102c0, %v4_102c4
  store i32 %v5_102c4, i32* %r1.global-to-local, align 4
  %v2_102c8 = urem i32 %v0_102b4, %v5_102c4
  store i32 ptrtoint (i32* @global_var_1a1e8.176 to i32), i32* %r3.global-to-local, align 4
  %v2_102d0 = load i32, i32* @global_var_1a1e8.176, align 4
  store i32 %v2_102d0, i32* %lr.global-to-local, align 4
  %v1_102d8 = load i32, i32* @r5, align 4
  %v9_102d8 = icmp eq i32 %v2_102d0, %v1_102d8
  store i1 %v9_102d8, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_102c8, i32* %r0.global-to-local, align 4
  %v7_102e0 = icmp sgt i32 %v2_102d0, %v1_102d8
  br i1 %v7_102e0, label %dec_label_pc_102e4, label %dec_label_pc_10d9c

dec_label_pc_102e4:                               ; preds = %dec_label_pc_102ac
  %v2_102e8 = load i32, i32* @global_var_1a214.178, align 4
  store i32 %v2_102e8, i32* %r3.global-to-local, align 4
  store i32 %v1_102d8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10304

dec_label_pc_102f4:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_10304
  %v1_102f4 = add i32 %v0_102f4, 1
  store i32 %v1_102f4, i32* %ip.global-to-local, align 4
  %v3_102f8 = icmp uge i32 %v1_102f4, %v2_102d0
  store i1 %v3_102f8, i1* %cpsr_c.global-to-local, align 1
  %v9_102f8 = icmp eq i32 %v1_102f4, %v2_102d0
  store i1 %v9_102f8, i1* %cpsr_z.global-to-local, align 1
  %v1_102fc = add i32 %v0_102fc, 16
  store i32 %v1_102fc, i32* %r3.global-to-local, align 4
  br i1 %v9_102f8, label %dec_label_pc_10d9c, label %dec_label_pc_10304

dec_label_pc_10304:                               ; preds = %dec_label_pc_102f4, %dec_label_pc_102e4
  %v0_102f4 = phi i32 [ %v1_102f4, %dec_label_pc_102f4 ], [ %v1_102d8, %dec_label_pc_102e4 ]
  %v0_102fc = phi i32 [ %v1_102fc, %dec_label_pc_102f4 ], [ %v2_102e8, %dec_label_pc_102e4 ]
  store i32 %v0_102fc, i32* %r1.global-to-local, align 4
  %v1_10308 = add i32 %v0_102fc, 9
  %v2_10308 = inttoptr i32 %v1_10308 to i8*
  %v3_10308 = load i8, i8* %v2_10308, align 1
  %v4_10308 = zext i8 %v3_10308 to i32
  store i32 %v4_10308, i32* %r2.global-to-local, align 4
  %v1_1030c = add i32 %v0_102fc, 8
  %v2_1030c = inttoptr i32 %v1_1030c to i8*
  %v3_1030c = load i8, i8* %v2_1030c, align 1
  %v4_1030c = zext i8 %v3_1030c to i32
  %v4_10310 = mul nuw nsw i32 %v4_10308, 256
  %v5_10310 = or i32 %v4_1030c, %v4_10310
  store i32 %v5_10310, i32* %r3.global-to-local, align 4
  %v3_10314 = icmp uge i32 %v5_10310, %v2_102c8
  store i1 %v3_10314, i1* %cpsr_c.global-to-local, align 1
  %v9_10314 = icmp eq i32 %v5_10310, %v2_102c8
  store i1 %v9_10314, i1* %cpsr_z.global-to-local, align 1
  %v2_10318 = xor i1 %v9_10314, true
  %v3_10318 = and i1 %v3_10314, %v2_10318
  br i1 %v3_10318, label %dec_label_pc_102f4, label %dec_label_pc_1031c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_10304
  %v1_1031c = add i32 %v0_102fc, 10
  %v2_1031c = inttoptr i32 %v1_1031c to i8*
  %v3_1031c = load i8, i8* %v2_1031c, align 1
  %v4_1031c = zext i8 %v3_1031c to i32
  store i32 %v4_1031c, i32* %r3.global-to-local, align 4
  %v1_10320 = add i32 %v0_102fc, 11
  %v2_10320 = inttoptr i32 %v1_10320 to i8*
  %v3_10320 = load i8, i8* %v2_10320, align 1
  %v4_10320 = zext i8 %v3_10320 to i32
  store i32 %v4_10320, i32* %r2.global-to-local, align 4
  %v4_10324 = mul nuw nsw i32 %v4_10320, 256
  %v5_10324 = or i32 %v4_10324, %v4_1031c
  store i32 %v5_10324, i32* %r3.global-to-local, align 4
  %v3_10328 = icmp uge i32 %v5_10324, %v2_102c8
  store i1 %v3_10328, i1* %cpsr_c.global-to-local, align 1
  %v9_10328 = icmp eq i32 %v5_10324, %v2_102c8
  store i1 %v9_10328, i1* %cpsr_z.global-to-local, align 1
  %v2_1032c = xor i1 %v3_10328, true
  %v3_1032c = or i1 %v9_10328, %v2_1032c
  br i1 %v3_1032c, label %dec_label_pc_102f4, label %dec_label_pc_10da0

dec_label_pc_10334:                               ; preds = %dec_label_pc_1059c, %dec_label_pc_10570, %dec_label_pc_105b8
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10338 = call i32 @function_10f5c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10340 = call i32 @function_10f5c(i32 27)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_10350 = call i32 @function_10e78(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_10350, i32* @r4, align 4
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10364 = call i32 @function_10e78(i32 27, i32* nonnull %stack_var_-56)
  %v3_10368 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10364, i32* @r5, align 4
  %v0_10370 = load i32, i32* @r4, align 4
  store i32 %v0_10370, i32* %r2.global-to-local, align 4
  %v1_10374 = add i32 %v3_10368, -1
  store i32 %v1_10374, i32* %r3.global-to-local, align 4
  %v0_10378 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10378, i32* %r0.global-to-local, align 4
  %v0_1037c = load i32, i32* @r6, align 4
  %v1_1037c = add i32 %v0_1037c, 24
  %v2_1037c = inttoptr i32 %v1_1037c to i32*
  %v3_1037c = load i32, i32* %v2_1037c, align 4
  store i32 %v3_1037c, i32* %r1.global-to-local, align 4
  %v4_10380 = call i32 @function_115ec(i32 %v0_10378, i32 %v3_1037c, i32 %v0_10370, i32 %v1_10374)
  store i32 %v4_10380, i32* %r0.global-to-local, align 4
  %v2_10384 = icmp eq i32 %v4_10380, -1
  store i1 %v2_10384, i1* %cpsr_c.global-to-local, align 1
  %v7_10384 = icmp eq i32 %v4_10380, -1
  store i1 %v7_10384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10384, label %dec_label_pc_10394, label %dec_label_pc_103bc

dec_label_pc_10394:                               ; preds = %dec_label_pc_10334
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10394 = load i32, i32* %stack_var_-56, align 4
  %v0_10398 = load i32, i32* @r5, align 4
  store i32 %v0_10398, i32* %r2.global-to-local, align 4
  %v1_1039c = add i32 %v3_10394, -1
  store i32 %v1_1039c, i32* %r3.global-to-local, align 4
  %v0_103a0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103a0, i32* %r0.global-to-local, align 4
  %v0_103a4 = load i32, i32* @r6, align 4
  %v1_103a4 = add i32 %v0_103a4, 24
  %v2_103a4 = inttoptr i32 %v1_103a4 to i32*
  %v3_103a4 = load i32, i32* %v2_103a4, align 4
  store i32 %v3_103a4, i32* %r1.global-to-local, align 4
  %v4_103a8 = call i32 @function_115ec(i32 %v0_103a0, i32 %v3_103a4, i32 %v0_10398, i32 %v1_1039c)
  store i32 %v4_103a8, i32* %r0.global-to-local, align 4
  %v2_103ac = icmp eq i32 %v4_103a8, -1
  store i1 %v2_103ac, i1* %cpsr_c.global-to-local, align 1
  %v7_103ac = icmp eq i32 %v4_103a8, -1
  store i1 %v7_103ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103ac, label %dec_label_pc_10dd0, label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_10394, %dec_label_pc_10334
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_103c0 = call i32 @function_10ea4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_103c8 = call i32 @function_10ea4(i32 27)
  store i32 %v1_103c8, i32* %r0.global-to-local, align 4
  %v0_103cc = load i32, i32* @r7, align 4
  %v3_103cc = icmp eq i32 %v0_103cc, -1
  store i1 %v3_103cc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_103cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_103cc, label %dec_label_pc_103d4.loopexit, label %dec_label_pc_105d4

dec_label_pc_103d4.loopexit:                      ; preds = %dec_label_pc_10560.thread, %dec_label_pc_10c0c, %dec_label_pc_10560, %dec_label_pc_10454, %dec_label_pc_103bc, %dec_label_pc_10bf8
  %v0_103d4 = load i32, i32* @r6, align 4
  %v1_103d4 = add i32 %v0_103d4, 12
  %v2_103d4 = inttoptr i32 %v1_103d4 to i32*
  %v3_103d4 = load i32, i32* %v2_103d4, align 4
  store i32 %v3_103d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103d8128 = icmp eq i32 %v3_103d4, 0
  store i1 %v2_103d8128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103d8128, label %dec_label_pc_1020c, label %dec_label_pc_103e0.lr.ph

dec_label_pc_103e0.lr.ph:                         ; preds = %dec_label_pc_103d4.preheader, %dec_label_pc_103d4.loopexit
  %v0_103e0161 = phi i32 [ %v0_103d4, %dec_label_pc_103d4.loopexit ], [ %v0_103d4129, %dec_label_pc_103d4.preheader ]
  br label %dec_label_pc_103e0

dec_label_pc_103e0:                               ; preds = %dec_label_pc_103d8.backedge.thread, %dec_label_pc_103d8.backedge, %dec_label_pc_103d8.backedge.thread501, %dec_label_pc_103e0.lr.ph
  %v0_10d48 = phi i32 [ %v0_103e0161, %dec_label_pc_103e0.lr.ph ], [ %v0_103e0158, %dec_label_pc_103d8.backedge ], [ %v0_10454, %dec_label_pc_103d8.backedge.thread ], [ %v0_10454, %dec_label_pc_103d8.backedge.thread501 ]
  %v1_103e0 = add i32 %v0_10d48, 24
  %v2_103e0 = inttoptr i32 %v1_103e0 to i32*
  %v3_103e0 = load i32, i32* %v2_103e0, align 4
  store i32 %v3_103e0, i32* %r3.global-to-local, align 4
  %v2_103e4 = icmp ugt i32 %v3_103e0, 255
  store i1 %v2_103e4, i1* %cpsr_c.global-to-local, align 1
  %v7_103e4 = icmp eq i32 %v3_103e0, 256
  store i1 %v7_103e4, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10d48, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_103e4, label %dec_label_pc_10d48, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103e0, %dec_label_pc_10d48
  store i32 0, i32* @r5, align 4
  %v1_103f4 = load i32, i32* @sb, align 4
  %v2_103f4 = inttoptr i32 %v1_103f4 to i32*
  store i32 0, i32* %v2_103f4, align 4
  %v0_103f8 = load i32, i32* @r6, align 4
  %v1_103f8 = add i32 %v0_103f8, 24
  %v2_103f8 = inttoptr i32 %v1_103f8 to i32*
  %v3_103f8 = load i32, i32* %v2_103f8, align 4
  store i32 %v3_103f8, i32* %r2.global-to-local, align 4
  %v0_103fc = load i32, i32* %r8.global-to-local, align 4
  %v2_103fc = add i32 %v0_103fc, %v3_103f8
  store i32 %v2_103fc, i32* @r4, align 4
  %v1_10400 = add i32 %v0_103f8, 4
  %v2_10400 = inttoptr i32 %v1_10400 to i32*
  %v3_10400 = load i32, i32* %v2_10400, align 4
  store i32 %v3_10400, i32* %r0.global-to-local, align 4
  %v1_10404 = sub i32 256, %v3_103f8
  store i32 %v1_10404, i32* %r2.global-to-local, align 4
  store i32 %v2_103fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10410 = inttoptr i32 %v2_103fc to i32*
  %v5_10410 = call i32 @recv(i32 %v3_10400, i32* %v4_10410, i32 %v1_10404, i32 16384)
  store i32 %v5_10410, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10414 = icmp eq i32 %v5_10410, 0
  store i1 %v2_10414, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v5_10410, 1
  br i1 %tmp345, label %dec_label_pc_10cc4, label %dec_label_pc_1041c

dec_label_pc_1041c:                               ; preds = %dec_label_pc_103f0
  %v0_1041c = load i32, i32* @r5, align 4
  store i32 %v0_1041c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10424

dec_label_pc_10424:                               ; preds = %bb347, %dec_label_pc_1041c
  %v3_1042c = phi i32 [ %v1_10430, %bb347 ], [ %v0_1041c, %dec_label_pc_1041c ]
  %v1_10424 = load i32, i32* @r4, align 4
  %v2_10424 = add i32 %v1_10424, %v3_1042c
  %v3_10424 = inttoptr i32 %v2_10424 to i8*
  %v4_10424 = load i8, i8* %v3_10424, align 1
  %v6_10424 = zext i8 %v4_10424 to i32
  store i32 %v6_10424, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10428 = icmp eq i8 %v4_10424, 0
  store i1 %v2_10428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10428, label %bb346, label %bb347

bb346:                                            ; preds = %dec_label_pc_10424
  %v1_1042c = load i32, i32* %r1.global-to-local, align 4
  %v2_1042c = trunc i32 %v1_1042c to i8
  store i8 %v2_1042c, i8* %v3_10424, align 1
  %v0_10430.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb347

bb347:                                            ; preds = %dec_label_pc_10424, %bb346
  %v0_10430 = phi i32 [ %v3_1042c, %dec_label_pc_10424 ], [ %v0_10430.pre, %bb346 ]
  %v1_10430 = add i32 %v0_10430, 1
  store i32 %v1_10430, i32* %r2.global-to-local, align 4
  %v3_10434 = icmp uge i32 %v5_10410, %v1_10430
  store i1 %v3_10434, i1* %cpsr_c.global-to-local, align 1
  %v9_10434 = icmp eq i32 %v5_10410, %v1_10430
  store i1 %v9_10434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10434, label %dec_label_pc_1043c, label %dec_label_pc_10424

dec_label_pc_1043c:                               ; preds = %bb347, %dec_label_pc_10cc8
  store i32 ptrtoint (i32* @global_var_1a21c.174 to i32), i32* %r1.global-to-local, align 4
  %v0_10440 = load i32, i32* @r6, align 4
  %v1_10440 = add i32 %v0_10440, 24
  %v2_10440 = inttoptr i32 %v1_10440 to i32*
  %v3_10440 = load i32, i32* %v2_10440, align 4
  %v2_10444 = load i32, i32* @global_var_1a21c.174, align 4
  store i32 %v2_10444, i32* %r3.global-to-local, align 4
  %v2_10448 = add i32 %v3_10440, %v5_10410
  store i32 %v2_10448, i32* %ip.global-to-local, align 4
  store i32 %v2_10448, i32* %v2_10440, align 4
  %v0_10450 = load i32, i32* %r3.global-to-local, align 4
  %v1_10450 = load i32, i32* @r6, align 4
  %v2_10450 = add i32 %v1_10450, 8
  %v3_10450 = inttoptr i32 %v2_10450 to i32*
  store i32 %v0_10450, i32* %v3_10450, align 4
  br label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_10910, %dec_label_pc_1043c
  %v0_10454 = load i32, i32* @r6, align 4
  %v1_10454 = add i32 %v0_10454, 12
  %v2_10454 = inttoptr i32 %v1_10454 to i32*
  %v3_10454 = load i32, i32* %v2_10454, align 4
  store i32 %v3_10454, i32* %r2.global-to-local, align 4
  %v1_10458 = add i32 %v3_10454, -2
  store i32 %v1_10458, i32* %r3.global-to-local, align 4
  %v7_1045c = icmp eq i32 %v1_10458, 8
  store i1 %v7_1045c, i1* %cpsr_z.global-to-local, align 1
  %v5_10460 = and i32 %v1_10458, 1073741824
  %v6_10460 = icmp ne i32 %v5_10460, 0
  store i1 %v6_10460, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10454, label %dec_label_pc_103d4.loopexit [
    i32 2, label %dec_label_pc_1048c
    i32 3, label %dec_label_pc_10570
    i32 4, label %dec_label_pc_10618
    i32 5, label %dec_label_pc_106b0
    i32 6, label %dec_label_pc_107d8
    i32 7, label %dec_label_pc_10a9c
    i32 8, label %dec_label_pc_10934
    i32 9, label %dec_label_pc_109e8
    i32 10, label %dec_label_pc_1088c
  ]

dec_label_pc_1048c:                               ; preds = %dec_label_pc_10454
  %v1_1048c = add i32 %v0_10454, 24
  %v2_1048c = inttoptr i32 %v1_1048c to i32*
  %v3_1048c = load i32, i32* %v2_1048c, align 4
  store i32 %v3_1048c, i32* %ip.global-to-local, align 4
  %v0_10490 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10490, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v1_1049c = add i32 %v0_10454, 29
  store i32 %v1_1049c, i32* @r4, align 4
  %v3_104a0119 = icmp eq i32 %v3_1048c, 0
  store i1 %v3_104a0119, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_104a0119, i1* %cpsr_z.global-to-local, align 1
  %v6_104a4126 = icmp sgt i32 %v3_1048c, 0
  br i1 %v6_104a4126, label %dec_label_pc_104a8.preheader, label %dec_label_pc_10560.thread

dec_label_pc_10560.thread:                        ; preds = %dec_label_pc_1048c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_103d4.loopexit

dec_label_pc_104a0.loopexit:                      ; preds = %dec_label_pc_104c0
  %v2_104c8 = add i32 %v1_104c8, 2
  store i32 %v2_104c8, i32* @r5, align 4
  %v2_104cc = add i32 %v1_104cc, 2
  store i32 %v2_104cc, i32* @r4, align 4
  %v2_104d0 = add i32 %v1_104d0, 2
  store i32 %v2_104d0, i32* @r7, align 4
  %v3_104a0 = icmp uge i32 %v2_104d0, %v1_104a0
  store i1 %v3_104a0, i1* %cpsr_c.global-to-local, align 1
  %v9_104a0 = icmp eq i32 %v2_104d0, %v1_104a0
  store i1 %v9_104a0, i1* %cpsr_z.global-to-local, align 1
  %v6_104a4 = icmp slt i32 %v2_104d0, %v1_104a0
  br i1 %v6_104a4, label %dec_label_pc_104a8.preheader, label %dec_label_pc_10550

dec_label_pc_104a8.preheader:                     ; preds = %dec_label_pc_1048c, %dec_label_pc_104a0.loopexit
  %v6_10558199 = phi i32 [ %v6_10558200, %dec_label_pc_104a0.loopexit ], [ %v0_10454, %dec_label_pc_1048c ]
  %v1_104d0189 = phi i32 [ %v2_104d0, %dec_label_pc_104a0.loopexit ], [ 0, %dec_label_pc_1048c ]
  %v1_104c8187 = phi i32 [ %v2_104c8, %dec_label_pc_104a0.loopexit ], [ %v0_10490, %dec_label_pc_1048c ]
  %v1_104b4185 = phi i32 [ %v1_104a0, %dec_label_pc_104a0.loopexit ], [ %v3_1048c, %dec_label_pc_1048c ]
  %v0_104a8183 = phi i32 [ %v2_104cc, %dec_label_pc_104a0.loopexit ], [ %v1_1049c, %dec_label_pc_1048c ]
  br label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %dec_label_pc_104a8.preheader, %dec_label_pc_10530
  %v6_10558200 = phi i32 [ %v6_10558199, %dec_label_pc_104a8.preheader ], [ %v0_10538, %dec_label_pc_10530 ]
  %v1_104d0 = phi i32 [ %v1_104d0189, %dec_label_pc_104a8.preheader ], [ %v1_1053c, %dec_label_pc_10530 ]
  %v1_104c8 = phi i32 [ %v1_104c8187, %dec_label_pc_104a8.preheader ], [ %v1_10544, %dec_label_pc_10530 ]
  %v1_104a0 = phi i32 [ %v1_104b4185, %dec_label_pc_104a8.preheader ], [ %v3_10538, %dec_label_pc_10530 ]
  %v1_104cc = phi i32 [ %v0_104a8183, %dec_label_pc_104a8.preheader ], [ %v1_10548, %dec_label_pc_10530 ]
  %v1_104a8 = add i32 %v1_104cc, -1
  %v2_104a8 = inttoptr i32 %v1_104a8 to i8*
  %v3_104a8 = load i8, i8* %v2_104a8, align 1
  %v4_104a8 = zext i8 %v3_104a8 to i32
  store i32 %v4_104a8, i32* %r3.global-to-local, align 4
  %v2_104ac = icmp eq i8 %v3_104a8, -1
  store i1 %v2_104ac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_104ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104ac, label %dec_label_pc_104b4, label %dec_label_pc_10550

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104a8
  %v0_104b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_104b4 = add i32 %v0_104b4, %v1_104a0
  store i32 %v2_104b4, i32* %r2.global-to-local, align 4
  %v3_104b8 = icmp uge i32 %v2_104b4, %v1_104cc
  store i1 %v3_104b8, i1* %cpsr_c.global-to-local, align 1
  %v9_104b8 = icmp eq i32 %v2_104b4, %v1_104cc
  store i1 %v9_104b8, i1* %cpsr_z.global-to-local, align 1
  %v2_104bc = xor i1 %v3_104b8, true
  %v3_104bc = or i1 %v9_104b8, %v2_104bc
  br i1 %v3_104bc, label %dec_label_pc_10550, label %dec_label_pc_104c0

dec_label_pc_104c0:                               ; preds = %dec_label_pc_104b4
  %v1_104c0 = inttoptr i32 %v1_104cc to i8*
  %v2_104c0 = load i8, i8* %v1_104c0, align 1
  %v3_104c0 = zext i8 %v2_104c0 to i32
  store i32 %v3_104c0, i32* %r3.global-to-local, align 4
  %v2_104c4 = icmp eq i8 %v2_104c0, -1
  store i1 %v2_104c4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_104c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104c4, label %dec_label_pc_104a0.loopexit, label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104c0
  %v2_104d8 = icmp ugt i8 %v2_104c0, -4
  store i1 %v2_104d8, i1* %cpsr_c.global-to-local, align 1
  %v7_104d8 = icmp eq i8 %v2_104c0, -3
  store i1 %v7_104d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104d8, label %dec_label_pc_10b50, label %dec_label_pc_104e0

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104d8
  %v1_104e0 = add i32 %v1_104c8, 2
  store i32 %v1_104e0, i32* %r3.global-to-local, align 4
  %v3_104e4 = icmp uge i32 %v2_104b4, %v1_104e0
  store i1 %v3_104e4, i1* %cpsr_c.global-to-local, align 1
  %v9_104e4 = icmp eq i32 %v2_104b4, %v1_104e0
  store i1 %v9_104e4, i1* %cpsr_z.global-to-local, align 1
  %v2_104e8 = xor i1 %v3_104e4, true
  %v3_104e8 = or i1 %v9_104e4, %v2_104e8
  br i1 %v3_104e8, label %dec_label_pc_10550, label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_10ba8, %bb370, %bb369, %dec_label_pc_104e0
  %v0_104ec = load i32, i32* @r4, align 4
  %v1_104ec = inttoptr i32 %v0_104ec to i8*
  %v2_104ec = load i8, i8* %v1_104ec, align 1
  %v3_104ec = zext i8 %v2_104ec to i32
  store i32 %v3_104ec, i32* %r3.global-to-local, align 4
  %v2_104f0 = icmp ugt i8 %v2_104ec, -4
  store i1 %v2_104f0, i1* %cpsr_c.global-to-local, align 1
  %v7_104f0 = icmp eq i8 %v2_104ec, -3
  store i1 %v7_104f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104f0, label %bb348, label %dec_label_pc_104fc

bb348:                                            ; preds = %dec_label_pc_104ec
  %v1_104f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_104f4 = trunc i32 %v1_104f4 to i8
  store i8 %v2_104f4, i8* %v1_104ec, align 1
  %v0_104f8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_104f8.pr, label %.thread88, label %.dec_label_pc_104fc_crit_edge

.dec_label_pc_104fc_crit_edge:                    ; preds = %bb348
  %v0_104fc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %.dec_label_pc_104fc_crit_edge, %dec_label_pc_104ec
  %v0_104fc = phi i32 [ %v0_104fc.pre, %.dec_label_pc_104fc_crit_edge ], [ %v3_104ec, %dec_label_pc_104ec ]
  %v2_104fc = icmp ugt i32 %v0_104fc, 250
  store i1 %v2_104fc, i1* %cpsr_c.global-to-local, align 1
  %v7_104fc = icmp eq i32 %v0_104fc, 251
  store i1 %v7_104fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104fc, label %bb349, label %.thread88

bb349:                                            ; preds = %dec_label_pc_104fc
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10504 = load i32, i32* @r4, align 4
  %v4_10504 = inttoptr i32 %v3_10504 to i8*
  store i8 -3, i8* %v4_10504, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_104fc, %bb348, %bb349
  %v0_10508 = load i32, i32* @r4, align 4
  %v1_10508 = add i32 %v0_10508, 1
  %v2_10508 = inttoptr i32 %v1_10508 to i8*
  %v3_10508 = load i8, i8* %v2_10508, align 1
  %v4_10508 = zext i8 %v3_10508 to i32
  store i32 %v4_10508, i32* %r3.global-to-local, align 4
  %v2_1050c = icmp ugt i8 %v3_10508, -4
  store i1 %v2_1050c, i1* %cpsr_c.global-to-local, align 1
  %v7_1050c = icmp eq i8 %v3_10508, -3
  store i1 %v7_1050c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1050c, label %bb350, label %dec_label_pc_10518

bb350:                                            ; preds = %.thread88
  %v1_10510 = load i32, i32* %sl.global-to-local, align 4
  %v2_10510 = trunc i32 %v1_10510 to i8
  store i8 %v2_10510, i8* %v2_10508, align 1
  %v0_10514.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10514.pr, label %.thread90, label %.dec_label_pc_10518_crit_edge

.dec_label_pc_10518_crit_edge:                    ; preds = %bb350
  %v0_10518.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10518

dec_label_pc_10518:                               ; preds = %.dec_label_pc_10518_crit_edge, %.thread88
  %v0_10518 = phi i32 [ %v0_10518.pre, %.dec_label_pc_10518_crit_edge ], [ %v4_10508, %.thread88 ]
  %v2_10518 = icmp ugt i32 %v0_10518, 250
  store i1 %v2_10518, i1* %cpsr_c.global-to-local, align 1
  %v7_10518 = icmp eq i32 %v0_10518, 251
  store i1 %v7_10518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10518, label %bb351, label %.thread90

bb351:                                            ; preds = %dec_label_pc_10518
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_10520 = load i32, i32* @r4, align 4
  %v4_10520 = add i32 %v3_10520, 1
  %v5_10520 = inttoptr i32 %v4_10520 to i8*
  store i8 -3, i8* %v5_10520, align 1
  br label %.thread90

.thread90:                                        ; preds = %dec_label_pc_10518, %bb350, %bb351
  %v0_10524 = load i32, i32* @r6, align 4
  %v1_10524 = add i32 %v0_10524, 4
  %v2_10524 = inttoptr i32 %v1_10524 to i32*
  %v3_10524 = load i32, i32* %v2_10524, align 4
  store i32 %v3_10524, i32* %r0.global-to-local, align 4
  %v0_10528 = load i32, i32* @r5, align 4
  br label %dec_label_pc_10530

dec_label_pc_10530:                               ; preds = %dec_label_pc_10d1c, %.thread90
  %storemerge8 = phi i32 [ %v2_10b6c, %dec_label_pc_10d1c ], [ %v0_10528, %.thread90 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10d1c ], [ 3, %.thread90 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10534 = inttoptr i32 %storemerge8 to i32*
  %v5_10534 = call i32 @send(i32 16384, i32* %v4_10534, i32 %storemerge, i32 16384)
  store i32 %v5_10534, i32* %r0.global-to-local, align 4
  %v0_10538 = load i32, i32* @r6, align 4
  %v1_10538 = add i32 %v0_10538, 24
  %v2_10538 = inttoptr i32 %v1_10538 to i32*
  %v3_10538 = load i32, i32* %v2_10538, align 4
  store i32 %v3_10538, i32* %ip.global-to-local, align 4
  %v0_1053c = load i32, i32* @r7, align 4
  %v1_1053c = add i32 %v0_1053c, 3
  store i32 %v1_1053c, i32* @r7, align 4
  %v3_10540 = icmp uge i32 %v1_1053c, %v3_10538
  store i1 %v3_10540, i1* %cpsr_c.global-to-local, align 1
  %v9_10540 = icmp eq i32 %v1_1053c, %v3_10538
  store i1 %v9_10540, i1* %cpsr_z.global-to-local, align 1
  %v0_10544 = load i32, i32* @r5, align 4
  %v1_10544 = add i32 %v0_10544, 3
  store i32 %v1_10544, i32* @r5, align 4
  %v0_10548 = load i32, i32* @r4, align 4
  %v1_10548 = add i32 %v0_10548, 3
  store i32 %v1_10548, i32* @r4, align 4
  %v5_1054c = icmp slt i32 %v1_1053c, %v3_10538
  br i1 %v5_1054c, label %dec_label_pc_104a8, label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_104a0.loopexit, %dec_label_pc_104a8, %dec_label_pc_10530, %dec_label_pc_104e0, %dec_label_pc_104b4, %dec_label_pc_10b50.dec_label_pc_10550.loopexit_crit_edge
  %v6_10558 = phi i32 [ %v0_10b78, %dec_label_pc_10b50.dec_label_pc_10550.loopexit_crit_edge ], [ %v6_10558200, %dec_label_pc_104a8 ], [ %v0_10538, %dec_label_pc_10530 ], [ %v6_10558200, %dec_label_pc_104e0 ], [ %v6_10558200, %dec_label_pc_104b4 ], [ %v6_10558200, %dec_label_pc_104a0.loopexit ]
  %v0_10550 = phi i32 [ %v0_10550.pre.pre, %dec_label_pc_10b50.dec_label_pc_10550.loopexit_crit_edge ], [ %v1_104d0, %dec_label_pc_104a8 ], [ %v1_1053c, %dec_label_pc_10530 ], [ %v1_104d0, %dec_label_pc_104e0 ], [ %v1_104d0, %dec_label_pc_104b4 ], [ %v2_104d0, %dec_label_pc_104a0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10550 = icmp eq i32 %v0_10550, 0
  store i1 %v2_10550, i1* %cpsr_z.global-to-local, align 1
  %tmp352 = icmp slt i32 %v0_10550, 1
  br i1 %tmp352, label %dec_label_pc_10560, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_10550
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10558 = add i32 %v6_10558, 12
  %v8_10558 = inttoptr i32 %v7_10558 to i32*
  store i32 3, i32* %v8_10558, align 4
  br label %dec_label_pc_10910

dec_label_pc_10560:                               ; preds = %dec_label_pc_10550, %dec_label_pc_10af0, %dec_label_pc_10a3c, %dec_label_pc_10988, %dec_label_pc_105d4, %dec_label_pc_10c58, %dec_label_pc_1082c, %dec_label_pc_10704, %dec_label_pc_1066c
  %v0_10560 = phi i32 [ %v1_10ae4, %dec_label_pc_10af0 ], [ %v1_10a30, %dec_label_pc_10a3c ], [ %v1_1097c, %dec_label_pc_10988 ], [ %v0_105d4, %dec_label_pc_105d4 ], [ %v0_10c50, %dec_label_pc_10c58 ], [ %v1_10820, %dec_label_pc_1082c ], [ %v1_106f8, %dec_label_pc_10704 ], [ %v0_1066c, %dec_label_pc_1066c ], [ %v0_10550, %dec_label_pc_10550 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10560 = icmp eq i32 %v0_10560, 0
  store i1 %v2_10560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10560, label %dec_label_pc_103d4.loopexit, label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10560
  %v0_10568 = load i32, i32* @r6, align 4
  %v1_10568 = add i32 %v0_10568, 24
  %v2_10568 = inttoptr i32 %v1_10568 to i32*
  %v3_10568 = load i32, i32* %v2_10568, align 4
  store i32 %v3_10568, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10910

dec_label_pc_10570:                               ; preds = %dec_label_pc_10454
  %v1_10570 = add i32 %v0_10454, 24
  %v2_10570 = inttoptr i32 %v1_10570 to i32*
  %v3_10570 = load i32, i32* %v2_10570, align 4
  store i32 %v3_10570, i32* %r3.global-to-local, align 4
  %v1_10574 = add i32 %v3_10570, -1
  store i32 %v1_10574, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10578 = icmp eq i32 %v1_10574, 0
  store i1 %v2_10578, i1* %cpsr_z.global-to-local, align 1
  %v5_1057c = icmp sgt i32 %v1_10574, 0
  br i1 %v5_1057c, label %dec_label_pc_105a4, label %dec_label_pc_10334

dec_label_pc_10584:                               ; preds = %bb353
  %v2_10584 = icmp ugt i8 %v3_105a8, 35
  store i1 %v2_10584, i1* %cpsr_c.global-to-local, align 1
  %v7_10584 = icmp eq i8 %v3_105a8, 36
  store i1 %v7_10584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10584, label %dec_label_pc_105b8, label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_10584
  %v2_1058c = icmp ugt i8 %v3_105a8, 34
  store i1 %v2_1058c, i1* %cpsr_c.global-to-local, align 1
  %v7_1058c = icmp eq i8 %v3_105a8, 35
  store i1 %v7_1058c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1058c, label %dec_label_pc_105b8, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_1058c
  %v2_10594 = icmp ugt i8 %v3_105a8, 36
  store i1 %v2_10594, i1* %cpsr_c.global-to-local, align 1
  %v7_10594 = icmp eq i8 %v3_105a8, 37
  store i1 %v7_10594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10594, label %dec_label_pc_105b8, label %dec_label_pc_1059c

dec_label_pc_1059c:                               ; preds = %dec_label_pc_10594
  %v1_1059c = add i32 %v0_105b8, -1
  store i32 %v1_1059c, i32* %r0.global-to-local, align 4
  %v2_1059c = icmp ne i32 %v0_105b8, 0
  store i1 %v2_1059c, i1* %cpsr_c.global-to-local, align 1
  %v7_1059c = icmp eq i32 %v0_105b8, 1
  store i1 %v7_1059c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1059c, label %dec_label_pc_10334, label %dec_label_pc_105a4

dec_label_pc_105a4:                               ; preds = %dec_label_pc_10570, %dec_label_pc_1059c
  %v0_105b8 = phi i32 [ %v1_1059c, %dec_label_pc_1059c ], [ %v1_10574, %dec_label_pc_10570 ]
  %v2_105a4 = add i32 %v0_105b8, %v0_10454
  store i32 %v2_105a4, i32* %r3.global-to-local, align 4
  %v1_105a8 = add i32 %v2_105a4, 28
  %v2_105a8 = inttoptr i32 %v1_105a8 to i8*
  %v3_105a8 = load i8, i8* %v2_105a8, align 1
  %v4_105a8 = zext i8 %v3_105a8 to i32
  store i32 %v4_105a8, i32* %r3.global-to-local, align 4
  %v2_105ac = icmp ugt i8 %v3_105a8, 61
  store i1 %v2_105ac, i1* %cpsr_c.global-to-local, align 1
  %v7_105ac = icmp eq i8 %v3_105a8, 62
  store i1 %v7_105ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105ac, label %dec_label_pc_105b8, label %bb353

bb353:                                            ; preds = %dec_label_pc_105a4
  %v3_105b0 = icmp ugt i8 %v3_105a8, 57
  store i1 %v3_105b0, i1* %cpsr_c.global-to-local, align 1
  %v8_105b0 = icmp eq i8 %v3_105a8, 58
  store i1 %v8_105b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_105b0, label %dec_label_pc_105b8, label %dec_label_pc_10584

dec_label_pc_105b8:                               ; preds = %dec_label_pc_105a4, %bb353, %dec_label_pc_10584, %dec_label_pc_10594, %dec_label_pc_1058c
  %v1_105b8 = add i32 %v0_105b8, 1
  store i32 %v1_105b8, i32* @r7, align 4
  %v2_105bc = icmp eq i32 %v1_105b8, -1
  store i1 %v2_105bc, i1* %cpsr_c.global-to-local, align 1
  %v7_105bc = icmp eq i32 %v0_105b8, -2
  store i1 %v7_105bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105bc, label %dec_label_pc_10334, label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_105b8
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_105c8 = call i32 @function_10ea4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_105d0 = call i32 @function_10ea4(i32 27)
  store i32 %v1_105d0, i32* %r0.global-to-local, align 4
  %v0_105d4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_105d4

dec_label_pc_105d4:                               ; preds = %dec_label_pc_103bc, %dec_label_pc_105c4
  %v0_105d4 = phi i32 [ %v0_103cc, %dec_label_pc_103bc ], [ %v0_105d4.pre, %dec_label_pc_105c4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105d4 = icmp eq i32 %v0_105d4, 0
  store i1 %v2_105d4, i1* %cpsr_z.global-to-local, align 1
  %tmp354 = icmp slt i32 %v0_105d4, 1
  br i1 %tmp354, label %dec_label_pc_10560, label %dec_label_pc_105dc

dec_label_pc_105dc:                               ; preds = %dec_label_pc_105d4
  %v0_105dc = load i32, i32* @r6, align 4
  %v1_105dc = inttoptr i32 %v0_105dc to i32*
  %v2_105dc = load i32, i32* %v1_105dc, align 4
  store i32 %v2_105dc, i32* %r3.global-to-local, align 4
  %v1_105e0 = add i32 %v0_105dc, 4
  %v2_105e0 = inttoptr i32 %v1_105e0 to i32*
  %v3_105e0 = load i32, i32* %v2_105e0, align 4
  store i32 %v3_105e0, i32* %r0.global-to-local, align 4
  %v1_105e4 = add i32 %v2_105dc, 12
  %v2_105e4 = inttoptr i32 %v1_105e4 to i8*
  %v3_105e4 = load i8, i8* %v2_105e4, align 1
  %v4_105e4 = zext i8 %v3_105e4 to i32
  store i32 %v4_105e4, i32* %r2.global-to-local, align 4
  %v1_105e8 = inttoptr i32 %v2_105dc to i32*
  %v2_105e8 = load i32, i32* %v1_105e8, align 4
  store i32 %v2_105e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_105f0 = inttoptr i32 %v2_105e8 to i32*
  %v5_105f0 = call i32 @send(i32 %v3_105e0, i32* %v4_105f0, i32 %v4_105e4, i32 16384)
  store i32 %v5_105f0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_105f8 = load i32, i32* @r6, align 4
  %v1_105f8 = add i32 %v0_105f8, 4
  %v2_105f8 = inttoptr i32 %v1_105f8 to i32*
  %v3_105f8 = load i32, i32* %v2_105f8, align 4
  store i32 %v3_105f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10604 = call i32 @send(i32 %v3_105f8, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 %v5_10604, i32* %r0.global-to-local, align 4
  %v0_10608 = load i32, i32* @r6, align 4
  %v1_10608 = add i32 %v0_10608, 24
  %v2_10608 = inttoptr i32 %v1_10608 to i32*
  %v3_10608 = load i32, i32* %v2_10608, align 4
  store i32 %v3_10608, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10610 = add i32 %v0_10608, 12
  %v3_10610 = inttoptr i32 %v2_10610 to i32*
  store i32 4, i32* %v3_10610, align 4
  br label %dec_label_pc_10910

dec_label_pc_10618:                               ; preds = %dec_label_pc_10454
  %v1_10618 = add i32 %v0_10454, 24
  %v2_10618 = inttoptr i32 %v1_10618 to i32*
  %v3_10618 = load i32, i32* %v2_10618, align 4
  store i32 %v3_10618, i32* %r3.global-to-local, align 4
  %v1_1061c = add i32 %v3_10618, -1
  store i32 %v1_1061c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10620 = icmp eq i32 %v1_1061c, 0
  store i1 %v2_10620, i1* %cpsr_z.global-to-local, align 1
  %v5_10624 = icmp sgt i32 %v1_1061c, 0
  br i1 %v5_10624, label %dec_label_pc_10644, label %dec_label_pc_10bb8

dec_label_pc_1062c:                               ; preds = %bb355
  %v2_1062c = icmp ugt i8 %v3_10648, 35
  store i1 %v2_1062c, i1* %cpsr_c.global-to-local, align 1
  %v7_1062c = icmp eq i8 %v3_10648, 36
  store i1 %v7_1062c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1062c, label %dec_label_pc_10658, label %dec_label_pc_10634

dec_label_pc_10634:                               ; preds = %dec_label_pc_1062c
  %v2_10634 = icmp ugt i8 %v3_10648, 34
  store i1 %v2_10634, i1* %cpsr_c.global-to-local, align 1
  %v7_10634 = icmp eq i8 %v3_10648, 35
  store i1 %v7_10634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10634, label %dec_label_pc_10658, label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %dec_label_pc_10634
  %v1_1063c = add i32 %v0_10658, -1
  store i32 %v1_1063c, i32* %r0.global-to-local, align 4
  %v2_1063c = icmp ne i32 %v0_10658, 0
  store i1 %v2_1063c, i1* %cpsr_c.global-to-local, align 1
  %v7_1063c = icmp eq i32 %v0_10658, 1
  store i1 %v7_1063c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1063c, label %dec_label_pc_10bb8, label %dec_label_pc_10644

dec_label_pc_10644:                               ; preds = %dec_label_pc_10618, %dec_label_pc_1063c
  %v0_10658 = phi i32 [ %v1_1063c, %dec_label_pc_1063c ], [ %v1_1061c, %dec_label_pc_10618 ]
  %v2_10644 = add i32 %v0_10658, %v0_10454
  store i32 %v2_10644, i32* %r3.global-to-local, align 4
  %v1_10648 = add i32 %v2_10644, 28
  %v2_10648 = inttoptr i32 %v1_10648 to i8*
  %v3_10648 = load i8, i8* %v2_10648, align 1
  %v4_10648 = zext i8 %v3_10648 to i32
  store i32 %v4_10648, i32* %r3.global-to-local, align 4
  %v2_1064c = icmp ugt i8 %v3_10648, 61
  store i1 %v2_1064c, i1* %cpsr_c.global-to-local, align 1
  %v7_1064c = icmp eq i8 %v3_10648, 62
  store i1 %v7_1064c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1064c, label %dec_label_pc_10658, label %bb355

bb355:                                            ; preds = %dec_label_pc_10644
  %v3_10650 = icmp ugt i8 %v3_10648, 57
  store i1 %v3_10650, i1* %cpsr_c.global-to-local, align 1
  %v8_10650 = icmp eq i8 %v3_10648, 58
  store i1 %v8_10650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10650, label %dec_label_pc_10658, label %dec_label_pc_1062c

dec_label_pc_10658:                               ; preds = %dec_label_pc_10644, %bb355, %dec_label_pc_10634, %dec_label_pc_1062c
  %v1_10658 = add i32 %v0_10658, 1
  store i32 %v1_10658, i32* @r7, align 4
  %v2_1065c = icmp eq i32 %v1_10658, -1
  store i1 %v2_1065c, i1* %cpsr_c.global-to-local, align 1
  %v7_1065c = icmp eq i32 %v0_10658, -2
  store i1 %v7_1065c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1065c, label %dec_label_pc_10bb8, label %dec_label_pc_10664

dec_label_pc_10664:                               ; preds = %dec_label_pc_10658
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10668 = call i32 @function_10ea4(i32 25)
  store i32 %v1_10668, i32* %r0.global-to-local, align 4
  %v0_1066c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1066c

dec_label_pc_1066c:                               ; preds = %dec_label_pc_10bf8, %dec_label_pc_10664
  %v0_1066c = phi i32 [ %v0_10c00, %dec_label_pc_10bf8 ], [ %v0_1066c.pre, %dec_label_pc_10664 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1066c = icmp eq i32 %v0_1066c, 0
  store i1 %v2_1066c, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_1066c, 1
  br i1 %tmp356, label %dec_label_pc_10560, label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_1066c
  %v0_10674 = load i32, i32* @r6, align 4
  %v1_10674 = inttoptr i32 %v0_10674 to i32*
  %v2_10674 = load i32, i32* %v1_10674, align 4
  store i32 %v2_10674, i32* %r3.global-to-local, align 4
  %v1_10678 = add i32 %v0_10674, 4
  %v2_10678 = inttoptr i32 %v1_10678 to i32*
  %v3_10678 = load i32, i32* %v2_10678, align 4
  store i32 %v3_10678, i32* %r0.global-to-local, align 4
  %v1_1067c = add i32 %v2_10674, 13
  %v2_1067c = inttoptr i32 %v1_1067c to i8*
  %v3_1067c = load i8, i8* %v2_1067c, align 1
  %v4_1067c = zext i8 %v3_1067c to i32
  store i32 %v4_1067c, i32* %r2.global-to-local, align 4
  %v1_10680 = add i32 %v2_10674, 4
  %v2_10680 = inttoptr i32 %v1_10680 to i32*
  %v3_10680 = load i32, i32* %v2_10680, align 4
  store i32 %v3_10680, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10688 = inttoptr i32 %v3_10680 to i32*
  %v5_10688 = call i32 @send(i32 %v3_10678, i32* %v4_10688, i32 %v4_1067c, i32 16384)
  store i32 %v5_10688, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10690 = load i32, i32* @r6, align 4
  %v1_10690 = add i32 %v0_10690, 4
  %v2_10690 = inttoptr i32 %v1_10690 to i32*
  %v3_10690 = load i32, i32* %v2_10690, align 4
  store i32 %v3_10690, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1069c = call i32 @send(i32 %v3_10690, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 %v5_1069c, i32* %r0.global-to-local, align 4
  %v0_106a0 = load i32, i32* @r6, align 4
  %v1_106a0 = add i32 %v0_106a0, 24
  %v2_106a0 = inttoptr i32 %v1_106a0 to i32*
  %v3_106a0 = load i32, i32* %v2_106a0, align 4
  store i32 %v3_106a0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_106a8 = add i32 %v0_106a0, 12
  %v3_106a8 = inttoptr i32 %v2_106a8 to i32*
  store i32 5, i32* %v3_106a8, align 4
  br label %dec_label_pc_10910

dec_label_pc_106b0:                               ; preds = %dec_label_pc_10454
  %v1_106b0 = add i32 %v0_10454, 24
  %v2_106b0 = inttoptr i32 %v1_106b0 to i32*
  %v3_106b0 = load i32, i32* %v2_106b0, align 4
  store i32 %v3_106b0, i32* %ip.global-to-local, align 4
  %v1_106b4 = add i32 %v3_106b0, -1
  store i32 %v1_106b4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106b8 = icmp eq i32 %v1_106b4, 0
  store i1 %v2_106b8, i1* %cpsr_z.global-to-local, align 1
  %v5_106bc = icmp sgt i32 %v1_106b4, 0
  br i1 %v5_106bc, label %dec_label_pc_106e4, label %dec_label_pc_103d8.backedge.thread

dec_label_pc_106c4:                               ; preds = %bb357
  %v2_106c4 = icmp ugt i8 %v3_106e8, 35
  store i1 %v2_106c4, i1* %cpsr_c.global-to-local, align 1
  %v7_106c4 = icmp eq i8 %v3_106e8, 36
  store i1 %v7_106c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106c4, label %dec_label_pc_106f8, label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106c4
  %v2_106cc = icmp ugt i8 %v3_106e8, 34
  store i1 %v2_106cc, i1* %cpsr_c.global-to-local, align 1
  %v7_106cc = icmp eq i8 %v3_106e8, 35
  store i1 %v7_106cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106cc, label %dec_label_pc_106f8, label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_106cc
  %v2_106d4 = icmp ugt i8 %v3_106e8, 36
  store i1 %v2_106d4, i1* %cpsr_c.global-to-local, align 1
  %v7_106d4 = icmp eq i8 %v3_106e8, 37
  store i1 %v7_106d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106d4, label %dec_label_pc_106f8, label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106d4
  %v1_106dc = add i32 %v0_106f8, -1
  store i32 %v1_106dc, i32* %r0.global-to-local, align 4
  %v2_106dc = icmp ne i32 %v0_106f8, 0
  store i1 %v2_106dc, i1* %cpsr_c.global-to-local, align 1
  %v7_106dc = icmp eq i32 %v0_106f8, 1
  store i1 %v7_106dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106dc, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_106e4

dec_label_pc_106e4:                               ; preds = %dec_label_pc_106b0, %dec_label_pc_106dc
  %v0_106f8 = phi i32 [ %v1_106dc, %dec_label_pc_106dc ], [ %v1_106b4, %dec_label_pc_106b0 ]
  %v2_106e4 = add i32 %v0_106f8, %v0_10454
  store i32 %v2_106e4, i32* %r3.global-to-local, align 4
  %v1_106e8 = add i32 %v2_106e4, 28
  %v2_106e8 = inttoptr i32 %v1_106e8 to i8*
  %v3_106e8 = load i8, i8* %v2_106e8, align 1
  %v4_106e8 = zext i8 %v3_106e8 to i32
  store i32 %v4_106e8, i32* %r3.global-to-local, align 4
  %v2_106ec = icmp ugt i8 %v3_106e8, 61
  store i1 %v2_106ec, i1* %cpsr_c.global-to-local, align 1
  %v7_106ec = icmp eq i8 %v3_106e8, 62
  store i1 %v7_106ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106ec, label %dec_label_pc_106f8, label %bb357

bb357:                                            ; preds = %dec_label_pc_106e4
  %v3_106f0 = icmp ugt i8 %v3_106e8, 57
  store i1 %v3_106f0, i1* %cpsr_c.global-to-local, align 1
  %v8_106f0 = icmp eq i8 %v3_106e8, 58
  store i1 %v8_106f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106f0, label %dec_label_pc_106f8, label %dec_label_pc_106c4

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106e4, %bb357, %dec_label_pc_106d4, %dec_label_pc_106cc, %dec_label_pc_106c4
  %v1_106f8 = add i32 %v0_106f8, 1
  store i32 %v1_106f8, i32* @r7, align 4
  %v2_106fc = icmp eq i32 %v1_106f8, -1
  store i1 %v2_106fc, i1* %cpsr_c.global-to-local, align 1
  %v7_106fc = icmp eq i32 %v0_106f8, -2
  store i1 %v7_106fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106fc, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10704

dec_label_pc_10704:                               ; preds = %dec_label_pc_106f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10704 = icmp eq i32 %v1_106f8, 0
  store i1 %v2_10704, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v1_106f8, 1
  br i1 %tmp358, label %dec_label_pc_10560, label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_10704
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10710 = call i32 @function_10f5c(i32 5)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_10720 = call i32 @function_10e78(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_10720, i32* %r0.global-to-local, align 4
  %v3_10724 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10724, i32* %r2.global-to-local, align 4
  store i32 %v3_10720, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10730 = load i32, i32* @r6, align 4
  %v1_10730 = add i32 %v0_10730, 4
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* %r0.global-to-local, align 4
  %v4_10734 = inttoptr i32 %v3_10720 to i32*
  %v5_10734 = call i32 @send(i32 %v3_10730, i32* %v4_10734, i32 %v3_10724, i32 16384)
  store i32 %v5_10734, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10744 = load i32, i32* @r6, align 4
  %v1_10744 = add i32 %v0_10744, 4
  %v2_10744 = inttoptr i32 %v1_10744 to i32*
  %v3_10744 = load i32, i32* %v2_10744, align 4
  store i32 %v3_10744, i32* %r0.global-to-local, align 4
  %v5_10748 = call i32 @send(i32 %v3_10744, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10750 = call i32 @function_10ea4(i32 5)
  store i32 %v1_10750, i32* %r0.global-to-local, align 4
  %v0_10754 = load i32, i32* @r6, align 4
  %v1_10754 = add i32 %v0_10754, 24
  %v2_10754 = inttoptr i32 %v1_10754 to i32*
  %v3_10754 = load i32, i32* %v2_10754, align 4
  store i32 %v3_10754, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1075c = add i32 %v0_10754, 12
  %v3_1075c = inttoptr i32 %v2_1075c to i32*
  store i32 6, i32* %v3_1075c, align 4
  br label %dec_label_pc_10910

dec_label_pc_107d8:                               ; preds = %dec_label_pc_10454
  %v1_107d8 = add i32 %v0_10454, 24
  %v2_107d8 = inttoptr i32 %v1_107d8 to i32*
  %v3_107d8 = load i32, i32* %v2_107d8, align 4
  store i32 %v3_107d8, i32* %ip.global-to-local, align 4
  %v1_107dc = add i32 %v3_107d8, -1
  store i32 %v1_107dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107e0 = icmp eq i32 %v1_107dc, 0
  store i1 %v2_107e0, i1* %cpsr_z.global-to-local, align 1
  %v5_107e4 = icmp sgt i32 %v1_107dc, 0
  br i1 %v5_107e4, label %dec_label_pc_1080c, label %dec_label_pc_103d8.backedge.thread

dec_label_pc_107ec:                               ; preds = %bb359
  %v2_107ec = icmp ugt i8 %v3_10810, 35
  store i1 %v2_107ec, i1* %cpsr_c.global-to-local, align 1
  %v7_107ec = icmp eq i8 %v3_10810, 36
  store i1 %v7_107ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107ec, label %dec_label_pc_10820, label %dec_label_pc_107f4

dec_label_pc_107f4:                               ; preds = %dec_label_pc_107ec
  %v2_107f4 = icmp ugt i8 %v3_10810, 34
  store i1 %v2_107f4, i1* %cpsr_c.global-to-local, align 1
  %v7_107f4 = icmp eq i8 %v3_10810, 35
  store i1 %v7_107f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107f4, label %dec_label_pc_10820, label %dec_label_pc_107fc

dec_label_pc_107fc:                               ; preds = %dec_label_pc_107f4
  %v2_107fc = icmp ugt i8 %v3_10810, 36
  store i1 %v2_107fc, i1* %cpsr_c.global-to-local, align 1
  %v7_107fc = icmp eq i8 %v3_10810, 37
  store i1 %v7_107fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107fc, label %dec_label_pc_10820, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107fc
  %v1_10804 = add i32 %v0_10820, -1
  store i32 %v1_10804, i32* %r0.global-to-local, align 4
  %v2_10804 = icmp ne i32 %v0_10820, 0
  store i1 %v2_10804, i1* %cpsr_c.global-to-local, align 1
  %v7_10804 = icmp eq i32 %v0_10820, 1
  store i1 %v7_10804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10804, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_107d8, %dec_label_pc_10804
  %v0_10820 = phi i32 [ %v1_10804, %dec_label_pc_10804 ], [ %v1_107dc, %dec_label_pc_107d8 ]
  %v2_1080c = add i32 %v0_10820, %v0_10454
  store i32 %v2_1080c, i32* %r3.global-to-local, align 4
  %v1_10810 = add i32 %v2_1080c, 28
  %v2_10810 = inttoptr i32 %v1_10810 to i8*
  %v3_10810 = load i8, i8* %v2_10810, align 1
  %v4_10810 = zext i8 %v3_10810 to i32
  store i32 %v4_10810, i32* %r3.global-to-local, align 4
  %v2_10814 = icmp ugt i8 %v3_10810, 61
  store i1 %v2_10814, i1* %cpsr_c.global-to-local, align 1
  %v7_10814 = icmp eq i8 %v3_10810, 62
  store i1 %v7_10814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10814, label %dec_label_pc_10820, label %bb359

bb359:                                            ; preds = %dec_label_pc_1080c
  %v3_10818 = icmp ugt i8 %v3_10810, 57
  store i1 %v3_10818, i1* %cpsr_c.global-to-local, align 1
  %v8_10818 = icmp eq i8 %v3_10810, 58
  store i1 %v8_10818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10818, label %dec_label_pc_10820, label %dec_label_pc_107ec

dec_label_pc_10820:                               ; preds = %dec_label_pc_1080c, %bb359, %dec_label_pc_107fc, %dec_label_pc_107f4, %dec_label_pc_107ec
  %v1_10820 = add i32 %v0_10820, 1
  store i32 %v1_10820, i32* @r7, align 4
  %v2_10824 = icmp eq i32 %v1_10820, -1
  store i1 %v2_10824, i1* %cpsr_c.global-to-local, align 1
  %v7_10824 = icmp eq i32 %v0_10820, -2
  store i1 %v7_10824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10824, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_1082c

dec_label_pc_1082c:                               ; preds = %dec_label_pc_10820
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1082c = icmp eq i32 %v1_10820, 0
  store i1 %v2_1082c, i1* %cpsr_z.global-to-local, align 1
  %tmp360 = icmp slt i32 %v1_10820, 1
  br i1 %tmp360, label %dec_label_pc_10560, label %dec_label_pc_10834

dec_label_pc_10834:                               ; preds = %dec_label_pc_1082c
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10838 = call i32 @function_10f5c(i32 6)
  store i32 %v2_10840, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10848 = call i32 @function_10e78(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10848, i32* %r0.global-to-local, align 4
  %v3_1084c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1084c, i32* %r2.global-to-local, align 4
  store i32 %v3_10848, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10858 = load i32, i32* @r6, align 4
  %v1_10858 = add i32 %v0_10858, 4
  %v2_10858 = inttoptr i32 %v1_10858 to i32*
  %v3_10858 = load i32, i32* %v2_10858, align 4
  store i32 %v3_10858, i32* %r0.global-to-local, align 4
  %v4_1085c = inttoptr i32 %v3_10848 to i32*
  %v5_1085c = call i32 @send(i32 %v3_10858, i32* %v4_1085c, i32 %v3_1084c, i32 16384)
  store i32 %v5_1085c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1086c = load i32, i32* @r6, align 4
  %v1_1086c = add i32 %v0_1086c, 4
  %v2_1086c = inttoptr i32 %v1_1086c to i32*
  %v3_1086c = load i32, i32* %v2_1086c, align 4
  store i32 %v3_1086c, i32* %r0.global-to-local, align 4
  %v5_10870 = call i32 @send(i32 %v3_1086c, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10878 = call i32 @function_10ea4(i32 6)
  store i32 %v1_10878, i32* %r0.global-to-local, align 4
  %v0_1087c = load i32, i32* @r6, align 4
  %v1_1087c = add i32 %v0_1087c, 24
  %v2_1087c = inttoptr i32 %v1_1087c to i32*
  %v3_1087c = load i32, i32* %v2_1087c, align 4
  store i32 %v3_1087c, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10884 = add i32 %v0_1087c, 12
  %v3_10884 = inttoptr i32 %v2_10884 to i32*
  store i32 7, i32* %v3_10884, align 4
  br label %dec_label_pc_10910

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10454
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10890 = call i32 @function_10f5c(i32 10)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_108a0 = call i32 @function_10e78(i32 10, i32* nonnull %stack_var_-56)
  %v3_108a4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_108a0, i32* %r2.global-to-local, align 4
  %v1_108ac = add i32 %v3_108a4, -1
  store i32 %v1_108ac, i32* %r3.global-to-local, align 4
  %v0_108b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_108b0, i32* %r0.global-to-local, align 4
  %v0_108b4 = load i32, i32* @r6, align 4
  %v1_108b4 = add i32 %v0_108b4, 24
  %v2_108b4 = inttoptr i32 %v1_108b4 to i32*
  %v3_108b4 = load i32, i32* %v2_108b4, align 4
  store i32 %v3_108b4, i32* %r1.global-to-local, align 4
  %v4_108b8 = call i32 @function_115ec(i32 %v0_108b0, i32 %v3_108b4, i32 %v3_108a0, i32 %v1_108ac)
  %v2_108bc = icmp eq i32 %v4_108b8, -1
  store i1 %v2_108bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_108bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_108b8, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10c10 = call i32 @function_10ea4(i32 10)
  br i1 %v2_108bc, label %dec_label_pc_10c0c, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_1088c
  store i32 %v1_10c10, i32* %r0.global-to-local, align 4
  %v0_108d0 = load i32, i32* @r6, align 4
  %v1_108d0 = add i32 %v0_108d0, 4
  %v2_108d0 = inttoptr i32 %v1_108d0 to i32*
  %v3_108d0 = load i32, i32* %v2_108d0, align 4
  store i32 %v3_108d0, i32* %r0.global-to-local, align 4
  %v1_108d4 = call i32 @close(i32 %v3_108d0)
  store i32 %v1_108d4, i32* %r0.global-to-local, align 4
  %v0_108d8 = load i32, i32* @r6, align 4
  %v1_108d8 = add i32 %v0_108d8, 284
  %v2_108d8 = inttoptr i32 %v1_108d8 to i8*
  %v3_108d8 = load i8, i8* %v2_108d8, align 1
  %v4_108d8 = zext i8 %v3_108d8 to i32
  %v1_108dc = add nuw nsw i32 %v4_108d8, 1
  %v1_108e0 = urem i32 %v1_108dc, 256
  store i32 %v1_108e0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_108e8 = icmp ugt i32 %v1_108e0, 9
  store i1 %v2_108e8, i1* %cpsr_c.global-to-local, align 1
  %v7_108e8 = icmp eq i32 %v1_108e0, 10
  store i1 %v7_108e8, i1* %cpsr_z.global-to-local, align 1
  %v2_108ec = add i32 %v0_108d8, 4
  %v3_108ec = inttoptr i32 %v2_108ec to i32*
  store i32 -1, i32* %v3_108ec, align 4
  %v0_108f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_108f0 = trunc i32 %v0_108f0 to i8
  %v2_108f0 = load i32, i32* @r6, align 4
  %v3_108f0 = add i32 %v2_108f0, 284
  %v4_108f0 = inttoptr i32 %v3_108f0 to i8*
  store i8 %v1_108f0, i8* %v4_108f0, align 1
  %v0_108f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108f4, label %dec_label_pc_108f8, label %dec_label_pc_10d6c

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108c8
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10900 = load i32, i32* @r6, align 4
  %v1_10900 = add i32 %v0_10900, 24
  %v2_10900 = inttoptr i32 %v1_10900 to i32*
  %v3_10900 = load i32, i32* %v2_10900, align 4
  store i32 %v3_10900, i32* %ip.global-to-local, align 4
  %v3_10904 = add i32 %v0_10900, 284
  %v4_10904 = inttoptr i32 %v3_10904 to i8*
  store i8 0, i8* %v4_10904, align 1
  %v0_10908 = load i32, i32* %r0.global-to-local, align 4
  %v1_10908 = load i32, i32* @r6, align 4
  %v2_10908 = add i32 %v1_10908, 12
  %v3_10908 = inttoptr i32 %v2_10908 to i32*
  store i32 %v0_10908, i32* %v3_10908, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %.thread236, %dec_label_pc_10af8, %dec_label_pc_10a44, %dec_label_pc_10990, %dec_label_pc_10d6c, %dec_label_pc_105dc, %dec_label_pc_10568, %dec_label_pc_10ca8, %dec_label_pc_10834, %dec_label_pc_1070c, %dec_label_pc_10674, %dec_label_pc_108f8
  %v0_10910 = load i32, i32* %ip.global-to-local, align 4
  %v1_10910 = load i32, i32* @r7, align 4
  %v2_10910 = sub i32 %v0_10910, %v1_10910
  %v3_10910 = icmp uge i32 %v0_10910, %v1_10910
  store i1 %v3_10910, i1* %cpsr_c.global-to-local, align 1
  %v4_10910 = xor i32 %v1_10910, %v0_10910
  %v5_10910 = xor i32 %v2_10910, %v0_10910
  %v6_10910 = and i32 %v5_10910, %v4_10910
  %v7_10910 = icmp slt i32 %v6_10910, 0
  %v8_10910 = icmp slt i32 %v2_10910, 0
  %v9_10910 = icmp eq i32 %v0_10910, %v1_10910
  store i1 %v9_10910, i1* %cpsr_z.global-to-local, align 1
  %v2_10914 = xor i1 %v8_10910, %v7_10910
  %v0_10910.v1_10910 = select i1 %v2_10914, i32 %v0_10910, i32 %v1_10910
  store i32 %v0_10910.v1_10910, i32* %r1.global-to-local, align 4
  %v2_1091c = sub i32 %v0_10910, %v0_10910.v1_10910
  store i32 %v2_1091c, i32* %r2.global-to-local, align 4
  %v1_10920 = load i32, i32* @r6, align 4
  %v2_10920 = add i32 %v1_10920, 24
  %v3_10920 = inttoptr i32 %v2_10920 to i32*
  store i32 %v2_1091c, i32* %v3_10920, align 4
  %v0_10924 = load i32, i32* %r8.global-to-local, align 4
  %v1_10924 = load i32, i32* %r1.global-to-local, align 4
  %v2_10924 = add i32 %v1_10924, %v0_10924
  store i32 %v2_10924, i32* %r1.global-to-local, align 4
  store i32 %v0_10924, i32* %r0.global-to-local, align 4
  %v3_1092c = inttoptr i32 %v0_10924 to i32*
  %v4_1092c = inttoptr i32 %v2_10924 to i32*
  %v5_1092c = call i32* @memmove(i32* %v3_1092c, i32* %v4_1092c, i32 %v2_1091c)
  %v7_1092c = ptrtoint i32* %v5_1092c to i32
  store i32 %v7_1092c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10454

dec_label_pc_10934:                               ; preds = %dec_label_pc_10454
  %v1_10934 = add i32 %v0_10454, 24
  %v2_10934 = inttoptr i32 %v1_10934 to i32*
  %v3_10934 = load i32, i32* %v2_10934, align 4
  store i32 %v3_10934, i32* %ip.global-to-local, align 4
  %v1_10938 = add i32 %v3_10934, -1
  store i32 %v1_10938, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1093c = icmp eq i32 %v1_10938, 0
  store i1 %v2_1093c, i1* %cpsr_z.global-to-local, align 1
  %v5_10940 = icmp sgt i32 %v1_10938, 0
  br i1 %v5_10940, label %dec_label_pc_10968, label %dec_label_pc_103d8.backedge.thread

dec_label_pc_10948:                               ; preds = %bb363
  %v2_10948 = icmp ugt i8 %v3_1096c, 35
  store i1 %v2_10948, i1* %cpsr_c.global-to-local, align 1
  %v7_10948 = icmp eq i8 %v3_1096c, 36
  store i1 %v7_10948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10948, label %dec_label_pc_1097c, label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %dec_label_pc_10948
  %v2_10950 = icmp ugt i8 %v3_1096c, 34
  store i1 %v2_10950, i1* %cpsr_c.global-to-local, align 1
  %v7_10950 = icmp eq i8 %v3_1096c, 35
  store i1 %v7_10950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10950, label %dec_label_pc_1097c, label %dec_label_pc_10958

dec_label_pc_10958:                               ; preds = %dec_label_pc_10950
  %v2_10958 = icmp ugt i8 %v3_1096c, 36
  store i1 %v2_10958, i1* %cpsr_c.global-to-local, align 1
  %v7_10958 = icmp eq i8 %v3_1096c, 37
  store i1 %v7_10958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10958, label %dec_label_pc_1097c, label %dec_label_pc_10960

dec_label_pc_10960:                               ; preds = %dec_label_pc_10958
  %v1_10960 = add i32 %v0_1097c, -1
  store i32 %v1_10960, i32* %r0.global-to-local, align 4
  %v2_10960 = icmp ne i32 %v0_1097c, 0
  store i1 %v2_10960, i1* %cpsr_c.global-to-local, align 1
  %v7_10960 = icmp eq i32 %v0_1097c, 1
  store i1 %v7_10960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10960, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10968

dec_label_pc_10968:                               ; preds = %dec_label_pc_10934, %dec_label_pc_10960
  %v0_1097c = phi i32 [ %v1_10960, %dec_label_pc_10960 ], [ %v1_10938, %dec_label_pc_10934 ]
  %v2_10968 = add i32 %v0_1097c, %v0_10454
  store i32 %v2_10968, i32* %r3.global-to-local, align 4
  %v1_1096c = add i32 %v2_10968, 28
  %v2_1096c = inttoptr i32 %v1_1096c to i8*
  %v3_1096c = load i8, i8* %v2_1096c, align 1
  %v4_1096c = zext i8 %v3_1096c to i32
  store i32 %v4_1096c, i32* %r3.global-to-local, align 4
  %v2_10970 = icmp ugt i8 %v3_1096c, 61
  store i1 %v2_10970, i1* %cpsr_c.global-to-local, align 1
  %v7_10970 = icmp eq i8 %v3_1096c, 62
  store i1 %v7_10970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10970, label %dec_label_pc_1097c, label %bb363

bb363:                                            ; preds = %dec_label_pc_10968
  %v3_10974 = icmp ugt i8 %v3_1096c, 57
  store i1 %v3_10974, i1* %cpsr_c.global-to-local, align 1
  %v8_10974 = icmp eq i8 %v3_1096c, 58
  store i1 %v8_10974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10974, label %dec_label_pc_1097c, label %dec_label_pc_10948

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10968, %bb363, %dec_label_pc_10958, %dec_label_pc_10950, %dec_label_pc_10948
  %v1_1097c = add i32 %v0_1097c, 1
  store i32 %v1_1097c, i32* @r7, align 4
  %v2_10980 = icmp eq i32 %v1_1097c, -1
  store i1 %v2_10980, i1* %cpsr_c.global-to-local, align 1
  %v7_10980 = icmp eq i32 %v0_1097c, -2
  store i1 %v7_10980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10980, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10988

dec_label_pc_10988:                               ; preds = %dec_label_pc_1097c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10988 = icmp eq i32 %v1_1097c, 0
  store i1 %v2_10988, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v1_1097c, 1
  br i1 %tmp364, label %dec_label_pc_10560, label %dec_label_pc_10990

dec_label_pc_10990:                               ; preds = %dec_label_pc_10988
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10994 = call i32 @function_10f5c(i32 7)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_109a4 = call i32 @function_10e78(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_109a4, i32* %r0.global-to-local, align 4
  %v3_109a8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_109a8, i32* %r2.global-to-local, align 4
  store i32 %v3_109a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109b4 = load i32, i32* @r6, align 4
  %v1_109b4 = add i32 %v0_109b4, 4
  %v2_109b4 = inttoptr i32 %v1_109b4 to i32*
  %v3_109b4 = load i32, i32* %v2_109b4, align 4
  store i32 %v3_109b4, i32* %r0.global-to-local, align 4
  %v4_109b8 = inttoptr i32 %v3_109a4 to i32*
  %v5_109b8 = call i32 @send(i32 %v3_109b4, i32* %v4_109b8, i32 %v3_109a8, i32 16384)
  store i32 %v5_109b8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109c8 = load i32, i32* @r6, align 4
  %v1_109c8 = add i32 %v0_109c8, 4
  %v2_109c8 = inttoptr i32 %v1_109c8 to i32*
  %v3_109c8 = load i32, i32* %v2_109c8, align 4
  store i32 %v3_109c8, i32* %r0.global-to-local, align 4
  %v5_109cc = call i32 @send(i32 %v3_109c8, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_109d4 = call i32 @function_10ea4(i32 7)
  store i32 %v1_109d4, i32* %r0.global-to-local, align 4
  %v0_109d8 = load i32, i32* @r6, align 4
  %v1_109d8 = add i32 %v0_109d8, 24
  %v2_109d8 = inttoptr i32 %v1_109d8 to i32*
  %v3_109d8 = load i32, i32* %v2_109d8, align 4
  store i32 %v3_109d8, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_109e0 = add i32 %v0_109d8, 12
  %v3_109e0 = inttoptr i32 %v2_109e0 to i32*
  store i32 9, i32* %v3_109e0, align 4
  br label %dec_label_pc_10910

dec_label_pc_109e8:                               ; preds = %dec_label_pc_10454
  %v1_109e8 = add i32 %v0_10454, 24
  %v2_109e8 = inttoptr i32 %v1_109e8 to i32*
  %v3_109e8 = load i32, i32* %v2_109e8, align 4
  store i32 %v3_109e8, i32* %ip.global-to-local, align 4
  %v1_109ec = add i32 %v3_109e8, -1
  store i32 %v1_109ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109f0 = icmp eq i32 %v1_109ec, 0
  store i1 %v2_109f0, i1* %cpsr_z.global-to-local, align 1
  %v5_109f4 = icmp sgt i32 %v1_109ec, 0
  br i1 %v5_109f4, label %dec_label_pc_10a1c, label %dec_label_pc_103d8.backedge.thread

dec_label_pc_109fc:                               ; preds = %bb365
  %v2_109fc = icmp ugt i8 %v3_10a20, 35
  store i1 %v2_109fc, i1* %cpsr_c.global-to-local, align 1
  %v7_109fc = icmp eq i8 %v3_10a20, 36
  store i1 %v7_109fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109fc, label %dec_label_pc_10a30, label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109fc
  %v2_10a04 = icmp ugt i8 %v3_10a20, 34
  store i1 %v2_10a04, i1* %cpsr_c.global-to-local, align 1
  %v7_10a04 = icmp eq i8 %v3_10a20, 35
  store i1 %v7_10a04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a04, label %dec_label_pc_10a30, label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_10a04
  %v2_10a0c = icmp ugt i8 %v3_10a20, 36
  store i1 %v2_10a0c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a0c = icmp eq i8 %v3_10a20, 37
  store i1 %v7_10a0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a0c, label %dec_label_pc_10a30, label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %dec_label_pc_10a0c
  %v1_10a14 = add i32 %v0_10a30, -1
  store i32 %v1_10a14, i32* %r0.global-to-local, align 4
  %v2_10a14 = icmp ne i32 %v0_10a30, 0
  store i1 %v2_10a14, i1* %cpsr_c.global-to-local, align 1
  %v7_10a14 = icmp eq i32 %v0_10a30, 1
  store i1 %v7_10a14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a14, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_109e8, %dec_label_pc_10a14
  %v0_10a30 = phi i32 [ %v1_10a14, %dec_label_pc_10a14 ], [ %v1_109ec, %dec_label_pc_109e8 ]
  %v2_10a1c = add i32 %v0_10a30, %v0_10454
  store i32 %v2_10a1c, i32* %r3.global-to-local, align 4
  %v1_10a20 = add i32 %v2_10a1c, 28
  %v2_10a20 = inttoptr i32 %v1_10a20 to i8*
  %v3_10a20 = load i8, i8* %v2_10a20, align 1
  %v4_10a20 = zext i8 %v3_10a20 to i32
  store i32 %v4_10a20, i32* %r3.global-to-local, align 4
  %v2_10a24 = icmp ugt i8 %v3_10a20, 61
  store i1 %v2_10a24, i1* %cpsr_c.global-to-local, align 1
  %v7_10a24 = icmp eq i8 %v3_10a20, 62
  store i1 %v7_10a24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a24, label %dec_label_pc_10a30, label %bb365

bb365:                                            ; preds = %dec_label_pc_10a1c
  %v3_10a28 = icmp ugt i8 %v3_10a20, 57
  store i1 %v3_10a28, i1* %cpsr_c.global-to-local, align 1
  %v8_10a28 = icmp eq i8 %v3_10a20, 58
  store i1 %v8_10a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10a28, label %dec_label_pc_10a30, label %dec_label_pc_109fc

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a1c, %bb365, %dec_label_pc_10a0c, %dec_label_pc_10a04, %dec_label_pc_109fc
  %v1_10a30 = add i32 %v0_10a30, 1
  store i32 %v1_10a30, i32* @r7, align 4
  %v2_10a34 = icmp eq i32 %v1_10a30, -1
  store i1 %v2_10a34, i1* %cpsr_c.global-to-local, align 1
  %v7_10a34 = icmp eq i32 %v0_10a30, -2
  store i1 %v7_10a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a34, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10a3c

dec_label_pc_10a3c:                               ; preds = %dec_label_pc_10a30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a3c = icmp eq i32 %v1_10a30, 0
  store i1 %v2_10a3c, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v1_10a30, 1
  br i1 %tmp366, label %dec_label_pc_10560, label %dec_label_pc_10a44

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a3c
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10a48 = call i32 @function_10f5c(i32 8)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10a58 = call i32 @function_10e78(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_10a58, i32* %r0.global-to-local, align 4
  %v3_10a5c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a5c, i32* %r2.global-to-local, align 4
  store i32 %v3_10a58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a68 = load i32, i32* @r6, align 4
  %v1_10a68 = add i32 %v0_10a68, 4
  %v2_10a68 = inttoptr i32 %v1_10a68 to i32*
  %v3_10a68 = load i32, i32* %v2_10a68, align 4
  store i32 %v3_10a68, i32* %r0.global-to-local, align 4
  %v4_10a6c = inttoptr i32 %v3_10a58 to i32*
  %v5_10a6c = call i32 @send(i32 %v3_10a68, i32* %v4_10a6c, i32 %v3_10a5c, i32 16384)
  store i32 %v5_10a6c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a7c = load i32, i32* @r6, align 4
  %v1_10a7c = add i32 %v0_10a7c, 4
  %v2_10a7c = inttoptr i32 %v1_10a7c to i32*
  %v3_10a7c = load i32, i32* %v2_10a7c, align 4
  store i32 %v3_10a7c, i32* %r0.global-to-local, align 4
  %v5_10a80 = call i32 @send(i32 %v3_10a7c, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10a88 = call i32 @function_10ea4(i32 8)
  store i32 %v1_10a88, i32* %r0.global-to-local, align 4
  %v0_10a8c = load i32, i32* @r6, align 4
  %v1_10a8c = add i32 %v0_10a8c, 24
  %v2_10a8c = inttoptr i32 %v1_10a8c to i32*
  %v3_10a8c = load i32, i32* %v2_10a8c, align 4
  store i32 %v3_10a8c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10a94 = add i32 %v0_10a8c, 12
  %v3_10a94 = inttoptr i32 %v2_10a94 to i32*
  store i32 10, i32* %v3_10a94, align 4
  br label %dec_label_pc_10910

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10454
  %v1_10a9c = add i32 %v0_10454, 24
  %v2_10a9c = inttoptr i32 %v1_10a9c to i32*
  %v3_10a9c = load i32, i32* %v2_10a9c, align 4
  store i32 %v3_10a9c, i32* %ip.global-to-local, align 4
  %v1_10aa0 = add i32 %v3_10a9c, -1
  store i32 %v1_10aa0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10aa4 = icmp eq i32 %v1_10aa0, 0
  store i1 %v2_10aa4, i1* %cpsr_z.global-to-local, align 1
  %v5_10aa8 = icmp sgt i32 %v1_10aa0, 0
  br i1 %v5_10aa8, label %dec_label_pc_10ad0, label %dec_label_pc_103d8.backedge.thread

dec_label_pc_10ab0:                               ; preds = %bb367
  %v2_10ab0 = icmp ugt i8 %v3_10ad4, 35
  store i1 %v2_10ab0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ab0 = icmp eq i8 %v3_10ad4, 36
  store i1 %v7_10ab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ab0, label %dec_label_pc_10ae4, label %dec_label_pc_10ab8

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10ab0
  %v2_10ab8 = icmp ugt i8 %v3_10ad4, 34
  store i1 %v2_10ab8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ab8 = icmp eq i8 %v3_10ad4, 35
  store i1 %v7_10ab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ab8, label %dec_label_pc_10ae4, label %dec_label_pc_10ac0

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10ab8
  %v2_10ac0 = icmp ugt i8 %v3_10ad4, 36
  store i1 %v2_10ac0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac0 = icmp eq i8 %v3_10ad4, 37
  store i1 %v7_10ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ac0, label %dec_label_pc_10ae4, label %dec_label_pc_10ac8

dec_label_pc_10ac8:                               ; preds = %dec_label_pc_10ac0
  %v1_10ac8 = add i32 %v0_10ae4, -1
  store i32 %v1_10ac8, i32* %r0.global-to-local, align 4
  %v2_10ac8 = icmp ne i32 %v0_10ae4, 0
  store i1 %v2_10ac8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac8 = icmp eq i32 %v0_10ae4, 1
  store i1 %v7_10ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ac8, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10ad0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10a9c, %dec_label_pc_10ac8
  %v0_10ae4 = phi i32 [ %v1_10ac8, %dec_label_pc_10ac8 ], [ %v1_10aa0, %dec_label_pc_10a9c ]
  %v2_10ad0 = add i32 %v0_10ae4, %v0_10454
  store i32 %v2_10ad0, i32* %r3.global-to-local, align 4
  %v1_10ad4 = add i32 %v2_10ad0, 28
  %v2_10ad4 = inttoptr i32 %v1_10ad4 to i8*
  %v3_10ad4 = load i8, i8* %v2_10ad4, align 1
  %v4_10ad4 = zext i8 %v3_10ad4 to i32
  store i32 %v4_10ad4, i32* %r3.global-to-local, align 4
  %v2_10ad8 = icmp ugt i8 %v3_10ad4, 61
  store i1 %v2_10ad8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ad8 = icmp eq i8 %v3_10ad4, 62
  store i1 %v7_10ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ad8, label %dec_label_pc_10ae4, label %bb367

bb367:                                            ; preds = %dec_label_pc_10ad0
  %v3_10adc = icmp ugt i8 %v3_10ad4, 57
  store i1 %v3_10adc, i1* %cpsr_c.global-to-local, align 1
  %v8_10adc = icmp eq i8 %v3_10ad4, 58
  store i1 %v8_10adc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10adc, label %dec_label_pc_10ae4, label %dec_label_pc_10ab0

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ad0, %bb367, %dec_label_pc_10ac0, %dec_label_pc_10ab8, %dec_label_pc_10ab0
  %v1_10ae4 = add i32 %v0_10ae4, 1
  store i32 %v1_10ae4, i32* @r7, align 4
  %v2_10ae8 = icmp eq i32 %v1_10ae4, -1
  store i1 %v2_10ae8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ae8 = icmp eq i32 %v0_10ae4, -2
  store i1 %v7_10ae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ae8, label %dec_label_pc_103d8.backedge.thread501, label %dec_label_pc_10af0

dec_label_pc_10af0:                               ; preds = %dec_label_pc_10ae4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10af0 = icmp eq i32 %v1_10ae4, 0
  store i1 %v2_10af0, i1* %cpsr_z.global-to-local, align 1
  %tmp368 = icmp slt i32 %v1_10ae4, 1
  br i1 %tmp368, label %dec_label_pc_10560, label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10af0
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10afc = call i32 @function_10f5c(i32 4)
  store i32 %v2_10840, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_10b0c = call i32 @function_10e78(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_10b0c, i32* %r0.global-to-local, align 4
  %v3_10b10 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10b10, i32* %r2.global-to-local, align 4
  store i32 %v3_10b0c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b1c = load i32, i32* @r6, align 4
  %v1_10b1c = add i32 %v0_10b1c, 4
  %v2_10b1c = inttoptr i32 %v1_10b1c to i32*
  %v3_10b1c = load i32, i32* %v2_10b1c, align 4
  store i32 %v3_10b1c, i32* %r0.global-to-local, align 4
  %v4_10b20 = inttoptr i32 %v3_10b0c to i32*
  %v5_10b20 = call i32 @send(i32 %v3_10b1c, i32* %v4_10b20, i32 %v3_10b10, i32 16384)
  store i32 %v5_10b20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e58.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b30 = load i32, i32* @r6, align 4
  %v1_10b30 = add i32 %v0_10b30, 4
  %v2_10b30 = inttoptr i32 %v1_10b30 to i32*
  %v3_10b30 = load i32, i32* %v2_10b30, align 4
  store i32 %v3_10b30, i32* %r0.global-to-local, align 4
  %v5_10b34 = call i32 @send(i32 %v3_10b30, i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10b3c = call i32 @function_10ea4(i32 4)
  store i32 %v1_10b3c, i32* %r0.global-to-local, align 4
  %v0_10b40 = load i32, i32* @r6, align 4
  %v1_10b40 = add i32 %v0_10b40, 24
  %v2_10b40 = inttoptr i32 %v1_10b40 to i32*
  %v3_10b40 = load i32, i32* %v2_10b40, align 4
  store i32 %v3_10b40, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10b48 = add i32 %v0_10b40, 12
  %v3_10b48 = inttoptr i32 %v2_10b48 to i32*
  store i32 8, i32* %v3_10b48, align 4
  br label %dec_label_pc_10910

dec_label_pc_10b50:                               ; preds = %dec_label_pc_104d8
  store i32 ptrtoint (i32* @global_var_11e6a.251 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_10b5c, i32* %r0.global-to-local, align 4
  %v5_10b60 = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_11e6a.251, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_10b6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e61.253 to i32), i32* %r1.global-to-local, align 4
  %v5_10b74 = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_11e61.253, i32 9)
  %v7_10b74 = ptrtoint i32* %v5_10b74 to i32
  store i32 %v7_10b74, i32* %r0.global-to-local, align 4
  %v0_10b78 = load i32, i32* @r6, align 4
  %v1_10b78 = add i32 %v0_10b78, 24
  %v2_10b78 = inttoptr i32 %v1_10b78 to i32*
  %v3_10b78 = load i32, i32* %v2_10b78, align 4
  store i32 %v3_10b78, i32* %ip.global-to-local, align 4
  %v0_10b7c = load i32, i32* @r5, align 4
  %v1_10b7c = add i32 %v0_10b7c, 2
  store i32 %v1_10b7c, i32* %r2.global-to-local, align 4
  %v0_10b80 = load i32, i32* %r8.global-to-local, align 4
  %v2_10b80 = add i32 %v0_10b80, %v3_10b78
  store i32 %v2_10b80, i32* %r3.global-to-local, align 4
  %v3_10b84 = icmp uge i32 %v2_10b80, %v1_10b7c
  store i1 %v3_10b84, i1* %cpsr_c.global-to-local, align 1
  %v9_10b84 = icmp eq i32 %v2_10b80, %v1_10b7c
  store i1 %v9_10b84, i1* %cpsr_z.global-to-local, align 1
  %v2_10b88 = xor i1 %v3_10b84, true
  %v3_10b88 = or i1 %v9_10b84, %v2_10b88
  br i1 %v3_10b88, label %dec_label_pc_10b50.dec_label_pc_10550.loopexit_crit_edge, label %dec_label_pc_10b8c

dec_label_pc_10b50.dec_label_pc_10550.loopexit_crit_edge: ; preds = %dec_label_pc_10b50
  %v0_10550.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10550

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b50
  %v0_10b8c = load i32, i32* @r4, align 4
  %v1_10b8c = add i32 %v0_10b8c, 1
  %v2_10b8c = inttoptr i32 %v1_10b8c to i8*
  %v3_10b8c = load i8, i8* %v2_10b8c, align 1
  %v4_10b8c = zext i8 %v3_10b8c to i32
  store i32 %v4_10b8c, i32* %r3.global-to-local, align 4
  %v2_10b90 = icmp ugt i8 %v3_10b8c, 30
  store i1 %v2_10b90, i1* %cpsr_c.global-to-local, align 1
  %v7_10b90 = icmp eq i8 %v3_10b8c, 31
  store i1 %v7_10b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b90, label %dec_label_pc_10d1c, label %dec_label_pc_10b98

dec_label_pc_10b98:                               ; preds = %dec_label_pc_10b8c
  %v1_10b98 = add i32 %v0_10b8c, -1
  %v2_10b98 = inttoptr i32 %v1_10b98 to i8*
  %v3_10b98 = load i8, i8* %v2_10b98, align 1
  %v4_10b98 = zext i8 %v3_10b98 to i32
  store i32 %v4_10b98, i32* %r3.global-to-local, align 4
  %v2_10b9c = icmp ugt i8 %v3_10b98, -4
  store i1 %v2_10b9c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b9c = icmp eq i8 %v3_10b98, -3
  store i1 %v7_10b9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b9c, label %bb369, label %dec_label_pc_10ba8

bb369:                                            ; preds = %dec_label_pc_10b98
  %v1_10ba0 = load i32, i32* %sl.global-to-local, align 4
  %v2_10ba0 = trunc i32 %v1_10ba0 to i8
  store i8 %v2_10ba0, i8* %v2_10b98, align 1
  %v0_10ba4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ba4.pr, label %dec_label_pc_104ec, label %.dec_label_pc_10ba8_crit_edge

.dec_label_pc_10ba8_crit_edge:                    ; preds = %bb369
  %v0_10ba8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10ba8

dec_label_pc_10ba8:                               ; preds = %.dec_label_pc_10ba8_crit_edge, %dec_label_pc_10b98
  %v0_10ba8 = phi i32 [ %v0_10ba8.pre, %.dec_label_pc_10ba8_crit_edge ], [ %v4_10b98, %dec_label_pc_10b98 ]
  %v2_10ba8 = icmp ugt i32 %v0_10ba8, 250
  store i1 %v2_10ba8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ba8 = icmp eq i32 %v0_10ba8, 251
  store i1 %v7_10ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ba8, label %bb370, label %dec_label_pc_104ec

bb370:                                            ; preds = %dec_label_pc_10ba8
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_10bb0 = load i32, i32* @r4, align 4
  %v4_10bb0 = add i32 %v3_10bb0, -1
  %v5_10bb0 = inttoptr i32 %v4_10bb0 to i8*
  store i8 -3, i8* %v5_10bb0, align 1
  br label %dec_label_pc_104ec

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_1063c, %dec_label_pc_10618, %dec_label_pc_10658
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10bbc = call i32 @function_10f5c(i32 25)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10bcc = call i32 @function_10e78(i32 25, i32* nonnull %stack_var_-56)
  %v3_10bd0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10bcc, i32* %r2.global-to-local, align 4
  %v1_10bd8 = add i32 %v3_10bd0, -1
  store i32 %v1_10bd8, i32* %r3.global-to-local, align 4
  %v0_10bdc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10bdc, i32* %r0.global-to-local, align 4
  %v0_10be0 = load i32, i32* @r6, align 4
  %v1_10be0 = add i32 %v0_10be0, 24
  %v2_10be0 = inttoptr i32 %v1_10be0 to i32*
  %v3_10be0 = load i32, i32* %v2_10be0, align 4
  store i32 %v3_10be0, i32* %r1.global-to-local, align 4
  %v4_10be4 = call i32 @function_115ec(i32 %v0_10bdc, i32 %v3_10be0, i32 %v3_10bcc, i32 %v1_10bd8)
  store i32 %v4_10be4, i32* %r0.global-to-local, align 4
  %v1_10be8 = add i32 %v4_10be4, 1
  store i32 %v1_10be8, i32* @r7, align 4
  %v2_10be8 = icmp eq i32 %v4_10be4, -1
  store i1 %v2_10be8, i1* %cpsr_c.global-to-local, align 1
  %v7_10be8 = icmp eq i32 %v1_10be8, 0
  store i1 %v7_10be8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be8, label %thread-pre-split100, label %bb371

bb371:                                            ; preds = %dec_label_pc_10bb8
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split100

thread-pre-split100:                              ; preds = %dec_label_pc_10bb8, %bb371
  %v0_10bf0 = phi i1 [ false, %bb371 ], [ true, %dec_label_pc_10bb8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10bf0, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10d84 = call i32 @function_10ea4(i32 25)
  store i32 %v1_10d84, i32* %r0.global-to-local, align 4
  br i1 %v0_10bf0, label %dec_label_pc_10d80, label %dec_label_pc_10bf8

dec_label_pc_10bf8:                               ; preds = %thread-pre-split100
  %v0_10c00 = load i32, i32* @r7, align 4
  %v3_10c00 = icmp eq i32 %v0_10c00, -1
  store i1 %v3_10c00, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c00, label %dec_label_pc_103d4.loopexit, label %dec_label_pc_1066c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_1088c
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10c18 = call i32 @function_10f5c(i32 9)
  store i32 %v2_10348, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10c28 = call i32 @function_10e78(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10c28, i32* %r0.global-to-local, align 4
  %v3_10c2c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10c28, i32* %r2.global-to-local, align 4
  %v1_10c34 = add i32 %v3_10c2c, -1
  store i32 %v1_10c34, i32* %r3.global-to-local, align 4
  %v0_10c38 = load i32, i32* @r6, align 4
  %v1_10c38 = add i32 %v0_10c38, 24
  %v2_10c38 = inttoptr i32 %v1_10c38 to i32*
  %v3_10c38 = load i32, i32* %v2_10c38, align 4
  store i32 %v3_10c38, i32* %r1.global-to-local, align 4
  %v0_10c3c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10c3c, i32* %r0.global-to-local, align 4
  %v4_10c40 = call i32 @function_115ec(i32 %v0_10c3c, i32 %v3_10c38, i32 %v3_10c28, i32 %v1_10c34)
  store i32 %v4_10c40, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10c4c = call i32 @function_10ea4(i32 9)
  store i32 %v1_10c4c, i32* %r0.global-to-local, align 4
  %v0_10c50 = load i32, i32* @r7, align 4
  %v2_10c50 = icmp eq i32 %v0_10c50, -1
  store i1 %v2_10c50, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10c50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c50, label %dec_label_pc_103d4.loopexit, label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c0c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c58 = icmp eq i32 %v0_10c50, 0
  store i1 %v2_10c58, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v0_10c50, 1
  br i1 %tmp372, label %dec_label_pc_10560, label %dec_label_pc_10c60

dec_label_pc_10c60:                               ; preds = %dec_label_pc_10c58
  %v0_10c60 = load i32, i32* @r6, align 4
  %v1_10c60 = add i32 %v0_10c60, 21
  %v2_10c60 = inttoptr i32 %v1_10c60 to i8*
  %v3_10c60 = load i8, i8* %v2_10c60, align 1
  %v4_10c60 = zext i8 %v3_10c60 to i32
  store i32 %v4_10c60, i32* %r3.global-to-local, align 4
  %v1_10c64 = add i32 %v0_10c60, 20
  %v2_10c64 = inttoptr i32 %v1_10c64 to i8*
  %v3_10c64 = load i8, i8* %v2_10c64, align 1
  %v4_10c64 = zext i8 %v3_10c64 to i32
  store i32 %v4_10c64, i32* %r2.global-to-local, align 4
  %v1_10c68 = add i32 %v0_10c60, 16
  %v2_10c68 = inttoptr i32 %v1_10c68 to i32*
  %v3_10c68 = load i32, i32* %v2_10c68, align 4
  store i32 %v3_10c68, i32* %r1.global-to-local, align 4
  %v4_10c6c = mul nuw nsw i32 %v4_10c60, 256
  %v5_10c6c = or i32 %v4_10c64, %v4_10c6c
  store i32 %v5_10c6c, i32* %r2.global-to-local, align 4
  %v1_10c70 = and i32 %v4_10c64, 128
  %v2_10c70 = icmp ne i32 %v1_10c70, 0
  store i1 %v2_10c70, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10c60, i32* %r3.global-to-local, align 4
  store i32 %v3_10c68, i32* %stack_var_-48, align 4
  store i32 %v5_10c6c, i32* %stack_var_-38, align 4
  %v1_10c80 = inttoptr i32 %v0_10c60 to i32*
  %v2_10c80 = load i32, i32* %v1_10c80, align 4
  store i32 %v2_10c80, i32* %sl.global-to-local, align 4
  %v0_10c84 = call i32 @fork()
  store i32 %v0_10c84, i32* %r0.global-to-local, align 4
  %v2_10c88 = icmp eq i32 %v0_10c84, -1
  %.385 = zext i1 %v2_10c88 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c94 = icmp eq i32 %v0_10c84, 0
  store i1 %v2_10c94, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v0_10c84, 1
  br i1 %tmp375, label %bb376, label %.thread103

.thread103:                                       ; preds = %dec_label_pc_10c60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ca8

bb376:                                            ; preds = %dec_label_pc_10c60
  store i32 %.385, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ca0 = icmp eq i1 %v2_10c88, false
  store i1 %v2_10ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ca0, label %dec_label_pc_10de8, label %dec_label_pc_10ca8

dec_label_pc_10ca8:                               ; preds = %.thread103, %bb376
  %v0_10ca8 = load i32, i32* @r6, align 4
  %v1_10ca8 = add i32 %v0_10ca8, 4
  %v2_10ca8 = inttoptr i32 %v1_10ca8 to i32*
  %v3_10ca8 = load i32, i32* %v2_10ca8, align 4
  store i32 %v3_10ca8, i32* %r0.global-to-local, align 4
  %v1_10cac = call i32 @close(i32 %v3_10ca8)
  store i32 %v1_10cac, i32* %r0.global-to-local, align 4
  %v0_10cb0 = load i32, i32* @r6, align 4
  %v1_10cb0 = add i32 %v0_10cb0, 24
  %v2_10cb0 = inttoptr i32 %v1_10cb0 to i32*
  %v3_10cb0 = load i32, i32* %v2_10cb0, align 4
  store i32 %v3_10cb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_10cb8 = load i32, i32* @r4, align 4
  %v2_10cb8 = add i32 %v0_10cb0, 4
  %v3_10cb8 = inttoptr i32 %v2_10cb8 to i32*
  store i32 %v0_10cb8, i32* %v3_10cb8, align 4
  %v0_10cbc = load i32, i32* %r2.global-to-local, align 4
  %v1_10cbc = load i32, i32* @r6, align 4
  %v2_10cbc = add i32 %v1_10cbc, 12
  %v3_10cbc = inttoptr i32 %v2_10cbc to i32*
  store i32 %v0_10cbc, i32* %v3_10cbc, align 4
  br label %dec_label_pc_10910

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_103f0
  br i1 %v2_10414, label %dec_label_pc_10d90, label %dec_label_pc_10cc8

dec_label_pc_10cc8:                               ; preds = %dec_label_pc_10cc4
  %v3_10cc8 = icmp eq i32 %v5_10410, -1
  store i1 %v3_10cc8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10cc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10cc8, label %dec_label_pc_10cd0, label %dec_label_pc_1043c

dec_label_pc_10cd0:                               ; preds = %dec_label_pc_10cc8
  %v0_10cd0 = load i32, i32* @sb, align 4
  %v1_10cd0 = inttoptr i32 %v0_10cd0 to i32*
  %v2_10cd0 = load i32, i32* %v1_10cd0, align 4
  store i32 %v2_10cd0, i32* %r3.global-to-local, align 4
  %v2_10cd4 = icmp ugt i32 %v2_10cd0, 10
  store i1 %v2_10cd4, i1* %cpsr_c.global-to-local, align 1
  %v7_10cd4 = icmp eq i32 %v2_10cd0, 11
  store i1 %v7_10cd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cd4, label %dec_label_pc_1020c, label %dec_label_pc_10cdc

dec_label_pc_10cdc:                               ; preds = %dec_label_pc_10cd0, %dec_label_pc_10d90
  %v0_10cdc = load i32, i32* @r6, align 4
  %v1_10cdc = add i32 %v0_10cdc, 4
  %v2_10cdc = inttoptr i32 %v1_10cdc to i32*
  %v3_10cdc = load i32, i32* %v2_10cdc, align 4
  store i32 %v3_10cdc, i32* %r0.global-to-local, align 4
  %v1_10ce0 = call i32 @close(i32 %v3_10cdc)
  store i32 %v1_10ce0, i32* %r0.global-to-local, align 4
  %v0_10ce4 = load i32, i32* @r6, align 4
  %v1_10ce4 = add i32 %v0_10ce4, 284
  %v2_10ce4 = inttoptr i32 %v1_10ce4 to i8*
  %v3_10ce4 = load i8, i8* %v2_10ce4, align 1
  %v4_10ce4 = zext i8 %v3_10ce4 to i32
  %v1_10ce8 = add nuw nsw i32 %v4_10ce4, 1
  %v1_10cec = urem i32 %v1_10ce8, 256
  store i32 %v1_10cec, i32* %r3.global-to-local, align 4
  %v2_10cf0 = icmp ugt i32 %v1_10cec, 8
  store i1 %v2_10cf0, i1* %cpsr_c.global-to-local, align 1
  %v7_10cf0 = icmp eq i32 %v1_10cec, 9
  store i1 %v7_10cf0, i1* %cpsr_z.global-to-local, align 1
  %v2_10cf4 = xor i1 %v7_10cf0, true
  %v3_10cf4 = and i1 %v2_10cf0, %v2_10cf4
  br i1 %v3_10cf4, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_10cdc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb378

bb378:                                            ; preds = %dec_label_pc_10cdc, %bb377
  store i32 -1, i32* @r4, align 4
  %v1_10cfc = trunc i32 %v1_10ce8 to i8
  store i8 %v1_10cfc, i8* %v2_10ce4, align 1
  %v0_10d00 = load i32, i32* @r4, align 4
  %v1_10d00 = load i32, i32* @r6, align 4
  %v2_10d00 = add i32 %v1_10d00, 4
  %v3_10d00 = inttoptr i32 %v2_10d00 to i32*
  store i32 %v0_10d00, i32* %v3_10d00, align 4
  %v0_10d04 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10d04 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10d04 = xor i1 %v1_10d04, true
  %v3_10d04 = and i1 %v0_10d04, %v2_10d04
  br i1 %v3_10d04, label %bb379, label %.thread241

bb379:                                            ; preds = %bb378
  %v4_10d04 = load i32, i32* %r0.global-to-local, align 4
  %v5_10d04 = load i32, i32* @r6, align 4
  %v6_10d04 = add i32 %v5_10d04, 12
  %v7_10d04 = inttoptr i32 %v6_10d04 to i32*
  store i32 %v4_10d04, i32* %v7_10d04, align 4
  %v4_10d08 = load i32, i32* %r0.global-to-local, align 4
  %v5_10d08 = trunc i32 %v4_10d08 to i8
  %v6_10d08 = load i32, i32* @r6, align 4
  %v7_10d08 = add i32 %v6_10d08, 284
  %v8_10d08 = inttoptr i32 %v7_10d08 to i8*
  store i8 %v5_10d08, i8* %v8_10d08, align 1
  %v0_10d0c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10d0c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb378, %bb379
  %v1_10d0c = phi i1 [ %v1_10d0c.pre, %bb379 ], [ %v1_10d04, %bb378 ]
  %v0_10d0c = phi i1 [ %v0_10d0c.pre, %bb379 ], [ %v0_10d04, %bb378 ]
  %v2_10d0c = xor i1 %v1_10d0c, true
  %v3_10d0c = and i1 %v0_10d0c, %v2_10d0c
  br i1 %v3_10d0c, label %dec_label_pc_1020c, label %dec_label_pc_10d10

dec_label_pc_10d10:                               ; preds = %.thread241
  %v0_10d10 = load i32, i32* @r6, align 4
  store i32 %v0_10d10, i32* @r0, align 4
  %v0_10d14 = call i32 @function_f4f0()
  store i32 %v0_10d14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1020c

dec_label_pc_10d1c:                               ; preds = %dec_label_pc_10b8c
  store i32 %v2_10b5c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10d2c = add i32 %v0_10b78, 4
  %v2_10d2c = inttoptr i32 %v1_10d2c to i32*
  %v3_10d2c = load i32, i32* %v2_10d2c, align 4
  store i32 %v3_10d2c, i32* %r0.global-to-local, align 4
  %v5_10d30 = call i32 @send(i32 %v3_10d2c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10d30, i32* %r0.global-to-local, align 4
  store i32 %v2_101a0, i32* %r1.global-to-local, align 4
  %v0_10d38 = load i32, i32* @r6, align 4
  %v1_10d38 = add i32 %v0_10d38, 4
  %v2_10d38 = inttoptr i32 %v1_10d38 to i32*
  %v3_10d38 = load i32, i32* %v2_10d38, align 4
  store i32 %v3_10d38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10530

dec_label_pc_10d48:                               ; preds = %dec_label_pc_103e0
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_10d50 = add i32 %v0_10d48, 92
  store i32 %v1_10d50, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_10d58 = inttoptr i32 %.pre to i32*
  %v4_10d58 = inttoptr i32 %v1_10d50 to i32*
  %v5_10d58 = call i32* @memmove(i32* %v3_10d58, i32* %v4_10d58, i32 192)
  %v7_10d58 = ptrtoint i32* %v5_10d58 to i32
  store i32 %v7_10d58, i32* %r0.global-to-local, align 4
  %v0_10d5c = load i32, i32* @r6, align 4
  %v1_10d5c = add i32 %v0_10d5c, 24
  %v2_10d5c = inttoptr i32 %v1_10d5c to i32*
  %v3_10d5c = load i32, i32* %v2_10d5c, align 4
  store i32 %v3_10d5c, i32* %r3.global-to-local, align 4
  %v1_10d60 = add i32 %v3_10d5c, -64
  store i32 %v1_10d60, i32* %ip.global-to-local, align 4
  store i32 %v1_10d60, i32* %v2_10d5c, align 4
  br label %dec_label_pc_103f0

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_108c8
  %v0_10d6c = load i32, i32* @r6, align 4
  store i32 %v0_10d6c, i32* @r0, align 4
  %v0_10d70 = call i32 @function_f4f0()
  store i32 %v0_10d70, i32* %r0.global-to-local, align 4
  %v0_10d74 = load i32, i32* @r6, align 4
  %v1_10d74 = add i32 %v0_10d74, 24
  %v2_10d74 = inttoptr i32 %v1_10d74 to i32*
  %v3_10d74 = load i32, i32* %v2_10d74, align 4
  store i32 %v3_10d74, i32* %ip.global-to-local, align 4
  %v0_10d78 = load i32, i32* @r4, align 4
  store i32 %v0_10d78, i32* @r7, align 4
  br label %dec_label_pc_10910

dec_label_pc_10d80:                               ; preds = %thread-pre-split100
  %v0_10d88 = load i32, i32* @r6, align 4
  %v1_10d88 = add i32 %v0_10d88, 12
  %v2_10d88 = inttoptr i32 %v1_10d88 to i32*
  %v3_10d88 = load i32, i32* %v2_10d88, align 4
  br label %dec_label_pc_103d8.backedge

dec_label_pc_103d8.backedge.thread:               ; preds = %dec_label_pc_106b0, %dec_label_pc_107d8, %dec_label_pc_10934, %dec_label_pc_109e8, %dec_label_pc_10a9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_103e0

dec_label_pc_103d8.backedge.thread501:            ; preds = %dec_label_pc_106dc, %dec_label_pc_10804, %dec_label_pc_10ac8, %dec_label_pc_10960, %dec_label_pc_10a14, %dec_label_pc_106f8, %dec_label_pc_10820, %dec_label_pc_1097c, %dec_label_pc_10a30, %dec_label_pc_10ae4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_103e0

dec_label_pc_103d8.backedge:                      ; preds = %dec_label_pc_10d80, %dec_label_pc_10dd0
  %storemerge503 = phi i32 [ %v3_10d88, %dec_label_pc_10d80 ], [ %v3_10de0, %dec_label_pc_10dd0 ]
  %v0_103d8.be = phi i32 [ %v3_10d88, %dec_label_pc_10d80 ], [ %v3_10de0, %dec_label_pc_10dd0 ]
  %v0_103e0158 = phi i32 [ %v0_10d88, %dec_label_pc_10d80 ], [ %v0_10de0, %dec_label_pc_10dd0 ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103d8 = icmp eq i32 %v0_103d8.be, 0
  store i1 %v2_103d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103d8, label %dec_label_pc_1020c, label %dec_label_pc_103e0

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10cc4
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10d94 = load i32, i32* @sb, align 4
  %v2_10d94 = inttoptr i32 %v1_10d94 to i32*
  store i32 104, i32* %v2_10d94, align 4
  br label %dec_label_pc_10cdc

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_102f4, %dec_label_pc_102ac
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_10d9c
  %v0_10da8 = phi i32 [ 0, %dec_label_pc_10d9c ], [ %v0_102fc, %dec_label_pc_1031c ]
  %v0_10da0 = load i32, i32* @r6, align 4
  %v1_10da0 = add i32 %v0_10da0, 4
  %v2_10da0 = inttoptr i32 %v1_10da0 to i32*
  %v3_10da0 = load i32, i32* %v2_10da0, align 4
  store i32 %v3_10da0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10da8 = inttoptr i32 %v0_10da0 to i32*
  store i32 %v0_10da8, i32* %v2_10da8, align 4
  %v0_10dac = load i32, i32* %ip.global-to-local, align 4
  %v1_10dac = load i32, i32* @r6, align 4
  %v2_10dac = add i32 %v1_10dac, 24
  %v3_10dac = inttoptr i32 %v2_10dac to i32*
  store i32 %v0_10dac, i32* %v3_10dac, align 4
  %v0_101e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_101e4

dec_label_pc_10db4:                               ; preds = %dec_label_pc_1026c
  %v0_10db4 = load i32, i32* @r6, align 4
  %v1_10db4 = add i32 %v0_10db4, 4
  %v2_10db4 = inttoptr i32 %v1_10db4 to i32*
  %v3_10db4 = load i32, i32* %v2_10db4, align 4
  store i32 %v3_10db4, i32* %r0.global-to-local, align 4
  %v1_10db8 = call i32 @close(i32 %v3_10db4)
  store i32 %v1_10db8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10dc0 = load i32, i32* @r5, align 4
  %v1_10dc0 = load i32, i32* @r6, align 4
  %v2_10dc0 = add i32 %v1_10dc0, 12
  %v3_10dc0 = inttoptr i32 %v2_10dc0 to i32*
  store i32 %v0_10dc0, i32* %v3_10dc0, align 4
  %v0_10dc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10dc4 = load i32, i32* @r6, align 4
  %v2_10dc4 = add i32 %v1_10dc4, 4
  %v3_10dc4 = inttoptr i32 %v2_10dc4 to i32*
  store i32 %v0_10dc4, i32* %v3_10dc4, align 4
  %v0_10dc8 = load i32, i32* @r5, align 4
  %v1_10dc8 = trunc i32 %v0_10dc8 to i8
  %v2_10dc8 = load i32, i32* @r6, align 4
  %v3_10dc8 = add i32 %v2_10dc8, 284
  %v4_10dc8 = inttoptr i32 %v3_10dc8 to i8*
  store i8 %v1_10dc8, i8* %v4_10dc8, align 1
  br label %dec_label_pc_1020c

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10394
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10dd4 = call i32 @function_10ea4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10ddc = call i32 @function_10ea4(i32 27)
  store i32 %v1_10ddc, i32* %r0.global-to-local, align 4
  %v0_10de0 = load i32, i32* @r6, align 4
  %v1_10de0 = add i32 %v0_10de0, 12
  %v2_10de0 = inttoptr i32 %v1_10de0 to i32*
  %v3_10de0 = load i32, i32* %v2_10de0, align 4
  br label %dec_label_pc_103d8.backedge

dec_label_pc_10de8:                               ; preds = %bb376
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10df4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_10df4, i32* %r0.global-to-local, align 4
  %v2_10df8 = icmp eq i32 %v3_10df4, -1
  store i1 %v2_10df8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10df8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10df4, i32* @r4, align 4
  br i1 %v2_10df8, label %dec_label_pc_1000c, label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10de8
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10e08 = call i32 @function_10f5c(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_11dbc.125 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10e1c = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_11dbc.125, i32 0, i32 0))
  %v0_10e20 = load i32, i32* @r5, align 4
  store i32 %v0_10e20, i32* %r1.global-to-local, align 4
  %v0_10e28 = load i32, i32* @r6, align 4
  store i32 %v0_10e28, i32* %r0.global-to-local, align 4
  %v2_10e2c = inttoptr i32 %v0_10e20 to i32*
  %v3_10e2c = call i32 @function_10e78(i32 %v0_10e28, i32* %v2_10e2c)
  %v4_10e2c = inttoptr i32 %v3_10e2c to i8*
  store i32 %v3_10e2c, i32* %r0.global-to-local, align 4
  %v2_10e30 = add i32 %v3_10e2c, 1
  %v3_10e30 = inttoptr i32 %v2_10e30 to i8*
  %v4_10e30 = load i8, i8* %v3_10e30, align 1
  %v5_10e30 = zext i8 %v4_10e30 to i32
  store i32 %v5_10e30, i32* %r2.global-to-local, align 4
  %v3_10e34 = load i8, i8* %v4_10e2c, align 1
  %v4_10e34 = zext i8 %v3_10e34 to i32
  %v4_10e38 = mul nuw nsw i32 %v5_10e30, 256
  %v5_10e38 = or i32 %v4_10e34, %v4_10e38
  store i32 %v5_10e38, i32* %r3.global-to-local, align 4
  %v1_10e3c = and i32 %v4_10e34, 128
  %v2_10e3c = icmp ne i32 %v1_10e3c, 0
  store i1 %v2_10e3c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10e30, i32* %r1.global-to-local, align 4
  %v0_10e40 = load i32, i32* @r6, align 4
  store i32 %v0_10e40, i32* %r0.global-to-local, align 4
  %v1_10e4c = call i32 @function_10ea4(i32 %v0_10e40)
  %v0_10e50 = load i32, i32* @r4, align 4
  store i32 %v0_10e50, i32* %r0.global-to-local, align 4
  store i32 %v2_fd94, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_10e5c = call i32 @connect(i32 %v0_10e50, %sockaddr* %tmp298, i32 16)
  store i32 %v5_10e5c, i32* %r0.global-to-local, align 4
  %v3_10e60 = icmp eq i32 %v5_10e5c, -1
  store i1 %v3_10e60, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10e60, label %dec_label_pc_10e68, label %dec_label_pc_ff68

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e04
  %v0_10e68 = load i32, i32* @r4, align 4
  store i32 %v0_10e68, i32* %r0.global-to-local, align 4
  %v1_10e6c = call i32 @close(i32 %v0_10e68)
  %v0_10e70 = load i32, i32* @r5, align 4
  store i32 %v0_10e70, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_10e70)
  unreachable

; uselistorder directives
  uselistorder i1 %v3_10e60, { 1, 0, 2 }
  uselistorder i32 %v4_10e34, { 1, 0 }
  uselistorder i32 %v5_10e30, { 1, 0, 2 }
  uselistorder i32 %v3_10de0, { 1, 0 }
  uselistorder i32 %v0_10de0, { 1, 0 }
  uselistorder i1 %v1_10d04, { 1, 0 }
  uselistorder i32 %v1_10cec, { 2, 1, 0 }
  uselistorder i32 %v1_10ce8, { 1, 0 }
  uselistorder i1 %v3_10cc8, { 1, 0, 2 }
  uselistorder i1 %v2_10ca0, { 1, 0 }
  uselistorder i32 %.385, { 1, 0 }
  uselistorder i1 %v2_10c88, { 1, 0 }
  uselistorder i32 %v0_10c84, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10c64, { 1, 0, 2 }
  uselistorder i32 %v4_10c60, { 1, 0, 2 }
  uselistorder i32 %v0_10c50, { 2, 1, 3, 0 }
  uselistorder i1 %v3_10c00, { 1, 0, 2 }
  uselistorder i32 %v0_10c00, { 1, 0 }
  uselistorder i1 %v0_10bf0, { 1, 0 }
  uselistorder i32 %v4_10be4, { 1, 0, 2 }
  uselistorder i32 %v0_10b78, { 1, 2, 0 }
  uselistorder i1 %v7_10ae8, { 1, 0 }
  uselistorder i32 %v1_10ae4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10adc, { 1, 0 }
  uselistorder i8 %v3_10ad4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10ae4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ac0, { 1, 0 }
  uselistorder i1 %v7_10ab8, { 1, 0 }
  uselistorder i1 %v7_10ab0, { 1, 0 }
  uselistorder i1 %v7_10a34, { 1, 0 }
  uselistorder i32 %v1_10a30, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10a28, { 1, 0 }
  uselistorder i8 %v3_10a20, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10a30, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10a0c, { 1, 0 }
  uselistorder i1 %v7_10a04, { 1, 0 }
  uselistorder i1 %v7_109fc, { 1, 0 }
  uselistorder i1 %v7_10980, { 1, 0 }
  uselistorder i32 %v1_1097c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10974, { 1, 0 }
  uselistorder i8 %v3_1096c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1097c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10958, { 1, 0 }
  uselistorder i1 %v7_10950, { 1, 0 }
  uselistorder i1 %v7_10948, { 1, 0 }
  uselistorder i32 %v0_10924, { 1, 2, 0 }
  uselistorder i32 %v2_10910, { 1, 0 }
  uselistorder i32 %v1_10910, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10910, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_108e0, { 2, 1, 0 }
  uselistorder i1 %v7_10824, { 1, 0 }
  uselistorder i32 %v1_10820, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10818, { 1, 0 }
  uselistorder i8 %v3_10810, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10820, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_107fc, { 1, 0 }
  uselistorder i1 %v7_107f4, { 1, 0 }
  uselistorder i1 %v7_107ec, { 1, 0 }
  uselistorder i1 %v7_106fc, { 1, 0 }
  uselistorder i32 %v1_106f8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_106f0, { 1, 0 }
  uselistorder i8 %v3_106e8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_106f8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_106d4, { 1, 0 }
  uselistorder i1 %v7_106cc, { 1, 0 }
  uselistorder i1 %v7_106c4, { 1, 0 }
  uselistorder i32 %v0_1066c, { 2, 1, 0 }
  uselistorder i1 %v7_1065c, { 1, 0 }
  uselistorder i1 %v8_10650, { 1, 0 }
  uselistorder i8 %v3_10648, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10658, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10634, { 1, 0 }
  uselistorder i1 %v7_1062c, { 1, 0 }
  uselistorder i32 %v0_105d4, { 2, 1, 0 }
  uselistorder i1 %v7_105bc, { 1, 0 }
  uselistorder i1 %v8_105b0, { 1, 0 }
  uselistorder i8 %v3_105a8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_105b8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10594, { 1, 0 }
  uselistorder i1 %v7_1058c, { 1, 0 }
  uselistorder i1 %v7_10584, { 1, 0 }
  uselistorder i32 %v0_10550, { 0, 2, 1 }
  uselistorder i32 %v1_10548, { 1, 0 }
  uselistorder i32 %v1_10544, { 1, 0 }
  uselistorder i32 %v1_1053c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10538, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10538, { 0, 2, 1 }
  uselistorder i1 %v7_104d8, { 1, 0 }
  uselistorder i1 %v2_104c4, { 1, 0, 2 }
  uselistorder i1 %v2_104ac, { 1, 0, 2 }
  uselistorder i32 %v1_104cc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_104a0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_104c8, { 1, 0 }
  uselistorder i32 %v2_104d0, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_1048c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10454, { 3, 16, 4, 18, 5, 17, 6, 15, 7, 14, 8, 13, 9, 12, 2, 10, 11, 19, 1, 0 }
  uselistorder i32 %v1_10430, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1042c, { 1, 0 }
  uselistorder i32 %v5_10410, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v2_103fc, { 1, 0, 2 }
  uselistorder i32 %v3_103f8, { 1, 0, 2 }
  uselistorder i32 %v0_10d48, { 1, 0, 2 }
  uselistorder i1 %v3_103cc, { 1, 0, 2 }
  uselistorder i1 %v7_103ac, { 1, 0 }
  uselistorder i1 %v7_10384, { 1, 0 }
  uselistorder i32 %v0_102fc, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_102d0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_102c8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_1025c, { 2, 1, 0 }
  uselistorder i32 %v3_10258, { 1, 0 }
  uselistorder i32 %v3_10238, { 4, 3, 1, 0, 5, 6, 2 }
  uselistorder i32 %v0_1022c, { 1, 0 }
  uselistorder i32 %v1_10210, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_101fc, { 2, 1, 0 }
  uselistorder i32 %v3_101f8, { 1, 0 }
  uselistorder i32 %v0_101fc, { 1, 0 }
  uselistorder i32 %v1_10194, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10194, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10164, { 2, 1, 0 }
  uselistorder i32 %v1_10160, { 1, 0 }
  uselistorder i32 %v0_10130, { 0, 2, 1 }
  uselistorder i32 %v1_10128, { 1, 0 }
  uselistorder i1 %v7_100e0, { 0, 3, 1, 2 }
  uselistorder i1 %v2_100e0, { 1, 2, 0 }
  uselistorder i32 %v2_100d8, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_100d0, { 1, 0 }
  uselistorder i32 %v1_100b4, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_100a8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_100a8, { 0, 2, 1 }
  uselistorder i32 %v1_10098, { 1, 0 }
  uselistorder i32 %v3_1010c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge245, { 1, 0, 2 }
  uselistorder i32 %v3_ff54, { 1, 0 }
  uselistorder i32 %v1_ff40, { 1, 0 }
  uselistorder i32 %v1_ff28, { 1, 2, 0 }
  uselistorder i32 %v0_ff34, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fef8, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_feec, { 2, 1, 0 }
  uselistorder i32 %v1_fec8, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_fea0, { 1, 0 }
  uselistorder i32 %v0_fe04, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fdac, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_fcd0, { 1, 0 }
  uselistorder i32 %v1_fccc, { 1, 0 }
  uselistorder i32 %v4_fca8, { 1, 0 }
  uselistorder i1 %v2_fbf8, { 1, 0 }
  uselistorder i1 %v2_fbe4, { 1, 0 }
  uselistorder i1 %v2_fbd0, { 1, 0 }
  uselistorder i32 %.384, { 3, 2, 1, 0 }
  uselistorder i1 %v7_fbac, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_fb94, { 1, 0 }
  uselistorder i1 %v3_fb78, { 1, 0, 2 }
  uselistorder i1 %v2_fb64, { 1, 0 }
  uselistorder i1 %v2_fb40, { 1, 0 }
  uselistorder i32 %v1_faf0, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fadc, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 54, 29, 28, 53, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fad8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_fac8, { 1, 0 }
  uselistorder i32 %v0_fab8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fa94, { 1, 0 }
  uselistorder i32 %v2_10840, { 2, 3, 1, 0 }
  uselistorder i32 %v2_10348, { 3, 7, 4, 5, 2, 6, 8, 9, 1, 0 }
  uselistorder i32 %v2_10b6c, { 1, 0 }
  uselistorder i32 %v2_1011c, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_fa80, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_fa7c, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_f960, { 1, 0 }
  uselistorder i32 %v3_f920, { 1, 0 }
  uselistorder i32 %v4_f90c, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32 %v0_f8f4, { 0, 2, 1 }
  uselistorder i32 %v0_f89c, { 3, 2, 0, 1 }
  uselistorder i32 %v3_f834, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_f81c, { 0, 2, 1 }
  uselistorder i32 %v0_f804, { 2, 1, 0 }
  uselistorder i32 %v0_f7e0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge252, { 1, 0 }
  uselistorder i32 %v0_f774, { 2, 0, 1, 3, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-56, { 10, 7, 11, 3, 12, 6, 13, 5, 14, 8, 15, 4, 16, 17, 1, 2, 9, 18, 0, 19, 20 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 1, 9 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sp.global-to-local, { 1, 3, 2, 0, 4 }
  uselistorder i32* %sl.global-to-local, { 12, 0, 1, 2, 3, 8, 9, 10, 11, 5, 4, 6, 7 }
  uselistorder i32* %r8.global-to-local, { 7, 9, 0, 3, 8, 2, 1, 6, 10, 4, 5, 11, 12, 13 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 12, 43, 42, 16, 44, 45, 122, 123, 124, 125, 137, 17, 18, 19, 20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 30, 31, 32, 13, 14, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 46, 47, 48, 49, 50, 51, 33, 34, 52, 53, 55, 54, 56, 57, 58, 59, 61, 63, 62, 60, 64, 65, 66, 67, 73, 68, 69, 70, 71, 74, 147, 148, 75, 145, 146, 35, 36, 37, 38, 39, 40, 41, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 93, 94, 95, 96, 97, 144, 98, 99, 101, 100, 103, 102, 104, 106, 105, 108, 107, 72, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 128, 33, 12, 112, 113, 114, 115, 116, 124, 13, 14, 15, 16, 0, 1, 2, 3, 5, 4, 6, 8, 7, 20, 117, 118, 120, 119, 121, 122, 123, 125, 127, 126, 21, 23, 22, 17, 18, 19, 34, 35, 36, 37, 38, 39, 40, 24, 25, 41, 42, 43, 44, 45, 47, 49, 48, 111, 46, 50, 51, 52, 53, 54, 58, 55, 56, 57, 59, 62, 61, 63, 60, 64, 26, 27, 28, 29, 30, 31, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 32, 33, 14, 15, 88, 89, 90, 99, 100, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 47, 48, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 19, 20, 0, 34, 35, 36, 37, 21, 22, 23, 24, 38, 39, 40, 42, 43, 41, 44, 45, 49, 46, 87, 25, 26, 27, 28, 29, 30, 31, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32* %r0.global-to-local, { 32, 33, 35, 34, 36, 38, 37, 39, 40, 44, 41, 52, 53, 54, 82, 81, 10, 84, 83, 43, 46, 45, 86, 88, 89, 85, 90, 87, 156, 155, 157, 159, 158, 160, 162, 161, 163, 195, 194, 192, 196, 197, 198, 48, 47, 49, 2, 1, 3, 5, 4, 7, 6, 8, 9, 11, 12, 14, 13, 16, 15, 18, 17, 19, 20, 21, 22, 24, 23, 26, 25, 28, 27, 29, 30, 31, 56, 55, 165, 166, 168, 167, 169, 164, 170, 171, 172, 173, 175, 174, 177, 176, 179, 178, 180, 181, 182, 184, 183, 185, 187, 186, 189, 188, 190, 191, 193, 200, 199, 202, 201, 206, 203, 204, 205, 58, 57, 60, 59, 208, 207, 209, 210, 42, 51, 50, 93, 91, 62, 61, 63, 65, 64, 67, 66, 68, 69, 70, 99, 92, 94, 95, 96, 98, 97, 100, 103, 101, 102, 108, 104, 107, 105, 106, 109, 72, 71, 73, 74, 75, 77, 76, 78, 79, 80, 112, 110, 111, 114, 113, 115, 117, 116, 153, 118, 119, 120, 0, 121, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 154, 136, 137, 138, 139, 141, 140, 143, 142, 144, 148, 147, 145, 146, 149, 150, 151, 152 }
  uselistorder i32* %lr.global-to-local, { 21, 0, 2, 1, 3, 4, 5, 22, 6, 7, 8, 9, 10, 18, 19, 20, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 40, 14, 41, 6, 0, 2, 1, 4, 3, 5, 47, 42, 43, 44, 45, 46, 48, 10, 11, 7, 8, 9, 15, 16, 17, 18, 19, 20, 23, 21, 22, 24, 49, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 57, 71, 227, 178, 61, 62, 63, 64, 65, 179, 169, 181, 182, 183, 205, 206, 207, 34, 35, 36, 37, 38, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 53, 184, 185, 186, 187, 188, 193, 194, 189, 190, 191, 192, 195, 196, 197, 202, 203, 198, 199, 200, 201, 204, 208, 209, 213, 214, 210, 211, 212, 215, 55, 216, 31, 32, 217, 218, 29, 30, 33, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 226, 170, 66, 67, 68, 69, 70, 171, 56, 180, 58, 59, 60, 72, 74, 73, 75, 76, 78, 80, 79, 172, 77, 81, 82, 83, 84, 85, 86, 91, 87, 88, 89, 90, 175, 176, 173, 174, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 109, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 225, 124, 125, 224, 126, 127, 223, 128, 129, 222, 130, 131, 132, 168, 133, 221, 134, 135, 220, 136, 137, 219, 138, 139, 140, 141, 142, 167, 143, 144, 145, 146, 147, 166, 148, 149, 150, 165, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 177, 164 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 55, 69, 223, 175, 59, 60, 61, 62, 63, 176, 166, 177, 178, 179, 180, 201, 202, 203, 35, 36, 37, 38, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 51, 181, 182, 183, 184, 189, 190, 185, 186, 187, 188, 191, 192, 193, 198, 199, 194, 195, 196, 197, 200, 204, 205, 209, 210, 206, 207, 208, 211, 53, 212, 32, 33, 213, 214, 30, 31, 34, 52, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 222, 167, 64, 65, 66, 67, 68, 168, 54, 165, 56, 57, 58, 70, 72, 71, 73, 75, 77, 76, 169, 74, 78, 79, 80, 81, 82, 87, 83, 84, 85, 86, 172, 173, 170, 88, 171, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 221, 116, 117, 220, 118, 119, 219, 120, 121, 218, 122, 123, 124, 164, 125, 217, 126, 127, 216, 128, 129, 215, 130, 131, 132, 133, 134, 163, 135, 136, 137, 138, 139, 162, 140, 141, 142, 161, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 174, 160 }
  uselistorder i32 (i8*)* @inet_addr, { 2, 1, 0, 3, 4 }
  uselistorder [15 x i8]* @global_var_11dbc.125, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* (i32*, i32*, i32)* @memcpy, { 1, 0, 2 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_11e58.249 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_11e58.249, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 2, 4, 5, 0, 3, 1, 6 }
  uselistorder i32 (i32)* @function_10ea4, { 35, 34, 33, 16, 12, 38, 37, 36, 15, 14, 13, 11, 10, 9, 32, 31, 17, 30, 29, 28, 39, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_115ec, { 2, 0, 1, 4, 3 }
  uselistorder i32 (i32, i32*)* @function_10e78, { 3, 28, 32, 0, 1, 2, 29, 30, 31, 4, 5, 36, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 33, 34 }
  uselistorder i32 (i32)* @function_10f5c, { 27, 8, 4, 30, 29, 28, 7, 6, 5, 26, 25, 0, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1a218.180 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1a219.181, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*)* @select, { 1, 0, 2 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32* @r7, { 11, 12, 13, 17, 18, 19, 4, 8, 9, 10, 26, 14, 15, 16, 6, 20, 5, 21, 22, 23, 24, 25, 27, 3, 28, 29, 30, 163, 164, 165, 112, 113, 114, 115, 31, 0, 32, 33, 34, 35, 36, 37, 7, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 85, 86, 87, 88, 1, 90, 91, 92, 93, 94, 95, 100, 96, 97, 98, 99, 2, 101, 102, 103, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 104, 105, 106, 107, 108, 109, 110, 111 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 0, 3, 2, 1, 5, 4, 6 }
  uselistorder i32* @r6, { 18, 19, 20, 49, 58, 59, 60, 61, 62, 63, 40, 21, 22, 64, 45, 65, 66, 67, 68, 69, 70, 23, 24, 25, 26, 27, 41, 46, 9, 10, 11, 12, 13, 14, 15, 16, 17, 50, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 51, 52, 53, 54, 47, 48, 71, 72, 73, 74, 75, 55, 56, 76, 77, 7, 78, 79, 80, 81, 57, 271, 272, 273, 197, 198, 199, 200, 0, 82, 83, 84, 85, 86, 87, 2, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 1, 100, 101, 102, 3, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 201, 4, 202, 5, 203, 6, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 186, 189, 187, 188, 190, 191, 8, 192, 193, 194, 195, 196 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 25, 23, 22, 21, 26, 15, 28, 5, 4, 7, 6, 9, 8, 14, 30, 27, 24, 20, 19, 18, 17, 16, 29, 1, 0, 3, 2, 11, 10, 13, 12, 31 }
  uselistorder i32 ()* @function_f4f0, { 0, 3, 2, 1 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 1, 2, 0, 3 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 1, 8, 7, 5, 0, 9, 2, 3, 4, 6, 10 }
  uselistorder i32 16384, { 13, 61, 12, 49, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 29, 59, 30, 60, 27, 63, 28, 64, 25, 26, 62, 37, 72, 31, 65, 32, 66, 33, 67, 34, 68, 35, 69, 36, 70, 9, 71, 10, 73, 11, 74, 15, 75, 40, 76, 39, 77, 41, 78, 42, 79, 14, 80, 38, 81, 16, 82, 17, 83, 18, 84, 43, 85, 19, 86, 44, 87, 20, 88, 21, 89, 22, 90, 23, 91, 24, 92, 45, 46, 47, 48 }
  uselistorder i32 (i32, i32, i32, i32)* @function_de20, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_ddc4, { 11, 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1a1fc.238, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 2, 0, 1 }
  uselistorder i32 29, { 2, 3, 1, 0 }
  uselistorder i32 28, { 5, 6, 7, 8, 9, 10, 11, 0, 4, 13, 12, 1, 2, 3, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 27, { 1, 7, 0, 6, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 20, { 17, 18, 1, 19, 2, 20, 16, 21, 22, 23, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32, 33, 4, 34, 35, 36, 0, 37, 38, 39, 40, 12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 13, 50, 51, 52, 53, 54, 55, 56, 58, 59, 5, 60, 61, 62, 63, 64, 65, 66, 6, 67, 68, 69, 70, 14, 15, 71, 8, 72, 7, 73, 74, 75, 76, 10, 77, 9, 78, 79, 80, 81, 82, 83, 84, 85, 11, 86, 87, 88, 89, 90, 91, 92, 93, 94, 57 }
  uselistorder i32 -6, { 1, 0, 2, 3 }
  uselistorder i32 159, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 31, { 10, 9, 13, 14, 11, 12, 7, 8, 3, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 30, { 0, 6, 4, 5, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 45, 46, 47, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29, 30, 31, 32, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52 }
  uselistorder i32 13, { 22, 23, 24, 26, 25, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 20, 32, 33, 34, 35, 36, 37, 38, 39, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 3, 68, 69 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_11e38.232 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_11e30.230 to i32), { 0, 2, 1, 3 }
  uselistorder i32 11, { 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 2, 20, 21, 22, 3, 23, 24, 25, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_11df4.218 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f5c4, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_11e60.210 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_11e5c.208 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1a20d.204, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1a200.195 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1a20c.196, { 1, 0 }
  uselistorder i32 40, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 ptrtoint (i32* @global_var_1a1ec.191 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 34, 1, 17, 0, 2, 3, 4, 35, 18, 5, 36, 24, 19, 20, 25, 26, 27, 37, 38, 39, 40, 6, 7, 28, 29, 30, 41, 42, 43, 44, 8, 9, 45, 10, 46, 31, 32, 47, 11, 48, 49, 21, 50, 51, 12, 52, 53, 22, 54, 55, 13, 56, 23, 33, 57, 58, 14, 59, 60, 15, 16 }
  uselistorder i32 ()* @function_f28c, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 6, 5, 4, 3, 2, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 0, 2, 3, 1, 4, 8, 6, 5, 7, 9, 10 }
  uselistorder i32 2048, { 5, 0, 1, 2, 6, 3, 7, 8, 4, 9 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 7, 6, 9, 8, 5, 4, 3, 2, 1, 0, 10 }
  uselistorder i32* @global_var_1a240.189, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @r5, { 6, 7, 18, 19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 15, 16, 22, 23, 24, 25, 26, 27, 28, 17, 29, 30, 31, 32, 2, 33, 208, 209, 210, 211, 212, 213, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50, 3, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 68, 69, 70, 71, 72, 73, 4, 74, 75, 76, 77, 78, 79, 80, 81, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 202, 203, 204, 205, 206, 207 }
  uselistorder i32* @global_var_1a23c.187, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 4, 5, 1, 0, 3, 2, 25, 24, 31, 19, 18, 7, 6, 39, 38, 35, 34, 36, 29, 28, 33, 32, 17, 8, 23, 22, 16, 15, 14, 13, 12, 11, 10, 21, 20, 37, 9, 30, 27, 26, 40 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1a21c.174, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 1, 0, 3, 2, 6, 5, 4, 8, 7, 9 }
  uselistorder i32 (i32)* @function_f2e4, { 1, 0 }
  uselistorder i32* @global_var_1a220.101, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_117e0, { 2, 1, 0 }
  uselistorder i32 ()* @fork, { 3, 5, 6, 4, 0, 1, 2, 7 }
  uselistorder i32* @sl, { 2, 80, 81, 82, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 36, 37, 38, 39, 40, 41 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 75, 76, 77, 9, 10, 11, 12, 13, 14, 17, 15, 16, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* @r8, { 4, 88, 89, 90, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 2, 87, 91, 3, 92, 51, 52, 53, 54, 55 }
  uselistorder label %dec_label_pc_10da0, { 1, 0 }
  uselistorder label %dec_label_pc_103d8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_103d8.backedge.thread501, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_103d8.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb378, { 1, 0 }
  uselistorder label %dec_label_pc_10cdc, { 1, 0 }
  uselistorder label %dec_label_pc_10ca8, { 1, 0 }
  uselistorder label %thread-pre-split100, { 1, 0 }
  uselistorder label %dec_label_pc_10bb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ae4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ad0, { 1, 0 }
  uselistorder label %dec_label_pc_10a30, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10a1c, { 1, 0 }
  uselistorder label %dec_label_pc_1097c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10968, { 1, 0 }
  uselistorder label %dec_label_pc_10910, { 4, 7, 1, 2, 3, 11, 8, 9, 10, 5, 6, 0 }
  uselistorder label %dec_label_pc_10820, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1080c, { 1, 0 }
  uselistorder label %dec_label_pc_106f8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_106e4, { 1, 0 }
  uselistorder label %dec_label_pc_10658, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10644, { 1, 0 }
  uselistorder label %dec_label_pc_105d4, { 1, 0 }
  uselistorder label %dec_label_pc_105b8, { 1, 0, 3, 4, 2 }
  uselistorder label %dec_label_pc_105a4, { 1, 0 }
  uselistorder label %dec_label_pc_10560, { 5, 1, 2, 3, 6, 7, 8, 4, 0 }
  uselistorder label %dec_label_pc_10550, { 5, 2, 3, 4, 1, 0 }
  uselistorder label %.thread90, { 2, 0, 1 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104ec, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_104a8, { 1, 0 }
  uselistorder label %dec_label_pc_104a8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1043c, { 1, 0 }
  uselistorder label %bb347, { 1, 0 }
  uselistorder label %dec_label_pc_103f0, { 1, 0 }
  uselistorder label %dec_label_pc_103e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_103e0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_103d4.loopexit, { 1, 5, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1020c, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_101e4, { 1, 0 }
  uselistorder label %bb339, { 1, 0 }
  uselistorder label %bb337, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_10034.dec_label_pc_10034_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1001c.dec_label_pc_1001c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10014, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1000c, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_ff28, { 1, 0 }
  uselistorder label %dec_label_pc_fdcc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fdc0, { 1, 0 }
  uselistorder label %.thread68, { 2, 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %bb320, { 1, 0 }
  uselistorder label %dec_label_pc_fc30.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fc24.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fc18.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fc00, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %dec_label_pc_fba4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fb80, { 1, 0 }
  uselistorder label %dec_label_pc_fb74, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fb50, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fb2c, { 1, 0 }
  uselistorder label %bb300, { 1, 0 }
  uselistorder label %dec_label_pc_fad8, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f89c, { 1, 0 }
}

define i32 @function_10e78(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10e78:
  store i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32* @ip, align 4
  %v3_10e7c = mul i32 %arg1, 8
  %v2_10e80 = add i32 %v3_10e7c, ptrtoint (i32* @global_var_1a24c.256 to i32)
  %v2_10e84 = icmp eq i32* %arg2, null
  br i1 %v2_10e84, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10e78
  %v3_10e9011 = inttoptr i32 %v2_10e80 to i32*
  %v4_10e9012 = load i32, i32* %v3_10e9011, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10e78
  %v2_10e88 = add i32 %v3_10e7c, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 5)
  %v3_10e88 = inttoptr i32 %v2_10e88 to i8*
  %v4_10e88 = load i8, i8* %v3_10e88, align 1
  %v5_10e88 = zext i8 %v4_10e88 to i32
  %v2_10e8c = add i32 %v3_10e7c, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 4)
  %v3_10e8c = inttoptr i32 %v2_10e8c to i8*
  %v4_10e8c = load i8, i8* %v3_10e8c, align 4
  %v5_10e8c = zext i8 %v4_10e8c to i32
  %v3_10e90 = inttoptr i32 %v2_10e80 to i32*
  %v4_10e90 = load i32, i32* %v3_10e90, align 4
  %v5_10e94 = mul nuw nsw i32 %v5_10e88, 256
  %v6_10e94 = or i32 %v5_10e8c, %v5_10e94
  store i32 %v6_10e94, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10e90714 = phi i32 [ %v4_10e9012, %.thread ], [ %v4_10e90, %bb ]
  ret i32 %v4_10e90714

; uselistorder directives
  uselistorder i32 %v2_10e80, { 1, 0 }
  uselistorder i32 %v3_10e7c, { 2, 1, 0 }
  uselistorder i32* null, { 4, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 2, 6, 3, 7, 20, 21, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10ea4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ea4:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10ea4 = mul i32 %arg1, 8
  %v3_10ea8 = load i32, i32* @r4, align 4
  store i32 %v3_10ea8, i32* %stack_var_-20, align 4
  %v3_10eb8 = and i32 %v3_10ea4, 2040
  %v2_10ebc = add i32 %v3_10eb8, ptrtoint (i32* @global_var_1a24c.256 to i32)
  store i32 %v2_10ebc, i32* %lr.global-to-local, align 4
  %v1_10ec4 = add i32 %v3_10eb8, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 4)
  store i32 %v1_10ec4, i32* %r7.global-to-local, align 4
  %v2_10ec8 = load i32, i32* @global_var_1a1a4.259, align 4
  %v2_10ecc = inttoptr i32 %v1_10ec4 to i8*
  %v3_10ecc = load i8, i8* %v2_10ecc, align 4
  %v4_10ecc = zext i8 %v3_10ecc to i32
  store i32 %v4_10ecc, i32* @r1, align 4
  %v1_10ed0 = add i32 %v3_10eb8, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 5)
  %v2_10ed0 = inttoptr i32 %v1_10ed0 to i8*
  %v3_10ed0 = load i8, i8* %v2_10ed0, align 1
  %v4_10ed0 = zext i8 %v3_10ed0 to i32
  %v3_10ed4 = udiv i32 %v2_10ec8, 256
  %v4_10ed8 = mul nuw nsw i32 %v4_10ed0, 256
  %v5_10ed8 = or i32 %v4_10ed8, %v4_10ecc
  %v7_10ed8 = icmp eq i32 %v5_10ed8, 0
  store i1 %v7_10ed8, i1* @cpsr_z, align 1
  %v3_10edc = udiv i32 %v2_10ec8, 65536
  %v1_10ee0 = urem i32 %v3_10ed4, 256
  store i32 %v1_10ee0, i32* %r6.global-to-local, align 4
  %v1_10ee4 = urem i32 %v3_10edc, 256
  store i32 %v1_10ee4, i32* %r5.global-to-local, align 4
  %v3_10ee8 = udiv i32 %v2_10ec8, 16777216
  store i32 %v3_10ee8, i32* %r4.global-to-local, align 4
  %v1_10eec = urem i32 %v2_10ec8, 256
  br i1 %v7_10ed8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10ea4
  store i32 %v3_10ea8, i32* @r4, align 4
  ret i32 %v1_10eec

bb8:                                              ; preds = %dec_label_pc_10ea4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ef8, %bb8
  %v2_10f04 = phi i32 [ %v1_10f40, %dec_label_pc_10ef8 ], [ 0, %bb8 ]
  %v0_10ef8 = phi i32 [ %v0_10f38, %dec_label_pc_10ef8 ], [ %v2_10ebc, %bb8 ]
  %v1_10ef8 = inttoptr i32 %v0_10ef8 to i32*
  %v2_10ef8 = load i32, i32* %v1_10ef8, align 4
  %v2_10efc = add i32 %v2_10ef8, %v2_10f04
  %v3_10efc = inttoptr i32 %v2_10efc to i8*
  %v4_10efc = load i8, i8* %v3_10efc, align 1
  %v6_10efc = zext i8 %v4_10efc to i32
  %v2_10f00 = xor i32 %v6_10efc, %v1_10eec
  %v1_10f04 = trunc i32 %v2_10f00 to i8
  store i8 %v1_10f04, i8* %v3_10efc, align 1
  %v0_10f08 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f08 = inttoptr i32 %v0_10f08 to i32*
  %v2_10f08 = load i32, i32* %v1_10f08, align 4
  %v0_10f0c = load i32, i32* @ip, align 4
  %v2_10f0c = add i32 %v0_10f0c, %v2_10f08
  %v3_10f0c = inttoptr i32 %v2_10f0c to i8*
  %v4_10f0c = load i8, i8* %v3_10f0c, align 1
  %v6_10f0c = zext i8 %v4_10f0c to i32
  %v0_10f10 = load i32, i32* %r6.global-to-local, align 4
  %v2_10f10 = xor i32 %v0_10f10, %v6_10f0c
  %v1_10f14 = trunc i32 %v2_10f10 to i8
  store i8 %v1_10f14, i8* %v3_10f0c, align 1
  %v0_10f18 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f18 = inttoptr i32 %v0_10f18 to i32*
  %v2_10f18 = load i32, i32* %v1_10f18, align 4
  %v0_10f1c = load i32, i32* @ip, align 4
  %v2_10f1c = add i32 %v0_10f1c, %v2_10f18
  %v3_10f1c = inttoptr i32 %v2_10f1c to i8*
  %v4_10f1c = load i8, i8* %v3_10f1c, align 1
  %v6_10f1c = zext i8 %v4_10f1c to i32
  %v0_10f20 = load i32, i32* %r5.global-to-local, align 4
  %v2_10f20 = xor i32 %v0_10f20, %v6_10f1c
  %v1_10f24 = trunc i32 %v2_10f20 to i8
  store i8 %v1_10f24, i8* %v3_10f1c, align 1
  %v0_10f28 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f28 = inttoptr i32 %v0_10f28 to i32*
  %v2_10f28 = load i32, i32* %v1_10f28, align 4
  store i32 %v2_10f28, i32* @r1, align 4
  %v0_10f2c = load i32, i32* @ip, align 4
  %v2_10f2c = add i32 %v0_10f2c, %v2_10f28
  %v3_10f2c = inttoptr i32 %v2_10f2c to i8*
  %v4_10f2c = load i8, i8* %v3_10f2c, align 1
  %v6_10f2c = zext i8 %v4_10f2c to i32
  %v0_10f30 = load i32, i32* %r4.global-to-local, align 4
  %v2_10f30 = xor i32 %v0_10f30, %v6_10f2c
  %v1_10f34 = trunc i32 %v2_10f30 to i8
  store i8 %v1_10f34, i8* %v3_10f2c, align 1
  %v0_10f38 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f38 = add i32 %v0_10f38, 4
  %v2_10f38 = inttoptr i32 %v1_10f38 to i8*
  %v3_10f38 = load i8, i8* %v2_10f38, align 1
  %v4_10f38 = zext i8 %v3_10f38 to i32
  %v0_10f3c = load i32, i32* %r7.global-to-local, align 4
  %v1_10f3c = add i32 %v0_10f3c, 1
  %v2_10f3c = inttoptr i32 %v1_10f3c to i8*
  %v3_10f3c = load i8, i8* %v2_10f3c, align 1
  %v4_10f3c = zext i8 %v3_10f3c to i32
  %v0_10f40 = load i32, i32* @ip, align 4
  %v1_10f40 = add i32 %v0_10f40, 1
  store i32 %v1_10f40, i32* @ip, align 4
  %v4_10f44 = mul nuw nsw i32 %v4_10f3c, 256
  %v5_10f44 = or i32 %v4_10f44, %v4_10f38
  %v9_10f48 = icmp eq i32 %v5_10f44, %v1_10f40
  store i1 %v9_10f48, i1* @cpsr_z, align 1
  %v8_10f4c = icmp sgt i32 %v5_10f44, %v1_10f40
  br i1 %v8_10f4c, label %dec_label_pc_10ef8, label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %dec_label_pc_10ef8
  %v2_10f50 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10f50, i32* @r4, align 4
  ret i32 %v1_10eec

; uselistorder directives
  uselistorder i32 %v1_10f40, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10f38, { 1, 0 }
  uselistorder i32 %v1_10eec, { 0, 2, 1 }
  uselistorder i32 %v2_10ec8, { 3, 0, 1, 2 }
}

define i32 @function_10f5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10f5c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10f5c = mul i32 %arg1, 8
  %v3_10f60 = load i32, i32* @r4, align 4
  store i32 %v3_10f60, i32* %stack_var_-20, align 4
  %v3_10f70 = and i32 %v3_10f5c, 2040
  %v2_10f74 = add i32 %v3_10f70, ptrtoint (i32* @global_var_1a24c.256 to i32)
  store i32 %v2_10f74, i32* %lr.global-to-local, align 4
  %v1_10f7c = add i32 %v3_10f70, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 4)
  store i32 %v1_10f7c, i32* %r7.global-to-local, align 4
  %v2_10f80 = load i32, i32* @global_var_1a1a4.259, align 4
  %v2_10f84 = inttoptr i32 %v1_10f7c to i8*
  %v3_10f84 = load i8, i8* %v2_10f84, align 4
  %v4_10f84 = zext i8 %v3_10f84 to i32
  %v1_10f88 = add i32 %v3_10f70, add (i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32 5)
  %v2_10f88 = inttoptr i32 %v1_10f88 to i8*
  %v3_10f88 = load i8, i8* %v2_10f88, align 1
  %v4_10f88 = zext i8 %v3_10f88 to i32
  %v3_10f8c = udiv i32 %v2_10f80, 256
  %v4_10f90 = mul nuw nsw i32 %v4_10f88, 256
  %v5_10f90 = or i32 %v4_10f90, %v4_10f84
  %v7_10f90 = icmp eq i32 %v5_10f90, 0
  %v3_10f94 = udiv i32 %v2_10f80, 65536
  %v1_10f98 = urem i32 %v3_10f8c, 256
  store i32 %v1_10f98, i32* %r6.global-to-local, align 4
  %v1_10f9c = urem i32 %v3_10f94, 256
  store i32 %v1_10f9c, i32* %r5.global-to-local, align 4
  %v3_10fa0 = udiv i32 %v2_10f80, 16777216
  store i32 %v3_10fa0, i32* %r4.global-to-local, align 4
  %v1_10fa4 = urem i32 %v2_10f80, 256
  br i1 %v7_10f90, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10f5c
  store i32 %v3_10f60, i32* @r4, align 4
  ret i32 %v1_10fa4

bb8:                                              ; preds = %dec_label_pc_10f5c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10fb0

dec_label_pc_10fb0:                               ; preds = %dec_label_pc_10fb0, %bb8
  %v2_10fbc = phi i32 [ %v1_10ff8, %dec_label_pc_10fb0 ], [ 0, %bb8 ]
  %v0_10fb0 = phi i32 [ %v0_10ff0, %dec_label_pc_10fb0 ], [ %v2_10f74, %bb8 ]
  %v1_10fb0 = inttoptr i32 %v0_10fb0 to i32*
  %v2_10fb0 = load i32, i32* %v1_10fb0, align 4
  %v2_10fb4 = add i32 %v2_10fb0, %v2_10fbc
  %v3_10fb4 = inttoptr i32 %v2_10fb4 to i8*
  %v4_10fb4 = load i8, i8* %v3_10fb4, align 1
  %v6_10fb4 = zext i8 %v4_10fb4 to i32
  %v2_10fb8 = xor i32 %v6_10fb4, %v1_10fa4
  %v1_10fbc = trunc i32 %v2_10fb8 to i8
  store i8 %v1_10fbc, i8* %v3_10fb4, align 1
  %v0_10fc0 = load i32, i32* %lr.global-to-local, align 4
  %v1_10fc0 = inttoptr i32 %v0_10fc0 to i32*
  %v2_10fc0 = load i32, i32* %v1_10fc0, align 4
  %v0_10fc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_10fc4 = add i32 %v0_10fc4, %v2_10fc0
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i8*
  %v4_10fc4 = load i8, i8* %v3_10fc4, align 1
  %v6_10fc4 = zext i8 %v4_10fc4 to i32
  %v0_10fc8 = load i32, i32* %r6.global-to-local, align 4
  %v2_10fc8 = xor i32 %v0_10fc8, %v6_10fc4
  %v1_10fcc = trunc i32 %v2_10fc8 to i8
  store i8 %v1_10fcc, i8* %v3_10fc4, align 1
  %v0_10fd0 = load i32, i32* %lr.global-to-local, align 4
  %v1_10fd0 = inttoptr i32 %v0_10fd0 to i32*
  %v2_10fd0 = load i32, i32* %v1_10fd0, align 4
  %v0_10fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_10fd4 = add i32 %v0_10fd4, %v2_10fd0
  %v3_10fd4 = inttoptr i32 %v2_10fd4 to i8*
  %v4_10fd4 = load i8, i8* %v3_10fd4, align 1
  %v6_10fd4 = zext i8 %v4_10fd4 to i32
  %v0_10fd8 = load i32, i32* %r5.global-to-local, align 4
  %v2_10fd8 = xor i32 %v0_10fd8, %v6_10fd4
  %v1_10fdc = trunc i32 %v2_10fd8 to i8
  store i8 %v1_10fdc, i8* %v3_10fd4, align 1
  %v0_10fe0 = load i32, i32* %lr.global-to-local, align 4
  %v1_10fe0 = inttoptr i32 %v0_10fe0 to i32*
  %v2_10fe0 = load i32, i32* %v1_10fe0, align 4
  %v0_10fe4 = load i32, i32* %ip.global-to-local, align 4
  %v2_10fe4 = add i32 %v0_10fe4, %v2_10fe0
  %v3_10fe4 = inttoptr i32 %v2_10fe4 to i8*
  %v4_10fe4 = load i8, i8* %v3_10fe4, align 1
  %v6_10fe4 = zext i8 %v4_10fe4 to i32
  %v0_10fe8 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fe8 = xor i32 %v0_10fe8, %v6_10fe4
  %v1_10fec = trunc i32 %v2_10fe8 to i8
  store i8 %v1_10fec, i8* %v3_10fe4, align 1
  %v0_10ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_10ff0 = add i32 %v0_10ff0, 4
  %v2_10ff0 = inttoptr i32 %v1_10ff0 to i8*
  %v3_10ff0 = load i8, i8* %v2_10ff0, align 1
  %v4_10ff0 = zext i8 %v3_10ff0 to i32
  %v0_10ff4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ff4 = add i32 %v0_10ff4, 1
  %v2_10ff4 = inttoptr i32 %v1_10ff4 to i8*
  %v3_10ff4 = load i8, i8* %v2_10ff4, align 1
  %v4_10ff4 = zext i8 %v3_10ff4 to i32
  %v0_10ff8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10ff8 = add i32 %v0_10ff8, 1
  store i32 %v1_10ff8, i32* %ip.global-to-local, align 4
  %v4_10ffc = mul nuw nsw i32 %v4_10ff4, 256
  %v5_10ffc = or i32 %v4_10ffc, %v4_10ff0
  %v8_11004 = icmp sgt i32 %v5_10ffc, %v1_10ff8
  br i1 %v8_11004, label %dec_label_pc_10fb0, label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_10fb0
  %v2_11008 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11008, i32* @r4, align 4
  ret i32 %v1_10fa4

; uselistorder directives
  uselistorder i32 %v1_10ff8, { 1, 2, 0 }
  uselistorder i32 %v0_10ff0, { 1, 0 }
  uselistorder i32 %v1_10fa4, { 1, 2, 0 }
  uselistorder i32 %v2_10f80, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 9, 6, 8, 7, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 23, 21, 24, 22, 25, 26, 28, 27, 34, 29, 35, 30, 36, 31, 37, 32, 38, 33, 39, 42, 40, 41, 43, 44, 49, 45, 50, 46, 51, 47, 48, 52, 55, 53, 54, 56, 57, 62, 58, 63, 59, 64, 60, 61, 65, 73, 66, 74, 67, 75, 68, 76, 77, 69, 78, 70, 79, 71, 80, 72, 84, 81, 85, 82, 86, 83, 87, 94, 88, 95, 96, 89, 97, 92, 98, 90, 99, 100, 91, 93, 101, 102, 106, 103, 107, 108, 104, 105, 109, 110, 111, 114, 112, 115, 113, 116, 117, 118, 123, 119, 124, 120, 125, 121, 126, 122, 127, 128, 129, 130, 131, 132, 134, 133, 135 }
}

define i32 @function_11014(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11014:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11014 = load i32, i32* @r4, align 4
  store i32 %v3_11014, i32* %stack_var_-36, align 4
  %v1_1101c = call i32* @malloc(i32 2)
  %v2_1101c = ptrtoint i32* %v1_1101c to i32
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a24c.256 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_1101c, i32* %r7.global-to-local, align 4
  %v4_11038 = call i32 @function_115a4(i32 %v2_1101c, i32 ptrtoint ([3 x i8]* @global_var_11e70.264 to i32), i32 2)
  %v0_1103c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_1101c, i32* @global_var_1a254.265, align 4
  %v1_11044 = trunc i32 %v0_1103c to i8
  store i8 %v1_11044, i8* bitcast (i32* @global_var_1a258.266 to i8*), align 4
  %v0_11048 = load i32, i32* %r6.global-to-local, align 4
  %v1_11048 = trunc i32 %v0_11048 to i8
  store i8 %v1_11048, i8* bitcast (i32* @global_var_1a259.267 to i8*), align 4
  %v1_1104c = call i32* @malloc(i32 %v0_1103c)
  %v3_1104c = ptrtoint i32* %v1_1104c to i32
  %v0_11050 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_1104c, i32* %r7.global-to-local, align 4
  %v3_1105c = call i32 @function_115a4(i32 %v3_1104c, i32 ptrtoint (i32* @global_var_11e74.269 to i32), i32 %v0_11050)
  store i32 %v3_1104c, i32* @global_var_1a25c.270, align 4
  %v0_11068 = load i32, i32* %r5.global-to-local, align 4
  %v1_11068 = trunc i32 %v0_11068 to i8
  store i8 %v1_11068, i8* bitcast (i32* @global_var_1a260.271 to i8*), align 4
  %v0_1106c = load i32, i32* %r6.global-to-local, align 4
  %v1_1106c = trunc i32 %v0_1106c to i8
  store i8 %v1_1106c, i8* bitcast (i32* @global_var_1a261.272 to i8*), align 4
  %v1_11070 = call i32* @malloc(i32 17)
  %v3_11070 = ptrtoint i32* %v1_11070 to i32
  store i32 %v3_11070, i32* %r5.global-to-local, align 4
  %v3_11080 = call i32 @function_115a4(i32 %v3_11070, i32 ptrtoint (i32* @global_var_11e78.274 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1a268.275 to i8*), align 4
  %v0_11090 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11090, i32* @global_var_1a264.276, align 4
  %v0_11094 = load i32, i32* %r6.global-to-local, align 4
  %v1_11094 = trunc i32 %v0_11094 to i8
  store i8 %v1_11094, i8* bitcast (i32* @global_var_1a269.277 to i8*), align 4
  %v1_11098 = call i32* @malloc(i32 6)
  %v2_11098 = ptrtoint i32* %v1_11098 to i32
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v2_11098, i32* %r5.global-to-local, align 4
  %v4_110ac = call i32 @function_115a4(i32 %v2_11098, i32 ptrtoint ([7 x i8]* @global_var_11e8c.279 to i32), i32 6)
  %v0_110b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_110b4, i32* @global_var_1a26c.280, align 4
  store i8 6, i8* bitcast (i32* @global_var_1a270.281 to i8*), align 4
  %v0_110bc = load i32, i32* %r6.global-to-local, align 4
  %v1_110bc = trunc i32 %v0_110bc to i8
  store i8 %v1_110bc, i8* bitcast (i32* @global_var_1a271.282 to i8*), align 4
  %v1_110c0 = call i32* @malloc(i32 7)
  %v3_110c0 = ptrtoint i32* %v1_110c0 to i32
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v3_110c0, i32* %r5.global-to-local, align 4
  %v4_110d4 = call i32 @function_115a4(i32 %v3_110c0, i32 ptrtoint ([8 x i8]* @global_var_11e94.284 to i32), i32 7)
  %v0_110dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_110dc, i32* @global_var_1a274.285, align 4
  store i8 7, i8* bitcast (i32* @global_var_1a278.286 to i8*), align 4
  %v0_110e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_110e4 = trunc i32 %v0_110e4 to i8
  store i8 %v1_110e4, i8* bitcast (i32* @global_var_1a279.287 to i8*), align 4
  %v1_110e8 = call i32* @malloc(i32 7)
  %v3_110e8 = ptrtoint i32* %v1_110e8 to i32
  %v0_110f0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_110e8, i32* %r5.global-to-local, align 4
  %v4_110f8 = call i32 @function_115a4(i32 %v3_110e8, i32 ptrtoint ([8 x i8]* @global_var_11e9c.289 to i32), i32 %v0_110f0)
  %v0_11100 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11100, i32* @global_var_1a27c.290, align 4
  %v1_11104 = trunc i32 %v0_110f0 to i8
  store i8 %v1_11104, i8* bitcast (i32* @global_var_1a280.291 to i8*), align 4
  %v0_11108 = load i32, i32* %r6.global-to-local, align 4
  %v1_11108 = trunc i32 %v0_11108 to i8
  store i8 %v1_11108, i8* bitcast (i32* @global_var_1a281.292 to i8*), align 4
  %v1_1110c = call i32* @malloc(i32 3)
  %v3_1110c = ptrtoint i32* %v1_1110c to i32
  store i32 %v3_1110c, i32* %r5.global-to-local, align 4
  %v4_1111c = call i32 @function_115a4(i32 %v3_1110c, i32 ptrtoint ([4 x i8]* @global_var_11ea4.294 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1a288.295 to i8*), align 4
  %v0_1112c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1112c, i32* @global_var_1a284.296, align 4
  %v0_11130 = load i32, i32* %r6.global-to-local, align 4
  %v1_11130 = trunc i32 %v0_11130 to i8
  store i8 %v1_11130, i8* bitcast (i32* @global_var_1a289.297 to i8*), align 4
  %v1_11134 = call i32* @malloc(i32 18)
  %v3_11134 = ptrtoint i32* %v1_11134 to i32
  store i32 %v3_11134, i32* %r5.global-to-local, align 4
  %v3_11144 = call i32 @function_115a4(i32 %v3_11134, i32 ptrtoint (i32* @global_var_11ea8.299 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1a290.300 to i8*), align 4
  %v0_11154 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11154, i32* @global_var_1a28c.301, align 4
  %v0_11158 = load i32, i32* %r6.global-to-local, align 4
  %v1_11158 = trunc i32 %v0_11158 to i8
  store i8 %v1_11158, i8* bitcast (i32* @global_var_1a291.302 to i8*), align 4
  %v1_1115c = call i32* @malloc(i32 24)
  %v3_1115c = ptrtoint i32* %v1_1115c to i32
  store i32 %v3_1115c, i32* %r5.global-to-local, align 4
  %v3_1116c = call i32 @function_115a4(i32 %v3_1115c, i32 ptrtoint (i32* @global_var_11ebc.304 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1a298.305 to i8*), align 4
  %v0_1117c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1117c, i32* @global_var_1a294.306, align 4
  %v0_11180 = load i32, i32* %r6.global-to-local, align 4
  %v1_11180 = trunc i32 %v0_11180 to i8
  store i8 %v1_11180, i8* bitcast (i32* @global_var_1a299.307 to i8*), align 4
  %v1_11184 = call i32* @malloc(i32 9)
  %v3_11184 = ptrtoint i32* %v1_11184 to i32
  store i32 %v3_11184, i32* %r5.global-to-local, align 4
  %v4_11194 = call i32 @function_115a4(i32 %v3_11184, i32 ptrtoint ([10 x i8]* @global_var_11ed8.309 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1a2a0.310 to i8*), align 4
  %v0_111a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111a4, i32* @global_var_1a29c.311, align 4
  %v0_111a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_111a8 = trunc i32 %v0_111a8 to i8
  store i8 %v1_111a8, i8* bitcast (i32* @global_var_1a2a1.312 to i8*), align 4
  %v1_111ac = call i32* @malloc(i32 16)
  %v2_111ac = ptrtoint i32* %v1_111ac to i32
  store i32 %v2_111ac, i32* %r5.global-to-local, align 4
  store i32 16, i32* %sb.global-to-local, align 4
  %v4_111c0 = call i32 @function_115a4(i32 %v2_111ac, i32 ptrtoint ([17 x i8]* @global_var_11ee4.314 to i32), i32 16)
  %v0_111c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111c8, i32* @global_var_1a2a4.315, align 4
  store i8 16, i8* bitcast (i32* @global_var_1a2a8.316 to i8*), align 4
  %v0_111d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_111d0 = trunc i32 %v0_111d0 to i8
  store i8 %v1_111d0, i8* bitcast (i32* @global_var_1a2a9.317 to i8*), align 4
  %v1_111d4 = call i32* @malloc(i32 22)
  %v3_111d4 = ptrtoint i32* %v1_111d4 to i32
  store i32 %v3_111d4, i32* %r5.global-to-local, align 4
  %v4_111e4 = call i32 @function_115a4(i32 %v3_111d4, i32 ptrtoint ([23 x i8]* @global_var_11ef8.319 to i32), i32 22)
  %v0_111ec = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1a2b0.320 to i8*), align 4
  %v0_111f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111f4, i32* @global_var_1a2ac.321, align 4
  %v0_111f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_111f8 = trunc i32 %v0_111f8 to i8
  store i8 %v1_111f8, i8* bitcast (i32* @global_var_1a2b1.322 to i8*), align 4
  %v1_111fc = call i32* @malloc(i32 %v0_111ec)
  %v3_111fc = ptrtoint i32* %v1_111fc to i32
  %v0_11204 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_111fc, i32* %r5.global-to-local, align 4
  %v4_1120c = call i32 @function_115a4(i32 %v3_111fc, i32 ptrtoint ([8 x i8]* @global_var_11f10.324 to i32), i32 %v0_11204)
  %v0_11214 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11214, i32* @global_var_1a2b4.325, align 4
  %v1_11218 = trunc i32 %v0_11204 to i8
  store i8 %v1_11218, i8* bitcast (i32* @global_var_1a2b8.326 to i8*), align 4
  %v0_1121c = load i32, i32* %r6.global-to-local, align 4
  %v1_1121c = trunc i32 %v0_1121c to i8
  store i8 %v1_1121c, i8* bitcast (i32* @global_var_1a2b9.327 to i8*), align 4
  %v1_11220 = call i32* @malloc(i32 5)
  %v3_11220 = ptrtoint i32* %v1_11220 to i32
  store i32 %v3_11220, i32* %r5.global-to-local, align 4
  %v4_11230 = call i32 @function_115a4(i32 %v3_11220, i32 ptrtoint ([6 x i8]* @global_var_11f18.329 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1a2c0.330 to i8*), align 4
  %v0_11240 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11240, i32* @global_var_1a2bc.331, align 4
  %v0_11244 = load i32, i32* %r6.global-to-local, align 4
  %v1_11244 = trunc i32 %v0_11244 to i8
  store i8 %v1_11244, i8* bitcast (i32* @global_var_1a2c1.332 to i8*), align 4
  %v1_11248 = call i32* @malloc(i32 4)
  %v3_11248 = ptrtoint i32* %v1_11248 to i32
  store i32 %v3_11248, i32* %r5.global-to-local, align 4
  %v4_11258 = call i32 @function_115a4(i32 %v3_11248, i32 ptrtoint ([5 x i8]* @global_var_11f20.334 to i32), i32 4)
  %v0_11260 = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1a2c8.335 to i8*), align 4
  %v0_11268 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11268, i32* @global_var_1a2c4.336, align 4
  %v0_1126c = load i32, i32* %r6.global-to-local, align 4
  %v1_1126c = trunc i32 %v0_1126c to i8
  store i8 %v1_1126c, i8* bitcast (i32* @global_var_1a2c9.337 to i8*), align 4
  %v1_11270 = call i32* @malloc(i32 %v0_11260)
  %v3_11270 = ptrtoint i32* %v1_11270 to i32
  %v0_11278 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_11270, i32* %r5.global-to-local, align 4
  %v4_11280 = call i32 @function_115a4(i32 %v3_11270, i32 ptrtoint ([7 x i8]* @global_var_11f28.339 to i32), i32 %v0_11278)
  %v0_11288 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11288, i32* @global_var_1a2cc.340, align 4
  %v1_1128c = trunc i32 %v0_11278 to i8
  store i8 %v1_1128c, i8* bitcast (i32* @global_var_1a2d0.341 to i8*), align 4
  %v0_11290 = load i32, i32* %r6.global-to-local, align 4
  %v1_11290 = trunc i32 %v0_11290 to i8
  store i8 %v1_11290, i8* bitcast (i32* @global_var_1a2d1.342 to i8*), align 4
  %v1_11294 = call i32* @malloc(i32 14)
  %v2_11294 = ptrtoint i32* %v1_11294 to i32
  store i32 %v2_11294, i32* %r5.global-to-local, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_112a8 = call i32 @function_115a4(i32 %v2_11294, i32 ptrtoint ([15 x i8]* @global_var_11f30.344 to i32), i32 14)
  %v0_112b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112b0, i32* @global_var_1a2d4.345, align 4
  store i8 14, i8* bitcast (i32* @global_var_1a2d8.346 to i8*), align 4
  %v0_112b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_112b8 = trunc i32 %v0_112b8 to i8
  store i8 %v1_112b8, i8* bitcast (i32* @global_var_1a2d9.347 to i8*), align 4
  %v1_112bc = call i32* @malloc(i32 8)
  %v2_112bc = ptrtoint i32* %v1_112bc to i32
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v2_112bc, i32* %r5.global-to-local, align 4
  %v4_112d0 = call i32 @function_115a4(i32 %v2_112bc, i32 ptrtoint ([9 x i8]* @global_var_11f40.349 to i32), i32 8)
  %v0_112d4 = load i32, i32* %r8.global-to-local, align 4
  %v0_112d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112d8, i32* @global_var_1a334.350, align 4
  store i8 8, i8* bitcast (i32* @global_var_1a338.351 to i8*), align 4
  %v0_112e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_112e0 = trunc i32 %v0_112e0 to i8
  store i8 %v1_112e0, i8* bitcast (i32* @global_var_1a339.352 to i8*), align 4
  %v1_112e4 = call i32* @malloc(i32 %v0_112d4)
  %v3_112e4 = ptrtoint i32* %v1_112e4 to i32
  %v0_112ec = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_112e4, i32* %r5.global-to-local, align 4
  %v4_112f4 = call i32 @function_115a4(i32 %v3_112e4, i32 ptrtoint ([8 x i8]* @global_var_11f4c.354 to i32), i32 %v0_112ec)
  %v0_112f8 = load i32, i32* %sb.global-to-local, align 4
  %v0_112fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112fc, i32* @global_var_1a33c.355, align 4
  %v1_11300 = trunc i32 %v0_112ec to i8
  store i8 %v1_11300, i8* bitcast (i32* @global_var_1a340.356 to i8*), align 4
  %v0_11304 = load i32, i32* %r6.global-to-local, align 4
  %v1_11304 = trunc i32 %v0_11304 to i8
  %v2_11304 = load i32, i32* %r4.global-to-local, align 4
  %v3_11304 = add i32 %v2_11304, 245
  %v4_11304 = inttoptr i32 %v3_11304 to i8*
  store i8 %v1_11304, i8* %v4_11304, align 1
  %v1_11308 = call i32* @malloc(i32 %v0_112f8)
  %v3_11308 = ptrtoint i32* %v1_11308 to i32
  %v0_11310 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_11308, i32* %r5.global-to-local, align 4
  %v4_11318 = call i32 @function_115a4(i32 %v3_11308, i32 ptrtoint ([17 x i8]* @global_var_11f54.358 to i32), i32 %v0_11310)
  %v0_1131c = load i32, i32* %r7.global-to-local, align 4
  %v0_11320 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11320, i32* @global_var_1a2dc.359, align 4
  %v1_11324 = trunc i32 %v0_11310 to i8
  store i8 %v1_11324, i8* bitcast (i32* @global_var_1a2e0.360 to i8*), align 4
  %v0_11328 = load i32, i32* %r6.global-to-local, align 4
  %v1_11328 = trunc i32 %v0_11328 to i8
  store i8 %v1_11328, i8* bitcast (i32* @global_var_1a2e1.361 to i8*), align 4
  %v1_1132c = call i32* @malloc(i32 %v0_1131c)
  %v3_1132c = ptrtoint i32* %v1_1132c to i32
  %v0_11334 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_1132c, i32* %r5.global-to-local, align 4
  %v4_1133c = call i32 @function_115a4(i32 %v3_1132c, i32 ptrtoint ([9 x i8]* @global_var_11f68.363 to i32), i32 %v0_11334)
  %v0_11344 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11344, i32* @global_var_1a2e4.364, align 4
  %v1_11348 = trunc i32 %v0_11334 to i8
  store i8 %v1_11348, i8* bitcast (i32* @global_var_1a2e8.365 to i8*), align 4
  %v0_1134c = load i32, i32* %r6.global-to-local, align 4
  %v1_1134c = trunc i32 %v0_1134c to i8
  store i8 %v1_1134c, i8* bitcast (i32* @global_var_1a2e9.366 to i8*), align 4
  %v1_11350 = call i32* @malloc(i32 21)
  %v3_11350 = ptrtoint i32* %v1_11350 to i32
  store i32 %v3_11350, i32* %r5.global-to-local, align 4
  %v3_11360 = call i32 @function_115a4(i32 %v3_11350, i32 ptrtoint (i32* @global_var_11ff0.368 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1a2f0.369 to i8*), align 4
  %v0_11370 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11370, i32* @global_var_1a2ec.370, align 4
  %v0_11374 = load i32, i32* %r6.global-to-local, align 4
  %v1_11374 = trunc i32 %v0_11374 to i8
  store i8 %v1_11374, i8* bitcast (i32* @global_var_1a2f1.371 to i8*), align 4
  %v1_11378 = call i32* @malloc(i32 17)
  %v3_11378 = ptrtoint i32* %v1_11378 to i32
  store i32 %v3_11378, i32* %r5.global-to-local, align 4
  %v4_11388 = call i32 @function_115a4(i32 %v3_11378, i32 ptrtoint ([18 x i8]* @global_var_11f74.373 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1a2f8.374 to i8*), align 4
  %v0_11398 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11398, i32* @global_var_1a2f4.375, align 4
  %v0_1139c = load i32, i32* %r6.global-to-local, align 4
  %v1_1139c = trunc i32 %v0_1139c to i8
  store i8 %v1_1139c, i8* bitcast (i32* @global_var_1a2f9.376 to i8*), align 4
  %v1_113a0 = call i32* @malloc(i32 12)
  %v3_113a0 = ptrtoint i32* %v1_113a0 to i32
  store i32 %v3_113a0, i32* %r5.global-to-local, align 4
  %v4_113b0 = call i32 @function_115a4(i32 %v3_113a0, i32 ptrtoint ([13 x i8]* @global_var_11f88.378 to i32), i32 12)
  %v0_113b8 = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1a300.379 to i8*), align 4
  %v0_113c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113c0, i32* @global_var_1a2fc.380, align 4
  %v0_113c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_113c4 = trunc i32 %v0_113c4 to i8
  store i8 %v1_113c4, i8* bitcast (i32* @global_var_1a301.381 to i8*), align 4
  %v1_113c8 = call i32* @malloc(i32 %v0_113b8)
  %v3_113c8 = ptrtoint i32* %v1_113c8 to i32
  %v0_113d0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_113c8, i32* %r5.global-to-local, align 4
  %v4_113d8 = call i32 @function_115a4(i32 %v3_113c8, i32 ptrtoint ([15 x i8]* @global_var_11f98.383 to i32), i32 %v0_113d0)
  %v0_113e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113e0, i32* @global_var_1a304.384, align 4
  %v1_113e4 = trunc i32 %v0_113d0 to i8
  store i8 %v1_113e4, i8* bitcast (i32* @global_var_1a308.385 to i8*), align 4
  %v0_113e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_113e8 = trunc i32 %v0_113e8 to i8
  store i8 %v1_113e8, i8* bitcast (i32* @global_var_1a309.386 to i8*), align 4
  %v1_113ec = call i32* @malloc(i32 19)
  %v3_113ec = ptrtoint i32* %v1_113ec to i32
  store i32 %v3_113ec, i32* %r5.global-to-local, align 4
  %v4_113fc = call i32 @function_115a4(i32 %v3_113ec, i32 ptrtoint ([20 x i8]* @global_var_11fa8.388 to i32), i32 19)
  %v0_11404 = load i32, i32* %r7.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1a310.389 to i8*), align 4
  %v0_1140c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1140c, i32* @global_var_1a30c.390, align 4
  %v0_11410 = load i32, i32* %r6.global-to-local, align 4
  %v1_11410 = trunc i32 %v0_11410 to i8
  store i8 %v1_11410, i8* bitcast (i32* @global_var_1a311.391 to i8*), align 4
  %v1_11414 = call i32* @malloc(i32 %v0_11404)
  %v3_11414 = ptrtoint i32* %v1_11414 to i32
  %v0_1141c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_11414, i32* %r5.global-to-local, align 4
  %v4_11424 = call i32 @function_115a4(i32 %v3_11414, i32 ptrtoint ([9 x i8]* @global_var_11fbc.393 to i32), i32 %v0_1141c)
  %v0_1142c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1142c, i32* @global_var_1a314.394, align 4
  %v1_11430 = trunc i32 %v0_1141c to i8
  store i8 %v1_11430, i8* bitcast (i32* @global_var_1a318.395 to i8*), align 4
  %v0_11434 = load i32, i32* %r6.global-to-local, align 4
  %v1_11434 = trunc i32 %v0_11434 to i8
  store i8 %v1_11434, i8* bitcast (i32* @global_var_1a319.396 to i8*), align 4
  %v1_11438 = call i32* @malloc(i32 5)
  %v3_11438 = ptrtoint i32* %v1_11438 to i32
  store i32 %v3_11438, i32* %r5.global-to-local, align 4
  %v4_11448 = call i32 @function_115a4(i32 %v3_11438, i32 ptrtoint ([6 x i8]* @global_var_11fc8.398 to i32), i32 5)
  %v0_11450 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1a320.399 to i8*), align 4
  %v0_11458 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11458, i32* @global_var_1a31c.400, align 4
  %v0_1145c = load i32, i32* %r6.global-to-local, align 4
  %v1_1145c = trunc i32 %v0_1145c to i8
  store i8 %v1_1145c, i8* bitcast (i32* @global_var_1a321.401 to i8*), align 4
  %v1_11460 = call i32* @malloc(i32 %v0_11450)
  %v3_11460 = ptrtoint i32* %v1_11460 to i32
  %v0_11468 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_11460, i32* %r5.global-to-local, align 4
  %v4_11470 = call i32 @function_115a4(i32 %v3_11460, i32 ptrtoint ([7 x i8]* @global_var_11fd0.403 to i32), i32 %v0_11468)
  %v0_11478 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11478, i32* @global_var_1a324.404, align 4
  %v1_1147c = trunc i32 %v0_11468 to i8
  store i8 %v1_1147c, i8* bitcast (i32* @global_var_1a328.405 to i8*), align 4
  %v0_11480 = load i32, i32* %r6.global-to-local, align 4
  %v1_11480 = trunc i32 %v0_11480 to i8
  store i8 %v1_11480, i8* bitcast (i32* @global_var_1a329.406 to i8*), align 4
  %v1_11484 = call i32* @malloc(i32 23)
  %v3_11484 = ptrtoint i32* %v1_11484 to i32
  store i32 %v3_11484, i32* %r5.global-to-local, align 4
  %v4_11494 = call i32 @function_115a4(i32 %v3_11484, i32 ptrtoint ([24 x i8]* @global_var_11fd8.408 to i32), i32 23)
  %v0_1149c = load i32, i32* %r6.global-to-local, align 4
  %v1_1149c = trunc i32 %v0_1149c to i8
  store i8 %v1_1149c, i8* bitcast (i32* @global_var_1a331.409 to i8*), align 4
  %v0_114a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114a0, i32* @global_var_1a32c.410, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a330.411 to i8*), align 4
  %v2_114a8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_114a8, i32* @r4, align 4
  ret i32 %v4_11494

; uselistorder directives
  uselistorder i32 %v3_11460, { 1, 0 }
  uselistorder i32 %v3_11414, { 1, 0 }
  uselistorder i32 %v3_113c8, { 1, 0 }
  uselistorder i32 %v3_1132c, { 1, 0 }
  uselistorder i32 %v3_11308, { 1, 0 }
  uselistorder i32 %v3_112e4, { 1, 0 }
  uselistorder i32 %v2_112bc, { 1, 0 }
  uselistorder i32 %v3_11270, { 1, 0 }
  uselistorder i32 %v3_111fc, { 1, 0 }
  uselistorder i32 %v3_110e8, { 1, 0 }
  uselistorder i32 %v3_110c0, { 1, 0 }
  uselistorder i32 %v2_11098, { 1, 0 }
  uselistorder i32 %v3_1104c, { 0, 2, 1 }
  uselistorder i32 %v2_1101c, { 0, 2, 1 }
  uselistorder i32 23, { 1, 0, 6, 2, 3, 4, 5 }
  uselistorder i32 19, { 4, 1, 0, 9, 5, 6, 7, 8, 10, 2, 11, 3, 12 }
  uselistorder i32 12, { 9, 5, 26, 31, 23, 32, 19, 16, 17, 18, 20, 21, 22, 24, 27, 28, 25, 33, 34, 35, 4, 36, 37, 38, 29, 30, 40, 41, 15, 42, 10, 43, 11, 44, 12, 45, 3, 46, 39, 81, 47, 48, 49, 50, 13, 51, 52, 53, 54, 55, 14, 56, 57, 58, 59, 60, 61, 6, 62, 63, 64, 65, 66, 67, 7, 68, 69, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 0, 1, 2 }
  uselistorder i32 21, { 3, 2, 8, 9, 10, 7, 0, 1, 4, 11, 5, 12, 6, 13 }
  uselistorder i32 14, { 0, 18, 1, 17, 4, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 16, 22, 23, 24, 25, 2, 26, 27, 28, 29, 3, 30 }
  uselistorder i8 5, { 11, 12, 13, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 5, { 15, 4, 16, 5, 2, 18, 23, 19, 24, 20, 25, 17, 26, 3, 0, 21, 22, 27, 28, 6, 29, 30, 31, 7, 32, 33, 34, 35, 8, 36, 37, 38, 39, 9, 40, 44, 45, 46, 47, 10, 48, 49, 50, 51, 11, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 65, 13, 66, 67, 68, 69, 70, 71, 72, 73, 14, 74, 75, 41, 1, 42, 43 }
  uselistorder i32 22, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5 }
  uselistorder i8 16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16 }
  uselistorder i32 18, { 1, 0, 10, 2, 3, 4, 5, 11, 6, 12, 7, 13, 8, 14, 9, 15 }
  uselistorder i32 7, { 0, 14, 24, 2, 16, 20, 17, 21, 18, 22, 15, 23, 1, 19, 25, 26, 3, 27, 28, 4, 29, 30, 5, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 8, 41, 42, 43, 44, 45, 9, 46, 47, 48, 49, 50, 10, 51, 52, 53, 54, 11, 55, 12, 13, 56 }
  uselistorder i32 6, { 2, 29, 3, 15, 25, 16, 26, 17, 27, 14, 28, 0, 18, 30, 1, 4, 31, 32, 33, 19, 34, 5, 35, 36, 37, 20, 38, 6, 39, 40, 41, 21, 42, 43, 44, 22, 45, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 23, 61, 9, 62, 63, 64, 65, 66, 67, 24, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 74, 46, 47, 48 }
  uselistorder i32 17, { 4, 0, 5, 1, 16, 6, 17, 7, 8, 9, 10, 18, 19, 2, 20, 21, 22, 3, 23, 24, 25, 26, 27, 28, 11, 29, 12, 30, 31, 32, 13, 33, 14, 15 }
  uselistorder i32 (i32, i32, i32)* @function_115a4, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 0, 5, 4, 3, 2, 1, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1a24c.256 to i32), { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* (i32)* @malloc, { 22, 8, 0, 25, 23, 1, 2, 3, 4, 5, 6, 16, 15, 19, 7, 21, 24, 12, 11, 17, 32, 33, 30, 29, 34, 13, 28, 27, 26, 31, 20, 18, 10, 9, 14, 35 }
}

define i32 @function_11528(i8* %arg1) local_unnamed_addr {
dec_label_pc_11528:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_1152c = load i8, i8* %arg1, align 1
  %v4_1152c = zext i8 %v3_1152c to i32
  %v2_11530 = icmp eq i8 %v3_1152c, 0
  br i1 %v2_11530, label %dec_label_pc_1154c, label %bb

dec_label_pc_1154c:                               ; preds = %dec_label_pc_1153c, %dec_label_pc_11528
  %merge = phi i32 [ %v4_1152c, %dec_label_pc_11528 ], [ %v1_1153c, %dec_label_pc_1153c ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11528
  br label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_1153c, %bb
  %v0_1153c = phi i32 [ %v1_1153c, %dec_label_pc_1153c ], [ 0, %bb ]
  %v1_1153c = add i32 %v0_1153c, 1
  %v2_11540 = add i32 %v1_1153c, %tmp
  %v3_11540 = inttoptr i32 %v2_11540 to i8*
  %v4_11540 = load i8, i8* %v3_11540, align 1
  %v2_11544 = icmp eq i8 %v4_11540, 0
  br i1 %v2_11544, label %dec_label_pc_1154c, label %dec_label_pc_1153c

; uselistorder directives
  uselistorder i32 %v1_1153c, { 1, 0, 2 }
}

define i32 @function_11550(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11550:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11550 = load i8, i8* %arg1, align 1
  %v3_11550 = zext i8 %v2_11550 to i32
  %v2_11554 = icmp eq i8 %v2_11550, 0
  br i1 %v2_11554, label %dec_label_pc_11598, label %dec_label_pc_1155c

dec_label_pc_1155c:                               ; preds = %dec_label_pc_11550
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11560, %dec_label_pc_1155c
  %v0_11560 = phi i32 [ %v1_11560, %dec_label_pc_11560 ], [ 0, %dec_label_pc_1155c ]
  %v1_11560 = add i32 %v0_11560, 1
  store i32 %v1_11560, i32* %ip.global-to-local, align 4
  %v2_11564 = add i32 %v1_11560, %tmp
  %v3_11564 = inttoptr i32 %v2_11564 to i8*
  %v4_11564 = load i8, i8* %v3_11564, align 1
  %v2_11568 = icmp eq i8 %v4_11564, 0
  br i1 %v2_11568, label %dec_label_pc_11570, label %dec_label_pc_11560

dec_label_pc_11570:                               ; preds = %dec_label_pc_11560
  %v7_11570 = icmp eq i32 %v0_11560, -2
  br i1 %v7_11570, label %dec_label_pc_11590, label %dec_label_pc_1157c.preheader

dec_label_pc_1157c.preheader:                     ; preds = %dec_label_pc_11570, %dec_label_pc_11598
  %storemerge = phi i32 [ %v3_11550, %dec_label_pc_11598 ], [ %v1_11560, %dec_label_pc_11570 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11588.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_1157c.dec_label_pc_1157c_crit_edge, %dec_label_pc_1157c.preheader
  %v2_11588 = phi i32 [ %v5_11588, %dec_label_pc_1157c.dec_label_pc_1157c_crit_edge ], [ %v2_11588.pre, %dec_label_pc_1157c.preheader ]
  %v0_11580 = phi i32 [ %v0_11580.pre, %dec_label_pc_1157c.dec_label_pc_1157c_crit_edge ], [ %tmp, %dec_label_pc_1157c.preheader ]
  %v0_1157c = phi i32 [ %v0_1157c.pre, %dec_label_pc_1157c.dec_label_pc_1157c_crit_edge ], [ %storemerge, %dec_label_pc_1157c.preheader ]
  %v1_1157c = add i32 %v0_1157c, -1
  store i32 %v1_1157c, i32* %r2.global-to-local, align 4
  %v1_11580 = inttoptr i32 %v0_11580 to i8*
  %v2_11580 = load i8, i8* %v1_11580, align 1
  %v5_11580 = add i32 %v0_11580, 1
  store i32 %v5_11580, i32* %r1.global-to-local, align 4
  %v3_11584 = icmp eq i32 %v0_1157c, 0
  %v3_11588 = inttoptr i32 %v2_11588 to i8*
  store i8 %v2_11580, i8* %v3_11588, align 1
  %v4_11588 = load i32, i32* @r0, align 4
  %v5_11588 = add i32 %v4_11588, 1
  store i32 %v5_11588, i32* @r0, align 4
  br i1 %v3_11584, label %dec_label_pc_11590.loopexit, label %dec_label_pc_1157c.dec_label_pc_1157c_crit_edge

dec_label_pc_1157c.dec_label_pc_1157c_crit_edge:  ; preds = %dec_label_pc_1157c
  %v0_1157c.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11580.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1157c

dec_label_pc_11590.loopexit:                      ; preds = %dec_label_pc_1157c
  %v0_11590.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11590

dec_label_pc_11590:                               ; preds = %dec_label_pc_11590.loopexit, %dec_label_pc_11570
  %v0_11590 = phi i32 [ %v0_11590.pre, %dec_label_pc_11590.loopexit ], [ %v1_11560, %dec_label_pc_11570 ]
  ret i32 %v0_11590

dec_label_pc_11598:                               ; preds = %dec_label_pc_11550
  store i32 %v3_11550, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1157c.preheader

; uselistorder directives
  uselistorder i32 %v5_11588, { 1, 0 }
  uselistorder i32 %v0_11580, { 1, 0 }
  uselistorder i32 %v1_11560, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11550, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1157c.preheader, { 1, 0 }
}

define i32 @function_115a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115a4:
  %ip.global-to-local = alloca i32, align 4
  %v2_115a4 = icmp eq i32 %arg3, 0
  br i1 %v2_115a4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_115b0, %dec_label_pc_115a4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_115a4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_115b0

dec_label_pc_115b0:                               ; preds = %dec_label_pc_115b0, %bb
  %v0_115b0 = phi i32 [ %v1_115b8, %dec_label_pc_115b0 ], [ 0, %bb ]
  %v2_115b0 = add i32 %v0_115b0, %arg2
  %v3_115b0 = inttoptr i32 %v2_115b0 to i8*
  %v4_115b0 = load i8, i8* %v3_115b0, align 1
  %v4_115b4 = add i32 %v0_115b0, %arg1
  %v5_115b4 = inttoptr i32 %v4_115b4 to i8*
  store i8 %v4_115b0, i8* %v5_115b4, align 1
  %v0_115b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_115b8 = add i32 %v0_115b8, 1
  store i32 %v1_115b8, i32* %ip.global-to-local, align 4
  %v9_115bc = icmp eq i32 %v1_115b8, %arg3
  br i1 %v9_115bc, label %.loopexit, label %dec_label_pc_115b0

; uselistorder directives
  uselistorder i32 %v1_115b8, { 1, 2, 0 }
}

define i32 @function_115c8() local_unnamed_addr {
dec_label_pc_115c8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_115c8 = load i32, i32* @r1, align 4
  %v2_115c8 = icmp eq i32 %v0_115c8, 0
  br i1 %v2_115c8, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_115c8
  %v2_115cc = load i32, i32* @r0, align 4
  ret i32 %v2_115cc

bb3:                                              ; preds = %dec_label_pc_115c8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_115d84 = load i32, i32* @r0, align 4
  %v5_115d85 = inttoptr i32 %v3_115d84 to i8*
  store i8 0, i8* %v5_115d85, align 1
  %v0_115dc6 = load i32, i32* %r3.global-to-local, align 4
  %v1_115dc7 = add i32 %v0_115dc6, 1
  store i32 %v1_115dc7, i32* %r3.global-to-local, align 4
  %v1_115e08 = load i32, i32* @r1, align 4
  %v9_115e010 = icmp eq i32 %v1_115dc7, %v1_115e08
  br i1 %v9_115e010, label %dec_label_pc_115e8, label %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge

dec_label_pc_115d8.dec_label_pc_115d8_crit_edge:  ; preds = %bb3, %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge
  %v1_115dc11 = phi i32 [ %v1_115dc, %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge ], [ %v1_115dc7, %bb3 ]
  %v0_115d8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_115d8.pre to i8
  %v3_115d8 = load i32, i32* @r0, align 4
  %v4_115d8 = add i32 %v3_115d8, %v1_115dc11
  %v5_115d8 = inttoptr i32 %v4_115d8 to i8*
  store i8 %extract.t, i8* %v5_115d8, align 1
  %v0_115dc = load i32, i32* %r3.global-to-local, align 4
  %v1_115dc = add i32 %v0_115dc, 1
  store i32 %v1_115dc, i32* %r3.global-to-local, align 4
  %v1_115e0 = load i32, i32* @r1, align 4
  %v9_115e0 = icmp eq i32 %v1_115dc, %v1_115e0
  br i1 %v9_115e0, label %dec_label_pc_115e8, label %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge

dec_label_pc_115e8:                               ; preds = %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge, %bb3
  %v1_115e8 = load i32, i32* @r0, align 4
  ret i32 %v1_115e8

; uselistorder directives
  uselistorder i32 %v1_115dc, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder label %dec_label_pc_115d8.dec_label_pc_115d8_crit_edge, { 1, 0 }
}

define i32 @function_115ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_115ec:
  %v7_11600 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11600, label %dec_label_pc_11604, label %dec_label_pc_1160c

dec_label_pc_11604:                               ; preds = %dec_label_pc_11620, %dec_label_pc_115ec, %dec_label_pc_1160c
  ret i32 -1

dec_label_pc_1160c:                               ; preds = %dec_label_pc_115ec
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_11604, label %dec_label_pc_11614

dec_label_pc_11614:                               ; preds = %dec_label_pc_1160c
  br label %dec_label_pc_1162c

dec_label_pc_11620:                               ; preds = %dec_label_pc_11644, %dec_label_pc_1162c
  %v1_11620 = add i32 %v0_1164c, 1
  %v9_11624 = icmp eq i32 %v1_11620, %arg2
  br i1 %v9_11624, label %dec_label_pc_11604, label %dec_label_pc_1162c

dec_label_pc_1162c:                               ; preds = %dec_label_pc_11620, %dec_label_pc_11614
  %v0_1164c = phi i32 [ %v1_11620, %dec_label_pc_11620 ], [ 0, %dec_label_pc_11614 ]
  %v0_11638 = phi i32 [ %v1_11638., %dec_label_pc_11620 ], [ 0, %dec_label_pc_11614 ]
  %v2_1162c = add i32 %v0_11638, %arg3
  %v3_1162c = inttoptr i32 %v2_1162c to i8*
  %v4_1162c = load i8, i8* %v3_1162c, align 1
  %v2_11630 = add i32 %v0_1164c, %arg1
  %v3_11630 = inttoptr i32 %v2_11630 to i8*
  %v4_11630 = load i8, i8* %v3_11630, align 1
  %v9_11634 = icmp eq i8 %v4_11630, %v4_1162c
  %v1_11638 = add i32 %v0_11638, 1
  %v1_11638. = select i1 %v9_11634, i32 %v1_11638, i32 0
  br i1 %v9_11634, label %dec_label_pc_11644, label %dec_label_pc_11620

dec_label_pc_11644:                               ; preds = %dec_label_pc_1162c
  %v9_11644 = icmp eq i32 %v1_11638., %arg4
  br i1 %v9_11644, label %dec_label_pc_1164c, label %dec_label_pc_11620

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11644
  %v1_1164c = add i32 %v0_1164c, 1
  ret i32 %v1_1164c

; uselistorder directives
  uselistorder i1 %v9_11634, { 1, 0 }
  uselistorder i32 %v0_11638, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11604, { 0, 2, 1 }
}

define i32 @function_11654(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11654:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_11660

dec_label_pc_11660:                               ; preds = %.thread, %dec_label_pc_11678, %bb, %dec_label_pc_11654
  %v0_11660 = phi i32 [ %tmp, %dec_label_pc_11654 ], [ %v5_11660, %bb ], [ %v5_11660, %dec_label_pc_11678 ], [ %v5_11660, %.thread ]
  %v1_11660 = inttoptr i32 %v0_11660 to i8*
  %v2_11660 = load i8, i8* %v1_11660, align 1
  %v5_11660 = add i32 %v0_11660, 1
  %v7_11668 = icmp eq i8 %v2_11660, 9
  br i1 %v7_11668, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11660
  br label %dec_label_pc_11660

bb:                                               ; preds = %dec_label_pc_11660
  %v8_1166c = icmp eq i8 %v2_11660, 32
  br i1 %v8_1166c, label %dec_label_pc_11660, label %dec_label_pc_11678

dec_label_pc_11678:                               ; preds = %bb
  %v7_11678 = icmp eq i8 %v2_11660, 10
  br i1 %v7_11678, label %dec_label_pc_11660, label %dec_label_pc_11680

dec_label_pc_11680:                               ; preds = %dec_label_pc_11678
  %v7_11680 = icmp eq i8 %v2_11660, 45
  br i1 %v7_11680, label %dec_label_pc_11760, label %dec_label_pc_11688

dec_label_pc_11688:                               ; preds = %dec_label_pc_11680
  %v7_11688 = icmp eq i8 %v2_11660, 43
  br i1 %v7_11688, label %bb54, label %dec_label_pc_11698

bb54:                                             ; preds = %dec_label_pc_11688
  %v2_1168c = inttoptr i32 %v5_11660 to i8*
  %v3_1168c = load i8, i8* %v2_1168c, align 1
  %v6_1168c = add i32 %v0_11660, 2
  br label %dec_label_pc_11698

dec_label_pc_11698:                               ; preds = %bb54, %dec_label_pc_11688, %dec_label_pc_11760
  %v0_1174442 = phi i32 [ %v5_11760, %dec_label_pc_11760 ], [ %v5_11660, %dec_label_pc_11688 ], [ %v6_1168c, %bb54 ]
  %v0_116c017.in = phi i8 [ %v2_11760, %dec_label_pc_11760 ], [ %v2_11660, %dec_label_pc_11688 ], [ %v3_1168c, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11760 ], [ 2147483647, %dec_label_pc_11688 ], [ 2147483647, %bb54 ]
  %v0_11770 = phi i32 [ 1, %dec_label_pc_11760 ], [ 0, %dec_label_pc_11688 ], [ 0, %bb54 ]
  %v2_116a0 = urem i32 %storemerge1, %arg2
  %v2_116b0 = udiv i32 %storemerge1, %arg2
  store i32 %v2_116b0, i32* @lr, align 4
  br label %dec_label_pc_116c0

dec_label_pc_116c0:                               ; preds = %.thread8, %dec_label_pc_11698
  %v0_11744 = phi i32 [ %v5_11744, %.thread8 ], [ %v0_1174442, %dec_label_pc_11698 ]
  %v2_1173c11 = phi i32 [ %v1_1175829, %.thread8 ], [ 0, %dec_label_pc_11698 ]
  %v1_11718 = phi i32 [ %v0_1174c27, %.thread8 ], [ 0, %dec_label_pc_11698 ]
  %v1_11700.in = phi i8 [ %v2_11744, %.thread8 ], [ %v0_116c017.in, %dec_label_pc_11698 ]
  %v1_11700 = zext i8 %v1_11700.in to i32
  %v1_116c0 = urem i32 %v1_11700, 256
  %v1_116c4 = add nsw i32 %v1_116c0, -48
  %v1_116cc = add nsw i32 %v1_116c0, -97
  %v1_116d0 = add nsw i32 %v1_11700, -48
  %v1_116d4 = add nsw i32 %v1_116c0, -65
  %tmp77 = icmp ult i32 %v1_116c4, 10
  br i1 %tmp77, label %dec_label_pc_11704, label %dec_label_pc_116dc

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116c0
  %v2_116dc = icmp ugt i32 %v1_116d4, 24
  %v7_116dc = icmp eq i32 %v1_116d4, 25
  %v2_116e0 = xor i1 %v7_116dc, true
  %v3_116e0 = and i1 %v2_116dc, %v2_116e0
  br i1 %v3_116e0, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_116dc
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_116dc, %bb55
  %v0_116f421 = phi i32 [ %v1_116d0, %dec_label_pc_116dc ], [ 0, %bb55 ]
  %v2_116e4 = xor i1 %v2_116dc, true
  %v3_116e4 = or i1 %v7_116dc, %v2_116e4
  br i1 %v3_116e4, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_116f4 = phi i32 [ %v0_116f421, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_116e0, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_116ec = icmp ugt i32 %v1_116cc, 24
  %v11_116ec = icmp eq i32 %v1_116cc, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_116f0 = phi i1 [ %v7_116dc, %bb58 ], [ %v11_116ec, %bb59 ]
  %v0_116f0 = phi i1 [ %v2_116dc, %bb58 ], [ %v6_116ec, %bb59 ]
  %v2_116f0 = xor i1 %v1_116f0, true
  %v3_116f0 = and i1 %v0_116f0, %v2_116f0
  br i1 %v3_116f0, label %dec_label_pc_1174c, label %dec_label_pc_116f4

dec_label_pc_116f4:                               ; preds = %bb60
  %v2_116f4 = icmp eq i32 %v0_116f4, 0
  %. = select i1 %v2_116f4, i32 87, i32 55
  %v2_11700 = sub nsw i32 %v1_11700, %.
  br label %dec_label_pc_11704

dec_label_pc_11704:                               ; preds = %dec_label_pc_116c0, %dec_label_pc_116f4
  %v0_1171837 = phi i32 [ %v1_116d4, %dec_label_pc_116c0 ], [ %., %dec_label_pc_116f4 ]
  %v3_1173c12 = phi i32 [ %v1_116d0, %dec_label_pc_116c0 ], [ %v2_11700, %dec_label_pc_116f4 ]
  %v6_11708 = icmp slt i32 %v3_1173c12, %arg2
  br i1 %v6_11708, label %dec_label_pc_1170c, label %dec_label_pc_1174c

dec_label_pc_1170c:                               ; preds = %dec_label_pc_11704
  %v3_1170c = icmp uge i32 %v2_1173c11, %v2_116b0
  %v9_1170c = icmp eq i32 %v2_1173c11, %v2_116b0
  %v2_11710 = xor i1 %v3_1170c, true
  %v3_11710 = or i1 %v9_1170c, %v2_11710
  br i1 %v3_11710, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_1170c
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_1170c, %bb63
  %v0_1171836 = phi i32 [ %v0_1171837, %dec_label_pc_1170c ], [ 0, %bb63 ]
  %v2_11714 = xor i1 %v9_1170c, true
  %v3_11714 = and i1 %v3_1170c, %v2_11714
  br i1 %v3_11714, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_11718 = phi i32 [ %v0_1171836, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_11718, 0
  %v4_11718 = zext i1 %tmp78 to i32
  %v5_11718 = or i32 %v0_11718, %v4_11718
  %v7_11718 = icmp eq i32 %v5_11718, 0
  br i1 %v7_11718, label %dec_label_pc_11724, label %.thread8

dec_label_pc_11724:                               ; preds = %bb66
  %v7_11734 = icmp sgt i32 %v3_1173c12, %v2_116a0
  br i1 %v7_11734, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11724
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_11724
  %v2_11738 = icmp eq i1 %v9_1170c, false
  br i1 %v2_11738, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_1173c13 = mul i32 %v2_1173c11, %arg2
  %v5_1173c14 = add i32 %v3_1173c12, %v4_1173c13
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_1175829 = phi i32 [ %v2_1173c11, %bb69 ], [ %v2_1173c11, %bb66 ], [ %v5_1173c14, %bb70 ]
  %v0_1174c27 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_11744 = inttoptr i32 %v0_11744 to i8*
  %v2_11744 = load i8, i8* %v1_11744, align 1
  %v5_11744 = add i32 %v0_11744, 1
  br label %dec_label_pc_116c0

dec_label_pc_1174c:                               ; preds = %dec_label_pc_11704, %bb60
  %v1_1174c = icmp slt i32 %v1_11718, 0
  %v2_11770 = icmp eq i32 %v0_11770, 0
  br i1 %v1_1174c, label %dec_label_pc_11770, label %dec_label_pc_11754

dec_label_pc_11754:                               ; preds = %dec_label_pc_1174c
  br i1 %v2_11770, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_11754
  %v2_11758 = sub i32 0, %v2_1173c11
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_11754, %bb71
  %v23_1175c = phi i32 [ %v2_1173c11, %dec_label_pc_11754 ], [ %v2_11758, %bb71 ]
  ret i32 %v23_1175c

dec_label_pc_11760:                               ; preds = %dec_label_pc_11680
  %v1_11760 = inttoptr i32 %v5_11660 to i8*
  %v2_11760 = load i8, i8* %v1_11760, align 1
  %v5_11760 = add i32 %v0_11660, 2
  br label %dec_label_pc_11698

dec_label_pc_11770:                               ; preds = %dec_label_pc_1174c
  %.76 = select i1 %v2_11770, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_1170c, { 1, 0, 2 }
  uselistorder i1 %v3_1170c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_116dc, { 1, 2, 0 }
  uselistorder i1 %v2_116dc, { 1, 0, 2 }
  uselistorder i32 %v1_116c0, { 1, 2, 0 }
  uselistorder i32 %v1_11700, { 1, 0, 2 }
  uselistorder i32 %v1_11718, { 1, 0 }
  uselistorder i32 %v2_1173c11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11744, { 1, 0 }
  uselistorder i32 %v2_116b0, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_11660, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_11660, { 0, 1, 3, 2 }
  uselistorder i32 25, { 23, 24, 3, 11, 4, 12, 5, 13, 2, 14, 10, 6, 15, 0, 16, 17, 18, 7, 8, 19, 9, 20, 21, 1, 22 }
  uselistorder i32 24, { 33, 34, 12, 11, 62, 41, 63, 42, 43, 50, 54, 35, 36, 37, 38, 39, 40, 57, 44, 45, 46, 47, 48, 49, 51, 52, 58, 53, 59, 55, 56, 64, 65, 66, 60, 61, 67, 13, 14, 15, 16, 0, 17, 18, 1, 19, 2, 20, 3, 4, 21, 5, 6, 70, 22, 7, 71, 23, 24, 8, 72, 25, 73, 74, 75, 26, 27, 9, 76, 28, 77, 29, 30, 10, 78, 31, 79, 80, 68, 32, 69 }
  uselistorder i8 32, { 7, 8, 9, 0, 10, 11, 1, 2, 12, 3, 4, 5, 6 }
  uselistorder i8 9, { 3, 4, 2, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_11704, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_11698, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11660, { 1, 2, 0, 3 }
}

define i32 @function_11780(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11780:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11780 = load i32, i32* @r4, align 4
  store i32 %v3_11780, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11798

dec_label_pc_11798:                               ; preds = %dec_label_pc_117c4.dec_label_pc_11798_crit_edge, %dec_label_pc_11780
  %v0_1179c = phi i32 [ %v0_1179c.pre, %dec_label_pc_117c4.dec_label_pc_11798_crit_edge ], [ %arg3, %dec_label_pc_11780 ]
  %v0_11798 = phi i32 [ %v1_117b0, %dec_label_pc_117c4.dec_label_pc_11798_crit_edge ], [ %tmp, %dec_label_pc_11780 ]
  %v3_117a4 = inttoptr i32 %v0_11798 to i32*
  %v4_117a4 = call i32 @read(i32 %v0_1179c, i32* %v3_117a4, i32 1)
  %v7_117a8 = icmp eq i32 %v4_117a4, 1
  %v0_117ac = load i32, i32* %r4.global-to-local, align 4
  %v1_117b0 = add i32 %v0_117ac, 1
  store i32 %v1_117b0, i32* %r4.global-to-local, align 4
  %v0_117b8 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_117a8, label %dec_label_pc_117b8, label %dec_label_pc_117d0

dec_label_pc_117b8:                               ; preds = %dec_label_pc_11798
  %v1_117b8 = add i32 %v0_117b8, 1
  store i32 %v1_117b8, i32* %r5.global-to-local, align 4
  %v0_117bc = load i32, i32* %r7.global-to-local, align 4
  %v7_117c0 = icmp sgt i32 %v0_117bc, %v1_117b8
  br i1 %v7_117c0, label %dec_label_pc_117c4, label %dec_label_pc_117d0

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117b8
  %v1_117c4 = inttoptr i32 %v0_117ac to i8*
  %v2_117c4 = load i8, i8* %v1_117c4, align 1
  %v7_117c8 = icmp eq i8 %v2_117c4, 10
  br i1 %v7_117c8, label %dec_label_pc_117d0, label %dec_label_pc_117c4.dec_label_pc_11798_crit_edge

dec_label_pc_117c4.dec_label_pc_11798_crit_edge:  ; preds = %dec_label_pc_117c4
  %v0_1179c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11798

dec_label_pc_117d0:                               ; preds = %dec_label_pc_11798, %dec_label_pc_117c4, %dec_label_pc_117b8
  %v0_117d0 = phi i32 [ %v1_117b8, %dec_label_pc_117c4 ], [ %v1_117b8, %dec_label_pc_117b8 ], [ %v0_117b8, %dec_label_pc_11798 ]
  %v2_117d0 = icmp eq i32 %v0_117d0, 0
  %v1_117d4 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_117d0, i32 0, i32 %v1_117d4
  %v2_117dc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117dc, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_117b0, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32)* @read, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_117d0, { 1, 2, 0 }
}

define i32 @function_117e0() local_unnamed_addr {
dec_label_pc_117e0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_117f0 = call i32* @__errno_location()
  store i32 0, i32* %v0_117f0, align 4
  %v3_11808 = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_11814 = icmp eq i32 %v3_11808, -1
  store i32 %v3_11808, i32* %r5.global-to-local, align 4
  %v2_11820 = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_11814, label %dec_label_pc_11870, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %dec_label_pc_117e0
  %v7_11820 = shl i32 2056, %v2_11820
  %v8_11820 = or i32 %v7_11820, 2056
  %v2_117e8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_11824 = inttoptr i32 %v2_11820 to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_11850 = call i32 @connect(i32 %v2_117e8, %sockaddr* %v1_11824, i32 %v2_11820)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_1185c = load i32, i32* %r5.global-to-local, align 4
  %v6_11860 = call i32 @getsockname(i32 %v0_1185c, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_11868 = call i32 @close(i32 %v0_1185c)
  br label %dec_label_pc_11870

dec_label_pc_11870:                               ; preds = %dec_label_pc_117e0, %dec_label_pc_11834
  %v0_11870 = phi i32 [ 0, %dec_label_pc_117e0 ], [ %v8_11820, %dec_label_pc_11834 ]
  ret i32 %v0_11870

; uselistorder directives
  uselistorder i32 %v2_11820, { 1, 0, 2 }
  uselistorder i32 %v3_11808, { 1, 0 }
  uselistorder i32 (i32)* @close, { 9, 27, 8, 7, 29, 28, 1, 0, 26, 20, 19, 18, 12, 11, 25, 24, 23, 22, 21, 6, 5, 4, 3, 2, 32, 31, 30, 10, 14, 17, 16, 15, 13, 33 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 1, 0, 3, 2, 7, 6, 5, 4, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 2, 19, 3, 4, 6, 5, 12, 11, 0, 10, 9, 1, 8, 13, 7, 15, 14, 18, 17, 16, 20 }
  uselistorder i32* ()* @__errno_location, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_11870, { 1, 0 }
}

define i32 @function_1187c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1187c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11880 = load i8, i8* %tmp, align 1
  %v2_11884 = icmp eq i8 %v3_11880, 0
  br i1 %v2_11884, label %bb, label %dec_label_pc_11898

bb:                                               ; preds = %dec_label_pc_1187c
  %v4_11880 = zext i8 %v3_11880 to i32
  br label %dec_label_pc_118ac

dec_label_pc_11898:                               ; preds = %dec_label_pc_1187c
  br label %dec_label_pc_1189c

dec_label_pc_1189c:                               ; preds = %dec_label_pc_1189c, %dec_label_pc_11898
  %v0_1189c = phi i32 [ %v1_1189c, %dec_label_pc_1189c ], [ 0, %dec_label_pc_11898 ]
  %v1_1189c = add i32 %v0_1189c, 1
  %v2_118a0 = add i32 %v1_1189c, %arg2
  %v3_118a0 = inttoptr i32 %v2_118a0 to i8*
  %v4_118a0 = load i8, i8* %v3_118a0, align 1
  %v2_118a4 = icmp eq i8 %v4_118a0, 0
  br i1 %v2_118a4, label %dec_label_pc_118ac, label %dec_label_pc_1189c

dec_label_pc_118ac:                               ; preds = %dec_label_pc_1189c, %bb
  %v0_118f018 = phi i32 [ %v4_11880, %bb ], [ %v1_1189c, %dec_label_pc_1189c ]
  %v0_118b41 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_118b41, 1
  br i1 %tmp27, label %dec_label_pc_11900, label %dec_label_pc_118c0

dec_label_pc_118c0:                               ; preds = %dec_label_pc_118ac, %dec_label_pc_118b4.backedge
  %v0_118b8.in = phi i32 [ %v0_118b8, %dec_label_pc_118b4.backedge ], [ %v0_118b41, %dec_label_pc_118ac ]
  %v0_118e4 = phi i32 [ %v1_118e4., %dec_label_pc_118b4.backedge ], [ 0, %dec_label_pc_118ac ]
  %v0_118c0 = phi i32 [ %v5_118c0, %dec_label_pc_118b4.backedge ], [ %tmp20, %dec_label_pc_118ac ]
  %v0_118b8 = add i32 %v0_118b8.in, -1
  %v1_118c0 = inttoptr i32 %v0_118c0 to i8*
  %v2_118c0 = load i8, i8* %v1_118c0, align 1
  %v3_118c0 = zext i8 %v2_118c0 to i32
  %v5_118c0 = add i32 %v0_118c0, 1
  %v2_118c4 = add i32 %v0_118e4, %arg2
  %v3_118c4 = inttoptr i32 %v2_118c4 to i8*
  %v4_118c4 = load i8, i8* %v3_118c4, align 1
  %v6_118c4 = zext i8 %v4_118c4 to i32
  %v1_118c8 = add nsw i32 %v3_118c0, -65
  %v1_118cc = add nsw i32 %v6_118c4, -65
  %tmp35 = icmp ult i32 %v1_118c8, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_118c0
  %v5_118d4 = or i32 %v3_118c0, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_118c0, %bb28
  %v0_118e0 = phi i32 [ %v3_118c0, %dec_label_pc_118c0 ], [ %v5_118d4, %bb28 ]
  %tmp36 = icmp ult i32 %v1_118cc, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_118dc = or i32 %v6_118c4, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_118e0 = phi i32 [ %v6_118c4, %bb29 ], [ %v5_118dc, %bb30 ]
  %v9_118e0 = icmp eq i32 %v0_118e0, %v1_118e0
  %v1_118e4 = add i32 %v0_118e4, 1
  %v1_118e4. = select i1 %v9_118e0, i32 %v1_118e4, i32 0
  br i1 %v9_118e0, label %dec_label_pc_118f0, label %dec_label_pc_118b4.backedge

dec_label_pc_118b4.backedge:                      ; preds = %bb31, %dec_label_pc_118f0
  %tmp32 = icmp slt i32 %v0_118b8, 1
  br i1 %tmp32, label %dec_label_pc_11900, label %dec_label_pc_118c0

dec_label_pc_118f0:                               ; preds = %bb31
  %v9_118f0 = icmp eq i32 %v0_118f018, %v1_118e4.
  br i1 %v9_118f0, label %dec_label_pc_118f8, label %dec_label_pc_118b4.backedge

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118f0
  %v2_118f8 = sub i32 %v5_118c0, %tmp20
  ret i32 %v2_118f8

dec_label_pc_11900:                               ; preds = %dec_label_pc_118b4.backedge, %dec_label_pc_118ac
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_118e4., { 1, 0 }
  uselistorder i32 %v0_118c0, { 1, 0 }
  uselistorder i32 %v0_118e4, { 1, 0 }
  uselistorder i8 %v3_11880, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 3, 8, 2, 7, 4, 9, 5, 10, 6, 11, 12 }
  uselistorder i32* @r1, { 3, 14, 0, 15, 32, 33, 5, 4, 46, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 1, 19, 41, 42, 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 47 }
  uselistorder label %dec_label_pc_118b4.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_118c0, { 1, 0 }
}

define i32 @function_11908(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11908:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11908 = load i8, i8* %arg1, align 1
  %v2_1190c = icmp eq i8 %v2_11908, 0
  br i1 %v2_1190c, label %bb, label %dec_label_pc_11918

bb:                                               ; preds = %dec_label_pc_11908
  %v3_11908 = zext i8 %v2_11908 to i32
  br label %dec_label_pc_1192c

dec_label_pc_11918:                               ; preds = %dec_label_pc_11908
  br label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_1191c, %dec_label_pc_11918
  %v0_1191c = phi i32 [ %v1_1191c, %dec_label_pc_1191c ], [ 0, %dec_label_pc_11918 ]
  %v1_1191c = add i32 %v0_1191c, 1
  %v2_11920 = add i32 %v1_1191c, %tmp
  %v3_11920 = inttoptr i32 %v2_11920 to i8*
  %v4_11920 = load i8, i8* %v3_11920, align 1
  %v2_11924 = icmp eq i8 %v4_11920, 0
  br i1 %v2_11924, label %dec_label_pc_1192c, label %dec_label_pc_1191c

dec_label_pc_1192c:                               ; preds = %dec_label_pc_1191c, %bb
  %v0_11950 = phi i32 [ %v3_11908, %bb ], [ %v1_1191c, %dec_label_pc_1191c ]
  %v1_1192c = inttoptr i32 %arg2 to i8*
  %v2_1192c = load i8, i8* %v1_1192c, align 1
  %v2_11930 = icmp eq i8 %v2_1192c, 0
  br i1 %v2_11930, label %bb22, label %dec_label_pc_1193c

bb22:                                             ; preds = %dec_label_pc_1192c
  %v3_1192c = zext i8 %v2_1192c to i32
  br label %dec_label_pc_11950

dec_label_pc_1193c:                               ; preds = %dec_label_pc_1192c
  br label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_11940, %dec_label_pc_1193c
  %v0_11940 = phi i32 [ %v1_11940, %dec_label_pc_11940 ], [ 0, %dec_label_pc_1193c ]
  %v1_11940 = add i32 %v0_11940, 1
  %v2_11944 = add i32 %v1_11940, %arg2
  %v3_11944 = inttoptr i32 %v2_11944 to i8*
  %v4_11944 = load i8, i8* %v3_11944, align 1
  %v2_11948 = icmp eq i8 %v4_11944, 0
  br i1 %v2_11948, label %dec_label_pc_11950, label %dec_label_pc_11940

dec_label_pc_11950:                               ; preds = %dec_label_pc_11940, %bb22
  %v0_1197c4 = phi i32 [ %v3_1192c, %bb22 ], [ %v1_11940, %dec_label_pc_11940 ]
  %v9_11950 = icmp eq i32 %v0_11950, %v0_1197c4
  br i1 %v9_11950, label %dec_label_pc_1197c.preheader, label %dec_label_pc_1195c

dec_label_pc_1197c.preheader:                     ; preds = %dec_label_pc_11950
  %v2_1197c6 = icmp eq i32 %v0_11950, 0
  br i1 %v2_1197c6, label %dec_label_pc_11984, label %dec_label_pc_11964

dec_label_pc_1195c:                               ; preds = %dec_label_pc_11964, %dec_label_pc_11950
  ret i32 0

dec_label_pc_11964:                               ; preds = %dec_label_pc_11974, %dec_label_pc_1197c.preheader
  %v0_1197c.in = phi i32 [ %v0_1197c, %dec_label_pc_11974 ], [ %v0_11950, %dec_label_pc_1197c.preheader ]
  %v0_11978 = phi i32 [ %v1_11978, %dec_label_pc_11974 ], [ %arg2, %dec_label_pc_1197c.preheader ]
  %v0_11974 = phi i32 [ %v1_11974, %dec_label_pc_11974 ], [ %tmp, %dec_label_pc_1197c.preheader ]
  %v0_1197c = add i32 %v0_1197c.in, -1
  %v1_11964 = inttoptr i32 %v0_11974 to i8*
  %v2_11964 = load i8, i8* %v1_11964, align 1
  %v1_11968 = inttoptr i32 %v0_11978 to i8*
  %v2_11968 = load i8, i8* %v1_11968, align 1
  %v9_1196c = icmp eq i8 %v2_11964, %v2_11968
  br i1 %v9_1196c, label %dec_label_pc_11974, label %dec_label_pc_1195c

dec_label_pc_11974:                               ; preds = %dec_label_pc_11964
  %v1_11974 = add i32 %v0_11974, 1
  %v1_11978 = add i32 %v0_11978, 1
  %v2_1197c = icmp eq i32 %v0_1197c, 0
  br i1 %v2_1197c, label %dec_label_pc_11984, label %dec_label_pc_11964

dec_label_pc_11984:                               ; preds = %dec_label_pc_11974, %dec_label_pc_1197c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_1192c, { 1, 0 }
  uselistorder i8 %v2_11908, { 1, 0 }
}

define i32 @function_1198c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1198c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1198c = load i32, i32* @r4, align 4
  store i32 %v3_1198c, i32* %stack_var_-28, align 4
  %v22_1198c = ptrtoint i32* %stack_var_-28 to i32
  %v0_11990 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11990, i32* %r8.global-to-local, align 4
  %v2_11990 = icmp eq i32 %v0_11990, 0
  store i1 %v2_11990, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11990, label %dec_label_pc_11a80, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_1198c
  %v3_119a0 = icmp eq i8 %arg1, 0
  store i1 %v3_119a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_119a0, label %.thread, label %dec_label_pc_119b4

.thread:                                          ; preds = %dec_label_pc_119a0
  %v4_119a8 = inttoptr i32 %v0_11990 to i8*
  store i8 48, i8* %v4_119a8, align 1
  %v0_119ac.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_119ac.pr.pr, label %.thread1, label %dec_label_pc_119b4

.thread1:                                         ; preds = %.thread
  %v4_119ac = load i32, i32* %r8.global-to-local, align 4
  %v5_119ac = add i32 %v4_119ac, 1
  %v6_119ac = inttoptr i32 %v5_119ac to i8*
  store i8 0, i8* %v6_119ac, align 1
  %v0_119b0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_119b0.pr.pr, label %dec_label_pc_11a80, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_119a0, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_119b8 = icmp eq i32 %arg2, 10
  store i1 %v7_119b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119b8, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_119b4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_119b4
  %v4_119b4 = zext i1 %tmp40 to i32
  store i32 %v4_119b4, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_119dc

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_119ec

dec_label_pc_119dc:                               ; preds = %bb
  %v2_119dc = sub nsw i32 0, %tmp
  store i1 %v3_119a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_119a0, label %dec_label_pc_11a8c, label %dec_label_pc_119ec

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119dc, %.thread4
  %v0_119f410 = phi i32 [ %tmp, %.thread4 ], [ %v2_119dc, %dec_label_pc_119dc ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_119dc ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_119f0 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_119f0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_119f4

dec_label_pc_119f4:                               ; preds = %bb38, %dec_label_pc_119ec
  %v2_11a14 = phi i32 [ %v5_11a14, %bb38 ], [ %v2_119f0, %dec_label_pc_119ec ]
  %v0_11a10 = phi i32 [ %v2_11a18, %bb38 ], [ %v0_119f410, %dec_label_pc_119ec ]
  %v0_119f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_119fc = urem i32 %v0_11a10, %v0_119f8
  store i32 %v2_119fc, i32* %r0.global-to-local, align 4
  %v7_11a00 = icmp eq i32 %v2_119fc, 9
  store i1 %v7_11a00, i1* %cpsr_z.global-to-local, align 1
  %v1_11a04 = add i32 %v2_119fc, 48
  store i32 %v0_119f8, i32* %r1.global-to-local, align 4
  %v7_11a0c = icmp sgt i32 %v2_119fc, 9
  %extract.t = trunc i32 %v1_11a04 to i8
  br i1 %v7_11a0c, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_119f4
  %v9_11a0c = add i32 %v2_119fc, 55
  %extract.t21 = trunc i32 %v9_11a0c to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_119f4, %bb37
  %v0_11a14.off0 = phi i8 [ %extract.t, %dec_label_pc_119f4 ], [ %extract.t21, %bb37 ]
  store i32 %v0_11a10, i32* %r0.global-to-local, align 4
  %v3_11a14 = inttoptr i32 %v2_11a14 to i8*
  store i8 %v0_11a14.off0, i8* %v3_11a14, align 1
  %v4_11a14 = load i32, i32* %r7.global-to-local, align 4
  %v5_11a14 = add i32 %v4_11a14, -1
  store i32 %v5_11a14, i32* %r7.global-to-local, align 4
  %v0_11a18 = load i32, i32* %r0.global-to-local, align 4
  %v1_11a18 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a18 = udiv i32 %v0_11a18, %v1_11a18
  store i32 %v2_11a18, i32* %r0.global-to-local, align 4
  %v2_11a1c = icmp ugt i32 %v1_11a18, %v0_11a18
  store i1 %v2_11a1c, i1* %cpsr_z.global-to-local, align 1
  %v0_11a20 = load i32, i32* %r6.global-to-local, align 4
  %v1_11a20 = add i32 %v0_11a20, -1
  store i32 %v1_11a20, i32* %r6.global-to-local, align 4
  br i1 %v2_11a1c, label %dec_label_pc_11a28, label %dec_label_pc_119f4

dec_label_pc_11a28:                               ; preds = %bb38
  %v0_11a28 = load i32, i32* %sl.global-to-local, align 4
  %v2_11a28 = icmp eq i32 %v0_11a28, 0
  store i1 %v2_11a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a28, label %bb39, label %dec_label_pc_11a90

bb39:                                             ; preds = %dec_label_pc_11a28
  store i32 %v0_11a20, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %bb39, %dec_label_pc_11a90
  %v1_11a40 = phi i32 [ %v0_11a20, %bb39 ], [ %v1_11a38.pre, %dec_label_pc_11a90 ]
  %v2_11a34 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11a38 = add i32 %v1_11a40, %v2_11a34
  %v3_11a38 = inttoptr i32 %v2_11a38 to i8*
  %v4_11a38 = load i8, i8* %v3_11a38, align 1
  %v6_11a38 = zext i8 %v4_11a38 to i32
  store i32 %v6_11a38, i32* %r2.global-to-local, align 4
  %v2_11a3c = icmp eq i8 %v4_11a38, 0
  store i1 %v2_11a3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11a38, i32* %r1.global-to-local, align 4
  br i1 %v2_11a3c, label %dec_label_pc_11a64, label %dec_label_pc_11a48

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a34
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a4c, %dec_label_pc_11a48
  %v0_11a4c = phi i32 [ %v1_11a4c, %dec_label_pc_11a4c ], [ 0, %dec_label_pc_11a48 ]
  %v1_11a4c = add i32 %v0_11a4c, 1
  store i32 %v1_11a4c, i32* %r2.global-to-local, align 4
  %v2_11a50 = add i32 %v1_11a4c, %v2_11a38
  %v3_11a50 = inttoptr i32 %v2_11a50 to i8*
  %v4_11a50 = load i8, i8* %v3_11a50, align 1
  %v2_11a54 = icmp eq i8 %v4_11a50, 0
  store i1 %v2_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a54, label %dec_label_pc_11a5c, label %dec_label_pc_11a4c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a4c
  %v7_11a5c = icmp eq i32 %v0_11a4c, -2
  store i1 %v7_11a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a5c, label %dec_label_pc_11a80, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a5c, %dec_label_pc_11a34
  %v0_11a6c18 = phi i32 [ %v1_11a4c, %dec_label_pc_11a5c ], [ %v6_11a38, %dec_label_pc_11a34 ]
  store i32 %v2_11a38, i32* %r0.global-to-local, align 4
  %v0_11a68 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a68, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge, %dec_label_pc_11a64
  %v2_11a78 = phi i32 [ %v5_11a78, %dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge ], [ %v0_11a68, %dec_label_pc_11a64 ]
  %v0_11a70 = phi i32 [ %v0_11a70.pre, %dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge ], [ %v2_11a38, %dec_label_pc_11a64 ]
  %v0_11a6c = phi i32 [ %v0_11a6c.pre, %dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge ], [ %v0_11a6c18, %dec_label_pc_11a64 ]
  %v1_11a6c = add i32 %v0_11a6c, -1
  store i32 %v1_11a6c, i32* %r2.global-to-local, align 4
  %v1_11a70 = inttoptr i32 %v0_11a70 to i8*
  %v2_11a70 = load i8, i8* %v1_11a70, align 1
  %v5_11a70 = add i32 %v0_11a70, 1
  store i32 %v5_11a70, i32* %r0.global-to-local, align 4
  %v3_11a74 = icmp eq i32 %v0_11a6c, 0
  store i1 %v3_11a74, i1* %cpsr_z.global-to-local, align 1
  %v3_11a78 = inttoptr i32 %v2_11a78 to i8*
  store i8 %v2_11a70, i8* %v3_11a78, align 1
  %v4_11a78 = load i32, i32* %r1.global-to-local, align 4
  %v5_11a78 = add i32 %v4_11a78, 1
  store i32 %v5_11a78, i32* %r1.global-to-local, align 4
  br i1 %v3_11a74, label %dec_label_pc_11a80, label %dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge

dec_label_pc_11a6c.dec_label_pc_11a6c_crit_edge:  ; preds = %dec_label_pc_11a6c
  %v0_11a6c.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11a70.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a6c

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a6c, %dec_label_pc_11a5c, %.thread1, %dec_label_pc_1198c
  %v0_11a80 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a80, i32* %r0.global-to-local, align 4
  %v2_11a88 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11a88, i32* @r4, align 4
  ret i32 %v0_11a80

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_119dc
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a28, %dec_label_pc_11a8c
  %v1_11a94 = phi i32 [ %v1_11a20, %dec_label_pc_11a28 ], [ 32, %dec_label_pc_11a8c ]
  %v2_11a94 = add i32 %v1_11a94, %v22_1198c
  store i32 %v2_11a94, i32* %r2.global-to-local, align 4
  %v3_11a9c = add i32 %v2_11a94, -34
  %v4_11a9c = inttoptr i32 %v3_11a9c to i8*
  store i8 45, i8* %v4_11a9c, align 1
  %v1_11a38.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a34

; uselistorder directives
  uselistorder i32 %v5_11a78, { 1, 0 }
  uselistorder i1 %v3_11a74, { 1, 0 }
  uselistorder i32 %v0_11a70, { 1, 0 }
  uselistorder i1 %v7_11a5c, { 1, 0 }
  uselistorder i32 %v1_11a4c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11a38, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11a18, { 1, 0 }
  uselistorder i32 %v5_11a14, { 1, 0 }
  uselistorder i32 %v2_119fc, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_119a0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11990, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 2, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 1, 0, 2 }
  uselistorder i32 9, { 4, 40, 7, 5, 30, 11, 26, 12, 27, 13, 28, 9, 29, 10, 25, 22, 8, 3, 31, 23, 2, 24, 32, 14, 33, 15, 34, 16, 35, 36, 17, 37, 18, 38, 19, 39, 0, 20, 1, 53, 41, 42, 43, 44, 45, 46, 6, 47, 48, 49, 50, 51, 52, 54, 55, 56, 21 }
  uselistorder i32 32, { 28, 32, 33, 5, 4, 7, 6, 9, 8, 11, 10, 29, 13, 12, 14, 16, 15, 17, 18, 20, 19, 30, 31, 21, 0, 22, 1, 2, 3, 34, 35, 23, 36, 24, 25, 26, 27 }
  uselistorder i32 10, { 35, 0, 19, 6, 22, 24, 7, 23, 8, 25, 9, 26, 3, 27, 28, 20, 10, 29, 21, 30, 11, 31, 32, 12, 2, 13, 14, 33, 15, 34, 4, 36, 37, 38, 39, 40, 41, 16, 42, 43, 44, 17, 45, 47, 48, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 5, 63, 46, 18 }
  uselistorder i8 0, { 17, 18, 0, 4, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 7, 30, 1, 6, 5, 8, 31, 32, 33, 34, 35, 14, 36, 39, 15, 37, 38, 13, 40, 41, 42, 43, 44, 9, 10, 3, 11, 16, 12, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a90, { 1, 0 }
  uselistorder label %dec_label_pc_11a34, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_119b4, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11aa4 = add i32 %arg2, -1
  %v7_11aa4 = icmp eq i32 %arg2, 1
  br i1 %v7_11aa4, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_11aa8 = load i32, i32* @r0, align 4
  ret i32 %v2_11aa8

bb80:                                             ; preds = %entry
  %v2_11aa4 = icmp eq i32 %arg2, 0
  br i1 %v2_11aa4, label %dec_label_pc_11b8c, label %dec_label_pc_11ab0

dec_label_pc_11ab0:                               ; preds = %bb80
  %v0_11ab0 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11ab0, %arg2
  br i1 %tmp, label %dec_label_pc_11ab8, label %dec_label_pc_11b44

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11ab0
  %v2_11ab8 = and i32 %v1_11aa4, %arg2
  %v4_11ab8 = icmp eq i32 %v2_11ab8, 0
  br i1 %v4_11ab8, label %dec_label_pc_11b50, label %dec_label_pc_11ac0

dec_label_pc_11ac0:                               ; preds = %dec_label_pc_11ab8
  %v3_11ac0 = icmp ult i32 %arg2, 536870912
  br i1 %v3_11ac0, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11ac0
  %v4_11ac4 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11ac0, %.thread
  %v0_11ae4.pr36.ph = phi i32 [ %v4_11ac4, %.thread ], [ %arg2, %dec_label_pc_11ac0 ]
  %storemerge115 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11ac0 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_11ae4.pr36 = phi i32 [ %v4_11ad8, %bb83 ], [ %v0_11ae4.pr36.ph, %.preheader.preheader ]
  %v1_11adc = phi i32 [ %v4_11adc, %bb83 ], [ %storemerge115, %.preheader.preheader ]
  %v2_11ad0 = icmp ugt i32 %v0_11ae4.pr36, 268435455
  br i1 %v2_11ad0, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11ae4thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_11ad4 = icmp ult i32 %v0_11ae4.pr36, %v0_11ab0
  br i1 %v4_11ad4, label %bb82, label %dec_label_pc_11ae4thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_11ad8 = and i32 %v0_11ae4.pr36, 268435456
  %v3_11ad8 = icmp eq i32 %v2_11ad8, 0
  %v4_11ad8 = mul i32 %v0_11ae4.pr36, 16
  br i1 %v3_11ad8, label %bb83, label %dec_label_pc_11ae4.loopexit

bb83:                                             ; preds = %bb82
  %v2_11adc = and i32 %v1_11adc, 268435456
  %v3_11adc = icmp eq i32 %v2_11adc, 0
  %v4_11adc = mul i32 %v1_11adc, 16
  br i1 %v3_11adc, label %.preheader, label %dec_label_pc_11ae4thread-pre-split.loopexit.loopexit

dec_label_pc_11ae4thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_11af048.ph = phi i32 [ %v1_11adc, %bb81 ], [ %v4_11adc, %bb83 ]
  %v0_11ae4.pr38.ph = phi i32 [ %v0_11ae4.pr36, %bb81 ], [ %v4_11ad8, %bb83 ]
  br label %dec_label_pc_11ae4thread-pre-split.loopexit

dec_label_pc_11ae4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11ae4thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11af048 = phi i32 [ %v1_11adc, %.thread2 ], [ %v1_11af048.ph, %dec_label_pc_11ae4thread-pre-split.loopexit.loopexit ]
  %v0_11ae4.pr38 = phi i32 [ %v0_11ae4.pr36, %.thread2 ], [ %v0_11ae4.pr38.ph, %dec_label_pc_11ae4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11ae4thread-pre-split

dec_label_pc_11ae4thread-pre-split:               ; preds = %dec_label_pc_11ae4thread-pre-split.loopexit, %bb85
  %v1_11af046 = phi i32 [ %v1_11af048, %dec_label_pc_11ae4thread-pre-split.loopexit ], [ %v3_11af0, %bb85 ]
  %v0_11ae4.pr = phi i32 [ %v0_11ae4.pr38, %dec_label_pc_11ae4thread-pre-split.loopexit ], [ %v3_11aec, %bb85 ]
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ae4.loopexit, %dec_label_pc_11ae4thread-pre-split
  %v1_11af0 = phi i32 [ %v1_11af046, %dec_label_pc_11ae4thread-pre-split ], [ %v1_11adc, %dec_label_pc_11ae4.loopexit ]
  %v1_11aec = phi i32 [ %v0_11ae4.pr, %dec_label_pc_11ae4thread-pre-split ], [ %v4_11ad8, %dec_label_pc_11ae4.loopexit ]
  %v2_11ae4 = icmp slt i32 %v1_11aec, 0
  br i1 %v2_11ae4, label %dec_label_pc_11af8, label %bb84

bb84:                                             ; preds = %dec_label_pc_11ae4
  %v4_11ae8 = icmp ult i32 %v1_11aec, %v0_11ab0
  br i1 %v4_11ae8, label %bb85, label %dec_label_pc_11af8

bb85:                                             ; preds = %bb84
  %v3_11aec = mul i32 %v1_11aec, 2
  %v2_11af0 = icmp slt i32 %v1_11af0, 0
  %v3_11af0 = mul i32 %v1_11af0, 2
  br i1 %v2_11af0, label %dec_label_pc_11af8, label %dec_label_pc_11ae4thread-pre-split

dec_label_pc_11af8:                               ; preds = %bb84, %dec_label_pc_11ae4, %bb85
  %v2_11b0459 = phi i32 [ %v3_11af0, %bb85 ], [ %v1_11af0, %bb84 ], [ %v1_11af0, %dec_label_pc_11ae4 ]
  %v1_11afc51 = phi i32 [ %v3_11aec, %bb85 ], [ %v1_11aec, %bb84 ], [ %v1_11aec, %dec_label_pc_11ae4 ]
  br label %dec_label_pc_11afc

dec_label_pc_11afc:                               ; preds = %.thread11, %dec_label_pc_11af8
  %v1_11b30 = phi i32 [ %v4_11b30, %.thread11 ], [ %v2_11b0459, %dec_label_pc_11af8 ]
  %v1_11b04 = phi i32 [ %v0_11b3c, %.thread11 ], [ 0, %dec_label_pc_11af8 ]
  %v1_11b34 = phi i32 [ %v4_11b34, %.thread11 ], [ %v1_11afc51, %dec_label_pc_11af8 ]
  %v1_11b00 = phi i32 [ %v0_11b2c, %.thread11 ], [ %v0_11ab0, %dec_label_pc_11af8 ]
  %v3_11afc = icmp ult i32 %v1_11b00, %v1_11b34
  br i1 %v3_11afc, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_11afc
  %v3_11b00 = sub i32 %v1_11b00, %v1_11b34
  %v3_11b04 = or i32 %v1_11b04, %v1_11b30
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11afc, %bb86
  %v1_11b0c = phi i32 [ %v1_11b00, %dec_label_pc_11afc ], [ %v3_11b00, %bb86 ]
  %v1_11b10 = phi i32 [ %v1_11b04, %dec_label_pc_11afc ], [ %v3_11b04, %bb86 ]
  %v4_11b08 = udiv i32 %v1_11b34, 2
  %v6_11b08 = icmp ult i32 %v1_11b0c, %v4_11b08
  br i1 %v6_11b08, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_11b0c = urem i32 %v1_11b34, 2
  %v4_11b0c = icmp eq i32 %v3_11b0c, 0
  %v6_11b0c = sub i32 %v1_11b0c, %v4_11b08
  br i1 %v4_11b0c, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11b10 = udiv i32 %v1_11b30, 2
  %v6_11b10 = or i32 %v1_11b10, %v5_11b10
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_11b18 = phi i32 [ %v6_11b0c, %bb87 ], [ %v1_11b0c, %.thread7 ], [ %v6_11b0c, %bb88 ]
  %v1_11b1c = phi i32 [ %v1_11b10, %bb87 ], [ %v1_11b10, %.thread7 ], [ %v6_11b10, %bb88 ]
  %v4_11b14 = udiv i32 %v1_11b34, 4
  %v6_11b14 = icmp ult i32 %v1_11b18, %v4_11b14
  br i1 %v6_11b14, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_11b18 = and i32 %v1_11b34, 2
  %v4_11b18 = icmp eq i32 %v3_11b18, 0
  %v6_11b18 = sub i32 %v1_11b18, %v4_11b14
  br i1 %v4_11b18, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11b1c = udiv i32 %v1_11b30, 4
  %v6_11b1c = or i32 %v1_11b1c, %v5_11b1c
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_11b24 = phi i32 [ %v6_11b18, %bb89 ], [ %v1_11b18, %.thread8 ], [ %v6_11b18, %bb90 ]
  %v1_11b28 = phi i32 [ %v1_11b1c, %bb89 ], [ %v1_11b1c, %.thread8 ], [ %v6_11b1c, %bb90 ]
  %v4_11b20 = udiv i32 %v1_11b34, 8
  %v6_11b20 = icmp ult i32 %v1_11b24, %v4_11b20
  br i1 %v6_11b20, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_11b24 = and i32 %v1_11b34, 4
  %v4_11b24 = icmp eq i32 %v3_11b24, 0
  %v6_11b24 = sub i32 %v1_11b24, %v4_11b20
  br i1 %v4_11b24, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11b28 = udiv i32 %v1_11b30, 8
  %v6_11b28 = or i32 %v1_11b28, %v5_11b28
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_11b3c = phi i32 [ %v1_11b28, %bb91 ], [ %v1_11b28, %.thread9 ], [ %v6_11b28, %bb92 ]
  %v0_11b2c = phi i32 [ %v6_11b24, %bb91 ], [ %v1_11b24, %.thread9 ], [ %v6_11b24, %bb92 ]
  %v2_11b2c = icmp eq i32 %v0_11b2c, 0
  br i1 %v2_11b2c, label %dec_label_pc_11b3c, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp120 = icmp ult i32 %v1_11b30, 16
  br i1 %tmp120, label %dec_label_pc_11b3c, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_11b30 = udiv i32 %v1_11b30, 16
  %v4_11b34 = udiv i32 %v1_11b34, 16
  br label %dec_label_pc_11afc

dec_label_pc_11b3c:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_11b3c

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11ab0
  %v9_11ab0 = icmp eq i32 %v0_11ab0, %arg2
  %. = zext i1 %v9_11ab0 to i32
  ret i32 %.

dec_label_pc_11b50:                               ; preds = %dec_label_pc_11ab8
  %v2_11b50 = icmp ugt i32 %arg2, 65535
  br i1 %v2_11b50, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_11b50
  %v2_11b54 = and i32 %arg2, 32768
  %v3_11b54 = icmp eq i32 %v2_11b54, 0
  %v4_11b54 = udiv i32 %arg2, 65536
  br i1 %v3_11b54, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_11b50
  %v0_11b6065 = phi i32 [ %arg2, %dec_label_pc_11b50 ], [ %v4_11b54, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_11b64 = phi i32 [ %v0_11b6065, %.thread16 ], [ %v4_11b54, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_11b60 = icmp ugt i32 %v1_11b64, 255
  br i1 %v2_11b60, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_11b64 = and i32 %v1_11b64, 128
  %v3_11b64 = icmp eq i32 %v2_11b64, 0
  %v4_11b64 = udiv i32 %v1_11b64, 256
  br i1 %v3_11b64, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11b68 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_11b74 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_11b68, %bb100 ]
  %v1_11b70 = phi i32 [ %v1_11b64, %bb98 ], [ %v4_11b64, %bb99 ], [ %v4_11b64, %bb100 ]
  %v2_11b6c = icmp ugt i32 %v1_11b70, 15
  br i1 %v2_11b6c, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_11b70 = and i32 %v1_11b70, 8
  %v3_11b70 = icmp eq i32 %v2_11b70, 0
  %v4_11b70 = udiv i32 %v1_11b70, 16
  br i1 %v3_11b70, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11b74 = add nsw i32 %v1_11b74, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_11b7c = phi i32 [ %v1_11b74, %.thread17 ], [ %v1_11b74, %bb101 ], [ %v2_11b74, %bb102 ]
  %v5_11b80 = phi i32 [ %v1_11b70, %.thread17 ], [ %v4_11b70, %bb101 ], [ %v4_11b70, %bb102 ]
  %v2_11b78 = icmp ugt i32 %v5_11b80, 3
  %v7_11b78 = icmp eq i32 %v5_11b80, 4
  %v2_11b7c = xor i1 %v7_11b78, true
  %v3_11b7c = and i1 %v2_11b78, %v2_11b7c
  br i1 %v3_11b7c, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_11b7c = add nsw i32 %v4_11b7c, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_11b80 = phi i32 [ %v4_11b7c, %.thread18 ], [ %v5_11b7c, %bb103 ]
  %v2_11b80 = xor i1 %v2_11b78, true
  %v3_11b80 = or i1 %v7_11b78, %v2_11b80
  br i1 %v3_11b80, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_11b80 = udiv i32 %v5_11b80, 2
  %v9_11b80 = add i32 %v4_11b80, %v8_11b80
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_11b84 = phi i32 [ %v4_11b80, %bb104 ], [ %v9_11b80, %bb105 ]
  %v6_11b84 = lshr i32 %v0_11ab0, %v1_11b84
  ret i32 %v6_11b84

dec_label_pc_11b8c:                               ; preds = %bb80
  %v0_11b8c = load i32, i32* @lr, align 4
  %v0_11b90 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11b8c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11b80, { 1, 0 }
  uselistorder i1 %v7_11b78, { 1, 0 }
  uselistorder i32 %v4_11b70, { 1, 0 }
  uselistorder i32 %v1_11b70, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b64, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11b64, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b54, { 1, 0 }
  uselistorder i32 %v0_11b2c, { 1, 0 }
  uselistorder i32 %v4_11b20, { 1, 0 }
  uselistorder i32 %v1_11b28, { 1, 2, 0 }
  uselistorder i32 %v4_11b14, { 1, 0 }
  uselistorder i32 %v1_11b1c, { 1, 2, 0 }
  uselistorder i32 %v4_11b08, { 1, 0 }
  uselistorder i32 %v1_11b10, { 1, 2, 0 }
  uselistorder i32 %v1_11b34, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11b04, { 1, 0 }
  uselistorder i32 %v1_11b30, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11af0, { 1, 0 }
  uselistorder i32 %v3_11aec, { 1, 0 }
  uselistorder i32 %v1_11aec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11af0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11adc, { 1, 0 }
  uselistorder i32 %v4_11ad8, { 2, 1, 0 }
  uselistorder i32 %v1_11adc, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11ae4.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11ab0, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 40, 2, 3, 4, 5, 6, 48, 91, 90, 32, 41, 10, 11, 12, 68, 59, 69, 70, 71, 42, 13, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 14, 15, 33, 34, 88, 89, 58, 39, 49, 92, 8, 9, 57, 7, 93, 17, 16, 50, 53, 51, 54, 46, 52, 47, 56, 94, 18, 95, 96, 19, 35, 36, 97, 60, 61, 37, 98, 38, 99, 20, 21, 100, 62, 63, 22, 23, 101, 64, 65, 24, 25, 102, 66, 67, 26, 27, 45, 103, 104, 55, 105, 43, 28, 44, 29, 30, 31 }
  uselistorder i32 15, { 13, 14, 2, 15, 3, 16, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 12, 19, 20, 21, 22, 0, 23, 24, 25, 26, 1, 27 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 418, 419, 19, 20, 21, 22, 23, 24, 25, 421, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 43, 42, 41, 44, 417, 422, 49, 45, 48, 46, 47, 420, 51, 50, 52, 53, 54, 57, 56, 55, 58, 60, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 76, 85, 81, 86, 82, 78, 79, 83, 80, 87, 88, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 104, 103, 111, 106, 117, 118, 112, 107, 119, 120, 113, 108, 121, 114, 115, 122, 116, 123, 109, 124, 110, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 136, 132, 139, 137, 133, 142, 141, 140, 145, 146, 143, 147, 144, 148, 153, 151, 154, 152, 149, 150, 155, 415, 423, 156, 157, 158, 159, 163, 160, 161, 162, 165, 166, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 186, 184, 180, 187, 185, 181, 190, 189, 188, 193, 194, 191, 195, 192, 196, 201, 199, 202, 200, 197, 198, 203, 416, 424, 204, 205, 206, 207, 211, 208, 209, 210, 213, 214, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 231, 233, 234, 235, 239, 245, 240, 236, 241, 246, 242, 247, 243, 237, 248, 238, 249, 250, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 261, 264, 267, 268, 266, 265, 269, 272, 271, 270, 279, 276, 280, 277, 273, 281, 278, 274, 275, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 292, 294, 295, 297, 296, 298, 299, 300, 301, 304, 311, 305, 306, 302, 307, 308, 309, 303, 312, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 325, 327, 328, 329, 333, 340, 334, 335, 341, 336, 330, 331, 337, 332, 338, 342, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 360, 362, 363, 364, 375, 370, 365, 376, 371, 372, 377, 373, 366, 367, 368, 378, 379, 380, 381, 374, 369, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 393, 395, 396, 397, 398, 399, 400, 401, 403, 402, 404, 405, 406, 407, 408, 409, 411, 410, 412, 413, 414 }
  uselistorder i32 128, { 5, 6, 7, 12, 0, 13, 8, 9, 10, 11, 14, 1, 15, 2, 3, 16, 17, 18, 4 }
  uselistorder i32 255, { 5, 6, 2, 7, 3, 8, 4, 9, 0, 1 }
  uselistorder i32 65536, { 9, 10, 11, 12, 13, 14, 1, 16, 15, 17, 2, 18, 0, 3, 19, 20, 21, 22, 23, 26, 24, 25, 27, 28, 4, 32, 33, 29, 30, 34, 31, 35, 36, 37, 38, 39, 106, 41, 40, 107, 42, 43, 45, 44, 47, 46, 108, 49, 48, 109, 50, 51, 53, 52, 55, 54, 56, 57, 62, 63, 64, 65, 58, 59, 60, 61, 66, 69, 70, 71, 67, 68, 72, 5, 73, 76, 77, 78, 74, 75, 79, 6, 80, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 92, 94, 93, 95, 7, 96, 98, 99, 97, 100, 8, 101, 103, 104, 102, 105 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 100, 0, 1, 53, 12, 54, 24, 28, 55, 25, 56, 26, 57, 27, 58, 59, 13, 60, 2, 61, 62, 32, 63, 31, 64, 29, 65, 30, 66, 14, 15, 3, 67, 33, 68, 34, 69, 16, 17, 4, 70, 35, 71, 36, 72, 18, 73, 39, 74, 38, 75, 37, 76, 19, 20, 5, 41, 77, 40, 78, 79, 80, 21, 81, 82, 6, 44, 83, 42, 84, 43, 85, 86, 22, 87, 7, 8, 47, 88, 45, 89, 46, 90, 91, 23, 92, 9, 48, 93, 49, 94, 50, 95, 96, 10, 51, 97, 98, 11, 52, 99 }
  uselistorder i32 %arg2, { 7, 12, 6, 5, 4, 10, 11, 8, 9, 0, 3, 1, 2 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_11b3c, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11af8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ae4thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_11ba0 = udiv i32 %arg1, %arg2
  ret i32 %v2_11ba0
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11bb4 = add i32 %arg2, -1
  %v2_11bb4 = icmp eq i32 %arg2, 0
  br i1 %v2_11bb4, label %dec_label_pc_11c70, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %entry
  %v7_11bb4 = icmp eq i32 %arg2, 1
  br i1 %v7_11bb4, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11bbc
  %v1_11bbc = load i32, i32* @r0, align 4
  %v10_11bbc = icmp eq i32 %v1_11bbc, %arg2
  br i1 %v10_11bbc, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11bbc, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11bbc = icmp ult i32 %v1_11bbc, %arg2
  br i1 %v4_11bbc, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11bc4 = and i32 %v1_11bb4, %arg2
  %v8_11bc4 = icmp eq i32 %v6_11bc4, 0
  br i1 %v8_11bc4, label %.thread67, label %dec_label_pc_11bd4.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11bc8 = phi i32 [ %v1_11bbc, %bb75 ], [ 0, %.thread65 ]
  %v3_11bc8 = and i32 %v1_11bc8, %v1_11bb4
  br label %bb76

dec_label_pc_11bd4.preheader:                     ; preds = %bb75
  %v2_11bd497 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11bd497, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11c64, %bb74, %bb89, %bb84, %dec_label_pc_11c34, %.thread67
  %v5_11bcc = phi i32 [ %v1_11bbc, %bb74 ], [ %v3_11bc8, %.thread67 ], [ %v1_11c10.v6_11c10.v6_11c18.v6_11c20, %dec_label_pc_11c34 ], [ 0, %bb84 ], [ %v1_11c68, %dec_label_pc_11c64 ], [ %v2_11c64, %bb89 ]
  ret i32 %v5_11bcc

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11bd4.preheader
  %v0_11be8.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11bd4.preheader ], [ %v4_11bdc, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11bd4.preheader ], [ %v2_11be011, %.thread1.thread9 ]
  br label %dec_label_pc_11be8thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11bd4.preheader, %.thread1.thread9
  %storemerge99 = phi i32 [ %v2_11be011, %.thread1.thread9 ], [ 0, %dec_label_pc_11bd4.preheader ]
  %v0_11be8.pr3398 = phi i32 [ %v4_11bdc, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11bd4.preheader ]
  %v4_11bd8 = icmp ult i32 %v0_11be8.pr3398, %v1_11bbc
  br i1 %v4_11bd8, label %bb78, label %dec_label_pc_11be8thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11bdc = and i32 %v0_11be8.pr3398, 268435456
  %v3_11bdc = icmp eq i32 %v2_11bdc, 0
  %v4_11bdc = mul i32 %v0_11be8.pr3398, 16
  br i1 %v3_11bdc, label %.thread1.thread9, label %dec_label_pc_11be8.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11be011 = add i32 %storemerge99, 4
  %v2_11bd4 = icmp ugt i32 %v4_11bdc, 268435455
  br i1 %v2_11bd4, label %.thread, label %bb77

dec_label_pc_11be8thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11be8thread-pre-split.loopexit

dec_label_pc_11be8thread-pre-split.loopexit:      ; preds = %dec_label_pc_11be8thread-pre-split.loopexit.loopexit, %.thread
  %v0_11be8.pr3396 = phi i32 [ %v0_11be8.pr33.lcssa, %.thread ], [ %v0_11be8.pr3398, %dec_label_pc_11be8thread-pre-split.loopexit.loopexit ]
  %storemerge93 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge99, %dec_label_pc_11be8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11be8thread-pre-split

dec_label_pc_11be8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11be8thread-pre-split.loopexit
  %v1_11bf439 = phi i32 [ %storemerge93, %dec_label_pc_11be8thread-pre-split.loopexit ], [ %v2_11bf4, %.thread4 ]
  %v0_11be8.pr = phi i32 [ %v0_11be8.pr3396, %dec_label_pc_11be8thread-pre-split.loopexit ], [ %v3_11bf0, %.thread4 ]
  br label %dec_label_pc_11be8

dec_label_pc_11be8.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11be8.loopexit, %dec_label_pc_11be8thread-pre-split
  %v0_11bfc.pr = phi i32 [ %v1_11bf439, %dec_label_pc_11be8thread-pre-split ], [ %storemerge99, %dec_label_pc_11be8.loopexit ]
  %v1_11bf0 = phi i32 [ %v0_11be8.pr, %dec_label_pc_11be8thread-pre-split ], [ %v4_11bdc, %dec_label_pc_11be8.loopexit ]
  %v2_11be8 = icmp slt i32 %v1_11bf0, 0
  br i1 %v2_11be8, label %dec_label_pc_11bfc, label %bb79

bb79:                                             ; preds = %dec_label_pc_11be8
  %v4_11bec = icmp ult i32 %v1_11bf0, %v1_11bbc
  br i1 %v4_11bec, label %.thread4, label %dec_label_pc_11bfc

.thread4:                                         ; preds = %bb79
  %v3_11bf0 = mul i32 %v1_11bf0, 2
  %v2_11bf4 = add i32 %v0_11bfc.pr, 1
  br label %dec_label_pc_11be8thread-pre-split

dec_label_pc_11bfc:                               ; preds = %bb79, %dec_label_pc_11be8
  %v2_11bfc = add i32 %v0_11bfc.pr, -3
  %v5_11c00 = icmp slt i32 %v0_11bfc.pr, 3
  br i1 %v5_11c00, label %dec_label_pc_11c40, label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bfc, %bb83
  %v6_11c2c = phi i32 [ %v0_11c34, %bb83 ], [ %v2_11bfc, %dec_label_pc_11bfc ]
  %v1_11c08 = phi i32 [ %v1_11c10.v6_11c10.v6_11c18.v6_11c20, %bb83 ], [ %v1_11bbc, %dec_label_pc_11bfc ]
  %v3_11c2812 = phi i32 [ %v3_11c28, %bb83 ], [ %v1_11bf0, %dec_label_pc_11bfc ]
  %v3_11c04 = icmp ult i32 %v1_11c08, %v3_11c2812
  %v3_11c08 = select i1 %v3_11c04, i32 0, i32 %v3_11c2812
  %v1_11c10 = sub i32 %v1_11c08, %v3_11c08
  %v4_11c0c = udiv i32 %v3_11c2812, 2
  %v6_11c0c = icmp ult i32 %v1_11c10, %v4_11c0c
  %v6_11c10 = select i1 %v6_11c0c, i32 0, i32 %v4_11c0c
  %v1_11c10.v6_11c10 = sub i32 %v1_11c10, %v6_11c10
  %.demorgan = and i1 %v3_11c04, %v6_11c0c
  %v4_11c14 = udiv i32 %v3_11c2812, 4
  %v6_11c14 = icmp ult i32 %v1_11c10.v6_11c10, %v4_11c14
  %v6_11c18 = select i1 %v6_11c14, i32 0, i32 %v4_11c14
  %v1_11c10.v6_11c10.v6_11c18 = sub i32 %v1_11c10.v6_11c10, %v6_11c18
  %.demorgan71 = and i1 %.demorgan, %v6_11c14
  %v4_11c1c = udiv i32 %v3_11c2812, 8
  %v6_11c1c = icmp ult i32 %v1_11c10.v6_11c10.v6_11c18, %v4_11c1c
  %v6_11c20 = select i1 %v6_11c1c, i32 0, i32 %v4_11c1c
  %v1_11c10.v6_11c10.v6_11c18.v6_11c20 = sub i32 %v1_11c10.v6_11c10.v6_11c18, %v6_11c20
  %.demorgan72 = and i1 %.demorgan71, %v6_11c1c
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11c04
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11c04, %bb80
  %v2_11c24 = add i32 %v1_11c10.v6_11c10.v6_11c18.v6_11c20, -1
  %v4_11c24 = sub i32 0, %v1_11c10.v6_11c10.v6_11c18.v6_11c20
  %v5_11c24 = and i32 %v1_11c10.v6_11c10.v6_11c18.v6_11c20, %v4_11c24
  %v3_11c28 = udiv i32 %v3_11c2812, 16
  %v5_11c2c = icmp slt i32 %v1_11c10.v6_11c10.v6_11c18.v6_11c20, 1
  br i1 %v5_11c2c, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11c2c = add i32 %v6_11c2c, -4
  %v9_11c2c = sub i32 3, %v6_11c2c
  %v10_11c2c = and i32 %v9_11c2c, %v6_11c2c
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11c34 = phi i32 [ %v6_11c2c, %bb81 ], [ %v7_11c2c, %bb82 ]
  %v0_11c3015.in = phi i32 [ %v2_11c24, %bb81 ], [ %v7_11c2c, %bb82 ]
  %v1_11c3014.in = phi i32 [ %v5_11c24, %bb81 ], [ %v10_11c2c, %bb82 ]
  %v1_11c3014 = icmp slt i32 %v1_11c3014.in, 0
  %v0_11c3015 = icmp slt i32 %v0_11c3015.in, 0
  %v2_11c30 = xor i1 %v0_11c3015, %v1_11c3014
  br i1 %v2_11c30, label %dec_label_pc_11c34, label %dec_label_pc_11c04

dec_label_pc_11c34:                               ; preds = %bb83
  %v1_11c34 = urem i32 %v0_11c34, 4
  %v2_11c34 = icmp eq i32 %v1_11c34, 0
  br i1 %v2_11c34, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11c34
  %v3_11c38 = icmp eq i32 %v1_11c10.v6_11c10.v6_11c18.v6_11c20, 0
  br i1 %v3_11c38, label %bb76, label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %bb84, %dec_label_pc_11bfc
  %v0_11c54 = phi i32 [ %v3_11c28, %bb84 ], [ %v1_11bf0, %dec_label_pc_11bfc ]
  %v1_11c50 = phi i32 [ %v1_11c10.v6_11c10.v6_11c18.v6_11c20, %bb84 ], [ %v1_11bbc, %dec_label_pc_11bfc ]
  %v0_11c40 = phi i32 [ %v0_11c34, %bb84 ], [ %v2_11bfc, %dec_label_pc_11bfc ]
  %v5_11c44 = icmp slt i32 %v0_11c40, -2
  br i1 %v5_11c44, label %dec_label_pc_11c64, label %dec_label_pc_11c48

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c40
  %v8_11c40 = icmp eq i32 %v0_11c40, -2
  br i1 %v8_11c40, label %dec_label_pc_11c58, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c48
  %v3_11c4c = icmp ult i32 %v1_11c50, %v0_11c54
  br i1 %v3_11c4c, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11c4c
  %v2_11c4c = sub i32 %v1_11c50, %v0_11c54
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11c4c, %bb85
  %v0_11c5852 = phi i32 [ %v1_11c50, %dec_label_pc_11c4c ], [ %v2_11c4c, %bb85 ]
  %v3_11c54 = udiv i32 %v0_11c54, 2
  br label %dec_label_pc_11c58

dec_label_pc_11c58:                               ; preds = %dec_label_pc_11c48, %bb86
  %v0_11c60 = phi i32 [ %v0_11c54, %dec_label_pc_11c48 ], [ %v3_11c54, %bb86 ]
  %v1_11c5c = phi i32 [ %v1_11c50, %dec_label_pc_11c48 ], [ %v0_11c5852, %bb86 ]
  %v3_11c58 = icmp ult i32 %v1_11c5c, %v0_11c60
  br i1 %v3_11c58, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11c58
  %v2_11c58 = sub i32 %v1_11c5c, %v0_11c60
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11c58, %bb87
  %v0_11c6455 = phi i32 [ %v1_11c5c, %dec_label_pc_11c58 ], [ %v2_11c58, %bb87 ]
  %v3_11c60 = udiv i32 %v0_11c60, 2
  br label %dec_label_pc_11c64

dec_label_pc_11c64:                               ; preds = %dec_label_pc_11c40, %bb88
  %v2_11c68 = phi i32 [ %v0_11c54, %dec_label_pc_11c40 ], [ %v3_11c60, %bb88 ]
  %v1_11c68 = phi i32 [ %v1_11c50, %dec_label_pc_11c40 ], [ %v0_11c6455, %bb88 ]
  %v3_11c64 = icmp ult i32 %v1_11c68, %v2_11c68
  br i1 %v3_11c64, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11c64
  %v2_11c64 = sub i32 %v1_11c68, %v2_11c68
  br label %bb76

dec_label_pc_11c70:                               ; preds = %entry
  %v0_11c70 = load i32, i32* @lr, align 4
  %v0_11c74 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11c70)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c68, { 1, 2, 0 }
  uselistorder i32 %v0_11c54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11c34, { 1, 0, 2 }
  uselistorder i32 %v7_11c2c, { 1, 0 }
  uselistorder i32 %v3_11c28, { 1, 0 }
  uselistorder i32 %v1_11c10.v6_11c10.v6_11c18.v6_11c20, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11c1c, { 1, 0 }
  uselistorder i32 %v4_11c14, { 1, 0 }
  uselistorder i32 %v4_11c0c, { 1, 0 }
  uselistorder i32 %v6_11c2c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11bfc, { 1, 0 }
  uselistorder i32 %v1_11bf0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11bdc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11be8.pr3398, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11bbc, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11c64, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11c58, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_11c80 = icmp eq i32 %arg2, 0
  br i1 %v2_11c80, label %dec_label_pc_11d54, label %dec_label_pc_11c88

dec_label_pc_11c88:                               ; preds = %entry
  %v1_11c80 = icmp slt i32 %arg2, 0
  br i1 %v1_11c80, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11c88
  %v2_11c88 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11c88, %bb
  %v4_11ca0 = phi i32 [ %arg2, %dec_label_pc_11c88 ], [ %v2_11c88, %bb ]
  %v0_11c8c = load i32, i32* @r0, align 4
  %v1_11c8c = icmp slt i32 %v0_11c8c, 0
  br i1 %v1_11c8c, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11c90 = sub i32 0, %v0_11c8c
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11c98 = phi i32 [ %v0_11c8c, %bb79 ], [ %v2_11c90, %bb80 ]
  %v1_11c94 = add i32 %v4_11ca0, -1
  %v7_11c94 = icmp eq i32 %v4_11ca0, 1
  br i1 %v7_11c94, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11c98 = icmp eq i32 %v1_11c98, %v4_11ca0
  br i1 %v10_11c98, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11c98 = icmp ult i32 %v1_11c98, %v4_11ca0
  br i1 %v4_11c98, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11ca0 = and i32 %v1_11c94, %v4_11ca0
  %v8_11ca0 = icmp eq i32 %v6_11ca0, 0
  br i1 %v8_11ca0, label %.thread72, label %dec_label_pc_11cb0.preheader

dec_label_pc_11cb0.preheader:                     ; preds = %bb84
  %v2_11cb0107 = icmp ugt i32 %v4_11ca0, 268435455
  br i1 %v2_11cb0107, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11ca464 = phi i32 [ %v1_11c98, %bb84 ], [ 0, %.thread70 ]
  %v3_11ca4 = and i32 %v1_11ca464, %v1_11c94
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11cb0.preheader
  %v0_11cc4.pr35.lcssa = phi i32 [ %v4_11ca0, %dec_label_pc_11cb0.preheader ], [ %v4_11cb8, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11cb0.preheader ], [ %v2_11cbc9, %.thread2.thread7 ]
  br label %dec_label_pc_11cc4thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11cb0.preheader, %.thread2.thread7
  %storemerge109 = phi i32 [ %v2_11cbc9, %.thread2.thread7 ], [ 0, %dec_label_pc_11cb0.preheader ]
  %v0_11cc4.pr35108 = phi i32 [ %v4_11cb8, %.thread2.thread7 ], [ %v4_11ca0, %dec_label_pc_11cb0.preheader ]
  %v4_11cb4 = icmp ult i32 %v0_11cc4.pr35108, %v1_11c98
  br i1 %v4_11cb4, label %bb86, label %dec_label_pc_11cc4thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11cb8 = and i32 %v0_11cc4.pr35108, 268435456
  %v3_11cb8 = icmp eq i32 %v2_11cb8, 0
  %v4_11cb8 = mul i32 %v0_11cc4.pr35108, 16
  br i1 %v3_11cb8, label %.thread2.thread7, label %dec_label_pc_11cc4.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11cbc9 = add i32 %storemerge109, 4
  %v2_11cb0 = icmp ugt i32 %v4_11cb8, 268435455
  br i1 %v2_11cb0, label %.thread1, label %bb85

dec_label_pc_11cc4thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11cc4thread-pre-split.loopexit

dec_label_pc_11cc4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11cc4thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11cc4.pr35106 = phi i32 [ %v0_11cc4.pr35.lcssa, %.thread1 ], [ %v0_11cc4.pr35108, %dec_label_pc_11cc4thread-pre-split.loopexit.loopexit ]
  %storemerge103 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge109, %dec_label_pc_11cc4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11cc4thread-pre-split

dec_label_pc_11cc4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11cc4thread-pre-split.loopexit
  %v1_11cd041 = phi i32 [ %storemerge103, %dec_label_pc_11cc4thread-pre-split.loopexit ], [ %v2_11cd0, %.thread4 ]
  %v2_11cc836 = phi i32 [ %v1_11c98, %dec_label_pc_11cc4thread-pre-split.loopexit ], [ %v2_11cc8, %.thread4 ]
  %v0_11cc4.pr = phi i32 [ %v0_11cc4.pr35106, %dec_label_pc_11cc4thread-pre-split.loopexit ], [ %v3_11ccc, %.thread4 ]
  br label %dec_label_pc_11cc4

dec_label_pc_11cc4.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11cc4

dec_label_pc_11cc4:                               ; preds = %dec_label_pc_11cc4.loopexit, %dec_label_pc_11cc4thread-pre-split
  %v0_11cd8.pr = phi i32 [ %v1_11cd041, %dec_label_pc_11cc4thread-pre-split ], [ %storemerge109, %dec_label_pc_11cc4.loopexit ]
  %v2_11cc8 = phi i32 [ %v2_11cc836, %dec_label_pc_11cc4thread-pre-split ], [ %v1_11c98, %dec_label_pc_11cc4.loopexit ]
  %v1_11ccc = phi i32 [ %v0_11cc4.pr, %dec_label_pc_11cc4thread-pre-split ], [ %v4_11cb8, %dec_label_pc_11cc4.loopexit ]
  %v2_11cc4 = icmp slt i32 %v1_11ccc, 0
  br i1 %v2_11cc4, label %dec_label_pc_11cd8, label %bb87

bb87:                                             ; preds = %dec_label_pc_11cc4
  %v4_11cc8 = icmp ult i32 %v1_11ccc, %v2_11cc8
  br i1 %v4_11cc8, label %.thread4, label %dec_label_pc_11cd8

.thread4:                                         ; preds = %bb87
  %v3_11ccc = mul i32 %v1_11ccc, 2
  %v2_11cd0 = add i32 %v0_11cd8.pr, 1
  br label %dec_label_pc_11cc4thread-pre-split

dec_label_pc_11cd8:                               ; preds = %bb87, %dec_label_pc_11cc4
  %v2_11cd8 = add i32 %v0_11cd8.pr, -3
  %v5_11cdc = icmp slt i32 %v0_11cd8.pr, 3
  br i1 %v5_11cdc, label %dec_label_pc_11d1c, label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cd8, %bb91
  %v6_11d08 = phi i32 [ %v0_11d10, %bb91 ], [ %v2_11cd8, %dec_label_pc_11cd8 ]
  %v1_11ce4 = phi i32 [ %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, %bb91 ], [ %v2_11cc8, %dec_label_pc_11cd8 ]
  %v3_11d0410 = phi i32 [ %v3_11d04, %bb91 ], [ %v1_11ccc, %dec_label_pc_11cd8 ]
  %v3_11ce0 = icmp ult i32 %v1_11ce4, %v3_11d0410
  %v3_11ce4 = select i1 %v3_11ce0, i32 0, i32 %v3_11d0410
  %v1_11cec = sub i32 %v1_11ce4, %v3_11ce4
  %v4_11ce8 = udiv i32 %v3_11d0410, 2
  %v6_11ce8 = icmp ult i32 %v1_11cec, %v4_11ce8
  %v6_11cec = select i1 %v6_11ce8, i32 0, i32 %v4_11ce8
  %v1_11cec.v6_11cec = sub i32 %v1_11cec, %v6_11cec
  %.demorgan = and i1 %v3_11ce0, %v6_11ce8
  %v4_11cf0 = udiv i32 %v3_11d0410, 4
  %v6_11cf0 = icmp ult i32 %v1_11cec.v6_11cec, %v4_11cf0
  %v6_11cf4 = select i1 %v6_11cf0, i32 0, i32 %v4_11cf0
  %v1_11cec.v6_11cec.v6_11cf4 = sub i32 %v1_11cec.v6_11cec, %v6_11cf4
  %.demorgan76 = and i1 %.demorgan, %v6_11cf0
  %v4_11cf8 = udiv i32 %v3_11d0410, 8
  %v6_11cf8 = icmp ult i32 %v1_11cec.v6_11cec.v6_11cf4, %v4_11cf8
  %v6_11cfc = select i1 %v6_11cf8, i32 0, i32 %v4_11cf8
  %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc = sub i32 %v1_11cec.v6_11cec.v6_11cf4, %v6_11cfc
  %.demorgan77 = and i1 %.demorgan76, %v6_11cf8
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11ce0
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11ce0, %bb88
  %v2_11d00 = add i32 %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, -1
  %v4_11d00 = sub i32 0, %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc
  %v5_11d00 = and i32 %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, %v4_11d00
  %v3_11d04 = udiv i32 %v3_11d0410, 16
  %v5_11d08 = icmp slt i32 %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, 1
  br i1 %v5_11d08, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11d08 = add i32 %v6_11d08, -4
  %v9_11d08 = sub i32 3, %v6_11d08
  %v10_11d08 = and i32 %v9_11d08, %v6_11d08
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11d10 = phi i32 [ %v6_11d08, %bb89 ], [ %v7_11d08, %bb90 ]
  %v0_11d0c13.in = phi i32 [ %v2_11d00, %bb89 ], [ %v7_11d08, %bb90 ]
  %v1_11d0c12.in = phi i32 [ %v5_11d00, %bb89 ], [ %v10_11d08, %bb90 ]
  %v1_11d0c12 = icmp slt i32 %v1_11d0c12.in, 0
  %v0_11d0c13 = icmp slt i32 %v0_11d0c13.in, 0
  %v2_11d0c = xor i1 %v0_11d0c13, %v1_11d0c12
  br i1 %v2_11d0c, label %dec_label_pc_11d10, label %dec_label_pc_11ce0

dec_label_pc_11d10:                               ; preds = %bb91
  %v1_11d10 = urem i32 %v0_11d10, 4
  %v2_11d10 = icmp eq i32 %v1_11d10, 0
  br i1 %v2_11d10, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11d10
  %v3_11d14 = icmp eq i32 %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, 0
  br i1 %v3_11d14, label %.thread6, label %dec_label_pc_11d1c

dec_label_pc_11d1c:                               ; preds = %bb92, %dec_label_pc_11cd8
  %v0_11d30 = phi i32 [ %v3_11d04, %bb92 ], [ %v1_11ccc, %dec_label_pc_11cd8 ]
  %v1_11d2c = phi i32 [ %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, %bb92 ], [ %v2_11cc8, %dec_label_pc_11cd8 ]
  %v0_11d1c = phi i32 [ %v0_11d10, %bb92 ], [ %v2_11cd8, %dec_label_pc_11cd8 ]
  %v5_11d20 = icmp slt i32 %v0_11d1c, -2
  br i1 %v5_11d20, label %dec_label_pc_11d40, label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d1c
  %v8_11d1c = icmp eq i32 %v0_11d1c, -2
  br i1 %v8_11d1c, label %dec_label_pc_11d34, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d24
  %v3_11d28 = icmp ult i32 %v1_11d2c, %v0_11d30
  br i1 %v3_11d28, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11d28
  %v2_11d28 = sub i32 %v1_11d2c, %v0_11d30
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11d28, %bb93
  %v0_11d3454 = phi i32 [ %v1_11d2c, %dec_label_pc_11d28 ], [ %v2_11d28, %bb93 ]
  %v3_11d30 = udiv i32 %v0_11d30, 2
  br label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d24, %bb94
  %v0_11d3c = phi i32 [ %v0_11d30, %dec_label_pc_11d24 ], [ %v3_11d30, %bb94 ]
  %v1_11d38 = phi i32 [ %v1_11d2c, %dec_label_pc_11d24 ], [ %v0_11d3454, %bb94 ]
  %v3_11d34 = icmp ult i32 %v1_11d38, %v0_11d3c
  br i1 %v3_11d34, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11d34
  %v2_11d34 = sub i32 %v1_11d38, %v0_11d3c
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11d34, %bb95
  %v0_11d4057 = phi i32 [ %v1_11d38, %dec_label_pc_11d34 ], [ %v2_11d34, %bb95 ]
  %v3_11d3c = udiv i32 %v0_11d3c, 2
  br label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d1c, %bb96
  %v2_11d44 = phi i32 [ %v0_11d30, %dec_label_pc_11d1c ], [ %v3_11d3c, %bb96 ]
  %v1_11d44 = phi i32 [ %v1_11d2c, %dec_label_pc_11d1c ], [ %v0_11d4057, %bb96 ]
  %v3_11d40 = icmp ult i32 %v1_11d44, %v2_11d44
  br i1 %v3_11d40, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11d40
  %v2_11d40 = sub i32 %v1_11d44, %v2_11d44
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11d40, %bb83, %.thread72, %dec_label_pc_11d10, %bb92, %bb97
  %v1_11d4c = phi i32 [ %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, %dec_label_pc_11d10 ], [ 0, %bb92 ], [ %v1_11d44, %dec_label_pc_11d40 ], [ %v2_11d40, %bb97 ], [ %v3_11ca4, %.thread72 ], [ %v1_11c98, %bb83 ]
  br i1 %v1_11c8c, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11d4c = sub i32 0, %v1_11d4c
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11d50 = phi i32 [ %v1_11d4c, %.thread6 ], [ %v2_11d4c, %bb98 ]
  ret i32 %v1_11d50

dec_label_pc_11d54:                               ; preds = %entry
  %v0_11d54 = load i32, i32* @lr, align 4
  %v0_11d58 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11d54)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11d30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11d10, { 1, 0, 2 }
  uselistorder i32 %v7_11d08, { 1, 0 }
  uselistorder i32 %v3_11d04, { 1, 0 }
  uselistorder i32 %v1_11cec.v6_11cec.v6_11cf4.v6_11cfc, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11cf8, { 1, 0 }
  uselistorder i32 %v4_11cf0, { 1, 0 }
  uselistorder i32 %v4_11ce8, { 1, 0 }
  uselistorder i32 %v6_11d08, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11cd8, { 1, 0 }
  uselistorder i32 %v1_11ccc, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11cc8, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11cb8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11cc4.pr35108, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11c98, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11ca0, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 4, 5, 6, 2, 0, 3, 1 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 8, 10, 9, 7, 6, 5, 4, 14, 15, 16, 17, 11 }
  uselistorder i32 8, { 7, 8, 33, 16, 9, 10, 15, 11, 18, 39, 19, 12, 13, 14, 34, 24, 35, 25, 36, 26, 37, 27, 38, 17, 40, 41, 42, 43, 45, 28, 46, 29, 47, 48, 44, 49, 50, 51, 3, 52, 53, 54, 4, 55, 56, 57, 58, 59, 60, 61, 5, 62, 63, 64, 65, 66, 67, 68, 6, 72, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 22, 92, 23, 93, 30, 94, 0, 1, 32, 69, 70, 31, 71, 2 }
  uselistorder i32 3, { 59, 21, 60, 22, 144, 61, 38, 23, 25, 62, 41, 63, 2, 64, 65, 66, 67, 39, 4, 68, 69, 70, 1, 24, 71, 42, 72, 40, 73, 43, 26, 44, 45, 46, 47, 0, 74, 75, 76, 77, 78, 79, 80, 6, 5, 48, 81, 27, 82, 83, 84, 85, 86, 8, 7, 49, 87, 28, 88, 89, 90, 91, 50, 92, 10, 9, 30, 93, 29, 94, 95, 96, 97, 51, 98, 12, 11, 32, 99, 31, 100, 52, 102, 103, 104, 105, 106, 107, 53, 108, 54, 109, 33, 110, 111, 112, 113, 114, 14, 13, 55, 34, 115, 116, 117, 118, 119, 120, 16, 15, 56, 121, 35, 122, 123, 124, 125, 126, 127, 128, 18, 17, 57, 129, 36, 130, 131, 132, 133, 134, 135, 136, 20, 19, 58, 137, 37, 138, 139, 140, 142, 143, 141, 3, 101 }
  uselistorder i32 2, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 119, 13, 14, 15, 16, 17, 70, 71, 52, 53, 72, 136, 73, 76, 124, 77, 125, 75, 126, 130, 62, 121, 63, 122, 64, 123, 65, 127, 66, 128, 67, 129, 68, 135, 131, 132, 133, 134, 59, 78, 137, 18, 19, 138, 139, 79, 140, 55, 120, 51, 141, 74, 142, 20, 80, 225, 82, 143, 84, 144, 83, 145, 81, 85, 146, 21, 22, 86, 147, 60, 87, 88, 89, 90, 54, 58, 148, 149, 150, 212, 213, 151, 152, 153, 154, 155, 156, 0, 23, 24, 25, 26, 27, 28, 91, 157, 69, 158, 159, 160, 161, 162, 1, 29, 30, 31, 32, 33, 34, 93, 92, 163, 164, 35, 165, 166, 95, 168, 56, 167, 47, 48, 2, 36, 37, 38, 39, 40, 96, 169, 94, 170, 171, 41, 172, 173, 98, 175, 57, 174, 49, 50, 3, 42, 43, 44, 45, 46, 99, 176, 97, 177, 179, 180, 181, 182, 183, 184, 185, 101, 186, 100, 187, 188, 189, 190, 191, 103, 102, 192, 193, 194, 195, 196, 197, 198, 199, 105, 200, 104, 201, 202, 203, 204, 107, 205, 108, 206, 207, 208, 209, 109, 210, 106, 211, 214, 215, 216, 217, 218, 219, 111, 220, 110, 221, 222, 112, 113, 114, 223, 226, 115, 116, 117, 227, 224, 118, 61, 178 }
  uselistorder i32 4, { 5, 6, 42, 7, 8, 43, 328, 329, 136, 9, 10, 69, 51, 252, 242, 38, 165, 166, 167, 157, 158, 168, 169, 146, 147, 72, 137, 138, 139, 73, 140, 74, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 71, 160, 161, 162, 159, 44, 170, 52, 75, 76, 11, 171, 12, 172, 173, 13, 14, 174, 175, 33, 176, 34, 163, 70, 164, 181, 77, 183, 78, 184, 79, 185, 186, 182, 177, 80, 178, 179, 180, 319, 187, 41, 40, 39, 188, 81, 15, 16, 17, 18, 19, 189, 35, 190, 36, 191, 192, 193, 194, 195, 95, 196, 197, 198, 199, 96, 97, 1, 200, 82, 201, 53, 202, 203, 204, 98, 205, 206, 99, 100, 2, 45, 207, 54, 208, 55, 209, 210, 101, 211, 212, 213, 214, 215, 102, 103, 216, 217, 83, 218, 3, 46, 219, 56, 220, 84, 221, 222, 104, 223, 224, 225, 226, 227, 105, 106, 228, 229, 85, 230, 4, 47, 231, 57, 232, 86, 233, 20, 243, 244, 107, 245, 246, 247, 108, 109, 88, 248, 87, 250, 58, 251, 253, 110, 254, 255, 111, 112, 256, 59, 257, 60, 258, 259, 260, 261, 113, 262, 263, 264, 114, 115, 89, 265, 48, 61, 266, 62, 267, 268, 269, 270, 271, 272, 90, 273, 91, 274, 116, 275, 276, 277, 117, 118, 92, 278, 49, 279, 63, 280, 64, 281, 282, 283, 119, 120, 284, 121, 285, 286, 122, 123, 50, 287, 65, 288, 66, 289, 290, 291, 292, 293, 93, 294, 67, 295, 320, 321, 322, 323, 94, 325, 68, 326, 124, 296, 297, 21, 125, 298, 299, 22, 126, 300, 301, 23, 127, 302, 303, 24, 128, 304, 305, 25, 129, 306, 307, 26, 308, 130, 309, 310, 27, 131, 311, 312, 28, 132, 313, 314, 29, 133, 315, 316, 30, 134, 317, 318, 31, 324, 234, 235, 236, 237, 32, 238, 239, 0, 240, 135, 241, 249, 327, 37 }
  uselistorder i32 16, { 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 41, 64, 30, 65, 31, 42, 62, 63, 66, 67, 68, 26, 61, 69, 14, 15, 24, 58, 16, 70, 17, 43, 32, 71, 44, 45, 72, 73, 47, 74, 75, 76, 77, 78, 1, 46, 79, 80, 81, 49, 82, 83, 84, 85, 86, 2, 48, 87, 50, 88, 89, 90, 18, 91, 19, 92, 59, 20, 51, 52, 93, 94, 3, 34, 95, 33, 96, 53, 97, 98, 99, 21, 100, 22, 101, 60, 23, 54, 55, 102, 103, 4, 36, 104, 35, 105, 27, 107, 108, 109, 110, 56, 111, 112, 113, 114, 115, 116, 117, 28, 118, 119, 120, 121, 123, 122, 124, 125, 126, 127, 128, 129, 130, 29, 131, 132, 133, 134, 135, 137, 136, 138, 139, 140, 141, 142, 143, 57, 144, 145, 146, 38, 147, 37, 40, 148, 39, 106 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11d40, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11d34, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11ce0, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_11d64 = load i32, i32* @r0, align 4
  ret i32 %v1_11d64
}

define i32 @function_11d68(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d68:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d6c = load i32, i32* @global_var_1a00c.414, align 4
  %v2_11d70 = icmp eq i32 %v3_11d6c, -1
  %v3_11d74 = load i32, i32* @r4, align 4
  store i32 %v3_11d74, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1a00c.414 to i32), i32* %r4.global-to-local, align 4
  br i1 %v2_11d70, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_11d68
  store i32 %v3_11d74, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_11d68, %.preheader
  %v0_11d84 = phi i32 [ %v3_11d88, %.preheader ], [ %v3_11d6c, %dec_label_pc_11d68 ]
  call void @__pseudo_branch(i32 %v0_11d84)
  %v0_11d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d88 = add i32 %v0_11d88, -4
  %v2_11d88 = inttoptr i32 %v1_11d88 to i32*
  %v3_11d88 = load i32, i32* %v2_11d88, align 4
  store i32 %v1_11d88, i32* %r4.global-to-local, align 4
  %v3_11d8c = icmp eq i32 %v3_11d88, -1
  br i1 %v3_11d8c, label %dec_label_pc_11d94, label %.preheader

dec_label_pc_11d94:                               ; preds = %.preheader
  %v2_11d94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d94, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_11d88, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 4, 0, 1, 3, 2 }
  uselistorder i32 -1, { 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0, 1, 2, 24, 27, 28, 3, 50, 51, 52, 158, 159, 53, 54, 55, 56, 57, 58, 59, 155, 156, 60, 61, 62, 63, 64, 65, 66, 67, 68, 153, 29, 154, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 157, 83, 4, 84, 85, 5, 86, 87, 88, 89, 90, 30, 160, 91, 92, 161, 93, 94, 6, 33, 162, 35, 163, 95, 34, 164, 7, 96, 97, 98, 36, 165, 8, 99, 100, 101, 102, 103, 104, 9, 32, 105, 106, 107, 108, 109, 110, 111, 14, 112, 113, 114, 115, 116, 117, 15, 118, 119, 120, 16, 121, 122, 123, 17, 125, 124, 12, 126, 127, 18, 129, 128, 13, 130, 131, 19, 132, 133, 134, 135, 20, 31, 136, 137, 21, 138, 139, 140, 22, 141, 142, 143, 23, 144, 145, 146, 10, 25, 11, 26, 147, 148, 149, 150, 151, 152, 37, 38, 39 }
  uselistorder i32 1, { 408, 64, 288, 719, 720, 289, 721, 722, 236, 723, 564, 565, 566, 247, 567, 411, 410, 409, 27, 35, 30, 31, 33, 32, 29, 28, 34, 0, 556, 557, 558, 559, 257, 637, 638, 258, 639, 413, 412, 231, 232, 568, 569, 570, 325, 414, 13, 12, 11, 9, 10, 710, 270, 271, 1, 2, 711, 519, 521, 520, 326, 571, 237, 230, 229, 681, 110, 572, 573, 574, 15, 14, 16, 640, 415, 182, 183, 184, 186, 187, 189, 188, 185, 666, 667, 416, 168, 167, 166, 165, 169, 170, 641, 642, 417, 114, 113, 112, 111, 115, 503, 337, 504, 525, 338, 339, 510, 511, 516, 334, 497, 498, 336, 499, 500, 335, 501, 502, 505, 333, 506, 507, 332, 508, 509, 331, 512, 513, 330, 514, 515, 329, 517, 518, 526, 340, 252, 527, 341, 528, 530, 531, 529, 532, 342, 533, 496, 272, 536, 534, 343, 535, 327, 522, 328, 523, 290, 524, 538, 344, 539, 540, 283, 541, 542, 251, 273, 548, 549, 248, 345, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 8, 173, 171, 172, 178, 181, 174, 175, 177, 176, 180, 179, 543, 544, 346, 545, 546, 347, 547, 432, 75, 73, 74, 67, 66, 70, 72, 71, 69, 65, 68, 537, 348, 434, 433, 227, 228, 226, 713, 259, 712, 282, 435, 22, 23, 21, 19, 18, 25, 26, 17, 20, 24, 643, 437, 436, 61, 62, 60, 59, 58, 63, 438, 292, 550, 551, 291, 552, 349, 351, 350, 352, 553, 554, 353, 354, 355, 357, 356, 358, 359, 360, 449, 448, 447, 446, 445, 444, 443, 442, 441, 406, 440, 439, 190, 193, 191, 192, 195, 194, 249, 361, 293, 555, 362, 363, 450, 364, 560, 276, 561, 562, 365, 238, 274, 563, 250, 366, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 124, 125, 127, 126, 580, 4, 575, 367, 576, 3, 577, 284, 578, 253, 254, 579, 581, 285, 582, 465, 464, 463, 402, 462, 403, 461, 128, 129, 690, 294, 691, 295, 692, 5, 693, 6, 7, 583, 584, 585, 586, 587, 588, 368, 589, 260, 369, 370, 590, 296, 591, 466, 46, 43, 42, 44, 45, 50, 51, 53, 52, 48, 49, 47, 592, 593, 277, 594, 595, 596, 371, 597, 261, 372, 298, 297, 373, 598, 374, 599, 467, 36, 39, 40, 41, 38, 37, 600, 601, 278, 602, 603, 604, 375, 605, 239, 240, 262, 376, 303, 302, 377, 606, 299, 607, 300, 608, 301, 609, 472, 471, 470, 469, 468, 197, 199, 201, 200, 202, 196, 198, 203, 610, 611, 279, 612, 613, 614, 378, 615, 241, 242, 263, 379, 311, 310, 380, 616, 309, 617, 308, 618, 304, 619, 305, 620, 306, 621, 381, 622, 307, 623, 477, 476, 475, 474, 473, 117, 119, 121, 120, 122, 116, 118, 123, 644, 645, 646, 647, 648, 649, 255, 256, 650, 651, 652, 653, 654, 655, 656, 657, 382, 658, 659, 383, 660, 661, 664, 662, 663, 480, 479, 478, 151, 152, 153, 154, 155, 156, 157, 161, 160, 162, 163, 159, 158, 150, 164, 668, 669, 670, 671, 672, 384, 264, 385, 482, 481, 109, 105, 101, 99, 100, 98, 107, 108, 102, 106, 103, 104, 673, 674, 675, 280, 676, 677, 678, 265, 386, 314, 313, 387, 679, 312, 680, 483, 139, 138, 137, 135, 134, 141, 142, 144, 143, 136, 140, 682, 683, 684, 281, 685, 686, 687, 266, 388, 317, 316, 389, 688, 315, 689, 488, 487, 486, 485, 484, 210, 209, 208, 207, 205, 204, 213, 214, 216, 215, 206, 212, 211, 694, 695, 696, 390, 697, 698, 699, 700, 701, 702, 391, 703, 267, 392, 319, 318, 393, 704, 489, 89, 88, 92, 87, 86, 94, 95, 96, 97, 93, 90, 91, 705, 286, 244, 706, 394, 708, 707, 243, 395, 321, 320, 404, 490, 54, 55, 57, 56, 714, 287, 246, 715, 396, 717, 716, 245, 397, 323, 322, 405, 491, 133, 131, 132, 130, 709, 324, 398, 492, 218, 217, 223, 221, 224, 220, 222, 225, 219, 718, 84, 624, 76, 625, 399, 628, 400, 629, 630, 626, 627, 631, 632, 633, 634, 268, 635, 269, 77, 81, 83, 78, 79, 80, 82, 636, 275, 401, 493, 148, 149, 147, 146, 145, 665, 85, 494, 495, 235, 234, 233, 407 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_11d9c() local_unnamed_addr {
dec_label_pc_11d9c:
  %v5_11da0 = load i32, i32* @r0, align 4
  ret i32 %v5_11da0

; uselistorder directives
  uselistorder i32* @r0, { 5, 10, 75, 11, 76, 12, 77, 14, 13, 7, 45, 0, 8, 46, 47, 2, 18, 19, 20, 23, 24, 25, 26, 27, 3, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 1, 55, 56, 57, 58, 59, 60, 61, 72, 73, 4, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 6, 9, 15, 16, 17 }
}

define i32 @function_11da4() local_unnamed_addr {
entry:
  %v3_11da8 = load i32, i32* @r4, align 4
  %v0_11db0 = call i32 @function_8d7c()
  call void @__pseudo_branch(i32 %v3_11da8)
  ret i32 %v0_11db0

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 6, 8, 9, 10, 2, 3, 4, 0, 5, 7 }
  uselistorder i32 0, { 0, 739, 66, 740, 741, 181, 180, 417, 55, 56, 57, 58, 419, 418, 34, 33, 67, 742, 743, 744, 745, 747, 746, 1, 748, 749, 183, 182, 420, 59, 60, 61, 62, 422, 421, 36, 35, 32, 41, 750, 423, 2, 751, 752, 63, 753, 754, 755, 756, 757, 93, 424, 427, 425, 426, 758, 428, 75, 94, 539, 540, 64, 541, 542, 543, 432, 3, 186, 95, 96, 219, 37, 97, 4, 6, 5, 225, 54, 544, 545, 729, 728, 730, 731, 30, 98, 732, 101, 100, 99, 220, 221, 222, 103, 102, 226, 546, 547, 104, 698, 699, 76, 105, 548, 106, 470, 107, 673, 674, 108, 644, 645, 449, 109, 110, 471, 68, 472, 476, 473, 450, 451, 452, 453, 460, 443, 433, 231, 444, 445, 434, 233, 446, 447, 435, 232, 448, 466, 467, 454, 455, 456, 436, 230, 457, 458, 437, 229, 459, 461, 438, 228, 462, 469, 439, 227, 463, 468, 464, 38, 184, 185, 465, 429, 474, 234, 475, 188, 477, 235, 478, 481, 482, 112, 187, 479, 480, 236, 237, 483, 484, 485, 486, 440, 47, 238, 488, 489, 490, 491, 492, 493, 494, 495, 239, 496, 65, 497, 77, 498, 431, 499, 500, 501, 502, 503, 504, 430, 505, 506, 507, 111, 240, 241, 508, 511, 512, 513, 514, 515, 9, 113, 509, 114, 510, 7, 115, 487, 646, 647, 516, 517, 116, 518, 519, 520, 521, 522, 523, 524, 242, 48, 243, 525, 8, 526, 192, 527, 528, 244, 245, 223, 120, 119, 441, 442, 224, 118, 117, 189, 191, 246, 529, 121, 122, 530, 531, 532, 533, 534, 535, 536, 537, 538, 123, 124, 247, 549, 550, 551, 552, 553, 71, 554, 556, 555, 69, 70, 125, 190, 248, 557, 193, 194, 195, 72, 126, 42, 127, 559, 560, 81, 78, 79, 80, 44, 558, 561, 562, 563, 564, 565, 566, 10, 11, 12, 13, 14, 567, 568, 128, 249, 569, 250, 570, 251, 571, 252, 572, 253, 573, 254, 574, 255, 575, 196, 576, 129, 130, 131, 578, 579, 577, 581, 582, 580, 15, 16, 17, 18, 19, 583, 132, 584, 585, 198, 586, 256, 587, 257, 588, 258, 589, 259, 590, 260, 591, 261, 592, 197, 593, 262, 594, 134, 133, 135, 596, 597, 595, 598, 599, 39, 263, 605, 601, 602, 603, 604, 49, 50, 20, 21, 22, 23, 24, 600, 136, 73, 606, 607, 203, 608, 202, 609, 201, 610, 200, 611, 199, 612, 264, 613, 265, 614, 138, 137, 139, 616, 617, 615, 618, 619, 40, 266, 625, 621, 622, 623, 624, 51, 52, 25, 26, 27, 28, 29, 620, 140, 74, 626, 627, 205, 628, 204, 629, 267, 630, 648, 85, 84, 82, 83, 649, 650, 43, 651, 652, 653, 654, 655, 141, 656, 657, 268, 658, 659, 660, 661, 145, 142, 143, 144, 662, 663, 664, 665, 269, 666, 667, 208, 669, 207, 670, 206, 671, 270, 672, 675, 676, 88, 86, 87, 45, 677, 678, 679, 680, 146, 681, 682, 271, 209, 683, 272, 684, 147, 150, 149, 148, 687, 688, 686, 685, 273, 690, 689, 691, 151, 692, 693, 212, 694, 211, 695, 210, 696, 274, 697, 152, 155, 154, 153, 702, 703, 701, 700, 275, 705, 704, 706, 707, 156, 215, 708, 214, 709, 213, 710, 276, 711, 712, 713, 714, 715, 92, 89, 90, 91, 46, 716, 717, 718, 157, 719, 158, 720, 721, 218, 722, 217, 723, 216, 724, 277, 725, 163, 279, 161, 162, 159, 160, 726, 165, 164, 280, 281, 166, 278, 171, 283, 169, 170, 167, 168, 733, 173, 172, 174, 282, 727, 734, 175, 735, 631, 176, 632, 633, 177, 634, 635, 178, 284, 636, 637, 31, 638, 639, 640, 641, 642, 285, 643, 179, 668, 738, 736, 53, 737, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770 }
  uselistorder i32* @r4, { 20, 413, 109, 110, 111, 112, 48, 49, 322, 323, 324, 284, 285, 286, 21, 22, 23, 24, 50, 51, 25, 28, 29, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 52, 53, 38, 39, 54, 55, 56, 57, 58, 59, 40, 41, 42, 43, 44, 45, 46, 47, 62, 63, 64, 65, 66, 67, 68, 0, 69, 60, 61, 397, 398, 399, 400, 287, 288, 289, 290, 291, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 114, 115, 1, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 3, 129, 4, 130, 5, 131, 6, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 7, 152, 8, 153, 9, 154, 10, 155, 156, 157, 11, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 12, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 13, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 14, 341, 15, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 16, 357, 17, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 18, 373, 19, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 404, 405, 409, 410, 411, 395, 396, 406, 407, 408, 277, 275, 276, 278, 279, 280, 281, 282, 283, 412, 414 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_1a190 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1a190, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 0, 11, 1, 24, 15, 28, 25, 23, 26, 2, 3, 4, 5, 6, 14, 7, 13, 8, 12, 9, 10, 16, 17, 18, 27, 19, 20, 22, 21, 29 }
  uselistorder i1* @cpsr_z, { 5, 1, 2, 0, 3, 4 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_4() local_unnamed_addr

declare i32* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_6() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
